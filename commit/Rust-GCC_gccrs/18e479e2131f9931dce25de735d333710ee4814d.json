{"sha": "18e479e2131f9931dce25de735d333710ee4814d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThlNDc5ZTIxMzFmOTkzMWRjZTI1ZGU3MzVkMzMzNzEwZWU0ODE0ZA==", "commit": {"author": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-04-19T12:19:44Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-04-19T12:19:44Z"}, "message": "[multiple changes]\n\n2005-04-19  Andrew John Hughes  <gnu_andrew@member.fsf.org>\n\n\t* gnu/xml/dom/html2/DomHTMLParser.java:\n\tChanged 'enum' references to become 'enumeration'.\n\n2005-04-19  Audrius Meskauskas  <audriusa@bluewin.ch>\n\n\t* gnu/xml/dom/html2/DomHTMLParser.java: New file.\n\n2005-04-19  Andrew John Hughes  <gnu_andrew@member.fsf.org>\n\n\t* gnu/javax/swing/text/html/parser/htmlAttributeSet.java:\n\t(getAttributeNames()): Replaced 'enum' with 'enumeration'.\n\t* gnu/javax/swing/text/html/parser/htmlValidator.java:\n\t(validateParameters(TagElement,htmlAttributeSet)):\n\tReplaced 'enum' with 'enumeration'.\n\t(validateAttribute(TagElement,htmlAttributeSet,Enumeration,Enumeration)):\n\tLikewise.\n\n2005-04-19  Audrius Meskauskas  <audriusa@bluewin.ch>\n\n\t* javax/swing/text/html/parser/Entity.java (getType): New method.\n\t* javax/swing/text/html/parser/DocumentParser.java:\n\tInherit from javax.swing.text.html.parser.Parser.\n\n2005-04-19  Chris Burdess  <dog@gnu.org>\n\n\t* gnu/xml/dom/html2/DomHTMLDocument.java: Fixed element creation and\n\tcheck for HTML/XHTML namespace.\n\n2005-04-19  Audrius Meskauskas  <audriusa@bluewin.ch>\n\n\t* javax/swing/text/html/parser/Parser.java,\n\tjavax/swing/text/html/parser/Entity.java:\n\tInheriting from DTDConstants.\n\t* javax/swing/text/html/parser/AttributeList.java\n\t(getValues): Changed return type.\n\t* javax/swing/text/html/parser/DocumentParser\n\t(parse): Adding the callback parameter that receives\n\tthe parsing events.\n\n2005-04-19  Chris Burdess  <dog@gnu.org>\n\n\t* gnu/xml/dom/DomImpl.java,\n\tgnu/xml/dom/html2/DomHTMLAnchorElement.java,\n\tgnu/xml/dom/html2/DomHTMLDocument.java,\n\tgnu/xml/dom/html2/DomHTMLElement.java,\n\tgnu/xml/dom/html2/DomHTMLFormElement.java,\n\tgnu/xml/dom/html2/DomHTMLFrameElement.java,\n\tgnu/xml/dom/html2/DomHTMLIFrameElement.java,\n\tgnu/xml/dom/html2/DomHTMLImpl.java,\n\tgnu/xml/dom/html2/DomHTMLInputElement.java,\n\tgnu/xml/dom/html2/DomHTMLObjectElement.java,\n\tgnu/xml/dom/html2/DomHTMLOptionElement.java,\n\tgnu/xml/dom/html2/DomHTMLSelectElement.java,\n\tgnu/xml/dom/html2/DomHTMLTableCellElement.java,\n\tgnu/xml/dom/html2/DomHTMLTableElement.java,\n\tgnu/xml/dom/html2/DomHTMLTableRowElement.java,\n\tgnu/xml/dom/html2/DomHTMLTableSectionElement.java,\n\tgnu/xml/dom/html2/DomHTMLTextAreaElement.java: JAXP integration,\n\tUI events, and tree utility functions.\n\n2005-04-19  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/javax/swing/text/html/parser/HTML_401F.java,\n\tgnu/javax/swing/text/html/parser/gnuDTD.java,\n\tgnu/javax/swing/text/html/parser/models/node.java:\n\tReworked import statements.\n\n2005-04-19  Audrius Meskauskas, Lithuania  <AudriusA@Bioinformatics.org>\n\n\t* javax/swing/text/html/HTMLDocument.java: New file.\n\n2005-04-19  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/swing/text/html/HTMLFrameHyperlinkEvent.java:\n\tReformatted.\n\t* javax/swing/text/html/parser/AttributeList.java:\n\tFixed order of modifiers.\n\t(AttributeList): Made final.\n\t* javax/swing/text/html/parser/ContentModel.java:\n\tFixed html characters in javadocs.\n\t* javax/swing/text/html/parser/DTD.java\n\t(DTD): Don't implement java.io.Serializable directly.\n\t(getElement): Simplified.\n\t* javax/swing/text/html/parser/DTDConstants.java:\n\tReformatted file.\n\t* javax/swing/text/html/parser/Element.java:\n\tFixed order of modifiers.\n\t* javax/swing/text/html/parser/Parser.java:\n\tReformatted. Don't use fully-qualified class names.\n\t* javax/swing/text/html/parser/ParserDelegator.java:\n\tFixed order of modifiers.\n\t* javax/swing/text/rtf/RTFParser.java:\n\tRe-ordered import statements.\n\t* javax/swing/text/rtf/RTFScanner.java:\n\tRemoved unused import statement.\n\n2005-04-19  Chris Burdess  <dog@gnu.org>\n\n\t* gnu/xml/dom/html2/DomHTMLButtonElement.java,\n\tgnu/xml/dom/html2/DomHTMLCollection.java,\n\tgnu/xml/dom/html2/DomHTMLDocument.java,\n\tgnu/xml/dom/html2/DomHTMLElement.java: Extensions for new element\n\ttypes.\n\t* gnu/xml/dom/html2/DomHTMLDListElement.java,\n\tgnu/xml/dom/html2/DomHTMLDirectoryElement.java,\n\tgnu/xml/dom/html2/DomHTMLDivElement.java,\n\tgnu/xml/dom/html2/DomHTMLFieldSetElement.java,\n\tgnu/xml/dom/html2/DomHTMLFontElement.java,\n\tgnu/xml/dom/html2/DomHTMLFormElement.java,\n\tgnu/xml/dom/html2/DomHTMLFrameElement.java,\n\tgnu/xml/dom/html2/DomHTMLFrameSetElement.java,\n\tgnu/xml/dom/html2/DomHTMLHRElement.java,\n\tgnu/xml/dom/html2/DomHTMLHeadElement.java,\n\tgnu/xml/dom/html2/DomHTMLHeadingElement.java,\n\tgnu/xml/dom/html2/DomHTMLHtmlElement.java,\n\tgnu/xml/dom/html2/DomHTMLIFrameElement.java,\n\tgnu/xml/dom/html2/DomHTMLImageElement.java,\n\tgnu/xml/dom/html2/DomHTMLInputElement.java,\n\tgnu/xml/dom/html2/DomHTMLIsIndexElement.java,\n\tgnu/xml/dom/html2/DomHTMLLIElement.java,\n\tgnu/xml/dom/html2/DomHTMLLabelElement.java,\n\tgnu/xml/dom/html2/DomHTMLLegendElement.java,\n\tgnu/xml/dom/html2/DomHTMLLinkElement.java,\n\tgnu/xml/dom/html2/DomHTMLMapElement.java,\n\tgnu/xml/dom/html2/DomHTMLMenuElement.java,\n\tgnu/xml/dom/html2/DomHTMLMetaElement.java,\n\tgnu/xml/dom/html2/DomHTMLModElement.java,\n\tgnu/xml/dom/html2/DomHTMLOListElement.java,\n\tgnu/xml/dom/html2/DomHTMLObjectElement.java,\n\tgnu/xml/dom/html2/DomHTMLOptGroupElement.java,\n\tgnu/xml/dom/html2/DomHTMLOptionElement.java,\n\tgnu/xml/dom/html2/DomHTMLParagraphElement.java,\n\tgnu/xml/dom/html2/DomHTMLParamElement.java,\n\tgnu/xml/dom/html2/DomHTMLPreElement.java,\n\tgnu/xml/dom/html2/DomHTMLQuoteElement.java,\n\tgnu/xml/dom/html2/DomHTMLScriptElement.java,\n\tgnu/xml/dom/html2/DomHTMLSelectElement.java,\n\tgnu/xml/dom/html2/DomHTMLStyleElement.java,\n\tgnu/xml/dom/html2/DomHTMLTableCaptionElement.java,\n\tgnu/xml/dom/html2/DomHTMLTableCellElement.java,\n\tgnu/xml/dom/html2/DomHTMLTableColElement.java,\n\tgnu/xml/dom/html2/DomHTMLTableElement.java,\n\tgnu/xml/dom/html2/DomHTMLTableRowElement.java,\n\tgnu/xml/dom/html2/DomHTMLTableSectionElement.java,\n\tgnu/xml/dom/html2/DomHTMLTextAreaElement.java,\n\tgnu/xml/dom/html2/DomHTMLTitleElement.java,\n\tgnu/xml/dom/html2/DomHTMLUListElement.java: New files.\n\n2005-04-19  Audrius Meskauskas  <audriusa@bluewin.ch>\n\n\t* javax/swing/text/ChangedCharSetException.java,\n\tjavax/swing/text/html/HTMLEditorKit.java,\n\tjavax/swing/text/html/HTMLFrameHyperlinkEvent.java,\n\tjavax/swing/text/html/parser/AttributeList.java,\n\tjavax/swing/text/html/parser/ContentModel.java,\n\tjavax/swing/text/html/parser/DocumentParser.java,\n\tjavax/swing/text/html/parser/DTD.java,\n\tjavax/swing/text/html/parser/DTDConstants.java,\n\tjavax/swing/text/html/parser/Element.java,\n\tjavax/swing/text/html/parser/Entity.java,\n\tjavax/swing/text/html/parser/Parser.java,\n\tjavax/swing/text/html/parser/TagElement.java,\n\tgnu/javax/swing/text/html/package.html,\n\tgnu/javax/swing/text/html/parser/gnuDTD.java,\n\tgnu/javax/swing/text/html/parser/HTML_401F.java,\n\tgnu/javax/swing/text/html/parser/htmlAttributeSet.java,\n\tgnu/javax/swing/text/html/parser/htmlValidator.java,\n\tgnu/javax/swing/text/html/parser/package.html,\n\tgnu/javax/swing/text/html/parser/models/list.java,\n\tgnu/javax/swing/text/html/parser/models/node.java,\n\tgnu/javax/swing/text/html/parser/models/noTagModel.java,\n\tgnu/javax/swing/text/html/parser/models/package.html,\n\tgnu/javax/swing/text/html/parser/models/PCDATAonly_model.java,\n\tgnu/javax/swing/text/html/parser/models/TableRowContentModel.java,\n\tgnu/javax/swing/text/html/parser/models/transformer.java,\n\tgnu/javax/swing/text/html/parser/support/gnuStringIntMapper.java,\n\tgnu/javax/swing/text/html/parser/support/package.html,\n\tgnu/javax/swing/text/html/parser/support/parameterDefaulter.java,\n\tgnu/javax/swing/text/html/parser/support/Parser.java,\n\tgnu/javax/swing/text/html/parser/support/textPreProcessor.java,\n\tgnu/javax/swing/text/html/parser/support/low/Buffer.java,\n\tgnu/javax/swing/text/html/parser/support/low/Constants.java,\n\tgnu/javax/swing/text/html/parser/support/low/Location.java,\n\tgnu/javax/swing/text/html/parser/support/low/node.java,\n\tgnu/javax/swing/text/html/parser/support/low/package.html,\n\tgnu/javax/swing/text/html/parser/support/low/ParseException.java,\n\tgnu/javax/swing/text/html/parser/support/low/pattern.java,\n\tgnu/javax/swing/text/html/parser/support/low/Queue.java,\n\tgnu/javax/swing/text/html/parser/support/low/ReaderTokenizer.java:\n\tNew files.\n\t* javax/swing/text/html/HTML.java,\n\tjavax/swing/text/html/parser/ParserDelegator.java:\n\tNew files (replacing).\n\t* javax/swing/text/html/package.html,\n\tjavax/swing/text/html/parser/package.html: Documenting the\n\tpackages.\n\n2005-04-19  Chris Burdess  <dog@gnu.org>\n\n\t* gnu/xml/dom/html2/DomHTMLAnchorElement.java,\n\tgnu/xml/dom/html2/DomHTMLAppletElement.java,\n\tgnu/xml/dom/html2/DomHTMLAreaElement.java,\n\tgnu/xml/dom/html2/DomHTMLBaseElement.java,\n\tgnu/xml/dom/html2/DomHTMLBaseFontElement.java,\n\tgnu/xml/dom/html2/DomHTMLBodyElement.java,\n\tgnu/xml/dom/html2/DomHTMLBRElement.java,\n\tgnu/xml/dom/html2/DomHTMLButtonElement.java,\n\tgnu/xml/dom/html2/DomHTMLCollection.java,\n\tgnu/xml/dom/html2/DomHTMLDocument.java,\n\tgnu/xml/dom/html2/DomHTMLElement.java: New files.\n\n2005-04-19  Michael Koch  <konqueror@gmx.de>\n\n\t* Makefile.am: Added new files.\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r98406", "tree": {"sha": "a6d7de022c0f8b41819fd0f9b2f2d17634143cec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6d7de022c0f8b41819fd0f9b2f2d17634143cec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18e479e2131f9931dce25de735d333710ee4814d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18e479e2131f9931dce25de735d333710ee4814d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18e479e2131f9931dce25de735d333710ee4814d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18e479e2131f9931dce25de735d333710ee4814d/comments", "author": null, "committer": null, "parents": [{"sha": "c5f083efc539edcdf27181fadb05ee418a3e3e19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5f083efc539edcdf27181fadb05ee418a3e3e19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5f083efc539edcdf27181fadb05ee418a3e3e19"}], "stats": {"total": 22608, "additions": 22584, "deletions": 24}, "files": [{"sha": "47d5f4f14b34bbacf79d784ad07a5002f244af3a", "filename": "libjava/ChangeLog", "status": "modified", "additions": 218, "deletions": 0, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -1,3 +1,221 @@\n+2005-04-19  Andrew John Hughes  <gnu_andrew@member.fsf.org>\n+\n+\t* gnu/xml/dom/html2/DomHTMLParser.java:\n+\tChanged 'enum' references to become 'enumeration'.\n+\n+2005-04-19  Audrius Meskauskas  <audriusa@bluewin.ch>\n+\n+\t* gnu/xml/dom/html2/DomHTMLParser.java: New file.\n+\n+2005-04-19  Andrew John Hughes  <gnu_andrew@member.fsf.org>\n+\n+\t* gnu/javax/swing/text/html/parser/htmlAttributeSet.java:\n+\t(getAttributeNames()): Replaced 'enum' with 'enumeration'.\n+\t* gnu/javax/swing/text/html/parser/htmlValidator.java:\n+\t(validateParameters(TagElement,htmlAttributeSet)):\n+\tReplaced 'enum' with 'enumeration'.\n+\t(validateAttribute(TagElement,htmlAttributeSet,Enumeration,Enumeration)):\n+\tLikewise.\n+\n+2005-04-19  Audrius Meskauskas  <audriusa@bluewin.ch>\n+\n+\t* javax/swing/text/html/parser/Entity.java (getType): New method.\n+\t* javax/swing/text/html/parser/DocumentParser.java:\n+\tInherit from javax.swing.text.html.parser.Parser.\n+\n+2005-04-19  Chris Burdess  <dog@gnu.org>\n+\n+\t* gnu/xml/dom/html2/DomHTMLDocument.java: Fixed element creation and\n+\tcheck for HTML/XHTML namespace.\n+\n+2005-04-19  Audrius Meskauskas  <audriusa@bluewin.ch>\n+\n+\t* javax/swing/text/html/parser/Parser.java,\n+\tjavax/swing/text/html/parser/Entity.java:\n+\tInheriting from DTDConstants.\n+\t* javax/swing/text/html/parser/AttributeList.java\n+\t(getValues): Changed return type.\n+\t* javax/swing/text/html/parser/DocumentParser\n+\t(parse): Adding the callback parameter that receives\n+\tthe parsing events.\n+\n+2005-04-19  Chris Burdess  <dog@gnu.org>\n+\n+\t* gnu/xml/dom/DomImpl.java,\n+\tgnu/xml/dom/html2/DomHTMLAnchorElement.java,\n+\tgnu/xml/dom/html2/DomHTMLDocument.java,\n+\tgnu/xml/dom/html2/DomHTMLElement.java,\n+\tgnu/xml/dom/html2/DomHTMLFormElement.java,\n+\tgnu/xml/dom/html2/DomHTMLFrameElement.java,\n+\tgnu/xml/dom/html2/DomHTMLIFrameElement.java,\n+\tgnu/xml/dom/html2/DomHTMLImpl.java,\n+\tgnu/xml/dom/html2/DomHTMLInputElement.java,\n+\tgnu/xml/dom/html2/DomHTMLObjectElement.java,\n+\tgnu/xml/dom/html2/DomHTMLOptionElement.java,\n+\tgnu/xml/dom/html2/DomHTMLSelectElement.java,\n+\tgnu/xml/dom/html2/DomHTMLTableCellElement.java,\n+\tgnu/xml/dom/html2/DomHTMLTableElement.java,\n+\tgnu/xml/dom/html2/DomHTMLTableRowElement.java,\n+\tgnu/xml/dom/html2/DomHTMLTableSectionElement.java,\n+\tgnu/xml/dom/html2/DomHTMLTextAreaElement.java: JAXP integration,\n+\tUI events, and tree utility functions.\n+\n+2005-04-19  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/javax/swing/text/html/parser/HTML_401F.java,\n+\tgnu/javax/swing/text/html/parser/gnuDTD.java,\n+\tgnu/javax/swing/text/html/parser/models/node.java:\n+\tReworked import statements.\n+\n+2005-04-19  Audrius Meskauskas, Lithuania  <AudriusA@Bioinformatics.org>\n+\n+\t* javax/swing/text/html/HTMLDocument.java: New file.\n+\n+2005-04-19  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/swing/text/html/HTMLFrameHyperlinkEvent.java:\n+\tReformatted.\n+\t* javax/swing/text/html/parser/AttributeList.java:\n+\tFixed order of modifiers.\n+\t(AttributeList): Made final.\n+\t* javax/swing/text/html/parser/ContentModel.java:\n+\tFixed html characters in javadocs.\n+\t* javax/swing/text/html/parser/DTD.java\n+\t(DTD): Don't implement java.io.Serializable directly.\n+\t(getElement): Simplified.\n+\t* javax/swing/text/html/parser/DTDConstants.java:\n+\tReformatted file.\n+\t* javax/swing/text/html/parser/Element.java:\n+\tFixed order of modifiers.\n+\t* javax/swing/text/html/parser/Parser.java:\n+\tReformatted. Don't use fully-qualified class names.\n+\t* javax/swing/text/html/parser/ParserDelegator.java:\n+\tFixed order of modifiers.\n+\t* javax/swing/text/rtf/RTFParser.java:\n+\tRe-ordered import statements.\n+\t* javax/swing/text/rtf/RTFScanner.java:\n+\tRemoved unused import statement.\n+\n+2005-04-19  Chris Burdess  <dog@gnu.org>\n+\n+\t* gnu/xml/dom/html2/DomHTMLButtonElement.java,\n+\tgnu/xml/dom/html2/DomHTMLCollection.java,\n+\tgnu/xml/dom/html2/DomHTMLDocument.java,\n+\tgnu/xml/dom/html2/DomHTMLElement.java: Extensions for new element\n+\ttypes.\n+\t* gnu/xml/dom/html2/DomHTMLDListElement.java,\n+\tgnu/xml/dom/html2/DomHTMLDirectoryElement.java,\n+\tgnu/xml/dom/html2/DomHTMLDivElement.java,\n+\tgnu/xml/dom/html2/DomHTMLFieldSetElement.java,\n+\tgnu/xml/dom/html2/DomHTMLFontElement.java,\n+\tgnu/xml/dom/html2/DomHTMLFormElement.java,\n+\tgnu/xml/dom/html2/DomHTMLFrameElement.java,\n+\tgnu/xml/dom/html2/DomHTMLFrameSetElement.java,\n+\tgnu/xml/dom/html2/DomHTMLHRElement.java,\n+\tgnu/xml/dom/html2/DomHTMLHeadElement.java,\n+\tgnu/xml/dom/html2/DomHTMLHeadingElement.java,\n+\tgnu/xml/dom/html2/DomHTMLHtmlElement.java,\n+\tgnu/xml/dom/html2/DomHTMLIFrameElement.java,\n+\tgnu/xml/dom/html2/DomHTMLImageElement.java,\n+\tgnu/xml/dom/html2/DomHTMLInputElement.java,\n+\tgnu/xml/dom/html2/DomHTMLIsIndexElement.java,\n+\tgnu/xml/dom/html2/DomHTMLLIElement.java,\n+\tgnu/xml/dom/html2/DomHTMLLabelElement.java,\n+\tgnu/xml/dom/html2/DomHTMLLegendElement.java,\n+\tgnu/xml/dom/html2/DomHTMLLinkElement.java,\n+\tgnu/xml/dom/html2/DomHTMLMapElement.java,\n+\tgnu/xml/dom/html2/DomHTMLMenuElement.java,\n+\tgnu/xml/dom/html2/DomHTMLMetaElement.java,\n+\tgnu/xml/dom/html2/DomHTMLModElement.java,\n+\tgnu/xml/dom/html2/DomHTMLOListElement.java,\n+\tgnu/xml/dom/html2/DomHTMLObjectElement.java,\n+\tgnu/xml/dom/html2/DomHTMLOptGroupElement.java,\n+\tgnu/xml/dom/html2/DomHTMLOptionElement.java,\n+\tgnu/xml/dom/html2/DomHTMLParagraphElement.java,\n+\tgnu/xml/dom/html2/DomHTMLParamElement.java,\n+\tgnu/xml/dom/html2/DomHTMLPreElement.java,\n+\tgnu/xml/dom/html2/DomHTMLQuoteElement.java,\n+\tgnu/xml/dom/html2/DomHTMLScriptElement.java,\n+\tgnu/xml/dom/html2/DomHTMLSelectElement.java,\n+\tgnu/xml/dom/html2/DomHTMLStyleElement.java,\n+\tgnu/xml/dom/html2/DomHTMLTableCaptionElement.java,\n+\tgnu/xml/dom/html2/DomHTMLTableCellElement.java,\n+\tgnu/xml/dom/html2/DomHTMLTableColElement.java,\n+\tgnu/xml/dom/html2/DomHTMLTableElement.java,\n+\tgnu/xml/dom/html2/DomHTMLTableRowElement.java,\n+\tgnu/xml/dom/html2/DomHTMLTableSectionElement.java,\n+\tgnu/xml/dom/html2/DomHTMLTextAreaElement.java,\n+\tgnu/xml/dom/html2/DomHTMLTitleElement.java,\n+\tgnu/xml/dom/html2/DomHTMLUListElement.java: New files.\n+\n+2005-04-19  Audrius Meskauskas  <audriusa@bluewin.ch>\n+\n+\t* javax/swing/text/ChangedCharSetException.java,\n+\tjavax/swing/text/html/HTMLEditorKit.java,\n+\tjavax/swing/text/html/HTMLFrameHyperlinkEvent.java,\n+\tjavax/swing/text/html/parser/AttributeList.java,\n+\tjavax/swing/text/html/parser/ContentModel.java,\n+\tjavax/swing/text/html/parser/DocumentParser.java,\n+\tjavax/swing/text/html/parser/DTD.java,\n+\tjavax/swing/text/html/parser/DTDConstants.java,\n+\tjavax/swing/text/html/parser/Element.java,\n+\tjavax/swing/text/html/parser/Entity.java,\n+\tjavax/swing/text/html/parser/Parser.java,\n+\tjavax/swing/text/html/parser/TagElement.java,\n+\tgnu/javax/swing/text/html/package.html,\n+\tgnu/javax/swing/text/html/parser/gnuDTD.java,\n+\tgnu/javax/swing/text/html/parser/HTML_401F.java,\n+\tgnu/javax/swing/text/html/parser/htmlAttributeSet.java,\n+\tgnu/javax/swing/text/html/parser/htmlValidator.java,\n+\tgnu/javax/swing/text/html/parser/package.html,\n+\tgnu/javax/swing/text/html/parser/models/list.java,\n+\tgnu/javax/swing/text/html/parser/models/node.java,\n+\tgnu/javax/swing/text/html/parser/models/noTagModel.java,\n+\tgnu/javax/swing/text/html/parser/models/package.html,\n+\tgnu/javax/swing/text/html/parser/models/PCDATAonly_model.java,\n+\tgnu/javax/swing/text/html/parser/models/TableRowContentModel.java,\n+\tgnu/javax/swing/text/html/parser/models/transformer.java,\n+\tgnu/javax/swing/text/html/parser/support/gnuStringIntMapper.java,\n+\tgnu/javax/swing/text/html/parser/support/package.html,\n+\tgnu/javax/swing/text/html/parser/support/parameterDefaulter.java,\n+\tgnu/javax/swing/text/html/parser/support/Parser.java,\n+\tgnu/javax/swing/text/html/parser/support/textPreProcessor.java,\n+\tgnu/javax/swing/text/html/parser/support/low/Buffer.java,\n+\tgnu/javax/swing/text/html/parser/support/low/Constants.java,\n+\tgnu/javax/swing/text/html/parser/support/low/Location.java,\n+\tgnu/javax/swing/text/html/parser/support/low/node.java,\n+\tgnu/javax/swing/text/html/parser/support/low/package.html,\n+\tgnu/javax/swing/text/html/parser/support/low/ParseException.java,\n+\tgnu/javax/swing/text/html/parser/support/low/pattern.java,\n+\tgnu/javax/swing/text/html/parser/support/low/Queue.java,\n+\tgnu/javax/swing/text/html/parser/support/low/ReaderTokenizer.java:\n+\tNew files.\n+\t* javax/swing/text/html/HTML.java,\n+\tjavax/swing/text/html/parser/ParserDelegator.java:\n+\tNew files (replacing).\n+\t* javax/swing/text/html/package.html,\n+\tjavax/swing/text/html/parser/package.html: Documenting the\n+\tpackages.\n+\n+2005-04-19  Chris Burdess  <dog@gnu.org>\n+\n+\t* gnu/xml/dom/html2/DomHTMLAnchorElement.java,\n+\tgnu/xml/dom/html2/DomHTMLAppletElement.java,\n+\tgnu/xml/dom/html2/DomHTMLAreaElement.java,\n+\tgnu/xml/dom/html2/DomHTMLBaseElement.java,\n+\tgnu/xml/dom/html2/DomHTMLBaseFontElement.java,\n+\tgnu/xml/dom/html2/DomHTMLBodyElement.java,\n+\tgnu/xml/dom/html2/DomHTMLBRElement.java,\n+\tgnu/xml/dom/html2/DomHTMLButtonElement.java,\n+\tgnu/xml/dom/html2/DomHTMLCollection.java,\n+\tgnu/xml/dom/html2/DomHTMLDocument.java,\n+\tgnu/xml/dom/html2/DomHTMLElement.java: New files.\n+\n+2005-04-19  Michael Koch  <konqueror@gmx.de>\n+\n+\t* Makefile.am: Added new files.\n+\t* Makefile.in: Regenerated.\n+\n 2005-04-19  Roman Kennke  <roman@kennke.org>\n \n \t* javax/swing/text/JTextComponent.java"}, {"sha": "89cb6333a96a38f882e37175ec58431177b3ddf9", "filename": "libjava/Makefile.am", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -1223,6 +1223,29 @@ gnu/java/awt/peer/EmbeddedWindowPeer.java \\\n gnu/java/awt/peer/GLightweightPeer.java \\\n gnu/java/awt/peer/ClasspathFontPeer.java \\\n gnu/java/awt/peer/ClasspathTextLayoutPeer.java \\\n+gnu/javax/swing/text/html/parser/support/gnuStringIntMapper.java \\\n+gnu/javax/swing/text/html/parser/support/parameterDefaulter.java \\\n+gnu/javax/swing/text/html/parser/support/Parser.java \\\n+gnu/javax/swing/text/html/parser/support/textPreProcessor.java \\\n+gnu/javax/swing/text/html/parser/support/low/Buffer.java \\\n+gnu/javax/swing/text/html/parser/support/low/Constants.java \\\n+gnu/javax/swing/text/html/parser/support/low/Location.java \\\n+gnu/javax/swing/text/html/parser/support/low/node.java \\\n+gnu/javax/swing/text/html/parser/support/low/ParseException.java \\\n+gnu/javax/swing/text/html/parser/support/low/pattern.java \\\n+gnu/javax/swing/text/html/parser/support/low/Queue.java \\\n+gnu/javax/swing/text/html/parser/support/low/ReaderTokenizer.java \\\n+gnu/javax/swing/text/html/parser/support/low/Token.java \\\n+gnu/javax/swing/text/html/parser/gnuDTD.java \\\n+gnu/javax/swing/text/html/parser/HTML_401F.java \\\n+gnu/javax/swing/text/html/parser/htmlAttributeSet.java \\\n+gnu/javax/swing/text/html/parser/htmlValidator.java \\\n+gnu/javax/swing/text/html/parser/models/list.java \\\n+gnu/javax/swing/text/html/parser/models/node.java \\\n+gnu/javax/swing/text/html/parser/models/noTagModel.java \\\n+gnu/javax/swing/text/html/parser/models/PCDATAonly_model.java \\\n+gnu/javax/swing/text/html/parser/models/TableRowContentModel.java \\\n+gnu/javax/swing/text/html/parser/models/transformer.java \\\n java/applet/Applet.java \\\n java/applet/AppletStub.java \\\n java/applet/AppletContext.java \\\n@@ -1869,6 +1892,7 @@ javax/swing/text/AbstractDocument.java \\\n javax/swing/text/AttributeSet.java \\\n javax/swing/text/BadLocationException.java \\\n javax/swing/text/Caret.java \\\n+javax/swing/text/ChangedCharSetException.java \\\n javax/swing/text/ComponentView.java \\\n javax/swing/text/DefaultCaret.java \\\n javax/swing/text/DefaultEditorKit.java \\\n@@ -1907,7 +1931,19 @@ javax/swing/text/Utilities.java \\\n javax/swing/text/View.java \\\n javax/swing/text/ViewFactory.java \\\n javax/swing/text/html/HTML.java \\\n+javax/swing/text/html/HTMLDocument.java \\\n+javax/swing/text/html/HTMLEditorKit.java \\\n+javax/swing/text/html/HTMLFrameHyperlinkEvent.java \\\n+javax/swing/text/html/parser/AttributeList.java \\\n+javax/swing/text/html/parser/ContentModel.java \\\n+javax/swing/text/html/parser/DTD.java \\\n+javax/swing/text/html/parser/DTDConstants.java \\\n+javax/swing/text/html/parser/DocumentParser.java \\\n+javax/swing/text/html/parser/Element.java \\\n+javax/swing/text/html/parser/Entity.java \\\n+javax/swing/text/html/parser/Parser.java \\\n javax/swing/text/html/parser/ParserDelegator.java \\\n+javax/swing/text/html/parser/TagElement.java \\\n javax/swing/text/rtf/ControlWordToken.java \\\n javax/swing/text/rtf/RTFEditorKit.java \\\n javax/swing/text/rtf/RTFParseException.java \\\n@@ -2713,6 +2749,63 @@ gnu/xml/dom/DomEvent.java \\\n gnu/xml/dom/DomEntity.java \\\n gnu/xml/dom/DomCDATASection.java \\\n gnu/xml/dom/DomDOMException.java \\\n+gnu/xml/dom/html2/DomHTMLAnchorElement.java \\\n+gnu/xml/dom/html2/DomHTMLAppletElement.java \\\n+gnu/xml/dom/html2/DomHTMLAreaElement.java \\\n+gnu/xml/dom/html2/DomHTMLBaseElement.java \\\n+gnu/xml/dom/html2/DomHTMLBaseFontElement.java \\\n+gnu/xml/dom/html2/DomHTMLBodyElement.java \\\n+gnu/xml/dom/html2/DomHTMLBRElement.java \\\n+gnu/xml/dom/html2/DomHTMLButtonElement.java \\\n+gnu/xml/dom/html2/DomHTMLCollection.java \\\n+gnu/xml/dom/html2/DomHTMLDirectoryElement.java \\\n+gnu/xml/dom/html2/DomHTMLDivElement.java \\\n+gnu/xml/dom/html2/DomHTMLDListElement.java \\\n+gnu/xml/dom/html2/DomHTMLDocument.java \\\n+gnu/xml/dom/html2/DomHTMLElement.java \\\n+gnu/xml/dom/html2/DomHTMLFieldSetElement.java \\\n+gnu/xml/dom/html2/DomHTMLFontElement.java \\\n+gnu/xml/dom/html2/DomHTMLFormElement.java \\\n+gnu/xml/dom/html2/DomHTMLFrameElement.java \\\n+gnu/xml/dom/html2/DomHTMLFrameSetElement.java \\\n+gnu/xml/dom/html2/DomHTMLHeadElement.java \\\n+gnu/xml/dom/html2/DomHTMLHeadingElement.java \\\n+gnu/xml/dom/html2/DomHTMLHRElement.java \\\n+gnu/xml/dom/html2/DomHTMLHtmlElement.java \\\n+gnu/xml/dom/html2/DomHTMLIFrameElement.java \\\n+gnu/xml/dom/html2/DomHTMLImageElement.java \\\n+gnu/xml/dom/html2/DomHTMLImpl.java \\\n+gnu/xml/dom/html2/DomHTMLInputElement.java \\\n+gnu/xml/dom/html2/DomHTMLIsIndexElement.java \\\n+gnu/xml/dom/html2/DomHTMLLabelElement.java \\\n+gnu/xml/dom/html2/DomHTMLLegendElement.java \\\n+gnu/xml/dom/html2/DomHTMLLIElement.java \\\n+gnu/xml/dom/html2/DomHTMLLinkElement.java \\\n+gnu/xml/dom/html2/DomHTMLMapElement.java \\\n+gnu/xml/dom/html2/DomHTMLMenuElement.java \\\n+gnu/xml/dom/html2/DomHTMLMetaElement.java \\\n+gnu/xml/dom/html2/DomHTMLModElement.java \\\n+gnu/xml/dom/html2/DomHTMLObjectElement.java \\\n+gnu/xml/dom/html2/DomHTMLOListElement.java \\\n+gnu/xml/dom/html2/DomHTMLOptGroupElement.java \\\n+gnu/xml/dom/html2/DomHTMLOptionElement.java \\\n+gnu/xml/dom/html2/DomHTMLParagraphElement.java \\\n+gnu/xml/dom/html2/DomHTMLParamElement.java \\\n+gnu/xml/dom/html2/DomHTMLParser.java \\\n+gnu/xml/dom/html2/DomHTMLPreElement.java \\\n+gnu/xml/dom/html2/DomHTMLQuoteElement.java \\\n+gnu/xml/dom/html2/DomHTMLScriptElement.java \\\n+gnu/xml/dom/html2/DomHTMLSelectElement.java \\\n+gnu/xml/dom/html2/DomHTMLStyleElement.java \\\n+gnu/xml/dom/html2/DomHTMLTableCaptionElement.java \\\n+gnu/xml/dom/html2/DomHTMLTableCellElement.java \\\n+gnu/xml/dom/html2/DomHTMLTableColElement.java \\\n+gnu/xml/dom/html2/DomHTMLTableElement.java \\\n+gnu/xml/dom/html2/DomHTMLTableRowElement.java \\\n+gnu/xml/dom/html2/DomHTMLTableSectionElement.java \\\n+gnu/xml/dom/html2/DomHTMLTextAreaElement.java \\\n+gnu/xml/dom/html2/DomHTMLTitleElement.java \\\n+gnu/xml/dom/html2/DomHTMLUListElement.java \\\n gnu/xml/transform/GenerateIdFunction.java \\\n gnu/xml/transform/FormatNumberFunction.java \\\n gnu/xml/transform/ValueOfNode.java \\"}, {"sha": "aa822ca586c3340f2d3fb9295331c44106f4e673", "filename": "libjava/Makefile.in", "status": "modified", "additions": 421, "deletions": 3, "changes": 424, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -1218,6 +1218,29 @@ am__libgcj0_convenience_la_SOURCES_DIST = prims.cc jni.cc exception.cc \\\n \tgnu/java/awt/peer/GLightweightPeer.java \\\n \tgnu/java/awt/peer/ClasspathFontPeer.java \\\n \tgnu/java/awt/peer/ClasspathTextLayoutPeer.java \\\n+\tgnu/javax/swing/text/html/parser/support/gnuStringIntMapper.java \\\n+\tgnu/javax/swing/text/html/parser/support/parameterDefaulter.java \\\n+\tgnu/javax/swing/text/html/parser/support/Parser.java \\\n+\tgnu/javax/swing/text/html/parser/support/textPreProcessor.java \\\n+\tgnu/javax/swing/text/html/parser/support/low/Buffer.java \\\n+\tgnu/javax/swing/text/html/parser/support/low/Constants.java \\\n+\tgnu/javax/swing/text/html/parser/support/low/Location.java \\\n+\tgnu/javax/swing/text/html/parser/support/low/node.java \\\n+\tgnu/javax/swing/text/html/parser/support/low/ParseException.java \\\n+\tgnu/javax/swing/text/html/parser/support/low/pattern.java \\\n+\tgnu/javax/swing/text/html/parser/support/low/Queue.java \\\n+\tgnu/javax/swing/text/html/parser/support/low/ReaderTokenizer.java \\\n+\tgnu/javax/swing/text/html/parser/support/low/Token.java \\\n+\tgnu/javax/swing/text/html/parser/gnuDTD.java \\\n+\tgnu/javax/swing/text/html/parser/HTML_401F.java \\\n+\tgnu/javax/swing/text/html/parser/htmlAttributeSet.java \\\n+\tgnu/javax/swing/text/html/parser/htmlValidator.java \\\n+\tgnu/javax/swing/text/html/parser/models/list.java \\\n+\tgnu/javax/swing/text/html/parser/models/node.java \\\n+\tgnu/javax/swing/text/html/parser/models/noTagModel.java \\\n+\tgnu/javax/swing/text/html/parser/models/PCDATAonly_model.java \\\n+\tgnu/javax/swing/text/html/parser/models/TableRowContentModel.java \\\n+\tgnu/javax/swing/text/html/parser/models/transformer.java \\\n \tjava/applet/Applet.java java/applet/AppletStub.java \\\n \tjava/applet/AppletContext.java java/applet/AudioClip.java \\\n \tjava/awt/AWTError.java java/awt/AWTEvent.java \\\n@@ -1753,6 +1776,7 @@ am__libgcj0_convenience_la_SOURCES_DIST = prims.cc jni.cc exception.cc \\\n \tjavax/swing/text/AttributeSet.java \\\n \tjavax/swing/text/BadLocationException.java \\\n \tjavax/swing/text/Caret.java \\\n+\tjavax/swing/text/ChangedCharSetException.java \\\n \tjavax/swing/text/ComponentView.java \\\n \tjavax/swing/text/DefaultCaret.java \\\n \tjavax/swing/text/DefaultEditorKit.java \\\n@@ -1786,7 +1810,19 @@ am__libgcj0_convenience_la_SOURCES_DIST = prims.cc jni.cc exception.cc \\\n \tjavax/swing/text/Utilities.java javax/swing/text/View.java \\\n \tjavax/swing/text/ViewFactory.java \\\n \tjavax/swing/text/html/HTML.java \\\n+\tjavax/swing/text/html/HTMLDocument.java \\\n+\tjavax/swing/text/html/HTMLEditorKit.java \\\n+\tjavax/swing/text/html/HTMLFrameHyperlinkEvent.java \\\n+\tjavax/swing/text/html/parser/AttributeList.java \\\n+\tjavax/swing/text/html/parser/ContentModel.java \\\n+\tjavax/swing/text/html/parser/DTD.java \\\n+\tjavax/swing/text/html/parser/DTDConstants.java \\\n+\tjavax/swing/text/html/parser/DocumentParser.java \\\n+\tjavax/swing/text/html/parser/Element.java \\\n+\tjavax/swing/text/html/parser/Entity.java \\\n+\tjavax/swing/text/html/parser/Parser.java \\\n \tjavax/swing/text/html/parser/ParserDelegator.java \\\n+\tjavax/swing/text/html/parser/TagElement.java \\\n \tjavax/swing/text/rtf/ControlWordToken.java \\\n \tjavax/swing/text/rtf/RTFEditorKit.java \\\n \tjavax/swing/text/rtf/RTFParseException.java \\\n@@ -2555,6 +2591,29 @@ am__objects_10 = gnu/awt/LightweightRedirector.lo \\\n \tgnu/java/awt/peer/GLightweightPeer.lo \\\n \tgnu/java/awt/peer/ClasspathFontPeer.lo \\\n \tgnu/java/awt/peer/ClasspathTextLayoutPeer.lo \\\n+\tgnu/javax/swing/text/html/parser/support/gnuStringIntMapper.lo \\\n+\tgnu/javax/swing/text/html/parser/support/parameterDefaulter.lo \\\n+\tgnu/javax/swing/text/html/parser/support/Parser.lo \\\n+\tgnu/javax/swing/text/html/parser/support/textPreProcessor.lo \\\n+\tgnu/javax/swing/text/html/parser/support/low/Buffer.lo \\\n+\tgnu/javax/swing/text/html/parser/support/low/Constants.lo \\\n+\tgnu/javax/swing/text/html/parser/support/low/Location.lo \\\n+\tgnu/javax/swing/text/html/parser/support/low/node.lo \\\n+\tgnu/javax/swing/text/html/parser/support/low/ParseException.lo \\\n+\tgnu/javax/swing/text/html/parser/support/low/pattern.lo \\\n+\tgnu/javax/swing/text/html/parser/support/low/Queue.lo \\\n+\tgnu/javax/swing/text/html/parser/support/low/ReaderTokenizer.lo \\\n+\tgnu/javax/swing/text/html/parser/support/low/Token.lo \\\n+\tgnu/javax/swing/text/html/parser/gnuDTD.lo \\\n+\tgnu/javax/swing/text/html/parser/HTML_401F.lo \\\n+\tgnu/javax/swing/text/html/parser/htmlAttributeSet.lo \\\n+\tgnu/javax/swing/text/html/parser/htmlValidator.lo \\\n+\tgnu/javax/swing/text/html/parser/models/list.lo \\\n+\tgnu/javax/swing/text/html/parser/models/node.lo \\\n+\tgnu/javax/swing/text/html/parser/models/noTagModel.lo \\\n+\tgnu/javax/swing/text/html/parser/models/PCDATAonly_model.lo \\\n+\tgnu/javax/swing/text/html/parser/models/TableRowContentModel.lo \\\n+\tgnu/javax/swing/text/html/parser/models/transformer.lo \\\n \tjava/applet/Applet.lo java/applet/AppletStub.lo \\\n \tjava/applet/AppletContext.lo java/applet/AudioClip.lo \\\n \tjava/awt/AWTError.lo java/awt/AWTEvent.lo \\\n@@ -3050,7 +3109,9 @@ am__objects_10 = gnu/awt/LightweightRedirector.lo \\\n \tjavax/swing/ActionMap.lo javax/swing/text/AbstractDocument.lo \\\n \tjavax/swing/text/AttributeSet.lo \\\n \tjavax/swing/text/BadLocationException.lo \\\n-\tjavax/swing/text/Caret.lo javax/swing/text/ComponentView.lo \\\n+\tjavax/swing/text/Caret.lo \\\n+\tjavax/swing/text/ChangedCharSetException.lo \\\n+\tjavax/swing/text/ComponentView.lo \\\n \tjavax/swing/text/DefaultCaret.lo \\\n \tjavax/swing/text/DefaultEditorKit.lo \\\n \tjavax/swing/text/DefaultHighlighter.lo \\\n@@ -3079,7 +3140,19 @@ am__objects_10 = gnu/awt/LightweightRedirector.lo \\\n \tjavax/swing/text/TabStop.lo javax/swing/text/TextAction.lo \\\n \tjavax/swing/text/Utilities.lo javax/swing/text/View.lo \\\n \tjavax/swing/text/ViewFactory.lo javax/swing/text/html/HTML.lo \\\n+\tjavax/swing/text/html/HTMLDocument.lo \\\n+\tjavax/swing/text/html/HTMLEditorKit.lo \\\n+\tjavax/swing/text/html/HTMLFrameHyperlinkEvent.lo \\\n+\tjavax/swing/text/html/parser/AttributeList.lo \\\n+\tjavax/swing/text/html/parser/ContentModel.lo \\\n+\tjavax/swing/text/html/parser/DTD.lo \\\n+\tjavax/swing/text/html/parser/DTDConstants.lo \\\n+\tjavax/swing/text/html/parser/DocumentParser.lo \\\n+\tjavax/swing/text/html/parser/Element.lo \\\n+\tjavax/swing/text/html/parser/Entity.lo \\\n+\tjavax/swing/text/html/parser/Parser.lo \\\n \tjavax/swing/text/html/parser/ParserDelegator.lo \\\n+\tjavax/swing/text/html/parser/TagElement.lo \\\n \tjavax/swing/text/rtf/ControlWordToken.lo \\\n \tjavax/swing/text/rtf/RTFEditorKit.lo \\\n \tjavax/swing/text/rtf/RTFParseException.lo \\\n@@ -4950,6 +5023,29 @@ gnu/java/awt/peer/EmbeddedWindowPeer.java \\\n gnu/java/awt/peer/GLightweightPeer.java \\\n gnu/java/awt/peer/ClasspathFontPeer.java \\\n gnu/java/awt/peer/ClasspathTextLayoutPeer.java \\\n+gnu/javax/swing/text/html/parser/support/gnuStringIntMapper.java \\\n+gnu/javax/swing/text/html/parser/support/parameterDefaulter.java \\\n+gnu/javax/swing/text/html/parser/support/Parser.java \\\n+gnu/javax/swing/text/html/parser/support/textPreProcessor.java \\\n+gnu/javax/swing/text/html/parser/support/low/Buffer.java \\\n+gnu/javax/swing/text/html/parser/support/low/Constants.java \\\n+gnu/javax/swing/text/html/parser/support/low/Location.java \\\n+gnu/javax/swing/text/html/parser/support/low/node.java \\\n+gnu/javax/swing/text/html/parser/support/low/ParseException.java \\\n+gnu/javax/swing/text/html/parser/support/low/pattern.java \\\n+gnu/javax/swing/text/html/parser/support/low/Queue.java \\\n+gnu/javax/swing/text/html/parser/support/low/ReaderTokenizer.java \\\n+gnu/javax/swing/text/html/parser/support/low/Token.java \\\n+gnu/javax/swing/text/html/parser/gnuDTD.java \\\n+gnu/javax/swing/text/html/parser/HTML_401F.java \\\n+gnu/javax/swing/text/html/parser/htmlAttributeSet.java \\\n+gnu/javax/swing/text/html/parser/htmlValidator.java \\\n+gnu/javax/swing/text/html/parser/models/list.java \\\n+gnu/javax/swing/text/html/parser/models/node.java \\\n+gnu/javax/swing/text/html/parser/models/noTagModel.java \\\n+gnu/javax/swing/text/html/parser/models/PCDATAonly_model.java \\\n+gnu/javax/swing/text/html/parser/models/TableRowContentModel.java \\\n+gnu/javax/swing/text/html/parser/models/transformer.java \\\n java/applet/Applet.java \\\n java/applet/AppletStub.java \\\n java/applet/AppletContext.java \\\n@@ -5596,6 +5692,7 @@ javax/swing/text/AbstractDocument.java \\\n javax/swing/text/AttributeSet.java \\\n javax/swing/text/BadLocationException.java \\\n javax/swing/text/Caret.java \\\n+javax/swing/text/ChangedCharSetException.java \\\n javax/swing/text/ComponentView.java \\\n javax/swing/text/DefaultCaret.java \\\n javax/swing/text/DefaultEditorKit.java \\\n@@ -5634,7 +5731,19 @@ javax/swing/text/Utilities.java \\\n javax/swing/text/View.java \\\n javax/swing/text/ViewFactory.java \\\n javax/swing/text/html/HTML.java \\\n+javax/swing/text/html/HTMLDocument.java \\\n+javax/swing/text/html/HTMLEditorKit.java \\\n+javax/swing/text/html/HTMLFrameHyperlinkEvent.java \\\n+javax/swing/text/html/parser/AttributeList.java \\\n+javax/swing/text/html/parser/ContentModel.java \\\n+javax/swing/text/html/parser/DTD.java \\\n+javax/swing/text/html/parser/DTDConstants.java \\\n+javax/swing/text/html/parser/DocumentParser.java \\\n+javax/swing/text/html/parser/Element.java \\\n+javax/swing/text/html/parser/Entity.java \\\n+javax/swing/text/html/parser/Parser.java \\\n javax/swing/text/html/parser/ParserDelegator.java \\\n+javax/swing/text/html/parser/TagElement.java \\\n javax/swing/text/rtf/ControlWordToken.java \\\n javax/swing/text/rtf/RTFEditorKit.java \\\n javax/swing/text/rtf/RTFParseException.java \\\n@@ -6440,6 +6549,63 @@ gnu/xml/dom/DomEvent.java \\\n gnu/xml/dom/DomEntity.java \\\n gnu/xml/dom/DomCDATASection.java \\\n gnu/xml/dom/DomDOMException.java \\\n+gnu/xml/dom/html2/DomHTMLAnchorElement.java \\\n+gnu/xml/dom/html2/DomHTMLAppletElement.java \\\n+gnu/xml/dom/html2/DomHTMLAreaElement.java \\\n+gnu/xml/dom/html2/DomHTMLBaseElement.java \\\n+gnu/xml/dom/html2/DomHTMLBaseFontElement.java \\\n+gnu/xml/dom/html2/DomHTMLBodyElement.java \\\n+gnu/xml/dom/html2/DomHTMLBRElement.java \\\n+gnu/xml/dom/html2/DomHTMLButtonElement.java \\\n+gnu/xml/dom/html2/DomHTMLCollection.java \\\n+gnu/xml/dom/html2/DomHTMLDirectoryElement.java \\\n+gnu/xml/dom/html2/DomHTMLDivElement.java \\\n+gnu/xml/dom/html2/DomHTMLDListElement.java \\\n+gnu/xml/dom/html2/DomHTMLDocument.java \\\n+gnu/xml/dom/html2/DomHTMLElement.java \\\n+gnu/xml/dom/html2/DomHTMLFieldSetElement.java \\\n+gnu/xml/dom/html2/DomHTMLFontElement.java \\\n+gnu/xml/dom/html2/DomHTMLFormElement.java \\\n+gnu/xml/dom/html2/DomHTMLFrameElement.java \\\n+gnu/xml/dom/html2/DomHTMLFrameSetElement.java \\\n+gnu/xml/dom/html2/DomHTMLHeadElement.java \\\n+gnu/xml/dom/html2/DomHTMLHeadingElement.java \\\n+gnu/xml/dom/html2/DomHTMLHRElement.java \\\n+gnu/xml/dom/html2/DomHTMLHtmlElement.java \\\n+gnu/xml/dom/html2/DomHTMLIFrameElement.java \\\n+gnu/xml/dom/html2/DomHTMLImageElement.java \\\n+gnu/xml/dom/html2/DomHTMLImpl.java \\\n+gnu/xml/dom/html2/DomHTMLInputElement.java \\\n+gnu/xml/dom/html2/DomHTMLIsIndexElement.java \\\n+gnu/xml/dom/html2/DomHTMLLabelElement.java \\\n+gnu/xml/dom/html2/DomHTMLLegendElement.java \\\n+gnu/xml/dom/html2/DomHTMLLIElement.java \\\n+gnu/xml/dom/html2/DomHTMLLinkElement.java \\\n+gnu/xml/dom/html2/DomHTMLMapElement.java \\\n+gnu/xml/dom/html2/DomHTMLMenuElement.java \\\n+gnu/xml/dom/html2/DomHTMLMetaElement.java \\\n+gnu/xml/dom/html2/DomHTMLModElement.java \\\n+gnu/xml/dom/html2/DomHTMLObjectElement.java \\\n+gnu/xml/dom/html2/DomHTMLOListElement.java \\\n+gnu/xml/dom/html2/DomHTMLOptGroupElement.java \\\n+gnu/xml/dom/html2/DomHTMLOptionElement.java \\\n+gnu/xml/dom/html2/DomHTMLParagraphElement.java \\\n+gnu/xml/dom/html2/DomHTMLParamElement.java \\\n+gnu/xml/dom/html2/DomHTMLParser.java \\\n+gnu/xml/dom/html2/DomHTMLPreElement.java \\\n+gnu/xml/dom/html2/DomHTMLQuoteElement.java \\\n+gnu/xml/dom/html2/DomHTMLScriptElement.java \\\n+gnu/xml/dom/html2/DomHTMLSelectElement.java \\\n+gnu/xml/dom/html2/DomHTMLStyleElement.java \\\n+gnu/xml/dom/html2/DomHTMLTableCaptionElement.java \\\n+gnu/xml/dom/html2/DomHTMLTableCellElement.java \\\n+gnu/xml/dom/html2/DomHTMLTableColElement.java \\\n+gnu/xml/dom/html2/DomHTMLTableElement.java \\\n+gnu/xml/dom/html2/DomHTMLTableRowElement.java \\\n+gnu/xml/dom/html2/DomHTMLTableSectionElement.java \\\n+gnu/xml/dom/html2/DomHTMLTextAreaElement.java \\\n+gnu/xml/dom/html2/DomHTMLTitleElement.java \\\n+gnu/xml/dom/html2/DomHTMLUListElement.java \\\n gnu/xml/transform/GenerateIdFunction.java \\\n gnu/xml/transform/FormatNumberFunction.java \\\n gnu/xml/transform/ValueOfNode.java \\\n@@ -11368,6 +11534,99 @@ gnu/java/awt/peer/ClasspathFontPeer.lo:  \\\n gnu/java/awt/peer/ClasspathTextLayoutPeer.lo:  \\\n \tgnu/java/awt/peer/$(am__dirstamp) \\\n \tgnu/java/awt/peer/$(DEPDIR)/$(am__dirstamp)\n+gnu/javax/swing/text/html/parser/support/$(am__dirstamp):\n+\t@$(mkdir_p) gnu/javax/swing/text/html/parser/support\n+\t@: > gnu/javax/swing/text/html/parser/support/$(am__dirstamp)\n+gnu/javax/swing/text/html/parser/support/$(DEPDIR)/$(am__dirstamp):\n+\t@$(mkdir_p) gnu/javax/swing/text/html/parser/support/$(DEPDIR)\n+\t@: > gnu/javax/swing/text/html/parser/support/$(DEPDIR)/$(am__dirstamp)\n+gnu/javax/swing/text/html/parser/support/gnuStringIntMapper.lo:  \\\n+\tgnu/javax/swing/text/html/parser/support/$(am__dirstamp) \\\n+\tgnu/javax/swing/text/html/parser/support/$(DEPDIR)/$(am__dirstamp)\n+gnu/javax/swing/text/html/parser/support/parameterDefaulter.lo:  \\\n+\tgnu/javax/swing/text/html/parser/support/$(am__dirstamp) \\\n+\tgnu/javax/swing/text/html/parser/support/$(DEPDIR)/$(am__dirstamp)\n+gnu/javax/swing/text/html/parser/support/Parser.lo:  \\\n+\tgnu/javax/swing/text/html/parser/support/$(am__dirstamp) \\\n+\tgnu/javax/swing/text/html/parser/support/$(DEPDIR)/$(am__dirstamp)\n+gnu/javax/swing/text/html/parser/support/textPreProcessor.lo:  \\\n+\tgnu/javax/swing/text/html/parser/support/$(am__dirstamp) \\\n+\tgnu/javax/swing/text/html/parser/support/$(DEPDIR)/$(am__dirstamp)\n+gnu/javax/swing/text/html/parser/support/low/$(am__dirstamp):\n+\t@$(mkdir_p) gnu/javax/swing/text/html/parser/support/low\n+\t@: > gnu/javax/swing/text/html/parser/support/low/$(am__dirstamp)\n+gnu/javax/swing/text/html/parser/support/low/$(DEPDIR)/$(am__dirstamp):\n+\t@$(mkdir_p) gnu/javax/swing/text/html/parser/support/low/$(DEPDIR)\n+\t@: > gnu/javax/swing/text/html/parser/support/low/$(DEPDIR)/$(am__dirstamp)\n+gnu/javax/swing/text/html/parser/support/low/Buffer.lo:  \\\n+\tgnu/javax/swing/text/html/parser/support/low/$(am__dirstamp) \\\n+\tgnu/javax/swing/text/html/parser/support/low/$(DEPDIR)/$(am__dirstamp)\n+gnu/javax/swing/text/html/parser/support/low/Constants.lo:  \\\n+\tgnu/javax/swing/text/html/parser/support/low/$(am__dirstamp) \\\n+\tgnu/javax/swing/text/html/parser/support/low/$(DEPDIR)/$(am__dirstamp)\n+gnu/javax/swing/text/html/parser/support/low/Location.lo:  \\\n+\tgnu/javax/swing/text/html/parser/support/low/$(am__dirstamp) \\\n+\tgnu/javax/swing/text/html/parser/support/low/$(DEPDIR)/$(am__dirstamp)\n+gnu/javax/swing/text/html/parser/support/low/node.lo:  \\\n+\tgnu/javax/swing/text/html/parser/support/low/$(am__dirstamp) \\\n+\tgnu/javax/swing/text/html/parser/support/low/$(DEPDIR)/$(am__dirstamp)\n+gnu/javax/swing/text/html/parser/support/low/ParseException.lo:  \\\n+\tgnu/javax/swing/text/html/parser/support/low/$(am__dirstamp) \\\n+\tgnu/javax/swing/text/html/parser/support/low/$(DEPDIR)/$(am__dirstamp)\n+gnu/javax/swing/text/html/parser/support/low/pattern.lo:  \\\n+\tgnu/javax/swing/text/html/parser/support/low/$(am__dirstamp) \\\n+\tgnu/javax/swing/text/html/parser/support/low/$(DEPDIR)/$(am__dirstamp)\n+gnu/javax/swing/text/html/parser/support/low/Queue.lo:  \\\n+\tgnu/javax/swing/text/html/parser/support/low/$(am__dirstamp) \\\n+\tgnu/javax/swing/text/html/parser/support/low/$(DEPDIR)/$(am__dirstamp)\n+gnu/javax/swing/text/html/parser/support/low/ReaderTokenizer.lo:  \\\n+\tgnu/javax/swing/text/html/parser/support/low/$(am__dirstamp) \\\n+\tgnu/javax/swing/text/html/parser/support/low/$(DEPDIR)/$(am__dirstamp)\n+gnu/javax/swing/text/html/parser/support/low/Token.lo:  \\\n+\tgnu/javax/swing/text/html/parser/support/low/$(am__dirstamp) \\\n+\tgnu/javax/swing/text/html/parser/support/low/$(DEPDIR)/$(am__dirstamp)\n+gnu/javax/swing/text/html/parser/$(am__dirstamp):\n+\t@$(mkdir_p) gnu/javax/swing/text/html/parser\n+\t@: > gnu/javax/swing/text/html/parser/$(am__dirstamp)\n+gnu/javax/swing/text/html/parser/$(DEPDIR)/$(am__dirstamp):\n+\t@$(mkdir_p) gnu/javax/swing/text/html/parser/$(DEPDIR)\n+\t@: > gnu/javax/swing/text/html/parser/$(DEPDIR)/$(am__dirstamp)\n+gnu/javax/swing/text/html/parser/gnuDTD.lo:  \\\n+\tgnu/javax/swing/text/html/parser/$(am__dirstamp) \\\n+\tgnu/javax/swing/text/html/parser/$(DEPDIR)/$(am__dirstamp)\n+gnu/javax/swing/text/html/parser/HTML_401F.lo:  \\\n+\tgnu/javax/swing/text/html/parser/$(am__dirstamp) \\\n+\tgnu/javax/swing/text/html/parser/$(DEPDIR)/$(am__dirstamp)\n+gnu/javax/swing/text/html/parser/htmlAttributeSet.lo:  \\\n+\tgnu/javax/swing/text/html/parser/$(am__dirstamp) \\\n+\tgnu/javax/swing/text/html/parser/$(DEPDIR)/$(am__dirstamp)\n+gnu/javax/swing/text/html/parser/htmlValidator.lo:  \\\n+\tgnu/javax/swing/text/html/parser/$(am__dirstamp) \\\n+\tgnu/javax/swing/text/html/parser/$(DEPDIR)/$(am__dirstamp)\n+gnu/javax/swing/text/html/parser/models/$(am__dirstamp):\n+\t@$(mkdir_p) gnu/javax/swing/text/html/parser/models\n+\t@: > gnu/javax/swing/text/html/parser/models/$(am__dirstamp)\n+gnu/javax/swing/text/html/parser/models/$(DEPDIR)/$(am__dirstamp):\n+\t@$(mkdir_p) gnu/javax/swing/text/html/parser/models/$(DEPDIR)\n+\t@: > gnu/javax/swing/text/html/parser/models/$(DEPDIR)/$(am__dirstamp)\n+gnu/javax/swing/text/html/parser/models/list.lo:  \\\n+\tgnu/javax/swing/text/html/parser/models/$(am__dirstamp) \\\n+\tgnu/javax/swing/text/html/parser/models/$(DEPDIR)/$(am__dirstamp)\n+gnu/javax/swing/text/html/parser/models/node.lo:  \\\n+\tgnu/javax/swing/text/html/parser/models/$(am__dirstamp) \\\n+\tgnu/javax/swing/text/html/parser/models/$(DEPDIR)/$(am__dirstamp)\n+gnu/javax/swing/text/html/parser/models/noTagModel.lo:  \\\n+\tgnu/javax/swing/text/html/parser/models/$(am__dirstamp) \\\n+\tgnu/javax/swing/text/html/parser/models/$(DEPDIR)/$(am__dirstamp)\n+gnu/javax/swing/text/html/parser/models/PCDATAonly_model.lo:  \\\n+\tgnu/javax/swing/text/html/parser/models/$(am__dirstamp) \\\n+\tgnu/javax/swing/text/html/parser/models/$(DEPDIR)/$(am__dirstamp)\n+gnu/javax/swing/text/html/parser/models/TableRowContentModel.lo:  \\\n+\tgnu/javax/swing/text/html/parser/models/$(am__dirstamp) \\\n+\tgnu/javax/swing/text/html/parser/models/$(DEPDIR)/$(am__dirstamp)\n+gnu/javax/swing/text/html/parser/models/transformer.lo:  \\\n+\tgnu/javax/swing/text/html/parser/models/$(am__dirstamp) \\\n+\tgnu/javax/swing/text/html/parser/models/$(DEPDIR)/$(am__dirstamp)\n java/applet/$(am__dirstamp):\n \t@$(mkdir_p) java/applet\n \t@: > java/applet/$(am__dirstamp)\n@@ -13031,6 +13290,9 @@ javax/swing/text/BadLocationException.lo:  \\\n \tjavax/swing/text/$(DEPDIR)/$(am__dirstamp)\n javax/swing/text/Caret.lo: javax/swing/text/$(am__dirstamp) \\\n \tjavax/swing/text/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/text/ChangedCharSetException.lo:  \\\n+\tjavax/swing/text/$(am__dirstamp) \\\n+\tjavax/swing/text/$(DEPDIR)/$(am__dirstamp)\n javax/swing/text/ComponentView.lo: javax/swing/text/$(am__dirstamp) \\\n \tjavax/swing/text/$(DEPDIR)/$(am__dirstamp)\n javax/swing/text/DefaultCaret.lo: javax/swing/text/$(am__dirstamp) \\\n@@ -13120,15 +13382,51 @@ javax/swing/text/html/$(DEPDIR)/$(am__dirstamp):\n \t@: > javax/swing/text/html/$(DEPDIR)/$(am__dirstamp)\n javax/swing/text/html/HTML.lo: javax/swing/text/html/$(am__dirstamp) \\\n \tjavax/swing/text/html/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/text/html/HTMLDocument.lo:  \\\n+\tjavax/swing/text/html/$(am__dirstamp) \\\n+\tjavax/swing/text/html/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/text/html/HTMLEditorKit.lo:  \\\n+\tjavax/swing/text/html/$(am__dirstamp) \\\n+\tjavax/swing/text/html/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/text/html/HTMLFrameHyperlinkEvent.lo:  \\\n+\tjavax/swing/text/html/$(am__dirstamp) \\\n+\tjavax/swing/text/html/$(DEPDIR)/$(am__dirstamp)\n javax/swing/text/html/parser/$(am__dirstamp):\n \t@$(mkdir_p) javax/swing/text/html/parser\n \t@: > javax/swing/text/html/parser/$(am__dirstamp)\n javax/swing/text/html/parser/$(DEPDIR)/$(am__dirstamp):\n \t@$(mkdir_p) javax/swing/text/html/parser/$(DEPDIR)\n \t@: > javax/swing/text/html/parser/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/text/html/parser/AttributeList.lo:  \\\n+\tjavax/swing/text/html/parser/$(am__dirstamp) \\\n+\tjavax/swing/text/html/parser/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/text/html/parser/ContentModel.lo:  \\\n+\tjavax/swing/text/html/parser/$(am__dirstamp) \\\n+\tjavax/swing/text/html/parser/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/text/html/parser/DTD.lo:  \\\n+\tjavax/swing/text/html/parser/$(am__dirstamp) \\\n+\tjavax/swing/text/html/parser/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/text/html/parser/DTDConstants.lo:  \\\n+\tjavax/swing/text/html/parser/$(am__dirstamp) \\\n+\tjavax/swing/text/html/parser/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/text/html/parser/DocumentParser.lo:  \\\n+\tjavax/swing/text/html/parser/$(am__dirstamp) \\\n+\tjavax/swing/text/html/parser/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/text/html/parser/Element.lo:  \\\n+\tjavax/swing/text/html/parser/$(am__dirstamp) \\\n+\tjavax/swing/text/html/parser/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/text/html/parser/Entity.lo:  \\\n+\tjavax/swing/text/html/parser/$(am__dirstamp) \\\n+\tjavax/swing/text/html/parser/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/text/html/parser/Parser.lo:  \\\n+\tjavax/swing/text/html/parser/$(am__dirstamp) \\\n+\tjavax/swing/text/html/parser/$(DEPDIR)/$(am__dirstamp)\n javax/swing/text/html/parser/ParserDelegator.lo:  \\\n \tjavax/swing/text/html/parser/$(am__dirstamp) \\\n \tjavax/swing/text/html/parser/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/text/html/parser/TagElement.lo:  \\\n+\tjavax/swing/text/html/parser/$(am__dirstamp) \\\n+\tjavax/swing/text/html/parser/$(DEPDIR)/$(am__dirstamp)\n javax/swing/text/rtf/$(am__dirstamp):\n \t@$(mkdir_p) javax/swing/text/rtf\n \t@: > javax/swing/text/rtf/$(am__dirstamp)\n@@ -15699,6 +15997,52 @@ mostlyclean-compile:\n \t-rm -f gnu/java/util/prefs/NodeReader.lo\n \t-rm -f gnu/java/util/prefs/NodeWriter.$(OBJEXT)\n \t-rm -f gnu/java/util/prefs/NodeWriter.lo\n+\t-rm -f gnu/javax/swing/text/html/parser/HTML_401F.$(OBJEXT)\n+\t-rm -f gnu/javax/swing/text/html/parser/HTML_401F.lo\n+\t-rm -f gnu/javax/swing/text/html/parser/gnuDTD.$(OBJEXT)\n+\t-rm -f gnu/javax/swing/text/html/parser/gnuDTD.lo\n+\t-rm -f gnu/javax/swing/text/html/parser/htmlAttributeSet.$(OBJEXT)\n+\t-rm -f gnu/javax/swing/text/html/parser/htmlAttributeSet.lo\n+\t-rm -f gnu/javax/swing/text/html/parser/htmlValidator.$(OBJEXT)\n+\t-rm -f gnu/javax/swing/text/html/parser/htmlValidator.lo\n+\t-rm -f gnu/javax/swing/text/html/parser/models/PCDATAonly_model.$(OBJEXT)\n+\t-rm -f gnu/javax/swing/text/html/parser/models/PCDATAonly_model.lo\n+\t-rm -f gnu/javax/swing/text/html/parser/models/TableRowContentModel.$(OBJEXT)\n+\t-rm -f gnu/javax/swing/text/html/parser/models/TableRowContentModel.lo\n+\t-rm -f gnu/javax/swing/text/html/parser/models/list.$(OBJEXT)\n+\t-rm -f gnu/javax/swing/text/html/parser/models/list.lo\n+\t-rm -f gnu/javax/swing/text/html/parser/models/noTagModel.$(OBJEXT)\n+\t-rm -f gnu/javax/swing/text/html/parser/models/noTagModel.lo\n+\t-rm -f gnu/javax/swing/text/html/parser/models/node.$(OBJEXT)\n+\t-rm -f gnu/javax/swing/text/html/parser/models/node.lo\n+\t-rm -f gnu/javax/swing/text/html/parser/models/transformer.$(OBJEXT)\n+\t-rm -f gnu/javax/swing/text/html/parser/models/transformer.lo\n+\t-rm -f gnu/javax/swing/text/html/parser/support/Parser.$(OBJEXT)\n+\t-rm -f gnu/javax/swing/text/html/parser/support/Parser.lo\n+\t-rm -f gnu/javax/swing/text/html/parser/support/gnuStringIntMapper.$(OBJEXT)\n+\t-rm -f gnu/javax/swing/text/html/parser/support/gnuStringIntMapper.lo\n+\t-rm -f gnu/javax/swing/text/html/parser/support/low/Buffer.$(OBJEXT)\n+\t-rm -f gnu/javax/swing/text/html/parser/support/low/Buffer.lo\n+\t-rm -f gnu/javax/swing/text/html/parser/support/low/Constants.$(OBJEXT)\n+\t-rm -f gnu/javax/swing/text/html/parser/support/low/Constants.lo\n+\t-rm -f gnu/javax/swing/text/html/parser/support/low/Location.$(OBJEXT)\n+\t-rm -f gnu/javax/swing/text/html/parser/support/low/Location.lo\n+\t-rm -f gnu/javax/swing/text/html/parser/support/low/ParseException.$(OBJEXT)\n+\t-rm -f gnu/javax/swing/text/html/parser/support/low/ParseException.lo\n+\t-rm -f gnu/javax/swing/text/html/parser/support/low/Queue.$(OBJEXT)\n+\t-rm -f gnu/javax/swing/text/html/parser/support/low/Queue.lo\n+\t-rm -f gnu/javax/swing/text/html/parser/support/low/ReaderTokenizer.$(OBJEXT)\n+\t-rm -f gnu/javax/swing/text/html/parser/support/low/ReaderTokenizer.lo\n+\t-rm -f gnu/javax/swing/text/html/parser/support/low/Token.$(OBJEXT)\n+\t-rm -f gnu/javax/swing/text/html/parser/support/low/Token.lo\n+\t-rm -f gnu/javax/swing/text/html/parser/support/low/node.$(OBJEXT)\n+\t-rm -f gnu/javax/swing/text/html/parser/support/low/node.lo\n+\t-rm -f gnu/javax/swing/text/html/parser/support/low/pattern.$(OBJEXT)\n+\t-rm -f gnu/javax/swing/text/html/parser/support/low/pattern.lo\n+\t-rm -f gnu/javax/swing/text/html/parser/support/parameterDefaulter.$(OBJEXT)\n+\t-rm -f gnu/javax/swing/text/html/parser/support/parameterDefaulter.lo\n+\t-rm -f gnu/javax/swing/text/html/parser/support/textPreProcessor.$(OBJEXT)\n+\t-rm -f gnu/javax/swing/text/html/parser/support/textPreProcessor.lo\n \t-rm -f gnu/regexp/CharIndexed.$(OBJEXT)\n \t-rm -f gnu/regexp/CharIndexed.lo\n \t-rm -f gnu/regexp/CharIndexedCharArray.$(OBJEXT)\n@@ -19383,6 +19727,8 @@ mostlyclean-compile:\n \t-rm -f javax/swing/text/BadLocationException.lo\n \t-rm -f javax/swing/text/Caret.$(OBJEXT)\n \t-rm -f javax/swing/text/Caret.lo\n+\t-rm -f javax/swing/text/ChangedCharSetException.$(OBJEXT)\n+\t-rm -f javax/swing/text/ChangedCharSetException.lo\n \t-rm -f javax/swing/text/ComponentView.$(OBJEXT)\n \t-rm -f javax/swing/text/ComponentView.lo\n \t-rm -f javax/swing/text/DefaultCaret.$(OBJEXT)\n@@ -19459,8 +19805,32 @@ mostlyclean-compile:\n \t-rm -f javax/swing/text/ViewFactory.lo\n \t-rm -f javax/swing/text/html/HTML.$(OBJEXT)\n \t-rm -f javax/swing/text/html/HTML.lo\n+\t-rm -f javax/swing/text/html/HTMLDocument.$(OBJEXT)\n+\t-rm -f javax/swing/text/html/HTMLDocument.lo\n+\t-rm -f javax/swing/text/html/HTMLEditorKit.$(OBJEXT)\n+\t-rm -f javax/swing/text/html/HTMLEditorKit.lo\n+\t-rm -f javax/swing/text/html/HTMLFrameHyperlinkEvent.$(OBJEXT)\n+\t-rm -f javax/swing/text/html/HTMLFrameHyperlinkEvent.lo\n+\t-rm -f javax/swing/text/html/parser/AttributeList.$(OBJEXT)\n+\t-rm -f javax/swing/text/html/parser/AttributeList.lo\n+\t-rm -f javax/swing/text/html/parser/ContentModel.$(OBJEXT)\n+\t-rm -f javax/swing/text/html/parser/ContentModel.lo\n+\t-rm -f javax/swing/text/html/parser/DTD.$(OBJEXT)\n+\t-rm -f javax/swing/text/html/parser/DTD.lo\n+\t-rm -f javax/swing/text/html/parser/DTDConstants.$(OBJEXT)\n+\t-rm -f javax/swing/text/html/parser/DTDConstants.lo\n+\t-rm -f javax/swing/text/html/parser/DocumentParser.$(OBJEXT)\n+\t-rm -f javax/swing/text/html/parser/DocumentParser.lo\n+\t-rm -f javax/swing/text/html/parser/Element.$(OBJEXT)\n+\t-rm -f javax/swing/text/html/parser/Element.lo\n+\t-rm -f javax/swing/text/html/parser/Entity.$(OBJEXT)\n+\t-rm -f javax/swing/text/html/parser/Entity.lo\n+\t-rm -f javax/swing/text/html/parser/Parser.$(OBJEXT)\n+\t-rm -f javax/swing/text/html/parser/Parser.lo\n \t-rm -f javax/swing/text/html/parser/ParserDelegator.$(OBJEXT)\n \t-rm -f javax/swing/text/html/parser/ParserDelegator.lo\n+\t-rm -f javax/swing/text/html/parser/TagElement.$(OBJEXT)\n+\t-rm -f javax/swing/text/html/parser/TagElement.lo\n \t-rm -f javax/swing/text/rtf/ControlWordToken.$(OBJEXT)\n \t-rm -f javax/swing/text/rtf/ControlWordToken.lo\n \t-rm -f javax/swing/text/rtf/RTFEditorKit.$(OBJEXT)\n@@ -20193,6 +20563,29 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/java/util/prefs/$(DEPDIR)/MemoryBasedPreferences.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/java/util/prefs/$(DEPDIR)/NodeReader.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/java/util/prefs/$(DEPDIR)/NodeWriter.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/javax/swing/text/html/parser/$(DEPDIR)/HTML_401F.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/javax/swing/text/html/parser/$(DEPDIR)/gnuDTD.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/javax/swing/text/html/parser/$(DEPDIR)/htmlAttributeSet.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/javax/swing/text/html/parser/$(DEPDIR)/htmlValidator.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/javax/swing/text/html/parser/models/$(DEPDIR)/PCDATAonly_model.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/javax/swing/text/html/parser/models/$(DEPDIR)/TableRowContentModel.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/javax/swing/text/html/parser/models/$(DEPDIR)/list.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/javax/swing/text/html/parser/models/$(DEPDIR)/noTagModel.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/javax/swing/text/html/parser/models/$(DEPDIR)/node.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/javax/swing/text/html/parser/models/$(DEPDIR)/transformer.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/javax/swing/text/html/parser/support/$(DEPDIR)/Parser.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/javax/swing/text/html/parser/support/$(DEPDIR)/gnuStringIntMapper.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/javax/swing/text/html/parser/support/$(DEPDIR)/parameterDefaulter.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/javax/swing/text/html/parser/support/$(DEPDIR)/textPreProcessor.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/javax/swing/text/html/parser/support/low/$(DEPDIR)/Buffer.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/javax/swing/text/html/parser/support/low/$(DEPDIR)/Constants.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/javax/swing/text/html/parser/support/low/$(DEPDIR)/Location.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/javax/swing/text/html/parser/support/low/$(DEPDIR)/ParseException.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/javax/swing/text/html/parser/support/low/$(DEPDIR)/Queue.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/javax/swing/text/html/parser/support/low/$(DEPDIR)/ReaderTokenizer.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/javax/swing/text/html/parser/support/low/$(DEPDIR)/Token.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/javax/swing/text/html/parser/support/low/$(DEPDIR)/node.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/javax/swing/text/html/parser/support/low/$(DEPDIR)/pattern.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/regexp/$(DEPDIR)/CharIndexed.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/regexp/$(DEPDIR)/CharIndexedCharArray.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/regexp/$(DEPDIR)/CharIndexedInputStream.Plo@am__quote@\n@@ -22035,6 +22428,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@javax/swing/text/$(DEPDIR)/AttributeSet.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/swing/text/$(DEPDIR)/BadLocationException.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/swing/text/$(DEPDIR)/Caret.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/text/$(DEPDIR)/ChangedCharSetException.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/swing/text/$(DEPDIR)/ComponentView.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/swing/text/$(DEPDIR)/DefaultCaret.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/swing/text/$(DEPDIR)/DefaultEditorKit.Plo@am__quote@\n@@ -22073,7 +22467,19 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@javax/swing/text/$(DEPDIR)/View.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/swing/text/$(DEPDIR)/ViewFactory.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/swing/text/html/$(DEPDIR)/HTML.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/text/html/$(DEPDIR)/HTMLDocument.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/text/html/$(DEPDIR)/HTMLEditorKit.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/text/html/$(DEPDIR)/HTMLFrameHyperlinkEvent.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/text/html/parser/$(DEPDIR)/AttributeList.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/text/html/parser/$(DEPDIR)/ContentModel.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/text/html/parser/$(DEPDIR)/DTD.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/text/html/parser/$(DEPDIR)/DTDConstants.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/text/html/parser/$(DEPDIR)/DocumentParser.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/text/html/parser/$(DEPDIR)/Element.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/text/html/parser/$(DEPDIR)/Entity.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/text/html/parser/$(DEPDIR)/Parser.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/swing/text/html/parser/$(DEPDIR)/ParserDelegator.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/text/html/parser/$(DEPDIR)/TagElement.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/swing/text/rtf/$(DEPDIR)/ControlWordToken.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/swing/text/rtf/$(DEPDIR)/RTFEditorKit.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/swing/text/rtf/$(DEPDIR)/RTFParseException.Plo@am__quote@\n@@ -22725,6 +23131,10 @@ clean-libtool:\n \t-rm -rf gnu/java/text/.libs gnu/java/text/_libs\n \t-rm -rf gnu/java/util/.libs gnu/java/util/_libs\n \t-rm -rf gnu/java/util/prefs/.libs gnu/java/util/prefs/_libs\n+\t-rm -rf gnu/javax/swing/text/html/parser/.libs gnu/javax/swing/text/html/parser/_libs\n+\t-rm -rf gnu/javax/swing/text/html/parser/models/.libs gnu/javax/swing/text/html/parser/models/_libs\n+\t-rm -rf gnu/javax/swing/text/html/parser/support/.libs gnu/javax/swing/text/html/parser/support/_libs\n+\t-rm -rf gnu/javax/swing/text/html/parser/support/low/.libs gnu/javax/swing/text/html/parser/support/low/_libs\n \t-rm -rf gnu/regexp/.libs gnu/regexp/_libs\n \t-rm -rf java/applet/.libs java/applet/_libs\n \t-rm -rf java/awt/.libs java/awt/_libs\n@@ -23276,6 +23686,14 @@ distclean-generic:\n \t-rm -f gnu/java/util/$(am__dirstamp)\n \t-rm -f gnu/java/util/prefs/$(DEPDIR)/$(am__dirstamp)\n \t-rm -f gnu/java/util/prefs/$(am__dirstamp)\n+\t-rm -f gnu/javax/swing/text/html/parser/$(DEPDIR)/$(am__dirstamp)\n+\t-rm -f gnu/javax/swing/text/html/parser/$(am__dirstamp)\n+\t-rm -f gnu/javax/swing/text/html/parser/models/$(DEPDIR)/$(am__dirstamp)\n+\t-rm -f gnu/javax/swing/text/html/parser/models/$(am__dirstamp)\n+\t-rm -f gnu/javax/swing/text/html/parser/support/$(DEPDIR)/$(am__dirstamp)\n+\t-rm -f gnu/javax/swing/text/html/parser/support/$(am__dirstamp)\n+\t-rm -f gnu/javax/swing/text/html/parser/support/low/$(DEPDIR)/$(am__dirstamp)\n+\t-rm -f gnu/javax/swing/text/html/parser/support/low/$(am__dirstamp)\n \t-rm -f gnu/regexp/$(DEPDIR)/$(am__dirstamp)\n \t-rm -f gnu/regexp/$(am__dirstamp)\n \t-rm -f java/applet/$(DEPDIR)/$(am__dirstamp)\n@@ -23470,7 +23888,7 @@ clean-am: clean-binPROGRAMS clean-generic clean-libtool clean-local \\\n \n distclean: distclean-recursive\n \t-rm -f $(am__CONFIG_DISTCLEAN_FILES)\n-\t-rm -rf ./$(DEPDIR) gnu/awt/$(DEPDIR) gnu/awt/j2d/$(DEPDIR) gnu/awt/xlib/$(DEPDIR) gnu/classpath/$(DEPDIR) gnu/gcj/$(DEPDIR) gnu/gcj/convert/$(DEPDIR) gnu/gcj/io/$(DEPDIR) gnu/gcj/runtime/$(DEPDIR) gnu/gcj/tools/gcj_dbtool/$(DEPDIR) gnu/gcj/util/$(DEPDIR) gnu/gcj/xlib/$(DEPDIR) gnu/java/awt/$(DEPDIR) gnu/java/awt/color/$(DEPDIR) gnu/java/awt/image/$(DEPDIR) gnu/java/awt/peer/$(DEPDIR) gnu/java/io/$(DEPDIR) gnu/java/lang/$(DEPDIR) gnu/java/lang/reflect/$(DEPDIR) gnu/java/locale/$(DEPDIR) gnu/java/math/$(DEPDIR) gnu/java/net/$(DEPDIR) gnu/java/net/protocol/core/$(DEPDIR) gnu/java/net/protocol/file/$(DEPDIR) gnu/java/net/protocol/ftp/$(DEPDIR) gnu/java/net/protocol/gcjlib/$(DEPDIR) gnu/java/net/protocol/http/$(DEPDIR) gnu/java/net/protocol/http/event/$(DEPDIR) gnu/java/net/protocol/jar/$(DEPDIR) gnu/java/nio/$(DEPDIR) gnu/java/nio/channels/$(DEPDIR) gnu/java/nio/charset/$(DEPDIR) gnu/java/rmi/$(DEPDIR) gnu/java/rmi/dgc/$(DEPDIR) gnu/java/rmi/registry/$(DEPDIR) gnu/java/rmi/rmic/$(DEPDIR) gnu/java/rmi/server/$(DEPDIR) gnu/java/security/$(DEPDIR) gnu/java/security/action/$(DEPDIR) gnu/java/security/ber/$(DEPDIR) gnu/java/security/der/$(DEPDIR) gnu/java/security/pkcs/$(DEPDIR) gnu/java/security/provider/$(DEPDIR) gnu/java/security/util/$(DEPDIR) gnu/java/security/x509/$(DEPDIR) gnu/java/security/x509/ext/$(DEPDIR) gnu/java/text/$(DEPDIR) gnu/java/util/$(DEPDIR) gnu/java/util/prefs/$(DEPDIR) gnu/regexp/$(DEPDIR) java/applet/$(DEPDIR) java/awt/$(DEPDIR) java/awt/color/$(DEPDIR) java/awt/datatransfer/$(DEPDIR) java/awt/dnd/$(DEPDIR) java/awt/dnd/peer/$(DEPDIR) java/awt/event/$(DEPDIR) java/awt/font/$(DEPDIR) java/awt/geom/$(DEPDIR) java/awt/im/$(DEPDIR) java/awt/im/spi/$(DEPDIR) java/awt/image/$(DEPDIR) java/awt/image/renderable/$(DEPDIR) java/awt/peer/$(DEPDIR) java/awt/print/$(DEPDIR) java/beans/$(DEPDIR) java/beans/beancontext/$(DEPDIR) java/io/$(DEPDIR) java/lang/$(DEPDIR) java/lang/ref/$(DEPDIR) java/lang/reflect/$(DEPDIR) java/math/$(DEPDIR) java/net/$(DEPDIR) java/nio/$(DEPDIR) java/nio/channels/$(DEPDIR) java/nio/channels/spi/$(DEPDIR) java/nio/charset/$(DEPDIR) java/nio/charset/spi/$(DEPDIR) java/rmi/$(DEPDIR) java/rmi/activation/$(DEPDIR) java/rmi/dgc/$(DEPDIR) java/rmi/registry/$(DEPDIR) java/rmi/server/$(DEPDIR) java/security/$(DEPDIR) java/security/acl/$(DEPDIR) java/security/cert/$(DEPDIR) java/security/interfaces/$(DEPDIR) java/security/spec/$(DEPDIR) java/sql/$(DEPDIR) java/text/$(DEPDIR) java/util/$(DEPDIR) java/util/jar/$(DEPDIR) java/util/logging/$(DEPDIR) java/util/prefs/$(DEPDIR) java/util/regex/$(DEPDIR) java/util/zip/$(DEPDIR) javax/accessibility/$(DEPDIR) javax/crypto/$(DEPDIR) javax/crypto/interfaces/$(DEPDIR) javax/crypto/spec/$(DEPDIR) javax/naming/$(DEPDIR) javax/naming/directory/$(DEPDIR) javax/naming/event/$(DEPDIR) javax/naming/ldap/$(DEPDIR) javax/naming/spi/$(DEPDIR) javax/net/$(DEPDIR) javax/net/ssl/$(DEPDIR) javax/print/$(DEPDIR) javax/print/attribute/$(DEPDIR) javax/print/attribute/standard/$(DEPDIR) javax/print/event/$(DEPDIR) javax/security/auth/$(DEPDIR) javax/security/auth/callback/$(DEPDIR) javax/security/auth/login/$(DEPDIR) javax/security/auth/spi/$(DEPDIR) javax/security/auth/x500/$(DEPDIR) javax/security/cert/$(DEPDIR) javax/security/sasl/$(DEPDIR) javax/sql/$(DEPDIR) javax/swing/$(DEPDIR) javax/swing/border/$(DEPDIR) javax/swing/colorchooser/$(DEPDIR) javax/swing/event/$(DEPDIR) javax/swing/filechooser/$(DEPDIR) javax/swing/plaf/$(DEPDIR) javax/swing/plaf/basic/$(DEPDIR) javax/swing/plaf/metal/$(DEPDIR) javax/swing/table/$(DEPDIR) javax/swing/text/$(DEPDIR) javax/swing/text/html/$(DEPDIR) javax/swing/text/html/parser/$(DEPDIR) javax/swing/text/rtf/$(DEPDIR) javax/swing/tree/$(DEPDIR) javax/swing/undo/$(DEPDIR) javax/transaction/$(DEPDIR) javax/transaction/xa/$(DEPDIR) jni/classpath/$(DEPDIR) jni/gtk-peer/$(DEPDIR) org/ietf/jgss/$(DEPDIR) sysdep/$(DEPDIR)\n+\t-rm -rf ./$(DEPDIR) gnu/awt/$(DEPDIR) gnu/awt/j2d/$(DEPDIR) gnu/awt/xlib/$(DEPDIR) gnu/classpath/$(DEPDIR) gnu/gcj/$(DEPDIR) gnu/gcj/convert/$(DEPDIR) gnu/gcj/io/$(DEPDIR) gnu/gcj/runtime/$(DEPDIR) gnu/gcj/tools/gcj_dbtool/$(DEPDIR) gnu/gcj/util/$(DEPDIR) gnu/gcj/xlib/$(DEPDIR) gnu/java/awt/$(DEPDIR) gnu/java/awt/color/$(DEPDIR) gnu/java/awt/image/$(DEPDIR) gnu/java/awt/peer/$(DEPDIR) gnu/java/io/$(DEPDIR) gnu/java/lang/$(DEPDIR) gnu/java/lang/reflect/$(DEPDIR) gnu/java/locale/$(DEPDIR) gnu/java/math/$(DEPDIR) gnu/java/net/$(DEPDIR) gnu/java/net/protocol/core/$(DEPDIR) gnu/java/net/protocol/file/$(DEPDIR) gnu/java/net/protocol/ftp/$(DEPDIR) gnu/java/net/protocol/gcjlib/$(DEPDIR) gnu/java/net/protocol/http/$(DEPDIR) gnu/java/net/protocol/http/event/$(DEPDIR) gnu/java/net/protocol/jar/$(DEPDIR) gnu/java/nio/$(DEPDIR) gnu/java/nio/channels/$(DEPDIR) gnu/java/nio/charset/$(DEPDIR) gnu/java/rmi/$(DEPDIR) gnu/java/rmi/dgc/$(DEPDIR) gnu/java/rmi/registry/$(DEPDIR) gnu/java/rmi/rmic/$(DEPDIR) gnu/java/rmi/server/$(DEPDIR) gnu/java/security/$(DEPDIR) gnu/java/security/action/$(DEPDIR) gnu/java/security/ber/$(DEPDIR) gnu/java/security/der/$(DEPDIR) gnu/java/security/pkcs/$(DEPDIR) gnu/java/security/provider/$(DEPDIR) gnu/java/security/util/$(DEPDIR) gnu/java/security/x509/$(DEPDIR) gnu/java/security/x509/ext/$(DEPDIR) gnu/java/text/$(DEPDIR) gnu/java/util/$(DEPDIR) gnu/java/util/prefs/$(DEPDIR) gnu/javax/swing/text/html/parser/$(DEPDIR) gnu/javax/swing/text/html/parser/models/$(DEPDIR) gnu/javax/swing/text/html/parser/support/$(DEPDIR) gnu/javax/swing/text/html/parser/support/low/$(DEPDIR) gnu/regexp/$(DEPDIR) java/applet/$(DEPDIR) java/awt/$(DEPDIR) java/awt/color/$(DEPDIR) java/awt/datatransfer/$(DEPDIR) java/awt/dnd/$(DEPDIR) java/awt/dnd/peer/$(DEPDIR) java/awt/event/$(DEPDIR) java/awt/font/$(DEPDIR) java/awt/geom/$(DEPDIR) java/awt/im/$(DEPDIR) java/awt/im/spi/$(DEPDIR) java/awt/image/$(DEPDIR) java/awt/image/renderable/$(DEPDIR) java/awt/peer/$(DEPDIR) java/awt/print/$(DEPDIR) java/beans/$(DEPDIR) java/beans/beancontext/$(DEPDIR) java/io/$(DEPDIR) java/lang/$(DEPDIR) java/lang/ref/$(DEPDIR) java/lang/reflect/$(DEPDIR) java/math/$(DEPDIR) java/net/$(DEPDIR) java/nio/$(DEPDIR) java/nio/channels/$(DEPDIR) java/nio/channels/spi/$(DEPDIR) java/nio/charset/$(DEPDIR) java/nio/charset/spi/$(DEPDIR) java/rmi/$(DEPDIR) java/rmi/activation/$(DEPDIR) java/rmi/dgc/$(DEPDIR) java/rmi/registry/$(DEPDIR) java/rmi/server/$(DEPDIR) java/security/$(DEPDIR) java/security/acl/$(DEPDIR) java/security/cert/$(DEPDIR) java/security/interfaces/$(DEPDIR) java/security/spec/$(DEPDIR) java/sql/$(DEPDIR) java/text/$(DEPDIR) java/util/$(DEPDIR) java/util/jar/$(DEPDIR) java/util/logging/$(DEPDIR) java/util/prefs/$(DEPDIR) java/util/regex/$(DEPDIR) java/util/zip/$(DEPDIR) javax/accessibility/$(DEPDIR) javax/crypto/$(DEPDIR) javax/crypto/interfaces/$(DEPDIR) javax/crypto/spec/$(DEPDIR) javax/naming/$(DEPDIR) javax/naming/directory/$(DEPDIR) javax/naming/event/$(DEPDIR) javax/naming/ldap/$(DEPDIR) javax/naming/spi/$(DEPDIR) javax/net/$(DEPDIR) javax/net/ssl/$(DEPDIR) javax/print/$(DEPDIR) javax/print/attribute/$(DEPDIR) javax/print/attribute/standard/$(DEPDIR) javax/print/event/$(DEPDIR) javax/security/auth/$(DEPDIR) javax/security/auth/callback/$(DEPDIR) javax/security/auth/login/$(DEPDIR) javax/security/auth/spi/$(DEPDIR) javax/security/auth/x500/$(DEPDIR) javax/security/cert/$(DEPDIR) javax/security/sasl/$(DEPDIR) javax/sql/$(DEPDIR) javax/swing/$(DEPDIR) javax/swing/border/$(DEPDIR) javax/swing/colorchooser/$(DEPDIR) javax/swing/event/$(DEPDIR) javax/swing/filechooser/$(DEPDIR) javax/swing/plaf/$(DEPDIR) javax/swing/plaf/basic/$(DEPDIR) javax/swing/plaf/metal/$(DEPDIR) javax/swing/table/$(DEPDIR) javax/swing/text/$(DEPDIR) javax/swing/text/html/$(DEPDIR) javax/swing/text/html/parser/$(DEPDIR) javax/swing/text/rtf/$(DEPDIR) javax/swing/tree/$(DEPDIR) javax/swing/undo/$(DEPDIR) javax/transaction/$(DEPDIR) javax/transaction/xa/$(DEPDIR) jni/classpath/$(DEPDIR) jni/gtk-peer/$(DEPDIR) org/ietf/jgss/$(DEPDIR) sysdep/$(DEPDIR)\n \t-rm -f Makefile\n distclean-am: clean-am distclean-compile distclean-generic \\\n \tdistclean-libtool distclean-local distclean-tags\n@@ -23501,7 +23919,7 @@ installcheck-am:\n maintainer-clean: maintainer-clean-recursive\n \t-rm -f $(am__CONFIG_DISTCLEAN_FILES)\n \t-rm -rf $(top_srcdir)/autom4te.cache\n-\t-rm -rf ./$(DEPDIR) gnu/awt/$(DEPDIR) gnu/awt/j2d/$(DEPDIR) gnu/awt/xlib/$(DEPDIR) gnu/classpath/$(DEPDIR) gnu/gcj/$(DEPDIR) gnu/gcj/convert/$(DEPDIR) gnu/gcj/io/$(DEPDIR) gnu/gcj/runtime/$(DEPDIR) gnu/gcj/tools/gcj_dbtool/$(DEPDIR) gnu/gcj/util/$(DEPDIR) gnu/gcj/xlib/$(DEPDIR) gnu/java/awt/$(DEPDIR) gnu/java/awt/color/$(DEPDIR) gnu/java/awt/image/$(DEPDIR) gnu/java/awt/peer/$(DEPDIR) gnu/java/io/$(DEPDIR) gnu/java/lang/$(DEPDIR) gnu/java/lang/reflect/$(DEPDIR) gnu/java/locale/$(DEPDIR) gnu/java/math/$(DEPDIR) gnu/java/net/$(DEPDIR) gnu/java/net/protocol/core/$(DEPDIR) gnu/java/net/protocol/file/$(DEPDIR) gnu/java/net/protocol/ftp/$(DEPDIR) gnu/java/net/protocol/gcjlib/$(DEPDIR) gnu/java/net/protocol/http/$(DEPDIR) gnu/java/net/protocol/http/event/$(DEPDIR) gnu/java/net/protocol/jar/$(DEPDIR) gnu/java/nio/$(DEPDIR) gnu/java/nio/channels/$(DEPDIR) gnu/java/nio/charset/$(DEPDIR) gnu/java/rmi/$(DEPDIR) gnu/java/rmi/dgc/$(DEPDIR) gnu/java/rmi/registry/$(DEPDIR) gnu/java/rmi/rmic/$(DEPDIR) gnu/java/rmi/server/$(DEPDIR) gnu/java/security/$(DEPDIR) gnu/java/security/action/$(DEPDIR) gnu/java/security/ber/$(DEPDIR) gnu/java/security/der/$(DEPDIR) gnu/java/security/pkcs/$(DEPDIR) gnu/java/security/provider/$(DEPDIR) gnu/java/security/util/$(DEPDIR) gnu/java/security/x509/$(DEPDIR) gnu/java/security/x509/ext/$(DEPDIR) gnu/java/text/$(DEPDIR) gnu/java/util/$(DEPDIR) gnu/java/util/prefs/$(DEPDIR) gnu/regexp/$(DEPDIR) java/applet/$(DEPDIR) java/awt/$(DEPDIR) java/awt/color/$(DEPDIR) java/awt/datatransfer/$(DEPDIR) java/awt/dnd/$(DEPDIR) java/awt/dnd/peer/$(DEPDIR) java/awt/event/$(DEPDIR) java/awt/font/$(DEPDIR) java/awt/geom/$(DEPDIR) java/awt/im/$(DEPDIR) java/awt/im/spi/$(DEPDIR) java/awt/image/$(DEPDIR) java/awt/image/renderable/$(DEPDIR) java/awt/peer/$(DEPDIR) java/awt/print/$(DEPDIR) java/beans/$(DEPDIR) java/beans/beancontext/$(DEPDIR) java/io/$(DEPDIR) java/lang/$(DEPDIR) java/lang/ref/$(DEPDIR) java/lang/reflect/$(DEPDIR) java/math/$(DEPDIR) java/net/$(DEPDIR) java/nio/$(DEPDIR) java/nio/channels/$(DEPDIR) java/nio/channels/spi/$(DEPDIR) java/nio/charset/$(DEPDIR) java/nio/charset/spi/$(DEPDIR) java/rmi/$(DEPDIR) java/rmi/activation/$(DEPDIR) java/rmi/dgc/$(DEPDIR) java/rmi/registry/$(DEPDIR) java/rmi/server/$(DEPDIR) java/security/$(DEPDIR) java/security/acl/$(DEPDIR) java/security/cert/$(DEPDIR) java/security/interfaces/$(DEPDIR) java/security/spec/$(DEPDIR) java/sql/$(DEPDIR) java/text/$(DEPDIR) java/util/$(DEPDIR) java/util/jar/$(DEPDIR) java/util/logging/$(DEPDIR) java/util/prefs/$(DEPDIR) java/util/regex/$(DEPDIR) java/util/zip/$(DEPDIR) javax/accessibility/$(DEPDIR) javax/crypto/$(DEPDIR) javax/crypto/interfaces/$(DEPDIR) javax/crypto/spec/$(DEPDIR) javax/naming/$(DEPDIR) javax/naming/directory/$(DEPDIR) javax/naming/event/$(DEPDIR) javax/naming/ldap/$(DEPDIR) javax/naming/spi/$(DEPDIR) javax/net/$(DEPDIR) javax/net/ssl/$(DEPDIR) javax/print/$(DEPDIR) javax/print/attribute/$(DEPDIR) javax/print/attribute/standard/$(DEPDIR) javax/print/event/$(DEPDIR) javax/security/auth/$(DEPDIR) javax/security/auth/callback/$(DEPDIR) javax/security/auth/login/$(DEPDIR) javax/security/auth/spi/$(DEPDIR) javax/security/auth/x500/$(DEPDIR) javax/security/cert/$(DEPDIR) javax/security/sasl/$(DEPDIR) javax/sql/$(DEPDIR) javax/swing/$(DEPDIR) javax/swing/border/$(DEPDIR) javax/swing/colorchooser/$(DEPDIR) javax/swing/event/$(DEPDIR) javax/swing/filechooser/$(DEPDIR) javax/swing/plaf/$(DEPDIR) javax/swing/plaf/basic/$(DEPDIR) javax/swing/plaf/metal/$(DEPDIR) javax/swing/table/$(DEPDIR) javax/swing/text/$(DEPDIR) javax/swing/text/html/$(DEPDIR) javax/swing/text/html/parser/$(DEPDIR) javax/swing/text/rtf/$(DEPDIR) javax/swing/tree/$(DEPDIR) javax/swing/undo/$(DEPDIR) javax/transaction/$(DEPDIR) javax/transaction/xa/$(DEPDIR) jni/classpath/$(DEPDIR) jni/gtk-peer/$(DEPDIR) org/ietf/jgss/$(DEPDIR) sysdep/$(DEPDIR)\n+\t-rm -rf ./$(DEPDIR) gnu/awt/$(DEPDIR) gnu/awt/j2d/$(DEPDIR) gnu/awt/xlib/$(DEPDIR) gnu/classpath/$(DEPDIR) gnu/gcj/$(DEPDIR) gnu/gcj/convert/$(DEPDIR) gnu/gcj/io/$(DEPDIR) gnu/gcj/runtime/$(DEPDIR) gnu/gcj/tools/gcj_dbtool/$(DEPDIR) gnu/gcj/util/$(DEPDIR) gnu/gcj/xlib/$(DEPDIR) gnu/java/awt/$(DEPDIR) gnu/java/awt/color/$(DEPDIR) gnu/java/awt/image/$(DEPDIR) gnu/java/awt/peer/$(DEPDIR) gnu/java/io/$(DEPDIR) gnu/java/lang/$(DEPDIR) gnu/java/lang/reflect/$(DEPDIR) gnu/java/locale/$(DEPDIR) gnu/java/math/$(DEPDIR) gnu/java/net/$(DEPDIR) gnu/java/net/protocol/core/$(DEPDIR) gnu/java/net/protocol/file/$(DEPDIR) gnu/java/net/protocol/ftp/$(DEPDIR) gnu/java/net/protocol/gcjlib/$(DEPDIR) gnu/java/net/protocol/http/$(DEPDIR) gnu/java/net/protocol/http/event/$(DEPDIR) gnu/java/net/protocol/jar/$(DEPDIR) gnu/java/nio/$(DEPDIR) gnu/java/nio/channels/$(DEPDIR) gnu/java/nio/charset/$(DEPDIR) gnu/java/rmi/$(DEPDIR) gnu/java/rmi/dgc/$(DEPDIR) gnu/java/rmi/registry/$(DEPDIR) gnu/java/rmi/rmic/$(DEPDIR) gnu/java/rmi/server/$(DEPDIR) gnu/java/security/$(DEPDIR) gnu/java/security/action/$(DEPDIR) gnu/java/security/ber/$(DEPDIR) gnu/java/security/der/$(DEPDIR) gnu/java/security/pkcs/$(DEPDIR) gnu/java/security/provider/$(DEPDIR) gnu/java/security/util/$(DEPDIR) gnu/java/security/x509/$(DEPDIR) gnu/java/security/x509/ext/$(DEPDIR) gnu/java/text/$(DEPDIR) gnu/java/util/$(DEPDIR) gnu/java/util/prefs/$(DEPDIR) gnu/javax/swing/text/html/parser/$(DEPDIR) gnu/javax/swing/text/html/parser/models/$(DEPDIR) gnu/javax/swing/text/html/parser/support/$(DEPDIR) gnu/javax/swing/text/html/parser/support/low/$(DEPDIR) gnu/regexp/$(DEPDIR) java/applet/$(DEPDIR) java/awt/$(DEPDIR) java/awt/color/$(DEPDIR) java/awt/datatransfer/$(DEPDIR) java/awt/dnd/$(DEPDIR) java/awt/dnd/peer/$(DEPDIR) java/awt/event/$(DEPDIR) java/awt/font/$(DEPDIR) java/awt/geom/$(DEPDIR) java/awt/im/$(DEPDIR) java/awt/im/spi/$(DEPDIR) java/awt/image/$(DEPDIR) java/awt/image/renderable/$(DEPDIR) java/awt/peer/$(DEPDIR) java/awt/print/$(DEPDIR) java/beans/$(DEPDIR) java/beans/beancontext/$(DEPDIR) java/io/$(DEPDIR) java/lang/$(DEPDIR) java/lang/ref/$(DEPDIR) java/lang/reflect/$(DEPDIR) java/math/$(DEPDIR) java/net/$(DEPDIR) java/nio/$(DEPDIR) java/nio/channels/$(DEPDIR) java/nio/channels/spi/$(DEPDIR) java/nio/charset/$(DEPDIR) java/nio/charset/spi/$(DEPDIR) java/rmi/$(DEPDIR) java/rmi/activation/$(DEPDIR) java/rmi/dgc/$(DEPDIR) java/rmi/registry/$(DEPDIR) java/rmi/server/$(DEPDIR) java/security/$(DEPDIR) java/security/acl/$(DEPDIR) java/security/cert/$(DEPDIR) java/security/interfaces/$(DEPDIR) java/security/spec/$(DEPDIR) java/sql/$(DEPDIR) java/text/$(DEPDIR) java/util/$(DEPDIR) java/util/jar/$(DEPDIR) java/util/logging/$(DEPDIR) java/util/prefs/$(DEPDIR) java/util/regex/$(DEPDIR) java/util/zip/$(DEPDIR) javax/accessibility/$(DEPDIR) javax/crypto/$(DEPDIR) javax/crypto/interfaces/$(DEPDIR) javax/crypto/spec/$(DEPDIR) javax/naming/$(DEPDIR) javax/naming/directory/$(DEPDIR) javax/naming/event/$(DEPDIR) javax/naming/ldap/$(DEPDIR) javax/naming/spi/$(DEPDIR) javax/net/$(DEPDIR) javax/net/ssl/$(DEPDIR) javax/print/$(DEPDIR) javax/print/attribute/$(DEPDIR) javax/print/attribute/standard/$(DEPDIR) javax/print/event/$(DEPDIR) javax/security/auth/$(DEPDIR) javax/security/auth/callback/$(DEPDIR) javax/security/auth/login/$(DEPDIR) javax/security/auth/spi/$(DEPDIR) javax/security/auth/x500/$(DEPDIR) javax/security/cert/$(DEPDIR) javax/security/sasl/$(DEPDIR) javax/sql/$(DEPDIR) javax/swing/$(DEPDIR) javax/swing/border/$(DEPDIR) javax/swing/colorchooser/$(DEPDIR) javax/swing/event/$(DEPDIR) javax/swing/filechooser/$(DEPDIR) javax/swing/plaf/$(DEPDIR) javax/swing/plaf/basic/$(DEPDIR) javax/swing/plaf/metal/$(DEPDIR) javax/swing/table/$(DEPDIR) javax/swing/text/$(DEPDIR) javax/swing/text/html/$(DEPDIR) javax/swing/text/html/parser/$(DEPDIR) javax/swing/text/rtf/$(DEPDIR) javax/swing/tree/$(DEPDIR) javax/swing/undo/$(DEPDIR) javax/transaction/$(DEPDIR) javax/transaction/xa/$(DEPDIR) jni/classpath/$(DEPDIR) jni/gtk-peer/$(DEPDIR) org/ietf/jgss/$(DEPDIR) sysdep/$(DEPDIR)\n \t-rm -f Makefile\n maintainer-clean-am: distclean-am maintainer-clean-generic\n "}, {"sha": "622c4fcc12644ea64ed996a95573076948505074", "filename": "libjava/gnu/javax/swing/text/html/package.html", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fpackage.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fpackage.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fpackage.html?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,50 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n+<!-- package.html - describes classes in javax.swing.text.html package.\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. -->\n+\n+<html>\n+<head><title>GNU Classpath - javax.swing.text.html</title></head>\n+\n+<body>\n+<p> Provides supporting classes for web browsers,\n+ web robots, web page content analysers, web editors and\n+ other applications applications working with Hypertext\n+ Markup Language (HTML).\n+</p>\n+\n+</body>\n+</html>"}, {"sha": "bd2f9f9f8621af987348ba6b3d81279db9fc0bd7", "filename": "libjava/gnu/javax/swing/text/html/parser/HTML_401F.java", "status": "added", "additions": 3729, "deletions": 0, "changes": 3729, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FHTML_401F.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FHTML_401F.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FHTML_401F.java?ref=18e479e2131f9931dce25de735d333710ee4814d"}, {"sha": "24d800af2fcadcb1665b618e9ee579a3ef36e506", "filename": "libjava/gnu/javax/swing/text/html/parser/gnuDTD.java", "status": "added", "additions": 422, "deletions": 0, "changes": 422, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FgnuDTD.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FgnuDTD.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FgnuDTD.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,422 @@\n+/* gnuDTD.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.javax.swing.text.html.parser;\n+\n+import java.io.PrintStream;\n+import java.io.Serializable;\n+\n+import java.util.BitSet;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Vector;\n+\n+import javax.swing.text.html.parser.AttributeList;\n+import javax.swing.text.html.parser.ContentModel;\n+import javax.swing.text.html.parser.Element;\n+import javax.swing.text.html.parser.Entity;\n+\n+/**\n+ * <p>\n+ * The class is derived from {@link gnu.javax.swing.text.html.parser.DTD }\n+ * making structure creation methods public. This is required when\n+ * creating the DTD by SGML parser that must have access to the structure.\n+ *\n+ * SGML DTD representation. Provides basis for describing a syntax of the\n+ * HTML documents. The fields of this class are NOT initialized in\n+ * constructor. You need to do this separately before passing this data\n+ * structure to the parser constructor.</p>\n+ *\n+ * <p>This implementation also provides you the derived class\n+ * <code>gnu.javax.swing.text.html.parser.DTD.HTML_4_0_1</code>, where\n+ * all fields are initialized to the values, representing HTML 4.01\n+ * (\"-//W3C//DTD HTML 4.01 Frameset//EN\") DTD. You can use it if you do not care\n+ * about the portability between different implementations of the core\n+ * class libraries. </p>\n+ * <p>Use {@link javax.swing.HTML.HTMLEditorKit.Parser#parse }\n+ * for parsing in accordance with \"-//W3C//DTD HTML 4.01 Frameset//EN\"\n+ * without specifying DTD separately.</p>\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class gnuDTD\n+  extends javax.swing.text.html.parser.DTD\n+  implements javax.swing.text.html.parser.DTDConstants, Serializable\n+{\n+  /* The undocumented element types, used to specify types, not defined\n+  in DTDConstants. */\n+\n+  /**\n+   * The URI element type (not defined in DTDConstants).\n+   */\n+  public static final int URI = 512;\n+\n+  /**\n+   * The Length element type\n+   */\n+  public static final int Length = 513;\n+\n+  /**\n+   * The Char element type\n+   */\n+  public static final int Char = 514;\n+\n+  /**\n+   * The Color element type\n+   */\n+  public static final int Color = 515;\n+\n+  /**\n+   * Creates a new instance of gnuDTD.\n+   * @param name the name of the DTD.\n+   */\n+  public gnuDTD(String name)\n+  {\n+    super(name);\n+  }\n+\n+  /**\n+   * Creates and returns new attribute (not an attribute list).\n+   * @param name the name of this attribute\n+   * @param type the type of this attribute (FIXED, IMPLIED or\n+   * REQUIRED from <code>DTDConstants</code>).\n+   * @param modifier the modifier of this attribute\n+   * @param default_value the default value of this attribute or null if\n+   * it is not specified.\n+   * @param allowed_values the allowed values of this attribute. The multiple\n+   * possible values in this parameter are supposed to be separated by\n+   * '|', same as in SGML DTD <code>&lt;!ATTLIST </code>tag. This parameter\n+   * can be null if no list of allowed values is specified.\n+   * @param atts the previous attribute of this element. This is\n+   * placed to the field\n+   * {@link javax.swing.text.html.parser.AttributeList#next },\n+   * creating a linked list.\n+   * @return\n+   */\n+  public AttributeList defAttributeList(String name, int type, int modifier,\n+                                        String default_value,\n+                                        String allowed_values,\n+                                        AttributeList atts\n+                                       )\n+  {\n+    return super.defAttributeList(name, type, modifier, default_value,\n+                                  allowed_values, atts\n+                                 );\n+  }\n+\n+  /**\n+   * Define the attributes for the element with the given name.\n+   * If the element is not exist, it is created. This method is\n+   * needed if the element attributes are defined befor the\n+   * element itself.\n+   * @param forElement\n+   * @param attributes\n+   */\n+  public void defAttrsFor(String forElement, AttributeList attributes)\n+  {\n+    super.defineAttributes(forElement, attributes);\n+  }\n+\n+  /**\n+   * Creates a new content model.\n+   * @param type specifies the BNF operation for this content model.\n+   * The valid operations are documented in the\n+   * {@link javax.swing.text.html.parser.ContentModel#type }.\n+   * @param content the content of this content model\n+   * @param next if the content model is specified by BNF-like\n+   * expression, contains the rest of this expression.\n+   * @return The newly created content model.\n+   */\n+  public ContentModel defContentModel(int type, Object content,\n+                                      ContentModel next\n+                                     )\n+  {\n+    return super.defContentModel(type, content, next);\n+  }\n+\n+  /**\n+   * Defines a new element and adds it to the element table.\n+   * If the element alredy exists,\n+   * overrides it settings with the specified values.\n+   * @param name the name of the new element\n+   * @param type the type of the element\n+   * @param headless true if the element needs no starting tag\n+   * @param tailless true if the element needs no closing tag\n+   * @param content the element content.\n+   * @param exclusions the elements that must be excluded from the\n+   * content of this element, in all levels of the hierarchy.\n+   * @param inclusions the elements that can be included as the\n+   * content of this element.\n+   * @param attributes the element attributes.\n+   * @return the created or updated element.\n+   */\n+  public Element defElement(String name, int type, boolean headless,\n+                            boolean tailless, ContentModel content,\n+                            String[] exclusions, String[] inclusions,\n+                            AttributeList attributes\n+                           )\n+  {\n+    return super.defElement(name, type, headless, tailless, content,\n+                            exclusions, inclusions, attributes\n+                           );\n+  }\n+\n+  /**\n+   * Defines a new element and adds it to the element table.\n+   * If the element alredy exists,\n+   * overrides it settings with the specified values.\n+   * @param name the name of the new element\n+   * @param type the type of the element\n+   * @param headless true if the element needs no starting tag\n+   * @param tailless true if the element needs no closing tag\n+   * @param content the element content.\n+   * @param exclusions the elements that must be excluded from the\n+   * content of this element, in all levels of the hierarchy.\n+   * @param inclusions the elements that can be included as the\n+   * content of this element.\n+   * @param attributes the element attributes.\n+   * @return the created or updated element.\n+   */\n+  public Element defElement(String name, int type, boolean headless,\n+                            boolean tailless, ContentModel content,\n+                            Collection exclusions, Collection inclusions,\n+                            AttributeList attributes\n+                           )\n+  {\n+    return super.defElement(name, type, headless, tailless, content,\n+                            toStringArray(exclusions),\n+                            toStringArray(inclusions), attributes\n+                           );\n+  }\n+\n+  /**\n+   * Defines a new element and adds it to the element table.\n+   * If the element alredy exists,\n+   * overrides it settings with the specified values.\n+   * @param name the name of the new element\n+   * @param type the type of the element\n+   * @param headless true if the element needs no starting tag\n+   * @param tailless true if the element needs no closing tag\n+   * @param content the element content.\n+   * @param exclusions the elements that must be excluded from the\n+   * content of this element, in all levels of the hierarchy.\n+   * @param inclusions the elements that can be included as the\n+   * content of this element.\n+   * @param attributes the element attributes (an array and not a\n+   * linked list). The attributes are chained into the linked list\n+   * inside this method.\n+   * @return the created or updated element.\n+   */\n+  public Element defElement(String name, int type, boolean headless,\n+                            boolean tailless, ContentModel content,\n+                            String[] exclusions, String[] inclusions,\n+                            AttributeList[] attributes\n+                           )\n+  {\n+    AttributeList list;\n+\n+    if (attributes == null || attributes.length == 0)\n+      list = null;\n+    else\n+      {\n+        if (attributes.length > 1)\n+          for (int i = 1; i < attributes.length; i++)\n+            {\n+              attributes [ i - 1 ].next = attributes [ i ];\n+            }\n+        list = attributes [ 0 ];\n+      }\n+\n+    Element e =\n+      super.defElement(name, type, headless, tailless, content, exclusions,\n+                       inclusions, list\n+                      );\n+    return e;\n+  }\n+\n+  /**\n+   * Creates, adds into the internal table and returns the\n+   * character entity like <code>&amp;lt;</code>\n+   *  (means '<code>&lt;</code>' );\n+   * This method inactivates the recursive refenrences to the same\n+   * entity.\n+   * @param name The entity name (without heading &amp; and closing ;)\n+   * @param type The entity type\n+   * @param character The entity value (single character)\n+   * @return The created entity\n+   */\n+  public Entity defEntity(String name, int type, String data)\n+  {\n+    int r;\n+    String eref = \"%\" + name + \";\";\n+    do\n+      {\n+        r = data.indexOf(eref);\n+        if (r > 0)\n+          {\n+            data = data.substring(0, r) + data.substring(r + 1);\n+          }\n+      }\n+    while (r > 0);\n+\n+    return super.defEntity(name, type, data);\n+  }\n+\n+  /**\n+   * Summarises the document content into the given PrintStream.\n+   */\n+  public void dump(PrintStream p)\n+  {\n+    Iterator iter = entityHash.entrySet().iterator();\n+    while (iter.hasNext())\n+      {\n+        Map.Entry item = (Map.Entry) iter.next();\n+        Entity e = (Entity) item.getValue();\n+        if (e.isGeneral())\n+          p.println(\"Entity \" + e.getName() + \": \" + e.getString());\n+      }\n+\n+    iter = elementHash.entrySet().iterator();\n+    while (iter.hasNext())\n+      {\n+        Map.Entry item = (Map.Entry) iter.next();\n+        Element e = (Element) item.getValue();\n+        p.println(\"Element \" + e.getName());\n+\n+        System.out.println(\" includes:\");\n+        dump(e.inclusions);\n+        System.out.println(\" excludes:\");\n+        dump(e.exclusions);\n+        System.out.println(\" attributes:\");\n+\n+        AttributeList atts = e.atts;\n+        while (atts != null)\n+          {\n+            p.print(\"    \" + atts.name + \" = \" + atts.value);\n+            if (atts.values == null || atts.values.size() == 0)\n+              p.println();\n+            else\n+              {\n+                Iterator viter = atts.values.iterator();\n+                System.out.print(\" ( \");\n+                while (viter.hasNext())\n+                  {\n+                    System.out.print(viter.next());\n+                    if (viter.hasNext())\n+                      System.out.print(\" | \");\n+                  }\n+                System.out.println(\" ) \");\n+              }\n+            atts = atts.next;\n+          }\n+      }\n+  }\n+\n+  /**\n+   * Prints the content of the given attribute set to the System.out.\n+   * @param b\n+   */\n+  public void dump(BitSet b)\n+  {\n+    if (b != null)\n+      {\n+        for (int i = 0; i < b.size(); i++)\n+          {\n+            if (b.get(i))\n+              System.out.println(\" \" + elements.get(i));\n+          }\n+      }\n+    else\n+      System.out.println(\" NULL set\");\n+  }\n+\n+  /**\n+   * Creates the attribute.\n+   * @param name The attribute name.\n+   * @param type The attribute type.\n+   * @param modifier The attribute modifier.\n+   * @param defaultValue Default value (or null)\n+   * @param allowed_values Allowed values (or null)\n+   * @return The newly created AttributeList. The <code>next</code>\n+   * field is initialized to null.\n+   */\n+  protected AttributeList attr(String name, String default_value,\n+                               String[] allowed_values, int type, int modifier\n+                              )\n+  {\n+    Vector allowed = null;\n+\n+    if (allowed_values != null)\n+      {\n+        allowed = new Vector(allowed_values.length);\n+        for (int i = 0; i < allowed_values.length; i++)\n+          {\n+            allowed.add(allowed_values [ i ]);\n+          }\n+      }\n+    ;\n+\n+    AttributeList attr =\n+      new AttributeList(name, type, modifier, default_value, allowed, null);\n+\n+    return attr;\n+  }\n+\n+  /**\n+   * Define the general entity, holding a single character.\n+   * @param name The entity name (for example, 'amp').\n+   * The defined entity <b>is</b> stored into the entity table.\n+   * @param character The entity character (for example, '&').\n+   */\n+  protected void defineEntity(String name, int character)\n+  {\n+    super.defEntity(name, GENERAL, character);\n+  }\n+\n+  private String[] toStringArray(Collection c)\n+  {\n+    String[] s = new String[ c.size() ];\n+    Iterator iter = c.iterator();\n+    for (int i = 0; i < s.length; i++)\n+      {\n+        s [ i ] = iter.next().toString();\n+      }\n+    return s;\n+  }\n+}"}, {"sha": "f42b4632880304016c9911a0a478bdbcff011526", "filename": "libjava/gnu/javax/swing/text/html/parser/htmlAttributeSet.java", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FhtmlAttributeSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FhtmlAttributeSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FhtmlAttributeSet.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,133 @@\n+/* htmlAttributeSet.java -- A set to store HTML attributes\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.javax.swing.text.html.parser;\n+\n+import java.util.Enumeration;\n+\n+import javax.swing.text.AttributeSet;\n+import javax.swing.text.SimpleAttributeSet;\n+import javax.swing.text.html.HTML;\n+\n+/**\n+ * A set, adapted to store HTML attributes.\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class htmlAttributeSet\n+  extends SimpleAttributeSet\n+{\n+  public static final htmlAttributeSet EMPTY_HTML_ATTRIBUTE_SET =\n+    new htmlAttributeSet();\n+  AttributeSet parent;\n+\n+  /**\n+   * Looks in this set and, if not found, later looks in the parent set.\n+   * Calls toString(), allowing to pass as HTML.Attribute, as String\n+   * to this method.\n+   * @param key A key to search for a value.\n+   * @return The value, if one is defined.\n+   */\n+  public Object getAttribute(Object _key)\n+  {\n+    Object key = _key.toString().toLowerCase();\n+\n+    Object v = super.getAttribute(key);\n+    if (v != null)\n+      return v;\n+    else if (parent != null)\n+      return parent.getAttribute(key);\n+    else\n+      return null;\n+  }\n+\n+  /**\n+   * The name set must return HTML.Attribute and not a string,\n+   * where applicable.\n+   */\n+  public Enumeration getAttributeNames()\n+  {\n+    // Replace the string keys by HTML.attribute, where applicable\n+    final Enumeration enumeration = super.getAttributeNames();\n+\n+    return new Enumeration()\n+      {\n+        public boolean hasMoreElements()\n+        {\n+          return enumeration.hasMoreElements();\n+        }\n+\n+        public Object nextElement()\n+        {\n+          Object key = enumeration.nextElement();\n+          HTML.Attribute hKey = HTML.getAttributeKey((String) key);\n+          if (hKey != null)\n+            return hKey;\n+          else\n+            return key;\n+        }\n+      };\n+  }\n+\n+  /**\n+   * Set the parent set, containing the default values.\n+   * @param a_parent\n+   */\n+  public void setResolveParent(AttributeSet a_parent)\n+  {\n+    parent = a_parent;\n+  }\n+\n+  /**\n+   * Get the parent set, containing the default values.\n+   * @return\n+   */\n+  public AttributeSet getResolveParent()\n+  {\n+    return parent;\n+  }\n+\n+  /**\n+   * Add the attribute to this attribute set.\n+   * @param key Attribute key (will be case insensitive)\n+   * @param value Attribute value\n+   */\n+  public void addAttribute(Object key, Object value)\n+  {\n+    super.addAttribute(key.toString().toLowerCase(), value);\n+  }\n+}"}, {"sha": "bcb23aa8b0db5274bf1f16bcc94042370141da47", "filename": "libjava/gnu/javax/swing/text/html/parser/htmlValidator.java", "status": "added", "additions": 610, "deletions": 0, "changes": 610, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FhtmlValidator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FhtmlValidator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FhtmlValidator.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,610 @@\n+/* tagStack.java -- The HTML tag stack.\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.javax.swing.text.html.parser;\n+\n+import gnu.javax.swing.text.html.parser.models.node;\n+import gnu.javax.swing.text.html.parser.models.transformer;\n+\n+import java.util.BitSet;\n+import java.util.Enumeration;\n+import java.util.LinkedList;\n+import java.util.ListIterator;\n+\n+import javax.swing.text.SimpleAttributeSet;\n+import javax.swing.text.html.HTML;\n+import javax.swing.text.html.parser.*;\n+\n+/**\n+ * <p>The HTML content validator, is responsible for opening and\n+ * closing elements with optional start/end tags, detecting\n+ * the wrongly placed html tags and reporting errors. The working instance\n+ * is the inner class inside the {@link javax.swing.text.html.parser.Parser }\n+ * </p>\n+ * <p>This class could potentially\n+ * provide basis for automated closing and insertion of the html tags,\n+ * correcting the found html errors.\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public abstract class htmlValidator\n+{\n+  /**\n+   * The tag reference, holding additional information that the tag\n+   * has been forcibly closed.\n+   */\n+  protected class hTag\n+  {\n+    protected final Element element;\n+    protected final HTML.Tag tag;\n+    protected final TagElement tgElement;\n+    protected boolean forcibly_closed;\n+    protected node validationTrace;\n+\n+    protected hTag(TagElement an_element)\n+    {\n+      element = an_element.getElement();\n+      tag = an_element.getHTMLTag();\n+      tgElement = an_element;\n+\n+      if (element.content != null)\n+        validationTrace = transformer.transform(element.content, dtd);\n+    }\n+\n+    /**\n+     * This is called when the tag must be forcibly closed because\n+     * it would make the newly appearing tag invalid.\n+     * The parser is not notified about such event (just the error\n+     * is reported). For such tags, the closing message does not\n+     * appear when later reaching the end of stream. The exception is\n+     * the &lt;head&gt; tag: the parser is notified about its silent closing\n+     * when &lt;body&gt; or other html content appears.\n+     */\n+    protected void forciblyCloseDueContext()\n+    {\n+      forcibly_closed = true;\n+    }\n+\n+    /**\n+     * This is called when the tag must be forcibly closed after\n+     * reaching the end of stream. The parser is notified as if\n+     * closing the tag explicitly.\n+     */\n+    protected void forciblyCloseDueEndOfStream()\n+    {\n+      forcibly_closed = true;\n+      handleSupposedEndTag(element);\n+    }\n+  }\n+\n+  /**\n+   * The DTD, providing information about the valid document structure.\n+   */\n+  protected final DTD dtd;\n+\n+  /**\n+  * The stack, holding the current tag context.\n+  */\n+  protected final LinkedList stack = new LinkedList();\n+\n+  /**\n+   * Creates a new tag stack, using the given DTD.\n+   * @param a_dtd A DTD, providing the information about the valid\n+   * tag content.\n+   */\n+  public htmlValidator(DTD a_dtd)\n+  {\n+    dtd = a_dtd;\n+  }\n+\n+  /**\n+   * Close all opened tags (called at the end of parsing).\n+   */\n+  public void closeAll()\n+  {\n+    hTag h;\n+    while (!stack.isEmpty())\n+      {\n+        h = (hTag) stack.getLast();\n+        if (!h.forcibly_closed && !h.element.omitEnd())\n+          s_error(\"Unclosed <\" + h.tag + \">, closing at the end of stream\");\n+\n+        handleSupposedEndTag(h.element);\n+\n+        closeTag(h.tgElement);\n+      }\n+  }\n+\n+  /**\n+   * Remove the given tag from the stack or (if found) from the list\n+   * of the forcibly closed tags.\n+   */\n+  public void closeTag(TagElement tElement)\n+  {\n+    HTML.Tag tag = tElement.getHTMLTag();\n+    hTag x;\n+    hTag close;\n+\n+    if (!stack.isEmpty())\n+      {\n+        ListIterator iter = stack.listIterator(stack.size());\n+\n+        while (iter.hasPrevious())\n+          {\n+            x = (hTag) iter.previous();\n+            if (tag.equals(x.tag))\n+              {\n+                if (x.forcibly_closed && !x.element.omitEnd())\n+                  s_error(\"The tag <\" + x.tag +\n+                          \"> has already been forcibly closed\"\n+                         );\n+\n+\n+                // If the tag has a content model defined, forcibly close all\n+                // tags that were opened after the tag being currently closed.\n+                closing: \n+                if (x.element.content != null)\n+                  {\n+                    iter = stack.listIterator(stack.size());\n+                    while (iter.hasPrevious())\n+                      {\n+                        close = (hTag) iter.previous();\n+                        if (close == x)\n+                          break closing;\n+                        handleSupposedEndTag(close.element);\n+                        iter.remove();\n+                      }\n+                  }\n+\n+                stack.remove(x);\n+                return;\n+              }\n+          }\n+      }\n+    s_error(\"Closing unopened <\" + tag + \">\");\n+  }\n+\n+  /**\n+   * Add the given HTML tag to the stack of the opened tags. Forcibly closes\n+   * all tags in the stack that does not allow this tag in they content (error\n+   * is reported).\n+   * @param element\n+   */\n+  public void openTag(TagElement tElement, htmlAttributeSet parameters)\n+  {\n+    // If this is a fictional call, the message from the parser\n+    // has recursively returned - ignore.\n+    if (tElement.fictional())\n+      return;\n+\n+    validateParameters(tElement, parameters);\n+\n+    // If the stack is empty, start from HTML\n+    if (stack.isEmpty() && tElement.getHTMLTag() != HTML.Tag.HTML)\n+      {\n+        Element html = dtd.getElement(HTML.Tag.HTML.toString());\n+        openFictionalTag(html);\n+      }\n+\n+    Object v = tagIsValidForContext(tElement);\n+    if (v != Boolean.TRUE)\n+      {\n+        // The tag is not valid for context, the content\n+        // model suggest to open another tag.\n+        if (v instanceof Element)\n+          {\n+            int n = 0;\n+            while (v instanceof Element && (n++ < 100))\n+              {\n+                Element fe = (Element) v;\n+\n+                // notify the content model that we add the proposed tag\n+                getCurrentContentModel().show(fe);\n+                openFictionalTag(fe);\n+\n+                Object vv = tagIsValidForContext(tElement);\n+                if (vv instanceof Element) // One level of nesting is supported.\n+                  {\n+                    openFictionalTag((Element) vv);\n+\n+                    Object vx = tagIsValidForContext(tElement);\n+                    if (vx instanceof Element)\n+                      openFictionalTag((Element) vx);\n+                  }\n+                else if (vv == Boolean.FALSE)\n+                  {\n+                    // The tag is still not valid for the current\n+                    // content after opening a fictional element.\n+                    if (fe.omitEnd())\n+                      {\n+                        // close the previously opened fictional tag.\n+                        closeLast();\n+                        vv = tagIsValidForContext(tElement);\n+                        if (vv instanceof Element)\n+\n+                          // another tag was suggested by the content model\n+                          openFictionalTag((Element) vv);\n+                      }\n+                  }\n+                v = tagIsValidForContext(tElement);\n+              }\n+          }\n+        else // If the current element has the optional end tag, close it.\n+          {\n+            if (!stack.isEmpty())\n+              {\n+                closing: \n+                do\n+                  {\n+                    hTag last = (hTag) stack.getLast();\n+                    if (last.element.omitEnd())\n+                      {\n+                        closeLast();\n+                        v = tagIsValidForContext(tElement);\n+                        if (v instanceof Element) // another tag was suggested by the content model\n+                          {\n+                            openFictionalTag((Element) v);\n+                            break closing;\n+                          }\n+                      }\n+                    else\n+                      break closing;\n+                  }\n+                while (v == Boolean.FALSE && !stack.isEmpty());\n+              }\n+          }\n+      }\n+\n+    stack.add(new hTag(tElement));\n+  }\n+\n+  /**\n+   * Clear the stack.\n+   */\n+  public void restart()\n+  {\n+    stack.clear();\n+  }\n+\n+  /**\n+   * Check if this tag is valid for the current context.\n+   * Return Boolean.True if it is OK, Boolean.False\n+   * if it is surely not OK or the Element that the\n+   * content model recommends to insert making the situation\n+   * ok. If Boolean.True is returned, the content model current\n+   * position is moved forward. Otherwise this position remains\n+   * the same.\n+   * @param tElement\n+   * @return\n+   */\n+  public Object tagIsValidForContext(TagElement tElement)\n+  {\n+    // Check the current content model, if one is available.\n+    node cv = getCurrentContentModel();\n+\n+    if (cv != null)\n+      return cv.show(tElement.getElement());\n+\n+    // Check exclusions and inclusions.\n+    ListIterator iter = stack.listIterator(stack.size());\n+    hTag t;\n+    final int idx = tElement.getElement().index;\n+\n+    // Check only known tags.\n+    if (idx >= 0)\n+      {\n+        BitSet inclusions = new BitSet();\n+        while (iter.hasPrevious())\n+          {\n+            t = (hTag) iter.previous();\n+            if (!t.forcibly_closed)\n+              {\n+                if (t.element.exclusions != null &&\n+                    t.element.exclusions.get(idx)\n+                   )\n+                  return Boolean.FALSE;\n+\n+                if (t.element.inclusions != null)\n+                  inclusions.or(t.element.inclusions);\n+              }\n+          }\n+        if (!inclusions.get(idx))\n+          return Boolean.FALSE;\n+      }\n+    return Boolean.TRUE;\n+  }\n+\n+  /**\n+   * Validate tag without storing in into the tag stack. This is called\n+   * for the empty tags and results the subsequent calls to the openTag\n+   * and closeTag.\n+   */\n+  public void validateTag(TagElement tElement, htmlAttributeSet parameters)\n+  {\n+    openTag(tElement, parameters);\n+    closeTag(tElement);\n+  }\n+\n+  /**\n+   * Check for mandatory elements, subsequent to the last tag:\n+   * @param tElement The element that will be inserted next.\n+   */\n+  protected void checkContentModel(TagElement tElement, boolean first)\n+  {\n+    if (stack.isEmpty())\n+      return;\n+\n+    hTag last = (hTag) stack.getLast();\n+    if (last.validationTrace == null)\n+      return;\n+\n+    Object r = last.validationTrace.show(tElement.getElement());\n+    if (r == Boolean.FALSE)\n+      s_error(\"The <\" + last.element + \"> does not match the content model \" +\n+              last.validationTrace\n+             );\n+    else if (r instanceof Element) // The content model recommends insertion of this element\n+      {\n+        if (!first)\n+          closeTag(last.tgElement);\n+        handleSupposedStartTag((Element) r);\n+        openTag(new TagElement((Element) r), null);\n+      }\n+  }\n+\n+  /**\n+   * The method is called when the tag must be closed because\n+   * it does not allow the subsequent elements inside its context\n+   * or the end of stream has been reached. The parser is only\n+   * informed if the element being closed does not require the\n+   * end tag (the \"omitEnd\" flag is set).\n+   * The closing message must be passed to the parser mechanism\n+   * before passing message about the opening the next tag.\n+   *\n+   * @param element The tag being fictionally (forcibly) closed.\n+   */\n+  protected abstract void handleSupposedEndTag(Element element);\n+\n+  /**\n+   * The method is called when the validator decides to open the\n+   * tag on its own initiative. This may happen if the content model\n+   * includes the element with the optional (supposed) start tag.\n+   *\n+   * @param element The tag being opened.\n+   */\n+  protected abstract void handleSupposedStartTag(Element element);\n+\n+  /**\n+   * Handles the error message. This method must be overridden to pass\n+   * the message where required.\n+   * @param msg The message text.\n+   */\n+  protected abstract void s_error(String msg);\n+\n+  /**\n+   * Validate the parameters, report the error if the given parameter is\n+   * not in the parameter set, valid for the given attribute. The information\n+   * about the valid parameter set is taken from the Element, enclosed\n+   * inside the tag. The method does not validate the default parameters.\n+   * @param tag The tag\n+   * @param parameters The parameters of this tag.\n+   */\n+  protected void validateParameters(TagElement tag, htmlAttributeSet parameters)\n+  {\n+    if (parameters == null ||\n+        parameters == htmlAttributeSet.EMPTY_HTML_ATTRIBUTE_SET ||\n+        parameters == SimpleAttributeSet.EMPTY\n+       )\n+      return;\n+\n+    Enumeration enumeration = parameters.getAttributeNames();\n+\n+    while (enumeration.hasMoreElements())\n+      {\n+        validateAttribute(tag, parameters, enumeration);\n+      }\n+\n+    // Check for missing required values.\n+    AttributeList a = tag.getElement().getAttributes();\n+\n+    while (a != null)\n+      {\n+        if (a.getModifier() == DTDConstants.REQUIRED)\n+          if (parameters.getAttribute(a.getName()) == null)\n+            {\n+              s_error(\"Missing required attribute '\" + a.getName() + \"' for <\" +\n+                      tag.getHTMLTag() + \">\"\n+                     );\n+            }\n+        a = a.next;\n+      }\n+  }\n+\n+  private node getCurrentContentModel()\n+  {\n+    if (!stack.isEmpty())\n+      {\n+        hTag last = (hTag) stack.getLast();\n+        return last.validationTrace;\n+      }\n+    else\n+      return null;\n+  }\n+\n+  private void closeLast()\n+  {\n+    handleSupposedEndTag(((hTag) stack.getLast()).element);\n+    stack.removeLast();\n+  }\n+\n+  private void openFictionalTag(Element e)\n+  {\n+    handleSupposedStartTag(e);\n+    stack.add(new hTag(new TagElement(e, true)));\n+    if (!e.omitStart())\n+      s_error(\"<\" + e + \"> is expected (supposing it)\");\n+  }\n+\n+  private void validateAttribute(TagElement tag, htmlAttributeSet parameters,\n+                                 Enumeration enumeration\n+                                )\n+  {\n+    Object foundAttribute;\n+    AttributeList dtdAttribute;\n+    foundAttribute = enumeration.nextElement();\n+    dtdAttribute = tag.getElement().getAttribute(foundAttribute.toString());\n+    if (dtdAttribute == null)\n+      {\n+        StringBuffer valid =\n+          new StringBuffer(\"The tag <\" + tag.getHTMLTag() +\n+                           \"> cannot contain the attribute '\" + foundAttribute +\n+                           \"'. The valid attributes for this tag are: \"\n+                          );\n+\n+        AttributeList a = tag.getElement().getAttributes();\n+\n+        while (a != null)\n+          {\n+            valid.append(a.name.toUpperCase());\n+            valid.append(' ');\n+            a = a.next;\n+          }\n+        s_error(valid.toString());\n+      }\n+\n+    else\n+      {\n+        String value = parameters.getAttribute(foundAttribute).toString();\n+\n+        if (dtdAttribute.type == DTDConstants.NUMBER)\n+          validateNumberAttribute(tag, foundAttribute, value);\n+\n+        if (dtdAttribute.type == DTDConstants.NAME ||\n+            dtdAttribute.type == DTDConstants.ID\n+           )\n+          validateNameOrIdAttribute(tag, foundAttribute, value);\n+\n+        if (dtdAttribute.values != null)\n+          validateAttributeWithValueList(tag, foundAttribute, dtdAttribute,\n+                                         value\n+                                        );\n+      }\n+  }\n+\n+  private void validateAttributeWithValueList(TagElement tag,\n+                                              Object foundAttribute,\n+                                              AttributeList dtdAttribute,\n+                                              String value\n+                                             )\n+  {\n+    if (!dtdAttribute.values.contains(value.toLowerCase()) &&\n+        !dtdAttribute.values.contains(value.toUpperCase())\n+       )\n+      {\n+        StringBuffer valid;\n+        if (dtdAttribute.values.size() == 1)\n+          valid =\n+            new StringBuffer(\"The attribute '\" + foundAttribute +\n+                             \"' of the tag <\" + tag.getHTMLTag() +\n+                             \"> cannot have the value '\" + value +\n+                             \"'. The only valid value is \"\n+                            );\n+        else\n+          valid =\n+            new StringBuffer(\"The attribute '\" + foundAttribute +\n+                             \"' of the tag <\" + tag.getHTMLTag() +\n+                             \"> cannot have the value '\" + value + \"'. The \" +\n+                             dtdAttribute.values.size() +\n+                             \" valid values are: \"\n+                            );\n+\n+        Enumeration vv = dtdAttribute.values.elements();\n+        while (vv.hasMoreElements())\n+          {\n+            valid.append('\"');\n+            valid.append(vv.nextElement());\n+            valid.append(\"\\\"  \");\n+          }\n+        s_error(valid.toString());\n+      }\n+  }\n+\n+  private void validateNameOrIdAttribute(TagElement tag, Object foundAttribute,\n+                                         String value\n+                                        )\n+  {\n+    boolean ok = true;\n+\n+    if (!Character.isLetter(value.charAt(0)))\n+      ok = false;\n+\n+    char c;\n+    for (int i = 0; i < value.length(); i++)\n+      {\n+        c = value.charAt(i);\n+        if (!(\n+              Character.isLetter(c) || Character.isDigit(c) ||\n+              \"\".indexOf(c) >= 0\n+            )\n+           )\n+          ok = false;\n+      }\n+    if (!ok)\n+      s_error(\"The '\" + foundAttribute + \"' attribute of the tag <\" +\n+              tag.getHTMLTag() + \"> must start from letter and consist of \" +\n+              \"letters, digits, hypens, colons, underscores and periods. \" +\n+              \"It cannot be '\" + value + \"'\"\n+             );\n+  }\n+\n+  private void validateNumberAttribute(TagElement tag, Object foundAttribute,\n+                                       String value\n+                                      )\n+  {\n+    try\n+      {\n+        Integer.parseInt(value);\n+      }\n+    catch (NumberFormatException ex)\n+      {\n+        s_error(\"The '\" + foundAttribute + \"' attribute of the tag <\" +\n+                tag.getHTMLTag() + \"> must be a valid number and not '\" +\n+                value + \"'\"\n+               );\n+      }\n+  }\n+}"}, {"sha": "4bfc3b960e8c73137e2ff60c0c2234d122152272", "filename": "libjava/gnu/javax/swing/text/html/parser/models/PCDATAonly_model.java", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fmodels%2FPCDATAonly_model.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fmodels%2FPCDATAonly_model.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fmodels%2FPCDATAonly_model.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,62 @@\n+/* PCDATAonly_model.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.javax.swing.text.html.parser.models;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * The model, allowing only PCDATA in it (like for element OPTION).\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class PCDATAonly_model\n+  extends node\n+  implements Serializable\n+{\n+  private static final long serialVersionUID = 1;\n+\n+  public PCDATAonly_model()\n+  {\n+    super((char) 0, (char) 0, null);\n+  }\n+\n+  public Object show(Object x)\n+  {\n+    return x.toString().equalsIgnoreCase(\"#pcdata\") ? Boolean.TRUE : Boolean.FALSE;\n+  }\n+}"}, {"sha": "1a803d5476d64d77a38391eb345457bab511a149", "filename": "libjava/gnu/javax/swing/text/html/parser/models/TableRowContentModel.java", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fmodels%2FTableRowContentModel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fmodels%2FTableRowContentModel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fmodels%2FTableRowContentModel.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,77 @@\n+/* TableRowContentModel.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.javax.swing.text.html.parser.models;\n+\n+import java.io.Serializable;\n+\n+import javax.swing.text.html.parser.DTD;\n+import javax.swing.text.html.parser.Element;\n+\n+/**\n+ * Table row content model.\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class TableRowContentModel\n+  extends node\n+  implements Serializable\n+{\n+  private static final long serialVersionUID = 1;\n+  final Element TD;\n+\n+  public TableRowContentModel(DTD dtd)\n+  {\n+    super((char) 0, (char) 0, null);\n+    TD = dtd.getElement(\"TD\");\n+  }\n+\n+  public Object show(Object x)\n+  {\n+    // Always accept TD and TH\n+    String s = x.toString();\n+    if (s.equalsIgnoreCase(\"TD\") || s.equalsIgnoreCase(\"TH\"))\n+      return Boolean.TRUE;\n+\n+    // Suggest closing in response to TR:\n+    if (s.equalsIgnoreCase(\"TR\"))\n+      return Boolean.FALSE;\n+\n+    // Recommend TD for other cases:\n+    return TD;\n+  }\n+}"}, {"sha": "1fa16d96556fc901a1cf76376bc8aa22d9c40e34", "filename": "libjava/gnu/javax/swing/text/html/parser/models/list.java", "status": "added", "additions": 382, "deletions": 0, "changes": 382, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fmodels%2Flist.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fmodels%2Flist.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fmodels%2Flist.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,382 @@\n+/* list.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.javax.swing.text.html.parser.models;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Part of the internal representation of the content model.\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class list\n+  extends node\n+  implements Serializable\n+{\n+  private static final long serialVersionUID = 1;\n+\n+  /**\n+   * Setting to true means that the list nodes must always be connected\n+   * by the same operation. This is far safer and clearer, but not\n+   * required by default standard.\n+   */\n+  public static boolean CLEAR;\n+\n+  /**\n+   * A list of nodes.\n+   */\n+  public final node[] nodes;\n+\n+  /**\n+   * Creates a new model list that is a member of some enclosing list.\n+   * @param binary_operator An operator with that this list is connected\n+   * with other members of the enclosing list.\n+   * @param unary_operator The unary operator for this list.\n+   * @param a_nodes The nodes inside this list.\n+   */\n+  public list(char binary_operator, char unary_operator, node[] a_nodes)\n+  {\n+    super(binary_operator, unary_operator, a_nodes);\n+    nodes = a_nodes;\n+  }\n+\n+  /**\n+   * Creates a new model list. Assigns the previous field.\n+   * @param a_nodes The nodes for this list.\n+   * @throws an error if the node elements are connected by the\n+   * different operations. This is not supported, use grouping.\n+   */\n+  public list(node[] a_nodes)\n+       throws Error\n+  {\n+    this(',', (char) 0, a_nodes);\n+\n+    int operation = nodes [ 0 ].binary;\n+\n+    for (int i = 0; i < nodes.length; i++)\n+      {\n+        if (CLEAR && nodes [ i ].binary != operation)\n+          throw new Error(\"List members can only be connected by \" +\n+                          \"the same operation, use grouping\"\n+                         );\n+\n+        if (i > 0)\n+          nodes [ i ].previous = nodes [ i - 1 ];\n+      }\n+  }\n+\n+  /**\n+   * Returns true if all members in the list are closed.\n+   */\n+  public boolean isClosed()\n+  {\n+    if (super.isClosed())\n+      return true;\n+    for (int i = 0; i < nodes.length; i++)\n+      {\n+        if (!nodes [ i ].isClosed())\n+          return false;\n+      }\n+    return true;\n+  }\n+\n+  /**\n+   * Find the token that could match as the next token in\n+   * the token list.\n+   *\n+   * @return Such token object or null if none is found.\n+   */\n+  public Object findFreeNode()\n+  {\n+    Object fn;\n+    for (int j = 0; j < nodes.length; j++)\n+      {\n+        if (!nodes [ j ].isClosed())\n+          {\n+            fn = nodes [ j ].findFreeNode();\n+            if (fn != null)\n+              return fn;\n+          }\n+      }\n+    return null;\n+  }\n+\n+  /**\n+   * Tries to match this list agains the given token sequence.\n+   * @param tokens the sequence of the tokens to match.\n+   * @return true if the valid match is found.\n+   */\n+  public boolean matches(Object[] tokens)\n+  {\n+    reset();\n+\n+    Object x;\n+    boolean m;\n+    boolean matched = false;\n+\n+    for (int i = 0; i < tokens.length; i++)\n+      {\n+        matched = false;\n+        x = tokens [ i ];\n+\n+        nodescan: \n+        for (int j = 0; j < nodes.length; j++)\n+          {\n+            if (!nodes [ j ].isClosed())\n+              {\n+                m = nodes [ j ].performMatch(x);\n+\n+                if (m)\n+                  {\n+                    matched = true;\n+                    break nodescan;\n+                  }\n+              }\n+          }\n+        if (!matched)\n+          return false;\n+      }\n+\n+    boolean valid = true;\n+\n+    for (int i = 0; i < nodes.length; i++)\n+      {\n+        if (!nodes [ i ].valid())\n+          valid = false;\n+      }\n+\n+    return valid;\n+  }\n+\n+  /**\n+   * The list never closes, despite it is trated as closed\n+   * if all members in the list are closed.\n+   * @return false.\n+   */\n+  public boolean mustClose()\n+  {\n+    return false;\n+  }\n+\n+  /**\n+   * Perform a match operation for the single token\n+   * against this list.\n+   * @param token a token to match.\n+   * @return true if the match is found.\n+   */\n+  public boolean performMatch(Object token)\n+  {\n+    boolean ok = false;\n+    Matching: \n+    for (int i = 0; i < nodes.length; i++)\n+      {\n+        ok = nodes [ i ].performMatch(token);\n+\n+        if (ok)\n+          break Matching;\n+      }\n+\n+    if (ok)\n+      matches();\n+\n+    return ok;\n+  }\n+\n+  /**\n+   * Prepeares the list for the next matching operation.\n+   */\n+  public void reset()\n+  {\n+    super.reset();\n+    for (int i = 0; i < nodes.length; i++)\n+      nodes [ i ].reset();\n+  }\n+\n+  /**\n+   * Check if the provided token can match as a next token in the\n+   * list. In the case of match, the list state changes, moving\n+   * current position after the matched token. However if this method\n+   * returns a suggested new token to insert before the provided one,\n+   * the state of the list does not change.\n+   * @return Boolean.TRUE if the match is found,\n+   * Boolean.FALSE if the match is not possible and no token can be\n+   * inserted to make the match valid. Otherwise, returns the\n+   * token object that can be inserted before the last token in the\n+   * list, probably (not for sure) making the match valid.\n+   * If the object is an instance of Element or TagElement,\n+   * it is first ensured that the object flag \"omit start\" is set.\n+   */\n+  public Object show(Object x)\n+  {\n+    boolean m;\n+    boolean matched = false;\n+\n+    nodescan: \n+    for (int j = 0; j < nodes.length; j++)\n+      {\n+        if (!nodes [ j ].isClosed())\n+          {\n+            m = nodes [ j ].performMatch(x);\n+\n+            if (m)\n+              {\n+                matched = true;\n+                break nodescan;\n+              }\n+            else\n+              {\n+                // For comma operation, only first not closed\n+                // node must be tested for a match.\n+                // unless it allows matching zero times.\n+                if (binary == ',' &&\n+                    !(nodes [ j ].unary == '?' || nodes [ j ].unary == '*')\n+                   )\n+                  break nodescan;\n+              }\n+          }\n+      }\n+\n+    if (!matched)\n+      {\n+        // Find and return that would be matched.\n+        Object freeNode = findFreeNode();\n+        if (freeNode == null)\n+          return Boolean.FALSE;\n+        else\n+          return freeNode;\n+      }\n+\n+    for (int i = 0; i < nodes.length; i++)\n+      if (!nodes [ i ].validPreliminary())\n+        {\n+          return Boolean.FALSE;\n+        }\n+\n+    return Boolean.TRUE;\n+  }\n+\n+  /**\n+   * Returns a string representation of the list.\n+   * @return String representation, similar to BNF expression.\n+   */\n+  public String toString()\n+  {\n+    StringBuffer b = new StringBuffer();\n+    b.append(\" ( \");\n+    for (int i = 0; i < nodes.length; i++)\n+      {\n+        if (i > 0)\n+          b.append(\" \" + (char) nodes [ i ].binary + \" \");\n+        b.append(nodes [ i ]);\n+      }\n+\n+    b.append(\" )\");\n+    if (unary != 0)\n+      b.append((char) unary);\n+    else\n+      b.append(' ');\n+    return b.toString();\n+  }\n+\n+  /**\n+   * Returns true if all memebers in the list are valid.\n+   */\n+  public boolean valid()\n+  {\n+    for (int i = 0; i < nodes.length; i++)\n+      {\n+        if (!nodes [ i ].valid())\n+          return false;\n+      }\n+    return true;\n+  }\n+\n+  /**\n+   * Returns true if all memebers in the list are either valid\n+   * or unvisited. The unvisited members can become valid after\n+   * more tokens will be shown.\n+   */\n+  public boolean validPreliminary()\n+  {\n+    if (silenceAllowed())\n+      {\n+        boolean everVisited = false;\n+        for (int i = 0; i < nodes.length; i++)\n+          {\n+            if (nodes [ i ].visits > 0)\n+              {\n+                everVisited = true;\n+                break;\n+              }\n+          }\n+        if (!everVisited)\n+          return true;\n+      }\n+\n+    for (int i = 0; i < nodes.length; i++)\n+      {\n+        if (!nodes [ i ].validPreliminary())\n+          return false;\n+      }\n+    return true;\n+  }\n+\n+  /**\n+   * Closes all members in the list.\n+   */\n+  protected void close()\n+  {\n+    super.close();\n+    for (int i = 0; i < nodes.length; i++)\n+      {\n+        nodes [ i ].close();\n+      }\n+  }\n+\n+  /**\n+   * Compare given token with the token of this node.\n+   * If the token represents a <code>list</code>, the call may be\n+   * delegeted to the child subnodes.\n+   * @param a_token A token to compare.\n+   * @return True if the token matches the token of this node.\n+   */\n+  protected boolean compare(Object a_token)\n+  {\n+    return performMatch(a_token);\n+  }\n+}"}, {"sha": "7ac58f0506da3b17bc9c77100cfb132246aede2e", "filename": "libjava/gnu/javax/swing/text/html/parser/models/noTagModel.java", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fmodels%2FnoTagModel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fmodels%2FnoTagModel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fmodels%2FnoTagModel.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,75 @@\n+/* noTagModel.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.javax.swing.text.html.parser.models;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Disallows a single given tag at the current content level only.\n+ * <p>@author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)</p>\n+ */\n+public class noTagModel\n+  extends node\n+  implements Serializable\n+{\n+  private static final long serialVersionUID = 1;\n+  final String[] no;\n+\n+  public noTagModel(String[] noTag)\n+  {\n+    super((char) 0, (char) 0, null);\n+    no = noTag;\n+  }\n+\n+  public noTagModel(String noTag)\n+  {\n+    super((char) 0, (char) 0, null);\n+    no = new String[] { noTag };\n+  }\n+\n+  public Object show(Object x)\n+  {\n+    for (int i = 0; i < no.length; i++)\n+      {\n+        if (x.toString().equalsIgnoreCase(no [ i ]))\n+          return Boolean.FALSE;\n+      }\n+    return Boolean.TRUE;\n+  }\n+}"}, {"sha": "42505d0bef0e81c16658d197c0b4101be1f3e897", "filename": "libjava/gnu/javax/swing/text/html/parser/models/node.java", "status": "added", "additions": 337, "deletions": 0, "changes": 337, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fmodels%2Fnode.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fmodels%2Fnode.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fmodels%2Fnode.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,337 @@\n+/* node.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.javax.swing.text.html.parser.models;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Part of the internal representation of the content model.\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class node\n+  implements Serializable\n+{\n+  private static final long serialVersionUID = 1;\n+\n+  /**\n+   * The token to match (can be instance of list).\n+   */\n+  public Object token;\n+\n+  /**\n+   * True for the node that cannot be visited again.\n+   */\n+  public boolean _closed;\n+\n+  /**\n+   * The binary operation for this node.\n+   */\n+  public char binary;\n+\n+  /**\n+   * The unary opeation for this node.\n+   */\n+  public char unary;\n+\n+  /**\n+   * The number of times the node already was visited.\n+   */\n+  public int visits;\n+\n+  /**\n+   * The previous node in content model (used for closing nodes).\n+   */\n+  public node previous;\n+\n+  /**\n+   * Creates a new node.\n+   * @param binary_operator The operator, connecting all nodes in the list.\n+   * The nodes, connected by the different operators, must be arranged into\n+   * the different lists.\n+   * @param unary_operator The unary operator for this node or zero if\n+   * no such was specified.\n+   * @param token The token to match. This can be either a string or\n+   * the new instance of the list.\n+   * @param a_previous The previous node in the list, null for the first\n+   * node. This is used for propagating the closing operation for the\n+   * comma delimited list.\n+   */\n+  public node(char binary_operator, char unary_operator, Object a_token)\n+  {\n+    if (a_token != null)\n+      if (a_token.getClass().equals(node.class))\n+        throw new Error(\"Creating node in node is redundant and ineffective.\");\n+\n+    binary = binary_operator;\n+    unary = unary_operator;\n+    token = a_token;\n+  }\n+\n+  /**\n+   * Checks if this node is in the closed state.\n+   * @return True if the node is closed.\n+   */\n+  public boolean isClosed()\n+  {\n+    return _closed;\n+  }\n+\n+  /**\n+   * Check if closing this node means closing the previous node.\n+   */\n+  public boolean closePrevious()\n+  {\n+    return binary == ',';\n+  }\n+\n+  /**\n+   * Return the token object if it could match as a next token in\n+   * a token list of null if it could not.\n+   * @return\n+   */\n+  public Object findFreeNode()\n+  {\n+    boolean ok;\n+    if (isClosed() || silenceAllowed())\n+      return null;\n+\n+    // Try if the node would stay valid after a one more visit.\n+    visits++;\n+    ok = valid();\n+    visits--;\n+\n+    if (ok)\n+      {\n+        if (token instanceof node)\n+          return ((node) token).findFreeNode();\n+        else\n+          return token;\n+      }\n+    else\n+      return null;\n+  }\n+\n+  /**\n+   * Check if the current situation is such that the node must be closed\n+   * now.\n+   */\n+  public boolean mustClose()\n+  {\n+    switch (unary)\n+      {\n+        case 0 :\n+          return true;\n+\n+        case '*' :\n+          return false;\n+\n+        case '+' :\n+          return false;\n+\n+        case '?' :\n+          return visits <= 1;\n+\n+        default :\n+          throw new Error(\"Invalid unary operation \" + unary + \" ( '\" +\n+                          (char) unary + \"' )\"\n+                         );\n+      }\n+  }\n+\n+  /**\n+   * Do the match operation with the given token. This sets various\n+   * flags.\n+   * @param token The token to match.\n+   * @return true if the the token matches node, false if it does not match\n+   * or if the node is closed.\n+   */\n+  public boolean performMatch(Object a_token)\n+  {\n+    if (isClosed())\n+      return false;\n+\n+    boolean matches = compare(a_token);\n+    if (matches)\n+      matches();\n+\n+    return matches;\n+  }\n+\n+  /**\n+   * Prepares the node for matching against a new list of tokens.\n+   */\n+  public void reset()\n+  {\n+    _closed = false;\n+    visits = 0;\n+  }\n+\n+  /**\n+   * Check if the provided token can match this node.\n+   * In the case of match, the node state changes, moving\n+   * current position after the matched token. However if this method\n+   * returns a suggested new token to insert before the provided one,\n+   * the state of the list does not change.\n+   * @return Boolean.TRUE if the match is found,\n+   * Boolean.FALSE if the match is not possible and no token can be\n+   * inserted to make the match valid. Otherwise, returns the\n+   * token object that can be inserted before the last token in the\n+   * list, probably (not for sure) making the match valid.\n+   */\n+  public Object show(Object x)\n+  {\n+    if (compare(x))\n+      return performMatch(x) ? Boolean.TRUE : Boolean.FALSE;\n+\n+    Object recommended = findFreeNode();\n+    return recommended != null ? recommended : Boolean.FALSE;\n+  }\n+\n+  /**\n+   * Check if it would be a valid case if this node is visited zero times.\n+   * Nodes with unary operator * or ? need not be matched to make a\n+   * model valid.\n+   */\n+  public boolean silenceAllowed()\n+  {\n+    return unary == '?' || unary == '*';\n+  }\n+\n+  /**\n+   * Returns a string representation of the list.\n+   * @return String representation, similar to BNF expression.\n+   */\n+  public String toString()\n+  {\n+    StringBuffer b = new StringBuffer();\n+\n+    b.append(token);\n+    if (unary != 0)\n+      b.append((char) unary);\n+    else\n+      b.append('\\'');\n+\n+    return b.toString();\n+  }\n+\n+  /**\n+   * Check if the node state is valid.\n+   */\n+  public boolean valid()\n+  {\n+    switch (unary)\n+      {\n+        case 0 :\n+          if (binary == '|')\n+            return true;\n+          else\n+            return visits == 1;\n+\n+        case '*' :\n+          return true;\n+\n+        case '+' :\n+          return visits > 0;\n+\n+        case '?' :\n+          return visits <= 1;\n+\n+        default :\n+          throw new Error(\"Invalid unary operation \" + unary + \" ( '\" +\n+                          (char) unary + \"' )\"\n+                         );\n+      }\n+  }\n+\n+  public boolean validPreliminary()\n+  {\n+    return visits == 0 || valid();\n+  }\n+\n+  /**\n+  * Closes this node and, if closePrevious() returs true, calls close() for\n+  * the previous node.\n+  */\n+  protected void close()\n+  {\n+    _closed = true;\n+    if (previous != null && closePrevious())\n+      previous.close();\n+  }\n+\n+  /**\n+   * Compare the provided token object with the token object of this node.\n+   */\n+  protected boolean compare(Object a_token)\n+  {\n+    if (token instanceof Object[])\n+      throw new Error(\"Invalid token object, probably the 'list' \" +\n+                      \"should be used. \"\n+                     );\n+\n+    if (token instanceof node[])\n+      throw new Error(\"Do not use 'node' for the array of nodes, use 'list'. \");\n+\n+    if (token instanceof node)\n+      {\n+        return ((node) token).performMatch(a_token);\n+      }\n+\n+    boolean rt = false;\n+\n+    if (token == a_token)\n+      rt = true;\n+    if (token.equals(a_token))\n+      rt = true;\n+    if (token.toString().equalsIgnoreCase(a_token.toString()))\n+      rt = true;\n+\n+    return rt;\n+  }\n+\n+  /**\n+   * Fire the changes that must happen then the token matches this node.\n+   */\n+  protected void matches()\n+  {\n+    visits++;\n+    if (mustClose())\n+      close();\n+  }\n+}"}, {"sha": "60719d0cc97a2b29c711ded5d5adc7c6c8c0008d", "filename": "libjava/gnu/javax/swing/text/html/parser/models/package.html", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fmodels%2Fpackage.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fmodels%2Fpackage.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fmodels%2Fpackage.html?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,53 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n+<!-- package.html - describes classes in javax.swing.text.html.parser package.\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. -->\n+\n+<html>\n+<head><title>GNU Classpath - gnu.javax.swing.text.html.parser.models</title></head>\n+\n+<body>\n+<p>This package contains classes for working with content models. In this implementation, the\n+standardized content model is pre-processed by <code>transformer</code> into an instance of \n+<code>node</code>. Node holds a single element of the content model with the optional unary operation.\n+The derived class <code>list</code> holds multiple nodes connected by the same binary operation.\n+As the members of this <code>list</code> can also be lists itself, these structures support\n+the most of required operations. Several cases when the model cannot be expressed using\n+BNF syntax are handled providing specialised classes that are also derived from <code>node</code>.\n+</p>\n+@author Audrius Meskauskas, Lithuania\n+</body>\n+</html>"}, {"sha": "c8c4a2544a40885a4ef5bbd9ce0ccbf9a2482613", "filename": "libjava/gnu/javax/swing/text/html/parser/models/transformer.java", "status": "added", "additions": 201, "deletions": 0, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fmodels%2Ftransformer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fmodels%2Ftransformer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fmodels%2Ftransformer.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,201 @@\n+/* transformer.java -- Content model transforms.\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.javax.swing.text.html.parser.models;\n+\n+import java.io.Serializable;\n+\n+import javax.swing.text.html.parser.ContentModel;\n+import javax.swing.text.html.parser.DTD;\n+\n+/**\n+ * Transforms the standard ContentModel tree into the internal representation,\n+ * used in this implementation.\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class transformer\n+  implements Serializable\n+{\n+  private static final long serialVersionUID = 1;\n+\n+  /**\n+   * All binary operators.\n+   */\n+  protected static String binary = \"&|,\";\n+\n+  /**\n+   * All unary operators.\n+   */\n+  protected static String unary = \"+*?\";\n+\n+  /**\n+   * Measure length of the linked list of the content models.\n+   * @param c The heading element of the linked list.\n+   * @return the length of the list (0 for null 1 if c!=null and c.next==null,\n+   * etc.\n+   */\n+  public static int measureChainLength(ContentModel c)\n+  {\n+    if (c == null)\n+      return 0;\n+    else\n+      return measureChainLength(c.next) + 1;\n+  }\n+\n+  /**\n+   * Transform into internal representation without usind dtd.\n+   * This should be used only for testing.\n+   */\n+  public static node transform(ContentModel c)\n+  {\n+    return transform(c, null);\n+  }\n+\n+  /**\n+   * Transform into internal representation.\n+   * @param c a model to transform\n+   * @return a transformed model\n+   * @throws Error if the model structure contains errors.\n+   */\n+  public static node transform(ContentModel c, DTD dtd)\n+  {\n+    // Handle the special cases first.\n+    if (c.content instanceof node)\n+      return (node) c.content;\n+\n+    // Do the typical transform.\n+    node n;\n+\n+    /* Case with the single token */\n+    if (c.next == null)\n+      {\n+        n = optionalTransform(c, dtd);\n+      }\n+    else /* Case with the chain of the multiple tokens. */\n+      {\n+        node[] l = new node[ measureChainLength(c) ];\n+        ContentModel m = c;\n+        for (int i = 0; i < l.length; i++)\n+          {\n+            if (m.content instanceof ContentModel)\n+              {\n+                ContentModel nested = (ContentModel) m.content;\n+                if (nested.next == null &&\n+                    !(nested.content instanceof ContentModel)\n+                   )\n+                  {\n+                    l [ i ] =\n+                      new node((char) m.type, (char) nested.type, nested.content);\n+                  }\n+                else\n+                  {\n+                    l [ i ] = transform(nested, dtd);\n+                  }\n+              }\n+            else\n+              l [ i ] = new node((char) 0, (char) 0, m.content);\n+            addtype(l [ i ], (char) m.type);\n+            m = m.next;\n+          }\n+\n+        if (isBinary(c.type))\n+          for (int i = 0; i < l.length; i++)\n+            {\n+              l [ i ].binary = (char) c.type;\n+            }\n+\n+        n = new list(l);\n+      }\n+\n+    addtype(n, (char) c.type);\n+\n+    return n;\n+  }\n+\n+  /**\n+   * True for binary operator\n+   * @param c a character to test\n+   * @return true for [ ,&| ], false otherwise.\n+   */\n+  private static boolean isBinary(int c)\n+  {\n+    return binary.indexOf((char) c) >= 0;\n+  }\n+\n+  /**\n+   * True for unary operator.\n+   * @param c a character to test\n+   * @return true for [ +?* ], false otherwise.\n+   */\n+  private static boolean isUnary(int c)\n+  {\n+    return unary.indexOf((char) c) >= 0;\n+  }\n+\n+  /**\n+   * Assign an operation type for the given node.\n+   * @param n A node to set the operation to.\n+   * @param type Either binary or unary operation, is assigned to the\n+   * corresponding field of the node.\n+   * @throws error if the operation type is not\n+   * representing a valid unary or binary operation.\n+   */\n+  private static void addtype(node n, char type)\n+  {\n+    if (isBinary(type))\n+      n.binary = type;\n+\n+    else if (isUnary(type))\n+      n.unary = type;\n+\n+    else if (type != 0)\n+      throw new Error(\"Invalid operation '\" + (char) type + \"'\");\n+  }\n+\n+  private static node optionalTransform(ContentModel c, DTD dtd)\n+  {\n+    node n;\n+    if (c.content instanceof ContentModel)\n+      n = transform((ContentModel) c.content, dtd);\n+    else\n+\n+      /* A single token with the specified operation */\n+      n = new node((char) 0, (char) 0, c.content);\n+    return n;\n+  }\n+}"}, {"sha": "7fa69953021a727e311c0d3c5b61f33d9810a702", "filename": "libjava/gnu/javax/swing/text/html/parser/package.html", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fpackage.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fpackage.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fpackage.html?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,51 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n+<!-- package.html - describes classes in javax.swing.text.html.parser package.\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. -->\n+\n+<html>\n+<head><title>GNU Classpath - javax.swing.text.html.parser</title></head>\n+\n+<body>\n+<p>Provides the error tolerant, DTD-driven HTML 4.01 parser.\n+The parser that is used in web robots, html content analysers, \n+web browsers, web editors and other related applications. \n+It should compativle with the older HTML versions, supporting\n+obsoleted HTML featues. This package also includes some \n+supporting classes.</p>\n+@author Audrius Meskauskas, Lithuania\n+</body>\n+</html>"}, {"sha": "084edf65cf9e4e877ae18edbdb91d3820d0a0050", "filename": "libjava/gnu/javax/swing/text/html/parser/support/Parser.java", "status": "added", "additions": 1440, "deletions": 0, "changes": 1440, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2FParser.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2FParser.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2FParser.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,1440 @@\n+/* Parser.java -- HTML parser.\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.javax.swing.text.html.parser.support;\n+\n+import gnu.javax.swing.text.html.parser.htmlAttributeSet;\n+import gnu.javax.swing.text.html.parser.htmlValidator;\n+import gnu.javax.swing.text.html.parser.support.low.Constants;\n+import gnu.javax.swing.text.html.parser.support.low.ParseException;\n+import gnu.javax.swing.text.html.parser.support.low.ReaderTokenizer;\n+import gnu.javax.swing.text.html.parser.support.low.Token;\n+import gnu.javax.swing.text.html.parser.support.low.node;\n+import gnu.javax.swing.text.html.parser.support.low.pattern;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+\n+import java.util.Comparator;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.Vector;\n+\n+import javax.swing.text.ChangedCharSetException;\n+import javax.swing.text.html.HTML;\n+import javax.swing.text.html.parser.AttributeList;\n+import javax.swing.text.html.parser.DTD;\n+import javax.swing.text.html.parser.DTDConstants;\n+import javax.swing.text.html.parser.Element;\n+import javax.swing.text.html.parser.Entity;\n+import javax.swing.text.html.parser.TagElement;\n+\n+/**\n+ * <p>A simple error-tolerant HTML parser that uses a DTD document\n+ * to access data on the possible tokens, arguments and syntax.</p>\n+ * <p> The parser reads an HTML content from a Reader and calls various\n+ * notifying methods (which should be overridden in a subclass)\n+ * when tags or data are encountered.</p>\n+ * <p>Some HTML elements need no opening or closing tags. The\n+ * task of this parser is to invoke the tag handling methods also when\n+ * the tags are not explicitly specified and must be supposed using\n+ * information, stored in the DTD.\n+ * For  example, parsing the document\n+ * <p>&lt;table&gt;&lt;tr&gt;&lt;td&gt;a&lt;td&gt;b&lt;td&gt;c&lt;/tr&gt; <br>\n+ * will invoke exactly the handling methods exactly in the same order\n+ * (and with the same parameters) as if parsing the document: <br>\n+ * <em>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;table&gt;&lt;\n+ * tbody&gt;</em>&lt;tr&gt;&lt;td&gt;a<em>&lt;/td&gt;</em>&lt;td&gt;b<em>\n+ * &lt;/td&gt;</em>&lt;td&gt;c<em>&lt;/td&gt;&lt;/tr&gt;</em>&lt;\n+ * <em>/tbody&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;</em></p>\n+ * (supposed tags are given in italics). The parser also supports\n+ * obsolete elements of HTML syntax.<p>\n+ * </p>\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class Parser\n+  extends ReaderTokenizer\n+  implements DTDConstants\n+{\n+  /**\n+   * The current html tag.\n+   */\n+  public Token hTag = new Token();\n+\n+  /**\n+   * The document template description that will be used to parse the documents.\n+   */\n+  protected DTD dtd;\n+\n+  /**\n+   * The value of this field determines whether or not the Parser will be\n+   * strict in enforcing SGML compatibility. The default value is false,\n+   * stating that the parser should do everything to parse and get at least\n+   * some information even from the incorrectly written HTML input.\n+   */\n+  protected boolean strict;\n+\n+  /**\n+   * This fields has positive values in preformatted tags.\n+   */\n+  protected int preformatted = 0;\n+\n+  /**\n+   * The set of the document tags. This field is used for supporting\n+   * markFirstTime().\n+   */\n+  private Set documentTags =\n+    new TreeSet(new Comparator()\n+      {\n+        public int compare(Object a, Object b)\n+        {\n+          return ((String) a).compareToIgnoreCase((String) b);\n+        }\n+      }\n+               );\n+\n+  /**\n+  * The buffer to collect the incremental output like text or coment.\n+  */\n+  private StringBuffer buffer = new StringBuffer();\n+\n+  /**\n+   * The buffer to store the document title.\n+   */\n+  private StringBuffer title = new StringBuffer();\n+\n+  /**\n+   * The current token.\n+   */\n+  private Token t;\n+\n+  /**\n+   * True means that the 'title' tag of this document has\n+   * already been handled.\n+   */\n+  private boolean titleHandled;\n+\n+  /**\n+   * True means that the 'title' tag is currently open and all\n+   * text is also added to the title buffer.\n+   */\n+  private boolean titleOpen;\n+\n+  /**\n+   * The attributes of the current HTML element.\n+   */\n+  private htmlAttributeSet attributes =\n+    htmlAttributeSet.EMPTY_HTML_ATTRIBUTE_SET;\n+\n+  /**\n+   * The validator, controlling the forcible closing of the tags that\n+   * (in accordance to dtd) are not allowed in the current context.\n+   */\n+  private htmlValidator validator;\n+\n+  /**\n+   * Provides the default values for parameters in the case when these\n+   * values are defined in the DTD.\n+   */\n+  private parameterDefaulter defaulter;\n+\n+  /**\n+   * The text pre-processor for handling line ends and tabs.\n+   */\n+  private textPreProcessor textProcessor = new textPreProcessor();\n+\n+  /**\n+   * Creates a new Parser that uses the given\n+   * {@link javax.swing.text.html.parser.DTD }. The only standard way\n+   * to get an instance of DTD is to construct it manually, filling in\n+   * all required fields.\n+   * @param a_dtd The DTD to use. The parser behaviour after passing null\n+   * as an argument is not documented and may vary between implementations.\n+   */\n+  public Parser(DTD a_dtd)\n+  {\n+    if (a_dtd == null)\n+      dtd = gnu.javax.swing.text.html.parser.HTML_401F.getInstance();\n+    else\n+      dtd = a_dtd;\n+\n+    defaulter = new parameterDefaulter(dtd);\n+\n+    validator =\n+      new htmlValidator(dtd)\n+        {\n+          /**\n+           * Handles the error message. This method must be overridden to pass\n+           * the message where required.\n+           * @param msg The message text.\n+           */\n+          protected void s_error(String msg)\n+          {\n+            error(msg);\n+          }\n+\n+          /**\n+           * The method is called when the tag validator decides to close the\n+           * tag on its own initiative. After reaching the end of stream,\n+           * The tag validator closes all unclosed elements that are required\n+           * to have the end (closing) tag.\n+           *\n+           * @param element The tag being fictionally (forcibly) closed.\n+           */\n+          protected void handleSupposedEndTag(Element tElement)\n+          {\n+            // The tag is cloned as the original tElement is the\n+            // element from the starting tag - may be accidently used\n+            // somewhere else.\n+            TagElement tag = makeTag(tElement, true);\n+            _handleEndTag_remaining(tag);\n+          }\n+\n+          /**\n+           * The method is called when the the tag validator decides to open\n+           * the new tag on its own initiative. The tags, opened in this\n+           * way, are HTML, HEAD and BODY. The attribute set is temporary\n+           * assigned to the empty one, the previous value is\n+           * restored before return.\n+           *\n+           * @param element The tag being fictionally (forcibly) closed.\n+           */\n+          protected void handleSupposedStartTag(Element tElement)\n+          {\n+            TagElement tag = makeTag(tElement, true);\n+            htmlAttributeSet were = attributes;\n+            attributes = htmlAttributeSet.EMPTY_HTML_ATTRIBUTE_SET;\n+            _handleStartTag(tag);\n+            attributes = were;\n+          }\n+        };\n+  }\n+\n+  /**\n+   * Get the attributes of the current tag.\n+   * @return The attribute set, representing the attributes of the current tag.\n+   */\n+  public htmlAttributeSet getAttributes()\n+  {\n+    return attributes;\n+  }\n+\n+  /**\n+   * Invokes the error handler. The default method in this implementation\n+   * delegates the call to handleError, also providing the current line.\n+   */\n+  public void error(String msg)\n+  {\n+    error(msg, getTokenAhead());\n+  }\n+\n+  public void error(String msg, Token atToken)\n+  {\n+    if (atToken != null)\n+      handleError(atToken.where.beginLine,\n+                  msg + \": line \" + atToken.where.beginLine +\n+                  \", absolute pos \" + atToken.where.startPosition\n+                 );\n+    else\n+      handleError(0, msg);\n+  }\n+\n+  /**\n+   * Invokes the error handler. The default method in this implementation\n+   * delegates the call to error (parm1+\": '\"+parm2+\"'\").\n+   */\n+  public void error(String msg, String invalid)\n+  {\n+    error(msg + \": '\" + invalid + \"'\");\n+  }\n+\n+  /**\n+   * Invokes the error handler. The default method in this implementation\n+   * delegates the call to error (parm1+\" \"+ parm2+\" \"+ parm3).\n+   */\n+  public void error(String parm1, String parm2, String parm3)\n+  {\n+    error(parm1 + \" \" + parm2 + \" \" + parm3);\n+  }\n+\n+  /**\n+   * Invokes the error handler. The default method in this implementation\n+   * delegates the call to error (parm1+\" \"+ parm2+\" \"+ parm3+\" \"+ parm4).\n+   */\n+  public void error(String parm1, String parm2, String parm3, String parm4)\n+  {\n+    error(parm1 + \" \" + parm2 + \" \" + parm3 + \" \" + parm4);\n+  }\n+\n+  public void flushAttributes()\n+  {\n+  }\n+\n+  /**\n+   * Parse the HTML text, calling various methods in response to the\n+   * occurence of the corresponding HTML constructions.\n+   * @param reader The reader to read the source HTML from.\n+   * @throws IOException If the reader throws one.\n+   */\n+  public synchronized void parse(Reader reader)\n+                          throws IOException\n+  {\n+    reset(reader);\n+    restart();\n+    try\n+      {\n+        parseDocument();\n+        validator.closeAll();\n+      }\n+    catch (ParseException ex)\n+      {\n+        if (ex != null)\n+          {\n+            error(\"Unable to continue parsing the document\", ex.getMessage());\n+\n+            Throwable cause = ex.getCause();\n+            if (cause instanceof IOException)\n+              throw (IOException) cause;\n+          }\n+      }\n+  }\n+\n+  /**\n+   * Parses DTD markup declaration. Currently returns null without action.\n+   * @return null.\n+   * @throws IOException\n+   */\n+  public String parseDTDMarkup()\n+                        throws IOException\n+  {\n+    return null;\n+  }\n+\n+  /**\n+   * Parse SGML insertion ( &lt;! ... &gt; ). When the\n+   * the SGML insertion is found, this method is called, passing\n+   * SGML in the string buffer as a parameter. The default method\n+   * returns false without action and can be overridden to\n+   * implement user - defined SGML support.\n+   * <p>\n+   * If you need more information about SGML insertions in HTML documents,\n+   * the author suggests to read SGML tutorial on\n+   * {@link http://www.w3.org/TR/WD-html40-970708/intro/sgmltut.html}.\n+   * We also recommend Goldfarb C.F (1991) <i>The SGML Handbook</i>,\n+   * Oxford University Press, 688 p, ISBN: 0198537379.\n+   * </p>\n+   * @param strBuff\n+   * @return true if this is a valid DTD markup declaration.\n+   * @throws IOException\n+   */\n+  public boolean parseMarkupDeclarations(StringBuffer strBuff)\n+                                  throws IOException\n+  {\n+    return false;\n+  }\n+\n+  /**\n+   * Get the first line of the last parsed token.\n+   */\n+  protected int getCurrentLine()\n+  {\n+    return hTag.where.beginLine;\n+  }\n+\n+  /**\n+   * Read parseable character data, add to buffer.\n+   * @param clearBuffer If true, buffer if filled by CDATA section,\n+   * otherwise the section is appended to the existing content of the\n+   * buffer.\n+   *\n+   * @throws ParseException\n+   */\n+  protected void CDATA(boolean clearBuffer)\n+                throws ParseException\n+  {\n+    Token start = hTag = getTokenAhead();\n+\n+    if (clearBuffer)\n+      buffer.setLength(0);\n+\n+    // Handle expected EOF.\n+    if (start.kind == EOF)\n+      return;\n+\n+    read: \n+    while (true)\n+      {\n+        t = getTokenAhead();\n+        if (t.kind == EOF)\n+          {\n+            error(\"unexpected eof\", t);\n+            break read;\n+          }\n+        else if (t.kind == BEGIN)\n+          break read;\n+        else if (t.kind == Constants.ENTITY)\n+          {\n+            resolveAndAppendEntity(t);\n+            getNextToken();\n+          }\n+        else\n+          {\n+            append(t);\n+            getNextToken();\n+          }\n+      }\n+    hTag = new Token(start, getTokenAhead(0));\n+    if (buffer.length() != 0)\n+      _handleText();\n+  }\n+\n+  /**\n+  * Process Comment. This method skips till --> without\n+  * taking SGML constructs into consideration.  The supported SGML\n+  * constructs are handled separately.\n+  */\n+  protected void Comment()\n+                  throws ParseException\n+  {\n+    buffer.setLength(0);\n+\n+    Token start = hTag = mustBe(BEGIN);\n+    optional(WS);\n+    mustBe(EXCLAMATION);\n+    optional(WS);\n+    mustBe(DOUBLE_DASH);\n+\n+    Token t;\n+    Token last;\n+\n+    comment: \n+    while (true)\n+      {\n+        t = getTokenAhead();\n+        if (t.kind == EOF)\n+          {\n+            handleEOFInComment();\n+            last = t;\n+            break comment;\n+          }\n+        else if (COMMENT_END.matches(this))\n+          {\n+            mustBe(DOUBLE_DASH);\n+            optional(WS);\n+            last = mustBe(END);\n+            break comment;\n+          }\n+        else if (COMMENT_TRIPLEDASH_END.matches(this))\n+          {\n+            mustBe(DOUBLE_DASH);\n+            t = mustBe(NUMTOKEN);\n+            if (t.getImage().equals(\"-\"))\n+              {\n+                append(t);\n+                last = mustBe(END);\n+                break comment;\n+              }\n+            else\n+              {\n+                buffer.append(\"--\");\n+                append(t);\n+                t = getTokenAhead();\n+              }\n+          }\n+        else\n+        /* The lllll-- can match as NUMTOKEN */\n+        if ((t.getImage().endsWith(\"--\")) &&\n+            (\n+              getTokenAhead(1).kind == END ||\n+              (getTokenAhead(1).kind == WS && getTokenAhead(2).kind == END)\n+            )\n+           )\n+          {\n+            buffer.append(t.getImage().substring(0, t.getImage().length() - 2));\n+\n+            /* Skip the closing > that we have already checked. */\n+            last = mustBe(t.kind);\n+            break comment;\n+          }\n+        else\n+          append(t);\n+        mustBe(t.kind);\n+      }\n+    hTag = new Token(start, last);\n+    handleComment();\n+  }\n+\n+  /**\n+  * Read a script. The text, returned without any changes,\n+  * is terminated only by the closing tag SCRIPT.\n+  */\n+  protected void Script()\n+                 throws ParseException\n+  {\n+    Token name;\n+\n+    Token start = hTag = mustBe(BEGIN);\n+    optional(WS);\n+\n+    name = mustBe(SCRIPT);\n+\n+    optional(WS);\n+\n+    restOfTag(false, name, start);\n+\n+    buffer.setLength(0);\n+\n+    script: \n+    while (!SCRIPT_CLOSE.matches(this))\n+      {\n+        append(getNextToken());\n+      }\n+\n+    consume(SCRIPT_CLOSE);\n+\n+    _handleText();\n+\n+    endTag(false);\n+    _handleEndTag(makeTagElement(name.getImage(), false));\n+  }\n+\n+  /**\n+  * Process SGML insertion that is not a comment.\n+  */\n+  protected void Sgml()\n+               throws ParseException\n+  {\n+    if (COMMENT_OPEN.matches(this))\n+      Comment();\n+    else // skip till \">\"\n+      {\n+        Token start = hTag = mustBe(BEGIN);\n+        optional(WS);\n+        mustBe(EXCLAMATION);\n+\n+        buffer.setLength(0);\n+        read: \n+        while (true)\n+          {\n+            t = getNextToken();\n+            if (t.kind == Constants.ENTITY)\n+              {\n+                resolveAndAppendEntity(t);\n+              }\n+            else if (t.kind == EOF)\n+              {\n+                error(\"unexpected eof\", t);\n+                break read;\n+              }\n+            else if (t.kind == END)\n+              break read;\n+            else\n+              append(t);\n+          }\n+\n+        try\n+          {\n+            parseMarkupDeclarations(buffer);\n+          }\n+        catch (IOException ex)\n+          {\n+            error(\"Unable to parse SGML insertion: '\" + buffer + \"'\",\n+                  new Token(start, t)\n+                 );\n+          }\n+      }\n+  }\n+\n+  /**\n+  * Read a style definition. The text, returned without any changes,\n+  * is terminated only by the closing tag STYLE.\n+  */\n+  protected void Style()\n+                throws ParseException\n+  {\n+    Token name;\n+\n+    Token start = hTag = mustBe(BEGIN);\n+    optional(WS);\n+\n+    name = mustBe(STYLE);\n+\n+    optional(WS);\n+\n+    restOfTag(false, name, start);\n+\n+    buffer.setLength(0);\n+\n+    style: \n+    while (!STYLE_CLOSE.matches(this))\n+      {\n+        append(getNextToken());\n+      }\n+\n+    consume(STYLE_CLOSE);\n+\n+    _handleText();\n+\n+    endTag(false);\n+    _handleEndTag(makeTagElement(name.getImage(), false));\n+  }\n+\n+  /**\n+   * Read a html tag.\n+   */\n+  protected void Tag()\n+              throws ParseException\n+  {\n+    mark(true);\n+\n+    boolean closing = false;\n+    Token name;\n+    Token start = hTag = mustBe(BEGIN);\n+\n+    optional(WS);\n+    name = getNextToken();\n+    optional(WS);\n+\n+    if (name.kind == SLASH)\n+      {\n+        closing = true;\n+        name = getNextToken();\n+      }\n+\n+    restOfTag(closing, name, start);\n+  }\n+\n+  /**\n+   * A hook, for operations, preceeding call to handleText.\n+   * Handle text in a string buffer.\n+   * In non - preformatted mode, all line breaks immediately following the\n+   * start tag and immediately before an end tag is discarded,\n+   * \\r, \\n and \\t are replaced by spaces, multiple space are replaced\n+   * by the single one and the result is  moved into array,\n+   * passing it  to handleText().\n+   */\n+  protected void _handleText()\n+  {\n+    char[] text;\n+\n+    if (preformatted > 0)\n+      text = textProcessor.preprocessPreformatted(buffer);\n+    else\n+      text = textProcessor.preprocess(buffer);\n+\n+    if (text != null && text.length > 0)\n+      {\n+        TagElement pcdata = new TagElement(dtd.getElement(\"#pcdata\"));\n+        attributes = htmlAttributeSet.EMPTY_HTML_ATTRIBUTE_SET;\n+        _handleEmptyTag(pcdata);\n+\n+        handleText(text);\n+        if (titleOpen)\n+          title.append(text);\n+      }\n+  }\n+\n+  /**\n+   * Add the image of this token to the buffer.\n+   * @param t A token to append.\n+   */\n+  protected final void append(Token t)\n+  {\n+    if (t.kind != EOF)\n+      t.appendTo(buffer);\n+  }\n+\n+  /**\n+   * Consume pattern that must match.\n+   * @param p A pattern to consume.\n+   */\n+  protected final void consume(pattern p)\n+  {\n+    node n;\n+    for (int i = 0; i < p.nodes.length; i++)\n+      {\n+        n = p.nodes [ i ];\n+        if (n.optional)\n+          optional(n.kind);\n+        else\n+          mustBe(n.kind);\n+      }\n+  }\n+\n+  /**\n+   * The method is called when the HTML end (closing) tag is found or if\n+   * the parser concludes that the one should be present in the\n+   * current position. The method is called immediatly\n+   * before calling the handleEndTag().\n+   * @param omitted True if the tag is no actually present in the document,\n+   * but is supposed by the parser (like &lt;/html&gt; at the end of the\n+   * document).\n+   */\n+  protected void endTag(boolean omitted)\n+  {\n+  }\n+\n+  /**\n+   * Handle HTML comment. The default method returns without action.\n+   * @param comment\n+   */\n+  protected void handleComment(char[] comment)\n+  {\n+  }\n+\n+  /**\n+   * This is additionally called in when the HTML content terminates\n+   * without closing the HTML comment. This can only happen if the\n+   * HTML document contains errors (for example, the closing --;gt is\n+   * missing.\n+   */\n+  protected void handleEOFInComment()\n+  {\n+    error(\"Unclosed comment\");\n+  }\n+\n+  /**\n+   * Handle the tag with no content, like &lt;br&gt;. The method is\n+   * called for the elements that, in accordance with the current DTD,\n+   * has an empty content.\n+   * @param The tag being handled.\n+   * @throws javax.swing.text.ChangedCharSetException\n+   */\n+  protected void handleEmptyTag(TagElement tag)\n+                         throws javax.swing.text.ChangedCharSetException\n+  {\n+  }\n+\n+  /**\n+   * The method is called when the HTML closing tag ((like &lt;/table&gt;)\n+   * is found or if the parser concludes that the one should be present\n+   * in the current position.\n+   * @param The tag\n+   */\n+  protected void handleEndTag(TagElement tag)\n+  {\n+  }\n+\n+  /* Handle error that has occured in the given line. */\n+  protected void handleError(int line, String message)\n+  {\n+  }\n+\n+  /**\n+   * The method is called when the HTML opening tag ((like &lt;table&gt;)\n+   * is found or if the parser concludes that the one should be present\n+   * in the current position.\n+   * @param The tag\n+   */\n+  protected void handleStartTag(TagElement tag)\n+  {\n+  }\n+\n+  /**\n+   * Handle the text section.\n+   * <p> For non-preformatted section, the parser replaces\n+   * \\t, \\r and \\n by spaces and then multiple spaces\n+   * by a single space. Additionaly, all whitespace around\n+   * tags is discarded.\n+   * </p>\n+   * <p> For pre-formatted text (inside TEXAREA and PRE), the parser preserves\n+   * all tabs and spaces, but removes <b>one</b>  bounding \\r, \\n or \\r\\n,\n+   * if it is present. Additionally, it replaces each occurence of \\r or \\r\\n\n+   * by a single \\n.</p>\n+   *\n+   * @param text A section text.\n+   */\n+  protected void handleText(char[] text)\n+  {\n+  }\n+\n+  /**\n+   * Handle HTML &lt;title&gt; tag. This method is invoked when\n+   * both title starting and closing tags are already behind.\n+   * The passed argument contains the concatenation of all\n+   * title text sections.\n+   * @param The title text.\n+   */\n+  protected void handleTitle(char[] title)\n+  {\n+  }\n+\n+  /**\n+   * Constructs the tag from the given element. In this implementation,\n+   * this is defined, but never called.\n+   * @return the tag\n+   */\n+  protected TagElement makeTag(Element element)\n+  {\n+    return makeTag(element, false);\n+  }\n+\n+  /**\n+   * Constructs the tag from the given element.\n+   * @param the tag base {@link javax.swing.text.html.parser.Element}\n+   * @param isSupposed true if the tag is not actually present in the\n+   * html input, but the parser supposes that it should to occur in\n+   * the current location.\n+   * @return the tag\n+   */\n+  protected TagElement makeTag(Element element, boolean isSupposed)\n+  {\n+    return new TagElement(element, isSupposed);\n+  }\n+\n+  /**\n+   * This is called when the tag, representing the given element,\n+   * occurs first time in the document.\n+   * @param element\n+   */\n+  protected void markFirstTime(Element element)\n+  {\n+  }\n+\n+  /**\n+   * Consume the token that was checked before and hence MUST be present.\n+   * @param kind The kind of token to consume.\n+   */\n+  protected Token mustBe(int kind)\n+  {\n+    if (getTokenAhead().kind == kind)\n+      return getNextToken();\n+    else\n+      {\n+        String ei = \"\";\n+        if (kind < 1000)\n+          ei = \" ('\" + (char) kind + \"') \";\n+        throw new AssertionError(\"The token of kind \" + kind + ei +\n+                                 \" MUST be here,\"\n+                                );\n+      }\n+  }\n+\n+  /**\n+   * Handle attribute without value. The default method uses\n+   * the only allowed attribute value from DTD.\n+   * If the attribute is unknown or allows several values,\n+   * the HTML.NULL_ATTRIBUTE_VALUE is used. The attribute with\n+   * this value is added to the attribute set.\n+   * @param element The name of element.\n+   * @param attribute The name of attribute without value.\n+   */\n+  protected void noValueAttribute(String element, String attribute)\n+  {\n+    Object value = HTML.NULL_ATTRIBUTE_VALUE;\n+\n+    Element e = (Element) dtd.elementHash.get(element.toLowerCase());\n+    if (e != null)\n+      {\n+        AttributeList attr = e.getAttribute(attribute);\n+        if (attr != null)\n+          {\n+            Vector values = attr.values;\n+            if (values != null && values.size() == 1)\n+              value = values.get(0);\n+          }\n+      }\n+    attributes.addAttribute(attribute, value);\n+  }\n+\n+  /**\n+   * Consume the optional token, if present.\n+   * @param kind The kind of token to consume.\n+   */\n+  protected Token optional(int kind)\n+  {\n+    if (getTokenAhead().kind == kind)\n+      return getNextToken();\n+    else\n+      return null;\n+  }\n+\n+  /** Parse the html document. */\n+  protected void parseDocument()\n+                        throws ParseException\n+  {\n+    while (getTokenAhead().kind != EOF)\n+      {\n+        advanced = false;\n+        if (TAG.matches(this))\n+          Tag();\n+        else if (COMMENT_OPEN.matches(this))\n+          Comment();\n+        else if (STYLE_OPEN.matches(this))\n+          Style();\n+        else if (SCRIPT_OPEN.matches(this))\n+          Script();\n+        else if (SGML.matches(this))\n+          Sgml();\n+        else\n+          CDATA(true);\n+\n+        // Surely HTML error, treat as a text.\n+        if (!advanced)\n+          {\n+            Token wrong = getNextToken();\n+            error(\"unexpected '\" + wrong.getImage() + \"'\", wrong);\n+            buffer.setLength(0);\n+            buffer.append(wrong.getImage());\n+            _handleText();\n+          }\n+      }\n+  }\n+\n+  /**\n+   * Read the element attributes, adding them into attribute set.\n+   * @param element The element name (needed to access attribute\n+   * information in dtd).\n+   */\n+  protected void readAttributes(String element)\n+  {\n+    Token name;\n+    Token value;\n+    Token next;\n+    String attrValue;\n+\n+    attributes = new htmlAttributeSet();\n+\n+    optional(WS);\n+\n+    attributeReading: \n+    while (getTokenAhead().kind == NUMTOKEN)\n+      {\n+        name = getNextToken();\n+        optional(WS);\n+\n+        next = getTokenAhead();\n+        if (next.kind == EQ)\n+          {\n+            mustBe(EQ);\n+            optional(WS);\n+\n+            next = getNextToken();\n+\n+            switch (next.kind)\n+              {\n+                case QUOT :\n+\n+                  // read \"quoted\" attribute.\n+                  buffer.setLength(0);\n+                  readTillTokenE(QUOT);\n+                  attrValue = buffer.toString();\n+                  break;\n+\n+                case AP :\n+\n+                  // read 'quoted' attribute.\n+                  buffer.setLength(0);\n+                  readTillTokenE(AP);\n+                  attrValue = buffer.toString();\n+                  break;\n+\n+                // read unquoted attribute.\n+                case NUMTOKEN :\n+                  value = next;\n+                  optional(WS);\n+\n+                  // Check maybe the opening quote is missing.\n+                  next = getTokenAhead();\n+                  if (bQUOTING.get(next.kind))\n+                    {\n+                      hTag = next;\n+                      error(\"The value without opening quote is closed with '\" +\n+                            next.getImage() + \"'\"\n+                           );\n+                    }\n+                  attrValue = value.getImage();\n+                  break;\n+\n+                default :\n+                  break attributeReading;\n+              }\n+            attributes.addAttribute(name.getImage(), attrValue);\n+            optional(WS);\n+          }\n+        else // The '=' is missing: attribute without value.\n+          {\n+            noValueAttribute(element, name.getImage());\n+          }\n+      }\n+  }\n+\n+  /**\n+   * Return string, corresponding the given named entity.\n+   * The name is passed with the preceeding &, but without\n+   * the ending semicolon.\n+   */\n+  protected String resolveNamedEntity(final String a_tag)\n+  {\n+    // Discard &\n+    if (!a_tag.startsWith(\"&\"))\n+      throw new AssertionError(\"Named entity \" + a_tag +\n+                               \" must start witn '&'.\"\n+                              );\n+\n+    String tag = a_tag.substring(1);\n+\n+    try\n+      {\n+        Entity entity = dtd.getEntity(tag);\n+        if (entity != null)\n+          return entity.getString();\n+\n+        entity = dtd.getEntity(tag.toLowerCase());\n+\n+        if (entity != null)\n+          {\n+            error(\"The name of this entity should be in lowercase\", a_tag);\n+            return entity.getString();\n+          }\n+      }\n+    catch (IndexOutOfBoundsException ibx)\n+      {\n+        /* The error will be reported. */\n+      }\n+\n+    error(\"Unknown named entity\", a_tag);\n+    return a_tag;\n+  }\n+\n+  /**\n+   * Return char, corresponding the given numeric entity.\n+   * The name is passed with the preceeding &#, but without\n+   * the ending semicolon.\n+   */\n+  protected char resolveNumericEntity(final String a_tag)\n+  {\n+    // Discard &#\n+    if (!a_tag.startsWith(\"&#\"))\n+      throw new AssertionError(\"Numeric entity \" + a_tag +\n+                               \" must start witn '&#'.\"\n+                              );\n+\n+    String tag = a_tag.substring(2);\n+\n+    try\n+      {\n+        // Determine the encoding type:\n+        char cx = tag.charAt(0);\n+        if (cx == 'x' || cx == 'X') // Hexadecimal &#Xnnn;\n+\n+          return (char) Integer.parseInt(tag.substring(1), 16);\n+\n+        return (char) Integer.parseInt(tag);\n+      }\n+\n+    /* The error will be reported. */\n+    catch (NumberFormatException nex)\n+      {\n+      }\n+    catch (IndexOutOfBoundsException ix)\n+      {\n+      }\n+\n+    error(\"Invalid numeric entity\", a_tag);\n+    return '?';\n+  }\n+\n+  /**\n+   * Reset all fields into the intial default state, preparing the\n+   * parset for parsing the next document.\n+   */\n+  protected void restart()\n+  {\n+    documentTags.clear();\n+    titleHandled = false;\n+    titleOpen = false;\n+    buffer.setLength(0);\n+    title.setLength(0);\n+    validator.restart();\n+  }\n+\n+  /**\n+   * The method is called when the HTML opening tag ((like &lt;table&gt;)\n+   * is found or if the parser concludes that the one should be present\n+   * in the current position. The method is called immediately before\n+   * calling the handleStartTag.\n+   * @param The tag\n+   */\n+  protected void startTag(TagElement tag)\n+                   throws ChangedCharSetException\n+  {\n+  }\n+\n+  /**\n+   * Handle a complete element, when the tag content is already present in the\n+   * buffer and both starting and heading tags behind. This is called\n+   * in the case when the tag text must not be parsed for the nested\n+   * elements (elements STYLE and SCRIPT).\n+   */\n+  private void _handleCompleteElement(TagElement tag)\n+  {\n+    _handleStartTag(tag);\n+\n+    // Suppress inclusion of the SCRIPT ans STYLE texts into the title.\n+    HTML.Tag h = tag.getHTMLTag();\n+    if (h == HTML.Tag.SCRIPT || h == HTML.Tag.STYLE)\n+      {\n+        boolean tmp = titleOpen;\n+        titleOpen = false;\n+        _handleText();\n+        titleOpen = tmp;\n+      }\n+    else\n+      _handleText();\n+\n+    _handleEndTag(tag);\n+  }\n+\n+  /**\n+   * A hooks for operations, preceeding call to handleEmptyTag().\n+   * Handle the tag with no content, like &lt;br&gt;. As no any\n+   * nested tags are expected, the tag validator is not involved.\n+   * @param The tag being handled.\n+   */\n+  private void _handleEmptyTag(TagElement tag)\n+  {\n+    try\n+      {\n+        validator.validateTag(tag, attributes);\n+        handleEmptyTag(tag);\n+      }\n+    catch (ChangedCharSetException ex)\n+      {\n+        error(\"Changed charset exception:\", ex.getMessage());\n+      }\n+  }\n+\n+  /**\n+   * A hooks for operations, preceeding call to handleEndTag().\n+   * The method is called when the HTML closing tag\n+   * is found. Calls handleTitle after closing the 'title' tag.\n+   * @param The tag\n+   */\n+  private void _handleEndTag(TagElement tag)\n+  {\n+    validator.closeTag(tag);\n+    _handleEndTag_remaining(tag);\n+  }\n+\n+  /**\n+   * Actions that are also required if the closing action was\n+   * intiated by the tag validator.\n+   */\n+  private void _handleEndTag_remaining(TagElement tag)\n+  {\n+    HTML.Tag h = tag.getHTMLTag();\n+\n+    handleEndTag(tag);\n+    endTag(tag.fictional());\n+\n+    if (h.isPreformatted())\n+      preformatted--;\n+    if (preformatted < 0)\n+      preformatted = 0;\n+\n+    if (h == HTML.Tag.TITLE)\n+      {\n+        titleOpen = false;\n+        titleHandled = true;\n+\n+        char[] a = new char[ title.length() ];\n+        title.getChars(0, a.length, a, 0);\n+        handleTitle(a);\n+      }\n+  }\n+\n+  /**\n+   * A hooks for operations, preceeding call to handleStartTag().\n+   * The method is called when the HTML opening tag ((like &lt;table&gt;)\n+   * is found.\n+   * @param The tag\n+   */\n+  private void _handleStartTag(TagElement tag)\n+  {\n+    validator.openTag(tag, attributes);\n+    startingTag(tag);\n+    handleStartTag(tag);\n+\n+    HTML.Tag h = tag.getHTMLTag();\n+\n+    if (h.isPreformatted())\n+      preformatted++;\n+\n+    if (h == HTML.Tag.TITLE)\n+      {\n+        if (titleHandled)\n+          error(\"Repetetive <TITLE> tag\");\n+        titleOpen = true;\n+        titleHandled = false;\n+      }\n+  }\n+\n+  /**\n+   * Resume parsing after heavy errors in HTML tag structure.\n+   * @throws ParseException\n+   */\n+  private void forciblyCloseTheTag()\n+                            throws ParseException\n+  {\n+    int closeAt = 0;\n+    buffer.setLength(0);\n+\n+    ahead: \n+    for (int i = 1; i < 100; i++)\n+      {\n+        t = getTokenAhead(i - 1);\n+        if (t.kind == EOF || t.kind == BEGIN)\n+          break ahead;\n+        if (t.kind == END)\n+          {\n+            /* Closing '>' found. */\n+            closeAt = i;\n+            break ahead;\n+          }\n+      }\n+    if (closeAt > 0)\n+      {\n+        buffer.append(\"Ignoring '\");\n+        for (int i = 1; i <= closeAt; i++)\n+          {\n+            t = getNextToken();\n+            append(t);\n+          }\n+        buffer.append('\\'');\n+        error(buffer.toString());\n+      }\n+  }\n+\n+  /**\n+   * Handle comment in string buffer. You can avoid allocating a char\n+   * array each time by processing your comment directly here.\n+   */\n+  private void handleComment()\n+  {\n+    char[] a = new char[ buffer.length() ];\n+    buffer.getChars(0, a.length, a, 0);\n+    handleComment(a);\n+  }\n+\n+  private TagElement makeTagElement(String name, boolean isSupposed)\n+  {\n+    Element e = (Element) dtd.elementHash.get(name.toLowerCase());\n+    if (e == null)\n+      {\n+        error(\"Unknown tag <\" + name + \">\");\n+        e = dtd.getElement(name);\n+        e.name = name.toUpperCase();\n+        e.index = -1;\n+      }\n+\n+    if (!documentTags.contains(e.name))\n+      {\n+        markFirstTime(e);\n+        documentTags.add(e.name);\n+      }\n+\n+    return makeTag(e, isSupposed);\n+  }\n+\n+  /**\n+   * Read till the given token, resolving entities. Consume the given\n+   * token without adding it to buffer.\n+   * @param till The token to read till\n+   * @throws ParseException\n+   */\n+  private void readTillTokenE(int till)\n+                       throws ParseException\n+  {\n+    buffer.setLength(0);\n+    read: \n+    while (true)\n+      {\n+        t = getNextToken();\n+        if (t.kind == Constants.ENTITY)\n+          {\n+            resolveAndAppendEntity(t);\n+          }\n+        else if (t.kind == EOF)\n+          {\n+            error(\"unexpected eof\", t);\n+            break read;\n+          }\n+        else if (t.kind == till)\n+          break read;\n+        else if (t.kind == WS)\n+          {\n+            // Processing whitespace in accordance with CDATA rules:\n+            String s = t.getImage();\n+            char c;\n+            for (int i = 0; i < s.length(); i++)\n+              {\n+                c = s.charAt(i);\n+                if (c == '\\r')\n+                  buffer.append(' '); // CR replaced by space\n+                else if (c == '\\n')\n+                  ; // LF ignored\n+                else if (c == '\\t')\n+                  buffer.append(' '); // Tab replaced by space\n+                else\n+                  buffer.append(c);\n+              }\n+          }\n+        else\n+          append(t);\n+      }\n+  }\n+\n+  /**\n+   * Resolve the entity and append it to the end of buffer.\n+   * @param entity\n+   */\n+  private void resolveAndAppendEntity(Token entity)\n+  {\n+    switch (entity.category)\n+      {\n+        case ENTITY_NAMED :\n+          buffer.append(resolveNamedEntity(entity.getImage()));\n+          break;\n+\n+        case ENTITY_NUMERIC :\n+          buffer.append(resolveNumericEntity(entity.getImage()));\n+          break;\n+\n+        default :\n+          throw new AssertionError(\"Invalid entity category \" +\n+                                   entity.category\n+                                  );\n+      }\n+  }\n+\n+  /**\n+   * Handle the remaining of HTML tags. This is a common end for\n+   * TAG, SCRIPT and STYLE.\n+   * @param closing True for closing tags ( &lt;/TAG&gt; ).\n+   * @param name Name of element\n+   * @param start Token where element has started\n+   * @throws ParseException\n+   */\n+  private void restOfTag(boolean closing, Token name, Token start)\n+                  throws ParseException\n+  {\n+    boolean end = false;\n+    Token next;\n+\n+    optional(WS);\n+\n+    readAttributes(name.getImage());\n+\n+    optional(WS);\n+\n+    next = getTokenAhead();\n+    if (next.kind == END)\n+      {\n+        mustBe(END);\n+        end = true;\n+      }\n+\n+    hTag = new Token(start, next);\n+\n+    attributes.setResolveParent(defaulter.getDefaultParameters(name.getImage()));\n+\n+    if (!end)\n+      {\n+        // The tag body contains errors. If additionally the tag\n+        // name is not valid, this construction is treated as text.\n+        if (dtd.elementHash.get(name.getImage().toLowerCase()) == null &&\n+            backupMode\n+           )\n+          {\n+            error(\"Errors in tag body and unknown tag name. \" +\n+                  \"Treating the tag as a text.\"\n+                 );\n+            reset();\n+\n+            hTag = mustBe(BEGIN);\n+            buffer.setLength(0);\n+            buffer.append(hTag.getImage());\n+            CDATA(false);\n+            return;\n+          }\n+        else\n+          {\n+            error(\"Forcibly closing invalid parameter list\");\n+            forciblyCloseTheTag();\n+          }\n+      }\n+\n+    if (closing)\n+      {\n+        endTag(false);\n+        _handleEndTag(makeTagElement(name.getImage(), false));\n+      }\n+    else\n+      {\n+        TagElement te = makeTagElement(name.getImage(), false);\n+        if (te.getElement().type == DTDConstants.EMPTY)\n+          _handleEmptyTag(te);\n+        else\n+          _handleStartTag(te);\n+      }\n+  }\n+\n+  /**\n+   * This should fire additional actions in response to the\n+   * ChangedCharSetException.  The current implementation\n+   * does nothing.\n+   * @param tag\n+   */\n+  private void startingTag(TagElement tag)\n+  {\n+    try\n+      {\n+        startTag(tag);\n+      }\n+    catch (ChangedCharSetException cax)\n+      {\n+        error(\"Invalid change of charset\");\n+      }\n+  }\n+\n+  private void ws_error()\n+  {\n+    error(\"Whitespace here is not permitted\");\n+  }\n+}"}, {"sha": "2887bac0a116aa4fada24a7ef83847faa0caf543", "filename": "libjava/gnu/javax/swing/text/html/parser/support/gnuStringIntMapper.java", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2FgnuStringIntMapper.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2FgnuStringIntMapper.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2FgnuStringIntMapper.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,112 @@\n+/* gnuStringIntMapper.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.javax.swing.text.html.parser.support;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+/**\n+ * A helper class, mapping between the strings and they unique integer\n+ * identifiers.\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public abstract class gnuStringIntMapper\n+{\n+  /**\n+   * Maps argument integer values from DTDConstants into they string\n+   * names. Initialized on demand.\n+   */\n+  private Map is_Map;\n+\n+  /**\n+   * Maps argument string names into they integer values from DTDConstants.\n+   * Initialized on demand.\n+   */\n+  private Map si_Map;\n+\n+  /**\n+   *  Get string from id or null if no such id is present in the mapper.\n+   */\n+  public final String get(int id)\n+  {\n+    if (is_Map == null)\n+      createTheMap();\n+\n+    return (String) is_Map.get(new Integer(id));\n+  }\n+\n+  /** Get id from string or 0 if no such string is present in the mapper. */\n+  public final int get(String id)\n+  {\n+    if (si_Map == null)\n+      createTheMap();\n+\n+    Integer i = (Integer) si_Map.get(id);\n+\n+    return i != null ? i.intValue() : 0;\n+  }\n+\n+  /**\n+   * Create the mapping table for this mapper by adding the required\n+   * String/int pairs. The method is invoked\n+   * only once for each instance, after the first invocation of the any\n+   * form of the <code>get</code> method. Use <code>add</code> to\n+   * create a map for a concrete instance.\n+   */\n+  protected abstract void create();\n+\n+  /**\n+   * Add an id/string pair to this mapper. This is called from\n+   * the method <code>create</code> only.\n+   */\n+  protected void add(String name, int id)\n+  {\n+    Integer i = new Integer(id);\n+    si_Map.put(name, i);\n+    is_Map.put(i, name);\n+  }\n+\n+  private void createTheMap()\n+  {\n+    is_Map = new HashMap();\n+    si_Map = new TreeMap();\n+    create();\n+  }\n+}"}, {"sha": "b9e8edc13f6fe437bf038ac6c15cedaeb9d93919", "filename": "libjava/gnu/javax/swing/text/html/parser/support/low/Buffer.java", "status": "added", "additions": 238, "deletions": 0, "changes": 238, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Flow%2FBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Flow%2FBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Flow%2FBuffer.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,238 @@\n+/* Buffer.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.javax.swing.text.html.parser.support.low;\n+\n+/**\n+ * A string buffer that additionally holds line and absolute postion\n+ * information.\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class Buffer\n+{\n+  public static int INITIAL_SIZE = 2048;\n+\n+  /**\n+   * True if the \\n symbol has been seen.\n+   */\n+  public boolean n_seen;\n+\n+  /**\n+   * True if the \\r symbol has been seen.\n+   */\n+  public boolean r_seen;\n+  char[] chr = new char[ INITIAL_SIZE ];\n+  int[] line = new int[ INITIAL_SIZE ];\n+  int[] position = new int[ INITIAL_SIZE ];\n+\n+  /**\n+   * Current line.\n+   */\n+  int current_line = 0;\n+\n+  /**\n+   * Point to the next free position.\n+   */\n+  int length;\n+\n+  public Buffer()\n+  {\n+  }\n+\n+  public Buffer(String content)\n+  {\n+    for (int i = 0; i < content.length(); i++)\n+      {\n+        append(content.charAt(i), i);\n+      }\n+  }\n+\n+  /**\n+   * Get the characters into array.\n+   * @param srcBegin From, inclusive\n+   * @param srcEnd To, exclusive.\n+   * @param dst Into\n+   * @param dstBegin Offset.\n+   */\n+  public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)\n+  {\n+    System.arraycopy(chr, srcBegin, dst, dstBegin, (srcEnd - srcBegin));\n+  }\n+\n+  /**\n+   * Return the sequence, used to separate lines in the document.\n+   * @return one of \\n, \\r or \\r\\n.\n+   */\n+  public String getEndOfLineSequence()\n+  {\n+    if (r_seen && n_seen)\n+      return \"\\r\\n\";\n+    else if (r_seen)\n+      return \"\\r\";\n+    else\n+\n+      // This also is returned for single-line document.\n+      return \"\\n\";\n+  }\n+\n+  /**\n+   * Truncate.\n+   * @param n The length to truncate till.\n+   */\n+  public void setLength(int n)\n+  {\n+    length = n;\n+  }\n+\n+  /**\n+   * Get location information for the given region.\n+   * @param from Region start, inclusive.\n+   * @param to Region end, exclusive.\n+   * @return The location, covering the region.\n+   */\n+  public Location getLocation(int from, int to)\n+  {\n+    Location l = new Location();\n+    l.beginLine = line [ from ];\n+    l.endLine = line [ to - 1 ];\n+\n+    l.startPosition = position [ from ];\n+    l.endPosition = position [ to - 1 ] + 1;\n+\n+    return l;\n+  }\n+\n+  /**\n+   * Add the character.\n+   * @param c The character.\n+   * @param pos The character position in the stream (the line number\n+   * is handled internally in the buffer).\n+   */\n+  public void append(char c, int pos)\n+  {\n+    if (length >= chr.length)\n+      expand();\n+    chr [ length ] = c;\n+    position [ length ] = pos;\n+\n+    if (c == '\\n')\n+      {\n+        if (!r_seen)\n+          current_line++;\n+        n_seen = true;\n+      }\n+    else if (c == '\\r')\n+      {\n+        current_line++;\n+        r_seen = true;\n+      }\n+\n+    line [ length ] = current_line;\n+\n+    length++;\n+  }\n+\n+  /**\n+   * Return char at the given positon.\n+   */\n+  public char charAt(int i)\n+  {\n+    return chr [ i ];\n+  }\n+\n+  /**\n+   * Delete the range\n+   * @param from Start position, inclusive.\n+   * @param to End position, exclusive.\n+   */\n+  public void delete(int from, int to)\n+  {\n+    int len = to - from;\n+    if (len < 1)\n+      throw new AssertionError(\"Deleting \" + from + \" till \" + to);\n+\n+    int tail = length - to;\n+\n+    System.arraycopy(chr, to, chr, from, tail);\n+    System.arraycopy(position, to, position, from, tail);\n+    System.arraycopy(line, to, line, from, tail);\n+    length = length - len;\n+  }\n+\n+  /**\n+   * Double the buffer size.\n+   */\n+  public void expand()\n+  {\n+    int nSize = 2 * chr.length;\n+\n+    char[] nchr = new char[ nSize ];\n+    int[] nposition = new int[ nSize ];\n+    int[] nline = new int[ nSize ];\n+\n+    System.arraycopy(chr, 0, nchr, 0, chr.length);\n+    System.arraycopy(position, 0, nposition, 0, position.length);\n+    System.arraycopy(line, 0, nline, 0, line.length);\n+\n+    chr = nchr;\n+    position = nposition;\n+    line = nline;\n+  }\n+\n+  /**\n+   * Return length of the occupied part of the buffer.\n+   */\n+  public int length()\n+  {\n+    return length;\n+  }\n+\n+  /**\n+   * Prepare for parsing the new document.\n+   */\n+  public void reset()\n+  {\n+    setLength(0);\n+    r_seen = n_seen = false;\n+  }\n+\n+  public String toString()\n+  {\n+    return new String(chr, 0, length);\n+  }\n+}"}, {"sha": "367dd03962cf6550886d330c44934316fe6ec956", "filename": "libjava/gnu/javax/swing/text/html/parser/support/low/Constants.java", "status": "added", "additions": 422, "deletions": 0, "changes": 422, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Flow%2FConstants.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Flow%2FConstants.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Flow%2FConstants.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,422 @@\n+/* Constants.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.javax.swing.text.html.parser.support.low;\n+\n+import java.util.BitSet;\n+\n+/**\n+ * The parser constants and operations, directly related to the parser\n+ * constants.\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class Constants\n+{\n+  /* Single character tokens are reflected into they ASCII codes. */\n+\n+  /**\n+   * Start of HTML token.\n+   */\n+  public static final int BEGIN = '<';\n+\n+  /**\n+   * End of HTML token.\n+   */\n+  public static final int END = '>';\n+\n+  /**\n+   * Exclamation (indicates SGML or comment).\n+   */\n+  public static final int EXCLAMATION = '!';\n+\n+  /**\n+   * Slash (indicates closing tag).\n+   */\n+  public static final int SLASH = '/';\n+\n+  /**\n+   * Equals sign.\n+   */\n+  public static final int EQ = '=';\n+\n+  /**\n+   * Quoting sign.\n+   */\n+  public static final int AP = '\\'';\n+\n+  /**\n+   * Quoting sign.\n+   */\n+  public static final int QUOT = '\"';\n+\n+  /* The numbers of other tokens start outside the ascii space. */\n+  /* String tokens */\n+\n+  /**\n+   * Double dash (--)\n+   */\n+  public static final int DOUBLE_DASH = 1000;\n+\n+  /**\n+   * The STYLE tag (needs special handling).\n+   */\n+  public static final int STYLE = 1001;\n+\n+  /**\n+   * The SCRIPT tag (needs special handling).\n+   */\n+  public static final int SCRIPT = 1002;\n+\n+  /* Pattern tokens */\n+\n+  /**\n+   * HTML whitespace.\n+   */\n+  public static final int WS = 1003;\n+\n+  /**\n+   * Named or numeric entity,\n+   */\n+  public static final int ENTITY = 1004;\n+\n+  /**\n+   * Sequence of valid name characters (can start from digit).\n+   */\n+  public static final int NUMTOKEN = 1005;\n+\n+  /* Complex tokens */\n+\n+  /**\n+   * Comment opening sequence.\n+   */\n+  public static final pattern COMMENT_OPEN =\n+    new pattern(new node[]\n+                {\n+                  new node(BEGIN), new node(WS, true), new node(EXCLAMATION),\n+                  new node(WS, true), new node(DOUBLE_DASH),\n+                }\n+               );\n+\n+  /**\n+   * Comment closing sequence\n+   */\n+  public static final pattern COMMENT_END =\n+    new pattern(new node[]\n+                {\n+                  new node(DOUBLE_DASH), new node(WS, true), new node(END)\n+                }\n+               );\n+\n+  /**\n+   * Special case ---> (also is treated as end of comment).\n+   */\n+  public static final pattern COMMENT_TRIPLEDASH_END =\n+    new pattern(new node[]\n+                {\n+                  new node(DOUBLE_DASH), new node(NUMTOKEN), new node(END)\n+                }\n+               );\n+\n+  /**\n+   * STYLE element heading pattern.\n+   */\n+  public static final pattern STYLE_OPEN =\n+    new pattern(new node[] { new node(BEGIN), new node(WS, true), new node(STYLE) });\n+\n+  /**\n+   * SCRIPT element heading pattern.\n+   */\n+  public static final pattern SCRIPT_OPEN =\n+    new pattern(new node[] { new node(BEGIN), new node(WS, true), new node(SCRIPT) });\n+\n+  /**\n+   * SGML element heading pattern.\n+   */\n+  public static final pattern SGML =\n+    new pattern(new node[]\n+                {\n+                  new node(BEGIN), new node(WS, true), new node(EXCLAMATION)\n+                }\n+               );\n+\n+  /**\n+   * SCRIPT element closing pattern.\n+   */\n+  public static final pattern SCRIPT_CLOSE =\n+    new pattern(new node[]\n+                {\n+                  new node(BEGIN), new node(WS, true), new node(SLASH),\n+                  new node(WS, true), new node(SCRIPT), new node(WS, true),\n+                  new node(END)\n+                }\n+               );\n+\n+  /**\n+   * STYLE element closing pattern.\n+   */\n+  public static final pattern STYLE_CLOSE =\n+    new pattern(new node[]\n+                {\n+                  new node(BEGIN), new node(WS, true), new node(SLASH),\n+                  new node(WS, true), new node(STYLE), new node(WS, true),\n+                  new node(END)\n+                }\n+               );\n+\n+  /**\n+   * Ordinary HTML tag heading pattern.\n+   */\n+  public static final pattern TAG =\n+    new pattern(new node[]\n+                {\n+                  new node(BEGIN), new node(WS, true), new node(SLASH, true),\n+                  new node(WS, true), new node(NUMTOKEN)\n+                }\n+               );\n+\n+  /* Special tokens */\n+\n+  /**\n+   * All other tokens.\n+   */\n+  public static final int OTHER = 1999;\n+\n+  /**\n+   * The UNICODE \"end of text\" control code\n+   */\n+  static final char ETX = 3;\n+\n+  /**\n+   * End of file.\n+   */\n+  public static final int EOF = ETX;\n+\n+  /* Character categories */\n+\n+  /**\n+   * All single char tokens.\n+   */\n+  public static final BitSet bSINGLE_CHAR_TOKEN = new BitSet();\n+\n+  /**\n+   * Non letters and non numbers, allowed in HTML names.\n+   */\n+  public static final BitSet bSPECIAL = new BitSet();\n+\n+  /**\n+   * All letters, used in HTML names.\n+   */\n+  public static final BitSet bLETTER = new BitSet();\n+\n+  /**\n+   * Digits.\n+   */\n+  public static final BitSet bDIGIT = new BitSet();\n+\n+  /**\n+   * Both line breaks.\n+   */\n+  public static final BitSet bLINEBREAK = new BitSet();\n+\n+  /**\n+   * All whitespace.\n+   */\n+  public static final BitSet bWHITESPACE = new BitSet();\n+\n+  /**\n+   * Both quoting characters.\n+   */\n+  public static final BitSet bQUOTING = new BitSet();\n+\n+  /**\n+   * Valid name characters.\n+   */\n+  public static final BitSet bNAME = new BitSet();\n+\n+  /* Entity subcategories */\n+\n+  /**\n+   * Named entity.\n+   */\n+  public static final int ENTITY_NAMED = 1;\n+\n+  /**\n+   * Numeric entity.\n+   */\n+  public static final int ENTITY_NUMERIC = 2;\n+\n+  static\n+  {\n+    bQUOTING.set(AP);\n+    bQUOTING.set(QUOT);\n+\n+    bSINGLE_CHAR_TOKEN.set(BEGIN);\n+    bSINGLE_CHAR_TOKEN.set(END);\n+    bSINGLE_CHAR_TOKEN.set(EXCLAMATION);\n+    bSINGLE_CHAR_TOKEN.set(SLASH);\n+    bSINGLE_CHAR_TOKEN.set(EQ);\n+    bSINGLE_CHAR_TOKEN.set(EOF);\n+\n+    bSINGLE_CHAR_TOKEN.or(bQUOTING);\n+\n+    bLINEBREAK.set('\\r');\n+    bLINEBREAK.set('\\n');\n+\n+    bWHITESPACE.set(' ');\n+    bWHITESPACE.set('\\t');\n+    bWHITESPACE.set(0xC);\n+    bWHITESPACE.or(bLINEBREAK);\n+\n+    for (char i = '0'; i <= '9'; i++)\n+      {\n+        bDIGIT.set(i);\n+      }\n+\n+    for (char i = 'a'; i <= 'z'; i++)\n+      {\n+        bLETTER.set(i);\n+      }\n+\n+    for (char i = 'A'; i <= 'Z'; i++)\n+      {\n+        bLETTER.set(i);\n+      }\n+\n+    bSPECIAL.set('-');\n+    bSPECIAL.set('_');\n+    bSPECIAL.set(':');\n+    bSPECIAL.set('.');\n+\n+    bNAME.or(bLETTER);\n+    bNAME.or(bDIGIT);\n+    bNAME.or(bSPECIAL);\n+  }\n+\n+  /**\n+   * Verifies if one of the tokens matches the end of string\n+   * buffer. The last character in the string buffer is the\n+   * \"future character\", some tokens needs to verify it the\n+   * token does not continue \"towards the future\". If the token\n+   * matches, it matches till \"pre-last\" character in the buffer.\n+   * @param b\n+   * @return\n+   */\n+  public Token endMatches(Buffer b)\n+  {\n+    if (b.length() < 2)\n+      return null;\n+\n+    int p = b.length() - 2;\n+\n+    if (b.length() > 2 && b.charAt(p) == '-' && b.charAt(p - 1) == '-')\n+      return new Token(DOUBLE_DASH, \"--\", b.getLocation(p - 1, p + 1));\n+\n+    char last = b.charAt(p);\n+\n+    if (bSINGLE_CHAR_TOKEN.get(last))\n+      return new Token(last, last, b.getLocation(p, p + 1));\n+\n+    char future = b.charAt(p + 1);\n+\n+    // Check for numtokens, script and style:\n+    if (bNAME.get(last) && !bNAME.get(future))\n+      {\n+        // Scan the history up:\n+        int u = p - 1;\n+        while (u >= 0 && bNAME.get(b.charAt(u)))\n+          u--;\n+        u++;\n+\n+        char[] token = new char[ p - u + 1 ];\n+\n+        // Found a numtoken\n+        b.getChars(u, p + 1, token, 0);\n+\n+        // Verify for the built-in tokens:\n+        String e = new String(token);\n+\n+        // found the entity reference\n+        if (u > 0 && b.charAt(u - 1) == '&')\n+          {\n+            // The subsequent semicolon may be the part of the token\n+            // as well. The semicolon must be ignored. This must be\n+            // handled elsewhere.\n+            return new Token(ENTITY, ENTITY_NAMED, \"&\" + e,\n+                             b.getLocation(u - 1, p + 1)\n+                            );\n+          }\n+\n+        // found the numeric entity reference\n+        if (u > 1 && b.charAt(u - 1) == '#' && b.charAt(u - 2) == '&')\n+          {\n+            // The subsequent semicolon may be the part of the token\n+            // as well. The semicolon must be ignored. This must be\n+            // handled elsewhere.\n+            return new Token(ENTITY, ENTITY_NUMERIC, \"&#\" + e,\n+                             b.getLocation(u - 2, p + 2)\n+                            );\n+          }\n+\n+        Location le = b.getLocation(u, p + 1);\n+\n+        if (e.equalsIgnoreCase(\"SCRIPT\"))\n+          return new Token(SCRIPT, e, le);\n+        else if (e.equalsIgnoreCase(\"STYLE\"))\n+          return new Token(STYLE, e, le);\n+        else\n+          return new Token(NUMTOKEN, e, le);\n+      }\n+\n+    // Check for whitespace\n+    if (bWHITESPACE.get(last) && !bWHITESPACE.get(future))\n+      {\n+        // Scan the history up:\n+        int u = p - 1;\n+        while (u >= 0 && bWHITESPACE.get(b.charAt(u)))\n+          u--;\n+        u++;\n+\n+        char[] token = new char[ p - u + 1 ];\n+        b.getChars(u, p + 1, token, 0);\n+\n+        return new Token(WS, new String(token), b.getLocation(u, p + 1));\n+      }\n+\n+    return null;\n+  }\n+}"}, {"sha": "5a0f2046f497d79bcd95dacf9e8910b4cff63f95", "filename": "libjava/gnu/javax/swing/text/html/parser/support/low/Location.java", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Flow%2FLocation.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Flow%2FLocation.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Flow%2FLocation.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,83 @@\n+/* Location.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.javax.swing.text.html.parser.support.low;\n+\n+/**\n+ * Defines a region in the text: its bounding positions and the line number.\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class Location\n+{\n+  /**\n+   * The line number, where the token starts.\n+   */\n+  public int beginLine;\n+\n+  /**\n+   * The line, where the token ends.\n+   */\n+  public int endLine;\n+\n+  /**\n+   * The absolute token end position in the input stream,\n+   * exclusive.\n+   */\n+  public int endPosition;\n+\n+  /**\n+   * The absolute token start position in the input stream,\n+   * inclusive.\n+   */\n+  public int startPosition;\n+\n+  public Location()\n+  {\n+  }\n+\n+  /**\n+   * Special case, used to mark EOF.\n+   * @param p The total stream length.\n+   */\n+  public Location(int p)\n+  {\n+    startPosition = p;\n+    endPosition = p + 1;\n+    beginLine = endLine = -1;\n+  }\n+}"}, {"sha": "9f1094e6285627c50664c52e98178c707fdc5811", "filename": "libjava/gnu/javax/swing/text/html/parser/support/low/ParseException.java", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Flow%2FParseException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Flow%2FParseException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Flow%2FParseException.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,51 @@\n+/* ParseException.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.javax.swing.text.html.parser.support.low;\n+\n+/**\n+ * This can be thrown from various parsing methods.\n+ */\n+public class ParseException\n+  extends RuntimeException\n+{\n+  public ParseException(String s, Throwable cause)\n+  {\n+    super(s, cause);\n+  }\n+}"}, {"sha": "30890e4ebdf7b7618c2e4246ed47026fdd248fa1", "filename": "libjava/gnu/javax/swing/text/html/parser/support/low/Queue.java", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Flow%2FQueue.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Flow%2FQueue.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Flow%2FQueue.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,142 @@\n+/* Queue.java -- a token queue.\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.javax.swing.text.html.parser.support.low;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * A token queue.\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class Queue\n+{\n+  Token[] m = new Token[ 64 ];\n+  int a = 0;\n+  int b = 0;\n+\n+  /**\n+   * True for the empty queue.\n+   */\n+  public boolean isEmpty()\n+  {\n+    return size() == 0;\n+  }\n+\n+  /**\n+   *  Add this trace to the end of the queue.\n+   */\n+  public void add(Token u)\n+  {\n+    if (a < m.length)\n+      {\n+        m [ a ] = u;\n+        a++;\n+      }\n+    else // The end of array has been reached.\n+      {\n+        if (b > 0) // If some elements were deleted from the start of the queue, shift.\n+          {\n+            int d = b;\n+            System.arraycopy(m, b, m, 0, a - b);\n+            b = b - d;\n+            a = a - d;\n+            m [ a ] = u;\n+            a++;\n+          }\n+        else // Enlarge the queue, doubling the size.\n+          {\n+            int n = m.length * 2;\n+            Token[] nm = new Token[ 2 * n ];\n+            System.arraycopy(m, 0, nm, 0, m.length);\n+            Arrays.fill(m, null);\n+\n+            nm [ a ] = u;\n+            m = nm;\n+            a++;\n+          }\n+      }\n+  }\n+\n+  /**\n+   * Clear the queue.\n+   */\n+  public void clear()\n+  {\n+    a = b = 0;\n+    Arrays.fill(m, null);\n+  }\n+\n+  /**\n+   * Read the value ahead. 0 is the value that will be returned with\n+   * the following next. This method does not remove values from the\n+   * queue. To test if there is enough tokens in the queue, size() must\n+   * be checked before calling this method.\n+   */\n+  public Token get(int ahead)\n+  {\n+    int p = b + ahead;\n+    if (p < a)\n+      return m [ p ];\n+    else\n+      throw new ArrayIndexOutOfBoundsException(\"Not enough tokens\");\n+  }\n+\n+  /**\n+   * Read the oldest value from the queue and remove this value from\n+   * the queue.\n+   */\n+  public Token next()\n+  {\n+    if (a == b)\n+      throw new ArrayIndexOutOfBoundsException(\"queue empty\");\n+\n+    Token r = m [ b ];\n+    m [ b ] = null;\n+    b++;\n+    return r;\n+  }\n+\n+  /**\n+   * Size of the queue.\n+   */\n+  public int size()\n+  {\n+    return a - b;\n+  }\n+}"}, {"sha": "f354bec6e63a4ec5016505ab5dcffd7dcb1e90b0", "filename": "libjava/gnu/javax/swing/text/html/parser/support/low/ReaderTokenizer.java", "status": "added", "additions": 374, "deletions": 0, "changes": 374, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Flow%2FReaderTokenizer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Flow%2FReaderTokenizer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Flow%2FReaderTokenizer.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,374 @@\n+/* ReaderTokenizer.java -- splits the input char sequence int tokens.\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.javax.swing.text.html.parser.support.low;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+\n+/**\n+ * Reader splits the input char sequence into tokens.\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class ReaderTokenizer\n+  extends Constants\n+{\n+  /**\n+   * This is set to true each time the getNextToken is called.\n+   * Used in preventing loops when all patterns refuse to accept\n+   * the invalid input.\n+   */\n+  protected boolean advanced;\n+\n+  /**\n+   * If true, the returned tokens are also placed in the backup\n+   * queue.\n+   */\n+  protected boolean backupMode;\n+\n+  /**\n+   * The buffer to read document into.\n+   */\n+  Buffer buffer = new Buffer();\n+\n+  /**\n+   * The queue for supporting mark().\n+   */\n+  Queue backup = new Queue();\n+\n+  /**\n+   * The queue of found tokens.\n+   */\n+  Queue queue = new Queue();\n+\n+  /**\n+   * The reader to read the document from.\n+   */\n+  Reader reader;\n+\n+  /**\n+   * Array of char tokens\n+   */\n+  char[] charTokens;\n+\n+  /**\n+   * Array of string tokens.\n+   */\n+  String[] stringTokens;\n+\n+  /**\n+   * The current reader position.\n+   */\n+  int readerPosition = -1;\n+\n+  /**\n+   * Creates a new ReaderTokenizer. The reset(...) method must be\n+   * subsequently called to set the reader.\n+   */\n+  public ReaderTokenizer()\n+  {\n+  }\n+\n+  /**\n+   * Return the sequence, used to separate lines in the document.\n+   * @return one of \\n, \\r or \\r\\n.\n+   */\n+  public String getEndOfLineSequence()\n+  {\n+    return buffer.getEndOfLineSequence();\n+  }\n+\n+  /**\n+   * Get the next token.\n+   * @return\n+   */\n+  public Token getNextToken()\n+  {\n+    Token rt;\n+    advanced = true;\n+    try\n+      {\n+        if (queue.isEmpty())\n+          read(1);\n+\n+        if (!queue.isEmpty())\n+          rt = queue.next();\n+        else\n+          rt = new Token(EOF, new Location(readerPosition));\n+      }\n+    catch (IOException ex)\n+      {\n+        throw new ParseException(\"IO Exception\", ex);\n+      }\n+    if (backupMode)\n+      backup.add(rt);\n+    return rt;\n+  }\n+\n+  /**\n+   * Get a token, lying the given number of tokens\n+   * ahead. getToken(0) will return the same token,\n+   * what would be returned by getNextToken().\n+   * getToken(..) does change the current position\n+   * in the input stream. If the end of stream is\n+   * reached, the EOF token is always returned.\n+   */\n+  public Token getTokenAhead(int ahead)\n+  {\n+    try\n+      {\n+        read(ahead - queue.size() + 1);\n+        return queue.size() >= ahead ? queue.get(ahead) : eofToken();\n+      }\n+    catch (IOException ex)\n+      {\n+        throw new ParseException(\"IO Exception\", ex);\n+      }\n+  }\n+\n+  /**\n+   * Get a token, bein immediatley ahead.\n+   * If the end of stream is\n+   * reached, the EOF token is always returned.\n+   * The method is equivalent calling getTokenAhead(0).\n+   */\n+  public Token getTokenAhead()\n+  {\n+    try\n+      {\n+        if (queue.isEmpty())\n+          read(1);\n+        if (!queue.isEmpty())\n+          return queue.get(0);\n+        else\n+          return eofToken();\n+      }\n+    catch (IOException ex)\n+      {\n+        throw new ParseException(\"IO Exception\", ex);\n+      }\n+  }\n+\n+  /**\n+   * Invokes the error handler.\n+   */\n+  public void error(String msg, Token at)\n+  {\n+    System.out.println(msg);\n+  }\n+\n+  /**\n+   * Turns the backup mode on or off.\n+   * It is possible to return where the mark(true) was last called\n+   * by calling reset().\n+   * @param mode True if it is required to save tokens, making\n+   * returning to the current point possible.\n+   */\n+  public void mark(boolean mode)\n+  {\n+    backup.clear();\n+    backupMode = mode;\n+  }\n+\n+  /**\n+   * Prepare for new parsing from the given stream.\n+   * @param a_reader A reader to parse from.\n+   */\n+  public void reset(Reader a_reader)\n+  {\n+    reader = a_reader;\n+    readerPosition = -1;\n+    buffer.reset();\n+    queue.clear();\n+  }\n+\n+  /**\n+   * Reset the internal cursor to the position where the mark()\n+   * was last time called. Switches the backup mode off.\n+   */\n+  public void reset()\n+  {\n+    if (!backupMode)\n+      throw new AssertionError(\"Call mark(true) before using reset()!\");\n+    backupMode = false;\n+\n+    // That is now in the queue, will be appended to the end of backup.\n+    while (!queue.isEmpty())\n+      backup.add(queue.next());\n+\n+    Queue t = queue;\n+    queue = backup;\n+    backup = t;\n+    backup.clear();\n+  }\n+\n+  /**\n+   * Read the given number of the tokens. Add the needed number of EOF\n+   * tokens if there are no more data in the stream.\n+   * @param amount The number of additional tokens to read.\n+   */\n+  void read(int numberOfTokens)\n+     throws IOException\n+  {\n+    if (numberOfTokens <= 0)\n+      return;\n+\n+    reading: \n+    for (int i = 0; i < numberOfTokens; i++)\n+      readToken();\n+  }\n+\n+  /**\n+   * Read next token from the reader, add it to the queue\n+   */\n+  void readToken()\n+          throws IOException\n+  {\n+    Token t;\n+    int ch;\n+\n+    enlarging: \n+    while (true)\n+      {\n+        t = tokenMatches();\n+        if (t != null)\n+          break enlarging;\n+        else\n+          {\n+            ch = reader.read();\n+            readerPosition++;\n+            if (ch == ETX)\n+              ch = ' ';\n+            if (ch < 0)\n+              {\n+                if (buffer.length() == 0)\n+                  {\n+                    queue.add(eofToken());\n+                    return;\n+                  }\n+                else\n+                  {\n+                    if (buffer.charAt(buffer.length() - 1) != ETX)\n+                      buffer.append(ETX, readerPosition++);\n+                    else\n+                      {\n+                        // Discard terminating ETX\n+                        buffer.setLength(buffer.length() - 1);\n+                        if (buffer.length() > 0)\n+                          {\n+                            t = new Token(OTHER, buffer.toString(),\n+                                          buffer.getLocation(0, buffer.length())\n+                                         );\n+                            queue.add(t);\n+                            buffer.setLength(0);\n+                          }\n+                        return;\n+                      }\n+                  }\n+              }\n+            else\n+              buffer.append((char) ch, readerPosition);\n+          }\n+      }\n+  }\n+\n+  /**\n+   * Check if the end of buffer matches one of the tokens. If it does,\n+   * return this token and remove the token sequence from the end of\n+   * buffer.\n+   * @return The matching token.\n+   */\n+  Token tokenMatches()\n+  {\n+    Token rt = endMatches(buffer);\n+    if (rt != null) // Remove the matched image\n+      {\n+        // Consume future character if it was an entity and the future\n+        // character is semicolon.\n+        if (rt.kind == ENTITY)\n+          {\n+            if (buffer.charAt(buffer.length() - 1) == ';')\n+              buffer.setLength(buffer.length() - rt.getImage().length() - 1);\n+            else\n+              {\n+                error(\"Missing closing semicolon for entity '\" + rt.getImage() +\n+                      \"'\", rt\n+                     );\n+                consumeBuffer(rt);\n+              }\n+          }\n+        else\n+          {\n+            consumeBuffer(rt);\n+          }\n+      }\n+\n+    // If the buffer is not empty, some sequence does not match any tokens.\n+    // Add it to the queue as \"OTHER\".\n+    if (rt != null)\n+      {\n+        if (buffer.length() > 1)\n+          {\n+            String rest = buffer.toString();\n+            rest = rest.substring(0, rest.length() - 1);\n+\n+            Token other =\n+              new Token(OTHER, rest, buffer.getLocation(0, buffer.length));\n+            queue.add(other);\n+            consumeBuffer(other);\n+          }\n+        queue.add(rt);\n+      }\n+    return rt;\n+  }\n+\n+  private void consumeBuffer(Token rt)\n+  {\n+    buffer.delete(buffer.length() - rt.getImage().length() - 1,\n+                  buffer.length() - 1\n+                 );\n+  }\n+\n+  /**\n+   * Create EOF token.\n+   */\n+  private Token eofToken()\n+  {\n+    return new Token(EOF, \"#\", new Location(readerPosition));\n+  }\n+}"}, {"sha": "c298d78171def01dd9d0f1f86eb1099190e53d4d", "filename": "libjava/gnu/javax/swing/text/html/parser/support/low/Token.java", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Flow%2FToken.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Flow%2FToken.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Flow%2FToken.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,169 @@\n+/* Token.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.javax.swing.text.html.parser.support.low;\n+\n+/**\n+ * A token.\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class Token\n+{\n+  /**\n+   * The place of this token in the document.\n+   */\n+  public Location where;\n+\n+  /**\n+   * The additional category of token.\n+   */\n+  public int category;\n+\n+  /**\n+   * An integer that describes the kind of this token.\n+   */\n+  public int kind;\n+\n+  /**\n+   * The string image of the token, null if the char image must be used.\n+   */\n+  private String stringImage;\n+\n+  /**\n+   * The char image of the token.\n+   */\n+  private char charImage;\n+\n+  /**\n+   * Creates a new token with fields, initialized to the default values.\n+   */\n+  public Token()\n+  {\n+  }\n+\n+  /**\n+   * Creates a new token of the given kind.\n+   */\n+  public Token(int _kind, Location _where)\n+  {\n+    kind = _kind;\n+    where = _where;\n+  }\n+\n+  /**\n+   * Creates a new token of the given kind and given single char image.\n+   */\n+  public Token(int _kind, char _image, Location _where)\n+  {\n+    kind = _kind;\n+    charImage = _image;\n+    where = _where;\n+  }\n+\n+  /**\n+   * Creates a new token of the given kind and given string image.\n+   */\n+  public Token(int _kind, String _image, Location _where)\n+  {\n+    kind = _kind;\n+    stringImage = _image;\n+    where = _where;\n+  }\n+\n+  /**\n+   * Creates a new token of the given kind, category and given string image.\n+   */\n+  public Token(int _kind, int _category, String _image, Location _where)\n+  {\n+    kind = _kind;\n+    category = _category;\n+    stringImage = _image;\n+    where = _where;\n+  }\n+\n+  /**\n+   * Creates a new token, where location fields are set as for token,\n+   * spanning over two provided tokens and any tokens between them.\n+   * The image field is initialized to null, the kind field is set to -1.\n+   */\n+  public Token(Token fromInclusive, Token toInclusive)\n+  {\n+    where = new Location();\n+    where.beginLine = fromInclusive.where.beginLine;\n+    where.startPosition = fromInclusive.where.startPosition;\n+\n+    where.endLine = toInclusive.where.endLine;\n+    where.endPosition = toInclusive.where.endPosition;\n+  }\n+\n+  public String getImage()\n+  {\n+    if (kind == 3)\n+      return \"#\";\n+    if (stringImage == null)\n+      {\n+        if (charImage == 0)\n+          return null;\n+        stringImage = new String(new char[] { charImage });\n+      }\n+    return stringImage;\n+  }\n+\n+  /**\n+   * Append the token image to the given string buffer.\n+   * This may be more effective that buffer.append(this.getImage()).\n+   * @param buffer A buffer to append.\n+   */\n+  public void appendTo(StringBuffer buffer)\n+  {\n+    if (charImage == 0)\n+      buffer.append(getImage());\n+    else\n+      buffer.append(charImage);\n+  }\n+\n+  /**\n+   * Returns the string image or, if null, the bounding positions.\n+   */\n+  public String toString()\n+  {\n+    return getImage() != null ? kind + \"'\" + getImage()\n+           : \"<line \" + where.beginLine + \", abs pos \" + where.startPosition +\n+           \"..\" + where.endPosition + \">\";\n+  }\n+}"}, {"sha": "981166562ce2512878e8d415fa93ad7c802b1b7a", "filename": "libjava/gnu/javax/swing/text/html/parser/support/low/node.java", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Flow%2Fnode.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Flow%2Fnode.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Flow%2Fnode.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,78 @@\n+/* node.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.javax.swing.text.html.parser.support.low;\n+\n+/**\n+ * A text level content model node. The only required unary operations\n+ * here are \"appears\" and \"optionally appears\" ('?').\n+ * <p>@author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)</p>\n+ */\n+public class node\n+{\n+  /**\n+   * True for node that is optional for the given position.\n+   */\n+  public boolean optional;\n+\n+  /**\n+   * The kind of the token to match.\n+   */\n+  public int kind;\n+\n+  /**\n+   * Creates the new node for matching a given kind of the token.\n+   * @param kind The kind of the token to match.\n+   * @param modifier The modifier (*?+).\n+   */\n+  public node(int kind, boolean _optional)\n+  {\n+    this.kind = kind;\n+    optional = _optional;\n+  }\n+\n+  /**\n+   * Creates the node, indicating that token must match exactluy one time.\n+   * @param kind The kind of token to match.\n+   */\n+  public node(int kind)\n+  {\n+    this.kind = kind;\n+    optional = false;\n+  }\n+}"}, {"sha": "a4ae57bffc5c8ff0732e5875a248edeecb6e061a", "filename": "libjava/gnu/javax/swing/text/html/parser/support/low/package.html", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Flow%2Fpackage.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Flow%2Fpackage.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Flow%2Fpackage.html?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,47 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n+<!-- package.html - describes classes in javax.swing.text.html.parser package.\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. -->\n+\n+<html>\n+<head><title>GNU Classpath - gnu.javax.swing.text.html.parser.support.low</title></head>\n+\n+<body>\n+<p>This package contains classes that are directly used to process\n+the text input: adapted stream tokenizer, specialized buffer and text-level content models .</p>\n+@author Audrius Meskauskas, Lithuania\n+</body>\n+</html>"}, {"sha": "ac82a205046a632b05d8cda107b32ba484ed4e62", "filename": "libjava/gnu/javax/swing/text/html/parser/support/low/pattern.java", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Flow%2Fpattern.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Flow%2Fpattern.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Flow%2Fpattern.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,105 @@\n+/* pattern.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.javax.swing.text.html.parser.support.low;\n+\n+\n+/**\n+ * The simple pattern, consisting from the sequence of tokens that\n+ * may have the unary modifier '?'. Choices and grouping\n+ * are not required here.\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class pattern\n+{\n+  /**\n+   * The nodes of this pattern.\n+   */\n+  public final node[] nodes;\n+\n+  /**\n+   * Create a pattern, containing the given list of nodes.\n+   * @param a_nodes\n+   */\n+  public pattern(node[] a_nodes)\n+  {\n+    nodes = a_nodes;\n+  }\n+\n+  /**\n+   * Checks if the pattern can match the tokens in this\n+   * tokenizer. Does not change the state of tokenizer.\n+   * @param stream The tokenizer to read data from\n+   * @return True if the pattern sequence matches the\n+   * beginning of the tokenizer content.\n+   */\n+  public boolean matches(ReaderTokenizer stream)\n+  {\n+    try\n+      {\n+        int pt = 0;\n+        int pn = 0;\n+        Token t;\n+        node n;\n+\n+        while (pn < nodes.length)\n+          {\n+            n = nodes [ pn ];\n+            t = stream.getTokenAhead(pt);\n+\n+            if (t.kind == n.kind)\n+              {\n+                pn++;\n+                pt++;\n+              }\n+            else\n+              {\n+                if (!n.optional)\n+                  return false;\n+                else\n+                  pn++;\n+              }\n+          }\n+        return true;\n+      }\n+    catch (Exception ex)\n+      {\n+        throw new ParseException(\"Exception\", ex);\n+      }\n+  }\n+}"}, {"sha": "35071ed00ca240c7e91674bb874c645022d19936", "filename": "libjava/gnu/javax/swing/text/html/parser/support/package.html", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Fpackage.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Fpackage.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2Fpackage.html?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,47 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n+<!-- package.html - describes classes in javax.swing.text.html.parser package.\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. -->\n+\n+<html>\n+<head><title>GNU Classpath - gnu.javax.swing.text.html.parser.support</title></head>\n+\n+<body>\n+<p>This package provides various specialised classes, needed by HTML parser.\n+</p>\n+@author Audrius Meskauskas, Lithuania\n+</body>\n+</html>"}, {"sha": "4b4878a7918e8839560ed2742b7258836bc14e5f", "filename": "libjava/gnu/javax/swing/text/html/parser/support/parameterDefaulter.java", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2FparameterDefaulter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2FparameterDefaulter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2FparameterDefaulter.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,106 @@\n+/* parameterDefaulter.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.javax.swing.text.html.parser.support;\n+\n+import gnu.javax.swing.text.html.parser.htmlAttributeSet;\n+\n+import java.util.Hashtable;\n+\n+import javax.swing.text.html.parser.AttributeList;\n+import javax.swing.text.html.parser.DTD;\n+import javax.swing.text.html.parser.Element;\n+\n+/**\n+ * Returns an attribute set, containing default\n+ * parameters for the given element. Caches sets of default\n+ * parameters.\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class parameterDefaulter\n+{\n+  public final DTD dtd;\n+  Hashtable sets = new Hashtable();\n+\n+  /**\n+   * Create a parameterDefaulter that looks for the default attribute\n+   * values in the given DTD.\n+   * @param a_dtd\n+   */\n+  public parameterDefaulter(DTD a_dtd)\n+  {\n+    dtd = a_dtd;\n+  }\n+\n+  /**\n+   * Get the default parameter set for the given element.\n+   * @param element The element name (case insensitive).\n+   * @return the default attrbute set.\n+   */\n+  public htmlAttributeSet getDefaultParameters(String element)\n+  {\n+    String key = element.toLowerCase();\n+    htmlAttributeSet atts = (htmlAttributeSet) sets.get(key);\n+\n+    if (atts == null)\n+      {\n+        htmlAttributeSet set = new htmlAttributeSet();\n+        Element e = (Element) dtd.elementHash.get(element.toLowerCase());\n+\n+        if (e != null)\n+          {\n+            AttributeList a = e.getAttributes();\n+\n+            while (a != null)\n+              {\n+                if (a.value != null)\n+                  set.addAttribute(a.name, a.value);\n+                a = a.next;\n+              }\n+          }\n+\n+        if (set.getAttributeCount() > 0)\n+          sets.put(key, set);\n+        else\n+          sets.put(key, htmlAttributeSet.EMPTY_HTML_ATTRIBUTE_SET);\n+\n+        atts = set;\n+      }\n+    return atts;\n+  }\n+}"}, {"sha": "20af8f6352c0dc4b24d9f9dccca28106afe80a91", "filename": "libjava/gnu/javax/swing/text/html/parser/support/textPreProcessor.java", "status": "added", "additions": 193, "deletions": 0, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2FtextPreProcessor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2FtextPreProcessor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2FtextPreProcessor.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,193 @@\n+/* textPreProcessor.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.javax.swing.text.html.parser.support;\n+\n+import gnu.javax.swing.text.html.parser.support.low.Constants;\n+\n+/**\n+ * Pre - processes text in text parts of the html document.\n+ * Not thread - safe.\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class textPreProcessor\n+{\n+  /**\n+   * Pre - process non-preformatted text.\n+   * \\t, \\r and \\n mutate into spaces, then multiple spaces mutate\n+   * into single one, all whitespace around tags is consumed.\n+   * The content of the passed buffer is destroyed.\n+   * @param text A text to pre-process.\n+   */\n+  public char[] preprocess(StringBuffer a_text)\n+  {\n+    if (a_text.length() == 0)\n+      return null;\n+\n+    char[] text = toCharArray(a_text);\n+\n+    int a = 0;\n+    int b = text.length - 1;\n+\n+    try\n+      {\n+        while (Constants.bWHITESPACE.get(text [ a ]))\n+          a++;\n+        while (Constants.bWHITESPACE.get(text [ b ]))\n+          b--;\n+      }\n+    catch (ArrayIndexOutOfBoundsException sx)\n+      {\n+        // A text fragment, consisting from line breaks only.\n+        return null;\n+      }\n+\n+    a_text.setLength(0);\n+\n+    boolean spacesWere = false;\n+    boolean spaceNow;\n+    char c;\n+\n+    chars: \n+    for (int i = a; i <= b; i++)\n+      {\n+        c = text [ i ];\n+        spaceNow = Constants.bWHITESPACE.get(c);\n+        if (spacesWere && spaceNow)\n+          continue chars;\n+        if (spaceNow)\n+          a_text.append(' ');\n+        else\n+          a_text.append(c);\n+        spacesWere = spaceNow;\n+      }\n+\n+    if (a_text.length() == text.length)\n+      {\n+        a_text.getChars(0, a_text.length(), text, 0);\n+        return text;\n+      }\n+    else\n+      return toCharArray(a_text);\n+  }\n+\n+  /**\n+   * Pre - process pre-formatted text.\n+   * Heading/closing spaces and tabs preserved.\n+   * ONE  bounding \\r, \\n or \\r\\n is removed.\n+   * \\r or \\r\\n mutate into \\n. Tabs are\n+   * preserved.\n+   * The content of the passed buffer is destroyed.\n+   * @param text\n+   * @return\n+   */\n+  public char[] preprocessPreformatted(StringBuffer a_text)\n+  {\n+    if (a_text.length() == 0)\n+      return null;\n+\n+    char[] text = toCharArray(a_text);\n+\n+    int a = 0;\n+    int n = text.length - 1;\n+    int b = n;\n+\n+    if (text [ 0 ] == '\\n')\n+      a++;\n+    else\n+      {\n+        if (text [ 0 ] == '\\r')\n+          {\n+            a++;\n+            if (text.length > 1 && text [ 1 ] == '\\n')\n+              a++;\n+          }\n+      }\n+\n+    if (text [ n ] == '\\r')\n+      b--;\n+    else\n+      {\n+        if (text [ n ] == '\\n')\n+          {\n+            b--;\n+            if (n > 0 && text [ n - 1 ] == '\\r')\n+              b--;\n+          }\n+      }\n+\n+    a_text.setLength(0);\n+\n+    if (a > b)\n+      return null;\n+\n+    char c;\n+\n+    for (int i = a; i <= b; i++)\n+      {\n+        c = text [ i ];\n+        if (c == '\\r')\n+          {\n+            if (i == b || text [ i + 1 ] != '\\n')\n+              a_text.append('\\n');\n+          }\n+        else\n+          a_text.append(c);\n+      }\n+\n+    if (a_text.length() == text.length)\n+      {\n+        a_text.getChars(0, a_text.length(), text, 0);\n+        return text;\n+      }\n+    else\n+      return toCharArray(a_text);\n+  }\n+\n+  /**\n+   * Return array of chars, present in the given buffer.\n+   * @param a_text The buffer\n+   * @return\n+   */\n+  private static char[] toCharArray(StringBuffer a_text)\n+  {\n+    char[] text = new char[ a_text.length() ];\n+    a_text.getChars(0, text.length, text, 0);\n+    return text;\n+  }\n+}"}, {"sha": "a23f57d931cfa7099e3bf491a4ea5f0a9c8307e7", "filename": "libjava/gnu/xml/dom/DomImpl.java", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2FDomImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2FDomImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2FDomImpl.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -47,6 +47,7 @@\n import org.w3c.dom.ls.LSOutput;\n import org.w3c.dom.ls.LSParser;\n import org.w3c.dom.ls.LSSerializer;\n+import gnu.xml.dom.html2.DomHTMLImpl;\n import gnu.xml.dom.ls.DomLSInput;\n import gnu.xml.dom.ls.DomLSOutput;\n import gnu.xml.dom.ls.DomLSParser;\n@@ -150,6 +151,12 @@ else if (\"xpath\".equals(name))\n                 \"\".equals(version) ||\n                 \"3.0\".equals(version));\n       }\n+    else if (\"html\".equals(name) || \"xhtml\".equals(name))\n+      {\n+        return (version == null ||\n+                \"\".equals(version) ||\n+                \"2.0\".equals(version));\n+      }\n \n     // views\n     // stylesheets\n@@ -199,7 +206,7 @@ public Document createDocument(String namespaceURI,\n                                  String rootName,\n                                  DocumentType doctype)\n   {\n-    Document doc = new DomDocument(this);\n+    Document doc = createDocument();\n     Element root = null;\n     \n     if (rootName != null)\n@@ -223,12 +230,22 @@ public Document createDocument(String namespaceURI,\n     return doc;\n   }\n \n+  protected Document createDocument()\n+  {\n+    return new DomDocument(this);\n+  }\n+\n   // DOM Level 3\n   \n   public Object getFeature(String feature, String version)\n   {\n     if (hasFeature(feature, version))\n       {\n+        if (\"html\".equalsIgnoreCase(feature) ||\n+            \"xhtml\".equalsIgnoreCase(feature))\n+          {\n+            return new DomHTMLImpl();\n+          }\n         return this;\n       }\n     return null;"}, {"sha": "625fa6c93cb2e67982944c9676bd488547f69dd5", "filename": "libjava/gnu/xml/dom/html2/DomHTMLAnchorElement.java", "status": "added", "additions": 189, "deletions": 0, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLAnchorElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLAnchorElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLAnchorElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,189 @@\n+/* DomHTMLAnchorElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLAnchorElement;\n+\n+/**\n+ * An HTML 'A' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLAnchorElement\n+  extends DomHTMLElement\n+  implements HTMLAnchorElement\n+{\n+\n+  protected DomHTMLAnchorElement(DomHTMLDocument owner, String namespaceURI,\n+                                 String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public String getAccessKey()\n+  {\n+    return getHTMLAttribute(\"accesskey\");\n+  }\n+\n+  public void setAccessKey(String accessKey)\n+  {\n+    setHTMLAttribute(\"accesskey\", accessKey);\n+  }\n+  \n+  public String getCharset()\n+  {\n+    return getHTMLAttribute(\"charset\");\n+  }\n+\n+  public void setCharset(String charset)\n+  {\n+    setHTMLAttribute(\"charset\", charset);\n+  }\n+  \n+  public String getCoords()\n+  {\n+    return getHTMLAttribute(\"coords\");\n+  }\n+\n+  public void setCoords(String coords)\n+  {\n+    setHTMLAttribute(\"coords\", coords);\n+  }\n+  \n+  public String getHref()\n+  {\n+    return getHTMLAttribute(\"href\");\n+  }\n+\n+  public void setHref(String href)\n+  {\n+    setHTMLAttribute(\"href\", href);\n+  }\n+  \n+  public String getHreflang()\n+  {\n+    return getHTMLAttribute(\"hreflang\");\n+  }\n+\n+  public void setHreflang(String hreflang)\n+  {\n+    setHTMLAttribute(\"hreflang\", hreflang);\n+  }\n+  \n+  public String getName()\n+  {\n+    return getHTMLAttribute(\"name\");\n+  }\n+\n+  public void setName(String name)\n+  {\n+    setHTMLAttribute(\"name\", name);\n+  }\n+  \n+  public String getRel()\n+  {\n+    return getHTMLAttribute(\"rel\");\n+  }\n+\n+  public void setRel(String rel)\n+  {\n+    setHTMLAttribute(\"rel\", rel);\n+  }\n+  \n+  public String getRev()\n+  {\n+    return getHTMLAttribute(\"rev\");\n+  }\n+\n+  public void setRev(String rev)\n+  {\n+    setHTMLAttribute(\"rev\", rev);\n+  }\n+  \n+  public String getShape()\n+  {\n+    return getHTMLAttribute(\"shape\");\n+  }\n+\n+  public void setShape(String shape)\n+  {\n+    setHTMLAttribute(\"shape\", shape);\n+  }\n+  \n+  public int getTabIndex()\n+  {\n+    return getIntHTMLAttribute(\"tabindex\");\n+  }\n+\n+  public void setTabIndex(int tabIndex)\n+  {\n+    setIntHTMLAttribute(\"tabindex\", tabIndex);\n+  }\n+  \n+  public String getTarget()\n+  {\n+    return getHTMLAttribute(\"target\");\n+  }\n+\n+  public void setTarget(String target)\n+  {\n+    setHTMLAttribute(\"target\", target);\n+  }\n+  \n+  public String getType()\n+  {\n+    return getHTMLAttribute(\"type\");\n+  }\n+\n+  public void setType(String type)\n+  {\n+    setHTMLAttribute(\"type\", type);\n+  }\n+\n+  public void blur()\n+  {\n+    dispatchUIEvent(\"blur\");\n+  }\n+\n+  public void focus()\n+  {\n+    dispatchUIEvent(\"focus\");\n+  }\n+  \n+}\n+"}, {"sha": "39bc4061a4967cfbf1e1c5b680aa89952b1615b4", "filename": "libjava/gnu/xml/dom/html2/DomHTMLAppletElement.java", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLAppletElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLAppletElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLAppletElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,169 @@\n+/* DomHTMLAppletElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLAppletElement;\n+\n+/**\n+ * An HTML 'APPLET' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLAppletElement\n+  extends DomHTMLElement\n+  implements HTMLAppletElement\n+{\n+\n+  protected DomHTMLAppletElement(DomHTMLDocument owner, String namespaceURI,\n+                                 String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public String getAlign()\n+  {\n+    return getHTMLAttribute(\"align\");\n+  }\n+\n+  public void setAlign(String align)\n+  {\n+    setHTMLAttribute(\"align\", align);\n+  }\n+  \n+  public String getAlt()\n+  {\n+    return getHTMLAttribute(\"alt\");\n+  }\n+\n+  public void setAlt(String alt)\n+  {\n+    setHTMLAttribute(\"alt\", alt);\n+  }\n+  \n+  public String getArchive()\n+  {\n+    return getHTMLAttribute(\"archive\");\n+  }\n+\n+  public void setArchive(String archive)\n+  {\n+    setHTMLAttribute(\"archive\", archive);\n+  }\n+  \n+  public String getCode()\n+  {\n+    return getHTMLAttribute(\"code\");\n+  }\n+\n+  public void setCode(String code)\n+  {\n+    setHTMLAttribute(\"code\", code);\n+  }\n+  \n+  public String getCodeBase()\n+  {\n+    return getHTMLAttribute(\"codebase\");\n+  }\n+\n+  public void setCodeBase(String codeBase)\n+  {\n+    setHTMLAttribute(\"codebase\", codeBase);\n+  }\n+  \n+  public String getHeight()\n+  {\n+    return getHTMLAttribute(\"height\");\n+  }\n+\n+  public void setHeight(String height)\n+  {\n+    setHTMLAttribute(\"height\", height);\n+  }\n+  \n+  public int getHspace()\n+  {\n+    return getIntHTMLAttribute(\"hspace\");\n+  }\n+\n+  public void setHspace(int hspace)\n+  {\n+    setIntHTMLAttribute(\"hspace\", hspace);\n+  }\n+  \n+  public String getName()\n+  {\n+    return getHTMLAttribute(\"name\");\n+  }\n+\n+  public void setName(String name)\n+  {\n+    setHTMLAttribute(\"name\", name);\n+  }\n+  \n+  public String getObject()\n+  {\n+    return getHTMLAttribute(\"object\");\n+  }\n+\n+  public void setObject(String object)\n+  {\n+    setHTMLAttribute(\"object\", object);\n+  }\n+  \n+  public int getVspace()\n+  {\n+    return getIntHTMLAttribute(\"vspace\");\n+  }\n+\n+  public void setVspace(int vspace)\n+  {\n+    setIntHTMLAttribute(\"vspace\", vspace);\n+  }\n+  \n+  public String getWidth()\n+  {\n+    return getHTMLAttribute(\"width\");\n+  }\n+\n+  public void setWidth(String width)\n+  {\n+    setHTMLAttribute(\"width\", width);\n+  }\n+  \n+}\n+"}, {"sha": "10229fe2c7c2780d696fed967fc9189eb87261c9", "filename": "libjava/gnu/xml/dom/html2/DomHTMLAreaElement.java", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLAreaElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLAreaElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLAreaElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,139 @@\n+/* DomHTMLAreaElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLAreaElement;\n+\n+/**\n+ * An HTML 'AREA' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLAreaElement\n+  extends DomHTMLElement\n+  implements HTMLAreaElement\n+{\n+\n+  protected DomHTMLAreaElement(DomHTMLDocument owner, String namespaceURI,\n+                               String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public String getAccessKey()\n+  {\n+    return getHTMLAttribute(\"accesskey\");\n+  }\n+\n+  public void setAccessKey(String accessKey)\n+  {\n+    setHTMLAttribute(\"accesskey\", accessKey);\n+  }\n+  \n+  public String getAlt()\n+  {\n+    return getHTMLAttribute(\"alt\");\n+  }\n+\n+  public void setAlt(String alt)\n+  {\n+    setHTMLAttribute(\"alt\", alt);\n+  }\n+  \n+  public String getCoords()\n+  {\n+    return getHTMLAttribute(\"coords\");\n+  }\n+\n+  public void setCoords(String coords)\n+  {\n+    setHTMLAttribute(\"coords\", coords);\n+  }\n+  \n+  public String getHref()\n+  {\n+    return getHTMLAttribute(\"href\");\n+  }\n+\n+  public void setHref(String href)\n+  {\n+    setHTMLAttribute(\"href\", href);\n+  }\n+  \n+  public boolean getNoHref()\n+  {\n+    return getBooleanHTMLAttribute(\"nohref\");\n+  }\n+\n+  public void setNoHref(boolean nohref)\n+  {\n+    setBooleanHTMLAttribute(\"nohref\", nohref);\n+  }\n+  \n+  public String getShape()\n+  {\n+    return getHTMLAttribute(\"shape\");\n+  }\n+\n+  public void setShape(String shape)\n+  {\n+    setHTMLAttribute(\"shape\", shape);\n+  }\n+  \n+  public int getTabIndex()\n+  {\n+    return getIntHTMLAttribute(\"tabindex\");\n+  }\n+\n+  public void setTabIndex(int tabIndex)\n+  {\n+    setIntHTMLAttribute(\"tabindex\", tabIndex);\n+  }\n+  \n+  public String getTarget()\n+  {\n+    return getHTMLAttribute(\"target\");\n+  }\n+\n+  public void setTarget(String target)\n+  {\n+    setHTMLAttribute(\"target\", target);\n+  }\n+  \n+}\n+"}, {"sha": "d02ad22cafb21f574b94b19bda95784e9d50e3db", "filename": "libjava/gnu/xml/dom/html2/DomHTMLBRElement.java", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLBRElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLBRElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLBRElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,69 @@\n+/* DomHTMLBRElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLBRElement;\n+\n+/**\n+ * An HTML 'BR' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLBRElement\n+  extends DomHTMLElement\n+  implements HTMLBRElement\n+{\n+\n+  protected DomHTMLBRElement(DomHTMLDocument owner, String namespaceURI,\n+                             String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public String getClear()\n+  {\n+    return getHTMLAttribute(\"clear\");\n+  }\n+\n+  public void setClear(String clear)\n+  {\n+    setHTMLAttribute(\"clear\", clear);\n+  }\n+  \n+}\n+"}, {"sha": "a7b241aadd1f0ac5e683f1f300f685af3dab4263", "filename": "libjava/gnu/xml/dom/html2/DomHTMLBaseElement.java", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLBaseElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLBaseElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLBaseElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,79 @@\n+/* DomHTMLBaseElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLBaseElement;\n+\n+/**\n+ * An HTML 'BASE' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLBaseElement\n+  extends DomHTMLElement\n+  implements HTMLBaseElement\n+{\n+\n+  protected DomHTMLBaseElement(DomHTMLDocument owner, String namespaceURI,\n+                               String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public String getHref()\n+  {\n+    return getHTMLAttribute(\"href\");\n+  }\n+\n+  public void setHref(String href)\n+  {\n+    setHTMLAttribute(\"href\", href);\n+  }\n+  \n+  public String getTarget()\n+  {\n+    return getHTMLAttribute(\"target\");\n+  }\n+\n+  public void setTarget(String target)\n+  {\n+    setHTMLAttribute(\"target\", target);\n+  }\n+  \n+}\n+"}, {"sha": "0d64f445ed5cd94da32ede1d09646e265371a595", "filename": "libjava/gnu/xml/dom/html2/DomHTMLBaseFontElement.java", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLBaseFontElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLBaseFontElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLBaseFontElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,89 @@\n+/* DomHTMLBaseFontElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLBaseFontElement;\n+\n+/**\n+ * An HTML 'BASEFONT' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLBaseFontElement\n+  extends DomHTMLElement\n+  implements HTMLBaseFontElement\n+{\n+\n+  protected DomHTMLBaseFontElement(DomHTMLDocument owner, String namespaceURI,\n+                                   String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public String getColor()\n+  {\n+    return getHTMLAttribute(\"color\");\n+  }\n+\n+  public void setColor(String color)\n+  {\n+    setHTMLAttribute(\"color\", color);\n+  }\n+  \n+  public String getFace()\n+  {\n+    return getHTMLAttribute(\"face\");\n+  }\n+\n+  public void setFace(String face)\n+  {\n+    setHTMLAttribute(\"face\", face);\n+  }\n+  \n+  public int getSize()\n+  {\n+    return getIntHTMLAttribute(\"size\");\n+  }\n+\n+  public void setSize(int size)\n+  {\n+    setIntHTMLAttribute(\"size\", size);\n+  }\n+  \n+}\n+"}, {"sha": "efcd855b317351e825c68fce487c4b45fa6fce96", "filename": "libjava/gnu/xml/dom/html2/DomHTMLBodyElement.java", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLBodyElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLBodyElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLBodyElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,119 @@\n+/* DomHTMLBodyElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLBodyElement;\n+\n+/**\n+ * An HTML 'BODY' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLBodyElement\n+  extends DomHTMLElement\n+  implements HTMLBodyElement\n+{\n+\n+  protected DomHTMLBodyElement(DomHTMLDocument owner, String namespaceURI,\n+                               String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public String getALink()\n+  {\n+    return getHTMLAttribute(\"alink\");\n+  }\n+\n+  public void setALink(String alink)\n+  {\n+    setHTMLAttribute(\"alink\", alink);\n+  }\n+  \n+  public String getBackground()\n+  {\n+    return getHTMLAttribute(\"background\");\n+  }\n+\n+  public void setBackground(String background)\n+  {\n+    setHTMLAttribute(\"background\", background);\n+  }\n+  \n+  public String getBgColor()\n+  {\n+    return getHTMLAttribute(\"bgcolor\");\n+  }\n+\n+  public void setBgColor(String bgcolor)\n+  {\n+    setHTMLAttribute(\"bgcolor\", bgcolor);\n+  }\n+  \n+  public String getLink()\n+  {\n+    return getHTMLAttribute(\"link\");\n+  }\n+\n+  public void setLink(String link)\n+  {\n+    setHTMLAttribute(\"link\", link);\n+  }\n+  \n+  public String getText()\n+  {\n+    return getHTMLAttribute(\"text\");\n+  }\n+\n+  public void setText(String text)\n+  {\n+    setHTMLAttribute(\"text\", text);\n+  }\n+  \n+  public String getVLink()\n+  {\n+    return getHTMLAttribute(\"vlink\");\n+  }\n+\n+  public void setVLink(String vlink)\n+  {\n+    setHTMLAttribute(\"vlink\", vlink);\n+  }\n+  \n+}\n+"}, {"sha": "996750ea6c669ec3cc1493b253b1c7d97d7c1eaa", "filename": "libjava/gnu/xml/dom/html2/DomHTMLButtonElement.java", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLButtonElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLButtonElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLButtonElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,121 @@\n+/* DomHTMLButtonElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.Node;\n+import org.w3c.dom.html2.HTMLButtonElement;\n+import org.w3c.dom.html2.HTMLFormElement;\n+\n+/**\n+ * An HTML 'BUTTON' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLButtonElement\n+  extends DomHTMLElement\n+  implements HTMLButtonElement\n+{\n+\n+  protected DomHTMLButtonElement(DomHTMLDocument owner, String namespaceURI,\n+                                 String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public HTMLFormElement getForm()\n+  {\n+    return (HTMLFormElement) getParentElement(\"form\");\n+  }\n+\n+  public String getAccessKey()\n+  {\n+    return getHTMLAttribute(\"accesskey\");\n+  }\n+\n+  public void setAccessKey(String accessKey)\n+  {\n+    setHTMLAttribute(\"accesskey\", accessKey);\n+  }\n+  \n+  public boolean getDisabled()\n+  {\n+    return getBooleanHTMLAttribute(\"disabled\");\n+  }\n+\n+  public void setDisabled(boolean disabled)\n+  {\n+    setBooleanHTMLAttribute(\"disabled\", disabled);\n+  }\n+  \n+  public String getName()\n+  {\n+    return getHTMLAttribute(\"name\");\n+  }\n+\n+  public void setName(String name)\n+  {\n+    setHTMLAttribute(\"name\", name);\n+  }\n+  \n+  public int getTabIndex()\n+  {\n+    return getIntHTMLAttribute(\"tabindex\");\n+  }\n+\n+  public void setTabIndex(int tabIndex)\n+  {\n+    setIntHTMLAttribute(\"tabindex\", tabIndex);\n+  }\n+\n+  public String getType()\n+  {\n+    return getHTMLAttribute(\"type\");\n+  }\n+  \n+  public String getValue()\n+  {\n+    return getHTMLAttribute(\"value\");\n+  }\n+\n+  public void setValue(String value)\n+  {\n+    setHTMLAttribute(\"value\", value);\n+  }\n+  \n+}\n+"}, {"sha": "da9d0142e395e4dc2e3b7c26bd96948490a0d930", "filename": "libjava/gnu/xml/dom/html2/DomHTMLCollection.java", "status": "added", "additions": 218, "deletions": 0, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLCollection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLCollection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLCollection.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,218 @@\n+/* DomHTMLCollection.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import gnu.xml.dom.DomDOMException;\n+import gnu.xml.dom.DomElement;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import org.w3c.dom.DOMException;\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.html2.HTMLCollection;\n+import org.w3c.dom.html2.HTMLOptionsCollection;\n+import org.w3c.dom.traversal.NodeFilter;\n+import org.w3c.dom.traversal.NodeIterator;\n+\n+/**\n+ * An HTML element collection.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+class DomHTMLCollection\n+  implements HTMLCollection, HTMLOptionsCollection, NodeList, NodeFilter\n+{\n+\n+  final DomHTMLDocument doc;\n+  final Node root;\n+  List nodeNames;\n+  List attributeNames;\n+  List results;\n+\n+  DomHTMLCollection(DomHTMLDocument doc, Node root)\n+  {\n+    this.doc = doc;\n+    this.root = root;\n+  }\n+\n+  // -- Node name and attribute filtering --\n+\n+  void addNodeName(String name)\n+  {\n+    if (nodeNames == null)\n+      {\n+        nodeNames = new LinkedList();\n+      }\n+    nodeNames.add(name);\n+  }\n+\n+  void addAttributeName(String name)\n+  {\n+    if (attributeNames == null)\n+      {\n+        attributeNames = new LinkedList();\n+      }\n+    attributeNames.add(name);\n+  }\n+\n+  public short acceptNode(Node n)\n+  {\n+    if (n.getNodeType() != Node.ELEMENT_NODE)\n+      {\n+        return NodeFilter.FILTER_SKIP;\n+      }\n+    if (nodeNames != null && !acceptName(n.getLocalName()))\n+      {\n+        return NodeFilter.FILTER_SKIP;\n+      }\n+    if (attributeNames != null && !acceptAttributes(n.getAttributes()))\n+      {\n+        return NodeFilter.FILTER_SKIP;\n+      }\n+    return NodeFilter.FILTER_ACCEPT;\n+  }\n+\n+  private boolean acceptName(String name)\n+  {\n+    for (Iterator i = nodeNames.iterator(); i.hasNext(); )\n+      {\n+        String nodeName = (String) i.next();\n+        if (nodeName.equalsIgnoreCase(name))\n+          {\n+            return true;\n+          }\n+      }\n+    return false;\n+  }\n+\n+  private boolean acceptAttributes(NamedNodeMap attrs)\n+  {\n+    for (Iterator i = attributeNames.iterator(); i.hasNext(); )\n+      {\n+        String attributeName = (String) i.next();\n+        Node attr = getNamedItem(attrs, attributeName);\n+        if (attr != null)\n+          {\n+            // Check that attribute has a non-null value\n+            String nodeValue = attr.getNodeValue();\n+            if (nodeValue != null && nodeValue.length() > 0)\n+              {\n+                return true;\n+              }\n+          }\n+      }\n+    return false;\n+  }\n+\n+  /**\n+   * Case-insensitive version of getNamedItem.\n+   */\n+  private Node getNamedItem(NamedNodeMap attrs, String name)\n+  {\n+    int len = attrs.getLength();\n+    for (int i = 0; i < len; i++)\n+      {\n+        Node attr = attrs.item(i);\n+        String attrName = attr.getLocalName();\n+        if (name.equalsIgnoreCase(attrName))\n+          {\n+            return attr;\n+          }\n+      }\n+    return null;\n+  }\n+\n+  // -- Perform query --\n+\n+  void evaluate()\n+  {\n+    NodeIterator i = doc.createNodeIterator(root, NodeFilter.SHOW_ELEMENT,\n+                                            this, true);\n+    results = new ArrayList();\n+    for (Node node = i.nextNode(); node != null; node = i.nextNode())\n+      {\n+        results.add(node);\n+      }\n+  }\n+\n+  // -- HTMLCollection/NodeList interface --\n+\n+  public int getLength()\n+  {\n+    return results.size();\n+  }\n+\n+  public void setLength(int length)\n+  {\n+    throw new DomDOMException(DOMException.NOT_SUPPORTED_ERR);\n+  }\n+\n+  public Node item(int index)\n+  {\n+    return (Node) results.get(index);\n+  }\n+\n+  public Node namedItem(String name)\n+  {\n+    boolean xhtml = false; // FIXME detect XHTML document\n+    for (Iterator i = results.iterator(); i.hasNext(); )\n+      {\n+        Node node = (Node) i.next();\n+        NamedNodeMap attrs = node.getAttributes();\n+        Node attr = getNamedItem(attrs, \"id\");\n+        if (name.equals(attr.getTextContent()))\n+          {\n+            return node;\n+          }\n+        if (!xhtml)\n+          {\n+            attr = getNamedItem(attrs, \"name\");\n+            if (name.equals(attr.getTextContent()))\n+              {\n+                return node;\n+              }\n+          }\n+      }\n+    return null;\n+  }\n+  \n+}\n+"}, {"sha": "790e3081aec58029d1af088c7adc9cdb31f55f4f", "filename": "libjava/gnu/xml/dom/html2/DomHTMLDListElement.java", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLDListElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLDListElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLDListElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,69 @@\n+/* DomHTMLDListElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLDListElement;\n+\n+/**\n+ * An HTML 'DL' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLDListElement\n+  extends DomHTMLElement\n+  implements HTMLDListElement\n+{\n+\n+  protected DomHTMLDListElement(DomHTMLDocument owner, String namespaceURI,\n+                                String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public boolean getCompact()\n+  {\n+    return getBooleanHTMLAttribute(\"compact\");\n+  }\n+\n+  public void setCompact(boolean compact)\n+  {\n+    setBooleanHTMLAttribute(\"compact\", compact);\n+  }\n+  \n+}\n+"}, {"sha": "0f71f960ba4efc5538150bbc2fa016894462c02c", "filename": "libjava/gnu/xml/dom/html2/DomHTMLDirectoryElement.java", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLDirectoryElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLDirectoryElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLDirectoryElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,69 @@\n+/* DomHTMLDirectoryElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLDirectoryElement;\n+\n+/**\n+ * An HTML 'DIR' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLDirectoryElement\n+  extends DomHTMLElement\n+  implements HTMLDirectoryElement\n+{\n+\n+  protected DomHTMLDirectoryElement(DomHTMLDocument owner, String namespaceURI,\n+                                    String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public boolean getCompact()\n+  {\n+    return getBooleanHTMLAttribute(\"compact\");\n+  }\n+\n+  public void setCompact(boolean compact)\n+  {\n+    setBooleanHTMLAttribute(\"compact\", compact);\n+  }\n+  \n+}\n+"}, {"sha": "a35a5fb936043989145f73f7476b66410658dab0", "filename": "libjava/gnu/xml/dom/html2/DomHTMLDivElement.java", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLDivElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLDivElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLDivElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,69 @@\n+/* DomHTMLDivElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLDivElement;\n+\n+/**\n+ * An HTML 'DIV' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLDivElement\n+  extends DomHTMLElement\n+  implements HTMLDivElement\n+{\n+\n+  protected DomHTMLDivElement(DomHTMLDocument owner, String namespaceURI,\n+                              String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public String getAlign()\n+  {\n+    return getHTMLAttribute(\"align\");\n+  }\n+\n+  public void setAlign(String align)\n+  {\n+    setHTMLAttribute(\"align\", align);\n+  }\n+  \n+}\n+"}, {"sha": "1ff0a27edf5f9c3ae48c17e9c4d64f08d42e8714", "filename": "libjava/gnu/xml/dom/html2/DomHTMLDocument.java", "status": "added", "additions": 425, "deletions": 0, "changes": 425, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLDocument.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLDocument.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLDocument.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,425 @@\n+/* DomHTMLDocument.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import gnu.xml.dom.DomDocument;\n+import gnu.xml.dom.DomDOMException;\n+import java.lang.reflect.Constructor;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import org.w3c.dom.DOMException;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.html2.HTMLCollection;\n+import org.w3c.dom.html2.HTMLDocument;\n+import org.w3c.dom.html2.HTMLElement;\n+\n+/**\n+ * An HTML document.\n+ * This is the factory object used to create HTML elements.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLDocument\n+  extends DomDocument\n+  implements HTMLDocument\n+{\n+\n+  private static final Class[] ELEMENT_PT = new Class[] {\n+    DomHTMLDocument.class,\n+    String.class,\n+    String.class\n+  };\n+\n+  private static Map ELEMENT_CLASSES;\n+  static\n+  {\n+    Map map = new HashMap();\n+    map.put(\"a\", DomHTMLAnchorElement.class);\n+    map.put(\"applet\", DomHTMLAppletElement.class);\n+    map.put(\"area\", DomHTMLAreaElement.class);\n+    map.put(\"base\", DomHTMLBaseElement.class);\n+    map.put(\"basefont\", DomHTMLBaseFontElement.class);\n+    map.put(\"body\", DomHTMLBodyElement.class);\n+    map.put(\"br\", DomHTMLBRElement.class);\n+    map.put(\"button\", DomHTMLButtonElement.class);\n+    map.put(\"dir\", DomHTMLDirectoryElement.class);\n+    map.put(\"div\", DomHTMLDivElement.class);\n+    map.put(\"dlist\", DomHTMLDListElement.class);\n+    map.put(\"fieldset\", DomHTMLFieldSetElement.class);\n+    map.put(\"font\", DomHTMLFontElement.class);\n+    map.put(\"form\", DomHTMLFormElement.class);\n+    map.put(\"frame\", DomHTMLFrameElement.class);\n+    map.put(\"frameset\", DomHTMLFrameSetElement.class);\n+    map.put(\"head\", DomHTMLHeadElement.class);\n+    map.put(\"h1\", DomHTMLHeadingElement.class);\n+    map.put(\"h2\", DomHTMLHeadingElement.class);\n+    map.put(\"h3\", DomHTMLHeadingElement.class);\n+    map.put(\"h4\", DomHTMLHeadingElement.class);\n+    map.put(\"h5\", DomHTMLHeadingElement.class);\n+    map.put(\"h6\", DomHTMLHeadingElement.class);\n+    map.put(\"html\", DomHTMLHtmlElement.class);\n+    map.put(\"iframe\", DomHTMLIFrameElement.class);\n+    map.put(\"img\", DomHTMLImageElement.class);\n+    map.put(\"input\", DomHTMLInputElement.class);\n+    map.put(\"isindex\", DomHTMLIsIndexElement.class);\n+    map.put(\"label\", DomHTMLLabelElement.class);\n+    map.put(\"legend\", DomHTMLLegendElement.class);\n+    map.put(\"li\", DomHTMLLIElement.class);\n+    map.put(\"link\", DomHTMLLinkElement.class);\n+    map.put(\"map\", DomHTMLMapElement.class);\n+    map.put(\"menu\", DomHTMLMenuElement.class);\n+    map.put(\"meta\", DomHTMLMetaElement.class);\n+    map.put(\"ins\", DomHTMLModElement.class);\n+    map.put(\"del\", DomHTMLModElement.class);\n+    map.put(\"object\", DomHTMLObjectElement.class);\n+    map.put(\"ol\", DomHTMLOListElement.class);\n+    map.put(\"optgroup\", DomHTMLOptGroupElement.class);\n+    map.put(\"option\", DomHTMLOptionElement.class);\n+    map.put(\"p\", DomHTMLParagraphElement.class);\n+    map.put(\"param\", DomHTMLParamElement.class);\n+    map.put(\"pre\", DomHTMLPreElement.class);\n+    map.put(\"q\", DomHTMLQuoteElement.class);\n+    map.put(\"blockquote\", DomHTMLQuoteElement.class);\n+    map.put(\"script\", DomHTMLScriptElement.class);\n+    map.put(\"select\", DomHTMLSelectElement.class);\n+    map.put(\"style\", DomHTMLStyleElement.class);\n+    map.put(\"caption\", DomHTMLTableCaptionElement.class);\n+    map.put(\"th\", DomHTMLTableCellElement.class);\n+    map.put(\"td\", DomHTMLTableCellElement.class);\n+    map.put(\"col\", DomHTMLTableColElement.class);\n+    map.put(\"colgroup\", DomHTMLTableColElement.class);\n+    map.put(\"table\", DomHTMLTableElement.class);\n+    map.put(\"tr\", DomHTMLTableRowElement.class);\n+    map.put(\"thead\", DomHTMLTableSectionElement.class);\n+    map.put(\"tfoot\", DomHTMLTableSectionElement.class);\n+    map.put(\"tbody\", DomHTMLTableSectionElement.class);\n+    map.put(\"textarea\", DomHTMLTextAreaElement.class);\n+    map.put(\"title\", DomHTMLTitleElement.class);\n+    map.put(\"ul\", DomHTMLUListElement.class);\n+    ELEMENT_CLASSES = Collections.unmodifiableMap(map);\n+  }\n+\n+  private static Set HTML_NS_URIS;\n+  static\n+  {\n+    Set set = new HashSet();\n+    set.add(\"http://www.w3.org/TR/html4/strict\");\n+    set.add(\"http://www.w3.org/TR/html4/loose\");\n+    set.add(\"http://www.w3.org/TR/html4/frameset\");\n+    set.add(\"http://www.w3.org/1999/xhtml\");\n+    set.add(\"http://www.w3.org/TR/xhtml1/strict\");\n+    set.add(\"http://www.w3.org/TR/xhtml1/loose\");\n+    set.add(\"http://www.w3.org/TR/xhtml1/frameset\");\n+    HTML_NS_URIS = Collections.unmodifiableSet(set);\n+  }\n+\n+  /**\n+   * Convenience constructor.\n+   */\n+  public DomHTMLDocument()\n+  {\n+    this(new DomHTMLImpl());\n+  }\n+\n+  /**\n+   * Constructor.\n+   * This is called by the DOMImplementation.\n+   */\n+  public DomHTMLDocument(DomHTMLImpl impl)\n+  {\n+    super(impl);\n+  }\n+\n+  private Node getChildNodeByName(Node parent, String name)\n+  {\n+    for (Node ctx = parent.getFirstChild(); ctx != null;\n+         ctx = ctx.getNextSibling())\n+      {\n+        if (name.equalsIgnoreCase(ctx.getNodeName()))\n+          {\n+            return ctx;\n+          }\n+      }\n+    return null;\n+  }\n+\n+  public String getTitle()\n+  {\n+    Node html = getDocumentElement();\n+    if (html != null)\n+      {\n+        Node head = getChildNodeByName(html, \"head\");\n+        if (head != null)\n+          {\n+            Node title = getChildNodeByName(head, \"title\");\n+            if (title != null)\n+              {\n+                return title.getTextContent();\n+              }\n+          }\n+      }\n+    return null;\n+  }\n+\n+  public void setTitle(String title)\n+  {\n+    Node html = getDocumentElement();\n+    if (html == null)\n+      {\n+        html = createElement(\"html\");\n+        appendChild(html);\n+      }\n+    Node head = getChildNodeByName(html, \"head\");\n+    if (head == null)\n+      {\n+        head = createElement(\"head\");\n+        Node first = html.getFirstChild();\n+        if (first != null)\n+          {\n+            html.insertBefore(first, head);\n+          }\n+        else\n+          {\n+            html.appendChild(head);\n+          }\n+      }\n+    Node titleNode = getChildNodeByName(head, \"title\");\n+    if (titleNode == null)\n+      {\n+        titleNode = createElement(\"title\");\n+        Node first = head.getFirstChild();\n+        if (first != null)\n+          {\n+            head.insertBefore(first, titleNode);\n+          }\n+        else\n+          {\n+            head.appendChild(titleNode);\n+          }\n+      }\n+    titleNode.setTextContent(title);\n+  }\n+\n+  public String getReferrer()\n+  {\n+    // TODO getReferrer\n+    return null;\n+  }\n+\n+  public String getDomain()\n+  {\n+    try\n+      {\n+        URL url = new URL(getDocumentURI());\n+        return url.getHost();\n+      }\n+    catch (MalformedURLException e)\n+      {\n+        return null;\n+      }\n+  }\n+\n+  public String getURL()\n+  {\n+    return getDocumentURI();\n+  }\n+\n+  public HTMLElement getBody()\n+  {\n+    Node html = getDocumentElement();\n+    if (html != null)\n+      {\n+        Node body = getChildNodeByName(html, \"body\");\n+        if (body == null)\n+          {\n+            body = getChildNodeByName(html, \"frameset\");\n+          }\n+        return (HTMLElement) body;\n+      }\n+    return null;\n+  }\n+\n+  public void setBody(HTMLElement body)\n+  {\n+    Node html = getDocumentElement();\n+    if (html == null)\n+      {\n+        html = createElement(\"html\");\n+        appendChild(html);\n+      }\n+    Node ref = getBody();\n+    if (ref == null)\n+      {\n+        html.appendChild(body);\n+      }\n+    else\n+      {\n+        html.replaceChild(body, ref);\n+      }\n+  }\n+\n+  public HTMLCollection getImages()\n+  {\n+    DomHTMLCollection ret = new DomHTMLCollection(this, this);\n+    ret.addNodeName(\"img\");\n+    ret.evaluate();\n+    return ret;\n+  }\n+\n+  public HTMLCollection getApplets()\n+  {\n+    DomHTMLCollection ret = new DomHTMLCollection(this, this);\n+    ret.addNodeName(\"object\");\n+    ret.addNodeName(\"applet\");\n+    ret.evaluate();\n+    return ret;\n+  }\n+\n+  public HTMLCollection getLinks()\n+  {\n+    DomHTMLCollection ret = new DomHTMLCollection(this, this);\n+    ret.addNodeName(\"area\");\n+    ret.addNodeName(\"a\");\n+    ret.evaluate();\n+    return ret;\n+  }\n+\n+  public HTMLCollection getForms()\n+  {\n+    DomHTMLCollection ret = new DomHTMLCollection(this, this);\n+    ret.addNodeName(\"form\");\n+    ret.evaluate();\n+    return ret;\n+  }\n+\n+  public HTMLCollection getAnchors()\n+  {\n+    DomHTMLCollection ret = new DomHTMLCollection(this, this);\n+    ret.addNodeName(\"a\");\n+    ret.addAttributeName(\"name\");\n+    ret.evaluate();\n+    return ret;\n+  }\n+\n+  public String getCookie()\n+  {\n+    // TODO getCookie\n+    return null;\n+  }\n+\n+  public void setCookie(String cookie)\n+  {\n+    // TODO setCookie\n+  }\n+\n+  public void open()\n+  {\n+    // TODO open\n+  }\n+\n+  public void close()\n+  {\n+    // TODO close\n+  }\n+\n+  public void write(String text)\n+  {\n+    // TODO write\n+  }\n+\n+  public void writeln(String text)\n+  {\n+    // TODO write\n+  }\n+\n+  public NodeList getElementsByName(String name)\n+  {\n+    DomHTMLCollection ret = new DomHTMLCollection(this, this);\n+    ret.addNodeName(name);\n+    ret.evaluate();\n+    return ret;\n+    // TODO xhtml: return only form controls (?)\n+  }\n+\n+  public Element createElement(String tagName)\n+  {\n+    return createElementNS(null, tagName);\n+  }\n+\n+  public Element createElementNS(String uri, String qName)\n+  {\n+    /* If a non-HTML element, use the default implementation. */\n+    if (uri != null && !HTML_NS_URIS.contains(uri))\n+      {\n+        return super.createElementNS(uri, qName);\n+      }\n+    String localName = qName.toLowerCase();\n+    int ci = qName.indexOf(':');\n+    if (ci != -1)\n+      {\n+        localName = qName.substring(ci + 1);\n+      }\n+    Class t = (Class) ELEMENT_CLASSES.get(localName);\n+    /* If a non-HTML element, use the default implementation. */\n+    if (t == null)\n+      {\n+        return super.createElementNS(uri, qName);\n+      }\n+    try\n+      {\n+        Constructor c = t.getDeclaredConstructor(ELEMENT_PT);\n+        Object[] args = new Object[] { this, uri, qName };\n+        return (Element) c.newInstance(args);\n+      }\n+    catch (Exception e)\n+      {\n+        DOMException e2 = new DomDOMException(DOMException.TYPE_MISMATCH_ERR);\n+        e2.initCause(e);\n+        throw e2;\n+      }\n+  }\n+\n+}\n+"}, {"sha": "b2952e8b49b4bd79ce233036c9afa279e07aa090", "filename": "libjava/gnu/xml/dom/html2/DomHTMLElement.java", "status": "added", "additions": 269, "deletions": 0, "changes": 269, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,269 @@\n+/* DomHTMLElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import gnu.xml.dom.DomDOMException;\n+import gnu.xml.dom.DomElement;\n+import gnu.xml.dom.DomEvent;\n+import org.w3c.dom.DOMException;\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.events.UIEvent;\n+import org.w3c.dom.html2.HTMLElement;\n+\n+/**\n+ * Abstract implementation of an HTML element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public abstract class DomHTMLElement\n+  extends DomElement\n+  implements HTMLElement\n+{\n+\n+  protected DomHTMLElement(DomHTMLDocument owner, String namespaceURI,\n+                           String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  /**\n+   * Returns the value of the specified attribute.\n+   * The attribute name is case insensitive.\n+   */\n+  protected String getHTMLAttribute(String name)\n+  {\n+    if (hasAttributes())\n+      {\n+        NamedNodeMap attrs = getAttributes();\n+        int len = attrs.getLength();\n+        for (int i = 0; i < len; i++)\n+          {\n+            Node attr = attrs.item(i);\n+            String attrName = attr.getLocalName();\n+            if (attrName.equalsIgnoreCase(name))\n+              {\n+                return attr.getNodeValue();\n+              }\n+          }\n+      }\n+    return \"\";\n+  }\n+\n+  protected int getIntHTMLAttribute(String name)\n+  {\n+    String value = getHTMLAttribute(name);\n+    if (value == null)\n+      {\n+        return -1;\n+      }\n+    try\n+      {\n+        return Integer.parseInt(value);\n+      }\n+    catch (NumberFormatException e)\n+      {\n+        return -1;\n+      }\n+  }\n+\n+  protected boolean getBooleanHTMLAttribute(String name)\n+  {\n+    String value = getHTMLAttribute(name);\n+    return value != null;\n+  }\n+\n+  /**\n+   * Sets the value of the specified attribute.\n+   * The attribute name is case insensitive.\n+   */\n+  protected void setHTMLAttribute(String name, String value)\n+  {\n+    Node attr;\n+    NamedNodeMap attrs = getAttributes();\n+    int len = attrs.getLength();\n+    for (int i = 0; i < len; i++)\n+      {\n+        attr = attrs.item(i);\n+        String attrName = attr.getLocalName();\n+        if (attrName.equalsIgnoreCase(name))\n+          {\n+            if (value != null)\n+              {\n+                attr.setNodeValue(value);\n+              }\n+            else\n+              {\n+                attrs.removeNamedItem(attr.getNodeName());\n+              }\n+            return;\n+          }\n+      }\n+    if (value != null)\n+      {\n+        // Create a new attribute\n+        DomHTMLDocument doc = (DomHTMLDocument) getOwnerDocument();\n+        // XXX namespace URI for attribute?\n+        attr = doc.createAttribute(name);\n+        attr.setNodeValue(value);\n+      }\n+  }\n+\n+  protected void setIntHTMLAttribute(String name, int value)\n+  {\n+    setHTMLAttribute(name, Integer.toString(value));\n+  }\n+\n+  protected void setBooleanHTMLAttribute(String name, boolean value)\n+  {\n+    setHTMLAttribute(name, value ? name : null);\n+  }\n+\n+  /**\n+   * Returns the first parent element with the specified name.\n+   */\n+  protected Node getParentElement(String name)\n+  {\n+    for (Node parent = getParentNode(); parent != null;\n+         parent = parent.getParentNode())\n+      {\n+        if (name.equalsIgnoreCase(parent.getLocalName()))\n+          {\n+            return parent;\n+          }\n+      }\n+    return null;\n+  }\n+\n+  /**\n+   * Returns the first child element with the specified name.\n+   */\n+  protected Node getChildElement(String name)\n+  {\n+    for (Node child = getFirstChild(); child != null;\n+         child = child.getNextSibling())\n+      {\n+        if (name.equalsIgnoreCase(child.getLocalName()))\n+          {\n+            return child;\n+          }\n+      }\n+    return null;\n+  }\n+\n+  /**\n+   * Returns the index of this element among elements of the same name,\n+   * relative to its parent.\n+   */\n+  protected int getIndex()\n+  {\n+    int index = 0;\n+    Node parent = getParentNode();\n+    if (parent != null)\n+      {\n+        for (Node ctx = parent.getFirstChild(); ctx != null;\n+             ctx = ctx.getNextSibling())\n+          {\n+            if (ctx == this)\n+              {\n+                return index;\n+              }\n+            index++;\n+          }\n+      }\n+    throw new DomDOMException(DOMException.NOT_FOUND_ERR);\n+  }\n+\n+  protected void dispatchUIEvent(String name)\n+  {\n+    UIEvent event = new DomEvent.DomUIEvent(name);\n+    dispatchEvent(event);\n+  }\n+\n+  public String getId()\n+  {\n+    return getHTMLAttribute(\"id\");\n+  }\n+\n+  public void setId(String id)\n+  {\n+    setHTMLAttribute(\"id\", id);\n+  }\n+  \n+  public String getTitle()\n+  {\n+    return getHTMLAttribute(\"title\");\n+  }\n+\n+  public void setTitle(String title)\n+  {\n+    setHTMLAttribute(\"title\", title);\n+  }\n+  \n+  public String getLang()\n+  {\n+    return getHTMLAttribute(\"lang\");\n+  }\n+\n+  public void setLang(String lang)\n+  {\n+    setHTMLAttribute(\"lang\", lang);\n+  }\n+  \n+  public String getDir()\n+  {\n+    return getHTMLAttribute(\"dir\");\n+  }\n+\n+  public void setDir(String dir)\n+  {\n+    setHTMLAttribute(\"dir\", dir);\n+  }\n+  \n+  public String getClassName()\n+  {\n+    return getHTMLAttribute(\"class\");\n+  }\n+\n+  public void setClassName(String className)\n+  {\n+    setHTMLAttribute(\"class\", className);\n+  }\n+  \n+}\n+"}, {"sha": "2e49fe47437629af76076a2e3a5f0a5aa0fe97d9", "filename": "libjava/gnu/xml/dom/html2/DomHTMLFieldSetElement.java", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLFieldSetElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLFieldSetElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLFieldSetElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,65 @@\n+/* DomHTMLFieldSetElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLFieldSetElement;\n+import org.w3c.dom.html2.HTMLFormElement;\n+\n+/**\n+ * An HTML 'FIELDSET' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLFieldSetElement\n+  extends DomHTMLElement\n+  implements HTMLFieldSetElement\n+{\n+\n+  protected DomHTMLFieldSetElement(DomHTMLDocument owner, String namespaceURI,\n+                                   String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public HTMLFormElement getForm()\n+  {\n+    return (HTMLFormElement) getParentElement(\"form\");\n+  }\n+\n+}\n+"}, {"sha": "3fd1d98e70df14f75df30d88eff86be451079377", "filename": "libjava/gnu/xml/dom/html2/DomHTMLFontElement.java", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLFontElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLFontElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLFontElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,89 @@\n+/* DomHTMLFontElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLFontElement;\n+\n+/**\n+ * An HTML 'FONT' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLFontElement\n+  extends DomHTMLElement\n+  implements HTMLFontElement\n+{\n+\n+  protected DomHTMLFontElement(DomHTMLDocument owner, String namespaceURI,\n+                               String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public String getColor()\n+  {\n+    return getHTMLAttribute(\"color\");\n+  }\n+\n+  public void setColor(String color)\n+  {\n+    setHTMLAttribute(\"color\", color);\n+  }\n+  \n+  public String getFace()\n+  {\n+    return getHTMLAttribute(\"face\");\n+  }\n+\n+  public void setFace(String face)\n+  {\n+    setHTMLAttribute(\"face\", face);\n+  }\n+  \n+  public String getSize()\n+  {\n+    return getHTMLAttribute(\"size\");\n+  }\n+\n+  public void setSize(String size)\n+  {\n+    setHTMLAttribute(\"size\", size);\n+  }\n+  \n+}\n+"}, {"sha": "0785cc989bacf3e71e768cfda3b42a670ae4b5bd", "filename": "libjava/gnu/xml/dom/html2/DomHTMLFormElement.java", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLFormElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLFormElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLFormElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,150 @@\n+/* DomHTMLFormElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLCollection;\n+import org.w3c.dom.html2.HTMLFormElement;\n+\n+/**\n+ * An HTML 'FORM' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLFormElement\n+  extends DomHTMLElement\n+  implements HTMLFormElement\n+{\n+\n+  protected DomHTMLFormElement(DomHTMLDocument owner, String namespaceURI,\n+                               String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public HTMLCollection getElements()\n+  {\n+    DomHTMLCollection ret =\n+      new DomHTMLCollection((DomHTMLDocument) getOwnerDocument(), this);\n+    ret.addNodeName(\"input\");\n+    ret.addNodeName(\"button\");\n+    ret.addNodeName(\"select\");\n+    ret.addNodeName(\"textarea\");\n+    ret.addNodeName(\"isindex\");\n+    ret.addNodeName(\"label\");\n+    ret.addNodeName(\"option\");\n+    ret.evaluate();\n+    return ret;\n+  }\n+\n+  public int getLength()\n+  {\n+    return getElements().getLength();\n+  }\n+\n+  public String getName()\n+  {\n+    return getHTMLAttribute(\"name\");\n+  }\n+\n+  public void setName(String name)\n+  {\n+    setHTMLAttribute(\"name\", name);\n+  }\n+  \n+  public String getAcceptCharset()\n+  {\n+    return getHTMLAttribute(\"accept-charset\");\n+  }\n+\n+  public void setAcceptCharset(String acceptCharset)\n+  {\n+    setHTMLAttribute(\"accept-charset\", acceptCharset);\n+  }\n+  \n+  public String getAction()\n+  {\n+    return getHTMLAttribute(\"action\");\n+  }\n+\n+  public void setAction(String action)\n+  {\n+    setHTMLAttribute(\"action\", action);\n+  }\n+  \n+  public String getEnctype()\n+  {\n+    return getHTMLAttribute(\"enctype\");\n+  }\n+\n+  public void setEnctype(String enctype)\n+  {\n+    setHTMLAttribute(\"enctype\", enctype);\n+  }\n+  \n+  public String getMethod()\n+  {\n+    return getHTMLAttribute(\"method\");\n+  }\n+\n+  public void setMethod(String method)\n+  {\n+    setHTMLAttribute(\"method\", method);\n+  }\n+  \n+  public String getTarget()\n+  {\n+    return getHTMLAttribute(\"target\");\n+  }\n+\n+  public void setTarget(String target)\n+  {\n+    setHTMLAttribute(\"target\", target);\n+  }\n+\n+  public void submit()\n+  {\n+    dispatchUIEvent(\"submit\");\n+  }\n+\n+  public void reset()\n+  {\n+    dispatchUIEvent(\"reset\");\n+  }\n+  \n+}\n+"}, {"sha": "db3cbfe0063b4a444f2ea4816a0f32e18ec3bf89", "filename": "libjava/gnu/xml/dom/html2/DomHTMLFrameElement.java", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLFrameElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLFrameElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLFrameElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,146 @@\n+/* DomHTMLFrameElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.html2.HTMLFrameElement;\n+\n+/**\n+ * An HTML 'FRAME' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLFrameElement\n+  extends DomHTMLElement\n+  implements HTMLFrameElement\n+{\n+\n+  protected DomHTMLFrameElement(DomHTMLDocument owner, String namespaceURI,\n+                                String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public String getFrameBorder()\n+  {\n+    return getHTMLAttribute(\"frameborder\");\n+  }\n+\n+  public void setFrameBorder(String frameBorder)\n+  {\n+    setHTMLAttribute(\"frameborder\", frameBorder);\n+  }\n+  \n+  public String getLongDesc()\n+  {\n+    return getHTMLAttribute(\"longdesc\");\n+  }\n+\n+  public void setLongDesc(String longDesc)\n+  {\n+    setHTMLAttribute(\"longdesc\", longDesc);\n+  }\n+  \n+  public String getMarginHeight()\n+  {\n+    return getHTMLAttribute(\"marginheight\");\n+  }\n+\n+  public void setMarginHeight(String marginHeight)\n+  {\n+    setHTMLAttribute(\"marginheight\", marginHeight);\n+  }\n+  \n+  public String getMarginWidth()\n+  {\n+    return getHTMLAttribute(\"marginwidth\");\n+  }\n+\n+  public void setMarginWidth(String marginWidth)\n+  {\n+    setHTMLAttribute(\"marginwidth\", marginWidth);\n+  }\n+  \n+  public String getName()\n+  {\n+    return getHTMLAttribute(\"name\");\n+  }\n+\n+  public void setName(String name)\n+  {\n+    setHTMLAttribute(\"name\", name);\n+  }\n+  \n+  public boolean getNoResize()\n+  {\n+    return getBooleanHTMLAttribute(\"noresize\");\n+  }\n+\n+  public void setNoResize(boolean noResize)\n+  {\n+    setBooleanHTMLAttribute(\"noresize\", noResize);\n+  }\n+  \n+  public String getScrolling()\n+  {\n+    return getHTMLAttribute(\"scrolling\");\n+  }\n+\n+  public void setScrolling(String scrolling)\n+  {\n+    setHTMLAttribute(\"scrolling\", scrolling);\n+  }\n+  \n+  public String getSrc()\n+  {\n+    return getHTMLAttribute(\"src\");\n+  }\n+\n+  public void setSrc(String src)\n+  {\n+    setHTMLAttribute(\"src\", src);\n+  }\n+\n+  public Document getContentDocument()\n+  {\n+    // TODO getContentDocument\n+    return null;\n+  }\n+  \n+}\n+"}, {"sha": "8e5eb3312535249e9372e72e1ef750fb276c266c", "filename": "libjava/gnu/xml/dom/html2/DomHTMLFrameSetElement.java", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLFrameSetElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLFrameSetElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLFrameSetElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,79 @@\n+/* DomHTMLFrameSetElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLFrameSetElement;\n+\n+/**\n+ * An HTML 'FRAMESET' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLFrameSetElement\n+  extends DomHTMLElement\n+  implements HTMLFrameSetElement\n+{\n+\n+  protected DomHTMLFrameSetElement(DomHTMLDocument owner, String namespaceURI,\n+                                   String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public String getCols()\n+  {\n+    return getHTMLAttribute(\"cols\");\n+  }\n+\n+  public void setCols(String cols)\n+  {\n+    setHTMLAttribute(\"cols\", cols);\n+  }\n+  \n+  public String getRows()\n+  {\n+    return getHTMLAttribute(\"rows\");\n+  }\n+\n+  public void setRows(String rows)\n+  {\n+    setHTMLAttribute(\"rows\", rows);\n+  }\n+  \n+}\n+"}, {"sha": "850907b8e43e719b1b09bde92841283e0be1ef37", "filename": "libjava/gnu/xml/dom/html2/DomHTMLHRElement.java", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLHRElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLHRElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLHRElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,99 @@\n+/* DomHTMLHRElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLHRElement;\n+\n+/**\n+ * An HTML 'HR' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLHRElement\n+  extends DomHTMLElement\n+  implements HTMLHRElement\n+{\n+\n+  protected DomHTMLHRElement(DomHTMLDocument owner, String namespaceURI,\n+                             String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public String getAlign()\n+  {\n+    return getHTMLAttribute(\"align\");\n+  }\n+\n+  public void setAlign(String align)\n+  {\n+    setHTMLAttribute(\"align\", align);\n+  }\n+  \n+  public boolean getNoShade()\n+  {\n+    return getBooleanHTMLAttribute(\"noshade\");\n+  }\n+\n+  public void setNoShade(boolean noShade)\n+  {\n+    setBooleanHTMLAttribute(\"noshade\", noShade);\n+  }\n+  \n+  public String getSize()\n+  {\n+    return getHTMLAttribute(\"size\");\n+  }\n+\n+  public void setSize(String size)\n+  {\n+    setHTMLAttribute(\"size\", size);\n+  }\n+  \n+  public String getWidth()\n+  {\n+    return getHTMLAttribute(\"width\");\n+  }\n+\n+  public void setWidth(String width)\n+  {\n+    setHTMLAttribute(\"width\", width);\n+  }\n+  \n+}\n+"}, {"sha": "d6072a0709ac30d2014e502f590de425b98ed90d", "filename": "libjava/gnu/xml/dom/html2/DomHTMLHeadElement.java", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLHeadElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLHeadElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLHeadElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,69 @@\n+/* DomHTMLHeadElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLHeadElement;\n+\n+/**\n+ * An HTML 'HEAD' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLHeadElement\n+  extends DomHTMLElement\n+  implements HTMLHeadElement\n+{\n+\n+  protected DomHTMLHeadElement(DomHTMLDocument owner, String namespaceURI,\n+                               String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public String getProfile()\n+  {\n+    return getHTMLAttribute(\"profile\");\n+  }\n+\n+  public void setProfile(String profile)\n+  {\n+    setHTMLAttribute(\"profile\", profile);\n+  }\n+  \n+}\n+"}, {"sha": "a336e31e92c5dd4f24012e8ca227fc886e1ec7cc", "filename": "libjava/gnu/xml/dom/html2/DomHTMLHeadingElement.java", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLHeadingElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLHeadingElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLHeadingElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,69 @@\n+/* DomHTMLHeadingElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLHeadingElement;\n+\n+/**\n+ * An HTML 'H1', 'H2', 'H3', 'H4', 'H5', or 'H6' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLHeadingElement\n+  extends DomHTMLElement\n+  implements HTMLHeadingElement\n+{\n+\n+  protected DomHTMLHeadingElement(DomHTMLDocument owner, String namespaceURI,\n+                                  String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public String getAlign()\n+  {\n+    return getHTMLAttribute(\"align\");\n+  }\n+\n+  public void setAlign(String align)\n+  {\n+    setHTMLAttribute(\"align\", align);\n+  }\n+  \n+}\n+"}, {"sha": "6a4e195f676146caba091ad135cb6c37a7f07019", "filename": "libjava/gnu/xml/dom/html2/DomHTMLHtmlElement.java", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLHtmlElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLHtmlElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLHtmlElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,69 @@\n+/* DomHTMLHtmlElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLHtmlElement;\n+\n+/**\n+ * An HTML 'HTML' top-level element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLHtmlElement\n+  extends DomHTMLElement\n+  implements HTMLHtmlElement\n+{\n+\n+  protected DomHTMLHtmlElement(DomHTMLDocument owner, String namespaceURI,\n+                               String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public String getVersion()\n+  {\n+    return getHTMLAttribute(\"version\");\n+  }\n+\n+  public void setVersion(String version)\n+  {\n+    setHTMLAttribute(\"version\", version);\n+  }\n+  \n+}\n+"}, {"sha": "def7b967d4de3c64873bea0df56d2b3b1d793905", "filename": "libjava/gnu/xml/dom/html2/DomHTMLIFrameElement.java", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLIFrameElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLIFrameElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLIFrameElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,166 @@\n+/* DomHTMLIFrameElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.html2.HTMLIFrameElement;\n+\n+/**\n+ * An HTML 'IFRAME' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLIFrameElement\n+  extends DomHTMLElement\n+  implements HTMLIFrameElement\n+{\n+\n+  protected DomHTMLIFrameElement(DomHTMLDocument owner, String namespaceURI,\n+                                String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public String getAlign()\n+  {\n+    return getHTMLAttribute(\"align\");\n+  }\n+\n+  public void setAlign(String align)\n+  {\n+    setHTMLAttribute(\"align\", align);\n+  }\n+  \n+  public String getFrameBorder()\n+  {\n+    return getHTMLAttribute(\"frameborder\");\n+  }\n+\n+  public void setFrameBorder(String frameBorder)\n+  {\n+    setHTMLAttribute(\"frameborder\", frameBorder);\n+  }\n+  \n+  public String getHeight()\n+  {\n+    return getHTMLAttribute(\"height\");\n+  }\n+\n+  public void setHeight(String height)\n+  {\n+    setHTMLAttribute(\"height\", height);\n+  }\n+  \n+  public String getLongDesc()\n+  {\n+    return getHTMLAttribute(\"longdesc\");\n+  }\n+\n+  public void setLongDesc(String longDesc)\n+  {\n+    setHTMLAttribute(\"longdesc\", longDesc);\n+  }\n+  \n+  public String getMarginHeight()\n+  {\n+    return getHTMLAttribute(\"marginheight\");\n+  }\n+\n+  public void setMarginHeight(String marginHeight)\n+  {\n+    setHTMLAttribute(\"marginheight\", marginHeight);\n+  }\n+  \n+  public String getMarginWidth()\n+  {\n+    return getHTMLAttribute(\"marginwidth\");\n+  }\n+\n+  public void setMarginWidth(String marginWidth)\n+  {\n+    setHTMLAttribute(\"marginwidth\", marginWidth);\n+  }\n+  \n+  public String getName()\n+  {\n+    return getHTMLAttribute(\"name\");\n+  }\n+\n+  public void setName(String name)\n+  {\n+    setHTMLAttribute(\"name\", name);\n+  }\n+  \n+  public String getScrolling()\n+  {\n+    return getHTMLAttribute(\"scrolling\");\n+  }\n+\n+  public void setScrolling(String scrolling)\n+  {\n+    setHTMLAttribute(\"scrolling\", scrolling);\n+  }\n+  \n+  public String getSrc()\n+  {\n+    return getHTMLAttribute(\"src\");\n+  }\n+\n+  public void setSrc(String src)\n+  {\n+    setHTMLAttribute(\"src\", src);\n+  }\n+\n+  public String getWidth()\n+  {\n+    return getHTMLAttribute(\"width\");\n+  }\n+\n+  public void setWidth(String width)\n+  {\n+    setHTMLAttribute(\"width\", width);\n+  }\n+  \n+  public Document getContentDocument()\n+  {\n+    // TODO getContentDocument\n+    return null;\n+  }\n+  \n+}\n+"}, {"sha": "7a621a6db373e0123e41d344c80be9cd33b6f482", "filename": "libjava/gnu/xml/dom/html2/DomHTMLImageElement.java", "status": "added", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLImageElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLImageElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLImageElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,179 @@\n+/* DomHTMLImageElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLImageElement;\n+\n+/**\n+ * An HTML 'IMG' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLImageElement\n+  extends DomHTMLElement\n+  implements HTMLImageElement\n+{\n+\n+  protected DomHTMLImageElement(DomHTMLDocument owner, String namespaceURI,\n+                                String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public String getName()\n+  {\n+    return getHTMLAttribute(\"name\");\n+  }\n+\n+  public void setName(String name)\n+  {\n+    setHTMLAttribute(\"name\", name);\n+  }\n+  \n+  public String getAlign()\n+  {\n+    return getHTMLAttribute(\"align\");\n+  }\n+\n+  public void setAlign(String align)\n+  {\n+    setHTMLAttribute(\"align\", align);\n+  }\n+  \n+  public String getAlt()\n+  {\n+    return getHTMLAttribute(\"alt\");\n+  }\n+\n+  public void setAlt(String alt)\n+  {\n+    setHTMLAttribute(\"alt\", alt);\n+  }\n+  \n+  public String getBorder()\n+  {\n+    return getHTMLAttribute(\"border\");\n+  }\n+\n+  public void setBorder(String border)\n+  {\n+    setHTMLAttribute(\"border\", border);\n+  }\n+  \n+  public int getHeight()\n+  {\n+    return getIntHTMLAttribute(\"height\");\n+  }\n+\n+  public void setHeight(int height)\n+  {\n+    setIntHTMLAttribute(\"height\", height);\n+  }\n+  \n+  public int getHspace()\n+  {\n+    return getIntHTMLAttribute(\"hspace\");\n+  }\n+\n+  public void setHspace(int hspace)\n+  {\n+    setIntHTMLAttribute(\"hspace\", hspace);\n+  }\n+  \n+  public boolean getIsMap()\n+  {\n+    return getBooleanHTMLAttribute(\"ismap\");\n+  }\n+\n+  public void setIsMap(boolean isMap)\n+  {\n+    setBooleanHTMLAttribute(\"ismap\", isMap);\n+  }\n+  \n+  public String getLongDesc()\n+  {\n+    return getHTMLAttribute(\"longdesc\");\n+  }\n+\n+  public void setLongDesc(String longDesc)\n+  {\n+    setHTMLAttribute(\"longdesc\", longDesc);\n+  }\n+  \n+  public String getSrc()\n+  {\n+    return getHTMLAttribute(\"src\");\n+  }\n+\n+  public void setSrc(String src)\n+  {\n+    setHTMLAttribute(\"src\", src);\n+  }\n+\n+  public String getUseMap()\n+  {\n+    return getHTMLAttribute(\"usemap\");\n+  }\n+\n+  public void setUseMap(String useMap)\n+  {\n+    setHTMLAttribute(\"usemap\", useMap);\n+  }\n+  \n+  public int getVspace()\n+  {\n+    return getIntHTMLAttribute(\"vspace\");\n+  }\n+\n+  public void setVspace(int vspace)\n+  {\n+    setIntHTMLAttribute(\"vspace\", vspace);\n+  }\n+  \n+  public int getWidth()\n+  {\n+    return getIntHTMLAttribute(\"width\");\n+  }\n+\n+  public void setWidth(int width)\n+  {\n+    setIntHTMLAttribute(\"width\", width);\n+  }\n+  \n+}\n+"}, {"sha": "6f5538e71aa3ac114ffd0e52869280152d1e9a1c", "filename": "libjava/gnu/xml/dom/html2/DomHTMLImpl.java", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLImpl.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,67 @@\n+/* DomHTMLImpl.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import gnu.xml.dom.DomImpl;\n+import org.w3c.dom.Document;\n+\n+/**\n+ * Specialised DOMImplementation for creating HTML documents.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLImpl\n+  extends DomImpl\n+{\n+  \n+  protected Document createDocument()\n+  {\n+    return new DomHTMLDocument(this);\n+  }\n+\n+  public Object getFeature(String feature, String version)\n+  {\n+    if (hasFeature(feature, version))\n+      {\n+        return this;\n+      }\n+    return null;\n+  }\n+\n+}\n+"}, {"sha": "787be536af8e1b4110f891742bbd26676ab07087", "filename": "libjava/gnu/xml/dom/html2/DomHTMLInputElement.java", "status": "added", "additions": 266, "deletions": 0, "changes": 266, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLInputElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLInputElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLInputElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,266 @@\n+/* DomHTMLInputElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLFormElement;\n+import org.w3c.dom.html2.HTMLInputElement;\n+\n+/**\n+ * An HTML 'INPUT' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLInputElement\n+  extends DomHTMLElement\n+  implements HTMLInputElement\n+{\n+\n+  protected String value;\n+  protected Boolean checked;\n+\n+  protected DomHTMLInputElement(DomHTMLDocument owner, String namespaceURI,\n+                                String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public String getDefaultValue()\n+  {\n+    return getHTMLAttribute(\"value\");\n+  }\n+\n+  public void setDefaultValue(String defaultValue)\n+  {\n+    setHTMLAttribute(\"value\", defaultValue);\n+  }\n+  \n+  public boolean getDefaultChecked()\n+  {\n+    return getBooleanHTMLAttribute(\"checked\");\n+  }\n+\n+  public void setDefaultChecked(boolean defaultChecked)\n+  {\n+    setBooleanHTMLAttribute(\"checked\", defaultChecked);\n+  }\n+\n+  public HTMLFormElement getForm()\n+  {\n+    return (HTMLFormElement) getParentElement(\"form\");\n+  }\n+  \n+  public String getAccept()\n+  {\n+    return getHTMLAttribute(\"accept\");\n+  }\n+\n+  public void setAccept(String accept)\n+  {\n+    setHTMLAttribute(\"accept\", accept);\n+  }\n+  \n+  public String getAccessKey()\n+  {\n+    return getHTMLAttribute(\"accesskey\");\n+  }\n+\n+  public void setAccessKey(String accessKey)\n+  {\n+    setHTMLAttribute(\"accesskey\", accessKey);\n+  }\n+  \n+  public String getAlign()\n+  {\n+    return getHTMLAttribute(\"align\");\n+  }\n+\n+  public void setAlign(String align)\n+  {\n+    setHTMLAttribute(\"align\", align);\n+  }\n+  \n+  public String getAlt()\n+  {\n+    return getHTMLAttribute(\"alt\");\n+  }\n+\n+  public void setAlt(String alt)\n+  {\n+    setHTMLAttribute(\"alt\", alt);\n+  }\n+  \n+  public boolean getChecked()\n+  {\n+    if (checked == null)\n+      {\n+        checked = Boolean.valueOf(getDefaultChecked());\n+      }\n+    return checked.booleanValue();\n+  }\n+\n+  public void setChecked(boolean checked)\n+  {\n+    this.checked = Boolean.valueOf(checked);\n+  }\n+  \n+  public boolean getDisabled()\n+  {\n+    return getBooleanHTMLAttribute(\"disabled\");\n+  }\n+\n+  public void setDisabled(boolean disabled)\n+  {\n+    setBooleanHTMLAttribute(\"disabled\", disabled);\n+  }\n+  \n+  public int getMaxLength()\n+  {\n+    return getIntHTMLAttribute(\"maxLength\");\n+  }\n+\n+  public void setMaxLength(int maxLength)\n+  {\n+    setIntHTMLAttribute(\"maxLength\", maxLength);\n+  }\n+  \n+  public String getName()\n+  {\n+    return getHTMLAttribute(\"name\");\n+  }\n+\n+  public void setName(String name)\n+  {\n+    setHTMLAttribute(\"name\", name);\n+  }\n+  \n+  public boolean getReadOnly()\n+  {\n+    return getBooleanHTMLAttribute(\"readonly\");\n+  }\n+\n+  public void setReadOnly(boolean readOnly)\n+  {\n+    setBooleanHTMLAttribute(\"readonly\", readOnly);\n+  }\n+  \n+  public int getSize()\n+  {\n+    return getIntHTMLAttribute(\"size\");\n+  }\n+\n+  public void setSize(int size)\n+  {\n+    setIntHTMLAttribute(\"size\", size);\n+  }\n+  \n+  public String getSrc()\n+  {\n+    return getHTMLAttribute(\"src\");\n+  }\n+\n+  public void setSrc(String src)\n+  {\n+    setHTMLAttribute(\"src\", src);\n+  }\n+  \n+  public int getTabIndex()\n+  {\n+    return getIntHTMLAttribute(\"tabindex\");\n+  }\n+\n+  public void setTabIndex(int tabIndex)\n+  {\n+    setIntHTMLAttribute(\"tabindex\", tabIndex);\n+  }\n+  \n+  public String getType()\n+  {\n+    return getHTMLAttribute(\"type\");\n+  }\n+\n+  public void setType(String type)\n+  {\n+    setHTMLAttribute(\"type\", type);\n+  }\n+  \n+  public String getUseMap()\n+  {\n+    return getHTMLAttribute(\"usemap\");\n+  }\n+\n+  public void setUseMap(String useMap)\n+  {\n+    setHTMLAttribute(\"usemap\", useMap);\n+  }\n+  \n+  public String getValue()\n+  {\n+    if (value == null)\n+      {\n+        value = getDefaultValue();\n+      }\n+    return value;\n+  }\n+\n+  public void setValue(String value)\n+  {\n+    this.value = value;\n+  }\n+\n+  public void blur()\n+  {\n+    dispatchUIEvent(\"blur\");\n+  }\n+\n+  public void focus()\n+  {\n+    dispatchUIEvent(\"focus\");\n+  }\n+\n+  public void select()\n+  {\n+    dispatchUIEvent(\"select\");\n+  }\n+\n+  public void click()\n+  {\n+    dispatchUIEvent(\"click\");\n+  }\n+  \n+}\n+"}, {"sha": "02d5a9886e64987151cb2b5cf21233afde161977", "filename": "libjava/gnu/xml/dom/html2/DomHTMLIsIndexElement.java", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLIsIndexElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLIsIndexElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLIsIndexElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,75 @@\n+/* DomHTMLIsIndexElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLFormElement;\n+import org.w3c.dom.html2.HTMLIsIndexElement;\n+\n+/**\n+ * An HTML 'ISINDEX' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLIsIndexElement\n+  extends DomHTMLElement\n+  implements HTMLIsIndexElement\n+{\n+\n+  protected DomHTMLIsIndexElement(DomHTMLDocument owner, String namespaceURI,\n+                                  String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public HTMLFormElement getForm()\n+  {\n+    return (HTMLFormElement) getParentElement(\"form\");\n+  }\n+\n+  public String getPrompt()\n+  {\n+    return getHTMLAttribute(\"prompt\");\n+  }\n+\n+  public void setPrompt(String prompt)\n+  {\n+    setHTMLAttribute(\"prompt\", prompt);\n+  }\n+  \n+}\n+"}, {"sha": "ea99ee1711fcb145774b45e62a01ab6fa56dbad0", "filename": "libjava/gnu/xml/dom/html2/DomHTMLLIElement.java", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLLIElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLLIElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLLIElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,79 @@\n+/* DomHTMLLIElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLLIElement;\n+\n+/**\n+ * An HTML 'LI' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLLIElement\n+  extends DomHTMLElement\n+  implements HTMLLIElement\n+{\n+\n+  protected DomHTMLLIElement(DomHTMLDocument owner, String namespaceURI,\n+                             String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public String getType()\n+  {\n+    return getHTMLAttribute(\"type\");\n+  }\n+\n+  public void setType(String type)\n+  {\n+    setHTMLAttribute(\"type\", type);\n+  }\n+  \n+  public int getValue()\n+  {\n+    return getIntHTMLAttribute(\"value\");\n+  }\n+\n+  public void setValue(int value)\n+  {\n+    setIntHTMLAttribute(\"value\", value);\n+  }\n+  \n+}\n+"}, {"sha": "0dd2f833f66420d1bc428be8dcd165ebf39e1ad4", "filename": "libjava/gnu/xml/dom/html2/DomHTMLLabelElement.java", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLLabelElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLLabelElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLLabelElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,85 @@\n+/* DomHTMLLabelElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLFormElement;\n+import org.w3c.dom.html2.HTMLLabelElement;\n+\n+/**\n+ * An HTML 'LABEL' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLLabelElement\n+  extends DomHTMLElement\n+  implements HTMLLabelElement\n+{\n+\n+  protected DomHTMLLabelElement(DomHTMLDocument owner, String namespaceURI,\n+                                String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public HTMLFormElement getForm()\n+  {\n+    return (HTMLFormElement) getParentElement(\"form\");\n+  }\n+\n+  public String getAccessKey()\n+  {\n+    return getHTMLAttribute(\"accesskey\");\n+  }\n+\n+  public void setAccessKey(String accessKey)\n+  {\n+    setHTMLAttribute(\"accesskey\", accessKey);\n+  }\n+  \n+  public String getHtmlFor()\n+  {\n+    return getHTMLAttribute(\"for\");\n+  }\n+\n+  public void setHtmlFor(String htmlFor)\n+  {\n+    setHTMLAttribute(\"for\", htmlFor);\n+  }\n+  \n+}\n+"}, {"sha": "663e67c7d7adb6cba06beb759a568421eec1c3ac", "filename": "libjava/gnu/xml/dom/html2/DomHTMLLegendElement.java", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLLegendElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLLegendElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLLegendElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,85 @@\n+/* DomHTMLLegendElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLFormElement;\n+import org.w3c.dom.html2.HTMLLegendElement;\n+\n+/**\n+ * An HTML 'LEGEND' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLLegendElement\n+  extends DomHTMLElement\n+  implements HTMLLegendElement\n+{\n+\n+  protected DomHTMLLegendElement(DomHTMLDocument owner, String namespaceURI,\n+                                 String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public HTMLFormElement getForm()\n+  {\n+    return (HTMLFormElement) getParentElement(\"form\");\n+  }\n+\n+  public String getAccessKey()\n+  {\n+    return getHTMLAttribute(\"accesskey\");\n+  }\n+\n+  public void setAccessKey(String accessKey)\n+  {\n+    setHTMLAttribute(\"accesskey\", accessKey);\n+  }\n+  \n+  public String getAlign()\n+  {\n+    return getHTMLAttribute(\"align\");\n+  }\n+\n+  public void setAlign(String align)\n+  {\n+    setHTMLAttribute(\"align\", align);\n+  }\n+  \n+}\n+"}, {"sha": "c81486a8aedc05d7751336a4cbaee235739a384e", "filename": "libjava/gnu/xml/dom/html2/DomHTMLLinkElement.java", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLLinkElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLLinkElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLLinkElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,149 @@\n+/* DomHTMLLinkElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLLinkElement;\n+\n+/**\n+ * An HTML 'LINK' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLLinkElement\n+  extends DomHTMLElement\n+  implements HTMLLinkElement\n+{\n+\n+  protected DomHTMLLinkElement(DomHTMLDocument owner, String namespaceURI,\n+                               String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public boolean getDisabled()\n+  {\n+    return getBooleanHTMLAttribute(\"disabled\");\n+  }\n+\n+  public void setDisabled(boolean disabled)\n+  {\n+    setBooleanHTMLAttribute(\"disabled\", disabled);\n+  }\n+  \n+  public String getCharset()\n+  {\n+    return getHTMLAttribute(\"charset\");\n+  }\n+\n+  public void setCharset(String charset)\n+  {\n+    setHTMLAttribute(\"charset\", charset);\n+  }\n+  \n+  public String getHref()\n+  {\n+    return getHTMLAttribute(\"href\");\n+  }\n+\n+  public void setHref(String href)\n+  {\n+    setHTMLAttribute(\"href\", href);\n+  }\n+  \n+  public String getHreflang()\n+  {\n+    return getHTMLAttribute(\"hreflang\");\n+  }\n+\n+  public void setHreflang(String hreflang)\n+  {\n+    setHTMLAttribute(\"hreflang\", hreflang);\n+  }\n+  \n+  public String getMedia()\n+  {\n+    return getHTMLAttribute(\"media\");\n+  }\n+\n+  public void setMedia(String media)\n+  {\n+    setHTMLAttribute(\"media\", media);\n+  }\n+  \n+  public String getRel()\n+  {\n+    return getHTMLAttribute(\"rel\");\n+  }\n+\n+  public void setRel(String rel)\n+  {\n+    setHTMLAttribute(\"rel\", rel);\n+  }\n+  \n+  public String getRev()\n+  {\n+    return getHTMLAttribute(\"rev\");\n+  }\n+\n+  public void setRev(String rev)\n+  {\n+    setHTMLAttribute(\"rev\", rev);\n+  }\n+  \n+  public String getTarget()\n+  {\n+    return getHTMLAttribute(\"target\");\n+  }\n+\n+  public void setTarget(String target)\n+  {\n+    setHTMLAttribute(\"target\", target);\n+  }\n+  \n+  public String getType()\n+  {\n+    return getHTMLAttribute(\"type\");\n+  }\n+\n+  public void setType(String type)\n+  {\n+    setHTMLAttribute(\"type\", type);\n+  }\n+  \n+}\n+"}, {"sha": "d078f70f0a20593cc7dc65b74ddf9810ea3691b3", "filename": "libjava/gnu/xml/dom/html2/DomHTMLMapElement.java", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLMapElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLMapElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLMapElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,79 @@\n+/* DomHTMLMapElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLCollection;\n+import org.w3c.dom.html2.HTMLMapElement;\n+\n+/**\n+ * An HTML 'MAP' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLMapElement\n+  extends DomHTMLElement\n+  implements HTMLMapElement\n+{\n+\n+  protected DomHTMLMapElement(DomHTMLDocument owner, String namespaceURI,\n+                              String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public HTMLCollection getAreas()\n+  {\n+    DomHTMLCollection ret =\n+      new DomHTMLCollection((DomHTMLDocument) getOwnerDocument(), this);\n+    ret.addNodeName(\"area\");\n+    ret.evaluate();\n+    return ret;\n+  }\n+  \n+  public String getName()\n+  {\n+    return getHTMLAttribute(\"name\");\n+  }\n+\n+  public void setName(String name)\n+  {\n+    setHTMLAttribute(\"name\", name);\n+  }\n+  \n+}\n+"}, {"sha": "e674f3e7ed1dd7f36db9c4ef89f3cde492575b31", "filename": "libjava/gnu/xml/dom/html2/DomHTMLMenuElement.java", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLMenuElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLMenuElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLMenuElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,69 @@\n+/* DomHTMLMenuElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLMenuElement;\n+\n+/**\n+ * An HTML 'MENU' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLMenuElement\n+  extends DomHTMLElement\n+  implements HTMLMenuElement\n+{\n+\n+  protected DomHTMLMenuElement(DomHTMLDocument owner, String namespaceURI,\n+                               String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public boolean getCompact()\n+  {\n+    return getBooleanHTMLAttribute(\"compact\");\n+  }\n+\n+  public void setCompact(boolean compact)\n+  {\n+    setBooleanHTMLAttribute(\"compact\", compact);\n+  }\n+  \n+}\n+"}, {"sha": "d8bd435097e047f6f841d6542c6d42cd7005d897", "filename": "libjava/gnu/xml/dom/html2/DomHTMLMetaElement.java", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLMetaElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLMetaElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLMetaElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,99 @@\n+/* DomHTMLMetaElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLMetaElement;\n+\n+/**\n+ * An HTML 'META' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLMetaElement\n+  extends DomHTMLElement\n+  implements HTMLMetaElement\n+{\n+\n+  protected DomHTMLMetaElement(DomHTMLDocument owner, String namespaceURI,\n+                               String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public String getContent()\n+  {\n+    return getHTMLAttribute(\"content\");\n+  }\n+\n+  public void setContent(String content)\n+  {\n+    setHTMLAttribute(\"content\", content);\n+  }\n+  \n+  public String getHttpEquiv()\n+  {\n+    return getHTMLAttribute(\"http-equiv\");\n+  }\n+\n+  public void setHttpEquiv(String httpEquiv)\n+  {\n+    setHTMLAttribute(\"http-equiv\", httpEquiv);\n+  }\n+  \n+  public String getName()\n+  {\n+    return getHTMLAttribute(\"name\");\n+  }\n+\n+  public void setName(String name)\n+  {\n+    setHTMLAttribute(\"name\", name);\n+  }\n+  \n+  public String getScheme()\n+  {\n+    return getHTMLAttribute(\"scheme\");\n+  }\n+\n+  public void setScheme(String scheme)\n+  {\n+    setHTMLAttribute(\"scheme\", scheme);\n+  }\n+  \n+}\n+"}, {"sha": "78f94011c88e660a82e38e41e004200b6dac3b4b", "filename": "libjava/gnu/xml/dom/html2/DomHTMLModElement.java", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLModElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLModElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLModElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,79 @@\n+/* DomHTMLModElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLModElement;\n+\n+/**\n+ * An HTML 'INS' or 'DEL' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLModElement\n+  extends DomHTMLElement\n+  implements HTMLModElement\n+{\n+\n+  protected DomHTMLModElement(DomHTMLDocument owner, String namespaceURI,\n+                              String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public String getCite()\n+  {\n+    return getHTMLAttribute(\"cite\");\n+  }\n+\n+  public void setCite(String cite)\n+  {\n+    setHTMLAttribute(\"cite\", cite);\n+  }\n+  \n+  public String getDateTime()\n+  {\n+    return getHTMLAttribute(\"datetime\");\n+  }\n+\n+  public void setDateTime(String dateTime)\n+  {\n+    setHTMLAttribute(\"datetime\", dateTime);\n+  }\n+  \n+}\n+"}, {"sha": "85d1b3fcd9005329e3f482180fb1c3ff65b8a70c", "filename": "libjava/gnu/xml/dom/html2/DomHTMLOListElement.java", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLOListElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLOListElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLOListElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,89 @@\n+/* DomHTMLOListElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLOListElement;\n+\n+/**\n+ * An HTML 'OL' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLOListElement\n+  extends DomHTMLElement\n+  implements HTMLOListElement\n+{\n+\n+  protected DomHTMLOListElement(DomHTMLDocument owner, String namespaceURI,\n+                                String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public boolean getCompact()\n+  {\n+    return getBooleanHTMLAttribute(\"compact\");\n+  }\n+\n+  public void setCompact(boolean compact)\n+  {\n+    setBooleanHTMLAttribute(\"compact\", compact);\n+  }\n+  \n+  public int getStart()\n+  {\n+    return getIntHTMLAttribute(\"start\");\n+  }\n+\n+  public void setStart(int start)\n+  {\n+    setIntHTMLAttribute(\"start\", start);\n+  }\n+  \n+  public String getType()\n+  {\n+    return getHTMLAttribute(\"type\");\n+  }\n+\n+  public void setType(String type)\n+  {\n+    setHTMLAttribute(\"type\", type);\n+  }\n+  \n+}\n+"}, {"sha": "8b8abe7ed6fae1d96d14ccfa298e464278442781", "filename": "libjava/gnu/xml/dom/html2/DomHTMLObjectElement.java", "status": "added", "additions": 242, "deletions": 0, "changes": 242, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLObjectElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLObjectElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLObjectElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,242 @@\n+/* DomHTMLObjectElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.html2.HTMLFormElement;\n+import org.w3c.dom.html2.HTMLObjectElement;\n+\n+/**\n+ * An HTML 'OBJECT' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLObjectElement\n+  extends DomHTMLElement\n+  implements HTMLObjectElement\n+{\n+\n+  protected DomHTMLObjectElement(DomHTMLDocument owner, String namespaceURI,\n+                                 String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public HTMLFormElement getForm()\n+  {\n+    return (HTMLFormElement) getParentElement(\"form\");\n+  }\n+\n+  public String getCode()\n+  {\n+    return getHTMLAttribute(\"code\");\n+  }\n+\n+  public void setCode(String code)\n+  {\n+    setHTMLAttribute(\"code\", code);\n+  }\n+  \n+  public String getAlign()\n+  {\n+    return getHTMLAttribute(\"align\");\n+  }\n+\n+  public void setAlign(String align)\n+  {\n+    setHTMLAttribute(\"align\", align);\n+  }\n+  \n+  public String getArchive()\n+  {\n+    return getHTMLAttribute(\"archive\");\n+  }\n+\n+  public void setArchive(String archive)\n+  {\n+    setHTMLAttribute(\"archive\", archive);\n+  }\n+  \n+  public String getBorder()\n+  {\n+    return getHTMLAttribute(\"border\");\n+  }\n+\n+  public void setBorder(String border)\n+  {\n+    setHTMLAttribute(\"border\", border);\n+  }\n+  \n+  public String getCodeBase()\n+  {\n+    return getHTMLAttribute(\"codebase\");\n+  }\n+\n+  public void setCodeBase(String codeBase)\n+  {\n+    setHTMLAttribute(\"codebase\", codeBase);\n+  }\n+  \n+  public String getCodeType()\n+  {\n+    return getHTMLAttribute(\"codetype\");\n+  }\n+\n+  public void setCodeType(String codeType)\n+  {\n+    setHTMLAttribute(\"codetype\", codeType);\n+  }\n+  \n+  public String getData()\n+  {\n+    return getHTMLAttribute(\"data\");\n+  }\n+\n+  public void setData(String data)\n+  {\n+    setHTMLAttribute(\"data\", data);\n+  }\n+  \n+  public boolean getDeclare()\n+  {\n+    return getBooleanHTMLAttribute(\"declare\");\n+  }\n+\n+  public void setDeclare(boolean declare)\n+  {\n+    setBooleanHTMLAttribute(\"declare\", declare);\n+  }\n+  \n+  public String getHeight()\n+  {\n+    return getHTMLAttribute(\"height\");\n+  }\n+\n+  public void setHeight(String height)\n+  {\n+    setHTMLAttribute(\"height\", height);\n+  }\n+  \n+  public int getHspace()\n+  {\n+    return getIntHTMLAttribute(\"hspace\");\n+  }\n+\n+  public void setHspace(int hspace)\n+  {\n+    setIntHTMLAttribute(\"hspace\", hspace);\n+  }\n+  \n+  public String getName()\n+  {\n+    return getHTMLAttribute(\"name\");\n+  }\n+\n+  public void setName(String name)\n+  {\n+    setHTMLAttribute(\"name\", name);\n+  }\n+  \n+  public String getStandby()\n+  {\n+    return getHTMLAttribute(\"standby\");\n+  }\n+\n+  public void setStandby(String standby)\n+  {\n+    setHTMLAttribute(\"standby\", standby);\n+  }\n+  \n+  public int getTabIndex()\n+  {\n+    return getIntHTMLAttribute(\"tabindex\");\n+  }\n+\n+  public void setTabIndex(int tabIndex)\n+  {\n+    setIntHTMLAttribute(\"tabindex\", tabIndex);\n+  }\n+  \n+  public String getType()\n+  {\n+    return getHTMLAttribute(\"type\");\n+  }\n+\n+  public void setType(String type)\n+  {\n+    setHTMLAttribute(\"type\", type);\n+  }\n+  \n+  public String getUseMap()\n+  {\n+    return getHTMLAttribute(\"usemap\");\n+  }\n+\n+  public void setUseMap(String useMap)\n+  {\n+    setHTMLAttribute(\"usemap\", useMap);\n+  }\n+  \n+  public int getVspace()\n+  {\n+    return getIntHTMLAttribute(\"vspace\");\n+  }\n+\n+  public void setVspace(int vspace)\n+  {\n+    setIntHTMLAttribute(\"vspace\", vspace);\n+  }\n+  \n+  public String getWidth()\n+  {\n+    return getHTMLAttribute(\"width\");\n+  }\n+\n+  public void setWidth(String width)\n+  {\n+    setHTMLAttribute(\"width\", width);\n+  }\n+\n+  public Document getContentDocument()\n+  {\n+    // TODO getContentDocument\n+    return null;\n+  }\n+  \n+}\n+"}, {"sha": "782deb21699494501d6ecfd7e2703a38f4dfd46d", "filename": "libjava/gnu/xml/dom/html2/DomHTMLOptGroupElement.java", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLOptGroupElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLOptGroupElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLOptGroupElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,79 @@\n+/* DomHTMLOptGroupElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLOptGroupElement;\n+\n+/**\n+ * An HTML 'OPTGROUP' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLOptGroupElement\n+  extends DomHTMLElement\n+  implements HTMLOptGroupElement\n+{\n+\n+  protected DomHTMLOptGroupElement(DomHTMLDocument owner, String namespaceURI,\n+                             String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public boolean getDisabled()\n+  {\n+    return getBooleanHTMLAttribute(\"disabled\");\n+  }\n+\n+  public void setDisabled(boolean disabled)\n+  {\n+    setBooleanHTMLAttribute(\"disabled\", disabled);\n+  }\n+\n+  public String getLabel()\n+  {\n+    return getHTMLAttribute(\"label\");\n+  }\n+\n+  public void setLabel(String label)\n+  {\n+    setHTMLAttribute(\"label\", label);\n+  }\n+  \n+}\n+"}, {"sha": "21952e6de9b957768b2c5c05a8e66c42a601d788", "filename": "libjava/gnu/xml/dom/html2/DomHTMLOptionElement.java", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLOptionElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLOptionElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLOptionElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,131 @@\n+/* DomHTMLOptionElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLFormElement;\n+import org.w3c.dom.html2.HTMLOptionElement;\n+\n+/**\n+ * An HTML 'OPTION' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLOptionElement\n+  extends DomHTMLElement\n+  implements HTMLOptionElement\n+{\n+\n+  protected Boolean selected;\n+\n+  protected DomHTMLOptionElement(DomHTMLDocument owner, String namespaceURI,\n+                                 String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public HTMLFormElement getForm()\n+  {\n+    return (HTMLFormElement) getParentElement(\"form\");\n+  }\n+\n+  public boolean getDefaultSelected()\n+  {\n+    return getBooleanHTMLAttribute(\"selected\");\n+  }\n+\n+  public void setDefaultSelected(boolean defaultSelected)\n+  {\n+    setBooleanHTMLAttribute(\"selected\", defaultSelected);\n+  }\n+\n+  public String getText()\n+  {\n+    return getTextContent();\n+  }\n+\n+  public int getIndex()\n+  {\n+    return super.getIndex();\n+  }\n+  \n+  public boolean getDisabled()\n+  {\n+    return getBooleanHTMLAttribute(\"disabled\");\n+  }\n+\n+  public void setDisabled(boolean disabled)\n+  {\n+    setBooleanHTMLAttribute(\"disabled\", disabled);\n+  }\n+  \n+  public String getLabel()\n+  {\n+    return getHTMLAttribute(\"label\");\n+  }\n+\n+  public void setLabel(String label)\n+  {\n+    setHTMLAttribute(\"label\", label);\n+  }\n+  \n+  public boolean getSelected()\n+  {\n+    if (selected == null)\n+      {\n+        selected = Boolean.valueOf(getDefaultSelected());\n+      }\n+    return selected.booleanValue();\n+  }\n+\n+  public void setSelected(boolean selected)\n+  {\n+    this.selected = Boolean.valueOf(selected);\n+  }\n+  \n+  public String getValue()\n+  {\n+    return getHTMLAttribute(\"value\");\n+  }\n+\n+  public void setValue(String value)\n+  {\n+    setHTMLAttribute(\"value\", value);\n+  }\n+  \n+}\n+"}, {"sha": "573ddc9db3846061489058b3b48a60f5d42adf66", "filename": "libjava/gnu/xml/dom/html2/DomHTMLParagraphElement.java", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLParagraphElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLParagraphElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLParagraphElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,69 @@\n+/* DomHTMLParagraphElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLParagraphElement;\n+\n+/**\n+ * An HTML 'P' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLParagraphElement\n+  extends DomHTMLElement\n+  implements HTMLParagraphElement\n+{\n+\n+  protected DomHTMLParagraphElement(DomHTMLDocument owner, String namespaceURI,\n+                                    String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public String getAlign()\n+  {\n+    return getHTMLAttribute(\"align\");\n+  }\n+\n+  public void setAlign(String align)\n+  {\n+    setHTMLAttribute(\"align\", align);\n+  }\n+  \n+}\n+"}, {"sha": "c8e565d1572d1dff002da6ae6e03fb1f0d45647a", "filename": "libjava/gnu/xml/dom/html2/DomHTMLParamElement.java", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLParamElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLParamElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLParamElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,99 @@\n+/* DomHTMLParamElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLParamElement;\n+\n+/**\n+ * An HTML 'PARAM' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLParamElement\n+  extends DomHTMLElement\n+  implements HTMLParamElement\n+{\n+\n+  protected DomHTMLParamElement(DomHTMLDocument owner, String namespaceURI,\n+                                String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public String getName()\n+  {\n+    return getHTMLAttribute(\"name\");\n+  }\n+\n+  public void setName(String name)\n+  {\n+    setHTMLAttribute(\"name\", name);\n+  }\n+  \n+  public String getType()\n+  {\n+    return getHTMLAttribute(\"type\");\n+  }\n+\n+  public void setType(String type)\n+  {\n+    setHTMLAttribute(\"type\", type);\n+  }\n+  \n+  public String getValue()\n+  {\n+    return getHTMLAttribute(\"value\");\n+  }\n+\n+  public void setValue(String value)\n+  {\n+    setHTMLAttribute(\"value\", value);\n+  }\n+  \n+  public String getValueType()\n+  {\n+    return getHTMLAttribute(\"valuetype\");\n+  }\n+\n+  public void setValueType(String valueType)\n+  {\n+    setHTMLAttribute(\"valuetype\", valueType);\n+  }\n+  \n+}\n+"}, {"sha": "f1b970e1264db942e62b91ade85ae9f06abec2f4", "filename": "libjava/gnu/xml/dom/html2/DomHTMLParser.java", "status": "added", "additions": 266, "deletions": 0, "changes": 266, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLParser.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLParser.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLParser.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,266 @@\n+/* DomHTMLParser.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.xml.dom.html2;\n+\n+import gnu.javax.swing.text.html.parser.support.Parser;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+\n+import java.util.Enumeration;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+\n+import javax.swing.text.AttributeSet;\n+import javax.swing.text.html.HTML;\n+import javax.swing.text.html.parser.DTD;\n+import javax.swing.text.html.parser.TagElement;\n+\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.html2.HTMLDocument;\n+\n+/**\n+ * This parser reads HTML from the given stream and stores into\n+ * {@link HTMLDocument}. The HTML tag becomes the {@link Node}.\n+ * The tag attributes become the node attributes. The text inside\n+ * HTML tag is inserted as one or several text nodes. The nested\n+ * HTML tags are inserted as child nodes.\n+ * \n+ * If the strict tree structure, closing the tag means closing all\n+ * nested tags. To work around this, this parser closes the nested\n+ * tags and immediately reopens them after the closed tag.\n+ * In this way, <code>&lt;b&gt;&lt;i&gt;c&lt;/b&gt;d</code> \n+ * is parsed as <code>&lt;b&gt;&lt;i&gt;c&lt;/i&gt;&lt;/b&gt;&lt;i&gt;d</code> .\n+ *\n+ * @author Audrius Meskauskas (AudriusA@Bioinformatics.org)\n+ */\n+public class DomHTMLParser\n+  extends gnu.javax.swing.text.html.parser.support.Parser\n+{\n+  /**\n+   * The target where HTML document will be inserted.\n+   */\n+  protected DomHTMLDocument document;\n+\n+  /**\n+   * The subsequently created new nodes will be inserted as the\n+   * childs of this cursor.\n+   */\n+  protected Node cursor;\n+\n+  /**\n+   * Create parser using the given DTD.\n+   *\n+   * @param dtd the DTD (for example,\n+   * {@link gnu.javax.swing.text.html.parser.HTML_401F}).\n+   */\n+  public DomHTMLParser(DTD dtd)\n+  {\n+    super(dtd);\n+  }\n+\n+  /**\n+   * Parse SGML insertion ( &lt;! ... &gt; ).\n+   * Currently just treats it as comment.\n+   */\n+  public boolean parseMarkupDeclarations(StringBuffer strBuff)\n+                                  throws java.io.IOException\n+  {\n+    Node c = document.createComment(strBuff.toString());\n+    cursor.appendChild(c);\n+    return false;\n+  }\n+\n+  /**\n+   * Read the document, present in the given stream, and\n+   * return the corresponding {@link HTMLDocument}.\n+   *\n+   * @param input a stream to read from.\n+   * @return a document, reflecting the structure of the provided HTML\n+   * text.\n+   *\n+   * @throws IOException if the reader throws one.\n+   */\n+  public HTMLDocument parseDocument(Reader input)\n+                    throws IOException\n+  {\n+    try\n+      {\n+        document = new DomHTMLDocument();\n+\n+        cursor = document;\n+\n+        parse(input);\n+\n+        DomHTMLDocument h = document;\n+        document = null;\n+        return h;\n+      }\n+    catch (Exception ex)\n+      {\n+        ex.printStackTrace();\n+        throw new IOException(\"Exception: \" + ex.getMessage());\n+      }\n+  }\n+  \n+  /**\n+   * Create a new node.\n+   * @param name the name of node, case insensitive.\n+   * @return the created node.\n+   */\n+  protected Node createNode(String name)\n+  {\n+    Node new_node = document.createElement(name.toLowerCase());\n+    AttributeSet hatts = getAttributes();\n+    NamedNodeMap natts = new_node.getAttributes();\n+\n+    Enumeration enumeration = hatts.getAttributeNames();\n+    Object key;\n+    Node attribute;\n+\n+    while (hatts != null)\n+      {\n+        while (enumeration.hasMoreElements())\n+          {\n+            key = enumeration.nextElement();\n+            attribute = document.createAttribute(key.toString());\n+            attribute.setNodeValue(hatts.getAttribute(key).toString());\n+            natts.setNamedItem(attribute);\n+          }\n+\n+        // The default values are stored in a parent node. \n+        hatts = hatts.getResolveParent();\n+      }\n+\n+    return new_node;\n+  }\n+  \n+  /**\n+   * Handle comment by inserting the comment node.\n+   * @param text the comment text.\n+   */\n+  protected void handleComment(char[] text)\n+  {\n+    Node c = document.createComment(new String(text));\n+    cursor.appendChild(c);\n+  }\n+  \n+  /**\n+   * Handle the tag with no content.\n+   * @param tag the tag to handle.\n+   */\n+  protected void handleEmptyTag(TagElement tag)\n+  {\n+    String name = tag.getHTMLTag().toString();\n+\n+    if (name.equalsIgnoreCase(\"#pcdata\"))\n+      return;\n+\n+    Node c = createNode(name);\n+    cursor.appendChild(c);\n+  }\n+  \n+  /**\n+   * Close the given tag. Close and reopen all nested tags.\n+   * @param tag the tag to close.\n+   */\n+  protected void handleEndTag(TagElement tag)\n+  {\n+    String name = tag.getHTMLTag().toString();\n+    String nname = cursor.getNodeName();\n+\n+    // Closing the current tag.\n+    if (nname != null && nname.equalsIgnoreCase(name))\n+      {\n+        cursor = cursor.getParentNode();\n+      }\n+    else\n+      {\n+        Node nCursor = cursor.getParentNode();\n+\n+        // Remember the opened nodes.\n+        LinkedList open = new LinkedList();\n+        Node close = cursor;\n+        while (close != null && !close.getNodeName().equalsIgnoreCase(name))\n+          {\n+            if (close != document)\n+              open.addFirst(close);\n+            close = close.getParentNode();\n+          }\n+\n+        if (close == null)\n+          cursor = document;\n+        else\n+          cursor = close.getParentNode();\n+\n+        // Insert the copies of the opened nodes.   \n+        Iterator iter = open.iterator();\n+        while (iter.hasNext())\n+          {\n+            Node item = (Node) iter.next();\n+            Node copy = item.cloneNode(true);\n+            cursor.appendChild(copy);\n+            cursor = copy;\n+          }\n+      }\n+  }\n+\n+  /**\n+   * Handle the start tag by inserting the HTML element.\n+   * @param tag the tag to handle.\n+   */\n+  protected void handleStartTag(TagElement tag)\n+  {\n+    HTML.Tag h = tag.getHTMLTag();\n+    Node c = createNode(h.toString());\n+    cursor.appendChild(c);\n+    cursor = c;\n+  }\n+  \n+  /**\n+   * Handle text by inserting the text node.\n+   * @param text the text to insert.\n+   */\n+  protected void handleText(char[] text)\n+  {\n+    Node c = document.createTextNode(text, 0, text.length);\n+    cursor.appendChild(c);\n+  }\n+}"}, {"sha": "c8f306fff1a072afe5293ff7061e9f94c449ab8f", "filename": "libjava/gnu/xml/dom/html2/DomHTMLPreElement.java", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLPreElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLPreElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLPreElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,69 @@\n+/* DomHTMLPreElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLPreElement;\n+\n+/**\n+ * An HTML 'PRE' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLPreElement\n+  extends DomHTMLElement\n+  implements HTMLPreElement\n+{\n+\n+  protected DomHTMLPreElement(DomHTMLDocument owner, String namespaceURI,\n+                             String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public int getWidth()\n+  {\n+    return getIntHTMLAttribute(\"width\");\n+  }\n+\n+  public void setWidth(int width)\n+  {\n+    setIntHTMLAttribute(\"width\", width);\n+  }\n+  \n+}\n+"}, {"sha": "0424ebf3b882b00c13abe5efd04174a4340d838b", "filename": "libjava/gnu/xml/dom/html2/DomHTMLQuoteElement.java", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLQuoteElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLQuoteElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLQuoteElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,69 @@\n+/* DomHTMLQuoteElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLQuoteElement;\n+\n+/**\n+ * An HTML 'Q' or 'BLOCKQUOTE' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLQuoteElement\n+  extends DomHTMLElement\n+  implements HTMLQuoteElement\n+{\n+\n+  protected DomHTMLQuoteElement(DomHTMLDocument owner, String namespaceURI,\n+                                String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public String getCite()\n+  {\n+    return getHTMLAttribute(\"cite\");\n+  }\n+\n+  public void setCite(String cite)\n+  {\n+    setHTMLAttribute(\"cite\", cite);\n+  }\n+  \n+}\n+"}, {"sha": "2bf6a5579b2ee9ef66b3b3b89963f3f105d3b982", "filename": "libjava/gnu/xml/dom/html2/DomHTMLScriptElement.java", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLScriptElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLScriptElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLScriptElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,129 @@\n+/* DomHTMLScriptElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLScriptElement;\n+\n+/**\n+ * An HTML 'SCRIPT' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLScriptElement\n+  extends DomHTMLElement\n+  implements HTMLScriptElement\n+{\n+\n+  protected DomHTMLScriptElement(DomHTMLDocument owner, String namespaceURI,\n+                                 String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public String getText()\n+  {\n+    return getTextContent();\n+  }\n+\n+  public void setText(String text)\n+  {\n+    setTextContent(text);\n+  }\n+\n+  public String getHtmlFor()\n+  {\n+    return getHTMLAttribute(\"for\");\n+  }\n+\n+  public void setHtmlFor(String htmlFor)\n+  {\n+    setHTMLAttribute(\"for\", htmlFor);\n+  }\n+\n+  public String getEvent()\n+  {\n+    return getHTMLAttribute(\"event\");\n+  }\n+\n+  public void setEvent(String event)\n+  {\n+    setHTMLAttribute(\"event\", event);\n+  }\n+\n+  public String getCharset()\n+  {\n+    return getHTMLAttribute(\"charset\");\n+  }\n+\n+  public void setCharset(String charset)\n+  {\n+    setHTMLAttribute(\"charset\", charset);\n+  }\n+\n+  public boolean getDefer()\n+  {\n+    return getBooleanHTMLAttribute(\"defer\");\n+  }\n+\n+  public void setDefer(boolean defer)\n+  {\n+    setBooleanHTMLAttribute(\"defer\", defer);\n+  }\n+\n+  public String getSrc()\n+  {\n+    return getHTMLAttribute(\"src\");\n+  }\n+\n+  public void setSrc(String src)\n+  {\n+    setHTMLAttribute(\"src\", src);\n+  }\n+\n+  public String getType()\n+  {\n+    return getHTMLAttribute(\"type\");\n+  }\n+\n+  public void setType(String type)\n+  {\n+    setHTMLAttribute(\"type\", type);\n+  }\n+  \n+}\n+"}, {"sha": "b888b57e6c3b61c7bbf759150d97c6801674e6fe", "filename": "libjava/gnu/xml/dom/html2/DomHTMLSelectElement.java", "status": "added", "additions": 211, "deletions": 0, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLSelectElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLSelectElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLSelectElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,211 @@\n+/* DomHTMLSelectElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import gnu.xml.dom.DomDOMException;\n+import org.w3c.dom.DOMException;\n+import org.w3c.dom.html2.HTMLElement;\n+import org.w3c.dom.html2.HTMLFormElement;\n+import org.w3c.dom.html2.HTMLOptionElement;\n+import org.w3c.dom.html2.HTMLOptionsCollection;\n+import org.w3c.dom.html2.HTMLSelectElement;\n+\n+/**\n+ * An HTML 'SELECT' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLSelectElement\n+  extends DomHTMLElement\n+  implements HTMLSelectElement\n+{\n+\n+  protected DomHTMLSelectElement(DomHTMLDocument owner, String namespaceURI,\n+                                 String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+  \n+  public String getType()\n+  {\n+    return getHTMLAttribute(\"type\");\n+  }\n+\n+  public int getSelectedIndex()\n+  {\n+    HTMLOptionsCollection options = getOptions();\n+    int len = options.getLength();\n+    for (int i = 0; i < len; i++)\n+      {\n+        HTMLOptionElement option = (HTMLOptionElement) options.item(i);\n+        if (option.getSelected())\n+          {\n+            return i;\n+          }\n+      }\n+    return -1;\n+  }\n+\n+  public void setSelectedIndex(int selectedIndex)\n+  {\n+    HTMLOptionsCollection options = getOptions();\n+    int len = options.getLength();\n+    if (selectedIndex < 0 || selectedIndex >= len)\n+      {\n+        throw new DomDOMException(DOMException.INDEX_SIZE_ERR);\n+      }\n+    for (int i = 0; i < len; i++)\n+      {\n+        HTMLOptionElement option = (HTMLOptionElement) options.item(i);\n+        option.setSelected(i == selectedIndex);\n+      }\n+  }\n+  \n+  public String getValue()\n+  {\n+    return getHTMLAttribute(\"value\");\n+  }\n+\n+  public void setValue(String value)\n+  {\n+    setHTMLAttribute(\"value\", value);\n+  }\n+  \n+  public int getLength()\n+  {\n+    return getIntHTMLAttribute(\"length\");\n+  }\n+\n+  public void setLength(int length)\n+  {\n+    setIntHTMLAttribute(\"length\", length);\n+  }\n+\n+  public HTMLFormElement getForm()\n+  {\n+    return (HTMLFormElement) getParentElement(\"form\");\n+  }\n+\n+  public HTMLOptionsCollection getOptions()\n+  {\n+    DomHTMLCollection ret =\n+      new DomHTMLCollection((DomHTMLDocument) getOwnerDocument(), this);\n+    ret.addNodeName(\"option\");\n+    ret.evaluate();\n+    return ret;\n+  }\n+  \n+  public boolean getDisabled()\n+  {\n+    return getBooleanHTMLAttribute(\"disabled\");\n+  }\n+\n+  public void setDisabled(boolean disabled)\n+  {\n+    setBooleanHTMLAttribute(\"disabled\", disabled);\n+  }\n+  \n+  public boolean getMultiple()\n+  {\n+    return getBooleanHTMLAttribute(\"multiple\");\n+  }\n+\n+  public void setMultiple(boolean multiple)\n+  {\n+    setBooleanHTMLAttribute(\"multiple\", multiple);\n+  }\n+  \n+  public String getName()\n+  {\n+    return getHTMLAttribute(\"name\");\n+  }\n+\n+  public void setName(String name)\n+  {\n+    setHTMLAttribute(\"name\", name);\n+  }\n+  \n+  public int getSize()\n+  {\n+    return getIntHTMLAttribute(\"size\");\n+  }\n+\n+  public void setSize(int size)\n+  {\n+    setIntHTMLAttribute(\"size\", size);\n+  }\n+  \n+  public int getTabIndex()\n+  {\n+    return getIntHTMLAttribute(\"tabindex\");\n+  }\n+\n+  public void setTabIndex(int tabIndex)\n+  {\n+    setIntHTMLAttribute(\"tabindex\", tabIndex);\n+  }\n+\n+  public void add(HTMLElement element, HTMLElement before)\n+  {\n+    insertBefore(before, element);\n+  }\n+\n+  public void remove(int index)\n+  {\n+    HTMLOptionsCollection options = getOptions();\n+    int len = options.getLength();\n+    if (index < 0 || index >= len)\n+      {\n+        throw new DomDOMException(DOMException.INDEX_SIZE_ERR);\n+      }\n+    HTMLOptionElement option = (HTMLOptionElement) options.item(index);\n+    option.getParentNode().removeChild(option);\n+  }\n+\n+  public void blur()\n+  {\n+    dispatchUIEvent(\"blur\");\n+  }\n+\n+  public void focus()\n+  {\n+    dispatchUIEvent(\"focus\");\n+  }\n+  \n+}\n+"}, {"sha": "4d2de8c6b485b0a08132e7a4ab9d92ee08939489", "filename": "libjava/gnu/xml/dom/html2/DomHTMLStyleElement.java", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLStyleElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLStyleElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLStyleElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,89 @@\n+/* DomHTMLStyleElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLStyleElement;\n+\n+/**\n+ * An HTML 'STYLE' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLStyleElement\n+  extends DomHTMLElement\n+  implements HTMLStyleElement\n+{\n+\n+  protected DomHTMLStyleElement(DomHTMLDocument owner, String namespaceURI,\n+                                String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public boolean getDisabled()\n+  {\n+    return getBooleanHTMLAttribute(\"disabled\");\n+  }\n+\n+  public void setDisabled(boolean disabled)\n+  {\n+    setBooleanHTMLAttribute(\"disabled\", disabled);\n+  }\n+  \n+  public String getMedia()\n+  {\n+    return getHTMLAttribute(\"media\");\n+  }\n+\n+  public void setMedia(String media)\n+  {\n+    setHTMLAttribute(\"media\", media);\n+  }\n+  \n+  public String getType()\n+  {\n+    return getHTMLAttribute(\"type\");\n+  }\n+\n+  public void setType(String type)\n+  {\n+    setHTMLAttribute(\"type\", type);\n+  }\n+  \n+}\n+"}, {"sha": "a481f47fa34b04e2c653aab051430787758e7822", "filename": "libjava/gnu/xml/dom/html2/DomHTMLTableCaptionElement.java", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLTableCaptionElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLTableCaptionElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLTableCaptionElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,70 @@\n+/* DomHTMLTableCaptionElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLTableCaptionElement;\n+\n+/**\n+ * An HTML 'CAPTION' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLTableCaptionElement\n+  extends DomHTMLElement\n+  implements HTMLTableCaptionElement\n+{\n+\n+  protected DomHTMLTableCaptionElement(DomHTMLDocument owner,\n+                                       String namespaceURI,\n+                                       String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public String getAlign()\n+  {\n+    return getHTMLAttribute(\"align\");\n+  }\n+\n+  public void setAlign(String align)\n+  {\n+    setHTMLAttribute(\"align\", align);\n+  }\n+  \n+}\n+"}, {"sha": "6338b88d050827ce35765199546a935ef401eea6", "filename": "libjava/gnu/xml/dom/html2/DomHTMLTableCellElement.java", "status": "added", "additions": 205, "deletions": 0, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLTableCellElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLTableCellElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLTableCellElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,205 @@\n+/* DomHTMLTableCellElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLTableCellElement;\n+\n+/**\n+ * An HTML 'TH' or 'TD' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLTableCellElement\n+  extends DomHTMLElement\n+  implements HTMLTableCellElement\n+{\n+\n+  protected DomHTMLTableCellElement(DomHTMLDocument owner,\n+                                    String namespaceURI,\n+                                    String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public int getCellIndex()\n+  {\n+    return getIndex();\n+  }\n+\n+  public String getAbbr()\n+  {\n+    return getHTMLAttribute(\"abbr\");\n+  }\n+\n+  public void setAbbr(String abbr)\n+  {\n+    setHTMLAttribute(\"abbr\", abbr);\n+  }\n+  \n+  public String getAlign()\n+  {\n+    return getHTMLAttribute(\"align\");\n+  }\n+\n+  public void setAlign(String align)\n+  {\n+    setHTMLAttribute(\"align\", align);\n+  }\n+  \n+  public String getAxis()\n+  {\n+    return getHTMLAttribute(\"axis\");\n+  }\n+\n+  public void setAxis(String axis)\n+  {\n+    setHTMLAttribute(\"axis\", axis);\n+  }\n+  \n+  public String getBgColor()\n+  {\n+    return getHTMLAttribute(\"bgcolor\");\n+  }\n+\n+  public void setBgColor(String bgColor)\n+  {\n+    setHTMLAttribute(\"bgcolor\", bgColor);\n+  }\n+  \n+  public String getCh()\n+  {\n+    return getHTMLAttribute(\"char\");\n+  }\n+\n+  public void setCh(String ch)\n+  {\n+    setHTMLAttribute(\"char\", ch);\n+  }\n+  \n+  public String getChOff()\n+  {\n+    return getHTMLAttribute(\"charoff\");\n+  }\n+\n+  public void setChOff(String chOff)\n+  {\n+    setHTMLAttribute(\"charoff\", chOff);\n+  }\n+  \n+  public int getColSpan()\n+  {\n+    return getIntHTMLAttribute(\"colspan\");\n+  }\n+\n+  public void setColSpan(int colSpan)\n+  {\n+    setIntHTMLAttribute(\"colspan\", colSpan);\n+  }\n+  \n+  public String getHeaders()\n+  {\n+    return getHTMLAttribute(\"headers\");\n+  }\n+\n+  public void setHeaders(String headers)\n+  {\n+    setHTMLAttribute(\"headers\", headers);\n+  }\n+  \n+  public String getHeight()\n+  {\n+    return getHTMLAttribute(\"height\");\n+  }\n+\n+  public void setHeight(String height)\n+  {\n+    setHTMLAttribute(\"height\", height);\n+  }\n+  \n+  public boolean getNoWrap()\n+  {\n+    return getBooleanHTMLAttribute(\"nowrap\");\n+  }\n+\n+  public void setNoWrap(boolean noWrap)\n+  {\n+    setBooleanHTMLAttribute(\"nowrap\", noWrap);\n+  }\n+  \n+  public int getRowSpan()\n+  {\n+    return getIntHTMLAttribute(\"rowspan\");\n+  }\n+\n+  public void setRowSpan(int rowSpan)\n+  {\n+    setIntHTMLAttribute(\"rowspan\", rowSpan);\n+  }\n+  \n+  public String getScope()\n+  {\n+    return getHTMLAttribute(\"scope\");\n+  }\n+\n+  public void setScope(String scope)\n+  {\n+    setHTMLAttribute(\"scope\", scope);\n+  }\n+  \n+  public String getVAlign()\n+  {\n+    return getHTMLAttribute(\"valign\");\n+  }\n+\n+  public void setVAlign(String vAlign)\n+  {\n+    setHTMLAttribute(\"valign\", vAlign);\n+  }\n+  \n+  public String getWidth()\n+  {\n+    return getHTMLAttribute(\"width\");\n+  }\n+\n+  public void setWidth(String width)\n+  {\n+    setHTMLAttribute(\"width\", width);\n+  }\n+  \n+}\n+"}, {"sha": "0ed20a07a8c8abf3801b6fdafb2190f41bb31dad", "filename": "libjava/gnu/xml/dom/html2/DomHTMLTableColElement.java", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLTableColElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLTableColElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLTableColElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,120 @@\n+/* DomHTMLTableColElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLTableColElement;\n+\n+/**\n+ * An HTML 'COL' or 'COLGROUP' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLTableColElement\n+  extends DomHTMLElement\n+  implements HTMLTableColElement\n+{\n+\n+  protected DomHTMLTableColElement(DomHTMLDocument owner,\n+                                   String namespaceURI,\n+                                   String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public String getAlign()\n+  {\n+    return getHTMLAttribute(\"align\");\n+  }\n+\n+  public void setAlign(String align)\n+  {\n+    setHTMLAttribute(\"align\", align);\n+  }\n+  \n+  public String getCh()\n+  {\n+    return getHTMLAttribute(\"char\");\n+  }\n+\n+  public void setCh(String ch)\n+  {\n+    setHTMLAttribute(\"char\", ch);\n+  }\n+  \n+  public String getChOff()\n+  {\n+    return getHTMLAttribute(\"charoff\");\n+  }\n+\n+  public void setChOff(String chOff)\n+  {\n+    setHTMLAttribute(\"charoff\", chOff);\n+  }\n+  \n+  public int getSpan()\n+  {\n+    return getIntHTMLAttribute(\"span\");\n+  }\n+\n+  public void setSpan(int span)\n+  {\n+    setIntHTMLAttribute(\"span\", span);\n+  }\n+  \n+  public String getVAlign()\n+  {\n+    return getHTMLAttribute(\"valign\");\n+  }\n+\n+  public void setVAlign(String vAlign)\n+  {\n+    setHTMLAttribute(\"valign\", vAlign);\n+  }\n+  \n+  public String getWidth()\n+  {\n+    return getHTMLAttribute(\"width\");\n+  }\n+\n+  public void setWidth(String width)\n+  {\n+    setHTMLAttribute(\"width\", width);\n+  }\n+  \n+}\n+"}, {"sha": "95e295733205e38b62003954d9529c611b528b53", "filename": "libjava/gnu/xml/dom/html2/DomHTMLTableElement.java", "status": "added", "additions": 383, "deletions": 0, "changes": 383, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLTableElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLTableElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLTableElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,383 @@\n+/* DomHTMLTableElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import gnu.xml.dom.DomDOMException;\n+import org.w3c.dom.DOMException;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.html2.HTMLCollection;\n+import org.w3c.dom.html2.HTMLElement;\n+import org.w3c.dom.html2.HTMLTableCaptionElement;\n+import org.w3c.dom.html2.HTMLTableElement;\n+import org.w3c.dom.html2.HTMLTableSectionElement;\n+\n+/**\n+ * An HTML 'TABLE' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLTableElement\n+  extends DomHTMLElement\n+  implements HTMLTableElement\n+{\n+\n+  protected DomHTMLTableElement(DomHTMLDocument owner, String namespaceURI,\n+                                String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public HTMLTableCaptionElement getCaption()\n+  {\n+    return (HTMLTableCaptionElement) getChildElement(\"caption\");\n+  }\n+\n+  public void setCaption(HTMLTableCaptionElement caption)\n+  {\n+    HTMLTableCaptionElement ref = getCaption();\n+    if (ref == null)\n+      {\n+        appendChild(caption);\n+      }\n+    else\n+      {\n+        replaceChild(caption, ref);\n+      }\n+  }\n+  \n+  public HTMLTableSectionElement getTHead()\n+  {\n+    return (HTMLTableSectionElement) getChildElement(\"thead\");\n+  }\n+\n+  public void setTHead(HTMLTableSectionElement tHead)\n+  {\n+    HTMLTableSectionElement ref = getTHead();\n+    if (ref == null)\n+      {\n+        appendChild(tHead);\n+      }\n+    else\n+      {\n+        replaceChild(tHead, ref);\n+      }\n+  }\n+\n+  public HTMLTableSectionElement getTFoot()\n+  {\n+    return (HTMLTableSectionElement) getChildElement(\"tfoot\");\n+  }\n+\n+  public void setTFoot(HTMLTableSectionElement tFoot)\n+  {\n+    HTMLTableSectionElement ref = getTFoot();\n+    if (ref == null)\n+      {\n+        appendChild(tFoot);\n+      }\n+    else\n+      {\n+        replaceChild(tFoot, ref);\n+      }\n+  }\n+\n+  public HTMLCollection getRows()\n+  {\n+    DomHTMLCollection ret =\n+      new DomHTMLCollection((DomHTMLDocument) getOwnerDocument(), this);\n+    ret.addNodeName(\"tr\");\n+    ret.evaluate();\n+    return ret;\n+  }\n+\n+  public HTMLCollection getTBodies()\n+  {\n+    DomHTMLCollection ret =\n+      new DomHTMLCollection((DomHTMLDocument) getOwnerDocument(), this);\n+    ret.addNodeName(\"tbody\");\n+    ret.evaluate();\n+    return ret;\n+  }\n+  \n+  public String getAlign()\n+  {\n+    return getHTMLAttribute(\"align\");\n+  }\n+\n+  public void setAlign(String align)\n+  {\n+    setHTMLAttribute(\"align\", align);\n+  }\n+  \n+  public String getBgColor()\n+  {\n+    return getHTMLAttribute(\"bgcolor\");\n+  }\n+\n+  public void setBgColor(String bgColor)\n+  {\n+    setHTMLAttribute(\"bgcolor\", bgColor);\n+  }\n+  \n+  public String getBorder()\n+  {\n+    return getHTMLAttribute(\"border\");\n+  }\n+\n+  public void setBorder(String border)\n+  {\n+    setHTMLAttribute(\"border\", border);\n+  }\n+  \n+  public String getCellPadding()\n+  {\n+    return getHTMLAttribute(\"cellpadding\");\n+  }\n+\n+  public void setCellPadding(String cellPadding)\n+  {\n+    setHTMLAttribute(\"cellpadding\", cellPadding);\n+  }\n+  \n+  public String getCellSpacing()\n+  {\n+    return getHTMLAttribute(\"cellspacing\");\n+  }\n+\n+  public void setCellSpacing(String cellSpacing)\n+  {\n+    setHTMLAttribute(\"cellspacing\", cellSpacing);\n+  }\n+  \n+  public String getFrame()\n+  {\n+    return getHTMLAttribute(\"frame\");\n+  }\n+\n+  public void setFrame(String frame)\n+  {\n+    setHTMLAttribute(\"frame\", frame);\n+  }\n+  \n+  public String getRules()\n+  {\n+    return getHTMLAttribute(\"rules\");\n+  }\n+\n+  public void setRules(String rules)\n+  {\n+    setHTMLAttribute(\"rules\", rules);\n+  }\n+  \n+  public String getSummary()\n+  {\n+    return getHTMLAttribute(\"summary\");\n+  }\n+\n+  public void setSummary(String summary)\n+  {\n+    setHTMLAttribute(\"summary\", summary);\n+  }\n+  \n+  public String getWidth()\n+  {\n+    return getHTMLAttribute(\"width\");\n+  }\n+\n+  public void setWidth(String width)\n+  {\n+    setHTMLAttribute(\"width\", width);\n+  }\n+\n+  public HTMLElement createTHead()\n+  {\n+    HTMLTableSectionElement ref = getTHead();\n+    if (ref == null)\n+      {\n+        return (HTMLElement) getOwnerDocument().createElement(\"thead\");\n+      }\n+    else\n+      {\n+        return ref;\n+      }\n+  }\n+\n+  public void deleteTHead()\n+  {\n+    HTMLTableSectionElement ref = getTHead();\n+    if (ref != null)\n+      {\n+        removeChild(ref);\n+      }\n+  }\n+\n+  public HTMLElement createTFoot()\n+  {\n+    HTMLTableSectionElement ref = getTFoot();\n+    if (ref == null)\n+      {\n+        return (HTMLElement) getOwnerDocument().createElement(\"tfoot\");\n+      }\n+    else\n+      {\n+        return ref;\n+      }\n+  }\n+\n+  public void deleteTFoot()\n+  {\n+    HTMLTableSectionElement ref = getTFoot();\n+    if (ref != null)\n+      {\n+        removeChild(ref);\n+      }\n+  }\n+\n+  public HTMLElement createCaption()\n+  {\n+    HTMLTableCaptionElement ref = getCaption();\n+    if (ref == null)\n+      {\n+        return (HTMLElement) getOwnerDocument().createElement(\"caption\");\n+      }\n+    else\n+      {\n+        return ref;\n+      }\n+  }\n+\n+  public void deleteCaption()\n+  {\n+    HTMLTableCaptionElement ref = getCaption();\n+    if (ref != null)\n+      {\n+        removeChild(ref);\n+      }\n+  }\n+\n+  public HTMLElement insertRow(int index)\n+  {\n+    Node ref = getRow(index);\n+    Node row = getOwnerDocument().createElement(\"tr\");\n+    if (ref == null)\n+      {\n+        Node tbody = getChildElement(\"tbody\");\n+        if (tbody == null)\n+          {\n+            tbody = getOwnerDocument().createElement(\"tfoot\");\n+            appendChild(tbody);\n+          }\n+        tbody.appendChild(row);\n+      }\n+    else\n+      {\n+        ref.getParentNode().insertBefore(row, ref);\n+      }\n+    return (HTMLElement) row;\n+  }\n+\n+  public void deleteRow(int index)\n+  {\n+    Node ref = getRow(index);\n+    if (ref == null)\n+      {\n+        throw new DomDOMException(DOMException.INDEX_SIZE_ERR);\n+      }\n+    ref.getParentNode().removeChild(ref);\n+  }\n+ \n+  Node getRow(final int index)\n+  { \n+    int i = 0;\n+    Node thead = getChildElement(\"thead\");\n+    if (thead != null)\n+      {\n+        for (Node ctx = thead.getFirstChild(); ctx != null;\n+             ctx = ctx.getNextSibling())\n+          {\n+            if (!\"tr\".equalsIgnoreCase(ctx.getLocalName()))\n+              {\n+                continue;\n+              }\n+            if (index == i)\n+              {\n+                return ctx;\n+              }\n+            i++;\n+          }\n+      }\n+    Node tbody = getChildElement(\"tbody\");\n+    if (tbody == null)\n+      {\n+        tbody = this;\n+      }\n+    for (Node ctx = tbody.getFirstChild(); ctx != null;\n+         ctx = ctx.getNextSibling())\n+      {\n+        if (!\"tr\".equalsIgnoreCase(ctx.getLocalName()))\n+          {\n+            continue;\n+          }\n+        if (index == i)\n+          {\n+            return ctx;\n+          }\n+        i++;\n+      }\n+    Node tfoot = getChildElement(\"tfoot\");\n+    if (tfoot != null)\n+      {\n+        for (Node ctx = tfoot.getFirstChild(); ctx != null;\n+             ctx = ctx.getNextSibling())\n+          {\n+            if (!\"tr\".equalsIgnoreCase(ctx.getLocalName()))\n+              {\n+                continue;\n+              }\n+            if (index == i)\n+              {\n+                return ctx;\n+              }\n+            i++;\n+          }\n+      }\n+    return null;\n+  }\n+\n+}\n+"}, {"sha": "e21e158b42a774d35724bc56a42521fb428cc583", "filename": "libjava/gnu/xml/dom/html2/DomHTMLTableRowElement.java", "status": "added", "additions": 225, "deletions": 0, "changes": 225, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLTableRowElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLTableRowElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLTableRowElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,225 @@\n+/* DomHTMLTableRowElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import gnu.xml.dom.DomDOMException;\n+import org.w3c.dom.DOMException;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.html2.HTMLCollection;\n+import org.w3c.dom.html2.HTMLElement;\n+import org.w3c.dom.html2.HTMLTableRowElement;\n+\n+/**\n+ * An HTML 'TR' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLTableRowElement\n+  extends DomHTMLElement\n+  implements HTMLTableRowElement\n+{\n+\n+  protected DomHTMLTableRowElement(DomHTMLDocument owner,\n+                                   String namespaceURI,\n+                                   String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public int getRowIndex()\n+  {\n+    return getIndex();\n+  }\n+\n+  public int getSectionRowIndex()\n+  {\n+    int index = 0;\n+    DomHTMLElement parent = (DomHTMLElement) getParentElement(\"table\");\n+    if (parent != null)\n+      {\n+        Node thead = parent.getChildElement(\"thead\");\n+        if (thead != null)\n+          {\n+            for (Node ctx = thead.getFirstChild(); ctx != null;\n+                 ctx = ctx.getNextSibling())\n+              {\n+                if (ctx == this)\n+                  {\n+                    return index;\n+                  }\n+                index++;\n+              }\n+          }\n+        Node tbody = parent.getChildElement(\"tbody\");\n+        if (tbody != null)\n+          {\n+            for (Node ctx = tbody.getFirstChild(); ctx != null;\n+                 ctx = ctx.getNextSibling())\n+              {\n+                if (ctx == this)\n+                  {\n+                    return index;\n+                  }\n+                index++;\n+              }\n+          }\n+        Node tfoot = parent.getChildElement(\"tfoot\");\n+        if (tfoot != null)\n+          {\n+            for (Node ctx = tfoot.getFirstChild(); ctx != null;\n+                 ctx = ctx.getNextSibling())\n+              {\n+                if (ctx == this)\n+                  {\n+                    return index;\n+                  }\n+                index++;\n+              }\n+          }\n+      }\n+    throw new DomDOMException(DOMException.NOT_FOUND_ERR);\n+  }\n+\n+  public HTMLCollection getCells()\n+  {\n+    DomHTMLCollection ret =\n+      new DomHTMLCollection((DomHTMLDocument) getOwnerDocument(), this);\n+    ret.addNodeName(\"th\");\n+    ret.addNodeName(\"td\");\n+    ret.evaluate();\n+    return ret;\n+  }\n+\n+  public String getAlign()\n+  {\n+    return getHTMLAttribute(\"align\");\n+  }\n+\n+  public void setAlign(String align)\n+  {\n+    setHTMLAttribute(\"align\", align);\n+  }\n+  \n+  public String getBgColor()\n+  {\n+    return getHTMLAttribute(\"bgcolor\");\n+  }\n+\n+  public void setBgColor(String bgColor)\n+  {\n+    setHTMLAttribute(\"bgcolor\", bgColor);\n+  }\n+  \n+  public String getCh()\n+  {\n+    return getHTMLAttribute(\"char\");\n+  }\n+\n+  public void setCh(String ch)\n+  {\n+    setHTMLAttribute(\"char\", ch);\n+  }\n+  \n+  public String getChOff()\n+  {\n+    return getHTMLAttribute(\"charoff\");\n+  }\n+\n+  public void setChOff(String chOff)\n+  {\n+    setHTMLAttribute(\"charoff\", chOff);\n+  }\n+  \n+  public String getVAlign()\n+  {\n+    return getHTMLAttribute(\"valign\");\n+  }\n+\n+  public void setVAlign(String vAlign)\n+  {\n+    setHTMLAttribute(\"valign\", vAlign);\n+  }\n+\n+  public HTMLElement insertCell(int index)\n+  {\n+    Node ref = getCell(index);\n+    Node cell = getOwnerDocument().createElement(\"td\");\n+    if (ref == null)\n+      {\n+        appendChild(cell);\n+      }\n+    else\n+      {\n+        insertBefore(cell, ref);\n+      }\n+    return (HTMLElement) cell;\n+  }\n+\n+  public void deleteCell(int index)\n+  {\n+    Node ref = getCell(index);\n+    if (ref == null)\n+      {\n+        throw new DomDOMException(DOMException.INDEX_SIZE_ERR);\n+      }\n+    removeChild(ref);\n+  }\n+  \n+  Node getCell(final int index)\n+  { \n+    int i = 0;\n+    for (Node ctx = getFirstChild(); ctx != null;\n+         ctx = ctx.getNextSibling())\n+      {\n+        String name = ctx.getLocalName();\n+        if (!\"td\".equalsIgnoreCase(name) &&\n+            !\"th\".equalsIgnoreCase(name))\n+          {\n+            continue;\n+          }\n+        if (index == i)\n+          {\n+            return ctx;\n+          }\n+        i++;\n+      }\n+    return null;\n+  }\n+  \n+}\n+"}, {"sha": "45dd67110b73036f6aa3318cfd308f748840c3d4", "filename": "libjava/gnu/xml/dom/html2/DomHTMLTableSectionElement.java", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLTableSectionElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLTableSectionElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLTableSectionElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,158 @@\n+/* DomHTMLTableSectionElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import gnu.xml.dom.DomDOMException;\n+import org.w3c.dom.DOMException;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.html2.HTMLCollection;\n+import org.w3c.dom.html2.HTMLElement;\n+import org.w3c.dom.html2.HTMLTableSectionElement;\n+\n+/**\n+ * An HTML 'THEAD', 'TFOOT', or 'TBODY' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLTableSectionElement\n+  extends DomHTMLElement\n+  implements HTMLTableSectionElement\n+{\n+\n+  protected DomHTMLTableSectionElement(DomHTMLDocument owner,\n+                                       String namespaceURI,\n+                                       String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public String getAlign()\n+  {\n+    return getHTMLAttribute(\"align\");\n+  }\n+\n+  public void setAlign(String align)\n+  {\n+    setHTMLAttribute(\"align\", align);\n+  }\n+  \n+  public String getCh()\n+  {\n+    return getHTMLAttribute(\"char\");\n+  }\n+\n+  public void setCh(String ch)\n+  {\n+    setHTMLAttribute(\"char\", ch);\n+  }\n+  \n+  public String getChOff()\n+  {\n+    return getHTMLAttribute(\"charoff\");\n+  }\n+\n+  public void setChOff(String chOff)\n+  {\n+    setHTMLAttribute(\"charoff\", chOff);\n+  }\n+  \n+  public String getVAlign()\n+  {\n+    return getHTMLAttribute(\"valign\");\n+  }\n+\n+  public void setVAlign(String vAlign)\n+  {\n+    setHTMLAttribute(\"valign\", vAlign);\n+  }\n+\n+  public HTMLCollection getRows()\n+  {\n+    DomHTMLCollection ret =\n+      new DomHTMLCollection((DomHTMLDocument) getOwnerDocument(), this);\n+    ret.addNodeName(\"tr\");\n+    ret.evaluate();\n+    return ret;\n+  }\n+\n+  public HTMLElement insertRow(int index)\n+  {\n+    Node ref = getRow(index);\n+    Node row = getOwnerDocument().createElement(\"tr\");\n+    if (ref == null)\n+      {\n+        appendChild(row);\n+      }\n+    else\n+      {\n+        insertBefore(row, ref);\n+      }\n+    return (HTMLElement) row;\n+  }\n+\n+  public void deleteRow(int index)\n+  {\n+    Node ref = getRow(index);\n+    if (ref == null)\n+      {\n+        throw new DomDOMException(DOMException.INDEX_SIZE_ERR);\n+      }\n+    removeChild(ref);\n+  }\n+  \n+  Node getRow(final int index)\n+  { \n+    int i = 0;\n+    for (Node ctx = getFirstChild(); ctx != null;\n+         ctx = ctx.getNextSibling())\n+      {\n+        if (!\"tr\".equalsIgnoreCase(ctx.getLocalName()))\n+          {\n+            continue;\n+          }\n+        if (index == i)\n+          {\n+            return ctx;\n+          }\n+        i++;\n+      }\n+    return null;\n+  }\n+  \n+}\n+"}, {"sha": "93a918ab999d4f914a93268e042dee7bac23cf57", "filename": "libjava/gnu/xml/dom/html2/DomHTMLTextAreaElement.java", "status": "added", "additions": 182, "deletions": 0, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLTextAreaElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLTextAreaElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLTextAreaElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,182 @@\n+/* DomHTMLTextAreaElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLFormElement;\n+import org.w3c.dom.html2.HTMLTextAreaElement;\n+\n+/**\n+ * An HTML 'TEXTAREA' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLTextAreaElement\n+  extends DomHTMLElement\n+  implements HTMLTextAreaElement\n+{\n+\n+  protected String value;\n+\n+  protected DomHTMLTextAreaElement(DomHTMLDocument owner,\n+                                   String namespaceURI,\n+                                   String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public String getDefaultValue()\n+  {\n+    return getHTMLAttribute(\"value\");\n+  }\n+\n+  public void setDefaultValue(String defaultValue)\n+  {\n+    setHTMLAttribute(\"value\", defaultValue);\n+  }\n+\n+  public HTMLFormElement getForm()\n+  {\n+    return (HTMLFormElement) getParentElement(\"form\");\n+  }\n+  \n+  public String getAccessKey()\n+  {\n+    return getHTMLAttribute(\"accesskey\");\n+  }\n+\n+  public void setAccessKey(String accessKey)\n+  {\n+    setHTMLAttribute(\"accesskey\", accessKey);\n+  }\n+  \n+  public int getCols()\n+  {\n+    return getIntHTMLAttribute(\"cols\");\n+  }\n+\n+  public void setCols(int cols)\n+  {\n+    setIntHTMLAttribute(\"cols\", cols);\n+  }\n+  \n+  public boolean getDisabled()\n+  {\n+    return getBooleanHTMLAttribute(\"disabled\");\n+  }\n+\n+  public void setDisabled(boolean disabled)\n+  {\n+    setBooleanHTMLAttribute(\"disabled\", disabled);\n+  }\n+  \n+  public String getName()\n+  {\n+    return getHTMLAttribute(\"name\");\n+  }\n+\n+  public void setName(String name)\n+  {\n+    setHTMLAttribute(\"name\", name);\n+  }\n+  \n+  public boolean getReadOnly()\n+  {\n+    return getBooleanHTMLAttribute(\"readOnly\");\n+  }\n+\n+  public void setReadOnly(boolean readOnly)\n+  {\n+    setBooleanHTMLAttribute(\"readonly\", readOnly);\n+  }\n+  \n+  public int getRows()\n+  {\n+    return getIntHTMLAttribute(\"rows\");\n+  }\n+\n+  public void setRows(int rows)\n+  {\n+    setIntHTMLAttribute(\"rows\", rows);\n+  }\n+  \n+  public int getTabIndex()\n+  {\n+    return getIntHTMLAttribute(\"tabindex\");\n+  }\n+\n+  public void setTabIndex(int tabIndex)\n+  {\n+    setIntHTMLAttribute(\"tabindex\", tabIndex);\n+  }\n+  \n+  public String getType()\n+  {\n+    return \"textarea\";\n+  }\n+\n+  public String getValue()\n+  {\n+    if (value == null)\n+      {\n+        value = getDefaultValue();\n+      }\n+    return value;\n+  }\n+\n+  public void setValue(String value)\n+  {\n+    this.value = value;\n+  }\n+\n+  public void blur()\n+  {\n+    dispatchUIEvent(\"blur\");\n+  }\n+\n+  public void focus()\n+  {\n+    dispatchUIEvent(\"focus\");\n+  }\n+  \n+  public void select()\n+  {\n+    dispatchUIEvent(\"select\");\n+  }\n+  \n+}\n+"}, {"sha": "1c1105528ac3638e099d94e1449d3ba09bcc2ce2", "filename": "libjava/gnu/xml/dom/html2/DomHTMLTitleElement.java", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLTitleElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLTitleElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLTitleElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,69 @@\n+/* DomHTMLTitleElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLTitleElement;\n+\n+/**\n+ * An HTML 'TITLE' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLTitleElement\n+  extends DomHTMLElement\n+  implements HTMLTitleElement\n+{\n+\n+  protected DomHTMLTitleElement(DomHTMLDocument owner, String namespaceURI,\n+                                String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public String getText()\n+  {\n+    return getTextContent();\n+  }\n+\n+  public void setText(String text)\n+  {\n+    setTextContent(text);\n+  }\n+  \n+}\n+"}, {"sha": "9f6b69249276da3c2509b4176b24ca117fbbe94a", "filename": "libjava/gnu/xml/dom/html2/DomHTMLUListElement.java", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLUListElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLUListElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fxml%2Fdom%2Fhtml2%2FDomHTMLUListElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,79 @@\n+/* DomHTMLUListElement.java -- \n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.xml.dom.html2;\n+\n+import org.w3c.dom.html2.HTMLUListElement;\n+\n+/**\n+ * An HTML 'UL' element node.\n+ *\n+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>\n+ */\n+public class DomHTMLUListElement\n+  extends DomHTMLElement\n+  implements HTMLUListElement\n+{\n+\n+  protected DomHTMLUListElement(DomHTMLDocument owner, String namespaceURI,\n+                                String name)\n+  {\n+    super(owner, namespaceURI, name);\n+  }\n+\n+  public boolean getCompact()\n+  {\n+    return getBooleanHTMLAttribute(\"compact\");\n+  }\n+\n+  public void setCompact(boolean compact)\n+  {\n+    setBooleanHTMLAttribute(\"compact\", compact);\n+  }\n+  \n+  public String getType()\n+  {\n+    return getHTMLAttribute(\"type\");\n+  }\n+\n+  public void setType(String type)\n+  {\n+    setHTMLAttribute(\"type\", type);\n+  }\n+  \n+}\n+"}, {"sha": "bf592a65a974a61267d70d4ca03d25a43ce68ba5", "filename": "libjava/javax/swing/text/ChangedCharSetException.java", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fjavax%2Fswing%2Ftext%2FChangedCharSetException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fjavax%2Fswing%2Ftext%2FChangedCharSetException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftext%2FChangedCharSetException.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,100 @@\n+/* ChangedCharSetException.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.text;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+/**\n+ * The exception is thrown when the document charset is changed.\n+ *\n+ * @author Audrius Meskauskas (AudriusA@Bioinformatics.org)\n+ */\n+public class ChangedCharSetException\n+  extends IOException\n+  implements Serializable\n+{\n+  /**\n+   * Use serialVersionUID for interoperability.\n+   * This value corresponds the version 1.4.\n+   */\n+  private static final long serialVersionUID = 9119851554465432389L;\n+\n+  /**\n+   * The char set specification.\n+   */\n+  private final String m_charSetSpec;\n+\n+  /**\n+   * The char set key.\n+   */\n+  private final boolean m_charSetKey;\n+\n+  /**\n+   * Constructs a new char set exception with two additional parameters,\n+   * defining the circumstances under that the exception was raised.\n+   */\n+  public ChangedCharSetException(String charSetSpec, boolean charSetKey)\n+  {\n+    m_charSetSpec = charSetSpec;\n+    m_charSetKey = charSetKey;\n+  }\n+\n+  /**\n+   * Get the value of the first parameter, previously passed to the\n+   * constructor.\n+   *\n+   * @return the value of the first parameter\n+   */\n+  public String getCharSetSpec()\n+  {\n+    return m_charSetSpec;\n+  }\n+\n+  /**\n+   * Get the value of the second parameter, previously passed to the\n+   * constructor.\n+   *\n+   * @return the value of the second parameter\n+   */\n+  public boolean keyEqualsCharSet()\n+  {\n+    return m_charSetKey;\n+  }\n+}"}, {"sha": "06e0ef403cab4de11781e3479a442089b9be4162", "filename": "libjava/javax/swing/text/html/HTML.java", "status": "modified", "additions": 1238, "deletions": 16, "changes": 1254, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2FHTML.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2FHTML.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2FHTML.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -35,38 +35,1260 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package javax.swing.text.html;\n \n import java.io.Serializable;\n \n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import javax.swing.text.AttributeSet;\n+\n /**\n- * Stub implementation.\n- * Just enough to get gjdoc working.\n- *\n- * @author Mark Wielaard (mark@klomp.org)\n+ * HTML attribute and tag definitions.\n+ * @author Audrius Meskauskas (AudriusA@Bioinformatics.org)\n  */\n public class HTML\n {\n-  public static class Tag\n+  /**\n+   * Represents a HTML attribute.\n+   */\n+  public static class Attribute\n+    implements Serializable\n   {\n-    private final String id;\n+    /**\n+     * The action attribute\n+     */\n+    public static final Attribute ACTION = new Attribute(\"action\");\n \n-    protected Tag(String id)\n+    /**\n+     * The align attribute\n+     */\n+    public static final Attribute ALIGN = new Attribute(\"align\");\n+\n+    /**\n+     * The alink attribute\n+     */\n+    public static final Attribute ALINK = new Attribute(\"alink\");\n+\n+    /**\n+     * The alt attribute\n+     */\n+    public static final Attribute ALT = new Attribute(\"alt\");\n+\n+    /**\n+     * The archive attribute\n+     */\n+    public static final Attribute ARCHIVE = new Attribute(\"archive\");\n+\n+    /**\n+     * The background attribute\n+     */\n+    public static final Attribute BACKGROUND = new Attribute(\"background\");\n+\n+    /**\n+     * The bgcolor attribute\n+     */\n+    public static final Attribute BGCOLOR = new Attribute(\"bgcolor\");\n+\n+    /**\n+     * The border attribute\n+     */\n+    public static final Attribute BORDER = new Attribute(\"border\");\n+\n+    /**\n+     * The cellpadding attribute\n+     */\n+    public static final Attribute CELLPADDING = new Attribute(\"cellpadding\");\n+\n+    /**\n+     * The cellspacing attribute\n+     */\n+    public static final Attribute CELLSPACING = new Attribute(\"cellspacing\");\n+\n+    /**\n+     * The checked attribute\n+     */\n+    public static final Attribute CHECKED = new Attribute(\"checked\");\n+\n+    /**\n+     * The class attribute\n+     */\n+    public static final Attribute CLASS = new Attribute(\"class\");\n+\n+    /**\n+     * The classid attribute\n+     */\n+    public static final Attribute CLASSID = new Attribute(\"classid\");\n+\n+    /**\n+     * The clear attribute\n+     */\n+    public static final Attribute CLEAR = new Attribute(\"clear\");\n+\n+    /**\n+     * The code attribute\n+     */\n+    public static final Attribute CODE = new Attribute(\"code\");\n+\n+    /**\n+     * The codebase attribute\n+     */\n+    public static final Attribute CODEBASE = new Attribute(\"codebase\");\n+\n+    /**\n+     * The codetype attribute\n+     */\n+    public static final Attribute CODETYPE = new Attribute(\"codetype\");\n+\n+    /**\n+     * The color attribute\n+     */\n+    public static final Attribute COLOR = new Attribute(\"color\");\n+\n+    /**\n+     * The cols attribute\n+     */\n+    public static final Attribute COLS = new Attribute(\"cols\");\n+\n+    /**\n+     * The colspan attribute\n+     */\n+    public static final Attribute COLSPAN = new Attribute(\"colspan\");\n+\n+    /**\n+     * The comment attribute\n+     */\n+    public static final Attribute COMMENT = new Attribute(\"comment\");\n+\n+    /**\n+     * The compact attribute\n+     */\n+    public static final Attribute COMPACT = new Attribute(\"compact\");\n+\n+    /**\n+     * The content attribute\n+     */\n+    public static final Attribute CONTENT = new Attribute(\"content\");\n+\n+    /**\n+     * The coords attribute\n+     */\n+    public static final Attribute COORDS = new Attribute(\"coords\");\n+\n+    /**\n+     * The data attribute\n+     */\n+    public static final Attribute DATA = new Attribute(\"data\");\n+\n+    /**\n+     * The declare attribute\n+     */\n+    public static final Attribute DECLARE = new Attribute(\"declare\");\n+\n+    /**\n+     * The dir attribute\n+     */\n+    public static final Attribute DIR = new Attribute(\"dir\");\n+\n+    /**\n+     * The dummy attribute\n+     */\n+    public static final Attribute DUMMY = new Attribute(\"dummy\");\n+\n+    /**\n+     * The enctype attribute\n+     */\n+    public static final Attribute ENCTYPE = new Attribute(\"enctype\");\n+\n+    /**\n+     * The endtag attribute\n+     */\n+    public static final Attribute ENDTAG = new Attribute(\"endtag\");\n+\n+    /**\n+     *  The face attribute\n+     */\n+    public static final Attribute FACE = new Attribute(\"face\");\n+\n+    /**\n+     *  The frameborder attribute\n+     */\n+    public static final Attribute FRAMEBORDER = new Attribute(\"frameborder\");\n+\n+    /**\n+     *  The halign attribute\n+     */\n+    public static final Attribute HALIGN = new Attribute(\"halign\");\n+\n+    /**\n+     *  The height attribute\n+     */\n+    public static final Attribute HEIGHT = new Attribute(\"height\");\n+\n+    /**\n+     *  The href attribute\n+     */\n+    public static final Attribute HREF = new Attribute(\"href\");\n+\n+    /**\n+     *  The hspace attribute\n+     */\n+    public static final Attribute HSPACE = new Attribute(\"hspace\");\n+\n+    /**\n+     *  The http-equiv attribute\n+     */\n+    public static final Attribute HTTPEQUIV = new Attribute(\"http-equiv\");\n+\n+    /**\n+     *  The id attribute\n+     */\n+    public static final Attribute ID = new Attribute(\"id\");\n+\n+    /**\n+     *  The ismap attribute\n+     */\n+    public static final Attribute ISMAP = new Attribute(\"ismap\");\n+\n+    /**\n+     *  The lang attribute\n+     */\n+    public static final Attribute LANG = new Attribute(\"lang\");\n+\n+    /**\n+     *  The language attribute\n+     */\n+    public static final Attribute LANGUAGE = new Attribute(\"language\");\n+\n+    /**\n+     *  The link attribute\n+     */\n+    public static final Attribute LINK = new Attribute(\"link\");\n+\n+    /**\n+     *  The lowsrc attribute\n+     */\n+    public static final Attribute LOWSRC = new Attribute(\"lowsrc\");\n+\n+    /**\n+     *  The marginheight attribute\n+     */\n+    public static final Attribute MARGINHEIGHT = new Attribute(\"marginheight\");\n+\n+    /**\n+     *  The marginwidth attribute\n+     */\n+    public static final Attribute MARGINWIDTH = new Attribute(\"marginwidth\");\n+\n+    /**\n+     *  The maxlength attribute\n+     */\n+    public static final Attribute MAXLENGTH = new Attribute(\"maxlength\");\n+\n+    /**\n+     *  The media attribute\n+     */\n+    public static final Attribute MEDIA = new Attribute(\"media\");\n+\n+    /**\n+     *  The method attribute\n+     */\n+    public static final Attribute METHOD = new Attribute(\"method\");\n+\n+    /**\n+     *  The multiple attribute\n+     */\n+    public static final Attribute MULTIPLE = new Attribute(\"multiple\");\n+\n+    /**\n+     *  The n attribute\n+     */\n+    public static final Attribute N = new Attribute(\"n\");\n+\n+    /**\n+     *  The name attribute\n+     */\n+    public static final Attribute NAME = new Attribute(\"name\");\n+\n+    /**\n+     *  The nohref attribute\n+     */\n+    public static final Attribute NOHREF = new Attribute(\"nohref\");\n+\n+    /**\n+     *  The noresize attribute\n+     */\n+    public static final Attribute NORESIZE = new Attribute(\"noresize\");\n+\n+    /**\n+     *  The noshade attribute\n+     */\n+    public static final Attribute NOSHADE = new Attribute(\"noshade\");\n+\n+    /**\n+     *  The nowrap attribute\n+     */\n+    public static final Attribute NOWRAP = new Attribute(\"nowrap\");\n+\n+    /**\n+     *  The prompt attribute\n+     */\n+    public static final Attribute PROMPT = new Attribute(\"prompt\");\n+\n+    /**\n+     *  The rel attribute\n+     */\n+    public static final Attribute REL = new Attribute(\"rel\");\n+\n+    /**\n+     *  The rev attribute\n+     */\n+    public static final Attribute REV = new Attribute(\"rev\");\n+\n+    /**\n+     *  The rows attribute\n+     */\n+    public static final Attribute ROWS = new Attribute(\"rows\");\n+\n+    /**\n+     *  The rowspan attribute\n+     */\n+    public static final Attribute ROWSPAN = new Attribute(\"rowspan\");\n+\n+    /**\n+     *  The scrolling attribute\n+     */\n+    public static final Attribute SCROLLING = new Attribute(\"scrolling\");\n+\n+    /**\n+     *  The selected attribute\n+     */\n+    public static final Attribute SELECTED = new Attribute(\"selected\");\n+\n+    /**\n+     *  The shape attribute\n+     */\n+    public static final Attribute SHAPE = new Attribute(\"shape\");\n+\n+    /**\n+     *  The shapes attribute\n+     */\n+    public static final Attribute SHAPES = new Attribute(\"shapes\");\n+\n+    /**\n+     *  The size attribute\n+     */\n+    public static final Attribute SIZE = new Attribute(\"size\");\n+\n+    /**\n+     *  The src attribute\n+     */\n+    public static final Attribute SRC = new Attribute(\"src\");\n+\n+    /**\n+     *  The standby attribute\n+     */\n+    public static final Attribute STANDBY = new Attribute(\"standby\");\n+\n+    /**\n+     *  The start attribute\n+     */\n+    public static final Attribute START = new Attribute(\"start\");\n+\n+    /**\n+     *  The style attribute\n+     */\n+    public static final Attribute STYLE = new Attribute(\"style\");\n+\n+    /**\n+     *  The target attribute\n+     */\n+    public static final Attribute TARGET = new Attribute(\"target\");\n+\n+    /**\n+     *  The text attribute\n+     */\n+    public static final Attribute TEXT = new Attribute(\"text\");\n+\n+    /**\n+     *  The title attribute\n+     */\n+    public static final Attribute TITLE = new Attribute(\"title\");\n+\n+    /**\n+     *  The type attribute\n+     */\n+    public static final Attribute TYPE = new Attribute(\"type\");\n+\n+    /**\n+     *  The usemap attribute\n+     */\n+    public static final Attribute USEMAP = new Attribute(\"usemap\");\n+\n+    /**\n+     *  The valign attribute\n+     */\n+    public static final Attribute VALIGN = new Attribute(\"valign\");\n+\n+    /**\n+     *  The value attribute\n+     */\n+    public static final Attribute VALUE = new Attribute(\"value\");\n+\n+    /**\n+     *  The valuetype attribute\n+     */\n+    public static final Attribute VALUETYPE = new Attribute(\"valuetype\");\n+\n+    /**\n+     *  The version attribute\n+     */\n+    public static final Attribute VERSION = new Attribute(\"version\");\n+\n+    /**\n+     *  The vlink attribute\n+     */\n+    public static final Attribute VLINK = new Attribute(\"vlink\");\n+\n+    /**\n+     *  The vspace attribute\n+     */\n+    public static final Attribute VSPACE = new Attribute(\"vspace\");\n+\n+    /**\n+     *  The width attribute\n+     */\n+    public static final Attribute WIDTH = new Attribute(\"width\");\n+    private final String name;\n+\n+    /**\n+     * Creates the attribute with the given name.\n+     */\n+    protected Attribute(String a_name)\n     {\n-      this.id = id;\n+      name = a_name;\n     }\n-  }\n \n-  public static class UnknownTag extends Tag implements Serializable\n-  {\n     /**\n-     * For compatability with Sun's JDK 1.4.2 rev. 5\n+     * Calls compareTo on the tag names (Strings)\n      */\n-    private static final long serialVersionUID = -1534369342247250625L;\n-\n-    public UnknownTag(String id)\n+    public int compareTo(Object other)\n     {\n-      super(id);\n+      return name.compareTo(((Attribute) other).name);\n     }\n+\n+    /**\n+     * The attributes are equal if the names are equal\n+     * (ignoring case)\n+     */\n+    public boolean equals(Object other)\n+    {\n+      if (other == this)\n+        return true;\n+\n+      if (!(other instanceof Attribute))\n+        return false;\n+\n+      Attribute that = (Attribute) other;\n+\n+      return that.name.equalsIgnoreCase(name);\n+    }\n+\n+    /**\n+     * Returns the hash code which corresponds to the string for this tag.\n+     */\n+    public int hashCode()\n+    {\n+      return name == null ? 0 : name.hashCode();\n+    }\n+\n+    /**\n+     * Returns the attribute name. The names of the built-in attributes\n+     * are always returned in lowercase.\n+     */\n+    public String toString()\n+    {\n+      return name;\n+    }\n+\n+    /**\n+     *  Return an array of all attributes, declared in the HTML.Attribute\n+     *  class. WARNING: attributes are the only public fields,\n+     *  expected in this class.\n+     */\n+    static Attribute[] getAllAttributes()\n+    {\n+      Field[] f = Attribute.class.getFields();\n+      Attribute[] attrs = new Attribute[ f.length ];\n+      Field x;\n+      int p = 0;\n+      Attribute a;\n+\n+      for (int i = 0; i < f.length; i++)\n+        {\n+          x = f [ i ];\n+\n+          if ((x.getModifiers() & Modifier.STATIC) != 0)\n+            {\n+              if (x.getType().equals(Attribute.class))\n+                {\n+                  try\n+                    {\n+                      a = (Attribute) x.get(null);\n+                      attrs [ p++ ] = a;\n+                    }\n+                  catch (Exception ex)\n+                    {\n+                      ex.printStackTrace(System.err);\n+                      throw new Error(\"This should never happen, report a bug\");\n+                    }\n+                }\n+            }\n+        }\n+\n+      return attrs;\n+    }\n+  }\n+\n+  /**\n+   * Represents a HTML tag.\n+   */\n+  public static class Tag\n+    implements Comparable, Serializable\n+  {\n+    /**\n+     * The &lt;a&gt; tag\n+     */\n+    public static final Tag A = new Tag(\"a\");\n+\n+    /**\n+     * The &lt;address&gt; tag\n+     */\n+    public static final Tag ADDRESS = new Tag(\"address\");\n+\n+    /**\n+     * The &lt;applet&gt; tag\n+     */\n+    public static final Tag APPLET = new Tag(\"applet\");\n+\n+    /**\n+     * The &lt;area&gt; tag\n+     */\n+    public static final Tag AREA = new Tag(\"area\");\n+\n+    /**\n+     * The &lt;b&gt; tag\n+     */\n+    public static final Tag B = new Tag(\"b\");\n+\n+    /**\n+     * The &lt;base&gt; tag\n+     */\n+    public static final Tag BASE = new Tag(\"base\");\n+\n+    /**\n+     * The &lt;basefont&gt; tag\n+     */\n+    public static final Tag BASEFONT = new Tag(\"basefont\");\n+\n+    /**\n+     * The &lt;big&gt; tag\n+     */\n+    public static final Tag BIG = new Tag(\"big\");\n+\n+    /**\n+     * The &lt;blockquote&gt; tag , breaks flow, block tag.\n+     */\n+    public static final Tag BLOCKQUOTE = new Tag(\"blockquote\", BREAKS | BLOCK);\n+\n+    /**\n+     * The &lt;body&gt; tag , breaks flow, block tag.\n+     */\n+    public static final Tag BODY = new Tag(\"body\", BREAKS | BLOCK);\n+\n+    /**\n+     * The &lt;br&gt; tag , breaks flow.\n+     */\n+    public static final Tag BR = new Tag(\"br\", BREAKS);\n+\n+    /**\n+     * The &lt;caption&gt; tag\n+     */\n+    public static final Tag CAPTION = new Tag(\"caption\");\n+\n+    /**\n+     * The &lt;center&gt; tag , breaks flow.\n+     */\n+    public static final Tag CENTER = new Tag(\"center\", BREAKS);\n+\n+    /**\n+     * The &lt;cite&gt; tag\n+     */\n+    public static final Tag CITE = new Tag(\"cite\");\n+\n+    /**\n+     * The &lt;code&gt; tag\n+     */\n+    public static final Tag CODE = new Tag(\"code\");\n+\n+    /**\n+     * The &lt;dd&gt; tag , breaks flow, block tag.\n+     */\n+    public static final Tag DD = new Tag(\"dd\", BREAKS | BLOCK);\n+\n+    /**\n+     * The &lt;dfn&gt; tag\n+     */\n+    public static final Tag DFN = new Tag(\"dfn\");\n+\n+    /**\n+     * The &lt;dir&gt; tag , breaks flow, block tag.\n+     */\n+    public static final Tag DIR = new Tag(\"dir\", BREAKS | BLOCK);\n+\n+    /**\n+     * The &lt;div&gt; tag , breaks flow, block tag.\n+     */\n+    public static final Tag DIV = new Tag(\"div\", BREAKS | BLOCK);\n+\n+    /**\n+     * The &lt;dl&gt; tag , breaks flow, block tag.\n+     */\n+    public static final Tag DL = new Tag(\"dl\", BREAKS | BLOCK);\n+\n+    /**\n+     * The &lt;dt&gt; tag , breaks flow, block tag.\n+     */\n+    public static final Tag DT = new Tag(\"dt\", BREAKS | BLOCK);\n+\n+    /**\n+     * The &lt;em&gt; tag\n+     */\n+    public static final Tag EM = new Tag(\"em\");\n+\n+    /**\n+     * The &lt;font&gt; tag\n+     */\n+    public static final Tag FONT = new Tag(\"font\");\n+\n+    /**\n+     * The &lt;form&gt; tag , breaks flow.\n+     */\n+    public static final Tag FORM = new Tag(\"form\", BREAKS);\n+\n+    /**\n+     * The &lt;frame&gt; tag\n+     */\n+    public static final Tag FRAME = new Tag(\"frame\");\n+\n+    /**\n+     * The &lt;frameset&gt; tag\n+     */\n+    public static final Tag FRAMESET = new Tag(\"frameset\");\n+\n+    /**\n+     * The &lt;h1&gt; tag , breaks flow, block tag.\n+     */\n+    public static final Tag H1 = new Tag(\"h1\", BREAKS | BLOCK);\n+\n+    /**\n+     * The &lt;h2&gt; tag , breaks flow, block tag.\n+     */\n+    public static final Tag H2 = new Tag(\"h2\", BREAKS | BLOCK);\n+\n+    /**\n+     * The &lt;h3&gt; tag , breaks flow, block tag.\n+     */\n+    public static final Tag H3 = new Tag(\"h3\", BREAKS | BLOCK);\n+\n+    /**\n+     * The &lt;h4&gt; tag , breaks flow, block tag.\n+     */\n+    public static final Tag H4 = new Tag(\"h4\", BREAKS | BLOCK);\n+\n+    /**\n+     * The &lt;h5&gt; tag , breaks flow, block tag.\n+     */\n+    public static final Tag H5 = new Tag(\"h5\", BREAKS | BLOCK);\n+\n+    /**\n+     * The &lt;h6&gt; tag , breaks flow, block tag.\n+     */\n+    public static final Tag H6 = new Tag(\"h6\", BREAKS | BLOCK);\n+\n+    /**\n+     * The &lt;head&gt; tag , breaks flow, block tag.\n+     */\n+    public static final Tag HEAD = new Tag(\"head\", BREAKS | BLOCK);\n+\n+    /**\n+     * The &lt;hr&gt; tag , breaks flow.\n+     */\n+    public static final Tag HR = new Tag(\"hr\", BREAKS);\n+\n+    /**\n+     * The &lt;html&gt; tag , breaks flow.\n+     */\n+    public static final Tag HTML = new Tag(\"html\", BREAKS);\n+\n+    /**\n+     * The &lt;i&gt; tag\n+     */\n+    public static final Tag I = new Tag(\"i\");\n+\n+    /**\n+     * The &lt;img&gt; tag\n+     */\n+    public static final Tag IMG = new Tag(\"img\");\n+\n+    /**\n+     * The &lt;input&gt; tag\n+     */\n+    public static final Tag INPUT = new Tag(\"input\");\n+\n+    /**\n+     * The &lt;isindex&gt; tag , breaks flow.\n+     */\n+    public static final Tag ISINDEX = new Tag(\"isindex\", BREAKS);\n+\n+    /**\n+     * The &lt;kbd&gt; tag\n+     */\n+    public static final Tag KBD = new Tag(\"kbd\");\n+\n+    /**\n+     * The &lt;li&gt; tag , breaks flow, block tag.\n+     */\n+    public static final Tag LI = new Tag(\"li\", BREAKS | BLOCK);\n+\n+    /**\n+     * The &lt;link&gt; tag\n+     */\n+    public static final Tag LINK = new Tag(\"link\");\n+\n+    /**\n+     * The &lt;map&gt; tag\n+     */\n+    public static final Tag MAP = new Tag(\"map\");\n+\n+    /**\n+     * The &lt;menu&gt; tag , breaks flow, block tag.\n+     */\n+    public static final Tag MENU = new Tag(\"menu\", BREAKS | BLOCK);\n+\n+    /**\n+     * The &lt;meta&gt; tag\n+     */\n+    public static final Tag META = new Tag(\"meta\");\n+\n+    /**\n+     * The &lt;nobr&gt; tag\n+     */\n+    public static final Tag NOBR = new Tag(\"nobr\");\n+\n+    /**\n+     * The &lt;noframes&gt; tag , breaks flow, block tag.\n+     */\n+    public static final Tag NOFRAMES = new Tag(\"noframes\", BREAKS | BLOCK);\n+\n+    /**\n+     * The &lt;object&gt; tag\n+     */\n+    public static final Tag OBJECT = new Tag(\"object\");\n+\n+    /**\n+     * The &lt;ol&gt; tag , breaks flow, block tag.\n+     */\n+    public static final Tag OL = new Tag(\"ol\", BREAKS | BLOCK);\n+\n+    /**\n+     * The &lt;option&gt; tag\n+     */\n+    public static final Tag OPTION = new Tag(\"option\");\n+\n+    /**\n+     * The &lt;p&gt; tag , breaks flow, block tag.\n+     */\n+    public static final Tag P = new Tag(\"p\", BREAKS | BLOCK);\n+\n+    /**\n+     * The &lt;param&gt; tag\n+     */\n+    public static final Tag PARAM = new Tag(\"param\");\n+\n+    /**\n+     * The &lt;pre&gt; tag , breaks flow, block tag, preformatted.\n+     */\n+    public static final Tag PRE = new Tag(\"pre\", BREAKS | BLOCK | PREFORMATTED);\n+\n+    /**\n+     * The &lt;s&gt; tag\n+     */\n+    public static final Tag S = new Tag(\"s\");\n+\n+    /**\n+     * The &lt;samp&gt; tag\n+     */\n+    public static final Tag SAMP = new Tag(\"samp\");\n+\n+    /**\n+     * The &lt;script&gt; tag\n+     */\n+    public static final Tag SCRIPT = new Tag(\"script\");\n+\n+    /**\n+     * The &lt;select&gt; tag\n+     */\n+    public static final Tag SELECT = new Tag(\"select\");\n+\n+    /**\n+     * The &lt;small&gt; tag\n+     */\n+    public static final Tag SMALL = new Tag(\"small\");\n+\n+    /**\n+     * The &lt;span&gt; tag\n+     */\n+    public static final Tag SPAN = new Tag(\"span\");\n+\n+    /**\n+     * The &lt;strike&gt; tag\n+     */\n+    public static final Tag STRIKE = new Tag(\"strike\");\n+\n+    /**\n+     * The &lt;strong&gt; tag\n+     */\n+    public static final Tag STRONG = new Tag(\"strong\");\n+\n+    /**\n+     * The &lt;style&gt; tag\n+     */\n+    public static final Tag STYLE = new Tag(\"style\");\n+\n+    /**\n+     * The &lt;sub&gt; tag\n+     */\n+    public static final Tag SUB = new Tag(\"sub\");\n+\n+    /**\n+     * The &lt;sup&gt; tag\n+     */\n+    public static final Tag SUP = new Tag(\"sup\");\n+\n+    /**\n+     * The &lt;table&gt; tag , block tag.\n+     */\n+    public static final Tag TABLE = new Tag(\"table\", BLOCK);\n+\n+    /**\n+     * The &lt;td&gt; tag , breaks flow, block tag.\n+     */\n+    public static final Tag TD = new Tag(\"td\", BREAKS | BLOCK);\n+\n+    /**\n+     * The &lt;textarea&gt; tag , preformatted.\n+     */\n+    public static final Tag TEXTAREA = new Tag(\"textarea\", PREFORMATTED);\n+\n+    /**\n+     * The &lt;th&gt; tag , breaks flow, block tag.\n+     */\n+    public static final Tag TH = new Tag(\"th\", BREAKS | BLOCK);\n+\n+    /**\n+     * The &lt;title&gt; tag , breaks flow, block tag.\n+     */\n+    public static final Tag TITLE = new Tag(\"title\", BREAKS | BLOCK);\n+\n+    /**\n+     * The &lt;tr&gt; tag , block tag.\n+     */\n+    public static final Tag TR = new Tag(\"tr\", BLOCK);\n+\n+    /**\n+     * The &lt;tt&gt; tag\n+     */\n+    public static final Tag TT = new Tag(\"tt\");\n+\n+    /**\n+     * The &lt;u&gt; tag\n+     */\n+    public static final Tag U = new Tag(\"u\");\n+\n+    /**\n+     * The &lt;ul&gt; tag , breaks flow, block tag.\n+     */\n+    public static final Tag UL = new Tag(\"ul\", BREAKS | BLOCK);\n+\n+    /**\n+     * The &lt;var&gt; tag\n+     */\n+    public static final Tag VAR = new Tag(\"var\");\n+\n+    /* Special tags */\n+\n+    /**\n+     * Total number of syntetic tags, delared in the Tag class.\n+     * This must be adjusted if the new synthetic tags are declared.\n+     * Otherwise the HTML.getAllTags() will not work as expected.\n+     */\n+    private static final int TOTAL_SYNTHETIC_TAGS = 3;\n+\n+    /**\n+     * All comments are labeled with this tag.\n+     * This tag is not included into the array, returned by getAllTags().\n+     * toString() returns 'comment'. HTML reader synthesizes this tag.\n+     */\n+    public static final Tag COMMENT = new Tag(\"comment\", SYNTETIC);\n+\n+    /**\n+     *  All text content is labeled with this tag.\n+     *  This tag is not included into the array, returned by getAllTags().\n+     *  toString() returns 'content'. HTML reader synthesizes this tag.\n+     */\n+    public static final Tag CONTENT = new Tag(\"content\", SYNTETIC);\n+\n+    /**\n+     * All text content must be in a paragraph element.\n+     * If a paragraph didn't exist when content was encountered,\n+     * a paragraph is manufactured.\n+     * toString() returns 'implied'. HTML reader synthesizes this tag.\n+     */\n+    public static final Tag IMPLIED = new Tag(\"implied\", SYNTETIC);\n+    final String name;\n+    final int flags;\n+\n+    /**\n+     * Creates a new Tag with the specified id, and with causesBreak\n+     * and isBlock set to false.\n+     */\n+    protected Tag(String id)\n+    {\n+      name = id;\n+      flags = 0;\n+    }\n+\n+    /**\n+     * Creates a new Tag with the specified tag name and\n+     * causesBreak and isBlock properties.\n+     */\n+    protected Tag(String id, boolean causesBreak, boolean isBlock)\n+    {\n+      int f = 0;\n+\n+      if (causesBreak)\n+        {\n+          f |= BREAKS;\n+        }\n+\n+      if (isBlock)\n+        {\n+          f |= BLOCK;\n+        }\n+\n+      flags = f;\n+      name = id;\n+    }\n+\n+    /**\n+     * Create a tag taking flags.\n+     */\n+    Tag(String id, int a_flags)\n+    {\n+      name = id;\n+      flags = a_flags;\n+    }\n+\n+    /**\n+     * Returns true if this tag is a block tag, which is a tag used to\n+     * add structure to a document.\n+     */\n+    public boolean isBlock()\n+    {\n+      return (flags & BLOCK) != 0;\n+    }\n+\n+    /**\n+     * Returns true if this tag is pre-formatted, which is true if\n+     * the tag is either PRE or TEXTAREA\n+     */\n+    public boolean isPreformatted()\n+    {\n+      return (flags & PREFORMATTED) != 0;\n+    }\n+\n+    /**\n+     * Returns true if this tag causes a line break to the flow of text\n+     */\n+    public boolean breaksFlow()\n+    {\n+      return (flags & BREAKS) != 0;\n+    }\n+\n+    /**\n+     * Calls compareTo on the tag names (Strings)\n+     */\n+    public int compareTo(Object other)\n+    {\n+      return name.compareTo(((Tag) other).name);\n+    }\n+\n+    /**\n+     * The tags are equal if the names are equal (ignoring case).\n+     */\n+    public boolean equals(Object other)\n+    {\n+      if (other == this)\n+        {\n+          return true;\n+        }\n+\n+      if (!(other instanceof Tag))\n+        {\n+          return false;\n+        }\n+\n+      Tag that = (Tag) other;\n+\n+      return that.name.equalsIgnoreCase(name);\n+    }\n+\n+    /**\n+     * Returns the hash code which corresponds to the string for this tag.\n+     */\n+    public int hashCode()\n+    {\n+      return name == null ? 0 : name.hashCode();\n+    }\n+\n+    /**\n+     * Returns the tag name. The names of the built-in tags are always\n+     * returned in lowercase.\n+     */\n+    public String toString()\n+    {\n+      return name;\n+    }\n+\n+    /**\n+     * Return an array of HTML tags, declared in HTML.Tag class.\n+     * WARNING: This method expects that the Tags are the only\n+     * public fields declared in the Tag class.\n+     */\n+    static Tag[] getAllTags()\n+    {\n+      Field[] f = Tag.class.getFields();\n+      Field x;\n+\n+      // The syntetic tags are not included.\n+      Tag[] tags = new Tag[ f.length - TOTAL_SYNTHETIC_TAGS ];\n+      int p = 0;\n+      Tag t;\n+\n+      for (int i = 0; i < f.length; i++)\n+        {\n+          x = f [ i ];\n+\n+          if ((x.getModifiers() & Modifier.STATIC) != 0)\n+            {\n+              if (x.getType().equals(Tag.class))\n+                {\n+                  try\n+                    {\n+                      t = (Tag) x.get(null);\n+\n+                      if (!t.isSyntetic())\n+                        {\n+                          tags [ p++ ] = t;\n+                        }\n+                    }\n+                  catch (IllegalAccessException ex)\n+                    {\n+                      unexpected(ex);\n+                    }\n+                  catch (IllegalArgumentException ex)\n+                    {\n+                      unexpected(ex);\n+                    }\n+                }\n+            }\n+        }\n+\n+      return tags;\n+    }\n+\n+    /**\n+     * Returns true for tags, generated by the html reader\n+     * (COMMENT, CONTENT and IMPLIED).\n+     */\n+    boolean isSyntetic()\n+    {\n+      return (flags & SYNTETIC) != 0;\n+    }\n+\n+    private static void unexpected(Exception ex)\n+                            throws Error\n+    {\n+      throw new Error(\"This should never happen, report a bug\", ex);\n+    }\n+  }\n+\n+  /**\n+   * Represents an unknown HTML tag.\n+   * @author Mark Wielaard (mark@klomp.org)\n+   */\n+  public static class UnknownTag\n+    extends Tag\n+    implements Serializable\n+  {\n+    private static final long serialVersionUID = -1534369342247250625L;\n+\n+    /**\n+     * Creates a new UnknownTag with the specified name\n+     * @param name The tag name.\n+     *\n+     */\n+    public UnknownTag(String name)\n+    {\n+      super(name);\n+    }\n+  }\n+\n+  /**\n+   * This value is returned for attributes without value that have no\n+   * default value defined in the DTD.\n+   */\n+  public static final String NULL_ATTRIBUTE_VALUE = \"#DEFAULT\";\n+\n+  /* Package level html tag flags */\n+  static final int BREAKS = 1;\n+  static final int BLOCK = 2;\n+  static final int PREFORMATTED = 4;\n+  static final int SYNTETIC = 8;\n+  private static Map tagMap;\n+  private static Map attrMap;\n+\n+  /**\n+   * The public constructor (does nothing). It it seldom required to have\n+   * an instance of this class, because all public fields and methods\n+   * are static.\n+   */\n+  public HTML()\n+  {\n+  }\n+\n+  /**\n+   * Returns the set of the recognized HTML attributes.\n+   */\n+  public static HTML.Attribute[] getAllAttributeKeys()\n+  {\n+    return Attribute.getAllAttributes();\n+  }\n+\n+  /**\n+   * Returns the set of actual HTML tags that are recognized by\n+   * the default HTML reader. The returned array does not include the\n+   * COMMENT, CONTENT and IMPLIED tags.\n+   */\n+  public static HTML.Tag[] getAllTags()\n+  {\n+    return Tag.getAllTags();\n+  }\n+\n+  /**\n+   * Returns an htl attribute constant for the given attribute name.\n+   * @param attName the attribute name, case insensitive\n+   */\n+  public static Attribute getAttributeKey(String attName)\n+  {\n+    if (attrMap == null)\n+      {\n+        // Create the map on demand.\n+        attrMap = new TreeMap();\n+\n+        Attribute[] attrs = getAllAttributeKeys();\n+\n+        for (int i = 0; i < attrs.length; i++)\n+          {\n+            attrMap.put(attrs [ i ].toString(), attrs [ i ]);\n+          }\n+      }\n+\n+    return (Attribute) attrMap.get(attName.toLowerCase());\n+  }\n+\n+  /**\n+   * Searches the value of given attribute in the provided set.\n+   * If the value is found (String type expected), tries to parse it as\n+   * an integer value. If succeded, returns the obtained integer value.\n+   *\n+   * For example:<p><code>\n+   * SimpleAttributeSet ase = new SimpleAttributeSet();\n+   * ase.addAttribute(HTML.getAttributeKey(\"size\"),\"222\");\n+   * System.out.println(\n+   *  HTML.getIntegerAttributeValue\n+   *     (ase, HTML.getAttributeKey(\"size\"), 333)); // prints \"222\"\n+   * System.out.println(\n+   *  HTML.getIntegerAttributeValue\n+   *     (ase, HTML.getAttributeKey(\"width\"), 333)); // prints \"333\".\n+   * </code></p>\n+   *\n+   *\n+   * @param set The attribute set to search in. If the set contains the\n+   * given attribute, it must by a type of String.\n+   * @param attribute The html attribute to search in\n+   * @param defaultValue The value that is returned if the attribute is not\n+   * found in the given set or if the NumberFormatException was thrown\n+   * during the parsing.\n+   */\n+  public static int getIntegerAttributeValue(AttributeSet set,\n+                                             HTML.Attribute attribute,\n+                                             int defaultValue\n+                                            )\n+  {\n+    Object v = set.getAttribute(attribute);\n+\n+    if (v == null)\n+      {\n+        return defaultValue;\n+      }\n+\n+    try\n+      {\n+        return Integer.parseInt(v.toString().trim());\n+      }\n+    catch (Exception ex)\n+      {\n+        return defaultValue;\n+      }\n+  }\n+\n+  /**\n+   * Returns a HTML tag constant for the given HTML attribute name.\n+   * If the tag is unknown, the null is returned.\n+   * @param tagName the tag name, case insensitive\n+   */\n+  public static Tag getTag(String tagName)\n+  {\n+    if (tagMap == null)\n+      {\n+        // Create the mao on demand.\n+        tagMap = new TreeMap();\n+\n+        Tag[] tags = getAllTags();\n+\n+        for (int i = 0; i < tags.length; i++)\n+          {\n+            tagMap.put(tags [ i ].toString(), tags [ i ]);\n+          }\n+      }\n+\n+    return (Tag) tagMap.get(tagName.toLowerCase());\n   }\n }"}, {"sha": "45c87c7b7fd7ebbb11e8a8713b059160b3269c84", "filename": "libjava/javax/swing/text/html/HTMLDocument.java", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2FHTMLDocument.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2FHTMLDocument.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2FHTMLDocument.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,53 @@\n+/* HTMLDocument.java --\n+   Copyright (C) 2005  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.text.html;\n+\n+import javax.swing.text.DefaultStyledDocument;\n+\n+/**\n+ * TODO: This class is not yet completetely implemented.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class HTMLDocument extends DefaultStyledDocument\n+{\n+  public void processHTMLFrameHyperlinkEvent(HTMLFrameHyperlinkEvent event)\n+  {\n+  }\n+}"}, {"sha": "742eab36eb719082c7b0001d394011dfbe581861", "filename": "libjava/javax/swing/text/html/HTMLEditorKit.java", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2FHTMLEditorKit.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2FHTMLEditorKit.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2FHTMLEditorKit.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,173 @@\n+/* HTMLEditorKit.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.text.html;\n+\n+import java.io.Reader;\n+\n+import javax.swing.text.BadLocationException;\n+import javax.swing.text.MutableAttributeSet;\n+\n+/**\n+ * This class is NOT implemented. This file currently holds only\n+ * declarations of the two enclosing classes, necessary for testing\n+ * the implemented javax.swing.text.html.parser package.\n+ * @author No authorship is taken, implement the class and be!\n+ * TODO: replace this header after implementing the class.\n+ */\n+public class HTMLEditorKit\n+{\n+  /**\n+   * The abstract HTML parser declaration.\n+   */\n+  public abstract static class Parser\n+  {\n+    /**\n+     * Parse the HTML text, calling various methods of the provided callback\n+     * in response to the occurence of the corresponding HTML constructions.\n+     * @param reader The reader to read the source HTML from.\n+     * @param callback The callback to receive information about the parsed\n+     * HTML structures\n+     * @param ignoreCharSet If true, the parser ignores all charset information\n+     * that may be present in HTML documents.\n+     * @throws IOException, normally if the reader throws one.\n+     */\n+    public abstract void parse(Reader reader, ParserCallback callback,\n+                               boolean ignoreCharSet\n+                              )\n+                        throws java.io.IOException;\n+  }\n+\n+  /**\n+   * The \"hook\" that receives all information about the HTML document\n+   * structure while parsing it. The methods are invoked by parser\n+   * and should be normally overridden.\n+   */\n+  public static class ParserCallback\n+  {\n+    /**\n+     * If the tag does not occurs in the html stream directly, but\n+     * is supposed by parser, the tag attribute set contains this additional\n+     * attribute, having value Boolean.True.\n+     */\n+    public static final Object IMPLIED = \"_implied_\";\n+\n+    /**\n+     * The parser calls this method after it finishes parsing the document.\n+     */\n+    public void flush()\n+               throws BadLocationException\n+    {\n+    }\n+\n+    /**\n+     * Handle HTML comment, present in the given position.\n+     * @param comment the comment\n+     * @position the position of the comment in the text being parsed.\n+     */\n+    public void handleComment(char[] comment, int position)\n+    {\n+    }\n+\n+    /**\n+     * Notifies about the character sequences, used to separate lines in\n+     * this document. The parser calls this method after it finishes\n+     * parsing the document, but before flush().\n+     * @param end_of_line The \"end of line sequence\", one of: \\r or \\n or \\r\\n.\n+     */\n+    public void handleEndOfLineString(String end_of_line)\n+    {\n+    }\n+\n+    /**\n+     * The method is called when the HTML closing tag ((like &lt;/table&gt;)\n+     * is found or if the parser concludes that the one should be present\n+     * in the current position.\n+     * @param The tag being handled\n+     * @position the tag position in the text being parsed.\n+     */\n+    public void handleEndTag(HTML.Tag tag, int position)\n+    {\n+    }\n+\n+    /**\n+     * Handle the error.\n+     * @param message The message, explaining the error.\n+     * @param position The starting position of the fragment that has caused\n+     * the error in the html document being parsed.\n+     */\n+    public void handleError(String message, int position)\n+    {\n+    }\n+\n+    /**\n+     * Handle the tag with no content, like &lt;br&gt;. The method is\n+     * called for the elements that, in accordance with the current DTD,\n+     * has an empty content.\n+     * @param tag The tag being handled.\n+     * @param position The tag position in the text being parsed.\n+     */\n+    public void handleSimpleTag(HTML.Tag tag, MutableAttributeSet attributes,\n+                                int position\n+                               )\n+    {\n+    }\n+\n+    /**\n+     * The method is called when the HTML opening tag ((like &lt;table&gt;)\n+     * is found or if the parser concludes that the one should be present\n+     * in the current position.\n+     * @param tag The tag being handled\n+     * @param position The tag position in the text bein parsed\n+     */\n+    public void handleStartTag(HTML.Tag tag, MutableAttributeSet attributes,\n+                               int position\n+                              )\n+    {\n+    }\n+\n+    /**\n+     * Handle the text section.\n+     * @param text A section text.\n+     * @param position The text position in the HTML document text being parsed.\n+     */\n+    public void handleText(char[] text, int position)\n+    {\n+    }\n+  }\n+}"}, {"sha": "82de2a8035589de171150d6e57054b5926bf795d", "filename": "libjava/javax/swing/text/html/HTMLFrameHyperlinkEvent.java", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2FHTMLFrameHyperlinkEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2FHTMLFrameHyperlinkEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2FHTMLFrameHyperlinkEvent.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,132 @@\n+/* HTMLFrameHyperlinkEvent.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.text.html;\n+\n+import java.net.URL;\n+\n+import javax.swing.event.HyperlinkEvent;\n+import javax.swing.event.HyperlinkEvent.EventType;\n+import javax.swing.text.Element;\n+\n+/**\n+ * HTMLFrameHyperlinkEvent transfers information about the link that was\n+ * activated in a frame.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class HTMLFrameHyperlinkEvent\n+  extends HyperlinkEvent\n+{\n+  private final String target_frame;\n+\n+  /**\n+   * Creates a new hypertext link event.\n+   *\n+   * @param source The object this link is associated to.\n+   * @param type The type of event.\n+   * @param url The URL this link pointing too.\n+   * @param element The element in the document representing the anchor.\n+   * @param frame - the Frame to display the document in.\n+   */\n+  public HTMLFrameHyperlinkEvent(Object source, EventType type, URL url,\n+                                 Element element, String frame)\n+  {\n+    super(source, type, url, frame, element);\n+    target_frame = frame;\n+  }\n+\n+  /**\n+   * Creates a new hypertext link event.\n+   *\n+   * @param source The object this link is associated to.\n+   * @param type The type of event.\n+   * @param url The URL this link pointing too.\n+   * @param frame - the Frame to display the document in.\n+   */\n+  public HTMLFrameHyperlinkEvent(Object source, EventType type, URL url,\n+                                 String frame)\n+  {\n+    super(source, type, url, frame);\n+    target_frame = frame;\n+  }\n+\n+  /**\n+   * Creates a new hypertext link event.\n+   *\n+   * @param source The object this link is associated to.\n+   * @param type The type of event.\n+   * @param url The URL this link pointing too.\n+   * @param description The description for this link.\n+   * @param element The element in the document representing the anchor.\n+   * @param frame - the Frame to display the document in.\n+   */\n+  public HTMLFrameHyperlinkEvent(Object source, EventType type, URL url,\n+                                 String description, Element element,\n+                                 String frame)\n+  {\n+    super(source, type, url, description, element);\n+    target_frame = frame;\n+  }\n+\n+  /**\n+   * Creates a new hypertext link event.\n+   *\n+   * @param source The object this link is associated to.\n+   * @param type The type of event.\n+   * @param url The URL this link pointing too.\n+   * @param description The description for this link.\n+   * @param frame - the Frame to display the document in.\n+   */\n+  public HTMLFrameHyperlinkEvent(Object source, EventType type, URL url,\n+                                 String description, String frame)\n+  {\n+    super(source, type, url, description);\n+    target_frame = frame;\n+  }\n+\n+  /**\n+   * Gets the string, passed as the target frame identifier.\n+   *\n+   * @return the target for the link.\n+   */\n+  public String getTarget()\n+  {\n+    return target_frame;\n+  }\n+}"}, {"sha": "c74f35953ab1e9912a8ffc5636c819903cf7edc5", "filename": "libjava/javax/swing/text/html/parser/AttributeList.java", "status": "added", "additions": 294, "deletions": 0, "changes": 294, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FAttributeList.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FAttributeList.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FAttributeList.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,294 @@\n+/* AttributeList.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.text.html.parser;\n+\n+import gnu.javax.swing.text.html.parser.support.gnuStringIntMapper;\n+\n+import java.io.Serializable;\n+\n+import java.util.Enumeration;\n+import java.util.Vector;\n+\n+/**\n+ * <p>\n+ * Stores the attribute information, obtained by parsing SGML (DTD) tag\n+ * <code>&lt;!ATTLIST .. &gt;</code></p>\n+ * <p>\n+ * Elements can have a associated named properties (attributes) having the\n+ * assigned values. The element start tag can have any number of attribute\n+ * value pairs, separated by spaces. They can appear in any order.\n+ * SGML requires you to delimit the attribute values using either double (\")\n+ * or single (') quotation marks.  In HTML, it is possible\n+ * (but not recommended) to specify the value of an attribute without\n+ * quotation marks. Such attribute value may only contain\n+ * letters, digits, hyphens (-) and periods (.) .\n+ * </p>\n+ * <p>\n+ * The <code>AttributeList</code> defines a single attribute that additionally\n+ * has a pointer referencing the possible subsequent attribute.\n+ * The whole structure is just a simple linked list, storing all attributes of\n+ * some <code>Element</code>.\n+ * Use the <code>getNext()</code> method repeatedly to see all attributes in\n+ * the list.\n+ * </p>\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public final class AttributeList\n+  implements DTDConstants, Serializable\n+{\n+  /** Maps between type names and they string values. */\n+  private static final gnuStringIntMapper mapper =\n+    new gnuStringIntMapper()\n+    {\n+      protected void create()\n+      {\n+        add(\"CDATA\", DTDConstants.CDATA);\n+        add(\"ENTITY\", DTDConstants.ENTITY);\n+        add(\"ENTITIES\", DTDConstants.ENTITIES);\n+        add(\"ID\", DTDConstants.ID);\n+        add(\"IDREF\", DTDConstants.IDREF);\n+        add(\"IDREFS\", DTDConstants.IDREFS);\n+        add(\"NAME\", DTDConstants.NAME);\n+        add(\"NAMES\", DTDConstants.NAMES);\n+        add(\"NMTOKEN\", DTDConstants.NMTOKEN);\n+        add(\"NMTOKENS\", DTDConstants.NMTOKENS);\n+        add(\"NOTATION\", DTDConstants.NOTATION);\n+        add(\"NUMBER\", DTDConstants.NUMBER);\n+        add(\"NUMBERS\", DTDConstants.NUMBERS);\n+        add(\"NUTOKEN\", DTDConstants.NUTOKEN);\n+        add(\"NUTOKENS\", DTDConstants.NUTOKENS);\n+      }\n+    };\n+\n+  /** Use serialVersionUID for interoperability. */\n+  private static final long serialVersionUID = -1361214058742015233L;\n+\n+  /**\n+   * The value of ( = pointer to ) the next attribute in the linked list,\n+   * storing all attributes of some Element. Contains null for the\n+   * last attribute.\n+   */\n+  public AttributeList next;\n+\n+  /**\n+   * The name of the attribute. The attribute names are case insensitive.\n+   */\n+  public String name;\n+\n+  /**\n+   * The default value of this attribute. Equals to null if no default value\n+   * is specified.\n+   */\n+  public String value;\n+\n+  /**\n+   * The explicit set of the allowed values of this attribute. Equals to\n+   * null, if this parameter was not specified.\n+   * Values, defined in DTD, are case insensitive.\n+   */\n+  public Vector values;\n+\n+  /**\n+   * The modifier of this attribute. This field contains one of the\n+   * following DTD constants:\n+   * <ul>\n+   * <li> REQUIRED if the attribute value is always required,</li>\n+   * <li> IMPLIED if the user agent must supply the default value itself,</li>\n+   * <li> FIXED if the attribute value is fixed to some value and cannot\n+   * be changed.</li>\n+   * <li> DEFAULT if the attribute default value has been supplied.</li>\n+   * <li> CURRENT the value that at any point in the document is\n+   * the last value supplied for that element. A value is required to be\n+   * supplied for the first* occurrence of an element</li>\n+   * <li> CONREF specifies the IDREF value of\n+   * the reference to content in another location of the document.\n+   * The element with this attribute is empty, the content from\n+   * that another location must be used instead.</li>\n+   * </ul>\n+   */\n+  public int modifier;\n+\n+  /**\n+   * The type of the attribute. The possible values of this field\n+   * (NUMBER, NAME, ID, CDATA and so on) are defined in DTDConstants.\n+   */\n+  public int type;\n+\n+  /**\n+   * Creates the attribute with the given name, initializing other fields\n+   * to the default values ( 0 and null ).\n+   *\n+   * @param a_name The name of the attribute.\n+   */\n+  public AttributeList(String a_name)\n+  {\n+    name = a_name;\n+  }\n+\n+  /**\n+   * Creates the attribute with the given properties.\n+   * @param a_name The name of the attribute\n+   * @param a_type The type of the attribute. The possible values are defined\n+   * in <code> DTDConstants</code>.\n+   * @param a_modifier The modifier of this attribute. The possible values\n+   * are defined in <code> DTDConstants</code>.\n+   * @param a_default The default value of this attribute\n+   * @param allowed_values The explicit set of the allowed values of\n+   * this attribute\n+   * @param a_next The value of the subsequent instance of the AttributeList,\n+   * representing the next attribute definition for the same element.\n+   * Equals to null for the last attribute definition.\n+   */\n+  public AttributeList(String a_name, int a_type, int a_modifier,\n+                       String a_default, Vector allowed_values,\n+                       AttributeList a_next\n+                      )\n+  {\n+    this(a_name);\n+    type = a_type;\n+    modifier = a_modifier;\n+    value = a_default;\n+    values = allowed_values;\n+    next = a_next;\n+  }\n+\n+  /**\n+   * Get the modifier of this attribute. This field contains one of the\n+   * following DTD constants:\n+   * <ul>\n+   * <li> REQUIRED if the attribute value is always required,</li>\n+   * <li> IMPLIED if the user agent must supply the default value itself,</li>\n+   * <li> FIXED if the attribute value is fixed to some value and cannot\n+   * be changed.</li>\n+   * <li> DEFAULT if the attribute default value has been supplied.</li>\n+   * <li> CURRENT the value that at any point in the document is\n+   * the last value supplied for that element. A value is required to be\n+   * supplied for the first* occurrence of an element</li>\n+   * <li> CONREF specifies the IDREF value of\n+   * the reference to content in another location of the document.\n+   * The element with this attribute is empty, the content from\n+   * that another location must be used instead.</li>\n+   * </ul>\n+   */\n+  public int getModifier()\n+  {\n+    return modifier;\n+  }\n+\n+  /**\n+   * Get the name of the attribute.\n+   * The value is returned as it was supplied to a\n+   * constructor, preserving the character case.\n+   */\n+  public String getName()\n+  {\n+    return name;\n+  }\n+\n+  /**\n+   * Get the value of ( = pointer to ) the next attribute in the linked list,\n+   * storing all attributes of some Element. Contains null for the\n+   * last attribute.\n+   */\n+  public AttributeList getNext()\n+  {\n+    return next;\n+  }\n+\n+  /**\n+   * Get the type of the attribute. The possible values of this field\n+   * (NUMBER, NAME, ID, CDATA and so on) are defined in DTDConstants.\n+   */\n+  public int getType()\n+  {\n+    return type;\n+  }\n+\n+  /**\n+   * Get the default value of this attribute.\n+   */\n+  public String getValue()\n+  {\n+    return value;\n+  }\n+\n+  /**\n+   * Get the allowed values of this attribute.\n+   */\n+  public Enumeration getValues()\n+  {\n+    return values.elements();\n+  }\n+\n+  /**\n+   * Converts a string value, representing a valid SGLM attribute type,\n+   * into the corresponding value, defined in DTDConstants.\n+   * @param typeName the name of the type (character case is ignored).\n+   * @return a value from DTDConstants or DTDConstants.ANY if the\n+   * string is not representing a known type. The known attribute types\n+   * in this implementation are CDATA, ENTITY, ENTITIES, ID, IDREF, IDREFS,\n+   *  NAME, NAMES, NMTOKEN, NMTOKENS, NOTATION, NUMBER, NUMBERS, NUTOKEN and\n+   *  NUTOKENS.\n+   * @throws NullPointerException if the passed parameter is null.\n+   */\n+  public static int name2type(String typeName)\n+  {\n+    return mapper.get(typeName.toUpperCase());\n+  }\n+\n+  /**\n+   * Returns the attribute name.\n+   */\n+  public String toString()\n+  {\n+    return name;\n+  }\n+\n+  /**\n+   * Converts a value from DTDConstants into the string representation.\n+   * @param type - an integer value of the public static integer field,\n+   * defined in the DTDConstants class.\n+   * @return a corresponding SGML DTD keyword (UPPERCASE) or null if there\n+   * are no attribute type constant having the given value.\n+   */\n+  public static String type2name(int type)\n+  {\n+    return mapper.get(type);\n+  }\n+}"}, {"sha": "7c8ff35a25074933e927610399d0189129d35b15", "filename": "libjava/javax/swing/text/html/parser/ContentModel.java", "status": "added", "additions": 218, "deletions": 0, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FContentModel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FContentModel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FContentModel.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,218 @@\n+/* ContentModel.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.text.html.parser;\n+\n+import gnu.javax.swing.text.html.parser.models.transformer;\n+\n+import java.io.Serializable;\n+\n+import java.util.Vector;\n+\n+/**\n+ * A representation of the element content. The instances of this class\n+ * can be arranged into the linked list, representing a BNF expression.\n+ * The content model is constructed as a branched tree structure in the\n+ * following way:\n+ * <pre>\n+ * a = new ContentModel('+', A, null); // a reprensents A+\n+ * b = new ContentModel('&amp;', B, a); // b represents B &amp; A+\n+ * c = new ContentModel('*', b, null); // c represents ( B &amp; A+) *\n+ * d = new ContentModel('|', new ContentModel('*', A, null),\n+ *          new ContentModel('?', B, null)); // d represents ( A* | B? )\n+ * </pre>\n+ * where the valid operations are:\n+ * <ul>\n+ * <li><code>E* </code> E occurs zero or more times</li>\n+ * <li><code>E+ </code> E occurs one or more times</li>\n+ * <li><code>E? </code> E occurs once or not atl all</li>\n+ * <li><code>A,B</code> A occurs before B</li>\n+ * <li><code>A|B</code> both A and B are permitted in any order.\n+ * The '|' alone does not permit the repetetive occurence of A or B\n+ * (use <code>(A|B)*</code>.</li>\n+ * <li><code>A&amp;B</code> both A and B must occur once (in any order)</li>\n+ * </ul>\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public final class ContentModel\n+  implements Serializable\n+{\n+  /** Use serialVersionUID for interoperability. */\n+  private static final long serialVersionUID = -1130825523866321257L;\n+\n+  /**\n+   * The next content model model ( = pointer to the next element of\n+   * the linked list) for the binary expression (',','&amp;' or '|'). Null\n+   * for the last element in the list.\n+   */\n+  public ContentModel next;\n+\n+  /**\n+   * The document content, containing either Element or the enclosed\n+   * content model (that would be in the parentheses in BNF expression).\n+   */\n+  public Object content;\n+\n+  /**\n+   * Specifies the BNF operation between this node and the node,\n+   * stored in the field <code>next</code> (or for this node, if it is\n+   * an unary operation.\n+   */\n+  public int type;\n+\n+  /** Create a content model initializing all fields to default values. */\n+  public ContentModel()\n+  {\n+  }\n+\n+  /**\n+   * Create a content model, consisting of the single element.\n+   * Examples:\n+   *<code>\n+   * a = new ContentModel('+', A, null); // a reprensents A+\n+   * b = new ContentModel('&amp;', B, a);    // b represents  B &amp; A+\n+   * c = new ContentModel('*', b, null); // c represents  ( B &amp; A+) *\n+   * d = new ContentModel('|', A,\n+   *    new ContentModel('?',b, null);\n+   *     // d represents\n+   * </code>\n+   */\n+  public ContentModel(Element a_content)\n+  {\n+    content = a_content;\n+  }\n+\n+  /**\n+   * Create a content model, involving expression of the given type.\n+   * @param a_type The expression operation type ('*','?' or '+'\n+   * @param a_content The content for that the expression is applied.\n+   */\n+  public ContentModel(int a_type, ContentModel a_content)\n+  {\n+    content = a_content;\n+    type = a_type;\n+  }\n+\n+  /**\n+   * Create a content model, involving binary expression of the given type.\n+   * @param a_type The expression operation type ( ',', '|' or '&amp;').\n+   * @param a_content The content of the left part of the expression.\n+   * @param a_next The content model, representing the right part of the\n+   * expression.\n+   */\n+  public ContentModel(int a_type, Object a_content, ContentModel a_next)\n+  {\n+    content = a_content;\n+    type = a_type;\n+    next = a_next;\n+  }\n+\n+  /**\n+   * Adds all list elements to the given vector, ignoring the\n+   * operations between the elements. The old vector values are not\n+   * discarded.\n+   * @param elements - a vector to add the values to.\n+   */\n+  public void getElements(Vector elements)\n+  {\n+    ContentModel c = this;\n+\n+    while (c != null)\n+      {\n+        elements.add(c.content);\n+        c = c.next;\n+      }\n+  }\n+\n+  /**\n+   * Checks if the content model matches an empty input stream.\n+   * The empty content is created using SGML DTD keyword EMPTY.\n+   * The empty model is a model with the content field equal to null.\n+   *\n+   * @return true if the content field is equal to null.\n+   */\n+  public boolean empty()\n+  {\n+    return content == null;\n+  }\n+\n+  /**\n+   * Get the element, stored in the <code>next.content</code>.\n+   * The method is programmed as the part of the standard API, but not\n+   * used in this implementation.\n+   * @return the value of the field <code>next</code>.\n+   */\n+  public Element first()\n+  {\n+    return (Element) next.content;\n+  }\n+\n+  /**\n+   * Checks if this object can potentially be the first token in the\n+   * ContenModel list. The method is programmed as the part of the\n+   *  standard API, but not used in this implementation.\n+   */\n+  public boolean first(Object token)\n+  {\n+    ContentModel c = this;\n+    while (c.next != null)\n+      {\n+        if (c.content != null && c.content.toString().equals(token.toString()) &&\n+            c.type != ','\n+           )\n+\n+          // Agree if the operation with the preceeding element\n+          // is not the comma operation.\n+          return true;\n+        c = c.next;\n+      }\n+    return false;\n+  }\n+\n+  /**\n+   * Returns a string representation (an expression) of this content model.\n+   * The expression has BNF-like syntax, except the absence of the\n+   * unary operator is additionally indicated by \" ' \". It is\n+   * advisable to check the created models for correctness using this\n+   * method.\n+   */\n+  public String toString()\n+  {\n+    return transformer.transform(this).toString();\n+  }\n+}"}, {"sha": "270c8158f9e5cc1c9fc0c7a9370655a456059a8c", "filename": "libjava/javax/swing/text/html/parser/DTD.java", "status": "added", "additions": 607, "deletions": 0, "changes": 607, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FDTD.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FDTD.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FDTD.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,607 @@\n+/* DTD.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.text.html.parser;\n+\n+import java.io.DataInputStream;\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.BitSet;\n+import java.util.Hashtable;\n+import java.util.StringTokenizer;\n+import java.util.Vector;\n+\n+/**\n+ * <p>Representation or the SGML DTD document.\n+ * Provides basis for describing a syntax of the\n+ * HTML documents. The fields of this class are NOT initialized in\n+ * constructor. You need to do this separately before passing this data\n+ * structure to the HTML parser. The subclasses with the fields, pre-\n+ * initialized, for example, for HTML 4.01, can be available only between\n+ * the implementation specific classes\n+ * ( for example, {@link gnu.javax.swing.text.html.parser.HTML_401F }\n+ * in this implementation).</p>\n+ * <p>\n+ * If you need more information about SGML DTD documents,\n+ * the author suggests to read SGML tutorial on\n+ * {@link http://www.w3.org/TR/WD-html40-970708/intro/sgmltut.html}.\n+ * We also recommend Goldfarb C.F (1991) <i>The SGML Handbook</i>,\n+ * Oxford University Press, 688 p, ISBN: 0198537379.\n+ * </p>\n+ * <p>\n+ * Warning: the html, head and other tag fields will only be automatically\n+ * assigned if the VM has the correctly implemented reflection mechanism.\n+ * As these fields are not used anywhere in the implementation, not\n+ * exception will be thrown in the opposite case.\n+ * </p>\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class DTD\n+  implements DTDConstants\n+{\n+  /**\n+   * The version of the persistent data format.\n+   */\n+  public static int FILE_VERSION = 1;\n+\n+  /**\n+   * The table of existing available DTDs.\n+   */\n+  static Hashtable dtdHash = new Hashtable();\n+\n+  /**\n+   * The applet element for this DTD.\n+   */\n+  public Element applet;\n+\n+  /**\n+   * The base element for this DTD.\n+   */\n+  public Element base;\n+\n+  /**\n+   * The body element for this DTD.\n+   */\n+  public Element body;\n+\n+  /**\n+   * The head element for this DTD.\n+   */\n+  public Element head;\n+\n+  /**\n+   * The html element for this DTD.\n+   */\n+  public Element html;\n+\n+  /**\n+   * The isindex element of for this DTD.\n+   */\n+  public Element isindex;\n+\n+  /**\n+   * The meta element for this DTD.\n+   */\n+  public Element meta;\n+\n+  /**\n+   * The p element for this DTD.\n+   */\n+  public Element p;\n+\n+  /**\n+   * The param element for this DTD.\n+   */\n+  public Element param;\n+\n+  /**\n+   * The pcdata for this DTD.\n+   */\n+  public Element pcdata;\n+\n+  /**\n+   * The title element for this DTD.\n+   */\n+  public Element title;\n+\n+  /**\n+   * The element for accessing all DTD elements by name.\n+   */\n+  public Hashtable elementHash = new Hashtable();\n+\n+  /**\n+   * The entity table for accessing all DTD entities by name.\n+   */\n+  public Hashtable entityHash = new Hashtable();\n+\n+  /**\n+   *  The name of this DTD.\n+   */\n+  public String name;\n+\n+  /**\n+   * Contains all elements in this DTD. The\n+   * javax.swing.text.html.parser.Element#index field of all elements\n+   * in this vector is set to the element position in this vector.\n+   */\n+  public Vector elements = new Vector();\n+\n+  /** Create a new DTD with the specified name. */\n+  protected DTD(String a_name)\n+  {\n+    name = a_name;\n+  }\n+\n+  /** Get this DTD by name. The current implementation\n+   * only looks in the internal table of DTD documents. If no corresponding\n+   * entry is found, the new entry is created, placed into\n+   * the table and returned. */\n+  public static DTD getDTD(String name)\n+                    throws IOException\n+  {\n+    DTD d = (DTD) dtdHash.get(name);\n+\n+    if (d == null)\n+      {\n+        d = new DTD(name);\n+        dtdHash.put(d.name, d);\n+      }\n+\n+    return d;\n+  }\n+\n+  /**\n+   * Get the element by the element name. If the element is not yet\n+   * defined, it is newly created and placed into the element table.\n+   * If the element name matches (ingoring case) a public non static\n+   * element field in this class, this field is assigned to the value\n+   * of the newly created element.\n+   */\n+  public Element getElement(String element_name)\n+  {\n+    return newElement(element_name);\n+  }\n+\n+  /**\n+   * Get the element by the value of its\n+   * {@link javax.swing.text.html.parser.Element#index} field.\n+   */\n+  public Element getElement(int index)\n+  {\n+    return (Element) elements.get(index);\n+  }\n+\n+  /**\n+   * Get the entity with the given identifier.\n+   * @param id that can be returned by\n+   * {@link javax.swing.text.html.parser.Entity#name2type(String an_entity)}\n+   * @return The entity from this DTD or null if there is no entity with\n+   * such id or such entity is not present in the table of this instance.\n+   */\n+  public Entity getEntity(int id)\n+  {\n+    String name = Entity.mapper.get(id);\n+\n+    if (name != null)\n+      return (Entity) entityHash.get(name);\n+    else\n+      return null;\n+  }\n+\n+  /**\n+   * Get the named entity by its name.\n+   */\n+  public Entity getEntity(String entity_name)\n+  {\n+    return (Entity) entityHash.get(entity_name);\n+  }\n+\n+  /**\n+   * Get the name of this instance of DTD\n+   */\n+  public String getName()\n+  {\n+    return name;\n+  }\n+\n+  /**\n+   * Creates, adds into the entity table and returns the\n+   * character entity like <code>&amp;lt;</code>\n+   *  (means '<code>&lt;</code>' );\n+   * @param name The entity name (without heading &amp; and closing ;)\n+   * @param type The entity type\n+   * @param character The entity value (single character)\n+   * @return The created entity\n+   */\n+  public Entity defEntity(String name, int type, int character)\n+  {\n+    Entity e = newEntity(name, type);\n+    e.data = new char[] { (char) character };\n+    return e;\n+  }\n+\n+  /**\n+   * Define the attributes for the element with the given name.\n+   * If the element is not exist, it is created.\n+   * @param forElement\n+   * @param attributes\n+   */\n+  public void defineAttributes(String forElement, AttributeList attributes)\n+  {\n+    Element e = (Element) elementHash.get(forElement.toLowerCase());\n+\n+    if (e == null)\n+      e = newElement(forElement);\n+\n+    e.atts = attributes;\n+  }\n+\n+  /**\n+   * Defines the element and adds it to the element table. Sets the\n+   * <code>Element.index</code> field to the value, unique for this\n+   * instance of DTD. If the element with the given name already exists,\n+   * replaces all other its settings by the method argument values.\n+   * @param name the name of the element\n+   * @param type the type of the element\n+   * @param headless true if the element needs no starting tag\n+   * (should not occur in HTML).\n+   * @param tailless true if the element needs no ending tag (like\n+   * <code>&lt;hr&gt;</code>\n+   * @param content the element content\n+   * @param exclusions the set of elements that must not occur inside\n+   * this element. The <code>Element.index</code> value defines which\n+   * bit in this bitset corresponds to that element.\n+   * @param inclusions the set of elements that can occur inside this\n+   * element. the <code>Element.index</code> value defines which\n+   * bit in this bitset corresponds to that element.\n+   * @param attributes the element attributes.\n+   * @return the newly defined element.\n+   */\n+  public Element defineElement(String name, int type, boolean headless,\n+                               boolean tailless, ContentModel content,\n+                               BitSet exclusions, BitSet inclusions,\n+                               AttributeList attributes\n+                              )\n+  {\n+    Element e = newElement(name);\n+    e.type = type;\n+    e.oStart = headless;\n+    e.oEnd = tailless;\n+    e.content = content;\n+    e.exclusions = exclusions;\n+    e.inclusions = inclusions;\n+    e.atts = attributes;\n+\n+    return e;\n+  }\n+\n+  /**\n+   * Creates, intializes and adds to the entity table the new\n+   * entity.\n+   * @param name the name of the entity\n+   * @param type the type of the entity\n+   * @param data the data section of the entity\n+   * @return the created entity\n+   */\n+  public Entity defineEntity(String name, int type, char[] data)\n+  {\n+    Entity e = newEntity(name, type);\n+    e.data = data;\n+\n+    return e;\n+  }\n+\n+  /** Place this DTD into the DTD table. */\n+  public static void putDTDHash(String name, DTD dtd)\n+  {\n+    dtdHash.put(name, dtd);\n+  }\n+\n+  /**\n+   * <p>Reads DTD from an archived format. This format is not standardized\n+   * and differs between implementations.</p><p> This implementation\n+   * reads and defines all entities and elements using\n+   * ObjectInputStream. The elements and entities can be written into the\n+   * stream in any order. The objects other than elements and entities\n+   * are ignored.</p>\n+   * @param stream A data stream to read from.\n+   * @throws java.io.IOException If one is thrown by the input stream\n+   */\n+  public void read(DataInputStream stream)\n+            throws java.io.IOException\n+  {\n+    ObjectInputStream oi = new ObjectInputStream(stream);\n+    Object def;\n+    try\n+      {\n+        while (true)\n+          {\n+            def = oi.readObject();\n+            if (def instanceof Element)\n+              {\n+                Element e = (Element) def;\n+                elementHash.put(e.name.toLowerCase(), e);\n+                assignField(e);\n+              }\n+            else if (def instanceof Entity)\n+              {\n+                Entity e = (Entity) def;\n+                entityHash.put(e.name, e);\n+              }\n+          }\n+      }\n+    catch (ClassNotFoundException ex)\n+      {\n+        throw new IOException(ex.getMessage());\n+      }\n+    catch (EOFException ex)\n+      {\n+        // ok EOF\n+      }\n+  }\n+\n+  /**\n+   * Returns the name of this instance of DTD.\n+   */\n+  public String toString()\n+  {\n+    return name;\n+  }\n+\n+  /**\n+   * Creates and returns new attribute (not an attribute list).\n+   * @param name the name of this attribute\n+   * @param type the type of this attribute (FIXED, IMPLIED or\n+   * REQUIRED from <code>DTDConstants</code>).\n+   * @param modifier the modifier of this attribute\n+   * @param default_value the default value of this attribute\n+   * @param allowed_values the allowed values of this attribute. The multiple\n+   * possible values in this parameter are supposed to be separated by\n+   * '|', same as in SGML DTD <code>&lt;!ATTLIST </code>tag. This parameter\n+   * can be null if no list of allowed values is specified.\n+   * @param atts the previous attribute of this element. This is\n+   * placed to the field\n+   * {@link javax.swing.text.html.parser.AttributeList#next },\n+   * creating a linked list.\n+   * @return\n+   */\n+  protected AttributeList defAttributeList(String name, int type, int modifier,\n+                                           String default_value,\n+                                           String allowed_values,\n+                                           AttributeList atts\n+                                          )\n+  {\n+    AttributeList al = new AttributeList(name);\n+    al.modifier = modifier;\n+    al.value = default_value;\n+    al.next = atts;\n+\n+    if (allowed_values != null)\n+      {\n+        StringTokenizer st = new StringTokenizer(allowed_values, \" \\t|\");\n+        Vector v = new Vector(st.countTokens());\n+\n+        while (st.hasMoreTokens())\n+          v.add(st.nextToken());\n+\n+        al.values = v;\n+      }\n+\n+    return al;\n+  }\n+\n+  /**\n+   * Creates a new content model.\n+   * @param type specifies the BNF operation for this content model.\n+   * The valid operations are documented in the\n+   * {@link javax.swing.text.html.parser.ContentModel#type }.\n+   * @param content the content of this content model\n+   * @param next if the content model is specified by BNF-like\n+   * expression, contains the rest of this expression.\n+   * @return The newly created content model.\n+   */\n+  protected ContentModel defContentModel(int type, Object content,\n+                                         ContentModel next\n+                                        )\n+  {\n+    ContentModel model = new ContentModel();\n+    model.type = type;\n+    model.next = next;\n+    model.content = content;\n+\n+    return model;\n+  }\n+\n+  /**\n+   * Defines a new element and adds it to the element table.\n+   * If the element alredy exists,\n+   * overrides it settings with the specified values.\n+   * @param name the name of the new element\n+   * @param type the type of the element\n+   * @param headless true if the element needs no starting tag\n+   * @param tailless true if the element needs no closing tag\n+   * @param content the element content.\n+   * @param exclusions the elements that must be excluded from the\n+   * content of this element, in all levels of the hierarchy.\n+   * @param inclusions the elements that can be included as the\n+   * content of this element.\n+   * @param attributes the element attributes.\n+   * @return the created or updated element.\n+   */\n+  protected Element defElement(String name, int type, boolean headless,\n+                               boolean tailless, ContentModel content,\n+                               String[] exclusions, String[] inclusions,\n+                               AttributeList attributes\n+                              )\n+  {\n+    // compute the bit sets\n+    BitSet exclude = bitSet(exclusions);\n+    BitSet include = bitSet(inclusions);\n+\n+    Element e =\n+      defineElement(name, type, headless, tailless, content, exclude, include,\n+                    attributes\n+                   );\n+\n+    return e;\n+  }\n+\n+  /**\n+   * Creates, intializes and adds to the entity table the new\n+   * entity.\n+   * @param name the name of the entity\n+   * @param type the type of the entity\n+   * @param data the data section of the entity\n+   * @return the created entity\n+   */\n+  protected Entity defEntity(String name, int type, String data)\n+  {\n+    Entity e = newEntity(name, type);\n+    e.data = data.toCharArray();\n+\n+    return e;\n+  }\n+\n+  private void assignField(Element e)\n+  {\n+    String element_name = e.name;\n+    try\n+      {\n+        // Assign the field via reflection.\n+        Field f = getClass().getField(element_name.toLowerCase());\n+        if ((f.getModifiers() & Modifier.PUBLIC) != 0)\n+          if ((f.getModifiers() & Modifier.STATIC) == 0)\n+            if (f.getType().isAssignableFrom(e.getClass()))\n+              f.set(this, e);\n+      }\n+    catch (IllegalAccessException ex)\n+      {\n+        unexpected(ex);\n+      }\n+    catch (NoSuchFieldException ex)\n+      {\n+        // This is ok.\n+      }\n+\n+    // Some virtual machines may still lack the proper\n+    // implementation of reflection. As the tag fields\n+    // are not used anywhere in this implementation,\n+    // (and this class is also rarely used by the end user),\n+    // it may be better not to crash everything by throwing an error\n+    // for each case when the HTML parsing is required.\n+    catch (Throwable t)\n+      {\n+        // This VM has no reflection mechanism implemented!\n+        if (t instanceof OutOfMemoryError)\n+          throw (Error) t;\n+      }\n+  }\n+\n+  /**\n+   * Create the bit set for this array of elements.\n+   * The unknown elements are automatically defined and added\n+   * to the element table.\n+   * @param elements\n+   * @return\n+   */\n+  private BitSet bitSet(String[] elements)\n+  {\n+    BitSet b = new BitSet();\n+\n+    for (int i = 0; i < elements.length; i++)\n+      {\n+        Element e = getElement(elements [ i ]);\n+\n+        if (e == null)\n+          e = newElement(elements [ i ]);\n+\n+        b.set(e.index);\n+      }\n+\n+    return b;\n+  }\n+\n+  /**\n+   * Find the element with the given name in the element table.\n+   * If not find, create a new element with this name and add to the\n+   * table.\n+   * @param name the name of the element\n+   * @return the found or created element.\n+   */\n+  private Element newElement(String name)\n+  {\n+    Element e = (Element) elementHash.get(name.toLowerCase());\n+\n+    if (e == null)\n+      {\n+        e = new Element();\n+        e.name = name;\n+        e.index = elements.size();\n+        elements.add(e);\n+        elementHash.put(e.name.toLowerCase(), e);\n+        assignField(e);\n+      }\n+    return e;\n+  }\n+\n+  /**\n+   * Creates and adds to the element table the entity with an\n+   * unitialized data section. Used internally.\n+   * @param name the name of the entity\n+   * @param type the type of the entity, a bitwise combination\n+   * of GENERAL, PARAMETER, SYSTEM and PUBLIC.\n+   * @throws an error if the parameter is both GENERAL and PARAMETER\n+   * of both PUBLIC and SYSTEM.\n+   * @return the created entity\n+   */\n+  private Entity newEntity(String name, int type)\n+  {\n+    Entity e = new Entity(name, type, null);\n+    entityHash.put(e.name, e);\n+    return e;\n+  }\n+\n+  private void unexpected(Exception ex)\n+  {\n+    throw new Error(\"This should never happen, report a bug\", ex);\n+  }\n+}"}, {"sha": "29218c25d7e239dd9a2f460d5a3714c41c41b114", "filename": "libjava/javax/swing/text/html/parser/DTDConstants.java", "status": "added", "additions": 290, "deletions": 0, "changes": 290, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FDTDConstants.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FDTDConstants.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FDTDConstants.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,290 @@\n+/* DTDConstants.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.text.html.parser;\n+\n+/**\n+ * <p>This class defines the SGML basic types, used for describing HTML 4.01\n+ * at {@link http://www.w3.org/TR/html4/types.html }. Not all constants,\n+ * defined here, are actually used in HTML 4.01 SGML specification. Some others\n+ * are defined just as part of the required implementation.\n+ * </p>\n+ * <p>\n+ * If you need more information about SGML DTD documents,\n+ * the author suggests to read SGML tutorial on\n+ * {@link http://www.w3.org/TR/WD-html40-970708/intro/sgmltut.html}.\n+ * We also recommend Goldfarb C.F (1991) <i>The SGML Handbook</i>,\n+ * Oxford University Press, 688 p, ISBN: 0198537379.\n+ * </p>\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public interface DTDConstants\n+{\n+  /* ----- The data types, used in HTML 4.01 SGML definition: ---- */\n+\n+  /**\n+   * The CDATA (Character data) constant, specifes the content model,\n+   * consisting of characters only. In SGML for HTML 4.01, the character\n+   * entities must be replaced by characters, the line feeds must be\n+   * ignored and any number of the subsequent carriage returns or tabs\n+   * must be replaced by a single space.\n+   */\n+  int CDATA = 1;\n+\n+  /**\n+   *  The EMPTY constant, means the element with no content.\n+   */\n+  int EMPTY = 17;\n+\n+  /**\n+   * The ID constant, means that the token is the unique identifier.\n+   * This identifier can be referenced by attribute with value of IDREF.\n+   * The identifier must begin with letter, followed by any number of\n+   * letters, digits, hyphens, underscores, colons and periods.\n+   */\n+  int ID = 4;\n+\n+  /**\n+   *  The IDREF constant, specifies reference to a valid ID within\n+   * the document.\n+   */\n+  int IDREF = 5;\n+\n+  /**\n+   *  The IDREFS constant, a space separated list of IDREFs\n+   */\n+  int IDREFS = 6;\n+\n+  /**\n+   * The NAME constant, means the token that\n+   * must begin with letter, followed by any number of\n+   * letters, digits, hyphens, underscores, colons and periods.\n+   */\n+  int NAME = 7;\n+\n+  /**\n+   *  The NAMES constant, specifies a space separated of NAMEs.\n+   */\n+  int NAMES = 8;\n+\n+  /**\n+   * The NMTOKEN constant, specifies the attribute, consisting of\n+   * characters that can be either digits or alphabetic characters).\n+   */\n+  int NMTOKEN = 9;\n+\n+  /**\n+   * The NMTOKENS constant, specifies a list of NMTOKENs.\n+   */\n+  int NMTOKENS = 10;\n+\n+  /**\n+   *  The NOTATION constant, a previously defined data type.\n+   */\n+  int NOTATION = 11;\n+\n+  /**\n+   * The NUMBER constant (means that the attribute consists of at least\n+   * one decimal digit).\n+   */\n+  int NUMBER = 12;\n+\n+  /**\n+   *  The NUMBERS constant, specifies a space separated list of NUMBERs.\n+   */\n+  int NUMBERS = 13;\n+\n+  /**\n+   *  The NUTOKEN constant.\n+   */\n+  int NUTOKEN = 14;\n+\n+  /**\n+   *  The NUTOKENS constant.\n+   */\n+  int NUTOKENS = 15;\n+\n+  /* -------\n+     The entity scope constants.\n+     As these four constants are combined with the bitwise OR,\n+     they are defined in the hexadecimal notation.\n+     The reason of setting the two bits at once (for PUBLIC and SYSTEM)\n+     is probably historical.                                      ----- */\n+\n+  /**\n+   * The PUBLIC constant, specifies the public entity. The PUBLIC entities\n+   * are assumed to be known to many systems so that a full declaration\n+   * need not be transmitted. For example,\n+   * &lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0//EN\"&gt;\n+   */\n+  int PUBLIC = 0xA;\n+\n+  /**\n+   * The SYSTEM constant, specifies the system entitiy. The system entities\n+   * are assumed to be known but require the clear identifer\n+   * (like the file path), where they can be found in the system.\n+   * For example, <code>\n+   * &lt;DOCTYPE html SYSTEM \"/path/to/file.dtd\"&gt; </code>.\n+   */\n+  int SYSTEM = 0x11;\n+\n+  /**\n+   * The PARAMETER constant, specifies that entity is only valid\n+   * inside SGML DTD scope.\n+   */\n+  int PARAMETER = 0x40000;\n+\n+  /**\n+   * The GENERAL constant, specifies theat the entity is valid in the\n+   * whole HTML document scope.\n+   */\n+  int GENERAL = 0x10000;\n+\n+  /* ---- The constants, defining if the element attribute is required,\n+     fixed or implied.  ---- */\n+\n+  /**\n+   * The attribute modifier #REQUIRED constant, indicates that the\n+   * value must be supplied.\n+   */\n+  int REQUIRED = 2;\n+\n+  /**\n+   * The attribute modifier #FIXED constant, means that the attribute has\n+   * the fixed value that cannot be changed.\n+   */\n+  int FIXED = 1;\n+\n+  /**\n+   * The attribute modifier #IMPLIED constant,\n+   * indicating that for this attribute the user agent must provide\n+   * the value itself.\n+   */\n+  int IMPLIED = 5;\n+\n+  /**\n+   * The attribute modifier #CURRENT constant, specifies the value\n+   * that at any point in the document is the last value supplied for\n+   * that element. A value is required to be supplied for the first\n+   * occurrence of an element\n+   */\n+  int CURRENT = 3;\n+\n+  /**\n+   * The attribute modifier #CONREF constant, specifies the IDREF value of\n+   * the reference to content in another location of the document.\n+   * The element with this attribute is empty, the content from\n+   * that another location must be used instead.\n+   */\n+  int CONREF = 4;\n+\n+  /* ----- Constants, defining if the element\n+     start and end tags are required. ---- */\n+\n+  /**\n+   *  The STARTTAG, meaning that the element needs a starting tag.\n+   */\n+  int STARTTAG = 13;\n+\n+  /**\n+   *  The ENDTAG constant, meaning that the element needs a closing tag.\n+   */\n+  int ENDTAG = 14;\n+\n+  /* ----- Other constants: ----- */\n+\n+  /**\n+   * The ANY constant, specifies\n+   * an attribute, consisting from arbitrary characters.\n+   */\n+  int ANY = 19;\n+\n+  /**\n+   *  The DEFAULT constant, specifies the default value.\n+   */\n+  int DEFAULT = 131072;\n+\n+  /**\n+   *  The ENTITIES constant (list of ENTITYes)\n+   */\n+  int ENTITIES = 3;\n+\n+  /**\n+   *  The ENTITY constant, meaning the numeric or symbolic name of some\n+   * HTML data.\n+   */\n+  int ENTITY = 2;\n+\n+  /**\n+   *  The MD constant.\n+   */\n+  int MD = 16;\n+\n+  /**\n+   *  The MODEL constant.\n+   */\n+  int MODEL = 18;\n+\n+  /**\n+   * The MS constant.\n+   */\n+  int MS = 15;\n+\n+  /**\n+   * The PI (Processing Instruction) constant, specifies a processing\n+   * instruction. Processing instructions are used to embed information\n+   * intended for specific applications.\n+   */\n+  int PI = 12;\n+\n+  /**\n+   * The RCDATA constant (Entity References and Character Data), specifies\n+   * the content model, consisting of characters AND entities. The\n+   * \"&lt;\" is threated as an ordinary character, but\n+   * \"<code>&amp;name;</code>\" still means the general entity with\n+   *  the given name.\n+   */\n+  int RCDATA = 16;\n+\n+  /**\n+   * The SDATA constant. Means that the value contains the entity name\n+   * and the replacement value of a character entity reference.\n+   */\n+  int SDATA = 11;\n+}"}, {"sha": "8f7d213b36a266715977ceb828da95b8bbfe42b8", "filename": "libjava/javax/swing/text/html/parser/DocumentParser.java", "status": "added", "additions": 258, "deletions": 0, "changes": 258, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FDocumentParser.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FDocumentParser.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FDocumentParser.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,258 @@\n+/* DocumentParser.java -- A parser for HTML documents.\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.text.html.parser;\n+\n+import gnu.javax.swing.text.html.parser.htmlAttributeSet;\n+import javax.swing.text.html.parser.Parser;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+\n+import javax.swing.text.BadLocationException;\n+import javax.swing.text.html.HTMLEditorKit;\n+\n+/**\n+ * <p>A simple error-tolerant HTML parser that uses a DTD document\n+ * to access data on the possible tokens, arguments and syntax.</p>\n+ * <p> The parser reads an HTML content from a Reader and calls various\n+ * notifying methods (which should be overridden in a subclass)\n+ * when tags or data are encountered.</p>\n+ * <p>Some HTML elements need no opening or closing tags. The\n+ * task of this parser is to invoke the tag handling methods also when\n+ * the tags are not explicitly specified and must be supposed using\n+ * information, stored in the DTD.\n+ * For  example, parsing the document\n+ * <p>&lt;table&gt;&lt;tr&gt;&lt;td&gt;a&lt;td&gt;b&lt;td&gt;c&lt;/tr&gt; <br>\n+ * will invoke exactly the handling methods exactly in the same order\n+ * (and with the same parameters) as if parsing the document: <br>\n+ * <em>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;table&gt;&lt;\n+ * tbody&gt;</em>&lt;tr&gt;&lt;td&gt;a<em>&lt;/td&gt;</em>&lt;td&gt;b<em>\n+ * &lt;/td&gt;</em>&lt;td&gt;c<em>&lt;/td&gt;&lt;/tr&gt;</em>&lt;\n+ * <em>/tbody&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;</em></p>\n+ * (supposed tags are given in italics). The parser also supports\n+ * obsolete elements of HTML syntax.<p>\n+ * </p>\n+ * In this implementation, DocumentParser is directly derived from its\n+ * ancestor without changes of functionality.\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class DocumentParser\n+  extends Parser\n+  implements DTDConstants\n+{\n+  /**\n+   * The enclosed working parser class.\n+   */\n+  private class gnuParser\n+    extends gnu.javax.swing.text.html.parser.support.Parser\n+  {\n+    private gnuParser(DTD d)\n+    {\n+      super(d);\n+    }\n+\n+    protected final void handleComment(char[] comment)\n+    {\n+      parser.handleComment(comment);\n+      callBack.handleComment(comment, hTag.where.startPosition);\n+    }\n+\n+    protected final void handleEmptyTag(TagElement tag)\n+      throws javax.swing.text.ChangedCharSetException\n+    {\n+      parser.handleEmptyTag(tag);\n+      callBack.handleSimpleTag(tag.getHTMLTag(), getAttributes(),\n+                               hTag.where.startPosition\n+                              );\n+    }\n+\n+    protected final void handleEndTag(TagElement tag)\n+    {\n+      parser.handleEndTag(tag);\n+      callBack.handleEndTag(tag.getHTMLTag(), hTag.where.startPosition);\n+    }\n+\n+    protected final void handleError(int line, String message)\n+    {\n+      parser.handleError(line, message);\n+      callBack.handleError(message, hTag.where.startPosition);\n+    }\n+\n+    protected final void handleStartTag(TagElement tag)\n+    {\n+      parser.handleStartTag(tag);\n+      htmlAttributeSet attributes = gnu.getAttributes();\n+\n+      if (tag.fictional())\n+        attributes.addAttribute(HTMLEditorKit.ParserCallback.IMPLIED,\n+                                Boolean.TRUE\n+                               );\n+\n+      callBack.handleStartTag(tag.getHTMLTag(), attributes,\n+                              hTag.where.startPosition\n+                             );\n+    }\n+\n+    protected final void handleText(char[] text)\n+    {\n+      parser.handleText(text);\n+      callBack.handleText(text, hTag.where.startPosition);\n+    }\n+\n+    DTD getDTD()\n+    {\n+      return dtd;\n+    }\n+  }\n+\n+  /**\n+   * This field is used to access the identically named\n+   * methods of the outer class.\n+   */\n+  private DocumentParser parser = this;\n+\n+  /**\n+   * The callback.\n+   */\n+  private HTMLEditorKit.ParserCallback callBack;\n+\n+  /**\n+   * The reference to the working class of HTML parser that is\n+   * actually used to parse the document.\n+   */\n+  private gnuParser gnu;\n+\n+  /**\n+   * Creates a new parser that uses the given DTD to access data on the\n+   * possible tokens, arguments and syntax. There is no single - step way\n+   * to get a default DTD; you must either refer to the implementation -\n+   * specific packages, write your own DTD or obtain the working instance\n+   * of parser in other way, for example, by calling\n+   * {@link javax.swing.text.html.HTMLEditorKit#getParser() }.\n+   * @param a_dtd a DTD to use.\n+   */\n+  public DocumentParser(DTD a_dtd)\n+  {\n+    super(a_dtd);\n+    gnu = new gnuParser(a_dtd);\n+  }\n+\n+  /**\n+   * Parses the HTML document, calling methods of the provided\n+   * callback. This method must be multithread - safe.\n+   * @param reader The reader to read the HTML document from\n+   * @param callback The callback that is notifyed about the presence\n+   * of HTML elements in the document.\n+   * @param ignoreCharSet If thrue, any charset changes during parsing\n+   * are ignored.\n+   * @throws java.io.IOException\n+   */\n+  public void parse(Reader reader, HTMLEditorKit.ParserCallback a_callback,\n+                    boolean ignoreCharSet\n+                   )\n+             throws IOException\n+  {\n+    callBack = a_callback;\n+    gnu.parse(reader);\n+\n+    callBack.handleEndOfLineString(gnu.getEndOfLineSequence());\n+    try\n+      {\n+        callBack.flush();\n+      }\n+    catch (BadLocationException ex)\n+      {\n+        // Convert this into the supported type of exception.\n+        throw new IOException(ex.getMessage());\n+      }\n+  }\n+\n+  /**\n+   * Handle HTML comment. The default method returns without action.\n+   * @param comment the comment being handled\n+   */\n+  protected void handleComment(char[] comment)\n+  {\n+  }\n+\n+  /**\n+   * Handle the tag with no content, like &lt;br&gt;. The method is\n+   * called for the elements that, in accordance with the current DTD,\n+   * has an empty content.\n+   * @param tag the tag being handled.\n+   * @throws javax.swing.text.ChangedCharSetException\n+   */\n+  protected void handleEmptyTag(TagElement tag)\n+                         throws javax.swing.text.ChangedCharSetException\n+  {\n+  }\n+\n+  /**\n+   * The method is called when the HTML closing tag ((like &lt;/table&gt;)\n+   * is found or if the parser concludes that the one should be present\n+   * in the current position.\n+   * @param The tag being handled\n+   */\n+  protected void handleEndTag(TagElement tag)\n+  {\n+  }\n+\n+  /* Handle error that has occured in the given line. */\n+  protected void handleError(int line, String message)\n+  {\n+  }\n+\n+  /**\n+   * The method is called when the HTML opening tag ((like &lt;table&gt;)\n+   * is found or if the parser concludes that the one should be present\n+   * in the current position.\n+   * @param The tag being handled\n+   */\n+  protected void handleStartTag(TagElement tag)\n+  {\n+  }\n+\n+  /**\n+   * Handle the text section.\n+   * @param text a section text.\n+   */\n+  protected void handleText(char[] text)\n+  {\n+  }\n+}"}, {"sha": "4f39fbef0ee6a05bd303465876f76c1929cd3467", "filename": "libjava/javax/swing/text/html/parser/Element.java", "status": "added", "additions": 317, "deletions": 0, "changes": 317, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,317 @@\n+/* Element.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.text.html.parser;\n+\n+import gnu.javax.swing.text.html.parser.support.gnuStringIntMapper;\n+\n+import java.io.Serializable;\n+\n+import java.util.BitSet;\n+\n+/**\n+ * <p>\n+ * Stores the element information, obtained by parsing SGML DTD\n+ * tag <code>&lt;!ELEMENT .. &gt;</code>. This class has no public\n+ * constructor and can only be instantiated using the\n+ * {@link javax.swing.text.html.parser.DTD } methods</p>\n+ *\n+ * <p>SGML defines elements that represent structures or\n+ * behavior. An element typically consists of a start tag, content, and an\n+ * end tag. Hence the elements are not tags. The HTML 4.0 definition specifies\n+ * that some elements are not required to have the end tags. Also, some\n+ * HTML elements (like <code>&lt;hr&gt;</code>) have no content. Element names\n+ * are case sensitive.</p>\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public final class Element\n+  implements DTDConstants, Serializable\n+{\n+  /**\n+   * Package level mapper between type names and they string values.\n+   */\n+  static final gnuStringIntMapper mapper =\n+    new gnuStringIntMapper()\n+    {\n+      protected void create()\n+      {\n+        add(\"CDATA\", DTDConstants.CDATA);\n+        add(\"RCDATA\", DTDConstants.RCDATA);\n+        add(\"EMPTY\", DTDConstants.EMPTY);\n+        add(\"ANY\", DTDConstants.ANY);\n+      }\n+    };\n+\n+  /** Use serialVersionUID for interoperability. */\n+  private static final long serialVersionUID = -6717939384601675586L;\n+\n+  /**\n+   * The element attributes.\n+   */\n+  public AttributeList atts;\n+\n+  /**\n+   * Contains refernces to elements that must NOT occur inside this element,\n+   * at any level of hierarchy.\n+   */\n+  public BitSet exclusions;\n+\n+  /**\n+   * Contains refernces to elements that must CAN occur inside this element,\n+   * at any level of hierarchy.\n+   */\n+  public BitSet inclusions;\n+\n+  /**\n+   * The content model, defining elements, entities and DTD text\n+   * that may/may not occur inside this element.\n+   */\n+  public ContentModel content;\n+\n+  /**\n+   * A field to store additional user data for this Element.\n+   */\n+  public Object data;\n+\n+  /**\n+   * The element name.\n+   */\n+  public String name;\n+\n+  /**\n+   * True is this element need not to have the closing tag, false\n+   * otherwise. The HTML 4.0 definition specifies\n+   * that some elements (like <code>&lt;hr&gt;</code>are\n+   * not required to have the end tags.\n+   */\n+  public boolean oEnd;\n+\n+  /**\n+   * True is this element need not to have the starting tag, false\n+   * otherwise. The HTML 4.0 definition specifies\n+   * that some elements (like <code>&lt;head&gt;</code> or\n+   * <code>&lt;body&gt;</code>) are\n+   * not required to have the start tags.\n+\n+   */\n+  public boolean oStart;\n+\n+  /**\n+   * This field contains the unique integer identifier of this Element,\n+   * used to refer the element (more exactly, the element flag)\n+   * in <code>inclusions</code> and <code>exclusions</code> bit set.\n+   */\n+  public int index;\n+\n+  /**\n+   * The element type, containing value, defined in DTDConstants.\n+   * In this implementation, the element type can be\n+   * CDATA, RCDATA, EMPTY or ANY.\n+   */\n+  public int type;\n+\n+  /**\n+   * The default constructor must have package level access in this\n+   * class. Use DTD.defineElement(..) to create an element when required.\n+   * @todo MAKE THIS PACKAGE in the final version. Now the Parser needs it!\n+   */\n+  Element()\n+  {\n+  }\n+\n+  /**\n+   * Converts the string representation of the element type\n+   * into its unique integer identifier, defined in DTDConstants.\n+   * @param a_type A name of the type\n+   * @return DTDConstants.CDATA, DTDConstants.RCDATA, DTDConstants.EMPTY,\n+   * DTDConstants.ANY or null if the type name is not\n+   * \"CDATA\", \"RCDATA\", \"EMPTY\" or \"ANY\". This function is case sensitive.\n+   * @throws NullPointerException if <code>a_type</code> is null.\n+   */\n+  public static int name2type(String a_type)\n+  {\n+    return mapper.get(a_type);\n+  }\n+\n+  /**\n+   * Get the element attribute by name.\n+   * @param attribute the attribute name, case insensitive.\n+   * @return the correspoding attribute of this element. The class,\n+   * for storing as attribute list, as a single attribute, is used to\n+   * store a single attribute in this case.\n+   * @throws NullPointerException if the attribute name is null.\n+   */\n+  public AttributeList getAttribute(String attribute)\n+  {\n+    AttributeList a = atts;\n+\n+    while (a != null && !attribute.equalsIgnoreCase(a.name))\n+      a = a.next;\n+\n+    return a;\n+  }\n+\n+  /**\n+   * Get the element attribute by its value.\n+   * @param a_value the attribute value, case insensitive.\n+   * @return the correspoding attribute of this element. The class,\n+   * for storing as attribute list, as a single attribute, is used to\n+   * store a single attribute in this case. If there are several\n+   * attributes with the same value, there is no garranty, which one\n+   * is returned.\n+   */\n+  public AttributeList getAttributeByValue(String a_value)\n+  {\n+    AttributeList a = atts;\n+\n+    if (a_value == null)\n+      {\n+        while (a != null)\n+          {\n+            if (a.value == null)\n+              return a;\n+\n+            a = a.next;\n+          }\n+      }\n+    else\n+      {\n+        while (a != null)\n+          {\n+            if (a.value != null && a_value.equalsIgnoreCase(a.value))\n+              return a;\n+\n+            a = a.next;\n+          }\n+      }\n+\n+    return null;\n+  }\n+\n+  /**\n+   * Get all attributes of this document as an attribute list.\n+   * @return\n+   */\n+  public AttributeList getAttributes()\n+  {\n+    return atts;\n+  }\n+\n+  /**\n+   * Get the content model, defining elements, entities and DTD text\n+   * that may/may not occur inside this element.\n+   */\n+  public ContentModel getContent()\n+  {\n+    return content;\n+  }\n+\n+  /**\n+   * Returns true for the element with no content.\n+   * Empty elements are defined with the SGML DTD keyword \"EMPTY\".\n+   * @return true if content model field (content) method is equal to\n+   * null or its method empty() returns true.\n+   */\n+  public boolean isEmpty()\n+  {\n+    return content == null || content.empty();\n+  }\n+\n+  /**\n+   * Get the unique integer identifier of this Element,\n+   * used to refer the element (more exactly, the element flag)\n+   * in <code>inclusions</code> and <code>exclusions</code> bit set.\n+   * WARNING: This value may not be the same between different\n+   * implementations.\n+   */\n+  public int getIndex()\n+  {\n+    return index;\n+  }\n+\n+  /**\n+   * Get the element name.\n+   */\n+  public String getName()\n+  {\n+    return name;\n+  }\n+\n+  /**\n+   * Get the element type.\n+   * @return one of the values, defined DTDConstants.\n+   * In this implementation, the element type can be\n+   * CDATA, RCDATA, EMPTY or ANY.\n+   */\n+  public int getType()\n+  {\n+    return type;\n+  }\n+\n+  /**\n+   * True is this element need not to have the starting tag, false\n+   * otherwise.s element need not to have the closing tag, false\n+   * otherwise. The HTML 4.0 definition specifies\n+   * that some elements (like <code>&lt;hr&gt;</code>are\n+   * not required to have the end tags.\n+   */\n+  public boolean omitEnd()\n+  {\n+    return oEnd;\n+  }\n+\n+  /**\n+   * True is this element need not to have the closing tag, false\n+   * otherwise. The HTML 4.0 definition specifies\n+   * that some elements (like <code>&lt;head&gt;</code> or\n+   * <code>&lt;body&gt;</code>) are\n+   * not required to have the start tags.\n+   */\n+  public boolean omitStart()\n+  {\n+    return oStart;\n+  }\n+\n+  /**\n+   * Returns the name of this element.\n+   */\n+  public String toString()\n+  {\n+    return name;\n+  }\n+}"}, {"sha": "ba79552c7955a76250f88106d97b2e6b982a7e89", "filename": "libjava/javax/swing/text/html/parser/Entity.java", "status": "added", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FEntity.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FEntity.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FEntity.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,185 @@\n+/* Entity.java -- Stores information, obtained by parsing SGML DTL\n+ * &lt;!ENTITY % .. &gt; tag\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.text.html.parser;\n+\n+import gnu.javax.swing.text.html.parser.support.gnuStringIntMapper;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * <p>Stores information, obtained by parsing SGML DTL\n+ * &lt;!ENTITY % .. &gt; tag.</p>\n+ * <p>\n+ * The entity defines some kind of macro that can be used elsewhere in\n+ * the document.\n+ * When the macro is referred to by the name in the DTD, it is expanded into\n+ * a string\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public final class Entity\n+  implements DTDConstants, Serializable\n+{\n+  /**\n+   * Package level mapper between type names and they string values.\n+   */\n+  final static gnuStringIntMapper mapper =\n+    new gnuStringIntMapper()\n+    {\n+      protected void create()\n+      {\n+        add(\"ANY\", DTDConstants.ANY);\n+        add(\"CDATA\", DTDConstants.CDATA);\n+        add(\"PUBLIC\", DTDConstants.PUBLIC);\n+        add(\"SDATA\", DTDConstants.SDATA);\n+        add(\"PI\", DTDConstants.PI);\n+        add(\"STARTTAG\", DTDConstants.STARTTAG);\n+        add(\"ENDTAG\", DTDConstants.ENDTAG);\n+        add(\"MS\", DTDConstants.MS);\n+        add(\"MD\", DTDConstants.MD);\n+        add(\"SYSTEM\", DTDConstants.SYSTEM);\n+      }\n+    };\n+\n+  /**\n+   * The entity name.\n+   */\n+  public String name;\n+\n+  /**\n+   * The entity data\n+   */\n+  public char[] data;\n+\n+  /**\n+   *  The entity type.\n+   */\n+  public int type;\n+\n+  /**\n+   * String representation of the entity data.\n+   */\n+  private String sdata;\n+\n+  /**\n+   * Create a new entity\n+   * @param a_name the entity name\n+   * @param a_type the entity type\n+   * @param a_data the data replacing the entity reference\n+   */\n+  public Entity(String a_name, int a_type, char[] a_data)\n+  {\n+    name = a_name;\n+    type = a_type;\n+    data = a_data;\n+  }\n+\n+  /**\n+   * Converts a given string to the corresponding entity type.\n+   * @return a value, defined in DTDConstants (one of\n+   * PUBLIC, CDATA, SDATA, PI, STARTTAG, ENDTAG, MS, MD, SYSTEM)\n+   * or CDATA if the parameter is not a valid entity type.\n+   */\n+  public static int name2type(String an_entity)\n+  {\n+    int r = mapper.get(an_entity);\n+    return (r == 0) ? DTDConstants.CDATA : r;\n+  }\n+\n+  /**\n+   * Get the entity data.\n+   */\n+  public char[] getData()\n+  {\n+    return data;\n+  }\n+\n+  /**\n+   * Returns true for general entities. Each general entity can be\n+   * referenced as <code>&entity-name;</code>. Such entities are\n+   * defined by the SGML DTD tag\n+   * <code>&lt;!ENTITY <i>name</i>    \"<i>value</i>\"></code>. The general\n+   * entities can be used anywhere in the document.\n+   */\n+  public boolean isGeneral()\n+  {\n+    return (type & DTDConstants.GENERAL) != 0;\n+  }\n+\n+  /**\n+   * Get the entity name.\n+   */\n+  public String getName()\n+  {\n+    return name;\n+  }\n+\n+  /**\n+   * Returns true for parameter entities. Each parameter entity can be\n+   * referenced as <code>&entity-name;</code>. Such entities are\n+   * defined by the SGML DTD tag\n+   * <code>&lt;!ENTITY % <i>name</i>    \"<i>value</i>\"></code>. The parameter\n+   * entities can be used only in SGML context.\n+   */\n+  public boolean isParameter()\n+  {\n+    return (type & DTDConstants.PARAMETER) != 0;\n+  }\n+\n+  /**\n+   * Returns a data as String\n+   */\n+  public String getString()\n+  {\n+    if (sdata == null)\n+      sdata = new String(data);\n+\n+    return sdata;\n+  }\n+  \n+  /**\n+   * Get the entity type.\n+   * @return the value of the {@link #type}.\n+   */\n+  public int getType() \n+  {\n+    return type;\n+  }  \n+          \n+}"}, {"sha": "7202f6b5b27d82c2d6c3fac3079adf3dab1fb09b", "filename": "libjava/javax/swing/text/html/parser/Parser.java", "status": "added", "additions": 436, "deletions": 0, "changes": 436, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FParser.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FParser.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FParser.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,436 @@\n+/* Parser.java -- HTML parser\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.text.html.parser;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+\n+import javax.swing.text.ChangedCharSetException;\n+import javax.swing.text.SimpleAttributeSet;\n+\n+/*\n+ * FOR DEVELOPERS: To avoid regression, please run the package test\n+ * textsuite/javax.swing.text.html.parser/AllParserTests after your\n+ * modifications.\n+ */\n+\n+/**\n+ * <p>A simple error-tolerant HTML parser that uses a DTD document\n+ * to access data on the possible tokens, arguments and syntax.</p>\n+ * <p> The parser reads an HTML content from a Reader and calls various\n+ * notifying methods (which should be overridden in a subclass)\n+ * when tags or data are encountered.</p>\n+ * <p>Some HTML elements need no opening or closing tags. The\n+ * task of this parser is to invoke the tag handling methods also when\n+ * the tags are not explicitly specified and must be supposed using\n+ * information, stored in the DTD.\n+ * For  example, parsing the document\n+ * <p>&lt;table&gt;&lt;tr&gt;&lt;td&gt;a&lt;td&gt;b&lt;td&gt;c&lt;/tr&gt; <br>\n+ * will invoke exactly the handling methods exactly in the same order\n+ * (and with the same parameters) as if parsing the document: <br>\n+ * <em>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;table&gt;&lt;\n+ * tbody&gt;</em>&lt;tr&gt;&lt;td&gt;a<em>&lt;/td&gt;</em>&lt;td&gt;b<em>\n+ * &lt;/td&gt;</em>&lt;td&gt;c<em>&lt;/td&gt;&lt;/tr&gt;</em>&lt;\n+ * <em>/tbody&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;</em></p>\n+ * (supposed tags are given in italics). The parser also supports\n+ * obsolete elements of HTML syntax.<p>\n+ * </p>\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class Parser \n+  implements DTDConstants\n+{\n+  /**\n+   * The document template description that will be used to parse the documents.\n+   */\n+  protected DTD dtd;\n+\n+  /**\n+   * The value of this field determines whether or not the Parser will be\n+   * strict in enforcing SGML compatibility. The default value is false,\n+   * stating that the parser should do everything to parse and get at least\n+   * some information even from the incorrectly written HTML input.\n+   */\n+  protected boolean strict;\n+\n+  /**\n+   * The package level reference to the working HTML parser in this\n+   * implementation.\n+   */\n+  final gnu.javax.swing.text.html.parser.support.Parser gnu;\n+\n+  /**\n+   * Creates a new parser that uses the given DTD to access data on the\n+   * possible tokens, arguments and syntax. There is no single - step way\n+   * to get a default DTD; you must either refer to the implementation -\n+   * specific packages, write your own DTD or obtain the working instance\n+   * of parser in other way, for example, by calling\n+   * {@link javax.swing.text.html.HTMLEditorKit#getParser() }.\n+   * @param a_dtd A DTD to use.\n+   */\n+  public Parser(DTD a_dtd)\n+  {\n+    dtd = a_dtd;\n+\n+    final Parser j = this;\n+\n+    gnu =\n+      new gnu.javax.swing.text.html.parser.support.Parser(dtd)\n+        {\n+          protected final void handleComment(char[] comment)\n+          {\n+            j.handleComment(comment);\n+          }\n+\n+          protected final void handleEOFInComment()\n+          {\n+            j.handleEOFInComment();\n+          }\n+\n+          protected final void handleEmptyTag(TagElement tag)\n+            throws javax.swing.text.ChangedCharSetException\n+          {\n+            j.handleEmptyTag(tag);\n+          }\n+\n+          protected final void handleStartTag(TagElement tag)\n+          {\n+            j.handleStartTag(tag);\n+          }\n+\n+          protected final void handleEndTag(TagElement tag)\n+          {\n+            j.handleEndTag(tag);\n+          }\n+\n+          protected final void handleError(int line, String message)\n+          {\n+            j.handleError(line, message);\n+          }\n+\n+          protected final void handleText(char[] text)\n+          {\n+            j.handleText(text);\n+          }\n+\n+          protected final void handleTitle(char[] title)\n+          {\n+            j.handleTitle(title);\n+          }\n+\n+          protected final void markFirstTime(Element element)\n+          {\n+            j.markFirstTime(element);\n+          }\n+\n+          protected final void startTag(TagElement tag)\n+            throws ChangedCharSetException\n+          {\n+            j.startTag(tag);\n+          }\n+\n+          protected final void endTag(boolean omitted)\n+          {\n+            j.endTag(omitted);\n+          }\n+\n+          protected TagElement makeTag(Element element)\n+          {\n+            return j.makeTag(element);\n+          }\n+\n+          protected TagElement makeTag(Element element, boolean isSupposed)\n+          {\n+            return j.makeTag(element, isSupposed);\n+          }\n+        };\n+  }\n+\n+  /**\n+   * Parse the HTML text, calling various methods in response to the\n+   * occurence of the corresponding HTML constructions.\n+   * @param reader The reader to read the source HTML from.\n+   * @throws IOException If the reader throws one.\n+   */\n+  public synchronized void parse(Reader reader)\n+    throws IOException\n+  {\n+    gnu.parse(reader);\n+  }\n+\n+  /**\n+   * Parses DTD markup declaration. Currently returns without action.\n+   * @return null.\n+   * @throws java.io.IOException\n+   */\n+  public String parseDTDMarkup()\n+    throws IOException\n+  {\n+    return gnu.parseDTDMarkup();\n+  }\n+\n+  /**\n+   * Parse DTD document declarations. Currently only parses the document\n+   * type declaration markup.\n+   * @param strBuff\n+   * @return true if this is a valid DTD markup declaration.\n+   * @throws IOException\n+   */\n+  protected boolean parseMarkupDeclarations(StringBuffer strBuff)\n+    throws IOException\n+  {\n+    return gnu.parseMarkupDeclarations(strBuff);\n+  }\n+\n+  /**\n+   * Get the attributes of the current tag.\n+   * @return The attribute set, representing the attributes of the current tag.\n+   */\n+  protected SimpleAttributeSet getAttributes()\n+  {\n+    return gnu.getAttributes();\n+  }\n+\n+  /**\n+   * Get the number of the document line being parsed.\n+   * @return The current line.\n+   */\n+  protected int getCurrentLine()\n+  {\n+    return gnu.hTag.where.beginLine;\n+  }\n+\n+  /**\n+   * Get the current position in the document being parsed.\n+   * @return The current position.\n+   */\n+  protected int getCurrentPos()\n+  {\n+    return gnu.hTag.where.startPosition;\n+  }\n+\n+  /**\n+   * The method is called when the HTML end (closing) tag is found or if\n+   * the parser concludes that the one should be present in the\n+   * current position. The method is called immediatly\n+   * before calling the handleEndTag().\n+   * @param omitted True if the tag is no actually present in the document,\n+   * but is supposed by the parser (like &lt;/html&gt; at the end of the\n+   * document).\n+   */\n+  protected void endTag(boolean omitted)\n+  {\n+  }\n+\n+  /**\n+   * Invokes the error handler. The default method in this implementation\n+   * finally delegates the call to handleError, also providing the number of the\n+   * current line.\n+   */\n+  protected void error(String msg)\n+  {\n+    gnu.error(msg);\n+  }\n+\n+  /**\n+   * Invokes the error handler. The default method in this implementation\n+   * finally delegates the call to error (msg+\": '\"+invalid+\"'\").\n+   */\n+  protected void error(String msg, String invalid)\n+  {\n+    gnu.error(msg, invalid);\n+  }\n+\n+  /**\n+   * Invokes the error handler. The default method in this implementation\n+   * finally delegates the call to error (parm1+\" \"+ parm2+\" \"+ parm3).\n+   */\n+  protected void error(String parm1, String parm2, String parm3)\n+  {\n+    gnu.error(parm1, parm2, parm3);\n+  }\n+\n+  /**\n+   * Invokes the error handler. The default method in this implementation\n+   * finally delegates the call to error\n+   * (parm1+\" \"+ parm2+\" \"+ parm3+\" \"+ parm4).\n+   */\n+  protected void error(String parm1, String parm2, String parm3, String parm4)\n+  {\n+    gnu.error(parm1, parm2, parm3, parm4);\n+  }\n+\n+  /**\n+   * In this implementation, this is never called and returns without action.\n+   */\n+  protected void flushAttributes()\n+  {\n+    gnu.flushAttributes();\n+  }\n+\n+  /**\n+   * Handle HTML comment. The default method returns without action.\n+   * @param comment The comment being handled\n+   */\n+  protected void handleComment(char[] comment)\n+  {\n+  }\n+\n+  /**\n+   * This is additionally called in when the HTML content terminates\n+   * without closing the HTML comment. This can only happen if the\n+   * HTML document contains errors (for example, the closing --;gt is\n+   * missing. The default method calls the error handler.\n+   */\n+  protected void handleEOFInComment()\n+  {\n+    gnu.error(\"Unclosed comment\");\n+  }\n+\n+  /**\n+   * Handle the tag with no content, like &lt;br&gt;. The method is\n+   * called for the elements that, in accordance with the current DTD,\n+   * has an empty content.\n+   * @param The tag being handled.\n+   * @throws javax.swing.text.ChangedCharSetException\n+   */\n+  protected void handleEmptyTag(TagElement tag)\n+    throws ChangedCharSetException\n+  {\n+  }\n+\n+  /**\n+   * The method is called when the HTML closing tag ((like &lt;/table&gt;)\n+   * is found or if the parser concludes that the one should be present\n+   * in the current position.\n+   * @param The tag being handled\n+   */\n+  protected void handleEndTag(TagElement tag)\n+  {\n+  }\n+\n+  /* Handle error that has occured in the given line. */\n+  protected void handleError(int line, String message)\n+  {\n+  }\n+\n+  /**\n+   * The method is called when the HTML opening tag ((like &lt;table&gt;)\n+   * is found or if the parser concludes that the one should be present\n+   * in the current position.\n+   * @param The tag being handled\n+   */\n+  protected void handleStartTag(TagElement tag)\n+  {\n+  }\n+\n+  /**\n+   * Handle the text section.\n+   * <p> For non-preformatted section, the parser replaces\n+   * \\t, \\r and \\n by spaces and then multiple spaces\n+   * by a single space. Additionaly, all whitespace around\n+   * tags is discarded.\n+   * </p>\n+   * <p> For pre-formatted text (inside TEXAREA and PRE), the parser preserves\n+   * all tabs and spaces, but removes <b>one</b>  bounding \\r, \\n or \\r\\n,\n+   * if it is present. Additionally, it replaces each occurence of \\r or \\r\\n\n+   * by a single \\n.</p>\n+   *\n+   * @param text A section text.\n+   */\n+  protected void handleText(char[] text)\n+  {\n+  }\n+\n+  /**\n+   * Handle HTML &lt;title&gt; tag. This method is invoked when\n+   * both title starting and closing tags are already behind.\n+   * The passed argument contains the concatenation of all\n+   * title text sections.\n+   * @param The title text.\n+   */\n+  protected void handleTitle(char[] title)\n+  {\n+  }\n+\n+  /**\n+   * Constructs the tag from the given element. In this implementation,\n+   * this is defined, but never called.\n+   * @param element the base element of the tag.\n+   * @return the tag\n+   */\n+  protected TagElement makeTag(Element element)\n+  {\n+    return makeTag(element, false);\n+  }\n+\n+  /**\n+   * Constructs the tag from the given element.\n+   * @param the tag base {@link javax.swing.text.html.parser.Element}\n+   * @param isSupposed true if the tag is not actually present in the\n+   * html input, but the parser supposes that it should to occur in\n+   * the current location.\n+   * @return the tag\n+   */\n+  protected TagElement makeTag(Element element, boolean isSupposed)\n+  {\n+    return new TagElement(element, isSupposed);\n+  }\n+\n+  /**\n+   * This is called when the tag, representing the given element,\n+   * occurs first time in the document.\n+   * @param element\n+   */\n+  protected void markFirstTime(Element element)\n+  {\n+  }\n+\n+  /**\n+   * The method is called when the HTML opening tag ((like &lt;table&gt;)\n+   * is found or if the parser concludes that the one should be present\n+   * in the current position. The method is called immediately before\n+   * calling the handleStartTag.\n+   * @param The tag\n+   */\n+  protected void startTag(TagElement tag)\n+    throws ChangedCharSetException\n+  {\n+  }\n+}"}, {"sha": "798170630b742d6b936c3e78f9aca58a6bb0d2f4", "filename": "libjava/javax/swing/text/html/parser/ParserDelegator.java", "status": "modified", "additions": 164, "deletions": 4, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FParserDelegator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FParserDelegator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FParserDelegator.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -1,5 +1,5 @@\n-/* ParserDelegator - Delegator for ParserDocument.\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+/* ParserDelegator.java -- Delegator for ParserDocument.\n+    Copyright (C) 2005 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -37,10 +37,170 @@\n \n package javax.swing.text.html.parser;\n \n+import gnu.javax.swing.text.html.parser.HTML_401F;\n+import gnu.javax.swing.text.html.parser.htmlAttributeSet;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Serializable;\n+\n+import javax.swing.text.BadLocationException;\n+import javax.swing.text.html.HTMLEditorKit;\n+import javax.swing.text.html.HTMLEditorKit.ParserCallback;\n+\n /**\n- * Stub implementeation to get gjdoc working.\n+ * This class instantiates and starts the working instance of\n+ * html parser, being responsible for providing the default DTD.\n+ *\n+ * TODO Later this class must be derived from the totally abstract class\n+ * HTMLEditorKit.Parser. HTMLEditorKit that does not yet exist.\n+ *\n+ * @author Audrius Meskauskas (AudriusA@Bioinformatics.org)\n  */\n-//public class ParserDelegator extends HTMLEditorKit.Parser\n public class ParserDelegator\n+  extends javax.swing.text.html.HTMLEditorKit.Parser\n+  implements Serializable\n {\n+  private class gnuParser\n+    extends gnu.javax.swing.text.html.parser.support.Parser\n+  {\n+    private static final long serialVersionUID = 1;\n+\n+    private gnuParser(DTD d)\n+    {\n+      super(d);\n+    }\n+\n+    protected final void handleComment(char[] comment)\n+    {\n+      callBack.handleComment(comment, hTag.where.startPosition);\n+    }\n+\n+    protected final void handleEmptyTag(TagElement tag)\n+      throws javax.swing.text.ChangedCharSetException\n+    {\n+      callBack.handleSimpleTag(tag.getHTMLTag(), getAttributes(),\n+                               hTag.where.startPosition\n+                              );\n+    }\n+\n+    protected final void handleEndTag(TagElement tag)\n+    {\n+      callBack.handleEndTag(tag.getHTMLTag(), hTag.where.startPosition);\n+    }\n+\n+    protected final void handleError(int line, String message)\n+    {\n+      callBack.handleError(message, hTag.where.startPosition);\n+    }\n+\n+    protected final void handleStartTag(TagElement tag)\n+    {\n+      htmlAttributeSet attributes = gnu.getAttributes();\n+\n+      if (tag.fictional())\n+        attributes.addAttribute(ParserCallback.IMPLIED, Boolean.TRUE);\n+\n+      callBack.handleStartTag(tag.getHTMLTag(), attributes,\n+                              hTag.where.startPosition\n+                             );\n+    }\n+\n+    protected final void handleText(char[] text)\n+    {\n+      callBack.handleText(text, hTag.where.startPosition);\n+    }\n+\n+    DTD getDTD()\n+    {\n+      return dtd;\n+    }\n+  }\n+\n+  /**\n+   * Use serialVersionUID for interoperability.\n+   */\n+  private static final long serialVersionUID = -1276686502624777206L;\n+\n+  private static DTD dtd = HTML_401F.getInstance();\n+\n+  /**\n+   * The callback.\n+   */\n+  private HTMLEditorKit.ParserCallback callBack;\n+\n+  /**\n+   * The reference to the working class of HTML parser that is\n+   * actually used to parse the document.\n+   */\n+  private gnuParser gnu;\n+\n+  /**\n+   * Parses the HTML document, calling methods of the provided\n+   * callback. This method must be multithread - safe.\n+   * @param reader The reader to read the HTML document from\n+   * @param callback The callback that is notifyed about the presence\n+   * of HTML elements in the document.\n+   * @param ignoreCharSet If thrue, any charset changes during parsing\n+   * are ignored.\n+   * @throws java.io.IOException\n+   */\n+  public void parse(Reader reader, HTMLEditorKit.ParserCallback a_callback,\n+                    boolean ignoreCharSet\n+                   )\n+             throws IOException\n+  {\n+    callBack = a_callback;\n+\n+    if (gnu == null || !dtd.equals(gnu.getDTD()))\n+      {\n+        gnu = new gnuParser(dtd);\n+      }\n+\n+    gnu.parse(reader);\n+\n+    callBack.handleEndOfLineString(gnu.getEndOfLineSequence());\n+    try\n+      {\n+        callBack.flush();\n+      }\n+    catch (BadLocationException ex)\n+      {\n+        // Convert this into the supported type of exception.\n+        throw new IOException(ex.getMessage());\n+      }\n+  }\n+\n+  /**\n+   * Calling this method instructs that, if not specified directly,\n+   * the documents will be parsed using the default\n+   * DTD of the implementation.\n+   */\n+  protected static void setDefaultDTD()\n+  {\n+    dtd = HTML_401F.getInstance();\n+  }\n+\n+  /**\n+   * Registers the user - written DTD under the given name, also\n+   * making it default for the subsequent parsings. This has effect on\n+   * all subsequent calls to the parse(...) . If you need to specify\n+   * your DTD locally, simply {@link javax.swing.text.html.parser.Parser}\n+   * instead.\n+   * @param dtd The DTD that will be used to parse documents by this class.\n+   * @param name The name of this DTD.\n+   * @return No standard is specified on which instance of DTD must be\n+   * returned by this method, and it is recommended to leave the returned\n+   * value without consideration. This implementation returns the DTD\n+   * that was previously set as the default DTD, or the implementations\n+   * default DTD if none was set.\n+   */\n+  protected static DTD createDTD(DTD a_dtd, String name)\n+  {\n+    DTD.putDTDHash(name, a_dtd);\n+\n+    DTD dtd_prev = dtd;\n+    dtd = a_dtd;\n+    return dtd_prev;\n+  }\n }"}, {"sha": "ab9465261dfbbf52382dd266490096a971006645", "filename": "libjava/javax/swing/text/html/parser/TagElement.java", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FTagElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e479e2131f9931dce25de735d333710ee4814d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FTagElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FTagElement.java?ref=18e479e2131f9931dce25de735d333710ee4814d", "patch": "@@ -0,0 +1,142 @@\n+/* TagElement.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.text.html.parser;\n+\n+import javax.swing.text.html.HTML;\n+\n+/**\n+ * The SGML element, defining a single html tag.\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class TagElement\n+{\n+  /**\n+   * The Element the tag was constructed from.\n+   */\n+  private final Element element;\n+\n+  /**\n+   * The coresponding HTML tag, assigned once in constructor.\n+   */\n+  private final HTML.Tag tag;\n+\n+  /**\n+   * The 'fictional' flag.\n+   */\n+  private final boolean fictional;\n+\n+  /**\n+   * Creates the html tag element from the defintion, stored in the\n+   * given element. Sets the flag 'fictional' to false.\n+   * @param an_element\n+   */\n+  public TagElement(Element an_element)\n+  {\n+    this(an_element, false);\n+  }\n+\n+  /**\n+   * Creates the html tag element from the defintion, stored in the\n+   * given element, setting the flag 'fictional' to the given value.\n+   */\n+  public TagElement(Element an_element, boolean is_fictional)\n+  {\n+    element = an_element;\n+    fictional = is_fictional;\n+\n+    HTML.Tag t = HTML.getTag(element.getName());\n+\n+    if (t != null)\n+      tag = t;\n+    else\n+      tag = new HTML.UnknownTag(element.getName());\n+  }\n+\n+  /**\n+   * Get the element from that the tag was constructed.\n+   */\n+  public Element getElement()\n+  {\n+    return element;\n+  }\n+\n+  /**\n+   * Get the corresponding HTML tag. This is either one of the\n+   * pre-defined HTML tags or the instance of the UnknownTag with the\n+   * element name.\n+   */\n+  public HTML.Tag getHTMLTag()\n+  {\n+    return tag;\n+  }\n+\n+  /**\n+   * Calls isPreformatted() for the corresponding html tag and returns\n+   * the obtained value.\n+   */\n+  public boolean isPreformatted()\n+  {\n+    return tag.isPreformatted();\n+  }\n+\n+  /**\n+   * Calls breaksFlow() for the corresponding html tag and returns\n+   * the obtained value.\n+   */\n+  public boolean breaksFlow()\n+  {\n+    return tag.breaksFlow();\n+  }\n+\n+  /**\n+   * Get the value of the flag 'fictional'.\n+   */\n+  public boolean fictional()\n+  {\n+    return fictional;\n+  }\n+\n+  /**\n+   * Returns string representation of this object.\n+   */\n+  public String toString()\n+  {\n+    return getElement() + (fictional ? \"?\" : \"\");\n+  }\n+}"}]}