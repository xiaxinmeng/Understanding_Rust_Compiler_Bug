{"sha": "6b252dc96b52f5ab6f399c3f6b0c0b6614a36913", "node_id": "C_kwDOANBUbNoAKDZiMjUyZGM5NmI1MmY1YWI2ZjM5OWMzZjZiMGMwYjY2MTRhMzY5MTM", "commit": {"author": {"name": "Jiawei", "email": "jiawei@iscas.ac.cn", "date": "2022-10-20T09:32:34Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2022-10-27T03:17:32Z"}, "message": "RISC-V: Limit regs use for z*inx extension.\n\nLimit z*inx abi support with 'ilp32','ilp32e','lp64' only.\nUse GPR instead FPR when 'zfinx' enable, Only use even registers\nin RV32 when 'zdinx' enable.\nEnable FLOAT16 when Zhinx/Zhinxmin enabled.\n\nCo-Authored-By: Sinan Lin <sinan@isrc.iscas.ac.cn>\n\ngcc/ChangeLog:\n\n\t* config/riscv/constraints.md (TARGET_ZFINX ? GR_REGS): Set GPRS\n\tuse while Zfinx is enable.\n\t* config/riscv/riscv.cc (riscv_hard_regno_mode_ok): Limit odd\n\tregisters use when Zdinx enable in RV32 cases.\n\t(riscv_option_override): New target enable MASK_FDIV.\n\t(riscv_libgcc_floating_mode_supported_p): New error info when\n\tuse incompatible arch&abi.\n\t(riscv_excess_precision): New target enable FLOAT16.", "tree": {"sha": "e043c93c86e95f1dd20588ef8838e6269cb427f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e043c93c86e95f1dd20588ef8838e6269cb427f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b252dc96b52f5ab6f399c3f6b0c0b6614a36913", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b252dc96b52f5ab6f399c3f6b0c0b6614a36913", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b252dc96b52f5ab6f399c3f6b0c0b6614a36913", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b252dc96b52f5ab6f399c3f6b0c0b6614a36913/comments", "author": {"login": "pz9115", "id": 43362020, "node_id": "MDQ6VXNlcjQzMzYyMDIw", "avatar_url": "https://avatars.githubusercontent.com/u/43362020?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pz9115", "html_url": "https://github.com/pz9115", "followers_url": "https://api.github.com/users/pz9115/followers", "following_url": "https://api.github.com/users/pz9115/following{/other_user}", "gists_url": "https://api.github.com/users/pz9115/gists{/gist_id}", "starred_url": "https://api.github.com/users/pz9115/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pz9115/subscriptions", "organizations_url": "https://api.github.com/users/pz9115/orgs", "repos_url": "https://api.github.com/users/pz9115/repos", "events_url": "https://api.github.com/users/pz9115/events{/privacy}", "received_events_url": "https://api.github.com/users/pz9115/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac96e9068ce7dcaca992fde7f1551ffe8837b723", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac96e9068ce7dcaca992fde7f1551ffe8837b723", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac96e9068ce7dcaca992fde7f1551ffe8837b723"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "4088c48150a573db608a70942511291c5f567fee", "filename": "gcc/config/riscv/constraints.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b252dc96b52f5ab6f399c3f6b0c0b6614a36913/gcc%2Fconfig%2Friscv%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b252dc96b52f5ab6f399c3f6b0c0b6614a36913/gcc%2Fconfig%2Friscv%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fconstraints.md?ref=6b252dc96b52f5ab6f399c3f6b0c0b6614a36913", "patch": "@@ -21,8 +21,9 @@\n \n ;; Register constraints\n \n-(define_register_constraint \"f\" \"TARGET_HARD_FLOAT ? FP_REGS : NO_REGS\"\n-  \"A floating-point register (if available).\")\n+(define_register_constraint \"f\" \"TARGET_HARD_FLOAT ? FP_REGS :\n+  (TARGET_ZFINX ? GR_REGS : NO_REGS)\"\n+  \"A floating-point register (if available, reuse GPR as FPR when use zfinx).\")\n \n (define_register_constraint \"j\" \"SIBCALL_REGS\"\n   \"@internal\")"}, {"sha": "77bc65b0881d7903649541f69da7b7b9ce190e20", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b252dc96b52f5ab6f399c3f6b0c0b6614a36913/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b252dc96b52f5ab6f399c3f6b0c0b6614a36913/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=6b252dc96b52f5ab6f399c3f6b0c0b6614a36913", "patch": "@@ -5420,6 +5420,13 @@ riscv_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n \t!= call_used_or_fixed_reg_p (regno + i))\n       return false;\n \n+  /* Only use even registers in RV32 ZDINX */\n+  if (!TARGET_64BIT && TARGET_ZDINX){\n+    if (GET_MODE_CLASS (mode) == MODE_FLOAT &&\n+     GET_MODE_UNIT_SIZE (mode) == GET_MODE_SIZE (DFmode))\n+    return !(regno & 1);\n+  }\n+\n   return true;\n }\n \n@@ -5659,7 +5666,7 @@ riscv_option_override (void)\n     error (\"%<-mdiv%> requires %<-march%> to subsume the %<M%> extension\");\n \n   /* Likewise floating-point division and square root.  */\n-  if (TARGET_HARD_FLOAT && (target_flags_explicit & MASK_FDIV) == 0)\n+  if ((TARGET_HARD_FLOAT || TARGET_ZFINX) && (target_flags_explicit & MASK_FDIV) == 0)\n     target_flags |= MASK_FDIV;\n \n   /* Handle -mtune, use -mcpu if -mtune is not given, and use default -mtune\n@@ -5705,6 +5712,11 @@ riscv_option_override (void)\n   if (TARGET_RVE && riscv_abi != ABI_ILP32E)\n     error (\"rv32e requires ilp32e ABI\");\n \n+  // Zfinx require abi ilp32,ilp32e or lp64.\n+  if (TARGET_ZFINX && riscv_abi != ABI_ILP32\n+      && riscv_abi != ABI_LP64 && riscv_abi != ABI_ILP32E)\n+    error (\"z*inx requires ABI ilp32, ilp32e or lp64\");\n+\n   /* We do not yet support ILP32 on RV64.  */\n   if (BITS_PER_WORD != POINTER_SIZE)\n     error (\"ABI requires %<-march=rv%d%>\", POINTER_SIZE);\n@@ -6337,7 +6349,7 @@ riscv_libgcc_floating_mode_supported_p (scalar_float_mode mode)\n        precision of the _FloatN type; evaluate all other operations and\n        constants to the range and precision of the semantic type;\n \n-   If we have the zfh extensions then we support _Float16 in native\n+   If we have the zfh/zhinx extensions then we support _Float16 in native\n    precision, so we should set this to 16.  */\n static enum flt_eval_method\n riscv_excess_precision (enum excess_precision_type type)\n@@ -6346,8 +6358,9 @@ riscv_excess_precision (enum excess_precision_type type)\n     {\n     case EXCESS_PRECISION_TYPE_FAST:\n     case EXCESS_PRECISION_TYPE_STANDARD:\n-      return (TARGET_ZFH ? FLT_EVAL_METHOD_PROMOTE_TO_FLOAT16\n-\t\t\t : FLT_EVAL_METHOD_PROMOTE_TO_FLOAT);\n+      return ((TARGET_ZFH || TARGET_ZHINX)\n+\t\t? FLT_EVAL_METHOD_PROMOTE_TO_FLOAT16\n+\t\t: FLT_EVAL_METHOD_PROMOTE_TO_FLOAT);\n     case EXCESS_PRECISION_TYPE_IMPLICIT:\n     case EXCESS_PRECISION_TYPE_FLOAT16:\n       return FLT_EVAL_METHOD_PROMOTE_TO_FLOAT16;"}]}