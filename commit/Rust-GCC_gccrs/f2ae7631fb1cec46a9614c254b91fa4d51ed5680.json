{"sha": "f2ae7631fb1cec46a9614c254b91fa4d51ed5680", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJhZTc2MzFmYjFjZWM0NmE5NjE0YzI1NGI5MWZhNGQ1MWVkNTY4MA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-06-12T04:53:54Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-06-12T04:53:54Z"}, "message": "dwarf2out.c (need_data_align_sf_opcode): New.\n\n        * dwarf2out.c (need_data_align_sf_opcode): New.\n        (div_data_align): Move earlier.\n        (def_cfa_1, reg_save): Use it.\n\nFrom-SVN: r148411", "tree": {"sha": "49d093fb58e94888daac5f7673fda83e72e2cb11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49d093fb58e94888daac5f7673fda83e72e2cb11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2ae7631fb1cec46a9614c254b91fa4d51ed5680", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2ae7631fb1cec46a9614c254b91fa4d51ed5680", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2ae7631fb1cec46a9614c254b91fa4d51ed5680", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2ae7631fb1cec46a9614c254b91fa4d51ed5680/comments", "author": null, "committer": null, "parents": [{"sha": "8ed0ce9982d3a3ae3317d5fa44b96b391f58c385", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ed0ce9982d3a3ae3317d5fa44b96b391f58c385", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ed0ce9982d3a3ae3317d5fa44b96b391f58c385"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "b1d0cd77d179e247da2f176fd3d01797ed2e015f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ae7631fb1cec46a9614c254b91fa4d51ed5680/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ae7631fb1cec46a9614c254b91fa4d51ed5680/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f2ae7631fb1cec46a9614c254b91fa4d51ed5680", "patch": "@@ -1,3 +1,9 @@\n+2009-06-11  Richard Henderson  <rth@redhat.com>\n+\n+\t* dwarf2out.c (need_data_align_sf_opcode): New.\n+\t(div_data_align): Move earlier.\n+\t(def_cfa_1, reg_save): Use it.\n+\n 2009-06-11  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (OPTION_MASK_ISA_CRC32_SET): New."}, {"sha": "1d3a1ca2f520c099c671fe8202fc78826d577556", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ae7631fb1cec46a9614c254b91fa4d51ed5680/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ae7631fb1cec46a9614c254b91fa4d51ed5680/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=f2ae7631fb1cec46a9614c254b91fa4d51ed5680", "patch": "@@ -522,6 +522,25 @@ init_return_column_size (enum machine_mode mode, rtx mem, unsigned int c)\n   emit_move_insn (adjust_address (mem, mode, offset), GEN_INT (size));\n }\n \n+/* Divide OFF by DWARF_CIE_DATA_ALIGNMENT, asserting no remainder.  */\n+\n+static HOST_WIDE_INT\n+div_data_align (HOST_WIDE_INT off)\n+{\n+  HOST_WIDE_INT r = off / DWARF_CIE_DATA_ALIGNMENT;\n+  gcc_assert (r * DWARF_CIE_DATA_ALIGNMENT == off);\n+  return r;\n+}\n+\n+/* Return true if we need a signed version of a given opcode\n+   (e.g. DW_CFA_offset_extended_sf vs DW_CFA_offset_extended).  */\n+\n+static bool\n+need_data_align_sf_opcode (HOST_WIDE_INT off)\n+{\n+  return DWARF_CIE_DATA_ALIGNMENT < 0 ? off > 0 : off < 0;\n+}\n+\n /* Generate code to initialize the register size table.  */\n \n void\n@@ -1000,7 +1019,7 @@ def_cfa_1 (const char *label, dw_cfa_location *loc_p)\n \t the specified offset.  The data factoring for DW_CFA_def_cfa_sf\n \t happens in output_cfi, or in the assembler via the .cfi_def_cfa\n \t directive.  */\n-      if (loc.offset < 0)\n+      if (need_data_align_sf_opcode (loc.offset))\n \tcfi->dw_cfi_opc = DW_CFA_def_cfa_sf;\n       else\n \tcfi->dw_cfi_opc = DW_CFA_def_cfa;\n@@ -1048,7 +1067,7 @@ reg_save (const char *label, unsigned int reg, unsigned int sreg, HOST_WIDE_INT\n     }\n   else if (sreg == INVALID_REGNUM)\n     {\n-      if (offset < 0)\n+      if (need_data_align_sf_opcode (offset))\n \tcfi->dw_cfi_opc = DW_CFA_offset_extended_sf;\n       else if (reg & ~0x3f)\n \tcfi->dw_cfi_opc = DW_CFA_offset_extended;\n@@ -2926,16 +2945,6 @@ switch_to_eh_frame_section (void)\n     }\n }\n \n-/* Divide OFF by DWARF_CIE_DATA_ALIGNMENT, asserting no remainder.  */\n-\n-static HOST_WIDE_INT\n-div_data_align (HOST_WIDE_INT off)\n-{\n-  HOST_WIDE_INT r = off / DWARF_CIE_DATA_ALIGNMENT;\n-  gcc_assert (r * DWARF_CIE_DATA_ALIGNMENT == off);\n-  return r;\n-}\n-\n /* Output a Call Frame Information opcode and its operand(s).  */\n \n static void"}]}