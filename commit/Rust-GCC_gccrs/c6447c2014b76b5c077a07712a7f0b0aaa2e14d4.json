{"sha": "c6447c2014b76b5c077a07712a7f0b0aaa2e14d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY0NDdjMjAxNGI3NmI1YzA3N2EwNzcxMmE3ZjBiMGFhYTJlMTRkNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-09-27T08:39:16Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-09-27T08:39:16Z"}, "message": "[C][C++] Allow targets to check calls to BUILT_IN_MD functions\n\nFor SVE, we'd like the frontends to check calls to target-specific\nbuilt-in functions in the same way that they already do for \"normal\"\nbuiltins.  This patch adds a target hook for that and extends\ncheck_builtin_function_arguments accordingly.\n\nA slight complication is that when TARGET_RESOLVE_OVERLOADED_BUILTIN\nhas resolved an overload, it can use build_function_call_vec to build\nthe call to the underlying non-overloaded function decl.  This in\nturn coerces the arguments to the function type and then calls\ncheck_builtin_function_arguments to check the final call.  If the\ntarget does find a problem in this final call, it can be useful\nto refer to the original overloaded function decl in diagnostics,\nsince that's what the user wrote.\n\nThe patch therefore passes the original decl as a final optional\nparameter to build_function_call_vec.\n\n2019-09-27  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* target.def (check_builtin_call): New target hook.\n\t* doc/tm.texi.in (TARGET_CHECK_BUILTIN_CALL): New @hook.\n\t* doc/tm.texi: Regenerate.\n\ngcc/c-family/\n\t* c-common.h (build_function_call_vec): Take the original\n\tfunction decl as an optional final parameter.\n\t(check_builtin_function_arguments): Take the original function decl.\n\t* c-common.c (check_builtin_function_arguments): Likewise.\n\tHandle all built-in functions, not just BUILT_IN_NORMAL ones.\n\tUse targetm.check_builtin_call to check BUILT_IN_MD functions.\n\ngcc/c/\n\t* c-typeck.c (build_function_call_vec): Take the original function\n\tdecl as an optional final parameter.  Pass all built-in calls to\n\tcheck_builtin_function_arguments.\n\ngcc/cp/\n\t* cp-tree.h (build_cxx_call): Take the original function decl\n\tas an optional final parameter.\n\t(cp_build_function_call_vec): Likewise.\n\t* call.c (build_cxx_call): Likewise.  Pass all built-in calls to\n\tcheck_builtin_function_arguments.\n\t* typeck.c (build_function_call_vec): Take the original function\n\tdecl as an optional final parameter and pass it to\n\tcp_build_function_call_vec.\n\t(cp_build_function_call_vec): Take the original function\n\tdecl as an optional final parameter and pass it to build_cxx_call.\n\nFrom-SVN: r276176", "tree": {"sha": "9921a7089999908bc2646d4e3529ed4eeef6495a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9921a7089999908bc2646d4e3529ed4eeef6495a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "18908a56e18f15f84a91a4529923dd0878b2294f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18908a56e18f15f84a91a4529923dd0878b2294f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18908a56e18f15f84a91a4529923dd0878b2294f"}], "stats": {"total": 137, "additions": 116, "deletions": 21}, "files": [{"sha": "b6a19c4e2f7e07fc73858aeb1821eac7053cf9b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6447c2014b76b5c077a07712a7f0b0aaa2e14d4", "patch": "@@ -1,3 +1,9 @@\n+2019-09-27  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* target.def (check_builtin_call): New target hook.\n+\t* doc/tm.texi.in (TARGET_CHECK_BUILTIN_CALL): New @hook.\n+\t* doc/tm.texi: Regenerate.\n+\n 2019-09-27  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR tree-optimization/91909"}, {"sha": "7b10957ad02a0b7ee8af2e86be62965bbb944a6d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=c6447c2014b76b5c077a07712a7f0b0aaa2e14d4", "patch": "@@ -1,3 +1,12 @@\n+2019-09-27  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* c-common.h (build_function_call_vec): Take the original\n+\tfunction decl as an optional final parameter.\n+\t(check_builtin_function_arguments): Take the original function decl.\n+\t* c-common.c (check_builtin_function_arguments): Likewise.\n+\tHandle all built-in functions, not just BUILT_IN_NORMAL ones.\n+\tUse targetm.check_builtin_call to check BUILT_IN_MD functions.\n+\n 2019-09-15  Jason Merrill  <jason@redhat.com>\n \n \t* c-warn.c (warn_logical_operator): Strip location wrappers.  Don't"}, {"sha": "7169813d0f26a1a3621d536748236b4ba8b5d904", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=c6447c2014b76b5c077a07712a7f0b0aaa2e14d4", "patch": "@@ -5856,15 +5856,27 @@ builtin_function_validate_nargs (location_t loc, tree fndecl, int nargs,\n /* Verifies the NARGS arguments ARGS to the builtin function FNDECL.\n    Returns false if there was an error, otherwise true.  LOC is the\n    location of the function; ARG_LOC is a vector of locations of the\n-   arguments.  */\n+   arguments.  If FNDECL is the result of resolving an overloaded\n+   target built-in, ORIG_FNDECL is the original function decl,\n+   otherwise it is null.  */\n \n bool\n check_builtin_function_arguments (location_t loc, vec<location_t> arg_loc,\n-\t\t\t\t  tree fndecl, int nargs, tree *args)\n+\t\t\t\t  tree fndecl, tree orig_fndecl,\n+\t\t\t\t  int nargs, tree *args)\n {\n-  if (!fndecl_built_in_p (fndecl, BUILT_IN_NORMAL))\n+  if (!fndecl_built_in_p (fndecl))\n     return true;\n \n+  if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n+    return (!targetm.check_builtin_call\n+\t    || targetm.check_builtin_call (loc, arg_loc, fndecl,\n+\t\t\t\t\t   orig_fndecl, nargs, args));\n+\n+  if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_FRONTEND)\n+    return true;\n+\n+  gcc_assert (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL);\n   switch (DECL_FUNCTION_CODE (fndecl))\n     {\n     case BUILT_IN_ALLOCA_WITH_ALIGN_AND_MAX:"}, {"sha": "c1554f3c3af2083a0bfff4323b14ccb097d1f9f2", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=c6447c2014b76b5c077a07712a7f0b0aaa2e14d4", "patch": "@@ -818,7 +818,7 @@ extern void check_function_arguments_recurse (void (*)\n \t\t\t\t\t      void *, tree,\n \t\t\t\t\t      unsigned HOST_WIDE_INT);\n extern bool check_builtin_function_arguments (location_t, vec<location_t>,\n-\t\t\t\t\t      tree, int, tree *);\n+\t\t\t\t\t      tree, tree, int, tree *);\n extern void check_function_format (const_tree, tree, int, tree *,\n \t\t\t\t   vec<location_t> *);\n extern bool attribute_fallthrough_p (tree);\n@@ -995,7 +995,8 @@ extern bool c_switch_covers_all_cases_p (splay_tree, tree);\n extern tree build_function_call (location_t, tree, tree);\n \n extern tree build_function_call_vec (location_t, vec<location_t>, tree,\n-\t\t\t\t     vec<tree, va_gc> *, vec<tree, va_gc> *);\n+\t\t\t\t     vec<tree, va_gc> *, vec<tree, va_gc> *,\n+\t\t\t\t     tree = NULL_TREE);\n \n extern tree resolve_overloaded_builtin (location_t, tree, vec<tree, va_gc> *);\n "}, {"sha": "718e5b8b8509ae5fcea958cfd71ebb0c1c0c78ac", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=c6447c2014b76b5c077a07712a7f0b0aaa2e14d4", "patch": "@@ -1,3 +1,9 @@\n+2019-09-27  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* c-typeck.c (build_function_call_vec): Take the original function\n+\tdecl as an optional final parameter.  Pass all built-in calls to\n+\tcheck_builtin_function_arguments.\n+\n 2019-09-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR c/91815"}, {"sha": "cc13fdc84c879df59815c18cedfaef5685e413f4", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=c6447c2014b76b5c077a07712a7f0b0aaa2e14d4", "patch": "@@ -3003,6 +3003,8 @@ inform_declaration (tree decl)\n }\n \n /* Build a function call to function FUNCTION with parameters PARAMS.\n+   If FUNCTION is the result of resolving an overloaded target built-in,\n+   ORIG_FUNDECL is the original function decl, otherwise it is null.\n    ORIGTYPES, if not NULL, is a vector of types; each element is\n    either NULL or the original type of the corresponding element in\n    PARAMS.  The original type may differ from TREE_TYPE of the\n@@ -3013,7 +3015,7 @@ inform_declaration (tree decl)\n tree\n build_function_call_vec (location_t loc, vec<location_t> arg_loc,\n \t\t\t tree function, vec<tree, va_gc> *params,\n-\t\t\t vec<tree, va_gc> *origtypes)\n+\t\t\t vec<tree, va_gc> *origtypes, tree orig_fundecl)\n {\n   tree fntype, fundecl = NULL_TREE;\n   tree name = NULL_TREE, result;\n@@ -3033,6 +3035,8 @@ build_function_call_vec (location_t loc, vec<location_t> arg_loc,\n       if (flag_tm)\n \ttm_malloc_replacement (function);\n       fundecl = function;\n+      if (!orig_fundecl)\n+\torig_fundecl = fundecl;\n       /* Atomic functions have type checking/casting already done.  They are \n \t often rewritten and don't match the original parameter list.  */\n       if (name && !strncmp (IDENTIFIER_POINTER (name), \"__atomic_\", 9))\n@@ -3110,9 +3114,10 @@ build_function_call_vec (location_t loc, vec<location_t> arg_loc,\n   argarray = vec_safe_address (params);\n \n   /* Check that arguments to builtin functions match the expectations.  */\n-  if (fundecl && fndecl_built_in_p (fundecl, BUILT_IN_NORMAL)\n-      && !check_builtin_function_arguments (loc, arg_loc, fundecl, nargs,\n-\t\t\t\t\t    argarray))\n+  if (fundecl\n+      && fndecl_built_in_p (fundecl)\n+      && !check_builtin_function_arguments (loc, arg_loc, fundecl,\n+\t\t\t\t\t    orig_fundecl, nargs, argarray))\n     return error_mark_node;\n \n   /* Check that the arguments to the function are valid.  */"}, {"sha": "3a3ef9ed2502016bda5fbb7f23a4c5c3bb931f22", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c6447c2014b76b5c077a07712a7f0b0aaa2e14d4", "patch": "@@ -1,3 +1,16 @@\n+2019-09-27  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* cp-tree.h (build_cxx_call): Take the original function decl\n+\tas an optional final parameter.\n+\t(cp_build_function_call_vec): Likewise.\n+\t* call.c (build_cxx_call): Likewise.  Pass all built-in calls to\n+\tcheck_builtin_function_arguments.\n+\t* typeck.c (build_function_call_vec): Take the original function\n+\tdecl as an optional final parameter and pass it to\n+\tcp_build_function_call_vec.\n+\t(cp_build_function_call_vec): Take the original function\n+\tdecl as an optional final parameter and pass it to build_cxx_call.\n+\n 2019-09-25  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/91877 - ICE with converting member of packed struct."}, {"sha": "5ccf3b89682c114bcc2fd9773399a18752258556", "filename": "gcc/cp/call.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=c6447c2014b76b5c077a07712a7f0b0aaa2e14d4", "patch": "@@ -9105,12 +9105,14 @@ maybe_warn_class_memaccess (location_t loc, tree fndecl,\n }\n \n /* Build and return a call to FN, using NARGS arguments in ARGARRAY.\n+   If FN is the result of resolving an overloaded target built-in,\n+   ORIG_FNDECL is the original function decl, otherwise it is null.\n    This function performs no overload resolution, conversion, or other\n    high-level operations.  */\n \n tree\n build_cxx_call (tree fn, int nargs, tree *argarray,\n-\t\ttsubst_flags_t complain)\n+\t\ttsubst_flags_t complain, tree orig_fndecl)\n {\n   tree fndecl;\n \n@@ -9120,11 +9122,13 @@ build_cxx_call (tree fn, int nargs, tree *argarray,\n   SET_EXPR_LOCATION (fn, loc);\n \n   fndecl = get_callee_fndecl (fn);\n+  if (!orig_fndecl)\n+    orig_fndecl = fndecl;\n \n   /* Check that arguments to builtin functions match the expectations.  */\n   if (fndecl\n       && !processing_template_decl\n-      && fndecl_built_in_p (fndecl, BUILT_IN_NORMAL))\n+      && fndecl_built_in_p (fndecl))\n     {\n       int i;\n \n@@ -9134,7 +9138,7 @@ build_cxx_call (tree fn, int nargs, tree *argarray,\n \targarray[i] = maybe_constant_value (argarray[i]);\n \n       if (!check_builtin_function_arguments (EXPR_LOCATION (fn), vNULL, fndecl,\n-\t\t\t\t\t     nargs, argarray))\n+\t\t\t\t\t     orig_fndecl, nargs, argarray))\n \treturn error_mark_node;\n     }\n "}, {"sha": "8fc3fc1f78bad743116bbce549c1e41f080f7791", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c6447c2014b76b5c077a07712a7f0b0aaa2e14d4", "patch": "@@ -6257,7 +6257,8 @@ extern tree perform_direct_initialization_if_possible (tree, tree, bool,\n                                                        tsubst_flags_t);\n extern tree in_charge_arg_for_name\t\t(tree);\n extern tree build_cxx_call\t\t\t(tree, int, tree *,\n-\t\t\t\t\t\t tsubst_flags_t);\n+\t\t\t\t\t\t tsubst_flags_t,\n+\t\t\t\t\t\t tree = NULL_TREE);\n extern bool is_std_init_list\t\t\t(tree);\n extern bool is_list_ctor\t\t\t(tree);\n extern void validate_conversion_obstack\t\t(void);\n@@ -7391,7 +7392,8 @@ extern tree get_member_function_from_ptrfunc\t(tree *, tree, tsubst_flags_t);\n extern tree cp_build_function_call_nary         (tree, tsubst_flags_t, ...)\n \t\t\t\t\t\tATTRIBUTE_SENTINEL;\n extern tree cp_build_function_call_vec\t\t(tree, vec<tree, va_gc> **,\n-\t\t\t\t\t\t tsubst_flags_t);\n+\t\t\t\t\t\t tsubst_flags_t,\n+\t\t\t\t\t\t tree = NULL_TREE);\n extern tree build_x_binary_op\t\t\t(const op_location_t &,\n \t\t\t\t\t\t enum tree_code, tree,\n \t\t\t\t\t\t enum tree_code, tree,"}, {"sha": "d549450a605fa823a1c4054003025bc18447cc64", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=c6447c2014b76b5c077a07712a7f0b0aaa2e14d4", "patch": "@@ -3773,11 +3773,11 @@ build_function_call (location_t /*loc*/,\n tree\n build_function_call_vec (location_t /*loc*/, vec<location_t> /*arg_loc*/,\n \t\t\t tree function, vec<tree, va_gc> *params,\n-\t\t\t vec<tree, va_gc> * /*origtypes*/)\n+\t\t\t vec<tree, va_gc> * /*origtypes*/, tree orig_function)\n {\n   vec<tree, va_gc> *orig_params = params;\n   tree ret = cp_build_function_call_vec (function, &params,\n-\t\t\t\t\t tf_warning_or_error);\n+\t\t\t\t\t tf_warning_or_error, orig_function);\n \n   /* cp_build_function_call_vec can reallocate PARAMS by adding\n      default arguments.  That should never happen here.  Verify\n@@ -3818,13 +3818,15 @@ cp_build_function_call_nary (tree function, tsubst_flags_t complain, ...)\n   return ret;\n }\n \n-/* Build a function call using a vector of arguments.  PARAMS may be\n-   NULL if there are no parameters.  This changes the contents of\n-   PARAMS.  */\n+/* Build a function call using a vector of arguments.\n+   If FUNCTION is the result of resolving an overloaded target built-in,\n+   ORIG_FNDECL is the original function decl, otherwise it is null.\n+   PARAMS may be NULL if there are no parameters.  This changes the\n+   contents of PARAMS.  */\n \n tree\n cp_build_function_call_vec (tree function, vec<tree, va_gc> **params,\n-\t\t\t    tsubst_flags_t complain)\n+\t\t\t    tsubst_flags_t complain, tree orig_fndecl)\n {\n   tree fntype, fndecl;\n   int is_method;\n@@ -3949,7 +3951,7 @@ cp_build_function_call_vec (tree function, vec<tree, va_gc> **params,\n   bool warned_p = check_function_arguments (input_location, fndecl, fntype,\n \t\t\t\t\t    nargs, argarray, NULL);\n \n-  ret = build_cxx_call (function, nargs, argarray, complain);\n+  ret = build_cxx_call (function, nargs, argarray, complain, orig_fndecl);\n \n   if (warned_p)\n     {"}, {"sha": "a86c210d4fe390bd0356b6e50ba7c6c34a36239a", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=c6447c2014b76b5c077a07712a7f0b0aaa2e14d4", "patch": "@@ -11567,6 +11567,21 @@ another @code{CALL_EXPR}.\n @var{arglist} really has type @samp{VEC(tree,gc)*}\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_CHECK_BUILTIN_CALL (location_t @var{loc}, vec<location_t> @var{arg_loc}, tree @var{fndecl}, tree @var{orig_fndecl}, unsigned int @var{nargs}, tree *@var{args})\n+Perform semantic checking on a call to a machine-specific built-in\n+function after its arguments have been constrained to the function\n+signature.  Return true if the call is valid, otherwise report an error\n+and return false.\n+\n+This hook is called after @code{TARGET_RESOLVE_OVERLOADED_BUILTIN}.\n+The call was originally to built-in function @var{orig_fndecl},\n+but after the optional @code{TARGET_RESOLVE_OVERLOADED_BUILTIN}\n+step is now to built-in function @var{fndecl}.  @var{loc} is the\n+location of the call and @var{args} is an array of function arguments,\n+of which there are @var{nargs}.  @var{arg_loc} specifies the location\n+of each argument.\n+@end deftypefn\n+\n @deftypefn {Target Hook} tree TARGET_FOLD_BUILTIN (tree @var{fndecl}, int @var{n_args}, tree *@var{argp}, bool @var{ignore})\n Fold a call to a machine specific built-in function that was set up by\n @samp{TARGET_INIT_BUILTINS}.  @var{fndecl} is the declaration of the"}, {"sha": "06dfcda35abea7396c288a59c38ee4ef57c6fef6", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=c6447c2014b76b5c077a07712a7f0b0aaa2e14d4", "patch": "@@ -7938,6 +7938,8 @@ to by @var{ce_info}.\n \n @hook TARGET_RESOLVE_OVERLOADED_BUILTIN\n \n+@hook TARGET_CHECK_BUILTIN_CALL\n+\n @hook TARGET_FOLD_BUILTIN\n \n @hook TARGET_GIMPLE_FOLD_BUILTIN"}, {"sha": "f9446fa05a22c79154c2ef36d3d8aea48a5efcc6", "filename": "gcc/target.def", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6447c2014b76b5c077a07712a7f0b0aaa2e14d4/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=c6447c2014b76b5c077a07712a7f0b0aaa2e14d4", "patch": "@@ -2397,6 +2397,24 @@ another @code{CALL_EXPR}.\\n\\\n @var{arglist} really has type @samp{VEC(tree,gc)*}\",\n  tree, (unsigned int /*location_t*/ loc, tree fndecl, void *arglist), NULL)\n \n+DEFHOOK\n+(check_builtin_call,\n+ \"Perform semantic checking on a call to a machine-specific built-in\\n\\\n+function after its arguments have been constrained to the function\\n\\\n+signature.  Return true if the call is valid, otherwise report an error\\n\\\n+and return false.\\n\\\n+\\n\\\n+This hook is called after @code{TARGET_RESOLVE_OVERLOADED_BUILTIN}.\\n\\\n+The call was originally to built-in function @var{orig_fndecl},\\n\\\n+but after the optional @code{TARGET_RESOLVE_OVERLOADED_BUILTIN}\\n\\\n+step is now to built-in function @var{fndecl}.  @var{loc} is the\\n\\\n+location of the call and @var{args} is an array of function arguments,\\n\\\n+of which there are @var{nargs}.  @var{arg_loc} specifies the location\\n\\\n+of each argument.\",\n+ bool, (location_t loc, vec<location_t> arg_loc, tree fndecl,\n+\ttree orig_fndecl, unsigned int nargs, tree *args),\n+ NULL)\n+\n /* Fold a target-specific builtin to a tree valid for both GIMPLE\n    and GENERIC.  */\n DEFHOOK"}]}