{"sha": "558be301bddc36ccee1daf43d74c0a6296d3eb13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU4YmUzMDFiZGRjMzZjY2VlMWRhZjQzZDc0YzBhNjI5NmQzZWIxMw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-07-10T19:26:58Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-07-10T19:26:58Z"}, "message": "re PR target/32708 (_mm_cvtsi64x_si128() and _mm_cvtsi128_si64x() inefficient)\n\n        PR target/32708\n        * config/i386/sse.md (vec_concatv2di): Disable for TARGET_64BIT.\n        (*vec_concatv2di_rex): New insn pattern.\n\ntestsuite/ChangeLog:\n\n        PR target/32708\n        * gcc.target/i386/pr32708-1.c: New test.\n        * gcc.target/i386/pr32708-2.c: Ditto.\n        * gcc.target/i386/pr32708-3.c: Ditto.\n\nFrom-SVN: r126523", "tree": {"sha": "ee7ed21f874f952e037c7236575aadae2ed40fa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee7ed21f874f952e037c7236575aadae2ed40fa9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/558be301bddc36ccee1daf43d74c0a6296d3eb13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/558be301bddc36ccee1daf43d74c0a6296d3eb13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/558be301bddc36ccee1daf43d74c0a6296d3eb13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/558be301bddc36ccee1daf43d74c0a6296d3eb13/comments", "author": null, "committer": null, "parents": [{"sha": "1ef8ecdd2e46e4b291cf7f3f1514497ba8bade5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef8ecdd2e46e4b291cf7f3f1514497ba8bade5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ef8ecdd2e46e4b291cf7f3f1514497ba8bade5f"}], "stats": {"total": 90, "additions": 87, "deletions": 3}, "files": [{"sha": "6ebd9b0197963832774e3330ba0b51ae2ad886fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/558be301bddc36ccee1daf43d74c0a6296d3eb13/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/558be301bddc36ccee1daf43d74c0a6296d3eb13/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=558be301bddc36ccee1daf43d74c0a6296d3eb13", "patch": "@@ -1,3 +1,9 @@\n+2007-07-10  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/32708\n+\t* config/i386/sse.md (vec_concatv2di): Disable for TARGET_64BIT.\n+\t(*vec_concatv2di_rex): New insn pattern.\n+\n 2007-07-10  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \tPR target/32538\n@@ -132,8 +138,8 @@\n \t* optabs.h: Added declaration for signbit_optab.  \n \t* optabs.c: (init_optabs): Added initialization for signbit_optab.\n \t* genoptinit.c (optabs): Added entry for signbit insns.  \n-\t* builtins.c (expand_builtin_signbit): Added code to use a signbit insn,\n-\tif available.  \n+\t* builtins.c (expand_builtin_signbit): Added code to use a signbit\n+\tinsn, if available.  \n \t* config/s390/s390.h (S390_TDC_SIGNBIT_SET): New constant.  \n \t* config/s390/s390.md (signbit<mode>2): New expander.  \n "}, {"sha": "027d43bfb6ca3dd27cd25a647f7b60a2cac89770", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/558be301bddc36ccee1daf43d74c0a6296d3eb13/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/558be301bddc36ccee1daf43d74c0a6296d3eb13/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=558be301bddc36ccee1daf43d74c0a6296d3eb13", "patch": "@@ -4717,7 +4717,7 @@\n \t(vec_concat:V2DI\n \t  (match_operand:DI 1 \"nonimmediate_operand\" \"  m,*y ,0 ,0,0,m\")\n \t  (match_operand:DI 2 \"vector_move_operand\"  \"  C,  C,Yt,x,m,0\")))]\n-  \"TARGET_SSE\"\n+  \"!TARGET_64BIT && TARGET_SSE\"\n   \"@\n    movq\\t{%1, %0|%0, %1}\n    movq2dq\\t{%1, %0|%0, %1}\n@@ -4728,6 +4728,23 @@\n   [(set_attr \"type\" \"ssemov,ssemov,sselog,ssemov,ssemov,ssemov\")\n    (set_attr \"mode\" \"TI,TI,TI,V4SF,V2SF,V2SF\")])\n \n+(define_insn \"*vec_concatv2di_rex\"\n+  [(set (match_operand:V2DI 0 \"register_operand\"     \"=Yt,Yi,!Yt,Yt,x,x,x\")\n+\t(vec_concat:V2DI\n+\t  (match_operand:DI 1 \"nonimmediate_operand\" \"  m,r ,*y ,0 ,0,0,m\")\n+\t  (match_operand:DI 2 \"vector_move_operand\"  \"  C,C ,C  ,Yt,x,m,0\")))]\n+  \"TARGET_64BIT\"\n+  \"@\n+   movq\\t{%1, %0|%0, %1}\n+   movq\\t{%1, %0|%0, %1}\n+   movq2dq\\t{%1, %0|%0, %1}\n+   punpcklqdq\\t{%2, %0|%0, %2}\n+   movlhps\\t{%2, %0|%0, %2}\n+   movhps\\t{%2, %0|%0, %2}\n+   movlps\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssemov,ssemov,ssemov,sselog,ssemov,ssemov,ssemov\")\n+   (set_attr \"mode\" \"TI,TI,TI,TI,V4SF,V2SF,V2SF\")])\n+\n (define_expand \"vec_setv2di\"\n   [(match_operand:V2DI 0 \"register_operand\" \"\")\n    (match_operand:DI 1 \"register_operand\" \"\")"}, {"sha": "a473461da07656c18d162d21a7c7068d8b622eb4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/558be301bddc36ccee1daf43d74c0a6296d3eb13/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/558be301bddc36ccee1daf43d74c0a6296d3eb13/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=558be301bddc36ccee1daf43d74c0a6296d3eb13", "patch": "@@ -1,3 +1,10 @@\n+2007-07-10  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/32708\n+\t* gcc.target/i386/pr32708-1.c: New test.\n+\t* gcc.target/i386/pr32708-2.c: Ditto.\n+\t* gcc.target/i386/pr32708-3.c: Ditto.\n+\n 2007-07-10  Mark Mitchell  <mark@codesourcery.com>\n \n \t* g++.dg/init/new20.C: Remove svn:executable flag."}, {"sha": "4c2b50c781d3b7753b3053e6c5bbbfc721655cb1", "filename": "gcc/testsuite/gcc.target/i386/pr32708-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/558be301bddc36ccee1daf43d74c0a6296d3eb13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32708-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/558be301bddc36ccee1daf43d74c0a6296d3eb13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32708-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32708-1.c?ref=558be301bddc36ccee1daf43d74c0a6296d3eb13", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+typedef long long __v2di __attribute__ ((__vector_size__ (16)));\n+typedef long long __m128i __attribute__ ((__vector_size__ (16)));\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_set_epi64x (long long __q1, long long __q0)\n+{\n+  return __extension__ (__m128i)(__v2di){ __q0, __q1 };\n+}\n+\n+__m128i long2vector(long long __i)\n+{\n+  return _mm_set_epi64x (0, __i);\n+}\n+\n+/* { dg-final { scan-assembler-not \"movq2dq\" } } */"}, {"sha": "d8560f7a8bf22a5ed043ae7823e73b8cd0d48af5", "filename": "gcc/testsuite/gcc.target/i386/pr32708-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/558be301bddc36ccee1daf43d74c0a6296d3eb13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32708-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/558be301bddc36ccee1daf43d74c0a6296d3eb13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32708-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32708-2.c?ref=558be301bddc36ccee1daf43d74c0a6296d3eb13", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { { i?86-*-* x86_64-*-* } && lp64 } } } */\n+/* { dg-options \"-O2 -mtune=k8\" } */\n+\n+typedef long long __v2di __attribute__ ((__vector_size__ (16)));\n+typedef long long __m128i __attribute__ ((__vector_size__ (16)));\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_set_epi64x (long long __q1, long long __q0)\n+{\n+  return __extension__ (__m128i)(__v2di){ __q0, __q1 };\n+}\n+\n+__m128i long2vector(long long __i)\n+{\n+  return _mm_set_epi64x (0, __i);\n+}\n+\n+/* { dg-final { scan-assembler-not \"movq2dq\" } } */"}, {"sha": "b61b82ae955fc472f1f1e521c9f5cdbe9b3a491a", "filename": "gcc/testsuite/gcc.target/i386/pr32708-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/558be301bddc36ccee1daf43d74c0a6296d3eb13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32708-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/558be301bddc36ccee1daf43d74c0a6296d3eb13/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32708-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32708-3.c?ref=558be301bddc36ccee1daf43d74c0a6296d3eb13", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { { i?86-*-* x86_64-*-* } && lp64 } } } */\n+/* { dg-options \"-O2 -mtune=core2\" } */\n+\n+typedef long long __v2di __attribute__ ((__vector_size__ (16)));\n+typedef long long __m128i __attribute__ ((__vector_size__ (16)));\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_set_epi64x (long long __q1, long long __q0)\n+{\n+  return __extension__ (__m128i)(__v2di){ __q0, __q1 };\n+}\n+\n+__m128i long2vector(long long __i)\n+{\n+  return _mm_set_epi64x (0, __i);\n+}\n+\n+/* { dg-final { scan-assembler-not \"movq2dq\" } } */"}]}