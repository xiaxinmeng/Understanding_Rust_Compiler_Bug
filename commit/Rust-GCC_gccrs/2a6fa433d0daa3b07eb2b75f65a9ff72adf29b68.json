{"sha": "2a6fa433d0daa3b07eb2b75f65a9ff72adf29b68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE2ZmE0MzNkMGRhYTNiMDdlYjJiNzVmNjVhOWZmNzJhZGYyOWI2OA==", "commit": {"author": {"name": "Jason Eckhardt", "email": "jle@cygnus.com", "date": "2000-05-04T02:37:49Z"}, "committer": {"name": "Jason Eckhardt", "email": "jle@gcc.gnu.org", "date": "2000-05-04T02:37:49Z"}, "message": "bb-reorder.c (struct reorder_block_def): Member succ removed.\n\nWed May  3 21:01:46 2000  Jason Eckhardt  <jle@cygnus.com>\n\n        * bb-reorder.c (struct reorder_block_def): Member succ removed.\n        (REORDER_BLOCK_SUCC): Removed.\n        (enum reorder_skip_type): Removed.\n        (skip_insns_between_block): Renamed to skip_insns_after_block.\n        Removed second argument. Removed dead code and cleaned up.\n        (make_reorder_chain): Removed use of REORDER_BLOCK_SUCC.\n        (reorder_basic_blocks): Remove use of REORDER_SKIP_AFTER. Removed\n        second parameter to skip_insns_after_block.\n\nFrom-SVN: r33655", "tree": {"sha": "4645088e2c7a5c762de21610c4265700337edb65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4645088e2c7a5c762de21610c4265700337edb65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a6fa433d0daa3b07eb2b75f65a9ff72adf29b68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a6fa433d0daa3b07eb2b75f65a9ff72adf29b68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a6fa433d0daa3b07eb2b75f65a9ff72adf29b68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a6fa433d0daa3b07eb2b75f65a9ff72adf29b68/comments", "author": null, "committer": null, "parents": [{"sha": "d8e7c8842a1075241def15de91fa98b72ca4149f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e7c8842a1075241def15de91fa98b72ca4149f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8e7c8842a1075241def15de91fa98b72ca4149f"}], "stats": {"total": 154, "additions": 46, "deletions": 108}, "files": [{"sha": "622b76f83d7fcc1957346d14d3ff4c211979c46a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a6fa433d0daa3b07eb2b75f65a9ff72adf29b68/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a6fa433d0daa3b07eb2b75f65a9ff72adf29b68/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a6fa433d0daa3b07eb2b75f65a9ff72adf29b68", "patch": "@@ -1,3 +1,14 @@\n+Wed May  3 21:01:46 2000  Jason Eckhardt  <jle@cygnus.com>\n+\n+        * bb-reorder.c (struct reorder_block_def): Member succ removed.\n+        (REORDER_BLOCK_SUCC): Removed.\n+        (enum reorder_skip_type): Removed.\n+        (skip_insns_between_block): Renamed to skip_insns_after_block.\n+        Removed second argument. Removed dead code and cleaned up.\n+        (make_reorder_chain): Removed use of REORDER_BLOCK_SUCC.\n+        (reorder_basic_blocks): Remove use of REORDER_SKIP_AFTER. Removed\n+        second parameter to skip_insns_after_block.\n+\n Wed May  3 13:29:54 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* tree.c (staticp, case LABEL_DECL): New case."}, {"sha": "0b1a77ff935c5825841cddf1d6a1d0f8d7088c4a", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 35, "deletions": 108, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a6fa433d0daa3b07eb2b75f65a9ff72adf29b68/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a6fa433d0daa3b07eb2b75f65a9ff72adf29b68/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=2a6fa433d0daa3b07eb2b75f65a9ff72adf29b68", "patch": "@@ -103,7 +103,6 @@ typedef struct reorder_block_def {\n   int flags;\n   int index;\n   basic_block add_jump;\n-  edge succ;\n   rtx eff_head;\n   rtx eff_end;\n   scope scope;\n@@ -114,7 +113,6 @@ static struct reorder_block_def rbd_init\n     0,\t\t\t/* flags */\n     0,\t\t\t/* index */\n     NULL,\t\t/* add_jump */\n-    NULL,\t\t/* succ */\n     NULL_RTX,\t\t/* eff_head */\n     NULL_RTX,\t\t/* eff_end */\n     NULL\t\t/* scope */\n@@ -133,9 +131,6 @@ static struct reorder_block_def rbd_init\n #define REORDER_BLOCK_ADD_JUMP(bb) \\\n   ((reorder_block_def) (bb)->aux)->add_jump\n \n-#define REORDER_BLOCK_SUCC(bb) \\\n-  ((reorder_block_def) (bb)->aux)->succ\n-\n #define REORDER_BLOCK_EFF_HEAD(bb) \\\n   ((reorder_block_def) (bb)->aux)->eff_head\n \n@@ -149,13 +144,9 @@ static struct reorder_block_def rbd_init\n static int reorder_index;\n static basic_block reorder_last_visited;\n \n-enum reorder_skip_type {REORDER_SKIP_BEFORE, REORDER_SKIP_AFTER,\n-\t\t\tREORDER_SKIP_BLOCK_END};\n-\n \n /* Local function prototypes.  */\n-static rtx skip_insns_between_block\tPARAMS ((basic_block,\n-\t\t\t\t\t\t enum reorder_skip_type));\n+static rtx skip_insns_after_block\tPARAMS ((basic_block));\n static basic_block get_common_dest\tPARAMS ((basic_block, basic_block));\n static basic_block chain_reorder_blocks\tPARAMS ((edge, basic_block));\n static void make_reorder_chain\t\tPARAMS ((basic_block));\n@@ -176,113 +167,52 @@ static void free_scope_forest\t\tPARAMS ((scope_forest_info *));\n void dump_scope_forest\t\t\tPARAMS ((scope_forest_info *));\n static void dump_scope_forest_1\t\tPARAMS ((scope, int));\n \n-/* Skip over insns BEFORE or AFTER BB which are typically associated with\n-   basic block BB.  */\n+/* Skip over inter-block insns occurring after BB which are typically\n+   associated with BB (e.g., barriers). If there are any such insns,\n+   we return the last one. Otherwise, we return the end of BB.  */\n \n static rtx\n-skip_insns_between_block (bb, skip_type)\n+skip_insns_after_block (bb)\n      basic_block bb;\n-     enum reorder_skip_type skip_type;\n {\n   rtx insn, last_insn;\n \n-  if (skip_type == REORDER_SKIP_BEFORE)\n-    {\n-      if (bb == ENTRY_BLOCK_PTR)\n-\treturn 0;\n+  last_insn = bb->end;\n \n-      last_insn = bb->head;\n-      for (insn = PREV_INSN (bb->head);\n-\t   insn && insn != BASIC_BLOCK (bb->index - 1)->end;\n-\t   last_insn = insn, insn = PREV_INSN (insn))\n-\t{\n-\t  if (NEXT_INSN (insn) != last_insn)\n-\t    break;\n-\n-\t  if (GET_CODE (insn) == NOTE\n-\t      && NOTE_LINE_NUMBER (insn) != NOTE_INSN_LOOP_END\n-\t      && NOTE_LINE_NUMBER (insn) != NOTE_INSN_BASIC_BLOCK\n-\t      && NOTE_LINE_NUMBER (insn) != NOTE_INSN_BLOCK_END)\n-\t    continue;\n-\t  \n-\t  break;\n-\t}\n-    }\n-  else\n-    {\n-      last_insn = bb->end;\n+  if (bb == EXIT_BLOCK_PTR)\n+    return 0;\n \n-      if (bb == EXIT_BLOCK_PTR)\n-\treturn 0;\n+  for (insn = NEXT_INSN (bb->end); \n+       insn;\n+       last_insn = insn, insn = NEXT_INSN (insn))\n+    {\n+      if (bb->index + 1 != n_basic_blocks\n+\t  && insn == BASIC_BLOCK (bb->index + 1)->head)\n+\tbreak;\n+\n+      if (GET_CODE (insn) == BARRIER\n+\t  || GET_CODE (insn) == JUMP_INSN \n+\t  || (GET_CODE (insn) == NOTE\n+\t      && (NOTE_LINE_NUMBER (insn) == NOTE_INSN_LOOP_END\n+\t\t  || NOTE_LINE_NUMBER (insn) == NOTE_INSN_BLOCK_END)))\n+\tcontinue;\n \n-      for (insn = NEXT_INSN (bb->end); \n-\t   insn;\n-\t   last_insn = insn, insn = NEXT_INSN (insn))\n+      if (GET_CODE (insn) == CODE_LABEL\n+\t  && GET_CODE (NEXT_INSN (insn)) == JUMP_INSN\n+\t  && (GET_CODE (PATTERN (NEXT_INSN (insn))) == ADDR_VEC\n+\t      || GET_CODE (PATTERN (NEXT_INSN (insn))) == ADDR_DIFF_VEC))\n \t{\n-\t  if (bb->index + 1 != n_basic_blocks\n-\t      && insn == BASIC_BLOCK (bb->index + 1)->head)\n-\t    break;\n-\n-\t  if (GET_CODE (insn) == BARRIER\n-\t      || GET_CODE (insn) == JUMP_INSN \n-\t      || (GET_CODE (insn) == NOTE\n-\t\t  && (NOTE_LINE_NUMBER (insn) == NOTE_INSN_LOOP_END\n-\t\t      || NOTE_LINE_NUMBER (insn) == NOTE_INSN_BLOCK_END)))\n-\t    continue;\n-\n-\t  if (GET_CODE (insn) == CODE_LABEL\n-\t      && GET_CODE (NEXT_INSN (insn)) == JUMP_INSN\n-\t      && (GET_CODE (PATTERN (NEXT_INSN (insn))) == ADDR_VEC\n-\t\t  || GET_CODE (PATTERN\n-\t\t\t       (NEXT_INSN (insn))) == ADDR_DIFF_VEC))\n-\t    {\n-\t      insn = NEXT_INSN (insn);\n-\t      continue;\n-\t    }\n-\n-\t  /* Skip to next non-deleted insn.  */\n-\t  if (GET_CODE (insn) == NOTE\n-\t      && (NOTE_LINE_NUMBER (insn) == NOTE_INSN_DELETED\n-\t\t  || NOTE_LINE_NUMBER (insn) == NOTE_INSN_DELETED_LABEL))\n-\t    continue; \n-\n-\t  break;\n+\t  insn = NEXT_INSN (insn);\n+\t  continue;\n \t}\n \n-      if (skip_type == REORDER_SKIP_BLOCK_END)\n-\t{\n-\t  int found_block_end = 0;\n-\n-\t  for (; insn; last_insn = insn, insn = NEXT_INSN (insn))\n-\t    {\n-\t      if (bb->index + 1 != n_basic_blocks\n-\t\t  && insn == BASIC_BLOCK (bb->index + 1)->head)\n-\t\tbreak;\n-\n-\t      if (GET_CODE (insn) == NOTE\n-\t\t  && NOTE_LINE_NUMBER (insn) == NOTE_INSN_BLOCK_END)\n-\t\t{\n-\t\t  found_block_end = 1;\n-\t\t  continue;\n-\t\t}\n-\n-\t      if (GET_CODE (insn) == NOTE\n-\t\t  && NOTE_LINE_NUMBER (insn) == NOTE_INSN_DELETED)\n-\t\tcontinue;\n-\n-\t      if (GET_CODE (insn) == NOTE\n-\t\t  && NOTE_LINE_NUMBER (insn) >= 0\n-\t\t  && NEXT_INSN (insn)\n-\t\t  && GET_CODE (NEXT_INSN (insn)) == NOTE\n-\t\t  && (NOTE_LINE_NUMBER (NEXT_INSN (insn))\n-\t\t      == NOTE_INSN_BLOCK_END))\n-\t\tcontinue;\n-\t      break;\n-\t    }\n+      /* Skip to next non-deleted insn.  */\n+      if (GET_CODE (insn) == NOTE\n+\t  && (NOTE_LINE_NUMBER (insn) == NOTE_INSN_DELETED\n+\t      || NOTE_LINE_NUMBER (insn) == NOTE_INSN_DELETED_LABEL))\n+\tcontinue; \n \n-\t  if (! found_block_end)\n-\t    last_insn = 0;\n-\t}\n+      break;\n     }\n \n   return last_insn;\n@@ -566,8 +496,6 @@ make_reorder_chain (bb)\n       if (REORDER_BLOCK_FLAGS (e->dest) & REORDER_BLOCK_VISITED)\n \tREORDER_BLOCK_FLAGS (e->dest) &= ~REORDER_BLOCK_HEAD;\n \t\n-      REORDER_BLOCK_SUCC (bb) = e;\n-\n       visited_edge = e->dest;\n \n       reorder_last_visited = chain_reorder_blocks (e, bb);\n@@ -1410,8 +1338,7 @@ reorder_basic_blocks ()\n   for (i = 0; i < n_basic_blocks; i++)\n     {\n       basic_block bbi = BASIC_BLOCK (i);\n-      REORDER_BLOCK_EFF_END (bbi)\n-\t= skip_insns_between_block (bbi, REORDER_SKIP_AFTER);\n+      REORDER_BLOCK_EFF_END (bbi) = skip_insns_after_block (bbi);\n       if (i == 0)\n \tREORDER_BLOCK_EFF_HEAD (bbi) = get_insns ();\n       else "}]}