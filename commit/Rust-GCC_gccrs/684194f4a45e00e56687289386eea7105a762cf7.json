{"sha": "684194f4a45e00e56687289386eea7105a762cf7", "node_id": "C_kwDOANBUbNoAKDY4NDE5NGY0YTQ1ZTAwZTU2Njg3Mjg5Mzg2ZWVhNzEwNWE3NjJjZjc", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2022-06-02T15:22:42Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-05T08:28:17Z"}, "message": "[Ada] Remove return statements after procedure calls that don't return\n\nA new warning about unreachable code that follows calls to procedures\nwith No_Return would flag many unnecessary return statements. Those\nreturns statements were applied inconsistently, so this patch is\nactually more a style cleanup.\n\ngcc/ada/\n\n\t* sem_attr.adb, sem_prag.adb: Remove dead return statements\n\tafter calls to Error_Attr, Error_Pragma, Error_Pragma_Arg and\n\tPlacement_Error. All these calls raise exceptions that are\n\thandled to gently recover from errors.", "tree": {"sha": "ef5bfa1c2f2720d256754ac11f4aa70c6d49c1e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef5bfa1c2f2720d256754ac11f4aa70c6d49c1e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/684194f4a45e00e56687289386eea7105a762cf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/684194f4a45e00e56687289386eea7105a762cf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/684194f4a45e00e56687289386eea7105a762cf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/684194f4a45e00e56687289386eea7105a762cf7/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f608cf03b1c96878d559820ccb4037fee5575876", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f608cf03b1c96878d559820ccb4037fee5575876", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f608cf03b1c96878d559820ccb4037fee5575876"}], "stats": {"total": 63, "additions": 0, "deletions": 63}, "files": [{"sha": "be600872a1d68a010c1b85692476b110974c05a3", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684194f4a45e00e56687289386eea7105a762cf7/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684194f4a45e00e56687289386eea7105a762cf7/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=684194f4a45e00e56687289386eea7105a762cf7", "patch": "@@ -1090,7 +1090,6 @@ package body Sem_Attr is\n \n                else\n                   Error_Attr (\"% attribute cannot be applied to type\", P);\n-                  return;\n                end if;\n             end if;\n          end if;\n@@ -1429,7 +1428,6 @@ package body Sem_Attr is\n \n             else\n                Placement_Error;\n-               return;\n             end if;\n \n          --  'Old attribute reference ok in a _Postconditions procedure\n@@ -1445,7 +1443,6 @@ package body Sem_Attr is\n \n          else\n             Placement_Error;\n-            return;\n          end if;\n \n          --  Find the related subprogram subject to the aspect or pragma\n@@ -1715,14 +1712,12 @@ package body Sem_Attr is\n \n             else\n                Placement_Error;\n-               return;\n             end if;\n \n          --  Otherwise the placement of the attribute is illegal\n \n          else\n             Placement_Error;\n-            return;\n          end if;\n \n          --  Find the related subprogram subject to the aspect or pragma\n@@ -3666,7 +3661,6 @@ package body Sem_Attr is\n \n          else\n             Error_Attr (\"invalid entry name\", N);\n-            return;\n          end if;\n \n          for J in reverse 0 .. Scope_Stack.Last loop\n@@ -3945,7 +3939,6 @@ package body Sem_Attr is\n                else\n                   Error_Attr (\"invalid entry family name\", P);\n                end if;\n-               return;\n \n             else\n                Ent := Entity (Prefix (P));\n@@ -3960,7 +3953,6 @@ package body Sem_Attr is\n \n          else\n             Error_Attr (\"invalid entry name\", N);\n-            return;\n          end if;\n \n          for J in reverse 0 .. Scope_Stack.Last loop\n@@ -4479,7 +4471,6 @@ package body Sem_Attr is\n \n          if not Legal or else No (Spec_Id) then\n             Error_Attr (\"attribute % must apply to entry family\", P);\n-            return;\n          end if;\n \n          --  Legality checks\n@@ -5898,7 +5889,6 @@ package body Sem_Attr is\n \n          elsif not Legal then\n             Error_Attr (\"prefix of % attribute must be a function\", P);\n-            return;\n          end if;\n \n          --  Attribute 'Result is part of a _Postconditions procedure. There is"}, {"sha": "89c45da10bbdd6f98a89e9380eae9f0d768620d3", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684194f4a45e00e56687289386eea7105a762cf7/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684194f4a45e00e56687289386eea7105a762cf7/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=684194f4a45e00e56687289386eea7105a762cf7", "patch": "@@ -4585,7 +4585,6 @@ package body Sem_Prag is\n \n          else\n             Pragma_Misplaced;\n-            return;\n          end if;\n \n          --  If we get here, then the pragma is legal\n@@ -4600,7 +4599,6 @@ package body Sem_Prag is\n            and then Ekind (Scope (Spec_Id)) /= E_Protected_Type\n          then\n             Pragma_Misplaced;\n-            return;\n \n          --  When the related context is an anonymous object created for a\n          --  simple concurrent type, the type must be a task\n@@ -4610,7 +4608,6 @@ package body Sem_Prag is\n            and then Ekind (Etype (Spec_Id)) /= E_Task_Type\n          then\n             Pragma_Misplaced;\n-            return;\n          end if;\n \n          --  A pragma that applies to a Ghost entity becomes Ghost for the\n@@ -4926,7 +4923,6 @@ package body Sem_Prag is\n \n          else\n             Pragma_Misplaced;\n-            return;\n          end if;\n \n          Subp_Id := Defining_Entity (Subp_Decl);\n@@ -4991,7 +4987,6 @@ package body Sem_Prag is\n               N_Task_Body  | N_Task_Body_Stub\n          then\n             Pragma_Misplaced;\n-            return;\n          end if;\n \n          Body_Id := Defining_Entity (Body_Decl);\n@@ -5002,14 +4997,12 @@ package body Sem_Prag is\n \n          if No (Spec_Id) then\n             Error_Pragma (\"pragma % cannot apply to a stand alone body\");\n-            return;\n \n          --  Catch the case where the subprogram body is a subunit and acts as\n          --  the third declaration of the subprogram.\n \n          elsif Nkind (Parent (Body_Decl)) = N_Subunit then\n             Error_Pragma (\"pragma % cannot apply to a subunit\");\n-            return;\n          end if;\n \n          --  A refined pragma can only apply to the body [stub] of a subprogram\n@@ -5034,7 +5027,6 @@ package body Sem_Prag is\n             Error_Pragma\n               (Fix_Msg (Spec_Id, \"pragma % must apply to the body of \"\n                & \"subprogram declared in a package specification\"));\n-            return;\n          end if;\n \n          --  If we get here, then the pragma is legal\n@@ -6376,7 +6368,6 @@ package body Sem_Prag is\n                      Statements (Handled_Statement_Sequence (Stmt))\n                then\n                   Placement_Error (Prev);\n-                  return;\n \n                --  Keep inspecting the parents because we are now within a\n                --  chain of nested blocks.\n@@ -6411,7 +6402,6 @@ package body Sem_Prag is\n \n             else\n                Placement_Error (Prev);\n-               return;\n             end if;\n          end loop;\n \n@@ -7475,7 +7465,6 @@ package body Sem_Prag is\n                Error_Pragma\n                  (\"cannot have Full_Access_Only without Volatile/Atomic \"\n                   & \"(RM C.6(8.2))\");\n-               return;\n             end if;\n \n             --  Check all the subcomponents of the type recursively, if any\n@@ -7983,7 +7972,6 @@ package body Sem_Prag is\n                            Error_Msg_Sloc := Sloc (Decl);\n                            Error_Pragma_Arg\n                              (\"convention differs from that given#\", Arg1);\n-                           return;\n                         end if;\n                      end if;\n                   end if;\n@@ -9988,7 +9976,6 @@ package body Sem_Prag is\n             then\n                Error_Pragma_Arg\n                  (\"argument of% must be entity in current scope\", Assoc);\n-               return;\n             end if;\n \n             --  Processing for procedure, operator or function. If subprogram\n@@ -12461,7 +12448,6 @@ package body Sem_Prag is\n                  N_Generic_Package_Declaration | N_Package_Declaration\n             then\n                Pragma_Misplaced;\n-               return;\n             end if;\n \n             Pack_Id := Defining_Entity (Pack_Decl);\n@@ -13488,7 +13474,6 @@ package body Sem_Prag is\n                             N_Protected_Type_Declaration\n                then\n                   Pragma_Misplaced;\n-                  return;\n                end if;\n             end if;\n \n@@ -14498,7 +14483,6 @@ package body Sem_Prag is\n \n             if Nkind (Obj_Decl) /= N_Object_Declaration then\n                Pragma_Misplaced;\n-               return;\n             end if;\n \n             Obj_Id := Defining_Entity (Obj_Decl);\n@@ -14511,14 +14495,12 @@ package body Sem_Prag is\n                if not Is_Library_Level_Entity (Obj_Id) then\n                   Error_Pragma\n                     (\"pragma % must apply to a library level variable\");\n-                  return;\n                end if;\n \n             --  Otherwise the pragma applies to a constant, which is illegal\n \n             else\n                Error_Pragma (\"pragma % must apply to a variable declaration\");\n-               return;\n             end if;\n \n             --  A pragma that applies to a Ghost entity becomes Ghost for the\n@@ -14641,7 +14623,6 @@ package body Sem_Prag is\n \n             else\n                Pragma_Misplaced;\n-               return;\n             end if;\n \n             Spec_Id := Unique_Defining_Entity (Subp_Decl);\n@@ -15391,7 +15372,6 @@ package body Sem_Prag is\n \n                else\n                   Pragma_Misplaced;\n-                  return;\n                end if;\n \n                Stmt := Prev (Stmt);\n@@ -15402,7 +15382,6 @@ package body Sem_Prag is\n \n             if No (Typ) then\n                Pragma_Misplaced;\n-               return;\n             end if;\n \n             --  A pragma that applies to a Ghost entity becomes Ghost for the\n@@ -16700,7 +16679,6 @@ package body Sem_Prag is\n \n             else\n                Error_Pragma (\"pragma % must apply to a subprogram\");\n-               return;\n             end if;\n \n             --  Mark the pragma as Ghost if the related subprogram is also\n@@ -16979,7 +16957,6 @@ package body Sem_Prag is\n                        N_Single_Task_Declaration | N_Task_Type_Declaration\n                then\n                   Error_Pragma (\"pragma % cannot apply to a task type\");\n-                  return;\n \n                --  Skip internally generated code\n \n@@ -17043,7 +17020,6 @@ package body Sem_Prag is\n                   Error_Pragma\n                     (\"pragma % must apply to an object, package, subprogram \"\n                      & \"or type\");\n-                  return;\n                end if;\n \n                Stmt := Prev (Stmt);\n@@ -17063,11 +17039,9 @@ package body Sem_Prag is\n             if Nkind (Context) in N_Protected_Body | N_Protected_Definition\n             then\n                Error_Pragma (\"pragma % cannot apply to a protected type\");\n-               return;\n \n             elsif Nkind (Context) in N_Task_Body | N_Task_Definition then\n                Error_Pragma (\"pragma % cannot apply to a task type\");\n-               return;\n             end if;\n \n             if No (Id) then\n@@ -17105,7 +17079,6 @@ package body Sem_Prag is\n                Error_Pragma\n                  (\"pragma % must apply to an object, package, subprogram or \"\n                   & \"type\");\n-               return;\n             end if;\n \n             --  Handle completions of types and constants that are subject to\n@@ -17153,11 +17126,9 @@ package body Sem_Prag is\n             elsif Ekind (Id) = E_Variable then\n                if Is_Protected_Type (Etype (Id)) then\n                   Error_Pragma (\"pragma % cannot apply to a protected object\");\n-                  return;\n \n                elsif Is_Task_Type (Etype (Id)) then\n                   Error_Pragma (\"pragma % cannot apply to a task object\");\n-                  return;\n                end if;\n             end if;\n \n@@ -17179,15 +17150,13 @@ package body Sem_Prag is\n                      Error_Pragma\n                        (\"pragma % with value False cannot appear in enabled \"\n                         & \"ghost region\");\n-                     return;\n                   end if;\n \n                --  Otherwise the expression is not static\n \n                else\n                   Error_Pragma_Arg\n                     (\"expression of pragma % must be static\", Expr);\n-                  return;\n                end if;\n             end if;\n \n@@ -17470,7 +17439,6 @@ package body Sem_Prag is\n                   Error_Pragma_Arg\n                     (\"controlling formal must be of synchronized tagged type\",\n                      Arg1);\n-                  return;\n                end if;\n \n                --  Ada 2012 (AI05-0030): Cannot apply the implementation_kind\n@@ -17484,7 +17452,6 @@ package body Sem_Prag is\n                   Error_Pragma_Arg\n                     (\"implementation kind By_Protected_Procedure cannot be \"\n                      & \"applied to a task interface primitive\", Arg2);\n-                  return;\n                end if;\n \n             --  Procedures declared inside a protected type must be accepted\n@@ -17499,7 +17466,6 @@ package body Sem_Prag is\n             else\n                Error_Pragma_Arg\n                  (\"pragma % must be applied to a primitive procedure\", Arg1);\n-               return;\n             end if;\n \n             --  Ada 2012 (AI12-0279): Cannot apply the implementation_kind\n@@ -17511,7 +17477,6 @@ package body Sem_Prag is\n                Error_Pragma_Arg\n                  (\"implementation kind By_Protected_Procedure cannot be \"\n                   & \"applied to entities with aspect 'Yield\", Arg2);\n-               return;\n             end if;\n \n             Record_Rep_Item (Proc_Id, N);\n@@ -17922,7 +17887,6 @@ package body Sem_Prag is\n                  N_Generic_Package_Declaration | N_Package_Declaration\n             then\n                Pragma_Misplaced;\n-               return;\n             end if;\n \n             Pack_Id := Defining_Entity (Pack_Decl);\n@@ -18203,7 +18167,6 @@ package body Sem_Prag is\n                  N_Generic_Package_Declaration | N_Package_Declaration\n             then\n                Pragma_Misplaced;\n-               return;\n             end if;\n \n             Pack_Id := Defining_Entity (Pack_Decl);\n@@ -18539,7 +18502,6 @@ package body Sem_Prag is\n \n             if Nkind (P) not in N_Task_Definition | N_Protected_Definition then\n                Pragma_Misplaced;\n-               return;\n \n             else\n                Ent := Defining_Identifier (Parent (P));\n@@ -18755,15 +18717,13 @@ package body Sem_Prag is\n             elsif Class_Present (N) then\n                Error_Pragma_Arg\n                  (\"pragma % only allowed for private type\", Arg1);\n-               return;\n \n             --  A regular invariant may appear on both views\n \n             else\n                Error_Pragma_Arg\n                  (\"pragma % only allowed for private type or corresponding \"\n                   & \"full view\", Arg1);\n-               return;\n             end if;\n \n             --  An invariant associated with an abstract type (this includes\n@@ -18772,7 +18732,6 @@ package body Sem_Prag is\n             if Is_Abstract_Type (Typ) and then not Class_Present (N) then\n                Error_Pragma_Arg\n                  (\"pragma % not allowed for abstract type\", Arg1);\n-               return;\n             end if;\n \n             --  A pragma that applies to a Ghost entity becomes Ghost for the\n@@ -19685,7 +19644,6 @@ package body Sem_Prag is\n \n                if Nkind (Parent (N)) = N_Task_Definition then\n                   Error_Pragma (\"pragma % cannot apply to task entries\");\n-                  return;\n                end if;\n \n                Entry_Id := Defining_Entity (Entry_Decl);\n@@ -19695,7 +19653,6 @@ package body Sem_Prag is\n             else\n                Error_Pragma\n                  (\"pragma % must apply to a protected entry declaration\");\n-               return;\n             end if;\n \n             --  Mark the pragma as Ghost if the related subprogram is also\n@@ -20999,7 +20956,6 @@ package body Sem_Prag is\n \n             else\n                Pragma_Misplaced;\n-               return;\n             end if;\n \n             --  Extract the entity of the related object declaration or package\n@@ -22612,7 +22568,6 @@ package body Sem_Prag is\n \n             if Nkind (Pack_Decl) /= N_Package_Body then\n                Pragma_Misplaced;\n-               return;\n             end if;\n \n             Spec_Id := Corresponding_Spec (Pack_Decl);\n@@ -23944,7 +23899,6 @@ package body Sem_Prag is\n \n             if Nkind (P) /= N_Task_Definition then\n                Pragma_Misplaced;\n-               return;\n \n             else\n                if Has_Storage_Size_Pragma (P) then\n@@ -24310,7 +24264,6 @@ package body Sem_Prag is\n \n             else\n                Pragma_Misplaced;\n-               return;\n             end if;\n \n             Spec_Id := Unique_Defining_Entity (Subp_Decl);\n@@ -24798,7 +24751,6 @@ package body Sem_Prag is\n             else\n                Error_Pragma\n                  (\"pragma % must be specified within a package declaration\");\n-               return;\n             end if;\n \n             Subp_Decl := Find_Related_Declaration_Or_Body (N);\n@@ -24816,11 +24768,9 @@ package body Sem_Prag is\n             if Nkind (Subp_Decl) = N_Abstract_Subprogram_Declaration then\n                Error_Pragma\n                  (\"pragma % cannot be applied to abstract subprogram\");\n-               return;\n \n             elsif Nkind (Subp_Decl) = N_Entry_Declaration then\n                Error_Pragma (\"pragma % cannot be applied to entry\");\n-               return;\n \n             --  The context is a [generic] subprogram declared at the top level\n             --  of the [generic] package unit.\n@@ -24839,7 +24789,6 @@ package body Sem_Prag is\n                Error_Pragma\n                  (\"pragma % must be applied to a library-level subprogram \"\n                   & \"declaration\");\n-               return;\n             end if;\n \n             Subp_Id := Defining_Entity (Subp_Decl);\n@@ -25530,14 +25479,12 @@ package body Sem_Prag is\n \n             else\n                Pragma_Misplaced;\n-               return;\n             end if;\n \n             Spec_Id := Unique_Defining_Entity (Subp_Decl);\n \n             if Ekind (Spec_Id) not in E_Function | E_Generic_Function then\n                Pragma_Misplaced;\n-               return;\n             end if;\n \n             --  A pragma that applies to a Ghost entity becomes Ghost for the"}]}