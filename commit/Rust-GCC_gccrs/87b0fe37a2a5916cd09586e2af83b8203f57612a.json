{"sha": "87b0fe37a2a5916cd09586e2af83b8203f57612a", "node_id": "C_kwDOANBUbNoAKDg3YjBmZTM3YTJhNTkxNmNkMDk1ODZlMmFmODNiODIwM2Y1NzYxMmE", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-10-04T17:50:28Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-10-04T17:52:52Z"}, "message": "Remove assert from set_nonzero_bits.\n\nThe assert removed by this patch was there to keep users from passing\nmasks of incompatible types.  The self tests are passing host wide\nints down (set_nonzero_bits (-1)), which seem to be 32 bits, whereas\nsome embedded targets have integer_type_node's of 16-bits.  This is\ncausing problems in m32c-elf, among others.\n\nI suppose there's no harm in passing a 32-bit mask, because\nset_nonzero_bits calls wide_int::from() to convert the mask to the\nappropriate type.  So we can remove the assert.\n\ngcc/ChangeLog:\n\n\t* value-range.cc (irange::set_nonzero_bits): Remove assert.", "tree": {"sha": "40f8fb5a6b67c9b25f8f1fba9d600cec32a6b59d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40f8fb5a6b67c9b25f8f1fba9d600cec32a6b59d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87b0fe37a2a5916cd09586e2af83b8203f57612a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87b0fe37a2a5916cd09586e2af83b8203f57612a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87b0fe37a2a5916cd09586e2af83b8203f57612a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87b0fe37a2a5916cd09586e2af83b8203f57612a/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aa18176add650f481b3b9becbefce6d392cc049", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5aa18176add650f481b3b9becbefce6d392cc049", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5aa18176add650f481b3b9becbefce6d392cc049"}], "stats": {"total": 1, "additions": 0, "deletions": 1}, "files": [{"sha": "a307559b654b96542036f337f31c458299180300", "filename": "gcc/value-range.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b0fe37a2a5916cd09586e2af83b8203f57612a/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b0fe37a2a5916cd09586e2af83b8203f57612a/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=87b0fe37a2a5916cd09586e2af83b8203f57612a", "patch": "@@ -2913,7 +2913,6 @@ irange::set_nonzero_bits (const wide_int_ref &bits)\n {\n   gcc_checking_assert (!undefined_p ());\n   unsigned prec = TYPE_PRECISION (type ());\n-  gcc_checking_assert (prec == bits.get_precision ());\n \n   // Drop VARYINGs with a nonzero mask to a plain range.\n   if (m_kind == VR_VARYING && bits != -1)"}]}