{"sha": "a2051b26af54fd2d7e459c1cd6b42e430c3f7a96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIwNTFiMjZhZjU0ZmQyZDdlNDU5YzFjZDZiNDJlNDMwYzNmN2E5Ng==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2012-06-25T20:42:11Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2012-06-25T20:42:11Z"}, "message": "i386: Delete sse sdot_prod; add sdot_prodv4si for xop\n\nNow that we support mult_even/odd hooks, the vectorizer can\ngenerate the exact same code for plain sse dot_prod by itself,\nas well as other reductions other than plus.\n\nFrom-SVN: r188960", "tree": {"sha": "081d90a713e2dde9c776a9fc783f3436f9defd85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/081d90a713e2dde9c776a9fc783f3436f9defd85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2051b26af54fd2d7e459c1cd6b42e430c3f7a96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2051b26af54fd2d7e459c1cd6b42e430c3f7a96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2051b26af54fd2d7e459c1cd6b42e430c3f7a96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2051b26af54fd2d7e459c1cd6b42e430c3f7a96/comments", "author": null, "committer": null, "parents": [{"sha": "93703e7981920e334edf2dc48481a97019e9ae5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93703e7981920e334edf2dc48481a97019e9ae5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93703e7981920e334edf2dc48481a97019e9ae5a"}], "stats": {"total": 68, "additions": 14, "deletions": 54}, "files": [{"sha": "677e813033f3fa096328c6ed3ca95a39ddad9c21", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2051b26af54fd2d7e459c1cd6b42e430c3f7a96/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2051b26af54fd2d7e459c1cd6b42e430c3f7a96/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a2051b26af54fd2d7e459c1cd6b42e430c3f7a96", "patch": "@@ -1,3 +1,9 @@\n+2012-06-25  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/sse.md (sse2_sse4_1): Remove code attr.\n+\t(<s>dot_prodv4si, <s>dot_prodv8si): Remove\n+\t(sdot_prodv4si): New; handle only XOP.\n+\n 2012-06-25  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/i386-builtin-types.def (V4UDI, V8USI): New."}, {"sha": "4b51415d8e86f76bde43eec5264e4c7db792823d", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 8, "deletions": 54, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2051b26af54fd2d7e459c1cd6b42e430c3f7a96/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2051b26af54fd2d7e459c1cd6b42e430c3f7a96/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=a2051b26af54fd2d7e459c1cd6b42e430c3f7a96", "patch": "@@ -5737,64 +5737,18 @@\n   DONE;\n })\n \n-(define_code_attr sse2_sse4_1\n-   [(zero_extend \"sse2\") (sign_extend \"sse4_1\")])\n-\n-(define_expand \"<s>dot_prodv4si\"\n+;; Normally we use widen_mul_even/odd, but combine can't quite get it all\n+;; back together when madd is available.\n+(define_expand \"sdot_prodv4si\"\n   [(match_operand:V2DI 0 \"register_operand\")\n-   (any_extend:V2DI (match_operand:V4SI 1 \"register_operand\"))\n+   (match_operand:V4SI 1 \"register_operand\")\n    (match_operand:V4SI 2 \"register_operand\")\n    (match_operand:V2DI 3 \"register_operand\")]\n-  \"<CODE> == ZERO_EXTEND ? TARGET_SSE2 : TARGET_SSE4_1\"\n-{\n-  rtx t1, t2, t3, t4;\n-\n-  t1 = gen_reg_rtx (V2DImode);\n-  emit_insn (gen_<sse2_sse4_1>_<u>mulv2siv2di3 (t1, operands[1], operands[2]));\n-  emit_insn (gen_addv2di3 (t1, t1, operands[3]));\n-\n-  t2 = gen_reg_rtx (V4SImode);\n-  t3 = gen_reg_rtx (V4SImode);\n-  emit_insn (gen_sse2_lshrv1ti3 (gen_lowpart (V1TImode, t2),\n-\t\t\t\t gen_lowpart (V1TImode, operands[1]),\n-\t\t\t\t GEN_INT (32)));\n-  emit_insn (gen_sse2_lshrv1ti3 (gen_lowpart (V1TImode, t3),\n-\t\t\t\t gen_lowpart (V1TImode, operands[2]),\n-\t\t\t\t GEN_INT (32)));\n-\n-  t4 = gen_reg_rtx (V2DImode);\n-  emit_insn (gen_<sse2_sse4_1>_<u>mulv2siv2di3 (t4, t2, t3));\n-\n-  emit_insn (gen_addv2di3 (operands[0], t1, t4));\n-  DONE;\n-})\n-\n-(define_expand \"<s>dot_prodv8si\"\n-  [(match_operand:V4DI 0 \"register_operand\")\n-   (any_extend:V4DI (match_operand:V8SI 1 \"register_operand\"))\n-   (match_operand:V8SI 2 \"register_operand\")\n-   (match_operand:V4DI 3 \"register_operand\")]\n-  \"TARGET_AVX2\"\n+  \"TARGET_XOP\"\n {\n-  rtx t1, t2, t3, t4;\n-\n-  t1 = gen_reg_rtx (V4DImode);\n-  emit_insn (gen_avx2_<u>mulv4siv4di3 (t1, operands[1], operands[2]));\n-  emit_insn (gen_addv4di3 (t1, t1, operands[3]));\n-\n-  t2 = gen_reg_rtx (V8SImode);\n-  t3 = gen_reg_rtx (V8SImode);\n-  emit_insn (gen_avx2_lshrv2ti3 (gen_lowpart (V2TImode, t2),\n-\t\t\t\t gen_lowpart (V2TImode, operands[1]),\n-\t\t\t\t GEN_INT (32)));\n-  emit_insn (gen_avx2_lshrv2ti3 (gen_lowpart (V2TImode, t3),\n-\t\t\t\t gen_lowpart (V2TImode, operands[2]),\n-\t\t\t\t GEN_INT (32)));\n-\n-  t4 = gen_reg_rtx (V4DImode);\n-  emit_insn (gen_avx2_<u>mulv4siv4di3 (t4, t2, t3));\n-\n-  emit_insn (gen_addv4di3 (operands[0], t1, t4));\n+  rtx t = gen_reg_rtx (V2DImode);\n+  emit_insn (gen_xop_pmacsdqh (t, operands[1], operands[2], operands[3]));\n+  emit_insn (gen_xop_pmacsdql (operands[0], operands[1], operands[2], t));\n   DONE;\n })\n "}]}