{"sha": "274c2cda3e077975c406ae5549813652c4f76289", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc0YzJjZGEzZTA3Nzk3NWM0MDZhZTU1NDk4MTM2NTJjNGY3NjI4OQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-18T12:30:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-18T12:30:55Z"}, "message": "[multiple changes]\n\n2016-04-18  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Check_In_Out_States.Check_Constituent_Usage):\n\tUpdate the comment on usage.  Reimplemented.\n\t(Check_Input_States.Check_Constituent_Usage): Update the comment\n\ton usage. A Proof_In constituent can now refine an Input state\n\tas long as there is at least one Input constituent present.\n\n2016-04-18  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Check_Inline_Pragma): Use the Sloc of the\n\tbody id as the sloc of the entity in the generated subprogram\n\tdeclaration, to avoid spurious conformance errors when style\n\tchecks are enabled.\n\nFrom-SVN: r235137", "tree": {"sha": "df2f1dcc4049139717baaca520a564cabf8e206a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df2f1dcc4049139717baaca520a564cabf8e206a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/274c2cda3e077975c406ae5549813652c4f76289", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/274c2cda3e077975c406ae5549813652c4f76289", "html_url": "https://github.com/Rust-GCC/gccrs/commit/274c2cda3e077975c406ae5549813652c4f76289", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/274c2cda3e077975c406ae5549813652c4f76289/comments", "author": null, "committer": null, "parents": [{"sha": "a6363ed30ea916a6cc1058cffce907c25aadcf8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6363ed30ea916a6cc1058cffce907c25aadcf8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6363ed30ea916a6cc1058cffce907c25aadcf8d"}], "stats": {"total": 122, "additions": 79, "deletions": 43}, "files": [{"sha": "11cbcb083b14bc7437726af86f73498982760304", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/274c2cda3e077975c406ae5549813652c4f76289/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/274c2cda3e077975c406ae5549813652c4f76289/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=274c2cda3e077975c406ae5549813652c4f76289", "patch": "@@ -1,3 +1,18 @@\n+2016-04-18  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Check_In_Out_States.Check_Constituent_Usage):\n+\tUpdate the comment on usage.  Reimplemented.\n+\t(Check_Input_States.Check_Constituent_Usage): Update the comment\n+\ton usage. A Proof_In constituent can now refine an Input state\n+\tas long as there is at least one Input constituent present.\n+\n+2016-04-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Inline_Pragma): Use the Sloc of the\n+\tbody id as the sloc of the entity in the generated subprogram\n+\tdeclaration, to avoid spurious conformance errors when style\n+\tchecks are enabled.\n+\n 2016-04-18  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch4.adb (Analyze_Selected_Component, Has_Dereference):"}, {"sha": "494260f116186337b6f4028f8dbffa9ae79c0dbe", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/274c2cda3e077975c406ae5549813652c4f76289/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/274c2cda3e077975c406ae5549813652c4f76289/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=274c2cda3e077975c406ae5549813652c4f76289", "patch": "@@ -2556,6 +2556,7 @@ package body Sem_Ch6 is\n                     or else (Pragma_Name (N) = Name_Inline\n                       and then\n                         (Front_End_Inlining or else Optimization_Level > 0)))\n+               and then Present (Pragma_Argument_Associations (N))\n             then\n                declare\n                   Pragma_Arg : Node_Id :=\n@@ -2606,11 +2607,14 @@ package body Sem_Ch6 is\n                end if;\n \n             else\n-               --  Create a subprogram declaration, to make treatment uniform\n+               --  Create a subprogram declaration, to make treatment uniform.\n+               --  Make the sloc of the subprogram name that of the entity in\n+               --  the body, so that style checks find identical strings.\n \n                declare\n                   Subp : constant Entity_Id :=\n-                           Make_Defining_Identifier (Loc, Chars (Body_Id));\n+                           Make_Defining_Identifier\n+                             (Sloc (Body_Id), Chars (Body_Id));\n                   Decl : constant Node_Id :=\n                            Make_Subprogram_Declaration (Loc,\n                              Specification =>"}, {"sha": "60d83179e9fcf7186835831b307d3cbd9b499e8d", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 58, "deletions": 41, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/274c2cda3e077975c406ae5549813652c4f76289/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/274c2cda3e077975c406ae5549813652c4f76289/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=274c2cda3e077975c406ae5549813652c4f76289", "patch": "@@ -24246,23 +24246,25 @@ package body Sem_Prag is\n          procedure Check_Constituent_Usage (State_Id : Entity_Id);\n          --  Determine whether one of the following coverage scenarios is in\n          --  effect:\n-         --    1) there is at least one constituent of mode In_Out\n-         --    2) there is at least one Input and one Output constituent\n-         --    3) not all constituents are present and one of them is of mode\n-         --       Output.\n-         --  If this is not the case, emit an error.\n+         --    1) there is at least one constituent of mode In_Out or Output\n+         --    2) there is at least one pair of constituents with modes Input\n+         --       and Output, or Proof_In and Output.\n+         --    3) there is at least one constituent of mode Output and not all\n+         --       constituents are present.\n+         --  If this is not the case, emit an error (SPARK RM 7.2.4(5)).\n \n          -----------------------------\n          -- Check_Constituent_Usage --\n          -----------------------------\n \n          procedure Check_Constituent_Usage (State_Id : Entity_Id) is\n-            Constit_Elmt : Elmt_Id;\n-            Constit_Id   : Entity_Id;\n-            Has_Missing  : Boolean := False;\n-            In_Out_Seen  : Boolean := False;\n-            In_Seen      : Boolean := False;\n-            Out_Seen     : Boolean := False;\n+            Constit_Elmt  : Elmt_Id;\n+            Constit_Id    : Entity_Id;\n+            Has_Missing   : Boolean := False;\n+            In_Out_Seen   : Boolean := False;\n+            Input_Seen    : Boolean := False;\n+            Output_Seen   : Boolean := False;\n+            Proof_In_Seen : Boolean := False;\n \n          begin\n             --  Process all the constituents of the state and note their modes\n@@ -24273,22 +24275,16 @@ package body Sem_Prag is\n                Constit_Id := Node (Constit_Elmt);\n \n                if Present_Then_Remove (In_Constits, Constit_Id) then\n-                  In_Seen := True;\n+                  Input_Seen := True;\n \n                elsif Present_Then_Remove (In_Out_Constits, Constit_Id) then\n                   In_Out_Seen := True;\n \n                elsif Present_Then_Remove (Out_Constits, Constit_Id) then\n-                  Out_Seen := True;\n-\n-               --  A Proof_In constituent cannot participate in the completion\n-               --  of an Output state (SPARK RM 7.2.4(5)).\n+                  Output_Seen := True;\n \n                elsif Present_Then_Remove (Proof_In_Constits, Constit_Id) then\n-                  Error_Msg_Name_1 := Chars (State_Id);\n-                  SPARK_Msg_NE\n-                    (\"constituent & of state % must have mode Input, In_Out \"\n-                     & \"or Output in global refinement\", N, Constit_Id);\n+                  Proof_In_Seen := True;\n \n                else\n                   Has_Missing := True;\n@@ -24297,26 +24293,41 @@ package body Sem_Prag is\n                Next_Elmt (Constit_Elmt);\n             end loop;\n \n-            --  A single In_Out constituent is a valid completion\n+            --  An In_Out constituent is a valid completion\n \n             if In_Out_Seen then\n                null;\n \n-            --  A pair of one Input and one Output constituent is a valid\n-            --  completion.\n+            --  A pair of one Input/Proof_In and one Output constituent is a\n+            --  valid completion.\n \n-            elsif In_Seen and Out_Seen then\n+            elsif (Input_Seen or Proof_In_Seen) and Output_Seen then\n                null;\n \n-            --  A single Output constituent is a valid completion only when\n-            --  some of the other constituents are missing (SPARK RM 7.2.4(5)).\n+            elsif Output_Seen then\n \n-            elsif Out_Seen and Has_Missing then\n-               null;\n+               --  A single Output constituent is a valid completion only when\n+               --  some of the other constituents are missing.\n+\n+               if Has_Missing then\n+                  null;\n+\n+               --  Otherwise all constituents are of mode Output\n+\n+               else\n+                  SPARK_Msg_NE\n+                    (\"global refinement of state & must include at least one \"\n+                     & \"constituent of mode `In_Out`, `Input`, or `Proof_In`\",\n+                     N, State_Id);\n+               end if;\n \n             --  The state lacks a completion\n \n-            elsif not In_Seen and not In_Out_Seen and not Out_Seen then\n+            elsif not Input_Seen\n+              and not In_Out_Seen\n+              and not Output_Seen\n+              and not Proof_In_Seen\n+            then\n                SPARK_Msg_NE\n                  (\"missing global refinement of state &\", N, State_Id);\n \n@@ -24373,8 +24384,8 @@ package body Sem_Prag is\n          procedure Check_Constituent_Usage (State_Id : Entity_Id);\n          --  Determine whether at least one constituent of state State_Id with\n          --  visible refinement is used and has mode Input. Ensure that the\n-         --  remaining constituents do not have In_Out, Output or Proof_In\n-         --  modes.\n+         --  remaining constituents do not have In_Out or Output modes. Emit an\n+         --  error if this is not the case (SPARK RM 7.2.4(5)).\n \n          -----------------------------\n          -- Check_Constituent_Usage --\n@@ -24395,17 +24406,22 @@ package body Sem_Prag is\n                if Present_Then_Remove (In_Constits, Constit_Id) then\n                   In_Seen := True;\n \n+               --  A Proof_In constituent can refine an Input state as long as\n+               --  there is at least one Input constituent present.\n+\n+               elsif Present_Then_Remove (Proof_In_Constits, Constit_Id) then\n+                  null;\n+\n                --  The constituent appears in the global refinement, but has\n-               --  mode In_Out, Output or Proof_In (SPARK RM 7.2.4(5)).\n+               --  mode In_Out or Output (SPARK RM 7.2.4(5)).\n \n                elsif Present_Then_Remove (In_Out_Constits, Constit_Id)\n                  or else Present_Then_Remove (Out_Constits, Constit_Id)\n-                 or else Present_Then_Remove (Proof_In_Constits, Constit_Id)\n                then\n                   Error_Msg_Name_1 := Chars (State_Id);\n                   SPARK_Msg_NE\n-                    (\"constituent & of state % must have mode Input in global \"\n-                     & \"refinement\", N, Constit_Id);\n+                    (\"constituent & of state % must have mode `Input` in \"\n+                     & \"global refinement\", N, Constit_Id);\n                end if;\n \n                Next_Elmt (Constit_Elmt);\n@@ -24416,7 +24432,7 @@ package body Sem_Prag is\n             if not In_Seen then\n                SPARK_Msg_NE\n                  (\"global refinement of state & must include at least one \"\n-                  & \"constituent of mode Input\", N, State_Id);\n+                  & \"constituent of mode `Input`\", N, State_Id);\n             end if;\n          end Check_Constituent_Usage;\n \n@@ -24464,7 +24480,7 @@ package body Sem_Prag is\n          procedure Check_Constituent_Usage (State_Id : Entity_Id);\n          --  Determine whether all constituents of state State_Id with visible\n          --  refinement are used and have mode Output. Emit an error if this is\n-         --  not the case.\n+         --  not the case (SPARK RM 7.2.4(5)).\n \n          -----------------------------\n          -- Check_Constituent_Usage --\n@@ -24492,7 +24508,7 @@ package body Sem_Prag is\n                then\n                   Error_Msg_Name_1 := Chars (State_Id);\n                   SPARK_Msg_NE\n-                    (\"constituent & of state % must have mode Output in \"\n+                    (\"constituent & of state % must have mode `Output` in \"\n                      & \"global refinement\", N, Constit_Id);\n \n                --  The constituent is altogether missing (SPARK RM 7.2.5(3))\n@@ -24501,7 +24517,7 @@ package body Sem_Prag is\n                   if not Posted then\n                      Posted := True;\n                      SPARK_Msg_NE\n-                       (\"output state & must be replaced by all its \"\n+                       (\"`Output` state & must be replaced by all its \"\n                         & \"constituents in global refinement\", N, State_Id);\n                   end if;\n \n@@ -24559,6 +24575,7 @@ package body Sem_Prag is\n          --  Determine whether at least one constituent of state State_Id with\n          --  visible refinement is used and has mode Proof_In. Ensure that the\n          --  remaining constituents do not have Input, In_Out or Output modes.\n+         --  Emit an error of this is not the case (SPARK RM 7.2.4(5)).\n \n          -----------------------------\n          -- Check_Constituent_Usage --\n@@ -24588,7 +24605,7 @@ package body Sem_Prag is\n                then\n                   Error_Msg_Name_1 := Chars (State_Id);\n                   SPARK_Msg_NE\n-                    (\"constituent & of state % must have mode Proof_In in \"\n+                    (\"constituent & of state % must have mode `Proof_In` in \"\n                      & \"global refinement\", N, Constit_Id);\n                end if;\n \n@@ -24600,7 +24617,7 @@ package body Sem_Prag is\n             if not Proof_In_Seen then\n                SPARK_Msg_NE\n                  (\"global refinement of state & must include at least one \"\n-                  & \"constituent of mode Proof_In\", N, State_Id);\n+                  & \"constituent of mode `Proof_In`\", N, State_Id);\n             end if;\n          end Check_Constituent_Usage;\n "}]}