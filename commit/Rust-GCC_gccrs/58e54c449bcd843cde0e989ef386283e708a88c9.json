{"sha": "58e54c449bcd843cde0e989ef386283e708a88c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThlNTRjNDQ5YmNkODQzY2RlMGU5ODllZjM4NjI4M2U3MDhhODhjOQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-30T22:54:10Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-30T22:54:10Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r639", "tree": {"sha": "5b596c0b8d4bc0b86bed14870d0d064bf418b62f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b596c0b8d4bc0b86bed14870d0d064bf418b62f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58e54c449bcd843cde0e989ef386283e708a88c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58e54c449bcd843cde0e989ef386283e708a88c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58e54c449bcd843cde0e989ef386283e708a88c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58e54c449bcd843cde0e989ef386283e708a88c9/comments", "author": null, "committer": null, "parents": [{"sha": "d68c507dffe8657a9703d6396a573047b0b7066b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d68c507dffe8657a9703d6396a573047b0b7066b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d68c507dffe8657a9703d6396a573047b0b7066b"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "7469539553feeab991e377278b372f14c1b58ecc", "filename": "gcc/rtl.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e54c449bcd843cde0e989ef386283e708a88c9/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e54c449bcd843cde0e989ef386283e708a88c9/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=58e54c449bcd843cde0e989ef386283e708a88c9", "patch": "@@ -509,8 +509,8 @@ extern char *note_insn_name[];\n /* Define a macro to look for REG_INC notes,\n    but save time on machines where they never exist.  */\n \n-#if (defined (HAVE_PRE_INCREMENT) || defined (HAVE_PRE_DECREMENT) \\\n-     || defined (HAVE_POST_INCREMENT) || defined (HAVE_POST_DECREMENT))\n+/* Don't continue this line--convex cc version 4.1 would lose.  */\n+#if (defined (HAVE_PRE_INCREMENT) || defined (HAVE_PRE_DECREMENT) || defined (HAVE_POST_INCREMENT) || defined (HAVE_POST_DECREMENT))\n #define FIND_REG_INC_NOTE(insn, reg) (find_reg_note ((insn), REG_INC, (reg)))\n #else\n #define FIND_REG_INC_NOTE(insn, reg) 0\n@@ -519,8 +519,8 @@ extern char *note_insn_name[];\n /* Indicate whether the machine has any sort of auto increment addressing.\n    If not, we can avoid checking for REG_INC notes.  */\n \n-#if (defined (HAVE_PRE_INCREMENT) || defined (HAVE_PRE_DECREMENT) \\\n-     || defined (HAVE_POST_INCREMENT) || defined (HAVE_POST_DECREMENT))\n+/* Don't continue this line--convex cc version 4.1 would lose.  */\n+#if (defined (HAVE_PRE_INCREMENT) || defined (HAVE_PRE_DECREMENT) || defined (HAVE_POST_INCREMENT) || defined (HAVE_POST_DECREMENT))\n #define AUTO_INC_DEC\n #endif\n \f"}]}