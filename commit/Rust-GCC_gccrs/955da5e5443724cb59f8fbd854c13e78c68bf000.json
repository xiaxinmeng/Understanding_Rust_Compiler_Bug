{"sha": "955da5e5443724cb59f8fbd854c13e78c68bf000", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU1ZGE1ZTU0NDM3MjRjYjU5ZjhmYmQ4NTRjMTNlNzhjNjhiZjAwMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-05-23T17:21:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-05-23T17:21:22Z"}, "message": "CWG 616, 1213 - value category of subobject references.\n\n\t* tree.c (lvalue_kind): A reference to a subobject of a prvalue is\n\tan xvalue.\n\t* typeck2.c (build_m_component_ref): Likewise.\n\t* typeck.c (cp_build_addr_expr_1, lvalue_or_else): Remove diagnostic\n\tdistinction between temporary and xvalue.\n\nFrom-SVN: r260621", "tree": {"sha": "5376594ef4febecacfb8c0a3a1831fbdda417c0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5376594ef4febecacfb8c0a3a1831fbdda417c0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/955da5e5443724cb59f8fbd854c13e78c68bf000", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/955da5e5443724cb59f8fbd854c13e78c68bf000", "html_url": "https://github.com/Rust-GCC/gccrs/commit/955da5e5443724cb59f8fbd854c13e78c68bf000", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/955da5e5443724cb59f8fbd854c13e78c68bf000/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a6b29221604547ab14143081b45d955dd7a61a26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6b29221604547ab14143081b45d955dd7a61a26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6b29221604547ab14143081b45d955dd7a61a26"}], "stats": {"total": 84, "additions": 47, "deletions": 37}, "files": [{"sha": "3adb570a0cbeb4c4181ad00702d5023b88b99ddf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955da5e5443724cb59f8fbd854c13e78c68bf000/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955da5e5443724cb59f8fbd854c13e78c68bf000/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=955da5e5443724cb59f8fbd854c13e78c68bf000", "patch": "@@ -1,3 +1,12 @@\n+2018-05-23  Jason Merrill  <jason@redhat.com>\n+\n+\tCWG 616, 1213 - value category of subobject references.\n+\t* tree.c (lvalue_kind): A reference to a subobject of a prvalue is\n+\tan xvalue.\n+\t* typeck2.c (build_m_component_ref): Likewise.\n+\t* typeck.c (cp_build_addr_expr_1, lvalue_or_else): Remove diagnostic\n+\tdistinction between temporary and xvalue.\n+\n 2018-05-23  Marek Polacek  <polacek@redhat.com>\n \n \tImplement P0614R1, Range-based for statements with initializer."}, {"sha": "efb8c2bf926f9a0ebdb4dd321a5ff823fba8abd1", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955da5e5443724cb59f8fbd854c13e78c68bf000/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955da5e5443724cb59f8fbd854c13e78c68bf000/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=955da5e5443724cb59f8fbd854c13e78c68bf000", "patch": "@@ -87,14 +87,22 @@ lvalue_kind (const_tree ref)\n     {\n     case SAVE_EXPR:\n       return clk_none;\n+\n       /* preincrements and predecrements are valid lvals, provided\n \t what they refer to are valid lvals.  */\n     case PREINCREMENT_EXPR:\n     case PREDECREMENT_EXPR:\n     case TRY_CATCH_EXPR:\n     case REALPART_EXPR:\n     case IMAGPART_EXPR:\n-      return lvalue_kind (TREE_OPERAND (ref, 0));\n+    case ARRAY_REF:\n+    case VIEW_CONVERT_EXPR:\n+      op1_lvalue_kind = lvalue_kind (TREE_OPERAND (ref, 0));\n+      if (op1_lvalue_kind == clk_class)\n+\t/* in the case of an array operand, the result is an lvalue if that\n+\t   operand is an lvalue and an xvalue otherwise */\n+\top1_lvalue_kind = clk_rvalueref;\n+      return op1_lvalue_kind;\n \n     case MEMBER_REF:\n     case DOTSTAR_EXPR:\n@@ -104,6 +112,11 @@ lvalue_kind (const_tree ref)\n \top1_lvalue_kind = lvalue_kind (TREE_OPERAND (ref, 0));\n       if (TYPE_PTRMEMFUNC_P (TREE_TYPE (TREE_OPERAND (ref, 1))))\n \top1_lvalue_kind = clk_none;\n+      else if (op1_lvalue_kind == clk_class)\n+\t/* The result of a .* expression whose second operand is a pointer to a\n+\t   data member is an lvalue if the first operand is an lvalue and an\n+\t   xvalue otherwise.  */\n+\top1_lvalue_kind = clk_rvalueref;\n       return op1_lvalue_kind;\n \n     case COMPONENT_REF:\n@@ -119,6 +132,11 @@ lvalue_kind (const_tree ref)\n \t    return lvalue_kind (TREE_OPERAND (ref, 1));\n \t}\n       op1_lvalue_kind = lvalue_kind (TREE_OPERAND (ref, 0));\n+      if (op1_lvalue_kind == clk_class)\n+\t/* If E1 is an lvalue, then E1.E2 is an lvalue;\n+\t   otherwise E1.E2 is an xvalue.  */\n+\top1_lvalue_kind = clk_rvalueref;\n+\n       /* Look at the member designator.  */\n       if (!op1_lvalue_kind)\n \t;\n@@ -165,7 +183,6 @@ lvalue_kind (const_tree ref)\n       /* FALLTHRU */\n     case INDIRECT_REF:\n     case ARROW_EXPR:\n-    case ARRAY_REF:\n     case PARM_DECL:\n     case RESULT_DECL:\n     case PLACEHOLDER_EXPR:\n@@ -203,11 +220,7 @@ lvalue_kind (const_tree ref)\n \t     type-dependent expr, that is, but we shouldn't be testing\n \t     lvalueness if we can't even tell the types yet!  */\n \t  gcc_assert (!type_dependent_expression_p (CONST_CAST_TREE (ref)));\n-\t  if (CLASS_TYPE_P (TREE_TYPE (ref))\n-\t      || TREE_CODE (TREE_TYPE (ref)) == ARRAY_TYPE)\n-\t    return clk_class;\n-\t  else\n-\t    return clk_none;\n+\t  goto default_;\n \t}\n       op1_lvalue_kind = lvalue_kind (TREE_OPERAND (ref, 1)\n \t\t\t\t    ? TREE_OPERAND (ref, 1)\n@@ -257,18 +270,14 @@ lvalue_kind (const_tree ref)\n     case PAREN_EXPR:\n       return lvalue_kind (TREE_OPERAND (ref, 0));\n \n-    case VIEW_CONVERT_EXPR:\n-      if (location_wrapper_p (ref))\n-\treturn lvalue_kind (TREE_OPERAND (ref, 0));\n-      /* Fallthrough.  */\n-\n     default:\n+    default_:\n       if (!TREE_TYPE (ref))\n \treturn clk_none;\n       if (CLASS_TYPE_P (TREE_TYPE (ref))\n \t  || TREE_CODE (TREE_TYPE (ref)) == ARRAY_TYPE)\n \treturn clk_class;\n-      break;\n+      return clk_none;\n     }\n \n   /* If one operand is not an lvalue at all, then this expression is"}, {"sha": "82089c451056d6097fd5ee749c33d7f11ae1f634", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955da5e5443724cb59f8fbd854c13e78c68bf000/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955da5e5443724cb59f8fbd854c13e78c68bf000/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=955da5e5443724cb59f8fbd854c13e78c68bf000", "patch": "@@ -5860,11 +5860,8 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n \t{\n \t  if (!(complain & tf_error))\n \t    return error_mark_node;\n-\t  if (kind & clk_class)\n-\t    /* Make this a permerror because we used to accept it.  */\n-\t    permerror (input_location, \"taking address of temporary\");\n-\t  else\n-\t    error (\"taking address of xvalue (rvalue reference)\");\n+\t  /* Make this a permerror because we used to accept it.  */\n+\t  permerror (input_location, \"taking address of rvalue\");\n \t}\n     }\n \n@@ -9866,11 +9863,8 @@ lvalue_or_else (tree ref, enum lvalue_use use, tsubst_flags_t complain)\n     {\n       if (!(complain & tf_error))\n \treturn 0;\n-      if (kind & clk_class)\n-\t/* Make this a permerror because we used to accept it.  */\n-\tpermerror (input_location, \"using temporary as lvalue\");\n-      else\n-\terror (\"using xvalue (rvalue reference) as lvalue\");\n+      /* Make this a permerror because we used to accept it.  */\n+      permerror (input_location, \"using rvalue as lvalue\");\n     }\n   return 1;\n }"}, {"sha": "40233e68716736f1a72261955d39b692cb5734c7", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955da5e5443724cb59f8fbd854c13e78c68bf000/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955da5e5443724cb59f8fbd854c13e78c68bf000/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=955da5e5443724cb59f8fbd854c13e78c68bf000", "patch": "@@ -1965,7 +1965,7 @@ build_m_component_ref (tree datum, tree component, tsubst_flags_t complain)\n \n   if (TYPE_PTRDATAMEM_P (ptrmem_type))\n     {\n-      cp_lvalue_kind kind = lvalue_kind (datum);\n+      bool is_lval = real_lvalue_p (datum);\n       tree ptype;\n \n       /* Compute the type of the field, as described in [expr.ref].\n@@ -1995,9 +1995,7 @@ build_m_component_ref (tree datum, tree component, tsubst_flags_t complain)\n \treturn error_mark_node;\n \n       /* If the object expression was an rvalue, return an rvalue.  */\n-      if (kind & clk_class)\n-\tdatum = rvalue (datum);\n-      else if (kind & clk_rvalueref)\n+      if (!is_lval)\n \tdatum = move (datum);\n       return datum;\n     }"}, {"sha": "a38dce003a745d0758536ce145df48982b8aae7f", "filename": "gcc/testsuite/g++.dg/cpp0x/addressof2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955da5e5443724cb59f8fbd854c13e78c68bf000/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Faddressof2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955da5e5443724cb59f8fbd854c13e78c68bf000/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Faddressof2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Faddressof2.C?ref=955da5e5443724cb59f8fbd854c13e78c68bf000", "patch": "@@ -17,7 +17,7 @@ auto c = __builtin_addressof (s);\n auto d = addressof (s);\n auto e = __builtin_addressof (s.s);\t\t// { dg-error \"attempt to take address of bit-field\" }\n auto f = addressof (s.s);\t\t\t// { dg-error \"cannot bind bitfield\" }\n-auto g = __builtin_addressof (S{});\t\t// { dg-error \"taking address of temporary\" }\n+auto g = __builtin_addressof (S{});\t\t// { dg-error \"taking address of rvalue\" }\n auto h = addressof (S{});\t\t\t// { dg-error \"cannot bind non-const lvalue reference of type\" }\n auto i = __builtin_addressof (S::t);\t\t// { dg-error \"invalid use of non-static data member\" }\n auto j = __builtin_addressof (S::foo);\t\t// { dg-error \"invalid use of non-static member function\" }"}, {"sha": "d0a37823d4b2dd8aa90ccf222cc56491fa2d697a", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype49.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955da5e5443724cb59f8fbd854c13e78c68bf000/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype49.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955da5e5443724cb59f8fbd854c13e78c68bf000/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype49.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype49.C?ref=955da5e5443724cb59f8fbd854c13e78c68bf000", "patch": "@@ -7,4 +7,4 @@ int A::*ipm = &A::i;\n template <class T, class U> class assert_same_type;\n template <class T> class assert_same_type<T,T> { };\n \n-assert_same_type<decltype(A().*ipm),int> x2;\n+assert_same_type<decltype(A().*ipm),int&&> x2;"}, {"sha": "10a655dc1e59dcc1467f3490f4a24bbaad6ad8ad", "filename": "gcc/testsuite/g++.dg/cpp0x/rv-lvalue-req.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955da5e5443724cb59f8fbd854c13e78c68bf000/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-lvalue-req.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955da5e5443724cb59f8fbd854c13e78c68bf000/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-lvalue-req.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-lvalue-req.C?ref=955da5e5443724cb59f8fbd854c13e78c68bf000", "patch": "@@ -4,9 +4,9 @@ template <class T> T&& declval();\n \n int main()\n {\n-  &declval<int>();\t\t        // { dg-error \"xvalue\" }\n-  declval<int>() = declval<int>();\t// { dg-error \"xvalue\" }\n-  declval<int>()++;\t\t\t// { dg-error \"xvalue\" }\n-  --declval<int>();\t\t\t// { dg-error \"xvalue\" }\n-  declval<int>() += 1;\t\t\t// { dg-error \"xvalue\" }\n+  &declval<int>();\t\t        // { dg-error \"rvalue\" }\n+  declval<int>() = declval<int>();\t// { dg-error \"rvalue\" }\n+  declval<int>()++;\t\t\t// { dg-error \"rvalue\" }\n+  --declval<int>();\t\t\t// { dg-error \"rvalue\" }\n+  declval<int>() += 1;\t\t\t// { dg-error \"rvalue\" }\n }"}, {"sha": "bd5be2dbbf54605afa05b3cdee9d5fe3b7d4c55e", "filename": "gcc/testsuite/g++.dg/ext/c99struct1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955da5e5443724cb59f8fbd854c13e78c68bf000/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fc99struct1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955da5e5443724cb59f8fbd854c13e78c68bf000/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fc99struct1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fc99struct1.C?ref=955da5e5443724cb59f8fbd854c13e78c68bf000", "patch": "@@ -6,7 +6,7 @@ struct s { int a[1]; };\n void\n foo5 (void)\n {\n-\t  ((struct s) { { 0 } }).a[0] = 1;\n+  int i = ((struct s) { { 0 } }).a[0];\n }\n \n "}, {"sha": "07418aba985f9d916acaba6175bcddbdd06349f0", "filename": "gcc/testsuite/g++.dg/ext/complit11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955da5e5443724cb59f8fbd854c13e78c68bf000/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955da5e5443724cb59f8fbd854c13e78c68bf000/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit11.C?ref=955da5e5443724cb59f8fbd854c13e78c68bf000", "patch": "@@ -6,7 +6,7 @@ struct A { int i; };\n template<int t>\n void foo()\n {\n-    ((struct A) { 0 }).i += 1;\t// { dg-error \"temporary\" }\n+    ((struct A) { 0 }).i += 1;\t// { dg-error \"lvalue\" }\n }\n \n void g(void)"}, {"sha": "d1ac15d6e90f201788e147c23b5e604508de0508", "filename": "gcc/testsuite/g++.old-deja/g++.law/temps1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955da5e5443724cb59f8fbd854c13e78c68bf000/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ftemps1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955da5e5443724cb59f8fbd854c13e78c68bf000/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ftemps1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ftemps1.C?ref=955da5e5443724cb59f8fbd854c13e78c68bf000", "patch": "@@ -17,4 +17,4 @@ struct cookie\n };\n \n cookie cat(&foo(\"apabepa\"));// { dg-warning \"deprecated conversion|forbids converting a string constant\" \"dep\" }\n-// { dg-warning \"taking address of temporary\" \"add\" { target *-*-* } .-1 }\n+// { dg-warning \"taking address of rvalue\" \"add\" { target *-*-* } .-1 }"}]}