{"sha": "8340e4fcb8e413588ed7a7db2c1cca9517ea154b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM0MGU0ZmNiOGU0MTM1ODhlZDdhN2RiMmMxY2NhOTUxN2VhMTU0Yg==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2016-05-19T09:03:36Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2016-05-19T09:03:36Z"}, "message": "re PR tree-optimization/69848 (poor vectorization of a loop from SPEC2006 464.h264ref)\n\n\tPR tree-optimization/69848\n\t* tree-vect-loop.c (vectorizable_reduction): Don't factor\n\tcomparison expr out of VEC_COND_EXPR for COND_REDUCTION.\n\nFrom-SVN: r236447", "tree": {"sha": "ed0749d933bf5830fe927bf80ef9f5d93cf0c72c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed0749d933bf5830fe927bf80ef9f5d93cf0c72c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8340e4fcb8e413588ed7a7db2c1cca9517ea154b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8340e4fcb8e413588ed7a7db2c1cca9517ea154b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8340e4fcb8e413588ed7a7db2c1cca9517ea154b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8340e4fcb8e413588ed7a7db2c1cca9517ea154b/comments", "author": null, "committer": null, "parents": [{"sha": "e1fe3c698f5400139a4a5bec73c4600da8858356", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1fe3c698f5400139a4a5bec73c4600da8858356", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1fe3c698f5400139a4a5bec73c4600da8858356"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "b39357a002ca07ba5c065af9fa79287589e6d340", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8340e4fcb8e413588ed7a7db2c1cca9517ea154b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8340e4fcb8e413588ed7a7db2c1cca9517ea154b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8340e4fcb8e413588ed7a7db2c1cca9517ea154b", "patch": "@@ -1,3 +1,9 @@\n+2016-05-19 Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/69848\n+\t* tree-vect-loop.c (vectorizable_reduction): Don't factor\n+\tcomparison expr out of VEC_COND_EXPR for COND_REDUCTION.\n+\n 2016-05-19  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* function.c (thread_prologue_and_epilogue_insn): Move the"}, {"sha": "67053af324640d0ecde7f90d7aaf22983cf33436", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8340e4fcb8e413588ed7a7db2c1cca9517ea154b/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8340e4fcb8e413588ed7a7db2c1cca9517ea154b/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=8340e4fcb8e413588ed7a7db2c1cca9517ea154b", "patch": "@@ -6159,21 +6159,14 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n \t     Finally, we update the phi (NEW_PHI_TREE) to take the value of\n \t     the new cond_expr (INDEX_COND_EXPR).  */\n \n-\t  /* Turn the condition from vec_stmt into an ssa name.  */\n-\t  gimple_stmt_iterator vec_stmt_gsi = gsi_for_stmt (*vec_stmt);\n-\t  tree ccompare = gimple_assign_rhs1 (*vec_stmt);\n-\t  tree ccompare_name = make_ssa_name (TREE_TYPE (ccompare));\n-\t  gimple *ccompare_stmt = gimple_build_assign (ccompare_name,\n-\t\t\t\t\t\t       ccompare);\n-\t  gsi_insert_before (&vec_stmt_gsi, ccompare_stmt, GSI_SAME_STMT);\n-\t  gimple_assign_set_rhs1 (*vec_stmt, ccompare_name);\n-\t  update_stmt (*vec_stmt);\n+\t  /* Duplicate the condition from vec_stmt.  */\n+\t  tree ccompare = unshare_expr (gimple_assign_rhs1 (*vec_stmt));\n \n \t  /* Create a conditional, where the condition is taken from vec_stmt\n-\t     (CCOMPARE_NAME), then is the induction index (INDEX_BEFORE_INCR)\n-\t     and else is the phi (NEW_PHI_TREE).  */\n+\t     (CCOMPARE), then is the induction index (INDEX_BEFORE_INCR) and\n+\t     else is the phi (NEW_PHI_TREE).  */\n \t  tree index_cond_expr = build3 (VEC_COND_EXPR, cr_index_vector_type,\n-\t\t\t\t\t ccompare_name, indx_before_incr,\n+\t\t\t\t\t ccompare, indx_before_incr,\n \t\t\t\t\t new_phi_tree);\n \t  cond_name = make_ssa_name (cr_index_vector_type);\n \t  gimple *index_condition = gimple_build_assign (cond_name,"}]}