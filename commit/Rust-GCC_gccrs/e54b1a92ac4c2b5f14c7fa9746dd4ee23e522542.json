{"sha": "e54b1a92ac4c2b5f14c7fa9746dd4ee23e522542", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU0YjFhOTJhYzRjMmI1ZjE0YzdmYTk3NDZkZDRlZTIzZTUyMjU0Mg==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2019-05-28T17:27:51Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2019-05-28T17:27:51Z"}, "message": "Remove pre-Solaris 11/SPARC unwinding support\n\n\t* config/sparc/sol2-unwind.h [__arch64__] (sparc64_is_sighandler):\n\tRemove Solaris 9 and 10 support.\n\t(sparc_is_sighandler): Likewise.\n\nFrom-SVN: r271715", "tree": {"sha": "3944c13f25f61c272b45a9c7091e0d19d6a87434", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3944c13f25f61c272b45a9c7091e0d19d6a87434"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e54b1a92ac4c2b5f14c7fa9746dd4ee23e522542", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e54b1a92ac4c2b5f14c7fa9746dd4ee23e522542", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e54b1a92ac4c2b5f14c7fa9746dd4ee23e522542", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e54b1a92ac4c2b5f14c7fa9746dd4ee23e522542/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a01d3b0481fe250079e730eb20cd534d6f52ff73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a01d3b0481fe250079e730eb20cd534d6f52ff73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a01d3b0481fe250079e730eb20cd534d6f52ff73"}], "stats": {"total": 98, "additions": 8, "deletions": 90}, "files": [{"sha": "316c203565edf4b7e213b8d4f0b73f9f9e30f8ad", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e54b1a92ac4c2b5f14c7fa9746dd4ee23e522542/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e54b1a92ac4c2b5f14c7fa9746dd4ee23e522542/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=e54b1a92ac4c2b5f14c7fa9746dd4ee23e522542", "patch": "@@ -1,3 +1,9 @@\n+2019-05-28  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config/sparc/sol2-unwind.h [__arch64__] (sparc64_is_sighandler):\n+\tRemove Solaris 9 and 10 support.\n+\t(sparc_is_sighandler): Likewise.\n+\n 2019-05-26  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* config/pa/linux-unwind.h (pa32_fallback_frame_state): Add cast."}, {"sha": "f32cc551b88f636d84d5dff290af9f8c2d0eac74", "filename": "libgcc/config/sparc/sol2-unwind.h", "status": "modified", "additions": 2, "deletions": 90, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e54b1a92ac4c2b5f14c7fa9746dd4ee23e522542/libgcc%2Fconfig%2Fsparc%2Fsol2-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e54b1a92ac4c2b5f14c7fa9746dd4ee23e522542/libgcc%2Fconfig%2Fsparc%2Fsol2-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsparc%2Fsol2-unwind.h?ref=e54b1a92ac4c2b5f14c7fa9746dd4ee23e522542", "patch": "@@ -67,51 +67,7 @@ sparc64_is_sighandler (unsigned int *pc, void *cfa, int *nframes)\n \t   libc.so.1:\n \n \t   <call_user_handler+864>:     mov  %i1, %o1\n-\t   <call_user_handler+868>:     call __sighndlr\n-\n-\t   This is the same setup as for Solaris 10, see below.  */\n-\t*nframes = 3;\n-\n-      else if (cuh_pattern == 0xd25fa7ef)\n-\t{\n-\t  /* This matches the call_user_handler pattern in Solaris 10\n-\t     libc.so.1:\n-\n-\t     <call_user_handler+988>:     ldx  [ %fp + 0x7ef ], %o1\n-\t     <call_user_handler+992>:     call __sighndlr\n-\n-\t     There are 2 cases so we look for the return address of the\n-\t     caller's caller frame in order to do more pattern matching.  */\n-\t  unsigned long sah_address = *(unsigned long *)(cfa + 176 + 15*8);\n-\n-          if (sah_address && *(unsigned int *)(sah_address - 4) == 0x92100019)\n-\t    /* We need to move up three frames:\n-\n-\t\t<signal handler>\t<-- context->cfa\n-\t\t__sighndlr\n-\t\tcall_user_handler\n-\t\tsigacthandler\n-\t\t<kernel>  */\n-\t    *nframes = 3;\n-\t  else\n-\t    /* The sigacthandler frame isn't present in the chain.\n-\t       We need to move up two frames:\n-\n-\t\t<signal handler>\t<-- context->cfa\n-\t\t__sighndlr\n-\t\tcall_user_handler\n-\t\t<kernel>  */\n-\t    *nframes = 2;\n-\t}\n-\n-      else if (cuh_pattern == 0x9410001a || cuh_pattern == 0x9410001b)\n-\t/* This matches the call_user_handler pattern in Solaris 9\n-\t   libthread.so.1:\n-\n-\t   <call_user_handler+600>:     mov  %i2, %o2\n-\t   <call_user_handler+604>:     call  __sighndlr\n-\n-\t   This is the same setup as for Solaris 10, see above.  */\n+\t   <call_user_handler+868>:     call __sighndlr  */\n \t*nframes = 3;\n \n       return 1;\n@@ -184,51 +140,7 @@ sparc_is_sighandler (unsigned int *pc, void *cfa, int *nframes)\n \t   libc.so.1:\n \n \t   <call_user_handler+876>:     mov  %i1, %o1\n-\t   <call_user_handler+880>:     call __sighndlr\n-\n-\t   This is the same setup as for Solaris 10, see below.  */\n-\t*nframes = 3;\n-\n-      else if (cuh_pattern == 0xd407a04c)\n-\t{\n-\t  /* This matches the call_user_handler pattern in Solaris 10\n-\t     libc.so.1:\n-\n-\t     <call_user_handler+948>:     ld  [ %fp + 0x4c ], %o2\n-\t     <call_user_handler+952>:     call __sighndlr\n-\n-\t     There are 2 cases so we look for the return address of the\n-\t     caller's caller frame in order to do more pattern matching.  */\n-\t  unsigned int sah_address = *(unsigned int *)(cfa + 96 + 15*4);\n-\n-          if (sah_address && *(unsigned int *)(sah_address - 4) == 0x92100019)\n-\t    /* We need to move up three frames:\n-\n-\t\t<signal handler>\t<-- context->cfa\n-\t\t__sighndlr\n-\t\tcall_user_handler\n-\t\tsigacthandler\n-\t\t<kernel>  */\n-\t    *nframes = 3;\n-\t  else\n-\t    /* The sigacthandler frame isn't present in the chain.\n-\t       We need to move up two frames:\n-\n-\t\t<signal handler>\t<-- context->cfa\n-\t\t__sighndlr\n-\t\tcall_user_handler\n-\t\t<kernel>  */\n-\t    *nframes = 2;\n-\t}\n-\n-      else if (cuh_pattern == 0x9410001a || cuh_pattern == 0x9410001b)\n-\t/* This matches the call_user_handler pattern in Solaris 9\n-\t   libthread.so.1:\n-\n-\t   <call_user_handler+560>:      mov  %i2, %o2\n-\t   <call_user_handler+564>:      call  __sighndlr\n-\n-\t   This is the same setup as for Solaris 10, see above.  */\n+\t   <call_user_handler+880>:     call __sighndlr  */\n \t*nframes = 3;\n \n       return 1;"}]}