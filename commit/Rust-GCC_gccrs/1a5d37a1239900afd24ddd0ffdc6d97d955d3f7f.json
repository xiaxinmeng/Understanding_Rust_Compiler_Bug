{"sha": "1a5d37a1239900afd24ddd0ffdc6d97d955d3f7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE1ZDM3YTEyMzk5MDBhZmQyNGRkZDBmZmRjNmQ5N2Q5NTVkM2Y3Zg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2004-08-03T09:38:08Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2004-08-03T09:38:08Z"}, "message": "gcc.c (add_prefix, [...]): Remove penultimate parameter.\n\n2004-08-03  Paolo Bonzini <bonzini@gnu.org>\n\n\t* gcc.c (add_prefix, add_sysrooted_prefix): Remove\n\tpenultimate parameter.  All callers adjusted.\n\t(struct prefix_list): Remove used_flag_ptr.\n\t(find_a_file): Do not set *pl->used_flag_ptr.\n\t(warn_B, warn_std_ptr): Remove.\n\nFrom-SVN: r85469", "tree": {"sha": "5a219a2e3610aed4eb581c58935f0184d5229035", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a219a2e3610aed4eb581c58935f0184d5229035"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a5d37a1239900afd24ddd0ffdc6d97d955d3f7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a5d37a1239900afd24ddd0ffdc6d97d955d3f7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a5d37a1239900afd24ddd0ffdc6d97d955d3f7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a5d37a1239900afd24ddd0ffdc6d97d955d3f7f/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d32ab9922e219c772fdf61e0fe638f2ab4e48dfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d32ab9922e219c772fdf61e0fe638f2ab4e48dfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d32ab9922e219c772fdf61e0fe638f2ab4e48dfe"}], "stats": {"total": 132, "additions": 51, "deletions": 81}, "files": [{"sha": "67ecf0b7b717c92dfc30e09caee3971fb2eefe06", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5d37a1239900afd24ddd0ffdc6d97d955d3f7f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5d37a1239900afd24ddd0ffdc6d97d955d3f7f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a5d37a1239900afd24ddd0ffdc6d97d955d3f7f", "patch": "@@ -1,3 +1,11 @@\n+2004-08-03  Paolo Bonzini <bonzini@gnu.org>\n+\n+\t* gcc.c (add_prefix, add_sysrooted_prefix): Remove\n+\tpenultimate parameter.  All callers adjusted.\n+\t(struct prefix_list): Remove used_flag_ptr.\n+\t(find_a_file): Do not set *pl->used_flag_ptr.\n+\t(warn_B, warn_std_ptr): Remove.\n+\n 2004-08-03  Yossi Markovich <yossim@il.ibm.com>\n             Mostafa Hagog <mustafa@il.ibm.com>\n "}, {"sha": "78974ab4e6a8b48315d215ed33ae022bb78c7e93", "filename": "gcc/gcc.c", "status": "modified", "additions": 43, "deletions": 81, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5d37a1239900afd24ddd0ffdc6d97d955d3f7f/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5d37a1239900afd24ddd0ffdc6d97d955d3f7f/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=1a5d37a1239900afd24ddd0ffdc6d97d955d3f7f", "patch": "@@ -303,9 +303,9 @@ static void putenv_from_prefixes (struct path_prefix *, const char *);\n static int access_check (const char *, int);\n static char *find_a_file (struct path_prefix *, const char *, int, int);\n static void add_prefix (struct path_prefix *, const char *, const char *,\n-\t\t\tint, int, int *, int);\n+\t\t\tint, int, int);\n static void add_sysrooted_prefix (struct path_prefix *, const char *,\n-\t\t\t\t  const char *, int, int, int *, int);\n+\t\t\t\t  const char *, int, int, int);\n static void translate_options (int *, const char *const **);\n static char *skip_whitespace (char *);\n static void delete_if_ordinary (const char *);\n@@ -1384,7 +1384,6 @@ struct prefix_list\n   struct prefix_list *next;   /* Next in linked list.  */\n   int require_machine_suffix; /* Don't use without machine_suffix.  */\n   /* 2 means try both machine_suffix and just_machine_suffix.  */\n-  int *used_flag_ptr;\t      /* 1 if a file was found with this prefix.  */\n   int priority;\t\t      /* Sort key - priority within list.  */\n   int os_multilib;\t      /* 1 if OS multilib scheme should be used,\n \t\t\t\t 0 for GCC multilib scheme.  */\n@@ -2502,23 +2501,15 @@ find_a_file (struct path_prefix *pprefix, const char *name, int mode,\n \t\tstrcat (temp, multilib_name);\n \t\tstrcat (temp, file_suffix);\n \t\tif (access_check (temp, mode) == 0)\n-\t\t  {\n-\t\t    if (pl->used_flag_ptr != 0)\n-\t\t      *pl->used_flag_ptr = 1;\n-\t\t    return temp;\n-\t\t  }\n+\t\t  return temp;\n \t      }\n \n \t    /* Now try just the multilib_name.  */\n \t    strcpy (temp, pl->prefix);\n \t    strcat (temp, machine_suffix);\n \t    strcat (temp, multilib_name);\n \t    if (access_check (temp, mode) == 0)\n-\t      {\n-\t\tif (pl->used_flag_ptr != 0)\n-\t\t  *pl->used_flag_ptr = 1;\n-\t\treturn temp;\n-\t      }\n+\t      return temp;\n \t  }\n \n \t/* Certain prefixes are tried with just the machine type,\n@@ -2534,22 +2525,14 @@ find_a_file (struct path_prefix *pprefix, const char *name, int mode,\n \t\tstrcat (temp, multilib_name);\n \t\tstrcat (temp, file_suffix);\n \t\tif (access_check (temp, mode) == 0)\n-\t\t  {\n-\t\t    if (pl->used_flag_ptr != 0)\n-\t\t      *pl->used_flag_ptr = 1;\n-\t\t    return temp;\n-\t\t  }\n+\t\t  return temp;\n \t      }\n \n \t    strcpy (temp, pl->prefix);\n \t    strcat (temp, just_machine_suffix);\n \t    strcat (temp, multilib_name);\n \t    if (access_check (temp, mode) == 0)\n-\t      {\n-\t\tif (pl->used_flag_ptr != 0)\n-\t\t  *pl->used_flag_ptr = 1;\n-\t\treturn temp;\n-\t      }\n+\t      return temp;\n \t  }\n \n \t/* Certain prefixes can't be used without the machine suffix\n@@ -2564,21 +2547,13 @@ find_a_file (struct path_prefix *pprefix, const char *name, int mode,\n \t\tstrcat (temp, this_name);\n \t\tstrcat (temp, file_suffix);\n \t\tif (access_check (temp, mode) == 0)\n-\t\t  {\n-\t\t    if (pl->used_flag_ptr != 0)\n-\t\t      *pl->used_flag_ptr = 1;\n-\t\t    return temp;\n-\t\t  }\n+\t\t  return temp;\n \t      }\n \n \t    strcpy (temp, pl->prefix);\n \t    strcat (temp, this_name);\n \t    if (access_check (temp, mode) == 0)\n-\t      {\n-\t\tif (pl->used_flag_ptr != 0)\n-\t\t  *pl->used_flag_ptr = 1;\n-\t\treturn temp;\n-\t      }\n+\t      return temp;\n \t  }\n       }\n \n@@ -2612,7 +2587,7 @@ enum path_prefix_priority\n static void\n add_prefix (struct path_prefix *pprefix, const char *prefix,\n \t    const char *component, /* enum prefix_priority */ int priority,\n-\t    int require_machine_suffix, int *warn, int os_multilib)\n+\t    int require_machine_suffix, int os_multilib)\n {\n   struct prefix_list *pl, **prev;\n   int len;\n@@ -2632,11 +2607,8 @@ add_prefix (struct path_prefix *pprefix, const char *prefix,\n   pl = xmalloc (sizeof (struct prefix_list));\n   pl->prefix = prefix;\n   pl->require_machine_suffix = require_machine_suffix;\n-  pl->used_flag_ptr = warn;\n   pl->priority = priority;\n   pl->os_multilib = os_multilib;\n-  if (warn)\n-    *warn = 0;\n \n   /* Insert after PREV.  */\n   pl->next = (*prev);\n@@ -2648,7 +2620,7 @@ static void\n add_sysrooted_prefix (struct path_prefix *pprefix, const char *prefix,\n \t\t      const char *component,\n \t\t      /* enum prefix_priority */ int priority,\n-\t\t      int require_machine_suffix, int *warn, int os_multilib)\n+\t\t      int require_machine_suffix, int os_multilib)\n {\n   if (!IS_ABSOLUTE_PATH (prefix))\n     abort ();\n@@ -2665,7 +2637,7 @@ add_sysrooted_prefix (struct path_prefix *pprefix, const char *prefix,\n     }\n \n   add_prefix (pprefix, prefix, component, priority,\n-\t      require_machine_suffix, warn, os_multilib);\n+\t      require_machine_suffix, os_multilib);\n }\n \f\n /* Execute the command specified by the arguments on the current line of spec.\n@@ -2990,12 +2962,6 @@ static int added_libraries;\n /* And a vector of corresponding output files is made up later.  */\n \n const char **outfiles;\n-\n-/* Used to track if none of the -B paths are used.  */\n-static int warn_B;\n-\n-/* Gives value to pass as \"warn\" to add_prefix for standard prefixes.  */\n-static int *warn_std_ptr = 0;\n \f\n #if defined(HAVE_TARGET_OBJECT_SUFFIX) || defined(HAVE_TARGET_EXECUTABLE_SUFFIX)\n \n@@ -3290,9 +3256,9 @@ process_command (int argc, const char **argv)\n \n       set_std_prefix (gcc_exec_prefix, len);\n       add_prefix (&exec_prefixes, gcc_libexec_prefix, \"GCC\",\n-\t\t  PREFIX_PRIORITY_LAST, 0, NULL, 0);\n+\t\t  PREFIX_PRIORITY_LAST, 0, 0);\n       add_prefix (&startfile_prefixes, gcc_exec_prefix, \"GCC\",\n-\t\t  PREFIX_PRIORITY_LAST, 0, NULL, 0);\n+\t\t  PREFIX_PRIORITY_LAST, 0, 0);\n     }\n \n   /* COMPILER_PATH and LIBRARY_PATH have values\n@@ -3320,9 +3286,9 @@ process_command (int argc, const char **argv)\n \t      else\n \t\tnstore[endp - startp] = 0;\n \t      add_prefix (&exec_prefixes, nstore, 0,\n-\t\t\t  PREFIX_PRIORITY_LAST, 0, NULL, 0);\n+\t\t\t  PREFIX_PRIORITY_LAST, 0, 0);\n \t      add_prefix (&include_prefixes, nstore, 0,\n-\t\t\t  PREFIX_PRIORITY_LAST, 0, NULL, 0);\n+\t\t\t  PREFIX_PRIORITY_LAST, 0, 0);\n \t      if (*endp == 0)\n \t\tbreak;\n \t      endp = startp = endp + 1;\n@@ -3354,7 +3320,7 @@ process_command (int argc, const char **argv)\n \t      else\n \t\tnstore[endp - startp] = 0;\n \t      add_prefix (&startfile_prefixes, nstore, NULL,\n-\t\t\t  PREFIX_PRIORITY_LAST, 0, NULL, 1);\n+\t\t\t  PREFIX_PRIORITY_LAST, 0, 1);\n \t      if (*endp == 0)\n \t\tbreak;\n \t      endp = startp = endp + 1;\n@@ -3387,7 +3353,7 @@ process_command (int argc, const char **argv)\n \t      else\n \t\tnstore[endp - startp] = 0;\n \t      add_prefix (&startfile_prefixes, nstore, NULL,\n-\t\t\t  PREFIX_PRIORITY_LAST, 0, NULL, 1);\n+\t\t\t  PREFIX_PRIORITY_LAST, 0, 1);\n \t      if (*endp == 0)\n \t\tbreak;\n \t      endp = startp = endp + 1;\n@@ -3675,23 +3641,23 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t\t  {\n \t\t    if (len == 7)\n \t\t      add_prefix (&include_prefixes, \"./\", NULL,\n-\t\t\t\t  PREFIX_PRIORITY_B_OPT, 0, NULL, 0);\n+\t\t\t\t  PREFIX_PRIORITY_B_OPT, 0, 0);\n \t\t    else\n \t\t      {\n \t\t        char *string = xmalloc (len - 6);\n \t\t\tmemcpy (string, value, len - 7);\n \t\t\tstring[len - 7] = 0;\n \t\t        add_prefix (&include_prefixes, string, NULL,\n-\t\t\t\t    PREFIX_PRIORITY_B_OPT, 0, NULL, 0);\n+\t\t\t\t    PREFIX_PRIORITY_B_OPT, 0, 0);\n \t\t      }\n \t\t  }\n \n \t\tadd_prefix (&exec_prefixes, value, NULL,\n-\t\t\t    PREFIX_PRIORITY_B_OPT, 0, &warn_B, 0);\n+\t\t\t    PREFIX_PRIORITY_B_OPT, 0, 0);\n \t\tadd_prefix (&startfile_prefixes, value, NULL,\n-\t\t\t    PREFIX_PRIORITY_B_OPT, 0, &warn_B, 0);\n+\t\t\t    PREFIX_PRIORITY_B_OPT, 0, 0);\n \t\tadd_prefix (&include_prefixes, value, NULL,\n-\t\t\t    PREFIX_PRIORITY_B_OPT, 0, NULL, 0);\n+\t\t\t    PREFIX_PRIORITY_B_OPT, 0, 0);\n \t\tn_switches++;\n \t      }\n \t      break;\n@@ -3829,21 +3795,21 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n      as well as trying the machine and the version.  */\n #ifndef OS2\n   add_prefix (&exec_prefixes, standard_libexec_prefix, \"GCC\",\n-\t      PREFIX_PRIORITY_LAST, 1, warn_std_ptr, 0);\n+\t      PREFIX_PRIORITY_LAST, 1, 0);\n   add_prefix (&exec_prefixes, standard_libexec_prefix, \"BINUTILS\",\n-\t      PREFIX_PRIORITY_LAST, 2, warn_std_ptr, 0);\n+\t      PREFIX_PRIORITY_LAST, 2, 0);\n   add_prefix (&exec_prefixes, standard_exec_prefix, \"BINUTILS\",\n-\t      PREFIX_PRIORITY_LAST, 2, warn_std_ptr, 0);\n+\t      PREFIX_PRIORITY_LAST, 2, 0);\n   add_prefix (&exec_prefixes, standard_exec_prefix_1, \"BINUTILS\",\n-\t      PREFIX_PRIORITY_LAST, 2, warn_std_ptr, 0);\n+\t      PREFIX_PRIORITY_LAST, 2, 0);\n   add_prefix (&exec_prefixes, standard_exec_prefix_2, \"BINUTILS\",\n-\t      PREFIX_PRIORITY_LAST, 2, warn_std_ptr, 0);\n+\t      PREFIX_PRIORITY_LAST, 2, 0);\n #endif\n \n   add_prefix (&startfile_prefixes, standard_exec_prefix, \"BINUTILS\",\n-\t      PREFIX_PRIORITY_LAST, 1, warn_std_ptr, 0);\n+\t      PREFIX_PRIORITY_LAST, 1, 0);\n   add_prefix (&startfile_prefixes, standard_exec_prefix_2, \"BINUTILS\",\n-\t      PREFIX_PRIORITY_LAST, 1, warn_std_ptr, 0);\n+\t      PREFIX_PRIORITY_LAST, 1, 0);\n \n   tooldir_prefix = concat (tooldir_base_prefix, spec_machine,\n \t\t\t   dir_separator_str, NULL);\n@@ -3866,11 +3832,11 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t  add_prefix (&exec_prefixes,\n \t\t      concat (gcc_exec_tooldir_prefix, \"bin\",\n \t\t\t      dir_separator_str, NULL),\n-\t\t      NULL, PREFIX_PRIORITY_LAST, 0, NULL, 0);\n+\t\t      NULL, PREFIX_PRIORITY_LAST, 0, 0);\n \t  add_prefix (&startfile_prefixes,\n \t\t      concat (gcc_exec_tooldir_prefix, \"lib\",\n \t\t\t      dir_separator_str, NULL),\n-\t\t      NULL, PREFIX_PRIORITY_LAST, 0, NULL, 1);\n+\t\t      NULL, PREFIX_PRIORITY_LAST, 0, 1);\n \t}\n \n       tooldir_prefix = concat (standard_exec_prefix, spec_machine,\n@@ -3880,10 +3846,10 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \n   add_prefix (&exec_prefixes,\n \t      concat (tooldir_prefix, \"bin\", dir_separator_str, NULL),\n-\t      \"BINUTILS\", PREFIX_PRIORITY_LAST, 0, NULL, 0);\n+\t      \"BINUTILS\", PREFIX_PRIORITY_LAST, 0, 0);\n   add_prefix (&startfile_prefixes,\n \t      concat (tooldir_prefix, \"lib\", dir_separator_str, NULL),\n-\t      \"BINUTILS\", PREFIX_PRIORITY_LAST, 0, NULL, 1);\n+\t      \"BINUTILS\", PREFIX_PRIORITY_LAST, 0, 1);\n \n #if defined(TARGET_SYSTEM_ROOT_RELOCATABLE) && !defined(VMS)\n   /* If the normal TARGET_SYSTEM_ROOT is inside of $exec_prefix,\n@@ -6165,7 +6131,7 @@ main (int argc, const char **argv)\n       if (*md_exec_prefix)\n \t{\n \t  add_prefix (&exec_prefixes, md_exec_prefix, \"GCC\",\n-\t\t      PREFIX_PRIORITY_LAST, 0, NULL, 0);\n+\t\t      PREFIX_PRIORITY_LAST, 0, 0);\n \t}\n     }\n \n@@ -6197,23 +6163,23 @@ main (int argc, const char **argv)\n       int ndx;\n       for (ndx = 0; ndx < argbuf_index; ndx++)\n \tadd_sysrooted_prefix (&startfile_prefixes, argbuf[ndx], \"BINUTILS\",\n-\t\t\t      PREFIX_PRIORITY_LAST, 0, NULL, 1);\n+\t\t\t      PREFIX_PRIORITY_LAST, 0, 1);\n     }\n   /* We should eventually get rid of all these and stick to\n      startfile_prefix_spec exclusively.  */\n   else if (*cross_compile == '0' || target_system_root)\n     {\n       if (*md_exec_prefix)\n \tadd_sysrooted_prefix (&startfile_prefixes, md_exec_prefix, \"GCC\",\n-\t\t\t      PREFIX_PRIORITY_LAST, 0, NULL, 1);\n+\t\t\t      PREFIX_PRIORITY_LAST, 0, 1);\n \n       if (*md_startfile_prefix)\n \tadd_sysrooted_prefix (&startfile_prefixes, md_startfile_prefix,\n-\t\t\t      \"GCC\", PREFIX_PRIORITY_LAST, 0, NULL, 1);\n+\t\t\t      \"GCC\", PREFIX_PRIORITY_LAST, 0, 1);\n \n       if (*md_startfile_prefix_1)\n \tadd_sysrooted_prefix (&startfile_prefixes, md_startfile_prefix_1,\n-\t\t\t      \"GCC\", PREFIX_PRIORITY_LAST, 0, NULL, 1);\n+\t\t\t      \"GCC\", PREFIX_PRIORITY_LAST, 0, 1);\n \n       /* If standard_startfile_prefix is relative, base it on\n \t standard_exec_prefix.  This lets us move the installed tree\n@@ -6225,33 +6191,29 @@ main (int argc, const char **argv)\n       if (IS_ABSOLUTE_PATH (standard_startfile_prefix))\n \tadd_sysrooted_prefix (&startfile_prefixes,\n \t\t\t      standard_startfile_prefix, \"BINUTILS\",\n-\t\t\t      PREFIX_PRIORITY_LAST, 0, NULL, 1);\n+\t\t\t      PREFIX_PRIORITY_LAST, 0, 1);\n       else if (*cross_compile == '0')\n \t{\n \t  if (gcc_exec_prefix)\n \t    add_prefix (&startfile_prefixes,\n \t\t\tconcat (gcc_exec_prefix, machine_suffix,\n \t\t\t\tstandard_startfile_prefix, NULL),\n-\t\t\tNULL, PREFIX_PRIORITY_LAST, 0, NULL, 1);\n+\t\t\tNULL, PREFIX_PRIORITY_LAST, 0, 1);\n \t  add_prefix (&startfile_prefixes,\n \t\t      concat (standard_exec_prefix,\n \t\t\t      machine_suffix,\n \t\t\t      standard_startfile_prefix, NULL),\n-\t\t      NULL, PREFIX_PRIORITY_LAST, 0, NULL, 1);\n+\t\t      NULL, PREFIX_PRIORITY_LAST, 0, 1);\n \t}\n \n       if (*standard_startfile_prefix_1)\n  \tadd_sysrooted_prefix (&startfile_prefixes,\n \t\t\t      standard_startfile_prefix_1, \"BINUTILS\",\n-\t\t\t      PREFIX_PRIORITY_LAST, 0, NULL, 1);\n+\t\t\t      PREFIX_PRIORITY_LAST, 0, 1);\n       if (*standard_startfile_prefix_2)\n \tadd_sysrooted_prefix (&startfile_prefixes,\n \t\t\t      standard_startfile_prefix_2, \"BINUTILS\",\n-\t\t\t      PREFIX_PRIORITY_LAST, 0, NULL, 1);\n-#if 0 /* Can cause surprises, and one can use -B./ instead.  */\n-      add_prefix (&startfile_prefixes, \"./\", NULL,\n-\t\t  PREFIX_PRIORITY_LAST, 1, NULL, 0);\n-#endif\n+\t\t\t      PREFIX_PRIORITY_LAST, 0, 1);\n     }\n \n   /* Process any user specified specs in the order given on the command"}]}