{"sha": "ead553a1d9f9206c1f5a3b1a6799ea877fc9a845", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFkNTUzYTFkOWY5MjA2YzFmNWEzYjFhNjc5OWVhODc3ZmM5YTg0NQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2005-01-26T15:08:50Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2005-01-26T15:08:50Z"}, "message": "re PR middle-end/19616 (missed tail call)\n\n\tPR middle-end/19616\n\t* tree.h (CALL_EXPR_TAILCALL): Add comment.\n\t* calls.c (check_sibcall_argument_overlap_1): Revert the change\n\tto this function from 2004-07-10.\n\t* tree-tailcall.c (suitable_for_tail_opt_p): Do not consider the\n\tthe current function for tail call optimizations if the address\n\tof one of it its arguments is taken.\n\nFrom-SVN: r94265", "tree": {"sha": "001ffb21efda9c3fb69f2a80771b3f74a68f663a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/001ffb21efda9c3fb69f2a80771b3f74a68f663a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ead553a1d9f9206c1f5a3b1a6799ea877fc9a845", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ead553a1d9f9206c1f5a3b1a6799ea877fc9a845", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ead553a1d9f9206c1f5a3b1a6799ea877fc9a845", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ead553a1d9f9206c1f5a3b1a6799ea877fc9a845/comments", "author": null, "committer": null, "parents": [{"sha": "7533544070c29d561a1b570c08f126123264e150", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7533544070c29d561a1b570c08f126123264e150", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7533544070c29d561a1b570c08f126123264e150"}], "stats": {"total": 39, "additions": 31, "deletions": 8}, "files": [{"sha": "ef8f274bc90493197a655ed2a8ea2f820d9ce1bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ead553a1d9f9206c1f5a3b1a6799ea877fc9a845/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ead553a1d9f9206c1f5a3b1a6799ea877fc9a845/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ead553a1d9f9206c1f5a3b1a6799ea877fc9a845", "patch": "@@ -1,3 +1,13 @@\n+2005-01-26  Steven Bosscher  <stevenb@suse.de>\n+\n+\tPR middle-end/19616\t\n+\t* tree.h (CALL_EXPR_TAILCALL): Add comment.\n+\t* calls.c (check_sibcall_argument_overlap_1): Revert the change\n+\tto this function from 2004-07-10.\n+\t* tree-tailcall.c (suitable_for_tail_opt_p): Do not consider the\n+\tthe current function for tail call optimizations if the address\n+\tof one of it its arguments is taken.\n+\n 2005-01-26  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* cse.c (fold_rtx): Call equiv_constant only when necessary.\n@@ -24,7 +34,7 @@\n \t-lsyssim.  Wrap -lc -lsyssim in --start-group --end-group instead\n \tof doubling.\n \t(STARTFILE_SPEC): Add crti.o, before crtbegin.o.\n- \t<sim*>: Always use crt1.o, regardless of N in simN.\n+\t<sim*>: Always use crt1.o, regardless of N in simN.\n \t<!sim>: Drop support for -pg and -p variants; always use crt0.o.\n \t(ENDFILE_SPEC): Add crtn.o, after crtend.o.\n \t(CRT_CALL_STATIC_FUNCTION): Remove.\n@@ -103,10 +113,10 @@\n \n \t2005-01-25  Alexandre Oliva  <aoliva@redhat.com>\n \n-        * config/frv/frv.h (ASM_OUTPUT_DWARF_DTPREL): Define.\n-        * config/frv/frv-protos.h (frv_output_dwarf_dtprel): Declare.\n-        * config/frv/frv.c (TLS_BIAS): Define.\n-        (frv_output_dwarf_dtprel): New.\n+\t* config/frv/frv.h (ASM_OUTPUT_DWARF_DTPREL): Define.\n+\t* config/frv/frv-protos.h (frv_output_dwarf_dtprel): Declare.\n+\t* config/frv/frv.c (TLS_BIAS): Define.\n+\t(frv_output_dwarf_dtprel): New.\n \n 2005-01-26  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -436,7 +446,7 @@\n \tfirst label to see if it is a nonlocal label.\n \n 2005-01-22  David Edelsohn  <edelsohn@gnu.org>\n-            Andrew Pinski  <pinskia@physics.uc.edu>\n+\t    Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR target/19491\n \t* config/rs6000/rs6000.c (rs6000_va_start): Saturate n_gpr at\n@@ -2185,7 +2195,7 @@\n 2004-01-05  Uros Bizjak  <uros@kss-loka.si>\n \n \t* doc/invoke.texi (Intel 386 and AMD x86-64 Options):\n-        Replace i387 with 'i386 compiler' in -mfpmath=sse option.\n+\tReplace i387 with 'i386 compiler' in -mfpmath=sse option.\n \n 2005-01-04  Roger Sayle  <roger@eyesopen.com>\n "}, {"sha": "291f88cb83572d6417c9c87a2c0ecc3bf8376eaa", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ead553a1d9f9206c1f5a3b1a6799ea877fc9a845/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ead553a1d9f9206c1f5a3b1a6799ea877fc9a845/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=ead553a1d9f9206c1f5a3b1a6799ea877fc9a845", "patch": "@@ -1670,7 +1670,7 @@ check_sibcall_argument_overlap_1 (rtx x)\n \t       && GET_CODE (XEXP (XEXP (x, 0), 1)) == CONST_INT)\n \ti = INTVAL (XEXP (XEXP (x, 0), 1));\n       else\n-\treturn 1;\n+\treturn 0;\n \n #ifdef ARGS_GROW_DOWNWARD\n       i = -i - GET_MODE_SIZE (GET_MODE (x));"}, {"sha": "a76314bc83549c7f4e4108c4538d52d0a7f6f9b0", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ead553a1d9f9206c1f5a3b1a6799ea877fc9a845/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ead553a1d9f9206c1f5a3b1a6799ea877fc9a845/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=ead553a1d9f9206c1f5a3b1a6799ea877fc9a845", "patch": "@@ -159,6 +159,8 @@ suitable_for_tail_opt_p (void)\n static bool\n suitable_for_tail_call_opt_p (void)\n {\n+  tree param;\n+\n   /* alloca (until we have stack slot life analysis) inhibits\n      sibling call optimizations, but not tail recursion.  */\n   if (current_function_calls_alloca)\n@@ -176,6 +178,14 @@ suitable_for_tail_call_opt_p (void)\n   if (current_function_calls_setjmp)\n     return false;\n \n+  /* ??? It is OK if the argument of a function is taken in some cases,\n+     but not in all cases.  See PR15387 and PR19616.  Revisit for 4.1.  */\n+  for (param = DECL_ARGUMENTS (current_function_decl);\n+       param;\n+       param = TREE_CHAIN (param))\n+    if (TREE_ADDRESSABLE (param))\n+      return false;\n+\n   return true;\n }\n "}, {"sha": "884f2c43d45d8d515d398cf7a7abccad35d3fe36", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ead553a1d9f9206c1f5a3b1a6799ea877fc9a845/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ead553a1d9f9206c1f5a3b1a6799ea877fc9a845/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ead553a1d9f9206c1f5a3b1a6799ea877fc9a845", "patch": "@@ -824,6 +824,9 @@ extern void tree_operand_check_failed (int, enum tree_code,\n    had its address taken.  That matters for inline functions.  */\n #define TREE_ADDRESSABLE(NODE) ((NODE)->common.addressable_flag)\n \n+/* Set on a CALL_EXPR if the call is in a tail position, ie. just before the\n+   exit of a function.  Calls for which this is true are candidates for tail\n+   call optimizations.  */\n #define CALL_EXPR_TAILCALL(NODE) (CALL_EXPR_CHECK(NODE)->common.addressable_flag)\n \n /* In a VAR_DECL, nonzero means allocate static storage."}]}