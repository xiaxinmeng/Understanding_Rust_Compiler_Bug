{"sha": "35fb3d1ff33f0ca63ff13dc07e0859e245446e38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVmYjNkMWZmMzNmMGNhNjNmZjEzZGMwN2UwODU5ZTI0NTQ0NmUzOA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2001-01-10T02:47:50Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2001-01-10T02:47:50Z"}, "message": "h8300.c (get_shift_alg): Use a struct shift_info to return the result.\n\n2001-01-09  Kazu Hirata  <kazu@hxi.com>\n\n\t* config/h8300/h8300.c (get_shift_alg): Use a struct shift_info to\n\treturn the result.\n\nFrom-SVN: r38850", "tree": {"sha": "b122a341948458c4d58b7ed844bb2df9a488b74e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b122a341948458c4d58b7ed844bb2df9a488b74e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35fb3d1ff33f0ca63ff13dc07e0859e245446e38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35fb3d1ff33f0ca63ff13dc07e0859e245446e38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35fb3d1ff33f0ca63ff13dc07e0859e245446e38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35fb3d1ff33f0ca63ff13dc07e0859e245446e38/comments", "author": null, "committer": null, "parents": [{"sha": "4971426b43884c12761691e9017828512483e7be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4971426b43884c12761691e9017828512483e7be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4971426b43884c12761691e9017828512483e7be"}], "stats": {"total": 354, "additions": 187, "deletions": 167}, "files": [{"sha": "c79198b244be1e92701d3720d8b155e473061d6a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35fb3d1ff33f0ca63ff13dc07e0859e245446e38/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35fb3d1ff33f0ca63ff13dc07e0859e245446e38/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35fb3d1ff33f0ca63ff13dc07e0859e245446e38", "patch": "@@ -1,3 +1,8 @@\n+2001-01-09  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* config/h8300/h8300.c (get_shift_alg): Use a struct shift_info to\n+\treturn the result.\n+\n 2001-01-09  Alan Lehotsky  <lehotsky@tiac.net>\n \n \t* reload.c (find_reloads_address): Check for eliminable registers"}, {"sha": "2aeb478d4950992bab669af67d9930aaf833e392", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 182, "deletions": 167, "changes": 349, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35fb3d1ff33f0ca63ff13dc07e0859e245446e38/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35fb3d1ff33f0ca63ff13dc07e0859e245446e38/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=35fb3d1ff33f0ca63ff13dc07e0859e245446e38", "patch": "@@ -1969,10 +1969,32 @@ static const char *const rotate_two[3][3] =\n     }\n };\n \n+struct shift_info {\n+  /* Shift algorithm.  */\n+  enum shift_alg alg;\n+\n+  /* The number of bits to be shifted by shift1 and shift2.  Valid\n+     when ALG is SHIFT_SPECIAL.  */\n+  unsigned int remainder;\n+\n+  /* Special insn for a shift.  Valid when ALG is SHIFT_SPECIAL.  */\n+  const char *special;\n+\n+  /* Insn for a one-bit shift.  Valid when ALG is either SHIFT_INLINE\n+     or SHIFT_SPECIAL, and REMAINDER is non-zero.  */\n+  const char *shift1;\n+\n+  /* Insn for a two-bit shift.  Valid when ALG is either SHIFT_INLINE\n+     or SHIFT_SPECIAL, and REMAINDER is non-zero.  */\n+  const char *shift2;\n+\n+  /* Valid CC flags.  */\n+  int cc_valid_p;\n+};\n+\n static enum shift_alg get_shift_alg PARAMS ((enum shift_type,\n \t\t\t\t\t     enum shift_mode, int,\n-\t\t\t\t\t     const char **, const char **,\n-\t\t\t\t\t     int *));\n+\t\t\t\t\t     struct shift_info *));\n \n /* Given CPU, MODE, SHIFT_TYPE, and shift count COUNT, determine the best\n    algorithm for doing the shift.  The assembler code is stored in ASSEMBLER.\n@@ -1988,23 +2010,20 @@ static enum shift_alg get_shift_alg PARAMS ((enum shift_type,\n    1,2,3,4 will be inlined (1,2 for SI).  */\n \n static enum shift_alg\n-get_shift_alg (shift_type, shift_mode, count, assembler_p,\n-\t       assembler2_p, cc_valid_p)\n+get_shift_alg (shift_type, shift_mode, count, info)\n      enum shift_type shift_type;\n      enum shift_mode shift_mode;\n      int count;\n-     const char **assembler_p;\n-     const char **assembler2_p;\n-     int *cc_valid_p;\n+     struct shift_info *info;\n {\n   /* Assume either SHIFT_LOOP or SHIFT_INLINE.\n      It is up to the caller to know that looping clobbers cc.  */\n-  *assembler_p = shift_one[cpu_type][shift_type][shift_mode].assembler;\n+  info->shift1 = shift_one[cpu_type][shift_type][shift_mode].assembler;\n   if (TARGET_H8300S)\n-    *assembler2_p = shift_two[shift_type][shift_mode].assembler;\n+    info->shift2 = shift_two[shift_type][shift_mode].assembler;\n   else\n-    *assembler2_p = NULL;\n-  *cc_valid_p = shift_one[cpu_type][shift_type][shift_mode].cc_valid;\n+    info->shift2 = NULL;\n+  info->cc_valid_p = shift_one[cpu_type][shift_type][shift_mode].cc_valid;\n \n   /* Now look for cases we want to optimize.  */\n \n@@ -2024,8 +2043,8 @@ get_shift_alg (shift_type, shift_mode, count, assembler_p,\n \t     through the entire value.  */\n \t  if (shift_type == SHIFT_ASHIFTRT && count == 7)\n \t    {\n-\t      *assembler_p = \"shll\\t%X0\\n\\tsubx\\t%X0,%X0\";\n-\t      *cc_valid_p = 0;\n+\t      info->special = \"shll\\t%X0\\n\\tsubx\\t%X0,%X0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    }\n \n@@ -2034,10 +2053,10 @@ get_shift_alg (shift_type, shift_mode, count, assembler_p,\n \t    return SHIFT_LOOP;\n \n \t  /* Other shifts by 5, 6, or 7 bits use SHIFT_ROT_AND.  */\n-\t  *assembler_p = rotate_one[cpu_type][shift_type][shift_mode];\n+\t  info->shift1 = rotate_one[cpu_type][shift_type][shift_mode];\n \t  if (TARGET_H8300S)\n-\t    *assembler2_p = rotate_two[shift_type][shift_mode];\n-\t  *cc_valid_p = 0;\n+\t    info->shift2 = rotate_two[shift_type][shift_mode];\n+\t  info->cc_valid_p = 0;\n \t  return SHIFT_ROT_AND;\n \t}\n \n@@ -2050,36 +2069,36 @@ get_shift_alg (shift_type, shift_mode, count, assembler_p,\n \t{\n \t  if (shift_type == SHIFT_ASHIFT && TARGET_H8300)\n \t    {\n-\t      *assembler_p = \"shar.b\\t%t0\\n\\tmov.b\\t%s0,%t0\\n\\trotxr.b\\t%t0\\n\\trotr.b\\t%s0\\n\\tand.b\\t#0x80,%s0\";\n-\t      *cc_valid_p = 0;\n+\t      info->special = \"shar.b\\t%t0\\n\\tmov.b\\t%s0,%t0\\n\\trotxr.b\\t%t0\\n\\trotr.b\\t%s0\\n\\tand.b\\t#0x80,%s0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    }\n \n \t  if (shift_type == SHIFT_ASHIFT && TARGET_H8300H)\n \t    {\n-\t      *assembler_p = \"shar.b\\t%t0\\n\\tmov.b\\t%s0,%t0\\n\\trotxr.w\\t%T0\\n\\tand.b\\t#0x80,%s0\";\n-\t      *cc_valid_p = 0;\n+\t      info->special = \"shar.b\\t%t0\\n\\tmov.b\\t%s0,%t0\\n\\trotxr.w\\t%T0\\n\\tand.b\\t#0x80,%s0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    }\n \n \t  if (shift_type == SHIFT_LSHIFTRT && TARGET_H8300)\n \t    {\n-\t      *assembler_p = \"shal.b\\t%s0\\n\\tmov.b\\t%t0,%s0\\n\\trotxl.b\\t%s0\\n\\trotl.b\\t%t0\\n\\tand.b\\t#0x01,%t0\";\n-\t      *cc_valid_p = 0;\n+\t      info->special = \"shal.b\\t%s0\\n\\tmov.b\\t%t0,%s0\\n\\trotxl.b\\t%s0\\n\\trotl.b\\t%t0\\n\\tand.b\\t#0x01,%t0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    }\n \n \t  if (shift_type == SHIFT_LSHIFTRT && TARGET_H8300H)\n \t    {\n-\t      *assembler_p = \"shal.b\\t%s0\\n\\tmov.b\\t%t0,%s0\\n\\trotxl.w\\t%T0\\n\\tand.b\\t#0x01,%t0\";\n-\t      *cc_valid_p = 0;\n+\t      info->special = \"shal.b\\t%s0\\n\\tmov.b\\t%t0,%s0\\n\\trotxl.w\\t%T0\\n\\tand.b\\t#0x01,%t0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    }\n \n \t  if (shift_type == SHIFT_ASHIFTRT)\n \t    {\n-\t      *assembler_p = \"shal.b\\t%s0\\n\\tmov.b\\t%t0,%s0\\n\\trotxl.b\\t%s0\\n\\tsubx\\t%t0,%t0\";\n-\t      *cc_valid_p = 0;\n+\t      info->special = \"shal.b\\t%s0\\n\\tmov.b\\t%t0,%s0\\n\\trotxl.b\\t%s0\\n\\tsubx\\t%t0,%t0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    }\n \t}\n@@ -2088,19 +2107,19 @@ get_shift_alg (shift_type, shift_mode, count, assembler_p,\n \t  switch (shift_type)\n \t    {\n \t    case SHIFT_ASHIFT:\n-\t      *assembler_p = \"mov.b\\t%s0,%t0\\n\\tsub.b\\t%s0,%s0\";\n-\t      *cc_valid_p = 0;\n+\t      info->special = \"mov.b\\t%s0,%t0\\n\\tsub.b\\t%s0,%s0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    case SHIFT_LSHIFTRT:\n-\t      *assembler_p = \"mov.b\\t%t0,%s0\\n\\tsub.b\\t%t0,%t0\";\n-\t      *cc_valid_p = 0;\n+\t      info->special = \"mov.b\\t%t0,%s0\\n\\tsub.b\\t%t0,%t0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    case SHIFT_ASHIFTRT:\n \t      if (TARGET_H8300)\n-\t\t*assembler_p = \"mov.b\\t%t0,%s0\\n\\tshll\\t%t0\\n\\tsubx\\t%t0,%t0\";\n+\t\tinfo->special = \"mov.b\\t%t0,%s0\\n\\tshll\\t%t0\\n\\tsubx\\t%t0,%t0\";\n \t      else\n-\t\t*assembler_p = \"mov.b\\t%t0,%s0\\n\\texts.w\\t%T0\";\n-\t      *cc_valid_p = 0;\n+\t\tinfo->special = \"mov.b\\t%t0,%s0\\n\\texts.w\\t%T0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    }\n \t}\n@@ -2109,19 +2128,19 @@ get_shift_alg (shift_type, shift_mode, count, assembler_p,\n \t  switch (shift_type)\n \t    {\n \t    case SHIFT_ASHIFT:\n-\t      *assembler_p = \"mov.b\\t%s0,%t0\\n\\tsub.b\\t%s0,%s0\\n\\tshal.b\\t%t0\";\n-\t      *cc_valid_p = 0;\n+\t      info->special = \"mov.b\\t%s0,%t0\\n\\tsub.b\\t%s0,%s0\\n\\tshal.b\\t%t0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    case SHIFT_LSHIFTRT:\n-\t      *assembler_p = \"mov.b\\t%t0,%s0\\n\\tsub.b\\t%t0,%t0\\n\\tshlr.b\\t%s0\";\n-\t      *cc_valid_p = 0;\n+\t      info->special = \"mov.b\\t%t0,%s0\\n\\tsub.b\\t%t0,%t0\\n\\tshlr.b\\t%s0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    case SHIFT_ASHIFTRT:\n \t      if (TARGET_H8300)\n-\t\t*assembler_p = \"mov.b\\t%t0,%s0\\n\\tbld\\t#7,%s0\\n\\tsubx\\t%t0,%t0\\n\\tshar.b\\t%s0\";\n+\t\tinfo->special = \"mov.b\\t%t0,%s0\\n\\tbld\\t#7,%s0\\n\\tsubx\\t%t0,%t0\\n\\tshar.b\\t%s0\";\n \t      else\n-\t\t*assembler_p = \"mov.b\\t%t0,%s0\\n\\texts.w\\t%T0\\n\\tshar.b\\t%s0\";\n-\t      *cc_valid_p = 0;\n+\t\tinfo->special = \"mov.b\\t%t0,%s0\\n\\texts.w\\t%T0\\n\\tshar.b\\t%s0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    }\n \t}\n@@ -2131,26 +2150,26 @@ get_shift_alg (shift_type, shift_mode, count, assembler_p,\n \t    {\n \t    case SHIFT_ASHIFT:\n \t      if (TARGET_H8300S)\n-\t\t*assembler_p = \"mov.b\\t%s0,%t0\\n\\tsub.b\\t%s0,%s0\\n\\tshal.b\\t#2,%t0\";\n+\t\tinfo->special = \"mov.b\\t%s0,%t0\\n\\tsub.b\\t%s0,%s0\\n\\tshal.b\\t#2,%t0\";\n \t      else\n-\t\t*assembler_p = \"mov.b\\t%s0,%t0\\n\\tsub.b\\t%s0,%s0\\n\\tshal.b\\t%t0\\n\\tshal.b\\t%t0\";\n-\t      *cc_valid_p = 0;\n+\t\tinfo->special = \"mov.b\\t%s0,%t0\\n\\tsub.b\\t%s0,%s0\\n\\tshal.b\\t%t0\\n\\tshal.b\\t%t0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    case SHIFT_LSHIFTRT:\n \t      if (TARGET_H8300S)\n-\t\t*assembler_p = \"mov.b\\t%t0,%s0\\n\\tsub.b\\t%t0,%t0\\n\\tshlr.b\\t#2,%s0\";\n+\t\tinfo->special = \"mov.b\\t%t0,%s0\\n\\tsub.b\\t%t0,%t0\\n\\tshlr.b\\t#2,%s0\";\n \t      else\n-\t\t*assembler_p = \"mov.b\\t%t0,%s0\\n\\tsub.b\\t%t0,%t0\\n\\tshlr.b\\t%s0\\n\\tshlr.b\\t%s0\";\n-\t      *cc_valid_p = 0;\n+\t\tinfo->special = \"mov.b\\t%t0,%s0\\n\\tsub.b\\t%t0,%t0\\n\\tshlr.b\\t%s0\\n\\tshlr.b\\t%s0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    case SHIFT_ASHIFTRT:\n \t      if (TARGET_H8300)\n-\t\t*assembler_p = \"mov.b\\t%t0,%s0\\n\\tbld\\t#7,%s0\\n\\tsubx\\t%t0,%t0\\n\\tshar.b\\t%s0\\n\\tshar.b\\t%s0\";\n+\t\tinfo->special = \"mov.b\\t%t0,%s0\\n\\tbld\\t#7,%s0\\n\\tsubx\\t%t0,%t0\\n\\tshar.b\\t%s0\\n\\tshar.b\\t%s0\";\n \t      else if (TARGET_H8300H)\n-\t\t*assembler_p = \"mov.b\\t%t0,%s0\\n\\texts.w\\t%T0\\n\\tshar.b\\t%s0\\n\\tshar.b\\t%s0\";\n+\t\tinfo->special = \"mov.b\\t%t0,%s0\\n\\texts.w\\t%T0\\n\\tshar.b\\t%s0\\n\\tshar.b\\t%s0\";\n \t      else if (TARGET_H8300S)\n-\t\t*assembler_p = \"mov.b\\t%t0,%s0\\n\\texts.w\\t%T0\\n\\tshar.b\\t#2,%s0\";\n-\t      *cc_valid_p = 0;\n+\t\tinfo->special = \"mov.b\\t%t0,%s0\\n\\texts.w\\t%T0\\n\\tshar.b\\t#2,%s0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    }\n \t}\n@@ -2160,26 +2179,26 @@ get_shift_alg (shift_type, shift_mode, count, assembler_p,\n \t    {\n \t    case SHIFT_ASHIFT:\n \t      if (TARGET_H8300S)\n-\t\t*assembler_p = \"mov.b\\t%s0,%t0\\n\\tsub.b\\t%s0,%s0\\n\\tshal.b\\t#2,%t0\\n\\tshal.b\\t%t0\";\n+\t\tinfo->special = \"mov.b\\t%s0,%t0\\n\\tsub.b\\t%s0,%s0\\n\\tshal.b\\t#2,%t0\\n\\tshal.b\\t%t0\";\n \t      else\n-\t\t*assembler_p = \"mov.b\\t%s0,%t0\\n\\tsub.b\\t%s0,%s0\\n\\tshal.b\\t%t0\\n\\tshal.b\\t%t0\\n\\tshal.b\\t%t0\";\n-\t      *cc_valid_p = 0;\n+\t\tinfo->special = \"mov.b\\t%s0,%t0\\n\\tsub.b\\t%s0,%s0\\n\\tshal.b\\t%t0\\n\\tshal.b\\t%t0\\n\\tshal.b\\t%t0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    case SHIFT_LSHIFTRT:\n \t      if (TARGET_H8300S)\n-\t\t*assembler_p = \"mov.b\\t%t0,%s0\\n\\tsub.b\\t%t0,%t0\\n\\tshlr.b\\t#2,%s0\\n\\tshlr.b\\t%s0\";\n+\t\tinfo->special = \"mov.b\\t%t0,%s0\\n\\tsub.b\\t%t0,%t0\\n\\tshlr.b\\t#2,%s0\\n\\tshlr.b\\t%s0\";\n \t      else\n-\t\t*assembler_p = \"mov.b\\t%t0,%s0\\n\\tsub.b\\t%t0,%t0\\n\\tshlr.b\\t%s0\\n\\tshlr.b\\t%s0\\n\\tshlr.b\\t%s0\";\n-\t      *cc_valid_p = 0;\n+\t\tinfo->special = \"mov.b\\t%t0,%s0\\n\\tsub.b\\t%t0,%t0\\n\\tshlr.b\\t%s0\\n\\tshlr.b\\t%s0\\n\\tshlr.b\\t%s0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    case SHIFT_ASHIFTRT:\n \t      if (TARGET_H8300)\n-\t\t*assembler_p = \"mov.b\\t%t0,%s0\\n\\tbld\\t#7,%s0\\n\\tsubx\\t%t0,%t0\\n\\tshar.b\\t%s0\\n\\tshar.b\\t%s0\\n\\tshar.b\\t%s0\";\n+\t\tinfo->special = \"mov.b\\t%t0,%s0\\n\\tbld\\t#7,%s0\\n\\tsubx\\t%t0,%t0\\n\\tshar.b\\t%s0\\n\\tshar.b\\t%s0\\n\\tshar.b\\t%s0\";\n \t      else if (TARGET_H8300H)\n-\t\t*assembler_p = \"mov.b\\t%t0,%s0\\n\\texts.w\\t%T0\\n\\tshar.b\\t%s0\\n\\tshar.b\\t%s0\\n\\tshar.b\\t%s0\";\n+\t\tinfo->special = \"mov.b\\t%t0,%s0\\n\\texts.w\\t%T0\\n\\tshar.b\\t%s0\\n\\tshar.b\\t%s0\\n\\tshar.b\\t%s0\";\n \t      else if (TARGET_H8300S)\n-\t\t*assembler_p = \"mov.b\\t%t0,%s0\\n\\texts.w\\t%T0\\n\\tshar.b\\t#2,%s0\\n\\tshar.b\\t%s0\";\n-\t      *cc_valid_p = 0;\n+\t\tinfo->special = \"mov.b\\t%t0,%s0\\n\\texts.w\\t%T0\\n\\tshar.b\\t#2,%s0\\n\\tshar.b\\t%s0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    }\n \t}\n@@ -2189,26 +2208,26 @@ get_shift_alg (shift_type, shift_mode, count, assembler_p,\n \t    {\n \t    case SHIFT_ASHIFT:\n \t      if (TARGET_H8300S)\n-\t\t*assembler_p = \"mov.b\\t%s0,%t0\\n\\tsub.b\\t%s0,%s0\\n\\tshal.b\\t#2,%t0\\n\\tshal.b\\t#2,%t0\";\n+\t\tinfo->special = \"mov.b\\t%s0,%t0\\n\\tsub.b\\t%s0,%s0\\n\\tshal.b\\t#2,%t0\\n\\tshal.b\\t#2,%t0\";\n \t      else\n-\t\t*assembler_p = \"mov.b\\t%s0,%t0\\n\\tsub.b\\t%s0,%s0\\n\\tshal.b\\t%t0\\n\\tshal.b\\t%t0\\n\\tshal.b\\t%t0\\n\\tshal.b\\t%t0\";\n-\t      *cc_valid_p = 0;\n+\t\tinfo->special = \"mov.b\\t%s0,%t0\\n\\tsub.b\\t%s0,%s0\\n\\tshal.b\\t%t0\\n\\tshal.b\\t%t0\\n\\tshal.b\\t%t0\\n\\tshal.b\\t%t0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    case SHIFT_LSHIFTRT:\n \t      if (TARGET_H8300S)\n-\t\t*assembler_p = \"mov.b\\t%t0,%s0\\n\\tsub.b\\t%t0,%t0\\n\\tshlr.b\\t#2,%s0\\n\\tshlr.b\\t#2,%s0\";\n+\t\tinfo->special = \"mov.b\\t%t0,%s0\\n\\tsub.b\\t%t0,%t0\\n\\tshlr.b\\t#2,%s0\\n\\tshlr.b\\t#2,%s0\";\n \t      else\n-\t\t*assembler_p = \"mov.b\\t%t0,%s0\\n\\tsub.b\\t%t0,%t0\\n\\tshlr.b\\t%s0\\n\\tshlr.b\\t%s0\\n\\tshlr.b\\t%s0\\n\\tshlr.b\\t%s0\";\n-\t      *cc_valid_p = 0;\n+\t\tinfo->special = \"mov.b\\t%t0,%s0\\n\\tsub.b\\t%t0,%t0\\n\\tshlr.b\\t%s0\\n\\tshlr.b\\t%s0\\n\\tshlr.b\\t%s0\\n\\tshlr.b\\t%s0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    case SHIFT_ASHIFTRT:\n \t      if (TARGET_H8300)\n-\t\t*assembler_p = \"mov.b\\t%t0,%s0\\n\\tbld\\t#7,%s0\\n\\tsubx\\t%t0,%t0\\n\\tshar.b\\t%s0\\n\\tshar.b\\t%s0\\n\\tshar.b\\t%s0\\n\\tshar.b\\t%s0\";\n+\t\tinfo->special = \"mov.b\\t%t0,%s0\\n\\tbld\\t#7,%s0\\n\\tsubx\\t%t0,%t0\\n\\tshar.b\\t%s0\\n\\tshar.b\\t%s0\\n\\tshar.b\\t%s0\\n\\tshar.b\\t%s0\";\n \t      else if (TARGET_H8300H)\n-\t\t*assembler_p = \"mov.b\\t%t0,%s0\\n\\texts.w\\t%T0\\n\\tshar.b\\t%s0\\n\\tshar.b\\t%s0\\n\\tshar.b\\t%s0\\n\\tshar.b\\t%s0\";\n+\t\tinfo->special = \"mov.b\\t%t0,%s0\\n\\texts.w\\t%T0\\n\\tshar.b\\t%s0\\n\\tshar.b\\t%s0\\n\\tshar.b\\t%s0\\n\\tshar.b\\t%s0\";\n \t      else if (TARGET_H8300S)\n-\t\t*assembler_p = \"mov.b\\t%t0,%s0\\n\\texts.w\\t%T0\\n\\tshar.b\\t#2,%s0\\n\\tshar.b\\t#2,%s0\";\n-\t      *cc_valid_p = 0;\n+\t\tinfo->special = \"mov.b\\t%t0,%s0\\n\\texts.w\\t%T0\\n\\tshar.b\\t#2,%s0\\n\\tshar.b\\t#2,%s0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    }\n \t}\n@@ -2217,18 +2236,18 @@ get_shift_alg (shift_type, shift_mode, count, assembler_p,\n \t{\n \t  if (count == 15 && shift_type == SHIFT_ASHIFTRT)\n \t    {\n-\t      *assembler_p = \"shll\\t%t0,%t0\\n\\tsubx\\t%t0,%t0\\n\\tmov.b\\t%t0,%s0\";\n-\t      *cc_valid_p = 0;\n+\t      info->special = \"shll\\t%t0,%t0\\n\\tsubx\\t%t0,%t0\\n\\tmov.b\\t%t0,%s0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    }\n \t  else if (shift_type != SHIFT_ASHIFTRT)\n \t    {\n-\t      *assembler_p = rotate_one[cpu_type][shift_type][shift_mode];\n+\t      info->shift1 = rotate_one[cpu_type][shift_type][shift_mode];\n \t      if (TARGET_H8300S)\n-\t        *assembler2_p = rotate_two[shift_type][shift_mode];\n+\t        info->shift2 = rotate_two[shift_type][shift_mode];\n \t      else\n-\t\t*assembler2_p = NULL;\n-\t      *cc_valid_p = 0;\n+\t\tinfo->shift2 = NULL;\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_ROT_AND;\n \t    }\n \t}\n@@ -2244,16 +2263,16 @@ get_shift_alg (shift_type, shift_mode, count, assembler_p,\n \t  switch (shift_type)\n \t    {\n \t    case SHIFT_ASHIFT:\n-\t      *assembler_p = \"mov.b\\t%y0,%z0\\n\\tmov.b\\t%x0,%y0\\n\\tmov.b\\t%w0,%x0\\n\\tsub.b\\t%w0,%w0\";\n-\t      *cc_valid_p = 0;\n+\t      info->special = \"mov.b\\t%y0,%z0\\n\\tmov.b\\t%x0,%y0\\n\\tmov.b\\t%w0,%x0\\n\\tsub.b\\t%w0,%w0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    case SHIFT_LSHIFTRT:\n-\t      *assembler_p = \"mov.b\\t%x0,%w0\\n\\tmov.b\\t%y0,%x0\\n\\tmov.b\\t%z0,%y0\\n\\tsub.b\\t%z0,%z0\";\n-\t      *cc_valid_p = 0;\n+\t      info->special = \"mov.b\\t%x0,%w0\\n\\tmov.b\\t%y0,%x0\\n\\tmov.b\\t%z0,%y0\\n\\tsub.b\\t%z0,%z0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    case SHIFT_ASHIFTRT:\n-\t      *assembler_p = \"mov.b\\t%x0,%w0\\n\\tmov.b\\t%y0,%x0\\n\\tmov.b\\t%z0,%y0\\n\\tshll\\t%z0\\n\\tsubx\\t%z0,%z0\";\n-\t      *cc_valid_p = 0;\n+\t      info->special = \"mov.b\\t%x0,%w0\\n\\tmov.b\\t%y0,%x0\\n\\tmov.b\\t%z0,%y0\\n\\tshll\\t%z0\\n\\tsubx\\t%z0,%z0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    }\n \t}\n@@ -2262,16 +2281,16 @@ get_shift_alg (shift_type, shift_mode, count, assembler_p,\n \t  switch (shift_type)\n \t    {\n \t    case SHIFT_ASHIFT:\n-\t      *assembler_p = \"mov.w\\t%e0,%f4\\n\\tmov.b\\t%s4,%t4\\n\\tmov.b\\t%t0,%s4\\n\\tmov.b\\t%s0,%t0\\n\\tsub.b\\t%s0,%s0\\n\\tmov.w\\t%f4,%e0\";\n-\t      *cc_valid_p = 0;\n+\t      info->special = \"mov.w\\t%e0,%f4\\n\\tmov.b\\t%s4,%t4\\n\\tmov.b\\t%t0,%s4\\n\\tmov.b\\t%s0,%t0\\n\\tsub.b\\t%s0,%s0\\n\\tmov.w\\t%f4,%e0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    case SHIFT_LSHIFTRT:\n-\t      *assembler_p = \"mov.w\\t%e0,%f4\\n\\tmov.b\\t%t0,%s0\\n\\tmov.b\\t%s4,%t0\\n\\tmov.b\\t%t4,%s4\\n\\textu.w\\t%f4\\n\\tmov.w\\t%f4,%e0\";\n-\t      *cc_valid_p = 0;\n+\t      info->special = \"mov.w\\t%e0,%f4\\n\\tmov.b\\t%t0,%s0\\n\\tmov.b\\t%s4,%t0\\n\\tmov.b\\t%t4,%s4\\n\\textu.w\\t%f4\\n\\tmov.w\\t%f4,%e0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    case SHIFT_ASHIFTRT:\n-\t      *assembler_p = \"mov.w\\t%e0,%f4\\n\\tmov.b\\t%t0,%s0\\n\\tmov.b\\t%s4,%t0\\n\\tmov.b\\t%t4,%s4\\n\\texts.w\\t%f4\\n\\tmov.w\\t%f4,%e0\";\n-\t      *cc_valid_p = 0;\n+\t      info->special = \"mov.w\\t%e0,%f4\\n\\tmov.b\\t%t0,%s0\\n\\tmov.b\\t%s4,%t0\\n\\tmov.b\\t%t4,%s4\\n\\texts.w\\t%f4\\n\\tmov.w\\t%f4,%e0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    }\n \t}\n@@ -2280,19 +2299,19 @@ get_shift_alg (shift_type, shift_mode, count, assembler_p,\n \t  switch (shift_type)\n \t    {\n \t    case SHIFT_ASHIFT:\n-\t      *assembler_p = \"mov.w\\t%f0,%e0\\n\\tsub.w\\t%f0,%f0\";\n-\t      *cc_valid_p = 0;\n+\t      info->special = \"mov.w\\t%f0,%e0\\n\\tsub.w\\t%f0,%f0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    case SHIFT_LSHIFTRT:\n-\t      *assembler_p = \"mov.w\\t%e0,%f0\\n\\tsub.w\\t%e0,%e0\";\n-\t      *cc_valid_p = 0;\n+\t      info->special = \"mov.w\\t%e0,%f0\\n\\tsub.w\\t%e0,%e0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    case SHIFT_ASHIFTRT:\n \t      if (TARGET_H8300)\n-\t\t*assembler_p = \"mov.w\\t%e0,%f0\\n\\tshll\\t%z0\\n\\tsubx\\t%z0,%z0\\n\\tmov.b\\t%z0,%y0\";\n+\t\tinfo->special = \"mov.w\\t%e0,%f0\\n\\tshll\\t%z0\\n\\tsubx\\t%z0,%z0\\n\\tmov.b\\t%z0,%y0\";\n \t      else\n-\t\t*assembler_p = \"mov.w\\t%e0,%f0\\n\\texts.l\\t%S0\";\n-\t      *cc_valid_p = 0;\n+\t\tinfo->special = \"mov.w\\t%e0,%f0\\n\\texts.l\\t%S0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    }\n \t}\n@@ -2301,16 +2320,16 @@ get_shift_alg (shift_type, shift_mode, count, assembler_p,\n \t  switch (shift_type)\n \t    {\n \t    case SHIFT_ASHIFT:\n-\t      *assembler_p = \"mov.w\\t%f0,%e0\\n\\tsub.w\\t%f0,%f0\\n\\tshll.l\\t%S0\";\n-\t      *cc_valid_p = 0;\n+\t      info->special = \"mov.w\\t%f0,%e0\\n\\tsub.w\\t%f0,%f0\\n\\tshll.l\\t%S0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    case SHIFT_LSHIFTRT:\n-\t      *assembler_p = \"mov.w\\t%e0,%f0\\n\\tsub.w\\t%e0,%e0\\n\\tshlr.l\\t%S0\";\n-\t      *cc_valid_p = 0;\n+\t      info->special = \"mov.w\\t%e0,%f0\\n\\tsub.w\\t%e0,%e0\\n\\tshlr.l\\t%S0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    case SHIFT_ASHIFTRT:\n-\t      *assembler_p = \"mov.w\\t%e0,%f0\\n\\texts.l\\t%S0\\n\\tshar.l\\t%S0\";\n-\t      *cc_valid_p = 0;\n+\t      info->special = \"mov.w\\t%e0,%f0\\n\\texts.l\\t%S0\\n\\tshar.l\\t%S0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    }\n \t}\n@@ -2320,24 +2339,24 @@ get_shift_alg (shift_type, shift_mode, count, assembler_p,\n \t    {\n \t    case SHIFT_ASHIFT:\n \t      if (TARGET_H8300S)\n-\t\t*assembler_p = \"mov.w\\t%f0,%e0\\n\\tsub.w\\t%f0,%f0\\n\\tshll.l\\t#2,%S0\";\n+\t\tinfo->special = \"mov.w\\t%f0,%e0\\n\\tsub.w\\t%f0,%f0\\n\\tshll.l\\t#2,%S0\";\n \t      else\n-\t\t*assembler_p = \"mov.w\\t%f0,%e0\\n\\tsub.w\\t%f0,%f0\\n\\tshll.l\\t%S0\\n\\tshll.l\\t%S0\";\n-\t      *cc_valid_p = 0;\n+\t\tinfo->special = \"mov.w\\t%f0,%e0\\n\\tsub.w\\t%f0,%f0\\n\\tshll.l\\t%S0\\n\\tshll.l\\t%S0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    case SHIFT_LSHIFTRT:\n \t      if (TARGET_H8300S)\n-\t\t*assembler_p = \"mov.w\\t%e0,%f0\\n\\tsub.w\\t%e0,%e0\\n\\tshlr.l\\t#2,%S0\";\n+\t\tinfo->special = \"mov.w\\t%e0,%f0\\n\\tsub.w\\t%e0,%e0\\n\\tshlr.l\\t#2,%S0\";\n \t      else\n-\t\t*assembler_p = \"mov.w\\t%e0,%f0\\n\\tsub.w\\t%e0,%e0\\n\\tshlr.l\\t%S0\\n\\tshlr.l\\t%S0\";\n-\t      *cc_valid_p = 0;\n+\t\tinfo->special = \"mov.w\\t%e0,%f0\\n\\tsub.w\\t%e0,%e0\\n\\tshlr.l\\t%S0\\n\\tshlr.l\\t%S0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    case SHIFT_ASHIFTRT:\n \t      if (TARGET_H8300S)\n-\t\t*assembler_p = \"mov.w\\t%e0,%f0\\n\\texts.l\\t%S0\\n\\tshar.l\\t#2,%S0\";\n+\t\tinfo->special = \"mov.w\\t%e0,%f0\\n\\texts.l\\t%S0\\n\\tshar.l\\t#2,%S0\";\n \t      else\n-\t\t*assembler_p = \"mov.w\\t%e0,%f0\\n\\texts.l\\t%S0\\n\\tshar.l\\t%S0\\n\\tshar.l\\t%S0\";\n-\t      *cc_valid_p = 0;\n+\t\tinfo->special = \"mov.w\\t%e0,%f0\\n\\texts.l\\t%S0\\n\\tshar.l\\t%S0\\n\\tshar.l\\t%S0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    }\n \t}\n@@ -2347,24 +2366,24 @@ get_shift_alg (shift_type, shift_mode, count, assembler_p,\n \t    {\n \t    case SHIFT_ASHIFT:\n \t      if (TARGET_H8300S)\n-\t\t*assembler_p = \"mov.w\\t%f0,%e0\\n\\tsub.w\\t%f0,%f0\\n\\tshll.l\\t#2,%S0\\n\\tshll.l\\t%S0\";\n+\t\tinfo->special = \"mov.w\\t%f0,%e0\\n\\tsub.w\\t%f0,%f0\\n\\tshll.l\\t#2,%S0\\n\\tshll.l\\t%S0\";\n \t      else\n-\t\t*assembler_p = \"mov.w\\t%f0,%e0\\n\\tsub.w\\t%f0,%f0\\n\\tshll.l\\t%S0\\n\\tshll.l\\t%S0\\n\\tshll.l\\t%S0\";\n-\t      *cc_valid_p = 0;\n+\t\tinfo->special = \"mov.w\\t%f0,%e0\\n\\tsub.w\\t%f0,%f0\\n\\tshll.l\\t%S0\\n\\tshll.l\\t%S0\\n\\tshll.l\\t%S0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    case SHIFT_LSHIFTRT:\n \t      if (TARGET_H8300S)\n-\t\t*assembler_p = \"mov.w\\t%e0,%f0\\n\\tsub.w\\t%e0,%e0\\n\\tshlr.l\\t#2,%S0\\n\\tshlr.l\\t%S0\";\n+\t\tinfo->special = \"mov.w\\t%e0,%f0\\n\\tsub.w\\t%e0,%e0\\n\\tshlr.l\\t#2,%S0\\n\\tshlr.l\\t%S0\";\n \t      else\n-\t\t*assembler_p = \"mov.w\\t%e0,%f0\\n\\tsub.w\\t%e0,%e0\\n\\tshlr.l\\t%S0\\n\\tshlr.l\\t%S0\\n\\tshlr.l\\t%S0\";\n-\t      *cc_valid_p = 0;\n+\t\tinfo->special = \"mov.w\\t%e0,%f0\\n\\tsub.w\\t%e0,%e0\\n\\tshlr.l\\t%S0\\n\\tshlr.l\\t%S0\\n\\tshlr.l\\t%S0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    case SHIFT_ASHIFTRT:\n \t      if (TARGET_H8300S)\n-\t\t*assembler_p = \"mov.w\\t%e0,%f0\\n\\texts.l\\t%S0\\n\\tshar.l\\t#2,%S0\\n\\tshar.l\\t%S0\";\n+\t\tinfo->special = \"mov.w\\t%e0,%f0\\n\\texts.l\\t%S0\\n\\tshar.l\\t#2,%S0\\n\\tshar.l\\t%S0\";\n \t      else\n-\t\t*assembler_p = \"mov.w\\t%e0,%f0\\n\\texts.l\\t%S0\\n\\tshar.l\\t%S0\\n\\tshar.l\\t%S0\\n\\tshar.l\\t%S0\";\n-\t      *cc_valid_p = 0;\n+\t\tinfo->special = \"mov.w\\t%e0,%f0\\n\\texts.l\\t%S0\\n\\tshar.l\\t%S0\\n\\tshar.l\\t%S0\\n\\tshar.l\\t%S0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    }\n \t}\n@@ -2373,16 +2392,16 @@ get_shift_alg (shift_type, shift_mode, count, assembler_p,\n \t  switch (shift_type)\n \t    {\n \t    case SHIFT_ASHIFT:\n-\t      *assembler_p = \"mov.w\\t%f0,%e0\\n\\tsub.w\\t%f0,%f0\\n\\tshll.l\\t#2,%S0\\n\\tshll.l\\t#2,%S0\";\n-\t      *cc_valid_p = 0;\n+\t      info->special = \"mov.w\\t%f0,%e0\\n\\tsub.w\\t%f0,%f0\\n\\tshll.l\\t#2,%S0\\n\\tshll.l\\t#2,%S0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    case SHIFT_LSHIFTRT:\n-\t      *assembler_p = \"mov.w\\t%e0,%f0\\n\\tsub.w\\t%e0,%e0\\n\\tshlr.l\\t#2,%S0\\n\\tshlr.l\\t#2,%S0\";\n-\t      *cc_valid_p = 0;\n+\t      info->special = \"mov.w\\t%e0,%f0\\n\\tsub.w\\t%e0,%e0\\n\\tshlr.l\\t#2,%S0\\n\\tshlr.l\\t#2,%S0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    case SHIFT_ASHIFTRT:\n-\t      *assembler_p = \"mov.w\\t%e0,%f0\\n\\texts.l\\t%S0\\n\\tshar.l\\t#2,%S0\\n\\tshar.l\\t#2,%S0\";\n-\t      *cc_valid_p = 0;\n+\t      info->special = \"mov.w\\t%e0,%f0\\n\\texts.l\\t%S0\\n\\tshar.l\\t#2,%S0\\n\\tshar.l\\t#2,%S0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    }\n \t}\n@@ -2391,16 +2410,16 @@ get_shift_alg (shift_type, shift_mode, count, assembler_p,\n \t  switch (shift_type)\n \t    {\n \t    case SHIFT_ASHIFT:\n-\t      *assembler_p = \"mov.b\\t%s0,%t0\\n\\tsub.b\\t%s0,%s0\\n\\tmov.w\\t%f0,%e0\\n\\tsub.w\\t%f0,%f0\";\n-\t      *cc_valid_p = 0;\n+\t      info->special = \"mov.b\\t%s0,%t0\\n\\tsub.b\\t%s0,%s0\\n\\tmov.w\\t%f0,%e0\\n\\tsub.w\\t%f0,%f0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    case SHIFT_LSHIFTRT:\n-\t      *assembler_p = \"mov.w\\t%e0,%f0\\n\\tmov.b\\t%t0,%s0\\n\\textu.w\\t%f0\\n\\textu.l\\t%S0\";\n-\t      *cc_valid_p = 0;\n+\t      info->special = \"mov.w\\t%e0,%f0\\n\\tmov.b\\t%t0,%s0\\n\\textu.w\\t%f0\\n\\textu.l\\t%S0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    case SHIFT_ASHIFTRT:\n-\t      *assembler_p = \"mov.w\\t%e0,%f0\\n\\tmov.b\\t%t0,%s0\\n\\texts.w\\t%f0\\n\\texts.l\\t%S0\";\n-\t      *cc_valid_p = 0;\n+\t      info->special = \"mov.w\\t%e0,%f0\\n\\tmov.b\\t%t0,%s0\\n\\texts.w\\t%f0\\n\\texts.l\\t%S0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    }\n \t}\n@@ -2412,12 +2431,12 @@ get_shift_alg (shift_type, shift_mode, count, assembler_p,\n \t    }\n \t  else\n \t    {\n-\t      *assembler_p = rotate_one[cpu_type][shift_type][shift_mode];\n+\t      info->shift1 = rotate_one[cpu_type][shift_type][shift_mode];\n \t      if (TARGET_H8300S)\n-\t\t*assembler2_p = rotate_two[shift_type][shift_mode];\n+\t\tinfo->shift2 = rotate_two[shift_type][shift_mode];\n \t      else\n-\t\t*assembler2_p = NULL;\n-\t      *cc_valid_p = 0;\n+\t\tinfo->shift2 = NULL;\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_ROT_AND;\n \t    }\n \t}\n@@ -2426,31 +2445,31 @@ get_shift_alg (shift_type, shift_mode, count, assembler_p,\n \t  if (shift_type == SHIFT_ASHIFTRT)\n \t    {\n \t      if (TARGET_H8300)\n-\t\t*assembler_p = \"shll\\t%z0\\n\\tsubx\\t%w0,%w0\\n\\tmov.b\\t%w0,%x0\\n\\tmov.w\\t%f0,%e0\";\n+\t\tinfo->special = \"shll\\t%z0\\n\\tsubx\\t%w0,%w0\\n\\tmov.b\\t%w0,%x0\\n\\tmov.w\\t%f0,%e0\";\n \t      else\n-\t\t*assembler_p = \"shll\\t%e0\\n\\tsubx\\t%w0,%w0\\n\\tmov.b\\t%w0,%x0\\n\\tmov.w\\t%f0,%e0\";\n-\t      *cc_valid_p = 0;\n+\t\tinfo->special = \"shll\\t%e0\\n\\tsubx\\t%w0,%w0\\n\\tmov.b\\t%w0,%x0\\n\\tmov.w\\t%f0,%e0\";\n+\t      info->cc_valid_p = 0;\n \t      return SHIFT_SPECIAL;\n \t    }\n \t  else\n \t    {\n \t      if (TARGET_H8300)\n \t\t{\n \t\t  if (shift_type == SHIFT_ASHIFT)\n-\t\t    *assembler_p = \"sub.w\\t%e0,%e0\\n\\tshlr\\t%w0\\n\\tmov.w\\t%e0,%f0\\n\\trotxr\\t%z0\";\n+\t\t    info->special = \"sub.w\\t%e0,%e0\\n\\tshlr\\t%w0\\n\\tmov.w\\t%e0,%f0\\n\\trotxr\\t%z0\";\n \t\t  else\n-\t\t    *assembler_p = \"sub.w\\t%f0,%f0\\n\\tshll\\t%z0\\n\\tmov.w\\t%f0,%e0\\n\\trotxl\\t%w0\";\n-\t\t  *cc_valid_p = 0;\n+\t\t    info->special = \"sub.w\\t%f0,%f0\\n\\tshll\\t%z0\\n\\tmov.w\\t%f0,%e0\\n\\trotxl\\t%w0\";\n+\t\t  info->cc_valid_p = 0;\n \t\t  return SHIFT_SPECIAL;\n \t\t}\n \t      else\n \t\t{\n-\t\t  *assembler_p = rotate_one[cpu_type][shift_type][shift_mode];\n+\t\t  info->shift1 = rotate_one[cpu_type][shift_type][shift_mode];\n \t\t  if (TARGET_H8300S)\n-\t\t    *assembler2_p = rotate_two[shift_type][shift_mode];\n+\t\t    info->shift2 = rotate_two[shift_type][shift_mode];\n \t\t  else\n-\t\t    *assembler2_p = NULL;\n-\t\t  *cc_valid_p = 0;\n+\t\t    info->shift2 = NULL;\n+\t\t  info->cc_valid_p = 0;\n \t\t  return SHIFT_ROT_AND;\n \t\t}\n \t    }\n@@ -2473,14 +2492,12 @@ emit_a_shift (insn, operands)\n      rtx *operands;\n {\n   static int loopend_lab;\n-  const char *assembler;\n-  const char *assembler2;\n-  int cc_valid;\n   rtx shift = operands[3];\n   enum machine_mode mode = GET_MODE (shift);\n   enum rtx_code code = GET_CODE (shift);\n   enum shift_type shift_type;\n   enum shift_mode shift_mode;\n+  struct shift_info info;\n \n   loopend_lab++;\n \n@@ -2521,11 +2538,10 @@ emit_a_shift (insn, operands)\n       fprintf (asm_out_file, \"\\tble\t.Lle%d\\n\", loopend_lab);\n \n       /* Get the assembler code to do one shift.  */\n-      get_shift_alg (shift_type, shift_mode, 1, &assembler,\n-\t\t     &assembler2, &cc_valid);\n+      get_shift_alg (shift_type, shift_mode, 1, &info);\n \n       fprintf (asm_out_file, \".Llt%d:\\n\", loopend_lab);\n-      output_asm_insn (assembler, operands);\n+      output_asm_insn (info.shift1, operands);\n       output_asm_insn (\"add\t#0xff,%X4\", operands);\n       fprintf (asm_out_file, \"\\tbne\t.Llt%d\\n\", loopend_lab);\n       fprintf (asm_out_file, \".Lle%d:\\n\", loopend_lab);\n@@ -2546,31 +2562,30 @@ emit_a_shift (insn, operands)\n       else if ((unsigned int) n > GET_MODE_BITSIZE (mode))\n \tn = GET_MODE_BITSIZE (mode);\n \n-      alg = get_shift_alg (shift_type, shift_mode, n, &assembler,\n-\t\t\t   &assembler2, &cc_valid);\n+      alg = get_shift_alg (shift_type, shift_mode, n, &info);\n \n       switch (alg)\n \t{\n \tcase SHIFT_INLINE:\n \t  /* Emit two bit shifts first.  */\n-\t  while (n > 1 && assembler2 != NULL)\n+\t  while (n > 1 && info.shift2 != NULL)\n \t    {\n-\t      output_asm_insn (assembler2, operands);\n+\t      output_asm_insn (info.shift2, operands);\n \t      n -= 2;\n \t    }\n \n \t  /* Now emit one bit shifts for any residual.  */\n \t  while (n > 0)\n \t    {\n-\t      output_asm_insn (assembler, operands);\n+\t      output_asm_insn (info.shift1, operands);\n \t      n -= 1;\n \t    }\n \n \t  /* Keep track of CC.  */\n-\t  if (cc_valid)\n+\t  if (info.cc_valid_p)\n \t    {\n \t      cc_status.value1 = operands[0];\n-\t      cc_status.flags |= cc_valid;\n+\t      cc_status.flags |= info.cc_valid_p;\n \t    }\n \t  return \"\";\n \n@@ -2584,20 +2599,20 @@ emit_a_shift (insn, operands)\n \n \t    /* Not all possibilities of rotate are supported.  They shouldn't\n \t       be generated, but let's watch for 'em.  */\n-\t    if (assembler == 0)\n+\t    if (info.shift1 == 0)\n \t      abort ();\n \n \t    /* Emit two bit rotates first.  */\n-\t    while (m > 1 && assembler2 != NULL)\n+\t    while (m > 1 && info.shift2 != NULL)\n \t      {\n-\t\toutput_asm_insn (assembler2, operands);\n+\t\toutput_asm_insn (info.shift2, operands);\n \t\tm -= 2;\n \t      }\n \n \t    /* Now single bit rotates for any residual.  */\n \t    while (m > 0)\n \t      {\n-\t\toutput_asm_insn (assembler, operands);\n+\t\toutput_asm_insn (info.shift1, operands);\n \t\tm -= 1;\n \t      }\n \n@@ -2634,29 +2649,29 @@ emit_a_shift (insn, operands)\n \t  }\n \n \tcase SHIFT_SPECIAL:\n-\t  output_asm_insn (assembler, operands);\n+\t  output_asm_insn (info.special, operands);\n \t  return \"\";\n \n \tcase SHIFT_LOOP:\n \t  /* A loop to shift by a \"large\" constant value.\n \t     If we have shift-by-2 insns, use them.  */\n-\t  if (assembler2 != NULL)\n+\t  if (info.shift2 != NULL)\n \t    {\n \t      fprintf (asm_out_file, \"\\tmov.b\t#%d,%sl\\n\", n / 2,\n \t\t       names_big[REGNO (operands[4])]);\n \t      fprintf (asm_out_file, \".Llt%d:\\n\", loopend_lab);\n-\t      output_asm_insn (assembler2, operands);\n+\t      output_asm_insn (info.shift2, operands);\n \t      output_asm_insn (\"add\t#0xff,%X4\", operands);\n \t      fprintf (asm_out_file, \"\\tbne\t.Llt%d\\n\", loopend_lab);\n \t      if (n % 2)\n-\t\toutput_asm_insn (assembler, operands);\n+\t\toutput_asm_insn (info.shift1, operands);\n \t    }\n \t  else\n \t    {\n \t      fprintf (asm_out_file, \"\\tmov.b\t#%d,%sl\\n\", n,\n \t\t       names_big[REGNO (operands[4])]);\n \t      fprintf (asm_out_file, \".Llt%d:\\n\", loopend_lab);\n-\t      output_asm_insn (assembler, operands);\n+\t      output_asm_insn (info.shift1, operands);\n \t      output_asm_insn (\"add\t#0xff,%X4\", operands);\n \t      fprintf (asm_out_file, \"\\tbne\t.Llt%d\\n\", loopend_lab);\n \t    }"}]}