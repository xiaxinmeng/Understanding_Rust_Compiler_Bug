{"sha": "76b6ddbfe234ed3d68dfaaadfc85a86119a3d0af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZiNmRkYmZlMjM0ZWQzZDY4ZGZhYWFkZmM4NWE4NjExOWEzZDBhZg==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2015-11-24T11:46:10Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-11-24T11:46:10Z"}, "message": "destroy values as well as keys when removing them from hash maps\n\ngcc/ChangeLog:\n\n2015-11-24  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* hash-map-traits.h (simple_hashmap_traits ::remove): call\n\tdestructors on values that are being removed.\n\t* mem-stats.h (hash_map): Pass type of values to\n\tsimple_hashmap_traits.\n\t* tree-sra.c (sra_deinitialize): Remove work around for hash\n\tmaps not destructing values.\n\t* genmatch.c (sinfo_hashmap_traits): Adjust.\n\t* tree-ssa-uncprop.c (val_ssa_equiv_hash_traits): Likewise.\n\nFrom-SVN: r230801", "tree": {"sha": "58070dd13c6248487e3ae1a088186d0901249d7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58070dd13c6248487e3ae1a088186d0901249d7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76b6ddbfe234ed3d68dfaaadfc85a86119a3d0af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76b6ddbfe234ed3d68dfaaadfc85a86119a3d0af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76b6ddbfe234ed3d68dfaaadfc85a86119a3d0af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76b6ddbfe234ed3d68dfaaadfc85a86119a3d0af/comments", "author": null, "committer": null, "parents": [{"sha": "cfa55545f9aff809f267babb110b1037e164a1cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfa55545f9aff809f267babb110b1037e164a1cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfa55545f9aff809f267babb110b1037e164a1cd"}], "stats": {"total": 58, "additions": 34, "deletions": 24}, "files": [{"sha": "452f724765fb3ffe9d4763095f9b5dd8b5a77641", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76b6ddbfe234ed3d68dfaaadfc85a86119a3d0af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76b6ddbfe234ed3d68dfaaadfc85a86119a3d0af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76b6ddbfe234ed3d68dfaaadfc85a86119a3d0af", "patch": "@@ -1,3 +1,14 @@\n+2015-11-24  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* hash-map-traits.h (simple_hashmap_traits ::remove): call\n+\tdestructors on values that are being removed.\n+\t* mem-stats.h (hash_map): Pass type of values to\n+\tsimple_hashmap_traits.\n+\t* tree-sra.c (sra_deinitialize): Remove work around for hash\n+\tmaps not destructing values.\n+\t* genmatch.c (sinfo_hashmap_traits): Adjust.\n+\t* tree-ssa-uncprop.c (val_ssa_equiv_hash_traits): Likewise.\n+\n 2015-11-24  Richard Biener  <rguenther@suse.de>\n             Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n "}, {"sha": "76c8f1fa1e260e1f550d3d541e959d51947aa013", "filename": "gcc/genmatch.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76b6ddbfe234ed3d68dfaaadfc85a86119a3d0af/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76b6ddbfe234ed3d68dfaaadfc85a86119a3d0af/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=76b6ddbfe234ed3d68dfaaadfc85a86119a3d0af", "patch": "@@ -1397,7 +1397,8 @@ struct sinfo\n   unsigned cnt;\n };\n \n-struct sinfo_hashmap_traits : simple_hashmap_traits <pointer_hash <dt_simplify> >\n+struct sinfo_hashmap_traits : simple_hashmap_traits<pointer_hash<dt_simplify>,\n+\t\t\t\t\t\t    sinfo *>\n {\n   static inline hashval_t hash (const key_type &);\n   static inline bool equal_keys (const key_type &, const key_type &);"}, {"sha": "773ac1b3a9e178c5a1ed8611fa2b7d27c05fd77b", "filename": "gcc/hash-map-traits.h", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76b6ddbfe234ed3d68dfaaadfc85a86119a3d0af/gcc%2Fhash-map-traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76b6ddbfe234ed3d68dfaaadfc85a86119a3d0af/gcc%2Fhash-map-traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-map-traits.h?ref=76b6ddbfe234ed3d68dfaaadfc85a86119a3d0af", "patch": "@@ -28,7 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n /* Implement hash_map traits for a key with hash traits H.  Empty and\n    deleted map entries are represented as empty and deleted keys.  */\n \n-template <typename H>\n+template <typename H, typename Value>\n struct simple_hashmap_traits\n {\n   typedef typename H::value_type key_type;\n@@ -41,56 +41,58 @@ struct simple_hashmap_traits\n   template <typename T> static inline void mark_deleted (T &);\n };\n \n-template <typename H>\n+template <typename H, typename Value>\n inline hashval_t\n-simple_hashmap_traits <H>::hash (const key_type &h)\n+simple_hashmap_traits <H, Value>::hash (const key_type &h)\n {\n   return H::hash (h);\n }\n \n-template <typename H>\n+template <typename H, typename Value>\n inline bool\n-simple_hashmap_traits <H>::equal_keys (const key_type &k1, const key_type &k2)\n+simple_hashmap_traits <H, Value>::equal_keys (const key_type &k1,\n+\t\t\t\t\t      const key_type &k2)\n {\n   return H::equal (k1, k2);\n }\n \n-template <typename H>\n+template <typename H, typename Value>\n template <typename T>\n inline void\n-simple_hashmap_traits <H>::remove (T &entry)\n+simple_hashmap_traits <H, Value>::remove (T &entry)\n {\n   H::remove (entry.m_key);\n+  entry.m_value.~Value ();\n }\n \n-template <typename H>\n+template <typename H, typename Value>\n template <typename T>\n inline bool\n-simple_hashmap_traits <H>::is_empty (const T &entry)\n+simple_hashmap_traits <H, Value>::is_empty (const T &entry)\n {\n   return H::is_empty (entry.m_key);\n }\n \n-template <typename H>\n+template <typename H, typename Value>\n template <typename T>\n inline bool\n-simple_hashmap_traits <H>::is_deleted (const T &entry)\n+simple_hashmap_traits <H, Value>::is_deleted (const T &entry)\n {\n   return H::is_deleted (entry.m_key);\n }\n \n-template <typename H>\n+template <typename H, typename Value>\n template <typename T>\n inline void\n-simple_hashmap_traits <H>::mark_empty (T &entry)\n+simple_hashmap_traits <H, Value>::mark_empty (T &entry)\n {\n   H::mark_empty (entry.m_key);\n }\n \n-template <typename H>\n+template <typename H, typename Value>\n template <typename T>\n inline void\n-simple_hashmap_traits <H>::mark_deleted (T &entry)\n+simple_hashmap_traits <H, Value>::mark_deleted (T &entry)\n {\n   H::mark_deleted (entry.m_key);\n }"}, {"sha": "2c68ca752ebd5f712a64346dacd3196b6987676c", "filename": "gcc/mem-stats.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76b6ddbfe234ed3d68dfaaadfc85a86119a3d0af/gcc%2Fmem-stats.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76b6ddbfe234ed3d68dfaaadfc85a86119a3d0af/gcc%2Fmem-stats.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmem-stats.h?ref=76b6ddbfe234ed3d68dfaaadfc85a86119a3d0af", "patch": "@@ -3,7 +3,8 @@\n \n /* Forward declaration.  */\n template<typename Key, typename Value,\n-\t typename Traits = simple_hashmap_traits<default_hash_traits<Key> > >\n+\t typename Traits = simple_hashmap_traits<default_hash_traits<Key>,\n+\t\t\t\t\t\t Value> >\n class hash_map;\n \n #define LOCATION_LINE_EXTRA_SPACE 30"}, {"sha": "c4fea5b0c4d0e2e2c281ec7e9db310acbb17410f", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76b6ddbfe234ed3d68dfaaadfc85a86119a3d0af/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76b6ddbfe234ed3d68dfaaadfc85a86119a3d0af/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=76b6ddbfe234ed3d68dfaaadfc85a86119a3d0af", "patch": "@@ -674,12 +674,6 @@ sra_deinitialize (void)\n   assign_link_pool.release ();\n   obstack_free (&name_obstack, NULL);\n \n-  /* TODO: hash_map does not support traits that can release\n-     value type of the hash_map.  */\n-  for (hash_map<tree, auto_vec<access_p> >::iterator it =\n-       base_access_vec->begin (); it != base_access_vec->end (); ++it)\n-    (*it).second.release ();\n-\n   delete base_access_vec;\n }\n "}, {"sha": "23b4ca2a008ffb0330b2b9a6459a868f90524a20", "filename": "gcc/tree-ssa-uncprop.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76b6ddbfe234ed3d68dfaaadfc85a86119a3d0af/gcc%2Ftree-ssa-uncprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76b6ddbfe234ed3d68dfaaadfc85a86119a3d0af/gcc%2Ftree-ssa-uncprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uncprop.c?ref=76b6ddbfe234ed3d68dfaaadfc85a86119a3d0af", "patch": "@@ -277,7 +277,8 @@ struct equiv_hash_elt\n \n /* Value to ssa name equivalence hashtable helpers.  */\n \n-struct val_ssa_equiv_hash_traits : simple_hashmap_traits <tree_operand_hash>\n+struct val_ssa_equiv_hash_traits : simple_hashmap_traits <tree_operand_hash,\n+\t\t\t\t\t\t\t  vec<tree> >\n {\n   template<typename T> static inline void remove (T &);\n };"}]}