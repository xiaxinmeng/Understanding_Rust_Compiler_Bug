{"sha": "e6416e4323f346968533de404518b2aaf186ead1", "node_id": "C_kwDOANBUbNoAKGU2NDE2ZTQzMjNmMzQ2OTY4NTMzZGU0MDQ1MThiMmFhZjE4NmVhZDE", "commit": {"author": {"name": "Liao Shihua", "email": "shihua@iscas.ac.cn", "date": "2023-02-20T07:01:24Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-03-05T17:05:08Z"}, "message": "RISC-V: Implement ZKNH extension\n\nThis patch supports Zknh extension.\nIt includes instruction's machine description and built-in funtions.\n\ngcc/ChangeLog:\n\n\t* config/riscv/crypto.md (riscv_sha256sig0_<mode>): Add ZKNH's instructions.\n\t(riscv_sha256sig1_<mode>): New.\n\t(riscv_sha256sum0_<mode>): New.\n\t(riscv_sha256sum1_<mode>): New.\n\t(riscv_sha512sig0h): New.\n\t(riscv_sha512sig0l): New.\n\t(riscv_sha512sig1h): New.\n\t(riscv_sha512sig1l): New.\n\t(riscv_sha512sum0r): New.\n\t(riscv_sha512sum1r): New.\n\t(riscv_sha512sig0): New.\n\t(riscv_sha512sig1): New.\n\t(riscv_sha512sum0): New.\n\t(riscv_sha512sum1): New.\n\t* config/riscv/riscv-builtins.cc (AVAIL): And ZKNH's AVAIL.\n\t* config/riscv/riscv-scalar-crypto.def (RISCV_BUILTIN): And ZKNH's\n\tbuilt-in functions.\n\t(DIRECT_BUILTIN): Add new.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/zknh-sha256.c: New test.\n\t* gcc.target/riscv/zknh-sha512-32.c: New test.\n\t* gcc.target/riscv/zknh-sha512-64.c: New test.\n\nCo-Authored-By: SiYu Wu <siyu@isrc.iscas.ac.cn>", "tree": {"sha": "a43b08d0e360000cbc44d433b38978d5425d047a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a43b08d0e360000cbc44d433b38978d5425d047a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6416e4323f346968533de404518b2aaf186ead1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6416e4323f346968533de404518b2aaf186ead1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6416e4323f346968533de404518b2aaf186ead1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6416e4323f346968533de404518b2aaf186ead1/comments", "author": {"login": "Liaoshihua", "id": 43035022, "node_id": "MDQ6VXNlcjQzMDM1MDIy", "avatar_url": "https://avatars.githubusercontent.com/u/43035022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Liaoshihua", "html_url": "https://github.com/Liaoshihua", "followers_url": "https://api.github.com/users/Liaoshihua/followers", "following_url": "https://api.github.com/users/Liaoshihua/following{/other_user}", "gists_url": "https://api.github.com/users/Liaoshihua/gists{/gist_id}", "starred_url": "https://api.github.com/users/Liaoshihua/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Liaoshihua/subscriptions", "organizations_url": "https://api.github.com/users/Liaoshihua/orgs", "repos_url": "https://api.github.com/users/Liaoshihua/repos", "events_url": "https://api.github.com/users/Liaoshihua/events{/privacy}", "received_events_url": "https://api.github.com/users/Liaoshihua/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "072c558a0f181bec139d68b451e7aa4907dbc5ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/072c558a0f181bec139d68b451e7aa4907dbc5ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/072c558a0f181bec139d68b451e7aa4907dbc5ef"}], "stats": {"total": 263, "additions": 263, "deletions": 0}, "files": [{"sha": "17e7440c0b5078b4fd84654711e6d8c822be5728", "filename": "gcc/config/riscv/crypto.md", "status": "modified", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6416e4323f346968533de404518b2aaf186ead1/gcc%2Fconfig%2Friscv%2Fcrypto.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6416e4323f346968533de404518b2aaf186ead1/gcc%2Fconfig%2Friscv%2Fcrypto.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fcrypto.md?ref=e6416e4323f346968533de404518b2aaf186ead1", "patch": "@@ -48,6 +48,22 @@\n     UNSPEC_AES_ESM\n     UNSPEC_AES_ESI\n     UNSPEC_AES_ESMI\n+\n+    ;; Zknh unspecs\n+    UNSPEC_SHA_256_SIG0\n+    UNSPEC_SHA_256_SIG1\n+    UNSPEC_SHA_256_SUM0\n+    UNSPEC_SHA_256_SUM1\n+    UNSPEC_SHA_512_SIG0\n+    UNSPEC_SHA_512_SIG0H\n+    UNSPEC_SHA_512_SIG0L\n+    UNSPEC_SHA_512_SIG1\n+    UNSPEC_SHA_512_SIG1H\n+    UNSPEC_SHA_512_SIG1L\n+    UNSPEC_SHA_512_SUM0\n+    UNSPEC_SHA_512_SUM0R\n+    UNSPEC_SHA_512_SUM1\n+    UNSPEC_SHA_512_SUM1R\n ])\n \n ;; ZBKB extension\n@@ -247,3 +263,125 @@\n   \"TARGET_ZKNE && TARGET_64BIT\"\n   \"aes64esm\\t%0,%1,%2\"\n   [(set_attr \"type\" \"crypto\")])\n+\n+;; ZKNH - SHA256\n+\n+(define_insn \"riscv_sha256sig0_<mode>\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+        (unspec:X [(match_operand:X 1 \"register_operand\" \"r\")]\n+                  UNSPEC_SHA_256_SIG0))]\n+  \"TARGET_ZKNH\"\n+  \"sha256sig0\\t%0,%1\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+(define_insn \"riscv_sha256sig1_<mode>\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+        (unspec:X [(match_operand:X 1 \"register_operand\" \"r\")]\n+                  UNSPEC_SHA_256_SIG1))]\n+  \"TARGET_ZKNH\"\n+  \"sha256sig1\\t%0,%1\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+(define_insn \"riscv_sha256sum0_<mode>\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+        (unspec:X [(match_operand:X 1 \"register_operand\" \"r\")]\n+                  UNSPEC_SHA_256_SUM0))]\n+  \"TARGET_ZKNH\"\n+  \"sha256sum0\\t%0,%1\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+(define_insn \"riscv_sha256sum1_<mode>\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+        (unspec:X [(match_operand:X 1 \"register_operand\" \"r\")]\n+                  UNSPEC_SHA_256_SUM1))]\n+  \"TARGET_ZKNH\"\n+  \"sha256sum1\\t%0,%1\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+;; ZKNH - SHA512\n+\n+(define_insn \"riscv_sha512sig0h\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")\n+                   (match_operand:SI 2 \"register_operand\" \"r\")]\n+                   UNSPEC_SHA_512_SIG0H))]\n+  \"TARGET_ZKNH && !TARGET_64BIT\"\n+  \"sha512sig0h\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+(define_insn \"riscv_sha512sig0l\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")\n+                   (match_operand:SI 2 \"register_operand\" \"r\")]\n+                   UNSPEC_SHA_512_SIG0L))]\n+  \"TARGET_ZKNH && !TARGET_64BIT\"\n+  \"sha512sig0l\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+(define_insn \"riscv_sha512sig1h\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")\n+                   (match_operand:SI 2 \"register_operand\" \"r\")]\n+                   UNSPEC_SHA_512_SIG1H))]\n+  \"TARGET_ZKNH && !TARGET_64BIT\"\n+  \"sha512sig1h\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+(define_insn \"riscv_sha512sig1l\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")\n+                   (match_operand:SI 2 \"register_operand\" \"r\")]\n+                   UNSPEC_SHA_512_SIG1L))]\n+  \"TARGET_ZKNH && !TARGET_64BIT\"\n+  \"sha512sig1l\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+(define_insn \"riscv_sha512sum0r\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")\n+                   (match_operand:SI 2 \"register_operand\" \"r\")]\n+                   UNSPEC_SHA_512_SUM0R))]\n+  \"TARGET_ZKNH && !TARGET_64BIT\"\n+  \"sha512sum0r\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+(define_insn \"riscv_sha512sum1r\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")\n+                   (match_operand:SI 2 \"register_operand\" \"r\")]\n+                   UNSPEC_SHA_512_SUM1R))]\n+  \"TARGET_ZKNH && !TARGET_64BIT\"\n+  \"sha512sum1r\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+(define_insn \"riscv_sha512sig0\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")]\n+                   UNSPEC_SHA_512_SIG0))]\n+  \"TARGET_ZKNH && TARGET_64BIT\"\n+  \"sha512sig0\\t%0,%1\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+(define_insn \"riscv_sha512sig1\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")]\n+                   UNSPEC_SHA_512_SIG1))]\n+  \"TARGET_ZKNH && TARGET_64BIT\"\n+  \"sha512sig1\\t%0,%1\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+(define_insn \"riscv_sha512sum0\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")]\n+                   UNSPEC_SHA_512_SUM0))]\n+  \"TARGET_ZKNH && TARGET_64BIT\"\n+  \"sha512sum0\\t%0,%1\"\n+  [(set_attr \"type\" \"crypto\")])\n+\n+(define_insn \"riscv_sha512sum1\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")]\n+                   UNSPEC_SHA_512_SUM1))]\n+  \"TARGET_ZKNH && TARGET_64BIT\"\n+  \"sha512sum1\\t%0,%1\"\n+  [(set_attr \"type\" \"crypto\")])"}, {"sha": "ab5bd52ee7fef9506e4a6cf07c68e3d4a957edc3", "filename": "gcc/config/riscv/riscv-builtins.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6416e4323f346968533de404518b2aaf186ead1/gcc%2Fconfig%2Friscv%2Friscv-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6416e4323f346968533de404518b2aaf186ead1/gcc%2Fconfig%2Friscv%2Friscv-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-builtins.cc?ref=e6416e4323f346968533de404518b2aaf186ead1", "patch": "@@ -111,6 +111,8 @@ AVAIL (crypto_zknd64, TARGET_ZKND && TARGET_64BIT)\n AVAIL (crypto_zkne32, TARGET_ZKNE && !TARGET_64BIT)\n AVAIL (crypto_zkne64, TARGET_ZKNE && TARGET_64BIT)\n AVAIL (crypto_zkne_or_zknd, (TARGET_ZKNE || TARGET_ZKND) && TARGET_64BIT)\n+AVAIL (crypto_zknh32, TARGET_ZKNH && !TARGET_64BIT)\n+AVAIL (crypto_zknh64, TARGET_ZKNH && TARGET_64BIT)\n AVAIL (always,     (!0))\n \n /* Construct a riscv_builtin_description from the given arguments."}, {"sha": "d38aad122e5354b37d3fd2b80027de54c3403a33", "filename": "gcc/config/riscv/riscv-scalar-crypto.def", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6416e4323f346968533de404518b2aaf186ead1/gcc%2Fconfig%2Friscv%2Friscv-scalar-crypto.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6416e4323f346968533de404518b2aaf186ead1/gcc%2Fconfig%2Friscv%2Friscv-scalar-crypto.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-scalar-crypto.def?ref=e6416e4323f346968533de404518b2aaf186ead1", "patch": "@@ -58,3 +58,25 @@ DIRECT_BUILTIN (aes32esi, RISCV_SI_FTYPE_SI_SI_SI, crypto_zkne32),\n DIRECT_BUILTIN (aes32esmi, RISCV_SI_FTYPE_SI_SI_SI, crypto_zkne32),\n DIRECT_BUILTIN (aes64es, RISCV_DI_FTYPE_DI_DI, crypto_zkne64),\n DIRECT_BUILTIN (aes64esm, RISCV_DI_FTYPE_DI_DI, crypto_zkne64),\n+\n+// ZKNH\n+RISCV_BUILTIN (sha256sig0_si, \"sha256sig0\", RISCV_BUILTIN_DIRECT, RISCV_SI_FTYPE_SI, crypto_zknh32),\n+RISCV_BUILTIN (sha256sig0_di, \"sha256sig0\", RISCV_BUILTIN_DIRECT, RISCV_DI_FTYPE_DI, crypto_zknh64),\n+RISCV_BUILTIN (sha256sig1_si, \"sha256sig1\", RISCV_BUILTIN_DIRECT, RISCV_SI_FTYPE_SI, crypto_zknh32),\n+RISCV_BUILTIN (sha256sig1_di, \"sha256sig1\", RISCV_BUILTIN_DIRECT, RISCV_DI_FTYPE_DI, crypto_zknh64),\n+RISCV_BUILTIN (sha256sum0_si, \"sha256sum0\", RISCV_BUILTIN_DIRECT, RISCV_SI_FTYPE_SI, crypto_zknh32),\n+RISCV_BUILTIN (sha256sum0_di, \"sha256sum0\", RISCV_BUILTIN_DIRECT, RISCV_DI_FTYPE_DI, crypto_zknh64),\n+RISCV_BUILTIN (sha256sum1_si, \"sha256sum1\", RISCV_BUILTIN_DIRECT, RISCV_SI_FTYPE_SI, crypto_zknh32),\n+RISCV_BUILTIN (sha256sum1_di, \"sha256sum1\", RISCV_BUILTIN_DIRECT, RISCV_DI_FTYPE_DI, crypto_zknh64),\n+\n+DIRECT_BUILTIN (sha512sig0h, RISCV_SI_FTYPE_SI_SI, crypto_zknh32),\n+DIRECT_BUILTIN (sha512sig0l, RISCV_SI_FTYPE_SI_SI, crypto_zknh32),\n+DIRECT_BUILTIN (sha512sig1h, RISCV_SI_FTYPE_SI_SI, crypto_zknh32),\n+DIRECT_BUILTIN (sha512sig1l, RISCV_SI_FTYPE_SI_SI, crypto_zknh32),\n+DIRECT_BUILTIN (sha512sum0r, RISCV_SI_FTYPE_SI_SI, crypto_zknh32),\n+DIRECT_BUILTIN (sha512sum1r, RISCV_SI_FTYPE_SI_SI, crypto_zknh32),\n+\n+DIRECT_BUILTIN (sha512sig0, RISCV_DI_FTYPE_DI, crypto_zknh64),\n+DIRECT_BUILTIN (sha512sig1, RISCV_DI_FTYPE_DI, crypto_zknh64),\n+DIRECT_BUILTIN (sha512sum0, RISCV_DI_FTYPE_DI, crypto_zknh64),\n+DIRECT_BUILTIN (sha512sum1, RISCV_DI_FTYPE_DI, crypto_zknh64),"}, {"sha": "54329aa6af2e40977dbfa56463e9cfc90999abc2", "filename": "gcc/testsuite/gcc.target/riscv/zknh-sha256.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6416e4323f346968533de404518b2aaf186ead1/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzknh-sha256.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6416e4323f346968533de404518b2aaf186ead1/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzknh-sha256.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzknh-sha256.c?ref=e6416e4323f346968533de404518b2aaf186ead1", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=rv64gc_zknh -mabi=lp64\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-g\" \"-flto\"} } */\n+\n+long foo1(long rs1)\n+{\n+    return __builtin_riscv_sha256sig0(rs1);\n+}\n+\n+long foo2(long rs1)\n+{\n+    return __builtin_riscv_sha256sig1(rs1);\n+}\n+\n+long foo3(long rs1)\n+{\n+    return __builtin_riscv_sha256sum0(rs1);\n+}\n+\n+long foo4(long rs1)\n+{\n+    return __builtin_riscv_sha256sum1(rs1);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sha256sig0\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sha256sig1\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sha256sum0\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sha256sum1\" 1 } } */"}, {"sha": "4ebc470f8ab7300d5d5c94c621a0c73ceebea0ba", "filename": "gcc/testsuite/gcc.target/riscv/zknh-sha512-32.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6416e4323f346968533de404518b2aaf186ead1/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzknh-sha512-32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6416e4323f346968533de404518b2aaf186ead1/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzknh-sha512-32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzknh-sha512-32.c?ref=e6416e4323f346968533de404518b2aaf186ead1", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=rv32gc_zknh -mabi=ilp32\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-g\" \"-flto\"} } */\n+\n+#include <stdint-gcc.h>\n+\n+int32_t foo1(int32_t rs1, int32_t rs2)\n+{\n+    return __builtin_riscv_sha512sig0h(rs1,rs2);\n+}\n+\n+int32_t foo2(int32_t rs1, int32_t rs2)\n+{\n+    return __builtin_riscv_sha512sig0l(rs1,rs2);\n+}\n+\n+int32_t foo3(int32_t rs1, int32_t rs2)\n+{\n+    return __builtin_riscv_sha512sig1h(rs1,rs2);\n+}\n+\n+int32_t foo4(int32_t rs1, int32_t rs2)\n+{\n+    return __builtin_riscv_sha512sig1l(rs1,rs2);\n+}\n+\n+int32_t foo5(int32_t rs1, int32_t rs2)\n+{\n+    return __builtin_riscv_sha512sum0r(rs1,rs2);\n+}\n+\n+int32_t foo6(int32_t rs1, int32_t rs2)\n+{\n+    return __builtin_riscv_sha512sum1r(rs1,rs2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sha512sig0h\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sha512sig0l\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sha512sig1h\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sha512sig1l\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sha512sum0r\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sha512sum1r\" 1 } } */"}, {"sha": "0fb5c75b9ce65fdb9fa5e15b1930df3a06565a2f", "filename": "gcc/testsuite/gcc.target/riscv/zknh-sha512-64.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6416e4323f346968533de404518b2aaf186ead1/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzknh-sha512-64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6416e4323f346968533de404518b2aaf186ead1/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzknh-sha512-64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzknh-sha512-64.c?ref=e6416e4323f346968533de404518b2aaf186ead1", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=rv64gc_zknh -mabi=lp64\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-g\" \"-flto\"} } */\n+\n+#include <stdint-gcc.h>\n+\n+int64_t foo1(int64_t rs1)\n+{\n+    return __builtin_riscv_sha512sig0(rs1);\n+}\n+\n+int64_t foo2(int64_t rs1)\n+{\n+    return __builtin_riscv_sha512sig1(rs1);\n+}\n+\n+int64_t foo3(int64_t rs1)\n+{\n+    return __builtin_riscv_sha512sum0(rs1);\n+}\n+\n+int64_t foo4(int64_t rs1)\n+{\n+    return __builtin_riscv_sha512sum1(rs1);\n+}\n+\n+\n+/* { dg-final { scan-assembler-times \"sha512sig0\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sha512sig1\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sha512sum0\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sha512sum1\" 1 } } */"}]}