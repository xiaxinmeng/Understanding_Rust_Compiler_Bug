{"sha": "6e69ab6d0853da706441bc26ed6379348d1d463a", "node_id": "C_kwDOANBUbNoAKDZlNjlhYjZkMDg1M2RhNzA2NDQxYmMyNmVkNjM3OTM0OGQxZDQ2M2E", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-10-29T16:34:13Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-01T13:12:47Z"}, "message": "Get rid of lambda get_fields in struct", "tree": {"sha": "09d810d448b0c9651a2708ccbf9b42b3499ab718", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09d810d448b0c9651a2708ccbf9b42b3499ab718"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e69ab6d0853da706441bc26ed6379348d1d463a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e69ab6d0853da706441bc26ed6379348d1d463a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e69ab6d0853da706441bc26ed6379348d1d463a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e69ab6d0853da706441bc26ed6379348d1d463a/comments", "author": null, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c02a29f576ea423f7ec767aca12f3333e2814f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c02a29f576ea423f7ec767aca12f3333e2814f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c02a29f576ea423f7ec767aca12f3333e2814f0"}], "stats": {"total": 111, "additions": 50, "deletions": 61}, "files": [{"sha": "bd06473c478b7b6a10161f081d2609ae987d6cbf", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e69ab6d0853da706441bc26ed6379348d1d463a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e69ab6d0853da706441bc26ed6379348d1d463a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=6e69ab6d0853da706441bc26ed6379348d1d463a", "patch": "@@ -201,16 +201,15 @@ TypeCheckStructExpr::visit (HIR::StructExprStructFields &struct_expr)\n \t  // we have a struct base to assign the missing fields from.\n \t  // the missing fields can be implicit FieldAccessExprs for the value\n \t  std::set<std::string> missing_fields;\n-\t  struct_path_resolved->iterate_fields (\n-\t    [&] (TyTy::StructFieldType *field) mutable -> bool {\n+\t  for (auto &field : struct_path_resolved->get_fields ())\n+\t    {\n \t      auto it = fields_assigned.find (field->get_name ());\n \t      if (it == fields_assigned.end ())\n \t\tmissing_fields.insert (field->get_name ());\n-\t      return true;\n-\t    });\n+\t    }\n \n-\t  // we can generate FieldAccessExpr or TupleAccessExpr for the values\n-\t  // of the missing fields.\n+\t  // we can generate FieldAccessExpr or TupleAccessExpr for the\n+\t  // values of the missing fields.\n \t  for (auto &missing : missing_fields)\n \t    {\n \t      HIR::Expr *receiver"}, {"sha": "58d67276879bb699c194682a511ab285e92850f5", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 45, "deletions": 46, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e69ab6d0853da706441bc26ed6379348d1d463a/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e69ab6d0853da706441bc26ed6379348d1d463a/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=6e69ab6d0853da706441bc26ed6379348d1d463a", "patch": "@@ -721,54 +721,53 @@ ADTType::handle_substitions (SubstitutionArgumentMappings subst_mappings)\n \tsub.fill_param_ty (*arg.get_tyty (), subst_mappings.get_locus ());\n     }\n \n-  adt->iterate_fields ([&] (StructFieldType *field) mutable -> bool {\n-    auto fty = field->get_field_type ();\n-    bool is_param_ty = fty->get_kind () == TypeKind::PARAM;\n-    if (is_param_ty)\n-      {\n-\tParamType *p = static_cast<ParamType *> (fty);\n-\n-\tSubstitutionArg arg = SubstitutionArg::error ();\n-\tbool ok = subst_mappings.get_argument_for_symbol (p, &arg);\n-\tif (ok)\n-\t  {\n-\t    auto argt = arg.get_tyty ();\n-\t    bool arg_is_param = argt->get_kind () == TyTy::TypeKind::PARAM;\n-\t    bool arg_is_concrete = argt->get_kind () != TyTy::TypeKind::INFER;\n-\n-\t    if (arg_is_param || arg_is_concrete)\n-\t      {\n-\t\tauto new_field = argt->clone ();\n-\t\tnew_field->set_ref (fty->get_ref ());\n-\t\tfield->set_field_type (new_field);\n-\t      }\n-\t    else\n-\t      {\n-\t\tfield->get_field_type ()->set_ty_ref (argt->get_ref ());\n-\t      }\n-\t  }\n-      }\n-    else if (fty->has_subsititions_defined ()\n-\t     || fty->contains_type_parameters ())\n-      {\n-\tBaseType *concrete\n-\t  = Resolver::SubstMapperInternal::Resolve (fty, subst_mappings);\n-\n-\tif (concrete->get_kind () == TyTy::TypeKind::ERROR)\n-\t  {\n-\t    rust_error_at (subst_mappings.get_locus (),\n-\t\t\t   \"Failed to resolve field substitution type: %s\",\n-\t\t\t   fty->as_string ().c_str ());\n-\t    return false;\n-\t  }\n+  for (auto &field : adt->fields)\n+    {\n+      auto fty = field->get_field_type ();\n+      bool is_param_ty = fty->get_kind () == TypeKind::PARAM;\n+      if (is_param_ty)\n+\t{\n+\t  ParamType *p = static_cast<ParamType *> (fty);\n \n-\tauto new_field = concrete->clone ();\n-\tnew_field->set_ref (fty->get_ref ());\n-\tfield->set_field_type (new_field);\n-      }\n+\t  SubstitutionArg arg = SubstitutionArg::error ();\n+\t  bool ok = subst_mappings.get_argument_for_symbol (p, &arg);\n+\t  if (ok)\n+\t    {\n+\t      auto argt = arg.get_tyty ();\n+\t      bool arg_is_param = argt->get_kind () == TyTy::TypeKind::PARAM;\n+\t      bool arg_is_concrete = argt->get_kind () != TyTy::TypeKind::INFER;\n \n-    return true;\n-  });\n+\t      if (arg_is_param || arg_is_concrete)\n+\t\t{\n+\t\t  auto new_field = argt->clone ();\n+\t\t  new_field->set_ref (fty->get_ref ());\n+\t\t  field->set_field_type (new_field);\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  field->get_field_type ()->set_ty_ref (argt->get_ref ());\n+\t\t}\n+\t    }\n+\t}\n+      else if (fty->has_subsititions_defined ()\n+\t       || fty->contains_type_parameters ())\n+\t{\n+\t  BaseType *concrete\n+\t    = Resolver::SubstMapperInternal::Resolve (fty, subst_mappings);\n+\n+\t  if (concrete->get_kind () == TyTy::TypeKind::ERROR)\n+\t    {\n+\t      rust_error_at (subst_mappings.get_locus (),\n+\t\t\t     \"Failed to resolve field substitution type: %s\",\n+\t\t\t     fty->as_string ().c_str ());\n+\t      return adt;\n+\t    }\n+\n+\t  auto new_field = concrete->clone ();\n+\t  new_field->set_ref (fty->get_ref ());\n+\t  field->set_field_type (new_field);\n+\t}\n+    }\n \n   return adt;\n }"}, {"sha": "30772819eddf1a8260689d7b35d4e8d3800046ea", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e69ab6d0853da706441bc26ed6379348d1d463a/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e69ab6d0853da706441bc26ed6379348d1d463a/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=6e69ab6d0853da706441bc26ed6379348d1d463a", "patch": "@@ -1105,15 +1105,6 @@ class ADTType : public BaseType, public SubstitutionRef\n   std::vector<StructFieldType *> &get_fields () { return fields; }\n   const std::vector<StructFieldType *> &get_fields () const { return fields; }\n \n-  void iterate_fields (std::function<bool (StructFieldType *)> cb)\n-  {\n-    for (auto &f : fields)\n-      {\n-\tif (!cb (f))\n-\t  return;\n-      }\n-  }\n-\n   bool needs_generic_substitutions () const override final\n   {\n     return needs_substitution ();"}]}