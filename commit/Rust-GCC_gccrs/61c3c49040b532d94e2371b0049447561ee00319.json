{"sha": "61c3c49040b532d94e2371b0049447561ee00319", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFjM2M0OTA0MGI1MzJkOTRlMjM3MWIwMDQ5NDQ3NTYxZWUwMDMxOQ==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2009-11-03T10:44:36Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2009-11-03T10:44:36Z"}, "message": "re PR c++/38699 (ICE using offsetof with pointer and array accesses)\n\nFix PR c++/38699\n\ngcc/ChangeLog:\n\n\tPR c++/38699\n\t* c-common.c (fold_offsetof_1): Issue errors when the\n\tmember designator of the offsetoff expression is not legitimate.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/dfp/builtin-offsetof.c: New test.\n\t* g++.dg/other/offsetof6.C: Likewise.\n\nFrom-SVN: r153843", "tree": {"sha": "c87dd211761661c2a4d2e74640e5d6de9bb6613b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c87dd211761661c2a4d2e74640e5d6de9bb6613b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61c3c49040b532d94e2371b0049447561ee00319", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61c3c49040b532d94e2371b0049447561ee00319", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61c3c49040b532d94e2371b0049447561ee00319", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61c3c49040b532d94e2371b0049447561ee00319/comments", "author": null, "committer": null, "parents": [{"sha": "9d1a984546a59678be0a5196a87e649f5551dcc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d1a984546a59678be0a5196a87e649f5551dcc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d1a984546a59678be0a5196a87e649f5551dcc7"}], "stats": {"total": 90, "additions": 83, "deletions": 7}, "files": [{"sha": "ddb6b5d58d99654554e132b19bc391f49c58ed49", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c3c49040b532d94e2371b0049447561ee00319/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c3c49040b532d94e2371b0049447561ee00319/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61c3c49040b532d94e2371b0049447561ee00319", "patch": "@@ -1,3 +1,9 @@\n+2009-11-03  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/38699\n+\t* c-common.c (fold_offsetof_1): Issue errors when the member designator\n+\tof the offsetoff expression is not legitimate.\n+\n 2009-11-03  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*call_value_1_rex64_ms_sysv): Use register"}, {"sha": "91de41c0299da56b5cbcde7d294baa7580830f7c", "filename": "gcc/c-common.c", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c3c49040b532d94e2371b0049447561ee00319/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c3c49040b532d94e2371b0049447561ee00319/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=61c3c49040b532d94e2371b0049447561ee00319", "patch": "@@ -8356,15 +8356,14 @@ fold_offsetof_1 (tree expr, tree stop_ref)\n       error (\"cannot apply %<offsetof%> when %<operator[]%> is overloaded\");\n       return error_mark_node;\n \n-    case INTEGER_CST:\n-      gcc_assert (integer_zerop (expr));\n-      return size_zero_node;\n-\n     case NOP_EXPR:\n     case INDIRECT_REF:\n-      base = fold_offsetof_1 (TREE_OPERAND (expr, 0), stop_ref);\n-      gcc_assert (base == error_mark_node || base == size_zero_node);\n-      return base;\n+      if (!integer_zerop (TREE_OPERAND (expr, 0)))\n+\t{\n+\t  error (\"cannot apply %<offsetof%> to a non constant address\");\n+\t  return error_mark_node;\n+\t}\n+      return size_zero_node;\n \n     case COMPONENT_REF:\n       base = fold_offsetof_1 (TREE_OPERAND (expr, 0), stop_ref);\n@@ -8397,6 +8396,16 @@ fold_offsetof_1 (tree expr, tree stop_ref)\n \t}\n       t = convert (sizetype, t);\n       off = size_binop (MULT_EXPR, TYPE_SIZE_UNIT (TREE_TYPE (expr)), t);\n+\n+      /* Check if the offset goes beyond the upper bound of the array.  */\n+      {\n+\ttree nelts = array_type_nelts (TREE_TYPE (TREE_OPERAND (expr, 0)));\n+        HOST_WIDE_INT index = int_cst_value (t);\n+\tif (index > int_cst_value (nelts))\n+\t  warning (OPT_Warray_bounds,\n+\t\t   \"index %ld denotes an offset greater than size of %qT\",\n+\t\t   index, TREE_TYPE (TREE_OPERAND (expr, 0)));\n+      }\n       break;\n \n     case COMPOUND_EXPR:"}, {"sha": "03fdb9c8f6300d799ec27bf4890e0446ac9ece0d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c3c49040b532d94e2371b0049447561ee00319/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c3c49040b532d94e2371b0049447561ee00319/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=61c3c49040b532d94e2371b0049447561ee00319", "patch": "@@ -1,3 +1,9 @@\n+2009-11-03  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/38699\n+\t* c-c++-common/dfp/builtin-offsetof.c: New test.\n+\t* g++.dg/other/offsetof6.C: Likewise.\n+\n 2009-11-03  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/41900"}, {"sha": "0ab498acd0917372efe63d7d065e113a438e8114", "filename": "gcc/testsuite/c-c++-common/dfp/builtin-offsetof.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c3c49040b532d94e2371b0049447561ee00319/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdfp%2Fbuiltin-offsetof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c3c49040b532d94e2371b0049447561ee00319/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdfp%2Fbuiltin-offsetof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdfp%2Fbuiltin-offsetof.c?ref=61c3c49040b532d94e2371b0049447561ee00319", "patch": "@@ -0,0 +1,29 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// Origin PR c++/38699\n+// { dg-options \"-Warray-bounds\" }\n+// { dg-do compile }\n+\n+struct A\n+{\n+  const char *p;\n+};\n+\n+struct B\n+{\n+    char p[10];\n+    struct A a;\n+};\n+\n+void\n+f0 ()\n+{\n+  __builtin_offsetof(struct A, p); // OK\n+  __builtin_offsetof(struct A, p[0]); // { dg-error \"non constant address\" }\n+  __builtin_offsetof(struct B, p[0]); // OK\n+  __builtin_offsetof(struct B, p[9]); // OK\n+  __builtin_offsetof(struct B, p[10]); // { dg-warning \"greater than size\" }\n+  __builtin_offsetof(struct B, a.p); // OK\n+  __builtin_offsetof(struct B, p[0]); // OK\n+  __builtin_offsetof(struct B, a.p[0]); // { dg-error \"non constant address\" }\n+}\n+"}, {"sha": "b77d1b99a77465d5e74e193561b513c4623f4397", "filename": "gcc/testsuite/g++.dg/other/offsetof6.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c3c49040b532d94e2371b0049447561ee00319/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c3c49040b532d94e2371b0049447561ee00319/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof6.C?ref=61c3c49040b532d94e2371b0049447561ee00319", "patch": "@@ -0,0 +1,26 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// Origin PR c++/38699\n+// { dg-do compile }\n+\n+template<class T>\n+struct A\n+{\n+  const T *p;\n+};\n+\n+struct B\n+{\n+  A<int> a;\n+};\n+\n+template class A<char>;\n+\n+void\n+f0 ()\n+{\n+  __builtin_offsetof(A<char>, p); // OK\n+  __builtin_offsetof(A<char>, p[1]); // { dg-error \"non constant address\" }\n+  __builtin_offsetof(B, a.p); // OK\n+  __builtin_offsetof(B, a.p[1]); // { dg-error \"non constant address\" }\n+}\n+"}]}