{"sha": "aa372462f481aab3593ab76782f35c816365d648", "node_id": "C_kwDOANBUbNoAKGFhMzcyNDYyZjQ4MWFhYjM1OTNhYjc2NzgyZjM1YzgxNjM2NWQ2NDg", "commit": {"author": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2022-05-03T19:55:39Z"}, "committer": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2022-05-03T19:55:39Z"}, "message": "Compile matches on boolean expressions", "tree": {"sha": "97f7702d0b6bb78d984c2eb8ff4d1e0795821802", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97f7702d0b6bb78d984c2eb8ff4d1e0795821802"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa372462f481aab3593ab76782f35c816365d648", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa372462f481aab3593ab76782f35c816365d648", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa372462f481aab3593ab76782f35c816365d648", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa372462f481aab3593ab76782f35c816365d648/comments", "author": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca75e756e802ccfff445f7efb4f3b530c6f3891f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca75e756e802ccfff445f7efb4f3b530c6f3891f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca75e756e802ccfff445f7efb4f3b530c6f3891f"}], "stats": {"total": 95, "additions": 79, "deletions": 16}, "files": [{"sha": "eb7b0dfc1b223226c2f889395de54ff855584a38", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 35, "deletions": 16, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa372462f481aab3593ab76782f35c816365d648/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa372462f481aab3593ab76782f35c816365d648/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=aa372462f481aab3593ab76782f35c816365d648", "patch": "@@ -211,13 +211,18 @@ CompileExpr::visit (HIR::MatchExpr &expr)\n       return;\n     }\n \n-  rust_assert (scrutinee_expr_tyty->get_kind () == TyTy::TypeKind::ADT);\n+  TyTy::TypeKind scrutinee_kind = scrutinee_expr_tyty->get_kind ();\n+  rust_assert (scrutinee_kind == TyTy::TypeKind::BOOL\n+\t       || scrutinee_kind == TyTy::TypeKind::ADT);\n \n-  // this will need to change but for now the first pass implementation, lets\n-  // assert this is the case\n-  TyTy::ADTType *adt = static_cast<TyTy::ADTType *> (scrutinee_expr_tyty);\n-  rust_assert (adt->is_enum ());\n-  rust_assert (adt->number_of_variants () > 0);\n+  if (scrutinee_kind == TyTy::TypeKind::ADT)\n+    {\n+      // this will need to change but for now the first pass implementation,\n+      // lets assert this is the case\n+      TyTy::ADTType *adt = static_cast<TyTy::ADTType *> (scrutinee_expr_tyty);\n+      rust_assert (adt->is_enum ());\n+      rust_assert (adt->number_of_variants () > 0);\n+    }\n \n   TyTy::BaseType *expr_tyty = nullptr;\n   if (!ctx->get_tyctx ()->lookup_type (expr.get_mappings ().get_hirid (),\n@@ -247,16 +252,30 @@ CompileExpr::visit (HIR::MatchExpr &expr)\n   tree match_scrutinee_expr\n     = CompileExpr::Compile (expr.get_scrutinee_expr ().get (), ctx);\n \n-  // need to access the qualifier field, if we use QUAL_UNION_TYPE this would be\n-  // DECL_QUALIFIER i think. For now this will just access the first record\n-  // field and its respective qualifier because it will always be set because\n-  // this is all a big special union\n-  tree scrutinee_first_record_expr\n-    = ctx->get_backend ()->struct_field_expression (\n-      match_scrutinee_expr, 0, expr.get_scrutinee_expr ()->get_locus ());\n-  tree match_scrutinee_expr_qualifier_expr\n-    = ctx->get_backend ()->struct_field_expression (\n-      scrutinee_first_record_expr, 0, expr.get_scrutinee_expr ()->get_locus ());\n+  tree match_scrutinee_expr_qualifier_expr;\n+  if (scrutinee_kind == TyTy::TypeKind::BOOL)\n+    {\n+      match_scrutinee_expr_qualifier_expr = match_scrutinee_expr;\n+    }\n+  else if (scrutinee_kind == TyTy::TypeKind::ADT)\n+    {\n+      // need to access qualifier the field, if we use QUAL_UNION_TYPE this\n+      // would be DECL_QUALIFIER i think. For now this will just access the\n+      // first record field and its respective qualifier because it will always\n+      // be set because this is all a big special union\n+      tree scrutinee_first_record_expr\n+\t= ctx->get_backend ()->struct_field_expression (\n+\t  match_scrutinee_expr, 0, expr.get_scrutinee_expr ()->get_locus ());\n+      match_scrutinee_expr_qualifier_expr\n+\t= ctx->get_backend ()->struct_field_expression (\n+\t  scrutinee_first_record_expr, 0,\n+\t  expr.get_scrutinee_expr ()->get_locus ());\n+    }\n+  else\n+    {\n+      // FIXME: match on other types of expressions not yet implemented.\n+      gcc_assert (0);\n+    }\n \n   // setup the end label so the cases can exit properly\n   tree fndecl = fnctx.fndecl;"}, {"sha": "45900b82410d8d5376e5a816d20e382b7615dc89", "filename": "gcc/testsuite/rust/execute/torture/match_bool1.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa372462f481aab3593ab76782f35c816365d648/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_bool1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa372462f481aab3593ab76782f35c816365d648/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_bool1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_bool1.rs?ref=aa372462f481aab3593ab76782f35c816365d648", "patch": "@@ -0,0 +1,44 @@\n+// { dg-output \"182 is more than 100\\n55 is less than 100\\n\" }\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn foo (x: bool) -> i32 {\n+    match x {\n+        true => { return 182; },\n+        false => { return 55; },\n+    }\n+}\n+\n+fn bar (y: i32) {\n+\n+    match y < 100 {\n+        true => {\n+            let a = \"%i is less than 100\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf (c, y);\n+        }\n+        _ => {\n+            let a = \"%i is more than 100\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf (c, y);\n+        }\n+    }\n+}\n+\n+\n+fn main () -> i32 {\n+\n+    let a = foo (true);\n+    let b = foo (false);\n+\n+    bar (a);\n+    bar (b);\n+\n+    0\n+}"}]}