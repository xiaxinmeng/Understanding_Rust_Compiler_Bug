{"sha": "4855be843467f337cd50f0d081e0a524e6ab4d77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg1NWJlODQzNDY3ZjMzN2NkNTBmMGQwODFlMGE1MjRlNmFiNGQ3Nw==", "commit": {"author": {"name": "Chung-Ju Wu", "email": "jasonwucj@gmail.com", "date": "2015-01-13T06:06:34Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2015-01-13T06:06:34Z"}, "message": "[NDS32] Consider -mcmodel=X in nds32_legitimate_address_p implementation.\n\ngcc/\n\t* config/nds32/nds32.c (nds32_legitimate_address_p): Consider\n\tTARGET_CMODEL_LARGE and TARGET_CMODEL_MEDIUM cases.\n\nFrom-SVN: r219515", "tree": {"sha": "4633b6d235806a32aa620ec6ad35c5c286ffe1e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4633b6d235806a32aa620ec6ad35c5c286ffe1e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4855be843467f337cd50f0d081e0a524e6ab4d77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4855be843467f337cd50f0d081e0a524e6ab4d77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4855be843467f337cd50f0d081e0a524e6ab4d77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4855be843467f337cd50f0d081e0a524e6ab4d77/comments", "author": {"login": "jasonwucj", "id": 5520732, "node_id": "MDQ6VXNlcjU1MjA3MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5520732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonwucj", "html_url": "https://github.com/jasonwucj", "followers_url": "https://api.github.com/users/jasonwucj/followers", "following_url": "https://api.github.com/users/jasonwucj/following{/other_user}", "gists_url": "https://api.github.com/users/jasonwucj/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonwucj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonwucj/subscriptions", "organizations_url": "https://api.github.com/users/jasonwucj/orgs", "repos_url": "https://api.github.com/users/jasonwucj/repos", "events_url": "https://api.github.com/users/jasonwucj/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonwucj/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "511a41d799f2a3b9946d5176ff0f5404077d2bec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/511a41d799f2a3b9946d5176ff0f5404077d2bec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/511a41d799f2a3b9946d5176ff0f5404077d2bec"}], "stats": {"total": 53, "additions": 41, "deletions": 12}, "files": [{"sha": "d358973a59eb594df4c7c6aa2f87fd007f014d79", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4855be843467f337cd50f0d081e0a524e6ab4d77/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4855be843467f337cd50f0d081e0a524e6ab4d77/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4855be843467f337cd50f0d081e0a524e6ab4d77", "patch": "@@ -1,3 +1,8 @@\n+2015-01-13  Chung-Ju Wu  <jasonwucj@gmail.com>\n+\n+\t* config/nds32/nds32.c (nds32_legitimate_address_p): Consider\n+\tTARGET_CMODEL_LARGE and TARGET_CMODEL_MEDIUM cases.\n+\n 2015-01-13  Chung-Ju Wu  <jasonwucj@gmail.com>\n \n \t* config/nds32/nds32.h (NDS32_SYMBOL_FLAG_RODATA): Define our own"}, {"sha": "192816f9f29592093c3993ff878b41d6ff4eea39", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4855be843467f337cd50f0d081e0a524e6ab4d77/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4855be843467f337cd50f0d081e0a524e6ab4d77/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=4855be843467f337cd50f0d081e0a524e6ab4d77", "patch": "@@ -1961,24 +1961,27 @@ nds32_legitimate_address_p (machine_mode mode, rtx x, bool strict)\n       return nds32_address_register_rtx_p (x, strict);\n \n     case SYMBOL_REF:\n-\n-      if (!TARGET_GP_DIRECT\n+      /* (mem (symbol_ref A)) => [symbol_ref] */\n+      /* If -mcmodel=large, the 'symbol_ref' is not a valid address\n+         during or after LRA/reload phase.  */\n+      if (TARGET_CMODEL_LARGE\n \t  && (reload_completed\n \t      || reload_in_progress\n \t      || lra_in_progress))\n \treturn false;\n-\n-      /* (mem (symbol_ref A)) => [symbol_ref] */\n-      return !currently_expanding_to_rtl;\n-\n-    case CONST:\n-\n-      if (!TARGET_GP_DIRECT\n+      /* If -mcmodel=medium and the symbol references to rodata section,\n+         the 'symbol_ref' is not a valid address during or after\n+         LRA/reload phase.  */\n+      if (TARGET_CMODEL_MEDIUM\n+\t  && NDS32_SYMBOL_REF_RODATA_P (x)\n \t  && (reload_completed\n \t      || reload_in_progress\n \t      || lra_in_progress))\n \treturn false;\n \n+      return true;\n+\n+    case CONST:\n       /* (mem (const (...)))\n          => [ + const_addr ], where const_addr = symbol_ref + const_int */\n       if (GET_CODE (XEXP (x, 0)) == PLUS)\n@@ -1989,9 +1992,30 @@ nds32_legitimate_address_p (machine_mode mode, rtx x, bool strict)\n \t  rtx op1 = XEXP (plus_op, 1);\n \n \t  if (GET_CODE (op0) == SYMBOL_REF && CONST_INT_P (op1))\n-\t    return true;\n-\t  else\n-\t    return false;\n+\t    {\n+\t      /* Now we see the [ + const_addr ] pattern, but we need\n+\t         some further checking.  */\n+\t      /* If -mcmodel=large, the 'const_addr' is not a valid address\n+\t         during or after LRA/reload phase.  */\n+\t      if (TARGET_CMODEL_LARGE\n+\t\t  && (reload_completed\n+\t\t      || reload_in_progress\n+\t\t      || lra_in_progress))\n+\t\treturn false;\n+\t      /* If -mcmodel=medium and the symbol references to rodata section,\n+\t         the 'const_addr' is not a valid address during or after\n+\t         LRA/reload phase.  */\n+\t      if (TARGET_CMODEL_MEDIUM\n+\t\t  && NDS32_SYMBOL_REF_RODATA_P (op0)\n+\t\t  && (reload_completed\n+\t\t      || reload_in_progress\n+\t\t      || lra_in_progress))\n+\t\treturn false;\n+\n+\t      /* At this point we can make sure 'const_addr' is a\n+\t\t valid address.  */\n+\t      return true;\n+\t    }\n \t}\n \n \treturn false;"}]}