{"sha": "1e166191ef330f3491d405bf3eb09b2b796c9b0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUxNjYxOTFlZjMzMGYzNDkxZDQwNWJmM2ViMDliMmI3OTZjOWIwZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-02-15T13:48:08Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-02-15T13:59:32Z"}, "message": "c++: Fix lambda in atomic constraint.\n\nfind_template_parameters needs to find the mention of T in the lambda.\nFixing that leaves this as a hard error, which may be surprising but is\nconsistent with lambdas in other SFINAE contexts like template argument\ndeduction.\n\ngcc/cp/ChangeLog\n2020-02-15  Jason Merrill  <jason@redhat.com>\n\n\tPR c++/92556\n\t* pt.c (any_template_parm_r): Look into lambda body.", "tree": {"sha": "3c7f342cbc19b7cd380c94f786b955ffc31417ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c7f342cbc19b7cd380c94f786b955ffc31417ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e166191ef330f3491d405bf3eb09b2b796c9b0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e166191ef330f3491d405bf3eb09b2b796c9b0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e166191ef330f3491d405bf3eb09b2b796c9b0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e166191ef330f3491d405bf3eb09b2b796c9b0e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d71365427670a791c5b54bfec6e3d41210844a8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d71365427670a791c5b54bfec6e3d41210844a8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d71365427670a791c5b54bfec6e3d41210844a8a"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "6ac938b4d2b753adc9014cd07c233c085e02fb34", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e166191ef330f3491d405bf3eb09b2b796c9b0e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e166191ef330f3491d405bf3eb09b2b796c9b0e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1e166191ef330f3491d405bf3eb09b2b796c9b0e", "patch": "@@ -1,5 +1,8 @@\n 2020-02-15  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/92556\n+\t* pt.c (any_template_parm_r): Look into lambda body.\n+\n \tPR c++/92583\n \t* pt.c (any_template_parm_r): Remove CONSTRUCTOR handling.\n "}, {"sha": "6c9abb8f3d3d66e4b3be07536e43598e7294df68", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e166191ef330f3491d405bf3eb09b2b796c9b0e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e166191ef330f3491d405bf3eb09b2b796c9b0e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1e166191ef330f3491d405bf3eb09b2b796c9b0e", "patch": "@@ -10479,6 +10479,15 @@ any_template_parm_r (tree t, void *data)\n       }\n       break;\n \n+    case LAMBDA_EXPR:\n+      {\n+\t/* Look in the parms and body.  */\n+\ttree fn = lambda_function (t);\n+\tWALK_SUBTREE (TREE_TYPE (fn));\n+\tWALK_SUBTREE (DECL_SAVED_TREE (fn));\n+      }\n+      break;\n+\n     default:\n       break;\n     }"}, {"sha": "fe471899c14dc54c8294499f4e7082a824c582da", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-lambda5.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e166191ef330f3491d405bf3eb09b2b796c9b0e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e166191ef330f3491d405bf3eb09b2b796c9b0e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda5.C?ref=1e166191ef330f3491d405bf3eb09b2b796c9b0e", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/92556\n+// { dg-do compile { target c++2a } }\n+\n+// Having this as a hard error is consistent with template argument deduction;\n+// it's an open core issue (jason 2020-02-14).\n+template <class T> concept has_value\n+  = requires { []{T::value;}; }; // { dg-error \"\" }\n+template <has_value T> void f() { }\n+template <class T> void f() { }\n+void q() { f<int>(); }"}]}