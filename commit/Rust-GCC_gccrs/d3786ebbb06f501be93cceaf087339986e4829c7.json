{"sha": "d3786ebbb06f501be93cceaf087339986e4829c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM3ODZlYmJiMDZmNTAxYmU5M2NjZWFmMDg3MzM5OTg2ZTQ4MjljNw==", "commit": {"author": {"name": "Matthew Beliveau", "email": "mbelivea@redhat.com", "date": "2019-06-11T15:03:21Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-06-11T15:03:21Z"}, "message": "PR c++/90449 - add -Winaccessible-base option.\n\n       * doc/invoke.texi (Winaccessible-base): Document.\n\n       * c.opt (Winaccessible-base): Added new option.\n\n       * class.c (warn_about_ambiguous_bases): Changed name to:\n       maybe_warn_about_inaccessible_bases.\n       (maybe_warn_about_inaccessible_bases):  Implemented new\n       Winaccessible-base warning option for both direct and virtual\n       base warnings.\n       (layout_class_type): Call to warn_about_ambiguous_bases changed to fit\n       new name.\n\n       \t* g++.dg/warn/Winaccessible-base-1.C: New file.\n       \t* g++.dg/warn/Winaccessible-base-2.C: New file.\n       \t* g++.dg/warn/Winaccessible-virtual-base-1.C: New file.\n       \t* g++.dg/warn/Winaccessible-virtual-base-2.C: New file.\n\nFrom-SVN: r272157", "tree": {"sha": "e9d8906df0f5a198c89227bd39ecdfc5ca01878a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9d8906df0f5a198c89227bd39ecdfc5ca01878a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3786ebbb06f501be93cceaf087339986e4829c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3786ebbb06f501be93cceaf087339986e4829c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3786ebbb06f501be93cceaf087339986e4829c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3786ebbb06f501be93cceaf087339986e4829c7/comments", "author": null, "committer": null, "parents": [{"sha": "da10c178007d4edea4ad97f49041c6a6a8c5b02d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da10c178007d4edea4ad97f49041c6a6a8c5b02d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da10c178007d4edea4ad97f49041c6a6a8c5b02d"}], "stats": {"total": 103, "additions": 96, "deletions": 7}, "files": [{"sha": "0c5cf700f58df731bbaeceb3bf9a6d7cd08fc8c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3786ebbb06f501be93cceaf087339986e4829c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3786ebbb06f501be93cceaf087339986e4829c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d3786ebbb06f501be93cceaf087339986e4829c7", "patch": "@@ -1,3 +1,8 @@\n+2019-06-11  Matthew Beliveau  <mbelivea@redhat.com>\n+\n+\tPR c++/90449 - add -Winaccessible-base option.\n+\t* doc/invoke.texi (Winaccessible-base): Document.\n+\n 2019-06-11  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR tree-optimization/62041"}, {"sha": "42247182f118833158b42a358ba2a17beeb0976b", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3786ebbb06f501be93cceaf087339986e4829c7/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3786ebbb06f501be93cceaf087339986e4829c7/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=d3786ebbb06f501be93cceaf087339986e4829c7", "patch": "@@ -1,3 +1,8 @@\n+2019-06-11  Matthew Beliveau  <mbelivea@redhat.com>\n+\n+\tPR c++/90449 - add -Winaccessible-base option.\n+\t* c.opt (Winaccessible-base): New option.\n+\n 2019-06-10  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-pragma.h (enum pragma_kind): Add PRAGMA_OMP_SCAN."}, {"sha": "572cf1862629b676bd7b2987d61ce7b65c89cefb", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3786ebbb06f501be93cceaf087339986e4829c7/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3786ebbb06f501be93cceaf087339986e4829c7/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=d3786ebbb06f501be93cceaf087339986e4829c7", "patch": "@@ -625,6 +625,10 @@ Wignored-attributes\n C C++ Var(warn_ignored_attributes) Init(1) Warning\n Warn whenever attributes are ignored.\n \n+Winaccessible-base\n+C++ ObjC++ Var(warn_inaccessible_base) Init(1) Warning\n+Warn when a base is inaccessible in derived due to ambiguity.\n+\n Wincompatible-pointer-types\n C ObjC Var(warn_incompatible_pointer_types) Init(1) Warning\n Warn when there is a conversion between pointers that have incompatible types."}, {"sha": "5e8fd69487d1ccc1ca0c21c3c3e870c238d974e0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3786ebbb06f501be93cceaf087339986e4829c7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3786ebbb06f501be93cceaf087339986e4829c7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d3786ebbb06f501be93cceaf087339986e4829c7", "patch": "@@ -1,3 +1,14 @@\n+2019-06-11  Matthew Beliveau  <mbelivea@redhat.com>\n+\n+\tPR c++/90449 - add -Winaccessible-base option.\n+\t* class.c (warn_about_ambiguous_bases): Changed name to:\n+\tmaybe_warn_about_inaccessible_bases.\n+\t(maybe_warn_about_inaccessible_bases):  Implemented new\n+\tWinaccessible-base warning option for both direct and virtual\n+\tbase warnings.\n+\t(layout_class_type): Call to warn_about_ambiguous_bases changed to fit\n+\tnew name.\n+\n 2019-06-11  Richard Biener  <rguenther@suse.de>\n \n \tPR c++/90801"}, {"sha": "4fdb0f328cc0e22a5f2140fe76b06bf507e42bc0", "filename": "gcc/cp/class.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3786ebbb06f501be93cceaf087339986e4829c7/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3786ebbb06f501be93cceaf087339986e4829c7/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=d3786ebbb06f501be93cceaf087339986e4829c7", "patch": "@@ -199,7 +199,7 @@ static int walk_subobject_offsets (tree, subobject_offset_fn,\n static int layout_conflict_p (tree, tree, splay_tree, int);\n static int splay_tree_compare_integer_csts (splay_tree_key k1,\n \t\t\t\t\t    splay_tree_key k2);\n-static void warn_about_ambiguous_bases (tree);\n+static void maybe_warn_about_inaccessible_bases (tree);\n static bool type_requires_array_cookie (tree);\n static bool base_derived_from (tree, tree);\n static int empty_base_at_nonzero_offset_p (tree, tree, splay_tree);\n@@ -6018,14 +6018,18 @@ end_of_class (tree t, bool include_virtuals_p)\n    subobjects of U.  */\n \n static void\n-warn_about_ambiguous_bases (tree t)\n+maybe_warn_about_inaccessible_bases (tree t)\n {\n   int i;\n   vec<tree, va_gc> *vbases;\n   tree basetype;\n   tree binfo;\n   tree base_binfo;\n \n+  /* If not checking for warning then return early.  */\n+  if (!warn_inaccessible_base)\n+    return;\n+\n   /* If there are no repeated bases, nothing can be ambiguous.  */\n   if (!CLASSTYPE_REPEATED_BASE_P (t))\n     return;\n@@ -6037,8 +6041,8 @@ warn_about_ambiguous_bases (tree t)\n       basetype = BINFO_TYPE (base_binfo);\n \n       if (!uniquely_derived_from_p (basetype, t))\n-\twarning (0, \"direct base %qT inaccessible in %qT due to ambiguity\",\n-\t\t basetype, t);\n+\twarning (OPT_Winaccessible_base, \"direct base %qT inaccessible \"\n+\t\t \"in %qT due to ambiguity\", basetype, t);\n     }\n \n   /* Check for ambiguous virtual bases.  */\n@@ -6049,8 +6053,8 @@ warn_about_ambiguous_bases (tree t)\n \tbasetype = BINFO_TYPE (binfo);\n \n \tif (!uniquely_derived_from_p (basetype, t))\n-\t  warning (OPT_Wextra, \"virtual base %qT inaccessible in %qT due \"\n-\t\t   \"to ambiguity\", basetype, t);\n+\t  warning (OPT_Winaccessible_base, \"virtual base %qT inaccessible in \"\n+\t\t   \"%qT due to ambiguity\", basetype, t);\n       }\n }\n \n@@ -6456,7 +6460,7 @@ layout_class_type (tree t, tree *virtuals_p)\n     error (\"size of type %qT is too large (%qE bytes)\", t, TYPE_SIZE_UNIT (t));\n \n   /* Warn about bases that can't be talked about due to ambiguity.  */\n-  warn_about_ambiguous_bases (t);\n+  maybe_warn_about_inaccessible_bases (t);\n \n   /* Now that we're done with layout, give the base fields the real types.  */\n   for (field = TYPE_FIELDS (t); field; field = DECL_CHAIN (field))"}, {"sha": "1520b2cbb9f544f9f3cc080aef76284b5435f6f5", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3786ebbb06f501be93cceaf087339986e4829c7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3786ebbb06f501be93cceaf087339986e4829c7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d3786ebbb06f501be93cceaf087339986e4829c7", "patch": "@@ -317,6 +317,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wignored-qualifiers  -Wignored-attributes  -Wincompatible-pointer-types @gol\n -Wimplicit  -Wimplicit-fallthrough  -Wimplicit-fallthrough=@var{n} @gol\n -Wimplicit-function-declaration  -Wimplicit-int @gol\n+-Winaccessible-base @gol\n -Winit-self  -Winline  -Wno-int-conversion  -Wint-in-bool-context @gol\n -Wno-int-to-pointer-cast  -Winvalid-memory-model  -Wno-invalid-offsetof @gol\n -Winvalid-pch  -Wlarger-than=@var{byte-size} @gol\n@@ -4800,6 +4801,22 @@ is only active when @option{-fdelete-null-pointer-checks} is active,\n which is enabled by optimizations in most targets.  The precision of\n the warnings depends on the optimization options used.\n \n+@item -Winaccessible-base @r{(C++, Objective-C++ only)}\n+@opindex Winaccessible-base\n+@opindex Wno-inaccessible-base\n+Warn when a base class is inaccessible in a class derived from it due to\n+ambiguity.  The warning is enabled by default.  Note the warning for virtual\n+bases is enabled by the @option{-Wextra} option.\n+@smallexample\n+@group\n+struct A @{ int a; @};\n+\n+struct B : A @{ @};\n+\n+struct C : B, A @{ @};\n+@end group\n+@end smallexample\n+\n @item -Winit-self @r{(C, C++, Objective-C and Objective-C++ only)}\n @opindex Winit-self\n @opindex Wno-init-self"}, {"sha": "21b5d83336c389007e9bd8d7c45b0f21b7b2de19", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3786ebbb06f501be93cceaf087339986e4829c7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3786ebbb06f501be93cceaf087339986e4829c7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d3786ebbb06f501be93cceaf087339986e4829c7", "patch": "@@ -1,3 +1,11 @@\n+2019-06-11  Matthew Beliveau  <mbelivea@redhat.com>\n+\n+\tPR c++/90449 - add -Winaccessible-base option.\n+\t* g++.dg/warn/Winaccessible-base-1.C: New file.\n+\t* g++.dg/warn/Winaccessible-base-2.C: New file.\n+\t* g++.dg/warn/Winaccessible-virtual-base-1.C: New file.\n+\t* g++.dg/warn/Winaccessible-virtual-base-2.C: New file.\n+\n 2019-06-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/90810"}, {"sha": "2e32b0b119ffe711e3cd285937d016ad8969635e", "filename": "gcc/testsuite/g++.dg/warn/Winaccessible-base-1.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3786ebbb06f501be93cceaf087339986e4829c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWinaccessible-base-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3786ebbb06f501be93cceaf087339986e4829c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWinaccessible-base-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWinaccessible-base-1.C?ref=d3786ebbb06f501be93cceaf087339986e4829c7", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/90449\n+\n+struct A { int a; };\n+\n+struct B : A { };\n+\n+struct C : B, A { }; // { dg-warning \"direct base 'A' inaccessible in 'C' due to ambiguity\" }"}, {"sha": "67bd740a763a0bde9be715d09d81770af0078531", "filename": "gcc/testsuite/g++.dg/warn/Winaccessible-base-2.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3786ebbb06f501be93cceaf087339986e4829c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWinaccessible-base-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3786ebbb06f501be93cceaf087339986e4829c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWinaccessible-base-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWinaccessible-base-2.C?ref=d3786ebbb06f501be93cceaf087339986e4829c7", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/90449\n+// { dg-options -Wno-inaccessible-base }\n+\n+struct A { int a; };\n+\n+struct B : A { };\n+\n+struct C : B, A { }; // { dg-bogus \"direct base 'A' inaccessible in 'C' due to ambiguity\" }"}, {"sha": "051fcc695fec2800f3c9a3f6ee991a780cae779b", "filename": "gcc/testsuite/g++.dg/warn/Winaccessible-virtual-base-1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3786ebbb06f501be93cceaf087339986e4829c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWinaccessible-virtual-base-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3786ebbb06f501be93cceaf087339986e4829c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWinaccessible-virtual-base-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWinaccessible-virtual-base-1.C?ref=d3786ebbb06f501be93cceaf087339986e4829c7", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/90449\n+// { dg-options -Wextra }\n+\n+struct A { };\n+\n+struct B : virtual A { };\n+\n+struct C : A { };\n+\n+struct D : B, C { }; // { dg-warning \"virtual base 'A' inaccessible in 'D' due to ambiguity\" }"}, {"sha": "eab9ec0e3d7cbfcf6c4af1da6dfbd82de2e2510f", "filename": "gcc/testsuite/g++.dg/warn/Winaccessible-virtual-base-2.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3786ebbb06f501be93cceaf087339986e4829c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWinaccessible-virtual-base-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3786ebbb06f501be93cceaf087339986e4829c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWinaccessible-virtual-base-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWinaccessible-virtual-base-2.C?ref=d3786ebbb06f501be93cceaf087339986e4829c7", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/90449\n+// { dg-options \"-Wextra -Wno-inaccessible-base\" }\n+\n+struct A { };\n+\n+struct B : virtual A { };\n+\n+struct C : A { };\n+\n+struct D : B, C { }; // { dg-bogus \"virtual base 'A' inaccessible in 'D' due to ambiguity\" }"}]}