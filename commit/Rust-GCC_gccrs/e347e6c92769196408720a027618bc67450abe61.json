{"sha": "e347e6c92769196408720a027618bc67450abe61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM0N2U2YzkyNzY5MTk2NDA4NzIwYTAyNzYxOGJjNjc0NTBhYmU2MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2021-05-10T15:29:08Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-07-09T12:35:27Z"}, "message": "[Ada] Inconsistency between declaration and body of predicate functions\n\ngcc/ada/\n\n\t* sem_ch13.adb (Resolve_Aspect_Expressions): Use the same\n\tprocessing for Predicate, Static_Predicate and\n\tDynamic_Predicate. Do not build the predicate function spec.\n\tUpdate comments.\n\t(Resolve_Name): Only reset Entity when necessary to avoid\n\tspurious visibility errors.\n\t(Check_Aspect_At_End_Of_Declarations): Handle consistently all\n\tPredicate aspects.\n\t* sem_ch3.adb (Analyze_Subtype_Declaration): Fix handling of\n\tprivate types with predicates.", "tree": {"sha": "c7efceaff9c3ccb7e822c3e2b124d9ac33bd88b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7efceaff9c3ccb7e822c3e2b124d9ac33bd88b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e347e6c92769196408720a027618bc67450abe61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e347e6c92769196408720a027618bc67450abe61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e347e6c92769196408720a027618bc67450abe61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e347e6c92769196408720a027618bc67450abe61/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b1647a50dda833a0640e66bb0bedb6c477b7561", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b1647a50dda833a0640e66bb0bedb6c477b7561", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b1647a50dda833a0640e66bb0bedb6c477b7561"}], "stats": {"total": 54, "additions": 36, "deletions": 18}, "files": [{"sha": "f0962ca0e2479165cf1c7699e56bf5dc6dc3aa3e", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347e6c92769196408720a027618bc67450abe61/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347e6c92769196408720a027618bc67450abe61/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=e347e6c92769196408720a027618bc67450abe61", "patch": "@@ -10114,11 +10114,11 @@ package body Sem_Ch13 is\n       then\n          return;\n \n-        --  Do not generate predicate bodies within a generic unit. The\n-        --  expressions have been analyzed already, and the bodies play\n-        --  no role if not within an executable unit. However, if a static\n-        --  predicate is present it must be processed for legality checks\n-        --  such as case coverage in an expression.\n+      --  Do not generate predicate bodies within a generic unit. The\n+      --  expressions have been analyzed already, and the bodies play no role\n+      --  if not within an executable unit. However, if a static predicate is\n+      --  present it must be processed for legality checks such as case\n+      --  coverage in an expression.\n \n       elsif Inside_A_Generic\n         and then not Has_Static_Predicate_Aspect (Typ)\n@@ -10782,7 +10782,9 @@ package body Sem_Ch13 is\n          --  also make its potential components accessible.\n \n          if not Analyzed (Freeze_Expr) and then Inside_A_Generic then\n-            if A_Id in Aspect_Dynamic_Predicate | Aspect_Predicate then\n+            if A_Id in Aspect_Dynamic_Predicate | Aspect_Predicate |\n+                       Aspect_Static_Predicate\n+            then\n                Push_Type (Ent);\n                Preanalyze_Spec_Expression (Freeze_Expr, Standard_Boolean);\n                Pop_Type (Ent);\n@@ -10813,6 +10815,7 @@ package body Sem_Ch13 is\n             if A_Id in Aspect_Dynamic_Predicate\n                      | Aspect_Predicate\n                      | Aspect_Priority\n+                     | Aspect_Static_Predicate\n             then\n                Push_Type (Ent);\n                Check_Aspect_At_Freeze_Point (ASN);\n@@ -10840,6 +10843,7 @@ package body Sem_Ch13 is\n                      | Aspect_Dynamic_Predicate\n                      | Aspect_Predicate\n                      | Aspect_Priority\n+                     | Aspect_Static_Predicate\n          then\n             Push_Type (Ent);\n             Preanalyze_Spec_Expression (End_Decl_Expr, T);\n@@ -15042,9 +15046,15 @@ package body Sem_Ch13 is\n                       or else N /= Selector_Name (Parent (N)))\n          then\n             Find_Direct_Name (N);\n-            Set_Entity (N, Empty);\n \n-         --  The name is component association needs no resolution\n+            --  Reset the Entity if N is overloaded since the entity may not\n+            --  be the correct one.\n+\n+            if Is_Overloaded (N) then\n+               Set_Entity (N, Empty);\n+            end if;\n+\n+         --  The name in a component association needs no resolution\n \n          elsif Nkind (N) = N_Component_Association then\n             Dummy := Resolve_Name (Expression (N));\n@@ -15087,24 +15097,23 @@ package body Sem_Ch13 is\n                   --  types. These will require special handling???.\n \n                   when Aspect_Invariant\n-                     | Aspect_Predicate\n                      | Aspect_Predicate_Failure\n                   =>\n                      null;\n \n                   when Aspect_Dynamic_Predicate\n                      | Aspect_Static_Predicate\n+                     | Aspect_Predicate\n                   =>\n-                     --  Build predicate function specification and preanalyze\n-                     --  expression after type replacement. The function\n-                     --  declaration must be analyzed in the scope of the type,\n-                     --  but the expression can reference components and\n-                     --  discriminants of the type.\n+                     --  Preanalyze expression after type replacement to catch\n+                     --  name resolution errors if the predicate function has\n+                     --  not been built yet.\n+                     --  Note that we cannot use Preanalyze_Spec_Expression\n+                     --  because of the special handling required for\n+                     --  quantifiers, see comments on Resolve_Aspect_Expression\n+                     --  above.\n \n                      if No (Predicate_Function (E)) then\n-                        Discard_Node\n-                          (Build_Predicate_Function_Declaration (E));\n-\n                         Push_Type (E);\n                         Resolve_Aspect_Expression (Expr);\n                         Pop_Type (E);"}, {"sha": "e9b445619ea1794353c7a1f85ce33ceb1a418f79", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e347e6c92769196408720a027618bc67450abe61/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e347e6c92769196408720a027618bc67450abe61/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=e347e6c92769196408720a027618bc67450abe61", "patch": "@@ -5779,7 +5779,16 @@ package body Sem_Ch3 is\n           ((In_Instance and then not Comes_From_Source (N))\n              or else No (Aspect_Specifications (N)))\n       then\n-         Set_Subprograms_For_Type (Id, Subprograms_For_Type (T));\n+         --  Inherit Subprograms_For_Type from the full view, if present\n+\n+         if Present (Full_View (T))\n+           and then Subprograms_For_Type (Full_View (T)) /= No_Elist\n+         then\n+            Set_Subprograms_For_Type\n+              (Id, Subprograms_For_Type (Full_View (T)));\n+         else\n+            Set_Subprograms_For_Type (Id, Subprograms_For_Type (T));\n+         end if;\n \n          --  If the current declaration created both a private and a full view,\n          --  then propagate Predicate_Function to the latter as well."}]}