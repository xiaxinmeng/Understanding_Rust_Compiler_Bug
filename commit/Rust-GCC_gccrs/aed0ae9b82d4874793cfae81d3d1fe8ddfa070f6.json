{"sha": "aed0ae9b82d4874793cfae81d3d1fe8ddfa070f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVkMGFlOWI4MmQ0ODc0NzkzY2ZhZTgxZDNkMWZlOGRkZmEwNzBmNg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-01-02T00:39:33Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-01-02T00:39:33Z"}, "message": "(plain_type_1): Distinguish some C integer types by name.\n\nFrom-SVN: r3046", "tree": {"sha": "882e159b60183a0745e05906ef0f871168d127a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/882e159b60183a0745e05906ef0f871168d127a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aed0ae9b82d4874793cfae81d3d1fe8ddfa070f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aed0ae9b82d4874793cfae81d3d1fe8ddfa070f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aed0ae9b82d4874793cfae81d3d1fe8ddfa070f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aed0ae9b82d4874793cfae81d3d1fe8ddfa070f6/comments", "author": null, "committer": null, "parents": [{"sha": "fcd40e959e06c5bfe91091eab9acb873a2e1ca06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcd40e959e06c5bfe91091eab9acb873a2e1ca06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcd40e959e06c5bfe91091eab9acb873a2e1ca06"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "b932fd0cc4fcf718b89be746ac39e2e48c7ba62d", "filename": "gcc/sdbout.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed0ae9b82d4874793cfae81d3d1fe8ddfa070f6/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed0ae9b82d4874793cfae81d3d1fe8ddfa070f6/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=aed0ae9b82d4874793cfae81d3d1fe8ddfa070f6", "patch": "@@ -462,6 +462,34 @@ plain_type_1 (type)\n     case INTEGER_TYPE:\n       {\n \tint size = int_size_in_bytes (type) * BITS_PER_UNIT;\n+\n+\t/* Carefully distinguish all the standard types of C,\n+\t   without messing up if the language is not C.\n+\t   Note that we check only for the names that contain spaces;\n+\t   other names might occur by coincidence in other languages.  */\n+\tif (TYPE_NAME (type) != 0\n+\t    && TREE_CODE (TYPE_NAME (type)) == TYPE_DECL\n+\t    && DECL_NAME (TYPE_NAME (type)) != 0\n+\t    && TREE_CODE (DECL_NAME (TYPE_NAME (type))) == IDENTIFIER_NODE)\n+\t  {\n+\t    char *name = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (type)));\n+\n+\t    if (!strcmp (name, \"unsigned char\"))\n+\t      return T_UCHAR;\n+\t    if (!strcmp (name, \"signed char\"))\n+\t      return T_CHAR;\n+\t    if (!strcmp (name, \"unsigned int\"))\n+\t      return T_UINT;\n+\t    if (!strcmp (name, \"short int\"))\n+\t      return T_SHORT;\n+\t    if (!strcmp (name, \"short unsigned int\"))\n+\t      return T_USHORT;\n+\t    if (!strcmp (name, \"long int\"))\n+\t      return T_LONG;\n+\t    if (!strcmp (name, \"long unsigned int\"))\n+\t      return T_ULONG;\n+\t  }\n+\n \tif (size == CHAR_TYPE_SIZE)\n \t  return (TREE_UNSIGNED (type) ? T_UCHAR : T_CHAR);\n \tif (size == SHORT_TYPE_SIZE)"}]}