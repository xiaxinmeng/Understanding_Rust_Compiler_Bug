{"sha": "8b0096b486441c247c10cc46b4265e01ac32f9c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIwMDk2YjQ4NjQ0MWMyNDdjMTBjYzQ2YjQyNjVlMDFhYzMyZjljNQ==", "commit": {"author": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-06-08T16:03:31Z"}, "committer": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-06-08T16:03:31Z"}, "message": "re PR target/20666 (SPARC builtins should be folded if possible)\n\n2005-06-08  James A. Morrison  <phython@gcc.gnu.org>\n\n        PR target/20666\n        * config/sparc/sparc.c (sparc_fold_builtin): New function\n        (sparc_vis_mul8x16): New function.\n        (sparc_handle_vis_mul8x16): New function.\n        (TARGET_FOLD_BUILTIN): Define to sparc_fold_builtin.\n\nFrom-SVN: r100762", "tree": {"sha": "7355cd842d6f5458a7159f5f1477871dc52fb794", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7355cd842d6f5458a7159f5f1477871dc52fb794"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b0096b486441c247c10cc46b4265e01ac32f9c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b0096b486441c247c10cc46b4265e01ac32f9c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b0096b486441c247c10cc46b4265e01ac32f9c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b0096b486441c247c10cc46b4265e01ac32f9c5/comments", "author": null, "committer": null, "parents": [{"sha": "a6cddf6e809206482551c1d4bf45fb9ca616a62b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6cddf6e809206482551c1d4bf45fb9ca616a62b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6cddf6e809206482551c1d4bf45fb9ca616a62b"}], "stats": {"total": 358, "additions": 358, "deletions": 0}, "files": [{"sha": "d0c3305043060d8ad7364ad117f9b22ebbcaa481", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0096b486441c247c10cc46b4265e01ac32f9c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0096b486441c247c10cc46b4265e01ac32f9c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b0096b486441c247c10cc46b4265e01ac32f9c5", "patch": "@@ -1,3 +1,11 @@\n+2005-06-08  James A. Morrison  <phython@gcc.gnu.org>\n+\n+\tPR target/20666\n+\t* config/sparc/sparc.c (sparc_fold_builtin): New function\n+\t(sparc_vis_mul8x16): New function.\n+\t(sparc_handle_vis_mul8x16): New function.\n+\t(TARGET_FOLD_BUILTIN): Define to sparc_fold_builtin.\n+\n 2005-06-08  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/rs6000.md (call_indirect_nonlocal_aix32): Prefer"}, {"sha": "6b46165c9c972be9461eb7564a70940569b0cf01", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 203, "deletions": 0, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0096b486441c247c10cc46b4265e01ac32f9c5/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0096b486441c247c10cc46b4265e01ac32f9c5/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=8b0096b486441c247c10cc46b4265e01ac32f9c5", "patch": "@@ -341,6 +341,9 @@ static void sparc_init_libfuncs (void);\n static void sparc_init_builtins (void);\n static void sparc_vis_init_builtins (void);\n static rtx sparc_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n+static tree sparc_fold_builtin (tree, tree, bool);\n+static int sparc_vis_mul8x16 (int, int);\n+static tree sparc_handle_vis_mul8x16 (int, tree, tree, tree);\n static void sparc_output_mi_thunk (FILE *, tree, HOST_WIDE_INT,\n \t\t\t\t   HOST_WIDE_INT, tree);\n static bool sparc_can_output_mi_thunk (tree, HOST_WIDE_INT,\n@@ -437,6 +440,8 @@ static bool fpu_option_set = false;\n \n #undef TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN sparc_expand_builtin\n+#undef TARGET_FOLD_BUILTIN\n+#define TARGET_FOLD_BUILTIN sparc_fold_builtin\n \n #if TARGET_TLS\n #undef TARGET_HAVE_TLS\n@@ -7904,6 +7909,204 @@ sparc_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \n   return op[0];\n }\n+\n+static int\n+sparc_vis_mul8x16 (int e8, int e16)\n+{\n+  return (e8 * e16 + 128) / 256;\n+}\n+\n+/* Multiply the vector elements in ELTS0 to the elements in ELTS1 as specified\n+   by FNCODE.  All of the elements in ELTS0 and ELTS1 lists must be integer\n+   constants.  A tree list with the results of the multiplications is returned,\n+   and each element in the list is of INNER_TYPE.  */\n+\n+static tree\n+sparc_handle_vis_mul8x16 (int fncode, tree inner_type, tree elts0, tree elts1)\n+{\n+  tree n_elts = NULL_TREE;\n+  int scale;\n+\n+  switch (fncode)\n+    {\n+    case CODE_FOR_fmul8x16_vis:\n+      for (; elts0 && elts1;\n+\t   elts0 = TREE_CHAIN (elts0), elts1 = TREE_CHAIN (elts1))\n+\t{\n+\t  int val\n+\t    = sparc_vis_mul8x16 (TREE_INT_CST_LOW (TREE_VALUE (elts0)),\n+\t\t\t\t TREE_INT_CST_LOW (TREE_VALUE (elts1)));\n+\t  n_elts = tree_cons (NULL_TREE,\n+\t\t\t      build_int_cst (inner_type, val),\n+\t\t\t      n_elts);\n+\t}\n+      break;\n+\n+    case CODE_FOR_fmul8x16au_vis:\n+      scale = TREE_INT_CST_LOW (TREE_VALUE (elts1));\n+\n+      for (; elts0; elts0 = TREE_CHAIN (elts0))\n+\t{\n+\t  int val\n+\t    = sparc_vis_mul8x16 (TREE_INT_CST_LOW (TREE_VALUE (elts0)),\n+\t\t\t\t scale);\n+\t  n_elts = tree_cons (NULL_TREE,\n+\t\t\t      build_int_cst (inner_type, val),\n+\t\t\t      n_elts);\n+\t}\n+      break;\n+\n+    case CODE_FOR_fmul8x16al_vis:\n+      scale = TREE_INT_CST_LOW (TREE_VALUE (TREE_CHAIN (elts1)));\n+\n+      for (; elts0; elts0 = TREE_CHAIN (elts0))\n+\t{\n+\t  int val\n+\t    = sparc_vis_mul8x16 (TREE_INT_CST_LOW (TREE_VALUE (elts0)),\n+\t\t\t\t scale);\n+\t  n_elts = tree_cons (NULL_TREE,\n+\t\t\t      build_int_cst (inner_type, val),\n+\t\t\t      n_elts);\n+\t}\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  return nreverse (n_elts);\n+\n+}\n+/* Handle TARGET_FOLD_BUILTIN target hook.\n+   Fold builtin functions for SPARC intrinsics.  If INGNORE is true the\n+   result of the function call is ignored.  NULL_TREE is returned if the\n+   function could not be folded.  */\n+\n+static tree\n+sparc_fold_builtin (tree fndecl, tree arglist, bool ignore)\n+{\n+  tree arg0, arg1, arg2;\n+  tree rtype = TREE_TYPE (TREE_TYPE (fndecl));\n+  \n+\n+  if (ignore && DECL_FUNCTION_CODE (fndecl) != CODE_FOR_alignaddrsi_vis\n+      && DECL_FUNCTION_CODE (fndecl) != CODE_FOR_alignaddrdi_vis)\n+    return build_int_cst (rtype, 0);\n+\n+  switch (DECL_FUNCTION_CODE (fndecl))\n+    {\n+    case CODE_FOR_fexpand_vis:\n+      arg0 = TREE_VALUE (arglist);\n+      STRIP_NOPS (arg0);\n+\n+      if (TREE_CODE (arg0) == VECTOR_CST)\n+\t{\n+\t  tree inner_type = TREE_TYPE (rtype);\n+\t  tree elts = TREE_VECTOR_CST_ELTS (arg0);\n+\t  tree n_elts = NULL_TREE;\n+\n+\t  for (; elts; elts = TREE_CHAIN (elts))\n+\t    {\n+\t      unsigned int val = TREE_INT_CST_LOW (TREE_VALUE (elts)) << 4;\n+\t      n_elts = tree_cons (NULL_TREE,\n+\t\t\t\t  build_int_cst (inner_type, val),\n+\t\t\t\t  n_elts);\n+\t    }\n+\t  return build_vector (rtype, nreverse (n_elts));\n+\t}\n+      break;\n+\n+    case CODE_FOR_fmul8x16_vis:\n+    case CODE_FOR_fmul8x16au_vis:\n+    case CODE_FOR_fmul8x16al_vis:\n+      arg0 = TREE_VALUE (arglist);\n+      arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+      STRIP_NOPS (arg0);\n+      STRIP_NOPS (arg1);\n+\n+      if (TREE_CODE (arg0) == VECTOR_CST && TREE_CODE (arg1) == VECTOR_CST)\n+\t{\n+\t  tree inner_type = TREE_TYPE (rtype);\n+\t  tree elts0 = TREE_VECTOR_CST_ELTS (arg0);\n+\t  tree elts1 = TREE_VECTOR_CST_ELTS (arg1);\n+\t  tree n_elts = sparc_handle_vis_mul8x16 (DECL_FUNCTION_CODE (fndecl),\n+\t\t\t\t\t\t  inner_type, elts0, elts1);\n+\n+\t  return build_vector (rtype, n_elts);\n+\t}\n+      break;\n+\n+    case CODE_FOR_fpmerge_vis:\n+      arg0 = TREE_VALUE (arglist);\n+      arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+      STRIP_NOPS (arg0);\n+      STRIP_NOPS (arg1);\n+\n+      if (TREE_CODE (arg0) == VECTOR_CST && TREE_CODE (arg1) == VECTOR_CST)\n+\t{\n+\t  tree elts0 = TREE_VECTOR_CST_ELTS (arg0);\n+\t  tree elts1 = TREE_VECTOR_CST_ELTS (arg1);\n+\t  tree n_elts = NULL_TREE;\n+\n+\t  for (; elts0 && elts1;\n+\t       elts0 = TREE_CHAIN (elts0), elts1 = TREE_CHAIN (elts1))\n+\t    {\n+\t      n_elts = tree_cons (NULL_TREE, TREE_VALUE (elts0), n_elts);\n+\t      n_elts = tree_cons (NULL_TREE, TREE_VALUE (elts1), n_elts);\n+\t    }\n+\n+\t  return build_vector (rtype, nreverse (n_elts));\n+\t}\n+      break;\n+\n+    case CODE_FOR_pdist_vis:\n+      arg0 = TREE_VALUE (arglist);\n+      arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+      arg2 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n+      STRIP_NOPS (arg0);\n+      STRIP_NOPS (arg1);\n+      STRIP_NOPS (arg2);\n+\n+      if (TREE_CODE (arg0) == VECTOR_CST\n+\t  && TREE_CODE (arg1) == VECTOR_CST\n+\t  && TREE_CODE (arg2) == INTEGER_CST)\n+\t{\n+\t  int overflow = 0;\n+\t  unsigned HOST_WIDE_INT low = TREE_INT_CST_LOW (arg2);\n+\t  HOST_WIDE_INT high = TREE_INT_CST_HIGH (arg2);\n+\t  tree elts0 = TREE_VECTOR_CST_ELTS (arg0);\n+\t  tree elts1 = TREE_VECTOR_CST_ELTS (arg1);\n+\n+\t  for (; elts0 && elts1;\n+\t       elts0 = TREE_CHAIN (elts0), elts1 = TREE_CHAIN (elts1))\n+\t    {\n+\t      unsigned HOST_WIDE_INT\n+\t\tlow0 = TREE_INT_CST_LOW (TREE_VALUE (elts0)),\n+\t\tlow1 = TREE_INT_CST_LOW (TREE_VALUE (elts1));\n+\t      HOST_WIDE_INT high0 = TREE_INT_CST_HIGH (TREE_VALUE (elts0));\n+\t      HOST_WIDE_INT high1 = TREE_INT_CST_HIGH (TREE_VALUE (elts1));\n+\n+\t      unsigned HOST_WIDE_INT l;\n+\t      HOST_WIDE_INT h;\n+\n+\t      overflow |= neg_double (low1, high1, &l, &h);\n+\t      overflow |= add_double (low0, high0, l, h, &l, &h);\n+\t      if (h < 0)\n+\t\toverflow |= neg_double (l, h, &l, &h);\n+\n+\t      overflow |= add_double (low, high, l, h, &low, &high);\n+\t    }\n+\n+\t  gcc_assert (overflow == 0);\n+\n+\t  return build_int_cst_wide (rtype, low, high);\n+\t}\n+\n+    default:\n+      break;\n+    }\n+  return NULL_TREE;\n+}\n \f\n int\n sparc_extra_constraint_check (rtx op, int c, int strict)"}, {"sha": "c3bdb1b54f91b6546ac7eda14be598be38e4e6a0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0096b486441c247c10cc46b4265e01ac32f9c5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0096b486441c247c10cc46b4265e01ac32f9c5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8b0096b486441c247c10cc46b4265e01ac32f9c5", "patch": "@@ -1,3 +1,13 @@\n+2005-06-08  James A. Morrison  <phython@gcc.gnu.org>\n+\n+\tPR target/20666\n+\t* gcc.target/sparc/fexpand-2.c: New.\n+\t* gcc.target/sparc/fpmerge-2.c: New.\n+\t* gcc.target/sparc/fpmul-2.c: New.\n+\t* gcc.target/sparc/noresult.c: New.\n+\t* gcc.target/sparc/pdist-2.c: New.\n+\t* gcc.target/sparc/pdist-3.c: New.\n+\n 2005-06-08  Alex V. Breger  <atrus.ru@atrus.ru>\n \n \tPR testsuite/21702"}, {"sha": "38b4e72fa09b69fb0b3facfc2a43c7d1247f3383", "filename": "gcc/testsuite/gcc.target/sparc/fexpand-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0096b486441c247c10cc46b4265e01ac32f9c5/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffexpand-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0096b486441c247c10cc46b4265e01ac32f9c5/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffexpand-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffexpand-2.c?ref=8b0096b486441c247c10cc46b4265e01ac32f9c5", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-final_cleanup -mcpu=ultrasparc -mvis\" } */\n+typedef short vec16 __attribute__((vector_size(8)));\n+typedef unsigned char vec8 __attribute__((vector_size(4)));\n+\n+vec16 foo () {\n+  vec8 a = {(unsigned char)1,(unsigned char)2,(unsigned char)4,(unsigned char)8};\n+  return __builtin_vis_fexpand (a);\n+}\n+\n+/* { dg-final { scan-tree-dump \"{ 16, 32, 64, 128 }\" \"final_cleanup\" } } */"}, {"sha": "ad66c199e448f4c498ed20ebd39888b28478c49e", "filename": "gcc/testsuite/gcc.target/sparc/fpmerge-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0096b486441c247c10cc46b4265e01ac32f9c5/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpmerge-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0096b486441c247c10cc46b4265e01ac32f9c5/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpmerge-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpmerge-2.c?ref=8b0096b486441c247c10cc46b4265e01ac32f9c5", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=ultrasparc -mvis -O1 -fdump-tree-final_cleanup\" } */\n+typedef unsigned char pixel __attribute__((vector_size(8)));\n+typedef unsigned char vec8 __attribute__((vector_size(4)));\n+\n+#define _(ARG) (unsigned char)ARG\n+\n+pixel foo () {\n+  vec8 a = { _(1), _(3), _(5), _(7) };\n+  vec8 b = { _(2), _(4), _(6), _(8) };\n+  return __builtin_vis_fpmerge (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"fpmerge\\t%\" } } */\n+/* { dg-final { scan-tree-dump \"{ 1, 2, 3, 4, 5, 6, 7, 8 }\" \"final_cleanup\" } } */"}, {"sha": "32170bda4e5ebaa8cf2c4a76878a36e883949b73", "filename": "gcc/testsuite/gcc.target/sparc/fpmul-2.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0096b486441c247c10cc46b4265e01ac32f9c5/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpmul-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0096b486441c247c10cc46b4265e01ac32f9c5/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpmul-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpmul-2.c?ref=8b0096b486441c247c10cc46b4265e01ac32f9c5", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=ultrasparc -mvis -O1 -fdump-tree-final_cleanup\" } */\n+\n+typedef int vec32 __attribute__((vector_size(8)));\n+typedef short vec16 __attribute__((vector_size(8)));\n+typedef unsigned char vec8 __attribute__((vector_size(8)));\n+\n+typedef unsigned char pixel __attribute__((vector_size(4)));\n+typedef short pixel16 __attribute__((vector_size(4)));\n+\n+vec16 foo1 () {\n+  pixel a = { (unsigned char)1, (unsigned char)2, (unsigned char)3, (unsigned char)4 };\n+  vec16 b = { (short)1, (short)2, (short)3, (short)4 };\n+  return __builtin_vis_fmul8x16 (a, b);\n+}\n+\n+vec16 foo1_1 () {\n+  pixel a = { (unsigned char)1, (unsigned char)1, (unsigned char)1, (unsigned char)1 };\n+  vec16 b = { (short)256, (short)512, (short)1024, (short)2048 };\n+  return __builtin_vis_fmul8x16 (a, b);\n+}\n+\n+vec16 foo1_2 () {\n+  pixel a = { (unsigned char)255, (unsigned char)255, (unsigned char)255, (unsigned char)255 };\n+  vec16 b = { (short)256, (short)512, (short)1024, (short)32767 };\n+  return __builtin_vis_fmul8x16 (a, b);\n+}\n+/* { dg-final { scan-assembler-not \"fmul8x16\\t%\" } } */\n+/* { dg-final { scan-tree-dump \"{ 0, 0, 0, 0 }\" \"final_cleanup\" } } */\n+/* { dg-final { scan-tree-dump \"{ 1, 2, 4, 8 }\" \"final_cleanup\" } } */\n+/* { dg-final { scan-tree-dump \"{ 255, 510, 1020, 32639 }\" \"final_cleanup\" } } */\n+\n+vec16 foo2 () {\n+  pixel a = { 1, 2, 3, 4 };\n+  pixel16 b = { 256, 512 };\n+  return __builtin_vis_fmul8x16au (a, b);\n+}\n+/* { dg-final { scan-assembler-not \"fmul8x16au\\t%\" } } */\n+/* { dg-final { scan-tree-dump \"{ 1, 2, 3, 4 }\" \"final_cleanup\" } } */\n+\n+vec16 foo3 () {\n+  pixel a = { 1, 2, 3, 4 };\n+  pixel16 b = { 256, 512 };\n+  return __builtin_vis_fmul8x16al (a, b);\n+}\n+/* { dg-final { scan-assembler-not \"fmul8x16al\\t%\" } } */\n+/* { dg-final { scan-tree-dump \"{ 2, 4, 6, 8 }\" \"final_cleanup\" } } */"}, {"sha": "f32805d35476b573abfaf58a605896afa9f638c0", "filename": "gcc/testsuite/gcc.target/sparc/noresult.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0096b486441c247c10cc46b4265e01ac32f9c5/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fnoresult.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0096b486441c247c10cc46b4265e01ac32f9c5/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fnoresult.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fnoresult.c?ref=8b0096b486441c247c10cc46b4265e01ac32f9c5", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=ultrasparc -mvis\" } */\n+typedef short vec16 __attribute__((vector_size(8)));\n+typedef char vec8 __attribute__((vector_size(4)));\n+\n+void foo (vec16 a) {\n+  __builtin_vis_fpack16 (a);\n+}\n+\n+/* { dg-final { scan-assembler-not \"fpack16\\t%\" } } */"}, {"sha": "0095d0e02f8c5cb44535eac01ea20e4cb3016e2d", "filename": "gcc/testsuite/gcc.target/sparc/pdist-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0096b486441c247c10cc46b4265e01ac32f9c5/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fpdist-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0096b486441c247c10cc46b4265e01ac32f9c5/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fpdist-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fpdist-2.c?ref=8b0096b486441c247c10cc46b4265e01ac32f9c5", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=ultrasparc -mvis -O1 -fdump-tree-final_cleanup\" } */\n+\n+typedef long long int64_t;\n+typedef unsigned char vec8 __attribute__((vector_size(8)));\n+\n+#define _(A) (unsigned char)A\n+\n+int64_t foo () {\n+  int64_t d = 2;\n+  vec8 a = { _(1), _(2), _(3), _(4), _(5), _(6), _(7), _(255) };\n+  vec8 b = { _(2), _(4), _(8), _(16), _(32), _(64), _(128), _(8) };\n+  d = __builtin_vis_pdist (a, b, d);\n+  return d;\n+}\n+\n+/* { dg-final { scan-assembler-not \"pdist\\t%\" } } */\n+/* { dg-final { scan-tree-dump \"return 475\" \"final_cleanup\" } } */"}, {"sha": "e4d6cb53ed078d7ff33b6ef4cb756fc3d18078ea", "filename": "gcc/testsuite/gcc.target/sparc/pdist-3.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0096b486441c247c10cc46b4265e01ac32f9c5/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fpdist-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0096b486441c247c10cc46b4265e01ac32f9c5/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fpdist-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fpdist-3.c?ref=8b0096b486441c247c10cc46b4265e01ac32f9c5", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mcpu=ultrasparc -mvis -O1\" } */\n+\n+typedef long long int64_t;\n+typedef unsigned char vec8 __attribute__((vector_size(8)));\n+\n+extern void abort ();\n+extern void exit (int);\n+\n+#define _(A) (unsigned char)A\n+\n+int64_t foo (vec8 a, vec8 b) {\n+  int64_t d = 2;\n+  d = __builtin_vis_pdist (a, b, d);\n+  return d;\n+}\n+\n+int64_t bar () {\n+  int64_t d = 2;\n+  vec8 a = { _(1), _(2), _(3), _(4), _(5), _(6), _(7), _(255) };\n+  vec8 b = { _(2), _(4), _(8), _(16), _(32), _(64), _(128), _(8) };\n+  d = __builtin_vis_pdist (a, b, d);\n+  return d;\n+}\n+\n+\n+static vec8 a = { 1, 2, 3, 4, 5, 6, 7, 255 };\n+static vec8 b = { 2, 4, 8, 16, 32, 64, 128, 8 };\n+\n+int main (int argc, char *argv[]) {\n+\n+  if (foo (a, b) != bar ())\n+    abort ();\n+\n+  exit (0);\n+}"}]}