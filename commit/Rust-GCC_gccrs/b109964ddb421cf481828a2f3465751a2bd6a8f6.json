{"sha": "b109964ddb421cf481828a2f3465751a2bd6a8f6", "node_id": "C_kwDOANBUbNoAKGIxMDk5NjRkZGI0MjFjZjQ4MTgyOGEyZjM0NjU3NTFhMmJkNmE4ZjY", "commit": {"author": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2023-03-14T09:51:38Z"}, "committer": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2023-03-14T09:53:17Z"}, "message": "ifcvt: Lower bitfields only if suitable for scalar register [PR 109005]\n\nThis patch fixes the condition check for eligilibity of lowering bitfields,\nwhere before we would check for non-BLKmode types, in the hope of excluding\nunsuitable aggregate types, we now check directly the representative is not an\naggregate type, i.e. suitable for a scalar register.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/109005\n\t* tree-if-conv.cc (get_bitfield_rep): Replace BLKmode check with\n\taggregate type check.", "tree": {"sha": "a5bb8295fe89bd319f620a80075c28be0efc8761", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5bb8295fe89bd319f620a80075c28be0efc8761"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b109964ddb421cf481828a2f3465751a2bd6a8f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b109964ddb421cf481828a2f3465751a2bd6a8f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b109964ddb421cf481828a2f3465751a2bd6a8f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b109964ddb421cf481828a2f3465751a2bd6a8f6/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72b52751c60abb327c73716259485d04b8eabe4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72b52751c60abb327c73716259485d04b8eabe4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72b52751c60abb327c73716259485d04b8eabe4f"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "ca1abd8656c6c47c314d2b2c9fa515e150d1703b", "filename": "gcc/tree-if-conv.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b109964ddb421cf481828a2f3465751a2bd6a8f6/gcc%2Ftree-if-conv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b109964ddb421cf481828a2f3465751a2bd6a8f6/gcc%2Ftree-if-conv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.cc?ref=b109964ddb421cf481828a2f3465751a2bd6a8f6", "patch": "@@ -3317,9 +3317,9 @@ get_bitfield_rep (gassign *stmt, bool write, tree *bitpos,\n   tree field_decl = TREE_OPERAND (comp_ref, 1);\n   tree rep_decl = DECL_BIT_FIELD_REPRESENTATIVE (field_decl);\n \n-  /* Bail out if the representative is BLKmode as we will not be able to\n-     vectorize this.  */\n-  if (TYPE_MODE (TREE_TYPE (rep_decl)) == E_BLKmode)\n+  /* Bail out if the representative is not a suitable type for a scalar\n+     register variable.  */\n+  if (!is_gimple_reg_type (TREE_TYPE (rep_decl)))\n     return NULL_TREE;\n \n   /* Bail out if the DECL_SIZE of the field_decl isn't the same as the BF's"}]}