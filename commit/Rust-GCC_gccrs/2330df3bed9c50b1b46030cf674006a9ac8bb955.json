{"sha": "2330df3bed9c50b1b46030cf674006a9ac8bb955", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMzMGRmM2JlZDljNTBiMWI0NjAzMGNmNjc0MDA2YTlhYzhiYjk1NQ==", "commit": {"author": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-04-19T09:59:53Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-04-19T09:59:53Z"}, "message": "[multiple changes]\n\n2005-04-19  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/plaf/metal/MetalLookAndFeel.java\n\t(initComponentDefaults): Added defaults for Menu, MenuBar\n\tMenuEntry fonts.\n\n2005-04-19  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/plaf/metal/MetalLookAndFeel.java\n\t(initComponentDefaults): Added Label.font.\n\t(initSystemColorDefaults): Added this method and adjusted the\n\tgeneral control color.\n\n2005-04-19  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/plaf/metal/MetalBorders.java:\n\tAdded.\n\t* javax/swing/plaf/metal/MetalButtonUI.java:\n\t(installDefaults): Install button font.\n\t* javax/swing/plaf/metal/MetalLookAndFeel.java:\n\t(initComponentDefaults): Added button border, font and margin.\n\tChanged components background color to the Metal current themes\n\tstandard color.\n\n2005-04-19  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/plaf/metal/MetalLookAndFeel.java\n\t(initComponentDefaults): Added to set Metal specific component\n\tdefaults.\n\n2005-04-19  Mark Wielaard  <mark@klomp.org>\n\n\t* javax/swing/plaf/metal/MetalLookAndFeel.java\n\t(initClassDefaults): Call super.initClassDefaults().\n\n2005-04-19  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/plaf/metal/MetalLookAndFeel.java\n\t(initClassDefaults): Added to include the *UI classes.\n\n2005-04-19  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/plaf/metal/MetalComboBoxUI.java:\n\tAdded.\n\t* javax/swing/plaf/metal/MetalDesktopIconUI.java:\n\tAdded.\n\t* javax/swing/plaf/metal/MetalInternalFrameUI.java:\n\tAdded.\n\t* javax/swing/plaf/metal/MetalPopupMenuSeparatorUI.java:\n\tAdded.\n\t* javax/swing/plaf/metal/MetalProgressBarUI.java:\n\tAdded.\n\t* javax/swing/plaf/metal/MetalRootPaneUI.java:\n\tAdded.\n\t* javax/swing/plaf/metal/MetalScrollBarUI.java:\n\tAdded.\n\t* javax/swing/plaf/metal/MetalSeparatorUI.java:\n\tAdded.\n\t* javax/swing/plaf/metal/MetalSliderUI.java:\n\tAdded.\n\t* javax/swing/plaf/metal/MetalSplitPaneUI.java:\n\tAdded.\n\t* javax/swing/plaf/metal/MetalTextFieldUI.java:\n\tAdded.\n\t* javax/swing/plaf/metal/MetalToggleButtonUI.java:\n\n2005-04-19  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/plaf/metal/MetalButtonUI.java:\n\tAdded skeleton class.\n\t* javax/swing/plaf/metal/MetalCheckBoxUI.java:\n\tAdded skeleton class.\n\t* javax/swing/plaf/metal/MetalLabelUI.java:\n\tAdded skeleton class.\n\t* javax/swing/plaf/metal/MetalRadioButtonUI.java:\n\tAdded skeleton class.\n\t* javax/swing/plaf/metal/MetalScrollPaneUI.java:\n\tAdded skeleton class.\n\t* javax/swing/plaf/metal/MetalTabbedPaneUI.java:\n\tAdded skeleton class.\n\n2005-04-19  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/UIDefaults.java:\n\tAdded API documentation for all methods.\n\n2005-04-19  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/UIDefaults.java\n\t(put): Now uses new checkAndPut method instead of checking\n\tdirectly.\n\t(putDefaults): Fixed so that it accepts null-values and\n\ttreats them like remove(key).\n\t(checkAndPut): Added. This checks for null-values and calls\n\tput or remove.\n\n2005-04-19  Michael Koch  <konqueror@gmx.de>\n\n\t* Makefile.am: Added new files.\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r98396", "tree": {"sha": "5b3008cdd47238bffbcd163cf0951c2ea0a15d37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b3008cdd47238bffbcd163cf0951c2ea0a15d37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2330df3bed9c50b1b46030cf674006a9ac8bb955", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2330df3bed9c50b1b46030cf674006a9ac8bb955", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2330df3bed9c50b1b46030cf674006a9ac8bb955", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2330df3bed9c50b1b46030cf674006a9ac8bb955/comments", "author": null, "committer": null, "parents": [{"sha": "d393cb7237f032cdd01c6a5651389ce81425f2f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d393cb7237f032cdd01c6a5651389ce81425f2f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d393cb7237f032cdd01c6a5651389ce81425f2f9"}], "stats": {"total": 2642, "additions": 2630, "deletions": 12}, "files": [{"sha": "7b78f9772586c80ae56c05f2e76df2492e15f774", "filename": "libjava/ChangeLog", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=2330df3bed9c50b1b46030cf674006a9ac8bb955", "patch": "@@ -1,3 +1,104 @@\n+2005-04-19  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/plaf/metal/MetalLookAndFeel.java\n+\t(initComponentDefaults): Added defaults for Menu, MenuBar\n+\tMenuEntry fonts.\n+\n+2005-04-19  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/plaf/metal/MetalLookAndFeel.java\n+\t(initComponentDefaults): Added Label.font.\n+\t(initSystemColorDefaults): Added this method and adjusted the\n+\tgeneral control color.\n+\n+2005-04-19  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/plaf/metal/MetalBorders.java:\n+\tAdded.\n+\t* javax/swing/plaf/metal/MetalButtonUI.java:\n+\t(installDefaults): Install button font.\n+\t* javax/swing/plaf/metal/MetalLookAndFeel.java:\n+\t(initComponentDefaults): Added button border, font and margin.\n+\tChanged components background color to the Metal current themes\n+\tstandard color.\n+\n+2005-04-19  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/plaf/metal/MetalLookAndFeel.java\n+\t(initComponentDefaults): Added to set Metal specific component\n+\tdefaults.\n+\n+2005-04-19  Mark Wielaard  <mark@klomp.org>\n+\n+\t* javax/swing/plaf/metal/MetalLookAndFeel.java\n+\t(initClassDefaults): Call super.initClassDefaults().\n+\n+2005-04-19  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/plaf/metal/MetalLookAndFeel.java\n+\t(initClassDefaults): Added to include the *UI classes.\n+\n+2005-04-19  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/plaf/metal/MetalComboBoxUI.java:\n+\tAdded.\n+\t* javax/swing/plaf/metal/MetalDesktopIconUI.java:\n+\tAdded.\n+\t* javax/swing/plaf/metal/MetalInternalFrameUI.java:\n+\tAdded.\n+\t* javax/swing/plaf/metal/MetalPopupMenuSeparatorUI.java:\n+\tAdded.\n+\t* javax/swing/plaf/metal/MetalProgressBarUI.java:\n+\tAdded.\n+\t* javax/swing/plaf/metal/MetalRootPaneUI.java:\n+\tAdded.\n+\t* javax/swing/plaf/metal/MetalScrollBarUI.java:\n+\tAdded.\n+\t* javax/swing/plaf/metal/MetalSeparatorUI.java:\n+\tAdded.\n+\t* javax/swing/plaf/metal/MetalSliderUI.java:\n+\tAdded.\n+\t* javax/swing/plaf/metal/MetalSplitPaneUI.java:\n+\tAdded.\n+\t* javax/swing/plaf/metal/MetalTextFieldUI.java:\n+\tAdded.\n+\t* javax/swing/plaf/metal/MetalToggleButtonUI.java:\n+\n+2005-04-19  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/plaf/metal/MetalButtonUI.java:\n+\tAdded skeleton class.\n+\t* javax/swing/plaf/metal/MetalCheckBoxUI.java:\n+\tAdded skeleton class.\n+\t* javax/swing/plaf/metal/MetalLabelUI.java:\n+\tAdded skeleton class.\n+\t* javax/swing/plaf/metal/MetalRadioButtonUI.java:\n+\tAdded skeleton class.\n+\t* javax/swing/plaf/metal/MetalScrollPaneUI.java:\n+\tAdded skeleton class.\n+\t* javax/swing/plaf/metal/MetalTabbedPaneUI.java:\n+\tAdded skeleton class.\n+\n+2005-04-19  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/UIDefaults.java:\n+\tAdded API documentation for all methods.\n+\n+2005-04-19  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/UIDefaults.java\n+\t(put): Now uses new checkAndPut method instead of checking\n+\tdirectly.\n+\t(putDefaults): Fixed so that it accepts null-values and\n+\ttreats them like remove(key).\n+\t(checkAndPut): Added. This checks for null-values and calls\n+\tput or remove.\n+\n+2005-04-19  Michael Koch  <konqueror@gmx.de>\n+\n+\t* Makefile.am: Added new files.\n+\t* Makefile.in: Regenerated.\n+\n 2005-04-19  Mark Wielaard  <mark@klomp.org>\n \n \t* java/lang/natRuntime.cc (insertSystemProperties): Set"}, {"sha": "0c78db61589832e9103cb83c30c4e3183b1e106c", "filename": "libjava/Makefile.am", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=2330df3bed9c50b1b46030cf674006a9ac8bb955", "patch": "@@ -1670,6 +1670,28 @@ javax/swing/plaf/basic/BasicLookAndFeel.java \\\n javax/swing/plaf/basic/BasicBorders.java \\\n javax/swing/plaf/basic/BasicIconFactory.java \\\n javax/swing/plaf/basic/ComboPopup.java \\\n+javax/swing/plaf/metal/MetalBorders.java \\\n+javax/swing/plaf/metal/MetalButtonUI.java \\\n+javax/swing/plaf/metal/MetalCheckBoxUI.java \\\n+javax/swing/plaf/metal/MetalComboBoxUI.java \\\n+javax/swing/plaf/metal/MetalDesktopIconUI.java \\\n+javax/swing/plaf/metal/MetalInternalFrameUI.java \\\n+javax/swing/plaf/metal/MetalLabelUI.java \\\n+javax/swing/plaf/metal/MetalPopupMenuSeparatorUI.java \\\n+javax/swing/plaf/metal/MetalProgressBarUI.java \\\n+javax/swing/plaf/metal/MetalRadioButtonUI.java \\\n+javax/swing/plaf/metal/MetalRootPaneUI.java \\\n+javax/swing/plaf/metal/MetalScrollBarUI.java \\\n+javax/swing/plaf/metal/MetalScrollPaneUI.java \\\n+javax/swing/plaf/metal/MetalSeparatorUI.java \\\n+javax/swing/plaf/metal/MetalSliderUI.java \\\n+javax/swing/plaf/metal/MetalSplitPaneUI.java \\\n+javax/swing/plaf/metal/MetalTabbedPaneUI.java \\\n+javax/swing/plaf/metal/MetalTextFieldUI.java \\\n+javax/swing/plaf/metal/MetalToggleButtonUI.java \\\n+javax/swing/plaf/metal/MetalToolBarUI.java \\\n+javax/swing/plaf/metal/MetalToolTipUI.java \\\n+javax/swing/plaf/metal/MetalTreeUI.java \\\n javax/swing/plaf/BorderUIResource.java \\\n javax/swing/plaf/UIResource.java \\\n javax/swing/plaf/ButtonUI.java \\"}, {"sha": "00c5302fa0596f875884702a0f7ed5de15a2ad27", "filename": "libjava/Makefile.in", "status": "modified", "additions": 204, "deletions": 6, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=2330df3bed9c50b1b46030cf674006a9ac8bb955", "patch": "@@ -1582,6 +1582,28 @@ am__libgcj0_convenience_la_SOURCES_DIST = prims.cc jni.cc exception.cc \\\n \tjavax/swing/plaf/basic/BasicBorders.java \\\n \tjavax/swing/plaf/basic/BasicIconFactory.java \\\n \tjavax/swing/plaf/basic/ComboPopup.java \\\n+\tjavax/swing/plaf/metal/MetalBorders.java \\\n+\tjavax/swing/plaf/metal/MetalButtonUI.java \\\n+\tjavax/swing/plaf/metal/MetalCheckBoxUI.java \\\n+\tjavax/swing/plaf/metal/MetalComboBoxUI.java \\\n+\tjavax/swing/plaf/metal/MetalDesktopIconUI.java \\\n+\tjavax/swing/plaf/metal/MetalInternalFrameUI.java \\\n+\tjavax/swing/plaf/metal/MetalLabelUI.java \\\n+\tjavax/swing/plaf/metal/MetalPopupMenuSeparatorUI.java \\\n+\tjavax/swing/plaf/metal/MetalProgressBarUI.java \\\n+\tjavax/swing/plaf/metal/MetalRadioButtonUI.java \\\n+\tjavax/swing/plaf/metal/MetalRootPaneUI.java \\\n+\tjavax/swing/plaf/metal/MetalScrollBarUI.java \\\n+\tjavax/swing/plaf/metal/MetalScrollPaneUI.java \\\n+\tjavax/swing/plaf/metal/MetalSeparatorUI.java \\\n+\tjavax/swing/plaf/metal/MetalSliderUI.java \\\n+\tjavax/swing/plaf/metal/MetalSplitPaneUI.java \\\n+\tjavax/swing/plaf/metal/MetalTabbedPaneUI.java \\\n+\tjavax/swing/plaf/metal/MetalTextFieldUI.java \\\n+\tjavax/swing/plaf/metal/MetalToggleButtonUI.java \\\n+\tjavax/swing/plaf/metal/MetalToolBarUI.java \\\n+\tjavax/swing/plaf/metal/MetalToolTipUI.java \\\n+\tjavax/swing/plaf/metal/MetalTreeUI.java \\\n \tjavax/swing/plaf/BorderUIResource.java \\\n \tjavax/swing/plaf/UIResource.java \\\n \tjavax/swing/plaf/ButtonUI.java \\\n@@ -2870,6 +2892,28 @@ am__objects_10 = gnu/awt/LightweightRedirector.lo \\\n \tjavax/swing/plaf/basic/BasicBorders.lo \\\n \tjavax/swing/plaf/basic/BasicIconFactory.lo \\\n \tjavax/swing/plaf/basic/ComboPopup.lo \\\n+\tjavax/swing/plaf/metal/MetalBorders.lo \\\n+\tjavax/swing/plaf/metal/MetalButtonUI.lo \\\n+\tjavax/swing/plaf/metal/MetalCheckBoxUI.lo \\\n+\tjavax/swing/plaf/metal/MetalComboBoxUI.lo \\\n+\tjavax/swing/plaf/metal/MetalDesktopIconUI.lo \\\n+\tjavax/swing/plaf/metal/MetalInternalFrameUI.lo \\\n+\tjavax/swing/plaf/metal/MetalLabelUI.lo \\\n+\tjavax/swing/plaf/metal/MetalPopupMenuSeparatorUI.lo \\\n+\tjavax/swing/plaf/metal/MetalProgressBarUI.lo \\\n+\tjavax/swing/plaf/metal/MetalRadioButtonUI.lo \\\n+\tjavax/swing/plaf/metal/MetalRootPaneUI.lo \\\n+\tjavax/swing/plaf/metal/MetalScrollBarUI.lo \\\n+\tjavax/swing/plaf/metal/MetalScrollPaneUI.lo \\\n+\tjavax/swing/plaf/metal/MetalSeparatorUI.lo \\\n+\tjavax/swing/plaf/metal/MetalSliderUI.lo \\\n+\tjavax/swing/plaf/metal/MetalSplitPaneUI.lo \\\n+\tjavax/swing/plaf/metal/MetalTabbedPaneUI.lo \\\n+\tjavax/swing/plaf/metal/MetalTextFieldUI.lo \\\n+\tjavax/swing/plaf/metal/MetalToggleButtonUI.lo \\\n+\tjavax/swing/plaf/metal/MetalToolBarUI.lo \\\n+\tjavax/swing/plaf/metal/MetalToolTipUI.lo \\\n+\tjavax/swing/plaf/metal/MetalTreeUI.lo \\\n \tjavax/swing/plaf/BorderUIResource.lo \\\n \tjavax/swing/plaf/UIResource.lo javax/swing/plaf/ButtonUI.lo \\\n \tjavax/swing/plaf/ComponentUI.lo javax/swing/plaf/LabelUI.lo \\\n@@ -5353,6 +5397,28 @@ javax/swing/plaf/basic/BasicLookAndFeel.java \\\n javax/swing/plaf/basic/BasicBorders.java \\\n javax/swing/plaf/basic/BasicIconFactory.java \\\n javax/swing/plaf/basic/ComboPopup.java \\\n+javax/swing/plaf/metal/MetalBorders.java \\\n+javax/swing/plaf/metal/MetalButtonUI.java \\\n+javax/swing/plaf/metal/MetalCheckBoxUI.java \\\n+javax/swing/plaf/metal/MetalComboBoxUI.java \\\n+javax/swing/plaf/metal/MetalDesktopIconUI.java \\\n+javax/swing/plaf/metal/MetalInternalFrameUI.java \\\n+javax/swing/plaf/metal/MetalLabelUI.java \\\n+javax/swing/plaf/metal/MetalPopupMenuSeparatorUI.java \\\n+javax/swing/plaf/metal/MetalProgressBarUI.java \\\n+javax/swing/plaf/metal/MetalRadioButtonUI.java \\\n+javax/swing/plaf/metal/MetalRootPaneUI.java \\\n+javax/swing/plaf/metal/MetalScrollBarUI.java \\\n+javax/swing/plaf/metal/MetalScrollPaneUI.java \\\n+javax/swing/plaf/metal/MetalSeparatorUI.java \\\n+javax/swing/plaf/metal/MetalSliderUI.java \\\n+javax/swing/plaf/metal/MetalSplitPaneUI.java \\\n+javax/swing/plaf/metal/MetalTabbedPaneUI.java \\\n+javax/swing/plaf/metal/MetalTextFieldUI.java \\\n+javax/swing/plaf/metal/MetalToggleButtonUI.java \\\n+javax/swing/plaf/metal/MetalToolBarUI.java \\\n+javax/swing/plaf/metal/MetalToolTipUI.java \\\n+javax/swing/plaf/metal/MetalTreeUI.java \\\n javax/swing/plaf/BorderUIResource.java \\\n javax/swing/plaf/UIResource.java \\\n javax/swing/plaf/ButtonUI.java \\\n@@ -12436,6 +12502,78 @@ javax/swing/plaf/basic/BasicIconFactory.lo:  \\\n javax/swing/plaf/basic/ComboPopup.lo:  \\\n \tjavax/swing/plaf/basic/$(am__dirstamp) \\\n \tjavax/swing/plaf/basic/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/plaf/metal/$(am__dirstamp):\n+\t@$(mkdir_p) javax/swing/plaf/metal\n+\t@: > javax/swing/plaf/metal/$(am__dirstamp)\n+javax/swing/plaf/metal/$(DEPDIR)/$(am__dirstamp):\n+\t@$(mkdir_p) javax/swing/plaf/metal/$(DEPDIR)\n+\t@: > javax/swing/plaf/metal/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/plaf/metal/MetalBorders.lo:  \\\n+\tjavax/swing/plaf/metal/$(am__dirstamp) \\\n+\tjavax/swing/plaf/metal/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/plaf/metal/MetalButtonUI.lo:  \\\n+\tjavax/swing/plaf/metal/$(am__dirstamp) \\\n+\tjavax/swing/plaf/metal/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/plaf/metal/MetalCheckBoxUI.lo:  \\\n+\tjavax/swing/plaf/metal/$(am__dirstamp) \\\n+\tjavax/swing/plaf/metal/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/plaf/metal/MetalComboBoxUI.lo:  \\\n+\tjavax/swing/plaf/metal/$(am__dirstamp) \\\n+\tjavax/swing/plaf/metal/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/plaf/metal/MetalDesktopIconUI.lo:  \\\n+\tjavax/swing/plaf/metal/$(am__dirstamp) \\\n+\tjavax/swing/plaf/metal/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/plaf/metal/MetalInternalFrameUI.lo:  \\\n+\tjavax/swing/plaf/metal/$(am__dirstamp) \\\n+\tjavax/swing/plaf/metal/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/plaf/metal/MetalLabelUI.lo:  \\\n+\tjavax/swing/plaf/metal/$(am__dirstamp) \\\n+\tjavax/swing/plaf/metal/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/plaf/metal/MetalPopupMenuSeparatorUI.lo:  \\\n+\tjavax/swing/plaf/metal/$(am__dirstamp) \\\n+\tjavax/swing/plaf/metal/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/plaf/metal/MetalProgressBarUI.lo:  \\\n+\tjavax/swing/plaf/metal/$(am__dirstamp) \\\n+\tjavax/swing/plaf/metal/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/plaf/metal/MetalRadioButtonUI.lo:  \\\n+\tjavax/swing/plaf/metal/$(am__dirstamp) \\\n+\tjavax/swing/plaf/metal/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/plaf/metal/MetalRootPaneUI.lo:  \\\n+\tjavax/swing/plaf/metal/$(am__dirstamp) \\\n+\tjavax/swing/plaf/metal/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/plaf/metal/MetalScrollBarUI.lo:  \\\n+\tjavax/swing/plaf/metal/$(am__dirstamp) \\\n+\tjavax/swing/plaf/metal/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/plaf/metal/MetalScrollPaneUI.lo:  \\\n+\tjavax/swing/plaf/metal/$(am__dirstamp) \\\n+\tjavax/swing/plaf/metal/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/plaf/metal/MetalSeparatorUI.lo:  \\\n+\tjavax/swing/plaf/metal/$(am__dirstamp) \\\n+\tjavax/swing/plaf/metal/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/plaf/metal/MetalSliderUI.lo:  \\\n+\tjavax/swing/plaf/metal/$(am__dirstamp) \\\n+\tjavax/swing/plaf/metal/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/plaf/metal/MetalSplitPaneUI.lo:  \\\n+\tjavax/swing/plaf/metal/$(am__dirstamp) \\\n+\tjavax/swing/plaf/metal/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/plaf/metal/MetalTabbedPaneUI.lo:  \\\n+\tjavax/swing/plaf/metal/$(am__dirstamp) \\\n+\tjavax/swing/plaf/metal/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/plaf/metal/MetalTextFieldUI.lo:  \\\n+\tjavax/swing/plaf/metal/$(am__dirstamp) \\\n+\tjavax/swing/plaf/metal/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/plaf/metal/MetalToggleButtonUI.lo:  \\\n+\tjavax/swing/plaf/metal/$(am__dirstamp) \\\n+\tjavax/swing/plaf/metal/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/plaf/metal/MetalToolBarUI.lo:  \\\n+\tjavax/swing/plaf/metal/$(am__dirstamp) \\\n+\tjavax/swing/plaf/metal/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/plaf/metal/MetalToolTipUI.lo:  \\\n+\tjavax/swing/plaf/metal/$(am__dirstamp) \\\n+\tjavax/swing/plaf/metal/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/plaf/metal/MetalTreeUI.lo:  \\\n+\tjavax/swing/plaf/metal/$(am__dirstamp) \\\n+\tjavax/swing/plaf/metal/$(DEPDIR)/$(am__dirstamp)\n javax/swing/plaf/$(am__dirstamp):\n \t@$(mkdir_p) javax/swing/plaf\n \t@: > javax/swing/plaf/$(am__dirstamp)\n@@ -12469,12 +12607,6 @@ javax/swing/plaf/TreeUI.lo: javax/swing/plaf/$(am__dirstamp) \\\n \tjavax/swing/plaf/$(DEPDIR)/$(am__dirstamp)\n javax/swing/plaf/ViewportUI.lo: javax/swing/plaf/$(am__dirstamp) \\\n \tjavax/swing/plaf/$(DEPDIR)/$(am__dirstamp)\n-javax/swing/plaf/metal/$(am__dirstamp):\n-\t@$(mkdir_p) javax/swing/plaf/metal\n-\t@: > javax/swing/plaf/metal/$(am__dirstamp)\n-javax/swing/plaf/metal/$(DEPDIR)/$(am__dirstamp):\n-\t@$(mkdir_p) javax/swing/plaf/metal/$(DEPDIR)\n-\t@: > javax/swing/plaf/metal/$(DEPDIR)/$(am__dirstamp)\n javax/swing/plaf/metal/DefaultMetalTheme.lo:  \\\n \tjavax/swing/plaf/metal/$(am__dirstamp) \\\n \tjavax/swing/plaf/metal/$(DEPDIR)/$(am__dirstamp)\n@@ -19175,10 +19307,54 @@ mostlyclean-compile:\n \t-rm -f javax/swing/plaf/basic/ComboPopup.lo\n \t-rm -f javax/swing/plaf/metal/DefaultMetalTheme.$(OBJEXT)\n \t-rm -f javax/swing/plaf/metal/DefaultMetalTheme.lo\n+\t-rm -f javax/swing/plaf/metal/MetalBorders.$(OBJEXT)\n+\t-rm -f javax/swing/plaf/metal/MetalBorders.lo\n+\t-rm -f javax/swing/plaf/metal/MetalButtonUI.$(OBJEXT)\n+\t-rm -f javax/swing/plaf/metal/MetalButtonUI.lo\n+\t-rm -f javax/swing/plaf/metal/MetalCheckBoxUI.$(OBJEXT)\n+\t-rm -f javax/swing/plaf/metal/MetalCheckBoxUI.lo\n+\t-rm -f javax/swing/plaf/metal/MetalComboBoxUI.$(OBJEXT)\n+\t-rm -f javax/swing/plaf/metal/MetalComboBoxUI.lo\n+\t-rm -f javax/swing/plaf/metal/MetalDesktopIconUI.$(OBJEXT)\n+\t-rm -f javax/swing/plaf/metal/MetalDesktopIconUI.lo\n+\t-rm -f javax/swing/plaf/metal/MetalInternalFrameUI.$(OBJEXT)\n+\t-rm -f javax/swing/plaf/metal/MetalInternalFrameUI.lo\n+\t-rm -f javax/swing/plaf/metal/MetalLabelUI.$(OBJEXT)\n+\t-rm -f javax/swing/plaf/metal/MetalLabelUI.lo\n \t-rm -f javax/swing/plaf/metal/MetalLookAndFeel.$(OBJEXT)\n \t-rm -f javax/swing/plaf/metal/MetalLookAndFeel.lo\n+\t-rm -f javax/swing/plaf/metal/MetalPopupMenuSeparatorUI.$(OBJEXT)\n+\t-rm -f javax/swing/plaf/metal/MetalPopupMenuSeparatorUI.lo\n+\t-rm -f javax/swing/plaf/metal/MetalProgressBarUI.$(OBJEXT)\n+\t-rm -f javax/swing/plaf/metal/MetalProgressBarUI.lo\n+\t-rm -f javax/swing/plaf/metal/MetalRadioButtonUI.$(OBJEXT)\n+\t-rm -f javax/swing/plaf/metal/MetalRadioButtonUI.lo\n+\t-rm -f javax/swing/plaf/metal/MetalRootPaneUI.$(OBJEXT)\n+\t-rm -f javax/swing/plaf/metal/MetalRootPaneUI.lo\n+\t-rm -f javax/swing/plaf/metal/MetalScrollBarUI.$(OBJEXT)\n+\t-rm -f javax/swing/plaf/metal/MetalScrollBarUI.lo\n+\t-rm -f javax/swing/plaf/metal/MetalScrollPaneUI.$(OBJEXT)\n+\t-rm -f javax/swing/plaf/metal/MetalScrollPaneUI.lo\n+\t-rm -f javax/swing/plaf/metal/MetalSeparatorUI.$(OBJEXT)\n+\t-rm -f javax/swing/plaf/metal/MetalSeparatorUI.lo\n+\t-rm -f javax/swing/plaf/metal/MetalSliderUI.$(OBJEXT)\n+\t-rm -f javax/swing/plaf/metal/MetalSliderUI.lo\n+\t-rm -f javax/swing/plaf/metal/MetalSplitPaneUI.$(OBJEXT)\n+\t-rm -f javax/swing/plaf/metal/MetalSplitPaneUI.lo\n+\t-rm -f javax/swing/plaf/metal/MetalTabbedPaneUI.$(OBJEXT)\n+\t-rm -f javax/swing/plaf/metal/MetalTabbedPaneUI.lo\n+\t-rm -f javax/swing/plaf/metal/MetalTextFieldUI.$(OBJEXT)\n+\t-rm -f javax/swing/plaf/metal/MetalTextFieldUI.lo\n \t-rm -f javax/swing/plaf/metal/MetalTheme.$(OBJEXT)\n \t-rm -f javax/swing/plaf/metal/MetalTheme.lo\n+\t-rm -f javax/swing/plaf/metal/MetalToggleButtonUI.$(OBJEXT)\n+\t-rm -f javax/swing/plaf/metal/MetalToggleButtonUI.lo\n+\t-rm -f javax/swing/plaf/metal/MetalToolBarUI.$(OBJEXT)\n+\t-rm -f javax/swing/plaf/metal/MetalToolBarUI.lo\n+\t-rm -f javax/swing/plaf/metal/MetalToolTipUI.$(OBJEXT)\n+\t-rm -f javax/swing/plaf/metal/MetalToolTipUI.lo\n+\t-rm -f javax/swing/plaf/metal/MetalTreeUI.$(OBJEXT)\n+\t-rm -f javax/swing/plaf/metal/MetalTreeUI.lo\n \t-rm -f javax/swing/table/AbstractTableModel.$(OBJEXT)\n \t-rm -f javax/swing/table/AbstractTableModel.lo\n \t-rm -f javax/swing/table/DefaultTableCellRenderer.$(OBJEXT)\n@@ -21821,8 +21997,30 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@javax/swing/plaf/basic/$(DEPDIR)/BasicViewportUI.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/swing/plaf/basic/$(DEPDIR)/ComboPopup.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/swing/plaf/metal/$(DEPDIR)/DefaultMetalTheme.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/plaf/metal/$(DEPDIR)/MetalBorders.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/plaf/metal/$(DEPDIR)/MetalButtonUI.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/plaf/metal/$(DEPDIR)/MetalCheckBoxUI.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/plaf/metal/$(DEPDIR)/MetalComboBoxUI.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/plaf/metal/$(DEPDIR)/MetalDesktopIconUI.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/plaf/metal/$(DEPDIR)/MetalInternalFrameUI.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/plaf/metal/$(DEPDIR)/MetalLabelUI.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/swing/plaf/metal/$(DEPDIR)/MetalLookAndFeel.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/plaf/metal/$(DEPDIR)/MetalPopupMenuSeparatorUI.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/plaf/metal/$(DEPDIR)/MetalProgressBarUI.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/plaf/metal/$(DEPDIR)/MetalRadioButtonUI.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/plaf/metal/$(DEPDIR)/MetalRootPaneUI.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/plaf/metal/$(DEPDIR)/MetalScrollBarUI.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/plaf/metal/$(DEPDIR)/MetalScrollPaneUI.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/plaf/metal/$(DEPDIR)/MetalSeparatorUI.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/plaf/metal/$(DEPDIR)/MetalSliderUI.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/plaf/metal/$(DEPDIR)/MetalSplitPaneUI.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/plaf/metal/$(DEPDIR)/MetalTabbedPaneUI.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/plaf/metal/$(DEPDIR)/MetalTextFieldUI.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/swing/plaf/metal/$(DEPDIR)/MetalTheme.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/plaf/metal/$(DEPDIR)/MetalToggleButtonUI.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/plaf/metal/$(DEPDIR)/MetalToolBarUI.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/plaf/metal/$(DEPDIR)/MetalToolTipUI.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/plaf/metal/$(DEPDIR)/MetalTreeUI.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/swing/table/$(DEPDIR)/AbstractTableModel.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/swing/table/$(DEPDIR)/DefaultTableCellRenderer.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/swing/table/$(DEPDIR)/DefaultTableColumnModel.Plo@am__quote@"}, {"sha": "b679ff35209c1d5532a3c2dc71644781b8dd8d1b", "filename": "libjava/javax/swing/UIDefaults.java", "status": "modified", "additions": 314, "deletions": 6, "changes": 320, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2FUIDefaults.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2FUIDefaults.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FUIDefaults.java?ref=2330df3bed9c50b1b46030cf674006a9ac8bb955", "patch": "@@ -64,8 +64,14 @@\n  */\n public class UIDefaults extends Hashtable\n {\n+\n+  /** Our ResourceBundles. */\n   private LinkedList bundles;\n+\n+  /** The default locale. */\n   private Locale defaultLocale;\n+\n+  /** We use this for firing PropertyChangeEvents. */\n   private PropertyChangeSupport propertyChangeSupport;\n \n   public static interface ActiveValue\n@@ -208,15 +214,27 @@ public Object createValue(UIDefaults table)\n     }\n   }\n \n+  /** Our serialVersionUID for serialization. */\n   private static final long serialVersionUID = 7341222528856548117L;\n \n+  /**\n+   * Constructs a new empty UIDefaults instance.\n+   */\n   public UIDefaults()\n   {\n     bundles = new LinkedList();\n     defaultLocale = Locale.getDefault();\n     propertyChangeSupport = new PropertyChangeSupport(this);\n   }\n \n+  /**\n+   * Constructs a new UIDefaults instance and loads the specified entries.\n+   * The entries are expected to come in pairs, that means\n+   * <code>entries[0]</code> is a key, <code>entries[1]</code> is a value,\n+   * <code>entries[2]</code> a key and so forth.\n+   *\n+   * @param entries the entries to initialize the UIDefaults instance with\n+   */\n   public UIDefaults(Object[] entries)\n   {\n     this();\n@@ -225,11 +243,24 @@ public UIDefaults(Object[] entries)\n       put(entries[2 * i], entries[2 * i + 1]);\n   }\n \n+  /**\n+   * Returns the entry for the specified <code>key</code> in the default\n+   * locale.\n+   *\n+   * @return the entry for the specified <code>key</code>\n+   */\n   public Object get(Object key)\n   {\n     return this.get(key, getDefaultLocale());\n   }\n \n+  /**\n+   * Returns the entry for the specified <code>key</code> in the Locale\n+   * <code>loc</code>.\n+   *\n+   * @param key the key for which we return the value\n+   * @param loc the locale\n+   */\n   public Object get(Object key, Locale loc)\n   {\n     Object obj = null;\n@@ -284,133 +315,344 @@ else if (obj instanceof ActiveValue)\n     return obj;\n   }\n \n+  /**\n+   * Puts a key and value into this UIDefaults object.<br>\n+   * In contrast to\n+   * {@link java.util.Hashtable}s <code>null</code>-values are accepted\n+   * here and treated like #remove(key).\n+   * <br>\n+   * This fires a PropertyChangeEvent with key as name and the old and new\n+   * values.\n+   *\n+   * @param key the key to put into the map\n+   * @param value the value to put into the map\n+   *\n+   * @return the old value for key or <code>null</code> if <code>key</code>\n+   *     had no value assigned\n+   */\n   public Object put(Object key, Object value)\n   {\n-    Object old;\n-    if (value != null)\n-      old = super.put(key, value);\n-    else\n-      old = super.remove(key);\n+    Object old = checkAndPut(key, value);\n+\n     if (key instanceof String && old != value)\n       firePropertyChange((String) key, old, value);\n     return old;\n   }\n \n+  /**\n+   * Puts a set of key-value pairs into the map.\n+   * The entries are expected to come in pairs, that means\n+   * <code>entries[0]</code> is a key, <code>entries[1]</code> is a value,\n+   * <code>entries[2]</code> a key and so forth.\n+   * <br>\n+   * If a value is <code>null</code> it is treated like #remove(key).\n+   * <br>\n+   * This unconditionally fires a PropertyChangeEvent with\n+   * <code>&apos;UIDefaults&apos;</code> as name and <code>null</code> for\n+   * old and new value.\n+   *\n+   * @param entries the entries to be put into the map\n+   */\n   public void putDefaults(Object[] entries)\n   {\n     for (int i = 0; (2 * i + 1) < entries.length; ++i)\n   {\n-        super.put(entries[2 * i], entries[2 * i + 1]);\n+        checkAndPut(entries[2 * i], entries[2 * i + 1]);\n       }\n     firePropertyChange(\"UIDefaults\", null, null);\n   }\n \n+  /**\n+   * Checks the value for <code>null</code> and put it into the Hashtable, if\n+   * it is not <code>null</code>. If the value is <code>null</code> then\n+   * remove the corresponding key.\n+   *\n+   * @param key the key to put into this UIDefauls table\n+   * @param value the value to put into this UIDefaults table\n+   *\n+   * @return the old value for <code>key</code>\n+   */\n+  private Object checkAndPut(Object key, Object value)\n+  {\n+    Object old;\n+\n+    if (value != null)\n+      old = super.put(key, value);\n+    else\n+      old = super.remove(key);\n+\n+    return old;\n+  }\n+\n+  /**\n+   * Returns a font entry for the default locale.\n+   *\n+   * @param key the key to the requested entry\n+   *\n+   * @return the font entry for <code>key</code> or null if no such entry\n+   *     exists\n+   */\n   public Font getFont(Object key)\n   {\n     Object o = get(key);\n     return o instanceof Font ? (Font) o : null;\n   }\n \n+  /**\n+   * Returns a font entry for a specic locale.\n+   *\n+   * @param key the key to the requested entry\n+   * @param locale the locale to the requested entry\n+   *\n+   * @return the font entry for <code>key</code> or null if no such entry\n+   *     exists\n+   */\n   public Font getFont(Object key, Locale l)\n   {\n     Object o = get(key, l);\n     return o instanceof Font ? (Font) o : null;\n   }\n \n+  /**\n+   * Returns a color entry for the default locale.\n+   *\n+   * @param key the key to the requested entry\n+   *\n+   * @return the color entry for <code>key</code> or null if no such entry\n+   *     exists\n+   */\n   public Color getColor(Object key)\n   {\n     Object o = get(key);\n     return o instanceof Color ? (Color) o : null;\n   }\n \n+  /**\n+   * Returns a color entry for a specic locale.\n+   *\n+   * @param key the key to the requested entry\n+   * @param locale the locale to the requested entry\n+   *\n+   * @return the color entry for <code>key</code> or null if no such entry\n+   *     exists\n+   */\n   public Color getColor(Object key, Locale l)\n   {\n     Object o = get(key, l);\n     return o instanceof Color ? (Color) o : null;\n   }\n \n+  /**\n+   * Returns an icon entry for the default locale.\n+   *\n+   * @param key the key to the requested entry\n+   *\n+   * @return the icon entry for <code>key</code> or null if no such entry\n+   *     exists\n+   */\n   public Icon getIcon(Object key)\n   {\n     Object o = get(key);\n     return o instanceof Icon ? (Icon) o : null;\n   }\n \n+  /**\n+   * Returns an icon entry for a specic locale.\n+   *\n+   * @param key the key to the requested entry\n+   * @param locale the locale to the requested entry\n+   *\n+   * @return the icon entry for <code>key</code> or null if no such entry\n+   *     exists\n+   */\n   public Icon getIcon(Object key, Locale l)\n   {\n     Object o = get(key, l);\n     return o instanceof Icon ? (Icon) o : null;\n   }\n \n+  /**\n+   * Returns a border entry for the default locale.\n+   *\n+   * @param key the key to the requested entry\n+   *\n+   * @return the border entry for <code>key</code> or null if no such entry\n+   *     exists\n+   */\n   public Border getBorder(Object key)\n   {\n     Object o = get(key);\n     return o instanceof Border ? (Border) o : null;\n   }\n \n+  /**\n+   * Returns a border entry for a specic locale.\n+   *\n+   * @param key the key to the requested entry\n+   * @param locale the locale to the requested entry\n+   *\n+   * @return the border entry for <code>key</code> or null if no such entry\n+   *     exists\n+   */\n   public Border getBorder(Object key, Locale l)\n   {\n     Object o = get(key, l);\n     return o instanceof Border ? (Border) o : null;\n   }\n \n+  /**\n+   * Returns a string entry for the default locale.\n+   *\n+   * @param key the key to the requested entry\n+   *\n+   * @return the string entry for <code>key</code> or null if no such entry\n+   *     exists\n+   */\n   public String getString(Object key)\n   {\n     Object o = get(key);\n     return o instanceof String ? (String) o : null;\n   }\n \n+  /**\n+   * Returns a string entry for a specic locale.\n+   *\n+   * @param key the key to the requested entry\n+   * @param locale the locale to the requested entry\n+   *\n+   * @return the string entry for <code>key</code> or null if no such entry\n+   *     exists\n+   */\n   public String getString(Object key, Locale l)\n   {\n     Object o = get(key, l);\n     return o instanceof String ? (String) o : null;\n   }\n \n+  /**\n+   * Returns an integer entry for the default locale.\n+   *\n+   * @param key the key to the requested entry\n+   *\n+   * @return the integer entry for <code>key</code> or null if no such entry\n+   *     exists\n+   */\n   public int getInt(Object key)\n   {\n     Object o = get(key);\n     return o instanceof Integer ? ((Integer) o).intValue() : 0;\n   }\n \n+  /**\n+   * Returns an integer entry for a specic locale.\n+   *\n+   * @param key the key to the requested entry\n+   * @param locale the locale to the requested entry\n+   *\n+   * @return the integer entry for <code>key</code> or null if no such entry\n+   *     exists\n+   */\n   public int getInt(Object key, Locale l)\n   {\n     Object o = get(key, l);\n     return o instanceof Integer ? ((Integer) o).intValue() : 0;\n   }\n \n+  /**\n+   * Returns a boolean entry for the default locale.\n+   *\n+   * @param key the key to the requested entry\n+   *\n+   * @return the boolean entry for <code>key</code> or null if no such entry\n+   *     exists\n+   */\n   public boolean getBoolean(Object key)\n   {\n     return Boolean.TRUE.equals(get(key));\n   }\n \n+  /**\n+   * Returns a boolean entry for a specic locale.\n+   *\n+   * @param key the key to the requested entry\n+   * @param locale the locale to the requested entry\n+   *\n+   * @return the boolean entry for <code>key</code> or null if no such entry\n+   *     exists\n+   */\n   public boolean getBoolean(Object key, Locale l)\n   {\n     return Boolean.TRUE.equals(get(key, l));\n   }\n \n+  /**\n+   * Returns an insets entry for the default locale.\n+   *\n+   * @param key the key to the requested entry\n+   *\n+   * @return the insets entry for <code>key</code> or null if no such entry\n+   *     exists\n+   */\n   public Insets getInsets(Object key) \n   {\n     Object o = get(key);\n     return o instanceof Insets ? (Insets) o : null;\n   }\n \n+  /**\n+   * Returns an insets entry for a specic locale.\n+   *\n+   * @param key the key to the requested entry\n+   * @param locale the locale to the requested entry\n+   *\n+   * @return the boolean entry for <code>key</code> or null if no such entry\n+   *     exists\n+   */\n   public Insets getInsets(Object key, Locale l) \n   {\n     Object o = get(key, l);\n     return o instanceof Insets ? (Insets) o : null;\n   }\n \n+  /**\n+   * Returns a dimension entry for the default locale.\n+   *\n+   * @param key the key to the requested entry\n+   *\n+   * @return the dimension entry for <code>key</code> or null if no such entry\n+   *     exists\n+   */\n   public Dimension getDimension(Object key) \n   {\n     Object o = get(key);\n     return o instanceof Dimension ? (Dimension) o : null;\n   }\n \n+  /**\n+   * Returns a dimension entry for a specic locale.\n+   *\n+   * @param key the key to the requested entry\n+   * @param locale the locale to the requested entry\n+   *\n+   * @return the boolean entry for <code>key</code> or null if no such entry\n+   *     exists\n+   */\n   public Dimension getDimension(Object key, Locale l) \n   {\n     Object o = get(key, l);\n     return o instanceof Dimension ? (Dimension) o : null;\n   }\n \n+  /**\n+   * Returns the ComponentUI class that renders a component. <code>id</code>\n+   * is the ID for which the String value of the classname is stored in\n+   * this UIDefaults map.\n+   *\n+   * @param id the ID of the UI class\n+   * @param loader the ClassLoader to use\n+   *\n+   * @return the UI class for <code>id</code>\n+   */\n   public Class getUIClass(String id, ClassLoader loader)\n   {\n     String className = (String) get (id);\n@@ -428,16 +670,38 @@ public Class getUIClass(String id, ClassLoader loader)\n       }\n   }\n \n+  /**\n+   * Returns the ComponentUI class that renders a component. <code>id</code>\n+   * is the ID for which the String value of the classname is stored in\n+   * this UIDefaults map.\n+   *\n+   * @param id the ID of the UI class\n+   *\n+   * @return the UI class for <code>id</code>\n+   */\n   public Class getUIClass(String id)\n   {\n     return getUIClass (id, null);\n   }\n \n+  /**\n+   * If a key is requested in #get(key) that has no value, this method\n+   * is called before returning <code>null</code>.\n+   *\n+   * @param msg the error message\n+   */\n   protected void getUIError(String msg)\n   {\n     System.err.println (\"UIDefaults.getUIError: \" + msg);\n   }\n \n+  /**\n+   * Returns the {@link ComponentUI} for the specified {@link JComponent}.\n+   *\n+   * @param target the component for which the ComponentUI is requested\n+   *\n+   * @return the {@link ComponentUI} for the specified {@link JComponent}\n+   */\n   public ComponentUI getUI(JComponent target)\n   {\n     String classId = target.getUIClassID ();\n@@ -477,42 +741,86 @@ public ComponentUI getUI(JComponent target)\n       }\n   }\n \n+  /**\n+   * Adds a {@link PropertyChangeListener} to this UIDefaults map.\n+   * Registered PropertyChangeListener are notified when values\n+   * are beeing put into this UIDefaults map.\n+   *\n+   * @param listener the PropertyChangeListener to add\n+   */\n   public void addPropertyChangeListener(PropertyChangeListener listener)\n   {\n     propertyChangeSupport.addPropertyChangeListener(listener);\n   }\n \n+  /**\n+   * Removes a PropertyChangeListener from this UIDefaults map.\n+   *\n+   * @param listener the PropertyChangeListener to remove\n+   */\n   public void removePropertyChangeListener(PropertyChangeListener listener)\n   {\n     propertyChangeSupport.removePropertyChangeListener(listener);\n   }\n \n+  /**\n+   * Returns an array of all registered PropertyChangeListeners.\n+   *\n+   * @return all registered PropertyChangeListeners\n+   */\n   public PropertyChangeListener[] getPropertyChangeListeners()\n   {\n     return propertyChangeSupport.getPropertyChangeListeners();\n   }\n \n+  /**\n+   * Fires a PropertyChangeEvent.\n+   *\n+   * @param property the property name\n+   * @param oldValue the old value\n+   * @param newValue the new value\n+   */\n   protected void firePropertyChange(String property,\n \t\t\t\t    Object oldValue, Object newValue)\n   {\n     propertyChangeSupport.firePropertyChange(property, oldValue, newValue);\n   }\n \n+  /**\n+   * Adds a ResourceBundle for localized values.\n+   *\n+   * @param name the name of the ResourceBundle to add\n+   */\n   public void addResourceBundle(String name)\n   {\n     bundles.addFirst(name);\n   }\n \n+  /**\n+   * Removes a ResourceBundle.\n+   *\n+   * @param name the name of the ResourceBundle to remove\n+   */\n   public void removeResourceBundle(String name)\n   {\n     bundles.remove(name);\n   }\n \n+  /**\n+   * Sets the current locale to <code>loc</code>.\n+   *\n+   * @param loc the Locale to be set\n+   */\n   public void setDefaultLocale(Locale loc)\n   {\n     defaultLocale = loc;\n   }\n \n+  /**\n+   * Returns the current default locale.\n+   *\n+   * @return the current default locale\n+   */\n   public Locale getDefaultLocale()\n   {\n     return defaultLocale;"}, {"sha": "edcb888554514ad7d8a76489cd9f73cf5b5c2a1b", "filename": "libjava/javax/swing/plaf/metal/MetalBorders.java", "status": "added", "additions": 205, "deletions": 0, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalBorders.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalBorders.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalBorders.java?ref=2330df3bed9c50b1b46030cf674006a9ac8bb955", "patch": "@@ -0,0 +1,205 @@\n+/* MetalBorders.java\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.plaf.metal;\n+\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Graphics;\n+import java.awt.Insets;\n+\n+import javax.swing.AbstractButton;\n+import javax.swing.ButtonModel;\n+import javax.swing.JButton;\n+import javax.swing.border.AbstractBorder;\n+import javax.swing.border.Border;\n+import javax.swing.plaf.BorderUIResource;\n+import javax.swing.plaf.basic.BasicGraphicsUtils;\n+import javax.swing.plaf.basic.BasicBorders;\n+\n+/**\n+ * This factory class creates borders for the different Swing components\n+ * UI.\n+ *\n+ * @author Roman Kennke (roman@kennke.org)\n+ */\n+public class MetalBorders\n+{\n+\n+  /**\n+   * A MarginBorder that gets shared by multiple components.\n+   * Created on demand by the private helper function {@link\n+   * #getMarginBorder()}.\n+   */\n+  private static BasicBorders.MarginBorder sharedMarginBorder;\n+\n+  /**\n+   * The border that is drawn around Swing buttons.\n+   */\n+  public static class MetalButtonBorder\n+    extends AbstractBorder\n+  {\n+    /** The borders insets. */\n+    protected static Insets borderInsets = new Insets(2, 2, 2, 2);\n+\n+    /**\n+     * Creates a new instance of ButtonBorder.\n+     */\n+    public MetalButtonBorder()\n+    {\n+    }\n+\n+    /**\n+     * Paints the button border.\n+     *\n+     * @param c the component for which we paint the border\n+     * @param g the Graphics context to use\n+     * @param x the X coordinate of the upper left corner of c\n+     * @param y the Y coordinate of the upper left corner of c\n+     * @param w the width of c\n+     * @param h the height of c\n+     */\n+    public void paintBorder(Component c, Graphics g, int x, int y, int w,\n+                            int h)\n+    {\n+      ButtonModel bmodel = null;\n+      \n+      if (c instanceof AbstractButton)\n+        bmodel = ((AbstractButton) c).getModel();\n+\n+      Color darkShadow = MetalLookAndFeel.getControlDarkShadow();\n+      Color shadow = MetalLookAndFeel.getControlShadow();\n+      Color light = MetalLookAndFeel.getWhite();\n+      Color middle = MetalLookAndFeel.getControl();\n+\n+      // draw dark border\n+      g.setColor(darkShadow);\n+      g.drawRect(x, y, w - 2, h - 2);\n+\n+      if (!bmodel.isPressed())\n+        {\n+          // draw light border\n+          g.setColor(light);\n+          g.drawRect(x + 1, y + 1, w - 2, h - 2);\n+\n+          // draw crossing pixels of both borders\n+          g.setColor(middle);\n+          g.drawRect(x + 1, y + h - 2, 0, 0);\n+          g.drawRect(x + w - 2, y + 1, 0, 0);\n+        }\n+      else\n+        {\n+          // draw light border\n+          g.setColor(light);\n+          g.drawLine(x + w - 1, y + 1, x + w - 1, y + h - 1);\n+          g.drawLine(x + 1, y + h - 1, x + w - 1, y + h - 1);\n+\n+          // draw shadow border\n+          g.setColor(middle);\n+          g.drawLine(x + 1, y + 1, x + w - 2, y + 1);\n+          g.drawLine(x + 1, y + 1, x + 1, y + h - 2);\n+\n+          // draw crossing pixels of both borders\n+          g.setColor(shadow);\n+          g.drawRect(x + 1, y + h - 2, 0, 0);\n+          g.drawRect(x + w - 2, y + 1, 0, 0);\n+        }\n+    }\n+\n+    /**\n+     * Returns the insets of the ButtonBorder.\n+     *\n+     * @param c the component for which the border is used\n+     *\n+     * @return the insets of the ButtonBorder\n+     */\n+    public Insets getBorderInsets(Component c)\n+    {\n+      return getBorderInsets(c, null);\n+    }\n+\n+    /**\n+     * Returns the insets of the ButtonBorder in the specified Insets object.\n+     *\n+     * @param c the component for which the border is used\n+     * @param newInsets the insets object where to put the values\n+     *\n+     * @return the insets of the ButtonBorder\n+     */\n+    public Insets getBorderInsets(Component c, Insets newInsets)\n+    {\n+      if (newInsets == null)\n+        newInsets = new Insets(0, 0, 0, 0);\n+\n+      newInsets.bottom = borderInsets.bottom;\n+      newInsets.left = borderInsets.left;\n+      newInsets.right = borderInsets.right;\n+      newInsets.top = borderInsets.top;\n+      return newInsets;\n+    }\n+  }\n+\n+\n+  /**\n+   * Returns a border for Swing buttons in the Metal Look &amp; Feel.\n+   *\n+   * @return a border for Swing buttons in the Metal Look &amp; Feel\n+   */\n+  public static Border getButtonBorder()\n+  {\n+    Border outer = new MetalButtonBorder();\n+    Border inner = getMarginBorder();\n+\n+    return new BorderUIResource.CompoundBorderUIResource(outer, inner);\n+  }\n+\n+  /**\n+   * Returns a shared MarginBorder.\n+   */\n+  static Border getMarginBorder()  // intentionally not public\n+  {\n+    /* Swing is not designed to be thread-safe, so there is no\n+     * need to synchronize the access to the global variable.\n+     */\n+    if (sharedMarginBorder == null)\n+      sharedMarginBorder = new BasicBorders.MarginBorder();\n+\n+    return sharedMarginBorder;\n+  }\n+\n+}"}, {"sha": "bfb26aa1e78ba52f660817a164df44a4ab1d6128", "filename": "libjava/javax/swing/plaf/metal/MetalButtonUI.java", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalButtonUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalButtonUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalButtonUI.java?ref=2330df3bed9c50b1b46030cf674006a9ac8bb955", "patch": "@@ -0,0 +1,97 @@\n+/* MetalButtonUI.java\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.plaf.metal;\n+\n+import javax.swing.AbstractButton;\n+import javax.swing.JComponent;\n+import javax.swing.UIDefaults;\n+import javax.swing.UIManager;\n+import javax.swing.plaf.ComponentUI;\n+import javax.swing.plaf.basic.BasicButtonUI;\n+\n+/**\n+ * The Metal Look &amp; Feel implementation for\n+ * {@link javax.swing.AbstractButton}s.\n+ *\n+ * @author Roman Kennke (roman@kennke.org)\n+ */\n+public class MetalButtonUI\n+  extends BasicButtonUI\n+{\n+\n+  // FIXME: probably substitute with a Map in the future in the case\n+  // that this UI becomes stateful\n+\n+  /** The cached MetalButtonUI instance. */\n+  private static MetalButtonUI instance = null;\n+\n+  /**\n+   * Creates a new instance of MetalButtonUI.\n+   */\n+  public MetalButtonUI()\n+  {\n+    super();\n+  }\n+\n+  /**\n+   * Returns an instance of MetalButtonUI.\n+   *\n+   * @param component a button for which a UI instance should be returned\n+   */\n+  public static ComponentUI createUI(JComponent component)\n+  {\n+    if (instance == null)\n+      instance = new MetalButtonUI();\n+    return instance;\n+  }\n+\n+  /**\n+   * Install the Look &amp; Feel defaults for Buttons.\n+   *\n+   * @param button the button for which to install the Look &amp; Feel\n+   */\n+  public void installDefaults(AbstractButton button)\n+  {\n+    super.installDefaults(button);\n+\n+    UIDefaults defaults = UIManager.getLookAndFeelDefaults();\n+    button.setFont(defaults.getFont(\"Button.font\"));\n+  }\n+\n+}"}, {"sha": "cc5ac73d7b90f05694dc3accffbef0f861dc5f5b", "filename": "libjava/javax/swing/plaf/metal/MetalCheckBoxUI.java", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalCheckBoxUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalCheckBoxUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalCheckBoxUI.java?ref=2330df3bed9c50b1b46030cf674006a9ac8bb955", "patch": "@@ -0,0 +1,74 @@\n+/* MetalCheckBoxUI.java\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.plaf.metal;\n+\n+import javax.swing.JComponent;\n+import javax.swing.plaf.ComponentUI;\n+import javax.swing.plaf.basic.BasicCheckBoxUI;\n+\n+public class MetalCheckBoxUI\n+  extends BasicCheckBoxUI\n+{\n+\n+  // FIXME: maybe replace by a Map of instances when this becomes stateful\n+  /** The shared UI instance for JCheckBoxes. */\n+  private static MetalCheckBoxUI instance = null;\n+\n+  /**\n+   * Constructs a new instance of MetalCheckBoxUI.\n+   */\n+  public MetalCheckBoxUI()\n+  {\n+    super();\n+  }\n+\n+  /**\n+   * Returns an instance of MetalCheckBoxUI.\n+   *\n+   * @param component the component for which we return an UI instance\n+   *\n+   * @return an instance of MetalCheckBoxUI\n+   */\n+  public static ComponentUI createUI(JComponent component)\n+  {\n+    if (instance == null)\n+      instance = new MetalCheckBoxUI();\n+    return instance;\n+  }\n+}"}, {"sha": "3ba25b6c5dcd4d77f1ea803635d83d3ee1fc4c0a", "filename": "libjava/javax/swing/plaf/metal/MetalComboBoxUI.java", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalComboBoxUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalComboBoxUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalComboBoxUI.java?ref=2330df3bed9c50b1b46030cf674006a9ac8bb955", "patch": "@@ -0,0 +1,74 @@\n+/* MetalComboBoxUI.java\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.plaf.metal;\n+\n+import javax.swing.JComponent;\n+import javax.swing.plaf.ComponentUI;\n+import javax.swing.plaf.basic.BasicComboBoxUI;\n+\n+public class MetalComboBoxUI\n+  extends BasicComboBoxUI\n+{\n+\n+  // FIXME: maybe replace by a Map of instances when this becomes stateful\n+  /** The shared UI instance for JComboBoxes. */\n+  private static MetalComboBoxUI instance = null;\n+\n+  /**\n+   * Constructs a new instance of MetalComboBoxUI.\n+   */\n+  public MetalComboBoxUI()\n+  {\n+    super();\n+  }\n+\n+  /**\n+   * Returns an instance of MetalComboBoxUI.\n+   *\n+   * @param component the component for which we return an UI instance\n+   *\n+   * @return an instance of MetalComboBoxUI\n+   */\n+  public static ComponentUI createUI(JComponent component)\n+  {\n+    if (instance == null)\n+      instance = new MetalComboBoxUI();\n+    return instance;\n+  }\n+}"}, {"sha": "6ceedd0d696033dc4b0d78bc598f3e577a65b89d", "filename": "libjava/javax/swing/plaf/metal/MetalDesktopIconUI.java", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalDesktopIconUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalDesktopIconUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalDesktopIconUI.java?ref=2330df3bed9c50b1b46030cf674006a9ac8bb955", "patch": "@@ -0,0 +1,74 @@\n+/* MetalDesktopIconUI.java\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.plaf.metal;\n+\n+import javax.swing.JComponent;\n+import javax.swing.plaf.ComponentUI;\n+import javax.swing.plaf.basic.BasicDesktopIconUI;\n+\n+public class MetalDesktopIconUI\n+  extends BasicDesktopIconUI\n+{\n+\n+  // FIXME: maybe replace by a Map of instances when this becomes stateful\n+  /** The shared UI instance for MetalDesktopIcons */\n+  private static MetalDesktopIconUI instance = null;\n+\n+  /**\n+   * Constructs a new instance of MetalDesktopIconUI.\n+   */\n+  public MetalDesktopIconUI()\n+  {\n+    super();\n+  }\n+\n+  /**\n+   * Returns an instance of MetalDesktopIconUI.\n+   *\n+   * @param component the component for which we return an UI instance\n+   *\n+   * @return an instance of MetalDesktopIconUI\n+   */\n+  public static ComponentUI createUI(JComponent component)\n+  {\n+    if (instance == null)\n+      instance = new MetalDesktopIconUI();\n+    return instance;\n+  }\n+}"}, {"sha": "883ec7f4b9118da9ccf0d06cb4c72bb32dc4c194", "filename": "libjava/javax/swing/plaf/metal/MetalInternalFrameUI.java", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalInternalFrameUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalInternalFrameUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalInternalFrameUI.java?ref=2330df3bed9c50b1b46030cf674006a9ac8bb955", "patch": "@@ -0,0 +1,75 @@\n+/* MetalInternalFrameUI.java\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.plaf.metal;\n+\n+import javax.swing.JComponent;\n+import javax.swing.JInternalFrame;\n+import javax.swing.plaf.ComponentUI;\n+import javax.swing.plaf.basic.BasicInternalFrameUI;\n+\n+public class MetalInternalFrameUI\n+  extends BasicInternalFrameUI\n+{\n+\n+  // FIXME: maybe replace by a Map of instances when this becomes stateful\n+  /** The shared UI instance for JInternalFrames */\n+  private static MetalInternalFrameUI instance = null;\n+\n+  /**\n+   * Constructs a new instance of MetalInternalFrameUI.\n+   */\n+  public MetalInternalFrameUI(JInternalFrame frame)\n+  {\n+    super(frame);\n+  }\n+\n+  /**\n+   * Returns an instance of MetalInternalFrameUI.\n+   *\n+   * @param component the component for which we return an UI instance\n+   *\n+   * @return an instance of MetalInternalFrameUI\n+   */\n+  public static ComponentUI createUI(JComponent component)\n+  {\n+    if (instance == null)\n+      instance = new MetalInternalFrameUI((JInternalFrame) component);\n+    return instance;\n+  }\n+}"}, {"sha": "12aa7b1162443063476cc928f85e8325984be4b8", "filename": "libjava/javax/swing/plaf/metal/MetalLabelUI.java", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalLabelUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalLabelUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalLabelUI.java?ref=2330df3bed9c50b1b46030cf674006a9ac8bb955", "patch": "@@ -0,0 +1,74 @@\n+/* MetalLabelUI.java\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.plaf.metal;\n+\n+import javax.swing.JComponent;\n+import javax.swing.plaf.ComponentUI;\n+import javax.swing.plaf.basic.BasicLabelUI;\n+\n+public class MetalLabelUI\n+  extends BasicLabelUI\n+{\n+\n+  // FIXME: maybe replace by a Map of instances when this becomes stateful\n+  /** The shared UI instance for JLabels. */\n+  private static MetalLabelUI instance = null;\n+\n+  /**\n+   * Constructs a new instance of MetalLabelUI.\n+   */\n+  public MetalLabelUI()\n+  {\n+    super();\n+  }\n+\n+  /**\n+   * Returns an instance of MetalLabelUI.\n+   *\n+   * @param component the component for which we return an UI instance\n+   *\n+   * @return an instance of MetalLabelUI\n+   */\n+  public static ComponentUI createUI(JComponent component)\n+  {\n+    if (instance == null)\n+      instance = new MetalLabelUI();\n+    return instance;\n+  }\n+}"}, {"sha": "917f6b415749b8fe5d63c017200eb87b89acf4c4", "filename": "libjava/javax/swing/plaf/metal/MetalLookAndFeel.java", "status": "modified", "additions": 195, "deletions": 0, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalLookAndFeel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalLookAndFeel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalLookAndFeel.java?ref=2330df3bed9c50b1b46030cf674006a9ac8bb955", "patch": "@@ -38,6 +38,9 @@\n \n package javax.swing.plaf.metal;\n \n+import java.awt.Color;\n+import java.awt.Insets;\n+\n import javax.swing.UIDefaults;\n import javax.swing.plaf.ColorUIResource;\n import javax.swing.plaf.FontUIResource;\n@@ -307,4 +310,196 @@ public static void setCurrentTheme(MetalTheme theme)\n   {\n     MetalLookAndFeel.theme = theme;\n   }\n+\n+  /**\n+   * Sets the ComponentUI classes for all Swing components to the Metal\n+   * implementations.\n+   *\n+   * In particular this sets the following keys:\n+   *\n+   * <table>\n+   * <tr>\n+   * <th>Key</th><th>Value</th>\n+   * </tr><tr>\n+   * <td>ButtonUI</td><td>{@link MetalButtonUI}</td>\n+   * </tr><tr>\n+   * <td>CheckBoxUI</td><td>{@link MetalCheckBoxUI}</td>\n+   * </tr><tr>\n+   * <td>ComboBoxUI</td><td>{@link MetalComboBoxUI}</td>\n+   * </tr><tr>\n+   * <td>DesktopIconUI</td><td>{@link MetalDesktopIconUI}</td>\n+   * </tr><tr>\n+   * <td>InternalFrameUI</td><td>{@link MetalInternalFrameUI}</td>\n+   * </tr><tr>\n+   * <td>LabelUI</td><td>{@link MetalLabelUI}</td>\n+   * </tr><tr>\n+   * <td>PopupMenuSeparatorUI</td><td>{@link MetalPopupMenuSeparatorUI}</td>\n+   * </tr><tr>\n+   * <td>ProgressBarUI</td><td>{@link MetalProgressBarUI}</td>\n+   * </tr><tr>\n+   * <td>RadioButtonUI</td><td>{@link MetalRadioButtonUI}</td>\n+   * </tr><tr>\n+   * <td>RootPaneUI</td><td>{@link MetalRootPaneUI}</td>\n+   * </tr><tr>\n+   * <td>ScrollBarUI</td><td>{@link MetalScrollBarUI}</td>\n+   * </tr><tr>\n+   * <td>ScrollPaneUI</td><td>{@link MetalScrollPaneUI}</td>\n+   * </tr><tr>\n+   * <td>SeparatorUI</td><td>{@link MetalSeparatorUI}</td>\n+   * </tr><tr>\n+   * <td>SliderUI</td><td>{@link MetalSliderUI}</td>\n+   * </tr><tr>\n+   * <td>SplitPaneUI</td><td>{@link MetalSplitPaneUI}</td>\n+   * </tr><tr>\n+   * <td>TabbedPaneUI</td><td>{@link MetalTabbedPaneUI}</td>\n+   * </tr><tr>\n+   * <td>TextFieldUI</td><td>{@link MetalTextFieldUI}</td>\n+   * </tr><tr>\n+   * <td>ToggleButtonUI</td><td>{@link MetalToggleButtonUI}</td>\n+   * </tr><tr>\n+   * <td>ToolBarUI</td><td>{@link MetalToolBarUI}</td>\n+   * </tr><tr>\n+   * <td>ToolTipUI</td><td>{@link MetalToolTipUI}</td>\n+   * </tr><tr>\n+   * <td>TreeUI</td><td>{@link MetalTreeUI}</td>\n+   * </tr><tr>\n+   * </table>\n+   *\n+   * @param defaults the UIDefaults where the class defaults are added\n+   */\n+  protected void initClassDefaults(UIDefaults defaults)\n+  {\n+    super.initClassDefaults(defaults);\n+\n+    // Variables\n+    Object[] uiDefaults;\n+    // Initialize Class Defaults\n+    uiDefaults = new Object[] {\n+      \"ButtonUI\", \"javax.swing.plaf.metal.MetalButtonUI\",\n+      \"CheckBoxUI\", \"javax.swing.plaf.metal.MetalCheckBoxUI\",\n+      \"ComboBoxUI\", \"javax.swing.plaf.metal.MetalComboBoxUI\",\n+      \"DesktopIconUI\", \"javax.swing.plaf.metal.MetalDesktopIconUI\",\n+      \"InternalFrameUI\", \"javax.swing.plaf.metal.MetalInternalFrameUI\",\n+      \"LabelUI\", \"javax.swing.plaf.metal.MetalLabelUI\",\n+      \"PopupMenuSeparatorUI\",\n+      \"javax.swing.plaf.metal.MetalPopupMenuSeparatorUI\",\n+      \"ProgressBarUI\", \"javax.swing.plaf.metal.MetalProgressBarUI\",\n+      \"RadioButtonUI\", \"javax.swing.plaf.metal.MetalRadioButtonUI\",\n+      \"RootPaneUI\", \"javax.swing.plaf.metal.MetalRootPaneUI\",\n+      \"ScrollBarUI\", \"javax.swing.plaf.metal.MetalScrollBarUI\",\n+      \"ScrollPaneUI\", \"javax.swing.plaf.metal.MetalScrollPaneUI\",\n+      \"SeparatorUI\", \"javax.swing.plaf.metal.MetalSeparatorUI\",\n+      \"SliderUI\", \"javax.swing.plaf.metal.MetalSliderUI\",\n+      \"SplitPaneUI\", \"javax.swing.plaf.metal.MetalSplitPaneUI\",\n+      \"TabbedPaneUI\", \"javax.swing.plaf.metal.MetalTabbedPaneUI\",\n+      \"TextFieldUI\", \"javax.swing.plaf.metal.MetalTextFieldUI\",\n+      \"ToggleButtonUI\", \"javax.swing.plaf.metal.MetalToggleButtonUI\",\n+      \"ToolBarUI\", \"javax.swing.plaf.metal.MetalToolBarUI\",\n+      \"ToolTipUI\", \"javax.swing.plaf.metal.MetalToolTipUI\",\n+      \"TreeUI\", \"javax.swing.plaf.metal.MetalTreeUI\",\n+    };\n+    // Add Class Defaults to UI Defaults table\n+    defaults.putDefaults(uiDefaults);\n+  }\n+\n+  /**\n+   * Initializes the component defaults for the Metal Look &amp; Feel.\n+   *\n+   * In particular this sets the following keys (the colors are given\n+   * as RGB hex values):\n+   *\n+   * <table>\n+   * <tr>\n+   * <th>Key</th><th>Value</th>\n+   * </tr><tr>\n+   * <td>Button.background</td><td>0xcccccc</td>\n+   * </tr><tr>\n+   * <td>Button.border</td><td>{@link MetalBorders.ButtonBorder}</td>\n+   * </tr><tr>\n+   * <td>Button.font</td><td>{@link #getControlTextFont}</td>\n+   * </tr><tr>\n+   * <td>Button.margin</td><td><code>new java.awt.Insets(2, 14, 2, 14)</code>\n+   * </td>\n+   * </tr><tr>\n+   * <td>CheckBox.background</td><td>0xcccccc</td>\n+   * </tr><tr>\n+   * <td>CheckBoxMenuItem.background</td><td>0xcccccc</td>\n+   * </tr><tr>\n+   * <td>ToolBar.background</td><td>0xcccccc</td>\n+   * </tr><tr>\n+   * <td>Panel.background</td><td>0xcccccc</td>\n+   * </tr><tr>\n+   * <td>Slider.background</td><td>0xcccccc</td>\n+   * </tr><tr>\n+   * <td>OptionPane.background</td><td>0xcccccc</td>\n+   * </tr><tr>\n+   * <td>ProgressBar.background</td><td>0xcccccc</td>\n+   * </tr><tr>\n+   * <td>TabbedPane.background</td><td>0xcccccc</td>\n+   * </tr><tr>\n+   * <td>Label.background</td><td>0xcccccc</td>\n+   * </tr><tr>\n+   * <td>Label.font</td><td>{@link #getControlTextFont}</td>\n+   * </tr><tr>\n+   * <td>Menu.background</td><td>0xcccccc</td>\n+   * </tr><tr>\n+   * <td>MenuBar.background</td><td>0xcccccc</td>\n+   * </tr><tr>\n+   * <td>MenuItem.background</td><td>0xcccccc</td>\n+   * </tr><tr>\n+   * <td>ScrollBar.background</td><td>0xcccccc</td>\n+   * </tr><tr>\n+   * </table>\n+   *\n+   * @param defaults the UIDefaults instance to which the values are added\n+   */\n+  protected void initComponentDefaults(UIDefaults defaults)\n+  {\n+    super.initComponentDefaults(defaults);\n+    Object[] myDefaults = new Object[] {\n+      \"Button.background\", new ColorUIResource(getControl()),\n+      \"Button.border\", MetalBorders.getButtonBorder(),\n+      \"Button.font\", getControlTextFont(),\n+      \"Button.margin\", new Insets(2, 14, 2, 14),\n+      \"CheckBox.background\", new ColorUIResource(getControl()),\n+      \"CheckBoxMenuItem.background\", new ColorUIResource(getControl()),\n+      \"ToolBar.background\", new ColorUIResource(getControl()),\n+      \"Panel.background\", new ColorUIResource(getControl()),\n+      \"Slider.background\", new ColorUIResource(getControl()),\n+      \"OptionPane.background\", new ColorUIResource(getControl()),\n+      \"ProgressBar.background\", new ColorUIResource(getControl()),\n+      \"TabbedPane.background\", new ColorUIResource(getControl()),\n+      \"Label.background\", new ColorUIResource(getControl()),\n+      \"Label.font\", getControlTextFont(),\n+      \"Menu.background\", new ColorUIResource(getControl()),\n+      \"MenuBar.background\", new ColorUIResource(getControl()),\n+      \"MenuItem.background\", new ColorUIResource(getControl()),\n+      \"ScrollBar.background\", new ColorUIResource(getControl())\n+    };\n+    defaults.putDefaults(myDefaults);\n+  }\n+\n+  /**\n+   * Initializes the system color defaults.\n+   *\n+   * In particular this sets the following keys:\n+   *\n+   * <table>\n+   * <tr>\n+   * <th>Key</th><th>Value</th><th>Description</th>\n+   * </tr><tr>\n+   * <td>control</td><td>0xcccccc</td><td>The default color for components</td>\n+   * </tr>\n+   * </table>\n+   */\n+  protected void initSystemColorDefaults(UIDefaults defaults)\n+  {\n+    super.initSystemColorDefaults(defaults);\n+    Object[] uiDefaults;\n+    uiDefaults = new Object[] {\n+      \"control\", new ColorUIResource(getControl())\n+    };\n+    defaults.putDefaults(uiDefaults);\n+  }\n+\n }"}, {"sha": "0892c56e4873ba36842a9f0b17fff14cdf99277a", "filename": "libjava/javax/swing/plaf/metal/MetalPopupMenuSeparatorUI.java", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalPopupMenuSeparatorUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalPopupMenuSeparatorUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalPopupMenuSeparatorUI.java?ref=2330df3bed9c50b1b46030cf674006a9ac8bb955", "patch": "@@ -0,0 +1,73 @@\n+/* MetalPopupMenuSeparatorUI.java\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.plaf.metal;\n+\n+import javax.swing.JComponent;\n+import javax.swing.plaf.ComponentUI;\n+\n+public class MetalPopupMenuSeparatorUI\n+  extends MetalSeparatorUI\n+{\n+\n+  // FIXME: maybe replace by a Map of instances when this becomes stateful\n+  /** The shared UI instance for MetalPopupMenuSeparatorUIs */\n+  private static MetalPopupMenuSeparatorUI instance = null;\n+\n+  /**\n+   * Constructs a new instance of MetalPopupMenuSeparatorUI.\n+   */\n+  public MetalPopupMenuSeparatorUI()\n+  {\n+    super();\n+  }\n+\n+  /**\n+   * Returns an instance of MetalPopupMenuSeparatorUI.\n+   *\n+   * @param component the component for which we return an UI instance\n+   *\n+   * @return an instance of MetalPopupMenuSeparatorUI\n+   */\n+  public static ComponentUI createUI(JComponent component)\n+  {\n+    if (instance == null)\n+      instance = new MetalPopupMenuSeparatorUI();\n+    return instance;\n+  }\n+}"}, {"sha": "04ca52f71bb6458de9f3dab1c585225afe711ee4", "filename": "libjava/javax/swing/plaf/metal/MetalProgressBarUI.java", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalProgressBarUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalProgressBarUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalProgressBarUI.java?ref=2330df3bed9c50b1b46030cf674006a9ac8bb955", "patch": "@@ -0,0 +1,74 @@\n+/* MetalProgressBarUI.java\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.plaf.metal;\n+\n+import javax.swing.JComponent;\n+import javax.swing.plaf.ComponentUI;\n+import javax.swing.plaf.basic.BasicProgressBarUI;\n+\n+public class MetalProgressBarUI\n+  extends BasicProgressBarUI\n+{\n+\n+  // FIXME: maybe replace by a Map of instances when this becomes stateful\n+  /** The shared UI instance for MetalProgressBarUIs */\n+  private static MetalProgressBarUI instance = null;\n+\n+  /**\n+   * Constructs a new instance of MetalProgressBarUI.\n+   */\n+  public MetalProgressBarUI()\n+  {\n+    super();\n+  }\n+\n+  /**\n+   * Returns an instance of MetalProgressBarUI.\n+   *\n+   * @param component the component for which we return an UI instance\n+   *\n+   * @return an instance of MetalProgressBarUI\n+   */\n+  public static ComponentUI createUI(JComponent component)\n+  {\n+    if (instance == null)\n+      instance = new MetalProgressBarUI();\n+    return instance;\n+  }\n+}"}, {"sha": "b4ff10bd54463baaaeeedd17288e7b79938290a0", "filename": "libjava/javax/swing/plaf/metal/MetalRadioButtonUI.java", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalRadioButtonUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalRadioButtonUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalRadioButtonUI.java?ref=2330df3bed9c50b1b46030cf674006a9ac8bb955", "patch": "@@ -0,0 +1,74 @@\n+/* MetalRadioButtonUI.java\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.plaf.metal;\n+\n+import javax.swing.JComponent;\n+import javax.swing.plaf.ComponentUI;\n+import javax.swing.plaf.basic.BasicRadioButtonUI;\n+\n+public class MetalRadioButtonUI\n+  extends BasicRadioButtonUI\n+{\n+\n+  // FIXME: maybe replace by a Map of instances when this becomes stateful\n+  /** The shared UI instance for JRadioButtons. */\n+  private static MetalRadioButtonUI instance = null;\n+\n+  /**\n+   * Constructs a new instance of MetalRadioButtonUI.\n+   */\n+  public MetalRadioButtonUI()\n+  {\n+    super();\n+  }\n+\n+  /**\n+   * Returns an instance of MetalRadioButtonUI.\n+   *\n+   * @param component the component for which we return an UI instance\n+   *\n+   * @return an instance of MetalRadioButtonUI\n+   */\n+  public static ComponentUI createUI(JComponent component)\n+  {\n+    if (instance == null)\n+      instance = new MetalRadioButtonUI();\n+    return instance;\n+  }\n+}"}, {"sha": "5306b6182c4539f4f8bf56a1d3aadfea6379c935", "filename": "libjava/javax/swing/plaf/metal/MetalRootPaneUI.java", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalRootPaneUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalRootPaneUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalRootPaneUI.java?ref=2330df3bed9c50b1b46030cf674006a9ac8bb955", "patch": "@@ -0,0 +1,74 @@\n+/* MetalRootPaneUI.java\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.plaf.metal;\n+\n+import javax.swing.JComponent;\n+import javax.swing.plaf.ComponentUI;\n+import javax.swing.plaf.basic.BasicRootPaneUI;\n+\n+public class MetalRootPaneUI\n+  extends BasicRootPaneUI\n+{\n+\n+  // FIXME: maybe replace by a Map of instances when this becomes stateful\n+  /** The shared UI instance for MetalRootPaneUIs */\n+  private static MetalRootPaneUI instance = null;\n+\n+  /**\n+   * Constructs a new instance of MetalRootPaneUI.\n+   */\n+  public MetalRootPaneUI()\n+  {\n+    super();\n+  }\n+\n+  /**\n+   * Returns an instance of MetalRootPaneUI.\n+   *\n+   * @param component the component for which we return an UI instance\n+   *\n+   * @return an instance of MetalRootPaneUI\n+   */\n+  public static ComponentUI createUI(JComponent component)\n+  {\n+    if (instance == null)\n+      instance = new MetalRootPaneUI();\n+    return instance;\n+  }\n+}"}, {"sha": "6baceb52ae0dfd2f6fb2c02590898abc18bab872", "filename": "libjava/javax/swing/plaf/metal/MetalScrollBarUI.java", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalScrollBarUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalScrollBarUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalScrollBarUI.java?ref=2330df3bed9c50b1b46030cf674006a9ac8bb955", "patch": "@@ -0,0 +1,74 @@\n+/* MetalScrollBarUI.java\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.plaf.metal;\n+\n+import javax.swing.JComponent;\n+import javax.swing.plaf.ComponentUI;\n+import javax.swing.plaf.basic.BasicScrollBarUI;\n+\n+public class MetalScrollBarUI\n+  extends BasicScrollBarUI\n+{\n+\n+  // FIXME: maybe replace by a Map of instances when this becomes stateful\n+  /** The shared UI instance for JScrollBars. */\n+  private static MetalScrollBarUI instance = null;\n+\n+  /**\n+   * Constructs a new instance of MetalScrollBarUI.\n+   */\n+  public MetalScrollBarUI()\n+  {\n+    super();\n+  }\n+\n+  /**\n+   * Returns an instance of MetalScrollBarUI.\n+   *\n+   * @param component the component for which we return an UI instance\n+   *\n+   * @return an instance of MetalScrollBarUI\n+   */\n+  public static ComponentUI createUI(JComponent component)\n+  {\n+    if (instance == null)\n+      instance = new MetalScrollBarUI();\n+    return instance;\n+  }\n+}"}, {"sha": "6220ea9e2d0262d3d82f48793d340c8614794e60", "filename": "libjava/javax/swing/plaf/metal/MetalScrollPaneUI.java", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalScrollPaneUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalScrollPaneUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalScrollPaneUI.java?ref=2330df3bed9c50b1b46030cf674006a9ac8bb955", "patch": "@@ -0,0 +1,74 @@\n+/* MetalScrollPaneUI.java\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.plaf.metal;\n+\n+import javax.swing.JComponent;\n+import javax.swing.plaf.ComponentUI;\n+import javax.swing.plaf.basic.BasicScrollPaneUI;\n+\n+public class MetalScrollPaneUI\n+  extends BasicScrollPaneUI\n+{\n+\n+  // FIXME: maybe replace by a Map of instances when this becomes stateful\n+  /** The shared UI instance for JScrollPanes. */\n+  private static MetalScrollPaneUI instance = null;\n+\n+  /**\n+   * Constructs a new instance of MetalScrollPaneUI.\n+   */\n+  public MetalScrollPaneUI()\n+  {\n+    super();\n+  }\n+\n+  /**\n+   * Returns an instance of MetalScrollPaneUI.\n+   *\n+   * @param component the component for which we return an UI instance\n+   *\n+   * @return an instance of MetalScrollPaneUI\n+   */\n+  public static ComponentUI createUI(JComponent component)\n+  {\n+    if (instance == null)\n+      instance = new MetalScrollPaneUI();\n+    return instance;\n+  }\n+}"}, {"sha": "e6c36b4e47f52cca6a373686c23e8ce0d1376cce", "filename": "libjava/javax/swing/plaf/metal/MetalSeparatorUI.java", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalSeparatorUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalSeparatorUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalSeparatorUI.java?ref=2330df3bed9c50b1b46030cf674006a9ac8bb955", "patch": "@@ -0,0 +1,74 @@\n+/* MetalSeparatorUI.java\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.plaf.metal;\n+\n+import javax.swing.JComponent;\n+import javax.swing.plaf.ComponentUI;\n+import javax.swing.plaf.basic.BasicSeparatorUI;\n+\n+public class MetalSeparatorUI\n+  extends BasicSeparatorUI\n+{\n+\n+  // FIXME: maybe replace by a Map of instances when this becomes stateful\n+  /** The shared UI instance for MetalSeparatorUIs */\n+  private static MetalSeparatorUI instance = null;\n+\n+  /**\n+   * Constructs a new instance of MetalSeparatorUI.\n+   */\n+  public MetalSeparatorUI()\n+  {\n+    super();\n+  }\n+\n+  /**\n+   * Returns an instance of MetalSeparatorUI.\n+   *\n+   * @param component the component for which we return an UI instance\n+   *\n+   * @return an instance of MetalSeparatorUI\n+   */\n+  public static ComponentUI createUI(JComponent component)\n+  {\n+    if (instance == null)\n+      instance = new MetalSeparatorUI();\n+    return instance;\n+  }\n+}"}, {"sha": "f6ca41f5980ff58f76ece2ee2a9b6248f71247bd", "filename": "libjava/javax/swing/plaf/metal/MetalSliderUI.java", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalSliderUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalSliderUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalSliderUI.java?ref=2330df3bed9c50b1b46030cf674006a9ac8bb955", "patch": "@@ -0,0 +1,74 @@\n+/* MetalSliderUI.java\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.plaf.metal;\n+\n+import javax.swing.JComponent;\n+import javax.swing.plaf.ComponentUI;\n+import javax.swing.plaf.basic.BasicSliderUI;\n+\n+public class MetalSliderUI\n+  extends BasicSliderUI\n+{\n+\n+  // FIXME: maybe replace by a Map of instances when this becomes stateful\n+  /** The shared UI instance for MetalSliderUIs */\n+  private static MetalSliderUI instance = null;\n+\n+  /**\n+   * Constructs a new instance of MetalSliderUI.\n+   */\n+  public MetalSliderUI()\n+  {\n+    super(null);\n+  }\n+\n+  /**\n+   * Returns an instance of MetalSliderUI.\n+   *\n+   * @param component the component for which we return an UI instance\n+   *\n+   * @return an instance of MetalSliderUI\n+   */\n+  public static ComponentUI createUI(JComponent component)\n+  {\n+    if (instance == null)\n+      instance = new MetalSliderUI();\n+    return instance;\n+  }\n+}"}, {"sha": "5c2e141b1ba92b73356f678175d10ebe364dabc4", "filename": "libjava/javax/swing/plaf/metal/MetalSplitPaneUI.java", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalSplitPaneUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalSplitPaneUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalSplitPaneUI.java?ref=2330df3bed9c50b1b46030cf674006a9ac8bb955", "patch": "@@ -0,0 +1,74 @@\n+/* MetalSplitPaneUI.java\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.plaf.metal;\n+\n+import javax.swing.JComponent;\n+import javax.swing.plaf.ComponentUI;\n+import javax.swing.plaf.basic.BasicSplitPaneUI;\n+\n+public class MetalSplitPaneUI\n+  extends BasicSplitPaneUI\n+{\n+\n+  // FIXME: maybe replace by a Map of instances when this becomes stateful\n+  /** The shared UI instance for MetalSplitPaneUIs */\n+  private static MetalSplitPaneUI instance = null;\n+\n+  /**\n+   * Constructs a new instance of MetalSplitPaneUI.\n+   */\n+  public MetalSplitPaneUI()\n+  {\n+    super();\n+  }\n+\n+  /**\n+   * Returns an instance of MetalSplitPaneUI.\n+   *\n+   * @param component the component for which we return an UI instance\n+   *\n+   * @return an instance of MetalSplitPaneUI\n+   */\n+  public static ComponentUI createUI(JComponent component)\n+  {\n+    if (instance == null)\n+      instance = new MetalSplitPaneUI();\n+    return instance;\n+  }\n+}"}, {"sha": "524fc5253fd65547afb018b8d5a1ff9cc03df480", "filename": "libjava/javax/swing/plaf/metal/MetalTabbedPaneUI.java", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalTabbedPaneUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalTabbedPaneUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalTabbedPaneUI.java?ref=2330df3bed9c50b1b46030cf674006a9ac8bb955", "patch": "@@ -0,0 +1,86 @@\n+/* MetalTabbedPaneUI.java\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.plaf.metal;\n+\n+import java.util.HashMap;\n+\n+import javax.swing.JComponent;\n+import javax.swing.plaf.ComponentUI;\n+import javax.swing.plaf.basic.BasicTabbedPaneUI;\n+\n+public class MetalTabbedPaneUI\n+  extends BasicTabbedPaneUI\n+{\n+\n+  /** The shared UI instance for JTabbedPanes. */\n+  private static HashMap instances = null;\n+\n+  /**\n+   * Constructs a new instance of MetalTabbedPaneUI.\n+   */\n+  public MetalTabbedPaneUI()\n+  {\n+    super();\n+  }\n+\n+  /**\n+   * Returns an instance of MetalTabbedPaneUI.\n+   *\n+   * @param component the component for which we return an UI instance\n+   *\n+   * @return an instance of MetalTabbedPaneUI\n+   */\n+  public static ComponentUI createUI(JComponent component)\n+  {\n+    if (instances == null)\n+      instances = new HashMap();\n+\n+    Object o = instances.get(component);\n+    MetalTabbedPaneUI instance;\n+    if (o == null)\n+      {\n+\tinstance = new MetalTabbedPaneUI();\n+\tinstances.put(component, instance);\n+      }\n+    else\n+      instance = (MetalTabbedPaneUI) o;\n+\n+    return instance;\n+  }\n+}"}, {"sha": "79ae2b01f4fe77a05f73c140dc24742b3ca3d299", "filename": "libjava/javax/swing/plaf/metal/MetalTextFieldUI.java", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalTextFieldUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalTextFieldUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalTextFieldUI.java?ref=2330df3bed9c50b1b46030cf674006a9ac8bb955", "patch": "@@ -0,0 +1,74 @@\n+/* MetalTextFieldUI.java\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.plaf.metal;\n+\n+import javax.swing.JComponent;\n+import javax.swing.plaf.ComponentUI;\n+import javax.swing.plaf.basic.BasicTextFieldUI;\n+\n+public class MetalTextFieldUI\n+  extends BasicTextFieldUI\n+{\n+\n+  // FIXME: maybe replace by a Map of instances when this becomes stateful\n+  /** The shared UI instance for MetalTextFieldUIs */\n+  private static MetalTextFieldUI instance = null;\n+\n+  /**\n+   * Constructs a new instance of MetalTextFieldUI.\n+   */\n+  public MetalTextFieldUI()\n+  {\n+    super();\n+  }\n+\n+  /**\n+   * Returns an instance of MetalTextFieldUI.\n+   *\n+   * @param component the component for which we return an UI instance\n+   *\n+   * @return an instance of MetalTextFieldUI\n+   */\n+  public static ComponentUI createUI(JComponent component)\n+  {\n+    if (instance == null)\n+      instance = new MetalTextFieldUI();\n+    return instance;\n+  }\n+}"}, {"sha": "84af36a5e00203f8768cfc474a65c9da2487416b", "filename": "libjava/javax/swing/plaf/metal/MetalToggleButtonUI.java", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalToggleButtonUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalToggleButtonUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalToggleButtonUI.java?ref=2330df3bed9c50b1b46030cf674006a9ac8bb955", "patch": "@@ -0,0 +1,74 @@\n+/* MetalToggleButtonUI.java\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.plaf.metal;\n+\n+import javax.swing.JComponent;\n+import javax.swing.plaf.ComponentUI;\n+import javax.swing.plaf.basic.BasicToggleButtonUI;\n+\n+public class MetalToggleButtonUI\n+  extends BasicToggleButtonUI\n+{\n+\n+  // FIXME: maybe replace by a Map of instances when this becomes stateful\n+  /** The shared UI instance for MetalToggleButtonUIs */\n+  private static MetalToggleButtonUI instance = null;\n+\n+  /**\n+   * Constructs a new instance of MetalToggleButtonUI.\n+   */\n+  public MetalToggleButtonUI()\n+  {\n+    super();\n+  }\n+\n+  /**\n+   * Returns an instance of MetalToggleButtonUI.\n+   *\n+   * @param component the component for which we return an UI instance\n+   *\n+   * @return an instance of MetalToggleButtonUI\n+   */\n+  public static ComponentUI createUI(JComponent component)\n+  {\n+    if (instance == null)\n+      instance = new MetalToggleButtonUI();\n+    return instance;\n+  }\n+}"}, {"sha": "299a4c0a413d84c953680c10711deaff51887f31", "filename": "libjava/javax/swing/plaf/metal/MetalToolBarUI.java", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalToolBarUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalToolBarUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalToolBarUI.java?ref=2330df3bed9c50b1b46030cf674006a9ac8bb955", "patch": "@@ -0,0 +1,74 @@\n+/* MetalToolBarUI.java\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.plaf.metal;\n+\n+import javax.swing.JComponent;\n+import javax.swing.plaf.ComponentUI;\n+import javax.swing.plaf.basic.BasicToolBarUI;\n+\n+public class MetalToolBarUI\n+  extends BasicToolBarUI\n+{\n+\n+  // FIXME: maybe replace by a Map of instances when this becomes stateful\n+  /** The shared UI instance for MetalToolBarUIs */\n+  private static MetalToolBarUI instance = null;\n+\n+  /**\n+   * Constructs a new instance of MetalToolBarUI.\n+   */\n+  public MetalToolBarUI()\n+  {\n+    super();\n+  }\n+\n+  /**\n+   * Returns an instance of MetalToolBarUI.\n+   *\n+   * @param component the component for which we return an UI instance\n+   *\n+   * @return an instance of MetalToolBarUI\n+   */\n+  public static ComponentUI createUI(JComponent component)\n+  {\n+    if (instance == null)\n+      instance = new MetalToolBarUI();\n+    return instance;\n+  }\n+}"}, {"sha": "303b6294ac8ccfc87a0f2c3b4c51482791abc518", "filename": "libjava/javax/swing/plaf/metal/MetalToolTipUI.java", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalToolTipUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalToolTipUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalToolTipUI.java?ref=2330df3bed9c50b1b46030cf674006a9ac8bb955", "patch": "@@ -0,0 +1,74 @@\n+/* MetalToolTipUI.java\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.plaf.metal;\n+\n+import javax.swing.JComponent;\n+import javax.swing.plaf.ComponentUI;\n+import javax.swing.plaf.basic.BasicToolTipUI;\n+\n+public class MetalToolTipUI\n+  extends BasicToolTipUI\n+{\n+\n+  // FIXME: maybe replace by a Map of instances when this becomes stateful\n+  /** The shared UI instance for MetalToolTipUIs */\n+  private static MetalToolTipUI instance = null;\n+\n+  /**\n+   * Constructs a new instance of MetalToolTipUI.\n+   */\n+  public MetalToolTipUI()\n+  {\n+    super();\n+  }\n+\n+  /**\n+   * Returns an instance of MetalToolTipUI.\n+   *\n+   * @param component the component for which we return an UI instance\n+   *\n+   * @return an instance of MetalToolTipUI\n+   */\n+  public static ComponentUI createUI(JComponent component)\n+  {\n+    if (instance == null)\n+      instance = new MetalToolTipUI();\n+    return instance;\n+  }\n+}"}, {"sha": "a420204b56f72b9c04750452c74a0e624f0003a6", "filename": "libjava/javax/swing/plaf/metal/MetalTreeUI.java", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalTreeUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2330df3bed9c50b1b46030cf674006a9ac8bb955/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalTreeUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalTreeUI.java?ref=2330df3bed9c50b1b46030cf674006a9ac8bb955", "patch": "@@ -0,0 +1,74 @@\n+/* MetalTreeUI.java\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing.plaf.metal;\n+\n+import javax.swing.JComponent;\n+import javax.swing.plaf.ComponentUI;\n+import javax.swing.plaf.basic.BasicTreeUI;\n+\n+public class MetalTreeUI\n+  extends BasicTreeUI\n+{\n+\n+  // FIXME: maybe replace by a Map of instances when this becomes stateful\n+  /** The shared UI instance for MetalTreeUIs */\n+  private static MetalTreeUI instance = null;\n+\n+  /**\n+   * Constructs a new instance of MetalTreeUI.\n+   */\n+  public MetalTreeUI()\n+  {\n+    super();\n+  }\n+\n+  /**\n+   * Returns an instance of MetalTreeUI.\n+   *\n+   * @param component the component for which we return an UI instance\n+   *\n+   * @return an instance of MetalTreeUI\n+   */\n+  public static ComponentUI createUI(JComponent component)\n+  {\n+    if (instance == null)\n+      instance = new MetalTreeUI();\n+    return instance;\n+  }\n+}"}]}