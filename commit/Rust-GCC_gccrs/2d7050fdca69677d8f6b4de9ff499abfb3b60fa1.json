{"sha": "2d7050fdca69677d8f6b4de9ff499abfb3b60fa1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ3MDUwZmRjYTY5Njc3ZDhmNmI0ZGU5ZmY0OTlhYmZiM2I2MGZhMQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-05T06:30:54Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-05T06:30:54Z"}, "message": "(expand_expr): Use gen_realpart, gen_imagpart.\n\n(expand_expr): For ABS_EXPR, give expand_unop the operand's mode.\n(expand_expr): For REALPART_EXPR, IMAGPART_EXPR, just return that part.\n\nFrom-SVN: r2322", "tree": {"sha": "13bd6ab0af0fd6e841b4dc24f5a4df3cabed206e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13bd6ab0af0fd6e841b4dc24f5a4df3cabed206e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d7050fdca69677d8f6b4de9ff499abfb3b60fa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d7050fdca69677d8f6b4de9ff499abfb3b60fa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d7050fdca69677d8f6b4de9ff499abfb3b60fa1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d7050fdca69677d8f6b4de9ff499abfb3b60fa1/comments", "author": null, "committer": null, "parents": [{"sha": "decdfa827101f082b55286b7c0aa3fe8858bc6e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/decdfa827101f082b55286b7c0aa3fe8858bc6e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/decdfa827101f082b55286b7c0aa3fe8858bc6e9"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "84046a6664eee10b6052b82e359086e8fe058aee", "filename": "gcc/expr.c", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7050fdca69677d8f6b4de9ff499abfb3b60fa1/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7050fdca69677d8f6b4de9ff499abfb3b60fa1/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=2d7050fdca69677d8f6b4de9ff499abfb3b60fa1", "patch": "@@ -4417,6 +4417,16 @@ expand_expr (exp, target, tmode, modifier)\n     case ABS_EXPR:\n       op0 = expand_expr (TREE_OPERAND (exp, 0), subtarget, VOIDmode, 0);\n \n+      /* Handle complex values specially.  */\n+      {\n+\tenum machine_mode opmode\n+\t  = TYPE_MODE (TREE_TYPE (TREE_OPERAND (exp, 0)));\n+\n+\tif (GET_MODE_CLASS (opmode) == MODE_COMPLEX_INT\n+\t    || GET_MODE_CLASS (opmode) == MODE_COMPLEX_FLOAT)\n+\t  return expand_complex_abs (opmode, op0, target, unsignedp);\n+      }\n+\n       /* Unsigned abs is simply the operand.  Testing here means we don't\n \t risk generating incorrect code below.  */\n       if (TREE_UNSIGNED (type))\n@@ -5130,8 +5140,8 @@ expand_expr (exp, target, tmode, modifier)\n \t  emit_insn (gen_rtx (CLOBBER, VOIDmode, target));\n \n \t/* Move the real (op0) and imaginary (op1) parts to their location.  */\n-\temit_move_insn (gen_lowpart  (mode, target), op0);\n-\temit_move_insn (gen_highpart (mode, target), op1);\n+\temit_move_insn (gen_realpart (mode, target), op0);\n+\temit_move_insn (gen_imagpart (mode, target), op1);\n \n \t/* Complex construction should appear as a single unit.  */\n \tgroup_insns (prev);\n@@ -5140,24 +5150,12 @@ expand_expr (exp, target, tmode, modifier)\n       }\n \n     case REALPART_EXPR:\n-      {\n-\tenum machine_mode mode = TYPE_MODE (TREE_TYPE (TREE_TYPE (exp)));\n-\top0 = expand_expr (TREE_OPERAND (exp, 0), 0, VOIDmode, 0);\n-\tif (! target)\n-\t  target = gen_reg_rtx (mode);\n-\temit_move_insn (target, gen_lowpart (mode, op0));\n-\treturn target;\n-      }\t\t\n+      op0 = expand_expr (TREE_OPERAND (exp, 0), 0, VOIDmode, 0);\n+      return gen_realpart (mode, op0);\n       \n     case IMAGPART_EXPR:\n-      {\n-\tenum machine_mode mode = TYPE_MODE (TREE_TYPE (TREE_TYPE (exp)));\n-\top0 = expand_expr (TREE_OPERAND (exp, 0), 0, VOIDmode, 0);\n-\tif (! target)\n-\t  target = gen_reg_rtx (mode);\n-\temit_move_insn (target, gen_highpart (mode, op0));\n-\treturn target;\n-      }\t\t\n+      op0 = expand_expr (TREE_OPERAND (exp, 0), 0, VOIDmode, 0);\n+      return gen_imagpart (mode, op0);\n \n     case CONJ_EXPR:\n       {\n@@ -5177,11 +5175,11 @@ expand_expr (exp, target, tmode, modifier)\n \t  emit_insn (gen_rtx (CLOBBER, VOIDmode, target));\n \n \t/* Store the realpart and the negated imagpart to target.  */\n-\temit_move_insn (gen_lowpart (mode, target), gen_lowpart (mode, op0));\n+\temit_move_insn (gen_realpart (mode, target), gen_realpart (mode, op0));\n \n-\timag_t = gen_highpart (mode, target);\n+\timag_t = gen_imagpart (mode, target);\n \ttemp   = expand_unop (mode, neg_optab,\n-\t\t\t      gen_highpart (mode, op0), imag_t, 0);\n+\t\t\t      gen_imagpart (mode, op0), imag_t, 0);\n \tif (temp != imag_t)\n \t  emit_move_insn (imag_t, temp);\n "}]}