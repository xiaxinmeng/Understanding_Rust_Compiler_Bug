{"sha": "be03ccc9da81801953dca0e2a2061c9b8c753787", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUwM2NjYzlkYTgxODAxOTUzZGNhMGUyYTIwNjFjOWI4Yzc1Mzc4Nw==", "commit": {"author": {"name": "Nicolas Pitre", "email": "nico@cam.org", "date": "2003-10-21T01:56:49Z"}, "committer": {"name": "Nicolas Pitre", "email": "nico@gcc.gnu.org", "date": "2003-10-21T01:56:49Z"}, "message": "arm.c (arm_override_options): Set arm_constant_limit to 2 instead of 1 when optimize_size is true.\n\n* config/arm/arm.c (arm_override_options): Set arm_constant_limit\nto 2 instead of 1 when optimize_size is true.  Gather code based on\noptimize_size together.  Add comment about XScale load latency.\n\nFrom-SVN: r72736", "tree": {"sha": "f5aecd1be13bfcd2e4dd0d04933f22ae40d66262", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5aecd1be13bfcd2e4dd0d04933f22ae40d66262"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be03ccc9da81801953dca0e2a2061c9b8c753787", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be03ccc9da81801953dca0e2a2061c9b8c753787", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be03ccc9da81801953dca0e2a2061c9b8c753787", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be03ccc9da81801953dca0e2a2061c9b8c753787/comments", "author": null, "committer": null, "parents": [{"sha": "802f1b93d00625af6ac4f16d24691e3d8bdfb3e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/802f1b93d00625af6ac4f16d24691e3d8bdfb3e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/802f1b93d00625af6ac4f16d24691e3d8bdfb3e7"}], "stats": {"total": 52, "additions": 36, "deletions": 16}, "files": [{"sha": "9aa1ee7e2959846bb67a4f4c9402b0f624172ab6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be03ccc9da81801953dca0e2a2061c9b8c753787/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be03ccc9da81801953dca0e2a2061c9b8c753787/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be03ccc9da81801953dca0e2a2061c9b8c753787", "patch": "@@ -1,3 +1,9 @@\n+2003-10-20  Nicolas Pitre <nico@cam.org>\n+\n+\t* config/arm/arm.c (arm_override_options): Set arm_constant_limit\n+\tto 2 instead of 1 when optimize_size is true.  Gather code based on\n+\toptimize_size together.  Add comment about XScale load latency.\n+\n 2003-10-21  Gunther Nikl  <gni@gecko.de>\n \n \t* config/m68k/m68k.c (m68k_output_function_prologue): Remove"}, {"sha": "8a7997e30f3ff6c46377cd358cf0c8b163c788af", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 30, "deletions": 16, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be03ccc9da81801953dca0e2a2061c9b8c753787/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be03ccc9da81801953dca0e2a2061c9b8c753787/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=be03ccc9da81801953dca0e2a2061c9b8c753787", "patch": "@@ -845,23 +845,37 @@ arm_override_options (void)\n       flag_schedule_insns = 0;\n     }\n \n-  /* If optimizing for space, don't synthesize constants.\n-     For processors with load scheduling, it never costs more than 2 cycles\n-     to load a constant, and the load scheduler may well reduce that to 1.  */\n-  if (optimize_size || (tune_flags & FL_LDSCHED))\n-    arm_constant_limit = 1;\n-  \n-  if (arm_tune_xscale)\n-    arm_constant_limit = 2;\n-\n-  /* If optimizing for size, bump the number of instructions that we\n-     are prepared to conditionally execute (even on a StrongARM). \n-     Otherwise for the StrongARM, which has early execution of branches,\n-     a sequence that is worth skipping is shorter.  */\n   if (optimize_size)\n-    max_insns_skipped = 6;\n-  else if (arm_is_strong)\n-    max_insns_skipped = 3;\n+    {\n+      /* If optimizing for space, we let the compiler synthesize constants\n+         with up to 2 insns, which uses the same space as a load from memory.\n+         This gives the opportunity to take even less space when different\n+         offsets can be factorized into multiple pre-indexed loads or stores. */\n+      arm_constant_limit = 2;\n+\n+      /* If optimizing for size, bump the number of instructions that we\n+         are prepared to conditionally execute (even on a StrongARM). */\n+      max_insns_skipped = 6;\n+    }\n+  else\n+    {\n+      /* For processors with load scheduling, it never costs more than\n+         2 cycles to load a constant, and the load scheduler may well\n+\t reduce that to 1.  */\n+      if (tune_flags & FL_LDSCHED)\n+        arm_constant_limit = 1;\n+\n+      /* On XScale the longer latency of a load makes it more difficult\n+         to achieve a good schedule, so it's faster to synthesize\n+\t constants that can be done in two insns. */\n+      if (arm_tune_xscale)\n+        arm_constant_limit = 2;\n+\n+      /* StrongARM has early execution of branches, so a sequence\n+         that is worth skipping is shorter.  */\n+      if (arm_is_strong)\n+        max_insns_skipped = 3;\n+    }\n \n   /* Register global variables with the garbage collector.  */\n   arm_add_gc_roots ();"}]}