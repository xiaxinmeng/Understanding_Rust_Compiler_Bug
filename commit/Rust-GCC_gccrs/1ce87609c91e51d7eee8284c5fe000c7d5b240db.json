{"sha": "1ce87609c91e51d7eee8284c5fe000c7d5b240db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNlODc2MDljOTFlNTFkN2VlZTgyODRjNWZlMDAwYzdkNWIyNDBkYg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-30T11:09:56Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-30T11:09:56Z"}, "message": "[13/77] Make floatn_mode return an opt_scalar_float_mode\n\nAs per subject.\n\n2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* target.def (default_floatn_mode): Return an opt_scalar_float_mode.\n\t* doc/tm.texi: Regenerate.\n\t* config/arm/arm.c (arm_floatn_mode): Return an opt_scalar_float_mode.\n\t* config/powerpcspe/powerpcspe.c (rs6000_floatn_mode): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_floatn_mode): Likewise.\n\t* targhooks.h (default_floatn_mode): Likewise.\n\t* targhooks.c (default_floatn_mode): Likewise.\n\t* tree.c (build_common_tree_nodes): Update accordingly.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r251465", "tree": {"sha": "546db64fb195401be1446efc42e41df63d77178e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/546db64fb195401be1446efc42e41df63d77178e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ce87609c91e51d7eee8284c5fe000c7d5b240db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ce87609c91e51d7eee8284c5fe000c7d5b240db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ce87609c91e51d7eee8284c5fe000c7d5b240db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ce87609c91e51d7eee8284c5fe000c7d5b240db/comments", "author": null, "committer": null, "parents": [{"sha": "5c20c4af29da29d2bb74b1fdf3c116f564431878", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c20c4af29da29d2bb74b1fdf3c116f564431878", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c20c4af29da29d2bb74b1fdf3c116f564431878"}], "stats": {"total": 115, "additions": 67, "deletions": 48}, "files": [{"sha": "a261c1870e11e11d18d7d49f8a0f7f92f2e40efc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce87609c91e51d7eee8284c5fe000c7d5b240db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce87609c91e51d7eee8284c5fe000c7d5b240db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ce87609c91e51d7eee8284c5fe000c7d5b240db", "patch": "@@ -1,3 +1,16 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* target.def (default_floatn_mode): Return an opt_scalar_float_mode.\n+\t* doc/tm.texi: Regenerate.\n+\t* config/arm/arm.c (arm_floatn_mode): Return an opt_scalar_float_mode.\n+\t* config/powerpcspe/powerpcspe.c (rs6000_floatn_mode): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_floatn_mode): Likewise.\n+\t* targhooks.h (default_floatn_mode): Likewise.\n+\t* targhooks.c (default_floatn_mode): Likewise.\n+\t* tree.c (build_common_tree_nodes): Update accordingly.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "982ea7e49a5ab525627f5d4d82e2597ac1b6e46f", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce87609c91e51d7eee8284c5fe000c7d5b240db/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce87609c91e51d7eee8284c5fe000c7d5b240db/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=1ce87609c91e51d7eee8284c5fe000c7d5b240db", "patch": "@@ -312,7 +312,7 @@ static bool arm_asm_elf_flags_numeric (unsigned int flags, unsigned int *num);\n static unsigned int arm_elf_section_type_flags (tree decl, const char *name,\n \t\t\t\t\t\tint reloc);\n static void arm_expand_divmod_libfunc (rtx, machine_mode, rtx, rtx, rtx *, rtx *);\n-static machine_mode arm_floatn_mode (int, bool);\n+static opt_scalar_float_mode arm_floatn_mode (int, bool);\n \f\n /* Table of machine attributes.  */\n static const struct attribute_spec arm_attribute_table[] =\n@@ -23656,11 +23656,15 @@ arm_excess_precision (enum excess_precision_type type)\n /* Implement TARGET_FLOATN_MODE.  Make very sure that we don't provide\n    _Float16 if we are using anything other than ieee format for 16-bit\n    floating point.  Otherwise, punt to the default implementation.  */\n-static machine_mode\n+static opt_scalar_float_mode\n arm_floatn_mode (int n, bool extended)\n {\n   if (!extended && n == 16)\n-    return arm_fp16_format == ARM_FP16_FORMAT_IEEE ? HFmode : VOIDmode;\n+    {\n+      if (arm_fp16_format == ARM_FP16_FORMAT_IEEE)\n+\treturn HFmode;\n+      return opt_scalar_float_mode ();\n+    }\n \n   return default_floatn_mode (n, extended);\n }"}, {"sha": "684467a97523f2fe74e832a8cb364a83517fb2d6", "filename": "gcc/config/powerpcspe/powerpcspe.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce87609c91e51d7eee8284c5fe000c7d5b240db/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce87609c91e51d7eee8284c5fe000c7d5b240db/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c?ref=1ce87609c91e51d7eee8284c5fe000c7d5b240db", "patch": "@@ -39199,7 +39199,7 @@ rs6000_vector_mode_supported_p (machine_mode mode)\n }\n \n /* Target hook for floatn_mode.  */\n-static machine_mode\n+static opt_scalar_float_mode\n rs6000_floatn_mode (int n, bool extended)\n {\n   if (extended)\n@@ -39213,10 +39213,10 @@ rs6000_floatn_mode (int n, bool extended)\n \t  if (TARGET_FLOAT128_KEYWORD)\n \t    return (FLOAT128_IEEE_P (TFmode)) ? TFmode : KFmode;\n \t  else\n-\t    return VOIDmode;\n+\t    return opt_scalar_float_mode ();\n \n \tcase 128:\n-\t  return VOIDmode;\n+\t  return opt_scalar_float_mode ();\n \n \tdefault:\n \t  /* Those are the only valid _FloatNx types.  */\n@@ -39237,10 +39237,10 @@ rs6000_floatn_mode (int n, bool extended)\n \t  if (TARGET_FLOAT128_KEYWORD)\n \t    return (FLOAT128_IEEE_P (TFmode)) ? TFmode : KFmode;\n \t  else\n-\t    return VOIDmode;\n+\t    return opt_scalar_float_mode ();\n \n \tdefault:\n-\t  return VOIDmode;\n+\t  return opt_scalar_float_mode ();\n \t}\n     }\n "}, {"sha": "e1371a16dd72ecad320d8357354317632c7857e5", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce87609c91e51d7eee8284c5fe000c7d5b240db/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce87609c91e51d7eee8284c5fe000c7d5b240db/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=1ce87609c91e51d7eee8284c5fe000c7d5b240db", "patch": "@@ -35953,7 +35953,7 @@ rs6000_vector_mode_supported_p (machine_mode mode)\n }\n \n /* Target hook for floatn_mode.  */\n-static machine_mode\n+static opt_scalar_float_mode\n rs6000_floatn_mode (int n, bool extended)\n {\n   if (extended)\n@@ -35967,10 +35967,10 @@ rs6000_floatn_mode (int n, bool extended)\n \t  if (TARGET_FLOAT128_KEYWORD)\n \t    return (FLOAT128_IEEE_P (TFmode)) ? TFmode : KFmode;\n \t  else\n-\t    return VOIDmode;\n+\t    return opt_scalar_float_mode ();\n \n \tcase 128:\n-\t  return VOIDmode;\n+\t  return opt_scalar_float_mode ();\n \n \tdefault:\n \t  /* Those are the only valid _FloatNx types.  */\n@@ -35991,10 +35991,10 @@ rs6000_floatn_mode (int n, bool extended)\n \t  if (TARGET_FLOAT128_KEYWORD)\n \t    return (FLOAT128_IEEE_P (TFmode)) ? TFmode : KFmode;\n \t  else\n-\t    return VOIDmode;\n+\t    return opt_scalar_float_mode ();\n \n \tdefault:\n-\t  return VOIDmode;\n+\t  return opt_scalar_float_mode ();\n \t}\n     }\n "}, {"sha": "9607ff12a0899dad01ef54f461d42e7026aff5d3", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce87609c91e51d7eee8284c5fe000c7d5b240db/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce87609c91e51d7eee8284c5fe000c7d5b240db/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=1ce87609c91e51d7eee8284c5fe000c7d5b240db", "patch": "@@ -4267,22 +4267,22 @@ hook returns true for all of @code{SFmode}, @code{DFmode},\n @code{XFmode} and @code{TFmode}, if such modes exist.\n @end deftypefn\n \n-@deftypefn {Target Hook} machine_mode TARGET_FLOATN_MODE (int @var{n}, bool @var{extended})\n+@deftypefn {Target Hook} opt_scalar_float_mode TARGET_FLOATN_MODE (int @var{n}, bool @var{extended})\n Define this to return the machine mode to use for the type \n @code{_Float@var{n}}, if @var{extended} is false, or the type \n-@code{_Float@var{n}x}, if @var{extended} is true.  If such a type \n-is not supported, return @code{VOIDmode}.  The default version of this \n-hook returns @code{SFmode} for @code{_Float32}, @code{DFmode} for \n+@code{_Float@var{n}x}, if @var{extended} is true.  If such a type is not\n+supported, return @code{opt_scalar_float_mode ()}.  The default version of\n+this hook returns @code{SFmode} for @code{_Float32}, @code{DFmode} for\n @code{_Float64} and @code{_Float32x} and @code{TFmode} for \n @code{_Float128}, if those modes exist and satisfy the requirements for \n those types and pass @code{TARGET_SCALAR_MODE_SUPPORTED_P} and \n @code{TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P}; for @code{_Float64x}, it \n returns the first of @code{XFmode} and @code{TFmode} that exists and \n satisfies the same requirements; for other types, it returns \n-@code{VOIDmode}.  The hook is only called for values of @var{n} and \n-@var{extended} that are valid according to ISO/IEC TS 18661-3:2015; that \n-is, @var{n} is one of 32, 64, 128, or, if @var{extended} is false, 16 or \n-greater than 128 and a multiple of 32.\n+@code{opt_scalar_float_mode ()}.  The hook is only called for values\n+of @var{n} and @var{extended} that are valid according to\n+ISO/IEC TS 18661-3:2015; that is, @var{n} is one of 32, 64, 128, or,\n+if @var{extended} is false, 16 or greater than 128 and a multiple of 32.\n @end deftypefn\n \n @deftypefn {Target Hook} bool TARGET_SMALL_REGISTER_CLASSES_FOR_MODE_P (machine_mode @var{mode})"}, {"sha": "1fff0e8c30fdbbe3f6fffe6d36420467b775156b", "filename": "gcc/target.def", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce87609c91e51d7eee8284c5fe000c7d5b240db/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce87609c91e51d7eee8284c5fe000c7d5b240db/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=1ce87609c91e51d7eee8284c5fe000c7d5b240db", "patch": "@@ -3385,20 +3385,20 @@ DEFHOOK\n (floatn_mode,\n  \"Define this to return the machine mode to use for the type \\n\\\n @code{_Float@var{n}}, if @var{extended} is false, or the type \\n\\\n-@code{_Float@var{n}x}, if @var{extended} is true.  If such a type \\n\\\n-is not supported, return @code{VOIDmode}.  The default version of this \\n\\\n-hook returns @code{SFmode} for @code{_Float32}, @code{DFmode} for \\n\\\n+@code{_Float@var{n}x}, if @var{extended} is true.  If such a type is not\\n\\\n+supported, return @code{opt_scalar_float_mode ()}.  The default version of\\n\\\n+this hook returns @code{SFmode} for @code{_Float32}, @code{DFmode} for\\n\\\n @code{_Float64} and @code{_Float32x} and @code{TFmode} for \\n\\\n @code{_Float128}, if those modes exist and satisfy the requirements for \\n\\\n those types and pass @code{TARGET_SCALAR_MODE_SUPPORTED_P} and \\n\\\n @code{TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P}; for @code{_Float64x}, it \\n\\\n returns the first of @code{XFmode} and @code{TFmode} that exists and \\n\\\n satisfies the same requirements; for other types, it returns \\n\\\n-@code{VOIDmode}.  The hook is only called for values of @var{n} and \\n\\\n-@var{extended} that are valid according to ISO/IEC TS 18661-3:2015; that \\n\\\n-is, @var{n} is one of 32, 64, 128, or, if @var{extended} is false, 16 or \\n\\\n-greater than 128 and a multiple of 32.\",\n- machine_mode, (int n, bool extended),\n+@code{opt_scalar_float_mode ()}.  The hook is only called for values\\n\\\n+of @var{n} and @var{extended} that are valid according to\\n\\\n+ISO/IEC TS 18661-3:2015; that is, @var{n} is one of 32, 64, 128, or,\\n\\\n+if @var{extended} is false, 16 or greater than 128 and a multiple of 32.\",\n+ opt_scalar_float_mode, (int n, bool extended),\n  default_floatn_mode)\n \n /* Compute cost of moving data from a register of class FROM to one of"}, {"sha": "76ef7c98cab8b4466836241feb97684b8daecd30", "filename": "gcc/targhooks.c", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce87609c91e51d7eee8284c5fe000c7d5b240db/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce87609c91e51d7eee8284c5fe000c7d5b240db/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=1ce87609c91e51d7eee8284c5fe000c7d5b240db", "patch": "@@ -469,12 +469,13 @@ default_libgcc_floating_mode_supported_p (machine_mode mode)\n /* Return the machine mode to use for the type _FloatN, if EXTENDED is\n    false, or _FloatNx, if EXTENDED is true, or VOIDmode if not\n    supported.  */\n-machine_mode\n+opt_scalar_float_mode\n default_floatn_mode (int n, bool extended)\n {\n   if (extended)\n     {\n-      machine_mode cand1 = VOIDmode, cand2 = VOIDmode;\n+      opt_scalar_float_mode cand1, cand2;\n+      scalar_float_mode mode;\n       switch (n)\n \t{\n \tcase 32:\n@@ -499,20 +500,21 @@ default_floatn_mode (int n, bool extended)\n \t  /* Those are the only valid _FloatNx types.  */\n \t  gcc_unreachable ();\n \t}\n-      if (cand1 != VOIDmode\n-\t  && REAL_MODE_FORMAT (cand1)->ieee_bits > n\n-\t  && targetm.scalar_mode_supported_p (cand1)\n-\t  && targetm.libgcc_floating_mode_supported_p (cand1))\n+      if (cand1.exists (&mode)\n+\t  && REAL_MODE_FORMAT (mode)->ieee_bits > n\n+\t  && targetm.scalar_mode_supported_p (mode)\n+\t  && targetm.libgcc_floating_mode_supported_p (mode))\n \treturn cand1;\n-      if (cand2 != VOIDmode\n-\t  && REAL_MODE_FORMAT (cand2)->ieee_bits > n\n-\t  && targetm.scalar_mode_supported_p (cand2)\n-\t  && targetm.libgcc_floating_mode_supported_p (cand2))\n+      if (cand2.exists (&mode)\n+\t  && REAL_MODE_FORMAT (mode)->ieee_bits > n\n+\t  && targetm.scalar_mode_supported_p (mode)\n+\t  && targetm.libgcc_floating_mode_supported_p (mode))\n \treturn cand2;\n     }\n   else\n     {\n-      machine_mode cand = VOIDmode;\n+      opt_scalar_float_mode cand;\n+      scalar_float_mode mode;\n       switch (n)\n \t{\n \tcase 16:\n@@ -545,13 +547,13 @@ default_floatn_mode (int n, bool extended)\n \tdefault:\n \t  break;\n \t}\n-      if (cand != VOIDmode\n-\t  && REAL_MODE_FORMAT (cand)->ieee_bits == n\n-\t  && targetm.scalar_mode_supported_p (cand)\n-\t  && targetm.libgcc_floating_mode_supported_p (cand))\n+      if (cand.exists (&mode)\n+\t  && REAL_MODE_FORMAT (mode)->ieee_bits == n\n+\t  && targetm.scalar_mode_supported_p (mode)\n+\t  && targetm.libgcc_floating_mode_supported_p (mode))\n \treturn cand;\n     }\n-  return VOIDmode;\n+  return opt_scalar_float_mode ();\n }\n \n /* Make some target macros useable by target-independent code.  */"}, {"sha": "b0655721b3d3e2867ef0303b85fa0523d45a6a82", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce87609c91e51d7eee8284c5fe000c7d5b240db/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce87609c91e51d7eee8284c5fe000c7d5b240db/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=1ce87609c91e51d7eee8284c5fe000c7d5b240db", "patch": "@@ -73,7 +73,7 @@ extern tree default_mangle_assembler_name (const char *);\n \n extern bool default_scalar_mode_supported_p (machine_mode);\n extern bool default_libgcc_floating_mode_supported_p (machine_mode);\n-extern machine_mode default_floatn_mode (int, bool);\n+extern opt_scalar_float_mode default_floatn_mode (int, bool);\n extern bool targhook_words_big_endian (void);\n extern bool targhook_float_words_big_endian (void);\n extern bool default_float_exceptions_rounding_supported_p (void);"}, {"sha": "946ad945e6aea2a1f5eb827b942951bb4a6785da", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce87609c91e51d7eee8284c5fe000c7d5b240db/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce87609c91e51d7eee8284c5fe000c7d5b240db/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=1ce87609c91e51d7eee8284c5fe000c7d5b240db", "patch": "@@ -9689,8 +9689,8 @@ build_common_tree_nodes (bool signed_char)\n     {\n       int n = floatn_nx_types[i].n;\n       bool extended = floatn_nx_types[i].extended;\n-      machine_mode mode = targetm.floatn_mode (n, extended);\n-      if (mode == VOIDmode)\n+      scalar_float_mode mode;\n+      if (!targetm.floatn_mode (n, extended).exists (&mode))\n \tcontinue;\n       int precision = GET_MODE_PRECISION (mode);\n       /* Work around the rs6000 KFmode having precision 113 not"}]}