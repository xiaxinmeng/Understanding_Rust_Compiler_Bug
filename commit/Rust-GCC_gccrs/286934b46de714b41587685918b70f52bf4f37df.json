{"sha": "286934b46de714b41587685918b70f52bf4f37df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg2OTM0YjQ2ZGU3MTRiNDE1ODc2ODU5MThiNzBmNTJiZjRmMzdkZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-07-15T16:03:07Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-07-15T16:03:07Z"}, "message": "alpha.c (alpha_atomic_assign_expand_fenv): New.\n\n\t* config/alpha/alpha.c (alpha_atomic_assign_expand_fenv): New.\n\t(TARGET_ATOMIC_ASSIGN_EXPAND_FENV): New define.\n\ntestsuite/ChangeLog:\n\n\t* lib/target-supports.exp (check_effective_target_fenv_exceptions):\n\tAdd IEEE options to compile flags.\n\t* gcc.dg/atomic/c11-atomic-exec-5.c: Ditto.  Add -mieee-with-inexact\n\tadditional option and lower ITER_COUNT to 100 for alpha*-*-* targets.\n\nFrom-SVN: r212568", "tree": {"sha": "2bfaf8c4ab991e9cf1c855d9edfb59bab265fe64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bfaf8c4ab991e9cf1c855d9edfb59bab265fe64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/286934b46de714b41587685918b70f52bf4f37df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/286934b46de714b41587685918b70f52bf4f37df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/286934b46de714b41587685918b70f52bf4f37df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/286934b46de714b41587685918b70f52bf4f37df/comments", "author": null, "committer": null, "parents": [{"sha": "6259a78ac3093f0823011ac40542b0a3f356fe28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6259a78ac3093f0823011ac40542b0a3f356fe28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6259a78ac3093f0823011ac40542b0a3f356fe28"}], "stats": {"total": 109, "additions": 96, "deletions": 13}, "files": [{"sha": "415ec9252d87b62007bf3e600f28c873cca43a1d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/286934b46de714b41587685918b70f52bf4f37df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/286934b46de714b41587685918b70f52bf4f37df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=286934b46de714b41587685918b70f52bf4f37df", "patch": "@@ -1,4 +1,9 @@\n-2014-07-14  Jan Hubicka  <hubicka@ucw.cz>\n+2014-07-15  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha.c (alpha_atomic_assign_expand_fenv): New.\n+\t(TARGET_ATOMIC_ASSIGN_EXPAND_FENV): New define.\n+\n+2014-07-15  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* fold-const.c (fold_checksum_tree): Fix typo in previous patch.\n \n@@ -12,17 +17,15 @@\n 2014-07-15  Michael Matz  <matz@suse.de>\n \n \tPR rtl-optimization/61772\n-\t* ifcvt.c (dead_or_predicable): Check jump to be free of side\n-\teffects.\n+\t* ifcvt.c (dead_or_predicable): Check jump to be free of side effects.\n \n 2014-07-15  Richard Biener  <rguenther@suse.de>\n \n \t* opts.c (default_options_table): Disable bit-ccp at -Og.\n \n 2014-07-14  Jan Hubicka  <hubicka@ucw.cz>\n \n-\t* fold-const.c (fold_checksum_tree): Move checking of\n-\tDECL_RESULT.\n+\t* fold-const.c (fold_checksum_tree): Move checking of DECL_RESULT.\n \n 2014-07-14  Jan Hubicka  <hubicka@ucw.cz>\n \n@@ -117,8 +120,7 @@\n \t(TV_IPA_LTO_CTORS_IN, TV_IPA_LTO_CTORS_OUT): New timevar.\n \t* cgraph.c (cgraph_get_body): Push GIMPLE_IN timevar.\n \t(varpool_get_constructor): Push CTORS_IN timevar.\n-\t* lto-streamer-out.c (lto_output): Push TV_IPA_LTO_CTORS_OUT\n-\ttimevar.\n+\t* lto-streamer-out.c (lto_output): Push TV_IPA_LTO_CTORS_OUT timevar.\n \n 2014-07-12  Uros Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "e79621ff058f595b5946ba7037861cdfcb4b0857", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/286934b46de714b41587685918b70f52bf4f37df/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/286934b46de714b41587685918b70f52bf4f37df/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=286934b46de714b41587685918b70f52bf4f37df", "patch": "@@ -9888,6 +9888,72 @@ alpha_canonicalize_comparison (int *code, rtx *op0, rtx *op1,\n       *op1 = GEN_INT (255);\n     }\n }\n+\n+/* Implement TARGET_ATOMIC_ASSIGN_EXPAND_FENV.  */\n+\n+static void\n+alpha_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n+{\n+  const unsigned HOST_WIDE_INT SWCR_STATUS_MASK = (0x3fUL << 17);\n+\n+  tree fenv_var, get_fpscr, set_fpscr, mask, ld_fenv, masked_fenv;\n+  tree new_fenv_var, reload_fenv, restore_fnenv;\n+  tree update_call, atomic_feraiseexcept, hold_fnclex;\n+\n+  /* Assume OSF/1 compatible interfaces.  */\n+  if (!TARGET_ABI_OSF)\n+    return;\n+\n+  /* Generate the equivalent of :\n+       unsigned long fenv_var;\n+       fenv_var = __ieee_get_fp_control ();\n+\n+       unsigned long masked_fenv;\n+       masked_fenv = fenv_var & mask;\n+\n+       __ieee_set_fp_control (masked_fenv);  */\n+\n+  fenv_var = create_tmp_var (long_unsigned_type_node, NULL);\n+  get_fpscr\n+    = build_fn_decl (\"__ieee_get_fp_control\",\n+\t\t     build_function_type_list (long_unsigned_type_node, NULL));\n+  set_fpscr\n+    = build_fn_decl (\"__ieee_set_fp_control\",\n+\t\t     build_function_type_list (void_type_node, NULL));\n+  mask = build_int_cst (long_unsigned_type_node, ~SWCR_STATUS_MASK);\n+  ld_fenv = build2 (MODIFY_EXPR, long_unsigned_type_node,\n+\t\t    fenv_var, build_call_expr (get_fpscr, 0));\n+  masked_fenv = build2 (BIT_AND_EXPR, long_unsigned_type_node, fenv_var, mask);\n+  hold_fnclex = build_call_expr (set_fpscr, 1, masked_fenv);\n+  *hold = build2 (COMPOUND_EXPR, void_type_node,\n+\t\t  build2 (COMPOUND_EXPR, void_type_node, masked_fenv, ld_fenv),\n+\t\t  hold_fnclex);\n+\n+  /* Store the value of masked_fenv to clear the exceptions:\n+     __ieee_set_fp_control (masked_fenv);  */\n+\n+  *clear = build_call_expr (set_fpscr, 1, masked_fenv);\n+\n+  /* Generate the equivalent of :\n+       unsigned long new_fenv_var;\n+       new_fenv_var = __ieee_get_fp_control ();\n+\n+       __ieee_set_fp_control (fenv_var);\n+\n+       __atomic_feraiseexcept (new_fenv_var);  */\n+\n+  new_fenv_var = create_tmp_var (long_unsigned_type_node, NULL);\n+  reload_fenv = build2 (MODIFY_EXPR, long_unsigned_type_node, new_fenv_var,\n+\t\t\tbuild_call_expr (get_fpscr, 0));\n+  restore_fnenv = build_call_expr (set_fpscr, 1, fenv_var);\n+  atomic_feraiseexcept = builtin_decl_implicit (BUILT_IN_ATOMIC_FERAISEEXCEPT);\n+  update_call\n+    = build_call_expr (atomic_feraiseexcept, 1,\n+\t\t       fold_convert (integer_type_node, new_fenv_var));\n+  *update = build2 (COMPOUND_EXPR, void_type_node,\n+\t\t    build2 (COMPOUND_EXPR, void_type_node,\n+\t\t\t    reload_fenv, restore_fnenv), update_call);\n+}\n \f\n /* Initialize the GCC target structure.  */\n #if TARGET_ABI_OPEN_VMS\n@@ -10060,6 +10126,9 @@ alpha_canonicalize_comparison (int *code, rtx *op0, rtx *op1,\n #undef TARGET_CANONICALIZE_COMPARISON\n #define TARGET_CANONICALIZE_COMPARISON alpha_canonicalize_comparison\n \n+#undef TARGET_ATOMIC_ASSIGN_EXPAND_FENV\n+#define TARGET_ATOMIC_ASSIGN_EXPAND_FENV alpha_atomic_assign_expand_fenv\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n \f"}, {"sha": "3a9da99eb695f0228a10e082d4a52e5a20f41747", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/286934b46de714b41587685918b70f52bf4f37df/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/286934b46de714b41587685918b70f52bf4f37df/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=286934b46de714b41587685918b70f52bf4f37df", "patch": "@@ -1,3 +1,10 @@\n+2014-07-15  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_fenv_exceptions):\n+\tAdd IEEE options to compile flags.\n+\t* gcc.dg/atomic/c11-atomic-exec-5.c: Ditto.  Add -mieee-with-inexact\n+\tadditional option and lower ITER_COUNT to 100 for alpha*-*-* targets.\n+\n 2014-07-15  Michael Matz  <matz@suse.de>\n \n \tPR rtl-optimization/61772\n@@ -67,8 +74,7 @@\n \n 2014-07-13  Tobias Burnus  <burnus@net-b.de>\n \n-\t* gfortran.dg/coarray_atomic_4.f90: Avoid using a kind=16\n-\tinteger.\n+\t* gfortran.dg/coarray_atomic_4.f90: Avoid using a kind=16 integer.\n \n 2014-07-12  Paul Thomas  <pault@gcc.gnu.org>\n "}, {"sha": "49fe5dd3b17d78b62bad7ed353663ef489a898a8", "filename": "gcc/testsuite/gcc.dg/atomic/c11-atomic-exec-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/286934b46de714b41587685918b70f52bf4f37df/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fc11-atomic-exec-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/286934b46de714b41587685918b70f52bf4f37df/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fc11-atomic-exec-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fc11-atomic-exec-4.c?ref=286934b46de714b41587685918b70f52bf4f37df", "patch": "@@ -3,7 +3,7 @@\n    out in two threads.  */\n /* { dg-do run } */\n /* { dg-options \"-std=c11 -pedantic-errors -pthread -D_POSIX_C_SOURCE=200809L\" } */\n-/* { dg-additional-options \"-D_XOPEN_SOURCE=600\" { target *-*-solaris2.1[0-9]* } }\n+/* { dg-additional-options \"-D_XOPEN_SOURCE=600\" { target *-*-solaris2.1[0-9]* } } */\n /* { dg-require-effective-target pthread } */\n \n #include <stdint.h>"}, {"sha": "0646b1c2c4b786cb17550dad2fe3b34963c96f2c", "filename": "gcc/testsuite/gcc.dg/atomic/c11-atomic-exec-5.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/286934b46de714b41587685918b70f52bf4f37df/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fc11-atomic-exec-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/286934b46de714b41587685918b70f52bf4f37df/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fc11-atomic-exec-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fc11-atomic-exec-5.c?ref=286934b46de714b41587685918b70f52bf4f37df", "patch": "@@ -4,7 +4,9 @@\n    get properly cleared).  */\n /* { dg-do run } */\n /* { dg-options \"-std=c11 -pedantic-errors -pthread -D_POSIX_C_SOURCE=200809L\" } */\n-/* { dg-additional-options \"-D_XOPEN_SOURCE=600\" { target *-*-solaris2.1[0-9]* } }\n+/* { dg-add-options ieee } */\n+/* { dg-additional-options \"-mieee-with-inexact\" { target alpha*-*-* } } */\n+/* { dg-additional-options \"-D_XOPEN_SOURCE=600\" { target *-*-solaris2.1[0-9]* } } */\n /* { dg-require-effective-target fenv_exceptions } */\n /* { dg-require-effective-target pthread } */\n \n@@ -21,7 +23,11 @@\n \t\t\t | FE_OVERFLOW\t\t\\\n \t\t\t | FE_UNDERFLOW)\n \n-#define ITER_COUNT 10000\n+#if defined __alpha__\n+  #define ITER_COUNT 100\n+#else\n+  #define ITER_COUNT 10000\n+#endif\n \n static volatile _Atomic bool thread_ready, thread_stop;\n "}, {"sha": "db65ebee6e346fe938a1e05e6ba9c826bd370e6a", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/286934b46de714b41587685918b70f52bf4f37df/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/286934b46de714b41587685918b70f52bf4f37df/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=286934b46de714b41587685918b70f52bf4f37df", "patch": "@@ -5923,7 +5923,7 @@ proc check_effective_target_fenv_exceptions {} {\n \t  else\n \t    abort ();\n \t}\n-    } \"-std=gnu99\"]\n+    } [add_options_for_ieee \"-std=gnu99\"]]\n }\n \n # Return 1 if LOGICAL_OP_NON_SHORT_CIRCUIT is set to 0 for the current target."}]}