{"sha": "ad487c38165975bc7980d362b3a664808deae35c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ0ODdjMzgxNjU5NzViYzc5ODBkMzYyYjNhNjY0ODA4ZGVhZTM1Yw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-01-25T17:45:16Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-01-25T17:45:16Z"}, "message": "combine.c (simplify_comparison, case AND): Remove a redundant test.\n\n\t* combine.c (simplify_comparison, case AND): Remove a redundant\n\ttest.\n\nFrom-SVN: r61787", "tree": {"sha": "593199813ce2d072fac01d971d875d5eb65de1b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/593199813ce2d072fac01d971d875d5eb65de1b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad487c38165975bc7980d362b3a664808deae35c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad487c38165975bc7980d362b3a664808deae35c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad487c38165975bc7980d362b3a664808deae35c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad487c38165975bc7980d362b3a664808deae35c/comments", "author": null, "committer": null, "parents": [{"sha": "07d9b20d818e83c12fee88ea4c41f3788ccee94b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07d9b20d818e83c12fee88ea4c41f3788ccee94b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07d9b20d818e83c12fee88ea4c41f3788ccee94b"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "f8b02bd54382dfe7ca3842a290715d99c4fbb3d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad487c38165975bc7980d362b3a664808deae35c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad487c38165975bc7980d362b3a664808deae35c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad487c38165975bc7980d362b3a664808deae35c", "patch": "@@ -1,3 +1,8 @@\n+2003-01-25  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* combine.c (simplify_comparison, case AND): Remove a redundant\n+\ttest.\n+\n 2002-01-25  Roger Sayle  <roger@eyesopen.com>\n \n \t* function.h (struct function): New field calls_constant_p."}, {"sha": "d21daa0bf7e0dc8bef0218ae7e083038987d677f", "filename": "gcc/combine.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad487c38165975bc7980d362b3a664808deae35c/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad487c38165975bc7980d362b3a664808deae35c/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=ad487c38165975bc7980d362b3a664808deae35c", "patch": "@@ -10908,6 +10908,12 @@ simplify_comparison (code, pop0, pop1)\n \t     represents the low part, permute the SUBREG and the AND and\n \t     try again.  */\n \t  if (GET_CODE (XEXP (op0, 0)) == SUBREG\n+\t      /* It is unsafe to commute the AND into the SUBREG if the SUBREG\n+\t\t is paradoxical and WORD_REGISTER_OPERATIONS is not defined.\n+\t\t As originally written the upper bits have a defined value\n+\t\t due to the AND operation.  However, if we commute the AND\n+\t\t inside the SUBREG then they no longer have defined values\n+\t\t and the meaning of the code has been changed.  */\n \t      && (0\n #ifdef WORD_REGISTER_OPERATIONS\n \t\t  || ((mode_width\n@@ -10919,16 +10925,6 @@ simplify_comparison (code, pop0, pop1)\n \t\t       <= (GET_MODE_BITSIZE\n \t\t\t   (GET_MODE (SUBREG_REG (XEXP (op0, 0))))))\n \t\t      && subreg_lowpart_p (XEXP (op0, 0))))\n-#ifndef WORD_REGISTER_OPERATIONS\n-\t      /* It is unsafe to commute the AND into the SUBREG if the SUBREG\n-\t\t is paradoxical and WORD_REGISTER_OPERATIONS is not defined.\n-\t\t As originally written the upper bits have a defined value\n-\t\t due to the AND operation.  However, if we commute the AND\n-\t\t inside the SUBREG then they no longer have defined values\n-\t\t and the meaning of the code has been changed.  */\n-\t      && (GET_MODE_SIZE (GET_MODE (XEXP (op0, 0)))\n-\t\t  <= GET_MODE_SIZE (GET_MODE (SUBREG_REG (XEXP (op0, 0)))))\n-#endif\n \t      && GET_CODE (XEXP (op0, 1)) == CONST_INT\n \t      && mode_width <= HOST_BITS_PER_WIDE_INT\n \t      && (GET_MODE_BITSIZE (GET_MODE (SUBREG_REG (XEXP (op0, 0))))"}]}