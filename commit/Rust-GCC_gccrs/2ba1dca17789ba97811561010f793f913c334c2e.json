{"sha": "2ba1dca17789ba97811561010f793f913c334c2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJhMWRjYTE3Nzg5YmE5NzgxMTU2MTAxMGY3OTNmOTEzYzMzNGMyZQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2013-09-17T21:10:38Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2013-09-17T21:10:38Z"}, "message": "rl78.c (need_to_save): Change return type to bool.\n\n* config/rl78/rl78.c (need_to_save): Change return type to bool.\nFor interrupt functions: save all call clobbered registers if the\ninterrupt handler is not a leaf function.\n(rl78_expand_prologue): Always recompute the frame information.\nFor interrupt functions: only select bank 0 if one of the bank 0\nregisters is going to be psuhed.\n\nFrom-SVN: r202667", "tree": {"sha": "24a157dfa9b4c0c5d7559c0f7de441c98ea7d6b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24a157dfa9b4c0c5d7559c0f7de441c98ea7d6b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ba1dca17789ba97811561010f793f913c334c2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ba1dca17789ba97811561010f793f913c334c2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ba1dca17789ba97811561010f793f913c334c2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ba1dca17789ba97811561010f793f913c334c2e/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2e7c3f214d24739ffc7039a884167a47a36f5352", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e7c3f214d24739ffc7039a884167a47a36f5352", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e7c3f214d24739ffc7039a884167a47a36f5352"}], "stats": {"total": 60, "additions": 40, "deletions": 20}, "files": [{"sha": "fc511f0570d00d66997b73fc5b336dffe61fd158", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ba1dca17789ba97811561010f793f913c334c2e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ba1dca17789ba97811561010f793f913c334c2e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ba1dca17789ba97811561010f793f913c334c2e", "patch": "@@ -1,3 +1,12 @@\n+2013-09-17  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/rl78/rl78.c (need_to_save): Change return type to bool.\n+\tFor interrupt functions: save all call clobbered registers if the\n+\tinterrupt handler is not a leaf function.\n+\t(rl78_expand_prologue): Always recompute the frame information.\n+\tFor interrupt functions: only select bank 0 if one of the bank 0\n+\tregisters is going to be psuhed.\n+\n 2013-09-17  DJ Delorie  <dj@redhat.com>\n \n \t* config/rl78/constraints.md: For each W* constraint, rename to C*"}, {"sha": "70e1dee2f1456af7508c8ef2fd282a7270ffd880", "filename": "gcc/config/rl78/rl78.c", "status": "modified", "additions": 31, "deletions": 20, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ba1dca17789ba97811561010f793f913c334c2e/gcc%2Fconfig%2Frl78%2Frl78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ba1dca17789ba97811561010f793f913c334c2e/gcc%2Fconfig%2Frl78%2Frl78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.c?ref=2ba1dca17789ba97811561010f793f913c334c2e", "patch": "@@ -540,34 +540,39 @@ rl78_can_eliminate (const int from ATTRIBUTE_UNUSED, const int to ATTRIBUTE_UNUS\n   return true;\n }\n \n-/* Returns nonzero if the given register needs to be saved by the\n+/* Returns true if the given register needs to be saved by the\n    current function.  */\n-static int\n-need_to_save (int regno)\n+static bool\n+need_to_save (unsigned int regno)\n {\n   if (is_interrupt_func (cfun->decl))\n     {\n-      if (regno < 8)\n-\treturn 1; /* don't know what devirt will need */\n+       /* We don't need to save registers that have\n+\t  been reserved for interrupt handlers.  */\n       if (regno > 23)\n-\treturn 0; /* don't need to save interrupt registers */\n-      if (crtl->is_leaf)\n-\t{\n-\t  return df_regs_ever_live_p (regno);\n-\t}\n-      else\n-\treturn 1;\n+\treturn false;\n+\n+      /* If the handler is a non-leaf function then it may call\n+\t non-interrupt aware routines which will happily clobber\n+\t any call_used registers, so we have to preserve them.  */\n+      if (!crtl->is_leaf && call_used_regs[regno])\n+\treturn true;\n+\n+      /* Otherwise we only have to save a register, call_used\n+\t or not, if it is used by this handler.  */\n+      return df_regs_ever_live_p (regno);\n     }\n+\n   if (regno == FRAME_POINTER_REGNUM && frame_pointer_needed)\n-    return 1;\n+    return true;\n   if (fixed_regs[regno])\n-    return 0;\n+    return false;\n   if (crtl->calls_eh_return)\n-    return 1;\n+    return true;\n   if (df_regs_ever_live_p (regno)\n       && !call_used_regs[regno])\n-    return 1;\n-  return 0;\n+    return true;\n+  return false;\n }\n \n /* We use this to wrap all emitted insns in the prologue.  */\n@@ -1026,14 +1031,20 @@ rl78_expand_prologue (void)\n   if (rl78_is_naked_func ())\n     return;\n \n-  if (!cfun->machine->computed)\n-    rl78_compute_frame_info ();\n+  /* Always re-compute the frame info - the register usage may have changed.  */\n+  rl78_compute_frame_info ();\n \n   if (flag_stack_usage_info)\n     current_function_static_stack_size = cfun->machine->framesize;\n \n   if (is_interrupt_func (cfun->decl) && !TARGET_G10)\n-    emit_insn (gen_sel_rb (GEN_INT (0)));\n+    for (i = 0; i < 4; i++)\n+      if (cfun->machine->need_to_push [i])\n+\t{\n+\t  /* Select Bank 0 if we are using any registers from Bank 0.   */\n+\t  emit_insn (gen_sel_rb (GEN_INT (0)));\n+\t  break;\n+\t}\n \n   for (i = 0; i < 16; i++)\n     if (cfun->machine->need_to_push [i])"}]}