{"sha": "4e1e206433953cd5a879b1496145a09867f200b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUxZTIwNjQzMzk1M2NkNWE4NzliMTQ5NjE0NWEwOTg2N2YyMDBiNw==", "commit": {"author": {"name": "Manfred Hollstein", "email": "manfred@gcc.gnu.org", "date": "1998-03-12T00:29:16Z"}, "committer": {"name": "Manfred Hollstein", "email": "manfred@gcc.gnu.org", "date": "1998-03-12T00:29:16Z"}, "message": "a\nIn gcc/:\n\t* bitmap.c (bitmap_element_allocate): Remove unused parameter;\n\tchange callers accordingly.\n\t* cplus-dem.c (arm_special): Remove unused parameter work in prototype\n\tand definition; change all callers accordingly.\n\t* except.c (init_eh): Avoid assignment of unused return value of\n\tbuild_pointer_type; cast it to void, instead, and remove unused\n\tvariable type.\n\t* gcc.c (lang_specific_driver): Define prototype only #ifdef\n\tLANG_SPECIFIC_DRIVER.\n\t(temp_names): Define only #ifdef MKTEMP_EACH_FILE.\n\t* genoutput.c (output_epilogue): Initialize next_name to 0.\n\t* real.c (efrexp): #if 0 prototype and function definition.\n\t(eremain): Likewise.\n\t(uditoe): Likewise.\n\t(ditoe): Likewise.\n\t(etoudi): Likewise.\n\t(etodi): Likewise.\n\t(esqrt): Likewise.\n\t* reload.c (push_secondary_reload): Define prototype only\n\t#ifdef HAVE_SECONDARY_RELOADS.\n\t* varasm.c (assemble_static_space): Define rounded only\n\t#ifndef ASM_OUTPUT_ALIGNED_LOCAL.\nIn gcc/cp/:\n\t* call.c (default_parm_conversions): Remove prototype definition.\n\t(build_method_call): Remove unused variable result.\n\t* cvt.c (ocp_convert): Remove unused variable conversion.\n\t* decl2.c (ambiguous_decl): Add explicit parameter definition for name.\n\t* except.c (do_unwind): #if 0 definition of unused variables fcall\n\tand next_pc.\n\t* expr.c (extract_scalar_init): #if 0 prototype and function definition.\n\t* init.c (expand_aggr_init_1): Remove unused variable init_type.\n\t(build_new_1): Remove unused variable t.\n\t* pt.c (instantiate_class_template): Remove unused variable newtag;\n\tcast called function return value to void.\n\t(do_decl_instantiation): Remove unused variables name and fn.\n\t* tree.c (get_type_decl): Add default return to shut up compiler from\n\tcomplaining control reaches end of non-void function.\n\t* typeck.c (build_x_conditional_expr): Remove unused variable rval.\n\nFrom-SVN: r18497", "tree": {"sha": "7647abfaa5d6efde5b142c17cd5cbbd0ac63a59e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7647abfaa5d6efde5b142c17cd5cbbd0ac63a59e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e1e206433953cd5a879b1496145a09867f200b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e1e206433953cd5a879b1496145a09867f200b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e1e206433953cd5a879b1496145a09867f200b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e1e206433953cd5a879b1496145a09867f200b7/comments", "author": null, "committer": null, "parents": [{"sha": "1bbe34be639806778ef821dff78b2f1019b4af0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bbe34be639806778ef821dff78b2f1019b4af0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bbe34be639806778ef821dff78b2f1019b4af0e"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "dd6d50f6fb9ecb29325cf3577e44def026aeb84b", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1e206433953cd5a879b1496145a09867f200b7/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1e206433953cd5a879b1496145a09867f200b7/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=4e1e206433953cd5a879b1496145a09867f200b7", "patch": "@@ -1921,6 +1921,9 @@ get_type_decl (t)\n     return TYPE_STUB_DECL (t);\n   \n   my_friendly_abort (42);\n+\n+  /* Stop compiler from complaining control reaches end of non-void function.  */\n+  return 0;\n }\n \n int"}, {"sha": "6aa5cb59b31c43f607a83644578b79680b6e224e", "filename": "gcc/cplus-dem.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1e206433953cd5a879b1496145a09867f200b7/gcc%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1e206433953cd5a879b1496145a09867f200b7/gcc%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcplus-dem.c?ref=4e1e206433953cd5a879b1496145a09867f200b7", "patch": "@@ -264,7 +264,7 @@ static int\n gnu_special PARAMS ((struct work_stuff *, const char **, string *));\n \n static int\n-arm_special PARAMS ((struct work_stuff *, const char **, string *));\n+arm_special PARAMS ((const char **, string *));\n \n static void\n string_need PARAMS ((string *, int));\n@@ -1696,7 +1696,7 @@ demangle_prefix (work, mangled, declp)\n \t then find the next \"__\" that separates the prefix from the signature.\n \t */\n       if (!(ARM_DEMANGLING || LUCID_DEMANGLING)\n-\t  || (arm_special (work, mangled, declp) == 0))\n+\t  || (arm_special (mangled, declp) == 0))\n \t{\n \t  while (*scan == '_')\n \t    {\n@@ -1940,8 +1940,8 @@ LOCAL FUNCTION\n SYNOPSIS\n \n \tstatic int\n-\tarm_special (struct work_stuff *work, const char **mangled,\n-\t\t\tstring *declp);\n+\tarm_special (const char **mangled,\n+\t\t     string *declp);\n \n \n DESCRIPTION\n@@ -1955,8 +1955,7 @@ DESCRIPTION\n  */\n \n static int\n-arm_special (work, mangled, declp)\n-     struct work_stuff *work;\n+arm_special (mangled, declp)\n      const char **mangled;\n      string *declp;\n {"}, {"sha": "8e35070b6d2669fd376fd50653d72aff61e7da10", "filename": "gcc/gcc.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1e206433953cd5a879b1496145a09867f200b7/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1e206433953cd5a879b1496145a09867f200b7/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=4e1e206433953cd5a879b1496145a09867f200b7", "patch": "@@ -259,6 +259,10 @@ static void error\t\tPROTO(());\n void fancy_abort ();\n char *xmalloc ();\n char *xrealloc ();\n+\n+#ifdef LANG_SPECIFIC_DRIVER\n+extern void lang_specific_driver PROTO ((void (*) (), int *, char ***));\n+#endif\n \f\n /* Specs are strings containing lines, each of which (if not blank)\n is made up of a program name, and arguments separated by spaces.\n@@ -1210,8 +1214,9 @@ static int argbuf_length;\n \n static int argbuf_index;\n \n+#ifdef MKTEMP_EACH_FILE\n /* This is the list of suffixes and codes (%g/%u/%U) and the associated\n-   temp file.  Used only if MKTEMP_EACH_FILE.  */\n+   temp file.  */\n \n static struct temp_name {\n   char *suffix;\t\t/* suffix associated with the code.  */\n@@ -1221,6 +1226,7 @@ static struct temp_name {\n   int filename_length;\t/* strlen (filename).  */\n   struct temp_name *next;\n } *temp_names;\n+#endif\n \n /* Number of commands executed so far.  */\n "}, {"sha": "c7783d039c88da11894abfac5fe14659456abc9f", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1e206433953cd5a879b1496145a09867f200b7/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1e206433953cd5a879b1496145a09867f200b7/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=4e1e206433953cd5a879b1496145a09867f200b7", "patch": "@@ -1667,11 +1667,13 @@ assemble_static_space (size)\n   char name[12];\n   char *namestring;\n   rtx x;\n+#ifndef ASM_OUTPUT_ALIGNED_LOCAL\n   /* Round size up to multiple of BIGGEST_ALIGNMENT bits\n      so that each uninitialized object starts on such a boundary.  */\n   int rounded = ((size + (BIGGEST_ALIGNMENT / BITS_PER_UNIT) - 1)\n \t\t / (BIGGEST_ALIGNMENT / BITS_PER_UNIT)\n \t\t * (BIGGEST_ALIGNMENT / BITS_PER_UNIT));\n+#endif\n \n #if 0\n   if (flag_shared_data)"}]}