{"sha": "5c6a601cd2eac3730d4e00a0c1fe0b3cdb5fc1b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM2YTYwMWNkMmVhYzM3MzBkNGUwMGEwYzFmZTBiM2NkYjVmYzFiNA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2016-03-18T19:09:08Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2016-03-18T19:09:08Z"}, "message": "Fix PR70278, a problem with the previous split_reg change\n\n\tPR rtl-optimization/70278\n\t* lra-constraints.c (split_reg): Handle the case where biggest_mode is\n\tVOIDmode.\n\ntestsuite/\n\t* gcc.dg/torture/pr70278.c: New test.\n\t* gcc.target/arm/pr70278.c: New test.\n\nFrom-SVN: r234342", "tree": {"sha": "56844518935399d010918f8fc3def7ad42f8012f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56844518935399d010918f8fc3def7ad42f8012f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c6a601cd2eac3730d4e00a0c1fe0b3cdb5fc1b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c6a601cd2eac3730d4e00a0c1fe0b3cdb5fc1b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c6a601cd2eac3730d4e00a0c1fe0b3cdb5fc1b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c6a601cd2eac3730d4e00a0c1fe0b3cdb5fc1b4/comments", "author": null, "committer": null, "parents": [{"sha": "4bbf545b8b47ef2a1a2a8a666f88dfe7ba9fe23a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bbf545b8b47ef2a1a2a8a666f88dfe7ba9fe23a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bbf545b8b47ef2a1a2a8a666f88dfe7ba9fe23a"}], "stats": {"total": 97, "additions": 96, "deletions": 1}, "files": [{"sha": "328fde839dd433f61a84ee051f8a18a4742062e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c6a601cd2eac3730d4e00a0c1fe0b3cdb5fc1b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c6a601cd2eac3730d4e00a0c1fe0b3cdb5fc1b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c6a601cd2eac3730d4e00a0c1fe0b3cdb5fc1b4", "patch": "@@ -1,3 +1,9 @@\n+2016-03-18  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\tPR rtl-optimization/70278\n+\t* lra-constraints.c (split_reg): Handle the case where biggest_mode is\n+\tVOIDmode.\n+\n 2016-03-18  Jason Merrill  <jason@redhat.com>\n \n \t* calls.c (load_register_parameters): Fix zero size sibcall logic."}, {"sha": "4883eefc53239b200895509088af3881435bd6a0", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c6a601cd2eac3730d4e00a0c1fe0b3cdb5fc1b4/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c6a601cd2eac3730d4e00a0c1fe0b3cdb5fc1b4/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=5c6a601cd2eac3730d4e00a0c1fe0b3cdb5fc1b4", "patch": "@@ -4982,7 +4982,12 @@ split_reg (bool before_p, int original_regno, rtx_insn *insn,\n       nregs = 1;\n       mode = lra_reg_info[hard_regno].biggest_mode;\n       machine_mode reg_rtx_mode = GET_MODE (regno_reg_rtx[hard_regno]);\n-      if (GET_MODE_SIZE (mode) > GET_MODE_SIZE (reg_rtx_mode))\n+      /* A reg can have a biggest_mode of VOIDmode if it was only ever seen\n+\t as part of a multi-word register.  In that case, or if the biggest\n+\t mode was larger than a register, just use the reg_rtx.  Otherwise,\n+\t limit the size to that of the biggest access in the function.  */\n+      if (mode == VOIDmode\n+\t  || GET_MODE_SIZE (mode) > GET_MODE_SIZE (reg_rtx_mode))\n \t{\n \t  original_reg = regno_reg_rtx[hard_regno];\n \t  mode = reg_rtx_mode;"}, {"sha": "53994fe63ec36402fb0401e818ab849f4777e39a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c6a601cd2eac3730d4e00a0c1fe0b3cdb5fc1b4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c6a601cd2eac3730d4e00a0c1fe0b3cdb5fc1b4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5c6a601cd2eac3730d4e00a0c1fe0b3cdb5fc1b4", "patch": "@@ -1,3 +1,9 @@\n+2016-03-18  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\tPR rtl-optimization/70278\n+\t* gcc.dg/torture/pr70278.c: New test.\n+\t* gcc.target/arm/pr70278.c: New test.\n+\n 2016-03-18  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/70281"}, {"sha": "89bd2660c1f901ba01611c45da5d6d17c164ad32", "filename": "gcc/testsuite/gcc.dg/torture/pr70278.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c6a601cd2eac3730d4e00a0c1fe0b3cdb5fc1b4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr70278.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c6a601cd2eac3730d4e00a0c1fe0b3cdb5fc1b4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr70278.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr70278.c?ref=5c6a601cd2eac3730d4e00a0c1fe0b3cdb5fc1b4", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/*\n+ * ====================================================\n+ * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n+ *\n+ * Developed at SunPro, a Sun Microsystems, Inc. business.\n+ * Permission to use, copy, modify, and distribute this\n+ * software is freely granted, provided that this notice \n+ * is preserved.\n+ * ====================================================\n+ */\n+typedef union\n+{\n+  double value;\n+  struct\n+  {\n+    unsigned int msw;\n+  } parts;\n+} ieee_double_shape_type;\n+double __ieee754_hypot(double x, double y)\n+{\n+ double a=x,b=y,t1,t2,y1,y2,w;\n+ int j,k,ha,hb;\n+ do { ieee_double_shape_type gh_u; gh_u.value = (x); (ha) = gh_u.parts.msw; } while (0);;\n+ if(hb > ha) {a=y;b=x;j=ha; ha=hb;hb=j;} else {a=x;b=y;}\n+ if(ha > 0x5f300000) {\n+    do { ieee_double_shape_type sh_u; sh_u.value = (a); sh_u.parts.msw = (ha); (a) = sh_u.value; } while (0);;\n+ }\n+ w = a-b;\n+ if (w <= b)\n+ {\n+     t2 = a - t1;\n+     w = t1*y1-(w*(-w)-(t1*y2+t2*b));\n+ }\n+ if(k!=0) {\n+ } else return w;\n+}"}, {"sha": "c44c07b7b59f906e27ee3046a09988afb665eed5", "filename": "gcc/testsuite/gcc.target/arm/pr70278.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c6a601cd2eac3730d4e00a0c1fe0b3cdb5fc1b4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr70278.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c6a601cd2eac3730d4e00a0c1fe0b3cdb5fc1b4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr70278.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr70278.c?ref=5c6a601cd2eac3730d4e00a0c1fe0b3cdb5fc1b4", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"avoid conflicting multilib options\" { *-*-* } { \"-march=*\" } { \"-march=armv4t\" } } */\n+/* { dg-skip-if \"avoid conflicting multilib options\" { *-*-* } { \"-marm\" } { \"\" } } */\n+/* { dg-options \"-mthumb\" } */\n+/* { dg-add-options arm_arch_v4t } */\n+/*\n+ * ====================================================\n+ * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n+ *\n+ * Developed at SunPro, a Sun Microsystems, Inc. business.\n+ * Permission to use, copy, modify, and distribute this\n+ * software is freely granted, provided that this notice \n+ * is preserved.\n+ * ====================================================\n+ */\n+typedef union\n+{\n+  double value;\n+  struct\n+  {\n+    unsigned int msw;\n+  } parts;\n+} ieee_double_shape_type;\n+double __ieee754_hypot(double x, double y)\n+{\n+ double a=x,b=y,t1,t2,y1,y2,w;\n+ int j,k,ha,hb;\n+ do { ieee_double_shape_type gh_u; gh_u.value = (x); (ha) = gh_u.parts.msw; } while (0);;\n+ if(hb > ha) {a=y;b=x;j=ha; ha=hb;hb=j;} else {a=x;b=y;}\n+ if(ha > 0x5f300000) {\n+    do { ieee_double_shape_type sh_u; sh_u.value = (a); sh_u.parts.msw = (ha); (a) = sh_u.value; } while (0);;\n+ }\n+ w = a-b;\n+ if (w <= b)\n+ {\n+     t2 = a - t1;\n+     w = t1*y1-(w*(-w)-(t1*y2+t2*b));\n+ }\n+ if(k!=0) {\n+ } else return w;\n+}"}]}