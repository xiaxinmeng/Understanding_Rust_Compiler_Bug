{"sha": "e4590d63883aeb3b9dd06712f38d6ae4096b0b8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ1OTBkNjM4ODNhZWIzYjlkZDA2NzEyZjM4ZDZhZTQwOTZiMGI4YQ==", "commit": {"author": {"name": "Ralf Wildenhues", "email": "Ralf.Wildenhues@gmx.de", "date": "2010-10-11T17:58:53Z"}, "committer": {"name": "Ralf Wildenhues", "email": "rwild@gcc.gnu.org", "date": "2010-10-11T17:58:53Z"}, "message": "Fix PR bootstrap/35855: awk character classes.\n\ngcc/:\n\tPR bootstrap/35855\n\t* opt-functions.awk (BEGIN): New section.\n\t(lower, upper, digit, alnum): New variables.\n\t(static_var, opt_sanitized_name): Use alnum instead of character\n\tclasses, for non-C locale.\n\t* optc-gen.awk: Likewise.\n\t* opth-gen.awk: Likewise.\n\nFrom-SVN: r165322", "tree": {"sha": "e230e56a44ee4e614522f930110bcf311d7b7dd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e230e56a44ee4e614522f930110bcf311d7b7dd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4590d63883aeb3b9dd06712f38d6ae4096b0b8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4590d63883aeb3b9dd06712f38d6ae4096b0b8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4590d63883aeb3b9dd06712f38d6ae4096b0b8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4590d63883aeb3b9dd06712f38d6ae4096b0b8a/comments", "author": null, "committer": null, "parents": [{"sha": "fba42e243e264f3b4d507d075b38c699821d5951", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fba42e243e264f3b4d507d075b38c699821d5951", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fba42e243e264f3b4d507d075b38c699821d5951"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "d7f8da4e32b5ac3f65f4dbd942034a6d95efdc36", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4590d63883aeb3b9dd06712f38d6ae4096b0b8a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4590d63883aeb3b9dd06712f38d6ae4096b0b8a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4590d63883aeb3b9dd06712f38d6ae4096b0b8a", "patch": "@@ -1,3 +1,13 @@\n+2010-10-11  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\tPR bootstrap/35855\n+\t* opt-functions.awk (BEGIN): New section.\n+\t(lower, upper, digit, alnum): New variables.\n+\t(static_var, opt_sanitized_name): Use alnum instead of character\n+\tclasses, for non-C locale.\n+\t* optc-gen.awk: Likewise.\n+\t* opth-gen.awk: Likewise.\n+\n 2010-10-11  Anatoly Sokolov  <aesok@post.ru>\n \n \t* target.def (preferred_reload_class): New hook."}, {"sha": "bd75b43410fc81944b3c80aac97d203767ae89a9", "filename": "gcc/opt-functions.awk", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4590d63883aeb3b9dd06712f38d6ae4096b0b8a/gcc%2Fopt-functions.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4590d63883aeb3b9dd06712f38d6ae4096b0b8a/gcc%2Fopt-functions.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-functions.awk?ref=e4590d63883aeb3b9dd06712f38d6ae4096b0b8a", "patch": "@@ -19,6 +19,14 @@\n \n # Some common subroutines for use by opt[ch]-gen.awk.\n \n+# Define some helpful character classes, for portability.\n+BEGIN {\n+\tlower = \"abcdefghijklmnopqrstuvwxyz\"\n+\tupper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n+\tdigit = \"0123456789\"\n+\talnum = lower \"\" upper \"\" digit\n+}\n+\n # Return nonzero if FLAGS contains a flag matching REGEX.\n function flag_set_p(regex, flags)\n {\n@@ -127,7 +135,7 @@ function static_var(name, flags)\n {\n \tif (global_state_p(flags) || !needs_state_p(flags))\n \t\treturn \"\"\n-\tgsub (\"[^A-Za-z0-9]\", \"_\", name)\n+\tgsub (\"[^\" alnum \"]\", \"_\", name)\n \treturn \"VAR_\" name\n }\n \n@@ -204,7 +212,7 @@ function var_ref(name, flags)\n # Given the option called NAME return a sanitized version of its name.\n function opt_sanitized_name(name)\n {\n-\tgsub (\"[^A-Za-z0-9]\", \"_\", name)\n+\tgsub (\"[^\" alnum \"]\", \"_\", name)\n \treturn name\n }\n "}, {"sha": "fbe8007c8a211ad0f9cac324af32b23cee6419ea", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4590d63883aeb3b9dd06712f38d6ae4096b0b8a/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4590d63883aeb3b9dd06712f38d6ae4096b0b8a/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=e4590d63883aeb3b9dd06712f38d6ae4096b0b8a", "patch": "@@ -145,7 +145,7 @@ print \"\"\n print \"const char * const lang_names[] =\\n{\"\n for (i = 0; i < n_langs; i++) {\n \tmacros[i] = \"CL_\" langs[i]\n-\tgsub( \"[^A-Za-z0-9_]\", \"X\", macros[i] )\n+\tgsub( \"[^\" alnum \"_]\", \"X\", macros[i] )\n \ts = substr(\"         \", length (macros[i]))\n \tprint \"  \" quote langs[i] quote \",\"\n     }"}, {"sha": "240bc2c5cc9f0dc67ecaa6a50e0a45dd50589a25", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4590d63883aeb3b9dd06712f38d6ae4096b0b8a/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4590d63883aeb3b9dd06712f38d6ae4096b0b8a/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=e4590d63883aeb3b9dd06712f38d6ae4096b0b8a", "patch": "@@ -208,13 +208,13 @@ n_target_int = 0;\n n_target_other = 0;\n \n for (i = 0; i < n_target_save; i++) {\n-\tif (target_save_decl[i] ~ \"^((un)?signed +)?int +[_a-zA-Z0-9]+$\")\n+\tif (target_save_decl[i] ~ \"^((un)?signed +)?int +[_\" alnum \"]+$\")\n \t\tvar_target_int[n_target_int++] = target_save_decl[i];\n \n-\telse if (target_save_decl[i] ~ \"^((un)?signed +)?short +[_a-zA-Z0-9]+$\")\n+\telse if (target_save_decl[i] ~ \"^((un)?signed +)?short +[_\" alnum \"]+$\")\n \t\tvar_target_short[n_target_short++] = target_save_decl[i];\n \n-\telse if (target_save_decl[i] ~ \"^((un)?signed +)?char +[_a-zA-Z0-9]+$\")\n+\telse if (target_save_decl[i] ~ \"^((un)?signed +)?char +[_ \" alnum \"]+$\")\n \t\tvar_target_char[n_target_char++] = target_save_decl[i];\n \n \telse\n@@ -352,7 +352,7 @@ print \"\"\n \n for (i = 0; i < n_langs; i++) {\n \tmacros[i] = \"CL_\" langs[i]\n-\tgsub( \"[^A-Za-z0-9_]\", \"X\", macros[i] )\n+\tgsub( \"[^\" alnum \"_]\", \"X\", macros[i] )\n \ts = substr(\"            \", length (macros[i]))\n \tprint \"#define \" macros[i] s \" (1 << \" i \")\"\n     }"}]}