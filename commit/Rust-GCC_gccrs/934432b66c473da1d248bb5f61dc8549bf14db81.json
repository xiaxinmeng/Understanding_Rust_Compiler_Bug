{"sha": "934432b66c473da1d248bb5f61dc8549bf14db81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM0NDMyYjY2YzQ3M2RhMWQyNDhiYjVmNjFkYzg1NDliZjE0ZGI4MQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-05-15T10:02:38Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-05-15T10:02:38Z"}, "message": "num_xbound_fun.cc: Minor tweaks.\n\n2009-05-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* testsuite/26_numerics/random/discrete_distribution/cons/\n\tnum_xbound_fun.cc: Minor tweaks.\n\t* testsuite/26_numerics/random/piecewise_constant_distribution/\n\tcons/initlist_fun.cc: Likewise\n\t* testsuite/26_numerics/random/piecewise_constant_distribution/\n\tcons/num_xbound_fun.cc: Likewise\n\t* testsuite/26_numerics/random/piecewise_linear_distribution/\n\tcons/initlist_fun.cc: Likewise\n\t* testsuite/26_numerics/random/piecewise_linear_distribution/\n\tcons/num_xbound_fun.cc: Likewise\n\nFrom-SVN: r147567", "tree": {"sha": "af0c6ff567529a28e885dbab65761218f39766f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af0c6ff567529a28e885dbab65761218f39766f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/934432b66c473da1d248bb5f61dc8549bf14db81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/934432b66c473da1d248bb5f61dc8549bf14db81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/934432b66c473da1d248bb5f61dc8549bf14db81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/934432b66c473da1d248bb5f61dc8549bf14db81/comments", "author": null, "committer": null, "parents": [{"sha": "125cae84d04faa9a4eb33e238caa5955c9dadd5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/125cae84d04faa9a4eb33e238caa5955c9dadd5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/125cae84d04faa9a4eb33e238caa5955c9dadd5f"}], "stats": {"total": 90, "additions": 56, "deletions": 34}, "files": [{"sha": "0c79acddf9bff0c49648136998add9156db622ca", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934432b66c473da1d248bb5f61dc8549bf14db81/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934432b66c473da1d248bb5f61dc8549bf14db81/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=934432b66c473da1d248bb5f61dc8549bf14db81", "patch": "@@ -1,3 +1,16 @@\n+2009-05-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* testsuite/26_numerics/random/discrete_distribution/cons/\n+\tnum_xbound_fun.cc: Minor tweaks.\n+\t* testsuite/26_numerics/random/piecewise_constant_distribution/\n+\tcons/initlist_fun.cc: Likewise\n+\t* testsuite/26_numerics/random/piecewise_constant_distribution/\n+\tcons/num_xbound_fun.cc: Likewise\n+\t* testsuite/26_numerics/random/piecewise_linear_distribution/\n+\tcons/initlist_fun.cc: Likewise\n+\t* testsuite/26_numerics/random/piecewise_linear_distribution/\n+\tcons/num_xbound_fun.cc: Likewise\n+\n 2009-05-15  David Billinghurst <billingd@gcc.gnu.org>\n \n \tPR libstdc++/36211\n@@ -6,16 +19,16 @@\n \n 2009-05-15  David Billinghurst <billingd@gcc.gnu.org>\n \n-\t* testsuite/26_numerics/random/discrete_distribution/cons/num_xbound_fun.cc:\n-\tReplace non-standard macro M_PI with constant pi.\n-\t* testsuite/26_numerics/random/piecewise_constant_distribution/cons/initlist_fun.cc:\n-\tLikewise\n-\t* testsuite/26_numerics/random/piecewise_constant_distribution/cons/num_xbound_fun.cc:\n-\tLikewise\n-\t* testsuite/26_numerics/random/piecewise_linear_distribution/cons/initlist_fun.cc:\n-\tLikewise\n-\t* testsuite/26_numerics/random/piecewise_linear_distribution/cons/num_xbound_fun.cc:\n-\tLikewise \n+\t* testsuite/26_numerics/random/discrete_distribution/cons/\n+\tnum_xbound_fun.cc: Replace non-standard macro M_PI with constant pi.\n+\t* testsuite/26_numerics/random/piecewise_constant_distribution/cons/\n+\tinitlist_fun.cc: Likewise\n+\t* testsuite/26_numerics/random/piecewise_constant_distribution/cons/\n+\tnum_xbound_fun.cc: Likewise\n+\t* testsuite/26_numerics/random/piecewise_linear_distribution/cons/\n+\tinitlist_fun.cc: Likewise\n+\t* testsuite/26_numerics/random/piecewise_linear_distribution/cons/\n+\tnum_xbound_fun.cc: Likewise \n \n 2009-05-14  Paolo Carlini  <paolo.carlini@oracle.com>\n "}, {"sha": "139748372557314fd423922335a4d6748be53c5d", "filename": "libstdc++-v3/testsuite/26_numerics/random/discrete_distribution/cons/num_xbound_fun.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934432b66c473da1d248bb5f61dc8549bf14db81/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Fcons%2Fnum_xbound_fun.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934432b66c473da1d248bb5f61dc8549bf14db81/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Fcons%2Fnum_xbound_fun.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Fcons%2Fnum_xbound_fun.cc?ref=934432b66c473da1d248bb5f61dc8549bf14db81", "patch": "@@ -39,10 +39,11 @@ struct cosine_distribution\n         return 0.0;\n       else if (x - _M_x0 > _M_lambda / 4)\n         return 0.0;\n-      else {\n-        const double pi = 3.1415926535897932384626433832795029L;\n-        return std::cos(2 * pi * (x - _M_x0) / _M_lambda);\n-      }\n+      else\n+\t{\n+\t  const double pi = 3.14159265358979323846;\n+\t  return std::cos(2 * pi * (x - _M_x0) / _M_lambda);\n+\t}\n     }\n \n private:"}, {"sha": "aded49d13da32cbc7630fd1ba0188c9702d9801d", "filename": "libstdc++-v3/testsuite/26_numerics/random/piecewise_constant_distribution/cons/initlist_fun.cc", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934432b66c473da1d248bb5f61dc8549bf14db81/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Fcons%2Finitlist_fun.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934432b66c473da1d248bb5f61dc8549bf14db81/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Fcons%2Finitlist_fun.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Fcons%2Finitlist_fun.cc?ref=934432b66c473da1d248bb5f61dc8549bf14db81", "patch": "@@ -19,7 +19,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 26.4.8.5.2 Class template piecewise_constant_distribution [rand.dist.samp.pconst]\n+// 26.4.8.5.2 Class template piecewise_constant_distribution \n+// [rand.dist.samp.pconst]\n // 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n \n #include <random>\n@@ -39,10 +40,11 @@ struct cosine_distribution\n         return 0.0;\n       else if (x - _M_x0 > _M_lambda / 4)\n         return 0.0;\n-      else {\n-        const double pi = 3.1415926535897932384626433832795029L;\n-        return std::cos(2 * pi * (x - _M_x0) / _M_lambda);\n-      }\n+      else\n+\t{\n+\t  const double pi = 3.14159265358979323846;\n+\t  return std::cos(2 * pi * (x - _M_x0) / _M_lambda);\n+\t}\n     }\n \n private:"}, {"sha": "bc0f1923711be53ab0ad78b9f9ec59143001f2ca", "filename": "libstdc++-v3/testsuite/26_numerics/random/piecewise_constant_distribution/cons/num_xbound_fun.cc", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934432b66c473da1d248bb5f61dc8549bf14db81/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Fcons%2Fnum_xbound_fun.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934432b66c473da1d248bb5f61dc8549bf14db81/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Fcons%2Fnum_xbound_fun.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Fcons%2Fnum_xbound_fun.cc?ref=934432b66c473da1d248bb5f61dc8549bf14db81", "patch": "@@ -19,7 +19,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 26.4.8.5.2 Class template piecewise_constant_distribution [rand.dist.samp.pconst]\n+// 26.4.8.5.2 Class template piecewise_constant_distribution\n+// [rand.dist.samp.pconst]\n // 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n \n #include <random>\n@@ -39,10 +40,11 @@ struct cosine_distribution\n         return 0.0;\n       else if (x - _M_x0 > _M_lambda / 4)\n         return 0.0;\n-      else {\n-        const double pi = 3.1415926535897932384626433832795029L;\n-        return std::cos(2 * pi * (x - _M_x0) / _M_lambda);\n-      }\n+      else\n+\t{\n+\t  const double pi = 3.14159265358979323846;\n+\t  return std::cos(2 * pi * (x - _M_x0) / _M_lambda);\n+\t}\n     }\n \n private:"}, {"sha": "a00e41e4f273cbaa93c2218284f2de30c58d4eb0", "filename": "libstdc++-v3/testsuite/26_numerics/random/piecewise_linear_distribution/cons/initlist_fun.cc", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934432b66c473da1d248bb5f61dc8549bf14db81/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Fcons%2Finitlist_fun.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934432b66c473da1d248bb5f61dc8549bf14db81/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Fcons%2Finitlist_fun.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Fcons%2Finitlist_fun.cc?ref=934432b66c473da1d248bb5f61dc8549bf14db81", "patch": "@@ -19,7 +19,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 26.4.8.5.3 Class template piecewise_linear_distribution [rand.dist.samp.plinear]\n+// 26.4.8.5.3 Class template piecewise_linear_distribution\n+// [rand.dist.samp.plinear]\n // 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n \n #include <random>\n@@ -39,10 +40,11 @@ struct cosine_distribution\n         return 0.0;\n       else if (x - _M_x0 > _M_lambda / 4)\n         return 0.0;\n-      else {\n-        const double pi = 3.1415926535897932384626433832795029L;\n-        return std::cos(2 * pi * (x - _M_x0) / _M_lambda);\n-      }\n+      else\n+\t{\n+\t  const double pi = 3.14159265358979323846;\n+\t  return std::cos(2 * pi * (x - _M_x0) / _M_lambda);\n+\t}\n     }\n \n private:"}, {"sha": "f9025183b44a0755aaed5751f6fb60c933bc26d4", "filename": "libstdc++-v3/testsuite/26_numerics/random/piecewise_linear_distribution/cons/num_xbound_fun.cc", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934432b66c473da1d248bb5f61dc8549bf14db81/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Fcons%2Fnum_xbound_fun.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934432b66c473da1d248bb5f61dc8549bf14db81/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Fcons%2Fnum_xbound_fun.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Fcons%2Fnum_xbound_fun.cc?ref=934432b66c473da1d248bb5f61dc8549bf14db81", "patch": "@@ -19,7 +19,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 26.4.8.5.3 Class template piecewise_linear_distribution [rand.dist.samp.plinear]\n+// 26.4.8.5.3 Class template piecewise_linear_distribution \n+// [rand.dist.samp.plinear]\n // 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n \n #include <random>\n@@ -39,10 +40,11 @@ struct cosine_distribution\n         return 0.0;\n       else if (x - _M_x0 > _M_lambda / 4)\n         return 0.0;\n-      else {\n-        const double pi = 3.1415926535897932384626433832795029L;\n-        return std::cos(2 * pi * (x - _M_x0) / _M_lambda);\n-      }\n+      else\n+\t{\n+\t  const double pi = 3.14159265358979323846;\n+\t  return std::cos(2 * pi * (x - _M_x0) / _M_lambda);\n+\t}\n     }\n \n private:"}]}