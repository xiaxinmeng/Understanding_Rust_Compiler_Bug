{"sha": "be977d080fd58b54984bb487b0acaf0739a26899", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU5NzdkMDgwZmQ1OGI1NDk4NGJiNDg3YjBhY2FmMDczOWEyNjg5OQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-03-09T23:03:06Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2018-03-09T23:03:06Z"}, "message": "re PR c++/71169 (ICE on invalid C++ code in pop_nested_class (cp/class.c:7785))\n\n/cp\n2018-03-09  Jason Merrill  <jason@redhat.com>\n\t    Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/71169\n\tPR c++/71832\n\t* pt.c (any_erroneous_template_args_p): New.\n\t* cp-tree.h (any_erroneous_template_args_p): Declare it.\n\t* parser.c (cp_parser_class_specifier_1): Use it.\n\n/testsuite\n2018-03-09  Jason Merrill  <jason@redhat.com>\n\t    Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/71169\n\tPR c++/71832\n\t* g++.dg/cpp0x/pr71169.C: New.\n\t* g++.dg/cpp0x/pr71169-2.C: Likewise.\n\t* g++.dg/cpp0x/pr71832.C: Likewise.\n\nCo-Authored-By: Paolo Carlini <paolo.carlini@oracle.com>\n\nFrom-SVN: r258401", "tree": {"sha": "9dde4808887b8a5dd93f0a1107045f00a42776f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dde4808887b8a5dd93f0a1107045f00a42776f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be977d080fd58b54984bb487b0acaf0739a26899", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be977d080fd58b54984bb487b0acaf0739a26899", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be977d080fd58b54984bb487b0acaf0739a26899", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be977d080fd58b54984bb487b0acaf0739a26899/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "00d7fc28dc5e2071ada7c44de545c3ae408a0df3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d7fc28dc5e2071ada7c44de545c3ae408a0df3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00d7fc28dc5e2071ada7c44de545c3ae408a0df3"}], "stats": {"total": 95, "additions": 95, "deletions": 0}, "files": [{"sha": "c287232d4d24586809a53f12007ecfe57651720d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be977d080fd58b54984bb487b0acaf0739a26899/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be977d080fd58b54984bb487b0acaf0739a26899/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=be977d080fd58b54984bb487b0acaf0739a26899", "patch": "@@ -1,3 +1,12 @@\n+2018-03-10  Jason Merrill  <jason@redhat.com>\n+\t    Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/71169\n+\tPR c++/71832\n+\t* pt.c (any_erroneous_template_args_p): New.\n+\t* cp-tree.h (any_erroneous_template_args_p): Declare it.\n+\t* parser.c (cp_parser_class_specifier_1): Use it.\n+\n 2018-03-09  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/84726 - unnecessary capture of constant vars."}, {"sha": "186a37eea6b3da8407c05d8afb4561450c42ef03", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be977d080fd58b54984bb487b0acaf0739a26899/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be977d080fd58b54984bb487b0acaf0739a26899/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=be977d080fd58b54984bb487b0acaf0739a26899", "patch": "@@ -6569,6 +6569,7 @@ extern int processing_template_parmlist;\n extern bool dependent_type_p\t\t\t(tree);\n extern bool dependent_scope_p\t\t\t(tree);\n extern bool any_dependent_template_arguments_p  (const_tree);\n+extern bool any_erroneous_template_args_p       (const_tree);\n extern bool dependent_template_p\t\t(tree);\n extern bool dependent_template_id_p\t\t(tree, tree);\n extern bool type_dependent_expression_p\t\t(tree);"}, {"sha": "cdc6238897322b7d5c43986e984981ca3762f530", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be977d080fd58b54984bb487b0acaf0739a26899/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be977d080fd58b54984bb487b0acaf0739a26899/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=be977d080fd58b54984bb487b0acaf0739a26899", "patch": "@@ -22669,6 +22669,16 @@ cp_parser_class_specifier_1 (cp_parser* parser)\n       cp_default_arg_entry *e;\n       tree save_ccp, save_ccr;\n \n+      if (any_erroneous_template_args_p (type))\n+\t{\n+\t  /* Skip default arguments, NSDMIs, etc, in order to improve\n+\t     error recovery (c++/71169, c++/71832).  */\n+\t  vec_safe_truncate (unparsed_funs_with_default_args, 0);\n+\t  vec_safe_truncate (unparsed_nsdmis, 0);\n+\t  vec_safe_truncate (unparsed_classes, 0);\n+\t  vec_safe_truncate (unparsed_funs_with_definitions, 0);\n+\t}\n+\n       /* In a first pass, parse default arguments to the functions.\n \t Then, in a second pass, parse the bodies of the functions.\n \t This two-phased approach handles cases like:"}, {"sha": "bc815d2976453dced34fa3e7a3c373727eebacb2", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be977d080fd58b54984bb487b0acaf0739a26899/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be977d080fd58b54984bb487b0acaf0739a26899/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=be977d080fd58b54984bb487b0acaf0739a26899", "patch": "@@ -25048,6 +25048,39 @@ any_dependent_template_arguments_p (const_tree args)\n   return false;\n }\n \n+/* Returns true if ARGS contains any errors.  */\n+\n+bool\n+any_erroneous_template_args_p (const_tree args)\n+{\n+  int i;\n+  int j;\n+\n+  if (args == error_mark_node)\n+    return true;\n+\n+  if (args && TREE_CODE (args) != TREE_VEC)\n+    {\n+      if (tree ti = get_template_info (args))\n+\targs = TI_ARGS (ti);\n+      else\n+\targs = NULL_TREE;\n+    }\n+\n+  if (!args)\n+    return false;\n+\n+  for (i = 0; i < TMPL_ARGS_DEPTH (args); ++i)\n+    {\n+      const_tree level = TMPL_ARGS_LEVEL (args, i + 1);\n+      for (j = 0; j < TREE_VEC_LENGTH (level); ++j)\n+\tif (error_operand_p (TREE_VEC_ELT (level, j)))\n+\t  return true;\n+    }\n+\n+  return false;\n+}\n+\n /* Returns TRUE if the template TMPL is type-dependent.  */\n \n bool"}, {"sha": "2c07f6a11ca929591b2434296dd3048a3cf37530", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be977d080fd58b54984bb487b0acaf0739a26899/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be977d080fd58b54984bb487b0acaf0739a26899/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=be977d080fd58b54984bb487b0acaf0739a26899", "patch": "@@ -1,3 +1,12 @@\n+2018-03-09  Jason Merrill  <jason@redhat.com>\n+\t    Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/71169\n+\tPR c++/71832\n+\t* g++.dg/cpp0x/pr71169.C: New.\n+\t* g++.dg/cpp0x/pr71169-2.C: Likewise.\n+\t* g++.dg/cpp0x/pr71832.C: Likewise.\n+\n 2018-03-09  Peter Bergner  <bergner@vnet.ibm.com>\n \n \tPR target/83969"}, {"sha": "fa29e95d5d28bb208c51300e4c86628999419dc2", "filename": "gcc/testsuite/g++.dg/cpp0x/pr71169-2.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be977d080fd58b54984bb487b0acaf0739a26899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr71169-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be977d080fd58b54984bb487b0acaf0739a26899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr71169-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr71169-2.C?ref=be977d080fd58b54984bb487b0acaf0739a26899", "patch": "@@ -0,0 +1,19 @@\n+// { dg-do compile { target c++11 } }\n+\n+template <Preconditioner> class A {  // { dg-error \"declared\" }\n+  template <class = int> void m_fn1() {\n+    m_fn1();\n+    }\n+};\n+\n+template<typename>\n+struct B\n+{\n+  int f(int = 0) { return 0; }\n+};\n+\n+int main()\n+{\n+  B<int> b;\n+  return b.f();\n+}"}, {"sha": "44690a917e1f876eec473f5c654e76f6c830e860", "filename": "gcc/testsuite/g++.dg/cpp0x/pr71169.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be977d080fd58b54984bb487b0acaf0739a26899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr71169.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be977d080fd58b54984bb487b0acaf0739a26899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr71169.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr71169.C?ref=be977d080fd58b54984bb487b0acaf0739a26899", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do compile { target c++11 } }\n+\n+template <Preconditioner> class A {  // { dg-error \"declared\" }\n+  template <class = int> void m_fn1() {\n+    m_fn1();\n+    }\n+};"}, {"sha": "3b851110f3c721ec9db59d7428b8b2c862e11296", "filename": "gcc/testsuite/g++.dg/cpp0x/pr71832.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be977d080fd58b54984bb487b0acaf0739a26899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr71832.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be977d080fd58b54984bb487b0acaf0739a26899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr71832.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr71832.C?ref=be977d080fd58b54984bb487b0acaf0739a26899", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do compile { target c++11 } }\n+\n+template < typename decltype (0) > struct A  // { dg-error \"expected|two or more\" }\n+{ \n+  void foo () { baz (); }\n+  template < typename ... S > void baz () {}\n+};"}]}