{"sha": "59019b4223633066d86d46147bc2c01de8d9da22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkwMTliNDIyMzYzMzA2NmQ4NmQ0NjE0N2JjMmMwMWRlOGQ5ZGEyMg==", "commit": {"author": {"name": "Tom Honermann", "email": "tom@honermann.net", "date": "2019-02-22T01:16:08Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-02-22T01:16:08Z"}, "message": "P0482R5 char8_t: Updates to existing standard library tests\n\nThis patch augments existing tests to validate behavior for char8_t.  In\nall cases, added test cases are cloned from existing tests for wchar_t\nor char16_t.\n\nA few tests required updates to line numbers for diagnostic messages.\n\n2019-02-22  Tom Honermann  <tom@honermann.net>\n\n\t* testsuite/18_support/byte/ops.cc: Validate\n\tstd::to_integer<char8_t>, std::to_integer<char16_t>, and\n\tstd::to_integer<char32_t>.\n\t* testsuite/18_support/numeric_limits/dr559.cc: Validate\n\tstd::numeric_limits<char8_t>.\n\t* testsuite/18_support/numeric_limits/lowest.cc: Validate\n\tstd::numeric_limits<char8_t>::lowest().\n\t* testsuite/18_support/numeric_limits/max_digits10.cc: Validate\n\tstd::numeric_limits<char8_t>::max_digits10.\n\t* testsuite/18_support/type_info/fundamental.cc: Validate\n\ttypeinfo for char8_t.\n\t* testsuite/20_util/from_chars/1_c++20_neg.cc: New test, validating\n\tstd::from_chars with char8_t.\n\t* testsuite/20_util/hash/requirements/explicit_instantiation.cc:\n\tValidate explicit instantiation of std::hash<char8_t>.\n\t* testsuite/20_util/is_integral/value.cc: Validate\n\tstd::is_integral<char8_t>.\n\t* testsuite/20_util/make_signed/requirements/typedefs-4.cc:\n\tValidate std::make_signed<char8_t>.\n\t* testsuite/21_strings/basic_string/cons/char/deduction.cc:\n\tValidate u8string construction from char8_t sources.\n\t* testsuite/21_strings/basic_string/types/pmr_typedefs.cc: Validate\n\tstd::pmr::u8string.\n\t* testsuite/21_strings/basic_string_view/operations/compare/\n\tchar/70483.cc: Validate substr operations on u8string_view.\n\t* testsuite/21_strings/basic_string_view/typedefs.cc: Validate that\n\tthe u8string_view typedef is defined.\n\t* testsuite/21_strings/char_traits/requirements/\n\tconstexpr_functions.cc: Validate char_traits<char8_t> constexpr\n\tmember functions.\n\t* testsuite/21_strings/char_traits/requirements/\n\tconstexpr_functions_c++17.cc: Validate char_traits<char8_t> C++17\n\tconstexpr member functions.\n\t* testsuite/21_strings/headers/string/types_std_c++0x.cc: Validate\n\tthat the u8string typedef is defined.\n\t* testsuite/22_locale/locale/cons/unicode.cc: Validate the presence\n\tof the std::codecvt<char16_t, char8_t, std::mbstate_t> and\n\tstd::codecvt<char32_t, char8_t, std::mbstate_t> facets.\n\t* testsuite/29_atomics/atomic/cons/assign_neg.cc: Update line\n\tnumbers.\n\t* testsuite/29_atomics/atomic/cons/copy_neg.cc: Likewise.\n\t* testsuite/29_atomics/atomic_integral/cons/assign_neg.cc:\n\tLikewise.\n\t* testsuite/29_atomics/atomic_integral/cons/copy_neg.cc: Likewise.\n\t* testsuite/29_atomics/atomic_integral/is_always_lock_free.cc:\n\tValidate std::atomic<char8_t>::is_always_lock_free\n\t* testsuite/29_atomics/atomic_integral/operators/bitwise_neg.cc:\n\tUpdate line numbers.\n\t* testsuite/29_atomics/atomic_integral/operators/decrement_neg.cc:\n\tLikewise.\n\t* testsuite/29_atomics/atomic_integral/operators/increment_neg.cc:\n\tLikewise.\n\t* testsuite/experimental/polymorphic_allocator/pmr_typedefs_string.cc:\n\tValidate std::experimental::pmr::u8string.\n\t* testsuite/experimental/string_view/typedefs.cc: Validate that the\n\tu8string_view typedef is defined.\n\t* testsuite/util/testsuite_common_types.h: Add char8_t, char16_t and\n\tchar32_t to the typelists.\n\nFrom-SVN: r269089", "tree": {"sha": "79b2a1ebd43116878ad44eb2391e5b02f0d8555d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79b2a1ebd43116878ad44eb2391e5b02f0d8555d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59019b4223633066d86d46147bc2c01de8d9da22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59019b4223633066d86d46147bc2c01de8d9da22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59019b4223633066d86d46147bc2c01de8d9da22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59019b4223633066d86d46147bc2c01de8d9da22/comments", "author": {"login": "tahonermann", "id": 2211804, "node_id": "MDQ6VXNlcjIyMTE4MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2211804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tahonermann", "html_url": "https://github.com/tahonermann", "followers_url": "https://api.github.com/users/tahonermann/followers", "following_url": "https://api.github.com/users/tahonermann/following{/other_user}", "gists_url": "https://api.github.com/users/tahonermann/gists{/gist_id}", "starred_url": "https://api.github.com/users/tahonermann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tahonermann/subscriptions", "organizations_url": "https://api.github.com/users/tahonermann/orgs", "repos_url": "https://api.github.com/users/tahonermann/repos", "events_url": "https://api.github.com/users/tahonermann/events{/privacy}", "received_events_url": "https://api.github.com/users/tahonermann/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65bbaf3125f7c92be32e2e3b6c07e63e8ab0ccbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65bbaf3125f7c92be32e2e3b6c07e63e8ab0ccbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65bbaf3125f7c92be32e2e3b6c07e63e8ab0ccbc"}], "stats": {"total": 332, "additions": 280, "deletions": 52}, "files": [{"sha": "b94e30f12a81c87ca6f8ab2ebbdbb8ecf7123c81", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=59019b4223633066d86d46147bc2c01de8d9da22", "patch": "@@ -1,3 +1,64 @@\n+2019-02-22  Tom Honermann  <tom@honermann.net>\n+\n+\t* testsuite/18_support/byte/ops.cc: Validate\n+\tstd::to_integer<char8_t>, std::to_integer<char16_t>, and\n+\tstd::to_integer<char32_t>.\n+\t* testsuite/18_support/numeric_limits/dr559.cc: Validate\n+\tstd::numeric_limits<char8_t>.\n+\t* testsuite/18_support/numeric_limits/lowest.cc: Validate\n+\tstd::numeric_limits<char8_t>::lowest().\n+\t* testsuite/18_support/numeric_limits/max_digits10.cc: Validate\n+\tstd::numeric_limits<char8_t>::max_digits10.\n+\t* testsuite/18_support/type_info/fundamental.cc: Validate\n+\ttypeinfo for char8_t.\n+\t* testsuite/20_util/from_chars/1_c++20_neg.cc: New test, validating\n+\tstd::from_chars with char8_t.\n+\t* testsuite/20_util/hash/requirements/explicit_instantiation.cc:\n+\tValidate explicit instantiation of std::hash<char8_t>.\n+\t* testsuite/20_util/is_integral/value.cc: Validate\n+\tstd::is_integral<char8_t>.\n+\t* testsuite/20_util/make_signed/requirements/typedefs-4.cc:\n+\tValidate std::make_signed<char8_t>.\n+\t* testsuite/21_strings/basic_string/cons/char/deduction.cc:\n+\tValidate u8string construction from char8_t sources.\n+\t* testsuite/21_strings/basic_string/types/pmr_typedefs.cc: Validate\n+\tstd::pmr::u8string.\n+\t* testsuite/21_strings/basic_string_view/operations/compare/\n+\tchar/70483.cc: Validate substr operations on u8string_view.\n+\t* testsuite/21_strings/basic_string_view/typedefs.cc: Validate that\n+\tthe u8string_view typedef is defined.\n+\t* testsuite/21_strings/char_traits/requirements/\n+\tconstexpr_functions.cc: Validate char_traits<char8_t> constexpr\n+\tmember functions.\n+\t* testsuite/21_strings/char_traits/requirements/\n+\tconstexpr_functions_c++17.cc: Validate char_traits<char8_t> C++17\n+\tconstexpr member functions.\n+\t* testsuite/21_strings/headers/string/types_std_c++0x.cc: Validate\n+\tthat the u8string typedef is defined.\n+\t* testsuite/22_locale/locale/cons/unicode.cc: Validate the presence\n+\tof the std::codecvt<char16_t, char8_t, std::mbstate_t> and\n+\tstd::codecvt<char32_t, char8_t, std::mbstate_t> facets.\n+\t* testsuite/29_atomics/atomic/cons/assign_neg.cc: Update line\n+\tnumbers.\n+\t* testsuite/29_atomics/atomic/cons/copy_neg.cc: Likewise.\n+\t* testsuite/29_atomics/atomic_integral/cons/assign_neg.cc:\n+\tLikewise.\n+\t* testsuite/29_atomics/atomic_integral/cons/copy_neg.cc: Likewise.\n+\t* testsuite/29_atomics/atomic_integral/is_always_lock_free.cc:\n+\tValidate std::atomic<char8_t>::is_always_lock_free\n+\t* testsuite/29_atomics/atomic_integral/operators/bitwise_neg.cc:\n+\tUpdate line numbers.\n+\t* testsuite/29_atomics/atomic_integral/operators/decrement_neg.cc:\n+\tLikewise.\n+\t* testsuite/29_atomics/atomic_integral/operators/increment_neg.cc:\n+\tLikewise.\n+\t* testsuite/experimental/polymorphic_allocator/pmr_typedefs_string.cc:\n+\tValidate std::experimental::pmr::u8string.\n+\t* testsuite/experimental/string_view/typedefs.cc: Validate that the\n+\tu8string_view typedef is defined.\n+\t* testsuite/util/testsuite_common_types.h: Add char8_t, char16_t and\n+\tchar32_t to the typelists.\n+\n 2019-02-22  Tom Honermann  <tom@honermann.net>\n \n \t* include/ext/typelist.h: Constrain a partial specialization of"}, {"sha": "6b01c1c38f00f6ebfbe9e24160884c2b2540d712", "filename": "libstdc++-v3/testsuite/18_support/byte/ops.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fbyte%2Fops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fbyte%2Fops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fbyte%2Fops.cc?ref=59019b4223633066d86d46147bc2c01de8d9da22", "patch": "@@ -218,7 +218,15 @@ constexpr bool test_to_integer(unsigned char c)\n \n static_assert( test_to_integer<int>(0) );\n static_assert( test_to_integer<int>(255) );\n+static_assert( test_to_integer<signed char>(0) );\n static_assert( test_to_integer<signed char>(255) );\n static_assert( test_to_integer<unsigned>(0) );\n static_assert( test_to_integer<unsigned>(255) );\n-\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+static_assert( test_to_integer<char8_t>(0) );\n+static_assert( test_to_integer<char8_t>(255) );\n+#endif\n+static_assert( test_to_integer<char16_t>(0) );\n+static_assert( test_to_integer<char16_t>(255) );\n+static_assert( test_to_integer<char32_t>(0) );\n+static_assert( test_to_integer<char32_t>(255) );"}, {"sha": "504866b636aef23794c69b1837659cc010075a93", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/dr559.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fdr559.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fdr559.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fdr559.cc?ref=59019b4223633066d86d46147bc2c01de8d9da22", "patch": "@@ -84,6 +84,9 @@ int main()\n   do_test<signed char>();\n   do_test<unsigned char>();\n   do_test<wchar_t>();\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  do_test<char8_t>();\n+#endif\n   do_test<char16_t>();\n   do_test<char32_t>();\n   do_test<short>();"}, {"sha": "82d9a0f9bf00a7a313c4f1724d997763bf42b74d", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/lowest.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Flowest.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Flowest.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Flowest.cc?ref=59019b4223633066d86d46147bc2c01de8d9da22", "patch": "@@ -54,6 +54,9 @@ void test01()\n   do_test<unsigned char>();\n #ifdef _GLIBCXX_USE_WCHAR_T\n   do_test<wchar_t>();\n+#endif\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  do_test<char8_t>();\n #endif\n   do_test<char16_t>();\n   do_test<char32_t>();"}, {"sha": "c5475c508fd843bb8f2b35dc37ec4ac1da8d7ff4", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/max_digits10.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fmax_digits10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fmax_digits10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fmax_digits10.cc?ref=59019b4223633066d86d46147bc2c01de8d9da22", "patch": "@@ -42,6 +42,9 @@ test01()\n   VERIFY( std::numeric_limits<unsigned long>::max_digits10 == 0 );\n   VERIFY( std::numeric_limits<long long>::max_digits10 == 0 );\n   VERIFY( std::numeric_limits<unsigned long long>::max_digits10 == 0 );\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  VERIFY( std::numeric_limits<char8_t>::max_digits10 == 0 );\n+#endif\n   VERIFY( std::numeric_limits<char16_t>::max_digits10 == 0 );\n   VERIFY( std::numeric_limits<char32_t>::max_digits10 == 0 );\n "}, {"sha": "717ebd6e149f57e5f01c0abdda7881a7189ff39e", "filename": "libstdc++-v3/testsuite/18_support/type_info/fundamental.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Ftype_info%2Ffundamental.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Ftype_info%2Ffundamental.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Ftype_info%2Ffundamental.cc?ref=59019b4223633066d86d46147bc2c01de8d9da22", "patch": "@@ -50,6 +50,9 @@ int main()\n   gen_type_info<long long>();\n   gen_type_info<unsigned long long>();\n   gen_type_info<wchar_t>();\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  gen_type_info<char8_t>();\n+#endif\n   gen_type_info<char16_t>();\n   gen_type_info<char32_t>();\n "}, {"sha": "83d297676bf2d26fe7e0eb7bcfe29f57c065837f", "filename": "libstdc++-v3/testsuite/20_util/from_chars/1_c++20_neg.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F1_c%2B%2B20_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F1_c%2B%2B20_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F1_c%2B%2B20_neg.cc?ref=59019b4223633066d86d46147bc2c01de8d9da22", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2017-2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <charconv>\n+\n+void\n+test01(const char* first, const char* last)\n+{\n+  wchar_t wc;\n+  std::from_chars(first, last, wc); // { dg-error \"no matching\" }\n+  std::from_chars(first, last, wc, 10); // { dg-error \"no matching\" }\n+  char8_t c8;\n+  std::from_chars(first, last, c8); // { dg-error \"no matching\" }\n+  std::from_chars(first, last, c8, 10); // { dg-error \"no matching\" }\n+  char16_t c16;\n+  std::from_chars(first, last, c16); // { dg-error \"no matching\" }\n+  std::from_chars(first, last, c16, 10); // { dg-error \"no matching\" }\n+  char32_t c32;\n+  std::from_chars(first, last, c32); // { dg-error \"no matching\" }\n+  std::from_chars(first, last, c32, 10); // { dg-error \"no matching\" }\n+}"}, {"sha": "ff390fb5a34739922bab56cd5f69c81c4679cbd7", "filename": "libstdc++-v3/testsuite/20_util/hash/requirements/explicit_instantiation.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Frequirements%2Fexplicit_instantiation.cc?ref=59019b4223633066d86d46147bc2c01de8d9da22", "patch": "@@ -26,6 +26,9 @@ template class std::hash<bool>;\n template class std::hash<char>;\n template class std::hash<signed char>;\n template class std::hash<unsigned char>;\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+template class std::hash<char8_t>;\n+#endif\n template class std::hash<char16_t>;\n template class std::hash<char32_t>;\n template class std::hash<short>;"}, {"sha": "1c3c412b94efba192642e74424faee414c4451d7", "filename": "libstdc++-v3/testsuite/20_util/is_integral/value.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_integral%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_integral%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_integral%2Fvalue.cc?ref=59019b4223633066d86d46147bc2c01de8d9da22", "patch": "@@ -34,6 +34,9 @@ void test01()\n   static_assert(test_category<is_integral, unsigned char>(true), \"\");\n #ifdef _GLIBCXX_USE_WCHAR_T\n   static_assert(test_category<is_integral, wchar_t>(true), \"\");\n+#endif\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  static_assert(test_category<is_integral, char8_t>(true), \"\");\n #endif\n   static_assert(test_category<is_integral, char16_t>(true), \"\");\n   static_assert(test_category<is_integral, char32_t>(true), \"\");"}, {"sha": "27eb1012125bf38674129896a019e1e846d9b10b", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs-4.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-4.cc?ref=59019b4223633066d86d46147bc2c01de8d9da22", "patch": "@@ -27,5 +27,8 @@ using wchar_signed = make_signed<wchar_t>::type;\n using wchar_unsigned = make_unsigned<wchar_t>::type;\n static_assert( !is_same<wchar_signed, wchar_unsigned>::value, \"wchar_t\" );\n #endif\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+static_assert( is_signed<make_signed<char8_t>::type>::value, \"char8_t\");\n+#endif\n static_assert( is_signed<make_signed<char16_t>::type>::value, \"char16_t\");\n static_assert( is_signed<make_signed<char32_t>::type>::value, \"char32_t\");"}, {"sha": "6bb2554f07d0228b912365aaaf1817f15f5228eb", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/deduction.cc", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fdeduction.cc?ref=59019b4223633066d86d46147bc2c01de8d9da22", "patch": "@@ -122,6 +122,27 @@ test04()\n \n void\n test05()\n+{\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  char8_t a[1] = {};\n+  input_iterator_seq<char8_t> seq(a);\n+\n+  std::basic_string s1(seq.begin(), seq.end());\n+  check_type<std::u8string>(s1);\n+\n+  std::basic_string s2(seq.begin(), seq.end(), std::allocator<char8_t>());\n+  check_type<std::u8string>(s2);\n+\n+  std::basic_string s3((char8_t)1, u8'a');\n+  check_type<std::u8string>(s3);\n+\n+  std::basic_string s4((char8_t)1, u8'a', std::allocator<char8_t>());\n+  check_type<std::u8string>(s4);\n+#endif\n+}\n+\n+void\n+test06()\n {\n   // LWG 3075 basic_string needs deduction guides from basic_string_view\n   std::string_view sv{\"A View to a Kill\"};\n@@ -141,7 +162,7 @@ test05()\n }\n \n void\n-test06()\n+test07()\n {\n   // LWG 3076 basic_string CTAD ambiguity\n   using namespace std;"}, {"sha": "4b443570ccdc06f19428e31fb2216c1cd5b811e9", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/types/pmr_typedefs.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ftypes%2Fpmr_typedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ftypes%2Fpmr_typedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ftypes%2Fpmr_typedefs.cc?ref=59019b4223633066d86d46147bc2c01de8d9da22", "patch": "@@ -33,6 +33,11 @@ static_assert(std::is_same_v<std::pmr::basic_string<char, T>,\n static_assert(std::is_same_v<std::pmr::string,\n     std::basic_string<char, std::char_traits<char>,\n \t\t      std::pmr::polymorphic_allocator<char>>>);\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+static_assert(std::is_same_v<std::pmr::u8string,\n+    std::basic_string<char8_t, std::char_traits<char8_t>,\n+\t\t      std::pmr::polymorphic_allocator<char8_t>>>);\n+#endif\n static_assert(std::is_same_v<std::pmr::u16string,\n     std::basic_string<char16_t, std::char_traits<char16_t>,\n \t\t      std::pmr::polymorphic_allocator<char16_t>>>);"}, {"sha": "29facb1eea74d41df1a5d67b802073d0369fc626", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/compare/char/70483.cc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcompare%2Fchar%2F70483.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcompare%2Fchar%2F70483.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcompare%2Fchar%2F70483.cc?ref=59019b4223633066d86d46147bc2c01de8d9da22", "patch": "@@ -58,6 +58,25 @@ string_view get()\n \n static_assert( get() == get() );\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+using std::u8string_view;\n+#else\n+using u8string_view = std::basic_string_view<char>;\n+#endif\n+\n+constexpr\n+u8string_view get8()\n+{\n+    u8string_view res = u8\"x::\";\n+    u8string_view start_pattern = u8\"x\";\n+    res = res.substr(res.find(start_pattern) + start_pattern.size());\n+    res = res.substr(0, res.find_first_of(u8\";]\"));\n+    res = res.substr(res.rfind(u8\"::\"));\n+    return res;\n+}\n+\n+static_assert( get8() == get8() );\n+\n using std::u16string_view;\n \n constexpr"}, {"sha": "82bbe84f90916661a2fe0bffe8a26be988e6bd7a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/typedefs.cc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Ftypedefs.cc?ref=59019b4223633066d86d46147bc2c01de8d9da22", "patch": "@@ -25,12 +25,15 @@ template<typename C, typename T>\n \n using check2_t = std::string_view;\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+using check3_t = std::u8string_view;\n+#endif\n+\n #ifdef _GLIBCXX_USE_C99_STDINT_TR1\n-using check3_t = std::u16string_view;\n-using check4_t = std::u32string_view;\n+using check4_t = std::u16string_view;\n+using check5_t = std::u32string_view;\n #endif\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n-using check5_t = std::wstring_view;\n+using check6_t = std::wstring_view;\n #endif\n-"}, {"sha": "93815ff6979f43115b22547e577226fad1419cfa", "filename": "libstdc++-v3/testsuite/21_strings/char_traits/requirements/constexpr_functions.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fconstexpr_functions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fconstexpr_functions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fconstexpr_functions.cc?ref=59019b4223633066d86d46147bc2c01de8d9da22", "patch": "@@ -66,6 +66,9 @@ int main()\n   test.operator()<std::char_traits<char>>();\n #ifdef _GLIBCXX_USE_WCHAR_T\n   test.operator()<std::char_traits<wchar_t>>();\n+#endif\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  test.operator()<std::char_traits<char8_t>>();\n #endif\n   test.operator()<std::char_traits<char16_t>>();\n   test.operator()<std::char_traits<char32_t>>();"}, {"sha": "92c301b19006e75acd3e75d0f6c56d6393229263", "filename": "libstdc++-v3/testsuite/21_strings/char_traits/requirements/constexpr_functions_c++17.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fconstexpr_functions_c%2B%2B17.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fconstexpr_functions_c%2B%2B17.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fconstexpr_functions_c%2B%2B17.cc?ref=59019b4223633066d86d46147bc2c01de8d9da22", "patch": "@@ -89,6 +89,12 @@ static_assert( test_compare<std::char_traits<wchar_t>>() );\n static_assert( test_length<std::char_traits<wchar_t>>() );\n static_assert( test_find<std::char_traits<wchar_t>>() );\n #endif\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+static_assert( test_assign<std::char_traits<char8_t>>() );\n+static_assert( test_compare<std::char_traits<char8_t>>() );\n+static_assert( test_length<std::char_traits<char8_t>>() );\n+static_assert( test_find<std::char_traits<char8_t>>() );\n+#endif\n static_assert( test_assign<std::char_traits<char16_t>>() );\n static_assert( test_compare<std::char_traits<char16_t>>() );\n static_assert( test_length<std::char_traits<char16_t>>() );"}, {"sha": "6e5cf8c78e67a9c045e08d4c76a3b4bfa9b00ff7", "filename": "libstdc++-v3/testsuite/21_strings/headers/string/types_std_c++0x.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fstring%2Ftypes_std_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fstring%2Ftypes_std_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fstring%2Ftypes_std_c%2B%2B0x.cc?ref=59019b4223633066d86d46147bc2c01de8d9da22", "patch": "@@ -21,6 +21,9 @@\n \n namespace gnu\n {\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  typedef std::u8string t2;\n+#endif\n   typedef std::u16string t3;\n   typedef std::u32string t4;\n }"}, {"sha": "21b753412372eae2783a05445bf931854922fa53", "filename": "libstdc++-v3/testsuite/22_locale/locale/cons/unicode.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2Funicode.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2Funicode.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2Funicode.cc?ref=59019b4223633066d86d46147bc2c01de8d9da22", "patch": "@@ -36,6 +36,10 @@ typedef std::codecvt<wchar_t, char, std::mbstate_t>\t      w_codecvt;\n #ifdef _GLIBCXX_USE_C99_STDINT_TR1\n typedef std::codecvt<char16_t, char, std::mbstate_t>\t      u16_codecvt;\n typedef std::codecvt<char32_t, char, std::mbstate_t>\t      u32_codecvt;\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+typedef std::codecvt<char16_t, char8_t, std::mbstate_t>\t      u16u8_codecvt;\n+typedef std::codecvt<char32_t, char8_t, std::mbstate_t>\t      u32u8_codecvt;\n+#endif\n #endif\n \n class gnu_facet: public std::locale::facet\n@@ -68,6 +72,10 @@ void test01()\n #ifdef _GLIBCXX_USE_C99_STDINT_TR1\n       VERIFY( has_facet<u16_codecvt>(loc13) );\n       VERIFY( has_facet<u32_codecvt>(loc13) );\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+      VERIFY( has_facet<u16u8_codecvt>(loc13) );\n+      VERIFY( has_facet<u32u8_codecvt>(loc13) );\n+#endif\n #endif\n       VERIFY( has_facet<unicode_codecvt>(loc13) );\n     }"}, {"sha": "2431910f279e4c1f634ea1f2ef89fcecca7de1cd", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fassign_neg.cc?ref=59019b4223633066d86d46147bc2c01de8d9da22", "patch": "@@ -27,5 +27,5 @@ int main()\n   return 0;\n }\n \n-// { dg-error \"deleted\" \"\" { target *-*-* } 620 }\n+// { dg-error \"deleted\" \"\" { target *-*-* } 639 }\n // { dg-prune-output \"include\" }"}, {"sha": "f962fa656da3f6da9890739551a4563fb45fe65b", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fcopy_neg.cc?ref=59019b4223633066d86d46147bc2c01de8d9da22", "patch": "@@ -27,5 +27,5 @@ int main()\n   return 0;\n }\n \n-// { dg-error \"deleted\" \"\" { target *-*-* } 659 }\n+// { dg-error \"deleted\" \"\" { target *-*-* } 678 }\n // { dg-prune-output \"include\" }"}, {"sha": "381dfe7948e9bec502cff307f3fc88f4f682c496", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fassign_neg.cc?ref=59019b4223633066d86d46147bc2c01de8d9da22", "patch": "@@ -28,5 +28,5 @@ int main()\n   return 0;\n }\n \n-// { dg-error \"deleted\" \"\" { target *-*-* } 620 }\n+// { dg-error \"deleted\" \"\" { target *-*-* } 639 }\n // { dg-prune-output \"include\" }"}, {"sha": "19d898d31f7cf5e097cd440c7d34a5d6aaead64a", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fcopy_neg.cc?ref=59019b4223633066d86d46147bc2c01de8d9da22", "patch": "@@ -28,5 +28,5 @@ int main()\n   return 0;\n }\n \n-// { dg-error \"deleted\" \"\" { target *-*-* } 659 }\n+// { dg-error \"deleted\" \"\" { target *-*-* } 678 }\n // { dg-prune-output \"include\" }"}, {"sha": "127b47447f03797a4cf8bb4455f9afe9de7955d7", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/is_always_lock_free.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fis_always_lock_free.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fis_always_lock_free.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fis_always_lock_free.cc?ref=59019b4223633066d86d46147bc2c01de8d9da22", "patch": "@@ -39,5 +39,8 @@ static_assert( check<unsigned long>(ATOMIC_LONG_LOCK_FREE) );\n static_assert( check<long long>(ATOMIC_LLONG_LOCK_FREE) );\n static_assert( check<unsigned long long>(ATOMIC_LLONG_LOCK_FREE) );\n static_assert( check<wchar_t>(ATOMIC_WCHAR_T_LOCK_FREE) );\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+static_assert( check<char8_t>(ATOMIC_CHAR8_T_LOCK_FREE) );\n+#endif\n static_assert( check<char16_t>(ATOMIC_CHAR16_T_LOCK_FREE) );\n static_assert( check<char32_t>(ATOMIC_CHAR32_T_LOCK_FREE) );"}, {"sha": "1ec82bc2e8ffd82e4072622d99ea9b94c203a82e", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/operators/bitwise_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fbitwise_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fbitwise_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fbitwise_neg.cc?ref=59019b4223633066d86d46147bc2c01de8d9da22", "patch": "@@ -26,8 +26,8 @@ int main()\n   return 0;\n }\n \n-// { dg-error \"operator\" \"\" { target *-*-* } 476 }\n-// { dg-error \"operator\" \"\" { target *-*-* } 477 }\n-// { dg-error \"operator\" \"\" { target *-*-* } 478 }\n+// { dg-error \"operator\" \"\" { target *-*-* } 495 }\n+// { dg-error \"operator\" \"\" { target *-*-* } 496 }\n+// { dg-error \"operator\" \"\" { target *-*-* } 497 }\n \n // { dg-prune-output \"declared here\" }"}, {"sha": "5479ceaf6fa2e0d0e62e5d48f58feb566456adb2", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/operators/decrement_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fdecrement_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fdecrement_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fdecrement_neg.cc?ref=59019b4223633066d86d46147bc2c01de8d9da22", "patch": "@@ -27,6 +27,6 @@ int main()\n   return 0;\n }\n \n-// { dg-error \"operator\" \"\" { target *-*-* } 428 }\n-// { dg-error \"operator\" \"\" { target *-*-* } 429 }\n-// { dg-error \"operator\" \"\" { target *-*-* } 430 }\n+// { dg-error \"operator\" \"\" { target *-*-* } 447 }\n+// { dg-error \"operator\" \"\" { target *-*-* } 448 }\n+// { dg-error \"operator\" \"\" { target *-*-* } 449 }"}, {"sha": "9858a6c9f1b8d51a1bc5a30a05d97c38d618af68", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/operators/increment_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fincrement_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fincrement_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fincrement_neg.cc?ref=59019b4223633066d86d46147bc2c01de8d9da22", "patch": "@@ -27,6 +27,6 @@ int main()\n   return 0;\n }\n \n-// { dg-error \"operator\" \"\" { target *-*-* } 406 }\n-// { dg-error \"operator\" \"\" { target *-*-* } 407 }\n-// { dg-error \"operator\" \"\" { target *-*-* } 408 }\n+// { dg-error \"operator\" \"\" { target *-*-* } 425 }\n+// { dg-error \"operator\" \"\" { target *-*-* } 426 }\n+// { dg-error \"operator\" \"\" { target *-*-* } 427 }"}, {"sha": "62917e9373d1a9e778cc0877b14f1c3c31690cc4", "filename": "libstdc++-v3/testsuite/experimental/polymorphic_allocator/pmr_typedefs_string.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_string.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_string.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_string.cc?ref=59019b4223633066d86d46147bc2c01de8d9da22", "patch": "@@ -36,6 +36,12 @@ static_assert(std::is_same<xpmr::string,\n     std::basic_string<char, std::char_traits<char>,\n \t\t      xpmr::polymorphic_allocator<char>>>::value,\n     \"pmr::string\");\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+static_assert(std::is_same<xpmr::u8string,\n+    std::basic_string<char8_t, std::char_traits<char8_t>,\n+\t\t      xpmr::polymorphic_allocator<char8_t>>>::value,\n+    \"pmr::u8string\");\n+#endif\n static_assert(std::is_same<xpmr::u16string,\n     std::basic_string<char16_t, std::char_traits<char16_t>,\n \t\t      xpmr::polymorphic_allocator<char16_t>>>::value,"}, {"sha": "d270ee6f8bf06e8144620435a2a064661a4ec45e", "filename": "libstdc++-v3/testsuite/experimental/string_view/typedefs.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Ftypedefs.cc?ref=59019b4223633066d86d46147bc2c01de8d9da22", "patch": "@@ -24,12 +24,16 @@ template<typename C, typename T>\n \n using check2_t = std::experimental::fundamentals_v1::string_view;\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+using check3_t = std::experimental::fundamentals_v1::u8string_view;\n+#endif\n+\n #ifdef _GLIBCXX_USE_C99_STDINT_TR1\n-using check3_t = std::experimental::fundamentals_v1::u16string_view;\n-using check4_t = std::experimental::fundamentals_v1::u32string_view;\n+using check4_t = std::experimental::fundamentals_v1::u16string_view;\n+using check5_t = std::experimental::fundamentals_v1::u32string_view;\n #endif\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n-using check5_t = std::experimental::fundamentals_v1::wstring_view;\n+using check6_t = std::experimental::fundamentals_v1::wstring_view;\n #endif\n "}, {"sha": "d992544b3aa7160c2097f9e247c5c93eb91c76f6", "filename": "libstdc++-v3/testsuite/util/testsuite_common_types.h", "status": "modified", "additions": 49, "deletions": 30, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59019b4223633066d86d46147bc2c01de8d9da22/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h?ref=59019b4223633066d86d46147bc2c01de8d9da22", "patch": "@@ -51,6 +51,7 @@\n \n namespace __gnu_test\n {\n+  using __gnu_cxx::typelist::null_type;\n   using __gnu_cxx::typelist::node;\n   using __gnu_cxx::typelist::transform;\n   using __gnu_cxx::typelist::append;\n@@ -272,16 +273,23 @@ namespace __gnu_test\n     typedef long long \t\ta11;\n     typedef unsigned long long \ta12;\n     typedef wchar_t \t\ta13;\n+    typedef node<_GLIBCXX_TYPELIST_CHAIN13(a1, a2, a3, a4, a5, a6, a7, a8, a9,\n+\t\t\t\t\t   a10, a11, a12, a13)> basic_typelist;\n #if __cplusplus >= 201103L\n     typedef char16_t \t\ta14;\n     typedef char32_t \t\ta15;\n-\n-    typedef node<_GLIBCXX_TYPELIST_CHAIN15(a1, a2, a3, a4, a5, a6, a7, a8, a9,\n-\t\t\t\t\t   a10, a11, a12, a13, a14, a15)> type;\n+    typedef node<_GLIBCXX_TYPELIST_CHAIN2(a14, a15)> cxx11_typelist;\n #else\n-    typedef node<_GLIBCXX_TYPELIST_CHAIN13(a1, a2, a3, a4, a5, a6, a7, a8, a9,\n-\t\t\t\t\t   a10, a11, a12, a13)> type;\n+    typedef node<null_type> cxx11_typelist;\n+#endif\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+    typedef char8_t \t\ta16;\n+    typedef node<_GLIBCXX_TYPELIST_CHAIN1(a16)> char8_typelist;\n+#else\n+    typedef node<null_type> char8_typelist;\n #endif\n+    typedef typename append<basic_typelist, cxx11_typelist>::type tl1;\n+    typedef typename append<tl1, char8_typelist>::type type;\n   };\n \n   // A typelist of all standard integral types + the GNU 128-bit types.\n@@ -300,32 +308,31 @@ namespace __gnu_test\n     typedef long long \t\ta11;\n     typedef unsigned long long \ta12;\n     typedef wchar_t \t\ta13;\n+    typedef node<_GLIBCXX_TYPELIST_CHAIN13(a1, a2, a3, a4, a5, a6, a7, a8, a9,\n+\t\t\t\t\t   a10, a11, a12, a13)> basic_typelist;\n #if __cplusplus >= 201103L\n     typedef char16_t \t\ta14;\n     typedef char32_t \t\ta15;\n-# if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_INT128)\n-    __extension__ typedef __int128            a16;\n-    __extension__ typedef unsigned __int128   a17;\n-\n-    typedef node<_GLIBCXX_TYPELIST_CHAIN17(a1, a2, a3, a4, a5, a6, a7, a8, a9,\n-\t\t\t\t\t   a10, a11, a12, a13, a14, a15,\n-\t\t\t\t\t   a16, a17)> type;\n-# else\n-    typedef node<_GLIBCXX_TYPELIST_CHAIN15(a1, a2, a3, a4, a5, a6, a7, a8, a9,\n-\t\t\t\t\t   a10, a11, a12, a13, a14, a15)> type;\n-# endif\n+    typedef node<_GLIBCXX_TYPELIST_CHAIN2(a14, a15)> cxx11_typelist;\n+#else\n+    typedef node<null_type> cxx11_typelist;\n+#endif\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+    typedef char8_t \t\ta16;\n+    typedef node<_GLIBCXX_TYPELIST_CHAIN1(a16)> char8_typelist;\n #else\n+    typedef node<null_type> char8_typelist;\n+#endif\n # if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_INT128)\n-    __extension__ typedef __int128            a14;\n-    __extension__ typedef unsigned __int128   a15;\n-\n-    typedef node<_GLIBCXX_TYPELIST_CHAIN15(a1, a2, a3, a4, a5, a6, a7, a8, a9,\n-\t\t\t\t\t   a10, a11, a12, a13, a14, a15)> type;\n-# else\n-   typedef node<_GLIBCXX_TYPELIST_CHAIN13(a1, a2, a3, a4, a5, a6, a7, a8, a9,\n-\t\t\t\t\t  a10, a11, a12, a13)> type;\n-# endif\n+    __extension__ typedef __int128            a17;\n+    __extension__ typedef unsigned __int128   a18;\n+    typedef node<_GLIBCXX_TYPELIST_CHAIN2(a17, a18)> int128_typelist;\n+#else\n+    typedef node<null_type> int128_typelist;\n #endif\n+    typedef typename append<basic_typelist, cxx11_typelist>::type tl1;\n+    typedef typename append<tl1, char8_typelist>::type            tl2;\n+    typedef typename append<tl2, int128_typelist>::type type;\n   };\n \n #if __cplusplus >= 201103L\n@@ -345,9 +352,15 @@ namespace __gnu_test\n     typedef std::atomic_wchar_t     \ta13;\n     typedef std::atomic_char16_t    \ta14;\n     typedef std::atomic_char32_t    \ta15;\n-\n-    typedef node<_GLIBCXX_TYPELIST_CHAIN14(a2, a3, a4, a5, a6, a7, a8, a9,\n-\t\t\t\t\t   a10, a11, a12, a13, a14, a15)> type;\n+    typedef node<_GLIBCXX_TYPELIST_CHAIN14(a2, a3, a4, a5, a6, a7, a8, a9, a10,\n+\t\t\t\t\t    a11, a12, a13, a14, a15)> basic_typelist;\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+    typedef std::atomic_char8_t\t\ta16;\n+    typedef node<_GLIBCXX_TYPELIST_CHAIN1(a16)> char8_typelist;\n+#else\n+    typedef node<null_type> char8_typelist;\n+#endif\n+    typedef typename append<basic_typelist, char8_typelist>::type type;\n   };\n \n   struct atomic_integrals\n@@ -367,9 +380,15 @@ namespace __gnu_test\n     typedef std::atomic_wchar_t     \ta13;\n     typedef std::atomic_char16_t    \ta14;\n     typedef std::atomic_char32_t    \ta15;\n-\n     typedef node<_GLIBCXX_TYPELIST_CHAIN15(a1, a2, a3, a4, a5, a6, a7, a8, a9,\n-\t\t\t\t\t   a10, a11, a12, a13, a14, a15)> type;\n+\t\t\t\t\t   a10, a11, a12, a13, a14, a15)> basic_typelist;\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+    typedef std::atomic_char8_t\t\ta16;\n+    typedef node<_GLIBCXX_TYPELIST_CHAIN1(a16)> char8_typelist;\n+#else\n+    typedef node<null_type> char8_typelist;\n+#endif\n+    typedef typename append<basic_typelist, char8_typelist>::type type;\n   };\n \n "}]}