{"sha": "e1389417f9bc364b49f8bef9583e34a8db3a4049", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTEzODk0MTdmOWJjMzY0YjQ5ZjhiZWY5NTgzZTM0YThkYjNhNDA0OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-11-21T22:41:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-11-21T22:41:07Z"}, "message": "re PR c++/87386 (Error message for static_assert show wrong range)\n\n\tPR c++/87386\n\t* parser.c (cp_parser_primary_expression): Use\n\tid_expression.get_location () instead of id_expr_token->location.\n\tAdjust the range from id_expr_token->location to\n\tid_expressio.get_finish ().\n\t(cp_parser_operator_function_id): Pass location of the operator\n\ttoken down to cp_parser_operator.\n\t(cp_parser_operator): Add start_loc argument, always construct a\n\tlocation with caret at start_loc and range from start_loc to the\n\tfinish of the last token.\ngcc/testsuite/\n\t* g++.dg/diagnostic/pr87386.C: New test.\n\t* g++.dg/parse/error17.C: Adjust expected diagnostics.\nlibstdc++-v3/\n\t* testsuite/20_util/scoped_allocator/69293_neg.cc: Adjust expected\n\tline.\n\t* testsuite/20_util/uses_allocator/cons_neg.cc: Likewise.\n\t* testsuite/20_util/uses_allocator/69293_neg.cc: Likewise.\n\t* testsuite/experimental/propagate_const/requirements2.cc: Likewise.\n\t* testsuite/experimental/propagate_const/requirements3.cc: Likewise.\n\t* testsuite/experimental/propagate_const/requirements4.cc: Likewise.\n\t* testsuite/experimental/propagate_const/requirements5.cc: Likewise.\n\nFrom-SVN: r266359", "tree": {"sha": "f48a49c14ccc9d7c433682c187eefe2cb8cb8d49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f48a49c14ccc9d7c433682c187eefe2cb8cb8d49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1389417f9bc364b49f8bef9583e34a8db3a4049", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1389417f9bc364b49f8bef9583e34a8db3a4049", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1389417f9bc364b49f8bef9583e34a8db3a4049", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1389417f9bc364b49f8bef9583e34a8db3a4049/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "13986a58e723e4608ce0172d6713a7a9b06a4c30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13986a58e723e4608ce0172d6713a7a9b06a4c30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13986a58e723e4608ce0172d6713a7a9b06a4c30"}], "stats": {"total": 101, "additions": 79, "deletions": 22}, "files": [{"sha": "9305d530adfd057ced6b65d2f072a8e2e4653271", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1389417f9bc364b49f8bef9583e34a8db3a4049/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1389417f9bc364b49f8bef9583e34a8db3a4049/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e1389417f9bc364b49f8bef9583e34a8db3a4049", "patch": "@@ -1,5 +1,16 @@\n 2018-11-21  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/87386\n+\t* parser.c (cp_parser_primary_expression): Use\n+\tid_expression.get_location () instead of id_expr_token->location.\n+\tAdjust the range from id_expr_token->location to\n+\tid_expressio.get_finish ().\n+\t(cp_parser_operator_function_id): Pass location of the operator\n+\ttoken down to cp_parser_operator.\n+\t(cp_parser_operator): Add start_loc argument, always construct a\n+\tlocation with caret at start_loc and range from start_loc to the\n+\tfinish of the last token.\n+\n \tPR c++/87393\n \t* parser.c (cp_parser_linkage_specification): Remove useless\n \tdereference of the consume_open method result."}, {"sha": "e3569b2ecefd1b13ac01b9c3340bd7c234ad6c47", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1389417f9bc364b49f8bef9583e34a8db3a4049/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1389417f9bc364b49f8bef9583e34a8db3a4049/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=e1389417f9bc364b49f8bef9583e34a8db3a4049", "patch": "@@ -2312,7 +2312,7 @@ static tree cp_parser_mem_initializer_id\n static cp_expr cp_parser_operator_function_id\n   (cp_parser *);\n static cp_expr cp_parser_operator\n-  (cp_parser *);\n+  (cp_parser *, location_t);\n \n /* Templates [gram.temp] */\n \n@@ -5604,7 +5604,7 @@ cp_parser_primary_expression (cp_parser *parser,\n \t\t\t\t\t  /*is_namespace=*/false,\n \t\t\t\t\t  /*check_dependency=*/true,\n \t\t\t\t\t  &ambiguous_decls,\n-\t\t\t\t\t  id_expr_token->location);\n+\t\t\t\t\t  id_expression.get_location ());\n \t    /* If the lookup was ambiguous, an error will already have\n \t       been issued.  */\n \t    if (ambiguous_decls)\n@@ -5675,7 +5675,7 @@ cp_parser_primary_expression (cp_parser *parser,\n \t    if (parser->local_variables_forbidden_p\n \t\t&& local_variable_p (decl))\n \t      {\n-\t\terror_at (id_expr_token->location,\n+\t\terror_at (id_expression.get_location (),\n \t\t\t  \"local variable %qD may not appear in this context\",\n \t\t\t  decl.get_value ());\n \t\treturn error_mark_node;\n@@ -5694,7 +5694,8 @@ cp_parser_primary_expression (cp_parser *parser,\n \t\t id_expression.get_location ()));\n \tif (error_msg)\n \t  cp_parser_error (parser, error_msg);\n-\tdecl.set_location (id_expr_token->location);\n+\tdecl.set_location (id_expression.get_location ());\n+\tdecl.set_range (id_expr_token->location, id_expression.get_finish ());\n \treturn decl;\n       }\n \n@@ -15011,11 +15012,12 @@ cp_parser_mem_initializer_id (cp_parser* parser)\n static cp_expr\n cp_parser_operator_function_id (cp_parser* parser)\n {\n+  location_t start_loc = cp_lexer_peek_token (parser->lexer)->location;\n   /* Look for the `operator' keyword.  */\n   if (!cp_parser_require_keyword (parser, RID_OPERATOR, RT_OPERATOR))\n     return error_mark_node;\n   /* And then the name of the operator itself.  */\n-  return cp_parser_operator (parser);\n+  return cp_parser_operator (parser, start_loc);\n }\n \n /* Return an identifier node for a user-defined literal operator.\n@@ -15049,7 +15051,7 @@ cp_literal_operator_id (const char* name)\n    human-readable spelling of the identifier, e.g., `operator +'.  */\n \n static cp_expr\n-cp_parser_operator (cp_parser* parser)\n+cp_parser_operator (cp_parser* parser, location_t start_loc)\n {\n   tree id = NULL_TREE;\n   cp_token *token;\n@@ -15058,7 +15060,7 @@ cp_parser_operator (cp_parser* parser)\n   /* Peek at the next token.  */\n   token = cp_lexer_peek_token (parser->lexer);\n \n-  location_t start_loc = token->location;\n+  location_t end_loc = token->location;\n \n   /* Figure out which operator we have.  */\n   enum tree_code op = ERROR_MARK;\n@@ -15077,7 +15079,7 @@ cp_parser_operator (cp_parser* parser)\n \t  break;\n \n \t/* Consume the `new' or `delete' token.  */\n-\tlocation_t end_loc = cp_lexer_consume_token (parser->lexer)->location;\n+\tend_loc = cp_lexer_consume_token (parser->lexer)->location;\n \n \t/* Peek at the next token.  */\n \ttoken = cp_lexer_peek_token (parser->lexer);\n@@ -15093,7 +15095,6 @@ cp_parser_operator (cp_parser* parser)\n \t      end_loc = close_token->location;\n \t    op = op == NEW_EXPR ? VEC_NEW_EXPR : VEC_DELETE_EXPR;\n \t  }\n-\tstart_loc = make_location (start_loc, start_loc, end_loc);\n \tconsumed = true;\n \tbreak;\n       }\n@@ -15259,7 +15260,9 @@ cp_parser_operator (cp_parser* parser)\n         matching_parens parens;\n         parens.consume_open (parser);\n         /* Look for the matching `)'.  */\n-        parens.require_close (parser);\n+        token = parens.require_close (parser);\n+        if (token)\n+\t  end_loc = token->location;\n \top = CALL_EXPR;\n \tconsumed = true;\n \tbreak;\n@@ -15269,7 +15272,9 @@ cp_parser_operator (cp_parser* parser)\n       /* Consume the `['.  */\n       cp_lexer_consume_token (parser->lexer);\n       /* Look for the matching `]'.  */\n-      cp_parser_require (parser, CPP_CLOSE_SQUARE, RT_CLOSE_SQUARE);\n+      token = cp_parser_require (parser, CPP_CLOSE_SQUARE, RT_CLOSE_SQUARE);\n+      if (token)\n+\tend_loc = token->location;\n       op = ARRAY_REF;\n       consumed = true;\n       break;\n@@ -15287,7 +15292,8 @@ cp_parser_operator (cp_parser* parser)\n     case CPP_STRING16_USERDEF:\n     case CPP_STRING32_USERDEF:\n       {\n-\ttree str, string_tree;\n+\tcp_expr str;\n+\ttree string_tree;\n \tint sz, len;\n \n \tif (cxx_dialect == cxx98)\n@@ -15302,14 +15308,18 @@ cp_parser_operator (cp_parser* parser)\n \t  {\n \t    string_tree = USERDEF_LITERAL_VALUE (str);\n \t    id = USERDEF_LITERAL_SUFFIX_ID (str);\n+\t    end_loc = str.get_location ();\n \t  }\n \telse\n \t  {\n \t    string_tree = str;\n \t    /* Look for the suffix identifier.  */\n \t    token = cp_lexer_peek_token (parser->lexer);\n \t    if (token->type == CPP_NAME)\n-\t      id = cp_parser_identifier (parser);\n+\t      {\n+\t\tid = cp_parser_identifier (parser);\n+\t\tend_loc = token->location;\n+\t      }\n \t    else if (token->type == CPP_KEYWORD)\n \t      {\n \t\terror (\"unexpected keyword;\"\n@@ -15341,7 +15351,8 @@ cp_parser_operator (cp_parser* parser)\n \t    const char *name = IDENTIFIER_POINTER (id);\n \t    id = cp_literal_operator_id (name);\n \t  }\n-\treturn id;\n+\tstart_loc = make_location (start_loc, start_loc, get_finish (end_loc));\n+\treturn cp_expr (id, start_loc);\n       }\n \n     default:\n@@ -15364,6 +15375,7 @@ cp_parser_operator (cp_parser* parser)\n       id = error_mark_node;\n     }\n \n+  start_loc = make_location (start_loc, start_loc, get_finish (end_loc));\n   return cp_expr (id, start_loc);\n }\n "}, {"sha": "bb61952588a3f21b0e679b0dae79ca11f9fe799a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1389417f9bc364b49f8bef9583e34a8db3a4049/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1389417f9bc364b49f8bef9583e34a8db3a4049/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e1389417f9bc364b49f8bef9583e34a8db3a4049", "patch": "@@ -1,5 +1,9 @@\n 2018-11-21  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/87386\n+\t* g++.dg/diagnostic/pr87386.C: New test.\n+\t* g++.dg/parse/error17.C: Adjust expected diagnostics.\n+\n \tPR rtl-optimization/85925\n \t* gcc.c-torture/execute/20181120-1.c: Require effective target\n \tint32plus."}, {"sha": "85726af9f018d0569735e07bf41ee6e48de9951a", "filename": "gcc/testsuite/g++.dg/diagnostic/pr87386.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1389417f9bc364b49f8bef9583e34a8db3a4049/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fpr87386.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1389417f9bc364b49f8bef9583e34a8db3a4049/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fpr87386.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fpr87386.C?ref=e1389417f9bc364b49f8bef9583e34a8db3a4049", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/87386\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-fdiagnostics-show-caret\" }\n+\n+namespace foo {\n+  template<typename> struct test { static constexpr bool value = false; };\n+}\n+static_assert (foo::test<int>::value, \"foo\");\t\t// { dg-error \"static assertion failed: foo\" }\n+/* { dg-begin-multiline-output \"\" }\n+ static_assert (foo::test<int>::value, \"foo\");\n+                ~~~~~~~~~~~~~~~~^~~~~\n+   { dg-end-multiline-output \"\" } */\n+\n+static_assert (foo::test<int>::value && true, \"bar\");\t// { dg-error \"static assertion failed: bar\" }\n+/* { dg-begin-multiline-output \"\" }\n+ static_assert (foo::test<int>::value && true, \"bar\");\n+                ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~\n+   { dg-end-multiline-output \"\" } */"}, {"sha": "051ffa332c2c22329f0c78d1b7a9cc9e51eaf8f7", "filename": "gcc/testsuite/g++.dg/parse/error17.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1389417f9bc364b49f8bef9583e34a8db3a4049/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1389417f9bc364b49f8bef9583e34a8db3a4049/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror17.C?ref=e1389417f9bc364b49f8bef9583e34a8db3a4049", "patch": "@@ -6,4 +6,4 @@ template <typename T> struct B {\n }; \n struct D : B<int>, B<char> {}; \n  \n-int i2 = D::Bar(2); // { dg-error \"10:reference to 'Bar' is ambiguous\" }\n+int i2 = D::Bar(2); // { dg-error \"13:reference to 'Bar' is ambiguous\" }"}, {"sha": "a77596e784e97094ec06edf6f93178ec1475df20", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1389417f9bc364b49f8bef9583e34a8db3a4049/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1389417f9bc364b49f8bef9583e34a8db3a4049/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e1389417f9bc364b49f8bef9583e34a8db3a4049", "patch": "@@ -1,3 +1,15 @@\n+2018-11-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/87386\n+\t* testsuite/20_util/scoped_allocator/69293_neg.cc: Adjust expected\n+\tline.\n+\t* testsuite/20_util/uses_allocator/cons_neg.cc: Likewise.\n+\t* testsuite/20_util/uses_allocator/69293_neg.cc: Likewise.\n+\t* testsuite/experimental/propagate_const/requirements2.cc: Likewise.\n+\t* testsuite/experimental/propagate_const/requirements3.cc: Likewise.\n+\t* testsuite/experimental/propagate_const/requirements4.cc: Likewise.\n+\t* testsuite/experimental/propagate_const/requirements5.cc: Likewise.\n+\n 2018-11-21  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/88111"}, {"sha": "638d8dae593346d3823e837e0f9246f09280309e", "filename": "libstdc++-v3/testsuite/20_util/scoped_allocator/69293_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1389417f9bc364b49f8bef9583e34a8db3a4049/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F69293_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1389417f9bc364b49f8bef9583e34a8db3a4049/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F69293_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F69293_neg.cc?ref=e1389417f9bc364b49f8bef9583e34a8db3a4049", "patch": "@@ -46,5 +46,5 @@ test01()\n   scoped_alloc sa;\n   auto p = sa.allocate(1);\n   sa.construct(p);  // this is required to be ill-formed\n-  // { dg-error \"static assertion failed\" \"\" { target *-*-* } 94 }\n+  // { dg-error \"static assertion failed\" \"\" { target *-*-* } 96 }\n }"}, {"sha": "0f16cd60fb3c6fb6eb86833a460869548d252a5c", "filename": "libstdc++-v3/testsuite/20_util/uses_allocator/69293_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1389417f9bc364b49f8bef9583e34a8db3a4049/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2F69293_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1389417f9bc364b49f8bef9583e34a8db3a4049/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2F69293_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2F69293_neg.cc?ref=e1389417f9bc364b49f8bef9583e34a8db3a4049", "patch": "@@ -44,5 +44,5 @@ test01()\n {\n   alloc_type a;\n   std::tuple<X> t(std::allocator_arg, a); // this is required to be ill-formed\n-  // { dg-error \"static assertion failed\" \"\" { target *-*-* } 94 }\n+  // { dg-error \"static assertion failed\" \"\" { target *-*-* } 96 }\n }"}, {"sha": "73ed2b58aa1570af83caa640ee181b578af27b86", "filename": "libstdc++-v3/testsuite/20_util/uses_allocator/cons_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1389417f9bc364b49f8bef9583e34a8db3a4049/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1389417f9bc364b49f8bef9583e34a8db3a4049/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc?ref=e1389417f9bc364b49f8bef9583e34a8db3a4049", "patch": "@@ -43,4 +43,4 @@ void test01()\n \n   tuple<Type> t(allocator_arg, a, 1);\n }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 94 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 96 }"}, {"sha": "0c48ac967dd5fb722b44eac586ea8edb9107b185", "filename": "libstdc++-v3/testsuite/experimental/propagate_const/requirements2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1389417f9bc364b49f8bef9583e34a8db3a4049/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1389417f9bc364b49f8bef9583e34a8db3a4049/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements2.cc?ref=e1389417f9bc364b49f8bef9583e34a8db3a4049", "patch": "@@ -21,7 +21,7 @@\n \n using std::experimental::propagate_const;\n \n-// { dg-error \"requires a class or a pointer to an object type\" \"\" { target *-*-* } 105 }\n+// { dg-error \"requires a class or a pointer to an object type\" \"\" { target *-*-* } 107 }\n // { dg-error \"not a pointer-to-object type\" \"\" { target *-*-* } 66 }\n // { dg-error \"forming pointer to reference type\" \"\" { target *-*-* } 187 }\n // { dg-error \"forming pointer to reference type\" \"\" { target *-*-* } 213 }"}, {"sha": "63aebef47b6a58e9ce6082cf446ec20152e5e87a", "filename": "libstdc++-v3/testsuite/experimental/propagate_const/requirements3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1389417f9bc364b49f8bef9583e34a8db3a4049/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1389417f9bc364b49f8bef9583e34a8db3a4049/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements3.cc?ref=e1389417f9bc364b49f8bef9583e34a8db3a4049", "patch": "@@ -21,6 +21,6 @@\n \n using std::experimental::propagate_const;\n \n-// { dg-error \"requires a class or a pointer to an object type\" \"\" { target *-*-* } 105 }\n+// { dg-error \"requires a class or a pointer to an object type\" \"\" { target *-*-* } 107 }\n \n propagate_const<void (*)()> test1;"}, {"sha": "50303c9ee0beb667f47f411b2e806251230597b0", "filename": "libstdc++-v3/testsuite/experimental/propagate_const/requirements4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1389417f9bc364b49f8bef9583e34a8db3a4049/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1389417f9bc364b49f8bef9583e34a8db3a4049/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements4.cc?ref=e1389417f9bc364b49f8bef9583e34a8db3a4049", "patch": "@@ -21,7 +21,7 @@\n \n using std::experimental::propagate_const;\n \n-// { dg-error \"requires a class or a pointer to an object type\" \"\" { target *-*-* } 105 }\n+// { dg-error \"requires a class or a pointer to an object type\" \"\" { target *-*-* } 107 }\n // { dg-error \"invalid type\" \"\" { target *-*-* } 66 }\n // { dg-error \"uninitialized reference member\" \"\" { target *-*-* } 112 }\n "}, {"sha": "b80600ea957b5c4d5cc223d8859181c8cb6f6922", "filename": "libstdc++-v3/testsuite/experimental/propagate_const/requirements5.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1389417f9bc364b49f8bef9583e34a8db3a4049/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1389417f9bc364b49f8bef9583e34a8db3a4049/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpropagate_const%2Frequirements5.cc?ref=e1389417f9bc364b49f8bef9583e34a8db3a4049", "patch": "@@ -21,6 +21,6 @@\n \n using std::experimental::propagate_const;\n \n-// { dg-error \"requires a class or a pointer to an object type\" \"\" { target *-*-* } 105 }\n+// { dg-error \"requires a class or a pointer to an object type\" \"\" { target *-*-* } 107 }\n \n propagate_const<int[1]> test1;"}]}