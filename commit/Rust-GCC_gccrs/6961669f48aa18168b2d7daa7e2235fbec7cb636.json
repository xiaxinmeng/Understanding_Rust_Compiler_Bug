{"sha": "6961669f48aa18168b2d7daa7e2235fbec7cb636", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk2MTY2OWY0OGFhMTgxNjhiMmQ3ZGFhN2UyMjM1ZmJlYzdjYjYzNg==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2010-12-23T12:08:21Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2010-12-23T12:08:21Z"}, "message": "configure.ac (gcc_cv_ld_eh_frame_hdr): Only check GNU ld for --eh-frame-hdr.\n\n\t* configure.ac (gcc_cv_ld_eh_frame_hdr): Only check GNU ld for\n\t--eh-frame-hdr.\n\tCheck for working Sun ld version.\n\t(HAVE_LD_EH_FRAME_HDR): Adapt comment.\n\t(glibc_header_dir): Set only once.\n\tRename to ...\n\t(target_header_dir): ... this.\n\tAdapt users.\n\t(gcc_cv_target_dl_iterate_frame_hdr): Check on *-*-solaris2*.\n\t(TARGET_DL_ITERATE_PHDR): Define if present.\n\t* configure: Regenerate.\n\t* config.in: Likewise.\n\t* config/t-sol2 (LIB2ADDEH, LIB2ADDEHDEP): Define.\n\t* crtstuff.c (USE_PT_GNU_EH_FRAME): Define for recent Solaris 11\n\twith linker support and dl_iterate_phdr.\n\t* unwind-dw2-fde-glibc.c (USE_PT_GNU_EH_FRAME): Likewise.\n\t(_Unwind_IteratePhdrCallback) [PT_SUNW_UNWIND]: Also accept\n\tPT_SUNW_UNWIND .eh_frame_hdr sections.\n\t[CRT_GET_RFIB_DATA && __i386__ && __sun__ && __svr4__]: Add\n\tload_base to data->dbase.\n\t[CRT_GET_RFIB_DATA && __x86_64__ && __sun__ && __svr4__]: Handle\n\t64-bit Solaris 10+/x86.\n\t* config/sol2-gld.h [TARGET_DL_ITERATE_PHDR && HAVE_LD_EH_FRAME_HDR]\n\t(LINK_EH_SPEC): Define.\n\nFrom-SVN: r168204", "tree": {"sha": "5a2534c26dcca183ded5325723da202b9e3ced1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a2534c26dcca183ded5325723da202b9e3ced1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6961669f48aa18168b2d7daa7e2235fbec7cb636", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6961669f48aa18168b2d7daa7e2235fbec7cb636", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6961669f48aa18168b2d7daa7e2235fbec7cb636", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6961669f48aa18168b2d7daa7e2235fbec7cb636/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1d439e6cd27735a9049ff124eb03c065b5992ff3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d439e6cd27735a9049ff124eb03c065b5992ff3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d439e6cd27735a9049ff124eb03c065b5992ff3"}], "stats": {"total": 289, "additions": 202, "deletions": 87}, "files": [{"sha": "c067e6a93c4fdd1da172f4cf61029334cf020f35", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6961669f48aa18168b2d7daa7e2235fbec7cb636/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6961669f48aa18168b2d7daa7e2235fbec7cb636/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6961669f48aa18168b2d7daa7e2235fbec7cb636", "patch": "@@ -1,3 +1,30 @@\n+2010-12-23  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.ac (gcc_cv_ld_eh_frame_hdr): Only check GNU ld for\n+\t--eh-frame-hdr.\n+\tCheck for working Sun ld version.\n+\t(HAVE_LD_EH_FRAME_HDR): Adapt comment.\n+\t(glibc_header_dir): Set only once.\n+\tRename to ...\n+\t(target_header_dir): ... this.\n+\tAdapt users.\n+\t(gcc_cv_target_dl_iterate_frame_hdr): Check on *-*-solaris2*.\n+\t(TARGET_DL_ITERATE_PHDR): Define if present.\n+\t* configure: Regenerate.\n+\t* config.in: Likewise.\n+\t* config/t-sol2 (LIB2ADDEH, LIB2ADDEHDEP): Define.\n+\t* crtstuff.c (USE_PT_GNU_EH_FRAME): Define for recent Solaris 11\n+\twith linker support and dl_iterate_phdr.\n+\t* unwind-dw2-fde-glibc.c (USE_PT_GNU_EH_FRAME): Likewise.\n+\t(_Unwind_IteratePhdrCallback) [PT_SUNW_UNWIND]: Also accept\n+\tPT_SUNW_UNWIND .eh_frame_hdr sections.\n+\t[CRT_GET_RFIB_DATA && __i386__ && __sun__ && __svr4__]: Add\n+\tload_base to data->dbase.\n+\t[CRT_GET_RFIB_DATA && __x86_64__ && __sun__ && __svr4__]: Handle\n+\t64-bit Solaris 10+/x86.\n+\t* config/sol2-gld.h [TARGET_DL_ITERATE_PHDR && HAVE_LD_EH_FRAME_HDR]\n+\t(LINK_EH_SPEC): Define.\n+\n 2010-12-23  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* doc/extend.texi (Function Attributes, Volatiles): Fix typos."}, {"sha": "f129f3dec4b4ebf665efa857f790b6b75cabf3ed", "filename": "gcc/config.in", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6961669f48aa18168b2d7daa7e2235fbec7cb636/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6961669f48aa18168b2d7daa7e2235fbec7cb636/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=6961669f48aa18168b2d7daa7e2235fbec7cb636", "patch": "@@ -1161,7 +1161,7 @@\n #endif\n \n \n-/* Define if your linker supports --eh-frame-hdr option. */\n+/* Define if your linker supports .eh_frame_hdr. */\n #undef HAVE_LD_EH_FRAME_HDR\n \n /* Define if your linker supports garbage collection of sections in presence\n@@ -1686,6 +1686,9 @@\n #endif\n \n \n+/* Define if your target C library provides the `dl_iterate_phdr' function. */\n+#undef TARGET_DL_ITERATE_PHDR\n+\n /* Define if your target C library provides stack protector support */\n #ifndef USED_FOR_TARGET\n #undef TARGET_LIBC_PROVIDES_SSP"}, {"sha": "5ab1582356a9cf323d86ee458d10dc4fee551f7d", "filename": "gcc/config/sol2-gld.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6961669f48aa18168b2d7daa7e2235fbec7cb636/gcc%2Fconfig%2Fsol2-gld.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6961669f48aa18168b2d7daa7e2235fbec7cb636/gcc%2Fconfig%2Fsol2-gld.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2-gld.h?ref=6961669f48aa18168b2d7daa7e2235fbec7cb636", "patch": "@@ -29,3 +29,8 @@ along with GCC; see the file COPYING3.  If not see\n /* GNU ld needs --export-dynamic to implement -rdynamic.  */\n #undef RDYNAMIC_SPEC\n #define RDYNAMIC_SPEC \"--export-dynamic\"\n+\n+/* Solaris 11 build 135+ implements dl_iterate_phdr.  */\n+#if defined(HAVE_LD_EH_FRAME_HDR) && defined(TARGET_DL_ITERATE_PHDR)\n+#define LINK_EH_SPEC \"%{!static:--eh-frame-hdr} \"\n+#endif /* HAVE_LD_EH_FRAME && TARGET_DL_ITERATE_PHDR */"}, {"sha": "6a76bf1bad81d85938a1c43f5d8c7ecca7ab1b3c", "filename": "gcc/config/t-sol2", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6961669f48aa18168b2d7daa7e2235fbec7cb636/gcc%2Fconfig%2Ft-sol2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6961669f48aa18168b2d7daa7e2235fbec7cb636/gcc%2Fconfig%2Ft-sol2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-sol2?ref=6961669f48aa18168b2d7daa7e2235fbec7cb636", "patch": "@@ -28,3 +28,9 @@ sol2.o: $(srcdir)/config/sol2.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n   tree.h output.h $(TM_H) $(TM_P_H) $(GGC_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t  $(srcdir)/config/sol2.c\n+\n+# Use unwind-dw2-fde-glibc.c.  Unless linker support and dl_iterate_phdr\n+# are present, automatically falls back to unwind-dw2-fde.c.\n+LIB2ADDEH = $(srcdir)/unwind-dw2.c $(srcdir)/unwind-dw2-fde-glibc.c \\\n+  $(srcdir)/unwind-sjlj.c $(srcdir)/gthr-gnat.c $(srcdir)/unwind-c.c\n+LIB2ADDEHDEP = unwind.inc unwind-dw2-fde.h unwind-dw2-fde.c"}, {"sha": "1c95830d58c24827b53e88689762b990fc361091", "filename": "gcc/configure", "status": "modified", "additions": 64, "deletions": 41, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6961669f48aa18168b2d7daa7e2235fbec7cb636/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6961669f48aa18168b2d7daa7e2235fbec7cb636/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=6961669f48aa18168b2d7daa7e2235fbec7cb636", "patch": "@@ -25271,10 +25271,21 @@ if test $in_tree_ld = yes ; then\n     gcc_cv_ld_eh_frame_hdr=yes\n   fi\n elif test x$gcc_cv_ld != x; then\n-\t# Check if linker supports --eh-frame-hdr option\n-\tif $gcc_cv_ld --help 2>/dev/null | grep eh-frame-hdr > /dev/null; then\n-\t\tgcc_cv_ld_eh_frame_hdr=yes\n-\tfi\n+  if echo \"$ld_ver\" | grep GNU > /dev/null; then\n+    # Check if linker supports --eh-frame-hdr option\n+    if $gcc_cv_ld --help 2>/dev/null | grep eh-frame-hdr > /dev/null; then\n+      gcc_cv_ld_eh_frame_hdr=yes\n+    fi\n+  else\n+    case \"$target\" in\n+      *-*-solaris2*)\n+        # Sun ld has various bugs in .eh_frame_hdr support before version 1.2249.\n+        if test \"$ld_vers_major\" -gt 1 || test \"$ld_vers_minor\" -ge 2249; then\n+          gcc_cv_ld_eh_frame_hdr=yes\n+        fi\n+        ;;\n+    esac\n+  fi\n fi\n \n if test x\"$gcc_cv_ld_eh_frame_hdr\" = xyes; then\n@@ -25616,6 +25627,22 @@ _ACEOF\n \n fi\n \n+if test x$host != x$target || test \"x$TARGET_SYSTEM_ROOT\" != x; then\n+  if test \"x$with_headers\" != x; then\n+    target_header_dir=$with_headers\n+  elif test \"x$with_sysroot\" = x; then\n+    target_header_dir=\"${exec_prefix}/${target_noncanonical}/sys-include\"\n+  elif test \"x$with_build_sysroot\" != \"x\"; then\n+    target_header_dir=\"${with_build_sysroot}/usr/include\"\n+  elif test \"x$with_sysroot\" = xyes; then\n+    target_header_dir=\"${exec_prefix}/${target_noncanonical}/sys-root/usr/include\"\n+  else\n+    target_header_dir=\"${with_sysroot}/usr/include\"\n+  fi\n+else\n+  target_header_dir=/usr/include\n+fi\n+\n # Test for stack protector support in target C library.\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking __stack_chk_fail in target C library\" >&5\n $as_echo_n \"checking __stack_chk_fail in target C library... \" >&6; }\n@@ -25625,39 +25652,24 @@ else\n   gcc_cv_libc_provides_ssp=no\n     case \"$target\" in\n        *-*-linux* | *-*-kfreebsd*-gnu | *-*-knetbsd*-gnu)\n-      if test x$host != x$target || test \"x$TARGET_SYSTEM_ROOT\" != x; then\n-\tif test \"x$with_headers\" != x; then\n-\t  glibc_header_dir=$with_headers\n-\telif test \"x$with_sysroot\" = x; then\n-\t  glibc_header_dir=\"${exec_prefix}/${target_noncanonical}/sys-include\"\n-\telif test \"x$with_build_sysroot\" != \"x\"; then\n-\t  glibc_header_dir=\"${with_build_sysroot}/usr/include\"\n-\telif test \"x$with_sysroot\" = xyes; then\n-\t  glibc_header_dir=\"${exec_prefix}/${target_noncanonical}/sys-root/usr/include\"\n-\telse\n-\t  glibc_header_dir=\"${with_sysroot}/usr/include\"\n-\tfi\n-      else\n-\tglibc_header_dir=/usr/include\n-      fi\n       # glibc 2.4 and later provides __stack_chk_fail and\n       # either __stack_chk_guard, or TLS access to stack guard canary.\n-      if test -f $glibc_header_dir/features.h \\\n+      if test -f $target_header_dir/features.h \\\n \t && $EGREP '^[ \t]*#[ \t]*define[ \t]+__GNU_LIBRARY__[ \t]+([1-9][0-9]|[6-9])' \\\n-\t    $glibc_header_dir/features.h > /dev/null; then\n+\t    $target_header_dir/features.h > /dev/null; then\n \tif $EGREP '^[ \t]*#[ \t]*define[ \t]+__GLIBC__[ \t]+([1-9][0-9]|[3-9])' \\\n-\t   $glibc_header_dir/features.h > /dev/null; then\n+\t   $target_header_dir/features.h > /dev/null; then\n \t  gcc_cv_libc_provides_ssp=yes\n \telif $EGREP '^[ \t]*#[ \t]*define[ \t]+__GLIBC__[ \t]+2' \\\n-\t     $glibc_header_dir/features.h > /dev/null \\\n+\t     $target_header_dir/features.h > /dev/null \\\n \t     && $EGREP '^[ \t]*#[ \t]*define[ \t]+__GLIBC_MINOR__[ \t]+([1-9][0-9]|[4-9])' \\\n-\t     $glibc_header_dir/features.h > /dev/null; then\n+\t     $target_header_dir/features.h > /dev/null; then\n \t  gcc_cv_libc_provides_ssp=yes\n \telif $EGREP '^[ \t]*#[ \t]*define[ \t]+__UCLIBC__[ \t]+1' \\\n-\t     $glibc_header_dir/features.h > /dev/null && \\\n-\t     test -f $glibc_header_dir/bits/uClibc_config.h && \\\n+\t     $target_header_dir/features.h > /dev/null && \\\n+\t     test -f $target_header_dir/bits/uClibc_config.h && \\\n \t     $EGREP '^[ \t]*#[ \t]*define[ \t]+__UCLIBC_HAS_SSP__[ \t]+1' \\\n-\t     $glibc_header_dir/bits/uClibc_config.h > /dev/null; then\n+\t     $target_header_dir/bits/uClibc_config.h > /dev/null; then\n \t  gcc_cv_libc_provides_ssp=yes\n \tfi\n       fi\n@@ -25704,21 +25716,8 @@ if test \"${with_long_double_128+set}\" = set; then :\n   withval=$with_long_double_128; gcc_cv_target_ldbl128=\"$with_long_double_128\"\n else\n   gcc_cv_target_ldbl128=no\n-      if test x$host != x$target || test \"x$TARGET_SYSTEM_ROOT\" != x; then\n-\tif test \"x$with_sysroot\" = x; then\n-\t  glibc_header_dir=\"${exec_prefix}/${target_noncanonical}/sys-include\"\n-\telif test \"x$with_build_sysroot\" != \"x\"; then\n-\t  glibc_header_dir=\"${with_build_sysroot}/usr/include\"\n-\telif test \"x$with_sysroot\" = xyes; then\n-\t  glibc_header_dir=\"${exec_prefix}/${target_noncanonical}/sys-root/usr/include\"\n-\telse\n-\t  glibc_header_dir=\"${with_sysroot}/usr/include\"\n-\tfi\n-      else\n-\tglibc_header_dir=/usr/include\n-      fi\n       grep '^[ \t]*#[ \t]*define[ \t][ \t]*__LONG_DOUBLE_MATH_OPTIONAL' \\\n-        $glibc_header_dir/bits/wordsize.h > /dev/null 2>&1 \\\n+        $target_header_dir/bits/wordsize.h > /dev/null 2>&1 \\\n       && gcc_cv_target_ldbl128=yes\n \n fi\n@@ -25731,6 +25730,30 @@ $as_echo \"#define TARGET_DEFAULT_LONG_DOUBLE_128 1\" >>confdefs.h\n \n fi\n \n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking dl_iterate_phdr in target C library\" >&5\n+$as_echo_n \"checking dl_iterate_phdr in target C library... \" >&6; }\n+gcc_cv_target_dl_iterate_phdr=unknown\n+case \"$target\" in\n+  *-*-solaris2*)\n+    # <link.h> needs both a dl_iterate_phdr declaration and support for\n+    # compilation with largefile support.\n+    if grep dl_iterate_phdr $target_header_dir/link.h > /dev/null 2>&1 \\\n+      && grep 'large file capable' $target_header_dir/link.h > /dev/null 2>&1; then\n+      gcc_cv_target_dl_iterate_phdr=yes\n+    else\n+      gcc_cv_target_dl_iterate_phdr=no\n+    fi\n+    ;;\n+esac\n+\n+if test x$gcc_cv_target_dl_iterate_phdr = xyes; then\n+\n+$as_echo \"#define TARGET_DL_ITERATE_PHDR 1\" >>confdefs.h\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_target_dl_iterate_phdr\" >&5\n+$as_echo \"$gcc_cv_target_dl_iterate_phdr\" >&6; }\n+\n # Find out what GC implementation we want, or may, use.\n \n # Check whether --with-gc was given."}, {"sha": "ad8d008837bdc54980752defad5a9745550c3950", "filename": "gcc/configure.ac", "status": "modified", "additions": 62, "deletions": 42, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6961669f48aa18168b2d7daa7e2235fbec7cb636/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6961669f48aa18168b2d7daa7e2235fbec7cb636/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=6961669f48aa18168b2d7daa7e2235fbec7cb636", "patch": "@@ -3930,15 +3930,26 @@ if test $in_tree_ld = yes ; then\n     gcc_cv_ld_eh_frame_hdr=yes\n   fi\n elif test x$gcc_cv_ld != x; then\n-\t# Check if linker supports --eh-frame-hdr option\n-\tif $gcc_cv_ld --help 2>/dev/null | grep eh-frame-hdr > /dev/null; then\n-\t\tgcc_cv_ld_eh_frame_hdr=yes\n-\tfi\n+  if echo \"$ld_ver\" | grep GNU > /dev/null; then\n+    # Check if linker supports --eh-frame-hdr option\n+    if $gcc_cv_ld --help 2>/dev/null | grep eh-frame-hdr > /dev/null; then\n+      gcc_cv_ld_eh_frame_hdr=yes\n+    fi\n+  else\n+    case \"$target\" in\n+      *-*-solaris2*)\n+        # Sun ld has various bugs in .eh_frame_hdr support before version 1.2249.\n+        if test \"$ld_vers_major\" -gt 1 || test \"$ld_vers_minor\" -ge 2249; then\n+          gcc_cv_ld_eh_frame_hdr=yes\n+        fi\n+        ;;\n+    esac\n+  fi\n fi\n GCC_TARGET_TEMPLATE([HAVE_LD_EH_FRAME_HDR])\n if test x\"$gcc_cv_ld_eh_frame_hdr\" = xyes; then\n \tAC_DEFINE(HAVE_LD_EH_FRAME_HDR, 1,\n-[Define if your linker supports --eh-frame-hdr option.])\n+[Define if your linker supports .eh_frame_hdr.])\n fi\n AC_MSG_RESULT($gcc_cv_ld_eh_frame_hdr)\n \n@@ -4219,45 +4230,46 @@ if test x$with_sysroot = x && test x$host = x$target \\\n [Define to PREFIX/include if cpp should also search that directory.])\n fi\n \n+if test x$host != x$target || test \"x$TARGET_SYSTEM_ROOT\" != x; then\n+  if test \"x$with_headers\" != x; then\n+    target_header_dir=$with_headers\n+  elif test \"x$with_sysroot\" = x; then\n+    target_header_dir=\"${exec_prefix}/${target_noncanonical}/sys-include\"\n+  elif test \"x$with_build_sysroot\" != \"x\"; then\n+    target_header_dir=\"${with_build_sysroot}/usr/include\"\n+  elif test \"x$with_sysroot\" = xyes; then\n+    target_header_dir=\"${exec_prefix}/${target_noncanonical}/sys-root/usr/include\"\n+  else\n+    target_header_dir=\"${with_sysroot}/usr/include\"\n+  fi\n+else\n+  target_header_dir=/usr/include\n+fi\n+\n # Test for stack protector support in target C library.\n AC_CACHE_CHECK(__stack_chk_fail in target C library,\n       gcc_cv_libc_provides_ssp,\n       [gcc_cv_libc_provides_ssp=no\n     case \"$target\" in\n        *-*-linux* | *-*-kfreebsd*-gnu | *-*-knetbsd*-gnu)\n-      if test x$host != x$target || test \"x$TARGET_SYSTEM_ROOT\" != x; then\n-\tif test \"x$with_headers\" != x; then\n-\t  glibc_header_dir=$with_headers\n-\telif test \"x$with_sysroot\" = x; then\n-\t  glibc_header_dir=\"${exec_prefix}/${target_noncanonical}/sys-include\"\n-\telif test \"x$with_build_sysroot\" != \"x\"; then\n-\t  glibc_header_dir=\"${with_build_sysroot}/usr/include\"\n-\telif test \"x$with_sysroot\" = xyes; then\n-\t  glibc_header_dir=\"${exec_prefix}/${target_noncanonical}/sys-root/usr/include\"\n-\telse\n-\t  glibc_header_dir=\"${with_sysroot}/usr/include\"\n-\tfi\n-      else\n-\tglibc_header_dir=/usr/include\n-      fi\n       [# glibc 2.4 and later provides __stack_chk_fail and\n       # either __stack_chk_guard, or TLS access to stack guard canary.\n-      if test -f $glibc_header_dir/features.h \\\n+      if test -f $target_header_dir/features.h \\\n \t && $EGREP '^[ \t]*#[ \t]*define[ \t]+__GNU_LIBRARY__[ \t]+([1-9][0-9]|[6-9])' \\\n-\t    $glibc_header_dir/features.h > /dev/null; then\n+\t    $target_header_dir/features.h > /dev/null; then\n \tif $EGREP '^[ \t]*#[ \t]*define[ \t]+__GLIBC__[ \t]+([1-9][0-9]|[3-9])' \\\n-\t   $glibc_header_dir/features.h > /dev/null; then\n+\t   $target_header_dir/features.h > /dev/null; then\n \t  gcc_cv_libc_provides_ssp=yes\n \telif $EGREP '^[ \t]*#[ \t]*define[ \t]+__GLIBC__[ \t]+2' \\\n-\t     $glibc_header_dir/features.h > /dev/null \\\n+\t     $target_header_dir/features.h > /dev/null \\\n \t     && $EGREP '^[ \t]*#[ \t]*define[ \t]+__GLIBC_MINOR__[ \t]+([1-9][0-9]|[4-9])' \\\n-\t     $glibc_header_dir/features.h > /dev/null; then\n+\t     $target_header_dir/features.h > /dev/null; then\n \t  gcc_cv_libc_provides_ssp=yes\n \telif $EGREP '^[ \t]*#[ \t]*define[ \t]+__UCLIBC__[ \t]+1' \\\n-\t     $glibc_header_dir/features.h > /dev/null && \\\n-\t     test -f $glibc_header_dir/bits/uClibc_config.h && \\\n+\t     $target_header_dir/features.h > /dev/null && \\\n+\t     test -f $target_header_dir/bits/uClibc_config.h && \\\n \t     $EGREP '^[ \t]*#[ \t]*define[ \t]+__UCLIBC_HAS_SSP__[ \t]+1' \\\n-\t     $glibc_header_dir/bits/uClibc_config.h > /dev/null; then\n+\t     $target_header_dir/bits/uClibc_config.h > /dev/null; then\n \t  gcc_cv_libc_provides_ssp=yes\n \tfi\n       fi]\n@@ -4293,21 +4305,8 @@ case \"$target\" in\n [  --with-long-double-128  Use 128-bit long double by default.],\n       gcc_cv_target_ldbl128=\"$with_long_double_128\",\n       [[gcc_cv_target_ldbl128=no\n-      if test x$host != x$target || test \"x$TARGET_SYSTEM_ROOT\" != x; then\n-\tif test \"x$with_sysroot\" = x; then\n-\t  glibc_header_dir=\"${exec_prefix}/${target_noncanonical}/sys-include\"\n-\telif test \"x$with_build_sysroot\" != \"x\"; then\n-\t  glibc_header_dir=\"${with_build_sysroot}/usr/include\"\n-\telif test \"x$with_sysroot\" = xyes; then\n-\t  glibc_header_dir=\"${exec_prefix}/${target_noncanonical}/sys-root/usr/include\"\n-\telse\n-\t  glibc_header_dir=\"${with_sysroot}/usr/include\"\n-\tfi\n-      else\n-\tglibc_header_dir=/usr/include\n-      fi\n       grep '^[ \t]*#[ \t]*define[ \t][ \t]*__LONG_DOUBLE_MATH_OPTIONAL' \\\n-        $glibc_header_dir/bits/wordsize.h > /dev/null 2>&1 \\\n+        $target_header_dir/bits/wordsize.h > /dev/null 2>&1 \\\n       && gcc_cv_target_ldbl128=yes\n       ]])\n     ;;\n@@ -4317,6 +4316,27 @@ if test x$gcc_cv_target_ldbl128 = xyes; then\n \t    [Define if TFmode long double should be the default])\n fi\n \n+AC_MSG_CHECKING(dl_iterate_phdr in target C library)\n+gcc_cv_target_dl_iterate_phdr=unknown\n+case \"$target\" in\n+  *-*-solaris2*)\n+    # <link.h> needs both a dl_iterate_phdr declaration and support for\n+    # compilation with largefile support.\n+    if grep dl_iterate_phdr $target_header_dir/link.h > /dev/null 2>&1 \\\n+      && grep 'large file capable' $target_header_dir/link.h > /dev/null 2>&1; then\n+      gcc_cv_target_dl_iterate_phdr=yes\n+    else\n+      gcc_cv_target_dl_iterate_phdr=no\n+    fi\n+    ;;\n+esac\n+GCC_TARGET_TEMPLATE([TARGET_DL_ITERATE_PHDR])\n+if test x$gcc_cv_target_dl_iterate_phdr = xyes; then\n+   AC_DEFINE(TARGET_DL_ITERATE_PHDR, 1,\n+[Define if your target C library provides the `dl_iterate_phdr' function.])\n+fi\n+AC_MSG_RESULT($gcc_cv_target_dl_iterate_phdr)\n+\n # Find out what GC implementation we want, or may, use.\n AC_ARG_WITH(gc,\n [  --with-gc={page,zone}   choose the garbage collection mechanism to use"}, {"sha": "b65f490da66fd5b06d0e86d56d91155df4f8eebd", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6961669f48aa18168b2d7daa7e2235fbec7cb636/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6961669f48aa18168b2d7daa7e2235fbec7cb636/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=6961669f48aa18168b2d7daa7e2235fbec7cb636", "patch": "@@ -1,7 +1,7 @@\n /* Specialized bits of code needed to support construction and\n    destruction of file-scope objects in C++ code.\n    Copyright (C) 1991, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001\n-   2002, 2003, 2004, 2005, 2006, 2007, 2009 Free Software Foundation, Inc.\n+   2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Ron Guilmette (rfg@monkeys.com).\n \n This file is part of GCC.\n@@ -88,6 +88,15 @@ call_ ## FUNC (void)\t\t\t\t\t\\\n # define USE_PT_GNU_EH_FRAME\n #endif\n \n+#if defined(OBJECT_FORMAT_ELF) \\\n+    && !defined(OBJECT_FORMAT_FLAT) \\\n+    && defined(HAVE_LD_EH_FRAME_HDR) && defined(TARGET_DL_ITERATE_PHDR) \\\n+    && !defined(inhibit_libc) && !defined(CRTSTUFFT_O) \\\n+    && defined(__sun__) && defined(__svr4__)\n+#include <link.h>\n+# define USE_PT_GNU_EH_FRAME\n+#endif\n+\n #if defined(OBJECT_FORMAT_ELF) \\\n     && !defined(OBJECT_FORMAT_FLAT) \\\n     && defined(HAVE_LD_EH_FRAME_HDR) \\"}, {"sha": "d8e3c0e934b047ddf104c86af09bc3d580440f20", "filename": "gcc/unwind-dw2-fde-glibc.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6961669f48aa18168b2d7daa7e2235fbec7cb636/gcc%2Funwind-dw2-fde-glibc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6961669f48aa18168b2d7daa7e2235fbec7cb636/gcc%2Funwind-dw2-fde-glibc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2-fde-glibc.c?ref=6961669f48aa18168b2d7daa7e2235fbec7cb636", "patch": "@@ -1,4 +1,5 @@\n-/* Copyright (C) 2001, 2002, 2003, 2004, 2005, 2009 Free Software Foundation, Inc.\n+/* Copyright (C) 2001, 2002, 2003, 2004, 2005, 2009, 2010\n+   Free Software Foundation, Inc.\n    Contributed by Jakub Jelinek <jakub@redhat.com>.\n \n    This file is part of GCC.\n@@ -57,6 +58,12 @@\n # define USE_PT_GNU_EH_FRAME\n #endif\n \n+#if !defined(inhibit_libc) && defined(HAVE_LD_EH_FRAME_HDR) \\\n+    && defined(TARGET_DL_ITERATE_PHDR) \\\n+    && defined(__sun__) && defined(__svr4__)\n+# define USE_PT_GNU_EH_FRAME\n+#endif\n+\n #if defined(USE_PT_GNU_EH_FRAME)\n \n #include <link.h>\n@@ -256,6 +263,12 @@ _Unwind_IteratePhdrCallback (struct dl_phdr_info *info, size_t size, void *ptr)\n \t}\n       else if (phdr->p_type == PT_GNU_EH_FRAME)\n \tp_eh_frame_hdr = phdr;\n+#ifdef PT_SUNW_UNWIND\n+      /* Sun ld emits PT_SUNW_UNWIND .eh_frame_hdr sections instead of\n+\t PT_SUNW_EH_FRAME/PT_GNU_EH_FRAME, so accept them as well.  */\n+      else if (phdr->p_type == PT_SUNW_UNWIND)\n+\tp_eh_frame_hdr = phdr;\n+#endif\n       else if (phdr->p_type == PT_DYNAMIC)\n \tp_dynamic = phdr;\n     }\n@@ -305,13 +318,22 @@ _Unwind_IteratePhdrCallback (struct dl_phdr_info *info, size_t size, void *ptr)\n       for (; dyn->d_tag != DT_NULL ; dyn++)\n \tif (dyn->d_tag == DT_PLTGOT)\n \t  {\n-\t    /* On IA-32, _DYNAMIC is writable and GLIBC has relocated it.  */\n \t    data->dbase = (void *) dyn->d_un.d_ptr;\n+#if defined __linux__\n+\t    /* On IA-32 Linux, _DYNAMIC is writable and GLIBC has\n+\t       relocated it.  */\n+#elif defined __sun__ && defined __svr4__\n+\t    /* On Solaris 2/x86, we need to do this ourselves.  */\n+\t    data->dbase += load_base;\n+#endif\n \t    break;\n \t  }\n     }\n # elif defined __FRV_FDPIC__ && defined __linux__\n   data->dbase = load_base.got_value;\n+# elif defined __x86_64__ && defined __sun__ && defined __svr4__\n+  /* While CRT_GET_RFIB_DATA is also defined for 64-bit Solaris 10+/x86, it\n+     doesn't apply since it uses DW_EH_PE_pcrel encoding.  */\n # else\n #  error What is DW_EH_PE_datarel base on this platform?\n # endif"}]}