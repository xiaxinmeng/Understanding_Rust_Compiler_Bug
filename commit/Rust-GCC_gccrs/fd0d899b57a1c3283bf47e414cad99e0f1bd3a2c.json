{"sha": "fd0d899b57a1c3283bf47e414cad99e0f1bd3a2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQwZDg5OWI1N2ExYzMyODNiZjQ3ZTQxNGNhZDk5ZTBmMWJkM2EyYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-11-30T11:41:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-11-30T11:41:56Z"}, "message": "[multiple changes]\n\n2009-11-30  Vincent Celier  <celier@adacore.com>\n\n\t* prj-tree.ads: Minor comment updates\n\t* prj-tree.adb: Minor reformatting\n\n2009-11-30  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Derive_Subprogram): Indicate that an inherited\n\tpredefined control operation is hidden if the parent type is not\n\tvisibly controlled.\n\t* sem_ch6.adb (Check_Overriding_Indicator): Do not report error if\n\toverridden operation is not visible, as may be the case with predefined\n\tcontrol operations.\n\t* sem_disp.adb (Check_Dispatching_Operation): Do not emit warning on\n\tnon-overriding control operation when type is not visibly controlled,\n\tif the subprogram has an explicit overriding indicator.\n\t* sem_util.ads, sem_util.adb (Is_Visibly_Controlled): Moved here from\n\tsem_disp.adb.\n\nFrom-SVN: r154791", "tree": {"sha": "98f11f6ca28a2ea30f5c66786ecba925fd13bb5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98f11f6ca28a2ea30f5c66786ecba925fd13bb5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd0d899b57a1c3283bf47e414cad99e0f1bd3a2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd0d899b57a1c3283bf47e414cad99e0f1bd3a2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd0d899b57a1c3283bf47e414cad99e0f1bd3a2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd0d899b57a1c3283bf47e414cad99e0f1bd3a2c/comments", "author": null, "committer": null, "parents": [{"sha": "33f9ea08c652e009b218398cf9c98dab7e9af7af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33f9ea08c652e009b218398cf9c98dab7e9af7af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33f9ea08c652e009b218398cf9c98dab7e9af7af"}], "stats": {"total": 194, "additions": 156, "deletions": 38}, "files": [{"sha": "ee3c5e2e348b0a25f956c914a5023353b1e6e3fe", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd0d899b57a1c3283bf47e414cad99e0f1bd3a2c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd0d899b57a1c3283bf47e414cad99e0f1bd3a2c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fd0d899b57a1c3283bf47e414cad99e0f1bd3a2c", "patch": "@@ -1,3 +1,22 @@\n+2009-11-30  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj-tree.ads: Minor comment updates\n+\t* prj-tree.adb: Minor reformatting\n+\n+2009-11-30  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Derive_Subprogram): Indicate that an inherited\n+\tpredefined control operation is hidden if the parent type is not\n+\tvisibly controlled.\n+\t* sem_ch6.adb (Check_Overriding_Indicator): Do not report error if\n+\toverridden operation is not visible, as may be the case with predefined\n+\tcontrol operations.\n+\t* sem_disp.adb (Check_Dispatching_Operation): Do not emit warning on\n+\tnon-overriding control operation when type is not visibly controlled,\n+\tif the subprogram has an explicit overriding indicator.\n+\t* sem_util.ads, sem_util.adb (Is_Visibly_Controlled): Moved here from\n+\tsem_disp.adb.\n+\n 2009-11-30  Emmanuel Briot  <briot@adacore.com>\n \n \t* prj-tree.adb (Create_Attribute): Fix handling of VMS and Windows"}, {"sha": "0129f1d8342629585e6ab7b5729f6ab220b4c4e8", "filename": "gcc/ada/prj-tree.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd0d899b57a1c3283bf47e414cad99e0f1bd3a2c/gcc%2Fada%2Fprj-tree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd0d899b57a1c3283bf47e414cad99e0f1bd3a2c/gcc%2Fada%2Fprj-tree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-tree.adb?ref=fd0d899b57a1c3283bf47e414cad99e0f1bd3a2c", "patch": "@@ -3027,7 +3027,7 @@ package body Prj.Tree is\n       return Pack;\n    end Create_Package;\n \n-   -------------------\n+   ----------------------\n    -- Create_Attribute --\n    ----------------------\n "}, {"sha": "d3b86e6ef9aa0044e045bfa3947d88cb7887a208", "filename": "gcc/ada/prj-tree.ads", "status": "modified", "additions": 82, "deletions": 12, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd0d899b57a1c3283bf47e414cad99e0f1bd3a2c/gcc%2Fada%2Fprj-tree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd0d899b57a1c3283bf47e414cad99e0f1bd3a2c/gcc%2Fada%2Fprj-tree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-tree.ads?ref=fd0d899b57a1c3283bf47e414cad99e0f1bd3a2c", "patch": "@@ -408,7 +408,8 @@ package Prj.Tree is\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref) return Project_Node_Id;\n    pragma Inline (First_Declarative_Item_Of);\n-   --  Only valid for N_With_Clause nodes\n+   --  Only valid for N_Project_Declaration, N_Case_Item and\n+   --  N_Package_Declaration.\n \n    function Extended_Project_Of\n      (Node    : Project_Node_Id;\n@@ -492,7 +493,7 @@ package Prj.Tree is\n       In_Tree : Project_Node_Tree_Ref) return Name_Id;\n    pragma Inline (Associative_Array_Index_Of);\n    --  Only valid for N_Attribute_Declaration and N_Attribute_Reference.\n-   --  Returns No_String for non associative array attributes.\n+   --  Returns No_Name for non associative array attributes.\n \n    function Next_Variable\n      (Node    : Project_Node_Id;\n@@ -573,8 +574,8 @@ package Prj.Tree is\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref) return Project_Node_Id;\n    pragma Inline (First_Choice_Of);\n-   --  Return the first choice in a N_Case_Item, or Empty_Node if\n-   --  this is when others.\n+   --  Only valid for N_Case_Item nodes. Return the first choice in a\n+   --  N_Case_Item, or Empty_Node if this is when others.\n \n    function Next_Case_Item\n      (Node    : Project_Node_Id;\n@@ -665,8 +666,11 @@ package Prj.Tree is\n    --  The following procedures are part of the abstract interface of the\n    --  Project File tree.\n \n-   --  Each Set_* procedure is valid only for the same Project_Node_Kind\n-   --  nodes as the corresponding query function above.\n+   --  Foe each Set_* procedure the condition of validity is specified. If an\n+   --  access function is called with invalid arguments, then exception\n+   --  Assertion_Error is raised if assertions are enabled, otherwise the\n+   --  behaviour is not defined and may result in a crash.\n+\n    --  These are very low-level, and manipulate the tree itself directly. You\n    --  should look at the Create_* procedure instead if you want to use higher\n    --  level constructs\n@@ -676,332 +680,398 @@ package Prj.Tree is\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Name_Id);\n    pragma Inline (Set_Name_Of);\n+   --  Valid for all non empty nodes.\n \n    procedure Set_Kind_Of\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Kind);\n    pragma Inline (Set_Kind_Of);\n+   --  Valid for all non empty nodes\n \n    procedure Set_Location_Of\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Source_Ptr);\n    pragma Inline (Set_Location_Of);\n+   --  Valid for all non empty nodes\n \n    procedure Set_First_Comment_After\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_First_Comment_After);\n+   --  Valid only for N_Comment_Zones nodes\n \n    procedure Set_First_Comment_After_End\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_First_Comment_After_End);\n+   --  Valid only for N_Comment_Zones nodes\n \n    procedure Set_First_Comment_Before\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_First_Comment_Before);\n+   --  Valid only for N_Comment_Zones nodes\n \n    procedure Set_First_Comment_Before_End\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_First_Comment_Before_End);\n+   --  Valid only for N_Comment_Zones nodes\n \n    procedure Set_Next_Comment\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_Next_Comment);\n+   --  Valid only for N_Comment nodes\n \n    procedure Set_Parent_Project_Of\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n+   --  Valid only for N_Project nodes\n \n    procedure Set_Project_File_Includes_Unkept_Comments\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Boolean);\n+   --  Valid only for N_Project nodes\n \n    procedure Set_Directory_Of\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Path_Name_Type);\n    pragma Inline (Set_Directory_Of);\n+   --  Valid only for N_Project nodes\n \n    procedure Set_Expression_Kind_Of\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Variable_Kind);\n    pragma Inline (Set_Expression_Kind_Of);\n+   --  Only valid for N_Literal_String, N_Attribute_Declaration,\n+   --  N_Variable_Declaration, N_Typed_Variable_Declaration, N_Expression,\n+   --  N_Term, N_Variable_Reference or N_Attribute_Reference nodes.\n \n    procedure Set_Is_Extending_All\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref);\n    pragma Inline (Set_Is_Extending_All);\n+   --  Only valid for N_Project and N_With_Clause\n \n    procedure Set_Is_Not_Last_In_List\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref);\n    pragma Inline (Set_Is_Not_Last_In_List);\n+   --  Only valid for N_With_Clause\n \n    procedure Set_First_Variable_Of\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Variable_Node_Id);\n    pragma Inline (Set_First_Variable_Of);\n+   --  Only valid for N_Project or N_Package_Declaration nodes\n \n    procedure Set_First_Package_Of\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Package_Declaration_Id);\n    pragma Inline (Set_First_Package_Of);\n+   --  Only valid for N_Project nodes\n \n    procedure Set_Package_Id_Of\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Package_Node_Id);\n    pragma Inline (Set_Package_Id_Of);\n+   --  Only valid for N_Package_Declaration nodes\n \n    procedure Set_Path_Name_Of\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Path_Name_Type);\n    pragma Inline (Set_Path_Name_Of);\n+   --  Only valid for N_Project and N_With_Clause nodes\n \n    procedure Set_String_Value_Of\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Name_Id);\n    pragma Inline (Set_String_Value_Of);\n+   --  Only valid for N_With_Clause, N_Literal_String nodes or N_Comment.\n+\n+   procedure Set_Source_Index_Of\n+     (Node    : Project_Node_Id;\n+      In_Tree : Project_Node_Tree_Ref;\n+      To      : Int);\n+   pragma Inline (Set_Source_Index_Of);\n+   --  Only valid for N_Literal_String and N_Attribute_Declaration nodes. For\n+   --  N_Literal_String, set the source index of the litteral string. For\n+   --  N_Attribute_Declaration, set the source index of the index of the\n+   --  associative array element.\n \n    procedure Set_First_With_Clause_Of\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_First_With_Clause_Of);\n+   --  Only valid for N_Project nodes\n \n    procedure Set_Project_Declaration_Of\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_Project_Declaration_Of);\n+   --  Only valid for N_Project nodes\n \n    procedure Set_Project_Qualifier_Of\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Qualifier);\n    pragma Inline (Set_Project_Qualifier_Of);\n+   --  Only valid for N_Project nodes\n \n    procedure Set_Extending_Project_Of\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_Extending_Project_Of);\n+   --  Only valid for N_Project_Declaration nodes\n \n    procedure Set_First_String_Type_Of\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_First_String_Type_Of);\n+   --  Only valid for N_Project nodes\n \n    procedure Set_Extended_Project_Path_Of\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Path_Name_Type);\n    pragma Inline (Set_Extended_Project_Path_Of);\n+   --  Only valid for N_With_Clause nodes\n \n    procedure Set_Project_Node_Of\n      (Node         : Project_Node_Id;\n       In_Tree      : Project_Node_Tree_Ref;\n       To           : Project_Node_Id;\n       Limited_With : Boolean := False);\n    pragma Inline (Set_Project_Node_Of);\n+   --  Only valid for N_With_Clause, N_Variable_Reference and\n+   --  N_Attribute_Reference nodes.\n \n    procedure Set_Next_With_Clause_Of\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_Next_With_Clause_Of);\n+   --  Only valid for N_With_Clause nodes\n \n    procedure Set_First_Declarative_Item_Of\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_First_Declarative_Item_Of);\n+   --  Only valid for N_Project_Declaration, N_Case_Item and\n+   --  N_Package_Declaration.\n \n    procedure Set_Extended_Project_Of\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_Extended_Project_Of);\n+   --  Only valid for N_Project_Declaration nodes\n \n    procedure Set_Current_Item_Node\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_Current_Item_Node);\n+   --  Only valid for N_Declarative_Item nodes\n \n    procedure Set_Next_Declarative_Item\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_Next_Declarative_Item);\n+   --  Only valid for N_Declarative_Item node\n \n    procedure Set_Project_Of_Renamed_Package_Of\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_Project_Of_Renamed_Package_Of);\n+   --  Only valid for N_Package_Declaration nodes.\n \n    procedure Set_Next_Package_In_Project\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_Next_Package_In_Project);\n+   --  Only valid for N_Package_Declaration nodes\n \n    procedure Set_First_Literal_String\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_First_Literal_String);\n+   --  Only valid for N_String_Type_Declaration nodes\n \n    procedure Set_Next_String_Type\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_Next_String_Type);\n+   --  Only valid for N_String_Type_Declaration nodes\n \n    procedure Set_Next_Literal_String\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_Next_Literal_String);\n+   --  Only valid for N_Literal_String nodes\n \n    procedure Set_Expression_Of\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_Expression_Of);\n+   --  Only valid for N_Attribute_Declaration, N_Typed_Variable_Declaration\n+   --  or N_Variable_Declaration nodes\n \n    procedure Set_Associative_Project_Of\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_Associative_Project_Of);\n+   --  Only valid for N_Attribute_Declaration nodes\n \n    procedure Set_Associative_Package_Of\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_Associative_Package_Of);\n+   --  Only valid for N_Attribute_Declaration nodes\n \n    procedure Set_Associative_Array_Index_Of\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Name_Id);\n    pragma Inline (Set_Associative_Array_Index_Of);\n+   --  Only valid for N_Attribute_Declaration and N_Attribute_Reference.\n \n    procedure Set_Next_Variable\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_Next_Variable);\n+   --  Only valid for N_Typed_Variable_Declaration or N_Variable_Declaration\n+   --  nodes.\n \n    procedure Set_First_Term\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_First_Term);\n+   --  Only valid for N_Expression nodes\n \n    procedure Set_Next_Expression_In_List\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_Next_Expression_In_List);\n+   --  Only valid for N_Expression nodes\n \n    procedure Set_Current_Term\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_Current_Term);\n+   --  Only valid for N_Term nodes\n \n    procedure Set_Next_Term\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_Next_Term);\n+   --  Only valid for N_Term nodes\n \n    procedure Set_First_Expression_In_List\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_First_Expression_In_List);\n+   --  Only valid for N_Literal_String_List nodes\n \n    procedure Set_Package_Node_Of\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_Package_Node_Of);\n-\n-   procedure Set_Source_Index_Of\n-     (Node    : Project_Node_Id;\n-      In_Tree : Project_Node_Tree_Ref;\n-      To      : Int);\n-   pragma Inline (Set_Source_Index_Of);\n+   --  Only valid for N_Variable_Reference or N_Attribute_Reference nodes.\n \n    procedure Set_String_Type_Of\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_String_Type_Of);\n+   --  Only valid for N_Variable_Reference or N_Typed_Variable_Declaration\n+   --  nodes.\n \n    procedure Set_External_Reference_Of\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_External_Reference_Of);\n+   --  Only valid for N_External_Value nodes\n \n    procedure Set_External_Default_Of\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_External_Default_Of);\n+   --  Only valid for N_External_Value nodes\n \n    procedure Set_Case_Variable_Reference_Of\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_Case_Variable_Reference_Of);\n+   --  Only valid for N_Case_Construction nodes\n \n    procedure Set_First_Case_Item_Of\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_First_Case_Item_Of);\n+   --  Only valid for N_Case_Construction nodes\n \n    procedure Set_First_Choice_Of\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_First_Choice_Of);\n+   --  Only valid for N_Case_Item nodes.\n \n    procedure Set_Next_Case_Item\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Project_Node_Id);\n    pragma Inline (Set_Next_Case_Item);\n+   --  Only valid for N_Case_Item nodes.\n \n    procedure Set_Case_Insensitive\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref;\n       To      : Boolean);\n+   --  Only valid for N_Attribute_Declaration and N_Attribute_Reference nodes\n \n    -------------------------------\n    -- Restricted Access Section --"}, {"sha": "a95c7fa7128e94c3e7819b5422de776d990c0e08", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd0d899b57a1c3283bf47e414cad99e0f1bd3a2c/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd0d899b57a1c3283bf47e414cad99e0f1bd3a2c/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=fd0d899b57a1c3283bf47e414cad99e0f1bd3a2c", "patch": "@@ -12418,6 +12418,24 @@ package body Sem_Ch3 is\n          Set_Convention (New_Subp, Convention (Parent_Subp));\n       end if;\n \n+      --  Predefined controlled operations retain their name even if the parent\n+      --  is hidden (see above), but they are not primitive operations if the\n+      --  ancestor is not visible, for example if the parent is a private\n+      --  extension completed with a controlled extension. Note that a full\n+      --  type that is controlled can break privacy: the flag Is_Controlled is\n+      --  set on both views of the type.\n+\n+      if Is_Controlled (Parent_Type)\n+        and then\n+          (Chars (Parent_Subp) = Name_Initialize\n+            or else Chars (Parent_Subp) = Name_Adjust\n+            or else Chars (Parent_Subp) = Name_Finalize)\n+        and then Is_Hidden (Parent_Subp)\n+        and then not Is_Visibly_Controlled (Parent_Type)\n+      then\n+         Set_Is_Hidden (New_Subp);\n+      end if;\n+\n       Set_Is_Imported (New_Subp, Is_Imported (Parent_Subp));\n       Set_Is_Exported (New_Subp, Is_Exported (Parent_Subp));\n "}, {"sha": "c57bb5636569cd9a6ecda16006077018de379ec9", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd0d899b57a1c3283bf47e414cad99e0f1bd3a2c/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd0d899b57a1c3283bf47e414cad99e0f1bd3a2c/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=fd0d899b57a1c3283bf47e414cad99e0f1bd3a2c", "patch": "@@ -4454,7 +4454,9 @@ package body Sem_Ch6 is\n          end;\n       end if;\n \n-      if Present (Overridden_Subp) then\n+      if Present (Overridden_Subp)\n+        and then not Is_Hidden (Overridden_Subp)\n+      then\n          if Must_Not_Override (Spec) then\n             Error_Msg_Sloc := Sloc (Overridden_Subp);\n "}, {"sha": "2ee5a80e5d025ba6da32136959bc15c41bc66912", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd0d899b57a1c3283bf47e414cad99e0f1bd3a2c/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd0d899b57a1c3283bf47e414cad99e0f1bd3a2c/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=fd0d899b57a1c3283bf47e414cad99e0f1bd3a2c", "patch": "@@ -48,7 +48,6 @@ with Sem_Eval; use Sem_Eval;\n with Sem_Type; use Sem_Type;\n with Sem_Util; use Sem_Util;\n with Snames;   use Snames;\n-with Stand;    use Stand;\n with Sinfo;    use Sinfo;\n with Tbuild;   use Tbuild;\n with Uintp;    use Uintp;\n@@ -673,27 +672,6 @@ package body Sem_Disp is\n       Has_Dispatching_Parent : Boolean := False;\n       Body_Is_Last_Primitive : Boolean := False;\n \n-      function Is_Visibly_Controlled (T : Entity_Id) return Boolean;\n-      --  Check whether T is derived from a visibly controlled type.\n-      --  This is true if the root type is declared in Ada.Finalization.\n-      --  If T is derived instead from a private type whose full view\n-      --  is controlled, an explicit Initialize/Adjust/Finalize subprogram\n-      --  does not override the inherited one.\n-\n-      ---------------------------\n-      -- Is_Visibly_Controlled --\n-      ---------------------------\n-\n-      function Is_Visibly_Controlled (T : Entity_Id) return Boolean is\n-         Root : constant Entity_Id := Root_Type (T);\n-      begin\n-         return Chars (Scope (Root)) = Name_Finalization\n-           and then Chars (Scope (Scope (Root))) = Name_Ada\n-           and then Scope (Scope (Scope (Root))) = Standard_Standard;\n-      end Is_Visibly_Controlled;\n-\n-   --  Start of processing for Check_Dispatching_Operation\n-\n    begin\n       if Ekind (Subp) /= E_Procedure and then Ekind (Subp) /= E_Function then\n          return;\n@@ -1030,8 +1008,20 @@ package body Sem_Disp is\n            and then not Is_Visibly_Controlled (Tagged_Type)\n          then\n             Set_Is_Overriding_Operation (Subp, False);\n-            Error_Msg_NE\n-              (\"operation does not override inherited&?\", Subp, Subp);\n+            --  If the subprogram specification carries an overriding\n+            --  indicator, no need for the warning: it is either redundant,\n+            --  or else an error will be reported.\n+\n+            if Nkind (Parent (Subp)) = N_Procedure_Specification\n+              and then\n+                (Must_Override (Parent (Subp))\n+                  or else Must_Not_Override (Parent (Subp)))\n+            then\n+               null;\n+            else\n+               Error_Msg_NE\n+                 (\"operation does not override inherited&?\", Subp, Subp);\n+            end if;\n          else\n             Override_Dispatching_Operation (Tagged_Type, Old_Subp, Subp);\n             Set_Is_Overriding_Operation (Subp);"}, {"sha": "48c7dff93b58631b724c47b7b8e299dbf8696cf1", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd0d899b57a1c3283bf47e414cad99e0f1bd3a2c/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd0d899b57a1c3283bf47e414cad99e0f1bd3a2c/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=fd0d899b57a1c3283bf47e414cad99e0f1bd3a2c", "patch": "@@ -7238,6 +7238,18 @@ package body Sem_Util is\n       end if;\n    end Is_Variable;\n \n+   ---------------------------\n+   -- Is_Visibly_Controlled --\n+   ---------------------------\n+\n+   function Is_Visibly_Controlled (T : Entity_Id) return Boolean is\n+      Root : constant Entity_Id := Root_Type (T);\n+   begin\n+      return Chars (Scope (Root)) = Name_Finalization\n+        and then Chars (Scope (Scope (Root))) = Name_Ada\n+        and then Scope (Scope (Scope (Root))) = Standard_Standard;\n+   end Is_Visibly_Controlled;\n+\n    ------------------------\n    -- Is_Volatile_Object --\n    ------------------------"}, {"sha": "016ff91f52fa40d988da73b8b010873421e13c5c", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd0d899b57a1c3283bf47e414cad99e0f1bd3a2c/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd0d899b57a1c3283bf47e414cad99e0f1bd3a2c/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=fd0d899b57a1c3283bf47e414cad99e0f1bd3a2c", "patch": "@@ -812,6 +812,13 @@ package Sem_Util is\n    --  the point at which Assignment_OK is checked, and True is returned\n    --  for any tree thus marked.\n \n+   function Is_Visibly_Controlled (T : Entity_Id) return Boolean;\n+   --  Check whether T is derived from a visibly controlled type.\n+   --  This is true if the root type is declared in Ada.Finalization.\n+   --  If T is derived instead from a private type whose full view\n+   --  is controlled, an explicit Initialize/Adjust/Finalize subprogram\n+   --  does not override the inherited one.\n+\n    function Is_Volatile_Object (N : Node_Id) return Boolean;\n    --  Determines if the given node denotes an volatile object in the sense\n    --  of the legality checks described in RM C.6(12). Note that the test"}]}