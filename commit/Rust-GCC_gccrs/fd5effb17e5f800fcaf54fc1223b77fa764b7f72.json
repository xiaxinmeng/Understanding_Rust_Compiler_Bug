{"sha": "fd5effb17e5f800fcaf54fc1223b77fa764b7f72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ1ZWZmYjE3ZTVmODAwZmNhZjU0ZmMxMjIzYjc3ZmE3NjRiN2Y3Mg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-09-28T18:02:25Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-09-28T18:02:25Z"}, "message": "Check for overflow in filesystem::last_write_time\n\n\t* include/experimental/bits/fs_fwd.h (file_time_type): Simplify\n\tdefinition.\n\t* src/filesystem/ops.cc (file_time): Take error_code parameter and\n\tcheck for overflow.\n\t(do_copy_file, last_write_time): Pass error_code in file_time calls.\n\t* testsuite/experimental/filesystem/operations/last_write_time.cc:\n\tNew.\n\t* testsuite/util/testsuite_fs.h (scoped_file): Define RAII helper.\n\nFrom-SVN: r240587", "tree": {"sha": "8768b2c522ddcd29a552fd09838f7179502163de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8768b2c522ddcd29a552fd09838f7179502163de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd5effb17e5f800fcaf54fc1223b77fa764b7f72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd5effb17e5f800fcaf54fc1223b77fa764b7f72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd5effb17e5f800fcaf54fc1223b77fa764b7f72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd5effb17e5f800fcaf54fc1223b77fa764b7f72/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93c9b105be716efa6ede687f5bc6af6d5224a0de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93c9b105be716efa6ede687f5bc6af6d5224a0de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93c9b105be716efa6ede687f5bc6af6d5224a0de"}], "stats": {"total": 173, "additions": 159, "deletions": 14}, "files": [{"sha": "3ce95a1c3eaa5c4a20aa0cea3f1c3d406b0aa302", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5effb17e5f800fcaf54fc1223b77fa764b7f72/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5effb17e5f800fcaf54fc1223b77fa764b7f72/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fd5effb17e5f800fcaf54fc1223b77fa764b7f72", "patch": "@@ -1,5 +1,14 @@\n 2016-09-28  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/experimental/bits/fs_fwd.h (file_time_type): Simplify\n+\tdefinition.\n+\t* src/filesystem/ops.cc (file_time): Take error_code parameter and\n+\tcheck for overflow.\n+\t(do_copy_file, last_write_time): Pass error_code in file_time calls.\n+\t* testsuite/experimental/filesystem/operations/last_write_time.cc:\n+\tNew.\n+\t* testsuite/util/testsuite_fs.h (scoped_file): Define RAII helper.\n+\n \tPR libstdc++/77686\n \t* include/std/functional (_Any_data): Add may_alias attribute.\n "}, {"sha": "b9cc041c236b174af1d76253fb3bfa5bb6c684bf", "filename": "libstdc++-v3/include/experimental/bits/fs_fwd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5effb17e5f800fcaf54fc1223b77fa764b7f72/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_fwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5effb17e5f800fcaf54fc1223b77fa764b7f72/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_fwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_fwd.h?ref=fd5effb17e5f800fcaf54fc1223b77fa764b7f72", "patch": "@@ -253,7 +253,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   operator^=(directory_options& __x, directory_options __y) noexcept\n   { return __x = __x ^ __y; }\n \n-  typedef chrono::time_point<chrono::system_clock> file_time_type;\n+  using file_time_type = std::chrono::system_clock::time_point;\n \n   // operational functions\n "}, {"sha": "659cfbb6f811f0d92a8356b7b481017776d5092d", "filename": "libstdc++-v3/src/filesystem/ops.cc", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5effb17e5f800fcaf54fc1223b77fa764b7f72/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5effb17e5f800fcaf54fc1223b77fa764b7f72/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc?ref=fd5effb17e5f800fcaf54fc1223b77fa764b7f72", "patch": "@@ -288,16 +288,24 @@ namespace\n   }\n \n   inline fs::file_time_type\n-  file_time(const stat_type& st) noexcept\n+  file_time(const stat_type& st, std::error_code& ec) noexcept\n   {\n     using namespace std::chrono;\n-    return fs::file_time_type{\n #ifdef _GLIBCXX_USE_ST_MTIM\n-\tseconds{st.st_mtim.tv_sec} + nanoseconds{st.st_mtim.tv_nsec}\n+    time_t s = st.st_mtim.tv_sec;\n+    nanoseconds ns{st.st_mtim.tv_nsec};\n #else\n-\tseconds{st.st_mtime}\n+    time_t s = st.st_mtime;\n+    nanoseconds ns{};\n #endif\n-    };\n+\n+    if (s >= (nanoseconds::max().count() / 1e9))\n+      {\n+\tec = std::make_error_code(std::errc::value_too_large); // EOVERFLOW\n+\treturn fs::file_time_type::min();\n+      }\n+    ec.clear();\n+    return fs::file_time_type{seconds{s} + ns};\n   }\n \n   // Returns true if the file descriptor was successfully closed,\n@@ -373,11 +381,11 @@ namespace\n \t  }\n \telse if (is_set(option, opts::update_existing))\n \t  {\n-\t    if (file_time(*from_st) <= file_time(*to_st))\n-\t      {\n-\t\tec.clear();\n-\t\treturn false;\n-\t      }\n+\t    const auto from_mtime = file_time(*from_st, ec);\n+\t    if (ec)\n+\t      return false;\n+\t    if ((from_mtime <= file_time(*to_st, ec)) || ec)\n+\t      return false;\n \t  }\n \telse if (!is_set(option, opts::overwrite_existing))\n \t  {\n@@ -1036,7 +1044,7 @@ fs::last_write_time(const path& p)\n fs::file_time_type\n fs::last_write_time(const path& p, error_code& ec) noexcept\n {\n-  return do_stat(p, ec, [](const auto& st) { return file_time(st); },\n+  return do_stat(p, ec, [&ec](const auto& st) { return file_time(st, ec); },\n \t\t file_time_type::min());\n }\n "}, {"sha": "b1aea2012e9a0a99aff1856731be06c1c6f02622", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/last_write_time.cc", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5effb17e5f800fcaf54fc1223b77fa764b7f72/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Flast_write_time.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5effb17e5f800fcaf54fc1223b77fa764b7f72/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Flast_write_time.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Flast_write_time.cc?ref=fd5effb17e5f800fcaf54fc1223b77fa764b7f72", "patch": "@@ -0,0 +1,111 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-lstdc++fs\" }\n+// { dg-do run { target c++11 } }\n+// { dg-require-filesystem-ts \"\" }\n+\n+// 15.25 Permissions [fs.op.last_write_time]\n+\n+#include <experimental/filesystem>\n+#include <testsuite_fs.h>\n+#include <testsuite_hooks.h>\n+\n+#ifdef _GLIBCXX_HAVE_FCNTL_H\n+# include <fcntl.h>\n+#endif\n+#if _GLIBCXX_HAVE_UTIME_H\n+# include <utime.h>\n+#endif\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using time_type = std::experimental::filesystem::file_time_type;\n+\n+  auto p = __gnu_test::nonexistent_path();\n+  std::error_code ec;\n+  time_type mtime = last_write_time(p, ec);\n+  VERIFY( ec );\n+  VERIFY( ec == std::make_error_code(std::errc::no_such_file_or_directory) );\n+#if __cpp_exceptions\n+  bool caught = false;\n+  try {\n+    mtime = last_write_time(p);\n+  } catch (std::system_error const& e) {\n+    caught = true;\n+    ec = e.code();\n+  }\n+  VERIFY( caught );\n+  VERIFY( ec );\n+  VERIFY( ec == std::make_error_code(std::errc::no_such_file_or_directory) );\n+#endif\n+\n+  __gnu_test::scoped_file file(p);\n+  VERIFY( exists(p) );\n+  mtime = last_write_time(p, ec);\n+  VERIFY( !ec );\n+  VERIFY( mtime <= time_type::clock::now() );\n+  VERIFY( mtime == last_write_time(p) );\n+\n+  auto end_of_time = time_type::duration::max();\n+  auto last_second\n+    = std::chrono::duration_cast<std::chrono::seconds>(end_of_time).count();\n+  if (last_second > std::numeric_limits<std::time_t>::max())\n+    return; // can't test overflow\n+\n+#if _GLIBCXX_USE_UTIMENSAT\n+  struct ::timespec ts[2];\n+  ts[0].tv_sec = 0;\n+  ts[0].tv_nsec = UTIME_NOW;\n+  ts[1].tv_sec = std::numeric_limits<std::time_t>::max() - 1;\n+  ts[1].tv_nsec = 0;\n+  VERIFY( !::utimensat(AT_FDCWD, p.c_str(), ts, 0) );\n+#elif _GLIBCXX_HAVE_UTIME_H\n+  ::utimbuf times;\n+  times.modtime = std::numeric_limits<std::time_t>::max() - 1;\n+  times.actime = std::numeric_limits<std::time_t>::max() - 1;\n+  VERIFY( !::utime(p.c_str(), &times) );\n+#else\n+  return;\n+#endif\n+\n+  mtime = last_write_time(p, ec);\n+  VERIFY( ec );\n+  VERIFY( ec == std::make_error_code(std::errc::value_too_large) );\n+  VERIFY( mtime == time_type::min() );\n+\n+#if __cpp_exceptions\n+  caught = false;\n+  try {\n+    mtime = last_write_time(p);\n+  } catch (std::system_error const& e) {\n+    caught = true;\n+    ec = e.code();\n+  }\n+  VERIFY( caught );\n+  VERIFY( ec );\n+  VERIFY( ec == std::make_error_code(std::errc::value_too_large) );\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "5b36670ed5285d7e809bce33fb6aedd84ac49970", "filename": "libstdc++-v3/testsuite/util/testsuite_fs.h", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5effb17e5f800fcaf54fc1223b77fa764b7f72/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5effb17e5f800fcaf54fc1223b77fa764b7f72/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h?ref=fd5effb17e5f800fcaf54fc1223b77fa764b7f72", "patch": "@@ -23,7 +23,7 @@\n #define _TESTSUITE_FS_H 1\n \n #include <experimental/filesystem>\n-#include <iostream>\n+#include <fstream>\n #include <string>\n #include <cstdio>\n #include <stdlib.h>\n@@ -40,7 +40,6 @@ namespace __gnu_test\n   compare_paths(const std::experimental::filesystem::path& p1,\n \t\tconst std::experimental::filesystem::path& p2)\n   {\n-    // std::cout << \"Comparing \" << p1 << \" and \" << p2 << std::endl;\n     PATH_CHK( p1, p2, string );\n     PATH_CHK( p1, p2, empty );\n     PATH_CHK( p1, p2, has_root_path );\n@@ -95,5 +94,23 @@ namespace __gnu_test\n     return p;\n   }\n \n+  // RAII helper to remove a file on scope exit.\n+  struct scoped_file\n+  {\n+    using path_type = std::experimental::filesystem::path;\n+\n+    enum adopt_file_t { adopt_file };\n+\n+    explicit\n+    scoped_file(const path_type& p = nonexistent_path()) : path(p)\n+    { std::ofstream{p.native()}; }\n+\n+    scoped_file(path_type p, adopt_file_t) : path(p) { }\n+\n+    ~scoped_file() { remove(path); }\n+\n+    path_type path;\n+  };\n+\n } // namespace __gnu_test\n #endif"}]}