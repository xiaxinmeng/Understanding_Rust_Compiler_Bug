{"sha": "574af2d680da3388a6b26afa549e5306602aa8f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc0YWYyZDY4MGRhMzM4OGE2YjI2YWZhNTQ5ZTUzMDY2MDJhYThmNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2009-01-15T21:22:32Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2009-01-15T21:22:32Z"}, "message": "caller-save.c (add_used_regs_1, [...]): New functions.\n\ngcc/\n\t* caller-save.c (add_used_regs_1, add_used_regs): New functions.\n\t(insert_one_insn): Use them instead of REG_DEAD and REG_INC notes.\n\tAlso use them when walking CALL_INSN_FUNCTION_USAGE.\n\nFrom-SVN: r143409", "tree": {"sha": "56ae7c4deffa5647e73ce01851038e9d0a6deeab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56ae7c4deffa5647e73ce01851038e9d0a6deeab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/574af2d680da3388a6b26afa549e5306602aa8f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/574af2d680da3388a6b26afa549e5306602aa8f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/574af2d680da3388a6b26afa549e5306602aa8f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/574af2d680da3388a6b26afa549e5306602aa8f7/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "adc8a1e3e0e2dc624c5351120dac0b0c3d7c88d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adc8a1e3e0e2dc624c5351120dac0b0c3d7c88d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adc8a1e3e0e2dc624c5351120dac0b0c3d7c88d2"}], "stats": {"total": 95, "additions": 46, "deletions": 49}, "files": [{"sha": "414442626b0dfb45126a3725d439bfa291842d68", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574af2d680da3388a6b26afa549e5306602aa8f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574af2d680da3388a6b26afa549e5306602aa8f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=574af2d680da3388a6b26afa549e5306602aa8f7", "patch": "@@ -1,3 +1,9 @@\n+2009-01-15  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* caller-save.c (add_used_regs_1, add_used_regs): New functions.\n+\t(insert_one_insn): Use them instead of REG_DEAD and REG_INC notes.\n+\tAlso use them when walking CALL_INSN_FUNCTION_USAGE.\n+\n 2009-01-15  H.J. Lu  <hongjiu.lu@intel.com>\n \t    Joey Ye  <joey.ye@intel.com>\n "}, {"sha": "be1718c1db265aa912739414b6b7723618e5c6fc", "filename": "gcc/caller-save.c", "status": "modified", "additions": 40, "deletions": 49, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574af2d680da3388a6b26afa549e5306602aa8f7/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574af2d680da3388a6b26afa549e5306602aa8f7/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=574af2d680da3388a6b26afa549e5306602aa8f7", "patch": "@@ -1179,6 +1179,39 @@ insert_save (struct insn_chain *chain, int before_p, int regno,\n   return numregs - 1;\n }\n \n+/* A for_each_rtx callback used by add_used_regs.  Add the hard-register\n+   equivalent of each REG to regset DATA.  */\n+\n+static int\n+add_used_regs_1 (rtx *loc, void *data)\n+{\n+  int regno, i;\n+  regset live;\n+  rtx x;\n+\n+  x = *loc;\n+  live = (regset) data;\n+  if (REG_P (x))\n+    {\n+      regno = REGNO (x);\n+      if (!HARD_REGISTER_NUM_P (regno))\n+\tregno = reg_renumber[regno];\n+      if (regno >= 0)\n+\tfor (i = hard_regno_nregs[regno][GET_MODE (x)] - 1; i >= 0; i--)\n+\t  SET_REGNO_REG_SET (live, regno + i);\n+    }\n+  return 0;\n+}\n+\n+/* A note_uses callback used by insert_one_insn.  Add the hard-register\n+   equivalent of each REG to regset DATA.  */\n+\n+static void\n+add_used_regs (rtx *loc, void *data)\n+{\n+  for_each_rtx (loc, add_used_regs_1, data);\n+}\n+\n /* Emit a new caller-save insn and set the code.  */\n static struct insn_chain *\n insert_one_insn (struct insn_chain *chain, int before_p, int code, rtx pat)\n@@ -1216,58 +1249,16 @@ insert_one_insn (struct insn_chain *chain, int before_p, int code, rtx pat)\n       /* ??? It would be nice if we could exclude the already / still saved\n \t registers from the live sets.  */\n       COPY_REG_SET (&new_chain->live_throughout, &chain->live_throughout);\n-      /* Registers that die in CHAIN->INSN still live in the new insn.\n-\t Likewise for those which are autoincremented or autodecremented.  */\n-      for (link = REG_NOTES (chain->insn); link; link = XEXP (link, 1))\n-\t{\n-\t  enum reg_note kind = REG_NOTE_KIND (link);\n-\t  if (kind == REG_DEAD || kind == REG_INC)\n-\t    {\n-\t      rtx reg = XEXP (link, 0);\n-\t      int regno, i;\n-\n-\t      gcc_assert (REG_P (reg));\n-\t      regno = REGNO (reg);\n-\t      if (regno >= FIRST_PSEUDO_REGISTER)\n-\t\tregno = reg_renumber[regno];\n-\t      if (regno < 0)\n-\t\tcontinue;\n-\t      for (i = hard_regno_nregs[regno][GET_MODE (reg)] - 1;\n-\t\t   i >= 0; i--)\n-\t\tSET_REGNO_REG_SET (&new_chain->live_throughout, regno + i);\n-\t    }\n-\t}\n-\n+      note_uses (&PATTERN (chain->insn), add_used_regs,\n+\t\t &new_chain->live_throughout);\n       /* If CHAIN->INSN is a call, then the registers which contain\n \t the arguments to the function are live in the new insn.  */\n       if (CALL_P (chain->insn))\n-\t{\n-\t  for (link = CALL_INSN_FUNCTION_USAGE (chain->insn);\n-\t       link != NULL_RTX;\n-\t       link = XEXP (link, 1))\n-\t    {\n-\t      rtx arg = XEXP (link, 0);\n-\n-\t      if (GET_CODE (arg) == USE)\n-\t\t{\n-\t\t  rtx reg = XEXP (arg, 0);\n-\n-\t\t  if (REG_P (reg))\n-\t\t    {\n-\t\t      int i, regno = REGNO (reg);\n-\n-\t\t      /* Registers in CALL_INSN_FUNCTION_USAGE are always\n-\t\t\t hard registers.  */\n-\t\t      gcc_assert (regno < FIRST_PSEUDO_REGISTER);\n-\n-\t\t      for (i = hard_regno_nregs[regno][GET_MODE (reg)] - 1;\n-\t\t\t   i >= 0; i--)\n-\t\t\tSET_REGNO_REG_SET (&new_chain->live_throughout, regno + i);\n-\t\t    }\n-\t\t}\n-\t    }\n-\t  \n-\t}\n+\tfor (link = CALL_INSN_FUNCTION_USAGE (chain->insn);\n+\t     link != NULL_RTX;\n+\t     link = XEXP (link, 1))\n+\t  note_uses (&XEXP (link, 0), add_used_regs,\n+\t\t     &new_chain->live_throughout);\n \n       CLEAR_REG_SET (&new_chain->dead_or_set);\n       if (chain->insn == BB_HEAD (BASIC_BLOCK (chain->block)))"}]}