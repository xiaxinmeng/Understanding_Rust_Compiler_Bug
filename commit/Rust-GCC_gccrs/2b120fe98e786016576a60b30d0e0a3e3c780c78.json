{"sha": "2b120fe98e786016576a60b30d0e0a3e3c780c78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmIxMjBmZTk4ZTc4NjAxNjU3NmE2MGIzMGQwZTBhM2UzYzc4MGM3OA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-14T19:36:31Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-14T19:36:31Z"}, "message": "syscall: Change Dup2 to only return an error.\n\nFrom-SVN: r184222", "tree": {"sha": "d141e2b8f5bbcb23f5f627e341aad3a1edc52b73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d141e2b8f5bbcb23f5f627e341aad3a1edc52b73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b120fe98e786016576a60b30d0e0a3e3c780c78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b120fe98e786016576a60b30d0e0a3e3c780c78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b120fe98e786016576a60b30d0e0a3e3c780c78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b120fe98e786016576a60b30d0e0a3e3c780c78/comments", "author": null, "committer": null, "parents": [{"sha": "4b386d4d6a3aafa96a50990ac36422848eef3219", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b386d4d6a3aafa96a50990ac36422848eef3219", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b386d4d6a3aafa96a50990ac36422848eef3219"}], "stats": {"total": 33, "additions": 15, "deletions": 18}, "files": [{"sha": "68143536182989f136a9f69105b682a2dd660d8a", "filename": "libgo/go/syscall/exec_bsd.go", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b120fe98e786016576a60b30d0e0a3e3c780c78/libgo%2Fgo%2Fsyscall%2Fexec_bsd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b120fe98e786016576a60b30d0e0a3e3c780c78/libgo%2Fgo%2Fsyscall%2Fexec_bsd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fexec_bsd.go?ref=2b120fe98e786016576a60b30d0e0a3e3c780c78", "patch": "@@ -136,9 +136,8 @@ func forkAndExecInChild(argv0 *byte, argv, envv []*byte, chroot, dir *byte, attr\n \t// so that pass 2 won't stomp on an fd it needs later.\n \tnextfd = int(len(fd))\n \tif pipe < nextfd {\n-\t\t_, err2 := Dup2(pipe, nextfd)\n-\t\tif err2 != nil {\n-\t\t\terr1 = err2.(Errno)\n+\t\terr1 = raw_dup2(pipe, nextfd)\n+\t\tif err1 != 0 {\n \t\t\tgoto childerror\n \t\t}\n \t\traw_fcntl(nextfd, F_SETFD, FD_CLOEXEC)\n@@ -147,9 +146,8 @@ func forkAndExecInChild(argv0 *byte, argv, envv []*byte, chroot, dir *byte, attr\n \t}\n \tfor i = 0; i < len(fd); i++ {\n \t\tif fd[i] >= 0 && fd[i] < int(i) {\n-\t\t\t_, err2 := Dup2(fd[i], nextfd)\n-\t\t\tif err2 != nil {\n-\t\t\t\terr1 = err2.(Errno)\n+\t\t\terr1 = raw_dup2(fd[i], nextfd)\n+\t\t\tif err1 != 0 {\n \t\t\t\tgoto childerror\n \t\t\t}\n \t\t\traw_fcntl(nextfd, F_SETFD, FD_CLOEXEC)\n@@ -178,9 +176,8 @@ func forkAndExecInChild(argv0 *byte, argv, envv []*byte, chroot, dir *byte, attr\n \t\t}\n \t\t// The new fd is created NOT close-on-exec,\n \t\t// which is exactly what we want.\n-\t\t_, err2 := Dup2(fd[i], i)\n+\t\terr1 = raw_dup2(fd[i], i)\n \t\tif err1 != 0 {\n-\t\t\terr1 = err2.(Errno)\n \t\t\tgoto childerror\n \t\t}\n \t}"}, {"sha": "cc3cfdb0805c0b2f3c12287415e5508c3500a124", "filename": "libgo/go/syscall/exec_linux.go", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b120fe98e786016576a60b30d0e0a3e3c780c78/libgo%2Fgo%2Fsyscall%2Fexec_linux.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b120fe98e786016576a60b30d0e0a3e3c780c78/libgo%2Fgo%2Fsyscall%2Fexec_linux.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fexec_linux.go?ref=2b120fe98e786016576a60b30d0e0a3e3c780c78", "patch": "@@ -161,9 +161,8 @@ func forkAndExecInChild(argv0 *byte, argv, envv []*byte, chroot, dir *byte, attr\n \t// so that pass 2 won't stomp on an fd it needs later.\n \tnextfd = int(len(fd))\n \tif pipe < nextfd {\n-\t\t_, err2 := Dup2(pipe, nextfd)\n-\t\tif err2 != nil {\n-\t\t\terr1 = err2.(Errno)\n+\t\terr1 = raw_dup2(pipe, nextfd)\n+\t\tif err1 != 0 {\n \t\t\tgoto childerror\n \t\t}\n \t\traw_fcntl(nextfd, F_SETFD, FD_CLOEXEC)\n@@ -172,9 +171,8 @@ func forkAndExecInChild(argv0 *byte, argv, envv []*byte, chroot, dir *byte, attr\n \t}\n \tfor i = 0; i < len(fd); i++ {\n \t\tif fd[i] >= 0 && fd[i] < int(i) {\n-\t\t\t_, err2 := Dup2(fd[i], nextfd)\n-\t\t\tif err2 != nil {\n-\t\t\t\terr1 = err2.(Errno)\n+\t\t\terr1 = raw_dup2(fd[i], nextfd)\n+\t\t\tif err1 != 0 {\n \t\t\t\tgoto childerror\n \t\t\t}\n \t\t\traw_fcntl(nextfd, F_SETFD, FD_CLOEXEC)\n@@ -203,9 +201,8 @@ func forkAndExecInChild(argv0 *byte, argv, envv []*byte, chroot, dir *byte, attr\n \t\t}\n \t\t// The new fd is created NOT close-on-exec,\n \t\t// which is exactly what we want.\n-\t\t_, err2 := Dup2(fd[i], i);\n-\t\tif err2 != nil {\n-\t\t\terr1 = err2.(Errno)\n+\t\terr1 = raw_dup2(fd[i], i)\n+\t\tif err1 != 0 {\n \t\t\tgoto childerror\n \t\t}\n \t}"}, {"sha": "49441f8e1c4116ebe13fc7fd4fd4be5b7664d0cc", "filename": "libgo/go/syscall/exec_unix.go", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b120fe98e786016576a60b30d0e0a3e3c780c78/libgo%2Fgo%2Fsyscall%2Fexec_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b120fe98e786016576a60b30d0e0a3e3c780c78/libgo%2Fgo%2Fsyscall%2Fexec_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fexec_unix.go?ref=2b120fe98e786016576a60b30d0e0a3e3c780c78", "patch": "@@ -47,6 +47,9 @@ import (\n //sysnb\traw_exit(status int)\n //_exit(status int)\n \n+//sysnb raw_dup2(oldfd int, newfd int) (err Errno)\n+//dup2(oldfd int, newfd int) int\n+\n // Note: not raw, returns error rather than Errno.\n //sys\tread(fd int, p *byte, np int) (n int, err error)\n //read(fd int, buf *byte, count Size_t) Ssize_t"}, {"sha": "1226c1cfbd4a547e47fbc48c2fca7b9a636b3cbd", "filename": "libgo/go/syscall/libcall_posix.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b120fe98e786016576a60b30d0e0a3e3c780c78/libgo%2Fgo%2Fsyscall%2Flibcall_posix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b120fe98e786016576a60b30d0e0a3e3c780c78/libgo%2Fgo%2Fsyscall%2Flibcall_posix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_posix.go?ref=2b120fe98e786016576a60b30d0e0a3e3c780c78", "patch": "@@ -178,7 +178,7 @@ func FDZero(set *FdSet) {\n //sysnb\tDup(oldfd int) (fd int, err error)\n //dup(oldfd int) int\n \n-//sysnb\tDup2(oldfd int, newfd int) (fd int, err error)\n+//sysnb\tDup2(oldfd int, newfd int) (err error)\n //dup2(oldfd int, newfd int) int\n \n //sys\tExit(code int)"}]}