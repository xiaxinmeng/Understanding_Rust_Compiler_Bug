{"sha": "17c69eff82d20174099bad6bbd67dbf5e76c39a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdjNjllZmY4MmQyMDE3NDA5OWJhZDZiYmQ2N2RiZjVlNzZjMzlhNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-12-02T16:28:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-12-02T16:28:41Z"}, "message": "re PR target/70322 (STV doesn't optimize andn)\n\n\tPR target/70322\n\t* config/i386/i386.c (dimode_scalar_to_vector_candidate_p): Handle\n\tNOT.\n\t(dimode_scalar_chain::compute_convert_gain): Likewise.\n\t(dimode_scalar_chain::convert_insn): Likewise.\n\t* config/i386/i386.md (*one_cmpldi2_doubleword): New\n\tdefine_insn_and_split.\n\t(one_cmpl<mode>2): Use SWIM1248x iterator instead of SWIM.\n\n\t* gcc.target/i386/pr70322-1.c: New test.\n\t* gcc.target/i386/pr70322-2.c: New test.\n\t* gcc.target/i386/pr70322-3.c: New test.\n\nFrom-SVN: r243195", "tree": {"sha": "ed759c595afb358f1773a94aa24f381bcbbf4098", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed759c595afb358f1773a94aa24f381bcbbf4098"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17c69eff82d20174099bad6bbd67dbf5e76c39a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17c69eff82d20174099bad6bbd67dbf5e76c39a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17c69eff82d20174099bad6bbd67dbf5e76c39a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17c69eff82d20174099bad6bbd67dbf5e76c39a5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eb61d07edaf05f36151bfe4382777eaa79bce4d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb61d07edaf05f36151bfe4382777eaa79bce4d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb61d07edaf05f36151bfe4382777eaa79bce4d9"}], "stats": {"total": 86, "additions": 83, "deletions": 3}, "files": [{"sha": "33fd2ebee06a5d7410650d4879e7178d93a93c7e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c69eff82d20174099bad6bbd67dbf5e76c39a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c69eff82d20174099bad6bbd67dbf5e76c39a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17c69eff82d20174099bad6bbd67dbf5e76c39a5", "patch": "@@ -1,5 +1,14 @@\n 2016-12-02  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/70322\n+\t* config/i386/i386.c (dimode_scalar_to_vector_candidate_p): Handle\n+\tNOT.\n+\t(dimode_scalar_chain::compute_convert_gain): Likewise.\n+\t(dimode_scalar_chain::convert_insn): Likewise.\n+\t* config/i386/i386.md (*one_cmpldi2_doubleword): New\n+\tdefine_insn_and_split.\n+\t(one_cmpl<mode>2): Use SWIM1248x iterator instead of SWIM.\n+\n \tPR target/78614\n \t* rtl.c (copy_rtx): Don't clear used flag here.\n \t(shallow_copy_rtx_stat): Clear used flag here unless code the rtx"}, {"sha": "0bee09b2c60d5bb8042dfe268345a7771343551d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c69eff82d20174099bad6bbd67dbf5e76c39a5/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c69eff82d20174099bad6bbd67dbf5e76c39a5/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=17c69eff82d20174099bad6bbd67dbf5e76c39a5", "patch": "@@ -2826,6 +2826,9 @@ dimode_scalar_to_vector_candidate_p (rtx_insn *insn)\n \treturn false;\n       break;\n \n+    case NOT:\n+      break;\n+\n     case REG:\n       return true;\n \n@@ -2848,7 +2851,8 @@ dimode_scalar_to_vector_candidate_p (rtx_insn *insn)\n \n   if ((GET_MODE (XEXP (src, 0)) != DImode\n        && !CONST_INT_P (XEXP (src, 0)))\n-      || (GET_MODE (XEXP (src, 1)) != DImode\n+      || (GET_CODE (src) != NOT\n+\t  && GET_MODE (XEXP (src, 1)) != DImode\n \t  && !CONST_INT_P (XEXP (src, 1))))\n     return false;\n \n@@ -3415,6 +3419,8 @@ dimode_scalar_chain::compute_convert_gain ()\n \t  if (CONST_INT_P (XEXP (src, 1)))\n \t    gain -= vector_const_cost (XEXP (src, 1));\n \t}\n+      else if (GET_CODE (src) == NOT)\n+\tgain += ix86_cost->add - COSTS_N_INSNS (1);\n       else if (GET_CODE (src) == COMPARE)\n \t{\n \t  /* Assume comparison cost is the same.  */\n@@ -3770,6 +3776,14 @@ dimode_scalar_chain::convert_insn (rtx_insn *insn)\n       PUT_MODE (src, V2DImode);\n       break;\n \n+    case NOT:\n+      src = XEXP (src, 0);\n+      convert_op (&src, insn);\n+      subreg = gen_reg_rtx (V2DImode);\n+      emit_insn_before (gen_move_insn (subreg, CONSTM1_RTX (V2DImode)), insn);\n+      src = gen_rtx_XOR (V2DImode, src, subreg);\n+      break;\n+\n     case MEM:\n       if (!REG_P (dst))\n \tconvert_op (&src, insn);"}, {"sha": "da7cb07a0ef6349842df2c4ae99dc9179667d714", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c69eff82d20174099bad6bbd67dbf5e76c39a5/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c69eff82d20174099bad6bbd67dbf5e76c39a5/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=17c69eff82d20174099bad6bbd67dbf5e76c39a5", "patch": "@@ -9312,9 +9312,22 @@\n \f\n ;; One complement instructions\n \n+(define_insn_and_split \"*one_cmpldi2_doubleword\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(not:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")))]\n+  \"!TARGET_64BIT && TARGET_STV && TARGET_SSE2\n+   && ix86_unary_operator_ok (NOT, DImode, operands)\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0)\n+\t(not:SI (match_dup 1)))\n+   (set (match_dup 2)\n+\t(not:SI (match_dup 3)))]\n+  \"split_double_mode (DImode, &operands[0], 2, &operands[0], &operands[2]);\")\n+\n (define_expand \"one_cmpl<mode>2\"\n-  [(set (match_operand:SWIM 0 \"nonimmediate_operand\")\n-\t(not:SWIM (match_operand:SWIM 1 \"nonimmediate_operand\")))]\n+  [(set (match_operand:SWIM1248x 0 \"nonimmediate_operand\")\n+\t(not:SWIM1248x (match_operand:SWIM1248x 1 \"nonimmediate_operand\")))]\n   \"\"\n   \"ix86_expand_unary_operator (NOT, <MODE>mode, operands); DONE;\")\n "}, {"sha": "3a478b9abed15c62f757a4ef5f2b2f197783c3ea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c69eff82d20174099bad6bbd67dbf5e76c39a5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c69eff82d20174099bad6bbd67dbf5e76c39a5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=17c69eff82d20174099bad6bbd67dbf5e76c39a5", "patch": "@@ -1,3 +1,10 @@\n+2016-12-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/70322\n+\t* gcc.target/i386/pr70322-1.c: New test.\n+\t* gcc.target/i386/pr70322-2.c: New test.\n+\t* gcc.target/i386/pr70322-3.c: New test.\n+\n 2016-12-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \t    Thomas Preud'homme  <thomas.preudhomme@arm.com>\n "}, {"sha": "bc10675b7da4ddf6126bbbc60598f9307235a362", "filename": "gcc/testsuite/gcc.target/i386/pr70322-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c69eff82d20174099bad6bbd67dbf5e76c39a5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70322-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c69eff82d20174099bad6bbd67dbf5e76c39a5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70322-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70322-1.c?ref=17c69eff82d20174099bad6bbd67dbf5e76c39a5", "patch": "@@ -0,0 +1,12 @@\n+/* PR target/70322 */\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -msse2 -mstv -mbmi\" } */\n+/* { dg-final { scan-assembler \"pandn\" } } */\n+\n+extern long long z;\n+\n+void\n+foo (long long x, long long y)\n+{\n+  z = ~x & y;\n+}"}, {"sha": "7c5d0be1e310697755ea7535b889d20f05257858", "filename": "gcc/testsuite/gcc.target/i386/pr70322-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c69eff82d20174099bad6bbd67dbf5e76c39a5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70322-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c69eff82d20174099bad6bbd67dbf5e76c39a5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70322-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70322-2.c?ref=17c69eff82d20174099bad6bbd67dbf5e76c39a5", "patch": "@@ -0,0 +1,12 @@\n+/* PR target/70322 */\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -msse2 -mstv -mno-bmi\" } */\n+/* { dg-final { scan-assembler \"pandn\" { xfail *-*-* } } } */\n+\n+extern long long z;\n+\n+void\n+foo (long long x, long long y)\n+{\n+  z = ~x & y;\n+}"}, {"sha": "89a8da3d72f590a3d8cc382dc51116506402bac3", "filename": "gcc/testsuite/gcc.target/i386/pr70322-3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c69eff82d20174099bad6bbd67dbf5e76c39a5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70322-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c69eff82d20174099bad6bbd67dbf5e76c39a5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70322-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70322-3.c?ref=17c69eff82d20174099bad6bbd67dbf5e76c39a5", "patch": "@@ -0,0 +1,13 @@\n+/* PR target/70322 */\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -msse2 -mstv\" } */\n+/* { dg-final { scan-assembler \"pxor\" } } */\n+/* { dg-final { scan-assembler \"por\" } } */\n+\n+extern long long z;\n+\n+void\n+foo (long long x, long long y)\n+{\n+  z = ~x | y;\n+}"}]}