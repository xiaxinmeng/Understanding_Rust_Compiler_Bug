{"sha": "0a6409d6b954754e651f80ff10d986eb8ce8b89f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE2NDA5ZDZiOTU0NzU0ZTY1MWY4MGZmMTBkOTg2ZWI4Y2U4Yjg5Zg==", "commit": {"author": {"name": "Andrew Pinski", "email": "andrew_pinski@playstation.sony.com", "date": "2007-08-30T18:28:13Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2007-08-30T18:28:13Z"}, "message": "ppu_intrinsics.h: New file.\n\n2007-08-30  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        * config/rs6000/ppu_intrinsics.h: New file.\n        * config.gcc (powerpc*-*-* <extra_headers>): Install\n        ppu_intrinsics.h.\n\n2007-08-30  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        * gcc.target/powerpc/ppu-intrinsics.c: New testcase.\n\nFrom-SVN: r127934", "tree": {"sha": "791dc3460986314bfaafdd9bb84fcead30519221", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/791dc3460986314bfaafdd9bb84fcead30519221"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a6409d6b954754e651f80ff10d986eb8ce8b89f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a6409d6b954754e651f80ff10d986eb8ce8b89f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a6409d6b954754e651f80ff10d986eb8ce8b89f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a6409d6b954754e651f80ff10d986eb8ce8b89f/comments", "author": null, "committer": null, "parents": [{"sha": "67c02083392f5ea66eebce131ebcc65c5e97d970", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67c02083392f5ea66eebce131ebcc65c5e97d970", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67c02083392f5ea66eebce131ebcc65c5e97d970"}], "stats": {"total": 777, "additions": 776, "deletions": 1}, "files": [{"sha": "2a6d0393e2ef35fe13eb1c51a561348fd663d1f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6409d6b954754e651f80ff10d986eb8ce8b89f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6409d6b954754e651f80ff10d986eb8ce8b89f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a6409d6b954754e651f80ff10d986eb8ce8b89f", "patch": "@@ -1,3 +1,9 @@\n+2007-08-30  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\t* config/rs6000/ppu_intrinsics.h: New file.\n+\t* config.gcc (powerpc*-*-* <extra_headers>): Install\n+\tppu_intrinsics.h.\n+\n 2007-08-30  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n \t* cfg.c (dump_flow_info): Change to also print entry and exit"}, {"sha": "6665eb70370f66565a5e24ab3b2aa332f66825af", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6409d6b954754e651f80ff10d986eb8ce8b89f/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6409d6b954754e651f80ff10d986eb8ce8b89f/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=0a6409d6b954754e651f80ff10d986eb8ce8b89f", "patch": "@@ -312,7 +312,7 @@ mips*-*-*)\n \t;;\n powerpc*-*-*)\n \tcpu_type=rs6000\n-\textra_headers=\"ppc-asm.h altivec.h spe.h\"\n+\textra_headers=\"ppc-asm.h altivec.h spe.h ppu_intrinsics.h\"\n \tneed_64bit_hwint=yes\n \tcase x$with_cpu in\n \t    xpowerpc64|xdefault64|x6[23]0|x970|xG5|xpower[3456]|xpower6x|xrs64a)"}, {"sha": "742c5da134a4bf1b2261bde4cbbc8cb77efbf4c2", "filename": "gcc/config/rs6000/ppu_intrinsics.h", "status": "added", "additions": 729, "deletions": 0, "changes": 729, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6409d6b954754e651f80ff10d986eb8ce8b89f/gcc%2Fconfig%2Frs6000%2Fppu_intrinsics.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6409d6b954754e651f80ff10d986eb8ce8b89f/gcc%2Fconfig%2Frs6000%2Fppu_intrinsics.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fppu_intrinsics.h?ref=0a6409d6b954754e651f80ff10d986eb8ce8b89f", "patch": "@@ -0,0 +1,729 @@\n+/* PPU intrinsics as defined by the C/C++ Language extension for Cell BEA.\n+   Copyright (C) 2007 Free Software Foundation, Inc.\n+\n+   This file is free software; you can redistribute it and/or modify it under\n+   the terms of the GNU General Public License as published by the Free\n+   Software Foundation; either version 2 of the License, or (at your option)\n+   any later version.\n+\n+   This file is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+   for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this file; see the file COPYING.  If not, write to the Free\n+   Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n+   02110-1301, USA.  */\n+\n+/* As a special exception, if you include this header file into source files\n+   compiled by GCC, this header file does not by itself cause  the resulting\n+   executable to be covered by the GNU General Public License.  This exception\n+   does not however invalidate any other reasons why the executable file might\n+   be covered by the GNU General Public License.  */\n+\n+/*  TODO:\n+    misc ops (traps)\n+    supervisor/hypervisor mode ops.  */\n+\n+#ifndef  _PPU_INTRINSICS_H\n+#define _PPU_INTRINSICS_H\n+\n+#if !defined(__PPU__) && !defined(__ppc__) && !defined(__ppc64__) \\\n+    && !defined(__GNUC__)\n+  #error ppu_intrinsics.h included on wrong platform/compiler\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif \n+\n+/*\n+ * unsigned int __cntlzw(unsigned int)\n+ * unsigned int __cntlzd(unsigned long long)\n+ * int __mulhw(int, int)\n+ * unsigned int __mulhwu(unsigned int, unsigned int)\n+ * long long __mulhd(long long, long long)\n+ * unsigned long long __mulhdu(unsigned long long, unsigned long long)\n+ *\n+ * void __sync(void)\n+ * void __isync(void)\n+ * void __lwsync(void)\n+ * void __eieio(void)\n+ *\n+ * void __nop(void)\n+ * void __cctpl(void)\n+ * void __cctpm(void)\n+ * void __cctph(void)\n+ * void __db8cyc(void)\n+ * void __db10cyc(void)\n+ * void __db12cyc(void)\n+ * void __db16cyc(void)\n+ *\n+ * void __mtspr(unsigned int spr, unsigned long long value)\n+ * unsigned long long __mfspr(unsigned int spr)\n+ * unsigned long long __mftb(void)\n+ *\n+ * void __icbi(void *base)\n+ * void __dcbi(void *base)\n+ *\n+ * void __dcbf(void *base)\n+ * void __dcbz(void *base)\n+ * void __dcbst(void *base)\n+ * void __dcbtst(void *base)\n+ * void __dcbt(void *base)\n+ * void __dcbt_TH1000(void *EATRUNC, bool D, bool UG, int ID)\n+ * void __dcbt_TH1010(bool GO, int S, int UNITCNT, bool T, bool U, int ID)\n+ *\n+ * unsigned __lwarx(void *base)\n+ * unsigned long long __ldarx(void *base)\n+ * bool __stwcx(void *base, unsigned value)\n+ * bool __stdcx(void *base, unsigned long long value)\n+ *\n+ * unsigned short __lhbrx(void *base)\n+ * unsigned int __lwbrx(void *base)\n+ * unsigned long long __ldbrx(void *base)\n+ * void __sthbrx(void *base, unsigned short value)\n+ * void __stwbrx(void *base, unsigned int value)\n+ * void __stdbrx(void *base, unsigned long long value)\n+ *\n+ * double __fabs(double x)\n+ * float __fabsf(float x)\n+ * double __fnabs(double x)\n+ * float __fnabsf(float x)\n+ * double __fmadd(double x, double y, double z)\n+ * double __fmsub(double x, double y, double z)\n+ * double __fnmadd(double x, double y, double z)\n+ * double __fnmsub(double x, double y, double z)\n+ * float __fmadds(float x, float y, float z)\n+ * float __fmsubs(float x, float y, float z)\n+ * float __fnmadds(float x, float y, float z)\n+ * float __fnmsubs(float x, float y, float z)\n+ * double __fsel(double x, double y, double z)\n+ * float __fsels(float x, float y, float z)\n+ * double __frsqrte(double x)\n+ * float __fres(float x)\n+ * double __fsqrt(double x)\n+ * float __fsqrts(float x)\n+ * long long __fctid(double x)\n+ * long long __fctiw(double x)\n+ * double __fcfid(long long x)\n+ * double __mffs(void)\n+ * void __mtfsf(int mask, double value)\n+ * void __mtfsfi(int bits, int field)\n+ * void __mtfsb0(int)\n+ * void __mtfsb1(int)\n+ * double __setflm(double)\n+ *\n+ * dcbt intrinsics \n+ * void __protected_unlimited_stream_set (unsigned int direction, const void *add, unsigned int ID)\n+ * void __protected_stream_set (unsigned int direction, const void *add, unsigned int ID)\n+ * void __protected_stream_stop_all (void)\n+ * void __protected_stream_stop (unsigned int ID)\n+ * void __protected_stream_count (unsigned int unit_cnt, unsigned int ID)\n+ * void __protected_stream_go (void)\n+ */\n+\n+typedef int __V4SI __attribute__((vector_size(16)));\n+\n+#define __cntlzw(v) __builtin_clz(v)\n+#define __cntlzd(v) __builtin_clzll(v)\n+\n+#define __mulhw(a,b) __extension__ \\\n+  ({int result;\t\t\t   \\\n+  __asm__ (\"mulhw %0,%1,%2\"\t   \\\n+\t   : \"=r\" (result)\t   \\\n+\t   : \"r\" ((int) (a)),\t   \\\n+\t     \"r\" ((int) (b)));\t   \\\n+  result; })\n+\n+#define __mulhwu(a,b) __extension__\t\\\n+  ({unsigned int result;\t\t\\\n+  __asm__ (\"mulhwu %0,%1,%2\"\t\t\\\n+\t   : \"=r\" (result)\t\t\\\n+\t   : \"r\" ((unsigned int) (a)),\t\\\n+\t     \"r\" ((unsigned int) (b))); \\\n+  result; })\n+\n+#ifdef __powerpc64__\n+#define __mulhd(a,b) __extension__   \\\n+  ({ long long result;\t\t     \\\n+  __asm__ (\"mulhd %0,%1,%2\"\t     \\\n+\t   : \"=r\" (result)\t     \\\n+\t   : \"r\" ((long long) (a)),  \\\n+\t     \"r\" ((long long) (b))); \\\n+  result; })\n+\n+#define __mulhdu(a,b) __extension__\t      \\\n+  ({unsigned long long result;\t\t      \\\n+  __asm__ (\"mulhdu %0,%1,%2\"\t\t      \\\n+\t   : \"=r\" (result)\t\t      \\\n+\t   : \"r\" ((unsigned long long) (a)),  \\\n+\t     \"r\" ((unsigned long long) (b))); \\\n+  result; })\n+#endif /* __powerpc64__ */\n+\n+#define __sync() __asm__ volatile (\"sync\" : : : \"memory\")\n+#define __isync() __asm__ volatile (\"isync\" : : : \"memory\")\n+#define __lwsync() __asm__ volatile (\"lwsync\" : : : \"memory\")\n+#define __eieio() __asm__ volatile (\"eieio\" : : : \"memory\")\n+\n+#define __nop() __asm__ volatile (\"ori 0,0,0\" : : : \"memory\")\n+#define __cctpl() __asm__ volatile (\"or 1,1,1\" : : : \"memory\")\n+#define __cctpm() __asm__ volatile (\"or 2,2,2\" : : : \"memory\")\n+#define __cctph() __asm__ volatile (\"or 3,3,3\" : : : \"memory\")\n+#define __db8cyc() __asm__ volatile (\"or 28,28,28\" : : : \"memory\")\n+#define __db10cyc() __asm__ volatile (\"or 29,29,29\" : : : \"memory\")\n+#define __db12cyc() __asm__ volatile (\"or 30,30,30\" : : : \"memory\")\n+#define __db16cyc() __asm__ volatile (\"or 31,31,31\" : : : \"memory\")\n+\n+#ifdef __powerpc64__\n+#define __mtspr(spr, value) \\\n+  __asm__ volatile (\"mtspr %0,%1\" : : \"n\" (spr), \"r\" (value))\n+  \n+#define __mfspr(spr) __extension__\t\t\t\t\\\n+  ({ unsigned long long result;\t\t\t\t\t\\\n+  __asm__ volatile (\"mfspr %0,%1\" : \"=r\" (result) : \"n\" (spr)); \\\n+  result; })\n+#endif /* __powerpc64__ */\n+\n+#ifdef __powerpc64__\n+/* Work around the hadware bug in the current Cell implemention.  */\n+#define __mftb() __extension__\t\t\t\t\t\\\n+  ({ unsigned long long result;\t\t\t\t\t\\\n+  __asm__ volatile (\"1: mftb %[current_tb]\\n\"\t\t\t\\\n+      \"\\tcmpwi 7, %[current_tb], 0\\n\"\t\t\t\t\\\n+      \"\\tbeq-  7, 1b\"\t\t\t\t\t\t\\\n+      : [current_tb] \"=r\" (result):\t\t\t\t\\\n+      :\"cr7\");\t\t\t\t\t\t\t\\\n+  result; })\n+#else\n+#define __mftb() __extension__\t\t\t\\\n+  ({ unsigned long long result;\t\t\t\\\n+  unsigned long t;\t\t\t\t\\\n+  __asm__ volatile (\"1:\\n\"\t\t\t\\\n+\t\t    \"\\tmftbu %0\\n\"\t\t\\\n+\t\t    \"\\tmftb %L0\\n\"\t\t\\\n+\t\t    \"\\tmftbu %1\\n\"\t\t\\\n+\t\t    \"\\tcmpw %0,%1\\n\"\t\t\\\n+\t\t    \"\\tbne 1b\"\t\t\t\\\n+\t\t    : \"=r\" (result), \"=r\" (t));\t\\\n+  result; })\n+#endif /* __powerpc64__ */\n+\n+#define __dcbf(base) \\\n+  __asm__ volatile (\"dcbf %y0\" : \"=Z\" (*(__V4SI*) (base)) : : \"memory\")\n+  \n+#define __dcbz(base) \\\n+  __asm__ volatile (\"dcbz %y0\" : \"=Z\" (*(__V4SI*) (base)) : : \"memory\")\n+\n+#define __dcbst(base) \\\n+  __asm__ volatile (\"dcbst %y0\" : \"=Z\" (*(__V4SI*) (base)) : : \"memory\")\n+\n+#define __dcbtst(base) \\\n+  __asm__ volatile (\"dcbtst %y0\" : \"=Z\" (*(__V4SI*) (base)) : : \"memory\")\n+\n+#define __dcbt(base) \\\n+  __asm__ volatile (\"dcbt %y0\" : \"=Z\" (*(__V4SI*) (base)) : : \"memory\")\n+\n+#define __icbi(base) \\\n+  __asm__ volatile (\"icbi %y0\" : \"=Z\" (*(__V4SI*) (base)) : : \"memory\")\n+  \n+#define __dcbt_TH1000(EATRUNC, D, UG, ID)\t\t\t\t\\\n+  __asm__ volatile (\"dcbt %y0,8\"\t\t\t\t\t\\\n+\t   : \"=Z\" (*(__V4SI*) (__SIZE_TYPE__)((((__SIZE_TYPE__) (EATRUNC)) & ~0x7F)\t\\\n+\t   \t\t       | ((((D) & 1) << 6)\t\t\t\\\n+\t   \t\t       | (((UG) & 1) << 5)\t\t\t\\\n+\t   \t\t       | ((ID) & 0xF)))) : : \"memory\")\n+\n+#define __dcbt_TH1010(GO, S, UNITCNT, T, U, ID)\t\t\t     \\\n+  __asm__ volatile (\"dcbt %y0,10\"\t\t\t\t     \\\n+\t   : \"=Z\" (*(__V4SI*) (__SIZE_TYPE__)((((__SIZE_TYPE__) (GO) & 1) << 31) \\\n+\t   \t\t       | (((S) & 0x3) << 29)\t\t     \\\n+\t   \t\t       | (((UNITCNT) & 0x3FF) << 7)\t     \\\n+\t   \t\t       | (((T) & 1) << 6)\t\t\t     \\\n+\t   \t\t       | (((U) & 1) << 5)\t\t\t     \\\n+\t   \t\t       | ((ID) & 0xF))) : : \"memory\")\n+\n+#define __protected_unlimited_stream_set(DIRECTION, ADDR, ID)\t\\\n+\t__dcbt_TH1000 ((ADDR), (DIRECTION)>>1, 0, (ID))\n+\n+#define __protected_stream_set(DIRECTION, ADDR, ID)\t\\\n+\t__dcbt_TH1000 ((ADDR), (DIRECTION)>>1, 1, (ID))\n+\n+#define __protected_stream_stop_all()\t\t\t\\\n+\t__dcbt_TH1010 (0, 3, 0, 0, 0, 0)\n+\n+#define __protected_stream_stop(ID)\t\t\t\\\n+\t__dcbt_TH1010 (0, 2, 0, 0, 0, (ID))\n+\n+#define __protected_stream_count(CNT, ID)\t\t\\\n+\t__dcbt_TH1010 (0, 0, (CNT), 0, 0, (ID))\n+\n+#define __protected_stream_go()\t\t\t\t\\\n+\t__dcbt_TH1010 (1, 0, 0, 0, 0, 0)\n+\n+#define __lhbrx(base) __extension__\t\t\\\n+  ({unsigned short result;\t       \t\t\\\n+    typedef  struct {char a[2];} halfwordsize;\t\\\n+    halfwordsize *ptrp = (halfwordsize*)(void*)(base);\t\\\n+  __asm__ (\"lhbrx %0,%y1\"\t\t\t\\\n+\t   : \"=r\" (result)\t\t\t\\\n+\t   : \"Z\" (*ptrp));\t\t\t\\\n+  result; })\n+\n+#define __lwbrx(base) __extension__\t\t\\\n+  ({unsigned int result;\t       \t\t\\\n+    typedef  struct {char a[4];} wordsize;\t\\\n+    wordsize *ptrp = (wordsize*)(void*)(base);\t\t\\\n+  __asm__ (\"lwbrx %0,%y1\"\t\t\t\\\n+\t   : \"=r\" (result)\t\t\t\\\n+\t   : \"Z\" (*ptrp));\t\t\t\\\n+  result; })\n+\n+\n+#ifdef __powerpc64__\n+#define __ldbrx(base) __extension__\t\t\t\\\n+  ({unsigned long long result;\t       \t\t\t\\\n+    typedef  struct {char a[8];} doublewordsize;\t\\\n+    doublewordsize *ptrp = (doublewordsize*)(void*)(base);\t\\\n+  __asm__ (\"ldbrx %0,%y1\"\t\t\t\t\\\n+\t   : \"=r\" (result)\t\t\t\t\\\n+\t   : \"Z\" (*ptrp));\t\t\t\t\\\n+  result; })\n+#else\n+#define __ldbrx(base) __extension__\t\t\t\\\n+  ({unsigned long long result;\t       \t\t\t\\\n+    typedef  struct {char a[8];} doublewordsize;\t\\\n+    doublewordsize *ptrp = (doublewordsize*)(void*)(base);\t\\\n+  __asm__ (\"lwbrx %L0,%y1\\n\"\t\t\t\t\\\n+\t   \"\\tlwbrx %0,%y2\"\t\t\t\t\\\n+\t   : \"=&r\" (result)\t\t\t\t\\\n+\t   : \"Z\" (*ptrp), \"Z\" (*((char *) ptrp + 4)));\t\\\n+  result; })\n+#endif /* __powerpc64__ */\n+\n+\n+#define __sthbrx(base, value) do {\t\t\t\\\n+    typedef  struct {char a[2];} halfwordsize;\t\t\\\n+    halfwordsize *ptrp = (halfwordsize*)(void*)(base);\t\t\\\n+    __asm__ (\"sthbrx %1,%y0\"\t\t\t\t\\\n+\t   : \"=Z\" (*ptrp)\t\t\t\t\\\n+\t   : \"r\" (value));\t\t\t\t\\\n+   } while (0)\n+\n+#define __stwbrx(base, value) do {\t\t\\\n+    typedef  struct {char a[4];} wordsize;\t\\\n+    wordsize *ptrp = (wordsize*)(void*)(base);\t\t\\\n+    __asm__ (\"stwbrx %1,%y0\"\t\t\t\\\n+\t   : \"=Z\" (*ptrp)\t\t\t\\\n+\t   : \"r\" (value));\t\t\t\\\n+   } while (0)\n+\n+#ifdef __powerpc64__\n+#define __stdbrx(base, value) do {\t\t\t\\\n+    typedef  struct {char a[8];} doublewordsize;\t\\\n+    doublewordsize *ptrp = (doublewordsize*)(void*)(base);\t\\\n+    __asm__ (\"stdbrx %1,%y0\"\t\t\t\t\\\n+\t   : \"=Z\" (*ptrp)\t\t\t\t\\\n+\t   : \"r\" (value));\t\t\t\t\\\n+   } while (0)\n+#else\n+#define __stdbrx(base, value) do {\t\t\t\\\n+    typedef  struct {char a[8];} doublewordsize;\t\\\n+    doublewordsize *ptrp = (doublewordsize*)(void*)(base);\t\\\n+    __asm__ (\"stwbrx %L2,%y0\\n\"\t\t\t\t\\\n+\t     \"\\tstwbrx %2,%y1\"\t\t\t\t\\\n+\t   : \"=Z\" (*ptrp), \"=Z\" (*((char *) ptrp + 4))\t\\\n+\t   : \"r\" (value));\t\t\t\t\\\n+   } while (0)\n+#endif /* __powerpc64__ */\n+\n+\n+#define __lwarx(base) __extension__\t\t\\\n+  ({unsigned int result;\t       \t\t\\\n+    typedef  struct {char a[4];} wordsize;\t\\\n+    wordsize *ptrp = (wordsize*)(void*)(base);\t\\\n+  __asm__ volatile (\"lwarx %0,%y1\"\t\t\\\n+\t   : \"=r\" (result)\t\t\t\\\n+\t   : \"Z\" (*ptrp));\t\t\t\\\n+  result; })\n+\n+#ifdef __powerpc64__\n+#define __ldarx(base) __extension__\t\t\t\\\n+  ({unsigned long long result;\t       \t\t\t\\\n+    typedef  struct {char a[8];} doublewordsize;\t\\\n+    doublewordsize *ptrp = (doublewordsize*)(void*)(base);\t\\\n+  __asm__ volatile (\"ldarx %0,%y1\"\t\t\t\\\n+\t   : \"=r\" (result)\t\t\t\t\\\n+\t   : \"m\" (*ptrp));\t\t\t\t\\\n+  result; })\n+#endif /* __powerpc64__ */\n+\n+#define __stwcx(base, value) __extension__\t\\\n+  ({unsigned int result;\t\t\t\\\n+    typedef  struct {char a[4];} wordsize;\t\\\n+    wordsize *ptrp = (wordsize*)(void*)(base);\t\\\n+  __asm__ volatile (\"stwcx. %2,%y1\\n\"\t\t\\\n+\t   \"\\tmfocrf %0,0x80\"\t\t\t\\\n+\t   : \"=r\" (result),\t\t\t\\\n+\t     \"=Z\" (*ptrp)\t\t\t\\\n+\t   : \"r\" (value) : \"cr0\");\t\t\\\n+  (result & 0x20000000); })\n+\n+\n+#ifdef __powerpc64__\n+#define __stdcx(base, value) __extension__\t\t\\\n+  ({unsigned long long result;\t\t\t\t\\\n+    typedef  struct {char a[8];} doublewordsize;\t\\\n+    doublewordsize *ptrp = (doublewordsize*)(void*)(base);\t\\\n+  __asm__ (\"stdcx. %2,%y1\\n\"\t\t\t\t\\\n+\t   \"\\tmfocrf %0,0x80\"\t\t\t\t\\\n+\t   : \"=r\" (result),\t\t\t\t\\\n+\t     \"=Z\" (*ptrp)\t\t\t\t\\\n+\t   : \"r\" (value) : \"cr0\");\t\t\t\\\n+  (result & 0x20000000); })\n+#endif /* __powerpc64__ */\n+\n+#define __mffs() __extension__\t\t\t\\\n+  ({double result;\t\t\t\t\\\n+  __asm__ volatile (\"mffs %0\" : \"=f\" (result)); \\\n+  result; })\n+\n+#define __mtfsf(mask,value) \\\n+  __asm__ volatile (\"mtfsf %0,%1\" : : \"n\" (mask), \"f\" ((double) (value)))\n+  \n+#define __mtfsfi(bits,field) \\\n+  __asm__ volatile (\"mtfsfi %0,%1\" : : \"n\" (bits), \"n\" (field))\n+\n+#define __mtfsb0(bit) __asm__ volatile (\"mtfsb0 %0\" : : \"n\" (bit))\n+#define __mtfsb1(bit) __asm__ volatile (\"mtfsb1 %0\" : : \"n\" (bit))\n+\n+#define __setflm(v) __extension__\t      \\\n+  ({double result;\t\t\t      \\\n+  __asm__ volatile (\"mffs %0\\n\\tmtfsf 255,%1\" \\\n+\t\t    : \"=&f\" (result)\t      \\\n+\t\t    : \"f\" ((double) (v)));    \\\n+  result; })\n+\n+/* __builtin_fabs may perform unnecessary rounding.  */\n+\n+/* Rename __fabs and __fabsf to work around internal prototypes defined \n+   in bits/mathcalls.h with some glibc versions.  */ \n+#define __fabs __ppu_fabs \n+#define __fabsf __ppu_fabsf \n+\n+static __inline__ double __fabs(double x) __attribute__((always_inline));\n+static __inline__ double\n+__fabs(double x)\n+{\n+  double r;\n+  __asm__(\"fabs %0,%1\" : \"=f\"(r) : \"f\"(x));\n+  return r;\n+}\n+\n+static __inline__ float __fabsf(float x) __attribute__((always_inline));\n+static __inline__ float\n+__fabsf(float x)\n+{\n+  float r;\n+  __asm__(\"fabs %0,%1\" : \"=f\"(r) : \"f\"(x));\n+  return r;\n+}\n+\n+static __inline__ double __fnabs(double x) __attribute__((always_inline));\n+static __inline__ double\n+__fnabs(double x)\n+{\n+  double r;\n+  __asm__(\"fnabs %0,%1\" : \"=f\"(r) : \"f\"(x));\n+  return r;\n+}\n+\n+static __inline__ float __fnabsf(float x) __attribute__((always_inline));\n+static __inline__ float\n+__fnabsf(float x)\n+{\n+  float r;\n+  __asm__(\"fnabs %0,%1\" : \"=f\"(r) : \"f\"(x));\n+  return r;\n+}\n+\n+static __inline__ double __fmadd(double x, double y, double z)\n+  __attribute__((always_inline));\n+static __inline__ double\n+__fmadd(double x, double y, double z)\n+{\n+  double r;\n+  __asm__(\"fmadd %0,%1,%2,%3\" : \"=f\"(r) : \"f\"(x),\"f\"(y),\"f\"(z));\n+  return r;\n+}\n+\n+static __inline__ double __fmsub(double x, double y, double z)\n+  __attribute__((always_inline));\n+static __inline__ double\n+__fmsub(double x, double y, double z)\n+{\n+  double r;\n+  __asm__(\"fmsub %0,%1,%2,%3\" : \"=f\"(r) : \"f\"(x),\"f\"(y),\"f\"(z));\n+  return r;\n+}\n+\n+static __inline__ double __fnmadd(double x, double y, double z)\n+  __attribute__((always_inline));\n+static __inline__ double\n+__fnmadd(double x, double y, double z)\n+{\n+  double r;\n+  __asm__(\"fnmadd %0,%1,%2,%3\" : \"=f\"(r) : \"f\"(x),\"f\"(y),\"f\"(z));\n+  return r;\n+}\n+\n+static __inline__ double __fnmsub(double x, double y, double z)\n+  __attribute__((always_inline));\n+static __inline__ double\n+__fnmsub(double x, double y, double z)\n+{\n+  double r;\n+  __asm__(\"fnmsub %0,%1,%2,%3\" : \"=f\"(r) : \"f\"(x),\"f\"(y),\"f\"(z));\n+  return r;\n+}\n+\n+static __inline__ float __fmadds(float x, float y, float z)\n+  __attribute__((always_inline));\n+static __inline__ float\n+__fmadds(float x, float y, float z)\n+{\n+  float r;\n+  __asm__(\"fmadds %0,%1,%2,%3\" : \"=f\"(r) : \"f\"(x),\"f\"(y),\"f\"(z));\n+  return r;\n+}\n+\n+static __inline__ float __fmsubs(float x, float y, float z)\n+  __attribute__((always_inline));\n+static __inline__ float\n+__fmsubs(float x, float y, float z)\n+{\n+  float r;\n+  __asm__(\"fmsubs %0,%1,%2,%3\" : \"=f\"(r) : \"f\"(x),\"f\"(y),\"f\"(z));\n+  return r;\n+}\n+\n+static __inline__ float __fnmadds(float x, float y, float z)\n+  __attribute__((always_inline));\n+static __inline__ float\n+__fnmadds(float x, float y, float z)\n+{\n+  float r;\n+  __asm__(\"fnmadds %0,%1,%2,%3\" : \"=f\"(r) : \"f\"(x),\"f\"(y),\"f\"(z));\n+  return r;\n+}\n+\n+static __inline__ float __fnmsubs(float x, float y, float z)\n+  __attribute__((always_inline));\n+static __inline__ float\n+__fnmsubs(float x, float y, float z)\n+{\n+  float r;\n+  __asm__(\"fnmsubs %0,%1,%2,%3\" : \"=f\"(r) : \"f\"(x),\"f\"(y),\"f\"(z));\n+  return r;\n+}\n+\n+static __inline__ double __fsel(double x, double y, double z)\n+  __attribute__((always_inline));\n+static __inline__ double\n+__fsel(double x, double y, double z)\n+{\n+  double r;\n+  __asm__(\"fsel %0,%1,%2,%3\" : \"=f\"(r) : \"f\"(x),\"f\"(y),\"f\"(z));\n+  return r;\n+}\n+\n+static __inline__ float __fsels(float x, float y, float z)\n+  __attribute__((always_inline));\n+static __inline__ float\n+__fsels(float x, float y, float z)\n+{\n+  float r;\n+  __asm__(\"fsel %0,%1,%2,%3\" : \"=f\"(r) : \"f\"(x),\"f\"(y),\"f\"(z));\n+  return r;\n+}\n+\n+static __inline__ double __frsqrte(double x) __attribute__((always_inline));\n+static __inline__ double\n+__frsqrte(double x)\n+{\n+  double r;\n+  __asm__(\"frsqrte %0,%1\" : \"=f\" (r) : \"f\" (x));\n+  return r;\n+}\n+\n+static __inline__ float __fres(float x) __attribute__((always_inline));\n+static __inline__ float\n+__fres(float x)\n+{\n+  float r;\n+  __asm__(\"fres %0,%1\" : \"=f\"(r) : \"f\"(x));\n+  return r;\n+}\n+\n+static __inline__ double __fsqrt(double x) __attribute__((always_inline));\n+static __inline__ double\n+__fsqrt(double x)\n+{\n+  double r;\n+  __asm__(\"fsqrt %0,%1\" : \"=f\"(r) : \"f\"(x));\n+  return r;\n+}\n+\n+static __inline__ float __fsqrts(float x) __attribute__((always_inline));\n+static __inline__ float\n+__fsqrts(float x)\n+{\n+  float r;\n+  __asm__(\"fsqrts %0,%1\" : \"=f\"(r) : \"f\"(x));\n+  return r;\n+}\n+\n+static __inline__ double __fmul (double a, double b) __attribute__ ((always_inline));\n+static __inline__ double\n+__fmul(double a, double b)\n+{\n+  double d;\n+  __asm__ (\"fmul %0,%1,%2\" : \"=f\" (d) : \"f\" (a), \"f\" (b));\n+  return d;\n+}\n+\n+static __inline__ float __fmuls (float a, float b) __attribute__ ((always_inline));\n+static __inline__ float\n+__fmuls (float a, float b)\n+{\n+  float d;\n+  __asm__ (\"fmuls %0,%1,%2\" : \"=f\" (d) : \"f\" (a), \"f\" (b));\n+  return d;\n+}\n+\n+static __inline__ float __frsp (float a) __attribute__ ((always_inline));\n+static __inline__ float\n+__frsp (float a)\n+{\n+  float d;\n+  __asm__ (\"frsp %0,%1\" : \"=f\" (d) : \"f\" (a));\n+  return d;\n+}\n+\n+static __inline__ double __fcfid (long long a) __attribute__((always_inline));\n+static __inline__ double\n+__fcfid (long long a)\n+{\n+  double d;\n+  __asm__ (\"fcfid %0,%1\" : \"=f\" (d) : \"f\" (a));\n+  return d;\n+}\n+\n+static __inline__ long long __fctid (double a) __attribute__ ((always_inline));\n+static __inline__ long long\n+__fctid (double a)\n+{\n+  long long d;\n+  __asm__ (\"fctid %0,%1\" : \"=f\" (d) : \"f\" (a));\n+  return d;\n+}\n+\n+static __inline__ long long __fctidz (double a) __attribute__ ((always_inline));\n+static __inline__ long long\n+__fctidz (double a)\n+{\n+  long long d;\n+  __asm__ (\"fctidz %0,%1\" : \"=f\" (d) : \"f\" (a));\n+  return d;\n+}\n+\n+static __inline__ int __fctiw (double a) __attribute__ ((always_inline));\n+static __inline__ int\n+__fctiw (double a)\n+{\n+  unsigned long long d;\n+  __asm__ (\"fctiw %0,%1\" : \"=f\" (d) : \"f\" (a));\n+  return (int) d;\n+}\n+\n+static __inline__ int __fctiwz (double a) __attribute__ ((always_inline));\n+static __inline__ int\n+__fctiwz (double a)\n+{\n+  long long d;\n+  __asm__ (\"fctiwz %0,%1\" : \"=f\" (d) : \"f\" (a));\n+  return (int) d;\n+}\n+\n+#ifdef __powerpc64__\n+#define __rldcl(a,b,mb) __extension__ \\\n+  ({ \\\n+    unsigned long long d; \\\n+    __asm__ (\"rldcl %0,%1,%2,%3\" : \"=r\" (d) : \"r\" (a), \"r\" (b), \"i\" (mb)); \\\n+    d; \\\n+  })\n+\n+#define __rldcr(a,b,me) __extension__ \\\n+  ({ \\\n+    unsigned long long d; \\\n+    __asm__ (\"rldcr %0,%1,%2,%3\" : \"=r\" (d) : \"r\" (a), \"r\" (b), \"i\" (me)); \\\n+    d; \\\n+  })\n+\n+#define __rldic(a,sh,mb) __extension__ \\\n+  ({ \\\n+    unsigned long long d; \\\n+    __asm__ (\"rldic %0,%1,%2,%3\" : \"=r\" (d) : \"r\" (a), \"i\" (sh), \"i\" (mb)); \\\n+    d; \\\n+  })\n+\n+#define __rldicl(a,sh,mb) __extension__ \\\n+  ({ \\\n+    unsigned long long d; \\\n+    __asm__ (\"rldicl %0,%1,%2,%3\" : \"=r\" (d) : \"r\" (a), \"i\" (sh), \"i\" (mb)); \\\n+    d; \\\n+  })\n+\n+#define __rldicr(a,sh,me) __extension__ \\\n+  ({ \\\n+    unsigned long long d; \\\n+    __asm__ (\"rldicr %0,%1,%2,%3\" : \"=r\" (d) : \"r\" (a), \"i\" (sh), \"i\" (me)); \\\n+    d; \\\n+  })\n+\n+#define __rldimi(a,b,sh,mb) __extension__ \\\n+  ({ \\\n+    unsigned long long d; \\\n+    __asm__ (\"rldimi %0,%1,%2,%3\" : \"=r\" (d) : \"r\" (b), \"i\" (sh), \"i\" (mb), \"0\" (a)); \\\n+    d; \\\n+  })\n+#endif /* __powerpc64__ */\n+\n+#define __rlwimi(a,b,sh,mb,me) __extension__ \\\n+  ({ \\\n+    unsigned int d; \\\n+    __asm__ (\"rlwimi %0,%1,%2,%3,%4\" : \"=r\" (d) : \"r\" (b), \"i\" (sh), \"i\" (mb), \"i\" (me), \"0\" (a)); \\\n+    d; \\\n+  })\n+\n+#define __rlwinm(a,sh,mb,me) __extension__ \\\n+  ({ \\\n+    unsigned int d; \\\n+    __asm__ (\"rlwinm %0,%1,%2,%3,%4\" : \"=r\" (d) : \"r\" (a), \"i\" (sh), \"i\" (mb), \"i\" (me)); \\\n+    d; \\\n+  })\n+\n+#define __rlwnm(a,b,mb,me) __extension__ \\\n+  ({ \\\n+    unsigned int d; \\\n+    __asm__ (\"rlwnm %0,%1,%2,%3,%4\" : \"=r\" (d) : \"r\" (a), \"r\" (b), \"i\" (mb), \"i\" (me)); \\\n+    d; \\\n+  })\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#endif /* _PPU_INTRINSICS_H */"}, {"sha": "1274ef11e0d4fee4891661ce3de3362a9e4966b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6409d6b954754e651f80ff10d986eb8ce8b89f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6409d6b954754e651f80ff10d986eb8ce8b89f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0a6409d6b954754e651f80ff10d986eb8ce8b89f", "patch": "@@ -1,3 +1,7 @@\n+2007-08-30  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\t* gcc.target/powerpc/ppu-intrinsics.c: New testcase.\n+\n 2007-08-30  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/inline-24.c: New test."}, {"sha": "9af38884fb68b669ac31873cc1ae30d8a0f8d4f9", "filename": "gcc/testsuite/gcc.target/powerpc/ppu-intrinsics.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6409d6b954754e651f80ff10d986eb8ce8b89f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppu-intrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6409d6b954754e651f80ff10d986eb8ce8b89f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppu-intrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppu-intrinsics.c?ref=0a6409d6b954754e651f80ff10d986eb8ce8b89f", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do link { target *-*-linux* } } */\n+/* { dg-options \"-W -Wall -mcpu=cell\" } */\n+/* Test some PPU intrinsics from <ppu_intrinsics.h>.  */\n+\n+#include <ppu_intrinsics.h>\n+\n+int main ()\n+{\n+  double d, d1, d2;\n+  float f, f1, f2;\n+  unsigned long long ull, a, b;\n+  long long ll;\n+  int i;\n+\n+#ifdef __powerpc64__\n+  ull = __rldcl (a, b, 3);\n+  ull = __rldcr (a, b, 3);\n+  ull = __rldic (a, 3, 4);\n+  ull = __rldicl (a, 4, 5);\n+  ull = __rldicr (a, 2, 3);\n+  ull = __rldimi (a, b, 4, 6);\n+#endif\n+  ull = __rlwimi (a, b, 6, 9, 12);\n+  ull = __rlwnm (a, b, 3, 5);\n+  d = __fmul (d1, d2);\n+  f = __fmuls (f1, f2);\n+  f = __frsp (f);\n+  d = __fcfid (ll);\n+  d = __frsqrte (d1);\n+  ll = __fctid (d);\n+  ll = __fctidz (d);\n+  i = __fctiw (d);\n+  i = __fctiwz (d);\n+\n+  return 0;\n+}"}]}