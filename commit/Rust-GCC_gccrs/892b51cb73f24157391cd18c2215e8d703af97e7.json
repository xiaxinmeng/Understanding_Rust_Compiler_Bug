{"sha": "892b51cb73f24157391cd18c2215e8d703af97e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkyYjUxY2I3M2YyNDE1NzM5MWNkMThjMjIxNWU4ZDcwM2FmOTdlNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-06-05T08:44:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-06-05T08:44:23Z"}, "message": "ix86: Improve __builtin_c[lt]z followed by extension [PR95535]\n\nIn January I've added patterns to optimize SImode -> DImode sign or zero\nextension of __builtin_popcount, this patch does the same for\n__builtin_c[lt]z.  Like most other instructions, the [tl]zcntl instructions\nclear the upper 32 bits of the destination register and as the instructions\nonly result in values 0 to 32 inclusive, both sign and zero extensions\nbehave the same.\n\n2020-06-05  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/95535\n\t* config/i386/i386.md (*ctzsi2_zext, *clzsi2_lzcnt_zext): New\n\tdefine_insn_and_split patterns.\n\t(*ctzsi2_zext_falsedep, *clzsi2_lzcnt_zext_falsedep): New\n\tdefine_insn patterns.\n\n\t* gcc.target/i386/pr95535-1.c: New test.\n\t* gcc.target/i386/pr95535-2.c: New test.", "tree": {"sha": "5af3103be0686d948e27665b20706a2d9d1d0189", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5af3103be0686d948e27665b20706a2d9d1d0189"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/892b51cb73f24157391cd18c2215e8d703af97e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/892b51cb73f24157391cd18c2215e8d703af97e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/892b51cb73f24157391cd18c2215e8d703af97e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/892b51cb73f24157391cd18c2215e8d703af97e7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ea6c4978111d146db8d33c80d9da93d7bd2bc8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ea6c4978111d146db8d33c80d9da93d7bd2bc8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ea6c4978111d146db8d33c80d9da93d7bd2bc8d"}], "stats": {"total": 194, "additions": 194, "deletions": 0}, "files": [{"sha": "a8592a95fe1f152515816a356c6373244a7574a7", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892b51cb73f24157391cd18c2215e8d703af97e7/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892b51cb73f24157391cd18c2215e8d703af97e7/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=892b51cb73f24157391cd18c2215e8d703af97e7", "patch": "@@ -13985,6 +13985,50 @@\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn_and_split \"*ctzsi2_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(and:DI\n+\t  (subreg:DI\n+\t    (ctz:SI\n+\t      (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")) 0)\n+\t  (const_int 63)))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_BMI && TARGET_64BIT\"\n+  \"tzcnt{l}\\t{%1, %k0|%k0, %1}\"\n+  \"&& TARGET_AVOID_FALSE_DEP_FOR_BMI && epilogue_completed\n+   && optimize_function_for_speed_p (cfun)\n+   && !reg_mentioned_p (operands[0], operands[1])\"\n+  [(parallel\n+    [(set (match_dup 0)\n+\t  (and:DI (subreg:DI (ctz:SI (match_dup 1)) 0) (const_int 63)))\n+     (unspec [(match_dup 0)] UNSPEC_INSN_FALSE_DEP)\n+     (clobber (reg:CC FLAGS_REG))])]\n+  \"ix86_expand_clear (operands[0]);\"\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"prefix_rep\" \"1\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+; False dependency happens when destination is only updated by tzcnt,\n+; lzcnt or popcnt.  There is no false dependency when destination is\n+; also used in source.\n+(define_insn \"*ctzsi2_zext_falsedep\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(and:DI\n+\t  (subreg:DI\n+\t    (ctz:SI\n+\t      (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")) 0)\n+\t  (const_int 63)))\n+   (unspec [(match_operand:DI 2 \"register_operand\" \"0\")]\n+\t   UNSPEC_INSN_FALSE_DEP)\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_BMI && TARGET_64BIT\"\n+  \"tzcnt{l}\\t{%1, %k0|%k0, %1}\"\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"prefix_rep\" \"1\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_insn \"bsr_rex64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(minus:DI (const_int 63)\n@@ -14077,6 +14121,48 @@\n    (set_attr \"type\" \"bitmanip\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn_and_split \"*clzsi2_lzcnt_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(and:DI\n+\t  (subreg:DI\n+\t    (clz:SI\n+\t      (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")) 0)\n+\t  (const_int 63)))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_LZCNT && TARGET_64BIT\"\n+  \"lzcnt{l}\\t{%1, %k0|%k0, %1}\"\n+  \"&& TARGET_AVOID_FALSE_DEP_FOR_BMI && epilogue_completed\n+   && optimize_function_for_speed_p (cfun)\n+   && !reg_mentioned_p (operands[0], operands[1])\"\n+  [(parallel\n+    [(set (match_dup 0)\n+\t  (and:DI (subreg:DI (clz:SI (match_dup 1)) 0) (const_int 63)))\n+     (unspec [(match_dup 0)] UNSPEC_INSN_FALSE_DEP)\n+     (clobber (reg:CC FLAGS_REG))])]\n+  \"ix86_expand_clear (operands[0]);\"\n+  [(set_attr \"prefix_rep\" \"1\")\n+   (set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+; False dependency happens when destination is only updated by tzcnt,\n+; lzcnt or popcnt.  There is no false dependency when destination is\n+; also used in source.\n+(define_insn \"*clzsi2_lzcnt_zext_falsedep\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(and:DI\n+\t  (subreg:DI\n+\t    (clz:SI\n+\t      (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")) 0)\n+\t  (const_int 63)))\n+   (unspec [(match_operand:DI 2 \"register_operand\" \"0\")]\n+\t   UNSPEC_INSN_FALSE_DEP)\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_LZCNT\"\n+  \"lzcnt{l}\\t{%1, %k0|%k0, %1}\"\n+  [(set_attr \"prefix_rep\" \"1\")\n+   (set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_int_iterator LT_ZCNT\n \t[(UNSPEC_TZCNT \"TARGET_BMI\")\n \t (UNSPEC_LZCNT \"TARGET_LZCNT\")])"}, {"sha": "df847ffc6737e078023046a8d4f17948f9920783", "filename": "gcc/testsuite/gcc.target/i386/pr95535-1.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892b51cb73f24157391cd18c2215e8d703af97e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95535-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892b51cb73f24157391cd18c2215e8d703af97e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95535-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95535-1.c?ref=892b51cb73f24157391cd18c2215e8d703af97e7", "patch": "@@ -0,0 +1,54 @@\n+/* PR target/95535 */\n+/* { dg-do compile { target lp64 } } */\n+/* { dg-options \"-O2 -mbmi\" } */\n+/* { dg-final { scan-assembler-not \"cltq\" } } */\n+\n+unsigned int foo (void);\n+\n+unsigned long\n+f1 (unsigned int x)\n+{\n+  return __builtin_ctz (x);\n+}\n+\n+unsigned long\n+f2 (unsigned int x)\n+{\n+  return (unsigned) __builtin_ctz (x);\n+}\n+\n+unsigned long\n+f3 (unsigned int x)\n+{\n+  return __builtin_ctz (x) & 63ULL;\n+}\n+\n+unsigned long\n+f4 (unsigned int x)\n+{\n+  return __builtin_ctz (x) & 1023ULL;\n+}\n+\n+unsigned long\n+f5 (void)\n+{\n+  return __builtin_ctz (foo ());\n+}\n+\n+unsigned long\n+f6 (void)\n+{\n+  return (unsigned) __builtin_ctz (foo ());\n+}\n+\n+unsigned long\n+f7 (void)\n+{\n+  return __builtin_ctz (foo ()) & 63ULL;\n+}\n+\n+unsigned long\n+f8 (void)\n+{\n+  return __builtin_ctz (foo ()) & 1023ULL;\n+}"}, {"sha": "670ef16274034cc60b0ef24a99c54bdeb274a78e", "filename": "gcc/testsuite/gcc.target/i386/pr95535-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892b51cb73f24157391cd18c2215e8d703af97e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95535-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892b51cb73f24157391cd18c2215e8d703af97e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95535-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95535-2.c?ref=892b51cb73f24157391cd18c2215e8d703af97e7", "patch": "@@ -0,0 +1,54 @@\n+/* PR target/95535 */\n+/* { dg-do compile { target lp64 } } */\n+/* { dg-options \"-O2 -mlzcnt\" } */\n+/* { dg-final { scan-assembler-not \"cltq\" } } */\n+\n+unsigned int foo (void);\n+\n+unsigned long\n+f1 (unsigned int x)\n+{\n+  return __builtin_clz (x);\n+}\n+\n+unsigned long\n+f2 (unsigned int x)\n+{\n+  return (unsigned) __builtin_clz (x);\n+}\n+\n+unsigned long\n+f3 (unsigned int x)\n+{\n+  return __builtin_clz (x) & 63ULL;\n+}\n+\n+unsigned long\n+f4 (unsigned int x)\n+{\n+  return __builtin_clz (x) & 1023ULL;\n+}\n+\n+unsigned long\n+f5 (void)\n+{\n+  return __builtin_clz (foo ());\n+}\n+\n+unsigned long\n+f6 (void)\n+{\n+  return (unsigned) __builtin_clz (foo ());\n+}\n+\n+unsigned long\n+f7 (void)\n+{\n+  return __builtin_clz (foo ()) & 63ULL;\n+}\n+\n+unsigned long\n+f8 (void)\n+{\n+  return __builtin_clz (foo ()) & 1023ULL;\n+}"}]}