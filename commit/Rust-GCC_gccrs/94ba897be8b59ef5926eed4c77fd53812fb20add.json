{"sha": "94ba897be8b59ef5926eed4c77fd53812fb20add", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRiYTg5N2JlOGI1OWVmNTkyNmVlZDRjNzdmZDUzODEyZmIyMGFkZA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-07-16T17:08:58Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-07-16T17:11:23Z"}, "message": "PR testsuite/101468  - Wstringop-overflow tests failures\n\ngcc/testsuite/ChangeLog:\n\n\tPR testsuite/101468\n\t* gcc.dg/Wstringop-overflow-41.c: Adjust to avoid target-specific\n\tfailures.\n\t* gcc.dg/Wstringop-overflow-42.c: Same.\n\t* gcc.dg/Wstringop-overflow-68.c: Same.\n\t* gcc.dg/Wstringop-overflow-70.c: Same.\n\t* gcc.dg/Wstringop-overflow-71.c: Same.\n\t* gcc.dg/strlenopt-95.c: Fix typos.", "tree": {"sha": "461f568c74597a211f1e833f1930ff2b83591da7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/461f568c74597a211f1e833f1930ff2b83591da7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94ba897be8b59ef5926eed4c77fd53812fb20add", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94ba897be8b59ef5926eed4c77fd53812fb20add", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94ba897be8b59ef5926eed4c77fd53812fb20add", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94ba897be8b59ef5926eed4c77fd53812fb20add/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa5f8b49e55caf5bb341f5eb6b5ab828b9286425", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa5f8b49e55caf5bb341f5eb6b5ab828b9286425", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa5f8b49e55caf5bb341f5eb6b5ab828b9286425"}], "stats": {"total": 62, "additions": 37, "deletions": 25}, "files": [{"sha": "e255e6702972e51c0e9bc55756228818ee0467bb", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-41.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ba897be8b59ef5926eed4c77fd53812fb20add/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-41.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ba897be8b59ef5926eed4c77fd53812fb20add/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-41.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-41.c?ref=94ba897be8b59ef5926eed4c77fd53812fb20add", "patch": "@@ -29,7 +29,8 @@ void char_array_cst_off_cst_size (void)\n   sink (p);\n \n   ++idx;\n-  memset (p + idx, 0, 3);               // { dg-warning \"writing 3 bytes into a region of size 1\" \"pr?????\" { xfail ilp32 } }\n+  memset (p + idx, 0, 3);               // { dg-warning \"writing 3 bytes into a region of size 1\" }\n+  sink (p);\n \n   ++idx;\n   memset (p + idx, 0, 3);               // { dg-warning \"writing 3 bytes into a region of size 0\" }"}, {"sha": "8527eea8e5a3a641e121dc8f5dcd3d40fd3c987f", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-42.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ba897be8b59ef5926eed4c77fd53812fb20add/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-42.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ba897be8b59ef5926eed4c77fd53812fb20add/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-42.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-42.c?ref=94ba897be8b59ef5926eed4c77fd53812fb20add", "patch": "@@ -23,21 +23,21 @@ void cpy_ui_1_max (unsigned i, const char *s)\n {\n   if (i < 1) i = 1;\n   d = strcpy (a + i, s);      // { dg-warning \"writing 1 or more bytes into a region of size 0\" }\n-  d = strcpy (a + i + 1, s);  // { dg-warning \"writing 1 or more bytes into a region of size 0\" \"\" { xfail ilp32 } }\n+  d = strcpy (a + i + 1, s);  // { dg-warning \"writing 1 or more bytes into a region of size 0\" \"\" { xfail { ! lp64 } } }\n }\n \n void cpy_sl_1_max (long i, const char *s)\n {\n   if (i < 1) i = 1;\n-  d = strcpy (a + i, s);      // { dg-warning \"writing 1 or more bytes into a region of size 0\" }\n-  d = strcpy (a + i + 1, s);  // { dg-warning \"writing 1 or more bytes into a region of size 0\" }\n+  d = strcpy (a + i, s);      // { dg-warning \"writing 1 or more bytes into a region of size 0\" \"\" { target { ! ptr_eq_short } } }\n+  d = strcpy (a + i + 1, s);  // { dg-warning \"writing 1 or more bytes into a region of size 0\" \"\" { target { ! ptr_eq_short } } }\n }\n \n void cpy_ul_1_max (unsigned long i, const char *s)\n {\n   if (i < 1) i = 1;\n \n-  d = strcpy (a + i, s);      // { dg-warning \"writing 1 or more bytes into a region of size 0\" }\n+  d = strcpy (a + i, s);      // { dg-warning \"writing 1 or more bytes into a region of size 0\" \"\" { target { ! ptr_eq_short } } }\n \n   /* Because of integer wraparound the offset's range is [1, 0] so\n      the overflow isn't diagnosed (yet).  */\n@@ -56,7 +56,7 @@ void cpy_si_min_m1 (int i, const char *s)\n void cpy_sl_min_m1 (long i, const char *s)\n {\n   if (i > -1) i = -1;\n-  d = strcpy (a + i - 1, s);  // { dg-warning \"writing 1 or more bytes into a region of size 0\" }\n-  d = strcpy (a + i, s);      // { dg-warning \"writing 1 or more bytes into a region of size 0\" }\n+  d = strcpy (a + i - 1, s);  // { dg-warning \"writing 1 or more bytes into a region of size 0\" \"\" { target { ! ptr_eq_short } } }\n+  d = strcpy (a + i, s);      // { dg-warning \"writing 1 or more bytes into a region of size 0\" \"\" { target { ! ptr_eq_short } } }\n   d = strcpy (a + i + 2, s);\n }"}, {"sha": "6bcba2745410b3554a43ac8fe547fc6a77460d69", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-68.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ba897be8b59ef5926eed4c77fd53812fb20add/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-68.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ba897be8b59ef5926eed4c77fd53812fb20add/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-68.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-68.c?ref=94ba897be8b59ef5926eed4c77fd53812fb20add", "patch": "@@ -57,12 +57,12 @@ void warn_comp_lit_zero (void)\n \n void warn_comp_lit (void)\n {\n-  *(AC2*)a1 = Ac2;      // { dg-warning \"writing 2 bytes into a region of size 1\" \"pr??????\" { xfail *-*-* } }\n-  *(AC4*)a2 = Ac4;      // { dg-warning \"writing 4 bytes into a region of size 2\" \"pr??????\" { xfail *-*-* } }\n-  *(AC4*)a3 = Ac4;      // { dg-warning \"writing 4 bytes into a region of size 3\" \"pr??????\" { xfail *-*-* } }\n-  *(AC8*)a4 = Ac8;      // { dg-warning \"writing 8 bytes into a region of size 4\" \"pr??????\" { xfail *-*-* } }\n-  *(AC8*)a7 = Ac8;      // { dg-warning \"writing 8 bytes into a region of size 7\" \"pr??????\" { xfail *-*-* } }\n-  *(AC16*)a15 = Ac16;   // { dg-warning \"writing 16 bytes into a region of size 15\" \"pr??????\" { xfail *-*-* } }\n+  *(AC2*)a1 = Ac2;      // { dg-warning \"writing 2 bytes into a region of size 1\" \"pr101475\" { xfail *-*-* } }\n+  *(AC4*)a2 = Ac4;      // { dg-warning \"writing 4 bytes into a region of size 2\" \"pr101475\" { xfail *-*-* } }\n+  *(AC4*)a3 = Ac4;      // { dg-warning \"writing 4 bytes into a region of size 3\" \"pr101475\" { xfail *-*-* } }\n+  *(AC8*)a4 = Ac8;      // { dg-warning \"writing 8 bytes into a region of size 4\" \"pr101475\" { xfail *-*-* } }\n+  *(AC8*)a7 = Ac8;      // { dg-warning \"writing 8 bytes into a region of size 7\" \"pr101475\" { xfail *-*-* } }\n+  *(AC16*)a15 = Ac16;   // { dg-warning \"writing 16 bytes into a region of size 15\" \"pr101475\" { xfail *-*-* } }\n }\n \n void warn_aggr_decl (void)"}, {"sha": "82c4d9f2238748fb2c27786f0b6453f28064cd41", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-70.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ba897be8b59ef5926eed4c77fd53812fb20add/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-70.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ba897be8b59ef5926eed4c77fd53812fb20add/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-70.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-70.c?ref=94ba897be8b59ef5926eed4c77fd53812fb20add", "patch": "@@ -16,6 +16,9 @@ void* warn_loop (void)\n {\n   char *p = __builtin_malloc (15);\n   for (int i = 0; i != 16; ++i)\n-    p[i] = i;       // { dg-warning \"writing 16 bytes into a region of size 15\" }\n+    /* The size of the write below depends on the target.  When vectorized\n+       the vector size may be 4 or 16, otherwise it may be a series of byte\n+       assignments.  */\n+    p[i] = i;       // { dg-warning \"writing (1|2|4|16) bytes? into a region of size (0|1|3|15)\" }\n   return p;\n }"}, {"sha": "f56a00560b0016400f6cb07af694e1d9b69b0e69", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-71.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ba897be8b59ef5926eed4c77fd53812fb20add/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-71.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ba897be8b59ef5926eed4c77fd53812fb20add/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-71.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-71.c?ref=94ba897be8b59ef5926eed4c77fd53812fb20add", "patch": "@@ -12,7 +12,15 @@ extern int abs (int);\n extern void* alloca (size_t);\n \n extern double nan (const char *);\n-_Decimal32 nand32 (const char *);\n+\n+#ifdef __DEC32_MAX__\n+  _Decimal32 nand32 (const char *);\n+#else\n+/* _Decimal32 is supported only conditionally and not available on all\n+   targets.  */\n+#  define _Decimal32  double\n+#  define nand32(s)   nan (s)\n+#endif\n \n extern size_t strlen (const char *);\n extern char* strcpy (char *, const char *);\n@@ -56,23 +64,23 @@ void warn_complex (double x, double i)\n }\n \n \n-void nowarn_nan (const char *s)\n+__attribute__ ((noipa)) void nowarn_nan (const char *s)\n {\n   *(double *)ax = nan (s);\n }\n \n-void warn_nan (const char *s)\n+__attribute__ ((noipa)) void warn_nan (const char *s)\n {\n   *(double *)a1 = nan (s);      // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n }\n \n \n-void nowarn_nand32 (const char *s)\n+__attribute__ ((noipa)) void nowarn_nand32 (const char *s)\n {\n   *(_Decimal32 *)ax = nand32 (s);\n }\n \n-void warn_nand32 (const char *s)\n+__attribute__ ((noipa)) void warn_nand32 (const char *s)\n {\n   *(_Decimal32 *)a1 = nand32 (s); // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n }\n@@ -88,7 +96,7 @@ void nowarn_strlen (const char *s1, const char *s2, const char *s3)\n void warn_strlen (const char *s1, const char *s2)\n {\n   *(int16_t *)a1 = strlen (s1); // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n-  *(size_t *)a2 = strlen (s2);  // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  *(size_t *)a2 = strlen (s2);  // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"!ptr_eq_short\" { target { ! ptr_eq_short } } }\n }\n \n \n@@ -101,5 +109,5 @@ void nowarn_strcpy (char *s1, char *s2, const char *s3)\n void warn_strcpy (char *s1, char *s2, const char *s3)\n {\n   *(char **)a1 = strcpy (s1, s2);   // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n-  *(char **)a2 = strcpy (s2, s3);   // { dg-warning \"\\\\\\[-Wstringop-overflow\" }\n+  *(char **)a2 = strcpy (s2, s3);   // { dg-warning \"\\\\\\[-Wstringop-overflow\" \"!ptr_eq_short\" { target { ! ptr_eq_short } } }\n }"}, {"sha": "6e0a79d3e691fe2ad1a4cec195656134e471c2dd", "filename": "gcc/testsuite/gcc.dg/strlenopt-95.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ba897be8b59ef5926eed4c77fd53812fb20add/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-95.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ba897be8b59ef5926eed4c77fd53812fb20add/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-95.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-95.c?ref=94ba897be8b59ef5926eed4c77fd53812fb20add", "patch": "@@ -1,6 +1,6 @@\n /* Verify strlen results of vector assignments.\n    { dg-do compile }\n-   { dg-options \"-O2 -Wall\" } */\n+   { dg-options \"-O2 -Wall -fdump-tree-optimized\" } */\n \n #include \"strlenopt.h\"\n \n@@ -52,7 +52,7 @@ void test_fold (int i)\n   *(VC8*)a = (VC8){ 1, 2, 3, 0, 5, 6 };\n   A (strlen (a) == 3);\n \n-  *(VC8*)a = (VC8){ 1, 2, 3, 0, 5, 6, 7 };\n+  *(VC8*)a = (VC8){ 1, 2, 3, 0, 5, 6, 7, 8 };\n   A (strlen (a) == 3);\n   A (strlen (a + 1) == 2);\n   A (strlen (a + 2) == 1);\n@@ -61,5 +61,5 @@ void test_fold (int i)\n   A (a[4] == 5 && a[5] == 6 && a[6] == 7 && a[7] == 8);\n }\n \n-/* { dg-final { scan-tree-dump-not \"abort \\\\(\" \"strlen1\" } }\n-   { dg-final { scan-tree-dump-not \"strlen \\\\(\" \"strlen1\" } } */\n+/* { dg-final { scan-tree-dump-not \"abort \\\\(\" \"optimized\" } }\n+   { dg-final { scan-tree-dump-not \"strlen \\\\(\" \"optimized\" } } */"}]}