{"sha": "00a0ea64eec42da418a111bb4585b2ea007358dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBhMGVhNjRlZWM0MmRhNDE4YTExMWJiNDU4NWIyZWEwMDczNThkYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-03-30T21:56:02Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-03-30T21:56:02Z"}, "message": "re PR ipa/65610 (Compare debug failure with -g3 -fsanitize=undefined -fno-sanitize=vptr -O3)\n\n\tPR ipa/65610\n\t* ipa-utils.h (inlined_polymorphic_ctor_dtor_block_p): Declare.\n\t* ipa-polymorphic-call.c (inlined_polymorphic_ctor_dtor_block_p): New\n\tfunction.\n\t(decl_maybe_in_construction_p, noncall_stmt_may_be_vtbl_ptr_store):\n\tUse it.\n\t* ipa-prop.c (param_type_may_change_p): Likewise.\n\t* tree-ssa-live.c: Include ipa-utils.h and its dependencies.\n\t(remove_unused_scope_block_p): Add in_ctor_dtor_block\n\targument.  Before inlining, preserve\n\tinlined_polymorphic_ctor_dtor_block_p blocks and the outermost block\n\twith FUNCTION_DECL BLOCK_ABSTRACT_ORIGIN inside of them.  Adjust\n\trecursive calls.\n\t(remove_unused_locals): Adjust remove_unused_scope_block_p caller.\n\n\t* g++.dg/ubsan/pr65610.C: New test.\n\nFrom-SVN: r221781", "tree": {"sha": "4a2145b3fd570aa231e78ea5f2d8819866f798a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a2145b3fd570aa231e78ea5f2d8819866f798a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00a0ea64eec42da418a111bb4585b2ea007358dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00a0ea64eec42da418a111bb4585b2ea007358dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00a0ea64eec42da418a111bb4585b2ea007358dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00a0ea64eec42da418a111bb4585b2ea007358dc/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ef4bac7802534e52d3031dccf0cdfb2c53b2d836", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef4bac7802534e52d3031dccf0cdfb2c53b2d836", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef4bac7802534e52d3031dccf0cdfb2c53b2d836"}], "stats": {"total": 186, "additions": 141, "deletions": 45}, "files": [{"sha": "242eb5075790568322985205073c5fc91403fae3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a0ea64eec42da418a111bb4585b2ea007358dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a0ea64eec42da418a111bb4585b2ea007358dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00a0ea64eec42da418a111bb4585b2ea007358dc", "patch": "@@ -1,3 +1,20 @@\n+2015-03-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR ipa/65610\n+\t* ipa-utils.h (inlined_polymorphic_ctor_dtor_block_p): Declare.\n+\t* ipa-polymorphic-call.c (inlined_polymorphic_ctor_dtor_block_p): New\n+\tfunction.\n+\t(decl_maybe_in_construction_p, noncall_stmt_may_be_vtbl_ptr_store):\n+\tUse it.\n+\t* ipa-prop.c (param_type_may_change_p): Likewise.\n+\t* tree-ssa-live.c: Include ipa-utils.h and its dependencies.\n+\t(remove_unused_scope_block_p): Add in_ctor_dtor_block\n+\targument.  Before inlining, preserve\n+\tinlined_polymorphic_ctor_dtor_block_p blocks and the outermost block\n+\twith FUNCTION_DECL BLOCK_ABSTRACT_ORIGIN inside of them.  Adjust\n+\trecursive calls.\n+\t(remove_unused_locals): Adjust remove_unused_scope_block_p caller.\n+\n 2015-03-27  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/65076"}, {"sha": "e0fd31ad52339a81a5a58304060ae64a331f5f2f", "filename": "gcc/ipa-polymorphic-call.c", "status": "modified", "additions": 35, "deletions": 30, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a0ea64eec42da418a111bb4585b2ea007358dc/gcc%2Fipa-polymorphic-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a0ea64eec42da418a111bb4585b2ea007358dc/gcc%2Fipa-polymorphic-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-polymorphic-call.c?ref=00a0ea64eec42da418a111bb4585b2ea007358dc", "patch": "@@ -513,6 +513,38 @@ contains_type_p (tree outer_type, HOST_WIDE_INT offset,\n }\n \n \n+/* Return a FUNCTION_DECL if BLOCK represents a constructor or destructor.\n+   If CHECK_CLONES is true, also check for clones of ctor/dtors.  */\n+\n+tree\n+inlined_polymorphic_ctor_dtor_block_p (tree block, bool check_clones)\n+{\n+  tree fn = BLOCK_ABSTRACT_ORIGIN (block);\n+  if (fn == NULL || TREE_CODE (fn) != FUNCTION_DECL)\n+    return NULL_TREE;\n+\n+  if (TREE_CODE (TREE_TYPE (fn)) != METHOD_TYPE\n+      || (!DECL_CXX_CONSTRUCTOR_P (fn) && !DECL_CXX_DESTRUCTOR_P (fn)))\n+    {\n+      if (!check_clones)\n+\treturn NULL_TREE;\n+\n+      /* Watch for clones where we constant propagated the first\n+\t argument (pointer to the instance).  */\n+      fn = DECL_ABSTRACT_ORIGIN (fn);\n+      if (!fn\n+\t  || TREE_CODE (TREE_TYPE (fn)) != METHOD_TYPE\n+\t  || (!DECL_CXX_CONSTRUCTOR_P (fn) && !DECL_CXX_DESTRUCTOR_P (fn)))\n+\treturn NULL_TREE;\n+    }\n+\n+  if (flags_from_decl_or_type (fn) & (ECF_PURE | ECF_CONST))\n+    return NULL_TREE;\n+\n+  return fn;\n+}\n+\n+\n /* We know that the instance is stored in variable or parameter\n    (not dynamically allocated) and we want to disprove the fact\n    that it may be in construction at invocation of CALL.\n@@ -550,30 +582,11 @@ decl_maybe_in_construction_p (tree base, tree outer_type,\n       && flags_from_decl_or_type (function) & (ECF_PURE | ECF_CONST))\n     return false;\n \n+  bool check_clones = !base || is_global_var (base);\n   for (tree block = gimple_block (call); block && TREE_CODE (block) == BLOCK;\n        block = BLOCK_SUPERCONTEXT (block))\n-    if (BLOCK_ABSTRACT_ORIGIN (block)\n-\t&& TREE_CODE (BLOCK_ABSTRACT_ORIGIN (block)) == FUNCTION_DECL)\n+    if (tree fn = inlined_polymorphic_ctor_dtor_block_p (block, check_clones))\n       {\n-\ttree fn = BLOCK_ABSTRACT_ORIGIN (block);\n-\n-\tif (TREE_CODE (TREE_TYPE (fn)) != METHOD_TYPE\n-\t    || (!DECL_CXX_CONSTRUCTOR_P (fn)\n-\t\t&& !DECL_CXX_DESTRUCTOR_P (fn)))\n-\t  {\n-\t    /* Watch for clones where we constant propagated the first\n-\t       argument (pointer to the instance).  */\n-\t    fn = DECL_ABSTRACT_ORIGIN (fn);\n-\t    if (!fn\n-\t\t|| (base && !is_global_var (base))\n-\t        || TREE_CODE (TREE_TYPE (fn)) != METHOD_TYPE\n-\t\t|| (!DECL_CXX_CONSTRUCTOR_P (fn)\n-\t\t    && !DECL_CXX_DESTRUCTOR_P (fn)))\n-\t      continue;\n-\t  }\n-\tif (flags_from_decl_or_type (fn) & (ECF_PURE | ECF_CONST))\n-\t  continue;\n-\n \ttree type = TYPE_MAIN_VARIANT (method_class_type (TREE_TYPE (fn)));\n \n \tif (!outer_type || !types_odr_comparable (type, outer_type))\n@@ -1163,15 +1176,7 @@ noncall_stmt_may_be_vtbl_ptr_store (gimple stmt)\n        block = BLOCK_SUPERCONTEXT (block))\n     if (BLOCK_ABSTRACT_ORIGIN (block)\n \t&& TREE_CODE (BLOCK_ABSTRACT_ORIGIN (block)) == FUNCTION_DECL)\n-      {\n-\ttree fn = BLOCK_ABSTRACT_ORIGIN (block);\n-\n-\tif (flags_from_decl_or_type (fn) & (ECF_PURE | ECF_CONST))\n-\t  return false;\n-\treturn (TREE_CODE (TREE_TYPE (fn)) == METHOD_TYPE\n-\t\t&& (DECL_CXX_CONSTRUCTOR_P (fn)\n-\t\t    || DECL_CXX_DESTRUCTOR_P (fn)));\n-      }\n+      return inlined_polymorphic_ctor_dtor_block_p (block, false);\n   return (TREE_CODE (TREE_TYPE (current_function_decl)) == METHOD_TYPE\n \t  && (DECL_CXX_CONSTRUCTOR_P (current_function_decl)\n \t      || DECL_CXX_DESTRUCTOR_P (current_function_decl)));"}, {"sha": "89a4623e0c2884e10eccf08a447efc2147717df7", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a0ea64eec42da418a111bb4585b2ea007358dc/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a0ea64eec42da418a111bb4585b2ea007358dc/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=00a0ea64eec42da418a111bb4585b2ea007358dc", "patch": "@@ -715,18 +715,8 @@ param_type_may_change_p (tree function, tree arg, gimple call)\n \t  /* Walk the inline stack and watch out for ctors/dtors.  */\n \t  for (tree block = gimple_block (call); block && TREE_CODE (block) == BLOCK;\n \t       block = BLOCK_SUPERCONTEXT (block))\n-\t    if (BLOCK_ABSTRACT_ORIGIN (block)\n-\t        && TREE_CODE (BLOCK_ABSTRACT_ORIGIN (block)) == FUNCTION_DECL)\n-\t      {\n-\t\ttree fn = BLOCK_ABSTRACT_ORIGIN (block);\n-\n-\t\tif (flags_from_decl_or_type (fn) & (ECF_PURE | ECF_CONST))\n-\t\t  continue;\n-\t\tif (TREE_CODE (TREE_TYPE (fn)) == METHOD_TYPE\n-\t\t    && (DECL_CXX_CONSTRUCTOR_P (fn)\n-\t\t        || DECL_CXX_DESTRUCTOR_P (fn)))\n-\t\t  return true;\n-\t      }\n+\t    if (inlined_polymorphic_ctor_dtor_block_p (block, false))\n+\t      return true;\n \t  return false;\n \t}\n     }"}, {"sha": "0cf654163f7f55176a0377efdd1e2c64ebf6dd1c", "filename": "gcc/ipa-utils.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a0ea64eec42da418a111bb4585b2ea007358dc/gcc%2Fipa-utils.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a0ea64eec42da418a111bb4585b2ea007358dc/gcc%2Fipa-utils.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-utils.h?ref=00a0ea64eec42da418a111bb4585b2ea007358dc", "patch": "@@ -70,6 +70,7 @@ bool possible_polymorphic_call_target_p (tree, HOST_WIDE_INT,\n \t\t\t\t         const ipa_polymorphic_call_context &,\n \t\t\t\t\t struct cgraph_node *);\n tree method_class_type (const_tree);\n+tree inlined_polymorphic_ctor_dtor_block_p (tree, bool);\n bool decl_maybe_in_construction_p (tree, tree, gimple, tree);\n tree vtable_pointer_value_to_binfo (const_tree);\n bool vtable_pointer_value_to_vtable (const_tree, tree *, unsigned HOST_WIDE_INT *);"}, {"sha": "708d8c65ad46c28b789a2866c79e945c6085b892", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a0ea64eec42da418a111bb4585b2ea007358dc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a0ea64eec42da418a111bb4585b2ea007358dc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=00a0ea64eec42da418a111bb4585b2ea007358dc", "patch": "@@ -1,3 +1,8 @@\n+2015-03-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR ipa/65610\n+\t* g++.dg/ubsan/pr65610.C: New test.\n+\n 2015-03-30  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/65398"}, {"sha": "ced59a87430e573b5074e64024116fe568a19a35", "filename": "gcc/testsuite/g++.dg/ubsan/pr65610.C", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a0ea64eec42da418a111bb4585b2ea007358dc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr65610.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a0ea64eec42da418a111bb4585b2ea007358dc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr65610.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr65610.C?ref=00a0ea64eec42da418a111bb4585b2ea007358dc", "patch": "@@ -0,0 +1,57 @@\n+// PR ipa/65610\n+// { dg-do compile }\n+// { dg-options \"-std=c++11 -fsanitize=undefined -fno-sanitize=vptr -fcompare-debug\" }\n+\n+class A;\n+class B {};\n+enum C { D };\n+class E;\n+class F;\n+class G;\n+class H\n+{\n+  F m1 (const A &t) const;\n+  G m2 () const;\n+};\n+class G {};\n+template <class S, class T>\n+class I;\n+template <class S, class T>\n+class J\n+{\n+  friend class I <S,T>;\n+  J <S,T> *j;\n+};\n+template <class S, class T>\n+struct I\n+{\n+  virtual ~I ();\n+  virtual void m3 (void *p) {}\n+  J <S,T> *i;\n+  void m4 (J <S,T>*& t);\n+};\n+template <class S, class T>\n+void I <S,T>::m4 (J <S,T> * &t)\n+{\n+  m4 (t->j);\n+  m3 (t);\n+}\n+template <class S, class T>\n+I <S,T>::~I ()\n+{\n+  m4 (i);\n+}\n+struct F\n+{\n+  explicit inline F (C v);\n+  inline ~F ();\n+  I <B, E> f;\n+};\n+inline F::F (C v) {}\n+inline F::~F () {}\n+F H::m1 (const A &t) const\n+{\n+  F q (D);\n+  G r = m2 ();\n+  return q;\n+}"}, {"sha": "df902292596d9b153338a8d21fee32e549b73420", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a0ea64eec42da418a111bb4585b2ea007358dc/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a0ea64eec42da418a111bb4585b2ea007358dc/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=00a0ea64eec42da418a111bb4585b2ea007358dc", "patch": "@@ -76,6 +76,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic-core.h\"\n #include \"debug.h\"\n #include \"tree-ssa.h\"\n+#include \"lto-streamer.h\"\n+#include \"ipa-ref.h\"\n+#include \"cgraph.h\"\n+#include \"ipa-utils.h\"\n \n #ifdef ENABLE_CHECKING\n static void  verify_live_on_entry (tree_live_info_p);\n@@ -509,12 +513,29 @@ mark_scope_block_unused (tree scope)\n    done by the inliner.  */\n \n static bool\n-remove_unused_scope_block_p (tree scope)\n+remove_unused_scope_block_p (tree scope, bool in_ctor_dtor_block)\n {\n   tree *t, *next;\n   bool unused = !TREE_USED (scope);\n   int nsubblocks = 0;\n \n+  /* For ipa-polymorphic-call.c purposes, preserve blocks:\n+     1) with BLOCK_ABSTRACT_ORIGIN of a ctor/dtor or their clones  */\n+  if (inlined_polymorphic_ctor_dtor_block_p (scope, true))\n+    {\n+      in_ctor_dtor_block = true;\n+      unused = false;\n+    }\n+  /* 2) inside such blocks, the outermost block with BLOCK_ABSTRACT_ORIGIN\n+     being a FUNCTION_DECL.  */\n+  else if (in_ctor_dtor_block\n+\t   && BLOCK_ABSTRACT_ORIGIN (scope)\n+\t   && TREE_CODE (BLOCK_ABSTRACT_ORIGIN (scope)) == FUNCTION_DECL)\n+    {\n+      in_ctor_dtor_block = false;\n+      unused = false;\n+    }\n+\n   for (t = &BLOCK_VARS (scope); *t; t = next)\n     {\n       next = &DECL_CHAIN (*t);\n@@ -594,7 +615,7 @@ remove_unused_scope_block_p (tree scope)\n     }\n \n   for (t = &BLOCK_SUBBLOCKS (scope); *t ;)\n-    if (remove_unused_scope_block_p (*t))\n+    if (remove_unused_scope_block_p (*t, in_ctor_dtor_block))\n       {\n \tif (BLOCK_SUBBLOCKS (*t))\n \t  {\n@@ -959,7 +980,7 @@ remove_unused_locals (void)\n       cfun->local_decls->truncate (dstidx);\n     }\n \n-  remove_unused_scope_block_p (DECL_INITIAL (current_function_decl));\n+  remove_unused_scope_block_p (DECL_INITIAL (current_function_decl), false);\n   clear_unused_block_pointer ();\n \n   BITMAP_FREE (usedvars);"}]}