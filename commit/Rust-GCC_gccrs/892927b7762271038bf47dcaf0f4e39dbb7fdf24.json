{"sha": "892927b7762271038bf47dcaf0f4e39dbb7fdf24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkyOTI3Yjc3NjIyNzEwMzhiZjQ3ZGNhZjBmNGUzOWRiYjdmZGYyNA==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2015-02-27T14:15:02Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2015-02-27T14:15:02Z"}, "message": "re PR target/65032 (ICE in reload_combine_note_use, at postreload.c:1556 on i686-linux-gnu)\n\n2015-02-27  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR target/65032\n\t* lra-remat.c (update_scratch_ops): New.\n\t(do_remat): Call it.\n\t* lra.c (lra_register_new_scratch_op): New. Take code from ...\n\t(remove_scratches): ... here.\n\t* lra-int.h (lra_register_new_scratch_op): New prototype.\n\n2015-02-27  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR target/65032\n\t* g++.dg/pr65032.C: New.\n\nFrom-SVN: r221062", "tree": {"sha": "b0e84591587c4cc454af79175826ad4134a0b336", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0e84591587c4cc454af79175826ad4134a0b336"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/892927b7762271038bf47dcaf0f4e39dbb7fdf24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/892927b7762271038bf47dcaf0f4e39dbb7fdf24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/892927b7762271038bf47dcaf0f4e39dbb7fdf24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/892927b7762271038bf47dcaf0f4e39dbb7fdf24/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7631f0e27cea89316378b45955578cc53c23bc98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7631f0e27cea89316378b45955578cc53c23bc98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7631f0e27cea89316378b45955578cc53c23bc98"}], "stats": {"total": 155, "additions": 145, "deletions": 10}, "files": [{"sha": "439b42820dd9b34072c5ce2d675269e492eb371d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892927b7762271038bf47dcaf0f4e39dbb7fdf24/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892927b7762271038bf47dcaf0f4e39dbb7fdf24/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=892927b7762271038bf47dcaf0f4e39dbb7fdf24", "patch": "@@ -1,3 +1,12 @@\n+2015-02-27  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/65032\n+\t* lra-remat.c (update_scratch_ops): New.\n+\t(do_remat): Call it.\n+\t* lra.c (lra_register_new_scratch_op): New. Take code from ...\n+\t(remove_scratches): ... here.\n+\t* lra-int.h (lra_register_new_scratch_op): New prototype.\n+\n 2015-02-27  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/65040"}, {"sha": "735259123d666b021188c4f1a6171dd4fe3a6d8f", "filename": "gcc/lra-int.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892927b7762271038bf47dcaf0f4e39dbb7fdf24/gcc%2Flra-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892927b7762271038bf47dcaf0f4e39dbb7fdf24/gcc%2Flra-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-int.h?ref=892927b7762271038bf47dcaf0f4e39dbb7fdf24", "patch": "@@ -321,6 +321,7 @@ extern void lra_create_copy (int, int, int);\n extern lra_copy_t lra_get_copy (int);\n extern bool lra_former_scratch_p (int);\n extern bool lra_former_scratch_operand_p (rtx_insn *, int);\n+extern void lra_register_new_scratch_op (rtx_insn *, int);\n \n extern int lra_new_regno_start;\n extern int lra_constraint_new_regno_start;"}, {"sha": "ac827795713db4e8440d02baca971dd2b0ec8055", "filename": "gcc/lra-remat.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892927b7762271038bf47dcaf0f4e39dbb7fdf24/gcc%2Flra-remat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892927b7762271038bf47dcaf0f4e39dbb7fdf24/gcc%2Flra-remat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-remat.c?ref=892927b7762271038bf47dcaf0f4e39dbb7fdf24", "patch": "@@ -1044,6 +1044,29 @@ get_hard_regs (struct lra_insn_reg *reg, int &nregs)\n   return hard_regno;\n }\n \n+/* Make copy of and register scratch pseudos in rematerialized insn\n+   REMAT_INSN.  */\n+static void\n+update_scratch_ops (rtx_insn *remat_insn)\n+{\n+  lra_insn_recog_data_t id = lra_get_insn_recog_data (remat_insn);\n+  struct lra_static_insn_data *static_id = id->insn_static_data;\n+  for (int i = 0; i < static_id->n_operands; i++)\n+    {\n+      rtx *loc = id->operand_loc[i];\n+      if (! REG_P (*loc))\n+\tcontinue;\n+      int regno = REGNO (*loc);\n+      if (! lra_former_scratch_p (regno))\n+\tcontinue;\n+      *loc = lra_create_new_reg (GET_MODE (*loc), *loc,\n+\t\t\t\t lra_get_allocno_class (regno),\n+\t\t\t\t \"scratch pseudo copy\");\n+      lra_register_new_scratch_op (remat_insn, i);\n+    }\n+  \n+}\n+\n /* Insert rematerialization insns using the data-flow data calculated\n    earlier.  */\n static bool\n@@ -1193,6 +1216,7 @@ do_remat (void)\n \t      HOST_WIDE_INT sp_offset_change = cand_sp_offset - id->sp_offset;\n \t      if (sp_offset_change != 0)\n \t\tchange_sp_offset (remat_insn, sp_offset_change);\n+\t      update_scratch_ops (remat_insn);\n \t      lra_process_new_insns (insn, remat_insn, NULL,\n \t\t\t\t     \"Inserting rematerialization insn\");\n \t      lra_set_insn_deleted (insn);"}, {"sha": "727a70e063076739121bcda22265ae511b895d54", "filename": "gcc/lra.c", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892927b7762271038bf47dcaf0f4e39dbb7fdf24/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892927b7762271038bf47dcaf0f4e39dbb7fdf24/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=892927b7762271038bf47dcaf0f4e39dbb7fdf24", "patch": "@@ -1907,6 +1907,24 @@ lra_former_scratch_operand_p (rtx_insn *insn, int nop)\n \t\t       INSN_UID (insn) * MAX_RECOG_OPERANDS + nop) != 0;\n }\n \n+/* Register operand NOP in INSN as a former scratch.  It will be\n+   changed to scratch back, if it is necessary, at the LRA end.  */\n+void\n+lra_register_new_scratch_op (rtx_insn *insn, int nop)\n+{\n+  lra_insn_recog_data_t id = lra_get_insn_recog_data (insn);\n+  rtx op = *id->operand_loc[nop];\n+  sloc_t loc = XNEW (struct sloc);\n+  lra_assert (REG_P (op));\n+  loc->insn = insn;\n+  loc->nop = nop;\n+  scratches.safe_push (loc);\n+  bitmap_set_bit (&scratch_bitmap, REGNO (op));\n+  bitmap_set_bit (&scratch_operand_bitmap,\n+\t\t  INSN_UID (insn) * MAX_RECOG_OPERANDS + nop);\n+  add_reg_note (insn, REG_UNUSED, op);\n+}\n+\n /* Change scratches onto pseudos and save their location.  */\n static void\n remove_scratches (void)\n@@ -1916,7 +1934,6 @@ remove_scratches (void)\n   basic_block bb;\n   rtx_insn *insn;\n   rtx reg;\n-  sloc_t loc;\n   lra_insn_recog_data_t id;\n   struct lra_static_insn_data *static_id;\n \n@@ -1938,15 +1955,7 @@ remove_scratches (void)\n \t      *id->operand_loc[i] = reg\n \t\t= lra_create_new_reg (static_id->operand[i].mode,\n \t\t\t\t      *id->operand_loc[i], ALL_REGS, NULL);\n-\t      add_reg_note (insn, REG_UNUSED, reg);\n-\t      lra_update_dup (id, i);\n-\t      loc = XNEW (struct sloc);\n-\t      loc->insn = insn;\n-\t      loc->nop = i;\n-\t      scratches.safe_push (loc);\n-\t      bitmap_set_bit (&scratch_bitmap, REGNO (*id->operand_loc[i]));\n-\t      bitmap_set_bit (&scratch_operand_bitmap,\n-\t\t\t      INSN_UID (insn) * MAX_RECOG_OPERANDS + i);\n+\t      lra_register_new_scratch_op (insn, i);\n \t      if (lra_dump_file != NULL)\n \t\tfprintf (lra_dump_file,\n \t\t\t \"Removing SCRATCH in insn #%u (nop %d)\\n\","}, {"sha": "fae312eb7bf67e9c364825b6075b106dc72ddc6d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892927b7762271038bf47dcaf0f4e39dbb7fdf24/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892927b7762271038bf47dcaf0f4e39dbb7fdf24/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=892927b7762271038bf47dcaf0f4e39dbb7fdf24", "patch": "@@ -1,3 +1,8 @@\n+2015-02-27  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/65032\n+\t* g++.dg/pr65032.C: New.\n+\n 2015-02-27  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/65040"}, {"sha": "a62f50b49bf5292a45cd0c774bffc40c43089e20", "filename": "gcc/testsuite/g++.dg/pr65032.C", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892927b7762271038bf47dcaf0f4e39dbb7fdf24/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr65032.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892927b7762271038bf47dcaf0f4e39dbb7fdf24/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr65032.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr65032.C?ref=892927b7762271038bf47dcaf0f4e39dbb7fdf24", "patch": "@@ -0,0 +1,87 @@\n+// { dg-do compile { target i?86-*-* x86_64-*-* } }\n+// { dg-options \"-Os -std=c++11 -fPIC -fstack-protector-strong -fomit-frame-pointer\" }\n+\n+#pragma GCC visibility push(hidden)\n+#pragma GCC visibility push(default)\n+extern \"C\" {\n+  typedef int int64_t __attribute__ ((__mode__ (__DI__)));\n+}\n+enum class nsresult;\n+#pragma GCC visibility pop\n+class A\n+{\n+  float mRawPtr;\n+\n+ public:\n+  A (float *);\n+};\n+class B\n+{\n+ public:\n+  B (int64_t, int, int);\n+};\n+typedef struct\n+{\n+  int channels;\n+} vorbis_info;\n+template <typename _Key> class C\n+{\n+ public:\n+  typedef int size_type;\n+  size_type erase (_Key &);\n+};\n+\n+template <typename _Key> class D\n+{\n+ public:\n+  typedef _Key key_type;\n+  typedef C<key_type> _Rep_type;\n+  _Rep_type _M_t;\n+  typename _Rep_type::size_type\n+    erase (key_type p1)\n+  {\n+    return _M_t.erase (p1);\n+  }\n+};\n+\n+class F\n+{\n+ public:\n+  vorbis_info mInfo;\n+  D<int *> mVorbisPacketSamples;\n+  void ValidateVorbisPacketSamples (int *);\n+  int64_t Time (int64_t);\n+};\n+class G\n+{\n+  nsresult DecodeVorbis (int *);\n+  F *mVorbisState;\n+  int64_t mDecodedAudioFrames;\n+};\n+int fn1 (float ***);\n+void fn2 (int);\n+void\n+F::ValidateVorbisPacketSamples (int *p1)\n+{\n+  mVorbisPacketSamples.erase (p1);\n+}\n+\n+nsresult\n+G::DecodeVorbis (int *p1)\n+{\n+  float **a;\n+  int b;\n+  long long c;\n+  while ((b = fn1 (&a)))\n+    {\n+      mVorbisState->ValidateVorbisPacketSamples (p1);\n+      A (new float);\n+      for (; mVorbisState->mInfo.channels;)\n+\t{\n+\t}\n+      int64_t d = mVorbisState->Time (c - b);\n+      (B (d, b, mVorbisState->mInfo.channels));\n+      mDecodedAudioFrames -= b;\n+      fn2 (b);\n+    }\n+}"}]}