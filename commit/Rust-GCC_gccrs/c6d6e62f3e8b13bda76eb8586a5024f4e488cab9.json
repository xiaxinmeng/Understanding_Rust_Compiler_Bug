{"sha": "c6d6e62f3e8b13bda76eb8586a5024f4e488cab9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZkNmU2MmYzZThiMTNiZGE3NmViODU4NmE1MDI0ZjRlNDg4Y2FiOQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2010-09-25T05:55:59Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2010-09-25T05:55:59Z"}, "message": "interface.c (gfc_match_end_interface): Deal with user defined operators that...\n\n2010-09-24  Steven G. Kargl  < kargl@gcc.gnu.org>\n\n\t* fortran/interface.c (gfc_match_end_interface): Deal with user defined\n\toperators that overload rational operators and C1202.\n\n2010-09-24  Steven G. Kargl  < kargl@gcc.gnu.org>\n\n\t* testsuite/gfortran.dg/operator_c1202.f90: New test.\n\nFrom-SVN: r164616", "tree": {"sha": "6a6e24a82a64416d1e9b911053664b619ba7717e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a6e24a82a64416d1e9b911053664b619ba7717e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6d6e62f3e8b13bda76eb8586a5024f4e488cab9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6d6e62f3e8b13bda76eb8586a5024f4e488cab9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6d6e62f3e8b13bda76eb8586a5024f4e488cab9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6d6e62f3e8b13bda76eb8586a5024f4e488cab9/comments", "author": null, "committer": null, "parents": [{"sha": "3879ef2d2a8c2bd64daec90883ea4e24be767356", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3879ef2d2a8c2bd64daec90883ea4e24be767356", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3879ef2d2a8c2bd64daec90883ea4e24be767356"}], "stats": {"total": 115, "additions": 111, "deletions": 4}, "files": [{"sha": "7b32c5dd038fcad1f05c53bffad8493f576f67ff", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d6e62f3e8b13bda76eb8586a5024f4e488cab9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d6e62f3e8b13bda76eb8586a5024f4e488cab9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c6d6e62f3e8b13bda76eb8586a5024f4e488cab9", "patch": "@@ -1,3 +1,8 @@\n+2010-09-24  Steven G. Kargl  < kargl@gcc.gnu.org>\n+\n+\t* fortran/interface.c (gfc_match_end_interface): Deal with user defined\n+\toperators that overload rational operators and C1202.\n+\n 2010-09-24  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.texi: Add second space after end-of-sentence period;"}, {"sha": "896ad75565ea34b7f9ab7b3a85f37998bd71e8ac", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d6e62f3e8b13bda76eb8586a5024f4e488cab9/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d6e62f3e8b13bda76eb8586a5024f4e488cab9/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=c6d6e62f3e8b13bda76eb8586a5024f4e488cab9", "patch": "@@ -314,12 +314,42 @@ gfc_match_end_interface (void)\n \t{\n \n \t  if (current_interface.op == INTRINSIC_ASSIGN)\n-\t    gfc_error (\"Expected 'END INTERFACE ASSIGNMENT (=)' at %C\");\n+\t    {\n+\t      m = MATCH_ERROR;\n+\t      gfc_error (\"Expected 'END INTERFACE ASSIGNMENT (=)' at %C\");\n+\t    }\n \t  else\n-\t    gfc_error (\"Expecting 'END INTERFACE OPERATOR (%s)' at %C\",\n-\t\t       gfc_op2string (current_interface.op));\n+\t    {\n+\t      char *s1, *s2;\n+\t      s1 = gfc_op2string (current_interface.op);\n+\t      s2 = gfc_op2string (op);\n+\n+\t      /* The following if-statements are used to enforce C1202\n+\t\t from F2003.  */\n+\t      if ((strcmp(s1, \"==\") == 0 && strcmp(s2, \".eq.\") == 0)\n+\t\t  || (strcmp(s1, \".eq.\") == 0 && strcmp(s2, \"==\") == 0))\n+\t\tbreak;\n+\t      if ((strcmp(s1, \"/=\") == 0 && strcmp(s2, \".ne.\") == 0)\n+\t\t  || (strcmp(s1, \".ne.\") == 0 && strcmp(s2, \"/=\") == 0))\n+\t\tbreak;\n+\t      if ((strcmp(s1, \"<=\") == 0 && strcmp(s2, \".le.\") == 0)\n+\t\t  || (strcmp(s1, \".le.\") == 0 && strcmp(s2, \"<=\") == 0))\n+\t\tbreak;\n+\t      if ((strcmp(s1, \"<\") == 0 && strcmp(s2, \".lt.\") == 0)\n+\t\t  || (strcmp(s1, \".lt.\") == 0 && strcmp(s2, \"<\") == 0))\n+\t\tbreak;\n+\t      if ((strcmp(s1, \">=\") == 0 && strcmp(s2, \".ge.\") == 0)\n+\t\t  || (strcmp(s1, \".ge.\") == 0 && strcmp(s2, \">=\") == 0))\n+\t\tbreak;\n+\t      if ((strcmp(s1, \">\") == 0 && strcmp(s2, \".gt.\") == 0)\n+\t\t  || (strcmp(s1, \".gt.\") == 0 && strcmp(s2, \">\") == 0))\n+\t\tbreak;\n \n-\t  m = MATCH_ERROR;\n+\t      m = MATCH_ERROR;\n+\t      gfc_error (\"Expecting 'END INTERFACE OPERATOR (%s)' at %C, \"\n+\t\t\t \"but got %s\", s1, s2);\n+\t    }\n+\t\t\n \t}\n \n       break;"}, {"sha": "3815b943618ec9f0a8c86847757082af1f369254", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d6e62f3e8b13bda76eb8586a5024f4e488cab9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d6e62f3e8b13bda76eb8586a5024f4e488cab9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c6d6e62f3e8b13bda76eb8586a5024f4e488cab9", "patch": "@@ -1,3 +1,7 @@\n+2010-09-24  Steven G. Kargl  < kargl@gcc.gnu.org>\n+\n+\t* testsuite/gfortran.dg/operator_c1202.f90: New test.\n+\n 2010-09-24  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.dg/tree-ssa/leaf.c: New testcase."}, {"sha": "c53079ac5d84aa211874d81abd88f5d6f08052ba", "filename": "gcc/testsuite/gfortran.dg/operator_c1202.f90", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d6e62f3e8b13bda76eb8586a5024f4e488cab9/gcc%2Ftestsuite%2Fgfortran.dg%2Foperator_c1202.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d6e62f3e8b13bda76eb8586a5024f4e488cab9/gcc%2Ftestsuite%2Fgfortran.dg%2Foperator_c1202.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Foperator_c1202.f90?ref=c6d6e62f3e8b13bda76eb8586a5024f4e488cab9", "patch": "@@ -0,0 +1,68 @@\n+! { dg-do compile }\n+module op\n+\n+   implicit none\n+\n+   type a\n+      integer i\n+   end type a\n+\n+   type b\n+      real i\n+   end type b\n+\n+   interface operator(==)\n+      module procedure f1\n+   end interface operator(.eq.)\n+   interface operator(.eq.)\n+      module procedure f2\n+   end interface operator(==)\n+\n+   interface operator(/=)\n+      module procedure f1\n+   end interface operator(.ne.)\n+   interface operator(.ne.)\n+      module procedure f2\n+   end interface operator(/=)\n+\n+   interface operator(<=)\n+      module procedure f1\n+   end interface operator(.le.)\n+   interface operator(.le.)\n+      module procedure f2\n+   end interface operator(<=)\n+\n+   interface operator(<)\n+      module procedure f1\n+   end interface operator(.lt.)\n+   interface operator(.lt.)\n+      module procedure f2\n+   end interface operator(<)\n+\n+   interface operator(>=)\n+      module procedure f1\n+   end interface operator(.ge.)\n+   interface operator(.ge.)\n+      module procedure f2\n+   end interface operator(>=)\n+\n+   interface operator(>)\n+      module procedure f1\n+   end interface operator(.gt.)\n+   interface operator(.gt.)\n+      module procedure f2\n+   end interface operator(>)\n+\n+   contains\n+\n+      function f2(x,y)\n+         logical f2\n+         type(a), intent(in) :: x, y\n+      end function f2\n+\n+      function f1(x,y)\n+         logical f1\n+         type(b), intent(in) :: x, y\n+      end function f1\n+\n+end module op"}]}