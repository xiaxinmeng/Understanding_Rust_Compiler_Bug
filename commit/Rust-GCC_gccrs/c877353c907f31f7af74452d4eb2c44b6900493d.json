{"sha": "c877353c907f31f7af74452d4eb2c44b6900493d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg3NzM1M2M5MDdmMzFmN2FmNzQ0NTJkNGViMmM0NGI2OTAwNDkzZA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-10-11T21:06:19Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-10-11T21:06:19Z"}, "message": "re PR rtl-optimization/12260 (ICE in output_operand: invalid expression as operand)\n\n\n\tPR optimization/12260\n\t* simplify-rtx.c (simplify_unary_operation): Simplify all unary\n\toperations through CONST nodes.  Optimize (neg (plus X C)) as\n\t(minus -C X) for constant values C.\n\t(simplify_binary_operation): Optimize (minus (neg X) C) as\n\t(minus -C X) for constant values C.\n\t(simplify_plus_minus): Avoid creating (neg (const (plus X C)),\n\tinstead create (minus -C X).\n\n\t* gcc.c-torture/compile/20031011-2.c: New test case.\n\nFrom-SVN: r72379", "tree": {"sha": "7cecf6ae296fc7a727d050bc66fc9a49652ab40e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cecf6ae296fc7a727d050bc66fc9a49652ab40e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c877353c907f31f7af74452d4eb2c44b6900493d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c877353c907f31f7af74452d4eb2c44b6900493d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c877353c907f31f7af74452d4eb2c44b6900493d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c877353c907f31f7af74452d4eb2c44b6900493d/comments", "author": null, "committer": null, "parents": [{"sha": "e3be1116138b7a387420d370e9f6fddcc395f283", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3be1116138b7a387420d370e9f6fddcc395f283", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3be1116138b7a387420d370e9f6fddcc395f283"}], "stats": {"total": 63, "additions": 62, "deletions": 1}, "files": [{"sha": "4251bf3a741ff062220b4b10f9b5228d4f8c7fd5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c877353c907f31f7af74452d4eb2c44b6900493d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c877353c907f31f7af74452d4eb2c44b6900493d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c877353c907f31f7af74452d4eb2c44b6900493d", "patch": "@@ -1,3 +1,14 @@\n+2003-10-11  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR optimization/12260\n+\t* simplify-rtx.c (simplify_unary_operation): Simplify all unary\n+\toperations through CONST nodes.  Optimize (neg (plus X C)) as\n+\t(minus -C X) for constant values C.\n+\t(simplify_binary_operation): Optimize (minus (neg X) C) as\n+\t(minus -C X) for constant values C.\n+\t(simplify_plus_minus): Avoid creating (neg (const (plus X C)),\n+\tinstead create (minus -C X).\n+\n 2003-10-11  Roger Sayle  <roger@eyesopen.com>\n \n \t* expr.c (expand_expr <PLUS_EXPR>): Let expand_operands call"}, {"sha": "22ba167d80e8aaa4279bf25db9ba512e099cef8d", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c877353c907f31f7af74452d4eb2c44b6900493d/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c877353c907f31f7af74452d4eb2c44b6900493d/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=c877353c907f31f7af74452d4eb2c44b6900493d", "patch": "@@ -407,6 +407,8 @@ simplify_unary_operation (enum rtx_code code, enum machine_mode mode,\n \t  return gen_rtx_CONST_VECTOR (mode, v);\n \t}\n     }\n+  else if (GET_CODE (op) == CONST)\n+    return simplify_unary_operation (code, mode, XEXP (op, 0), op_mode);\n \n   if (VECTOR_MODE_P (mode) && GET_CODE (trueop) == CONST_VECTOR)\n     {\n@@ -971,11 +973,22 @@ simplify_unary_operation (enum rtx_code code, enum machine_mode mode,\n \t    return simplify_gen_binary (MINUS, mode, XEXP (op, 1),\n \t\t\t\t\tXEXP (op, 0));\n \n-\t  /* (neg (plus A B)) is canonicalized to (minus (neg A) B).  */\n \t  if (GET_CODE (op) == PLUS\n \t      && !HONOR_SIGNED_ZEROS (mode)\n \t      && !HONOR_SIGN_DEPENDENT_ROUNDING (mode))\n \t    {\n+\t      /* (neg (plus A C)) is simplified to (minus -C A).  */\n+\t      if (GET_CODE (XEXP (op, 1)) == CONST_INT\n+\t\t  || GET_CODE (XEXP (op, 1)) == CONST_DOUBLE)\n+\t\t{\n+\t\t  temp = simplify_unary_operation (NEG, mode, XEXP (op, 1),\n+\t\t\t\t\t\t   mode);\n+\t\t  if (temp)\n+\t\t    return simplify_gen_binary (MINUS, mode, temp,\n+\t\t\t\t\t\tXEXP (op, 0));\n+\t\t}\n+\n+\t      /* (neg (plus A B)) is canonicalized to (minus (neg A) B).  */\n \t      temp = simplify_gen_unary (NEG, mode, XEXP (op, 0), mode);\n \t      return simplify_gen_binary (MINUS, mode, temp, XEXP (op, 1));\n \t    }\n@@ -1572,6 +1585,16 @@ simplify_binary_operation (enum rtx_code code, enum machine_mode mode,\n \t  if (GET_CODE (op1) == NEG)\n \t    return simplify_gen_binary (PLUS, mode, op0, XEXP (op1, 0));\n \n+\t  /* (-x - c) may be simplified as (-c - x).  */\n+\t  if (GET_CODE (op0) == NEG\n+\t      && (GET_CODE (op1) == CONST_INT\n+\t\t  || GET_CODE (op1) == CONST_DOUBLE))\n+\t    {\n+\t      tem = simplify_unary_operation (NEG, mode, op1, mode);\n+\t      if (tem)\n+\t\treturn simplify_gen_binary (MINUS, mode, tem, XEXP (op0, 0));\n+\t    }\n+\n \t  /* If one of the operands is a PLUS or a MINUS, see if we can\n \t     simplify this by the associative law.\n \t     Don't use the associative law for floating point.\n@@ -2375,6 +2398,13 @@ simplify_plus_minus (enum rtx_code code, enum machine_mode mode, rtx op0,\n   /* Sort the operations based on swap_commutative_operands_p.  */\n   qsort (ops, n_ops, sizeof (*ops), simplify_plus_minus_op_data_cmp);\n \n+  /* Create (minus -C X) instead of (neg (const (plus X C))).  */\n+  if (n_ops == 2\n+      && GET_CODE (ops[1].op) == CONST_INT\n+      && CONSTANT_P (ops[0].op)\n+      && ops[0].neg)\n+    return gen_rtx_fmt_ee (MINUS, mode, ops[1].op, ops[0].op);\n+  \n   /* We suppressed creation of trivial CONST expressions in the\n      combination loop to avoid recursion.  Create one manually now.\n      The combination loop should have ensured that there is exactly"}, {"sha": "ad9bafce35c0c927db38bd4086dba81957daf1a4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c877353c907f31f7af74452d4eb2c44b6900493d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c877353c907f31f7af74452d4eb2c44b6900493d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c877353c907f31f7af74452d4eb2c44b6900493d", "patch": "@@ -1,3 +1,8 @@\n+2003-10-11  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR optimization/12260\n+\t* gcc.c-torture/compile/20031011-2.c: New test case.\n+\n 2003-10-11  Roger Sayle  <roger@eyesopen.com>\n \n \t* gcc.c-torture/execute/20031011-1.c: New testcase."}, {"sha": "02684550959c81055d34bc74bd2c9af926ab597b", "filename": "gcc/testsuite/gcc.c-torture/compile/20031011-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c877353c907f31f7af74452d4eb2c44b6900493d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20031011-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c877353c907f31f7af74452d4eb2c44b6900493d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20031011-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20031011-2.c?ref=c877353c907f31f7af74452d4eb2c44b6900493d", "patch": "@@ -0,0 +1,15 @@\n+/* PR optimization/12260.  */\n+\n+extern int f(void);\n+extern int g(int);\n+\n+static char buf[512];\n+void h(int l) {\n+    while (l) {\n+        char *op = buf;\n+        if (f() == 0)\n+            break;\n+        if (g(op - buf + 1))\n+            break;\n+    }\n+}"}]}