{"sha": "d7068b3d2acc18be3975a44362bc34ba3d9dc2e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDcwNjhiM2QyYWNjMThiZTM5NzVhNDQzNjJiYzM0YmEzZDlkYzJlMQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-06-05T00:17:16Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-06-05T00:17:16Z"}, "message": "Makefile.in (QMTESTRUNFLAGS): Set for DejaGNU emulation.\n\n\t* Makefile.in (QMTESTRUNFLAGS): Set for DejaGNU emulation.\n\t(QMTEST_GPP_TESTS): Use \"g++\" by default.\n\t(stamp-qmtest): Tweak database creation.\n\t(QMTEST_DIR/context): Update context file format.\n\t(qmtest-g++): Tweak command-line.\n\n\t* README.QMTEST: Update.\n\nFrom-SVN: r67474", "tree": {"sha": "3ee7fcc4788b5ff0ecadb13a8cfab18d9dc64607", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ee7fcc4788b5ff0ecadb13a8cfab18d9dc64607"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7068b3d2acc18be3975a44362bc34ba3d9dc2e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7068b3d2acc18be3975a44362bc34ba3d9dc2e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7068b3d2acc18be3975a44362bc34ba3d9dc2e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7068b3d2acc18be3975a44362bc34ba3d9dc2e1/comments", "author": null, "committer": null, "parents": [{"sha": "76c05f8f30dcc73ac831ee66a454403ccf33eead", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76c05f8f30dcc73ac831ee66a454403ccf33eead", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76c05f8f30dcc73ac831ee66a454403ccf33eead"}], "stats": {"total": 229, "additions": 103, "deletions": 126}, "files": [{"sha": "a3a252aa45f588120ecc333c5e10c8b276582172", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7068b3d2acc18be3975a44362bc34ba3d9dc2e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7068b3d2acc18be3975a44362bc34ba3d9dc2e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7068b3d2acc18be3975a44362bc34ba3d9dc2e1", "patch": "@@ -1,3 +1,11 @@\n+2003-06-04  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* Makefile.in (QMTESTRUNFLAGS): Set for DejaGNU emulation.\n+\t(QMTEST_GPP_TESTS): Use \"g++\" by default.\n+\t(stamp-qmtest): Tweak database creation.\n+\t(QMTEST_DIR/context): Update context file format.\n+\t(qmtest-g++): Tweak command-line.\n+\n 2003-06-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* Makefile.in (varasm.o): Don't set -Wno-error."}, {"sha": "76d2c8d30db109f2ed3213e6a008c5b425569adc", "filename": "gcc/Makefile.in", "status": "modified", "additions": 18, "deletions": 34, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7068b3d2acc18be3975a44362bc34ba3d9dc2e1/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7068b3d2acc18be3975a44362bc34ba3d9dc2e1/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=d7068b3d2acc18be3975a44362bc34ba3d9dc2e1", "patch": "@@ -1,7 +1,7 @@\n # Makefile for GNU Compiler Collection\n # Run 'configure' to generate Makefile from Makefile.in\n \n-# Copyright (C) 1987, 1988, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997\n+# Copyright (C) 1987, 1988, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997,\n # 1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n \n #This file is part of GCC.\n@@ -3378,13 +3378,13 @@ QMTEST_PATH=qmtest\n QMTESTFLAGS=\n \n # The flags to pass to \"qmtest run\".\n-QMTESTRUNFLAGS=\n+QMTESTRUNFLAGS=-f none --result-stream dejagnu_stream.DejaGNUStream\n \n # The command to use to invoke qmtest.\n QMTEST=${QMTEST_PATH} ${QMTESTFLAGS}\n \n # The tests (or suites) to run.\n-QMTEST_GPP_TESTS=gpp\n+QMTEST_GPP_TESTS=g++\n \n # The subdirectory of the OBJDIR that will be used to store the QMTest\n # test database configuration and that will be used for temporary\n@@ -3393,48 +3393,32 @@ QMTEST_DIR=qmtestsuite\n \n # Create the QMTest database configuration.\n ${QMTEST_DIR} stamp-qmtest:\n-\tdebug_options=\"\"; \\\n-\t    ${STAMP} empty.C; \\\n-\t    for option in \\\n-\t        -gdwarf-2 -gstabs -gstabs+ -gxcoff -gxcoff+ -gcoff; do \\\n-\t\t(./cc1plus -q $${option} empty.C 2>&1 | \\\n-\t\t     grep \"unknown or unsupported -g option\" > /dev/null) || \\\n-\t\tdebug_options=\"$${debug_options}$${option} \"; done; \\\n-\t    ${QMTEST} -D ${QMTEST_DIR} create-tdb \\\n-\t        -c gcc_database.GCCDatabase \\\n-\t        -a GCCDatabase.testsuite_root=`cd ${srcdir}/testsuite && pwd` \\\n-\t        -a GCCDatabase.debug_options=\"$${debug_options}\"\n-\trm -f empty.C empty.s\n-\t$(STAMP) stamp-qmtest\n+\t${QMTEST} -D ${QMTEST_DIR} create-tdb \\\n+\t    -c gcc_database.GCCDatabase \\\n+            -a srcdir=`cd ${srcdir}/testsuite && pwd` && \\\n+\t    $(STAMP) stamp-qmtest\n \n # Create the QMTest context file.\n ${QMTEST_DIR}/context: stamp-qmtest\n-\techo \"GCCTest.flags=-B${objdir}\" >> $@\n-\techo \"GCCTest.objdir=${objdir}/..\" >> $@\n-\techo \"GCCTest.host=${host_canonical}\" >> $@\n-\techo \"GCCTest.target=${target}\" >> $@\n-\techo \"GCCTest.gcov=${objdir}/gcov\" >> $@\n-\techo \"GPPTest.gpp=${objdir}/g++\" >> $@\n-\techo \"DGTest.demangler=${objdir}/c++filt\" >> $@\n+\trm -f $@\n+\techo \"CompilerTable.languages=c cplusplus\" >> $@\n+\techo \"CompilerTable.c_kind=GCC\" >> $@\n+\techo \"CompilerTable.c_path=${objdir}/xgcc\" >> $@\n+\techo \"CompilerTable.c_options=-B${objdir}/\" >> $@\n+\techo \"CompilerTable.cplusplus_kind=GCC\" >> $@\n+\techo \"CompilerTable.cplusplus_path=${objdir}/g++\" >> $@\n+\techo \"CompilerTable.cplusplus_options=-B${objdir}/\" >> $@\n+\techo \"DejaGNUTest.target=$(target)\" >> $@\n \n # Run the G++ testsuite using QMTest.\n-qmtest-g++: ${QMTEST_DIR}/context ${QMTEST_DIR}/gpp-expected.qmr\n+qmtest-g++: ${QMTEST_DIR}/context\n \tcd ${QMTEST_DIR} && ${QMTEST} run ${QMTESTRUNFLAGS} -C context \\\n-\t   -o gpp.qmr -O gpp-expected.qmr \\\n-\t   ${QMTEST_GPP_TESTS}\n+\t   -o g++.qmr ${QMTEST_GPP_TESTS}\n \n # Use the QMTest GUI.\n qmtest-gui: ${QMTEST_DIR}/context\n \tcd ${QMTEST_DIR} && ${QMTEST} gui -C context\n \n-# Build the set of expected G++ failures.\n-${QMTEST_DIR}/gpp-expected.qmr: ${QMTEST_DIR}/context\n-\techo \"Determining expected results...\"\n-\tcd ${QMTEST_DIR} && ${QMTEST} run ${QMTESTRUNFLAGS} -C context \\\n-           -c \"GCCTest.generate_xfails=1\" -o gpp-expected.qmr \\\n-\t   ${QMTEST_GPP_TESTS} \\\n-\t   > /dev/null\n-\n .PHONY: qmtest-g++\n \n # Run Paranoia on real.c."}, {"sha": "9781d57008f28ca543337c632f940bf39c5b61d3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7068b3d2acc18be3975a44362bc34ba3d9dc2e1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7068b3d2acc18be3975a44362bc34ba3d9dc2e1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d7068b3d2acc18be3975a44362bc34ba3d9dc2e1", "patch": "@@ -1,3 +1,7 @@\n+2003-06-04  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* README.QMTEST: Update.\n+\n 2003-06-04  Richard Henderson  <rth@redhat.com>\n \n         * gcc.dg/cleanup-1.c: New."}, {"sha": "19bd1a304976be3c97f14889a65dfc7fe69c8dde", "filename": "gcc/testsuite/README.QMTEST", "status": "modified", "additions": 73, "deletions": 92, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7068b3d2acc18be3975a44362bc34ba3d9dc2e1/gcc%2Ftestsuite%2FREADME.QMTEST", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7068b3d2acc18be3975a44362bc34ba3d9dc2e1/gcc%2Ftestsuite%2FREADME.QMTEST", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FREADME.QMTEST?ref=d7068b3d2acc18be3975a44362bc34ba3d9dc2e1", "patch": "@@ -10,51 +10,50 @@ officially supported testing procedure.  Therefore, you must run the\n tests using DejaGNU (with \"make check-g++\") before committing changes\n that affect G++.\n \n-Differences from DejaGNU\n-========================\n-\n-Although QMTest can be used to run the G++ test suite, it works\n-somewhat differently from DejaGNU.  In particular:\n-\n-- In DejaGNU, a single source file contains many tests.  Each \n-  line where a diagnostic is expected is considered a separate\n-  test.  Testing for successful compilation and testing for \n-  successful execution of the generated program are considered\n-  separate tests.  Thus, a test \"test.C\" could contain, say, \n-  seven tests; some of which might pass and some of which might\n-  fail.\n-\n-  With QMTest, each source file is considered a single test.  If any\n-  of the seven sub-tests fail, the entire test is considered to fail.\n-  However, QMTest does present information about *why* the test\n-  failed, so the same information is effectively available.\n-\n-  It is true that, therefore, causing an already failing test to \"fail\n-  more\" is not immediately detectable through an additional unexpected\n-  failure messages when using QMTest.  On the other hand, most people\n-  seem to think of each source file as \"a test\", not \"twelve tests\",\n-  so the model QMTest uses may be more natural.\n-\n-- In DejaGNU, tests themselves keep track of expected and unexpected\n-  failures.  The QMTest philosophy is that expected failures should be\n-  stored separately from the tests themselves; in particular, that\n-  tonights results can be tomorrow's expectations.  In order to\n-  preserve compatibility with DejaGNU, the first time you use QMTest\n-  to test G++, QMTest computes the set of expected failures indicated\n-  by the tests, and then compares the actual results with these\n-  results.  Therefore, if you change the expected failure notations in\n-  the DejaGNU tests, you must rebuild the set of expected failures.\n-\n-  To do this, remove the file \"qmtestsuite/gpp-expected.qmr\".  Then,\n-  when you rerun the tests, the expected failures will be\n-  automatically recalculated.\n+QMTest emulates DejaGNU behavior very closely when running the tests.\n+\n+QMTest has two output modes: a DejaGNU emulation mode and a native\n+QMTest mode.\n+\n+In the DejaGNU mode, you should receive output that is almost exactly\n+the same as the DejaGNU output; in particular, you should see the same\n+number of passes, failures, etc.  When using the DejaGNU-style output,\n+QMTest uses the \"xfail\" indications in the test cases to determine\n+which tests are expected to pass and which are expected to fail, and\n+presents that information in the same way as DejaGNU.\n+\n+In the QMTest mode, the number of passes and failures will be\n+different from that obtained when using DejaGNU.  The reason is that a\n+single source file may contain multiple DejaGNU tests.  In DejaGNU,\n+each line where a diagnostic is expected is considered a separate\n+test.  Testing for successful compilation and testing for successful\n+execution of the generated program are considered separate tests.  So,\n+a single source file \"test.C\" could contain, say, seven tests; some of\n+which might pass and some of which might fail.\n+\n+In the QMTest mode, each source file is considered a single test.  If\n+any of the seven sub-tests fail, the entire test is considered to\n+fail.  However, QMTest does present information about *why* the test\n+failed, so the same information is effectively available.\n+\n+In the QMTest mode, whether or not a test is expected to fail is\n+determined not by an indication in the test, but rather by comparing\n+the new results to the results of a previous run.  Testing for whether\n+a change caused a regression is very simple: run the tests before\n+making the change, run them again after making the change, and let\n+QMTest compare the results.\n+\n+The mode chosen only affects the output from QMTest, not how it runs\n+the tests or how it stores the data.  Therefore, if you choose to run\n+in the QMTest mode and later want to get the DejaGNU style output, or\n+vice versa, you can do that as described below.\n \n Setting Up\n ==========\n \n You must download and install the following software:\n \n-- Python 2.1 (or greater)\n+- Python 2.2 (or greater)\n \n   See http://www.python.org.\n \n@@ -63,50 +62,35 @@ You must download and install the following software:\n \n   Installation instructions are available on the web-site.\n \n-- QMTest 1.1.4 (or greater)\n+- A current version of QMTest.  No released version provides all of\n+  the functionality required, so you must obtain QMTest from CVS.\n \n-  See http://www.qmtest.com.\n+  To do that, follow the instructions at:\n \n-  QMTest is available at:\n+    http://www.codesourcery.com/qm/qmtest_development\n \n-    http://www.codesourcery.com/qm/qmtest_download\n-    \n-  or:\n-\n-    ftp://ftp.codesourcery.com/pub/qmtest\n-\n-  Installation instructions are available on the web-site.\n-\n-- QMTC 1.1\n+  Installation instructions are available in the file called README\n+  after you check out QMTest.\n \n-  This package is available from:\n+- The \"qmtc\" and \"qmtest_gcc\" QMTest support packages.  These are\n+  available from the same CVS repository as QMTest.  For example, to\n+  check out \"qmtc\", do:\n \n-  ftp://ftp.codesourcery.com/pub/qmtest/qmtc/qmtc-<version>.tar.gz\n-\n-  See the file called INSTALL in the distribution.\n+    cvs -d :pserver:anoncvs@cvs.codesourcery.com:/home/qm/Repository \\\n+      co qmtc\n \n+  You do not have to install these packages; you need only check them\n+  out.\n+    \n Running the Tests\n =================\n \n-To run the tests, run \"make qmtest-g++\" in the gcc directory of your\n-build tree.  The first time that you do this, QMTest will calculate\n-the set of tests that are expected to fail on your platform, so it\n-will take several minutes before you see any test results.  After the\n-first time, QMTest will start running the tests much more quickly.\n-\n-If the test summary printed at the test run indicates no unexpected\n-failures, then G++ is behaving as expected on your target.  (Some\n-unexpected passes are normal.)\n-\n-You can obtain detailed information about why tests failed in one \n-of two ways: \n+First, you must set QMTEST_CLASS_PATH so that it can find the qmtc and\n+qmtest_gcc support packages:\n+ \n+  export QMTEST_CLASS_PATH=/path/to/qmtc:/path/to/qmtest_gcc\n \n-1. By invoking QMTest with the \"-f full\" option.  For example:\n-\n-     make QMTESTRUNFLAGS=\"-f full\" qmtest-g++\n-\n-2. Examining the log file qmtestsuite/gpp.qmr after the tests have\n-   run.\n+The, run \"make qmtest-g++\" in the gcc directory of your build tree.\n \n Here are some more advanced usage instructions:\n \n@@ -117,7 +101,7 @@ Here are some more advanced usage instructions:\n \n    will run only the tests in the g++.dg subdirectory, and:\n \n-     make QMTEST_GPP_TESTS=\"g++.dg/special/conpr1.C \\\n+     make QMTEST_GPP_TESTS=\"g++.dg/special/conpr-1.C \\\n                             g++.old-deja/g++.other/access2.C\"\n           qmtest-g++\n \n@@ -132,10 +116,16 @@ Here are some more advanced usage instructions:\n \n       qmtest -v run -f full ... \n \n+   (The \"-f full\" mode will provide detailed information about each\n+   test as it runs.)\n+\n 3. To run the compiler with particular flags, use QMTESTRUNFLAGS to\n-   set the QMTest context variable \"GPPTest.flags\", like this:\n+   set the QMTest context variable \"CompilerTable.cplusplus_options\",\n+   like this:\n \n-      make QMTESTRUNFLAGS='-c GPPTest.flags=\"-funroll-loops\"' qmtest-g++\n+      make \\\n+        QMTESTRUNFLAGS='-c CompilerTable.cplusplus_options=\"-funroll-loops\"' \\\n+        qmtest-g++\n \n    The compiler will then use the \"-funroll-loops\" switch when\n    compiling.\n@@ -149,7 +139,7 @@ Here are some more advanced usage instructions:\n \n       make qmtest-gui\n \n-   (Note that this will run the program called \"netscape\" in your path.\n+   (Note that this will run the program called \"mozilla\" in your path.\n    If you want to use another browser, you must configure qmtest as\n    described in its manual.)\n \n@@ -168,20 +158,11 @@ Here are some more advanced usage instructions:\n    across multiple machines; for more information see the QMTest\n    manual.)\n \n-7. If you are testing a cross compiler, you must specify an interpreter\n-   that is capable of running the generated program.  It must be a \n-   program \"p\" such that:\n-\n-      p program arg1 arg2 arg3 ...\n-\n-   behaves exactly like running:\n-\n-      program arg1 arg2 arg3 ...\n-\n-   would on the target machine.  You specify this program via the \n-   \"CompilerTest.interpreter\" context variable:\n-\n-      make QMTESTRUNFLAGS='-c CompilerTest.interpreter=/path/to/interpreter'\n-           qmtest-g++\n+7. If a test (say \"g++.dg/abi/bitfield1.C\") fails, and you want to get\n+   more detailed information, you can do:\n \n+      cd qmtestsuite\n+      qmtest summarize g++.qmr g++.dg/abi/bitfield1.C\n \n+   to get more information about the commands that were run and the\n+   output produced."}]}