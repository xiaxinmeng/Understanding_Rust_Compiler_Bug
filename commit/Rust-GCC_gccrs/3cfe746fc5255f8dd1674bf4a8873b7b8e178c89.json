{"sha": "3cfe746fc5255f8dd1674bf4a8873b7b8e178c89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NmZTc0NmZjNTI1NWY4ZGQxNjc0YmY0YTg4NzNiN2I4ZTE3OGM4OQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2020-11-17T00:25:12Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2020-11-17T00:25:12Z"}, "message": "float.h: C2x NaN and Inf macros\n\nC2x adds macros for NaNs and infinities to <float.h>, some of them\npreviously in <math.h> (and some still in <math.h> as well in C2x as\nan obsolescent feature).  Add these macros to GCC's <float.h>\nimplementation.\n\nThis omits the macros for DFP signaling NaNs, leaving those to be\nadded in a separate patch.  However, it includes the _FloatN /\n_FloatNx macros (conditional on __STDC_WANT_IEC_60559_TYPES_EXT__) in\nthe current draft version of the integration of TS 18661-3 into C2x as\nan Annex.\n\nAs GCC allows duplicate macro definitions with different expansions in\nsystem headers, it should be OK if <math.h> defines INFINITY or NAN\nwith a slightly different expansion (e.g. different choice of whether\nthere is whitespace between tokens); tests are added including\n<float.h> and <math.h> in either order.  Because <float.h> uses #undef\non all macros before defining them, even with -Wsystem-headers there\ncould only ever be issues when <math.h> is included after <float.h>.\n\nBootstrapped with no regressions on x86_64-pc-linux-gnu.\n\ngcc/\n2020-11-17  Joseph Myers  <joseph@codesourcery.com>\n\n\t* ginclude/float.h (INFINITY, NAN, FLT_SNAN, DBL_SNAN, LDBL_SNAN)\n\t(FLT16_SNAN, FLT32_SNAN, FLT64_SNAN, FLT128_SNAN, FLT32X_SNAN)\n\t(FLT64X_SNAN, FLT128X_SNAN, DEC_INFINITY, DEC_NAN): New C2x\n\tmacros.\n\t* doc/sourcebuild.texi (Effective-Target Keywords): Document inff.\n\ngcc/testsuite/\n2020-11-17  Joseph Myers  <joseph@codesourcery.com>\n\n\t* lib/target-supports.exp (check_effective_target_inff): New.\n\t* gcc.dg/c11-float-4.c, gcc.dg/c11-float-5.c,\n\tgcc.dg/c11-float-dfp-2.c, gcc.dg/c2x-float-2.c,\n\tgcc.dg/c2x-float-3.c, gcc.dg/c2x-float-4.c, gcc.dg/c2x-float-5.c,\n\tgcc.dg/c2x-float-6.c, gcc.dg/c2x-float-7.c, gcc.dg/c2x-float-8.c,\n\tgcc.dg/c2x-float-9.c, gcc.dg/c2x-float-no-dfp-3.c,\n\tgcc.dg/c2x-float-no-dfp-4.c, gcc.dg/dfp/c2x-float-dfp-4.c,\n\tgcc.dg/dfp/c2x-float-dfp-5.c, gcc.dg/dfp/c2x-float-dfp-6.c,\n\tgcc.dg/torture/float128-nan-floath.c,\n\tgcc.dg/torture/float128x-nan-floath.c,\n\tgcc.dg/torture/float16-nan-floath.c,\n\tgcc.dg/torture/float32-nan-floath.c,\n\tgcc.dg/torture/float32x-nan-floath.c,\n\tgcc.dg/torture/float64-nan-floath.c,\n\tgcc.dg/torture/float64x-nan-floath.c,\n\tgcc.dg/torture/floatn-nan-floath.h: New tests.", "tree": {"sha": "f0d2a626b8a10362ae2d8a09ba7ed66879fbf81b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0d2a626b8a10362ae2d8a09ba7ed66879fbf81b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29c5d9ceb9bf7416b6f6b976879ac0dc60701904", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29c5d9ceb9bf7416b6f6b976879ac0dc60701904", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29c5d9ceb9bf7416b6f6b976879ac0dc60701904"}], "stats": {"total": 585, "additions": 585, "deletions": 0}, "files": [{"sha": "566fda02c306b9b6232025de32986b8d990862f9", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=3cfe746fc5255f8dd1674bf4a8873b7b8e178c89", "patch": "@@ -1443,6 +1443,10 @@ Target has runtime support for any options added with\n @item inf\n Target supports floating point infinite (@code{inf}) for type\n @code{double}.\n+\n+@item inff\n+Target supports floating point infinite (@code{inf}) for type\n+@code{float}.\n @end table\n @subsubsection Fortran-specific attributes\n "}, {"sha": "77446995515ad5dea4165735e4484d2489dd04ef", "filename": "gcc/ginclude/float.h", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Fginclude%2Ffloat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Fginclude%2Ffloat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Ffloat.h?ref=3cfe746fc5255f8dd1674bf4a8873b7b8e178c89", "patch": "@@ -248,6 +248,32 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define DBL_NORM_MAX\t__DBL_NORM_MAX__\n #define LDBL_NORM_MAX\t__LDBL_NORM_MAX__\n \n+/* Infinity in type float, or overflow if infinity not supported.  */\n+#undef INFINITY\n+#define INFINITY\t(__builtin_inff ())\n+\n+/* Quiet NaN, if supported for float.  */\n+#if __FLT_HAS_QUIET_NAN__\n+#undef NAN\n+#define NAN\t\t(__builtin_nanf (\"\"))\n+#endif\n+\n+/* Signaling NaN, if supported for each type.  All formats supported\n+   by GCC support either both quiet and signaling NaNs, or neither\n+   kind of NaN.  */\n+#if __FLT_HAS_QUIET_NAN__\n+#undef FLT_SNAN\n+#define FLT_SNAN\t(__builtin_nansf (\"\"))\n+#endif\n+#if __DBL_HAS_QUIET_NAN__\n+#undef DBL_SNAN\n+#define DBL_SNAN\t(__builtin_nans (\"\"))\n+#endif\n+#if __LDBL_HAS_QUIET_NAN__\n+#undef LDBL_SNAN\n+#define LDBL_SNAN\t(__builtin_nansl (\"\"))\n+#endif\n+\n #endif /* C2X */\n \n #ifdef __STDC_WANT_IEC_60559_BFP_EXT__\n@@ -284,6 +310,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define FLT16_DECIMAL_DIG\t__FLT16_DECIMAL_DIG__\n #undef FLT16_TRUE_MIN\n #define FLT16_TRUE_MIN\t\t__FLT16_DENORM_MIN__\n+#if defined __STDC_VERSION__ && __STDC_VERSION__ > 201710L\n+#undef FLT16_SNAN\n+#define FLT16_SNAN\t(__builtin_nansf16 (\"\"))\n+#endif /* C2X */\n #endif /* __FLT16_MANT_DIG__.  */\n \n #ifdef __FLT32_MANT_DIG__\n@@ -309,6 +339,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define FLT32_DECIMAL_DIG\t__FLT32_DECIMAL_DIG__\n #undef FLT32_TRUE_MIN\n #define FLT32_TRUE_MIN\t\t__FLT32_DENORM_MIN__\n+#if defined __STDC_VERSION__ && __STDC_VERSION__ > 201710L\n+#undef FLT32_SNAN\n+#define FLT32_SNAN\t(__builtin_nansf32 (\"\"))\n+#endif /* C2X */\n #endif /* __FLT32_MANT_DIG__.  */\n \n #ifdef __FLT64_MANT_DIG__\n@@ -334,6 +368,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define FLT64_DECIMAL_DIG\t__FLT64_DECIMAL_DIG__\n #undef FLT64_TRUE_MIN\n #define FLT64_TRUE_MIN\t\t__FLT64_DENORM_MIN__\n+#if defined __STDC_VERSION__ && __STDC_VERSION__ > 201710L\n+#undef FLT64_SNAN\n+#define FLT64_SNAN\t(__builtin_nansf64 (\"\"))\n+#endif /* C2X */\n #endif /* __FLT64_MANT_DIG__.  */\n \n #ifdef __FLT128_MANT_DIG__\n@@ -359,6 +397,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define FLT128_DECIMAL_DIG\t__FLT128_DECIMAL_DIG__\n #undef FLT128_TRUE_MIN\n #define FLT128_TRUE_MIN\t\t__FLT128_DENORM_MIN__\n+#if defined __STDC_VERSION__ && __STDC_VERSION__ > 201710L\n+#undef FLT128_SNAN\n+#define FLT128_SNAN\t(__builtin_nansf128 (\"\"))\n+#endif /* C2X */\n #endif /* __FLT128_MANT_DIG__.  */\n \n #ifdef __FLT32X_MANT_DIG__\n@@ -384,6 +426,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define FLT32X_DECIMAL_DIG\t__FLT32X_DECIMAL_DIG__\n #undef FLT32X_TRUE_MIN\n #define FLT32X_TRUE_MIN\t\t__FLT32X_DENORM_MIN__\n+#if defined __STDC_VERSION__ && __STDC_VERSION__ > 201710L\n+#undef FLT32X_SNAN\n+#define FLT32X_SNAN\t(__builtin_nansf32x (\"\"))\n+#endif /* C2X */\n #endif /* __FLT32X_MANT_DIG__.  */\n \n #ifdef __FLT64X_MANT_DIG__\n@@ -409,6 +455,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define FLT64X_DECIMAL_DIG\t__FLT64X_DECIMAL_DIG__\n #undef FLT64X_TRUE_MIN\n #define FLT64X_TRUE_MIN\t\t__FLT64X_DENORM_MIN__\n+#if defined __STDC_VERSION__ && __STDC_VERSION__ > 201710L\n+#undef FLT64X_SNAN\n+#define FLT64X_SNAN\t(__builtin_nansf64x (\"\"))\n+#endif /* C2X */\n #endif /* __FLT64X_MANT_DIG__.  */\n \n #ifdef __FLT128X_MANT_DIG__\n@@ -434,6 +484,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define FLT128X_DECIMAL_DIG\t__FLT128X_DECIMAL_DIG__\n #undef FLT128X_TRUE_MIN\n #define FLT128X_TRUE_MIN\t__FLT128X_DENORM_MIN__\n+#if defined __STDC_VERSION__ && __STDC_VERSION__ > 201710L\n+#undef FLT128X_SNAN\n+#define FLT128X_SNAN\t(__builtin_nansf128x (\"\"))\n+#endif /* C2X */\n #endif /* __FLT128X_MANT_DIG__.  */\n \n #endif /* __STDC_WANT_IEC_60559_TYPES_EXT__.  */\n@@ -537,6 +591,18 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #endif /* __STDC_WANT_IEC_60559_DFP_EXT__ || C2X.  */\n \n+#if defined __STDC_VERSION__ && __STDC_VERSION__ > 201710L\n+\n+/* Infinity in type _Decimal32.  */\n+#undef DEC_INFINITY\n+#define DEC_INFINITY\t(__builtin_infd32 ())\n+\n+/* Quiet NaN in type _Decimal32.  */\n+#undef DEC_NAN\n+#define DEC_NAN\t\t(__builtin_nand32 (\"\"))\n+\n+#endif /* C2X */\n+\n #endif /* __DEC32_MANT_DIG__ */\n \n #endif /* _FLOAT_H___ */"}, {"sha": "ceac6ef5063f7378807724f02cac3dfb7a081846", "filename": "gcc/testsuite/gcc.dg/c11-float-4.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-float-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-float-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-float-4.c?ref=3cfe746fc5255f8dd1674bf4a8873b7b8e178c89", "patch": "@@ -0,0 +1,25 @@\n+/* Test infinity and NaN macros not defined for C11.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+#include <float.h>\n+\n+#ifdef INFINITY\n+#error \"INFINITY defined\"\n+#endif\n+\n+#ifdef NAN\n+#error \"NAN defined\"\n+#endif\n+\n+#ifdef FLT_SNAN\n+#error \"FLT_SNAN defined\"\n+#endif\n+\n+#ifdef DBL_SNAN\n+#error \"DBL_SNAN defined\"\n+#endif\n+\n+#ifdef LDBL_SNAN\n+#error \"LDBL_SNAN defined\"\n+#endif"}, {"sha": "bb48695599b0e023648c57fcc1f907507e3a0cf3", "filename": "gcc/testsuite/gcc.dg/c11-float-5.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-float-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-float-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-float-5.c?ref=3cfe746fc5255f8dd1674bf4a8873b7b8e178c89", "patch": "@@ -0,0 +1,35 @@\n+/* Test sNaN macros for _FloatN and _FloatNx not defined for C11 with\n+   __STDC_WANT_IEC_60559_TYPES_EXT__.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+#define __STDC_WANT_IEC_60559_TYPES_EXT__\n+#include <float.h>\n+\n+#ifdef FLT16_SNAN\n+#error \"FLT16_SNAN defined\"\n+#endif\n+\n+#ifdef FLT32_SNAN\n+#error \"FLT32_SNAN defined\"\n+#endif\n+\n+#ifdef FLT64_SNAN\n+#error \"FLT64_SNAN defined\"\n+#endif\n+\n+#ifdef FLT128_SNAN\n+#error \"FLT128_SNAN defined\"\n+#endif\n+\n+#ifdef FLT32X_SNAN\n+#error \"FLT32X_SNAN defined\"\n+#endif\n+\n+#ifdef FLT64X_SNAN\n+#error \"FLT64X_SNAN defined\"\n+#endif\n+\n+#ifdef FLT128X_SNAN\n+#error \"FLT128X_SNAN defined\"\n+#endif"}, {"sha": "e63ebbcb0f26f0101528de69991dd738df5e8c95", "filename": "gcc/testsuite/gcc.dg/c11-float-dfp-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-float-dfp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-float-dfp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-float-dfp-2.c?ref=3cfe746fc5255f8dd1674bf4a8873b7b8e178c89", "patch": "@@ -0,0 +1,6 @@\n+/* Test DFP macros not defined in <float.h> for C11.  Infinity and NaN\n+   macros.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11\" } */\n+\n+#include \"c2x-float-no-dfp-3.c\""}, {"sha": "4f669fd39bccf3cd45f1ef825abd6f5d19001755", "filename": "gcc/testsuite/gcc.dg/c2x-float-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-2.c?ref=3cfe746fc5255f8dd1674bf4a8873b7b8e178c89", "patch": "@@ -0,0 +1,23 @@\n+/* Test INFINITY macro.  Generic test even if infinities not\n+   supported.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c2x -w\" } */\n+/* { dg-add-options ieee } */\n+\n+#include <float.h>\n+\n+#ifndef INFINITY\n+#error \"INFINITY undefined\"\n+#endif\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main (void)\n+{\n+  (void) _Generic (INFINITY, float : 0);\n+  if (!(INFINITY >= FLT_MAX))\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "7c6298b8efb5cfc60df6ba4c0418bc277a847021", "filename": "gcc/testsuite/gcc.dg/c2x-float-3.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-3.c?ref=3cfe746fc5255f8dd1674bf4a8873b7b8e178c89", "patch": "@@ -0,0 +1,27 @@\n+/* Test INFINITY macro.  Test when infinities supported.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+/* { dg-add-options ieee } */\n+/* { dg-require-effective-target inff } */\n+\n+#include <float.h>\n+\n+#ifndef INFINITY\n+#error \"INFINITY undefined\"\n+#endif\n+\n+volatile float f = INFINITY;\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main (void)\n+{\n+  (void) _Generic (INFINITY, float : 0);\n+  if (!(INFINITY > FLT_MAX))\n+    abort ();\n+  if (!(f > FLT_MAX))\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "bca843547c545c288c879687f8648e1a25b4fdeb", "filename": "gcc/testsuite/gcc.dg/c2x-float-4.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-4.c?ref=3cfe746fc5255f8dd1674bf4a8873b7b8e178c89", "patch": "@@ -0,0 +1,33 @@\n+/* Test NAN macro.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+/* { dg-add-options ieee } */\n+\n+#include <float.h>\n+\n+/* This should be defined if and only if quiet NaNs are supported for\n+   type float.  If the testsuite gains effective-target support for\n+   targets not supporting NaNs, or not supporting them for all types,\n+   this test should be split into versions for targets with and\n+   without NaNs for float.  */\n+#ifndef NAN\n+#error \"NAN undefined\"\n+#endif\n+\n+volatile float f = NAN;\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main (void)\n+{\n+  (void) _Generic (NAN, float : 0);\n+  if (!__builtin_isnan (NAN))\n+    abort ();\n+  if (!__builtin_isnan (f))\n+    abort ();\n+  if (!__builtin_isnan (f + f))\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "477f9cf09c616cd6d07e549161951bc699a3a180", "filename": "gcc/testsuite/gcc.dg/c2x-float-5.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-5.c?ref=3cfe746fc5255f8dd1674bf4a8873b7b8e178c89", "patch": "@@ -0,0 +1,32 @@\n+/* Test NAN macro.  Runtime exceptions test, to verify NaN is quiet\n+   not signaling.  */\n+/* { dg-do run } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+/* { dg-add-options ieee } */\n+\n+#include <fenv.h>\n+#include <float.h>\n+\n+/* This should be defined if and only if quiet NaNs are supported for\n+   type float.  If the testsuite gains effective-target support for\n+   targets not supporting NaNs, or not supporting them for all types,\n+   this test should only be run for targets supporting quiet NaNs for\n+   float.  */\n+#ifndef NAN\n+#error \"NAN undefined\"\n+#endif\n+\n+volatile float f = NAN;\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main (void)\n+{\n+  f += f;\n+  if (fetestexcept (FE_INVALID))\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "573540b038109210b41e3c77f0cfdb6b5941a479", "filename": "gcc/testsuite/gcc.dg/c2x-float-6.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-6.c?ref=3cfe746fc5255f8dd1674bf4a8873b7b8e178c89", "patch": "@@ -0,0 +1,49 @@\n+/* Test SNAN macros.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c2x -pedantic-errors -fsignaling-nans\" } */\n+/* { dg-add-options ieee } */\n+\n+#include <float.h>\n+\n+/* These should be defined if and only if signaling NaNs are supported\n+   for the given types.  If the testsuite gains effective-target\n+   support for targets not supporting signaling NaNs, or not\n+   supporting them for all types, this test should be made\n+   appropriately conditional.  */\n+#ifndef FLT_SNAN\n+#error \"FLT_SNAN undefined\"\n+#endif\n+#ifndef DBL_SNAN\n+#error \"DBL_SNAN undefined\"\n+#endif\n+#ifndef LDBL_SNAN\n+#error \"LDBL_SNAN undefined\"\n+#endif\n+\n+volatile float f = FLT_SNAN;\n+volatile double d = DBL_SNAN;\n+volatile long double ld = LDBL_SNAN;\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main (void)\n+{\n+  (void) _Generic (FLT_SNAN, float : 0);\n+  (void) _Generic (DBL_SNAN, double : 0);\n+  (void) _Generic (LDBL_SNAN, long double : 0);\n+  if (!__builtin_isnan (FLT_SNAN))\n+    abort ();\n+  if (!__builtin_isnan (f))\n+    abort ();\n+  if (!__builtin_isnan (DBL_SNAN))\n+    abort ();\n+  if (!__builtin_isnan (d))\n+    abort ();\n+  if (!__builtin_isnan (LDBL_SNAN))\n+    abort ();\n+  if (!__builtin_isnan (ld))\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "0c90ff241650d5ceaa0e9e2a0622638af415e6f0", "filename": "gcc/testsuite/gcc.dg/c2x-float-7.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-7.c?ref=3cfe746fc5255f8dd1674bf4a8873b7b8e178c89", "patch": "@@ -0,0 +1,49 @@\n+/* Test SNAN macros.  Runtime exceptions test, to verify NaN is\n+   signaling.  */\n+/* { dg-do run } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+/* { dg-options \"-std=c2x -pedantic-errors -fsignaling-nans\" } */\n+/* { dg-add-options ieee } */\n+\n+#include <fenv.h>\n+#include <float.h>\n+\n+/* These should be defined if and only if signaling NaNs are supported\n+   for the given types.  If the testsuite gains effective-target\n+   support for targets not supporting signaling NaNs, or not\n+   supporting them for all types, this test should be made\n+   appropriately conditional.  */\n+#ifndef FLT_SNAN\n+#error \"FLT_SNAN undefined\"\n+#endif\n+#ifndef DBL_SNAN\n+#error \"DBL_SNAN undefined\"\n+#endif\n+#ifndef LDBL_SNAN\n+#error \"LDBL_SNAN undefined\"\n+#endif\n+\n+volatile float f = FLT_SNAN;\n+volatile double d = DBL_SNAN;\n+volatile long double ld = LDBL_SNAN;\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main (void)\n+{\n+  feclearexcept (FE_ALL_EXCEPT);\n+  f += f;\n+  if (!fetestexcept (FE_INVALID))\n+    abort ();\n+  feclearexcept (FE_ALL_EXCEPT);\n+  d += d;\n+  if (!fetestexcept (FE_INVALID))\n+    abort ();\n+  feclearexcept (FE_ALL_EXCEPT);\n+  ld += ld;\n+  if (!fetestexcept (FE_INVALID))\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "b10cb850091aabcc3c3e7ba17b4154cbe118ba82", "filename": "gcc/testsuite/gcc.dg/c2x-float-8.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-8.c?ref=3cfe746fc5255f8dd1674bf4a8873b7b8e178c89", "patch": "@@ -0,0 +1,7 @@\n+/* Test including <math.h> then <float.h> does not result in errors\n+   from duplicate NAN and INFINITY macros.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+#include <math.h>\n+#include <float.h>"}, {"sha": "0a54bc2ad4c916990edf0f57d70572e8a6332052", "filename": "gcc/testsuite/gcc.dg/c2x-float-9.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-9.c?ref=3cfe746fc5255f8dd1674bf4a8873b7b8e178c89", "patch": "@@ -0,0 +1,7 @@\n+/* Test including <float.h> then <math.h> does not result in errors\n+   from duplicate NAN and INFINITY macros.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+#include <float.h>\n+#include <math.h>"}, {"sha": "d8a239c787edcf37267ac571a17f4742847fb7bb", "filename": "gcc/testsuite/gcc.dg/c2x-float-no-dfp-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-no-dfp-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-no-dfp-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-no-dfp-3.c?ref=3cfe746fc5255f8dd1674bf4a8873b7b8e178c89", "patch": "@@ -0,0 +1,14 @@\n+/* Test DFP macros not defined in <float.h> if no DFP support.\n+   Infinity and NaN macros.  */\n+/* { dg-do compile { target { ! dfp } } } */\n+/* { dg-options \"-std=c2x\" } */\n+\n+#include <float.h>\n+\n+#ifdef DEC_INFINITY\n+# error \"DEC_INFINITY defined\"\n+#endif\n+\n+#ifdef DEC_NAN\n+# error \"DEC_NAN defined\"\n+#endif"}, {"sha": "855922a47b696da2b0f2a127e72c496db2789530", "filename": "gcc/testsuite/gcc.dg/c2x-float-no-dfp-4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-no-dfp-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-no-dfp-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-no-dfp-4.c?ref=3cfe746fc5255f8dd1674bf4a8873b7b8e178c89", "patch": "@@ -0,0 +1,10 @@\n+/* Test DFP macros not defined in <float.h> if no DFP support.\n+   Infinity and NaN macros.  Test with feature test macros\n+   defined.  */\n+/* { dg-do compile { target { ! dfp } } } */\n+/* { dg-options \"-std=c2x\" } */\n+\n+#define __STDC_WANT_DEC_FP__\n+#define __STDC_WANT_IEC_60559_DFP_EXT__\n+\n+#include \"c2x-float-no-dfp-3.c\""}, {"sha": "58ee74db484d5784898977f4186c1bfcf02ab662", "filename": "gcc/testsuite/gcc.dg/dfp/c2x-float-dfp-4.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fc2x-float-dfp-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fc2x-float-dfp-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fc2x-float-dfp-4.c?ref=3cfe746fc5255f8dd1674bf4a8873b7b8e178c89", "patch": "@@ -0,0 +1,25 @@\n+/* Test DEC_INFINITY defined in <float.h> with DFP support.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c2x\" } */\n+\n+#include <float.h>\n+\n+#ifndef DEC_INFINITY\n+# error \"DEC_INFINITY not defined\"\n+#endif\n+\n+volatile _Decimal32 d = DEC_INFINITY;\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main (void)\n+{\n+  (void) _Generic (DEC_INFINITY, _Decimal32 : 0);\n+  if (!(DEC_INFINITY > DEC32_MAX))\n+    abort ();\n+  if (!(d > DEC32_MAX))\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "8d097255e0ea2307bdac32e69bc291f013fe0417", "filename": "gcc/testsuite/gcc.dg/dfp/c2x-float-dfp-5.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fc2x-float-dfp-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fc2x-float-dfp-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fc2x-float-dfp-5.c?ref=3cfe746fc5255f8dd1674bf4a8873b7b8e178c89", "patch": "@@ -0,0 +1,25 @@\n+/* Test DEC_NAN defined in <float.h> with DFP support.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c2x\" } */\n+\n+#include <float.h>\n+\n+#ifndef DEC_NAN\n+# error \"DEC_NAN not defined\"\n+#endif\n+\n+volatile _Decimal32 d = DEC_NAN;\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main (void)\n+{\n+  (void) _Generic (DEC_NAN, _Decimal32 : 0);\n+  if (!__builtin_isnan (DEC_NAN))\n+    abort ();\n+  if (!__builtin_isnan (d))\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "4533c61e8e9808f3e70e4fca56c44b3a5b8c7e2d", "filename": "gcc/testsuite/gcc.dg/dfp/c2x-float-dfp-6.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fc2x-float-dfp-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fc2x-float-dfp-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fc2x-float-dfp-6.c?ref=3cfe746fc5255f8dd1674bf4a8873b7b8e178c89", "patch": "@@ -0,0 +1,28 @@\n+/* Test DEC_NAN macro.  Runtime exceptions test, to verify NaN is\n+   quiet not signaling.  (This would only actually fail for a\n+   signaling NaN in the hardware DFP case, because the software DFP\n+   support in libgcc does not integrate with hardware exceptions.)  */\n+/* { dg-do run } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+/* { dg-options \"-std=c2x\" } */\n+\n+#include <fenv.h>\n+#include <float.h>\n+\n+#ifndef DEC_NAN\n+# error \"DEC_NAN not defined\"\n+#endif\n+\n+volatile _Decimal32 d = DEC_NAN;\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main (void)\n+{\n+  d += d;\n+  if (fetestexcept (FE_INVALID))\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "69fd45a6375e9cf5003925a4194b1195493e0581", "filename": "gcc/testsuite/gcc.dg/torture/float128-nan-floath.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-nan-floath.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-nan-floath.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-nan-floath.c?ref=3cfe746fc5255f8dd1674bf4a8873b7b8e178c89", "patch": "@@ -0,0 +1,11 @@\n+/* Test _Float128 NaNs in <float.h>.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c2x -fsignaling-nans\" } */\n+/* { dg-add-options float128 } */\n+/* { dg-add-options ieee } */\n+/* { dg-require-effective-target float128_runtime } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#define WIDTH 128\n+#define EXT 0\n+#include \"floatn-nan-floath.h\""}, {"sha": "5be4c07787d0a50f6d257da53b9baeac9c725abb", "filename": "gcc/testsuite/gcc.dg/torture/float128x-nan-floath.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128x-nan-floath.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128x-nan-floath.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128x-nan-floath.c?ref=3cfe746fc5255f8dd1674bf4a8873b7b8e178c89", "patch": "@@ -0,0 +1,11 @@\n+/* Test _Float128x NaNs in <float.h>.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c2x -fsignaling-nans\" } */\n+/* { dg-add-options float128x } */\n+/* { dg-add-options ieee } */\n+/* { dg-require-effective-target float128x_runtime } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#define WIDTH 128\n+#define EXT 1\n+#include \"floatn-nan-floath.h\""}, {"sha": "cf03b45a34b424d46d82e724aa78aee0cc3d6489", "filename": "gcc/testsuite/gcc.dg/torture/float16-nan-floath.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat16-nan-floath.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat16-nan-floath.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat16-nan-floath.c?ref=3cfe746fc5255f8dd1674bf4a8873b7b8e178c89", "patch": "@@ -0,0 +1,11 @@\n+/* Test _Float16 NaNs in <float.h>.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c2x -fsignaling-nans\" } */\n+/* { dg-add-options float16 } */\n+/* { dg-add-options ieee } */\n+/* { dg-require-effective-target float16_runtime } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#define WIDTH 16\n+#define EXT 0\n+#include \"floatn-nan-floath.h\""}, {"sha": "2976a40aec4027a003f72fe872f61e2efab63ad6", "filename": "gcc/testsuite/gcc.dg/torture/float32-nan-floath.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32-nan-floath.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32-nan-floath.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32-nan-floath.c?ref=3cfe746fc5255f8dd1674bf4a8873b7b8e178c89", "patch": "@@ -0,0 +1,11 @@\n+/* Test _Float32 NaNs in <float.h>.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c2x -fsignaling-nans\" } */\n+/* { dg-add-options float32 } */\n+/* { dg-add-options ieee } */\n+/* { dg-require-effective-target float32_runtime } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#define WIDTH 32\n+#define EXT 0\n+#include \"floatn-nan-floath.h\""}, {"sha": "0aab4be26cabee1310bcf25fcd6fcef0f15ad879", "filename": "gcc/testsuite/gcc.dg/torture/float32x-nan-floath.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32x-nan-floath.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32x-nan-floath.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32x-nan-floath.c?ref=3cfe746fc5255f8dd1674bf4a8873b7b8e178c89", "patch": "@@ -0,0 +1,11 @@\n+/* Test _Float32x NaNs in <float.h>.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c2x -fsignaling-nans\" } */\n+/* { dg-add-options float32x } */\n+/* { dg-add-options ieee } */\n+/* { dg-require-effective-target float32x_runtime } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#define WIDTH 32\n+#define EXT 1\n+#include \"floatn-nan-floath.h\""}, {"sha": "1f5298bd399c95c1b57787b4354aa9399c729e78", "filename": "gcc/testsuite/gcc.dg/torture/float64-nan-floath.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64-nan-floath.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64-nan-floath.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64-nan-floath.c?ref=3cfe746fc5255f8dd1674bf4a8873b7b8e178c89", "patch": "@@ -0,0 +1,11 @@\n+/* Test _Float64 NaNs in <float.h>.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c2x -fsignaling-nans\" } */\n+/* { dg-add-options float64 } */\n+/* { dg-add-options ieee } */\n+/* { dg-require-effective-target float64_runtime } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#define WIDTH 64\n+#define EXT 0\n+#include \"floatn-nan-floath.h\""}, {"sha": "fbc86766d8e741d8d271e14cb0e464f438b57b5b", "filename": "gcc/testsuite/gcc.dg/torture/float64x-nan-floath.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64x-nan-floath.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64x-nan-floath.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64x-nan-floath.c?ref=3cfe746fc5255f8dd1674bf4a8873b7b8e178c89", "patch": "@@ -0,0 +1,11 @@\n+/* Test _Float64x NaNs in <float.h>.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c2x -fsignaling-nans\" } */\n+/* { dg-add-options float64x } */\n+/* { dg-add-options ieee } */\n+/* { dg-require-effective-target float64x_runtime } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#define WIDTH 64\n+#define EXT 1\n+#include \"floatn-nan-floath.h\""}, {"sha": "9892fd0cf638250b37647f94e67ab1c208b85329", "filename": "gcc/testsuite/gcc.dg/torture/floatn-nan-floath.h", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloatn-nan-floath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloatn-nan-floath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloatn-nan-floath.h?ref=3cfe746fc5255f8dd1674bf4a8873b7b8e178c89", "patch": "@@ -0,0 +1,36 @@\n+/* Tests for _FloatN / _FloatNx types: compile and execution tests for\n+   NaNs, SNAN macros in <float.h>.  Before including this file, define\n+   WIDTH as the value N; define EXT to 1 for _FloatNx and 0 for\n+   _FloatN.  */\n+\n+#define CONCATX(X, Y) X ## Y\n+#define CONCAT(X, Y) CONCATX (X, Y)\n+#define CONCAT3(X, Y, Z) CONCAT (CONCAT (X, Y), Z)\n+#define CONCAT4(W, X, Y, Z) CONCAT (CONCAT (CONCAT (W, X), Y), Z)\n+\n+#if EXT\n+# define TYPE CONCAT3 (_Float, WIDTH, x)\n+# define SNAN CONCAT3 (FLT, WIDTH, X_SNAN)\n+#else\n+# define TYPE CONCAT (_Float, WIDTH)\n+# define SNAN CONCAT3 (FLT, WIDTH, _SNAN)\n+#endif\n+\n+#define __STDC_WANT_IEC_60559_TYPES_EXT__\n+#include <fenv.h>\n+#include <float.h>\n+\n+extern void exit (int);\n+extern void abort (void);\n+\n+volatile TYPE nans_cst = SNAN;\n+\n+int\n+main (void)\n+{\n+  volatile TYPE r;\n+  r = nans_cst + nans_cst;\n+  if (!fetestexcept (FE_INVALID))\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "22acda2a74fdfa51aebbc311d5cc84763b0ffc63", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfe746fc5255f8dd1674bf4a8873b7b8e178c89/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=3cfe746fc5255f8dd1674bf4a8873b7b8e178c89", "patch": "@@ -10351,6 +10351,13 @@ proc check_effective_target_inf { } {\n     }]\n }\n \n+# Return 1 if target supports floating point \"infinite\" for float.\n+proc check_effective_target_inff { } {\n+    return [check_no_compiler_messages supports_inff assembly {\n+        const float pinf = __builtin_inff ();\n+    }]\n+}\n+\n # Return 1 if the target supports ARMv8.3 Adv.SIMD Complex instructions\n # instructions, 0 otherwise.  The test is valid for ARM and for AArch64.\n # Record the command line options needed."}]}