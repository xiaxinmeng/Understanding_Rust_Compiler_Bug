{"sha": "0401d4997a27f495b52e2a5af5f172fc10cf9a1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQwMWQ0OTk3YTI3ZjQ5NWI1MmUyYTVhZjVmMTcyZmMxMGNmOWExYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2001-05-22T19:42:30Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-05-22T19:42:30Z"}, "message": "class.c, [...]: Remove com_interface attribute support.\n\n        * class.c, cp-tree.h, rtti.c: Remove com_interface attribute support.\n        * tree.c (cp_valid_lang_attribute): Warn about use of com_interface\n        attribute.\n\nFrom-SVN: r42465", "tree": {"sha": "a6c71baab918f558fc7349ea894a709dbd762e5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6c71baab918f558fc7349ea894a709dbd762e5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0401d4997a27f495b52e2a5af5f172fc10cf9a1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0401d4997a27f495b52e2a5af5f172fc10cf9a1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0401d4997a27f495b52e2a5af5f172fc10cf9a1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0401d4997a27f495b52e2a5af5f172fc10cf9a1b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "766a4175b12e77540da5a39482d1cd3e4beb81ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/766a4175b12e77540da5a39482d1cd3e4beb81ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/766a4175b12e77540da5a39482d1cd3e4beb81ff"}], "stats": {"total": 72, "additions": 10, "deletions": 62}, "files": [{"sha": "956d01708c36a63cc62430600961167a08349282", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0401d4997a27f495b52e2a5af5f172fc10cf9a1b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0401d4997a27f495b52e2a5af5f172fc10cf9a1b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0401d4997a27f495b52e2a5af5f172fc10cf9a1b", "patch": "@@ -1,3 +1,9 @@\n+2001-05-22  Jason Merrill  <jason_merrill@redhat.com>\n+\n+\t* class.c, cp-tree.h, rtti.c: Remove com_interface attribute support.\n+\t* tree.c (cp_valid_lang_attribute): Warn about use of com_interface\n+\tattribute.\n+\n 2001-05-22  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* parse.y: Refer to compound literals as such, not as"}, {"sha": "eca199fb72a5bd1c7c071b4d6f74e35c66c3bd15", "filename": "gcc/cp/class.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0401d4997a27f495b52e2a5af5f172fc10cf9a1b/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0401d4997a27f495b52e2a5af5f172fc10cf9a1b/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=0401d4997a27f495b52e2a5af5f172fc10cf9a1b", "patch": "@@ -1690,18 +1690,6 @@ check_bases (t, cant_have_default_ctor_p, cant_have_const_ctor_p,\n       TYPE_OVERLOADS_ARRAY_REF (t) |= TYPE_OVERLOADS_ARRAY_REF (basetype);\n       TYPE_OVERLOADS_ARROW (t) |= TYPE_OVERLOADS_ARROW (basetype);\n       TYPE_POLYMORPHIC_P (t) |= TYPE_POLYMORPHIC_P (basetype);\n-\n-      /* Derived classes can implicitly become COMified if their bases\n-\t are COM.  */\n-      if (CLASSTYPE_COM_INTERFACE (basetype))\n-\tCLASSTYPE_COM_INTERFACE (t) = 1;\n-      else if (i == 0 && CLASSTYPE_COM_INTERFACE (t))\n-\t{\n-\t  cp_error \n-\t    (\"COM interface type `%T' with non-COM leftmost base class `%T'\",\n-\t     t, basetype);\n-\t  CLASSTYPE_COM_INTERFACE (t) = 0;\n-\t}\n     }\n }\n \n@@ -7993,10 +7981,6 @@ build_rtti_vtbl_entries (binfo, vid)\n   basetype = BINFO_TYPE (binfo);\n   t = BINFO_TYPE (vid->rtti_binfo);\n \n-  /* For a COM object there is no RTTI entry.  */\n-  if (CLASSTYPE_COM_INTERFACE (basetype))\n-    return;\n-\n   /* To find the complete object, we will first convert to our most\n      primary base, and then add the offset in the vtbl to that value.  */\n   b = binfo;"}, {"sha": "e5065e4cec6b76adb73fb17c237d5380b24181ea", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0401d4997a27f495b52e2a5af5f172fc10cf9a1b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0401d4997a27f495b52e2a5af5f172fc10cf9a1b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0401d4997a27f495b52e2a5af5f172fc10cf9a1b", "patch": "@@ -132,8 +132,6 @@ Boston, MA 02111-1307, USA.  */\n      use a virtual thunk, as opposed to an ordinary thunk.\n \n      The BV_FN is the declaration for the virtual function itself.\n-     When CLASSTYPE_COM_INTERFACE_P does not hold, the first entry\n-     does not have a BV_FN; it is just an offset.\n \n      The BV_OVERRIDING_BASE is the binfo for the final overrider for\n      this function.  (That binfo's BINFO_TYPE will always be the same\n@@ -1578,10 +1576,6 @@ struct lang_type\n #define CLASSTYPE_NEARLY_EMPTY_P(NODE) \\\n   (TYPE_LANG_SPECIFIC (NODE)->nearly_empty_p)\n \n-/* Nonzero means that this type is meant for communication via COM.  */\n-#define CLASSTYPE_COM_INTERFACE(NODE) \\\n-  (TYPE_LANG_SPECIFIC(NODE)->com_interface)\n-\n /* A list of class types of which this type is a friend.  The\n    TREE_VALUE is normally a TYPE, but will be a TEMPLATE_DECL in the\n    case of a template friend.  */"}, {"sha": "d798f63c5f29e6582164af73d6db03a438db2d31", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0401d4997a27f495b52e2a5af5f172fc10cf9a1b/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0401d4997a27f495b52e2a5af5f172fc10cf9a1b/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=0401d4997a27f495b52e2a5af5f172fc10cf9a1b", "patch": "@@ -122,11 +122,6 @@ build_headof (exp)\n \n   if (!TYPE_POLYMORPHIC_P (type))\n     return exp;\n-  if (CLASSTYPE_COM_INTERFACE (type))\n-    {\n-      cp_error (\"RTTI not supported for COM interface type `%T'\", type);\n-      return error_mark_node;\n-    }\n \n   /* If we don't have rtti stuff, get to a sub-object that does.  */\n   if (!CLASSTYPE_VFIELDS (TREE_TYPE (TREE_TYPE (exp))))\n@@ -222,11 +217,6 @@ get_tinfo_decl_dynamic (exp)\n \n       if (! flag_rtti)\n \terror (\"taking dynamic typeid of object with -fno-rtti\");\n-      if (CLASSTYPE_COM_INTERFACE (type))\n-\t{\n-\t  cp_error (\"RTTI not supported for COM interface type `%T'\", type);\n-\t  return error_mark_node;\n-\t}\n \n       /* If we don't have rtti stuff, get to a sub-object that does.  */\n       if (! CLASSTYPE_VFIELDS (type))"}, {"sha": "2dfc567caef1d02015cddfe5637b4b63d97e7bed", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0401d4997a27f495b52e2a5af5f172fc10cf9a1b/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0401d4997a27f495b52e2a5af5f172fc10cf9a1b/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=0401d4997a27f495b52e2a5af5f172fc10cf9a1b", "patch": "@@ -2236,12 +2236,7 @@ cp_valid_lang_attribute (attr_name, attr_args, decl, type)\n     }\n   if (is_attribute_p (\"com_interface\", attr_name))\n     {\n-      if (! flag_vtable_thunks)\n-\t{\n-\t  error (\"`com_interface' only supported with -fvtable-thunks\");\n-\t  return 0;\n-\t}\n-\n+      static int warned;\n       if (attr_args != NULL_TREE\n \t  || decl != NULL_TREE\n \t  || ! CLASS_TYPE_P (type)\n@@ -2251,6 +2246,9 @@ cp_valid_lang_attribute (attr_name, attr_args, decl, type)\n \t  return 0;\n \t}\n \n+      if (! warned++)\n+\twarning (\"\\\n+`com_interface' is obsolete; g++ vtables are now COM-compatible by default\");\n       return 1;\n     }\n   else if (is_attribute_p (\"init_priority\", attr_name))"}, {"sha": "78d99e6c357408f49c71f8957abad84c80857a68", "filename": "gcc/testsuite/g++.old-deja/g++.ext/comint1.C", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766a4175b12e77540da5a39482d1cd3e4beb81ff/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fcomint1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766a4175b12e77540da5a39482d1cd3e4beb81ff/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fcomint1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fcomint1.C?ref=766a4175b12e77540da5a39482d1cd3e4beb81ff", "patch": "@@ -1,24 +0,0 @@\n-// Test that we can use mixins with COM classes.\n-\n-struct A\n-{\n-  virtual int foo () = 0;\n-  virtual int bar () = 0;\n-} __attribute__((__com_interface__));\n-\n-struct B\n-{\n-  virtual int baz () { return 5; }\n-};\n-\n-struct C : public A, public B\n-{\n-  int foo () { return 0; }\n-  int bar () { return 1; }\n-};\n-\n-int main ()\n-{\n-  C c;\n-  return c.foo ();\n-}          "}]}