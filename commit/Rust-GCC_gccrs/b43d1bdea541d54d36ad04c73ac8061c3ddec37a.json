{"sha": "b43d1bdea541d54d36ad04c73ac8061c3ddec37a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQzZDFiZGVhNTQxZDU0ZDM2YWQwNGM3M2FjODA2MWMzZGRlYzM3YQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-09-20T09:49:13Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-09-20T09:49:13Z"}, "message": "re PR c++/33459 (ICE on reference member in union)\n\ncp/\n2007-09-20  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR c++/33459\n\t* init.c (build_zero_init): If, recursively, build_zero_init\n\treturns a NULL_TREE, do not append it to the VEC of constructors.\n\ntestsuite/\n2007-09-20  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR c++/33459\n\t* g++.dg/init/ref14.C: New.\n\nFrom-SVN: r128615", "tree": {"sha": "8fac60f70b7df355e7fb34ee0b41f805877750cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fac60f70b7df355e7fb34ee0b41f805877750cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b43d1bdea541d54d36ad04c73ac8061c3ddec37a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b43d1bdea541d54d36ad04c73ac8061c3ddec37a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b43d1bdea541d54d36ad04c73ac8061c3ddec37a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b43d1bdea541d54d36ad04c73ac8061c3ddec37a/comments", "author": null, "committer": null, "parents": [{"sha": "c6f3019a9adcf8f5b788a50fc7500e73674c27f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6f3019a9adcf8f5b788a50fc7500e73674c27f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6f3019a9adcf8f5b788a50fc7500e73674c27f9"}], "stats": {"total": 36, "additions": 30, "deletions": 6}, "files": [{"sha": "ebcd865e9b37fdeb801a2db998bd667f4176f12e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b43d1bdea541d54d36ad04c73ac8061c3ddec37a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b43d1bdea541d54d36ad04c73ac8061c3ddec37a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b43d1bdea541d54d36ad04c73ac8061c3ddec37a", "patch": "@@ -1,3 +1,9 @@\n+2007-09-20  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR c++/33459\n+\t* init.c (build_zero_init): If, recursively, build_zero_init\n+\treturns a NULL_TREE, do not append it to the VEC of constructors.\n+\n 2007-09-18  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/17743"}, {"sha": "247879cc5a03d29e39d4387b140eb4b364bd7326", "filename": "gcc/cp/init.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b43d1bdea541d54d36ad04c73ac8061c3ddec37a/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b43d1bdea541d54d36ad04c73ac8061c3ddec37a/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=b43d1bdea541d54d36ad04c73ac8061c3ddec37a", "patch": "@@ -136,11 +136,12 @@ initialize_vtbl_ptrs (tree addr)\n /* Return an expression for the zero-initialization of an object with\n    type T.  This expression will either be a constant (in the case\n    that T is a scalar), or a CONSTRUCTOR (in the case that T is an\n-   aggregate).  In either case, the value can be used as DECL_INITIAL\n-   for a decl of the indicated TYPE; it is a valid static initializer.\n-   If NELTS is non-NULL, and TYPE is an ARRAY_TYPE, NELTS is the\n-   number of elements in the array.  If STATIC_STORAGE_P is TRUE,\n-   initializers are only generated for entities for which\n+   aggregate), or NULL (in the case that T does not require\n+   initialization).  In either case, the value can be used as\n+   DECL_INITIAL for a decl of the indicated TYPE; it is a valid static\n+   initializer. If NELTS is non-NULL, and TYPE is an ARRAY_TYPE, NELTS\n+   is the number of elements in the array.  If STATIC_STORAGE_P is\n+   TRUE, initializers are only generated for entities for which\n    zero-initialization does not simply mean filling the storage with\n    zero bytes.  */\n \n@@ -199,7 +200,8 @@ build_zero_init (tree type, tree nelts, bool static_storage_p)\n \t      tree value = build_zero_init (TREE_TYPE (field),\n \t\t\t\t\t    /*nelts=*/NULL_TREE,\n \t\t\t\t\t    static_storage_p);\n-\t      CONSTRUCTOR_APPEND_ELT(v, field, value);\n+\t      if (value)\n+\t\tCONSTRUCTOR_APPEND_ELT(v, field, value);\n \t    }\n \n \t  /* For unions, only the first field is initialized.  */"}, {"sha": "804f300832a31869251231c448ac6592ecb05dca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b43d1bdea541d54d36ad04c73ac8061c3ddec37a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b43d1bdea541d54d36ad04c73ac8061c3ddec37a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b43d1bdea541d54d36ad04c73ac8061c3ddec37a", "patch": "@@ -1,3 +1,8 @@\n+2007-09-20  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR c++/33459\n+\t* g++.dg/init/ref14.C: New.\n+\n 2007-09-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/slice2.ad[sb]: New testcase."}, {"sha": "212e6e95d7eab4152eb8ed9d949b21eb0b52a855", "filename": "gcc/testsuite/g++.dg/init/ref14.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b43d1bdea541d54d36ad04c73ac8061c3ddec37a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fref14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b43d1bdea541d54d36ad04c73ac8061c3ddec37a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fref14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fref14.C?ref=b43d1bdea541d54d36ad04c73ac8061c3ddec37a", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/33459\n+\n+union A\n+{\n+  int &i; // { dg-error \"may not have reference type\" }\n+};\n+\n+void foo()\n+{\n+  A();\n+}"}]}