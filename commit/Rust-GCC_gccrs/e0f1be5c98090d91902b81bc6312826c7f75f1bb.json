{"sha": "e0f1be5c98090d91902b81bc6312826c7f75f1bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBmMWJlNWM5ODA5MGQ5MTkwMmI4MWJjNjMxMjgyNmM3Zjc1ZjFiYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-03-09T13:23:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-03-09T13:23:44Z"}, "message": "re PR middle-end/5877 (negative offset to array index leads to inefficient code)\n\n\n\tPR middle-end/5877\n\t* expr.c (highest_pow2_factor): Check TREE_INT_CST_LOW\n\teven for non-representable constants.\n\nFrom-SVN: r50495", "tree": {"sha": "602734e5c5384bcc6fc202050ea1b94e3e0d3aa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/602734e5c5384bcc6fc202050ea1b94e3e0d3aa6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0f1be5c98090d91902b81bc6312826c7f75f1bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0f1be5c98090d91902b81bc6312826c7f75f1bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0f1be5c98090d91902b81bc6312826c7f75f1bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0f1be5c98090d91902b81bc6312826c7f75f1bb/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "93fe8e9229a808d836553dcbe49104f97bdecb96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93fe8e9229a808d836553dcbe49104f97bdecb96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93fe8e9229a808d836553dcbe49104f97bdecb96"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "9f329be7ede43a49c3be217eb07fa4b9d4cec8d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f1be5c98090d91902b81bc6312826c7f75f1bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f1be5c98090d91902b81bc6312826c7f75f1bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0f1be5c98090d91902b81bc6312826c7f75f1bb", "patch": "@@ -1,3 +1,9 @@\n+2002-03-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/5877\n+\t* expr.c (highest_pow2_factor): Check TREE_INT_CST_LOW\n+\teven for non-representable constants.\n+\n Sat Mar  9 07:20:01 2002  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* emit-rtl.c (copy_most_rtx): Accept EXPR_LIST for may_share."}, {"sha": "ac756432f20be533d25cbf55f0973ca3fcdfc8a4", "filename": "gcc/expr.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f1be5c98090d91902b81bc6312826c7f75f1bb/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f1be5c98090d91902b81bc6312826c7f75f1bb/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=e0f1be5c98090d91902b81bc6312826c7f75f1bb", "patch": "@@ -5827,20 +5827,21 @@ highest_pow2_factor (exp)\n   switch (TREE_CODE (exp))\n     {\n     case INTEGER_CST:\n-      /* If the integer is expressable in a HOST_WIDE_INT, we can find the\n-\t lowest bit that's a one.  If the result is zero, return\n-\t BIGGEST_ALIGNMENT.  We need to handle this case since we can find it\n-\t in a COND_EXPR, a MIN_EXPR, or a MAX_EXPR.  If the constant overlows,\n-\t we have an erroneous program, so return BIGGEST_ALIGNMENT to avoid any\n+      /* We can find the lowest bit that's a one.  If the low\n+\t HOST_BITS_PER_WIDE_INT bits are zero, return BIGGEST_ALIGNMENT.\n+\t We need to handle this case since we can find it in a COND_EXPR,\n+\t a MIN_EXPR, or a MAX_EXPR.  If the constant overlows, we have an\n+\t erroneous program, so return BIGGEST_ALIGNMENT to avoid any\n \t later ICE.  */\n-      if (TREE_CONSTANT_OVERFLOW (exp)\n-\t  || integer_zerop (exp))\n+      if (TREE_CONSTANT_OVERFLOW (exp))\n \treturn BIGGEST_ALIGNMENT;\n-      else if (host_integerp (exp, 0))\n+      else\n \t{\n-\t  c0 = tree_low_cst (exp, 0);\n-\t  c0 = c0 < 0 ? - c0 : c0;\n-\t  return c0 & -c0;\n+\t  /* Note: tree_low_cst is intentionally not used here,\n+\t     we don't care about the upper bits.  */\n+\t  c0 = TREE_INT_CST_LOW (exp);\n+\t  c0 &= -c0;\n+\t  return c0 ? c0 : BIGGEST_ALIGNMENT;\n \t}\n       break;\n "}]}