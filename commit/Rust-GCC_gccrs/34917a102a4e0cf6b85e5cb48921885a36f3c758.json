{"sha": "34917a102a4e0cf6b85e5cb48921885a36f3c758", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ5MTdhMTAyYTRlMGNmNmI4NWU1Y2I0ODkyMTg4NWEzNmYzYzc1OA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@nildram.co.uk", "date": "2008-02-08T19:10:25Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2008-02-08T19:10:25Z"}, "message": "re PR bootstrap/35051 (Build machine requires GMP and MPFR for building cross-host gccs)\n\ngcc/\n\tPR bootstrap/35051\n\t* double-int.h: Don't include gmp.h for GENERATOR_FILEs.\n\t(mpz_set_double_int, mpz_get_double_int): Hide from GENERATOR_FILEs.\n\t* real.h: Don't include gmp.h or mpfr.h for GENERATOR_FILEs.\n\t(real_from_mpfr, mpfr_from_real): Hide from GENERATOR_FILEs.\n\t* tree.h (get_type_static_bounds): Likewise.\n\nFrom-SVN: r132188", "tree": {"sha": "8da9730c286292669f3782559a5bce0322051a59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8da9730c286292669f3782559a5bce0322051a59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34917a102a4e0cf6b85e5cb48921885a36f3c758", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34917a102a4e0cf6b85e5cb48921885a36f3c758", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34917a102a4e0cf6b85e5cb48921885a36f3c758", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34917a102a4e0cf6b85e5cb48921885a36f3c758/comments", "author": null, "committer": null, "parents": [{"sha": "40891f69fb7217b034a1f59d0086dde0db97f1c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40891f69fb7217b034a1f59d0086dde0db97f1c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40891f69fb7217b034a1f59d0086dde0db97f1c7"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "910417b73f12ccfd8f79b775f66fac7107cac84d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34917a102a4e0cf6b85e5cb48921885a36f3c758/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34917a102a4e0cf6b85e5cb48921885a36f3c758/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34917a102a4e0cf6b85e5cb48921885a36f3c758", "patch": "@@ -1,3 +1,12 @@\n+2008-02-08  Richard Sandiford  <rsandifo@nildram.co.uk>\n+\n+\tPR bootstrap/35051\n+\t* double-int.h: Don't include gmp.h for GENERATOR_FILEs.\n+\t(mpz_set_double_int, mpz_get_double_int): Hide from GENERATOR_FILEs.\n+\t* real.h: Don't include gmp.h or mpfr.h for GENERATOR_FILEs.\n+\t(real_from_mpfr, mpfr_from_real): Hide from GENERATOR_FILEs.\n+\t* tree.h (get_type_static_bounds): Likewise.\n+\n 2008-02-08  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* doc/invoke.texi (Option Summary, C++ Dialect Options)"}, {"sha": "df82688e6b689d54010c2bc6cd2ac5dc98e37ba1", "filename": "gcc/double-int.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34917a102a4e0cf6b85e5cb48921885a36f3c758/gcc%2Fdouble-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34917a102a4e0cf6b85e5cb48921885a36f3c758/gcc%2Fdouble-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.h?ref=34917a102a4e0cf6b85e5cb48921885a36f3c758", "patch": "@@ -20,7 +20,9 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef DOUBLE_INT_H\n #define DOUBLE_INT_H\n \n+#ifndef GENERATOR_FILE\n #include <gmp.h>\n+#endif\n #include \"coretypes.h\"\n \n /* A large integer is currently represented as a pair of HOST_WIDE_INTs.\n@@ -176,10 +178,11 @@ double_int_equal_p (double_int cst1, double_int cst2)\n   return cst1.low == cst2.low && cst1.high == cst2.high;\n }\n \n+#ifndef GENERATOR_FILE\n /* Conversion to and from GMP integer representations.  */\n \n void mpz_set_double_int (mpz_t, double_int, bool);\n double_int mpz_get_double_int (const_tree, mpz_t, bool);\n-\n+#endif\n \n #endif /* DOUBLE_INT_H */"}, {"sha": "6cf0d1f511b588d5ba607176eeec57cd6a9cd98a", "filename": "gcc/real.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34917a102a4e0cf6b85e5cb48921885a36f3c758/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34917a102a4e0cf6b85e5cb48921885a36f3c758/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=34917a102a4e0cf6b85e5cb48921885a36f3c758", "patch": "@@ -21,8 +21,10 @@\n #ifndef GCC_REAL_H\n #define GCC_REAL_H\n \n+#ifndef GENERATOR_FILE\n #include <gmp.h>\n #include <mpfr.h>\n+#endif\n #include \"machmode.h\"\n \n /* An expanded form of the represented number.  */\n@@ -426,11 +428,13 @@ extern void real_round (REAL_VALUE_TYPE *, enum machine_mode,\n /* Set the sign of R to the sign of X.  */\n extern void real_copysign (REAL_VALUE_TYPE *, const REAL_VALUE_TYPE *);\n \n+#ifndef GENERATOR_FILE\n /* Convert between MPFR and REAL_VALUE_TYPE.  The caller is\n    responsible for initializing and clearing the MPFR parameter.  */\n \n extern void real_from_mpfr (REAL_VALUE_TYPE *, mpfr_srcptr, tree, mp_rnd_t);\n extern void mpfr_from_real (mpfr_ptr, const REAL_VALUE_TYPE *, mp_rnd_t);\n+#endif\n \n /* Check whether the real constant value given is an integer.  */\n extern bool real_isinteger (const REAL_VALUE_TYPE *c, enum machine_mode mode);"}, {"sha": "99c4aeadab14d04e7993f61cb8711c54279c5d16", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34917a102a4e0cf6b85e5cb48921885a36f3c758/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34917a102a4e0cf6b85e5cb48921885a36f3c758/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=34917a102a4e0cf6b85e5cb48921885a36f3c758", "patch": "@@ -4891,7 +4891,9 @@ extern int objects_must_conflict_p (tree, tree);\n /* In tree.c */\n extern int really_constant_p (const_tree);\n extern int int_fits_type_p (const_tree, const_tree);\n+#ifndef GENERATOR_FILE\n extern void get_type_static_bounds (const_tree, mpz_t, mpz_t);\n+#endif\n extern bool variably_modified_type_p (tree, tree);\n extern int tree_log2 (const_tree);\n extern int tree_floor_log2 (const_tree);"}]}