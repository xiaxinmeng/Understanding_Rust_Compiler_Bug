{"sha": "4167b0752365c69e5895b5c8097e7dba34f735f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE2N2IwNzUyMzY1YzY5ZTU4OTViNWM4MDk3ZTdkYmEzNGY3MzVmNQ==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2019-08-13T08:07:46Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-13T08:07:46Z"}, "message": "[Ada] Compiler may blow up on array aggregates whose size is very large\n\nThe compiler may crash when compiling array aggregates where the\ncomputation of the size produces a very large number that overflows\n(possibly producing a small result), such as with an aggregate of a type\nthat is an array of arrays, where each array range has close to\nInteger'Last elements. That can lead to Aggr_Size_OK returning\nincorrectly returning True, following on to allocating a very large\narray in function Flatten that blows the stack.  The size computation\nwas being performed using type Int, so this was changed to use universal\narithmetic.\n\n2019-08-13  Gary Dismukes  <dismukes@adacore.com>\n\ngcc/ada/\n\n\t* exp_aggr.adb (Aggr_Size_OK): Compute the aggregate size using\n\tuniversal arithmetic, to avoid situations where the size\n\tcomputation overflows.\n\ngcc/testsuite/\n\n\t* gnat.dg/aggr26.adb: New testcase.\n\nFrom-SVN: r274348", "tree": {"sha": "79a7b5c51d8e2d1f6751067f639bbf77e5c3e909", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79a7b5c51d8e2d1f6751067f639bbf77e5c3e909"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4167b0752365c69e5895b5c8097e7dba34f735f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4167b0752365c69e5895b5c8097e7dba34f735f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4167b0752365c69e5895b5c8097e7dba34f735f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4167b0752365c69e5895b5c8097e7dba34f735f5/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6aaab5081f44b00b78e9550b5a33ba81f85c162c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aaab5081f44b00b78e9550b5a33ba81f85c162c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aaab5081f44b00b78e9550b5a33ba81f85c162c"}], "stats": {"total": 41, "additions": 32, "deletions": 9}, "files": [{"sha": "415f950464effa03c3854c5efbe374af0f7276e8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4167b0752365c69e5895b5c8097e7dba34f735f5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4167b0752365c69e5895b5c8097e7dba34f735f5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4167b0752365c69e5895b5c8097e7dba34f735f5", "patch": "@@ -1,3 +1,9 @@\n+2019-08-13  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_aggr.adb (Aggr_Size_OK): Compute the aggregate size using\n+\tuniversal arithmetic, to avoid situations where the size\n+\tcomputation overflows.\n+\n 2019-08-13  Justin Squirek  <squirek@adacore.com>\n \n \t* repinfo.adb (List_Scalar_Storage_Order): Modify conditionals"}, {"sha": "925d6ae53a45723e1882fb6c97ff898dc644d496", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4167b0752365c69e5895b5c8097e7dba34f735f5/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4167b0752365c69e5895b5c8097e7dba34f735f5/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=4167b0752365c69e5895b5c8097e7dba34f735f5", "patch": "@@ -344,7 +344,7 @@ package body Exp_Aggr is\n       Lo   : Node_Id;\n       Hi   : Node_Id;\n       Indx : Node_Id;\n-      Siz  : Int;\n+      Size : Uint;\n       Lov  : Uint;\n       Hiv  : Uint;\n \n@@ -468,7 +468,7 @@ package body Exp_Aggr is\n          Max_Aggr_Size := 5000;\n       end if;\n \n-      Siz  := Component_Count (Component_Type (Typ));\n+      Size := UI_From_Int (Component_Count (Component_Type (Typ)));\n \n       Indx := First_Index (Typ);\n       while Present (Indx) loop\n@@ -538,14 +538,17 @@ package body Exp_Aggr is\n                return False;\n             end if;\n \n-            Siz := Siz * UI_To_Int (Rng);\n-         end;\n+            --  Compute the size using universal arithmetic to avoid the\n+            --  possibility of overflow on very large aggregates.\n \n-         if Siz <= 0\n-           or else Siz > Max_Aggr_Size\n-         then\n-            return False;\n-         end if;\n+            Size := Size * Rng;\n+\n+            if Size <= 0\n+              or else Size > Max_Aggr_Size\n+            then\n+               return False;\n+            end if;\n+         end;\n \n          --  Bounds must be in integer range, for later array construction\n "}, {"sha": "824fcc8687224c11035eb2537a2709f71146bf98", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4167b0752365c69e5895b5c8097e7dba34f735f5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4167b0752365c69e5895b5c8097e7dba34f735f5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4167b0752365c69e5895b5c8097e7dba34f735f5", "patch": "@@ -1,3 +1,7 @@\n+2019-08-13  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* gnat.dg/aggr26.adb: New testcase.\n+\n 2019-08-13  Yannick Moy  <moy@adacore.com>\n \n \t* gnat.dg/allocator2.adb, gnat.dg/allocator2.ads: New testcase."}, {"sha": "0466473d57bb2385b42a1808e96641b1d9e9e1c1", "filename": "gcc/testsuite/gnat.dg/aggr26.adb", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4167b0752365c69e5895b5c8097e7dba34f735f5/gcc%2Ftestsuite%2Fgnat.dg%2Faggr26.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4167b0752365c69e5895b5c8097e7dba34f735f5/gcc%2Ftestsuite%2Fgnat.dg%2Faggr26.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faggr26.adb?ref=4167b0752365c69e5895b5c8097e7dba34f735f5", "patch": "@@ -0,0 +1,10 @@\n+--  { dg-do compile }\n+\n+procedure Aggr26 is\n+\n+    type Row is array (Positive) of Integer;\n+    H : array (Positive) of Row := (others => (others => 0));  --  { dg-warning \"\\\"Storage_Error\\\" will be raised at run time\" }\n+\n+begin\n+   null;\n+end Aggr26;"}]}