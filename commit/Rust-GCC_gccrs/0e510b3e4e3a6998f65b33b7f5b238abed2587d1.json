{"sha": "0e510b3e4e3a6998f65b33b7f5b238abed2587d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU1MTBiM2U0ZTNhNjk5OGY2NWIzM2I3ZjViMjM4YWJlZDI1ODdkMQ==", "commit": {"author": {"name": "Adam Nemet", "email": "anemet@caviumnetworks.com", "date": "2009-01-12T04:27:31Z"}, "committer": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2009-01-12T04:27:31Z"}, "message": "expmed.c (store_bit_field_1): Properly truncate the paradoxical subreg of op0 to the original op0.\n\n\t* expmed.c (store_bit_field_1): Properly truncate the paradoxical\n\tsubreg of op0 to the original op0.\n\ntestsuite/\n\t* gcc.target/mips/ins-2.c: New test.\n\nFrom-SVN: r143288", "tree": {"sha": "67732e4ff9b8d58f808ca86f7a12b76fd78f273b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67732e4ff9b8d58f808ca86f7a12b76fd78f273b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e510b3e4e3a6998f65b33b7f5b238abed2587d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e510b3e4e3a6998f65b33b7f5b238abed2587d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e510b3e4e3a6998f65b33b7f5b238abed2587d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e510b3e4e3a6998f65b33b7f5b238abed2587d1/comments", "author": null, "committer": null, "parents": [{"sha": "3f429b87549884dd2d649503b311baa8510c511a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f429b87549884dd2d649503b311baa8510c511a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f429b87549884dd2d649503b311baa8510c511a"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "ba53e7df4cc917205780d3027dd2aa1230d8f0d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e510b3e4e3a6998f65b33b7f5b238abed2587d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e510b3e4e3a6998f65b33b7f5b238abed2587d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e510b3e4e3a6998f65b33b7f5b238abed2587d1", "patch": "@@ -1,3 +1,8 @@\n+2009-01-11  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* expmed.c (store_bit_field_1): Properly truncate the paradoxical\n+\tsubreg of op0 to the original op0.\n+\n 2009-01-11  Laurent GUERBY <laurent@guerby.net>\n \n \t* doc/sourcebuild.texi (Source Tree): Move up intl and fixinc."}, {"sha": "9ee5f29883d064975e6b1bc07a102cceb2751053", "filename": "gcc/expmed.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e510b3e4e3a6998f65b33b7f5b238abed2587d1/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e510b3e4e3a6998f65b33b7f5b238abed2587d1/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=0e510b3e4e3a6998f65b33b7f5b238abed2587d1", "patch": "@@ -749,6 +749,16 @@ store_bit_field_1 (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n       if (pat)\n \t{\n \t  emit_insn (pat);\n+\n+\t  /* If the mode of the insertion is wider than the mode of the\n+\t     target register we created a paradoxical subreg for the\n+\t     target.  Truncate the paradoxical subreg of the target to\n+\t     itself properly.  */\n+\t  if (!TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (GET_MODE (op0)),\n+\t\t\t\t      GET_MODE_BITSIZE (op_mode))\n+\t      && (REG_P (xop0)\n+\t\t  || GET_CODE (xop0) == SUBREG))\n+\t      convert_move (op0, xop0, true);\n \t  return true;\n \t}\n       delete_insns_since (last);"}, {"sha": "41f53a92da6248ed0a4e8629fdcd0d64b0276b28", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e510b3e4e3a6998f65b33b7f5b238abed2587d1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e510b3e4e3a6998f65b33b7f5b238abed2587d1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0e510b3e4e3a6998f65b33b7f5b238abed2587d1", "patch": "@@ -1,3 +1,7 @@\n+2009-01-11  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* gcc.target/mips/ins-2.c: New test.\n+\n 2009-01-11  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR testsuite/38809"}, {"sha": "a71e6c05326866537e95a69c8f76c05061f5f99c", "filename": "gcc/testsuite/gcc.target/mips/ins-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e510b3e4e3a6998f65b33b7f5b238abed2587d1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fins-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e510b3e4e3a6998f65b33b7f5b238abed2587d1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fins-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fins-2.c?ref=0e510b3e4e3a6998f65b33b7f5b238abed2587d1", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -meb isa_rev>=2 -mgp64\" } */\n+/* { dg-final { scan-assembler-times \"\\tins\\t|\\tdins\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tsll\\t|\\tins\\t\" 1 } } */\n+\n+/* When inserting something into the top bit of a 32-bit structure,\n+   we must make sure that the register remains properly sign-extended.\n+   There are two ways of doing this:\n+ \n+     - use purely 32-bit bit manipulations (a single INS, matched twice here).\n+     - use a 64-bit bit manipulation (DINS), and sign-extend the result.  We\n+     check for this extension using SLL.  */\n+\n+struct s\n+{\n+  int a:3;\n+  int b:29;\n+};\n+\n+NOMIPS16 void\n+f (int a)\n+{\n+  struct s s;\n+  asm volatile (\"\" : \"=r\"(s));\n+  s.a = a;\n+  asm volatile (\"\" :: \"r\"(s));\n+}"}]}