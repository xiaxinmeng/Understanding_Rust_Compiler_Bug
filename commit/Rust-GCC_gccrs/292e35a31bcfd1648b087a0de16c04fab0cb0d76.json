{"sha": "292e35a31bcfd1648b087a0de16c04fab0cb0d76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkyZTM1YTMxYmNmZDE2NDhiMDg3YTBkZTE2YzA0ZmFiMGNiMGQ3Ng==", "commit": {"author": {"name": "Christian Ehrhardt", "email": "ehrhardt@mathematik.uni-ulm.de", "date": "2003-01-21T08:02:31Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-01-21T08:02:31Z"}, "message": "re PR rtl-optimization/7507 (ICE (segfault) with -O2)\n\n        PR opt/7507\n        * calls.c (fix_unsafe_tree): Split out from ...\n        (expand_call): ... here.  Use it on the function address too.\n\nFrom-SVN: r61539", "tree": {"sha": "09ea707b673fd0e1fc779230f7640c7ce57a0811", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09ea707b673fd0e1fc779230f7640c7ce57a0811"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/292e35a31bcfd1648b087a0de16c04fab0cb0d76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/292e35a31bcfd1648b087a0de16c04fab0cb0d76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/292e35a31bcfd1648b087a0de16c04fab0cb0d76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/292e35a31bcfd1648b087a0de16c04fab0cb0d76/comments", "author": null, "committer": null, "parents": [{"sha": "d8d0f5af818f3579df750e4bfad32e6b96f22b63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8d0f5af818f3579df750e4bfad32e6b96f22b63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8d0f5af818f3579df750e4bfad32e6b96f22b63"}], "stats": {"total": 62, "additions": 39, "deletions": 23}, "files": [{"sha": "ec08e1f92c7be4170526f01c8303d7ff0ca4437c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292e35a31bcfd1648b087a0de16c04fab0cb0d76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292e35a31bcfd1648b087a0de16c04fab0cb0d76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=292e35a31bcfd1648b087a0de16c04fab0cb0d76", "patch": "@@ -1,3 +1,9 @@\n+2003-01-21  Christian Ehrhardt  <ehrhardt@mathematik.uni-ulm.de>\n+\n+\tPR opt/7507\n+\t* calls.c (fix_unsafe_tree): Split out from ...\n+\t(expand_call): ... here.  Use it on the function address too.\n+\n 2003-01-20  Richard Henderson  <rth@redhat.com>\n \n \t* expr.h (default_must_pass_in_stack): Move decl outside ifdef."}, {"sha": "e911dda4dd6d69c8705da12636600a7ea2159f36", "filename": "gcc/calls.c", "status": "modified", "additions": 33, "deletions": 23, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292e35a31bcfd1648b087a0de16c04fab0cb0d76/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292e35a31bcfd1648b087a0de16c04fab0cb0d76/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=292e35a31bcfd1648b087a0de16c04fab0cb0d76", "patch": "@@ -2068,6 +2068,35 @@ check_sibcall_argument_overlap (insn, arg, mark_stored_args_map)\n   return insn != NULL_RTX;\n }\n \n+static tree\n+fix_unsafe_tree (t)\n+     tree t;\n+{\n+  switch (unsafe_for_reeval (t))\n+    {\n+    case 0: /* Safe.  */\n+      break;\n+\n+    case 1: /* Mildly unsafe.  */\n+      t = unsave_expr (t);\n+      break;\n+\n+    case 2: /* Wildly unsafe.  */\n+      {\n+\ttree var = build_decl (VAR_DECL, NULL_TREE,\n+\t\t\t       TREE_TYPE (t));\n+\tSET_DECL_RTL (var,\n+\t\t      expand_expr (t, NULL_RTX, VOIDmode, EXPAND_NORMAL));\n+\tt = var;\n+      }\n+      break;\n+\n+    default:\n+      abort ();\n+    }\n+  return t;\n+}\n+\n /* Generate all the code for a function call\n    and return an rtx for its value.\n    Store the value in TARGET (specified as an rtx) if convenient.\n@@ -2516,35 +2545,16 @@ expand_call (exp, target, ignore)\n \n       for (; i != end; i += inc)\n \t{\n-\t  switch (unsafe_for_reeval (args[i].tree_value))\n-\t    {\n-\t    case 0: /* Safe.  */\n-\t      break;\n-\n-\t    case 1: /* Mildly unsafe.  */\n-\t      args[i].tree_value = unsave_expr (args[i].tree_value);\n-\t      break;\n-\n-\t    case 2: /* Wildly unsafe.  */\n-\t      {\n-\t\ttree var = build_decl (VAR_DECL, NULL_TREE,\n-\t\t\t\t       TREE_TYPE (args[i].tree_value));\n-\t\tSET_DECL_RTL (var,\n-\t\t\t      expand_expr (args[i].tree_value, NULL_RTX,\n-\t\t\t\t\t   VOIDmode, EXPAND_NORMAL));\n-\t\targs[i].tree_value = var;\n-\t      }\n-\t      break;\n-\n-\t    default:\n-\t      abort ();\n-\t    }\n+          args[i].tree_value = fix_unsafe_tree (args[i].tree_value);\n \t  /* We need to build actparms for optimize_tail_recursion.  We can\n \t     safely trash away TREE_PURPOSE, since it is unused by this\n \t     function.  */\n \t  if (try_tail_recursion)\n \t    actparms = tree_cons (NULL_TREE, args[i].tree_value, actparms);\n \t}\n+      /* Do the same for the function address if it is an expression. */\n+      if (!fndecl)\n+        TREE_OPERAND (exp, 0) = fix_unsafe_tree (TREE_OPERAND (exp, 0));\n       /* Expanding one of those dangerous arguments could have added\n \t cleanups, but otherwise give it a whirl.  */\n       if (any_pending_cleanups (1))"}]}