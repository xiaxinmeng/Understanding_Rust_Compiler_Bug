{"sha": "26067b8be85669cf7ec6ff91d764b27177c24ae6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYwNjdiOGJlODU2NjljZjdlYzZmZjkxZDc2NGIyNzE3N2MyNGFlNg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-01-07T16:51:49Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-01-07T16:51:49Z"}, "message": "2004-01-07  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/nio/DatagramChannelImpl.java\n\t(blocking): Removed.\n\t(DatagramChannelImpl): Call configureBlocking().\n\t(implConfigureBlocking): Dont initialize blocking.\n\t* gnu/java/nio/ServerSocketChannelImpl.java\n\t(blocking): Removed.\n\t(ServerSocketChannelImpl): Call configureBlocking().\n\t(implConfigureBlocking): Dont initialize blocking.\n\t* gnu/java/nio/SocketChannelImpl.java\n\t(blocking): Removed.\n\t(SocketChannelImpl): Call configureBlocking().\n\t(implConfigureBlocking): Dont initialize blocking.\n\t(connect): Use isBlocking().\n\t* java/nio/channels/spi/AbstractSelectableChannel.java\n\t(configureBlocking): Use blockingLock() instead of LOCK.\n\tSet blocking after successfully called implConfigureBlocking().\n\t(register): Use blockingLock() instead of LOCK.\n\nFrom-SVN: r75507", "tree": {"sha": "1a5cce4d1dcdf5ff059d56623bff738979decfdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a5cce4d1dcdf5ff059d56623bff738979decfdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26067b8be85669cf7ec6ff91d764b27177c24ae6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26067b8be85669cf7ec6ff91d764b27177c24ae6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26067b8be85669cf7ec6ff91d764b27177c24ae6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26067b8be85669cf7ec6ff91d764b27177c24ae6/comments", "author": null, "committer": null, "parents": [{"sha": "89e4eb2a348fb9d7679a401a2e6bba8a8209e211", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89e4eb2a348fb9d7679a401a2e6bba8a8209e211", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89e4eb2a348fb9d7679a401a2e6bba8a8209e211"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "85df30e65c6781e130ecc3e8227a112ed7c511aa", "filename": "libjava/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26067b8be85669cf7ec6ff91d764b27177c24ae6/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26067b8be85669cf7ec6ff91d764b27177c24ae6/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=26067b8be85669cf7ec6ff91d764b27177c24ae6", "patch": "@@ -1,3 +1,23 @@\n+2004-01-07  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/DatagramChannelImpl.java\n+\t(blocking): Removed.\n+\t(DatagramChannelImpl): Call configureBlocking().\n+\t(implConfigureBlocking): Dont initialize blocking.\n+\t* gnu/java/nio/ServerSocketChannelImpl.java\n+\t(blocking): Removed.\n+\t(ServerSocketChannelImpl): Call configureBlocking().\n+\t(implConfigureBlocking): Dont initialize blocking.\n+\t* gnu/java/nio/SocketChannelImpl.java\n+\t(blocking): Removed.\n+\t(SocketChannelImpl): Call configureBlocking().\n+\t(implConfigureBlocking): Dont initialize blocking.\n+\t(connect): Use isBlocking().\n+\t* java/nio/channels/spi/AbstractSelectableChannel.java\n+\t(configureBlocking): Use blockingLock() instead of LOCK.\n+\tSet blocking after successfully called implConfigureBlocking().\n+\t(register): Use blockingLock() instead of LOCK.\n+\n 2004-01-07  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/ServerSocket.java (isBound): Fixed documentation."}, {"sha": "3531803900aa999c5540c59f7ea002ec5b90e482", "filename": "libjava/gnu/java/nio/DatagramChannelImpl.java", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26067b8be85669cf7ec6ff91d764b27177c24ae6/libjava%2Fgnu%2Fjava%2Fnio%2FDatagramChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26067b8be85669cf7ec6ff91d764b27177c24ae6/libjava%2Fgnu%2Fjava%2Fnio%2FDatagramChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FDatagramChannelImpl.java?ref=26067b8be85669cf7ec6ff91d764b27177c24ae6", "patch": "@@ -56,13 +56,13 @@\n public final class DatagramChannelImpl extends DatagramChannel\n {\n   private NIODatagramSocket socket;\n-  private boolean blocking = true;\n   \n   protected DatagramChannelImpl (SelectorProvider provider)\n     throws IOException\n   {\n     super (provider);\n     socket = new NIODatagramSocket (new PlainDatagramSocketImpl(), this);\n+    configureBlocking(true);\n   }\n \n   public int getNativeFD()\n@@ -85,7 +85,6 @@ protected void implConfigureBlocking (boolean blocking)\n     throws IOException\n   {\n     socket.setSoTimeout (blocking ? 0 : NIOConstants.DEFAULT_TIMEOUT);\n-    this.blocking = blocking;\n   }\n \n   public DatagramChannel connect (SocketAddress remote)"}, {"sha": "fd975d20a7ad540bfa07b41989395cf134cc83f8", "filename": "libjava/gnu/java/nio/ServerSocketChannelImpl.java", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26067b8be85669cf7ec6ff91d764b27177c24ae6/libjava%2Fgnu%2Fjava%2Fnio%2FServerSocketChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26067b8be85669cf7ec6ff91d764b27177c24ae6/libjava%2Fgnu%2Fjava%2Fnio%2FServerSocketChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FServerSocketChannelImpl.java?ref=26067b8be85669cf7ec6ff91d764b27177c24ae6", "patch": "@@ -55,14 +55,14 @@\n public final class ServerSocketChannelImpl extends ServerSocketChannel\n {\n   private NIOServerSocket serverSocket;\n-  private boolean blocking = true;\n   private boolean connected;\n \n   protected ServerSocketChannelImpl (SelectorProvider provider)\n     throws IOException\n   {\n     super (provider);\n     serverSocket = new NIOServerSocket (this);\n+    configureBlocking(true);\n   }\n \n   public int getNativeFD()\n@@ -93,7 +93,6 @@ protected void implCloseSelectableChannel () throws IOException\n   protected void implConfigureBlocking (boolean blocking) throws IOException\n   {\n     serverSocket.setSoTimeout (blocking ? 0 : NIOConstants.DEFAULT_TIMEOUT);\n-    this.blocking = blocking;\n   }\n \n   public SocketChannel accept () throws IOException"}, {"sha": "efb5fec481b7dd88b79b2338e4763501373f594d", "filename": "libjava/gnu/java/nio/SocketChannelImpl.java", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26067b8be85669cf7ec6ff91d764b27177c24ae6/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26067b8be85669cf7ec6ff91d764b27177c24ae6/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java?ref=26067b8be85669cf7ec6ff91d764b27177c24ae6", "patch": "@@ -65,7 +65,6 @@ public final class SocketChannelImpl extends SocketChannel\n {\n   private PlainSocketImpl impl;\n   private NIOSocket socket;\n-  private boolean blocking = true;\n   private boolean connectionPending;\n \n   SocketChannelImpl (SelectorProvider provider)\n@@ -74,6 +73,7 @@ public final class SocketChannelImpl extends SocketChannel\n     super (provider);\n     impl = new PlainSocketImpl();\n     socket = new NIOSocket (impl, this);\n+    configureBlocking(true);\n   }\n   \n   SocketChannelImpl (SelectorProvider provider,\n@@ -117,7 +117,6 @@ protected void implCloseSelectableChannel () throws IOException\n   protected void implConfigureBlocking (boolean blocking) throws IOException\n   {\n     socket.setSoTimeout (blocking ? 0 : NIOConstants.DEFAULT_TIMEOUT);\n-    this.blocking = blocking;\n   }   \n \n   public boolean connect (SocketAddress remote) throws IOException\n@@ -137,7 +136,7 @@ public boolean connect (SocketAddress remote) throws IOException\n     if (((InetSocketAddress) remote).isUnresolved())\n       throw new UnresolvedAddressException();\n     \n-    if (blocking)\n+    if (isBlocking())\n       {\n         // Do blocking connect.\n         socket.connect (remote);"}, {"sha": "17d6a2eaea1f90361d2d8130111434b8a4468e45", "filename": "libjava/java/nio/channels/spi/AbstractSelectableChannel.java", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26067b8be85669cf7ec6ff91d764b27177c24ae6/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectableChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26067b8be85669cf7ec6ff91d764b27177c24ae6/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectableChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectableChannel.java?ref=26067b8be85669cf7ec6ff91d764b27177c24ae6", "patch": "@@ -75,13 +75,13 @@ public final Object blockingLock ()\n   /**\n    * Adjusts this channel's blocking mode.\n    */\n-  public final SelectableChannel configureBlocking (boolean block)\n+  public final SelectableChannel configureBlocking (boolean blocking)\n     throws IOException\n   {\n-    synchronized (LOCK)\n+    synchronized (blockingLock())\n       {\n-        blocking = true;\n-        implConfigureBlocking (block);\n+        implConfigureBlocking(blocking);\n+        this.blocking = blocking;\n       }\n     \n     return this;\n@@ -187,7 +187,7 @@ public final SelectionKey register (Selector selin, int ops, Object att)\n     SelectionKey key = null;\n     AbstractSelector selector = (AbstractSelector) selin;\n \n-    synchronized (LOCK)\n+    synchronized (blockingLock())\n       {\n         key = locate (selector);\n "}]}