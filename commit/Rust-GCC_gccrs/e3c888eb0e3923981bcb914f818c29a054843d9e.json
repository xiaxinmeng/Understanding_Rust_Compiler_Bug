{"sha": "e3c888eb0e3923981bcb914f818c29a054843d9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNjODg4ZWIwZTM5MjM5ODFiY2I5MTRmODE4YzI5YTA1NDg0M2Q5ZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-06-02T04:03:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-06-02T04:03:51Z"}, "message": "re PR c++/52973 (visibility attribute for class is not passed to its members)\n\n\tPR c++/52973\n\t* parser.c (cp_parser_class_head): Apply attributes here.\n\t* semantics.c (begin_class_definition): Not here.\n\t* cp-tree.h: Adjust.\n\nFrom-SVN: r188137", "tree": {"sha": "a1f209f8b5712f177fbfcf89cb917f57e6dea548", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1f209f8b5712f177fbfcf89cb917f57e6dea548"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3c888eb0e3923981bcb914f818c29a054843d9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3c888eb0e3923981bcb914f818c29a054843d9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3c888eb0e3923981bcb914f818c29a054843d9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3c888eb0e3923981bcb914f818c29a054843d9e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b691f14cc4a69541ff6915b8d0d102bb5f0b3451", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b691f14cc4a69541ff6915b8d0d102bb5f0b3451", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b691f14cc4a69541ff6915b8d0d102bb5f0b3451"}], "stats": {"total": 57, "additions": 43, "deletions": 14}, "files": [{"sha": "b094504fae8932b44d4eb3763c4adf7366c9ff1e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3c888eb0e3923981bcb914f818c29a054843d9e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3c888eb0e3923981bcb914f818c29a054843d9e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e3c888eb0e3923981bcb914f818c29a054843d9e", "patch": "@@ -1,5 +1,10 @@\n 2012-06-01  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/52973\n+\t* parser.c (cp_parser_class_head): Apply attributes here.\n+\t* semantics.c (begin_class_definition): Not here.\n+\t* cp-tree.h: Adjust.\n+\n \tPR c++/52725\n \t* parser.c (cp_parser_binary_expression): Bail early if we're parsing\n \ttentatively and the LHS has a parse error."}, {"sha": "d21c2bfee246fe0fd5d86e17f5cc38ce53675ca1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3c888eb0e3923981bcb914f818c29a054843d9e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3c888eb0e3923981bcb914f818c29a054843d9e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=e3c888eb0e3923981bcb914f818c29a054843d9e", "patch": "@@ -5585,7 +5585,7 @@ extern tree finish_fname\t\t\t(tree);\n extern void finish_translation_unit\t\t(void);\n extern tree finish_template_type_parm\t\t(tree, tree);\n extern tree finish_template_template_parm       (tree, tree);\n-extern tree begin_class_definition\t\t(tree, tree);\n+extern tree begin_class_definition\t\t(tree);\n extern void finish_template_decl\t\t(tree);\n extern tree finish_template_type\t\t(tree, tree, int);\n extern tree finish_base_specifier\t\t(tree, tree, bool);"}, {"sha": "16139d619aa73224b974222631c2e4565aefd72a", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3c888eb0e3923981bcb914f818c29a054843d9e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3c888eb0e3923981bcb914f818c29a054843d9e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=e3c888eb0e3923981bcb914f818c29a054843d9e", "patch": "@@ -2008,7 +2008,7 @@ static tree cp_parser_class_name\n static tree cp_parser_class_specifier\n   (cp_parser *);\n static tree cp_parser_class_head\n-  (cp_parser *, bool *, tree *, tree *);\n+  (cp_parser *, bool *, tree *);\n static enum tag_types cp_parser_class_key\n   (cp_parser *);\n static void cp_parser_member_specification_opt\n@@ -17908,7 +17908,6 @@ cp_parser_class_specifier_1 (cp_parser* parser)\n   /* Parse the class-head.  */\n   type = cp_parser_class_head (parser,\n \t\t\t       &nested_name_specifier_p,\n-\t\t\t       &attributes,\n \t\t\t       &bases);\n   /* If the class-head was a semantic disaster, skip the entire body\n      of the class.  */\n@@ -17967,7 +17966,7 @@ cp_parser_class_specifier_1 (cp_parser* parser)\n       scope = CP_DECL_CONTEXT (TYPE_MAIN_DECL (type));\n       old_scope = push_inner_scope (scope);\n     }\n-  type = begin_class_definition (type, attributes);\n+  type = begin_class_definition (type);\n \n   if (type == error_mark_node)\n     /* If the type is erroneous, skip the entire body of the class.  */\n@@ -18224,7 +18223,6 @@ cp_parser_class_specifier (cp_parser* parser)\n static tree\n cp_parser_class_head (cp_parser* parser,\n \t\t      bool* nested_name_specifier_p,\n-\t\t      tree *attributes_p,\n \t\t      tree *bases)\n {\n   tree nested_name_specifier;\n@@ -18592,6 +18590,14 @@ cp_parser_class_head (cp_parser* parser,\n   else if (type == error_mark_node)\n     type = NULL_TREE;\n \n+  if (type)\n+    {\n+      /* Apply attributes now, before any use of the class as a template\n+\t argument in its base list.  */\n+      cplus_decl_attributes (&type, attributes, (int)ATTR_FLAG_TYPE_IN_PLACE);\n+      fixup_attribute_variants (type);\n+    }\n+\n   /* We will have entered the scope containing the class; the names of\n      base classes should be looked up in that context.  For example:\n \n@@ -18618,7 +18624,6 @@ cp_parser_class_head (cp_parser* parser,\n \n   if (type)\n     DECL_SOURCE_LOCATION (TYPE_NAME (type)) = type_start_token->location;\n-  *attributes_p = attributes;\n   if (type && (virt_specifiers & VIRT_SPEC_FINAL))\n     CLASSTYPE_FINAL (type) = 1;\n  out:"}, {"sha": "8fefce0d5abca91676fbed8c3257f7e6e684fbbf", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3c888eb0e3923981bcb914f818c29a054843d9e/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3c888eb0e3923981bcb914f818c29a054843d9e/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=e3c888eb0e3923981bcb914f818c29a054843d9e", "patch": "@@ -2516,7 +2516,7 @@ check_template_template_default_arg (tree argument)\n /* Begin a class definition, as indicated by T.  */\n \n tree\n-begin_class_definition (tree t, tree attributes)\n+begin_class_definition (tree t)\n {\n   if (error_operand_p (t) || error_operand_p (TYPE_MAIN_DECL (t)))\n     return error_mark_node;\n@@ -2573,9 +2573,6 @@ begin_class_definition (tree t, tree attributes)\n   pushclass (t);\n   TYPE_BEING_DEFINED (t) = 1;\n \n-  cplus_decl_attributes (&t, attributes, (int) ATTR_FLAG_TYPE_IN_PLACE);\n-  fixup_attribute_variants (t);\n-\n   if (flag_pack_struct)\n     {\n       tree v;\n@@ -8696,7 +8693,7 @@ begin_lambda_type (tree lambda)\n   xref_basetypes (type, /*bases=*/NULL_TREE);\n \n   /* Start the class.  */\n-  type = begin_class_definition (type, /*attributes=*/NULL_TREE);\n+  type = begin_class_definition (type);\n   if (type == error_mark_node)\n     return error_mark_node;\n "}, {"sha": "28b52e81237e395edbaf5116613361a220ca0012", "filename": "gcc/objcp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3c888eb0e3923981bcb914f818c29a054843d9e/gcc%2Fobjcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3c888eb0e3923981bcb914f818c29a054843d9e/gcc%2Fobjcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2FChangeLog?ref=e3c888eb0e3923981bcb914f818c29a054843d9e", "patch": "@@ -1,3 +1,8 @@\n+2012-06-02  Jason Merrill  <jason@redhat.com>\n+\n+\t* objcp-decl.c (objcp_start_struct): Adjust for change in\n+\tbegin_class_definition prototype.\n+\n 2011-10-14  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* Make-lang.in (OBJCXX_OBJS): Added objc-map.o."}, {"sha": "80404695f99d8bd137eb2623ca94aead4a7df971", "filename": "gcc/objcp/objcp-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3c888eb0e3923981bcb914f818c29a054843d9e/gcc%2Fobjcp%2Fobjcp-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3c888eb0e3923981bcb914f818c29a054843d9e/gcc%2Fobjcp%2Fobjcp-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2Fobjcp-decl.c?ref=e3c888eb0e3923981bcb914f818c29a054843d9e", "patch": "@@ -49,7 +49,7 @@ objcp_start_struct (location_t loc ATTRIBUTE_UNUSED,\n   CLASSTYPE_DECLARED_CLASS (s) = 0;  /* this is a 'struct', not a 'class'.  */\n   xref_basetypes (s, NULL_TREE);     /* no base classes here!  */\n \n-  return begin_class_definition (s, NULL_TREE);\n+  return begin_class_definition (s);\n }\n \n tree "}, {"sha": "3d0b2497405ba3fa1d6464f64ff8e487da50b669", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3c888eb0e3923981bcb914f818c29a054843d9e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3c888eb0e3923981bcb914f818c29a054843d9e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e3c888eb0e3923981bcb914f818c29a054843d9e", "patch": "@@ -1,5 +1,9 @@\n 2012-06-01  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/52973\n+\t* g++.dg/ext/visibility/template12.C: New.\n+\t* g++.dg/ext/attrib14.C: Adjust warning line.\n+\n \tPR c++/52725\n \t* g++.dg/parse/new6.C: New.\n \t* g++.dg/template/sizeof-template-argument.C: Adjust error message."}, {"sha": "ebe0456d04a8adf4ac311ca2d9d7131a1df81e1b", "filename": "gcc/testsuite/g++.dg/ext/attrib14.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3c888eb0e3923981bcb914f818c29a054843d9e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3c888eb0e3923981bcb914f818c29a054843d9e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib14.C?ref=e3c888eb0e3923981bcb914f818c29a054843d9e", "patch": "@@ -2,8 +2,8 @@\n // The bogus attribute is ignored, but was in TYPE_ATTRIBUTES during\n // parsing of the class, causing some variants to have it and some not.\n \n-struct __attribute__((bogus)) A\n-{\t\t\t\t// { dg-warning \"ignored\" \"\" }\n+struct __attribute__((bogus)) A\t// { dg-warning \"ignored\" \"\" }\n+{\n     virtual ~A();\n     void foo(const A&);\n     void bar(const A&);"}, {"sha": "b9219d528f98a1ac04fa4de623ff28cc6cd67cae", "filename": "gcc/testsuite/g++.dg/ext/visibility/template12.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3c888eb0e3923981bcb914f818c29a054843d9e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ftemplate12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3c888eb0e3923981bcb914f818c29a054843d9e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ftemplate12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ftemplate12.C?ref=e3c888eb0e3923981bcb914f818c29a054843d9e", "patch": "@@ -0,0 +1,13 @@\n+// { dg-require-visibility \"\" }\n+// { dg-options \"-fvisibility=hidden\" }\n+// { dg-final { scan-not-hidden \"_ZN1aI1bE1cE\" } }\n+\n+template <class T> class __attribute__((visibility(\"default\"))) a\n+{\n+public:\n+  /* A */ static int c;\n+};\n+\n+class __attribute__((visibility(\"default\"))) b : a <b> {};\n+\n+template<> /* B */ int a<b>::c = 0;"}]}