{"sha": "db5fa0837e464b595a3d63766060bae1c9ac5ccc", "node_id": "C_kwDOANBUbNoAKGRiNWZhMDgzN2U0NjRiNTk1YTNkNjM3NjYwNjBiYWUxYzlhYzVjY2M", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-03T14:33:13Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-09T22:56:57Z"}, "message": "libstdc++: Avoid unnecessary allocations in std::map insertions [PR92300]\n\nInserting a pair<Key, Value> into a map<Key, Value> will allocate a new\nnode and construct a pair<const Key, Value> in the node, then check if\nthe Key is already present in the map. That is because pair<Key, Value>\nis not the same type as the map's value_type. But it only differs in the\nconst-qualification on the Key, and so we should be able to do the\nlookup directly, without allocating a new node. This avoids allocating\nand then deallocating a node for the case where the key is already found\nand nothing gets inserted.\n\nWe can take this optimization further and lookup the key directly for a\npair<Key, X>, pair<const Key, X>, pair<Key&, X> etc. for any X. A strict\nreading of the standard says we can only do this when we know the\nallocator won't do anything funky with the value when constructing a\npair<const Key, Value> from a slightly different type. Inserting that\ntype only requires the value_type to be Cpp17EmplaceInsertable into the\ncontainer, and that doesn't have any requirement that the value is\nunchanged (unlike Cpp17CopyInsertable and Cpp17MoveInsertable). For that\nreason, the optimization is only done for maps using std::allocator.\n\nA similar optimization can be done for map.emplace(key, value) where the\nfirst argument is similar to the key_type and so can be looked up\nwithout allocating a new node and constructing a key_type.\n\nFinally, both of the insert and emplace cases can use the same\noptimization when key_type is a scalar type and some other scalar is\nbeing passed as the insert/emplace argument. Converting from one scalar\ntype to another won't have surprising value-altering behaviour, and has\nno side effects (unlike e.g. constructing a std::string from a const\nchar* argument, which might allocate).\n\nWe don't need to do this for std::multimap, because we always insert the\nnew node even if the key is already present. So there's no benefit to\ndoing the lookup before allocating the new node.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/92300\n\t* include/bits/stl_map.h (insert(Pair&&), emplace(Args&&...)):\n\tCheck whether the arguments can be looked up directly without\n\tconstructing a temporary node first.\n\t* include/bits/stl_pair.h (__is_pair): Move to here, from ...\n\t* include/bits/uses_allocator_args.h (__is_pair): ... here.\n\t* testsuite/23_containers/map/modifiers/emplace/92300.cc: New test.\n\t* testsuite/23_containers/map/modifiers/insert/92300.cc: New test.", "tree": {"sha": "b926499685b1fb3ab3dd77ef60490957e9785891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b926499685b1fb3ab3dd77ef60490957e9785891"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db5fa0837e464b595a3d63766060bae1c9ac5ccc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db5fa0837e464b595a3d63766060bae1c9ac5ccc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db5fa0837e464b595a3d63766060bae1c9ac5ccc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db5fa0837e464b595a3d63766060bae1c9ac5ccc/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb9875ebf10c86be21824cb836b7b3b80f3a731b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb9875ebf10c86be21824cb836b7b3b80f3a731b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb9875ebf10c86be21824cb836b7b3b80f3a731b"}], "stats": {"total": 138, "additions": 130, "deletions": 8}, "files": [{"sha": "658d58651386621418e55b94718af553f1aeb7fe", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5fa0837e464b595a3d63766060bae1c9ac5ccc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5fa0837e464b595a3d63766060bae1c9ac5ccc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=db5fa0837e464b595a3d63766060bae1c9ac5ccc", "patch": "@@ -154,6 +154,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       typedef __gnu_cxx::__alloc_traits<_Pair_alloc_type> _Alloc_traits;\n \n+#if __cplusplus >= 201703L\n+      template<typename _Up, typename _Vp = remove_reference_t<_Up>>\n+\tstatic constexpr bool __usable_key\n+\t  = __or_v<is_same<const _Vp, const _Key>,\n+\t\t   __and_<is_scalar<_Vp>, is_scalar<_Key>>>;\n+#endif\n+\n     public:\n       // many of these are specified differently in ISO, but the following are\n       // \"functionally equivalent\"\n@@ -574,7 +581,27 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename... _Args>\n \tstd::pair<iterator, bool>\n \templace(_Args&&... __args)\n-\t{ return _M_t._M_emplace_unique(std::forward<_Args>(__args)...); }\n+\t{\n+#if __cplusplus >= 201703L\n+\t  if constexpr (sizeof...(_Args) == 2)\n+\t    if constexpr (is_same_v<allocator_type, allocator<value_type>>)\n+\t      {\n+\t\tauto&& [__a, __v] = pair<_Args&...>(__args...);\n+\t\tif constexpr (__usable_key<decltype(__a)>)\n+\t\t  {\n+\t\t    const key_type& __k = __a;\n+\t\t    iterator __i = lower_bound(__k);\n+\t\t    if (__i == end() || key_comp()(__k, (*__i).first))\n+\t\t      {\n+\t\t\t__i = emplace_hint(__i, std::forward<_Args>(__args)...);\n+\t\t\treturn {__i, true};\n+\t\t      }\n+\t\t    return {__i, false};\n+\t\t  }\n+\t      }\n+#endif\n+\t  return _M_t._M_emplace_unique(std::forward<_Args>(__args)...);\n+\t}\n \n       /**\n        *  @brief Attempts to build and insert a std::pair into the %map.\n@@ -814,7 +841,25 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t__enable_if_t<is_constructible<value_type, _Pair>::value,\n \t\t      pair<iterator, bool>>\n \tinsert(_Pair&& __x)\n-\t{ return _M_t._M_emplace_unique(std::forward<_Pair>(__x)); }\n+\t{\n+#if __cplusplus >= 201703L\n+\t  using _P2 = remove_reference_t<_Pair>;\n+\t  if constexpr (__is_pair<_P2>)\n+\t    if constexpr (is_same_v<allocator_type, allocator<value_type>>)\n+\t      if constexpr (__usable_key<typename _P2::first_type>)\n+\t\t{\n+\t\t  const key_type& __k = __x.first;\n+\t\t  iterator __i = lower_bound(__k);\n+\t\t  if (__i == end() || key_comp()(__k, (*__i).first))\n+\t\t    {\n+\t\t      __i = emplace_hint(__i, std::forward<_Pair>(__x));\n+\t\t      return {__i, true};\n+\t\t    }\n+\t\t  return {__i, false};\n+\t\t}\n+#endif\n+\t  return _M_t._M_emplace_unique(std::forward<_Pair>(__x));\n+\t}\n #endif\n       /// @}\n "}, {"sha": "5f7b60932e46773a0941e534e279ca6efaf2b95f", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5fa0837e464b595a3d63766060bae1c9ac5ccc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5fa0837e464b595a3d63766060bae1c9ac5ccc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=db5fa0837e464b595a3d63766060bae1c9ac5ccc", "patch": "@@ -777,6 +777,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp1, typename _Tp2>\n     inline constexpr size_t tuple_size_v<const pair<_Tp1, _Tp2>> = 2;\n+\n+  template<typename _Tp>\n+    inline constexpr bool __is_pair = false;\n+\n+  template<typename _Tp, typename _Up>\n+    inline constexpr bool __is_pair<pair<_Tp, _Up>> = true;\n+\n+  template<typename _Tp, typename _Up>\n+    inline constexpr bool __is_pair<const pair<_Tp, _Up>> = true;\n #endif\n \n   /// @cond undocumented"}, {"sha": "e1fd7e7d6118bb4e24fac7ab04c52bbfc43ad6d7", "filename": "libstdc++-v3/include/bits/uses_allocator_args.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5fa0837e464b595a3d63766060bae1c9ac5ccc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator_args.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5fa0837e464b595a3d63766060bae1c9ac5ccc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator_args.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator_args.h?ref=db5fa0837e464b595a3d63766060bae1c9ac5ccc", "patch": "@@ -56,12 +56,6 @@\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-  template<typename _Tp>\n-    inline constexpr bool __is_pair = false;\n-  template<typename _Tp, typename _Up>\n-    inline constexpr bool __is_pair<pair<_Tp, _Up>> = true;\n-  template<typename _Tp, typename _Up>\n-    inline constexpr bool __is_pair<const pair<_Tp, _Up>> = true;\n \n   template<typename _Tp>\n     concept _Std_pair = __is_pair<_Tp>;"}, {"sha": "937b4d9a103b216297786dfe12b4b86806b33c0a", "filename": "libstdc++-v3/testsuite/23_containers/map/modifiers/emplace/92300.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5fa0837e464b595a3d63766060bae1c9ac5ccc/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Femplace%2F92300.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5fa0837e464b595a3d63766060bae1c9ac5ccc/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Femplace%2F92300.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Femplace%2F92300.cc?ref=db5fa0837e464b595a3d63766060bae1c9ac5ccc", "patch": "@@ -0,0 +1,36 @@\n+// { dg-do run { target c++17 } }\n+\n+#include <map>\n+#include <cstdlib>\n+\n+bool oom = false;\n+\n+void* operator new(std::size_t n)\n+{\n+  if (oom)\n+    throw std::bad_alloc();\n+  return std::malloc(n);\n+}\n+\n+void operator delete(void* p)\n+{\n+  std::free(p);\n+}\n+\n+void operator delete(void* p, std::size_t)\n+{\n+  std::free(p);\n+}\n+\n+int main()\n+{\n+  std::map<int, int> m;\n+  int i = 0;\n+  (void) m[i];\n+  oom = true;\n+  m.emplace(i, 1);\n+  m.emplace(i, 2L);\n+  const int c = 3;\n+  m.emplace(i, c);\n+  m.emplace((long)i, 4);\n+}"}, {"sha": "80abdaf1f30bf81efffed99a247984d642dd92cb", "filename": "libstdc++-v3/testsuite/23_containers/map/modifiers/insert/92300.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5fa0837e464b595a3d63766060bae1c9ac5ccc/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Finsert%2F92300.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5fa0837e464b595a3d63766060bae1c9ac5ccc/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Finsert%2F92300.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Finsert%2F92300.cc?ref=db5fa0837e464b595a3d63766060bae1c9ac5ccc", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do run { target c++17 } }\n+\n+#include <map>\n+#include <cstdlib>\n+\n+bool oom = false;\n+\n+void* operator new(std::size_t n)\n+{\n+  if (oom)\n+    throw std::bad_alloc();\n+  return std::malloc(n);\n+}\n+\n+void operator delete(void* p)\n+{\n+  std::free(p);\n+}\n+\n+void operator delete(void* p, std::size_t)\n+{\n+  std::free(p);\n+}\n+\n+int main()\n+{\n+  using std::pair;\n+  std::map<int, int> m;\n+  int i = 0;\n+  (void) m[i];\n+  oom = true;\n+  m.insert({i, 1});\t\t\t    // insert(value_type&&)\n+  m.insert(pair<int, int>(i, 2));\t    // insert(Pair&&)\n+  m.insert(pair<int&, int>(i, 3));\t    // insert(Pair&&)\n+  m.insert(pair<int, long>(i, 4L));\t    // insert(Pair&&)\n+  m.insert(pair<const int, long>(i, 5L));   // insert(Pair&&)\n+  m.insert(pair<const int&, long>(i, 6L));  // insert(Pair&&)\n+}"}]}