{"sha": "3e542a58b2d9545c4edc0bbd18bb7c907219baa4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U1NDJhNThiMmQ5NTQ1YzRlZGMwYmJkMThiYjdjOTA3MjE5YmFhNA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@gnat.com", "date": "2001-10-26T16:44:45Z"}, "committer": {"name": "Geert Bosch", "email": "bosch@gcc.gnu.org", "date": "2001-10-26T16:44:45Z"}, "message": "sinfo.ads: Define Associated_Node to overlap Entity field.\n\n\t* sinfo.ads: Define Associated_Node to overlap Entity field. Cleanup.\n\n\t* sinfo.ads: Clarify use of Associated_Node (documentation only).\n\n\t* sem_ch12.adb: Change Node4 to Associated_Node. Change\n\tAssociated_Node to Get_Associated_Node. Put use of Unchecked_Access\n\tmuch more narrowly in places where needed. These are cleanups.\n\nFrom-SVN: r46549", "tree": {"sha": "c64198dc5d405eed027bd51f1a4f865990c44e85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c64198dc5d405eed027bd51f1a4f865990c44e85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e542a58b2d9545c4edc0bbd18bb7c907219baa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e542a58b2d9545c4edc0bbd18bb7c907219baa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e542a58b2d9545c4edc0bbd18bb7c907219baa4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e542a58b2d9545c4edc0bbd18bb7c907219baa4/comments", "author": null, "committer": null, "parents": [{"sha": "0bf08bfe351ec29e2439180cbb1f587de9333623", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bf08bfe351ec29e2439180cbb1f587de9333623", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bf08bfe351ec29e2439180cbb1f587de9333623"}], "stats": {"total": 299, "additions": 185, "deletions": 114}, "files": [{"sha": "2dc1a14b8d66c1ba7cc3cdaf4602c82c9f941e19", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e542a58b2d9545c4edc0bbd18bb7c907219baa4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e542a58b2d9545c4edc0bbd18bb7c907219baa4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3e542a58b2d9545c4edc0bbd18bb7c907219baa4", "patch": "@@ -1,3 +1,13 @@\n+2001-10-26  Robert Dewar <dewar@gnat.com>\n+\n+\t* sinfo.ads: Define Associated_Node to overlap Entity field. Cleanup.\n+\t\n+\t* sinfo.ads: Clarify use of Associated_Node (documentation only).\n+\t\n+\t* sem_ch12.adb: Change Node4 to Associated_Node. Change \n+\tAssociated_Node to Get_Associated_Node. Put use of Unchecked_Access \n+\tmuch more narrowly in places where needed. These are cleanups.\n+\n 2001-10-26  Joel Brobecker <brobecke@gnat.com>\n \n \t* 5zosinte.ads (null_pthread): new constant."}, {"sha": "481b29daf0faac5b236ed6453e1d5a5805d76384", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 140, "deletions": 109, "changes": 249, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e542a58b2d9545c4edc0bbd18bb7c907219baa4/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e542a58b2d9545c4edc0bbd18bb7c907219baa4/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=3e542a58b2d9545c4edc0bbd18bb7c907219baa4", "patch": "@@ -75,10 +75,6 @@ with GNAT.HTable;\n \n package body Sem_Ch12 is\n \n-   use Atree.Unchecked_Access;\n-   --  This package performs untyped traversals of the tree, therefore it\n-   --  needs direct access to the fields of a node.\n-\n    ----------------------------------------------------------\n    -- Implementation of Generic Analysis and Instantiation --\n    -----------------------------------------------------------\n@@ -526,21 +522,24 @@ package body Sem_Ch12 is\n    --  Add the context clause of the unit containing a generic unit to\n    --  an instantiation that is a compilation unit.\n \n-   function Associated_Node (N : Node_Id) return Node_Id;\n+   function Get_Associated_Node (N : Node_Id) return Node_Id;\n    --  In order to propagate semantic information back from the analyzed\n    --  copy to the original generic, we maintain links between selected nodes\n    --  in the generic and their corresponding copies. At the end of generic\n    --  analysis, the routine Save_Global_References traverses the generic\n    --  tree, examines the semantic information, and preserves the links to\n    --  those nodes that contain global information. At instantiation, the\n-   --  information from the associated node is placed on the new copy, so that\n-   --  name resolution is not repeated.\n-   --  Two kinds of nodes have associated nodes:\n+   --  information from the associated node is placed on the new copy, so\n+   --  that name resolution is not repeated.\n+\n+   --  Three kinds of nodes have associated nodes:\n \n-   --  a) those that contain entities, that is to say identifiers, expanded_\n-   --    names, and operators.\n+   --    a) those that contain entities, that is to say identifiers,\n+   --       expanded_names, and operators (N_Has_Entity)\n \n-   --  b) aggregates.\n+   --    b) aggregates (N_Aggregate and N_Extension_Aggregate)\n+\n+   --    c) selected components (N_Selected_Component)\n \n    --  For the first class, the associated node preserves the entity if it is\n    --  global. If the generic contains nested instantiations, the associated_\n@@ -554,8 +553,13 @@ package body Sem_Ch12 is\n    --  some of the ancestor types, if their view is private at the point of\n    --  instantiation.\n \n-   --  The associated node is stored in Node4, using this field as a free\n-   --  union in a fashion that should clearly be under control of sinfo ???\n+   --  Query??? why selected components. What about N_Freeze_Nodes, I assume\n+   --  that the answer is no, which means that the comment above for a) is\n+   --  confusing ???\n+\n+   --  The associated node is stored in the Associated_Node field. Note that\n+   --  this field overlaps Entity, which is fine, because the whole point is\n+   --  that we don't need or want the normal Entity field in this situation.\n \n    procedure Move_Freeze_Nodes\n      (Out_Of : Entity_Id;\n@@ -573,12 +577,6 @@ package body Sem_Ch12 is\n    --  before installing parents of generics, that are not visible for the\n    --  actuals themselves.\n \n-   procedure Set_Associated_Node\n-     (Gen_Node  : Node_Id;\n-      Copy_Node : Node_Id);\n-   --  Establish the link between an identifier in the generic unit, and the\n-   --  corresponding node in the semantic copy.\n-\n    procedure Valid_Default_Attribute (Nam : Entity_Id; Def : Node_Id);\n    --  Verify that an attribute that appears as the default for a formal\n    --  subprogram is a function or procedure with the correct profile.\n@@ -3238,13 +3236,12 @@ package body Sem_Ch12 is\n \n    end Analyze_Subprogram_Instantiation;\n \n-   ---------------------\n-   -- Associated_Node --\n-   ---------------------\n+   -------------------------\n+   -- Get_Associated_Node --\n+   -------------------------\n \n-   function Associated_Node (N : Node_Id) return Node_Id is\n-      Assoc : Node_Id := Node4 (N);\n-      --  ??? what is Node4 being used for here?\n+   function Get_Associated_Node (N : Node_Id) return Node_Id is\n+      Assoc : Node_Id := Associated_Node (N);\n \n    begin\n       if Nkind (Assoc) /= Nkind (N) then\n@@ -3256,33 +3253,37 @@ package body Sem_Ch12 is\n          return Assoc;\n       else\n          --  If the node is part of an inner generic, it may itself have been\n-         --  remapped into a further generic copy. Node4 is otherwise used for\n-         --  the entity of the node, and will be of a different node kind, or\n-         --  else N has been rewritten as a literal or function call.\n+         --  remapped into a further generic copy. Associated_Node is otherwise\n+         --  used for the entity of the node, and will be of a different node\n+         --  kind, or else N has been rewritten as a literal or function call.\n \n-         while Present (Node4 (Assoc))\n-           and then Nkind (Node4 (Assoc)) = Nkind (Assoc)\n+         while Present (Associated_Node (Assoc))\n+           and then Nkind (Associated_Node (Assoc)) = Nkind (Assoc)\n          loop\n-            Assoc := Node4 (Assoc);\n+            Assoc := Associated_Node (Assoc);\n          end loop;\n \n          --  Follow and additional link in case the final node was rewritten.\n          --  This can only happen with nested generic units.\n \n          if (Nkind (Assoc) = N_Identifier or else Nkind (Assoc) in N_Op)\n-           and then Present (Node4 (Assoc))\n-           and then (Nkind (Node4 (Assoc)) = N_Function_Call\n-                       or else Nkind (Node4 (Assoc)) = N_Explicit_Dereference\n-                       or else Nkind (Node4 (Assoc)) = N_Integer_Literal\n-                       or else Nkind (Node4 (Assoc)) = N_Real_Literal\n-                       or else Nkind (Node4 (Assoc)) = N_String_Literal)\n+           and then Present (Associated_Node (Assoc))\n+           and then (Nkind (Associated_Node (Assoc)) = N_Function_Call\n+                       or else\n+                     Nkind (Associated_Node (Assoc)) = N_Explicit_Dereference\n+                       or else\n+                     Nkind (Associated_Node (Assoc)) = N_Integer_Literal\n+                       or else\n+                     Nkind (Associated_Node (Assoc)) = N_Real_Literal\n+                       or else\n+                     Nkind (Associated_Node (Assoc)) = N_String_Literal)\n          then\n-            Assoc := Node4 (Assoc);\n+            Assoc := Associated_Node (Assoc);\n          end if;\n \n          return Assoc;\n       end if;\n-   end Associated_Node;\n+   end Get_Associated_Node;\n \n    -------------------------------------------\n    -- Build_Instance_Compilation_Unit_Nodes --\n@@ -4041,7 +4042,7 @@ package body Sem_Ch12 is\n          elsif Has_Private_View (N)\n            and then not Is_Private_Type (T)\n            and then not Has_Been_Exchanged (T)\n-           and then Etype (Associated_Node (N)) /= T\n+           and then Etype (Get_Associated_Node (N)) /= T\n          then\n             --  Only the private declaration was visible in the generic. If\n             --  the type appears in a subtype declaration, the subtype in the\n@@ -4060,7 +4061,7 @@ package body Sem_Ch12 is\n               or else not In_Private_Part (Scope (Base_Type (T)))\n             then\n                Append_Elmt (T, Exchanged_Views);\n-               Exchange_Declarations (Etype (Associated_Node (N)));\n+               Exchange_Declarations (Etype (Get_Associated_Node (N)));\n             end if;\n \n          --  For composite types with inconsistent representation\n@@ -4214,6 +4215,11 @@ package body Sem_Ch12 is\n       -----------------------\n \n       procedure Copy_Descendants is\n+\n+         use Atree.Unchecked_Access;\n+         --  This code section is part of the implementation of an untyped\n+         --  tree traversal, so it needs direct access to node fields.\n+\n       begin\n          Set_Field1 (New_N, Copy_Generic_Descendant (Field1 (N)));\n          Set_Field2 (New_N, Copy_Generic_Descendant (Field2 (N)));\n@@ -4395,13 +4401,13 @@ package body Sem_Ch12 is\n             --  If the associated node is still defined, the entity in\n             --  it is global, and must be copied to the instance.\n \n-            if Present (Associated_Node (N)) then\n-               if Nkind (Associated_Node (N)) = Nkind (N) then\n-                  Set_Entity (New_N, Entity (Associated_Node (N)));\n+            if Present (Get_Associated_Node (N)) then\n+               if Nkind (Get_Associated_Node (N)) = Nkind (N) then\n+                  Set_Entity (New_N, Entity (Get_Associated_Node (N)));\n                   Check_Private_View (N);\n \n-               elsif Nkind (Associated_Node (N)) = N_Function_Call then\n-                  Set_Entity (New_N, Entity (Name (Associated_Node (N))));\n+               elsif Nkind (Get_Associated_Node (N)) = N_Function_Call then\n+                  Set_Entity (New_N, Entity (Name (Get_Associated_Node (N))));\n \n                else\n                   Set_Entity (New_N, Empty);\n@@ -4584,16 +4590,16 @@ package body Sem_Ch12 is\n             Set_Associated_Node (N, New_N);\n \n          else\n-            if Present (Associated_Node (N))\n-              and then Nkind (Associated_Node (N)) = Nkind (N)\n+            if Present (Get_Associated_Node (N))\n+              and then Nkind (Get_Associated_Node (N)) = Nkind (N)\n             then\n                --  In the generic the aggregate has some composite type.\n                --  If at the point of instantiation the type has a private\n                --  view, install the full view (and that of its ancestors,\n                --  if any).\n \n                declare\n-                  T   : Entity_Id := (Etype (Associated_Node (New_N)));\n+                  T   : Entity_Id := (Etype (Get_Associated_Node (New_N)));\n                   Rt  : Entity_Id;\n \n                begin\n@@ -4626,10 +4632,17 @@ package body Sem_Ch12 is\n          --  Do not copy the associated node, which points to\n          --  the generic copy of the aggregate.\n \n-         Set_Field1 (New_N, Copy_Generic_Descendant (Field1 (N)));\n-         Set_Field2 (New_N, Copy_Generic_Descendant (Field2 (N)));\n-         Set_Field3 (New_N, Copy_Generic_Descendant (Field3 (N)));\n-         Set_Field5 (New_N, Copy_Generic_Descendant (Field5 (N)));\n+         declare\n+            use Atree.Unchecked_Access;\n+            --  This code section is part of the implementation of an untyped\n+            --  tree traversal, so it needs direct access to node fields.\n+\n+         begin\n+            Set_Field1 (New_N, Copy_Generic_Descendant (Field1 (N)));\n+            Set_Field2 (New_N, Copy_Generic_Descendant (Field2 (N)));\n+            Set_Field3 (New_N, Copy_Generic_Descendant (Field3 (N)));\n+            Set_Field5 (New_N, Copy_Generic_Descendant (Field5 (N)));\n+         end;\n \n       --  Allocators do not have an identifier denoting the access type,\n       --  so we must locate it through the expression to check whether\n@@ -4640,8 +4653,8 @@ package body Sem_Ch12 is\n         and then Instantiating\n       then\n          declare\n-            T : Node_Id := Associated_Node (Subtype_Mark (Expression (N)));\n-            Acc_T : Entity_Id;\n+            T : Node_Id := Get_Associated_Node (Subtype_Mark (Expression (N)));\n+            Acc_T       : Entity_Id;\n \n          begin\n             if Present (T) then\n@@ -8178,6 +8191,12 @@ package body Sem_Ch12 is\n       --  context of the parent, we must preserve the identifier of the parent\n       --  so that it can be properly resolved in a subsequent instantiation.\n \n+      procedure Save_Global_Operand_Descendants (N : Node_Id);\n+      --  Apply Save_Global_Descendant to the possible operand fields\n+      --  of the node N (Field2 = Left_Opnd, Field3 = Right_Opnd).\n+      --\n+      --  It is uncomfortable for Sem_Ch12 to have this knowledge ???\n+\n       procedure Save_Global_Descendant (D : Union_Id);\n       --  Apply Save_Global_References recursively to the descendents of\n       --  current node.\n@@ -8247,6 +8266,10 @@ package body Sem_Ch12 is\n          --  The type of N2 is global to the generic unit. Save the\n          --  type in the generic node.\n \n+         ---------------------\n+         -- Set_Global_Type --\n+         ---------------------\n+\n          procedure Set_Global_Type (N : Node_Id; N2 : Node_Id) is\n             Typ : constant Entity_Id := Etype (N2);\n \n@@ -8294,7 +8317,7 @@ package body Sem_Ch12 is\n       --  Start of processing for Reset_Entity\n \n       begin\n-         N2 := Associated_Node (N);\n+         N2 := Get_Associated_Node (N);\n          E := Entity (N2);\n \n          if Present (E) then\n@@ -8334,9 +8357,7 @@ package body Sem_Ch12 is\n                Change_Selected_Component_To_Expanded_Name (Parent (N));\n                Set_Associated_Node (Parent (N), Parent (N2));\n                Set_Global_Type (Parent (N), Parent (N2));\n-\n-               Save_Global_Descendant (Field2 (N));\n-               Save_Global_Descendant (Field3 (N));\n+               Save_Global_Operand_Descendants (N);\n \n                --  If this is a reference to the current generic entity,\n                --  replace it with a simple name. This is to avoid anomalies\n@@ -8375,7 +8396,7 @@ package body Sem_Ch12 is\n               New_Copy (Parent (N2)));\n             Set_Analyzed (Parent (N), False);\n \n-         --  a selected component may be transformed into a parameterless\n+         --  A selected component may be transformed into a parameterless\n          --  function call. If the called entity is global, rewrite the\n          --  node appropriately, i.e. as an extended name for the global\n          --  entity.\n@@ -8387,9 +8408,7 @@ package body Sem_Ch12 is\n             Change_Selected_Component_To_Expanded_Name (Parent (N));\n             Set_Associated_Node (Parent (N), Name (Parent (N2)));\n             Set_Global_Type (Parent (N), Name (Parent (N2)));\n-\n-            Save_Global_Descendant (Field2 (N));\n-            Save_Global_Descendant (Field3 (N));\n+            Save_Global_Operand_Descendants (N);\n \n          else\n             --  Entity is local. Reset in generic unit, so that node\n@@ -8568,6 +8587,21 @@ package body Sem_Ch12 is\n          end if;\n       end Save_Global_Descendant;\n \n+      -------------------------------------\n+      -- Save_Global_Operand_Descendants --\n+      -------------------------------------\n+\n+      procedure Save_Global_Operand_Descendants (N : Node_Id) is\n+\n+         use Atree.Unchecked_Access;\n+         --  This code section is part of the implementation of an untyped\n+         --  tree traversal, so it needs direct access to node fields.\n+\n+      begin\n+         Save_Global_Descendant (Field2 (N));\n+         Save_Global_Descendant (Field3 (N));\n+      end Save_Global_Operand_Descendants;\n+\n       ---------------------\n       -- Save_References --\n       ---------------------\n@@ -8588,32 +8622,32 @@ package body Sem_Ch12 is\n          elsif (Nkind (N) = N_Character_Literal\n                  or else Nkind (N) = N_Operator_Symbol)\n          then\n-            if Nkind (N) = Nkind (Associated_Node (N)) then\n+            if Nkind (N) = Nkind (Get_Associated_Node (N)) then\n                Reset_Entity (N);\n \n             elsif Nkind (N) = N_Operator_Symbol\n-              and then Nkind (Associated_Node (N)) = N_String_Literal\n+              and then Nkind (Get_Associated_Node (N)) = N_String_Literal\n             then\n                Change_Operator_Symbol_To_String_Literal (N);\n             end if;\n \n          elsif Nkind (N) in N_Op then\n \n-            if Nkind (N) = Nkind (Associated_Node (N)) then\n+            if Nkind (N) = Nkind (Get_Associated_Node (N)) then\n \n                if Nkind (N) = N_Op_Concat then\n                   Set_Is_Component_Left_Opnd (N,\n-                    Is_Component_Left_Opnd (Associated_Node (N)));\n+                    Is_Component_Left_Opnd (Get_Associated_Node (N)));\n \n                   Set_Is_Component_Right_Opnd (N,\n-                    Is_Component_Right_Opnd (Associated_Node (N)));\n+                    Is_Component_Right_Opnd (Get_Associated_Node (N)));\n                end if;\n \n                Reset_Entity (N);\n             else\n                --  Node may be transformed into call to a user-defined operator\n \n-               N2 := Associated_Node (N);\n+               N2 := Get_Associated_Node (N);\n \n                if Nkind (N2) = N_Function_Call then\n                   E := Entity (Name (N2));\n@@ -8656,24 +8690,23 @@ package body Sem_Ch12 is\n                end if;\n             end if;\n \n-            --  Complete the check on operands.\n+            --  Complete the check on operands\n \n-            Save_Global_Descendant (Field2 (N));\n-            Save_Global_Descendant (Field3 (N));\n+            Save_Global_Operand_Descendants (N);\n \n          elsif Nkind (N) = N_Identifier then\n-            if Nkind (N) = Nkind (Associated_Node (N)) then\n+            if Nkind (N) = Nkind (Get_Associated_Node (N)) then\n \n                --  If this is a discriminant reference, always save it.\n                --  It is used in the instance to find the corresponding\n                --  discriminant positionally rather than  by name.\n \n                Set_Original_Discriminant\n-                 (N, Original_Discriminant (Associated_Node (N)));\n+                 (N, Original_Discriminant (Get_Associated_Node (N)));\n                Reset_Entity (N);\n \n             else\n-               N2 := Associated_Node (N);\n+               N2 := Get_Associated_Node (N);\n \n                if Nkind (N2) = N_Function_Call then\n                   E := Entity (Name (N2));\n@@ -8757,29 +8790,41 @@ package body Sem_Ch12 is\n          elsif Nkind (N) in N_Entity then\n             null;\n \n-         elsif Nkind (N) = N_Aggregate\n-                 or else Nkind (N) = N_Extension_Aggregate\n-         then\n-            N2 := Associated_Node (N);\n-            if No (N2)\n-              or else No (Etype (N2))\n-              or else not Is_Global (Etype (N2))\n-            then\n-               Set_Associated_Node (N, Empty);\n-            end if;\n+         else\n+            declare\n+               use Atree.Unchecked_Access;\n+               --  This code section is part of implementing an untyped tree\n+               --  traversal, so it needs direct access to node fields.\n \n-            Save_Global_Descendant (Field1 (N));\n-            Save_Global_Descendant (Field2 (N));\n-            Save_Global_Descendant (Field3 (N));\n-            Save_Global_Descendant (Field5 (N));\n+            begin\n+               if Nkind (N) = N_Aggregate\n+                    or else\n+                  Nkind (N) = N_Extension_Aggregate\n+               then\n+                  N2 := Get_Associated_Node (N);\n \n-         else\n-            Save_Global_Descendant (Field1 (N));\n-            Save_Global_Descendant (Field2 (N));\n-            Save_Global_Descendant (Field3 (N));\n-            Save_Global_Descendant (Field4 (N));\n-            Save_Global_Descendant (Field5 (N));\n+                  if No (N2)\n+                    or else No (Etype (N2))\n+                    or else not Is_Global (Etype (N2))\n+                  then\n+                     Set_Associated_Node (N, Empty);\n+                  end if;\n+\n+                  Save_Global_Descendant (Field1 (N));\n+                  Save_Global_Descendant (Field2 (N));\n+                  Save_Global_Descendant (Field3 (N));\n+                  Save_Global_Descendant (Field5 (N));\n+\n+               --  All other cases than aggregates\n \n+               else\n+                  Save_Global_Descendant (Field1 (N));\n+                  Save_Global_Descendant (Field2 (N));\n+                  Save_Global_Descendant (Field3 (N));\n+                  Save_Global_Descendant (Field4 (N));\n+                  Save_Global_Descendant (Field5 (N));\n+               end if;\n+            end;\n          end if;\n       end Save_References;\n \n@@ -8801,20 +8846,6 @@ package body Sem_Ch12 is\n       Save_References (N);\n    end Save_Global_References;\n \n-   -------------------------\n-   -- Set_Associated_Node --\n-   -------------------------\n-\n-   --  Note from RBKD: the uncommented use of Set_Node4 below is ugly ???\n-\n-   procedure Set_Associated_Node\n-     (Gen_Node  : Node_Id;\n-      Copy_Node : Node_Id)\n-   is\n-   begin\n-      Set_Node4 (Gen_Node, Copy_Node);\n-   end Set_Associated_Node;\n-\n    ---------------------\n    -- Set_Copied_Sloc --\n    ---------------------"}, {"sha": "b91d522c6e47679aed01f178b099042fdb6be333", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e542a58b2d9545c4edc0bbd18bb7c907219baa4/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e542a58b2d9545c4edc0bbd18bb7c907219baa4/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=3e542a58b2d9545c4edc0bbd18bb7c907219baa4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                            $Revision: 1.1 $\n+--                            $Revision: 1.2 $\n --                                                                          --\n --          Copyright (C) 1992-2001, Free Software Foundation, Inc.         --\n --                                                                          --\n@@ -404,13 +404,15 @@ package Sinfo is\n    --       Left_Opnd                (Node2)      left operand expression\n    --       Right_Opnd               (Node3)      right operand expression\n    --       Entity                   (Node4-Sem)  defining entity for operator\n+   --       Associated_Node          (Node4-Sem)  for generic processing\n    --       Do_Overflow_Check        (Flag17-Sem) set if overflow check needed\n    --       Has_Private_View         (Flag11-Sem) set in generic units.\n \n    --    \"plus fields for unary operator\"\n    --       Chars                    (Name1)      Name_Id for the operator\n    --       Right_Opnd               (Node3)      right operand expression\n    --       Entity                   (Node4-Sem)  defining entity for operator\n+   --       Associated_Node          (Node4-Sem)  for generic processing\n    --       Do_Overflow_Check        (Flag17-Sem) set if overflow check needed\n    --       Has_Private_View         (Flag11-Sem) set in generic units.\n \n@@ -566,6 +568,16 @@ package Sinfo is\n    --    expression is valid, even where it would normally not be allowed\n    --    (e.g. where the type involved is limited).\n \n+   --  Associated_Node (Node4-Sem)\n+   --    Present in nodes that can denote an entity: identifiers, character\n+   --    literals and expanded names, operator nodes that carry an entity\n+   --    reference,  and also in N_Aggregate, N_Selected_Component, and\n+   --    N_Extension_Aggregate nodes.  This field is used during generic\n+   --    processing to relate nodes in the original template to nodes in the\n+   --    generic copy. It overlaps the Entity field, and is used to capture\n+   --    global references in the analyzed copy and place them in the template.\n+   --    see description in Sem_Ch12 for further details on this usage.\n+\n    --  At_End_Proc (Node1)\n    --    This field is present in an N_Handled_Sequence_Of_Statements node.\n    --    It contains an identifier reference for the cleanup procedure to\n@@ -849,10 +861,11 @@ package Sinfo is\n    --    defining occurrence is in a separately compiled file, and this\n    --    pointer must be set using the library Load procedure. Note that\n    --    during name resolution, the value in Entity may be temporarily\n-   --    incorrect (e.g. during overload resolution, Entity is\n-   --    initially set to the first possible correct interpretation, and\n-   --    then later modified if necessary to contain the correct value\n-   --    after resolution).\n+   --    incorrect (e.g. during overload resolution, Entity is initially\n+   --    set to the first possible correct interpretation, and then later\n+   --    modified if necessary to contain the correct value after resolution).\n+   --    Note that Associated_Node overlays this field during the processing\n+   --    of generics. See Sem_Ch12 for further details.\n \n    --  Etype (Node5-Sem)\n    --    Appears in all expression nodes, all direct names, and all\n@@ -1538,6 +1551,7 @@ package Sinfo is\n       --  Sloc points to identifier\n       --  Chars (Name1) contains the Name_Id for the identifier\n       --  Entity (Node4-Sem)\n+      --  Associated_Node (Node4-Sem)\n       --  Original_Discriminant (Node2-Sem)\n       --  Redundant_Use (Flag13-Sem)\n       --  Has_Private_View (Flag11-Sem) (set in generic units)\n@@ -1610,6 +1624,7 @@ package Sinfo is\n       --  Chars (Name1) contains the Name_Id for the identifier\n       --  Char_Literal_Value (Char_Code2) contains the literal value\n       --  Entity (Node4-Sem)\n+      --  Associated_Node (Node4-Sem)\n       --  Has_Private_View (Flag11-Sem) set in generic units.\n       --  plus fields for expression\n \n@@ -2721,6 +2736,7 @@ package Sinfo is\n       --  Sloc points to period\n       --  Prefix (Node3)\n       --  Selector_Name (Node2)\n+      --  Associated_Node (Node4-Sem)\n       --  Do_Access_Check (Flag11-Sem)\n       --  Do_Discriminant_Check (Flag13-Sem)\n       --  plus fields for expression\n@@ -2791,6 +2807,7 @@ package Sinfo is\n       --  Attribute_Name (Name2) identifier name from attribute designator\n       --  Expressions (List1) (set to No_List if no associated expressions)\n       --  Entity (Node4-Sem) used if the attribute yields a type\n+      --  Associated_Node (Node4-Sem)\n       --  Do_Access_Check (Flag11-Sem)\n       --  Do_Overflow_Check (Flag17-Sem)\n       --  Redundant_Use (Flag13-Sem)\n@@ -2850,6 +2867,7 @@ package Sinfo is\n       --  Component_Associations (List2) (set to No_List if none)\n       --  Null_Record_Present (Flag17)\n       --  Aggregate_Bounds (Node3-Sem)\n+      --  Associated_Node (Node4-Sem)\n       --  Static_Processing_OK (Flag4-Sem)\n       --  Compile_Time_Known_Aggregate (Flag18-Sem)\n       --  Expansion_Delayed (Flag11-Sem)\n@@ -2932,6 +2950,7 @@ package Sinfo is\n       --  N_Extension_Aggregate\n       --  Sloc points to left parenthesis\n       --  Ancestor_Part (Node3)\n+      --  Associated_Node (Node4-Sem)\n       --  Expressions (List1) (set to No_List if none or null record case)\n       --  Component_Associations (List2) (set to No_List if none)\n       --  Null_Record_Present (Flag17)\n@@ -3779,6 +3798,7 @@ package Sinfo is\n       --  Strval (Str3) Id of string value. This is used if the operator\n       --   symbol turns out to be a normal string after all.\n       --  Entity (Node4-Sem)\n+      --  Associated_Node (Node4-Sem)\n       --  Has_Private_View (Flag11-Sem) set in generic units.\n       --  Etype (Node5-Sem)\n \n@@ -5887,6 +5907,7 @@ package Sinfo is\n       --  Prefix (Node3)\n       --  Selector_Name (Node2)\n       --  Entity (Node4-Sem)\n+      --  Associated_Node (Node4-Sem)\n       --  Redundant_Use (Flag13-Sem)\n       --  Has_Private_View (Flag11-Sem) set in generic units.\n       --  plus fields for expression\n@@ -5942,6 +5963,7 @@ package Sinfo is\n       --  N_Freeze_Entity\n       --  Sloc points near freeze point (see above special note)\n       --  Entity (Node4-Sem)\n+      --  Associated_Node (Node4-Sem)\n       --  Access_Types_To_Process (Elist2-Sem) (set to No_Elist if none)\n       --  TSS_Elist (Elist3-Sem) (set to No_Elist if no associated TSS's)\n       --  Actions (List1) (set to No_List if no freeze actions)\n@@ -6739,6 +6761,9 @@ package Sinfo is\n    function Assignment_OK\n      (N : Node_Id) return Boolean;    -- Flag15\n \n+   function Associated_Node\n+     (N : Node_Id) return Node_Id;    -- Node4\n+\n    function At_End_Proc\n      (N : Node_Id) return Node_Id;    -- Node1\n \n@@ -7486,6 +7511,9 @@ package Sinfo is\n    procedure Set_Assignment_OK\n      (N : Node_Id; Val : Boolean := True);    -- Flag15\n \n+   procedure Set_Associated_Node\n+     (N : Node_Id; Val : Node_Id);            -- Node4\n+\n    procedure Set_Attribute_Name\n      (N : Node_Id; Val : Name_Id);            -- Name2\n \n@@ -8215,6 +8243,7 @@ package Sinfo is\n    pragma Inline (Ancestor_Part);\n    pragma Inline (Array_Aggregate);\n    pragma Inline (Assignment_OK);\n+   pragma Inline (Associated_Node);\n    pragma Inline (At_End_Proc);\n    pragma Inline (Attribute_Name);\n    pragma Inline (Aux_Decls_Node);\n@@ -8461,6 +8490,7 @@ package Sinfo is\n    pragma Inline (Set_Ancestor_Part);\n    pragma Inline (Set_Array_Aggregate);\n    pragma Inline (Set_Assignment_OK);\n+   pragma Inline (Set_Associated_Node);\n    pragma Inline (Set_At_End_Proc);\n    pragma Inline (Set_Attribute_Name);\n    pragma Inline (Set_Aux_Decls_Node);"}]}