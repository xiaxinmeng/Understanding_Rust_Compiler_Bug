{"sha": "6bca2ebf10654b8beb5c5737c8652e8262901294", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJjYTJlYmYxMDY1NGI4YmViNWM1NzM3Yzg2NTJlODI2MjkwMTI5NA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-07T16:18:58Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-07T16:18:58Z"}, "message": "i386: Optimize blsi followed by comparison [PR98567]\n\nThe BLSI instruction sets SF and ZF based on the result and clears OF.\nCF is set to something unrelated.\n\nThe following patch optimizes BLSI followed by comparison, so we don't need\nto emit a TEST insn in between.\n\n2021-01-07  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/98567\n\t* config/i386/i386.md (*bmi_blsi_<mode>_cmp, *bmi_blsi_<mode>_ccno):\n\tNew define_insn patterns.\n\n\t* gcc.target/i386/pr98567-1.c: New test.\n\t* gcc.target/i386/pr98567-2.c: New test.", "tree": {"sha": "a85478c609d106005d7b0910b3d5fd49213a1331", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a85478c609d106005d7b0910b3d5fd49213a1331"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bca2ebf10654b8beb5c5737c8652e8262901294", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bca2ebf10654b8beb5c5737c8652e8262901294", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bca2ebf10654b8beb5c5737c8652e8262901294", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bca2ebf10654b8beb5c5737c8652e8262901294/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f9d2c1a318ed30a66b75bd6b7fa3dc3630e362e"}], "stats": {"total": 91, "additions": 91, "deletions": 0}, "files": [{"sha": "c1023123d5c008f46acb93f76c6c38517174dcae", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bca2ebf10654b8beb5c5737c8652e8262901294/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bca2ebf10654b8beb5c5737c8652e8262901294/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=6bca2ebf10654b8beb5c5737c8652e8262901294", "patch": "@@ -14563,6 +14563,35 @@\n    (set_attr \"btver2_decode\" \"double\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"*bmi_blsi_<mode>_cmp\"\n+  [(set (reg FLAGS_REG)\n+\t(compare\n+\t  (and:SWI48\n+\t    (neg:SWI48 (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\"))\n+\t    (match_dup 1))\n+\t  (const_int 0)))\n+   (set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(and:SWI48 (neg:SWI48 (match_dup 1)) (match_dup 1)))]\n+   \"TARGET_BMI && ix86_match_ccmode (insn, CCNOmode)\"\n+   \"blsi\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"btver2_decode\" \"double\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*bmi_blsi_<mode>_ccno\"\n+  [(set (reg FLAGS_REG)\n+\t(compare\n+\t  (and:SWI48\n+\t    (neg:SWI48 (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\"))\n+\t    (match_dup 1))\n+\t  (const_int 0)))\n+   (clobber (match_scratch:SWI48 0 \"=r\"))]\n+   \"TARGET_BMI && ix86_match_ccmode (insn, CCNOmode)\"\n+   \"blsi\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"btver2_decode\" \"double\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"*bmi_blsmsk_<mode>\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n         (xor:SWI48"}, {"sha": "ef53ec72a91e9d83e07609cb9ed05716a68cad70", "filename": "gcc/testsuite/gcc.target/i386/pr98567-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bca2ebf10654b8beb5c5737c8652e8262901294/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98567-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bca2ebf10654b8beb5c5737c8652e8262901294/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98567-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98567-1.c?ref=6bca2ebf10654b8beb5c5737c8652e8262901294", "patch": "@@ -0,0 +1,31 @@\n+/* PR target/98567 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mbmi -fno-stack-protector\" } */\n+/* { dg-final { scan-assembler-times \"\\tblsi\" 4 } } */\n+/* { dg-final { scan-assembler-times \"\\tsetne\\t\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\tsete\\t\" 2 } } */\n+/* { dg-final { scan-assembler-not \"\\ttest\\[ld]\" } } */\n+\n+int\n+foo (unsigned long x)\n+{\n+  return (-x & x) == 0;\n+}\n+\n+int\n+bar (unsigned int x)\n+{\n+  return (-x & x) == 0;\n+}\n+\n+int\n+baz (unsigned long x)\n+{\n+  return (x & -x) != 0;\n+}\n+\n+int\n+qux (unsigned int x)\n+{\n+  return 0 != (x & -x);\n+}"}, {"sha": "dccb24f712761a04e951bce6a49f45388b588cc6", "filename": "gcc/testsuite/gcc.target/i386/pr98567-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bca2ebf10654b8beb5c5737c8652e8262901294/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98567-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bca2ebf10654b8beb5c5737c8652e8262901294/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98567-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98567-2.c?ref=6bca2ebf10654b8beb5c5737c8652e8262901294", "patch": "@@ -0,0 +1,31 @@\n+/* PR target/98567 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mbmi -fno-stack-protector\" } */\n+/* { dg-final { scan-assembler-times \"\\tblsi\" 4 } } */\n+/* { dg-final { scan-assembler-times \"\\tsetle\\t\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\tsetg\\t\" 2 } } */\n+/* { dg-final { scan-assembler-not \"\\ttest\\[ld]\" } } */\n+\n+int\n+foo (unsigned long x)\n+{\n+  return 0 >= (int) (-x & x);\n+}\n+\n+int\n+bar (unsigned int x)\n+{\n+  return (int) (-x & x) <= 0;\n+}\n+\n+int\n+baz (unsigned long x)\n+{\n+  return (int) (x & -x) > 0;\n+}\n+\n+int\n+qux (unsigned int x)\n+{\n+  return 0 < (int) (x & -x);\n+}"}]}