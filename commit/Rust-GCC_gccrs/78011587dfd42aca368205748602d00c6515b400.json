{"sha": "78011587dfd42aca368205748602d00c6515b400", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgwMTE1ODdkZmQ0MmFjYTM2ODIwNTc0ODYwMmQwMGM2NTE1YjQwMA==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2004-04-30T12:13:49Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-04-30T12:13:49Z"}, "message": "configure.gcc: Default ep9312 to hard-float.\n\n\t* configure.gcc: Default ep9312 to hard-float.\n\t* config/arm/arm-cores.def: Add ARCH field.\n\t* config/arm/arm.c (FL_FOR_ARCH*): Define.\n\t(arm_arch_cirrus): New variable.\n\t(all_cores): Set and use arch.\n\t(all_architectures): Ditto.\n\t(arm_arch_name): New variable.\n\t(arm_override_options): Set it. Use [SUB]TARGET_CPU_DEFAULT.\n\tSet and use arm_arch_cirrus.\n\t* config/arm/arm.h (TARGET_CPU_CPP_BUILTINS): Set arch defines.\n\t(enum processor_type): Update ARM_CORE define.\n\t(enum target_cpus): Add.  Replaces TARGET_CPU_* defines.\n\t(CPP_SPEC): Remove %(cpp_cpu_arch).\n\t(CPP_ARCH_DEFAULT_SPEC): Remove.\n\t(CPP_CPU_ARCH_SPEC): Remove.\n\t(EXTRA_SPECS): Don't use CPP_*ARCH*_SPEC.\n\t(FPUTYPE_DEFAULT): Don't define here.\n\nFrom-SVN: r81336", "tree": {"sha": "130af8ff2570c06e9e5227b33a86960a5b29892d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/130af8ff2570c06e9e5227b33a86960a5b29892d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78011587dfd42aca368205748602d00c6515b400", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78011587dfd42aca368205748602d00c6515b400", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78011587dfd42aca368205748602d00c6515b400", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78011587dfd42aca368205748602d00c6515b400/comments", "author": null, "committer": null, "parents": [{"sha": "5ecfc99a62d3a8069689275708703baf0cc5a192", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ecfc99a62d3a8069689275708703baf0cc5a192", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ecfc99a62d3a8069689275708703baf0cc5a192"}], "stats": {"total": 491, "additions": 172, "deletions": 319}, "files": [{"sha": "e33a060c19c72bc8e26db473eed1674a182683b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78011587dfd42aca368205748602d00c6515b400/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78011587dfd42aca368205748602d00c6515b400/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78011587dfd42aca368205748602d00c6515b400", "patch": "@@ -1,3 +1,23 @@\n+2004-04-30  Paul Brook  <paul@codesourcery.com>\n+\n+\t* configure.gcc: Default ep9312 to hard-float.\n+\t* config/arm/arm-cores.def: Add ARCH field.\n+\t* config/arm/arm.c (FL_FOR_ARCH*): Define.\n+\t(arm_arch_cirrus): New variable.\n+\t(all_cores): Set and use arch.\n+\t(all_architectures): Ditto.\n+\t(arm_arch_name): New variable.\n+\t(arm_override_options): Set it. Use [SUB]TARGET_CPU_DEFAULT.\n+\tSet and use arm_arch_cirrus.\n+\t* config/arm/arm.h (TARGET_CPU_CPP_BUILTINS): Set arch defines.\n+\t(enum processor_type): Update ARM_CORE define.\n+\t(enum target_cpus): Add.  Replaces TARGET_CPU_* defines.\n+\t(CPP_SPEC): Remove %(cpp_cpu_arch).\n+\t(CPP_ARCH_DEFAULT_SPEC): Remove.\n+\t(CPP_CPU_ARCH_SPEC): Remove.\n+\t(EXTRA_SPECS): Don't use CPP_*ARCH*_SPEC.\n+\t(FPUTYPE_DEFAULT): Don't define here.\n+\n 2004-04-30  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* expr.c (store_constructor): SIZE operand is now in bits; CLEARED"}, {"sha": "a33511edb5a35c13fbe43100f9e17a02fb03458e", "filename": "gcc/config.gcc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78011587dfd42aca368205748602d00c6515b400/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78011587dfd42aca368205748602d00c6515b400/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=78011587dfd42aca368205748602d00c6515b400", "patch": "@@ -2173,6 +2173,15 @@ if test x$with_cpu = x ; then\n   esac\n fi\n \n+# Similarly for --with-float\n+if test x$with_fpu = x; then\n+\tcase ${target} in\n+\tep9312-*-*)\n+\t\twith_float=hard\n+\t\t;;\n+\tesac\n+fi\n+\n \t# Similarly for --with-schedule.\n \tif test x$with_schedule = x; then\n \t\tcase ${target} in"}, {"sha": "eeb50aa31e96560fbb7abe873dd3cfda16c12d4f", "filename": "gcc/config/arm/arm-cores.def", "status": "modified", "additions": 55, "deletions": 52, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78011587dfd42aca368205748602d00c6515b400/gcc%2Fconfig%2Farm%2Farm-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78011587dfd42aca368205748602d00c6515b400/gcc%2Fconfig%2Farm%2Farm-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cores.def?ref=78011587dfd42aca368205748602d00c6515b400", "patch": "@@ -20,68 +20,71 @@\n    02111-1307, USA.  */\n \n /* Before using #include to read this file, define a macro:\n-\t\n-      ARM_CORE(CORE_NAME, FLAGS)\n+\n+      ARM_CORE(CORE_NAME, ARCH, FLAGS, COSTS)\n \n    The CORE_NAME is the name of the core, represented as an identifier\n-   rather than a string constant.  The FLAGS are the bitwise-or of the\n-   traits that apply to that core.\n+   rather than a string constant.\n+   ARCH is the architecture revision implemeted by the chip.\n+   FLAGS are the bitwise-or of the traits that apply to that core.\n+   This need not include flags implied by the architecture.\n+   COSTS is the name of the rtx_costs routine to use.\n \n    If you update this table, you must update the \"tune\" attribute in\n    arm.md.  */\n \n-ARM_CORE(arm2,\t\tFL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(arm250,\tFL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(arm3,\t\tFL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(arm6,\t\tFL_CO_PROC | FL_MODE26 | FL_MODE32, slowmul)\n-ARM_CORE(arm60,\t\tFL_CO_PROC | FL_MODE26 | FL_MODE32, slowmul)\n-ARM_CORE(arm600,\tFL_CO_PROC | FL_MODE26 | FL_MODE32, slowmul)\n-ARM_CORE(arm610,\t             FL_MODE26 | FL_MODE32, slowmul)\n-ARM_CORE(arm620,\tFL_CO_PROC | FL_MODE26 | FL_MODE32, slowmul)\n-ARM_CORE(arm7,\t\tFL_CO_PROC | FL_MODE26 | FL_MODE32, slowmul)\n+ARM_CORE(arm2,\t\t2,\tFL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(arm250,\t2,\tFL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(arm3,\t\t2,\tFL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(arm6,\t\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(arm60,\t\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(arm600,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(arm610,\t3,\t             FL_MODE26, slowmul)\n+ARM_CORE(arm620,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(arm7,\t\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n /* arm7m doesn't exist on its own, but only with D, (and I), but\n    those don't alter the code, so arm7m is sometimes used.  */\n-ARM_CORE(arm7m,\t\tFL_CO_PROC | FL_MODE26 | FL_MODE32 | FL_ARCH3M, fastmul)\n-ARM_CORE(arm7d,\t\tFL_CO_PROC | FL_MODE26 | FL_MODE32, slowmul)\n-ARM_CORE(arm7dm,\tFL_CO_PROC | FL_MODE26 | FL_MODE32 | FL_ARCH3M, fastmul)\n-ARM_CORE(arm7di,\tFL_CO_PROC | FL_MODE26 | FL_MODE32, slowmul)\n-ARM_CORE(arm7dmi,\tFL_CO_PROC | FL_MODE26 | FL_MODE32 | FL_ARCH3M, fastmul)\n-ARM_CORE(arm70,\t\tFL_CO_PROC | FL_MODE26 | FL_MODE32, slowmul)\n-ARM_CORE(arm700,\tFL_CO_PROC | FL_MODE26 | FL_MODE32, slowmul)\n-ARM_CORE(arm700i,\tFL_CO_PROC | FL_MODE26 | FL_MODE32, slowmul)\n-ARM_CORE(arm710,\t             FL_MODE26 | FL_MODE32, slowmul)\n-ARM_CORE(arm720,\t             FL_MODE26 | FL_MODE32, slowmul)\n-ARM_CORE(arm710c,\t             FL_MODE26 | FL_MODE32, slowmul)\n-ARM_CORE(arm7100,\t             FL_MODE26 | FL_MODE32, slowmul)\n-ARM_CORE(arm7500,\t             FL_MODE26 | FL_MODE32, slowmul)\n+ARM_CORE(arm7m,\t\t3M,\tFL_CO_PROC | FL_MODE26, fastmul)\n+ARM_CORE(arm7d,\t\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(arm7dm,\t3M,\tFL_CO_PROC | FL_MODE26, fastmul)\n+ARM_CORE(arm7di,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(arm7dmi,\t3M,\tFL_CO_PROC | FL_MODE26, fastmul)\n+ARM_CORE(arm70,\t\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(arm700,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(arm700i,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(arm710,\t3,\t             FL_MODE26, slowmul)\n+ARM_CORE(arm720,\t3,\t             FL_MODE26, slowmul)\n+ARM_CORE(arm710c,\t3,\t             FL_MODE26, slowmul)\n+ARM_CORE(arm7100,\t3,\t             FL_MODE26, slowmul)\n+ARM_CORE(arm7500,\t3,\t             FL_MODE26, slowmul)\n /* Doesn't have an external co-proc, but does have embedded fpa.  */\n-ARM_CORE(arm7500fe,\tFL_CO_PROC | FL_MODE26 | FL_MODE32, slowmul)\n+ARM_CORE(arm7500fe,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n /* V4 Architecture Processors */\n-ARM_CORE(arm7tdmi,\tFL_CO_PROC |             FL_MODE32 | FL_ARCH3M | FL_ARCH4 | FL_THUMB, fastmul)\n-ARM_CORE(arm710t,\t                         FL_MODE32 | FL_ARCH3M | FL_ARCH4 | FL_THUMB, fastmul)\n-ARM_CORE(arm720t,\t                         FL_MODE32 | FL_ARCH3M | FL_ARCH4 | FL_THUMB, fastmul)\n-ARM_CORE(arm740t,\t                         FL_MODE32 | FL_ARCH3M | FL_ARCH4 | FL_THUMB, fastmul)\n-ARM_CORE(arm8,\t                     FL_MODE26 | FL_MODE32 | FL_ARCH3M | FL_ARCH4 |            FL_LDSCHED, fastmul)\n-ARM_CORE(arm810,\t             FL_MODE26 | FL_MODE32 | FL_ARCH3M | FL_ARCH4 |            FL_LDSCHED, fastmul)\n-ARM_CORE(arm9,\t                                 FL_MODE32 | FL_ARCH3M | FL_ARCH4 | FL_THUMB | FL_LDSCHED, fastmul)\n-ARM_CORE(arm920,\t                         FL_MODE32 | FL_ARCH3M | FL_ARCH4 |            FL_LDSCHED, fastmul)\n-ARM_CORE(arm920t,\t                         FL_MODE32 | FL_ARCH3M | FL_ARCH4 | FL_THUMB | FL_LDSCHED, fastmul)\n-ARM_CORE(arm940t,\t                         FL_MODE32 | FL_ARCH3M | FL_ARCH4 | FL_THUMB | FL_LDSCHED, fastmul)\n-ARM_CORE(arm9tdmi,\t                         FL_MODE32 | FL_ARCH3M | FL_ARCH4 | FL_THUMB | FL_LDSCHED, fastmul)\n-ARM_CORE(arm9e,\t       \t      \t\t         FL_MODE32 | FL_ARCH3M | FL_ARCH4 |            FL_LDSCHED, 9e)\n+ARM_CORE(arm7tdmi,\t4T,\tFL_CO_PROC            , fastmul)\n+ARM_CORE(arm710t,\t4T,\t                      0 , fastmul)\n+ARM_CORE(arm720t,\t4T,\t                      0 , fastmul)\n+ARM_CORE(arm740t,\t4T,\t                      0 , fastmul)\n+ARM_CORE(arm8,\t\t4,\t             FL_MODE26 | FL_LDSCHED, fastmul)\n+ARM_CORE(arm810,\t4,\t             FL_MODE26 | FL_LDSCHED, fastmul)\n+ARM_CORE(arm9,\t\t4T,\t                         FL_LDSCHED, fastmul)\n+ARM_CORE(arm920,\t4,\t                         FL_LDSCHED, fastmul)\n+ARM_CORE(arm920t,\t4T,\t                         FL_LDSCHED, fastmul)\n+ARM_CORE(arm940t,\t4T,\t                         FL_LDSCHED, fastmul)\n+ARM_CORE(arm9tdmi,\t4T,\t                         FL_LDSCHED, fastmul)\n+ARM_CORE(arm9e,\t\t4,\t                         FL_LDSCHED, 9e)\n \n-ARM_CORE(ep9312,\t   \t\t\t FL_MODE32 | FL_ARCH3M | FL_ARCH4 |            FL_LDSCHED |             FL_CIRRUS, fastmul)\n-ARM_CORE(strongarm,\t             FL_MODE26 | FL_MODE32 | FL_ARCH3M | FL_ARCH4 |            FL_LDSCHED | FL_STRONG, fastmul)\n-ARM_CORE(strongarm110,               FL_MODE26 | FL_MODE32 | FL_ARCH3M | FL_ARCH4 |            FL_LDSCHED | FL_STRONG, fastmul)\n-ARM_CORE(strongarm1100,              FL_MODE26 | FL_MODE32 | FL_ARCH3M | FL_ARCH4 |            FL_LDSCHED | FL_STRONG, fastmul)\n-ARM_CORE(strongarm1110,              FL_MODE26 | FL_MODE32 | FL_ARCH3M | FL_ARCH4 |            FL_LDSCHED | FL_STRONG, fastmul)\n+ARM_CORE(ep9312,\t4T,\t                         FL_LDSCHED |             FL_CIRRUS, fastmul)\n+ARM_CORE(strongarm,\t4,\t             FL_MODE26 | FL_LDSCHED | FL_STRONG, fastmul)\n+ARM_CORE(strongarm110,\t4,\t             FL_MODE26 | FL_LDSCHED | FL_STRONG, fastmul)\n+ARM_CORE(strongarm1100,\t4,\t             FL_MODE26 | FL_LDSCHED | FL_STRONG, fastmul)\n+ARM_CORE(strongarm1110,\t4,\t             FL_MODE26 | FL_LDSCHED | FL_STRONG, fastmul)\n /* V5 Architecture Processors */\n-ARM_CORE(arm10tdmi,\t                         FL_MODE32 | FL_ARCH3M | FL_ARCH4 | FL_THUMB | FL_LDSCHED             | FL_ARCH5, fastmul)\n-ARM_CORE(arm1020t,\t                         FL_MODE32 | FL_ARCH3M | FL_ARCH4 | FL_THUMB | FL_LDSCHED             | FL_ARCH5, fastmul)\n-ARM_CORE(arm926ejs,                              FL_MODE32 | FL_ARCH3M | FL_ARCH4 | FL_THUMB                          | FL_ARCH5 | FL_ARCH5E, 9e)\n-ARM_CORE(arm1026ejs,                             FL_MODE32 | FL_ARCH3M | FL_ARCH4 | FL_THUMB                          | FL_ARCH5 | FL_ARCH5E, 9e)\n-ARM_CORE(xscale,                                 FL_MODE32 | FL_ARCH3M | FL_ARCH4 | FL_THUMB | FL_LDSCHED | FL_STRONG | FL_ARCH5 | FL_ARCH5E | FL_XSCALE, xscale)\n-ARM_CORE(iwmmxt,                                 FL_MODE32 | FL_ARCH3M | FL_ARCH4 | FL_THUMB | FL_LDSCHED | FL_STRONG | FL_ARCH5 | FL_ARCH5E | FL_XSCALE | FL_IWMMXT, xscale)\n+ARM_CORE(arm10tdmi,\t5T,\t                         FL_LDSCHED, fastmul)\n+ARM_CORE(arm1020t,\t5T,\t                         FL_LDSCHED, fastmul)\n+ARM_CORE(arm926ejs,\t5TEJ,\t                         0, 9e)\n+ARM_CORE(arm1026ejs,\t5TEJ,\t                         0, 9e)\n+ARM_CORE(xscale,\t5TE,\t                         FL_LDSCHED | FL_STRONG | FL_XSCALE, xscale)\n+ARM_CORE(iwmmxt,\t5TE,\t                         FL_LDSCHED | FL_STRONG | FL_XSCALE | FL_IWMMXT, xscale)\n /* V6 Architecture Processors */\n-ARM_CORE(arm1136js,                              FL_MODE32 | FL_ARCH3M | FL_ARCH4 | FL_THUMB                          | FL_ARCH5 | FL_ARCH5E | FL_ARCH6, 9e)\n-ARM_CORE(arm1136jfs,                             FL_MODE32 | FL_ARCH3M | FL_ARCH4 | FL_THUMB                          | FL_ARCH5 | FL_ARCH5E | FL_ARCH6 | FL_VFPV2, 9e)\n+ARM_CORE(arm1136js,\t6J,\t                         0, 9e)\n+ARM_CORE(arm1136jfs,\t6J,\t                         FL_VFPV2, 9e)"}, {"sha": "a8007c91d8fbbd3270ab2e5ea9311924429cd4ad", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 65, "deletions": 64, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78011587dfd42aca368205748602d00c6515b400/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78011587dfd42aca368205748602d00c6515b400/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=78011587dfd42aca368205748602d00c6515b400", "patch": "@@ -331,6 +331,19 @@ int    arm_structure_size_boundary = DEFAULT_STRUCTURE_SIZE_BOUNDARY;\n \n #define FL_IWMMXT     (1 << 29)\t      /* XScale v2 or \"Intel Wireless MMX technology\".  */\n \n+#define FL_FOR_ARCH2\t0\n+#define FL_FOR_ARCH3\tFL_MODE32\n+#define FL_FOR_ARCH3M\t(FL_FOR_ARCH3 | FL_ARCH3M)\n+#define FL_FOR_ARCH4\t(FL_FOR_ARCH3M | FL_ARCH4)\n+#define FL_FOR_ARCH4T\t(FL_FOR_ARCH4 | FL_THUMB)\n+#define FL_FOR_ARCH5\t(FL_FOR_ARCH4 | FL_ARCH5)\n+#define FL_FOR_ARCH5T\t(FL_FOR_ARCH5 | FL_THUMB)\n+#define FL_FOR_ARCH5E\t(FL_FOR_ARCH5 | FL_ARCH5E)\n+#define FL_FOR_ARCH5TE\t(FL_FOR_ARCH5E | FL_THUMB)\n+#define FL_FOR_ARCH5TEJ\tFL_FOR_ARCH5TE\n+#define FL_FOR_ARCH6\t(FL_FOR_ARCH5TE | FL_ARCH6)\n+#define FL_FOR_ARCH6J\tFL_FOR_ARCH6\n+\n /* The bits in this mask specify which\n    instructions we are allowed to generate.  */\n static unsigned long insn_flags = 0;\n@@ -363,6 +376,9 @@ int arm_ld_sched = 0;\n /* Nonzero if this chip is a StrongARM.  */\n int arm_is_strong = 0;\n \n+/* Nonzero if this chip is a Cirrus variant.  */\n+int arm_arch_cirrus = 0;\n+\n /* Nonzero if this chip supports Intel Wireless MMX technology.  */\n int arm_arch_iwmmxt = 0;\n \n@@ -419,6 +435,7 @@ struct processors\n {\n   const char *const name;\n   enum processor_type core;\n+  const char *arch;\n   const unsigned long flags;\n   bool (* rtx_costs) (rtx, int, int, int *);\n };\n@@ -428,11 +445,11 @@ struct processors\n static const struct processors all_cores[] =\n {\n   /* ARM Cores */\n-#define ARM_CORE(NAME, FLAGS, COSTS) \\\n-  {#NAME, arm_none, FLAGS, arm_##COSTS##_rtx_costs},\n+#define ARM_CORE(NAME, ARCH, FLAGS, COSTS) \\\n+  {#NAME, arm_none, #ARCH, FLAGS | FL_FOR_ARCH##ARCH, arm_##COSTS##_rtx_costs},\n #include \"arm-cores.def\"\n #undef ARM_CORE\n-  {NULL, arm_none, 0, NULL}\n+  {NULL, arm_none, NULL, 0, NULL}\n };\n \n static const struct processors all_architectures[] =\n@@ -441,22 +458,23 @@ static const struct processors all_architectures[] =\n   /* We don't specify rtx_costs here as it will be figured out\n      from the core.  */\n   \n-  { \"armv2\",     arm2,       FL_CO_PROC | FL_MODE26 , NULL},\n-  { \"armv2a\",    arm2,       FL_CO_PROC | FL_MODE26 , NULL},\n-  { \"armv3\",     arm6,       FL_CO_PROC | FL_MODE26 | FL_MODE32 , NULL},\n-  { \"armv3m\",    arm7m,      FL_CO_PROC | FL_MODE26 | FL_MODE32 | FL_ARCH3M , NULL},\n-  { \"armv4\",     arm7tdmi,   FL_CO_PROC | FL_MODE26 | FL_MODE32 | FL_ARCH3M | FL_ARCH4 , NULL},\n+  {\"armv2\",   arm2,       \"2\",   FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH2, NULL},\n+  {\"armv2a\",  arm2,       \"2\",   FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH2, NULL},\n+  {\"armv3\",   arm6,       \"3\",   FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3, NULL},\n+  {\"armv3m\",  arm7m,      \"3M\",  FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3M, NULL},\n+  {\"armv4\",   arm7tdmi,   \"4\",   FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH4, NULL},\n   /* Strictly, FL_MODE26 is a permitted option for v4t, but there are no\n      implementations that support it, so we will leave it out for now.  */\n-  { \"armv4t\",    arm7tdmi,   FL_CO_PROC |             FL_MODE32 | FL_ARCH3M | FL_ARCH4 | FL_THUMB , NULL},\n-  { \"armv5\",     arm10tdmi,  FL_CO_PROC |             FL_MODE32 | FL_ARCH3M | FL_ARCH4 | FL_THUMB | FL_ARCH5 , NULL},\n-  { \"armv5t\",    arm10tdmi,  FL_CO_PROC |             FL_MODE32 | FL_ARCH3M | FL_ARCH4 | FL_THUMB | FL_ARCH5 , NULL},\n-  { \"armv5te\",   arm1026ejs, FL_CO_PROC |             FL_MODE32 | FL_ARCH3M | FL_ARCH4 | FL_THUMB | FL_ARCH5 | FL_ARCH5E , NULL},\n-  { \"armv6\",     arm1136js,  FL_CO_PROC |             FL_MODE32 | FL_ARCH3M | FL_ARCH4 | FL_THUMB | FL_ARCH5 | FL_ARCH5E | FL_ARCH6 , NULL},\n-  { \"armv6j\",    arm1136js,  FL_CO_PROC |             FL_MODE32 | FL_ARCH3M | FL_ARCH4 | FL_THUMB | FL_ARCH5 | FL_ARCH5E | FL_ARCH6 , NULL},\n-  { \"ep9312\",\t ep9312, \t\t\t      FL_MODE32 | FL_ARCH3M | FL_ARCH4 | FL_LDSCHED | FL_CIRRUS , NULL},\n-  {\"iwmmxt\",     iwmmxt,                              FL_MODE32 | FL_ARCH3M | FL_ARCH4 | FL_THUMB | FL_LDSCHED | FL_STRONG | FL_ARCH5 | FL_ARCH5E | FL_XSCALE | FL_IWMMXT , NULL},\n-  { NULL, arm_none, 0 , NULL}\n+  {\"armv4t\",  arm7tdmi,   \"4T\",  FL_CO_PROC |             FL_FOR_ARCH4T, NULL},\n+  {\"armv5\",   arm10tdmi,  \"5\",   FL_CO_PROC |             FL_FOR_ARCH5, NULL},\n+  {\"armv5t\",  arm10tdmi,  \"5T\",  FL_CO_PROC |             FL_FOR_ARCH5T, NULL},\n+  {\"armv5e\",  arm1026ejs, \"5E\",  FL_CO_PROC |             FL_FOR_ARCH5E, NULL},\n+  {\"armv5te\", arm1026ejs, \"5TE\", FL_CO_PROC |             FL_FOR_ARCH5TE, NULL},\n+  {\"armv6\",   arm1136js,  \"6\",   FL_CO_PROC |             FL_FOR_ARCH6, NULL},\n+  {\"armv6j\",  arm1136js,  \"6J\",  FL_CO_PROC |             FL_FOR_ARCH6J, NULL},\n+  {\"ep9312\",  ep9312,     \"4T\",  FL_LDSCHED | FL_CIRRUS | FL_FOR_ARCH4, NULL},\n+  {\"iwmmxt\",  iwmmxt,     \"5TE\", FL_LDSCHED | FL_STRONG | FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT , NULL},\n+  {NULL, arm_none, NULL, 0 , NULL}\n };\n \n /* This is a magic structure.  The 'string' field is magically filled in\n@@ -471,6 +489,11 @@ struct arm_cpu_select arm_select[] =\n   { NULL,\t\"-mtune=\",\tall_cores }\n };\n \n+\n+/* The name of the proprocessor macro to define for this architecture.  */\n+\n+char arm_arch_name[] = \"__ARM_ARCH_0UNK__\";\n+\n struct fpu_desc\n {\n   const char * name;\n@@ -573,6 +596,10 @@ arm_override_options (void)\n           for (sel = ptr->processors; sel->name != NULL; sel++)\n             if (streq (ptr->string, sel->name))\n               {\n+\t\t/* Set the architecture define.  */\n+\t\tif (i != 2)\n+\t\t  sprintf (arm_arch_name, \"__ARM_ARCH_%s__\", sel->arch);\n+\n \t\t/* Determine the processor core for which we should\n \t\t   tune code-generation.  */\n \t\tif (/* -mcpu= is a sensible default.  */\n@@ -611,52 +638,21 @@ arm_override_options (void)\n     {\n       const struct processors * sel;\n       unsigned int        sought;\n-      static const struct cpu_default\n-      {\n-\tconst int cpu;\n-\tconst char *const name;\n-      }\n-      cpu_defaults[] =\n-      {\n-\t{ TARGET_CPU_arm2,      \"arm2\" },\n-\t{ TARGET_CPU_arm6,      \"arm6\" },\n-\t{ TARGET_CPU_arm610,    \"arm610\" },\n-\t{ TARGET_CPU_arm710,\t\"arm710\" },\n-\t{ TARGET_CPU_arm7m,     \"arm7m\" },\n-\t{ TARGET_CPU_arm7500fe, \"arm7500fe\" },\n-\t{ TARGET_CPU_arm7tdmi,  \"arm7tdmi\" },\n-\t{ TARGET_CPU_arm8,      \"arm8\" },\n-\t{ TARGET_CPU_arm810,    \"arm810\" },\n-\t{ TARGET_CPU_arm9,      \"arm9\" },\n-\t{ TARGET_CPU_strongarm, \"strongarm\" },\n-\t{ TARGET_CPU_xscale,    \"xscale\" },\n-\t{ TARGET_CPU_ep9312,    \"ep9312\" },\n-\t{ TARGET_CPU_iwmmxt,    \"iwmmxt\" },\n-\t{ TARGET_CPU_arm926ejs, \"arm926ejs\" },\n-\t{ TARGET_CPU_arm1026ejs, \"arm1026ejs\" },\n-\t{ TARGET_CPU_arm1136js, \"arm1136js\" },\n-\t{ TARGET_CPU_arm1136jfs, \"arm1136jfs\" },\n-\t{ TARGET_CPU_generic,   \"arm\" },\n-\t{ 0, 0 }\n-      };\n-      const struct cpu_default * def;\n-\t  \n-      /* Find the default.  */\n-      for (def = cpu_defaults; def->name; def++)\n-\tif (def->cpu == TARGET_CPU_DEFAULT)\n-\t  break;\n+      enum processor_type cpu;\n \n-      /* Make sure we found the default CPU.  */\n-      if (def->name == NULL)\n-\tabort ();\n-      \n-      /* Find the default CPU's flags.  */\n-      for (sel = all_cores; sel->name != NULL; sel++)\n-\tif (streq (def->name, sel->name))\n-\t  break;\n-      \n-      if (sel->name == NULL)\n-\tabort ();\n+      cpu = TARGET_CPU_DEFAULT;\n+      if (cpu == arm_none)\n+\t{\n+#ifdef SUBTARGET_CPU_DEFAULT\n+\t  /* Use the subtarget default CPU if none was specified by\n+\t     configure.  */\n+\t  cpu = SUBTARGET_CPU_DEFAULT;\n+#endif\n+\t  /* Default to ARM6.  */\n+\t  if (cpu == arm_none)\n+\t    cpu = arm6;\n+\t}\n+      sel = &all_cores[cpu];\n \n       insn_flags = sel->flags;\n \n@@ -729,6 +725,7 @@ arm_override_options (void)\n \n \t  insn_flags = sel->flags;\n \t}\n+      sprintf (arm_arch_name, \"__ARM_ARCH_%s__\", sel->arch);\n       if (arm_tune == arm_none)\n \tarm_tune = (enum processor_type) (sel - all_cores);\n     }\n@@ -834,6 +831,7 @@ arm_override_options (void)\n   arm_arch5e = (insn_flags & FL_ARCH5E) != 0;\n   arm_arch6 = (insn_flags & FL_ARCH6) != 0;\n   arm_arch_xscale = (insn_flags & FL_XSCALE) != 0;\n+  arm_arch_cirrus = (insn_flags & FL_CIRRUS) != 0;\n \n   arm_ld_sched = (tune_flags & FL_LDSCHED) != 0;\n   arm_is_strong = (tune_flags & FL_STRONG) != 0;\n@@ -895,14 +893,17 @@ arm_override_options (void)\n   else\n     {\n #ifdef FPUTYPE_DEFAULT\n-      /* Use the default is it is specified for this platform.  */\n+      /* Use the default if it is specified for this platform.  */\n       arm_fpu_arch = FPUTYPE_DEFAULT;\n       arm_fpu_tune = FPUTYPE_DEFAULT;\n #else\n       /* Pick one based on CPU type.  */\n+      /* ??? Some targets assume FPA is the default.\n       if ((insn_flags & FL_VFP) != 0)\n \tarm_fpu_arch = FPUTYPE_VFP;\n-      else if (insn_flags & FL_CIRRUS)\n+      else\n+      */\n+      if (arm_arch_cirrus)\n \tarm_fpu_arch = FPUTYPE_MAVERICK;\n       else\n \tarm_fpu_arch = FPUTYPE_FPA_EMU2;"}, {"sha": "f64d3381b5ea69f35634fd60c4b1a10c4d1e3b4c", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 23, "deletions": 203, "changes": 226, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78011587dfd42aca368205748602d00c6515b400/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78011587dfd42aca368205748602d00c6515b400/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=78011587dfd42aca368205748602d00c6515b400", "patch": "@@ -26,6 +26,9 @@\n #ifndef GCC_ARM_H\n #define GCC_ARM_H\n \n+/* The archetecture define.  */\n+extern char arm_arch_name[];\n+\n /* Target CPU builtins.  */\n #define TARGET_CPU_CPP_BUILTINS()\t\t\t\\\n   do\t\t\t\t\t\t\t\\\n@@ -69,52 +72,36 @@\n \t\t\t\t\t\t\t\\\n \tbuiltin_assert (\"cpu=arm\");\t\t\t\\\n \tbuiltin_assert (\"machine=arm\");\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+\tbuiltin_define (arm_arch_name);\t\t\t\\\n+\tif (arm_arch_cirrus)\t\t\t\t\\\n+\t  builtin_define (\"__MAVERICK__\");\t\t\\\n+\tif (arm_arch_xscale)\t\t\t\t\\\n+\t  builtin_define (\"__XSCALE__\");\t\t\\\n+\tif (arm_arch_iwmmxt)\t\t\t\t\\\n+\t  builtin_define (\"__IWMMXT__\");\t\t\\\n     } while (0)\n \n-#define TARGET_CPU_arm2\t\t0x0000\n-#define TARGET_CPU_arm250\t0x0000\n-#define TARGET_CPU_arm3\t\t0x0000\n-#define TARGET_CPU_arm6\t\t0x0001\n-#define TARGET_CPU_arm600\t0x0001\n-#define TARGET_CPU_arm610\t0x0002\n-#define TARGET_CPU_arm7\t\t0x0001\n-#define TARGET_CPU_arm7m\t0x0004\n-#define TARGET_CPU_arm7dm\t0x0004\n-#define TARGET_CPU_arm7dmi\t0x0004\n-#define TARGET_CPU_arm700\t0x0001\n-#define TARGET_CPU_arm710\t0x0002\n-#define TARGET_CPU_arm7100\t0x0002\n-#define TARGET_CPU_arm7500\t0x0002\n-#define TARGET_CPU_arm7500fe\t0x1001\n-#define TARGET_CPU_arm7tdmi\t0x0008\n-#define TARGET_CPU_arm8\t\t0x0010\n-#define TARGET_CPU_arm810\t0x0020\n-#define TARGET_CPU_strongarm\t0x0040\n-#define TARGET_CPU_strongarm110 0x0040\n-#define TARGET_CPU_strongarm1100 0x0040\n-#define TARGET_CPU_arm9\t\t0x0080\n-#define TARGET_CPU_arm9tdmi\t0x0080\n-#define TARGET_CPU_xscale       0x0100\n-#define TARGET_CPU_ep9312\t0x0200\n-#define TARGET_CPU_iwmmxt\t0x0400\n-#define TARGET_CPU_arm926ejs\t0x0800\n-#define TARGET_CPU_arm1026ejs\t0x1000\n-#define TARGET_CPU_arm1136js\t0x2000\n-#define TARGET_CPU_arm1136jfs\t0x4000\n-/* Configure didn't specify.  */\n-#define TARGET_CPU_generic\t0x8000\n-\n /* The various ARM cores.  */\n enum processor_type\n {\n-#define ARM_CORE(NAME, FLAGS, COSTS) \\\n+#define ARM_CORE(NAME, ARCH, FLAGS, COSTS) \\\n   NAME,\n #include \"arm-cores.def\"\n #undef ARM_CORE\n   /* Used to indicate that no processor has been specified.  */\n   arm_none\n };\n \n+enum target_cpus\n+{\n+#define ARM_CORE(NAME, ARCH, FLAGS, COSTS) \\\n+  TARGET_CPU_##NAME,\n+#include \"arm-cores.def\"\n+#undef ARM_CORE\n+  TARGET_CPU_generic\n+};\n+\n /* The processor for which instructions should be scheduled.  */\n extern enum processor_type arm_tune;\n \n@@ -159,166 +146,16 @@ extern GTY(()) rtx aof_pic_label;\n #define TARGET_CPU_DEFAULT TARGET_CPU_generic\n #endif\n \n-/* If the configuration file doesn't specify the cpu, the subtarget may\n-   override it.  If it doesn't, then default to an ARM6.  */\n-#if TARGET_CPU_DEFAULT == TARGET_CPU_generic\n-#undef TARGET_CPU_DEFAULT\n-\n-#ifdef SUBTARGET_CPU_DEFAULT\n-#define TARGET_CPU_DEFAULT SUBTARGET_CPU_DEFAULT\n-#else\n-#define TARGET_CPU_DEFAULT TARGET_CPU_arm6\n-#endif\n-#endif\n-\n-#if TARGET_CPU_DEFAULT == TARGET_CPU_arm2\n-#define CPP_ARCH_DEFAULT_SPEC \"-D__ARM_ARCH_2__\"\n-#else\n-#if TARGET_CPU_DEFAULT == TARGET_CPU_arm6 || TARGET_CPU_DEFAULT == TARGET_CPU_arm610 || TARGET_CPU_DEFAULT == TARGET_CPU_arm7500fe\n-#define CPP_ARCH_DEFAULT_SPEC \"-D__ARM_ARCH_3__\"\n-#else\n-#if TARGET_CPU_DEFAULT == TARGET_CPU_arm7m\n-#define CPP_ARCH_DEFAULT_SPEC \"-D__ARM_ARCH_3M__\"\n-#else\n-#if TARGET_CPU_DEFAULT == TARGET_CPU_arm7tdmi || TARGET_CPU_DEFAULT == TARGET_CPU_arm9 || TARGET_CPU_DEFAULT == TARGET_CPU_arm9tdmi\n-#define CPP_ARCH_DEFAULT_SPEC \"-D__ARM_ARCH_4T__\"\n-#else\n-#if TARGET_CPU_DEFAULT == TARGET_CPU_arm8 || TARGET_CPU_DEFAULT == TARGET_CPU_arm810 || TARGET_CPU_DEFAULT == TARGET_CPU_strongarm || TARGET_CPU_DEFAULT == TARGET_CPU_strongarm110 || TARGET_CPU_DEFAULT == TARGET_CPU_strongarm1100 \n-#define CPP_ARCH_DEFAULT_SPEC \"-D__ARM_ARCH_4__\"\n-#else\n-#if TARGET_CPU_DEFAULT == TARGET_CPU_xscale\n-#define CPP_ARCH_DEFAULT_SPEC \"-D__ARM_ARCH_5TE__ -D__XSCALE__\"\n-#else\n-#if TARGET_CPU_DEFAULT == TARGET_CPU_ep9312\n-#define CPP_ARCH_DEFAULT_SPEC \"-D__ARM_ARCH_4T__ -D__MAVERICK__\"\n-/* Set TARGET_DEFAULT to the default, but without soft-float.  */\n-#ifdef  TARGET_DEFAULT\n-#undef  TARGET_DEFAULT\n-#define TARGET_DEFAULT\t(ARM_FLAG_APCS_32 | ARM_FLAG_APCS_FRAME)\n-#endif\n-#else\n-#if TARGET_CPU_DEFAULT == TARGET_CPU_iwmmxt\n-#define CPP_ARCH_DEFAULT_SPEC \"-D__ARM_ARCH_5TE__ -D__XSCALE__ -D__IWMMXT__\"\n-#else\n-#if (TARGET_CPU_DEFAULT == TARGET_CPU_arm926ejs || \\\n-     TARGET_CPU_DEFAULT == TARGET_CPU_arm1026ejs)\n-#define CPP_ARCH_DEFAULT_SPEC \"-D__ARM_ARCH_5TEJ__\"\n-#else\n-#if (TARGET_CPU_DEFAULT == TARGET_CPU_arm1136js || \\\n-     TARGET_CPU_DEFAULT == TARGET_CPU_arm1136jfs)\n-#define CPP_ARCH_DEFAULT_SPEC \"-D__ARM_ARCH_6J__\"\n-#else\n-#error Unrecognized value in TARGET_CPU_DEFAULT.\n-#endif\n-#endif\n-#endif\n-#endif\n-#endif\n-#endif\n-#endif\n-#endif\n-#endif\n-#endif\n \n #undef  CPP_SPEC\n-#define CPP_SPEC \"%(cpp_cpu_arch) %(subtarget_cpp_spec)\t\t\t\\\n+#define CPP_SPEC \"%(subtarget_cpp_spec)\t\t\t\t\t\\\n %{mapcs-32:%{mapcs-26:\t\t\t\t\t\t\t\\\n \t%e-mapcs-26 and -mapcs-32 may not be used together}}\t\t\\\n %{msoft-float:%{mhard-float:\t\t\t\t\t\t\\\n \t%e-msoft-float and -mhard_float may not be used together}}\t\\\n %{mbig-endian:%{mlittle-endian:\t\t\t\t\t\t\\\n \t%e-mbig-endian and -mlittle-endian may not be used together}}\"\n \n-/* Set the architecture define -- if -march= is set, then it overrides\n-   the -mcpu= setting.  */\n-#define CPP_CPU_ARCH_SPEC \"\\\n-%{march=arm2:-D__ARM_ARCH_2__} \\\n-%{march=arm250:-D__ARM_ARCH_2__} \\\n-%{march=arm3:-D__ARM_ARCH_2__} \\\n-%{march=arm6:-D__ARM_ARCH_3__} \\\n-%{march=arm600:-D__ARM_ARCH_3__} \\\n-%{march=arm610:-D__ARM_ARCH_3__} \\\n-%{march=arm7:-D__ARM_ARCH_3__} \\\n-%{march=arm700:-D__ARM_ARCH_3__} \\\n-%{march=arm710:-D__ARM_ARCH_3__} \\\n-%{march=arm720:-D__ARM_ARCH_3__} \\\n-%{march=arm7100:-D__ARM_ARCH_3__} \\\n-%{march=arm7500:-D__ARM_ARCH_3__} \\\n-%{march=arm7500fe:-D__ARM_ARCH_3__} \\\n-%{march=arm7m:-D__ARM_ARCH_3M__} \\\n-%{march=arm7dm:-D__ARM_ARCH_3M__} \\\n-%{march=arm7dmi:-D__ARM_ARCH_3M__} \\\n-%{march=arm7tdmi:-D__ARM_ARCH_4T__} \\\n-%{march=arm8:-D__ARM_ARCH_4__} \\\n-%{march=arm810:-D__ARM_ARCH_4__} \\\n-%{march=arm9:-D__ARM_ARCH_4T__} \\\n-%{march=arm920:-D__ARM_ARCH_4__} \\\n-%{march=arm920t:-D__ARM_ARCH_4T__} \\\n-%{march=arm926ejs:-D__ARM_ARCH_5TEJ__} \\\n-%{march=arm9tdmi:-D__ARM_ARCH_4T__} \\\n-%{march=arm1026ejs:-D__ARM_ARCH_5TEJ__} \\\n-%{march=arm1136js:-D__ARM_ARCH_6J__} \\\n-%{march=arm1136jfs:-D__ARM_ARCH_6J__} \\\n-%{march=strongarm:-D__ARM_ARCH_4__} \\\n-%{march=strongarm110:-D__ARM_ARCH_4__} \\\n-%{march=strongarm1100:-D__ARM_ARCH_4__} \\\n-%{march=xscale:-D__ARM_ARCH_5TE__} \\\n-%{march=xscale:-D__XSCALE__} \\\n-%{march=ep9312:-D__ARM_ARCH_4T__} \\\n-%{march=ep9312:-D__MAVERICK__} \\\n-%{march=armv2:-D__ARM_ARCH_2__} \\\n-%{march=armv2a:-D__ARM_ARCH_2__} \\\n-%{march=armv3:-D__ARM_ARCH_3__} \\\n-%{march=armv3m:-D__ARM_ARCH_3M__} \\\n-%{march=armv4:-D__ARM_ARCH_4__} \\\n-%{march=armv4t:-D__ARM_ARCH_4T__} \\\n-%{march=armv5:-D__ARM_ARCH_5__} \\\n-%{march=armv5t:-D__ARM_ARCH_5T__} \\\n-%{march=armv5e:-D__ARM_ARCH_5E__} \\\n-%{march=armv5te:-D__ARM_ARCH_5TE__} \\\n-%{march=armv6:-D__ARM_ARCH6__} \\\n-%{march=armv6j:-D__ARM_ARCH6J__} \\\n-%{!march=*: \\\n- %{mcpu=arm2:-D__ARM_ARCH_2__} \\\n- %{mcpu=arm250:-D__ARM_ARCH_2__} \\\n- %{mcpu=arm3:-D__ARM_ARCH_2__} \\\n- %{mcpu=arm6:-D__ARM_ARCH_3__} \\\n- %{mcpu=arm600:-D__ARM_ARCH_3__} \\\n- %{mcpu=arm610:-D__ARM_ARCH_3__} \\\n- %{mcpu=arm7:-D__ARM_ARCH_3__} \\\n- %{mcpu=arm700:-D__ARM_ARCH_3__} \\\n- %{mcpu=arm710:-D__ARM_ARCH_3__} \\\n- %{mcpu=arm720:-D__ARM_ARCH_3__} \\\n- %{mcpu=arm7100:-D__ARM_ARCH_3__} \\\n- %{mcpu=arm7500:-D__ARM_ARCH_3__} \\\n- %{mcpu=arm7500fe:-D__ARM_ARCH_3__} \\\n- %{mcpu=arm7m:-D__ARM_ARCH_3M__} \\\n- %{mcpu=arm7dm:-D__ARM_ARCH_3M__} \\\n- %{mcpu=arm7dmi:-D__ARM_ARCH_3M__} \\\n- %{mcpu=arm7tdmi:-D__ARM_ARCH_4T__} \\\n- %{mcpu=arm8:-D__ARM_ARCH_4__} \\\n- %{mcpu=arm810:-D__ARM_ARCH_4__} \\\n- %{mcpu=arm9:-D__ARM_ARCH_4T__} \\\n- %{mcpu=arm920:-D__ARM_ARCH_4__} \\\n- %{mcpu=arm920t:-D__ARM_ARCH_4T__} \\\n- %{mcpu=arm926ejs:-D__ARM_ARCH_5TEJ__} \\\n- %{mcpu=arm9tdmi:-D__ARM_ARCH_4T__} \\\n- %{mcpu=arm1026ejs:-D__ARM_ARCH_5TEJ__} \\\n- %{mcpu=arm1136js:-D__ARM_ARCH_6J__} \\\n- %{mcpu=arm1136jfs:-D__ARM_ARCH_6J__} \\\n- %{mcpu=strongarm:-D__ARM_ARCH_4__} \\\n- %{mcpu=strongarm110:-D__ARM_ARCH_4__} \\\n- %{mcpu=strongarm1100:-D__ARM_ARCH_4__} \\\n- %{mcpu=xscale:-D__ARM_ARCH_5TE__} \\\n- %{mcpu=xscale:-D__XSCALE__} \\\n- %{mcpu=ep9312:-D__ARM_ARCH_4T__} \\\n- %{mcpu=ep9312:-D__MAVERICK__} \\\n- %{mcpu=iwmmxt:-D__ARM_ARCH_5TE__} \\\n- %{mcpu=iwmmxt:-D__XSCALE__} \\\n- %{mcpu=iwmmxt:-D__IWMMXT__} \\\n- %{!mcpu*:%(cpp_cpu_arch_default)}} \\\n-\"\n-\n #ifndef CC1_SPEC\n #define CC1_SPEC \"\"\n #endif\n@@ -333,8 +170,6 @@ extern GTY(()) rtx aof_pic_label;\n \n    Do not define this macro if it does not need to do anything.  */\n #define EXTRA_SPECS\t\t\t\t\t\t\\\n-  { \"cpp_cpu_arch\",\t\tCPP_CPU_ARCH_SPEC },\t\t\\\n-  { \"cpp_cpu_arch_default\",\tCPP_ARCH_DEFAULT_SPEC },\t\\\n   { \"subtarget_cpp_spec\",\tSUBTARGET_CPP_SPEC },           \\\n   SUBTARGET_EXTRA_SPECS\n \n@@ -669,21 +504,6 @@ enum float_abi_type\n \n extern enum float_abi_type arm_float_abi;\n \n-/* Default floating point architecture.  Override in sub-target if\n-   necessary.\n-   FIXME: Is this still necessary/desirable?  Do we want VFP chips to\n-   default to VFP unless overridden by a subtarget?  If so it would be best\n-   to remove these definitions.  It also assumes there is only one cpu model\n-   with a Maverick fpu.  */\n-#ifndef FPUTYPE_DEFAULT\n-#define FPUTYPE_DEFAULT FPUTYPE_FPA_EMU2\n-#endif\n-\n-#if TARGET_CPU_DEFAULT == TARGET_CPU_ep9312\n-#undef  FPUTYPE_DEFAULT\n-#define FPUTYPE_DEFAULT FPUTYPE_MAVERICK\n-#endif\n-\n /* Which ABI to use.  */\n enum arm_abi_type\n {\n@@ -724,7 +544,7 @@ extern int thumb_code;\n extern int arm_is_strong;\n \n /* Nonzero if this chip is a Cirrus variant.  */\n-extern int arm_is_cirrus;\n+extern int arm_arch_cirrus;\n \n /* Nonzero if this chip supports Intel XScale with Wireless MMX technology.  */\n extern int arm_arch_iwmmxt;"}]}