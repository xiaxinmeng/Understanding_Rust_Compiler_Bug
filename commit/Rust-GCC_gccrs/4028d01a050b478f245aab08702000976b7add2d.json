{"sha": "4028d01a050b478f245aab08702000976b7add2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAyOGQwMWEwNTBiNDc4ZjI0NWFhYjA4NzAyMDAwOTc2YjdhZGQyZA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-02-25T00:16:29Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-02-25T00:16:29Z"}, "message": "Daily bump.", "tree": {"sha": "3ff16a3ddc4f2ede447887e89bb924ffdb95078b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ff16a3ddc4f2ede447887e89bb924ffdb95078b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4028d01a050b478f245aab08702000976b7add2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4028d01a050b478f245aab08702000976b7add2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4028d01a050b478f245aab08702000976b7add2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4028d01a050b478f245aab08702000976b7add2d/comments", "author": null, "committer": null, "parents": [{"sha": "94bfe81afedb6dbba877ee7c9f047375366f8996", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94bfe81afedb6dbba877ee7c9f047375366f8996", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94bfe81afedb6dbba877ee7c9f047375366f8996"}], "stats": {"total": 330, "additions": 329, "deletions": 1}, "files": [{"sha": "d03450aae906792ea7dc35b430aa28cd100b6019", "filename": "gcc/ChangeLog", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4028d01a050b478f245aab08702000976b7add2d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4028d01a050b478f245aab08702000976b7add2d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4028d01a050b478f245aab08702000976b7add2d", "patch": "@@ -1,3 +1,77 @@\n+2021-02-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/99226\n+\t* omp-low.c (struct omp_context): Add teams_nested_p and\n+\tnonteams_nested_p members.\n+\t(scan_omp_target): Diagnose teams nested inside of target with other\n+\tdirectives strictly nested inside of the same target.\n+\t(check_omp_nesting_restrictions): Set ctx->teams_nested_p or\n+\tctx->nonteams_nested_p as needed.\n+\n+2021-02-24  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR inline-asm/99123\n+\t* lra-constraints.c (uses_hard_regs_p): Don't use decompose_mem_address.\n+\n+2021-02-24  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* config/cris/cris.c (cris_expand_prologue): Set\n+\tcurrent_function_static_stack_size, if flag_stack_usage_info.\n+\n+2021-02-24  Pat Haugen  <pthaugen@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (next_insn_prefixed_p): Rename.\n+\t(rs6000_final_prescan_insn): Adjust.\n+\t(rs6000_asm_output_opcode): Likewise.\n+\n+2021-02-24  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97172\n+\t* attribs.c (attr_access::free_lang_data): Clear attribute arg spec\n+\tfrom function arguments.\n+\n+2021-02-24  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR tree-optimization/99220\n+\t* tree-vect-slp.c (optimize_load_redistribution_1): Remove\n+\tnode from cache when it's about to be deleted.\n+\n+2021-02-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/99225\n+\t* fold-const.c (fold_binary_loc) <case NE_EXPR>: In (x & (1 << y)) != 0\n+\tto ((x >> y) & 1) != 0 simplifications use build_one_cst instead of\n+\tbuild_int_cst (..., 1).  Formatting fixes.\n+\n+2021-02-24  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR tree-optimization/99149\n+\t* tree-vect-slp-patterns.c (vect_detect_pair_op): Don't recreate the\n+\tbuffer.\n+\t(vect_slp_reset_pattern): Remove.\n+\t(complex_fma_pattern::matches): Remove call to vect_slp_reset_pattern.\n+\t(complex_mul_pattern::build, complex_fma_pattern::build,\n+\tcomplex_fms_pattern::build): Fix ref counts.\n+\t* tree-vect-slp.c (vect_free_slp_tree): Undo SLP only pattern relevancy\n+\twhen node is being deleted.\n+\t(vect_match_slp_patterns_2): Correct result of cache hit on patterns.\n+\t(vect_schedule_slp): Invalidate SLP_TREE_REPRESENTATIVE of removed\n+\tstores.\n+\t* tree-vectorizer.c (vec_info::new_stmt_vec_info): Initialize value.\n+\n+2021-02-24  Matthias Klose  <doko@ubuntu.com>\n+\n+\tRevert:\n+\t2020-12-07  Matthias Klose  <doko@ubuntu.com>\n+\n+\t* genextract.c (print_header): Undefine ENABLE_RTL_CHECKING\n+\tand ENABLE_RTL_FLAG_CHECKING.\n+\n+2021-02-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/99224\n+\t* builtins.c (fold_builtin_next_arg): Avoid NULL arg.\n+\n 2021-02-23  Peter Bergner  <bergner@linux.ibm.com>\n \n \t* config/rs6000/mma.md (mma_assemble_pair): Rename from this..."}, {"sha": "14f7958584686435c741f6a02c5b423e91d9b284", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4028d01a050b478f245aab08702000976b7add2d/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4028d01a050b478f245aab08702000976b7add2d/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=4028d01a050b478f245aab08702000976b7add2d", "patch": "@@ -1 +1 @@\n-20210224\n+20210225"}, {"sha": "545f84bcd7acd56f36494d299f82765b479d0385", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4028d01a050b478f245aab08702000976b7add2d/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4028d01a050b478f245aab08702000976b7add2d/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=4028d01a050b478f245aab08702000976b7add2d", "patch": "@@ -1,3 +1,8 @@\n+2021-02-24  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97172\n+\t* c-decl.c (free_attr_access_data): Clear attribute arg spec.\n+\n 2021-02-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/99136"}, {"sha": "14667c9d4a024db6dabb267be3371a2c074e1e7e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4028d01a050b478f245aab08702000976b7add2d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4028d01a050b478f245aab08702000976b7add2d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4028d01a050b478f245aab08702000976b7add2d", "patch": "@@ -1,3 +1,25 @@\n+2021-02-24  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/98718\n+\t* module.cc (ool): New indirection vector.\n+\t(loc_spans::maybe_propagate): Location is not optional.\n+\t(loc_spans::open): Likewise.  Assert monotonically advancing.\n+\t(module_for_ordinary_loc): Use ool indirection vector.\n+\t(module_state::write_prepare_maps): Do not count empty macro\n+\texpansions.  Elide empty spans.\n+\t(module_state::write_macro_maps): Skip empty expansions.\n+\t(ool_cmp): New qsort comparator.\n+\t(module_state::write): Create and destroy ool vector.\n+\t(name_pending_imports): Fix dump push/pop.\n+\t(preprocess_module): Likewise.  Add more dumping.\n+\t(preprocessed_module): Likewise.\n+\n+2021-02-24  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/96251\n+\t* coroutines.cc (coro_common_keyword_context_valid_p): Suppress\n+\terror reporting when instantiating for a constexpr.\n+\n 2021-02-23  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/99208"}, {"sha": "91f35aac4298cbb1ad336adeb381aadceeb5b598", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4028d01a050b478f245aab08702000976b7add2d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4028d01a050b478f245aab08702000976b7add2d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4028d01a050b478f245aab08702000976b7add2d", "patch": "@@ -1,3 +1,19 @@\n+2021-02-24  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/98342\n+\t* trans-expr.c (gfc_conv_derived_to_class): Add optional arg.\n+\t'derived_array' to hold the fixed, parmse expr in the case of\n+\tassumed rank formal arguments. Deal with optional arguments.\n+\t(gfc_conv_procedure_call): Null 'derived' array for each actual\n+\targument. Add its address to the call to gfc_conv_derived_to_\n+\tclass. Access the 'data' field of scalar descriptors before\n+\tdeallocating allocatable components. Also strip NOPs before the\n+\tcalls to gfc_deallocate_alloc_comp. Use 'derived' array as the\n+\tinput to gfc_deallocate_alloc_comp if it is available.\n+\t* trans.h : Include the optional argument 'derived_array' to\n+\tthe prototype of gfc_conv_derived_to_class. The default value\n+\tis NULL_TREE.\n+\n 2021-02-23  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/99124"}, {"sha": "95f7993ba7873ebc202d81110684085ffeb8301f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4028d01a050b478f245aab08702000976b7add2d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4028d01a050b478f245aab08702000976b7add2d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4028d01a050b478f245aab08702000976b7add2d", "patch": "@@ -1,3 +1,119 @@\n+2021-02-24  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/98718\n+\t* g++.dg/modules/pr98718_a.C: New.\n+\t* g++.dg/modules/pr98718_b.C: New.\n+\n+2021-02-24  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* g++.dg/coroutines/co-await-void_type.C: Mark promise\n+\tfinal_suspend call as noexcept.\n+\t* g++.dg/coroutines/co-return-syntax-08-bad-return.C: Likewise.\n+\t* g++.dg/coroutines/co-return-syntax-10-movable.C: Likewise.\n+\t* g++.dg/coroutines/co-return-warning-1.C: Likewise.\n+\t* g++.dg/coroutines/co-yield-syntax-08-needs-expr.C: Likewise.\n+\t* g++.dg/coroutines/coro-bad-gro-00-class-gro-scalar-return.C: Likewise.\n+\t* g++.dg/coroutines/coro-bad-gro-01-void-gro-non-class-coro.C: Likewise.\n+\t* g++.dg/coroutines/coro-missing-gro.C: Likewise.\n+\t* g++.dg/coroutines/coro-missing-promise-yield.C: Likewise.\n+\t* g++.dg/coroutines/coro-missing-ret-value.C: Likewise.\n+\t* g++.dg/coroutines/coro-missing-ret-void.C: Likewise.\n+\t* g++.dg/coroutines/coro-missing-ueh.h: Likewise.\n+\t* g++.dg/coroutines/coro1-allocators.h: Likewise.\n+\t* g++.dg/coroutines/coro1-refs-and-ctors.h: Likewise.\n+\t* g++.dg/coroutines/coro1-ret-int-yield-int.h: Likewise.\n+\t* g++.dg/coroutines/pr94682-preview-this.C: Likewise.\n+\t* g++.dg/coroutines/pr94752.C: Likewise.\n+\t* g++.dg/coroutines/pr94760-mismatched-traits-and-promise-prev.C: Likewise.\n+\t* g++.dg/coroutines/pr94879-folly-1.C: Likewise.\n+\t* g++.dg/coroutines/pr94883-folly-2.C: Likewise.\n+\t* g++.dg/coroutines/pr95050.C: Likewise.\n+\t* g++.dg/coroutines/pr95345.C: Likewise.\n+\t* g++.dg/coroutines/pr95440.C: Likewise.\n+\t* g++.dg/coroutines/pr95591.C: Likewise.\n+\t* g++.dg/coroutines/pr95711.C: Likewise.\n+\t* g++.dg/coroutines/pr95813.C: Likewise.\n+\t* g++.dg/coroutines/symmetric-transfer-00-basic.C: Likewise.\n+\t* g++.dg/coroutines/torture/co-await-07-tmpl.C: Likewise.\n+\t* g++.dg/coroutines/torture/co-await-17-capture-comp-ref.C: Likewise.\n+\t* g++.dg/coroutines/torture/co-ret-00-void-return-is-ready.C: Likewise.\n+\t* g++.dg/coroutines/torture/co-ret-01-void-return-is-suspend.C: Likewise.\n+\t* g++.dg/coroutines/torture/co-ret-03-different-GRO-type.C: Likewise.\n+\t* g++.dg/coroutines/torture/co-ret-04-GRO-nontriv.C: Likewise.\n+\t* g++.dg/coroutines/torture/co-ret-06-template-promise-val-1.C: Likewise.\n+\t* g++.dg/coroutines/torture/co-ret-08-template-cast-ret.C: Likewise.\n+\t* g++.dg/coroutines/torture/co-ret-09-bool-await-susp.C: Likewise.\n+\t* g++.dg/coroutines/torture/co-ret-15-default-return_void.C: Likewise.\n+\t* g++.dg/coroutines/torture/co-ret-17-void-ret-coro.C: Likewise.\n+\t* g++.dg/coroutines/torture/co-yield-00-triv.C: Likewise.\n+\t* g++.dg/coroutines/torture/co-yield-03-tmpl.C: Likewise.\n+\t* g++.dg/coroutines/torture/co-yield-04-complex-local-state.C: Likewise.\n+\t* g++.dg/coroutines/torture/exceptions-test-0.C: Likewise.\n+\t* g++.dg/coroutines/torture/exceptions-test-01-n4849-a.C: Likewise.\n+\t* g++.dg/coroutines/torture/func-params-04.C: Likewise.\n+\t* g++.dg/coroutines/torture/local-var-06-structured-binding.C: Likewise.\n+\t* g++.dg/coroutines/torture/mid-suspend-destruction-0.C: Likewise.\n+\n+2021-02-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/99226\n+\t* c-c++-common/gomp/pr99226.c: New test.\n+\t* gfortran.dg/gomp/pr99226.f90: New test.\n+\n+2021-02-24  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR inline-asm/99123\n+\t* gcc.target/i386/pr99123.c: New.\n+\n+2021-02-24  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* gcc.dg/stack-usage-1.c: Adjust for CRIS.\n+\n+2021-02-24  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99072\n+\t* g++.dg/modules/pr99072.H: New.\n+\n+2021-02-24  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/98342\n+\t* gfortran.dg/assumed_rank_21.f90 : New test.\n+\n+2021-02-24  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97172\n+\t* gcc.dg/pr97172-2.c: New test.\n+\n+2021-02-24  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR tree-optimization/99220\n+\t* g++.dg/vect/pr99220.cc: New test.\n+\n+2021-02-24  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR tree-optimization/99149\n+\t* g++.dg/vect/pr99149.cc: Disabled on BE.\n+\n+2021-02-24  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/96251\n+\t* g++.dg/coroutines/pr96251.C: New test.\n+\n+2021-02-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/99225\n+\t* gcc.c-torture/compile/pr99225.c: New test.\n+\n+2021-02-24  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR tree-optimization/99149\n+\t* g++.dg/vect/pr99149.cc: New test.\n+\n+2021-02-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/99224\n+\t* gcc.dg/pr99224.c: New testcase.\n+\n 2021-02-23  Peter Bergner  <bergner@linux.ibm.com>\n \n \t* gcc.target/powerpc/mma-builtin-4.c: Add tests for"}, {"sha": "684c5e51025c762fabdbfd4d8087e39dc4a0c512", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4028d01a050b478f245aab08702000976b7add2d/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4028d01a050b478f245aab08702000976b7add2d/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=4028d01a050b478f245aab08702000976b7add2d", "patch": "@@ -1,3 +1,15 @@\n+2021-02-24  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/98718\n+\t* include/line-map.h\n+\t* line-map.c\n+\n+2021-02-24  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99072\n+\t* init.c (read_original_filename): Expunge all evidence of the\n+\toriginal filename.\n+\n 2021-02-18  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/99023"}, {"sha": "9d03ff45d080ed5e04d8f56c4d96f37418bb60c6", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4028d01a050b478f245aab08702000976b7add2d/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4028d01a050b478f245aab08702000976b7add2d/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=4028d01a050b478f245aab08702000976b7add2d", "patch": "@@ -1,3 +1,15 @@\n+2021-02-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libgcc/99236\n+\t* libgcc2.c (__powisf2, __powidf2, __powitf2, __powixf2): Perform\n+\tnegation of m in unsigned type.\n+\n+2021-02-24  Christophe Lyon  <christophe.lyon@linaro.org>\n+\t    Hau Hsu  <hsuhau617@gmail.com>\n+\n+\tPR target/99157\n+\t* config/arm/t-arm: Fix cmse support detection.\n+\n 2021-02-22  Michael Meissner  <meissner@linux.ibm.com>\n \n \t* dfp-bit.c (BFP_TO_DFP): Fix a comment line that was too long."}, {"sha": "00b35f6d0c0ea9bb2ba78245f9fdcd7d49efdbde", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4028d01a050b478f245aab08702000976b7add2d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4028d01a050b478f245aab08702000976b7add2d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4028d01a050b478f245aab08702000976b7add2d", "patch": "@@ -1,3 +1,74 @@\n+2021-02-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/99261\n+\t* src/c++17/floating_to_chars.cc (sprintf_ld): Add extra args\n+\tbefore value to be printed.\n+\n+2021-02-24  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* src/c++17/floating_to_chars.cc (__floating_to_chars_precision):\n+\tRelax the condition that guards the printf code path to accept\n+\tF128_type as well as long double.\n+\n+2021-02-24  Cassio Neri  <cassio.neri@gmail.com>\n+\n+\t* include/std/chrono (year_month_day_last:day): New\n+\timplementation.\n+\n+2021-02-24  Cassio Neri  <cassio.neri@gmail.com>\n+\n+\t* include/std/chrono (year::is_leap): New implementation.\n+\t* testsuite/std/time/year/2.cc: New test.\n+\n+2021-02-24  Cassio Neri  <cassio.neri@gmail.com>\n+\n+\t* include/std/chrono (year_month_day::_M_days_since_epoch):\n+\tNew implementation.\n+\t* testsuite/std/time/year_month_day/4.cc: New test.\n+\n+2021-02-24  Cassio Neri  <cassio.neri@gmail.com>\n+\n+\t* include/std/chrono (year_month_day::_S_from_days): New\n+\timplementation.\n+\t* testsuite/std/time/year_month_day/3.cc: New test.\n+\n+2021-02-24  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/98384\n+\t* testsuite/20_util/to_chars/long_double.cc: Include <optional>.\n+\t(test01): Simplify verifying the nearby values by using a\n+\t2-iteration loop and a dedicated output buffer to check that the\n+\tnearby values are different.  Factor out the printf-based\n+\tverification into a local function, and check that the leading\n+\thex digits agree before comparing to the output of printf.  Also\n+\tverify the output by round-tripping it through from_chars.\n+\n+2021-02-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/98389\n+\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.29): Do not match to_chars\n+\tsymbols for long double arguments mangled as 'g'.\n+\t* config/os/gnu-linux/ldbl-extra.ver: Likewise.\n+\t* config/os/gnu-linux/ldbl-ieee128-extra.ver: Likewise.\n+\t* src/c++17/Makefile.am [GLIBCXX_LDBL_ALT128_COMPAT_TRUE]:\n+\tUse -mabi=ibmlongdouble for floating_to_chars.cc.\n+\t* src/c++17/Makefile.in: Regenerate.\n+\t* src/c++17/floating_to_chars.cc (floating_type_traits_binary128):\n+\tNew type defining type traits of IEEE binary128 format.\n+\t(floating_type_traits<__float128>): Define specialization.\n+\t(floating_type_traits<long double>): Define in terms of\n+\tfloating_type_traits_binary128 when appropriate.\n+\t(floating_to_shortest_scientific): Handle __float128.\n+\t(sprintf_ld): New function template for printing a long double\n+\tor __ieee128 value using sprintf.\n+\t(__floating_to_chars_shortest, __floating_to_chars_precision):\n+\tUse sprintf_ld.\n+\t(to_chars): Define overloads for __float128.\n+\n+2021-02-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/17_intro/names.cc: Undefine 'u' on powerpc*-linux*.\n+\n 2021-02-23  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/99074"}]}