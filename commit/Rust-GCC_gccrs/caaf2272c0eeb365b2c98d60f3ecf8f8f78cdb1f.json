{"sha": "caaf2272c0eeb365b2c98d60f3ecf8f8f78cdb1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FhZjIyNzJjMGVlYjM2NWIyYzk4ZDYwZjNlY2Y4ZjhmNzhjZGIxZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-02-06T19:37:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-02-06T19:37:31Z"}, "message": "re PR c/5420 (bad code generated with gcc3.1/ia64)\n\n\tPR c/5420:\n\t* c-common.c (c_unsafe_for_reeval): Make COMPOUND_LITERAL_EXPR\n\tunsafe for reevaluation.\n\n\t* gcc.c-torture/execute/20020206-2.c: New test.\n\nFrom-SVN: r49550", "tree": {"sha": "1f50cf5060ea9a645f3920964e18dfd6c6ba1739", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f50cf5060ea9a645f3920964e18dfd6c6ba1739"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/caaf2272c0eeb365b2c98d60f3ecf8f8f78cdb1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caaf2272c0eeb365b2c98d60f3ecf8f8f78cdb1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caaf2272c0eeb365b2c98d60f3ecf8f8f78cdb1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caaf2272c0eeb365b2c98d60f3ecf8f8f78cdb1f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d51292889314d94fcfda6bbab347b312492927e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d51292889314d94fcfda6bbab347b312492927e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d51292889314d94fcfda6bbab347b312492927e4"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "96baa91fc6cb7a17d020cfdb9416673577f7ffc1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caaf2272c0eeb365b2c98d60f3ecf8f8f78cdb1f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caaf2272c0eeb365b2c98d60f3ecf8f8f78cdb1f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=caaf2272c0eeb365b2c98d60f3ecf8f8f78cdb1f", "patch": "@@ -1,3 +1,9 @@\n+2002-02-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/5420:\n+\t* c-common.c (c_unsafe_for_reeval): Make COMPOUND_LITERAL_EXPR\n+\tunsafe for reevaluation.\n+\n 2002-02-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/5482:"}, {"sha": "4b7946b41946990e71273ed068ebe870faac705b", "filename": "gcc/c-common.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caaf2272c0eeb365b2c98d60f3ecf8f8f78cdb1f/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caaf2272c0eeb365b2c98d60f3ecf8f8f78cdb1f/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=caaf2272c0eeb365b2c98d60f3ecf8f8f78cdb1f", "patch": "@@ -3567,8 +3567,10 @@ int\n c_unsafe_for_reeval (exp)\n      tree exp;\n {\n-  /* Statement expressions may not be reevaluated.  */\n-  if (TREE_CODE (exp) == STMT_EXPR)\n+  /* Statement expressions may not be reevaluated, likewise compound\n+     literals.  */\n+  if (TREE_CODE (exp) == STMT_EXPR\n+      || TREE_CODE (exp) == COMPOUND_LITERAL_EXPR)\n     return 2;\n \n   /* Walk all other expressions.  */"}, {"sha": "5c8a027d3cbda2a2abf345183aecccc428cf4d2e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caaf2272c0eeb365b2c98d60f3ecf8f8f78cdb1f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caaf2272c0eeb365b2c98d60f3ecf8f8f78cdb1f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=caaf2272c0eeb365b2c98d60f3ecf8f8f78cdb1f", "patch": "@@ -2,6 +2,8 @@\n \n \t* gcc.c-torture/execute/20020206-1.c: New test.\n \n+\t* gcc.c-torture/execute/20020206-2.c: New test.\n+\n \tPR optimization/5429:\n \t* gcc.c-torture/compile/20020206-1.c: New test.\n "}, {"sha": "097eb3055c1fc01c63bb12a69aecd8728c835b79", "filename": "gcc/testsuite/gcc.c-torture/execute/20020206-2.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caaf2272c0eeb365b2c98d60f3ecf8f8f78cdb1f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020206-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caaf2272c0eeb365b2c98d60f3ecf8f8f78cdb1f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020206-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020206-2.c?ref=caaf2272c0eeb365b2c98d60f3ecf8f8f78cdb1f", "patch": "@@ -0,0 +1,24 @@\n+/* Origin: PR c/5420 from David Mosberger <davidm@hpl.hp.com>.\n+   This testcase was miscompiled when tail call optimizing, because a\n+   compound literal initialization was emitted only in the tail call insn\n+   chain, not in the normal call insn chain.  */\n+\n+typedef struct { unsigned short a; } A;\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+void foo (unsigned int x)\n+{\n+  if (x != 0x800 && x != 0x810)\n+    abort ();\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  for (i = 0; i < 2; ++i)\n+    foo (((A) { ((!(i >> 4) ? 8 : 64 + (i >> 4)) << 8) + (i << 4) } ).a);\n+  exit (0);\n+}"}]}