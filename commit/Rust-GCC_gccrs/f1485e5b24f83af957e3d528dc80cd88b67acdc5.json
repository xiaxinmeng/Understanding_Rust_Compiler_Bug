{"sha": "f1485e5b24f83af957e3d528dc80cd88b67acdc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE0ODVlNWIyNGY4M2FmOTU3ZTNkNTI4ZGM4MGNkODhiNjdhY2RjNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-10-10T11:17:13Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-10-10T11:17:13Z"}, "message": "re PR tree-optimization/63379 (Incorrect vectorization when enabling SSE and O3, initialises loop with wrong value)\n\n2014-10-10  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/63379\n\t* tree-vect-slp.c (vect_get_constant_vectors): Do not compute\n\ta neutral operand for min/max when it is not a reduction chain.\n\n\t* gcc.dg/vect/pr63379.c: New testcase.\n\nFrom-SVN: r216070", "tree": {"sha": "dcad327648e25cff091d2c3a264b952d5ec44924", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcad327648e25cff091d2c3a264b952d5ec44924"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1485e5b24f83af957e3d528dc80cd88b67acdc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1485e5b24f83af957e3d528dc80cd88b67acdc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1485e5b24f83af957e3d528dc80cd88b67acdc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1485e5b24f83af957e3d528dc80cd88b67acdc5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "18cda88d873b67cfa06ac2a9c8b2e85468a73f4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18cda88d873b67cfa06ac2a9c8b2e85468a73f4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18cda88d873b67cfa06ac2a9c8b2e85468a73f4c"}], "stats": {"total": 76, "additions": 69, "deletions": 7}, "files": [{"sha": "a42593f960ee232ddafd1341373e6f286a5e1731", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1485e5b24f83af957e3d528dc80cd88b67acdc5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1485e5b24f83af957e3d528dc80cd88b67acdc5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1485e5b24f83af957e3d528dc80cd88b67acdc5", "patch": "@@ -1,3 +1,9 @@\n+2014-10-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/63379\n+\t* tree-vect-slp.c (vect_get_constant_vectors): Do not compute\n+\ta neutral operand for min/max when it is not a reduction chain.\n+\n 2014-10-10  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/63476"}, {"sha": "632aa84af6a00feb15b7399c70c2d1e8cdeb17fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1485e5b24f83af957e3d528dc80cd88b67acdc5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1485e5b24f83af957e3d528dc80cd88b67acdc5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f1485e5b24f83af957e3d528dc80cd88b67acdc5", "patch": "@@ -1,3 +1,8 @@\n+2014-10-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/63379\n+\t* gcc.dg/vect/pr63379.c: New testcase.\n+\n 2014-10-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/59488"}, {"sha": "f6e8fc6a4ce9cd76d5f99a02e3355da7d9638d7f", "filename": "gcc/testsuite/gcc.dg/vect/pr63379.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1485e5b24f83af957e3d528dc80cd88b67acdc5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr63379.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1485e5b24f83af957e3d528dc80cd88b67acdc5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr63379.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr63379.c?ref=f1485e5b24f83af957e3d528dc80cd88b67acdc5", "patch": "@@ -0,0 +1,43 @@\n+/* PR tree-optimization/63379  */\n+/* { dg-do run } */\n+\n+#include \"tree-vect.h\"\n+\n+extern void abort (void);\n+\n+typedef struct {\n+    int x;\n+    int y;\n+} Point;\n+\n+Point pt_array[25];\n+\n+void __attribute__((noinline,noclone))\n+generate_array(void)\n+{\n+  unsigned int i;\n+  for (i = 0; i<25; i++)\n+    {\n+      pt_array[i].x = i;\n+      pt_array[i].y = 1000+i;\n+    }\n+}\n+\n+int main()\n+{\n+  check_vect ();\n+  generate_array ();\n+  Point min_pt = pt_array[0];\n+  Point *ptr, *ptr_end;\n+  for (ptr = pt_array+1, ptr_end = pt_array+25; ptr != ptr_end; ++ptr)\n+    {\n+      min_pt.x = (min_pt.x < ptr->x) ? min_pt.x : ptr->x;\n+      min_pt.y = (min_pt.y < ptr->y) ? min_pt.y : ptr->y;\n+    }\n+\n+  if (min_pt.x != 0 || min_pt.y != 1000)\n+    abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "59842291a9987806b8d5af023e3f2946cc7f6443", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1485e5b24f83af957e3d528dc80cd88b67acdc5/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1485e5b24f83af957e3d528dc80cd88b67acdc5/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=f1485e5b24f83af957e3d528dc80cd88b67acdc5", "patch": "@@ -2395,13 +2395,21 @@ vect_get_constant_vectors (tree op, slp_tree slp_node,\n             neutral_op = build_int_cst (TREE_TYPE (op), -1);\n             break;\n \n-          case MAX_EXPR:\n-          case MIN_EXPR:\n-            def_stmt = SSA_NAME_DEF_STMT (op);\n-            loop = (gimple_bb (stmt))->loop_father;\n-            neutral_op = PHI_ARG_DEF_FROM_EDGE (def_stmt,\n-                                                loop_preheader_edge (loop));\n-            break;\n+\t  /* For MIN/MAX we don't have an easy neutral operand but\n+\t     the initial values can be used fine here.  Only for\n+\t     a reduction chain we have to force a neutral element.  */\n+\t  case MAX_EXPR:\n+\t  case MIN_EXPR:\n+\t    if (!GROUP_FIRST_ELEMENT (stmt_vinfo))\n+\t      neutral_op = NULL;\n+\t    else\n+\t      {\n+\t\tdef_stmt = SSA_NAME_DEF_STMT (op);\n+\t\tloop = (gimple_bb (stmt))->loop_father;\n+\t\tneutral_op = PHI_ARG_DEF_FROM_EDGE (def_stmt,\n+\t\t\t\t\t\t    loop_preheader_edge (loop));\n+\t      }\n+\t    break;\n \n           default:\n             neutral_op = NULL;"}]}