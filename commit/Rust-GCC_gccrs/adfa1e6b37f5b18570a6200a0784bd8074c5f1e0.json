{"sha": "adfa1e6b37f5b18570a6200a0784bd8074c5f1e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRmYTFlNmIzN2Y1YjE4NTcwYTYyMDBhMDc4NGJkODA3NGM1ZjFlMA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2016-08-29T19:38:07Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2016-08-29T19:38:07Z"}, "message": "vec-init-4.c: New runtime tests for various vector short/char initializations.\n\n2016-08-29  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/vec-init-4.c: New runtime tests for various\n\tvector short/char initializations.\n\t* gcc.target/powerpc/vec-init-5.c: Likewise.\n\t* gcc.target/powerpc/vec-init-6.c: New compile time test for\n\tvector initialization optimizations.\n\t* gcc.target/powerpc/vec-init-7.c: Likewise.\n\t* gcc.target/powerpc/vec-init-8.c: New runtime tests for various\n\tvector float/double initializations.\n\t* gcc.target/powerpc/vec-init-9.c: Likewise.\n\nFrom-SVN: r239837", "tree": {"sha": "c2855d390c2567a5df2f7d47f802e607983b0a11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2855d390c2567a5df2f7d47f802e607983b0a11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adfa1e6b37f5b18570a6200a0784bd8074c5f1e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adfa1e6b37f5b18570a6200a0784bd8074c5f1e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adfa1e6b37f5b18570a6200a0784bd8074c5f1e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adfa1e6b37f5b18570a6200a0784bd8074c5f1e0/comments", "author": null, "committer": null, "parents": [{"sha": "d3ca2257cc4ca5a18c03abf37d95694d3764b996", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3ca2257cc4ca5a18c03abf37d95694d3764b996", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3ca2257cc4ca5a18c03abf37d95694d3764b996"}], "stats": {"total": 898, "additions": 898, "deletions": 0}, "files": [{"sha": "e07948d81674151889e5a48f852060a882c356e5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adfa1e6b37f5b18570a6200a0784bd8074c5f1e0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adfa1e6b37f5b18570a6200a0784bd8074c5f1e0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=adfa1e6b37f5b18570a6200a0784bd8074c5f1e0", "patch": "@@ -1,3 +1,15 @@\n+2016-08-29  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/vec-init-4.c: New runtime tests for various\n+\tvector short/char initializations.\n+\t* gcc.target/powerpc/vec-init-5.c: Likewise.\n+\t* gcc.target/powerpc/vec-init-6.c: New compile time test for\n+\tvector initialization optimizations.\n+\t* gcc.target/powerpc/vec-init-7.c: Likewise.\n+\t* gcc.target/powerpc/vec-init-8.c: New runtime tests for various\n+\tvector float/double initializations.\n+\t* gcc.target/powerpc/vec-init-9.c: Likewise.\n+\n 2016-08-29  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/77403"}, {"sha": "5e724c8b0df2cc363cd7883bdf98cbad3e8cb699", "filename": "gcc/testsuite/gcc.target/powerpc/vec-init-4.c", "status": "added", "additions": 212, "deletions": 0, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adfa1e6b37f5b18570a6200a0784bd8074c5f1e0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adfa1e6b37f5b18570a6200a0784bd8074c5f1e0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-4.c?ref=adfa1e6b37f5b18570a6200a0784bd8074c5f1e0", "patch": "@@ -0,0 +1,212 @@\n+/* { dg-do run { target { powerpc*-*-linux* } } } */\n+/* { dg-require-effective-target vsx_hw } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+#include <stdlib.h>\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+#define ELEMENTS -1, 2, 0, -32768, 32767, 53, 1, 16000\n+#define SPLAT 0x0123\n+\n+vector short sv = (vector short) { ELEMENTS };\n+vector short splat = (vector short) { SPLAT, SPLAT, SPLAT, SPLAT,\n+\t\t\t\t      SPLAT, SPLAT, SPLAT, SPLAT };\n+vector short sv_global, sp_global;\n+static vector short sv_static, sp_static;\n+static short expected[] = { ELEMENTS };\n+static short splat_expected = SPLAT;\n+\n+extern void check (vector short a)\n+  __attribute__((__noinline__));\n+\n+extern void check_splat (vector short a)\n+  __attribute__((__noinline__));\n+\n+extern vector short pack_reg (short a, short b, short c, short d,\n+\t\t\t      short e, short f, short g, short h)\n+  __attribute__((__noinline__));\n+\n+extern vector short pack_from_ptr (short *p_a, short *p_b,\n+\t\t\t\t   short *p_c, short *p_d,\n+\t\t\t\t   short *p_e, short *p_f,\n+\t\t\t\t   short *p_g, short *p_h)\n+  __attribute__((__noinline__));\n+\n+extern vector short pack_const (void)\n+  __attribute__((__noinline__));\n+\n+extern void pack_ptr (vector short *p,\n+\t\t      short a, short b, short c, short d,\n+\t\t      short e, short f, short g, short h)\n+  __attribute__((__noinline__));\n+\n+extern void pack_static (short a, short b, short c, short d,\n+\t\t\t short e, short f, short g, short h)\n+  __attribute__((__noinline__));\n+\n+extern void pack_global (short a, short b, short c, short d,\n+\t\t\t short e, short f, short g, short h)\n+  __attribute__((__noinline__));\n+\n+extern vector short splat_reg (short a)\n+  __attribute__((__noinline__));\n+\n+extern vector short splat_from_ptr (short *p_a)\n+  __attribute__((__noinline__));\n+\n+extern vector short splat_const (void)\n+  __attribute__((__noinline__));\n+\n+extern void splat_ptr (vector short *p, short a)\n+  __attribute__((__noinline__));\n+\n+extern void splat_static (short a)\n+  __attribute__((__noinline__));\n+\n+extern void splat_global (short a)\n+  __attribute__((__noinline__));\n+\n+void\n+check (vector short a)\n+{\n+  size_t i;\n+\n+  for (i = 0; i < 8; i++)\n+    if (vec_extract (a, i) != expected[i])\n+      abort ();\n+}\n+\n+void\n+check_splat (vector short a)\n+{\n+  size_t i;\n+\n+  for (i = 0; i < 8; i++)\n+    if (vec_extract (a, i) != SPLAT)\n+      abort ();\n+}\n+\n+vector short\n+pack_reg (short a, short b, short c, short d,\n+\t  short e, short f, short g, short h)\n+{\n+  return (vector short) { a, b, c, d, e, f, g, h };\n+}\n+\n+vector short\n+pack_from_ptr (short *p_a, short *p_b, short *p_c, short *p_d,\n+\t       short *p_e, short *p_f, short *p_g, short *p_h)\n+{\n+  return (vector short) { *p_a, *p_b, *p_c, *p_d,\n+\t\t\t  *p_e, *p_f, *p_g, *p_h };\n+}\n+\n+vector short\n+pack_const (void)\n+{\n+  return (vector short) { ELEMENTS };\n+}\n+\n+void\n+pack_ptr (vector short *p,\n+\t  short a, short b, short c, short d,\n+\t  short e, short f, short g, short h)\n+{\n+  *p = (vector short) { a, b, c, d, e, f, g, h };\n+}\n+\n+void\n+pack_static (short a, short b, short c, short d,\n+\t     short e, short f, short g, short h)\n+{\n+  sv_static = (vector short) { a, b, c, d, e, f, g, h };\n+}\n+\n+void\n+pack_global (short a, short b, short c, short d,\n+\t     short e, short f, short g, short h)\n+{\n+  sv_global = (vector short) { a, b, c, d, e, f, g, h };\n+}\n+\n+vector short\n+splat_reg (short a)\n+{\n+  return (vector short) { a, a, a, a, a, a, a, a };\n+}\n+\n+vector short\n+splat_from_ptr (short *p_a)\n+{\n+  return (vector short) { *p_a, *p_a, *p_a, *p_a,\n+\t\t\t  *p_a, *p_a, *p_a, *p_a };\n+}\n+\n+vector short\n+splat_const (void)\n+{\n+  return (vector short) { SPLAT, SPLAT, SPLAT, SPLAT,\n+\t\t\t  SPLAT, SPLAT, SPLAT, SPLAT };\n+}\n+\n+void\n+splat_ptr (vector short *p, short a)\n+{\n+  *p = (vector short) { a, a, a, a, a, a, a, a };\n+}\n+\n+void\n+splat_static (short a)\n+{\n+  sp_static = (vector short) { a, a, a, a, a, a, a, a };\n+}\n+\n+void\n+splat_global (short a)\n+{\n+  sp_global = (vector short) { a, a, a, a, a, a, a, a };\n+}\n+\n+int main (void)\n+{\n+  vector short sv2, sv3;\n+\n+  check (sv);\n+\n+  check (pack_reg (ELEMENTS));\n+\n+  check (pack_from_ptr (&expected[0], &expected[1], &expected[2],\n+\t\t\t&expected[3], &expected[4], &expected[5],\n+\t\t\t&expected[6], &expected[7]));\n+\n+  check (pack_const ());\n+\n+  pack_ptr (&sv2, ELEMENTS);\n+  check (sv2);\n+\n+  pack_static (ELEMENTS);\n+  check (sv_static);\n+\n+  pack_global (ELEMENTS);\n+  check (sv_global);\n+\n+  check_splat (splat);\n+\n+  check_splat (splat_reg (SPLAT));\n+\n+  check_splat (splat_from_ptr (&splat_expected));\n+\n+  check_splat (splat_const ());\n+\n+  splat_ptr (&sv2, SPLAT);\n+  check_splat (sv2);\n+\n+  splat_static (SPLAT);\n+  check_splat (sp_static);\n+\n+  splat_global (SPLAT);\n+  check_splat (sp_global);\n+\n+  return 0;\n+}"}, {"sha": "0059c48f709004b8406532f9a9cd88b26ad637c7", "filename": "gcc/testsuite/gcc.target/powerpc/vec-init-5.c", "status": "added", "additions": 258, "deletions": 0, "changes": 258, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adfa1e6b37f5b18570a6200a0784bd8074c5f1e0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adfa1e6b37f5b18570a6200a0784bd8074c5f1e0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-5.c?ref=adfa1e6b37f5b18570a6200a0784bd8074c5f1e0", "patch": "@@ -0,0 +1,258 @@\n+/* { dg-do run { target { powerpc*-*-linux* } } } */\n+/* { dg-require-effective-target vsx_hw } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+#include <stdlib.h>\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+#define ELEMENTS 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 127, -1, -128\n+#define SPLAT 0x12\n+\n+vector signed char sv = (vector signed char) { ELEMENTS };\n+vector signed char splat = (vector signed char) { SPLAT, SPLAT, SPLAT, SPLAT,\n+\t\t\t\t\t\t  SPLAT, SPLAT, SPLAT, SPLAT,\n+\t\t\t\t\t\t  SPLAT, SPLAT, SPLAT, SPLAT,\n+\t\t\t\t\t\t  SPLAT, SPLAT, SPLAT, SPLAT };\n+vector signed char sv_global, sp_global;\n+static vector signed char sv_static, sp_static;\n+static signed char expected[] = { ELEMENTS };\n+static signed char splat_expected = SPLAT;\n+\n+extern void check (vector signed char a)\n+  __attribute__((__noinline__));\n+\n+extern void check_splat (vector signed char a)\n+  __attribute__((__noinline__));\n+\n+extern vector signed char pack_reg (signed char a, signed char b,\n+\t\t\t\t    signed char c, signed char d,\n+\t\t\t\t    signed char e, signed char f,\n+\t\t\t\t    signed char g, signed char h,\n+\t\t\t\t    signed char i, signed char j,\n+\t\t\t\t    signed char k, signed char l,\n+\t\t\t\t    signed char m, signed char n,\n+\t\t\t\t    signed char o, signed char p)\n+  __attribute__((__noinline__));\n+\n+extern vector signed char pack_from_ptr (signed char *p_a, signed char *p_b,\n+\t\t\t\t\t signed char *p_c, signed char *p_d,\n+\t\t\t\t\t signed char *p_e, signed char *p_f,\n+\t\t\t\t\t signed char *p_g, signed char *p_h,\n+\t\t\t\t\t signed char *p_i, signed char *p_j,\n+\t\t\t\t\t signed char *p_k, signed char *p_l,\n+\t\t\t\t\t signed char *p_m, signed char *p_n,\n+\t\t\t\t\t signed char *p_o, signed char *p_p)\n+  __attribute__((__noinline__));\n+\n+extern vector signed char pack_const (void)\n+  __attribute__((__noinline__));\n+\n+extern void pack_ptr (vector signed char *q,\n+\t\t      signed char a, signed char b, signed char c, signed char d,\n+\t\t      signed char e, signed char f, signed char g, signed char h,\n+\t\t      signed char i, signed char j, signed char k, signed char l,\n+\t\t      signed char m, signed char n, signed char o, signed char p)\n+  __attribute__((__noinline__));\n+\n+extern void pack_static (signed char a, signed char b, signed char c, signed char d,\n+\t\t\t signed char e, signed char f, signed char g, signed char h,\n+\t\t\t signed char i, signed char j, signed char k, signed char l,\n+\t\t\t signed char m, signed char n, signed char o, signed char p)\n+  __attribute__((__noinline__));\n+\n+extern void pack_global (signed char a, signed char b, signed char c, signed char d,\n+\t\t\t signed char e, signed char f, signed char g, signed char h,\n+\t\t\t signed char i, signed char j, signed char k, signed char l,\n+\t\t\t signed char m, signed char n, signed char o, signed char p)\n+  __attribute__((__noinline__));\n+\n+extern vector signed char splat_reg (signed char a)\n+  __attribute__((__noinline__));\n+\n+extern vector signed char splat_from_ptr (signed char *p_a)\n+  __attribute__((__noinline__));\n+\n+extern vector signed char splat_const (void)\n+  __attribute__((__noinline__));\n+\n+extern void splat_ptr (vector signed char *p, signed char a)\n+  __attribute__((__noinline__));\n+\n+extern void splat_static (signed char a)\n+  __attribute__((__noinline__));\n+\n+extern void splat_global (signed char a)\n+  __attribute__((__noinline__));\n+\n+void\n+check (vector signed char a)\n+{\n+  size_t i;\n+\n+  for (i = 0; i < 16; i++)\n+    if (vec_extract (a, i) != expected[i])\n+      abort ();\n+}\n+\n+void\n+check_splat (vector signed char a)\n+{\n+  size_t i;\n+\n+  for (i = 0; i < 16; i++)\n+    if (vec_extract (a, i) != SPLAT)\n+      abort ();\n+}\n+\n+vector signed char\n+pack_reg (signed char a, signed char b, signed char c, signed char d,\n+\t  signed char e, signed char f, signed char g, signed char h,\n+\t  signed char i, signed char j, signed char k, signed char l,\n+\t  signed char m, signed char n, signed char o, signed char p)\n+{\n+  return (vector signed char) { a, b, c, d, e, f, g, h,\n+\t\t\t\ti, j, k, l, m, n, o, p };\n+}\n+\n+vector signed char\n+pack_from_ptr (signed char *p_a, signed char *p_b, signed char *p_c, signed char *p_d,\n+\t       signed char *p_e, signed char *p_f, signed char *p_g, signed char *p_h,\n+\t       signed char *p_i, signed char *p_j, signed char *p_k, signed char *p_l,\n+\t       signed char *p_m, signed char *p_n, signed char *p_o, signed char *p_p)\n+{\n+  return (vector signed char) { *p_a, *p_b, *p_c, *p_d,\n+\t\t\t\t*p_e, *p_f, *p_g, *p_h,\n+\t\t\t\t*p_i, *p_j, *p_k, *p_l,\n+\t\t\t\t*p_m, *p_n, *p_o, *p_p };\n+\n+}\n+\n+vector signed char\n+pack_const (void)\n+{\n+  return (vector signed char) { ELEMENTS };\n+}\n+\n+void\n+pack_ptr (vector signed char *q,\n+\t  signed char a, signed char b, signed char c, signed char d,\n+\t  signed char e, signed char f, signed char g, signed char h,\n+\t  signed char i, signed char j, signed char k, signed char l,\n+\t  signed char m, signed char n, signed char o, signed char p)\n+{\n+  *q = (vector signed char) { a, b, c, d, e, f, g, h,\n+\t\t\t      i, j, k, l, m, n, o, p };\n+}\n+\n+void\n+pack_static (signed char a, signed char b, signed char c, signed char d,\n+\t     signed char e, signed char f, signed char g, signed char h,\n+\t     signed char i, signed char j, signed char k, signed char l,\n+\t     signed char m, signed char n, signed char o, signed char p)\n+{\n+  sv_static = (vector signed char) { a, b, c, d, e, f, g, h,\n+\t\t\t\t     i, j, k, l, m, n, o, p };\n+}\n+\n+void\n+pack_global (signed char a, signed char b, signed char c, signed char d,\n+\t     signed char e, signed char f, signed char g, signed char h,\n+\t     signed char i, signed char j, signed char k, signed char l,\n+\t     signed char m, signed char n, signed char o, signed char p)\n+{\n+  sv_global = (vector signed char) { a, b, c, d, e, f, g, h,\n+\t\t\t\t     i, j, k, l, m, n, o, p };\n+}\n+\n+vector signed char\n+splat_reg (signed char a)\n+{\n+  return (vector signed char) { a, a, a, a, a, a, a, a,\n+\t\t\t\ta, a, a, a, a, a, a, a };\n+}\n+\n+vector signed char\n+splat_from_ptr (signed char *p_a)\n+{\n+  return (vector signed char) { *p_a, *p_a, *p_a, *p_a,\n+\t\t\t\t*p_a, *p_a, *p_a, *p_a,\n+\t\t\t\t*p_a, *p_a, *p_a, *p_a,\n+\t\t\t\t*p_a, *p_a, *p_a, *p_a };\n+}\n+\n+vector signed char\n+splat_const (void)\n+{\n+  return (vector signed char) { SPLAT, SPLAT, SPLAT, SPLAT,\n+\t\t\t\tSPLAT, SPLAT, SPLAT, SPLAT,\n+\t\t\t\tSPLAT, SPLAT, SPLAT, SPLAT,\n+\t\t\t\tSPLAT, SPLAT, SPLAT, SPLAT };\n+}\n+\n+void\n+splat_ptr (vector signed char *p, signed char a)\n+{\n+  *p = (vector signed char) { a, a, a, a, a, a, a, a,\n+\t\t\t      a, a, a, a, a, a, a, a };\n+}\n+\n+void\n+splat_static (signed char a)\n+{\n+  sp_static = (vector signed char) { a, a, a, a, a, a, a, a,\n+\t\t\t\t     a, a, a, a, a, a, a, a };\n+}\n+\n+void\n+splat_global (signed char a)\n+{\n+  sp_global = (vector signed char) { a, a, a, a, a, a, a, a,\n+\t\t\t\t     a, a, a, a, a, a, a, a };\n+}\n+\n+int main (void)\n+{\n+  vector signed char sv2, sv3;\n+\n+  check (sv);\n+\n+  check (pack_reg (ELEMENTS));\n+\n+  check (pack_from_ptr (&expected[0],  &expected[1],  &expected[2],\n+\t\t\t&expected[3],  &expected[4],  &expected[5],\n+\t\t\t&expected[6],  &expected[7],  &expected[8],\n+\t\t\t&expected[9],  &expected[10], &expected[11],\n+\t\t\t&expected[12], &expected[13], &expected[14],\n+\t\t\t&expected[15]));\n+\n+  check (pack_const ());\n+\n+  pack_ptr (&sv2, ELEMENTS);\n+  check (sv2);\n+\n+  pack_static (ELEMENTS);\n+  check (sv_static);\n+\n+  pack_global (ELEMENTS);\n+  check (sv_global);\n+\n+  check_splat (splat);\n+\n+  check_splat (splat_reg (SPLAT));\n+\n+  check_splat (splat_from_ptr (&splat_expected));\n+\n+  check_splat (splat_const ());\n+\n+  splat_ptr (&sv2, SPLAT);\n+  check_splat (sv2);\n+\n+  splat_static (SPLAT);\n+  check_splat (sp_static);\n+\n+  splat_global (SPLAT);\n+  check_splat (sp_global);\n+\n+  return 0;\n+}"}, {"sha": "14e605ca4351d6671bf0ce4ebc918fdb7c659c20", "filename": "gcc/testsuite/gcc.target/powerpc/vec-init-6.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adfa1e6b37f5b18570a6200a0784bd8074c5f1e0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adfa1e6b37f5b18570a6200a0784bd8074c5f1e0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-6.c?ref=adfa1e6b37f5b18570a6200a0784bd8074c5f1e0", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { powerpc64*-*-* && lp64 } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mcpu=power8 -O2 -mupper-regs-di\" } */\n+\n+vector int\n+merge (int a, int b, int c, int d)\n+{\n+  return (vector int) { a, b, c, d };\n+}\n+\n+/* { dg-final { scan-assembler     \"rldicr\" } } */\n+/* { dg-final { scan-assembler     \"rldicl\" } } */\n+/* { dg-final { scan-assembler     \"mtvsrd\" } } */\n+/* { dg-final { scan-assembler-not \"stw\"    } } */\n+/* { dg-final { scan-assembler-not \"lxvw4x\" } } */"}, {"sha": "b5e531ea7f126e5d997873b6b86d566f837afd0d", "filename": "gcc/testsuite/gcc.target/powerpc/vec-init-7.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adfa1e6b37f5b18570a6200a0784bd8074c5f1e0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adfa1e6b37f5b18570a6200a0784bd8074c5f1e0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-7.c?ref=adfa1e6b37f5b18570a6200a0784bd8074c5f1e0", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { powerpc64*-*-* && lp64 } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mcpu=power8 -O2 -mupper-regs-di\" } */\n+\n+vector int\n+splat (int a)\n+{\n+  return (vector int) { a, a, a, a };\n+}\n+\n+/* { dg-final { scan-assembler \"mtvsrwz\" } } */\n+/* { dg-final { scan-assembler \"xxspltw\" } } */"}, {"sha": "4393398d8a9c9b60f9fa78f1ac6856a9b1a1f916", "filename": "gcc/testsuite/gcc.target/powerpc/vec-init-8.c", "status": "added", "additions": 194, "deletions": 0, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adfa1e6b37f5b18570a6200a0784bd8074c5f1e0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adfa1e6b37f5b18570a6200a0784bd8074c5f1e0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-8.c?ref=adfa1e6b37f5b18570a6200a0784bd8074c5f1e0", "patch": "@@ -0,0 +1,194 @@\n+/* { dg-do run { target { powerpc*-*-linux* } } } */\n+/* { dg-require-effective-target vsx_hw } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+#include <stdlib.h>\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+#define ELEMENTS -1.0f, 2.0f, 0.0f, -1234.0f\n+#define SPLAT 2345.0f\n+\n+vector float sv = (vector float) { ELEMENTS };\n+vector float splat = (vector float) { SPLAT, SPLAT, SPLAT, SPLAT };\n+vector float sv_global, sp_global;\n+static vector float sv_static, sp_static;\n+static const float expected[] = { ELEMENTS };\n+\n+extern void check (vector float a)\n+  __attribute__((__noinline__));\n+\n+extern void check_splat (vector float a)\n+  __attribute__((__noinline__));\n+\n+extern vector float pack_reg (float a, float b, float c, float d)\n+  __attribute__((__noinline__));\n+\n+extern vector float pack_from_ptr (float *p_a, float *p_b,\n+\t\t\t\t   float *p_c, float *p_d)\n+  __attribute__((__noinline__));\n+\n+extern vector float pack_const (void)\n+  __attribute__((__noinline__));\n+\n+extern void pack_ptr (vector float *p, float a, float b, float c, float d)\n+  __attribute__((__noinline__));\n+\n+extern void pack_static (float a, float b, float c, float d)\n+  __attribute__((__noinline__));\n+\n+extern void pack_global (float a, float b, float c, float d)\n+  __attribute__((__noinline__));\n+\n+extern vector float splat_reg (float a)\n+  __attribute__((__noinline__));\n+\n+extern vector float splat_from_ptr (float *p)\n+  __attribute__((__noinline__));\n+\n+extern vector float splat_const (void)\n+  __attribute__((__noinline__));\n+\n+extern void splat_ptr (vector float *p, float a)\n+  __attribute__((__noinline__));\n+\n+extern void splat_static (float a)\n+  __attribute__((__noinline__));\n+\n+extern void splat_global (float a)\n+  __attribute__((__noinline__));\n+\n+void\n+check (vector float a)\n+{\n+  size_t i;\n+\n+  for (i = 0; i < 4; i++)\n+    if (vec_extract (a, i) != expected[i])\n+      abort ();\n+}\n+\n+void\n+check_splat (vector float a)\n+{\n+  size_t i;\n+\n+  for (i = 0; i < 4; i++)\n+    if (vec_extract (a, i) != SPLAT)\n+      abort ();\n+}\n+\n+vector float\n+pack_reg (float a, float b, float c, float d)\n+{\n+  return (vector float) { a, b, c, d };\n+}\n+\n+vector float\n+pack_from_ptr (float *p_a, float *p_b, float *p_c, float *p_d)\n+{\n+  return (vector float) { *p_a, *p_b, *p_c, *p_d };\n+}\n+\n+vector float\n+pack_const (void)\n+{\n+  return (vector float) { ELEMENTS };\n+}\n+\n+void\n+pack_ptr (vector float *p, float a, float b, float c, float d)\n+{\n+  *p = (vector float) { a, b, c, d };\n+}\n+\n+void\n+pack_static (float a, float b, float c, float d)\n+{\n+  sv_static = (vector float) { a, b, c, d };\n+}\n+\n+void\n+pack_global (float a, float b, float c, float d)\n+{\n+  sv_global = (vector float) { a, b, c, d };\n+}\n+\n+vector float\n+splat_reg (float a)\n+{\n+  return (vector float) { a, a, a, a };\n+}\n+\n+vector float\n+splat_from_ptr (float *p)\n+{\n+  return (vector float) { *p, *p, *p, *p };\n+}\n+\n+vector float\n+splat_const (void)\n+{\n+  return (vector float) { SPLAT, SPLAT, SPLAT, SPLAT };\n+}\n+\n+void\n+splat_ptr (vector float *p, float a)\n+{\n+  *p = (vector float) { a, a, a, a };\n+}\n+\n+void\n+splat_static (float a)\n+{\n+  sp_static = (vector float) { a, a, a, a };\n+}\n+\n+void\n+splat_global (float a)\n+{\n+  sp_global = (vector float) { a, a, a, a };\n+}\n+\n+int main (void)\n+{\n+  vector float sv2, sv3;\n+  float mem = SPLAT;\n+  float mem2[4] = { ELEMENTS };\n+\n+  check (sv);\n+\n+  check (pack_reg (ELEMENTS));\n+\n+  check (pack_from_ptr (&mem2[0], &mem2[1], &mem2[2], &mem2[3]));\n+\n+  check (pack_const ());\n+\n+  pack_ptr (&sv2, ELEMENTS);\n+  check (sv2);\n+\n+  pack_static (ELEMENTS);\n+  check (sv_static);\n+\n+  pack_global (ELEMENTS);\n+  check (sv_global);\n+\n+  check_splat (splat);\n+\n+  check_splat (splat_reg (SPLAT));\n+\n+  check_splat (splat_from_ptr (&mem));\n+\n+  check_splat (splat_const ());\n+\n+  splat_ptr (&sv2, SPLAT);\n+  check_splat (sv2);\n+\n+  splat_static (SPLAT);\n+  check_splat (sp_static);\n+\n+  splat_global (SPLAT);\n+  check_splat (sp_global);\n+\n+  return 0;\n+}"}, {"sha": "3515096627bfd7feb1baaa31940c100893d3da2e", "filename": "gcc/testsuite/gcc.target/powerpc/vec-init-9.c", "status": "added", "additions": 193, "deletions": 0, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adfa1e6b37f5b18570a6200a0784bd8074c5f1e0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adfa1e6b37f5b18570a6200a0784bd8074c5f1e0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-9.c?ref=adfa1e6b37f5b18570a6200a0784bd8074c5f1e0", "patch": "@@ -0,0 +1,193 @@\n+/* { dg-do run { target { powerpc*-*-linux* && lp64 } } } */\n+/* { dg-require-effective-target vsx_hw } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+#include <stdlib.h>\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+#define ELEMENTS -12345.0, 23456.0\n+#define SPLAT 34567.0\n+\n+vector double sv = (vector double) { ELEMENTS };\n+vector double splat = (vector double) { SPLAT, SPLAT };\n+vector double sv_global, sp_global;\n+static vector double sv_static, sp_static;\n+static const int expected[] = { ELEMENTS };\n+\n+extern void check (vector double a)\n+  __attribute__((__noinline__));\n+\n+extern void check_splat (vector double a)\n+  __attribute__((__noinline__));\n+\n+extern vector double pack_reg (double a, double b)\n+  __attribute__((__noinline__));\n+\n+extern vector double pack_from_ptr (double *p_a, double *p_b)\n+  __attribute__((__noinline__));\n+\n+extern vector double pack_const (void)\n+  __attribute__((__noinline__));\n+\n+extern void pack_ptr (vector double *p, double a, double b)\n+  __attribute__((__noinline__));\n+\n+extern void pack_static (double a, double b)\n+  __attribute__((__noinline__));\n+\n+extern void pack_global (double a, double b)\n+  __attribute__((__noinline__));\n+\n+extern vector double splat_reg (double a)\n+  __attribute__((__noinline__));\n+\n+extern vector double splat_from_ptr (double *p)\n+  __attribute__((__noinline__));\n+\n+extern vector double splat_const (void)\n+  __attribute__((__noinline__));\n+\n+extern void splat_ptr (vector double *p, double a)\n+  __attribute__((__noinline__));\n+\n+extern void splat_static (double a)\n+  __attribute__((__noinline__));\n+\n+extern void splat_global (double a)\n+  __attribute__((__noinline__));\n+\n+void\n+check (vector double a)\n+{\n+  size_t i;\n+\n+  for (i = 0; i < 2; i++)\n+    if (vec_extract (a, i) != expected[i])\n+      abort ();\n+}\n+\n+void\n+check_splat (vector double a)\n+{\n+  size_t i;\n+\n+  for (i = 0; i < 2; i++)\n+    if (vec_extract (a, i) != SPLAT)\n+      abort ();\n+}\n+\n+vector double\n+pack_reg (double a, double b)\n+{\n+  return (vector double) { a, b };\n+}\n+\n+vector double\n+pack_from_ptr (double *p_a, double *p_b)\n+{\n+  return (vector double) { *p_a, *p_b };\n+}\n+\n+vector double\n+pack_const (void)\n+{\n+  return (vector double) { ELEMENTS };\n+}\n+\n+void\n+pack_ptr (vector double *p, double a, double b)\n+{\n+  *p = (vector double) { a, b };\n+}\n+\n+void\n+pack_static (double a, double b)\n+{\n+  sv_static = (vector double) { a, b };\n+}\n+\n+void\n+pack_global (double a, double b)\n+{\n+  sv_global = (vector double) { a, b };\n+}\n+\n+vector double\n+splat_reg (double a)\n+{\n+  return (vector double) { a, a };\n+}\n+\n+vector double\n+splat_from_ptr (double *p)\n+{\n+  return (vector double) { *p, *p };\n+}\n+\n+vector double\n+splat_const (void)\n+{\n+  return (vector double) { SPLAT, SPLAT };\n+}\n+\n+void\n+splat_ptr (vector double *p, double a)\n+{\n+  *p = (vector double) { a, a };\n+}\n+\n+void\n+splat_static (double a)\n+{\n+  sp_static = (vector double) { a, a };\n+}\n+\n+void\n+splat_global (double a)\n+{\n+  sp_global = (vector double) { a, a };\n+}\n+\n+int  main (void)\n+{\n+  vector double sv2, sv3;\n+  double mem = SPLAT;\n+  double mem2[2] = { ELEMENTS };\n+\n+  check (sv);\n+\n+  check (pack_reg (ELEMENTS));\n+\n+  check (pack_from_ptr (&mem2[0], &mem2[1]));\n+\n+  check (pack_const ());\n+\n+  pack_ptr (&sv2, ELEMENTS);\n+  check (sv2);\n+\n+  pack_static (ELEMENTS);\n+  check (sv_static);\n+\n+  pack_global (ELEMENTS);\n+  check (sv_global);\n+\n+  check_splat (splat);\n+\n+  check_splat (splat_reg (SPLAT));\n+\n+  check_splat (splat_from_ptr (&mem));\n+\n+  check_splat (splat_const ());\n+\n+  splat_ptr (&sv2, SPLAT);\n+  check_splat (sv2);\n+\n+  splat_static (SPLAT);\n+  check_splat (sp_static);\n+\n+  splat_global (SPLAT);\n+  check_splat (sp_global);\n+\n+  return 0;\n+}"}]}