{"sha": "5b0ce758448e8df7d58402ec50705acd190dedb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWIwY2U3NTg0NDhlOGRmN2Q1ODQwMmVjNTA3MDVhY2QxOTBkZWRiMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-07-08T02:19:57Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-07-08T02:19:57Z"}, "message": "(expand_mult_highpart): Build constant forms of CNST1 in MODE or\nWIDE_MODE, as appropriate.\n\nFrom-SVN: r7676", "tree": {"sha": "c3c186cd24bd44bb6f2c564e575debd138538b91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3c186cd24bd44bb6f2c564e575debd138538b91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b0ce758448e8df7d58402ec50705acd190dedb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b0ce758448e8df7d58402ec50705acd190dedb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b0ce758448e8df7d58402ec50705acd190dedb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b0ce758448e8df7d58402ec50705acd190dedb0/comments", "author": null, "committer": null, "parents": [{"sha": "41b19f3e7006fa8ce67e1d09fed29dc451c2e0a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41b19f3e7006fa8ce67e1d09fed29dc451c2e0a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41b19f3e7006fa8ce67e1d09fed29dc451c2e0a3"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "72fca3ddda2be89dd7d821d517999085038edf2b", "filename": "gcc/expmed.c", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b0ce758448e8df7d58402ec50705acd190dedb0/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b0ce758448e8df7d58402ec50705acd190dedb0/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=5b0ce758448e8df7d58402ec50705acd190dedb0", "patch": "@@ -2434,9 +2434,19 @@ expand_mult_highpart (mode, op0, cnst1, target, unsignedp)\n   optab moptab;\n   rtx tem;\n   int size = GET_MODE_BITSIZE (mode);\n-  rtx op1;\n+  rtx op1, wide_op1;\n \n-  op1 = immed_double_const (cnst1,\n+  /* We can't support modes wider than HOST_BITS_PER_INT.  */\n+  if (size > HOST_BITS_PER_WIDE_INT)\n+    abort ();\n+\n+  op1 = GEN_INT (cnst1);\n+\n+  if (GET_MODE_BITSIZE (wider_mode) <= HOST_BITS_PER_INT)\n+    wide_op1 = op1;\n+  else\n+    wide_op1\n+      = immed_double_const (cnst1,\n \t\t\t    (unsignedp\n \t\t\t     ? (HOST_WIDE_INT) 0\n \t\t\t     : -(cnst1 >> (HOST_BITS_PER_WIDE_INT - 1))),\n@@ -2450,7 +2460,7 @@ expand_mult_highpart (mode, op0, cnst1, target, unsignedp)\n \t multiply.  Maybe change expand_binop to handle widening multiply?  */\n       op0 = convert_to_mode (wider_mode, op0, unsignedp);\n \n-      tem = expand_mult (wider_mode, op0, op1, NULL_RTX, unsignedp);\n+      tem = expand_mult (wider_mode, op0, wide_op1, NULL_RTX, unsignedp);\n       tem = expand_shift (RSHIFT_EXPR, wider_mode, tem,\n \t\t\t  build_int_2 (size, 0), NULL_RTX, 1);\n       return gen_lowpart (mode, tem);\n@@ -2475,7 +2485,7 @@ expand_mult_highpart (mode, op0, cnst1, target, unsignedp)\n   if (target)\n     /* We used the wrong signedness.  Adjust the result.  */\n     return expand_mult_highpart_adjust (mode, target, op0,\n-\t\t\t\t\tGEN_INT (cnst1), target, unsignedp);\n+\t\t\t\t\top1, target, unsignedp);\n \n   /* Thirdly, we try to use a widening multiplication, or a wider mode\n      multiplication.  */\n@@ -2491,7 +2501,7 @@ expand_mult_highpart (mode, op0, cnst1, target, unsignedp)\n       moptab = unsignedp ? smul_widen_optab : umul_widen_optab;\n       if (moptab->handlers[(int) wider_mode].insn_code != CODE_FOR_nothing)\n \t{\n-\t  tem = expand_binop (wider_mode, moptab, op0, op1,\n+\t  tem = expand_binop (wider_mode, moptab, op0, wide_op1,\n \t\t\t      NULL_RTX, ! unsignedp, OPTAB_WIDEN);\n \t  if (tem != 0)\n \t    {\n@@ -2500,8 +2510,7 @@ expand_mult_highpart (mode, op0, cnst1, target, unsignedp)\n \t\t\t\t  build_int_2 (size, 0), NULL_RTX, 1);\n \t      tem = gen_lowpart (mode, tem);\n \t      /* We used the wrong signedness.  Adjust the result.  */\n-\t      return expand_mult_highpart_adjust (mode, tem, op0,\n-\t\t\t\t\t\t  GEN_INT (cnst1),\n+\t      return expand_mult_highpart_adjust (mode, tem, op0, op1,\n \t\t\t\t\t\t  target, unsignedp);\n \t    }\n \t}\n@@ -2512,7 +2521,7 @@ expand_mult_highpart (mode, op0, cnst1, target, unsignedp)\n     }\n \n   /* Pass NULL_RTX as target since TARGET has wrong mode.  */\n-  tem = expand_binop (wider_mode, moptab, op0, op1,\n+  tem = expand_binop (wider_mode, moptab, op0, wide_op1,\n \t\t      NULL_RTX, unsignedp, OPTAB_WIDEN);\n   if (tem == 0)\n     return 0;"}]}