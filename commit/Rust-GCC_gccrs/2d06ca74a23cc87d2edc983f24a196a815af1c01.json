{"sha": "2d06ca74a23cc87d2edc983f24a196a815af1c01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQwNmNhNzRhMjNjYzg3ZDJlZGM5ODNmMjRhMTk2YTgxNWFmMWMwMQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2016-07-20T13:50:31Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2016-07-20T13:50:31Z"}, "message": "avr-protos.h (avr_addr_space_supported_p): New prototype.\n\ngcc/\n\t* config/avr/avr-protos.h (avr_addr_space_supported_p): New prototype.\n\t* config/avr/avr.c (TARGET_ADDR_SPACE_DIAGNOSE_USAGE): New hook\n\tdefine...\n\t(avr_addr_space_diagnose_usage): ...and implementation.\n\t(avr_addr_space_supported_p): New function.\n\t(avr_nonconst_pointer_addrspace, avr_pgm_check_var_decl): Only\n\treport bad address space usage if that space is supported.\n\t(avr_insert_attributes): Same.  No more complain about unsupported\n\taddress spaces.\n\t* config/avr/avr-c.c (tm_p.h): Include it.\n\t(avr_cpu_cpp_builtins):\tOnly define addr-space related built-in\n\tmacro if avr_addr_space_supported_p.\n\nFrom-SVN: r238519", "tree": {"sha": "ce0abd1f7dce44f3b5e61e8e4daa5a6b41940f05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce0abd1f7dce44f3b5e61e8e4daa5a6b41940f05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d06ca74a23cc87d2edc983f24a196a815af1c01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d06ca74a23cc87d2edc983f24a196a815af1c01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d06ca74a23cc87d2edc983f24a196a815af1c01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d06ca74a23cc87d2edc983f24a196a815af1c01/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b25ea150b6d2b9021f785ce4397e0ffe478b5a42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b25ea150b6d2b9021f785ce4397e0ffe478b5a42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b25ea150b6d2b9021f785ce4397e0ffe478b5a42"}], "stats": {"total": 112, "additions": 70, "deletions": 42}, "files": [{"sha": "42ffaa0e71d7614e26ca61ffef832551eee08cda", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d06ca74a23cc87d2edc983f24a196a815af1c01/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d06ca74a23cc87d2edc983f24a196a815af1c01/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d06ca74a23cc87d2edc983f24a196a815af1c01", "patch": "@@ -1,3 +1,18 @@\n+2016-07-20  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/avr-protos.h (avr_addr_space_supported_p): New prototype.\n+\t* config/avr/avr.c (TARGET_ADDR_SPACE_DIAGNOSE_USAGE): New hook\n+\tdefine...\n+\t(avr_addr_space_diagnose_usage): ...and implementation.\n+\t(avr_addr_space_supported_p): New function.\n+\t(avr_nonconst_pointer_addrspace, avr_pgm_check_var_decl): Only\n+\treport bad address space usage if that space is supported.\n+\t(avr_insert_attributes): Same.  No more complain about unsupported\n+\taddress spaces.\n+\t* config/avr/avr-c.c (tm_p.h): Include it.\n+\t(avr_cpu_cpp_builtins):\tOnly define addr-space related built-in\n+\tmacro if avr_addr_space_supported_p.\n+\n 2016-07-20  Alexander Monakov  <amonakov@ispras.ru>\n \n \t* config/nvptx/nvptx.c (nvptx_option_override): Do not set"}, {"sha": "a338a9fd8fa0e26d6f413353032d2e639a0c8ddb", "filename": "gcc/config/avr/avr-c.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d06ca74a23cc87d2edc983f24a196a815af1c01/gcc%2Fconfig%2Favr%2Favr-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d06ca74a23cc87d2edc983f24a196a815af1c01/gcc%2Fconfig%2Favr%2Favr-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-c.c?ref=2d06ca74a23cc87d2edc983f24a196a815af1c01", "patch": "@@ -26,7 +26,7 @@\n #include \"c-family/c-common.h\"\n #include \"stor-layout.h\"\n #include \"langhooks.h\"\n-\n+#include \"tm_p.h\"\n \n /* IDs for all the AVR builtins.  */\n \n@@ -253,7 +253,10 @@ avr_register_target_pragmas (void)\n   gcc_assert (ADDR_SPACE_GENERIC == ADDR_SPACE_RAM);\n \n   /* Register address spaces.  The order must be the same as in the respective\n-     enum from avr.h (or designated initializers must be used in avr.c).  */\n+     enum from avr.h (or designated initializers must be used in avr.c).\n+     We always register all address spaces even if some of them make no\n+     sense for some targets.  Diagnose for non-supported spaces will be\n+     emit by TARGET_ADDR_SPACE_DIAGNOSE_USAGE.  */\n \n   for (i = 0; i < ADDR_SPACE_COUNT; i++)\n     {\n@@ -391,10 +394,7 @@ avr_cpu_cpp_builtins (struct cpp_reader *pfile)\n             /* Only supply __FLASH<n> macro if the address space is reasonable\n                for this target.  The address space qualifier itself is still\n                supported, but using it will throw an error.  */\n-            && avr_addrspace[i].segment < avr_n_flash\n-\t    /* Only support __MEMX macro if we have LPM.  */\n-\t    && (AVR_HAVE_LPM || avr_addrspace[i].pointer_size <= 2))\n-\n+            && avr_addr_space_supported_p ((addr_space_t) i))\n           {\n             const char *name = avr_addrspace[i].name;\n             char *Name = (char*) alloca (1 + strlen (name));"}, {"sha": "9ad15725f21b8c9592968647951942c083ac6c5c", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d06ca74a23cc87d2edc983f24a196a815af1c01/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d06ca74a23cc87d2edc983f24a196a815af1c01/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=2d06ca74a23cc87d2edc983f24a196a815af1c01", "patch": "@@ -37,6 +37,7 @@ extern void avr_asm_output_aligned_decl_common (FILE*, tree, const char*, unsign\n extern void avr_asm_asm_output_aligned_bss (FILE *, tree, const char *, unsigned HOST_WIDE_INT, int, void (*) (FILE *, tree, const char *, unsigned HOST_WIDE_INT, int));\n extern void asm_output_external (FILE *file, tree decl, char *name);\n extern int avr_progmem_p (tree decl, tree attributes);\n+extern bool avr_addr_space_supported_p (addr_space_t, location_t loc = UNKNOWN_LOCATION);\n \n #ifdef RTX_CODE /* inside TREE_CODE */\n extern void avr_init_cumulative_args (CUMULATIVE_ARGS*, tree, rtx, tree);"}, {"sha": "6553cd822439de4d96f435d370a28a139f40cd61", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 48, "deletions": 36, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d06ca74a23cc87d2edc983f24a196a815af1c01/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d06ca74a23cc87d2edc983f24a196a815af1c01/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=2d06ca74a23cc87d2edc983f24a196a815af1c01", "patch": "@@ -9148,6 +9148,42 @@ avr_attribute_table[] =\n };\n \n \n+/* Return true if we support address space AS for the architecture in effect\n+   and false, otherwise.  If LOC is not UNKNOWN_LOCATION then also issue\n+   a respective error.  */\n+   \n+bool\n+avr_addr_space_supported_p (addr_space_t as, location_t loc)\n+{\n+  if (AVR_TINY)\n+    {\n+      if (loc != UNKNOWN_LOCATION)\n+        error_at (loc, \"address spaces are not supported for reduced \"\n+                  \"Tiny devices\");\n+      return false;\n+    }\n+  else if (avr_addrspace[as].segment >= avr_n_flash)\n+    {\n+      if (loc != UNKNOWN_LOCATION)\n+        error_at (loc, \"address space %qs not supported for devices with \"\n+                  \"flash size up to %d KiB\", avr_addrspace[as].name,\n+                  64 * avr_n_flash);\n+      return false;\n+    }\n+\n+  return true;\n+}\n+\n+\n+/* Implement `TARGET_ADDR_SPACE_DIAGNOSE_USAGE'.  */\n+\n+static void\n+avr_addr_space_diagnose_usage (addr_space_t as, location_t loc)\n+{\n+  (void) avr_addr_space_supported_p (as, loc);\n+}\n+\n+\n /* Look if DECL shall be placed in program memory space by\n    means of attribute `progmem' or some address-space qualifier.\n    Return non-zero if DECL is data that must end up in Flash and\n@@ -9218,16 +9254,13 @@ avr_nonconst_pointer_addrspace (tree typ)\n       while (TREE_CODE (target) == ARRAY_TYPE)\n         target = TREE_TYPE (target);\n \n-      /* Pointers to non-generic address space must be const.\n-         Refuse address spaces outside the device's flash.  */\n+      /* Pointers to non-generic address space must be const.  */\n \n       as = TYPE_ADDR_SPACE (target);\n \n       if (!ADDR_SPACE_GENERIC_P (as)\n-          && (!TYPE_READONLY (target)\n-              || avr_addrspace[as].segment >= avr_n_flash\n-\t      /* Also refuse __memx address space if we can't support it.  */\n-\t      || (!AVR_HAVE_LPM && avr_addrspace[as].pointer_size > 2)))\n+          && !TYPE_READONLY (target)\n+          && avr_addr_space_supported_p (as))\n         {\n           return as;\n         }\n@@ -9291,25 +9324,13 @@ avr_pgm_check_var_decl (tree node)\n \n   if (reason)\n     {\n-      if (avr_addrspace[as].segment >= avr_n_flash)\n-        {\n-          if (TYPE_P (node))\n-            error (\"%qT uses address space %qs beyond flash of %d KiB\",\n-                   node, avr_addrspace[as].name, 64 * avr_n_flash);\n-          else\n-            error (\"%s %q+D uses address space %qs beyond flash of %d KiB\",\n-                   reason, node, avr_addrspace[as].name, 64 * avr_n_flash);\n-        }\n+      if (TYPE_P (node))\n+        error (\"pointer targeting address space %qs must be const in %qT\",\n+               avr_addrspace[as].name, node);\n       else\n-        {\n-          if (TYPE_P (node))\n-            error (\"pointer targeting address space %qs must be const in %qT\",\n-                   avr_addrspace[as].name, node);\n-          else\n-            error (\"pointer targeting address space %qs must be const\"\n-                   \" in %s %q+D\",\n-                   avr_addrspace[as].name, reason, node);\n-        }\n+        error (\"pointer targeting address space %qs must be const\"\n+               \" in %s %q+D\",\n+               avr_addrspace[as].name, reason, node);\n     }\n \n   return reason == NULL;\n@@ -9342,18 +9363,6 @@ avr_insert_attributes (tree node, tree *attributes)\n \n       as = TYPE_ADDR_SPACE (TREE_TYPE (node));\n \n-      if (avr_addrspace[as].segment >= avr_n_flash)\n-        {\n-          error (\"variable %q+D located in address space %qs beyond flash \"\n-                 \"of %d KiB\", node, avr_addrspace[as].name, 64 * avr_n_flash);\n-        }\n-      else if (!AVR_HAVE_LPM && avr_addrspace[as].pointer_size > 2)\n-\t{\n-          error (\"variable %q+D located in address space %qs\"\n-                 \" which is not supported for architecture %qs\",\n-                 node, avr_addrspace[as].name, avr_arch->name);\n-\t}\n-\n       if (!TYPE_READONLY (node0)\n           && !TREE_READONLY (node))\n         {\n@@ -13728,6 +13737,9 @@ avr_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED, tree *arg,\n #undef  TARGET_ADDR_SPACE_LEGITIMIZE_ADDRESS\n #define TARGET_ADDR_SPACE_LEGITIMIZE_ADDRESS avr_addr_space_legitimize_address\n \n+#undef  TARGET_ADDR_SPACE_DIAGNOSE_USAGE\n+#define TARGET_ADDR_SPACE_DIAGNOSE_USAGE avr_addr_space_diagnose_usage\n+\n #undef  TARGET_MODE_DEPENDENT_ADDRESS_P\n #define TARGET_MODE_DEPENDENT_ADDRESS_P avr_mode_dependent_address_p\n "}]}