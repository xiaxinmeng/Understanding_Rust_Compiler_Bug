{"sha": "860dadcbeac42219978ccc320ef13a5afa56138b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYwZGFkY2JlYWM0MjIxOTk3OGNjYzMyMGVmMTNhNWFmYTU2MTM4Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-01-13T19:12:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-01-13T19:12:47Z"}, "message": "re PR rtl-optimization/64286 (Redundant extend removal ignores vector element type)\n\n\tPR rtl-optimization/64286\n\t* ree.c (combine_reaching_defs): Move part of comment earlier,\n\tremove !SCALAR_INT_MODE_P check.\n\t(add_removable_extension): Don't add vector mode\n\textensions if all uses of the source register aren't the same\n\tvector extensions.\n\n\t* gcc.target/i386/avx2-pr64286.c: New test.\n\nFrom-SVN: r219550", "tree": {"sha": "9195e2668a728ec9e560e43a016f488af5350d77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9195e2668a728ec9e560e43a016f488af5350d77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/860dadcbeac42219978ccc320ef13a5afa56138b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/860dadcbeac42219978ccc320ef13a5afa56138b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/860dadcbeac42219978ccc320ef13a5afa56138b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/860dadcbeac42219978ccc320ef13a5afa56138b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e5a37dae73dc82c735d85f5d1f835f91cd36352", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e5a37dae73dc82c735d85f5d1f835f91cd36352", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e5a37dae73dc82c735d85f5d1f835f91cd36352"}], "stats": {"total": 126, "additions": 114, "deletions": 12}, "files": [{"sha": "725d7a6ca67d0824c9cdf529f4ac27020c29c117", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860dadcbeac42219978ccc320ef13a5afa56138b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860dadcbeac42219978ccc320ef13a5afa56138b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=860dadcbeac42219978ccc320ef13a5afa56138b", "patch": "@@ -1,3 +1,12 @@\n+2015-01-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/64286\n+\t* ree.c (combine_reaching_defs): Move part of comment earlier,\n+\tremove !SCALAR_INT_MODE_P check.\n+\t(add_removable_extension): Don't add vector mode\n+\textensions if all uses of the source register aren't the same\n+\tvector extensions.\n+\n 2015-01-13  Renlin Li  <renlin.li@arm.com>\n \n \t* config/arm/arm.h (CLZ_DEFINED_VALUE_AT_ZERO): Return 2."}, {"sha": "2fea2c880cf7aa6133f04a0b487ed6cf414f2dba", "filename": "gcc/ree.c", "status": "modified", "additions": 63, "deletions": 12, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860dadcbeac42219978ccc320ef13a5afa56138b/gcc%2Free.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860dadcbeac42219978ccc320ef13a5afa56138b/gcc%2Free.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Free.c?ref=860dadcbeac42219978ccc320ef13a5afa56138b", "patch": "@@ -783,6 +783,17 @@ combine_reaching_defs (ext_cand *cand, const_rtx set_pat, ext_state *state)\n        != REGNO (get_extended_src_reg (SET_SRC (PATTERN (cand->insn)))));\n   if (copy_needed)\n     {\n+      /* Considering transformation of\n+\t (set (reg1) (expression))\n+\t ...\n+\t (set (reg2) (any_extend (reg1)))\n+\n+\t into\n+\n+\t (set (reg2) (any_extend (expression)))\n+\t (set (reg1) (reg2))\n+\t ...  */\n+\n       /* In theory we could handle more than one reaching def, it\n \t just makes the code to update the insn stream more complex.  */\n       if (state->defs_list.length () != 1)\n@@ -798,18 +809,6 @@ combine_reaching_defs (ext_cand *cand, const_rtx set_pat, ext_state *state)\n       if (state->modified[INSN_UID (cand->insn)].kind != EXT_MODIFIED_NONE)\n \treturn false;\n \n-      /* Transformation of\n-\t (set (reg1) (expression))\n-\t (set (reg2) (any_extend (reg1)))\n-\t into\n-\t (set (reg2) (any_extend (expression)))\n-\t (set (reg1) (reg2))\n-\t is only valid for scalar integral modes, as it relies on the low\n-\t subreg of reg1 to have the value of (expression), which is not true\n-\t e.g. for vector modes.  */\n-      if (!SCALAR_INT_MODE_P (GET_MODE (SET_DEST (PATTERN (cand->insn)))))\n-\treturn false;\n-\n       machine_mode dst_mode = GET_MODE (SET_DEST (PATTERN (cand->insn)));\n       rtx src_reg = get_extended_src_reg (SET_SRC (PATTERN (cand->insn)));\n \n@@ -1027,6 +1026,7 @@ add_removable_extension (const_rtx expr, rtx_insn *insn,\n \t different extension.  FIXME: this obviously can be improved.  */\n       for (def = defs; def; def = def->next)\n \tif ((idx = def_map[INSN_UID (DF_REF_INSN (def->ref))])\n+\t    && idx != -1U\n \t    && (cand = &(*insn_list)[idx - 1])\n \t    && cand->code != code)\n \t  {\n@@ -1038,6 +1038,57 @@ add_removable_extension (const_rtx expr, rtx_insn *insn,\n \t      }\n \t    return;\n \t  }\n+\t/* For vector mode extensions, ensure that all uses of the\n+\t   XEXP (src, 0) register are the same extension (both code\n+\t   and to which mode), as unlike integral extensions lowpart\n+\t   subreg of the sign/zero extended register are not equal\n+\t   to the original register, so we have to change all uses or\n+\t   none.  */\n+\telse if (VECTOR_MODE_P (GET_MODE (XEXP (src, 0))))\n+\t  {\n+\t    if (idx == 0)\n+\t      {\n+\t\tstruct df_link *ref_chain, *ref_link;\n+\n+\t\tref_chain = DF_REF_CHAIN (def->ref);\n+\t\tfor (ref_link = ref_chain; ref_link; ref_link = ref_link->next)\n+\t\t  {\n+\t\t    if (ref_link->ref == NULL\n+\t\t\t|| DF_REF_INSN_INFO (ref_link->ref) == NULL)\n+\t\t      {\n+\t\t\tidx = -1U;\n+\t\t\tbreak;\n+\t\t      }\n+\t\t    rtx_insn *use_insn = DF_REF_INSN (ref_link->ref);\n+\t\t    const_rtx use_set;\n+\t\t    if (use_insn == insn || DEBUG_INSN_P (use_insn))\n+\t\t      continue;\n+\t\t    if (!(use_set = single_set (use_insn))\n+\t\t\t|| !REG_P (SET_DEST (use_set))\n+\t\t\t|| GET_MODE (SET_DEST (use_set)) != GET_MODE (dest)\n+\t\t\t|| GET_CODE (SET_SRC (use_set)) != code\n+\t\t\t|| !rtx_equal_p (XEXP (SET_SRC (use_set), 0),\n+\t\t\t\t\t XEXP (src, 0)))\n+\t\t      {\n+\t\t\tidx = -1U;\n+\t\t\tbreak;\n+\t\t      }\n+\t\t  }\n+\t\tif (idx == -1U)\n+\t\t  def_map[INSN_UID (DF_REF_INSN (def->ref))] = idx;\n+\t      }\n+\t    if (idx == -1U)\n+\t      {\n+\t\tif (dump_file)\n+\t\t  {\n+\t\t    fprintf (dump_file, \"Cannot eliminate extension:\\n\");\n+\t\t    print_rtl_single (dump_file, insn);\n+\t\t    fprintf (dump_file,\n+\t\t\t     \" because some vector uses aren't extension\\n\");\n+\t\t  }\n+\t\treturn;\n+\t      }\n+\t  }\n \n       /* Then add the candidate to the list and insert the reaching definitions\n          into the definition map.  */"}, {"sha": "3263f13c58dd4d02fd7a661e27a7017c10b9fac3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860dadcbeac42219978ccc320ef13a5afa56138b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860dadcbeac42219978ccc320ef13a5afa56138b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=860dadcbeac42219978ccc320ef13a5afa56138b", "patch": "@@ -1,3 +1,8 @@\n+2015-01-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/64286\n+\t* gcc.target/i386/avx2-pr64286.c: New test.\n+\n 2015-01-13  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/57626"}, {"sha": "2edb3210c4b810a59bb501c8c850b3e6b9c1d689", "filename": "gcc/testsuite/gcc.target/i386/avx2-pr64286.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860dadcbeac42219978ccc320ef13a5afa56138b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr64286.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860dadcbeac42219978ccc320ef13a5afa56138b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr64286.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr64286.c?ref=860dadcbeac42219978ccc320ef13a5afa56138b", "patch": "@@ -0,0 +1,37 @@\n+/* PR rtl-optimization/64286 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include <string.h>\n+#include <stdlib.h>\n+#include <x86intrin.h>\n+#include \"avx2-check.h\"\n+\n+__m128i v;\n+__m256i w;\n+\n+__attribute__((noinline, noclone)) void\n+foo (__m128i *p, __m128i *q)\n+{\n+  __m128i a = _mm_loadu_si128 (p);\n+  __m128i b = _mm_xor_si128 (a, v);\n+  w = _mm256_cvtepu8_epi16 (a);\n+  *q = b;\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  v = _mm_set1_epi8 (0x40);\n+  __m128i c = _mm_set_epi8 (16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\n+  __m128i d;\n+  foo (&c, &d);\n+  __m128i e = _mm_set_epi8 (0x50, 0x4f, 0x4e, 0x4d, 0x4c, 0x4b, 0x4a, 0x49,\n+\t\t\t    0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41);\n+  __m256i f = _mm256_set_epi16 (16, 15, 14, 13, 12, 11, 10, 9,\n+\t\t\t\t8, 7, 6, 5, 4, 3, 2, 1);\n+  if (memcmp (&w, &f, sizeof (w)) != 0\n+      || memcmp (&d, &e, sizeof (d)) != 0)\n+    abort ();\n+}"}]}