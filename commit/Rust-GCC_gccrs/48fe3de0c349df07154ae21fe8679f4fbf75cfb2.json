{"sha": "48fe3de0c349df07154ae21fe8679f4fbf75cfb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhmZTNkZTBjMzQ5ZGYwNzE1NGFlMjFmZTg2NzlmNGZiZjc1Y2ZiMg==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-07-13T20:50:03Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-07-13T20:50:03Z"}, "message": "std_sstream.h (basic_stringbuf::basic_stringbuf(string): Initialize _M_string with pointer-and-size constructor, not just pointer.\n\n2001-07-13  Phil Edwards  <pme@sources.redhat.com>\n\n\t* include/bits/std_sstream.h (basic_stringbuf::basic_stringbuf(string):\n\tInitialize _M_string with pointer-and-size constructor, not just\n\tpointer.  Fix some comments.\n\t* testsuite/21_strings/ctor_copy_dtor.cc (test03):  New test.\n\t* testsuite/27_io/stringbuf.cc (test02):  Remove unused variable.\n\t(test03):  Add embedded-NUL tests.\n\n\t* mkcheck.in:  When printing totals, match the order of the tests.\n\t* include/bits/stringfwd.h:  Use same declaration keywords.\n\t* include/bits/std_iosfwd.h:  Cosmetic spacing.\n\nFrom-SVN: r43996", "tree": {"sha": "9e6bd6316733f859c1eb00974c8f19d617cb95f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e6bd6316733f859c1eb00974c8f19d617cb95f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48fe3de0c349df07154ae21fe8679f4fbf75cfb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48fe3de0c349df07154ae21fe8679f4fbf75cfb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48fe3de0c349df07154ae21fe8679f4fbf75cfb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48fe3de0c349df07154ae21fe8679f4fbf75cfb2/comments", "author": null, "committer": null, "parents": [{"sha": "59387d2e310983bced3bf86cb759a1dbc1520277", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59387d2e310983bced3bf86cb759a1dbc1520277", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59387d2e310983bced3bf86cb759a1dbc1520277"}], "stats": {"total": 63, "additions": 53, "deletions": 10}, "files": [{"sha": "306c62453f089d2957ec0c8c515b4193d759835a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48fe3de0c349df07154ae21fe8679f4fbf75cfb2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48fe3de0c349df07154ae21fe8679f4fbf75cfb2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=48fe3de0c349df07154ae21fe8679f4fbf75cfb2", "patch": "@@ -1,3 +1,16 @@\n+2001-07-13  Phil Edwards  <pme@sources.redhat.com>\n+\n+\t* include/bits/std_sstream.h (basic_stringbuf::basic_stringbuf(string):\n+\tInitialize _M_string with pointer-and-size constructor, not just\n+\tpointer.  Fix some comments.\n+\t* testsuite/21_strings/ctor_copy_dtor.cc (test03):  New test.\n+\t* testsuite/27_io/stringbuf.cc (test02):  Remove unused variable.\n+\t(test03):  Add embedded-NUL tests.\n+\n+\t* mkcheck.in:  When printing totals, match the order of the tests.\n+\t* include/bits/stringfwd.h:  Use same declaration keywords.\n+\t* include/bits/std_iosfwd.h:  Cosmetic spacing.\n+\n 2001-07-13  Stephen M. Webb  <stephen@bregmasoft.com>\n             Loren J. Rittle  <ljrittle@acm.org>\n             Phil Edwards  <pme@sources.redhat.com>"}, {"sha": "9d2dbc2a2d187ec3250c911aeff5ee6cd6be66d6", "filename": "libstdc++-v3/include/bits/std_iosfwd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48fe3de0c349df07154ae21fe8679f4fbf75cfb2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iosfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48fe3de0c349df07154ae21fe8679f4fbf75cfb2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iosfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iosfwd.h?ref=48fe3de0c349df07154ae21fe8679f4fbf75cfb2", "patch": "@@ -100,7 +100,7 @@ namespace std\n   typedef basic_ios<char> \t\tios;\n   typedef basic_streambuf<char> \tstreambuf;\n   typedef basic_istream<char> \t\tistream;\n-   typedef basic_ostream<char> \t\tostream;\n+  typedef basic_ostream<char> \t\tostream;\n   typedef basic_iostream<char> \t\tiostream;\n   typedef basic_stringbuf<char> \tstringbuf;\n   typedef basic_istringstream<char> \tistringstream;"}, {"sha": "8baeb06c4931d94435a853d2600d4b6eeed1fc80", "filename": "libstdc++-v3/include/bits/std_sstream.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48fe3de0c349df07154ae21fe8679f4fbf75cfb2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_sstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48fe3de0c349df07154ae21fe8679f4fbf75cfb2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_sstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_sstream.h?ref=48fe3de0c349df07154ae21fe8679f4fbf75cfb2", "patch": "@@ -75,7 +75,7 @@ namespace std\n       explicit \n       basic_stringbuf(const __string_type& __str,\n \t\t      ios_base::openmode __mode = ios_base::in | ios_base::out)\n-      : __streambuf_type(), _M_string(__str.c_str())\n+      : __streambuf_type(), _M_string(__str.data(), __str.size())\n       { _M_stringbuf_init(__mode); }\n \n       // Get and set:\n@@ -84,7 +84,7 @@ namespace std\n       {\n \tif (_M_mode & ios_base::out)\n \t  {\n-\t    // This is the deal: _M_string.size() is value that\n+\t    // This is the deal: _M_string.size() is a value that\n \t    // represents the size of the intial string that makes\n \t    // _M_string, and may not be the correct size of the\n \t    // current stringbuf internal buffer.\n@@ -116,7 +116,7 @@ namespace std\n \t// re-allocation of the internal string object, _M_string.\n \t_M_buf_size = _M_string.size();\n \n-\t// NB: Start ostringstream buffers at 1024 bytes. This is an\n+\t// NB: Start ostringstream buffers at 512 bytes. This is an\n \t// experimental value (pronounced \"arbitrary\" in some of the\n \t// hipper english-speaking countries), and can be changed to\n \t// suite particular needs."}, {"sha": "dd8bbe56c0b85023f524d31ba5cea4d7271e403e", "filename": "libstdc++-v3/include/bits/stringfwd.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48fe3de0c349df07154ae21fe8679f4fbf75cfb2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48fe3de0c349df07154ae21fe8679f4fbf75cfb2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h?ref=48fe3de0c349df07154ae21fe8679f4fbf75cfb2", "patch": "@@ -43,9 +43,9 @@ namespace std\n   template<class _CharT>\n     struct char_traits;\n   \n-  template<> class char_traits<char>;\n+  template<> struct char_traits<char>;\n #ifdef _GLIBCPP_USE_WCHAR_T\n-  template<> class char_traits<wchar_t>;\n+  template<> struct char_traits<wchar_t>;\n #endif\n \n   template<typename _Alloc> "}, {"sha": "6d9ef1df914880177be61cd547d90f1c2a7d99ed", "filename": "libstdc++-v3/mkcheck.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48fe3de0c349df07154ae21fe8679f4fbf75cfb2/libstdc%2B%2B-v3%2Fmkcheck.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48fe3de0c349df07154ae21fe8679f4fbf75cfb2/libstdc%2B%2B-v3%2Fmkcheck.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmkcheck.in?ref=48fe3de0c349df07154ae21fe8679f4fbf75cfb2", "patch": "@@ -436,7 +436,7 @@ TEST_TIME_END=$($TIMER_COMMAND)\n # grep can count faster than we can...\n total_failures=`expr ${shared_fail} + ${static_fail}`\n total_successes=`expr ${shared_pass} + ${static_pass}`\n-resultstext=\"pass/fail results:  ${shared_pass}/${shared_fail} shared + ${static_pass}/${static_fail} static = ${total_successes}/${total_failures} total\"\n+resultstext=\"pass/fail results:  ${static_pass}/${static_fail} static + ${shared_pass}/${shared_fail} shared = ${total_successes}/${total_failures} total\"\n if [ $total_failures -eq 0 ]; then\n     resultstext=\"${resultstext}, WIN WIN\"\n fi"}, {"sha": "3274d0dfc6bc5ddebc30c66ee855448be843589c", "filename": "libstdc++-v3/testsuite/21_strings/ctor_copy_dtor.cc", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48fe3de0c349df07154ae21fe8679f4fbf75cfb2/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fctor_copy_dtor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48fe3de0c349df07154ae21fe8679f4fbf75cfb2/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fctor_copy_dtor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fctor_copy_dtor.cc?ref=48fe3de0c349df07154ae21fe8679f4fbf75cfb2", "patch": "@@ -1,6 +1,6 @@\n // 1999-06-04 bkoz\n \n-// Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -176,9 +176,28 @@ void test02()\n #endif\n }\n \n+void test03()\n+{\n+  bool test = true;\n+  const char* with_nulls = \"This contains \\0 a zero byte.\";\n+\n+  // These are tests to see how basic_string handles data with NUL\n+  // bytes.  Obviously basic_string(char*) will halt at the first one, but\n+  // nothing else should.\n+  std::string s1 (with_nulls, 28);\n+  VERIFY( s1.size() == 28 );\n+  std::string s2 (s1);\n+  VERIFY( s2.size() == 28 );\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+}\n+\n int main()\n { \n   test01();\n   test02();\n+  test03();\n   return 0;\n }"}, {"sha": "4ab65758d4b39613c1f90993c2cd2ff370024115", "filename": "libstdc++-v3/testsuite/27_io/stringbuf.cc", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48fe3de0c349df07154ae21fe8679f4fbf75cfb2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstringbuf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48fe3de0c349df07154ae21fe8679f4fbf75cfb2/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstringbuf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstringbuf.cc?ref=48fe3de0c349df07154ae21fe8679f4fbf75cfb2", "patch": "@@ -1,6 +1,6 @@\n // 981208 bkoz test functionality of basic_stringbuf for char_type == char\n \n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997-2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -54,7 +54,6 @@ bool test02() {\n // test member functions\n bool test03() {\n   bool test = true;\n-  std::string str_tmp;\n \n   //stringbuf::str()\n   VERIFY( strb_01.str() == str_01 );\n@@ -72,6 +71,18 @@ bool test03() {\n   VERIFY( str_01.length() == d1 );  \n   VERIFY( strb_01.str() == strb_03.str() ); //ditto\n \n+  // stringbuf::str(string&) and stringbuf::stringbuf(string&), where the\n+  // string in question contains embedded NUL characters.  Note that in this\n+  // embedded-NUL situation, the size must be passed to the string ctor.\n+  std::string str_nulls (\"eschew \\0 obfuscation\", 20);  // tested in 21_strings\n+  std::stringbuf strb_normal (str_01);\n+  std::stringbuf strb_nulls (str_nulls);\n+  strb_normal.str(str_nulls);  // tried using 'strb_01' rather than declaring\n+                               // another variable, but then test04 broke!\n+  VERIFY( strb_nulls.in_avail() == str_nulls.size()  );\n+  VERIFY( strb_nulls.str().size() == 20              );\n+  VERIFY( strb_normal.in_avail() == str_nulls.size() );\n+\n #ifdef DEBUG_ASSERT\n   assert(test);\n #endif"}]}