{"sha": "4f7461b1fdbc0325f1ad17d71d678f6f27d15d16", "node_id": "C_kwDOANBUbNoAKDRmNzQ2MWIxZmRiYzAzMjVmMWFkMTdkNzFkNjc4ZjZmMjdkMTVkMTY", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-04-11T14:24:09Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-04-19T08:48:33Z"}, "message": "libproc_macro: Add member functions to Literal\n\nAdd some member functions to the Literal structure as well as named\nconstructors.\n\nChangeLog:\n\n\t* libgrust/libproc_macro/literal.cc (Literal__string): Add call\n\tto named constructor.\n\t(Literal__byte_string): Likewise.\n\t(Literal::make_unsigned): Add function.\n\t(Literal::make_signed): Add function.\n\t(Literal::clone): Likewise.\n\t(Literal::make_u8): Likewise.\n\t(Literal::make_u16): Likewise.\n\t(Literal::make_u32): Likewise.\n\t(Literal::make_u64): Likewise.\n\t(Literal::make_i8): Likewise.\n\t(Literal::make_i16): Likewise.\n\t(Literal::make_i32): Likewise.\n\t(Literal::make_i64): Likewise.\n\t(Literal::make_string): Likewise.\n\t(Literal::make_byte_string): Likewise.\n\t(Literal::make_f32): Likewise.\n\t(Literal::make_f64): Likewise.\n\t(make_char): Likewise.\n\t(Literal::make_char): Likewise.\n\t(make_usize): Likewise.\n\t(Literal::make_usize): Likewise.\n\t(make_isize): Likewise.\n\t(Literal::make_isize): Likewise.\n\t* libgrust/libproc_macro/literal.h: Add prototypes.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "1f41d45a83d027b4f2202ef8782a8a71adbba81b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f41d45a83d027b4f2202ef8782a8a71adbba81b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f7461b1fdbc0325f1ad17d71d678f6f27d15d16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f7461b1fdbc0325f1ad17d71d678f6f27d15d16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f7461b1fdbc0325f1ad17d71d678f6f27d15d16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f7461b1fdbc0325f1ad17d71d678f6f27d15d16/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b5f58352b3995d0432667c35c1a5308d68b6932", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b5f58352b3995d0432667c35c1a5308d68b6932", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b5f58352b3995d0432667c35c1a5308d68b6932"}], "stats": {"total": 244, "additions": 237, "deletions": 7}, "files": [{"sha": "aad7090d7ab3c196ad87aee45ab150dd339b32e8", "filename": "libgrust/libproc_macro/literal.cc", "status": "modified", "additions": 206, "deletions": 7, "changes": 213, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f7461b1fdbc0325f1ad17d71d678f6f27d15d16/libgrust%2Flibproc_macro%2Fliteral.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f7461b1fdbc0325f1ad17d71d678f6f27d15d16/libgrust%2Flibproc_macro%2Fliteral.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2Fliteral.cc?ref=4f7461b1fdbc0325f1ad17d71d678f6f27d15d16", "patch": "@@ -25,7 +25,6 @@\n #include <cstdlib>\n \n namespace Literal {\n-\n extern \"C\" {\n \n void\n@@ -54,6 +53,164 @@ Literal__drop (Literal *lit)\n \n Literal\n Literal__string (const unsigned char *str, std::uint64_t len)\n+{\n+  return Literal::make_string (str, len);\n+}\n+\n+Literal\n+Literal__byte_string (const std::uint8_t *bytes, std::uint64_t len)\n+{\n+  return Literal::make_byte_string (bytes, len);\n+}\n+\n+bool\n+Literal__from_string (const unsigned char *str, std::uint64_t len, Literal *lit)\n+{\n+  // FIXME: implement this function with parser\n+  std::abort ();\n+  return false;\n+}\n+}\n+\n+Literal\n+Literal::make_unsigned (UnsignedSuffixPayload p)\n+{\n+  LiteralPayload payload;\n+  payload.unsigned_payload = p;\n+  return {UNSIGNED, payload};\n+}\n+\n+Literal\n+Literal::make_signed (SignedSuffixPayload p)\n+{\n+  LiteralPayload payload;\n+  payload.signed_payload = p;\n+  return {SIGNED, payload};\n+}\n+\n+Literal\n+Literal::clone () const\n+{\n+  Literal lit = *this;\n+  switch (this->tag)\n+    {\n+    case STRING:\n+      lit.payload.string_payload.data\n+\t= new unsigned char[lit.payload.string_payload.len];\n+      std::memcpy (lit.payload.string_payload.data,\n+\t\t   this->payload.string_payload.data,\n+\t\t   lit.payload.string_payload.len);\n+      break;\n+    case BYTE_STRING:\n+      lit.payload.byte_string_payload.data\n+\t= new uint8_t[lit.payload.byte_string_payload.size];\n+      std::memcpy (lit.payload.byte_string_payload.data,\n+\t\t   this->payload.byte_string_payload.data,\n+\t\t   lit.payload.byte_string_payload.size);\n+      break;\n+    default:\n+      break;\n+    }\n+  return lit;\n+}\n+\n+Literal\n+Literal::make_u8 (std::uint8_t value, bool suffixed)\n+{\n+  UnsignedPayload unsigned_payload;\n+  unsigned_payload.unsigned8 = value;\n+  Unsigned val{UNSIGNED_8, unsigned_payload};\n+  UnsignedSuffixPayload payload{val, suffixed};\n+\n+  return make_unsigned (payload);\n+}\n+\n+Literal\n+Literal::make_u16 (std::uint16_t value, bool suffixed)\n+{\n+  UnsignedPayload unsigned_payload;\n+  unsigned_payload.unsigned16 = value;\n+  Unsigned val{UNSIGNED_16, unsigned_payload};\n+  UnsignedSuffixPayload payload{val, suffixed};\n+\n+  return make_unsigned (payload);\n+}\n+\n+Literal\n+Literal::make_u32 (std::uint32_t value, bool suffixed)\n+{\n+  UnsignedPayload unsigned_payload;\n+  unsigned_payload.unsigned32 = value;\n+  Unsigned val{UNSIGNED_32, unsigned_payload};\n+  UnsignedSuffixPayload payload{val, suffixed};\n+\n+  return make_unsigned (payload);\n+}\n+\n+Literal\n+Literal::make_u64 (std::uint64_t value, bool suffixed)\n+{\n+  UnsignedPayload unsigned_payload;\n+  unsigned_payload.unsigned64 = value;\n+  Unsigned val{UNSIGNED_64, unsigned_payload};\n+  UnsignedSuffixPayload payload{val, suffixed};\n+\n+  return make_unsigned (payload);\n+}\n+\n+Literal\n+Literal::make_i8 (std::int8_t value, bool suffixed)\n+{\n+  SignedPayload signed_payload;\n+  signed_payload.signed8 = value;\n+  Signed val{SIGNED_8, signed_payload};\n+  SignedSuffixPayload payload{val, suffixed};\n+\n+  return make_signed (payload);\n+}\n+\n+Literal\n+Literal::make_i16 (std::int16_t value, bool suffixed)\n+{\n+  SignedPayload signed_payload;\n+  signed_payload.signed16 = value;\n+  Signed val{SIGNED_16, signed_payload};\n+  SignedSuffixPayload payload{val, suffixed};\n+\n+  return make_signed (payload);\n+}\n+\n+Literal\n+Literal::make_i32 (std::int32_t value, bool suffixed)\n+{\n+  SignedPayload signed_payload;\n+  signed_payload.signed32 = value;\n+  Signed val{SIGNED_32, signed_payload};\n+  SignedSuffixPayload payload = {val, suffixed};\n+\n+  return make_signed (payload);\n+}\n+\n+Literal\n+Literal::make_i64 (std::int64_t value, bool suffixed)\n+{\n+  SignedPayload signed_payload;\n+  signed_payload.signed64 = value;\n+  Signed val{SIGNED_64, signed_payload};\n+  SignedSuffixPayload payload{val, suffixed};\n+\n+  return make_signed (payload);\n+}\n+\n+Literal\n+Literal::make_string (const std::string &str)\n+{\n+  return make_string (reinterpret_cast<const unsigned char *> (str.c_str ()),\n+\t\t      str.length ());\n+}\n+\n+Literal\n+Literal::make_string (const unsigned char *str, std::uint64_t len)\n {\n   unsigned char *data = new unsigned char[len];\n   StringPayload str_payload = {data, len};\n@@ -64,7 +221,13 @@ Literal__string (const unsigned char *str, std::uint64_t len)\n }\n \n Literal\n-Literal__byte_string (const std::uint8_t *bytes, std::uint64_t len)\n+Literal::make_byte_string (const std::vector<std::uint8_t> &vec)\n+{\n+  return make_byte_string (vec.data (), vec.size ());\n+}\n+\n+Literal\n+Literal::make_byte_string (const std::uint8_t *bytes, std::uint64_t len)\n {\n   std::uint8_t *data = new std::uint8_t[len];\n   ByteStringPayload bstr_payload = {data, len};\n@@ -74,12 +237,48 @@ Literal__byte_string (const std::uint8_t *bytes, std::uint64_t len)\n   return {BYTE_STRING, payload};\n }\n \n-bool\n-Literal__from_string (const unsigned char *str, std::uint64_t len, Literal *lit)\n+Literal\n+Literal::make_f32 (float value, bool suffixed)\n {\n-  // FIXME: implement this function with parser\n-  std::abort ();\n-  return false;\n+  Float32Payload f{value, suffixed};\n+  LiteralPayload payload;\n+  payload.float32_payload = f;\n+  return {FLOAT32, payload};\n }\n+\n+Literal\n+Literal::make_f64 (double value, bool suffixed)\n+{\n+  Float64Payload f{value, suffixed};\n+  LiteralPayload payload;\n+  payload.float64_payload = f;\n+  return {FLOAT64, payload};\n }\n+\n+Literal\n+Literal::make_char (std::uint32_t ch)\n+{\n+  LiteralPayload payload;\n+  payload.char_payload = ch;\n+  return {CHAR, payload};\n+}\n+\n+Literal\n+Literal::make_usize (std::uint64_t value, bool suffixed)\n+{\n+  UsizePayload p{value, suffixed};\n+  LiteralPayload payload;\n+  payload.usize_payload = p;\n+  return {USIZE, payload};\n+}\n+\n+Literal\n+Literal::make_isize (std::int64_t value, bool suffixed)\n+{\n+  IsizePayload p{value, suffixed};\n+  LiteralPayload payload;\n+  payload.isize_payload = p;\n+  return {ISIZE, payload};\n+}\n+\n } // namespace Literal"}, {"sha": "b789422210533d7a7b6125f7bf1b5f5c9acd320f", "filename": "libgrust/libproc_macro/literal.h", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f7461b1fdbc0325f1ad17d71d678f6f27d15d16/libgrust%2Flibproc_macro%2Fliteral.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f7461b1fdbc0325f1ad17d71d678f6f27d15d16/libgrust%2Flibproc_macro%2Fliteral.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2Fliteral.h?ref=4f7461b1fdbc0325f1ad17d71d678f6f27d15d16", "patch": "@@ -24,6 +24,8 @@\n #define LITERAL_H\n \n #include <cstdint>\n+#include <string>\n+#include <vector>\n \n namespace Literal {\n enum UnsignedTag\n@@ -157,6 +159,35 @@ struct Literal\n {\n   LiteralTag tag;\n   LiteralPayload payload;\n+\n+public:\n+  Literal clone () const;\n+\n+  static Literal make_u8 (std::uint8_t value, bool suffixed = false);\n+  static Literal make_u16 (std::uint16_t value, bool suffixed = false);\n+  static Literal make_u32 (std::uint32_t value, bool suffixed = false);\n+  static Literal make_u64 (std::uint64_t value, bool suffixed = false);\n+\n+  static Literal make_i8 (std::int8_t value, bool suffixed = false);\n+  static Literal make_i16 (std::int16_t value, bool suffixed = false);\n+  static Literal make_i32 (std::int32_t value, bool suffixed = false);\n+  static Literal make_i64 (std::int64_t value, bool suffixed = false);\n+\n+  static Literal make_string (const std::string &str);\n+  static Literal make_string (const unsigned char *str, std::uint64_t len);\n+  static Literal make_byte_string (const std::vector<std::uint8_t> &vec);\n+  static Literal make_byte_string (const std::uint8_t *bytes,\n+\t\t\t\t   std::uint64_t len);\n+\n+  static Literal make_f32 (float value, bool suffixed = false);\n+  static Literal make_f64 (double value, bool suffixed = false);\n+\n+  static Literal make_char (std::uint32_t ch);\n+  static Literal make_usize (std::uint64_t value, bool suffixed = false);\n+  static Literal make_isize (std::int64_t value, bool suffixed = false);\n+\n+  static Literal make_unsigned (UnsignedSuffixPayload p);\n+  static Literal make_signed (SignedSuffixPayload p);\n };\n \n extern \"C\" {"}]}