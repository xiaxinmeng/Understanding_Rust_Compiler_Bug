{"sha": "fb886737e23eef762c8c164c53168ebfd86e9435", "node_id": "C_kwDOANBUbNoAKGZiODg2NzM3ZTIzZWVmNzYyYzhjMTY0YzUzMTY4ZWJmZDg2ZTk0MzU", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-22T20:57:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-22T20:57:05Z"}, "message": "Merge #1047\n\n1047: Add helper debugging function for substituted tokens r=CohenArthur a=CohenArthur\n\nSince this is less noisy, I guess we can keep it in at all times instead\r\nof commenting it. Doing it like so - through a single function call -\r\nmeans that we avoid creating the string entirely in release builds\r\n\r\nFixes #967 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "1fcf347ffc63ae0e07a9f4914a0f4f8d103d9293", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fcf347ffc63ae0e07a9f4914a0f4f8d103d9293"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb886737e23eef762c8c164c53168ebfd86e9435", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiOjghCRBK7hj4Ov3rIwAAEpAIAGy0qiS1RszSUEuSk00Hc2kO\nLp1WIIsYZ5R3WGol0jb85vBjz5kPkZv5JSRkRHPpKqtKTq5Dw/gpIghIc5W1owFQ\nJsz6iTJfElU16zH1u9urvAMhnk2dqVP3EtFsO0hVrCKrNZBnEpBh40Sx7Ihr4Ydl\nb6X79AQG1Tt1dyBW/RIAnWoeJc6ZmdLW+YWBueZZqoN5NBw3bt/5N5nUSoNwk8QL\no/9bIPRVEuTbWXdMTjHU39koDwOo69CKSeZDls5n8xouy2oblaD4gmsswCdNGVdu\nOGkT0pvOqs0+VagIxUtByr3KXH7IXOIkV5xTbgwk+ZB/+4WPnbV9f6ctN7F8GeU=\n=fUk9\n-----END PGP SIGNATURE-----\n", "payload": "tree 1fcf347ffc63ae0e07a9f4914a0f4f8d103d9293\nparent cc6e405912c83aee41efd3015d9157cdbe9134fe\nparent 651d9a77cec0e9db1fbaf3f8a501cfbfc338cea3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1647982625 +0000\ncommitter GitHub <noreply@github.com> 1647982625 +0000\n\nMerge #1047\n\n1047: Add helper debugging function for substituted tokens r=CohenArthur a=CohenArthur\n\nSince this is less noisy, I guess we can keep it in at all times instead\r\nof commenting it. Doing it like so - through a single function call -\r\nmeans that we avoid creating the string entirely in release builds\r\n\r\nFixes #967 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb886737e23eef762c8c164c53168ebfd86e9435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb886737e23eef762c8c164c53168ebfd86e9435", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb886737e23eef762c8c164c53168ebfd86e9435/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc6e405912c83aee41efd3015d9157cdbe9134fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc6e405912c83aee41efd3015d9157cdbe9134fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc6e405912c83aee41efd3015d9157cdbe9134fe"}, {"sha": "651d9a77cec0e9db1fbaf3f8a501cfbfc338cea3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/651d9a77cec0e9db1fbaf3f8a501cfbfc338cea3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/651d9a77cec0e9db1fbaf3f8a501cfbfc338cea3"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "30f0f30b5513a810ac33314827f6a916ef958b16", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb886737e23eef762c8c164c53168ebfd86e9435/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb886737e23eef762c8c164c53168ebfd86e9435/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=fb886737e23eef762c8c164c53168ebfd86e9435", "patch": "@@ -963,6 +963,20 @@ transcribe_context (MacroExpander::ContextType ctx,\n     }\n }\n \n+static std::string\n+tokens_to_str (std::vector<std::unique_ptr<AST::Token>> &tokens)\n+{\n+  std::string str;\n+  if (!tokens.empty ())\n+    {\n+      str += tokens[0]->as_string ();\n+      for (size_t i = 1; i < tokens.size (); i++)\n+\tstr += \" \" + tokens[i]->as_string ();\n+    }\n+\n+  return str;\n+}\n+\n AST::ASTFragment\n MacroExpander::transcribe_rule (\n   AST::MacroRule &match_rule, AST::DelimTokenTree &invoc_token_tree,\n@@ -982,9 +996,8 @@ MacroExpander::transcribe_rule (\n   std::vector<std::unique_ptr<AST::Token>> substituted_tokens\n     = substitute_context.substitute_tokens ();\n \n-  // handy for debugging\n-  // for (auto &tok : substituted_tokens)\n-  //   rust_debug (\"[tok] %s\", tok->as_string ().c_str ());\n+  rust_debug (\"substituted tokens: %s\",\n+\t      tokens_to_str (substituted_tokens).c_str ());\n \n   // parse it to an ASTFragment\n   MacroInvocLexer lex (std::move (substituted_tokens));"}]}