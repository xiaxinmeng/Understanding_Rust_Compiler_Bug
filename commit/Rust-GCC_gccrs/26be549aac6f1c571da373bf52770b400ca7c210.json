{"sha": "26be549aac6f1c571da373bf52770b400ca7c210", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZiZTU0OWFhYzZmMWM1NzFkYTM3M2JmNTI3NzBiNDAwY2E3YzIxMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-12-16T17:31:58Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-12-16T17:31:58Z"}, "message": "Makefile.in (MD_DEPS, s-mddeps): New.\n\n        * Makefile.in (MD_DEPS, s-mddeps): New.\n        (s-config, s-conditions, s-flags, s-codes, s-constants, s-emit,\n        s-recog, s-opinit, s-extract, s-peep, s-attr, s-attrtab, s-output,\n        s-preds): Depend on MD_DEPS instead of md_file.\n        (genobjnames): Add genmddeps.o\n        (build/genmddeps, build/genmddeps.o): New.\n        (mostlyclean): Remove mddeps.mk.\n        * genmddeps.c: New file.\n        * gensupport.c (include_callback): New.\n        (process_include): Call it.\n        * gensupport.h (include_callback): Declare.\n\nFrom-SVN: r92269", "tree": {"sha": "67e95850d4cb4c5af97945b9a98964954c1bc606", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67e95850d4cb4c5af97945b9a98964954c1bc606"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26be549aac6f1c571da373bf52770b400ca7c210", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26be549aac6f1c571da373bf52770b400ca7c210", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26be549aac6f1c571da373bf52770b400ca7c210", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26be549aac6f1c571da373bf52770b400ca7c210/comments", "author": null, "committer": null, "parents": [{"sha": "f85d8f699663290de6a00907542994763f610046", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f85d8f699663290de6a00907542994763f610046", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f85d8f699663290de6a00907542994763f610046"}], "stats": {"total": 146, "additions": 131, "deletions": 15}, "files": [{"sha": "e97ae9c0c0558f38487fa9c4fea2f81a5007927d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26be549aac6f1c571da373bf52770b400ca7c210/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26be549aac6f1c571da373bf52770b400ca7c210/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26be549aac6f1c571da373bf52770b400ca7c210", "patch": "@@ -1,3 +1,17 @@\n+2004-12-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* Makefile.in (MD_DEPS, s-mddeps): New.\n+\t(s-config, s-conditions, s-flags, s-codes, s-constants, s-emit,\n+\ts-recog, s-opinit, s-extract, s-peep, s-attr, s-attrtab, s-output,\n+\ts-preds): Depend on MD_DEPS instead of md_file.\n+\t(genobjnames): Add genmddeps.o\n+\t(build/genmddeps, build/genmddeps.o): New.\n+\t(mostlyclean): Remove mddeps.mk.\n+\t* genmddeps.c: New file.\n+\t* gensupport.c (include_callback): New.\n+\t(process_include): Call it.\n+\t* gensupport.h (include_callback): Declare.\n+\n 2004-12-16  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* local-alloc.c (block_alloc): Replace IN_RANGE with simple"}, {"sha": "b1d22a30c29c7f9d9365d87c37f73a588ecf5f08", "filename": "gcc/Makefile.in", "status": "modified", "additions": 36, "deletions": 15, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26be549aac6f1c571da373bf52770b400ca7c210/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26be549aac6f1c571da373bf52770b400ca7c210/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=26be549aac6f1c571da373bf52770b400ca7c210", "patch": "@@ -2216,6 +2216,17 @@ libbackend.o : $(OBJS-common:.o=.c) $(out_file) \\\n   insn-emit.c insn-recog.c insn-extract.c insn-output.c insn-peep.c \\\n   insn-attr.h insn-attrtab.c insn-preds.c\n \n+# Dependencies for the md file.  The first time through, we just assume\n+# the md file itself and the generated dependency file (in order to get\n+# it built).  The second time through we have the dependency file.\n+-include mddeps.mk\n+MD_DEPS = s-mddeps $(md_file) $(MD_INCLUDES)\n+\n+s-mddeps: $(md_file) $(MD_INCLUDES) build/genmddeps$(build_exeext)\n+\t$(RUN_GEN) build/genmddeps$(build_exeext) $(md_file) > tmp-mddeps\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-mddeps mddeps.mk\n+\t$(STAMP) s-mddeps\n+\n # The following pair of rules has this effect:\n # genconfig is run only if the md has changed since genconfig was last run;\n # but the file insn-config.h is touched only when its contents actually change.\n@@ -2236,13 +2247,13 @@ libbackend.o : $(OBJS-common:.o=.c) $(out_file) \\\n # trailing `;'), we call true for each.\n \n insn-config.h: s-config ; @true\n-s-config : $(md_file) build/genconfig$(build_exeext)\n+s-config : $(MD_DEPS) build/genconfig$(build_exeext)\n \t$(RUN_GEN) build/genconfig$(build_exeext) $(md_file) > tmp-config.h\n \t$(SHELL) $(srcdir)/../move-if-change tmp-config.h insn-config.h\n \t$(STAMP) s-config\n \n insn-conditions.c: s-conditions ; @true\n-s-conditions : $(md_file) build/genconditions$(build_exeext)\n+s-conditions : $(MD_DEPS) build/genconditions$(build_exeext)\n \t$(RUN_GEN) build/genconditions$(build_exeext) $(md_file) > tmp-conditions.c\n \t$(SHELL) $(srcdir)/../move-if-change tmp-conditions.c insn-conditions.c\n \t$(STAMP) s-conditions\n@@ -2255,19 +2266,19 @@ build/insn-conditions.o : insn-conditions.c $(CONFIG_H) $(SYSTEM_H) \\\n build/dummy-conditions.o : dummy-conditions.c\n \n insn-flags.h: s-flags ; @true\n-s-flags : $(md_file) build/genflags$(build_exeext)\n+s-flags : $(MD_DEPS) build/genflags$(build_exeext)\n \t$(RUN_GEN) build/genflags$(build_exeext) $(md_file) > tmp-flags.h\n \t$(SHELL) $(srcdir)/../move-if-change tmp-flags.h insn-flags.h\n \t$(STAMP) s-flags\n \n insn-codes.h: s-codes ; @true\n-s-codes : $(md_file) build/gencodes$(build_exeext)\n+s-codes : $(MD_DEPS) build/gencodes$(build_exeext)\n \t$(RUN_GEN) build/gencodes$(build_exeext) $(md_file) > tmp-codes.h\n \t$(SHELL) $(srcdir)/../move-if-change tmp-codes.h insn-codes.h\n \t$(STAMP) s-codes\n \n insn-constants.h: s-constants ; @true\n-s-constants : $(md_file) build/genconstants$(build_exeext)\n+s-constants : $(MD_DEPS) build/genconstants$(build_exeext)\n \t$(RUN_GEN) build/genconstants$(build_exeext) $(md_file) > tmp-constants.h\n \t$(SHELL) $(srcdir)/../move-if-change tmp-constants.h insn-constants.h\n \t$(STAMP) s-constants\n@@ -2279,7 +2290,7 @@ insn-emit.o : insn-emit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t  $(OUTPUT_OPTION)\n \n insn-emit.c: s-emit ; @true\n-s-emit : $(md_file) build/genemit$(build_exeext)\n+s-emit : $(MD_DEPS) build/genemit$(build_exeext)\n \t$(RUN_GEN) build/genemit$(build_exeext) $(md_file) > tmp-emit.c\n \t$(SHELL) $(srcdir)/../move-if-change tmp-emit.c insn-emit.c\n \t$(STAMP) s-emit\n@@ -2291,7 +2302,7 @@ insn-recog.o : insn-recog.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t  $(OUTPUT_OPTION)\n \n insn-recog.c: s-recog ; @true\n-s-recog : $(md_file) build/genrecog$(build_exeext)\n+s-recog : $(MD_DEPS) build/genrecog$(build_exeext)\n \t$(RUN_GEN) build/genrecog$(build_exeext) $(md_file) > tmp-recog.c\n \t$(SHELL) $(srcdir)/../move-if-change tmp-recog.c insn-recog.c\n \t$(STAMP) s-recog\n@@ -2302,7 +2313,7 @@ insn-opinit.o : insn-opinit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t  $(OUTPUT_OPTION)\n \n insn-opinit.c: s-opinit ; @true\n-s-opinit : $(md_file) build/genopinit$(build_exeext)\n+s-opinit : $(MD_DEPS) build/genopinit$(build_exeext)\n \t$(RUN_GEN) build/genopinit$(build_exeext) $(md_file) > tmp-opinit.c\n \t$(SHELL) $(srcdir)/../move-if-change tmp-opinit.c insn-opinit.c\n \t$(STAMP) s-opinit\n@@ -2313,7 +2324,7 @@ insn-extract.o : insn-extract.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t  $(OUTPUT_OPTION)\n \n insn-extract.c: s-extract ; @true\n-s-extract : $(md_file) build/genextract$(build_exeext)\n+s-extract : $(MD_DEPS) build/genextract$(build_exeext)\n \t$(RUN_GEN) build/genextract$(build_exeext) $(md_file) > tmp-extract.c\n \t$(SHELL) $(srcdir)/../move-if-change tmp-extract.c insn-extract.c\n \t$(STAMP) s-extract\n@@ -2325,7 +2336,7 @@ insn-peep.o : insn-peep.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t  $(OUTPUT_OPTION)\n \n insn-peep.c: s-peep ; @true\n-s-peep : $(md_file) build/genpeep$(build_exeext)\n+s-peep : $(MD_DEPS) build/genpeep$(build_exeext)\n \t$(RUN_GEN) build/genpeep$(build_exeext) $(md_file) > tmp-peep.c\n \t$(SHELL) $(srcdir)/../move-if-change tmp-peep.c insn-peep.c\n \t$(STAMP) s-peep\n@@ -2337,13 +2348,13 @@ insn-attrtab.o : insn-attrtab.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t  $(OUTPUT_OPTION)\n \n insn-attr.h: s-attr ; @true\n-s-attr : $(md_file) build/genattr$(build_exeext)\n+s-attr : $(MD_DEPS) build/genattr$(build_exeext)\n \t$(RUN_GEN) build/genattr$(build_exeext) $(md_file) > tmp-attr.h\n \t$(SHELL) $(srcdir)/../move-if-change tmp-attr.h insn-attr.h\n \t$(STAMP) s-attr\n \n insn-attrtab.c: s-attrtab ; @true\n-s-attrtab : $(md_file) build/genattrtab$(build_exeext)\n+s-attrtab : $(MD_DEPS) build/genattrtab$(build_exeext)\n \t$(RUN_GEN) build/genattrtab$(build_exeext) $(md_file) > tmp-attrtab.c\n \t$(SHELL) $(srcdir)/../move-if-change tmp-attrtab.c insn-attrtab.c\n \t$(STAMP) s-attrtab\n@@ -2356,7 +2367,7 @@ insn-output.o : insn-output.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t  $(OUTPUT_OPTION)\n \n insn-output.c: s-output ; @true\n-s-output : $(md_file) build/genoutput$(build_exeext)\n+s-output : $(MD_DEPS) build/genoutput$(build_exeext)\n \t$(RUN_GEN) build/genoutput$(build_exeext) $(md_file) > tmp-output.c\n \t$(SHELL) $(srcdir)/../move-if-change tmp-output.c insn-output.c\n \t$(STAMP) s-output\n@@ -2388,7 +2399,7 @@ s-modes: build/genmodes$(build_exeext)\n \n insn-preds.c tm-preds.h: s-preds; @true\n \n-s-preds: $(md_file) build/genpreds$(build_exeext)\n+s-preds: $(MD_DEPS) build/genpreds$(build_exeext)\n \t$(RUN_GEN) build/genpreds$(build_exeext) -h $(md_file) > tmp-preds.h\n \t$(SHELL) $(srcdir)/../move-if-change tmp-preds.h tm-preds.h\n \t$(RUN_GEN) build/genpreds$(build_exeext) $(md_file) > tmp-preds.c\n@@ -2506,7 +2517,7 @@ genobjnames=$(genprognames:%=%.o) read-rtl.o gensupport.o genattrtab.o \\\n \tgenconstants.o gen-protos.o scan.o fix-header.o scan-decls.o \\\n \tgencheck.o dummy-conditions.o genconditions.o errors.o ggc-none.o \\\n \tmin-insn-modes.o rtl.o print-rtl.o varray.o gcov-iov.o \\\n-\tinsn-conditions.o gengtype-lex.o gengtype-yacc.o\n+\tinsn-conditions.o gengtype-lex.o gengtype-yacc.o genmddeps.o\n \n genobjs=$(genobjnames:%=build/%)\n \n@@ -2536,6 +2547,15 @@ build/genflags.o : genflags.c $(RTL_BASE_H) $(OBSTACK_H) $(BCONFIG_H) \\\n build/gencodes.o : gencodes.c $(RTL_BASE_H) $(BCONFIG_H) \\\n   $(SYSTEM_H) coretypes.h $(GTM_H) errors.h gensupport.h\n \n+build/genmddeps$(build_exeext) : build/genmddeps.o $(BUILD_RTL) \\\n+  $(BUILD_EARLY_SUPPORT) $(BUILD_ERRORS) $(BUILD_LIBDEPS)\n+\t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) -o $@ \\\n+\t build/genmddeps.o $(BUILD_EARLY_SUPPORT) $(BUILD_RTL) \\\n+\t $(BUILD_ERRORS) $(BUILD_LIBS)\n+\n+build/genmddeps.o: genmddeps.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h \\\n+  $(GTM_H) $(RTL_BASE_H) errors.h gensupport.h\n+\n build/genconstants$(build_exeext) : build/genconstants.o $(BUILD_RTL) \\\n   $(BUILD_EARLY_SUPPORT) $(BUILD_ERRORS) $(BUILD_LIBDEPS)\n \t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) -o $@ \\\n@@ -3068,6 +3088,7 @@ mostlyclean: lang.mostlyclean\n \t-rm -rf libgcc\n # Delete build programs\n \t-rm -f build/*\n+\t-rm -f mddeps.mk\n # Delete the temp files made in the course of building libgcc.a.\n \t-rm -f xlimits.h\n # Delete other built files."}, {"sha": "ff9e63d52a904145ca0dc846bade86ce8ad7cd7c", "filename": "gcc/genmddeps.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26be549aac6f1c571da373bf52770b400ca7c210/gcc%2Fgenmddeps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26be549aac6f1c571da373bf52770b400ca7c210/gcc%2Fgenmddeps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmddeps.c?ref=26be549aac6f1c571da373bf52770b400ca7c210", "patch": "@@ -0,0 +1,70 @@\n+/* genmddeps.c - creates a makefile dependency fragment for the md file.\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This program is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 2, or (at your option) any\n+later version.\n+\n+This program is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with this program; if not, write to the Free Software\n+Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n+\n+#include \"bconfig.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"rtl.h\"\n+#include \"gensupport.h\"\n+#include \"errors.h\"\n+\n+\n+struct filedep\n+{\n+  struct filedep *next;\n+  const char *pathname;\n+};\n+\n+static struct filedep *deps, **last = &deps;\n+\n+static void\n+add_filedep (const char *pathname)\n+{\n+  struct filedep *n = XNEW (struct filedep);\n+  n->pathname = pathname;\n+  *last = n;\n+  last = &n->next;\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  struct filedep *d;\n+\n+  progname = \"genmddeps\";\n+  include_callback = add_filedep;\n+  \n+  if (init_md_reader_args (argc, argv) != SUCCESS_EXIT_CODE)\n+    return (FATAL_EXIT_CODE);\n+\n+  *last = NULL;\n+\n+  /* Output a variable containing all of the include files.  */\n+  fputs (\"MD_INCLUDES =\", stdout);\n+  for (d = deps; d ; d = d->next)\n+    printf (\" \\\\\\n\\t%s\", d->pathname);\n+  putchar ('\\n');\n+\n+  /* Output make targets for these includes with empty actions.  This\n+     will guard against make errors when includes are removed.  */\n+  for (d = deps; d ; d = d->next)\n+    printf (\"\\n%s:\\n\", d->pathname);\n+\n+  fflush (stdout);\n+  return (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n+}"}, {"sha": "a0b3faa6066063c7803eeaf1ff28c652c32ce45d", "filename": "gcc/gensupport.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26be549aac6f1c571da373bf52770b400ca7c210/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26be549aac6f1c571da373bf52770b400ca7c210/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=26be549aac6f1c571da373bf52770b400ca7c210", "patch": "@@ -37,6 +37,10 @@ int insn_elision = 1;\n \n const char *in_fname;\n \n+/* This callback will be invoked whenever an rtl include directive is\n+   processed.  To be used for creation of the dependency file.  */\n+void (*include_callback) (const char *);\n+\n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n \n@@ -245,6 +249,9 @@ process_include (rtx desc, int lineno)\n   read_rtx_filename = pathname;\n   read_rtx_lineno = 1;\n \n+  if (include_callback)\n+    include_callback (pathname);\n+\n   /* Read the entire file.  */\n   while (read_rtx (input_file, &desc, &lineno))\n     process_rtx (desc, lineno);"}, {"sha": "71557175266b8d6f195765d01af7a4d5b157bda7", "filename": "gcc/gensupport.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26be549aac6f1c571da373bf52770b400ca7c210/gcc%2Fgensupport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26be549aac6f1c571da373bf52770b400ca7c210/gcc%2Fgensupport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.h?ref=26be549aac6f1c571da373bf52770b400ca7c210", "patch": "@@ -92,4 +92,8 @@ extern void add_predicate (struct pred_data *);\n \n #define FOR_ALL_PREDICATES(p) for (p = first_predicate; p; p = p->next)\n \n+/* This callback will be invoked whenever an rtl include directive is\n+   processed.  To be used for creation of the dependency file.  */\n+extern void (*include_callback) (const char *);\n+\n #endif /* GCC_GENSUPPORT_H */"}]}