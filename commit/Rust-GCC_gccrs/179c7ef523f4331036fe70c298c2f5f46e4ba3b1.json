{"sha": "179c7ef523f4331036fe70c298c2f5f46e4ba3b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc5YzdlZjUyM2Y0MzMxMDM2ZmU3MGMyOThjMmY1ZjQ2ZTRiYTNiMQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2019-07-03T18:36:28Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2019-07-03T18:36:28Z"}, "message": "[Darwin] Some TLC for older Darwin versions.\n\nThe library handling and some of the options for creating the crts for\nthe older PPC Darwin versions had bit-rotted somewhat.  This adjusts the\nbuild criteria for the crts to avoid newer ld64 versions warnings about\nmismatches in build and object versions.\n\nAdded to some of the comments that it's documented why the specs are as\nthey are.\n\n2019-07-03  Iain Sandoe  <iain@sandoe.co.uk>\n\ngcc/\n\n\t* config/darwin.h (REAL_LIBGCC_SPEC): Adjust for earlier Darwin.\n\t(STARTFILE_SPEC): Split crt3 into a separate spec.\n\t(DARWIN_EXTRA_SPECS): Add crt2 and crt3 spec.\n\t(DARWIN_CRT2_SPEC): New.\n\t(DARWIN_CRT3_SPEC): New.\n\t(MIN_LD64_OMIT_STUBS): Revise to 62.1.\n\t* config/rs6000/darwin.h (DARWIN_CRT2_SPEC): Revise conditions.\n\t(DARWIN_CRT3_SPEC): New.\n\nlibgcc/\n\n2019-07-03  Iain Sandoe  <iain@sandoe.co.uk>\n\n\t* config.host (powerpc-*-darwin*,powerpc64-*-darwin*): Revise crt\n\tlist.\n\t* config/rs6000/t-darwin: Build crt3_2 for older systems.  Revise\n\tmmacosx-version-min for crts to run across all system versions.\n\t* config/rs6000/t-darwin64 (LIB2ADD): Remove.\n\t* config/t-darwin: Revise mmacosx-version-min for crts to run across\n\tsystem versions >= 10.4.\n\nFrom-SVN: r273016", "tree": {"sha": "146950d97c3e654e1a40264145cc75b3ff5b44e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/146950d97c3e654e1a40264145cc75b3ff5b44e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/179c7ef523f4331036fe70c298c2f5f46e4ba3b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/179c7ef523f4331036fe70c298c2f5f46e4ba3b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/179c7ef523f4331036fe70c298c2f5f46e4ba3b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/179c7ef523f4331036fe70c298c2f5f46e4ba3b1/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "911c8df0a30913ba6c84b8a65cb338e9c54efeee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/911c8df0a30913ba6c84b8a65cb338e9c54efeee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/911c8df0a30913ba6c84b8a65cb338e9c54efeee"}], "stats": {"total": 159, "additions": 105, "deletions": 54}, "files": [{"sha": "f1794c89043f6bb49556c64c327532aa6e0af28e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/179c7ef523f4331036fe70c298c2f5f46e4ba3b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/179c7ef523f4331036fe70c298c2f5f46e4ba3b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=179c7ef523f4331036fe70c298c2f5f46e4ba3b1", "patch": "@@ -1,3 +1,14 @@\n+2019-07-03  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config/darwin.h (REAL_LIBGCC_SPEC): Adjust for earlier Darwin.\n+\t(STARTFILE_SPEC): Split crt3 into a separate spec.\n+\t(DARWIN_EXTRA_SPECS): Add crt2 and crt3 spec.\n+\t(DARWIN_CRT2_SPEC): New.\n+\t(DARWIN_CRT3_SPEC): New.\n+\t(MIN_LD64_OMIT_STUBS): Revise to 62.1.\n+\t* config/rs6000/darwin.h (DARWIN_CRT2_SPEC): Revise conditions.\n+\t(DARWIN_CRT3_SPEC): New.\n+\n 2019-07-03  Michael Meissner  <meissner@linux.ibm.com>\n \n \t* config/rs6000/altivec.md (altivec_mov<mode>, VM2 iterator):"}, {"sha": "72215cea9c3bdb9890383d245b3fb1452fcce2af", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 46, "deletions": 28, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/179c7ef523f4331036fe70c298c2f5f46e4ba3b1/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/179c7ef523f4331036fe70c298c2f5f46e4ba3b1/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=179c7ef523f4331036fe70c298c2f5f46e4ba3b1", "patch": "@@ -189,8 +189,15 @@ extern GTY(()) int darwin_ms_struct;\n #define DARWIN_NOCOMPACT_UNWIND \\\n \" %:version-compare(>= 10.6 mmacosx-version-min= -no_compact_unwind) \"\n \n-/* This is mostly a clone of the standard LINK_COMMAND_SPEC, plus\n-   precomp, libtool, and fat build additions.\n+/* In Darwin linker specs we can put -lcrt0.o and ld will search the library\n+   path for crt0.o or -lcrtx.a and it will search for for libcrtx.a.  As for\n+   other ports, we can also put xxx.{o,a}%s and get the appropriate complete\n+   startfile absolute directory.  This latter point is important when we want\n+   to override ld's rule of .dylib being found ahead of .a and the user wants\n+   the convenience library to be linked.  */\n+\n+/* The LINK_COMMAND spec is mostly a clone of the standard LINK_COMMAND_SPEC,\n+   plus precomp, libtool, and fat build additions.\n \n    In general, random Darwin linker flags should go into LINK_SPEC\n    instead of LINK_COMMAND_SPEC.  The command spec is better for\n@@ -352,43 +359,42 @@ extern GTY(()) int darwin_ms_struct;\n \n /* Support -mmacosx-version-min by supplying different (stub) libgcc_s.dylib\n    libraries to link against, and by not linking against libgcc_s on\n-   earlier-than-10.3.9.\n+   earlier-than-10.3.9.  If we need exceptions, prior to 10.3.9, then we have\n+   to link the static eh lib, since there's no shared version on the system.\n+\n+   Note that by default, except as above, -lgcc_eh is not linked against.\n+   This is because,in general, we need to unwind through system libraries that\n+   are linked with the shared unwinder in libunwind (or libgcc_s for 10.4/5).\n \n-   Note that by default, -lgcc_eh is not linked against!  This is\n-   because in a future version of Darwin the EH frame information may\n-   be in a new format, or the fallback routine might be changed; if\n-   you want to explicitly link against the static version of those\n-   routines, because you know you don't need to unwind through system\n-   libraries, you need to explicitly say -static-libgcc.\n+   The static version of the current libgcc unwinder (which differs from the\n+   implementation in libunwind.dylib on systems Darwin10 [10.6]+) can be used\n+   by specifying -static-libgcc.\n \n-   If it is linked against, it has to be before -lgcc, because it may\n+   If libgcc_eh is linked against, it has to be before -lgcc, because it might\n    need symbols from -lgcc.  */\n+\n #undef REAL_LIBGCC_SPEC\n #define REAL_LIBGCC_SPEC\t\t\t\t\t\t   \\\n    \"%{static-libgcc|static: -lgcc_eh -lgcc;\t\t\t\t   \\\n-      shared-libgcc|fexceptions|fgnu-runtime:\t\t\t\t   \\\n-       %:version-compare(!> 10.5 mmacosx-version-min= -lgcc_s.10.4)\t   \\\n+      shared-libgcc|fexceptions|fobjc-exceptions|fgnu-runtime:\t\t   \\\n+       %:version-compare(!> 10.3.9 mmacosx-version-min= -lgcc_eh)\t   \\\n+       %:version-compare(>< 10.3.9 10.5 mmacosx-version-min= -lgcc_s.10.4) \\\n        %:version-compare(>< 10.5 10.6 mmacosx-version-min= -lgcc_s.10.5)   \\\n-       %:version-compare(!> 10.5 mmacosx-version-min= -lgcc_ext.10.4)\t   \\\n+       %:version-compare(>< 10.3.9 10.5 mmacosx-version-min= -lgcc_ext.10.4) \\\n        %:version-compare(>= 10.5 mmacosx-version-min= -lgcc_ext.10.5)\t   \\\n        -lgcc ;\t\t\t\t\t\t\t\t   \\\n       :%:version-compare(>< 10.3.9 10.5 mmacosx-version-min= -lgcc_s.10.4) \\\n        %:version-compare(>< 10.5 10.6 mmacosx-version-min= -lgcc_s.10.5)   \\\n-       %:version-compare(!> 10.5 mmacosx-version-min= -lgcc_ext.10.4)\t   \\\n+       %:version-compare(>< 10.3.9 10.5 mmacosx-version-min= -lgcc_ext.10.4) \\\n        %:version-compare(>= 10.5 mmacosx-version-min= -lgcc_ext.10.5)\t   \\\n        -lgcc }\"\n \n-/* We specify crt0.o as -lcrt0.o so that ld will search the library path.\n-\n-   crt3.o provides __cxa_atexit on systems that don't have it.  Since\n-   it's only used with C++, which requires passing -shared-libgcc, key\n-   off that to avoid unnecessarily adding a destructor to every\n-   powerpc program built.  */\n+/* We specify crt0.o as -lcrt0.o so that ld will search the library path.  */\n \n #undef  STARTFILE_SPEC\n #define STARTFILE_SPEC\t\t\t\t\t\t\t    \\\n-  \"%{Zdynamiclib: %(darwin_dylib1) %{fgnu-tm: -lcrttms.o}}\t\t    \\\n-   %{!Zdynamiclib:%{Zbundle:%{!static:\t\t\t\t\t    \\\n+\"%{Zdynamiclib: %(darwin_dylib1) %{fgnu-tm: -lcrttms.o}}\t\t    \\\n+ %{!Zdynamiclib:%{Zbundle:%{!static:\t\t\t\t\t    \\\n \t%:version-compare(< 10.6 mmacosx-version-min= -lbundle1.o)\t    \\\n \t%{fgnu-tm: -lcrttms.o}}}\t\t\t\t\t    \\\n      %{!Zbundle:%{pg:%{static:-lgcrt0.o}\t\t\t\t    \\\n@@ -402,26 +408,38 @@ extern GTY(()) int darwin_ms_struct;\n                                 %{!object:%{preload:-lcrt0.o}\t\t    \\\n                                   %{!preload: %(darwin_crt1)\t\t    \\\n \t\t\t\t\t      %(darwin_crt2)}}}}}}\t    \\\n-  %{shared-libgcc:%:version-compare(< 10.5 mmacosx-version-min= crt3.o%s)}\"\n+ %(darwin_crt3)\"\n \n /* We want a destructor last in the list.  */\n #define TM_DESTRUCTOR \"%{fgnu-tm: -lcrttme.o}\"\n #define ENDFILE_SPEC TM_DESTRUCTOR\n \n #define DARWIN_EXTRA_SPECS\t\t\t\t\t\t\\\n   { \"darwin_crt1\", DARWIN_CRT1_SPEC },\t\t\t\t\t\\\n+  { \"darwin_crt2\", DARWIN_CRT2_SPEC },\t\t\t\t\t\\\n+  { \"darwin_crt3\", DARWIN_CRT3_SPEC },\t\t\t\t\t\\\n   { \"darwin_dylib1\", DARWIN_DYLIB1_SPEC },\n \n-#define DARWIN_DYLIB1_SPEC\t\t\t\t\t\t\\\n-  \"%:version-compare(!> 10.5 mmacosx-version-min= -ldylib1.o)\t\t\\\n-   %:version-compare(>< 10.5 10.6 mmacosx-version-min= -ldylib1.10.5.o)\"\n-\n #define DARWIN_CRT1_SPEC\t\t\t\t\t\t\\\n   \"%:version-compare(!> 10.5 mmacosx-version-min= -lcrt1.o)\t\t\\\n    %:version-compare(>< 10.5 10.6 mmacosx-version-min= -lcrt1.10.5.o)\t\\\n    %:version-compare(>< 10.6 10.8 mmacosx-version-min= -lcrt1.10.6.o)\t\\\n    %{fgnu-tm: -lcrttms.o}\"\n \n+#define DARWIN_CRT2_SPEC \"\"\n+\n+/* crt3.o provides __cxa_atexit on systems that don't have it (and a fix\n+   up for faulty versions on 10.4).  Since it's only used with C++, which\n+   requires passing -shared-libgcc, key off that to avoid unnecessarily\n+   adding a destructor to every program built for 10.4 or earlier.  */\n+\n+#define DARWIN_CRT3_SPEC \\\n+\"%{shared-libgcc:%:version-compare(< 10.5 mmacosx-version-min= crt3.o%s)}\"\n+\n+#define DARWIN_DYLIB1_SPEC\t\t\t\t\t\t\\\n+  \"%:version-compare(!> 10.5 mmacosx-version-min= -ldylib1.o)\t\t\\\n+   %:version-compare(>< 10.5 10.6 mmacosx-version-min= -ldylib1.10.5.o)\"\n+\n #ifdef HAVE_AS_MMACOSX_VERSION_MIN_OPTION\n /* Emit macosx version (but only major).  */\n #define ASM_MMACOSX_VERSION_MIN_SPEC \\\n@@ -996,7 +1014,7 @@ extern void darwin_driver_init (unsigned int *,struct cl_decoded_option **);\n \n /* From at least version 62.1, ld64 can build PIC indirection stubs as\n    needed, and there is no need for the compiler to emit them.  */\n-#define MIN_LD64_OMIT_STUBS \"85.2\"\n+#define MIN_LD64_OMIT_STUBS \"62.1\"\n \n #ifndef LD64_VERSION\n #define LD64_VERSION \"62.1\""}, {"sha": "b0b504769704db807c44645f3d68b795bf23f2f9", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/179c7ef523f4331036fe70c298c2f5f46e4ba3b1/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/179c7ef523f4331036fe70c298c2f5f46e4ba3b1/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=179c7ef523f4331036fe70c298c2f5f46e4ba3b1", "patch": "@@ -128,9 +128,25 @@ extern int darwin_emit_picsym_stub;\n    %:version-compare(>< 10.5 10.7 mmacosx-version-min= -lcrt1.10.5.o)\t\\\n    %{fgnu-tm: -lcrttms.o}\"\n \n-/* crt2.o is at least partially required for 10.3.x and earlier.  */\n+/* crt2.o is at least partially required for 10.3.x and earlier.\n+   It deals with registration of the unwind frames, where this is not\n+   automatically provided by the system.  So we need it for any case that\n+   might use exceptions.  */\n+#undef DARWIN_CRT2_SPEC\n #define DARWIN_CRT2_SPEC \\\n-  \"%{!m64:%:version-compare(!> 10.4 mmacosx-version-min= crt2.o%s)}\"\n+\"%{!m64:%{shared-libgcc|static-libstdc++|fexceptions|fobjc-exceptions|fgnu-runtime: \\\n+   %:version-compare(!> 10.4 mmacosx-version-min= crt2.o%s) \\\n+  }}\"\n+\n+/* crt3 deals with providing cxa_atexit on earlier systems (or fixing it up,\n+   for broken versions).  It's only needed for c++ code, so we can make it\n+   conditional on shared-libgcc since that's forced on for c++.  */\n+#undef DARWIN_CRT3_SPEC\n+#define DARWIN_CRT3_SPEC \\\n+\"%{!m64:%{shared-libgcc|static-libstdc++:\t\t\t\t\t\t\t\\\n+   %:version-compare(>< 10.4 10.5 mmacosx-version-min= crt3.o%s) \\\n+   %:version-compare(!> 10.4 mmacosx-version-min= crt3_2.o%s) \\\n+  }}\"\n \n /* The PPC regs save/restore functions are leaves and could, conceivably\n    be used by the tm destructor.  */"}, {"sha": "f9f900b0995af3d3d7cac7a68f3c10f974593b53", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/179c7ef523f4331036fe70c298c2f5f46e4ba3b1/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/179c7ef523f4331036fe70c298c2f5f46e4ba3b1/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=179c7ef523f4331036fe70c298c2f5f46e4ba3b1", "patch": "@@ -1,3 +1,13 @@\n+2019-07-03  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config.host (powerpc-*-darwin*,powerpc64-*-darwin*): Revise crt\n+\tlist.\n+\t* config/rs6000/t-darwin: Build crt3_2 for older systems.  Revise\n+\tmmacosx-version-min for crts to run across all system versions.\n+\t* config/rs6000/t-darwin64 (LIB2ADD): Remove.\n+\t* config/t-darwin: Revise mmacosx-version-min for crts to run across\n+\tsystem versions >= 10.4.\n+\n 2019-07-03  Martin Liska  <mliska@suse.cz>\n \n \t* Makefile.in: Use topn_values instead of one_value names."}, {"sha": "e11a065a681d9fdc241c4cb59cefe226939d0636", "filename": "libgcc/config.host", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/179c7ef523f4331036fe70c298c2f5f46e4ba3b1/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/179c7ef523f4331036fe70c298c2f5f46e4ba3b1/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=179c7ef523f4331036fe70c298c2f5f46e4ba3b1", "patch": "@@ -1084,18 +1084,20 @@ powerpc-*-darwin*)\n \tcase ${host} in\n \t*-*-darwin9* | *-*-darwin[12][0-9]*)\n \t  # libSystem contains unwind information for signal frames since\n-\t  # Darwin 9.\n+\t  # Darwin 9.  We don't need longcall either.\n \t  ;;\n \t*)\n+\t  # prepend the fragment forcing darwin8 codegen.\n+\t  tmake_file=\"rs6000/t-darwin8 $tmake_file\"\n \t  md_unwind_header=rs6000/darwin-unwind.h\n \t  ;;\n \tesac\n-\ttmake_file=\"$tmake_file rs6000/t-ibm-ldouble\"\n-\textra_parts=\"$extra_parts crt2.o libef_ppc.a\"\n+\ttmake_file=\"$tmake_file rs6000/t-ppc64-fp rs6000/t-ibm-ldouble\"\n+\textra_parts=\"$extra_parts crt2.o crt3_2.o libef_ppc.a dw_ppc.o\"\n \t;;\n powerpc64-*-darwin*)\n \ttmake_file=\"$tmake_file rs6000/t-darwin64 rs6000/t-ibm-ldouble\"\n-\textra_parts=\"$extra_parts crt2.o libef_ppc.a\"\n+\textra_parts=\"$extra_parts crt2.o crt3_2.o libef_ppc.a dw_ppc.o\"\n \t;;\n powerpc*-*-freebsd*)\n \ttmake_file=\"${tmake_file} rs6000/t-ppccomm rs6000/t-savresfgpr rs6000/t-crtstuff rs6000/t-freebsd t-softfp-sfdf t-softfp-excl t-softfp\""}, {"sha": "8b513bdb1d78b606d44b3f6da56527aea412fdbe", "filename": "libgcc/config/rs6000/t-darwin", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/179c7ef523f4331036fe70c298c2f5f46e4ba3b1/libgcc%2Fconfig%2Frs6000%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/179c7ef523f4331036fe70c298c2f5f46e4ba3b1/libgcc%2Fconfig%2Frs6000%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-darwin?ref=179c7ef523f4331036fe70c298c2f5f46e4ba3b1", "patch": "@@ -1,7 +1,11 @@\n-DARWIN_EXTRA_CRT_BUILD_CFLAGS = -mlongcall -mmacosx-version-min=10.4\n \n crt2.o: $(srcdir)/config/rs6000/darwin-crt2.c\n-\t$(crt_compile) $(DARWIN_EXTRA_CRT_BUILD_CFLAGS) -c $<\n+\t$(crt_compile) -mmacosx-version-min=10.1 -c $<\n+\n+# The sources for this indicate that there are some parts that\n+# don't apply >= 10.4\n+crt3_2.o: $(srcdir)/config/darwin-crt3.c\n+\t$(crt_compile) -mmacosx-version-min=10.1 -c $<\n \n # The outlined register save/restore functions need to run anywhere, and\n # they must be leaf functions suitable for use in an endfile.\n@@ -32,10 +36,12 @@ libef_ppc.a: $(PPC_ENDFILE_OBJS)\n \t$(AR_CREATE_FOR_TARGET) $@ $(PPC_ENDFILE_OBJS)\n \t$(RANLIB_FOR_TARGET) $@\n \n+dw_ppc.o: $(srcdir)/config/rs6000/darwin-world.S\n+\t$(crt_compile) -mmacosx-version-min=10.1 -c $<\n+\n LIB2ADD = $(srcdir)/config/rs6000/darwin-tramp.S \\\n \t  $(srcdir)/config/darwin-64.c \\\n-\t  $(srcdir)/config/rs6000/darwin-world.S \\\n-\t  $(srcdir)/config/rs6000/ppc64-fp.c\n+\t  $(srcdir)/config/rs6000/darwin-world.S\n \n # The .S files above are designed to run on all processors, even though\n # they use AltiVec instructions."}, {"sha": "999679fc3cbf9d1fcb62bbb8205b27749b0eac69", "filename": "libgcc/config/rs6000/t-darwin64", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/179c7ef523f4331036fe70c298c2f5f46e4ba3b1/libgcc%2Fconfig%2Frs6000%2Ft-darwin64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/179c7ef523f4331036fe70c298c2f5f46e4ba3b1/libgcc%2Fconfig%2Frs6000%2Ft-darwin64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-darwin64?ref=179c7ef523f4331036fe70c298c2f5f46e4ba3b1", "patch": "@@ -1,7 +1 @@\n LIB2_SIDITI_CONV_FUNCS = yes\n-\n-LIB2ADD = $(srcdir)/config/rs6000/darwin-tramp.S \\\n-\t  $(srcdir)/config/darwin-64.c \\\n-\t  $(srcdir)/config/rs6000/darwin-fpsave.S \\\n-\t  $(srcdir)/config/rs6000/darwin-gpsave.S \\\n-\t  $(srcdir)/config/rs6000/darwin-world.S"}, {"sha": "3b5e342895815ba95caef0e77faec6934da5f852", "filename": "libgcc/config/t-darwin", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/179c7ef523f4331036fe70c298c2f5f46e4ba3b1/libgcc%2Fconfig%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/179c7ef523f4331036fe70c298c2f5f46e4ba3b1/libgcc%2Fconfig%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-darwin?ref=179c7ef523f4331036fe70c298c2f5f46e4ba3b1", "patch": "@@ -3,24 +3,18 @@\n HOST_LIBGCC2_CFLAGS += -mmacosx-version-min=10.4\n \n crt3.o: $(srcdir)/config/darwin-crt3.c\n-\t$(crt_compile) $(DARWIN_EXTRA_CRT_BUILD_CFLAGS) -c $<\n+\t$(crt_compile) -mmacosx-version-min=10.4 -c $<\n \n crttms.o: $(srcdir)/config/darwin-crt-tm.c\n-\t$(crt_compile) $(DARWIN_EXTRA_CRT_BUILD_CFLAGS) -DSTART -c $<\n+\t$(crt_compile) -mmacosx-version-min=10.4 -DSTART -c $<\n \n crttme.o: $(srcdir)/config/darwin-crt-tm.c\n-\t$(crt_compile) $(DARWIN_EXTRA_CRT_BUILD_CFLAGS) -DEND -c $<\n-\n-# -pipe because there's an assembler bug, 4077127, which causes\n-# it to not properly process the first # directive, causing temporary\n-# file names to appear in stabs, causing the bootstrap to fail.  Using -pipe\n-# works around this by not having any temporary file names.\n-HOST_LIBGCC2_CFLAGS += -pipe\n+\t$(crt_compile) -mmacosx-version-min=10.4 -DEND -c $<\n \n # Use unwind-dw2-fde-darwin\n LIB2ADDEH = $(srcdir)/unwind-dw2.c $(srcdir)/config/unwind-dw2-fde-darwin.c \\\n   $(srcdir)/unwind-sjlj.c $(srcdir)/unwind-c.c\n \n # Patch to __Unwind_Find_Enclosing_Function for Darwin10.\n d10-uwfef.o: $(srcdir)/config/darwin10-unwind-find-enc-func.c\n-\t$(crt_compile) $(DARWIN_EXTRA_CRT_BUILD_CFLAGS) -mmacosx-version-min=10.6 -c $<\n+\t$(crt_compile) -mmacosx-version-min=10.6 -c $<"}]}