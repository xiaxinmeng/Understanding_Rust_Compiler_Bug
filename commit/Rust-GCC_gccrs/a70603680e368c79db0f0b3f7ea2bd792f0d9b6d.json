{"sha": "a70603680e368c79db0f0b3f7ea2bd792f0d9b6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTcwNjAzNjgwZTM2OGM3OWRiMGYwYjNmN2VhMmJkNzkyZjBkOWI2ZA==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "1998-11-25T20:51:09Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "1998-11-25T20:51:09Z"}, "message": "loop.c (check_dbra_loop): Update JUMP_LABEL field of jump insn when loop reversed.\n\n\t* loop.c (check_dbra_loop): Update JUMP_LABEL field of jump insn\n\twhen loop reversed.\n\t* unroll.c (precondition_loop_p): Return loop_initial_value\n\tfor initial_value instead of loop_iteration_var.\n\nFrom-SVN: r23881", "tree": {"sha": "0696cfb08feb8f43843cd461c5d10fbad1798b83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0696cfb08feb8f43843cd461c5d10fbad1798b83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a70603680e368c79db0f0b3f7ea2bd792f0d9b6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a70603680e368c79db0f0b3f7ea2bd792f0d9b6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a70603680e368c79db0f0b3f7ea2bd792f0d9b6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a70603680e368c79db0f0b3f7ea2bd792f0d9b6d/comments", "author": null, "committer": null, "parents": [{"sha": "959e0a760641de7d2d5090b0b30a6077079530df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/959e0a760641de7d2d5090b0b30a6077079530df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/959e0a760641de7d2d5090b0b30a6077079530df"}], "stats": {"total": 45, "additions": 25, "deletions": 20}, "files": [{"sha": "d066040d2ebb7a72b5008c0af17afdafaf8a4cb9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a70603680e368c79db0f0b3f7ea2bd792f0d9b6d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a70603680e368c79db0f0b3f7ea2bd792f0d9b6d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a70603680e368c79db0f0b3f7ea2bd792f0d9b6d", "patch": "@@ -1,3 +1,11 @@\n+Thu Nov 26 17:49:29 1998  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* loop.c (check_dbra_loop): Update JUMP_LABEL field of jump insn\n+\twhen loop reversed.\n+\n+\t* unroll.c (precondition_loop_p): Return loop_initial_value\n+\tfor initial_value instead of loop_iteration_var.\n+\n Thu Nov 26 17:15:38 1998  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* config/c4x/c4x.md: Fix minor formatting problems.  Update docs."}, {"sha": "4fb51988fbf9a428550590a266095a04e3af35ad", "filename": "gcc/loop.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a70603680e368c79db0f0b3f7ea2bd792f0d9b6d/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a70603680e368c79db0f0b3f7ea2bd792f0d9b6d/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=a70603680e368c79db0f0b3f7ea2bd792f0d9b6d", "patch": "@@ -7107,16 +7107,18 @@ check_dbra_loop (loop_end, insn_count, loop_start)\n \t      end_sequence ();\n \t      emit_jump_insn_before (tem, loop_end);\n \n+\t      for (tem = PREV_INSN (loop_end);\n+\t\t   tem && GET_CODE (tem) != JUMP_INSN;\n+\t\t   tem = PREV_INSN (tem))\n+\t\t;\n+\n+\t      if (tem)\n+\t\tJUMP_LABEL (tem) = XEXP (jump_label, 0);\n+\n \t      if (nonneg)\n \t\t{\n-\t\t  for (tem = PREV_INSN (loop_end);\n-\t\t       tem && GET_CODE (tem) != JUMP_INSN;\n-\t\t       tem = PREV_INSN (tem))\n-\t\t    ;\n \t\t  if (tem)\n \t\t    {\n-\t\t      JUMP_LABEL (tem) = XEXP (jump_label, 0);\n-\n \t\t      /* Increment of LABEL_NUSES done above.  */\n \t\t      /* Register is now always nonnegative,\n \t\t\t so add REG_NONNEG note to the branch.  */"}, {"sha": "9bf6a514c2af6da1cf5ec0edcea32c11ef3d4371", "filename": "gcc/unroll.c", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a70603680e368c79db0f0b3f7ea2bd792f0d9b6d/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a70603680e368c79db0f0b3f7ea2bd792f0d9b6d/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=a70603680e368c79db0f0b3f7ea2bd792f0d9b6d", "patch": "@@ -1410,19 +1410,6 @@ precondition_loop_p (initial_value, final_value, increment, loop_start)\n       return 0;\n     }\n \n-  /* Now set initial_value to be the iteration_var, since that may be a\n-     simpler expression, and is guaranteed to be correct if all of the\n-     above tests succeed.\n-\n-     We can not use the initial_value as calculated, because it will be\n-     one too small for loops of the form \"while (i-- > 0)\".  We can not\n-     emit code before the loop_skip_over insns to fix this problem as this\n-     will then give a number one too large for loops of the form\n-     \"while (--i > 0)\".\n-\n-     Note that all loops that reach here are entered at the top, because\n-     this function is not called if the loop starts with a jump.  */\n-\n   /* Fail if loop_iteration_var is not live before loop_start, since we need\n      to test its value in the preconditioning code.  */\n \n@@ -1435,7 +1422,15 @@ precondition_loop_p (initial_value, final_value, increment, loop_start)\n       return 0;\n     }\n \n-  *initial_value = loop_iteration_var;\n+  /* ??? Note that if iteration_info is modifed to allow GIV iterators\n+     such as \"while (i-- > 0)\", the initial value will be one too small.\n+     In this case, loop_iteration_var could be used to determine\n+     the correct initial value, provided the loop has not been reversed.\n+     \n+     Also note that the absolute values of initial_value and\n+     final_value are unimportant as only their difference is used for\n+     calculating the number of loop iterations.  */\n+  *initial_value = loop_initial_value;\n   *increment = loop_increment;\n   *final_value = loop_final_value;\n "}]}