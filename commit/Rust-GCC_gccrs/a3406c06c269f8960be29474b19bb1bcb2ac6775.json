{"sha": "a3406c06c269f8960be29474b19bb1bcb2ac6775", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM0MDZjMDZjMjY5Zjg5NjBiZTI5NDc0YjE5YmIxYmNiMmFjNjc3NQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-04-02T01:26:14Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-04-02T01:26:14Z"}, "message": "Makefile.in (CXX_FOR_TARGET_FOR_RECURSIVE_MAKE, [...]): New macros.\n\n* Makefile.in (CXX_FOR_TARGET_FOR_RECURSIVE_MAKE, RECURSE_FLAGS):\nNew macros.\n(bootstrap, cross): Use RECURSE_FLAGS.\n* configure.in: Subst CXX_FOR_TARGET_FOR_RECURSIVE_MAKE.\n\nFrom-SVN: r40991", "tree": {"sha": "9de4f85db704f74a3bf582a155c631ce7047fb37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9de4f85db704f74a3bf582a155c631ce7047fb37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3406c06c269f8960be29474b19bb1bcb2ac6775", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3406c06c269f8960be29474b19bb1bcb2ac6775", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3406c06c269f8960be29474b19bb1bcb2ac6775", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3406c06c269f8960be29474b19bb1bcb2ac6775/comments", "author": null, "committer": null, "parents": [{"sha": "a3b63299e6974b2f7ac5855e3edcccd6367afc3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3b63299e6974b2f7ac5855e3edcccd6367afc3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3b63299e6974b2f7ac5855e3edcccd6367afc3c"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "627c6a27312d2b14dd23fcb9142ab25e9bb45ed5", "filename": "ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3406c06c269f8960be29474b19bb1bcb2ac6775/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3406c06c269f8960be29474b19bb1bcb2ac6775/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=a3406c06c269f8960be29474b19bb1bcb2ac6775", "patch": "@@ -1,3 +1,10 @@\n+2001-04-01  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* Makefile.in (CXX_FOR_TARGET_FOR_RECURSIVE_MAKE, RECURSE_FLAGS):\n+\tNew macros.\n+\t(bootstrap, cross): Use RECURSE_FLAGS.\n+\t* configure.in: Subst CXX_FOR_TARGET_FOR_RECURSIVE_MAKE.\n+\n 2001-03-27  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* configure.in (CXX_FOR_TARGET): Use xgcc for libstdc++-v3."}, {"sha": "dcdb6cde3c8ee0a5fdbe9b47ab6df4a0614630f8", "filename": "Makefile.in", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3406c06c269f8960be29474b19bb1bcb2ac6775/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3406c06c269f8960be29474b19bb1bcb2ac6775/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=a3406c06c269f8960be29474b19bb1bcb2ac6775", "patch": "@@ -218,6 +218,7 @@ FLAGS_FOR_TARGET =\n CC_FOR_TARGET =\n CHILL_FOR_TARGET =\n CXX_FOR_TARGET =\n+CXX_FOR_TARGET_FOR_RECURSIVE_MAKE =\n GCJ_FOR_TARGET =\n \n # If GCC_FOR_TARGET is not overriden on the command line, then this\n@@ -390,6 +391,14 @@ BASE_FLAGS_TO_PASS = \\\n \t\"gcc_version_trigger=$(gcc_version_trigger)\" \\\n \t\"target_alias=$(target_alias)\" \n \n+# For any flags above that may contain shell code that varies from one\n+# target library to another.  When doing recursive invocations of the\n+# top-level Makefile, we don't want the outer make to evaluate them,\n+# so we pass these variables down unchanged.  They must not contain\n+# single nor double quotes.\n+RECURSE_FLAGS = \\\n+\tCXX_FOR_TARGET='$(CXX_FOR_TARGET_FOR_RECURSIVE_MAKE)'\n+\n # Flags to pass down to most sub-makes, in which we're building with\n # the host environment.\n # If any variables are added here, they must be added to do-*, below.\n@@ -1345,7 +1354,8 @@ $(ALL_TARGET_MODULES):\n \t  r=`pwd`; export r; \\\n \t  s=`cd $(srcdir); pwd`; export s; \\\n \t  $(SET_LIB_PATH) \\\n-\t  (cd $(TARGET_SUBDIR)/$${dir}; $(MAKE) $(TARGET_FLAGS_TO_PASS) all); \\\n+\t  (cd $(TARGET_SUBDIR)/$${dir}; \\\n+\t    $(MAKE) $(TARGET_FLAGS_TO_PASS) all); \\\n \telse \\\n \t  true; \\\n \tfi\n@@ -1359,7 +1369,8 @@ $(CHECK_TARGET_MODULES):\n \t  r=`pwd`; export r; \\\n \t  s=`cd $(srcdir); pwd`; export s; \\\n \t  $(SET_LIB_PATH) \\\n-\t  (cd $(TARGET_SUBDIR)/$${dir};$(MAKE) $(TARGET_FLAGS_TO_PASS) check);\\\n+\t  (cd $(TARGET_SUBDIR)/$${dir}; \\\n+\t    $(MAKE) $(TARGET_FLAGS_TO_PASS) check);\\\n \telse \\\n \t  true; \\\n \tfi\n@@ -1474,7 +1485,7 @@ bootstrap bootstrap-lean bootstrap2 bootstrap2-lean bootstrap3 bootstrap3-lean b\n \ts=`cd $(srcdir); pwd` ; export s; \\\n \t$(SET_LIB_PATH) \\\n \techo \"Building runtime libraries\"; \\\n-\t$(MAKE) $(BASE_FLAGS_TO_PASS) all\n+\t$(MAKE) $(BASE_FLAGS_TO_PASS) $(RECURSE_FLAGS) all\n \n .PHONY: cross\n cross: all-texinfo all-bison all-byacc all-binutils all-gas all-ld\n@@ -1487,7 +1498,8 @@ cross: all-texinfo all-bison all-byacc all-binutils all-gas all-ld\n \ts=`cd $(srcdir); pwd` ; export s; \\\n \t$(SET_LIB_PATH) \\\n \techo \"Building runtime libraries\"; \\\n-\t$(MAKE) $(BASE_FLAGS_TO_PASS) all LANGUAGES=\"c c++\"\n+\t$(MAKE) $(BASE_FLAGS_TO_PASS) $(RECURSE_FLAGS) \\\n+\t  LANGUAGES=\"c c++\" all\n \n .PHONY: check-gcc\n check-gcc:"}, {"sha": "5b0ae6b61d641924d9b9df94e55f29a4102a279b", "filename": "configure.in", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3406c06c269f8960be29474b19bb1bcb2ac6775/configure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3406c06c269f8960be29474b19bb1bcb2ac6775/configure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.in?ref=a3406c06c269f8960be29474b19bb1bcb2ac6775", "patch": "@@ -1466,7 +1466,15 @@ case $CXX_FOR_TARGET in\n *' $(FLAGS_FOR_TARGET)') ;;\n *) CXX_FOR_TARGET=$CXX_FOR_TARGET' $(FLAGS_FOR_TARGET)' ;;\n esac\n-qCXX_FOR_TARGET=`echo \"$CXX_FOR_TARGET\" | sed 's,&,\\\\\\&,g'`\n+qCXX_FOR_TARGET=`echo \"$CXX_FOR_TARGET\" | sed 's,[&%],\\\\\\&,g'`\n+\n+# We want to defer the evaluation of `cmd`s and shell variables in\n+# CXX_FOR_TARGET when recursing in the top-level Makefile, such as for\n+# bootstrap.  We'll enclose CXX_FOR_TARGET_FOR_RECURSIVE_MAKE in single\n+# quotes, but we still have to duplicate `$'s so that shell variables\n+# can be expanded by the nested make as shell variables, not as make\n+# macros.\n+qqCXX_FOR_TARGET=`echo \"$qCXX_FOR_TARGET\" | sed -e 's,[$][$],$$$$,g'`\n \n targargs=\"--cache-file=../config.cache --host=${target_alias} --build=${build_alias} ${targargs}\"\n sed -e \"s:^TARGET_CONFIGDIRS[ \t]*=.*$:TARGET_CONFIGDIRS = ${target_configdirs}:\" \\\n@@ -1476,6 +1484,7 @@ sed -e \"s:^TARGET_CONFIGDIRS[ \t]*=.*$:TARGET_CONFIGDIRS = ${target_configdirs}:\"\n     -e \"s%^CHILL_FOR_TARGET[ \t]*=.*$%CHILL_FOR_TARGET = ${CHILL_FOR_TARGET}%\" \\\n     -e \"s%^GCJ_FOR_TARGET[      ]*=.*$%GCJ_FOR_TARGET = ${GCJ_FOR_TARGET}%\" \\\n     -e \"s%^CXX_FOR_TARGET[ \t]*=.*$%CXX_FOR_TARGET = ${qCXX_FOR_TARGET}%\" \\\n+    -e \"s%^CXX_FOR_TARGET_FOR_RECURSIVE_MAKE[ \t]*=.*$%CXX_FOR_TARGET_FOR_RECURSIVE_MAKE = ${qqCXX_FOR_TARGET}%\" \\\n     -e \"s%^TARGET_SUBDIR[ \t]*=.*$%TARGET_SUBDIR = ${target_subdir}%\" \\\n     -e \"s%^gxx_include_dir[ \t]*=.*$%gxx_include_dir=${gxx_include_dir}%\" \\\n        Makefile > Makefile.tem"}]}