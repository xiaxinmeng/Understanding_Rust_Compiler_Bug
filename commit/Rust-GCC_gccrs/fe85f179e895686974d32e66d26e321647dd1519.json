{"sha": "fe85f179e895686974d32e66d26e321647dd1519", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU4NWYxNzllODk1Njg2OTc0ZDMyZTY2ZDI2ZTMyMTY0N2RkMTUxOQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2001-12-27T23:34:31Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-12-27T23:34:31Z"}, "message": "re PR rtl-optimization/3508 (builtin memcmp() could be optimised)\n\n        * builtins.c (expand_builtin_memcmp): Optimize memcmp built-in\n        when all arguments are known constant.  Fixes PR opt/3508.\n\n        * gcc.c-torture/execute/string-opt-16.c: New testcase.\n\nFrom-SVN: r48335", "tree": {"sha": "b184d011cb0a84a8f17030c368d557336ab31867", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b184d011cb0a84a8f17030c368d557336ab31867"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe85f179e895686974d32e66d26e321647dd1519", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe85f179e895686974d32e66d26e321647dd1519", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe85f179e895686974d32e66d26e321647dd1519", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe85f179e895686974d32e66d26e321647dd1519/comments", "author": null, "committer": null, "parents": [{"sha": "30d7b5f4139259ea367158d33c40924826b407fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30d7b5f4139259ea367158d33c40924826b407fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30d7b5f4139259ea367158d33c40924826b407fd"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "d1327b7cd7e82831e5f6e028a29e6600756769fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe85f179e895686974d32e66d26e321647dd1519/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe85f179e895686974d32e66d26e321647dd1519/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe85f179e895686974d32e66d26e321647dd1519", "patch": "@@ -1,3 +1,8 @@\n+2001-12-27  Roger Sayle <roger@eyesopen.com>\n+\n+\t* builtins.c (expand_builtin_memcmp): Optimize memcmp built-in\n+\twhen all arguments are known constant.  Fixes PR opt/3508.\n+\n 2001-12-27  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/h8300/h8300.md (two anonymous patterns): Remove."}, {"sha": "d7d83e847ba116684e365ab80b44c3770767664a", "filename": "gcc/builtins.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe85f179e895686974d32e66d26e321647dd1519/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe85f179e895686974d32e66d26e321647dd1519/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=fe85f179e895686974d32e66d26e321647dd1519", "patch": "@@ -2252,6 +2252,7 @@ expand_builtin_memcmp (exp, arglist, target, mode)\n      enum machine_mode mode;\n {\n   tree arg1, arg2, len;\n+  const char *p1, *p2;\n \n   if (!validate_arglist (arglist,\n \t\t      POINTER_TYPE, POINTER_TYPE, INTEGER_TYPE, VOID_TYPE))\n@@ -2271,6 +2272,19 @@ expand_builtin_memcmp (exp, arglist, target, mode)\n       return const0_rtx;\n     }\n \n+  p1 = c_getstr (arg1);\n+  p2 = c_getstr (arg2);\n+\n+  /* If all arguments are constant, and the value of len is not greater\n+     than the lengths of arg1 and arg2, evaluate at compile-time.  */\n+  if (host_integerp (len, 1) && p1 && p2\n+      && compare_tree_int (len, strlen (p1)+1) <= 0\n+      && compare_tree_int (len, strlen (p2)+1) <= 0)\n+    {\n+      const int r = memcmp (p1, p2, tree_low_cst (len, 1));\n+      return (r < 0 ? constm1_rtx : (r > 0 ? const1_rtx : const0_rtx));\n+    }\n+\n   /* If len parameter is one, return an expression corresponding to\n      (*(const unsigned char*)arg1 - (const unsigned char*)arg2).  */\n   if (host_integerp (len, 1) && tree_low_cst (len, 1) == 1)"}, {"sha": "24abc584bc2ff53517563c4fad99329ab28a4eeb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe85f179e895686974d32e66d26e321647dd1519/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe85f179e895686974d32e66d26e321647dd1519/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fe85f179e895686974d32e66d26e321647dd1519", "patch": "@@ -1,3 +1,7 @@\n+2001-12-27  Roger Sayle <roger@eyesopen.com>\n+\n+\t* gcc.c-torture/execute/string-opt-16.c: New testcase.\n+\n 2001-12-27  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.dg/debug-1.c, gcc.dg/debug-2.c: New."}, {"sha": "a28cdb04271d7fe50e36fbc5c66af4589a888397", "filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-16.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe85f179e895686974d32e66d26e321647dd1519/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe85f179e895686974d32e66d26e321647dd1519/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-16.c?ref=fe85f179e895686974d32e66d26e321647dd1519", "patch": "@@ -0,0 +1,45 @@\n+/* Copyright (C) 2001  Free Software Foundation.\n+\n+   Ensure that builtin memcmp operations when all three arguments\n+   are constant is optimized and performs correctly.  Taken from\n+   PR optimize/3508.\n+\n+   Written by Roger Sayle, 12/26/2001.  */\n+\n+extern void abort (void);\n+extern void link_error (void);\n+\n+typedef __SIZE_TYPE__ size_t;\n+extern int memcmp (const void *, const void *, size_t);\n+\n+int\n+main (int argc)\n+{\n+  if (memcmp (\"abcd\", \"efgh\", 4) >= 0)\n+     link_error ();\n+  if (memcmp (\"abcd\", \"abcd\", 4) != 0)\n+     link_error ();\n+  if (memcmp (\"efgh\", \"abcd\", 4) <= 0)\n+     link_error ();\n+  return 0;\n+}\n+\n+#ifdef __OPTIMIZE__\n+/* When optimizing, all the above cases should be transformed into\n+   something else.  So any remaining calls to the original function\n+   should abort.  */\n+static int\n+memcmp (const void *s1, const void *s2, size_t len)\n+{\n+  abort ();\n+}\n+#else\n+/* When not optimizing, the above tests may generate references to\n+   the function link_error, but should never actually call it.  */\n+static void\n+link_error ()\n+{\n+  abort ();\n+}\n+#endif\n+"}]}