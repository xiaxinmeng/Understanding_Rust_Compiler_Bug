{"sha": "76ef38e3178a11e76a66b4d4c0e10e85fe186a45", "node_id": "C_kwDOANBUbNoAKDc2ZWYzOGUzMTc4YTExZTc2YTY2YjRkNGMwZTEwZTg1ZmUxODZhNDU", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-27T10:22:42Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-27T12:34:29Z"}, "message": "Improve wording for -freport-bug option.\n\n\tPR web/104254\n\ngcc/ChangeLog:\n\n\t* diagnostic.cc (diagnostic_initialize):\n\tInitialize report_bug flag.\n\t(diagnostic_action_after_output):\n\tExplain that -freport-bug option can be used for pre-processed\n\tfile creation.  Make the message shorter.\n\t(error_recursion): Rename Internal to internal.\n\t* diagnostic.h (struct diagnostic_context): New field.\n\t* opts.cc (common_handle_option): Init the field here.", "tree": {"sha": "c30754b3ffb58cdd75d98b6bc4cce36a98df5fb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c30754b3ffb58cdd75d98b6bc4cce36a98df5fb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76ef38e3178a11e76a66b4d4c0e10e85fe186a45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76ef38e3178a11e76a66b4d4c0e10e85fe186a45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76ef38e3178a11e76a66b4d4c0e10e85fe186a45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76ef38e3178a11e76a66b4d4c0e10e85fe186a45/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3989337e1e1e334bb6d6db5d441c751d0b9ae2e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3989337e1e1e334bb6d6db5d441c751d0b9ae2e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3989337e1e1e334bb6d6db5d441c751d0b9ae2e1"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "10472046bdc13e77792d023564f2840e6cdd6fe8", "filename": "gcc/diagnostic.cc", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76ef38e3178a11e76a66b4d4c0e10e85fe186a45/gcc%2Fdiagnostic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76ef38e3178a11e76a66b4d4c0e10e85fe186a45/gcc%2Fdiagnostic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.cc?ref=76ef38e3178a11e76a66b4d4c0e10e85fe186a45", "patch": "@@ -219,6 +219,8 @@ diagnostic_initialize (diagnostic_context *context, int n_opts)\n   context->show_line_numbers_p = false;\n   context->min_margin_width = 0;\n   context->show_ruler_p = false;\n+  context->report_bug = false;\n+\n   if (const char *var = getenv (\"GCC_EXTRA_DIAGNOSTIC_OUTPUT\"))\n     {\n       if (!strcmp (var, \"fixits-v1\"))\n@@ -665,12 +667,16 @@ diagnostic_action_after_output (diagnostic_context *context,\n \tif (context->abort_on_error)\n \t  real_abort ();\n \n-\tfnotice (stderr, \"Please submit a full bug report,\\n\"\n-\t\t \"with preprocessed source if appropriate.\\n\");\n+\tif (context->report_bug)\n+\t  fnotice (stderr, \"\\nPlease submit a full bug report, \"\n+\t\t   \"with preprocessed source.\\n\");\n+\telse\n+\t  fnotice (stderr, \"\\nPlease submit a full bug report, \"\n+\t\t   \"with preprocessed source (by using -freport-bug).\\n\");\n+\n \tif (count > 0)\n-\t  fnotice (stderr,\n-\t\t   (\"Please include the complete backtrace \"\n-\t\t    \"with any bug report.\\n\"));\n+\t  fnotice (stderr, \"Please include the complete backtrace \"\n+\t\t   \"with any bug report.\\n\");\n \tfnotice (stderr, \"See %s for instructions.\\n\", bug_report_url);\n \n \texit (ICE_EXIT_CODE);\n@@ -1437,8 +1443,8 @@ num_digits (int value)\n \n /* Given a partial pathname as input, return another pathname that\n    shares no directory elements with the pathname of __FILE__.  This\n-   is used by fancy_abort() to print `Internal compiler error in expr.cc'\n-   instead of `Internal compiler error in ../../GCC/gcc/expr.cc'.  */\n+   is used by fancy_abort() to print `internal compiler error in expr.cc'\n+   instead of `internal compiler error in ../../GCC/gcc/expr.cc'.  */\n \n const char *\n trim_filename (const char *name)\n@@ -1988,7 +1994,7 @@ error_recursion (diagnostic_context *context)\n     pp_newline_and_flush (context->printer);\n \n   fnotice (stderr,\n-\t   \"Internal compiler error: Error reporting routines re-entered.\\n\");\n+\t   \"internal compiler error: error reporting routines re-entered.\\n\");\n \n   /* Call diagnostic_action_after_output to get the \"please submit a bug\n      report\" message.  */"}, {"sha": "3ca32979dde5d4e52951f7fe49b67db11cfbc8c2", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76ef38e3178a11e76a66b4d4c0e10e85fe186a45/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76ef38e3178a11e76a66b4d4c0e10e85fe186a45/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=76ef38e3178a11e76a66b4d4c0e10e85fe186a45", "patch": "@@ -340,6 +340,9 @@ struct diagnostic_context\n      source output.  */\n   bool show_ruler_p;\n \n+  /* True if -freport-bug option is used.  */\n+  bool report_bug;\n+\n   /* Used to specify additional diagnostic output to be emitted after the\n      rest of the diagnostic.  This is for implementing\n      -fdiagnostics-parseable-fixits and GCC_EXTRA_DIAGNOSTIC_OUTPUT.  */"}, {"sha": "7d30deb8e4be661d19338dcde4a8b4e3426928fb", "filename": "gcc/opts.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76ef38e3178a11e76a66b4d4c0e10e85fe186a45/gcc%2Fopts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76ef38e3178a11e76a66b4d4c0e10e85fe186a45/gcc%2Fopts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.cc?ref=76ef38e3178a11e76a66b4d4c0e10e85fe186a45", "patch": "@@ -3158,6 +3158,10 @@ common_handle_option (struct gcc_options *opts,\n \tdc->tabstop = value;\n       break;\n \n+    case OPT_freport_bug:\n+      dc->report_bug = value;\n+      break;\n+\n     default:\n       /* If the flag was handled in a standard way, assume the lack of\n \t processing here is intentional.  */"}]}