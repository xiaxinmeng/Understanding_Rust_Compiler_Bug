{"sha": "df7cc9b576724e644cbc9d01c73b7a973866739c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY3Y2M5YjU3NjcyNGU2NDRjYmM5ZDAxYzczYjdhOTczODY2NzM5Yw==", "commit": {"author": {"name": "Feng Wang", "email": "fengwang@nudt.edu.cn", "date": "2005-04-05T08:54:50Z"}, "committer": {"name": "Feng Wang", "email": "fengwang@gcc.gnu.org", "date": "2005-04-05T08:54:50Z"}, "message": "re PR fortran/15959 (ICE and assertion failure in trans-decl.c with character initialization)\n\n2005-04-05  Feng Wang  <fengwang@nudt.edu.cn>\n\n\tPR fortran/15959\n\tPR fortran/20713\n\n\t* array.c (resolve_character_array_constructor): New function. Set\n\tconstant character array's character length.\n\t(gfc_resolve_array_constructor): Use it.\n\t* decl.c (add_init_expr_to_sym): Set symbol and initializer character\n\tlength.\n\t(gfc_set_constant_character_len): New function. Set constant character\n\texpression according the given length.\n\t* match.h (gfc_set_constant_character_len): Add prototype.\n\n2005-04-05  Feng Wang  <fengwang@nudt.edu.cn>\n\n\t* gfortran.dg/pr15959.f90: New test.\n\t* gfortran.dg/string_pad_trunc.f90: New test.\n\nFrom-SVN: r97613", "tree": {"sha": "f6c74a9c71a05857596eb14d9cf27f90b0dd91cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6c74a9c71a05857596eb14d9cf27f90b0dd91cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df7cc9b576724e644cbc9d01c73b7a973866739c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df7cc9b576724e644cbc9d01c73b7a973866739c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df7cc9b576724e644cbc9d01c73b7a973866739c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df7cc9b576724e644cbc9d01c73b7a973866739c/comments", "author": null, "committer": null, "parents": [{"sha": "3eebd7765db0d94f8231a5f235b0d1afa475343d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eebd7765db0d94f8231a5f235b0d1afa475343d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eebd7765db0d94f8231a5f235b0d1afa475343d"}], "stats": {"total": 127, "additions": 125, "deletions": 2}, "files": [{"sha": "dc660d45580ba44163fed38b2f44ea01dd634345", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df7cc9b576724e644cbc9d01c73b7a973866739c/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df7cc9b576724e644cbc9d01c73b7a973866739c/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=df7cc9b576724e644cbc9d01c73b7a973866739c", "patch": "@@ -1499,9 +1499,45 @@ resolve_array_list (gfc_constructor * p)\n   return t;\n }\n \n+/* Resolve character array constructor. If it is a constant character array and\n+   not specified character length, update character length to the maximum of\n+   its element constructors' length.  */\n \n-/* Resolve all of the expressions in an array list.\n-   TODO: String lengths.  */\n+static void\n+resolve_character_array_constructor (gfc_expr * expr)\n+{\n+  gfc_constructor * p;\n+  int max_length;\n+\n+  gcc_assert (expr->expr_type == EXPR_ARRAY);\n+  gcc_assert (expr->ts.type == BT_CHARACTER);\n+\n+  max_length = -1;\n+\n+  if (expr->ts.cl == NULL || expr->ts.cl->length == NULL)\n+    {\n+      /* Find the maximum length of the elements. Do nothing for variable array\n+\t constructor.  */\n+      for (p = expr->value.constructor; p; p = p->next)\n+\tif (p->expr->expr_type == EXPR_CONSTANT)\n+\t  max_length = MAX (p->expr->value.character.length, max_length);\n+\telse\n+\t  return;\n+\n+      if (max_length != -1)\n+\t{\n+\t  /* Update the character length of the array constructor.  */\n+\t  if (expr->ts.cl == NULL)\n+\t    expr->ts.cl = gfc_get_charlen ();\n+\t  expr->ts.cl->length = gfc_int_expr (max_length);\n+\t  /* Update the element constructors.  */\n+\t  for (p = expr->value.constructor; p; p = p->next)\n+\t    gfc_set_constant_character_len (max_length, p->expr);\n+\t}\n+    }\n+}\n+\n+/* Resolve all of the expressions in an array list.  */\n \n try\n gfc_resolve_array_constructor (gfc_expr * expr)\n@@ -1511,6 +1547,8 @@ gfc_resolve_array_constructor (gfc_expr * expr)\n   t = resolve_array_list (expr->value.constructor);\n   if (t == SUCCESS)\n     t = gfc_check_constructor_type (expr);\n+  if (t == SUCCESS && expr->ts.type == BT_CHARACTER)\n+    resolve_character_array_constructor (expr);\n \n   return t;\n }"}, {"sha": "4a566a99cff3a6db70dc35cc3cb95b3cf918ff63", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df7cc9b576724e644cbc9d01c73b7a973866739c/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df7cc9b576724e644cbc9d01c73b7a973866739c/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=df7cc9b576724e644cbc9d01c73b7a973866739c", "patch": "@@ -646,6 +646,30 @@ build_sym (const char *name, gfc_charlen * cl,\n   return SUCCESS;\n }\n \n+/* Set character constant to the given length. The constant will be padded or\n+   truncated.  */\n+\n+void\n+gfc_set_constant_character_len (int len, gfc_expr * expr)\n+{\n+  char * s;\n+  int slen;\n+\n+  gcc_assert (expr->expr_type == EXPR_CONSTANT);\n+  gcc_assert (expr->ts.type == BT_CHARACTER && expr->ts.kind == 1);\n+\n+  slen = expr->value.character.length;\n+  if (len != slen)\n+    {\n+      s = gfc_getmem (len);\n+      memcpy (s, expr->value.character.string, MIN (len, slen));\n+      if (len > slen)\n+\tmemset (&s[slen], ' ', len - slen);\n+      gfc_free (expr->value.character.string);\n+      expr->value.character.string = s;\n+      expr->value.character.length = len;\n+    }\n+}\n \n /* Function called by variable_decl() that adds an initialization\n    expression to a symbol.  */\n@@ -711,6 +735,35 @@ add_init_expr_to_sym (const char *name, gfc_expr ** initp,\n \t  && gfc_check_assign_symbol (sym, init) == FAILURE)\n \treturn FAILURE;\n \n+      if (sym->ts.type == BT_CHARACTER && sym->ts.cl)\n+\t{\n+\t  /* Update symbol character length according initializer.  */\n+\t  if (sym->ts.cl->length == NULL)\n+\t    {\n+\t      if (init->expr_type == EXPR_CONSTANT)\n+\t\tsym->ts.cl->length =\n+\t\t\tgfc_int_expr (init->value.character.length);\n+\t      else if (init->expr_type == EXPR_ARRAY)\n+\t\tsym->ts.cl->length = gfc_copy_expr (init->ts.cl->length);\n+\t    }\n+\t  /* Update initializer character length according symbol.  */\n+\t  else if (sym->ts.cl->length->expr_type == EXPR_CONSTANT)\n+\t    {\n+\t      int len = mpz_get_si (sym->ts.cl->length->value.integer);\n+\t      gfc_constructor * p;\n+\n+\t      if (init->expr_type == EXPR_CONSTANT)\n+\t\tgfc_set_constant_character_len (len, init);\n+\t      else if (init->expr_type == EXPR_ARRAY)\n+\t\t{\n+\t\t  gfc_free_expr (init->ts.cl->length);\n+\t\t  init->ts.cl->length = gfc_copy_expr (sym->ts.cl->length);\n+\t\t  for (p = init->value.constructor; p; p = p->next)\n+\t\t    gfc_set_constant_character_len (len, p->expr);\n+\t\t}\n+\t    }\n+\t}\n+\n       /* Add initializer.  Make sure we keep the ranks sane.  */\n       if (sym->attr.dimension && init->rank == 0)\n \tinit->rank = sym->as->rank;"}, {"sha": "2351f9b92bfedb83904838893636b20ab37c99fa", "filename": "gcc/fortran/match.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df7cc9b576724e644cbc9d01c73b7a973866739c/gcc%2Ffortran%2Fmatch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df7cc9b576724e644cbc9d01c73b7a973866739c/gcc%2Ffortran%2Fmatch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.h?ref=df7cc9b576724e644cbc9d01c73b7a973866739c", "patch": "@@ -108,6 +108,8 @@ match gfc_match_derived_decl (void);\n match gfc_match_implicit_none (void);\n match gfc_match_implicit (void);\n \n+void gfc_set_constant_character_len (int, gfc_expr *);\n+\n /* Matchers for attribute declarations */\n match gfc_match_allocatable (void);\n match gfc_match_dimension (void);"}, {"sha": "58d473c18bb61388d13ad24ff2bd69055333aa56", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df7cc9b576724e644cbc9d01c73b7a973866739c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df7cc9b576724e644cbc9d01c73b7a973866739c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=df7cc9b576724e644cbc9d01c73b7a973866739c", "patch": "@@ -1,3 +1,8 @@\n+2005-04-05  Feng Wang  <fengwang@nudt.edu.cn>\n+\n+\t* gfortran.dg/pr15959.f90: New test.\n+\t* gfortran.dg/string_pad_trunc.f90: New test.\n+\n 2005-04-05  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \t* gfortran.dg/backspace.f, gfortran.dg/g77_intrinsics_funcs.f,"}, {"sha": "b7f3719dfe4ae452c2451d12fc9c3f4c266e9e55", "filename": "gcc/testsuite/gfortran.dg/pr15959.f90", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df7cc9b576724e644cbc9d01c73b7a973866739c/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr15959.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df7cc9b576724e644cbc9d01c73b7a973866739c/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr15959.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr15959.f90?ref=df7cc9b576724e644cbc9d01c73b7a973866739c", "patch": "@@ -0,0 +1,5 @@\n+! { dg-do run }\n+! Test initializer of character array. PR15959\n+character (*), parameter :: a (1:2) = (/'ab', 'abc'/)\n+if (a(2) .ne. 'abc') call abort()\n+end"}, {"sha": "738a181b962d350093b4da8134ef85c1521a3ea4", "filename": "gcc/testsuite/gfortran.dg/string_pad_trunc.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df7cc9b576724e644cbc9d01c73b7a973866739c/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_pad_trunc.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df7cc9b576724e644cbc9d01c73b7a973866739c/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_pad_trunc.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_pad_trunc.f90?ref=df7cc9b576724e644cbc9d01c73b7a973866739c", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do run }\n+! PR20713. Pad and truncate string.\n+\n+character(len = 6),parameter:: a = 'hello'\n+character(len = 6),parameter:: b = 'hello *'\n+character(len = 6),parameter:: c (1:1) = 'hello'\n+character(len = 11) line\n+\n+write (line, '(6A)') a, 'world'\n+if (line .ne. 'hello world') call abort\n+\n+write (line, '(6A)') b, 'world'\n+if (line .ne. 'hello world') call abort\n+\n+write (line, '(6A)') c, 'world'\n+if (line .ne. 'hello world') call abort\n+\n+write (line, '(6A)') c(1), 'world'\n+if (line .ne. 'hello world') call abort\n+end"}]}