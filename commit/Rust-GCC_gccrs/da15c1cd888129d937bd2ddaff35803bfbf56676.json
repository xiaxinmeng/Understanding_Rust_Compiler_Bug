{"sha": "da15c1cd888129d937bd2ddaff35803bfbf56676", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGExNWMxY2Q4ODgxMjlkOTM3YmQyZGRhZmYzNTgwM2JmYmY1NjY3Ng==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-08-14T09:03:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-08-14T09:03:24Z"}, "message": "(Task_Cont, Task_Stop): New functions, thin binding to the VxWorks routines which have changed between VxWorks 5 and 6.\n\n\t(Task_Cont, Task_Stop): New functions, thin\n\tbinding to the VxWorks routines which have changed between VxWorks 5\n\tand 6.\n\t(Int_Lock, Int_Unlock): New function, thin binding to kernel routines\n\twhich are not callable from a RTP.\n\nFrom-SVN: r127473", "tree": {"sha": "159c59d9e7763052adb6a7a010f97770f9c73672", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/159c59d9e7763052adb6a7a010f97770f9c73672"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da15c1cd888129d937bd2ddaff35803bfbf56676", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da15c1cd888129d937bd2ddaff35803bfbf56676", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da15c1cd888129d937bd2ddaff35803bfbf56676", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da15c1cd888129d937bd2ddaff35803bfbf56676/comments", "author": null, "committer": null, "parents": [{"sha": "d58fb3be4284dcbfbf423a8df4fa3736e6f5fb61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d58fb3be4284dcbfbf423a8df4fa3736e6f5fb61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d58fb3be4284dcbfbf423a8df4fa3736e6f5fb61"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "d3a8cbd422acd5ebe7e7428d6bcfd14072d01cfb", "filename": "gcc/ada/s-osinte-vxworks6.ads", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da15c1cd888129d937bd2ddaff35803bfbf56676/gcc%2Fada%2Fs-osinte-vxworks6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da15c1cd888129d937bd2ddaff35803bfbf56676/gcc%2Fada%2Fs-osinte-vxworks6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-vxworks6.ads?ref=da15c1cd888129d937bd2ddaff35803bfbf56676", "patch": "@@ -6,8 +6,8 @@\n --                                                                          --\n --                                   S p e c                                --\n --                                                                          --\n---             Copyright (C) 1991-1994, Florida State University            --\n---             Copyright (C) 1995-2007, Free Software Foundation, Inc.      --\n+--            Copyright (C) 1991-1994, Florida State University             --\n+--          Copyright (C) 1995-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -201,6 +201,28 @@ package System.OS_Interface is\n    function getpid return t_id;\n    pragma Inline (getpid);\n \n+   function Task_Stop (tid : t_id) return int;\n+   pragma Inline (Task_Stop);\n+   --  If we are in the kernel space, continue the task whose t_id is\n+   --  given in parameter if it has been stopped previously to be examined\n+   --  by the debugger (e.g. by taskStop). It typically maps to taskResume\n+   --  on VxWorks 5 and to taskCont on VxWorks 6.\n+\n+   function Task_Cont (tid : t_id) return int;\n+   pragma Inline (Task_Cont);\n+   --  If we are in the kernel space, lock interrupts. It typically maps to\n+   --  intLock.\n+\n+   function Int_Lock return int;\n+   pragma Inline (Int_Lock);\n+   --  If we are in the kernel space, lock interrupts. It typically maps to\n+   --  intLock.\n+\n+   function Int_Unlock return int;\n+   pragma Inline (Int_Unlock);\n+   --  If we are in the kernel space, unlock interrupts. It typically maps to\n+   --  intUnlock.\n+\n    ----------\n    -- Time --\n    ----------"}]}