{"sha": "5a5064dcb35dced4e8e81d362a8086ad6cc617d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE1MDY0ZGNiMzVkY2VkNGU4ZTgxZDM2MmE4MDg2YWQ2Y2M2MTdkOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-08-21T23:21:30Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-08-21T23:21:30Z"}, "message": "(expand_binop): If, e.g., mulqi3 doesn't exist, try mulqihi3.\n\nFrom-SVN: r1932", "tree": {"sha": "4de5a0e578751dec82ce7b923641cce56714b43a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4de5a0e578751dec82ce7b923641cce56714b43a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a5064dcb35dced4e8e81d362a8086ad6cc617d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a5064dcb35dced4e8e81d362a8086ad6cc617d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a5064dcb35dced4e8e81d362a8086ad6cc617d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a5064dcb35dced4e8e81d362a8086ad6cc617d8/comments", "author": null, "committer": null, "parents": [{"sha": "2f9ba5a9a32a37740571bbd4ab2cf10b1411ef4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f9ba5a9a32a37740571bbd4ab2cf10b1411ef4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f9ba5a9a32a37740571bbd4ab2cf10b1411ef4e"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "cee0762bafbb33a191790dba44b3b0aa4f6dc822", "filename": "gcc/optabs.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5064dcb35dced4e8e81d362a8086ad6cc617d8/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5064dcb35dced4e8e81d362a8086ad6cc617d8/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=5a5064dcb35dced4e8e81d362a8086ad6cc617d8", "patch": "@@ -413,15 +413,39 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n \tdelete_insns_since (last);\n     }\n \n+  /* If this is a multiply, see if we can do a widening operation that\n+     takes operands of this mode and makes a wider mode.  */\n+\n+  if (binoptab == smul_optab && GET_MODE_WIDER_MODE (mode) != VOIDmode\n+      && (((unsignedp ? umul_widen_optab : smul_widen_optab)\n+\t   ->handlers[(int) GET_MODE_WIDER_MODE (mode)].insn_code)\n+\t  != CODE_FOR_nothing))\n+    {\n+      temp = expand_binop (GET_MODE_WIDER_MODE (mode),\n+\t\t\t   unsignedp ? umul_widen_optab : smul_widen_optab,\n+\t\t\t   op0, op1, 0, unsignedp, OPTAB_DIRECT);\n+\n+      if (GET_MODE_CLASS (mode) == MODE_INT)\n+\treturn gen_lowpart (mode, temp);\n+      else\n+\treturn convert_to_mode (mode, temp, unsignedp);\n+    }\n+\n   /* Look for a wider mode of the same class for which we think we\n-     can open-code the operation.  */\n+     can open-code the operation.  Check for a widening multiply at the\n+     wider mode as well.  */\n \n   if ((class == MODE_INT || class == MODE_FLOAT || class == MODE_COMPLEX_FLOAT)\n       && mode != OPTAB_DIRECT && mode != OPTAB_LIB)\n     for (wider_mode = GET_MODE_WIDER_MODE (mode); wider_mode != VOIDmode;\n \t wider_mode = GET_MODE_WIDER_MODE (wider_mode))\n       {\n-\tif (binoptab->handlers[(int) wider_mode].insn_code != CODE_FOR_nothing)\n+\tif (binoptab->handlers[(int) wider_mode].insn_code != CODE_FOR_nothing\n+\t    || (binoptab == smul_optab\n+\t\t&& GET_MODE_WIDER_MODE (wider_mode) != VOIDmode\n+\t\t&& (((unsignedp ? umul_widen_optab : smul_widen_optab)\n+\t\t     ->handlers[(int) GET_MODE_WIDER_MODE (wider_mode)].insn_code)\n+\t\t    != CODE_FOR_nothing)))\n \t  {\n \t    rtx xop0 = op0, xop1 = op1;\n \t    int no_extend = 0;"}]}