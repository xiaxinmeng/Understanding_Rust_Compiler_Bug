{"sha": "e0374221d9a8296937d7943791de7267a9d7dafa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAzNzQyMjFkOWE4Mjk2OTM3ZDc5NDM3OTFkZTcyNjdhOWQ3ZGFmYQ==", "commit": {"author": {"name": "Adrian Straetling", "email": "straetling@de.ibm.com", "date": "2005-06-07T16:35:27Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2005-06-07T16:35:27Z"}, "message": "s390.md: (\"UNSPECV_MB\", \"UNSPECV_CAS\"): New constants.\n\n2005-06-07  Adrian Straetling  <straetling@de.ibm.com>\n\ngcc/ChangeLog:\n\t* config/s390/s390.md: (\"UNSPECV_MB\", \"UNSPECV_CAS\"): New constants.\n\t(\"type\"): Add \"sem\" to 'type' attribute.\n\t(\"memory_barrier\", \"*memory_barrier\", \"sync_compare_and_swapdi\",\n\t\"sync_compare_and_swapsi\", \"sync_compare_and_swap_ccdi\",\n\t\"sync_compare_and_swap_ccsi\", \"*sync_compare_and_swap_ccdi\",\n\t\"*sync_compare_and_swap_ccsi\"): New patterns.\n\t* config/s390/2064.md: (\"z_sem\"): New insn_reservation.\n\t* config/s390/2084.md: (\"x_sem\"): New insn_reservation.\n\t* config/s390/s390.c: (s390_compare_emitted): New global variable.\n\t(s390_emit_compare): Do not emit comparison again after cas.\n\t* config/s390/s390.h (s390_compare_emitted): Declare.\n\nlibstdc++/ChangeLog:\n\t* config/cpu/s390/atomicity.h: (__exchange_and_add,\n\t__atomic_add): Use the builtins for atomic memory operations.\n\nFrom-SVN: r100711", "tree": {"sha": "bb3a25e110cedc41afc38795fab064c14523fc41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb3a25e110cedc41afc38795fab064c14523fc41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0374221d9a8296937d7943791de7267a9d7dafa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0374221d9a8296937d7943791de7267a9d7dafa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0374221d9a8296937d7943791de7267a9d7dafa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0374221d9a8296937d7943791de7267a9d7dafa/comments", "author": null, "committer": null, "parents": [{"sha": "b6e7e9af0465df9134110217990127a47bc5f5c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6e7e9af0465df9134110217990127a47bc5f5c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6e7e9af0465df9134110217990127a47bc5f5c5"}], "stats": {"total": 154, "additions": 135, "deletions": 19}, "files": [{"sha": "6796d23fee138eb7f76a56a703153ab58893a3bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0374221d9a8296937d7943791de7267a9d7dafa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0374221d9a8296937d7943791de7267a9d7dafa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0374221d9a8296937d7943791de7267a9d7dafa", "patch": "@@ -1,3 +1,17 @@\n+2005-06-07  Adrian Straetling  <straetling@de.ibm.com>\n+\n+\t* config/s390/s390.md: (\"UNSPECV_MB\", \"UNSPECV_CAS\"): New constants.\n+\t(\"type\"): Add \"sem\" to 'type' attribute.\n+\t(\"memory_barrier\", \"*memory_barrier\", \"sync_compare_and_swapdi\",\n+\t\"sync_compare_and_swapsi\", \"sync_compare_and_swap_ccdi\",\n+\t\"sync_compare_and_swap_ccsi\", \"*sync_compare_and_swap_ccdi\",\n+\t\"*sync_compare_and_swap_ccsi\"): New patterns.\n+\t* config/s390/2064.md: (\"z_sem\"): New insn_reservation.\n+\t* config/s390/2084.md: (\"x_sem\"): New insn_reservation.\n+\t* config/s390/s390.c: (s390_compare_emitted): New global variable.\n+\t(s390_emit_compare): Do not emit comparison again after cas.\n+\t* config/s390/s390.h (s390_compare_emitted): Declare.\n+\n 2005-06-07  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* sbitmap.h (sbitmap_iterator, sbitmap_iter_init,"}, {"sha": "4c757acf1effab7c552a615ab49fcbe542d91d29", "filename": "gcc/config/s390/2064.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0374221d9a8296937d7943791de7267a9d7dafa/gcc%2Fconfig%2Fs390%2F2064.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0374221d9a8296937d7943791de7267a9d7dafa/gcc%2Fconfig%2Fs390%2F2064.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2F2064.md?ref=e0374221d9a8296937d7943791de7267a9d7dafa", "patch": "@@ -67,6 +67,11 @@\n        (eq_attr \"type\" \"store\"))\n   \"z_e1,z_wr\")\n \n+(define_insn_reservation \"z_sem\" 2\n+  (and (eq_attr \"cpu\" \"z900,g5,g6\")\n+       (eq_attr \"type\" \"sem\"))\n+  \"z_e1*2,z_wr\")\n+\n (define_insn_reservation \"z_call\" 5\n   (and (eq_attr \"cpu\" \"z900,g5,g6\")\n        (eq_attr \"type\" \"jsr\"))"}, {"sha": "ca106c0f680ab40a7216e65571fa007b01c3228c", "filename": "gcc/config/s390/2084.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0374221d9a8296937d7943791de7267a9d7dafa/gcc%2Fconfig%2Fs390%2F2084.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0374221d9a8296937d7943791de7267a9d7dafa/gcc%2Fconfig%2Fs390%2F2084.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2F2084.md?ref=e0374221d9a8296937d7943791de7267a9d7dafa", "patch": "@@ -123,6 +123,11 @@\n        (eq_attr \"type\" \"idiv\"))\n   \"x-e1-np*10,x-wr-np\")\n \n+(define_insn_reservation \"x_sem\" 17 \n+  (and (eq_attr \"cpu\" \"z990\")\n+       (eq_attr \"type\" \"sem\"))\n+  \"x-e1-np+x-mem,x-e1-np*16,x-wr-st\") \n+\n ;;\n ;; Multicycle insns\n ;;"}, {"sha": "54661eddbc6f8f826bdd008b86d5fd74979e4bae", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0374221d9a8296937d7943791de7267a9d7dafa/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0374221d9a8296937d7943791de7267a9d7dafa/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=e0374221d9a8296937d7943791de7267a9d7dafa", "patch": "@@ -163,6 +163,10 @@ static int s390_sr_alias_set = 0;\n    emitted.  */\n rtx s390_compare_op0, s390_compare_op1;\n \n+/* Save the result of a compare_and_swap  until the branch or scc is\n+   emitted.  */\n+rtx s390_compare_emitted = NULL_RTX;\n+\n /* Structure used to hold the components of a S/390 memory\n    address.  A legitimate address on S/390 is of the general\n    form\n@@ -609,10 +613,21 @@ rtx\n s390_emit_compare (enum rtx_code code, rtx op0, rtx op1)\n {\n   enum machine_mode mode = s390_select_ccmode (code, op0, op1);\n-  rtx cc = gen_rtx_REG (mode, CC_REGNUM);\n+  rtx ret = NULL_RTX;\n \n-  emit_insn (gen_rtx_SET (VOIDmode, cc, gen_rtx_COMPARE (mode, op0, op1)));\n-  return gen_rtx_fmt_ee (code, VOIDmode, cc, const0_rtx);\n+  /* Do not output a redundant compare instruction if a compare_and_swap\n+     pattern already computed the result and the machine modes match.  */\n+  if (s390_compare_emitted && GET_MODE (s390_compare_emitted) == mode)\n+    ret = gen_rtx_fmt_ee (code, VOIDmode, s390_compare_emitted, const0_rtx); \n+  else\n+    {\n+      rtx cc = gen_rtx_REG (mode, CC_REGNUM);\n+      \n+      emit_insn (gen_rtx_SET (VOIDmode, cc, gen_rtx_COMPARE (mode, op0, op1)));\n+      ret = gen_rtx_fmt_ee (code, VOIDmode, cc, const0_rtx); \n+    }\n+  s390_compare_emitted = NULL_RTX;\n+  return ret;\n }\n \n /* Emit a jump instruction to TARGET.  If COND is NULL_RTX, emit an"}, {"sha": "f04f1387f48fad475034d4cfa2b1c45294fba0b1", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0374221d9a8296937d7943791de7267a9d7dafa/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0374221d9a8296937d7943791de7267a9d7dafa/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=e0374221d9a8296937d7943791de7267a9d7dafa", "patch": "@@ -799,7 +799,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Define the information needed to generate branch and scc insns.  This is\n    stored from the compare operation.  Note that we can't use \"rtx\" here\n    since it hasn't been defined!  */\n-extern struct rtx_def *s390_compare_op0, *s390_compare_op1;\n+extern struct rtx_def *s390_compare_op0, *s390_compare_op1, *s390_compare_emitted;\n \n \n /* Relative costs of operations.  */"}, {"sha": "34ecc7ccd60e7cc8e13472edb0dea9be5cf831ae", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 85, "deletions": 1, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0374221d9a8296937d7943791de7267a9d7dafa/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0374221d9a8296937d7943791de7267a9d7dafa/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=e0374221d9a8296937d7943791de7267a9d7dafa", "patch": "@@ -146,6 +146,10 @@\n \n    ; TLS support\n    (UNSPECV_SET_TP\t\t500)\n+\n+   ; Atomic Support\n+   (UNSPECV_MB\t\t\t700)\n+   (UNSPECV_CAS\t\t\t701)\n   ])\n \n ;;\n@@ -177,7 +181,7 @@\n ;; Instruction type attribute used for scheduling.\n \n (define_attr \"type\" \"none,integer,load,lr,la,larl,lm,stm,\n-\t             cs,vs,store,idiv,\n+\t             cs,vs,store,sem,idiv,\n                      imulhi,imulsi,imuldi,\n \t\t     branch,jsr,fsimpdf,fsimpsf,\n \t\t     floaddf,floadsf,fstoredf,fstoresf,\n@@ -6691,6 +6695,86 @@\n    (set_attr \"type\"  \"jsr\")\n    (set_attr \"atype\" \"agen\")])\n \n+;;\n+;;- Atomic operations\n+;;\n+\n+;\n+; memory barrier pattern.\n+;\n+\n+(define_expand \"memory_barrier\"\n+  [(set (mem:BLK (match_dup 0))\n+\t(unspec_volatile:BLK [(mem:BLK (match_dup 0))] UNSPECV_MB))]\n+  \"\"\n+{\n+  operands[0] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (DImode));\n+  MEM_VOLATILE_P (operands[0]) = 1;\n+})\n+\n+(define_insn \"*memory_barrier\"\n+  [(set (match_operand:BLK 0 \"\" \"\")\n+\t(unspec_volatile:BLK [(match_operand:BLK 1 \"\" \"\")] UNSPECV_MB))]\n+  \"\"\n+  \"bcr\\t15,0\"\n+  [(set_attr \"op_type\" \"RR\")])\n+\n+;\n+; compare and swap patterns.\n+;\n+\n+(define_insn \"sync_compare_and_swap<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=r\")\n+        (match_operand:GPR 1 \"memory_operand\" \"+Q\"))\n+   (set (match_dup 1)\n+\t(unspec_volatile:GPR\n+\t  [(match_dup 1)\n+\t   (match_operand:GPR 2 \"register_operand\" \"0\")\n+\t   (match_operand:GPR 3 \"register_operand\" \"r\")]\n+\t  UNSPECV_CAS))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"\"\n+  \"cs<g>\\t%0,%3,%S1\"\n+  [(set_attr \"op_type\" \"RS<E>\")\n+   (set_attr \"type\"   \"sem\")])\n+\n+(define_expand \"sync_compare_and_swap_cc<mode>\"\n+  [(parallel\n+    [(set (match_operand:GPR 0 \"register_operand\" \"\")\n+          (match_operand:GPR 1 \"memory_operand\" \"\"))\n+     (set (match_dup 1)\n+\t  (unspec_volatile:GPR\n+\t    [(match_dup 1)\n+\t     (match_operand:GPR 2 \"register_operand\" \"\")\n+\t     (match_operand:GPR 3 \"register_operand\" \"\")]\n+\t    UNSPECV_CAS))\n+     (set (match_dup 4)\n+\t  (compare:CCZ (match_dup 1) (match_dup 2)))])]\n+  \"\"\n+{\n+  operands[4] = gen_rtx_REG (CCZmode, CC_REGNUM);\n+  s390_compare_op0 = operands[1];\n+  s390_compare_op1 = operands[2];\n+  s390_compare_emitted = operands[4];\n+})\n+\n+(define_insn \"*sync_compare_and_swap_cc<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=r\")\n+\t(match_operand:GPR 1 \"memory_operand\" \"+Q\"))\n+   (set (match_dup 1)\n+\t(unspec_volatile:GPR\n+\t  [(match_dup 1)\n+\t   (match_operand:GPR 2 \"register_operand\" \"0\")\n+\t   (match_operand:GPR 3 \"register_operand\" \"r\")]\n+\t  UNSPECV_CAS))\n+   (set (reg:CCZ CC_REGNUM)\n+\t(compare:CCZ (match_dup 1) (match_dup 2)))]\n+  \"\" \n+  \"cs<g>\\t%0,%3,%S1\"\n+  [(set_attr \"op_type\" \"RS<E>\")\n+   (set_attr \"type\"   \"sem\")])\n+\n+\n ;;\n ;;- Miscellaneous instructions.\n ;;"}, {"sha": "37f3fc3a782a30ad97c32c5851d3026d7480fb85", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0374221d9a8296937d7943791de7267a9d7dafa/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0374221d9a8296937d7943791de7267a9d7dafa/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e0374221d9a8296937d7943791de7267a9d7dafa", "patch": "@@ -1,3 +1,8 @@\n+2005-06-07  Adrian Straetling  <straetling@de.ibm.com>\n+\n+\t* config/cpu/s390/atomicity.h: (__exchange_and_add, \n+\t__atomic_add): Use the builtins for atomic memory operations.\n+\n 2005-06-06  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/21770 (cont: __gnu_debug::string)"}, {"sha": "5a235940c8ce24ed8965671d92a7ad5302166143", "filename": "libstdc++-v3/config/cpu/s390/atomicity.h", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0374221d9a8296937d7943791de7267a9d7dafa/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fs390%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0374221d9a8296937d7943791de7267a9d7dafa/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fs390%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fs390%2Fatomicity.h?ref=e0374221d9a8296937d7943791de7267a9d7dafa", "patch": "@@ -34,22 +34,10 @@ namespace __gnu_cxx\n   _Atomic_word \n   __attribute__ ((__unused__))\n   __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n-  {\n-    register _Atomic_word __old_val, __new_val;\n-    \n-    __asm__ __volatile__ (\"   l     %0,0(%3)\\n\"\n-\t\t\t  \"0: lr    %1,%0\\n\"\n-\t\t\t  \"   ar    %1,%4\\n\"\n-\t\t\t  \"   cs    %0,%1,0(%3)\\n\"\n-\t\t\t  \"   jl    0b\"\n-\t\t\t  : \"=&d\" (__old_val), \"=&d\" (__new_val), \"=m\" (*__mem)\n-\t\t\t  : \"a\" (__mem), \"d\" (__val), \"m\" (*__mem)\n-\t\t\t  : \"cc\", \"memory\");\n-    return __old_val;\n-  }\n+  { return __sync_fetch_and_add(__mem, __val); }\n   \n   void\n   __attribute__ ((__unused__))\n   __atomic_add(volatile _Atomic_word* __mem, int __val)\n-  { __exchange_and_add(__mem, __val); }\n+  { __sync_fetch_and_add(__mem, __val); }\n } // namespace __gnu_cxx"}]}