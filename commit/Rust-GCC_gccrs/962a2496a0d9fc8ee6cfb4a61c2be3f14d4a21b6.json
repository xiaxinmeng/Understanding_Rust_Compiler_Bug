{"sha": "962a2496a0d9fc8ee6cfb4a61c2be3f14d4a21b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYyYTI0OTZhMGQ5ZmM4ZWU2Y2ZiNGE2MWMyYmUzZjE0ZDRhMjFiNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-05-21T12:39:16Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-05-21T12:39:16Z"}, "message": "(datadef, fndef, ivar_decl, mydecls): Restore declspec_stack since setspecs is used.\n\n(datadef, fndef, ivar_decl, mydecls): Restore declspec_stack since\nsetspecs is used.\n(parmlist_or_identifiers): Use setspecs before parsing parms and\nrestore after parsing parms.\n\nFrom-SVN: r9760", "tree": {"sha": "38efb5c3c07ebbbb9b34e2b011e1e05ea14401ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38efb5c3c07ebbbb9b34e2b011e1e05ea14401ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/962a2496a0d9fc8ee6cfb4a61c2be3f14d4a21b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/962a2496a0d9fc8ee6cfb4a61c2be3f14d4a21b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/962a2496a0d9fc8ee6cfb4a61c2be3f14d4a21b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/962a2496a0d9fc8ee6cfb4a61c2be3f14d4a21b6/comments", "author": null, "committer": null, "parents": [{"sha": "4f6cd2e6422973675a9ac0468f7a4af1eb875db5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f6cd2e6422973675a9ac0468f7a4af1eb875db5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f6cd2e6422973675a9ac0468f7a4af1eb875db5"}], "stats": {"total": 82, "additions": 62, "deletions": 20}, "files": [{"sha": "70063f695c24378c0d6cc946c25a4fed6336e79b", "filename": "gcc/c-parse.in", "status": "modified", "additions": 62, "deletions": 20, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962a2496a0d9fc8ee6cfb4a61c2be3f14d4a21b6/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962a2496a0d9fc8ee6cfb4a61c2be3f14d4a21b6/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=962a2496a0d9fc8ee6cfb4a61c2be3f14d4a21b6", "patch": "@@ -310,11 +310,22 @@ datadef:\n \t\t{ if (pedantic)\n \t\t    error (\"ANSI C forbids data definition with no type or storage class\");\n \t\t  else if (!flag_traditional)\n-\t\t    warning (\"data definition has no type or storage class\"); }\n+\t\t    warning (\"data definition has no type or storage class\"); \n+\n+\t\t  current_declspecs = TREE_VALUE (declspec_stack);\n+\t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n+\t\t  resume_momentary ($1); }\n         | declmods setspecs notype_initdecls ';'\n-\t  {}\n+\t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n+\t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n+\t\t  resume_momentary ($2); }\n \t| typed_declspecs setspecs initdecls ';'\n-\t  {}\n+\t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n+\t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n+\t\t  resume_momentary ($2);  }\n         | declmods ';'\n \t  { pedwarn (\"empty declaration\"); }\n \t| typed_declspecs ';'\n@@ -334,29 +345,50 @@ fndef:\n \t  xdecls\n \t\t{ store_parm_decls (); }\n \t  compstmt_or_error\n-\t\t{ finish_function (0); }\n+\t\t{ finish_function (0); \n+\t\t  current_declspecs = TREE_VALUE (declspec_stack);\n+\t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n+\t\t  resume_momentary ($2); }\n \t| typed_declspecs setspecs declarator error\n-\t\t{ }\n+\t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n+\t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n+\t\t  resume_momentary ($2); }\n \t| declmods setspecs notype_declarator\n \t\t{ if (! start_function ($1, $3, prefix_attributes, 0))\n \t\t    YYERROR1;\n \t\t  reinit_parse_for_function (); }\n \t  xdecls\n \t\t{ store_parm_decls (); }\n \t  compstmt_or_error\n-\t\t{ finish_function (0); }\n+\t\t{ finish_function (0); \n+\t\t  current_declspecs = TREE_VALUE (declspec_stack);\n+\t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n+\t\t  resume_momentary ($2); }\n \t| declmods setspecs notype_declarator error\n-\t\t{ }\n+\t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n+\t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n+\t\t  resume_momentary ($2); }\n \t| setspecs notype_declarator\n \t\t{ if (! start_function (NULL_TREE, $2, prefix_attributes, 0))\n \t\t    YYERROR1;\n \t\t  reinit_parse_for_function (); }\n \t  xdecls\n \t\t{ store_parm_decls (); }\n \t  compstmt_or_error\n-\t\t{ finish_function (0); }\n+\t\t{ finish_function (0); \n+\t\t  current_declspecs = TREE_VALUE (declspec_stack);\n+\t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n+\t\t  resume_momentary ($1); }\n \t| setspecs notype_declarator error\n-\t\t{ }\n+\t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n+\t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n+\t\t  resume_momentary ($1); }\n \t;\n \n identifier:\n@@ -2145,13 +2177,18 @@ parm:\n    where either a parmlist or an identifier list is ok.\n    Its value is a list of ..._TYPE nodes or a list of identifiers.  */\n parmlist_or_identifiers:\n+          setspecs\n \t\t{ pushlevel (0);\n \t\t  clear_parm_order ();\n \t\t  declare_parm_level (1); }\n \t  parmlist_or_identifiers_1\n-\t\t{ $$ = $2;\n+\t\t{ $$ = $3;\n \t\t  parmlist_tags_warning ();\n-\t\t  poplevel (0, 0, 0); }\n+\t\t  poplevel (0, 0, 0);\n+\t\t  current_declspecs = TREE_VALUE (declspec_stack);\n+\t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n+\t\t  resume_momentary ($1); }\n \t;\n \n parmlist_or_identifiers_1:\n@@ -2410,15 +2447,17 @@ ivar_decls:\n \n ivar_decl:\n \ttyped_typespecs setspecs ivars\n-\t        {\n-                  $$ = $3;\n-\t\t  resume_momentary ($2);\n-                }\n+\t        { $$ = $3;\n+\t\t  current_declspecs = TREE_VALUE (declspec_stack);\n+\t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n+\t\t  resume_momentary ($2); }\n \t| nonempty_type_quals setspecs ivars\n-\t\t{\n-                  $$ = $3;\n-\t\t  resume_momentary ($2);\n-                }\n+\t\t{ $$ = $3;\n+\t\t  current_declspecs = TREE_VALUE (declspec_stack);\n+\t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n+\t\t  resume_momentary ($2); }\n \t| error\n \t\t{ $$ = NULL_TREE; }\n \t;\n@@ -2595,7 +2634,10 @@ mydecls:\n \n mydecl:\n \ttyped_declspecs setspecs myparms ';'\n-\t\t{ resume_momentary ($2); }\n+\t\t{ current_declspecs = TREE_VALUE (declspec_stack);\n+\t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n+\t\t  resume_momentary ($2); }\n \t| typed_declspecs ';'\n \t\t{ shadow_tag ($1); }\n \t| declmods ';'"}]}