{"sha": "d4b520d88ee5b4cd446ef001c8fdddd9af8d681c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRiNTIwZDg4ZWU1YjRjZDQ0NmVmMDAxYzhmZGRkZDlhZjhkNjgxYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-12-17T00:15:02Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-12-17T00:15:02Z"}, "message": "Add a cut-down version of std::span (array_slice)\n\nA later patch wants to be able to pass around subarray views of an\nexisting array.  The standard class to do that is std::span, but it's\na C++20 thing.  This patch just adds a cut-down version of it.\n\nThe intention is just to provide what's currently needed.\n\ngcc/\n\t* vec.h (array_slice): New class.", "tree": {"sha": "6e56b15fd99731ff3026a7fd95bc6858e076d40c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e56b15fd99731ff3026a7fd95bc6858e076d40c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4b520d88ee5b4cd446ef001c8fdddd9af8d681c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4b520d88ee5b4cd446ef001c8fdddd9af8d681c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4b520d88ee5b4cd446ef001c8fdddd9af8d681c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4b520d88ee5b4cd446ef001c8fdddd9af8d681c/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a0882ef6a265553c8adcc24ce9059546e84b99b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a0882ef6a265553c8adcc24ce9059546e84b99b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a0882ef6a265553c8adcc24ce9059546e84b99b"}], "stats": {"total": 120, "additions": 120, "deletions": 0}, "files": [{"sha": "db725624dfa8a9abbf291dca4e87a12295eabfb4", "filename": "gcc/vec.h", "status": "modified", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b520d88ee5b4cd446ef001c8fdddd9af8d681c/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b520d88ee5b4cd446ef001c8fdddd9af8d681c/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=d4b520d88ee5b4cd446ef001c8fdddd9af8d681c", "patch": "@@ -2138,6 +2138,126 @@ release_vec_vec (vec<vec<T> > &vec)\n   vec.release ();\n }\n \n+// Provide a subset of the std::span functionality.  (We can't use std::span\n+// itself because it's a C++20 feature.)\n+//\n+// In addition, provide an invalid value that is distinct from all valid\n+// sequences (including the empty sequence).  This can be used to return\n+// failure without having to use std::optional.\n+//\n+// There is no operator bool because it would be ambiguous whether it is\n+// testing for a valid value or an empty sequence.\n+template<typename T>\n+class array_slice\n+{\n+  template<typename OtherT> friend class array_slice;\n+\n+public:\n+  using value_type = T;\n+  using iterator = T *;\n+  using const_iterator = const T *;\n+\n+  array_slice () : m_base (nullptr), m_size (0) {}\n+\n+  template<typename OtherT>\n+  array_slice (array_slice<OtherT> other)\n+    : m_base (other.m_base), m_size (other.m_size) {}\n+\n+  array_slice (iterator base, unsigned int size)\n+    : m_base (base), m_size (size) {}\n+\n+  template<size_t N>\n+  array_slice (T (&array)[N]) : m_base (array), m_size (N) {}\n+\n+  template<typename OtherT>\n+  array_slice (const vec<OtherT> &v)\n+    : m_base (v.address ()), m_size (v.length ()) {}\n+\n+  iterator begin () { return m_base; }\n+  iterator end () { return m_base + m_size; }\n+\n+  const_iterator begin () const { return m_base; }\n+  const_iterator end () const { return m_base + m_size; }\n+\n+  value_type &front ();\n+  value_type &back ();\n+  value_type &operator[] (unsigned int i);\n+\n+  const value_type &front () const;\n+  const value_type &back () const;\n+  const value_type &operator[] (unsigned int i) const;\n+\n+  size_t size () const { return m_size; }\n+  size_t size_bytes () const { return m_size * sizeof (T); }\n+  bool empty () const { return m_size == 0; }\n+\n+  // An invalid array_slice that represents a failed operation.  This is\n+  // distinct from an empty slice, which is a valid result in some contexts.\n+  static array_slice invalid () { return { nullptr, ~0U }; }\n+\n+  // True if the array is valid, false if it is an array like INVALID.\n+  bool is_valid () const { return m_base || m_size == 0; }\n+\n+private:\n+  iterator m_base;\n+  unsigned int m_size;\n+};\n+\n+template<typename T>\n+inline typename array_slice<T>::value_type &\n+array_slice<T>::front ()\n+{\n+  gcc_checking_assert (m_size);\n+  return m_base[0];\n+}\n+\n+template<typename T>\n+inline const typename array_slice<T>::value_type &\n+array_slice<T>::front () const\n+{\n+  gcc_checking_assert (m_size);\n+  return m_base[0];\n+}\n+\n+template<typename T>\n+inline typename array_slice<T>::value_type &\n+array_slice<T>::back ()\n+{\n+  gcc_checking_assert (m_size);\n+  return m_base[m_size - 1];\n+}\n+\n+template<typename T>\n+inline const typename array_slice<T>::value_type &\n+array_slice<T>::back () const\n+{\n+  gcc_checking_assert (m_size);\n+  return m_base[m_size - 1];\n+}\n+\n+template<typename T>\n+inline typename array_slice<T>::value_type &\n+array_slice<T>::operator[] (unsigned int i)\n+{\n+  gcc_checking_assert (i < m_size);\n+  return m_base[i];\n+}\n+\n+template<typename T>\n+inline const typename array_slice<T>::value_type &\n+array_slice<T>::operator[] (unsigned int i) const\n+{\n+  gcc_checking_assert (i < m_size);\n+  return m_base[i];\n+}\n+\n+template<typename T>\n+array_slice<T>\n+make_array_slice (T *base, unsigned int size)\n+{\n+  return array_slice<T> (base, size);\n+}\n+\n #if (GCC_VERSION >= 3000)\n # pragma GCC poison m_vec m_vecpfx m_vecdata\n #endif"}]}