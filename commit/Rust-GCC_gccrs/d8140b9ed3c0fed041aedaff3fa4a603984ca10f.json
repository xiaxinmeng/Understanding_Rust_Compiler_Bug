{"sha": "d8140b9ed3c0fed041aedaff3fa4a603984ca10f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgxNDBiOWVkM2MwZmVkMDQxYWVkYWZmM2ZhNGE2MDM5ODRjYTEwZg==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-07-29T16:37:13Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-07-29T16:37:13Z"}, "message": "OpenMP: Handle order(concurrent) clause in gfortran\n\ngcc/fortran/ChangeLog:\n\n\t* dump-parse-tree.c (show_omp_clauses): Handle order(concurrent).\n\t* gfortran.h (struct gfc_omp_clauses): Add order_concurrent.\n\t* openmp.c (enum omp_mask1, OMP_DO_CLAUSES, OMP_SIMD_CLAUSES):\n\tAdd OMP_CLAUSE_ORDER.\n\t* trans-openmp.c (gfc_trans_omp_clauses, gfc_split_omp_clauses):\n\tHandle order(concurrent) clause.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/gomp/order-3.f90: New test.\n\t* gfortran.dg/gomp/order-4.f90: New test.", "tree": {"sha": "5c1c7909d60df14ee9a979602a3217b39a148d10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c1c7909d60df14ee9a979602a3217b39a148d10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8140b9ed3c0fed041aedaff3fa4a603984ca10f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8140b9ed3c0fed041aedaff3fa4a603984ca10f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8140b9ed3c0fed041aedaff3fa4a603984ca10f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8140b9ed3c0fed041aedaff3fa4a603984ca10f/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6fe3bbf9f6c0b7249933e19b94560b6b26bf269", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6fe3bbf9f6c0b7249933e19b94560b6b26bf269", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6fe3bbf9f6c0b7249933e19b94560b6b26bf269"}], "stats": {"total": 289, "additions": 286, "deletions": 3}, "files": [{"sha": "71d0e7d00f53c0e3a20ffca2e19852e3d9c8c3c1", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8140b9ed3c0fed041aedaff3fa4a603984ca10f/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8140b9ed3c0fed041aedaff3fa4a603984ca10f/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=d8140b9ed3c0fed041aedaff3fa4a603984ca10f", "patch": "@@ -1552,6 +1552,8 @@ show_omp_clauses (gfc_omp_clauses *omp_clauses)\n     fputs (\" SEQ\", dumpfile);\n   if (omp_clauses->independent)\n     fputs (\" INDEPENDENT\", dumpfile);\n+  if (omp_clauses->order_concurrent)\n+    fputs (\" ORDER(CONCURRENT)\", dumpfile);\n   if (omp_clauses->ordered)\n     {\n       if (omp_clauses->orderedc)"}, {"sha": "48b2ab14fdbb057e387579164f2aa830455409b6", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8140b9ed3c0fed041aedaff3fa4a603984ca10f/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8140b9ed3c0fed041aedaff3fa4a603984ca10f/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=d8140b9ed3c0fed041aedaff3fa4a603984ca10f", "patch": "@@ -1365,7 +1365,7 @@ typedef struct gfc_omp_clauses\n   bool nowait, ordered, untied, mergeable;\n   bool inbranch, notinbranch, defaultmap, nogroup;\n   bool sched_simd, sched_monotonic, sched_nonmonotonic;\n-  bool simd, threads, depend_source;\n+  bool simd, threads, depend_source, order_concurrent;\n   enum gfc_omp_cancel_kind cancel;\n   enum gfc_omp_proc_bind_kind proc_bind;\n   struct gfc_expr *safelen_expr;"}, {"sha": "ec116206a5c78072f40bd1117d10694128e5bbc0", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8140b9ed3c0fed041aedaff3fa4a603984ca10f/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8140b9ed3c0fed041aedaff3fa4a603984ca10f/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=d8140b9ed3c0fed041aedaff3fa4a603984ca10f", "patch": "@@ -766,6 +766,7 @@ enum omp_mask1\n   OMP_CLAUSE_NUM_THREADS,\n   OMP_CLAUSE_SCHEDULE,\n   OMP_CLAUSE_DEFAULT,\n+  OMP_CLAUSE_ORDER,\n   OMP_CLAUSE_ORDERED,\n   OMP_CLAUSE_COLLAPSE,\n   OMP_CLAUSE_UNTIED,\n@@ -1549,6 +1550,13 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t    continue;\n \t  break;\n \tcase 'o':\n+\t  if ((mask & OMP_CLAUSE_ORDER)\n+\t      && !c->order_concurrent\n+\t      && gfc_match (\"order ( concurrent )\") == MATCH_YES)\n+\t    {\n+\t      c->order_concurrent = true;\n+\t      continue;\n+\t    }\n \t  if ((mask & OMP_CLAUSE_ORDERED)\n \t      && !c->ordered\n \t      && gfc_match (\"ordered\") == MATCH_YES)\n@@ -2575,15 +2583,15 @@ gfc_match_oacc_routine (void)\n   (omp_mask (OMP_CLAUSE_PRIVATE) | OMP_CLAUSE_FIRSTPRIVATE\t\t\\\n    | OMP_CLAUSE_LASTPRIVATE | OMP_CLAUSE_REDUCTION\t\t\t\\\n    | OMP_CLAUSE_SCHEDULE | OMP_CLAUSE_ORDERED | OMP_CLAUSE_COLLAPSE\t\\\n-   | OMP_CLAUSE_LINEAR)\n+   | OMP_CLAUSE_LINEAR | OMP_CLAUSE_ORDER)\n #define OMP_SECTIONS_CLAUSES \\\n   (omp_mask (OMP_CLAUSE_PRIVATE) | OMP_CLAUSE_FIRSTPRIVATE\t\t\\\n    | OMP_CLAUSE_LASTPRIVATE | OMP_CLAUSE_REDUCTION)\n #define OMP_SIMD_CLAUSES \\\n   (omp_mask (OMP_CLAUSE_PRIVATE) | OMP_CLAUSE_LASTPRIVATE\t\t\\\n    | OMP_CLAUSE_REDUCTION | OMP_CLAUSE_COLLAPSE | OMP_CLAUSE_SAFELEN\t\\\n    | OMP_CLAUSE_LINEAR | OMP_CLAUSE_ALIGNED | OMP_CLAUSE_SIMDLEN\t\\\n-   | OMP_CLAUSE_IF)\n+   | OMP_CLAUSE_IF | OMP_CLAUSE_ORDER)\n #define OMP_TASK_CLAUSES \\\n   (omp_mask (OMP_CLAUSE_PRIVATE) | OMP_CLAUSE_FIRSTPRIVATE\t\t\\\n    | OMP_CLAUSE_SHARED | OMP_CLAUSE_IF | OMP_CLAUSE_DEFAULT\t\t\\"}, {"sha": "076efb03831f6dc6aef3e94043d25db0ab04b6a2", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8140b9ed3c0fed041aedaff3fa4a603984ca10f/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8140b9ed3c0fed041aedaff3fa4a603984ca10f/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=d8140b9ed3c0fed041aedaff3fa4a603984ca10f", "patch": "@@ -3371,6 +3371,12 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n \n+  if (clauses->order_concurrent)\n+    {\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_ORDER);\n+      omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n+    }\n+\n   if (clauses->untied)\n     {\n       c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_UNTIED);\n@@ -4970,6 +4976,8 @@ gfc_split_omp_clauses (gfc_code *code,\n \t  /* Duplicate collapse.  */\n \t  clausesa[GFC_OMP_SPLIT_DISTRIBUTE].collapse\n \t    = code->ext.omp_clauses->collapse;\n+\t  clausesa[GFC_OMP_SPLIT_DISTRIBUTE].order_concurrent\n+\t    = code->ext.omp_clauses->order_concurrent;\n \t}\n       if (mask & GFC_OMP_MASK_PARALLEL)\n \t{\n@@ -5015,6 +5023,8 @@ gfc_split_omp_clauses (gfc_code *code,\n \t  /* Duplicate collapse.  */\n \t  clausesa[GFC_OMP_SPLIT_DO].collapse\n \t    = code->ext.omp_clauses->collapse;\n+\t  clausesa[GFC_OMP_SPLIT_DO].order_concurrent\n+\t    = code->ext.omp_clauses->order_concurrent;\n \t}\n       if (mask & GFC_OMP_MASK_SIMD)\n \t{\n@@ -5029,6 +5039,8 @@ gfc_split_omp_clauses (gfc_code *code,\n \t    = code->ext.omp_clauses->collapse;\n \t  clausesa[GFC_OMP_SPLIT_SIMD].if_exprs[OMP_IF_SIMD]\n \t    = code->ext.omp_clauses->if_exprs[OMP_IF_SIMD];\n+\t  clausesa[GFC_OMP_SPLIT_SIMD].order_concurrent\n+\t    = code->ext.omp_clauses->order_concurrent;\n \t  /* And this is copied to all.  */\n \t  clausesa[GFC_OMP_SPLIT_SIMD].if_expr\n \t    = code->ext.omp_clauses->if_expr;"}, {"sha": "06df89fc39256471318ee4b4b97205074da7e626", "filename": "gcc/testsuite/gfortran.dg/gomp/order-3.f90", "status": "added", "additions": 227, "deletions": 0, "changes": 227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8140b9ed3c0fed041aedaff3fa4a603984ca10f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Forder-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8140b9ed3c0fed041aedaff3fa4a603984ca10f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Forder-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Forder-3.f90?ref=d8140b9ed3c0fed041aedaff3fa4a603984ca10f", "patch": "@@ -0,0 +1,227 @@\n+module my_omp_mod\n+ use iso_c_binding, only: c_loc\n+ implicit none\n+ integer :: v\n+ interface\n+   integer function omp_get_thread_num () bind(C)\n+   end\n+   integer function omp_get_num_threads () bind(C)\n+   end\n+   integer function omp_get_cancellation () bind(C)\n+   end\n+   integer function omp_target_is_present (ptr, device_num) bind(C)\n+     use iso_c_binding, only: c_ptr\n+     type(c_ptr), value :: ptr\n+     integer :: device_num\n+   end\n+  end interface\n+contains\n+  subroutine foo ()\n+  end\n+end \n+\n+subroutine f1 (a, b)\n+  use my_omp_mod\n+  implicit none\n+  integer :: a(:), b(:,:)\n+  target :: a\n+  integer i, j\n+  !$omp simd order(concurrent)\n+  do i = 1, 64\n+    !$omp parallel\t\t! { dg-error \"OpenMP constructs other than 'ordered simd', 'simd', 'loop' or 'atomic' may not be nested inside 'simd' region\" }\n+    call foo ()\n+    !$omp end parallel\n+  end do\n+  !$omp end simd\n+  !$omp simd order(concurrent)\n+  do i = 1, 64\n+    !$omp simd\n+    do j = 1, 64\n+      b(j, i) = i + j\n+    end do\n+  end do\n+  !$omp simd order(concurrent)\n+  do i = 1, 64\n+      !$omp critical\t\t! { dg-error \"OpenMP constructs other than 'ordered simd', 'simd', 'loop' or 'atomic' may not be nested inside 'simd' region\" }\n+      call foo ()\n+      !$omp end critical\n+  end do\n+  !$omp simd order(concurrent)\n+  do i = 1, 64\n+    !$omp ordered simd\t\t! { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a region with the 'order\\\\(concurrent\\\\)' clause\" }\n+    call foo ()\n+    !$omp end ordered\n+  end do\n+  !$omp simd order(concurrent)\n+  do i = 1, 64\n+    !$omp atomic\t\t! { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a region with the 'order\\\\(concurrent\\\\)' clause\" }\n+    v = v + 1\n+  end do\n+  !$omp simd order(concurrent)\n+  do i = 1, 64\n+    !$omp atomic read\t\t! { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a region with the 'order\\\\(concurrent\\\\)' clause\"  }\n+    a(i) = v\n+  end do\n+  !$omp simd order(concurrent)\n+  do i = 1, 64\n+      !$omp atomic write\t! { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a region with the 'order\\\\(concurrent\\\\)' clause\" }\n+      v = a(i)\n+  end do\n+  !$omp simd order(concurrent)\n+  do i = 1, 64\n+    a(i) = a(i) + omp_get_thread_num ()  ! { dg-error \"OpenMP runtime API call '\\[^\\n\\r]*omp_get_thread_num\\[^\\n\\r]*' in a region with 'order\\\\(concurrent\\\\)' clause\" }\n+  end do\n+  !$omp simd order(concurrent)\n+  do i = 1, 64\n+    a(i) = a(i) + omp_get_num_threads ()  ! { dg-error \"OpenMP runtime API call '\\[^\\n\\r]*omp_get_num_threads\\[^\\n\\r]*' in a region with 'order\\\\(concurrent\\\\)' clause\" }\n+  end do\n+  !$omp simd order(concurrent)\n+  do i = 1, 64\n+    a(i) = a(i) + omp_target_is_present (c_loc(a(i)), 0)  ! { dg-error \"OpenMP runtime API call '\\[^\\n\\r]*omp_target_is_present\\[^\\n\\r]*' in a region with 'order\\\\(concurrent\\\\)' clause\" }\n+  end do\n+  !$omp simd order(concurrent)\n+  do i = 1, 64\n+    a(i) = a(i) + omp_get_cancellation ()  ! { dg-error \"OpenMP runtime API call '\\[^\\n\\r]*omp_get_cancellation\\[^\\n\\r]*' in a region with 'order\\\\(concurrent\\\\)' clause\" }\n+  end do\n+end\n+\n+subroutine f2 (a, b)\n+  use my_omp_mod\n+  implicit none\n+  integer a(:), b(:,:)\n+  target :: a\n+  integer i, j\n+  !$omp do simd order(concurrent)\n+  do i = 1, 64\n+    !$omp parallel\t\t! { dg-error \"OpenMP constructs other than 'ordered simd', 'simd', 'loop' or 'atomic' may not be nested inside 'simd' region\" }\n+    call foo ()\n+    !$omp end parallel\n+  end do\n+  !$omp do simd order(concurrent)\n+  do i = 1, 64\n+    !$omp simd\n+    do j = 1, 64\n+      b (j, i) = i + j\n+    end do\n+  end do\n+  !$omp do simd order(concurrent)\n+  do i = 1, 64\n+    !$omp critical\t\t! { dg-error \"OpenMP constructs other than 'ordered simd', 'simd', 'loop' or 'atomic' may not be nested inside 'simd' region\" }\n+    call foo ()\n+    !$omp end critical\n+  end do\n+  !$omp do simd order(concurrent)\n+  do i = 1, 64\n+    !$omp ordered simd\t\t! { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a region with the 'order\\\\(concurrent\\\\)' clause\" }\n+    call foo ()\n+    !$omp end ordered\n+  end do\n+  !$omp do simd order(concurrent)\n+  do i = 1, 64\n+    !$omp atomic\t\t! { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a region with the 'order\\\\(concurrent\\\\)' clause\" }\n+    v = v + 1\n+  end do\n+  !$omp do simd order(concurrent)\n+  do i = 1, 64\n+    !$omp atomic read\t\t! { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a region with the 'order\\\\(concurrent\\\\)' clause\" }\n+    a(i) = v\n+  end do\n+  !$omp do simd order(concurrent)\n+  do i = 1, 64\n+    !$omp atomic write\t\t! { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a region with the 'order\\\\(concurrent\\\\)' clause\" }\n+    v = a(i)\n+  end do\n+  !$omp do simd order(concurrent)\n+  do i = 1, 64\n+    a(i) = a(i) + omp_get_thread_num ()  ! { dg-error \"OpenMP runtime API call '\\[^\\n\\r]*omp_get_thread_num\\[^\\n\\r]*' in a region with 'order\\\\(concurrent\\\\)' clause\" }\n+  end do\n+  !$omp do simd order(concurrent)\n+  do i = 1, 64\n+    a(i) = a(i) + omp_get_num_threads ()  ! { dg-error \"OpenMP runtime API call '\\[^\\n\\r]*omp_get_num_threads\\[^\\n\\r]*' in a region with 'order\\\\(concurrent\\\\)' clause\" }\n+  end do\n+  !$omp do simd order(concurrent)\n+  do i = 1, 64\n+    a(i) = a(i) + omp_target_is_present (c_loc(a(i)), 0)  ! { dg-error \"OpenMP runtime API call '\\[^\\n\\r]*omp_target_is_present\\[^\\n\\r]*' in a region with 'order\\\\(concurrent\\\\)' clause\" }\n+  end do\n+  !$omp do simd order(concurrent)\n+  do i = 1, 64\n+    a(i) = a(i) + omp_get_cancellation ()  ! { dg-error \"OpenMP runtime API call '\\[^\\n\\r]*omp_get_cancellation\\[^\\n\\r]*' in a region with 'order\\\\(concurrent\\\\)' clause\" }\n+  end do\n+end\n+\n+subroutine f3 (a, b)\n+  use my_omp_mod\n+  implicit none\n+  integer :: a(:), b(:,:)\n+  target :: a\n+  integer i, j\n+  !$omp do order(concurrent)\n+  do i = 1, 64\n+    !$omp parallel\n+    call foo ()\n+    !$omp end parallel\n+  end do\n+  !$omp do order(concurrent)\n+  do i = 1, 64\n+    !$omp simd\n+    do j = 1, 64\n+      b(j, i) = i + j\n+    end do\n+  end do\n+  !$omp do order(concurrent)\n+  do i = 1, 64\n+    !$omp critical\t\t! { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a region with the 'order\\\\(concurrent\\\\)' clause\" }\n+    call foo ()\n+    !$omp end critical\n+  end do\n+  !$omp do order(concurrent)\n+  do i = 1, 64\n+    !$omp ordered simd\t\t! { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a region with the 'order\\\\(concurrent\\\\)' clause\" }\n+    call foo ()\n+    !$omp end ordered\n+  end do\n+  !$omp do order(concurrent)\n+  do i = 1, 64\n+    !$omp atomic\t\t! { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a region with the 'order\\\\(concurrent\\\\)' clause\" }\n+    v = v + 1\n+  end do\n+  !$omp do order(concurrent)\n+  do i = 1, 64\n+    !$omp atomic read\t\t! { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a region with the 'order\\\\(concurrent\\\\)' clause\" }\n+    a(i) = v\n+  end do\n+  !$omp do order(concurrent)\n+  do i = 1, 64\n+    !$omp atomic write\t\t! { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a region with the 'order\\\\(concurrent\\\\)' clause\" }\n+    v = a(i)\n+  end do\n+  !$omp do order(concurrent)\n+  do i = 1, 64\n+    !$omp task\t\t\t! { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a region with the 'order\\\\(concurrent\\\\)' clause\" }\n+    a(i) = a(i) + 1\n+    !$omp end task\n+  end do\n+  !$omp do order(concurrent)\n+  do i = 1, 64\n+    !$omp taskloop\t\t! { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a region with the 'order\\\\(concurrent\\\\)' clause\" }\n+    do j = 1, 64\n+      b(j, i) = i + j\n+    end do\n+  end do\n+  !$omp do order(concurrent)\n+  do i = 1, 64\n+    a(i) = a(i) + omp_get_thread_num ()  ! { dg-error \"OpenMP runtime API call '\\[^\\n\\r]*omp_get_thread_num\\[^\\n\\r]*' in a region with 'order\\\\(concurrent\\\\)' clause\" }\n+  end do\n+  !$omp do order(concurrent)\n+  do i = 1, 64\n+    a(i) = a(i) + omp_get_num_threads ()  ! { dg-error \"OpenMP runtime API call '\\[^\\n\\r]*omp_get_num_threads\\[^\\n\\r]*' in a region with 'order\\\\(concurrent\\\\)' clause\" }\n+  end do\n+  !$omp do order(concurrent)\n+  do i = 1, 64\n+    a(i) = a(i) + omp_target_is_present (c_loc(a(i)), 0)  ! { dg-error \"OpenMP runtime API call '\\[^\\n\\r]*omp_target_is_present\\[^\\n\\r]*' in a region with 'order\\\\(concurrent\\\\)' clause\" }\n+  end do\n+  !$omp do order(concurrent)\n+  do i = 1, 64\n+    a(i) = a(i) + omp_get_cancellation ()  ! { dg-error \"OpenMP runtime API call '\\[^\\n\\r]*omp_get_cancellation\\[^\\n\\r]*' in a region with 'order\\\\(concurrent\\\\)' clause\" }\n+  end do\n+end"}, {"sha": "e4580e38b89a57a2ef402422f9f9a57f57081cda", "filename": "gcc/testsuite/gfortran.dg/gomp/order-4.f90", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8140b9ed3c0fed041aedaff3fa4a603984ca10f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Forder-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8140b9ed3c0fed041aedaff3fa4a603984ca10f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Forder-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Forder-4.f90?ref=d8140b9ed3c0fed041aedaff3fa4a603984ca10f", "patch": "@@ -0,0 +1,34 @@\n+module m\n+ integer t;\n+ !$omp threadprivate(t)\n+end\n+\n+subroutine f1\n+  use m\n+  implicit none\n+  integer :: i\n+  !$omp simd order(concurrent)  ! { dg-message \"note: enclosing region\" } */\n+  do i = 1, 64\n+    t = t + 1  ! { dg-error \"threadprivate variable 't' used in a region with 'order\\\\(concurrent\\\\)' clause\" } */\n+  end do\n+end\n+\n+subroutine f2\n+  use m\n+  implicit none\n+  integer :: i\n+  !$omp do simd order(concurrent) ! { dg-message \"note: enclosing region\" } */\n+  do i = 1, 64\n+    t = t + 1  ! { dg-error \"threadprivate variable 't' used in a region with 'order\\\\(concurrent\\\\)' clause\" } */\n+  end do\n+end\n+\n+subroutine f3\n+  use m\n+  implicit none\n+  integer :: i\n+  !$omp do order(concurrent)  ! { dg-message \"note: enclosing region\" } */\n+  do i = 1, 64\n+    t = t + 1  ! { dg-error \"threadprivate variable 't' used in a region with 'order\\\\(concurrent\\\\)' clause\" } */\n+  end do\n+end"}]}