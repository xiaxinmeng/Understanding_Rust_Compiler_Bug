{"sha": "cc5c935937d01d96c6b070dae31854180249064c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M1YzkzNTkzN2QwMWQ5NmM2YjA3MGRhZTMxODU0MTgwMjQ5MDY0Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-10T08:26:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-10T08:26:44Z"}, "message": "i386: Fix up *testqi_ext_3 insn&split for the *testdi_1 changes [PR94088]\n\nIn r10-1938-g460bf043c8266dd080308f4783137aee0d0f862c *testdi_1 has been\nchanged, so that if the mask has upper 32-bits 0 and then at least one bit\nset, it requires CCZmode rather than CCNOmode, because in that case it uses\ntestl instruction rather than testq and so the SF flag wouldn't respect the\nstate of the 64-bit result.\nThe *testqi_ext_3 define_insn_and_split needs to match that though,\notherwise it can create an RTL pattern that used to match *testdi_1 but\ndoesn't anymore and we'd ICE due to an unrecognizable insn.\n\n2020-03-10  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/94088\n\t* config/i386/i386.md (*testqi_ext_3): Call ix86_match_ccmode with\n\tCCZmode instead of CCNOmode if operands[2] has DImode and pos + len\n\tis 32.\n\n\t* gcc.target/i386/pr94088.c: New test.", "tree": {"sha": "55fc571195ba53c00b0abdcf2717160dc02e4cdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55fc571195ba53c00b0abdcf2717160dc02e4cdb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc5c935937d01d96c6b070dae31854180249064c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc5c935937d01d96c6b070dae31854180249064c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc5c935937d01d96c6b070dae31854180249064c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc5c935937d01d96c6b070dae31854180249064c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1263058ba0bc67d1767b487a1b41657db15e579", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1263058ba0bc67d1767b487a1b41657db15e579", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1263058ba0bc67d1767b487a1b41657db15e579"}], "stats": {"total": 38, "additions": 32, "deletions": 6}, "files": [{"sha": "5d5bbf4fed5616a2ec3ff2d7f40eacc8d99a4b04", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5c935937d01d96c6b070dae31854180249064c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5c935937d01d96c6b070dae31854180249064c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc5c935937d01d96c6b070dae31854180249064c", "patch": "@@ -1,3 +1,10 @@\n+2020-03-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/94088\n+\t* config/i386/i386.md (*testqi_ext_3): Call ix86_match_ccmode with\n+\tCCZmode instead of CCNOmode if operands[2] has DImode and pos + len\n+\tis 32.\n+\n 2020-03-09  Jason Merrill  <jason@redhat.com>\n \n \t* gdbinit.in (pgs): Fix typo in documentation."}, {"sha": "8b5ae34ee1178c6642fceb6e36c71b555c4a3020", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5c935937d01d96c6b070dae31854180249064c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5c935937d01d96c6b070dae31854180249064c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=cc5c935937d01d96c6b070dae31854180249064c", "patch": "@@ -8826,18 +8826,23 @@\n \t     (match_operand 3 \"const_int_operand\" \"n\")\n \t     (match_operand 4 \"const_int_operand\" \"n\"))\n \t   (const_int 0)]))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n-   && ((TARGET_64BIT && GET_MODE (operands[2]) == DImode)\n-       || GET_MODE (operands[2]) == SImode\n-       || GET_MODE (operands[2]) == HImode\n-       || GET_MODE (operands[2]) == QImode)\n+  \"((TARGET_64BIT && GET_MODE (operands[2]) == DImode)\n+    || GET_MODE (operands[2]) == SImode\n+    || GET_MODE (operands[2]) == HImode\n+    || GET_MODE (operands[2]) == QImode)\n    /* Ensure that resulting mask is zero or sign extended operand.  */\n    && INTVAL (operands[4]) >= 0\n    && ((INTVAL (operands[3]) > 0\n \t&& INTVAL (operands[3]) + INTVAL (operands[4]) <= 32)\n        || (<MODE>mode == DImode\n \t   && INTVAL (operands[3]) > 32\n-\t   && INTVAL (operands[3]) + INTVAL (operands[4]) == 64))\"\n+\t   && INTVAL (operands[3]) + INTVAL (operands[4]) == 64))\n+   && ix86_match_ccmode (insn,\n+\t\t\t /* *testdi_1 requires CCZmode if the mask has bit\n+\t\t\t    31 set and all bits above it clear.  */\n+\t\t\t GET_MODE (operands[2]) == DImode\n+\t\t\t && INTVAL (operands[3]) + INTVAL (operands[4]) == 32\n+\t\t\t ? CCZmode : CCNOmode)\"\n   \"#\"\n   \"&& 1\"\n   [(set (match_dup 0) (match_op_dup 1 [(match_dup 2) (const_int 0)]))]"}, {"sha": "5ed497dc44c2e2b0ec55a06bc8ed4a56f29fc42f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5c935937d01d96c6b070dae31854180249064c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5c935937d01d96c6b070dae31854180249064c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cc5c935937d01d96c6b070dae31854180249064c", "patch": "@@ -1,3 +1,8 @@\n+2020-03-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/94088\n+\t* gcc.target/i386/pr94088.c: New test.\n+\n 2020-03-09  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/92031 - bogus taking address of rvalue error."}, {"sha": "d8cdba5280d96c3dd7a01a5c62f9901038f35f9f", "filename": "gcc/testsuite/gcc.target/i386/pr94088.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5c935937d01d96c6b070dae31854180249064c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94088.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5c935937d01d96c6b070dae31854180249064c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94088.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94088.c?ref=cc5c935937d01d96c6b070dae31854180249064c", "patch": "@@ -0,0 +1,9 @@\n+/* PR target/94088 */\n+/* { dg-do compile } */\n+/* { dg-options \"-mtbm -O1 -fira-loop-pressure -fno-dce\" } */\n+\n+double\n+foo (int x)\n+{\n+  return x / (4294950402U % -65472 + 161);\n+}"}]}