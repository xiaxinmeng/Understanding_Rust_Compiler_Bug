{"sha": "76229ac8db9be933046d0cb365a727bf449b13b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYyMjlhYzhkYjliZTkzMzA0NmQwY2IzNjVhNzI3YmY0NDliMTNiMw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-09-05T10:44:00Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-09-05T10:44:00Z"}, "message": "(print_operand): Convert fprintf of single letters to putc and convert fprintf of constant strings to fputs.\n\n(print_operand): Convert fprintf of single letters to putc and convert\nfprintf of constant strings to fputs.\nOutput '%u' operand as hexadecimal.\n\nFrom-SVN: r5260", "tree": {"sha": "898de375d5e7f42e2e31a54a540a17549dc301b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/898de375d5e7f42e2e31a54a540a17549dc301b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76229ac8db9be933046d0cb365a727bf449b13b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76229ac8db9be933046d0cb365a727bf449b13b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76229ac8db9be933046d0cb365a727bf449b13b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76229ac8db9be933046d0cb365a727bf449b13b3/comments", "author": null, "committer": null, "parents": [{"sha": "b839fb3fe943321c27cb560762bc37112dd993eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b839fb3fe943321c27cb560762bc37112dd993eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b839fb3fe943321c27cb560762bc37112dd993eb"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "2529067a40844f2ca917ca0332cc78e9422c0023", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76229ac8db9be933046d0cb365a727bf449b13b3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76229ac8db9be933046d0cb365a727bf449b13b3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=76229ac8db9be933046d0cb365a727bf449b13b3", "patch": "@@ -740,12 +740,12 @@ print_operand (file, x, code)\n     case 'A':\n       /* If X is a constant integer whose low-order 5 bits are zero,\n \t write 'l'.  Otherwise, write 'r'.  This is a kludge to fix a bug\n-\t in the RS/6000 assembler where \"sri\" with a zero shift count\n+\t in the AIX assembler where \"sri\" with a zero shift count\n \t write a trash instruction.  */\n       if (GET_CODE (x) == CONST_INT && (INTVAL (x) & 31) == 0)\n-\tfprintf (file, \"l\");\n+\tputc ('l', file);\n       else\n-\tfprintf (file, \"r\");\n+\tputc ('r', file);\n       return;\n \n     case 'b':\n@@ -824,9 +824,9 @@ print_operand (file, x, code)\n       if (GET_CODE (x) != CONST_INT)\n \toutput_operand_lossage (\"invalid %%G value\");\n       else if (INTVAL (x) >= 0)\n-\tfprintf (file, \"z\");\n+\tputc ('z', file);\n       else\n-\tfprintf (file, \"m\");\n+\tputc ('m', file);\n       return;\n \t\n     case 'h':\n@@ -849,7 +849,7 @@ print_operand (file, x, code)\n     case 'I':\n       /* Print `i' if this is a constant, else nothing.  */\n       if (INT_P (x))\n-\tfprintf (file, \"i\");\n+\tputc ('i', file);\n       return;\n \n     case 'j':\n@@ -945,7 +945,7 @@ print_operand (file, x, code)\n \t the right.  */\n       if ((val & 1) && val >= 0)\n \t{\n-\t  fprintf (file, \"31\");\n+\t  fputs (\"31\", file);\n \t  return;\n \t}\n       else if ((val & 1) == 0)\n@@ -1040,9 +1040,9 @@ print_operand (file, x, code)\n \t       || GET_CODE (x) == EQ\n \t       || GET_CODE (x) == LT || GET_CODE (x) == GT\n \t       || GET_CODE (x) == LTU || GET_CODE (x) == GTU)\n-\tfprintf (file, \"12\");\n+\tfputs (\"12\", file);\n       else\n-\tfprintf (file, \"4\");\n+\tputc ('4', file);\n       return;\n       \n     case 'T':\n@@ -1056,25 +1056,25 @@ print_operand (file, x, code)\n \t       || GET_CODE (x) == EQ\n \t       || GET_CODE (x) == LT || GET_CODE (x) == GT\n \t       || GET_CODE (x) == LTU || GET_CODE (x) == GTU)\n-\tfprintf (file, \"4\");\n+\tputc ('4', file);\n       else\n-\tfprintf (file, \"12\");\n+\tfputs (\"12\", file);\n       return;\n       \n     case 'u':\n       /* High-order 16 bits of constant.  */\n       if (! INT_P (x))\n \toutput_operand_lossage (\"invalid %%u value\");\n \n-      fprintf (file, \"%d\", (INT_LOWPART (x) >> 16) & 0xffff);\n+      fprintf (file, \"0x%x\", (INT_LOWPART (x) >> 16) & 0xffff);\n       return;\n \n     case 'U':\n       /* Print `u' if this has an auto-increment or auto-decrement.  */\n       if (GET_CODE (x) == MEM\n \t  && (GET_CODE (XEXP (x, 0)) == PRE_INC\n \t      || GET_CODE (XEXP (x, 0)) == PRE_DEC))\n-\tfprintf (file, \"u\");\n+\tputc ('u', file);\n       return;\n \n     case 'w':\n@@ -1099,7 +1099,7 @@ print_operand (file, x, code)\n     case 'X':\n       if (GET_CODE (x) == MEM\n \t  && LEGITIMATE_INDEXED_ADDRESS_P (XEXP (x, 0)))\n-\tfprintf (file, \"x\");\n+\tputc ('x', file);\n       return;\n \n     case 'Y':\n@@ -1123,7 +1123,7 @@ print_operand (file, x, code)\n       if (GET_CODE (x) != SYMBOL_REF)\n \tabort ();\n \n-      fprintf (file, \".\");\n+      putc ('.', file);\n       RS6000_OUTPUT_BASENAME (file, XSTR (x, 0));\n       return;\n "}]}