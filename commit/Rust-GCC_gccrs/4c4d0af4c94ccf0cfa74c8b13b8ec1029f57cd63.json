{"sha": "4c4d0af4c94ccf0cfa74c8b13b8ec1029f57cd63", "node_id": "C_kwDOANBUbNoAKDRjNGQwYWY0Yzk0Y2NmMGNmYTc0YzhiMTNiOGVjMTAyOWY1N2NkNjM", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2022-02-01T23:00:09Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2022-02-02T00:20:02Z"}, "message": "cris: Don't default to -mmul-bug-workaround\n\nThis flips the default for the errata handling for an old version\n(TL;DR: workaround: no multiply instruction last on a cache-line).\nNewer versions of the CRIS cpu don't have that bug.  While the impact\nof the workaround is very marginal (coremark: less than .05% larger,\nless than .0005% slower) it's an irritating pseudorandom factor when\nassessing the impact of other changes.\n\nAlso, fix a wart requiring changes to more than TARGET_DEFAULT to flip\nthe default.\n\nPeople building old kernels or operating systems to run on\nETRAX 100 LX are advised to pass \"-mmul-bug-workaround\".\n\ngcc:\n\t* config/cris/cris.h (TARGET_DEFAULT): Don't include MASK_MUL_BUG.\n\t(MUL_BUG_ASM_DEFAULT): New macro.\n\t(MAYBE_AS_NO_MUL_BUG_ABORT): Define in terms of MUL_BUG_ASM_DEFAULT.\n\t* doc/invoke.texi (CRIS Options, -mmul-bug-workaround): Adjust\n\taccordingly.", "tree": {"sha": "4faf5afcdf7342385ade8ff6f0f34120d4f78448", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4faf5afcdf7342385ade8ff6f0f34120d4f78448"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c4d0af4c94ccf0cfa74c8b13b8ec1029f57cd63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c4d0af4c94ccf0cfa74c8b13b8ec1029f57cd63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c4d0af4c94ccf0cfa74c8b13b8ec1029f57cd63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c4d0af4c94ccf0cfa74c8b13b8ec1029f57cd63/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b"}], "stats": {"total": 21, "additions": 17, "deletions": 4}, "files": [{"sha": "9245d7886929d40c48d59e3e9c5a1e6dfb0619fe", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4d0af4c94ccf0cfa74c8b13b8ec1029f57cd63/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4d0af4c94ccf0cfa74c8b13b8ec1029f57cd63/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=4c4d0af4c94ccf0cfa74c8b13b8ec1029f57cd63", "patch": "@@ -153,7 +153,9 @@ extern int cris_cpu_version;\n \n #ifdef HAVE_AS_NO_MUL_BUG_ABORT_OPTION\n #define MAYBE_AS_NO_MUL_BUG_ABORT \\\n- \"%{mno-mul-bug-workaround:-no-mul-bug-abort} \"\n+ \"%{mno-mul-bug-workaround:-no-mul-bug-abort} \" \\\n+ \"%{mmul-bug-workaround:-mul-bug-abort} \" \\\n+ \"%{!mmul-bug-workaround:%{!mno-mul-bug-workaround:\" MUL_BUG_ASM_DEFAULT \"}} \"\n #else\n #define MAYBE_AS_NO_MUL_BUG_ABORT\n #endif\n@@ -255,15 +257,26 @@ extern int cris_cpu_version;\n  (MASK_SIDE_EFFECT_PREFIXES + MASK_STACK_ALIGN \\\n   + MASK_CONST_ALIGN + MASK_DATA_ALIGN \\\n   + MASK_ALIGN_BY_32 \\\n-  + MASK_PROLOGUE_EPILOGUE + MASK_MUL_BUG)\n+  + MASK_PROLOGUE_EPILOGUE)\n # else  /* 0 */\n #  define TARGET_DEFAULT \\\n  (MASK_SIDE_EFFECT_PREFIXES + MASK_STACK_ALIGN \\\n   + MASK_CONST_ALIGN + MASK_DATA_ALIGN \\\n-  + MASK_PROLOGUE_EPILOGUE + MASK_MUL_BUG)\n+  + MASK_PROLOGUE_EPILOGUE)\n # endif\n #endif\n \n+/* Don't depend on the assembler default setting for the errata machinery;\n+   always pass the option to turn it on or off explicitly.  But, we have to\n+   decide on which is the *GCC* default, and for that we should only need to\n+   consider what's in TARGET_DEFAULT; no other changes should be necessary.  */\n+\n+#if (TARGET_DEFAULT & MASK_MUL_BUG)\n+#define MUL_BUG_ASM_DEFAULT \"-mul-bug-abort\"\n+#else\n+#define MUL_BUG_ASM_DEFAULT \"-no-mul-bug-abort\"\n+#endif\n+\n /* Local, providing a default for cris_cpu_version.  */\n #define CRIS_DEFAULT_CPU_VERSION TARGET_CPU_DEFAULT\n "}, {"sha": "7af5c51cc3c74959c86c634f935b4d996c376db8", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4d0af4c94ccf0cfa74c8b13b8ec1029f57cd63/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4d0af4c94ccf0cfa74c8b13b8ec1029f57cd63/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=4c4d0af4c94ccf0cfa74c8b13b8ec1029f57cd63", "patch": "@@ -22268,7 +22268,7 @@ The options @option{-metrax4} and @option{-metrax100} are synonyms for\n @opindex mmul-bug-workaround\n @opindex mno-mul-bug-workaround\n Work around a bug in the @code{muls} and @code{mulu} instructions for CPU\n-models where it applies.  This option is active by default.\n+models where it applies.  This option is disabled by default.\n \n @item -mpdebug\n @opindex mpdebug"}]}