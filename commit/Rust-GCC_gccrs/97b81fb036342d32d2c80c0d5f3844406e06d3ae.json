{"sha": "97b81fb036342d32d2c80c0d5f3844406e06d3ae", "node_id": "C_kwDOANBUbNoAKDk3YjgxZmIwMzYzNDJkMzJkMmM4MGMwZDVmMzg0NDQwNmUwNmQzYWU", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2022-06-08T18:25:14Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2022-06-09T13:22:15Z"}, "message": "c++: Better module initializer code\n\nEvery module interface needs to emit a global initializer, but it\nmight have nothing to init.  In those cases, there's no need for any\nidempotency boolean to be emitted.\n\n\tgcc/cp\n\t* cp-tree.h (module_initializer_kind): Replace with ...\n\t(module_global_init_needed, module_has_import_inits): ...\n\tthese.\n\t* decl2.cc (start_objects): Add has_body parm.  Reorganize\n\tmodule initializer creation.\n\t(generate_ctor_or_dtor_function): Adjust.\n\t(c_parse_final_cleanups): Adjust.\n\t(vtv_start_verification_constructor_init_function): Adjust.\n\t* module.cc (module_initializer_kind): Replace with ...\n\t(module_global_init_needed, module_has_import_inits): ...\n\tthese.\n\n\tgcc/testsuite/\n\t* g++.dg/modules/init-2_a.C: Check no idempotency.\n\t* g++.dg/modules/init-2_b.C: Check idempotency.", "tree": {"sha": "d6bcd572bd672afa46957b50f5b241bb3811b01b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6bcd572bd672afa46957b50f5b241bb3811b01b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97b81fb036342d32d2c80c0d5f3844406e06d3ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97b81fb036342d32d2c80c0d5f3844406e06d3ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97b81fb036342d32d2c80c0d5f3844406e06d3ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97b81fb036342d32d2c80c0d5f3844406e06d3ae/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "209de00fdb9da90a727337d6e752ea583a11d982", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/209de00fdb9da90a727337d6e752ea583a11d982", "html_url": "https://github.com/Rust-GCC/gccrs/commit/209de00fdb9da90a727337d6e752ea583a11d982"}], "stats": {"total": 62, "additions": 34, "deletions": 28}, "files": [{"sha": "a5d932821676fa1177c60ef89ad35bdd7aa7d228", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b81fb036342d32d2c80c0d5f3844406e06d3ae/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b81fb036342d32d2c80c0d5f3844406e06d3ae/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=97b81fb036342d32d2c80c0d5f3844406e06d3ae", "patch": "@@ -7179,7 +7179,8 @@ extern module_state *get_module (tree name, module_state *parent = NULL,\n \t\t\t\t bool partition = false);\n extern bool module_may_redeclare (tree decl);\n \n-extern int module_initializer_kind ();\n+extern bool module_global_init_needed ();\n+extern bool module_has_import_inits ();\n extern void module_add_import_initializers ();\n \n /* Where the namespace-scope decl was originally declared.  */"}, {"sha": "9de9a7a4f8a8671f55f2bcc330a6ab6bc40c9969", "filename": "gcc/cp/decl2.cc", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b81fb036342d32d2c80c0d5f3844406e06d3ae/gcc%2Fcp%2Fdecl2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b81fb036342d32d2c80c0d5f3844406e06d3ae/gcc%2Fcp%2Fdecl2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.cc?ref=97b81fb036342d32d2c80c0d5f3844406e06d3ae", "patch": "@@ -55,7 +55,7 @@ int raw_dump_id;\n  \n extern cpp_reader *parse_in;\n \n-static tree start_objects (bool, unsigned);\n+static tree start_objects (bool, unsigned, bool);\n static tree finish_objects (bool, unsigned, tree);\n static tree start_partial_init_fini_fn (bool, unsigned, unsigned);\n static void finish_partial_init_fini_fn (tree);\n@@ -3848,15 +3848,13 @@ generate_tls_wrapper (tree fn)\n /* Start a global constructor or destructor function.  */\n \n static tree\n-start_objects (bool initp, unsigned priority)\n+start_objects (bool initp, unsigned priority, bool has_body)\n {\n-  int module_init = 0;\n-\n-  if (priority == DEFAULT_INIT_PRIORITY && initp)\n-    module_init = module_initializer_kind ();\n-\n+  bool default_init = initp && priority == DEFAULT_INIT_PRIORITY;\n+  bool is_module_init = default_init && module_global_init_needed ();\n   tree name = NULL_TREE;\n-  if (module_init > 0)\n+\n+  if (is_module_init)\n     name = mangle_module_global_init (0);\n   else\n     {\n@@ -3880,7 +3878,7 @@ start_objects (bool initp, unsigned priority)\n   tree fntype =\tbuild_function_type (void_type_node, void_list_node);\n   tree fndecl = build_lang_decl (FUNCTION_DECL, name, fntype);\n   DECL_CONTEXT (fndecl) = FROB_CONTEXT (global_namespace);\n-  if (module_init > 0)\n+  if (is_module_init)\n     {\n       SET_DECL_ASSEMBLER_NAME (fndecl, name);\n       TREE_PUBLIC (fndecl) = true;\n@@ -3905,8 +3903,10 @@ start_objects (bool initp, unsigned priority)\n \n   tree body = begin_compound_stmt (BCS_FN_BODY);\n \n-  if (module_init > 0)\n+  bool has_import_inits = default_init && module_has_import_inits ();\n+  if (is_module_init && (has_import_inits || has_body))\n     {\n+      // If the function is going to be empty, don't emit idempotency.\n       // 'static bool __in_chrg = false;\n       // if (__inchrg) return;\n       // __inchrg = true\n@@ -3930,7 +3930,7 @@ start_objects (bool initp, unsigned priority)\n       finish_expr_stmt (assign);\n     }\n \n-  if (module_init)\n+  if (has_import_inits)\n     module_add_import_initializers ();\n \n   return body;\n@@ -4321,7 +4321,7 @@ generate_ctor_or_dtor_function (bool initp, unsigned priority,\n {\n   input_location = locus;\n \n-  tree body = start_objects (initp, priority);\n+  tree body = start_objects (initp, priority, bool (fns));\n \n   /* To make sure dynamic construction doesn't access globals from other\n      compilation units where they might not be yet constructed, for\n@@ -4359,7 +4359,9 @@ generate_ctor_or_dtor_function (bool initp, unsigned priority,\n   if (initp && (flag_sanitize & SANITIZE_ADDRESS))\n     finish_expr_stmt (asan_dynamic_init_call (/*after_p=*/true));\n \n-  /* Close out the function.  */\n+  /* Close out the function, and arrange for it to be called at init\n+     or fini time.  (Even module initializer functions need this, as\n+     we cannot guarantee the module is imported somewhere in the programq.)  */\n   expand_or_defer_fn (finish_objects (initp, priority, body));\n }\n \n@@ -5205,7 +5207,7 @@ c_parse_final_cleanups (void)\n   push_lang_context (lang_name_c);\n \n   if ((c_dialect_objc () && objc_static_init_needed_p ())\n-      || module_initializer_kind ())\n+      || module_global_init_needed () || module_has_import_inits ())\n     {\n       // Make sure there's a default priority entry.\n       if (!static_init_fini_fns[true])\n@@ -5871,7 +5873,7 @@ mark_used (tree decl)\n tree\n vtv_start_verification_constructor_init_function (void)\n {\n-  return start_objects (/*initp=*/true, MAX_RESERVED_INIT_PRIORITY - 1);\n+  return start_objects (/*initp=*/true, MAX_RESERVED_INIT_PRIORITY - 1, true);\n }\n \n tree"}, {"sha": "7e36996c0fc06336efe914b6900461820df5e677", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b81fb036342d32d2c80c0d5f3844406e06d3ae/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b81fb036342d32d2c80c0d5f3844406e06d3ae/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=97b81fb036342d32d2c80c0d5f3844406e06d3ae", "patch": "@@ -19026,22 +19026,21 @@ declare_module (module_state *module, location_t from_loc, bool exporting_p,\n     }\n }\n \n-/* +1, we're the primary or a partition.  Therefore emitting a\n-   globally-callable idemportent initializer function.\n-   -1, we have direct imports.  Therefore emitting calls to their\n-   initializers.  */\n+/* Return true IFF we must emit a module global initializer function\n+   (which will be called by importers' init code).  */\n \n-int\n-module_initializer_kind ()\n+bool\n+module_global_init_needed ()\n {\n-  int result = 0;\n+  return module_has_cmi_p () && !header_module_p ();\n+}\n \n-  if (module_has_cmi_p () && !header_module_p ())\n-    result = +1;\n-  else if (num_init_calls_needed)\n-    result = -1;\n+/* Return true IFF we have import global inits to call.  */\n \n-  return result;\n+bool\n+module_has_import_inits ()\n+{\n+  return bool (num_init_calls_needed);\n }\n \n /* Emit calls to each direct import's global initializer.  Including"}, {"sha": "4174cf53911bd242a302ff26ab72ce2af69b7ad2", "filename": "gcc/testsuite/g++.dg/modules/init-2_a.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b81fb036342d32d2c80c0d5f3844406e06d3ae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Finit-2_a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b81fb036342d32d2c80c0d5f3844406e06d3ae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Finit-2_a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Finit-2_a.C?ref=97b81fb036342d32d2c80c0d5f3844406e06d3ae", "patch": "@@ -3,3 +3,5 @@ export module Foo;\n // { dg-module-cmi Foo }\n \n // { dg-final { scan-assembler {_ZGIW3Foo:} } }\n+// But it is empty, and so no idempotency bool\n+// { dg-final { scan-assembler-not {_ZZ9_ZGIW3FooE9__in_chrg} } }"}, {"sha": "4350944139f6cec42469331a78819d8b8e79c009", "filename": "gcc/testsuite/g++.dg/modules/init-2_b.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b81fb036342d32d2c80c0d5f3844406e06d3ae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Finit-2_b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b81fb036342d32d2c80c0d5f3844406e06d3ae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Finit-2_b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Finit-2_b.C?ref=97b81fb036342d32d2c80c0d5f3844406e06d3ae", "patch": "@@ -5,4 +5,6 @@ export module Bar;\n import Foo;\n \n // { dg-final { scan-assembler {_?_ZGIW3Bar:} } }\n+// There should be an idempotency check\n+// { dg-final { scan-assembler {_ZZ9_ZGIW3BarE9__in_chrg} } }\n // { dg-final { scan-assembler {call[ \\t]+_?_ZGIW3Foo} { target i?86-*-* x86_64-*-* } } }"}]}