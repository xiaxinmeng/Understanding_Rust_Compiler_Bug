{"sha": "3f2286f2a309eae914cf6de604374280a4fd7cdf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YyMjg2ZjJhMzA5ZWFlOTE0Y2Y2ZGU2MDQzNzQyODBhNGZkN2NkZg==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2007-07-24T16:45:32Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2007-07-24T16:45:32Z"}, "message": "re PR fortran/32778 (pedantic warning: intrinsics that are GNU extensions not part of -std=gnu)\n\ngcc/fortran:\n2007-07-24  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/32778\n\t* intrinsic.c (add_sym): Do not exclude any symbols, even if not part\n\tof the selected standard.\n\t(make generic): Likewise.\n\t(make alias): Likewise, set standard the alias belongs to.\n\t(add_subroutines): Call make_noreturn unconditionally.\n\t(check_intrinsic_standard): Change return value to try.\n\t(gfc_intrinsic_func_interface): Check return value of above function.\n\t(gfc_intrinsic_sub_interface): Likewise.\n\ngcc/testsuite:\n2007-07-24  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/32778\n\t* gfortran.dg/imag_2.f: Removed\n\t* gfortran.dg/warn_std_1.f90: New test.\n\t* gfortran.dg/warn_std_2.f90: New test.\n\t* gfortran.dg/warn_std_3.f90: New test.\n\nFrom-SVN: r126881", "tree": {"sha": "8e8478f1ee5c421f5e87691bc8b74f80590848c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e8478f1ee5c421f5e87691bc8b74f80590848c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f2286f2a309eae914cf6de604374280a4fd7cdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f2286f2a309eae914cf6de604374280a4fd7cdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f2286f2a309eae914cf6de604374280a4fd7cdf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f2286f2a309eae914cf6de604374280a4fd7cdf/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "78187f5ad268f94b8be20660040fd08d31aeb2d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78187f5ad268f94b8be20660040fd08d31aeb2d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78187f5ad268f94b8be20660040fd08d31aeb2d2"}], "stats": {"total": 173, "additions": 125, "deletions": 48}, "files": [{"sha": "6445cf1f5055fab671596b4c7aa1d43bb917dff3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f2286f2a309eae914cf6de604374280a4fd7cdf/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f2286f2a309eae914cf6de604374280a4fd7cdf/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3f2286f2a309eae914cf6de604374280a4fd7cdf", "patch": "@@ -1,3 +1,15 @@\n+2007-07-24  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/32778\n+\t* intrinsic.c (add_sym): Do not exclude any symbols, even if not part\n+\tof the selected standard.\n+\t(make generic): Likewise.\n+\t(make alias): Likewise, set standard the alias belongs to.\n+\t(add_subroutines): Call make_noreturn unconditionally.\n+\t(check_intrinsic_standard): Change return value to try.\n+\t(gfc_intrinsic_func_interface): Check return value of above function.\n+\t(gfc_intrinsic_sub_interface): Likewise.\n+\n 2007-07-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/30814"}, {"sha": "0b062b5ae865808e243d2e48f6c525c41fa33017", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 30, "deletions": 33, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f2286f2a309eae914cf6de604374280a4fd7cdf/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f2286f2a309eae914cf6de604374280a4fd7cdf/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=3f2286f2a309eae914cf6de604374280a4fd7cdf", "patch": "@@ -228,12 +228,6 @@ add_sym (const char *name, gfc_isym_id id, enum class cl, int actual_ok, bt type\n   int optional, first_flag;\n   va_list argp;\n \n-  /* First check that the intrinsic belongs to the selected standard.\n-     If not, don't add it to the symbol list.  */\n-  if (!(gfc_option.allow_std & standard)\n-      && gfc_option.flag_all_intrinsics == 0)\n-    return;\n-\n   switch (sizing)\n     {\n     case SZ_SUBS:\n@@ -806,17 +800,18 @@ gfc_intrinsic_name (const char *name, int subroutine_flag)\n    The first argument is the name of the generic function, which is\n    also the name of a specific function.  The rest of the specifics\n    currently in the table are placed into the list of specific\n-   functions associated with that generic.  */\n+   functions associated with that generic.\n+\n+   PR fortran/32778\n+   FIXME: Remove the argument STANDARD if no regressions are\n+          encountered. Change all callers (approx. 360).\n+*/\n \n static void\n-make_generic (const char *name, gfc_isym_id id, int standard)\n+make_generic (const char *name, gfc_isym_id id, int standard ATTRIBUTE_UNUSED)\n {\n   gfc_intrinsic_sym *g;\n \n-  if (!(gfc_option.allow_std & standard)\n-      && gfc_option.flag_all_intrinsics == 0)\n-    return;\n-\n   if (sizing != SZ_NOTHING)\n     return;\n \n@@ -848,19 +843,14 @@ make_generic (const char *name, gfc_isym_id id, int standard)\n \n \n /* Create a duplicate intrinsic function entry for the current\n-   function, the only difference being the alternate name.  Note that\n-   we use argument lists more than once, but all argument lists are\n-   freed as a single block.  */\n+   function, the only differences being the alternate name and\n+   a different standard if necessary. Note that we use argument\n+   lists more than once, but all argument lists are freed as a\n+   single block.  */\n \n static void\n make_alias (const char *name, int standard)\n {\n-  /* First check that the intrinsic belongs to the selected standard.\n-     If not, don't add it to the symbol list.  */\n-  if (!(gfc_option.allow_std & standard)\n-      && gfc_option.flag_all_intrinsics == 0)\n-    return;\n-\n   switch (sizing)\n     {\n     case SZ_FUNCS:\n@@ -874,6 +864,7 @@ make_alias (const char *name, int standard)\n     case SZ_NOTHING:\n       next_sym[0] = next_sym[-1];\n       next_sym->name = gfc_get_string (name);\n+      next_sym->standard = standard;\n       next_sym++;\n       break;\n \n@@ -2340,8 +2331,7 @@ add_subroutines (void)\n \n   add_sym_0s (\"abort\", GFC_ISYM_ABORT, GFC_STD_GNU, NULL);\n \n-  if ((gfc_option.allow_std & GFC_STD_GNU) || gfc_option.flag_all_intrinsics)\n-    make_noreturn();\n+  make_noreturn();\n \n   add_sym_1s (\"cpu_time\", GFC_ISYM_CPU_TIME, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_F95,\n \t      gfc_check_cpu_time, NULL, gfc_resolve_cpu_time,\n@@ -2476,8 +2466,7 @@ add_subroutines (void)\n \t      gfc_check_exit, NULL, gfc_resolve_exit,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n-  if ((gfc_option.allow_std & GFC_STD_GNU) || gfc_option.flag_all_intrinsics)\n-    make_noreturn();\n+  make_noreturn();\n \n   add_sym_3s (\"fgetc\", GFC_ISYM_FGETC, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_fgetputc_sub, NULL, gfc_resolve_fgetc_sub,\n@@ -3278,14 +3267,19 @@ check_specific (gfc_intrinsic_sym *specific, gfc_expr *expr, int error_flag)\n /* Check whether an intrinsic belongs to whatever standard the user\n    has chosen.  */\n \n-static void\n+static try\n check_intrinsic_standard (const char *name, int standard, locus *where)\n {\n-  if (!gfc_option.warn_nonstd_intrinsics)\n-    return;\n+  /* Do not warn about GNU-extensions if -std=gnu.  */\n+  if (!gfc_option.warn_nonstd_intrinsics\n+      || (standard == GFC_STD_GNU && gfc_option.warn_std & GFC_STD_GNU))\n+    return SUCCESS;\n \n-  gfc_notify_std (standard, \"Intrinsic '%s' at %L is not included \"\n-\t\t  \"in the selected standard\", name, where);\n+  if (gfc_notify_std (standard, \"Intrinsic '%s' at %L is not included \"\n+\t\t      \"in the selected standard\", name, where) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n }\n \n \n@@ -3331,6 +3325,9 @@ gfc_intrinsic_func_interface (gfc_expr *expr, int error_flag)\n       return MATCH_NO;\n     }\n \n+  if (check_intrinsic_standard (name, isym->standard, &expr->where) == FAILURE)\n+    return MATCH_ERROR;\n+\n   gfc_current_intrinsic_where = &expr->where;\n \n   /* Bypass the generic list for min and max.  */\n@@ -3398,8 +3395,6 @@ gfc_intrinsic_func_interface (gfc_expr *expr, int error_flag)\n \t\t\t&expr->where) == FAILURE)\n     return MATCH_ERROR;\n \n-  check_intrinsic_standard (name, isym->standard, &expr->where);\n-\n   return MATCH_YES;\n }\n \n@@ -3421,6 +3416,9 @@ gfc_intrinsic_sub_interface (gfc_code *c, int error_flag)\n   if (isym == NULL)\n     return MATCH_NO;\n \n+  if (check_intrinsic_standard (name, isym->standard, &c->loc) == FAILURE)\n+    return MATCH_ERROR;\n+\n   gfc_suppress_error = !error_flag;\n \n   init_arglist (isym);\n@@ -3456,7 +3454,6 @@ gfc_intrinsic_sub_interface (gfc_code *c, int error_flag)\n     }\n \n   c->resolved_sym->attr.noreturn = isym->noreturn;\n-  check_intrinsic_standard (name, isym->standard, &c->loc);\n \n   return MATCH_YES;\n "}, {"sha": "1a75a1f5bb72a884e179810e9b17bda682a3c241", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f2286f2a309eae914cf6de604374280a4fd7cdf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f2286f2a309eae914cf6de604374280a4fd7cdf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3f2286f2a309eae914cf6de604374280a4fd7cdf", "patch": "@@ -1,3 +1,11 @@\n+2007-07-24  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/32778\n+\t* gfortran.dg/imag_2.f: Removed\n+\t* gfortran.dg/warn_std_1.f90: New test.\n+\t* gfortran.dg/warn_std_2.f90: New test.\n+\t* gfortran.dg/warn_std_3.f90: New test.\n+\n 2007-07-24  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR c++/29001"}, {"sha": "137f089f44c7305e32bb74b4024084df0aa50cfc", "filename": "gcc/testsuite/gfortran.dg/imag_2.f", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78187f5ad268f94b8be20660040fd08d31aeb2d2/gcc%2Ftestsuite%2Fgfortran.dg%2Fimag_2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78187f5ad268f94b8be20660040fd08d31aeb2d2/gcc%2Ftestsuite%2Fgfortran.dg%2Fimag_2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimag_2.f?ref=78187f5ad268f94b8be20660040fd08d31aeb2d2", "patch": "@@ -1,15 +0,0 @@\n-! { dg-do compile }\n-! { dg-options \"-std=f95\" }\n-      program bug\n-      implicit none\n-      complex(kind=8) z\n-      double precision x\n-      z = cmplx(1.e0_8, 2.e0_8)\n-      x = imag(z)         ! { dg-error \"has no IMPLICIT type\" \"\" }\n-      x = imagpart(z)     ! { dg-error \"has no IMPLICIT type\" \"\" }\n-      x = realpart(z)     ! { dg-error \"has no IMPLICIT type\" \"\" }\n-      x = imag(x)         ! { dg-error \"has no IMPLICIT type\" \"\" }\n-      x = imagpart(x)     ! { dg-error \"has no IMPLICIT type\" \"\" }\n-      x = realpart(x)     ! { dg-error \"has no IMPLICIT type\" \"\" }\n-      end\n-"}, {"sha": "4d709a12cdfde2021175f31639b380c4772fd95b", "filename": "gcc/testsuite/gfortran.dg/warn_std_1.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f2286f2a309eae914cf6de604374280a4fd7cdf/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_std_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f2286f2a309eae914cf6de604374280a4fd7cdf/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_std_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_std_1.f90?ref=3f2286f2a309eae914cf6de604374280a4fd7cdf", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do compile }\n+! { dg-options \"-Wnonstd-intrinsics -std=gnu\" }\n+!\n+! PR fortran/32778 - pedantic warning: intrinsics that \n+!                    are GNU extensions not part of -std=gnu\n+!\n+! (1/3) Check for excess errors if -std=gnu.\n+!\n+\n+CHARACTER(len=255) :: tmp\n+REAL(8) :: x\n+\n+! GNU extension, check overload of F77 standard intrinsic\n+x = ZABS(CMPLX(0.0, 1.0, 8))\n+\n+! GNU extension\n+CALL flush()\n+\n+! F95\n+tmp = ADJUSTL(\"  gfortran  \")\n+\n+! F2003\n+CALL GET_COMMAND (tmp)\n+\n+END"}, {"sha": "0a8c509d5c65c182efbd0ecfb867289fef31409d", "filename": "gcc/testsuite/gfortran.dg/warn_std_2.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f2286f2a309eae914cf6de604374280a4fd7cdf/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_std_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f2286f2a309eae914cf6de604374280a4fd7cdf/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_std_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_std_2.f90?ref=3f2286f2a309eae914cf6de604374280a4fd7cdf", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do compile }\n+! { dg-options \"-Wnonstd-intrinsics -std=f95\" }\n+!\n+! PR fortran/32778 - pedantic warning: intrinsics that \n+!                    are GNU extensions not part of -std=gnu\n+!\n+! (2/3) Check for GNU extensions and intrinsics from F2003 if -std=f95.\n+!\n+\n+CHARACTER(len=255) :: tmp\n+REAL(8) :: x\n+\n+! GNU extension, check overload of F77 standard intrinsic\n+x = ZABS(CMPLX(0.0, 1.0, 8))    ! { dg-error \"is not included in the selected standard\" }\n+\n+! GNU extension\n+CALL flush()                    ! { dg-error \"is not included in the selected standard\" }\n+\n+! F95\n+tmp = ADJUSTL(\"  gfortran  \")\n+\n+! F2003\n+CALL GET_COMMAND (tmp)          ! { dg-error \"is not included in the selected standard\" }\n+\n+END"}, {"sha": "0d0a0f149bdddf40d4d29230c9e52ec473156627", "filename": "gcc/testsuite/gfortran.dg/warn_std_3.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f2286f2a309eae914cf6de604374280a4fd7cdf/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_std_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f2286f2a309eae914cf6de604374280a4fd7cdf/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_std_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_std_3.f90?ref=3f2286f2a309eae914cf6de604374280a4fd7cdf", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do compile }\n+! { dg-options \"-Wnonstd-intrinsics -std=f2003\" }\n+!\n+! PR fortran/32778 - pedantic warning: intrinsics that \n+!                    are GNU extensions not part of -std=gnu\n+!\n+! (3/3) Check for GNU extensions if -std=f2003.\n+!\n+\n+CHARACTER(len=255) :: tmp\n+REAL(8) :: x\n+\n+! GNU extension, check overload of F77 standard intrinsic\n+x = ZABS(CMPLX(0.0, 1.0, 8))    ! { dg-error \"is not included in the selected standard\" }\n+\n+! GNU extension\n+CALL flush()                    ! { dg-error \"is not included in the selected standard\" }\n+\n+! F95\n+tmp = ADJUSTL(\"  gfortran  \")\n+\n+! F2003\n+CALL GET_COMMAND (tmp)\n+\n+END"}]}