{"sha": "76c3e73e325f8452a05e8912d15740b1a5fb7ed9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZjM2U3M2UzMjVmODQ1MmEwNWU4OTEyZDE1NzQwYjFhNWZiN2VkOQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2002-08-11T22:22:28Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-08-11T22:22:28Z"}, "message": "c-common.c (c_common_init): Call preprocess_file instead.\n\n\t* c-common.c (c_common_init): Call preprocess_file instead.\n\t(c_common_finish): Move to c-opts.c.\n\t* c-common.h (preprocess_file): new.\n\t* c-opts.c (out_fname, out_stream, deps_append, preprocess_file,\n\tcheck_deps_environment_vars, c_common_finish): New.\n\t(c_common_decode_option): Update for out_fname and dependencies.\n\t* cppinit.c (init_dependency_output, output_deps): Remove.\n\t(cpp_destroy): Update prototype.\n\t(cpp_add_dependency_target): New.\n\t(cpp_read_main_file): Don't overlay a buffer.\n\t(cpp_finish): Take a deps output stream and write deps to it.\n\tReturn the error count.\n\t(cpp_post_options): Don't canonicalize out_fname, or do anything\n\twith dependencies.\n\t* cpplib.h (struct cpp_options): Remove out_fname and\n\tpreprocess_only.\n\t(cpp_add_dependency_target): New.\n\t(cpp_destroy, cpp_finish, cpp_preprocess_file): Update.\n\t* cppmain.c (cpp_preprocess_file): Update prototype.  Don't\n\tset preprocess_only.  Don't handle the output stream directly.\n\nFrom-SVN: r56214", "tree": {"sha": "4c8881ce4db4d58b891519d0bd6b159033e51ada", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c8881ce4db4d58b891519d0bd6b159033e51ada"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76c3e73e325f8452a05e8912d15740b1a5fb7ed9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76c3e73e325f8452a05e8912d15740b1a5fb7ed9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76c3e73e325f8452a05e8912d15740b1a5fb7ed9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76c3e73e325f8452a05e8912d15740b1a5fb7ed9/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e0c32c62d5c47790333bb557ed2d89a3806246d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0c32c62d5c47790333bb557ed2d89a3806246d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0c32c62d5c47790333bb557ed2d89a3806246d0"}], "stats": {"total": 367, "additions": 192, "deletions": 175}, "files": [{"sha": "0282381902d70e78aac26de34d954198f1bf532d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3e73e325f8452a05e8912d15740b1a5fb7ed9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3e73e325f8452a05e8912d15740b1a5fb7ed9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76c3e73e325f8452a05e8912d15740b1a5fb7ed9", "patch": "@@ -1,3 +1,26 @@\n+2002-08-11  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* c-common.c (c_common_init): Call preprocess_file instead.\n+\t(c_common_finish): Move to c-opts.c.\n+\t* c-common.h (preprocess_file): new.\n+\t* c-opts.c (out_fname, out_stream, deps_append, preprocess_file,\n+\tcheck_deps_environment_vars, c_common_finish): New.\n+\t(c_common_decode_option): Update for out_fname and dependencies.\n+\t* cppinit.c (init_dependency_output, output_deps): Remove.\n+\t(cpp_destroy): Update prototype.\n+\t(cpp_add_dependency_target): New.\n+\t(cpp_read_main_file): Don't overlay a buffer.\n+\t(cpp_finish): Take a deps output stream and write deps to it.\n+\tReturn the error count.\n+\t(cpp_post_options): Don't canonicalize out_fname, or do anything\n+\twith dependencies.\n+\t* cpplib.h (struct cpp_options): Remove out_fname and\n+\tpreprocess_only.\n+\t(cpp_add_dependency_target): New.\n+\t(cpp_destroy, cpp_finish, cpp_preprocess_file): Update.\n+\t* cppmain.c (cpp_preprocess_file): Update prototype.  Don't\n+\tset preprocess_only.  Don't handle the output stream directly.\n+\n 2002-08-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* dsp16xx.c (print_operand): Fix format specifier."}, {"sha": "d925e9174824a8841291e00921ccaa4a92398c8e", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3e73e325f8452a05e8912d15740b1a5fb7ed9/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3e73e325f8452a05e8912d15740b1a5fb7ed9/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=76c3e73e325f8452a05e8912d15740b1a5fb7ed9", "patch": "@@ -4914,7 +4914,7 @@ c_common_init (filename)\n   /* NULL is passed up to toplev.c and we exit quickly.  */\n   if (flag_preprocess_only)\n     {\n-      cpp_preprocess_file (parse_in);\n+      preprocess_file ();\n       return NULL;\n     }\n \n@@ -4930,17 +4930,6 @@ c_common_init (filename)\n   return filename;\n }\n \n-/* Common finish hook for the C, ObjC and C++ front ends.  */\n-void\n-c_common_finish ()\n-{\n-  cpp_finish (parse_in);\n-\n-  /* For performance, avoid tearing down cpplib's internal structures.\n-     Call cpp_errors () instead of cpp_destroy ().  */\n-  errorcount += cpp_errors (parse_in);\n-}\n-\n static void\n c_init_attributes ()\n {"}, {"sha": "ce3860820fb52e8d91cdafc7296a1802fd9fa6e6", "filename": "gcc/c-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3e73e325f8452a05e8912d15740b1a5fb7ed9/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3e73e325f8452a05e8912d15740b1a5fb7ed9/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=76c3e73e325f8452a05e8912d15740b1a5fb7ed9", "patch": "@@ -1209,6 +1209,8 @@ extern int c_common_unsafe_for_reeval\t\tPARAMS ((tree));\n \n extern const char *init_c_lex\t\t\tPARAMS ((const char *));\n \n+extern void preprocess_file\t\t\tPARAMS ((void));\n+\n /* Information recorded about each file examined during compilation.  */\n \n struct c_fileinfo"}, {"sha": "e2c1bb82314a6282f52a47f6ae5141baf14be539", "filename": "gcc/c-opts.c", "status": "modified", "additions": 117, "deletions": 4, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3e73e325f8452a05e8912d15740b1a5fb7ed9/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3e73e325f8452a05e8912d15740b1a5fb7ed9/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=76c3e73e325f8452a05e8912d15740b1a5fb7ed9", "patch": "@@ -33,6 +33,13 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n static cpp_options *cpp_opts;\n \n+/* Filename and stream for preprocessed output.  */\n+static const char *out_fname;\n+static FILE *out_stream;\n+\n+/* Append dependencies to deps_file.  */\n+static bool deps_append;\n+\n static void missing_arg PARAMS ((size_t));\n static size_t find_opt PARAMS ((const char *, int));\n static void set_Wimplicit PARAMS ((int));\n@@ -43,6 +50,7 @@ static void handle_OPT_d PARAMS ((const char *));\n static void set_std_cxx98 PARAMS ((int));\n static void set_std_c89 PARAMS ((int, int));\n static void set_std_c99 PARAMS ((int));\n+static void check_deps_environment_vars PARAMS ((void));\n \n #define CL_C_ONLY\t(1 << 0) /* Only C.  */\n #define CL_OBJC_ONLY\t(1 << 1) /* Only ObjC.  */\n@@ -456,8 +464,8 @@ c_common_decode_option (argc, argv)\n     {\n       if (!cpp_opts->in_fname)\n \tcpp_opts->in_fname = opt;\n-      else if (!cpp_opts->out_fname)\n-\tcpp_opts->out_fname = opt;\n+      else if (!out_fname)\n+\tout_fname = opt;\n       else\n \t{\n \t  error (\"too many filenames given.  Type %s --help for usage\",\n@@ -1110,8 +1118,8 @@ c_common_decode_option (argc, argv)\n       break;\n \n     case OPT_o:\n-      if (!cpp_opts->out_fname)\n-\tcpp_opts->out_fname = arg;\n+      if (!out_fname)\n+\tout_fname = arg;\n       else\n \t{\n \t  error (\"output filename specified twice\");\n@@ -1196,6 +1204,21 @@ c_common_decode_option (argc, argv)\n bool\n c_common_post_options ()\n {\n+  /* Canonicalize the output filename.  */\n+  if (out_fname == NULL || !strcmp (out_fname, \"-\"))\n+    out_fname = \"\";\n+\n+  if (cpp_opts->print_deps == 0)\n+    check_deps_environment_vars ();\n+\n+  /* If we're not outputting dependencies, complain if other -M\n+     options have been given.  */\n+  if (!cpp_opts->print_deps\n+      && (cpp_opts->print_deps_missing_files\n+\t  || cpp_opts->deps_file\n+\t  || cpp_opts->deps_phony_targets))\n+      error (\"you must additionally specify either -M or -MM\");\n+\n   cpp_post_options (parse_in);\n \n   flag_inline_trees = 1;\n@@ -1239,6 +1262,56 @@ c_common_post_options ()\n   return flag_preprocess_only;\n }\n \n+/* Preprocess the input file to out_stream.  */\n+void\n+preprocess_file ()\n+{\n+  /* Open the output now.  We must do so even if no_output is on,\n+     because there may be other output than from the actual\n+     preprocessing (e.g. from -dM).  */\n+  if (out_fname[0] == '\\0')\n+    out_stream = stdout;\n+  else\n+    out_stream = fopen (out_fname, \"w\");\n+\n+  if (out_stream == NULL)\n+    fatal_io_error (\"opening output file %s\", out_fname);\n+  else\n+    cpp_preprocess_file (parse_in, out_stream);\n+}\n+\n+/* Common finish hook for the C, ObjC and C++ front ends.  */\n+void\n+c_common_finish ()\n+{\n+  FILE *deps_stream = NULL;\n+\n+  if (cpp_opts->print_deps)\n+    {\n+      /* If -M or -MM was seen without -MF, default output to the\n+\t output stream.  */\n+      if (!cpp_opts->deps_file)\n+\tdeps_stream = out_stream;\n+      else\n+\t{\n+\t  deps_stream = fopen (cpp_opts->deps_file, deps_append ? \"a\": \"w\");\n+\t  if (!deps_stream)\n+\t    fatal_io_error (\"opening dependency file %s\", cpp_opts->deps_file);\n+\t}\n+    }\n+\n+  /* For performance, avoid tearing down cpplib's internal structures\n+     with cpp_destroy ().  */\n+  errorcount += cpp_finish (parse_in, deps_stream);\n+\n+  if (deps_stream && deps_stream != out_stream\n+      && (ferror (deps_stream) || fclose (deps_stream)))\n+    fatal_io_error (\"closing dependency file %s\", cpp_opts->deps_file);\n+\n+  if (out_stream && (ferror (out_stream) || fclose (out_stream)))\n+    fatal_io_error (\"when writing output to %s\", out_fname);\n+}\n+\n /* Set the C 89 standard (with 1994 amendments if C94, without GNU\n    extensions if ISO).  There is no concept of gnu94.  */\n static void\n@@ -1256,6 +1329,46 @@ set_std_c89 (c94, iso)\n   flag_writable_strings = 0;\n }\n \n+/* Either of two environment variables can specify output of\n+   dependencies.  Their value is either \"OUTPUT_FILE\" or \"OUTPUT_FILE\n+   DEPS_TARGET\", where OUTPUT_FILE is the file to write deps info to\n+   and DEPS_TARGET is the target to mention in the deps.  They also\n+   result in dependency information being appended to the output file\n+   rather than overwriting it.  */\n+static void\n+check_deps_environment_vars ()\n+{\n+  char *spec;\n+\n+  GET_ENVIRONMENT (spec, \"DEPENDENCIES_OUTPUT\");\n+  if (spec)\n+    cpp_opts->print_deps = 1;\n+  else\n+    {\n+      GET_ENVIRONMENT (spec, \"SUNPRO_DEPENDENCIES\");\n+      if (spec)\n+\tcpp_opts->print_deps = 2;\n+    }\n+\n+  if (spec)\n+    {\n+      /* Find the space before the DEPS_TARGET, if there is one.  */\n+      char *s = strchr (spec, ' ');\n+      if (s)\n+\t{\n+\t  /* Let the caller perform MAKE quoting.  */\n+\t  cpp_add_dependency_target (parse_in, s + 1, 0);\n+\t  *s = '\\0';\n+\t}\n+\n+      /* Command line -MF overrides environment variables and default.  */\n+      if (!cpp_opts->deps_file)\n+\tcpp_opts->deps_file = spec;\n+\n+      cpp_opts->print_deps_append = 1;\n+    }\n+}\n+\n /* Set the C 99 standard (without GNU extensions if ISO).  */\n static void\n set_std_c99 (iso)"}, {"sha": "977629acbe1cfade788d57b32c32c0900327a703", "filename": "gcc/cppinit.c", "status": "modified", "additions": 35, "deletions": 125, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3e73e325f8452a05e8912d15740b1a5fb7ed9/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3e73e325f8452a05e8912d15740b1a5fb7ed9/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=76c3e73e325f8452a05e8912d15740b1a5fb7ed9", "patch": "@@ -102,13 +102,11 @@ static void merge_include_chains\tPARAMS ((cpp_reader *));\n static bool push_include\t\tPARAMS ((cpp_reader *,\n \t\t\t\t\t\t struct pending_option *));\n static void free_chain\t\t\tPARAMS ((struct pending_option *));\n-static void init_dependency_output\tPARAMS ((cpp_reader *));\n static void init_standard_includes\tPARAMS ((cpp_reader *));\n static void read_original_filename\tPARAMS ((cpp_reader *));\n static void new_pending_directive\tPARAMS ((struct cpp_pending *,\n \t\t\t\t\t\t const char *,\n \t\t\t\t\t\t cl_directive_handler));\n-static void output_deps\t\t\tPARAMS ((cpp_reader *));\n static int parse_option\t\t\tPARAMS ((const char *));\n \n /* Fourth argument to append_include_chain: chain to use.\n@@ -537,11 +535,10 @@ cpp_create_reader (lang)\n \n /* Free resources used by PFILE.  Accessing PFILE after this function\n    returns leads to undefined behaviour.  Returns the error count.  */\n-int\n+void\n cpp_destroy (pfile)\n      cpp_reader *pfile;\n {\n-  int result;\n   struct search_path *dir, *dirn;\n   cpp_context *context, *contextn;\n   tokenrun *run, *runn;\n@@ -595,11 +592,7 @@ cpp_destroy (pfile)\n     }\n \n   free_line_maps (&pfile->line_maps);\n-\n-  result = pfile->errors;\n   free (pfile);\n-\n-  return result;\n }\n \n /* This structure defines one built-in identifier.  A node will be\n@@ -882,6 +875,21 @@ static void sanity_checks (pfile)\n # define sanity_checks(PFILE)\n #endif\n \n+/* Add a dependency target.  Can be called any number of times before\n+   cpp_read_main_file().  If no targets have been added before\n+   cpp_read_main_file(), then the default target is used.  */\n+void\n+cpp_add_dependency_target (pfile, target, quote)\n+     cpp_reader *pfile;\n+     const char *target;\n+     int quote;\n+{\n+  if (!pfile->deps)\n+    pfile->deps = deps_init ();\n+\n+  deps_add_target (pfile->deps, target, quote);\n+}\n+\n /* This is called after options have been parsed, and partially\n    processed.  Setup for processing input from the file named FNAME,\n    or stdin if it is the empty string.  Return the original filename\n@@ -936,10 +944,6 @@ cpp_read_main_file (pfile, fname, table)\n      of the front ends.  */\n   if (CPP_OPTION (pfile, preprocessed))\n     read_original_filename (pfile);\n-  /* Overlay an empty buffer to seed traditional preprocessing.  */\n-  else if (CPP_OPTION (pfile, traditional)\n-\t   && !CPP_OPTION (pfile, preprocess_only))\n-    _cpp_overlay_buffer (pfile, U\"\", 0);\n \n   return pfile->map->to_file;\n }\n@@ -1039,48 +1043,16 @@ _cpp_maybe_push_include_file (pfile)\n     }\n }\n \n-/* Use mkdeps.c to output dependency information.  */\n-static void\n-output_deps (pfile)\n-     cpp_reader *pfile;\n-{\n-  /* Stream on which to print the dependency information.  */\n-  FILE *deps_stream = 0;\n-  const char *const deps_mode =\n-    CPP_OPTION (pfile, print_deps_append) ? \"a\" : \"w\";\n-\n-  if (CPP_OPTION (pfile, deps_file)[0] == '\\0')\n-    deps_stream = stdout;\n-  else\n-    {\n-      deps_stream = fopen (CPP_OPTION (pfile, deps_file), deps_mode);\n-      if (deps_stream == 0)\n-\t{\n-\t  cpp_errno (pfile, DL_ERROR, CPP_OPTION (pfile, deps_file));\n-\t  return;\n-\t}\n-    }\n-\n-  deps_write (pfile->deps, deps_stream, 72);\n-\n-  if (CPP_OPTION (pfile, deps_phony_targets))\n-    deps_phony_targets (pfile->deps, deps_stream);\n-\n-  /* Don't close stdout.  */\n-  if (deps_stream != stdout)\n-    {\n-      if (ferror (deps_stream) || fclose (deps_stream) != 0)\n-\tcpp_error (pfile, DL_ERROR, \"I/O error on output\");\n-    }\n-}\n-\n-/* This is called at the end of preprocessing.  It pops the\n-   last buffer and writes dependency output.  It should also\n-   clear macro definitions, such that you could call cpp_start_read\n-   with a new filename to restart processing.  */\n-void\n-cpp_finish (pfile)\n+/* This is called at the end of preprocessing.  It pops the last\n+   buffer and writes dependency output, and returns the number of\n+   errors.\n+ \n+   Maybe it should also reset state, such that you could call\n+   cpp_start_read with a new filename to restart processing.  */\n+int\n+cpp_finish (pfile, deps_stream)\n      cpp_reader *pfile;\n+     FILE *deps_stream;\n {\n   /* Warn about unused macros before popping the final buffer.  */\n   if (CPP_OPTION (pfile, warn_unused_macros))\n@@ -1094,13 +1066,20 @@ cpp_finish (pfile)\n   while (pfile->buffer)\n     _cpp_pop_buffer (pfile);\n \n-  /* Don't write the deps file if preprocessing has failed.  */\n-  if (CPP_OPTION (pfile, print_deps) && pfile->errors == 0)\n-    output_deps (pfile);\n+  /* Don't write the deps file if there are errors.  */\n+  if (deps_stream && CPP_OPTION (pfile, print_deps) && !pfile->errors)\n+    {\n+      deps_write (pfile->deps, deps_stream, 72);\n+\n+      if (CPP_OPTION (pfile, deps_phony_targets))\n+\tdeps_phony_targets (pfile->deps, deps_stream);\n+    }\n \n   /* Report on headers that could use multiple include guards.  */\n   if (CPP_OPTION (pfile, print_include_names))\n     _cpp_report_missing_guards (pfile);\n+\n+  return pfile->errors;\n }\n \n /* Add a directive to be handled later in the initialization phase.  */\n@@ -1479,10 +1458,6 @@ cpp_post_options (pfile)\n       || !strcmp (CPP_OPTION (pfile, in_fname), \"-\"))\n     CPP_OPTION (pfile, in_fname) = \"\";\n \n-  if (CPP_OPTION (pfile, out_fname) == NULL\n-      || !strcmp (CPP_OPTION (pfile, out_fname), \"-\"))\n-    CPP_OPTION (pfile, out_fname) = \"\";\n-\n   /* -Wtraditional is not useful in C++ mode.  */\n   if (CPP_OPTION (pfile, cplusplus))\n     CPP_OPTION (pfile, warn_traditional) = 0;\n@@ -1518,69 +1493,4 @@ cpp_post_options (pfile)\n \tCPP_OPTION (pfile, dump_macros) = dump_none;\n       CPP_OPTION (pfile, dump_includes) = 0;\n     }\n-\n-  /* Intialize, and check environment variables for, dependency\n-     output.  */\n-  init_dependency_output (pfile);\n-\n-  /* If we're not outputting dependencies, complain if other -M\n-     options have been given.  */\n-  if (!CPP_OPTION (pfile, print_deps)\n-      && (CPP_OPTION (pfile, print_deps_missing_files)\n-\t  || CPP_OPTION (pfile, deps_file)\n-\t  || CPP_OPTION (pfile, deps_phony_targets)))\n-    cpp_error (pfile, DL_ERROR,\n-\t       \"you must additionally specify either -M or -MM\");\n-}\n-\n-/* Set up dependency-file output.  On exit, if print_deps is non-zero\n-   then deps_file is not NULL; stdout is the empty string.  */\n-static void\n-init_dependency_output (pfile)\n-     cpp_reader *pfile;\n-{\n-  char *spec, *s, *output_file;\n-\n-  /* Either of two environment variables can specify output of deps.\n-     Its value is either \"OUTPUT_FILE\" or \"OUTPUT_FILE DEPS_TARGET\",\n-     where OUTPUT_FILE is the file to write deps info to\n-     and DEPS_TARGET is the target to mention in the deps.  */\n-\n-  if (CPP_OPTION (pfile, print_deps) == 0)\n-    {\n-      spec = getenv (\"DEPENDENCIES_OUTPUT\");\n-      if (spec)\n-\tCPP_OPTION (pfile, print_deps) = 1;\n-      else\n-\t{\n-\t  spec = getenv (\"SUNPRO_DEPENDENCIES\");\n-\t  if (spec)\n-\t    CPP_OPTION (pfile, print_deps) = 2;\n-\t  else\n-\t    return;\n-\t}\n-\n-      /* Find the space before the DEPS_TARGET, if there is one.  */\n-      s = strchr (spec, ' ');\n-      if (s)\n-\t{\n-\t  /* Let the caller perform MAKE quoting.  */\n-\t  deps_add_target (pfile->deps, s + 1, 0);\n-\t  output_file = (char *) xmalloc (s - spec + 1);\n-\t  memcpy (output_file, spec, s - spec);\n-\t  output_file[s - spec] = 0;\n-\t}\n-      else\n-\toutput_file = spec;\n-\n-      /* Command line -MF overrides environment variables and default.  */\n-      if (CPP_OPTION (pfile, deps_file) == 0)\n-\tCPP_OPTION (pfile, deps_file) = output_file;\n-\n-      CPP_OPTION (pfile, print_deps_append) = 1;\n-    }\n-  else if (CPP_OPTION (pfile, deps_file) == 0)\n-    /* If -M or -MM was seen without -MF, default output to wherever\n-       was specified with -o.  out_fname is non-NULL here.  */\n-    CPP_OPTION (pfile, deps_file) = CPP_OPTION (pfile, out_fname);\n }"}, {"sha": "b6a75cf42797e223550705ad3a2d8ae834364b3e", "filename": "gcc/cpplib.h", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3e73e325f8452a05e8912d15740b1a5fb7ed9/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3e73e325f8452a05e8912d15740b1a5fb7ed9/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=76c3e73e325f8452a05e8912d15740b1a5fb7ed9", "patch": "@@ -223,7 +223,6 @@ struct cpp_options\n {\n   /* Name of input and output files.  */\n   const char *in_fname;\n-  const char *out_fname;\n \n   /* Characters between tab stops.  */\n   unsigned int tabstop;\n@@ -398,9 +397,6 @@ struct cpp_options\n   /* True for traditional preprocessing.  */\n   unsigned char traditional;\n \n-  /* True if only preprocessing and not compiling.  */\n-  unsigned char preprocess_only;\n-\n   /* Target-specific features set by the front end or client.  */\n \n   /* Precision for target CPP arithmetic, target characters, target\n@@ -508,6 +504,14 @@ extern cpp_reader *cpp_create_reader PARAMS ((enum c_lang));\n    command line options).  */\n extern void cpp_set_lang PARAMS ((cpp_reader *, enum c_lang));\n \n+/* Add a dependency TARGET.  Quote it for \"make\" if QUOTE.  Can be\n+   called any number of times before cpp_read_main_file().  If no\n+   targets have been added before cpp_read_main_file(), then the\n+   default target is used.  */\n+extern void cpp_add_dependency_target PARAMS ((cpp_reader *,\n+\t\t\t\t\t       const char * target,\n+\t\t\t\t\t       int quote));\n+\n /* Call these to get pointers to the options and callback structures\n    for a given reader.  These pointers are good until you call\n    cpp_finish on that reader.  You can either edit the callbacks\n@@ -553,7 +557,7 @@ extern void cpp_finish_options PARAMS ((cpp_reader *));\n /* Call this to release the handle at the end of preprocessing.  Any\n    use of the handle after this function returns is invalid.  Returns\n    cpp_errors (pfile).  */\n-extern int cpp_destroy PARAMS ((cpp_reader *));\n+extern void cpp_destroy PARAMS ((cpp_reader *));\n \n /* Error count.  */\n extern unsigned int cpp_errors PARAMS ((cpp_reader *));\n@@ -567,7 +571,7 @@ extern void cpp_register_pragma PARAMS ((cpp_reader *,\n \t\t\t\t\t const char *, const char *,\n \t\t\t\t\t void (*) PARAMS ((cpp_reader *))));\n \n-extern void cpp_finish PARAMS ((cpp_reader *));\n+extern int cpp_finish PARAMS ((cpp_reader *, FILE *));\n extern int cpp_avoid_paste PARAMS ((cpp_reader *, const cpp_token *,\n \t\t\t\t    const cpp_token *));\n extern const cpp_token *cpp_get_token PARAMS ((cpp_reader *));\n@@ -722,7 +726,7 @@ extern int cpp_included\tPARAMS ((cpp_reader *, const char *));\n extern void cpp_make_system_header PARAMS ((cpp_reader *, int, int));\n \n /* In cppmain.c */\n-extern void cpp_preprocess_file PARAMS ((cpp_reader *));\n+extern void cpp_preprocess_file PARAMS ((cpp_reader *, FILE *));\n \n #ifdef __cplusplus\n }"}, {"sha": "adde66c1ad4a701f4514f635bf9a4d43780e4213", "filename": "gcc/cppmain.c", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3e73e325f8452a05e8912d15740b1a5fb7ed9/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3e73e325f8452a05e8912d15740b1a5fb7ed9/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=76c3e73e325f8452a05e8912d15740b1a5fb7ed9", "patch": "@@ -67,37 +67,20 @@ static struct printer print;\n \n /* Preprocess and output.  */\n void\n-cpp_preprocess_file (pfile)\n+cpp_preprocess_file (pfile, out_stream)\n      cpp_reader *pfile;\n+     FILE *out_stream;\n {\n   options = cpp_get_options (pfile);\n \n-  /* Let preprocessor know if it's only preprocessing.  It would be\n-     nice to lose this somehow.  */\n-  options->preprocess_only = 1;\n-\n   /* Initialize the printer structure.  Setting print.line to -1 here\n      is a trick to guarantee that the first token of the file will\n      cause a linemarker to be output by maybe_print_line.  */\n   print.line = (unsigned int) -1;\n   print.printed = 0;\n   print.prev = 0;\n   print.map = 0;\n-\n-  /* Open the output now.  We must do so even if no_output is on,\n-     because there may be other output than from the actual\n-     preprocessing (e.g. from -dM).  */\n-  if (options->out_fname[0] == '\\0')\n-    print.outf = stdout;\n-  else\n-    {\n-      print.outf = fopen (options->out_fname, \"w\");\n-      if (print.outf == NULL)\n-\t{\n-\t  cpp_errno (pfile, DL_ERROR, options->out_fname);\n-\t  return;\n-\t}\n-    }\n+  print.outf = out_stream;\n \n   setup_callbacks (pfile);\n \n@@ -122,13 +105,6 @@ cpp_preprocess_file (pfile)\n   /* Flush any pending output.  */\n   if (print.printed)\n     putc ('\\n', print.outf);\n-\n-  /* Don't close stdout (dependencies have yet to be output).  */\n-  if (print.outf != stdout)\n-    {\n-      if (ferror (print.outf) || fclose (print.outf))\n-\tcpp_errno (pfile, DL_ERROR, options->out_fname);\n-    }\n }\n \n /* Set up the callbacks as appropriate.  */"}]}