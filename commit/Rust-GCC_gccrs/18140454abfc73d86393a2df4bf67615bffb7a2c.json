{"sha": "18140454abfc73d86393a2df4bf67615bffb7a2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTgxNDA0NTRhYmZjNzNkODYzOTNhMmRmNGJmNjc2MTViZmZiN2EyYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-09-29T22:58:31Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-09-29T22:58:31Z"}, "message": "re PR c++/54738 ([C++11][SFINAE] Hard errors for pointer-to-member function expressions)\n\n/cp\n2012-09-29  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/54738\n\t* decl2.c (build_offset_ref_call_from_tree): Add tsubst_flags_t\n\tparameter.\n\t* pt.c (tsubst_copy_and_build): Adjust.\n\t* parser.c (cp_parser_postfix_expression): Likewise.\n\t* cp-tree.h: Adjust declaration.\n\n/testsuite\n2012-09-29  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/54738\n\t* g++.dg/cpp0x/sfinae42.C: New.\n\nFrom-SVN: r191862", "tree": {"sha": "32f7792d6eb97f6f0424af7fec2996644b3dc215", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32f7792d6eb97f6f0424af7fec2996644b3dc215"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18140454abfc73d86393a2df4bf67615bffb7a2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18140454abfc73d86393a2df4bf67615bffb7a2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18140454abfc73d86393a2df4bf67615bffb7a2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18140454abfc73d86393a2df4bf67615bffb7a2c/comments", "author": null, "committer": null, "parents": [{"sha": "004a09342d166735b88fa83b121b78894ccde2c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/004a09342d166735b88fa83b121b78894ccde2c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/004a09342d166735b88fa83b121b78894ccde2c6"}], "stats": {"total": 82, "additions": 73, "deletions": 9}, "files": [{"sha": "376cbf671fb44ba41e422ad4f1375a82fad4501c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18140454abfc73d86393a2df4bf67615bffb7a2c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18140454abfc73d86393a2df4bf67615bffb7a2c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=18140454abfc73d86393a2df4bf67615bffb7a2c", "patch": "@@ -1,3 +1,12 @@\n+2012-09-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/54738\n+\t* decl2.c (build_offset_ref_call_from_tree): Add tsubst_flags_t\n+\tparameter.\n+\t* pt.c (tsubst_copy_and_build): Adjust.\n+\t* parser.c (cp_parser_postfix_expression): Likewise.\n+\t* cp-tree.h: Adjust declaration.\n+\n 2012-09-28  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/54372 - unused attribute inactive on dependant entities"}, {"sha": "f4370224dd32b3f3c6a8e6cfeef342c1620dd8e9", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18140454abfc73d86393a2df4bf67615bffb7a2c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18140454abfc73d86393a2df4bf67615bffb7a2c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=18140454abfc73d86393a2df4bf67615bffb7a2c", "patch": "@@ -5149,7 +5149,8 @@ extern void determine_visibility\t\t(tree);\n extern void constrain_class_visibility\t\t(tree);\n extern void import_export_decl\t\t\t(tree);\n extern tree build_cleanup\t\t\t(tree);\n-extern tree build_offset_ref_call_from_tree\t(tree, VEC(tree,gc) **);\n+extern tree build_offset_ref_call_from_tree\t(tree, VEC(tree,gc) **,\n+\t\t\t\t\t\t tsubst_flags_t);\n extern bool decl_constant_var_p\t\t\t(tree);\n extern bool decl_maybe_constant_var_p\t\t(tree);\n extern void check_default_args\t\t\t(tree);"}, {"sha": "4cff0516d776060e0fede79ea70f9104fbbbb9db", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18140454abfc73d86393a2df4bf67615bffb7a2c/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18140454abfc73d86393a2df4bf67615bffb7a2c/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=18140454abfc73d86393a2df4bf67615bffb7a2c", "patch": "@@ -4087,7 +4087,8 @@ cp_write_global_declarations (void)\n    ARGS.  */\n \n tree\n-build_offset_ref_call_from_tree (tree fn, VEC(tree,gc) **args)\n+build_offset_ref_call_from_tree (tree fn, VEC(tree,gc) **args,\n+\t\t\t\t tsubst_flags_t complain)\n {\n   tree orig_fn;\n   VEC(tree,gc) *orig_args = NULL;\n@@ -4115,7 +4116,7 @@ build_offset_ref_call_from_tree (tree fn, VEC(tree,gc) **args)\n       if (TREE_CODE (TREE_TYPE (fn)) == METHOD_TYPE)\n \t{\n \t  if (TREE_CODE (fn) == DOTSTAR_EXPR)\n-\t    object = cp_build_addr_expr (object, tf_warning_or_error);\n+\t    object = cp_build_addr_expr (object, complain);\n \t  VEC_safe_insert (tree, gc, *args, 0, object);\n \t}\n       /* Now that the arguments are done, transform FN.  */\n@@ -4130,17 +4131,17 @@ build_offset_ref_call_from_tree (tree fn, VEC(tree,gc) **args)\n \tvoid B::g() { (this->*p)(); }  */\n   if (TREE_CODE (fn) == OFFSET_REF)\n     {\n-      tree object_addr = cp_build_addr_expr (object, tf_warning_or_error);\n+      tree object_addr = cp_build_addr_expr (object, complain);\n       fn = TREE_OPERAND (fn, 1);\n       fn = get_member_function_from_ptrfunc (&object_addr, fn,\n-\t\t\t\t\t     tf_warning_or_error);\n+\t\t\t\t\t     complain);\n       VEC_safe_insert (tree, gc, *args, 0, object_addr);\n     }\n \n   if (CLASS_TYPE_P (TREE_TYPE (fn)))\n-    expr = build_op_call (fn, args, tf_warning_or_error);\n+    expr = build_op_call (fn, args, complain);\n   else\n-    expr = cp_build_function_call_vec (fn, args, tf_warning_or_error);\n+    expr = cp_build_function_call_vec (fn, args, complain);\n   if (processing_template_decl && expr != error_mark_node)\n     expr = build_min_non_dep_call_vec (expr, orig_fn, orig_args);\n "}, {"sha": "155b51a180d9f6168283aff464fd8d77733a4ee8", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18140454abfc73d86393a2df4bf67615bffb7a2c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18140454abfc73d86393a2df4bf67615bffb7a2c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=18140454abfc73d86393a2df4bf67615bffb7a2c", "patch": "@@ -5749,7 +5749,8 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t\t     || TREE_CODE (postfix_expression) == MEMBER_REF\n \t\t     || TREE_CODE (postfix_expression) == DOTSTAR_EXPR)\n \t      postfix_expression = (build_offset_ref_call_from_tree\n-\t\t\t\t    (postfix_expression, &args));\n+\t\t\t\t    (postfix_expression, &args,\n+\t\t\t\t     tf_warning_or_error));\n \t    else if (idk == CP_ID_KIND_QUALIFIED)\n \t      /* A call to a static class member, or a namespace-scope\n \t\t function.  */"}, {"sha": "104d4dd6898b32e0533d4075f32e26240c939d8f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18140454abfc73d86393a2df4bf67615bffb7a2c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18140454abfc73d86393a2df4bf67615bffb7a2c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=18140454abfc73d86393a2df4bf67615bffb7a2c", "patch": "@@ -13783,7 +13783,8 @@ tsubst_copy_and_build (tree t,\n \t  mark_used (function);\n \n \tif (TREE_CODE (function) == OFFSET_REF)\n-\t  ret = build_offset_ref_call_from_tree (function, &call_args);\n+\t  ret = build_offset_ref_call_from_tree (function, &call_args,\n+\t\t\t\t\t\t complain);\n \telse if (TREE_CODE (function) == COMPONENT_REF)\n \t  {\n \t    tree instance = TREE_OPERAND (function, 0);"}, {"sha": "8578075ec2d64d070cf7fd16d49751d0fbbdb953", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18140454abfc73d86393a2df4bf67615bffb7a2c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18140454abfc73d86393a2df4bf67615bffb7a2c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=18140454abfc73d86393a2df4bf67615bffb7a2c", "patch": "@@ -1,3 +1,8 @@\n+2012-09-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/54738\n+\t* g++.dg/cpp0x/sfinae42.C: New.\n+\n 2012-09-29  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* gcc.target/powerpc/405-dlmzb-strlen-1.c: Skip on AIX."}, {"sha": "a7a23a317220fa1402df3b76b8e6b6c6887aa9bf", "filename": "gcc/testsuite/g++.dg/cpp0x/sfinae42.C", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18140454abfc73d86393a2df4bf67615bffb7a2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae42.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18140454abfc73d86393a2df4bf67615bffb7a2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae42.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae42.C?ref=18140454abfc73d86393a2df4bf67615bffb7a2c", "patch": "@@ -0,0 +1,46 @@\n+// PR c++/54738\n+// { dg-do compile { target c++11 } }\n+\n+template<class T>\n+T&& declval();\n+\n+template<class F, class T1, class... Ts>\n+decltype(((*declval<T1>()).*declval<F>())(declval<Ts>()...))\n+test1(int);\n+\n+template<class...>\n+void test1(...);\n+\n+template<class F, class T1, class... Ts>\n+decltype((declval<T1>().*declval<F>())(declval<Ts>()...))\n+test2(int);\n+\n+template<class...>\n+void test2(...);\n+\n+struct S {};\n+\n+typedef void (S::*Func)(int) const;\n+typedef void (S::*Func2)(int);\n+\n+typedef decltype(test1<Func, S*>(0)) type1a;\n+typedef decltype(test1<Func, S*&>(0)) type1b;\n+typedef decltype(test1<Func, S*, int, int>(0)) type1c;\n+typedef decltype(test1<Func, S*&, int, int>(0)) type1d;\n+\n+typedef decltype(test2<Func, S>(0)) type2a;\n+typedef decltype(test2<Func, S&>(0)) type2b;\n+typedef decltype(test2<Func, S, int, int>(0)) type2c;\n+typedef decltype(test2<Func, S&, int, int>(0)) type2d;\n+\n+typedef decltype(test1<Func, S*, S>(0)) type3a;\n+typedef decltype(test1<Func, S*&, S>(0)) type3b;\n+\n+typedef decltype(test2<Func, S, S>(0)) type4a;\n+typedef decltype(test2<Func, S&, S>(0)) type4b;\n+\n+typedef decltype(test1<Func2, const S*, int>(0)) type5a;\n+typedef decltype(test1<Func2, const S*&, int>(0)) type5b;\n+\n+typedef decltype(test2<Func2, const S, int>(0)) type6a;\n+typedef decltype(test2<Func2, const S&, int>(0)) type6b;"}]}