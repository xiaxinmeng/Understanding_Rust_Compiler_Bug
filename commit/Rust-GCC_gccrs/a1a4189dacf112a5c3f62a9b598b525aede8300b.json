{"sha": "a1a4189dacf112a5c3f62a9b598b525aede8300b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFhNDE4OWRhY2YxMTJhNWMzZjYyYTliNTk4YjUyNWFlZGU4MzAwYg==", "commit": {"author": {"name": "Jim Blandy", "email": "jimb@gcc.gnu.org", "date": "2000-04-19T19:22:34Z"}, "committer": {"name": "Jim Blandy", "email": "jimb@gcc.gnu.org", "date": "2000-04-19T19:22:34Z"}, "message": "dwarf2out.c (DWARF2_ADDR_SIZE): New macro.\n\n* dwarf2out.c (DWARF2_ADDR_SIZE): New macro.  Use it instead\nof PTR_SIZE, when appropriate.\n\nFrom-SVN: r33264", "tree": {"sha": "7a2b869cbd8ab05678ed20cabb38ae8f8f82ec27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a2b869cbd8ab05678ed20cabb38ae8f8f82ec27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1a4189dacf112a5c3f62a9b598b525aede8300b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1a4189dacf112a5c3f62a9b598b525aede8300b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1a4189dacf112a5c3f62a9b598b525aede8300b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1a4189dacf112a5c3f62a9b598b525aede8300b/comments", "author": null, "committer": null, "parents": [{"sha": "f0e5eeebb0d652371e3bdf33bd31287faeeefaf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0e5eeebb0d652371e3bdf33bd31287faeeefaf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0e5eeebb0d652371e3bdf33bd31287faeeefaf7"}], "stats": {"total": 71, "additions": 43, "deletions": 28}, "files": [{"sha": "9ab30294434d8fb29586149a1e6d3f455d8e4438", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 43, "deletions": 28, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a4189dacf112a5c3f62a9b598b525aede8300b/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a4189dacf112a5c3f62a9b598b525aede8300b/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=a1a4189dacf112a5c3f62a9b598b525aede8300b", "patch": "@@ -144,13 +144,25 @@ dw_fde_node;\n #ifndef CHAR_TYPE_SIZE\n #define CHAR_TYPE_SIZE BITS_PER_UNIT\n #endif\n+\n+/* The size of the target's pointer type.  */\n #ifndef PTR_SIZE\n #define PTR_SIZE (POINTER_SIZE / BITS_PER_UNIT)\n #endif\n \n+/* The size of addresses as they appear in the Dwarf 2 data.\n+   Some architectures use word addresses to refer to code locations,\n+   but Dwarf 2 info always uses byte addresses.  On such machines,\n+   Dwarf 2 addresses need to be larger than the architecture's\n+   pointers.  */\n+#ifndef DWARF2_ADDR_SIZE\n+#define DWARF2_ADDR_SIZE (POINTER_SIZE / BITS_PER_UNIT)\n+#endif\n+\n /* The size in bytes of a DWARF field indicating an offset or length\n-   relative to a debug info section, specified to be 4 bytes in the DWARF-2\n-   specification.  The SGI/MIPS ABI defines it to be the same as PTR_SIZE.  */\n+   relative to a debug info section, specified to be 4 bytes in the\n+   DWARF-2 specification.  The SGI/MIPS ABI defines it to be the same\n+   as DWARF2_ADDR_SIZE.  */\n \n #ifndef DWARF_OFFSET_SIZE\n #define DWARF_OFFSET_SIZE 4\n@@ -312,9 +324,10 @@ static void dwarf2out_frame_debug_expr\tPARAMS ((rtx, char *));\n #endif\n \n #ifndef UNALIGNED_WORD_ASM_OP\n-#define UNALIGNED_WORD_ASM_OP \\\n-  ((PTR_SIZE) == 8 ? UNALIGNED_DOUBLE_INT_ASM_OP : \\\n-   ((PTR_SIZE) == 2 ? UNALIGNED_SHORT_ASM_OP : UNALIGNED_INT_ASM_OP))\n+#define UNALIGNED_WORD_ASM_OP\t\t\t\t\t\t\\\n+  ((DWARF2_ADDR_SIZE) == 8 ? UNALIGNED_DOUBLE_INT_ASM_OP\t\t\\\n+   : (DWARF2_ADDR_SIZE) == 2 ? UNALIGNED_SHORT_ASM_OP\t\t\t\\\n+   : UNALIGNED_INT_ASM_OP)\n #endif\n \n #ifndef ASM_OUTPUT_DWARF_DELTA2\n@@ -426,7 +439,7 @@ static void dwarf2out_frame_debug_expr\tPARAMS ((rtx, char *));\n    .debug_frame.  */\n \n #define ASM_OUTPUT_DWARF_ADDR(FILE,LABEL) \\\n-  assemble_integer (gen_rtx_SYMBOL_REF (Pmode, LABEL), PTR_SIZE, 1)\n+  assemble_integer (gen_rtx_SYMBOL_REF (Pmode, LABEL), DWARF2_ADDR_SIZE, 1)\n \n #define ASM_OUTPUT_DWARF_OFFSET4(FILE,LABEL) \\\n   assemble_integer (gen_rtx_SYMBOL_REF (SImode, LABEL), 4, 1)\n@@ -450,7 +463,7 @@ static void dwarf2out_frame_debug_expr\tPARAMS ((rtx, char *));\n   assemble_integer (gen_rtx_MINUS (Pmode,\t\t\t\t\\\n \t\t\t\t   gen_rtx_SYMBOL_REF (Pmode, LABEL1),\t\\\n \t\t\t\t   gen_rtx_SYMBOL_REF (Pmode, LABEL2)),\t\\\n-\t\t    PTR_SIZE, 1)\n+\t\t    DWARF2_ADDR_SIZE, 1)\n \n #define ASM_OUTPUT_DWARF_DELTA(FILE,LABEL1,LABEL2) \\\n   ASM_OUTPUT_DWARF_DELTA4 (FILE,LABEL1,LABEL2)\n@@ -1640,7 +1653,7 @@ output_call_frame_info (for_eh)\n       tree label = get_file_function_name ('F');\n \n       force_data_section ();\n-      ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (PTR_SIZE));\n+      ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (DWARF2_ADDR_SIZE));\n       ASM_GLOBALIZE_LABEL (asm_out_file, IDENTIFIER_POINTER (label));\n       ASM_OUTPUT_LABEL (asm_out_file, IDENTIFIER_POINTER (label));\n #endif\n@@ -1744,7 +1757,7 @@ output_call_frame_info (for_eh)\n     output_cfi (cfi, NULL);\n \n   /* Pad the CIE out to an address sized boundary.  */\n-  ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (PTR_SIZE));\n+  ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (DWARF2_ADDR_SIZE));\n   ASM_OUTPUT_LABEL (asm_out_file, l2);\n #ifdef ASM_OUTPUT_DEFINE_LABEL_DIFFERENCE_SYMBOL\n   ASM_OUTPUT_DEFINE_LABEL_DIFFERENCE_SYMBOL (asm_out_file, ld, l2, l1);\n@@ -1816,7 +1829,7 @@ output_call_frame_info (for_eh)\n \toutput_cfi (cfi, fde);\n \n       /* Pad the FDE out to an address sized boundary.  */\n-      ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (PTR_SIZE));\n+      ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (DWARF2_ADDR_SIZE));\n       ASM_OUTPUT_LABEL (asm_out_file, l2);\n #ifdef ASM_OUTPUT_DEFINE_LABEL_DIFFERENCE_SYMBOL\n       ASM_OUTPUT_DEFINE_LABEL_DIFFERENCE_SYMBOL (asm_out_file, ld, l2, l1);\n@@ -2147,13 +2160,14 @@ extern int flag_traditional;\n #define DWARF_PUBNAMES_HEADER_SIZE (2 * DWARF_OFFSET_SIZE + 2)\n \n /* Fixed size portion of the address range info.  */\n-#define DWARF_ARANGES_HEADER_SIZE \\\n-  (DWARF_ROUND (2 * DWARF_OFFSET_SIZE + 4, PTR_SIZE * 2) - DWARF_OFFSET_SIZE)\n+#define DWARF_ARANGES_HEADER_SIZE\t\t\t\t\t\\\n+  (DWARF_ROUND (2 * DWARF_OFFSET_SIZE + 4, DWARF2_ADDR_SIZE * 2)\t\\\n+   - DWARF_OFFSET_SIZE)\n \n /* Size of padding portion in the address range info.  It must be\n    aligned to twice the pointer size.  */\n #define DWARF_ARANGES_PAD_SIZE \\\n-  (DWARF_ROUND (2 * DWARF_OFFSET_SIZE + 4, PTR_SIZE * 2) \\\n+  (DWARF_ROUND (2 * DWARF_OFFSET_SIZE + 4, DWARF2_ADDR_SIZE * 2) \\\n    - (2 * DWARF_OFFSET_SIZE + 4))\n \n /* The default is to have gcc emit the line number tables.  */\n@@ -4460,7 +4474,7 @@ size_of_loc_descr (loc)\n   switch (loc->dw_loc_opc)\n     {\n     case DW_OP_addr:\n-      size += PTR_SIZE;\n+      size += DWARF2_ADDR_SIZE;\n       break;\n     case DW_OP_const1u:\n     case DW_OP_const1s:\n@@ -4601,7 +4615,7 @@ size_of_die (die)\n       switch (AT_class (a))\n \t{\n \tcase dw_val_class_addr:\n-\t  size += PTR_SIZE;\n+\t  size += DWARF2_ADDR_SIZE;\n \t  break;\n \tcase dw_val_class_loc:\n \t  {\n@@ -4634,7 +4648,7 @@ size_of_die (die)\n \t  size += DWARF_OFFSET_SIZE;\n \t  break;\n \tcase dw_val_class_lbl_id:\n-\t  size += PTR_SIZE;\n+\t  size += DWARF2_ADDR_SIZE;\n \t  break;\n \tcase dw_val_class_lbl_offset:\n \t  size += DWARF_OFFSET_SIZE;\n@@ -4741,11 +4755,11 @@ size_of_aranges ()\n   size = DWARF_ARANGES_HEADER_SIZE;\n \n   /* Count the address/length pair for this compilation unit.  */\n-  size += 2 * PTR_SIZE;\n-  size += 2 * PTR_SIZE * arange_table_in_use;\n+  size += 2 * DWARF2_ADDR_SIZE;\n+  size += 2 * DWARF2_ADDR_SIZE * arange_table_in_use;\n \n   /* Count the two zero words used to terminated the address range table.  */\n-  size += 2 * PTR_SIZE;\n+  size += 2 * DWARF2_ADDR_SIZE;\n   return size;\n }\n \f\n@@ -5212,7 +5226,7 @@ output_compilation_unit_header ()\n \t     ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n-  ASM_OUTPUT_DWARF_DATA1 (asm_out_file, PTR_SIZE);\n+  ASM_OUTPUT_DWARF_DATA1 (asm_out_file, DWARF2_ADDR_SIZE);\n   if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Pointer Size (in bytes)\", ASM_COMMENT_START);\n \n@@ -5366,7 +5380,7 @@ output_aranges ()\n \t     ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n-  ASM_OUTPUT_DWARF_DATA1 (asm_out_file, PTR_SIZE);\n+  ASM_OUTPUT_DWARF_DATA1 (asm_out_file, DWARF2_ADDR_SIZE);\n   if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Size of Address\", ASM_COMMENT_START);\n \n@@ -5388,7 +5402,7 @@ output_aranges ()\n         fprintf (asm_out_file, \",0\");\n       if (flag_debug_asm)\n         fprintf (asm_out_file, \"\\t%s Pad to %d byte boundary\",\n-                 ASM_COMMENT_START, 2 * PTR_SIZE);\n+                 ASM_COMMENT_START, 2 * DWARF2_ADDR_SIZE);\n     }\n \n   fputc ('\\n', asm_out_file);\n@@ -5632,13 +5646,14 @@ output_line_info ()\n \t}\n       else\n \t{\n-\t  /* This can handle any delta.  This takes 4+PTR_SIZE bytes.  */\n+\t  /* This can handle any delta.  This takes\n+             4+DWARF2_ADDR_SIZE bytes.  */\n \t  ASM_OUTPUT_DWARF_DATA1 (asm_out_file, 0);\n \t  if (flag_debug_asm)\n \t    fprintf (asm_out_file, \"\\t%s DW_LNE_set_address\",\n \t\t     ASM_COMMENT_START);\n \t  fputc ('\\n', asm_out_file);\n-\t  output_uleb128 (1 + PTR_SIZE);\n+\t  output_uleb128 (1 + DWARF2_ADDR_SIZE);\n \t  fputc ('\\n', asm_out_file);\n \t  ASM_OUTPUT_DWARF_DATA1 (asm_out_file, DW_LNE_set_address);\n \t  fputc ('\\n', asm_out_file);\n@@ -5730,7 +5745,7 @@ output_line_info ()\n       if (flag_debug_asm)\n \tfprintf (asm_out_file, \"\\t%s DW_LNE_set_address\", ASM_COMMENT_START);\n       fputc ('\\n', asm_out_file);\n-      output_uleb128 (1 + PTR_SIZE);\n+      output_uleb128 (1 + DWARF2_ADDR_SIZE);\n       fputc ('\\n', asm_out_file);\n       ASM_OUTPUT_DWARF_DATA1 (asm_out_file, DW_LNE_set_address);\n       fputc ('\\n', asm_out_file);\n@@ -5780,7 +5795,7 @@ output_line_info ()\n \t\t     ASM_COMMENT_START);\n \n \t  fputc ('\\n', asm_out_file);\n-\t  output_uleb128 (1 + PTR_SIZE);\n+\t  output_uleb128 (1 + DWARF2_ADDR_SIZE);\n \t  fputc ('\\n', asm_out_file);\n \t  ASM_OUTPUT_DWARF_DATA1 (asm_out_file, DW_LNE_set_address);\n \t  fputc ('\\n', asm_out_file);\n@@ -5809,7 +5824,7 @@ output_line_info ()\n \t\tfprintf (asm_out_file, \"\\t%s DW_LNE_set_address\",\n \t\t\t ASM_COMMENT_START);\n \t      fputc ('\\n', asm_out_file);\n-\t      output_uleb128 (1 + PTR_SIZE);\n+\t      output_uleb128 (1 + DWARF2_ADDR_SIZE);\n \t      fputc ('\\n', asm_out_file);\n \t      ASM_OUTPUT_DWARF_DATA1 (asm_out_file, DW_LNE_set_address);\n \t      fputc ('\\n', asm_out_file);\n@@ -5911,7 +5926,7 @@ output_line_info ()\n \t\tfprintf (asm_out_file, \"\\t%s DW_LNE_set_address\",\n \t\t\t ASM_COMMENT_START);\n \t      fputc ('\\n', asm_out_file);\n-\t      output_uleb128 (1 + PTR_SIZE);\n+\t      output_uleb128 (1 + DWARF2_ADDR_SIZE);\n \t      fputc ('\\n', asm_out_file);\n \t      ASM_OUTPUT_DWARF_DATA1 (asm_out_file, DW_LNE_set_address);\n \t      fputc ('\\n', asm_out_file);"}]}