{"sha": "a057a4f13b2599c7fa19bf08b9617b6b3f67d2d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA1N2E0ZjEzYjI1OTljN2ZhMTliZjA4Yjk2MTdiNmIzZjY3ZDJkNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-06-24T18:02:36Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-06-24T18:02:36Z"}, "message": "stl_algo.h (remove_if): Cast __pred result to bool.\n\n2008-06-24  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/stl_algo.h (remove_if): Cast __pred result to bool.\n\t(copy_if): Add, per N2666.\n\t* testsuite/25_algorithms/copy_if/requirements/explicit_instantiation/\n\t2.cc: New.\n\t* testsuite/25_algorithms/copy_if/requirements/explicit_instantiation/\n\tpod.cc: Likewise.\n\t* testsuite/25_algorithms/headers/algorithm/synopsis.cc: Update.\n\nFrom-SVN: r137080", "tree": {"sha": "2800fa308a3c52951e5ba3bd057198eb129fc45c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2800fa308a3c52951e5ba3bd057198eb129fc45c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a057a4f13b2599c7fa19bf08b9617b6b3f67d2d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a057a4f13b2599c7fa19bf08b9617b6b3f67d2d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a057a4f13b2599c7fa19bf08b9617b6b3f67d2d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a057a4f13b2599c7fa19bf08b9617b6b3f67d2d7/comments", "author": null, "committer": null, "parents": [{"sha": "db16ca8c7fc577c0b677c726f511468d73cea670", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db16ca8c7fc577c0b677c726f511468d73cea670", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db16ca8c7fc577c0b677c726f511468d73cea670"}], "stats": {"total": 160, "additions": 157, "deletions": 3}, "files": [{"sha": "ccb1e1d53f358cdd4cd108093c1daf7af763e05a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a057a4f13b2599c7fa19bf08b9617b6b3f67d2d7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a057a4f13b2599c7fa19bf08b9617b6b3f67d2d7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a057a4f13b2599c7fa19bf08b9617b6b3f67d2d7", "patch": "@@ -1,3 +1,13 @@\n+2008-06-24  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/stl_algo.h (remove_if): Cast __pred result to bool.\n+\t(copy_if): Add, per N2666.\n+\t* testsuite/25_algorithms/copy_if/requirements/explicit_instantiation/\n+\t2.cc: New.\n+\t* testsuite/25_algorithms/copy_if/requirements/explicit_instantiation/\n+\tpod.cc: Likewise.\n+\t* testsuite/25_algorithms/headers/algorithm/synopsis.cc: Update.\n+\n 2008-06-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \t    Chalathip Thumkanon  <chalathip@gmail.com>\n "}, {"sha": "6b1e8a52bd036c4b339f1e90c40282f7462f07b0", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a057a4f13b2599c7fa19bf08b9617b6b3f67d2d7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a057a4f13b2599c7fa19bf08b9617b6b3f67d2d7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=a057a4f13b2599c7fa19bf08b9617b6b3f67d2d7", "patch": "@@ -712,7 +712,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @return   An iterator designating the end of the resulting sequence.\n    *\n    *  Copies each element in the range @p [first,last) for which\n-   *  @p pred returns true to the range beginning at @p result.\n+   *  @p pred returns false to the range beginning at @p result.\n    *\n    *  remove_copy_if() is stable, so the relative order of elements that are\n    *  copied is unchanged.\n@@ -740,6 +740,45 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return __result;\n     }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  /**\n+   *  @brief Copy the elements of a sequence for which a predicate is true.\n+   *  @param  first   An input iterator.\n+   *  @param  last    An input iterator.\n+   *  @param  result  An output iterator.\n+   *  @param  pred    A predicate.\n+   *  @return   An iterator designating the end of the resulting sequence.\n+   *\n+   *  Copies each element in the range @p [first,last) for which\n+   *  @p pred returns true to the range beginning at @p result.\n+   *\n+   *  copy_if() is stable, so the relative order of elements that are\n+   *  copied is unchanged.\n+  */\n+  template<typename _InputIterator, typename _OutputIterator,\n+\t   typename _Predicate>\n+    _OutputIterator\n+    copy_if(_InputIterator __first, _InputIterator __last,\n+\t    _OutputIterator __result, _Predicate __pred)\n+    {\n+      // concept requirements\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n+\t    typename iterator_traits<_InputIterator>::value_type>)\n+      __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,\n+\t    typename iterator_traits<_InputIterator>::value_type>)\n+      __glibcxx_requires_valid_range(__first, __last);\n+\n+      for (; __first != __last; ++__first)\n+\tif (__pred(*__first))\n+\t  {\n+\t    *__result = *__first;\n+\t    ++__result;\n+\t  }\n+      return __result;\n+    }\n+#endif\n+\n   /**\n    *  @brief Remove elements from a sequence.\n    *  @param  first  An input iterator.\n@@ -816,7 +855,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _ForwardIterator __result = __first;\n       ++__first;\n       for(; __first != __last; ++__first)\n-        if(!__pred(*__first))\n+        if(!bool(__pred(*__first)))\n           {\n             *__result = _GLIBCXX_MOVE(*__first);\n             ++__result;"}, {"sha": "b71050628d87f852afb87962ccf4d1f69beec93f", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_if/requirements/explicit_instantiation/2.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a057a4f13b2599c7fa19bf08b9617b6b3f67d2d7/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_if%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a057a4f13b2599c7fa19bf08b9617b6b3f67d2d7/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_if%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_if%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=a057a4f13b2599c7fa19bf08b9617b6b3f67d2d7", "patch": "@@ -0,0 +1,47 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-24  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_api.h>\n+\n+namespace std\n+{\n+  using __gnu_test::NonDefaultConstructible;\n+\n+  typedef NonDefaultConstructible \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n+\n+  template iterator_type copy_if(iterator_type, iterator_type, \n+\t\t\t\t iterator_type, predicate_type);\n+} "}, {"sha": "7433367d7331c269d278dca252d1ec7e7b7eae7c", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_if/requirements/explicit_instantiation/pod.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a057a4f13b2599c7fa19bf08b9617b6b3f67d2d7/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_if%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a057a4f13b2599c7fa19bf08b9617b6b3f67d2d7/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_if%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_if%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=a057a4f13b2599c7fa19bf08b9617b6b3f67d2d7", "patch": "@@ -0,0 +1,46 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-24  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <testsuite_character.h>\n+\n+namespace std\n+{\n+  using __gnu_test::pod_int;\n+\n+  typedef pod_int \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n+\n+  template iterator_type copy_if(iterator_type, iterator_type, \n+\t\t\t\t iterator_type, predicate_type);\n+} "}, {"sha": "87487b3d8e6cd12145e905c671c748580efa0f8e", "filename": "libstdc++-v3/testsuite/25_algorithms/headers/algorithm/synopsis.cc", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a057a4f13b2599c7fa19bf08b9617b6b3f67d2d7/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a057a4f13b2599c7fa19bf08b9617b6b3f67d2d7/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc?ref=a057a4f13b2599c7fa19bf08b9617b6b3f67d2d7", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n \n-// Copyright (C) 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -115,6 +115,12 @@ namespace std\n     void \n     swap(_Tp&, _Tp& b);\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Tp, size_t _Nm>\n+    void\n+    swap(_Tp (&)[_Nm], _Tp (&)[_Nm]);\n+#endif\n+\n   template<typename _FIter1, typename _FIter2>\n     _FIter2 \n     swap_ranges(_FIter1 first1, _FIter1, _FIter2);\n@@ -180,6 +186,12 @@ namespace std\n     _OIter \n     remove_copy_if(_IIter, _IIter, _OIter, _Predicate);\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _IIter, typename _OIter, typename _Predicate>\n+    _OIter \n+    copy_if(_IIter, _IIter, _OIter, _Predicate);\n+#endif\n+\n   template<typename _FIter>\n     _FIter \n     unique(_FIter, _FIter);"}]}