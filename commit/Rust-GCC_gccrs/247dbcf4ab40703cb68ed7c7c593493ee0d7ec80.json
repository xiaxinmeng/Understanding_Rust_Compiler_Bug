{"sha": "247dbcf4ab40703cb68ed7c7c593493ee0d7ec80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ3ZGJjZjRhYjQwNzAzY2I2OGVkN2M3YzU5MzQ5M2VlMGQ3ZWM4MA==", "commit": {"author": {"name": "Cong Hou", "email": "congh@google.com", "date": "2013-10-24T18:10:38Z"}, "committer": {"name": "Cong Hou", "email": "congh@gcc.gnu.org", "date": "2013-10-24T18:10:38Z"}, "message": "convert.c (convert_to_real): Guard those unsafe math function convertions with flag_unsafe_math_optimizations.\n\n2013-10-24  Cong Hou  <congh@google.com>\n\n    * convert.c (convert_to_real): Guard those unsafe math function\n      convertions with flag_unsafe_math_optimizations.  Handle sqrt()\n      specially. \n\n2013-10-24  Cong Hou  <congh@google.com>\n\n    * gcc.c-torture/execute/20030125-1.c: Update.\n\nFrom-SVN: r204028", "tree": {"sha": "5fa5785d8100cd687a134740afd7ed94acb90bea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fa5785d8100cd687a134740afd7ed94acb90bea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/247dbcf4ab40703cb68ed7c7c593493ee0d7ec80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/247dbcf4ab40703cb68ed7c7c593493ee0d7ec80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/247dbcf4ab40703cb68ed7c7c593493ee0d7ec80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/247dbcf4ab40703cb68ed7c7c593493ee0d7ec80/comments", "author": null, "committer": null, "parents": [{"sha": "51ce05475cc79a06001eae1163e719f570c7a9a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51ce05475cc79a06001eae1163e719f570c7a9a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51ce05475cc79a06001eae1163e719f570c7a9a9"}], "stats": {"total": 56, "additions": 50, "deletions": 6}, "files": [{"sha": "4731f1c77e94dddee43746cadc44d62c89efd91f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247dbcf4ab40703cb68ed7c7c593493ee0d7ec80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247dbcf4ab40703cb68ed7c7c593493ee0d7ec80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=247dbcf4ab40703cb68ed7c7c593493ee0d7ec80", "patch": "@@ -1,3 +1,9 @@\n+2013-10-24  Cong Hou  <congh@google.com>\n+\n+\t* convert.c (convert_to_real): Guard those unsafe math function\n+\tconvertions with flag_unsafe_math_optimizations.  Handle sqrt()\n+\tspecially. \n+\n 2013-10-24  Markus Trippelsdorf  <markus@trippelsdorf.de>\n \t\n \tPR ipa/58712"}, {"sha": "a2f2a334dbf85ed0335f834c76ae1990ac3df740", "filename": "gcc/convert.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247dbcf4ab40703cb68ed7c7c593493ee0d7ec80/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247dbcf4ab40703cb68ed7c7c593493ee0d7ec80/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=247dbcf4ab40703cb68ed7c7c593493ee0d7ec80", "patch": "@@ -135,16 +135,19 @@ convert_to_real (tree type, tree expr)\n  \t  CASE_MATHFN (COS)\n  \t  CASE_MATHFN (ERF)\n  \t  CASE_MATHFN (ERFC)\n- \t  CASE_MATHFN (FABS)\n \t  CASE_MATHFN (LOG)\n \t  CASE_MATHFN (LOG10)\n \t  CASE_MATHFN (LOG2)\n  \t  CASE_MATHFN (LOG1P)\n- \t  CASE_MATHFN (LOGB)\n  \t  CASE_MATHFN (SIN)\n-\t  CASE_MATHFN (SQRT)\n  \t  CASE_MATHFN (TAN)\n  \t  CASE_MATHFN (TANH)\n+\t    /* The above functions are not safe to do this conversion.  */\n+\t    if (!flag_unsafe_math_optimizations)\n+\t      break;\n+\t  CASE_MATHFN (SQRT)\n+\t  CASE_MATHFN (FABS)\n+\t  CASE_MATHFN (LOGB)\n #undef CASE_MATHFN\n \t    {\n \t      tree arg0 = strip_float_extensions (CALL_EXPR_ARG (expr, 0));\n@@ -155,13 +158,44 @@ convert_to_real (tree type, tree expr)\n \t      if (TYPE_PRECISION (TREE_TYPE (arg0)) > TYPE_PRECISION (type))\n \t\tnewtype = TREE_TYPE (arg0);\n \n+\t      /* We consider to convert\n+\n+\t\t     (T1) sqrtT2 ((T2) exprT3)\n+\t\t to\n+\t\t     (T1) sqrtT4 ((T4) exprT3)\n+\n+\t\t  , where T1 is TYPE, T2 is ITYPE, T3 is TREE_TYPE (ARG0),\n+\t\t and T4 is NEWTYPE.  All those types are of floating point types.\n+\t\t T4 (NEWTYPE) should be narrower than T2 (ITYPE). This conversion\n+\t\t is safe only if P1 >= P2*2+2, where P1 and P2 are precisions of\n+\t\t T2 and T4.  See the following URL for a reference:\n+\t\t http://stackoverflow.com/questions/9235456/determining-\n+                 floating-point-square-root\n+\t\t */\n+\t      if ((fcode == BUILT_IN_SQRT || fcode == BUILT_IN_SQRTL)\n+\t\t  && !flag_unsafe_math_optimizations)\n+\t\t{\n+\t\t  /* The following conversion is unsafe even the precision condition\n+\t\t     below is satisfied:\n+\n+\t\t     (float) sqrtl ((long double) double_val) -> (float) sqrt (double_val)\n+\t\t    */\n+\t\t  if (TYPE_MODE (type) != TYPE_MODE (newtype))\n+\t\t    break;\n+\n+\t\t  int p1 = REAL_MODE_FORMAT (TYPE_MODE (itype))->p;\n+\t\t  int p2 = REAL_MODE_FORMAT (TYPE_MODE (newtype))->p;\n+\t\t  if (p1 < p2 * 2 + 2)\n+\t\t    break;\n+\t\t}\n+\n \t      /* Be careful about integer to fp conversions.\n \t\t These may overflow still.  */\n \t      if (FLOAT_TYPE_P (TREE_TYPE (arg0))\n \t\t  && TYPE_PRECISION (newtype) < TYPE_PRECISION (itype)\n \t\t  && (TYPE_MODE (newtype) == TYPE_MODE (double_type_node)\n \t\t      || TYPE_MODE (newtype) == TYPE_MODE (float_type_node)))\n-\t        {\n+\t\t{\n \t\t  tree fn = mathfn_built_in (newtype, fcode);\n \n \t\t  if (fn)"}, {"sha": "02a436a5c36d1053fbe3ec786df7bd167adffe32", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247dbcf4ab40703cb68ed7c7c593493ee0d7ec80/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247dbcf4ab40703cb68ed7c7c593493ee0d7ec80/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=247dbcf4ab40703cb68ed7c7c593493ee0d7ec80", "patch": "@@ -1,3 +1,7 @@\n+2013-10-24  Cong Hou  <congh@google.com>\n+\n+\t* gcc.c-torture/execute/20030125-1.c: Update.\n+\n 2013-08-24  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/44646"}, {"sha": "28cfbd10b4ca1c3d69ce2e921fb453cd27f421f8", "filename": "gcc/testsuite/gcc.c-torture/execute/20030125-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247dbcf4ab40703cb68ed7c7c593493ee0d7ec80/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030125-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247dbcf4ab40703cb68ed7c7c593493ee0d7ec80/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030125-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030125-1.c?ref=247dbcf4ab40703cb68ed7c7c593493ee0d7ec80", "patch": "@@ -44,11 +44,11 @@ __attribute__ ((noinline))\n double\n sin(double a)\n {\n-\tabort ();\n+\treturn a;\n }\n __attribute__ ((noinline))\n float\n sinf(float a)\n {\n-\treturn a;\n+\tabort ();\n }"}]}