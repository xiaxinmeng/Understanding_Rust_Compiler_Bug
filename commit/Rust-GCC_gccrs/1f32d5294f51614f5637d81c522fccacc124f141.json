{"sha": "1f32d5294f51614f5637d81c522fccacc124f141", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYzMmQ1Mjk0ZjUxNjE0ZjU2MzdkODFjNTIyZmNjYWNjMTI0ZjE0MQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-05-26T23:59:26Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-05-29T16:31:49Z"}, "message": "c++: Fix bogus -Wparentheses warning [PR95344]\n\nSince r267272, which added location wrappers, cp_fold loses\nTREE_NO_WARNING on a MODIFY_EXPR that finish_parenthesized_expr set, and\nthat results in a bogus -Wparentheses warning.\n\nI.e., previously we had \"b = 1\" but now we have \"VIEW_CONVERT_EXPR<bool>(b) = 1\"\nand cp_fold_maybe_rvalue folds away the location wrapper and so we do\n2718             x = fold_build2_loc (loc, code, TREE_TYPE (x), op0, op1);\nin cp_fold and the flag is lost.\n\n\tPR c++/95344\n\t* cp-gimplify.c (cp_fold) <case MODIFY_EXPR>: Don't set\n\tTREE_THIS_VOLATILE here.\n\t(cp_fold): Set it here along with TREE_NO_WARNING.\n\n\t* c-c++-common/Wparentheses-2.c: New test.", "tree": {"sha": "8ef2b8bc87d6962b86d876d723d929aa22fa928c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ef2b8bc87d6962b86d876d723d929aa22fa928c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f32d5294f51614f5637d81c522fccacc124f141", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f32d5294f51614f5637d81c522fccacc124f141", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f32d5294f51614f5637d81c522fccacc124f141", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f32d5294f51614f5637d81c522fccacc124f141/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e915901deb3518d4bef73ea52eab2ece7a2bbf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e915901deb3518d4bef73ea52eab2ece7a2bbf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e915901deb3518d4bef73ea52eab2ece7a2bbf6"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "d6723e44ec4593b932ba2e24e03c9157cb24bfc5", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f32d5294f51614f5637d81c522fccacc124f141/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f32d5294f51614f5637d81c522fccacc124f141/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=1f32d5294f51614f5637d81c522fccacc124f141", "patch": "@@ -2744,8 +2744,6 @@ cp_fold (tree x)\n \t  else\n \t    x = org_x;\n \t}\n-      if (code == MODIFY_EXPR && TREE_CODE (x) == MODIFY_EXPR)\n-\tTREE_THIS_VOLATILE (x) = TREE_THIS_VOLATILE (org_x);\n \n       break;\n \n@@ -2994,6 +2992,12 @@ cp_fold (tree x)\n       return org_x;\n     }\n \n+  if (EXPR_P (x) && TREE_CODE (x) == code)\n+    {\n+      TREE_THIS_VOLATILE (x) = TREE_THIS_VOLATILE (org_x);\n+      TREE_NO_WARNING (x) = TREE_NO_WARNING (org_x);\n+    }\n+\n   if (!c.evaluation_restricted_p ())\n     {\n       fold_cache->put (org_x, x);"}, {"sha": "1aa5d314ae762a7394b7d94d0b8b8a7585bf0e4e", "filename": "gcc/testsuite/c-c++-common/Wparentheses-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f32d5294f51614f5637d81c522fccacc124f141/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWparentheses-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f32d5294f51614f5637d81c522fccacc124f141/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWparentheses-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWparentheses-2.c?ref=1f32d5294f51614f5637d81c522fccacc124f141", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/95344 - bogus -Wparentheses warning.\n+// { dg-do compile }\n+// { dg-options \"-Wparentheses\" }\n+\n+#ifndef __cplusplus\n+# define bool _Bool\n+# define true 1\n+# define false 0\n+#endif\n+\n+void\n+f (int i)\n+{\n+  bool b = false;\n+  if (i == 99 ? (b = true) : false) // { dg-bogus \"suggest parentheses\" }\n+    {\n+    }\n+}"}]}