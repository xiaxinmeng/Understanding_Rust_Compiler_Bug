{"sha": "d8090680186229102bf95754d5117c9f3fb139fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgwOTA2ODAxODYyMjkxMDJiZjk1NzU0ZDUxMTdjOWYzZmIxMzlmYQ==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-09-28T05:55:22Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-09-28T05:55:22Z"}, "message": "cpperror.c (_cpp_begin_message): Do the test for suppression of warnings and pedantic warnings before the \"is a...\n\n\t* cpperror.c (_cpp_begin_message):  Do the test for suppression\n        of warnings and pedantic warnings before the \"is a warning an\n        error\" tests.\n\t* cppinit.c (cpp_handle_option): Remove surplus \\n.\n\t* cpplex.c (ON_REST_ARG): Delete.\n\t(skip_block_comment): Initialise prevc.\n\t(parse_args): Improve error messages.\n\t(maybe_paste_with_next): Use CONTEXT_VARARGS rather\n\tthan ON_REST_ARG.\n\t* cpplib.c (cpp_push_buffer): Fix grammar in message.\n\t* cppmain.c (main): Set callbacks for #ident and #pragma\n\tonly if no_output option is false.\n\t(do_pragma_implementation): Only call the #pragma handler\n\tif it is set in the cpp_reader structure.\n\nFrom-SVN: r36655", "tree": {"sha": "e397904d152d2097125d59904f15ea71e0957eb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e397904d152d2097125d59904f15ea71e0957eb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8090680186229102bf95754d5117c9f3fb139fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8090680186229102bf95754d5117c9f3fb139fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8090680186229102bf95754d5117c9f3fb139fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8090680186229102bf95754d5117c9f3fb139fa/comments", "author": null, "committer": null, "parents": [{"sha": "e93eff9433088e058245212256b3f03f34562817", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e93eff9433088e058245212256b3f03f34562817", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e93eff9433088e058245212256b3f03f34562817"}], "stats": {"total": 73, "additions": 48, "deletions": 25}, "files": [{"sha": "e1e9439d436f9c11e7cc8db04a3b41e2f97ab22c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8090680186229102bf95754d5117c9f3fb139fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8090680186229102bf95754d5117c9f3fb139fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8090680186229102bf95754d5117c9f3fb139fa", "patch": "@@ -1,3 +1,20 @@\n+2000-09-28  Neil Booth  <neilb@earthling.net>\n+\n+\t* cpperror.c (_cpp_begin_message):  Do the test for suppression\n+        of warnings and pedantic warnings before the \"is a warning an\n+        error\" tests.\n+\t* cppinit.c (cpp_handle_option): Remove surplus \\n.\n+\t* cpplex.c (ON_REST_ARG): Delete.\n+\t(skip_block_comment): Initialise prevc.\n+\t(parse_args): Improve error messages.\n+\t(maybe_paste_with_next): Use CONTEXT_VARARGS rather\n+\tthan ON_REST_ARG.\n+\t* cpplib.c (cpp_push_buffer): Fix grammar in message.\n+\t* cppmain.c (main): Set callbacks for #ident and #pragma\n+\tonly if no_output option is false.\n+\t(do_pragma_implementation): Only call the #pragma handler\n+\tif it is set in the cpp_reader structure.\n+\n Wed Sep 27 14:00:07 2000  Donald Lindsay  <dlindsay@cygnus.com>\n \n \t* integrate.c (copy_insn_list): if an ignored return value"}, {"sha": "fa44708d50030d5848aa6373fd42858cf6fc41e6", "filename": "gcc/cpperror.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8090680186229102bf95754d5117c9f3fb139fa/gcc%2Fcpperror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8090680186229102bf95754d5117c9f3fb139fa/gcc%2Fcpperror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpperror.c?ref=d8090680186229102bf95754d5117c9f3fb139fa", "patch": "@@ -120,11 +120,12 @@ _cpp_begin_message (pfile, code, file, line, col)\n   switch (code)\n     {\n     case WARNING:\n+      if (CPP_IN_SYSTEM_HEADER (pfile)\n+\t  && ! CPP_OPTION (pfile, warn_system_headers))\n+\treturn 0;\n       if (! CPP_OPTION (pfile, warnings_are_errors))\n \t{\n-          if (CPP_OPTION (pfile, inhibit_warnings)\n-\t      || (CPP_IN_SYSTEM_HEADER (pfile)\n-\t\t  && ! CPP_OPTION (pfile, warn_system_headers)))\n+          if (CPP_OPTION (pfile, inhibit_warnings))\n \t    return 0;\n \t  is_warning = 1;\n \t}\n@@ -138,11 +139,12 @@ _cpp_begin_message (pfile, code, file, line, col)\n       break;\n \n     case PEDWARN:\n+      if (CPP_IN_SYSTEM_HEADER (pfile)\n+\t  && ! CPP_OPTION (pfile, warn_system_headers))\n+\treturn 0;\n       if (! CPP_OPTION (pfile, pedantic_errors))\n \t{\n-          if (CPP_OPTION (pfile, inhibit_warnings)\n-\t      || (CPP_IN_SYSTEM_HEADER (pfile)\n-\t\t  && ! CPP_OPTION (pfile, warn_system_headers)))\n+          if (CPP_OPTION (pfile, inhibit_warnings))\n \t    return 0;\n \t  is_warning = 1;\n \t}"}, {"sha": "3fbf77e4748d728b01a65ef53232938c132c5916", "filename": "gcc/cppinit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8090680186229102bf95754d5117c9f3fb139fa/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8090680186229102bf95754d5117c9f3fb139fa/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=d8090680186229102bf95754d5117c9f3fb139fa", "patch": "@@ -1403,7 +1403,7 @@ cpp_handle_option (pfile, argc, argv)\n \t    CPP_OPTION (pfile, out_fname) = \"\";\n \t  break;\n \tcase OPT_v:\n-\t  fprintf (stderr, _(\"GNU CPP version %s (cpplib)\\n\"), version_string);\n+\t  fprintf (stderr, _(\"GNU CPP version %s (cpplib)\"), version_string);\n #ifdef TARGET_VERSION\n \t  TARGET_VERSION;\n #endif"}, {"sha": "426e82d7e1deedb6d058b666d6d7477092beb472", "filename": "gcc/cpplex.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8090680186229102bf95754d5117c9f3fb139fa/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8090680186229102bf95754d5117c9f3fb139fa/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=d8090680186229102bf95754d5117c9f3fb139fa", "patch": "@@ -162,10 +162,6 @@ TOKEN_LEN (token)\n \n #define IS_ARG_CONTEXT(c) ((c)->flags & CONTEXT_ARG)\n #define CURRENT_CONTEXT(pfile) ((pfile)->contexts + (pfile)->cur_context)\n-#define ON_REST_ARG(c) \\\n- (((c)->u.list->flags & VAR_ARGS) \\\n-  && (c)->u.list->tokens[(c)->posn - 1].val.aux \\\n-      == (unsigned int) ((c)->u.list->paramc - 1))\n \n #define ASSIGN_FLAGS_AND_POS(d, s) \\\n   do {(d)->flags = (s)->flags & (PREV_WHITE | BOL | PASTE_LEFT); \\\n@@ -573,7 +569,7 @@ skip_block_comment (pfile)\n      cpp_reader *pfile;\n {\n   cpp_buffer *buffer = pfile->buffer;\n-  cppchar_t c = EOF, prevc;\n+  cppchar_t c = EOF, prevc = EOF;\n \n   pfile->state.lexing_comment = 1;\n   while (buffer->cur != buffer->rlimit)\n@@ -1837,6 +1833,7 @@ is_macro_disabled (pfile, expansion, token)\n       pfile->no_expand_level = context - pfile->contexts;\n       next = _cpp_get_token (pfile);\n       restore_macro_expansion (pfile, prev_nme);\n+\n       if (next->type != CPP_OPEN_PAREN)\n \t{\n \t  _cpp_push_token (pfile, next);\n@@ -2001,15 +1998,17 @@ parse_args (pfile, hp, args)\n \t}\n       else\n \t{\n-\t  cpp_error (pfile, \"not enough arguments for macro \\\"%s\\\"\", hp->name);\n+\t  cpp_error (pfile, \"%u arguments is not enough for macro \\\"%s\\\"\",\n+\t\t     argc, hp->name);\n \t  return 1;\n \t}\n     }\n   /* An empty argument to an empty function-like macro is fine.  */\n   else if (argc > macro->paramc\n \t   && !(macro->paramc == 0 && argc == 1 && empty_argument (args, 0)))\n     {\n-      cpp_error (pfile, \"too many arguments for macro \\\"%s\\\"\", hp->name);\n+      cpp_error (pfile, \"%u arguments is too many for macro \\\"%s\\\"\",\n+\t\t argc, hp->name);\n       return 1;\n     }\n \n@@ -2331,8 +2330,8 @@ maybe_paste_with_next (pfile, token)\n \t\t     <whatever> came from a variable argument, because\n \t\t     the author probably intended the ## to trigger\n \t\t     the special extended semantics (see above).  */\n-\t\t  if (token->type == CPP_COMMA && IS_ARG_CONTEXT (context)\n-\t\t      && ON_REST_ARG (context - 1))\n+\t\t  if (token->type == CPP_COMMA\n+\t\t      && (context->flags & CONTEXT_VARARGS))\n \t\t    /* no warning */;\n \t\t  else\n \t\t    cpp_warning (pfile,"}, {"sha": "37dbe02fcc6b9f015cd17963cc3105550f58e040", "filename": "gcc/cpplib.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8090680186229102bf95754d5117c9f3fb139fa/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8090680186229102bf95754d5117c9f3fb139fa/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=d8090680186229102bf95754d5117c9f3fb139fa", "patch": "@@ -1495,7 +1495,7 @@ cpp_push_buffer (pfile, buffer, length)\n   cpp_buffer *new;\n   if (++pfile->buffer_stack_depth == CPP_STACK_MAX)\n     {\n-      cpp_fatal (pfile, \"#include nested too deep\");\n+      cpp_fatal (pfile, \"#include nested too deeply\");\n       return NULL;\n     }\n   if (pfile->cur_context > 0)"}, {"sha": "5c88e9592ba3ce2c7bd44a0026ec402900d02279", "filename": "gcc/cppmain.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8090680186229102bf95754d5117c9f3fb139fa/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8090680186229102bf95754d5117c9f3fb139fa/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=d8090680186229102bf95754d5117c9f3fb139fa", "patch": "@@ -88,15 +88,21 @@ main (argc, argv)\n     return (FATAL_EXIT_CODE);\n \n   /* Set callbacks.  */\n-  if (! CPP_OPTION (pfile, no_line_commands)\n-      && ! CPP_OPTION (pfile, no_output))\n+  if (! CPP_OPTION (pfile, no_output))\n     {\n-      pfile->cb.enter_file = cb_enter_file;\n-      pfile->cb.leave_file = cb_leave_file;\n-      pfile->cb.rename_file = cb_rename_file;\n+      pfile->cb.ident      = cb_ident;\n+      pfile->cb.def_pragma = cb_def_pragma;\n+      if (! CPP_OPTION (pfile, no_line_commands))\n+\t{\n+\t  pfile->cb.enter_file = cb_enter_file;\n+\t  pfile->cb.leave_file = cb_leave_file;\n+\t  pfile->cb.rename_file = cb_rename_file;\n+\t}\n     }\n+\n   if (CPP_OPTION (pfile, dump_includes))\n     pfile->cb.include  = cb_include;\n+\n   if (CPP_OPTION (pfile, debug_output)\n       || CPP_OPTION (pfile, dump_macros) == dump_names\n       || CPP_OPTION (pfile, dump_macros) == dump_definitions)\n@@ -105,8 +111,6 @@ main (argc, argv)\n       pfile->cb.undef  = cb_undef;\n       pfile->cb.poison = cb_def_pragma;\n     }\n-  pfile->cb.ident      = cb_ident;\n-  pfile->cb.def_pragma = cb_def_pragma;\n \n   /* Register one #pragma which needs special handling.  */\n   cpp_register_pragma(pfile, 0, \"implementation\", do_pragma_implementation);\n@@ -271,7 +275,8 @@ do_pragma_implementation (pfile)\n     }\n \n   /* forward to default-pragma handler.  */\n-  cb_def_pragma (pfile);\n+  if (pfile->cb.def_pragma)\n+    (*pfile->cb.def_pragma) (pfile);\n }\n \n /* Dump out the hash table.  */"}]}