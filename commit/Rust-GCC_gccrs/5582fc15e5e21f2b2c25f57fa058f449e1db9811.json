{"sha": "5582fc15e5e21f2b2c25f57fa058f449e1db9811", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU4MmZjMTVlNWUyMWYyYjJjMjVmNTdmYTA1OGY0NDllMWRiOTgxMQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-08-19T21:15:49Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-08-19T21:15:49Z"}, "message": "compiler: new debugging output methods/functions\n    \n    Add new hooks for dumping named objects, package bindings,\n    and top level Gogo package list.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/190877\n\nFrom-SVN: r274682", "tree": {"sha": "05169e5608b85188cb5aff6e9c21d7bc826d9b9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05169e5608b85188cb5aff6e9c21d7bc826d9b9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5582fc15e5e21f2b2c25f57fa058f449e1db9811", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5582fc15e5e21f2b2c25f57fa058f449e1db9811", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5582fc15e5e21f2b2c25f57fa058f449e1db9811", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5582fc15e5e21f2b2c25f57fa058f449e1db9811/comments", "author": null, "committer": null, "parents": [{"sha": "4f6bdb08bab64b973e465fb45deb751561e3b969", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f6bdb08bab64b973e465fb45deb751561e3b969", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f6bdb08bab64b973e465fb45deb751561e3b969"}], "stats": {"total": 117, "additions": 116, "deletions": 1}, "files": [{"sha": "94bc2f7c0841c0662b4ef4708ebeac88df367797", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5582fc15e5e21f2b2c25f57fa058f449e1db9811/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5582fc15e5e21f2b2c25f57fa058f449e1db9811/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=5582fc15e5e21f2b2c25f57fa058f449e1db9811", "patch": "@@ -1,4 +1,4 @@\n-b0ba5daa8216a0424b24f74466cedab0b986f3b4\n+a453eebae76296a39a1ded5bd2bffa78bedf40bd\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "8a240708602cb83e203896cd41a090f83f5a9233", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5582fc15e5e21f2b2c25f57fa058f449e1db9811/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5582fc15e5e21f2b2c25f57fa058f449e1db9811/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=5582fc15e5e21f2b2c25f57fa058f449e1db9811", "patch": "@@ -5430,6 +5430,29 @@ Gogo::convert_named_types_in_bindings(Bindings* bindings)\n     }\n }\n \n+void\n+debug_go_gogo(Gogo* gogo)\n+{\n+  if (gogo != NULL)\n+    gogo->debug_dump();\n+}\n+\n+void\n+Gogo::debug_dump()\n+{\n+  std::cerr << \"Packages:\\n\";\n+  for (Packages::const_iterator p = this->packages_.begin();\n+       p != this->packages_.end();\n+       ++p)\n+    {\n+      const char *tag = \"  \";\n+      if (p->second == this->package_)\n+        tag = \"* \";\n+      std::cerr << tag << \"'\" << p->first << \"' \"\n+                << p->second->pkgpath() << \" \" << ((void*)p->second) << \"\\n\";\n+    }\n+}\n+\n // Class Function.\n \n Function::Function(Function_type* type, Named_object* enclosing, Block* block,\n@@ -8593,6 +8616,61 @@ Named_object::get_id(Gogo* gogo)\n   return decl_name;\n }\n \n+void\n+debug_go_named_object(Named_object* no)\n+{\n+  if (no == NULL)\n+    {\n+      std::cerr << \"<null>\";\n+      return;\n+    }\n+  std::cerr << \"'\" << no->name() << \"': \";\n+  const char *tag;\n+  switch (no->classification())\n+    {\n+      case Named_object::NAMED_OBJECT_UNINITIALIZED:\n+        tag = \"uninitialized\";\n+        break;\n+      case Named_object::NAMED_OBJECT_ERRONEOUS:\n+        tag = \"<error>\";\n+        break;\n+      case Named_object::NAMED_OBJECT_UNKNOWN:\n+        tag = \"<unknown>\";\n+        break;\n+      case Named_object::NAMED_OBJECT_CONST:\n+        tag = \"constant\";\n+        break;\n+      case Named_object::NAMED_OBJECT_TYPE:\n+        tag = \"type\";\n+        break;\n+      case Named_object::NAMED_OBJECT_TYPE_DECLARATION:\n+        tag = \"type_decl\";\n+        break;\n+      case Named_object::NAMED_OBJECT_VAR:\n+        tag = \"var\";\n+        break;\n+      case Named_object::NAMED_OBJECT_RESULT_VAR:\n+        tag = \"result_var\";\n+        break;\n+      case Named_object::NAMED_OBJECT_SINK:\n+        tag = \"<sink>\";\n+        break;\n+      case Named_object::NAMED_OBJECT_FUNC:\n+        tag = \"func\";\n+        break;\n+      case Named_object::NAMED_OBJECT_FUNC_DECLARATION:\n+        tag = \"func_decl\";\n+        break;\n+      case Named_object::NAMED_OBJECT_PACKAGE:\n+        tag = \"package\";\n+        break;\n+      default:\n+        tag = \"<unknown named object classification>\";\n+        break;\n+  };\n+  std::cerr << tag << \"\\n\";\n+}\n+\n // Get the backend representation for this named object.\n \n void\n@@ -9140,6 +9218,31 @@ Bindings::traverse(Traverse* traverse, bool is_global)\n   return TRAVERSE_CONTINUE;\n }\n \n+void\n+Bindings::debug_dump()\n+{\n+  std::set<Named_object*> defs;\n+  for (size_t i = 0; i < this->named_objects_.size(); ++i)\n+    defs.insert(this->named_objects_[i]);\n+  for (Contour::iterator p = this->bindings_.begin();\n+       p != this->bindings_.end();\n+       ++p)\n+    {\n+      const char* tag = \"  \";\n+      if (defs.find(p->second) != defs.end())\n+        tag = \"* \";\n+      std::cerr << tag;\n+      debug_go_named_object(p->second);\n+    }\n+}\n+\n+void\n+debug_go_bindings(Bindings* bindings)\n+{\n+  if (bindings != NULL)\n+    bindings->debug_dump();\n+}\n+\n // Class Label.\n \n // Clear any references to this label."}, {"sha": "b3ec6291d32aebeec00c23fa618540e71c3a15c5", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5582fc15e5e21f2b2c25f57fa058f449e1db9811/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5582fc15e5e21f2b2c25f57fa058f449e1db9811/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=5582fc15e5e21f2b2c25f57fa058f449e1db9811", "patch": "@@ -341,6 +341,9 @@ class Gogo\n   set_debug_optimization(bool b)\n   { this->debug_optimization_ = b; }\n \n+  // Dump to stderr for debugging\n+  void debug_dump();\n+\n   // Return the size threshold used to determine whether to issue\n   // a nil-check for a given pointer dereference. A threshold of -1\n   // implies that all potentially faulting dereference ops should\n@@ -3068,6 +3071,9 @@ class Bindings\n   first_declaration()\n   { return this->bindings_.empty() ? NULL : this->bindings_.begin()->second; }\n \n+  // Dump to stderr for debugging\n+  void debug_dump();\n+\n  private:\n   Named_object*\n   add_named_object_to_contour(Contour*, Named_object*);\n@@ -3746,4 +3752,10 @@ extern Gogo* go_get_gogo();\n // interface.\n extern bool saw_errors();\n \n+// For use in the debugger\n+extern void debug_go_gogo(Gogo*);\n+extern void debug_go_named_object(Named_object*);\n+extern void debug_go_bindings(Bindings*);\n+\n+\n #endif // !defined(GO_GOGO_H)"}]}