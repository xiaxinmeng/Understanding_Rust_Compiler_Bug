{"sha": "2ee3ea4b9061e3bb5e19e9d9c02c273dc2585263", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVlM2VhNGI5MDYxZTNiYjVlMTllOWQ5YzAyYzI3M2RjMjU4NTI2Mw==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2019-08-21T07:53:05Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-08-21T07:53:05Z"}, "message": "d: Fix internal compiler error: in d_init_builtins, at d/d-builtins.cc:1121\n\ngcc/d/ChangeLog:\n\n\tPR d/90444\n\t* d-builtins.cc (build_frontend_type): Build anonymous RECORD_TYPE\n\tnodes as well, push all fields to the struct members.\n\t(d_build_builtins_module): Push anonymous va_list structs to the\n\tbuiltins module, naming them __builtin_va_list.\n\t(d_init_builtins): Use sorry instead of gcc_unreachable if va_list did\n\tnot succeed in being represented as a D type.\n\nFrom-SVN: r274765", "tree": {"sha": "d5b6b4f31cb4f8c9880a9d519232a4079534486e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5b6b4f31cb4f8c9880a9d519232a4079534486e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ee3ea4b9061e3bb5e19e9d9c02c273dc2585263", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ee3ea4b9061e3bb5e19e9d9c02c273dc2585263", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ee3ea4b9061e3bb5e19e9d9c02c273dc2585263", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ee3ea4b9061e3bb5e19e9d9c02c273dc2585263/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dcb6ebe3d672317d3596d8facdf2625afad1cac2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcb6ebe3d672317d3596d8facdf2625afad1cac2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcb6ebe3d672317d3596d8facdf2625afad1cac2"}], "stats": {"total": 106, "additions": 70, "deletions": 36}, "files": [{"sha": "00845df4de177d42184b81362559cc7c958c9f8a", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee3ea4b9061e3bb5e19e9d9c02c273dc2585263/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee3ea4b9061e3bb5e19e9d9c02c273dc2585263/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=2ee3ea4b9061e3bb5e19e9d9c02c273dc2585263", "patch": "@@ -1,3 +1,13 @@\n+2019-08-20  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/90444\n+\t* d-builtins.cc (build_frontend_type): Build anonymous RECORD_TYPE\n+\tnodes as well, push all fields to the struct members.\n+\t(d_build_builtins_module): Push anonymous va_list structs to the\n+\tbuiltins module, naming them __builtin_va_list.\n+\t(d_init_builtins): Use sorry instead of gcc_unreachable if va_list did\n+\tnot succeed in being represented as a D type.\n+\n 2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR middle-end/91421"}, {"sha": "5619ebb1a097c82208f21399ea2e37e7ea2e61e3", "filename": "gcc/d/d-builtins.cc", "status": "modified", "additions": 60, "deletions": 36, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee3ea4b9061e3bb5e19e9d9c02c273dc2585263/gcc%2Fd%2Fd-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee3ea4b9061e3bb5e19e9d9c02c273dc2585263/gcc%2Fd%2Fd-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-builtins.cc?ref=2ee3ea4b9061e3bb5e19e9d9c02c273dc2585263", "patch": "@@ -213,38 +213,54 @@ build_frontend_type (tree type)\n       break;\n \n     case RECORD_TYPE:\n-      if (TYPE_NAME (type))\n+    {\n+      Identifier *ident = TYPE_IDENTIFIER (type) ?\n+\tIdentifier::idPool (IDENTIFIER_POINTER (TYPE_IDENTIFIER (type))) : NULL;\n+\n+      /* Neither the `object' and `gcc.builtins' modules will not exist when\n+\t this is called.  Use a stub 'object' module parent in the meantime.\n+\t If `gcc.builtins' is later imported, the parent will be overridden\n+\t with the correct module symbol.  */\n+      static Identifier *object = Identifier::idPool (\"object\");\n+      static Module *stubmod = Module::create (\"object.d\", object, 0, 0);\n+\n+      StructDeclaration *sdecl = StructDeclaration::create (Loc (), ident,\n+\t\t\t\t\t\t\t    false);\n+      sdecl->parent = stubmod;\n+      sdecl->structsize = int_size_in_bytes (type);\n+      sdecl->alignsize = TYPE_ALIGN_UNIT (type);\n+      sdecl->alignment = STRUCTALIGN_DEFAULT;\n+      sdecl->sizeok = SIZEOKdone;\n+      sdecl->type = (TypeStruct::create (sdecl))->addMod (mod);\n+      sdecl->type->ctype = type;\n+      sdecl->type->merge2 ();\n+\n+      sdecl->members = new Dsymbols;\n+\n+      for (tree field = TYPE_FIELDS (type); field; field = DECL_CHAIN (field))\n \t{\n-\t  tree structname = DECL_NAME (TYPE_NAME (type));\n-\t  Identifier *ident\n-\t    = Identifier::idPool (IDENTIFIER_POINTER (structname));\n-\n-\t  /* Neither the `object' and `gcc.builtins' modules will not exist when\n-\t     this is called.  Use a stub 'object' module parent in the meantime.\n-\t     If `gcc.builtins' is later imported, the parent will be overridden\n-\t     with the correct module symbol.  */\n-\t  static Identifier *object = Identifier::idPool (\"object\");\n-\t  static Module *stubmod = Module::create (\"object.d\", object, 0, 0);\n-\n-\t  StructDeclaration *sdecl = StructDeclaration::create (Loc (), ident,\n-\t\t\t\t\t\t\t\tfalse);\n-\t  sdecl->parent = stubmod;\n-\t  sdecl->structsize = int_size_in_bytes (type);\n-\t  sdecl->alignsize = TYPE_ALIGN_UNIT (type);\n-\t  sdecl->alignment = STRUCTALIGN_DEFAULT;\n-\t  sdecl->sizeok = SIZEOKdone;\n-\t  sdecl->type = (TypeStruct::create (sdecl))->addMod (mod);\n-\t  sdecl->type->ctype = type;\n-\t  sdecl->type->merge2 ();\n-\n-\t  /* Does not seem necessary to convert fields, but the members field\n-\t     must be non-null for the above size setting to stick.  */\n-\t  sdecl->members = new Dsymbols;\n-\t  dtype = sdecl->type;\n-\t  builtin_converted_decls.safe_push (builtin_data (dtype, type, sdecl));\n-\t  return dtype;\n+\t  Type *ftype = build_frontend_type (TREE_TYPE (field));\n+\t  if (!ftype)\n+\t    {\n+\t      delete sdecl->members;\n+\t      return NULL;\n+\t    }\n+\n+\t  Identifier *fident\n+\t    = Identifier::idPool (IDENTIFIER_POINTER (DECL_NAME (field)));\n+\t  VarDeclaration *vd = VarDeclaration::create (Loc (), ftype, fident,\n+\t\t\t\t\t\t       NULL);\n+\t  vd->offset = tree_to_uhwi (DECL_FIELD_OFFSET (field));\n+\t  vd->semanticRun = PASSsemanticdone;\n+\t  vd->csym = field;\n+\t  sdecl->members->push (vd);\n+\t  sdecl->fields.push (vd);\n \t}\n-      break;\n+\n+      dtype = sdecl->type;\n+      builtin_converted_decls.safe_push (builtin_data (dtype, type, sdecl));\n+      return dtype;\n+    }\n \n     case FUNCTION_TYPE:\n       dtype = build_frontend_type (TREE_TYPE (type));\n@@ -561,15 +577,26 @@ d_build_builtins_module (Module *m)\n       /* Currently, there is no need to run semantic, but we do want to output\n \t initializers, typeinfo, and others on demand.  */\n       Dsymbol *dsym = builtin_converted_decls[i].dsym;\n-      if (dsym != NULL)\n+      if (dsym != NULL && !dsym->isAnonymous ())\n \t{\n \t  dsym->parent = m;\n \t  members->push (dsym);\n \t}\n     }\n \n   /* va_list should already be built, so no need to convert to D type again.  */\n-  members->push (build_alias_declaration (\"__builtin_va_list\", Type::tvalist));\n+  StructDeclaration *sd = (Type::tvalist->ty == Tstruct)\n+    ? ((TypeStruct *) Type::tvalist)->sym : NULL;\n+  if (sd == NULL || !sd->isAnonymous ())\n+    {\n+      members->push (build_alias_declaration (\"__builtin_va_list\",\n+\t\t\t\t\t      Type::tvalist));\n+    }\n+  else\n+    {\n+      sd->ident = Identifier::idPool (\"__builtin_va_list\");\n+      members->push (sd);\n+    }\n \n   /* Expose target-specific integer types to the builtins module.  */\n   {\n@@ -1116,10 +1143,7 @@ d_init_builtins (void)\n   /* Build the \"standard\" abi va_list.  */\n   Type::tvalist = build_frontend_type (va_list_type_node);\n   if (!Type::tvalist)\n-    {\n-      error (\"cannot represent built-in %<va_list%> type in D\");\n-      gcc_unreachable ();\n-    }\n+    sorry (\"cannot represent built-in %<va_list%> type in D\");\n \n   /* Map the va_list type to the D frontend Type.  This is to prevent both\n      errors in gimplification or an ICE in targetm.canonical_va_list_type.  */"}]}