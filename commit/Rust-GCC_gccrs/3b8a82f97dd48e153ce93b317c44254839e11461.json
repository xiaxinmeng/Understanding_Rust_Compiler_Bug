{"sha": "3b8a82f97dd48e153ce93b317c44254839e11461", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I4YTgyZjk3ZGQ0OGUxNTNjZTkzYjMxN2M0NDI1NDgzOWUxMTQ2MQ==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2020-12-13T13:59:33Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2020-12-13T14:12:34Z"}, "message": "Arm: Add NEON and MVE RTL patterns for Complex Addition, Multiply and FMA.\n\nThis adds implementation for the optabs for complex additions.  With this the\nfollowing C code:\n\n  void f90 (float complex a[restrict N], float complex b[restrict N],\n\t    float complex c[restrict N])\n  {\n    for (int i=0; i < N; i++)\n      c[i] = a[i] + (b[i] * I);\n  }\n\ngenerates\n\n  f90:\n\t  add     r3, r2, #1600\n  .L2:\n\t  vld1.32 {q8}, [r0]!\n\t  vld1.32 {q9}, [r1]!\n\t  vcadd.f32       q8, q8, q9, #90\n\t  vst1.32 {q8}, [r2]!\n\t  cmp     r3, r2\n\t  bne     .L2\n\t  bx      lr\n\ninstead of\n\n  f90:\n\t  add     r3, r2, #1600\n  .L2:\n\t  vld2.32 {d24-d27}, [r0]!\n\t  vld2.32 {d20-d23}, [r1]!\n\t  vsub.f32\tq8, q12, q11\n\t  vadd.f32\tq9, q13, q10\n\t  vst2.32 {d16-d19}, [r2]!\n\t  cmp     r3, r2\n\t  bne     .L2\n\t  bx      lr\n\ngcc/ChangeLog:\n\n\t* config/arm/arm_mve.h (__arm_vcaddq_rot90_u8, __arm_vcaddq_rot270_u8,\n\t, __arm_vcaddq_rot90_s8, __arm_vcaddq_rot270_s8,\n\t__arm_vcaddq_rot90_u16, __arm_vcaddq_rot270_u16, __arm_vcaddq_rot90_s16,\n\t__arm_vcaddq_rot270_s16, __arm_vcaddq_rot90_u32,\n\t__arm_vcaddq_rot270_u32, __arm_vcaddq_rot90_s32,\n\t__arm_vcaddq_rot270_s32, __arm_vcmulq_rot90_f16,\n\t__arm_vcmulq_rot270_f16, __arm_vcmulq_rot180_f16,\n\t__arm_vcmulq_f16, __arm_vcaddq_rot90_f16, __arm_vcaddq_rot270_f16,\n\t__arm_vcmulq_rot90_f32, __arm_vcmulq_rot270_f32,\n\t__arm_vcmulq_rot180_f32, __arm_vcmulq_f32, __arm_vcaddq_rot90_f32,\n\t__arm_vcaddq_rot270_f32, __arm_vcmlaq_f16, __arm_vcmlaq_rot180_f16,\n\t__arm_vcmlaq_rot270_f16, __arm_vcmlaq_rot90_f16, __arm_vcmlaq_f32,\n\t__arm_vcmlaq_rot180_f32, __arm_vcmlaq_rot270_f32,\n\t__arm_vcmlaq_rot90_f32): Update builtin calls.\n\t* config/arm/arm_mve_builtins.def (vcaddq_rot90_u, vcaddq_rot270_u,\n\tvcaddq_rot90_s, vcaddq_rot270_s, vcaddq_rot90_f, vcaddq_rot270_f,\n\tvcmulq_f, vcmulq_rot90_f, vcmulq_rot180_f, vcmulq_rot270_f,\n\tvcmlaq_f, vcmlaq_rot90_f, vcmlaq_rot180_f, vcmlaq_rot270_f): Removed.\n\t(vcaddq_rot90, vcaddq_rot270, vcmulq, vcmulq_rot90, vcmulq_rot180,\n\tvcmulq_rot270, vcmlaq, vcmlaq_rot90, vcmlaq_rot180, vcmlaq_rot270):\n\tNew.\n\t* config/arm/constraints.md (Dz): Include MVE.\n\t* config/arm/iterators.md (mve_rotsplit1, mve_rotsplit2): New.\n\t(rot): Add UNSPEC_VCMLS, UNSPEC_VCMUL and UNSPEC_VCMUL180.\n\t(rot_op, rotsplit1, rotsplit2, fcmac1, VCMLA_OP, VCMUL_OP): New.\n\t* config/arm/mve.md (VCADDQ_ROT270_S, VCADDQ_ROT90_S, VCADDQ_ROT270_U,\n\tVCADDQ_ROT90_U, VCADDQ_ROT270_F, VCADDQ_ROT90_F, VCMULQ_F,\n\tVCMULQ_ROT180_F, VCMULQ_ROT270_F, VCMULQ_ROT90_F, VCMLAQ_F,\n\tVCMLAQ_ROT180_F, VCMLAQ_ROT90_F, VCMLAQ_ROT270_F, VCADDQ_ROT270_S,\n\tVCADDQ_ROT270, VCADDQ_ROT90): Removed.\n\t(mve_rot, VCMUL): New.\n\t(mve_vcaddq_rot270_<supf><mode, mve_vcaddq_rot90_<supf><mode>,\n\tmve_vcaddq_rot270_f<mode>, mve_vcaddq_rot90_f<mode>, mve_vcmulq_f<mode,\n\tmve_vcmulq_rot180_f<mode>, mve_vcmulq_rot270_f<mode>,\n\tmve_vcmulq_rot90_f<mode>, mve_vcmlaq_f<mode>, mve_vcmlaq_rot180_f<mode>,\n\tmve_vcmlaq_rot270_f<mode>, mve_vcmlaq_rot90_f<mode>): Removed.\n\t(mve_vcmlaq<mve_rot><mode>, mve_vcmulq<mve_rot><mode>,\n\tmve_vcaddq<mve_rot><mode>, cadd<rot><mode>3, mve_vcaddq<mve_rot><mode>):\n\tNew.\n\t(cmul<rot_op><mode>3): Exclude MVE types.\n\t* config/arm/unspecs.md (UNSPEC_VCMUL90, UNSPEC_VCMUL270): New.\n\t* config/arm/vec-common.md (cadd<rot><mode>3, cmul<rot_op><mode>3,\n\tarm_vcmla<rot><mode>, cml<fcmac1><rot_op><mode>4): New.\n\t* config/arm/unspecs.md (UNSPEC_VCMUL, UNSPEC_VCMUL180, UNSPEC_VCMLS,\n\tUNSPEC_VCMLS180): New.\n\t* config/arm/neon.md (cmul<rot_op><mode>3): New.", "tree": {"sha": "2f34b1dc783f32ac5c0d3d6dc6033d6f68e5d69e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f34b1dc783f32ac5c0d3d6dc6033d6f68e5d69e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b8a82f97dd48e153ce93b317c44254839e11461", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b8a82f97dd48e153ce93b317c44254839e11461", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b8a82f97dd48e153ce93b317c44254839e11461", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b8a82f97dd48e153ce93b317c44254839e11461/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f05dadaeda6068ad570117be21f2c16e2f4fa10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f05dadaeda6068ad570117be21f2c16e2f4fa10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f05dadaeda6068ad570117be21f2c16e2f4fa10"}], "stats": {"total": 424, "additions": 216, "deletions": 208}, "files": [{"sha": "45014621f2533497e90ddf5257fb04e1fd9325b4", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 38, "deletions": 32, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8a82f97dd48e153ce93b317c44254839e11461/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8a82f97dd48e153ce93b317c44254839e11461/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=3b8a82f97dd48e153ce93b317c44254839e11461", "patch": "@@ -3981,14 +3981,16 @@ __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot90_u8 (uint8x16_t __a, uint8x16_t __b)\n {\n-  return __builtin_mve_vcaddq_rot90_uv16qi (__a, __b);\n+  return (uint8x16_t)\n+    __builtin_mve_vcaddq_rot90v16qi ((int8x16_t)__a, (int8x16_t)__b);\n }\n \n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot270_u8 (uint8x16_t __a, uint8x16_t __b)\n {\n-  return __builtin_mve_vcaddq_rot270_uv16qi (__a, __b);\n+  return (uint8x16_t)\n+    __builtin_mve_vcaddq_rot270v16qi ((int8x16_t)__a, (int8x16_t)__b);\n }\n \n __extension__ extern __inline uint8x16_t\n@@ -4520,14 +4522,14 @@ __extension__ extern __inline int8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot90_s8 (int8x16_t __a, int8x16_t __b)\n {\n-  return __builtin_mve_vcaddq_rot90_sv16qi (__a, __b);\n+  return __builtin_mve_vcaddq_rot90v16qi (__a, __b);\n }\n \n __extension__ extern __inline int8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot270_s8 (int8x16_t __a, int8x16_t __b)\n {\n-  return __builtin_mve_vcaddq_rot270_sv16qi (__a, __b);\n+  return __builtin_mve_vcaddq_rot270v16qi (__a, __b);\n }\n \n __extension__ extern __inline int8x16_t\n@@ -4821,14 +4823,16 @@ __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot90_u16 (uint16x8_t __a, uint16x8_t __b)\n {\n-  return __builtin_mve_vcaddq_rot90_uv8hi (__a, __b);\n+  return (uint16x8_t)\n+    __builtin_mve_vcaddq_rot90v8hi ((int16x8_t)__a, (int16x8_t)__b);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot270_u16 (uint16x8_t __a, uint16x8_t __b)\n {\n-  return __builtin_mve_vcaddq_rot270_uv8hi (__a, __b);\n+  return (uint16x8_t)\n+    __builtin_mve_vcaddq_rot270v8hi ((int16x8_t)__a, (int16x8_t)__b);\n }\n \n __extension__ extern __inline uint16x8_t\n@@ -5360,14 +5364,14 @@ __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot90_s16 (int16x8_t __a, int16x8_t __b)\n {\n-  return __builtin_mve_vcaddq_rot90_sv8hi (__a, __b);\n+  return __builtin_mve_vcaddq_rot90v8hi (__a, __b);\n }\n \n __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot270_s16 (int16x8_t __a, int16x8_t __b)\n {\n-  return __builtin_mve_vcaddq_rot270_sv8hi (__a, __b);\n+  return __builtin_mve_vcaddq_rot270v8hi (__a, __b);\n }\n \n __extension__ extern __inline int16x8_t\n@@ -5661,14 +5665,16 @@ __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot90_u32 (uint32x4_t __a, uint32x4_t __b)\n {\n-  return __builtin_mve_vcaddq_rot90_uv4si (__a, __b);\n+  return (uint32x4_t)\n+    __builtin_mve_vcaddq_rot90v4si ((int32x4_t)__a, (int32x4_t)__b);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot270_u32 (uint32x4_t __a, uint32x4_t __b)\n {\n-  return __builtin_mve_vcaddq_rot270_uv4si (__a, __b);\n+  return (uint32x4_t)\n+    __builtin_mve_vcaddq_rot270v4si ((int32x4_t)__a, (int32x4_t)__b);\n }\n \n __extension__ extern __inline uint32x4_t\n@@ -6200,14 +6206,14 @@ __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot90_s32 (int32x4_t __a, int32x4_t __b)\n {\n-  return __builtin_mve_vcaddq_rot90_sv4si (__a, __b);\n+  return __builtin_mve_vcaddq_rot90v4si (__a, __b);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot270_s32 (int32x4_t __a, int32x4_t __b)\n {\n-  return __builtin_mve_vcaddq_rot270_sv4si (__a, __b);\n+  return __builtin_mve_vcaddq_rot270v4si (__a, __b);\n }\n \n __extension__ extern __inline int32x4_t\n@@ -17342,42 +17348,42 @@ __extension__ extern __inline float16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmulq_rot90_f16 (float16x8_t __a, float16x8_t __b)\n {\n-  return __builtin_mve_vcmulq_rot90_fv8hf (__a, __b);\n+  return __builtin_mve_vcmulq_rot90v8hf (__a, __b);\n }\n \n __extension__ extern __inline float16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmulq_rot270_f16 (float16x8_t __a, float16x8_t __b)\n {\n-  return __builtin_mve_vcmulq_rot270_fv8hf (__a, __b);\n+  return __builtin_mve_vcmulq_rot270v8hf (__a, __b);\n }\n \n __extension__ extern __inline float16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmulq_rot180_f16 (float16x8_t __a, float16x8_t __b)\n {\n-  return __builtin_mve_vcmulq_rot180_fv8hf (__a, __b);\n+  return __builtin_mve_vcmulq_rot180v8hf (__a, __b);\n }\n \n __extension__ extern __inline float16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmulq_f16 (float16x8_t __a, float16x8_t __b)\n {\n-  return __builtin_mve_vcmulq_fv8hf (__a, __b);\n+  return __builtin_mve_vcmulqv8hf (__a, __b);\n }\n \n __extension__ extern __inline float16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot90_f16 (float16x8_t __a, float16x8_t __b)\n {\n-  return __builtin_mve_vcaddq_rot90_fv8hf (__a, __b);\n+  return __builtin_mve_vcaddq_rot90v8hf (__a, __b);\n }\n \n __extension__ extern __inline float16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot270_f16 (float16x8_t __a, float16x8_t __b)\n {\n-  return __builtin_mve_vcaddq_rot270_fv8hf (__a, __b);\n+  return __builtin_mve_vcaddq_rot270v8hf (__a, __b);\n }\n \n __extension__ extern __inline float16x8_t\n@@ -17594,42 +17600,42 @@ __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmulq_rot90_f32 (float32x4_t __a, float32x4_t __b)\n {\n-  return __builtin_mve_vcmulq_rot90_fv4sf (__a, __b);\n+  return __builtin_mve_vcmulq_rot90v4sf (__a, __b);\n }\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmulq_rot270_f32 (float32x4_t __a, float32x4_t __b)\n {\n-  return __builtin_mve_vcmulq_rot270_fv4sf (__a, __b);\n+  return __builtin_mve_vcmulq_rot270v4sf (__a, __b);\n }\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmulq_rot180_f32 (float32x4_t __a, float32x4_t __b)\n {\n-  return __builtin_mve_vcmulq_rot180_fv4sf (__a, __b);\n+  return __builtin_mve_vcmulq_rot180v4sf (__a, __b);\n }\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmulq_f32 (float32x4_t __a, float32x4_t __b)\n {\n-  return __builtin_mve_vcmulq_fv4sf (__a, __b);\n+  return __builtin_mve_vcmulqv4sf (__a, __b);\n }\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot90_f32 (float32x4_t __a, float32x4_t __b)\n {\n-  return __builtin_mve_vcaddq_rot90_fv4sf (__a, __b);\n+  return __builtin_mve_vcaddq_rot90v4sf (__a, __b);\n }\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcaddq_rot270_f32 (float32x4_t __a, float32x4_t __b)\n {\n-  return __builtin_mve_vcaddq_rot270_fv4sf (__a, __b);\n+  return __builtin_mve_vcaddq_rot270v4sf (__a, __b);\n }\n \n __extension__ extern __inline float32x4_t\n@@ -17784,28 +17790,28 @@ __extension__ extern __inline float16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmlaq_f16 (float16x8_t __a, float16x8_t __b, float16x8_t __c)\n {\n-  return __builtin_mve_vcmlaq_fv8hf (__a, __b, __c);\n+  return __builtin_mve_vcmlaqv8hf (__a, __b, __c);\n }\n \n __extension__ extern __inline float16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmlaq_rot180_f16 (float16x8_t __a, float16x8_t __b, float16x8_t __c)\n {\n-  return __builtin_mve_vcmlaq_rot180_fv8hf (__a, __b, __c);\n+  return __builtin_mve_vcmlaq_rot180v8hf (__a, __b, __c);\n }\n \n __extension__ extern __inline float16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmlaq_rot270_f16 (float16x8_t __a, float16x8_t __b, float16x8_t __c)\n {\n-  return __builtin_mve_vcmlaq_rot270_fv8hf (__a, __b, __c);\n+  return __builtin_mve_vcmlaq_rot270v8hf (__a, __b, __c);\n }\n \n __extension__ extern __inline float16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmlaq_rot90_f16 (float16x8_t __a, float16x8_t __b, float16x8_t __c)\n {\n-  return __builtin_mve_vcmlaq_rot90_fv8hf (__a, __b, __c);\n+  return __builtin_mve_vcmlaq_rot90v8hf (__a, __b, __c);\n }\n \n __extension__ extern __inline float16x8_t\n@@ -18092,28 +18098,28 @@ __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmlaq_f32 (float32x4_t __a, float32x4_t __b, float32x4_t __c)\n {\n-  return __builtin_mve_vcmlaq_fv4sf (__a, __b, __c);\n+  return __builtin_mve_vcmlaqv4sf (__a, __b, __c);\n }\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmlaq_rot180_f32 (float32x4_t __a, float32x4_t __b, float32x4_t __c)\n {\n-  return __builtin_mve_vcmlaq_rot180_fv4sf (__a, __b, __c);\n+  return __builtin_mve_vcmlaq_rot180v4sf (__a, __b, __c);\n }\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmlaq_rot270_f32 (float32x4_t __a, float32x4_t __b, float32x4_t __c)\n {\n-  return __builtin_mve_vcmlaq_rot270_fv4sf (__a, __b, __c);\n+  return __builtin_mve_vcmlaq_rot270v4sf (__a, __b, __c);\n }\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vcmlaq_rot90_f32 (float32x4_t __a, float32x4_t __b, float32x4_t __c)\n {\n-  return __builtin_mve_vcmlaq_rot90_fv4sf (__a, __b, __c);\n+  return __builtin_mve_vcmlaq_rot90v4sf (__a, __b, __c);\n }\n \n __extension__ extern __inline float32x4_t"}, {"sha": "56b652fff0a6729d04982cc13a479587180b0208", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8a82f97dd48e153ce93b317c44254839e11461/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8a82f97dd48e153ce93b317c44254839e11461/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=3b8a82f97dd48e153ce93b317c44254839e11461", "patch": "@@ -125,8 +125,6 @@ VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpeqq_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpeqq_n_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpcsq_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpcsq_n_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vcaddq_rot90_u, v16qi, v8hi, v4si)\n-VAR3 (BINOP_UNONE_UNONE_UNONE, vcaddq_rot270_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_UNONE, vbicq_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_UNONE, vandq_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_UNONE_UNONE_UNONE, vaddvq_p_u, v16qi, v8hi, v4si)\n@@ -202,8 +200,6 @@ VAR3 (BINOP_NONE_NONE_NONE, vhcaddq_rot270_s, v16qi, v8hi, v4si)\n VAR3 (BINOP_NONE_NONE_NONE, vhaddq_s, v16qi, v8hi, v4si)\n VAR3 (BINOP_NONE_NONE_NONE, vhaddq_n_s, v16qi, v8hi, v4si)\n VAR3 (BINOP_NONE_NONE_NONE, veorq_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vcaddq_rot90_s, v16qi, v8hi, v4si)\n-VAR3 (BINOP_NONE_NONE_NONE, vcaddq_rot270_s, v16qi, v8hi, v4si)\n VAR3 (BINOP_NONE_NONE_NONE, vbrsrq_n_s, v16qi, v8hi, v4si)\n VAR3 (BINOP_NONE_NONE_NONE, vbicq_s, v16qi, v8hi, v4si)\n VAR3 (BINOP_NONE_NONE_NONE, vandq_s, v16qi, v8hi, v4si)\n@@ -264,12 +260,6 @@ VAR2 (BINOP_NONE_NONE_NONE, vmaxnmq_f, v8hf, v4sf)\n VAR2 (BINOP_NONE_NONE_NONE, vmaxnmavq_f, v8hf, v4sf)\n VAR2 (BINOP_NONE_NONE_NONE, vmaxnmaq_f, v8hf, v4sf)\n VAR2 (BINOP_NONE_NONE_NONE, veorq_f, v8hf, v4sf)\n-VAR2 (BINOP_NONE_NONE_NONE, vcmulq_rot90_f, v8hf, v4sf)\n-VAR2 (BINOP_NONE_NONE_NONE, vcmulq_rot270_f, v8hf, v4sf)\n-VAR2 (BINOP_NONE_NONE_NONE, vcmulq_rot180_f, v8hf, v4sf)\n-VAR2 (BINOP_NONE_NONE_NONE, vcmulq_f, v8hf, v4sf)\n-VAR2 (BINOP_NONE_NONE_NONE, vcaddq_rot90_f, v8hf, v4sf)\n-VAR2 (BINOP_NONE_NONE_NONE, vcaddq_rot270_f, v8hf, v4sf)\n VAR2 (BINOP_NONE_NONE_NONE, vbicq_f, v8hf, v4sf)\n VAR2 (BINOP_NONE_NONE_NONE, vandq_f, v8hf, v4sf)\n VAR2 (BINOP_NONE_NONE_NONE, vaddq_n_f, v8hf, v4sf)\n@@ -470,10 +460,6 @@ VAR2 (TERNOP_NONE_NONE_NONE_NONE, vfmsq_f, v8hf, v4sf)\n VAR2 (TERNOP_NONE_NONE_NONE_NONE, vfmasq_n_f, v8hf, v4sf)\n VAR2 (TERNOP_NONE_NONE_NONE_NONE, vfmaq_n_f, v8hf, v4sf)\n VAR2 (TERNOP_NONE_NONE_NONE_NONE, vfmaq_f, v8hf, v4sf)\n-VAR2 (TERNOP_NONE_NONE_NONE_NONE, vcmlaq_rot90_f, v8hf, v4sf)\n-VAR2 (TERNOP_NONE_NONE_NONE_NONE, vcmlaq_rot270_f, v8hf, v4sf)\n-VAR2 (TERNOP_NONE_NONE_NONE_NONE, vcmlaq_rot180_f, v8hf, v4sf)\n-VAR2 (TERNOP_NONE_NONE_NONE_NONE, vcmlaq_f, v8hf, v4sf)\n VAR2 (TERNOP_NONE_NONE_NONE_IMM, vshrntq_n_s, v8hi, v4si)\n VAR2 (TERNOP_NONE_NONE_NONE_IMM, vshrnbq_n_s, v8hi, v4si)\n VAR2 (TERNOP_NONE_NONE_NONE_IMM, vrshrntq_n_s, v8hi, v4si)\n@@ -892,3 +878,15 @@ VAR3 (QUADOP_NONE_NONE_UNONE_IMM_UNONE, vshlcq_m_vec_s, v16qi, v8hi, v4si)\n VAR3 (QUADOP_NONE_NONE_UNONE_IMM_UNONE, vshlcq_m_carry_s, v16qi, v8hi, v4si)\n VAR3 (QUADOP_UNONE_UNONE_UNONE_IMM_UNONE, vshlcq_m_vec_u, v16qi, v8hi, v4si)\n VAR3 (QUADOP_UNONE_UNONE_UNONE_IMM_UNONE, vshlcq_m_carry_u, v16qi, v8hi, v4si)\n+\n+/* optabs without any suffixes.  */\n+VAR5 (BINOP_NONE_NONE_NONE, vcaddq_rot90, v16qi, v8hi, v4si, v8hf, v4sf)\n+VAR5 (BINOP_NONE_NONE_NONE, vcaddq_rot270, v16qi, v8hi, v4si, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_NONE, vcmulq_rot90, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_NONE, vcmulq_rot270, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_NONE, vcmulq_rot180, v8hf, v4sf)\n+VAR2 (BINOP_NONE_NONE_NONE, vcmulq, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_NONE, vcmlaq_rot90, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_NONE, vcmlaq_rot270, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_NONE, vcmlaq_rot180, v8hf, v4sf)\n+VAR2 (TERNOP_NONE_NONE_NONE_NONE, vcmlaq, v8hf, v4sf)"}, {"sha": "6ebddb95b4f9c835f10f5265573f27a06ccbd11f", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8a82f97dd48e153ce93b317c44254839e11461/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8a82f97dd48e153ce93b317c44254839e11461/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=3b8a82f97dd48e153ce93b317c44254839e11461", "patch": "@@ -310,7 +310,7 @@\n  \"@internal\n   In ARM/Thumb-2 state a vector of constant zeros.\"\n  (and (match_code \"const_vector\")\n-      (match_test \"TARGET_NEON && op == CONST0_RTX (mode)\")))\n+      (match_test \"(TARGET_NEON || TARGET_HAVE_MVE) && op == CONST0_RTX (mode)\")))\n \n (define_constraint \"Da\"\n  \"@internal"}, {"sha": "5fc75cb8d076e09febacc7ad53226c1aa584295b", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 39, "deletions": 5, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8a82f97dd48e153ce93b317c44254839e11461/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8a82f97dd48e153ce93b317c44254839e11461/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=3b8a82f97dd48e153ce93b317c44254839e11461", "patch": "@@ -1177,11 +1177,40 @@\n \n (define_int_attr rot [(UNSPEC_VCADD90 \"90\")\n \t\t      (UNSPEC_VCADD270 \"270\")\n+\t\t      (UNSPEC_VCMLS \"0\")\n \t\t      (UNSPEC_VCMLA \"0\")\n \t\t      (UNSPEC_VCMLA90 \"90\")\n \t\t      (UNSPEC_VCMLA180 \"180\")\n \t\t      (UNSPEC_VCMLA270 \"270\")])\n \n+(define_int_attr mve_rotsplit1 [(UNSPEC_VCMLA \"\")\n+\t\t\t\t(UNSPEC_VCMLA180 \"\")\n+\t\t\t\t(UNSPEC_VCMUL \"\")\n+\t\t\t\t(UNSPEC_VCMUL180 \"\")\n+\t\t\t\t(UNSPEC_VCMLS \"_rot270\")\n+\t\t\t\t(UNSPEC_VCMLS180 \"_rot90\")])\n+\n+(define_int_attr mve_rotsplit2 [(UNSPEC_VCMLA \"_rot90\")\n+\t\t\t\t(UNSPEC_VCMLA180 \"_rot270\")\n+\t\t\t\t(UNSPEC_VCMUL \"_rot90\")\n+\t\t\t\t(UNSPEC_VCMUL180 \"_rot270\")\n+\t\t\t\t(UNSPEC_VCMLS \"_rot180\")\n+\t\t\t\t(UNSPEC_VCMLS180 \"_rot180\")])\n+\n+(define_int_attr mve_rot [(UNSPEC_VCADD90 \"_rot90\")\n+\t\t\t  (UNSPEC_VCADD270 \"_rot270\")\n+\t\t\t  (UNSPEC_VCMLA \"\")\n+\t\t\t  (UNSPEC_VCMLA90 \"_rot90\")\n+\t\t\t  (UNSPEC_VCMLA180 \"_rot180\")\n+\t\t\t  (UNSPEC_VCMLA270 \"_rot270\")\n+\t\t\t  (UNSPEC_VCMUL \"\")\n+\t\t\t  (UNSPEC_VCMUL90 \"_rot90\")\n+\t\t\t  (UNSPEC_VCMUL180 \"_rot180\")\n+\t\t\t  (UNSPEC_VCMUL270 \"_rot270\")])\n+\n+(define_int_iterator VCMUL [UNSPEC_VCMUL UNSPEC_VCMUL90\n+\t\t\t    UNSPEC_VCMUL180 UNSPEC_VCMUL270])\n+\n (define_int_attr simd32_op [(UNSPEC_QADD8 \"qadd8\") (UNSPEC_QSUB8 \"qsub8\")\n \t\t\t    (UNSPEC_SHADD8 \"shadd8\") (UNSPEC_SHSUB8 \"shsub8\")\n \t\t\t    (UNSPEC_UHADD8 \"uhadd8\") (UNSPEC_UHSUB8 \"uhsub8\")\n@@ -1233,9 +1262,8 @@\n \t\t       (VABDQ_M_S \"s\") (VABDQ_M_U \"u\") (VABDQ_S \"s\")\n \t\t       (VABDQ_U \"u\") (VADDQ_N_S \"s\") (VADDQ_N_U \"u\")\n \t\t       (VADDVQ_P_S \"s\")\t(VADDVQ_P_U \"u\") (VBICQ_S \"s\") (VBICQ_U \"u\")\n-\t\t       (VBRSRQ_N_S \"s\") (VBRSRQ_N_U \"u\") (VCADDQ_ROT270_S \"s\")\n-\t\t       (VCADDQ_ROT270_U \"u\") (VCADDQ_ROT90_S \"s\")\n-\t\t       (VCMPEQQ_S \"s\") (VCMPEQQ_U \"u\") (VCADDQ_ROT90_U \"u\")\n+\t\t       (VBRSRQ_N_S \"s\") (VBRSRQ_N_U \"u\")\n+\t\t       (VCMPEQQ_S \"s\") (VCMPEQQ_U \"u\")\n \t\t       (VCMPEQQ_N_S \"s\") (VCMPEQQ_N_U \"u\") (VCMPNEQ_N_S \"s\")\n \t\t       (VCMPNEQ_N_U \"u\") (VEORQ_S \"s\") (VEORQ_U \"u\")\n \t\t       (VHADDQ_N_S \"s\") (VHADDQ_N_U \"u\") (VHADDQ_S \"s\")\n@@ -1502,8 +1530,6 @@\n (define_int_iterator VADDVQ_P [VADDVQ_P_U VADDVQ_P_S])\n (define_int_iterator VBICQ [VBICQ_S VBICQ_U])\n (define_int_iterator VBRSRQ_N [VBRSRQ_N_U VBRSRQ_N_S])\n-(define_int_iterator VCADDQ_ROT270 [VCADDQ_ROT270_S VCADDQ_ROT270_U])\n-(define_int_iterator VCADDQ_ROT90 [VCADDQ_ROT90_U VCADDQ_ROT90_S])\n (define_int_iterator VCMPEQQ [VCMPEQQ_U VCMPEQQ_S])\n (define_int_iterator VCMPEQQ_N [VCMPEQQ_N_S VCMPEQQ_N_U])\n (define_int_iterator VCMPNEQ_N [VCMPNEQ_N_U VCMPNEQ_N_S])\n@@ -1712,3 +1738,11 @@\n (define_int_iterator UQRSHLLQ [UQRSHLL_64 UQRSHLL_48])\n (define_int_iterator SQRSHRLQ [SQRSHRL_64 SQRSHRL_48])\n (define_int_iterator VSHLCQ_M [VSHLCQ_M_S VSHLCQ_M_U])\n+;; Define iterators for VCMLA operations\n+(define_int_iterator VCMLA_OP [UNSPEC_VCMLA\n+\t\t\t       UNSPEC_VCMLA180\n+\t\t\t       UNSPEC_VCMLS])\n+\n+;; Define iterators for VCMLA operations as MUL\n+(define_int_iterator VCMUL_OP [UNSPEC_VCMUL\n+\t\t\t       UNSPEC_VCMUL180])"}, {"sha": "d29f387b5bffc77c7ab24e0e95c6a730fe0e8822", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 30, "deletions": 142, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8a82f97dd48e153ce93b317c44254839e11461/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8a82f97dd48e153ce93b317c44254839e11461/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=3b8a82f97dd48e153ce93b317c44254839e11461", "patch": "@@ -950,34 +950,28 @@\n ])\n \n ;;\n-;; [vcaddq_rot270_s, vcaddq_rot270_u])\n+;; [vcaddq, vcaddq_rot90, vcadd_rot180, vcadd_rot270])\n ;;\n-(define_insn \"mve_vcaddq_rot270_<supf><mode>\"\n+(define_insn \"mve_vcaddq<mve_rot><mode>\"\n   [\n    (set (match_operand:MVE_2 0 \"s_register_operand\" \"<earlyclobber_32>\")\n \t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n \t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n-\t VCADDQ_ROT270))\n+\t VCADD))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"vcadd.i%#<V_sz_elem>\t%q0, %q1, %q2, #270\"\n+  \"vcadd.i%#<V_sz_elem>\t%q0, %q1, %q2, #<rot>\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n \n-;;\n-;; [vcaddq_rot90_u, vcaddq_rot90_s])\n-;;\n-(define_insn \"mve_vcaddq_rot90_<supf><mode>\"\n-  [\n-   (set (match_operand:MVE_2 0 \"s_register_operand\" \"<earlyclobber_32>\")\n-\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n-\t VCADDQ_ROT90))\n-  ]\n-  \"TARGET_HAVE_MVE\"\n-  \"vcadd.i%#<V_sz_elem>\t%q0, %q1, %q2, #90\"\n-  [(set_attr \"type\" \"mve_move\")\n-])\n+;; Auto vectorizer pattern for int vcadd\n+(define_expand \"cadd<rot><mode>3\"\n+  [(set (match_operand:MVE_2 0 \"register_operand\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"register_operand\")\n+\t\t       (match_operand:MVE_2 2 \"register_operand\")]\n+\t  VCADD))]\n+  \"TARGET_HAVE_MVE && !BYTES_BIG_ENDIAN\"\n+)\n \n ;;\n ;; [vcmpcsq_n_u])\n@@ -2084,32 +2078,17 @@\n ])\n \n ;;\n-;; [vcaddq_rot270_f])\n-;;\n-(define_insn \"mve_vcaddq_rot270_f<mode>\"\n-  [\n-   (set (match_operand:MVE_0 0 \"s_register_operand\" \"<earlyclobber_32>\")\n-\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n-\t VCADDQ_ROT270_F))\n-  ]\n-  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n-  \"vcadd.f%#<V_sz_elem>\t%q0, %q1, %q2, #270\"\n-  [(set_attr \"type\" \"mve_move\")\n-])\n-\n-;;\n-;; [vcaddq_rot90_f])\n+;; [vcaddq, vcaddq_rot90, vcadd_rot180, vcadd_rot270])\n ;;\n-(define_insn \"mve_vcaddq_rot90_f<mode>\"\n+(define_insn \"mve_vcaddq<mve_rot><mode>\"\n   [\n    (set (match_operand:MVE_0 0 \"s_register_operand\" \"<earlyclobber_32>\")\n \t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n \t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n-\t VCADDQ_ROT90_F))\n+\t VCADD))\n   ]\n   \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n-  \"vcadd.f%#<V_sz_elem>\t%q0, %q1, %q2, #90\"\n+  \"vcadd.f%#<V_sz_elem>\t%q0, %q1, %q2, #<rot>\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n \n@@ -2294,62 +2273,17 @@\n ])\n \n ;;\n-;; [vcmulq_f])\n-;;\n-(define_insn \"mve_vcmulq_f<mode>\"\n-  [\n-   (set (match_operand:MVE_0 0 \"s_register_operand\" \"<earlyclobber_32>\")\n-\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n-\t VCMULQ_F))\n-  ]\n-  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n-  \"vcmul.f%#<V_sz_elem>\t%q0, %q1, %q2, #0\"\n-  [(set_attr \"type\" \"mve_move\")\n-])\n-\n-;;\n-;; [vcmulq_rot180_f])\n-;;\n-(define_insn \"mve_vcmulq_rot180_f<mode>\"\n-  [\n-   (set (match_operand:MVE_0 0 \"s_register_operand\" \"<earlyclobber_32>\")\n-\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n-\t VCMULQ_ROT180_F))\n-  ]\n-  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n-  \"vcmul.f%#<V_sz_elem>\t%q0, %q1, %q2, #180\"\n-  [(set_attr \"type\" \"mve_move\")\n-])\n-\n-;;\n-;; [vcmulq_rot270_f])\n-;;\n-(define_insn \"mve_vcmulq_rot270_f<mode>\"\n-  [\n-   (set (match_operand:MVE_0 0 \"s_register_operand\" \"<earlyclobber_32>\")\n-\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n-\t VCMULQ_ROT270_F))\n-  ]\n-  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n-  \"vcmul.f%#<V_sz_elem>\t%q0, %q1, %q2, #270\"\n-  [(set_attr \"type\" \"mve_move\")\n-])\n-\n-;;\n-;; [vcmulq_rot90_f])\n+;; [vcmulq, vcmulq_rot90, vcmulq_rot180, vcmulq_rot270])\n ;;\n-(define_insn \"mve_vcmulq_rot90_f<mode>\"\n+(define_insn \"mve_vcmulq<mve_rot><mode>\"\n   [\n    (set (match_operand:MVE_0 0 \"s_register_operand\" \"<earlyclobber_32>\")\n \t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n \t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n-\t VCMULQ_ROT90_F))\n+\t VCMUL))\n   ]\n   \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n-  \"vcmul.f%#<V_sz_elem>\t%q0, %q1, %q2, #90\"\n+  \"vcmul.f%#<V_sz_elem>\t%q0, %q1, %q2, #<rot>\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n \n@@ -4122,66 +4056,20 @@\n   [(set_attr \"type\" \"mve_move\")\n    (set_attr \"length\"\"8\")])\n ;;\n-;; [vcmlaq_f])\n-;;\n-(define_insn \"mve_vcmlaq_f<mode>\"\n-  [\n-   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n-\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n-\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")]\n-\t VCMLAQ_F))\n-  ]\n-  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n-  \"vcmla.f%#<V_sz_elem>\t%q0, %q2, %q3, #0\"\n-  [(set_attr \"type\" \"mve_move\")\n-])\n-\n-;;\n-;; [vcmlaq_rot180_f])\n-;;\n-(define_insn \"mve_vcmlaq_rot180_f<mode>\"\n-  [\n-   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n-\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n-\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")]\n-\t VCMLAQ_ROT180_F))\n-  ]\n-  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n-  \"vcmla.f%#<V_sz_elem>\t%q0, %q2, %q3, #180\"\n-  [(set_attr \"type\" \"mve_move\")\n-])\n-\n-;;\n-;; [vcmlaq_rot270_f])\n-;;\n-(define_insn \"mve_vcmlaq_rot270_f<mode>\"\n-  [\n-   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n-\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n-\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")]\n-\t VCMLAQ_ROT270_F))\n-  ]\n-  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n-  \"vcmla.f%#<V_sz_elem>\t%q0, %q2, %q3, #270\"\n-  [(set_attr \"type\" \"mve_move\")\n-])\n-\n-;;\n-;; [vcmlaq_rot90_f])\n+;; [vcmlaq, vcmlaq_rot90, vcmlaq_rot180, vcmlaq_rot270])\n ;;\n-(define_insn \"mve_vcmlaq_rot90_f<mode>\"\n+(define_insn \"mve_vcmlaq<mve_rot><mode>\"\n   [\n-   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n-\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n-\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")]\n-\t VCMLAQ_ROT90_F))\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w,w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0,Dz\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w,w\")\n+\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w,w\")]\n+\t VCMLA))\n   ]\n   \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n-  \"vcmla.f%#<V_sz_elem>\t%q0, %q2, %q3, #90\"\n+  \"@\n+   vcmla.f%#<V_sz_elem>\t%q0, %q2, %q3, #<rot>\n+   vcmul.f%#<V_sz_elem>\t%q0, %q2, %q3, #<rot>\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n "}, {"sha": "487c0a168b2536648338c52ce0778aeb79fd32d1", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8a82f97dd48e153ce93b317c44254839e11461/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8a82f97dd48e153ce93b317c44254839e11461/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=3b8a82f97dd48e153ce93b317c44254839e11461", "patch": "@@ -3030,6 +3030,26 @@\n   [(set_attr \"type\" \"neon_fcmla\")]\n )\n \n+;; The complex mul operations always need to expand to two instructions.\n+;; The first operation does half the computation and the second does the\n+;; remainder.  Because of this, expand early.\n+(define_expand \"cmul<rot_op><mode>3\"\n+  [(set (match_operand:VDF 0 \"register_operand\")\n+\t(unspec:VDF [(match_operand:VDF 1 \"register_operand\")\n+\t\t     (match_operand:VDF 2 \"register_operand\")]\n+\t\t    VCMUL_OP))]\n+  \"TARGET_COMPLEX && !BYTES_BIG_ENDIAN\"\n+{\n+  rtx tmp = gen_reg_rtx (<MODE>mode);\n+  rtx res1 = gen_reg_rtx (<MODE>mode);\n+  emit_move_insn (tmp, CONST0_RTX (<MODE>mode));\n+  emit_insn (gen_neon_vcmla<rotsplit1><mode> (res1, tmp,\n+\t\t\t\t\t      operands[1], operands[2]));\n+  emit_insn (gen_neon_vcmla<rotsplit2><mode> (operands[0], res1,\n+\t\t\t\t\t      operands[1], operands[2]));\n+  DONE;\n+})\n+\n \n ;; These instructions map to the __builtins for the Dot Product operations.\n (define_insn \"neon_<sup>dot<vsi2qi>\""}, {"sha": "8bb00602103c0cf336a2cdf6ca96bb314a4aaa5b", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8a82f97dd48e153ce93b317c44254839e11461/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8a82f97dd48e153ce93b317c44254839e11461/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=3b8a82f97dd48e153ce93b317c44254839e11461", "patch": "@@ -510,6 +510,12 @@\n   UNSPEC_VCMLA90\n   UNSPEC_VCMLA180\n   UNSPEC_VCMLA270\n+  UNSPEC_VCMUL\n+  UNSPEC_VCMUL90\n+  UNSPEC_VCMUL180\n+  UNSPEC_VCMUL270\n+  UNSPEC_VCMLS\n+  UNSPEC_VCMLS180\n   UNSPEC_MATMUL_S\n   UNSPEC_MATMUL_U\n   UNSPEC_MATMUL_US\n@@ -603,8 +609,6 @@\n   VADDVQ_P_S\n   VBICQ_S\n   VBRSRQ_N_S\n-  VCADDQ_ROT270_S\n-  VCADDQ_ROT90_S\n   VCMPEQQ_S\n   VCMPEQQ_N_S\n   VCMPNEQ_N_S\n@@ -648,8 +652,6 @@\n   VADDVQ_P_U\n   VBICQ_U\n   VBRSRQ_N_U\n-  VCADDQ_ROT270_U\n-  VCADDQ_ROT90_U\n   VCMPEQQ_U\n   VCMPEQQ_N_U\n   VCMPNEQ_N_U\n@@ -718,8 +720,6 @@\n   VABDQ_F\n   VADDQ_N_F\n   VBICQ_F\n-  VCADDQ_ROT270_F\n-  VCADDQ_ROT90_F\n   VCMPEQQ_F\n   VCMPEQQ_N_F\n   VCMPGEQ_F\n@@ -732,10 +732,6 @@\n   VCMPLTQ_N_F\n   VCMPNEQ_F\n   VCMPNEQ_N_F\n-  VCMULQ_F\n-  VCMULQ_ROT180_F\n-  VCMULQ_ROT270_F\n-  VCMULQ_ROT90_F\n   VEORQ_F\n   VMAXNMAQ_F\n   VMAXNMAVQ_F\n@@ -908,7 +904,6 @@\n   VMLSLDAVAQ_S\n   VQSHRUNBQ_N_S\n   VQRSHRUNTQ_N_S\n-  VCMLAQ_F\n   VMINNMAQ_M_F\n   VFMASQ_N_F\n   VDUPQ_M_N_F\n@@ -930,14 +925,12 @@\n   VADDLVAQ_P_S\n   VQMOVUNBQ_M_S\n   VCMPLEQ_M_F\n-  VCMLAQ_ROT180_F\n   VMLSLDAVAXQ_S\n   VRNDXQ_M_F\n   VFMSQ_F\n   VMINNMVQ_P_F\n   VMAXNMVQ_P_F\n   VPSELQ_F\n-  VCMLAQ_ROT90_F\n   VQMOVUNTQ_M_S\n   VREV64Q_M_F\n   VNEGQ_M_F\n@@ -950,7 +943,6 @@\n   VRMLALDAVHQ_P_S\n   VRMLALDAVHXQ_P_S\n   VCMPEQQ_M_N_F\n-  VCMLAQ_ROT270_F\n   VMAXNMAQ_M_F\n   VRNDQ_M_F\n   VMLALDAVQ_P_U"}, {"sha": "784305955eeef3fc40ccc2c52eee74df572822c4", "filename": "gcc/config/arm/vec-common.md", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8a82f97dd48e153ce93b317c44254839e11461/gcc%2Fconfig%2Farm%2Fvec-common.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8a82f97dd48e153ce93b317c44254839e11461/gcc%2Fconfig%2Farm%2Fvec-common.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvec-common.md?ref=3b8a82f97dd48e153ce93b317c44254839e11461", "patch": "@@ -186,3 +186,73 @@\n \t\t (match_operand:VDQ 2 \"neon_logic_op2\" \"\")))]\n   \"ARM_HAVE_<MODE>_ARITH\"\n )\n+\n+(define_expand \"cadd<rot><mode>3\"\n+  [(set (match_operand:VF 0 \"register_operand\")\n+\t(unspec:VF [(match_operand:VF 1 \"register_operand\")\n+\t\t    (match_operand:VF 2 \"register_operand\")]\n+\t\t   VCADD))]\n+  \"(TARGET_COMPLEX || (TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\n+\t\t      && ARM_HAVE_<MODE>_ARITH)) && !BYTES_BIG_ENDIAN\"\n+)\n+\n+;; The complex mul operations always need to expand to two instructions.\n+;; The first operation does half the computation and the second does the\n+;; remainder.  Because of this, expand early.\n+(define_expand \"cmul<rot_op><mode>3\"\n+  [(set (match_operand:VQ_HSF 0 \"register_operand\")\n+        (unspec:VQ_HSF [(match_operand:VQ_HSF 1 \"register_operand\")\n+\t\t\t(match_operand:VQ_HSF 2 \"register_operand\")]\n+\t\t       VCMUL_OP))]\n+  \"(TARGET_COMPLEX || (TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT))\n+   && !BYTES_BIG_ENDIAN\"\n+{\n+  rtx res1 = gen_reg_rtx (<MODE>mode);\n+  if (TARGET_COMPLEX)\n+    {\n+      rtx tmp = gen_reg_rtx (<MODE>mode);\n+      emit_move_insn (tmp, CONST0_RTX (<MODE>mode));\n+      emit_insn (gen_neon_vcmla<rotsplit1><mode> (res1, tmp,\n+                                                  operands[1], operands[2]));\n+      emit_insn (gen_neon_vcmla<rotsplit2><mode> (operands[0], res1,\n+                                                  operands[1], operands[2]));\n+    }\n+  else\n+    {\n+      emit_insn (gen_mve_vcmulq<mve_rotsplit1><mode> (operands[0], operands[1],\n+                                                      operands[2]));\n+      emit_insn (gen_mve_vcmulq<mve_rotsplit2><mode> (operands[0], operands[1],\n+                                                      operands[2]));\n+    }\n+  DONE;\n+})\n+\n+(define_expand \"arm_vcmla<rot><mode>\"\n+  [(set (match_operand:VF 0 \"register_operand\")\n+\t(plus:VF (match_operand:VF 1 \"register_operand\")\n+\t\t (unspec:VF [(match_operand:VF 2 \"register_operand\")\n+\t\t\t     (match_operand:VF 3 \"register_operand\")]\n+\t\t\t     VCMLA)))]\n+  \"(TARGET_COMPLEX || (TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\n+\t\t      && ARM_HAVE_<MODE>_ARITH)) && !BYTES_BIG_ENDIAN\"\n+)\n+\n+;; The complex mla/mls operations always need to expand to two instructions.\n+;; The first operation does half the computation and the second does the\n+;; remainder.  Because of this, expand early.\n+(define_expand \"cml<fcmac1><rot_op><mode>4\"\n+  [(set (match_operand:VF 0 \"register_operand\")\n+\t(plus:VF (match_operand:VF 1 \"register_operand\")\n+\t\t (unspec:VF [(match_operand:VF 2 \"register_operand\")\n+\t\t\t     (match_operand:VF 3 \"register_operand\")]\n+\t\t\t    VCMLA_OP)))]\n+  \"(TARGET_COMPLEX || (TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\n+\t\t      && ARM_HAVE_<MODE>_ARITH)) && !BYTES_BIG_ENDIAN\"\n+{\n+  rtx tmp = gen_reg_rtx (<MODE>mode);\n+  emit_insn (gen_arm_vcmla<rotsplit1><mode> (tmp, operands[1],\n+\t\t\t\t\t     operands[2], operands[3]));\n+  emit_insn (gen_arm_vcmla<rotsplit2><mode> (operands[0], tmp,\n+\t\t\t\t\t     operands[2], operands[3]));\n+  DONE;\n+})"}]}