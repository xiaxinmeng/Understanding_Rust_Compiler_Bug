{"sha": "55710451f2f81d39b82472cfb3d7be7bd4ea98a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU3MTA0NTFmMmY4MWQzOWI4MjQ3MmNmYjNkN2JlN2JkNGVhOThhMg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-11-04T02:40:39Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-11-04T02:40:39Z"}, "message": "convex.c (convex_output_function_prologue): Fix format specifier warning.\n\n\t* convex.c (convex_output_function_prologue): Fix format specifier\n\twarning.\n\t(asm_declare_function_name): Fix signed/unsigned warning.\n\t(print_operand): Fix format specifier warning.\n\t* convex.h (S_REGNO_P, A_REGNO_P): Fix signed/unsigned warning.\n\t* dsp16xx-protos.h (uns_comparison_operator,\n\tnum_1600_core_shifts): Prototype.\n\t* dsp16xx.c: Include tm_p.h, not dsp16xx-protos.h.\n\t(frame_size, frame_pointer_offset): Delete.\n\t(dsp16xx_output_function_prologue, dsp16xx_output_function_epilogue):\n\tMake static.  Fix format specifier warnings.\n\t* dsp16xx.h (IS_ACCUM_REG): Fix unsigned>=0 warning.\n\t(EXTRA_SECTION_FUNCTIONS): Prototype const_section.\n\t* dsp16xx.md: Add default case in switches.\n\t* fr30.h (IN_RANGE): Delete.\n\t* ia64.h (ASM_OUTPUT_MI_THUNK): Fix format specifier warnings.\n\t* mcore-protos.h (mcore_output_cmov): Const-ify.\n\t* mcore.c (mcore_output_cmov): Likewise.\n\t* mcore.h (switch_to_section): Make static and prototype.\n\t* mn10200.h (REGNO_OK_FOR_INDEX_P, REG_OK_FOR_INDEX_P): Fix\n\tunsigned>=0 warnings.\n\t* mn10300.h (REGNO_IN_RANGE_P): Likewise.\n\t* rs6000-protos.h (read_only_data_section,\n\tread_only_private_data_section): Prototype.\n\t* rs6000.h (ASM_OUTPUT_BYTE): Fix format specifier warning.\n\t* sh.c (sh_adjust_cost): Mark parameter with ATTRIBUTE_UNUSED.\n\t* sh.h (GENERAL_REGISTER_P): Fix unsigned>=0 warning.\n\nFrom-SVN: r46758", "tree": {"sha": "e579e09abc940fe84b8a5b26cb42b617f7fe5510", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e579e09abc940fe84b8a5b26cb42b617f7fe5510"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55710451f2f81d39b82472cfb3d7be7bd4ea98a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55710451f2f81d39b82472cfb3d7be7bd4ea98a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55710451f2f81d39b82472cfb3d7be7bd4ea98a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/comments", "author": null, "committer": null, "parents": [{"sha": "40cdfca60cab2c798fe7138a2d633b93bfd52c4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40cdfca60cab2c798fe7138a2d633b93bfd52c4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40cdfca60cab2c798fe7138a2d633b93bfd52c4f"}], "stats": {"total": 157, "additions": 108, "deletions": 49}, "files": [{"sha": "f1bd7474fc42ebe0ef235ff647cec54e1b97c371", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=55710451f2f81d39b82472cfb3d7be7bd4ea98a2", "patch": "@@ -1,3 +1,33 @@\n+2001-11-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* convex.c (convex_output_function_prologue): Fix format specifier\n+\twarning.\n+\t(asm_declare_function_name): Fix signed/unsigned warning.\n+\t(print_operand): Fix format specifier warning.\n+\t* convex.h (S_REGNO_P, A_REGNO_P): Fix signed/unsigned warning.\n+\t* dsp16xx-protos.h (uns_comparison_operator,\n+\tnum_1600_core_shifts): Prototype.\n+\t* dsp16xx.c: Include tm_p.h, not dsp16xx-protos.h.\n+\t(frame_size, frame_pointer_offset): Delete.\n+\t(dsp16xx_output_function_prologue, dsp16xx_output_function_epilogue):\n+\tMake static.  Fix format specifier warnings.\n+\t* dsp16xx.h (IS_ACCUM_REG): Fix unsigned>=0 warning.\n+\t(EXTRA_SECTION_FUNCTIONS): Prototype const_section.\n+\t* dsp16xx.md: Add default case in switches.\n+\t* fr30.h (IN_RANGE): Delete.\n+\t* ia64.h (ASM_OUTPUT_MI_THUNK): Fix format specifier warnings.\n+\t* mcore-protos.h (mcore_output_cmov): Const-ify.\n+\t* mcore.c (mcore_output_cmov): Likewise.\n+\t* mcore.h (switch_to_section): Make static and prototype.\n+\t* mn10200.h (REGNO_OK_FOR_INDEX_P, REG_OK_FOR_INDEX_P): Fix\n+\tunsigned>=0 warnings.\n+\t* mn10300.h (REGNO_IN_RANGE_P): Likewise.\n+\t* rs6000-protos.h (read_only_data_section,\n+\tread_only_private_data_section): Prototype.\n+\t* rs6000.h (ASM_OUTPUT_BYTE): Fix format specifier warning.\n+\t* sh.c (sh_adjust_cost): Mark parameter with ATTRIBUTE_UNUSED.\n+\t* sh.h (GENERAL_REGISTER_P): Fix unsigned>=0 warning.\n+\n 2001-11-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* dwarf2asm.c (dw2_asm_output_pcrel): Mark parameters with"}, {"sha": "6d3883182c85909e656c851ceae929df9b38536e", "filename": "gcc/config/convex/convex.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Fconvex%2Fconvex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Fconvex%2Fconvex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.c?ref=55710451f2f81d39b82472cfb3d7be7bd4ea98a2", "patch": "@@ -94,7 +94,11 @@ convex_output_function_prologue (file, size)\n {\n   size = ((size) + 7) & -8;\n   if (size)\n-    fprintf (file, \"\\tsub.w #%d,sp\\n\", size);\n+    {\n+      fprintf (file, \"\\tsub.w #\");\n+      fprintf (file, HOST_WIDE_INT_PRINT_DEC, size);\n+      fprintf (file, \",sp\\n\");\n+    }\n }\n \n /* This function generates the assembly code for function exit.\n@@ -568,7 +572,7 @@ asm_declare_function_name (file, name, decl)\n   p = version_string;\n   for (i = 0; i < 3; ) {\n     c = *p;\n-    if (c - '0' < (unsigned) 10)\n+    if (ISDIGIT (c))\n       vers[i++] = c;\n     if (c == 0 || c == ' ')\n       vers[i++] = '0';\n@@ -639,9 +643,15 @@ print_operand (file, x, code)\n \tbreak;\n       default:\n \tif (code == 'u')\n-\t  fprintf (file, \"#%d\", CONST_DOUBLE_HIGH (x));\n+\t  {\n+\t    fprintf (file, \"#\");\n+\t    fprintf (file, HOST_WIDE_INT_PRINT_DEC, CONST_DOUBLE_HIGH (x));\n+\t  }\n \telse\n-\t  fprintf (file, \"#%d\", CONST_DOUBLE_LOW (x));\n+\t  {\n+\t    fprintf (file, \"#\");\n+\t    fprintf (file, HOST_WIDE_INT_PRINT_DEC, CONST_DOUBLE_LOW (x));\n+\t  }\n       }\n       break;\n "}, {"sha": "b326c96961b3cb07f899105442b1303e175e526d", "filename": "gcc/config/convex/convex.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Fconvex%2Fconvex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Fconvex%2Fconvex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.h?ref=55710451f2f81d39b82472cfb3d7be7bd4ea98a2", "patch": "@@ -642,8 +642,8 @@ enum reg_class {\n \n #define REGNO_REG_CLASS(REGNO) (regno_reg_class[REGNO])\n \n-#define S_REGNO_P(REGNO) (((REGNO) - S0_REGNUM) < (unsigned) 8)\n-#define A_REGNO_P(REGNO) (((REGNO) - A0_REGNUM) < (unsigned) 8)\n+#define S_REGNO_P(REGNO) ((unsigned)((REGNO) - S0_REGNUM) < 8)\n+#define A_REGNO_P(REGNO) ((unsigned)((REGNO) - A0_REGNUM) < 8)\n \n #define S_REG_P(X) (REG_P (X) && S_REGNO_P (REGNO (X)))\n #define A_REG_P(X) (REG_P (X) && A_REGNO_P (REGNO (X)))"}, {"sha": "ea1ea6b6610d6b6a11593a1c9c83a0291864cb5d", "filename": "gcc/config/dsp16xx/dsp16xx-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx-protos.h?ref=55710451f2f81d39b82472cfb3d7be7bd4ea98a2", "patch": "@@ -49,6 +49,7 @@ extern void output_dsp16xx_float_const PARAMS ((rtx *));\n extern void emit_1600_core_shift PARAMS ((enum rtx_code, rtx *, int));\n extern int dsp16xx_address_cost PARAMS ((rtx));\n extern int symbolic_address_p PARAMS ((rtx));\n+extern int uns_comparison_operator PARAMS ((rtx, enum machine_mode));\n #endif /* RTX_CODE */\n \n \n@@ -87,3 +88,4 @@ extern enum reg_class dsp16xx_reg_class_from_letter PARAMS ((int));\n extern int regno_reg_class PARAMS ((int));\n extern void function_prologue PARAMS ((FILE *, int));\n extern void function_epilogue PARAMS ((FILE *, int));\n+extern int num_1600_core_shifts PARAMS ((int));"}, {"sha": "f67d92cfcf6db2b09461f615f3aacb8ba4fb88e2", "filename": "gcc/config/dsp16xx/dsp16xx.c", "status": "modified", "additions": 9, "deletions": 25, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c?ref=55710451f2f81d39b82472cfb3d7be7bd4ea98a2", "patch": "@@ -37,7 +37,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"ggc.h\"\n #include \"toplev.h\"\n #include \"recog.h\"\n-#include \"dsp16xx-protos.h\"\n+#include \"tm_p.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n \n@@ -1362,21 +1362,6 @@ compute_frame_size (size)\n   return total_size;\n }\n \n-int \n-frame_size ()\n-{\n-  return (int) compute_frame_size(get_frame_size());\n-}\n-\n-int \n-frame_pointer_offset ()\n-{\n-  if (!leaf_function_p())\n-    return (-(current_function_outgoing_args_size + 1));\n-  else\n-    return 1;\n-}\n-\n int\n dsp16xx_call_saved_register (regno)\n      int regno;\n@@ -1405,7 +1390,7 @@ ybase_regs_ever_used ()\n   return live;\n }\n \n-void \n+static void \n dsp16xx_output_function_prologue (file, size)\n      FILE *file;\n      HOST_WIDE_INT size;\n@@ -1420,14 +1405,14 @@ dsp16xx_output_function_prologue (file, size)\n   total_size = compute_frame_size (size);\n   \n   fprintf (file, \"\\t/* FUNCTION PROLOGUE: */\\n\");\n-  fprintf (file, \"\\t/* total=%d, vars= %d, regs= %d, args=%d, extra= %d */\\n\",\n+  fprintf (file, \"\\t/* total=%ld, vars= %ld, regs= %d, args=%d, extra= %ld */\\n\",\n \t   current_frame_info.total_size,\n \t   current_frame_info.var_size,\n \t   current_frame_info.reg_size,\n \t   current_function_outgoing_args_size,\n \t   current_frame_info.extra_size);\n   \n-  fprintf (file, \"\\t/* fp save offset= %d, sp save_offset= %d */\\n\\n\",\n+  fprintf (file, \"\\t/* fp save offset= %ld, sp save_offset= %ld */\\n\\n\",\n \t   current_frame_info.fp_save_offset,\n \t   current_frame_info.sp_save_offset);\n   /* Set up the 'ybase' register window.  */\n@@ -1449,7 +1434,7 @@ dsp16xx_output_function_prologue (file, size)\n       else\n         {\n \t  if (SMALL_INTVAL(current_frame_info.var_size) && ((current_frame_info.var_size & 0x8000) == 0))\n-\t    fprintf (file, \"\\t%s=%d\\n\\t*%s++%s\\n\", reg_names[REG_J], current_frame_info.var_size, sp, reg_names[REG_J]);\n+\t    fprintf (file, \"\\t%s=%ld\\n\\t*%s++%s\\n\", reg_names[REG_J], current_frame_info.var_size, sp, reg_names[REG_J]);\n \t  else\n \t    fatal_error (\"Stack size > 32k\");\n \t}\n@@ -1481,7 +1466,7 @@ dsp16xx_output_function_prologue (file, size)\n     {\n       fprintf (file, \"\\t%s=%s\\n\", a1h, sp);\n       fprintf (file, \"\\t%s=%s\\n\", fp, a1h);  /* Establish new base frame */\n-      fprintf (file, \"\\t%s=%d\\n\", reg_names[REG_J], -total_size);\n+      fprintf (file, \"\\t%s=%ld\\n\", reg_names[REG_J], -total_size);\n       fprintf (file, \"\\t*%s++%s\\n\", fp, reg_names[REG_J]);\n     }\n   \n@@ -1515,7 +1500,7 @@ init_emulation_routines ()\n  dsp16xx_lshrhi3_libcall = (rtx) 0;\n \n }\n-void\n+static void\n dsp16xx_output_function_epilogue (file, size)\n      FILE *file;\n      HOST_WIDE_INT size ATTRIBUTE_UNUSED;\n@@ -1535,7 +1520,7 @@ dsp16xx_output_function_epilogue (file, size)\n \tfprintf (file, \"\\t*%s--\\n\", sp);\n       else\n \t{\n-\t  fprintf (file, \"\\t%s=%d\\n\\t*%s++%s\\n\", \n+\t  fprintf (file, \"\\t%s=%ld\\n\\t*%s++%s\\n\", \n \t\t   reg_names[REG_J], -current_frame_info.args_size, sp, reg_names[REG_J]);\n \t}\n     }\n@@ -1565,7 +1550,7 @@ dsp16xx_output_function_epilogue (file, size)\n \tfprintf (file, \"\\t*%s--\\n\", sp);\n       else\n \t{\n-\t  fprintf (file, \"\\t%s=%d\\n\\t*%s++%s\\n\", \n+\t  fprintf (file, \"\\t%s=%ld\\n\\t*%s++%s\\n\", \n \t\t   reg_names[REG_J], -current_frame_info.var_size, sp, reg_names[REG_J]);\n \t}\n     }\n@@ -2478,7 +2463,6 @@ luxworks_dsp16xx_file_start (file)\n          }\n #endif\n     fprintf (file, \"\\\"%s\\\"\\n\", temp_filename);\n-    fprintf (file, \"\");\n \n   fprintf (file, \"#include <%s.h>\\n\", save_chip_name);\n "}, {"sha": "36abc14902cba96436b7f09518655a456ae71810", "filename": "gcc/config/dsp16xx/dsp16xx.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h?ref=55710451f2f81d39b82472cfb3d7be7bd4ea98a2", "patch": "@@ -502,7 +502,7 @@ extern int target_flags;\n #define REG_YBASE31 57\n \n /* Do we have a accumulator register? */\n-#define IS_ACCUM_REG(REGNO) ((REGNO) >= REG_A0 && (REGNO) <= REG_A1L)\n+#define IS_ACCUM_REG(REGNO) IN_RANGE ((REGNO), REG_A0, REG_A1L)\n #define IS_ACCUM_LOW_REG(REGNO) ((REGNO) == REG_A0L || (REGNO) == REG_A1L)\n \n /* Do we have a virtual ybase register */\n@@ -1604,6 +1604,7 @@ extern struct dsp16xx_frame_info current_frame_info;\n #define EXTRA_SECTIONS in_const\n \n #define EXTRA_SECTION_FUNCTIONS  \\\n+extern void const_section PARAMS ((void));                         \\\n void                                                               \\\n const_section ()                                                   \\\n {                                                                  \\"}, {"sha": "64a64fd032aa2296cc136aa9589a84bbba5371cb", "filename": "gcc/config/dsp16xx/dsp16xx.md", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.md?ref=55710451f2f81d39b82472cfb3d7be7bd4ea98a2", "patch": "@@ -146,6 +146,8 @@\n \t   case 0:\n \t   case 1:\n    \t      return \\\"%0&%1\\\";\n+           default:\n+             abort();\n          }\n }\"\n   [(set_attr \"type\" \"f3_alu,f3_alu\")])\n@@ -551,6 +553,8 @@\n \n \tcase 2:\n \t  return \\\"*%0++\\;*%0++\\\";\n+        default:\n+          abort();\n \t}\n \n     case 2:\n@@ -571,6 +575,8 @@\n     case 10:\n     case 11:\n       return \\\"%0=%b1+%H2\\\";\n+    default:\n+      abort();\n     }\n }\"\n [(set_attr \"type\" \"data_move_memory,data_move_multiple,f3_alu_i,f3_alu_i,f3_alu,f3_alu,f3_alu,f3_alu,f3_alu_i,f3_alu_i,f3_alu_i,f3_alu_i\")])\n@@ -684,6 +690,8 @@\n     case 7: case 8:\n     case 9: case 10:\n       return \\\"%0=%b1-%H2\\\";\n+    default:\n+      abort();\n     }\n }\"\n [(set_attr \"type\" \"data_move_multiple,f3_alu_i,f3_alu_i,f3_alu,f3_alu,f3_alu,f3_alu,f3_alu_i,f3_alu_i,f3_alu_i,f3_alu_i\")])\n@@ -1408,6 +1416,8 @@\n \t\tcase 8:\n \t\tcase 9:\n \t\t   return \\\"\\\";\n+                default:\n+                  abort();\n         }\n }\"\n [(set_attr \"type\" \"special,data_move_multiple,f3_alu,data_move_multiple,data_move_multiple,data_move_multiple,data_move_multiple,data_move_multiple,nothing,nothing\")])\n@@ -1473,6 +1483,8 @@\n \n                 case 9: case 10:\n \t\t   return \\\"%0=%1\\\";\n+                default:\n+                  abort();\n \t}\n }\"\n [(set_attr \"type\" \"data_move,data_move,data_move_short_i,data_move_i,data_move_memory,data_move_memory,data_move_memory,data_move_memory,nothing,malu,malu\")])\n@@ -1520,6 +1532,8 @@\n \n                 case 9: case 10:\n \t\t   return \\\"%0=%1\\\";\n+                default:\n+                  abort();\n \t}\n }\"\n [(set_attr \"type\" \"data_move,data_move,data_move_short_i,data_move_i,data_move_memory,data_move_memory,data_move_memory,data_move_memory,nothing,malu,malu\")])\n@@ -1676,6 +1690,8 @@\n \t\tcase 5:\n \t\tcase 6:\n \t\t   return \\\"%u0=%u1\\;%w0=%w1\\\";\n+                default:\n+                  abort();\n         }\n }\"\n [(set_attr \"type\" \"move,move,load_i,load,store,load,store\")])\n@@ -1784,6 +1800,8 @@\n ;;\treturn \\\"move %w0=%1\\;%0=0\\\";\n ;;      else\n ;;\treturn \\\"%w0=%1\\;%0=0\\\";\n+;;    default:\n+;;      abort();\n ;;    }\n ;; }\")\n \n@@ -1836,6 +1854,8 @@\n \n \tcase 3:\n \t  return \\\"%0 = extractz(%m1, 0x1000)\\\";\n+        default:\n+          abort();\n       }\n   }\"\n   [(set_attr \"type\" \"data_move_2,data_move_2,data_move_2,shift_i\")])\n@@ -1864,6 +1884,8 @@\n           }\n           else\n             return \\\"%w0=%1\\;%0=0\\\";\n+          default:\n+            abort();\n       }\n   }\"\n   [(set_attr \"type\" \"data_move_2,data_move_2,data_move_2\")])"}, {"sha": "bc2d0ca1fc45fdc3841a93a8ab3cd94033b2c664", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=55710451f2f81d39b82472cfb3d7be7bd4ea98a2", "patch": "@@ -617,11 +617,6 @@ enum reg_class\n /*}}}*/ \f\n /*{{{  CONSTANTS.  */ \n \n-/* Return true if a value is inside a range */\n-#define IN_RANGE(VALUE, LOW, HIGH)\t\t\t\t\t\\\n-  (   ((unsigned HOST_WIDE_INT)((VALUE) - (LOW)))\t\t\t\\\n-   <= ((unsigned HOST_WIDE_INT)( (HIGH) - (LOW))))\n-\n /* A C expression that defines the machine-dependent operand constraint letters\n    (`I', `J', `K', .. 'P') that specify particular ranges of integer values.\n    If C is one of those letters, the expression should check that VALUE, an"}, {"sha": "361cf0a65aed92d2a11d94b0b1fb0fecbe106baa", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=55710451f2f81d39b82472cfb3d7be7bd4ea98a2", "patch": "@@ -1526,13 +1526,25 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION) \\\n do {\t\t\t\t\t\t\t\t\t\\\n   if (CONST_OK_FOR_I (DELTA))\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\tadds r32 = %d, r32\\n\", (DELTA));\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"\\tadds r32 = \");\t\t\t\t\t\\\n+      fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, (DELTA));\t\t\t\\\n+      fprintf (FILE, \", r32\\n\");\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       if (CONST_OK_FOR_J (DELTA))\t\t\t\t\t\\\n-        fprintf (FILE, \"\\taddl r2 = %d, r0\\n\", (DELTA));\t\t\\\n+        {\t\t\t\t\t\t\t\t\\\n+          fprintf (FILE, \"\\taddl r2 = \");\t\t\t\t\\\n+          fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, (DELTA));\t\t\\\n+          fprintf (FILE, \", r0\\n\");\t\t\t\t\t\\\n+        }\t\t\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n-\tfprintf (FILE, \"\\tmovl r2 = %d\\n\", (DELTA));\t\t\t\\\n+        {\t\t\t\t\t\t\t\t\\\n+\t  fprintf (FILE, \"\\tmovl r2 = \");\t\t\t\t\\\n+\t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, (DELTA));\t\t\\\n+\t  fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n+        }\t\t\t\t\t\t\t\t\\\n       fprintf (FILE, \"\\t;;\\n\");\t\t\t\t\t\t\\\n       fprintf (FILE, \"\\tadd r32 = r2, r32\\n\");\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\"}, {"sha": "d478f9003067592c9b47386115f358e00832273d", "filename": "gcc/config/mcore/mcore-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Fmcore%2Fmcore-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Fmcore%2Fmcore-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-protos.h?ref=55710451f2f81d39b82472cfb3d7be7bd4ea98a2", "patch": "@@ -57,7 +57,7 @@ extern rtx arch_compare_op1;\n \n extern const char * mcore_output_bclri         \t\tPARAMS ((rtx, int));\n extern const char * mcore_output_bseti         \t\tPARAMS ((rtx, int));\n-extern const char * mcore_output_cmov          \t\tPARAMS ((rtx *, int, char *));\n+extern const char * mcore_output_cmov          \t\tPARAMS ((rtx *, int, const char *));\n extern char *       mcore_output_call          \t\tPARAMS ((rtx *, int));\n extern int          mcore_is_dead                \tPARAMS ((rtx, rtx));\n extern int          mcore_expand_insv            \tPARAMS ((rtx *));"}, {"sha": "aa52497915f7f5e81d9de81665683d4eb82dffce", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=55710451f2f81d39b82472cfb3d7be7bd4ea98a2", "patch": "@@ -971,7 +971,7 @@ const char *\n mcore_output_cmov (operands, cmp_t, test)\n      rtx operands[];\n      int cmp_t;\n-     char * test;\n+     const char * test;\n {\n   int load_value;\n   int adjust_value;"}, {"sha": "0b66920ad9cce8e636c1e4c399a942b6ab29dedc", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=55710451f2f81d39b82472cfb3d7be7bd4ea98a2", "patch": "@@ -1095,7 +1095,8 @@ extern enum reg_class reg_class_from_letter[];\n    ASM_DECLARE_OBJECT_NAME and then switch back to the original section\n    afterwards.  */\n #define SWITCH_SECTION_FUNCTION\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n+static void switch_to_section PARAMS ((enum in_section, tree));\t\\\n+static void\t\t\t\t\t\t\t\\\n switch_to_section (section, decl)\t\t\t\t\\\n      enum in_section section;\t\t\t\t\t\\\n      tree decl;\t\t\t\t\t\t\t\\"}, {"sha": "695ff2c3a8e15480385a70d3f4355f6e07b7b41c", "filename": "gcc/config/mn10200/mn10200.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fmn10200.h?ref=55710451f2f81d39b82472cfb3d7be7bd4ea98a2", "patch": "@@ -280,7 +280,7 @@ enum reg_class {\n    || (reg_renumber[regno] > 3 && reg_renumber[regno] < FIRST_PSEUDO_REGISTER))\n \n #define REGNO_OK_FOR_INDEX_P(regno) \\\n-  (((regno) >= 0 && regno < 4)\t\\\n+  (IN_RANGE ((regno), 0, 3) \\\n    || (reg_renumber[regno] >= 0 && reg_renumber[regno] < 4))\n \n \n@@ -639,7 +639,7 @@ struct cum_arg { int nbytes; };\n /* Nonzero if X is a hard reg that can be used as an index\n    or if it is a pseudo reg.  */\n #define REG_OK_FOR_INDEX_P(X)  \\\n-  (((REGNO (X) >= 0 && REGNO(X) <= 3) || REGNO (X) >= FIRST_PSEUDO_REGISTER))\n+  (IN_RANGE (REGNO (X), 0, 3) || REGNO (X) >= FIRST_PSEUDO_REGISTER)\n /* Nonzero if X is a hard reg that can be used as a base reg\n    or if it is a pseudo reg.  */\n #define REG_OK_FOR_BASE_P(X) \\"}, {"sha": "4594bb0576105867dc9b6d234b06e92eae56331f", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=55710451f2f81d39b82472cfb3d7be7bd4ea98a2", "patch": "@@ -342,7 +342,7 @@ enum reg_class {\n   (((regno) >= (min) && (regno) <= (max)) || (regno) >= FIRST_PSEUDO_REGISTER)\n #else\n # define REGNO_IN_RANGE_P(regno,min,max) \\\n-  (((regno) >= (min) && (regno) <= (max)) \\\n+  (IN_RANGE ((regno), (min), (max)) \\\n    || (reg_renumber \\\n        && reg_renumber[(regno)] >= (min) && reg_renumber[(regno)] <= (max)))\n #endif"}, {"sha": "b745a3acc0ada5c0dd364a3f08afa873b3bdba16", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=55710451f2f81d39b82472cfb3d7be7bd4ea98a2", "patch": "@@ -170,6 +170,8 @@ extern void sdata_section PARAMS ((void));\n extern void sdata2_section PARAMS ((void));\n extern void sbss_section PARAMS ((void));\n extern void private_data_section PARAMS ((void));\n+extern void read_only_data_section PARAMS ((void));\n+extern void read_only_private_data_section PARAMS ((void));\n extern int get_TOC_alias_set PARAMS ((void));\n extern int uses_TOC PARAMS ((void));\n extern void rs6000_emit_prologue PARAMS ((void));"}, {"sha": "47b97c73e7b83a9d43afeb879cbfeb3885d72a95", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=55710451f2f81d39b82472cfb3d7be7bd4ea98a2", "patch": "@@ -2500,7 +2500,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* This is how to output an assembler line for a numeric constant byte.  */\n \n #define ASM_OUTPUT_BYTE(FILE,VALUE)  \\\n-  fprintf (FILE, \"\\t.byte 0x%x\\n\", (VALUE))\n+  fprintf (FILE, \"\\t.byte 0x%x\\n\", (int)(VALUE))\n \n /* This is used by the definition of ASM_OUTPUT_ADDR_ELT in defaults.h.  */\n #define ASM_LONG (TARGET_32BIT ? \".long\" : DOUBLE_INT_ASM_OP)"}, {"sha": "0e871d415c3ea430a4bf98e39b7b3f4c11f36641", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=55710451f2f81d39b82472cfb3d7be7bd4ea98a2", "patch": "@@ -5648,7 +5648,7 @@ sh_asm_named_section (name, flags)\n static int\n sh_adjust_cost (insn, link, dep_insn, cost)\n      rtx insn;\n-     rtx link;\n+     rtx link ATTRIBUTE_UNUSED;\n      rtx dep_insn;\n      int cost;\n {"}, {"sha": "80a3a36e4cb24327edd8d1037d1205cf9e9140d2", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55710451f2f81d39b82472cfb3d7be7bd4ea98a2/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=55710451f2f81d39b82472cfb3d7be7bd4ea98a2", "patch": "@@ -483,7 +483,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define LAST_XD_REG  (FIRST_XD_REG + 7)\n \n #define GENERAL_REGISTER_P(REGNO) \\\n-  ((REGNO) >= FIRST_GENERAL_REG && (REGNO) <= LAST_GENERAL_REG)\n+  IN_RANGE ((REGNO), FIRST_GENERAL_REG, LAST_GENERAL_REG)\n \n #define GENERAL_OR_AP_REGISTER_P(REGNO) \\\n   (GENERAL_REGISTER_P (REGNO) || ((REGNO) == AP_REG))"}]}