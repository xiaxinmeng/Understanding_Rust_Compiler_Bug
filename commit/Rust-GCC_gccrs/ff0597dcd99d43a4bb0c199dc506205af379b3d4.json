{"sha": "ff0597dcd99d43a4bb0c199dc506205af379b3d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYwNTk3ZGNkOTlkNDNhNGJiMGMxOTlkYzUwNjIwNWFmMzc5YjNkNA==", "commit": {"author": {"name": "Andre Simoes Dias Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2020-04-07T14:38:14Z"}, "committer": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2020-04-07T14:44:52Z"}, "message": "arm: MVE: Fixes for pointers used in intrinsics for c++\n\nThis patch fixes the passing of some pointers to builtins that expect slightly\ndifferent types of pointers.  In C this didn't prove an issue, but when\ncompiling for C++ gcc complains.\n\ngcc/ChangeLog:\n2020-04-07  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* config/arm/arm_mve.h: Cast some pointers to expected types.", "tree": {"sha": "cc1d9070156b9d876332acbe24fb79787bffacd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc1d9070156b9d876332acbe24fb79787bffacd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff0597dcd99d43a4bb0c199dc506205af379b3d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff0597dcd99d43a4bb0c199dc506205af379b3d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff0597dcd99d43a4bb0c199dc506205af379b3d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff0597dcd99d43a4bb0c199dc506205af379b3d4/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6d7098d76149d245c11bcd591c4346047b94377", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6d7098d76149d245c11bcd591c4346047b94377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6d7098d76149d245c11bcd591c4346047b94377"}], "stats": {"total": 60, "additions": 32, "deletions": 28}, "files": [{"sha": "34d38779426e82c1873dae0aa2dd963ab862afff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff0597dcd99d43a4bb0c199dc506205af379b3d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff0597dcd99d43a4bb0c199dc506205af379b3d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff0597dcd99d43a4bb0c199dc506205af379b3d4", "patch": "@@ -1,3 +1,7 @@\n+2020-04-07  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/arm/arm_mve.h: Cast some pointers to expected types.\n+\n 2020-04-07  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/arm/arm_mve.h: Replace all uses of vuninitializedq_* with the"}, {"sha": "49c7fb95f17347d283c4df34a6875d686a3e3f09", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff0597dcd99d43a4bb0c199dc506205af379b3d4/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff0597dcd99d43a4bb0c199dc506205af379b3d4/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=ff0597dcd99d43a4bb0c199dc506205af379b3d4", "patch": "@@ -12897,56 +12897,56 @@ __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrdq_scatter_offset_p_s64 (int64_t * __base, uint64x2_t __offset, int64x2_t __value, mve_pred16_t __p)\n {\n-  __builtin_mve_vstrdq_scatter_offset_p_sv2di (__base, __offset, __value, __p);\n+  __builtin_mve_vstrdq_scatter_offset_p_sv2di ((__builtin_neon_di *) __base, __offset, __value, __p);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrdq_scatter_offset_p_u64 (uint64_t * __base, uint64x2_t __offset, uint64x2_t __value, mve_pred16_t __p)\n {\n-  __builtin_mve_vstrdq_scatter_offset_p_uv2di (__base, __offset, __value, __p);\n+  __builtin_mve_vstrdq_scatter_offset_p_uv2di ((__builtin_neon_di *) __base, __offset, __value, __p);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrdq_scatter_offset_s64 (int64_t * __base, uint64x2_t __offset, int64x2_t __value)\n {\n-  __builtin_mve_vstrdq_scatter_offset_sv2di (__base, __offset, __value);\n+  __builtin_mve_vstrdq_scatter_offset_sv2di ((__builtin_neon_di *) __base, __offset, __value);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrdq_scatter_offset_u64 (uint64_t * __base, uint64x2_t __offset, uint64x2_t __value)\n {\n-  __builtin_mve_vstrdq_scatter_offset_uv2di (__base, __offset, __value);\n+  __builtin_mve_vstrdq_scatter_offset_uv2di ((__builtin_neon_di *) __base, __offset, __value);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrdq_scatter_shifted_offset_p_s64 (int64_t * __base, uint64x2_t __offset, int64x2_t __value, mve_pred16_t __p)\n {\n-  __builtin_mve_vstrdq_scatter_shifted_offset_p_sv2di (__base, __offset, __value, __p);\n+  __builtin_mve_vstrdq_scatter_shifted_offset_p_sv2di ((__builtin_neon_di *) __base, __offset, __value, __p);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrdq_scatter_shifted_offset_p_u64 (uint64_t * __base, uint64x2_t __offset, uint64x2_t __value, mve_pred16_t __p)\n {\n-  __builtin_mve_vstrdq_scatter_shifted_offset_p_uv2di (__base, __offset, __value, __p);\n+  __builtin_mve_vstrdq_scatter_shifted_offset_p_uv2di ((__builtin_neon_di *) __base, __offset, __value, __p);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrdq_scatter_shifted_offset_s64 (int64_t * __base, uint64x2_t __offset, int64x2_t __value)\n {\n-  __builtin_mve_vstrdq_scatter_shifted_offset_sv2di (__base, __offset, __value);\n+  __builtin_mve_vstrdq_scatter_shifted_offset_sv2di ((__builtin_neon_di *) __base, __offset, __value);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrdq_scatter_shifted_offset_u64 (uint64_t * __base, uint64x2_t __offset, uint64x2_t __value)\n {\n-  __builtin_mve_vstrdq_scatter_shifted_offset_uv2di (__base, __offset, __value);\n+  __builtin_mve_vstrdq_scatter_shifted_offset_uv2di ((__builtin_neon_di *) __base, __offset, __value);\n }\n \n __extension__ extern __inline void\n@@ -18968,14 +18968,14 @@ __extension__ extern __inline float16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vldrhq_gather_shifted_offset_f16 (float16_t const * __base, uint16x8_t __offset)\n {\n-  return __builtin_mve_vldrhq_gather_shifted_offset_fv8hf (__base, __offset);\n+  return __builtin_mve_vldrhq_gather_shifted_offset_fv8hf ((__builtin_neon_hi *) __base, __offset);\n }\n \n __extension__ extern __inline float16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vldrhq_gather_shifted_offset_z_f16 (float16_t const * __base, uint16x8_t __offset, mve_pred16_t __p)\n {\n-  return __builtin_mve_vldrhq_gather_shifted_offset_z_fv8hf (__base, __offset, __p);\n+  return __builtin_mve_vldrhq_gather_shifted_offset_z_fv8hf ((__builtin_neon_hi *) __base, __offset, __p);\n }\n \n __extension__ extern __inline float32x4_t\n@@ -19010,84 +19010,84 @@ __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vldrwq_gather_shifted_offset_f32 (float32_t const * __base, uint32x4_t __offset)\n {\n-  return __builtin_mve_vldrwq_gather_shifted_offset_fv4sf (__base, __offset);\n+  return __builtin_mve_vldrwq_gather_shifted_offset_fv4sf ((__builtin_neon_si *) __base, __offset);\n }\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vldrwq_gather_shifted_offset_z_f32 (float32_t const * __base, uint32x4_t __offset, mve_pred16_t __p)\n {\n-  return __builtin_mve_vldrwq_gather_shifted_offset_z_fv4sf (__base, __offset, __p);\n+  return __builtin_mve_vldrwq_gather_shifted_offset_z_fv4sf ((__builtin_neon_si *) __base, __offset, __p);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrwq_p_f32 (float32_t * __addr, float32x4_t __value, mve_pred16_t __p)\n {\n-  __builtin_mve_vstrwq_p_fv4sf (__addr, __value, __p);\n+  __builtin_mve_vstrwq_p_fv4sf ((__builtin_neon_si *) __addr, __value, __p);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrwq_f32 (float32_t * __addr, float32x4_t __value)\n {\n-  __builtin_mve_vstrwq_fv4sf (__addr, __value);\n+  __builtin_mve_vstrwq_fv4sf ((__builtin_neon_si *) __addr, __value);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vst1q_f32 (float32_t * __addr, float32x4_t __value)\n {\n-  __builtin_mve_vst1q_fv4sf (__addr, __value);\n+  __builtin_mve_vst1q_fv4sf ((__builtin_neon_si *) __addr, __value);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vst1q_f16 (float16_t * __addr, float16x8_t __value)\n {\n-  __builtin_mve_vst1q_fv8hf (__addr, __value);\n+  __builtin_mve_vst1q_fv8hf ((__builtin_neon_hi *) __addr, __value);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrhq_f16 (float16_t * __addr, float16x8_t __value)\n {\n-  __builtin_mve_vstrhq_fv8hf (__addr, __value);\n+  __builtin_mve_vstrhq_fv8hf ((__builtin_neon_hi *) __addr, __value);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrhq_p_f16 (float16_t * __addr, float16x8_t __value, mve_pred16_t __p)\n {\n-  __builtin_mve_vstrhq_p_fv8hf (__addr, __value, __p);\n+  __builtin_mve_vstrhq_p_fv8hf ((__builtin_neon_hi *) __addr, __value, __p);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrhq_scatter_offset_f16 (float16_t * __base, uint16x8_t __offset, float16x8_t __value)\n {\n-  __builtin_mve_vstrhq_scatter_offset_fv8hf (__base, __offset, __value);\n+  __builtin_mve_vstrhq_scatter_offset_fv8hf ((__builtin_neon_hi *) __base, __offset, __value);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrhq_scatter_offset_p_f16 (float16_t * __base, uint16x8_t __offset, float16x8_t __value, mve_pred16_t __p)\n {\n-  __builtin_mve_vstrhq_scatter_offset_p_fv8hf (__base, __offset, __value, __p);\n+  __builtin_mve_vstrhq_scatter_offset_p_fv8hf ((__builtin_neon_hi *) __base, __offset, __value, __p);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrhq_scatter_shifted_offset_f16 (float16_t * __base, uint16x8_t __offset, float16x8_t __value)\n {\n-  __builtin_mve_vstrhq_scatter_shifted_offset_fv8hf (__base, __offset, __value);\n+  __builtin_mve_vstrhq_scatter_shifted_offset_fv8hf ((__builtin_neon_hi *) __base, __offset, __value);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrhq_scatter_shifted_offset_p_f16 (float16_t * __base, uint16x8_t __offset, float16x8_t __value, mve_pred16_t __p)\n {\n-  __builtin_mve_vstrhq_scatter_shifted_offset_p_fv8hf (__base, __offset, __value, __p);\n+  __builtin_mve_vstrhq_scatter_shifted_offset_p_fv8hf ((__builtin_neon_hi *) __base, __offset, __value, __p);\n }\n \n __extension__ extern __inline void\n@@ -19108,28 +19108,28 @@ __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrwq_scatter_offset_f32 (float32_t * __base, uint32x4_t __offset, float32x4_t __value)\n {\n-  __builtin_mve_vstrwq_scatter_offset_fv4sf (__base, __offset, __value);\n+  __builtin_mve_vstrwq_scatter_offset_fv4sf ((__builtin_neon_si *) __base, __offset, __value);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrwq_scatter_offset_p_f32 (float32_t * __base, uint32x4_t __offset, float32x4_t __value, mve_pred16_t __p)\n {\n-  __builtin_mve_vstrwq_scatter_offset_p_fv4sf (__base, __offset, __value, __p);\n+  __builtin_mve_vstrwq_scatter_offset_p_fv4sf ((__builtin_neon_si *) __base, __offset, __value, __p);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrwq_scatter_shifted_offset_f32 (float32_t * __base, uint32x4_t __offset, float32x4_t __value)\n {\n-  __builtin_mve_vstrwq_scatter_shifted_offset_fv4sf (__base, __offset, __value);\n+  __builtin_mve_vstrwq_scatter_shifted_offset_fv4sf ((__builtin_neon_si *) __base, __offset, __value);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vstrwq_scatter_shifted_offset_p_f32 (float32_t * __base, uint32x4_t __offset, float32x4_t __value, mve_pred16_t __p)\n {\n-  __builtin_mve_vstrwq_scatter_shifted_offset_p_fv4sf (__base, __offset, __value, __p);\n+  __builtin_mve_vstrwq_scatter_shifted_offset_p_fv4sf ((__builtin_neon_si *) __base, __offset, __value, __p);\n }\n \n __extension__ extern __inline float16x8_t\n@@ -20139,7 +20139,7 @@ __extension__ extern __inline float16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vld1q_z_f16 (float16_t const *__base, mve_pred16_t __p)\n {\n-  return vldrhq_z_f16 ( __base, __p);\n+  return vldrhq_z_f16 (__base, __p);\n }\n \n __extension__ extern __inline void\n@@ -20180,7 +20180,7 @@ __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vld1q_z_f32 (float32_t const *__base, mve_pred16_t __p)\n {\n-  return vldrwq_z_f32 ( __base, __p);\n+  return vldrwq_z_f32 (__base, __p);\n }\n \n __extension__ extern __inline void"}]}