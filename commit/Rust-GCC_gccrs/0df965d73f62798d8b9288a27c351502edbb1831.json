{"sha": "0df965d73f62798d8b9288a27c351502edbb1831", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRmOTY1ZDczZjYyNzk4ZDhiOTI4OGEyN2MzNTE1MDJlZGJiMTgzMQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-06-17T20:55:12Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-06-17T20:55:12Z"}, "message": "cris.h (TARGET_ELF): Remove.\n\n\t* config/cris/cris.h (TARGET_ELF): Remove.\n\t(FORCE_EH_FRAME_INFO_IN_DATA_SECTION): Remove.\n\t(CRIS_ASM_OUTPUT_ALIGNED_DECL_COMMON): Simpify using TARGET_ELF==1.\n\t(LOCAL_LABEL_PREFIX): Likewise.\n\t* config/cris/cris.c (cris_target_asm_named_section): Remove.\n\t(cris_option_override): Simpify using TARGET_ELF==1.\n\t(cris_file_start): Likewise.\n\t* config/cris/cris-protos.h (cris_target_asm_named_section): Remove.\n\nFrom-SVN: r188709", "tree": {"sha": "84399d2350cb8fc41a40bbfa4a7fb28fb5ac4994", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84399d2350cb8fc41a40bbfa4a7fb28fb5ac4994"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0df965d73f62798d8b9288a27c351502edbb1831", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0df965d73f62798d8b9288a27c351502edbb1831", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0df965d73f62798d8b9288a27c351502edbb1831", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0df965d73f62798d8b9288a27c351502edbb1831/comments", "author": null, "committer": null, "parents": [{"sha": "9a575e05242936ce1e72161bfa6e971ca58ab6c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a575e05242936ce1e72161bfa6e971ca58ab6c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a575e05242936ce1e72161bfa6e971ca58ab6c1"}], "stats": {"total": 86, "additions": 25, "deletions": 61}, "files": [{"sha": "d1ce2271b60269dc661c4fab2c780791d69f412d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df965d73f62798d8b9288a27c351502edbb1831/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df965d73f62798d8b9288a27c351502edbb1831/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0df965d73f62798d8b9288a27c351502edbb1831", "patch": "@@ -1,3 +1,14 @@\n+2012-06-17  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* config/cris/cris.h (TARGET_ELF): Remove.\n+\t(FORCE_EH_FRAME_INFO_IN_DATA_SECTION): Remove.\n+\t(CRIS_ASM_OUTPUT_ALIGNED_DECL_COMMON): Simpify using TARGET_ELF==1.\n+\t(LOCAL_LABEL_PREFIX): Likewise.\n+\t* config/cris/cris.c (cris_target_asm_named_section): Remove.\n+\t(cris_option_override): Simpify using TARGET_ELF==1.\n+\t(cris_file_start): Likewise.\n+\t* config/cris/cris-protos.h (cris_target_asm_named_section): Remove.\n+\n 2012-06-17  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/sse.md (vcvtph2ps): Fix vec_select selector."}, {"sha": "b8d1c78db6d9c6970e9d64a290220f88309683dc", "filename": "gcc/config/cris/cris-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df965d73f62798d8b9288a27c351502edbb1831/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df965d73f62798d8b9288a27c351502edbb1831/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris-protos.h?ref=0df965d73f62798d8b9288a27c351502edbb1831", "patch": "@@ -52,7 +52,6 @@ extern void cris_order_for_addsi3 (rtx *, int);\n extern void cris_emit_trap_for_misalignment (rtx);\n #endif /* RTX_CODE */\n extern void cris_asm_output_label_ref (FILE *, char *);\n-extern void cris_target_asm_named_section (const char *, unsigned int, tree);\n extern void cris_expand_prologue (void);\n extern void cris_expand_epilogue (void);\n extern void cris_expand_return (bool);"}, {"sha": "3c6fb080ed33d8904c982a744a7127d1e851176f", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df965d73f62798d8b9288a27c351502edbb1831/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df965d73f62798d8b9288a27c351502edbb1831/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=0df965d73f62798d8b9288a27c351502edbb1831", "patch": "@@ -2359,19 +2359,6 @@ cris_reg_overlap_mentioned_p (rtx x, rtx in)\n   return reg_overlap_mentioned_p (x, in);\n }\n \n-/* The TARGET_ASM_NAMED_SECTION worker.\n-   We just dispatch to the functions for ELF and a.out.  */\n-\n-void\n-cris_target_asm_named_section (const char *name, unsigned int flags,\n-\t\t\t       tree decl)\n-{\n-  if (! TARGET_ELF)\n-    default_no_named_section (name, flags, decl);\n-  else\n-    default_elf_asm_named_section (name, flags, decl);\n-}\n-\n /* Return TRUE iff X is a CONST valid for e.g. indexing.\n    ANY_OPERAND is 0 if X is in a CALL_P insn or movsi, 1\n    elsewhere.  */\n@@ -2634,12 +2621,6 @@ cris_option_override (void)\n       flag_no_function_cse = 1;\n     }\n \n-  if (write_symbols == DWARF2_DEBUG && ! TARGET_ELF)\n-    {\n-      warning (0, \"that particular -g option is invalid with -maout and -melinux\");\n-      write_symbols = DBX_DEBUG;\n-    }\n-\n   /* Set the per-function-data initializer.  */\n   init_machine_status = cris_init_machine_status;\n }\n@@ -2696,16 +2677,13 @@ cris_asm_output_mi_thunk (FILE *stream,\n \n    NO_APP *only at file start* means faster assembly.  It also means\n    comments are not allowed.  In some cases comments will be output\n-   for debugging purposes.  Make sure they are allowed then.\n-\n-   We want a .file directive only if TARGET_ELF.  */\n+   for debugging purposes.  Make sure they are allowed then.  */\n static void\n cris_file_start (void)\n {\n   /* These expressions can vary at run time, so we cannot put\n      them into TARGET_INITIALIZER.  */\n   targetm.asm_file_start_app_off = !(TARGET_PDEBUG || flag_print_asm_name);\n-  targetm.asm_file_start_file_directive = TARGET_ELF;\n \n   default_file_start ();\n }"}, {"sha": "4e335314f3eda6e7a6b7f4415301a353b3e88521", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 13, "deletions": 37, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df965d73f62798d8b9288a27c351502edbb1831/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df965d73f62798d8b9288a27c351502edbb1831/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=0df965d73f62798d8b9288a27c351502edbb1831", "patch": "@@ -33,9 +33,9 @@ along with GCC; see the file COPYING3.  If not see\n    the section-comment is present.  */\n \n /* Note that other header files (e.g. config/elfos.h, config/linux.h,\n-   config/cris/linux.h and config/cris/aout.h) are responsible for lots of\n-   settings not repeated below.  This file contains general CRIS\n-   definitions and definitions for the cris-*-elf subtarget.  */\n+   and config/cris/linux.h) are responsible for lots of settings not\n+   repeated below.  This file contains general CRIS definitions\n+   and definitions for the cris-*-elf subtarget.  */\n \n /* We don't want to use gcc_assert for everything, as that can be\n    compiled out.  */\n@@ -92,8 +92,7 @@ extern int cris_cpu_version;\n \n /* Node: Driver */\n \n-/* Also provide canonical vN definitions when user specifies an alias.\n-   Note that -melf overrides -maout.  */\n+/* Also provide canonical vN definitions when user specifies an alias.  */\n \n #define CPP_SPEC \\\n  \"%{mtune=*:-D__tune_%* %{mtune=v*:-D__CRIS_arch_tune=%*}\\\n@@ -204,11 +203,7 @@ extern int cris_cpu_version;\n    \"emulation\" unless a linker script is provided (-T*), but I don't know\n    how to do that if either of -Ttext, -Tdata or -Tbss is given but no\n    linker script, as is usually the case.  Leave it to the user for the\n-   time being.\n-\n-   Note that -melf overrides -maout except that a.out-compiled libraries\n-   are linked in (multilibbing).  We'd need some %s-variant that\n-   checked for existence of some specific file.  */\n+   time being.  */\n #undef LINK_SPEC\n #define LINK_SPEC \\\n  \"%{v:--verbose}\\\n@@ -266,9 +261,6 @@ extern int cris_cpu_version;\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-/* Previously controlled by target_flags.  */\n-#define TARGET_ELF 1\n-\n /* Previously controlled by target_flags.  Note that this is *not* set\n    for -melinux.  */\n #define TARGET_LINUX 0\n@@ -825,8 +817,6 @@ struct cum_args {int regs;};\n \n #define DATA_SECTION_ASM_OP \"\\t.data\"\n \n-#define FORCE_EH_FRAME_INFO_IN_DATA_SECTION (! TARGET_ELF)\n-\n /* The jump table is immediately connected to the preceding insn.  */\n #define JUMP_TABLES_IN_TEXT_SECTION 1\n \n@@ -878,7 +868,7 @@ enum cris_pic_symbol_type\n    are used on the object files.  Since \".global ... .lcomm ...\" works, we\n    use that.  Use .._ALIGNED_COMMON, since gcc whines when we only have\n    ..._COMMON, and we prefer to whine ourselves; BIGGEST_ALIGNMENT is not\n-   the one to check.  This done for a.out only.  */\n+   the one to check.  */\n /* FIXME: I suspect a bug in gcc with alignment.  Do not warn until\n    investigated; it mucks up the testsuite results.  */\n #define CRIS_ASM_OUTPUT_ALIGNED_DECL_COMMON(FILE, DECL, NAME, SIZE, ALIGN, LOCAL) \\\n@@ -893,29 +883,15 @@ enum cris_pic_symbol_type\n       else if (align_ < 1)\t\t\t\t\t\t\\\n \talign_ = 1;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      if (TARGET_ELF)\t\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  if (LOCAL)\t\t\t\t\t\t\t\\\n-\t    {\t\t\t\t\t\t\t\t\\\n-\t      fprintf ((FILE), \"%s\", LOCAL_ASM_OP);\t\t\t\\\n-\t      assemble_name ((FILE), (NAME));\t\t\t\t\\\n-\t      fprintf ((FILE), \"\\n\");\t\t\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\t\\\n-\t  fprintf ((FILE), \"%s\", COMMON_ASM_OP);\t\t\t\\\n-\t  assemble_name ((FILE), (NAME));\t\t\t\t\\\n-\t  fprintf ((FILE), \",%u,%u\\n\", (int)(SIZE), align_);\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n+      if (LOCAL)\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  /* We can't tell a one-only or weak COMM from a \"global\t\\\n-\t     COMM\" so just make all non-locals weak.  */\t\t\\\n-\t  if (! (LOCAL))\t\t\t\t\t\t\\\n-\t    ASM_WEAKEN_LABEL (FILE, NAME);\t\t\t\t\\\n-\t  fputs (\"\\t.lcomm \", (FILE));\t\t\t\t\t\\\n+\t  fprintf ((FILE), \"%s\", LOCAL_ASM_OP);\t\t\t\t\\\n \t  assemble_name ((FILE), (NAME));\t\t\t\t\\\n-\t  fprintf ((FILE), \",%u\\n\",\t\t\t\t\t\\\n-\t\t   ((int)(SIZE) + (align_ - 1)) & ~(align_ - 1));\t\\\n+\t  fprintf ((FILE), \"\\n\");\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n+      fprintf ((FILE), \"%s\", COMMON_ASM_OP);\t\t\t\t\\\n+      assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n+      fprintf ((FILE), \",%u,%u\\n\", (int)(SIZE), align_);\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n@@ -963,7 +939,7 @@ enum cris_pic_symbol_type\n #define DBR_OUTPUT_SEQEND(FILE) \\\n   fprintf (FILE, \"\\n\")\n \n-#define LOCAL_LABEL_PREFIX (TARGET_ELF ? \".\" : \"\")\n+#define LOCAL_LABEL_PREFIX \".\"\n \n /* cppinit.c initializes a const array from this, so it must be constant,\n    can't have it different based on options.  Luckily, the prefix is"}]}