{"sha": "596341c741a4a746497a1da8322fce0ad625e26b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk2MzQxYzc0MWE0YTc0NjQ5N2ExZGE4MzIyZmNlMGFkNjI1ZTI2Yg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-07-03T12:42:23Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-07-03T12:42:23Z"}, "message": "Rename SINGE_VALUE to TOPN_VALUES counters.\n\n2019-07-03  Martin Liska  <mliska@suse.cz>\n\n\t* gcov-counter.def (GCOV_COUNTER_V_SINGLE): Remove.\n\t(GCOV_COUNTER_V_TOPN): New.\n\t(GCOV_COUNTER_V_INDIR): Use _topn.\n\t* gcov-io.h (GCOV_DISK_SINGLE_VALUES): Remove.\n\t(GCOV_TOPN_VALUES): New.\n\t(GCOV_SINGLE_VALUE_COUNTERS): Remove.\n\t(GCOV_TOPN_VALUES_COUNTERS): New.\n\t* profile.c (instrument_values): Use HIST_TYPE_TOPN_VALUES.\n\t* tree-profile.c:\n\t(gimple_init_gcov_profiler): Rename variables from one_value\n\tto topn_values.\n\t(gimple_gen_one_value_profiler): Remove.\n\t(gimple_gen_topn_values_profiler): New function.\n\t* value-prof.c (dump_histogram_value): Use TOPN_VALUES\n\tnames instead of SINGLE_VALUE.\n\t(stream_out_histogram_value): Likewise.\n\t(stream_in_histogram_value): Likewise.\n\t(get_most_common_single_value): Likewise.\n\t(gimple_divmod_fixed_value_transform): Likewise.\n\t(gimple_stringops_transform): Likewise.\n\t(gimple_divmod_values_to_profile): Likewise.\n\t(gimple_stringops_values_to_profile): Likewise.\n\t(gimple_find_values_to_profile): Likewise.\n\t* value-prof.h (enum hist_type): Rename to TOPN.\n\t(gimple_gen_one_value_profiler): Remove.\n\t(gimple_gen_topn_values_profiler): New.\n2019-07-03  Martin Liska  <mliska@suse.cz>\n\n\t* Makefile.in: Use topn_values instead of one_value names.\n\t* libgcov-merge.c (__gcov_merge_single): Move to ...\n\t(__gcov_merge_topn): ... this.\n\t(merge_single_value_set): Move to ...\n\t(merge_topn_values_set): ... this.\n\t* libgcov-profiler.c (__gcov_one_value_profiler_body): Move to\n\t...\n\t(__gcov_topn_values_profiler_body): ... this.\n\t(__gcov_one_value_profiler_v2): Move to ...\n\t(__gcov_topn_values_profiler): ... this.\n\t(__gcov_one_value_profiler_v2_atomic): Move to ...\n\t(__gcov_topn_values_profiler_atomic): ... this.\n\t(__gcov_indirect_call_profiler_v4): Remove.\n\t* libgcov-util.c (__gcov_single_counter_op): Move to ...\n\t(__gcov_topn_counter_op): ... this.\n\t* libgcov.h (L_gcov_merge_single): Remove.\n\t(L_gcov_merge_topn): New.\n\t(__gcov_merge_single): Remove.\n\t(__gcov_merge_topn): New.\n\t(__gcov_one_value_profiler_v2): Move to ..\n\t(__gcov_topn_values_profiler): ... this.\n\t(__gcov_one_value_profiler_v2_atomic): Move to ...\n\t(__gcov_topn_values_profiler_atomic): ... this.\n\nFrom-SVN: r273005", "tree": {"sha": "2161db916022c10dfedcbf3106d2e14523a81620", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2161db916022c10dfedcbf3106d2e14523a81620"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/596341c741a4a746497a1da8322fce0ad625e26b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/596341c741a4a746497a1da8322fce0ad625e26b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/596341c741a4a746497a1da8322fce0ad625e26b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/596341c741a4a746497a1da8322fce0ad625e26b/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1b309ca5edddd6bf8051993876df5f123394bc79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b309ca5edddd6bf8051993876df5f123394bc79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b309ca5edddd6bf8051993876df5f123394bc79"}], "stats": {"total": 224, "additions": 135, "deletions": 89}, "files": [{"sha": "579463e0a682bc916740a6f50dee37ec1dd1ce33", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596341c741a4a746497a1da8322fce0ad625e26b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596341c741a4a746497a1da8322fce0ad625e26b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=596341c741a4a746497a1da8322fce0ad625e26b", "patch": "@@ -1,3 +1,32 @@\n+2019-07-03  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcov-counter.def (GCOV_COUNTER_V_SINGLE): Remove.\n+\t(GCOV_COUNTER_V_TOPN): New.\n+\t(GCOV_COUNTER_V_INDIR): Use _topn.\n+\t* gcov-io.h (GCOV_DISK_SINGLE_VALUES): Remove.\n+\t(GCOV_TOPN_VALUES): New.\n+\t(GCOV_SINGLE_VALUE_COUNTERS): Remove.\n+\t(GCOV_TOPN_VALUES_COUNTERS): New.\n+\t* profile.c (instrument_values): Use HIST_TYPE_TOPN_VALUES.\n+\t* tree-profile.c:\n+\t(gimple_init_gcov_profiler): Rename variables from one_value\n+\tto topn_values.\n+\t(gimple_gen_one_value_profiler): Remove.\n+\t(gimple_gen_topn_values_profiler): New function.\n+\t* value-prof.c (dump_histogram_value): Use TOPN_VALUES\n+\tnames instead of SINGLE_VALUE.\n+\t(stream_out_histogram_value): Likewise.\n+\t(stream_in_histogram_value): Likewise.\n+\t(get_most_common_single_value): Likewise.\n+\t(gimple_divmod_fixed_value_transform): Likewise.\n+\t(gimple_stringops_transform): Likewise.\n+\t(gimple_divmod_values_to_profile): Likewise.\n+\t(gimple_stringops_values_to_profile): Likewise.\n+\t(gimple_find_values_to_profile): Likewise.\n+\t* value-prof.h (enum hist_type): Rename to TOPN.\n+\t(gimple_gen_one_value_profiler): Remove.\n+\t(gimple_gen_topn_values_profiler): New.\n+\n 2019-07-03  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* dwarf2out.c (add_scalar_info): Add back refererence to existing DIE"}, {"sha": "1a2cbb27b31d98d8467688fde53d1f7eb8250fd3", "filename": "gcc/gcov-counter.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596341c741a4a746497a1da8322fce0ad625e26b/gcc%2Fgcov-counter.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596341c741a4a746497a1da8322fce0ad625e26b/gcc%2Fgcov-counter.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-counter.def?ref=596341c741a4a746497a1da8322fce0ad625e26b", "patch": "@@ -36,10 +36,10 @@ DEF_GCOV_COUNTER(GCOV_COUNTER_V_INTERVAL, \"interval\", _add)\n DEF_GCOV_COUNTER(GCOV_COUNTER_V_POW2, \"pow2\", _add)\n \n /* The most common value of expression.  */\n-DEF_GCOV_COUNTER(GCOV_COUNTER_V_SINGLE, \"single\", _single)\n+DEF_GCOV_COUNTER(GCOV_COUNTER_V_TOPN, \"topn\", _topn)\n \n /* The most common indirect address.  */\n-DEF_GCOV_COUNTER(GCOV_COUNTER_V_INDIR, \"indirect_call\", _single)\n+DEF_GCOV_COUNTER(GCOV_COUNTER_V_INDIR, \"indirect_call\", _topn)\n \n /* Compute average value passed to the counter.  */\n DEF_GCOV_COUNTER(GCOV_COUNTER_AVERAGE, \"average\", _add)"}, {"sha": "7df578f8538a9ecfa98e5e8f1efd081f95107c28", "filename": "gcc/gcov-io.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596341c741a4a746497a1da8322fce0ad625e26b/gcc%2Fgcov-io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596341c741a4a746497a1da8322fce0ad625e26b/gcc%2Fgcov-io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.h?ref=596341c741a4a746497a1da8322fce0ad625e26b", "patch": "@@ -266,12 +266,11 @@ GCOV_COUNTERS\n #define GCOV_N_VALUE_COUNTERS \\\n   (GCOV_LAST_VALUE_COUNTER - GCOV_FIRST_VALUE_COUNTER + 1)\n \n-/* Number of single value histogram values that live\n-   on disk representation.  */\n-#define GCOV_DISK_SINGLE_VALUES 4\n+/* Number of top N value histogram.  */\n+#define GCOV_TOPN_VALUES 4\n \n /* Total number of single value counters.  */\n-#define GCOV_SINGLE_VALUE_COUNTERS (2 * GCOV_DISK_SINGLE_VALUES + 1)\n+#define GCOV_TOPN_VALUES_COUNTERS (2 * GCOV_TOPN_VALUES + 1)\n \n /* Convert a counter index to a tag.  */\n #define GCOV_TAG_FOR_COUNTER(COUNT)\t\t\t\t\\"}, {"sha": "e3f8c5542bec479d39bedc528afcf81ac1bfeef3", "filename": "gcc/profile.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596341c741a4a746497a1da8322fce0ad625e26b/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596341c741a4a746497a1da8322fce0ad625e26b/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=596341c741a4a746497a1da8322fce0ad625e26b", "patch": "@@ -167,8 +167,8 @@ instrument_values (histogram_values values)\n \t  gimple_gen_pow2_profiler (hist, t, 0);\n \t  break;\n \n-\tcase HIST_TYPE_SINGLE_VALUE:\n-\t  gimple_gen_one_value_profiler (hist, t, 0);\n+\tcase HIST_TYPE_TOPN_VALUES:\n+\t  gimple_gen_topn_values_profiler (hist, t, 0);\n \t  break;\n \n  \tcase HIST_TYPE_INDIR_CALL:"}, {"sha": "554a8c984194233f49c27f2a804450420fe323c2", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596341c741a4a746497a1da8322fce0ad625e26b/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596341c741a4a746497a1da8322fce0ad625e26b/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=596341c741a4a746497a1da8322fce0ad625e26b", "patch": "@@ -60,7 +60,7 @@ along with GCC; see the file COPYING3.  If not see\n static GTY(()) tree gcov_type_node;\n static GTY(()) tree tree_interval_profiler_fn;\n static GTY(()) tree tree_pow2_profiler_fn;\n-static GTY(()) tree tree_one_value_profiler_fn;\n+static GTY(()) tree tree_topn_values_profiler_fn;\n static GTY(()) tree tree_indirect_call_profiler_fn;\n static GTY(()) tree tree_average_profiler_fn;\n static GTY(()) tree tree_ior_profiler_fn;\n@@ -117,7 +117,7 @@ gimple_init_gcov_profiler (void)\n {\n   tree interval_profiler_fn_type;\n   tree pow2_profiler_fn_type;\n-  tree one_value_profiler_fn_type;\n+  tree topn_values_profiler_fn_type;\n   tree gcov_type_ptr;\n   tree ic_profiler_fn_type;\n   tree average_profiler_fn_type;\n@@ -161,18 +161,18 @@ gimple_init_gcov_profiler (void)\n \t\t     DECL_ATTRIBUTES (tree_pow2_profiler_fn));\n \n       /* void (*) (gcov_type *, gcov_type)  */\n-      one_value_profiler_fn_type\n+      topn_values_profiler_fn_type\n \t      = build_function_type_list (void_type_node,\n \t\t\t\t\t  gcov_type_ptr, gcov_type_node,\n \t\t\t\t\t  NULL_TREE);\n-      fn_name = concat (\"__gcov_one_value_profiler_v2\", fn_suffix, NULL);\n-      tree_one_value_profiler_fn = build_fn_decl (fn_name,\n-\t\t\t\t\t\t  one_value_profiler_fn_type);\n+      fn_name = concat (\"__gcov_topn_values_profiler\", fn_suffix, NULL);\n+      tree_topn_values_profiler_fn\n+\t= build_fn_decl (fn_name, topn_values_profiler_fn_type);\n \n-      TREE_NOTHROW (tree_one_value_profiler_fn) = 1;\n-      DECL_ATTRIBUTES (tree_one_value_profiler_fn)\n+      TREE_NOTHROW (tree_topn_values_profiler_fn) = 1;\n+      DECL_ATTRIBUTES (tree_topn_values_profiler_fn)\n \t= tree_cons (get_identifier (\"leaf\"), NULL,\n-\t\t     DECL_ATTRIBUTES (tree_one_value_profiler_fn));\n+\t\t     DECL_ATTRIBUTES (tree_topn_values_profiler_fn));\n \n       init_ic_make_global_vars ();\n \n@@ -226,7 +226,7 @@ gimple_init_gcov_profiler (void)\n          late, we need to initialize them by hand.  */\n       DECL_ASSEMBLER_NAME (tree_interval_profiler_fn);\n       DECL_ASSEMBLER_NAME (tree_pow2_profiler_fn);\n-      DECL_ASSEMBLER_NAME (tree_one_value_profiler_fn);\n+      DECL_ASSEMBLER_NAME (tree_topn_values_profiler_fn);\n       DECL_ASSEMBLER_NAME (tree_indirect_call_profiler_fn);\n       DECL_ASSEMBLER_NAME (tree_average_profiler_fn);\n       DECL_ASSEMBLER_NAME (tree_ior_profiler_fn);\n@@ -334,12 +334,13 @@ gimple_gen_pow2_profiler (histogram_value value, unsigned tag, unsigned base)\n   gsi_insert_before (&gsi, call, GSI_NEW_STMT);\n }\n \n-/* Output instructions as GIMPLE trees for code to find the most common value.\n-   VALUE is the expression whose value is profiled.  TAG is the tag of the\n-   section for counters, BASE is offset of the counter position.  */\n+/* Output instructions as GIMPLE trees for code to find the most N common\n+   values.  VALUE is the expression whose value is profiled.  TAG is the tag\n+   of the section for counters, BASE is offset of the counter position.  */\n \n void\n-gimple_gen_one_value_profiler (histogram_value value, unsigned tag, unsigned base)\n+gimple_gen_topn_values_profiler (histogram_value value, unsigned tag,\n+\t\t\t\t unsigned base)\n {\n   gimple *stmt = value->hvalue.stmt;\n   gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n@@ -350,7 +351,7 @@ gimple_gen_one_value_profiler (histogram_value value, unsigned tag, unsigned bas\n   ref_ptr = force_gimple_operand_gsi (&gsi, ref_ptr,\n \t\t\t\t      true, NULL_TREE, true, GSI_SAME_STMT);\n   val = prepare_instrumented_value (&gsi, value);\n-  call = gimple_build_call (tree_one_value_profiler_fn, 2, ref_ptr, val);\n+  call = gimple_build_call (tree_topn_values_profiler_fn, 2, ref_ptr, val);\n   gsi_insert_before (&gsi, call, GSI_NEW_STMT);\n }\n "}, {"sha": "66c4bbaad5c7b6682988ff7609c14f3ab6d8a5bc", "filename": "gcc/value-prof.c", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596341c741a4a746497a1da8322fce0ad625e26b/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596341c741a4a746497a1da8322fce0ad625e26b/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=596341c741a4a746497a1da8322fce0ad625e26b", "patch": "@@ -257,23 +257,23 @@ dump_histogram_value (FILE *dump_file, histogram_value hist)\n \t\t (int64_t) hist->hvalue.counters[0]);\n       break;\n \n-    case HIST_TYPE_SINGLE_VALUE:\n+    case HIST_TYPE_TOPN_VALUES:\n     case HIST_TYPE_INDIR_CALL:\n       if (hist->hvalue.counters)\n \t{\n \t  fprintf (dump_file,\n-\t\t   (hist->type == HIST_TYPE_SINGLE_VALUE\n-\t\t    ? \"Single value counter \" : \"Indirect call counter\"));\n+\t\t   (hist->type == HIST_TYPE_TOPN_VALUES\n+\t\t    ? \"Top N value counter \" : \"Indirect call counter\"));\n \t  if (hist->hvalue.counters)\n \t    {\n \t      fprintf (dump_file, \"all: %\" PRId64 \", values: \",\n \t\t       (int64_t) hist->hvalue.counters[0]);\n-\t      for (unsigned i = 0; i < GCOV_DISK_SINGLE_VALUES; i++)\n+\t      for (unsigned i = 0; i < GCOV_TOPN_VALUES; i++)\n \t\t{\n \t\t  fprintf (dump_file, \"[%\" PRId64 \":%\" PRId64 \"]\",\n \t\t\t   (int64_t) hist->hvalue.counters[2 * i + 1],\n \t\t\t   (int64_t) hist->hvalue.counters[2 * i + 2]);\n-\t\t  if (i != GCOV_DISK_SINGLE_VALUES - 1)\n+\t\t  if (i != GCOV_TOPN_VALUES - 1)\n \t\t    fprintf (dump_file, \", \");\n \t\t}\n \t      fprintf (dump_file, \".\\n\");\n@@ -331,7 +331,7 @@ stream_out_histogram_value (struct output_block *ob, histogram_value hist)\n       /* When user uses an unsigned type with a big value, constant converted\n \t to gcov_type (a signed type) can be negative.  */\n       gcov_type value = hist->hvalue.counters[i];\n-      if (hist->type == HIST_TYPE_SINGLE_VALUE && i > 0)\n+      if (hist->type == HIST_TYPE_TOPN_VALUES && i > 0)\n \t;\n       else\n \tgcc_assert (value >= 0);\n@@ -374,9 +374,9 @@ stream_in_histogram_value (struct lto_input_block *ib, gimple *stmt)\n \t  ncounters = 2;\n \t  break;\n \n-\tcase HIST_TYPE_SINGLE_VALUE:\n+\tcase HIST_TYPE_TOPN_VALUES:\n \tcase HIST_TYPE_INDIR_CALL:\n-\t  ncounters = GCOV_SINGLE_VALUE_COUNTERS;\n+\t  ncounters = GCOV_TOPN_VALUES_COUNTERS;\n \t  break;\n \n \tcase HIST_TYPE_IOR:\n@@ -713,7 +713,7 @@ gimple_divmod_fixed_value (gassign *stmt, tree value, profile_probability prob,\n   return tmp2;\n }\n \n-/* Return most common value of SINGLE_VALUE histogram.  If\n+/* Return most common value of TOPN_VALUE histogram.  If\n    there's a unique value, return true and set VALUE and COUNT\n    arguments.  */\n \n@@ -731,7 +731,7 @@ get_most_common_single_value (gimple *stmt, const char *counter_type,\n \n   gcov_type read_all = hist->hvalue.counters[0];\n \n-  for (unsigned i = 0; i < GCOV_DISK_SINGLE_VALUES; i++)\n+  for (unsigned i = 0; i < GCOV_TOPN_VALUES; i++)\n     {\n       gcov_type v = hist->hvalue.counters[2 * i + 1];\n       gcov_type c = hist->hvalue.counters[2 * i + 2];\n@@ -780,7 +780,7 @@ gimple_divmod_fixed_value_transform (gimple_stmt_iterator *si)\n     return false;\n \n   histogram = gimple_histogram_value_of_type (cfun, stmt,\n-\t\t\t\t\t      HIST_TYPE_SINGLE_VALUE);\n+\t\t\t\t\t      HIST_TYPE_TOPN_VALUES);\n   if (!histogram)\n     return false;\n \n@@ -1654,7 +1654,7 @@ gimple_stringops_transform (gimple_stmt_iterator *gsi)\n     return false;\n \n   histogram = gimple_histogram_value_of_type (cfun, stmt,\n-\t\t\t\t\t      HIST_TYPE_SINGLE_VALUE);\n+\t\t\t\t\t      HIST_TYPE_TOPN_VALUES);\n   if (!histogram)\n     return false;\n \n@@ -1808,7 +1808,7 @@ gimple_divmod_values_to_profile (gimple *stmt, histogram_values *values)\n \t/* Check for the case where the divisor is the same value most\n \t   of the time.  */\n \tvalues->quick_push (gimple_alloc_histogram_value (cfun,\n-\t\t\t\t\t\t      HIST_TYPE_SINGLE_VALUE,\n+\t\t\t\t\t\t      HIST_TYPE_TOPN_VALUES,\n \t\t\t\t\t\t      stmt, divisor));\n \n       /* For mod, check whether it is not often a noop (or replaceable by\n@@ -1887,7 +1887,7 @@ gimple_stringops_values_to_profile (gimple *gs, histogram_values *values)\n   if (TREE_CODE (blck_size) != INTEGER_CST)\n     {\n       values->safe_push (gimple_alloc_histogram_value (cfun,\n-\t\t\t\t\t\t       HIST_TYPE_SINGLE_VALUE,\n+\t\t\t\t\t\t       HIST_TYPE_TOPN_VALUES,\n \t\t\t\t\t\t       stmt, blck_size));\n       values->safe_push (gimple_alloc_histogram_value (cfun, HIST_TYPE_AVERAGE,\n \t\t\t\t\t\t       stmt, blck_size));\n@@ -1936,12 +1936,9 @@ gimple_find_values_to_profile (histogram_values *values)\n \t  hist->n_counters = 2;\n \t  break;\n \n-\tcase HIST_TYPE_SINGLE_VALUE:\n-\t  hist->n_counters = GCOV_SINGLE_VALUE_COUNTERS;\n-\t  break;\n-\n+\tcase HIST_TYPE_TOPN_VALUES:\n \tcase HIST_TYPE_INDIR_CALL:\n-\t  hist->n_counters = GCOV_SINGLE_VALUE_COUNTERS;\n+\t  hist->n_counters = GCOV_TOPN_VALUES_COUNTERS;\n \t  break;\n \n         case HIST_TYPE_TIME_PROFILE:"}, {"sha": "9f69d7df6d1be29236830c5d69f4992e6c951935", "filename": "gcc/value-prof.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596341c741a4a746497a1da8322fce0ad625e26b/gcc%2Fvalue-prof.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596341c741a4a746497a1da8322fce0ad625e26b/gcc%2Fvalue-prof.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.h?ref=596341c741a4a746497a1da8322fce0ad625e26b", "patch": "@@ -26,8 +26,7 @@ enum hist_type\n   HIST_TYPE_INTERVAL,\t/* Measures histogram of values inside a specified\n \t\t\t   interval.  */\n   HIST_TYPE_POW2,\t/* Histogram of power of 2 values.  */\n-  HIST_TYPE_SINGLE_VALUE, /* Tries to identify the value that is (almost)\n-\t\t\t   always constant.  */\n+  HIST_TYPE_TOPN_VALUES, /* Tries to identify the N most common values.  */\n   HIST_TYPE_INDIR_CALL,   /* Tries to identify the function that is (almost)\n \t\t\t    called in indirect call */\n   HIST_TYPE_AVERAGE,\t/* Compute average value (sum of all values).  */\n@@ -101,7 +100,8 @@ extern void gimple_init_gcov_profiler (void);\n extern void gimple_gen_edge_profiler (int, edge);\n extern void gimple_gen_interval_profiler (histogram_value, unsigned, unsigned);\n extern void gimple_gen_pow2_profiler (histogram_value, unsigned, unsigned);\n-extern void gimple_gen_one_value_profiler (histogram_value, unsigned, unsigned);\n+extern void gimple_gen_topn_values_profiler (histogram_value, unsigned,\n+\t\t\t\t\t     unsigned);\n extern void gimple_gen_ic_profiler (histogram_value, unsigned, unsigned);\n extern void gimple_gen_ic_func_profiler (void);\n extern void gimple_gen_time_profiler (unsigned, unsigned);"}, {"sha": "d4cbee0d0070b60a169a430ba580c297dbb2b79b", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596341c741a4a746497a1da8322fce0ad625e26b/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596341c741a4a746497a1da8322fce0ad625e26b/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=596341c741a4a746497a1da8322fce0ad625e26b", "patch": "@@ -1,3 +1,29 @@\n+2019-07-03  Martin Liska  <mliska@suse.cz>\n+\n+\t* Makefile.in: Use topn_values instead of one_value names.\n+\t* libgcov-merge.c (__gcov_merge_single): Move to ...\n+\t(__gcov_merge_topn): ... this.\n+\t(merge_single_value_set): Move to ...\n+\t(merge_topn_values_set): ... this.\n+\t* libgcov-profiler.c (__gcov_one_value_profiler_body): Move to\n+\t...\n+\t(__gcov_topn_values_profiler_body): ... this.\n+\t(__gcov_one_value_profiler_v2): Move to ...\n+\t(__gcov_topn_values_profiler): ... this.\n+\t(__gcov_one_value_profiler_v2_atomic): Move to ...\n+\t(__gcov_topn_values_profiler_atomic): ... this.\n+\t(__gcov_indirect_call_profiler_v4): Remove.\n+\t* libgcov-util.c (__gcov_single_counter_op): Move to ...\n+\t(__gcov_topn_counter_op): ... this.\n+\t* libgcov.h (L_gcov_merge_single): Remove.\n+\t(L_gcov_merge_topn): New.\n+\t(__gcov_merge_single): Remove.\n+\t(__gcov_merge_topn): New.\n+\t(__gcov_one_value_profiler_v2): Move to ..\n+\t(__gcov_topn_values_profiler): ... this.\n+\t(__gcov_one_value_profiler_v2_atomic): Move to ...\n+\t(__gcov_topn_values_profiler_atomic): ... this.\n+\n 2019-07-03  Martin Liska  <mliska@suse.cz>\n \n \t* libgcov-merge.c (merge_single_value_set): Support N values."}, {"sha": "5608352a90081395ea91a1c900317073436f0082", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596341c741a4a746497a1da8322fce0ad625e26b/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596341c741a4a746497a1da8322fce0ad625e26b/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=596341c741a4a746497a1da8322fce0ad625e26b", "patch": "@@ -889,14 +889,14 @@ include $(iterator)\n \n # Build libgcov components.\n \n-LIBGCOV_MERGE = _gcov_merge_add _gcov_merge_single\t\t\t\\\n+LIBGCOV_MERGE = _gcov_merge_add _gcov_merge_topn\t\t\t\\\n \t_gcov_merge_ior _gcov_merge_time_profile\n LIBGCOV_PROFILER = _gcov_interval_profiler\t\t\t\t\\\n \t_gcov_interval_profiler_atomic\t\t\t\t\t\\\n \t_gcov_pow2_profiler\t\t\t\t\t\t\\\n \t_gcov_pow2_profiler_atomic\t\t\t\t\t\\\n-\t_gcov_one_value_profiler_v2\t\t\t\t\t\\\n-\t_gcov_one_value_profiler_v2_atomic\t\t\t\t\t\\\n+\t_gcov_topn_values_profiler\t\t\t\t\t\\\n+\t_gcov_topn_values_profiler_atomic\t\t\t\t\t\\\n \t_gcov_average_profiler\t\t\t\t\t\t\\\n \t_gcov_average_profiler_atomic\t\t\t\t\t\\\n \t_gcov_ior_profiler\t\t\t\t\t\t\\"}, {"sha": "15f27aedb55383e5bc7ebc847399745b5dfcd30b", "filename": "libgcc/libgcov-merge.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596341c741a4a746497a1da8322fce0ad625e26b/libgcc%2Flibgcov-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596341c741a4a746497a1da8322fce0ad625e26b/libgcc%2Flibgcov-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-merge.c?ref=596341c741a4a746497a1da8322fce0ad625e26b", "patch": "@@ -33,9 +33,9 @@ void __gcov_merge_add (gcov_type *counters  __attribute__ ((unused)),\n                        unsigned n_counters __attribute__ ((unused))) {}\n #endif\n \n-#ifdef L_gcov_merge_single\n-void __gcov_merge_single (gcov_type *counters  __attribute__ ((unused)),\n-\t\t\t  unsigned n_counters __attribute__ ((unused))) {}\n+#ifdef L_gcov_merge_topn\n+void __gcov_merge_topn (gcov_type *counters  __attribute__ ((unused)),\n+\t\t\tunsigned n_counters __attribute__ ((unused))) {}\n #endif\n \n #else\n@@ -84,20 +84,20 @@ __gcov_merge_time_profile (gcov_type *counters, unsigned n_counters)\n }\n #endif /* L_gcov_merge_time_profile */\n \n-#ifdef L_gcov_merge_single\n+#ifdef L_gcov_merge_topn\n \n static void\n-merge_single_value_set (gcov_type *counters)\n+merge_topn_values_set (gcov_type *counters)\n {\n   /* First value is number of total executions of the profiler.  */\n   gcov_type all = gcov_get_counter_ignore_scaling (-1);\n   counters[0] += all;\n   ++counters;\n \n   /* Read all part values.  */\n-  gcov_type read_counters[2 * GCOV_DISK_SINGLE_VALUES];\n+  gcov_type read_counters[2 * GCOV_TOPN_VALUES];\n \n-  for (unsigned i = 0; i < GCOV_DISK_SINGLE_VALUES; i++)\n+  for (unsigned i = 0; i < GCOV_TOPN_VALUES; i++)\n     {\n       read_counters[2 * i] = gcov_get_counter_target ();\n       read_counters[2 * i + 1] = gcov_get_counter_ignore_scaling (-1);\n@@ -109,13 +109,13 @@ merge_single_value_set (gcov_type *counters)\n       return;\n     }\n \n-  for (unsigned i = 0; i < GCOV_DISK_SINGLE_VALUES; i++)\n+  for (unsigned i = 0; i < GCOV_TOPN_VALUES; i++)\n     {\n       if (read_counters[2 * i + 1] == 0)\n \treturn;\n \n       unsigned j;\n-      for (j = 0; j < GCOV_DISK_SINGLE_VALUES; j++)\n+      for (j = 0; j < GCOV_TOPN_VALUES; j++)\n \t{\n \t  if (counters[2 * j] == read_counters[2 * i])\n \t    {\n@@ -131,7 +131,7 @@ merge_single_value_set (gcov_type *counters)\n \t}\n \n       /* We haven't found a slot, bail out.  */\n-      if (j == GCOV_DISK_SINGLE_VALUES)\n+      if (j == GCOV_TOPN_VALUES)\n \t{\n \t  counters[1] = -1;\n \t  return;\n@@ -149,13 +149,13 @@ merge_single_value_set (gcov_type *counters)\n    -- counter\n    */\n void\n-__gcov_merge_single (gcov_type *counters, unsigned n_counters)\n+__gcov_merge_topn (gcov_type *counters, unsigned n_counters)\n {\n-  gcc_assert (!(n_counters % GCOV_SINGLE_VALUE_COUNTERS));\n+  gcc_assert (!(n_counters % GCOV_TOPN_VALUES_COUNTERS));\n \n-  for (unsigned i = 0; i < (n_counters / GCOV_SINGLE_VALUE_COUNTERS); i++)\n-    merge_single_value_set (counters + (i * GCOV_SINGLE_VALUE_COUNTERS));\n+  for (unsigned i = 0; i < (n_counters / GCOV_TOPN_VALUES_COUNTERS); i++)\n+    merge_topn_values_set (counters + (i * GCOV_TOPN_VALUES_COUNTERS));\n }\n-#endif /* L_gcov_merge_single */\n+#endif /* L_gcov_merge_topn */\n \n #endif /* inhibit_libc */"}, {"sha": "8f877a95980f48274d53b475147ab408ff8aa220", "filename": "libgcc/libgcov-profiler.c", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596341c741a4a746497a1da8322fce0ad625e26b/libgcc%2Flibgcov-profiler.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596341c741a4a746497a1da8322fce0ad625e26b/libgcc%2Flibgcov-profiler.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-profiler.c?ref=596341c741a4a746497a1da8322fce0ad625e26b", "patch": "@@ -106,17 +106,11 @@ __gcov_pow2_profiler_atomic (gcov_type *counters, gcov_type value)\n #endif\n \n \n-/* Tries to determine the most common value among its inputs.  Checks if the\n-   value stored in COUNTERS[0] matches VALUE.  If this is the case, COUNTERS[1]\n-   is incremented.  If this is not the case and COUNTERS[1] is not zero,\n-   COUNTERS[1] is decremented.  Otherwise COUNTERS[1] is set to one and\n-   VALUE is stored to COUNTERS[0].  This algorithm guarantees that if this\n-   function is called more than 50% of the time with one value, this value\n-   will be in COUNTERS[0] in the end.  */\n+/* Tries to determine N most commons value among its inputs.  */\n \n static inline void\n-__gcov_one_value_profiler_body (gcov_type *counters, gcov_type value,\n-\t\t\t\tint use_atomic)\n+__gcov_topn_values_profiler_body (gcov_type *counters, gcov_type value,\n+\t\t\t\t  int use_atomic)\n {\n   if (use_atomic)\n     __atomic_fetch_add (&counters[0], 1, __ATOMIC_RELAXED);\n@@ -125,11 +119,11 @@ __gcov_one_value_profiler_body (gcov_type *counters, gcov_type value,\n \n   ++counters;\n \n-  /* We have GCOV_DISK_SINGLE_VALUES as we can keep multiple values\n+  /* We have GCOV_TOPN_VALUES as we can keep multiple values\n      next to each other.  */\n   unsigned sindex = 0;\n \n-  for (unsigned i = 0; i < GCOV_DISK_SINGLE_VALUES; i++)\n+  for (unsigned i = 0; i < GCOV_TOPN_VALUES; i++)\n     {\n       if (value == counters[2 * i])\n \t{\n@@ -158,15 +152,15 @@ __gcov_one_value_profiler_body (gcov_type *counters, gcov_type value,\n     counters[2 * sindex + 1]--;\n }\n \n-#ifdef L_gcov_one_value_profiler_v2\n+#ifdef L_gcov_topn_values_profiler\n void\n-__gcov_one_value_profiler_v2 (gcov_type *counters, gcov_type value)\n+__gcov_topn_values_profiler (gcov_type *counters, gcov_type value)\n {\n-  __gcov_one_value_profiler_body (counters, value, 0);\n+  __gcov_topn_values_profiler_body (counters, value, 0);\n }\n #endif\n \n-#if defined(L_gcov_one_value_profiler_v2_atomic) && GCOV_SUPPORTS_ATOMIC\n+#if defined(L_gcov_topn_values_profiler_atomic) && GCOV_SUPPORTS_ATOMIC\n \n /* Update one value profilers (COUNTERS) for a given VALUE.\n \n@@ -178,9 +172,9 @@ __gcov_one_value_profiler_v2 (gcov_type *counters, gcov_type value)\n    https://gcc.gnu.org/ml/gcc-patches/2016-08/msg00024.html.  */\n \n void\n-__gcov_one_value_profiler_v2_atomic (gcov_type *counters, gcov_type value)\n+__gcov_topn_values_profiler_atomic (gcov_type *counters, gcov_type value)\n {\n-  __gcov_one_value_profiler_body (counters, value, 1);\n+  __gcov_topn_values_profiler_body (counters, value, 1);\n }\n #endif\n \n@@ -214,7 +208,7 @@ __gcov_indirect_call_profiler_v4 (gcov_type value, void* cur_func)\n   if (cur_func == __gcov_indirect_call.callee\n       || (__LIBGCC_VTABLE_USES_DESCRIPTORS__\n \t  && *(void **) cur_func == *(void **) __gcov_indirect_call.callee))\n-    __gcov_one_value_profiler_body (__gcov_indirect_call.counters, value, 0);\n+    __gcov_topn_values_profiler_body (__gcov_indirect_call.counters, value, 0);\n \n   __gcov_indirect_call.callee = NULL;\n }"}, {"sha": "32b3f82fe536a4cc21b1c21ca2b4e4689996e982", "filename": "libgcc/libgcov-util.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596341c741a4a746497a1da8322fce0ad625e26b/libgcc%2Flibgcov-util.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596341c741a4a746497a1da8322fce0ad625e26b/libgcc%2Flibgcov-util.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-util.c?ref=596341c741a4a746497a1da8322fce0ad625e26b", "patch": "@@ -725,11 +725,11 @@ __gcov_time_profile_counter_op (gcov_type *counters ATTRIBUTE_UNUSED,\n   /* Do nothing.  */\n }\n \n-/* Performing FN upon single counters.  */\n+/* Performing FN upon TOP N counters.  */\n \n static void\n-__gcov_single_counter_op (gcov_type *counters, unsigned n_counters,\n-                          counter_op_fn fn, void *data1, void *data2)\n+__gcov_topn_counter_op (gcov_type *counters, unsigned n_counters,\n+\t\t\tcounter_op_fn fn, void *data1, void *data2)\n {\n   unsigned i, n_measures;\n "}, {"sha": "30a8a116fec02040f700a5a4fa0782a911b58b85", "filename": "libgcc/libgcov.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596341c741a4a746497a1da8322fce0ad625e26b/libgcc%2Flibgcov.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596341c741a4a746497a1da8322fce0ad625e26b/libgcc%2Flibgcov.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov.h?ref=596341c741a4a746497a1da8322fce0ad625e26b", "patch": "@@ -126,7 +126,7 @@ typedef unsigned gcov_position_t;\n \n #define L_gcov 1\n #define L_gcov_merge_add 1\n-#define L_gcov_merge_single 1\n+#define L_gcov_merge_topn 1\n #define L_gcov_merge_ior 1\n #define L_gcov_merge_time_profile 1\n \n@@ -259,8 +259,8 @@ extern void __gcov_merge_add (gcov_type *, unsigned) ATTRIBUTE_HIDDEN;\n /* The merge function to select the minimum valid counter value.  */\n extern void __gcov_merge_time_profile (gcov_type *, unsigned) ATTRIBUTE_HIDDEN;\n \n-/* The merge function to choose the most common value.  */\n-extern void __gcov_merge_single (gcov_type *, unsigned) ATTRIBUTE_HIDDEN;\n+/* The merge function to choose the most common N values.  */\n+extern void __gcov_merge_topn (gcov_type *, unsigned) ATTRIBUTE_HIDDEN;\n \n /* The merge function that just ors the counters together.  */\n extern void __gcov_merge_ior (gcov_type *, unsigned) ATTRIBUTE_HIDDEN;\n@@ -271,8 +271,8 @@ extern void __gcov_interval_profiler_atomic (gcov_type *, gcov_type, int,\n \t\t\t\t\t     unsigned);\n extern void __gcov_pow2_profiler (gcov_type *, gcov_type);\n extern void __gcov_pow2_profiler_atomic (gcov_type *, gcov_type);\n-extern void __gcov_one_value_profiler_v2 (gcov_type *, gcov_type);\n-extern void __gcov_one_value_profiler_v2_atomic (gcov_type *, gcov_type);\n+extern void __gcov_topn_values_profiler (gcov_type *, gcov_type);\n+extern void __gcov_topn_values_profiler_atomic (gcov_type *, gcov_type);\n extern void __gcov_indirect_call_profiler_v4 (gcov_type, void *);\n extern void __gcov_time_profiler (gcov_type *);\n extern void __gcov_time_profiler_atomic (gcov_type *);"}]}