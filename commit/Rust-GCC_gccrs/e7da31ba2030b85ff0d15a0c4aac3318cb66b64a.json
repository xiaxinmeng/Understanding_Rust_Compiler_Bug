{"sha": "e7da31ba2030b85ff0d15a0c4aac3318cb66b64a", "node_id": "C_kwDOANBUbNoAKGU3ZGEzMWJhMjAzMGI4NWZmMGQxNWEwYzRhYWMzMzE4Y2I2NmI2NGE", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2021-12-03T15:50:54Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2022-01-06T16:56:17Z"}, "message": "RISC-V: Minimal support of vector extensions\n\ngcc/ChangeLog:\n\n\t* common/config/riscv/riscv-common.c (riscv_implied_info): Add\n\tvector extensions.\n\t(riscv_ext_version_table): Add version info for vector extensions.\n\t(riscv_ext_flag_table): Add option mask for vector extensions.\n\t* config/riscv/riscv-opts.h (MASK_VECTOR_EEW_32): New.\n\t(MASK_VECTOR_EEW_64): New.\n\t(MASK_VECTOR_EEW_FP_32): New.\n\t(MASK_VECTOR_EEW_FP_64): New.\n\t(MASK_ZVL32B): New.\n\t(MASK_ZVL64B): New.\n\t(MASK_ZVL128B): New.\n\t(MASK_ZVL256B): New.\n\t(MASK_ZVL512B): New.\n\t(MASK_ZVL1024B): New.\n\t(MASK_ZVL2048B): New.\n\t(MASK_ZVL4096B): New.\n\t(MASK_ZVL8192B): New.\n\t(MASK_ZVL16384B): New.\n\t(MASK_ZVL32768B): New.\n\t(MASK_ZVL65536B): New.\n\t(TARGET_ZVL32B): New.\n\t(TARGET_ZVL64B): New.\n\t(TARGET_ZVL128B): New.\n\t(TARGET_ZVL256B): New.\n\t(TARGET_ZVL512B): New.\n\t(TARGET_ZVL1024B): New.\n\t(TARGET_ZVL2048B): New.\n\t(TARGET_ZVL4096B): New.\n\t(TARGET_ZVL8192B): New.\n\t(TARGET_ZVL16384B): New.\n\t(TARGET_ZVL32768B): New.\n\t(TARGET_ZVL65536B): New.\n\t* config/riscv/riscv.opt (Mask(VECTOR)): New.\n\t(riscv_vector_eew_flags): New.\n\t(riscv_zvl_flags): New.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/predef-14.c: New.\n\t* gcc.target/riscv/predef-15.c: Ditto.\n\t* gcc.target/riscv/predef-16.c: Ditto.", "tree": {"sha": "570bcb98a718e4a0c1c4947a5d08dbd2bbe6d67b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/570bcb98a718e4a0c1c4947a5d08dbd2bbe6d67b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7da31ba2030b85ff0d15a0c4aac3318cb66b64a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7da31ba2030b85ff0d15a0c4aac3318cb66b64a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7da31ba2030b85ff0d15a0c4aac3318cb66b64a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7da31ba2030b85ff0d15a0c4aac3318cb66b64a/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8bdb3452054506f90283ea198a42a811679653d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8bdb3452054506f90283ea198a42a811679653d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8bdb3452054506f90283ea198a42a811679653d"}], "stats": {"total": 390, "additions": 390, "deletions": 0}, "files": [{"sha": "c1d8431c1fa9d055909defba9a74d2058b06ae3d", "filename": "gcc/common/config/riscv/riscv-common.c", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7da31ba2030b85ff0d15a0c4aac3318cb66b64a/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7da31ba2030b85ff0d15a0c4aac3318cb66b64a/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c?ref=e7da31ba2030b85ff0d15a0c4aac3318cb66b64a", "patch": "@@ -64,6 +64,38 @@ static const riscv_implied_info_t riscv_implied_info[] =\n   {\"zks\", \"zbkx\"},\n   {\"zks\", \"zksed\"},\n   {\"zks\", \"zksh\"},\n+\n+  {\"v\", \"zvl128b\"},\n+  {\"v\", \"zve64d\"},\n+\n+  {\"zve32f\", \"f\"},\n+  {\"zve64f\", \"f\"},\n+  {\"zve64d\", \"d\"},\n+\n+  {\"zve32x\", \"zvl32b\"},\n+  {\"zve32f\", \"zve32x\"},\n+  {\"zve32f\", \"zvl32b\"},\n+\n+  {\"zve64x\", \"zve32x\"},\n+  {\"zve64x\", \"zvl64b\"},\n+  {\"zve64f\", \"zve32f\"},\n+  {\"zve64f\", \"zve64x\"},\n+  {\"zve64f\", \"zvl64b\"},\n+  {\"zve64d\", \"zve64f\"},\n+  {\"zve64d\", \"zvl64b\"},\n+\n+  {\"zvl64b\", \"zvl32b\"},\n+  {\"zvl128b\", \"zvl64b\"},\n+  {\"zvl256b\", \"zvl128b\"},\n+  {\"zvl512b\", \"zvl256b\"},\n+  {\"zvl1024b\", \"zvl512b\"},\n+  {\"zvl2048b\", \"zvl1024b\"},\n+  {\"zvl4096b\", \"zvl2048b\"},\n+  {\"zvl8192b\", \"zvl4096b\"},\n+  {\"zvl16384b\", \"zvl8192b\"},\n+  {\"zvl32768b\", \"zvl16384b\"},\n+  {\"zvl65536b\", \"zvl32768b\"},\n+\n   {NULL, NULL}\n };\n \n@@ -109,6 +141,8 @@ static const struct riscv_ext_version riscv_ext_version_table[] =\n   {\"c\", ISA_SPEC_CLASS_20190608, 2, 0},\n   {\"c\", ISA_SPEC_CLASS_2P2,      2, 0},\n \n+  {\"v\",       ISA_SPEC_CLASS_NONE, 1, 0},\n+\n   {\"zicsr\", ISA_SPEC_CLASS_20191213, 2, 0},\n   {\"zicsr\", ISA_SPEC_CLASS_20190608, 2, 0},\n \n@@ -131,6 +165,26 @@ static const struct riscv_ext_version riscv_ext_version_table[] =\n   {\"zksh\",  ISA_SPEC_CLASS_NONE, 1, 0},\n   {\"zkt\",   ISA_SPEC_CLASS_NONE, 1, 0},\n \n+  {\"zve32x\", ISA_SPEC_CLASS_NONE, 1, 0},\n+  {\"zve32f\", ISA_SPEC_CLASS_NONE, 1, 0},\n+  {\"zve32d\", ISA_SPEC_CLASS_NONE, 1, 0},\n+  {\"zve64x\", ISA_SPEC_CLASS_NONE, 1, 0},\n+  {\"zve64f\", ISA_SPEC_CLASS_NONE, 1, 0},\n+  {\"zve64d\", ISA_SPEC_CLASS_NONE, 1, 0},\n+\n+  {\"zvl32b\", ISA_SPEC_CLASS_NONE, 1, 0},\n+  {\"zvl64b\", ISA_SPEC_CLASS_NONE, 1, 0},\n+  {\"zvl128b\", ISA_SPEC_CLASS_NONE, 1, 0},\n+  {\"zvl256b\", ISA_SPEC_CLASS_NONE, 1, 0},\n+  {\"zvl512b\", ISA_SPEC_CLASS_NONE, 1, 0},\n+  {\"zvl1024b\", ISA_SPEC_CLASS_NONE, 1, 0},\n+  {\"zvl2048b\", ISA_SPEC_CLASS_NONE, 1, 0},\n+  {\"zvl4096b\", ISA_SPEC_CLASS_NONE, 1, 0},\n+  {\"zvl8192b\", ISA_SPEC_CLASS_NONE, 1, 0},\n+  {\"zvl16384b\", ISA_SPEC_CLASS_NONE, 1, 0},\n+  {\"zvl32768b\", ISA_SPEC_CLASS_NONE, 1, 0},\n+  {\"zvl65536b\", ISA_SPEC_CLASS_NONE, 1, 0},\n+\n   /* Terminate the list.  */\n   {NULL, ISA_SPEC_CLASS_NONE, 0, 0}\n };\n@@ -965,6 +1019,7 @@ static const riscv_ext_flag_table_t riscv_ext_flag_table[] =\n   {\"f\", &gcc_options::x_target_flags, MASK_HARD_FLOAT},\n   {\"d\", &gcc_options::x_target_flags, MASK_DOUBLE_FLOAT},\n   {\"c\", &gcc_options::x_target_flags, MASK_RVC},\n+  {\"v\", &gcc_options::x_target_flags, MASK_VECTOR},\n \n   {\"zicsr\",    &gcc_options::x_riscv_zi_subext, MASK_ZICSR},\n   {\"zifencei\", &gcc_options::x_riscv_zi_subext, MASK_ZIFENCEI},\n@@ -985,6 +1040,37 @@ static const riscv_ext_flag_table_t riscv_ext_flag_table[] =\n   {\"zksh\",   &gcc_options::x_riscv_zk_subext, MASK_ZKSH},\n   {\"zkt\",    &gcc_options::x_riscv_zk_subext, MASK_ZKT},\n \n+  {\"zve32x\",   &gcc_options::x_target_flags, MASK_VECTOR},\n+  {\"zve32f\",   &gcc_options::x_target_flags, MASK_VECTOR},\n+  {\"zve64x\",   &gcc_options::x_target_flags, MASK_VECTOR},\n+  {\"zve64f\",   &gcc_options::x_target_flags, MASK_VECTOR},\n+  {\"zve64d\",   &gcc_options::x_target_flags, MASK_VECTOR},\n+\n+  /* We don't need to put complete EEW/EEW_FP info here, due to the\n+     implication relation of vector extension.\n+     e.g. v -> zve64d ... zve32x, so v has set MASK_VECTOR_EEW_FP_64,\n+     MASK_VECTOR_EEW_FP_32, MASK_VECTOR_EEW_64 and MASK_VECTOR_EEW_32\n+     due to the extension implication.  */\n+  {\"zve32x\",   &gcc_options::x_riscv_vector_eew_flags, MASK_VECTOR_EEW_32},\n+  {\"zve32f\",   &gcc_options::x_riscv_vector_eew_flags, MASK_VECTOR_EEW_FP_32},\n+  {\"zve64x\",   &gcc_options::x_riscv_vector_eew_flags, MASK_VECTOR_EEW_64},\n+  {\"zve64f\",   &gcc_options::x_riscv_vector_eew_flags, MASK_VECTOR_EEW_FP_32},\n+  {\"zve64d\",   &gcc_options::x_riscv_vector_eew_flags, MASK_VECTOR_EEW_FP_64},\n+\n+  {\"zvl32b\",    &gcc_options::x_riscv_zvl_flags, MASK_ZVL32B},\n+  {\"zvl64b\",    &gcc_options::x_riscv_zvl_flags, MASK_ZVL64B},\n+  {\"zvl128b\",   &gcc_options::x_riscv_zvl_flags, MASK_ZVL128B},\n+  {\"zvl256b\",   &gcc_options::x_riscv_zvl_flags, MASK_ZVL256B},\n+  {\"zvl512b\",   &gcc_options::x_riscv_zvl_flags, MASK_ZVL512B},\n+  {\"zvl1024b\",  &gcc_options::x_riscv_zvl_flags, MASK_ZVL1024B},\n+  {\"zvl2048b\",  &gcc_options::x_riscv_zvl_flags, MASK_ZVL2048B},\n+  {\"zvl4096b\",  &gcc_options::x_riscv_zvl_flags, MASK_ZVL4096B},\n+  {\"zvl8192b\",  &gcc_options::x_riscv_zvl_flags, MASK_ZVL8192B},\n+  {\"zvl16384b\", &gcc_options::x_riscv_zvl_flags, MASK_ZVL16384B},\n+  {\"zvl32768b\", &gcc_options::x_riscv_zvl_flags, MASK_ZVL32768B},\n+  {\"zvl65536b\", &gcc_options::x_riscv_zvl_flags, MASK_ZVL65536B},\n+\n+\n   {NULL, NULL, 0}\n };\n "}, {"sha": "929e4e3a7c5e07225d9d3afea2b34063cd71ad75", "filename": "gcc/config/riscv/riscv-opts.h", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7da31ba2030b85ff0d15a0c4aac3318cb66b64a/gcc%2Fconfig%2Friscv%2Friscv-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7da31ba2030b85ff0d15a0c4aac3318cb66b64a/gcc%2Fconfig%2Friscv%2Friscv-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-opts.h?ref=e7da31ba2030b85ff0d15a0c4aac3318cb66b64a", "patch": "@@ -105,4 +105,35 @@ enum stack_protector_guard {\n #define TARGET_ZKSH   ((riscv_zk_subext & MASK_ZKSH) != 0)\n #define TARGET_ZKT    ((riscv_zk_subext & MASK_ZKT) != 0)\n \n+#define MASK_VECTOR_EEW_32    (1 << 0)\n+#define MASK_VECTOR_EEW_64    (1 << 1)\n+#define MASK_VECTOR_EEW_FP_32 (1 << 2)\n+#define MASK_VECTOR_EEW_FP_64 (1 << 3)\n+\n+#define MASK_ZVL32B    (1 <<  0)\n+#define MASK_ZVL64B    (1 <<  1)\n+#define MASK_ZVL128B   (1 <<  2)\n+#define MASK_ZVL256B   (1 <<  3)\n+#define MASK_ZVL512B   (1 <<  4)\n+#define MASK_ZVL1024B  (1 <<  5)\n+#define MASK_ZVL2048B  (1 <<  6)\n+#define MASK_ZVL4096B  (1 <<  7)\n+#define MASK_ZVL8192B  (1 <<  8)\n+#define MASK_ZVL16384B (1 <<  9)\n+#define MASK_ZVL32768B (1 << 10)\n+#define MASK_ZVL65536B (1 << 11)\n+\n+#define TARGET_ZVL32B    ((riscv_zvl_flags & MASK_ZVL32B) != 0)\n+#define TARGET_ZVL64B    ((riscv_zvl_flags & MASK_ZVL64B) != 0)\n+#define TARGET_ZVL128B   ((riscv_zvl_flags & MASK_ZVL128B) != 0)\n+#define TARGET_ZVL256B   ((riscv_zvl_flags & MASK_ZVL256B) != 0)\n+#define TARGET_ZVL512B   ((riscv_zvl_flags & MASK_ZVL512B) != 0)\n+#define TARGET_ZVL1024B  ((riscv_zvl_flags & MASK_ZVL1024B) != 0)\n+#define TARGET_ZVL2048B  ((riscv_zvl_flags & MASK_ZVL2048B) != 0)\n+#define TARGET_ZVL4096B  ((riscv_zvl_flags & MASK_ZVL4096B) != 0)\n+#define TARGET_ZVL8192B  ((riscv_zvl_flags & MASK_ZVL8192B) != 0)\n+#define TARGET_ZVL16384B ((riscv_zvl_flags & MASK_ZVL16384B) != 0)\n+#define TARGET_ZVL32768B ((riscv_zvl_flags & MASK_ZVL32768B) != 0)\n+#define TARGET_ZVL65536B ((riscv_zvl_flags & MASK_ZVL65536B) != 0)\n+\n #endif /* ! GCC_RISCV_OPTS_H */"}, {"sha": "9fffc08220de6918181560b1f5460956b128e39f", "filename": "gcc/config/riscv/riscv.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7da31ba2030b85ff0d15a0c4aac3318cb66b64a/gcc%2Fconfig%2Friscv%2Friscv.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7da31ba2030b85ff0d15a0c4aac3318cb66b64a/gcc%2Fconfig%2Friscv%2Friscv.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.opt?ref=e7da31ba2030b85ff0d15a0c4aac3318cb66b64a", "patch": "@@ -146,6 +146,8 @@ Mask(RVC)\n \n Mask(RVE)\n \n+Mask(VECTOR)\n+\n mriscv-attribute\n Target Var(riscv_emit_attribute_p) Init(-1)\n Emit RISC-V ELF attribute.\n@@ -201,6 +203,12 @@ int riscv_zb_subext\n TargetVariable\n int riscv_zk_subext\n \n+TargetVariable\n+int riscv_vector_eew_flags\n+\n+TargetVariable\n+int riscv_zvl_flags\n+\n Enum\n Name(isa_spec_class) Type(enum riscv_isa_spec_class)\n Supported ISA specs (for use with the -misa-spec= option):"}, {"sha": "108fc0c569f3afead67d3a605982f4c0c5e52e59", "filename": "gcc/testsuite/gcc.target/riscv/predef-14.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7da31ba2030b85ff0d15a0c4aac3318cb66b64a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpredef-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7da31ba2030b85ff0d15a0c4aac3318cb66b64a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpredef-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpredef-14.c?ref=e7da31ba2030b85ff0d15a0c4aac3318cb66b64a", "patch": "@@ -0,0 +1,83 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=rv32iv -mabi=ilp32 -mcmodel=medlow -misa-spec=2.2\" } */\n+\n+int main () {\n+\n+#ifndef __riscv_arch_test\n+#error \"__riscv_arch_test\"\n+#endif\n+\n+#if __riscv_xlen != 32\n+#error \"__riscv_xlen\"\n+#endif\n+\n+#if !defined(__riscv_i)\n+#error \"__riscv_i\"\n+#endif\n+\n+#if defined(__riscv_c)\n+#error \"__riscv_c\"\n+#endif\n+\n+#if defined(__riscv_e)\n+#error \"__riscv_e\"\n+#endif\n+\n+#if defined(__riscv_a)\n+#error \"__riscv_a\"\n+#endif\n+\n+#if defined(__riscv_m)\n+#error \"__riscv_m\"\n+#endif\n+\n+#if !defined(__riscv_f)\n+#error \"__riscv_f\"\n+#endif\n+\n+#if !defined(__riscv_d)\n+#error \"__riscv_d\"\n+#endif\n+\n+#if !defined(__riscv_v)\n+#error \"__riscv_v\"\n+#endif\n+\n+#if !defined(__riscv_zvl32b)\n+#error \"__riscv_zvl32b\"\n+#endif\n+\n+#if !defined(__riscv_zvl64b)\n+#error \"__riscv_zvl64b\"\n+#endif\n+\n+#if !defined(__riscv_zvl128b)\n+#error \"__riscv_zvl128b\"\n+#endif\n+\n+#if defined(__riscv_zvl256b)\n+#error \"__riscv_zvl256b\"\n+#endif\n+\n+#if !defined(__riscv_zve32x)\n+#error \"__riscv_zve32x\"\n+#endif\n+\n+#if !defined(__riscv_zve32f)\n+#error \"__riscv_zve32f\"\n+#endif\n+\n+#if !defined(__riscv_zve64x)\n+#error \"__riscv_zve64x\"\n+#endif\n+\n+#if !defined(__riscv_zve64f)\n+#error \"__riscv_zve64f\"\n+#endif\n+\n+#if !defined(__riscv_zve64d)\n+#error \"__riscv_zve64d\"\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "a37c457ca71eb59042c28fdfba54a2af1ba91d36", "filename": "gcc/testsuite/gcc.target/riscv/predef-15.c", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7da31ba2030b85ff0d15a0c4aac3318cb66b64a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpredef-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7da31ba2030b85ff0d15a0c4aac3318cb66b64a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpredef-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpredef-15.c?ref=e7da31ba2030b85ff0d15a0c4aac3318cb66b64a", "patch": "@@ -0,0 +1,91 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=rv64iv_zvl512b -mabi=lp64 -mcmodel=medlow -misa-spec=2.2\" } */\n+\n+int main () {\n+\n+#ifndef __riscv_arch_test\n+#error \"__riscv_arch_test\"\n+#endif\n+\n+#if __riscv_xlen != 64\n+#error \"__riscv_xlen\"\n+#endif\n+\n+#if !defined(__riscv_i)\n+#error \"__riscv_i\"\n+#endif\n+\n+#if defined(__riscv_c)\n+#error \"__riscv_c\"\n+#endif\n+\n+#if defined(__riscv_e)\n+#error \"__riscv_e\"\n+#endif\n+\n+#if defined(__riscv_a)\n+#error \"__riscv_a\"\n+#endif\n+\n+#if defined(__riscv_m)\n+#error \"__riscv_m\"\n+#endif\n+\n+#if !defined(__riscv_f)\n+#error \"__riscv_f\"\n+#endif\n+\n+#if !defined(__riscv_d)\n+#error \"__riscv_d\"\n+#endif\n+\n+#if !defined(__riscv_v)\n+#error \"__riscv_v\"\n+#endif\n+\n+#if !defined(__riscv_zvl32b)\n+#error \"__riscv_zvl32b\"\n+#endif\n+\n+#if !defined(__riscv_zvl64b)\n+#error \"__riscv_zvl64b\"\n+#endif\n+\n+#if !defined(__riscv_zvl128b)\n+#error \"__riscv_zvl128b\"\n+#endif\n+\n+#if !defined(__riscv_zvl256b)\n+#error \"__riscv_zvl256b\"\n+#endif\n+\n+#if !defined(__riscv_zvl512b)\n+#error \"__riscv_zvl512b\"\n+#endif\n+\n+#if defined(__riscv_zvl1024b)\n+#error \"__riscv_zvl1024b\"\n+#endif\n+\n+#if !defined(__riscv_zve32x)\n+#error \"__riscv_zve32x\"\n+#endif\n+\n+#if !defined(__riscv_zve32f)\n+#error \"__riscv_zve32f\"\n+#endif\n+\n+#if !defined(__riscv_zve64x)\n+#error \"__riscv_zve64x\"\n+#endif\n+\n+#if !defined(__riscv_zve64f)\n+#error \"__riscv_zve64f\"\n+#endif\n+\n+#if !defined(__riscv_zve64d)\n+#error \"__riscv_zve64d\"\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "6c5c874b4ae1bbd802774d6f7df64c3259dca4a6", "filename": "gcc/testsuite/gcc.target/riscv/predef-16.c", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7da31ba2030b85ff0d15a0c4aac3318cb66b64a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpredef-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7da31ba2030b85ff0d15a0c4aac3318cb66b64a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpredef-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpredef-16.c?ref=e7da31ba2030b85ff0d15a0c4aac3318cb66b64a", "patch": "@@ -0,0 +1,91 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=rv64i_zve64f -mabi=lp64 -mcmodel=medlow -misa-spec=2.2\" } */\n+\n+int main () {\n+\n+#ifndef __riscv_arch_test\n+#error \"__riscv_arch_test\"\n+#endif\n+\n+#if __riscv_xlen != 64\n+#error \"__riscv_xlen\"\n+#endif\n+\n+#if !defined(__riscv_i)\n+#error \"__riscv_i\"\n+#endif\n+\n+#if defined(__riscv_c)\n+#error \"__riscv_c\"\n+#endif\n+\n+#if defined(__riscv_e)\n+#error \"__riscv_e\"\n+#endif\n+\n+#if defined(__riscv_a)\n+#error \"__riscv_a\"\n+#endif\n+\n+#if defined(__riscv_m)\n+#error \"__riscv_m\"\n+#endif\n+\n+#if !defined(__riscv_f)\n+#error \"__riscv_f\"\n+#endif\n+\n+#if defined(__riscv_d)\n+#error \"__riscv_d\"\n+#endif\n+\n+#if defined(__riscv_v)\n+#error \"__riscv_v\"\n+#endif\n+\n+#if !defined(__riscv_zvl32b)\n+#error \"__riscv_zvl32b\"\n+#endif\n+\n+#if !defined(__riscv_zvl64b)\n+#error \"__riscv_zvl64b\"\n+#endif\n+\n+#if defined(__riscv_zvl128b)\n+#error \"__riscv_zvl128b\"\n+#endif\n+\n+#if defined(__riscv_zvl256b)\n+#error \"__riscv_zvl256b\"\n+#endif\n+\n+#if defined(__riscv_zvl512b)\n+#error \"__riscv_zvl512b\"\n+#endif\n+\n+#if defined(__riscv_zvl1024b)\n+#error \"__riscv_zvl1024b\"\n+#endif\n+\n+#if !defined(__riscv_zve32x)\n+#error \"__riscv_zve32x\"\n+#endif\n+\n+#if !defined(__riscv_zve32f)\n+#error \"__riscv_zve32f\"\n+#endif\n+\n+#if !defined(__riscv_zve64x)\n+#error \"__riscv_zve64x\"\n+#endif\n+\n+#if !defined(__riscv_zve64f)\n+#error \"__riscv_zve64f\"\n+#endif\n+\n+#if defined(__riscv_zve64d)\n+#error \"__riscv_zve64d\"\n+#endif\n+\n+  return 0;\n+}"}]}