{"sha": "ea8927ea15cbe3b1c6470495df939abfdc148689", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE4OTI3ZWExNWNiZTNiMWM2NDcwNDk1ZGY5MzlhYmZkYzE0ODY4OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-04-19T14:03:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-04-19T14:03:59Z"}, "message": "re PR tree-optimization/70171 (Poor code generated when return struct using ternary operator)\n\n2016-04-19  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/70171\n\t* tree-ssa-phiprop.c: Include stor-layout.h.\n\t(phiprop_insert_phi): Handle the aggregate copy case.\n\t(propagate_with_phi): Likewise.\n\n\t* g++.dg/tree-ssa/pr70171.C: New testcase.\n\nFrom-SVN: r235208", "tree": {"sha": "43d48aa1aa7628e0744501d3ba7bc43eeb943df2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43d48aa1aa7628e0744501d3ba7bc43eeb943df2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea8927ea15cbe3b1c6470495df939abfdc148689", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea8927ea15cbe3b1c6470495df939abfdc148689", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea8927ea15cbe3b1c6470495df939abfdc148689", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea8927ea15cbe3b1c6470495df939abfdc148689/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9a81dba68ad052fa270246786e2fd1b378708e9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a81dba68ad052fa270246786e2fd1b378708e9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a81dba68ad052fa270246786e2fd1b378708e9c"}], "stats": {"total": 71, "additions": 61, "deletions": 10}, "files": [{"sha": "8a4e32746048b69604c50ccf2f1111d67a346baa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea8927ea15cbe3b1c6470495df939abfdc148689/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea8927ea15cbe3b1c6470495df939abfdc148689/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea8927ea15cbe3b1c6470495df939abfdc148689", "patch": "@@ -1,3 +1,10 @@\n+2016-04-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/70171\n+\t* tree-ssa-phiprop.c: Include stor-layout.h.\n+\t(phiprop_insert_phi): Handle the aggregate copy case.\n+\t(propagate_with_phi): Likewise.\n+\n 2016-04-19  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (ix86_decompose_address): Use lowpart_subreg"}, {"sha": "90391a52511b92c59df516ff5adce8972cb1597e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea8927ea15cbe3b1c6470495df939abfdc148689/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea8927ea15cbe3b1c6470495df939abfdc148689/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ea8927ea15cbe3b1c6470495df939abfdc148689", "patch": "@@ -1,3 +1,8 @@\n+2016-04-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/70171\n+\t* g++.dg/tree-ssa/pr70171.C: New testcase.\n+\n 2016-04-19  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/70724"}, {"sha": "9988e5f3286604b0b3387a7ca67c14ea00264652", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr70171.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea8927ea15cbe3b1c6470495df939abfdc148689/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr70171.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea8927ea15cbe3b1c6470495df939abfdc148689/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr70171.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr70171.C?ref=ea8927ea15cbe3b1c6470495df939abfdc148689", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+struct S { int i; };\n+S struct_ternary (S a, S b, bool select) { return select ? a : b; }\n+\n+/* { dg-final { scan-tree-dump-not \"&\\[ab\\]\" \"optimized\" } } */\n+/* { dg-final { scan-assembler-not \"\\[er\\]sp\" { target { { i?86-*-* x86_64-*-* } && { ! ia32 } } } } } */"}, {"sha": "97e5663bb7f10d5160afb65477e8a949a2a7cd26", "filename": "gcc/tree-ssa-phiprop.c", "status": "modified", "additions": 41, "deletions": 10, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea8927ea15cbe3b1c6470495df939abfdc148689/gcc%2Ftree-ssa-phiprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea8927ea15cbe3b1c6470495df939abfdc148689/gcc%2Ftree-ssa-phiprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiprop.c?ref=ea8927ea15cbe3b1c6470495df939abfdc148689", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-eh.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n+#include \"stor-layout.h\"\n \n /* This pass propagates indirect loads through the PHI node for its\n    address to make the load source possibly non-addressable and to\n@@ -132,7 +133,7 @@ phiprop_insert_phi (basic_block bb, gphi *phi, gimple *use_stmt,\n \t\t    struct phiprop_d *phivn, size_t n)\n {\n   tree res;\n-  gphi *new_phi;\n+  gphi *new_phi = NULL;\n   edge_iterator ei;\n   edge e;\n \n@@ -142,7 +143,8 @@ phiprop_insert_phi (basic_block bb, gphi *phi, gimple *use_stmt,\n   /* Build a new PHI node to replace the definition of\n      the indirect reference lhs.  */\n   res = gimple_assign_lhs (use_stmt);\n-  new_phi = create_phi_node (res, bb);\n+  if (TREE_CODE (res) == SSA_NAME)\n+    new_phi = create_phi_node (res, bb);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n@@ -187,7 +189,10 @@ phiprop_insert_phi (basic_block bb, gphi *phi, gimple *use_stmt,\n \t{\n \t  tree rhs = gimple_assign_rhs1 (use_stmt);\n \t  gcc_assert (TREE_CODE (old_arg) == ADDR_EXPR);\n-\t  new_var = make_ssa_name (TREE_TYPE (rhs));\n+\t  if (TREE_CODE (res) == SSA_NAME)\n+\t    new_var = make_ssa_name (TREE_TYPE (rhs));\n+\t  else\n+\t    new_var = unshare_expr (res);\n \t  if (!is_gimple_min_invariant (old_arg))\n \t    old_arg = PHI_ARG_DEF_FROM_EDGE (phi, e);\n \t  else\n@@ -210,13 +215,17 @@ phiprop_insert_phi (basic_block bb, gphi *phi, gimple *use_stmt,\n \t    }\n \t}\n \n-      add_phi_arg (new_phi, new_var, e, locus);\n+      if (new_phi)\n+\tadd_phi_arg (new_phi, new_var, e, locus);\n     }\n \n-  update_stmt (new_phi);\n+  if (new_phi)\n+    {\n+      update_stmt (new_phi);\n \n-  if (dump_file && (dump_flags & TDF_DETAILS))\n-    print_gimple_stmt (dump_file, new_phi, 0, 0);\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\tprint_gimple_stmt (dump_file, new_phi, 0, 0);\n+    }\n \n   return res;\n }\n@@ -250,7 +259,8 @@ propagate_with_phi (basic_block bb, gphi *phi, struct phiprop_d *phivn,\n   tree type = NULL_TREE;\n \n   if (!POINTER_TYPE_P (TREE_TYPE (ptr))\n-      || !is_gimple_reg_type (TREE_TYPE (TREE_TYPE (ptr))))\n+      || (!is_gimple_reg_type (TREE_TYPE (TREE_TYPE (ptr)))\n+\t  && TYPE_MODE (TREE_TYPE (TREE_TYPE (ptr))) == BLKmode))\n     return false;\n \n   /* Check if we can \"cheaply\" dereference all phi arguments.  */\n@@ -306,7 +316,6 @@ propagate_with_phi (basic_block bb, gphi *phi, struct phiprop_d *phivn,\n          \n       /* Check whether this is a load of *ptr.  */\n       if (!(is_gimple_assign (use_stmt)\n-\t    && TREE_CODE (gimple_assign_lhs (use_stmt)) == SSA_NAME\n \t    && gimple_assign_rhs_code (use_stmt) == MEM_REF\n \t    && TREE_OPERAND (gimple_assign_rhs1 (use_stmt), 0) == ptr\n \t    && integer_zerop (TREE_OPERAND (gimple_assign_rhs1 (use_stmt), 1))\n@@ -327,9 +336,31 @@ propagate_with_phi (basic_block bb, gphi *phi, struct phiprop_d *phivn,\n \t\t\t\t  bb, gimple_bb (def_stmt))))\n \tgoto next;\n \n+      /* Found a proper dereference with an aggregate copy.  Just\n+         insert aggregate copies on the edges instead.  */\n+      if (!is_gimple_reg_type (TREE_TYPE (TREE_TYPE (ptr))))\n+\t{\n+\t  phiprop_insert_phi (bb, phi, use_stmt, phivn, n);\n+\n+\t  /* Remove old stmt.  The phi is taken care of by DCE.  */\n+\t  gsi = gsi_for_stmt (use_stmt);\n+\t  /* Unlinking the VDEF here is fine as we are sure that we process\n+\t     stmts in execution order due to aggregate copies having VDEFs\n+\t     and we emit loads on the edges in the very same order.\n+\t     We get multiple copies (or intermediate register loads) handled\n+\t     only by walking PHIs or immediate uses in a lucky order though,\n+\t     so we could signal the caller to re-start iterating over PHIs\n+\t     when we come here which would make it quadratic in the number\n+\t     of PHIs.  */\n+\t  unlink_stmt_vdef (use_stmt);\n+\t  gsi_remove (&gsi, true);\n+\n+\t  phi_inserted = true;\n+\t}\n+\n       /* Found a proper dereference.  Insert a phi node if this\n \t is the first load transformation.  */\n-      if (!phi_inserted)\n+      else if (!phi_inserted)\n \t{\n \t  res = phiprop_insert_phi (bb, phi, use_stmt, phivn, n);\n \t  type = TREE_TYPE (res);"}]}