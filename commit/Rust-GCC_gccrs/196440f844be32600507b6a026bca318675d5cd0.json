{"sha": "196440f844be32600507b6a026bca318675d5cd0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk2NDQwZjg0NGJlMzI2MDA1MDdiNmEwMjZiY2EzMTg2NzVkNWNkMA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-02-23T17:44:28Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-02-23T17:44:28Z"}, "message": "PR preprocessor/69126: avoid comparing ad-hoc and non-ad-hoc locations\n\ngcc/testsuite/ChangeLog:\n\tPR preprocessor/69126\n\tPR preprocessor/69543\n\t* c-c++-common/pr69126-2-long.c: New test.\n\t* c-c++-common/pr69126-2-short.c: New test.\n\t* c-c++-common/pr69543-1.c: Remove xfail.\n\nlibcpp/ChangeLog:\n\tPR preprocessor/69126\n\tPR preprocessor/69543\n\t* line-map.c (linemap_compare_locations): At the function top,\n\treplace inlined bodies of get_location_from_adhoc_loc with calls\n\tto get_location_from_adhoc_loc.  Add a pair of calls to\n\tget_location_from_adhoc_loc at the bottom of the function, to\n\tavoid meaningless comparisons of ad-hoc and non-ad-hoc locations.\n\nFrom-SVN: r233638", "tree": {"sha": "6c0de6232fb3db3c73408db9d8aeaa7ce4297065", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c0de6232fb3db3c73408db9d8aeaa7ce4297065"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/196440f844be32600507b6a026bca318675d5cd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/196440f844be32600507b6a026bca318675d5cd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/196440f844be32600507b6a026bca318675d5cd0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/196440f844be32600507b6a026bca318675d5cd0/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1d3121af3ad1eb7eb240b0b949d4b57415497463", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d3121af3ad1eb7eb240b0b949d4b57415497463", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d3121af3ad1eb7eb240b0b949d4b57415497463"}], "stats": {"total": 53, "additions": 48, "deletions": 5}, "files": [{"sha": "d6aa9fa82d2f06960f4b9f055aa68374fa9e42ae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/196440f844be32600507b6a026bca318675d5cd0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/196440f844be32600507b6a026bca318675d5cd0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=196440f844be32600507b6a026bca318675d5cd0", "patch": "@@ -1,3 +1,11 @@\n+2016-02-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR preprocessor/69126\n+\tPR preprocessor/69543\n+\t* c-c++-common/pr69126-2-long.c: New test.\n+\t* c-c++-common/pr69126-2-short.c: New test.\n+\t* c-c++-common/pr69543-1.c: Remove xfail.\n+\n 2016-02-23  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR preprocessor/69126"}, {"sha": "f4f1964cba180519476733978a20043e4a1a420f", "filename": "gcc/testsuite/c-c++-common/pr69126-2-long.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/196440f844be32600507b6a026bca318675d5cd0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69126-2-long.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/196440f844be32600507b6a026bca318675d5cd0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69126-2-long.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69126-2-long.c?ref=196440f844be32600507b6a026bca318675d5cd0", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-options \"-Wdeprecated-declarations\" } */\n+\n+/* The macro's name is >= 32 characters long, and hence its location\n+   requires an ad-hoc location.  */\n+\n+#define IGNORE_WHERE_MACRO_IS_LONGER_THAN_31_CHARS  _Pragma(\"GCC diagnostic ignored \\\"-Wdeprecated-declarations\\\"\")\n+__attribute__((deprecated)) void f();\n+int main() {\n+    IGNORE_WHERE_MACRO_IS_LONGER_THAN_31_CHARS\n+    f();\n+}"}, {"sha": "aee43e552dc5db4cffe4a233fed3deed49c3e1f9", "filename": "gcc/testsuite/c-c++-common/pr69126-2-short.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/196440f844be32600507b6a026bca318675d5cd0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69126-2-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/196440f844be32600507b6a026bca318675d5cd0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69126-2-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69126-2-short.c?ref=196440f844be32600507b6a026bca318675d5cd0", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-options \"-Wdeprecated-declarations\" } */\n+\n+/* IGNORE_SHORT_MACRO is < 32 characters long, and hence its location\n+   can be stored without needing an ad-hoc location.  */\n+\n+#define IGNORE_SHORT_MACRO  _Pragma(\"GCC diagnostic ignored \\\"-Wdeprecated-declarations\\\"\")\n+__attribute__((deprecated)) void f();\n+int main() {\n+    IGNORE_SHORT_MACRO\n+    f();\n+}"}, {"sha": "bbf4759368b60c04ce11feea06d53bf1598d3a58", "filename": "gcc/testsuite/c-c++-common/pr69543-1.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/196440f844be32600507b6a026bca318675d5cd0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69543-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/196440f844be32600507b6a026bca318675d5cd0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69543-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69543-1.c?ref=196440f844be32600507b6a026bca318675d5cd0", "patch": "@@ -3,8 +3,6 @@\n /* Verify disabling a warning, where the _Pragma is within\n    a macro, but the affected code is *not* in a macro.  */\n \n-/* TODO: XFAIL: why does g++ still emit a warning here? (works for C).  */\n-\n # define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\t\\\n     _Pragma (\"GCC diagnostic push\") \\\n     _Pragma (\"GCC diagnostic ignored \\\"-Wuninitialized\\\"\")\\\n@@ -16,6 +14,6 @@ void test (char yylval)\n {\n   char *yyvsp;\n   YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n-  *++yyvsp = yylval; /* { dg-bogus \"used uninitialized\" \"\" { xfail { c++ } } } */\n+  *++yyvsp = yylval;\n   YY_IGNORE_MAYBE_UNINITIALIZED_END\n }"}, {"sha": "1dfcf8dbb72109bd6148075658aecdd4e8b0bf68", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/196440f844be32600507b6a026bca318675d5cd0/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/196440f844be32600507b6a026bca318675d5cd0/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=196440f844be32600507b6a026bca318675d5cd0", "patch": "@@ -1,3 +1,13 @@\n+2016-02-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR preprocessor/69126\n+\tPR preprocessor/69543\n+\t* line-map.c (linemap_compare_locations): At the function top,\n+\treplace inlined bodies of get_location_from_adhoc_loc with calls\n+\tto get_location_from_adhoc_loc.  Add a pair of calls to\n+\tget_location_from_adhoc_loc at the bottom of the function, to\n+\tavoid meaningless comparisons of ad-hoc and non-ad-hoc locations.\n+\n 2016-02-08  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR preprocessor/69664"}, {"sha": "c05a001dcc429a33d930b596088c9875e3d3796c", "filename": "libcpp/line-map.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/196440f844be32600507b6a026bca318675d5cd0/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/196440f844be32600507b6a026bca318675d5cd0/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=196440f844be32600507b6a026bca318675d5cd0", "patch": "@@ -1328,9 +1328,9 @@ linemap_compare_locations (struct line_maps *set,\n   source_location l0 = pre, l1 = post;\n \n   if (IS_ADHOC_LOC (l0))\n-    l0 = set->location_adhoc_data_map.data[l0 & MAX_SOURCE_LOCATION].locus;\n+    l0 = get_location_from_adhoc_loc (set, l0);\n   if (IS_ADHOC_LOC (l1))\n-    l1 = set->location_adhoc_data_map.data[l1 & MAX_SOURCE_LOCATION].locus;\n+    l1 = get_location_from_adhoc_loc (set, l1);\n \n   if (l0 == l1)\n     return 0;\n@@ -1365,6 +1365,11 @@ linemap_compare_locations (struct line_maps *set,\n       return i1 - i0;\n     }\n \n+  if (IS_ADHOC_LOC (l0))\n+    l0 = get_location_from_adhoc_loc (set, l0);\n+  if (IS_ADHOC_LOC (l1))\n+    l1 = get_location_from_adhoc_loc (set, l1);\n+\n   return l1 - l0;\n }\n "}]}