{"sha": "e1fb4ad3325352d6820722ee2966b9bfd4a3f712", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFmYjRhZDMzMjUzNTJkNjgyMDcyMmVlMjk2NmI5YmZkNGEzZjcxMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-09-12T13:20:17Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-09-12T13:20:17Z"}, "message": "re PR tree-optimization/58404 (&noninvariant_address not forwproped into ->handled_component)\n\n2013-09-12  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/58404\n\t* tree-ssa-forwprop.c (forward_propagate_addr_expr_1): Also\n\tpropagate non-invariant addresses into dereferences wrapped\n\tin component references.\n\n\t* g++.dg/tree-ssa/pr58404.C: New testcase.\n\nFrom-SVN: r202525", "tree": {"sha": "f71e1f5d4b41a5d90459e260266a7cec947e9d59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f71e1f5d4b41a5d90459e260266a7cec947e9d59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1fb4ad3325352d6820722ee2966b9bfd4a3f712", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1fb4ad3325352d6820722ee2966b9bfd4a3f712", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1fb4ad3325352d6820722ee2966b9bfd4a3f712", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1fb4ad3325352d6820722ee2966b9bfd4a3f712/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "154c91887b3709c1a2c2407d1dcb2000d3e9b4a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/154c91887b3709c1a2c2407d1dcb2000d3e9b4a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/154c91887b3709c1a2c2407d1dcb2000d3e9b4a7"}], "stats": {"total": 78, "additions": 58, "deletions": 20}, "files": [{"sha": "7a0d375fc33832ffb5daeea8b53b010a75f45ec4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1fb4ad3325352d6820722ee2966b9bfd4a3f712/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1fb4ad3325352d6820722ee2966b9bfd4a3f712/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1fb4ad3325352d6820722ee2966b9bfd4a3f712", "patch": "@@ -1,3 +1,10 @@\n+2013-09-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/58404\n+\t* tree-ssa-forwprop.c (forward_propagate_addr_expr_1): Also\n+\tpropagate non-invariant addresses into dereferences wrapped\n+\tin component references.\n+\n 2013-09-12  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/58402"}, {"sha": "75110d9021d388276d6d64ba8d854df8c1cb0ee5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1fb4ad3325352d6820722ee2966b9bfd4a3f712/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1fb4ad3325352d6820722ee2966b9bfd4a3f712/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e1fb4ad3325352d6820722ee2966b9bfd4a3f712", "patch": "@@ -1,3 +1,8 @@\n+2013-09-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/58404\n+\t* g++.dg/tree-ssa/pr58404.C: New testcase.\n+\n 2013-09-12  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/58371"}, {"sha": "aa8fb796c6f81f4639520c684b0dd0201cc413a4", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr58404.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1fb4ad3325352d6820722ee2966b9bfd4a3f712/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr58404.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1fb4ad3325352d6820722ee2966b9bfd4a3f712/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr58404.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr58404.C?ref=e1fb4ad3325352d6820722ee2966b9bfd4a3f712", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do compile }\n+// { dg-options \"-O -fdump-tree-cddce1\" }\n+\n+struct S { int s; };\n+S a[1024];\n+\n+void\n+foo ()\n+{\n+  for (int i = 0; i < 1024; i++)\n+    {\n+      S &r = a[i];\n+      r.s++;\n+    }\n+}\n+\n+// We should propagate the reference into both memory accesses\n+// during the first forwprop pass\n+// { dg-final { scan-tree-dump-times \"= &a\" 0 \"cddce1\" } }\n+// { dg-final { cleanup-tree-dump \"cddce1\" } }"}, {"sha": "f1a407774fb6d3bb1d4f2777d5adee33d0e14c30", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1fb4ad3325352d6820722ee2966b9bfd4a3f712/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1fb4ad3325352d6820722ee2966b9bfd4a3f712/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=e1fb4ad3325352d6820722ee2966b9bfd4a3f712", "patch": "@@ -786,9 +786,10 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs,\n \n   /* Now strip away any outer COMPONENT_REF/ARRAY_REF nodes from the LHS.\n      ADDR_EXPR will not appear on the LHS.  */\n-  lhs = gimple_assign_lhs (use_stmt);\n-  while (handled_component_p (lhs))\n-    lhs = TREE_OPERAND (lhs, 0);\n+  tree *lhsp = gimple_assign_lhs_ptr (use_stmt);\n+  while (handled_component_p (*lhsp))\n+    lhsp = &TREE_OPERAND (*lhsp, 0);\n+  lhs = *lhsp;\n \n   /* Now see if the LHS node is a MEM_REF using NAME.  If so,\n      propagate the ADDR_EXPR into the use of NAME and fold the result.  */\n@@ -822,11 +823,13 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs,\n       /* If the LHS is a plain dereference and the value type is the same as\n          that of the pointed-to type of the address we can put the\n \t dereferenced address on the LHS preserving the original alias-type.  */\n-      else if (gimple_assign_lhs (use_stmt) == lhs\n-\t       && integer_zerop (TREE_OPERAND (lhs, 1))\n-\t       && useless_type_conversion_p\n-\t            (TREE_TYPE (TREE_OPERAND (def_rhs, 0)),\n-\t\t     TREE_TYPE (gimple_assign_rhs1 (use_stmt)))\n+      else if (integer_zerop (TREE_OPERAND (lhs, 1))\n+\t       && ((gimple_assign_lhs (use_stmt) == lhs\n+\t\t    && useless_type_conversion_p\n+\t\t         (TREE_TYPE (TREE_OPERAND (def_rhs, 0)),\n+\t\t          TREE_TYPE (gimple_assign_rhs1 (use_stmt))))\n+\t\t   || types_compatible_p (TREE_TYPE (lhs),\n+\t\t\t\t\t  TREE_TYPE (TREE_OPERAND (def_rhs, 0))))\n \t       /* Don't forward anything into clobber stmts if it would result\n \t\t  in the lhs no longer being a MEM_REF.  */\n \t       && (!gimple_clobber_p (use_stmt)\n@@ -854,7 +857,7 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs,\n \t  TREE_SIDE_EFFECTS (*def_rhs_basep) = TREE_SIDE_EFFECTS (lhs);\n \t  TREE_THIS_NOTRAP (*def_rhs_basep) = TREE_THIS_NOTRAP (lhs);\n \t  new_lhs = unshare_expr (TREE_OPERAND (def_rhs, 0));\n-\t  gimple_assign_set_lhs (use_stmt, new_lhs);\n+\t  *lhsp = new_lhs;\n \t  TREE_THIS_VOLATILE (new_lhs) = TREE_THIS_VOLATILE (lhs);\n \t  TREE_SIDE_EFFECTS (new_lhs) = TREE_SIDE_EFFECTS (lhs);\n \t  *def_rhs_basep = saved;\n@@ -873,11 +876,12 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs,\n \n   /* Strip away any outer COMPONENT_REF, ARRAY_REF or ADDR_EXPR\n      nodes from the RHS.  */\n-  rhs = gimple_assign_rhs1 (use_stmt);\n-  if (TREE_CODE (rhs) == ADDR_EXPR)\n-    rhs = TREE_OPERAND (rhs, 0);\n-  while (handled_component_p (rhs))\n-    rhs = TREE_OPERAND (rhs, 0);\n+  tree *rhsp = gimple_assign_rhs1_ptr (use_stmt);\n+  if (TREE_CODE (*rhsp) == ADDR_EXPR)\n+    rhsp = &TREE_OPERAND (*rhsp, 0);\n+  while (handled_component_p (*rhsp))\n+    rhsp = &TREE_OPERAND (*rhsp, 0);\n+  rhs = *rhsp;\n \n   /* Now see if the RHS node is a MEM_REF using NAME.  If so,\n      propagate the ADDR_EXPR into the use of NAME and fold the result.  */\n@@ -909,11 +913,13 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs,\n       /* If the RHS is a plain dereference and the value type is the same as\n          that of the pointed-to type of the address we can put the\n \t dereferenced address on the RHS preserving the original alias-type.  */\n-      else if (gimple_assign_rhs1 (use_stmt) == rhs\n-\t       && integer_zerop (TREE_OPERAND (rhs, 1))\n-\t       && useless_type_conversion_p\n-\t\t    (TREE_TYPE (gimple_assign_lhs (use_stmt)),\n-\t\t     TREE_TYPE (TREE_OPERAND (def_rhs, 0))))\n+      else if (integer_zerop (TREE_OPERAND (rhs, 1))\n+\t       && ((gimple_assign_rhs1 (use_stmt) == rhs\n+\t\t    && useless_type_conversion_p\n+\t\t         (TREE_TYPE (gimple_assign_lhs (use_stmt)),\n+\t\t          TREE_TYPE (TREE_OPERAND (def_rhs, 0))))\n+\t\t   || types_compatible_p (TREE_TYPE (rhs),\n+\t\t\t\t\t  TREE_TYPE (TREE_OPERAND (def_rhs, 0)))))\n \t{\n \t  tree *def_rhs_basep = &TREE_OPERAND (def_rhs, 0);\n \t  tree new_offset, new_base, saved, new_rhs;\n@@ -937,7 +943,7 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs,\n \t  TREE_SIDE_EFFECTS (*def_rhs_basep) = TREE_SIDE_EFFECTS (rhs);\n \t  TREE_THIS_NOTRAP (*def_rhs_basep) = TREE_THIS_NOTRAP (rhs);\n \t  new_rhs = unshare_expr (TREE_OPERAND (def_rhs, 0));\n-\t  gimple_assign_set_rhs1 (use_stmt, new_rhs);\n+\t  *rhsp = new_rhs;\n \t  TREE_THIS_VOLATILE (new_rhs) = TREE_THIS_VOLATILE (rhs);\n \t  TREE_SIDE_EFFECTS (new_rhs) = TREE_SIDE_EFFECTS (rhs);\n \t  *def_rhs_basep = saved;"}]}