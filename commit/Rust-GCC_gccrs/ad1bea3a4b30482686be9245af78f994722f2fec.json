{"sha": "ad1bea3a4b30482686be9245af78f994722f2fec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQxYmVhM2E0YjMwNDgyNjg2YmU5MjQ1YWY3OGY5OTQ3MjJmMmZlYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-07-23T13:54:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-07-23T13:56:56Z"}, "message": "[Ada] Stub CUDA_Execute and CUDA_Global pragmas\n\nThis commit adds CUDA_Execute and CUDA_Global to the list of allowed\npragmas. It also implements basic validation of said pragmas.\n\ngcc/ada/\n\n\t* aspects.ads: Declare CUDA_Global as aspect.\n\t* einfo.ads: Use Flag118 for the Is_CUDA_Kernel flag.\n\t(Set_Is_CUDA_Kernel): New function.\n\t(Is_CUDA_Kernel): New function.\n\t* einfo.adb (Set_Is_CUDA_Kernel): New function.\n\t(Is_CUDA_Kernel): New function.\n\t* par-prag.adb (Prag): Ignore Pragma_CUDA_Execute and\n\tPragma_CUDA_global.\n\t* rtsfind.ads: Define CUDA.Driver_Types.Stream_T and\n\tCUDA.Vector_Types.Dim3 entities\n\t* rtsfind.adb: Define CUDA_Descendant subtype.\n\t(Get_Unit_Name): Handle CUDA_Descendant packages.\n\t* sem_prag.ads: Mark CUDA_Global as aspect-specifying pragma.\n\t* sem_prag.adb (Analyze_Pragma): Validate Pragma_CUDA_Execute and\n\tPragma_CUDA_Global.\n\t* snames.ads-tmpl: Define Name_CUDA_Execute and Name_CUDA_Global.", "tree": {"sha": "6391903a937f03422a0d620f1a9dabedbb241924", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6391903a937f03422a0d620f1a9dabedbb241924"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad1bea3a4b30482686be9245af78f994722f2fec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad1bea3a4b30482686be9245af78f994722f2fec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad1bea3a4b30482686be9245af78f994722f2fec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad1bea3a4b30482686be9245af78f994722f2fec/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3968b02a4b1dd783b6a8376175061adc195110f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3968b02a4b1dd783b6a8376175061adc195110f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3968b02a4b1dd783b6a8376175061adc195110f4"}], "stats": {"total": 242, "additions": 221, "deletions": 21}, "files": [{"sha": "03941065b8007bb834e15dcc6dd44953e125d25e", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1bea3a4b30482686be9245af78f994722f2fec/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1bea3a4b30482686be9245af78f994722f2fec/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=ad1bea3a4b30482686be9245af78f994722f2fec", "patch": "@@ -189,6 +189,7 @@ package Aspects is\n       Aspect_Atomic_Components,\n       Aspect_Disable_Controlled,            -- GNAT\n       Aspect_Discard_Names,\n+      Aspect_CUDA_Global,                   -- GNAT\n       Aspect_Export,\n       Aspect_Favor_Top_Level,               -- GNAT\n       Aspect_Independent,\n@@ -458,6 +459,7 @@ package Aspects is\n       Aspect_Contract_Cases               => False,\n       Aspect_Convention                   => True,\n       Aspect_CPU                          => False,\n+      Aspect_CUDA_Global                  => False,\n       Aspect_Default_Component_Value      => True,\n       Aspect_Default_Initial_Condition    => False,\n       Aspect_Default_Iterator             => False,\n@@ -601,6 +603,7 @@ package Aspects is\n       Aspect_Contract_Cases               => Name_Contract_Cases,\n       Aspect_Convention                   => Name_Convention,\n       Aspect_CPU                          => Name_CPU,\n+      Aspect_CUDA_Global                  => Name_CUDA_Global,\n       Aspect_Default_Component_Value      => Name_Default_Component_Value,\n       Aspect_Default_Initial_Condition    => Name_Default_Initial_Condition,\n       Aspect_Default_Iterator             => Name_Default_Iterator,\n@@ -839,6 +842,7 @@ package Aspects is\n       Aspect_Attach_Handler               => Always_Delay,\n       Aspect_Constant_Indexing            => Always_Delay,\n       Aspect_CPU                          => Always_Delay,\n+      Aspect_CUDA_Global                  => Always_Delay,\n       Aspect_Default_Iterator             => Always_Delay,\n       Aspect_Default_Storage_Pool         => Always_Delay,\n       Aspect_Default_Value                => Always_Delay,"}, {"sha": "6cdea4801a604c1b74812c8b7d27b0baa02c9ddd", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1bea3a4b30482686be9245af78f994722f2fec/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1bea3a4b30482686be9245af78f994722f2fec/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=ad1bea3a4b30482686be9245af78f994722f2fec", "patch": "@@ -423,6 +423,7 @@ package body Einfo is\n    --    Never_Set_In_Source             Flag115\n    --    Is_Visible_Lib_Unit             Flag116\n    --    Is_Unchecked_Union              Flag117\n+   --    Is_CUDA_Kernel                  Flag118\n    --    Has_Convention_Pragma           Flag119\n    --    Has_Primitive_Operations        Flag120\n \n@@ -2235,6 +2236,12 @@ package body Einfo is\n       return Flag74 (Id);\n    end Is_CPP_Class;\n \n+   function Is_CUDA_Kernel (Id : E) return B is\n+   begin\n+      pragma Assert (Ekind (Id) in E_Function | E_Procedure);\n+      return Flag118 (Id);\n+   end Is_CUDA_Kernel;\n+\n    function Is_DIC_Procedure (Id : E) return B is\n    begin\n       pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n@@ -5477,6 +5484,12 @@ package body Einfo is\n       Set_Flag74 (Id, V);\n    end Set_Is_CPP_Class;\n \n+   procedure Set_Is_CUDA_Kernel (Id : E; V : B := True) is\n+   begin\n+      pragma Assert (Ekind (Id) in E_Function | E_Procedure);\n+      Set_Flag118 (Id, V);\n+   end Set_Is_CUDA_Kernel;\n+\n    procedure Set_Is_DIC_Procedure (Id : E; V : B := True) is\n    begin\n       pragma Assert (Ekind (Id) = E_Procedure);\n@@ -9848,6 +9861,7 @@ package body Einfo is\n       W (\"Is_Atomic\",                       Flag85  (Id));\n       W (\"Is_Bit_Packed_Array\",             Flag122 (Id));\n       W (\"Is_CPP_Class\",                    Flag74  (Id));\n+      W (\"Is_CUDA_Kernel\",                  Flag118  (Id));\n       W (\"Is_Called\",                       Flag102 (Id));\n       W (\"Is_Character_Type\",               Flag63  (Id));\n       W (\"Is_Checked_Ghost_Entity\",         Flag277 (Id));"}, {"sha": "7932c9270b4a274e91148e9ad1a7576e8f5eb9f6", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1bea3a4b30482686be9245af78f994722f2fec/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1bea3a4b30482686be9245af78f994722f2fec/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=ad1bea3a4b30482686be9245af78f994722f2fec", "patch": "@@ -2508,6 +2508,10 @@ package Einfo is\n --       Defined in all type entities, set only for tagged types to which a\n --       valid pragma Import (CPP, ...) or pragma CPP_Class has been applied.\n \n+--    Is_CUDA_Kernel (Flag118)\n+--       Defined in function and procedure entities. Set if the subprogram is a\n+--       CUDA kernel.\n+\n --    Is_Decimal_Fixed_Point_Type (synthesized)\n --       Applies to all type entities, true for decimal fixed point\n --       types and subtypes.\n@@ -6239,6 +6243,7 @@ package Einfo is\n    --    Is_Abstract_Subprogram              (Flag19)   (non-generic case only)\n    --    Is_Called                           (Flag102)  (non-generic case only)\n    --    Is_Constructor                      (Flag76)\n+   --    Is_CUDA_Kernel                      (Flag118)  (non-generic case only)\n    --    Is_DIC_Procedure                    (Flag132)  (non-generic case only)\n    --    Is_Discrim_SO_Function              (Flag176)\n    --    Is_Discriminant_Check_Function      (Flag264)\n@@ -6566,6 +6571,7 @@ package Einfo is\n    --    Is_Asynchronous                     (Flag81)\n    --    Is_Called                           (Flag102)  (non-generic case only)\n    --    Is_Constructor                      (Flag76)\n+   --    Is_CUDA_Kernel                      (Flag118)\n    --    Is_DIC_Procedure                    (Flag132)  (non-generic case only)\n    --    Is_Elaboration_Checks_OK_Id         (Flag148)\n    --    Is_Elaboration_Warnings_OK_Id       (Flag304)\n@@ -7345,6 +7351,7 @@ package Einfo is\n    function Is_Controlled_Active                (Id : E) return B;\n    function Is_Controlling_Formal               (Id : E) return B;\n    function Is_CPP_Class                        (Id : E) return B;\n+   function Is_CUDA_Kernel                      (Id : E) return B;\n    function Is_Descendant_Of_Address            (Id : E) return B;\n    function Is_DIC_Procedure                    (Id : E) return B;\n    function Is_Discrim_SO_Function              (Id : E) return B;\n@@ -8060,6 +8067,7 @@ package Einfo is\n    procedure Set_Is_Controlled_Active            (Id : E; V : B := True);\n    procedure Set_Is_Controlling_Formal           (Id : E; V : B := True);\n    procedure Set_Is_CPP_Class                    (Id : E; V : B := True);\n+   procedure Set_Is_CUDA_Kernel                  (Id : E; V : B := True);\n    procedure Set_Is_Descendant_Of_Address        (Id : E; V : B := True);\n    procedure Set_Is_DIC_Procedure                (Id : E; V : B := True);\n    procedure Set_Is_Discrim_SO_Function          (Id : E; V : B := True);\n@@ -8904,6 +8912,7 @@ package Einfo is\n    pragma Inline (Is_Controlled_Active);\n    pragma Inline (Is_Controlling_Formal);\n    pragma Inline (Is_CPP_Class);\n+   pragma Inline (Is_CUDA_Kernel);\n    pragma Inline (Is_Decimal_Fixed_Point_Type);\n    pragma Inline (Is_Descendant_Of_Address);\n    pragma Inline (Is_DIC_Procedure);\n@@ -9506,6 +9515,7 @@ package Einfo is\n    pragma Inline (Set_Is_Controlled_Active);\n    pragma Inline (Set_Is_Controlling_Formal);\n    pragma Inline (Set_Is_CPP_Class);\n+   pragma Inline (Set_Is_CUDA_Kernel);\n    pragma Inline (Set_Is_Descendant_Of_Address);\n    pragma Inline (Set_Is_DIC_Procedure);\n    pragma Inline (Set_Is_Discrim_SO_Function);"}, {"sha": "259d15fb0cbf505b31520bd5bd83fc021048b032", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1bea3a4b30482686be9245af78f994722f2fec/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1bea3a4b30482686be9245af78f994722f2fec/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=ad1bea3a4b30482686be9245af78f994722f2fec", "patch": "@@ -1311,43 +1311,45 @@ begin\n       when Pragma_Abort_Defer\n          | Pragma_Abstract_State\n          | Pragma_Aggregate_Individually_Assign\n-         | Pragma_Async_Readers\n-         | Pragma_Async_Writers\n-         | Pragma_Assertion_Policy\n-         | Pragma_Assume\n-         | Pragma_Assume_No_Invalid_Values\n          | Pragma_All_Calls_Remote\n          | Pragma_Allow_Integer_Address\n          | Pragma_Annotate\n          | Pragma_Assert\n          | Pragma_Assert_And_Cut\n+         | Pragma_Assertion_Policy\n+         | Pragma_Assume\n+         | Pragma_Assume_No_Invalid_Values\n+         | Pragma_Async_Readers\n+         | Pragma_Async_Writers\n          | Pragma_Asynchronous\n          | Pragma_Atomic\n          | Pragma_Atomic_Components\n          | Pragma_Attach_Handler\n          | Pragma_Attribute_Definition\n-         | Pragma_Check\n-         | Pragma_Check_Float_Overflow\n-         | Pragma_Check_Name\n-         | Pragma_Check_Policy\n-         | Pragma_Compile_Time_Error\n-         | Pragma_Compile_Time_Warning\n-         | Pragma_Constant_After_Elaboration\n-         | Pragma_Contract_Cases\n-         | Pragma_Convention_Identifier\n          | Pragma_CPP_Class\n          | Pragma_CPP_Constructor\n          | Pragma_CPP_Virtual\n          | Pragma_CPP_Vtable\n          | Pragma_CPU\n+         | Pragma_CUDA_Execute\n+         | Pragma_CUDA_Global\n          | Pragma_C_Pass_By_Copy\n+         | Pragma_Check\n+         | Pragma_Check_Float_Overflow\n+         | Pragma_Check_Name\n+         | Pragma_Check_Policy\n          | Pragma_Comment\n          | Pragma_Common_Object\n+         | Pragma_Compile_Time_Error\n+         | Pragma_Compile_Time_Warning\n          | Pragma_Complete_Representation\n          | Pragma_Complex_Representation\n          | Pragma_Component_Alignment\n+         | Pragma_Constant_After_Elaboration\n+         | Pragma_Contract_Cases\n          | Pragma_Controlled\n          | Pragma_Convention\n+         | Pragma_Convention_Identifier\n          | Pragma_Deadline_Floor\n          | Pragma_Debug_Policy\n          | Pragma_Default_Initial_Condition\n@@ -1446,19 +1448,19 @@ begin\n          | Pragma_Part_Of\n          | Pragma_Partition_Elaboration_Policy\n          | Pragma_Passive\n-         | Pragma_Preelaborable_Initialization\n-         | Pragma_Polling\n-         | Pragma_Prefix_Exception_Messages\n          | Pragma_Persistent_BSS\n+         | Pragma_Polling\n          | Pragma_Post\n-         | Pragma_Postcondition\n          | Pragma_Post_Class\n+         | Pragma_Postcondition\n          | Pragma_Pre\n+         | Pragma_Pre_Class\n          | Pragma_Precondition\n          | Pragma_Predicate\n          | Pragma_Predicate_Failure\n+         | Pragma_Preelaborable_Initialization\n          | Pragma_Preelaborate\n-         | Pragma_Pre_Class\n+         | Pragma_Prefix_Exception_Messages\n          | Pragma_Priority\n          | Pragma_Priority_Specific_Dispatching\n          | Pragma_Profile\n@@ -1482,14 +1484,14 @@ begin\n          | Pragma_Rename_Pragma\n          | Pragma_Restricted_Run_Time\n          | Pragma_Reviewable\n+         | Pragma_SPARK_Mode\n          | Pragma_Secondary_Stack_Size\n          | Pragma_Share_Generic\n          | Pragma_Shared\n          | Pragma_Shared_Passive\n          | Pragma_Short_Circuit_And_Or\n          | Pragma_Short_Descriptors\n          | Pragma_Simple_Storage_Pool_Type\n-         | Pragma_SPARK_Mode\n          | Pragma_Static_Elaboration_Desired\n          | Pragma_Storage_Size\n          | Pragma_Storage_Unit"}, {"sha": "5cf3b91ecb92b6a0c873decaac3d35b061c64772", "filename": "gcc/ada/rtsfind.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1bea3a4b30482686be9245af78f994722f2fec/gcc%2Fada%2Frtsfind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1bea3a4b30482686be9245af78f994722f2fec/gcc%2Fada%2Frtsfind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.adb?ref=ad1bea3a4b30482686be9245af78f994722f2fec", "patch": "@@ -585,6 +585,9 @@ package body Rtsfind is\n      range Ada_Wide_Wide_Text_IO_Decimal_IO ..\n            Ada_Wide_Wide_Text_IO_Modular_IO;\n \n+   subtype CUDA_Descendant is RTU_Id\n+     range CUDA_Driver_Types .. CUDA_Vector_Types;\n+\n    subtype Interfaces_Descendant is RTU_Id\n      range Interfaces_Packed_Decimal .. Interfaces_Packed_Decimal;\n \n@@ -665,6 +668,9 @@ package body Rtsfind is\n             Name_Buffer (22) := '.';\n          end if;\n \n+      elsif U_Id in CUDA_Descendant then\n+         Name_Buffer (5) := '.';\n+\n       elsif U_Id in Interfaces_Descendant then\n          Name_Buffer (11) := '.';\n "}, {"sha": "ff9eb0aa83bfe6b445d4e30527bfcc476814a9f6", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1bea3a4b30482686be9245af78f994722f2fec/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1bea3a4b30482686be9245af78f994722f2fec/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=ad1bea3a4b30482686be9245af78f994722f2fec", "patch": "@@ -159,6 +159,15 @@ package Rtsfind is\n       Ada_Wide_Wide_Text_IO_Integer_IO,\n       Ada_Wide_Wide_Text_IO_Modular_IO,\n \n+      --  CUDA\n+\n+      CUDA,\n+\n+      --  Children of CUDA\n+\n+      CUDA_Driver_Types,\n+      CUDA_Vector_Types,\n+\n       --  Interfaces\n \n       Interfaces,\n@@ -614,6 +623,10 @@ package Rtsfind is\n      RO_WW_Decimal_IO,                   -- Ada.Wide_Wide_Text_IO\n      RO_WW_Fixed_IO,                     -- Ada.Wide_Wide_Text_IO\n \n+     RE_Stream_T,                        -- CUDA.Driver_Types\n+\n+     RE_Dim3,                            -- CUDA.Vector_Types\n+\n      RE_Integer_8,                       -- Interfaces\n      RE_Integer_16,                      -- Interfaces\n      RE_Integer_32,                      -- Interfaces\n@@ -1901,6 +1914,10 @@ package Rtsfind is\n      RO_WW_Decimal_IO                    => Ada_Wide_Wide_Text_IO,\n      RO_WW_Fixed_IO                      => Ada_Wide_Wide_Text_IO,\n \n+     RE_Stream_T                         => CUDA_Driver_Types,\n+\n+     RE_Dim3                             => CUDA_Vector_Types,\n+\n      RE_Integer_8                        => Interfaces,\n      RE_Integer_16                       => Interfaces,\n      RE_Integer_32                       => Interfaces,"}, {"sha": "f7019caebea8b702298ad00165928fffcd86c575", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 143, "deletions": 1, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1bea3a4b30482686be9245af78f994722f2fec/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1bea3a4b30482686be9245af78f994722f2fec/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=ad1bea3a4b30482686be9245af78f994722f2fec", "patch": "@@ -3789,7 +3789,8 @@ package body Sem_Prag is\n       Arg2 : Node_Id;\n       Arg3 : Node_Id;\n       Arg4 : Node_Id;\n-      --  First four pragma arguments (pragma argument association nodes, or\n+      Arg5 : Node_Id;\n+      --  First five pragma arguments (pragma argument association nodes, or\n       --  Empty if the corresponding argument does not exist).\n \n       type Name_List is array (Natural range <>) of Name_Id;\n@@ -11535,6 +11536,7 @@ package body Sem_Prag is\n       Arg2      := Empty;\n       Arg3      := Empty;\n       Arg4      := Empty;\n+      Arg5      := Empty;\n \n       if Present (Pragma_Argument_Associations (N)) then\n          Arg_Count := List_Length (Pragma_Argument_Associations (N));\n@@ -11548,6 +11550,10 @@ package body Sem_Prag is\n \n                if Present (Arg3) then\n                   Arg4 := Next (Arg3);\n+\n+                  if Present (Arg4) then\n+                     Arg5 := Next (Arg4);\n+                  end if;\n                end if;\n             end if;\n          end if;\n@@ -14765,6 +14771,140 @@ package body Sem_Prag is\n                   & \"effect?j?\", N);\n             end if;\n \n+         --------------------\n+         -- CUDA_Execute --\n+         --------------------\n+\n+         --    pragma CUDA_Execute (PROCEDURE_CALL_STATEMENT,\n+         --                         EXPRESSION,\n+         --                         EXPRESSION,\n+         --                         [, EXPRESSION\n+         --                         [, EXPRESSION]]);\n+\n+         when Pragma_CUDA_Execute => CUDA_Execute : declare\n+\n+            function Is_Acceptable_Dim3 (N : Node_Id) return Boolean;\n+            --  Returns True if N is an acceptable argument for CUDA_Execute,\n+            --  false otherwise.\n+\n+            ------------------------\n+            -- Is_Acceptable_Dim3 --\n+            ------------------------\n+\n+            function Is_Acceptable_Dim3 (N : Node_Id) return Boolean is\n+               Tmp : Node_Id;\n+            begin\n+               if Etype (N) = RTE (RE_Dim3) or else Is_Integer_Type (Etype (N))\n+               then\n+                  return True;\n+               end if;\n+\n+               if Nkind (N) = N_Aggregate\n+                 and then List_Length (Expressions (N)) = 3\n+               then\n+                  Tmp := First (Expressions (N));\n+                  while Present (Tmp) loop\n+                     Analyze_And_Resolve (Tmp, Any_Integer);\n+                     Tmp := Next (Tmp);\n+                  end loop;\n+                  return True;\n+               end if;\n+\n+               return False;\n+            end Is_Acceptable_Dim3;\n+\n+            --  Local variables\n+\n+            Block_Dimensions : constant Node_Id := Get_Pragma_Arg (Arg3);\n+            Grid_Dimensions  : constant Node_Id := Get_Pragma_Arg (Arg2);\n+            Kernel_Call      : constant Node_Id := Get_Pragma_Arg (Arg1);\n+            Shared_Memory    : Node_Id;\n+            Stream           : Node_Id;\n+\n+            --  Start of processing for CUDA_Execute\n+\n+         begin\n+\n+            GNAT_Pragma;\n+            Check_At_Least_N_Arguments (3);\n+            Check_At_Most_N_Arguments (5);\n+\n+            Analyze_And_Resolve (Kernel_Call);\n+            if Nkind (Kernel_Call) /= N_Function_Call\n+               or else Etype (Kernel_Call) /= Standard_Void_Type\n+            then\n+               --  In `pragma CUDA_Execute (Kernel_Call (...), ...)`,\n+               --  GNAT sees Kernel_Call as an N_Function_Call since\n+               --  Kernel_Call \"looks\" like an expression. However, only\n+               --  procedures can be kernels, so to make things easier for the\n+               --  user the error message complains about Kernel_Call not being\n+               --  a procedure call.\n+\n+               Error_Msg_N (\"first argument of & must be a procedure call\", N);\n+            end if;\n+\n+            Analyze (Grid_Dimensions);\n+            if not Is_Acceptable_Dim3 (Grid_Dimensions) then\n+               Error_Msg_N\n+                 (\"second argument of & must be an Integer, Dim3 or aggregate \"\n+                  & \"containing 3 Integers\", N);\n+            end if;\n+\n+            Analyze (Block_Dimensions);\n+            if not Is_Acceptable_Dim3 (Block_Dimensions) then\n+               Error_Msg_N\n+                 (\"third argument of & must be an Integer, Dim3 or aggregate \"\n+                  & \"containing 3 Integers\", N);\n+            end if;\n+\n+            if Present (Arg4) then\n+               Shared_Memory := Get_Pragma_Arg (Arg4);\n+               Analyze_And_Resolve (Shared_Memory, Any_Integer);\n+\n+               if Present (Arg5) then\n+                  Stream := Get_Pragma_Arg (Arg5);\n+                  Analyze_And_Resolve (Stream, RTE (RE_Stream_T));\n+               end if;\n+            end if;\n+         end CUDA_Execute;\n+\n+         -----------------\n+         -- CUDA_Global --\n+         -----------------\n+\n+         --  pragma CUDA_Global (IDENTIFIER);\n+\n+         when Pragma_CUDA_Global => CUDA_Global : declare\n+            Arg_Node    : Node_Id;\n+            Kernel_Proc : Entity_Id;\n+            Pack_Id     : Entity_Id;\n+         begin\n+            GNAT_Pragma;\n+            Check_At_Least_N_Arguments (1);\n+            Check_At_Most_N_Arguments (1);\n+            Check_Optional_Identifier (Arg1, Name_Entity);\n+            Check_Arg_Is_Local_Name (Arg1);\n+\n+            Arg_Node := Get_Pragma_Arg (Arg1);\n+            Analyze (Arg_Node);\n+\n+            Kernel_Proc := Entity (Arg_Node);\n+            Pack_Id := Scope (Kernel_Proc);\n+\n+            if Ekind (Kernel_Proc) /= E_Procedure then\n+               Error_Msg_NE (\"& must be a procedure\", N, Kernel_Proc);\n+\n+            elsif Ekind (Pack_Id) /= E_Package\n+              or else not Is_Library_Level_Entity (Pack_Id)\n+            then\n+               Error_Msg_NE\n+                  (\"& must reside in a library-level package\", N, Kernel_Proc);\n+\n+            else\n+               Set_Is_CUDA_Kernel (Kernel_Proc);\n+            end if;\n+         end CUDA_Global;\n+\n          ----------------\n          -- CPP_Vtable --\n          ----------------\n@@ -30690,6 +30830,8 @@ package body Sem_Prag is\n       Pragma_C_Pass_By_Copy                 =>  0,\n       Pragma_Comment                        => -1,\n       Pragma_Common_Object                  =>  0,\n+      Pragma_CUDA_Execute                   => -1,\n+      Pragma_CUDA_Global                    => -1,\n       Pragma_Compile_Time_Error             => -1,\n       Pragma_Compile_Time_Warning           => -1,\n       Pragma_Compiler_Unit                  => -1,"}, {"sha": "460fc9ce4774ba1d0a43d75dd1063baa8539bfbc", "filename": "gcc/ada/sem_prag.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1bea3a4b30482686be9245af78f994722f2fec/gcc%2Fada%2Fsem_prag.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1bea3a4b30482686be9245af78f994722f2fec/gcc%2Fada%2Fsem_prag.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.ads?ref=ad1bea3a4b30482686be9245af78f994722f2fec", "patch": "@@ -49,6 +49,7 @@ package Sem_Prag is\n       Pragma_Contract_Cases               => True,\n       Pragma_Convention                   => True,\n       Pragma_CPU                          => True,\n+      Pragma_CUDA_Global                  => True,\n       Pragma_Default_Initial_Condition    => True,\n       Pragma_Default_Storage_Pool         => True,\n       Pragma_Depends                      => True,"}, {"sha": "6310442f9e89333e210682fe97e74e8a81f1c581", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1bea3a4b30482686be9245af78f994722f2fec/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1bea3a4b30482686be9245af78f994722f2fec/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=ad1bea3a4b30482686be9245af78f994722f2fec", "patch": "@@ -514,6 +514,8 @@ package Snames is\n    Name_CPP_Constructor                : constant Name_Id := N + $; -- GNAT\n    Name_CPP_Virtual                    : constant Name_Id := N + $; -- GNAT\n    Name_CPP_Vtable                     : constant Name_Id := N + $; -- GNAT\n+   Name_CUDA_Execute                   : constant Name_Id := N + $; -- GNAT\n+   Name_CUDA_Global                    : constant Name_Id := N + $; -- GNAT\n \n    --  Note: CPU is not in this list because its name matches the name of\n    --  the corresponding attribute. However, it is included in the definition\n@@ -1998,6 +2000,8 @@ package Snames is\n       Pragma_CPP_Constructor,\n       Pragma_CPP_Virtual,\n       Pragma_CPP_Vtable,\n+      Pragma_CUDA_Execute,\n+      Pragma_CUDA_Global,\n       Pragma_Deadline_Floor,\n       Pragma_Debug,\n       Pragma_Default_Initial_Condition,"}]}