{"sha": "b3a5a50c2654771597c96da1b82164623ab7adef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNhNWE1MGMyNjU0NzcxNTk3Yzk2ZGExYjgyMTY0NjIzYWI3YWRlZg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2002-12-11T06:36:17Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-12-11T06:36:17Z"}, "message": "c-common.c (builtin_define_type_max): Handle unsigned types too.\n\n\t* c-common.c (builtin_define_type_max): Handle unsigned\n\ttypes too.\ntestsuite:\n\t* gcc.dg/fshort-wchar: New test.\n\nFrom-SVN: r60023", "tree": {"sha": "2adc3a801640347ac864e1920661c16bf1aba14b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2adc3a801640347ac864e1920661c16bf1aba14b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3a5a50c2654771597c96da1b82164623ab7adef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3a5a50c2654771597c96da1b82164623ab7adef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3a5a50c2654771597c96da1b82164623ab7adef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3a5a50c2654771597c96da1b82164623ab7adef/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ad1121d10ea102d3f193413a4c80e3b48a4ecec2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad1121d10ea102d3f193413a4c80e3b48a4ecec2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad1121d10ea102d3f193413a4c80e3b48a4ecec2"}], "stats": {"total": 78, "additions": 51, "deletions": 27}, "files": [{"sha": "3e0756a638a760d71ba2496e036e220c521d1e84", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3a5a50c2654771597c96da1b82164623ab7adef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3a5a50c2654771597c96da1b82164623ab7adef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b3a5a50c2654771597c96da1b82164623ab7adef", "patch": "@@ -1,3 +1,8 @@\n+2002-12-11  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* c-common.c (builtin_define_type_max): Handle unsigned\n+\ttypes too.\n+\n 2002-12-10  Janis Johnson  <janis187@us.ibm.com>\n \n \tPR other/8882"}, {"sha": "76f79274861698539958192218236744fb14e920", "filename": "gcc/c-common.c", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3a5a50c2654771597c96da1b82164623ab7adef/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3a5a50c2654771597c96da1b82164623ab7adef/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=b3a5a50c2654771597c96da1b82164623ab7adef", "patch": "@@ -5106,50 +5106,47 @@ builtin_define_with_hex_fp_value (macro, type, digits, hex_str, fp_suffix)\n   cpp_define (parse_in, buf);\n }\n \n-/* Define MAX for TYPE based on the precision of the type, which is assumed\n-   to be signed.  IS_LONG is 1 for type \"long\" and 2 for \"long long\".  */\n+/* Define MAX for TYPE based on the precision of the type.  IS_LONG is\n+   1 for type \"long\" and 2 for \"long long\".  We have to handle\n+   unsigned types, since wchar_t might be unsigned.  */\n \n static void\n builtin_define_type_max (macro, type, is_long)\n      const char *macro;\n      tree type;\n      int is_long;\n {\n-  const char *value;\n+  static const char *const values[]\n+    = { \"127\", \"255\",\n+\t\"32767\", \"65535\",\n+\t\"2147483647\", \"4294967295\",\n+\t\"9223372036854775807\", \"18446744073709551615\",\n+\t\"170141183460469231731687303715884105727\",\n+\t\"340282366920938463463374607431768211455\" };\n+  static const char *const suffixes[] = { \"\", \"U\", \"L\", \"UL\", \"LL\", \"ULL\" };\n+\n+  const char *value, *suffix;\n   char *buf;\n-  size_t mlen, vlen, extra;\n+  size_t idx;\n \n   /* Pre-rendering the values mean we don't have to futz with printing a\n      multi-word decimal value.  There are also a very limited number of\n      precisions that we support, so it's really a waste of time.  */\n   switch (TYPE_PRECISION (type))\n     {\n-    case 8:\n-      value = \"127\";\n-      break;\n-    case 16:\n-      value = \"32767\";\n-      break;\n-    case 32:\n-      value = \"2147483647\";\n-      break;\n-    case 64:\n-      value = \"9223372036854775807\";\n-      break;\n-    case 128:\n-      value = \"170141183460469231731687303715884105727\";\n-      break;\n-    default:\n-      abort ();\n+    case 8:\tidx = 0; break;\n+    case 16:\tidx = 2; break;\n+    case 32:\tidx = 4; break;\n+    case 64:\tidx = 6; break;\n+    case 128:\tidx = 8; break;\n+    default:    abort ();\n     }\n \n-  mlen = strlen (macro);\n-  vlen = strlen (value);\n-  extra = 2 + is_long;\n-  buf = alloca (mlen + vlen + extra);\n+  value = values[idx + TREE_UNSIGNED (type)];\n+  suffix = suffixes[is_long * 2 + TREE_UNSIGNED (type)];\n \n-  sprintf (buf, \"%s=%s%s\", macro, value,\n-\t   (is_long == 1 ? \"L\" : is_long == 2 ? \"LL\" : \"\"));\n+  buf = alloca (strlen (macro) + 1 + strlen (value) + strlen (suffix) + 1);\n+  sprintf (buf, \"%s=%s%s\", macro, value, suffix);\n \n   cpp_define (parse_in, buf);\n }"}, {"sha": "f00da68cfc9192eca391b3654ffcd041d5372d80", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3a5a50c2654771597c96da1b82164623ab7adef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3a5a50c2654771597c96da1b82164623ab7adef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b3a5a50c2654771597c96da1b82164623ab7adef", "patch": "@@ -1,3 +1,7 @@\n+2002-12-11  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* gcc.dg/fshort-wchar: New test.\n+\n 2002-12-10  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/8372"}, {"sha": "074e872358bb2161fbe4816c9b64590b845394c7", "filename": "gcc/testsuite/gcc.dg/fshort-wchar.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3a5a50c2654771597c96da1b82164623ab7adef/gcc%2Ftestsuite%2Fgcc.dg%2Ffshort-wchar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3a5a50c2654771597c96da1b82164623ab7adef/gcc%2Ftestsuite%2Fgcc.dg%2Ffshort-wchar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffshort-wchar.c?ref=b3a5a50c2654771597c96da1b82164623ab7adef", "patch": "@@ -0,0 +1,18 @@\n+/* Copyright (C) 2002 Free Software Foundation, Inc.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-fshort-wchar\" } */\n+\n+/* Source: Neil Booth, 10 Dec 2002.\n+\n+   Test that __WCHAR_MAX__ is correct with -fshort-wchar.  */\n+\n+int main ()\n+{\n+  __WCHAR_TYPE__ w = ~(__WCHAR_TYPE__) 0;\n+\n+  if (w != __WCHAR_MAX__)\n+    abort ();\n+ \n+  return 0;\n+}"}]}