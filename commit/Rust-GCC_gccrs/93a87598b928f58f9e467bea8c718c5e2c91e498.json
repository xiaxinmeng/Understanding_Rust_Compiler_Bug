{"sha": "93a87598b928f58f9e467bea8c718c5e2c91e498", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNhODc1OThiOTI4ZjU4ZjllNDY3YmVhOGM3MThjNWUyYzkxZTQ5OA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-30T11:01:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-30T11:01:18Z"}, "message": "[multiple changes]\n\n2014-07-30  Doug Rupp  <rupp@adacore.com>\n\n\t* adaint.c (__gnat_tmp_name) [__ANDROID__]: Default to putting\n\ttemp files in /cache directory unless overridden by TMPDIR.\n\n2014-07-30  Jose Ruiz  <ruiz@adacore.com>\n\n\t* s-tassta.adb, s-tarest.adb (Initialize, Create_Task,\n\tCreate_Restricted_Task): Remove redundant check. Number_Of_CPUs returns\n\ttype CPU, so it can never be greater than CPU_Range'Last.\n\n2014-07-30  Bob Duff  <duff@adacore.com>\n\n\t* s-taskin.ads: Minor comment fix.\n\n2014-07-30  Thomas Quinot  <quinot@adacore.com>\n\n\t* g-socket.adb: Remove now useless WITH, USE, and USE TYPE\n\tclauses.\n\n2014-07-30  Yannick Moy  <moy@adacore.com>\n\n\t* debug.adb: Free debug flag dQ used for frontend inlining in\n\tGNATprove mode..\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Remove test of\n\tdebug flag..\n\n2014-07-30  Thomas Quinot  <quinot@adacore.com>\n\n\t* Make-generated.in: Remove generation of s-oscons.ads, only\n\tgenerate the xoscons utility, in runtime-agnostic rules.\n\t* gcc-interface/Makefile.in: Clean up rules. Remove VMS parts,\n\tno longer supported.\n\nFrom-SVN: r213250", "tree": {"sha": "3d747f395017502c088251df59226e37086a5feb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d747f395017502c088251df59226e37086a5feb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93a87598b928f58f9e467bea8c718c5e2c91e498", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93a87598b928f58f9e467bea8c718c5e2c91e498", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93a87598b928f58f9e467bea8c718c5e2c91e498", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93a87598b928f58f9e467bea8c718c5e2c91e498/comments", "author": null, "committer": null, "parents": [{"sha": "1399d355cb74c0de280637c1ce678df71f4adb38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1399d355cb74c0de280637c1ce678df71f4adb38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1399d355cb74c0de280637c1ce678df71f4adb38"}], "stats": {"total": 362, "additions": 160, "deletions": 202}, "files": [{"sha": "897057909cef5943f6cec81631c7dc0e6bdf8c41", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93a87598b928f58f9e467bea8c718c5e2c91e498/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93a87598b928f58f9e467bea8c718c5e2c91e498/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=93a87598b928f58f9e467bea8c718c5e2c91e498", "patch": "@@ -1,3 +1,37 @@\n+2014-07-30  Doug Rupp  <rupp@adacore.com>\n+\n+\t* adaint.c (__gnat_tmp_name) [__ANDROID__]: Default to putting\n+\ttemp files in /cache directory unless overridden by TMPDIR.\n+\n+2014-07-30  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* s-tassta.adb, s-tarest.adb (Initialize, Create_Task,\n+\tCreate_Restricted_Task): Remove redundant check. Number_Of_CPUs returns\n+\ttype CPU, so it can never be greater than CPU_Range'Last.\n+\n+2014-07-30  Bob Duff  <duff@adacore.com>\n+\n+\t* s-taskin.ads: Minor comment fix.\n+\n+2014-07-30  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* g-socket.adb: Remove now useless WITH, USE, and USE TYPE\n+\tclauses.\n+\n+2014-07-30  Yannick Moy  <moy@adacore.com>\n+\n+\t* debug.adb: Free debug flag dQ used for frontend inlining in\n+\tGNATprove mode..\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Remove test of\n+\tdebug flag..\n+\n+2014-07-30  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* Make-generated.in: Remove generation of s-oscons.ads, only\n+\tgenerate the xoscons utility, in runtime-agnostic rules.\n+\t* gcc-interface/Makefile.in: Clean up rules. Remove VMS parts,\n+\tno longer supported.\n+\n 2014-07-30  Bob Duff  <duff@adacore.com>\n \n \t* exp_ch6.adb (Add_Task_Actuals_To_Build_In_Place_Call): New"}, {"sha": "17200c77861dd979ad2e11d9f0d88141e15d1400", "filename": "gcc/ada/Make-generated.in", "status": "modified", "additions": 2, "deletions": 38, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93a87598b928f58f9e467bea8c718c5e2c91e498/gcc%2Fada%2FMake-generated.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93a87598b928f58f9e467bea8c718c5e2c91e498/gcc%2Fada%2FMake-generated.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMake-generated.in?ref=93a87598b928f58f9e467bea8c718c5e2c91e498", "patch": "@@ -66,47 +66,11 @@ $(ADA_GEN_SUBDIR)/stamp-nmake: $(ADA_GEN_SUBDIR)/sinfo.ads $(ADA_GEN_SUBDIR)/nma\n \t$(MOVE_IF_CHANGE) $(ADA_GEN_SUBDIR)/bldtools/nmake/nmake.adb $(ADA_GEN_SUBDIR)/nmake.adb\n \ttouch $(ADA_GEN_SUBDIR)/stamp-nmake\n \n-# GCC_FOR_TARGET has paths relative to the gcc directory, so we need to adjust\n-# for running it from $(ADA_GEN_SUBDIR)/bldtools/oscons.\n-\n-OSCONS_CC=$(subst ./xgcc,../../../xgcc,$(subst -B./, -B../../../,$(GCC_FOR_TARGET)))\n-\n-# The main ada source directory must be on the include path for #include \"...\"\n-# because s-oscons-tmplt.c requires adaint.h, gsocket.h, and any file included\n-# by these headers. However note that we must use -iquote, not -I, so that\n-# ada/types.h does not conflict with a same-named system header (VxWorks\n-# has a <types.h> header).\n-\n-OSCONS_SRCDIR=$${_oscons_srcdir}\n-OSCONS_CPP=$(OSCONS_CC) $(GNATLIBCFLAGS) -E -C \\\n-  -DTARGET=\\\"$(target)\\\" -iquote $(OSCONS_SRCDIR) s-oscons-tmplt.c > s-oscons-tmplt.i\n-OSCONS_EXTRACT=$(OSCONS_CC) -iquote $(OSCONS_SRCDIR) -S s-oscons-tmplt.i\n-\n-# Note: if you need to build with a non-GNU compiler, you could adapt the\n-# following definitions (written for VMS DEC-C)\n-#OSCONS_CPP=../../../$(DECC) -E /comment=as_is -DNATIVE \\\n-#             -DTARGET='\"\"$(target)\"\"' -I$(OSCONS_SRCDIR) s-oscons-tmplt.c\n-#\n-#OSCONS_EXTRACT=../../../$(DECC) -DNATIVE \\\n-#                 -DTARGET='\"\"$(target)\"\"' -I$(OSCONS_SRCDIR) s-oscons-tmplt.c ; \\\n-#  ld -o s-oscons-tmplt.exe s-oscons-tmplt.obj; \\\n-#  ./s-oscons-tmplt.exe > s-oscons-tmplt.s\n-\n-# Note: the first dependency of s-oscons.ads *must* remain s-oscons-tmplt.c, as\n-# we use $(<D) to locate the main ada/ source directory and pass it to OSCONS_CPP\n-# as a -I argument.\n-$(ADA_GEN_SUBDIR)/s-oscons.ads : $(ADA_GEN_SUBDIR)/s-oscons-tmplt.c $(ADA_GEN_SUBDIR)/xoscons.adb $(ADA_GEN_SUBDIR)/xutil.ads $(ADA_GEN_SUBDIR)/xutil.adb\n+$(ADA_GEN_SUBDIR)/bldtools/oscons/xoscons : $(ADA_GEN_SUBDIR)/xoscons.adb $(ADA_GEN_SUBDIR)/xutil.ads $(ADA_GEN_SUBDIR)/xutil.adb\n \t-$(MKDIR) $(ADA_GEN_SUBDIR)/bldtools/oscons\n \t$(RM) $(addprefix $(ADA_GEN_SUBDIR)/bldtools/oscons/,$(notdir $^))\n \t$(CP) $^ $(ADA_GEN_SUBDIR)/bldtools/oscons\n-\t_oscons_srcdir=`cd $(<D) && pwd` ; \\\n-\t(cd $(ADA_GEN_SUBDIR)/bldtools/oscons ; gnatmake -q xoscons ; \\\n-\t\t$(RM) s-oscons-tmplt.i s-oscons-tmplt.s ; \\\n-\t\t$(OSCONS_CPP) ; \\\n-\t\t$(OSCONS_EXTRACT) ; \\\n-\t\t./xoscons s-oscons ) ; \\\n-\t\t$(MOVE_IF_CHANGE) $(ADA_GEN_SUBDIR)/bldtools/oscons/s-oscons.ads $(ADA_GEN_SUBDIR)/s-oscons.ads ; \\\n-\t\t$(MOVE_IF_CHANGE) $(ADA_GEN_SUBDIR)/bldtools/oscons/s-oscons.h $(ADA_GEN_SUBDIR)/s-oscons.h\n+\tcd $(ADA_GEN_SUBDIR)/bldtools/oscons ; gnatmake -q xoscons\n \n $(ADA_GEN_SUBDIR)/sdefault.adb: $(ADA_GEN_SUBDIR)/stamp-sdefault ; @true\n $(ADA_GEN_SUBDIR)/stamp-sdefault : $(srcdir)/version.c Makefile"}, {"sha": "a84f4a5f474fba879637e64cab4ab66c163ba85c", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93a87598b928f58f9e467bea8c718c5e2c91e498/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93a87598b928f58f9e467bea8c718c5e2c91e498/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=93a87598b928f58f9e467bea8c718c5e2c91e498", "patch": "@@ -1361,14 +1361,18 @@ __gnat_tmp_name (char *tmp_filename)\n   }\n \n #elif defined (linux) || defined (__FreeBSD__) || defined (__NetBSD__) \\\n-  || defined (__OpenBSD__) || defined(__GLIBC__)\n+  || defined (__OpenBSD__) || defined(__GLIBC__) || defined (__ANDROID__)\n #define MAX_SAFE_PATH 1000\n   char *tmpdir = getenv (\"TMPDIR\");\n \n   /* If tmpdir is longer than MAX_SAFE_PATH, revert to default value to avoid\n      a buffer overflow.  */\n   if (tmpdir == NULL || strlen (tmpdir) > MAX_SAFE_PATH)\n+#ifdef __ANDROID__\n+    strcpy (tmp_filename, \"/cache/gnat-XXXXXX\");\n+#else\n     strcpy (tmp_filename, \"/tmp/gnat-XXXXXX\");\n+#endif\n   else\n     sprintf (tmp_filename, \"%s/gnat-XXXXXX\", tmpdir);\n "}, {"sha": "b96ce833c8b5c377f2cba9007d0d80c12610c7df", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93a87598b928f58f9e467bea8c718c5e2c91e498/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93a87598b928f58f9e467bea8c718c5e2c91e498/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=93a87598b928f58f9e467bea8c718c5e2c91e498", "patch": "@@ -80,7 +80,7 @@ package body Debug is\n    --  dN   No file name information in exception messages\n    --  dO   Output immediate error messages\n    --  dP   Do not check for controlled objects in preelaborable packages\n-   --  dQ   Enable inlining in GNATprove mode\n+   --  dQ   Enable inlining of bodies-without-decl in GNATprove mode\n    --  dR   Bypass check for correct version of s-rpc\n    --  dS   Never convert numbers to machine numbers in Sem_Eval\n    --  dT   Convert to machine numbers only for constant declarations\n@@ -438,9 +438,10 @@ package body Debug is\n    --       in preelaborable packages, but this restriction is a huge pain,\n    --       especially in the predefined library units.\n \n-   --  dQ   Enable inlining in GNATprove mode. Although expansion is not set in\n-   --       GNATprove mode, inlining is useful for improving the precision of\n-   --       formal verification. Under a debug flag until fully reliable.\n+   --  dQ   Enable inlining of bodies-without-decl in GNATprove mode. A decl is\n+   --       created by the frontend so that the usual frontend inlining\n+   --       mechanism can be used for formal verification. Under a debug flag\n+   --       until fully reliable.\n \n    --  dR   Bypass the check for a proper version of s-rpc being present\n    --       to use the -gnatz? switch. This allows debugging of the use"}, {"sha": "b70c2cf2028cf14ada2b32ba60116e7095823877", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93a87598b928f58f9e467bea8c718c5e2c91e498/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93a87598b928f58f9e467bea8c718c5e2c91e498/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=93a87598b928f58f9e467bea8c718c5e2c91e498", "patch": "@@ -34,8 +34,6 @@ with Ada.Exceptions;           use Ada.Exceptions;\n with Ada.Finalization;\n with Ada.Unchecked_Conversion;\n \n-with Interfaces.C.Strings;\n-\n with GNAT.Sockets.Thin_Common; use GNAT.Sockets.Thin_Common;\n with GNAT.Sockets.Thin;        use GNAT.Sockets.Thin;\n \n@@ -1412,7 +1410,6 @@ package body GNAT.Sockets is\n \n    function Inet_Addr (Image : String) return Inet_Addr_Type is\n       use Interfaces.C;\n-      use Interfaces.C.Strings;\n \n       Img    : aliased char_array := To_C (Image);\n       Addr   : aliased C.int;\n@@ -1710,7 +1707,6 @@ package body GNAT.Sockets is\n    ------------------------\n \n    procedure Raise_Socket_Error (Error : Integer) is\n-      use type C.Strings.chars_ptr;\n    begin\n       raise Socket_Error with\n         Err_Code_Image (Error) & Socket_Error_Message (Error);\n@@ -2421,7 +2417,6 @@ package body GNAT.Sockets is\n \n    function To_Host_Entry (E : Hostent_Access) return Host_Entry_Type is\n       use type C.size_t;\n-      use C.Strings;\n \n       Aliases_Count, Addresses_Count : Natural;\n \n@@ -2549,7 +2544,6 @@ package body GNAT.Sockets is\n    ----------------------\n \n    function To_Service_Entry (E : Servent_Access) return Service_Entry_Type is\n-      use C.Strings;\n       use type C.size_t;\n \n       Aliases_Count : Natural;"}, {"sha": "a05e8524a0a36aa9e3ae19be0a1dbab54bd05333", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 108, "deletions": 143, "changes": 251, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93a87598b928f58f9e467bea8c718c5e2c91e498/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93a87598b928f58f9e467bea8c718c5e2c91e498/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=93a87598b928f58f9e467bea8c718c5e2c91e498", "patch": "@@ -1,5 +1,5 @@\n # Makefile for GNU Ada Compiler (GNAT).\n-#   Copyright (C) 1994-2013 Free Software Foundation, Inc.\n+#   Copyright (C) 1994-2014 Free Software Foundation, Inc.\n \n #This file is part of GCC.\n \n@@ -454,6 +454,16 @@ EXTRA_LIBGNAT_OBJS=\n # file (included files).\n EXTRA_LIBGNAT_SRCS=\n \n+# GCC spec files to be installed in $(libsubdir), so --specs=<spec-filename>\n+# finds them at runtime. Sequences of alphanum characters prefixed with '_' in\n+# the filename are stripped off at installation time. This is used to strip\n+# the architecture indications in vxsim spec filenames, installing e.g.\n+# vxsim_ppc.spec as vxsim.spec. This allows setting up pretty general self\n+# specs to perform -vxsim -> --specs=<...> translations without causing\n+# conflicts since the specs are installed in a target specific subdirectory.\n+#\n+GCC_SPEC_FILES=\n+\n # $(filter-out PATTERN...,TEXT) removes all PATTERN words from TEXT.\n # $(strip STRING) removes leading and trailing spaces from STRING.\n # If what's left is null then it's a match.\n@@ -563,6 +573,9 @@ ifeq ($(strip $(filter-out powerpc% wrs vxworks,$(target_cpu) $(target_vendor) $\n     s-vxwext.adb<s-vxwext-rtp.adb \\\n     s-tpopsp.adb<s-tpopsp-vxworks-rtp.adb \\\n     system.ads<system-vxworks-$(ARCH_STR)-rtp.ads\n+\n+    EH_MECHANISM=-gcc\n+    EXTRA_LIBGNAT_OBJS+=sigtramp-vxworks.o\n   else\n     ifeq ($(strip $(filter-out rtp-smp,$(THREAD_KIND))),)\n       LIBGNAT_TARGET_PAIRS += \\\n@@ -572,7 +585,8 @@ ifeq ($(strip $(filter-out powerpc% wrs vxworks,$(target_cpu) $(target_vendor) $\n       s-tpopsp.adb<s-tpopsp-vxworks-tls.adb \\\n       system.ads<system-vxworks-$(ARCH_STR)-rtp.ads\n \n-      EXTRA_LIBGNAT_OBJS+=affinity.o\n+      EH_MECHANISM=-gcc\n+      EXTRA_LIBGNAT_OBJS+=affinity.o sigtramp-vxworks.o\n     else\n       ifeq ($(strip $(filter-out kernel-smp,$(THREAD_KIND))),)\n         LIBGNAT_TARGET_PAIRS += \\\n@@ -602,17 +616,29 @@ ifeq ($(strip $(filter-out powerpc% wrs vxworks,$(target_cpu) $(target_vendor) $\n         endif\n       endif\n       EXTRA_GNATRTL_NONTASKING_OBJS=i-vxwork.o i-vxwoio.o\n-      EXTRA_LIBGNAT_OBJS+=sigtramp-ppcvxw.o\n+      EXTRA_LIBGNAT_OBJS+=sigtramp-vxworks.o\n     endif\n   endif\n \n   EXTRA_GNATRTL_TASKING_OBJS += s-vxwork.o s-vxwext.o\n \n   EXTRA_LIBGNAT_OBJS+=vx_stack_info.o\n+\n+  GCC_SPEC_FILES+=vxworks-$(ARCH_STR)-link.spec\n+  GCC_SPEC_FILES+=vxworks-cert-$(ARCH_STR)-link.spec\n+  GCC_SPEC_FILES+=vxworks-smp-$(ARCH_STR)-link.spec\n+  GCC_SPEC_FILES+=vxworks-crtbe-link.spec\n endif\n \n # PowerPC and e500v2 VxWorks 653\n ifeq ($(strip $(filter-out powerpc% wrs vxworksae,$(target_cpu) $(target_vendor) $(target_os))),)\n+\n+  ifeq ($(strip $(filter-out e500%, $(target_alias))),)\n+     ARCH_STR=e500\n+  else\n+     ARCH_STR=ppc\n+  endif\n+\n   # target pairs for vthreads runtime\n   LIBGNAT_TARGET_PAIRS = \\\n   a-elchha.adb<a-elchha-vxworks-ppc-full.adb \\\n@@ -635,23 +661,18 @@ ifeq ($(strip $(filter-out powerpc% wrs vxworksae,$(target_cpu) $(target_vendor)\n   s-vxwext.adb<s-vxwext-noints.adb \\\n   s-vxwext.ads<s-vxwext-vthreads.ads \\\n   s-vxwork.ads<s-vxwork-ppc.ads \\\n+  system.ads<system-vxworks-$(ARCH_STR)-vthread.ads \\\n   $(ATOMICS_TARGET_PAIRS) \\\n   $(ATOMICS_BUILTINS_TARGET_PAIRS)\n \n-  ifeq ($(strip $(filter-out e500%, $(target_alias))),)\n-    LIBGNAT_TARGET_PAIRS += system.ads<system-vxworks-e500-vthread.ads\n-  else\n-    LIBGNAT_TARGET_PAIRS += system.ads<system-vxworks-ppc-vthread.ads\n-  endif\n-\n   TOOLS_TARGET_PAIRS=\\\n   mlib-tgt-specific.adb<mlib-tgt-specific-vxworks.adb \\\n   indepsw.adb<indepsw-gnu.adb\n \n   EXTRA_GNATRTL_NONTASKING_OBJS=i-vxwork.o i-vxwoio.o\n   EXTRA_GNATRTL_TASKING_OBJS=s-vxwork.o s-vxwext.o\n \n-  EXTRA_LIBGNAT_OBJS+=sigtramp-ppcvxw.o\n+  EXTRA_LIBGNAT_OBJS+=sigtramp-vxworks.o\n \n   # Extra pairs for the vthreads runtime\n   ifeq ($(strip $(filter-out vthreads,$(THREAD_KIND))),)\n@@ -715,7 +736,7 @@ ifeq ($(strip $(filter-out powerpc% wrs vxworksmils,$(target_cpu) $(target_vendo\n   EXTRA_GNATRTL_NONTASKING_OBJS=i-vxwork.o i-vxwoio.o s-thread.o\n   EXTRA_GNATRTL_TASKING_OBJS=s-vxwork.o s-vxwext.o\n \n-  EXTRA_LIBGNAT_OBJS+=vx_stack_info.o sigtramp-ppcvxw.o\n+  EXTRA_LIBGNAT_OBJS+=vx_stack_info.o sigtramp-vxworks.o\n   GNATRTL_SOCKETS_OBJS =\n \n   ifeq ($(strip $(filter-out yes,$(TRACE))),)\n@@ -900,6 +921,8 @@ ifeq ($(strip $(filter-out %86 wrs vxworks,$(target_cpu) $(target_vendor) $(targ\n       EXTRA_LIBGNAT_OBJS+=affinity.o\n     else\n       ifeq ($(strip $(filter-out kernel-smp, $(THREAD_KIND))),)\n+        EH_MECHANISM=-gcc\n+\n         LIBGNAT_TARGET_PAIRS += \\\n         s-interr.adb<s-interr-hwint.adb \\\n         s-mudido.adb<s-mudido-affinity.adb \\\n@@ -914,6 +937,8 @@ ifeq ($(strip $(filter-out %86 wrs vxworks,$(target_cpu) $(target_vendor) $(targ\n         s-tpopsp.adb<s-tpopsp-vxworks.adb\n \n         ifeq ($(strip $(filter-out kernel,$(THREAD_KIND))),)\n+          EH_MECHANISM=-gcc\n+\n           LIBGNAT_TARGET_PAIRS += \\\n           s-vxwext.ads<s-vxwext-kernel.ads \\\n           s-vxwext.adb<s-vxwext-kernel.adb \\\n@@ -961,14 +986,16 @@ ifeq ($(strip $(filter-out arm% coff wrs vx%,$(target_cpu) $(target_vendor) $(ta\n   indepsw.adb<indepsw-gnu.adb\n \n   ifeq ($(strip $(filter-out rtp-smp,$(THREAD_KIND))),)\n+    EH_MECHANISM=-gcc\n+\n     LIBGNAT_TARGET_PAIRS += \\\n     s-mudido.adb<s-mudido-affinity.adb \\\n     s-vxwext.ads<s-vxwext-rtp.ads \\\n     s-vxwext.adb<s-vxwext-rtp-smp.adb \\\n     s-tpopsp.adb<s-tpopsp-vxworks-tls.adb \\\n     system.ads<system-vxworks-arm-rtp.ads\n \n-    EXTRA_LIBGNAT_OBJS+=affinity.o\n+    EXTRA_LIBGNAT_OBJS+=affinity.o sigtramp-vxworks.o\n   else\n     ifeq ($(strip $(filter-out kernel-smp,$(THREAD_KIND))),)\n       EH_MECHANISM=-gcc\n@@ -980,7 +1007,7 @@ ifeq ($(strip $(filter-out arm% coff wrs vx%,$(target_cpu) $(target_vendor) $(ta\n       s-vxwext.adb<s-vxwext-kernel-smp.adb \\\n       system.ads<system-vxworks-arm.ads\n \n-      EXTRA_LIBGNAT_OBJS+=affinity.o sigtramp-armvxw.o\n+      EXTRA_LIBGNAT_OBJS+=affinity.o sigtramp-vxworks.o\n     else\n       LIBGNAT_TARGET_PAIRS += \\\n       s-tpopsp.adb<s-tpopsp-vxworks.adb \\\n@@ -993,7 +1020,7 @@ ifeq ($(strip $(filter-out arm% coff wrs vx%,$(target_cpu) $(target_vendor) $(ta\n         s-vxwext.ads<s-vxwext-kernel.ads \\\n         s-vxwext.adb<s-vxwext-kernel.adb\n \n-        EXTRA_LIBGNAT_OBJS+=sigtramp-armvxw.o\n+        EXTRA_LIBGNAT_OBJS+=sigtramp-vxworks.o\n       endif\n     endif\n   endif\n@@ -1002,6 +1029,8 @@ ifeq ($(strip $(filter-out arm% coff wrs vx%,$(target_cpu) $(target_vendor) $(ta\n   EXTRA_GNATRTL_TASKING_OBJS=s-vxwork.o s-vxwext.o\n \n   EXTRA_LIBGNAT_OBJS+=vx_stack_info.o\n+\n+  GCC_SPEC_FILES+=vxworks-crtbe-link.spec\n endif\n \n # MIPS VxWorks\n@@ -1034,6 +1063,37 @@ ifeq ($(strip $(filter-out mips% wrs vx%,$(target_cpu) $(target_vendor) $(target\n   mlib-tgt-specific.adb<mlib-tgt-specific-vxworks.adb \\\n   indepsw.adb<indepsw-gnu.adb\n \n+  ifeq ($(strip $(filter-out rtp-smp,$(THREAD_KIND))),)\n+    EH_MECHANISM=-gcc\n+\n+    LIBGNAT_TARGET_PAIRS += \\\n+    s-mudido.adb<s-mudido-affinity.adb \\\n+    s-vxwext.ads<s-vxwext-rtp.ads \\\n+    s-vxwext.adb<s-vxwext-rtp-smp.adb \\\n+    s-tpopsp.adb<s-tpopsp-vxworks-tls.adb\n+\n+    EXTRA_LIBGNAT_OBJS+=affinity.o sigtramp-vxworks.o\n+  else\n+    ifeq ($(strip $(filter-out kernel-smp,$(THREAD_KIND))),)\n+      LIBGNAT_TARGET_PAIRS += \\\n+      s-mudido.adb<s-mudido-affinity.adb \\\n+      s-tpopsp.adb<s-tpopsp-vxworks-tls.adb \\\n+      s-vxwext.ads<s-vxwext-kernel.ads \\\n+      s-vxwext.adb<s-vxwext-kernel-smp.adb\n+\n+      EXTRA_LIBGNAT_OBJS+=affinity.o\n+    else\n+      LIBGNAT_TARGET_PAIRS += \\\n+      s-tpopsp.adb<s-tpopsp-vxworks.adb\n+\n+      ifeq ($(strip $(filter-out kernel,$(THREAD_KIND))),)\n+        LIBGNAT_TARGET_PAIRS += \\\n+        s-vxwext.ads<s-vxwext-kernel.ads \\\n+        s-vxwext.adb<s-vxwext-kernel.adb\n+      endif\n+    endif\n+  endif\n+\n   EXTRA_GNATRTL_NONTASKING_OBJS=i-vxwork.o i-vxwoio.o\n   EXTRA_GNATRTL_TASKING_OBJS=s-vxwork.o s-vxwext.o\n \n@@ -1539,110 +1599,6 @@ ifeq ($(strip $(filter-out rtems%,$(target_os))),)\n   s-interr.adb<s-interr-hwint.adb\n endif\n \n-# OpenVMS (host)\n-ifeq ($(strip $(filter-out alpha64 ia64 dec hp vms% openvms% alphavms%,$(host_cpu) $(host_vendor) $(host_os))),)\n-\n-soext  = .exe\n-hyphen = _\n-LN = cp -p\n-LN_S = cp -p\n-\n-endif\n-\n-# OpenVMS (target)\n-ifeq ($(strip $(filter-out alpha64 ia64 dec hp vms% openvms% alphavms%,$(target_cpu) $(target_vendor) $(target_os))),)\n-  LIBGNAT_TARGET_PAIRS = \\\n-    a-caldel.adb<a-caldel-vms.adb \\\n-    a-calend.adb<a-calend-vms.adb \\\n-    a-calend.ads<a-calend-vms.ads \\\n-    a-dirval.adb<a-dirval-vms.adb \\\n-    a-excpol.adb<a-excpol-abort.adb \\\n-    a-intnam.ads<a-intnam-vms.ads \\\n-    a-numaux.ads<a-numaux-vms.ads \\\n-    g-expect.adb<g-expect-vms.adb \\\n-    g-socthi.ads<g-socthi-vms.ads \\\n-    g-socthi.adb<g-socthi-vms.adb \\\n-    g-stsifd.adb<g-stsifd-sockets.adb \\\n-    i-cstrea.adb<i-cstrea-vms.adb \\\n-    memtrack.adb<memtrack-vms_64.adb \\\n-    s-auxdec.ads<s-auxdec-vms_64.ads \\\n-    s-inmaop.adb<s-inmaop-vms.adb \\\n-    s-interr.adb<s-interr-vms.adb \\\n-    s-intman.adb<s-intman-vms.adb \\\n-    s-intman.ads<s-intman-vms.ads \\\n-    s-memory.adb<s-memory-vms_64.adb \\\n-    s-memory.ads<s-memory-vms_64.ads \\\n-    s-ransee.adb<s-ransee-vms.adb \\\n-    s-osprim.adb<s-osprim-vms.adb \\\n-    s-osprim.ads<s-osprim-vms.ads \\\n-    s-osinte.adb<s-osinte-vms.adb \\\n-    s-osinte.ads<s-osinte-vms.ads \\\n-    s-taprop.adb<s-taprop-vms.adb \\\n-    s-tasdeb.adb<s-tasdeb-vms.adb \\\n-    s-taspri.ads<s-taspri-vms.ads \\\n-    s-tpopsp.adb<s-tpopsp-vms.adb \\\n-    s-tpopde.adb<s-tpopde-vms.adb \\\n-    s-tpopde.ads<s-tpopde-vms.ads\n-\n-  ifeq ($(strip $(filter-out ia64 hp vms% openvms%,$(target_cpu) $(target_vendor) $(target_os))),)\n-    LIBGNAT_TARGET_PAIRS += \\\n-      g-enblsp.adb<g-enblsp-vms-ia64.adb \\\n-      g-trasym.adb<g-trasym-vms-ia64.adb \\\n-      s-asthan.adb<s-asthan-vms-ia64.adb \\\n-      s-auxdec.adb<s-auxdec-vms-ia64.adb \\\n-      s-vaflop.adb<s-vaflop-vms-ia64.adb \\\n-      system.ads<system-vms-ia64.ads \\\n-      s-parame.ads<s-parame-vms-ia64.ads \\\n-      $(ATOMICS_TARGET_PAIRS) \\\n-      $(ATOMICS_BUILTINS_TARGET_PAIRS)\n-\n-    EXTRA_LIBGNAT_SRCS+=tb-ivms.c\n-    override GNATRTL_ALTIVEC_OBJS=\n-\n-    TOOLS_TARGET_PAIRS= \\\n-      mlib-tgt-specific.adb<mlib-tgt-specific-vms-ia64.adb \\\n-      symbols.adb<symbols-vms.adb \\\n-      symbols-processing.adb<symbols-processing-vms-ia64.adb\n-  else\n-    ifeq ($(strip $(filter-out alpha64 dec vms% openvms% alphavms%,$(target_cpu) $(target_vendor) $(target_os))),)\n-      LIBGNAT_TARGET_PAIRS += \\\n-        g-enblsp.adb<g-enblsp-vms-alpha.adb \\\n-        g-trasym.adb<g-trasym-vms-alpha.adb \\\n-        s-asthan.adb<s-asthan-vms-alpha.adb \\\n-        s-auxdec.adb<s-auxdec-vms-alpha.adb \\\n-        s-traent.adb<s-traent-vms.adb \\\n-        s-traent.ads<s-traent-vms.ads \\\n-        s-vaflop.adb<s-vaflop-vms-alpha.adb \\\n-        system.ads<system-vms_64.ads \\\n-\ts-parame.ads<s-parame-vms-alpha.ads \\\n-        $(ATOMICS_TARGET_PAIRS) \\\n-        $(ATOMICS_BUILTINS_TARGET_PAIRS)\n-\n-    EXTRA_LIBGNAT_SRCS+=tb-alvms.c\n-    override GNATRTL_ALTIVEC_OBJS=\n-\n-    TOOLS_TARGET_PAIRS= \\\n-      mlib-tgt-specific.adb<mlib-tgt-specific-vms-alpha.adb \\\n-      symbols.adb<symbols-vms.adb \\\n-      symbols-processing.adb<symbols-processing-vms-alpha.adb\n-    endif\n-  endif\n-\n-  EXTRA_GNATMAKE_OBJS = mlib-tgt-vms_common.o\n-\n-  GMEM_LIB = gmemlib\n-  EH_MECHANISM=-gcc\n-  GNATLIB_SHARED=gnatlib-shared-vms\n-  EXTRA_GNATRTL_NONTASKING_OBJS+=s-po32gl.o\n-  EXTRA_GNATRTL_TASKING_OBJS=s-tpopde.o\n-  EXTRA_GNATTOOLS = \\\n-     ../../gnatsym$(exeext)\n-  # This command transforms (YYYYMMDD) into YY,MMDD\n-  GSMATCH_VERSION := $(shell grep \"^ *Gnat_Static_Version_String\" $(fsrcpfx)ada/gnatvsn.ads | sed -e 's/.*(\\(.*\\)).*/\\1/' -e 's/\\(..\\)\\(..\\)\\(....\\).*/\\2,\\3/')\n-  TOOLS_LIBS_LO := --for-linker=sys\\\\$$\\$$library:trace.exe\n-  LIBRARY_VERSION := $(subst .,_,$(LIB_VERSION))\n-endif\n-\n # PikeOS\n ifeq ($(strip $(filter-out powerpc% %86 sysgo pikeos,$(target_cpu) $(target_vendor) $(target_os)))),)\n   TOOLS_TARGET_PAIRS=\\\n@@ -2475,6 +2431,7 @@ ADA_EXCLUDE_SRCS =\\\n   s-stache.adb s-stache.ads \\\n   s-thread.ads \\\n   s-vxwext.adb s-vxwext.ads \\\n+  s-vxwexc.adb s-vxwexc.ads \\\n   s-win32.ads  s-winext.ads \\\n   g-regist.adb g-regist.ads g-sse.ads    g-ssvety.ads \\\n   i-vxwoio.adb i-vxwoio.ads i-vxwork.ads \\\n@@ -2641,7 +2598,15 @@ gnatlink-re: ../stamp-tools gnatmake-re\n \t  true; \\\n \tfi\n \n-install-gnatlib: ../stamp-gnatlib-$(RTSDIR)\n+install-gcc-specs:\n+#\tInstall all the requested GCC spec files.\n+\n+\tfor f in $(GCC_SPEC_FILES); do \\\n+\t    $(INSTALL_DATA_DATE) $(srcdir)/ada/$$f \\\n+\t    $(libsubdir)/$$(echo $$f|sed -e 's#_[a-zA-Z0-9]*##g'); \\\n+\tdone\n+\n+install-gnatlib: ../stamp-gnatlib-$(RTSDIR) install-gcc-specs\n #\tCreate the directory before deleting it, in case the directory is\n #\ta list of directories (as it may be on VMS). This ensures we are\n #\tdeleting the right one.\n@@ -2727,24 +2692,30 @@ install-gnatlib: ../stamp-gnatlib-$(RTSDIR)\n \t$(RM) ../stamp-gnatlib-$(RTSDIR)\n \ttouch ../stamp-gnatlib1-$(RTSDIR)\n \n-ifeq ($(strip $(filter-out alpha64 ia64 dec hp vms% openvms% alphavms%, $(host_cpu) $(host_os))),)\n-OSCONS_CPP=../../$(DECC) -E /comment=as_is -DNATIVE \\\n-             -DTARGET='\"\"$(target)\"\"' $(fsrcpfx)ada/s-oscons-tmplt.c\n+# GCC_FOR_TARGET has paths relative to the gcc directory, so we need to adjust\n+# for running it from ada/rts\n \n-OSCONS_EXTRACT=../../$(DECC) -DNATIVE \\\n-                 -DTARGET='\"\"$(target)\"\"' $(fsrcpfx)ada/s-oscons-tmplt.c ; \\\n-  ld -o s-oscons-tmplt.exe s-oscons-tmplt.obj; \\\n-  ./s-oscons-tmplt.exe > s-oscons-tmplt.s\n+OSCONS_CC=$(subst ./xgcc,../../xgcc,$(subst -B./, -B../../,$(GCC_FOR_TARGET)))\n \n-else\n-# GCC_FOR_TARGET has paths relative to the gcc directory, so we need to adjust\n-# for running it from $(RTSDIR)\n-OSCONS_CC=`echo \"$(GCC_FOR_TARGET)\" \\\n-  | sed -e 's^\\./xgcc^../../xgcc^' -e 's^-B./^-B../../^'`\n-OSCONS_CPP=$(OSCONS_CC) $(GNATLIBCFLAGS) -E -C \\\n-  -DTARGET=\\\"$(target)\\\" $(fsrcpfx)ada/s-oscons-tmplt.c > s-oscons-tmplt.i\n-OSCONS_EXTRACT=$(OSCONS_CC) $(GNATLIBCFLAGS) -S s-oscons-tmplt.i\n-endif\n+# The main ada source directory must be on the include path for #include \"...\"\n+# because s-oscons-tmplt.c requires adaint.h, gsocket.h, and any file included\n+# by these headers. However note that we must use -iquote, not -I, so that\n+# ada/types.h does not conflict with a same-named system header (VxWorks\n+# has a <types.h> header).\n+\n+OSCONS_CPP=$(OSCONS_CC) $(GNATLIBCFLAGS) $(GNATLIBCFLAGS_FOR_C) -E -C \\\n+  -DTARGET=\\\"$(target)\\\" -iquote $(fsrcpfx)ada $(fsrcpfx)ada/s-oscons-tmplt.c > s-oscons-tmplt.i\n+OSCONS_EXTRACT=$(OSCONS_CC) -S s-oscons-tmplt.i\n+\n+# Note: if you need to build with a non-GNU compiler, you could adapt the\n+# following definitions (written for VMS DEC-C)\n+#OSCONS_CPP=../../../$(DECC) -E /comment=as_is -DNATIVE \\\n+#             -DTARGET='\"\"$(target)\"\"' -I$(OSCONS_SRCDIR) s-oscons-tmplt.c\n+#\n+#OSCONS_EXTRACT=../../../$(DECC) -DNATIVE \\\n+#                 -DTARGET='\"\"$(target)\"\"' -I$(OSCONS_SRCDIR) s-oscons-tmplt.c ; \\\n+#  ld -o s-oscons-tmplt.exe s-oscons-tmplt.obj; \\\n+#  ./s-oscons-tmplt.exe > s-oscons-tmplt.s\n \n ./bldtools/oscons/xoscons: xoscons.adb xutil.ads xutil.adb\n \t-$(MKDIR) ./bldtools/oscons\n@@ -2759,13 +2730,8 @@ $(RTSDIR)/s-oscons.ads: ../stamp-gnatlib1-$(RTSDIR) s-oscons-tmplt.c gsocket.h .\n \t    $(OSCONS_EXTRACT) ; \\\n \t    ../bldtools/oscons/xoscons s-oscons)\n \n-# Don't use semicolon separated shell commands that involve list expansions.\n-# The semicolon triggers a call to DCL on VMS and DCL can't handle command\n-# line lengths in excess of 256 characters.\n-# Example: cd $(RTSDIR); ar rc libfoo.a $(LONG_LIST_OF_OBJS)\n-# is guaranteed to overflow the buffer.\n-\n gnatlib: ../stamp-gnatlib1-$(RTSDIR) ../stamp-gnatlib2-$(RTSDIR) $(RTSDIR)/s-oscons.ads\n+\ttest -f $(RTSDIR)/s-oscons.ads || exit 1\n # C files\n \t$(MAKE) -C $(RTSDIR) \\\n \t\tCC=\"`echo \\\"$(GCC_FOR_TARGET)\\\" \\\n@@ -3107,8 +3073,7 @@ socket.o  : socket.c gsocket.h\n sysdep.o  : sysdep.c\n raise.o   : raise.c raise.h\n sigtramp-armdroid.o : sigtramp-armdroid.c sigtramp.h\n-sigtramp-armvxw.o : sigtramp-armvxw.c sigtramp.h\n-sigtramp-ppcvxw.o : sigtramp-ppcvxw.c sigtramp.h\n+sigtramp-vxworks.o : sigtramp-vxworks.c sigtramp.h\n terminals.o : terminals.c\n vx_stack_info.o : vx_stack_info.c\n "}, {"sha": "22343c660e2541960377f2e11144397119bfbc5e", "filename": "gcc/ada/s-tarest.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93a87598b928f58f9e467bea8c718c5e2c91e498/gcc%2Fada%2Fs-tarest.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93a87598b928f58f9e467bea8c718c5e2c91e498/gcc%2Fada%2Fs-tarest.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tarest.adb?ref=93a87598b928f58f9e467bea8c718c5e2c91e498", "patch": "@@ -538,7 +538,6 @@ package body System.Tasking.Restricted.Stages is\n \n       if CPU /= Unspecified_CPU\n         and then (CPU < Integer (System.Multiprocessors.CPU_Range'First)\n-          or else CPU > Integer (System.Multiprocessors.CPU_Range'Last)\n           or else CPU > Integer (System.Multiprocessors.Number_Of_CPUs))\n       then\n          raise Tasking_Error with \"CPU not in range\";"}, {"sha": "fc9975c661f95f4344506cc0f210c8604bd513ca", "filename": "gcc/ada/s-taskin.ads", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93a87598b928f58f9e467bea8c718c5e2c91e498/gcc%2Fada%2Fs-taskin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93a87598b928f58f9e467bea8c718c5e2c91e498/gcc%2Fada%2Fs-taskin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.ads?ref=93a87598b928f58f9e467bea8c718c5e2c91e498", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -86,8 +86,10 @@ package System.Tasking is\n \n    --  Sometimes we need to hold two ATCB locks at the same time. To allow us\n    --  to order the locking, each ATCB is given a unique serial number. If one\n-   --  needs to hold locks on several ATCBs at once, the locks with lower\n-   --  serial numbers must be locked first.\n+   --  needs to hold locks on two ATCBs at once, the lock with lower serial\n+   --  number must be locked first. We avoid holding three or more ATCB locks,\n+   --  because that can easily lead to complications that cause race conditions\n+   --  and deadlocks.\n \n    --  We don't always need to check the serial numbers, since the serial\n    --  numbers are assigned sequentially, and so:"}, {"sha": "fb02a5365ae64d670ce3f902e03966000769f76a", "filename": "gcc/ada/s-tassta.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93a87598b928f58f9e467bea8c718c5e2c91e498/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93a87598b928f58f9e467bea8c718c5e2c91e498/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=93a87598b928f58f9e467bea8c718c5e2c91e498", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2013, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2014, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -537,8 +537,6 @@ package body System.Tasking.Stages is\n       if CPU /= Unspecified_CPU\n         and then (CPU < Integer (System.Multiprocessors.CPU_Range'First)\n                     or else\n-                  CPU > Integer (System.Multiprocessors.CPU_Range'Last)\n-                    or else\n                   CPU > Integer (System.Multiprocessors.Number_Of_CPUs))\n       then\n          raise Tasking_Error with \"CPU not in range\";"}, {"sha": "41ddca237f32760d4bab3689a2ace7b8596e0e8f", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93a87598b928f58f9e467bea8c718c5e2c91e498/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93a87598b928f58f9e467bea8c718c5e2c91e498/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=93a87598b928f58f9e467bea8c718c5e2c91e498", "patch": "@@ -3470,7 +3470,6 @@ package body Sem_Ch6 is\n          --  the body, which can be defined by a pragma inside the body.\n \n          elsif GNATprove_Mode\n-           and then Debug_Flag_QQ\n            and then Full_Analysis\n            and then not Inside_A_Generic\n            and then Present (Spec_Id)\n@@ -3499,7 +3498,6 @@ package body Sem_Ch6 is\n       --  body, which can be defined by a pragma inside the body.\n \n       elsif GNATprove_Mode\n-        and then Debug_Flag_QQ\n         and then Full_Analysis\n         and then not Inside_A_Generic\n         and then Present (Spec_Id)\n@@ -3637,7 +3635,6 @@ package body Sem_Ch6 is\n \n       if SPARK_Mode /= On\n         and then GNATprove_Mode\n-        and then Debug_Flag_QQ\n         and then Present (Spec_Id)\n         and then Nkind (Parent (Parent (Spec_Id))) = N_Subprogram_Declaration\n       then"}]}