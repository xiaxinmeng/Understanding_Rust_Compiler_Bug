{"sha": "f04f1d2c6305eea31102357d0b2aa7ab95ece2fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA0ZjFkMmM2MzA1ZWVhMzExMDIzNTdkMGIyYWE3YWI5NWVjZTJmYg==", "commit": {"author": {"name": "Kelley Cook", "email": "kcook@gcc.gnu.org", "date": "2005-07-06T01:56:56Z"}, "committer": {"name": "R. Kelley Cook", "email": "kcook@gcc.gnu.org", "date": "2005-07-06T01:56:56Z"}, "message": "aclocal.m4: Update macros for autoconf 2.59 style.\n\n2005-07-06  Kelley Cook  <kcook@gcc.gnu.org>\n\n\t* aclocal.m4: Update macros for autoconf 2.59 style.\n\t* configure.ac: Likewise.\n\nFrom-SVN: r101647", "tree": {"sha": "e3e0df050721f4beda9a008fdf986c2c5949f3cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3e0df050721f4beda9a008fdf986c2c5949f3cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f04f1d2c6305eea31102357d0b2aa7ab95ece2fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f04f1d2c6305eea31102357d0b2aa7ab95ece2fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f04f1d2c6305eea31102357d0b2aa7ab95ece2fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f04f1d2c6305eea31102357d0b2aa7ab95ece2fb/comments", "author": null, "committer": null, "parents": [{"sha": "2a04824b9f21d6a57b655efb7fc531a80e6999b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a04824b9f21d6a57b655efb7fc531a80e6999b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a04824b9f21d6a57b655efb7fc531a80e6999b4"}], "stats": {"total": 105, "additions": 55, "deletions": 50}, "files": [{"sha": "b7d872370e66d35ea656ddac204df4bb65fbcc20", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f04f1d2c6305eea31102357d0b2aa7ab95ece2fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f04f1d2c6305eea31102357d0b2aa7ab95ece2fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f04f1d2c6305eea31102357d0b2aa7ab95ece2fb", "patch": "@@ -1,3 +1,8 @@\n+2005-07-06  Kelley Cook  <kcook@gcc.gnu.org>\n+\n+\t* aclocal.m4: Update macros for autoconf 2.59 style.\n+\t* configure.ac: Likewise.\n+\n 2005-07-05  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* pa.c (function_value): Handle small aggregates on 32-bit targets."}, {"sha": "da6e38a780b6d4300c4e7f6cc93b84790b56e203", "filename": "gcc/aclocal.m4", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f04f1d2c6305eea31102357d0b2aa7ab95ece2fb/gcc%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f04f1d2c6305eea31102357d0b2aa7ab95ece2fb/gcc%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Faclocal.m4?ref=f04f1d2c6305eea31102357d0b2aa7ab95ece2fb", "patch": "@@ -16,10 +16,10 @@ dnl \t[ACTION-IF-FOUND [, ACTION-IF-NOT-FOUND [, INCLUDES]]])\n AC_DEFUN([gcc_AC_CHECK_DECL],\n [AC_MSG_CHECKING([whether $1 is declared])\n AC_CACHE_VAL(gcc_cv_have_decl_$1,\n-[AC_TRY_COMPILE([$4],\n+[AC_COMPILE_IFELSE([AC_LANG_PROGRAM([$4],\n [#ifndef $1\n char *(*pfn) = (char *(*)) $1 ;\n-#endif], eval \"gcc_cv_have_decl_$1=yes\", eval \"gcc_cv_have_decl_$1=no\")])\n+#endif])], eval \"gcc_cv_have_decl_$1=yes\", eval \"gcc_cv_have_decl_$1=no\")])\n if eval \"test \\\"`echo '$gcc_cv_have_decl_'$1`\\\" = yes\"; then\n   AC_MSG_RESULT(yes) ; ifelse([$2], , :, [$2])\n else\n@@ -93,7 +93,7 @@ dnl See if the printf functions in libc support %p in format strings.\n AC_DEFUN([gcc_AC_FUNC_PRINTF_PTR],\n [AC_CACHE_CHECK(whether the printf functions support %p,\n   gcc_cv_func_printf_ptr,\n-[AC_TRY_RUN([#include <stdio.h>\n+[AC_RUN_IFELSE([AC_LANG_SOURCE([[#include <stdio.h>\n \n int main()\n {\n@@ -102,7 +102,7 @@ int main()\n   sprintf(buf, \"%p\", p);\n   sscanf(buf, \"%p\", &q);\n   return (p != q);\n-}], gcc_cv_func_printf_ptr=yes, gcc_cv_func_printf_ptr=no,\n+}]])], gcc_cv_func_printf_ptr=yes, gcc_cv_func_printf_ptr=no,\n \tgcc_cv_func_printf_ptr=no)\n rm -f core core.* *.core])\n if test $gcc_cv_func_printf_ptr = yes ; then\n@@ -151,7 +151,7 @@ dnl Define MKDIR_TAKES_ONE_ARG if mkdir accepts only one argument instead\n dnl of the usual 2.\n AC_DEFUN([gcc_AC_FUNC_MKDIR_TAKES_ONE_ARG],\n [AC_CACHE_CHECK([if mkdir takes one argument], gcc_cv_mkdir_takes_one_arg,\n-[AC_TRY_COMPILE([\n+[AC_COMPILE_IFELSE([AC_LANG_PROGRAM([\n #include <sys/types.h>\n #ifdef HAVE_SYS_STAT_H\n # include <sys/stat.h>\n@@ -161,7 +161,7 @@ AC_DEFUN([gcc_AC_FUNC_MKDIR_TAKES_ONE_ARG],\n #endif\n #ifdef HAVE_DIRECT_H\n # include <direct.h>\n-#endif], [mkdir (\"foo\", 0);], \n+#endif], [mkdir (\"foo\", 0);])],\n         gcc_cv_mkdir_takes_one_arg=no, gcc_cv_mkdir_takes_one_arg=yes)])\n if test $gcc_cv_mkdir_takes_one_arg = yes ; then\n   AC_DEFINE(MKDIR_TAKES_ONE_ARG, 1, [Define if host mkdir takes a single argument.])\n@@ -279,7 +279,7 @@ else\n \n    # Unlike /dev/zero, the MAP_ANON(YMOUS) defines can be probed for.\n    AC_CACHE_CHECK([for MAP_ANON(YMOUS)], gcc_cv_decl_map_anon,\n-    [AC_TRY_COMPILE(\n+    [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n [#include <sys/types.h>\n #include <sys/mman.h>\n #include <unistd.h>\n@@ -288,7 +288,7 @@ else\n #define MAP_ANONYMOUS MAP_ANON\n #endif\n ],\n-[int n = MAP_ANONYMOUS;],\n+[int n = MAP_ANONYMOUS;])],\n     gcc_cv_decl_map_anon=yes,\n     gcc_cv_decl_map_anon=no)])\n \n@@ -338,7 +338,7 @@ if test -n \"[$]$1\"; then\n   ac_prog_version=`<<$>>$1 $3 2>&1 |\n                    sed -n 's/^.*patsubst(<<$4>>,/,\\/).*$/\\1/p'`\n changequote([,])dnl\n-  echo \"configure:__oline__: version of $2 is $ac_prog_version\" >&AC_FD_CC\n+  echo \"configure:__oline__: version of $2 is $ac_prog_version\" >&AS_MESSAGE_LOG_FD\n changequote(<<,>>)dnl\n   case $ac_prog_version in\n     '')     gcc_cv_prog_$2_modern=no;;\n@@ -358,7 +358,7 @@ dnl be either signed or unsigned.\n dnl\n AC_DEFUN([gcc_AC_C_ENUM_BF_UNSIGNED],\n [AC_CACHE_CHECK(for unsigned enumerated bitfields, gcc_cv_enum_bf_unsigned,\n-[AC_TRY_RUN(#include <stdlib.h>\n+[AC_RUN_IFELSE([AC_LANG_SOURCE([#include <stdlib.h>\n enum t { BLAH = 128 } ;\n struct s_t { enum t member : 8; } s ;\n int main(void)\n@@ -367,7 +367,7 @@ int main(void)\n         if (s.member < 0) exit(1);\n         exit(0);\n \n-}, gcc_cv_enum_bf_unsigned=yes, gcc_cv_enum_bf_unsigned=no, gcc_cv_enum_bf_unsigned=yes)])\n+}])], gcc_cv_enum_bf_unsigned=yes, gcc_cv_enum_bf_unsigned=no, gcc_cv_enum_bf_unsigned=yes)])\n if test $gcc_cv_enum_bf_unsigned = yes; then\n   AC_DEFINE(ENUM_BITFIELDS_ARE_UNSIGNED, 1,\n     [Define if enumerated bitfields are treated as unsigned values.])\n@@ -391,11 +391,11 @@ if test $gcc_cv_decl_char_bit = no; then\n [i=8\n  gcc_cv_c_nbby=\n  while test $i -lt 65; do\n-   AC_TRY_COMPILE(,\n+   AC_COMPILE_IFELSE([AC_LANG_PROGRAM(,\n      [switch(0) {\n   case (unsigned char)((unsigned long)1 << $i) == ((unsigned long)1 << $i):\n   case (unsigned char)((unsigned long)1<<($i-1)) == ((unsigned long)1<<($i-1)):\n-  ; }], \n+  ; }])],\n      [gcc_cv_c_nbby=$i; break])\n    i=`expr $i + 1`\n  done\n@@ -414,8 +414,8 @@ dnl From Bruno Haible.\n AC_DEFUN([AM_LANGINFO_CODESET],\n [\n   AC_CACHE_CHECK([for nl_langinfo and CODESET], am_cv_langinfo_codeset,\n-    [AC_TRY_LINK([#include <langinfo.h>],\n-      [char* cs = nl_langinfo(CODESET);],\n+    [AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <langinfo.h>],\n+      [char* cs = nl_langinfo(CODESET);])],\n       am_cv_langinfo_codeset=yes,\n       am_cv_langinfo_codeset=no)\n     ])\n@@ -431,11 +431,11 @@ AC_DEFUN([gcc_AC_INITFINI_ARRAY],\n \t[], [\n AC_CACHE_CHECK(for .preinit_array/.init_array/.fini_array support,\n \t\t gcc_cv_initfini_array, [dnl\n-  AC_TRY_RUN([\n+  AC_RUN_IFELSE([AC_LANG_SOURCE([\n static int x = -1;\n int main (void) { return x; }\n int foo (void) { x = 0; }\n-int (*fp) (void) __attribute__ ((section (\".init_array\"))) = foo;],\n+int (*fp) (void) __attribute__ ((section (\".init_array\"))) = foo;])],\n \t     [gcc_cv_initfini_array=yes], [gcc_cv_initfini_array=no],\n \t     [gcc_cv_initfini_array=no])])\n   enable_initfini_array=$gcc_cv_initfini_array\n@@ -517,12 +517,12 @@ AC_DEFUN([gcc_GAS_CHECK_FEATURE],\n     gcc_GAS_VERSION_GTE_IFELSE($3, [[$2]=yes])\n   el])if test x$gcc_cv_as != x; then\n     echo ifelse(m4_substr([$5],0,1),[$], \"[$5]\", '[$5]') > conftest.s\n-    if AC_TRY_COMMAND([$gcc_cv_as $4 -o conftest.o conftest.s >&AC_FD_CC])\n+    if AC_TRY_COMMAND([$gcc_cv_as $4 -o conftest.o conftest.s >&AS_MESSAGE_LOG_FD])\n     then\n \tifelse([$6],, [$2]=yes, [$6])\n     else\n-      echo \"configure: failed program was\" >&AC_FD_CC\n-      cat conftest.s >&AC_FD_CC\n+      echo \"configure: failed program was\" >&AS_MESSAGE_LOG_FD\n+      cat conftest.s >&AS_MESSAGE_LOG_FD\n     fi\n     rm -f conftest.o conftest.s\n   fi])"}, {"sha": "0a66cdf8949065d253960eff36716b6c4807d582", "filename": "gcc/configure.ac", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f04f1d2c6305eea31102357d0b2aa7ab95ece2fb/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f04f1d2c6305eea31102357d0b2aa7ab95ece2fb/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=f04f1d2c6305eea31102357d0b2aa7ab95ece2fb", "patch": "@@ -517,22 +517,22 @@ if test x$ac_valgrind_checking != x ; then\n   # It is certainly possible that there's valgrind but no valgrind.h.\n   # GCC relies on making annotations so we must have both.\n   AC_MSG_CHECKING(for VALGRIND_DISCARD in <valgrind/memcheck.h>)\n-  AC_TRY_CPP(\n-    [#include <valgrind/memcheck.h>\n+  AC_PREPROC_IFELSE([AC_LANG_SOURCE(\n+    [[#include <valgrind/memcheck.h>\n #ifndef VALGRIND_DISCARD\n #error VALGRIND_DISCARD not defined\n-#endif],\n+#endif]])],\n   [gcc_cv_header_valgrind_memcheck_h=yes],\n   [gcc_cv_header_valgrind_memcheck_h=no])\n   AC_MSG_RESULT($gcc_cv_header_valgrind_memcheck_h)\n   AC_MSG_CHECKING(for VALGRIND_DISCARD in <memcheck.h>)\n-  AC_TRY_CPP(\n-    [#include <memcheck.h>\n+  AC_PREPROC_IFELSE([AC_LANG_SOURCE(\n+    [[#include <memcheck.h>\n #ifndef VALGRIND_DISCARD\n #error VALGRIND_DISCARD not defined\n-#endif],\n-  [gcc_cv_header_memcheck_h=yes], \n-  gcc_cv_header_memcheck_h=no)\n+#endif]])],\n+  [gcc_cv_header_memcheck_h=yes],\n+  [gcc_cv_header_memcheck_h=no])\n   AC_MSG_RESULT($gcc_cv_header_memcheck_h)\n   AM_PATH_PROG_WITH_TEST(valgrind_path, valgrind,\n \t[$ac_dir/$ac_word --version | grep valgrind- >/dev/null 2>&1])\n@@ -859,13 +859,13 @@ fi\n \n AC_MSG_CHECKING(for GNU C library)\n AC_CACHE_VAL(gcc_cv_glibc,\n-[AC_TRY_COMPILE(\n-  [#include <features.h>],[\n+[AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n+  [[#include <features.h>]], [[\n #if ! (defined __GLIBC__ || defined __GNU_LIBRARY__)\n #error Not a GNU C library system\n-#endif], \n-  [gcc_cv_glibc=yes], \n-  gcc_cv_glibc=no)])\n+#endif]])],\n+  [gcc_cv_glibc=yes],\n+  [gcc_cv_glibc=no])])\n AC_MSG_RESULT($gcc_cv_glibc)\n if test $gcc_cv_glibc = yes; then\n   AC_DEFINE(_GNU_SOURCE, 1, [Always define this when using the GNU C Library])\n@@ -959,12 +959,12 @@ AC_SUBST(LDEXP_LIB)\n # doesn't clash with <sys/types.h>, and declares intmax_t.\n AC_MSG_CHECKING(for inttypes.h)\n AC_CACHE_VAL(gcc_cv_header_inttypes_h,\n-[AC_TRY_COMPILE(\n-  [#include <sys/types.h>\n-#include <inttypes.h>],\n-  [intmax_t i = -1;],\n+[AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n+[[#include <sys/types.h>\n+#include <inttypes.h>]],\n+  [[intmax_t i = -1;]])],\n   [gcc_cv_header_inttypes_h=yes],\n-  gcc_cv_header_inttypes_h=no)])\n+  [gcc_cv_header_inttypes_h=no])])\n AC_MSG_RESULT($gcc_cv_header_inttypes_h)\n if test $gcc_cv_header_inttypes_h = yes; then\n   AC_DEFINE(HAVE_INTTYPES_H, 1,\n@@ -986,15 +986,15 @@ AC_CHECK_FUNCS(times clock dup2 kill getrlimit setrlimit atoll atoq \\\n \n if test x$ac_cv_func_mbstowcs = xyes; then\n   AC_CACHE_CHECK(whether mbstowcs works, gcc_cv_func_mbstowcs_works,\n-[    AC_TRY_RUN([#include <stdlib.h>\n+[    AC_RUN_IFELSE([AC_LANG_SOURCE([[#include <stdlib.h>\n int main()\n {\n   mbstowcs(0, \"\", 0);\n   return 0;\n-}],\n-    gcc_cv_func_mbstowcs_works=yes,\n-    gcc_cv_func_mbstowcs_works=no,\n-    gcc_cv_func_mbstowcs_works=yes)])\n+}]])],\n+    [gcc_cv_func_mbstowcs_works=yes],\n+    [gcc_cv_func_mbstowcs_works=no],\n+    [gcc_cv_func_mbstowcs_works=yes])])\n   if test x$gcc_cv_func_mbstowcs_works = xyes; then\n     AC_DEFINE(HAVE_WORKING_MBSTOWCS, 1,\n   [Define this macro if mbstowcs does not crash when its\n@@ -1035,7 +1035,7 @@ case \"${host}\" in\n   ac_cv_func_vfork_works=yes\n   ;;\n esac\n-AC_FUNC_VFORK\n+AC_FUNC_FORK\n \n AM_ICONV\n # Until we have in-tree GNU iconv:\n@@ -1063,13 +1063,13 @@ gcc_AC_CHECK_DECLS(getrlimit setrlimit getrusage, , ,[\n #endif\n ])\n \n-AC_TRY_COMPILE([\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n #include \"ansidecl.h\"\n #include \"system.h\"\n #ifdef HAVE_SYS_RESOURCE_H\n #include <sys/resource.h>\n #endif\n-],[rlim_t l = 0;],,[AC_DEFINE([rlim_t],[long],\n+]], [[rlim_t l = 0;]])],[],[AC_DEFINE([rlim_t],[long],\n [Define to \\`long' if <sys/resource.h> doesn't define.])])\n \n # On AIX 5.2, <ldfcn.h> conflicts with <fcntl.h>, as both define incompatible\n@@ -1096,13 +1096,13 @@ gcc_AC_CHECK_DECLS(times, , ,[\n \n # More time-related stuff.\n AC_CACHE_CHECK(for struct tms, ac_cv_struct_tms, [\n-AC_TRY_COMPILE([\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n #include \"ansidecl.h\"\n #include \"system.h\"\n #ifdef HAVE_SYS_TIMES_H\n #include <sys/times.h>\n #endif\n-], [struct tms tms;], ac_cv_struct_tms=yes, ac_cv_struct_tms=no)])\n+]], [[struct tms tms;]])],[ac_cv_struct_tms=yes],[ac_cv_struct_tms=no])])\n if test $ac_cv_struct_tms = yes; then\n   AC_DEFINE(HAVE_STRUCT_TMS, 1,\n   [Define if <sys/times.h> defines struct tms.])\n@@ -1111,10 +1111,10 @@ fi\n # use gcc_cv_* here because this doesn't match the behavior of AC_CHECK_TYPE.\n # revisit after autoconf 2.50.\n AC_CACHE_CHECK(for clock_t, gcc_cv_type_clock_t, [\n-AC_TRY_COMPILE([\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n #include \"ansidecl.h\"\n #include \"system.h\"\n-], [clock_t x;], gcc_cv_type_clock_t=yes, gcc_cv_type_clock_t=no)])\n+]], [[clock_t x;]])],[gcc_cv_type_clock_t=yes],[gcc_cv_type_clock_t=no])])\n if test $gcc_cv_type_clock_t = yes; then\n   AC_DEFINE(HAVE_CLOCK_T, 1,\n   [Define if <time.h> defines clock_t.])"}]}