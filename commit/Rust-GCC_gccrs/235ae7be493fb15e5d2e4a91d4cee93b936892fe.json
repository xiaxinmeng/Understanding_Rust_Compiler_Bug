{"sha": "235ae7be493fb15e5d2e4a91d4cee93b936892fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM1YWU3YmU0OTNmYjE1ZTVkMmU0YTkxZDRjZWU5M2I5MzY4OTJmZQ==", "commit": {"author": {"name": "David S. Miller", "email": "davem@redhat.com", "date": "1999-12-16T14:55:20Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "1999-12-16T14:55:20Z"}, "message": "expr.c (emit_move_insn_1): Only emit clobbers if one of the outputs is a SUBREG.\n\n\t* expr.c (emit_move_insn_1): Only emit clobbers if one of\n\tthe outputs is a SUBREG.\n\t* rtlanal.c (reg_overlap_mentioned_p): Revert December 15th\n\tchange.\n\nFrom-SVN: r30979", "tree": {"sha": "8b10d0d0570d060cfccda5f4153ec233e94bf95b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b10d0d0570d060cfccda5f4153ec233e94bf95b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/235ae7be493fb15e5d2e4a91d4cee93b936892fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/235ae7be493fb15e5d2e4a91d4cee93b936892fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/235ae7be493fb15e5d2e4a91d4cee93b936892fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/235ae7be493fb15e5d2e4a91d4cee93b936892fe/comments", "author": null, "committer": null, "parents": [{"sha": "5b772bbdc0d20de1c4ab781611b5e5566ec45ecc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b772bbdc0d20de1c4ab781611b5e5566ec45ecc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b772bbdc0d20de1c4ab781611b5e5566ec45ecc"}], "stats": {"total": 63, "additions": 44, "deletions": 19}, "files": [{"sha": "5ffd5e20ce304552447fb5d0354a1e81e5c49d48", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/235ae7be493fb15e5d2e4a91d4cee93b936892fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/235ae7be493fb15e5d2e4a91d4cee93b936892fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=235ae7be493fb15e5d2e4a91d4cee93b936892fe", "patch": "@@ -1,3 +1,10 @@\n+1999-12-16  David S. Miller  <davem@redhat.com>\n+\n+\t* expr.c (emit_move_insn_1): Only emit clobbers if one of\n+\tthe outputs is a SUBREG.\n+\t* rtlanal.c (reg_overlap_mentioned_p): Revert December 15th\n+\tchange.\n+\n Thu Dec 16 11:33:57 MET 1999  Jan Hubicka  <hubicka@freesoft.cz>\n \n \t* toplev.c (rest_of_compilation): Run branch shortening after"}, {"sha": "ac01d280a081e7e489ee74a3f4d84dbe12eef34c", "filename": "gcc/expr.c", "status": "modified", "additions": 37, "deletions": 12, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/235ae7be493fb15e5d2e4a91d4cee93b936892fe/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/235ae7be493fb15e5d2e4a91d4cee93b936892fe/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=235ae7be493fb15e5d2e4a91d4cee93b936892fe", "patch": "@@ -2638,6 +2638,9 @@ emit_move_insn_1 (x, y)\n \t}\n       else\n \t{\n+\t  rtx realpart_x, realpart_y;\n+\t  rtx imagpart_x, imagpart_y;\n+\n \t  /* If this is a complex value with each part being smaller than a\n \t     word, the usual calling sequence will likely pack the pieces into\n \t     a single register.  Unfortunately, SUBREG of hard registers only\n@@ -2687,19 +2690,27 @@ emit_move_insn_1 (x, y)\n \t\t}\n \t    }\n \n-\t  /* Show the output dies here.  This is necessary for pseudos;\n+\t  realpart_x = gen_realpart (submode, x);\n+\t  realpart_y = gen_realpart (submode, y);\n+\t  imagpart_x = gen_imagpart (submode, x);\n+\t  imagpart_y = gen_imagpart (submode, y);\n+\n+\t  /* Show the output dies here.  This is necessary for SUBREGs\n+\t     of pseudos since we cannot track their lifetimes correctly;\n \t     hard regs shouldn't appear here except as return values.\n \t     We never want to emit such a clobber after reload.  */\n \t  if (x != y\n-\t      && ! (reload_in_progress || reload_completed))\n+\t      && ! (reload_in_progress || reload_completed)\n+\t      && (GET_CODE (realpart_x) == SUBREG\n+\t\t  || GET_CODE (imagpart_x) == SUBREG))\n \t    {\n \t      emit_insn (gen_rtx_CLOBBER (VOIDmode, x));\n \t    }\n \n \t  emit_insn (GEN_FCN (mov_optab->handlers[(int) submode].insn_code)\n-\t\t     (gen_realpart (submode, x), gen_realpart (submode, y)));\n+\t\t     (realpart_x, realpart_y));\n \t  emit_insn (GEN_FCN (mov_optab->handlers[(int) submode].insn_code)\n-\t\t     (gen_imagpart (submode, x), gen_imagpart (submode, y)));\n+\t\t     (imagpart_x, imagpart_y));\n \t}\n \n       return get_last_insn ();\n@@ -2711,6 +2722,8 @@ emit_move_insn_1 (x, y)\n   else if (GET_MODE_SIZE (mode) > UNITS_PER_WORD)\n     {\n       rtx last_insn = 0;\n+      rtx seq;\n+      int need_clobber;\n       \n #ifdef PUSH_ROUNDING\n \n@@ -2723,15 +2736,9 @@ emit_move_insn_1 (x, y)\n \t}\n #endif\n \t\t\t     \n-      /* Show the output dies here.  This is necessary for pseudos;\n-\t hard regs shouldn't appear here except as return values.\n-\t We never want to emit such a clobber after reload.  */\n-      if (x != y\n-\t  && ! (reload_in_progress || reload_completed))\n-\t{\n-\t  emit_insn (gen_rtx_CLOBBER (VOIDmode, x));\n-\t}\n+      start_sequence ();\n \n+      need_clobber = 0;\n       for (i = 0;\n \t   i < (GET_MODE_SIZE (mode)  + (UNITS_PER_WORD - 1)) / UNITS_PER_WORD;\n \t   i++)\n@@ -2753,9 +2760,27 @@ emit_move_insn_1 (x, y)\n \t  if (xpart == 0 || ypart == 0)\n \t    abort ();\n \n+\t  need_clobber |= (GET_CODE (xpart) == SUBREG);\n+\n \t  last_insn = emit_move_insn (xpart, ypart);\n \t}\n \n+      seq = gen_sequence ();\n+      end_sequence ();\n+\n+      /* Show the output dies here.  This is necessary for SUBREGs\n+\t of pseudos since we cannot track their lifetimes correctly;\n+\t hard regs shouldn't appear here except as return values.\n+\t We never want to emit such a clobber after reload.  */\n+      if (x != y\n+\t  && ! (reload_in_progress || reload_completed)\n+\t  && need_clobber != 0)\n+\t{\n+\t  emit_insn (gen_rtx_CLOBBER (VOIDmode, x));\n+\t}\n+\n+      emit_insn (seq);\n+\n       return last_insn;\n     }\n   else"}, {"sha": "838ca9daa0cee41aec2ef1d700de29489e5d9e69", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/235ae7be493fb15e5d2e4a91d4cee93b936892fe/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/235ae7be493fb15e5d2e4a91d4cee93b936892fe/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=235ae7be493fb15e5d2e4a91d4cee93b936892fe", "patch": "@@ -964,13 +964,6 @@ reg_overlap_mentioned_p (x, in)\n \t  return 1;\n       return 0;\n     }\n-  else if (GET_CODE (x) == CONCAT)\n-    {\n-      if (reg_overlap_mentioned_p (XEXP (x, 0), in)\n-\t  || reg_overlap_mentioned_p (XEXP (x, 1), in))\n-\treturn 1;\n-      return 0;\n-    }\n   else\n     abort ();\n "}]}