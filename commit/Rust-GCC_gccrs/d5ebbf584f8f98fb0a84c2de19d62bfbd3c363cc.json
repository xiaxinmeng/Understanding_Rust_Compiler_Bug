{"sha": "d5ebbf584f8f98fb0a84c2de19d62bfbd3c363cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVlYmJmNTg0ZjhmOThmYjBhODRjMmRlMTlkNjJiZmJkM2MzNjNjYw==", "commit": {"author": {"name": "Stephane Carrez", "email": "stcarrez@nerim.fr", "date": "2004-03-28T12:00:26Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2004-03-28T12:00:26Z"}, "message": "m68hc11-protos.h (m68hc11_page0_symbol_p): Declare.\n\n\t* config/m68hc11/m68hc11-protos.h (m68hc11_page0_symbol_p): Declare.\n\n\t* config/m68hc11/m68hc11.c (m68hc11_handle_page0_attribute): New.\n\t(m68hc11_attribute_table): New attribute \"page0\" to mark a global\n\tvariable as being allocated from within page0 section.\n\t(m68hc11_encode_label): New function.\n\t(m68hc11_strip_name_encoding): New function.\n\t(m68hc11_page0_symbol_p): New function.\n\t(m68hc11_indirect_p): Accept global variables marked in page0.\n\t(m68hc11_encode_section_info): Lookup \"page0\" attribute.\n\n\t* config/m68hc11/m68hc11.h (EXTRA_CONSTRAINT): 'R' constraint also\n\trepresents access to page0 variables.\n\n\t* config/m68hc11/m68hc11.md (\"*logicalsi3_zexthi\"): Use gen_rtx_REG.\n\t(\"*logicalsi3_silshl16_zext\"): Likewise.\n\t(\"*ashldi3_const32\"): Likewise.\n\t(peephole2 ashift): Likewise.\n\nFrom-SVN: r80038", "tree": {"sha": "2b0da7ff6264fcf62fd7a46e411866aa45acc524", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b0da7ff6264fcf62fd7a46e411866aa45acc524"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5ebbf584f8f98fb0a84c2de19d62bfbd3c363cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5ebbf584f8f98fb0a84c2de19d62bfbd3c363cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5ebbf584f8f98fb0a84c2de19d62bfbd3c363cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5ebbf584f8f98fb0a84c2de19d62bfbd3c363cc/comments", "author": null, "committer": null, "parents": [{"sha": "5baeaac0676b282f9ac9815f245e60e1d2f9b31f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5baeaac0676b282f9ac9815f245e60e1d2f9b31f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5baeaac0676b282f9ac9815f245e60e1d2f9b31f"}], "stats": {"total": 137, "additions": 122, "deletions": 15}, "files": [{"sha": "281ab227e3bfabb2ec1a0d7959d62dc288e9bd84", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ebbf584f8f98fb0a84c2de19d62bfbd3c363cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ebbf584f8f98fb0a84c2de19d62bfbd3c363cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d5ebbf584f8f98fb0a84c2de19d62bfbd3c363cc", "patch": "@@ -1,3 +1,24 @@\n+2004-03-28  Stephane Carrez  <stcarrez@nerim.fr>\n+\n+\t* config/m68hc11/m68hc11-protos.h (m68hc11_page0_symbol_p): Declare.\n+\n+\t* config/m68hc11/m68hc11.c (m68hc11_handle_page0_attribute): New.\n+\t(m68hc11_attribute_table): New attribute \"page0\" to mark a global\n+\tvariable as being allocated from within page0 section.\n+\t(m68hc11_encode_label): New function.\n+\t(m68hc11_strip_name_encoding): New function.\n+\t(m68hc11_page0_symbol_p): New function.\n+\t(m68hc11_indirect_p): Accept global variables marked in page0.\n+\t(m68hc11_encode_section_info): Lookup \"page0\" attribute.\n+\n+\t* config/m68hc11/m68hc11.h (EXTRA_CONSTRAINT): 'R' constraint also\n+\trepresents access to page0 variables.\n+\n+\t* config/m68hc11/m68hc11.md (\"*logicalsi3_zexthi\"): Use gen_rtx_REG.\n+\t(\"*logicalsi3_silshl16_zext\"): Likewise.\n+\t(\"*ashldi3_const32\"): Likewise.\n+\t(peephole2 ashift): Likewise.\n+\n 2004-03-28  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* c-tree.h (C_DECL_REGISTER): New."}, {"sha": "f5a1b4e8eb3cbfadbfb93e862dea4615d44bdcdf", "filename": "gcc/config/m68hc11/m68hc11-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ebbf584f8f98fb0a84c2de19d62bfbd3c363cc/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ebbf584f8f98fb0a84c2de19d62bfbd3c363cc/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h?ref=d5ebbf584f8f98fb0a84c2de19d62bfbd3c363cc", "patch": "@@ -132,6 +132,7 @@ extern void m68hc11_function_epilogue (FILE*,int);\n \n extern int m68hc11_is_far_symbol (rtx);\n extern int m68hc11_is_trap_symbol (rtx);\n+extern int m68hc11_page0_symbol_p (rtx x);\n \n #endif /* TREE_CODE */\n "}, {"sha": "45ef1bcd3b060bbfc6f8e2ffc02fa4d48029e012", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 84, "deletions": 1, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ebbf584f8f98fb0a84c2de19d62bfbd3c363cc/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ebbf584f8f98fb0a84c2de19d62bfbd3c363cc/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=d5ebbf584f8f98fb0a84c2de19d62bfbd3c363cc", "patch": "@@ -1,5 +1,6 @@\n /* Subroutines for code generation on Motorola 68HC11 and 68HC12.\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004\n+   Free Software Foundation, Inc.\n    Contributed by Stephane Carrez (stcarrez@nerim.fr)\n \n This file is part of GCC.\n@@ -83,6 +84,7 @@ static void m68hc11_asm_out_constructor (rtx, int);\n static void m68hc11_asm_out_destructor (rtx, int);\n static void m68hc11_file_start (void);\n static void m68hc11_encode_section_info (tree, rtx, int);\n+static const char *m68hc11_strip_name_encoding (const char* str);\n static unsigned int m68hc11_section_type_flags (tree, const char*, int);\n static int autoinc_mode (rtx);\n static int m68hc11_make_autoinc_notes (rtx *, void *);\n@@ -271,6 +273,9 @@ static int nb_soft_regs;\n #undef TARGET_RETURN_IN_MEMORY\n #define TARGET_RETURN_IN_MEMORY m68hc11_return_in_memory\n \n+#undef TARGET_STRIP_NAME_ENCODING\n+#define TARGET_STRIP_NAME_ENCODING m68hc11_strip_name_encoding\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n int\n@@ -1047,6 +1052,9 @@ m68hc11_indirect_p (rtx operand, enum machine_mode mode)\n       rtx op = XEXP (operand, 0);\n       int addr_mode;\n \n+      if (m68hc11_page0_symbol_p (op))\n+        return 1;\n+\n       if (symbolic_memory_operand (op, mode))\n \treturn TARGET_M6812;\n \n@@ -1263,13 +1271,36 @@ m68hc11_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n \f\n /* Declaration of types.  */\n \n+/* Handle an \"tiny_data\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+static tree\n+m68hc11_handle_page0_attribute (tree *node, tree name,\n+                                tree args ATTRIBUTE_UNUSED,\n+                                int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n+{\n+  tree decl = *node;\n+\n+  if (TREE_STATIC (decl) || DECL_EXTERNAL (decl))\n+    {\n+      DECL_SECTION_NAME (decl) = build_string (6, \".page0\");\n+    }\n+  else\n+    {\n+      warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n const struct attribute_spec m68hc11_attribute_table[] =\n {\n   /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n   { \"interrupt\", 0, 0, false, true,  true,  m68hc11_handle_fntype_attribute },\n   { \"trap\",      0, 0, false, true,  true,  m68hc11_handle_fntype_attribute },\n   { \"far\",       0, 0, false, true,  true,  m68hc11_handle_fntype_attribute },\n   { \"near\",      0, 0, false, true,  true,  m68hc11_handle_fntype_attribute },\n+  { \"page0\",     0, 0, false, false, false, m68hc11_handle_page0_attribute },\n   { NULL,        0, 0, false, false, false, NULL }\n };\n \n@@ -1298,6 +1329,51 @@ m68hc11_handle_fntype_attribute (tree *node, tree name,\n \n   return NULL_TREE;\n }\n+/* Undo the effects of the above.  */\n+\n+static const char *\n+m68hc11_strip_name_encoding (const char *str)\n+{\n+  return str + (*str == '*' || *str == '@' || *str == '&');\n+}\n+\n+static void\n+m68hc11_encode_label (tree decl)\n+{\n+  const char *str = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n+  int len = strlen (str);\n+  char *newstr = alloca (len + 2);\n+\n+  newstr[0] = '@';\n+  strcpy (&newstr[1], str);\n+\n+  XSTR (XEXP (DECL_RTL (decl), 0), 0) = ggc_alloc_string (newstr, len + 1);\n+}\n+\n+/* Return 1 if this is a symbol in page0  */\n+int\n+m68hc11_page0_symbol_p (rtx x)\n+{\n+  switch (GET_CODE (x))\n+    {\n+    case SYMBOL_REF:\n+      return XSTR (x, 0) != 0 && XSTR (x, 0)[0] == '@';\n+\n+    case CONST:\n+      return m68hc11_page0_symbol_p (XEXP (x, 0));\n+\n+    case PLUS:\n+      if (!m68hc11_page0_symbol_p (XEXP (x, 0)))\n+        return 0;\n+\n+      return GET_CODE (XEXP (x, 1)) == CONST_INT\n+        && INTVAL (XEXP (x, 1)) < 256\n+        && INTVAL (XEXP (x, 1)) >= 0;\n+\n+    default:\n+      return 0;\n+    }\n+}\n \n /* We want to recognize trap handlers so that we handle calls to traps\n    in a special manner (by issuing the trap).  This information is stored\n@@ -1310,6 +1386,13 @@ m68hc11_encode_section_info (tree decl, rtx rtl, int first ATTRIBUTE_UNUSED)\n   int trap_handler;\n   int is_far = 0;\n   \n+  if (TREE_CODE (decl) == VAR_DECL)\n+    {\n+      if (lookup_attribute (\"page0\", DECL_ATTRIBUTES (decl)) != 0)\n+        m68hc11_encode_label (decl);\n+      return;\n+    }\n+\n   if (TREE_CODE (decl) != FUNCTION_DECL)\n     return;\n "}, {"sha": "b441b4dad9fec8ca6ce030c3da3d2b1083fe683c", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ebbf584f8f98fb0a84c2de19d62bfbd3c363cc/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ebbf584f8f98fb0a84c2de19d62bfbd3c363cc/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=d5ebbf584f8f98fb0a84c2de19d62bfbd3c363cc", "patch": "@@ -879,7 +879,9 @@ extern enum reg_class m68hc11_tmp_regs_class;\n \t\t && VALUE == CONST0_RTX (GET_MODE (VALUE))) : 0) \n \n /* 'U' represents certain kind of memory indexed operand for 68HC12.\n-   and any memory operand for 68HC11.  */\n+   and any memory operand for 68HC11.\n+   'R' represents indexed addressing mode or access to page0 for 68HC11.\n+   For 68HC12, it represents any memory operand.  */\n #define EXTRA_CONSTRAINT(OP, C)                         \\\n ((C) == 'U' ? m68hc11_small_indexed_indirect_p (OP, GET_MODE (OP)) \\\n  : (C) == 'Q' ? m68hc11_symbolic_p (OP, GET_MODE (OP)) \\"}, {"sha": "864fdb34f0e6e9811a59184f855266c3373393ff", "filename": "gcc/config/m68hc11/m68hc11.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ebbf584f8f98fb0a84c2de19d62bfbd3c363cc/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ebbf584f8f98fb0a84c2de19d62bfbd3c363cc/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md?ref=d5ebbf584f8f98fb0a84c2de19d62bfbd3c363cc", "patch": "@@ -3688,8 +3688,8 @@\n      {\n        operands[5] = operands[1];\n        /* Make all the (set (REG:x) (REG:y)) a nop set.  */\n-       operands[4] = gen_rtx (REG, HImode, HARD_D_REGNUM);\n-       operands[6] = gen_rtx (REG, HImode, HARD_X_REGNUM);\n+       operands[4] = gen_rtx_REG (HImode, HARD_D_REGNUM);\n+       operands[6] = gen_rtx_REG (HImode, HARD_X_REGNUM);\n      }\n    else\n      {\n@@ -3893,12 +3893,12 @@\n          {\n \t   FAIL;\n \t }\n-       emit_move_insn (gen_rtx (REG, HImode, HARD_X_REGNUM), operands[2]);\n-       emit_insn (gen_swap_areg (gen_rtx (REG, HImode, HARD_D_REGNUM),\n-\t\t\t         gen_rtx (REG, HImode, HARD_X_REGNUM)));\n+       emit_move_insn (gen_rtx_REG (HImode, HARD_X_REGNUM), operands[2]);\n+       emit_insn (gen_swap_areg (gen_rtx_REG (HImode, HARD_D_REGNUM),\n+\t\t\t         gen_rtx_REG (HImode, HARD_X_REGNUM)));\n      }\n-   operands[4] = gen_rtx (REG, HImode, HARD_D_REGNUM);\n-   operands[6] = gen_rtx (REG, HImode, HARD_X_REGNUM);\n+   operands[4] = gen_rtx_REG (HImode, HARD_D_REGNUM);\n+   operands[6] = gen_rtx_REG (HImode, HARD_X_REGNUM);\n    operands[5] = operands[2];\n    operands[7] = operands[1];\n \n@@ -4421,7 +4421,7 @@\n \n          /* Adjust first operand if it uses SP so that we take into\n             account the above push.  Can occur only for 68HC12.  */\n-         if (reg_mentioned_p (gen_rtx (REG, HImode, HARD_SP_REGNUM),\n+         if (reg_mentioned_p (gen_rtx_REG (HImode, HARD_SP_REGNUM),\n \t                      operands[1]))\n            operands[1] = adjust_address (operands[1],\n \t                                 GET_MODE (operands[0]), 4);\n@@ -4516,13 +4516,13 @@\n   \"operands[3] = m68hc11_gen_highpart (HImode, operands[2]);\n    if (X_REG_P (operands[2]))\n      {\n-       operands[4] = gen_rtx (REG, HImode, HARD_X_REGNUM);\n-       operands[5] = gen_rtx (REG, HImode, HARD_D_REGNUM);\n+       operands[4] = gen_rtx_REG (HImode, HARD_X_REGNUM);\n+       operands[5] = gen_rtx_REG (HImode, HARD_D_REGNUM);\n      }\n    else\n      {\n        operands[4] = m68hc11_gen_lowpart (HImode, operands[2]);\n-       operands[5] = gen_rtx (REG, HImode, HARD_X_REGNUM);\n+       operands[5] = gen_rtx_REG (HImode, HARD_X_REGNUM);\n      }\n \")\n \n@@ -7175,8 +7175,8 @@\n    (set (match_operand:HI 3 \"nonimmediate_operand\" \"\") (reg:HI D_REGNUM))\n    (set (match_operand:HI 4 \"nonimmediate_operand\" \"\") (reg:HI X_REGNUM))]\n   \"!X_REG_P (operands[1])\n-   && peep2_reg_dead_p (2, gen_rtx (REG, HImode, D_REGNUM))\n-   && peep2_reg_dead_p (3, gen_rtx (REG, HImode, X_REGNUM))\"\n+   && peep2_reg_dead_p (2, gen_rtx_REG (HImode, D_REGNUM))\n+   && peep2_reg_dead_p (3, gen_rtx_REG (HImode, X_REGNUM))\"\n   [(set (reg:HI D_REGNUM) (match_dup 5))\n    (set (reg:HI D_REGNUM) (ashift:HI (reg:HI D_REGNUM) (const_int 1)))\n    (set (match_dup 3) (reg:HI D_REGNUM))"}]}