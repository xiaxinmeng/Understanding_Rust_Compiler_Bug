{"sha": "133e0ace678e7fdcc73bc5606f6cb83a15e0ca19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMzZTBhY2U2NzhlN2ZkY2M3M2JjNTYwNmY2Y2I4M2ExNWUwY2ExOQ==", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@gcc.gnu.org", "date": "2004-02-12T06:26:07Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@gcc.gnu.org", "date": "2004-02-12T06:26:07Z"}, "message": "oops, forgot added and removed files.\n\nFrom-SVN: r77694", "tree": {"sha": "9ca484f8caa861a73ed7441417bf6c67adb154b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ca484f8caa861a73ed7441417bf6c67adb154b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/133e0ace678e7fdcc73bc5606f6cb83a15e0ca19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/133e0ace678e7fdcc73bc5606f6cb83a15e0ca19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/133e0ace678e7fdcc73bc5606f6cb83a15e0ca19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/133e0ace678e7fdcc73bc5606f6cb83a15e0ca19/comments", "author": null, "committer": null, "parents": [{"sha": "c2910edfb9a382e84ebac158f9c66b11e7749c7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2910edfb9a382e84ebac158f9c66b11e7749c7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2910edfb9a382e84ebac158f9c66b11e7749c7f"}], "stats": {"total": 342, "additions": 203, "deletions": 139}, "files": [{"sha": "393ba3727bb64edf53233dd0e0df52ae75cb7476", "filename": "libjava/javax/swing/plaf/basic/BasicButtonListener.java", "status": "added", "additions": 188, "deletions": 0, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133e0ace678e7fdcc73bc5606f6cb83a15e0ca19/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicButtonListener.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133e0ace678e7fdcc73bc5606f6cb83a15e0ca19/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicButtonListener.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicButtonListener.java?ref=133e0ace678e7fdcc73bc5606f6cb83a15e0ca19", "patch": "@@ -0,0 +1,188 @@\n+/* BasicButtonListener.java\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.swing.plaf.basic;\n+\n+import java.awt.event.FocusEvent;\n+import java.awt.event.FocusListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.MouseListener;\n+import java.awt.event.MouseMotionListener;\n+import java.beans.PropertyChangeEvent;\n+import java.beans.PropertyChangeListener;\n+import javax.swing.AbstractButton;\n+import javax.swing.ButtonModel;\n+import javax.swing.UIDefaults;\n+import javax.swing.UIManager;\n+import javax.swing.event.ChangeEvent;\n+import javax.swing.event.ChangeListener;\n+import javax.swing.JComponent;\n+\n+public class BasicButtonListener\n+  implements MouseListener, MouseMotionListener, FocusListener, \n+             ChangeListener, PropertyChangeListener\n+{\n+  public void propertyChange(PropertyChangeEvent e)\n+  {\n+  }\n+  protected void checkOpacity(AbstractButton b) \n+  {    \n+  }\n+  public void focusGained(FocusEvent e) \n+  {    \n+  }\n+\n+  public void focusLost(FocusEvent e)\n+  {\n+    if (e.getSource() instanceof AbstractButton)\n+      {\n+        AbstractButton button = (AbstractButton) e.getSource();\n+        ButtonModel model = button.getModel();\n+        model.setArmed(false);\n+      }\n+  }\n+  public void installKeyboardActions(JComponent c)\n+  {\n+  }\n+  public void uninstallKeyboardActions(JComponent c)\n+  {\n+  }\n+  public void stateChanged(ChangeEvent e)\n+  {\n+  }\n+  public void mouseMoved(MouseEvent e)\n+  {\n+    System.err.println(\"button got mouse move\");\n+  }\n+  public void mouseDragged(MouseEvent e)\n+  {\n+    System.err.println(\"button got mouse drag\");\n+  }\n+  public void mouseClicked(MouseEvent e)\n+  {\n+    System.err.println(\"button got mouse click\");\n+  }\n+\n+  /**\n+   * Accept a mouse press event and arm the button.\n+   *\n+   * @param e The mouse press event to accept\n+   */\n+  public void mousePressed(MouseEvent e)\n+  {\n+    if (e.getSource() instanceof AbstractButton)\n+      {\n+        AbstractButton button = (AbstractButton) e.getSource();\n+        ButtonModel model = button.getModel();\n+        if ((e.getModifiers() & InputEvent.BUTTON1_MASK) != 0)\n+          {\n+            // It is important that these transitions happen in this order.\n+            model.setArmed(true);\n+            model.setPressed(true);\n+          }\n+      }\n+  }\n+\n+\n+  /**\n+   * Accept a mouse release event and set the button's \n+   * \"pressed\" property to <code>true</code>, if the model\n+   * is armed. If the model is not armed, ignore the event.\n+   *\n+   * @param e The mouse release event to accept\n+   */\n+  public void mouseReleased(MouseEvent e)\n+  {\n+    if (e.getSource() instanceof AbstractButton)\n+      {\n+        AbstractButton button = (AbstractButton) e.getSource();\n+        ButtonModel model = button.getModel();\n+        if ((e.getModifiers() & InputEvent.BUTTON1_MASK) != 0)\n+          {\n+            // It is important that these transitions happen in this order.\n+            model.setPressed(false);\n+            model.setArmed(false);\n+          }\n+      }\n+  }\n+\n+\n+  /**\n+   * Accept a mouse enter event and set the button's \"rollover\" property to\n+   * <code>true</code>, if the button's \"rolloverEnabled\" property is\n+   * <code>true</code>. If the button is currently armed and the mouse\n+   * button is not held down, this enter event will also disarm the model.\n+   *\n+   * @param e The mouse enter event to accept\n+   */\n+  public void mouseEntered(MouseEvent e)\n+  {\n+    if (e.getSource() instanceof AbstractButton)\n+      {\n+        AbstractButton button = (AbstractButton) e.getSource();\n+        ButtonModel model = button.getModel();\n+        if (button.isRolloverEnabled())\n+          model.setRollover(true);\n+        \n+        if (model.isPressed() \n+            && (e.getModifiers() & InputEvent.BUTTON1_MASK) != 0)\n+          model.setArmed(true);\n+        else\n+          model.setArmed(false);\n+      }\n+  }\n+\n+  /**\n+   * Accept a mouse exit event and set the button's model's \"rollover\"\n+   * property to <code>false</code>, if it's \"rolloverEnabled\" property is\n+   * <code>true</code>. Also disarm the button.\n+   *\n+   * @param e The mouse exit event to accept\n+   */\n+  public void mouseExited(MouseEvent e)\n+  {\n+    if (e.getSource() instanceof AbstractButton)\n+      {\n+        AbstractButton button = (AbstractButton) e.getSource();\n+        ButtonModel model = button.getModel();\n+        if (button.isRolloverEnabled())\n+          model.setRollover(false);\n+        model.setArmed(false);\n+      }\n+  }\n+}"}, {"sha": "6b06187b4517882571c85ad7f8b31270eeec0888", "filename": "libjava/javax/swing/plaf/basic/BasicDefaults.java", "status": "removed", "additions": 0, "deletions": 126, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2910edfb9a382e84ebac158f9c66b11e7749c7f/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicDefaults.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2910edfb9a382e84ebac158f9c66b11e7749c7f/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicDefaults.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicDefaults.java?ref=c2910edfb9a382e84ebac158f9c66b11e7749c7f", "patch": "@@ -1,126 +0,0 @@\n-/* BasicDefaults.java\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n-\n-This file is part of GNU Classpath.\n-\n-GNU Classpath is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU Classpath is distributed in the hope that it will be useful, but\n-WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU Classpath; see the file COPYING.  If not, write to the\n-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-02111-1307 USA.\n-\n-Linking this library statically or dynamically with other modules is\n-making a combined work based on this library.  Thus, the terms and\n-conditions of the GNU General Public License cover the whole\n-combination.\n-\n-As a special exception, the copyright holders of this library give you\n-permission to link this library with independent modules to produce an\n-executable, regardless of the license terms of these independent\n-modules, and to copy and distribute the resulting executable under\n-terms of your choice, provided that you also meet, for each linked\n-independent module, the terms and conditions of the license of that\n-module.  An independent module is a module which is not derived from\n-or based on this library.  If you modify this library, you may extend\n-this exception to your version of the library, but you are not\n-obligated to do so.  If you do not wish to do so, delete this\n-exception statement from your version. */\n-\n-\n-package javax.swing.plaf.basic;\n-\n-import java.awt.Color;\n-import java.awt.Component;\n-import java.awt.Graphics;\n-import java.awt.Insets;\n-import javax.swing.UIDefaults;\n-import javax.swing.border.MatteBorder;\n-\n-class BasicBorder extends MatteBorder\n-{\n-    static Color BtnPointClr = new Color( 180, 180, 180);\n-\n-\tBasicBorder()\n-\t{\n-\t\tsuper(5,5,5,5, Color.black);\n-\t}\n-\t\n-\tpublic void paintBorder(Component  c,\n-\t\t\t\tGraphics  g, \n-\t\t\t\tint  x, \n-\t\t\t\tint  y, \n-\t\t\t\tint  width, \n-\t\t\t\tint  height)\n-\t{\n-\t    //    System.out.println(\"PAINT-------------------------------------------BORDER\");\n-\n-\t    if (g != null)\n-\t\t{\n-\t\t    g.setColor( BtnPointClr);\n-\t\t    g.draw3DRect( 0, 0, width-1, height-1, true);\n-\t\t}\n-\t}\n- }\n-\n-class PanelBorder extends MatteBorder\n-{\n-    PanelBorder()\n-    {\n-\tsuper(5,5,5,5, Color.black);\n-\t}\n-\t\n-\tpublic void paintBorder(Component  c,\n-\t\t\t\tGraphics  g, \n-\t\t\t\tint  x, \n-\t\t\t\tint  y, \n-\t\t\t\tint  width, \n-\t\t\t\tint  height)\n-\t{\n-\t    //    System.out.println(\"PAINT-------------------------------------------BORDER\");\n-\t    super.paintBorder(c, g, x, y, width, height);\n-\t}\n- }\n-\n-public class BasicDefaults extends UIDefaults\n-{\n-    public BasicDefaults()\n-    {\n-\t//\tSystem.out.println(\"BasicDefaults !!!!!!!!!!!!!!!!!!!!!!!!!\");\n-\tput(\"JButton\", \"javax.swing.plaf.basic.BasicButtonUI\");\n-\tput(\"JLabel\",  \"javax.swing.plaf.basic.BasicLabelUI\");\n-\t\n-\tput(\"JPanel\",  \"javax.swing.plaf.basic.BasicPanelUI\");\n-\tput(\"JCheckBox\",  \"javax.swing.plaf.basic.BasicCheckBoxUI\");\n-\tput(\"JRadioButton\",  \"javax.swing.plaf.basic.BasicRadioButtonUI\");\n-\tput(\"JToggleButton\",  \"javax.swing.plaf.basic.BasicToggleButtonUI\");\n-\tput(\"JOptionPane\",  \"javax.swing.plaf.basic.BasicOptionPaneUI\");\n-\tput(\"JList\",  \"javax.swing.plaf.basic.BasicListUI\");\n-\tput(\"JTree\",  \"javax.swing.plaf.basic.BasicTreeUI\");\n-\tput(\"JTextComponent\",  \"javax.swing.plaf.basic.BasicTextUI\");\n-\tput(\"JTabbedPane\",  \"javax.swing.plaf.basic.BasicTabbedPaneUI\");\n-\tput(\"JScrollPane\", \"javax.swing.plaf.basic.BasicScrollPaneUI\");\n-\tput(\"JViewport\",   \"javax.swing.plaf.basic.BasicViewportUI\");\n-\n-\tput(\"JButton.border\",      \"javax.swing.plaf.basic.BasicBorder\");\n-\tput(\"JPanel.border\",       \"javax.swing.plaf.basic.PanelBorder\");\n-\n-\tput(\"JToggleButton.border\", \"javax.swing.plaf.basic.PanelBorder\");\n-\tput(\"JCheckBox.border\", \"javax.swing.plaf.basic.PanelBorder\");\n-\tput(\"JRadioButton.border\", \"javax.swing.plaf.basic.PanelBorder\");\n-\n-\tput(\"AbstractUndoableEdit.undoText\", \"Undo\");\n-\tput(\"AbstractUndoableEdit.redoText\", \"Redo\");\n-    }\n-    \n-}\n-\n-"}, {"sha": "70829d10f891d39929323cdda29579102556263a", "filename": "libjava/javax/swing/plaf/basic/BasicRootPaneUI.java", "status": "renamed", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133e0ace678e7fdcc73bc5606f6cb83a15e0ca19/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicRootPaneUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133e0ace678e7fdcc73bc5606f6cb83a15e0ca19/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicRootPaneUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicRootPaneUI.java?ref=133e0ace678e7fdcc73bc5606f6cb83a15e0ca19", "patch": "@@ -1,4 +1,4 @@\n-/* ToggleButtonModel.java -- \n+/* BasicPanelUI.java\n    Copyright (C) 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n@@ -36,20 +36,22 @@\n exception statement from your version. */\n \n \n-package javax.swing;\n+package javax.swing.plaf.basic;\n \n-public class ToggleButtonModel extends DefaultButtonModel\n+import javax.swing.*;\n+import javax.swing.plaf.*;\n+import java.awt.*;\n+\n+\n+public class BasicRootPaneUI extends RootPaneUI\n {\n-    public void setPressed(boolean b)  \n+    public static ComponentUI createUI(JComponent x) \n+    {\n+        return new BasicRootPaneUI();\n+    }\n+\n+    public void installUI(JComponent c)\n     {\n-\tif (! isEnabled())\n-\t    return;\n-\t\n-\tif (! b)\n-\t    {\n-\t\treturn;\n-\t    }\n-\t\n-\tsetSelected(b);\n+      super.installUI(c);\n     }\n }", "previous_filename": "libjava/javax/swing/ToggleButtonModel.java"}]}