{"sha": "a6dd1cb60d068f415ea19c44783105a8da567364", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZkZDFjYjYwZDA2OGY0MTVlYTE5YzQ0NzgzMTA1YThkYTU2NzM2NA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-06-26T15:18:28Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-06-26T15:18:28Z"}, "message": "(function_cannot_inline_p): Can now inline nested functions.\n\n(expand_inline_function): Set up static chain if needed.\n(output_inline_function): Don't switch to temporary allocation here.\n\nFrom-SVN: r4753", "tree": {"sha": "2a2ca841ee175a1e4710d7c0984201d3e287659e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a2ca841ee175a1e4710d7c0984201d3e287659e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6dd1cb60d068f415ea19c44783105a8da567364", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6dd1cb60d068f415ea19c44783105a8da567364", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6dd1cb60d068f415ea19c44783105a8da567364", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6dd1cb60d068f415ea19c44783105a8da567364/comments", "author": null, "committer": null, "parents": [{"sha": "a34731a692bd64bccddb7416c3dd3cfcef838d76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a34731a692bd64bccddb7416c3dd3cfcef838d76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a34731a692bd64bccddb7416c3dd3cfcef838d76"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "8fe190016b7b162e07b8859b71a2b1133d840739", "filename": "gcc/integrate.c", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6dd1cb60d068f415ea19c44783105a8da567364/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6dd1cb60d068f415ea19c44783105a8da567364/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=a6dd1cb60d068f415ea19c44783105a8da567364", "patch": "@@ -103,11 +103,6 @@ function_cannot_inline_p (fndecl)\n   if (current_function_contains_functions)\n     return \"function with nested functions cannot be inline\";\n \n-  /* This restriction may be eliminated sometime soon.  But for now, don't\n-     worry about remapping the static chain.  */\n-  if (current_function_needs_context)\n-    return \"nested function cannot be inline\";\n-\n   /* If its not even close, don't even look.  */\n   if (!DECL_INLINE (fndecl) && get_max_uid () > 3 * max_insns)\n     return \"function too large to be inline\";\n@@ -1147,6 +1142,7 @@ expand_inline_function (fndecl, parms, target, ignore, type, structure_value_add\n   struct inline_remap *map;\n   rtx cc0_insn = 0;\n   rtvec arg_vector = ORIGINAL_ARG_VECTOR (header);\n+  rtx static_chain_value = 0;\n \n   /* Allow for equivalences of the pseudos we make for virtual fp and ap.  */\n   max_regno = MAX_REGNUM (header) + 3;\n@@ -1333,6 +1329,10 @@ expand_inline_function (fndecl, parms, target, ignore, type, structure_value_add\n   if (FUNCTION_FLAGS (header) & FUNCTION_FLAGS_USES_PIC_OFFSET_TABLE)\n     current_function_uses_pic_offset_table = 1;\n \n+  /* If this function needs a context, set it up.  */\n+  if (FUNCTION_FLAGS (header) & FUNCTION_FLAGS_NEEDS_CONTEXT)\n+    static_chain_value = lookup_static_chain (fndecl);\n+\n   /* Process each argument.  For each, set up things so that the function's\n      reference to the argument will refer to the argument being passed.\n      We only replace REG with REG here.  Any simplifications are done\n@@ -1587,6 +1587,20 @@ expand_inline_function (fndecl, parms, target, ignore, type, structure_value_add\n \t      else\n \t\tbreak;\n \t    }\n+\t  /* If this is setting the static chain pseudo, set it from\n+\t     the value we want to give it instead.  */\n+\t  else if (static_chain_value != 0\n+\t\t   && GET_CODE (pattern) == SET\n+\t\t   && rtx_equal_p (SET_SRC (pattern),\n+\t\t\t\t   static_chain_incoming_rtx))\n+\t    {\n+\t      rtx newdest = copy_rtx_and_substitute (SET_DEST (pattern), map);\n+\n+\t      copy = emit_insn (gen_rtx (SET, VOIDmode, newdest,\n+\t\t\t\t\t static_chain_value));\n+\n+\t      static_chain_value = 0;\n+\t    }\n \t  else\n \t    copy = emit_insn (copy_rtx_and_substitute (pattern, map));\n \t  /* REG_NOTES will be copied later.  */\n@@ -2812,8 +2826,6 @@ output_inline_function (fndecl)\n   rtx head = DECL_SAVED_INSNS (fndecl);\n   rtx last;\n \n-  temporary_allocation ();\n-\n   current_function_decl = fndecl;\n \n   /* This call is only used to initialize global variables.  */\n@@ -2897,6 +2909,4 @@ output_inline_function (fndecl)\n   rest_of_compilation (fndecl);\n \n   current_function_decl = 0;\n-\n-  permanent_allocation ();\n }"}]}