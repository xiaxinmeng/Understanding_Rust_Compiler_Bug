{"sha": "07c2f075fc06014700d6bea35c634fc5e1ca09ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdjMmYwNzVmYzA2MDE0NzAwZDZiZWEzNWM2MzRmYzVlMWNhMDljZQ==", "commit": {"author": {"name": "Frank Ch. Eigler", "email": "fche@redhat.com", "date": "2004-10-04T17:33:54Z"}, "committer": {"name": "Frank Ch. Eigler", "email": "fche@gcc.gnu.org", "date": "2004-10-04T17:33:54Z"}, "message": "configure.ac: Look for more headers & functions.\n\n2004-10-04  Frank Ch. Eigler  <fche@redhat.com>\n\n\t* configure.ac: Look for more headers & functions.\n\t* mf-hooks2.c (getmntent, inet_ntoa, getproto*): New wrapper functions.\n\t* mf-runtime.h.in: Add new \"#pragma redefine_extname\"s for them.\n\t* mf-runtime.c (options): Clean up integer signedness warnings.\n\t(main): Add a declaration to fix a warning.\n\t* mf-hooks3.c (pthread_exit): Add not-reached exit() to wrapper.\n\t* configure, config.h.in: Regenerated.\n\nFrom-SVN: r88517", "tree": {"sha": "57606334dc29196000e1c06229646ad4e857de7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57606334dc29196000e1c06229646ad4e857de7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07c2f075fc06014700d6bea35c634fc5e1ca09ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07c2f075fc06014700d6bea35c634fc5e1ca09ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07c2f075fc06014700d6bea35c634fc5e1ca09ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07c2f075fc06014700d6bea35c634fc5e1ca09ce/comments", "author": {"login": "fche", "id": 588885, "node_id": "MDQ6VXNlcjU4ODg4NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/588885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fche", "html_url": "https://github.com/fche", "followers_url": "https://api.github.com/users/fche/followers", "following_url": "https://api.github.com/users/fche/following{/other_user}", "gists_url": "https://api.github.com/users/fche/gists{/gist_id}", "starred_url": "https://api.github.com/users/fche/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fche/subscriptions", "organizations_url": "https://api.github.com/users/fche/orgs", "repos_url": "https://api.github.com/users/fche/repos", "events_url": "https://api.github.com/users/fche/events{/privacy}", "received_events_url": "https://api.github.com/users/fche/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8f920ef7f2d9abbc818cff50621155d03eea6c73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f920ef7f2d9abbc818cff50621155d03eea6c73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f920ef7f2d9abbc818cff50621155d03eea6c73"}], "stats": {"total": 516, "additions": 491, "deletions": 25}, "files": [{"sha": "65040e59b0b37e1ab27746d95aff3de6eca0cabe", "filename": "libmudflap/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c2f075fc06014700d6bea35c634fc5e1ca09ce/libmudflap%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c2f075fc06014700d6bea35c634fc5e1ca09ce/libmudflap%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2FChangeLog?ref=07c2f075fc06014700d6bea35c634fc5e1ca09ce", "patch": "@@ -1,3 +1,13 @@\n+2004-10-04  Frank Ch. Eigler  <fche@redhat.com>\n+\n+\t* configure.ac: Look for more headers & functions.\n+\t* mf-hooks2.c (getmntent, inet_ntoa, getproto*): New wrapper functions.\n+\t* mf-runtime.h.in: Add new \"#pragma redefine_extname\"s for them.\n+\t* mf-runtime.c (options): Clean up integer signedness warnings.\n+\t(main): Add a declaration to fix a warning.\n+\t* mf-hooks3.c (pthread_exit): Add not-reached exit() to wrapper.\n+\t* configure, config.h.in: Regenerated.\n+\n 2004-10-02  Frank Ch. Eigler  <fche@redhat.com>\n \n \t* testsuite/libmudflap.c/pass50-frag.c, fail33-frag.c, fail34-frag.c:"}, {"sha": "41e6194890524b7aa6001b9a00932339f5d867d0", "filename": "libmudflap/config.h.in", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c2f075fc06014700d6bea35c634fc5e1ca09ce/libmudflap%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c2f075fc06014700d6bea35c634fc5e1ca09ce/libmudflap%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fconfig.h.in?ref=07c2f075fc06014700d6bea35c634fc5e1ca09ce", "patch": "@@ -1,5 +1,11 @@\n /* config.h.in.  Generated from configure.ac by autoheader.  */\n \n+/* Define to 1 if you have the `addmntent' function. */\n+#undef HAVE_ADDMNTENT\n+\n+/* Define to 1 if you have the <arpa/inet.h> header file. */\n+#undef HAVE_ARPA_INET_H\n+\n /* Define to 1 if you have the `backtrace' function. */\n #undef HAVE_BACKTRACE\n \n@@ -60,6 +66,18 @@\n /* Define to 1 if you have the `getlogin_r' function. */\n #undef HAVE_GETLOGIN_R\n \n+/* Define to 1 if you have the `getmntent' function. */\n+#undef HAVE_GETMNTENT\n+\n+/* Define to 1 if you have the `getprotobyname' function. */\n+#undef HAVE_GETPROTOBYNAME\n+\n+/* Define to 1 if you have the `getprotobynumber' function. */\n+#undef HAVE_GETPROTOBYNUMBER\n+\n+/* Define to 1 if you have the `getprotoent' function. */\n+#undef HAVE_GETPROTOENT\n+\n /* Define to 1 if you have the `getpwent' function. */\n #undef HAVE_GETPWENT\n \n@@ -90,6 +108,9 @@\n /* Define to 1 if you have the <grp.h> header file. */\n #undef HAVE_GRP_H\n \n+/* Define to 1 if you have the `inet_ntoa' function. */\n+#undef HAVE_INET_NTOA\n+\n /* Define to 1 if you have the <inttypes.h> header file. */\n #undef HAVE_INTTYPES_H\n \n@@ -105,9 +126,15 @@\n /* Define to 1 if you have the `memrchr' function. */\n #undef HAVE_MEMRCHR\n \n+/* Define to 1 if you have the <mntent.h> header file. */\n+#undef HAVE_MNTENT_H\n+\n /* Define to 1 if you have the <netdb.h> header file. */\n #undef HAVE_NETDB_H\n \n+/* Define to 1 if you have the <netinet/in.h> header file. */\n+#undef HAVE_NETINET_IN_H\n+\n /* define if you have <pthread.h> */\n #undef HAVE_PTHREAD_H\n \n@@ -117,6 +144,9 @@\n /* Define to 1 if you have the `sethostname' function. */\n #undef HAVE_SETHOSTNAME\n \n+/* Define to 1 if you have the `setmntent' function. */\n+#undef HAVE_SETMNTENT\n+\n /* Define to 1 if you have the `signal' function. */\n #undef HAVE_SIGNAL\n "}, {"sha": "6eb77bb6700f90c42d4ddf97496470eed8206f90", "filename": "libmudflap/configure", "status": "modified", "additions": 319, "deletions": 6, "changes": 325, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c2f075fc06014700d6bea35c634fc5e1ca09ce/libmudflap%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c2f075fc06014700d6bea35c634fc5e1ca09ce/libmudflap%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fconfigure?ref=07c2f075fc06014700d6bea35c634fc5e1ca09ce", "patch": "@@ -3592,9 +3592,15 @@ done\n \n \n \n+\n+\n+\n+\n+\n \n for ac_header in stdint.h execinfo.h signal.h dlfcn.h dirent.h pwd.h grp.h \\\n-  netdb.h sys/ipc.h sys/sem.h sys/shm.h sys/wait.h sys/socket.h ctype.h\n+  netdb.h sys/ipc.h sys/sem.h sys/shm.h sys/wait.h sys/socket.h ctype.h mntent.h \\\n+  sys/socket.h netinet/in.h arpa/inet.h dlfcn.h\n do\n as_ac_Header=`echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then\n@@ -3747,6 +3753,7 @@ done\n \n \n \n+\n for ac_func in backtrace backtrace_symbols gettimeofday signal\n do\n as_ac_var=`echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n@@ -3852,7 +3859,6 @@ done\n \n \n \n-\n for ac_func in fopen64 fseeko64 ftello64 stat64\n do\n as_ac_var=`echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n@@ -3959,7 +3965,6 @@ done\n \n \n \n-\n for ac_func in strnlen memrchr strncpy memmem sethostname\n do\n as_ac_var=`echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n@@ -4064,7 +4069,6 @@ done\n \n \n \n-\n for ac_func in __ctype_b_loc __ctype_tolower_loc __ctype_toupper_loc\n do\n as_ac_var=`echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n@@ -4174,7 +4178,6 @@ done\n \n \n \n-\n for ac_func in getlogin cuserid getpwnam getpwuid getpwent getgrnam getgrgid getgrent\n do\n as_ac_var=`echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n@@ -4489,6 +4492,316 @@ fi\n done\n \n \n+\n+\n+for ac_func in getprotoent getprotobyname getprotobynumber\n+do\n+as_ac_var=`echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n+echo \"$as_me:$LINENO: checking for $ac_func\" >&5\n+echo $ECHO_N \"checking for $ac_func... $ECHO_C\" >&6\n+if eval \"test \\\"\\${$as_ac_var+set}\\\" = set\"; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+/* Define $ac_func to an innocuous variant, in case <limits.h> declares $ac_func.\n+   For example, HP-UX 11i <limits.h> declares gettimeofday.  */\n+#define $ac_func innocuous_$ac_func\n+\n+/* System header to define __stub macros and hopefully few prototypes,\n+    which can conflict with char $ac_func (); below.\n+    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since\n+    <limits.h> exists even on freestanding compilers.  */\n+\n+#ifdef __STDC__\n+# include <limits.h>\n+#else\n+# include <assert.h>\n+#endif\n+\n+#undef $ac_func\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+{\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char $ac_func ();\n+/* The GNU C library defines this for functions which it implements\n+    to always fail with ENOSYS.  Some functions are actually named\n+    something starting with __ and the normal name is an alias.  */\n+#if defined (__stub_$ac_func) || defined (__stub___$ac_func)\n+choke me\n+#else\n+char (*f) () = $ac_func;\n+#endif\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+int\n+main ()\n+{\n+return f != $ac_func;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  eval \"$as_ac_var=yes\"\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+eval \"$as_ac_var=no\"\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+fi\n+echo \"$as_me:$LINENO: result: `eval echo '${'$as_ac_var'}'`\" >&5\n+echo \"${ECHO_T}`eval echo '${'$as_ac_var'}'`\" >&6\n+if test `eval echo '${'$as_ac_var'}'` = yes; then\n+  cat >>confdefs.h <<_ACEOF\n+#define `echo \"HAVE_$ac_func\" | $as_tr_cpp` 1\n+_ACEOF\n+\n+fi\n+done\n+\n+\n+\n+\n+for ac_func in getmntent setmntent addmntent\n+do\n+as_ac_var=`echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n+echo \"$as_me:$LINENO: checking for $ac_func\" >&5\n+echo $ECHO_N \"checking for $ac_func... $ECHO_C\" >&6\n+if eval \"test \\\"\\${$as_ac_var+set}\\\" = set\"; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+/* Define $ac_func to an innocuous variant, in case <limits.h> declares $ac_func.\n+   For example, HP-UX 11i <limits.h> declares gettimeofday.  */\n+#define $ac_func innocuous_$ac_func\n+\n+/* System header to define __stub macros and hopefully few prototypes,\n+    which can conflict with char $ac_func (); below.\n+    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since\n+    <limits.h> exists even on freestanding compilers.  */\n+\n+#ifdef __STDC__\n+# include <limits.h>\n+#else\n+# include <assert.h>\n+#endif\n+\n+#undef $ac_func\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+{\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char $ac_func ();\n+/* The GNU C library defines this for functions which it implements\n+    to always fail with ENOSYS.  Some functions are actually named\n+    something starting with __ and the normal name is an alias.  */\n+#if defined (__stub_$ac_func) || defined (__stub___$ac_func)\n+choke me\n+#else\n+char (*f) () = $ac_func;\n+#endif\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+int\n+main ()\n+{\n+return f != $ac_func;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  eval \"$as_ac_var=yes\"\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+eval \"$as_ac_var=no\"\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+fi\n+echo \"$as_me:$LINENO: result: `eval echo '${'$as_ac_var'}'`\" >&5\n+echo \"${ECHO_T}`eval echo '${'$as_ac_var'}'`\" >&6\n+if test `eval echo '${'$as_ac_var'}'` = yes; then\n+  cat >>confdefs.h <<_ACEOF\n+#define `echo \"HAVE_$ac_func\" | $as_tr_cpp` 1\n+_ACEOF\n+\n+fi\n+done\n+\n+\n+for ac_func in inet_ntoa\n+do\n+as_ac_var=`echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n+echo \"$as_me:$LINENO: checking for $ac_func\" >&5\n+echo $ECHO_N \"checking for $ac_func... $ECHO_C\" >&6\n+if eval \"test \\\"\\${$as_ac_var+set}\\\" = set\"; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+/* Define $ac_func to an innocuous variant, in case <limits.h> declares $ac_func.\n+   For example, HP-UX 11i <limits.h> declares gettimeofday.  */\n+#define $ac_func innocuous_$ac_func\n+\n+/* System header to define __stub macros and hopefully few prototypes,\n+    which can conflict with char $ac_func (); below.\n+    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since\n+    <limits.h> exists even on freestanding compilers.  */\n+\n+#ifdef __STDC__\n+# include <limits.h>\n+#else\n+# include <assert.h>\n+#endif\n+\n+#undef $ac_func\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+{\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char $ac_func ();\n+/* The GNU C library defines this for functions which it implements\n+    to always fail with ENOSYS.  Some functions are actually named\n+    something starting with __ and the normal name is an alias.  */\n+#if defined (__stub_$ac_func) || defined (__stub___$ac_func)\n+choke me\n+#else\n+char (*f) () = $ac_func;\n+#endif\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+int\n+main ()\n+{\n+return f != $ac_func;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  eval \"$as_ac_var=yes\"\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+eval \"$as_ac_var=no\"\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+fi\n+echo \"$as_me:$LINENO: result: `eval echo '${'$as_ac_var'}'`\" >&5\n+echo \"${ECHO_T}`eval echo '${'$as_ac_var'}'`\" >&6\n+if test `eval echo '${'$as_ac_var'}'` = yes; then\n+  cat >>confdefs.h <<_ACEOF\n+#define `echo \"HAVE_$ac_func\" | $as_tr_cpp` 1\n+_ACEOF\n+\n+fi\n+done\n+\n+\n cat >conftest.$ac_ext <<_ACEOF\n /* confdefs.h.  */\n _ACEOF\n@@ -5344,7 +5657,7 @@ test x\"$pic_mode\" = xno && libtool_flags=\"$libtool_flags --prefer-non-pic\"\n case $host in\n *-*-irix6*)\n   # Find out which ABI we are using.\n-  echo '#line 5347 \"configure\"' > conftest.$ac_ext\n+  echo '#line 5660 \"configure\"' > conftest.$ac_ext\n   if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   (eval $ac_compile) 2>&5\n   ac_status=$?"}, {"sha": "04020b2c8397c3836162ee5497fc57857cb53e86", "filename": "libmudflap/configure.ac", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c2f075fc06014700d6bea35c634fc5e1ca09ce/libmudflap%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c2f075fc06014700d6bea35c634fc5e1ca09ce/libmudflap%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fconfigure.ac?ref=07c2f075fc06014700d6bea35c634fc5e1ca09ce", "patch": "@@ -60,22 +60,19 @@ AC_TRY_COMPILE([\n enable_shared=no])\n \n AC_CHECK_HEADERS(stdint.h execinfo.h signal.h dlfcn.h dirent.h pwd.h grp.h \\\n-  netdb.h sys/ipc.h sys/sem.h sys/shm.h sys/wait.h sys/socket.h ctype.h)\n-AC_CHECK_FUNCS(backtrace backtrace_symbols gettimeofday signal)\n+  netdb.h sys/ipc.h sys/sem.h sys/shm.h sys/wait.h sys/socket.h ctype.h mntent.h \\\n+  sys/socket.h netinet/in.h arpa/inet.h dlfcn.h)\n \n-dnl Check for 64-bit stdio calls related to Large File Support\n+AC_CHECK_FUNCS(backtrace backtrace_symbols gettimeofday signal)\n AC_CHECK_FUNCS(fopen64 fseeko64 ftello64 stat64)\n-\n-dnl Check for nonstandard functions\n AC_CHECK_FUNCS(strnlen memrchr strncpy memmem sethostname)\n-\n-dnl Check for glibc ctype functions\n AC_CHECK_FUNCS(__ctype_b_loc __ctype_tolower_loc __ctype_toupper_loc)\n-\n-dnl Check for pwd.h / grp.h family of functions\n AC_CHECK_FUNCS(getlogin cuserid getpwnam getpwuid getpwent getgrnam getgrgid getgrent)\n AC_CHECK_FUNCS(getlogin_r getpwnam_r getpwuid_r getgrnam_r getgrgid_r)\n AC_CHECK_FUNCS(getservent getservbyname getservbyport getaddrinfo gai_strerror)\n+AC_CHECK_FUNCS(getprotoent getprotobyname getprotobynumber)\n+AC_CHECK_FUNCS(getmntent setmntent addmntent)\n+AC_CHECK_FUNCS(inet_ntoa)\n \n AC_TRY_COMPILE([#include <sys/types.h>\n #include <sys/ipc.h>"}, {"sha": "52ff3c1b4a877a1c7afa6e28e32f9041ada9b1f5", "filename": "libmudflap/mf-hooks2.c", "status": "modified", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c2f075fc06014700d6bea35c634fc5e1ca09ce/libmudflap%2Fmf-hooks2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c2f075fc06014700d6bea35c634fc5e1ca09ce/libmudflap%2Fmf-hooks2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fmf-hooks2.c?ref=07c2f075fc06014700d6bea35c634fc5e1ca09ce", "patch": "@@ -63,6 +63,9 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include <limits.h>\n #include <time.h>\n #include <ctype.h>\n+#ifdef HAVE_DLFCN_H\n+#include <dlfcn.h>\n+#endif\n #ifdef HAVE_DIRENT_H\n #include <dirent.h>\n #endif\n@@ -90,6 +93,18 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #ifdef HAVE_GRP_H\n #include <grp.h>\n #endif\n+#ifdef HAVE_MNTENT_H\n+#include <mntent.h>\n+#endif\n+#ifdef HAVE_SYS_SOCKET_H\n+#include <sys/socket.h>\n+#endif\n+#ifdef HAVE_NETINET_IN_H\n+#include <netinet/in.h>\n+#endif\n+#ifdef HAVE_ARPA_INET_H\n+#include <arpa/inet.h>\n+#endif\n \n #include \"mf-runtime.h\"\n #include \"mf-impl.h\"\n@@ -1871,3 +1886,97 @@ WRAPPER2(const char *, gai_strerror, int errcode)\n   return buf;\n }\n #endif\n+\n+\n+#ifdef HAVE_GETMNTENT\n+WRAPPER2(struct mntent *, getmntent, FILE *filep)\n+{\n+  struct mntent *m;\n+  static struct mntent *last = NULL;\n+\n+  MF_VALIDATE_EXTENT (filep, sizeof (*filep), __MF_CHECK_WRITE,\n+    \"getmntent stream\");\n+#define UR(field) __mf_unregister(last->field, strlen (last->field)+1, __MF_TYPE_STATIC)\n+  if (last)\n+    {\n+      UR (mnt_fsname);\n+      UR (mnt_dir);\n+      UR (mnt_type);\n+      UR (mnt_opts);\n+      __mf_unregister (last, sizeof (*last), __MF_TYPE_STATIC);\n+    }\n+#undef UR\n+\n+  m = getmntent (filep);\n+  last = m;\n+\n+#define R(field) __mf_register(last->field, strlen (last->field)+1, __MF_TYPE_STATIC, \"mntent \" #field)\n+  if (m)\n+    {\n+      R (mnt_fsname);\n+      R (mnt_dir);\n+      R (mnt_type);\n+      R (mnt_opts);\n+      __mf_register (last, sizeof (*last), __MF_TYPE_STATIC, \"getmntent result\");\n+    }\n+#undef R\n+\n+  return m;\n+}\n+#endif\n+\n+\n+#ifdef HAVE_INET_NTOA\n+WRAPPER2(char *, inet_ntoa, struct in_addr in)\n+{\n+  static char *last_buf = NULL;\n+  char *buf;\n+  if (last_buf)\n+    __mf_unregister (last_buf, strlen (last_buf)+1, __MF_TYPE_STATIC);\n+  buf = inet_ntoa (in);\n+  last_buf = buf;\n+  if (buf)\n+    __mf_register (last_buf, strlen (last_buf)+1, __MF_TYPE_STATIC, \"inet_ntoa result\");\n+  return buf;\n+}\n+#endif\n+\n+\n+#ifdef HAVE_GETPROTOENT\n+WRAPPER2(struct protoent *, getprotoent, void)\n+{\n+  struct protoent *buf;\n+  buf = getprotoent ();\n+  if (buf != NULL)\n+    __mf_register (buf, sizeof(*buf), __MF_TYPE_STATIC, \"getproto*() return\");\n+  return buf;\n+}\n+#endif\n+\n+\n+#ifdef HAVE_GETPROTOBYNAME\n+WRAPPER2(struct protoent *, getprotobyname, const char *name)\n+{\n+  struct protoent *buf;\n+  MF_VALIDATE_EXTENT(name, strlen(name)+1, __MF_CHECK_READ,\n+                     \"getprotobyname name\");\n+  buf = getprotobyname (name);\n+  if (buf != NULL)\n+    __mf_register (buf, sizeof(*buf), __MF_TYPE_STATIC,\n+                   \"getproto*() return\");\n+  return buf;\n+}\n+#endif\n+\n+\n+#ifdef HAVE_GETPROTOBYNUMBER\n+WRAPPER2(struct protoent *, getprotobynumber, int port)\n+{\n+  struct protoent *buf;\n+  buf = getprotobynumber (port);\n+  if (buf != NULL)\n+    __mf_register (buf, sizeof(*buf), __MF_TYPE_STATIC,\n+                   \"getproto*() return\");\n+  return buf;\n+}\n+#endif"}, {"sha": "d315b8224a03682eeb914fe42d690ec700308c77", "filename": "libmudflap/mf-hooks3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c2f075fc06014700d6bea35c634fc5e1ca09ce/libmudflap%2Fmf-hooks3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c2f075fc06014700d6bea35c634fc5e1ca09ce/libmudflap%2Fmf-hooks3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fmf-hooks3.c?ref=07c2f075fc06014700d6bea35c634fc5e1ca09ce", "patch": "@@ -597,4 +597,5 @@ WRAPPER(void, pthread_exit, void *rc)\n   /* __mf_state = reentrant; */\n   CALL_REAL (pthread_exit, rc);\n   /* NOTREACHED */\n+  exit (0);  /* Satisfy noreturn attribute of pthread_exit.  */\n }"}, {"sha": "a0f9f739f531fa32d4bcd06806796ad4f947a2ac", "filename": "libmudflap/mf-runtime.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c2f075fc06014700d6bea35c634fc5e1ca09ce/libmudflap%2Fmf-runtime.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c2f075fc06014700d6bea35c634fc5e1ca09ce/libmudflap%2Fmf-runtime.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fmf-runtime.c?ref=07c2f075fc06014700d6bea35c634fc5e1ca09ce", "patch": "@@ -310,36 +310,36 @@ static struct option\n       set_option,\n       read_integer_option,\n     } type;\n-  int value;\n-  int *target;\n+  unsigned value;\n+  unsigned *target;\n } \n options [] =\n   {\n     {\"mode-nop\", \n      \"mudflaps do nothing\", \n-     set_option, (int)mode_nop, (int *)&__mf_opts.mudflap_mode},    \n+     set_option, (unsigned)mode_nop, (unsigned *)&__mf_opts.mudflap_mode},    \n     {\"mode-populate\", \n      \"mudflaps populate object tree\", \n-     set_option, (int)mode_populate, (int *)&__mf_opts.mudflap_mode},    \n+     set_option, (unsigned)mode_populate, (unsigned *)&__mf_opts.mudflap_mode},    \n     {\"mode-check\", \n      \"mudflaps check for memory violations\",\n-     set_option, (int)mode_check, (int *)&__mf_opts.mudflap_mode},\n+     set_option, (unsigned)mode_check, (unsigned *)&__mf_opts.mudflap_mode},\n     {\"mode-violate\", \n      \"mudflaps always cause violations (diagnostic)\",\n-     set_option, (int)mode_violate, (int *)&__mf_opts.mudflap_mode},\n+     set_option, (unsigned)mode_violate, (unsigned *)&__mf_opts.mudflap_mode},\n    \n     {\"viol-nop\", \n      \"violations do not change program execution\",\n-     set_option, (int)viol_nop, (int *)&__mf_opts.violation_mode},\n+     set_option, (unsigned)viol_nop, (unsigned *)&__mf_opts.violation_mode},\n     {\"viol-abort\", \n      \"violations cause a call to abort()\",\n-     set_option, (int)viol_abort, (int *)&__mf_opts.violation_mode},\n+     set_option, (unsigned)viol_abort, (unsigned *)&__mf_opts.violation_mode},\n     {\"viol-segv\", \n      \"violations are promoted to SIGSEGV signals\",\n-     set_option, (int)viol_segv, (int *)&__mf_opts.violation_mode},\n+     set_option, (unsigned)viol_segv, (unsigned *)&__mf_opts.violation_mode},\n     {\"viol-gdb\", \n      \"violations fork a gdb process attached to current program\",\n-     set_option, (int)viol_gdb, (int *)&__mf_opts.violation_mode},\n+     set_option, (unsigned)viol_gdb, (unsigned *)&__mf_opts.violation_mode},\n     {\"trace-calls\", \n      \"trace calls to mudflap runtime library\",\n      set_option, 1, &__mf_opts.trace_mf_calls},\n@@ -728,6 +728,7 @@ __wrap_main (int argc, char* argv[])\n {\n   extern char **environ;\n   extern int main ();\n+  extern int __real_main ();\n   static int been_here = 0;\n \n   if (__mf_opts.heur_std_data && ! been_here)"}, {"sha": "298ed6efa8ad43c7ff210d33b91c3588a0b0b842", "filename": "libmudflap/mf-runtime.h.in", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c2f075fc06014700d6bea35c634fc5e1ca09ce/libmudflap%2Fmf-runtime.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c2f075fc06014700d6bea35c634fc5e1ca09ce/libmudflap%2Fmf-runtime.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fmf-runtime.h.in?ref=07c2f075fc06014700d6bea35c634fc5e1ca09ce", "patch": "@@ -197,6 +197,11 @@ extern int __mf_set_options (const char *opts);\n #pragma redefine_extname getservbyname __mfwrap_getservbyname\n #pragma redefine_extname getservbyport __mfwrap_getservbyport\n #pragma redefine_extname gai_strerror __mfwrap_gai_strerror\n+#pragma redefine_extname getmntent __mfwrap_getmntent\n+#pragma redefine_extname inet_ntoa __mfwrap_inet_ntoa\n+#pragma redefine_extname getprotoent __mfwrap_getprotoent\n+#pragma redefine_extname getprotobyname __mfwrap_getprotobyname\n+#pragma redefine_extname getprotobynumber __mfwrap_getprotobynumber\n \n /* Disable glibc macros.  */\n #define __NO_STRING_INLINES"}]}