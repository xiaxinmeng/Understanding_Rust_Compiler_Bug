{"sha": "61dd26e6ba68d5698c7637f369c53d56de4c7fff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFkZDI2ZTZiYTY4ZDU2OThjNzYzN2YzNjljNTNkNTZkZTRjN2ZmZg==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gnu.org", "date": "1998-07-26T00:34:10Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-07-26T00:34:10Z"}, "message": "i386.h (CONST_DOUBLE_OK_FOR_LETTER_P): Return 0 when eliminating the frame pointer and compiling PIC code and reload...\n\n        * i386.h (CONST_DOUBLE_OK_FOR_LETTER_P): Return 0 when eliminating\n        the frame pointer and compiling PIC code and reload has not completed.\n\nFrom-SVN: r21392", "tree": {"sha": "723019ae3e377580a9ff7063d66f96b69e092002", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/723019ae3e377580a9ff7063d66f96b69e092002"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61dd26e6ba68d5698c7637f369c53d56de4c7fff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61dd26e6ba68d5698c7637f369c53d56de4c7fff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61dd26e6ba68d5698c7637f369c53d56de4c7fff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61dd26e6ba68d5698c7637f369c53d56de4c7fff/comments", "author": null, "committer": null, "parents": [{"sha": "3abe23a0ebc7fa6dd5f9a12d35a024d4fbfb5da1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3abe23a0ebc7fa6dd5f9a12d35a024d4fbfb5da1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3abe23a0ebc7fa6dd5f9a12d35a024d4fbfb5da1"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "572d235e10869e6363622fe0a1e668194d152363", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61dd26e6ba68d5698c7637f369c53d56de4c7fff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61dd26e6ba68d5698c7637f369c53d56de4c7fff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61dd26e6ba68d5698c7637f369c53d56de4c7fff", "patch": "@@ -1,5 +1,8 @@\n Sun Jul 26 01:11:12 1998  H.J. Lu  (hjl@gnu.org)\n \n+\t* i386.h (CONST_DOUBLE_OK_FOR_LETTER_P): Return 0 when eliminating\n+\tthe frame pointer and compiling PIC code and reload has not completed.\n+\n \t* i386.c (output_to_reg): Add code to emulate non-popping DImode\n \tcase.\n "}, {"sha": "75e8baef1c1fd5994a2c153a58f73ad60d3c9fb0", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61dd26e6ba68d5698c7637f369c53d56de4c7fff/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61dd26e6ba68d5698c7637f369c53d56de4c7fff/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=61dd26e6ba68d5698c7637f369c53d56de4c7fff", "patch": "@@ -896,10 +896,19 @@ enum reg_class\n /* Similar, but for floating constants, and defining letters G and H.\n    Here VALUE is the CONST_DOUBLE rtx itself.  We allow constants even if\n    TARGET_387 isn't set, because the stack register converter may need to\n-   load 0.0 into the function value register. */\n+   load 0.0 into the function value register.\n+\n+   We disallow these constants when -fomit-frame-pointer and compiling\n+   PIC code since reload might need to force the constant to memory.\n+   Forcing the constant to memory changes the elimination offsets after\n+   the point where they must stay constant.\n+\n+   However, we must allow them after reload as completed as reg-stack.c\n+   will create insns which use these constants.  */\n \n #define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C)  \\\n-  ((C) == 'G' ? standard_80387_constant_p (VALUE) : 0)\n+  (((reload_completed || !flag_pic || !flag_omit_frame_pointer) && (C) == 'G') \\\n+   ? standard_80387_constant_p (VALUE) : 0)\n \n /* Place additional restrictions on the register class to use when it\n    is necessary to be able to hold a value of mode MODE in a reload"}]}