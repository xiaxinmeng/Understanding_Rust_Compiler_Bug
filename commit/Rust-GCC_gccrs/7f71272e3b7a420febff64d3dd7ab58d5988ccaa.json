{"sha": "7f71272e3b7a420febff64d3dd7ab58d5988ccaa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y3MTI3MmUzYjdhNDIwZmViZmY2NGQzZGQ3YWI1OGQ1OTg4Y2NhYQ==", "commit": {"author": {"name": "Mikhail Maltsev", "email": "maltsevm@gmail.com", "date": "2015-10-29T16:28:40Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-10-29T16:28:40Z"}, "message": "[PATCH 6/9] ENABLE_CHECKING refactoring: generators\n\n        * genautomata.c: Use CHECKING_P instead of ENABLE_CHECKING.\n        * genconditions.c: Define CHECKING_P in the generated code.\n        * genextract.c: Use flag_checking in insn_extract.\n        * gengtype.c (main): Remove conditional compilation.\n        * gengtype.h: Likewise.\n\nFrom-SVN: r229539", "tree": {"sha": "20274687b3bb5807ca00d4c1289357d741c5e059", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20274687b3bb5807ca00d4c1289357d741c5e059"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f71272e3b7a420febff64d3dd7ab58d5988ccaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f71272e3b7a420febff64d3dd7ab58d5988ccaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f71272e3b7a420febff64d3dd7ab58d5988ccaa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f71272e3b7a420febff64d3dd7ab58d5988ccaa/comments", "author": {"login": "miyuki", "id": 4668268, "node_id": "MDQ6VXNlcjQ2NjgyNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/4668268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miyuki", "html_url": "https://github.com/miyuki", "followers_url": "https://api.github.com/users/miyuki/followers", "following_url": "https://api.github.com/users/miyuki/following{/other_user}", "gists_url": "https://api.github.com/users/miyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/miyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miyuki/subscriptions", "organizations_url": "https://api.github.com/users/miyuki/orgs", "repos_url": "https://api.github.com/users/miyuki/repos", "events_url": "https://api.github.com/users/miyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/miyuki/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "21f0717ab16fe725e887536f5f90b7487b6431cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21f0717ab16fe725e887536f5f90b7487b6431cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21f0717ab16fe725e887536f5f90b7487b6431cd"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "4dc5b71504208e067c86372a061095a2e12fde10", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f71272e3b7a420febff64d3dd7ab58d5988ccaa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f71272e3b7a420febff64d3dd7ab58d5988ccaa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f71272e3b7a420febff64d3dd7ab58d5988ccaa", "patch": "@@ -1,3 +1,11 @@\n+2015-10-29  Mikhail Maltsev  <maltsevm@gmail.com>\n+\n+        * genautomata.c: Use CHECKING_P instead of ENABLE_CHECKING.\n+        * genconditions.c: Define CHECKING_P in the generated code.\n+        * genextract.c: Use flag_checking in insn_extract.\n+        * gengtype.c (main): Remove conditional compilation.\n+        * gengtype.h: Likewise.\n+\n 2015-10-29  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/67892"}, {"sha": "504107840a332d544b18bf87428acd67cfd1975a", "filename": "gcc/genautomata.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f71272e3b7a420febff64d3dd7ab58d5988ccaa/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f71272e3b7a420febff64d3dd7ab58d5988ccaa/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=7f71272e3b7a420febff64d3dd7ab58d5988ccaa", "patch": "@@ -879,7 +879,7 @@ struct state_ainsn_table\n /* Macros to access members of unions.  Use only them for access to\n    union members of declarations and regexps.  */\n \n-#if defined ENABLE_CHECKING && (GCC_VERSION >= 2007)\n+#if CHECKING_P && (GCC_VERSION >= 2007)\n \n #define DECL_UNIT(d) __extension__\t\t\t\t\t\\\n (({ __typeof (d) const _decl = (d);\t\t\t\t\t\\\n@@ -1070,7 +1070,7 @@ regexp_mode_check_failed (enum regexp_mode mode,\n   exit (1);\n }\n \n-#else /* #if defined ENABLE_RTL_CHECKING && (GCC_VERSION >= 2007) */\n+#else /* #if CHECKING_P && (GCC_VERSION >= 2007) */\n \n #define DECL_UNIT(d) (&(d)->decl.unit)\n #define DECL_BYPASS(d) (&(d)->decl.bypass)\n@@ -1088,7 +1088,7 @@ regexp_mode_check_failed (enum regexp_mode mode,\n #define REGEXP_ALLOF(r) (&(r)->regexp.allof)\n #define REGEXP_ONEOF(r) (&(r)->regexp.oneof)\n \n-#endif /* #if defined ENABLE_RTL_CHECKING && (GCC_VERSION >= 2007) */\n+#endif /* #if CHECKING_P && (GCC_VERSION >= 2007) */\n \n #define XCREATENODE(T) ((T *) create_node (sizeof (T)))\n #define XCREATENODEVEC(T, N) ((T *) create_node (sizeof (T) * (N)))"}, {"sha": "7481ab41d5e5bad78dd0b46ea71e660809829724", "filename": "gcc/genconditions.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f71272e3b7a420febff64d3dd7ab58d5988ccaa/gcc%2Fgenconditions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f71272e3b7a420febff64d3dd7ab58d5988ccaa/gcc%2Fgenconditions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconditions.c?ref=7f71272e3b7a420febff64d3dd7ab58d5988ccaa", "patch": "@@ -60,6 +60,8 @@ write_header (void)\n \\n\\\n /* Do not allow checking to confuse the issue.  */\\n\\\n #undef ENABLE_CHECKING\\n\\\n+#undef CHECKING_P\\n\\\n+#define CHECKING_P 0\\n\\\n #undef ENABLE_TREE_CHECKING\\n\\\n #undef ENABLE_RTL_CHECKING\\n\\\n #undef ENABLE_RTL_FLAG_CHECKING\\n\\"}, {"sha": "a03ac972182a799767cee9155eb6f824417ac1b2", "filename": "gcc/genextract.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f71272e3b7a420febff64d3dd7ab58d5988ccaa/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f71272e3b7a420febff64d3dd7ab58d5988ccaa/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=7f71272e3b7a420febff64d3dd7ab58d5988ccaa", "patch": "@@ -373,10 +373,11 @@ insn_extract (rtx_insn *insn)\\n{\\n\\\n   rtx pat = PATTERN (insn);\\n\\\n   int i ATTRIBUTE_UNUSED; /* only for peepholes */\\n\\\n \\n\\\n-#ifdef ENABLE_CHECKING\\n\\\n-  memset (ro, 0xab, sizeof (*ro) * MAX_RECOG_OPERANDS);\\n\\\n-  memset (ro_loc, 0xab, sizeof (*ro_loc) * MAX_RECOG_OPERANDS);\\n\\\n-#endif\\n\");\n+  if (flag_checking)\\n\\\n+    {\\n\\\n+      memset (ro, 0xab, sizeof (*ro) * MAX_RECOG_OPERANDS);\\n\\\n+      memset (ro_loc, 0xab, sizeof (*ro_loc) * MAX_RECOG_OPERANDS);\\n\\\n+    }\\n\");\n \n   puts (\"\\\n   switch (INSN_CODE (insn))\\n\\"}, {"sha": "98ee32a8931531f06e4370012e404edb8ac46ca9", "filename": "gcc/gengtype.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f71272e3b7a420febff64d3dd7ab58d5988ccaa/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f71272e3b7a420febff64d3dd7ab58d5988ccaa/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=7f71272e3b7a420febff64d3dd7ab58d5988ccaa", "patch": "@@ -158,9 +158,6 @@ size_t num_lang_dirs;\n    BASE_FILES entry for each language.  */\n static outf_p *base_files;\n \n-\n-\n-#if ENABLE_CHECKING\n /* Utility debugging function, printing the various type counts within\n    a list of types.  Called through the DBGPRINT_COUNT_TYPE macro.  */\n void\n@@ -222,7 +219,6 @@ dbgprint_count_type_at (const char *fil, int lin, const char *msg, type_p t)\n     fprintf (stderr, \"@@%%@@ %d undefined types\\n\", nb_undefined);\n   fprintf (stderr, \"\\n\");\n }\n-#endif /* ENABLE_CHECKING */\n \n /* Scan the input file, LIST, and determine how much space we need to\n    store strings in.  Also, count the number of language directories\n@@ -5188,15 +5184,13 @@ main (int argc, char **argv)\n \n   parse_program_options (argc, argv);\n \n-#if ENABLE_CHECKING\n   if (do_debug)\n     {\n       time_t now = (time_t) 0;\n       time (&now);\n       DBGPRINTF (\"gengtype started pid %d at %s\",\n \t\t (int) getpid (), ctime (&now));\n     }\n-#endif\t/* ENABLE_CHECKING */\n \n   /* Parse the input list and the input files.  */\n   DBGPRINTF (\"inputlist %s\", inputlist);"}, {"sha": "b8ce7ceba3fe18e912b6107791e2b2de16017967", "filename": "gcc/gengtype.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f71272e3b7a420febff64d3dd7ab58d5988ccaa/gcc%2Fgengtype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f71272e3b7a420febff64d3dd7ab58d5988ccaa/gcc%2Fgengtype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.h?ref=7f71272e3b7a420febff64d3dd7ab58d5988ccaa", "patch": "@@ -492,17 +492,12 @@ extern int do_dump;\t\t/* (-d) program argument. */\n    gengtype source code).  Only useful to debug gengtype itself.  */\n extern int do_debug;\t\t/* (-D) program argument. */\n \n-#if ENABLE_CHECKING\n #define DBGPRINTF(Fmt,...) do {if (do_debug)\t\t\t\t\\\n       fprintf (stderr, \"%s:%d: \" Fmt \"\\n\",\t\t\t\t\\\n \t       lbasename (__FILE__),__LINE__, ##__VA_ARGS__);} while (0)\n void dbgprint_count_type_at (const char *, int, const char *, type_p);\n #define DBGPRINT_COUNT_TYPE(Msg,Ty) do {if (do_debug)\t\t\t\\\n       dbgprint_count_type_at (__FILE__, __LINE__, Msg, Ty);}while (0)\n-#else\n-#define DBGPRINTF(Fmt,...) do {/*nodbgrintf*/} while (0)\n-#define DBGPRINT_COUNT_TYPE(Msg,Ty) do{/*nodbgprint_count_type*/}while (0)\n-#endif /*ENABLE_CHECKING */\n \n #define FOR_ALL_INHERITED_FIELDS(TYPE, FIELD_VAR) \\\n   for (type_p sub = (TYPE); sub; sub = sub->u.s.base_class) \\"}]}