{"sha": "5a65129e4ea51ffa1a6720a0dbea7aeb78ab60fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE2NTEyOWU0ZWE1MWZmYTFhNjcyMGEwZGJlYTdhZWI3OGFiNjBmYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-04-17T10:02:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-04-17T10:02:36Z"}, "message": "re PR target/60847 (x86 BMI intrinsics not recognized)\n\n\tPR target/60847\n\tForward port from 4.8 branch\n\t2013-07-19  Kirill Yukhin  <kirill.yukhin@intel.com>\n\n\t* config/i386/bmiintrin.h (_blsi_u32): New.\n\t(_blsi_u64): Ditto.\n\t(_blsr_u32): Ditto.\n\t(_blsr_u64): Ditto.\n\t(_blsmsk_u32): Ditto.\n\t(_blsmsk_u64): Ditto.\n\t(_tzcnt_u32): Ditto.\n\t(_tzcnt_u64): Ditto.\n\n\t* gcc.target/i386/bmi-1.c: Extend with new instrinsics.\n\tFix scan patterns.\n\t* gcc.target/i386/bmi-2.c: Ditto.\n\nFrom-SVN: r209471", "tree": {"sha": "7e6bac6366e8f7d8764bf07d9a84ed334f8d2233", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e6bac6366e8f7d8764bf07d9a84ed334f8d2233"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a65129e4ea51ffa1a6720a0dbea7aeb78ab60fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a65129e4ea51ffa1a6720a0dbea7aeb78ab60fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a65129e4ea51ffa1a6720a0dbea7aeb78ab60fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a65129e4ea51ffa1a6720a0dbea7aeb78ab60fa/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "59b266b1d74849a61578fd8c94d3012da4c21039", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59b266b1d74849a61578fd8c94d3012da4c21039", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59b266b1d74849a61578fd8c94d3012da4c21039"}], "stats": {"total": 137, "additions": 128, "deletions": 9}, "files": [{"sha": "2a00a71d06dd6a98826d5b8033dd8ba62cc13370", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a65129e4ea51ffa1a6720a0dbea7aeb78ab60fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a65129e4ea51ffa1a6720a0dbea7aeb78ab60fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a65129e4ea51ffa1a6720a0dbea7aeb78ab60fa", "patch": "@@ -1,3 +1,18 @@\n+2014-04-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/60847\n+\tForward port from 4.8 branch\n+\t2013-07-19  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\t* config/i386/bmiintrin.h (_blsi_u32): New.\n+\t(_blsi_u64): Ditto.\n+\t(_blsr_u32): Ditto.\n+\t(_blsr_u64): Ditto.\n+\t(_blsmsk_u32): Ditto.\n+\t(_blsmsk_u64): Ditto.\n+\t(_tzcnt_u32): Ditto.\n+\t(_tzcnt_u64): Ditto.\n+\n 2014-04-17  Kito Cheng  <kito@0xlab.org>\n \n \t* gcc.c (used_arg): Prevent out of bound access for multilib_options."}, {"sha": "b2d7c60eaf801b49ab7a31617f062dd6a00df213", "filename": "gcc/config/i386/bmiintrin.h", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a65129e4ea51ffa1a6720a0dbea7aeb78ab60fa/gcc%2Fconfig%2Fi386%2Fbmiintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a65129e4ea51ffa1a6720a0dbea7aeb78ab60fa/gcc%2Fconfig%2Fi386%2Fbmiintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbmiintrin.h?ref=5a65129e4ea51ffa1a6720a0dbea7aeb78ab60fa", "patch": "@@ -40,7 +40,6 @@ __tzcnt_u16 (unsigned short __X)\n   return __builtin_ctzs (__X);\n }\n \n-\n extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n __andn_u32 (unsigned int __X, unsigned int __Y)\n {\n@@ -65,25 +64,48 @@ __blsi_u32 (unsigned int __X)\n   return __X & -__X;\n }\n \n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_blsi_u32 (unsigned int __X)\n+{\n+  return __blsi_u32 (__X);\n+}\n+\n extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n __blsmsk_u32 (unsigned int __X)\n {\n   return __X ^ (__X - 1);\n }\n \n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_blsmsk_u32 (unsigned int __X)\n+{\n+  return __blsmsk_u32 (__X);\n+}\n+\n extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n __blsr_u32 (unsigned int __X)\n {\n   return __X & (__X - 1);\n }\n \n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_blsr_u32 (unsigned int __X)\n+{\n+  return __blsr_u32 (__X);\n+}\n \n extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n __tzcnt_u32 (unsigned int __X)\n {\n   return __builtin_ctz (__X);\n }\n \n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_tzcnt_u32 (unsigned int __X)\n+{\n+  return __builtin_ctz (__X);\n+}\n+\n \n #ifdef  __x86_64__\n extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -110,24 +132,48 @@ __blsi_u64 (unsigned long long __X)\n   return __X & -__X;\n }\n \n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_blsi_u64 (unsigned long long __X)\n+{\n+  return __blsi_u64 (__X);\n+}\n+\n extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n __blsmsk_u64 (unsigned long long __X)\n {\n   return __X ^ (__X - 1);\n }\n \n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_blsmsk_u64 (unsigned long long __X)\n+{\n+  return __blsmsk_u64 (__X);\n+}\n+\n extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n __blsr_u64 (unsigned long long __X)\n {\n   return __X & (__X - 1);\n }\n \n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_blsr_u64 (unsigned long long __X)\n+{\n+  return __blsr_u64 (__X);\n+}\n+\n extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n __tzcnt_u64 (unsigned long long __X)\n {\n   return __builtin_ctzll (__X);\n }\n \n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_tzcnt_u64 (unsigned long long __X)\n+{\n+  return __builtin_ctzll (__X);\n+}\n+\n #endif /* __x86_64__  */\n \n #ifdef __DISABLE_BMI__"}, {"sha": "d27064c78ad76be1c728decdd837281bff9e5c9e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a65129e4ea51ffa1a6720a0dbea7aeb78ab60fa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a65129e4ea51ffa1a6720a0dbea7aeb78ab60fa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5a65129e4ea51ffa1a6720a0dbea7aeb78ab60fa", "patch": "@@ -1,3 +1,13 @@\n+2014-04-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/60847\n+\tForward port from 4.8 branch\n+\t2013-07-19  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\t* gcc.target/i386/bmi-1.c: Extend with new instrinsics.\n+\tFix scan patterns.\n+\t* gcc.target/i386/bmi-2.c: Ditto.\n+\n 2014-04-17  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/60849"}, {"sha": "c66a9d83b297e4c109bd21f8d9d29c929105bedb", "filename": "gcc/testsuite/gcc.target/i386/bmi-1.c", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a65129e4ea51ffa1a6720a0dbea7aeb78ab60fa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a65129e4ea51ffa1a6720a0dbea7aeb78ab60fa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-1.c?ref=5a65129e4ea51ffa1a6720a0dbea7aeb78ab60fa", "patch": "@@ -2,10 +2,10 @@\n /* { dg-options \"-O2 -mbmi \" } */\n /* { dg-final { scan-assembler \"andn\\[^\\\\n]*eax\" } } */\n /* { dg-final { scan-assembler-times \"bextr\\[ \\\\t]+\\[^\\\\n]*eax\" 2 } } */\n-/* { dg-final { scan-assembler \"blsi\\[^\\\\n]*eax\" } } */\n-/* { dg-final { scan-assembler \"blsmsk\\[^\\\\n]*eax\" } } */\n-/* { dg-final { scan-assembler \"blsr\\[^\\\\n]*eax\" } } */\n-/* { dg-final { scan-assembler \"tzcntl\\[^\\\\n]*eax\" } } */\n+/* { dg-final { scan-assembler-times \"blsi\\[^\\\\n]*eax\" 2 } } */\n+/* { dg-final { scan-assembler-times \"blsmsk\\[^\\\\n]*eax\" 2 } } */\n+/* { dg-final { scan-assembler-times \"blsr\\[^\\\\n]*eax\" 2 } } */\n+/* { dg-final { scan-assembler-times \"tzcntl\\[^\\\\n]*eax\" 2 } } */\n \n #include <x86intrin.h>\n \n@@ -35,20 +35,44 @@ func_blsi32 (unsigned int X)\n   return __blsi_u32(X);\n }\n \n+unsigned int\n+func_blsi32_2 (unsigned int X)\n+{\n+  return _blsi_u32(X);\n+}\n+\n unsigned int\n func_blsmsk32 (unsigned int X)\n {\n   return __blsmsk_u32(X);\n }\n \n+unsigned int\n+func_blsmsk32_2 (unsigned int X)\n+{\n+  return _blsmsk_u32(X);\n+}\n+\n unsigned int\n func_blsr32 (unsigned int X)\n {\n   return __blsr_u32(X);\n }\n \n+unsigned int\n+func_blsr32_2 (unsigned int X)\n+{\n+  return _blsr_u32(X);\n+}\n+\n unsigned int\n func_tzcnt32 (unsigned int X)\n {\n   return __tzcnt_u32(X);\n }\n+\n+unsigned int\n+func_tzcnt32_2 (unsigned int X)\n+{\n+  return _tzcnt_u32(X);\n+}"}, {"sha": "6eea66aa0f670f9c0b7c808bc639b208c363b407", "filename": "gcc/testsuite/gcc.target/i386/bmi-2.c", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a65129e4ea51ffa1a6720a0dbea7aeb78ab60fa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a65129e4ea51ffa1a6720a0dbea7aeb78ab60fa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-2.c?ref=5a65129e4ea51ffa1a6720a0dbea7aeb78ab60fa", "patch": "@@ -2,10 +2,10 @@\n /* { dg-options \"-O2 -mbmi \" } */\n /* { dg-final { scan-assembler \"andn\\[^\\\\n]*rax\" } } */\n /* { dg-final { scan-assembler-times \"bextr\\[ \\\\t]+\\[^\\\\n]*rax\" 2 } } */\n-/* { dg-final { scan-assembler \"blsi\\[^\\\\n]*rax\" } } */\n-/* { dg-final { scan-assembler \"blsmsk\\[^\\\\n]*rax\" } } */\n-/* { dg-final { scan-assembler \"blsr\\[^\\\\n]*rax\" } } */\n-/* { dg-final { scan-assembler \"tzcntq\\[^\\\\n]*rax\" } } */\n+/* { dg-final { scan-assembler-times \"blsi\\[^\\\\n]*rax\" 2 } } */\n+/* { dg-final { scan-assembler-times \"blsmsk\\[^\\\\n]*rax\" 2 } } */\n+/* { dg-final { scan-assembler-times \"blsr\\[^\\\\n]*rax\" 2 } } */\n+/* { dg-final { scan-assembler-times \"tzcntq\\[^\\\\n]*rax\" 2 } } */\n \n #include <x86intrin.h>\n \n@@ -35,20 +35,44 @@ func_blsi64 (unsigned long long X)\n   return __blsi_u64 (X);\n }\n \n+unsigned long long\n+func_blsi64_2 (unsigned long long X)\n+{\n+  return _blsi_u64 (X);\n+}\n+\n unsigned long long\n func_blsmsk64 (unsigned long long X)\n {\n   return __blsmsk_u64 (X);\n }\n \n+unsigned long long\n+func_blsmsk64_2 (unsigned long long X)\n+{\n+  return _blsmsk_u64 (X);\n+}\n+\n unsigned long long\n func_blsr64 (unsigned long long X)\n {\n   return __blsr_u64 (X);\n }\n \n+unsigned long long\n+func_blsr64_2 (unsigned long long X)\n+{\n+  return _blsr_u64 (X);\n+}\n+\n unsigned long long\n func_tzcnt64 (unsigned long long X)\n {\n   return __tzcnt_u64 (X);\n }\n+\n+unsigned long long\n+func_tzcnt64_2 (unsigned long long X)\n+{\n+  return _tzcnt_u64 (X);\n+}"}]}