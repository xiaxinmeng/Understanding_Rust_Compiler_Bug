{"sha": "e0c32c62d5c47790333bb557ed2d89a3806246d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBjMzJjNjJkNWM0Nzc5MDMzM2JiNTU3ZWQyZDg5YTM4MDYyNDZkMA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2002-08-11T19:24:09Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2002-08-11T19:24:09Z"}, "message": "dsp16xx.c (print_operand): Fix format specifier.\n\n\t* dsp16xx.c (print_operand): Fix format specifier.\n\t* dsp16xx.md: Avoid automatic aggregate initialization.\n\t* frv.h (REG_CLASS_FROM_LETTER): Avoid char as array index.\n\t* h8300.c (emit_a_rotate, h8300_adjust_insn_length): Avoid U\n\tinteger constant modifier.\n\t* ip2k.c (ip2k_set_compare): Avoid signed/unsigned warning.\n\t* mmix-protos.h (mmix_use_simple_return): Move outside TREE_CODE\n\tguards.\n\t* sh/netbsd-elf.h (FUNCTION_PROFILER): Fix format specifier.\n\t* v850.c (v850_select_section): Mark parameter with\n\tATTRIBUTE_UNUSED.\n\t* global.c (global_alloc): Const-ify.\n\t* ra-colorize.c (hardregset_to_string): Fix format specifier.\n\nFrom-SVN: r56212", "tree": {"sha": "fe53ca4ba392d25b1374ffe33608794308bcfc0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe53ca4ba392d25b1374ffe33608794308bcfc0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0c32c62d5c47790333bb557ed2d89a3806246d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0c32c62d5c47790333bb557ed2d89a3806246d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0c32c62d5c47790333bb557ed2d89a3806246d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0c32c62d5c47790333bb557ed2d89a3806246d0/comments", "author": null, "committer": null, "parents": [{"sha": "7ae8cf75dae94f2b0b68f433e0962ffe7883a158", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ae8cf75dae94f2b0b68f433e0962ffe7883a158", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ae8cf75dae94f2b0b68f433e0962ffe7883a158"}], "stats": {"total": 48, "additions": 33, "deletions": 15}, "files": [{"sha": "3bdc08fe6dace009ef7a983c69a6f7ca6f231e10", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c32c62d5c47790333bb557ed2d89a3806246d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c32c62d5c47790333bb557ed2d89a3806246d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0c32c62d5c47790333bb557ed2d89a3806246d0", "patch": "@@ -1,3 +1,19 @@\n+2002-08-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* dsp16xx.c (print_operand): Fix format specifier.\n+\t* dsp16xx.md: Avoid automatic aggregate initialization.\n+\t* frv.h (REG_CLASS_FROM_LETTER): Avoid char as array index.\n+\t* h8300.c (emit_a_rotate, h8300_adjust_insn_length): Avoid U\n+\tinteger constant modifier.\n+\t* ip2k.c (ip2k_set_compare): Avoid signed/unsigned warning.\n+\t* mmix-protos.h (mmix_use_simple_return): Move outside TREE_CODE\n+\tguards.\n+\t* sh/netbsd-elf.h (FUNCTION_PROFILER): Fix format specifier.\n+\t* v850.c (v850_select_section): Mark parameter with\n+\tATTRIBUTE_UNUSED.\n+\t* global.c (global_alloc): Const-ify.\n+\t* ra-colorize.c (hardregset_to_string): Fix format specifier.\n+\n 2002-08-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* darwin-c.c (darwin_pragma_options): Const-ify."}, {"sha": "b30e4052331393f51547cf045c3b51050491d68d", "filename": "gcc/config/dsp16xx/dsp16xx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c32c62d5c47790333bb557ed2d89a3806246d0/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c32c62d5c47790333bb557ed2d89a3806246d0/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c?ref=e0c32c62d5c47790333bb557ed2d89a3806246d0", "patch": "@@ -1841,7 +1841,7 @@ print_operand(file, op, letter)\n \tREAL_VALUE_TYPE r;\n \tREAL_VALUE_FROM_CONST_DOUBLE (r, op);\n \tREAL_VALUE_TO_TARGET_SINGLE (r, l);\n-\tfprintf (file, \"0x%x\", l);\n+\tfprintf (file, \"0x%lx\", l);\n       }\n     else if (code == CONST)\n       {"}, {"sha": "f39f183ec71810bb87604f122e9cbc575ccd7151", "filename": "gcc/config/dsp16xx/dsp16xx.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c32c62d5c47790333bb557ed2d89a3806246d0/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c32c62d5c47790333bb557ed2d89a3806246d0/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.md?ref=e0c32c62d5c47790333bb557ed2d89a3806246d0", "patch": "@@ -1935,7 +1935,9 @@\n   rtx reg3 = gen_reg_rtx (HImode);\n   rtx label1 = gen_label_rtx ();\n   rtx label2 = gen_label_rtx ();\n-  REAL_VALUE_TYPE offset = REAL_VALUE_LDEXP (dconst1, 31);\n+  REAL_VALUE_TYPE offset;\n+\n+  offset = REAL_VALUE_LDEXP (dconst1, 31);\n \n   if (reg1)\t\t\t/* turn off complaints about unreached code */\n     {"}, {"sha": "37c28e3ed196bc16c2131cd34c538ae7c5cf8983", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c32c62d5c47790333bb557ed2d89a3806246d0/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c32c62d5c47790333bb557ed2d89a3806246d0/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=e0c32c62d5c47790333bb557ed2d89a3806246d0", "patch": "@@ -1375,7 +1375,7 @@ extern enum reg_class regno_reg_class[];\n \t'g', 'i', 'm', 'n', 'o', 'p', 'r', 's' */\n \n extern enum reg_class reg_class_from_letter[];\n-#define REG_CLASS_FROM_LETTER(CHAR) reg_class_from_letter [CHAR]\n+#define REG_CLASS_FROM_LETTER(CHAR) reg_class_from_letter [(unsigned char)(CHAR)]\n \n /* A C expression which is nonzero if register number NUM is suitable for use\n    as a base register in operand addresses.  It may be either a suitable hard"}, {"sha": "f53e6fa76cfa009064077404074111aba9e1cb23", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c32c62d5c47790333bb557ed2d89a3806246d0/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c32c62d5c47790333bb557ed2d89a3806246d0/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=e0c32c62d5c47790333bb557ed2d89a3806246d0", "patch": "@@ -3212,7 +3212,7 @@ emit_a_rotate (code, operands)\n \n   /* Determine the faster direction.  After this phase, amount will be\n      at most a half of GET_MODE_BITSIZE (mode).  */\n-  if ((unsigned int) amount > GET_MODE_BITSIZE (mode) / 2U)\n+  if ((unsigned int) amount > GET_MODE_BITSIZE (mode) / (unsigned) 2)\n     {\n       /* Flip the direction.  */\n       amount = GET_MODE_BITSIZE (mode) - amount;\n@@ -3747,7 +3747,7 @@ h8300_adjust_insn_length (insn, length)\n \n       /* Determine the faster direction.  After this phase, amount\n \t will be at most a half of GET_MODE_BITSIZE (mode).  */\n-      if ((unsigned int) amount > GET_MODE_BITSIZE (mode) / 2U)\n+      if ((unsigned int) amount > GET_MODE_BITSIZE (mode) / (unsigned) 2)\n \t/* Flip the direction.  */\n \tamount = GET_MODE_BITSIZE (mode) - amount;\n "}, {"sha": "56228981d9d9921fa50b3d04dd15e020487441f8", "filename": "gcc/config/ip2k/ip2k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c32c62d5c47790333bb557ed2d89a3806246d0/gcc%2Fconfig%2Fip2k%2Fip2k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c32c62d5c47790333bb557ed2d89a3806246d0/gcc%2Fconfig%2Fip2k%2Fip2k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.c?ref=e0c32c62d5c47790333bb557ed2d89a3806246d0", "patch": "@@ -1090,7 +1090,7 @@ ip2k_set_compare (x, y)\n   if (GET_MODE (x) == DImode && GET_CODE (y) == CONST_INT)\n     {\n       rtx value;\n-      int i;\n+      size_t i;\n       \n       value = rtx_alloc (CONST_DOUBLE);\n       PUT_MODE (value, VOIDmode);"}, {"sha": "0f43e869636a9bbb88ac5519ee497e5704b45e0a", "filename": "gcc/config/mmix/mmix-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c32c62d5c47790333bb557ed2d89a3806246d0/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c32c62d5c47790333bb557ed2d89a3806246d0/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h?ref=e0c32c62d5c47790333bb557ed2d89a3806246d0", "patch": "@@ -57,6 +57,7 @@ extern void mmix_output_register_setting\n extern void mmix_conditional_register_usage PARAMS ((void));\n extern int mmix_local_regno PARAMS ((int));\n extern int mmix_dbx_register_number PARAMS ((int));\n+extern int mmix_use_simple_return PARAMS ((void));\n \n /* Things that need rtl.h, tree.h or real.h included, or in combination.  */\n \n@@ -81,7 +82,6 @@ extern void mmix_asm_output_aligned_local\n extern void mmix_asm_declare_register_global\n   PARAMS ((FILE *, tree, int, const char *));\n extern void mmix_asm_output_mi_thunk PARAMS ((FILE *, tree, int, tree));\n-extern int mmix_use_simple_return PARAMS ((void));\n \n /* Need tree.h and rtl.h */\n # ifdef RTX_CODE"}, {"sha": "513b39f4704a751d774f0c48f52bc42b95301868", "filename": "gcc/config/sh/netbsd-elf.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c32c62d5c47790333bb557ed2d89a3806246d0/gcc%2Fconfig%2Fsh%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c32c62d5c47790333bb557ed2d89a3806246d0/gcc%2Fconfig%2Fsh%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fnetbsd-elf.h?ref=e0c32c62d5c47790333bb557ed2d89a3806246d0", "patch": "@@ -112,16 +112,16 @@ do\t\t\t\t\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n     else\t\t\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n-        fprintf((STREAM), \"\\tmov.l\\t%cLP%d,r1\\n\",\t\t\t\\\n+        fprintf((STREAM), \"\\tmov.l\\t%sLP%d,r1\\n\",\t\t\t\\\n                 LOCAL_LABEL_PREFIX, (LABELNO));\t\t\t\t\\\n-        fprintf((STREAM), \"\\tmova\\t%cLP%dr,r0\\n\",\t\t\t\\\n+        fprintf((STREAM), \"\\tmova\\t%sLP%dr,r0\\n\",\t\t\t\\\n                 LOCAL_LABEL_PREFIX, (LABELNO));\t\t\t\t\\\n         fprintf((STREAM), \"\\tjmp\\t@r1\\n\");\t\t\t\t\\\n         fprintf((STREAM), \"\\tnop\\n\");\t\t\t\t\t\\\n         fprintf((STREAM), \"\\t.align\\t2\\n\");\t\t\t\t\\\n-        fprintf((STREAM), \"%cLP%d:\\t.long\\t__mcount\\n\",\t\t\t\\\n+        fprintf((STREAM), \"%sLP%d:\\t.long\\t__mcount\\n\",\t\t\t\\\n                 LOCAL_LABEL_PREFIX, (LABELNO));\t\t\t\t\\\n-        fprintf((STREAM), \"%cLP%dr:\\n\", LOCAL_LABEL_PREFIX, (LABELNO));\t\\\n+        fprintf((STREAM), \"%sLP%dr:\\n\", LOCAL_LABEL_PREFIX, (LABELNO));\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n while (0)"}, {"sha": "7c3dd3eb56bed612101f5f9ecce9e732662ccf7b", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c32c62d5c47790333bb557ed2d89a3806246d0/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c32c62d5c47790333bb557ed2d89a3806246d0/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=e0c32c62d5c47790333bb557ed2d89a3806246d0", "patch": "@@ -2876,7 +2876,7 @@ v850_return_addr (count)\n static void\n v850_select_section (exp, reloc, align)\n      tree exp;\n-     int reloc;\n+     int reloc ATTRIBUTE_UNUSED;\n      unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED;\n {\n   if (TREE_CODE (exp) == VAR_DECL)"}, {"sha": "d7950fa9aa29112d485f03ab0730fcfadf4efba6", "filename": "gcc/global.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c32c62d5c47790333bb557ed2d89a3806246d0/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c32c62d5c47790333bb557ed2d89a3806246d0/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=e0c32c62d5c47790333bb557ed2d89a3806246d0", "patch": "@@ -367,8 +367,8 @@ global_alloc (file)\n      that need a register window.  So prefer the ones that can be used in\n      a leaf function.  */\n   {\n-    char *cheap_regs;\n-    char *leaf_regs = LEAF_REGISTERS;\n+    const char *cheap_regs;\n+    const char *const leaf_regs = LEAF_REGISTERS;\n \n     if (only_leaf_regs_used () && leaf_function_p ())\n       cheap_regs = leaf_regs;"}, {"sha": "eecea504f181f0c1bb8521f39107a68abd8c7615", "filename": "gcc/ra-colorize.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c32c62d5c47790333bb557ed2d89a3806246d0/gcc%2Fra-colorize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c32c62d5c47790333bb557ed2d89a3806246d0/gcc%2Fra-colorize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra-colorize.c?ref=e0c32c62d5c47790333bb557ed2d89a3806246d0", "patch": "@@ -1160,7 +1160,7 @@ hardregset_to_string (s)\n {\n   static char string[/*FIRST_PSEUDO_REGISTER + 30*/1024];\n #if FIRST_PSEUDO_REGISTER <= HOST_BITS_PER_WIDE_INT\n-  sprintf (string, \"%x\", s);\n+  sprintf (string, HOST_WIDE_INT_PRINT_HEX, s);\n #else\n   char *c = string;\n   int i,j;"}]}