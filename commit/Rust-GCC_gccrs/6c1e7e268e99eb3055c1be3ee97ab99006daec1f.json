{"sha": "6c1e7e268e99eb3055c1be3ee97ab99006daec1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMxZTdlMjY4ZTk5ZWIzMDU1YzFiZTNlZTk3YWI5OTAwNmRhZWMxZg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2007-04-23T07:38:33Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2007-04-23T07:38:33Z"}, "message": "testsuite_flags.in: Add --build-cc option.\n\n\t* scripts/testsuite_flags.in: Add --build-cc option.\n\t* testsuite/lib/libstdc++.exp (libstdc++_init): Set cc.  Fix typo\n\tin previous change.\n\t(v3_target_compile_as_c): Use cc.\n\nFrom-SVN: r124058", "tree": {"sha": "27ddc4d47c3d0ce163327ff54dcc456163601759", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27ddc4d47c3d0ce163327ff54dcc456163601759"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c1e7e268e99eb3055c1be3ee97ab99006daec1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c1e7e268e99eb3055c1be3ee97ab99006daec1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c1e7e268e99eb3055c1be3ee97ab99006daec1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c1e7e268e99eb3055c1be3ee97ab99006daec1f/comments", "author": null, "committer": null, "parents": [{"sha": "8b3cc88233733753e203f6042e04e719fb917cef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b3cc88233733753e203f6042e04e719fb917cef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b3cc88233733753e203f6042e04e719fb917cef"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "c0f36593ed68cdff124636371ffc7d29878b6eae", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1e7e268e99eb3055c1be3ee97ab99006daec1f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1e7e268e99eb3055c1be3ee97ab99006daec1f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6c1e7e268e99eb3055c1be3ee97ab99006daec1f", "patch": "@@ -1,3 +1,10 @@\n+2007-04-23  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* scripts/testsuite_flags.in: Add --build-cc option.\n+\t* testsuite/lib/libstdc++.exp (libstdc++_init): Set cc.  Fix typo\n+\tin previous change.\n+\t(v3_target_compile_as_c): Use cc.\n+\n 2007-04-22  Mark Mitchell  <mark@codesourcery.com>\n \n \t* testsuite/lib/libstdc++.exp (libstdc++_init): Use the same flags"}, {"sha": "13bd68b699c5a6dc2f04a2defe39ebdaf185c905", "filename": "libstdc++-v3/scripts/testsuite_flags.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1e7e268e99eb3055c1be3ee97ab99006daec1f/libstdc%2B%2B-v3%2Fscripts%2Ftestsuite_flags.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1e7e268e99eb3055c1be3ee97ab99006daec1f/libstdc%2B%2B-v3%2Fscripts%2Ftestsuite_flags.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fscripts%2Ftestsuite_flags.in?ref=6c1e7e268e99eb3055c1be3ee97ab99006daec1f", "patch": "@@ -15,6 +15,7 @@ Usage:\n     testsuite_flags --install-includes\n \t\t    --build-includes\n \t\t    --build-cxx\n+\t\t    --build-cc\n \t\t    --install-cxx\n \t\t    --cxxflags\n \t\t    --cxxpchflags\n@@ -47,6 +48,11 @@ case ${query} in\n       CXX=`echo \"$CXX_build\" | sed 's,gcc/xgcc ,gcc/g++ ,'`\n       echo ${CXX}\n       ;;\n+    --build-cc)\n+      CC_build=\"@CC@\"\n+      CC=\"$CC_build\"\n+      echo ${CC}\n+      ;;\n     --cxxflags)\n       CXXFLAGS_save=\"-g -O2 -D_GLIBCXX_ASSERT\"\n       CXXFLAGS_config='@SECTION_FLAGS@ -fmessage-length=0 "}, {"sha": "85f256672be7b86aac6af07297708eb9413a1b25", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1e7e268e99eb3055c1be3ee97ab99006daec1f/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1e7e268e99eb3055c1be3ee97ab99006daec1f/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=6c1e7e268e99eb3055c1be3ee97ab99006daec1f", "patch": "@@ -83,7 +83,7 @@ proc libstdc++_init { testfile } {\n     global env\n     global v3-sharedlib \n     global srcdir blddir objdir tool_root_dir\n-    global cxx cxxflags cxxldflags\n+    global cc cxx cxxflags cxxldflags\n     global includes\n     global gluefile wrap_flags\n     global ld_library_path\n@@ -175,6 +175,7 @@ proc libstdc++_init { testfile } {\n     set cxx [transform \"g++\"]\n     set cxxflags \"-g -O2 -D_GLIBCXX_ASSERT -fmessage-length=0\" \n     set cxxldflags \"\"\n+    set cc [transform \"gcc\"]\n     # Locate testsuite_hooks.h and other testsuite headers.\n     set includes \"-I${srcdir}/util\"\n     # Adapt the defaults for special circumstances.\n@@ -198,10 +199,10 @@ proc libstdc++_init { testfile } {\n \t    # Create the directory containing the file.\n \t    set dir [file dirname $dst]\n \t    remote_exec host \"mkdir\" [list \"-p\" \"$dir\"]\n-\t    # Download teh file.\n+\t    # Download the file.\n \t    set result [remote_download host $src $dst]\n \t    if { $result == \"\" } {\n-\t\tverbose -log \"Unable to download ${srcdir}/${f} to host.\"\n+\t\tverbose -log \"Unable to download ${srcdir}/${src} to host.\"\n \t\treturn \"untested\"\n \t    }\n \t}\n@@ -210,12 +211,14 @@ proc libstdc++_init { testfile } {\n         # If we find a testsuite_flags file, we're testing in the build dir.\n \tset cxx [exec sh $flags_file --build-cxx]\n \tset cxxflags [exec sh $flags_file --cxxflags]\n-        set cxxldflags [exec sh $flags_file --cxxldflags]\n+\tset cxxldflags [exec sh $flags_file --cxxldflags]\n+\tset cc [exec sh $flags_file --build-cc]\n \tset includes [exec sh $flags_file --build-includes]\n     }\n \n     # Always use MO files built by this test harness.\n     set cxxflags \"$cxxflags -DLOCALEDIR=\\\".\\\"\"\n+    set ccflags \"$cxxflags -DLOCALEDIR=\\\".\\\"\"\n \n     # If a PCH file is available, use it.  We must delay performing\n     # this check until $cxx and such have been initialized because we\n@@ -376,14 +379,14 @@ proc v3_target_compile_as_c { source dest type options } {\n     global includes\n     global flags_file\n     global blddir\n+    global cc\n \n     if { [target_info needs_status_wrapper] != \"\" && [info exists gluefile] } {\n         lappend options \"libs=${gluefile}\"\n         lappend options \"ldflags=${wrap_flags}\"\n     }\n \n     set tname [target_info name]\n-    set cc [board_info $tname compiler]\n     set cc_final $cc\n     set cxxlibglossflags [libgloss_link_flags]\n     set cc_final [concat $cc_final $cxxlibglossflags]"}]}