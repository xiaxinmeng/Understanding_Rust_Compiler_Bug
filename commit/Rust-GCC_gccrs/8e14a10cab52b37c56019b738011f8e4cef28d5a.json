{"sha": "8e14a10cab52b37c56019b738011f8e4cef28d5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGUxNGExMGNhYjUyYjM3YzU2MDE5YjczODAxMWY4ZTRjZWYyOGQ1YQ==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2016-09-13T19:26:02Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2016-09-13T19:26:02Z"}, "message": "Implement P0040R3, Extending memory management tools.\n\n\t* include/bits/stl_uninitialized.h (utility): New include\n\tin C++17 mode.\n\t(uninitialized_default_construct): New.\n\t(uninitialized_default_construct_n): Likewise.\n\t(uninitialized_value_construct): Likewise.\n\t(uninitialized_value_construct_n): Likewise.\n\t(uninitialized_move): Likewise.\n\t(uninitialized_move_n): Likewise.\n\t(destroy_at, destroy, destroy_n): Likewise.\n\t* testsuite/20_util/specialized_algorithms/memory_management_tools/1.cc:\n\tNew.\n\nFrom-SVN: r240122", "tree": {"sha": "2407fee1f0361d9285afc20e29f5d43f7bf65c99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2407fee1f0361d9285afc20e29f5d43f7bf65c99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e14a10cab52b37c56019b738011f8e4cef28d5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e14a10cab52b37c56019b738011f8e4cef28d5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e14a10cab52b37c56019b738011f8e4cef28d5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e14a10cab52b37c56019b738011f8e4cef28d5a/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9952908a4b6cf73e8de11af61e1d2c4d67e1b530", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9952908a4b6cf73e8de11af61e1d2c4d67e1b530", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9952908a4b6cf73e8de11af61e1d2c4d67e1b530"}], "stats": {"total": 243, "additions": 243, "deletions": 0}, "files": [{"sha": "efd17fba91a4534d390d0a51b21bd1de99d9518c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e14a10cab52b37c56019b738011f8e4cef28d5a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e14a10cab52b37c56019b738011f8e4cef28d5a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8e14a10cab52b37c56019b738011f8e4cef28d5a", "patch": "@@ -1,3 +1,18 @@\n+2016-09-13  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement P0040R3, Extending memory management tools.\n+\t* include/bits/stl_uninitialized.h (utility): New include\n+\tin C++17 mode.\n+\t(uninitialized_default_construct): New.\n+\t(uninitialized_default_construct_n): Likewise.\n+\t(uninitialized_value_construct): Likewise.\n+\t(uninitialized_value_construct_n): Likewise.\n+\t(uninitialized_move): Likewise.\n+\t(uninitialized_move_n): Likewise.\n+\t(destroy_at, destroy, destroy_n): Likewise.\n+\t* testsuite/20_util/specialized_algorithms/memory_management_tools/1.cc:\n+\tNew.\n+\n 2016-09-12  Jason Merrill  <jason@redhat.com>\n \n \t* config/abi/pre/gnu.ver: Use [jmy] for size_t."}, {"sha": "c5c81fb2c665e26d40668f9f3b39e7063ea42394", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e14a10cab52b37c56019b738011f8e4cef28d5a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e14a10cab52b37c56019b738011f8e4cef28d5a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=8e14a10cab52b37c56019b738011f8e4cef28d5a", "patch": "@@ -56,6 +56,10 @@\n #ifndef _STL_UNINITIALIZED_H\n #define _STL_UNINITIALIZED_H 1\n \n+#if __cplusplus > 201402L\n+#include <utility>\n+#endif\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -682,6 +686,98 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t std::__iterator_category(__first)); }\n #endif\n \n+#if __cplusplus > 201402L\n+  template <typename _ForwardIterator>\n+    inline void\n+    uninitialized_default_construct(_ForwardIterator __first,\n+\t\t\t\t    _ForwardIterator __last)\n+  {\n+    for (; __first != __last; ++__first)\n+      ::new (static_cast<void*>(std::__addressof(*__first)))\n+\t  typename iterator_traits<_ForwardIterator>::value_type;\n+  }\n+\n+  template <typename _ForwardIterator, typename _Size>\n+    inline _ForwardIterator\n+    uninitialized_default_construct_n(_ForwardIterator __first, _Size __count)\n+  {\n+    for (; __count > 0; (void)++__first, --__count)\n+      ::new (static_cast<void*>(std::__addressof(*__first)))\n+\t  typename iterator_traits<_ForwardIterator>::value_type;\n+    return __first;\n+  }\n+\n+  template <typename _ForwardIterator>\n+    inline void\n+    uninitialized_value_construct(_ForwardIterator __first,\n+\t\t\t\t  _ForwardIterator __last)\n+  {\n+    for (; __first != __last; ++__first)\n+      ::new (static_cast<void*>(std::__addressof(*__first)))\n+\t  typename iterator_traits<_ForwardIterator>::value_type();\n+  }\n+\n+  template <typename _ForwardIterator, typename _Size>\n+    inline _ForwardIterator\n+    uninitialized_value_construct_n(_ForwardIterator __first, _Size __count)\n+  {\n+    for (; __count > 0; (void)++__first, --__count)\n+      ::new (static_cast<void*>(std::__addressof(*__first)))\n+\t  typename iterator_traits<_ForwardIterator>::value_type();\n+    return __first;\n+  }\n+\n+  template <typename _InputIterator, typename _ForwardIterator>\n+    inline _ForwardIterator\n+    uninitialized_move(_InputIterator __first, _InputIterator __last,\n+\t\t       _ForwardIterator __result)\n+  {\n+    for (; __first != __last; (void)++__result, ++__first)\n+      ::new (static_cast<void*>(std::__addressof(*__result)))\n+\t  typename\n+\t  iterator_traits<_ForwardIterator>::value_type(std::move(*__first));\n+    return __result;\n+  }\n+\n+  template <typename _InputIterator, typename _Size, typename _ForwardIterator>\n+    inline pair<_InputIterator, _ForwardIterator>\n+    uninitialized_move_n(_InputIterator __first, _Size __count,\n+\t\t\t _ForwardIterator __result)\n+  {\n+    for (; __count > 0; ++__result, (void) ++__first, --__count)\n+      ::new (static_cast<void*>(std::__addressof(*__result)))\n+\t  typename\n+\t  iterator_traits<_ForwardIterator>::value_type(std::move(*__first));\n+    return {__first, __result};\n+  }\n+\n+  template <typename _Tp>\n+    inline void\n+    destroy_at(_Tp* __location)\n+  {\n+    __location->~_Tp();\n+  }\n+\n+  template <typename _ForwardIterator>\n+    inline void\n+    destroy(_ForwardIterator __first, _ForwardIterator __last)\n+  {\n+    for (; __first != __last; ++__first)\n+      std::destroy_at(std::__addressof(*__first));\n+  }\n+\n+  template <typename _ForwardIterator, typename _Size>\n+    inline _ForwardIterator\n+    destroy_n(_ForwardIterator __first, _Size __count)\n+  {\n+    for (; __count > 0; (void)++__first, --__count)\n+      std::destroy_at(std::__addressof(*__first));\n+    return __first;\n+  }\n+\n+#endif\n+\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "ec72b826a5374b15734486f9482b50497f5f538a", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/memory_management_tools/1.cc", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e14a10cab52b37c56019b738011f8e4cef28d5a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Fmemory_management_tools%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e14a10cab52b37c56019b738011f8e4cef28d5a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Fmemory_management_tools%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Fmemory_management_tools%2F1.cc?ref=8e14a10cab52b37c56019b738011f8e4cef28d5a", "patch": "@@ -0,0 +1,132 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+#include <string>\n+#include <array>\n+\n+int del_count = 0;\n+\n+struct DelCount\n+{\n+  ~DelCount() { ++del_count; }\n+};\n+\n+void test01()\n+{\n+  char test_data[] = \"123456\";\n+  std::uninitialized_default_construct(std::begin(test_data),\n+\t\t\t\t       std::end(test_data));\n+  VERIFY(std::string(test_data) == \"123456\");\n+}\n+\n+void test02()\n+{\n+  char test_data[] = \"123456\";\n+  std::uninitialized_value_construct(std::begin(test_data),\n+\t\t\t\t       std::end(test_data));\n+  VERIFY(std::string(test_data, 6) == std::string(\"\\0\\0\\0\\0\\0\\0\", 6));\n+}\n+\n+void test03()\n+{\n+  char test_data[] = \"123456\";\n+  std::uninitialized_default_construct_n(std::begin(test_data), 6);\n+  VERIFY(std::string(test_data) == \"123456\");\n+}\n+\n+void test04()\n+{\n+  char test_data[] = \"123456\";\n+  std::uninitialized_value_construct_n(std::begin(test_data), 6);\n+  VERIFY(std::string(test_data, 6) == std::string(\"\\0\\0\\0\\0\\0\\0\", 6));\n+}\n+\n+void test05()\n+{\n+  del_count = 0;\n+  DelCount* x = (DelCount*)malloc(sizeof(DelCount));\n+  new (x) DelCount;\n+  std::destroy_at(&x[0]);\n+  VERIFY(del_count == 1);\n+  del_count = 0;\n+  free(x);\n+}\n+\n+void test06()\n+{\n+  del_count = 0;\n+  DelCount* x = (DelCount*)malloc(sizeof(DelCount)*10);\n+  for (int i = 0; i < 10; ++i) new (x+i) DelCount;\n+  std::destroy(x, x+10);\n+  VERIFY(del_count == 10);\n+  del_count = 0;\n+  free(x);\n+}\n+\n+void test07()\n+{\n+  del_count = 0;\n+  DelCount* x = (DelCount*)malloc(sizeof(DelCount)*10);\n+  for (int i = 0; i < 10; ++i) new (x+i) DelCount;\n+  std::destroy_n(x, 10);\n+  VERIFY(del_count == 10);\n+  del_count = 0;\n+  free(x);\n+}\n+\n+void test08()\n+{\n+  std::vector<std::unique_ptr<int>> source;\n+  for (int i = 0; i < 10; ++i) source.push_back(std::make_unique<int>(i));\n+  std::unique_ptr<int>* target =\n+    (std::unique_ptr<int>*)malloc(sizeof(std::unique_ptr<int>)*10);\n+  std::uninitialized_move(source.begin(), source.end(), target);\n+  for (const auto& x : source) VERIFY(!x);\n+  for (int i = 0; i < 10; ++i) VERIFY(bool(*(target+i)));\n+  std::destroy_n(target, 10);\n+  free(target);\n+}\n+\n+void test09()\n+{\n+  std::vector<std::unique_ptr<int>> source;\n+  for (int i = 0; i < 10; ++i) source.push_back(std::make_unique<int>(i));\n+  std::unique_ptr<int>* target =\n+    (std::unique_ptr<int>*)malloc(sizeof(std::unique_ptr<int>)*10);\n+  std::uninitialized_move_n(source.begin(), 10, target);\n+  for (const auto& x : source) VERIFY(!x);\n+  for (int i = 0; i < 10; ++i) VERIFY(bool(*(target+i)));\n+  std::destroy_n(target, 10);\n+  free(target);\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+  test05();\n+  test06();\n+  test07();\n+  test08();\n+  test09();\n+}"}]}