{"sha": "13a44ee0e26699b3ed255086e7fb7890001d2706", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNhNDRlZTBlMjY2OTliM2VkMjU1MDg2ZTdmYjc4OTAwMDFkMjcwNg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2005-08-01T04:02:26Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-08-01T04:02:26Z"}, "message": "class.c, [...]: Fix comment typos.\n\n\t* class.c, decl.c, name-lookup.c, pt.c, typeck.c, typeck2.c:\n\tFix comment typos.\n\nFrom-SVN: r102621", "tree": {"sha": "904765faf29431ff04386d4af6b130fa53713cab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/904765faf29431ff04386d4af6b130fa53713cab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13a44ee0e26699b3ed255086e7fb7890001d2706", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13a44ee0e26699b3ed255086e7fb7890001d2706", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13a44ee0e26699b3ed255086e7fb7890001d2706", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13a44ee0e26699b3ed255086e7fb7890001d2706/comments", "author": null, "committer": null, "parents": [{"sha": "569b7f6adb641fe57a10c76514bf670f5f479648", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/569b7f6adb641fe57a10c76514bf670f5f479648", "html_url": "https://github.com/Rust-GCC/gccrs/commit/569b7f6adb641fe57a10c76514bf670f5f479648"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "061ab2fa1c725dda4c084f15f4096d89f00d308d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13a44ee0e26699b3ed255086e7fb7890001d2706/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13a44ee0e26699b3ed255086e7fb7890001d2706/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=13a44ee0e26699b3ed255086e7fb7890001d2706", "patch": "@@ -1,3 +1,8 @@\n+2005-08-01  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* class.c, decl.c, name-lookup.c, pt.c, typeck.c, typeck2.c:\n+\tFix comment typos.\n+\n 2005-07-29  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* method.c: Fix a comment typo."}, {"sha": "4d57a73c41da827e645b03be37fa15bb42d1df12", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13a44ee0e26699b3ed255086e7fb7890001d2706/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13a44ee0e26699b3ed255086e7fb7890001d2706/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=13a44ee0e26699b3ed255086e7fb7890001d2706", "patch": "@@ -5545,7 +5545,7 @@ pop_lang_context (void)\n \n /* Given an OVERLOAD and a TARGET_TYPE, return the function that\n    matches the TARGET_TYPE.  If there is no satisfactory match, return\n-   error_mark_node, and issue a error & warning messages under control\n+   error_mark_node, and issue an error & warning messages under control\n    of FLAGS.  Permit pointers to member function if FLAGS permits.  If\n    TEMPLATE_ONLY, the name of the overloaded function was a\n    template-id, and EXPLICIT_TARGS are the explicitly provided"}, {"sha": "99a18301c1af9e96b7d8ccdc8ec9929c1929a4a8", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13a44ee0e26699b3ed255086e7fb7890001d2706/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13a44ee0e26699b3ed255086e7fb7890001d2706/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=13a44ee0e26699b3ed255086e7fb7890001d2706", "patch": "@@ -2830,7 +2830,7 @@ record_unknown_type (tree type, const char* name)\n   TYPE_MODE (type) = TYPE_MODE (void_type_node);\n }\n \n-/* An string for which we should create an IDENTIFIER_NODE at\n+/* A string for which we should create an IDENTIFIER_NODE at\n    startup.  */\n \n typedef struct predefined_identifier"}, {"sha": "a4c33a31de27def6d48f58f2336913707e7f1911", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13a44ee0e26699b3ed255086e7fb7890001d2706/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13a44ee0e26699b3ed255086e7fb7890001d2706/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=13a44ee0e26699b3ed255086e7fb7890001d2706", "patch": "@@ -3966,7 +3966,7 @@ lookup_name (tree name, int prefer_type)\n    Unlike lookup_name_real, we make sure that NAME is actually\n    declared in the desired scope, not from inheritance, nor using\n    directive.  For using declaration, there is DR138 still waiting\n-   to be resolved.  Hidden name coming from earlier an friend\n+   to be resolved.  Hidden name coming from an earlier friend\n    declaration is also returned.\n \n    A TYPE_DECL best matching the NAME is returned.  Catching error"}, {"sha": "cc3c03e7fe93f5ffdd7343e9087b4a74bc70eb9c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13a44ee0e26699b3ed255086e7fb7890001d2706/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13a44ee0e26699b3ed255086e7fb7890001d2706/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=13a44ee0e26699b3ed255086e7fb7890001d2706", "patch": "@@ -642,7 +642,7 @@ end_explicit_instantiation (void)\n   processing_explicit_instantiation = false;\n }\n \n-/* A explicit specialization or partial specialization TMPL is being\n+/* An explicit specialization or partial specialization TMPL is being\n    declared.  Check that the namespace in which the specialization is\n    occurring is permissible.  Returns false iff it is invalid to\n    specialize TMPL in the current namespace.  */"}, {"sha": "18d5bb603078b967d01a922a9e09252c35132c58", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13a44ee0e26699b3ed255086e7fb7890001d2706/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13a44ee0e26699b3ed255086e7fb7890001d2706/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=13a44ee0e26699b3ed255086e7fb7890001d2706", "patch": "@@ -3764,7 +3764,7 @@ build_unary_op (enum tree_code code, tree xarg, int noconvert)\n \t    if (!noconvert && CP_INTEGRAL_TYPE_P (TREE_TYPE (arg)))\n \t      arg = perform_integral_promotions (arg);\n \n-\t    /* Make sure the result is not a lvalue: a unary plus or minus\n+\t    /* Make sure the result is not an lvalue: a unary plus or minus\n \t       expression is always a rvalue.  */\n \t    if (real_lvalue_p (arg))\n \t      arg = build1 (NON_LVALUE_EXPR, TREE_TYPE (arg), arg);"}, {"sha": "e9a61614f71a233d8bf46a4287a9650166e3db2b", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13a44ee0e26699b3ed255086e7fb7890001d2706/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13a44ee0e26699b3ed255086e7fb7890001d2706/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=13a44ee0e26699b3ed255086e7fb7890001d2706", "patch": "@@ -945,7 +945,7 @@ process_init_constructor_record (tree type, tree init)\n }\n \n /* Subroutine of process_init_constructor, which will process a single\n-   initializer INIT for an union of type TYPE. Returns the flags (PICFLAG_*)\n+   initializer INIT for a union of type TYPE. Returns the flags (PICFLAG_*)\n    which describe the initializer.  */\n \n static int"}]}