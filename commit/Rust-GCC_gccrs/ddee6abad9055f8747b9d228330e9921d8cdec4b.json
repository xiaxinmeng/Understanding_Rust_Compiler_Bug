{"sha": "ddee6abad9055f8747b9d228330e9921d8cdec4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRlZTZhYmFkOTA1NWY4NzQ3YjlkMjI4MzMwZTk5MjFkOGNkZWM0Yg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1996-02-12T16:51:37Z"}, "committer": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1996-02-12T16:51:37Z"}, "message": "arm.h: (CPP_SPEC): Define __ARMEB__...\n\n\t* arm/arm.h: (CPP_SPEC): Define __ARMEB__, __ARMEL__, and\n\t__ARMWEL__ depending on the endian flags passed to the compiler.\n\t(ARM_FLAG_LITTLE_WORDS): Define.\n\t(TARGET_SWITCHES): Add option -mwords-little-endian.\n\t(TARGET_LITTLE_WORDS): Define.\n\t(WORDS_BIG_ENDIAN): Select based on the endian switches.\n\t(LIBGCC2_WORDS_BIG_ENDIAN): Define based on run-time endian\n\tdefines.\n\nFrom-SVN: r11211", "tree": {"sha": "0c6acb1765b9146945bb5f25b82ba1eee5d45fdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c6acb1765b9146945bb5f25b82ba1eee5d45fdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddee6abad9055f8747b9d228330e9921d8cdec4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddee6abad9055f8747b9d228330e9921d8cdec4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddee6abad9055f8747b9d228330e9921d8cdec4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddee6abad9055f8747b9d228330e9921d8cdec4b/comments", "author": null, "committer": null, "parents": [{"sha": "c1c2bc04042f67a0e240865b919220be91c58898", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1c2bc04042f67a0e240865b919220be91c58898", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1c2bc04042f67a0e240865b919220be91c58898"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "b2cab46c7cee39f87c84b909f3c5f14ebabcbbee", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddee6abad9055f8747b9d228330e9921d8cdec4b/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddee6abad9055f8747b9d228330e9921d8cdec4b/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=ddee6abad9055f8747b9d228330e9921d8cdec4b", "patch": "@@ -61,6 +61,9 @@ extern int frame_pointer_needed;\n %{msoft-float:-D__SOFTFP__} \\\n %{mhard-float:-U__SOFTFP__} \\\n %{!mhard-float: %{!msoft-float:-U__SOFTFP__}} \\\n+%{mbig-endian:-D__ARMEB__ %{mwords-little-endian:-D__ARMWEL__}} \\\n+%{mbe:-D__ARMEB__ %{mwords-little-endian:-D__ARMWEL__}} \\\n+%{!mbe: %{!mbig-endian:-D__ARMEL__}} \\\n \"\n #endif\n \f\n@@ -131,6 +134,10 @@ extern char *target_fpe_name;\n /* Nonzero if we should compile for Thumb interworking.  */\n #define ARM_FLAG_THUMB                (0x1000)\n \n+/* Nonzero if we should have little-endian words even when compiling for\n+   big-endian (for backwards compatibility with older versions of GCC).  */\n+#define ARM_FLAG_LITTLE_WORDS\t(0x2000)\n+\n #define TARGET_APCS\t\t\t(target_flags & ARM_FLAG_APCS_FRAME)\n #define TARGET_POKE_FUNCTION_NAME\t(target_flags & ARM_FLAG_POKE)\n #define TARGET_FPE\t\t\t(target_flags & ARM_FLAG_FPE)\n@@ -145,6 +152,7 @@ extern char *target_fpe_name;\n #define TARGET_HARD_FLOAT\t\t(! TARGET_SOFT_FLOAT)\n #define TARGET_BIG_END\t\t\t(target_flags & ARM_FLAG_BIG_END)\n #define TARGET_THUMB_INTERWORK\t\t(target_flags & ARM_FLAG_THUMB)\n+#define TARGET_LITTLE_WORDS\t\t(target_flags & ARM_FLAG_LITTLE_WORDS)\n \n /* SUBTARGET_SWITCHES is used to add flags on a per-config basis.\n    Bit 31 is reserved.  See riscix.h.  */\n@@ -182,6 +190,7 @@ extern char *target_fpe_name;\n   {\"le\",\t\t       -ARM_FLAG_BIG_END},\t\\\n   {\"thumb-interwork\",\t\tARM_FLAG_THUMB},\t\\\n   {\"no-thumb-interwork\",       -ARM_FLAG_THUMB},\t\\\n+  {\"words-little-endian\",       ARM_FLAG_LITTLE_WORDS},\t\\\n   SUBTARGET_SWITCHES\t\t\t\t\t\\\n   {\"\",\t\t\t\tTARGET_DEFAULT }\t\\\n }\n@@ -318,7 +327,15 @@ extern int arm_arch4;\n /* Define this if most significant word of a multiword number is the lowest\n    numbered.\n    This is always false, even when in big-endian mode.  */\n-#define WORDS_BIG_ENDIAN  0\n+#define WORDS_BIG_ENDIAN  (BYTES_BIG_ENDIAN && ! TARGET_LITTLE_WORDS)\n+\n+/* LIBGCC2_WORDS_BIG_ENDIAN has to be a constant, so we define this based\n+   on processor pre-defineds when compiling libgcc2.c.  */\n+#if defined(__ARMEB__) && !defined(__ARMWEL__)\n+#define LIBGCC2_WORDS_BIG_ENDIAN 1\n+#else\n+#define LIBGCC2_WORDS_BIG_ENDIAN 0\n+#endif\n \n /* Define this if most significant word of doubles is the lowest numbered.\n    This is always true, even when in little-endian mode.  */"}]}