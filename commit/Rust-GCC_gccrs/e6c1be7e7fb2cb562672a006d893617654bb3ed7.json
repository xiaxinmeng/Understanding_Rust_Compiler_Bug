{"sha": "e6c1be7e7fb2cb562672a006d893617654bb3ed7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZjMWJlN2U3ZmIyY2I1NjI2NzJhMDA2ZDg5MzYxNzY1NGJiM2VkNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2000-03-13T17:34:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2000-03-13T17:34:57Z"}, "message": "sparc.md: Remove all traces of TARGET_LIVE_G0.\n\n\t* config/sparc/sparc.md: Remove all traces of TARGET_LIVE_G0.\n\t(movsi_zero_liveg0): Remove.\n\t(movsf_insn_novis_liveg0): Remove.\n\t(negsi2): Remove.\n\t(negsi2_not_liveg0): Rename to negsi2.\n\t(one_cmplsi2): Remove.\n\t(one_cmplsi2_not_liveg0): Rename to one_cmplsi2.\n\t(one_cmplsi2_liveg0): Remove.\n\t* config/sparc/sparc.h (TARGET_LIVE_G0, TARGET_BROKEN_SAVERESTORE,\n\tMASK_LIVE_G0, MASK_BROKEN_SAVERESTORE): Remove.\n\t(CONDITIONAL_REGISTER_USAGE): Remove TARGET_LIVE_G0 if.\n\t(PREDICATE_CODES): Remove zero_operand.\n\t* config/sparc/sparc.c: Remove all traces of TARGET_LIVE_G0 and\n\tTARGET_BROKEN_SAVERESTORE.\n\t(zero_operand): Remove.\n\t* config/sparc/splet.h (SUBTARGET_SWITCHES): Remove -mlive-g0,\n\t-mno-live-g0, -mbroken-saverestore and -mno-broken-saverestore\n\toptions.\n\t(SUBTARGET_OVERRIDE_OPTIONS): Remove.\n\t* config/sparc/linux-aout.h (TARGET_LIVE_G0,\n\tTARGET_BROKEN_SAVERESTORE): Remove.\n\t* config/sparc/linux.h (TARGET_LIVE_G0, TARGET_BROKEN_SAVERESTORE):\n\tRemove.\n\t* config/sparc/linux64.h (TARGET_LIVE_G0, TARGET_BROKEN_SAVERESTORE):\n\tRemove.\n\t* config/sparc/sol2.h (TARGET_LIVE_G0, TARGET_BROKEN_SAVERESTORE):\n\tRemove.\n\n\t* config/sparc/sparc.md (return_df_no_fpu): New pattern.\n\nFrom-SVN: r32508", "tree": {"sha": "42d742722fd2a9f399d37297d84e2d33ae64458a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42d742722fd2a9f399d37297d84e2d33ae64458a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6c1be7e7fb2cb562672a006d893617654bb3ed7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6c1be7e7fb2cb562672a006d893617654bb3ed7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6c1be7e7fb2cb562672a006d893617654bb3ed7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6c1be7e7fb2cb562672a006d893617654bb3ed7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0e091b520e74abfcc98cd8b55525fce0ee50b6b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e091b520e74abfcc98cd8b55525fce0ee50b6b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e091b520e74abfcc98cd8b55525fce0ee50b6b6"}], "stats": {"total": 443, "additions": 126, "deletions": 317}, "files": [{"sha": "a6faefccff4f7a03c3d6e764f752b32e3fe9d206", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6c1be7e7fb2cb562672a006d893617654bb3ed7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6c1be7e7fb2cb562672a006d893617654bb3ed7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6c1be7e7fb2cb562672a006d893617654bb3ed7", "patch": "@@ -1,3 +1,35 @@\n+2000-03-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/sparc/sparc.md: Remove all traces of TARGET_LIVE_G0.\n+\t(movsi_zero_liveg0): Remove.\n+\t(movsf_insn_novis_liveg0): Remove.\n+\t(negsi2): Remove.\n+\t(negsi2_not_liveg0): Rename to negsi2.\n+\t(one_cmplsi2): Remove.\n+\t(one_cmplsi2_not_liveg0): Rename to one_cmplsi2.\n+\t(one_cmplsi2_liveg0): Remove.\n+\t* config/sparc/sparc.h (TARGET_LIVE_G0, TARGET_BROKEN_SAVERESTORE,\n+\tMASK_LIVE_G0, MASK_BROKEN_SAVERESTORE): Remove.\n+\t(CONDITIONAL_REGISTER_USAGE): Remove TARGET_LIVE_G0 if.\n+\t(PREDICATE_CODES): Remove zero_operand.\n+\t* config/sparc/sparc.c: Remove all traces of TARGET_LIVE_G0 and\n+\tTARGET_BROKEN_SAVERESTORE.\n+\t(zero_operand): Remove.\n+\t* config/sparc/splet.h (SUBTARGET_SWITCHES): Remove -mlive-g0,\n+\t-mno-live-g0, -mbroken-saverestore and -mno-broken-saverestore\n+\toptions.\n+\t(SUBTARGET_OVERRIDE_OPTIONS): Remove.\n+\t* config/sparc/linux-aout.h (TARGET_LIVE_G0,\n+\tTARGET_BROKEN_SAVERESTORE): Remove.\n+\t* config/sparc/linux.h (TARGET_LIVE_G0, TARGET_BROKEN_SAVERESTORE):\n+\tRemove.\n+\t* config/sparc/linux64.h (TARGET_LIVE_G0, TARGET_BROKEN_SAVERESTORE):\n+\tRemove.\n+\t* config/sparc/sol2.h (TARGET_LIVE_G0, TARGET_BROKEN_SAVERESTORE):\n+\tRemove.\n+\n+\t* config/sparc/sparc.md (return_df_no_fpu): New pattern.\n+\n 2000-03-13  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* cpplib.c (do_pragma_implementation): Fix off-by-one error"}, {"sha": "8063a6c0f5ee7cd25c0d3fd8ba92fc312b69a394", "filename": "gcc/config/sparc/linux-aout.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6c1be7e7fb2cb562672a006d893617654bb3ed7/gcc%2Fconfig%2Fsparc%2Flinux-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6c1be7e7fb2cb562672a006d893617654bb3ed7/gcc%2Fconfig%2Fsparc%2Flinux-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux-aout.h?ref=e6c1be7e7fb2cb562672a006d893617654bb3ed7", "patch": "@@ -102,12 +102,6 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_SPEC \\\n   \"%{V} %{v:%{!V:-V}} %{n} %{T} %{Ym,*} %{Wa,*:%*} -s %{fpic:-K PIC} %{fPIC:-K PIC}\"\n \f\n-/* No weird SPARC variants on Linux */\n-#undef TARGET_LIVE_G0\n-#define TARGET_LIVE_G0\t\t\t0\n-#undef TARGET_BROKEN_SAVERESTORE\n-#define TARGET_BROKEN_SAVERESTORE\t0\n-\f\n /* Override MACHINE_STATE_{SAVE,RESTORE} because we have special\n    traps available which can get and set the condition codes\n    reliably.  */"}, {"sha": "75d09273e80e023b929ee84ee2d471b67a44d19d", "filename": "gcc/config/sparc/linux.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6c1be7e7fb2cb562672a006d893617654bb3ed7/gcc%2Fconfig%2Fsparc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6c1be7e7fb2cb562672a006d893617654bb3ed7/gcc%2Fconfig%2Fsparc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux.h?ref=e6c1be7e7fb2cb562672a006d893617654bb3ed7", "patch": "@@ -253,12 +253,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n #endif\n \f\n-/* No weird SPARC variants on Linux */\n-#undef TARGET_LIVE_G0\n-#define TARGET_LIVE_G0\t\t\t0\n-#undef TARGET_BROKEN_SAVERESTORE\n-#define TARGET_BROKEN_SAVERESTORE\t0\n-\f\n /* Override MACHINE_STATE_{SAVE,RESTORE} because we have special\n    traps available which can get and set the condition codes\n    reliably.  */"}, {"sha": "18a7f8b2c3440fd01f41ea03a842c8ead939af12", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6c1be7e7fb2cb562672a006d893617654bb3ed7/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6c1be7e7fb2cb562672a006d893617654bb3ed7/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=e6c1be7e7fb2cb562672a006d893617654bb3ed7", "patch": "@@ -378,12 +378,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* #define DWARF_OFFSET_SIZE PTR_SIZE */\n \f\n-/* No weird SPARC variants on Linux */\n-#undef TARGET_LIVE_G0\n-#define TARGET_LIVE_G0\t\t\t0\n-#undef TARGET_BROKEN_SAVERESTORE\n-#define TARGET_BROKEN_SAVERESTORE\t0\n-\f\n #if TARGET_ARCH32\n /* Override MACHINE_STATE_{SAVE,RESTORE} because we have special\n    traps available which can get and set the condition codes"}, {"sha": "03045247e76f17413215d02e9a21a7f1e7873546", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6c1be7e7fb2cb562672a006d893617654bb3ed7/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6c1be7e7fb2cb562672a006d893617654bb3ed7/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=e6c1be7e7fb2cb562672a006d893617654bb3ed7", "patch": "@@ -204,12 +204,6 @@ Boston, MA 02111-1307, USA.  */\n   fixunsdfdi_libfunc\t\t\t\t\t\t\t\\\n     = init_one_libfunc (TARGET_ARCH64 ? \"__dtoul\" : \"__dtoull\")\n \n-/* No weird SPARC variants on Solaris */\n-#undef TARGET_LIVE_G0\n-#define TARGET_LIVE_G0\t0\n-#undef TARGET_BROKEN_SAVERESTORE\n-#define TARGET_BROKEN_SAVERESTORE 0\n-\n /* Solaris allows 64 bit out and global registers in 32 bit mode.\n    sparc_override_options will disable V8+ if not generating V9 code.  */\n #undef TARGET_DEFAULT"}, {"sha": "f7e0c22a865f495b0815c3bfd3be920f1facecd6", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 3, "deletions": 54, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6c1be7e7fb2cb562672a006d893617654bb3ed7/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6c1be7e7fb2cb562672a006d893617654bb3ed7/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=e6c1be7e7fb2cb562672a006d893617654bb3ed7", "patch": "@@ -377,8 +377,7 @@ v9_regcmp_p (code)\n /* Operand constraints.  */\n \n /* Return non-zero only if OP is a register of mode MODE,\n-   or const0_rtx.  Don't allow const0_rtx if TARGET_LIVE_G0 because\n-   %g0 may contain anything.  */\n+   or const0_rtx.  */\n \n int\n reg_or_0_operand (op, mode)\n@@ -387,8 +386,6 @@ reg_or_0_operand (op, mode)\n {\n   if (register_operand (op, mode))\n     return 1;\n-  if (TARGET_LIVE_G0)\n-    return 0;\n   if (op == const0_rtx)\n     return 1;\n   if (GET_MODE (op) == VOIDmode && GET_CODE (op) == CONST_DOUBLE\n@@ -1132,16 +1129,6 @@ clobbered_register (op, mode)\n   return (GET_CODE (op) == REG && call_used_regs[REGNO (op)]);\n }\n \n-/* Return 1 if OP is const0_rtx, used for TARGET_LIVE_G0 insns.  */\n-\n-int\n-zero_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n-{\n-  return op == const0_rtx;\n-}\n-\n /* Return 1 if OP is a valid operand for the source of a move insn.  */\n \n int\n@@ -2369,12 +2356,6 @@ eligible_for_epilogue_delay (trial, slot)\n   if (get_attr_length (trial) != 1)\n     return 0;\n \n-  /* If %g0 is live, there are lots of things we can't handle.\n-     Rather than trying to find them all now, let's punt and only\n-     optimize things as necessary.  */\n-  if (TARGET_LIVE_G0)\n-    return 0;\n-    \n   /* If there are any call-saved registers, we should scan TRIAL if it\n      does not reference them.  For now just make it easy.  */\n   if (num_gfregs)\n@@ -2391,11 +2372,6 @@ eligible_for_epilogue_delay (trial, slot)\n       return 0;\n     }\n \n-  /* If only trivial `restore' insns work, nothing can go in the\n-     delay slot.  */\n-  else if (TARGET_BROKEN_SAVERESTORE)\n-    return 0;\n-\n   pat = PATTERN (trial);\n \n   /* Otherwise, only operations which can be done in tandem with\n@@ -3342,7 +3318,7 @@ output_function_prologue (file, size, leaf_function)\n \n   if (actual_fsize == 0)\n     /* do nothing.  */ ;\n-  else if (! leaf_function && ! TARGET_BROKEN_SAVERESTORE)\n+  else if (! leaf_function)\n     {\n       if (actual_fsize <= 4096)\n \tfprintf (file, \"\\tsave\\t%%sp, -%d, %%sp\\n\", actual_fsize);\n@@ -3357,26 +3333,6 @@ output_function_prologue (file, size, leaf_function)\n \t  fprintf (file, \"\\tsave\\t%%sp, %%g1, %%sp\\n\");\n \t}\n     }\n-  else if (! leaf_function && TARGET_BROKEN_SAVERESTORE)\n-    {\n-      /* We assume the environment will properly handle or otherwise avoid\n-\t trouble associated with an interrupt occurring after the `save' or\n-\t trap occurring during it.  */\n-      fprintf (file, \"\\tsave\\n\");\n-\n-      if (actual_fsize <= 4096)\n-\tfprintf (file, \"\\tadd\\t%%fp, -%d, %%sp\\n\", actual_fsize);\n-      else if (actual_fsize <= 8192)\n-\t{\n-\t  fprintf (file, \"\\tadd\\t%%fp, -4096, %%sp\\n\");\n-\t  fprintf (file, \"\\tadd\\t%%fp, -%d, %%sp\\n\", actual_fsize - 4096);\n-\t}\n-      else\n-\t{\n-\t  build_big_number (file, -actual_fsize, \"%g1\");\n-\t  fprintf (file, \"\\tadd\\t%%fp, %%g1, %%sp\\n\");\n-\t}\n-    }\n   else /* leaf function */\n     {\n       if (actual_fsize <= 4096)\n@@ -5632,8 +5588,7 @@ print_operand (file, x, code)\n     {\n       fputc ('[', file);\n \t/* Poor Sun assembler doesn't understand absolute addressing.  */\n-      if (CONSTANT_P (XEXP (x, 0))\n-\t  && ! TARGET_LIVE_G0)\n+      if (CONSTANT_P (XEXP (x, 0)))\n \tfputs (\"%g0+\", file);\n       output_address (XEXP (x, 0));\n       fputc (']', file);\n@@ -6660,12 +6615,6 @@ sparc_flat_eligible_for_epilogue_delay (trial, slot)\n   if (get_attr_length (trial) != 1)\n     return 0;\n \n-  /* If %g0 is live, there are lots of things we can't handle.\n-     Rather than trying to find them all now, let's punt and only\n-     optimize things as necessary.  */\n-  if (TARGET_LIVE_G0)\n-    return 0;\n-\n   if (! reg_mentioned_p (stack_pointer_rtx, pat)\n       && ! reg_mentioned_p (frame_pointer_rtx, pat))\n     return 1;"}, {"sha": "1f8b61f6d9fa3e4f9362322be319e16f2cd0c573", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6c1be7e7fb2cb562672a006d893617654bb3ed7/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6c1be7e7fb2cb562672a006d893617654bb3ed7/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=e6c1be7e7fb2cb562672a006d893617654bb3ed7", "patch": "@@ -522,20 +522,7 @@ extern int target_flags;\n #define MASK_STACK_BIAS 0x80000\n #define TARGET_STACK_BIAS (target_flags & MASK_STACK_BIAS)\n \n-/* Non-zero means %g0 is a normal register.\n-   We still clobber it as necessary, but we can't rely on it always having\n-   a zero value.\n-   We don't bother to support this in true 64 bit mode.  */\n-#define MASK_LIVE_G0 0x100000\n-#define TARGET_LIVE_G0 (target_flags & MASK_LIVE_G0)\n-\n-/* Non-zero means the cpu has broken `save' and `restore' insns, only\n-   the trivial versions work (save %g0,%g0,%g0; restore %g0,%g0,%g0).\n-   We assume the environment will properly handle or otherwise avoid\n-   trouble associated with an interrupt occurring after the `save' or trap\n-   occurring during it.  */\n-#define MASK_BROKEN_SAVERESTORE 0x200000\n-#define TARGET_BROKEN_SAVERESTORE (target_flags & MASK_BROKEN_SAVERESTORE)\n+/* 0x100000,0x200000 unused */\n \n /* Non-zero means -m{,no-}fpu was passed on the command line.  */\n #define MASK_FPU_SET 0x400000\n@@ -1042,8 +1029,6 @@ do\t\t\t\t\t\t\t\t\\\n       fixed_regs[5] = 1;\t\t\t\t\t\\\n     else if (TARGET_ARCH64 && fixed_regs[5] == 2)\t\t\\\n       fixed_regs[5] = 0;\t\t\t\t\t\\\n-    if (TARGET_LIVE_G0)\t\t\t\t\t\t\\\n-      fixed_regs[0] = 0;\t\t\t\t\t\\\n     if (! TARGET_V9)\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\\\n \tint regno;\t\t\t\t\t\t\\\n@@ -3370,7 +3355,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n {\"uns_arith_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\\\n {\"clobbered_register\", {REG}},\t\t\t\t\t\t\\\n {\"input_operand\", {SUBREG, REG, CONST_INT, MEM, CONST}},\t\t\\\n-{\"zero_operand\", {CONST_INT}},\t\t\t\t\t\t\\\n {\"const64_operand\", {CONST_INT, CONST_DOUBLE}},\t\t\t\t\\\n {\"const64_high_operand\", {CONST_INT, CONST_DOUBLE}},\n "}, {"sha": "efa572c9b50ca4f8094b019f507e0d21132b2af0", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 89, "deletions": 198, "changes": 287, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6c1be7e7fb2cb562672a006d893617654bb3ed7/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6c1be7e7fb2cb562672a006d893617654bb3ed7/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=e6c1be7e7fb2cb562672a006d893617654bb3ed7", "patch": "@@ -58,9 +58,6 @@\n ;; is a bit of a misnomer as it covers all 64 fp regs.  The corresponding\n ;; constraint letter is 'e'.  To avoid any confusion, 'e' is used instead of\n ;; 'f' for all DF/TFmode values, including those that are specific to the v8.\n-;;\n-;; -mlive-g0 is *not* supported for TARGET_ARCH64, so we don't bother to\n-;; test TARGET_LIVE_G0 if we have TARGET_ARCH64.\n \n ;; Attribute for cpu type.\n ;; These must match the values for enum processor_type in sparc.h.\n@@ -83,12 +80,6 @@\n   (cond [(symbol_ref \"TARGET_ARCH64\") (const_string \"arch64bit\")]\n \t(const_string \"arch32bit\"))))\n \n-;; Whether -mlive-g0 is in effect.\n-(define_attr \"live_g0\" \"no,yes\"\n- (const\n-  (cond [(symbol_ref \"TARGET_LIVE_G0\") (const_string \"yes\")]\n-\t(const_string \"no\"))))\n-\n ;; Insn type.  Used to default other attribute values.\n \n ;; type \"unary\" insns have one input operand (1) and one output operand (0)\n@@ -749,7 +740,7 @@\n    (parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t\t   (eq:SI (match_dup 3) (const_int 0)))\n \t      (clobber (reg:CC 100))])]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"{ operands[3] = gen_reg_rtx (SImode); }\")\n \n (define_expand \"seqdi_special\"\n@@ -768,7 +759,7 @@\n    (parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t\t   (ne:SI (match_dup 3) (const_int 0)))\n \t      (clobber (reg:CC 100))])]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"{ operands[3] = gen_reg_rtx (SImode); }\")\n \n (define_expand \"snedi_special\"\n@@ -823,7 +814,7 @@\n (define_expand \"seq\"\n   [(set (match_operand:SI 0 \"intreg_operand\" \"\")\n \t(eq:SI (match_dup 1) (const_int 0)))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"\n {\n   if (GET_MODE (sparc_compare_op0) == SImode)\n@@ -876,7 +867,7 @@\n (define_expand \"sne\"\n   [(set (match_operand:SI 0 \"intreg_operand\" \"\")\n \t(ne:SI (match_dup 1) (const_int 0)))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"\n {\n   if (GET_MODE (sparc_compare_op0) == SImode)\n@@ -927,7 +918,7 @@\n (define_expand \"sgt\"\n   [(set (match_operand:SI 0 \"intreg_operand\" \"\")\n \t(gt:SI (match_dup 1) (const_int 0)))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"\n {\n   if (GET_MODE (sparc_compare_op0) == TFmode && ! TARGET_HARD_QUAD)\n@@ -948,7 +939,7 @@\n (define_expand \"slt\"\n   [(set (match_operand:SI 0 \"intreg_operand\" \"\")\n \t(lt:SI (match_dup 1) (const_int 0)))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"\n {\n   if (GET_MODE (sparc_compare_op0) == TFmode && ! TARGET_HARD_QUAD)\n@@ -969,7 +960,7 @@\n (define_expand \"sge\"\n   [(set (match_operand:SI 0 \"intreg_operand\" \"\")\n \t(ge:SI (match_dup 1) (const_int 0)))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"\n {\n   if (GET_MODE (sparc_compare_op0) == TFmode && ! TARGET_HARD_QUAD)\n@@ -990,7 +981,7 @@\n (define_expand \"sle\"\n   [(set (match_operand:SI 0 \"intreg_operand\" \"\")\n \t(le:SI (match_dup 1) (const_int 0)))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"\n {\n   if (GET_MODE (sparc_compare_op0) == TFmode && ! TARGET_HARD_QUAD)\n@@ -1011,7 +1002,7 @@\n (define_expand \"sgtu\"\n   [(set (match_operand:SI 0 \"intreg_operand\" \"\")\n \t(gtu:SI (match_dup 1) (const_int 0)))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"\n {\n   if (! TARGET_V9)\n@@ -1046,7 +1037,7 @@\n (define_expand \"sltu\"\n   [(set (match_operand:SI 0 \"intreg_operand\" \"\")\n \t(ltu:SI (match_dup 1) (const_int 0)))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"\n {\n   if (TARGET_V9)\n@@ -1060,7 +1051,7 @@\n (define_expand \"sgeu\"\n   [(set (match_operand:SI 0 \"intreg_operand\" \"\")\n \t(geu:SI (match_dup 1) (const_int 0)))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"\n {\n   if (TARGET_V9)\n@@ -1074,7 +1065,7 @@\n (define_expand \"sleu\"\n   [(set (match_operand:SI 0 \"intreg_operand\" \"\")\n \t(leu:SI (match_dup 1) (const_int 0)))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"\n {\n   if (! TARGET_V9)\n@@ -1118,7 +1109,7 @@\n \t(ne:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t       (const_int 0)))\n    (clobber (reg:CC 100))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"#\"\n   [(set_attr \"length\" \"2\")])\n \n@@ -1138,7 +1129,7 @@\n \t(neg:SI (ne:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t       (const_int 0))))\n    (clobber (reg:CC 100))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"#\"\n   [(set_attr \"length\" \"2\")])\n \n@@ -1245,7 +1236,7 @@\n \t(eq:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t       (const_int 0)))\n    (clobber (reg:CC 100))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"#\"\n   [(set_attr \"length\" \"2\")])\n \n@@ -1265,7 +1256,7 @@\n \t(neg:SI (eq:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t       (const_int 0))))\n    (clobber (reg:CC 100))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"#\"\n   [(set_attr \"length\" \"2\")])\n \n@@ -1377,7 +1368,7 @@\n \t\t\t(const_int 0))\n \t\t (match_operand:SI 2 \"register_operand\" \"r\")))\n    (clobber (reg:CC 100))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"#\"\n   [(set_attr \"length\" \"2\")])\n \n@@ -1387,7 +1378,7 @@\n \t\t\t(const_int 0))\n \t\t (match_operand:SI 2 \"register_operand\" \"\")))\n    (clobber (reg:CC 100))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   [(set (reg:CC_NOOV 100) (compare:CC_NOOV (neg:SI (match_dup 1))\n \t\t\t\t\t   (const_int 0)))\n    (set (match_dup 0) (plus:SI (ltu:SI (reg:CC 100) (const_int 0))\n@@ -1400,7 +1391,7 @@\n \t\t  (ne:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t (const_int 0))))\n    (clobber (reg:CC 100))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"#\"\n   [(set_attr \"length\" \"2\")])\n \n@@ -1410,7 +1401,7 @@\n \t\t  (ne:SI (match_operand:SI 1 \"register_operand\" \"\")\n \t\t\t (const_int 0))))\n    (clobber (reg:CC 100))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   [(set (reg:CC_NOOV 100) (compare:CC_NOOV (neg:SI (match_dup 1))\n \t\t\t\t\t   (const_int 0)))\n    (set (match_dup 0) (minus:SI (match_dup 2)\n@@ -1423,7 +1414,7 @@\n \t\t\t(const_int 0))\n \t\t (match_operand:SI 2 \"register_operand\" \"r\")))\n    (clobber (reg:CC 100))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"#\"\n   [(set_attr \"length\" \"2\")])\n \n@@ -1433,7 +1424,7 @@\n \t\t\t(const_int 0))\n \t\t (match_operand:SI 2 \"register_operand\" \"\")))\n    (clobber (reg:CC 100))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   [(set (reg:CC_NOOV 100) (compare:CC_NOOV (neg:SI (match_dup 1))\n \t\t\t\t\t   (const_int 0)))\n    (set (match_dup 0) (plus:SI (geu:SI (reg:CC 100) (const_int 0))\n@@ -1446,7 +1437,7 @@\n \t\t  (eq:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t (const_int 0))))\n    (clobber (reg:CC 100))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"#\"\n   [(set_attr \"length\" \"2\")])\n \n@@ -1456,7 +1447,7 @@\n \t\t  (eq:SI (match_operand:SI 1 \"register_operand\" \"\")\n \t\t\t (const_int 0))))\n    (clobber (reg:CC 100))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   [(set (reg:CC_NOOV 100) (compare:CC_NOOV (neg:SI (match_dup 1))\n \t\t\t\t\t   (const_int 0)))\n    (set (match_dup 0) (minus:SI (match_dup 2)\n@@ -1470,15 +1461,15 @@\n (define_insn \"*sltu_insn\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(ltu:SI (reg:CC 100) (const_int 0)))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"addx\\\\t%%g0, 0, %0\"\n   [(set_attr \"type\" \"misc\")\n    (set_attr \"length\" \"1\")])\n \n (define_insn \"*neg_sltu_insn\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(neg:SI (ltu:SI (reg:CC 100) (const_int 0))))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"subx\\\\t%%g0, 0, %0\"\n   [(set_attr \"type\" \"misc\")\n    (set_attr \"length\" \"1\")])\n@@ -1488,7 +1479,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(minus:SI (neg:SI (ltu:SI (reg:CC 100) (const_int 0)))\n \t\t  (match_operand:SI 1 \"arith_operand\" \"rI\")))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"subx\\\\t%%g0, %1, %0\"\n   [(set_attr \"type\" \"misc\")\n    (set_attr \"length\" \"1\")])\n@@ -1497,23 +1488,23 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(neg:SI (plus:SI (ltu:SI (reg:CC 100) (const_int 0))\n \t\t\t (match_operand:SI 1 \"arith_operand\" \"rI\"))))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"subx\\\\t%%g0, %1, %0\"\n   [(set_attr \"type\" \"misc\")\n    (set_attr \"length\" \"1\")])\n \n (define_insn \"*sgeu_insn\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(geu:SI (reg:CC 100) (const_int 0)))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"subx\\\\t%%g0, -1, %0\"\n   [(set_attr \"type\" \"misc\")\n    (set_attr \"length\" \"1\")])\n \n (define_insn \"*neg_sgeu_insn\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(neg:SI (geu:SI (reg:CC 100) (const_int 0))))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"addx\\\\t%%g0, -1, %0\"\n   [(set_attr \"type\" \"misc\")\n    (set_attr \"length\" \"1\")])\n@@ -1526,7 +1517,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(plus:SI (ltu:SI (reg:CC 100) (const_int 0))\n \t\t (match_operand:SI 1 \"arith_operand\" \"rI\")))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"addx\\\\t%%g0, %1, %0\"\n   [(set_attr \"type\" \"misc\")\n    (set_attr \"length\" \"1\")])\n@@ -2119,7 +2110,6 @@\n   /* Handle sets of MEM first.  */\n   if (GET_CODE (operands[0]) == MEM)\n     {\n-      /* This checks TARGET_LIVE_G0 for us.  */\n       if (reg_or_0_operand (operands[1], QImode))\n \tgoto movqi_is_ok;\n \n@@ -2180,7 +2170,6 @@\n   /* Handle sets of MEM first.  */\n   if (GET_CODE (operands[0]) == MEM)\n     {\n-      /* This checks TARGET_LIVE_G0 for us.  */\n       if (reg_or_0_operand (operands[1], HImode))\n \tgoto movhi_is_ok;\n \n@@ -2268,7 +2257,6 @@\n   /* Handle sets of MEM first.  */\n   if (GET_CODE (operands[0]) == MEM)\n     {\n-      /* This checks TARGET_LIVE_G0 for us.  */\n       if (reg_or_0_operand (operands[1], SImode))\n \tgoto movsi_is_ok;\n \n@@ -2327,15 +2315,6 @@\n   ;\n }\")\n \n-;; Special LIVE_G0 pattern to obtain zero in a register.\n-(define_insn \"*movsi_zero_liveg0\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (match_operand:SI 1 \"zero_operand\" \"J\"))]\n-  \"TARGET_LIVE_G0\"\n-  \"and\\\\t%0, 0, %0\"\n-  [(set_attr \"type\" \"binary\")\n-   (set_attr \"length\" \"1\")])\n-\n ;; This is needed to show CSE exactly which bits are set\n ;; in a 64-bit register by sethi instructions.\n (define_insn \"*movsi_const64_special\"\n@@ -2974,56 +2953,10 @@\n \f\n ;; Floating point move insns\n \n-(define_insn \"*movsf_insn_novis_liveg0\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f,*r,*r,*r,*r,*r,f,m,m\")\n-\t(match_operand:SF 1 \"input_operand\"         \"f,G,Q,*rR,S,m,m,f,*r\"))]\n-  \"(TARGET_FPU && ! TARGET_VIS && TARGET_LIVE_G0)\n-   && (register_operand (operands[0], SFmode)\n-       || register_operand (operands[1], SFmode))\"\n-  \"*\n-{\n-  if (GET_CODE (operands[1]) == CONST_DOUBLE\n-      && (which_alternative == 2\n-          || which_alternative == 3\n-          || which_alternative == 4))\n-    {\n-      REAL_VALUE_TYPE r;\n-      long i;\n-\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n-      REAL_VALUE_TO_TARGET_SINGLE (r, i);\n-      operands[1] = GEN_INT (i);\n-    }\n-\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return \\\"fmovs\\\\t%1, %0\\\";\n-    case 1:\n-      return \\\"and\\\\t%0, 0, %0\\\";\n-    case 2:\n-      return \\\"sethi\\\\t%%hi(%a1), %0\\\";\n-    case 3:\n-      return \\\"mov\\\\t%1, %0\\\";\n-    case 4:\n-      return \\\"#\\\";\n-    case 5:\n-    case 6:\n-      return \\\"ld\\\\t%1, %0\\\";\n-    case 7:\n-    case 8:\n-      return \\\"st\\\\t%1, %0\\\";\n-    default:\n-      abort();\n-    }\n-}\"\n-  [(set_attr \"type\" \"fpmove,move,move,move,*,load,fpload,fpstore,store\")\n-   (set_attr \"length\" \"1\")])\n-\n-(define_insn \"*movsf_insn_novis_noliveg0\"\n+(define_insn \"*movsf_insn_novis\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f,*r,*r,*r,*r,*r,f,m,m\")\n \t(match_operand:SF 1 \"input_operand\"         \"f,G,Q,*rR,S,m,m,f,*rG\"))]\n-  \"(TARGET_FPU && ! TARGET_VIS && ! TARGET_LIVE_G0)\n+  \"(TARGET_FPU && ! TARGET_VIS)\n    && (register_operand (operands[0], SFmode)\n        || register_operand (operands[1], SFmode)\n        || fp_zero_operand (operands[1], SFmode))\"\n@@ -3204,7 +3137,7 @@\n   if (GET_CODE (operands[0]) == MEM)\n     {\n       if (register_operand (operands[1], SFmode)\n-\t  || (! TARGET_LIVE_G0 && fp_zero_operand (operands[1], SFmode)))\n+\t  || fp_zero_operand (operands[1], SFmode))\n \tgoto movsf_is_ok;\n \n       if (! reload_in_progress)\n@@ -3246,7 +3179,7 @@\n (define_insn \"*clear_dfp\"\n   [(set (match_operand:DF 0 \"memory_operand\" \"=m\")\n         (match_operand:DF 1 \"fp_zero_operand\" \"\"))]\n-  \"! TARGET_LIVE_G0 && TARGET_V9\"\n+  \"TARGET_V9\"\n   \"stx\\\\t%%g0, %0\"\n   [(set_attr \"type\" \"store\")\n    (set_attr \"length\" \"1\")])\n@@ -3623,15 +3556,15 @@\n (define_insn \"*clear_tfp\"\n   [(set (match_operand:TF 0 \"memory_operand\" \"=m\")\n         (match_operand:TF 1 \"fp_zero_operand\" \"\"))]\n-  \"! TARGET_LIVE_G0 && TARGET_V9\"\n+  \"TARGET_V9\"\n   \"#\"\n   [(set_attr \"type\" \"fpmove\")\n    (set_attr \"length\" \"2\")])\n \n (define_split\n   [(set (match_operand:TF 0 \"memory_operand\" \"=m\")\n         (match_operand:TF 1 \"fp_zero_operand\" \"\"))]\n-  \"! TARGET_LIVE_G0 && TARGET_V9 && reload_completed\"\n+  \"TARGET_V9 && reload_completed\"\n   [(set (subreg:DF (match_dup 0) 0) (match_dup 1))\n    (set (subreg:DF (match_dup 0) 8) (match_dup 1))]\n   \"\n@@ -4607,7 +4540,7 @@\n   [(set (reg:CC 100)\n \t(compare:CC (zero_extend:SI (match_operand:QI 0 \"register_operand\" \"r\"))\n \t\t    (const_int 0)))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"andcc\\\\t%0, 0xff, %%g0\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"1\")])\n@@ -4616,7 +4549,7 @@\n   [(set (reg:CC 100)\n \t(compare:CC (match_operand:QI 0 \"register_operand\" \"r\")\n \t\t    (const_int 0)))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"andcc\\\\t%0, 0xff, %%g0\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"1\")])\n@@ -4691,7 +4624,7 @@\n   [(set (reg:CC 100)\n \t(compare:CC (subreg:QI (match_operand:SI 0 \"register_operand\" \"r\") 0)\n \t\t    (const_int 0)))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"andcc\\\\t%0, 0xff, %%g0\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"1\")])\n@@ -4916,11 +4849,10 @@\n \t\t\t  (match_operand:SI 1 \"small_int_or_double\" \"n\")\n \t\t\t  (match_operand:SI 2 \"small_int_or_double\" \"n\"))\n \t (const_int 0)))]\n-  \"! TARGET_LIVE_G0\n-   && ((GET_CODE (operands[2]) == CONST_INT\n-        && INTVAL (operands[2]) > 19)\n-       || (GET_CODE (operands[2]) == CONST_DOUBLE\n-           && CONST_DOUBLE_LOW (operands[2]) > 19))\"\n+  \"(GET_CODE (operands[2]) == CONST_INT\n+    && INTVAL (operands[2]) > 19)\n+   || (GET_CODE (operands[2]) == CONST_DOUBLE\n+       && CONST_DOUBLE_LOW (operands[2]) > 19)\"\n   \"*\n {\n   int len = (GET_CODE (operands[1]) == CONST_INT\n@@ -5686,7 +5618,7 @@\n \t(compare:CC_NOOV (plus:SI (match_operand:SI 0 \"arith_operand\" \"%r\")\n \t\t\t\t  (match_operand:SI 1 \"arith_operand\" \"rI\"))\n \t\t\t (const_int 0)))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"addcc\\\\t%0, %1, %%g0\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"1\")])\n@@ -5885,7 +5817,7 @@\n \t(compare:CC_NOOV (minus:SI (match_operand:SI 0 \"reg_or_0_operand\" \"rJ\")\n \t\t\t\t   (match_operand:SI 1 \"arith_operand\" \"rI\"))\n \t\t\t (const_int 0)))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"subcc\\\\t%r0, %1, %%g0\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"1\")])\n@@ -6175,7 +6107,7 @@\n \t (lshiftrt:DI (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t\t       (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"r\")))\n \t\t      (const_int 32))))]\n-  \"TARGET_HARD_MUL32 && ! TARGET_LIVE_G0\"\n+  \"TARGET_HARD_MUL32\"\n   \"smul\\\\t%1, %2, %%g0\\\\n\\\\trd\\\\t%%y, %0\"\n   [(set_attr \"length\" \"2\")])\n \n@@ -6186,7 +6118,7 @@\n \t (lshiftrt:DI (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t\t       (match_operand:SI 2 \"register_operand\" \"r\"))\n \t\t      (const_int 32))))]\n-  \"TARGET_HARD_MUL32 && ! TARGET_LIVE_G0\"\n+  \"TARGET_HARD_MUL32\"\n   \"smul\\\\t%1, %2, %%g0\\\\n\\\\trd\\\\t%%y, %0\"\n   [(set_attr \"length\" \"2\")])\n \n@@ -6349,7 +6281,7 @@\n \t (lshiftrt:DI (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t\t       (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"r\")))\n \t\t      (const_int 32))))]\n-  \"TARGET_HARD_MUL32 && ! TARGET_LIVE_G0\"\n+  \"TARGET_HARD_MUL32\"\n   \"umul\\\\t%1, %2, %%g0\\\\n\\\\trd\\\\t%%y, %0\"\n   [(set_attr \"length\" \"2\")])\n \n@@ -6360,7 +6292,7 @@\n \t (lshiftrt:DI (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t\t       (match_operand:SI 2 \"uns_small_int\" \"\"))\n \t\t      (const_int 32))))]\n-  \"TARGET_HARD_MUL32 && ! TARGET_LIVE_G0\"\n+  \"TARGET_HARD_MUL32\"\n   \"umul\\\\t%1, %2, %%g0\\\\n\\\\trd\\\\t%%y, %0\"\n   [(set_attr \"length\" \"2\")])\n \n@@ -6450,7 +6382,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(udiv:SI (match_operand:SI 1 \"reg_or_nonsymb_mem_operand\" \"\")\n \t\t (match_operand:SI 2 \"input_operand\" \"\")))]\n-  \"(TARGET_V8 || TARGET_DEPRECATED_V8_INSNS) && ! TARGET_LIVE_G0\"\n+  \"TARGET_V8 || TARGET_DEPRECATED_V8_INSNS\"\n   \"\")\n \n (define_insn \"udivsi3_sp32\"\n@@ -6459,7 +6391,7 @@\n \t\t (match_operand:SI 2 \"input_operand\" \"rI,m,r\")))]\n   \"(TARGET_V8\n     || TARGET_DEPRECATED_V8_INSNS)\n-   && TARGET_ARCH32 && ! TARGET_LIVE_G0\"\n+   && TARGET_ARCH32\"\n   \"*\n {\n   output_asm_insn (\\\"wr\\\\t%%g0, %%g0, %%y\\\", operands);\n@@ -6497,9 +6429,8 @@\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(udiv:SI (match_dup 1) (match_dup 2)))]\n-  \"(TARGET_V8\n-    || TARGET_DEPRECATED_V8_INSNS)\n-   && ! TARGET_LIVE_G0\"\n+  \"TARGET_V8\n+   || TARGET_DEPRECATED_V8_INSNS\"\n   \"*\n {\n   if (TARGET_V9)\n@@ -6953,7 +6884,7 @@\n \t\t\t    [(match_operand:SI 0 \"arith_operand\" \"%r\")\n \t\t\t     (match_operand:SI 1 \"arith_operand\" \"rI\")])\n \t (const_int 0)))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"%A2cc\\\\t%0, %1, %%g0\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"1\")])\n@@ -7004,7 +6935,7 @@\n \t (not:SI (xor:SI (match_operand:SI 0 \"reg_or_0_operand\" \"%rJ\")\n \t\t\t (match_operand:SI 1 \"arith_operand\" \"rI\")))\n \t (const_int 0)))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"xnorcc\\\\t%r0, %1, %%g0\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"1\")])\n@@ -7053,7 +6984,7 @@\n \t\t\t    [(not:SI (match_operand:SI 0 \"arith_operand\" \"rI\"))\n \t\t\t     (match_operand:SI 1 \"reg_or_0_operand\" \"rJ\")])\n \t (const_int 0)))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"%B2cc\\\\t%r1, %0, %%g0\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"1\")])\n@@ -7125,8 +7056,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(neg:DI (match_operand:DI 1 \"register_operand\" \"r\")))\n    (clobber (reg:CC 100))]\n-  \"! TARGET_ARCH64\n-   && ! TARGET_LIVE_G0\"\n+  \"TARGET_ARCH32\"\n   \"#\"\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"2\")])\n@@ -7135,8 +7065,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n         (neg:DI (match_operand:DI 1 \"register_operand\" \"\")))\n    (clobber (reg:CC 100))]\n-  \"! TARGET_ARCH64\n-   && ! TARGET_LIVE_G0\n+  \"TARGET_ARCH32\n    && reload_completed\"\n   [(parallel [(set (reg:CC_NOOV 100)\n                    (compare:CC_NOOV (minus:SI (const_int 0) (match_dup 5))\n@@ -7157,28 +7086,10 @@\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"1\")])\n \n-(define_expand \"negsi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-        (neg:SI (match_operand:SI 1 \"arith_operand\" \"\")))]\n-  \"\"\n-  \"\n-{\n-  if (TARGET_LIVE_G0)\n-    {\n-      rtx zero_reg = gen_reg_rtx (SImode);\n-\n-      emit_insn (gen_rtx_SET (VOIDmode, zero_reg, const0_rtx));\n-      emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n-                                      gen_rtx_MINUS (SImode, zero_reg,\n-                                                             operands[1])));\n-      DONE;\n-    }\n-}\")\n-\n-(define_insn \"*negsi2_not_liveg0\"\n+(define_insn \"negsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(neg:SI (match_operand:SI 1 \"arith_operand\" \"rI\")))]\n-  \"! TARGET_LIVE_G0\"\n+        (neg:SI (match_operand:SI 1 \"arith_operand\" \"rI\")))]\n+  \"\"\n   \"sub\\\\t%%g0, %1, %0\"\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"1\")])\n@@ -7187,7 +7098,7 @@\n   [(set (reg:CC_NOOV 100)\n \t(compare:CC_NOOV (neg:SI (match_operand:SI 0 \"arith_operand\" \"rI\"))\n \t\t\t (const_int 0)))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"subcc\\\\t%%g0, %0, %%g0\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"1\")])\n@@ -7207,7 +7118,7 @@\n \t\t\t (const_int 0)))\n    (set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(neg:SI (match_dup 1)))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"subcc\\\\t%%g0, %1, %0\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"1\")])\n@@ -7270,53 +7181,21 @@\n   [(set_attr \"type\" \"unary,fp\")\n    (set_attr \"length\" \"1\")])\n \n-(define_expand \"one_cmplsi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-        (not:SI (match_operand:SI 1 \"arith_operand\" \"\")))]\n-  \"\"\n-  \"\n-{\n-  if (TARGET_LIVE_G0\n-      && GET_CODE (operands[1]) == CONST_INT)\n-    {\n-      rtx zero_reg = gen_reg_rtx (SImode);\n-\n-      emit_insn (gen_rtx_SET (VOIDmode, zero_reg, const0_rtx));\n-      emit_insn (gen_rtx_SET (VOIDmode,\n-                              operands[0],\n-                              gen_rtx_NOT (SImode,\n-                                           gen_rtx_XOR (SImode,\n-                                                        zero_reg,\n-                                                        operands[1]))));\n-      DONE;\n-    }\n-}\")\n-\n-(define_insn \"*one_cmplsi2_not_liveg0\"\n+(define_insn \"one_cmplsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,d\")\n \t(not:SI (match_operand:SI 1 \"arith_operand\" \"rI,d\")))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"@\n   xnor\\\\t%%g0, %1, %0\n   fnot1s\\\\t%1, %0\"\n   [(set_attr \"type\" \"unary,fp\")\n    (set_attr \"length\" \"1,1\")])\n \n-(define_insn \"*one_cmplsi2_liveg0\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,d\")\n-\t(not:SI (match_operand:SI 1 \"arith_operand\" \"r,d\")))]\n-  \"TARGET_LIVE_G0\"\n-  \"@\n-  xnor\\\\t%1, 0, %0\n-  fnot1s\\\\t%1, %0\"\n-  [(set_attr \"type\" \"unary,fp\")\n-   (set_attr \"length\" \"1,1\")])\n-\n (define_insn \"*cmp_cc_not\"\n   [(set (reg:CC 100)\n \t(compare:CC (not:SI (match_operand:SI 0 \"arith_operand\" \"rI\"))\n \t\t    (const_int 0)))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"xnorcc\\\\t%%g0, %0, %%g0\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"1\")])\n@@ -7336,7 +7215,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(not:SI (match_dup 1)))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"xnorcc\\\\t%%g0, %1, %0\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"1\")])\n@@ -8054,7 +7933,7 @@\n \t(compare:CC_NOOV (ashift:SI (match_operand:SI 0 \"register_operand\" \"r\")\n \t\t\t\t    (const_int 1))\n \t\t\t (const_int 0)))]\n-  \"! TARGET_LIVE_G0\"\n+  \"\"\n   \"addcc\\\\t%0, %0, %%g0\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"1\")])\n@@ -8955,8 +8834,6 @@\n   \"TARGET_SPARCLITE || TARGET_SPARCLET\"\n   \"*\n {\n-  if (TARGET_LIVE_G0)\n-    output_asm_insn (\\\"and %%g0,0,%%g0\\\", operands);\n   return \\\"sub %%g0,%1,%0\\;and %0,%1,%0\\;scan %0,0,%0\\;mov 32,%2\\;sub %2,%0,%0\\;sra %0,31,%2\\;and %2,31,%2\\;add %2,%0,%0\\\";\n }\"\n   [(set_attr \"type\" \"multi\")\n@@ -9131,7 +9008,7 @@\n   [(set (match_operand:QI 0 \"restore_operand\" \"\")\n \t(match_operand:QI 1 \"arith_operand\" \"rI\"))\n    (return)]\n-  \"! TARGET_EPILOGUE && ! TARGET_LIVE_G0\"\n+  \"! TARGET_EPILOGUE\"\n   \"*\n {\n   if (! TARGET_ARCH64 && current_function_returns_struct)\n@@ -9148,7 +9025,7 @@\n   [(set (match_operand:HI 0 \"restore_operand\" \"\")\n \t(match_operand:HI 1 \"arith_operand\" \"rI\"))\n    (return)]\n-  \"! TARGET_EPILOGUE && ! TARGET_LIVE_G0\"\n+  \"! TARGET_EPILOGUE\"\n   \"*\n {\n   if (! TARGET_ARCH64 && current_function_returns_struct)\n@@ -9165,7 +9042,7 @@\n   [(set (match_operand:SI 0 \"restore_operand\" \"\")\n \t(match_operand:SI 1 \"arith_operand\" \"rI\"))\n    (return)]\n-  \"! TARGET_EPILOGUE && ! TARGET_LIVE_G0\"\n+  \"! TARGET_EPILOGUE\"\n   \"*\n {\n   if (! TARGET_ARCH64 && current_function_returns_struct)\n@@ -9186,7 +9063,7 @@\n   [(set (match_operand:SF 0 \"restore_operand\" \"=r\")\n \t(match_operand:SF 1 \"register_operand\" \"r\"))\n    (return)]\n-  \"! TARGET_EPILOGUE && ! TARGET_LIVE_G0\"\n+  \"! TARGET_EPILOGUE\"\n   \"*\n {\n   if (! TARGET_ARCH64 && current_function_returns_struct)\n@@ -9198,12 +9075,26 @@\n }\"\n   [(set_attr \"type\" \"multi\")])\n \n+(define_insn \"*return_df_no_fpu\"\n+  [(set (match_operand:DF 0 \"restore_operand\" \"=r\")\n+\t(match_operand:DF 1 \"register_operand\" \"r\"))\n+   (return)]\n+  \"! TARGET_EPILOGUE && TARGET_ARCH64\"\n+  \"*\n+{\n+  if (IN_OR_GLOBAL_P (operands[1]))\n+    return \\\"return\\\\t%%i7+8\\\\n\\\\tmov\\\\t%Y1, %Y0\\\";\n+  else\n+    return \\\"ret\\;restore %%g0, %1, %Y0\\\";\n+}\"\n+  [(set_attr \"type\" \"multi\")])\n+\n (define_insn \"*return_addsi\"\n   [(set (match_operand:SI 0 \"restore_operand\" \"\")\n \t(plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t (match_operand:SI 2 \"arith_operand\" \"rI\")))\n    (return)]\n-  \"! TARGET_EPILOGUE && ! TARGET_LIVE_G0\"\n+  \"! TARGET_EPILOGUE\"\n   \"*\n {\n   if (! TARGET_ARCH64 && current_function_returns_struct)\n@@ -9223,7 +9114,7 @@\n \t(lo_sum:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t   (match_operand:SI 2 \"immediate_operand\" \"in\")))\n    (return)]\n-  \"! TARGET_EPILOGUE && ! TARGET_LIVE_G0 && ! TARGET_CM_MEDMID\"\n+  \"! TARGET_EPILOGUE && ! TARGET_CM_MEDMID\"\n   \"*\n {\n   if (! TARGET_ARCH64 && current_function_returns_struct)"}, {"sha": "cd2f064428bfdc9bf7a9f1613fb30a588fc5392c", "filename": "gcc/config/sparc/splet.h", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6c1be7e7fb2cb562672a006d893617654bb3ed7/gcc%2Fconfig%2Fsparc%2Fsplet.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6c1be7e7fb2cb562672a006d893617654bb3ed7/gcc%2Fconfig%2Fsparc%2Fsplet.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsplet.h?ref=e6c1be7e7fb2cb562672a006d893617654bb3ed7", "patch": "@@ -21,20 +21,13 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"sparc/aout.h\"\n \n-/* -mbroken-saverestore is not included here because the long term\n-   default is -mno-broken-saverestore.  */\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT (MASK_APP_REGS + MASK_EPILOGUE)\n \n-/* -mlive-g0 is only supported on the sparclet.  */\n #undef SUBTARGET_SWITCHES\n #define SUBTARGET_SWITCHES \\\n {\"big-endian\", -MASK_LITTLE_ENDIAN, \"Generate code for big endian\" }, \\\n-{\"little-endian\", MASK_LITTLE_ENDIAN, \"Generate code for little endian\" }, \\\n-{\"live-g0\", MASK_LIVE_G0, \"Use g0 as a normal register\" }, \\\n-{\"no-live-g0\", -MASK_LIVE_G0, \"Register g0 is fixed with a zero value\" }, \\\n-{\"broken-saverestore\", MASK_BROKEN_SAVERESTORE, \"Enable save/restore bug workarounds\" }, \\\n-{\"no-broken-saverestore\", -MASK_BROKEN_SAVERESTORE, \"Disable save/restore bug workarouns\" },\n+{\"little-endian\", MASK_LITTLE_ENDIAN, \"Generate code for little endian\" },\n \n #undef ASM_SPEC\n #define ASM_SPEC \"%{mlittle-endian:-EL} %(asm_cpu)\"\n@@ -51,19 +44,3 @@ Boston, MA 02111-1307, USA.  */\n #define BYTES_BIG_ENDIAN (! TARGET_LITTLE_ENDIAN)\n #undef WORDS_BIG_ENDIAN\n #define WORDS_BIG_ENDIAN (! TARGET_LITTLE_ENDIAN)\n-\n-#undef SUBTARGET_OVERRIDE_OPTIONS\n-#define SUBTARGET_OVERRIDE_OPTIONS \t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    if (TARGET_LIVE_G0)\t\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\twarning (\"Option '-mlive-g0' deprecated.\");\t\t\t\\\n-        target_flags &= ~MASK_LIVE_G0;\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    else if (TARGET_BROKEN_SAVERESTORE)\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\twarning (\"Option '-mbroken-saverestore' deprecated.\");\t\t\\\n-        target_flags &= ~MASK_BROKEN_SAVERESTORE;\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  } while (0)\n-"}]}