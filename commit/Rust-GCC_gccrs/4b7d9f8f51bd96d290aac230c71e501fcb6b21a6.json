{"sha": "4b7d9f8f51bd96d290aac230c71e501fcb6b21a6", "node_id": "C_kwDOANBUbNoAKDRiN2Q5ZjhmNTFiZDk2ZDI5MGFhYzIzMGM3MWU1MDFmY2I2YjIxYTY", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-03-22T18:37:02Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-03-22T20:40:40Z"}, "message": "c: -Wmissing-field-initializers and designated inits [PR82283, PR84685]\n\nThis patch fixes two kinds of wrong -Wmissing-field-initializers\nwarnings.  Our docs say that this warning \"does not warn about designated\ninitializers\", but we give a warning for\n\n1) the array case:\n\n  struct S {\n    struct N {\n      int a;\n      int b;\n    } c[1];\n  } d = {\n    .c[0].a = 1,\n    .c[0].b = 1, // missing initializer for field 'b' of 'struct N'\n  };\n\nwe warn because push_init_level, when constructing an array, clears\nconstructor_designated (which the warning relies on), and we forget\nthat we were in a designated initializer context.  Fixed by the\npush_init_level hunk; and\n\n2) the compound literal case:\n\n  struct T {\n    int a;\n    int *b;\n    int c;\n  };\n\n  struct T t = { .b = (int[]){1} }; // missing initializer for field 'c' of 'struct T'\n\nwhere set_designator properly sets constructor_designated to 1, but the\ncompound literal causes us to create a whole new initializer_stack in\nstart_init, which clears constructor_designated.  Then, after we've parsed\nthe compound literal, finish_init flushes the initializer_stack entry,\nbut doesn't restore constructor_designated, so we forget we were in\na designated initializer context, which causes the bogus warning.  (The\ndesignated flag is also tracked in constructor_stack, but in this case,\nwe didn't perform push_init_level between set_designator and start_init\nso it wasn't saved anywhere.)\n\n\tPR c/82283\n\tPR c/84685\n\ngcc/c/ChangeLog:\n\n\t* c-typeck.cc (struct initializer_stack): Add 'designated' member.\n\t(start_init): Set it.\n\t(finish_init): Restore constructor_designated.\n\t(push_init_level): Set constructor_designated to the value of\n\tconstructor_designated in the upper constructor_stack.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/Wmissing-field-initializers-1.c: New test.\n\t* gcc.dg/Wmissing-field-initializers-2.c: New test.\n\t* gcc.dg/Wmissing-field-initializers-3.c: New test.\n\t* gcc.dg/Wmissing-field-initializers-4.c: New test.\n\t* gcc.dg/Wmissing-field-initializers-5.c: New test.", "tree": {"sha": "26583f7173616f5b0545172c3b209370f989c4de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26583f7173616f5b0545172c3b209370f989c4de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b7d9f8f51bd96d290aac230c71e501fcb6b21a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b7d9f8f51bd96d290aac230c71e501fcb6b21a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b7d9f8f51bd96d290aac230c71e501fcb6b21a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b7d9f8f51bd96d290aac230c71e501fcb6b21a6/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "774ab2edcb5f3a24ed3a5cffd1143bd49a69f1ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/774ab2edcb5f3a24ed3a5cffd1143bd49a69f1ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/774ab2edcb5f3a24ed3a5cffd1143bd49a69f1ee"}], "stats": {"total": 132, "additions": 128, "deletions": 4}, "files": [{"sha": "6c4af5e4cded8963cfd0a752e513e9ef56d79156", "filename": "gcc/c/c-typeck.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7d9f8f51bd96d290aac230c71e501fcb6b21a6/gcc%2Fc%2Fc-typeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7d9f8f51bd96d290aac230c71e501fcb6b21a6/gcc%2Fc%2Fc-typeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.cc?ref=4b7d9f8f51bd96d290aac230c71e501fcb6b21a6", "patch": "@@ -8438,6 +8438,7 @@ struct initializer_stack\n   char top_level;\n   char require_constant_value;\n   char require_constant_elements;\n+  char designated;\n   rich_location *missing_brace_richloc;\n };\n \n@@ -8464,6 +8465,7 @@ start_init (tree decl, tree asmspec_tree ATTRIBUTE_UNUSED, int top_level,\n   p->top_level = constructor_top_level;\n   p->next = initializer_stack;\n   p->missing_brace_richloc = richloc;\n+  p->designated = constructor_designated;\n   initializer_stack = p;\n \n   constructor_decl = decl;\n@@ -8522,6 +8524,7 @@ finish_init (void)\n   require_constant_value = p->require_constant_value;\n   require_constant_elements = p->require_constant_elements;\n   constructor_stack = p->constructor_stack;\n+  constructor_designated = p->designated;\n   constructor_range_stack = p->constructor_range_stack;\n   constructor_elements = p->elements;\n   spelling = p->spelling;\n@@ -8731,7 +8734,9 @@ push_init_level (location_t loc, int implicit,\n   constructor_depth = SPELLING_DEPTH ();\n   constructor_elements = NULL;\n   constructor_incremental = 1;\n-  constructor_designated = 0;\n+  /* If the upper initializer is designated, then mark this as\n+     designated too to prevent bogus warnings.  */\n+  constructor_designated = p->designated;\n   constructor_pending_elts = 0;\n   if (!implicit)\n     {\n@@ -8756,9 +8761,6 @@ push_init_level (location_t loc, int implicit,\n \t  push_member_name (constructor_fields);\n \t  constructor_depth++;\n \t}\n-      /* If upper initializer is designated, then mark this as\n-\t designated too to prevent bogus warnings.  */\n-      constructor_designated = p->designated;\n     }\n   else if (TREE_CODE (constructor_type) == ARRAY_TYPE)\n     {"}, {"sha": "fbcca44db5f17ad0915acfbd76c500a652ab5076", "filename": "gcc/testsuite/gcc.dg/Wmissing-field-initializers-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7d9f8f51bd96d290aac230c71e501fcb6b21a6/gcc%2Ftestsuite%2Fgcc.dg%2FWmissing-field-initializers-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7d9f8f51bd96d290aac230c71e501fcb6b21a6/gcc%2Ftestsuite%2Fgcc.dg%2FWmissing-field-initializers-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWmissing-field-initializers-1.c?ref=4b7d9f8f51bd96d290aac230c71e501fcb6b21a6", "patch": "@@ -0,0 +1,22 @@\n+/* PR c/82283 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wmissing-field-initializers\" } */\n+\n+struct A {\n+  int *a;\n+  int b;\n+};\n+\n+struct B {\n+  struct A a;\n+};\n+\n+struct B data1 = {\n+  .a.a = &(int){ 0 },\n+  .a.b = 13 /* { dg-bogus \"missing initializer\" } */\n+};\n+\n+struct B data2 = {\n+  .a.b = 0,\n+  .a.a = & (int) { 0 }\n+};"}, {"sha": "cb42968a4905278dcb1c198d8a0fcc6096caf3f3", "filename": "gcc/testsuite/gcc.dg/Wmissing-field-initializers-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7d9f8f51bd96d290aac230c71e501fcb6b21a6/gcc%2Ftestsuite%2Fgcc.dg%2FWmissing-field-initializers-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7d9f8f51bd96d290aac230c71e501fcb6b21a6/gcc%2Ftestsuite%2Fgcc.dg%2FWmissing-field-initializers-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWmissing-field-initializers-2.c?ref=4b7d9f8f51bd96d290aac230c71e501fcb6b21a6", "patch": "@@ -0,0 +1,11 @@\n+/* PR c/84685 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wmissing-field-initializers\" } */\n+\n+struct T {\n+  int a;\n+  int *b;\n+  int c;\n+}; \n+\n+struct T t = { .b = (int[]){1} }; /* { dg-bogus \"missing initializer\" } */"}, {"sha": "5512d97d12f8d7a3522f3de4b4d1c737ac932296", "filename": "gcc/testsuite/gcc.dg/Wmissing-field-initializers-3.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7d9f8f51bd96d290aac230c71e501fcb6b21a6/gcc%2Ftestsuite%2Fgcc.dg%2FWmissing-field-initializers-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7d9f8f51bd96d290aac230c71e501fcb6b21a6/gcc%2Ftestsuite%2Fgcc.dg%2FWmissing-field-initializers-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWmissing-field-initializers-3.c?ref=4b7d9f8f51bd96d290aac230c71e501fcb6b21a6", "patch": "@@ -0,0 +1,24 @@\n+/* PR c/84685 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wmissing-field-initializers\" } */\n+\n+struct T\n+{\n+    int a;\n+    int *b;\n+    int c;\n+    int d;\n+    int *e;\n+    int f;\n+    int g;\n+    int h;\n+};\n+\n+struct T foo(int bar);\n+\n+struct T foo(int bar)\n+{\n+    struct T t = { .b = (int[]){ 1 }, .e = (int[]){ 2 } }; /* { dg-bogus \"missing initializer\" } */\n+    t.c = bar;\n+    return t;\n+}"}, {"sha": "57e4e4d3372c4c560268907775afc8ec0dc703a4", "filename": "gcc/testsuite/gcc.dg/Wmissing-field-initializers-4.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7d9f8f51bd96d290aac230c71e501fcb6b21a6/gcc%2Ftestsuite%2Fgcc.dg%2FWmissing-field-initializers-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7d9f8f51bd96d290aac230c71e501fcb6b21a6/gcc%2Ftestsuite%2Fgcc.dg%2FWmissing-field-initializers-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWmissing-field-initializers-4.c?ref=4b7d9f8f51bd96d290aac230c71e501fcb6b21a6", "patch": "@@ -0,0 +1,43 @@\n+/* PR c/82283 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wmissing-field-initializers\" } */\n+\n+struct a {\n+  int b;\n+};\n+\n+struct c {\n+  struct a d;\n+  int e;\n+};\n+\n+void f (struct c *);\n+\n+void\n+g (void)\n+{\n+  struct c h = {.d = (struct a){0}}; /* { dg-bogus \"missing initializer\" } */\n+  f(&h);\n+}\n+\n+struct {\n+  struct {\n+    int a;\n+    int b;\n+  } c[1];\n+} d = {\n+  .c[0].a = 1,\n+  .c[0].b = 1, /* { dg-bogus \"missing initializer\" } */\n+};\n+\n+struct test_t {\n+  int value1;\n+  int value2;\n+};\n+\n+struct test_t test[] = {\n+  [0].value1 = 1,\n+  [0].value2 = 2, /* { dg-bogus \"missing initializer\" } */\n+  [1].value1 = 10,\n+  [1].value2 = 20 /* { dg-bogus \"missing initializer\" } */\n+};"}, {"sha": "7cf5df1776420fe6d6ee016a1de7bbf0e7e0e472", "filename": "gcc/testsuite/gcc.dg/Wmissing-field-initializers-5.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7d9f8f51bd96d290aac230c71e501fcb6b21a6/gcc%2Ftestsuite%2Fgcc.dg%2FWmissing-field-initializers-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7d9f8f51bd96d290aac230c71e501fcb6b21a6/gcc%2Ftestsuite%2Fgcc.dg%2FWmissing-field-initializers-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWmissing-field-initializers-5.c?ref=4b7d9f8f51bd96d290aac230c71e501fcb6b21a6", "patch": "@@ -0,0 +1,22 @@\n+/* PR c/82283 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wmissing-field-initializers\" } */\n+\n+struct foo {\n+        const char *a1;\n+        const char * const *a2;\n+        void *a3;\n+        void *a4;\n+};\n+\n+const char *aux[] = { \"y\", 0 };\n+\n+struct foo a = {\n+  .a1 = \"x\",\n+  .a2 = (const char * const []){ \"y\", 0 },\n+}; /* { dg-bogus \"missing initializer\" } */\n+\n+struct foo b = {\n+  .a2 = (const char * const []){ \"y\", 0 },\n+  .a1 = \"x\",\n+};"}]}