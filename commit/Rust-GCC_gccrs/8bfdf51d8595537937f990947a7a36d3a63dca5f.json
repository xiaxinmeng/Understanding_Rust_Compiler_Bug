{"sha": "8bfdf51d8595537937f990947a7a36d3a63dca5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJmZGY1MWQ4NTk1NTM3OTM3Zjk5MDk0N2E3YTM2ZDNhNjNkY2E1Zg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-02-01T15:29:13Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-02-01T16:45:05Z"}, "message": "aarch64: Reimplement vmovl_high_* intrinsics using builtins\n\nThe vmovl_high_* intrinsics map down to the SXTL2/UXTL2 instructions\nthat already have appropriately-named patterns and expanders,\nso it's straightforward to wire them up.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-simd-builtins.def (vec_unpacks_hi,\n\tvec_unpacku_hi_): Define builtins.\n\t* config/aarch64/arm_neon.h (vmovl_high_s8): Reimplement using\n\tbuiltin.\n\t(vmovl_high_s16): Likewise.\n\t(vmovl_high_s32): Likewise.\n\t(vmovl_high_u8): Likewise.\n\t(vmovl_high_u16): Likewise.\n\t(vmovl_high_u32): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/simd/vmovl_high_1.c: New test.", "tree": {"sha": "2b29abe9350fb4e45eb9d2b625d2c22102e63f99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b29abe9350fb4e45eb9d2b625d2c22102e63f99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bfdf51d8595537937f990947a7a36d3a63dca5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bfdf51d8595537937f990947a7a36d3a63dca5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bfdf51d8595537937f990947a7a36d3a63dca5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bfdf51d8595537937f990947a7a36d3a63dca5f/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b2034c479e5882a8566393e4fb632a23cfd6ff0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b2034c479e5882a8566393e4fb632a23cfd6ff0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b2034c479e5882a8566393e4fb632a23cfd6ff0"}], "stats": {"total": 78, "additions": 42, "deletions": 36}, "files": [{"sha": "3115b73e7db3282e7e758573486dd71d0b39e570", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bfdf51d8595537937f990947a7a36d3a63dca5f/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bfdf51d8595537937f990947a7a36d3a63dca5f/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=8bfdf51d8595537937f990947a7a36d3a63dca5f", "patch": "@@ -394,6 +394,10 @@\n   /* Implemented by aarch64_xtn2<mode>.  */\n   BUILTIN_VQN (UNOP, xtn2, 0, NONE)\n \n+  /* Implemented by vec_unpack<su>_hi_<mode>.  */\n+  BUILTIN_VQW (UNOP, vec_unpacks_hi_, 10, NONE)\n+  BUILTIN_VQW (UNOPU, vec_unpacku_hi_, 10, NONE)\n+\n   /* Implemented by aarch64_reduc_plus_<mode>.  */\n   BUILTIN_VALL (UNOP, reduc_plus_scal_, 10, NONE)\n "}, {"sha": "691c0c056031d7330607977f56ce5bbaf3496749", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 6, "deletions": 36, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bfdf51d8595537937f990947a7a36d3a63dca5f/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bfdf51d8595537937f990947a7a36d3a63dca5f/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=8bfdf51d8595537937f990947a7a36d3a63dca5f", "patch": "@@ -8125,72 +8125,42 @@ __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovl_high_s8 (int8x16_t __a)\n {\n-  int16x8_t __result;\n-  __asm__ (\"sshll2 %0.8h,%1.16b,#0\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_vec_unpacks_hi_v16qi (__a);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovl_high_s16 (int16x8_t __a)\n {\n-  int32x4_t __result;\n-  __asm__ (\"sshll2 %0.4s,%1.8h,#0\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_vec_unpacks_hi_v8hi (__a);\n }\n \n __extension__ extern __inline int64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovl_high_s32 (int32x4_t __a)\n {\n-  int64x2_t __result;\n-  __asm__ (\"sshll2 %0.2d,%1.4s,#0\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_vec_unpacks_hi_v4si (__a);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovl_high_u8 (uint8x16_t __a)\n {\n-  uint16x8_t __result;\n-  __asm__ (\"ushll2 %0.8h,%1.16b,#0\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_vec_unpacku_hi_v16qi_uu (__a);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovl_high_u16 (uint16x8_t __a)\n {\n-  uint32x4_t __result;\n-  __asm__ (\"ushll2 %0.4s,%1.8h,#0\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_vec_unpacku_hi_v8hi_uu (__a);\n }\n \n __extension__ extern __inline uint64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovl_high_u32 (uint32x4_t __a)\n {\n-  uint64x2_t __result;\n-  __asm__ (\"ushll2 %0.2d,%1.4s,#0\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_vec_unpacku_hi_v4si_uu (__a);\n }\n \n __extension__ extern __inline int16x8_t"}, {"sha": "d45bb83e3503d512c443f37a446d30d188719a96", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vmovl_high_1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bfdf51d8595537937f990947a7a36d3a63dca5f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmovl_high_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bfdf51d8595537937f990947a7a36d3a63dca5f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmovl_high_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmovl_high_1.c?ref=8bfdf51d8595537937f990947a7a36d3a63dca5f", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#include <arm_neon.h>\n+\n+#include <arm_neon.h>\n+\n+#define FUNC(IT, OT, S)         \\\n+OT                              \\\n+foo_##S (IT a)                  \\\n+{                               \\\n+  return vmovl_high_##S (a);    \\\n+}\n+\n+FUNC (int8x16_t, int16x8_t, s8)\n+/* { dg-final { scan-assembler-times {sxtl2\\tv0\\.8h, v0\\.16b} 1} }  */\n+\n+FUNC (int16x8_t, int32x4_t, s16)\n+/* { dg-final { scan-assembler-times {sxtl2\\tv0\\.4s, v0\\.8h} 1} }  */\n+\n+FUNC (int32x4_t, int64x2_t, s32)\n+/* { dg-final { scan-assembler-times {sxtl2\\tv0\\.2d, v0\\.4s} 1} }  */\n+\n+FUNC (uint8x16_t, uint16x8_t, u8)\n+/* { dg-final { scan-assembler-times {uxtl2\\tv0\\.8h, v0\\.16b} 1} }  */\n+\n+FUNC (uint16x8_t, uint32x4_t, u16)\n+/* { dg-final { scan-assembler-times {uxtl2\\tv0\\.4s, v0\\.8h} 1} }  */\n+\n+FUNC (uint32x4_t, uint64x2_t, u32)\n+/* { dg-final { scan-assembler-times {uxtl2\\tv0\\.2d, v0\\.4s} 1} }  */\n+"}]}