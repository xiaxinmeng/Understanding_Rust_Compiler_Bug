{"sha": "317d21e95bf05eddff4abd1e6c29d36e376e5079", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE3ZDIxZTk1YmYwNWVkZGZmNGFiZDFlNmMyOWQzNmUzNzZlNTA3OQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-12-23T14:58:53Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-12-23T14:58:53Z"}, "message": "h8300-protos.h: Update the prototype of expand_a_shift.\n\n\t* config/h8300/h8300-protos.h: Update the prototype of\n\texpand_a_shift.\n\t* config/h8300/h8300.c (expand_a_shift): Change the return\n\ttype to void.\n\t* config/h8300/h8300.md: Update all the uses of\n\texpand_a_shift.\n\nFrom-SVN: r60436", "tree": {"sha": "51e316ae795ae82322d3f74cd2f1de1ee3cb77d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51e316ae795ae82322d3f74cd2f1de1ee3cb77d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/317d21e95bf05eddff4abd1e6c29d36e376e5079", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/317d21e95bf05eddff4abd1e6c29d36e376e5079", "html_url": "https://github.com/Rust-GCC/gccrs/commit/317d21e95bf05eddff4abd1e6c29d36e376e5079", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/317d21e95bf05eddff4abd1e6c29d36e376e5079/comments", "author": null, "committer": null, "parents": [{"sha": "0c685f1256349ca34726d19826dad68f3559a6e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c685f1256349ca34726d19826dad68f3559a6e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c685f1256349ca34726d19826dad68f3559a6e1"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "1328e0b5c9f27174c2073d96c66d4c42403082a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317d21e95bf05eddff4abd1e6c29d36e376e5079/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317d21e95bf05eddff4abd1e6c29d36e376e5079/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=317d21e95bf05eddff4abd1e6c29d36e376e5079", "patch": "@@ -1,3 +1,12 @@\n+2002-12-23  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300-protos.h: Update the prototype of\n+\texpand_a_shift.\n+\t* config/h8300/h8300.c (expand_a_shift): Change the return\n+\ttype to void.\n+\t* config/h8300/h8300.md: Update all the uses of\n+\texpand_a_shift.\n+\n 2002-12-22  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* tree.c (save_expr): Allow either side of a dyadic operand to be"}, {"sha": "70ec579547cb2d9a2995ffbedff7a529a8aeefa7", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317d21e95bf05eddff4abd1e6c29d36e376e5079/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317d21e95bf05eddff4abd1e6c29d36e376e5079/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=317d21e95bf05eddff4abd1e6c29d36e376e5079", "patch": "@@ -42,7 +42,7 @@ extern const char *output_logical_op PARAMS ((enum machine_mode, rtx *));\n extern unsigned int compute_logical_op_length PARAMS ((enum machine_mode,\n \t\t\t\t\t\t       rtx *));\n extern int compute_logical_op_cc PARAMS ((enum machine_mode, rtx *));\n-extern int expand_a_shift PARAMS ((enum machine_mode, int, rtx[]));\n+extern void expand_a_shift PARAMS ((enum machine_mode, int, rtx[]));\n extern int h8300_shift_needs_scratch_p PARAMS ((int, enum machine_mode));\n extern int expand_a_rotate PARAMS ((enum rtx_code, rtx[]));\n extern int fix_bit_operand PARAMS ((rtx *, int, enum rtx_code));"}, {"sha": "f45ac165694870498308e119b9d3db0b6d545df2", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317d21e95bf05eddff4abd1e6c29d36e376e5079/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317d21e95bf05eddff4abd1e6c29d36e376e5079/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=317d21e95bf05eddff4abd1e6c29d36e376e5079", "patch": "@@ -2250,11 +2250,9 @@ nshift_operator (x, mode)\n     }\n }\n \n-/* Called from the .md file to emit code to do shifts.\n-   Return a boolean indicating success.\n-   (Currently this is always TRUE).  */\n+/* Emit code to do shifts.  */\n \n-int\n+void\n expand_a_shift (mode, code, operands)\n      enum machine_mode mode;\n      int code;\n@@ -2273,8 +2271,6 @@ expand_a_shift (mode, code, operands)\n \t\t\t\t\t       operands[2])),\n \t\t\t gen_rtx_CLOBBER (VOIDmode,\n \t\t\t\t\t  gen_rtx_SCRATCH (QImode)))));\n-\n-  return 1;\n }\n \n /* Symbols of the various modes which can be used as indices.  */"}, {"sha": "9752f0f82a7557530b23764233975d94864c91c6", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317d21e95bf05eddff4abd1e6c29d36e376e5079/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317d21e95bf05eddff4abd1e6c29d36e376e5079/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=317d21e95bf05eddff4abd1e6c29d36e376e5079", "patch": "@@ -1983,21 +1983,21 @@\n \t(ashift:QI (match_operand:QI 1 \"register_operand\" \"\")\n \t\t   (match_operand:QI 2 \"nonmemory_operand\" \"\")))]\n   \"\"\n-  \"if (expand_a_shift (QImode, ASHIFT, operands)) DONE; else FAIL;\")\n+  \"expand_a_shift (QImode, ASHIFT, operands); DONE;\")\n \n (define_expand \"ashrqi3\"\n   [(set (match_operand:QI 0 \"register_operand\" \"\")\n \t(ashiftrt:QI (match_operand:QI 1 \"register_operand\" \"\")\n \t\t     (match_operand:QI 2 \"nonmemory_operand\" \"\")))]\n   \"\"\n-  \"if (expand_a_shift (QImode, ASHIFTRT, operands)) DONE; else FAIL;\")\n+  \"expand_a_shift (QImode, ASHIFTRT, operands); DONE;\")\n \n (define_expand \"lshrqi3\"\n   [(set (match_operand:QI 0 \"register_operand\" \"\")\n \t(lshiftrt:QI (match_operand:QI 1 \"register_operand\" \"\")\n \t\t     (match_operand:QI 2 \"nonmemory_operand\" \"\")))]\n   \"\"\n-  \"if (expand_a_shift (QImode, LSHIFTRT, operands)) DONE; else FAIL;\")\n+  \"expand_a_shift (QImode, LSHIFTRT, operands); DONE;\")\n \n (define_insn \"\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n@@ -2018,21 +2018,21 @@\n \t(ashift:HI (match_operand:HI 1 \"nonmemory_operand\" \"\")\n \t\t   (match_operand:QI 2 \"nonmemory_operand\" \"\")))]\n   \"\"\n-  \"if (expand_a_shift (HImode, ASHIFT, operands)) DONE; else FAIL;\")\n+  \"expand_a_shift (HImode, ASHIFT, operands); DONE;\")\n \n (define_expand \"lshrhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n \t(lshiftrt:HI (match_operand:HI 1 \"general_operand\" \"\")\n \t\t     (match_operand:QI 2 \"nonmemory_operand\" \"\")))]\n   \"\"\n-  \"if (expand_a_shift (HImode, LSHIFTRT, operands)) DONE; else FAIL;\")\n+  \"expand_a_shift (HImode, LSHIFTRT, operands); DONE;\")\n \n (define_expand \"ashrhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n \t(ashiftrt:HI (match_operand:HI 1 \"register_operand\" \"\")\n \t\t     (match_operand:QI 2 \"nonmemory_operand\" \"\")))]\n   \"\"\n-  \"if (expand_a_shift (HImode, ASHIFTRT, operands)) DONE; else FAIL;\")\n+  \"expand_a_shift (HImode, ASHIFTRT, operands); DONE;\")\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n@@ -2053,21 +2053,21 @@\n \t(ashift:SI (match_operand:SI 1 \"general_operand\" \"\")\n \t\t   (match_operand:QI 2 \"nonmemory_operand\" \"\")))]\n   \"\"\n-  \"if (expand_a_shift (SImode, ASHIFT, operands)) DONE; else FAIL;\")\n+  \"expand_a_shift (SImode, ASHIFT, operands); DONE;\")\n \n (define_expand \"lshrsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(lshiftrt:SI (match_operand:SI 1 \"general_operand\" \"\")\n \t\t     (match_operand:QI 2 \"nonmemory_operand\" \"\")))]\n   \"\"\n-  \"if (expand_a_shift (SImode, LSHIFTRT, operands)) DONE; else FAIL;\")\n+  \"expand_a_shift (SImode, LSHIFTRT, operands); DONE;\")\n \n (define_expand \"ashrsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(ashiftrt:SI (match_operand:SI 1 \"general_operand\" \"\")\n \t\t     (match_operand:QI 2 \"nonmemory_operand\" \"\")))]\n   \"\"\n-  \"if (expand_a_shift (SImode, ASHIFTRT, operands)) DONE; else FAIL;\")\n+  \"expand_a_shift (SImode, ASHIFTRT, operands); DONE;\")\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")"}]}