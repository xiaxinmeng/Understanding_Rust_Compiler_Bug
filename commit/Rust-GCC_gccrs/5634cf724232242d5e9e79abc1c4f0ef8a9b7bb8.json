{"sha": "5634cf724232242d5e9e79abc1c4f0ef8a9b7bb8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYzNGNmNzI0MjMyMjQyZDVlOWU3OWFiYzFjNGYwZWY4YTliN2JiOA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2003-10-21T21:22:42Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-10-21T21:22:42Z"}, "message": "ia64.md (cmpxchg_acq_si): Mark operand 3 as DImode.\n\n\t* config/ia64/ia64.md (cmpxchg_acq_si): Mark operand 3 as DImode.\n\t* config/ia64/ia64.c (ia64_expand_fetch_and_op,\n\tia64_expand_op_and_fetch): Make sure the REG for ar.ccv is\n\tDImode.   Use convert_move to load ar.ccv.\n\t(ia64_expand_compare_and_swap): Likewise.\n\tIf expand_expr doesn't put 'old' and 'new' in the proper\n\tmodes, run them through convert_to_mode.\n\nFrom-SVN: r72770", "tree": {"sha": "da268619c79d9ec8c44a1db688dcfa88d38db6b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da268619c79d9ec8c44a1db688dcfa88d38db6b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5634cf724232242d5e9e79abc1c4f0ef8a9b7bb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5634cf724232242d5e9e79abc1c4f0ef8a9b7bb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5634cf724232242d5e9e79abc1c4f0ef8a9b7bb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5634cf724232242d5e9e79abc1c4f0ef8a9b7bb8/comments", "author": null, "committer": null, "parents": [{"sha": "25f93e1848b88e625aaf90d1ab76732790f2e229", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25f93e1848b88e625aaf90d1ab76732790f2e229", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25f93e1848b88e625aaf90d1ab76732790f2e229"}], "stats": {"total": 36, "additions": 23, "deletions": 13}, "files": [{"sha": "36c3936a7c4cc290af50d6316dae33c6c782570c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5634cf724232242d5e9e79abc1c4f0ef8a9b7bb8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5634cf724232242d5e9e79abc1c4f0ef8a9b7bb8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5634cf724232242d5e9e79abc1c4f0ef8a9b7bb8", "patch": "@@ -1,3 +1,13 @@\n+2003-10-21  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* config/ia64/ia64.md (cmpxchg_acq_si): Mark operand 3 as DImode.\n+\t* config/ia64/ia64.c (ia64_expand_fetch_and_op,\n+\tia64_expand_op_and_fetch): Make sure the REG for ar.ccv is\n+\tDImode.   Use convert_move to load ar.ccv.\n+\t(ia64_expand_compare_and_swap): Likewise.\n+\tIf expand_expr doesn't put 'old' and 'new' in the proper\n+\tmodes, run them through convert_to_mode.\n+\n 2003-10-21  Eric Christopher  <echristo@redhat.com>\n \n \t* config/frv/frv.c (frv_adjust_field_align): Check DECL_ARTIFICIAL"}, {"sha": "72b8e866d27381495eb8c3f4e78cca7476c24036", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5634cf724232242d5e9e79abc1c4f0ef8a9b7bb8/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5634cf724232242d5e9e79abc1c4f0ef8a9b7bb8/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=5634cf724232242d5e9e79abc1c4f0ef8a9b7bb8", "patch": "@@ -7885,13 +7885,14 @@ ia64_expand_fetch_and_op (optab binoptab, enum machine_mode mode,\n     }\n \n   tmp = gen_reg_rtx (mode);\n-  ccv = gen_rtx_REG (mode, AR_CCV_REGNUM);\n+  /* ar.ccv must always be loaded with a zero-extended DImode value.  */\n+  ccv = gen_rtx_REG (DImode, AR_CCV_REGNUM);\n   emit_move_insn (tmp, mem);\n \n   label = gen_label_rtx ();\n   emit_label (label);\n   emit_move_insn (ret, tmp);\n-  emit_move_insn (ccv, tmp);\n+  convert_move (ccv, tmp, /*unsignedp=*/1);\n \n   /* Perform the specific operation.  Special case NAND by noticing\n      one_cmpl_optab instead.  */\n@@ -7951,14 +7952,15 @@ ia64_expand_op_and_fetch (optab binoptab, enum machine_mode mode,\n   emit_insn (gen_mf ());\n   tmp = gen_reg_rtx (mode);\n   old = gen_reg_rtx (mode);\n-  ccv = gen_rtx_REG (mode, AR_CCV_REGNUM);\n+  /* ar.ccv must always be loaded with a zero-extended DImode value.  */\n+  ccv = gen_rtx_REG (DImode, AR_CCV_REGNUM);\n \n   emit_move_insn (tmp, mem);\n \n   label = gen_label_rtx ();\n   emit_label (label);\n   emit_move_insn (old, tmp);\n-  emit_move_insn (ccv, tmp);\n+  convert_move (ccv, tmp, /*unsignedp=*/1);\n \n   /* Perform the specific operation.  Special case NAND by noticing\n      one_cmpl_optab instead.  */\n@@ -8007,6 +8009,11 @@ ia64_expand_compare_and_swap (enum machine_mode rmode, enum machine_mode mode,\n   mem = gen_rtx_MEM (mode, force_reg (ptr_mode, mem));\n   MEM_VOLATILE_P (mem) = 1;\n \n+  if (GET_MODE (old) != mode)\n+    old = convert_to_mode (mode, old, /*unsignedp=*/1);\n+  if (GET_MODE (new) != mode)\n+    new = convert_to_mode (mode, new, /*unsignedp=*/1);\n+\n   if (! register_operand (old, mode))\n     old = copy_to_mode_reg (mode, old);\n   if (! register_operand (new, mode))\n@@ -8018,14 +8025,7 @@ ia64_expand_compare_and_swap (enum machine_mode rmode, enum machine_mode mode,\n     tmp = gen_reg_rtx (mode);\n \n   ccv = gen_rtx_REG (DImode, AR_CCV_REGNUM);\n-  if (mode == DImode)\n-    emit_move_insn (ccv, old);\n-  else\n-    {\n-      rtx ccvtmp = gen_reg_rtx (DImode);\n-      emit_insn (gen_zero_extendsidi2 (ccvtmp, old));\n-      emit_move_insn (ccv, ccvtmp);\n-    }\n+  convert_move (ccv, old, /*unsignedp=*/1);\n   emit_insn (gen_mf ());\n   if (mode == SImode)\n     insn = gen_cmpxchg_acq_si (tmp, mem, new, ccv);"}, {"sha": "e6bf9fed70d4a76cae018b571cec60102b0c4964", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5634cf724232242d5e9e79abc1c4f0ef8a9b7bb8/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5634cf724232242d5e9e79abc1c4f0ef8a9b7bb8/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=5634cf724232242d5e9e79abc1c4f0ef8a9b7bb8", "patch": "@@ -5388,7 +5388,7 @@\n    (set (match_operand:SI 1 \"not_postinc_memory_operand\" \"+S\")\n         (unspec:SI [(match_dup 1)\n                     (match_operand:SI 2 \"gr_register_operand\" \"r\")\n-\t\t    (match_operand 3 \"ar_ccv_reg_operand\" \"\")]\n+\t\t    (match_operand:DI 3 \"ar_ccv_reg_operand\" \"\")]\n \t\t   UNSPEC_CMPXCHG_ACQ))]\n   \"\"\n   \"cmpxchg4.acq %0 = %1, %2, %3\""}]}