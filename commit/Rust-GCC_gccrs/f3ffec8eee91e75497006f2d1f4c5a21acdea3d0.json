{"sha": "f3ffec8eee91e75497006f2d1f4c5a21acdea3d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNmZmVjOGVlZTkxZTc1NDk3MDA2ZjJkMWY0YzVhMjFhY2RlYTNkMA==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1995-02-15T06:39:19Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1995-02-15T06:39:19Z"}, "message": "tree.c (get_set_constructor_bytes):  New function.  Replaces ...\n\n(get_set_constructor_words):  ... removed old function.\n\nFrom-SVN: r8952", "tree": {"sha": "ff190b87c58b32e343005007ff86e14ac8808a65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff190b87c58b32e343005007ff86e14ac8808a65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3ffec8eee91e75497006f2d1f4c5a21acdea3d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ffec8eee91e75497006f2d1f4c5a21acdea3d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3ffec8eee91e75497006f2d1f4c5a21acdea3d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ffec8eee91e75497006f2d1f4c5a21acdea3d0/comments", "author": null, "committer": null, "parents": [{"sha": "4745ddae5dbd41d56a45bdefe4d304d991d53083", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4745ddae5dbd41d56a45bdefe4d304d991d53083", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4745ddae5dbd41d56a45bdefe4d304d991d53083"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "e26819f56023686988987411804bd7e6d3481fc1", "filename": "gcc/tree.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ffec8eee91e75497006f2d1f4c5a21acdea3d0/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ffec8eee91e75497006f2d1f4c5a21acdea3d0/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=f3ffec8eee91e75497006f2d1f4c5a21acdea3d0", "patch": "@@ -4109,23 +4109,22 @@ get_set_constructor_bits (init, buffer, bit_size)\n }\n \n /* Expand (the constant part of) a SET_TYPE CONTRUCTOR node.\n-   The result is placed in BUFFER (which is an array of WD_SIZE\n-   words).  TYPE_ALIGN bits are stored in each element of BUFFER.\n+   The result is placed in BUFFER (which is an array of bytes).\n    If the constructor is constant, NULL_TREE is returned.\n    Otherwise, a TREE_LIST of the non-constant elements is emitted. */\n \n tree\n-get_set_constructor_words (init, buffer, wd_size)\n+get_set_constructor_bytes (init, buffer, wd_size)\n      tree init;\n-     HOST_WIDE_INT *buffer;\n+     unsigned char *buffer;\n      int wd_size;\n {\n   int i;\n   tree vals = TREE_OPERAND (init, 1);\n-  int set_word_size = TYPE_ALIGN (TREE_TYPE (init));\n+  int set_word_size = BITS_PER_UNIT;\n   int bit_size = wd_size * set_word_size;\n   int bit_pos = 0;\n-  HOST_WIDE_INT *wordp = buffer;\n+  unsigned char *bytep = buffer;\n   char *bit_buffer = (char*)alloca(bit_size);\n   tree non_const_bits = get_set_constructor_bits (init, bit_buffer, bit_size);\n \n@@ -4137,13 +4136,13 @@ get_set_constructor_words (init, buffer, wd_size)\n       if (bit_buffer[i])\n \t{\n \t  if (BITS_BIG_ENDIAN)\n-\t    *wordp |= (1 << (set_word_size - 1 - bit_pos));\n+\t    *bytep |= (1 << (set_word_size - 1 - bit_pos));\n \t  else\n-\t    *wordp |= 1 << bit_pos;\n+\t    *bytep |= 1 << bit_pos;\n \t}\n       bit_pos++;\n       if (bit_pos >= set_word_size)\n-\tbit_pos = 0, wordp++;\n+\tbit_pos = 0, bytep++;\n     }\n   return non_const_bits;\n }"}]}