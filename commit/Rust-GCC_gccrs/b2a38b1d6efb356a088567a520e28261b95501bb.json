{"sha": "b2a38b1d6efb356a088567a520e28261b95501bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJhMzhiMWQ2ZWZiMzU2YTA4ODU2N2E1MjBlMjgyNjFiOTU1MDFiYg==", "commit": {"author": {"name": "Andrew Pinski", "email": "andrew_pinski@playstation.sony.com", "date": "2008-09-18T19:28:48Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2008-09-18T19:28:48Z"}, "message": "re PR rtl-optimization/37451 (Extra addition for doloop in some cases)\n\n2008-09-18  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR rtl-opt/37451\n        * loop-doloop.c (doloop_modify): New argument zero_extend_p and\n        zero extend count after the correction to it is done.\n        (doloop_optimize): Update call to doloop_modify, don't zero extend\n        count before call.\n\nFrom-SVN: r140470", "tree": {"sha": "43575ec0b447fc02801ff346a47da451fef0369d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43575ec0b447fc02801ff346a47da451fef0369d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2a38b1d6efb356a088567a520e28261b95501bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2a38b1d6efb356a088567a520e28261b95501bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2a38b1d6efb356a088567a520e28261b95501bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2a38b1d6efb356a088567a520e28261b95501bb/comments", "author": null, "committer": null, "parents": [{"sha": "c78a2119d8c5728a09df47c7f30a7a190b6864da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c78a2119d8c5728a09df47c7f30a7a190b6864da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c78a2119d8c5728a09df47c7f30a7a190b6864da"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "25f2297ff5d90a261fa17f254082db72b62cbfeb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a38b1d6efb356a088567a520e28261b95501bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a38b1d6efb356a088567a520e28261b95501bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2a38b1d6efb356a088567a520e28261b95501bb", "patch": "@@ -1,3 +1,11 @@\n+2008-09-18  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR rtl-opt/37451\n+\t* loop-doloop.c (doloop_modify): New argument zero_extend_p and\n+\tzero extend count after the correction to it is done.\n+\t(doloop_optimize): Update call to doloop_modify, don't zero extend\n+\tcount before call.\n+\n 2008-09-18  Martin Jambor  <mjambor@suse.cz>\n \n \t* ipa-cp.c (ipcp_estimate_growth): Return 0 instead of false."}, {"sha": "25369dd4a4d611aa7274b35c27bf96b109955e7e", "filename": "gcc/loop-doloop.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a38b1d6efb356a088567a520e28261b95501bb/gcc%2Floop-doloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a38b1d6efb356a088567a520e28261b95501bb/gcc%2Floop-doloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-doloop.c?ref=b2a38b1d6efb356a088567a520e28261b95501bb", "patch": "@@ -333,11 +333,13 @@ add_test (rtx cond, edge *e, basic_block dest)\n    describes the loop, DESC describes the number of iterations of the\n    loop, and DOLOOP_INSN is the low-overhead looping insn to emit at the\n    end of the loop.  CONDITION is the condition separated from the\n-   DOLOOP_SEQ.  COUNT is the number of iterations of the LOOP.  */\n+   DOLOOP_SEQ.  COUNT is the number of iterations of the LOOP.\n+   ZERO_EXTEND_P says to zero extend COUNT after the increment of it to\n+   word_mode.  */\n \n static void\n doloop_modify (struct loop *loop, struct niter_desc *desc,\n-\t       rtx doloop_seq, rtx condition, rtx count)\n+\t       rtx doloop_seq, rtx condition, rtx count, bool zero_extend_p)\n {\n   rtx counter_reg;\n   rtx tmp, noloop = NULL_RTX;\n@@ -413,6 +415,10 @@ doloop_modify (struct loop *loop, struct niter_desc *desc,\n   if (increment_count)\n     count = simplify_gen_binary (PLUS, mode, count, const1_rtx);\n \n+  if (zero_extend_p)\n+    count = simplify_gen_unary (ZERO_EXTEND, word_mode,\n+\t\t\t\tcount, mode);\n+\n   /* Insert initialization of the count register into the loop header.  */\n   start_sequence ();\n   tmp = force_operand (count, counter_reg);\n@@ -547,6 +553,7 @@ doloop_optimize (struct loop *loop)\n   struct niter_desc *desc;\n   unsigned word_mode_size;\n   unsigned HOST_WIDE_INT word_mode_max;\n+  bool zero_extend_p = false;\n \n   if (dump_file)\n     fprintf (dump_file, \"Doloop: Processing loop %d.\\n\", loop->num);\n@@ -621,8 +628,7 @@ doloop_optimize (struct loop *loop)\n     {\n       if (word_mode_size > GET_MODE_BITSIZE (mode))\n \t{\n-\t  count = simplify_gen_unary (ZERO_EXTEND, word_mode,\n-\t\t\t\t      count, mode);\n+\t  zero_extend_p = true;\n \t  iterations = simplify_gen_unary (ZERO_EXTEND, word_mode,\n \t\t\t\t\t   iterations, mode);\n \t  iterations_max = simplify_gen_unary (ZERO_EXTEND, word_mode,\n@@ -666,7 +672,7 @@ doloop_optimize (struct loop *loop)\n       return false;\n     }\n \n-  doloop_modify (loop, desc, doloop_seq, condition, count);\n+  doloop_modify (loop, desc, doloop_seq, condition, count, zero_extend_p);\n   return true;\n }\n "}]}