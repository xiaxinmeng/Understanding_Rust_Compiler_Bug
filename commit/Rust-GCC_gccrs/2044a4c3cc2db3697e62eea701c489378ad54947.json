{"sha": "2044a4c3cc2db3697e62eea701c489378ad54947", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA0NGE0YzNjYzJkYjM2OTdlNjJlZWE3MDFjNDg5Mzc4YWQ1NDk0Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-04-22T10:21:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-04-22T10:21:32Z"}, "message": "re PR tree-optimization/60823 (ICE in gimple_expand_cfg, at cfgexpand.c:5644)\n\n\tPR tree-optimization/60823\n\t* omp-low.c (ipa_simd_modify_function_body): Go through\n\tall SSA_NAMEs and for those refering to vector arguments\n\twhich are going to be replaced adjust SSA_NAME_VAR and,\n\tif it is a default definition, change it into a non-default\n\tdefinition assigned at the beginning of function from new_decl.\n\t(ipa_simd_modify_stmt_ops): Rewritten.\n\t* tree-dfa.c (set_ssa_default_def): When removing default def,\n\tcheck for NULL loc instead of NULL *loc.\n\n\t* c-c++-common/gomp/pr60823-1.c: New test.\n\t* c-c++-common/gomp/pr60823-2.c: New test.\n\t* c-c++-common/gomp/pr60823-3.c: New test.\n\nFrom-SVN: r209616", "tree": {"sha": "6bdbf55401c310f7e635b4e6df5d894fff74da1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bdbf55401c310f7e635b4e6df5d894fff74da1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2044a4c3cc2db3697e62eea701c489378ad54947", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2044a4c3cc2db3697e62eea701c489378ad54947", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2044a4c3cc2db3697e62eea701c489378ad54947", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2044a4c3cc2db3697e62eea701c489378ad54947/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9d8b4d1ce91511ae92cd746c10a05e16215f1940", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d8b4d1ce91511ae92cd746c10a05e16215f1940", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d8b4d1ce91511ae92cd746c10a05e16215f1940"}], "stats": {"total": 225, "additions": 192, "deletions": 33}, "files": [{"sha": "e882ff81db8d7ba0aae66a925c9cb358e0a2c363", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2044a4c3cc2db3697e62eea701c489378ad54947/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2044a4c3cc2db3697e62eea701c489378ad54947/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2044a4c3cc2db3697e62eea701c489378ad54947", "patch": "@@ -1,3 +1,15 @@\n+2014-04-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/60823\n+\t* omp-low.c (ipa_simd_modify_function_body): Go through\n+\tall SSA_NAMEs and for those refering to vector arguments\n+\twhich are going to be replaced adjust SSA_NAME_VAR and,\n+\tif it is a default definition, change it into a non-default\n+\tdefinition assigned at the beginning of function from new_decl.\n+\t(ipa_simd_modify_stmt_ops): Rewritten.\n+\t* tree-dfa.c (set_ssa_default_def): When removing default def,\n+\tcheck for NULL loc instead of NULL *loc.\n+\n 2014-04-22  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \t* config/arm/arm.c (arm_hard_regno_mode_ok): Loosen"}, {"sha": "d0489e136e2cd94fc599ed3dd53c8836a60bf9b7", "filename": "gcc/omp-low.c", "status": "modified", "additions": 78, "deletions": 32, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2044a4c3cc2db3697e62eea701c489378ad54947/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2044a4c3cc2db3697e62eea701c489378ad54947/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=2044a4c3cc2db3697e62eea701c489378ad54947", "patch": "@@ -11281,45 +11281,53 @@ static tree\n ipa_simd_modify_stmt_ops (tree *tp, int *walk_subtrees, void *data)\n {\n   struct walk_stmt_info *wi = (struct walk_stmt_info *) data;\n-  if (!SSA_VAR_P (*tp))\n+  struct modify_stmt_info *info = (struct modify_stmt_info *) wi->info;\n+  tree *orig_tp = tp;\n+  if (TREE_CODE (*tp) == ADDR_EXPR)\n+    tp = &TREE_OPERAND (*tp, 0);\n+  struct ipa_parm_adjustment *cand = NULL;\n+  if (TREE_CODE (*tp) == PARM_DECL)\n+    cand = ipa_get_adjustment_candidate (&tp, NULL, info->adjustments, true);\n+  else\n     {\n-      /* Make sure we treat subtrees as a RHS.  This makes sure that\n-\t when examining the `*foo' in *foo=x, the `foo' get treated as\n-\t a use properly.  */\n-      wi->is_lhs = false;\n-      wi->val_only = true;\n       if (TYPE_P (*tp))\n \t*walk_subtrees = 0;\n-      return NULL_TREE;\n     }\n-  struct modify_stmt_info *info = (struct modify_stmt_info *) wi->info;\n-  struct ipa_parm_adjustment *cand\n-    = ipa_get_adjustment_candidate (&tp, NULL, info->adjustments, true);\n-  if (!cand)\n-    return NULL_TREE;\n-\n-  tree t = *tp;\n-  tree repl = make_ssa_name (TREE_TYPE (t), NULL);\n \n-  gimple stmt;\n-  gimple_stmt_iterator gsi = gsi_for_stmt (info->stmt);\n-  if (wi->is_lhs)\n+  tree repl = NULL_TREE;\n+  if (cand)\n+    repl = unshare_expr (cand->new_decl);\n+  else\n     {\n-      stmt = gimple_build_assign (unshare_expr (cand->new_decl), repl);\n-      gsi_insert_after (&gsi, stmt, GSI_SAME_STMT);\n-      SSA_NAME_DEF_STMT (repl) = info->stmt;\n+      if (tp != orig_tp)\n+\t{\n+\t  *walk_subtrees = 0;\n+\t  bool modified = info->modified;\n+\t  info->modified = false;\n+\t  walk_tree (tp, ipa_simd_modify_stmt_ops, wi, wi->pset);\n+\t  if (!info->modified)\n+\t    {\n+\t      info->modified = modified;\n+\t      return NULL_TREE;\n+\t    }\n+\t  info->modified = modified;\n+\t  repl = *tp;\n+\t}\n+      else\n+\treturn NULL_TREE;\n     }\n-  else\n+\n+  if (tp != orig_tp)\n     {\n-      /* You'd think we could skip the extra SSA variable when\n-\t wi->val_only=true, but we may have `*var' which will get\n-\t replaced into `*var_array[iter]' and will likely be something\n-\t not gimple.  */\n-      stmt = gimple_build_assign (repl, unshare_expr (cand->new_decl));\n+      repl = build_fold_addr_expr (repl);\n+      gimple stmt\n+\t= gimple_build_assign (make_ssa_name (TREE_TYPE (repl), NULL), repl);\n+      repl = gimple_assign_lhs (stmt);\n+      gimple_stmt_iterator gsi = gsi_for_stmt (info->stmt);\n       gsi_insert_before (&gsi, stmt, GSI_SAME_STMT);\n+      *orig_tp = repl;\n     }\n-\n-  if (!useless_type_conversion_p (TREE_TYPE (*tp), TREE_TYPE (repl)))\n+  else if (!useless_type_conversion_p (TREE_TYPE (*tp), TREE_TYPE (repl)))\n     {\n       tree vce = build1 (VIEW_CONVERT_EXPR, TREE_TYPE (*tp), repl);\n       *tp = vce;\n@@ -11328,8 +11336,6 @@ ipa_simd_modify_stmt_ops (tree *tp, int *walk_subtrees, void *data)\n     *tp = repl;\n \n   info->modified = true;\n-  wi->is_lhs = false;\n-  wi->val_only = true;\n   return NULL_TREE;\n }\n \n@@ -11348,7 +11354,7 @@ ipa_simd_modify_function_body (struct cgraph_node *node,\n \t\t\t       tree retval_array, tree iter)\n {\n   basic_block bb;\n-  unsigned int i, j;\n+  unsigned int i, j, l;\n \n   /* Re-use the adjustments array, but this time use it to replace\n      every function argument use to an offset into the corresponding\n@@ -11371,6 +11377,46 @@ ipa_simd_modify_function_body (struct cgraph_node *node,\n \tj += node->simdclone->simdlen / TYPE_VECTOR_SUBPARTS (vectype) - 1;\n     }\n \n+  l = adjustments.length ();\n+  for (i = 1; i < num_ssa_names; i++)\n+    {\n+      tree name = ssa_name (i);\n+      if (name\n+\t  && SSA_NAME_VAR (name)\n+\t  && TREE_CODE (SSA_NAME_VAR (name)) == PARM_DECL)\n+\t{\n+\t  for (j = 0; j < l; j++)\n+\t    if (SSA_NAME_VAR (name) == adjustments[j].base\n+\t\t&& adjustments[j].new_decl)\n+\t      {\n+\t\ttree base_var;\n+\t\tif (adjustments[j].new_ssa_base == NULL_TREE)\n+\t\t  {\n+\t\t    base_var\n+\t\t      = copy_var_decl (adjustments[j].base,\n+\t\t\t\t       DECL_NAME (adjustments[j].base),\n+\t\t\t\t       TREE_TYPE (adjustments[j].base));\n+\t\t    adjustments[j].new_ssa_base = base_var;\n+\t\t  }\n+\t\telse\n+\t\t  base_var = adjustments[j].new_ssa_base;\n+\t\tif (SSA_NAME_IS_DEFAULT_DEF (name))\n+\t\t  {\n+\t\t    bb = single_succ (ENTRY_BLOCK_PTR_FOR_FN (cfun));\n+\t\t    gimple_stmt_iterator gsi = gsi_after_labels (bb);\n+\t\t    tree new_decl = unshare_expr (adjustments[j].new_decl);\n+\t\t    set_ssa_default_def (cfun, adjustments[j].base, NULL_TREE);\n+\t\t    SET_SSA_NAME_VAR_OR_IDENTIFIER (name, base_var);\n+\t\t    SSA_NAME_IS_DEFAULT_DEF (name) = 0;\n+\t\t    gimple stmt = gimple_build_assign (name, new_decl);\n+\t\t    gsi_insert_before (&gsi, stmt, GSI_SAME_STMT);\n+\t\t  }\n+\t\telse\n+\t\t  SET_SSA_NAME_VAR_OR_IDENTIFIER (name, base_var);\n+\t      }\n+\t}\n+    }\n+\n   struct modify_stmt_info info;\n   info.adjustments = adjustments;\n "}, {"sha": "bee26e35d21a22af74edd270983541712089e1db", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2044a4c3cc2db3697e62eea701c489378ad54947/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2044a4c3cc2db3697e62eea701c489378ad54947/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2044a4c3cc2db3697e62eea701c489378ad54947", "patch": "@@ -1,3 +1,10 @@\n+2014-04-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/60823\n+\t* c-c++-common/gomp/pr60823-1.c: New test.\n+\t* c-c++-common/gomp/pr60823-2.c: New test.\n+\t* c-c++-common/gomp/pr60823-3.c: New test.\n+\n 2014-04-22  Ian Bolton  <ian.bolton@arm.com>\n \n \t* gcc.target/arm/anddi_notdi-1.c: New test."}, {"sha": "5f985724daee71ae33481e84c77cf7e14d274b0a", "filename": "gcc/testsuite/c-c++-common/gomp/pr60823-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2044a4c3cc2db3697e62eea701c489378ad54947/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr60823-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2044a4c3cc2db3697e62eea701c489378ad54947/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr60823-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr60823-1.c?ref=2044a4c3cc2db3697e62eea701c489378ad54947", "patch": "@@ -0,0 +1,19 @@\n+/* PR tree-optimization/60823 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp-simd\" } */\n+\n+#pragma omp declare simd simdlen(4) notinbranch\n+int\n+foo (const double c1, const double c2)\n+{\n+  double z1 = c1, z2 = c2;\n+  int res = 100, i;\n+\n+  for (i = 0; i < 100; i++)\n+    {\n+      res = (z1 * z1 + z2 * z2 > 4.0) ? (i < res ? i : res) : res;\n+      z1 = c1 + z1 * z1 - z2 * z2;\n+      z2 = c2 + 2.0 * z1 * z2;\n+    }\n+  return res;\n+}"}, {"sha": "e0bf570ddcaa94b9d97cbca30ac8dd7c8390a769", "filename": "gcc/testsuite/c-c++-common/gomp/pr60823-2.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2044a4c3cc2db3697e62eea701c489378ad54947/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr60823-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2044a4c3cc2db3697e62eea701c489378ad54947/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr60823-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr60823-2.c?ref=2044a4c3cc2db3697e62eea701c489378ad54947", "patch": "@@ -0,0 +1,43 @@\n+/* PR tree-optimization/60823 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fopenmp-simd\" } */\n+\n+#pragma omp declare simd simdlen(4) notinbranch\n+__attribute__((noinline)) int\n+foo (double c1, double c2)\n+{\n+  double z1 = c1, z2 = c2;\n+  int res = 100, i;\n+\n+  for (i = 0; i < 5; i++)\n+    {\n+      res = (z1 * z1 + z2 * z2 > 4.0) ? (i < res ? i : res) : res;\n+      z1 = c1 + z1 * z1 - z2 * z2;\n+      z2 = c2 + 2.0 * z1 * z2;\n+      c1 += 0.5;\n+      c2 += 0.5;\n+    }\n+  return res;\n+}\n+\n+__attribute__((noinline, noclone)) void\n+bar (double *x, double *y)\n+{\n+  asm volatile (\"\" : : \"rm\" (x), \"rm\" (y) : \"memory\");\n+}\n+\n+int\n+main ()\n+{\n+  int i;\n+  double c[4] = { 0.0, 1.0, 0.0, 1.0 };\n+  double d[4] = { 0.0, 1.0, 2.0, 0.0 };\n+  int e[4];\n+  bar (c, d);\n+#pragma omp simd safelen(4)\n+  for (i = 0; i < 4; i++)\n+    e[i] = foo (c[i], d[i]);\n+  if (e[0] != 3 || e[1] != 1 || e[2] != 1 || e[3] != 2)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "93e9fbe3a1614e35e91629e1af79021d986b6430", "filename": "gcc/testsuite/c-c++-common/gomp/pr60823-3.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2044a4c3cc2db3697e62eea701c489378ad54947/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr60823-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2044a4c3cc2db3697e62eea701c489378ad54947/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr60823-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr60823-3.c?ref=2044a4c3cc2db3697e62eea701c489378ad54947", "patch": "@@ -0,0 +1,32 @@\n+/* PR tree-optimization/60823 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp-simd -fno-strict-aliasing\" } */\n+\n+void bar (char *, double *);\n+\n+#if __SIZEOF_DOUBLE__ >= 4\n+\n+struct S { char c[sizeof (double)]; };\n+void baz (struct S, struct S);\n+union U { struct S s; double d; };\n+\n+#pragma omp declare simd simdlen(4) notinbranch\n+__attribute__((noinline)) int\n+foo (double c1, double c2)\n+{\n+  double *a = &c1;\n+  char *b = (char *) &c1 + 2;\n+\n+  b[-2]++;\n+  b[1]--;\n+  *a++;\n+  c2++;\n+  bar ((char *) &c2 + 1, &c2);\n+  c2 *= 3.0;\n+  bar (b, a);\n+  baz (((union U) { .d = c1 }).s, ((union U) { .d = c2 }).s);\n+  baz (*(struct S *)&c1, *(struct S *)&c2);\n+  return c1 + c2 + ((struct S *)&c1)->c[1];\n+}\n+\n+#endif"}, {"sha": "a1f27587487dc2cc15c2410bc3f12e1a1c95d4e9", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2044a4c3cc2db3697e62eea701c489378ad54947/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2044a4c3cc2db3697e62eea701c489378ad54947/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=2044a4c3cc2db3697e62eea701c489378ad54947", "patch": "@@ -343,7 +343,7 @@ set_ssa_default_def (struct function *fn, tree var, tree def)\n     {\n       loc = htab_find_slot_with_hash (DEFAULT_DEFS (fn), &in,\n \t\t\t\t      DECL_UID (var), NO_INSERT);\n-      if (*loc)\n+      if (loc)\n \t{\n \t  SSA_NAME_IS_DEFAULT_DEF (*(tree *)loc) = false;\n \t  htab_clear_slot (DEFAULT_DEFS (fn), loc);"}]}