{"sha": "fb771b9dad6ef78a985353128cea48e620eb4324", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI3NzFiOWRhZDZlZjc4YTk4NTM1MzEyOGNlYTQ4ZTYyMGViNDMyNA==", "commit": {"author": {"name": "Tom Tromey", "email": "tom@tromey.com", "date": "2017-11-13T20:17:42Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2017-11-13T20:17:42Z"}, "message": "Implement __VA_OPT__\n\nThis implements __VA_OPT__, a new preprocessor feature added in C++2A.\nThe paper can be found here:\n\nhttp://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0306r4.html\n\ngcc/ChangeLog\n\n        * doc/cpp.texi (Variadic Macros): Document __VA_OPT__.\n\ngcc/testsuite/ChangeLog\n\n        * c-c++-common/cpp/va-opt-pedantic.c: New file.\n        * c-c++-common/cpp/va-opt.c: New file.\n        * c-c++-common/cpp/va-opt-error.c: New file.\n\nlibcpp/ChangeLog\n\n        * pch.c (cpp_read_state): Set n__VA_OPT__.\n        * macro.c (vaopt_state): New class.\n        (_cpp_arguments_ok): Check va_opt flag.\n        (replace_args, create_iso_definition): Use vaopt_state.\n        * lex.c (lex_identifier_intern): Possibly issue errors for\n        __VA_OPT__.\n        (lex_identifier): Likewise.\n        (maybe_va_opt_error): New function.\n        * internal.h (struct lexer_state) <va_args_ok>: Update comment.\n        (struct spec_nodes) <n__VA_OPT__>: New field.\n        * init.c (struct lang_flags) <va_opt>: New field.\n        (lang_defaults): Add entries for C++2A.  Update all entries for\n        va_opt.\n        (cpp_set_lang): Initialize va_opt.\n        * include/cpplib.h (struct cpp_options) <va_opt>: New field.\n        * identifiers.c (_cpp_init_hashtable): Initialize n__VA_OPT__.\n\nFrom-SVN: r254707", "tree": {"sha": "d94251e8c98cb3a0a9bfd711707dea469e857c6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d94251e8c98cb3a0a9bfd711707dea469e857c6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb771b9dad6ef78a985353128cea48e620eb4324", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb771b9dad6ef78a985353128cea48e620eb4324", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb771b9dad6ef78a985353128cea48e620eb4324", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb771b9dad6ef78a985353128cea48e620eb4324/comments", "author": {"login": "tromey", "id": 1557670, "node_id": "MDQ6VXNlcjE1NTc2NzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tromey", "html_url": "https://github.com/tromey", "followers_url": "https://api.github.com/users/tromey/followers", "following_url": "https://api.github.com/users/tromey/following{/other_user}", "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tromey/subscriptions", "organizations_url": "https://api.github.com/users/tromey/orgs", "repos_url": "https://api.github.com/users/tromey/repos", "events_url": "https://api.github.com/users/tromey/events{/privacy}", "received_events_url": "https://api.github.com/users/tromey/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4d85d480272fb7331924f04534e0f5f14b60421e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d85d480272fb7331924f04534e0f5f14b60421e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d85d480272fb7331924f04534e0f5f14b60421e"}], "stats": {"total": 403, "additions": 369, "deletions": 34}, "files": [{"sha": "b7ac84c44d700879373a50c716435c6be349bc15", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb771b9dad6ef78a985353128cea48e620eb4324/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb771b9dad6ef78a985353128cea48e620eb4324/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb771b9dad6ef78a985353128cea48e620eb4324", "patch": "@@ -1,3 +1,7 @@\n+2017-11-13  Tom Tromey  <tom@tromey.com>\n+\n+\t* doc/cpp.texi (Variadic Macros): Document __VA_OPT__.\n+\n 2017-11-13  Carl Love  <cel@us.ibm.com>\n \n \t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins):"}, {"sha": "94437d5403e70187ad331bdc5dfaa97bc004b15e", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb771b9dad6ef78a985353128cea48e620eb4324/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb771b9dad6ef78a985353128cea48e620eb4324/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=fb771b9dad6ef78a985353128cea48e620eb4324", "patch": "@@ -1675,29 +1675,52 @@ macro.  We could define @code{eprintf} like this, instead:\n @end smallexample\n \n @noindent\n-This formulation looks more descriptive, but unfortunately it is less\n-flexible: you must now supply at least one argument after the format\n-string.  In standard C, you cannot omit the comma separating the named\n-argument from the variable arguments.  Furthermore, if you leave the\n-variable argument empty, you will get a syntax error, because\n-there will be an extra comma after the format string.\n+This formulation looks more descriptive, but historically it was less\n+flexible: you had to supply at least one argument after the format\n+string.  In standard C, you could not omit the comma separating the\n+named argument from the variable arguments.  (Note that this\n+restriction has been lifted in C++2a, and never existed in GNU C; see\n+below.)\n+\n+Furthermore, if you left the variable argument empty, you would have\n+gotten a syntax error, because there would have been an extra comma\n+after the format string.\n \n @smallexample\n eprintf(\"success!\\n\", );\n      @expansion{} fprintf(stderr, \"success!\\n\", );\n @end smallexample\n \n-GNU CPP has a pair of extensions which deal with this problem.  First,\n-you are allowed to leave the variable argument out entirely:\n+This has been fixed in C++2a, and GNU CPP also has a pair of\n+extensions which deal with this problem.\n+\n+First, in GNU CPP, and in C++ beginning in C++2a, you are allowed to\n+leave the variable argument out entirely:\n \n @smallexample\n eprintf (\"success!\\n\")\n      @expansion{} fprintf(stderr, \"success!\\n\", );\n @end smallexample\n \n @noindent\n-Second, the @samp{##} token paste operator has a special meaning when\n-placed between a comma and a variable argument.  If you write\n+Second, C++2a introduces the @code{@w{__VA_OPT__}} function macro.\n+This macro may only appear in the definition of a variadic macro.  If\n+the variable argument has any tokens, then a @code{@w{__VA_OPT__}}\n+invocation expands to its argument; but if the variable argument does\n+not have any tokens, the @code{@w{__VA_OPT__}} expands to nothing:\n+\n+@smallexample\n+#define eprintf(format, @dots{}) \\\\\n+  fprintf (stderr, format __VA_OPT__(,) __VA_ARGS__)\n+@end smallexample\n+\n+@code{@w{__VA_OPT__}} is also available in GNU C and GNU C++.\n+\n+Historically, GNU CPP has also had another extension to handle the\n+trailing comma: the @samp{##} token paste operator has a special\n+meaning when placed between a comma and a variable argument.  Despite\n+the introduction of @code{@w{__VA_OPT__}}, this extension remains\n+supported in GNU CPP, for backward compatibility.  If you write\n \n @smallexample\n #define eprintf(format, @dots{}) fprintf (stderr, format, ##__VA_ARGS__)\n@@ -1730,6 +1753,9 @@ of macro.  It may also be forbidden in open text; the standard is\n ambiguous.  We recommend you avoid using it except for its defined\n purpose.\n \n+Likewise, C++ forbids @code{@w{__VA_OPT__}} anywhere outside the\n+replacement list of a variadic macro.\n+\n Variadic macros became a standard part of the C language with C99.  \n GNU CPP previously supported them\n with a named variable argument"}, {"sha": "b1c2f3e05301a3b7aad233042e55995fe656fc5d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb771b9dad6ef78a985353128cea48e620eb4324/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb771b9dad6ef78a985353128cea48e620eb4324/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fb771b9dad6ef78a985353128cea48e620eb4324", "patch": "@@ -1,3 +1,9 @@\n+2017-11-13  Tom Tromey  <tom@tromey.com>\n+\n+\t* c-c++-common/cpp/va-opt-pedantic.c: New file.\n+\t* c-c++-common/cpp/va-opt.c: New file.\n+\t* c-c++-common/cpp/va-opt-error.c: New file.\n+\n 2017-11-13  Carl Love  <cel@us.ibm.com>\n \n \t* gcc.target/powerpc/builtins-6-p9-runnable.c: Add new runnable test."}, {"sha": "f32f0551723d597236dad70d9c259907f865ad71", "filename": "gcc/testsuite/c-c++-common/cpp/va-opt-error.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb771b9dad6ef78a985353128cea48e620eb4324/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb771b9dad6ef78a985353128cea48e620eb4324/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-error.c?ref=fb771b9dad6ef78a985353128cea48e620eb4324", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do preprocess }*/\n+/* { dg-options \"-std=gnu99\" { target c } } */\n+/* { dg-options \"-std=c++2a\" { target c++ } } */\n+\n+#define ERR1(x) __VA_OPT__ /* { dg-warning \"__VA_OPT__ can only appear\" } */\n+#define ERR2(x) __VA_OPT__( /* { dg-warning \"can only appear\" } */\n+#define ERR3(x) __VA_OPT__() /* { dg-warning \"can only appear\" } */\n+\n+#define ERR4(x,...) __VA_OPT__ /* { dg-error \"unterminated __VA_OPT__\" } */\n+#define ERR5(x,...) __VA_OPT__( /* { dg-error \"unterminated\" } */\n+#define ERR6(x,...) __VA_OPT__(() /* { dg-error \"unterminated\" } */\n+\n+#define ERR7(x,...) __VA_OPT__(__VA_OPT__) /* { dg-error \"may not appear\" } */\n+#define ERR7(x,...) __VA_OPT__(__VA_OPT__()) /* { dg-error \"may not appear\" } */\n+\n+#define ERR8(x, y,...) x __VA_OPT__(##) y /* { dg-error \"either end\" } */\n+#define ERR9(x, y,...) x __VA_OPT__(x ##) y /* { dg-error \"either end\" } */\n+#define ERRA(x, y,...) x x __VA_OPT__(## y) /* { dg-error \"either end\" } */\n+\n+#define ERRB __VA_OPT__ /* { dg-warning \"can only appear\" } */\n+#define ERRC(__VA_OPT__) x /* { dg-warning \"can only appear\" } */\n+\n+__VA_OPT__ /* { dg-warning \"can only appear\" } */\n+\n+#define ERRD(x)\n+ERRD(__VA_OPT__) /* { dg-warning \"can only appear\" } */\n+\n+#define __VA_OPT__ /* { dg-warning \"can only appear\" } */"}, {"sha": "5887bf5a4840091c0349ff92f9ca9eeac1a1cdb0", "filename": "gcc/testsuite/c-c++-common/cpp/va-opt-pedantic.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb771b9dad6ef78a985353128cea48e620eb4324/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-pedantic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb771b9dad6ef78a985353128cea48e620eb4324/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-pedantic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-pedantic.c?ref=fb771b9dad6ef78a985353128cea48e620eb4324", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do preprocess }*/\n+/* { dg-options \"-std=c11 -pedantic-errors\" { target c } } */\n+/* { dg-options \"-std=c++17 -pedantic-errors\" { target c++ } } */\n+\n+#define CALL(F, ...) F (7 __VA_OPT__(,) __VA_ARGS__) /* { dg-error \"__VA_OPT__ is not available\" } */"}, {"sha": "243d33b2cf1f3172dc5f2769c37e1b5cd37d37c6", "filename": "gcc/testsuite/c-c++-common/cpp/va-opt.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb771b9dad6ef78a985353128cea48e620eb4324/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb771b9dad6ef78a985353128cea48e620eb4324/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt.c?ref=fb771b9dad6ef78a985353128cea48e620eb4324", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" { target c } } */\n+/* { dg-options \"-std=c++2a\" { target c++ } } */\n+\n+extern void f0 (void);\n+extern void f1 (int);\n+extern void f2 (int, int);\n+extern void f3 (int, int, int);\n+extern void f4 (int, int, int, int);\n+extern int s (const char *);\n+\n+#define CALL(F, ...) F (7 __VA_OPT__(,) __VA_ARGS__)\n+#define CP(F, X, Y, ...) F (__VA_OPT__(X ## Y,) __VA_ARGS__)\n+#define CS(F, ...) F(__VA_OPT__(s(# __VA_ARGS__)))\n+#define D(F, ...) F(__VA_OPT__(__VA_ARGS__) __VA_OPT__(,) __VA_ARGS__)\n+#define CALL0(...) __VA_OPT__(f2)(0 __VA_OPT__(,)__VA_ARGS__)\n+\n+void t (void)\n+{\n+  CALL (f1);\n+  CALL (f1, );\n+  CALL (f2, 1);\n+  CALL (f3, 1, 2);\n+\n+  int one = 1;\n+  int two = 2;\n+  int onetwo = 23;\n+\n+  CP (f0, one, two);\n+  CP (f0, one, two, );\n+  CP (f2, one, two, 3);\n+\n+  CS (f0);\n+  CS (f1, 1, 2, 3, 4);\n+\n+  D (f0);\n+  D (f2, 1);\n+  D (f4, 1, 2);\n+\n+  CALL0 ();\n+  CALL0 (23);\n+}"}, {"sha": "70c834c61d065e4ae08f637607fd682734e36715", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb771b9dad6ef78a985353128cea48e620eb4324/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb771b9dad6ef78a985353128cea48e620eb4324/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=fb771b9dad6ef78a985353128cea48e620eb4324", "patch": "@@ -1,3 +1,22 @@\n+2017-11-13  Tom Tromey  <tom@tromey.com>\n+\n+\t* pch.c (cpp_read_state): Set n__VA_OPT__.\n+\t* macro.c (vaopt_state): New class.\n+\t(_cpp_arguments_ok): Check va_opt flag.\n+\t(replace_args, create_iso_definition): Use vaopt_state.\n+\t* lex.c (lex_identifier_intern): Possibly issue errors for\n+\t__VA_OPT__.\n+\t(lex_identifier): Likewise.\n+\t(maybe_va_opt_error): New function.\n+\t* internal.h (struct lexer_state) <va_args_ok>: Update comment.\n+\t(struct spec_nodes) <n__VA_OPT__>: New field.\n+\t* init.c (struct lang_flags) <va_opt>: New field.\n+\t(lang_defaults): Add entries for C++2A.  Update all entries for\n+\tva_opt.\n+\t(cpp_set_lang): Initialize va_opt.\n+\t* include/cpplib.h (struct cpp_options) <va_opt>: New field.\n+\t* identifiers.c (_cpp_init_hashtable): Initialize n__VA_OPT__.\n+\n 2017-11-13  David Malcolm  <dmalcolm@redhat.com>\n \n \t* include/line-map.h (linenum_type): Move this typedef and the"}, {"sha": "e456fd3a4fcac1e6ba4ba4eae2506141c488686c", "filename": "libcpp/identifiers.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb771b9dad6ef78a985353128cea48e620eb4324/libcpp%2Fidentifiers.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb771b9dad6ef78a985353128cea48e620eb4324/libcpp%2Fidentifiers.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fidentifiers.c?ref=fb771b9dad6ef78a985353128cea48e620eb4324", "patch": "@@ -70,6 +70,8 @@ _cpp_init_hashtable (cpp_reader *pfile, cpp_hash_table *table)\n   s->n_false\t\t= cpp_lookup (pfile, DSC(\"false\"));\n   s->n__VA_ARGS__       = cpp_lookup (pfile, DSC(\"__VA_ARGS__\"));\n   s->n__VA_ARGS__->flags |= NODE_DIAGNOSTIC;\n+  s->n__VA_OPT__        = cpp_lookup (pfile, DSC(\"__VA_OPT__\"));\n+  s->n__VA_OPT__->flags |= NODE_DIAGNOSTIC;\n   s->n__has_include__   = cpp_lookup (pfile, DSC(\"__has_include__\"));\n   s->n__has_include_next__ = cpp_lookup (pfile, DSC(\"__has_include_next__\"));\n }"}, {"sha": "101b33aef480062de821fb40074667572b05b7cc", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb771b9dad6ef78a985353128cea48e620eb4324/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb771b9dad6ef78a985353128cea48e620eb4324/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=fb771b9dad6ef78a985353128cea48e620eb4324", "patch": "@@ -478,6 +478,9 @@ struct cpp_options\n   /* Nonzero for C++ 2014 Standard digit separators.  */\n   unsigned char digit_separators;\n \n+  /* Nonzero for C++2a __VA_OPT__ feature.  */\n+  unsigned char va_opt;\n+\n   /* Holds the name of the target (execution) character set.  */\n   const char *narrow_charset;\n "}, {"sha": "8423656ad10ab680942245fd8c2eb2de55ae4b39", "filename": "libcpp/init.c", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb771b9dad6ef78a985353128cea48e620eb4324/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb771b9dad6ef78a985353128cea48e620eb4324/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=fb771b9dad6ef78a985353128cea48e620eb4324", "patch": "@@ -91,30 +91,31 @@ struct lang_flags\n   char digit_separators;\n   char trigraphs;\n   char utf8_char_literals;\n+  char va_opt;\n };\n \n static const struct lang_flags lang_defaults[] =\n-{ /*              c99 c++ xnum xid c11 std digr ulit rlit udlit bincst digsep trig u8chlit */\n-  /* GNUC89   */  { 0,  0,  1,  0,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0 },\n-  /* GNUC99   */  { 1,  0,  1,  1,  0,  0,  1,   1,   1,   0,    0,     0,     0,   0 },\n-  /* GNUC11   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0 },\n-  /* GNUC17   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0 },\n-  /* STDC89   */  { 0,  0,  0,  0,  0,  1,  0,   0,   0,   0,    0,     0,     1,   0 },\n-  /* STDC94   */  { 0,  0,  0,  0,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0 },\n-  /* STDC99   */  { 1,  0,  1,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0 },\n-  /* STDC11   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0 },\n-  /* STDC17   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0 },\n-  /* GNUCXX   */  { 0,  1,  1,  1,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0 },\n-  /* CXX98    */  { 0,  1,  0,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0 },\n-  /* GNUCXX11 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    0,     0,     0,   0 },\n-  /* CXX11    */  { 1,  1,  0,  1,  1,  1,  1,   1,   1,   1,    0,     0,     1,   0 },\n-  /* GNUCXX14 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   0 },\n-  /* CXX14    */  { 1,  1,  0,  1,  1,  1,  1,   1,   1,   1,    1,     1,     1,   0 },\n-  /* GNUCXX17 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1 },\n-  /* CXX17    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1 },\n-  /* GNUCXX2A */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1 },\n-  /* CXX2A    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1 },\n-  /* ASM      */  { 0,  0,  1,  0,  0,  0,  0,   0,   0,   0,    0,     0,     0,   0 }\n+{ /*              c99 c++ xnum xid c11 std digr ulit rlit udlit bincst digsep trig u8chlit vaopt */\n+  /* GNUC89   */  { 0,  0,  1,  0,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0,      1 },\n+  /* GNUC99   */  { 1,  0,  1,  1,  0,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1 },\n+  /* GNUC11   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1 },\n+  /* GNUC17   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1 },\n+  /* STDC89   */  { 0,  0,  0,  0,  0,  1,  0,   0,   0,   0,    0,     0,     1,   0,      0 },\n+  /* STDC94   */  { 0,  0,  0,  0,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0 },\n+  /* STDC99   */  { 1,  0,  1,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0 },\n+  /* STDC11   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0 },\n+  /* STDC17   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0 },\n+  /* GNUCXX   */  { 0,  1,  1,  1,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0,      1 },\n+  /* CXX98    */  { 0,  1,  0,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0 },\n+  /* GNUCXX11 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    0,     0,     0,   0,      1 },\n+  /* CXX11    */  { 1,  1,  0,  1,  1,  1,  1,   1,   1,   1,    0,     0,     1,   0,      0 },\n+  /* GNUCXX14 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   0,      1 },\n+  /* CXX14    */  { 1,  1,  0,  1,  1,  1,  1,   1,   1,   1,    1,     1,     1,   0,      0 },\n+  /* GNUCXX17 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1 },\n+  /* CXX17    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      0 },\n+  /* GNUCXX2A */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1 },\n+  /* CXX2A    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      1 },\n+  /* ASM      */  { 0,  0,  1,  0,  0,  0,  0,   0,   0,   0,    0,     0,     0,   0,      0 }\n };\n \n /* Sets internal flags correctly for a given language.  */\n@@ -139,6 +140,7 @@ cpp_set_lang (cpp_reader *pfile, enum c_lang lang)\n   CPP_OPTION (pfile, digit_separators)\t\t = l->digit_separators;\n   CPP_OPTION (pfile, trigraphs)\t\t\t = l->trigraphs;\n   CPP_OPTION (pfile, utf8_char_literals)\t = l->utf8_char_literals;\n+  CPP_OPTION (pfile, va_opt)\t\t\t = l->va_opt;\n }\n \n /* Initialize library global state.  */"}, {"sha": "0a33abafd43f34daadd4339387a112c199536672", "filename": "libcpp/internal.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb771b9dad6ef78a985353128cea48e620eb4324/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb771b9dad6ef78a985353128cea48e620eb4324/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=fb771b9dad6ef78a985353128cea48e620eb4324", "patch": "@@ -246,7 +246,7 @@ struct lexer_state\n      all directives apart from #define.  */\n   unsigned char save_comments;\n \n-  /* Nonzero if lexing __VA_ARGS__ is valid.  */\n+  /* Nonzero if lexing __VA_ARGS__ and __VA_OPT__ are valid.  */\n   unsigned char va_args_ok;\n \n   /* Nonzero if lexing poisoned identifiers is valid.  */\n@@ -282,6 +282,7 @@ struct spec_nodes\n   cpp_hashnode *n_true;\t\t\t/* C++ keyword true */\n   cpp_hashnode *n_false;\t\t/* C++ keyword false */\n   cpp_hashnode *n__VA_ARGS__;\t\t/* C99 vararg macros */\n+  cpp_hashnode *n__VA_OPT__;\t\t/* C++ vararg macros */\n   cpp_hashnode *n__has_include__;\t/* __has_include__ operator */\n   cpp_hashnode *n__has_include_next__;\t/* __has_include_next__ operator */\n };"}, {"sha": "a8dc3bae5e4e7b575462d493c9c11c58b07a58fa", "filename": "libcpp/lex.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb771b9dad6ef78a985353128cea48e620eb4324/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb771b9dad6ef78a985353128cea48e620eb4324/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=fb771b9dad6ef78a985353128cea48e620eb4324", "patch": "@@ -1352,6 +1352,28 @@ forms_identifier_p (cpp_reader *pfile, int first,\n   return false;\n }\n \n+/* Helper function to issue error about improper __VA_OPT__ use.  */\n+static void\n+maybe_va_opt_error (cpp_reader *pfile)\n+{\n+  if (CPP_PEDANTIC (pfile) && !CPP_OPTION (pfile, va_opt))\n+    {\n+      /* __VA_OPT__ should not be accepted at all, but allow it in\n+\t system headers.  */\n+      if (!cpp_in_system_header (pfile))\n+\tcpp_error (pfile, CPP_DL_PEDWARN,\n+\t\t   \"__VA_OPT__ is not available until C++2a\");\n+    }\n+  else if (!pfile->state.va_args_ok)\n+    {\n+      /* __VA_OPT__ should only appear in the replacement list of a\n+\t variadic macro.  */\n+      cpp_error (pfile, CPP_DL_PEDWARN,\n+\t\t \"__VA_OPT__ can only appear in the expansion\"\n+\t\t \" of a C++2a variadic macro\");\n+    }\n+}\n+\n /* Helper function to get the cpp_hashnode of the identifier BASE.  */\n static cpp_hashnode *\n lex_identifier_intern (cpp_reader *pfile, const uchar *base)\n@@ -1396,6 +1418,9 @@ lex_identifier_intern (cpp_reader *pfile, const uchar *base)\n \t\t       \" of a C99 variadic macro\");\n \t}\n \n+      if (result == pfile->spec_nodes.n__VA_OPT__)\n+\tmaybe_va_opt_error (pfile);\n+\n       /* For -Wc++-compat, warn about use of C++ named operators.  */\n       if (result->flags & NODE_WARN_OPERATOR)\n \tcpp_warning (pfile, CPP_W_CXX_OPERATOR_NAMES,\n@@ -1485,6 +1510,11 @@ lex_identifier (cpp_reader *pfile, const uchar *base, bool starts_ucn,\n \t\t       \" of a C99 variadic macro\");\n \t}\n \n+      /* __VA_OPT__ should only appear in the replacement list of a\n+\t variadic macro.  */\n+      if (result == pfile->spec_nodes.n__VA_OPT__)\n+\tmaybe_va_opt_error (pfile);\n+\n       /* For -Wc++-compat, warn about use of C++ named operators.  */\n       if (result->flags & NODE_WARN_OPERATOR)\n \tcpp_warning (pfile, CPP_W_CXX_OPERATOR_NAMES,"}, {"sha": "bf473eae358699db4d4845e96cd19da1d5ed629f", "filename": "libcpp/macro.c", "status": "modified", "additions": 168, "deletions": 2, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb771b9dad6ef78a985353128cea48e620eb4324/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb771b9dad6ef78a985353128cea48e620eb4324/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=fb771b9dad6ef78a985353128cea48e620eb4324", "patch": "@@ -89,6 +89,155 @@ struct macro_arg_saved_data {\n   union _cpp_hashnode_value value;\n };\n \n+static const char *vaopt_paste_error =\n+  N_(\"'##' cannot appear at either end of __VA_OPT__\");\n+\n+/* A class for tracking __VA_OPT__ state while iterating over a\n+   sequence of tokens.  This is used during both macro definition and\n+   expansion.  */\n+class vaopt_state {\n+\n+ public:\n+\n+  /* Initialize the state tracker.  ANY_ARGS is true if variable\n+     arguments were provided to the macro invocation.  */\n+  vaopt_state (cpp_reader *pfile, bool is_variadic, bool any_args)\n+    : m_pfile (pfile),\n+    m_allowed (any_args),\n+    m_variadic (is_variadic),\n+    m_state (0),\n+    m_last_was_paste (false),\n+    m_paste_location (0),\n+    m_location (0)\n+  {\n+  }\n+\n+  enum update_type\n+  {\n+    ERROR,\n+    DROP,\n+    INCLUDE\n+  };\n+\n+  /* Given a token, update the state of this tracker and return a\n+     boolean indicating whether the token should be be included in the\n+     expansion.  */\n+  update_type update (const cpp_token *token)\n+  {\n+    /* If the macro isn't variadic, just don't bother.  */\n+    if (!m_variadic)\n+      return INCLUDE;\n+\n+    if (token->type == CPP_NAME\n+\t&& token->val.node.node == m_pfile->spec_nodes.n__VA_OPT__)\n+      {\n+\tif (m_state > 0)\n+\t  {\n+\t    cpp_error_at (m_pfile, CPP_DL_ERROR, token->src_loc,\n+\t\t\t  \"__VA_OPT__ may not appear in a __VA_OPT__\");\n+\t    return ERROR;\n+\t  }\n+\t++m_state;\n+\tm_location = token->src_loc;\n+\treturn DROP;\n+      }\n+    else if (m_state == 1)\n+      {\n+\tif (token->type != CPP_OPEN_PAREN)\n+\t  {\n+\t    cpp_error_at (m_pfile, CPP_DL_ERROR, m_location,\n+\t\t\t  \"__VA_OPT__ must be followed by an \"\n+\t\t\t  \"open parenthesis\");\n+\t    return ERROR;\n+\t  }\n+\t++m_state;\n+\treturn DROP;\n+      }\n+    else if (m_state >= 2)\n+      {\n+\tif (m_state == 2 && token->type == CPP_PASTE)\n+\t  {\n+\t    cpp_error_at (m_pfile, CPP_DL_ERROR, token->src_loc,\n+\t\t\t  vaopt_paste_error);\n+\t    return ERROR;\n+\t  }\n+\t/* Advance states before further considering this token, in\n+\t   case we see a close paren immediately after the open\n+\t   paren.  */\n+\tif (m_state == 2)\n+\t  ++m_state;\n+\n+\tbool was_paste = m_last_was_paste;\n+\tm_last_was_paste = false;\n+\tif (token->type == CPP_PASTE)\n+\t  {\n+\t    m_last_was_paste = true;\n+\t    m_paste_location = token->src_loc;\n+\t  }\n+\telse if (token->type == CPP_OPEN_PAREN)\n+\t  ++m_state;\n+\telse if (token->type == CPP_CLOSE_PAREN)\n+\t  {\n+\t    --m_state;\n+\t    if (m_state == 2)\n+\t      {\n+\t\t/* Saw the final paren.  */\n+\t\tm_state = 0;\n+\n+\t\tif (was_paste)\n+\t\t  {\n+\t\t    cpp_error_at (m_pfile, CPP_DL_ERROR, token->src_loc,\n+\t\t\t\t  vaopt_paste_error);\n+\t\t    return ERROR;\n+\t\t  }\n+\n+\t\treturn DROP;\n+\t      }\n+\t  }\n+\treturn m_allowed ? INCLUDE : DROP;\n+      }\n+\n+    /* Nothing to do with __VA_OPT__.  */\n+    return INCLUDE;\n+  }\n+\n+  /* Ensure that any __VA_OPT__ was completed.  If ok, return true.\n+     Otherwise, issue an error and return false.  */\n+  bool completed ()\n+  {\n+    if (m_variadic && m_state != 0)\n+      cpp_error_at (m_pfile, CPP_DL_ERROR, m_location,\n+\t\t    \"unterminated __VA_OPT__\");\n+    return m_state == 0;\n+  }\n+\n+ private:\n+\n+  /* The cpp_reader.  */\n+  cpp_reader *m_pfile;\n+\n+  /* True if there were varargs.  */\n+  bool m_allowed;\n+  /* True if the macro is variadic.  */\n+  bool m_variadic;\n+\n+  /* The state variable:\n+     0 means not parsing\n+     1 means __VA_OPT__ seen, looking for \"(\"\n+     2 means \"(\" seen (so the next token can't be \"##\")\n+     >= 3 means looking for \")\", the number encodes the paren depth.  */\n+  int m_state;\n+\n+  /* If true, the previous token was ##.  This is used to detect when\n+     a paste occurs at the end of the sequence.  */\n+  bool m_last_was_paste;\n+  /* The location of the paste token.  */\n+  source_location m_paste_location;\n+\n+  /* Location of the __VA_OPT__ token.  */\n+  source_location m_location;\n+};\n+\n /* Macro expansion.  */\n \n static int enter_macro_context (cpp_reader *, cpp_hashnode *,\n@@ -776,7 +925,8 @@ _cpp_arguments_ok (cpp_reader *pfile, cpp_macro *macro, const cpp_hashnode *node\n \n   if (argc < macro->paramc)\n     {\n-      /* As an extension, variadic arguments are allowed to not appear in\n+      /* In C++2a (here the va_opt flag is used), and also as a GNU\n+\t extension, variadic arguments are allowed to not appear in\n \t the invocation at all.\n \t e.g. #define debug(format, args...) something\n \t debug(\"string\");\n@@ -786,7 +936,8 @@ _cpp_arguments_ok (cpp_reader *pfile, cpp_macro *macro, const cpp_hashnode *node\n \n       if (argc + 1 == macro->paramc && macro->variadic)\n \t{\n-\t  if (CPP_PEDANTIC (pfile) && ! macro->syshdr)\n+\t  if (CPP_PEDANTIC (pfile) && ! macro->syshdr\n+\t      && ! CPP_OPTION (pfile, va_opt))\n \t    {\n \t      if (CPP_OPTION (pfile, cplusplus))\n \t\tcpp_error (pfile, CPP_DL_PEDWARN,\n@@ -1678,13 +1829,19 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n \t\t\t\t num_macro_tokens);\n     }\n   i = 0;\n+  vaopt_state vaopt_tracker (pfile, macro->variadic,\n+\t\t\t     args[macro->paramc - 1].count > 0);\n   for (src = macro->exp.tokens; src < limit; src++)\n     {\n       unsigned int arg_tokens_count;\n       macro_arg_token_iter from;\n       const cpp_token **paste_flag = NULL;\n       const cpp_token **tmp_token_ptr;\n \n+      /* __VA_OPT__ handling.  */\n+      if (vaopt_tracker.update (src) != vaopt_state::INCLUDE)\n+\tcontinue;\n+\n       if (src->type != CPP_MACRO_ARG)\n \t{\n \t  /* Allocate a virtual location for token SRC, and add that\n@@ -3076,6 +3233,9 @@ create_iso_definition (cpp_reader *pfile, cpp_macro *macro)\n       *token = *ctoken;\n     }\n \n+  /* The argument doesn't matter here.  */\n+  vaopt_state vaopt_tracker (pfile, macro->variadic, true);\n+\n   for (;;)\n     {\n       /* Check the stringifying # constraint 6.10.3.2.1 of\n@@ -3144,10 +3304,16 @@ create_iso_definition (cpp_reader *pfile, cpp_macro *macro)\n \t    }\n \t}\n \n+      if (vaopt_tracker.update (token) == vaopt_state::ERROR)\n+\treturn false;\n+\n       following_paste_op = (token->type == CPP_PASTE);\n       token = lex_expansion_token (pfile, macro);\n     }\n \n+  if (!vaopt_tracker.completed ())\n+    return false;\n+\n   macro->exp.tokens = (cpp_token *) BUFF_FRONT (pfile->a_buff);\n   macro->traditional = 0;\n "}, {"sha": "b685a38a854545bd73ef6e90c181986b8d8af621", "filename": "libcpp/pch.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb771b9dad6ef78a985353128cea48e620eb4324/libcpp%2Fpch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb771b9dad6ef78a985353128cea48e620eb4324/libcpp%2Fpch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fpch.c?ref=fb771b9dad6ef78a985353128cea48e620eb4324", "patch": "@@ -835,6 +835,7 @@ cpp_read_state (cpp_reader *r, const char *name, FILE *f,\n     s->n_true\t\t= cpp_lookup (r, DSC(\"true\"));\n     s->n_false\t\t= cpp_lookup (r, DSC(\"false\"));\n     s->n__VA_ARGS__     = cpp_lookup (r, DSC(\"__VA_ARGS__\"));\n+    s->n__VA_OPT__      = cpp_lookup (r, DSC(\"__VA_OPT__\"));\n     s->n__has_include__ = cpp_lookup (r, DSC(\"__has_include__\"));\n     s->n__has_include_next__ = cpp_lookup (r, DSC(\"__has_include_next__\"));\n   }"}]}