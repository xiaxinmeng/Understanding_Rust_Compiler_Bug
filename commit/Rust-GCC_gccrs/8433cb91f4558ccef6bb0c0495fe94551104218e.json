{"sha": "8433cb91f4558ccef6bb0c0495fe94551104218e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQzM2NiOTFmNDU1OGNjZWY2YmIwYzA0OTVmZTk0NTUxMTA0MjE4ZQ==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2016-04-11T10:16:26Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2016-04-11T10:16:26Z"}, "message": "[Patch AArch64 3/3] Fix up for pr70133\n\ngcc/\n\n\tPR target/70133\n\t* config/aarch64/driver-aarch64.c\n\t(aarch64_get_extension_string_for_isa_flags): New.\n\t(arch_extension): Rename to...\n\t(aarch64_arch_extension): ...This.\n\t(ext_to_feat_string): Rename to...\n\t(aarch64_extensions): ...This.\n\t(aarch64_core_data): Keep track of architecture extension flags.\n\t(cpu_data): Rename to...\n\t(aarch64_cpu_data): ...This.\n\t(aarch64_arch_driver_info): Keep track of architecture extension\n\tflags.\n\t(get_arch_name_from_id): Rename to...\n\t(get_arch_from_id): ...This, change return type.\n\t(host_detect_local_cpu): Update and reformat for renames, handle\n\textensions through common infrastructure.\n\nFrom-SVN: r234877", "tree": {"sha": "c4d62c2cb766dfce07321c37a0020a26aae9f8b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4d62c2cb766dfce07321c37a0020a26aae9f8b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8433cb91f4558ccef6bb0c0495fe94551104218e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8433cb91f4558ccef6bb0c0495fe94551104218e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8433cb91f4558ccef6bb0c0495fe94551104218e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8433cb91f4558ccef6bb0c0495fe94551104218e/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "04a99ebecee885e42e56b6e0c832570e2a91c196", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a99ebecee885e42e56b6e0c832570e2a91c196", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04a99ebecee885e42e56b6e0c832570e2a91c196"}], "stats": {"total": 206, "additions": 129, "deletions": 77}, "files": [{"sha": "a59d245124a9c70da7708b203144b235ba643d3a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433cb91f4558ccef6bb0c0495fe94551104218e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433cb91f4558ccef6bb0c0495fe94551104218e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8433cb91f4558ccef6bb0c0495fe94551104218e", "patch": "@@ -1,3 +1,22 @@\n+2016-04-11  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\tPR target/70133\n+\t* config/aarch64/driver-aarch64.c\n+\t(aarch64_get_extension_string_for_isa_flags): New.\n+\t(arch_extension): Rename to...\n+\t(aarch64_arch_extension): ...This.\n+\t(ext_to_feat_string): Rename to...\n+\t(aarch64_extensions): ...This.\n+\t(aarch64_core_data): Keep track of architecture extension flags.\n+\t(cpu_data): Rename to...\n+\t(aarch64_cpu_data): ...This.\n+\t(aarch64_arch_driver_info): Keep track of architecture extension\n+\tflags.\n+\t(get_arch_name_from_id): Rename to...\n+\t(get_arch_from_id): ...This, change return type.\n+\t(host_detect_local_cpu): Update and reformat for renames, handle\n+\textensions through common infrastructure.\n+\n 2016-04-11  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \tPR target/70133"}, {"sha": "ce771ec7ac1d797eebb8bffa281549d1fce75554", "filename": "gcc/config/aarch64/driver-aarch64.c", "status": "modified", "additions": 110, "deletions": 77, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433cb91f4558ccef6bb0c0495fe94551104218e/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433cb91f4558ccef6bb0c0495fe94551104218e/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.c?ref=8433cb91f4558ccef6bb0c0495fe94551104218e", "patch": "@@ -18,9 +18,16 @@\n    <http://www.gnu.org/licenses/>.  */\n \n #include \"config.h\"\n+#define INCLUDE_STRING\n #include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n \n-struct arch_extension\n+/* Defined in common/config/aarch64/aarch64-common.c.  */\n+std::string aarch64_get_extension_string_for_isa_flags (unsigned long,\n+\t\t\t\t\t\t\tunsigned long);\n+\n+struct aarch64_arch_extension\n {\n   const char *ext;\n   unsigned int flag;\n@@ -29,7 +36,7 @@ struct arch_extension\n \n #define AARCH64_OPT_EXTENSION(EXT_NAME, FLAG_CANONICAL, FLAGS_ON, FLAGS_OFF, FEATURE_STRING) \\\n   { EXT_NAME, FLAG_CANONICAL, FEATURE_STRING },\n-static struct arch_extension ext_to_feat_string[] =\n+static struct aarch64_arch_extension aarch64_extensions[] =\n {\n #include \"aarch64-option-extensions.def\"\n };\n@@ -42,15 +49,16 @@ struct aarch64_core_data\n   const char* arch;\n   const char* implementer_id;\n   const char* part_no;\n+  const unsigned long flags;\n };\n \n #define AARCH64_CORE(CORE_NAME, CORE_IDENT, SCHED, ARCH, FLAGS, COSTS, IMP, PART) \\\n-  { CORE_NAME, #ARCH, IMP, PART },\n+  { CORE_NAME, #ARCH, IMP, PART, FLAGS },\n \n-static struct aarch64_core_data cpu_data [] =\n+static struct aarch64_core_data aarch64_cpu_data[] =\n {\n #include \"aarch64-cores.def\"\n-  { NULL, NULL, NULL, NULL }\n+  { NULL, NULL, NULL, NULL, 0 }\n };\n \n #undef AARCH64_CORE\n@@ -59,37 +67,37 @@ struct aarch64_arch_driver_info\n {\n   const char* id;\n   const char* name;\n+  const unsigned long flags;\n };\n \n #define AARCH64_ARCH(NAME, CORE, ARCH_IDENT, ARCH_REV, FLAGS) \\\n-  { #ARCH_IDENT, NAME  },\n+  { #ARCH_IDENT, NAME, FLAGS },\n \n-static struct aarch64_arch_driver_info aarch64_arches [] =\n+static struct aarch64_arch_driver_info aarch64_arches[] =\n {\n #include \"aarch64-arches.def\"\n-  {NULL, NULL}\n+  {NULL, NULL, 0}\n };\n \n #undef AARCH64_ARCH\n \n-/* Return the full architecture name string corresponding to the\n-   identifier ID.  */\n+/* Return an aarch64_arch_driver_info for the architecture described\n+   by ID, or NULL if ID describes something we don't know about.  */\n \n-static const char*\n-get_arch_name_from_id (const char* id)\n+static struct aarch64_arch_driver_info*\n+get_arch_from_id (const char* id)\n {\n   unsigned int i = 0;\n \n   for (i = 0; aarch64_arches[i].id != NULL; i++)\n     {\n       if (strcmp (id, aarch64_arches[i].id) == 0)\n-        return aarch64_arches[i].name;\n+\treturn &aarch64_arches[i];\n     }\n \n   return NULL;\n }\n \n-\n /* Check wether the string CORE contains the same CPU part numbers\n    as BL_STRING.  For example CORE=\"{0xd03, 0xd07}\" and BL_STRING=\"0xd07.0xd03\"\n    should return true.  */\n@@ -98,7 +106,7 @@ static bool\n valid_bL_string_p (const char** core, const char* bL_string)\n {\n   return strstr (bL_string, core[0]) != NULL\n-         && strstr (bL_string, core[1]) != NULL;\n+    && strstr (bL_string, core[1]) != NULL;\n }\n \n /*  Return true iff ARR contains STR in one of its two elements.  */\n@@ -142,7 +150,7 @@ host_detect_local_cpu (int argc, const char **argv)\n {\n   const char *arch_id = NULL;\n   const char *res = NULL;\n-  static const int num_exts = ARRAY_SIZE (ext_to_feat_string);\n+  static const int num_exts = ARRAY_SIZE (aarch64_extensions);\n   char buf[128];\n   FILE *f = NULL;\n   bool arch = false;\n@@ -156,6 +164,8 @@ host_detect_local_cpu (int argc, const char **argv)\n   unsigned int n_imps = 0;\n   bool processed_exts = false;\n   const char *ext_string = \"\";\n+  unsigned long extension_flags = 0;\n+  unsigned long default_flags = 0;\n \n   gcc_assert (argc);\n \n@@ -184,60 +194,71 @@ host_detect_local_cpu (int argc, const char **argv)\n     {\n       if (strstr (buf, \"implementer\") != NULL)\n \t{\n-\t  for (i = 0; cpu_data[i].name != NULL; i++)\n-\t    if (strstr (buf, cpu_data[i].implementer_id) != NULL\n-                && !contains_string_p (imps, cpu_data[i].implementer_id))\n+\t  for (i = 0; aarch64_cpu_data[i].name != NULL; i++)\n+\t    if (strstr (buf, aarch64_cpu_data[i].implementer_id) != NULL\n+\t\t&& !contains_string_p (imps,\n+\t\t\t\t       aarch64_cpu_data[i].implementer_id))\n \t      {\n-                if (n_imps == 2)\n-                  goto not_found;\n+\t\tif (n_imps == 2)\n+\t\t  goto not_found;\n \n-                imps[n_imps++] = cpu_data[i].implementer_id;\n+\t\timps[n_imps++] = aarch64_cpu_data[i].implementer_id;\n \n-                break;\n+\t\tbreak;\n \t      }\n-          continue;\n+\t  continue;\n \t}\n \n       if (strstr (buf, \"part\") != NULL)\n \t{\n-\t  for (i = 0; cpu_data[i].name != NULL; i++)\n-\t    if (strstr (buf, cpu_data[i].part_no) != NULL\n-                && !contains_string_p (cores, cpu_data[i].part_no))\n+\t  for (i = 0; aarch64_cpu_data[i].name != NULL; i++)\n+\t    if (strstr (buf, aarch64_cpu_data[i].part_no) != NULL\n+\t\t&& !contains_string_p (cores, aarch64_cpu_data[i].part_no))\n \t      {\n-                if (n_cores == 2)\n-                  goto not_found;\n+\t\tif (n_cores == 2)\n+\t\t  goto not_found;\n \n-                cores[n_cores++] = cpu_data[i].part_no;\n-\t        core_idx = i;\n-\t        arch_id = cpu_data[i].arch;\n-\t        break;\n+\t\tcores[n_cores++] = aarch64_cpu_data[i].part_no;\n+\t\tcore_idx = i;\n+\t\tarch_id = aarch64_cpu_data[i].arch;\n+\t\tbreak;\n \t      }\n-          continue;\n-        }\n+\t  continue;\n+\t}\n       if (!tune && !processed_exts && strstr (buf, \"Features\") != NULL)\n-        {\n-          for (i = 0; i < num_exts; i++)\n-            {\n-              bool enabled = true;\n-              char *p = NULL;\n-              char *feat_string = concat (ext_to_feat_string[i].feat_string, NULL);\n-\n-              p = strtok (feat_string, \" \");\n-\n-              while (p != NULL)\n-                {\n-                  if (strstr (buf, p) == NULL)\n-                    {\n-                      enabled = false;\n-                      break;\n-                    }\n-                  p = strtok (NULL, \" \");\n-                }\n-              ext_string = concat (ext_string, \"+\", enabled ? \"\" : \"no\",\n-                                   ext_to_feat_string[i].ext, NULL);\n-            }\n-          processed_exts = true;\n-        }\n+\t{\n+\t  for (i = 0; i < num_exts; i++)\n+\t    {\n+\t      char *p = NULL;\n+\t      char *feat_string\n+\t\t= concat (aarch64_extensions[i].feat_string, NULL);\n+\t      bool enabled = true;\n+\n+\t      /* This may be a multi-token feature string.  We need\n+\t\t to match all parts, which could be in any order.\n+\t\t If this isn't a multi-token feature string, strtok is\n+\t\t just going to return a pointer to feat_string.  */\n+\t      p = strtok (feat_string, \" \");\n+\t      while (p != NULL)\n+\t\t{\n+\t\t  if (strstr (buf, p) == NULL)\n+\t\t    {\n+\t\t      /* Failed to match this token.  Turn off the\n+\t\t\t features we'd otherwise enable.  */\n+\t\t      enabled = false;\n+\t\t      break;\n+\t\t    }\n+\t\t  p = strtok (NULL, \" \");\n+\t\t}\n+\n+\t      if (enabled)\n+\t\textension_flags |= aarch64_extensions[i].flag;\n+\t      else\n+\t\textension_flags &= ~(aarch64_extensions[i].flag);\n+\t    }\n+\n+\t  processed_exts = true;\n+\t}\n     }\n \n   fclose (f);\n@@ -252,44 +273,56 @@ host_detect_local_cpu (int argc, const char **argv)\n \n   if (arch)\n     {\n-      const char* arch_name = get_arch_name_from_id (arch_id);\n+      struct aarch64_arch_driver_info* arch_info = get_arch_from_id (arch_id);\n \n       /* We got some arch indentifier that's not in aarch64-arches.def?  */\n-      if (!arch_name)\n-        goto not_found;\n+      if (!arch_info)\n+\tgoto not_found;\n \n-      res = concat (\"-march=\", arch_name, NULL);\n+      res = concat (\"-march=\", arch_info->name, NULL);\n+      default_flags = arch_info->flags;\n     }\n   /* We have big.LITTLE.  */\n   else if (n_cores == 2)\n     {\n-      for (i = 0; cpu_data[i].name != NULL; i++)\n-        {\n-          if (strchr (cpu_data[i].part_no, '.') != NULL\n-              && strncmp (cpu_data[i].implementer_id, imps[0], strlen (imps[0]) - 1) == 0\n-              && valid_bL_string_p (cores, cpu_data[i].part_no))\n-            {\n-              res = concat (\"-m\", cpu ? \"cpu\" : \"tune\", \"=\", cpu_data[i].name, NULL);\n-              break;\n-            }\n-        }\n+      for (i = 0; aarch64_cpu_data[i].name != NULL; i++)\n+\t{\n+\t  if (strchr (aarch64_cpu_data[i].part_no, '.') != NULL\n+\t      && strncmp (aarch64_cpu_data[i].implementer_id,\n+\t\t\t  imps[0],\n+\t\t\t  strlen (imps[0]) - 1) == 0\n+\t      && valid_bL_string_p (cores, aarch64_cpu_data[i].part_no))\n+\t    {\n+\t      res = concat (\"-m\",\n+\t\t\t    cpu ? \"cpu\" : \"tune\", \"=\",\n+\t\t\t    aarch64_cpu_data[i].name,\n+\t\t\t    NULL);\n+\t      default_flags = aarch64_cpu_data[i].flags;\n+\t      break;\n+\t    }\n+\t}\n       if (!res)\n-        goto not_found;\n+\tgoto not_found;\n     }\n   /* The simple, non-big.LITTLE case.  */\n   else\n     {\n-      if (strncmp (cpu_data[core_idx].implementer_id, imps[0],\n-                   strlen (imps[0]) - 1) != 0)\n-        goto not_found;\n+      if (strncmp (aarch64_cpu_data[core_idx].implementer_id, imps[0],\n+\t\t   strlen (imps[0]) - 1) != 0)\n+\tgoto not_found;\n \n       res = concat (\"-m\", cpu ? \"cpu\" : \"tune\", \"=\",\n-                      cpu_data[core_idx].name, NULL);\n+\t\t    aarch64_cpu_data[core_idx].name, NULL);\n+      default_flags = aarch64_cpu_data[core_idx].flags;\n     }\n \n   if (tune)\n     return res;\n \n+  ext_string\n+    = aarch64_get_extension_string_for_isa_flags (extension_flags,\n+\t\t\t\t\t\t  default_flags).c_str ();\n+\n   res = concat (res, ext_string, NULL);\n \n   return res;"}]}