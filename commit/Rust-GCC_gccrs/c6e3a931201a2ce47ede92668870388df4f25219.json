{"sha": "c6e3a931201a2ce47ede92668870388df4f25219", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZlM2E5MzEyMDFhMmNlNDdlZGU5MjY2ODg3MDM4OGRmNGYyNTIxOQ==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2014-10-31T11:55:07Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2014-10-31T11:55:07Z"}, "message": "re PR tree-optimization/63259 (Detecting byteswap sequence)\n\n2014-10-31  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    gcc/\n    PR tree-optimization/63259\n    * tree-ssa-math-opts.c (bswap_replace): Replace expression by a\n    rotation left if it is a 16 bit byte swap.\n    (pass_optimize_bswap::execute): Also consider bswap in LROTATE_EXPR\n    and RROTATE_EXPR statements if it is a byte rotation.\n\n    gcc/testsuite/\n    PR tree-optimization/63259\n    * optimize-bswapsi-1.c (swap32_f): New bswap pass test.\n    * optimize-bswaphi-1.c: Drop useless SIType definition and fix typo in\n    following comment.\n\nFrom-SVN: r216971", "tree": {"sha": "c8d332a3425f18aaecef6c4864fecfd21349ed66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8d332a3425f18aaecef6c4864fecfd21349ed66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6e3a931201a2ce47ede92668870388df4f25219", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6e3a931201a2ce47ede92668870388df4f25219", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6e3a931201a2ce47ede92668870388df4f25219", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6e3a931201a2ce47ede92668870388df4f25219/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aed24d9d740b854c8048d58b9a768a100a25868f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aed24d9d740b854c8048d58b9a768a100a25868f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aed24d9d740b854c8048d58b9a768a100a25868f"}], "stats": {"total": 83, "additions": 68, "deletions": 15}, "files": [{"sha": "f228610d0bb89034bfb3a44b112cc8a5969291b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e3a931201a2ce47ede92668870388df4f25219/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e3a931201a2ce47ede92668870388df4f25219/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6e3a931201a2ce47ede92668870388df4f25219", "patch": "@@ -1,3 +1,11 @@\n+2014-10-31  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\tPR tree-optimization/63259\n+\t* tree-ssa-math-opts.c (bswap_replace): Replace expression by a\n+\trotation left if it is a 16 bit byte swap.\n+\t(pass_optimize_bswap::execute): Also consider bswap in LROTATE_EXPR\n+\tand RROTATE_EXPR statements if it is a byte rotation.\n+\n 2014-10-31  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/63697"}, {"sha": "adc0e3e366d26b38a302a8df1f610f9db6fb8d59", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e3a931201a2ce47ede92668870388df4f25219/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e3a931201a2ce47ede92668870388df4f25219/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c6e3a931201a2ce47ede92668870388df4f25219", "patch": "@@ -1,3 +1,10 @@\n+2014-10-31  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\tPR tree-optimization/63259\n+\t* optimize-bswapsi-1.c (swap32_f): New bswap pass test.\n+\t* optimize-bswaphi-1.c: Drop useless SIType definition and fix typo in\n+\tfollowing comment.\n+\n 2014-10-31  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/63697"}, {"sha": "692fceb951fb3fbe38110ef315d039890e5f8544", "filename": "gcc/testsuite/gcc.dg/optimize-bswaphi-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e3a931201a2ce47ede92668870388df4f25219/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswaphi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e3a931201a2ce47ede92668870388df4f25219/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswaphi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswaphi-1.c?ref=c6e3a931201a2ce47ede92668870388df4f25219", "patch": "@@ -42,11 +42,10 @@ uint32_t read_be16_3 (unsigned char *data)\n   return *(data + 1) | (*data << 8);\n }\n \n-typedef int SItype __attribute__ ((mode (SI)));\n typedef int HItype __attribute__ ((mode (HI)));\n \n /* Test that detection of significant sign extension works correctly. This\n-   checks that unknown byte marker are set correctly in cast of cast.  */\n+   checks that unknown byte markers are set correctly in cast of cast.  */\n \n HItype\n swap16 (HItype in)"}, {"sha": "ad3ede492553e49aec752390748ce234e07a65fc", "filename": "gcc/testsuite/gcc.dg/optimize-bswapsi-1.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e3a931201a2ce47ede92668870388df4f25219/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapsi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e3a931201a2ce47ede92668870388df4f25219/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapsi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapsi-1.c?ref=c6e3a931201a2ce47ede92668870388df4f25219", "patch": "@@ -78,5 +78,16 @@ swap32_e (SItype in)\n \t | (((in >> 24) & 0xFF) << 0);\n }\n \n-/* { dg-final { scan-tree-dump-times \"32 bit bswap implementation found at\" 5 \"bswap\" } } */\n+/* This variant comes from PR63259.  It compiles to a gimple sequence that ends\n+   with a rotation instead of a bitwise OR.  */\n+\n+unsigned\n+swap32_f (unsigned in)\n+{\n+  in = ((in & 0xff00ff00) >>  8) | ((in & 0x00ff00ff) <<  8);\n+  in = ((in & 0xffff0000) >> 16) | ((in & 0x0000ffff) << 16);\n+  return in;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"32 bit bswap implementation found at\" 6 \"bswap\" } } */\n /* { dg-final { cleanup-tree-dump \"bswap\" } } */"}, {"sha": "27825895a272a4309e12dcbfa4ffe440a124b833", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 40, "deletions": 12, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e3a931201a2ce47ede92668870388df4f25219/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e3a931201a2ce47ede92668870388df4f25219/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=c6e3a931201a2ce47ede92668870388df4f25219", "patch": "@@ -2187,7 +2187,7 @@ bswap_replace (gimple cur_stmt, gimple_stmt_iterator gsi, gimple src_stmt,\n \t       struct symbolic_number *n, bool bswap)\n {\n   tree src, tmp, tgt;\n-  gimple call;\n+  gimple bswap_stmt;\n \n   src = gimple_assign_rhs1 (src_stmt);\n   tgt = gimple_assign_lhs (cur_stmt);\n@@ -2293,16 +2293,28 @@ bswap_replace (gimple cur_stmt, gimple_stmt_iterator gsi, gimple src_stmt,\n \n   tmp = src;\n \n-  /* Convert the src expression if necessary.  */\n-  if (!useless_type_conversion_p (TREE_TYPE (tmp), bswap_type))\n+  /* Canonical form for 16 bit bswap is a rotate expression.  */\n+  if (bswap && n->range == 16)\n     {\n-      gimple convert_stmt;\n-      tmp = make_temp_ssa_name (bswap_type, NULL, \"bswapsrc\");\n-      convert_stmt = gimple_build_assign_with_ops (NOP_EXPR, tmp, src, NULL);\n-      gsi_insert_before (&gsi, convert_stmt, GSI_SAME_STMT);\n+      tree count = build_int_cst (NULL, BITS_PER_UNIT);\n+      bswap_type = TREE_TYPE (src);\n+      src = fold_build2 (LROTATE_EXPR, bswap_type, src, count);\n+      bswap_stmt = gimple_build_assign (NULL, src);\n     }\n+  else\n+    {\n+      /* Convert the src expression if necessary.  */\n+      if (!useless_type_conversion_p (TREE_TYPE (tmp), bswap_type))\n+\t{\n+\t  gimple convert_stmt;\n+\t  tmp = make_temp_ssa_name (bswap_type, NULL, \"bswapsrc\");\n+\t  convert_stmt = gimple_build_assign_with_ops (NOP_EXPR, tmp, src,\n+\t\t\t\t\t\t       NULL);\n+\t  gsi_insert_before (&gsi, convert_stmt, GSI_SAME_STMT);\n+\t}\n \n-  call = gimple_build_call (fndecl, 1, tmp);\n+      bswap_stmt = gimple_build_call (fndecl, 1, tmp);\n+    }\n \n   tmp = tgt;\n \n@@ -2315,7 +2327,7 @@ bswap_replace (gimple cur_stmt, gimple_stmt_iterator gsi, gimple src_stmt,\n       gsi_insert_after (&gsi, convert_stmt, GSI_SAME_STMT);\n     }\n \n-  gimple_call_set_lhs (call, tmp);\n+  gimple_set_lhs (bswap_stmt, tmp);\n \n   if (dump_file)\n     {\n@@ -2324,7 +2336,7 @@ bswap_replace (gimple cur_stmt, gimple_stmt_iterator gsi, gimple src_stmt,\n       print_gimple_stmt (dump_file, cur_stmt, 0, 0);\n     }\n \n-  gsi_insert_after (&gsi, call, GSI_SAME_STMT);\n+  gsi_insert_after (&gsi, bswap_stmt, GSI_SAME_STMT);\n   gsi_remove (&gsi, true);\n   return true;\n }\n@@ -2388,13 +2400,29 @@ pass_optimize_bswap::execute (function *fun)\n         {\n \t  gimple src_stmt, cur_stmt = gsi_stmt (gsi);\n \t  tree fndecl = NULL_TREE, bswap_type = NULL_TREE, load_type;\n+\t  enum tree_code code;\n \t  struct symbolic_number n;\n \t  bool bswap;\n \n-\t  if (!is_gimple_assign (cur_stmt)\n-\t      || gimple_assign_rhs_code (cur_stmt) != BIT_IOR_EXPR)\n+\t  if (!is_gimple_assign (cur_stmt))\n \t    continue;\n \n+\t  code = gimple_assign_rhs_code (cur_stmt);\n+\t  switch (code)\n+\t    {\n+\t    case LROTATE_EXPR:\n+\t    case RROTATE_EXPR:\n+\t      if (!tree_fits_uhwi_p (gimple_assign_rhs2 (cur_stmt))\n+\t\t  || tree_to_uhwi (gimple_assign_rhs2 (cur_stmt))\n+\t\t     % BITS_PER_UNIT)\n+\t\tcontinue;\n+\t      /* Fall through.  */\n+\t    case BIT_IOR_EXPR:\n+\t      break;\n+\t    default:\n+\t      continue;\n+\t    }\n+\n \t  src_stmt = find_bswap_or_nop (cur_stmt, &n, &bswap);\n \n \t  if (!src_stmt)"}]}