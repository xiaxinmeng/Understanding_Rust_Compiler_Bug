{"sha": "e120e048d66ed9d568cf1802f591c322c5cfd3a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTEyMGUwNDhkNjZlZDlkNTY4Y2YxODAyZjU5MWMzMjJjNWNmZDNhMQ==", "commit": {"author": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1996-08-30T19:03:36Z"}, "committer": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1996-08-30T19:03:36Z"}, "message": "(movsicc,movhicc): Allow reload from memory.\n\nFrom-SVN: r12682", "tree": {"sha": "bdf7ab93b1efd43500887fd8a6dd1c530eb7566f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdf7ab93b1efd43500887fd8a6dd1c530eb7566f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e120e048d66ed9d568cf1802f591c322c5cfd3a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e120e048d66ed9d568cf1802f591c322c5cfd3a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e120e048d66ed9d568cf1802f591c322c5cfd3a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e120e048d66ed9d568cf1802f591c322c5cfd3a1/comments", "author": null, "committer": null, "parents": [{"sha": "be98e7093c94f2c74729a3277e21673f1890fed1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be98e7093c94f2c74729a3277e21673f1890fed1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be98e7093c94f2c74729a3277e21673f1890fed1"}], "stats": {"total": 157, "additions": 105, "deletions": 52}, "files": [{"sha": "3debb5446b9b73afbcadcb2e272843652d60981f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 105, "deletions": 52, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e120e048d66ed9d568cf1802f591c322c5cfd3a1/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e120e048d66ed9d568cf1802f591c322c5cfd3a1/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e120e048d66ed9d568cf1802f591c322c5cfd3a1", "patch": "@@ -6744,10 +6744,11 @@\n \n (define_expand \"movsicc\"\n   [(match_dup 4)\n-   (set (match_operand 0 \"register_operand\" \"\")\n+   (parallel [(set (match_operand 0 \"register_operand\" \"\")\n \t(if_then_else:SI (match_operand 1 \"comparison_operator\" \"\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"\")\n-\t\t\t (match_operand:SI 3 \"general_operand\" \"\")))]\n+\t\t\t (match_operand:SI 3 \"general_operand\" \"\")))\n+   (clobber (match_scratch:SI 4 \"=&r\"))])]\n   \"TARGET_CMOVE\"\n   \"\n {\n@@ -6756,22 +6757,24 @@\n \n (define_expand \"movhicc\"\n   [(match_dup 4)\n-   (set (match_operand 0 \"register_operand\" \"\")\n+   (parallel [(set (match_operand 0 \"register_operand\" \"\")\n \t(if_then_else:HI (match_operand 1 \"comparison_operator\" \"\")\n \t\t\t (match_operand:HI 2 \"general_operand\" \"\")\n-\t\t\t (match_operand:HI 3 \"general_operand\" \"\")))]\n+\t\t\t (match_operand:HI 3 \"general_operand\" \"\")))\n+   (clobber (match_scratch:SI 4 \"=&r\"))])]\n   \"TARGET_CMOVE\"\n   \"\n {\n   operands[4] = i386_compare_gen (i386_compare_op0, i386_compare_op1);\n }\")\n \n (define_insn \"movsicc_1\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,&r\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,&r,rm\")\n \t(if_then_else:SI (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(cc0) (const_int 0)])\n-\t\t      (match_operand:SI 2 \"nonimmediate_operand\" \"rm,0,rm\")\n-\t\t      (match_operand:SI 3 \"nonimmediate_operand\" \"0,rm,rm\")))]\n+\t\t      (match_operand:SI 2 \"general_operand\" \"rm,0,rm,g\")\n+\t\t      (match_operand:SI 3 \"general_operand\" \"0,rm,rm,g\")))\n+   (clobber (match_scratch:SI 4 \"X,X,X,=&r\"))]\n   \"TARGET_CMOVE\"\n   \"*\n {\n@@ -6794,33 +6797,41 @@\n       output_asm_insn (AS2 (cmov%C1,%2,%0), operands);\n       output_asm_insn (AS2 (cmov%c1,%3,%0), operands);\n     }\n-  RET;\n-}\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"r\")\n-\t(if_then_else:SI (match_operator 1 \"comparison_operator\" \n-\t\t\t\t[(cc0) (const_int 0)])\n-\t\t      (match_operand:SI 2 \"general_operand\" \"\")\n-\t\t      (match_operand:SI 3 \"general_operand\" \"\")))]\n-  \"TARGET_CMOVE\"\n-  \"*\n-{\n+  else if (which_alternative == 3)\n+    {\n       /* r <- cond ? arg1 : arg2 */\n-      operands[4] = gen_label_rtx ();\n+    operands[5] = gen_label_rtx ();\n+    if (! rtx_equal_p (operands[0], operands[2]))\n+       if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[2]) == MEM)\n+         {\n+           output_asm_insn (AS2 (mov%L2,%2,%4), operands);\n+           output_asm_insn (AS2 (mov%L2,%4,%0), operands);\n+         }\n+       else\n       output_asm_insn (AS2 (mov%L0,%2,%0), operands);\n-      output_asm_insn (\\\"j%C1 %l4\\\", operands);\n+    if (! rtx_equal_p (operands[0], operands[3]))\n+      {\n+        output_asm_insn (\\\"j%C1 %l5\\\", operands);\n+        if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[3]) == MEM)\n+          {\n+            output_asm_insn (AS2 (mov%L2,%3,%4), operands);\n+            output_asm_insn (AS2 (mov%L2,%4,%0), operands);\n+          }\n+        else\n       output_asm_insn (AS2 (mov%L0,%3,%0), operands);\n-      ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (operands[4]));\n+        ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (operands[5]));\n+      }\n+    }  \n   RET;\n }\")\n \n (define_insn \"movhicc_1\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,r,&r\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,&r,rm\")\n \t(if_then_else:HI (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(cc0) (const_int 0)])\n-\t\t      (match_operand:HI 2 \"nonimmediate_operand\" \"rm,0,rm\")\n-\t\t      (match_operand:HI 3 \"nonimmediate_operand\" \"0,rm,rm\")))]\n+\t\t      (match_operand:HI 2 \"general_operand\" \"rm,0,rm,g\")\n+\t\t      (match_operand:HI 3 \"general_operand\" \"0,rm,rm,g\")))\n+   (clobber (match_scratch:SI 4 \"X,X,X,=&r\"))]\n   \"TARGET_CMOVE\"\n   \"*\n {\n@@ -6843,33 +6854,40 @@\n       output_asm_insn (AS2 (cmov%C1,%2,%0), operands);\n       output_asm_insn (AS2 (cmov%c1,%3,%0), operands);\n     }\n-  RET;\n-}\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"r\")\n-\t(if_then_else:HI (match_operator 1 \"comparison_operator\" \n-\t\t\t\t[(cc0) (const_int 0)])\n-\t\t      (match_operand:HI 2 \"general_operand\" \"\")\n-\t\t      (match_operand:HI 3 \"general_operand\" \"\")))]\n-  \"TARGET_CMOVE\"\n-  \"*\n-{\n+  else if (which_alternative == 3)\n+    {\n       /* r <- cond ? arg1 : arg2 */\n-      operands[4] = gen_label_rtx ();\n+    operands[5] = gen_label_rtx ();\n+    if (! rtx_equal_p (operands[0], operands[2]))\n+       if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[2]) == MEM)\n+         {\n+           output_asm_insn (AS2 (mov%L2,%2,%4), operands);\n+           output_asm_insn (AS2 (mov%L2,%4,%0), operands);\n+         }\n+       else\n       output_asm_insn (AS2 (mov%L0,%2,%0), operands);\n-      output_asm_insn (\\\"j%C1 %l4\\\", operands);\n+    if (! rtx_equal_p (operands[0], operands[3]))\n+      {\n+        output_asm_insn (\\\"j%C1 %l5\\\", operands);\n+        if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[3]) == MEM)\n+          {\n+            output_asm_insn (AS2 (mov%L2,%3,%4), operands);\n+            output_asm_insn (AS2 (mov%L2,%4,%0), operands);\n+          }\n+        else\n       output_asm_insn (AS2 (mov%L0,%3,%0), operands);\n-      ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (operands[4]));\n+        ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (operands[5]));\n+      }\n+    }  \n   RET;\n }\")\n \n (define_expand \"movsfcc\"\n   [(match_dup 4)\n-   (set (match_operand 0 \"register_operand\" \"\")\n+   (set (match_operand 0 \"general_operand\" \"\")\n \t(if_then_else:SF (match_operand 1 \"comparison_operator\" \"\")\n-\t\t\t (match_operand:SF 2 \"register_operand\" \"\")\n-\t\t\t (match_operand:SF 3 \"register_operand\" \"\")))]\n+\t\t\t (match_operand:SF 2 \"general_operand\" \"\")\n+\t\t\t (match_operand:SF 3 \"general_operand\" \"\")))]\n   \"TARGET_CMOVE\"\n   \"\n {\n@@ -6878,10 +6896,10 @@\n \n (define_expand \"movdfcc\"\n   [(match_dup 4)\n-   (set (match_operand 0 \"register_operand\" \"\")\n+   (set (match_operand 0 \"register_operand\" \"t\")\n \t(if_then_else:DF (match_operand 1 \"comparison_operator\" \"\")\n-\t\t\t (match_operand:DF 2 \"register_operand\" \"\")\n-\t\t\t (match_operand:DF 3 \"register_operand\" \"\")))]\n+\t\t\t (match_operand:DF 2 \"register_operand\" \"f\")\n+\t\t\t (match_operand:DF 3 \"register_operand\" \"f\")))]\n   \"TARGET_CMOVE\"\n   \"\n {\n@@ -6890,22 +6908,22 @@\n \n (define_expand \"movxfcc\"\n   [(match_dup 4)\n-   (set (match_operand 0 \"register_operand\" \"\")\n+   (set (match_operand 0 \"register_operand\" \"t\")\n \t(if_then_else:XF (match_operand 1 \"comparison_operator\" \"\")\n-\t\t\t (match_operand:XF 2 \"register_operand\" \"\")\n-\t\t\t (match_operand:XF 3 \"register_operand\" \"\")))]\n+\t\t\t (match_operand:XF 2 \"register_operand\" \"f\")\n+\t\t\t (match_operand:XF 3 \"register_operand\" \"f\")))]\n   \"TARGET_CMOVE\"\n   \"\n {\n   operands[4] = i386_compare_gen (i386_compare_op0, i386_compare_op1);\n }\")\n \n (define_insn \"movsfcc_1\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=t,t\")\n+  [(set (match_operand:SF 0 \"general_operand\" \"=t,=t,f,fFm\")\n \t(if_then_else:SF (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(cc0) (const_int 0)])\n-\t\t      (match_operand:SF 2 \"register_operand\" \"0,f\")\n-\t\t      (match_operand:SF 3 \"register_operand\" \"f,0\")))]\n+\t\t      (match_operand:SF 2 \"general_operand\" \"0,f,f,fFm\")\n+\t\t      (match_operand:SF 3 \"general_operand\" \"f,0,f,fFm\")))]\n   \"TARGET_CMOVE\"\n   \"*\n {\n@@ -6919,6 +6937,41 @@\n       /* r <- cond ? r : arg */\n       output_asm_insn (AS2 (fcmov%F1,%2,%0), operands);\n     }\n+  else if (which_alternative == 2)\n+    {\n+      /* r <- cond ? r : arg */\n+      output_asm_insn (AS2 (fcmov%F1,%2,%0), operands);\n+      output_asm_insn (AS2 (fcmov%f1,%3,%0), operands);\n+    }\n+  else if (which_alternative == 3)\n+    {\n+      rtx xops[2];\n+\n+      /* r <- cond ? arg1 : arg2 */\n+      operands[4] = gen_label_rtx ();\n+\n+      if (STACK_REG_P (operands[2]) || GET_CODE (operands[2]) == MEM)\n+\toutput_asm_insn (AS1 (fld,%y2), operands);\n+      else\n+        {\n+          xops[0] = operands[0];\n+          xops[1] = operands[2];\n+\t  /* SET_SRC (PATTERN (insn)) = XEXP (SET_SRC (PATTERN (insn)), 1);*/\n+\t  output_asm_insn (output_move_const_single (xops), xops);\n+        }\n+      output_asm_insn (\\\"j%C1 %l4\\\", operands);\n+      if (STACK_REG_P (operands[3]) || GET_CODE (operands[0]) == MEM)\n+\t  output_asm_insn (AS1 (fld,%y3), operands);\n+      else\n+\t{\n+\t  xops[1] = operands[3];\n+\t  SET_SRC (PATTERN (insn)) = XEXP (SET_SRC (PATTERN (insn)), 2);\n+\t  output_asm_insn (output_move_const_single (xops), xops);\n+\t  /* output_move_memory (xops, insn, GET_MODE_SIZE (DFmode), 2, 4);*/\n+\t  /* output_asm_insn (AS1 (fld%z0,%y3), operands);*/\n+\t}\n+      ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (operands[4]));\n+}\n   RET;\n }\")\n "}]}