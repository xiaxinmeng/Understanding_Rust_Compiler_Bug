{"sha": "f6a719c3fadd336b6eb39678e38f195c1e59d42f", "node_id": "C_kwDOANBUbNoAKGY2YTcxOWMzZmFkZDMzNmI2ZWIzOTY3OGUzOGYxOTVjMWU1OWQ0MmY", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-10-30T17:14:34Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-10-30T17:15:50Z"}, "message": "Fortran: improve formatting of tables in intrinsic.texi\n\n2021-10-30  Manfred Schwarb  <manfred99@gmx.ch>\n\ngcc/fortran/ChangeLog:\n\n\t* intrinsic.texi: Adjust @columnfractions commands to improve\n\tappearance for narrow 80 character terminals.", "tree": {"sha": "5995b9513f6091ca63bf7e68ad0c9ebc69df3ef5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5995b9513f6091ca63bf7e68ad0c9ebc69df3ef5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6a719c3fadd336b6eb39678e38f195c1e59d42f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6a719c3fadd336b6eb39678e38f195c1e59d42f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6a719c3fadd336b6eb39678e38f195c1e59d42f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6a719c3fadd336b6eb39678e38f195c1e59d42f/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75c9fa318e31b5ead027eb5e8523d9879bc286ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75c9fa318e31b5ead027eb5e8523d9879bc286ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75c9fa318e31b5ead027eb5e8523d9879bc286ff"}], "stats": {"total": 154, "additions": 77, "deletions": 77}, "files": [{"sha": "8007c827930bc806de8c4080498d62f220a939d8", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 77, "deletions": 77, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6a719c3fadd336b6eb39678e38f195c1e59d42f/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6a719c3fadd336b6eb39678e38f195c1e59d42f/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=f6a719c3fadd336b6eb39678e38f195c1e59d42f", "patch": "@@ -461,7 +461,7 @@ end program test_abs\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument            @tab Return type       @tab Standard\n @item @code{ABS(A)}   @tab @code{REAL(4) A}    @tab @code{REAL(4)}    @tab Fortran 77 and later\n @item @code{CABS(A)}  @tab @code{COMPLEX(4) A} @tab @code{REAL(4)}    @tab Fortran 77 and later\n@@ -626,7 +626,7 @@ end program test_acos\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument         @tab Return type     @tab Standard\n @item @code{ACOS(X)}  @tab @code{REAL(4) X} @tab @code{REAL(4)}  @tab Fortran 77 and later\n @item @code{DACOS(X)} @tab @code{REAL(8) X} @tab @code{REAL(8)}  @tab Fortran 77 and later\n@@ -685,7 +685,7 @@ end program test_acosd\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument         @tab Return type     @tab Standard\n @item @code{ACOSD(X)}  @tab @code{REAL(4) X} @tab @code{REAL(4)}  @tab GNU extension\n @item @code{DACOSD(X)} @tab @code{REAL(8) X} @tab @code{REAL(8)}  @tab GNU extension\n@@ -741,7 +741,7 @@ END PROGRAM\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name             @tab Argument          @tab Return type       @tab Standard\n @item @code{DACOSH(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab GNU extension\n @end multitable\n@@ -890,7 +890,7 @@ end program test_aimag\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name               @tab Argument            @tab Return type     @tab Standard\n @item @code{AIMAG(Z)}    @tab @code{COMPLEX Z}    @tab @code{REAL}     @tab Fortran 77 and later\n @item @code{DIMAG(Z)}    @tab @code{COMPLEX(8) Z} @tab @code{REAL(8)}  @tab GNU extension\n@@ -950,7 +950,7 @@ end program test_aint\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name           @tab Argument         @tab Return type      @tab Standard\n @item @code{AINT(A)} @tab @code{REAL(4) A} @tab @code{REAL(4)}   @tab Fortran 77 and later\n @item @code{DINT(A)} @tab @code{REAL(8) A} @tab @code{REAL(8)}   @tab Fortran 77 and later\n@@ -1230,7 +1230,7 @@ end program test_anint\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument         @tab Return type      @tab Standard\n @item @code{ANINT(A)}  @tab @code{REAL(4) A} @tab @code{REAL(4)}   @tab Fortran 77 and later\n @item @code{DNINT(A)} @tab @code{REAL(8) A} @tab @code{REAL(8)}   @tab Fortran 77 and later\n@@ -1346,7 +1346,7 @@ end program test_asin\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument          @tab Return type       @tab Standard\n @item @code{ASIN(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab Fortran 77 and later\n @item @code{DASIN(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab Fortran 77 and later\n@@ -1405,7 +1405,7 @@ end program test_asind\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument          @tab Return type       @tab Standard\n @item @code{ASIND(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab GNU extension\n @item @code{DASIND(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab GNU extension\n@@ -1461,7 +1461,7 @@ END PROGRAM\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name             @tab Argument          @tab Return type       @tab Standard\n @item @code{DASINH(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab GNU extension.\n @end multitable\n@@ -1597,7 +1597,7 @@ end program test_atan\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument          @tab Return type       @tab Standard\n @item @code{ATAN(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab Fortran 77 and later\n @item @code{DATAN(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab Fortran 77 and later\n@@ -1662,7 +1662,7 @@ end program test_atand\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .23 .23 .20 .30\n @headitem Name            @tab Argument          @tab Return type       @tab Standard\n @item @code{ATAND(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab GNU extension\n @item @code{DATAND(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab GNU extension\n@@ -1727,7 +1727,7 @@ end program test_atan2\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .22 .22 .20 .32\n @headitem Name                @tab Argument            @tab Return type    @tab Standard\n @item @code{ATAN2(X, Y)}  @tab @code{REAL(4) X, Y} @tab @code{REAL(4)} @tab Fortran 77 and later\n @item @code{DATAN2(X, Y)} @tab @code{REAL(8) X, Y} @tab @code{REAL(8)} @tab Fortran 77 and later\n@@ -1795,7 +1795,7 @@ end program test_atan2d\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .23 .23 .20 .30\n @headitem Name                @tab Argument            @tab Return type    @tab Standard\n @item @code{ATAN2D(X, Y)}  @tab @code{REAL(4) X, Y} @tab @code{REAL(4)} @tab GNU extension\n @item @code{DATAN2D(X, Y)} @tab @code{REAL(8) X, Y} @tab @code{REAL(8)} @tab GNU extension\n@@ -1851,7 +1851,7 @@ END PROGRAM\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name             @tab Argument          @tab Return type       @tab Standard\n @item @code{DATANH(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab GNU extension\n @end multitable\n@@ -2540,7 +2540,7 @@ end program test_besj0\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .21 .22 .20 .33\n @headitem Name            @tab Argument          @tab Return type       @tab Standard\n @item @code{DBESJ0(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}   @tab GNU extension\n @end multitable\n@@ -2589,7 +2589,7 @@ end program test_besj1\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name             @tab Argument          @tab Return type       @tab Standard\n @item @code{DBESJ1(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab GNU extension\n @end multitable\n@@ -2654,7 +2654,7 @@ end program test_besjn\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .22 .22 .20 .32\n @headitem Name                @tab Argument            @tab Return type       @tab Standard\n @item @code{DBESJN(N, X)} @tab @code{INTEGER N}    @tab @code{REAL(8)}    @tab GNU extension\n @item                     @tab @code{REAL(8) X}    @tab                   @tab\n@@ -2702,7 +2702,7 @@ end program test_besy0\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument          @tab Return type       @tab Standard\n @item @code{DBESY0(X)}@tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab GNU extension\n @end multitable\n@@ -2749,7 +2749,7 @@ end program test_besy1\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument          @tab Return type       @tab Standard\n @item @code{DBESY1(X)}@tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab GNU extension\n @end multitable\n@@ -2814,10 +2814,10 @@ end program test_besyn\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name               @tab Argument            @tab Return type     @tab Standard\n @item @code{DBESYN(N,X)} @tab @code{INTEGER N} @tab @code{REAL(8)}  @tab GNU extension\n-@item                    @tab @code{REAL(8) X} @tab                 @tab \n+@item                    @tab @code{REAL(8) X} @tab                 @tab\n @end multitable\n @end table\n \n@@ -3057,7 +3057,7 @@ end program test_btest\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .21 .28 .18 .30\n @headitem Name           @tab Argument         @tab Return type             @tab Standard\n @item @code{BTEST(I,POS)} @tab @code{INTEGER I,POS} @tab @code{LOGICAL} @tab Fortran 95 and later\n @item @code{BBTEST(I,POS)} @tab @code{INTEGER(1) I,POS} @tab @code{LOGICAL(1)} @tab GNU extension\n@@ -3474,7 +3474,7 @@ end program test_char\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .18 .18 .24 .25\n+@multitable @columnfractions .19 .19 .25 .33\n @headitem Name           @tab Argument         @tab Return type             @tab Standard\n @item @code{CHAR(I)} @tab @code{INTEGER I} @tab @code{CHARACTER(LEN=1)} @tab Fortran 77 and later\n @end multitable\n@@ -4203,7 +4203,7 @@ end program test_conjg\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name             @tab Argument             @tab Return type       @tab Standard\n @item @code{DCONJG(Z)} @tab @code{COMPLEX(8) Z}  @tab @code{COMPLEX(8)} @tab GNU extension\n @end multitable\n@@ -4254,7 +4254,7 @@ end program test_cos\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument            @tab Return type       @tab Standard\n @item @code{COS(X)}   @tab @code{REAL(4) X}    @tab @code{REAL(4)}    @tab Fortran 77 and later\n @item @code{DCOS(X)}  @tab @code{REAL(8) X}    @tab @code{REAL(8)}    @tab Fortran 77 and later\n@@ -4318,7 +4318,7 @@ end program test_cosd\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument            @tab Return type       @tab Standard\n @item @code{COSD(X)}   @tab @code{REAL(4) X}    @tab @code{REAL(4)}    @tab GNU extension\n @item @code{DCOSD(X)}  @tab @code{REAL(8) X}    @tab @code{REAL(8)}    @tab GNU extension\n@@ -4377,7 +4377,7 @@ end program test_cosh\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument          @tab Return type       @tab Standard\n @item @code{COSH(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab Fortran 77 and later\n @item @code{DCOSH(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab Fortran 77 and later\n@@ -4431,7 +4431,7 @@ end program test_cotan\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument          @tab Return type     @tab Standard\n @item @code{COTAN(X)}   @tab @code{REAL(4) X}  @tab @code{REAL(4)}  @tab GNU extension\n @item @code{DCOTAN(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}  @tab GNU extension\n@@ -4487,7 +4487,7 @@ end program test_cotand\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument          @tab Return type     @tab Standard\n @item @code{COTAND(X)}   @tab @code{REAL(4) X}  @tab @code{REAL(4)}  @tab GNU extension\n @item @code{DCOTAND(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}  @tab GNU extension\n@@ -5002,7 +5002,7 @@ end program test_dim\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .26 .20 .30\n @headitem Name             @tab Argument               @tab Return type       @tab Standard\n @item @code{DIM(X,Y)}  @tab @code{REAL(4) X, Y}    @tab @code{REAL(4)}    @tab Fortran 77 and later\n @item @code{IDIM(X,Y)} @tab @code{INTEGER(4) X, Y} @tab @code{INTEGER(4)} @tab Fortran 77 and later\n@@ -5105,7 +5105,7 @@ end program test_dprod\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name              @tab Argument               @tab Return type       @tab Standard\n @item @code{DPROD(X,Y)} @tab @code{REAL(4) X, Y}    @tab @code{REAL(8)}    @tab Fortran 77 and later\n @end multitable\n@@ -5474,7 +5474,7 @@ end program test_erf\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument          @tab Return type       @tab Standard\n @item @code{DERF(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab GNU extension\n @end multitable\n@@ -5518,7 +5518,7 @@ end program test_erfc\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument          @tab Return type       @tab Standard\n @item @code{DERFC(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab GNU extension\n @end multitable\n@@ -5862,7 +5862,7 @@ end program test_exp\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument             @tab Return type         @tab Standard\n @item @code{EXP(X)}   @tab @code{REAL(4) X}     @tab @code{REAL(4)}      @tab Fortran 77 and later\n @item @code{DEXP(X)}  @tab @code{REAL(8) X}     @tab @code{REAL(8)}      @tab Fortran 77 and later\n@@ -6802,7 +6802,7 @@ end program test_gamma\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name             @tab Argument         @tab Return type       @tab Standard\n @item @code{DGAMMA(X)} @tab @code{REAL(8) X} @tab @code{REAL(8)}    @tab GNU extension\n @end multitable\n@@ -7691,7 +7691,7 @@ END PROGRAM\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument            @tab Return type       @tab Standard\n @item @code{IAND(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 90 and later\n @item @code{BIAND(A)} @tab @code{INTEGER(1) A} @tab @code{INTEGER(1)} @tab GNU extension\n@@ -7854,7 +7854,7 @@ The return value is of type @code{INTEGER} and of the same kind as\n @var{I}.\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument            @tab Return type       @tab Standard\n @item @code{IBCLR(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 90 and later\n @item @code{BBCLR(A)} @tab @code{INTEGER(1) A} @tab @code{INTEGER(1)} @tab GNU extension\n@@ -7913,7 +7913,7 @@ The return value is of type @code{INTEGER} and of the same kind as\n @var{I}.\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument            @tab Return type       @tab Standard\n @item @code{IBITS(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 90 and later\n @item @code{BBITS(A)} @tab @code{INTEGER(1) A} @tab @code{INTEGER(1)} @tab GNU extension\n@@ -7967,7 +7967,7 @@ The return value is of type @code{INTEGER} and of the same kind as\n @var{I}.\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument            @tab Return type       @tab Standard\n @item @code{IBSET(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 90 and later\n @item @code{BBSET(A)} @tab @code{INTEGER(1) A} @tab @code{INTEGER(1)} @tab GNU extension\n@@ -8028,7 +8028,7 @@ end program test_ichar\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name             @tab Argument             @tab Return type       @tab Standard\n @item @code{ICHAR(C)}  @tab @code{CHARACTER C}   @tab @code{INTEGER(4)}    @tab Fortran 77 and later\n @end multitable\n@@ -8155,7 +8155,7 @@ A boz-literal-constant is converted to an @code{INTEGER} with the kind\n type parameter of the other argument as-if a call to @ref{INT} occurred.\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument            @tab Return type       @tab Standard\n @item @code{IEOR(A)}  @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 90 and later\n @item @code{BIEOR(A)} @tab @code{INTEGER(1) A} @tab @code{INTEGER(1)} @tab GNU extension\n@@ -8292,9 +8292,9 @@ The return value is of type @code{INTEGER} and of kind @var{KIND}. If\n @var{KIND} is absent, the return value is of default integer kind.\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .35 .15 .17 .30\n @headitem Name                            @tab Argument           @tab Return type       @tab Standard\n-@item @code{INDEX(STRING, SUBSTRING)} @tab @code{CHARACTER}   @tab @code{INTEGER(4)} @tab Fortran 77 and later\n+@item @code{INDEX(STRING,SUBSTRING)} @tab @code{CHARACTER}   @tab @code{INTEGER(4)} @tab Fortran 77 and later\n @end multitable\n \n @item @emph{See also}:\n@@ -8359,7 +8359,7 @@ end program\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument          @tab Return type       @tab Standard\n @item @code{INT(A)}   @tab @code{REAL(4) A}  @tab @code{INTEGER}    @tab Fortran 77 and later\n @item @code{IFIX(A)}  @tab @code{REAL(4) A}  @tab @code{INTEGER}    @tab Fortran 77 and later\n@@ -8485,7 +8485,7 @@ A boz-literal-constant is converted to an @code{INTEGER} with the kind\n type parameter of the other argument as-if a call to @ref{INT} occurred.\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument            @tab Return type       @tab Standard\n @item @code{IOR(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 90 and later\n @item @code{BIOR(A)} @tab @code{INTEGER(1) A} @tab @code{INTEGER(1)} @tab GNU extension\n@@ -8839,7 +8839,7 @@ The return value is of type @code{INTEGER} and of the same kind as\n @var{I}.\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument            @tab Return type       @tab Standard\n @item @code{ISHFT(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 90 and later\n @item @code{BSHFT(A)} @tab @code{INTEGER(1) A} @tab @code{INTEGER(1)} @tab GNU extension\n@@ -8897,7 +8897,7 @@ The return value is of type @code{INTEGER} and of the same kind as\n @var{I}.\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument            @tab Return type       @tab Standard\n @item @code{ISHFTC(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 90 and later\n @item @code{BSHFTC(A)} @tab @code{INTEGER(1) A} @tab @code{INTEGER(1)} @tab GNU extension\n@@ -9258,7 +9258,7 @@ The return value is of type @code{INTEGER} and of kind @var{KIND}. If\n \n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name               @tab Argument          @tab Return type       @tab Standard\n @item @code{LEN(STRING)} @tab @code{CHARACTER}  @tab @code{INTEGER}    @tab Fortran 77 and later\n @end multitable\n@@ -9351,9 +9351,9 @@ Returns @code{.TRUE.} if @code{STRING_A >= STRING_B}, and @code{.FALSE.}\n otherwise, based on the ASCII ordering.\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .34 .16 .17 .30\n @headitem Name                           @tab Argument          @tab Return type       @tab Standard\n-@item @code{LGE(STRING_A, STRING_B)} @tab @code{CHARACTER}  @tab @code{LOGICAL}    @tab Fortran 77 and later\n+@item @code{LGE(STRING_A,STRING_B)} @tab @code{CHARACTER}  @tab @code{LOGICAL}    @tab Fortran 77 and later\n @end multitable\n \n @item @emph{See also}:\n@@ -9405,9 +9405,9 @@ Returns @code{.TRUE.} if @code{STRING_A > STRING_B}, and @code{.FALSE.}\n otherwise, based on the ASCII ordering.\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .34 .16 .17 .30\n @headitem Name                           @tab Argument          @tab Return type       @tab Standard\n-@item @code{LGT(STRING_A, STRING_B)} @tab @code{CHARACTER}  @tab @code{LOGICAL}    @tab Fortran 77 and later\n+@item @code{LGT(STRING_A,STRING_B)} @tab @code{CHARACTER}  @tab @code{LOGICAL}    @tab Fortran 77 and later\n @end multitable\n \n @item @emph{See also}:\n@@ -9503,9 +9503,9 @@ Returns @code{.TRUE.} if @code{STRING_A <= STRING_B}, and @code{.FALSE.}\n otherwise, based on the ASCII ordering.\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .34 .16 .17 .30\n @headitem Name                           @tab Argument          @tab Return type       @tab Standard\n-@item @code{LLE(STRING_A, STRING_B)} @tab @code{CHARACTER}  @tab @code{LOGICAL}    @tab Fortran 77 and later\n+@item @code{LLE(STRING_A,STRING_B)} @tab @code{CHARACTER}  @tab @code{LOGICAL}    @tab Fortran 77 and later\n @end multitable\n \n @item @emph{See also}:\n@@ -9557,9 +9557,9 @@ Returns @code{.TRUE.} if @code{STRING_A < STRING_B}, and @code{.FALSE.}\n otherwise, based on the ASCII ordering.\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .34 .16 .17 .30\n @headitem Name                           @tab Argument          @tab Return type       @tab Standard\n-@item @code{LLT(STRING_A, STRING_B)} @tab @code{CHARACTER}  @tab @code{LOGICAL}    @tab Fortran 77 and later\n+@item @code{LLT(STRING_A,STRING_B)} @tab @code{CHARACTER}  @tab @code{LOGICAL}    @tab Fortran 77 and later\n @end multitable\n \n @item @emph{See also}:\n@@ -9696,7 +9696,7 @@ end program test_log\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument          @tab Return type       @tab Standard\n @item @code{ALOG(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab Fortran 77 or later\n @item @code{DLOG(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab Fortran 77 or later\n@@ -9748,7 +9748,7 @@ end program test_log10\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument          @tab Return type       @tab Standard\n @item @code{ALOG10(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab Fortran 77 and later\n @item @code{DLOG10(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab Fortran 77 and later\n@@ -9797,7 +9797,7 @@ end program test_log_gamma\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name             @tab Argument         @tab Return type       @tab Standard\n @item @code{LGAMMA(X)} @tab @code{REAL(4) X} @tab @code{REAL(4)}    @tab GNU extension\n @item @code{ALGAMA(X)} @tab @code{REAL(4) X} @tab @code{REAL(4)}    @tab GNU extension\n@@ -10256,7 +10256,7 @@ The return value corresponds to the maximum value among the arguments,\n and has the same type and kind as the first argument.\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name             @tab Argument             @tab Return type         @tab Standard\n @item @code{MAX0(A1)}  @tab @code{INTEGER(4) A1} @tab @code{INTEGER(4)}   @tab Fortran 77 and later\n @item @code{AMAX0(A1)} @tab @code{INTEGER(4) A1} @tab @code{REAL(MAX(X))} @tab Fortran 77 and later\n@@ -10631,7 +10631,7 @@ The return value corresponds to the minimum value among the arguments,\n and has the same type and kind as the first argument.\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name              @tab Argument             @tab Return type        @tab Standard\n @item @code{MIN0(A1)}   @tab @code{INTEGER(4) A1} @tab @code{INTEGER(4)}  @tab Fortran 77 and later\n @item @code{AMIN0(A1)}  @tab @code{INTEGER(4) A1} @tab @code{REAL(4)}     @tab Fortran 77 and later\n@@ -10864,7 +10864,7 @@ end program test_mod\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .25 .20 .31\n @headitem Name             @tab Arguments          @tab Return type    @tab Standard\n @item @code{MOD(A,P)}  @tab @code{INTEGER A,P} @tab @code{INTEGER} @tab Fortran 77 and later\n @item @code{AMOD(A,P)} @tab @code{REAL(4) A,P} @tab @code{REAL(4)} @tab Fortran 77 and later\n@@ -11029,7 +11029,7 @@ same kind as @var{FROM}.\n @end multitable\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument            @tab Return type       @tab Standard\n @item @code{MVBITS(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 90 and later\n @item @code{BMVBITS(A)} @tab @code{INTEGER(1) A} @tab @code{INTEGER(1)} @tab GNU extension\n@@ -11179,7 +11179,7 @@ end program test_nint\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name             @tab Argument           @tab Return Type     @tab Standard\n @item @code{NINT(A)}   @tab @code{REAL(4) A}   @tab  @code{INTEGER} @tab Fortran 77 and later\n @item @code{IDNINT(A)} @tab @code{REAL(8) A}   @tab  @code{INTEGER} @tab Fortran 77 and later\n@@ -11277,7 +11277,7 @@ The return type is @code{INTEGER}, of the same kind as the\n argument.\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument            @tab Return type       @tab Standard\n @item @code{NOT(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 95 and later\n @item @code{BNOT(A)} @tab @code{INTEGER(1) A} @tab @code{INTEGER(1)} @tab GNU extension\n@@ -12293,7 +12293,7 @@ end program test_real\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name             @tab Argument           @tab Return type     @tab Standard\n @item @code{FLOAT(A)}  @tab @code{INTEGER(4)}  @tab @code{REAL(4)}  @tab GNU extension\n @item @code{DFLOAT(A)} @tab @code{INTEGER(4)}  @tab @code{REAL(8)}  @tab GNU extension\n@@ -13180,7 +13180,7 @@ Elemental function\n \n @item @emph{Return value}:\n The kind of the return value is that of @var{A} and @var{B}.\n-If @math{B\\ge 0} then the result is @code{ABS(A)}, else\n+If @math{B \\ge 0} then the result is @code{ABS(A)}, else\n it is @code{-ABS(A)}.\n \n @item @emph{Example}:\n@@ -13197,7 +13197,7 @@ end program test_sign\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .26 .20 .30\n @headitem Name              @tab Arguments              @tab Return type       @tab Standard\n @item @code{SIGN(A,B)}  @tab @code{REAL(4) A, B}    @tab @code{REAL(4)}    @tab Fortran 77 and later\n @item @code{ISIGN(A,B)} @tab @code{INTEGER(4) A, B} @tab @code{INTEGER(4)} @tab Fortran 77 and later\n@@ -13306,7 +13306,7 @@ end program test_sin\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument             @tab Return type       @tab Standard\n @item @code{SIN(X)}   @tab @code{REAL(4) X}     @tab @code{REAL(4)}    @tab Fortran 77 and later\n @item @code{DSIN(X)}  @tab @code{REAL(8) X}     @tab @code{REAL(8)}    @tab Fortran 77 and later\n@@ -13368,7 +13368,7 @@ end program test_sind\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument             @tab Return type       @tab Standard\n @item @code{SIND(X)}   @tab @code{REAL(4) X}     @tab @code{REAL(4)}    @tab GNU extension\n @item @code{DSIND(X)}  @tab @code{REAL(8) X}     @tab @code{REAL(8)}    @tab GNU extension\n@@ -13425,7 +13425,7 @@ end program test_sinh\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument          @tab Return type       @tab Standard\n @item @code{DSINH(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab Fortran 90 and later\n @end multitable\n@@ -13710,7 +13710,7 @@ end program test_sqrt\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name             @tab Argument             @tab Return type          @tab Standard\n @item @code{SQRT(X)}   @tab @code{REAL(4) X}     @tab @code{REAL(4)}       @tab Fortran 77 and later\n @item @code{DSQRT(X)}  @tab @code{REAL(8) X}     @tab @code{REAL(8)}       @tab Fortran 77 and later\n@@ -14161,7 +14161,7 @@ end program test_tan\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument          @tab Return type     @tab Standard\n @item @code{TAN(X)}   @tab @code{REAL(4) X}  @tab @code{REAL(4)}  @tab Fortran 77 and later\n @item @code{DTAN(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}  @tab Fortran 77 and later\n@@ -14216,7 +14216,7 @@ end program test_tand\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument          @tab Return type     @tab Standard\n @item @code{TAND(X)}   @tab @code{REAL(4) X}  @tab @code{REAL(4)}  @tab GNU extension\n @item @code{DTAND(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}  @tab GNU extension\n@@ -14272,7 +14272,7 @@ end program test_tanh\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n+@multitable @columnfractions .20 .23 .20 .33\n @headitem Name            @tab Argument          @tab Return type       @tab Standard\n @item @code{TANH(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab Fortran 77 and later\n @item @code{DTANH(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab Fortran 77 and later\n@@ -15196,7 +15196,7 @@ C compiler: @code{C_INT128_T, C_INT_LEAST128_T, C_INT_FAST128_T}.\n Furthermore, if @code{_Float128} is supported in C, the named constants\n @code{C_FLOAT128} and @code{C_FLOAT128_COMPLEX} are defined.\n \n-@multitable @columnfractions .15 .35 .35 .35\n+@multitable @columnfractions .19 .32 .34 .15\n @headitem Fortran Type  @tab Named constant         @tab C type                                @tab Extension\n @item @code{INTEGER}@tab @code{C_INT}           @tab @code{int}\n @item @code{INTEGER}@tab @code{C_SHORT}         @tab @code{short int}"}]}