{"sha": "7cbdab5aa839ffd54dccbde6430905bb9c596201", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NiZGFiNWFhODM5ZmZkNTRkY2NiZGU2NDMwOTA1YmI5YzU5NjIwMQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2019-07-04T08:06:14Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-04T08:06:14Z"}, "message": "[Ada] Spurious error on 'First in a generic context\n\nThis patch fixes a spurious error on an attribute reference within an\naspect specification for an unconstrained array type when the\ncorresponding type  declaration appears within a generic unit.\n\n2019-07-04  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_attr.adb (Check_Array_Type): An array type attribute such\n\tas 'First can be applied to an unconstrained array tyope when\n\tthe attribute reference appears within an aspect specification\n\tand the prefix is a current instance, given that the prefix of\n\tthe attribute will become a formal of the subprogram that\n\timplements the aspect (typically a predicate check).\n\ngcc/testsuite/\n\n\t* gnat.dg/aspect2.adb, gnat.dg/aspect2.ads: New testcase.\n\nFrom-SVN: r273058", "tree": {"sha": "6b5e9a1c939ad5eaf09f187539e35fc45920205d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b5e9a1c939ad5eaf09f187539e35fc45920205d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cbdab5aa839ffd54dccbde6430905bb9c596201", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cbdab5aa839ffd54dccbde6430905bb9c596201", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cbdab5aa839ffd54dccbde6430905bb9c596201", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cbdab5aa839ffd54dccbde6430905bb9c596201/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "965a269d8bbaca4a96b1327607c9dc42ad9484d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/965a269d8bbaca4a96b1327607c9dc42ad9484d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/965a269d8bbaca4a96b1327607c9dc42ad9484d4"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "be26421081dceb0064444b47d76301bf9a7437ec", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cbdab5aa839ffd54dccbde6430905bb9c596201/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cbdab5aa839ffd54dccbde6430905bb9c596201/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7cbdab5aa839ffd54dccbde6430905bb9c596201", "patch": "@@ -1,3 +1,12 @@\n+2019-07-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb (Check_Array_Type): An array type attribute such\n+\tas 'First can be applied to an unconstrained array tyope when\n+\tthe attribute reference appears within an aspect specification\n+\tand the prefix is a current instance, given that the prefix of\n+\tthe attribute will become a formal of the subprogram that\n+\timplements the aspect (typically a predicate check).\n+\n 2019-07-04  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* sem_util.adb (Yields_Synchronized_Object): Fix typos in"}, {"sha": "fd2c6d681cf7acad382df9fa5693176d2fae877b", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cbdab5aa839ffd54dccbde6430905bb9c596201/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cbdab5aa839ffd54dccbde6430905bb9c596201/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=7cbdab5aa839ffd54dccbde6430905bb9c596201", "patch": "@@ -1634,7 +1634,9 @@ package body Sem_Attr is\n             raise Bad_Attribute;\n          end if;\n \n-         --  Normal case of array type or subtype\n+         --  Normal case of array type or subtype. Note that if the\n+         --  prefix is a current instance of a type declaration it\n+         --  appears within an aspect specification and is legal.\n \n          Check_Either_E0_Or_E1;\n          Check_Dereference;\n@@ -1643,6 +1645,7 @@ package body Sem_Attr is\n             if not Is_Constrained (P_Type)\n               and then Is_Entity_Name (P)\n               and then Is_Type (Entity (P))\n+              and then not Is_Current_Instance (P)\n             then\n                --  Note: we do not call Error_Attr here, since we prefer to\n                --  continue, using the relevant index type of the array,"}, {"sha": "dd22271efe21e9f3aa20e626ec6f3aa282157037", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cbdab5aa839ffd54dccbde6430905bb9c596201/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cbdab5aa839ffd54dccbde6430905bb9c596201/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7cbdab5aa839ffd54dccbde6430905bb9c596201", "patch": "@@ -1,3 +1,7 @@\n+2019-07-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/aspect2.adb, gnat.dg/aspect2.ads: New testcase.\n+\n 2019-07-04  Yannick Moy  <moy@adacore.com>\n \n \t* gnat.dg/synchronized2.adb, gnat.dg/synchronized2.ads,"}, {"sha": "acf3329a3b4cc13155ed722cb4abbccf4e9ad8ee", "filename": "gcc/testsuite/gnat.dg/aspect2.adb", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cbdab5aa839ffd54dccbde6430905bb9c596201/gcc%2Ftestsuite%2Fgnat.dg%2Faspect2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cbdab5aa839ffd54dccbde6430905bb9c596201/gcc%2Ftestsuite%2Fgnat.dg%2Faspect2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faspect2.adb?ref=7cbdab5aa839ffd54dccbde6430905bb9c596201", "patch": "@@ -0,0 +1,5 @@\n+--  { dg-do compile }\n+\n+package body Aspect2 is\n+    procedure Foo is null;\n+end Aspect2;"}, {"sha": "73d3fe050748fb16ad33eec4267709c471aaaaf8", "filename": "gcc/testsuite/gnat.dg/aspect2.ads", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cbdab5aa839ffd54dccbde6430905bb9c596201/gcc%2Ftestsuite%2Fgnat.dg%2Faspect2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cbdab5aa839ffd54dccbde6430905bb9c596201/gcc%2Ftestsuite%2Fgnat.dg%2Faspect2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faspect2.ads?ref=7cbdab5aa839ffd54dccbde6430905bb9c596201", "patch": "@@ -0,0 +1,30 @@\n+with Ada.Containers.Functional_Vectors;\n+with Ada.Containers; use Ada.Containers;\n+\n+generic\n+   type Element_Type (<>) is private;\n+   type Element_Model (<>) is private;\n+   with function Model (X : Element_Type) return Element_Model is <>;\n+   with function Copy (X : Element_Type) return Element_Type is <>;\n+package Aspect2 with SPARK_Mode is\n+   pragma Unevaluated_Use_Of_Old (Allow);\n+\n+   type Vector is private;\n+\n+   function Length (V : Vector) return Natural;\n+\n+   procedure Foo;\n+\n+private\n+   type Element_Access is access Element_Type;\n+   type Element_Array is array (Positive range <>) of Element_Access with\n+     Dynamic_Predicate => Element_Array'First = 1;\n+   type Element_Array_Access is access Element_Array;\n+   type Vector is record\n+      Top     : Natural := 0;\n+      Content : Element_Array_Access;\n+   end record;\n+\n+   function Length (V : Vector) return Natural is\n+     (V.Top);\n+end Aspect2;"}]}