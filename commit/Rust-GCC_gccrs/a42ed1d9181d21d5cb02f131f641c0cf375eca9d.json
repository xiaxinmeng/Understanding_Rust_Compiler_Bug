{"sha": "a42ed1d9181d21d5cb02f131f641c0cf375eca9d", "node_id": "C_kwDOANBUbNoAKGE0MmVkMWQ5MTgxZDIxZDVjYjAyZjEzMWY2NDFjMGNmMzc1ZWNhOWQ", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2023-01-31T05:03:21Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2023-02-14T21:44:21Z"}, "message": "Simplify \"1 - bool_val\" to \"bool_val ^ 1\"\n\nFor bool values, it is easier to deal with\nxor 1 rather than having 1 - a. This is because\nwe are more likely to simplify the xor further in many\ncases.\n\nThis is a special case for (MASK - b) where MASK\nis a powerof2 - 1 and b <= MASK but only for bool\nranges ([0,1]) as that is the main case where the\ndifference comes into play.\n\nNote this is enabled for gimple folding only\nas the ranges are only know while doing gimple\nfolding and cfun is not always set when fold is called.\n\nOK? Bootstrapped and tested on x86_64-linux-gnu with no\nregressions.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/108355\n\tPR tree-optimization/96921\n\t* match.pd: Add pattern for \"1 - bool_val\".\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/108355\n\tPR tree-optimization/96921\n\t* gcc.dg/tree-ssa/bool-minus-1.c: New test.\n\t* gcc.dg/tree-ssa/bool-minus-2.c: New test.\n\t* gcc.dg/tree-ssa/pr108354-1.c: New test.", "tree": {"sha": "47836e2e44e7b4292edfa155c683981366dcbc98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47836e2e44e7b4292edfa155c683981366dcbc98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a42ed1d9181d21d5cb02f131f641c0cf375eca9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a42ed1d9181d21d5cb02f131f641c0cf375eca9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a42ed1d9181d21d5cb02f131f641c0cf375eca9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a42ed1d9181d21d5cb02f131f641c0cf375eca9d/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e300a3d04c18825596ba825c0bbd0cce719ea89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e300a3d04c18825596ba825c0bbd0cce719ea89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e300a3d04c18825596ba825c0bbd0cce719ea89"}], "stats": {"total": 83, "additions": 83, "deletions": 0}, "files": [{"sha": "e7b700349a679a9a456d7ec5743bd2200ee23ff8", "filename": "gcc/match.pd", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a42ed1d9181d21d5cb02f131f641c0cf375eca9d/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a42ed1d9181d21d5cb02f131f641c0cf375eca9d/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=a42ed1d9181d21d5cb02f131f641c0cf375eca9d", "patch": "@@ -1732,6 +1732,19 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (if (!FIXED_POINT_TYPE_P (type))\n  (plus @0 (negate @1))))\n \n+#if GIMPLE\n+/* 1 - a is a ^ 1 if a had a bool range. */\n+/* This is only enabled for gimple as sometimes\n+   cfun is not set for the function which contains\n+   the SSA_NAME (e.g. while IPA passes are happening,\n+   fold might be called).  */\n+(simplify\n+ (minus integer_onep@0 SSA_NAME@1)\n+  (if (INTEGRAL_TYPE_P (type)\n+       && ssa_name_has_boolean_range (@1))\n+   (bit_xor @1 @0)))\n+#endif\n+\n /* Other simplifications of negation (c.f. fold_negate_expr_1).  */\n (simplify\n  (negate (mult:c@0 @1 negate_expr_p@2))"}, {"sha": "e434ff9507ad7908d9ec51cfcc664c18da1af4a1", "filename": "gcc/testsuite/gcc.dg/tree-ssa/bool-minus-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a42ed1d9181d21d5cb02f131f641c0cf375eca9d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-minus-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a42ed1d9181d21d5cb02f131f641c0cf375eca9d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-minus-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-minus-1.c?ref=a42ed1d9181d21d5cb02f131f641c0cf375eca9d", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+_Bool\n+foo (_Bool a)\n+{\n+  int c = 1 - a;\n+  return c;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"1 - \" 0 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"~a\" 1 \"optimized\" } } */\n+"}, {"sha": "b77d36c1d3cf4607a5bb084ad2eaf266c16d3863", "filename": "gcc/testsuite/gcc.dg/tree-ssa/bool-minus-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a42ed1d9181d21d5cb02f131f641c0cf375eca9d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-minus-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a42ed1d9181d21d5cb02f131f641c0cf375eca9d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-minus-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-minus-2.c?ref=a42ed1d9181d21d5cb02f131f641c0cf375eca9d", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+_Bool\n+foo (_Bool a, _Bool b)\n+{\n+  int c = 1 - a;\n+  int d = 1 - b;\n+  int e = c & d;\n+  return 1 - e;\n+}\n+\n+_Bool\n+bar (_Bool a, _Bool b)\n+{\n+  int c = 1 - a;\n+  int d = 1 - b;\n+  _Bool e = c & d;\n+  return 1 - e;\n+}\n+\n+_Bool\n+baz (_Bool a, _Bool b)\n+{\n+  _Bool c = 1 - a;\n+  _Bool d = 1 - b;\n+  _Bool e = c & d;\n+  return 1 - e;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"1 - \" 0 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"~a\" 0 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"~b\" 0 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"a_\\[0-9\\]+.D. \\\\\\| b_\\[0-9\\]+.D.\" 3 \"optimized\" } } */\n+"}, {"sha": "60d1dbc281ece3bd8bea9618c767325333a85392", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr108354-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a42ed1d9181d21d5cb02f131f641c0cf375eca9d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr108354-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a42ed1d9181d21d5cb02f131f641c0cf375eca9d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr108354-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr108354-1.c?ref=a42ed1d9181d21d5cb02f131f641c0cf375eca9d", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int b;\n+int *c;\n+int e;\n+static int *f = &e;\n+int g;\n+void foo();\n+short(a)(short h, short i) { return h - i; }\n+int(d)(int h) { return h == 83647 ? 0 : -h; }\n+int main() {\n+  short j;\n+  int *k = &e, *l = &b;\n+  *f = 0 == c;\n+  j = a(0 != 2, *k);\n+  if (d(j ^ (0 == l || *k)) != *k)\n+    ;\n+  else\n+    foo();\n+  c = &g;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \" 1 - \" 0 \"optimized\" } } */\n+/* There should be no calls to foo. */\n+/* { dg-final { scan-tree-dump-times \"foo \" 0 \"optimized\" } } */\n+"}]}