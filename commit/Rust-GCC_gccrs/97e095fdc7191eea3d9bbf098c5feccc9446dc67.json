{"sha": "97e095fdc7191eea3d9bbf098c5feccc9446dc67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdlMDk1ZmRjNzE5MWVlYTNkOWJiZjA5OGM1ZmVjY2M5NDQ2ZGM2Nw==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@apple.com", "date": "2005-03-24T00:48:39Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2005-03-24T00:48:39Z"}, "message": "darwin_stop_world.c: Update for -m64 multilib.\n\n        * darwin_stop_world.c: Update for -m64 multilib.\n        * include/private/gcconfig.h: Likewise.\n        * powerpc_darwin_mach_dep.s: Likewise.\n\nFrom-SVN: r96968", "tree": {"sha": "c469c5364048c3c9e886851e23f76b60237309ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c469c5364048c3c9e886851e23f76b60237309ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97e095fdc7191eea3d9bbf098c5feccc9446dc67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97e095fdc7191eea3d9bbf098c5feccc9446dc67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97e095fdc7191eea3d9bbf098c5feccc9446dc67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97e095fdc7191eea3d9bbf098c5feccc9446dc67/comments", "author": null, "committer": null, "parents": [{"sha": "1488177afef2bf1a40d9a5c041465d3a603402c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1488177afef2bf1a40d9a5c041465d3a603402c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1488177afef2bf1a40d9a5c041465d3a603402c9"}], "stats": {"total": 50, "additions": 37, "deletions": 13}, "files": [{"sha": "413c261311a70cd3aaae8d33a72b75a604e155c0", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e095fdc7191eea3d9bbf098c5feccc9446dc67/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e095fdc7191eea3d9bbf098c5feccc9446dc67/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=97e095fdc7191eea3d9bbf098c5feccc9446dc67", "patch": "@@ -1,3 +1,9 @@\n+2005-03-23  Mike Stump  <mrs@apple.com>\n+\n+\t* darwin_stop_world.c: Update for -m64 multilib.\n+\t* include/private/gcconfig.h: Likewise.\n+\t* powerpc_darwin_mach_dep.s: Likewise.\n+\n 2005-03-01  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* Makefile.in, include/Makefile.in: Regenerate."}, {"sha": "2fad9474716bf9983da10b0e7c20b2e2db1d25c9", "filename": "boehm-gc/darwin_stop_world.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e095fdc7191eea3d9bbf098c5feccc9446dc67/boehm-gc%2Fdarwin_stop_world.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e095fdc7191eea3d9bbf098c5feccc9446dc67/boehm-gc%2Fdarwin_stop_world.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fdarwin_stop_world.c?ref=97e095fdc7191eea3d9bbf098c5feccc9446dc67", "patch": "@@ -1,5 +1,7 @@\n #include \"private/pthread_support.h\"\n \n+/* This probably needs more porting work to ppc64. */\n+\n # if defined(GC_DARWIN_THREADS)\n \n /* From \"Inside Mac OS X - Mach-O Runtime Architecture\" published by Apple\n@@ -14,13 +16,12 @@\n */\n #define PPC_RED_ZONE_SIZE 224\n \n-/* Not 64-bit clean. Wait until Apple defines their 64-bit ABI */\n typedef struct StackFrame {\n-  unsigned int\tsavedSP;\n-  unsigned int\tsavedCR;\n-  unsigned int\tsavedLR;\n-  unsigned int\treserved[2];\n-  unsigned int\tsavedRTOC;\n+  unsigned long\tsavedSP;\n+  unsigned long\tsavedCR;\n+  unsigned long\tsavedLR;\n+  unsigned long\treserved[2];\n+  unsigned long\tsavedRTOC;\n } StackFrame;\n \n "}, {"sha": "fbabdedd772848b8371b79dd148bc3c62907173d", "filename": "boehm-gc/include/private/gcconfig.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e095fdc7191eea3d9bbf098c5feccc9446dc67/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e095fdc7191eea3d9bbf098c5feccc9446dc67/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h?ref=97e095fdc7191eea3d9bbf098c5feccc9446dc67", "patch": "@@ -277,8 +277,9 @@\n #   define MACOS\n #   define mach_type_known\n # endif\n-# if defined(macosx) || \\\n-     defined(__APPLE__) && defined(__MACH__) && defined(__ppc__)\n+# if defined(macosx) \\\n+     || defined(__APPLE__) && defined(__MACH__) && defined(__ppc__) \\\n+     || defined(__APPLE__) && defined(__MACH__) && defined(__ppc64__)\n #    define DARWIN\n #    define POWERPC\n #    define mach_type_known\n@@ -756,7 +757,12 @@\n #     define DATAEND (_end)\n #   endif\n #   ifdef DARWIN\n-#     define ALIGNMENT 4\n+#     if (defined (__ppc64__))\n+#       define ALIGNMENT 8\n+#       define CPP_WORDSZ 64\n+#     else\n+#       define ALIGNMENT 4\n+#     endif\n #     define OS_TYPE \"DARWIN\"\n #     define DYNAMIC_LOADING\n       /* XXX: see get_end(3), get_etext() and get_end() should not be used."}, {"sha": "694005f416dbe62da7108bb7f61191a0a44a326a", "filename": "boehm-gc/powerpc_darwin_mach_dep.s", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e095fdc7191eea3d9bbf098c5feccc9446dc67/boehm-gc%2Fpowerpc_darwin_mach_dep.s", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e095fdc7191eea3d9bbf098c5feccc9446dc67/boehm-gc%2Fpowerpc_darwin_mach_dep.s", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fpowerpc_darwin_mach_dep.s?ref=97e095fdc7191eea3d9bbf098c5feccc9446dc67", "patch": "@@ -1,10 +1,21 @@\n+#if defined(__ppc64__)\n+#define MODE_CHOICE(x, y) y\n+#else\n+#define MODE_CHOICE(x, y) x\n+#endif\n+\n+#define lgu     MODE_CHOICE(lwzu, ldu)\n+\n+#define g_long  MODE_CHOICE(long, quad)         /* usage is \".g_long\" */\n+\n+#define LOG2_GPR_BYTES  MODE_CHOICE(2,3)        /* log2(GPR_BYTES) */\n \n ; GC_push_regs function. Under some optimization levels GCC will clobber\n ; some of the non-volatile registers before we get a chance to save them\n ; therefore, this can't be inline asm.\n \n .text\n-\t.align 2\n+\t.align LOG2_GPR_BYTES\n \t.globl _GC_push_regs\n _GC_push_regs:\n     \n@@ -65,7 +76,7 @@ _GC_push_regs:\n \n .data\n .section __TEXT,__picsymbolstub1,symbol_stubs,pure_instructions,32\n-\t.align 2\n+\t.align LOG2_GPR_BYTES\n L_GC_push_one$stub:\n \t.indirect_symbol _GC_push_one\n \tmflr r0\n@@ -74,11 +85,11 @@ L0$_GC_push_one:\n \tmflr r11\n \taddis r11,r11,ha16(L_GC_push_one$lazy_ptr-L0$_GC_push_one)\n \tmtlr r0\n-\tlwzu r12,lo16(L_GC_push_one$lazy_ptr-L0$_GC_push_one)(r11)\n+\tlgu r12,lo16(L_GC_push_one$lazy_ptr-L0$_GC_push_one)(r11)\n \tmtctr r12\n \tbctr\n .data\n .lazy_symbol_pointer\n L_GC_push_one$lazy_ptr:\n \t.indirect_symbol _GC_push_one\n-\t.long dyld_stub_binding_helper\n+\t.g_long dyld_stub_binding_helper"}]}