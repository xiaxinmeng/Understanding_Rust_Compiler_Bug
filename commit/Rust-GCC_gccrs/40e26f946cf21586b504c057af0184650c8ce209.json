{"sha": "40e26f946cf21586b504c057af0184650c8ce209", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBlMjZmOTQ2Y2YyMTU4NmI1MDRjMDU3YWYwMTg0NjUwYzhjZTIwOQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2016-01-18T12:52:53Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2016-01-18T12:52:53Z"}, "message": "Add oacc kernels tests in goacc\n\n2016-01-18  Tom de Vries  <tom@codesourcery.com>\n\n\t* c-c++-common/goacc/kernels-counter-vars-function-scope.c: New test.\n\t* c-c++-common/goacc/kernels-double-reduction.c: New test.\n\t* c-c++-common/goacc/kernels-empty.c: New test.\n\t* c-c++-common/goacc/kernels-eternal.c: New test.\n\t* c-c++-common/goacc/kernels-loop-2.c: New test.\n\t* c-c++-common/goacc/kernels-loop-3.c: New test.\n\t* c-c++-common/goacc/kernels-loop-data-2.c: New test.\n\t* c-c++-common/goacc/kernels-loop-data-enter-exit-2.c: New test.\n\t* c-c++-common/goacc/kernels-loop-data-enter-exit.c: New test.\n\t* c-c++-common/goacc/kernels-loop-data-update.c: New test.\n\t* c-c++-common/goacc/kernels-loop-data.c: New test.\n\t* c-c++-common/goacc/kernels-loop-g.c: New test.\n\t* c-c++-common/goacc/kernels-loop-mod-not-zero.c: New test.\n\t* c-c++-common/goacc/kernels-loop-n.c: New test.\n\t* c-c++-common/goacc/kernels-loop-nest.c: New test.\n\t* c-c++-common/goacc/kernels-loop.c: New test.\n\t* c-c++-common/goacc/kernels-noreturn.c: New test.\n\t* c-c++-common/goacc/kernels-one-counter-var.c: New test.\n\t* c-c++-common/goacc/kernels-parallel-loop-data-enter-exit.c: New test.\n\t* c-c++-common/goacc/kernels-reduction.c: New test.\n\nFrom-SVN: r232514", "tree": {"sha": "5bf6ddf8741d3c7c0d63c51e7ddee342c76932df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bf6ddf8741d3c7c0d63c51e7ddee342c76932df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40e26f946cf21586b504c057af0184650c8ce209", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40e26f946cf21586b504c057af0184650c8ce209", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40e26f946cf21586b504c057af0184650c8ce209", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40e26f946cf21586b504c057af0184650c8ce209/comments", "author": null, "committer": null, "parents": [{"sha": "a98d46476839e0ef23fb2eccfb034ad15db8e9f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a98d46476839e0ef23fb2eccfb034ad15db8e9f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a98d46476839e0ef23fb2eccfb034ad15db8e9f9"}], "stats": {"total": 609, "additions": 609, "deletions": 0}, "files": [{"sha": "18c4f6c9e7f4c3294905e3f2f48c115e949fc084", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=40e26f946cf21586b504c057af0184650c8ce209", "patch": "@@ -1,3 +1,26 @@\n+2016-01-18  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* c-c++-common/goacc/kernels-counter-vars-function-scope.c: New test.\n+\t* c-c++-common/goacc/kernels-double-reduction.c: New test.\n+\t* c-c++-common/goacc/kernels-empty.c: New test.\n+\t* c-c++-common/goacc/kernels-eternal.c: New test.\n+\t* c-c++-common/goacc/kernels-loop-2.c: New test.\n+\t* c-c++-common/goacc/kernels-loop-3.c: New test.\n+\t* c-c++-common/goacc/kernels-loop-data-2.c: New test.\n+\t* c-c++-common/goacc/kernels-loop-data-enter-exit-2.c: New test.\n+\t* c-c++-common/goacc/kernels-loop-data-enter-exit.c: New test.\n+\t* c-c++-common/goacc/kernels-loop-data-update.c: New test.\n+\t* c-c++-common/goacc/kernels-loop-data.c: New test.\n+\t* c-c++-common/goacc/kernels-loop-g.c: New test.\n+\t* c-c++-common/goacc/kernels-loop-mod-not-zero.c: New test.\n+\t* c-c++-common/goacc/kernels-loop-n.c: New test.\n+\t* c-c++-common/goacc/kernels-loop-nest.c: New test.\n+\t* c-c++-common/goacc/kernels-loop.c: New test.\n+\t* c-c++-common/goacc/kernels-noreturn.c: New test.\n+\t* c-c++-common/goacc/kernels-one-counter-var.c: New test.\n+\t* c-c++-common/goacc/kernels-parallel-loop-data-enter-exit.c: New test.\n+\t* c-c++-common/goacc/kernels-reduction.c: New test.\n+\n 2016-01-18  Tom de Vries  <tom@codesourcery.com>\n \n \t* gcc.dg/autopar/outer-1.c: Update for new parloops instantiation."}, {"sha": "e8b5357cc01f445c5bbc998ce62ec244a4763426", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-counter-vars-function-scope.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-counter-vars-function-scope.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-counter-vars-function-scope.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-counter-vars-function-scope.c?ref=40e26f946cf21586b504c057af0184650c8ce209", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-ftree-parallelize-loops=32\" } */\n+/* { dg-additional-options \"-fdump-tree-parloops1-all\" } */\n+/* { dg-additional-options \"-fdump-tree-optimized\" } */\n+\n+#include <stdlib.h>\n+\n+#define N (1024 * 512)\n+#define COUNTERTYPE unsigned int\n+\n+int\n+main (void)\n+{\n+  unsigned int *__restrict a;\n+  unsigned int *__restrict b;\n+  unsigned int *__restrict c;\n+  COUNTERTYPE i;\n+  COUNTERTYPE ii;\n+\n+  a = (unsigned int *)malloc (N * sizeof (unsigned int));\n+  b = (unsigned int *)malloc (N * sizeof (unsigned int));\n+  c = (unsigned int *)malloc (N * sizeof (unsigned int));\n+\n+  for (i = 0; i < N; i++)\n+    a[i] = i * 2;\n+\n+  for (i = 0; i < N; i++)\n+    b[i] = i * 4;\n+\n+#pragma acc kernels copyin (a[0:N], b[0:N]) copyout (c[0:N])\n+  {\n+    for (ii = 0; ii < N; ii++)\n+      c[ii] = a[ii] + b[ii];\n+  }\n+\n+  for (i = 0; i < N; i++)\n+    if (c[i] != a[i] + b[i])\n+      abort ();\n+\n+  free (a);\n+  free (b);\n+  free (c);\n+\n+  return 0;\n+}\n+\n+/* Check that only one loop is analyzed, and that it can be parallelized.  */\n+/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n+\n+/* Check that the loop has been split off into a function.  */\n+/* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.0\" 1 \"optimized\" } } */\n+\n+/* { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(32,\" 1 \"parloops1\" } } */"}, {"sha": "c39d67458f82197d24699963f79067f52311b435", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-double-reduction-n.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-double-reduction-n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-double-reduction-n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-double-reduction-n.c?ref=40e26f946cf21586b504c057af0184650c8ce209", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-ftree-parallelize-loops=32\" } */\n+/* { dg-additional-options \"-fdump-tree-parloops1-all\" } */\n+/* { dg-additional-options \"-fdump-tree-optimized\" } */\n+\n+#include <stdlib.h>\n+\n+#define N 500\n+\n+unsigned int a[N][N];\n+\n+void  __attribute__((noinline,noclone))\n+foo (unsigned int n)\n+{\n+  int i, j;\n+  unsigned int sum = 1;\n+\n+#pragma acc kernels copyin (a[0:n]) copy (sum)\n+  {\n+    for (i = 0; i < n; ++i)\n+      for (j = 0; j < n; ++j)\n+\tsum += a[i][j];\n+  }\n+\n+  if (sum != 5001)\n+    abort ();\n+}\n+\n+/* Check that only one loop is analyzed, and that it can be parallelized.  */\n+/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-times \"parallelizing outer loop\" 1 \"parloops1\" } } */\n+\n+/* Check that the loop has been split off into a function.  */\n+/* { dg-final { scan-tree-dump-times \"(?n);; Function .*foo.*._omp_fn.0\" 1 \"optimized\" } } */\n+\n+/* { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(32,\" 1 \"parloops1\" } } */"}, {"sha": "3501d0df152f7291594e1a75ffc9621e5974f2d0", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-double-reduction.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-double-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-double-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-double-reduction.c?ref=40e26f946cf21586b504c057af0184650c8ce209", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-ftree-parallelize-loops=32\" } */\n+/* { dg-additional-options \"-fdump-tree-parloops1-all\" } */\n+/* { dg-additional-options \"-fdump-tree-optimized\" } */\n+\n+#include <stdlib.h>\n+\n+#define N 500\n+\n+unsigned int a[N][N];\n+\n+void  __attribute__((noinline,noclone))\n+foo (void)\n+{\n+  int i, j;\n+  unsigned int sum = 1;\n+\n+#pragma acc kernels copyin (a[0:N]) copy (sum)\n+  {\n+    for (i = 0; i < N; ++i)\n+      for (j = 0; j < N; ++j)\n+\tsum += a[i][j];\n+  }\n+\n+  if (sum != 5001)\n+    abort ();\n+}\n+\n+/* Check that only one loop is analyzed, and that it can be parallelized.  */\n+/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-times \"parallelizing outer loop\" 1 \"parloops1\" } } */\n+\n+/* Check that the loop has been split off into a function.  */\n+/* { dg-final { scan-tree-dump-times \"(?n);; Function .*foo.*._omp_fn.0\" 1 \"optimized\" } } */\n+\n+/* { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(32,\" 1 \"parloops1\" } } */"}, {"sha": "e91b81c8d04aada8e9a115affdb2adfa53c9c586", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-empty.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-empty.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-empty.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-empty.c?ref=40e26f946cf21586b504c057af0184650c8ce209", "patch": "@@ -0,0 +1,6 @@\n+void\n+foo (void)\n+{\n+#pragma acc kernels\n+  ;\n+}"}, {"sha": "edc17d2960c9e42e803110d7f4a8a6af0e1cb593", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-eternal.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-eternal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-eternal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-eternal.c?ref=40e26f946cf21586b504c057af0184650c8ce209", "patch": "@@ -0,0 +1,11 @@\n+int\n+main (void)\n+{\n+#pragma acc kernels\n+  {\n+    while (1)\n+      ;\n+  }\n+\n+  return 0;\n+}"}, {"sha": "f97584dd22d2f4d5c630a9470682de01e88d7f82", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-loop-2.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-2.c?ref=40e26f946cf21586b504c057af0184650c8ce209", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-ftree-parallelize-loops=32\" } */\n+/* { dg-additional-options \"-fdump-tree-parloops1-all\" } */\n+/* { dg-additional-options \"-fdump-tree-optimized\" } */\n+\n+#include <stdlib.h>\n+\n+#define N (1024 * 512)\n+#define COUNTERTYPE unsigned int\n+\n+int\n+main (void)\n+{\n+  unsigned int *__restrict a;\n+  unsigned int *__restrict b;\n+  unsigned int *__restrict c;\n+\n+  a = (unsigned int *)malloc (N * sizeof (unsigned int));\n+  b = (unsigned int *)malloc (N * sizeof (unsigned int));\n+  c = (unsigned int *)malloc (N * sizeof (unsigned int));\n+\n+#pragma acc kernels copyout (a[0:N])\n+  {\n+#ifdef ACC_LOOP\n+    #pragma acc loop\n+#endif\n+    for (COUNTERTYPE i = 0; i < N; i++)\n+      a[i] = i * 2;\n+  }\n+\n+#pragma acc kernels copyout (b[0:N])\n+  {\n+#ifdef ACC_LOOP\n+    #pragma acc loop\n+#endif\n+    for (COUNTERTYPE i = 0; i < N; i++)\n+      b[i] = i * 4;\n+  }\n+\n+#pragma acc kernels copyin (a[0:N], b[0:N]) copyout (c[0:N])\n+  {\n+#ifdef ACC_LOOP\n+    #pragma acc loop\n+#endif\n+    for (COUNTERTYPE ii = 0; ii < N; ii++)\n+      c[ii] = a[ii] + b[ii];\n+  }\n+\n+  for (COUNTERTYPE i = 0; i < N; i++)\n+    if (c[i] != a[i] + b[i])\n+      abort ();\n+\n+  free (a);\n+  free (b);\n+  free (c);\n+\n+  return 0;\n+}\n+\n+/* Check that only three loops are analyzed, and that all can be\n+   parallelized.  */\n+/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 3 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n+\n+/* Check that the loop has been split off into a function.  */\n+/* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.0\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.1\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.2\" 1 \"optimized\" } } */\n+\n+/* { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(32,\" 3 \"parloops1\" } } */"}, {"sha": "530d62ab867850e41dbb4a2a0558aee6471e7f87", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-loop-3.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-3.c?ref=40e26f946cf21586b504c057af0184650c8ce209", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-ftree-parallelize-loops=32\" } */\n+/* { dg-additional-options \"-fdump-tree-parloops1-all\" } */\n+/* { dg-additional-options \"-fdump-tree-optimized\" } */\n+\n+#include <stdlib.h>\n+\n+#define N (1024 * 512)\n+#define COUNTERTYPE unsigned int\n+\n+int\n+main (void)\n+{\n+  unsigned int i;\n+\n+  unsigned int *__restrict c;\n+\n+  c = (unsigned int *__restrict)malloc (N * sizeof (unsigned int));\n+\n+  for (COUNTERTYPE i = 0; i < N; i++)\n+    c[i] = i * 2;\n+\n+#pragma acc kernels copy (c[0:N])\n+  {\n+#ifdef ACC_LOOP\n+    #pragma acc loop\n+#endif\n+    for (COUNTERTYPE ii = 0; ii < N; ii++)\n+      c[ii] = c[ii] + ii + 1;\n+  }\n+\n+  for (COUNTERTYPE i = 0; i < N; i++)\n+    if (c[i] != i * 2 + i + 1)\n+      abort ();\n+\n+  free (c);\n+\n+  return 0;\n+}\n+\n+/* Check that only one loop is analyzed, and that it can be parallelized.  */\n+/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n+\n+/* Check that the loop has been split off into a function.  */\n+/* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.0\" 1 \"optimized\" } } */\n+\n+/* { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(32,\" 1 \"parloops1\" } } */\n+"}, {"sha": "4f1c2c5cb21486a1da78ac9e832ddb4a68f34503", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-loop-g.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-g.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-g.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-g.c?ref=40e26f946cf21586b504c057af0184650c8ce209", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-g\" } */\n+/* { dg-additional-options \"-ftree-parallelize-loops=32\" } */\n+/* { dg-additional-options \"-fdump-tree-parloops1-all\" } */\n+/* { dg-additional-options \"-fdump-tree-optimized\" } */\n+\n+#include \"kernels-loop.c\"\n+\n+/* Check that only one loop is analyzed, and that it can be parallelized.  */\n+/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n+\n+/* Check that the loop has been split off into a function.  */\n+/* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.0\" 1 \"optimized\" } } */\n+\n+/* { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(32,\" 1 \"parloops1\" } } */\n+"}, {"sha": "151db51833063eae2b134abb64141aed1754b0e3", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-loop-mod-not-zero.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-mod-not-zero.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-mod-not-zero.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-mod-not-zero.c?ref=40e26f946cf21586b504c057af0184650c8ce209", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-ftree-parallelize-loops=32\" } */\n+/* { dg-additional-options \"-fdump-tree-parloops1-all\" } */\n+/* { dg-additional-options \"-fdump-tree-optimized\" } */\n+\n+#include <stdlib.h>\n+\n+#define N ((1024 * 512) + 1)\n+#define COUNTERTYPE unsigned int\n+\n+int\n+main (void)\n+{\n+  unsigned int *__restrict a;\n+  unsigned int *__restrict b;\n+  unsigned int *__restrict c;\n+\n+  a = (unsigned int *__restrict)malloc (N * sizeof (unsigned int));\n+  b = (unsigned int *__restrict)malloc (N * sizeof (unsigned int));\n+  c = (unsigned int *__restrict)malloc (N * sizeof (unsigned int));\n+\n+  for (COUNTERTYPE i = 0; i < N; i++)\n+    a[i] = i * 2;\n+\n+  for (COUNTERTYPE i = 0; i < N; i++)\n+    b[i] = i * 4;\n+\n+#pragma acc kernels copyin (a[0:N], b[0:N]) copyout (c[0:N])\n+  {\n+    for (COUNTERTYPE ii = 0; ii < N; ii++)\n+      c[ii] = a[ii] + b[ii];\n+  }\n+\n+  for (COUNTERTYPE i = 0; i < N; i++)\n+    if (c[i] != a[i] + b[i])\n+      abort ();\n+\n+  free (a);\n+  free (b);\n+  free (c);\n+\n+  return 0;\n+}\n+\n+/* Check that only one loop is analyzed, and that it can be parallelized.  */\n+/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n+\n+/* Check that the loop has been split off into a function.  */\n+/* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.0\" 1 \"optimized\" } } */\n+\n+/* { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(32,\" 1 \"parloops1\" } } */"}, {"sha": "bee5f5a6098a93551b296f9f5d5428330b4e7e67", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-loop-n.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-n.c?ref=40e26f946cf21586b504c057af0184650c8ce209", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-ftree-parallelize-loops=32\" } */\n+/* { dg-additional-options \"-fdump-tree-parloops1-all\" } */\n+/* { dg-additional-options \"-fdump-tree-optimized\" } */\n+\n+#include <stdlib.h>\n+\n+#define N ((1024 * 512) + 1)\n+#define COUNTERTYPE unsigned int\n+\n+int\n+foo (COUNTERTYPE n)\n+{\n+  unsigned int *__restrict a;\n+  unsigned int *__restrict b;\n+  unsigned int *__restrict c;\n+\n+  a = (unsigned int *__restrict)malloc (n * sizeof (unsigned int));\n+  b = (unsigned int *__restrict)malloc (n * sizeof (unsigned int));\n+  c = (unsigned int *__restrict)malloc (n * sizeof (unsigned int));\n+\n+  for (COUNTERTYPE i = 0; i < n; i++)\n+    a[i] = i * 2;\n+\n+  for (COUNTERTYPE i = 0; i < n; i++)\n+    b[i] = i * 4;\n+\n+#pragma acc kernels copyin (a[0:n], b[0:n]) copyout (c[0:n])\n+  {\n+#ifdef ACC_LOOP\n+    #pragma acc loop\n+#endif\n+    for (COUNTERTYPE ii = 0; ii < n; ii++)\n+      c[ii] = a[ii] + b[ii];\n+  }\n+\n+  for (COUNTERTYPE i = 0; i < n; i++)\n+    if (c[i] != a[i] + b[i])\n+      abort ();\n+\n+  free (a);\n+  free (b);\n+  free (c);\n+\n+  return 0;\n+}\n+\n+/* Check that only one loop is analyzed, and that it can be parallelized.  */\n+/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n+\n+/* Check that the loop has been split off into a function.  */\n+/* { dg-final { scan-tree-dump-times \"(?n);; Function .*foo.*._omp_fn.0\" 1 \"optimized\" } } */\n+\n+/* { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(32,\" 1 \"parloops1\" } } */\n+"}, {"sha": "ea0e342ffba25e18fb48f2348f75f37a39e428da", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-loop-nest.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-nest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-nest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-nest.c?ref=40e26f946cf21586b504c057af0184650c8ce209", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-ftree-parallelize-loops=32\" } */\n+/* { dg-additional-options \"-fdump-tree-parloops1-all\" } */\n+/* { dg-additional-options \"-fdump-tree-optimized\" } */\n+\n+/* Based on autopar/outer-1.c.  */\n+\n+#include <stdlib.h>\n+\n+#define N 1000\n+\n+int\n+main (void)\n+{\n+  int x[N][N];\n+\n+#pragma acc kernels copyout (x)\n+  {\n+    for (int ii = 0; ii < N; ii++)\n+      for (int jj = 0; jj < N; jj++)\n+\tx[ii][jj] = ii + jj + 3;\n+  }\n+\n+  for (int i = 0; i < N; i++)\n+    for (int j = 0; j < N; j++)\n+      if (x[i][j] != i + j + 3)\n+\tabort ();\n+\n+  return 0;\n+}\n+\n+/* Check that only one loop is analyzed, and that it can be parallelized.  */\n+/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n+\n+/* Check that the loop has been split off into a function.  */\n+/* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.0\" 1 \"optimized\" } } */\n+\n+/* { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(32,\" 1 \"parloops1\" } } */"}, {"sha": "ab5dfb9ca0372de2132fc006cb83e3c5f587f705", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-loop.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop.c?ref=40e26f946cf21586b504c057af0184650c8ce209", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-ftree-parallelize-loops=32\" } */\n+/* { dg-additional-options \"-fdump-tree-parloops1-all\" } */\n+/* { dg-additional-options \"-fdump-tree-optimized\" } */\n+\n+#include <stdlib.h>\n+\n+#define N (1024 * 512)\n+#define COUNTERTYPE unsigned int\n+\n+int\n+main (void)\n+{\n+  unsigned int *__restrict a;\n+  unsigned int *__restrict b;\n+  unsigned int *__restrict c;\n+\n+  a = (unsigned int *)malloc (N * sizeof (unsigned int));\n+  b = (unsigned int *)malloc (N * sizeof (unsigned int));\n+  c = (unsigned int *)malloc (N * sizeof (unsigned int));\n+\n+  for (COUNTERTYPE i = 0; i < N; i++)\n+    a[i] = i * 2;\n+\n+  for (COUNTERTYPE i = 0; i < N; i++)\n+    b[i] = i * 4;\n+\n+#pragma acc kernels copyin (a[0:N], b[0:N]) copyout (c[0:N])\n+  {\n+#ifdef ACC_LOOP\n+    #pragma acc loop\n+#endif\n+    for (COUNTERTYPE ii = 0; ii < N; ii++)\n+      c[ii] = a[ii] + b[ii];\n+  }\n+\n+  for (COUNTERTYPE i = 0; i < N; i++)\n+    if (c[i] != a[i] + b[i])\n+      abort ();\n+\n+  free (a);\n+  free (b);\n+  free (c);\n+\n+  return 0;\n+}\n+\n+/* Check that only one loop is analyzed, and that it can be parallelized.  */\n+/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n+\n+/* Check that the loop has been split off into a function.  */\n+/* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.0\" 1 \"optimized\" } } */\n+\n+/* { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(32,\" 1 \"parloops1\" } } */\n+"}, {"sha": "1a8cc6778e83c949da57473fd9e35f92e2eedffc", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-noreturn.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-noreturn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-noreturn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-noreturn.c?ref=40e26f946cf21586b504c057af0184650c8ce209", "patch": "@@ -0,0 +1,12 @@\n+int\n+main (void)\n+{\n+\n+#pragma acc kernels\n+  {\n+    __builtin_abort ();\n+  }\n+\n+  return 0;\n+}\n+"}, {"sha": "b16a8cd2b1c9336d6e253eb2e35a1f6f25335974", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-one-counter-var.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-one-counter-var.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-one-counter-var.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-one-counter-var.c?ref=40e26f946cf21586b504c057af0184650c8ce209", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-ftree-parallelize-loops=32\" } */\n+/* { dg-additional-options \"-fdump-tree-parloops1-all\" } */\n+/* { dg-additional-options \"-fdump-tree-optimized\" } */\n+\n+#include <stdlib.h>\n+\n+#define N (1024 * 512)\n+#define COUNTERTYPE unsigned int\n+\n+int\n+main (void)\n+{\n+  unsigned int *__restrict a;\n+  unsigned int *__restrict b;\n+  unsigned int *__restrict c;\n+  COUNTERTYPE i;\n+\n+  a = (unsigned int *)malloc (N * sizeof (unsigned int));\n+  b = (unsigned int *)malloc (N * sizeof (unsigned int));\n+  c = (unsigned int *)malloc (N * sizeof (unsigned int));\n+\n+  for (i = 0; i < N; i++)\n+    a[i] = i * 2;\n+\n+  for (i = 0; i < N; i++)\n+    b[i] = i * 4;\n+\n+#pragma acc kernels copyin (a[0:N], b[0:N]) copyout (c[0:N])\n+  {\n+    for (i = 0; i < N; i++)\n+      c[i] = a[i] + b[i];\n+  }\n+\n+  for (i = 0; i < N; i++)\n+    if (c[i] != a[i] + b[i])\n+      abort ();\n+\n+  free (a);\n+  free (b);\n+  free (c);\n+\n+  return 0;\n+}\n+\n+/* Check that only one loop is analyzed, and that it can be parallelized.  */\n+/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n+\n+/* Check that the loop has been split off into a function.  */\n+/* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.0\" 1 \"optimized\" } } */\n+\n+/* { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(32,\" 1 \"parloops1\" } } */\n+"}, {"sha": "61c5df3a626bc4d340b0b2314708413c954e4719", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-reduction.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e26f946cf21586b504c057af0184650c8ce209/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-reduction.c?ref=40e26f946cf21586b504c057af0184650c8ce209", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-ftree-parallelize-loops=32\" } */\n+/* { dg-additional-options \"-fdump-tree-parloops1-all\" } */\n+/* { dg-additional-options \"-fdump-tree-optimized\" } */\n+\n+#include <stdlib.h>\n+\n+#define n 10000\n+\n+unsigned int a[n];\n+\n+void  __attribute__((noinline,noclone))\n+foo (void)\n+{\n+  int i;\n+  unsigned int sum = 1;\n+\n+#pragma acc kernels copyin (a[0:n]) copy (sum)\n+  {\n+    for (i = 0; i < n; ++i)\n+      sum += a[i];\n+  }\n+\n+  if (sum != 5001)\n+    abort ();\n+}\n+\n+/* Check that only one loop is analyzed, and that it can be parallelized.  */\n+/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n+\n+/* Check that the loop has been split off into a function.  */\n+/* { dg-final { scan-tree-dump-times \"(?n);; Function .*foo.*._omp_fn.0\" 1 \"optimized\" } } */\n+\n+/* { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(32,\" 1 \"parloops1\" } } */\n+"}]}