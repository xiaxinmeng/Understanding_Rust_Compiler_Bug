{"sha": "6a48d12475cdb7375b98277f8bc089715feeeafe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE0OGQxMjQ3NWNkYjczNzViOTgyNzdmOGJjMDg5NzE1ZmVlZWFmZQ==", "commit": {"author": {"name": "Matthias Klose", "email": "doko@ubuntu.com", "date": "2020-07-14T08:12:08Z"}, "committer": {"name": "Matthias Klose", "email": "doko@ubuntu.com", "date": "2020-07-14T08:12:08Z"}, "message": "LTO: pick up -fcf-protection flag for the link step\n\n2020-07-14  Matthias Klose  <doko@ubuntu.com>\n\n\tPR lto/95604\n\t* lto-wrapper.c (merge_and_complain): Add decoded options as parameter,\n\terror on different values for -fcf-protection.\n\t(append_compiler_options): Pass -fcf-protection option.\n\t(find_and_merge_options): Add decoded options as parameter,\n\tpass decoded_options to merge_and_complain.\n\t(run_gcc): Pass decoded options to find_and_merge_options.\n\t* lto-opts.c (lto_write_options): Pass -fcf-protection option.", "tree": {"sha": "4a9e567562d83843e1d1b75ec5affdfa810add2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a9e567562d83843e1d1b75ec5affdfa810add2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a48d12475cdb7375b98277f8bc089715feeeafe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a48d12475cdb7375b98277f8bc089715feeeafe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a48d12475cdb7375b98277f8bc089715feeeafe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a48d12475cdb7375b98277f8bc089715feeeafe/comments", "author": {"login": "doko42", "id": 11258518, "node_id": "MDQ6VXNlcjExMjU4NTE4", "avatar_url": "https://avatars.githubusercontent.com/u/11258518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doko42", "html_url": "https://github.com/doko42", "followers_url": "https://api.github.com/users/doko42/followers", "following_url": "https://api.github.com/users/doko42/following{/other_user}", "gists_url": "https://api.github.com/users/doko42/gists{/gist_id}", "starred_url": "https://api.github.com/users/doko42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doko42/subscriptions", "organizations_url": "https://api.github.com/users/doko42/orgs", "repos_url": "https://api.github.com/users/doko42/repos", "events_url": "https://api.github.com/users/doko42/events{/privacy}", "received_events_url": "https://api.github.com/users/doko42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "doko42", "id": 11258518, "node_id": "MDQ6VXNlcjExMjU4NTE4", "avatar_url": "https://avatars.githubusercontent.com/u/11258518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doko42", "html_url": "https://github.com/doko42", "followers_url": "https://api.github.com/users/doko42/followers", "following_url": "https://api.github.com/users/doko42/following{/other_user}", "gists_url": "https://api.github.com/users/doko42/gists{/gist_id}", "starred_url": "https://api.github.com/users/doko42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doko42/subscriptions", "organizations_url": "https://api.github.com/users/doko42/orgs", "repos_url": "https://api.github.com/users/doko42/repos", "events_url": "https://api.github.com/users/doko42/events{/privacy}", "received_events_url": "https://api.github.com/users/doko42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ad19a66d751ab48515ef61f830e192ae4078b93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ad19a66d751ab48515ef61f830e192ae4078b93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ad19a66d751ab48515ef61f830e192ae4078b93"}], "stats": {"total": 59, "additions": 56, "deletions": 3}, "files": [{"sha": "960e4e7af05c8cae0f7cf2ecf94217f1d414fc13", "filename": "gcc/lto-opts.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a48d12475cdb7375b98277f8bc089715feeeafe/gcc%2Flto-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a48d12475cdb7375b98277f8bc089715feeeafe/gcc%2Flto-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-opts.c?ref=6a48d12475cdb7375b98277f8bc089715feeeafe", "patch": "@@ -94,6 +94,21 @@ lto_write_options (void)\n \t\t\t\t      : \"-fno-pie\");\n     }\n \n+  if (!global_options_set.x_flag_cf_protection)\n+    {\n+      append_to_collect_gcc_options (\n+\t&temporary_obstack, &first_p,\n+\tglobal_options.x_flag_cf_protection == CF_NONE\n+\t? \"-fcf-protection=none\"\n+\t: global_options.x_flag_cf_protection == CF_FULL\n+\t? \"-fcf-protection=full\"\n+\t: global_options.x_flag_cf_protection == CF_BRANCH\n+\t? \"-fcf-protection=branch\"\n+\t: global_options.x_flag_cf_protection == CF_RETURN\n+\t? \"-fcf-protection=return\"\n+\t: \"\");\n+    }\n+\n   /* If debug info is enabled append -g.  */\n   if (debug_info_level > DINFO_LEVEL_NONE)\n     append_to_collect_gcc_options (&temporary_obstack, &first_p, \"-g\");"}, {"sha": "5578b6d32001fb900fcceadb39e54b74f88a230f", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a48d12475cdb7375b98277f8bc089715feeeafe/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a48d12475cdb7375b98277f8bc089715feeeafe/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=6a48d12475cdb7375b98277f8bc089715feeeafe", "patch": "@@ -199,11 +199,14 @@ static void\n merge_and_complain (struct cl_decoded_option **decoded_options,\n \t\t    unsigned int *decoded_options_count,\n \t\t    struct cl_decoded_option *fdecoded_options,\n-\t\t    unsigned int fdecoded_options_count)\n+\t\t    unsigned int fdecoded_options_count,\n+\t\t    struct cl_decoded_option *decoded_cl_options,\n+\t\t    unsigned int decoded_cl_options_count)\n {\n   unsigned int i, j;\n   struct cl_decoded_option *pic_option = NULL;\n   struct cl_decoded_option *pie_option = NULL;\n+  struct cl_decoded_option *cf_protection_option = NULL;\n \n   /* ???  Merge options from files.  Most cases can be\n      handled by either unioning or intersecting\n@@ -218,6 +221,17 @@ merge_and_complain (struct cl_decoded_option **decoded_options,\n      In absence of that it's unclear what a good default is.\n      It's also difficult to get positional handling correct.  */\n \n+  /* Look for a -fcf-protection option in the link-time options\n+     which overrides any -fcf-protection from the lto sections.  */\n+  for (i = 0; i < decoded_cl_options_count; ++i)\n+    {\n+      struct cl_decoded_option *foption = &decoded_cl_options[i];\n+      if (foption->opt_index == OPT_fcf_protection_)\n+\t{\n+\t  cf_protection_option = foption;\n+\t}\n+    }\n+  \n   /* The following does what the old LTO option code did,\n      union all target and a selected set of common options.  */\n   for (i = 0; i < fdecoded_options_count; ++i)\n@@ -294,6 +308,23 @@ merge_and_complain (struct cl_decoded_option **decoded_options,\n \t\t\t foption->orig_option_with_args_text);\n \t  break;\n \n+\tcase OPT_fcf_protection_:\n+\t  /* Default to link-time option, else append or check identical.  */\n+\t  if (!cf_protection_option)\n+\t    {\n+\t      for (j = 0; j < *decoded_options_count; ++j)\n+\t\tif ((*decoded_options)[j].opt_index == foption->opt_index)\n+\t\t  break;\n+\t      if (j == *decoded_options_count)\n+\t\tappend_option (decoded_options, decoded_options_count, foption);\n+\t      else if (strcmp ((*decoded_options)[j].arg, foption->arg))\n+\t\tfatal_error (input_location,\n+\t\t\t     \"option -fcf-protection with mismatching values\"\n+\t\t\t     \" (%s, %s)\",\n+\t\t\t     (*decoded_options)[j].arg, foption->arg);\n+\t    }\n+\t    break;\n+\n \tcase OPT_O:\n \tcase OPT_Ofast:\n \tcase OPT_Og:\n@@ -638,6 +669,7 @@ append_compiler_options (obstack *argv_obstack, struct cl_decoded_option *opts,\n \tcase OPT_fopenacc:\n \tcase OPT_fopenacc_dim_:\n \tcase OPT_foffload_abi_:\n+\tcase OPT_fcf_protection_:\n \tcase OPT_g:\n \tcase OPT_O:\n \tcase OPT_Ofast:\n@@ -1004,12 +1036,14 @@ find_crtoffloadtable (void)\n \n /* A subroutine of run_gcc.  Examine the open file FD for lto sections with\n    name prefix PREFIX, at FILE_OFFSET, and store any options we find in OPTS\n-   and OPT_COUNT.  Return true if we found a matchingn section, false\n+   and OPT_COUNT.  Return true if we found a matching section, false\n    otherwise.  COLLECT_GCC holds the value of the environment variable with\n    the same name.  */\n \n static bool\n find_and_merge_options (int fd, off_t file_offset, const char *prefix,\n+\t\t\tstruct cl_decoded_option *decoded_cl_options,\n+\t\t\tunsigned int decoded_cl_options_count,\n \t\t\tstruct cl_decoded_option **opts,\n \t\t\tunsigned int *opt_count, const char *collect_gcc)\n {\n@@ -1056,7 +1090,9 @@ find_and_merge_options (int fd, off_t file_offset, const char *prefix,\n       else\n \tmerge_and_complain (&fdecoded_options,\n \t\t\t    &fdecoded_options_count,\n-\t\t\t    f2decoded_options, f2decoded_options_count);\n+\t\t\t    f2decoded_options, f2decoded_options_count,\n+\t\t\t    decoded_cl_options,\n+\t\t\t    decoded_cl_options_count);\n \n       fopts += strlen (fopts) + 1;\n     }\n@@ -1391,6 +1427,7 @@ run_gcc (unsigned argc, char *argv[])\n \t}\n \n       if (find_and_merge_options (fd, file_offset, LTO_SECTION_NAME_PREFIX,\n+\t\t\t\t  decoded_options, decoded_options_count,\n \t\t\t\t  &fdecoded_options, &fdecoded_options_count,\n \t\t\t\t  collect_gcc))\n \t{\n@@ -1623,6 +1660,7 @@ run_gcc (unsigned argc, char *argv[])\n \t    fatal_error (input_location, \"cannot open %s: %m\", filename);\n \t  if (!find_and_merge_options (fd, file_offset,\n \t\t\t\t       OFFLOAD_SECTION_NAME_PREFIX,\n+\t\t\t\t       decoded_options, decoded_options_count,\n \t\t\t\t       &offload_fdecoded_options,\n \t\t\t\t       &offload_fdecoded_options_count,\n \t\t\t\t       collect_gcc))"}]}