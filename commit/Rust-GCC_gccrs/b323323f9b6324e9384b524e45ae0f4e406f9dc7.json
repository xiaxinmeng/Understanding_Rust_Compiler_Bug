{"sha": "b323323f9b6324e9384b524e45ae0f4e406f9dc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMyMzMyM2Y5YjYzMjRlOTM4NGI1MjRlNDVhZTBmNGU0MDZmOWRjNw==", "commit": {"author": {"name": "Lee Millward", "email": "lmillward@gcc.gnu.org", "date": "2006-02-03T23:11:09Z"}, "committer": {"name": "Lee Millward", "email": "lmillward@gcc.gnu.org", "date": "2006-02-03T23:11:09Z"}, "message": "typeck.c (string_conv_p): Pass appropiate OPT_Wxxxx values when calling warning().\n\n       * typeck.c (string_conv_p): Pass appropiate\n       OPT_Wxxxx values when calling warning().\n       (build_array_ref, cxx_mark_addressable): Likewise.\n       (check_return_expr): Likewise.\n\n       * init.c (perform_member_init): Likewise.\n       (sort_mem_initializers, emit_mem_initializers): Likewise.\n\n       * class.c (check_field_decls): Likewise.\n       (warn_about_ambiguous_bases): Likewise.\n\n       * decl.c (pop_label, poplevel): Likewise.\n       (duplicate_decls, grok_op_properties): Likewise.\n       (start_preparsed_function, finish_function): Likewise.\n\n       * name-lookup.c (pushdecl_maybe_friend): Likewise.\n       (pushdecl_maybe_friend): Likewise.\n\n       * parser.c (cp_parser_warn_min_max): Likewise.\n       (cp_parser_cast_expression): Likewise.\n\n       * method.c (lazily_declare_fn): Likewise.\n       * cvt.c (convert_to_void): Likewise.\n       * mangle.c (finish_mangling): Likewise.\n       * cp-gimplify.c (gimplify_expr_stmt): Likewise\n.\n\nFrom-SVN: r110567", "tree": {"sha": "5d08778d08f783d3ec1ddcdf874d0ebd56faa9b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d08778d08f783d3ec1ddcdf874d0ebd56faa9b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b323323f9b6324e9384b524e45ae0f4e406f9dc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b323323f9b6324e9384b524e45ae0f4e406f9dc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b323323f9b6324e9384b524e45ae0f4e406f9dc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b323323f9b6324e9384b524e45ae0f4e406f9dc7/comments", "author": null, "committer": null, "parents": [{"sha": "9b43c474f53803635b04c5b530f1ceddb13355f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b43c474f53803635b04c5b530f1ceddb13355f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b43c474f53803635b04c5b530f1ceddb13355f5"}], "stats": {"total": 139, "additions": 82, "deletions": 57}, "files": [{"sha": "63e5f9aecdc9ad9db10016749cd75f916d6ae256", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b323323f9b6324e9384b524e45ae0f4e406f9dc7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b323323f9b6324e9384b524e45ae0f4e406f9dc7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b323323f9b6324e9384b524e45ae0f4e406f9dc7", "patch": "@@ -1,3 +1,31 @@\n+2006-02-03  Lee Millward  <lee.millward@gmail.com>\n+\n+       * typeck.c (string_conv_p): Pass appropiate\n+       OPT_Wxxxx values when calling warning().\n+       (build_array_ref, cxx_mark_addressable): Likewise.\n+       (check_return_expr): Likewise.\n+\n+       * init.c (perform_member_init): Likewise.\n+       (sort_mem_initializers, emit_mem_initializers): Likewise.\n+\n+       * class.c (check_field_decls): Likewise.\n+       (warn_about_ambiguous_bases): Likewise.\n+\n+       * decl.c (pop_label, poplevel): Likewise.\n+       (duplicate_decls, grok_op_properties): Likewise.\n+       (start_preparsed_function, finish_function): Likewise.\n+\n+       * name-lookup.c (pushdecl_maybe_friend): Likewise.\n+       (pushdecl_maybe_friend): Likewise.\n+\n+       * parser.c (cp_parser_warn_min_max): Likewise.\n+       (cp_parser_cast_expression): Likewise.\n+\n+       * method.c (lazily_declare_fn): Likewise.\n+       * cvt.c (convert_to_void): Likewise.\n+       * mangle.c (finish_mangling): Likewise.\n+       * cp-gimplify.c (gimplify_expr_stmt): Likewise.\n+\n 2006-02-03  Mark Mitchell  <mark@codesourcery.com>\n \n \t* name-lookup.c (do_class_using_decl): Use IDENTIFIER_TYPENAME_P,\n@@ -286,7 +314,7 @@\n \t(cp_parser_asm_definition): Call cgraph_add_asm_node rather than\n \tassemble_asm.\n \n-2006-01-16  Rafael \ufffdvila de Esp\ufffdndola  <rafael.espindola@gmail.com>\n+2006-01-16  Rafael \ufffdila de Esp\ufffddola  <rafael.espindola@gmail.com>\n \n \t* g++spec.c (lang_specific_spec_functions): Remove.\n \n@@ -558,7 +586,7 @@\n \t* mangle.c (write_bare_function_type): Mangle return type for\n \tmethods of Java classes\n \n-2005-12-08  Th\ufffdodore Papadopoulo <Theodore.Papadopoulo@sophia.inria.fr>\n+2005-12-08  Th\ufffddore Papadopoulo <Theodore.Papadopoulo@sophia.inria.fr>\n \n \t* call.c (build_conditional_expr): Print types in error messages.\n \n@@ -570,11 +598,11 @@\n \n \t* cp-gimplify.c (gimplify_cp_loop): Use fold_build3.\n \n-2005-12-07  Rafael \ufffdvila de Esp\ufffdndola  <rafael.espindola@gmail.com>\n+2005-12-07  Rafael \ufffdila de Esp\ufffddola  <rafael.espindola@gmail.com>\n \n \t* Make-lang.in (c++.all.build, c++.install-normal): Remove.\n \n-2005-12-07  Rafael \ufffdvila de Esp\ufffdndola  <rafael.espindola@gmail.com>\n+2005-12-07  Rafael \ufffdila de Esp\ufffddola  <rafael.espindola@gmail.com>\n \n \t* Make-lang.in: Remove all dependencies on s-gtype.\n "}, {"sha": "f3240113be32419540c02d4e159d8ee3ba555a6f", "filename": "gcc/cp/class.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b323323f9b6324e9384b524e45ae0f4e406f9dc7/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b323323f9b6324e9384b524e45ae0f4e406f9dc7/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=b323323f9b6324e9384b524e45ae0f4e406f9dc7", "patch": "@@ -2935,9 +2935,8 @@ check_field_decls (tree t, tree *access_decls,\n \t     members.  */\n \t  TYPE_HAS_COMPLEX_ASSIGN_REF (t) = 1;\n \n-\t  if (! TYPE_HAS_CONSTRUCTOR (t) && CLASSTYPE_NON_AGGREGATE (t)\n-\t      && extra_warnings)\n-\t    warning (0, \"non-static reference %q+#D in class without a constructor\", x);\n+\t  if (! TYPE_HAS_CONSTRUCTOR (t) && CLASSTYPE_NON_AGGREGATE (t))\n+\t    warning (OPT_Wextra, \"non-static reference %q+#D in class without a constructor\", x);\n \t}\n \n       type = strip_array_types (type);\n@@ -2982,9 +2981,8 @@ check_field_decls (tree t, tree *access_decls,\n \t     members.  */\n \t  TYPE_HAS_COMPLEX_ASSIGN_REF (t) = 1;\n \n-\t  if (! TYPE_HAS_CONSTRUCTOR (t) && CLASSTYPE_NON_AGGREGATE (t)\n-\t      && extra_warnings)\n-\t    warning (0, \"non-static const member %q+#D in class without a constructor\", x);\n+\t  if (! TYPE_HAS_CONSTRUCTOR (t) && CLASSTYPE_NON_AGGREGATE (t))\n+\t    warning (OPT_Wextra, \"non-static const member %q+#D in class without a constructor\", x);\n \t}\n       /* A field that is pseudo-const makes the structure likewise.  */\n       else if (CLASS_TYPE_P (type))\n@@ -3032,7 +3030,7 @@ check_field_decls (tree t, tree *access_decls,\n \t&& TYPE_HAS_NONTRIVIAL_DESTRUCTOR (t)\n \t&& !(TYPE_HAS_INIT_REF (t) && TYPE_HAS_ASSIGN_REF (t)))\n     {\n-      warning (0, \"%q#T has pointer data members\", t);\n+      warning (OPT_Weffc__, \"%q#T has pointer data members\", t);\n \n       if (! TYPE_HAS_INIT_REF (t))\n \t{\n@@ -4469,7 +4467,7 @@ warn_about_ambiguous_bases (tree t)\n \tbasetype = BINFO_TYPE (binfo);\n \n \tif (!lookup_base (t, basetype, ba_unique | ba_quiet, NULL))\n-\t  warning (0, \"virtual base %qT inaccessible in %qT due to ambiguity\",\n+\t  warning (OPT_Wextra, \"virtual base %qT inaccessible in %qT due to ambiguity\",\n \t\t   basetype, t);\n       }\n }"}, {"sha": "38838e734e696d8fcc5b816e86396b02358ae775", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b323323f9b6324e9384b524e45ae0f4e406f9dc7/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b323323f9b6324e9384b524e45ae0f4e406f9dc7/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=b323323f9b6324e9384b524e45ae0f4e406f9dc7", "patch": "@@ -361,7 +361,7 @@ gimplify_expr_stmt (tree *stmt_p)\n \t  if (!IS_EMPTY_STMT (stmt)\n \t      && !VOID_TYPE_P (TREE_TYPE (stmt))\n \t      && !TREE_NO_WARNING (stmt))\n-\t    warning (0, \"statement with no effect\");\n+\t    warning (OPT_Wextra, \"statement with no effect\");\n \t}\n       else if (warn_unused_value)\n \twarn_if_unused_value (stmt, input_location);"}, {"sha": "ef121d2c3e901d3b6ab04a1ce5b344dddfe33cbd", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b323323f9b6324e9384b524e45ae0f4e406f9dc7/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b323323f9b6324e9384b524e45ae0f4e406f9dc7/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=b323323f9b6324e9384b524e45ae0f4e406f9dc7", "patch": "@@ -918,7 +918,7 @@ convert_to_void (tree expr, const char *implicit)\n \t  /* The middle end does not warn about expressions that have\n \t     been explicitly cast to void, so we must do so here.  */\n \t  if (!TREE_SIDE_EFFECTS (expr))\n-\t    warning (0, \"%s has no effect\", implicit);\n+\t    warning (OPT_Wunused_value, \"%s has no effect\", implicit);\n \t  else\n \t    {\n \t      tree e;\n@@ -950,7 +950,7 @@ convert_to_void (tree expr, const char *implicit)\n \t\t\t    || code == PREINCREMENT_EXPR\n \t\t\t    || code == POSTDECREMENT_EXPR\n \t\t\t    || code == POSTINCREMENT_EXPR)))\n-\t\twarning (0, \"value computed is not used\");\n+\t\twarning (OPT_Wunused_value, \"value computed is not used\");\n \t    }\n \t}\n       expr = build1 (CONVERT_EXPR, void_type_node, expr);"}, {"sha": "6e2abf8f3dd68f7b149f496b9fbb4a150b749339", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b323323f9b6324e9384b524e45ae0f4e406f9dc7/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b323323f9b6324e9384b524e45ae0f4e406f9dc7/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b323323f9b6324e9384b524e45ae0f4e406f9dc7", "patch": "@@ -361,8 +361,8 @@ pop_label (tree label, tree old_value)\n \t  /* Avoid crashing later.  */\n \t  define_label (location, DECL_NAME (label));\n \t}\n-      else if (warn_unused_label && !TREE_USED (label))\n-\twarning (0, \"label %q+D defined but not used\", label);\n+      else if (!TREE_USED (label))\n+\twarning (OPT_Wunused_label, \"label %q+D defined but not used\", label);\n     }\n \n   SET_IDENTIFIER_LABEL_VALUE (DECL_NAME (label), old_value);\n@@ -556,7 +556,7 @@ poplevel (int keep, int reverse, int functionbody)\n \t  && ! TREE_USED (decl)\n \t  && ! DECL_IN_SYSTEM_HEADER (decl)\n \t  && DECL_NAME (decl) && ! DECL_ARTIFICIAL (decl))\n-\twarning (0, \"unused variable %q+D\", decl);\n+\twarning (OPT_Wunused_variable, \"unused variable %q+D\", decl);\n \n   /* Remove declarations for all the DECLs in this level.  */\n   for (link = decls; link; link = TREE_CHAIN (link))\n@@ -1119,10 +1119,9 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t     bad choice of name.  */\n \t  if (! TREE_PUBLIC (newdecl))\n \t    {\n-\t      if (warn_shadow)\n-\t\twarning (0, \"shadowing %s function %q#D\",\n-\t\t\t DECL_BUILT_IN (olddecl) ? \"built-in\" : \"library\",\n-\t\t\t olddecl);\n+\t      warning (OPT_Wshadow, \"shadowing %s function %q#D\",\n+\t\t       DECL_BUILT_IN (olddecl) ? \"built-in\" : \"library\",\n+\t\t       olddecl);\n \t      /* Discard the old built-in function.  */\n \t      return NULL_TREE;\n \t    }\n@@ -1192,8 +1191,8 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t\t  warning (0, \"ambiguates built-in declaration %q#D\",\n \t\t\t   olddecl);\n \t\t}\n-\t      else if (warn_shadow)\n-\t\twarning (0, \"shadowing %s function %q#D\",\n+\t      else\n+\t\twarning (OPT_Wshadow, \"shadowing %s function %q#D\",\n \t\t\t DECL_BUILT_IN (olddecl) ? \"built-in\" : \"library\",\n \t\t\t olddecl);\n \t    }\n@@ -1504,8 +1503,8 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t  /* Don't warn about friends, let add_friend take care of it.  */\n \t  && ! (newdecl_is_friend || DECL_FRIEND_P (olddecl)))\n \t{\n-\t  warning (0, \"redundant redeclaration of %qD in same scope\", newdecl);\n-\t  warning (0, \"previous declaration of %q+D\", olddecl);\n+\t  warning (OPT_Wredundant_decls, \"redundant redeclaration of %qD in same scope\", newdecl);\n+\t  warning (OPT_Wredundant_decls, \"previous declaration of %q+D\", olddecl);\n \t}\n     }\n \n@@ -9012,7 +9011,7 @@ grok_op_properties (tree decl, bool complain)\n \t    }\n \n \t  if (what)\n-\t    warning (0, \"conversion to %s%s will never use a type \"\n+\t    warning (OPT_Wconversion, \"conversion to %s%s will never use a type \"\n \t\t     \"conversion operator\",\n \t\t     ref ? \"a reference to \" : \"\", what);\n \t}\n@@ -9103,13 +9102,13 @@ grok_op_properties (tree decl, bool complain)\n \t\t  if (TREE_CODE (ret) != REFERENCE_TYPE\n \t\t      || !same_type_p (TYPE_MAIN_VARIANT (TREE_TYPE (ret)),\n \t\t\t\t       arg))\n-\t\t    warning (0, \"prefix %qD should return %qT\", decl,\n+\t\t    warning (OPT_Weffc__, \"prefix %qD should return %qT\", decl,\n \t\t\t     build_reference_type (arg));\n \t\t}\n \t      else\n \t\t{\n \t\t  if (!same_type_p (TYPE_MAIN_VARIANT (ret), arg))\n-\t\t    warning (0, \"postfix %qD should return %qT\", decl, arg);\n+\t\t    warning (OPT_Weffc__, \"postfix %qD should return %qT\", decl, arg);\n \t\t}\n \t    }\n \t}\n@@ -9138,7 +9137,7 @@ grok_op_properties (tree decl, bool complain)\n \t      && (operator_code == TRUTH_ANDIF_EXPR\n \t\t  || operator_code == TRUTH_ORIF_EXPR\n \t\t  || operator_code == COMPOUND_EXPR))\n-\t    warning (0, \"user-defined %qD always evaluates both arguments\",\n+\t    warning (OPT_Weffc__, \"user-defined %qD always evaluates both arguments\",\n \t\t     decl);\n \t}\n \n@@ -9152,7 +9151,7 @@ grok_op_properties (tree decl, bool complain)\n \t      || operator_code == MULT_EXPR\n \t      || operator_code == TRUNC_MOD_EXPR)\n \t  && TREE_CODE (TREE_TYPE (TREE_TYPE (decl))) == REFERENCE_TYPE)\n-\twarning (0, \"%qD should return by value\", decl);\n+\twarning (OPT_Weffc__, \"%qD should return by value\", decl);\n \n       /* [over.oper]/8 */\n       for (; argtypes && argtypes != void_list_node;\n@@ -10183,7 +10182,7 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n   if (warn_ecpp\n       && DECL_OVERLOADED_OPERATOR_P (decl1) == NOP_EXPR\n       && TREE_CODE (TREE_TYPE (fntype)) == VOID_TYPE)\n-    warning (0, \"%<operator=%> should return a reference to %<*this%>\");\n+    warning (OPT_Weffc__, \"%<operator=%> should return a reference to %<*this%>\");\n \n   /* Make the init_value nonzero so pushdecl knows this is not tentative.\n      error_mark_node is replaced below (in poplevel) with the BLOCK.  */\n@@ -10940,7 +10939,7 @@ finish_function (int flags)\n       /* Structor return values (if any) are set by the compiler.  */\n       && !DECL_CONSTRUCTOR_P (fndecl)\n       && !DECL_DESTRUCTOR_P (fndecl))\n-    warning (0, \"no return statement in function returning non-void\");\n+    warning (OPT_Wreturn_type, \"no return statement in function returning non-void\");\n \n   /* Store the end of the function, so that we get good line number\n      info for the epilogue.  */"}, {"sha": "0ef0c1ada73fe27b2f6bf4860c4f7e80b21835e8", "filename": "gcc/cp/init.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b323323f9b6324e9384b524e45ae0f4e406f9dc7/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b323323f9b6324e9384b524e45ae0f4e406f9dc7/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=b323323f9b6324e9384b524e45ae0f4e406f9dc7", "patch": "@@ -324,7 +324,7 @@ perform_member_init (tree member, tree init)\n   /* Effective C++ rule 12 requires that all data members be\n      initialized.  */\n   if (warn_ecpp && !explicit && TREE_CODE (type) != ARRAY_TYPE)\n-    warning (0, \"%J%qD should be initialized in the member initialization \"\n+    warning (OPT_Weffc__, \"%J%qD should be initialized in the member initialization \"\n \t     \"list\", current_function_decl, member);\n \n   if (init == void_type_node)\n@@ -524,16 +524,16 @@ sort_mem_initializers (tree t, tree mem_inits)\n       if (warn_reorder && !subobject_init)\n \t{\n \t  if (TREE_CODE (TREE_PURPOSE (next_subobject)) == FIELD_DECL)\n-\t    warning (0, \"%q+D will be initialized after\",\n+\t    warning (OPT_Wreorder, \"%q+D will be initialized after\",\n \t\t     TREE_PURPOSE (next_subobject));\n \t  else\n-\t    warning (0, \"base %qT will be initialized after\",\n+\t    warning (OPT_Wreorder, \"base %qT will be initialized after\",\n \t\t     TREE_PURPOSE (next_subobject));\n \t  if (TREE_CODE (subobject) == FIELD_DECL)\n-\t    warning (0, \"  %q+#D\", subobject);\n+\t    warning (OPT_Wreorder, \"  %q+#D\", subobject);\n \t  else\n-\t    warning (0, \"  base %qT\", subobject);\n-\t  warning (0, \"%J  when initialized here\", current_function_decl);\n+\t    warning (OPT_Wreorder, \"  base %qT\", subobject);\n+\t  warning (OPT_Wreorder, \"%J  when initialized here\", current_function_decl);\n \t}\n \n       /* Look again, from the beginning of the list.  */\n@@ -681,7 +681,7 @@ emit_mem_initializers (tree mem_inits)\n       if (extra_warnings && !arguments\n \t  && DECL_COPY_CONSTRUCTOR_P (current_function_decl)\n \t  && TYPE_NEEDS_CONSTRUCTING (BINFO_TYPE (subobject)))\n-\twarning (0, \"%Jbase class %q#T should be explicitly initialized in the \"\n+\twarning (OPT_Wextra, \"%Jbase class %q#T should be explicitly initialized in the \"\n \t\t \"copy constructor\",\n \t\t current_function_decl, BINFO_TYPE (subobject));\n "}, {"sha": "8e6ffcf4e0b8fb069545ef49f9b50767552a44a3", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b323323f9b6324e9384b524e45ae0f4e406f9dc7/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b323323f9b6324e9384b524e45ae0f4e406f9dc7/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=b323323f9b6324e9384b524e45ae0f4e406f9dc7", "patch": "@@ -2526,7 +2526,7 @@ static inline const char *\n finish_mangling (const bool warn)\n {\n   if (warn_abi && warn && G.need_abi_warning)\n-    warning (0, \"the mangled name of %qD will change in a future \"\n+    warning (OPT_Wabi, \"the mangled name of %qD will change in a future \"\n \t     \"version of GCC\",\n \t     G.entity);\n "}, {"sha": "d2bee99dc5e182c3ada1a3ee8d4433d65ea6d878", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b323323f9b6324e9384b524e45ae0f4e406f9dc7/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b323323f9b6324e9384b524e45ae0f4e406f9dc7/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=b323323f9b6324e9384b524e45ae0f4e406f9dc7", "patch": "@@ -1135,7 +1135,7 @@ lazily_declare_fn (special_function_kind sfk, tree type)\n \t TYPE_METHODS list, which cause the destructor to be emitted\n \t in an incorrect location in the vtable.  */\n       if (warn_abi && DECL_VIRTUAL_P (fn))\n-\twarning (0, \"vtable layout for class %qT may not be ABI-compliant\"\n+\twarning (OPT_Wabi, \"vtable layout for class %qT may not be ABI-compliant\"\n \t\t \"and may change in a future version of GCC due to \"\n \t\t \"implicit virtual destructor\",\n \t\t type);"}, {"sha": "b464e328b473fb6b80a003e14087f1277858e875", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b323323f9b6324e9384b524e45ae0f4e406f9dc7/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b323323f9b6324e9384b524e45ae0f4e406f9dc7/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=b323323f9b6324e9384b524e45ae0f4e406f9dc7", "patch": "@@ -950,8 +950,8 @@ pushdecl_maybe_friend (tree x, bool is_friend)\n \n \t      if (warn_shadow && !err)\n \t\t{\n-\t\t  warning (0, \"declaration of %q#D shadows a parameter\", x);\n-\t\t  warning (0, \"%Jshadowed declaration is here\", oldlocal);\n+\t\t  warning (OPT_Wshadow, \"declaration of %q#D shadows a parameter\", x);\n+\t\t  warning (OPT_Wshadow, \"%Jshadowed declaration is here\", oldlocal);\n \t\t}\n \t    }\n \n@@ -975,22 +975,22 @@ pushdecl_maybe_friend (tree x, bool is_friend)\n \t      if (member && !TREE_STATIC (member))\n \t\t{\n \t\t  /* Location of previous decl is not useful in this case.  */\n-\t\t  warning (0, \"declaration of %qD shadows a member of 'this'\",\n+\t\t  warning (OPT_Wshadow, \"declaration of %qD shadows a member of 'this'\",\n \t\t\t   x);\n \t\t}\n \t      else if (oldlocal != NULL_TREE\n \t\t       && TREE_CODE (oldlocal) == VAR_DECL)\n \t\t{\n-\t\t  warning (0, \"declaration of %qD shadows a previous local\", x);\n-\t\t  warning (0, \"%Jshadowed declaration is here\", oldlocal);\n+\t\t  warning (OPT_Wshadow, \"declaration of %qD shadows a previous local\", x);\n+\t\t  warning (OPT_Wshadow, \"%Jshadowed declaration is here\", oldlocal);\n \t\t}\n \t      else if (oldglobal != NULL_TREE\n \t\t       && TREE_CODE (oldglobal) == VAR_DECL)\n \t\t/* XXX shadow warnings in outer-more namespaces */\n \t\t{\n-\t\t  warning (0, \"declaration of %qD shadows a global declaration\",\n+\t\t  warning (OPT_Wshadow, \"declaration of %qD shadows a global declaration\",\n \t\t\t   x);\n-\t\t  warning (0, \"%Jshadowed declaration is here\", oldglobal);\n+\t\t  warning (OPT_Wshadow, \"%Jshadowed declaration is here\", oldglobal);\n \t\t}\n \t    }\n \t}"}, {"sha": "bba4d25616d39a42504591c2a16ff85b47c37f68", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b323323f9b6324e9384b524e45ae0f4e406f9dc7/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b323323f9b6324e9384b524e45ae0f4e406f9dc7/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=b323323f9b6324e9384b524e45ae0f4e406f9dc7", "patch": "@@ -1850,7 +1850,7 @@ static inline void\n cp_parser_warn_min_max (void)\n {\n   if (warn_deprecated && !in_system_header)\n-    warning (0, \"minimum/maximum operators are deprecated\");\n+    warning (OPT_Wdeprecated, \"minimum/maximum operators are deprecated\");\n }\n \n /* If not parsing tentatively, issue a diagnostic of the form\n@@ -5416,7 +5416,7 @@ cp_parser_cast_expression (cp_parser *parser, bool address_p, bool cast_p)\n \t      && !in_system_header\n \t      && !VOID_TYPE_P (type)\n \t      && current_lang_name != lang_name_c)\n-\t    warning (0, \"use of old-style cast\");\n+\t    warning (OPT_Wold_style_cast, \"use of old-style cast\");\n \n \t  /* Only type conversions to integral or enumeration types\n \t     can be used in constant-expressions.  */"}, {"sha": "95247c490afe573bb08337b02abed0fdb6b16001", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b323323f9b6324e9384b524e45ae0f4e406f9dc7/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b323323f9b6324e9384b524e45ae0f4e406f9dc7/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=b323323f9b6324e9384b524e45ae0f4e406f9dc7", "patch": "@@ -1499,8 +1499,8 @@ string_conv_p (tree totype, tree exp, int warn)\n     }\n \n   /* This warning is not very useful, as it complains about printf.  */\n-  if (warn && warn_write_strings)\n-    warning (0, \"deprecated conversion from string constant to %qT'\", totype);\n+  if (warn)\n+    warning (OPT_Wwrite_strings, \"deprecated conversion from string constant to %qT'\", totype);\n \n   return 1;\n }\n@@ -2306,7 +2306,7 @@ build_array_ref (tree array, tree idx)\n \t  while (TREE_CODE (foo) == COMPONENT_REF)\n \t    foo = TREE_OPERAND (foo, 0);\n \t  if (TREE_CODE (foo) == VAR_DECL && DECL_REGISTER (foo))\n-\t    warning (0, \"subscripting array declared %<register%>\");\n+\t    warning (OPT_Wextra, \"subscripting array declared %<register%>\");\n \t}\n \n       type = TREE_TYPE (TREE_TYPE (array));\n@@ -4438,9 +4438,9 @@ cxx_mark_addressable (tree exp)\n \t\t  (\"address of explicit register variable %qD requested\", x);\n \t\treturn false;\n \t      }\n-\t    else if (extra_warnings)\n+\t    else\n \t      warning\n-\t\t(0, \"address requested for %qD, which is declared %<register%>\", x);\n+\t\t(OPT_Wextra, \"address requested for %qD, which is declared %<register%>\", x);\n \t  }\n \tTREE_ADDRESSABLE (x) = 1;\n \treturn true;\n@@ -6378,7 +6378,7 @@ check_return_expr (tree retval, bool *no_warning)\n \t}\n \n       if (warn)\n-\twarning (0, \"%<operator=%> should return a reference to %<*this%>\");\n+\twarning (OPT_Weffc__, \"%<operator=%> should return a reference to %<*this%>\");\n     }\n \n   /* The fabled Named Return Value optimization, as per [class.copy]/15:"}]}