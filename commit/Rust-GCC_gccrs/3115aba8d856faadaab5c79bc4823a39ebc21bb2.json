{"sha": "3115aba8d856faadaab5c79bc4823a39ebc21bb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzExNWFiYThkODU2ZmFhZGFhYjVjNzliYzQ4MjNhMzllYmMyMWJiMg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-04-10T00:16:23Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-04-10T00:16:23Z"}, "message": "Daily bump.", "tree": {"sha": "3f86f2dd3cc13d78da9fe892cae39c472e461fcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f86f2dd3cc13d78da9fe892cae39c472e461fcb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3115aba8d856faadaab5c79bc4823a39ebc21bb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3115aba8d856faadaab5c79bc4823a39ebc21bb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3115aba8d856faadaab5c79bc4823a39ebc21bb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3115aba8d856faadaab5c79bc4823a39ebc21bb2/comments", "author": null, "committer": null, "parents": [{"sha": "b2576d75ed8900f77849ceacf7fe5f0f3abe734d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2576d75ed8900f77849ceacf7fe5f0f3abe734d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2576d75ed8900f77849ceacf7fe5f0f3abe734d"}], "stats": {"total": 196, "additions": 195, "deletions": 1}, "files": [{"sha": "ea522e4aebe72e3e582e75db7d650dc4ed3843f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3115aba8d856faadaab5c79bc4823a39ebc21bb2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3115aba8d856faadaab5c79bc4823a39ebc21bb2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3115aba8d856faadaab5c79bc4823a39ebc21bb2", "patch": "@@ -1,3 +1,23 @@\n+2021-04-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_option_restore): If the\n+\tarchitecture was specified explicitly and the tuning wasn't,\n+\ttune for the architecture rather than the configured default CPU.\n+\n+2021-04-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.md (tlsdesc_small_sve_<mode>): Use X30\n+\tas the temporary register.\n+\n+2021-04-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/extend.texi: Move non-target attributes on the top level.\n+\n+2021-04-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/invoke.texi: Document minimum and maximum value of the\n+\targument for both supported compression algorithms.\n+\n 2021-04-08  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* config/rs6000/rs6000.c (rs6000_xcoff_select_section): Select"}, {"sha": "8d175511292aa403e789e32640b96568b3692a06", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3115aba8d856faadaab5c79bc4823a39ebc21bb2/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3115aba8d856faadaab5c79bc4823a39ebc21bb2/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=3115aba8d856faadaab5c79bc4823a39ebc21bb2", "patch": "@@ -1 +1 @@\n-20210409\n+20210410"}, {"sha": "5d35496707981d504913285bfac0aacce07468e5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3115aba8d856faadaab5c79bc4823a39ebc21bb2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3115aba8d856faadaab5c79bc4823a39ebc21bb2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3115aba8d856faadaab5c79bc4823a39ebc21bb2", "patch": "@@ -1,3 +1,25 @@\n+2021-04-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* cp-tree.h (LAMBDA_EXPR_REGENERATED_FROM)\n+\t(LAMBDA_EXPR_REGENERATING_TARGS): Replace these with ...\n+\t(LAMBDA_EXPR_REGEN_INFO): ... this.\n+\t(tree_lambda_expr::regenerated_from)\n+\t(tree_lambda_expr::regenerating_targs): Replace these with ...\n+\t(tree_lambda_expr::regen_info): ... this.\n+\t* constraint.cc (satisfy_declaration_constraints): Adjust\n+\taccordingly.\n+\t* lambda.c (build_lambda_expr): Likewise.\n+\t* pt.c (regenerated_lambda_fn_p): Likewise.\n+\t(most_general_lambda): Likewise.\n+\t(tsubst_lambda_expr): Likewise.\n+\n+2021-04-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/99806\n+\t* parser.c (cp_parser_member_declaration): Call\n+\tcp_parser_save_default_args even for function templates.  Use\n+\tSTRIP_TEMPLATE on the declaration we're passing.\n+\n 2021-04-08  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/99874"}, {"sha": "8fc11598b199f33f90e535f624c3d4453bdf8601", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3115aba8d856faadaab5c79bc4823a39ebc21bb2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3115aba8d856faadaab5c79bc4823a39ebc21bb2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3115aba8d856faadaab5c79bc4823a39ebc21bb2", "patch": "@@ -1,3 +1,9 @@\n+2021-04-09  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/99817\n+\t* trans-types.c (gfc_get_function_type): Also generate hidden\n+\tcoarray argument for character arguments.\n+\n 2021-04-03  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/99818"}, {"sha": "8b339a8c062c98bee15af26e8e3d5668a7e3d07d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3115aba8d856faadaab5c79bc4823a39ebc21bb2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3115aba8d856faadaab5c79bc4823a39ebc21bb2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3115aba8d856faadaab5c79bc4823a39ebc21bb2", "patch": "@@ -1,3 +1,67 @@\n+2021-04-09  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/55288\n+\t* g++.dg/warn/uninit-pr55288.C: New test.\n+\n+2021-04-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/90215\n+\t* g++.dg/cpp1z/fold-lambda4.C: New test.\n+\n+2021-04-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/99806\n+\t* g++.dg/concepts/abbrev10.C: New test.\n+\t* g++.dg/concepts/abbrev11.C: New test.\n+\n+2021-04-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/pr70398.c: Require a target that can link\n+\tstatic executables.\n+\n+2021-04-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* g++.target/aarch64/bfloat_cpp_typecheck.C: Remove XFAILs.\n+\n+2021-04-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gfortran.dg/vect/vect-8.f90: Expect 24 loops to be vectorized\n+\twith SVE.\n+\n+2021-04-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* g++.dg/tree-ssa/pr83518.C: XFAIL for vect_variable_length.\n+\t* gcc.dg/pr96573.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr84512.c: Likewise.\n+\t* gcc.dg/vect/bb-slp-43.c: Likewise.\n+\t* gcc.dg/vect/slp-reduc-11.c: Likewise.\n+\n+2021-04-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/pr65947-7.c: Add a noipa attribute.  Expect the\n+\tloop to vectorized if vect_fold_extract_last.\n+\n+2021-04-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/mem-shift-canonical.c: Use an asm instead\n+\tof relying on vectorisation.\n+\n+2021-04-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/87763\n+\t* gcc.target/aarch64/insv_1.c: XFAIL two scan tests.\n+\n+2021-04-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR libfortran/78314\n+\t* gfortran.dg/ieee/ieee_6.f90: Skip for arm* and aarch64*.\n+\t* gfortran.dg/ieee/ieee_8.f90: Likewise.\n+\n+2021-04-09  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/99817\n+\t* gfortran.dg/coarray/dummy_2.f90: New test.\n+\n 2021-04-08  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* g++.dg/gomp/tls-5.C: Expect tbss failure on AIX."}, {"sha": "05fb2b0c156a5d608722ea6586960761479755f4", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3115aba8d856faadaab5c79bc4823a39ebc21bb2/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3115aba8d856faadaab5c79bc4823a39ebc21bb2/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=3115aba8d856faadaab5c79bc4823a39ebc21bb2", "patch": "@@ -1,3 +1,17 @@\n+2021-04-09  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/84991\n+\tPR middle-end/84992\n+\tPR middle-end/90779\n+\t* testsuite/libgomp.oacc-c-c++-common/static-variable-1.c: New.\n+\n+2021-04-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libgomp/99984\n+\t* team.c (gomp_thread_start): Call pthread_setspecific for\n+\t!(defined HAVE_TLS || defined USE_EMUTLS) only after local_thr\n+\thas been initialized to avoid false positive warning.\n+\n 2021-03-29  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR target/99555"}, {"sha": "7b19ca525ed495603eb74fd145a4efe89d64edab", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3115aba8d856faadaab5c79bc4823a39ebc21bb2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3115aba8d856faadaab5c79bc4823a39ebc21bb2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3115aba8d856faadaab5c79bc4823a39ebc21bb2", "patch": "@@ -1,3 +1,49 @@\n+2021-04-09  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\tPR libstdc++/99402\n+\t* include/debug/helper_functions.h (__can_advance(_InputIterator,\n+\tconst std::pair<_Diff, _Distance_precision>&, int)): New.\n+\t(__can_advance(const _Safe_iterator<>&,\n+\tconst std::pair<_Diff, _Distance_precision>&, int)): New.\n+\t* include/debug/macros.h (__glibcxx_check_can_increment_dist): New,\n+\tuse latter.\n+\t(__glibcxx_check_can_increment_range): Adapt to use latter.\n+\t(__glibcxx_check_can_decrement_range): Likewise.\n+\t* include/debug/safe_iterator.h\n+\t(_Safe_iterator<>::_M_can_advance(const std::pair<_Diff, _Distance_precision>&,\n+\tint)): New.\n+\t(__can_advance(const _Safe_iterator<>&,\n+\tconst std::pair<_Diff, _Distance_precision>&, int)): New.\n+\t* include/debug/safe_iterator.tcc\n+\t(_Safe_iterator<>::_M_can_advance(const std::pair<_Diff, _Distance_precision>&,\n+\tint)): New.\n+\t(_Safe_iterator<>::_M_valid_range(const _Safe_iterator<>&,\n+\tstd::pair<difference_type, _Distance_precision>&, bool)): Adapt for\n+\t__dp_sign_max_size.\n+\t(__copy_move_a): Adapt to use __glibcxx_check_can_increment_dist.\n+\t(__copy_move_backward_a): Likewise.\n+\t(__equal_aux): Likewise.\n+\t* include/debug/stl_iterator.h (__can_advance(const std::reverse_iterator<>&,\n+\tconst std::pair<_Diff, _Distance_precision>&, int)): New.\n+\t(__can_advance(const std::move_iterator<>&,\n+\tconst std::pair<_Diff, _Distance_precision>&, int)): New.\n+\t* testsuite/25_algorithms/copy/debug/99402.cc: New test.\n+\n+2021-04-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/99985\n+\t* include/bits/hashtable.h (_Hashtable::_S_nothrow_move()): Fix\n+\tto be a valid constexpr function in C++11.\n+\t* testsuite/23_containers/unordered_set/cons/99985.cc: New test.\n+\n+2021-04-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/fs_fwd.h: Fix doxygen group command.\n+\t* include/bits/streambuf_iterator.h: Likewise.\n+\t* include/bits/uses_allocator_args.h: Likewise.\n+\t* include/std/memory: Likewise.\n+\t* include/tr1/complex: Likewise.\n+\n 2021-04-08  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/basic_string.h: Tweak doxygen comment."}, {"sha": "bbee2aea85703cba7529ba65cb503427cc2cc79d", "filename": "maintainer-scripts/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3115aba8d856faadaab5c79bc4823a39ebc21bb2/maintainer-scripts%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3115aba8d856faadaab5c79bc4823a39ebc21bb2/maintainer-scripts%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/maintainer-scripts%2FChangeLog?ref=3115aba8d856faadaab5c79bc4823a39ebc21bb2", "patch": "@@ -1,3 +1,25 @@\n+2021-04-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* branch_changer.py: Generate URL only when emitting\n+\tto terminal.\n+\n+2021-04-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* branch_changer.py: Mention closing candidates and emit\n+\tconsole links to bugzilla.\n+\n+2021-04-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* branch_changer.py: Document more how the script behaves.\n+\n+2021-04-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* branch_changer.py: Fix usage of Version class.\n+\n+2021-04-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* branch_changer.py: Use new version scheme in --help output.\n+\n 2021-04-08  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* generate_libstdcxx_web_docs: Add --disable-multilib to"}]}