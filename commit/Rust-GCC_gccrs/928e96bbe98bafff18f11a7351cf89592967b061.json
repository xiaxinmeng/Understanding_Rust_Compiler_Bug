{"sha": "928e96bbe98bafff18f11a7351cf89592967b061", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI4ZTk2YmJlOThiYWZmZjE4ZjExYTczNTFjZjg5NTkyOTY3YjA2MQ==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-01-11T09:53:18Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-01-11T11:21:03Z"}, "message": "d: Remove visibility and lookup deprecation\n\nThe deprecation phase for access checks is finished.\n\nThe `-ftransition=import` and `-ftransition=checkimports` switches no\nlonger have an effect and are now removed.  Symbols that are not visible\nin a particular scope will no longer be found by the compiler.\n\nReviewed-on: https://github.com/dlang/dmd/pull/12124\n\ngcc/d/ChangeLog:\n\n\t* dmd/MERGE: Merge upstream dmd 2d3d13748.\n\t* d-lang.cc (d_handle_option): Remove OPT_ftransition_checkimports and\n\tOPT_ftransition_import.\n\t* gdc.texi (Warnings): Remove documentation for -ftransition=import\n\tand -ftransition=checkimports.\n\t* lang.opt (ftransition=checkimports): Remove.\n\t(ftransition=import): Remove.", "tree": {"sha": "d6a7b3082fec5da6bb9465ab4050a3470d18ab60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6a7b3082fec5da6bb9465ab4050a3470d18ab60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/928e96bbe98bafff18f11a7351cf89592967b061", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/928e96bbe98bafff18f11a7351cf89592967b061", "html_url": "https://github.com/Rust-GCC/gccrs/commit/928e96bbe98bafff18f11a7351cf89592967b061", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/928e96bbe98bafff18f11a7351cf89592967b061/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "300a3ce5c5695eb1a7c0476e9d1b45420a463248", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/300a3ce5c5695eb1a7c0476e9d1b45420a463248", "html_url": "https://github.com/Rust-GCC/gccrs/commit/300a3ce5c5695eb1a7c0476e9d1b45420a463248"}], "stats": {"total": 789, "additions": 246, "deletions": 543}, "files": [{"sha": "72dcb71698778cc34943b1f89dfbffba98214520", "filename": "gcc/d/d-lang.cc", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Fd%2Fd-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Fd%2Fd-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-lang.cc?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -551,10 +551,6 @@ d_handle_option (size_t scode, const char *arg, HOST_WIDE_INT value,\n       global.params.vcomplex = value;\n       break;\n \n-    case OPT_ftransition_checkimports:\n-      global.params.check10378 = value;\n-      break;\n-\n     case OPT_ftransition_complex:\n       global.params.vcomplex = value;\n       break;\n@@ -572,10 +568,6 @@ d_handle_option (size_t scode, const char *arg, HOST_WIDE_INT value,\n       global.params.vfield = value;\n       break;\n \n-    case OPT_ftransition_import:\n-      global.params.bug10378 = value;\n-      break;\n-\n     case OPT_ftransition_nogc:\n       global.params.vgc = value;\n       break;"}, {"sha": "4f7f7a8ff3b8ec384362c8cae25ae24acdc2e546", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -1,4 +1,4 @@\n-cb1106ad5bea4293cd302b0ba1f3ce08905d40fe\n+2d3d137489f030395d06cb664087fd1a35bccabe\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "63f46c60f63273f9c36fd7421528e4453c9c6956", "filename": "gcc/d/dmd/access.c", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Fd%2Fdmd%2Faccess.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Fd%2Fdmd%2Faccess.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Faccess.c?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -342,16 +342,9 @@ bool checkAccess(Loc loc, Scope *sc, Expression *e, Declaration *d)\n         return false;\n     }\n     if (!e)\n-    {\n-        if ((d->prot().kind == Prot::private_ && d->getAccessModule() != sc->_module) ||\n-            (d->prot().kind == Prot::package_ && !hasPackageAccess(sc, d)))\n-        {\n-            error(loc, \"%s %s is not accessible from module %s\",\n-                d->kind(), d->toPrettyChars(), sc->_module->toChars());\n-            return true;\n-        }\n-    }\n-    else if (e->type->ty == Tclass)\n+        return false;\n+\n+    if (e->type->ty == Tclass)\n     {\n         // Do access check\n         ClassDeclaration *cd = (ClassDeclaration *)(((TypeClass *)e->type)->sym);\n@@ -386,7 +379,7 @@ bool checkAccess(Loc loc, Scope *sc, Expression *e, Declaration *d)\n  * (see Bugzilla 313).\n  *\n  */\n-bool checkAccess(Loc loc, Scope *sc, Package *p)\n+bool checkAccess(Scope *sc, Package *p)\n {\n     if (sc->_module == p)\n         return false;\n@@ -395,11 +388,7 @@ bool checkAccess(Loc loc, Scope *sc, Package *p)\n         if (sc->scopesym && sc->scopesym->isPackageAccessible(p, Prot(Prot::private_)))\n             return false;\n     }\n-    const char *name = p->toPrettyChars();\n-    if (p->isPkgMod == PKGmodule || p->isModule())\n-        deprecation(loc, \"%s %s is not accessible here, perhaps add 'static import %s;'\", p->kind(), name, name);\n-    else\n-        deprecation(loc, \"%s %s is not accessible here\", p->kind(), name);\n+\n     return true;\n }\n "}, {"sha": "72dc0893af59b1e8e14cd1efcd526979e809db16", "filename": "gcc/d/dmd/dscope.c", "status": "modified", "additions": 5, "deletions": 70, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Fd%2Fdmd%2Fdscope.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Fd%2Fdmd%2Fdscope.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdscope.c?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -453,47 +453,12 @@ Dsymbol *Scope::search(Loc loc, Identifier *ident, Dsymbol **pscopesym, int flag\n     if (this->flags & SCOPEignoresymbolvisibility)\n         flags |= IgnoreSymbolVisibility;\n \n-    Dsymbol *sold = NULL;\n-    if (global.params.bug10378 || global.params.check10378)\n-    {\n-        sold = searchScopes(this, loc, ident, pscopesym, flags | IgnoreSymbolVisibility);\n-        if (!global.params.check10378)\n-            return sold;\n-\n-        if (ident == Id::dollar) // Bugzilla 15825\n-            return sold;\n-\n-        // Search both ways\n-    }\n-\n     // First look in local scopes\n     Dsymbol *s = searchScopes(this, loc, ident, pscopesym, flags | SearchLocalsOnly);\n     if (!s)\n     {\n         // Second look in imported modules\n         s = searchScopes(this, loc, ident, pscopesym, flags | SearchImportsOnly);\n-        /** Still find private symbols, so that symbols that weren't access\n-         * checked by the compiler remain usable.  Once the deprecation is over,\n-         * this should be moved to search_correct instead.\n-         */\n-        if (!s && !(flags & IgnoreSymbolVisibility))\n-        {\n-            s = searchScopes(this, loc, ident, pscopesym, flags | SearchLocalsOnly | IgnoreSymbolVisibility);\n-            if (!s)\n-                s = searchScopes(this, loc, ident, pscopesym, flags | SearchImportsOnly | IgnoreSymbolVisibility);\n-\n-            if (s && !(flags & IgnoreErrors))\n-                ::deprecation(loc, \"%s is not visible from module %s\", s->toPrettyChars(), _module->toChars());\n-        }\n-    }\n-\n-    if (global.params.check10378)\n-    {\n-        Dsymbol *snew = s;\n-        if (sold != snew)\n-            deprecation10378(loc, sold, snew);\n-        if (global.params.bug10378)\n-            s = sold;\n     }\n     return s;\n }\n@@ -607,7 +572,7 @@ structalign_t Scope::alignment()\n  * one with a close spelling.\n  */\n \n-void *scope_search_fp(void *arg, const char *seed, int* cost)\n+static void *scope_search_fp(void *arg, const char *seed, int* cost)\n {\n     //printf(\"scope_search_fp('%s')\\n\", seed);\n \n@@ -640,45 +605,15 @@ void *scope_search_fp(void *arg, const char *seed, int* cost)\n     return (void*)s;\n }\n \n-void Scope::deprecation10378(Loc loc, Dsymbol *sold, Dsymbol *snew)\n-{\n-    // Bugzilla 15857\n-    //\n-    // The overloadset found via the new lookup rules is either\n-    // equal or a subset of the overloadset found via the old\n-    // lookup rules, so it suffices to compare the dimension to\n-    // check for equality.\n-    OverloadSet *osold = NULL;\n-    OverloadSet *osnew = NULL;\n-    if (sold && (osold = sold->isOverloadSet()) != NULL &&\n-        snew && (osnew = snew->isOverloadSet()) != NULL &&\n-        osold->a.length == osnew->a.length)\n-        return;\n-\n-    OutBuffer buf;\n-    buf.writestring(\"local import search method found \");\n-    if (osold)\n-        buf.printf(\"%s %s (%d overloads)\", sold->kind(), sold->toPrettyChars(), (int)osold->a.length);\n-    else if (sold)\n-        buf.printf(\"%s %s\", sold->kind(), sold->toPrettyChars());\n-    else\n-        buf.writestring(\"nothing\");\n-    buf.writestring(\" instead of \");\n-    if (osnew)\n-        buf.printf(\"%s %s (%d overloads)\", snew->kind(), snew->toPrettyChars(), (int)osnew->a.length);\n-    else if (snew)\n-        buf.printf(\"%s %s\", snew->kind(), snew->toPrettyChars());\n-    else\n-        buf.writestring(\"nothing\");\n-\n-    deprecation(loc, \"%s\", buf.peekChars());\n-}\n-\n Dsymbol *Scope::search_correct(Identifier *ident)\n {\n     if (global.gag)\n         return NULL;            // don't do it for speculative compiles; too time consuming\n \n+    Dsymbol *scopesym = NULL;\n+    // search for exact name first\n+    if (Dsymbol *s = search(Loc(), ident, &scopesym, IgnoreErrors))\n+        return s;\n     return (Dsymbol *)speller(ident->toChars(), &scope_search_fp, this, idchars);\n }\n "}, {"sha": "293484cae601b9185a299df6b8acecb9bc31cb29", "filename": "gcc/d/dmd/dsymbol.c", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Fd%2Fdmd%2Fdsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Fd%2Fdmd%2Fdsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdsymbol.c?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -531,7 +531,9 @@ Dsymbol *Dsymbol::search_correct(Identifier *ident)\n {\n     if (global.gag)\n         return NULL;            // don't do it for speculative compiles; too time consuming\n-\n+    // search for exact name first\n+    if (Dsymbol *s = search(Loc(), ident, IgnoreErrors))\n+        return s;\n     return (Dsymbol *)speller(ident->toChars(), &symbol_search_fp, (void *)this, idchars);\n }\n \n@@ -1094,7 +1096,7 @@ Dsymbol *ScopeDsymbol::search(const Loc &loc, Identifier *ident, int flags)\n             if ((flags & IgnorePrivateImports) && prots[i] == Prot::private_)\n                 continue;\n \n-            int sflags = flags & (IgnoreErrors | IgnoreAmbiguous | IgnoreSymbolVisibility); // remember these in recursive searches\n+            int sflags = flags & (IgnoreErrors | IgnoreAmbiguous); // remember these in recursive searches\n             Dsymbol *ss = (*importedScopes)[i];\n \n             //printf(\"\\tscanning import '%s', prots = %d, isModule = %p, isImport = %p\\n\", ss->toChars(), prots[i], ss->isModule(), ss->isImport());\n@@ -1108,9 +1110,7 @@ Dsymbol *ScopeDsymbol::search(const Loc &loc, Identifier *ident, int flags)\n             {\n                 if (flags & SearchImportsOnly)\n                     continue;\n-                // compatibility with -transition=import (Bugzilla 15925)\n-                // SearchLocalsOnly should always get set for new lookup rules\n-                sflags |= (flags & SearchLocalsOnly);\n+                sflags |= SearchLocalsOnly;\n             }\n \n             /* Don't find private members if ss is a module\n@@ -1190,19 +1190,6 @@ Dsymbol *ScopeDsymbol::search(const Loc &loc, Identifier *ident, int flags)\n                     a = mergeOverloadSet(ident, a, s);\n                 s = a;\n             }\n-\n-            // TODO: remove once private symbol visibility has been deprecated\n-            if (!(flags & IgnoreErrors) && s->prot().kind == Prot::private_ &&\n-                !s->isOverloadable() && !s->parent->isTemplateMixin() && !s->parent->isNspace())\n-            {\n-                AliasDeclaration *ad;\n-                // accessing private selective and renamed imports is\n-                // deprecated by restricting the symbol visibility\n-                if (s->isImport() || ((ad = s->isAliasDeclaration()) != NULL && ad->_import != NULL))\n-                {}\n-                else\n-                    error(loc, \"%s %s is private\", s->kind(), s->toPrettyChars());\n-            }\n             //printf(\"\\tfound in imports %s.%s\\n\", toChars(), s.toChars());\n             return s;\n         }"}, {"sha": "3314d0c096c3222022b5533ec18c2bf02056eb98", "filename": "gcc/d/dmd/expression.c", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Fd%2Fdmd%2Fexpression.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Fd%2Fdmd%2Fexpression.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpression.c?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -677,7 +677,7 @@ static Dsymbol *searchScopes(Scope *sc, Loc loc, Identifier *ident, int flags)\n  * Find symbol in accordance with the UFCS name look up rule\n  */\n \n-Expression *searchUFCS(Scope *sc, UnaExp *ue, Identifier *ident)\n+static Expression *searchUFCS(Scope *sc, UnaExp *ue, Identifier *ident)\n {\n     //printf(\"searchUFCS(ident = %s)\\n\", ident->toChars());\n     Loc loc = ue->loc;\n@@ -687,46 +687,13 @@ Expression *searchUFCS(Scope *sc, UnaExp *ue, Identifier *ident)\n     if (sc->flags & SCOPEignoresymbolvisibility)\n         flags |= IgnoreSymbolVisibility;\n \n-    Dsymbol *sold = NULL;\n-    if (global.params.bug10378 || global.params.check10378)\n-    {\n-        sold = searchScopes(sc, loc, ident, flags | IgnoreSymbolVisibility);\n-        if (!global.params.check10378)\n-        {\n-            s = sold;\n-            goto Lsearchdone;\n-        }\n-    }\n-\n     // First look in local scopes\n     s = searchScopes(sc, loc, ident, flags | SearchLocalsOnly);\n     if (!s)\n     {\n         // Second look in imported modules\n         s = searchScopes(sc, loc, ident, flags | SearchImportsOnly);\n-\n-        /** Still find private symbols, so that symbols that weren't access\n-         * checked by the compiler remain usable.  Once the deprecation is over,\n-         * this should be moved to search_correct instead.\n-         */\n-        if (!s && !(flags & IgnoreSymbolVisibility))\n-        {\n-            s = searchScopes(sc, loc, ident, flags | SearchLocalsOnly | IgnoreSymbolVisibility);\n-            if (!s)\n-                s = searchScopes(sc, loc, ident, flags | SearchImportsOnly | IgnoreSymbolVisibility);\n-            if (s)\n-                ::deprecation(loc, \"%s is not visible from module %s\", s->toPrettyChars(), sc->_module->toChars());\n-        }\n-    }\n-    if (global.params.check10378)\n-    {\n-        Dsymbol *snew = s;\n-        if (sold != snew)\n-            Scope::deprecation10378(loc, sold, snew);\n-        if (global.params.bug10378)\n-            s = sold;\n     }\n-Lsearchdone:\n \n     if (!s)\n         return ue->e1->type->Type::getProperty(loc, ident, 0);"}, {"sha": "15a4d8770c65e894047763ebf51c24f1ef15a522", "filename": "gcc/d/dmd/expression.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Fd%2Fdmd%2Fexpression.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Fd%2Fdmd%2Fexpression.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpression.h?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -58,7 +58,7 @@ struct Symbol;          // back end symbol\n Expression *resolveProperties(Scope *sc, Expression *e);\n Expression *resolvePropertiesOnly(Scope *sc, Expression *e1);\n bool checkAccess(Loc loc, Scope *sc, Expression *e, Declaration *d);\n-bool checkAccess(Loc loc, Scope *sc, Package *p);\n+bool checkAccess(Scope *sc, Package *p);\n Expression *build_overload(Loc loc, Scope *sc, Expression *ethis, Expression *earg, Dsymbol *d);\n Dsymbol *search_function(ScopeDsymbol *ad, Identifier *funcid);\n void expandTuples(Expressions *exps);"}, {"sha": "a4ff0b41c430abdd3f9c726e016698d698342584", "filename": "gcc/d/dmd/expressionsem.c", "status": "modified", "additions": 33, "deletions": 14, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpressionsem.c?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -43,6 +43,7 @@ bool checkAccess(AggregateDeclaration *ad, Loc loc, Scope *sc, Dsymbol *smember)\n bool checkNestedRef(Dsymbol *s, Dsymbol *p);\n bool checkFrameAccess(Loc loc, Scope *sc, AggregateDeclaration *ad, size_t istart = 0);\n bool symbolIsVisible(Module *mod, Dsymbol *s);\n+bool symbolIsVisible(Scope *sc, Dsymbol *s);\n VarDeclaration *copyToTemp(StorageClass stc, const char *name, Expression *e);\n Expression *extractSideEffect(Scope *sc, const char *name, Expression **e0, Expression *e, bool alwaysCopy = false);\n Type *getTypeInfoType(Loc loc, Type *t, Scope *sc);\n@@ -331,7 +332,7 @@ class ExpressionSemanticVisitor : public Visitor\n             /* See if the symbol was a member of an enclosing 'with'\n             */\n             WithScopeSymbol *withsym = scopesym->isWithScopeSymbol();\n-            if (withsym && withsym->withstate->wthis)\n+            if (withsym && withsym->withstate->wthis && symbolIsVisible(sc, s))\n             {\n                 /* Disallow shadowing\n                 */\n@@ -368,9 +369,20 @@ class ExpressionSemanticVisitor : public Visitor\n             {\n                 if (withsym)\n                 {\n-                    Declaration *d = s->isDeclaration();\n-                    if (d)\n-                        checkAccess(exp->loc, sc, NULL, d);\n+                    if (withsym->withstate->exp->type->ty != Tvoid)\n+                    {\n+                        // with (exp)' is a type expression\n+                        // or 's' is not visible there (for error message)\n+                        e = new TypeExp(exp->loc, withsym->withstate->exp->type);\n+                    }\n+                    else\n+                    {\n+                        // 'with (exp)' is a Package/Module\n+                        e = withsym->withstate->exp;\n+                    }\n+                    e = new DotIdExp(exp->loc, e, exp->ident);\n+                    result = semantic(e, sc);\n+                    return;\n                 }\n \n                 /* If f is really a function template,\n@@ -8374,17 +8386,18 @@ Expression *semanticY(DotIdExp *exp, Scope *sc, int flag)\n          */\n         if (s && !(sc->flags & SCOPEignoresymbolvisibility) && !symbolIsVisible(sc->_module, s))\n         {\n-            if (s->isDeclaration())\n-                ::error(exp->loc, \"%s is not visible from module %s\", s->toPrettyChars(), sc->_module->toChars());\n-            else\n-                ::deprecation(exp->loc, \"%s is not visible from module %s\", s->toPrettyChars(), sc->_module->toChars());\n-            // s = NULL\n+            s = NULL;\n+        }\n+        if (s)\n+        {\n+            Package *p = s->isPackage();\n+            if (p && checkAccess(sc, p))\n+            {\n+                s = NULL;\n+            }\n         }\n         if (s)\n         {\n-            if (Package *p = s->isPackage())\n-                checkAccess(exp->loc, sc, p);\n-\n             // if 's' is a tuple variable, the tuple is returned.\n             s = s->toAlias();\n \n@@ -8555,8 +8568,14 @@ Expression *semanticY(DotIdExp *exp, Scope *sc, int flag)\n             return NULL;\n         s = ie->sds->search_correct(exp->ident);\n         if (s)\n-            exp->error(\"undefined identifier '%s' in %s '%s', did you mean %s '%s'?\",\n-                       exp->ident->toChars(), ie->sds->kind(), ie->sds->toPrettyChars(), s->kind(), s->toChars());\n+        {\n+            if (s->isPackage())\n+                exp->error(\"undefined identifier `%s` in %s `%s`, perhaps add `static import %s;`\",\n+                    exp->ident->toChars(), ie->sds->kind(), ie->sds->toPrettyChars(), s->toPrettyChars());\n+            else\n+                exp->error(\"undefined identifier '%s' in %s '%s', did you mean %s '%s'?\",\n+                    exp->ident->toChars(), ie->sds->kind(), ie->sds->toPrettyChars(), s->kind(), s->toChars());\n+        }\n         else\n             exp->error(\"undefined identifier '%s' in %s '%s'\",\n                        exp->ident->toChars(), ie->sds->kind(), ie->sds->toPrettyChars());"}, {"sha": "6e65d86eb5a3b5e8365258a7e616b641a2c674b4", "filename": "gcc/d/dmd/globals.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Fd%2Fdmd%2Fglobals.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Fd%2Fdmd%2Fglobals.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fglobals.h?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -126,8 +126,6 @@ struct Param\n     bool betterC;       // be a \"better C\" compiler; no dependency on D runtime\n     bool addMain;       // add a default main() function\n     bool allInst;       // generate code for all template instantiations\n-    bool check10378;    // check for issues transitioning to 10738\n-    bool bug10378;      // use pre-bugzilla 10378 search strategy\n     bool vsafe;         // use enhanced @safe checking\n     unsigned cplusplus;     // version of C++ name mangling to support\n     bool showGaggedErrors;  // print gagged errors anyway"}, {"sha": "cc8eb226019972fb1fa4bf6ff03aef2a11d151a9", "filename": "gcc/d/dmd/mtype.c", "status": "modified", "additions": 9, "deletions": 60, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Fd%2Fdmd%2Fmtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Fd%2Fdmd%2Fmtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fmtype.c?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -6996,8 +6996,8 @@ void TypeQualified::resolveHelper(Loc loc, Scope *sc,\n             Dsymbol *sm = s->searchX(loc, sc, id);\n             if (sm && !(sc->flags & SCOPEignoresymbolvisibility) && !symbolIsVisible(sc, sm))\n             {\n-                ::deprecation(loc, \"%s is not visible from module %s\", sm->toPrettyChars(), sc->_module->toChars());\n-                // sm = NULL;\n+                ::error(loc, \"`%s` is not visible from module `%s`\", sm->toPrettyChars(), sc->_module->toChars());\n+                sm = NULL;\n             }\n             if (global.errors != errorsave)\n             {\n@@ -7965,29 +7965,6 @@ Dsymbol *TypeStruct::toDsymbol(Scope *)\n     return sym;\n }\n \n-static Dsymbol *searchSymStruct(Scope *sc, Dsymbol *sym, Expression *e, Identifier *ident)\n-{\n-    int flags = sc->flags & SCOPEignoresymbolvisibility ? IgnoreSymbolVisibility : 0;\n-    Dsymbol *sold = NULL;\n-    if (global.params.bug10378 || global.params.check10378)\n-    {\n-        sold = sym->search(e->loc, ident, flags);\n-        if (!global.params.check10378)\n-            return sold;\n-    }\n-\n-    Dsymbol *s = sym->search(e->loc, ident, flags | SearchLocalsOnly);\n-    if (global.params.check10378)\n-    {\n-        Dsymbol *snew = s;\n-        if (sold != snew)\n-            Scope::deprecation10378(e->loc, sold, snew);\n-        if (global.params.bug10378)\n-            s = sold;\n-    }\n-    return s;\n-}\n-\n Expression *TypeStruct::dotExp(Scope *sc, Expression *e, Identifier *ident, int flag)\n {\n     Dsymbol *s;\n@@ -8038,16 +8015,16 @@ Expression *TypeStruct::dotExp(Scope *sc, Expression *e, Identifier *ident, int\n         return e;\n     }\n \n-    s = searchSymStruct(sc, sym, e, ident);\n+    const int flags = sc->flags & SCOPEignoresymbolvisibility ? IgnoreSymbolVisibility : 0;\n+    s = sym->search(e->loc, ident, flags | IgnorePrivateImports);\n L1:\n     if (!s)\n     {\n         return noMember(sc, e, ident, flag);\n     }\n     if (!(sc->flags & SCOPEignoresymbolvisibility) && !symbolIsVisible(sc, s))\n     {\n-        ::deprecation(e->loc, \"%s is not visible from module %s\", s->toPrettyChars(), sc->_module->toPrettyChars());\n-        // return noMember(sc, e, ident, flag);\n+        return noMember(sc, e, ident, flag);\n     }\n     if (!s->isFuncDeclaration())        // because of overloading\n     {\n@@ -8524,35 +8501,6 @@ Dsymbol *TypeClass::toDsymbol(Scope *)\n     return sym;\n }\n \n-static Dsymbol *searchSymClass(Scope *sc, Dsymbol *sym, Expression *e, Identifier *ident)\n-{\n-    int flags = sc->flags & SCOPEignoresymbolvisibility ? IgnoreSymbolVisibility : 0;\n-    Dsymbol *sold = NULL;\n-    if (global.params.bug10378 || global.params.check10378)\n-    {\n-        sold = sym->search(e->loc, ident, flags | IgnoreSymbolVisibility);\n-        if (!global.params.check10378)\n-            return sold;\n-    }\n-\n-    Dsymbol *s = sym->search(e->loc, ident, flags | SearchLocalsOnly);\n-    if (!s && !(flags & IgnoreSymbolVisibility))\n-    {\n-        s = sym->search(e->loc, ident, flags | SearchLocalsOnly | IgnoreSymbolVisibility);\n-        if (s && !(flags & IgnoreErrors))\n-            ::deprecation(e->loc, \"%s is not visible from class %s\", s->toPrettyChars(), sym->toChars());\n-    }\n-    if (global.params.check10378)\n-    {\n-        Dsymbol *snew = s;\n-        if (sold != snew)\n-            Scope::deprecation10378(e->loc, sold, snew);\n-        if (global.params.bug10378)\n-            s = sold;\n-    }\n-    return s;\n-}\n-\n Expression *TypeClass::dotExp(Scope *sc, Expression *e, Identifier *ident, int flag)\n {\n     Dsymbol *s;\n@@ -8606,7 +8554,9 @@ Expression *TypeClass::dotExp(Scope *sc, Expression *e, Identifier *ident, int f\n         return e;\n     }\n \n-    s = searchSymClass(sc, sym, e, ident);\n+    int flags = sc->flags & SCOPEignoresymbolvisibility ? IgnoreSymbolVisibility : 0;\n+    s = sym->search(e->loc, ident, flags | IgnorePrivateImports);\n+\n L1:\n     if (!s)\n     {\n@@ -8754,8 +8704,7 @@ Expression *TypeClass::dotExp(Scope *sc, Expression *e, Identifier *ident, int f\n     }\n     if (!(sc->flags & SCOPEignoresymbolvisibility) && !symbolIsVisible(sc, s))\n     {\n-        ::deprecation(e->loc, \"%s is not visible from module %s\", s->toPrettyChars(), sc->_module->toPrettyChars());\n-        // return noMember(sc, e, ident, flag);\n+        return noMember(sc, e, ident, flag);\n     }\n     if (!s->isFuncDeclaration())        // because of overloading\n     {"}, {"sha": "bae3448b90e56c1ff5fe2936e58858fb12cdd400", "filename": "gcc/d/dmd/parse.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Fd%2Fdmd%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Fd%2Fdmd%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fparse.c?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -644,7 +644,6 @@ Dsymbols *Parser::parseDeclDefs(int once, Dsymbol **pLastDecl, PrefixAttributes\n \n             case TOKdeprecated:\n             {\n-                Expression *e = NULL;\n                 if (StorageClass _stc = parseDeprecatedAttribute(this, &pAttrs->depmsg))\n                 {\n                     stc = _stc;"}, {"sha": "7e1b634caca33caf23b6db9506753f8770efbeb4", "filename": "gcc/d/dmd/scope.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Fd%2Fdmd%2Fscope.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Fd%2Fdmd%2Fscope.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fscope.h?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -144,7 +144,6 @@ struct Scope\n     Module *instantiatingModule();\n \n     Dsymbol *search(Loc loc, Identifier *ident, Dsymbol **pscopesym, int flags = IgnoreNone);\n-    static void deprecation10378(Loc loc, Dsymbol *sold, Dsymbol *snew);\n     Dsymbol *search_correct(Identifier *ident);\n     static const char *search_correct_C(Identifier *ident);\n     Dsymbol *insert(Dsymbol *s);"}, {"sha": "5fd4b486a9bd94483fc7e0ace9903b3b4dd7eaad", "filename": "gcc/d/dmd/traits.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Fd%2Fdmd%2Ftraits.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Fd%2Fdmd%2Ftraits.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftraits.c?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -933,7 +933,7 @@ Expression *semanticTraits(TraitsExp *e, Scope *sc)\n             return dimError(e, 1, dim);\n \n         Scope *sc2 = sc->push();\n-        sc2->flags = sc->flags | SCOPEnoaccesscheck;\n+        sc2->flags = sc->flags | SCOPEnoaccesscheck | SCOPEignoresymbolvisibility;\n         bool ok = TemplateInstance::semanticTiargs(e->loc, sc2, e->args, 1);\n         sc2->pop();\n         if (!ok)"}, {"sha": "e727848895db5224e0b6211bb5aabc13d905a315", "filename": "gcc/d/gdc.texi", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Fd%2Fgdc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Fd%2Fgdc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fgdc.texi?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -634,8 +634,6 @@ Report additional information about D language changes identified by\n @table @samp\n @item all\n List information on all language changes.\n-@item checkimports\n-Give deprecation messages about @option{-ftransition=import} anomalies.\n @item complex\n List all usages of complex or imaginary types.\n @item dip1000\n@@ -644,14 +642,6 @@ Implements @uref{http://wiki.dlang.org/DIP1000} (experimental).\n Implements @uref{http://wiki.dlang.org/DIP25} (experimental).\n @item field\n List all non-mutable fields which occupy an object instance.\n-@item import\n-Tells the compiler to revert to using an old lookup behavior for resolving\n-unqualified symbol names, where this was done in a single pass, ignoring\n-any protection attributes.  The default name lookup strategy is to use two\n-passes, the first ignoring imported declarations, and the second only\n-looking at imports.  The protection (@code{private}, @code{package},\n-@code{protected}) of symbols is also enforced to resolve any conflicts\n-between private and public symbols.\n @item nogc\n List all hidden GC allocations.\n @item tls"}, {"sha": "62e9f8ecfd2f8c999478dead00be6fd1e7e45656", "filename": "gcc/d/lang.opt", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Fd%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Fd%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Flang.opt?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -289,10 +289,6 @@ ftransition=all\n D RejectNegative\n List information on all language changes.\n \n-ftransition=checkimports\n-D RejectNegative\n-Give deprecation messages about -ftransition=import anomalies.\n-\n ftransition=complex\n D RejectNegative\n List all usages of complex or imaginary types.\n@@ -309,10 +305,6 @@ ftransition=field\n D RejectNegative\n List all non-mutable fields which occupy an object instance.\n \n-ftransition=import\n-D RejectNegative\n-Revert to single phase name lookup.\n-\n ftransition=nogc\n D RejectNegative\n List all hidden GC allocations."}, {"sha": "770b38201d966c3f4210b51d0fe7d8ace705c372", "filename": "gcc/testsuite/gdc.test/compilable/checkimports3.d", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fcheckimports3.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fcheckimports3.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fcheckimports3.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -0,0 +1,12 @@\n+/*\n+REQUIRED_ARGS: -de\n+EXTRA_FILES: imports/checkimports3a.d imports/checkimports3b.d imports/checkimports3c.d\n+*/\n+import imports.checkimports3a;\n+import imports.checkimports3b;\n+import imports.checkimports3c;\n+\n+void test()\n+{\n+    foo();\n+}"}, {"sha": "af396330517e8639e1a289b47b9f38eeedbe372e", "filename": "gcc/testsuite/gdc.test/compilable/ddoc14633.d", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc14633.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc14633.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc14633.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -1,12 +1,6 @@\n // PERMUTE_ARGS:\n // REQUIRED_ARGS: -D -Dd${RESULTS_DIR}/compilable -w -o-\n \n-/*\n-TEST_OUTPUT:\n----\n----\n-*/\n-\n /** Blah\n  Params:\n     T = some type"}, {"sha": "e91db649ceeb90ea3027b1388a282241bd8f19e2", "filename": "gcc/testsuite/gdc.test/compilable/deprecate14283.d", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdeprecate14283.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdeprecate14283.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdeprecate14283.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -1,11 +1,5 @@\n // REQUIRED_ARGS: -dw\n // PERMUTE_ARGS:\n-/*\n-TEST_OUTPUT:\n----\n----\n-*/\n-\n class C\n {\n     void bug()"}, {"sha": "598ff8592213876ee2b3d0a21fcf17e9a87bfd7f", "filename": "gcc/testsuite/gdc.test/compilable/diag11066.d", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdiag11066.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdiag11066.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdiag11066.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -1,10 +1,4 @@\n // REQUIRED_ARGS: -w -profile\n-/*\n-TEST_OUTPUT:\n----\n----\n-*/\n-\n void main()\n {\n     string s;"}, {"sha": "8f98188c490d8d5ebcede82a9f7e9c7b95de65be", "filename": "gcc/testsuite/gdc.test/compilable/diag12598.d", "status": "renamed", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdiag12598.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdiag12598.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdiag12598.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -1,9 +1,6 @@\n /*\n-REQUIRED_ARGS: -transition=import\n-TEST_OUTPUT:\n----\n-fail_compilation/diag12598.d(14): Error: struct 'lines' is a type, not an lvalue\n----\n+REQUIRED_ARGS:\n+EXTRA_FILES: imports/diag12598a.d\n */\n \n class C", "previous_filename": "gcc/testsuite/gdc.test/fail_compilation/diag12598.d"}, {"sha": "7d034d80b622e01dc22f7d954264063eae652e60", "filename": "gcc/testsuite/gdc.test/compilable/diag3243.d", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdiag3243.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdiag3243.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdiag3243.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -1,11 +1,5 @@\n // REQUIRED_ARGS: -vtls\n // PERMUTE_ARGS:\n-/*\n-TEST_OUTPUT:\n----\n----\n-*/\n-\n template T()\n {\n     static this() {}"}, {"sha": "1becf0c4c7e78ce4fbc5e44a68aa82e014034c75", "filename": "gcc/testsuite/gdc.test/compilable/dip22d.d", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdip22d.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdip22d.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdip22d.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -0,0 +1,10 @@\n+/*\n+REQUIRED_ARGS:\n+*/\n+\n+// https://github.com/dlang/DIPs/blob/master/DIPs/archive/DIP22.md\n+\n+import imports.dip22d;\n+import imports.dip22e;\n+\n+Foo foo;"}, {"sha": "85e6cd8c3909a7e67c41750f5210b1463dd7a90c", "filename": "gcc/testsuite/gdc.test/compilable/imports/checkimports3a.d", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fcheckimports3a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fcheckimports3a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fcheckimports3a.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "previous_filename": "gcc/testsuite/gdc.test/fail_compilation/imports/checkimports3a.d"}, {"sha": "37ea7ae038703e5d9a49fbde426dff72da339fae", "filename": "gcc/testsuite/gdc.test/compilable/imports/checkimports3b.d", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fcheckimports3b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fcheckimports3b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fcheckimports3b.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "previous_filename": "gcc/testsuite/gdc.test/fail_compilation/imports/checkimports3b.d"}, {"sha": "93b4ac5fe129ec133690d0595468ddaa1504efb8", "filename": "gcc/testsuite/gdc.test/compilable/imports/checkimports3c.d", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fcheckimports3c.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fcheckimports3c.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fcheckimports3c.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "previous_filename": "gcc/testsuite/gdc.test/fail_compilation/imports/checkimports3c.d"}, {"sha": "dee0054525462133663c33de9fbe447049a8f1ae", "filename": "gcc/testsuite/gdc.test/compilable/imports/diag12598a.d", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fdiag12598a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fdiag12598a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fdiag12598a.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "previous_filename": "gcc/testsuite/gdc.test/fail_compilation/imports/diag12598a.d"}, {"sha": "9f80442e4b41c87da585816ee174873e504f8f1b", "filename": "gcc/testsuite/gdc.test/compilable/imports/dip22d.d", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fdip22d.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fdip22d.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fdip22d.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -0,0 +1,5 @@\n+module imports.dip22d;\n+\n+private struct Foo {}\n+private void foo() {}\n+private void bar() {}"}, {"sha": "3464e605d5d3b5dd430b4747f1a448c147109184", "filename": "gcc/testsuite/gdc.test/compilable/imports/dip22e.d", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fdip22e.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fdip22e.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fimports%2Fdip22e.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -0,0 +1,4 @@\n+module imports.dip22e;\n+\n+public struct Foo {}\n+public void bar(int) {}"}, {"sha": "464c8405de2769ec723c8508e4911a36d1f6658c", "filename": "gcc/testsuite/gdc.test/compilable/test12567a.d", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest12567a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest12567a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest12567a.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -1,10 +1,5 @@\n // REQUIRED_ARGS:\n // PERMUTE_ARGS:\n-/*\n-TEST_OUTPUT:\n----\n----\n-*/\n deprecated\n module test12567a;\n "}, {"sha": "9b9d7e171c288b1545829bec8da2411254624888", "filename": "gcc/testsuite/gdc.test/compilable/test12567b.d", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest12567b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest12567b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest12567b.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -1,10 +1,5 @@\n // REQUIRED_ARGS:\n // PERMUTE_ARGS:\n-/*\n-TEST_OUTPUT:\n----\n----\n-*/\n deprecated(\"message\")\n module test12567b;\n "}, {"sha": "ee7bc294d6c77ab27eef71daac3c1b289fbf4329", "filename": "gcc/testsuite/gdc.test/compilable/test12567d.d", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest12567d.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest12567d.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest12567d.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -1,10 +1,5 @@\n // REQUIRED_ARGS: -d\n // PERMUTE_ARGS:\n-/*\n-TEST_OUTPUT:\n----\n----\n-*/\n import imports.a12567;\n \n void main() { foo(); }"}, {"sha": "2e74cf7f05cf78ae1635719dc23e8e94111236d6", "filename": "gcc/testsuite/gdc.test/compilable/test12567e.d", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest12567e.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest12567e.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest12567e.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -1,7 +1,2 @@\n // REQUIRED_ARGS: -o-\n-/*\n-TEST_OUTPUT:\n----\n----\n-*/\n deprecated(\"a\" ~ \"b\") module fail12567;"}, {"sha": "ddd4c90f4867984332390be994e50b7596122783", "filename": "gcc/testsuite/gdc.test/compilable/test13053.d", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest13053.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest13053.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest13053.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -1,10 +1,4 @@\n // PERMUTE_ARGS: -w -wi\n-/*\n-TEST_OUTPUT:\n----\n----\n-*/\n-\n @system:\n \n struct S"}, {"sha": "ccff8d56314f011b50325de6c2312adc88581c24", "filename": "gcc/testsuite/gdc.test/compilable/test14375.d", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest14375.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest14375.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest14375.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -1,8 +1,4 @@\n-/*\n-TEST_OUTPUT:\n----\n----\n- */\n+// https://issues.dlang.org/show_bug.cgi?id=14375\n interface IKeysAPI(string greetings) {\n     static assert(greetings == \"Hello world\", greetings);\n }"}, {"sha": "483c080861cd3a1965f0e3c8eab355b163040f13", "filename": "gcc/testsuite/gdc.test/compilable/test15785.d", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest15785.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest15785.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest15785.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -1,10 +1,5 @@\n // REQUIRED_ARGS: -de\n // PERMUTE_ARGS:\n-/*\n-TEST_OUTPUT:\n----\n----\n-*/\n import imports.test15785;\n \n class Derived : Base, IBase2"}, {"sha": "8a5c42578938c698810be03fe5a77ac5b9c898dd", "filename": "gcc/testsuite/gdc.test/compilable/test15856.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest15856.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest15856.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest15856.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -1,4 +1,4 @@\n-// REQUIRED_ARGS: -transition=checkimports -de\n+// REQUIRED_ARGS: -de\n // PERMUTE_ARGS:\n /*\n TEST_PUTPUT:"}, {"sha": "871af4e55edf44a770c94650db98998b64401578", "filename": "gcc/testsuite/gdc.test/compilable/test15925.d", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/300a3ce5c5695eb1a7c0476e9d1b45420a463248/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest15925.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/300a3ce5c5695eb1a7c0476e9d1b45420a463248/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest15925.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest15925.d?ref=300a3ce5c5695eb1a7c0476e9d1b45420a463248", "patch": "@@ -1,18 +0,0 @@\n-/* REQUIRED_ARGS: -transition=import -transition=checkimports\n-PERMUTE_ARGS:\n-TEST_OUTPUT:\n----\n-compilable/test15925.d(17): Deprecation: local import search method found variable imp15925.X instead of nothing\n----\n-*/\n-\n-mixin template Import()\n-{\n-    import imports.imp15925;\n-}\n-\n-class Foo\n-{\n-    mixin Import!();\n-    static assert(X == 1);\n-}"}, {"sha": "cfd02441dcba7726ffd5652eb570ea67b3bf00bf", "filename": "gcc/testsuite/gdc.test/compilable/test17791.d", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest17791.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest17791.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest17791.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -1,9 +1,4 @@\n-/*\n-REQUIRED_ARGS: -de\n-TEST_OUTPUT:\n----\n----\n-*/\n+// REQUIRED_ARGS: -de\n deprecated(\"A deprecated class\") {\n class DepClass\n {"}, {"sha": "631c02070b4145341798f9aa49d8d58818f3bc4a", "filename": "gcc/testsuite/gdc.test/compilable/test7815.d", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest7815.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest7815.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest7815.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -1,10 +1,4 @@\n // REQUIRED_ARGS: -o-\n-/*\n-TEST_OUTPUT:\n----\n----\n-*/\n-\n mixin template Helpers()\n {\n     static if (is(Flags!Move))"}, {"sha": "ee9764aaafd41ac093629df481158c6d29169376", "filename": "gcc/testsuite/gdc.test/compilable/testcheckimports.d", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftestcheckimports.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftestcheckimports.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftestcheckimports.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -1,9 +1,5 @@\n-// REQUIRED_ARGS: -transition=checkimports -de\n-/*\n-TEST_OUTPUT:\n----\n----\n-*/\n+// REQUIRED_ARGS:\n+// EXTRA_FILES: imports/test15857a.d imports/test15857b.d imports/test15857c.d\n \n // https://issues.dlang.org/show_bug.cgi?id=15825\n "}, {"sha": "d981a47acdf7bb69d5830a55fb9c142ee2de735a", "filename": "gcc/testsuite/gdc.test/compilable/warn3882.d", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fwarn3882.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fwarn3882.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fwarn3882.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -1,10 +1,4 @@\n // PERMUTE_ARGS: -w -wi -debug\n-/*\n-TEST_OUTPUT:\n----\n----\n-*/\n-\n @safe pure nothrow void strictVoidReturn(T)(T x) {}\n @safe pure nothrow void nonstrictVoidReturn(T)(ref T x) {}\n "}, {"sha": "a27ddea95916a77c824576be87c28244e6678e44", "filename": "gcc/testsuite/gdc.test/fail_compilation/checkimports1a.d", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/300a3ce5c5695eb1a7c0476e9d1b45420a463248/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fcheckimports1a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/300a3ce5c5695eb1a7c0476e9d1b45420a463248/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fcheckimports1a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fcheckimports1a.d?ref=300a3ce5c5695eb1a7c0476e9d1b45420a463248", "patch": "@@ -1,20 +0,0 @@\n-// REQUIRED_ARGS: -transition=checkimports -de\n-/*\n-TEST_OUTPUT:\n----\n-fail_compilation/checkimports1a.d(16): Deprecation: local import search method found struct imports.diag12598a.lines instead of variable checkimports1a.C.lines\n----\n-*/\n-\n-\n-// new lookup + information\n-class C\n-{\n-    void f()\n-    {\n-        import imports.diag12598a;\n-        lines ~= \"\";\n-    }\n-\n-    string[] lines;\n-}"}, {"sha": "60d3ae82b925358dba282f37f89754c0ed54706f", "filename": "gcc/testsuite/gdc.test/fail_compilation/checkimports1b.d", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/300a3ce5c5695eb1a7c0476e9d1b45420a463248/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fcheckimports1b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/300a3ce5c5695eb1a7c0476e9d1b45420a463248/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fcheckimports1b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fcheckimports1b.d?ref=300a3ce5c5695eb1a7c0476e9d1b45420a463248", "patch": "@@ -1,20 +0,0 @@\n-// REQUIRED_ARGS: -transition=import -transition=checkimports\n-/*\n-TEST_OUTPUT:\n----\n-fail_compilation/checkimports1b.d(16): Deprecation: local import search method found struct imports.diag12598a.lines instead of variable checkimports1b.C.lines\n-fail_compilation/checkimports1b.d(16): Error: struct 'lines' is a type, not an lvalue\n----\n-*/\n-\n-// old lookup + information\n-class C\n-{\n-    void f()\n-    {\n-        import imports.diag12598a;\n-        lines ~= \"\";\n-    }\n-\n-    string[] lines;\n-}"}, {"sha": "f6587ef9219fc0657b5700b01424717ca89a5e6a", "filename": "gcc/testsuite/gdc.test/fail_compilation/checkimports1c.d", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/300a3ce5c5695eb1a7c0476e9d1b45420a463248/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fcheckimports1c.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/300a3ce5c5695eb1a7c0476e9d1b45420a463248/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fcheckimports1c.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fcheckimports1c.d?ref=300a3ce5c5695eb1a7c0476e9d1b45420a463248", "patch": "@@ -1,20 +0,0 @@\n-// REQUIRED_ARGS: -transition=checkimports -transition=import\n-/*\n-TEST_OUTPUT:\n----\n-fail_compilation/checkimports1c.d(16): Deprecation: local import search method found struct imports.diag12598a.lines instead of variable checkimports1c.C.lines\n-fail_compilation/checkimports1c.d(16): Error: struct 'lines' is a type, not an lvalue\n----\n-*/\n-\n-// old lookup + information (the order of switches is reverse)\n-class C\n-{\n-    void f()\n-    {\n-        import imports.diag12598a;\n-        lines ~= \"\";\n-    }\n-\n-    string[] lines;\n-}"}, {"sha": "abec4242eeca502e57739ac200282f52a3b94e54", "filename": "gcc/testsuite/gdc.test/fail_compilation/checkimports2a.d", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fcheckimports2a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fcheckimports2a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fcheckimports2a.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -1,16 +1,11 @@\n-// REQUIRED_ARGS: -transition=checkimports\n+// REQUIRED_ARGS:\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/checkimports2a.d(26): Deprecation: local import search method found variable imports.imp2.X instead of variable checkimports2a.X\n-fail_compilation/checkimports2a.d(32): Deprecation: local import search method found variable imports.imp2.X instead of nothing\n-fail_compilation/checkimports2a.d(32): Error: no property 'X' for type 'checkimports2a.B'\n-fail_compilation/checkimports2a.d(32):        while evaluating: `static assert((B).X == 0)`\n-fail_compilation/checkimports2a.d(33): Deprecation: local import search method found variable imports.imp2.Y instead of nothing\n-fail_compilation/checkimports2a.d(33): Error: no property 'Y' for type 'checkimports2a.B'\n-fail_compilation/checkimports2a.d(33):        while evaluating: `static assert((B).Y == 2)`\n-fail_compilation/checkimports2a.d(35): Deprecation: local import search method found variable imports.imp2.X instead of variable checkimports2a.X\n-fail_compilation/checkimports2a.d(36): Deprecation: local import search method found variable imports.imp2.Y instead of variable imports.imp1.Y\n+fail_compilation/checkimports2a.d(27): Error: no property `X` for type `checkimports2a.B`, did you mean `imports.imp2.X`?\n+fail_compilation/checkimports2a.d(27):        while evaluating: `static assert((B).X == 0)`\n+fail_compilation/checkimports2a.d(28): Error: no property `Y` for type `checkimports2a.B`, did you mean `imports.imp2.Y`?\n+fail_compilation/checkimports2a.d(28):        while evaluating: `static assert((B).Y == 2)`\n ---\n */\n "}, {"sha": "8b99fdc54058a727f2793642dc71cb56db68a88a", "filename": "gcc/testsuite/gdc.test/fail_compilation/checkimports2b.d", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fcheckimports2b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fcheckimports2b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fcheckimports2b.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -1,17 +1,8 @@\n-// REQUIRED_ARGS: -transition=import -transition=checkimports -de\n+// REQUIRED_ARGS:\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/checkimports2b.d(27): Deprecation: local import search method found variable imports.imp2.X instead of variable checkimports2b.X\n-fail_compilation/checkimports2b.d(27):        while evaluating: `static assert(2 == 2)`\n-fail_compilation/checkimports2b.d(33): Deprecation: local import search method found variable imports.imp2.X instead of nothing\n-fail_compilation/checkimports2b.d(33):        while evaluating: `static assert(2 == 2)`\n-fail_compilation/checkimports2b.d(34): Deprecation: local import search method found variable imports.imp2.Y instead of nothing\n-fail_compilation/checkimports2b.d(34):        while evaluating: `static assert(2 == 2)`\n-fail_compilation/checkimports2b.d(36): Deprecation: local import search method found variable imports.imp2.X instead of variable checkimports2b.X\n-fail_compilation/checkimports2b.d(36):        while evaluating: `static assert(2 == 2)`\n-fail_compilation/checkimports2b.d(37): Deprecation: local import search method found variable imports.imp2.Y instead of variable imports.imp1.Y\n-fail_compilation/checkimports2b.d(37):        while evaluating: `static assert(2 == 2)`\n+fail_compilation/checkimports2b.d(18): Error: static assert:  `0 == 2` is false\n ---\n */\n "}, {"sha": "4208dcdf6b2a16006ebfeea92eeb67dd245961ef", "filename": "gcc/testsuite/gdc.test/fail_compilation/checkimports2c.d", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fcheckimports2c.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fcheckimports2c.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fcheckimports2c.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -1,18 +1,8 @@\n-// REQUIRED_ARGS: -transition=checkimports -transition=import -de\n+// REQUIRED_ARGS:\n /*\n TEST_OUTPUT:\n ---\n-\n-fail_compilation/checkimports2c.d(28): Deprecation: local import search method found variable imports.imp2.X instead of variable checkimports2c.X\n-fail_compilation/checkimports2c.d(28):        while evaluating: `static assert(2 == 2)`\n-fail_compilation/checkimports2c.d(34): Deprecation: local import search method found variable imports.imp2.X instead of nothing\n-fail_compilation/checkimports2c.d(34):        while evaluating: `static assert(2 == 2)`\n-fail_compilation/checkimports2c.d(35): Deprecation: local import search method found variable imports.imp2.Y instead of nothing\n-fail_compilation/checkimports2c.d(35):        while evaluating: `static assert(2 == 2)`\n-fail_compilation/checkimports2c.d(37): Deprecation: local import search method found variable imports.imp2.X instead of variable checkimports2c.X\n-fail_compilation/checkimports2c.d(37):        while evaluating: `static assert(2 == 2)`\n-fail_compilation/checkimports2c.d(38): Deprecation: local import search method found variable imports.imp2.Y instead of variable imports.imp1.Y\n-fail_compilation/checkimports2c.d(38):        while evaluating: `static assert(2 == 2)`\n+fail_compilation/checkimports2c.d(18): Error: static assert:  `0 == 2` is false\n ---\n */\n "}, {"sha": "e9d44a71b26b3ee0b33676354f970305f5cd85c6", "filename": "gcc/testsuite/gdc.test/fail_compilation/checkimports3.d", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/300a3ce5c5695eb1a7c0476e9d1b45420a463248/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fcheckimports3.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/300a3ce5c5695eb1a7c0476e9d1b45420a463248/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fcheckimports3.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fcheckimports3.d?ref=300a3ce5c5695eb1a7c0476e9d1b45420a463248", "patch": "@@ -1,15 +0,0 @@\n-/*\n-REQUIRED_ARGS: -transition=checkimports -de\n-TEST_OUTPUT:\n----\n-fail_compilation/checkimports3.d(14): Deprecation: local import search method found overloadset checkimports3.foo (3 overloads) instead of overloadset checkimports3.foo (2 overloads)\n----\n-*/\n-import imports.checkimports3a;\n-import imports.checkimports3b;\n-import imports.checkimports3c;\n-\n-void test()\n-{\n-    foo();\n-}"}, {"sha": "3c35b66c045f418354f72bc31a8df4dacfa915aa", "filename": "gcc/testsuite/gdc.test/fail_compilation/diag10169.d", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag10169.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag10169.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag10169.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -1,8 +1,7 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/diag10169.d(12): Deprecation: imports.a10169.B.x is not visible from module diag10169\n-fail_compilation/diag10169.d(12): Error: struct imports.a10169.B member `x` is not accessible\n+fail_compilation/diag10169.d(11): Error: no property `x` for type `B`, did you mean `imports.a10169.B.x`?\n ---\n */\n import imports.a10169;"}, {"sha": "7c81b168c70d45d6f042e9e140988081173f5777", "filename": "gcc/testsuite/gdc.test/fail_compilation/diag5385.d", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag5385.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag5385.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag5385.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -1,22 +1,14 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/diag5385.d(27): Deprecation: imports.fail5385.C.privX is not visible from module diag5385\n-fail_compilation/diag5385.d(27): Error: class imports.fail5385.C member `privX` is not accessible\n-fail_compilation/diag5385.d(28): Deprecation: imports.fail5385.C.packX is not visible from module diag5385\n-fail_compilation/diag5385.d(28): Error: class imports.fail5385.C member `packX` is not accessible\n-fail_compilation/diag5385.d(29): Deprecation: imports.fail5385.C.privX2 is not visible from module diag5385\n-fail_compilation/diag5385.d(29): Error: class imports.fail5385.C member `privX2` is not accessible\n-fail_compilation/diag5385.d(30): Deprecation: imports.fail5385.C.packX2 is not visible from module diag5385\n-fail_compilation/diag5385.d(30): Error: class imports.fail5385.C member `packX2` is not accessible\n-fail_compilation/diag5385.d(31): Deprecation: imports.fail5385.S.privX is not visible from module diag5385\n-fail_compilation/diag5385.d(31): Error: struct imports.fail5385.S member `privX` is not accessible\n-fail_compilation/diag5385.d(32): Deprecation: imports.fail5385.S.packX is not visible from module diag5385\n-fail_compilation/diag5385.d(32): Error: struct imports.fail5385.S member `packX` is not accessible\n-fail_compilation/diag5385.d(33): Deprecation: imports.fail5385.S.privX2 is not visible from module diag5385\n-fail_compilation/diag5385.d(33): Error: struct imports.fail5385.S member `privX2` is not accessible\n-fail_compilation/diag5385.d(34): Deprecation: imports.fail5385.S.packX2 is not visible from module diag5385\n-fail_compilation/diag5385.d(34): Error: struct imports.fail5385.S member `packX2` is not accessible\n+fail_compilation/diag5385.d(19): Error: no property `privX` for type `imports.fail5385.C`, did you mean `imports.fail5385.C.privX`?\n+fail_compilation/diag5385.d(20): Error: no property `packX` for type `imports.fail5385.C`, did you mean `imports.fail5385.C.packX`?\n+fail_compilation/diag5385.d(21): Error: no property `privX2` for type `imports.fail5385.C`, did you mean `imports.fail5385.C.privX2`?\n+fail_compilation/diag5385.d(22): Error: no property `packX2` for type `imports.fail5385.C`, did you mean `imports.fail5385.C.packX2`?\n+fail_compilation/diag5385.d(23): Error: no property `privX` for type `S`, did you mean `imports.fail5385.S.privX`?\n+fail_compilation/diag5385.d(24): Error: no property `packX` for type `S`, did you mean `imports.fail5385.S.packX`?\n+fail_compilation/diag5385.d(25): Error: no property `privX2` for type `S`, did you mean `imports.fail5385.S.privX2`?\n+fail_compilation/diag5385.d(26): Error: no property `packX2` for type `S`, did you mean `imports.fail5385.S.packX2`?\n ---\n */\n "}, {"sha": "5bd2b5b03047b73aab9be6997f568b9849076d5c", "filename": "gcc/testsuite/gdc.test/fail_compilation/dip22a.d", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdip22a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdip22a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdip22a.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -1,17 +1,12 @@\n /*\n-REQUIRED_ARGS: -de\n+REQUIRED_ARGS:\n TEST_OUTPUT:\n ---\n-fail_compilation/dip22a.d(21): Deprecation: imports.dip22a.Klass.bar is not visible from module dip22a\n-fail_compilation/dip22a.d(21): Error: class imports.dip22a.Klass member `bar` is not accessible\n-fail_compilation/dip22a.d(22): Deprecation: imports.dip22a.Struct.bar is not visible from module dip22a\n-fail_compilation/dip22a.d(22): Error: struct imports.dip22a.Struct member `bar` is not accessible\n-fail_compilation/dip22a.d(23): Error: imports.dip22a.bar is not visible from module dip22a\n-fail_compilation/dip22a.d(23): Error: function `imports.dip22a.bar` is not accessible from module `dip22a`\n-fail_compilation/dip22a.d(24): Error: imports.dip22a.Template!int.bar is not visible from module dip22a\n-fail_compilation/dip22a.d(24): Error: function `imports.dip22a.Template!int.bar` is not accessible from module `dip22a`\n-fail_compilation/dip22a.d(25): Deprecation: imports.dip22a.bar is not visible from module dip22a\n-fail_compilation/dip22a.d(25): Error: function `imports.dip22a.bar` is not accessible from module `dip22a`\n+fail_compilation/dip22a.d(16): Error: no property `bar` for type `imports.dip22a.Klass`, did you mean `imports.dip22a.Klass.bar`?\n+fail_compilation/dip22a.d(17): Error: no property `bar` for type `Struct`, did you mean `imports.dip22a.Struct.bar`?\n+fail_compilation/dip22a.d(18): Error: undefined identifier `bar` in module `imports.dip22a`, did you mean function `bar`?\n+fail_compilation/dip22a.d(19): Error: no property `bar` for type `void`\n+fail_compilation/dip22a.d(20): Error: no property `bar` for type `int`\n ---\n */\n import imports.dip22a;"}, {"sha": "952018022de646c40864c2fd1f4ab25d488c6b45", "filename": "gcc/testsuite/gdc.test/fail_compilation/dip22b.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdip22b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdip22b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdip22b.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -1,8 +1,8 @@\n /*\n-REQUIRED_ARGS: -de\n+REQUIRED_ARGS:\n TEST_OUTPUT:\n ---\n-fail_compilation/dip22b.d(12): Deprecation: pkg.dip22c.Foo is not visible from module dip22\n+fail_compilation/dip22b.d(12): Error: undefined identifier `Foo`, did you mean variable `foo`?\n ---\n */\n module pkg.dip22;"}, {"sha": "dd1b8ef31ce01745a3b82245c724434e3767f485", "filename": "gcc/testsuite/gdc.test/fail_compilation/dip22d.d", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/300a3ce5c5695eb1a7c0476e9d1b45420a463248/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdip22d.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/300a3ce5c5695eb1a7c0476e9d1b45420a463248/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdip22d.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdip22d.d?ref=300a3ce5c5695eb1a7c0476e9d1b45420a463248", "patch": "@@ -1,12 +0,0 @@\n-/*\n-REQUIRED_ARGS: -transition=import\n-TEST_OUTPUT:\n----\n-fail_compilation/dip22d.d(12): Error: imports.dip22d.Foo at fail_compilation/imports/dip22d.d(3) conflicts with imports.dip22e.Foo at fail_compilation/imports/dip22e.d(3)\n-fail_compilation/dip22d.d(12): Error: module dip22d struct imports.dip22d.Foo is private\n----\n-*/\n-import imports.dip22d;\n-import imports.dip22e;\n-\n-Foo foo;"}, {"sha": "b1411b2f10cdfbb4f45728a535d810a66424f2a2", "filename": "gcc/testsuite/gdc.test/fail_compilation/dip22e.d", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdip22e.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdip22e.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdip22e.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -1,10 +1,8 @@\n /*\n-REQUIRED_ARGS: -transition=checkimports -de\n+REQUIRED_ARGS:\n TEST_OUTPUT:\n ---\n-fail_compilation/dip22e.d(16): Deprecation: imports.dip22d.foo is not visible from module dip22e\n-fail_compilation/dip22e.d(16): Error: function `imports.dip22d.foo` is not accessible from module `dip22e`\n-fail_compilation/dip22e.d(17): Deprecation: local import search method found overloadset dip22e.bar (2 overloads) instead of function imports.dip22e.bar\n+fail_compilation/dip22e.d(14): Error: undefined identifier `foo`, did you mean struct `Foo`?\n ---\n */\n "}, {"sha": "067e83c035dfdfdad008956ec221a08d8f3d9437", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail10528.d", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail10528.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail10528.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail10528.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -1,18 +1,14 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/fail10528.d(23): Error: module fail10528 variable a10528.a is private\n-fail_compilation/fail10528.d(23): Deprecation: a10528.a is not visible from module fail10528\n-fail_compilation/fail10528.d(24): Error: a10528.a is not visible from module fail10528\n-fail_compilation/fail10528.d(26): Error: module fail10528 enum member a10528.b is private\n-fail_compilation/fail10528.d(26): Deprecation: a10528.b is not visible from module fail10528\n-fail_compilation/fail10528.d(27): Error: a10528.b is not visible from module fail10528\n-fail_compilation/fail10528.d(29): Deprecation: a10528.S.c is not visible from module fail10528\n-fail_compilation/fail10528.d(29): Error: variable `a10528.S.c` is not accessible from module `fail10528`\n-fail_compilation/fail10528.d(30): Error: variable `a10528.S.c` is not accessible from module `fail10528`\n-fail_compilation/fail10528.d(32): Deprecation: a10528.C.d is not visible from module fail10528\n-fail_compilation/fail10528.d(32): Error: variable `a10528.C.d` is not accessible from module `fail10528`\n-fail_compilation/fail10528.d(33): Error: variable `a10528.C.d` is not accessible from module `fail10528`\n+fail_compilation/fail10528.d(19): Error: undefined identifier `a`\n+fail_compilation/fail10528.d(20): Error: undefined identifier `a` in module `a10528`, did you mean variable `a`?\n+fail_compilation/fail10528.d(22): Error: undefined identifier `b`\n+fail_compilation/fail10528.d(23): Error: undefined identifier `b` in module `a10528`, did you mean enum member `b`?\n+fail_compilation/fail10528.d(25): Error: no property `c` for type `S`, did you mean `a10528.S.c`?\n+fail_compilation/fail10528.d(26): Error: no property `c` for type `S`, did you mean `a10528.S.c`?\n+fail_compilation/fail10528.d(28): Error: no property `d` for type `a10528.C`, did you mean `a10528.C.d`?\n+fail_compilation/fail10528.d(29): Error: no property `d` for type `a10528.C`, did you mean `a10528.C.d`?\n ---\n */\n "}, {"sha": "6d15e1a54d6cfc6d3fbca7bf812d9ca9bc7a6435", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail262.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail262.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail262.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail262.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -1,7 +1,7 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/fail262.d(23): Error: function fail262.B.f does not override any function\n+fail_compilation/fail262.d(23): Error: function `const void fail262.B.f()` does not override any function, did you mean to override `shared const void fail262.A.f()`?\n ---\n */\n "}, {"sha": "a2c289059bea5d58a315b5a9f20567e3ddf3c7e3", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail313.d", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail313.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail313.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail313.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -2,11 +2,9 @@\n REQUIRED_ARGS: -de\n TEST_OUTPUT:\n ---\n-fail_compilation/fail313.d(18): Deprecation: module imports.b313 is not accessible here, perhaps add 'static import imports.b313;'\n-fail_compilation/fail313.d(25): Deprecation: imports.a313.core is not visible from module test313\n-fail_compilation/fail313.d(25): Deprecation: package core.stdc is not accessible here\n-fail_compilation/fail313.d(25): Deprecation: module core.stdc.stdio is not accessible here, perhaps add 'static import core.stdc.stdio;'\n-fail_compilation/fail313.d(30): Deprecation: package imports.pkg313 is not accessible here, perhaps add 'static import imports.pkg313;'\n+fail_compilation/fail313.d(15): Error: undefined identifier `b313` in package `imports`, perhaps add `static import imports.b313;`\n+fail_compilation/fail313.d(22): Error: undefined identifier `core`\n+fail_compilation/fail313.d(27): Error: undefined identifier `pkg313` in package `imports`, perhaps add `static import imports.pkg313;`\n ---\n */\n module test313;"}, {"sha": "c9d537aa76906945f2fa7f27897bcd9a3dba2a59", "filename": "gcc/testsuite/gdc.test/fail_compilation/imports/imp15925.d", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fimports%2Fimp15925.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fimports%2Fimp15925.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fimports%2Fimp15925.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "previous_filename": "gcc/testsuite/gdc.test/compilable/imports/imp15925.d"}, {"sha": "e498b64ee69003c82e76b794d65b3bb105916704", "filename": "gcc/testsuite/gdc.test/fail_compilation/imports/imp21353.d", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fimports%2Fimp21353.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fimports%2Fimp21353.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fimports%2Fimp21353.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -0,0 +1,7 @@\n+module imports.imp21353;\n+\n+struct A { int x; }\n+\n+struct B { import imports.imp21353 : A; }\n+\n+private struct P { }"}, {"sha": "9daf6f187d4a3a684968c56deec334dc02ec37ea", "filename": "gcc/testsuite/gdc.test/fail_compilation/imports/test15117a.d", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fimports%2Ftest15117a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fimports%2Ftest15117a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fimports%2Ftest15117a.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -0,0 +1,9 @@\n+module imports.test15117a;\n+\n+struct AssertResult {}\n+\n+auto test_usr_1()\n+{\n+    // 2. generate TyepInfoStructDeclaration\n+    auto x = typeid(AssertResult);\n+}"}, {"sha": "aedb44e65fd84eb3ba0b487f072a11ce3f680d73", "filename": "gcc/testsuite/gdc.test/fail_compilation/lookup.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Flookup.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Flookup.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Flookup.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -1,9 +1,9 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/lookup.d(23): Error: no property 'X' for type 'lookup.B'\n+fail_compilation/lookup.d(23): Error: no property `X` for type `lookup.B`, did you mean `imports.imp2.X`?\n fail_compilation/lookup.d(23):        while evaluating: `static assert((B).X == 0)`\n-fail_compilation/lookup.d(24): Error: no property 'Y' for type 'lookup.B'\n++fail_compilation/lookup.d(24): Error: no property `Y` for type `lookup.B`, did you mean `imports.imp2.Y`?\n fail_compilation/lookup.d(24):        while evaluating: `static assert((B).Y == 2)`\n ---\n */"}, {"sha": "c95ecc111faa37ad9a3341c2ca75da59c6ff164e", "filename": "gcc/testsuite/gdc.test/fail_compilation/test143.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest143.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest143.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest143.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -4,7 +4,7 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/test143.d(20): Error: undefined identifier `x`\n+fail_compilation/test143.d(19): Error: undefined identifier `x`\n ---\n */\n module test143;"}, {"sha": "e6ce3b5bf11f601c4f91e61cadc47c202e950367", "filename": "gcc/testsuite/gdc.test/fail_compilation/test15117.d", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest15117.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest15117.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest15117.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -0,0 +1,30 @@\n+// REQUIRED_ARGS: -o-\n+// PERMUTE_ARGS:\n+// COMPILED_IMPORTS: imports/test15117a.d\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/test15177.d-mixin-20(20): Error: `imports.test15117a.object` is not visible from module `test15177`\n+fail_compilation/test15177.d(29): Error: template instance `test15177.RunApiTest!()` error instantiating\n+---\n+*/\n+\n+import users = imports.test15117a;\n+\n+void RunApiTest(T...)()\n+{\n+    foreach (name; __traits(allMembers, users))\n+    {\n+        // 3. list the name of TyepInfoStructDeclaration,\n+        //    but it's just internal symbol and invisible.\n+        mixin(\"alias func = users . \" ~ name ~ \";\");\n+    }\n+}\n+\n+void main()\n+{\n+    // 1. run semantic3 of users.test_usr_1\n+    users.test_usr_1();\n+\n+    RunApiTest!();\n+}"}, {"sha": "474076fd5e44071411897cce2a6711a769fdda03", "filename": "gcc/testsuite/gdc.test/fail_compilation/test15785.d", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest15785.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest15785.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest15785.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -2,12 +2,11 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/test15785.d(17): Deprecation: imports.test15785.Base.foo is not visible from module test15785\n-fail_compilation/test15785.d(17): Error: class test15785.Derived member `foo` is not accessible\n-fail_compilation/test15785.d(18): Deprecation: imports.test15785.Base.bar is not visible from module test15785\n-fail_compilation/test15785.d(18): Error: class test15785.Derived member `bar` is not accessible\n+fail_compilation/test15785.d(16): Error: no property `foo` for type `imports.test15785.Base`, did you mean `imports.test15785.Base.foo`?\n+fail_compilation/test15785.d(17): Error: undefined identifier `bar`\n ---\n */\n+\n import imports.test15785;\n \n class Derived : Base"}, {"sha": "e09b4bfbc7c3b0d909c3e338c3c2f8162842c7e9", "filename": "gcc/testsuite/gdc.test/fail_compilation/test15785b.d", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest15785b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest15785b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest15785b.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -1,11 +1,11 @@\n-// REQUIRED_ARGS: -de\n+// REQUIRED_ARGS:\n // PERMUTE_ARGS:\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/test15785b.d(15): Deprecation: imports.test15785.Base.T is not visible from module test15785b\n-fail_compilation/test15785b.d(16): Deprecation: imports.test15785.Base.T is not visible from module test15785b\n-fail_compilation/test15785b.d(17): Deprecation: imports.test15785.IBase2.T is not visible from module test15785b\n+fail_compilation/test15785b.d(15): Error: `imports.test15785.Base.T` is not visible from module `test15785b`\n+fail_compilation/test15785b.d(16): Error: `imports.test15785.Base.T` is not visible from module `test15785b`\n+fail_compilation/test15785b.d(17): Error: `imports.test15785.IBase2.T` is not visible from module `test15785b`\n ---\n */\n import imports.test15785;"}, {"sha": "aa22c10b76fd9879b01d5e9d7b35448eba77c72a", "filename": "gcc/testsuite/gdc.test/fail_compilation/test15897.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest15897.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest15897.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest15897.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -2,7 +2,7 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/test15897.d(18): Deprecation: test15897.Animal.create is not visible from class Cat\n+fail_compilation/test15897.d(18): Error: no property `create` for type `imports.test15897.Cat`\n ---\n */\n module test15897;"}, {"sha": "9359859e6fea93f386476d55c73e5d33c8a26c3e", "filename": "gcc/testsuite/gdc.test/fail_compilation/test15925.d", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest15925.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest15925.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest15925.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -0,0 +1,19 @@\n+/* REQUIRED_ARGS:\n+PERMUTE_ARGS:\n+TEST_OUTPUT:\n+---\n+fail_compilation/test15925.d(18): Error: undefined identifier `X`\n+fail_compilation/test15925.d(18):        while evaluating: `static assert(X == 1)`\n+---\n+*/\n+\n+mixin template Import()\n+{\n+    import imports.imp15925;\n+}\n+\n+class Foo\n+{\n+    mixin Import!();\n+    static assert(X == 1);\n+}"}, {"sha": "0f22fe7c5d3114a47dc20354188efc951f14ad40", "filename": "gcc/testsuite/gdc.test/fail_compilation/test21353.d", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest21353.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest21353.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest21353.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -0,0 +1,26 @@\n+/*\n+EXTRA_FILES: imports/imp21353.d\n+TEST_OUTPUT:\n+---\n+fail_compilation/test21353.d(19): Error: no property `A` for type `imports.imp21353.B`\n+fail_compilation/test21353.d(20): Error: no property `A` for type `imports.imp21353.B`\n+fail_compilation/test21353.d(21): Error: no property `A` for type `imports.imp21353.B`\n+fail_compilation/test21353.d(23): Error: undefined identifier `P` in module `imports.imp21353`\n+fail_compilation/test21353.d(24): Error: undefined identifier `P` in module `imports.imp21353`\n+---\n+*/\n+\n+// https://issues.dlang.org/show_bug.cgi?id=21353\n+\n+import imports.imp21353;\n+\n+void main()\n+{\n+    B.A;\n+    with (B) { A(0); }\n+    with (B()) { A(0); } // fixed\n+\n+    imports.imp21353.P();\n+    with (imports.imp21353) { P(); } // fixed\n+}\n+"}, {"sha": "eb3f07d378a2f7d36e8a962c03e464ac3714bebd", "filename": "gcc/testsuite/gdc.test/fail_compilation/test314.d", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest314.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928e96bbe98bafff18f11a7351cf89592967b061/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest314.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest314.d?ref=928e96bbe98bafff18f11a7351cf89592967b061", "patch": "@@ -1,11 +1,11 @@\n /*\n-REQUIRED_ARGS: -de\n+REQUIRED_ARGS:\n TEST_OUTPUT:\n ---\n-fail_compilation/test314.d(19): Deprecation: imports.a314.renamed is not visible from module test314\n-fail_compilation/test314.d(20): Deprecation: imports.a314.bug is not visible from module test314\n-fail_compilation/test314.d(22): Deprecation: imports.b314.renamedpkg is not visible from module test314\n-fail_compilation/test314.d(23): Deprecation: imports.b314.bugpkg is not visible from module test314\n+fail_compilation/test314.d(19): Error: undefined identifier `renamed`\n+fail_compilation/test314.d(20): Error: undefined identifier `bug`\n+fail_compilation/test314.d(22): Error: undefined identifier `renamedpkg`\n+fail_compilation/test314.d(23): Error: undefined identifier `bugpkg`\n ---\n */\n "}]}