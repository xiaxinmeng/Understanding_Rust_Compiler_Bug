{"sha": "87fce1923fcc8d6ef508500475c149082dc9d338", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdmY2UxOTIzZmNjOGQ2ZWY1MDg1MDA0NzVjMTQ5MDgyZGM5ZDMzOA==", "commit": {"author": {"name": "Mike Crowe", "email": "mac@mcrowe.com", "date": "2020-09-11T13:25:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-09-11T13:28:24Z"}, "message": "libstdc++: Use std::chrono::steady_clock as atomic_futex reference clock\n\nThe user-visible effect of this change is that std::future::wait_for now\nuses std::chrono::steady_clock to determine the timeout.  This makes it\nimmune to changes made to the system clock.  It also means that anyone\nusing their own clock types with std::future::wait_until will have the\ntimeout converted to std::chrono::steady_clock rather than\nstd::chrono::system_clock.\n\nNow that use of both std::chrono::steady_clock and\nstd::chrono::system_clock are correctly supported for the wait timeout, I\nbelieve that std::chrono::steady_clock is a better choice for the reference\nclock that all other clocks are converted to since it is guaranteed to\nadvance steadily.  The previous behaviour of converting to\nstd::chrono::system_clock risks timeouts changing dramatically when the\nsystem clock is changed.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/atomic_futex.h (__atomic_futex_unsigned): Change\n\t__clock_t typedef to use steady_clock so that unknown clocks are\n\tsynced to it rather than system_clock. Change existing __clock_t\n\toverloads of _M_load_and_text_until_impl and\n\t_M_load_when_equal_until to use system_clock explicitly. Remove\n\tcomment about DR 887 since these changes address that problem as\n\tbest as we currently able.", "tree": {"sha": "be8cbd9b44ee5bf688a63c6a5a1895922abbc62f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be8cbd9b44ee5bf688a63c6a5a1895922abbc62f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87fce1923fcc8d6ef508500475c149082dc9d338", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87fce1923fcc8d6ef508500475c149082dc9d338", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87fce1923fcc8d6ef508500475c149082dc9d338", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87fce1923fcc8d6ef508500475c149082dc9d338/comments", "author": {"login": "mikecrowe", "id": 93615, "node_id": "MDQ6VXNlcjkzNjE1", "avatar_url": "https://avatars.githubusercontent.com/u/93615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikecrowe", "html_url": "https://github.com/mikecrowe", "followers_url": "https://api.github.com/users/mikecrowe/followers", "following_url": "https://api.github.com/users/mikecrowe/following{/other_user}", "gists_url": "https://api.github.com/users/mikecrowe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikecrowe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikecrowe/subscriptions", "organizations_url": "https://api.github.com/users/mikecrowe/orgs", "repos_url": "https://api.github.com/users/mikecrowe/repos", "events_url": "https://api.github.com/users/mikecrowe/events{/privacy}", "received_events_url": "https://api.github.com/users/mikecrowe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01d412ef36f56c6961858f4d3d395d000e3f1c06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01d412ef36f56c6961858f4d3d395d000e3f1c06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01d412ef36f56c6961858f4d3d395d000e3f1c06"}], "stats": {"total": 7, "additions": 3, "deletions": 4}, "files": [{"sha": "4375129f34d2a6eacdea68e855f0b7074350f366", "filename": "libstdc++-v3/include/bits/atomic_futex.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87fce1923fcc8d6ef508500475c149082dc9d338/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_futex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87fce1923fcc8d6ef508500475c149082dc9d338/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_futex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_futex.h?ref=87fce1923fcc8d6ef508500475c149082dc9d338", "patch": "@@ -71,7 +71,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template <unsigned _Waiter_bit = 0x80000000>\n   class __atomic_futex_unsigned : __atomic_futex_unsigned_base\n   {\n-    typedef chrono::system_clock __clock_t;\n+    typedef chrono::steady_clock __clock_t;\n \n     // This must be lock-free and at offset 0.\n     atomic<unsigned> _M_data;\n@@ -169,7 +169,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     unsigned\n     _M_load_and_test_until_impl(unsigned __assumed, unsigned __operand,\n \tbool __equal, memory_order __mo,\n-\tconst chrono::time_point<__clock_t, _Dur>& __atime)\n+\tconst chrono::time_point<std::chrono::system_clock, _Dur>& __atime)\n     {\n       auto __s = chrono::time_point_cast<chrono::seconds>(__atime);\n       auto __ns = chrono::duration_cast<chrono::nanoseconds>(__atime - __s);\n@@ -229,7 +229,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_load_when_equal_until(unsigned __val, memory_order __mo,\n \t  const chrono::time_point<_Clock, _Duration>& __atime)\n       {\n-\t// DR 887 - Sync unknown clock to known clock.\n \tconst typename _Clock::time_point __c_entry = _Clock::now();\n \tconst __clock_t::time_point __s_entry = __clock_t::now();\n \tconst auto __delta = __atime - __c_entry;\n@@ -241,7 +240,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<typename _Duration>\n     _GLIBCXX_ALWAYS_INLINE bool\n     _M_load_when_equal_until(unsigned __val, memory_order __mo,\n-\tconst chrono::time_point<__clock_t, _Duration>& __atime)\n+\tconst chrono::time_point<std::chrono::system_clock, _Duration>& __atime)\n     {\n       unsigned __i = _M_load(__mo);\n       if ((__i & ~_Waiter_bit) == __val)"}]}