{"sha": "400a4f6ca21e539aecb66f570d769f4579a6482c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAwYTRmNmNhMjFlNTM5YWVjYjY2ZjU3MGQ3NjlmNDU3OWE2NDgyYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-03-21T11:52:50Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-03-21T11:52:50Z"}, "message": "re PR tree-optimization/60577 (inefficient FDO instrumentation code)\n\n2014-03-21  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/60577\n\t* tree-core.h (struct tree_base): Document nothrow_flag use\n\tin VAR_DECL_NONALIASED.\n\t* tree.h (VAR_DECL_NONALIASED): New.\n\t(may_be_aliased): Adjust.\n\t* coverage.c (build_var): Set VAR_DECL_NONALIASED.\n\n\t* gcc.dg/tree-ssa/ssa-lim-11.c: New testcase.\n\nFrom-SVN: r208746", "tree": {"sha": "f0a8757132cc149da091da8ed1fe7d71537f8744", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0a8757132cc149da091da8ed1fe7d71537f8744"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/400a4f6ca21e539aecb66f570d769f4579a6482c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/400a4f6ca21e539aecb66f570d769f4579a6482c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/400a4f6ca21e539aecb66f570d769f4579a6482c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/400a4f6ca21e539aecb66f570d769f4579a6482c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "beeda1d9c4518d0d6ef02db935720c9628b82b6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beeda1d9c4518d0d6ef02db935720c9628b82b6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beeda1d9c4518d0d6ef02db935720c9628b82b6e"}], "stats": {"total": 57, "additions": 53, "deletions": 4}, "files": [{"sha": "be0c8c484474c761502eb40838825a6f533b0801", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400a4f6ca21e539aecb66f570d769f4579a6482c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400a4f6ca21e539aecb66f570d769f4579a6482c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=400a4f6ca21e539aecb66f570d769f4579a6482c", "patch": "@@ -1,3 +1,12 @@\n+2014-03-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/60577\n+\t* tree-core.h (struct tree_base): Document nothrow_flag use\n+\tin VAR_DECL_NONALIASED.\n+\t* tree.h (VAR_DECL_NONALIASED): New.\n+\t(may_be_aliased): Adjust.\n+\t* coverage.c (build_var): Set VAR_DECL_NONALIASED.\n+\n 2014-03-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* expr.c (expand_expr_real_1): Remove outdated comment."}, {"sha": "4c06fa47908cec214c30b3acc4ee65e230dab787", "filename": "gcc/coverage.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400a4f6ca21e539aecb66f570d769f4579a6482c/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400a4f6ca21e539aecb66f570d769f4579a6482c/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=400a4f6ca21e539aecb66f570d769f4579a6482c", "patch": "@@ -721,6 +721,7 @@ build_var (tree fn_decl, tree type, int counter)\n   DECL_NAME (var) = get_identifier (buf);\n   TREE_STATIC (var) = 1;\n   TREE_ADDRESSABLE (var) = 1;\n+  DECL_NONALIASED (var) = 1;\n   DECL_ALIGN (var) = TYPE_ALIGN (type);\n \n   return var;"}, {"sha": "aac3dc95c67b03931d933f0e56040339b98408d5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400a4f6ca21e539aecb66f570d769f4579a6482c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400a4f6ca21e539aecb66f570d769f4579a6482c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=400a4f6ca21e539aecb66f570d769f4579a6482c", "patch": "@@ -1,3 +1,8 @@\n+2014-03-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/60577\n+\t* gcc.dg/tree-ssa/ssa-lim-11.c: New testcase.\n+\n 2014-03-21  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/60599"}, {"sha": "ea91a612376a6b6d3254ec451b148567476e8b5a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-lim-11.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400a4f6ca21e539aecb66f570d769f4579a6482c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400a4f6ca21e539aecb66f570d769f4579a6482c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-11.c?ref=400a4f6ca21e539aecb66f570d769f4579a6482c", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fprofile-arcs -fdump-tree-lim1-details\" } */\n+\n+struct thread_param\n+{\n+  long* buf;\n+  long iterations;\n+  long accesses;\n+} param;\n+\n+void access_buf(struct thread_param* p)\n+{\n+  long i,j;\n+  long iterations = p->iterations;\n+  long accesses = p->accesses;\n+  for (i=0; i<iterations; i++)\n+    {\n+      long* pbuf = p->buf;\n+      for (j=0; j<accesses; j++)\n+\tpbuf[j] += 1;\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Executing store motion of __gcov0.access_buf\\\\\\[\\[01\\]\\\\\\] from loop 1\" 2 \"lim1\" } } */\n+/* { dg-final { cleanup-tree-dump \"lim1\" } } */"}, {"sha": "1719c7e664e704c97167fe202b878139ecbe7655", "filename": "gcc/tree-core.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400a4f6ca21e539aecb66f570d769f4579a6482c/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400a4f6ca21e539aecb66f570d769f4579a6482c/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=400a4f6ca21e539aecb66f570d769f4579a6482c", "patch": "@@ -987,6 +987,9 @@ struct GTY(()) tree_base {\n        SSA_NAME_IN_FREELIST in\n           SSA_NAME\n \n+       VAR_DECL_NONALIASED in\n+\t  VAR_DECL\n+\n    deprecated_flag:\n \n        TREE_DEPRECATED in"}, {"sha": "9fbc5c4ec2c3bf8adcfbc04a45ae4310af916293", "filename": "gcc/tree.h", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400a4f6ca21e539aecb66f570d769f4579a6482c/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400a4f6ca21e539aecb66f570d769f4579a6482c/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=400a4f6ca21e539aecb66f570d769f4579a6482c", "patch": "@@ -2441,6 +2441,10 @@ extern void decl_fini_priority_insert (tree, priority_type);\n #define DECL_NONLOCAL_FRAME(NODE)  \\\n   (VAR_DECL_CHECK (NODE)->base.default_def_flag)\n \n+/* In a VAR_DECL, nonzero if this variable is not aliased by any pointer.  */\n+#define DECL_NONALIASED(NODE) \\\n+  (VAR_DECL_CHECK (NODE)->base.nothrow_flag)\n+\n /* This field is used to reference anything in decl.result and is meant only\n    for use by the garbage collector.  */\n #define DECL_RESULT_FLD(NODE) \\\n@@ -4462,12 +4466,14 @@ static inline bool\n may_be_aliased (const_tree var)\n {\n   return (TREE_CODE (var) != CONST_DECL\n-\t  && !((TREE_STATIC (var) || TREE_PUBLIC (var) || DECL_EXTERNAL (var))\n-\t       && TREE_READONLY (var)\n-\t       && !TYPE_NEEDS_CONSTRUCTING (TREE_TYPE (var)))\n \t  && (TREE_PUBLIC (var)\n \t      || DECL_EXTERNAL (var)\n-\t      || TREE_ADDRESSABLE (var)));\n+\t      || TREE_ADDRESSABLE (var))\n+\t  && !((TREE_STATIC (var) || TREE_PUBLIC (var) || DECL_EXTERNAL (var))\n+\t       && ((TREE_READONLY (var)\n+\t\t    && !TYPE_NEEDS_CONSTRUCTING (TREE_TYPE (var)))\n+\t\t   || (TREE_CODE (var) == VAR_DECL\n+\t\t       && DECL_NONALIASED (var)))));\n }\n \n /* Return pointer to optimization flags of FNDECL.  */"}]}