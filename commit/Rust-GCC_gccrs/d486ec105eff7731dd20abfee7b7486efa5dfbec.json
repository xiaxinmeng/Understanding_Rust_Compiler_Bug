{"sha": "d486ec105eff7731dd20abfee7b7486efa5dfbec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ4NmVjMTA1ZWZmNzczMWRkMjBhYmZlZTdiNzQ4NmVmYTVkZmJlYw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-01-16T17:26:08Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-01-16T17:26:08Z"}, "message": "Add missing testcase accidentally omitted from r219681\n\nFrom-SVN: r219757", "tree": {"sha": "cd9b2fee6cc9d7ab3e658cf6bcd6d872d773e54e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd9b2fee6cc9d7ab3e658cf6bcd6d872d773e54e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d486ec105eff7731dd20abfee7b7486efa5dfbec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d486ec105eff7731dd20abfee7b7486efa5dfbec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d486ec105eff7731dd20abfee7b7486efa5dfbec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d486ec105eff7731dd20abfee7b7486efa5dfbec/comments", "author": null, "committer": null, "parents": [{"sha": "0dc240a4abb5dce7ebfa8f19fbf478f02cc87354", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dc240a4abb5dce7ebfa8f19fbf478f02cc87354", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dc240a4abb5dce7ebfa8f19fbf478f02cc87354"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "c86d3346dec8a86aa35cc94378d8bb001d0b6214", "filename": "gcc/testsuite/jit.dg/test-error-mismatching-types-in-assignment-op.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d486ec105eff7731dd20abfee7b7486efa5dfbec/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-mismatching-types-in-assignment-op.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d486ec105eff7731dd20abfee7b7486efa5dfbec/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-mismatching-types-in-assignment-op.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-mismatching-types-in-assignment-op.c?ref=d486ec105eff7731dd20abfee7b7486efa5dfbec", "patch": "@@ -0,0 +1,64 @@\n+#include <libgccjit.h>\n+#include \"harness.h\"\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  /* Try to inject the equivalent of:\n+        static int idx;\n+        void test_func (void)\n+\t{\n+\t  idx += (unsigned char)1; // mismatching type\n+\t}\n+     and verify that we don't get an ICE inside gimplification\n+     due to the type mismatch.  */\n+  gcc_jit_type *void_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_VOID);\n+  gcc_jit_type *int_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n+  gcc_jit_type *unsigned_char_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_UNSIGNED_CHAR);\n+  gcc_jit_function *test_func =\n+    gcc_jit_context_new_function (ctxt, /* gcc_jit_context *ctxt */\n+                                  NULL, /* gcc_jit_location *loc */\n+                                  GCC_JIT_FUNCTION_EXPORTED, /* enum gcc_jit_function_kind kind */\n+                                  void_type, /* gcc_jit_type *return_type */\n+                                  \"test_func\", /* const char *name */\n+                                  0, /* int num_params */\n+                                  NULL, /* gcc_jit_param **params */\n+                                  0); /* int is_variadic */\n+  gcc_jit_block *block =\n+    gcc_jit_function_new_block (test_func, \"initial\");\n+\n+  gcc_jit_rvalue *unsigned_char_1 =\n+    gcc_jit_context_new_rvalue_from_int (ctxt, /* gcc_jit_context *ctxt */\n+                                         unsigned_char_type, /* gcc_jit_type *numeric_type */\n+                                         1); /* int value */\n+  gcc_jit_lvalue *idx =\n+    gcc_jit_context_new_global (ctxt, /* gcc_jit_context *ctxt */\n+                                NULL, /* gcc_jit_location *loc */\n+                                GCC_JIT_GLOBAL_INTERNAL, /* enum gcc_jit_global_kind kind */\n+                                int_type, /* gcc_jit_type *type */\n+                                \"idx\"); /* const char *name */\n+\n+  gcc_jit_block_add_assignment_op (block, /*gcc_jit_block *block */\n+                                   NULL, /* gcc_jit_location *loc */\n+                                   idx, /* gcc_jit_lvalue *lvalue */\n+                                   GCC_JIT_BINARY_OP_PLUS, /* enum gcc_jit_binary_op op */\n+                                   unsigned_char_1); /* gcc_jit_rvalue *rvalue */\n+  gcc_jit_block_end_with_void_return (block, /*gcc_jit_block *block */\n+\t\t\t\t      NULL);\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  CHECK_VALUE (result, NULL);\n+\n+  /* Verify that the correct error message was emitted.  */\n+  CHECK_STRING_VALUE (gcc_jit_context_get_first_error (ctxt),\n+\t\t      \"gcc_jit_block_add_assignment_op:\"\n+\t\t      \" mismatching types:\"\n+\t\t      \" assignment to idx (type: int)\"\n+\t\t      \" involving (unsigned char)1 (type: unsigned char)\")\n+}"}]}