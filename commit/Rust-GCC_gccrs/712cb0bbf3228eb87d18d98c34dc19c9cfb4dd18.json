{"sha": "712cb0bbf3228eb87d18d98c34dc19c9cfb4dd18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEyY2IwYmJmMzIyOGViODdkMThkOThjMzRkYzE5YzljZmI0ZGQxOA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-07-07T16:25:22Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-07-07T16:25:22Z"}, "message": "Add empty loop exit block in transform_to_exit_first_loop_alt\n\n2015-07-07  Tom de Vries  <tom@codesourcery.com>\n\n\tPR tree-optimization/66642\n\t* tree-parloops.c (transform_to_exit_first_loop_alt): Update function\n\theader comment.  Rename split_edge variable to edge_at_split.  Split\n\texit edge to create new loop exit bb.  Insert loop exit phis in new loop\n\texit bb.\n\n\t* testsuite/libgomp.c/parloops-exit-first-loop-alt-3.c (main): Test low\n\titeration count case.\n\t* testsuite/libgomp.c/parloops-exit-first-loop-alt.c (init): New\n\tfunction, factor out of ...\n\t(main): ... here.  Test low iteration count case.\n\nFrom-SVN: r225521", "tree": {"sha": "6d1a0ad67ce5b56c22276557f6944f258bcb30d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d1a0ad67ce5b56c22276557f6944f258bcb30d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/712cb0bbf3228eb87d18d98c34dc19c9cfb4dd18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/712cb0bbf3228eb87d18d98c34dc19c9cfb4dd18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/712cb0bbf3228eb87d18d98c34dc19c9cfb4dd18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/712cb0bbf3228eb87d18d98c34dc19c9cfb4dd18/comments", "author": null, "committer": null, "parents": [{"sha": "338392ed0fd9ca466905860e931b7a480179bce4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/338392ed0fd9ca466905860e931b7a480179bce4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/338392ed0fd9ca466905860e931b7a480179bce4"}], "stats": {"total": 95, "additions": 81, "deletions": 14}, "files": [{"sha": "28022d7f54d56987098dc9d90dce894baa153c55", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/712cb0bbf3228eb87d18d98c34dc19c9cfb4dd18/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/712cb0bbf3228eb87d18d98c34dc19c9cfb4dd18/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=712cb0bbf3228eb87d18d98c34dc19c9cfb4dd18", "patch": "@@ -1,3 +1,11 @@\n+2015-07-07  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/66642\n+\t* tree-parloops.c (transform_to_exit_first_loop_alt): Update function\n+\theader comment.  Rename split_edge variable to edge_at_split.  Split\n+\texit edge to create new loop exit bb.  Insert loop exit phis in new loop\n+\texit bb.\n+\n 2015-07-07  Tom de Vries  <tom@codesourcery.com>\n \n \t* tree-cfg.c (get_virtual_phi): New function."}, {"sha": "aecee69c4739aff299de672737b2235efda16f47", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 33, "deletions": 12, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/712cb0bbf3228eb87d18d98c34dc19c9cfb4dd18/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/712cb0bbf3228eb87d18d98c34dc19c9cfb4dd18/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=712cb0bbf3228eb87d18d98c34dc19c9cfb4dd18", "patch": "@@ -1516,7 +1516,7 @@ replace_uses_in_bb_by (tree name, tree val, basic_block bb)\n      goto <bb header>\n \n      <bb exit>:\n-     sum_z = PHI <sum_b (cond[1])>\n+     sum_z = PHI <sum_b (cond[1]), ...>\n \n      [1] Where <bb cond> is single_pred (bb latch); In the simplest case,\n \t that's <bb header>.\n@@ -1543,14 +1543,17 @@ replace_uses_in_bb_by (tree name, tree val, basic_block bb)\n      if (ivtmp_c < n + 1)\n        goto <bb header>;\n      else\n-       goto <bb exit>;\n+       goto <bb newexit>;\n \n      <bb latch>:\n      ivtmp_b = ivtmp_a + 1;\n      goto <bb newheader>\n \n+     <bb newexit>:\n+     sum_y = PHI <sum_c (newheader)>\n+\n      <bb exit>:\n-     sum_z = PHI <sum_c (newheader)>\n+     sum_z = PHI <sum_y (newexit), ...>\n \n \n    In unified diff format:\n@@ -1587,9 +1590,12 @@ replace_uses_in_bb_by (tree name, tree val, basic_block bb)\n -     goto <bb header>\n +     goto <bb newheader>\n \n++    <bb newexit>:\n++    sum_y = PHI <sum_c (newheader)>\n+\n       <bb exit>:\n--     sum_z = PHI <sum_b (cond[1])>\n-+     sum_z = PHI <sum_c (newheader)>\n+-     sum_z = PHI <sum_b (cond[1]), ...>\n++     sum_z = PHI <sum_y (newexit), ...>\n \n    Note: the example does not show any virtual phis, but these are handled more\n    or less as reductions.\n@@ -1620,7 +1626,7 @@ transform_to_exit_first_loop_alt (struct loop *loop,\n \n   /* Create the new_header block.  */\n   basic_block new_header = split_block_before_cond_jump (exit->src);\n-  edge split_edge = single_pred_edge (new_header);\n+  edge edge_at_split = single_pred_edge (new_header);\n \n   /* Redirect entry edge to new_header.  */\n   edge entry = loop_preheader_edge (loop);\n@@ -1637,9 +1643,9 @@ transform_to_exit_first_loop_alt (struct loop *loop,\n   e = redirect_edge_and_branch (post_cond_edge, header);\n   gcc_assert (e == post_cond_edge);\n \n-  /* Redirect split_edge to latch.  */\n-  e = redirect_edge_and_branch (split_edge, latch);\n-  gcc_assert (e == split_edge);\n+  /* Redirect edge_at_split to latch.  */\n+  e = redirect_edge_and_branch (edge_at_split, latch);\n+  gcc_assert (e == edge_at_split);\n \n   /* Set the new loop bound.  */\n   gimple_cond_set_rhs (cond_stmt, bound);\n@@ -1691,21 +1697,36 @@ transform_to_exit_first_loop_alt (struct loop *loop,\n   /* Set the latch arguments of the new phis to ivtmp/sum_b.  */\n   flush_pending_stmts (post_inc_edge);\n \n-  /* Register the reduction exit phis.  */\n+  /* Create a new empty exit block, inbetween the new loop header and the old\n+     exit block.  The function separate_decls_in_region needs this block to\n+     insert code that is active on loop exit, but not any other path.  */\n+  basic_block new_exit_block = split_edge (exit);\n+\n+  /* Insert and register the reduction exit phis.  */\n   for (gphi_iterator gsi = gsi_start_phis (exit_block);\n        !gsi_end_p (gsi);\n        gsi_next (&gsi))\n     {\n       gphi *phi = gsi.phi ();\n       tree res_z = PHI_RESULT (phi);\n+\n+      /* Now that we have a new exit block, duplicate the phi of the old exit\n+\t block in the new exit block to preserve loop-closed ssa.  */\n+      edge succ_new_exit_block = single_succ_edge (new_exit_block);\n+      edge pred_new_exit_block = single_pred_edge (new_exit_block);\n+      tree res_y = copy_ssa_name (res_z, phi);\n+      gphi *nphi = create_phi_node (res_y, new_exit_block);\n+      tree res_c = PHI_ARG_DEF_FROM_EDGE (phi, succ_new_exit_block);\n+      add_phi_arg (nphi, res_c, pred_new_exit_block, UNKNOWN_LOCATION);\n+      add_phi_arg (phi, res_y, succ_new_exit_block, UNKNOWN_LOCATION);\n+\n       if (virtual_operand_p (res_z))\n \tcontinue;\n \n-      tree res_c = PHI_ARG_DEF_FROM_EDGE (phi, exit);\n       gimple reduc_phi = SSA_NAME_DEF_STMT (res_c);\n       struct reduction_info *red = reduction_phi (reduction_list, reduc_phi);\n       if (red != NULL)\n-\tred->keep_res = phi;\n+\tred->keep_res = nphi;\n     }\n \n   /* We're going to cancel the loop at the end of gen_parallel_loop, but until"}, {"sha": "cac45ab3e003539665896db42c453386f2aee903", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/712cb0bbf3228eb87d18d98c34dc19c9cfb4dd18/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/712cb0bbf3228eb87d18d98c34dc19c9cfb4dd18/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=712cb0bbf3228eb87d18d98c34dc19c9cfb4dd18", "patch": "@@ -1,3 +1,12 @@\n+2015-07-07  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/66642\n+\t* testsuite/libgomp.c/parloops-exit-first-loop-alt-3.c (main): Test low\n+\titeration count case.\n+\t* testsuite/libgomp.c/parloops-exit-first-loop-alt.c (init): New\n+\tfunction, factor out of ...\n+\t(main): ... here.  Test low iteration count case.\n+\n 2015-07-06  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n \n \t* libgomp.h (gomp_thread_pool): Comment last_team field."}, {"sha": "958e554649c1e133635c64a4c669a279a517b3da", "filename": "libgomp/testsuite/libgomp.c/parloops-exit-first-loop-alt-3.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/712cb0bbf3228eb87d18d98c34dc19c9cfb4dd18/libgomp%2Ftestsuite%2Flibgomp.c%2Fparloops-exit-first-loop-alt-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/712cb0bbf3228eb87d18d98c34dc19c9cfb4dd18/libgomp%2Ftestsuite%2Flibgomp.c%2Fparloops-exit-first-loop-alt-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fparloops-exit-first-loop-alt-3.c?ref=712cb0bbf3228eb87d18d98c34dc19c9cfb4dd18", "patch": "@@ -36,5 +36,10 @@ main (void)\n   if (res != 11995)\n     abort ();\n \n+  /* Test low iteration count case.  */\n+  res = f (10);\n+  if (res != 25)\n+    abort ();\n+\n   return 0;\n }"}, {"sha": "557764d329370e07e587e41e1981a21d3b65fefd", "filename": "libgomp/testsuite/libgomp.c/parloops-exit-first-loop-alt.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/712cb0bbf3228eb87d18d98c34dc19c9cfb4dd18/libgomp%2Ftestsuite%2Flibgomp.c%2Fparloops-exit-first-loop-alt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/712cb0bbf3228eb87d18d98c34dc19c9cfb4dd18/libgomp%2Ftestsuite%2Flibgomp.c%2Fparloops-exit-first-loop-alt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fparloops-exit-first-loop-alt.c?ref=712cb0bbf3228eb87d18d98c34dc19c9cfb4dd18", "patch": "@@ -22,8 +22,8 @@ f (unsigned int n, unsigned int *__restrict__ a, unsigned int *__restrict__ b,\n     c[i] = a[i] + b[i];\n }\n \n-int\n-main (void)\n+static void __attribute__((noclone,noinline))\n+init (void)\n {\n   int i, j;\n \n@@ -36,6 +36,14 @@ main (void)\n \tb[k] = (k * 3) % 7;\n \tc[k] = k * 2;\n       }\n+}\n+\n+int\n+main (void)\n+{\n+  int i;\n+\n+  init ();\n \n   f (N, a, b, c);\n \n@@ -47,5 +55,21 @@ main (void)\n \tabort ();\n     }\n \n+  /* Test low iteration count case.  */\n+\n+  init ();\n+\n+  f (10);\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      unsigned int actual = c[i];\n+      unsigned int expected = (i < 10\n+\t\t\t       ? i + ((i * 3) % 7)\n+\t\t\t       : i * 2);\n+      if (actual != expected)\n+\tabort ();\n+    }\n+\n   return 0;\n }"}]}