{"sha": "0af377c15a40ae329f6019155d07857df452f42b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFmMzc3YzE1YTQwYWUzMjlmNjAxOTE1NWQwNzg1N2RmNDUyZjQyYg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-10-12T21:53:21Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-10-12T21:53:21Z"}, "message": "re PR tree-optimization/82493 (UBSAN in gcc/sbitmap.c:368:28: runtime error: shift exponent 64 is too large for 64-bit type 'long unsigned int')\n\n\tPR tree-optimization/82493\n\t* sbitmap.c (bitmap_bit_in_range_p): Fix the implementation.\n\t(test_range_functions): New function.\n\t(sbitmap_c_tests): Likewise.\n\t* selftest-run-tests.c (selftest::run_tests): Run new tests.\n\t* selftest.h (sbitmap_c_tests): New function.\n\n\t* tree-ssa-dse.c (live_bytes_read): Fix thinko.\n\nFrom-SVN: r253699", "tree": {"sha": "693e21e454052f1912690ef8c070dde06b757ea4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/693e21e454052f1912690ef8c070dde06b757ea4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0af377c15a40ae329f6019155d07857df452f42b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0af377c15a40ae329f6019155d07857df452f42b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0af377c15a40ae329f6019155d07857df452f42b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0af377c15a40ae329f6019155d07857df452f42b/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c64959bdf1388d332159cb5d40afddc30d8c61d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c64959bdf1388d332159cb5d40afddc30d8c61d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c64959bdf1388d332159cb5d40afddc30d8c61d2"}], "stats": {"total": 133, "additions": 115, "deletions": 18}, "files": [{"sha": "b5981edddc4b52dc116e4749a7fdbdc7ac66c340", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0af377c15a40ae329f6019155d07857df452f42b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0af377c15a40ae329f6019155d07857df452f42b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0af377c15a40ae329f6019155d07857df452f42b", "patch": "@@ -1,3 +1,14 @@\n+2017-10-12  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/82493\n+\t* sbitmap.c (bitmap_bit_in_range_p): Fix the implementation.\n+\t(test_range_functions): New function.\n+\t(sbitmap_c_tests): Likewise.\n+\t* selftest-run-tests.c (selftest::run_tests): Run new tests.\n+\t* selftest.h (sbitmap_c_tests): New function.\n+\n+\t* tree-ssa-dse.c (live_bytes_read): Fix thinko.\n+\n 2017-10-12  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* config/rs6000/amo.h: Fix spacing issue."}, {"sha": "baef4d05f0d33ada852d1f8d9cc9bcea130dd3ca", "filename": "gcc/sbitmap.c", "status": "modified", "additions": 101, "deletions": 17, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0af377c15a40ae329f6019155d07857df452f42b/gcc%2Fsbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0af377c15a40ae329f6019155d07857df452f42b/gcc%2Fsbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.c?ref=0af377c15a40ae329f6019155d07857df452f42b", "patch": "@@ -21,6 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"sbitmap.h\"\n+#include \"selftest.h\"\n \n typedef SBITMAP_ELT_TYPE *sbitmap_ptr;\n typedef const SBITMAP_ELT_TYPE *const_sbitmap_ptr;\n@@ -322,29 +323,22 @@ bitmap_set_range (sbitmap bmap, unsigned int start, unsigned int count)\n bool\n bitmap_bit_in_range_p (const_sbitmap bmap, unsigned int start, unsigned int end)\n {\n+  gcc_checking_assert (start <= end);\n   unsigned int start_word = start / SBITMAP_ELT_BITS;\n   unsigned int start_bitno = start % SBITMAP_ELT_BITS;\n \n-  /* Testing within a word, starting at the beginning of a word.  */\n-  if (start_bitno == 0 && (end - start) < SBITMAP_ELT_BITS)\n-    {\n-      SBITMAP_ELT_TYPE mask = ((SBITMAP_ELT_TYPE)1 << (end - start)) - 1;\n-      return (bmap->elms[start_word] & mask) != 0;\n-    }\n-\n   unsigned int end_word = end / SBITMAP_ELT_BITS;\n   unsigned int end_bitno = end % SBITMAP_ELT_BITS;\n \n-  /* Testing starts somewhere in the middle of a word.  Test up to the\n-     end of the word or the end of the requested region, whichever comes\n-     first.  */\n+  /* Check beginning of first word if different from zero.  */\n   if (start_bitno != 0)\n     {\n-      unsigned int nbits = ((start_word == end_word)\n-\t\t\t    ? end_bitno - start_bitno\n-\t\t\t    : SBITMAP_ELT_BITS - start_bitno);\n-      SBITMAP_ELT_TYPE mask = ((SBITMAP_ELT_TYPE)1 << nbits) - 1;\n-      mask <<= start_bitno;\n+      SBITMAP_ELT_TYPE high_mask = ~(SBITMAP_ELT_TYPE)0;\n+      if (start_word == end_word && end_bitno + 1 < SBITMAP_ELT_BITS)\n+\thigh_mask = ((SBITMAP_ELT_TYPE)1 << (end_bitno + 1)) - 1;\n+\n+      SBITMAP_ELT_TYPE low_mask = ((SBITMAP_ELT_TYPE)1 << start_bitno) - 1;\n+      SBITMAP_ELT_TYPE mask = high_mask - low_mask;\n       if (bmap->elms[start_word] & mask)\n \treturn true;\n       start_word++;\n@@ -364,8 +358,9 @@ bitmap_bit_in_range_p (const_sbitmap bmap, unsigned int start, unsigned int end)\n     }\n \n   /* Now handle residuals in the last word.  */\n-  SBITMAP_ELT_TYPE mask\n-    = ((SBITMAP_ELT_TYPE)1 << (SBITMAP_ELT_BITS - end_bitno)) - 1;\n+  SBITMAP_ELT_TYPE mask = ~(SBITMAP_ELT_TYPE)0;\n+  if (end_bitno + 1 < SBITMAP_ELT_BITS)\n+    mask = ((SBITMAP_ELT_TYPE)1 << (end_bitno + 1)) - 1;\n   return (bmap->elms[start_word] & mask) != 0;\n }\n \n@@ -821,3 +816,92 @@ dump_bitmap_vector (FILE *file, const char *title, const char *subtitle,\n \n   fprintf (file, \"\\n\");\n }\n+\n+#if CHECKING_P\n+\n+namespace selftest {\n+\n+/* Selftests for sbitmaps.  */\n+\n+\n+/* Verify range functions for sbitmap.  */\n+\n+static void\n+test_range_functions ()\n+{\n+  sbitmap s = sbitmap_alloc (1024);\n+  bitmap_clear (s);\n+\n+  ASSERT_FALSE (bitmap_bit_in_range_p (s, 512, 1023));\n+  bitmap_set_bit (s, 100);\n+\n+  ASSERT_FALSE (bitmap_bit_in_range_p (s, 512, 1023));\n+  ASSERT_FALSE (bitmap_bit_in_range_p (s, 0, 99));\n+  ASSERT_FALSE (bitmap_bit_in_range_p (s, 101, 1023));\n+  ASSERT_TRUE (bitmap_bit_in_range_p (s, 1, 100));\n+  ASSERT_TRUE (bitmap_bit_in_range_p (s, 64, 100));\n+  ASSERT_TRUE (bitmap_bit_in_range_p (s, 100, 100));\n+  ASSERT_TRUE (bitmap_bit_p (s, 100));\n+\n+  s = sbitmap_alloc (64);\n+  bitmap_clear (s);\n+  bitmap_set_bit (s, 63);\n+  ASSERT_TRUE (bitmap_bit_in_range_p (s, 0, 63));\n+  ASSERT_TRUE (bitmap_bit_in_range_p (s, 1, 63));\n+  ASSERT_TRUE (bitmap_bit_in_range_p (s, 63, 63));\n+  ASSERT_TRUE (bitmap_bit_p (s, 63));\n+\n+  s = sbitmap_alloc (1024);\n+  bitmap_clear (s);\n+  bitmap_set_bit (s, 128);\n+  ASSERT_FALSE (bitmap_bit_in_range_p (s, 0, 127));\n+  ASSERT_FALSE (bitmap_bit_in_range_p (s, 129, 1023));\n+\n+  ASSERT_TRUE (bitmap_bit_in_range_p (s, 0, 128));\n+  ASSERT_TRUE (bitmap_bit_in_range_p (s, 1, 128));\n+  ASSERT_TRUE (bitmap_bit_in_range_p (s, 128, 255));\n+  ASSERT_TRUE (bitmap_bit_in_range_p (s, 128, 254));\n+  ASSERT_TRUE (bitmap_bit_p (s, 128));\n+\n+  bitmap_clear (s);\n+  bitmap_set_bit (s, 8);\n+  ASSERT_TRUE (bitmap_bit_in_range_p (s, 0, 8));\n+  ASSERT_TRUE (bitmap_bit_in_range_p (s, 0, 12));\n+  ASSERT_TRUE (bitmap_bit_in_range_p (s, 0, 63));\n+  ASSERT_TRUE (bitmap_bit_in_range_p (s, 0, 127));\n+  ASSERT_TRUE (bitmap_bit_in_range_p (s, 0, 512));\n+  ASSERT_TRUE (bitmap_bit_in_range_p (s, 8, 8));\n+  ASSERT_TRUE (bitmap_bit_p (s, 8));\n+\n+  bitmap_clear (s);\n+  ASSERT_FALSE (bitmap_bit_in_range_p (s, 0, 0));\n+  ASSERT_FALSE (bitmap_bit_in_range_p (s, 0, 8));\n+  ASSERT_FALSE (bitmap_bit_in_range_p (s, 0, 63));\n+  ASSERT_FALSE (bitmap_bit_in_range_p (s, 1, 63));\n+  ASSERT_FALSE (bitmap_bit_in_range_p (s, 0, 256));\n+\n+  bitmap_set_bit (s, 0);\n+  bitmap_set_bit (s, 16);\n+  bitmap_set_bit (s, 32);\n+  bitmap_set_bit (s, 48);\n+  bitmap_set_bit (s, 64);\n+  ASSERT_TRUE (bitmap_bit_in_range_p (s, 0, 0));\n+  ASSERT_TRUE (bitmap_bit_in_range_p (s, 1, 16));\n+  ASSERT_TRUE (bitmap_bit_in_range_p (s, 48, 63));\n+  ASSERT_TRUE (bitmap_bit_in_range_p (s, 64, 64));\n+  ASSERT_FALSE (bitmap_bit_in_range_p (s, 1, 15));\n+  ASSERT_FALSE (bitmap_bit_in_range_p (s, 17, 31));\n+  ASSERT_FALSE (bitmap_bit_in_range_p (s, 49, 63));\n+  ASSERT_FALSE (bitmap_bit_in_range_p (s, 65, 1023));\n+}\n+\n+/* Run all of the selftests within this file.  */\n+\n+void\n+sbitmap_c_tests ()\n+{\n+  test_range_functions ();\n+}\n+\n+} // namespace selftest\n+#endif /* CHECKING_P */"}, {"sha": "5c84f3a0737c3e7b30a79fcb170eac74efbb26af", "filename": "gcc/selftest-run-tests.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0af377c15a40ae329f6019155d07857df452f42b/gcc%2Fselftest-run-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0af377c15a40ae329f6019155d07857df452f42b/gcc%2Fselftest-run-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest-run-tests.c?ref=0af377c15a40ae329f6019155d07857df452f42b", "patch": "@@ -56,6 +56,7 @@ selftest::run_tests ()\n \n   /* Low-level data structures.  */\n   bitmap_c_tests ();\n+  sbitmap_c_tests ();\n   et_forest_c_tests ();\n   hash_map_tests_c_tests ();\n   hash_set_tests_c_tests ();"}, {"sha": "2e649a70b9e293a360a5418fde7c44b5c6e7c4c0", "filename": "gcc/selftest.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0af377c15a40ae329f6019155d07857df452f42b/gcc%2Fselftest.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0af377c15a40ae329f6019155d07857df452f42b/gcc%2Fselftest.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest.h?ref=0af377c15a40ae329f6019155d07857df452f42b", "patch": "@@ -171,6 +171,7 @@ extern const char *path_to_selftest_files;\n /* Declarations for specific families of tests (by source file), in\n    alphabetical order.  */\n extern void bitmap_c_tests ();\n+extern void sbitmap_c_tests ();\n extern void diagnostic_c_tests ();\n extern void diagnostic_show_locus_c_tests ();\n extern void edit_context_c_tests ();"}, {"sha": "9d6cb146436729bf54b28d08fba0a4ef8911ebe3", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0af377c15a40ae329f6019155d07857df452f42b/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0af377c15a40ae329f6019155d07857df452f42b/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=0af377c15a40ae329f6019155d07857df452f42b", "patch": "@@ -493,7 +493,7 @@ live_bytes_read (ao_ref use_ref, ao_ref *ref, sbitmap live)\n \n       /* Now check if any of the remaining bits in use_ref are set in LIVE.  */\n       unsigned int start = (use_ref.offset - ref->offset) / BITS_PER_UNIT;\n-      unsigned int end  = (use_ref.offset + use_ref.size) / BITS_PER_UNIT;\n+      unsigned int end  = ((use_ref.offset + use_ref.size) / BITS_PER_UNIT) - 1;\n       return bitmap_bit_in_range_p (live, start, end);\n     }\n   return true;"}]}