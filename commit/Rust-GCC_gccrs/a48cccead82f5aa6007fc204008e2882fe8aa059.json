{"sha": "a48cccead82f5aa6007fc204008e2882fe8aa059", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ4Y2NjZWFkODJmNWFhNjAwN2ZjMjA0MDA4ZTI4ODJmZThhYTA1OQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2003-01-17T03:43:52Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-01-17T03:43:52Z"}, "message": "re PR c++/8564 (ICE in find_function_data, at function.c:329)\n\n        PR c++/8564\n        * init.c (build_vec_init): Re-add maxindex parm.\n        (perform_member_init, build_aggr_init): Pass it.\n        (build_new_1): Pass it. Use an incomplete array type for full_type.\n        * typeck.c (build_modify_expr): Pass it.\n        * cp-tree.h: Adjust.\n\nFrom-SVN: r61422", "tree": {"sha": "cbcc387aa476669c2a479b4a4b04423368aa1188", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbcc387aa476669c2a479b4a4b04423368aa1188"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a48cccead82f5aa6007fc204008e2882fe8aa059", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a48cccead82f5aa6007fc204008e2882fe8aa059", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a48cccead82f5aa6007fc204008e2882fe8aa059", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a48cccead82f5aa6007fc204008e2882fe8aa059/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3d042e770b6b46116c9b45eb924b67a47178dbd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d042e770b6b46116c9b45eb924b67a47178dbd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d042e770b6b46116c9b45eb924b67a47178dbd8"}], "stats": {"total": 55, "additions": 41, "deletions": 14}, "files": [{"sha": "d50b3d629ab938d6ba4e8a7720a0ef57d2fc074e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a48cccead82f5aa6007fc204008e2882fe8aa059/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a48cccead82f5aa6007fc204008e2882fe8aa059/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a48cccead82f5aa6007fc204008e2882fe8aa059", "patch": "@@ -1,3 +1,12 @@\n+2003-01-16  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/8564\n+\t* init.c (build_vec_init): Re-add maxindex parm.\n+\t(perform_member_init, build_aggr_init): Pass it.\n+\t(build_new_1): Pass it. Use an incomplete array type for full_type.\n+\t* typeck.c (build_modify_expr): Pass it.\n+\t* cp-tree.h: Adjust.\n+\n 2003-01-16  Jeffrey D. Oldham  <oldham@codesourcery.com>\n \n \t* cp-tree.h (tsubst_copy_and_build): New declaration."}, {"sha": "4b29211ca0ea30625de621a026f4bb2b4944dc51", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a48cccead82f5aa6007fc204008e2882fe8aa059/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a48cccead82f5aa6007fc204008e2882fe8aa059/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a48cccead82f5aa6007fc204008e2882fe8aa059", "patch": "@@ -3957,7 +3957,7 @@ extern tree build_member_call\t\t\t(tree, tree, tree);\n extern tree build_offset_ref\t\t\t(tree, tree);\n extern tree resolve_offset_ref\t\t\t(tree);\n extern tree build_new\t\t\t\t(tree, tree, tree, int);\n-extern tree build_vec_init\t\t\t(tree, tree, int);\n+extern tree build_vec_init\t\t\t(tree, tree, tree, int);\n extern tree build_x_delete\t\t\t(tree, int, tree);\n extern tree build_delete\t\t\t(tree, tree, special_function_kind, int, int);\n extern void push_base_cleanups\t\t\t(void);"}, {"sha": "c82251660b9178adec04d9b16cb1f12c15198201", "filename": "gcc/cp/init.c", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a48cccead82f5aa6007fc204008e2882fe8aa059/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a48cccead82f5aa6007fc204008e2882fe8aa059/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=a48cccead82f5aa6007fc204008e2882fe8aa059", "patch": "@@ -353,7 +353,8 @@ perform_member_init (tree member, tree init)\n \t  && TREE_CODE (TREE_TYPE (TREE_VALUE (init))) == ARRAY_TYPE)\n \t{\n \t  /* Initialization of one array from another.  */\n-\t  finish_expr_stmt (build_vec_init (decl, TREE_VALUE (init), 1));\n+\t  finish_expr_stmt (build_vec_init (decl, NULL_TREE, TREE_VALUE (init),\n+\t\t\t\t\t    /* from_array=*/1));\n \t}\n       else\n \tfinish_expr_stmt (build_aggr_init (decl, init, 0));\n@@ -1115,7 +1116,7 @@ build_aggr_init (exp, init, flags)\n \tTREE_TYPE (exp) = TYPE_MAIN_VARIANT (type);\n       if (itype && cp_type_quals (itype) != TYPE_UNQUALIFIED)\n \tTREE_TYPE (init) = TYPE_MAIN_VARIANT (itype);\n-      stmt_expr = build_vec_init (exp, init,\n+      stmt_expr = build_vec_init (exp, NULL_TREE, init,\n \t\t\t\t  init && same_type_p (TREE_TYPE (init),\n \t\t\t\t\t\t       TREE_TYPE (exp)));\n       TREE_READONLY (exp) = was_const;\n@@ -2155,6 +2156,7 @@ build_new_1 (exp)\n   tree placement, init;\n   tree type, true_type, size, rval, t;\n   tree full_type;\n+  tree outer_nelts = NULL_TREE;\n   tree nelts = NULL_TREE;\n   tree alloc_call, alloc_expr, alloc_node;\n   tree alloc_fn;\n@@ -2184,12 +2186,11 @@ build_new_1 (exp)\n   if (TREE_CODE (type) == ARRAY_REF)\n     {\n       has_array = 1;\n-      nelts = TREE_OPERAND (type, 1);\n+      nelts = outer_nelts = TREE_OPERAND (type, 1);\n       type = TREE_OPERAND (type, 0);\n \n-      full_type = cp_build_binary_op (MINUS_EXPR, nelts, integer_one_node);\n-      full_type = build_index_type (full_type);\n-      full_type = build_cplus_array_type (type, full_type);\n+      /* Use an incomplete array type to avoid VLA headaches.  */\n+      full_type = build_cplus_array_type (type, NULL_TREE);\n     }\n   else\n     full_type = type;\n@@ -2379,7 +2380,11 @@ build_new_1 (exp)\n \tpedwarn (\"ISO C++ forbids initialization in array new\");\n \n       if (has_array)\n-\tinit_expr = build_vec_init (init_expr, init, 0);\n+\tinit_expr\n+\t  = build_vec_init (init_expr,\n+\t\t\t    cp_build_binary_op (MINUS_EXPR, outer_nelts,\n+\t\t\t\t\t\tinteger_one_node),\n+\t\t\t    init, /*from_array=*/0);\n       else if (TYPE_NEEDS_CONSTRUCTING (type))\n \tinit_expr = build_special_member_call (init_expr, \n \t\t\t\t\t       complete_ctor_identifier,\n@@ -2710,6 +2715,9 @@ get_temp_regvar (type, init)\n    initialization of a vector of aggregate types.\n \n    BASE is a reference to the vector, of ARRAY_TYPE.\n+   MAXINDEX is the maximum index of the array (one less than the\n+     number of elements).  It is only used if\n+     TYPE_DOMAIN (TREE_TYPE (BASE)) == NULL_TREE.\n    INIT is the (possibly NULL) initializer.\n \n    FROM_ARRAY is 0 if we should init everything with INIT\n@@ -2720,8 +2728,8 @@ get_temp_regvar (type, init)\n    but use assignment instead of initialization.  */\n \n tree\n-build_vec_init (base, init, from_array)\n-     tree base, init;\n+build_vec_init (base, maxindex, init, from_array)\n+     tree base, init, maxindex;\n      int from_array;\n {\n   tree rval;\n@@ -2741,9 +2749,11 @@ build_vec_init (base, init, from_array)\n   tree try_block = NULL_TREE;\n   tree try_body = NULL_TREE;\n   int num_initialized_elts = 0;\n-  tree maxindex = array_type_nelts (TREE_TYPE (base));\n \n-  if (maxindex == error_mark_node)\n+  if (TYPE_DOMAIN (atype))\n+    maxindex = array_type_nelts (atype);\n+\n+  if (maxindex == NULL_TREE || maxindex == error_mark_node)\n     return error_mark_node;\n \n   if (init\n@@ -2934,7 +2944,7 @@ build_vec_init (base, init, from_array)\n \t    sorry\n \t      (\"cannot initialize multi-dimensional array with initializer\");\n \t  elt_init = build_vec_init (build1 (INDIRECT_REF, type, base),\n-\t\t\t\t     0, 0);\n+\t\t\t\t     0, 0, 0);\n \t}\n       else\n \telt_init = build_aggr_init (build1 (INDIRECT_REF, type, base), "}, {"sha": "57d95ad231f846b85d327d6ad10ff269bfffa0c1", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a48cccead82f5aa6007fc204008e2882fe8aa059/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a48cccead82f5aa6007fc204008e2882fe8aa059/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=a48cccead82f5aa6007fc204008e2882fe8aa059", "patch": "@@ -5380,7 +5380,7 @@ build_modify_expr (lhs, modifycode, rhs)\n \n       from_array = TREE_CODE (TREE_TYPE (newrhs)) == ARRAY_TYPE\n \t           ? 1 + (modifycode != INIT_EXPR): 0;\n-      return build_vec_init (lhs, newrhs, from_array);\n+      return build_vec_init (lhs, NULL_TREE, newrhs, from_array);\n     }\n \n   if (modifycode == INIT_EXPR)"}, {"sha": "d0eab73cf5a3720e551f19023570a48c5e453687", "filename": "gcc/testsuite/g++.dg/init/new3.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a48cccead82f5aa6007fc204008e2882fe8aa059/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a48cccead82f5aa6007fc204008e2882fe8aa059/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew3.C?ref=a48cccead82f5aa6007fc204008e2882fe8aa059", "patch": "@@ -0,0 +1,8 @@\n+// Test that new-expressions at file scope work properly.\n+\n+struct A { static char* p; };\n+\n+int i = 1;\n+char* A::p = new char[i];\n+\n+void foo() {}"}]}