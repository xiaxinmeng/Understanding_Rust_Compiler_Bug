{"sha": "0ea221ef245cd19b2308fdfa497d49156e1b801d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVhMjIxZWYyNDVjZDE5YjIzMDhmZGZhNDk3ZDQ5MTU2ZTFiODAxZA==", "commit": {"author": {"name": "Andi Kleen", "email": "ak@linux.intel.com", "date": "2016-07-14T02:13:48Z"}, "committer": {"name": "Andi Kleen", "email": "ak@gcc.gnu.org", "date": "2016-07-14T02:13:48Z"}, "message": "Print indirect call changes in afdo dump file\n\nPrint some information about indirect call promotions in the afdo dump\nfile. Do it in the same format as the instrumented profiler so that\nthe test suite can match on it.\n\ngcc/:\n\n2016-07-13  Andi Kleen  <ak@linux.intel.com>\n\n\t* auto-profile.c (update_inlined_ind_target,\n\tafdo_indirect_call): Print information to dump file.\n\nFrom-SVN: r238320", "tree": {"sha": "92f435ce61a039797184e9e0ebddad351fca64fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92f435ce61a039797184e9e0ebddad351fca64fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ea221ef245cd19b2308fdfa497d49156e1b801d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ea221ef245cd19b2308fdfa497d49156e1b801d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ea221ef245cd19b2308fdfa497d49156e1b801d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ea221ef245cd19b2308fdfa497d49156e1b801d/comments", "author": null, "committer": null, "parents": [{"sha": "9f01da8e20d3b8ecf97a345e919938a46b029805", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f01da8e20d3b8ecf97a345e919938a46b029805", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f01da8e20d3b8ecf97a345e919938a46b029805"}], "stats": {"total": 75, "additions": 68, "deletions": 7}, "files": [{"sha": "b4b8f74c1caad6f38c5d9fc990377b3f7fb568b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea221ef245cd19b2308fdfa497d49156e1b801d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea221ef245cd19b2308fdfa497d49156e1b801d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ea221ef245cd19b2308fdfa497d49156e1b801d", "patch": "@@ -1,3 +1,8 @@\n+2016-07-13  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* auto-profile.c (update_inlined_ind_target,\n+\tafdo_indirect_call): Print information to dump file.\n+\n 2016-07-13  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* genrecog.c (special_predicate_operand_p): New function."}, {"sha": "4e3d2bff6b95287bd8604e6f0163f7ea40e71b8b", "filename": "gcc/auto-profile.c", "status": "modified", "additions": 63, "deletions": 7, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea221ef245cd19b2308fdfa497d49156e1b801d/gcc%2Fauto-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea221ef245cd19b2308fdfa497d49156e1b801d/gcc%2Fauto-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fauto-profile.c?ref=0ea221ef245cd19b2308fdfa497d49156e1b801d", "patch": "@@ -47,6 +47,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-inline.h\"\n #include \"tree-inline.h\"\n #include \"auto-profile.h\"\n+#include \"tree-pretty-print.h\"\n+#include \"gimple-pretty-print.h\"\n \n /* The following routines implements AutoFDO optimization.\n \n@@ -747,8 +749,18 @@ bool\n autofdo_source_profile::update_inlined_ind_target (gcall *stmt,\n                                                    count_info *info)\n {\n+  if (dump_file)\n+    {\n+      fprintf (dump_file, \"Checking indirect call -> direct call \");\n+      print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);\n+    }\n+\n   if (LOCATION_LOCUS (gimple_location (stmt)) == cfun->function_end_locus)\n-    return false;\n+    {\n+      if (dump_file)\n+\tfprintf (dump_file, \" good locus\\n\");\n+      return false;\n+    }\n \n   count_info old_info;\n   get_count_info (stmt, &old_info);\n@@ -765,21 +777,41 @@ autofdo_source_profile::update_inlined_ind_target (gcall *stmt,\n      than half of the callsite count (stored in INFO), the original promoted\n      target is considered not hot any more.  */\n   if (total >= info->count / 2)\n-    return false;\n+    {\n+      if (dump_file)\n+\tfprintf (dump_file, \" not hot anymore %ld >= %ld\",\n+\t\t (long)total,\n+\t\t (long)info->count /2);\n+      return false;\n+    }\n \n   inline_stack stack;\n   get_inline_stack (gimple_location (stmt), &stack);\n   if (stack.length () == 0)\n-    return false;\n+    {\n+      if (dump_file)\n+\tfprintf (dump_file, \" no inline stack\\n\");\n+      return false;\n+    }\n   function_instance *s = get_function_instance_by_inline_stack (stack);\n   if (s == NULL)\n-    return false;\n+    {\n+      if (dump_file)\n+\tfprintf (dump_file, \" function not found in inline stack\\n\");\n+      return false;\n+    }\n   icall_target_map map;\n   if (s->find_icall_target_map (stmt, &map) == 0)\n-    return false;\n+    {\n+      if (dump_file)\n+\tfprintf (dump_file, \" no target map\\n\");\n+      return false;\n+    }\n   for (icall_target_map::const_iterator iter = map.begin ();\n        iter != map.end (); ++iter)\n     info->targets[iter->first] = iter->second;\n+  if (dump_file)\n+    fprintf (dump_file, \" looks good\\n\");\n   return true;\n }\n \n@@ -997,10 +1029,34 @@ afdo_indirect_call (gimple_stmt_iterator *gsi, const icall_target_map &map,\n   struct cgraph_node *direct_call = cgraph_node::get_for_asmname (\n       get_identifier ((const char *) hist->hvalue.counters[0]));\n \n+  if (dump_file)\n+    {\n+      fprintf (dump_file, \"Indirect call -> direct call \");\n+      print_generic_expr (dump_file, callee, TDF_SLIM);\n+      fprintf (dump_file, \" => \");\n+      print_generic_expr (dump_file, direct_call->decl, TDF_SLIM);\n+    }\n+\n   if (direct_call == NULL || !check_ic_target (stmt, direct_call))\n-    return;\n+    {\n+      if (dump_file)\n+        fprintf (dump_file, \" not transforming\\n\");\n+      return;\n+    }\n   if (DECL_STRUCT_FUNCTION (direct_call->decl) == NULL)\n-    return;\n+    {\n+      if (dump_file)\n+        fprintf (dump_file, \" no declaration\\n\");\n+      return;\n+    }\n+\n+  if (dump_file)\n+    {\n+      fprintf (dump_file, \" transformation on insn \");\n+      print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);\n+      fprintf (dump_file, \"\\n\");\n+    }\n+\n   struct cgraph_edge *new_edge\n       = indirect_edge->make_speculative (direct_call, 0, 0);\n   new_edge->redirect_call_stmt_to_callee ();"}]}