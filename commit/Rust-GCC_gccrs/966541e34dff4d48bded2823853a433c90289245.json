{"sha": "966541e34dff4d48bded2823853a433c90289245", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY2NTQxZTM0ZGZmNGQ0OGJkZWQyODIzODUzYTQzM2M5MDI4OTI0NQ==", "commit": {"author": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2006-11-01T16:29:06Z"}, "committer": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2006-11-01T16:29:06Z"}, "message": "c-common.c (flag_cpp0x): New.\n\n2006-11-01\tDouglas Gregor <doug.gregor@gmail.com>\n\n\t* c-common.c (flag_cpp0x): New.\n\t* c-common.h (flag_cpp0x): New.\n\t* c-cppbuiltin.c (c_cpp_builtins): If C++0x extensions are\n\tsupported, define __GXX_EXPERIMENTAL_CPP0X__.\n\t* c-opts.c (set_std_cxx0x): New.\n\t(c_common_handle_option): Handle -std=c++0x, -std=gnu++0x.\n\t* c.opt (std=c++0x): Document.\n\t(std=gnu++0x): Ditto.\n\t* doc/cpp.texi: Document __GXX_EXPERIMENTAL_CPP0X__.\n\t* doc/invoke.texi: Document -std=c++0x, -std=gnu++0x.\n\nFrom-SVN: r118386", "tree": {"sha": "875c5fa5548c28bdbec98cd7f7e0e301a08a6248", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/875c5fa5548c28bdbec98cd7f7e0e301a08a6248"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/966541e34dff4d48bded2823853a433c90289245", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/966541e34dff4d48bded2823853a433c90289245", "html_url": "https://github.com/Rust-GCC/gccrs/commit/966541e34dff4d48bded2823853a433c90289245", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/966541e34dff4d48bded2823853a433c90289245/comments", "author": null, "committer": null, "parents": [{"sha": "dfafdaa655b586f9f2f45aaaf4f0d3cc4aae6e82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfafdaa655b586f9f2f45aaaf4f0d3cc4aae6e82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfafdaa655b586f9f2f45aaaf4f0d3cc4aae6e82"}], "stats": {"total": 65, "additions": 64, "deletions": 1}, "files": [{"sha": "47cda1b6413efcb3714c4d6fb309f8babb3c5e2a", "filename": "gcc/c-common.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966541e34dff4d48bded2823853a433c90289245/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966541e34dff4d48bded2823853a433c90289245/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=966541e34dff4d48bded2823853a433c90289245", "patch": "@@ -401,6 +401,11 @@ int flag_access_control = 1;\n \n int flag_check_new;\n \n+/* Nonzero if we want to allow the use of experimental features that\n+   are likely to become part of C++0x. */\n+\n+int flag_cpp0x = 0;\n+\n /* Nonzero if we want the new ISO rules for pushing a new scope for `for'\n    initialization variables.\n    0: Old rules, set by -fno-for-scope."}, {"sha": "40d8b963719a62912bf9d17f874a7da45dd26b8c", "filename": "gcc/c-common.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966541e34dff4d48bded2823853a433c90289245/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966541e34dff4d48bded2823853a433c90289245/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=966541e34dff4d48bded2823853a433c90289245", "patch": "@@ -521,6 +521,11 @@ extern int flag_access_control;\n \n extern int flag_check_new;\n \n+/* Nonzero if we want to allow the use of experimental features that\n+   are likely to become part of C++0x. */\n+\n+extern int flag_cpp0x;\n+\n /* Nonzero if we want the new ISO rules for pushing a new scope for `for'\n    initialization variables.\n    0: Old rules, set by -fno-for-scope."}, {"sha": "dc0c3438dca96cdb3ee8fc3a0f462619204a014c", "filename": "gcc/c-cppbuiltin.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966541e34dff4d48bded2823853a433c90289245/gcc%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966541e34dff4d48bded2823853a433c90289245/gcc%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-cppbuiltin.c?ref=966541e34dff4d48bded2823853a433c90289245", "patch": "@@ -409,6 +409,8 @@ c_cpp_builtins (cpp_reader *pfile)\n \tcpp_define (pfile, \"__GXX_WEAK__=0\");\n       if (warn_deprecated)\n \tcpp_define (pfile, \"__DEPRECATED\");\n+      if (flag_cpp0x)\n+        cpp_define (pfile, \"__GXX_EXPERIMENTAL_CPP0X__\");\n     }\n   /* Note that we define this for C as well, so that we know if\n      __attribute__((cleanup)) will interface with EH.  */"}, {"sha": "1abb374c4760ed1af8412657b93ef3933ca1caee", "filename": "gcc/c-opts.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966541e34dff4d48bded2823853a433c90289245/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966541e34dff4d48bded2823853a433c90289245/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=966541e34dff4d48bded2823853a433c90289245", "patch": "@@ -109,6 +109,7 @@ static size_t include_cursor;\n static void set_Wimplicit (int);\n static void handle_OPT_d (const char *);\n static void set_std_cxx98 (int);\n+static void set_std_cxx0x (int);\n static void set_std_c89 (int, int);\n static void set_std_c99 (int);\n static void check_deps_environment_vars (void);\n@@ -789,7 +790,7 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n     case OPT_fuse_cxa_atexit:\n       flag_use_cxa_atexit = value;\n       break;\n-      \n+\n     case OPT_fuse_cxa_get_exception_ptr:\n       flag_use_cxa_get_exception_ptr = value;\n       break;\n@@ -913,6 +914,12 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n \tset_std_cxx98 (code == OPT_std_c__98 /* ISO */);\n       break;\n \n+    case OPT_std_c__0x:\n+    case OPT_std_gnu__0x:\n+      if (!preprocessing_asm_p)\n+\tset_std_cxx0x (code == OPT_std_c__0x /* ISO */);\n+      break;\n+\n     case OPT_std_c89:\n     case OPT_std_iso9899_1990:\n     case OPT_std_iso9899_199409:\n@@ -1509,6 +1516,17 @@ set_std_cxx98 (int iso)\n   flag_iso = iso;\n }\n \n+/* Set the C++ 0x working draft \"standard\" (without GNU extensions if ISO).  */\n+static void\n+set_std_cxx0x (int iso)\n+{\n+  cpp_set_lang (parse_in, iso ? CLK_CXX0X: CLK_GNUCXX0X);\n+  flag_no_gnu_keywords = iso;\n+  flag_no_nonansi_builtin = iso;\n+  flag_iso = iso;\n+  flag_cpp0x = 1;\n+}\n+\n /* Handle setting implicit to ON.  */\n static void\n set_Wimplicit (int on)"}, {"sha": "01cb779dc31cd0732f841759a321bfc3f9028dd2", "filename": "gcc/c.opt", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966541e34dff4d48bded2823853a433c90289245/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966541e34dff4d48bded2823853a433c90289245/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=966541e34dff4d48bded2823853a433c90289245", "patch": "@@ -842,6 +842,13 @@ std=c++98\n C++ ObjC++\n Conform to the ISO 1998 C++ standard\n \n+std=c++0x\n+C++ ObjC++\n+Conform to the ISO 1998 C++ standard, with extensions that are likely to\n+become a part of the upcoming ISO C++ standard, dubbed C++0x. Note that the\n+extensions enabled by this mode are experimental and may be removed in\n+future releases of GCC.\n+\n std=c89\n C ObjC\n Conform to the ISO 1990 C standard\n@@ -858,6 +865,13 @@ std=gnu++98\n C++ ObjC++\n Conform to the ISO 1998 C++ standard with GNU extensions\n \n+std=gnu++0x\n+C++ ObjC++\n+Conform to the ISO 1998 C++ standard, with GNU extensions and\n+extensions that are likely to become a part of the upcoming ISO C++\n+standard, dubbed C++0x. Note that the extensions enabled by this mode\n+are experimental and may be removed in future releases of GCC.\n+\n std=gnu89\n C ObjC\n Conform to the ISO 1990 C standard with GNU extensions"}, {"sha": "5a7513667f44aa294577a66d0cb12d625f1c6b5d", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966541e34dff4d48bded2823853a433c90289245/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966541e34dff4d48bded2823853a433c90289245/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=966541e34dff4d48bded2823853a433c90289245", "patch": "@@ -2094,6 +2094,13 @@ This macro is defined, with value 1, if the compiler uses the old\n mechanism based on @code{setjmp} and @code{longjmp} for exception\n handling.\n \n+@item __GXX_EXPERIMENTAL_CPP0X__\n+This macro is defined when compiling a C++ source file with the option\n+@option{-std=c++0x} or @option{-std=gnu++0x}. It indicates that some\n+features likely to be included in C++0x are available. Note that these\n+features are experimental, and may change or be removed in future\n+versions of GCC.\n+\n @item __GXX_WEAK__\n This macro is defined when compiling a C++ source file.  It has the\n value 1 if the compiler will use weak symbols, COMDAT sections, or"}, {"sha": "c62c02c31cd029289d367d3a3ec214ab0ddfd728", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966541e34dff4d48bded2823853a433c90289245/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966541e34dff4d48bded2823853a433c90289245/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=966541e34dff4d48bded2823853a433c90289245", "patch": "@@ -1199,6 +1199,18 @@ The 1998 ISO C++ standard plus amendments.\n @item gnu++98\n The same as @option{-std=c++98} plus GNU extensions.  This is the\n default for C++ code.\n+\n+@item c++0x\n+The working draft of the upcoming ISO C++0x standard. This option\n+enables experimental features that are likely to be included in\n+C++0x. The working draft is constantly changing, and any feature that is\n+enabled by this flag may be removed from future versions of GCC if it is\n+not part of the C++0x standard.\n+\n+@item gnu++0x\n+The same as @option{-std=c++0x} plus GNU extensions. As with\n+@option{-std=c++0x}, this option enables experimental features that may\n+be removed in future versions of GCC.\n @end table\n \n Even when this option is not specified, you can still use some of the"}]}