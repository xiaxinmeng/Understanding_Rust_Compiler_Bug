{"sha": "29d40637c45caf4b5ed5a9c4ce651a3623f13466", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlkNDA2MzdjNDVjYWY0YjVlZDVhOWM0Y2U2NTFhMzYyM2YxMzQ2Ng==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-04-30T20:13:21Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-04-30T20:13:21Z"}, "message": "re PR fortran/35997 (Used function interface bug)\n\n2008-04-30  Paul Thomas  <pault@gcc.gnu.org>\n\n       PR fortran/35997\n       * module.c (find_symbol): Do not return a result for a symbol\n       that has been renamed in another module.\n\n2008-04-30  Paul Thomas  <pault@gcc.gnu.org>\n\n       PR fortran/35997\n       * gfortran.dg/use_rename_3.f90\n\nFrom-SVN: r134836", "tree": {"sha": "5eda8593c6924f553e42fef0fc3d4f1b0053a1f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5eda8593c6924f553e42fef0fc3d4f1b0053a1f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29d40637c45caf4b5ed5a9c4ce651a3623f13466", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29d40637c45caf4b5ed5a9c4ce651a3623f13466", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29d40637c45caf4b5ed5a9c4ce651a3623f13466", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29d40637c45caf4b5ed5a9c4ce651a3623f13466/comments", "author": null, "committer": null, "parents": [{"sha": "ad516a74de3fede4d52dcd3b8aeb65aa148e14e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad516a74de3fede4d52dcd3b8aeb65aa148e14e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad516a74de3fede4d52dcd3b8aeb65aa148e14e3"}], "stats": {"total": 61, "additions": 57, "deletions": 4}, "files": [{"sha": "13fb0528e55330f260e89607ed1127de05e89e28", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d40637c45caf4b5ed5a9c4ce651a3623f13466/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d40637c45caf4b5ed5a9c4ce651a3623f13466/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=29d40637c45caf4b5ed5a9c4ce651a3623f13466", "patch": "@@ -1,3 +1,9 @@\n+2008-04-28  Paul Thomas  <pault@gcc.gnu.org>\n+\n+       PR fortran/35997\n+       * module.c (find_symbol): Do not return a result for a symbol\n+       that has been renamed in another module.\n+\n 2008-04-26  George Helffrich <george@gcc.gnu.org>\n \n \tPR fortran/35892"}, {"sha": "832f68698b4c07b73cdf0458511826ab96ca4d7e", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d40637c45caf4b5ed5a9c4ce651a3623f13466/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d40637c45caf4b5ed5a9c4ce651a3623f13466/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=29d40637c45caf4b5ed5a9c4ce651a3623f13466", "patch": "@@ -3146,13 +3146,14 @@ find_symtree_for_symbol (gfc_symtree *st, gfc_symbol *sym)\n /* A recursive function to look for a speficic symbol by name and by\n    module.  Whilst several symtrees might point to one symbol, its\n    is sufficient for the purposes here than one exist.  Note that\n-   generic interfaces are distinguished.  */\n+   generic interfaces are distinguished as are symbols that have been\n+   renamed in another module.  */\n static gfc_symtree *\n find_symbol (gfc_symtree *st, const char *name,\n \t     const char *module, int generic)\n {\n   int c;\n-  gfc_symtree *retval;\n+  gfc_symtree *retval, *s;\n \n   if (st == NULL || st->n.sym == NULL)\n     return NULL;\n@@ -3162,8 +3163,14 @@ find_symbol (gfc_symtree *st, const char *name,\n \t     && strcmp (module, st->n.sym->module) == 0\n \t     && !check_unique_name (st->name))\n     {\n-      if ((!generic && !st->n.sym->attr.generic)\n-\t     || (generic && st->n.sym->attr.generic))\n+      s = gfc_find_symtree (gfc_current_ns->sym_root, name);\n+\n+      /* Detect symbols that are renamed by use association in another\n+\t module by the absence of a symtree and null attr.use_rename,\n+\t since the latter is not transmitted in the module file.  */\n+      if (((!generic && !st->n.sym->attr.generic)\n+\t\t|| (generic && st->n.sym->attr.generic))\n+\t    && !(s == NULL && !st->n.sym->attr.use_rename))\n \treturn st;\n     }\n "}, {"sha": "ca56282f46387158445c2768908ab6f604fa4a3d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d40637c45caf4b5ed5a9c4ce651a3623f13466/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d40637c45caf4b5ed5a9c4ce651a3623f13466/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=29d40637c45caf4b5ed5a9c4ce651a3623f13466", "patch": "@@ -1,3 +1,8 @@\n+2008-04-28  Paul Thomas  <pault@gcc.gnu.org>\n+\n+       PR fortran/35997\n+       * gfortran.dg/use_rename_3.f90\n+\n 2008-04-30  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/21636"}, {"sha": "9f28e2ee70ea25c5662432cd5bea0e1ca899b8be", "filename": "gcc/testsuite/gfortran.dg/use_rename_3.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d40637c45caf4b5ed5a9c4ce651a3623f13466/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_rename_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d40637c45caf4b5ed5a9c4ce651a3623f13466/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_rename_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_rename_3.f90?ref=29d40637c45caf4b5ed5a9c4ce651a3623f13466", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do compile }\n+! Tests the fix for PR35997, in which the use association of renamed\n+! valid2 and flag2 was treated as if the renaming were done on use\n+! association in the main program.  Thus, the following, direct use\n+! association of valid and flag did not occur.\n+!\n+! Contributed by Drew McCormack <drewmccormack@mac.com>\n+!\n+module funcinterfacemod\n+  interface\n+    logical function valid ()\n+    end function\n+  end interface\n+  logical :: flag = .true.\n+end module\n+\n+module secondmod\n+  use funcinterfacemod, valid2 => valid, flag2 => flag\n+end module\n+\n+logical function valid ()\n+  valid = .true.\n+end function\n+\n+program main\n+  use secondmod\n+  use funcinterfacemod\n+  if (valid ()) then\n+    print *, 'Is Valid'\n+  endif\n+  if (flag) then\n+    print *, 'Is flag'\n+  endif\n+end program\n+! { dg-final { cleanup-modules \"funcinterfacemod secondmod\" } }"}]}