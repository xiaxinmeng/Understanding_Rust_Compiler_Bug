{"sha": "36f371de3956f3eaff659757e715b07192c2dbe8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZmMzcxZGUzOTU2ZjNlYWZmNjU5NzU3ZTcxNWIwNzE5MmMyZGJlOA==", "commit": {"author": {"name": "Ilya Enkovich", "email": "ilya.enkovich@intel.com", "date": "2015-04-08T19:34:41Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2015-04-08T19:34:41Z"}, "message": "tree-chkp.c (chkp_find_const_bounds_var): Remove.\n\ngcc/\n\n\t* tree-chkp.c (chkp_find_const_bounds_var): Remove.\n\t(chkp_make_static_const_bounds): Search existing\n\tsymbol by assembler name.  Use make_decl_one_only.\n\t(chkp_get_zero_bounds_var): Remove node\tsearch which\n\tis now performed in chkp_make_static_const_bounds.\n\t(chkp_get_none_bounds_var): Likewise.\n\ngcc/testsuite/\n\n\t* gcc.dg/lto/chkp-static-bounds_0.c: New.\n\nFrom-SVN: r221932", "tree": {"sha": "ff26ac1b3e4e11115401f9e54c69e4b7bc0d4f1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff26ac1b3e4e11115401f9e54c69e4b7bc0d4f1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36f371de3956f3eaff659757e715b07192c2dbe8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36f371de3956f3eaff659757e715b07192c2dbe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36f371de3956f3eaff659757e715b07192c2dbe8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36f371de3956f3eaff659757e715b07192c2dbe8/comments", "author": {"login": "ienkovich", "id": 18308708, "node_id": "MDQ6VXNlcjE4MzA4NzA4", "avatar_url": "https://avatars.githubusercontent.com/u/18308708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ienkovich", "html_url": "https://github.com/ienkovich", "followers_url": "https://api.github.com/users/ienkovich/followers", "following_url": "https://api.github.com/users/ienkovich/following{/other_user}", "gists_url": "https://api.github.com/users/ienkovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ienkovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ienkovich/subscriptions", "organizations_url": "https://api.github.com/users/ienkovich/orgs", "repos_url": "https://api.github.com/users/ienkovich/repos", "events_url": "https://api.github.com/users/ienkovich/events{/privacy}", "received_events_url": "https://api.github.com/users/ienkovich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "469f062eb94fa0edbabb53dc75d04d2e6ae75971", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/469f062eb94fa0edbabb53dc75d04d2e6ae75971", "html_url": "https://github.com/Rust-GCC/gccrs/commit/469f062eb94fa0edbabb53dc75d04d2e6ae75971"}], "stats": {"total": 124, "additions": 63, "deletions": 61}, "files": [{"sha": "14e57c3c93c4d6d83ce1d8fb485a85f99c3261b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f371de3956f3eaff659757e715b07192c2dbe8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f371de3956f3eaff659757e715b07192c2dbe8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36f371de3956f3eaff659757e715b07192c2dbe8", "patch": "@@ -1,3 +1,12 @@\n+2015-04-08  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\t* tree-chkp.c (chkp_find_const_bounds_var): Remove.\n+\t(chkp_make_static_const_bounds): Search existing\n+\tsymbol by assembler name.  Use make_decl_one_only.\n+\t(chkp_get_zero_bounds_var): Remove node\tsearch which\n+\tis now performed in chkp_make_static_const_bounds.\n+\t(chkp_get_none_bounds_var): Likewise.\n+\n 2015-04-08  Michael Witten  <mfwitten@gmail.com>\n \n \t* doc/extend.texi (Attribute Syntax): Add a trailing semicolon"}, {"sha": "ba6f84142d86da6d27bc31c82691b819d7db08f7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f371de3956f3eaff659757e715b07192c2dbe8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f371de3956f3eaff659757e715b07192c2dbe8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=36f371de3956f3eaff659757e715b07192c2dbe8", "patch": "@@ -1,3 +1,7 @@\n+2015-04-08  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\t* gcc.dg/lto/chkp-static-bounds_0.c: New.\n+\n 2015-04-08  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \t* gcc.target/i386/mpx/chkp-thunk-comdat-3.c: New."}, {"sha": "596e5510664f9d5105b1950cff6ef79b71c28eec", "filename": "gcc/testsuite/gcc.dg/lto/chkp-static-bounds_0.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f371de3956f3eaff659757e715b07192c2dbe8/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-static-bounds_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f371de3956f3eaff659757e715b07192c2dbe8/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-static-bounds_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-static-bounds_0.c?ref=36f371de3956f3eaff659757e715b07192c2dbe8", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-lto-do link } */\n+/* { dg-require-effective-target mpx } */\n+/* { dg-lto-options { { -flto -flto-partition=max -fcheck-pointer-bounds -mmpx } } } */\n+\n+const char *cc;\n+\n+int test1 (const char *c)\n+{\n+  c = __builtin___bnd_init_ptr_bounds (c);\n+  cc = c;\n+  return c[0] * 2;\n+}\n+\n+struct S\n+{\n+  int (*fnptr) (const char *);\n+} S;\n+\n+struct S s1 = {test1};\n+struct S s2 = {test1};\n+struct S s3 = {test1};\n+\n+int main (int argc, const char **argv)\n+{\n+  return s1.fnptr (argv[0]) + s2.fnptr (argv[1]);\n+}"}, {"sha": "8c5a628a9ad5bf6369ddab20720e1691ce055982", "filename": "gcc/tree-chkp.c", "status": "modified", "additions": 24, "deletions": 61, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f371de3956f3eaff659757e715b07192c2dbe8/gcc%2Ftree-chkp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f371de3956f3eaff659757e715b07192c2dbe8/gcc%2Ftree-chkp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chkp.c?ref=36f371de3956f3eaff659757e715b07192c2dbe8", "patch": "@@ -1902,71 +1902,50 @@ chkp_add_bounds_to_call_stmt (gimple_stmt_iterator *gsi)\n   gimple_call_set_with_bounds (new_call, true);\n }\n \n-/* Return constant static bounds var with specified LB and UB\n-   if such var exists in varpool.  Return NULL otherwise.  */\n-static tree\n-chkp_find_const_bounds_var (HOST_WIDE_INT lb,\n-\t\t\t    HOST_WIDE_INT ub)\n-{\n-  tree val = targetm.chkp_make_bounds_constant (lb, ub);\n-  struct varpool_node *node;\n-\n-  /* We expect bounds constant is represented as a complex value\n-     of two pointer sized integers.  */\n-  gcc_assert (TREE_CODE (val) == COMPLEX_CST);\n-\n-  FOR_EACH_VARIABLE (node)\n-    if (POINTER_BOUNDS_P (node->decl)\n-\t&& TREE_READONLY (node->decl)\n-\t&& DECL_INITIAL (node->decl)\n-\t&& TREE_CODE (DECL_INITIAL (node->decl)) == COMPLEX_CST\n-\t&& tree_int_cst_equal (TREE_REALPART (DECL_INITIAL (node->decl)),\n-\t\t\t       TREE_REALPART (val))\n-\t&& tree_int_cst_equal (TREE_IMAGPART (DECL_INITIAL (node->decl)),\n-\t\t\t       TREE_IMAGPART (val)))\n-      return node->decl;\n-\n-  return NULL;\n-}\n-\n /* Return constant static bounds var with specified bounds LB and UB.\n    If such var does not exists then new var is created with specified NAME.  */\n static tree\n chkp_make_static_const_bounds (HOST_WIDE_INT lb,\n \t\t\t       HOST_WIDE_INT ub,\n \t\t\t       const char *name)\n {\n+  tree id = get_identifier (name);\n   tree var;\n+  varpool_node *node;\n+  symtab_node *snode;\n+\n+  var  = build_decl (UNKNOWN_LOCATION, VAR_DECL, id,\n+\t\t     pointer_bounds_type_node);\n+  TREE_STATIC (var) = 1;\n+  TREE_PUBLIC (var) = 1;\n \n   /* With LTO we may have constant bounds already in varpool.\n      Try to find it.  */\n-  var = chkp_find_const_bounds_var (lb, ub);\n-\n-  if (var)\n-    return var;\n-\n-  var  = build_decl (UNKNOWN_LOCATION, VAR_DECL,\n-\t\t     get_identifier (name), pointer_bounds_type_node);\n+  if ((snode = symtab_node::get_for_asmname (DECL_ASSEMBLER_NAME (var))))\n+    {\n+      /* We don't allow this symbol usage for non bounds.  */\n+      if (snode->type != SYMTAB_VARIABLE\n+\t  || !POINTER_BOUNDS_P (snode->decl))\n+\tsorry (\"-fcheck-pointer-bounds requires '%s' \"\n+\t       \"name for internal usage\",\n+\t       IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (var)));\n+\n+      return snode->decl;\n+    }\n \n-  TREE_PUBLIC (var) = 1;\n   TREE_USED (var) = 1;\n   TREE_READONLY (var) = 1;\n-  TREE_STATIC (var) = 1;\n   TREE_ADDRESSABLE (var) = 0;\n   DECL_ARTIFICIAL (var) = 1;\n   DECL_READ_P (var) = 1;\n+  DECL_INITIAL (var) = targetm.chkp_make_bounds_constant (lb, ub);\n+  make_decl_one_only (var, DECL_ASSEMBLER_NAME (var));\n   /* We may use this symbol during ctors generation in chkp_finish_file\n      when all symbols are emitted.  Force output to avoid undefined\n      symbols in ctors.  */\n-  if (!in_lto_p)\n-    {\n-      DECL_INITIAL (var) = targetm.chkp_make_bounds_constant (lb, ub);\n-      DECL_COMDAT (var) = 1;\n-      varpool_node::get_create (var)->set_comdat_group (DECL_ASSEMBLER_NAME (var));\n-      varpool_node::get_create (var)->force_output = 1;\n-    }\n-  else\n-    DECL_EXTERNAL (var) = 1;\n+  node = varpool_node::get_create (var);\n+  node->force_output = 1;\n+\n   varpool_node::finalize_decl (var);\n \n   return var;\n@@ -2029,14 +2008,6 @@ chkp_make_bounds (tree lb, tree size, gimple_stmt_iterator *iter, bool after)\n tree\n chkp_get_zero_bounds_var (void)\n {\n-  if (!chkp_zero_bounds_var)\n-    {\n-      tree id = get_identifier (CHKP_ZERO_BOUNDS_VAR_NAME);\n-      symtab_node *node = symtab_node::get_for_asmname (id);\n-      if (node)\n-\tchkp_zero_bounds_var = node->decl;\n-    }\n-\n   if (!chkp_zero_bounds_var)\n     chkp_zero_bounds_var\n       = chkp_make_static_const_bounds (0, -1,\n@@ -2048,14 +2019,6 @@ chkp_get_zero_bounds_var (void)\n tree\n chkp_get_none_bounds_var (void)\n {\n-  if (!chkp_none_bounds_var)\n-    {\n-      tree id = get_identifier (CHKP_NONE_BOUNDS_VAR_NAME);\n-      symtab_node *node = symtab_node::get_for_asmname (id);\n-      if (node)\n-\tchkp_none_bounds_var = node->decl;\n-    }\n-\n   if (!chkp_none_bounds_var)\n     chkp_none_bounds_var\n       = chkp_make_static_const_bounds (-1, 0,"}]}