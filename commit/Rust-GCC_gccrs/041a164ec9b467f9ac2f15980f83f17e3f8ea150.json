{"sha": "041a164ec9b467f9ac2f15980f83f17e3f8ea150", "node_id": "C_kwDOANBUbNoAKDA0MWExNjRlYzliNDY3ZjlhYzJmMTU5ODBmODNmMTdlM2Y4ZWExNTA", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-03-18T12:27:26Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-03-21T15:08:59Z"}, "message": "c++: DMI in template with virtual base [PR106890]\n\nWhen parsing a default member init we just build a CONVERT_EXPR for\nconverting to a virtual base, and then expand that into the more complex\nform when we actually use the DMI in a constructor.  But that wasn't working\nfor the template case where we are considering the conversion at the point\nthat the constructor needs the DMI instantiation, so it seemed like we were\nin a constructor already.  And then when the other constructor tries to\nreuse the instantiation, it sees uses of the first constructor's parameters,\nand dies.  So ensure that we get the CONVERT_EXPR in this case, too.\n\n\tPR c++/106890\n\ngcc/cp/ChangeLog:\n\n\t* init.cc (maybe_instantiate_nsdmi_init): Don't leave\n\tcurrent_function_decl set to a constructor.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/nsdmi-template25.C: New test.", "tree": {"sha": "a96f37374c4813489ea425c023d053fef86d081b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a96f37374c4813489ea425c023d053fef86d081b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/041a164ec9b467f9ac2f15980f83f17e3f8ea150", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/041a164ec9b467f9ac2f15980f83f17e3f8ea150", "html_url": "https://github.com/Rust-GCC/gccrs/commit/041a164ec9b467f9ac2f15980f83f17e3f8ea150", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/041a164ec9b467f9ac2f15980f83f17e3f8ea150/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0963cb5fde158cce986523a90fa9edc51c881f31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0963cb5fde158cce986523a90fa9edc51c881f31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0963cb5fde158cce986523a90fa9edc51c881f31"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "c5a55dae56393831d2a1a2bd3433361e95110ef7", "filename": "gcc/cp/init.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/041a164ec9b467f9ac2f15980f83f17e3f8ea150/gcc%2Fcp%2Finit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/041a164ec9b467f9ac2f15980f83f17e3f8ea150/gcc%2Fcp%2Finit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.cc?ref=041a164ec9b467f9ac2f15980f83f17e3f8ea150", "patch": "@@ -613,6 +613,18 @@ maybe_instantiate_nsdmi_init (tree member, tsubst_flags_t complain)\n \t      pushed = true;\n \t    }\n \n+\t  /* If we didn't push_to_top_level, still step out of constructor\n+\t     scope so build_base_path doesn't try to use its __in_chrg.  */\n+\t  tree cfd = current_function_decl;\n+\t  auto cbl = current_binding_level;\n+\t  if (at_function_scope_p ())\n+\t    {\n+\t      current_function_decl\n+\t\t= decl_function_context (current_function_decl);\n+\t      while (current_binding_level->kind != sk_class)\n+\t\tcurrent_binding_level = current_binding_level->level_chain;\n+\t    }\n+\n \t  inject_this_parameter (ctx, TYPE_UNQUALIFIED);\n \n \t  start_lambda_scope (member);\n@@ -629,6 +641,8 @@ maybe_instantiate_nsdmi_init (tree member, tsubst_flags_t complain)\n \t  if (init != error_mark_node)\n \t    hash_map_safe_put<hm_ggc> (nsdmi_inst, member, init);\n \n+\t  current_function_decl = cfd;\n+\t  current_binding_level = cbl;\n \t  if (pushed)\n \t    {\n \t      pop_deferring_access_checks ();"}, {"sha": "368e745540ef03b861322f557483ddffbb448a63", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi-template25.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/041a164ec9b467f9ac2f15980f83f17e3f8ea150/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/041a164ec9b467f9ac2f15980f83f17e3f8ea150/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template25.C?ref=041a164ec9b467f9ac2f15980f83f17e3f8ea150", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/106890\n+// { dg-do compile { target c++11 } }\n+\n+struct A\n+{\n+  int p;\n+};\n+\n+template<typename T>\n+struct B : virtual public A\n+{\n+  B() { }\n+  B(int) { }\n+\n+  int k = this->p;\n+};\n+\n+template struct B<int>;"}]}