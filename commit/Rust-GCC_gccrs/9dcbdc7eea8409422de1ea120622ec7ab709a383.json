{"sha": "9dcbdc7eea8409422de1ea120622ec7ab709a383", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRjYmRjN2VlYTg0MDk0MjJkZTFlYTEyMDYyMmVjN2FiNzA5YTM4Mw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2000-10-12T14:03:30Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2000-10-12T14:03:30Z"}, "message": "i386.md (adddi3, [...]): Update for new pattern.\n\n\t* i386.md (adddi3, subdi3 splitters): Update for new pattern.\n\t(addsi3_cc, addqi3_cc, subsi3_cc): Remove\n\t(addsi3_carry): Canonicalize.\n\t(addqi_5): Remove '*'.\n\t(sbb pattern): Canonicalize.\n\n\t* i386.md (cmp to inc/add peep2): New.\n\nFrom-SVN: r36853", "tree": {"sha": "f5819f27776254a3be04cf84a8353f911404ef2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5819f27776254a3be04cf84a8353f911404ef2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9dcbdc7eea8409422de1ea120622ec7ab709a383", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dcbdc7eea8409422de1ea120622ec7ab709a383", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dcbdc7eea8409422de1ea120622ec7ab709a383", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dcbdc7eea8409422de1ea120622ec7ab709a383/comments", "author": null, "committer": null, "parents": [{"sha": "82271b8ca30d54de8072a790c17e03f9c668f44a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82271b8ca30d54de8072a790c17e03f9c668f44a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82271b8ca30d54de8072a790c17e03f9c668f44a"}], "stats": {"total": 142, "additions": 97, "deletions": 45}, "files": [{"sha": "0769c81e46fc7345ef4a0e6636acf5046809367b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcbdc7eea8409422de1ea120622ec7ab709a383/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcbdc7eea8409422de1ea120622ec7ab709a383/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9dcbdc7eea8409422de1ea120622ec7ab709a383", "patch": "@@ -1,3 +1,13 @@\n+Thu Oct 12 16:02:31 MET DST 2000 Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.md (adddi3, subdi3 splitters): Update for new pattern.\n+\t(addsi3_cc, addqi3_cc, subsi3_cc): Remove\n+\t(addsi3_carry): Canonicalize.\n+\t(addqi_5): Remove '*'.\n+\t(sbb pattern): Canonicalize.\n+\n+\t* i386.md (cmp to inc/add peep2): New.\n+\n 2000-10-12  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* bb-reorder.c (reorder_basic_blocks): Allocate an aux block for"}, {"sha": "5096c1dc89d9acaca48379f385739c0744a0d1fe", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 87, "deletions": 45, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcbdc7eea8409422de1ea120622ec7ab709a383/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcbdc7eea8409422de1ea120622ec7ab709a383/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9dcbdc7eea8409422de1ea120622ec7ab709a383", "patch": "@@ -3738,42 +3738,22 @@\n \t\t (match_operand:DI 2 \"general_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"reload_completed\"\n-  [(parallel [(set (reg:CC 17) (plus:CC (match_dup 1) (match_dup 2)))\n+  [(parallel [(set (reg:CC 17) (compare:CC (neg:SI (match_dup 2)) (match_dup 1)))\n \t      (set (match_dup 0) (plus:SI (match_dup 1) (match_dup 2)))])\n    (parallel [(set (match_dup 3)\n-\t\t   (plus:SI (match_dup 4)\n-\t\t   (plus:SI (match_dup 5)\n-\t\t\t    (ltu:SI (reg:CC 17) (const_int 0)))))\n+\t\t   (plus:SI (plus:SI (ltu:SI (reg:CC 17) (const_int 0))\n+\t\t\t\t     (match_dup 4))\n+\t\t\t    (match_dup 5)))\n \t      (clobber (reg:CC 17))])]\n   \"split_di (operands+0, 1, operands+0, operands+3);\n    split_di (operands+1, 1, operands+1, operands+4);\n    split_di (operands+2, 1, operands+2, operands+5);\")\n \n-(define_insn \"*addsi3_cc\"\n-  [(set (reg:CC 17) (plus:CC (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t    (match_operand:SI 2 \"general_operand\" \"ri,rm\")))\n-   (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,r\")\n-\t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (PLUS, SImode, operands)\"\n-  \"add{l}\\\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"addqi3_cc\"\n-  [(set (reg:CC 17) (plus:CC (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t    (match_operand:QI 2 \"general_operand\" \"qi,qm\")))\n-   (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q\")\n-\t(plus:QI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (PLUS, QImode, operands)\"\n-  \"add{b}\\\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"mode\" \"QI\")])\n-\n (define_insn \"*addsi3_carry\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,r\")\n-\t  (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t    (plus:SI (match_operand:SI 2 \"general_operand\" \"ri,rm\")\n-\t      (ltu:SI (reg:CC 17) (const_int 0)))))\n+\t  (plus:SI (plus:SI (ltu:SI (reg:CC 17) (const_int 0))\n+\t\t\t    (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\"))\n+\t\t   (match_operand:SI 2 \"general_operand\" \"ri,rm\")))\n    (clobber (reg:CC 17))]\n   \"ix86_binary_operator_ok (PLUS, SImode, operands)\"\n   \"adc{l}\\\\t{%2, %0|%0, %2}\"\n@@ -4587,6 +4567,15 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"QI\")])\n \n+(define_expand \"addqi3_cc\"\n+  [(parallel [\n+     (set (reg:CC 17)\n+\t  (compare:CC (neg:QI (match_operand:QI 2 \"general_operand\" \"\"))\n+\t\t      (match_operand:QI 1 \"nonimmediate_operand\" \"\")))\n+     (clobber (match_scratch:QI 0 \"\"))])]\n+  \"\"\n+  \"\")\n+\n (define_insn \"*addqi_5\"\n   [(set (reg 17)\n \t(compare (neg:QI (match_operand:QI 2 \"general_operand\" \"qmni\"))\n@@ -4734,32 +4723,22 @@\n \t\t  (match_operand:DI 2 \"general_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"reload_completed\"\n-  [(parallel [(set (reg:CC 17) (minus:CC (match_dup 1) (match_dup 2)))\n+  [(parallel [(set (reg:CC 17) (compare:CC (match_dup 1) (match_dup 2)))\n \t      (set (match_dup 0) (minus:SI (match_dup 1) (match_dup 2)))])\n    (parallel [(set (match_dup 3)\n \t\t   (minus:SI (match_dup 4)\n-\t\t\t     (plus:SI (match_dup 5)\n-\t\t\t     (ltu:SI (reg:CC 17) (const_int 0)))))\n+\t\t\t     (plus:SI (ltu:SI (reg:CC 17) (const_int 0))\n+\t\t\t\t      (match_dup 5))))\n \t      (clobber (reg:CC 17))])]\n   \"split_di (operands+0, 1, operands+0, operands+3);\n    split_di (operands+1, 1, operands+1, operands+4);\n    split_di (operands+2, 1, operands+2, operands+5);\")\n \n-(define_insn \"*subsi3_cc\"\n-  [(set (reg:CC 17) (minus:CC (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n-\t\t\t      (match_operand:SI 2 \"general_operand\" \"ri,rm\")))\n-   (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,r\")\n-\t(minus:SI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (MINUS, SImode, operands)\"\n-  \"sub{l}\\\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"mode\" \"SI\")])\n-\n (define_insn \"subsi3_carry\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,r\")\n \t  (minus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n-\t    (plus:SI (match_operand:SI 2 \"general_operand\" \"ri,rm\")\n-\t      (ltu:SI (reg:CC 17) (const_int 0)))))\n+\t    (plus:SI (ltu:SI (reg:CC 17) (const_int 0))\n+\t       (match_operand:SI 2 \"general_operand\" \"ri,rm\"))))\n    (clobber (reg:CC 17))]\n   \"ix86_binary_operator_ok (MINUS, SImode, operands)\"\n   \"sbb{l}\\\\t{%2, %0|%0, %2}\"\n@@ -6163,9 +6142,9 @@\n      (set (match_dup 0) (neg:SI (match_dup 2)))])\n    (parallel\n     [(set (match_dup 1)\n-\t  (plus:SI (match_dup 3)\n-\t    (plus:SI (const_int 0)\n-\t      (ltu:SI (reg:CC 17) (const_int 0)))))\n+\t  (plus:SI (plus:SI (ltu:SI (reg:CC 17) (const_int 0))\n+\t\t\t    (match_dup 3))\n+\t\t   (const_int 0)))\n      (clobber (reg:CC 17))])\n    (parallel\n     [(set (match_dup 1)\n@@ -11425,6 +11404,69 @@\n \t      (set (reg:SI 7) (plus:SI (reg:SI 7) (const_int 4)))])]\n   \"\")\n \f\n+;; Convert compares with 1 to shorter inc/dec operations when CF is not\n+;; required and register dies.\n+(define_peephole2\n+  [(set (reg 17)\n+\t(compare (match_operand:SI 0 \"register_operand\" \"\")\n+\t\t (match_operand:SI 1 \"incdec_operand\" \"\")))]\n+  \"ix86_match_ccmode (insn, CCGCmode)\n+   && find_regno_note (insn, REG_DEAD, true_regnum (operands[0]))\"\n+  [(parallel [(set (reg:CCGC 17)\n+\t\t   (compare:CCGC (neg:SI (match_dup 1))\n+\t\t\t\t (match_dup 0)))\n+\t      (clobber (match_dup 0))])]\n+  \"operands[1] = (operands[1] == const1_rtx) ? constm1_rtx : const1_rtx;\")\n+\n+(define_peephole2\n+  [(set (reg 17)\n+\t(compare (match_operand:HI 0 \"register_operand\" \"\")\n+\t\t (match_operand:HI 1 \"incdec_operand\" \"\")))]\n+  \"ix86_match_ccmode (insn, CCGCmode)\n+   && find_regno_note (insn, REG_DEAD, true_regnum (operands[0]))\"\n+  [(parallel [(set (reg:CCGC 17)\n+\t\t   (compare:CCGC (neg:HI (match_dup 1))\n+\t\t\t\t (match_dup 0)))\n+\t      (clobber (match_dup 0))])]\n+  \"operands[1] = (operands[1] == const1_rtx) ? constm1_rtx : const1_rtx;\")\n+\n+(define_peephole2\n+  [(set (reg 17)\n+\t(compare (match_operand:QI 0 \"register_operand\" \"\")\n+\t\t (match_operand:QI 1 \"incdec_operand\" \"\")))]\n+  \"ix86_match_ccmode (insn, CCGCmode)\n+   && find_regno_note (insn, REG_DEAD, true_regnum (operands[0]))\"\n+  [(parallel [(set (reg:CCGC 17)\n+\t\t   (compare:CCGC (neg:QI (match_dup 1))\n+\t\t\t\t (match_dup 0)))\n+\t      (clobber (match_dup 0))])]\n+  \"operands[1] = (operands[1] == const1_rtx) ? constm1_rtx : const1_rtx;\")\n+\n+;; Convert compares with 128 to shorter add -128\n+(define_peephole2\n+  [(set (reg 17)\n+\t(compare (match_operand:SI 0 \"register_operand\" \"\")\n+\t\t (const_int 128)))]\n+  \"ix86_match_ccmode (insn, CCmode)\n+   && find_regno_note (insn, REG_DEAD, true_regnum (operands[0]))\"\n+  [(parallel [(set (reg:CC 17)\n+\t\t   (compare:CC (neg:SI (const_int -128))\n+\t\t\t       (match_dup 0)))\n+\t      (clobber (match_dup 0))])]\n+  \"\")\n+\n+(define_peephole2\n+  [(set (reg 17)\n+\t(compare (match_operand:HI 0 \"register_operand\" \"\")\n+\t\t (const_int 128)))]\n+  \"ix86_match_ccmode (insn, CCmode)\n+   && find_regno_note (insn, REG_DEAD, true_regnum (operands[0]))\"\n+  [(parallel [(set (reg:CC 17)\n+\t\t   (compare:CC (neg:HI (const_int -128))\n+\t\t\t       (match_dup 0)))\n+\t      (clobber (match_dup 0))])]\n+  \"\")\n+\f\n ;; Call-value patterns last so that the wildcard operand does not\n ;; disrupt insn-recog's switch tables.\n "}]}