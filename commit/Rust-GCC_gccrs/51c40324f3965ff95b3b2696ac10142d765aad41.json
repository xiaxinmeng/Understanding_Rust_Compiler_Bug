{"sha": "51c40324f3965ff95b3b2696ac10142d765aad41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFjNDAzMjRmMzk2NWZmOTViM2IyNjk2YWMxMDE0MmQ3NjVhYWQ0MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-15T09:48:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-15T09:48:56Z"}, "message": "Add section for gnatcheck.\n\n        Add documentation for restriction No_Dispatching_Calls\n        Add documentation for pragma Ada_2005\n        Remove mention of obsolete pragma Propagate_Exceptions\n\nFrom-SVN: r111105", "tree": {"sha": "5082004e98c42cf4fe312b07ab00445eb0fd1a8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5082004e98c42cf4fe312b07ab00445eb0fd1a8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51c40324f3965ff95b3b2696ac10142d765aad41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51c40324f3965ff95b3b2696ac10142d765aad41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51c40324f3965ff95b3b2696ac10142d765aad41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51c40324f3965ff95b3b2696ac10142d765aad41/comments", "author": null, "committer": null, "parents": [{"sha": "7e3d710b32d0c05f9d39b01fb9a9d9d84afe5f5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e3d710b32d0c05f9d39b01fb9a9d9d84afe5f5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e3d710b32d0c05f9d39b01fb9a9d9d84afe5f5c"}], "stats": {"total": 213, "additions": 132, "deletions": 81}, "files": [{"sha": "87def3a76ce730774d302a49862e5573c631960f", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 132, "deletions": 81, "changes": 213, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51c40324f3965ff95b3b2696ac10142d765aad41/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51c40324f3965ff95b3b2696ac10142d765aad41/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=51c40324f3965ff95b3b2696ac10142d765aad41", "patch": "@@ -48,7 +48,7 @@ entitled ``GNU Free Documentation License''.\n @title GNAT Reference Manual\n @subtitle GNAT, The GNU Ada 95 Compiler\n @subtitle GCC version @value{version-GCC}\n-@author Ada Core Technologies, Inc.\n+@author AdaCore\n \n @page\n @vskip 0pt plus 1filll\n@@ -103,6 +103,7 @@ Implementation Defined Pragmas\n * Pragma Ada_83::\n * Pragma Ada_95::\n * Pragma Ada_05::\n+* Pragma Ada_2005::\n * Pragma Annotate::\n * Pragma Assert::\n * Pragma Ast_Entry::\n@@ -166,7 +167,6 @@ Implementation Defined Pragmas\n * Pragma Polling::\n * Pragma Profile (Ravenscar)::\n * Pragma Profile (Restricted)::\n-* Pragma Propagate_Exceptions::\n * Pragma Psect_Object::\n * Pragma Pure_Function::\n * Pragma Restriction_Warnings::\n@@ -643,6 +643,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Ada_83::\n * Pragma Ada_95::\n * Pragma Ada_05::\n+* Pragma Ada_2005::\n * Pragma Annotate::\n * Pragma Assert::\n * Pragma Ast_Entry::\n@@ -706,7 +707,6 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Polling::\n * Pragma Profile (Ravenscar)::\n * Pragma Profile (Restricted)::\n-* Pragma Propagate_Exceptions::\n * Pragma Psect_Object::\n * Pragma Pure_Function::\n * Pragma Restriction_Warnings::\n@@ -819,6 +819,19 @@ contexts.  This pragma is useful when writing a reusable component that\n itself uses Ada 2005 features, but which is intended to be usable from\n either Ada 83 or Ada 95 programs.\n \n+@node Pragma Ada_2005\n+@unnumberedsec Pragma Ada_2005\n+@findex Ada_2005\n+@noindent\n+Syntax:\n+@smallexample @c ada\n+pragma Ada_2005;\n+@end smallexample\n+\n+@noindent\n+This configuration pragma is a synonym for pragma Ada_05 and has the\n+same syntax and effect.\n+\n @node Pragma Annotate\n @unnumberedsec Pragma Annotate\n @findex Annotate\n@@ -2916,21 +2929,25 @@ also has no effect in DEC Ada 83 for OpenVMS Alpha Systems.\n Syntax:\n \n @smallexample @c ada\n-pragma No_Return (procedure_local_NAME);\n+pragma No_Return (procedure_local_NAME @{, procedure_local_NAME@});\n @end smallexample\n \n @noindent\n-@var{procedure_local_NAME} must refer to one or more procedure\n+Each @var{procedure_local_NAME} argument must refer to one or more procedure\n declarations in the current declarative part.  A procedure to which this\n-pragma is applied may not contain any explicit @code{return} statements,\n-and also may not contain any implicit return statements from falling off\n-the end of a statement sequence.  One use of this pragma is to identify\n-procedures whose only purpose is to raise an exception.\n-\n-Another use of this pragma is to suppress incorrect warnings about\n-missing returns in functions, where the last statement of a function\n+pragma is applied may not contain any explicit @code{return} statements.\n+In addition, if the procedure contains any implicit returns from falling\n+off the end of a statement sequence, then execution of that implicit\n+return will cause Program_Error to be raised.\n+\n+One use of this pragma is to identify procedures whose only purpose is to raise\n+an exception. Another use of this pragma is to suppress incorrect warnings\n+about missing returns in functions, where the last statement of a function\n statement sequence is a call to such a procedure.\n \n+Note that in Ada 2005 mode, this pragma is part of the language, and is\n+identical in effect to the pragma as implemented in Ada 95 mode.\n+\n @node Pragma No_Strict_Aliasing\n @unnumberedsec Pragma No_Strict_Aliasing\n @findex No_Strict_Aliasing\n@@ -3340,46 +3357,6 @@ This set of restrictions causes the automatic selection of a simplified\n version of the run time that provides improved performance for the\n limited set of tasking functionality permitted by this set of restrictions.\n \n-@node Pragma Propagate_Exceptions\n-@unnumberedsec Pragma Propagate_Exceptions\n-@findex Propagate_Exceptions\n-@cindex Zero Cost Exceptions\n-@noindent\n-Syntax:\n-\n-@smallexample @c ada\n-pragma Propagate_Exceptions (subprogram_local_NAME);\n-@end smallexample\n-\n-@noindent\n-This pragma indicates that the given entity, which is the name of an\n-imported foreign-language subprogram may receive an Ada exception,\n-and that the exception should be propagated.  It is relevant only if\n-zero cost exception handling is in use, and is thus never needed if\n-the alternative @code{longjmp} / @code{setjmp} implementation of\n-exceptions is used (although it is harmless to use it in such cases).\n-\n-The implementation of fast exceptions always properly propagates\n-exceptions through Ada code, as described in the Ada Reference Manual.\n-However, this manual is silent about the propagation of exceptions\n-through foreign code.  For example, consider the\n-situation where @code{P1} calls\n-@code{P2}, and @code{P2} calls @code{P3}, where\n-@code{P1} and @code{P3} are in Ada, but @code{P2} is in C@.\n-@code{P3} raises an Ada exception.  The question is whether or not\n-it will be propagated through @code{P2} and can be handled in\n-@code{P1}.\n-\n-For the @code{longjmp} / @code{setjmp} implementation of exceptions,\n-the answer is always yes.  For some targets on which zero cost exception\n-handling is implemented, the answer is also always yes.  However, there\n-are some targets, notably in the current version all x86 architecture\n-targets, in which the answer is that such propagation does not\n-happen automatically.  If such propagation is required on these\n-targets, it is mandatory to use @code{Propagate_Exceptions} to\n-name all foreign language routines through which Ada exceptions\n-may be propagated.\n-\n @node Pragma Psect_Object\n @unnumberedsec Pragma Psect_Object\n @findex Psect_Object\n@@ -3450,6 +3427,11 @@ applies to the underlying renamed function.  This can be used to\n disambiguate cases of overloading where some but not all functions\n in a set of overloaded functions are to be designated as pure.\n \n+If pragma @code{Pure_Function} is applied to a library level function, the\n+function is also considered pure from an optimization point of view, but the\n+unit is not a Pure unit in the categorization sense. So for example, a function\n+thus marked is free to @code{with} non-pure units.\n+\n @node Pragma Restriction_Warnings\n @unnumberedsec Pragma Restriction_Warnings\n @findex Restriction_Warnings\n@@ -4115,7 +4097,10 @@ effects.\n \n If @code{local_NAME} identifies more than one matching homonym in the\n current scope, then the entity most recently declared is the one to which\n-the pragma applies.\n+the pragma applies. Note that in the case of accept formals, the pragma\n+Unreferenced may appear immediately after the keyword @code{do} which\n+allows the indication of whether or not accept formals are referenced\n+or not to be given individually for each accept statement.\n \n The left hand side of an assignment does not count as a reference for the\n purpose of this pragma. Thus it is fine to assign to an entity for which\n@@ -5153,6 +5138,17 @@ would preclude their use as numbers).  This is used internally for the\n construction of values of the floating-point attributes from the file\n @file{ttypef.ads}, but may also be used by user programs.\n \n+For example, the following program prints the first 50 digits of pi:\n+\n+@smallexample @c ada\n+with Text_IO; use Text_IO;\n+with Ada.Numerics;\n+procedure Pi is\n+begin\n+   Put (Ada.Numerics.Pi'Universal_Literal_String);\n+end;\n+@end smallexample\n+\n @node Unrestricted_Access\n @unnumberedsec Unrestricted_Access\n @cindex @code{Access}, unrestricted\n@@ -7376,6 +7372,57 @@ from Boolean). This is intended for use in safety critical programs\n where the certification protocol requires the use of short-circuit\n (and then, or else) forms for all composite boolean operations.\n \n+@item No_Dispatching_Calls\n+@findex No_Dispatching_Calls\n+This restriction ensures at compile time that the code generated by the\n+compiler involves no dispatching calls. The use of this restriction allows the\n+safe use of record extensions and membership tests and ensures that the code \n+contains no indirect calls through a dispatching mechanism. (Note that this\n+includes internally-generated calls created by the compiler, for example in\n+the implementation of the predefined attributes on class-wide objects.) The\n+membership test is allowed in the presence of this restriction, because its\n+implementation requires no dispatching. The following example indicates\n+constructs that violate this restriction.\n+\n+@smallexample\n+package Pkg is\n+  type T is tagged record\n+    Data : Natural;\n+  end record;\n+  procedure P (X : T);\n+\n+  type DT is new T with record\n+    More_Data : Natural;\n+  end record;\n+  procedure Q (X : DT);\n+end Pkg;\n+\n+with Pkg; use Pkg;\n+procedure Example is\n+  procedure Test (O : T'Class) is\n+    N : Natural := O'Size; --  Error: Dispatching call\n+  begin\n+    if O in DT'Class then  --  OK   : Membership test\n+       Q (DT (O));         --  OK   : Type conversion plus direct call         \n+    else\n+       P (O);              --  Error: Dispatching call\n+    end if;\n+  end Test;\n+\n+  Obj : DT;\n+begin\n+  P (Obj);                 --  OK   : Direct call\n+  P (T (Obj));             --  OK   : Type conversion plus direct call\n+  P (T'Class (Obj));       --  Error: Dispatching call\n+\n+  Test (Obj);              --  OK   : Type conversion\n+\n+  if Obj in T'Class then   --  OK   : Membership test\n+     null;\n+  end if;\n+end Example;\n+@end smallexample\n+\n @item No_Dynamic_Attachment\n @findex No_Dynamic_Attachment\n This restriction ensures that there is no call to any of the operations\n@@ -7429,7 +7476,8 @@ or by rejecting any construct that would otherwise generate an implicit\n conditional. Note that this check does not include run time constraint\n checks, which on some targets may generate implicit conditionals as\n well. To control the latter, constraint checks can be suppressed in the\n-normal manner.\n+normal manner. Constructs generating implicit conditionals include comparisons\n+of composite objects and the Max/Min attributes.\n \n @item No_Implicit_Dynamic_Code\n @findex No_Implicit_Dynamic_Code\n@@ -7513,15 +7561,6 @@ the partition.  It is similar in effect to the use of @code{Max_Tasks => 0}\n except that violations are caught at compile time and cause an error message\n to be output either by the compiler or binder.\n \n-@item No_Wide_Characters\n-@findex No_Wide_Characters\n-This restriction ensures at compile time that no uses of the types\n-@code{Wide_Character} or @code{Wide_String} or corresponding wide\n-wide types\n-appear, and that no wide or wide wide string or character literals\n-appear in the program (that is literals representing characters not in\n-type @code{Character}.\n-\n @item Static_Priorities\n @findex Static_Priorities\n This restriction ensures at compile time that all priority expressions\n@@ -7605,6 +7644,15 @@ identifiers (other than @code{No_Implementation_Restrictions} itself)\n are present.  With this restriction, the only other restriction identifiers\n that can be used are those defined in the Ada 95 Reference Manual.\n \n+@item No_Wide_Characters\n+@findex No_Wide_Characters\n+This restriction ensures at compile time that no uses of the types\n+@code{Wide_Character} or @code{Wide_String} or corresponding wide\n+wide types\n+appear, and that no wide or wide wide string or character literals\n+appear in the program (that is literals representing characters not in\n+type @code{Character}.\n+\n @end table\n \n @sp 1\n@@ -8945,9 +8993,12 @@ task definition a pragma of the form:\n \n @noindent\n Then @code{Default_Stack_Size} can be defined in a global package, and\n-modified as required.  Any tasks requiring stack sizes different from the\n+modified as required. Any tasks requiring stack sizes different from the\n default can have an appropriate alternative reference in the pragma.\n \n+You can also use the @code{-d} binder switch to modify the default stack\n+size.\n+\n For access types, the @code{Storage_Size} clause specifies the maximum\n space available for allocation of objects of the type.  If this space is\n exceeded then @code{Storage_Error} will be raised by an allocation attempt.\n@@ -11089,8 +11140,8 @@ There is no internal buffering of any kind at the Ada library level. The only\n buffering is that provided at the system level in the implementation of the\n library routines that support streams. This facilitates shared use of these\n streams by mixed language programs. Note though that system level buffering is\n-explictly enabled at elaboration of the standard I/O packages and that can have\n-an impact on mixed language programs, in particular those using I/O before\n+explicitly enabled at elaboration of the standard I/O packages and that can\n+have an impact on mixed language programs, in particular those using I/O before\n calling the Ada elaboration routine (e.g. adainit). It is recommended to call\n the Ada elaboration routine before performing any I/O or when impractical,\n flush the common I/O streams and in particular Standard_Output before\n@@ -12504,7 +12555,7 @@ is common to both bindings.\n @cindex @code{GNAT.Altivec.Vector_Types} (@file{g-alvety.ads})\n @cindex AltiVec\n \n-@noindent \n+@noindent\n This package exposes the various vector types part of the Ada binding\n to AltiVec facilities.\n \n@@ -14025,23 +14076,23 @@ except for OpenVMS.\n \n @menu\n * Static constant aggregates with static bounds::\n-* Constant aggregates with an unconstrained nominal types::\n+* Constant aggregates with unconstrained nominal types::\n * Aggregates with static bounds::\n * Aggregates with non-static bounds::\n * Aggregates in assignment statements::\n @end menu\n \n @noindent\n-Aggregate have a rich syntax and allow the user to specify the values of\n+Aggregates have a rich syntax and allow the user to specify the values of\n complex data structures by means of a single construct.  As a result, the\n code generated for aggregates can be quite complex and involve loops, case\n statements and multiple assignments.  In the simplest cases, however, the\n compiler will recognize aggregates whose components and constraints are\n fully static, and in those cases the compiler will generate little or no\n executable code.  The following is an outline of the code that GNAT generates\n-for various aggregate constructs.  For further details, the user will find it\n+for various aggregate constructs.  For further details, you will find it\n useful to examine the output produced by the -gnatG flag to see the expanded\n-source that is input to the code generator.  The user will also want to examine\n+source that is input to the code generator.  You may also want to examine\n the assembly code generated at various levels of optimization.\n \n The code generated for aggregates depends on the context, the component values,\n@@ -14056,15 +14107,15 @@ component values and static subtypes also lead to simpler code.\n For the declarations:\n @smallexample @c ada\n     type One_Dim is array (1..10) of integer;\n-    ar0 : constant One_Dim := ( 1, 2, 3, 4, 5, 6, 7, 8, 9, 0);\n+    ar0 : constant One_Dim := (1, 2, 3, 4, 5, 6, 7, 8, 9, 0);\n @end smallexample\n \n @noindent\n GNAT generates no executable code: the constant ar0 is placed in static memory.\n The same is true for constant aggregates with named associations:\n \n @smallexample @c ada\n-    Cr1 : constant One_Dim := (4 => 16, 2 => 4, 3 => 9, 1=> 1);\n+    Cr1 : constant One_Dim := (4 => 16, 2 => 4, 3 => 9, 1 => 1, 5 .. 10 => 0);\n     Cr3 : constant One_Dim := (others => 7777);\n @end smallexample\n \n@@ -14098,8 +14149,8 @@ Zero1: constant two_dim := (1..3 => (1..3 => 0));\n Zero2: constant two_dim := (others => (others => 0));\n @end smallexample\n \n-@node Constant aggregates with an unconstrained nominal types\n-@subsection Constant aggregates with an unconstrained nominal types\n+@node Constant aggregates with unconstrained nominal types\n+@subsection Constant aggregates with unconstrained nominal types\n \n @noindent\n In such cases the aggregate itself establishes the subtype, so that\n@@ -14122,7 +14173,7 @@ for it as a combination of individual assignments and loops over the target\n object.  The declarations\n \n @smallexample @c ada\n-       Cr_Var1 : One_Dim := (2, 5, 7, 11);\n+       Cr_Var1 : One_Dim := (2, 5, 7, 11, 0, 0, 0, 0, 0, 0);\n        Cr_Var2 : One_Dim := (others > -1);\n @end smallexample\n \n@@ -14624,14 +14675,14 @@ for building shared libraries.\n Expression must be a path name. The attribute defines the\n directory in which the sources of the interfaces of a Stand-alone Library will\n be copied.  The directory must exist, must be distinct from the project's\n-object directory and source directories of all project in the project tree,\n+object directory and source directories of all projects in the project tree,\n and must be writable.\n \n @item  Library_Src_Dir\n Expression must be a path name. The attribute defines the\n directory in which the ALI files of a Library will\n be copied.  The directory must exist, must be distinct from the project's\n-object directory and source directoriesof all project in the project tree,\n+object directory and source directories of all projects in the project tree,\n and must be writable.\n \n @item  Library_Symbol_File\n@@ -14665,7 +14716,7 @@ object files of the interfaces that are not in the reference symbol file,\n these symbols are put at the end of the list in the newly created symbol file\n and the minor ID is increased.\n \n-\"controlled\": the attribute Library_Reference_Symbol_File must be difined.\n+\"controlled\": the attribute Library_Reference_Symbol_File must be defined.\n The library will fail to build if the exported symbols in the object files of\n the interfaces do not match exactly the symbol in the symbol file.\n \n@@ -15037,7 +15088,7 @@ specified.\n This is an associative array attribute. Its domain is\n a set of file names. Its range is a string list that specifies\n options to be used when binding the named main file. If a main file\n-is not specified in the Switches attribute, it is boundt with the\n+is not specified in the Switches attribute, it is bound with the\n options specified by Default_Switches of its language, if defined.\n @end table\n \n@@ -15065,7 +15116,7 @@ options specified by Default_Switches of its language, if defined.\n \n @item  Linker_Options\n This is a string list attribute. Its value specifies additional options that\n-be givent to the linker when linking an executable. This attribute is not\n+be given to the linker when linking an executable. This attribute is not\n used in the main project, only in projects imported directly or indirectly.\n \n @end table"}]}