{"sha": "286fa9840d9358f8d001b7b47b29f6499e9446f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg2ZmE5ODQwZDkzNThmOGQwMDFiN2I0N2IyOWY2NDk5ZTk0NDZmNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-07-11T07:04:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-07-11T07:04:59Z"}, "message": "tree-ssa-loop-ivcanon.c (tree_unroll_loops_completely_1): Rework father_bb setting in a way to avoid propagating constants multiple times...\n\n2018-07-10  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-loop-ivcanon.c (tree_unroll_loops_completely_1):\n\tRework father_bb setting in a way to avoid propagating constants\n\tmultiple times on a loop body.\n\nFrom-SVN: r262550", "tree": {"sha": "b05af948e966f2731876b6f1f5da159442a273bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b05af948e966f2731876b6f1f5da159442a273bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/286fa9840d9358f8d001b7b47b29f6499e9446f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/286fa9840d9358f8d001b7b47b29f6499e9446f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/286fa9840d9358f8d001b7b47b29f6499e9446f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/286fa9840d9358f8d001b7b47b29f6499e9446f5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7b8bddb4d367a982edae67e14209fabc0e3e0655", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b8bddb4d367a982edae67e14209fabc0e3e0655", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b8bddb4d367a982edae67e14209fabc0e3e0655"}], "stats": {"total": 42, "additions": 37, "deletions": 5}, "files": [{"sha": "8250b44e49a5ab0cf1bfdde7a7bb7452154ce4e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/286fa9840d9358f8d001b7b47b29f6499e9446f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/286fa9840d9358f8d001b7b47b29f6499e9446f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=286fa9840d9358f8d001b7b47b29f6499e9446f5", "patch": "@@ -1,3 +1,9 @@\n+2018-07-10  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-loop-ivcanon.c (tree_unroll_loops_completely_1):\n+\tRework father_bb setting in a way to avoid propagating constants\n+\tmultiple times on a loop body.\n+\n 2018-07-10  Mark Wielaard  <mark@klomp.org>\n \n \tPR debug/86459"}, {"sha": "326589f63c364b79a6c8fa63eddc70e068d2c93a", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/286fa9840d9358f8d001b7b47b29f6499e9446f5/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/286fa9840d9358f8d001b7b47b29f6499e9446f5/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=286fa9840d9358f8d001b7b47b29f6499e9446f5", "patch": "@@ -1378,17 +1378,37 @@ tree_unroll_loops_completely_1 (bool may_increase_size, bool unroll_outer,\n   /* Process inner loops first.  Don't walk loops added by the recursive\n      calls because SSA form is not up-to-date.  They can be handled in the\n      next iteration.  */\n+  bitmap child_father_bbs = NULL;\n   for (inner = loop->inner; inner != NULL; inner = inner->next)\n     if ((unsigned) inner->num < num)\n-      changed |= tree_unroll_loops_completely_1 (may_increase_size,\n-\t\t\t\t\t\t unroll_outer, father_bbs,\n-\t\t\t\t\t\t inner);\n+      {\n+\tif (!child_father_bbs)\n+\t  child_father_bbs = BITMAP_ALLOC (NULL);\n+\tif (tree_unroll_loops_completely_1 (may_increase_size, unroll_outer,\n+\t\t\t\t\t    child_father_bbs, inner))\n+\t  {\n+\t    bitmap_ior_into (father_bbs, child_father_bbs);\n+\t    bitmap_clear (child_father_bbs);\n+\t    changed = true;\n+\t  }\n+      }\n+  if (child_father_bbs)\n+    BITMAP_FREE (child_father_bbs);\n \n   /* If we changed an inner loop we cannot process outer loops in this\n      iteration because SSA form is not up-to-date.  Continue with\n      siblings of outer loops instead.  */\n   if (changed)\n-    return true;\n+    {\n+      /* If we are recorded as father clear all other fathers that\n+         are necessarily covered already to avoid redundant work.  */\n+      if (bitmap_bit_p (father_bbs, loop->header->index))\n+\t{\n+\t  bitmap_clear (father_bbs);\n+\t  bitmap_set_bit (father_bbs, loop->header->index);\n+\t}\n+      return true;\n+    }\n \n   /* Don't unroll #pragma omp simd loops until the vectorizer\n      attempts to vectorize those.  */\n@@ -1418,7 +1438,13 @@ tree_unroll_loops_completely_1 (bool may_increase_size, bool unroll_outer,\n \t computations; otherwise, the size might blow up before the\n \t iteration is complete and the IR eventually cleaned up.  */\n       if (loop_outer (loop_father))\n-\tbitmap_set_bit (father_bbs, loop_father->header->index);\n+\t{\n+\t  /* Once we process our father we will have processed\n+\t     the fathers of our children as well, so avoid doing\n+\t     redundant work and clear fathers we've gathered sofar.  */\n+\t  bitmap_clear (father_bbs);\n+\t  bitmap_set_bit (father_bbs, loop_father->header->index);\n+\t}\n \n       return true;\n     }"}]}