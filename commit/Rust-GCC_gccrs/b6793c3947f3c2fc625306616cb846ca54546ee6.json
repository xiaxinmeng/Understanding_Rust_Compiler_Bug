{"sha": "b6793c3947f3c2fc625306616cb846ca54546ee6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY3OTNjMzk0N2YzYzJmYzYyNTMwNjYxNmNiODQ2Y2E1NDU0NmVlNg==", "commit": {"author": {"name": "Dennis Glatting", "email": "dennisg@gnu.org", "date": "1991-11-23T22:18:29Z"}, "committer": {"name": "Dennis Glatting", "email": "dennisg@gnu.org", "date": "1991-11-23T22:18:29Z"}, "message": "deleted hashIndex() and moved it to hash-inline.h converted...\n\ndeleted hashIndex() and moved it to hash-inline.h\nconverted hash_value_for_key() to a inline and moved it to hash-inline.h.\n\nFrom-SVN: r67", "tree": {"sha": "48f247ddc3dde5ed958e69fae8bd757c75250d55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48f247ddc3dde5ed958e69fae8bd757c75250d55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6793c3947f3c2fc625306616cb846ca54546ee6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6793c3947f3c2fc625306616cb846ca54546ee6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6793c3947f3c2fc625306616cb846ca54546ee6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6793c3947f3c2fc625306616cb846ca54546ee6/comments", "author": null, "committer": null, "parents": [{"sha": "7e8ead54c20a5d007f2f4169acd9353403a3fc38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e8ead54c20a5d007f2f4169acd9353403a3fc38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e8ead54c20a5d007f2f4169acd9353403a3fc38"}], "stats": {"total": 47, "additions": 12, "deletions": 35}, "files": [{"sha": "3bef4f8535d708dd21582710fd15ab7a283e621f", "filename": "gcc/objc/hash.c", "status": "modified", "additions": 12, "deletions": 35, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6793c3947f3c2fc625306616cb846ca54546ee6/gcc%2Fobjc%2Fhash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6793c3947f3c2fc625306616cb846ca54546ee6/gcc%2Fobjc%2Fhash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fhash.c?ref=b6793c3947f3c2fc625306616cb846ca54546ee6", "patch": "@@ -16,10 +16,17 @@\n  * along with this program; if not, write to the Free Software\n  * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n  * \n-  $Header: /usr/user/dennis_glatting/ObjC/c-runtime/lib/RCS/hash.c,v 0.5 1991/11/20 23:29:20 dennisg Exp dennisg $\n+  $Header: /usr/user/dennis_glatting/ObjC/c-runtime/lib/RCS/hash.c,v 0.6 1991/11/21 22:27:06 dennisg Exp dennisg $\n   $Author: dennisg $\n-  $Date: 1991/11/20 23:29:20 $\n+  $Date: 1991/11/21 22:27:06 $\n   $Log: hash.c,v $\n+ * Revision 0.6  1991/11/21  22:27:06  dennisg\n+ * changed hash value calculation.\n+ * func name changed from hashValue() to hashIndex().  the\n+ * func really calculated a index anyway.\n+ * changed hash func impl.  essentially it was calculating a hash value\n+ * from a hash value.  this is a implementation thing.\n+ *\n  * Revision 0.5  1991/11/20  23:29:20  dennisg\n  * converted hashIndex() to a inline.\n  *\n@@ -43,6 +50,7 @@\n  \n \n #include  <hash.h>\n+#include\t<hash-inline.h>\n #include  <ObjC.h>\n #include\t<ObjC-private.h>\n \n@@ -63,15 +71,6 @@\n \t(((cache)->sizeOfHash * 175 ) / 100 )\n \n \n-static inline u_int hashIndex( Cache_t theCache, void* aKey ) {\n-\n-\n-\tassert (sizeof (u_int) == sizeof (void*));\n-\t\n-\treturn ((u_int)aKey) % theCache->sizeOfHash ;\n-}\n-\n-\n Cache_t hash_new( u_int sizeOfHash ) {\n \n   Cache_t retCache;\n@@ -118,7 +117,7 @@ void hash_delete( Cache_t theCache ) {\n \n void hash_add( Cache_t* theCache, void* aKey, void* aValue ) {\n \n-  u_int       indx = hashIndex( *theCache, aKey );\n+  u_short     indx = hashIndex( *theCache, aKey );\n   CacheNode_t aCacheNode = calloc( 1, sizeof( CacheNode ));\n \n \n@@ -190,7 +189,7 @@ void hash_add( Cache_t* theCache, void* aKey, void* aValue ) {\n \n void hash_remove( Cache_t theCache, void* aKey ) {\n \n-  u_int       indx = hashIndex( theCache, aKey );\n+  u_short     indx = hashIndex( theCache, aKey );\n   CacheNode_t aCacheNode = ( *theCache->theNodeTable )[ indx ];\n   \n   \n@@ -228,28 +227,6 @@ void hash_remove( Cache_t theCache, void* aKey ) {\n }\n \n \n-void* hash_value_for_key( Cache_t theCache, void* aKey ) {\n-\n-  u_int       indx = hashIndex( theCache, aKey );\n-  CacheNode_t aCacheNode = ( *theCache->theNodeTable )[ indx ];\n-  void*       retVal = NULL;\n-  \n-\n-  if( aCacheNode ) {\n-    BOOL  found = NO;\n-  \n-    do {\n-      if( aCacheNode->theKey == aKey )\n-        retVal = aCacheNode->theValue, found = YES;\n-      else\n-        aCacheNode = aCacheNode->nextNode;\n-    } while( !found && aCacheNode );\n-  }\n-  \n-  return retVal;\n-}\n-\n-\n CacheNode_t hash_next( Cache_t theCache, CacheNode_t aCacheNode ) {\n \n   CacheNode_t theCacheNode = aCacheNode;"}]}