{"sha": "054b4005fae9b2dee9d53c7daf1cab91fb1675c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU0YjQwMDVmYWU5YjJkZWU5ZDUzYzdkYWYxY2FiOTFmYjE2NzVjOQ==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2015-08-20T10:18:54Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2015-08-20T10:18:54Z"}, "message": "[AArch64] Break -mcpu tie between the compiler and assembler\n\ngcc/\n\n\t* common/config/aarch64/aarch64-common.c\n\t(AARCH64_CPU_NAME_LENGTH): Delete.\n\t(aarch64_option_extension): New.\n\t(all_extensions): Likewise.\n\t(processor_name_to_arch): Likewise.\n\t(arch_to_arch_name): Likewise.\n\t(all_cores): New.\n\t(all_architectures): Likewise.\n\t(aarch64_get_extension_string_for_isa_flags): Likewise.\n\t(aarch64_rewrite_selected_cpu): Change to rewrite CPU names to\n\tarchitecture names.\n\t* config/aarch64/aarch64-protos.h\n\t(aarch64_get_extension_string_for_isa_flags): New.\n\t* config/aarch64/aarch64.c (aarch64_print_extension): Delete.\n\t(aarch64_option_print): Get the string to print from\n\taarch64_get_extension_string_for_isa_flags.\n\t(aarch64_declare_function_name): Likewise.\n\t* config/aarch64/aarch64.h (BIG_LITTLE_SPEC): Rename to...\n\t(MCPU_TO_MARCH_SPEC): This.\n\t(ASM_CPU_SPEC): Use it.\n\t(BIG_LITTLE_SPEC_FUNCTIONS): Rename to...\n\t(MCPU_TO_MARCH_SPEC_FUNCTIONS): ...This.\n\t(EXTRA_SPEC_FUNCTIONS): Use it.\n\nFrom-SVN: r227028", "tree": {"sha": "9884b668d01728fa2694f6b5a006c43463bcf087", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9884b668d01728fa2694f6b5a006c43463bcf087"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/054b4005fae9b2dee9d53c7daf1cab91fb1675c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/054b4005fae9b2dee9d53c7daf1cab91fb1675c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/054b4005fae9b2dee9d53c7daf1cab91fb1675c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/054b4005fae9b2dee9d53c7daf1cab91fb1675c9/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dfd71aba57811c28d21a49909d9c6b96f5ae05ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfd71aba57811c28d21a49909d9c6b96f5ae05ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfd71aba57811c28d21a49909d9c6b96f5ae05ea"}], "stats": {"total": 208, "additions": 162, "deletions": 46}, "files": [{"sha": "a42d61e484aff24749343bbb5c4bc337208ea7b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/054b4005fae9b2dee9d53c7daf1cab91fb1675c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/054b4005fae9b2dee9d53c7daf1cab91fb1675c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=054b4005fae9b2dee9d53c7daf1cab91fb1675c9", "patch": "@@ -1,3 +1,29 @@\n+2015-08-20  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* common/config/aarch64/aarch64-common.c\n+\t(AARCH64_CPU_NAME_LENGTH): Delete.\n+\t(aarch64_option_extension): New.\n+\t(all_extensions): Likewise.\n+\t(processor_name_to_arch): Likewise.\n+\t(arch_to_arch_name): Likewise.\n+\t(all_cores): New.\n+\t(all_architectures): Likewise.\n+\t(aarch64_get_extension_string_for_isa_flags): Likewise.\n+\t(aarch64_rewrite_selected_cpu): Change to rewrite CPU names to\n+\tarchitecture names.\n+\t* config/aarch64/aarch64-protos.h\n+\t(aarch64_get_extension_string_for_isa_flags): New.\n+\t* config/aarch64/aarch64.c (aarch64_print_extension): Delete.\n+\t(aarch64_option_print): Get the string to print from\n+\taarch64_get_extension_string_for_isa_flags.\n+\t(aarch64_declare_function_name): Likewise.\n+\t* config/aarch64/aarch64.h (BIG_LITTLE_SPEC): Rename to...\n+\t(MCPU_TO_MARCH_SPEC): This.\n+\t(ASM_CPU_SPEC): Use it.\n+\t(BIG_LITTLE_SPEC_FUNCTIONS): Rename to...\n+\t(MCPU_TO_MARCH_SPEC_FUNCTIONS): ...This.\n+\t(EXTRA_SPEC_FUNCTIONS): Use it.\n+\n 2015-08-20  Simon Dardis  <simon.dardis@imgtec.com>\n \n \t* config/mips/mips.c (mips_expand_block_move): Enable inline memcpy"}, {"sha": "07c6bba45198867abce6857d7f147d193269aca9", "filename": "gcc/common/config/aarch64/aarch64-common.c", "status": "modified", "additions": 120, "deletions": 22, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/054b4005fae9b2dee9d53c7daf1cab91fb1675c9/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/054b4005fae9b2dee9d53c7daf1cab91fb1675c9/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c?ref=054b4005fae9b2dee9d53c7daf1cab91fb1675c9", "patch": "@@ -27,7 +27,7 @@\n #include \"common/common-target-def.h\"\n #include \"opts.h\"\n #include \"flags.h\"\n-#include \"errors.h\"\n+#include \"diagnostic.h\"\n \n #ifdef  TARGET_BIG_ENDIAN_DEFAULT\n #undef  TARGET_DEFAULT_TARGET_FLAGS\n@@ -107,36 +107,134 @@ aarch64_handle_option (struct gcc_options *opts,\n \n struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;\n \n-#define AARCH64_CPU_NAME_LENGTH 128\n+/* An ISA extension in the co-processor and main instruction set space.  */\n+struct aarch64_option_extension\n+{\n+  const char *const name;\n+  const unsigned long flags_on;\n+  const unsigned long flags_off;\n+};\n+\n+/* ISA extensions in AArch64.  */\n+static const struct aarch64_option_extension all_extensions[] =\n+{\n+#define AARCH64_OPT_EXTENSION(NAME, FLAGS_ON, FLAGS_OFF, FEATURE_STRING) \\\n+  {NAME, FLAGS_ON, FLAGS_OFF},\n+#include \"config/aarch64/aarch64-option-extensions.def\"\n+#undef AARCH64_OPT_EXTENSION\n+  {NULL, 0, 0}\n+};\n+\n+struct processor_name_to_arch\n+{\n+  const std::string processor_name;\n+  const enum aarch64_arch arch;\n+  const unsigned long flags;\n+};\n+\n+struct arch_to_arch_name\n+{\n+  const enum aarch64_arch arch;\n+  const std::string arch_name;\n+};\n+\n+/* Map processor names to the architecture revision they implement and\n+   the default set of architectural feature flags they support.  */\n+static const struct processor_name_to_arch all_cores[] =\n+{\n+#define AARCH64_CORE(NAME, X, IDENT, ARCH_IDENT, FLAGS, COSTS, IMP, PART) \\\n+  {NAME, AARCH64_ARCH_##ARCH_IDENT, FLAGS},\n+#include \"config/aarch64/aarch64-cores.def\"\n+#undef AARCH64_CORE\n+  {\"generic\", AARCH64_ARCH_8A, AARCH64_FL_FOR_ARCH8},\n+  {\"\", aarch64_no_arch, 0}\n+};\n+\n+/* Map architecture revisions to their string representation.  */\n+static const struct arch_to_arch_name all_architectures[] =\n+{\n+#define AARCH64_ARCH(NAME, CORE, ARCH_IDENT, ARCH, FLAGS) \\\n+  {AARCH64_ARCH_##ARCH_IDENT, NAME},\n+#include \"config/aarch64/aarch64-arches.def\"\n+#undef AARCH64_ARCH\n+  {aarch64_no_arch, \"\"}\n+};\n+\n+/* Return a string representation of ISA_FLAGS.  */\n+\n+std::string\n+aarch64_get_extension_string_for_isa_flags (unsigned long isa_flags)\n+{\n+  const struct aarch64_option_extension *opt = NULL;\n+  std::string outstr = \"\";\n+\n+  for (opt = all_extensions; opt->name != NULL; opt++)\n+    if ((isa_flags & opt->flags_on) == opt->flags_on)\n+      {\n+\toutstr += \"+\";\n+\toutstr += opt->name;\n+      }\n+  return outstr;\n+}\n \n-/* Truncate NAME at the first '.' character seen up to the first '+'\n-   or return NAME unmodified.  */\n+/* Attempt to rewrite NAME, which has been passed on the command line\n+   as a -mcpu option to an equivalent -march value.  If we can do so,\n+   return the new string, otherwise return an error.  */\n \n const char *\n aarch64_rewrite_selected_cpu (const char *name)\n {\n-  static char output_buf[AARCH64_CPU_NAME_LENGTH + 1] = {0};\n-  const char *bL_sep;\n-  const char *feats;\n-  size_t pref_size;\n-  size_t feat_size;\n-\n-  bL_sep = strchr (name, '.');\n-  if (!bL_sep)\n-    return name;\n+  std::string original_string (name);\n+  std::string extensions;\n+  std::string processor;\n+  size_t extension_pos = original_string.find_first_of ('+');\n \n-  feats = strchr (name, '+');\n-  feat_size = feats ? strnlen (feats, AARCH64_CPU_NAME_LENGTH) : 0;\n-  pref_size = bL_sep - name;\n+  /* Strip and save the extension string.  */\n+  if (extension_pos != std::string::npos)\n+    {\n+      processor = original_string.substr (0, extension_pos);\n+      extensions = original_string.substr (extension_pos,\n+\t\t\t\t\tstd::string::npos);\n+    }\n+  else\n+    {\n+      /* No extensions.  */\n+      processor = original_string;\n+    }\n \n-  if ((feat_size + pref_size) > AARCH64_CPU_NAME_LENGTH)\n-    internal_error (\"-mcpu string too large\");\n+  const struct processor_name_to_arch* p_to_a;\n+  for (p_to_a = all_cores;\n+       p_to_a->arch != aarch64_no_arch;\n+       p_to_a++)\n+    {\n+      if (p_to_a->processor_name == processor)\n+\tbreak;\n+    }\n \n-  strncpy (output_buf, name, pref_size);\n-  if (feats)\n-    strncpy (output_buf + pref_size, feats, feat_size);\n+  const struct arch_to_arch_name* a_to_an;\n+  for (a_to_an = all_architectures;\n+       a_to_an->arch != aarch64_no_arch;\n+       a_to_an++)\n+    {\n+      if (a_to_an->arch == p_to_a->arch)\n+\tbreak;\n+    }\n \n-  return output_buf;\n+  /* We couldn't find that proceesor name, or the processor name we\n+     found does not map to an architecture we understand.  */\n+  if (p_to_a->arch == aarch64_no_arch\n+      || a_to_an->arch == aarch64_no_arch)\n+    fatal_error (input_location, \"unknown value %qs for -mcpu\", name);\n+\n+  std::string outstr = a_to_an->arch_name\n+\t+ aarch64_get_extension_string_for_isa_flags (p_to_a->flags)\n+\t+ extensions;\n+\n+  /* We are going to memory leak here, nobody elsewhere\n+     in the callchain is going to clean up after us.  The alternative is\n+     to allocate a static buffer, and assert that it is big enough for our\n+     modified string, which seems much worse!  */\n+  return xstrdup (outstr.c_str ());\n }\n \n /* Called by the driver to rewrite a name passed to the -mcpu"}, {"sha": "06002d8c04b41cbe94976060ebb3f7c9c6fc0486", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/054b4005fae9b2dee9d53c7daf1cab91fb1675c9/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/054b4005fae9b2dee9d53c7daf1cab91fb1675c9/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=054b4005fae9b2dee9d53c7daf1cab91fb1675c9", "patch": "@@ -310,6 +310,7 @@ rtx aarch64_simd_gen_const_vector_dup (machine_mode, int);\n bool aarch64_simd_mem_operand_p (rtx);\n rtx aarch64_simd_vect_par_cnst_half (machine_mode, bool);\n rtx aarch64_tls_get_addr (void);\n+std::string aarch64_get_extension_string_for_isa_flags (unsigned long);\n tree aarch64_fold_builtin (tree, int, tree *, bool);\n unsigned aarch64_dbx_register_number (unsigned);\n unsigned aarch64_trampoline_size (void);"}, {"sha": "8e28ababef71c79a2f3655baf1fd267865560b56", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/054b4005fae9b2dee9d53c7daf1cab91fb1675c9/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/054b4005fae9b2dee9d53c7daf1cab91fb1675c9/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=054b4005fae9b2dee9d53c7daf1cab91fb1675c9", "patch": "@@ -7890,20 +7890,6 @@ initialize_aarch64_code_model (struct gcc_options *opts)\n      aarch64_cmodel = opts->x_aarch64_cmodel_var;\n }\n \n-/* Print to F the architecture features specified by ISA_FLAGS.  */\n-\n-static void\n-aarch64_print_extension (FILE *f, unsigned long isa_flags)\n-{\n-  const struct aarch64_option_extension *opt = NULL;\n-\n-  for (opt = all_extensions; opt->name != NULL; opt++)\n-    if ((isa_flags & opt->flags_on) == opt->flags_on)\n-      asm_fprintf (f, \"+%s\", opt->name);\n-\n-  asm_fprintf (f, \"\\n\");\n-}\n-\n /* Implement TARGET_OPTION_SAVE.  */\n \n static void\n@@ -7936,10 +7922,12 @@ aarch64_option_print (FILE *file, int indent, struct cl_target_option *ptr)\n     = aarch64_get_tune_cpu (ptr->x_explicit_tune_core);\n   unsigned long isa_flags = ptr->x_aarch64_isa_flags;\n   const struct processor *arch = aarch64_get_arch (ptr->x_explicit_arch);\n+  std::string extension\n+    = aarch64_get_extension_string_for_isa_flags (isa_flags);\n \n   fprintf (file, \"%*sselected tune = %s\\n\", indent, \"\", cpu->name);\n-  fprintf (file, \"%*sselected arch = %s\", indent, \"\", arch->name);\n-  aarch64_print_extension (file, isa_flags);\n+  fprintf (file, \"%*sselected arch = %s%s\\n\", indent, \"\",\n+\t   arch->name, extension.c_str ());\n }\n \n static GTY(()) tree aarch64_previous_fndecl;\n@@ -10663,8 +10651,11 @@ aarch64_declare_function_name (FILE *stream, const char* name,\n   const struct processor *this_arch\n     = aarch64_get_arch (targ_options->x_explicit_arch);\n \n-  asm_fprintf (asm_out_file, \"\\t.arch %s\", this_arch->name);\n-  aarch64_print_extension (asm_out_file, targ_options->x_aarch64_isa_flags);\n+  unsigned long isa_flags = targ_options->x_aarch64_isa_flags;\n+  std::string extension\n+    = aarch64_get_extension_string_for_isa_flags (isa_flags);\n+  asm_fprintf (asm_out_file, \"\\t.arch %s%s\\n\",\n+\t       this_arch->name, extension.c_str ());\n \n   /* Print the cpu name we're tuning for in the comments, might be\n      useful to readers of the generated asm.  */"}, {"sha": "1e5f5dbd4fa3b11c167df8cb5965c41c9362a5ee", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/054b4005fae9b2dee9d53c7daf1cab91fb1675c9/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/054b4005fae9b2dee9d53c7daf1cab91fb1675c9/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=054b4005fae9b2dee9d53c7daf1cab91fb1675c9", "patch": "@@ -887,30 +887,30 @@ extern enum aarch64_code_model aarch64_cmodel;\n   {\"arch\", \"%{!march=*:%{!mcpu=*:-march=%(VALUE)}}\" },\t\\\n   {\"cpu\",  \"%{!march=*:%{!mcpu=*:-mcpu=%(VALUE)}}\" },\n \n-#define BIG_LITTLE_SPEC \\\n-   \" %{mcpu=*:-mcpu=%:rewrite_mcpu(%{mcpu=*:%*})}\"\n+#define MCPU_TO_MARCH_SPEC \\\n+   \" %{mcpu=*:-march=%:rewrite_mcpu(%{mcpu=*:%*})}\"\n \n extern const char *aarch64_rewrite_mcpu (int argc, const char **argv);\n-#define BIG_LITTLE_CPU_SPEC_FUNCTIONS \\\n+#define MCPU_TO_MARCH_SPEC_FUNCTIONS \\\n   { \"rewrite_mcpu\", aarch64_rewrite_mcpu },\n \n #if defined(__aarch64__)\n extern const char *host_detect_local_cpu (int argc, const char **argv);\n # define EXTRA_SPEC_FUNCTIONS\t\t\t\t\t\t\\\n   { \"local_cpu_detect\", host_detect_local_cpu },\t\t\t\\\n-  BIG_LITTLE_CPU_SPEC_FUNCTIONS\n+  MCPU_TO_MARCH_SPEC_FUNCTIONS\n \n # define MCPU_MTUNE_NATIVE_SPECS\t\t\t\t\t\\\n    \" %{march=native:%<march=native %:local_cpu_detect(arch)}\"\t\t\\\n    \" %{mcpu=native:%<mcpu=native %:local_cpu_detect(cpu)}\"\t\t\\\n    \" %{mtune=native:%<mtune=native %:local_cpu_detect(tune)}\"\n #else\n # define MCPU_MTUNE_NATIVE_SPECS \"\"\n-# define EXTRA_SPEC_FUNCTIONS BIG_LITTLE_CPU_SPEC_FUNCTIONS\n+# define EXTRA_SPEC_FUNCTIONS MCPU_TO_MARCH_SPEC_FUNCTIONS\n #endif\n \n #define ASM_CPU_SPEC \\\n-   BIG_LITTLE_SPEC\n+   MCPU_TO_MARCH_SPEC\n \n #define EXTRA_SPECS\t\t\t\t\t\t\\\n   { \"asm_cpu_spec\",\t\tASM_CPU_SPEC }"}]}