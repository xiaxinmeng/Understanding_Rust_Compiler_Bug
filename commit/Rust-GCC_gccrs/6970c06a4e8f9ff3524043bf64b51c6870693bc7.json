{"sha": "6970c06a4e8f9ff3524043bf64b51c6870693bc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk3MGMwNmE0ZThmOWZmMzUyNDA0M2JmNjRiNTFjNjg3MDY5M2JjNw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-03-17T21:16:07Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-03-17T21:16:07Z"}, "message": "c-tree.h (struct lang_identifier): Remove error_locus field.\n\n\t* c-tree.h (struct lang_identifier): Remove error_locus field.\n\t(IDENTIFIER_ERROR_LOCUS): Kill.\n\t(record_function_scope_shadow): New prototype.\n\t* c-typeck.c (build_external_ref): Don't complain if\n\tdecl is error_mark_node.  When not at file scope, bind the\n\tdecl's local value to error_mark_node to suppress further\n\twarnings, instead of setting IDENTIFIER_ERROR_LOCUS.\n\n\t* c-decl.c (get_function_binding_level): New static function.\n\t(record_function_scope_shadow): New exported function.\n\t(c_make_fname_decl): Use get_function_binding_level.\n\nFrom-SVN: r64504", "tree": {"sha": "31b103a6bcb45591e0e91a4f7c7f9fe1d63b1dfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31b103a6bcb45591e0e91a4f7c7f9fe1d63b1dfb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6970c06a4e8f9ff3524043bf64b51c6870693bc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6970c06a4e8f9ff3524043bf64b51c6870693bc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6970c06a4e8f9ff3524043bf64b51c6870693bc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6970c06a4e8f9ff3524043bf64b51c6870693bc7/comments", "author": null, "committer": null, "parents": [{"sha": "0fef2ffc6fb58f17d68b9d50d0eec76315ec09ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fef2ffc6fb58f17d68b9d50d0eec76315ec09ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fef2ffc6fb58f17d68b9d50d0eec76315ec09ba"}], "stats": {"total": 95, "additions": 65, "deletions": 30}, "files": [{"sha": "e9702e5dca704e684fe93fcf8128cf648d104da1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6970c06a4e8f9ff3524043bf64b51c6870693bc7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6970c06a4e8f9ff3524043bf64b51c6870693bc7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6970c06a4e8f9ff3524043bf64b51c6870693bc7", "patch": "@@ -1,3 +1,17 @@\n+2003-03-17  Zack Weinberg <zack@codesourcery.com>\n+\n+\t* c-tree.h (struct lang_identifier): Remove error_locus field.\n+\t(IDENTIFIER_ERROR_LOCUS): Kill.\n+\t(record_function_scope_shadow): New prototype.\n+\t* c-typeck.c (build_external_ref): Don't complain if\n+\tdecl is error_mark_node.  When not at file scope, bind the\n+\tdecl's local value to error_mark_node to suppress further\n+\twarnings, instead of setting IDENTIFIER_ERROR_LOCUS.\n+\n+\t* c-decl.c (get_function_binding_level): New static function.\n+\t(record_function_scope_shadow): New exported function.\n+\t(c_make_fname_decl): Use get_function_binding_level.\n+\n 2003-03-17  Steve Ellcey  <sje@cup.hp.com>\n \n \t* stmt.c (tail_recursion_args): Call promote_mode to set\n@@ -19,7 +33,7 @@ Mon Mar 17 18:57:01 CET 2003  Jan Hubicka  <jh@suse.cz>\n \t* function.c (assign_parms): For a struct value address passed as\n \tfirst argument, delay the function's result RTL setup code until\n \tafter the emission of parameter conversions.\n-\t\n+\n 2003-03-17  Dave Love  <fx@gnu.org>\n \t    Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n@@ -63,13 +77,13 @@ Mon Mar 17 18:57:01 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n 2003-03-16  Richard Henderson  <rth@redhat.com>\n \n-        * simplify-rtx (simplify_binary_operation): Don't abort for\n-        SS_PLUS, US_PLUS, SS_MINUS, US_MINUS.\n+\t* simplify-rtx (simplify_binary_operation): Don't abort for\n+\tSS_PLUS, US_PLUS, SS_MINUS, US_MINUS.\n \n 2003-03-16  Richard Henderson  <rth@redhat.com>\n \n-        * config/i386/i386.md (movstrictqi, movstrictqi_1): Check\n-        optimize_size as well.\n+\t* config/i386/i386.md (movstrictqi, movstrictqi_1): Check\n+\toptimize_size as well.\n \n 2003-03-16  Stephane Carrez  <stcarrez@nerim.fr>\n "}, {"sha": "a4b435e82917c103ea1a9fdeaabd8dc6410c0156", "filename": "gcc/c-decl.c", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6970c06a4e8f9ff3524043bf64b51c6870693bc7/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6970c06a4e8f9ff3524043bf64b51c6870693bc7/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=6970c06a4e8f9ff3524043bf64b51c6870693bc7", "patch": "@@ -268,7 +268,8 @@ tree static_ctors, static_dtors;\n \n /* Forward declarations.  */\n \n-static struct binding_level * make_binding_level\tPARAMS ((void));\n+static struct binding_level *make_binding_level\t\tPARAMS ((void));\n+static struct binding_level *get_function_binding_level PARAMS ((void));\n static void pop_binding_level\t\tPARAMS ((struct binding_level **));\n static void clear_limbo_values\t\tPARAMS ((tree));\n static int duplicate_decls\t\tPARAMS ((tree, tree, int));\n@@ -309,7 +310,6 @@ c_print_identifier (file, node, indent)\n   print_node (file, \"local\", IDENTIFIER_LOCAL_VALUE (node), indent + 4);\n   print_node (file, \"label\", IDENTIFIER_LABEL_VALUE (node), indent + 4);\n   print_node (file, \"implicit\", IDENTIFIER_IMPLICIT_DECL (node), indent + 4);\n-  print_node (file, \"error locus\", IDENTIFIER_ERROR_LOCUS (node), indent + 4);\n   print_node (file, \"limbo value\", IDENTIFIER_LIMBO_VALUE (node), indent + 4);\n   if (C_IS_RESERVED_WORD (node))\n     {\n@@ -360,6 +360,17 @@ make_binding_level ()\n     return (struct binding_level *) ggc_alloc (sizeof (struct binding_level));\n }\n \n+/* Return the outermost binding level for the current function.  */\n+static struct binding_level *\n+get_function_binding_level ()\n+{\n+  struct binding_level *b = current_binding_level;\n+\n+  while (b->level_chain->parm_flag == 0)\n+    b = b->level_chain;\n+  return b;\n+}\n+\n /* Remove a binding level from a list and add it to the level chain.  */\n \n static void\n@@ -2016,6 +2027,17 @@ pushdecl (x)\n   return x;\n }\n \n+/* Record that the local value of NAME is shadowed at function scope.\n+   This is used by build_external_ref in c-typeck.c.  */\n+void\n+record_function_scope_shadow (name)\n+     tree name;\n+{\n+  struct binding_level *b = get_function_binding_level ();\n+  b->shadowed = tree_cons (name, IDENTIFIER_LOCAL_VALUE (name),\n+\t\t\t   b->shadowed);\n+}\n+\n /* Like pushdecl, only it places X in GLOBAL_BINDING_LEVEL, if appropriate.  */\n \n tree\n@@ -2557,11 +2579,8 @@ c_make_fname_decl (id, type_dep)\n   if (current_function_decl)\n     {\n       /* Add the decls to the outermost block.  */\n-      struct binding_level *b = current_binding_level;\n-      struct binding_level *old = b;\n-      while (b->level_chain->parm_flag == 0)\n-\tb = b->level_chain;\n-      current_binding_level = b;\n+      struct binding_level *old = current_binding_level;\n+      current_binding_level = get_function_binding_level ();\n       pushdecl (decl);\n       current_binding_level = old;\n     }\t"}, {"sha": "29352f5dd433fc84ac9979668360715de90bbb1e", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6970c06a4e8f9ff3524043bf64b51c6870693bc7/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6970c06a4e8f9ff3524043bf64b51c6870693bc7/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=6970c06a4e8f9ff3524043bf64b51c6870693bc7", "patch": "@@ -41,7 +41,6 @@ struct lang_identifier GTY(())\n   tree local_value;\n   tree label_value;\n   tree implicit_decl;\n-  tree error_locus;\n   tree limbo_value;\n };\n \n@@ -91,10 +90,6 @@ struct lang_decl GTY(())\n    has had one at any point in this compilation.  */\n #define IDENTIFIER_IMPLICIT_DECL(NODE)\t\\\n   (((struct lang_identifier *) (NODE))->implicit_decl)\n-/* This is the last function in which we printed an \"undefined variable\"\n-   message for this identifier.  Value is a FUNCTION_DECL or null.  */\n-#define IDENTIFIER_ERROR_LOCUS(NODE)\t\\\n-  (((struct lang_identifier *) (NODE))->error_locus)\n \n /* In identifiers, C uses the following fields in a special way:\n    TREE_PUBLIC        to record that there was a previous local extern decl.\n@@ -226,6 +221,7 @@ extern void push_label_level                    PARAMS ((void));\n extern void push_parm_decl                      PARAMS ((tree));\n extern tree pushdecl_top_level                  PARAMS ((tree));\n extern void pushtag                             PARAMS ((tree, tree));\n+extern void record_function_scope_shadow\tPARAMS ((tree));\n extern tree set_array_declarator_type           PARAMS ((tree, tree, int));\n extern tree shadow_label                        PARAMS ((tree));\n extern void shadow_tag                          PARAMS ((tree));"}, {"sha": "dc5b9d5ba0e8dccd712aacdd862d7a64ae39cd4f", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6970c06a4e8f9ff3524043bf64b51c6870693bc7/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6970c06a4e8f9ff3524043bf64b51c6870693bc7/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=6970c06a4e8f9ff3524043bf64b51c6870693bc7", "patch": "@@ -1412,28 +1412,34 @@ build_external_ref (id, fun)\n \t}\n       else\n \t{\n+\t  /* Don't complain about something that's already been\n+\t     complained about.  */\n+\t  if (decl == error_mark_node)\n+\t    return error_mark_node;\n+\n \t  /* Reference to undeclared variable, including reference to\n \t     builtin outside of function-call context.  */\n \t  if (current_function_decl == 0)\n \t    error (\"`%s' undeclared here (not in a function)\",\n \t\t   IDENTIFIER_POINTER (id));\n \t  else\n \t    {\n-\t      if (IDENTIFIER_GLOBAL_VALUE (id) != error_mark_node\n-\t\t  || IDENTIFIER_ERROR_LOCUS (id) != current_function_decl)\n-\t\t{\n-\t\t  error (\"`%s' undeclared (first use in this function)\",\n-\t\t\t IDENTIFIER_POINTER (id));\n+\t      error (\"`%s' undeclared (first use in this function)\",\n+\t\t     IDENTIFIER_POINTER (id));\n \n-\t\t  if (! undeclared_variable_notice)\n-\t\t    {\n-\t\t      error (\"(Each undeclared identifier is reported only once\");\n-\t\t      error (\"for each function it appears in.)\");\n-\t\t      undeclared_variable_notice = 1;\n-\t\t    }\n+\t      if (! undeclared_variable_notice)\n+\t\t{\n+\t\t  error (\"(Each undeclared identifier is reported only once\");\n+\t\t  error (\"for each function it appears in.)\");\n+\t\t  undeclared_variable_notice = 1;\n \t\t}\n-\t      IDENTIFIER_GLOBAL_VALUE (id) = error_mark_node;\n-\t      IDENTIFIER_ERROR_LOCUS (id) = current_function_decl;\n+\n+\t      /* Set IDENTIFIER_LOCAL_VALUE (id) to error_mark_node and\n+\t\t add a function-scope shadow entry which will undo that.\n+\t\t This suppresses further warnings about this undeclared\n+\t\t identifier in this function.  */\n+\t      record_function_scope_shadow (id);\n+\t      IDENTIFIER_LOCAL_VALUE (id) = error_mark_node;\n \t    }\n \t  return error_mark_node;\n \t}"}]}