{"sha": "5714c34f155fc589f7da1d625990ac4a92679dc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTcxNGMzNGYxNTVmYzU4OWY3ZGExZDYyNTk5MGFjNGE5MjY3OWRjOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2012-07-25T15:10:44Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2012-07-25T15:10:44Z"}, "message": "re PR bootstrap/54092 (Bootstrap fails while building Ada at stage 1)\n\nPR bootstrap/54092\n\n        * libfuncs.h: Don't include optabs.h.\n        (struct libfunc_entry): Use \"int\" for op, mode1, mode2 members.\n        * optabs.c (hash_libfunc): Don't cast members to int.\n        * Makefile.in (LIBFUNCS_H): Don't include OPTABS_H.\n\nFrom-SVN: r189853", "tree": {"sha": "bdb3cf569a522f1b7ba2c5d4e351cd5e2e756fe1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdb3cf569a522f1b7ba2c5d4e351cd5e2e756fe1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5714c34f155fc589f7da1d625990ac4a92679dc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5714c34f155fc589f7da1d625990ac4a92679dc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5714c34f155fc589f7da1d625990ac4a92679dc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5714c34f155fc589f7da1d625990ac4a92679dc9/comments", "author": null, "committer": null, "parents": [{"sha": "452ed9e73bfdc6b08003cd0f79c8df8bd7af5b1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/452ed9e73bfdc6b08003cd0f79c8df8bd7af5b1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/452ed9e73bfdc6b08003cd0f79c8df8bd7af5b1d"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "928eb0910de135c30e9586458445caae74903acb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5714c34f155fc589f7da1d625990ac4a92679dc9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5714c34f155fc589f7da1d625990ac4a92679dc9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5714c34f155fc589f7da1d625990ac4a92679dc9", "patch": "@@ -1,3 +1,11 @@\n+2012-07-25  Richard Henderson  <rth@redhat.com>\n+\n+\tPR bootstrap/54092\n+\t* libfuncs.h: Don't include optabs.h.\n+\t(struct libfunc_entry): Use \"int\" for op, mode1, mode2 members.\n+\t* optabs.c (hash_libfunc): Don't cast members to int.\n+\t* Makefile.in (LIBFUNCS_H): Don't include OPTABS_H.\n+\n 2012-07-25  Dodji Seketeli  <dodji@redhat.com>\n \n \t* basic-block.c: Fix typo in comment."}, {"sha": "d7b8a76918e9472371e01e7961b9e43d205edee5", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5714c34f155fc589f7da1d625990ac4a92679dc9/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5714c34f155fc589f7da1d625990ac4a92679dc9/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=5714c34f155fc589f7da1d625990ac4a92679dc9", "patch": "@@ -971,7 +971,7 @@ GCC_PLUGIN_H = gcc-plugin.h highlev-plugin-common.h plugin.def \\\n \t\t$(CONFIG_H) $(SYSTEM_H) $(HASHTAB_H)\n PLUGIN_H = plugin.h $(GCC_PLUGIN_H)\n PLUGIN_VERSION_H = plugin-version.h configargs.h\n-LIBFUNCS_H = libfuncs.h $(HASHTAB_H) $(OPTABS_H)\n+LIBFUNCS_H = libfuncs.h $(HASHTAB_H)\n \n #\f\n # Now figure out from those variables how to compile and link."}, {"sha": "262e10fbcee91f3d586fee9eb48faddc898d461a", "filename": "gcc/libfuncs.h", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5714c34f155fc589f7da1d625990ac4a92679dc9/gcc%2Flibfuncs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5714c34f155fc589f7da1d625990ac4a92679dc9/gcc%2Flibfuncs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibfuncs.h?ref=5714c34f155fc589f7da1d625990ac4a92679dc9", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for code generation pass of GNU compiler.\n-   Copyright (C) 2001, 2004, 2007, 2008, 2010 Free Software Foundation, Inc.\n+   Copyright (C) 2001-2012 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -21,7 +21,6 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_LIBFUNCS_H\n \n #include \"hashtab.h\"\n-#include \"optabs.h\"\n \n /* Enumeration of indexes into libfunc_table.  */\n enum libfunc_index\n@@ -48,12 +47,16 @@ enum libfunc_index\n   LTI_MAX\n };\n \n-/* Information about an optab-related libfunc.  We use the same hashtable\n-   for normal optabs and conversion optabs.  In the first case mode2\n-   is unused.  */\n+/* Information about an optab-related libfunc.  The op field is logically\n+   an enum optab_d, and the mode fields are logically enum machine_mode.\n+   However, in the absence of forward-declared enums, there's no practical\n+   benefit of pulling in the defining headers.\n+\n+   We use the same hashtable for normal optabs and conversion optabs.  In\n+   the first case mode2 is forced to VOIDmode.  */\n+\n struct GTY(()) libfunc_entry {\n-  optab op;\n-  enum machine_mode mode1, mode2;\n+  int op, mode1, mode2;\n   rtx libfunc;\n };\n "}, {"sha": "462aa7c70abbb2ea0fdfa1ac25f0d750ee224f4e", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5714c34f155fc589f7da1d625990ac4a92679dc9/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5714c34f155fc589f7da1d625990ac4a92679dc9/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=5714c34f155fc589f7da1d625990ac4a92679dc9", "patch": "@@ -75,7 +75,7 @@ static hashval_t\n hash_libfunc (const void *p)\n {\n   const struct libfunc_entry *const e = (const struct libfunc_entry *) p;\n-  return (((int) e->mode1 + (int) e->mode2 * NUM_MACHINE_MODES) ^ e->op);\n+  return ((e->mode1 + e->mode2 * NUM_MACHINE_MODES) ^ e->op);\n }\n \n /* Used for libfunc_hash.  */"}]}