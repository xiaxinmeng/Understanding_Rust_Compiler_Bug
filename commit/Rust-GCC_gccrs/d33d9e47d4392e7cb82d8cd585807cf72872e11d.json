{"sha": "d33d9e47d4392e7cb82d8cd585807cf72872e11d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMzZDllNDdkNDM5MmU3Y2I4MmQ4Y2Q1ODU4MDdjZjcyODcyZTExZA==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2013-08-19T12:21:26Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-08-19T12:21:26Z"}, "message": "target.def (TARGET_LIBC_HAS_FUNCTION): New target hook.\n\n\t* target.def (TARGET_LIBC_HAS_FUNCTION): New target hook.\n\t* builtins.c (default_libc_has_function): New.\n\t(gnu_libc_has_function): Ditto.\n\t(no_c99_libc_has_function): Ditto.\n\t(expand_builtin_cexpi): Using new target hook TARGET_LIBC_HAS_FUNCTION\n\tinstead of TARGET_HAS_SINCOS and TARGET_C99_FUNCTIONS.\n\t(fold_builtin_sincos): Likewise.\n\t(fold_builtin_cexp): Likewise.\n\t* builtins.def (DEF_C94_BUILTIN): Likewise.\n\t(DEF_C99_BUILTIN): Likewise.\n\t(DEF_C99_C90RES_BUILTIN): Likewise.\n\t(DEF_C99_COMPL_BUILTIN): New define. Change all complex c99 builtin\n\tdefinitions to using this define.\n\t* config/darwin-protos.h (darwin_libc_has_function): New.\n\t* config/darwin.c: (darwin_libc_has_function: Ditto.\n\t* config/alpha/linux.h: Remove TARGET_C99_FUNCTIONS and\n\tTARGET_HAS_SINCOS. Redefine TARGET_LIBC_HAS_FUNCTION.\n\t* config/darwin.h: Ditto.\n\t* config/elfos.h: Ditto.\n\t* config/freebsd.h: Ditto.\n\t* config/i386/cygming.h: Ditto.\n\t* config/i386/djgpp.h: Ditto.\n\t* config/i386/i386-interix.h: Ditto.\n\t* config/microblaze/microblaze.h: Ditto.\n\t* config/mmix/mmix.h: Ditto.\n\t* config/gnu-user.h: Ditto.\n\t* config/ia64/hpux.h: Ditto.\n\t* config/pa/pa-hpux.h: Ditto.\n\t* config/pdp11/pdp11.h: Ditto.\n\t* config/picochip/picochip.h: Ditto.\n\t* config/linux.h: Ditto.\n\t* config/netbsd.h: Ditto.\n\t* config/openbsd.h: Ditto.\n\t* config/rs6000/aix43.h: Ditto.\n\t* config/rs6000/aix51.h: Ditto.\n\t* config/rs6000/aix52.h: Ditto.\n\t* config/rs6000/aix53.h: Ditto.\n\t* config/rs6000/aix61.h: Ditto.\n\t* config/rs6000/darwin.h: Ditto.\n\t* config/rs6000/linux.h: Ditto.\n\t* config/rs6000/linux64.h: Ditto.\n\t* config/s390/tpf.h: Ditto.\n\t* config/sol2-10.h: Ditto.\n\t* config/sol2.h: Ditto.\n\t* config/vms/vms.h: Ditto.\n\t* config/vxworks.h: Ditto.\n\t* config/linux-android.c (linux_android_libc_has_function):\n\tNew linux-specific implementation of TARGET_LIBC_HAS_FUNCTION.\n\t* config/linux-protos.h (linux_android_libc_has_function):\n\tNew declaration.\n\t* config/i386/i386.c (ix86_libc_has_function): New.\n\t* config/i386/i386-protos.h\n\t(ix86_libc_has_function): New declaration.\n\t* config/i386/i386.md\n\t(\"isinfxf2\"): Change condition for TARGET_LIBC_HAS_FUNCTION.\n\t(\"isinf<mode>2): Likewise.\n\t* convert.c (convert_to_integer): Using new target hook\n\tTARGET_LIBC_HAS_FUNCTION istead of TARGET_HAS_SINCOS and\n\tTARGET_C99_FUNCTIONS.\n\t* fortran/f95-lang.c (gfc_init_builtin_functions): Ditto.\n\t* tree-ssa-math-opts.c (execute_cse_sincos): Ditto.\n\t* coretypes.h (function_class): New enum for different\n\tclasses of functions.\n\t* defaults.h: Remove TARGET_C99_FUNCTIONS and TARGET_HAS_SINCOS.\n\t* doc/tm.texi.in (TARGET_C99_FUNCTIONS): Remove documentation.\n\t(TARGET_HAS_SINCOS): Likewise.\n\t(TARGET_LIBC_HAS_FUNCTION): New.\n\t* doc/tm.texi: Regenerated.\n\t* targhooks.h (default_libc_has_function): New declaration.\n\t(no_c99_libc_has_function): Ditto.\n\t(gnu_libc_has_function): Ditto.\n\t* system.h: Add the poisoning of TARGET_C99_FUNCTIONS\n\tand TARGET_HAS_SINCOS.\n\nFrom-SVN: r201838", "tree": {"sha": "0bbcf0fb24fd01d341f129c6ba255ea19c0fa62c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bbcf0fb24fd01d341f129c6ba255ea19c0fa62c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d33d9e47d4392e7cb82d8cd585807cf72872e11d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d33d9e47d4392e7cb82d8cd585807cf72872e11d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d33d9e47d4392e7cb82d8cd585807cf72872e11d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d33d9e47d4392e7cb82d8cd585807cf72872e11d/comments", "author": null, "committer": null, "parents": [{"sha": "89138a6e3edb518628a85ce4bcb59fd6a34df208", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89138a6e3edb518628a85ce4bcb59fd6a34df208", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89138a6e3edb518628a85ce4bcb59fd6a34df208"}], "stats": {"total": 563, "additions": 356, "deletions": 207}, "files": [{"sha": "6645df9064f9f5e5dd1d7a39173b7996381955d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 88, "deletions": 12, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -1,3 +1,79 @@\n+2013-08-19  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\n+\t* target.def (TARGET_LIBC_HAS_FUNCTION): New target hook.\n+\t* builtins.c (default_libc_has_function): New.\n+\t(gnu_libc_has_function): Ditto.\n+\t(no_c99_libc_has_function): Ditto.\n+\t(expand_builtin_cexpi): Using new target hook TARGET_LIBC_HAS_FUNCTION\n+\tinstead of TARGET_HAS_SINCOS and TARGET_C99_FUNCTIONS.\n+\t(fold_builtin_sincos): Likewise.\n+\t(fold_builtin_cexp): Likewise.\n+\t* builtins.def (DEF_C94_BUILTIN): Likewise.\n+\t(DEF_C99_BUILTIN): Likewise.\n+\t(DEF_C99_C90RES_BUILTIN): Likewise.\n+\t(DEF_C99_COMPL_BUILTIN): New define. Change all complex c99 builtin\n+\tdefinitions to using this define.\n+\t* config/darwin-protos.h (darwin_libc_has_function): New.\n+\t* config/darwin.c: (darwin_libc_has_function: Ditto.\n+\t* config/alpha/linux.h: Remove TARGET_C99_FUNCTIONS and\n+\tTARGET_HAS_SINCOS. Redefine TARGET_LIBC_HAS_FUNCTION.\n+\t* config/darwin.h: Ditto.\n+\t* config/elfos.h: Ditto.\n+\t* config/freebsd.h: Ditto.\n+\t* config/i386/cygming.h: Ditto.\n+\t* config/i386/djgpp.h: Ditto.\n+\t* config/i386/i386-interix.h: Ditto.\n+\t* config/microblaze/microblaze.h: Ditto.\n+\t* config/mmix/mmix.h: Ditto.\n+\t* config/gnu-user.h: Ditto.\n+\t* config/ia64/hpux.h: Ditto.\n+\t* config/pa/pa-hpux.h: Ditto.\n+\t* config/pdp11/pdp11.h: Ditto.\n+\t* config/picochip/picochip.h: Ditto.\n+\t* config/linux.h: Ditto.\n+\t* config/netbsd.h: Ditto.\n+\t* config/openbsd.h: Ditto.\n+\t* config/rs6000/aix43.h: Ditto.\n+\t* config/rs6000/aix51.h: Ditto.\n+\t* config/rs6000/aix52.h: Ditto.\n+\t* config/rs6000/aix53.h: Ditto.\n+\t* config/rs6000/aix61.h: Ditto.\n+\t* config/rs6000/darwin.h: Ditto.\n+\t* config/rs6000/linux.h: Ditto.\n+\t* config/rs6000/linux64.h: Ditto.\n+\t* config/s390/tpf.h: Ditto.\n+\t* config/sol2-10.h: Ditto.\n+\t* config/sol2.h: Ditto.\n+\t* config/vms/vms.h: Ditto.\n+\t* config/vxworks.h: Ditto.\n+\t* config/linux-android.c (linux_android_libc_has_function):\n+\tNew linux-specific implementation of TARGET_LIBC_HAS_FUNCTION.\n+\t* config/linux-protos.h (linux_android_libc_has_function):\n+\tNew declaration.\n+\t* config/i386/i386.c (ix86_libc_has_function): New.\n+\t* config/i386/i386-protos.h\n+\t(ix86_libc_has_function): New declaration.\n+\t* config/i386/i386.md\n+\t(\"isinfxf2\"): Change condition for TARGET_LIBC_HAS_FUNCTION.\n+\t(\"isinf<mode>2): Likewise.\n+\t* convert.c (convert_to_integer): Using new target hook\n+\tTARGET_LIBC_HAS_FUNCTION istead of TARGET_HAS_SINCOS and\n+\tTARGET_C99_FUNCTIONS.\n+\t* fortran/f95-lang.c (gfc_init_builtin_functions): Ditto.\n+\t* tree-ssa-math-opts.c (execute_cse_sincos): Ditto.\n+\t* coretypes.h (function_class): New enum for different\n+\tclasses of functions.\n+\t* defaults.h: Remove TARGET_C99_FUNCTIONS and TARGET_HAS_SINCOS.\n+\t* doc/tm.texi.in (TARGET_C99_FUNCTIONS): Remove documentation.\n+\t(TARGET_HAS_SINCOS): Likewise.\n+\t(TARGET_LIBC_HAS_FUNCTION): New.\n+\t* doc/tm.texi: Regenerated.\n+\t* targhooks.h (default_libc_has_function): New declaration.\n+\t(no_c99_libc_has_function): Ditto.\n+\t(gnu_libc_has_function): Ditto.\n+\t* system.h: Add the poisoning of TARGET_C99_FUNCTIONS\n+\tand TARGET_HAS_SINCOS.\n+\n 2013-08-18  Jan Hubicka  <jh@suse.cz>\n \n \t* Makeifle-in (ipa-devirt.o): New.\n@@ -12761,21 +12837,21 @@\n \n 2013-03-27  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \n-\t* target.def (TARGET_HAS_IFUNC_P): New target hook.\n-\t* doc/tm.texi.in (TARGET_HAS_IFUNC_P): New.\n-\t* doc/tm.texi: Regenerate.\n-\t* targhooks.h (default_has_ifunc_p): New.\n-\t* targhooks.c (default_has_ifunc_p): Ditto.\n-\t* config/linux-protos.h: New file.\n-\t* config/linux-android.h (TARGET_HAS_IFUNC_P): Using version of\n+\t* gcc/target.def (TARGET_HAS_IFUNC_P): New target hook.\n+\t* gcc/doc/tm.texi.in (TARGET_HAS_IFUNC_P): New.\n+\t* gcc/doc/tm.texi: Regenerate.\n+\t* gcc/targhooks.h (default_has_ifunc_p): New.\n+\t* gcc/targhooks.c (default_has_ifunc_p): Ditto.\n+\t* gcc/config/linux-protos.h: New file.\n+\t* gcc/config/linux-android.h (TARGET_HAS_IFUNC_P): Using version of\n \tthis hook for linux which disables support of indirect functions in\n \tandroid.\n-\t* config/linux-android.c: New file.\n-\t* config/t-linux-android.c: Ditto.\n-\t* config.gcc: Added new object file linux-android.o.\n-\t* config/i386/i386.c (ix86_get_function_versions_dispatcher):\n+\t* gcc/config/linux-android.c: New file.\n+\t* gcc/config/t-linux-android.c: Ditto.\n+\t* gcc/config.gcc: Added new object file linux-android.o.\n+\t* gcc/config/i386/i386.c (ix86_get_function_versions_dispatcher):\n \tUsing TARGET_HAS_IFUNC hook instead of HAVE_GNU_INDIRECT_FUNCTION.\n-\t* varasm.c (do_assemble_alias): Likewise.\n+\t* gcc/varasm.c (do_assemble_alias): Likewise.\n \t* configure.ac: Define HAVE_GNU_INDIRECT_FUNCTION as zero if the target\n \tdoesn't support indirect functions.\n \t* configure: Regenerate."}, {"sha": "ebb79bed06b3abc3544d89be532ee69c7babaefe", "filename": "gcc/builtins.c", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -249,6 +249,30 @@ is_builtin_fn (tree decl)\n   return TREE_CODE (decl) == FUNCTION_DECL && DECL_BUILT_IN (decl);\n }\n \n+/* By default we assume that c99 functions are present at the runtime,\n+   but sincos is not.  */\n+bool\n+default_libc_has_function (enum function_class fn_class)\n+{\n+  if (fn_class == function_c94\n+      || fn_class == function_c99_misc\n+      || fn_class == function_c99_math_complex)\n+    return true;\n+\n+  return false;\n+}\n+\n+bool\n+gnu_libc_has_function (enum function_class fn_class ATTRIBUTE_UNUSED)\n+{\n+  return true;\n+}\n+\n+bool\n+no_c99_libc_has_function (enum function_class fn_class ATTRIBUTE_UNUSED)\n+{\n+  return false;\n+}\n \n /* Return true if NODE should be considered for inline expansion regardless\n    of the optimization level.  This means whenever a function is invoked with\n@@ -2548,7 +2572,7 @@ expand_builtin_cexpi (tree exp, rtx target)\n       /* Compute into op1 and op2.  */\n       expand_twoval_unop (sincos_optab, op0, op2, op1, 0);\n     }\n-  else if (TARGET_HAS_SINCOS)\n+  else if (targetm.libc_has_function (function_sincos))\n     {\n       tree call, fn = NULL_TREE;\n       tree top1, top2;\n@@ -7810,7 +7834,7 @@ fold_builtin_sincos (location_t loc,\n     return res;\n \n   /* Canonicalize sincos to cexpi.  */\n-  if (!TARGET_C99_FUNCTIONS)\n+  if (!targetm.libc_has_function (function_c99_math_complex))\n     return NULL_TREE;\n   fn = mathfn_built_in (type, BUILT_IN_CEXPI);\n   if (!fn)\n@@ -7850,7 +7874,7 @@ fold_builtin_cexp (location_t loc, tree arg0, tree type)\n \n   /* In case we can figure out the real part of arg0 and it is constant zero\n      fold to cexpi.  */\n-  if (!TARGET_C99_FUNCTIONS)\n+  if (!targetm.libc_has_function (function_c99_math_complex))\n     return NULL_TREE;\n   ifn = mathfn_built_in (rtype, BUILT_IN_CEXPI);\n   if (!ifn)"}, {"sha": "99831962a7d7ed3bb52bd4413713380661b11945", "filename": "gcc/builtins.def", "status": "modified", "additions": 75, "deletions": 69, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -102,22 +102,28 @@ along with GCC; see the file COPYING3.  If not see\n #undef DEF_C94_BUILTIN\n #define DEF_C94_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n   DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n-\t       true, true, !flag_isoc94, ATTRS, TARGET_C99_FUNCTIONS, true)\n+\t       true, true, !flag_isoc94, ATTRS, targetm.libc_has_function (function_c94), true)\n \n /* Like DEF_LIB_BUILTIN, except that the function is only a part of\n    the standard in C99 or above.  */\n #undef DEF_C99_BUILTIN\n #define DEF_C99_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n   DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n-\t       true, true, !flag_isoc99, ATTRS, TARGET_C99_FUNCTIONS, true)\n+\t       true, true, !flag_isoc99, ATTRS, targetm.libc_has_function (function_c99_misc), true)\n+\n+/* Like DEF_C99_BUILTIN, but for complex math functions.  */\n+#undef DEF_C99_COMPL_BUILTIN\n+#define DEF_C99_COMPL_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n+  DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n+\t       true, true, !flag_isoc99, ATTRS, targetm.libc_has_function (function_c99_math_complex), true)\n \n /* Builtin that is specified by C99 and C90 reserve the name for future use.\n    We can still recognize the builtin in C90 mode but we can't produce it\n    implicitly.  */\n #undef DEF_C99_C90RES_BUILTIN\n #define DEF_C99_C90RES_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n   DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n-\t       true, true, !flag_isoc99, ATTRS, TARGET_C99_FUNCTIONS, true)\n+\t       true, true, !flag_isoc99, ATTRS, targetm.libc_has_function (function_c99_misc), true)\n \n /* Builtin that C99 reserve the name for future use. We can still recognize\n    the builtin in C99 mode but we can't produce it implicitly.  */\n@@ -463,78 +469,78 @@ DEF_EXT_LIB_BUILTIN    (BUILT_IN_YNF, \"ynf\", BT_FN_FLOAT_INT_FLOAT, ATTR_MATHFN_\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_YNL, \"ynl\", BT_FN_LONGDOUBLE_INT_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n \n /* Category: _Complex math builtins.  */\n-DEF_C99_BUILTIN        (BUILT_IN_CABS, \"cabs\", BT_FN_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CABSF, \"cabsf\", BT_FN_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CABSL, \"cabsl\", BT_FN_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CACOS, \"cacos\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CACOSF, \"cacosf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CACOSH, \"cacosh\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CACOSHF, \"cacoshf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CACOSHL, \"cacoshl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CACOSL, \"cacosl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CARG, \"carg\", BT_FN_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CARGF, \"cargf\", BT_FN_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CARGL, \"cargl\", BT_FN_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CASIN, \"casin\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CASINF, \"casinf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CASINH, \"casinh\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CASINHF, \"casinhf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CASINHL, \"casinhl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CASINL, \"casinl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CATAN, \"catan\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CATANF, \"catanf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CATANH, \"catanh\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CATANHF, \"catanhf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CATANHL, \"catanhl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CATANL, \"catanl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CCOS, \"ccos\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CCOSF, \"ccosf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CCOSH, \"ccosh\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CCOSHF, \"ccoshf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CCOSHL, \"ccoshl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CCOSL, \"ccosl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CEXP, \"cexp\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CEXPF, \"cexpf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CEXPL, \"cexpl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CABS, \"cabs\", BT_FN_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CABSF, \"cabsf\", BT_FN_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CABSL, \"cabsl\", BT_FN_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CACOS, \"cacos\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CACOSF, \"cacosf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CACOSH, \"cacosh\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CACOSHF, \"cacoshf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CACOSHL, \"cacoshl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CACOSL, \"cacosl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CARG, \"carg\", BT_FN_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CARGF, \"cargf\", BT_FN_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CARGL, \"cargl\", BT_FN_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CASIN, \"casin\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CASINF, \"casinf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CASINH, \"casinh\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CASINHF, \"casinhf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CASINHL, \"casinhl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CASINL, \"casinl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CATAN, \"catan\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CATANF, \"catanf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CATANH, \"catanh\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CATANHF, \"catanhf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CATANHL, \"catanhl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CATANL, \"catanl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CCOS, \"ccos\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CCOSF, \"ccosf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CCOSH, \"ccosh\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CCOSHF, \"ccoshf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CCOSHL, \"ccoshl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CCOSL, \"ccosl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CEXP, \"cexp\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CEXPF, \"cexpf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CEXPL, \"cexpl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_GCC_BUILTIN        (BUILT_IN_CEXPI, \"cexpi\", BT_FN_COMPLEX_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_GCC_BUILTIN        (BUILT_IN_CEXPIF, \"cexpif\", BT_FN_COMPLEX_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING)\n DEF_GCC_BUILTIN        (BUILT_IN_CEXPIL, \"cexpil\", BT_FN_COMPLEX_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CIMAG, \"cimag\", BT_FN_DOUBLE_COMPLEX_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n-DEF_C99_BUILTIN        (BUILT_IN_CIMAGF, \"cimagf\", BT_FN_FLOAT_COMPLEX_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n-DEF_C99_BUILTIN        (BUILT_IN_CIMAGL, \"cimagl\", BT_FN_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n-DEF_C99_BUILTIN        (BUILT_IN_CLOG, \"clog\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CLOGF, \"clogf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CLOGL, \"clogl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CIMAG, \"cimag\", BT_FN_DOUBLE_COMPLEX_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CIMAGF, \"cimagf\", BT_FN_FLOAT_COMPLEX_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CIMAGL, \"cimagl\", BT_FN_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CLOG, \"clog\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CLOGF, \"clogf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CLOGL, \"clogl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_EXT_C99RES_BUILTIN (BUILT_IN_CLOG10, \"clog10\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_EXT_C99RES_BUILTIN (BUILT_IN_CLOG10F, \"clog10f\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n DEF_EXT_C99RES_BUILTIN (BUILT_IN_CLOG10L, \"clog10l\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CONJ, \"conj\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n-DEF_C99_BUILTIN        (BUILT_IN_CONJF, \"conjf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n-DEF_C99_BUILTIN        (BUILT_IN_CONJL, \"conjl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n-DEF_C99_BUILTIN        (BUILT_IN_CPOW, \"cpow\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CPOWF, \"cpowf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CPOWL, \"cpowl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CPROJ, \"cproj\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n-DEF_C99_BUILTIN        (BUILT_IN_CPROJF, \"cprojf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n-DEF_C99_BUILTIN        (BUILT_IN_CPROJL, \"cprojl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n-DEF_C99_BUILTIN        (BUILT_IN_CREAL, \"creal\", BT_FN_DOUBLE_COMPLEX_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n-DEF_C99_BUILTIN        (BUILT_IN_CREALF, \"crealf\", BT_FN_FLOAT_COMPLEX_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n-DEF_C99_BUILTIN        (BUILT_IN_CREALL, \"creall\", BT_FN_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n-DEF_C99_BUILTIN        (BUILT_IN_CSIN, \"csin\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CSINF, \"csinf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CSINH, \"csinh\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CSINHF, \"csinhf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CSINHL, \"csinhl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CSINL, \"csinl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CSQRT, \"csqrt\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CSQRTF, \"csqrtf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CSQRTL, \"csqrtl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CTAN, \"ctan\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CTANF, \"ctanf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CTANH, \"ctanh\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CTANHF, \"ctanhf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CTANHL, \"ctanhl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CTANL, \"ctanl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CONJ, \"conj\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CONJF, \"conjf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CONJL, \"conjl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CPOW, \"cpow\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CPOWF, \"cpowf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CPOWL, \"cpowl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CPROJ, \"cproj\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CPROJF, \"cprojf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CPROJL, \"cprojl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CREAL, \"creal\", BT_FN_DOUBLE_COMPLEX_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CREALF, \"crealf\", BT_FN_FLOAT_COMPLEX_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CREALL, \"creall\", BT_FN_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CSIN, \"csin\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CSINF, \"csinf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CSINH, \"csinh\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CSINHF, \"csinhf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CSINHL, \"csinhl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CSINL, \"csinl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CSQRT, \"csqrt\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CSQRTF, \"csqrtf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CSQRTL, \"csqrtl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CTAN, \"ctan\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CTANF, \"ctanf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CTANH, \"ctanh\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CTANHF, \"ctanhf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CTANHL, \"ctanhl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_COMPL_BUILTIN        (BUILT_IN_CTANL, \"ctanl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n \n /* Category: string/memory builtins.  */\n /* bcmp, bcopy and bzero have traditionally accepted NULL pointers"}, {"sha": "68423c5b78159456e562bee4ce70abc0069dd145", "filename": "gcc/config/alpha/linux.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Falpha%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Falpha%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Flinux.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -63,12 +63,10 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_GLIBC  (linux_libc == LIBC_GLIBC)\n #endif\n \n-/* Determine whether the entire c99 runtime is present in the\n-   runtime library.  */\n-#define TARGET_C99_FUNCTIONS (OPTION_GLIBC)\n-\n-/* Whether we have sincos that follows the GNU extension.  */\n-#define TARGET_HAS_SINCOS (OPTION_GLIBC)\n+/* Determine what functions are present at the runtime;\n+   this includes full c99 runtime and sincos.  */\n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION linux_android_libc_has_function\n \n #define TARGET_POSIX_IO\n "}, {"sha": "36d16b9e57a3859d529f80deb36553b14d681f22", "filename": "gcc/config/darwin-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fdarwin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fdarwin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-protos.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -123,3 +123,4 @@ extern bool darwin_kextabi_p (void);\n extern void darwin_override_options (void);\n extern void darwin_patch_builtins (void);\n extern void darwin_rename_builtins (void);\n+extern bool darwin_libc_has_function (enum function_class fn_class);"}, {"sha": "6c5d9c006236bbfdc1124fdcce7019113fda3376", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -3357,6 +3357,19 @@ darwin_rename_builtins (void)\n     }\n }\n \n+bool\n+darwin_libc_has_function (enum function_class fn_class)\n+{\n+  if (fn_class == function_sincos)\n+    return false;\n+  if (fn_class == function_c99_math_complex\n+      || fn_class == function_c99_misc)\n+    return (TARGET_64BIT\n+\t    || strverscmp (darwin_macosx_version_min, \"10.3\") >= 0);\n+\n+  return true;\n+}\n+\n static hashval_t\n cfstring_hash (const void *ptr)\n {"}, {"sha": "d87cd8edde1951b64fb14eb882c2b5ef82a0f567", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -874,10 +874,6 @@ void add_framework_path (char *);\n \n #define TARGET_POSIX_IO\n \n-/* All new versions of Darwin have C99 functions.  */\n-\n-#define TARGET_C99_FUNCTIONS 1\n-\n #define WINT_TYPE \"int\"\n \n /* Every program on darwin links against libSystem which contains the pthread"}, {"sha": "9606fe0f85ca7725cd754d3d12e89621c70690d5", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -433,3 +433,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define ASM_OUTPUT_EXTERNAL(FILE, DECL, NAME) \\\n   default_elf_asm_output_external (FILE, DECL, NAME)\n #endif\n+\n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION no_c99_libc_has_function"}, {"sha": "da66253e660deb9edefaa30e9a41bcd8d30a7368", "filename": "gcc/config/freebsd.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffreebsd.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -52,6 +52,9 @@ along with GCC; see the file COPYING3.  If not see\n #define LINK_SSP_SPEC \"%{fstack-protector|fstack-protector-all:-lssp_nonshared}\"\n #endif\n \n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION no_c99_libc_has_function\n+\n /* Use --as-needed -lgcc_s for eh support.  */\n #ifdef HAVE_LD_AS_NEEDED\n #define USE_LD_AS_NEEDED 1"}, {"sha": "a83eb46600d2e00ea2b8c1efb88fe94f3731a879", "filename": "gcc/config/gnu-user.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fgnu-user.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fgnu-user.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgnu-user.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -104,8 +104,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #define TARGET_POSIX_IO\n \n-#define TARGET_C99_FUNCTIONS 1\n-#define TARGET_HAS_SINCOS 1\n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION gnu_libc_has_function\n \n /* Link -lasan early on the command line.  For -static-libasan, don't link\n    it for -shared link, the executable should be compiled with -static-libasan"}, {"sha": "9cb66d646bec2ad5bf1a5162412da247cf8d5462", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -171,6 +171,9 @@ along with GCC; see the file COPYING3.  If not see\n #undef MATH_LIBRARY\n #define MATH_LIBRARY \"\"\n \n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION no_c99_libc_has_function\n+\n #define SIZE_TYPE (TARGET_64BIT ? \"long long unsigned int\" : \"unsigned int\")\n #define PTRDIFF_TYPE (TARGET_64BIT ? \"long long int\" : \"int\")\n "}, {"sha": "9c503ac58b548ca166e0d3a3367e6b5a0ba9312e", "filename": "gcc/config/i386/djgpp.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -127,6 +127,9 @@ along with GCC; see the file COPYING3.  If not see\n    in libgcc, nor call one in main().  */\n #define HAS_INIT_SECTION\n \n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION no_c99_libc_has_function\n+\n /* Definitions for types and sizes. Wide characters are 16-bits long so\n    Win32 compiler add-ons will be wide character compatible.  */\n #undef WCHAR_TYPE_SIZE"}, {"sha": "b99f4d9b908e1a36ba1f51be8e1ecf1dee92635f", "filename": "gcc/config/i386/i386-interix.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -143,6 +143,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef LIBGCC2_LONG_DOUBLE_TYPE_SIZE\n #define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n \n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION no_c99_libc_has_function\n+\n /* The following are needed for us to be able to use winnt.c, but are not\n    otherwise meaningful to Interix.  (The functions that use these are\n    never called because we don't do DLLs.) */"}, {"sha": "3ab2f3a2ac8a231abf1470af6a7d963049f58cb3", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -173,6 +173,8 @@ extern int ix86_mode_after (int, int, rtx);\n extern int ix86_mode_entry (int);\n extern int ix86_mode_exit (int);\n \n+extern bool ix86_libc_has_function (enum function_class fn_class);\n+\n #ifdef HARD_CONST\n extern void ix86_emit_mode_set (int, int, HARD_REG_SET);\n #endif"}, {"sha": "1d186e2e5a15ffeafd35832e125d46674c0aab06", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -5729,6 +5729,14 @@ ix86_function_type_abi (const_tree fntype)\n   return ix86_abi;\n }\n \n+/* We add this as a workaround in order to use libc_has_function\n+   hook in i386.md.  */\n+bool\n+ix86_libc_has_function (enum function_class fn_class)\n+{\n+  return targetm.libc_has_function (fn_class);\n+}\n+\n static bool\n ix86_function_ms_hook_prologue (const_tree fn)\n {"}, {"sha": "de93897518c8e0ce9937dc2d978eacb142e3d858", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -14909,7 +14909,7 @@\n   [(use (match_operand:SI 0 \"register_operand\"))\n    (use (match_operand:XF 1 \"register_operand\"))]\n   \"TARGET_USE_FANCY_MATH_387\n-   && TARGET_C99_FUNCTIONS\"\n+   && ix86_libc_has_function (function_c99_misc)\"\n {\n   rtx mask = GEN_INT (0x45);\n   rtx val = GEN_INT (0x05);\n@@ -14935,7 +14935,7 @@\n   [(use (match_operand:SI 0 \"register_operand\"))\n    (use (match_operand:MODEF 1 \"nonimmediate_operand\"))]\n   \"TARGET_USE_FANCY_MATH_387\n-   && TARGET_C99_FUNCTIONS\n+   && ix86_libc_has_function (function_c99_misc)\n    && !(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\"\n {\n   rtx mask = GEN_INT (0x45);"}, {"sha": "ca592e4bc263f8a77c93ab88ed0f6a9729c82079", "filename": "gcc/config/ia64/hpux.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fia64%2Fhpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fia64%2Fhpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -179,9 +179,10 @@ do {\t\t\t\t\t\t\t\t\\\n #undef  TARGET_ASM_RELOC_RW_MASK\n #define TARGET_ASM_RELOC_RW_MASK  ia64_hpux_reloc_rw_mask\n \n-/* ia64 HPUX has the float and long double forms of math functions.  */\n-#undef TARGET_C99_FUNCTIONS\n-#define TARGET_C99_FUNCTIONS  1\n+/* ia64 HPUX has the float and long double forms of math functions.\n+   We redefine this hook so the version from elfos.h header won't be used.  */\n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION default_c99_libc_has_function\n \n #undef TARGET_INIT_LIBFUNCS\n #define TARGET_INIT_LIBFUNCS ia64_hpux_init_libfuncs"}, {"sha": "4a4b48d9882e6bd99f030b8822b2f164a376a0e6", "filename": "gcc/config/linux-android.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Flinux-android.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Flinux-android.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux-android.c?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -31,3 +31,17 @@ linux_android_has_ifunc_p (void)\n {\n   return TARGET_ANDROID ? false : HAVE_GNU_INDIRECT_FUNCTION;\n }\n+\n+bool\n+linux_android_libc_has_function (enum function_class fn_class)\n+{\n+  if (OPTION_GLIBC)\n+    return true;\n+  if (OPTION_BIONIC)\n+    if (fn_class == function_c94\n+\t|| fn_class == function_c99_misc\n+\t|| fn_class == function_sincos)\n+\treturn true;\n+\n+  return false;\n+}"}, {"sha": "d1f0f926367615295fa5fd27881a38ea1100391d", "filename": "gcc/config/linux-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Flinux-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Flinux-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux-protos.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -19,3 +19,5 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n extern bool linux_android_has_ifunc_p (void);\n+\n+extern bool linux_android_libc_has_function (enum function_class fn_class);"}, {"sha": "8116e698d945ace2349a7438a1d1d9b825a221e9", "filename": "gcc/config/linux.h", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -95,15 +95,11 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n   CHOOSE_DYNAMIC_LINKER (GLIBC_DYNAMIC_LINKERX32, UCLIBC_DYNAMIC_LINKERX32, \\\n \t\t\t BIONIC_DYNAMIC_LINKERX32)\n \n-/* Determine whether the entire c99 runtime\n-   is present in the runtime library.  */\n-#undef TARGET_C99_FUNCTIONS\n-#define TARGET_C99_FUNCTIONS (OPTION_GLIBC)\n-\n-/* Whether we have sincos that follows the GNU extension.  */\n-#undef TARGET_HAS_SINCOS\n-#define TARGET_HAS_SINCOS (OPTION_GLIBC || OPTION_BIONIC)\n-\n /* Whether we have Bionic libc runtime */\n #undef TARGET_HAS_BIONIC\n #define TARGET_HAS_BIONIC (OPTION_BIONIC)\n+\n+/* Determine what functions are present at the runtime;\n+   this includes full c99 runtime and sincos.  */\n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION linux_android_libc_has_function"}, {"sha": "eb8e45ce17be1cdafce2f5beb4afbd047b3ed00c", "filename": "gcc/config/microblaze/microblaze.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -892,6 +892,10 @@ do {\t\t\t\t\t\t\t\t\t \\\n %{pg:-start-group -lxilprofile -lgloss -lxil -lc -lm -end-group } \\\n %{!pg:-start-group -lgloss -lxil -lc -lm -end-group }} \"\n \n+/* microblaze-unknown-elf target has no support of C99 runtime */\n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION no_c99_libc_has_function\n+\n #undef  ENDFILE_SPEC\n #define ENDFILE_SPEC \"crtend.o%s crtn.o%s\"\n "}, {"sha": "2d5e1a8a3922575ce64664a66b029b4226e5ae3d", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -813,6 +813,10 @@ typedef struct { int regs; int lib; } CUMULATIVE_ARGS;\n \n #define NO_IMPLICIT_EXTERN_C\n \n+/* mmix-knuth-mmixware target has no support of C99 runtime */\n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION no_c99_libc_has_function\n+\n /* These are checked.  */\n #define DOLLARS_IN_IDENTIFIERS 0\n #define NO_DOLLAR_IN_LABEL"}, {"sha": "dd50dcc0ec4982a61d803d78fc3c91d8aaeec7e0", "filename": "gcc/config/netbsd.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetbsd.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -139,6 +139,9 @@ along with GCC; see the file COPYING3.  If not see\n #undef LIBGCC_SPEC\n #define LIBGCC_SPEC NETBSD_LIBGCC_SPEC\n \n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION no_c99_libc_has_function\n+\n /* When building shared libraries, the initialization and finalization \n    functions for the library are .init and .fini respectively.  */\n "}, {"sha": "0d118b4632895c54a718aa5ebd038647bfa44180", "filename": "gcc/config/openbsd.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fopenbsd.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -145,8 +145,10 @@ while (0)\n \n #define TARGET_POSIX_IO\n \n-/* All new versions of OpenBSD have C99 functions.  */\n-#define TARGET_C99_FUNCTIONS 1\n+/* All new versions of OpenBSD have C99 functions.  We redefine this hook\n+   so the version from elfos.h header won't be used.  */\n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION default_libc_has_function\n \n \f\n /* Runtime target specification.  */"}, {"sha": "9685bb25a573d6ab0e3c590ee80840c08aa2f8ca", "filename": "gcc/config/pa/pa-hpux.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fpa%2Fpa-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fpa%2Fpa-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -114,3 +114,6 @@ along with GCC; see the file COPYING3.  If not see\n    compatibility with the HP-UX unwind library.  */\n #undef TARGET_HPUX_UNWIND_LIBRARY\n #define TARGET_HPUX_UNWIND_LIBRARY 1\n+\n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION no_c99_libc_has_function"}, {"sha": "d4bc19a00f11cc75f70eab745025e755b46b78b5", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -666,3 +666,7 @@ extern rtx cc0_reg_rtx;\n #define COMPARE_FLAG_MODE HImode\n \n #define TARGET_HAVE_NAMED_SECTIONS false\n+\n+/* pdp11-unknown-aout target has no support of C99 runtime */\n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION no_c99_libc_has_function"}, {"sha": "13414c6cc9c1dd8046fcf8fa4cb916fb84391b1c", "filename": "gcc/config/picochip/picochip.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -656,4 +656,8 @@ enum picochip_builtins\n    not detecting this. */\n #define HAVE_AS_LEB128 1\n \n+/* picochip-unknown-none target has no support of C99 runtime */\n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION no_c99_libc_has_function\n+\n /* The End */"}, {"sha": "b27c046021a14aa02bcd57692094424d471483cd", "filename": "gcc/config/rs6000/aix43.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Frs6000%2Faix43.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Frs6000%2Faix43.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix43.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -159,3 +159,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define TARGET_USES_AIX64_OPT 1\n \n #define TARGET_AIX_VERSION 43\n+\n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION no_c99_libc_has_function"}, {"sha": "3837bfdc0bb014ec86a1dec9173417ad5d5090bb", "filename": "gcc/config/rs6000/aix51.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Frs6000%2Faix51.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Frs6000%2Faix51.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix51.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -163,3 +163,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define TARGET_USE_JCR_SECTION 0\n \n #define TARGET_AIX_VERSION 51\n+\n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION no_c99_libc_has_function"}, {"sha": "51954718b2e5b3854e462322d2c6bfc9dda77b9a", "filename": "gcc/config/rs6000/aix52.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Frs6000%2Faix52.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Frs6000%2Faix52.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix52.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -166,10 +166,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef LD_INIT_SWITCH\n #define LD_INIT_SWITCH \"-binitfini\"\n \n-/* AIX 5.2 has the float and long double forms of math functions.  */\n-#undef TARGET_C99_FUNCTIONS\n-#define TARGET_C99_FUNCTIONS  1\n-\n #ifndef _AIX52\n extern long long int    atoll(const char *);  \n #endif"}, {"sha": "b3bd73a698878537c3f711e5593d310b1c813bfe", "filename": "gcc/config/rs6000/aix53.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Frs6000%2Faix53.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Frs6000%2Faix53.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix53.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -166,10 +166,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef LD_INIT_SWITCH\n #define LD_INIT_SWITCH \"-binitfini\"\n \n-/* AIX 5.2 has the float and long double forms of math functions.  */\n-#undef TARGET_C99_FUNCTIONS\n-#define TARGET_C99_FUNCTIONS  1\n-\n #ifndef _AIX52\n extern long long int    atoll(const char *);  \n #endif"}, {"sha": "b0778143773311fab85515a953de8120b147caae", "filename": "gcc/config/rs6000/aix61.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Frs6000%2Faix61.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Frs6000%2Faix61.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix61.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -190,10 +190,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef LD_INIT_SWITCH\n #define LD_INIT_SWITCH \"-binitfini\"\n \n-/* AIX 5.2 has the float and long double forms of math functions.  */\n-#undef TARGET_C99_FUNCTIONS\n-#define TARGET_C99_FUNCTIONS  1\n-\n #ifndef _AIX52\n extern long long int    atoll(const char *);  \n #endif"}, {"sha": "d5919c4c71dd9aec2ada75a92c5236b8afe389e6", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -386,10 +386,8 @@ extern int darwin_emit_branch_islands;\n #define OFFS_ASSIGNIVAR_FAST\t\t0xFFFEFEC0\n \n /* Old versions of Mac OS/Darwin don't have C99 functions available.  */\n-#undef TARGET_C99_FUNCTIONS\n-#define TARGET_C99_FUNCTIONS\t\t\t\t\t\\\n-  (TARGET_64BIT\t\t\t\t\t\t\t\\\n-   || strverscmp (darwin_macosx_version_min, \"10.3\") >= 0)\n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION darwin_libc_has_function\n \n /* When generating kernel code or kexts, we don't use Altivec by\n    default, as kernel code doesn't save/restore those registers.  */"}, {"sha": "c9419424e1591891f1733afdc2aa9f42eb035f47", "filename": "gcc/config/rs6000/linux.h", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Frs6000%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Frs6000%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -32,13 +32,10 @@\n #define OPTION_GLIBC  (linux_libc == LIBC_GLIBC)\n #endif\n \n-/* glibc has float and long double forms of math functions.  */\n-#undef  TARGET_C99_FUNCTIONS\n-#define TARGET_C99_FUNCTIONS (OPTION_GLIBC)\n-\n-/* Whether we have sincos that follows the GNU extension.  */\n-#undef  TARGET_HAS_SINCOS\n-#define TARGET_HAS_SINCOS (OPTION_GLIBC)\n+/* Determine what functions are present at the runtime;\n+   this includes full c99 runtime and sincos.  */\n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION linux_android_libc_has_function\n \n #undef  TARGET_OS_CPP_BUILTINS\n #define TARGET_OS_CPP_BUILTINS()\t\t\\"}, {"sha": "63e656df15079da5616a02c9b6f04dc710a28567", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -292,13 +292,10 @@ extern int dot_symbols;\n #define OPTION_GLIBC  (linux_libc == LIBC_GLIBC)\n #endif\n \n-/* glibc has float and long double forms of math functions.  */\n-#undef  TARGET_C99_FUNCTIONS\n-#define TARGET_C99_FUNCTIONS (OPTION_GLIBC)\n-\n-/* Whether we have sincos that follows the GNU extension.  */\n-#undef  TARGET_HAS_SINCOS\n-#define TARGET_HAS_SINCOS (OPTION_GLIBC)\n+/* Determine what functions are present at the runtime;\n+   this includes full c99 runtime and sincos.  */\n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION linux_android_libc_has_function\n \n #undef  TARGET_OS_CPP_BUILTINS\n #define TARGET_OS_CPP_BUILTINS()\t\t\t\\"}, {"sha": "8eb1947dd3ce7a4969f57118d828a3794a8f4bad", "filename": "gcc/config/s390/tpf.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fs390%2Ftpf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fs390%2Ftpf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Ftpf.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -94,9 +94,6 @@ along with GCC; see the file COPYING3.  If not see\n #define ASM_SPEC \"%{m31&m64}%{mesa&mzarch}%{march=*} \\\n                   -alshd=%b.lst\"\n \n-#undef TARGET_C99_FUNCTIONS\n-#define TARGET_C99_FUNCTIONS 1\n-\n #define ENTRY_SPEC \"%{mmain:-entry=_start} \\\n                     %{!mmain:-entry=0}\"\n \n@@ -115,3 +112,7 @@ along with GCC; see the file COPYING3.  If not see\n #define MATH_LIBRARY \"CLBM\"\n #define LIBSTDCXX \"CPP2\"\n #endif /* ! _TPF_H */\n+\n+/* We redefine this hook so the version from elfos.h header won't be used.  */\n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION default_libc_has_function"}, {"sha": "262040ba5887a7959d6ddcfcf3af7bc74ae4d37d", "filename": "gcc/config/sol2-10.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fsol2-10.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fsol2-10.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2-10.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -18,5 +18,7 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-/* Solaris 10 has the float and long double forms of math functions.  */\n-#define TARGET_C99_FUNCTIONS 1\n+/* /* Solaris 10 has the float and long double forms of math functions.\n+   We redefine this hook so the version from elfos.h header won't be used.  */\n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION default_libc_has_function"}, {"sha": "b606595dfe9df0a3730dc18d6e3a03b256d8a129", "filename": "gcc/config/sol2.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -285,6 +285,9 @@ along with GCC; see the file COPYING3.  If not see\n \n #define TARGET_POSIX_IO\n \n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION no_c99_libc_has_function\n+\n extern GTY(()) tree solaris_pending_aligns;\n extern GTY(()) tree solaris_pending_inits;\n extern GTY(()) tree solaris_pending_finis;"}, {"sha": "5d0a5c6515c184b271059f23f98ffc36abf215d2", "filename": "gcc/config/vms/vms.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fvms%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fvms%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -87,3 +87,6 @@ extern void vms_c_register_includes (const char *, const char *, int);\n \n /* Special VMS debugger symbol to record the entry point.  */\n #define VMS_DEBUG_MAIN_POINTER \"TRANSFER$BREAK$GO\"\n+\n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION no_c99_libc_has_function"}, {"sha": "72f344b6f01d25b86afe415c64e8926c57feb768", "filename": "gcc/config/vxworks.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconfig%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -114,6 +114,9 @@ extern void vxworks_asm_out_destructor (rtx symbol, int priority);\n #undef SIZE_TYPE\n #define SIZE_TYPE \"unsigned int\"\n \n+#undef TARGET_LIBC_HAS_FUNCTION\n+#define TARGET_LIBC_HAS_FUNCTION no_c99_libc_has_function\n+\n /* Both kernels and RTPs have the facilities required by this macro.  */\n #define TARGET_POSIX_IO\n "}, {"sha": "b07f0efe82078a7622c18b6785d2b482c4d05d80", "filename": "gcc/convert.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -29,6 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"convert.h\"\n #include \"diagnostic-core.h\"\n+#include \"target.h\"\n #include \"langhooks.h\"\n \n /* Convert EXPR to some pointer or reference type TYPE.\n@@ -386,7 +387,7 @@ convert_to_integer (tree type, tree expr)\n         {\n \tCASE_FLT_FN (BUILT_IN_CEIL):\n \t  /* Only convert in ISO C99 mode.  */\n-\t  if (!TARGET_C99_FUNCTIONS)\n+\t  if (!targetm.libc_has_function (function_c99_misc))\n \t    break;\n \t  if (outprec < TYPE_PRECISION (integer_type_node)\n \t      || (outprec == TYPE_PRECISION (integer_type_node)\n@@ -402,7 +403,7 @@ convert_to_integer (tree type, tree expr)\n \n \tCASE_FLT_FN (BUILT_IN_FLOOR):\n \t  /* Only convert in ISO C99 mode.  */\n-\t  if (!TARGET_C99_FUNCTIONS)\n+\t  if (!targetm.libc_has_function (function_c99_misc))\n \t    break;\n \t  if (outprec < TYPE_PRECISION (integer_type_node)\n \t      || (outprec == TYPE_PRECISION (integer_type_node)\n@@ -418,7 +419,7 @@ convert_to_integer (tree type, tree expr)\n \n \tCASE_FLT_FN (BUILT_IN_ROUND):\n \t  /* Only convert in ISO C99 mode.  */\n-\t  if (!TARGET_C99_FUNCTIONS)\n+\t  if (!targetm.libc_has_function (function_c99_misc))\n \t    break;\n \t  if (outprec < TYPE_PRECISION (integer_type_node)\n \t      || (outprec == TYPE_PRECISION (integer_type_node)\n@@ -439,7 +440,7 @@ convert_to_integer (tree type, tree expr)\n \t  /* ... Fall through ...  */\n \tCASE_FLT_FN (BUILT_IN_RINT):\n \t  /* Only convert in ISO C99 mode.  */\n-\t  if (!TARGET_C99_FUNCTIONS)\n+\t  if (!targetm.libc_has_function (function_c99_misc))\n \t    break;\n \t  if (outprec < TYPE_PRECISION (integer_type_node)\n \t      || (outprec == TYPE_PRECISION (integer_type_node)"}, {"sha": "3d020ed1bc9811c8914386aca01b4aa14d9f01be", "filename": "gcc/coretypes.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -189,6 +189,15 @@ union _dont_use_tree_here_;\n \n #endif\n \n+/* Classes of functions that compiler needs to check\n+   whether they are present at the runtime or not.  */\n+enum function_class {\n+  function_c94,\n+  function_c99_misc,\n+  function_c99_math_complex,\n+  function_sincos\n+};\n+\n /* Memory model types for the __atomic* builtins. \n    This must match the order in libstdc++-v3/include/bits/atomic_base.h.  */\n enum memmodel"}, {"sha": "3fa105d113d1725cbd2794edeabb4303c3d3551b", "filename": "gcc/defaults.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -1040,18 +1040,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #endif /* old constraint mechanism in use */\n \n-/* Determine whether the entire c99 runtime\n-   is present in the runtime library.  */\n-#ifndef TARGET_C99_FUNCTIONS\n-#define TARGET_C99_FUNCTIONS 0\n-#endif\n-\n-/* Determine whether the target runtime library has\n-   a sincos implementation following the GNU extension.  */\n-#ifndef TARGET_HAS_SINCOS\n-#define TARGET_HAS_SINCOS 0\n-#endif\n-\n /* Determin whether the target runtime library is Bionic */\n #ifndef TARGET_HAS_BIONIC\n #define TARGET_HAS_BIONIC 0"}, {"sha": "5901ba4ff4e8b4773244d6eb371ddb59bc89dcfd", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -5358,26 +5358,10 @@ refers to the global ``variable'' @code{errno}.  (On certain systems,\n macro, a reasonable default is used.\n @end defmac\n \n-@cindex C99 math functions, implicit usage\n-@defmac TARGET_C99_FUNCTIONS\n-When this macro is nonzero, GCC will implicitly optimize @code{sin} calls into\n-@code{sinf} and similarly for other functions defined by C99 standard.  The\n-default is zero because a number of existing systems lack support for these\n-functions in their runtime so this macro needs to be redefined to one on\n-systems that do support the C99 runtime.\n-@end defmac\n-\n-@cindex sincos math function, implicit usage\n-@defmac TARGET_HAS_SINCOS\n-When this macro is nonzero, GCC will implicitly optimize calls to @code{sin}\n-and @code{cos} with the same argument to a call to @code{sincos}.  The\n-default is zero.  The target has to provide the following functions:\n-@smallexample\n-void sincos(double x, double *sin, double *cos);\n-void sincosf(float x, float *sin, float *cos);\n-void sincosl(long double x, long double *sin, long double *cos);\n-@end smallexample\n-@end defmac\n+@deftypefn {Target Hook} bool TARGET_LIBC_HAS_FUNCTION (enum function_class @var{fn_class})\n+This hook determines whether a function from a class of functions\n+@var{fn_class} is present at the runtime.\n+@end deftypefn\n \n @defmac NEXT_OBJC_RUNTIME\n Set this macro to 1 to use the \"NeXT\" Objective-C message sending conventions"}, {"sha": "b51d7b38800aa0de476970c53a0f3e29388730c2", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -4221,26 +4221,7 @@ refers to the global ``variable'' @code{errno}.  (On certain systems,\n macro, a reasonable default is used.\n @end defmac\n \n-@cindex C99 math functions, implicit usage\n-@defmac TARGET_C99_FUNCTIONS\n-When this macro is nonzero, GCC will implicitly optimize @code{sin} calls into\n-@code{sinf} and similarly for other functions defined by C99 standard.  The\n-default is zero because a number of existing systems lack support for these\n-functions in their runtime so this macro needs to be redefined to one on\n-systems that do support the C99 runtime.\n-@end defmac\n-\n-@cindex sincos math function, implicit usage\n-@defmac TARGET_HAS_SINCOS\n-When this macro is nonzero, GCC will implicitly optimize calls to @code{sin}\n-and @code{cos} with the same argument to a call to @code{sincos}.  The\n-default is zero.  The target has to provide the following functions:\n-@smallexample\n-void sincos(double x, double *sin, double *cos);\n-void sincosf(float x, float *sin, float *cos);\n-void sincosl(long double x, long double *sin, long double *cos);\n-@end smallexample\n-@end defmac\n+@hook TARGET_LIBC_HAS_FUNCTION\n \n @defmac NEXT_OBJC_RUNTIME\n Set this macro to 1 to use the \"NeXT\" Objective-C message sending conventions"}, {"sha": "7bb2913552cb3c10f48f24be48dc39cbfb01b050", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -826,7 +826,7 @@ gfc_init_builtin_functions (void)\n \t\t      BUILT_IN_POWIF, \"powif\", ATTR_CONST_NOTHROW_LEAF_LIST);\n \n \n-  if (TARGET_C99_FUNCTIONS)\n+  if (targetm.libc_has_function (function_c99_math_complex))\n     {\n       gfc_define_builtin (\"__builtin_cbrtl\", mfunc_longdouble[0],\n \t\t\t  BUILT_IN_CBRTL, \"cbrtl\",\n@@ -848,7 +848,7 @@ gfc_init_builtin_functions (void)\n \t\t\t  ATTR_CONST_NOTHROW_LEAF_LIST);\n     }\n \n-  if (TARGET_HAS_SINCOS)\n+  if (targetm.libc_has_function (function_sincos))\n     {\n       gfc_define_builtin (\"__builtin_sincosl\",\n \t\t\t  func_longdouble_longdoublep_longdoublep,"}, {"sha": "b735a96c10be4b4e0e968aa07807f066411ec29a", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -914,7 +914,7 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tUSE_COMMON_FOR_ONE_ONLY IFCVT_EXTRA_FIELDS IFCVT_INIT_EXTRA_FIELDS \\\n \tCASE_USE_BIT_TESTS FIXUNS_TRUNC_LIKE_FIX_TRUNC                     \\\n         GO_IF_MODE_DEPENDENT_ADDRESS DELAY_SLOTS_FOR_EPILOGUE              \\\n-        ELIGIBLE_FOR_EPILOGUE_DELAY\n+        ELIGIBLE_FOR_EPILOGUE_DELAY TARGET_C99_FUNCTIONS TARGET_HAS_SINCOS\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}, {"sha": "473408cd142d6a7dd53de33260ec39cb25622375", "filename": "gcc/target.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -2201,6 +2201,13 @@ set via @code{__attribute__}.\",\n  unsigned int, (tree decl, const char *name, int reloc),\n  default_section_type_flags)\n \n+DEFHOOK\n+(libc_has_function,\n+ \"This hook determines whether a function from a class of functions\\n\\\n+@var{fn_class} is present at the runtime.\",\n+ bool, (enum function_class fn_class),\n+ default_libc_has_function)\n+\n /* True if new jumps cannot be created, to replace existing ones or\n    not, at the current point in the compilation.  */\n DEFHOOK"}, {"sha": "aaddae932097f38be51ebd0e9f3fd38e7b3a9fa0", "filename": "gcc/targhooks.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -166,6 +166,10 @@ extern rtx default_addr_space_convert (rtx, tree, tree);\n extern unsigned int default_case_values_threshold (void);\n extern bool default_have_conditional_execution (void);\n \n+extern bool default_libc_has_function (enum function_class);\n+extern bool no_c99_libc_has_function (enum function_class);\n+extern bool gnu_libc_has_function (enum function_class);\n+\n extern tree default_builtin_tm_load_store (tree);\n \n extern int default_memory_move_cost (enum machine_mode, reg_class_t, bool);"}, {"sha": "f871e928a19b6ee03e05983532da134e8311830f", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33d9e47d4392e7cb82d8cd585807cf72872e11d/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=d33d9e47d4392e7cb82d8cd585807cf72872e11d", "patch": "@@ -1432,7 +1432,8 @@ execute_cse_sincos (void)\n \t\tCASE_FLT_FN (BUILT_IN_SIN):\n \t\tCASE_FLT_FN (BUILT_IN_CEXPI):\n \t\t  /* Make sure we have either sincos or cexp.  */\n-\t\t  if (!TARGET_HAS_SINCOS && !TARGET_C99_FUNCTIONS)\n+\t\t  if (!targetm.libc_has_function (function_c99_math_complex)\n+\t\t      && !targetm.libc_has_function (function_sincos))\n \t\t    break;\n \n \t\t  arg = gimple_call_arg (stmt, 0);"}]}