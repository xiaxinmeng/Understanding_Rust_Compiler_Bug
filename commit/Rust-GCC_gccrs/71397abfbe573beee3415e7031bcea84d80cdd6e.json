{"sha": "71397abfbe573beee3415e7031bcea84d80cdd6e", "node_id": "C_kwDOANBUbNoAKDcxMzk3YWJmYmU1NzNiZWVlMzQxNWU3MDMxYmNlYTg0ZDgwY2RkNmU", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-10-05T15:49:44Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-10-07T08:00:20Z"}, "message": "intrinsics: Add data prefetching intrinsics", "tree": {"sha": "98c59bdbe77ea1c6c349da2b15e945454b3fdd67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98c59bdbe77ea1c6c349da2b15e945454b3fdd67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71397abfbe573beee3415e7031bcea84d80cdd6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71397abfbe573beee3415e7031bcea84d80cdd6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71397abfbe573beee3415e7031bcea84d80cdd6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71397abfbe573beee3415e7031bcea84d80cdd6e/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4096017e3b9ca499b56988b67e05667a02ca202", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4096017e3b9ca499b56988b67e05667a02ca202", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4096017e3b9ca499b56988b67e05667a02ca202"}], "stats": {"total": 120, "additions": 111, "deletions": 9}, "files": [{"sha": "d6f8cb6f495481c60afad6c341341e46eda46688", "filename": "gcc/rust/backend/rust-builtins.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71397abfbe573beee3415e7031bcea84d80cdd6e/gcc%2Frust%2Fbackend%2Frust-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71397abfbe573beee3415e7031bcea84d80cdd6e/gcc%2Frust%2Fbackend%2Frust-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-builtins.cc?ref=71397abfbe573beee3415e7031bcea84d80cdd6e", "patch": "@@ -92,6 +92,12 @@ BuiltinsContext::setup ()\n \t\t\t\t\t    build_pointer_type (void_type_node),\n \t\t\t\t\t    size_type_node, NULL_TREE),\n \t\t  0);\n+\n+  define_builtin (\"prefetch\", BUILT_IN_PREFETCH, \"__builtin_prefetch\",\n+\t\t  \"prefetch\",\n+\t\t  build_varargs_function_type_list (\n+\t\t    build_pointer_type (const_ptr_type_node), NULL_TREE),\n+\t\t  builtin_const);\n }\n \n static void"}, {"sha": "a418b863210fdf2daf3aaa70dc253be83d5dc5a4", "filename": "gcc/rust/backend/rust-compile-intrinsic.cc", "status": "modified", "additions": 88, "deletions": 9, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71397abfbe573beee3415e7031bcea84d80cdd6e/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71397abfbe573beee3415e7031bcea84d80cdd6e/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc?ref=71397abfbe573beee3415e7031bcea84d80cdd6e", "patch": "@@ -17,6 +17,7 @@\n #include \"rust-compile-intrinsic.h\"\n #include \"rust-compile-context.h\"\n #include \"rust-compile-type.h\"\n+#include \"rust-compile-expr.h\"\n #include \"rust-compile-fnparam.h\"\n #include \"rust-builtins.h\"\n #include \"rust-diagnostics.h\"\n@@ -28,6 +29,8 @@\n #include \"fold-const.h\"\n #include \"langhooks.h\"\n \n+#include \"print-tree.h\"\n+\n namespace Rust {\n namespace Compile {\n \n@@ -44,6 +47,15 @@ wrapping_op_handler (Context *ctx, TyTy::FnType *fntype, tree_code op);\n static tree\n copy_nonoverlapping_handler (Context *ctx, TyTy::FnType *fntype);\n \n+enum class Prefetch\n+{\n+  Read,\n+  Write\n+};\n+\n+static tree\n+prefetch_data_handler (Context *ctx, TyTy::FnType *fntype, Prefetch kind);\n+\n static inline tree\n rotate_left_handler (Context *ctx, TyTy::FnType *fntype)\n {\n@@ -70,18 +82,32 @@ wrapping_mul_handler (Context *ctx, TyTy::FnType *fntype)\n {\n   return wrapping_op_handler (ctx, fntype, MULT_EXPR);\n }\n+static inline tree\n+prefetch_read_data (Context *ctx, TyTy::FnType *fntype)\n+{\n+  return prefetch_data_handler (ctx, fntype, Prefetch::Read);\n+}\n+static inline tree\n+prefetch_write_data (Context *ctx, TyTy::FnType *fntype)\n+{\n+  return prefetch_data_handler (ctx, fntype, Prefetch::Write);\n+}\n \n static const std::map<std::string,\n \t\t      std::function<tree (Context *, TyTy::FnType *)>>\n-  generic_intrinsics = {{\"offset\", &offset_handler},\n-\t\t\t{\"size_of\", &sizeof_handler},\n-\t\t\t{\"transmute\", &transmute_handler},\n-\t\t\t{\"rotate_left\", &rotate_left_handler},\n-\t\t\t{\"rotate_right\", &rotate_right_handler},\n-\t\t\t{\"wrapping_add\", &wrapping_add_handler},\n-\t\t\t{\"wrapping_sub\", &wrapping_sub_handler},\n-\t\t\t{\"wrapping_mul\", &wrapping_mul_handler},\n-\t\t\t{\"copy_nonoverlapping\", &copy_nonoverlapping_handler}};\n+  generic_intrinsics = {\n+    {\"offset\", &offset_handler},\n+    {\"size_of\", &sizeof_handler},\n+    {\"transmute\", &transmute_handler},\n+    {\"rotate_left\", &rotate_left_handler},\n+    {\"rotate_right\", &rotate_right_handler},\n+    {\"wrapping_add\", &wrapping_add_handler},\n+    {\"wrapping_sub\", &wrapping_sub_handler},\n+    {\"wrapping_mul\", &wrapping_mul_handler},\n+    {\"copy_nonoverlapping\", &copy_nonoverlapping_handler},\n+    {\"prefetch_read_data\", &prefetch_read_data},\n+    {\"prefetch_write_data\", &prefetch_write_data},\n+};\n \n Intrinsics::Intrinsics (Context *ctx) : ctx (ctx) {}\n \n@@ -515,5 +541,58 @@ copy_nonoverlapping_handler (Context *ctx, TyTy::FnType *fntype)\n   return fndecl;\n }\n \n+static tree\n+prefetch_data_handler (Context *ctx, TyTy::FnType *fntype, Prefetch kind)\n+{\n+  rust_assert (fntype->get_params ().size () == 2);\n+\n+  tree lookup = NULL_TREE;\n+  if (check_for_cached_intrinsic (ctx, fntype, &lookup))\n+    return lookup;\n+\n+  auto fndecl = compile_intrinsic_function (ctx, fntype);\n+\n+  // prefetching isn't pure and shouldn't be discarded after GIMPLE\n+  TREE_READONLY (fndecl) = 0;\n+  TREE_SIDE_EFFECTS (fndecl) = 1;\n+\n+  std::vector<Bvariable *> args;\n+  compile_fn_params (ctx, fntype, fndecl, &args);\n+\n+  if (!ctx->get_backend ()->function_set_parameters (fndecl, args))\n+    return error_mark_node;\n+\n+  enter_intrinsic_block (ctx, fndecl);\n+\n+  auto addr = ctx->get_backend ()->var_expression (args[0], Location ());\n+  auto locality = ctx->get_backend ()->var_expression (args[1], Location ());\n+\n+  mpz_t zero;\n+  mpz_t one;\n+  mpz_init_set_ui (zero, 0);\n+  mpz_init_set_ui (one, 1);\n+\n+  auto rw_flag_value = kind == Prefetch::Write ? one : zero;\n+  auto rw_flag\n+    = ctx->get_backend ()->integer_constant_expression (integer_type_node,\n+\t\t\t\t\t\t\trw_flag_value);\n+  auto prefetch_raw = NULL_TREE;\n+  auto ok\n+    = BuiltinsContext::get ().lookup_simple_builtin (\"prefetch\", &prefetch_raw);\n+  rust_assert (ok);\n+  auto prefetch\n+    = build_fold_addr_expr_loc (Location ().gcc_location (), prefetch_raw);\n+\n+  auto prefetch_call\n+    = ctx->get_backend ()->call_expression (prefetch, {addr, rw_flag, locality},\n+\t\t\t\t\t    nullptr, Location ());\n+\n+  ctx->add_statement (prefetch_call);\n+\n+  finalize_intrinsic_block (ctx, fndecl);\n+\n+  return fndecl;\n+}\n+\n } // namespace Compile\n } // namespace Rust"}, {"sha": "dc049b136dddda9ddd1b9e2b996eb6bf9da6daaa", "filename": "gcc/testsuite/rust/execute/torture/prefetch_data.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71397abfbe573beee3415e7031bcea84d80cdd6e/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fprefetch_data.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71397abfbe573beee3415e7031bcea84d80cdd6e/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fprefetch_data.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fprefetch_data.rs?ref=71397abfbe573beee3415e7031bcea84d80cdd6e", "patch": "@@ -0,0 +1,17 @@\n+#![feature(intrinsics)]\n+\n+extern \"rust-intrinsic\" {\n+    fn prefetch_read_data<T>(addr: *const T, locality: i32);\n+    fn prefetch_write_data<T>(addr: *const T, locality: i32);\n+}\n+\n+fn main() -> i32 {\n+    let a = [1, 2, 3, 4];\n+\n+    unsafe {\n+        prefetch_read_data(&a, 3);\n+        prefetch_write_data(&a[0], 3);\n+    }\n+\n+    0\n+}"}]}