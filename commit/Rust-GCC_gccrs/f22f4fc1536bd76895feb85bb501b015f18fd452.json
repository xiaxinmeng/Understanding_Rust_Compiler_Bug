{"sha": "f22f4fc1536bd76895feb85bb501b015f18fd452", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIyZjRmYzE1MzZiZDc2ODk1ZmViODViYjUwMWIwMTVmMThmZDQ1Mg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-02T18:32:09Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-02T18:32:09Z"}, "message": "compiler: Permit importing a method to a type being defined.\n\nFrom-SVN: r183840", "tree": {"sha": "93f917b35f3b8ff1329d0a38d7413c19994d2dba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93f917b35f3b8ff1329d0a38d7413c19994d2dba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f22f4fc1536bd76895feb85bb501b015f18fd452", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f22f4fc1536bd76895feb85bb501b015f18fd452", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f22f4fc1536bd76895feb85bb501b015f18fd452", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f22f4fc1536bd76895feb85bb501b015f18fd452/comments", "author": null, "committer": null, "parents": [{"sha": "5ee770bf9e6941a2d1f8d59e9e663fa08c818b42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ee770bf9e6941a2d1f8d59e9e663fa08c818b42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ee770bf9e6941a2d1f8d59e9e663fa08c818b42"}], "stats": {"total": 45, "additions": 32, "deletions": 13}, "files": [{"sha": "fafd04fe18e5acd66a66ae9a7968b5866ddd96ca", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f22f4fc1536bd76895feb85bb501b015f18fd452/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f22f4fc1536bd76895feb85bb501b015f18fd452/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=f22f4fc1536bd76895feb85bb501b015f18fd452", "patch": "@@ -880,7 +880,7 @@ Gogo::declare_function(const std::string& name, Function_type* type,\n       else if (rtype->forward_declaration_type() != NULL)\n \t{\n \t  Forward_declaration_type* ftype = rtype->forward_declaration_type();\n-\t  return ftype->add_method_declaration(name, type, location);\n+\t  return ftype->add_method_declaration(name, NULL, type, location);\n \t}\n       else\n \tgo_unreachable();\n@@ -4325,11 +4325,12 @@ Type_declaration::add_method(const std::string& name, Function* function)\n \n Named_object*\n Type_declaration::add_method_declaration(const std::string&  name,\n+\t\t\t\t\t Package* package,\n \t\t\t\t\t Function_type* type,\n \t\t\t\t\t Location location)\n {\n-  Named_object* ret = Named_object::make_function_declaration(name, NULL, type,\n-\t\t\t\t\t\t\t      location);\n+  Named_object* ret = Named_object::make_function_declaration(name, package,\n+\t\t\t\t\t\t\t      type, location);\n   this->methods_.push_back(ret);\n   return ret;\n }"}, {"sha": "008c8a09872c0b8f9ea5ffcd2002a8753dcd40b1", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f22f4fc1536bd76895feb85bb501b015f18fd452/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f22f4fc1536bd76895feb85bb501b015f18fd452/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=f22f4fc1536bd76895feb85bb501b015f18fd452", "patch": "@@ -1621,8 +1621,8 @@ class Type_declaration\n \n   // Add a method declaration to this type.\n   Named_object*\n-  add_method_declaration(const std::string& name, Function_type* type,\n-\t\t\t Location location);\n+  add_method_declaration(const std::string& name, Package*,\n+\t\t\t Function_type* type, Location location);\n \n   // Return whether any methods were defined.\n   bool"}, {"sha": "44ffda61fba3890286ad2337f961619f42c5ec28", "filename": "gcc/go/gofrontend/import.cc", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f22f4fc1536bd76895feb85bb501b015f18fd452/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f22f4fc1536bd76895feb85bb501b015f18fd452/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.cc?ref=f22f4fc1536bd76895feb85bb501b015f18fd452", "patch": "@@ -441,12 +441,29 @@ Import::import_func(Package* package)\n   Named_object* no;\n   if (fntype->is_method())\n     {\n-      Type* rtype = receiver->type()->deref();\n+      Type* rtype = receiver->type();\n+\n+      // We may still be reading the definition of RTYPE, so we have\n+      // to be careful to avoid calling base or convert.  If RTYPE is\n+      // a named type or a forward declaration, then we know that it\n+      // is not a pointer, because we are reading a method on RTYPE\n+      // and named pointers can't have methods.\n+\n+      if (rtype->classification() == Type::TYPE_POINTER)\n+\trtype = rtype->points_to();\n+\n       if (rtype->is_error_type())\n \treturn NULL;\n-      Named_type* named_rtype = rtype->named_type();\n-      go_assert(named_rtype != NULL);\n-      no = named_rtype->add_method_declaration(name, package, fntype, loc);\n+      else if (rtype->named_type() != NULL)\n+\tno = rtype->named_type()->add_method_declaration(name, package, fntype,\n+\t\t\t\t\t\t\t loc);\n+      else if (rtype->forward_declaration_type() != NULL)\n+\tno = rtype->forward_declaration_type()->add_method_declaration(name,\n+\t\t\t\t\t\t\t\t       package,\n+\t\t\t\t\t\t\t\t       fntype,\n+\t\t\t\t\t\t\t\t       loc);\n+      else\n+\tgo_unreachable();\n     }\n   else\n     {\n@@ -647,8 +664,8 @@ Import::read_type()\n \t{\n \t  // We have seen this type before.  FIXME: it would be a good\n \t  // idea to check that the two imported types are identical,\n-\t  // but we have not finalized the methds yet, which means\n-\t  // that we can nt reliably compare interface types.\n+\t  // but we have not finalized the methods yet, which means\n+\t  // that we can not reliably compare interface types.\n \t  type = no->type_value();\n \n \t  // Don't change the visibility of the existing type."}, {"sha": "402039941fe4b53c071ad5a40439d6da8354ef3d", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f22f4fc1536bd76895feb85bb501b015f18fd452/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f22f4fc1536bd76895feb85bb501b015f18fd452/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=f22f4fc1536bd76895feb85bb501b015f18fd452", "patch": "@@ -9115,14 +9115,15 @@ Forward_declaration_type::add_method(const std::string& name,\n \n Named_object*\n Forward_declaration_type::add_method_declaration(const std::string& name,\n+\t\t\t\t\t\t Package* package,\n \t\t\t\t\t\t Function_type* type,\n \t\t\t\t\t\t Location location)\n {\n   Named_object* no = this->named_object();\n   if (no->is_unknown())\n     no->declare_as_type();\n   Type_declaration* td = no->type_declaration_value();\n-  return td->add_method_declaration(name, type, location);\n+  return td->add_method_declaration(name, package, type, location);\n }\n \n // Traversal."}, {"sha": "4398ef1e639b88e1e5749e22a4887affbbff1221", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f22f4fc1536bd76895feb85bb501b015f18fd452/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f22f4fc1536bd76895feb85bb501b015f18fd452/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=f22f4fc1536bd76895feb85bb501b015f18fd452", "patch": "@@ -2937,7 +2937,7 @@ class Forward_declaration_type : public Type\n \n   // Add a method declaration to this type.\n   Named_object*\n-  add_method_declaration(const std::string& name, Function_type*,\n+  add_method_declaration(const std::string& name, Package*, Function_type*,\n \t\t\t Location);\n \n  protected:"}]}