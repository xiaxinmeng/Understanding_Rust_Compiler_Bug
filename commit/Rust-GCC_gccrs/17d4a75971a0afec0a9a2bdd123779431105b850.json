{"sha": "17d4a75971a0afec0a9a2bdd123779431105b850", "node_id": "C_kwDOANBUbNoAKDE3ZDRhNzU5NzFhMGFmZWMwYTlhMmJkZDEyMzc3OTQzMTEwNWI4NTA", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-03-03T09:13:53Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-03-03T11:08:17Z"}, "message": "Remove gcc abstraction for expression statement\n\nThe gcc abstraction contained a method of turning expressions into\nstatements which used to contain their own types like Bstatement,\nBexpression this produced awkward interfaces which we no longer require.\n\nThis is part of a patch series to introduce the CPP front-end\nconvert_to_void to port over the support for the nodiscard attribute which\nmaps nicely over to Rust's must_use attribute.", "tree": {"sha": "75d64e1d0ff56fdce4869397419fca38cc783013", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75d64e1d0ff56fdce4869397419fca38cc783013"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17d4a75971a0afec0a9a2bdd123779431105b850", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17d4a75971a0afec0a9a2bdd123779431105b850", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17d4a75971a0afec0a9a2bdd123779431105b850", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17d4a75971a0afec0a9a2bdd123779431105b850/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e35da26d8ed884b27050c6cbfe2460696e4c9ebe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e35da26d8ed884b27050c6cbfe2460696e4c9ebe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e35da26d8ed884b27050c6cbfe2460696e4c9ebe"}], "stats": {"total": 99, "additions": 29, "deletions": 70}, "files": [{"sha": "3fc7360c5f792dff40f282f5ae386f4706f3d9b9", "filename": "gcc/rust/backend/rust-compile-base.cc", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d4a75971a0afec0a9a2bdd123779431105b850/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d4a75971a0afec0a9a2bdd123779431105b850/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.cc?ref=17d4a75971a0afec0a9a2bdd123779431105b850", "patch": "@@ -262,9 +262,7 @@ HIRCompileBase::compile_function_body (Context *ctx, tree fndecl,\n       auto compiled_expr = CompileStmt::Compile (s.get (), ctx);\n       if (compiled_expr != nullptr)\n \t{\n-\t  tree compiled_stmt\n-\t    = ctx->get_backend ()->expression_statement (fndecl, compiled_expr);\n-\t  ctx->add_statement (compiled_stmt);\n+\t  ctx->add_statement (compiled_expr);\n \t}\n     }\n \n@@ -289,10 +287,8 @@ HIRCompileBase::compile_function_body (Context *ctx, tree fndecl,\n \t    }\n \t  else\n \t    {\n-\t      tree final_stmt\n-\t\t= ctx->get_backend ()->expression_statement (fndecl,\n-\t\t\t\t\t\t\t     compiled_expr);\n-\t      ctx->add_statement (final_stmt);\n+\t      // FIXME can this actually happen?\n+\t      ctx->add_statement (compiled_expr);\n \t    }\n \t}\n     }"}, {"sha": "6d50c3fcf9f69d45268aeee727c71662634e02b8", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d4a75971a0afec0a9a2bdd123779431105b850/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d4a75971a0afec0a9a2bdd123779431105b850/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=17d4a75971a0afec0a9a2bdd123779431105b850", "patch": "@@ -63,8 +63,6 @@ CompileExpr::visit (HIR::ArithmeticOrLogicalExpr &expr)\n void\n CompileExpr::visit (HIR::CompoundAssignmentExpr &expr)\n {\n-  fncontext fn = ctx->peek_fn ();\n-\n   auto op = expr.get_expr_type ();\n   auto lhs = CompileExpr::Compile (expr.get_left_expr ().get (), ctx);\n   auto rhs = CompileExpr::Compile (expr.get_right_expr ().get (), ctx);\n@@ -82,10 +80,7 @@ CompileExpr::visit (HIR::CompoundAssignmentExpr &expr)\n \t= resolve_operator_overload (lang_item_type, expr, lhs, rhs,\n \t\t\t\t     expr.get_left_expr ().get (),\n \t\t\t\t     expr.get_right_expr ().get ());\n-      auto assignment\n-\t= ctx->get_backend ()->expression_statement (fn.fndecl,\n-\t\t\t\t\t\t     compound_assignment);\n-      ctx->add_statement (assignment);\n+      ctx->add_statement (compound_assignment);\n \n       return;\n     }\n@@ -94,7 +89,7 @@ CompileExpr::visit (HIR::CompoundAssignmentExpr &expr)\n     = ctx->get_backend ()->arithmetic_or_logical_expression (op, lhs, rhs,\n \t\t\t\t\t\t\t     expr.get_locus ());\n   tree assignment\n-    = ctx->get_backend ()->assignment_statement (fn.fndecl, lhs, operator_expr,\n+    = ctx->get_backend ()->assignment_statement (lhs, operator_expr,\n \t\t\t\t\t\t expr.get_locus ());\n   ctx->add_statement (assignment);\n }\n@@ -304,8 +299,10 @@ CompileExpr::visit (HIR::MatchExpr &expr)\n \t{\n \t  tree result_reference\n \t    = ctx->get_backend ()->var_expression (tmp, arm_locus);\n-\t  tree assignment = ctx->get_backend ()->assignment_statement (\n-\t    fnctx.fndecl, result_reference, kase_expr_tree, arm_locus);\n+\t  tree assignment\n+\t    = ctx->get_backend ()->assignment_statement (result_reference,\n+\t\t\t\t\t\t\t kase_expr_tree,\n+\t\t\t\t\t\t\t arm_locus);\n \t  ctx->add_statement (assignment);\n \t}\n "}, {"sha": "8aeb703aa0354886e0130afa459d62fb57ca1277", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d4a75971a0afec0a9a2bdd123779431105b850/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d4a75971a0afec0a9a2bdd123779431105b850/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=17d4a75971a0afec0a9a2bdd123779431105b850", "patch": "@@ -169,7 +169,6 @@ class CompileExpr : public HIRCompileBase, public HIR::HIRExpressionVisitor\n \n   void visit (HIR::AssignmentExpr &expr) override\n   {\n-    fncontext fn = ctx->peek_fn ();\n     auto lvalue = CompileExpr::Compile (expr.get_lhs (), ctx);\n     auto rvalue = CompileExpr::Compile (expr.get_rhs (), ctx);\n \n@@ -191,7 +190,7 @@ class CompileExpr : public HIRCompileBase, public HIR::HIRExpressionVisitor\n \t\t       expr.get_rhs ()->get_locus ());\n \n     tree assignment\n-      = ctx->get_backend ()->assignment_statement (fn.fndecl, lvalue, rvalue,\n+      = ctx->get_backend ()->assignment_statement (lvalue, rvalue,\n \t\t\t\t\t\t   expr.get_locus ());\n \n     ctx->add_statement (assignment);\n@@ -594,9 +593,7 @@ class CompileExpr : public HIRCompileBase, public HIR::HIRExpressionVisitor\n       = CompileBlock::compile (expr.get_loop_block ().get (), ctx, nullptr);\n     tree loop_expr\n       = ctx->get_backend ()->loop_expression (code_block, expr.get_locus ());\n-    tree loop_stmt\n-      = ctx->get_backend ()->expression_statement (fnctx.fndecl, loop_expr);\n-    ctx->add_statement (loop_stmt);\n+    ctx->add_statement (loop_expr);\n \n     if (tmp != NULL)\n       {\n@@ -645,9 +642,7 @@ class CompileExpr : public HIRCompileBase, public HIR::HIRExpressionVisitor\n       = CompileExpr::Compile (expr.get_predicate_expr ().get (), ctx);\n     tree exit_expr\n       = ctx->get_backend ()->exit_expression (condition, expr.get_locus ());\n-    tree break_stmt\n-      = ctx->get_backend ()->expression_statement (fnctx.fndecl, exit_expr);\n-    ctx->add_statement (break_stmt);\n+    ctx->add_statement (exit_expr);\n \n     tree code_block_stmt\n       = CompileBlock::compile (expr.get_loop_block ().get (), ctx, nullptr);\n@@ -659,14 +654,11 @@ class CompileExpr : public HIRCompileBase, public HIR::HIRExpressionVisitor\n \n     tree loop_expr\n       = ctx->get_backend ()->loop_expression (loop_block, expr.get_locus ());\n-    tree loop_stmt\n-      = ctx->get_backend ()->expression_statement (fnctx.fndecl, loop_expr);\n-    ctx->add_statement (loop_stmt);\n+    ctx->add_statement (loop_expr);\n   }\n \n   void visit (HIR::BreakExpr &expr) override\n   {\n-    fncontext fnctx = ctx->peek_fn ();\n     if (expr.has_break_expr ())\n       {\n \ttree compiled_expr\n@@ -676,8 +668,10 @@ class CompileExpr : public HIRCompileBase, public HIR::HIRExpressionVisitor\n \ttree result_reference = ctx->get_backend ()->var_expression (\n \t  loop_result_holder, expr.get_expr ()->get_locus ());\n \n-\ttree assignment = ctx->get_backend ()->assignment_statement (\n-\t  fnctx.fndecl, result_reference, compiled_expr, expr.get_locus ());\n+\ttree assignment\n+\t  = ctx->get_backend ()->assignment_statement (result_reference,\n+\t\t\t\t\t\t       compiled_expr,\n+\t\t\t\t\t\t       expr.get_locus ());\n \tctx->add_statement (assignment);\n       }\n \n@@ -721,9 +715,7 @@ class CompileExpr : public HIRCompileBase, public HIR::HIRExpressionVisitor\n \ttree exit_expr = ctx->get_backend ()->exit_expression (\n \t  ctx->get_backend ()->boolean_constant_expression (true),\n \t  expr.get_locus ());\n-\ttree break_stmt\n-\t  = ctx->get_backend ()->expression_statement (fnctx.fndecl, exit_expr);\n-\tctx->add_statement (break_stmt);\n+\tctx->add_statement (exit_expr);\n       }\n   }\n \n@@ -761,9 +753,7 @@ class CompileExpr : public HIRCompileBase, public HIR::HIRExpressionVisitor\n \t  }\n       }\n \n-    tree goto_label\n-      = ctx->get_backend ()->goto_statement (label, expr.get_locus ());\n-    ctx->add_statement (goto_label);\n+    translated = ctx->get_backend ()->goto_statement (label, expr.get_locus ());\n   }\n \n   void visit (HIR::BorrowExpr &expr) override;"}, {"sha": "0f69fb0515a03e2dba4f9cc985180ae8b25976ca", "filename": "gcc/rust/backend/rust-compile-stmt.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d4a75971a0afec0a9a2bdd123779431105b850/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d4a75971a0afec0a9a2bdd123779431105b850/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h?ref=17d4a75971a0afec0a9a2bdd123779431105b850", "patch": "@@ -90,9 +90,8 @@ class CompileStmt : public HIRCompileBase, public HIR::HIRStmtVisitor\n     auto fnctx = ctx->peek_fn ();\n     if (ty->is_unit ())\n       {\n-\ttree expr_stmt\n-\t  = ctx->get_backend ()->expression_statement (fnctx.fndecl, init);\n-\tctx->add_statement (expr_stmt);\n+\t// FIXME this feels wrong\n+\tctx->add_statement (init);\n       }\n     else\n       {"}, {"sha": "6aec0504a043d09713e48221e3e67c858d56ea10", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d4a75971a0afec0a9a2bdd123779431105b850/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d4a75971a0afec0a9a2bdd123779431105b850/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=17d4a75971a0afec0a9a2bdd123779431105b850", "patch": "@@ -82,10 +82,7 @@ CompileBlock::visit (HIR::BlockExpr &expr)\n       auto compiled_expr = CompileStmt::Compile (s.get (), ctx);\n       if (compiled_expr != nullptr)\n \t{\n-\t  tree compiled_stmt\n-\t    = ctx->get_backend ()->expression_statement (fnctx.fndecl,\n-\t\t\t\t\t\t\t compiled_expr);\n-\t  ctx->add_statement (compiled_stmt);\n+\t  ctx->add_statement (compiled_expr);\n \t}\n     }\n \n@@ -98,19 +95,15 @@ CompileBlock::visit (HIR::BlockExpr &expr)\n \t{\n \t  if (result == nullptr)\n \t    {\n-\t      tree final_stmt\n-\t\t= ctx->get_backend ()->expression_statement (fnctx.fndecl,\n-\t\t\t\t\t\t\t     compiled_expr);\n-\t      ctx->add_statement (final_stmt);\n+\t      ctx->add_statement (compiled_expr);\n \t    }\n \t  else\n \t    {\n \t      tree result_reference = ctx->get_backend ()->var_expression (\n \t\tresult, expr.get_final_expr ()->get_locus ());\n \n \t      tree assignment\n-\t\t= ctx->get_backend ()->assignment_statement (fnctx.fndecl,\n-\t\t\t\t\t\t\t     result_reference,\n+\t\t= ctx->get_backend ()->assignment_statement (result_reference,\n \t\t\t\t\t\t\t     compiled_expr,\n \t\t\t\t\t\t\t     expr.get_locus ());\n \t      ctx->add_statement (assignment);"}, {"sha": "fca09b2bd68dcc209d9bab5b76fbea8d026bea86", "filename": "gcc/rust/rust-backend.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d4a75971a0afec0a9a2bdd123779431105b850/gcc%2Frust%2Frust-backend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d4a75971a0afec0a9a2bdd123779431105b850/gcc%2Frust%2Frust-backend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-backend.h?ref=17d4a75971a0afec0a9a2bdd123779431105b850", "patch": "@@ -292,16 +292,13 @@ class Backend\n \n   // Statements.\n \n-  // Create an expression statement within the specified function.\n-  virtual tree expression_statement (tree, tree) = 0;\n-\n   // Create a variable initialization statement in the specified\n   // function.  This initializes a local variable at the point in the\n   // program flow where it is declared.\n   virtual tree init_statement (tree, Bvariable *var, tree init) = 0;\n \n   // Create an assignment statement within the specified function.\n-  virtual tree assignment_statement (tree, tree lhs, tree rhs, Location) = 0;\n+  virtual tree assignment_statement (tree lhs, tree rhs, Location) = 0;\n \n   // Create a return statement, passing the representation of the\n   // function and the list of values to return."}, {"sha": "dfdfe8a5d2634dbefb2af0d7dad9581240ddb9bb", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d4a75971a0afec0a9a2bdd123779431105b850/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d4a75971a0afec0a9a2bdd123779431105b850/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=17d4a75971a0afec0a9a2bdd123779431105b850", "patch": "@@ -249,11 +249,9 @@ class Gcc_backend : public Backend\n \n   // Statements.\n \n-  tree expression_statement (tree, tree);\n-\n   tree init_statement (tree, Bvariable *var, tree init);\n \n-  tree assignment_statement (tree, tree lhs, tree rhs, Location);\n+  tree assignment_statement (tree lhs, tree rhs, Location);\n \n   tree return_statement (tree, const std::vector<tree> &, Location);\n \n@@ -1837,14 +1835,6 @@ Gcc_backend::call_expression (tree, // containing fcn for call\n   return ret;\n }\n \n-// An expression as a statement.\n-\n-tree\n-Gcc_backend::expression_statement (tree, tree expr)\n-{\n-  return expr;\n-}\n-\n // Variable initialization.\n \n tree\n@@ -1880,8 +1870,7 @@ Gcc_backend::init_statement (tree, Bvariable *var, tree init_tree)\n // Assignment.\n \n tree\n-Gcc_backend::assignment_statement (tree bfn, tree lhs, tree rhs,\n-\t\t\t\t   Location location)\n+Gcc_backend::assignment_statement (tree lhs, tree rhs, Location location)\n {\n   if (lhs == error_mark_node || rhs == error_mark_node)\n     return error_mark_node;\n@@ -1896,8 +1885,7 @@ Gcc_backend::assignment_statement (tree bfn, tree lhs, tree rhs,\n       || int_size_in_bytes (TREE_TYPE (lhs)) == 0\n       || TREE_TYPE (rhs) == void_type_node\n       || int_size_in_bytes (TREE_TYPE (rhs)) == 0)\n-    return this->compound_statement (this->expression_statement (bfn, lhs),\n-\t\t\t\t     this->expression_statement (bfn, rhs));\n+    return this->compound_statement (lhs, rhs);\n \n   rhs = this->convert_tree (TREE_TYPE (lhs), rhs, location);\n \n@@ -2527,8 +2515,7 @@ Gcc_backend::temporary_variable (tree fndecl, tree bind_tree, tree type_tree,\n   if (init_tree != NULL_TREE\n       && (this->type_size (type_tree) == 0\n \t  || TREE_TYPE (init_tree) == void_type_node))\n-    *pstatement = this->compound_statement (\n-      this->expression_statement (fndecl, init_tree), *pstatement);\n+    *pstatement = this->compound_statement (init_tree, *pstatement);\n \n   return new Bvariable (var);\n }"}]}