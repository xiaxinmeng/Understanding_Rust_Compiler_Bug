{"sha": "c787dd82d51b209f13b9ef4bfdb7fecc3007bdf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc4N2RkODJkNTFiMjA5ZjEzYjllZjRiZmRiN2ZlY2MzMDA3YmRmNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-08-01T02:36:54Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-08-01T02:36:54Z"}, "message": "init.c (init_init_processing): Remove BI* handling.\n\n\t* init.c (init_init_processing): Remove BI* handling.\n\t(build_builtin_call): Remove.\n\t(build_builtin_delete_call): New fn.\n\t(build_delete): Use it.\n\nFrom-SVN: r21514", "tree": {"sha": "a82170761c8550b0a4bd292476ddead8538dbde4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a82170761c8550b0a4bd292476ddead8538dbde4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c787dd82d51b209f13b9ef4bfdb7fecc3007bdf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c787dd82d51b209f13b9ef4bfdb7fecc3007bdf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c787dd82d51b209f13b9ef4bfdb7fecc3007bdf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c787dd82d51b209f13b9ef4bfdb7fecc3007bdf7/comments", "author": null, "committer": null, "parents": [{"sha": "acb26b31f9c80f163ab3b377fb25c1bf83eeac5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acb26b31f9c80f163ab3b377fb25c1bf83eeac5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acb26b31f9c80f163ab3b377fb25c1bf83eeac5b"}], "stats": {"total": 48, "additions": 18, "deletions": 30}, "files": [{"sha": "4b806660af192f7103f328f7a8e5ccd329efddb0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c787dd82d51b209f13b9ef4bfdb7fecc3007bdf7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c787dd82d51b209f13b9ef4bfdb7fecc3007bdf7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c787dd82d51b209f13b9ef4bfdb7fecc3007bdf7", "patch": "@@ -1,3 +1,10 @@\n+1998-08-01  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* init.c (init_init_processing): Remove BI* handling.\n+\t(build_builtin_call): Remove.\n+\t(build_builtin_delete_call): New fn.\n+\t(build_delete): Use it.\n+\t\n 1998-07-31  Mark Mitchell  <mark@markmitchell.com>\n \n \t* cp-tree.h (PROCESSING_REAL_TEMPLATE_DECL_P): New macro."}, {"sha": "5975320d31f2300a6ffae873fe4af3819f14a4d2", "filename": "gcc/cp/init.c", "status": "modified", "additions": 11, "deletions": 30, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c787dd82d51b209f13b9ef4bfdb7fecc3007bdf7/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c787dd82d51b209f13b9ef4bfdb7fecc3007bdf7/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=c787dd82d51b209f13b9ef4bfdb7fecc3007bdf7", "patch": "@@ -55,17 +55,14 @@ static tree build_vec_delete_1 PROTO((tree, tree, tree, tree, tree,\n \t\t\t\t      int));\n static void perform_member_init PROTO((tree, tree, tree, int));\n static void sort_base_init PROTO((tree, tree *, tree *));\n-static tree build_builtin_call PROTO((tree, tree, tree));\n+static tree build_builtin_delete_call PROTO((tree));\n static tree build_array_eh_cleanup PROTO((tree, tree, tree));\n static int member_init_ok_or_else PROTO((tree, tree, char *));\n static void expand_virtual_init PROTO((tree, tree));\n static tree sort_member_init PROTO((tree));\n static tree build_partial_cleanup_for PROTO((tree));\n static tree initializing_context PROTO((tree));\n \n-/* Cache _builtin_new and _builtin_delete exprs.  */\n-static tree BIN, BID, BIVN, BIVD;\n-\n /* Cache the identifier nodes for the magic field of a new cookie.  */\n static tree nc_nelts_field_id;\n \n@@ -80,15 +77,6 @@ void init_init_processing ()\n {\n   tree fields[1];\n \n-  /* Define implicit `operator new' and `operator delete' functions.  */\n-  BIN = default_conversion (get_first_fn (IDENTIFIER_GLOBAL_VALUE (ansi_opname[(int) NEW_EXPR])));\n-  TREE_USED (TREE_OPERAND (BIN, 0)) = 0;\n-  BID = default_conversion (get_first_fn (IDENTIFIER_GLOBAL_VALUE (ansi_opname[(int) DELETE_EXPR])));\n-  TREE_USED (TREE_OPERAND (BID, 0)) = 0;\n-  BIVN = default_conversion (get_first_fn (IDENTIFIER_GLOBAL_VALUE (ansi_opname[(int) VEC_NEW_EXPR])));\n-  TREE_USED (TREE_OPERAND (BIVN, 0)) = 0;\n-  BIVD = default_conversion (get_first_fn (IDENTIFIER_GLOBAL_VALUE (ansi_opname[(int) VEC_DELETE_EXPR])));\n-  TREE_USED (TREE_OPERAND (BIVD, 0)) = 0;\n   minus_one = build_int_2 (-1, -1);\n \n   /* Define the structure that holds header information for\n@@ -1929,20 +1917,16 @@ decl_constant_value (decl)\n \f\n /* Common subroutines of build_new and build_vec_delete.  */\n \n-/* Common interface for calling \"builtin\" functions that are not\n-   really builtin.  */\n+/* Call the global __builtin_delete to delete ADDR.  */\n \n static tree\n-build_builtin_call (type, node, arglist)\n-     tree type;\n-     tree node;\n-     tree arglist;\n+build_builtin_delete_call (addr)\n+     tree addr;\n {\n-  tree rval = build (CALL_EXPR, type, node, arglist, NULL_TREE);\n-  TREE_SIDE_EFFECTS (rval) = 1;\n-  assemble_external (TREE_OPERAND (node, 0));\n-  TREE_USED (TREE_OPERAND (node, 0)) = 1;\n-  return rval;\n+  tree BID = get_first_fn\n+    (IDENTIFIER_GLOBAL_VALUE (ansi_opname[(int) DELETE_EXPR]));\n+\n+  return build_call (BID, void_type_node, build_expr_list (NULL_TREE, addr));\n }\n \f\n /* Generate a C++ \"new\" expression. DECL is either a TREE_LIST\n@@ -2983,8 +2967,7 @@ build_delete (type, addr, auto_delete, flags, use_global_delete)\n       if (! IS_AGGR_TYPE (type))\n \t{\n \t  /* Call the builtin operator delete.  */\n-\t  return build_builtin_call (void_type_node, BID,\n-\t\t\t\t     build_expr_list (NULL_TREE, addr));\n+\t  return build_builtin_delete_call (addr);\n \t}\n       if (TREE_SIDE_EFFECTS (addr))\n \taddr = save_expr (addr);\n@@ -3050,8 +3033,7 @@ build_delete (type, addr, auto_delete, flags, use_global_delete)\n \t{\n \t  tree cond = fold (build (BIT_AND_EXPR, integer_type_node,\n \t\t\t\t   auto_delete, integer_one_node));\n-\t  tree call = build_builtin_call\n-\t    (void_type_node, BID, build_expr_list (NULL_TREE, addr));\n+\t  tree call = build_builtin_delete_call (addr);\n \n \t  cond = fold (build (COND_EXPR, void_type_node, cond,\n \t\t\t      call, void_zero_node));\n@@ -3103,8 +3085,7 @@ build_delete (type, addr, auto_delete, flags, use_global_delete)\n \t{\n \t  cond = build (COND_EXPR, void_type_node,\n \t\t\tbuild (BIT_AND_EXPR, integer_type_node, auto_delete, integer_one_node),\n-\t\t\tbuild_builtin_call (void_type_node, BID,\n-\t\t\t\t\t    build_expr_list (NULL_TREE, addr)),\n+\t\t\tbuild_builtin_delete_call (addr),\n \t\t\tvoid_zero_node);\n \t}\n       else"}]}