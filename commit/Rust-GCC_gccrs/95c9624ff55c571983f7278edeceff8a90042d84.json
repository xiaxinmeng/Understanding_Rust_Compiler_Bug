{"sha": "95c9624ff55c571983f7278edeceff8a90042d84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVjOTYyNGZmNTVjNTcxOTgzZjcyNzhlZGVjZWZmOGE5MDA0MmQ4NA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-01-13T11:12:38Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-01-13T11:12:38Z"}, "message": "re PR libstdc++/13650 (string::compare should not (always) use traits_type::length())\n\n2004-01-13  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/13650\n\t* include/bits/basic_string.tcc (compare(size_type, size_type,\n\tconst _CharT*, size_type)): Implement correctly the resolution\n\tof DR 5: basically, s is a char array, -not- a C string.\n\t* include/bits/basic_string.h: Tweak some comments.\n\t* testsuite/21_strings/basic_string/compare/char/13650.cc: New.\n\t* testsuite/21_strings/basic_string/compare/wchar_t/13650.cc: New.\n\nFrom-SVN: r75798", "tree": {"sha": "a39912d1f0b43230a42dcfa6ec271b225f34c385", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a39912d1f0b43230a42dcfa6ec271b225f34c385"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95c9624ff55c571983f7278edeceff8a90042d84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95c9624ff55c571983f7278edeceff8a90042d84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95c9624ff55c571983f7278edeceff8a90042d84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95c9624ff55c571983f7278edeceff8a90042d84/comments", "author": null, "committer": null, "parents": [{"sha": "0fe7abcc1ec575e19311f05dbdd650a95be27e23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fe7abcc1ec575e19311f05dbdd650a95be27e23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fe7abcc1ec575e19311f05dbdd650a95be27e23"}], "stats": {"total": 140, "additions": 125, "deletions": 15}, "files": [{"sha": "d3f86f7be9a59420ed0c3653429f51302efcfbea", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95c9624ff55c571983f7278edeceff8a90042d84/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95c9624ff55c571983f7278edeceff8a90042d84/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=95c9624ff55c571983f7278edeceff8a90042d84", "patch": "@@ -1,3 +1,13 @@\n+2004-01-13  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/13650\n+\t* include/bits/basic_string.tcc (compare(size_type, size_type,\n+\tconst _CharT*, size_type)): Implement correctly the resolution\n+\tof DR 5: basically, s is a char array, -not- a C string.\n+\t* include/bits/basic_string.h: Tweak some comments.\n+\t* testsuite/21_strings/basic_string/compare/char/13650.cc: New.\n+\t* testsuite/21_strings/basic_string/compare/wchar_t/13650.cc: New.\n+\n 2004-01-12  Andreas Tobler  <a.tobler@schweiz.ch>\n \n \t* testsuite/lib/libstdc++.exp: Set LD_LIBRARY_PATH_32 for"}, {"sha": "0b679e0c081146db664e08ea40ff446b945155da", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95c9624ff55c571983f7278edeceff8a90042d84/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95c9624ff55c571983f7278edeceff8a90042d84/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=95c9624ff55c571983f7278edeceff8a90042d84", "patch": "@@ -379,10 +379,13 @@ namespace std\n \t\t   size_type __n, const _Alloc& __a);\n \n       /**\n-       *  @brief  Construct string as copy of a C substring.\n-       *  @param  s  Source C string.\n+       *  @brief  Construct string initialized by a character array.\n+       *  @param  s  Source character array.\n        *  @param  n  Number of characters to copy.\n        *  @param  a  Allocator to use (default is default allocator).\n+       *  \n+       *  NB: s must have at least n characters, '\\0' has no special\n+       *  meaning.\n        */\n       basic_string(const _CharT* __s, size_type __n,\n \t\t   const _Alloc& __a = _Alloc());\n@@ -1955,21 +1958,23 @@ namespace std\n       compare(size_type __pos, size_type __n1, const _CharT* __s) const;\n \n       /**\n-       *  @brief  Compare substring against a C substring.\n+       *  @brief  Compare substring against a character array.\n        *  @param pos1  Index of first character of substring.\n        *  @param n1  Number of characters in substring.\n-       *  @param s  C string to compare against.\n-       *  @param n2  Number of characters in substring of s.\n+       *  @param s  character array to compare against.\n+       *  @param n2  Number of characters of s.\n        *  @return  Integer < 0, 0, or > 0.\n        *\n        *  Form the substring of this string from the @a n1 characters starting\n-       *  at @a pos1.  Form the substring of @a s from the first @a n\n-       *  characters of @a s.  Returns an integer < 0 if this substring is\n-       *  ordered before the substring of @a s, 0 if their values are\n-       *  equivalent, or > 0 if this substring is ordered after the substring\n-       *  of @a s.  If the lengths of this substring and @a n are different,\n-       *  the shorter one is ordered first.  If they are the same, returns the\n-       *  result of traits::compare(substring.data(),s,size());\n+       *  at @a pos1.  Form a string from the first @a n2 characters of @a s.\n+       *  Returns an integer < 0 if this substring is ordered before the string\n+       *  from @a s, 0 if their values are equivalent, or > 0 if this substring\n+       *  is ordered after the string from @a s. If the lengths of this substring\n+       *  and @a n2 are different, the shorter one is ordered first.  If they are\n+       *  the same, returns the result of traits::compare(substring.data(),s,size());\n+       *\n+       *  NB: s must have at least n2 characters, '\\0' has no special\n+       *  meaning.\n       */\n       int\n       compare(size_type __pos, size_type __n1, const _CharT* __s,"}, {"sha": "87eac7adda812f1c750d92545b0edf9e5be937a3", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95c9624ff55c571983f7278edeceff8a90042d84/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95c9624ff55c571983f7278edeceff8a90042d84/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=95c9624ff55c571983f7278edeceff8a90042d84", "patch": "@@ -1080,12 +1080,11 @@ namespace std\n       if (__pos > __size)\n \t__throw_out_of_range(\"basic_string::compare\");\n       \n-      const size_type __osize = std::min(traits_type::length(__s), __n2);\n       const size_type __rsize = std::min(size_type(__size - __pos), __n1);\n-      const size_type __len = std::min(__rsize, __osize);\n+      const size_type __len = std::min(__rsize, __n2);\n       int __r = traits_type::compare(_M_data() + __pos, __s, __len);\n       if (!__r)\n-\t__r = __rsize - __osize;\n+\t__r = __rsize - __n2;\n       return __r;\n     }\n "}, {"sha": "d1ed3d4fa45b58a0ada5b92fd24c1057cb50f52a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/compare/char/13650.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95c9624ff55c571983f7278edeceff8a90042d84/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcompare%2Fchar%2F13650.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95c9624ff55c571983f7278edeceff8a90042d84/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcompare%2Fchar%2F13650.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcompare%2Fchar%2F13650.cc?ref=95c9624ff55c571983f7278edeceff8a90042d84", "patch": "@@ -0,0 +1,48 @@\n+// 2004-01-13  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.6.8 basic_string::compare [lib.string::compare]\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/13650\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  const char lit_01[] = { 'w', 'e', '\\0', 'r', 'd' };\n+  const char lit_02[] = { 'w', 'e', 'i', '\\0', 'd' };\n+\n+  const char lit_ref_a[] = { 'w', 'e', '\\0', 'q', 'd' };\n+  const string str_a(lit_ref_a, 5);\n+  VERIFY( str_a.compare(0, 5, lit_01, 5) < 0 );\n+\n+  const char lit_ref_b[] = { 'w', 'e', 'i' };\n+  const string str_b(lit_ref_b, 3);\n+  VERIFY( str_b.compare(0, 3, lit_02, 5) < 0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "13e3ca26019fd817b398c05141d03744e9cc7df9", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/compare/wchar_t/13650.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95c9624ff55c571983f7278edeceff8a90042d84/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcompare%2Fwchar_t%2F13650.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95c9624ff55c571983f7278edeceff8a90042d84/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcompare%2Fwchar_t%2F13650.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcompare%2Fwchar_t%2F13650.cc?ref=95c9624ff55c571983f7278edeceff8a90042d84", "patch": "@@ -0,0 +1,48 @@\n+// 2004-01-13  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.6.8 basic_string::compare [lib.string::compare]\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/13650\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  const wchar_t lit_01[] = { L'w', L'e', L'\\0', L'r', L'd' };\n+  const wchar_t lit_02[] = { L'w', L'e', L'i', L'\\0', L'd' };\n+\n+  const wchar_t lit_ref_a[] = { L'w', L'e', L'\\0', L'q', L'd' };\n+  const wstring str_a(lit_ref_a, 5);\n+  VERIFY( str_a.compare(0, 5, lit_01, 5) < 0 );\n+\n+  const wchar_t lit_ref_b[] = { L'w', L'e', L'i' };\n+  const wstring str_b(lit_ref_b, 3);\n+  VERIFY( str_b.compare(0, 3, lit_02, 5) < 0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}