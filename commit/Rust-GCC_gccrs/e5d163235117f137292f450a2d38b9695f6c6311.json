{"sha": "e5d163235117f137292f450a2d38b9695f6c6311", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVkMTYzMjM1MTE3ZjEzNzI5MmY0NTBhMmQzOGI5Njk1ZjZjNjMxMQ==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2018-09-26T09:15:48Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-09-26T09:15:48Z"}, "message": "[Ada] Fix miscellaneous typos\n\n2018-09-26  Gary Dismukes  <dismukes@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch9.adb, layout.adb, sem_attr.adb, sem_res.adb: Fix\n\tmiscellaneous typos.\n\nFrom-SVN: r264599", "tree": {"sha": "08a1839c918f4e74b6ab146637dccfad8c6e5550", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08a1839c918f4e74b6ab146637dccfad8c6e5550"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5d163235117f137292f450a2d38b9695f6c6311", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5d163235117f137292f450a2d38b9695f6c6311", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5d163235117f137292f450a2d38b9695f6c6311", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5d163235117f137292f450a2d38b9695f6c6311/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5e14418b07376add230c52ac4c53efd65fd3b8c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e14418b07376add230c52ac4c53efd65fd3b8c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e14418b07376add230c52ac4c53efd65fd3b8c9"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "d5e4018a04a14ed172ec33156b0ed1522fea01c6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5d163235117f137292f450a2d38b9695f6c6311/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5d163235117f137292f450a2d38b9695f6c6311/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e5d163235117f137292f450a2d38b9695f6c6311", "patch": "@@ -1,3 +1,8 @@\n+2018-09-26  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch9.adb, layout.adb, sem_attr.adb, sem_res.adb: Fix\n+\tmiscellaneous typos.\n+\n 2018-09-26  Jerome Lambourg  <lambourg@adacore.com>\n \n \t* vxlink.adb: Kill a CodePeer warning."}, {"sha": "a62ba2dea3bd41f284177a089b8ecaf12a45e817", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5d163235117f137292f450a2d38b9695f6c6311/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5d163235117f137292f450a2d38b9695f6c6311/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=e5d163235117f137292f450a2d38b9695f6c6311", "patch": "@@ -481,7 +481,7 @@ package body Exp_Ch9 is\n    --  to be E. Bod is either a block or a subprogram body.  Used after\n    --  expanding various kinds of entry bodies into their corresponding\n    --  constructs. This is needed during unnesting to determine whether a\n-   --  body geenrated for an entry or an accept alternative includes uplevel\n+   --  body generated for an entry or an accept alternative includes uplevel\n    --  references.\n \n    function Trivial_Accept_OK return Boolean;\n@@ -14854,7 +14854,7 @@ package body Exp_Ch9 is\n       function Reset_Scope (N : Node_Id) return Traverse_Result;\n       --  Temporaries may have been declared during expansion of the procedure\n       --  created for an entry body or an accept alternative. Indicate that\n-      --  their scope is the new body, to unsure proper generation of uplevel\n+      --  their scope is the new body, to ensure proper generation of uplevel\n       --  references where needed during unnesting.\n \n       procedure Reset_Scopes is new Traverse_Proc (Reset_Scope);"}, {"sha": "91640c15f86d360f2abd91dacbdb6cfdfe769a24", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5d163235117f137292f450a2d38b9695f6c6311/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5d163235117f137292f450a2d38b9695f6c6311/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=e5d163235117f137292f450a2d38b9695f6c6311", "patch": "@@ -328,7 +328,7 @@ package body Layout is\n          --  If unnesting subprograms, subprogram access types contain the\n          --  address of both the subprogram and an activation record. But if we\n          --  set that, we'll get a warning on different unchecked conversion\n-         --  sizes in the RTS. So leave unset ub that case.\n+         --  sizes in the RTS. So leave unset in that case.\n \n          elsif Unnest_Subprogram_Mode\n            and then Is_Access_Subprogram_Type (E)"}, {"sha": "715ec95455243a7e10ba4e332426693d596c886e", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5d163235117f137292f450a2d38b9695f6c6311/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5d163235117f137292f450a2d38b9695f6c6311/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=e5d163235117f137292f450a2d38b9695f6c6311", "patch": "@@ -11249,9 +11249,9 @@ package body Sem_Attr is\n                      --  The above sets the Scope of the flag entity to the\n                      --  current scope, in which the attribute appears, but\n                      --  the flag declaration has been inserted after that\n-                     --  of Subp_Id, so the scope of the flag the same as\n+                     --  of Subp_Id, so the scope of the flag is the same as\n                      --  that of Subp_Id. This is relevant when unnesting,\n-                     --  whereh processing depends on correct scope settingl\n+                     --  where processing depends on correct scope setting.\n \n                      Set_Scope (Flag_Id, Scop);\n                   end if;"}, {"sha": "5354d81630b71c75386b90586df4af782fecff01", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5d163235117f137292f450a2d38b9695f6c6311/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5d163235117f137292f450a2d38b9695f6c6311/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=e5d163235117f137292f450a2d38b9695f6c6311", "patch": "@@ -6067,7 +6067,7 @@ package body Sem_Res is\n       --  (including the body of another expression function) which would\n       --  place the freeze node in the wrong scope. An expression function\n       --  is frozen in the usual fashion, by the appearance of a real body,\n-      --  or at the end of a declarative part. However an implcit call to\n+      --  or at the end of a declarative part. However an implicit call to\n       --  an expression function may appear when it is part of a default\n       --  expression in a call to an initialiation procedure, and must be\n       --  frozen now, even if the body is inserted at a later point."}]}