{"sha": "2f3e235bb3e7b573f4a3fa78e1a755004f64b1f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYzZTIzNWJiM2U3YjU3M2Y0YTNmYTc4ZTFhNzU1MDA0ZjY0YjFmNg==", "commit": {"author": {"name": "Ira Rosen", "email": "irar@il.ibm.com", "date": "2009-07-13T12:27:32Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2009-07-13T12:27:32Z"}, "message": "tree-vect-loop.c (get_initial_def_for_reduction): Ensure that the checks access only relevant statements.\n\n\n\t* tree-vect-loop.c (get_initial_def_for_reduction): Ensure that the \n\tchecks access only relevant statements.\n\t(vectorizable_reduction): Likewise.\n\nFrom-SVN: r149576", "tree": {"sha": "08d1a13ac124f35c431605818a96cb88ab0120ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08d1a13ac124f35c431605818a96cb88ab0120ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f3e235bb3e7b573f4a3fa78e1a755004f64b1f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f3e235bb3e7b573f4a3fa78e1a755004f64b1f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f3e235bb3e7b573f4a3fa78e1a755004f64b1f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f3e235bb3e7b573f4a3fa78e1a755004f64b1f6/comments", "author": {"login": "irar2", "id": 16818592, "node_id": "MDQ6VXNlcjE2ODE4NTky", "avatar_url": "https://avatars.githubusercontent.com/u/16818592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irar2", "html_url": "https://github.com/irar2", "followers_url": "https://api.github.com/users/irar2/followers", "following_url": "https://api.github.com/users/irar2/following{/other_user}", "gists_url": "https://api.github.com/users/irar2/gists{/gist_id}", "starred_url": "https://api.github.com/users/irar2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irar2/subscriptions", "organizations_url": "https://api.github.com/users/irar2/orgs", "repos_url": "https://api.github.com/users/irar2/repos", "events_url": "https://api.github.com/users/irar2/events{/privacy}", "received_events_url": "https://api.github.com/users/irar2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7b00e31d1e201bdc2fb6518b8866bb0851261c7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b00e31d1e201bdc2fb6518b8866bb0851261c7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b00e31d1e201bdc2fb6518b8866bb0851261c7b"}], "stats": {"total": 74, "additions": 61, "deletions": 13}, "files": [{"sha": "564c56f694d4dc3c8654c02bee5ed8be76b52c66", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3e235bb3e7b573f4a3fa78e1a755004f64b1f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3e235bb3e7b573f4a3fa78e1a755004f64b1f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f3e235bb3e7b573f4a3fa78e1a755004f64b1f6", "patch": "@@ -1,3 +1,9 @@\n+2009-07-13  Ira Rosen  <irar@il.ibm.com>\n+\n+\t* tree-vect-loop.c (get_initial_def_for_reduction): Ensure that the \n+\tchecks access only relevant statements.\n+\t(vectorizable_reduction): Likewise.\n+\n 2009-07-12  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* config/i386/cygming.h (TARGET_OS_CPP_BUILTINS): Define _X86_"}, {"sha": "08989dbf5da0b1ee6c7fe28806dd22c761e8a2a3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3e235bb3e7b573f4a3fa78e1a755004f64b1f6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3e235bb3e7b573f4a3fa78e1a755004f64b1f6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2f3e235bb3e7b573f4a3fa78e1a755004f64b1f6", "patch": "@@ -1,3 +1,7 @@\n+2009-07-13  Ira Rosen  <irar@il.ibm.com>\n+\n+\t* gfortran.dg/vect/vect-6.f: New test.\n+\n 2009-07-12  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/36628"}, {"sha": "f232dcb82d8c503290ec50d170e60bb60df75470", "filename": "gcc/testsuite/gfortran.dg/vect/vect-6.f", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3e235bb3e7b573f4a3fa78e1a755004f64b1f6/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-6.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3e235bb3e7b573f4a3fa78e1a755004f64b1f6/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-6.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-6.f?ref=2f3e235bb3e7b573f4a3fa78e1a755004f64b1f6", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do compile }\n+\n+      SUBROUTINE PROPAGATE(ICI1,ICI2,I,J,J1,ELEM,NHSO,HSO\n+     *                    ,MULST,IROOTS)\n+      IMPLICIT DOUBLE PRECISION(A-H,O-Z)\n+      COMPLEX*16 HSO,ELEM\n+      DIMENSION HSO(NHSO,NHSO),MULST(*),IROOTS(*)\n+      ISHIFT=MULST(ICI1)*(I-1)+1\n+      JSHIFT=MULST(ICI2)*(J-1)+1\n+      DO 200 ICI=1,ICI1-1\n+         ISHIFT=ISHIFT+MULST(ICI)*IROOTS(ICI)\n+  200 CONTINUE\n+      DO 220 ICI=1,ICI2-1\n+         JSHIFT=JSHIFT+MULST(ICI)*IROOTS(ICI)\n+  220 CONTINUE\n+         DO 150 MSS=MS,-MS,-2\n+           IND1=ISHIFT+K\n+           IND2=JSHIFT+K\n+           HSO(IND1,IND2)=ELEM\n+           HSO(IND2,IND1)=DCONJG(ELEM)\n+  150    CONTINUE\n+      END\n+\n+! { dg-final { cleanup-tree-dump \"vect\" } }\n+"}, {"sha": "1db80e43efd1d55b6dc6ca3e007c2f3853a84a46", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3e235bb3e7b573f4a3fa78e1a755004f64b1f6/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3e235bb3e7b573f4a3fa78e1a755004f64b1f6/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=2f3e235bb3e7b573f4a3fa78e1a755004f64b1f6", "patch": "@@ -2632,6 +2632,7 @@ get_initial_def_for_reduction (gimple stmt, tree init_val,\n   tree init_value;\n   REAL_VALUE_TYPE real_init_val = dconst0;\n   int int_init_val = 0;\n+  gimple def_stmt = NULL;\n \n   gcc_assert (vectype);\n   nunits = TYPE_VECTOR_SUBPARTS (vectype);\n@@ -2647,9 +2648,13 @@ get_initial_def_for_reduction (gimple stmt, tree init_val,\n   /* In case of double reduction we only create a vector variable to be put\n      in the reduction phi node. The actual statement creation is done in\n      vect_create_epilog_for_reduction.  */\n-  if (TREE_CODE (init_val) == SSA_NAME\n-      && vinfo_for_stmt (SSA_NAME_DEF_STMT (init_val)) \n-      && STMT_VINFO_DEF_TYPE (vinfo_for_stmt (SSA_NAME_DEF_STMT (init_val))) \n+  if (adjustment_def && nested_in_vect_loop\n+      && TREE_CODE (init_val) == SSA_NAME\n+      && (def_stmt = SSA_NAME_DEF_STMT (init_val))\n+      && gimple_code (def_stmt) == GIMPLE_PHI\n+      && flow_bb_inside_loop_p (loop, gimple_bb (def_stmt))\n+      && vinfo_for_stmt (def_stmt) \n+      && STMT_VINFO_DEF_TYPE (vinfo_for_stmt (def_stmt)) \n           == vect_double_reduction_def)\n     {\n       *adjustment_def = NULL;\n@@ -3418,11 +3423,13 @@ vectorizable_reduction (gimple stmt, gimple_stmt_iterator *gsi,\n   int reduc_index = 2;\n   bool double_reduc = false, dummy;\n   basic_block def_bb;\n-  struct loop * def_stmt_loop;\n+  struct loop * def_stmt_loop, *outer_loop = NULL;\n   tree def_arg;\n+  gimple def_arg_stmt;\n \n   if (nested_in_vect_loop_p (loop, stmt))\n     {\n+      outer_loop = loop;\n       loop = loop->inner;\n       nested_cycle = true;\n     }\n@@ -3669,15 +3676,21 @@ vectorizable_reduction (gimple stmt, gimple_stmt_iterator *gsi,\n       epilog_reduc_code = ERROR_MARK;\n     }\n \n-  def_bb = gimple_bb (reduc_def_stmt);\n-  def_stmt_loop = def_bb->loop_father;\n-  def_arg = PHI_ARG_DEF_FROM_EDGE (reduc_def_stmt,\n-                                   loop_preheader_edge (def_stmt_loop));\n-  if (TREE_CODE (def_arg) == SSA_NAME\n-      && vinfo_for_stmt (SSA_NAME_DEF_STMT (def_arg))\n-      && STMT_VINFO_DEF_TYPE (vinfo_for_stmt (SSA_NAME_DEF_STMT (def_arg)))\n-          == vect_double_reduction_def)\n-    double_reduc = true;\n+  if (nested_cycle)\n+    {\n+      def_bb = gimple_bb (reduc_def_stmt);\n+      def_stmt_loop = def_bb->loop_father;\n+      def_arg = PHI_ARG_DEF_FROM_EDGE (reduc_def_stmt,\n+                                       loop_preheader_edge (def_stmt_loop));\n+      if (TREE_CODE (def_arg) == SSA_NAME\n+          && (def_arg_stmt = SSA_NAME_DEF_STMT (def_arg))\n+          && gimple_code (def_arg_stmt) == GIMPLE_PHI\n+          && flow_bb_inside_loop_p (outer_loop, gimple_bb (def_arg_stmt))\n+          && vinfo_for_stmt (def_arg_stmt)\n+          && STMT_VINFO_DEF_TYPE (vinfo_for_stmt (def_arg_stmt))\n+              == vect_double_reduction_def)\n+        double_reduc = true;\n+    }\n \n   if (double_reduc && ncopies > 1)\n     {"}]}