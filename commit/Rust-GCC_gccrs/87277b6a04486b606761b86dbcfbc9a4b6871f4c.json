{"sha": "87277b6a04486b606761b86dbcfbc9a4b6871f4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODcyNzdiNmEwNDQ4NmI2MDY3NjFiODZkYmNmYmM5YTRiNjg3MWY0Yw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-17T00:16:31Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-17T00:16:31Z"}, "message": "Daily bump.", "tree": {"sha": "385f17a14b8ca5e99ccf609eeea4a16cd987c30d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/385f17a14b8ca5e99ccf609eeea4a16cd987c30d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87277b6a04486b606761b86dbcfbc9a4b6871f4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87277b6a04486b606761b86dbcfbc9a4b6871f4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87277b6a04486b606761b86dbcfbc9a4b6871f4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87277b6a04486b606761b86dbcfbc9a4b6871f4c/comments", "author": null, "committer": null, "parents": [{"sha": "3dbc7b809a62167b36f217ab5f43207be19e5908", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dbc7b809a62167b36f217ab5f43207be19e5908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dbc7b809a62167b36f217ab5f43207be19e5908"}], "stats": {"total": 454, "additions": 453, "deletions": 1}, "files": [{"sha": "b18ee85acae56cda25d5e87c324210413856e00b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 215, "deletions": 0, "changes": 215, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87277b6a04486b606761b86dbcfbc9a4b6871f4c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87277b6a04486b606761b86dbcfbc9a4b6871f4c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87277b6a04486b606761b86dbcfbc9a4b6871f4c", "patch": "@@ -1,3 +1,218 @@\n+2021-07-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* doc/analyzer.texi: Add __analyzer_dump_state.\n+\n+2021-07-16  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rbtree.c: New file.\n+\t* config/rs6000/rbtree.h: New file.\n+\n+2021-07-16  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-gen-builtins.c (restriction): New enum.\n+\t(typeinfo): Add restr field.\n+\t(match_bracketed_pair): New function.\n+\t(match_const_restriction): Implement.\n+\n+2021-07-16  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-gen-builtins.c (match_basetype): Implement.\n+\n+2021-07-16  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-gen-builtins.c (void_status): New enum.\n+\t(basetype): Likewise.\n+\t(typeinfo): Likewise.\n+\t(handle_pointer): New function.\n+\t(match_basetype): New stub function.\n+\t(match_const_restriction): Likewise.\n+\t(match_type): New function.\n+\n+2021-07-16  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-gen-builtins.c (consume_whitespace): New\n+\tfunction.\n+\t(advance_line): Likewise.\n+\t(safe_inc_pos): Likewise.\n+\t(match_identifier): Likewise.\n+\t(match_integer): Likewise.\n+\t(match_to_right_bracket): Likewise.\n+\n+2021-07-16  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-gen-builtins.c (bif_file): New variable.\n+\t(ovld_file): Likewise.\n+\t(header_file): Likewise.\n+\t(init_file): Likewise.\n+\t(defines_file): Likewise.\n+\t(pgm_path): Likewise.\n+\t(bif_path): Likewise.\n+\t(ovld_path): Likewise.\n+\t(header_path): Likewise.\n+\t(init_path): Likewise.\n+\t(defines_path): Likewise.\n+\t(LINELEN): New macro.\n+\t(linebuf): New variable.\n+\t(line): Likewise.\n+\t(pos): Likewise.\n+\t(diag): Likewise.\n+\t(bif_diag): New function.\n+\t(ovld_diag): Likewise.\n+\n+2021-07-16  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-builtin-new.def: New.\n+\t* config/rs6000/rs6000-overload.def: New.\n+\n+2021-07-16  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-gen-builtins.c: New.\n+\n+2021-07-16  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* Makefile.in (EXTRA_GTYPE_DEPS): New variable.\n+\t(s-gtype): Depend on EXTRA_GTYPE_DEPS.\n+\t* gengtype-state.c (state_writer::write_state_file_list): Add a\n+\tparameter to the fileslist expression for the number of build\n+\theaders to scan.\n+\t(read_state_files_list): Detect build headers and strip the\n+\tinitial \"./\" or \".\\\" from their names.\n+\t* gengtype.c (build_headers): New global variable.\n+\t(num_build_headers): Likewise.\n+\t(open_base_files): Emit #include for each build header.\n+\t(main): Detect and count build headers.\n+\t* gengtype.h (build_headers): New extern variable.\n+\t(num_build_headers): Likewise.\n+\n+2021-07-16  Richard Biener   <rguenther@suse.de>\n+\n+\t* gimple-ssa-store-merging.c (verify_symbolic_number_p): Use\n+\tthe type of the LHS.\n+\t(find_bswap_or_nop_1): Likewise.\n+\t(find_bswap_or_nop): Likewise.\n+\t* tree-vectorizer.h (vect_get_smallest_scalar_type): Adjust\n+\tprototype.\n+\t* tree-vect-data-refs.c (vect_get_smallest_scalar_type):\n+\tRemove unused parameters, pass in the scalar type.  Fix\n+\tinternal store function handling.\n+\t* tree-vect-stmts.c (vect_analyze_stmt): Remove assert.\n+\t(vect_get_vector_types_for_stmt): Move down check for\n+\texisting vector stmt after we've determined a scalar type.\n+\tPass down the used scalar type to vect_get_smallest_scalar_type.\n+\t* tree-vect-generic.c (expand_vector_condition): Use\n+\tthe type of the LHS.\n+\t(expand_vector_scalar_condition): Likewise.\n+\t(expand_vector_operations_1): Likewise.\n+\t* tree-vect-patterns.c (vect_widened_op_tree): Likewise.\n+\t(vect_recog_dot_prod_pattern): Likewise.\n+\t(vect_recog_sad_pattern): Likewise.\n+\t(vect_recog_widen_op_pattern): Likewise.\n+\t(vect_recog_widen_sum_pattern): Likewise.\n+\t(vect_recog_mixed_size_cond_pattern): Likewise.\n+\n+2021-07-16  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-modref.c (struct escape_entry): Use eaf_fleags_t.\n+\t(dump_eaf_flags): Dump EAF_NOT_RETURNED\n+\t(eaf_flags_useful_p): Use eaf_fleags_t; handle const functions\n+\tand EAF_NOT_RETURNED.\n+\t(modref_summary::useful_p): Likewise.\n+\t(modref_summary_lto::useful_p): Likewise.\n+\t(struct) modref_summary_lto: Use eaf_fleags_t.\n+\t(deref_flags): Handle EAF_NOT_RETURNED.\n+\t(struct escape_point): Use min_flags.\n+\t(modref_lattice::init): Add EAF_NOT_RETURNED.\n+\t(merge_call_lhs_flags): Ignore EAF_NOT_RETURNED functions\n+\t(analyze_ssa_name_flags): Clear EAF_NOT_RETURNED on return;\n+\thandle call flags.\n+\t(analyze_parms): Also analyze const functions; update conition on\n+\tflags usefulness.\n+\t(modref_write): Update streaming.\n+\t(read_section): Update streaming.\n+\t(remap_arg_flags): Use eaf_flags_t.\n+\t(modref_merge_call_site_flags): Hanlde EAF_NOT_RETURNED.\n+\t* ipa-modref.h: (eaf_flags_t): New typedef.\n+\t(struct modref_summary): Use eaf_flags_t.\n+\t* tree-core.h (EAF_NOT_RETURNED): New constant.\n+\n+2021-07-16  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-fold.c (gimple_fold_stmt_to_constant_1): Use\n+\tthe type of the LHS.\n+\t(gimple_assign_nonnegative_warnv_p): Likewise.\n+\t(gimple_call_nonnegative_warnv_p): Likewise.  Return false\n+\tif the call has no LHS.\n+\t* gimple.c (gimple_could_trap_p_1): Use the type of the LHS.\n+\t* tree-eh.c (stmt_could_throw_1_p): Likewise.\n+\t* tree-inline.c (insert_init_stmt): Likewise.\n+\t* tree-ssa-loop-niter.c (get_val_for): Likewise.\n+\t* tree-outof-ssa.c (ssa_is_replaceable_p): Use the type of\n+\tthe def.\n+\t* tree-ssa-sccvn.c (init_vn_nary_op_from_stmt): Take a\n+\tgassign *.  Use the type of the lhs.\n+\t(vn_nary_op_lookup_stmt): Adjust.\n+\t(vn_nary_op_insert_stmt): Likewise.\n+\n+2021-07-16  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* config/s390/predicates.md (bras_sym_operand): Accept all\n+\tfunctions in 64-bit mode, use UNSPEC_PLT31.\n+\t(larl_operand): Use UNSPEC_PLT31.\n+\t* config/s390/s390.c (s390_loadrelative_operand_p): Likewise.\n+\t(legitimize_pic_address): Likewise.\n+\t(s390_emit_tls_call_insn): Mark __tls_get_offset as function,\n+\tuse UNSPEC_PLT31.\n+\t(s390_delegitimize_address): Use UNSPEC_PLT31.\n+\t(s390_output_addr_const_extra): Likewise.\n+\t(print_operand): Add @PLT to TLS calls, handle %K.\n+\t(s390_function_profiler): Mark __fentry__/_mcount as function,\n+\tuse %K, use UNSPEC_PLT31.\n+\t(s390_output_mi_thunk): Use only UNSPEC_GOT, use %K.\n+\t(s390_emit_call): Use UNSPEC_PLT31.\n+\t(s390_emit_tpf_eh_return): Mark __tpf_eh_return as function.\n+\t* config/s390/s390.md (UNSPEC_PLT31): Rename from UNSPEC_PLT.\n+\t(*movdi_64): Use %K.\n+\t(reload_base_64): Likewise.\n+\t(*sibcall_brc): Likewise.\n+\t(*sibcall_brcl): Likewise.\n+\t(*sibcall_value_brc): Likewise.\n+\t(*sibcall_value_brcl): Likewise.\n+\t(*bras): Likewise.\n+\t(*brasl): Likewise.\n+\t(*bras_r): Likewise.\n+\t(*brasl_r): Likewise.\n+\t(*bras_tls): Likewise.\n+\t(*brasl_tls): Likewise.\n+\t(main_base_64): Likewise.\n+\t(reload_base_64): Likewise.\n+\t(@split_stack_call<mode>): Likewise.\n+\n+2021-07-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101467\n+\t* tree-vect-stmts.c (vect_gen_while): Properly guard\n+\tmake_temp_ssa_name usage.\n+\n+2021-07-16  Cooper Qu  <cooper.qu@linux.alibaba.com>\n+\n+\t* config.gcc: Don't use forked print-sysroot-suffix.sh and\n+\tt-sysroot-suffix for C-SKY.\n+\t* config/csky/print-sysroot-suffix.sh: Delete.\n+\t* config/csky/t-csky-linux: Delete.\n+\t* config/csky/t-sysroot-suffix: Define MULTILIB_DIRNAMES\n+\tinstead of CSKY_MULTILIB_DIRNAMES.\n+\n+2021-07-16  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-loop.c (vect_transform_cycle_phi): Correct sign\n+\tconversion issues with the partial reduction of the reused\n+\tvector accumulator.\n+\n+2021-07-16  Richard Biener  <rguenther@suse.de>\n+\n+\t* config/i386/i386-options.c (ix86_option_override_internal): Set\n+\tparam_vect_partial_vector_usage to zero if not set.\n+\n 2021-07-15  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/101346"}, {"sha": "4a190229b81761f1ecf8a6d93fa7aa04f9730de3", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87277b6a04486b606761b86dbcfbc9a4b6871f4c/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87277b6a04486b606761b86dbcfbc9a4b6871f4c/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=87277b6a04486b606761b86dbcfbc9a4b6871f4c", "patch": "@@ -1 +1 @@\n-20210716\n+20210717"}, {"sha": "7b636365aad61b3d89c9d309f6bd74166cea5596", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87277b6a04486b606761b86dbcfbc9a4b6871f4c/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87277b6a04486b606761b86dbcfbc9a4b6871f4c/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=87277b6a04486b606761b86dbcfbc9a4b6871f4c", "patch": "@@ -1,3 +1,62 @@\n+2021-07-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analyzer.h (enum access_direction): New.\n+\t* engine.cc (exploded_node::on_longjmp): Update for new param of\n+\tget_store_value.\n+\t* program-state.cc (program_state::prune_for_point): Likewise.\n+\t* region-model-impl-calls.cc (region_model::impl_call_memcpy):\n+\tReplace call to check_for_writable_region with call to\n+\tcheck_region_for_write.\n+\t(region_model::impl_call_memset): Likewise.\n+\t(region_model::impl_call_strcpy): Likewise.\n+\t* region-model-reachability.cc (reachable_regions::add): Update\n+\tfor new param of get_store_value.\n+\t* region-model.cc (region_model::get_rvalue_1): Likewise, also for\n+\tget_rvalue_for_bits.\n+\t(region_model::get_store_value): Add ctxt param and use it to call\n+\tcheck_region_for_read.\n+\t(region_model::get_rvalue_for_bits): Add ctxt param and use it to\n+\tcall get_store_value.\n+\t(region_model::check_region_access): New.\n+\t(region_model::check_region_for_write): New.\n+\t(region_model::check_region_for_read): New.\n+\t(region_model::set_value): Update comment.  Replace call to\n+\tcheck_for_writable_region with call to check_region_for_write.\n+\t* region-model.h (region_model::get_rvalue_for_bits): Add ctxt\n+\tparam.\n+\t(region_model::get_store_value): Add ctxt param.\n+\t(region_model::check_region_access): New decl.\n+\t(region_model::check_region_for_write): New decl.\n+\t(region_model::check_region_for_read): New decl.\n+\t* region.cc (region_model::copy_region): Update call to\n+\tget_store_value.\n+\t* svalue.cc (initial_svalue::implicitly_live_p): Likewise.\n+\n+2021-07-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* engine.cc (exploded_node::on_stmt_pre): Handle\n+\t__analyzer_dump_state.\n+\t* program-state.cc (extrinsic_state::get_sm_idx_by_name): New.\n+\t(program_state::impl_call_analyzer_dump_state): New.\n+\t* program-state.h (extrinsic_state::get_sm_idx_by_name): New decl.\n+\t(program_state::impl_call_analyzer_dump_state): New decl.\n+\t* region-model-impl-calls.cc\n+\t(call_details::get_arg_string_literal): New.\n+\t* region-model.h (call_details::get_arg_string_literal): New decl.\n+\n+2021-07-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* program-state.cc (program_state::detect_leaks): Simplify using\n+\tsvalue::maybe_get_region.\n+\t* region-model-impl-calls.cc (region_model::impl_call_fgets): Likewise.\n+\t(region_model::impl_call_fread): Likewise.\n+\t(region_model::impl_call_free): Likewise.\n+\t(region_model::impl_call_operator_delete): Likewise.\n+\t* region-model.cc (selftest::test_stack_frames): Likewise.\n+\t(selftest::test_state_merging): Likewise.\n+\t* svalue.cc (svalue::maybe_get_region): New.\n+\t* svalue.h (svalue::maybe_get_region): New decl.\n+\n 2021-07-15  David Malcolm  <dmalcolm@redhat.com>\n \n \t* svalue.h (is_a_helper <placeholder_svalue *>::test): Make"}, {"sha": "a0dea4c679956c3127e346c6174e57e7a4664996", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87277b6a04486b606761b86dbcfbc9a4b6871f4c/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87277b6a04486b606761b86dbcfbc9a4b6871f4c/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=87277b6a04486b606761b86dbcfbc9a4b6871f4c", "patch": "@@ -1,3 +1,9 @@\n+2021-07-16  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR c/101453\n+\t* c-common.c (parse_optimize_options): Use the correct\n+\tsize for buffer.\n+\n 2021-07-15  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/101289"}, {"sha": "0c4734fe0367b6bd1b1b51d6e1fd5b776bde26ac", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87277b6a04486b606761b86dbcfbc9a4b6871f4c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87277b6a04486b606761b86dbcfbc9a4b6871f4c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=87277b6a04486b606761b86dbcfbc9a4b6871f4c", "patch": "@@ -1,3 +1,21 @@\n+2021-07-16  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101233\n+\t* pt.c (alias_ctad_tweaks): Clear cp_unevaluated_operand for\n+\tsubstituting DECL_ARGUMENTS.\n+\n+2021-07-16  Patrick Palka  <ppalka@redhat.com>\n+\n+\tDR 960\n+\tPR c++/99664\n+\t* search.c (check_final_overrider): Compare TYPE_REF_IS_RVALUE\n+\twhen the return types are references.\n+\n+2021-07-16  Marek Polacek  <polacek@redhat.com>\n+\n+\t* typeck2.c (check_narrowing): Don't suppress the pedantic error\n+\tin system headers.\n+\n 2021-07-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/101443"}, {"sha": "b53ce62259cb72478f388fded679e69f64a9dada", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87277b6a04486b606761b86dbcfbc9a4b6871f4c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87277b6a04486b606761b86dbcfbc9a4b6871f4c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=87277b6a04486b606761b86dbcfbc9a4b6871f4c", "patch": "@@ -1,3 +1,72 @@\n+2021-07-16  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101233\n+\t* g++.dg/cpp2a/class-deduction-alias10.C: New test.\n+\n+2021-07-16  Patrick Palka  <ppalka@redhat.com>\n+\n+\tDR 960\n+\tPR c++/99664\n+\t* g++.dg/inherit/covariant23.C: New test.\n+\n+2021-07-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/analyzer-decls.h (__analyzer_dump_state): New.\n+\t* gcc.dg/analyzer/dump-state.c: New test.\n+\n+2021-07-16  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR testsuite/101468\n+\t* gcc.dg/Wstringop-overflow-41.c: Adjust to avoid target-specific\n+\tfailures.\n+\t* gcc.dg/Wstringop-overflow-42.c: Same.\n+\t* gcc.dg/Wstringop-overflow-68.c: Same.\n+\t* gcc.dg/Wstringop-overflow-70.c: Same.\n+\t* gcc.dg/Wstringop-overflow-71.c: Same.\n+\t* gcc.dg/strlenopt-95.c: Fix typos.\n+\n+2021-07-16  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR middle-end/101457\n+\t* gcc.dg/vect/vect-reduc-dot-19.c: Use long long.\n+\t* gcc.dg/vect/vect-reduc-dot-20.c: Likewise.\n+\t* gcc.dg/vect/vect-reduc-dot-21.c: Likewise.\n+\t* gcc.dg/vect/vect-reduc-dot-22.c: Likewise.\n+\n+2021-07-16  Marek Polacek  <polacek@redhat.com>\n+\n+\t* g++.dg/cpp1y/Wnarrowing2.C: New test.\n+\t* g++.dg/cpp1y/Wnarrowing2.h: New test.\n+\n+2021-07-16  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* g++.dg/ext/visibility/noPLT.C: Skip on s390x.\n+\t* g++.target/s390/mi-thunk.C: New test.\n+\t* gcc.target/s390/nodatarel-1.c: Move foostatic to the new\n+\ttests.\n+\t* gcc.target/s390/pr80080-4.c: Allow @PLT suffix.\n+\t* gcc.target/s390/risbg-ll-3.c: Likewise.\n+\t* gcc.target/s390/call.h: Common code for the new tests.\n+\t* gcc.target/s390/call-z10-pic-nodatarel.c: New test.\n+\t* gcc.target/s390/call-z10-pic.c: New test.\n+\t* gcc.target/s390/call-z10.c: New test.\n+\t* gcc.target/s390/call-z9-pic-nodatarel.c: New test.\n+\t* gcc.target/s390/call-z9-pic.c: New test.\n+\t* gcc.target/s390/call-z9.c: New test.\n+\t* gcc.target/s390/mfentry-m64-pic.c: New test.\n+\t* gcc.target/s390/tls.h: Common code for the new TLS tests.\n+\t* gcc.target/s390/tls-pic.c: New test.\n+\t* gcc.target/s390/tls.c: New test.\n+\n+2021-07-16  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/sve/extract_1.c: Split expected results\n+\tby big/little endian targets, restoring the old expected\n+\tresult for big endian.\n+\t* gcc.target/aarch64/sve/extract_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/extract_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/extract_4.c: Likewise.\n+\n 2021-07-15  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/101346"}, {"sha": "e6eaa16bca890635c8cf1193e9e79dac849ab2fb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87277b6a04486b606761b86dbcfbc9a4b6871f4c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87277b6a04486b606761b86dbcfbc9a4b6871f4c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=87277b6a04486b606761b86dbcfbc9a4b6871f4c", "patch": "@@ -1,3 +1,88 @@\n+2021-07-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/tuple (get<I>): Add deleted overload for bad\n+\tindex.\n+\t* testsuite/20_util/tuple/element_access/get_neg.cc: Adjust\n+\texpected errors.\n+\n+2021-07-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/max_size_type.h (numeric_limits<__max_size_type>):\n+\tUse __int_traits unconditionally.\n+\n+2021-07-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/random.h (_Shift::__value): Use constexpr.\n+\t(_Select_uint_least_t::type): Use using-declaration.\n+\t(_Mod): Likewise.\n+\t* testsuite/26_numerics/random/pr60037-neg.cc: Adjust dg-error\n+\tline number.\n+\n+2021-07-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/cpp_type_traits.h (__INT_N): Use __extension__\n+\tinstead of diagnostic pragmas.\n+\t* include/bits/functional_hash.h: Likewise.\n+\t* include/bits/iterator_concepts.h (__is_signed_int128)\n+\t(__is_unsigned_int128): Likewise.\n+\t* include/bits/max_size_type.h (__max_size_type): Likewise.\n+\t(numeric_limits<__max_size_type>): Likewise.\n+\t* include/bits/std_abs.h (abs): Likewise.\n+\t* include/bits/stl_algobase.h (__size_to_integer): Likewise.\n+\t* include/bits/uniform_int_dist.h (uniform_int_distribution):\n+\tLikewise.\n+\t* include/ext/numeric_traits.h (_GLIBCXX_INT_N_TRAITS):\n+\tLikewise.\n+\t* include/std/type_traits (__is_integral_helper<INT_N>)\n+\t(__is_signed_integer, __is_unsigned_integer)\n+\t(__make_unsigned<INT_N>, __make_signed<INT_N>): Likewise.\n+\t* include/std/limits (__INT_N): Add __extension__ keyword.\n+\t* include/bits/random.h (_Select_uint_least_t)\n+\t(random_device): Likewise.\n+\n+2021-07-16  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/101231\n+\t* include/std/ranges (_CachedPosition::_M_get): For non-forward\n+\tranges, just call __builtin_unreachable.\n+\t* testsuite/std/ranges/istream_view.cc (test05): New test.\n+\n+2021-07-16  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/101214\n+\t* include/std/ranges (split_view::split_view): Use std::move.\n+\t(split_view::_Iterator::_Iterator): Remove redundant\n+\tdefault_initializable constraint.\n+\t(split_view::_Sentinel::_Sentinel): Declare.\n+\t* testsuite/std/ranges/adaptors/split.cc (test02): New test.\n+\n+2021-07-16  Marek Polacek  <polacek@redhat.com>\n+\n+\t* testsuite/20_util/ratio/operations/ops_overflow_neg.cc: Add\n+\tdg-error.\n+\n+2021-07-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/unique_ptr.h: Adjust doxygen markup.\n+\n+2021-07-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/101307\n+\t* include/std/type_traits: Adjust doxygen markup.\n+\n+2021-07-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/cpp_type_traits.h: Add diagnostic pragmas around\n+\tuses of non-standard integer types.\n+\t* include/bits/functional_hash.h: Likewise.\n+\t* include/bits/iterator_concepts.h: Likewise.\n+\t* include/bits/max_size_type.h: Likewise.\n+\t* include/bits/std_abs.h: Likewise.\n+\t* include/bits/stl_algobase.h: Likewise.\n+\t* include/bits/uniform_int_dist.h: Likewise.\n+\t* include/ext/numeric_traits.h: Likewise.\n+\t* include/std/type_traits: Likewise.\n+\n 2021-07-15  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/101427"}]}