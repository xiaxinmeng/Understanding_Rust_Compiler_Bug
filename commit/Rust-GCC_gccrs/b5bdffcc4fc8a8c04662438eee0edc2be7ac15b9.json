{"sha": "b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjViZGZmY2M0ZmM4YThjMDQ2NjI0MzhlZWUwZWRjMmJlN2FjMTViOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-24T14:33:20Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-24T14:33:20Z"}, "message": "[multiple changes]\n\n2013-04-24  Vincent Celier  <celier@adacore.com>\n\n\t* gnat_ugn.texi: Document new gnatls switch -aPdir.\n\t* gnatcmd.adb: Pass switch -aP<dir> to gnatls.\n\t* gnatls.adb (Scan_Ls_Arg): Process new switch -aP<dir>. Issue\n\ta warning for unknown switches.\n\t(Usage): Add line for new switch -aPdir.\n\n2013-04-24  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util.adb, sem_util.ads (Is_Limited_Class_Wide_Type): Return true\n\tif the type comes from a limited view, so that task attributes can be\n\tconstructed.\n\n2013-04-24  Yannick Moy  <moy@adacore.com>\n\n\t* checks.adb (Apply_Float_Conversion_Check): Do not apply checks if\n\tfull expansion is not enabled.\n\n2013-04-24  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Create_Extra_Formals): In Ada 2012, create extra\n\tformals if the type does not yet have a completion, and thus\n\thas no underlying view.\n\n2013-04-24  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): Treat an aspect\n\tspecification for Address as a reference, to suppress warnings\n\ton entities that may be read by an external device.\n\nFrom-SVN: r198237", "tree": {"sha": "740bfbd90d0a1688d1e8914c3a7c6db05bd6e5ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/740bfbd90d0a1688d1e8914c3a7c6db05bd6e5ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9/comments", "author": null, "committer": null, "parents": [{"sha": "327b1ba4bd731c191f167d74ec3766939ab923de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/327b1ba4bd731c191f167d74ec3766939ab923de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/327b1ba4bd731c191f167d74ec3766939ab923de"}], "stats": {"total": 124, "additions": 111, "deletions": 13}, "files": [{"sha": "4c7bc4af6540c60cb75a7d714afaef90eacd818e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9", "patch": "@@ -1,3 +1,34 @@\n+2013-04-24  Vincent Celier  <celier@adacore.com>\n+\n+\t* gnat_ugn.texi: Document new gnatls switch -aPdir.\n+\t* gnatcmd.adb: Pass switch -aP<dir> to gnatls.\n+\t* gnatls.adb (Scan_Ls_Arg): Process new switch -aP<dir>. Issue\n+\ta warning for unknown switches.\n+\t(Usage): Add line for new switch -aPdir.\n+\n+2013-04-24  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.adb, sem_util.ads (Is_Limited_Class_Wide_Type): Return true\n+\tif the type comes from a limited view, so that task attributes can be\n+\tconstructed.\n+\n+2013-04-24  Yannick Moy  <moy@adacore.com>\n+\n+\t* checks.adb (Apply_Float_Conversion_Check): Do not apply checks if\n+\tfull expansion is not enabled.\n+\n+2013-04-24  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Create_Extra_Formals): In Ada 2012, create extra\n+\tformals if the type does not yet have a completion, and thus\n+\thas no underlying view.\n+\n+2013-04-24  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Treat an aspect\n+\tspecification for Address as a reference, to suppress warnings\n+\ton entities that may be read by an external device.\n+\n 2013-04-24  Sergey Rybin  <rybin@adacore.com frybin>\n \n \t* gnat_ugn.texi: Add description of '--help' and '--version'"}, {"sha": "8302b9701afcdd6c45c9e7a06e468c0bb43c904e", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9", "patch": "@@ -1907,6 +1907,15 @@ package body Checks is\n       Reason : RT_Exception_Code;\n \n    begin\n+      --  We do not need checks if we are not generating code (i.e. the full\n+      --  expander is not active). In SPARK mode, we specifically don't want\n+      --  the frontend to expand these checks, which are dealt with directly\n+      --  in the formal verification backend.\n+\n+      if not Full_Expander_Active then\n+         return;\n+      end if;\n+\n       if not Compile_Time_Known_Value (LB)\n           or not Compile_Time_Known_Value (HB)\n       then"}, {"sha": "898799e378870173dba7b30e371ed76a0c7bb2da", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9", "patch": "@@ -16393,6 +16393,10 @@ Several such switches may be specified simultaneously.\n Source path manipulation. Same meaning as the equivalent @command{gnatmake}\n flags (@pxref{Switches for gnatmake}).\n \n+@item ^-aP^/ADD_PROJECT_SEARCH_DIR=^@var{dir}\n+@cindex @option{^-aP^/ADD_PROJECT_SEARCH_DIR=^} (@code{gnatls})\n+Add @var{dir} at the beginning of the project search dir.\n+\n @item --RTS=@var{rts-path}\n @cindex @option{--RTS} (@code{gnatls})\n Specifies the default location of the runtime library. Same meaning as the"}, {"sha": "6ffa07fd9ba42d33d0e677e42895aae078dc7c94", "filename": "gcc/ada/gnatcmd.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9/gcc%2Fada%2Fgnatcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9/gcc%2Fada%2Fgnatcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatcmd.adb?ref=b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9", "patch": "@@ -1766,7 +1766,16 @@ begin\n                        (Root_Environment.Project_Path,\n                         Argv (Argv'First + 3 .. Argv'Last));\n \n-                     Remove_Switch (Arg_Num);\n+                     --  Pass -aPdir to gnatls\n+\n+                     if The_Command = List then\n+                        Arg_Num := Arg_Num + 1;\n+\n+                     --  but not to other tools\n+\n+                     else\n+                        Remove_Switch (Arg_Num);\n+                     end if;\n \n                   --  -eL  Follow links for files\n "}, {"sha": "cf0e3c32c27d097971480cb12208b262b4d177cd", "filename": "gcc/ada/gnatls.adb", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9/gcc%2Fada%2Fgnatls.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9/gcc%2Fada%2Fgnatls.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatls.adb?ref=b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1253,13 +1253,16 @@ procedure Gnatls is\n       FD  : File_Descriptor;\n       Len : Integer;\n \n+      OK : Boolean;\n+\n    begin\n       pragma Assert (Argv'First = 1);\n \n       if Argv'Length = 0 then\n          return;\n       end if;\n \n+      OK := True;\n       if Argv (1) = '-' then\n          if Argv'Length = 1 then\n             Fail (\"switch character cannot be followed by a blank\");\n@@ -1297,6 +1300,11 @@ procedure Gnatls is\n          elsif Argv'Length >= 3 and then Argv (2 .. 3) = \"aL\" then\n             Add_Lib_Dir (Argv (4 .. Argv'Last));\n \n+         --  Processing for -aP<dir>\n+\n+         elsif Argv'Length > 3 and then Argv (1 .. 3) = \"-aP\" then\n+            Add_Directories (Prj_Path, Argv (4 .. Argv'Last));\n+\n          --  Processing for -nostdinc\n \n          elsif Argv (2 .. Argv'Last) = \"nostdinc\" then\n@@ -1316,7 +1324,7 @@ procedure Gnatls is\n                when 'l' => License                   := True;\n                when 'V' => Very_Verbose_Mode         := True;\n \n-               when others => null;\n+               when others => OK := False;\n             end case;\n \n          --  Processing for -files=file\n@@ -1396,13 +1404,23 @@ procedure Gnatls is\n                Opt.No_Stdinc := True;\n                Opt.RTS_Switch := True;\n             end if;\n+\n+         else\n+            OK := False;\n          end if;\n \n       --  If not a switch, it must be a file name\n \n       else\n          Add_File (Argv);\n       end if;\n+\n+      if not OK then\n+         Write_Str (\"warning: unknown switch \"\"\");\n+         Write_Str (Argv);\n+         Write_Line (\"\"\"\");\n+      end if;\n+\n    end Scan_Ls_Arg;\n \n    -----------\n@@ -1484,6 +1502,11 @@ procedure Gnatls is\n       Write_Str (\"  -aOdir     specify object files search path\");\n       Write_Eol;\n \n+      --  Line for -aP switch\n+\n+      Write_Str (\"  -aPdir     specify project search path\");\n+      Write_Eol;\n+\n       --  Line for -I switch\n \n       Write_Str (\"  -Idir      like -aIdir -aOdir\");"}, {"sha": "4ab65705255cc9f0d721a1873e6cf99f8d7cd4f2", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9", "patch": "@@ -1335,6 +1335,16 @@ package body Sem_Ch13 is\n                       Chars      => Chars (Id),\n                       Expression => Relocate_Node (Expr));\n \n+                  --  If the address is specified we treat the entity as\n+                  --  referenced, to avoid spurious warnings. This is analogous\n+                  --  to what is done with an attribute definition clause, but\n+                  --  here we don't want to generate a reference because this\n+                  --  is the point of definition of the entity.\n+\n+                  if A_Id = Aspect_Address then\n+                     Set_Referenced (E);\n+                  end if;\n+\n                --  Case 2: Aspects corresponding to pragmas\n \n                --  Case 2a: Aspects corresponding to pragmas with two"}, {"sha": "91cf3efa423cc3a9443b25dab7e85fc3373aae7c", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9", "patch": "@@ -7917,13 +7917,19 @@ package body Sem_Ch6 is\n             --  on discriminants and others do not (and requiring the extra\n             --  formal would introduce distributed overhead).\n \n+            --  If the type does not have a completion yet, treat as prior to\n+            --  Ada 2012 for consistency.\n+\n             if Has_Discriminants (Formal_Type)\n               and then not Is_Constrained (Formal_Type)\n               and then not Is_Indefinite_Subtype (Formal_Type)\n               and then (Ada_Version < Ada_2012\n-                         or else\n-                           not (Is_Tagged_Type (Underlying_Type (Formal_Type))\n-                                 and then Is_Limited_Type (Formal_Type)))\n+                         or else No (Underlying_Type (Formal_Type))\n+                         or else not\n+                           (Is_Limited_Type (Formal_Type)\n+                             and then\n+                               (Is_Tagged_Type\n+                                  (Underlying_Type (Formal_Type)))))\n             then\n                Set_Extra_Constrained\n                  (Formal, Add_Extra_Formal (Formal, Standard_Boolean, E, \"O\"));\n@@ -11198,7 +11204,9 @@ package body Sem_Ch6 is\n \n       function Contains_Enabled_Pragmas (L : List_Id) return Boolean;\n       --  Determine whether list L has at least one enabled pragma. The routine\n-      --  ignores nother non-pragma elements.\n+      --  ignores other non-pragma elements.\n+      --  This is NOT what the routine does??? It returns False if there is\n+      --  one ignored pragma ???\n \n       procedure Expand_Contract_Cases (CCs : Node_Id; Subp_Id : Entity_Id);\n       --  Given pragma Contract_Cases CCs, create the circuitry needed to\n@@ -11271,6 +11279,8 @@ package body Sem_Ch6 is\n       -- Contains_Enabled_Pragmas --\n       ------------------------------\n \n+      --  This routine does not implement its documented spec ???\n+\n       function Contains_Enabled_Pragmas (L : List_Id) return Boolean is\n          Prag : Node_Id;\n \n@@ -12277,10 +12287,9 @@ package body Sem_Ch6 is\n       --  subprogram has invariants, then build the _Postconditions procedure.\n \n       if Expander_Active\n-        and then\n-          (Invariants_Or_Predicates_Present\n-             or else\n-               (Present (Plist) and then Contains_Enabled_Pragmas (Plist)))\n+        and then (Invariants_Or_Predicates_Present\n+                   or else (Present (Plist)\n+                             and then Contains_Enabled_Pragmas (Plist)))\n       then\n          if No (Plist) then\n             Plist := Empty_List;"}, {"sha": "095510e1eb0cdede2f1c23e0a6526fd8593c2c01", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9", "patch": "@@ -8643,7 +8643,7 @@ package body Sem_Util is\n    begin\n       return\n         Is_Class_Wide_Type (Typ)\n-          and then Is_Limited_Type (Typ);\n+          and then (Is_Limited_Type (Typ) or else From_With_Type (Typ));\n    end Is_Limited_Class_Wide_Type;\n \n    ---------------------------------"}, {"sha": "fa5b6e392b0eb44bc3646f15235dca64d795e3be", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=b5bdffcc4fc8a8c04662438eee0edc2be7ac15b9", "patch": "@@ -949,7 +949,10 @@ package Sem_Util is\n    --  i.e. a library unit or an entity declared in a library package.\n \n    function Is_Limited_Class_Wide_Type (Typ : Entity_Id) return Boolean;\n-   --  Determine whether a given arbitrary type is a limited class-wide type\n+   --  Determine whether a given type is a limited class-wide type, in which\n+   --  case it needs a Master_Id, because extensions of its designated type\n+   --  may include task components. A class-wide type that comes from a\n+   --  limited view must be treated in the same way.\n \n    function Is_Local_Variable_Reference (Expr : Node_Id) return Boolean;\n    --  Determines whether Expr is a reference to a variable or IN OUT mode"}]}