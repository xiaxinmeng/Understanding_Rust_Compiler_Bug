{"sha": "dbb743654f3b7d96ba40b9683feed4cb20e4435d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJiNzQzNjU0ZjNiN2Q5NmJhNDBiOTY4M2ZlZWQ0Y2IyMGU0NDM1ZA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2005-04-21T21:31:40Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2005-04-21T21:31:40Z"}, "message": "c-common.h (objc_build_method_signature): Update prototype.\n\n\n\t* c-common.h (objc_build_method_signature): Update prototype.\n\t* stub-objc.c (objc_build_method_signature): Update the stub\n\timplementation to accept and ignore additional parameter.\n\t* c-parser.c (c_parser_objc_method_decl): Reorgnize to pass\n\tthe value of ellipsis to objc_build_method_signature instead\n\tof setting TREE_OVERFLOW on the parms TREE_LIST node.\n\n\t* objc-act.h (METHOD_ADD_ARGS_ELLIPSIS_P): New macro for accessing\n\tthis field of an objc method decl.\n\t* objc-act.c (build_method_decl): Take an additional \"ellipsis\"\n\targument, and set METHOD_ADD_ARGS_ELLIPSIS_P as appropriate.\n\t(objc_build_method_signature): Accept additional \"ellipsis\"\n\targument and pass it to build_method_decl.\n\t(get_arg_type_list, start_method_def, gen_method_decl): Use\n\tthe new METHOD_ADD_ARGS_ELLIPSIS_P instead of examining the\n\tTREE_OVERFLOW field of a TREE_LIST node.\n\nFrom-SVN: r98528", "tree": {"sha": "d315e995a7b40e667b44d79bab6a3168904d425a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d315e995a7b40e667b44d79bab6a3168904d425a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbb743654f3b7d96ba40b9683feed4cb20e4435d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbb743654f3b7d96ba40b9683feed4cb20e4435d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbb743654f3b7d96ba40b9683feed4cb20e4435d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbb743654f3b7d96ba40b9683feed4cb20e4435d/comments", "author": null, "committer": null, "parents": [{"sha": "915167f5a5a8f8f5a4107b7fa7df7fe5aae66365", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/915167f5a5a8f8f5a4107b7fa7df7fe5aae66365", "html_url": "https://github.com/Rust-GCC/gccrs/commit/915167f5a5a8f8f5a4107b7fa7df7fe5aae66365"}], "stats": {"total": 51, "additions": 38, "deletions": 13}, "files": [{"sha": "c7701aca35482122ffac61a1e4b1673561957e7b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb743654f3b7d96ba40b9683feed4cb20e4435d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb743654f3b7d96ba40b9683feed4cb20e4435d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dbb743654f3b7d96ba40b9683feed4cb20e4435d", "patch": "@@ -1,3 +1,12 @@\n+2005-04-21  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* c-common.h (objc_build_method_signature): Update prototype.\n+\t* stub-objc.c (objc_build_method_signature): Update the stub\n+\timplementation to accept and ignore additional parameter.\n+\t* c-parser.c (c_parser_objc_method_decl): Reorgnize to pass\n+\tthe value of ellipsis to objc_build_method_signature instead\n+\tof setting TREE_OVERFLOW on the parms TREE_LIST node.\n+\n 2005-04-21  Geoffrey Keating  <geoffk@apple.com>\n \n \t* config/rs6000/rs6000-protos.h (rs6000_emit_sync): New."}, {"sha": "5c8fc18022af894c307aadf854fd10024e42e7df", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb743654f3b7d96ba40b9683feed4cb20e4435d/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb743654f3b7d96ba40b9683feed4cb20e4435d/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=dbb743654f3b7d96ba40b9683feed4cb20e4435d", "patch": "@@ -912,7 +912,7 @@ extern void objc_continue_implementation (void);\n extern void objc_finish_implementation (void);\n extern void objc_set_visibility (int);\n extern void objc_set_method_type (enum tree_code);\n-extern tree objc_build_method_signature (tree, tree, tree);\n+extern tree objc_build_method_signature (tree, tree, tree, bool);\n extern void objc_add_method_declaration (tree);\n extern void objc_start_method_definition (tree);\n extern void objc_finish_method_definition (tree);"}, {"sha": "0a336c624d42629c370db3a2b43f3987b42a0a67", "filename": "gcc/c-parser.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb743654f3b7d96ba40b9683feed4cb20e4435d/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb743654f3b7d96ba40b9683feed4cb20e4435d/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=dbb743654f3b7d96ba40b9683feed4cb20e4435d", "patch": "@@ -5790,6 +5790,8 @@ c_parser_objc_method_decl (c_parser *parser)\n   tree type = NULL_TREE;\n   tree sel;\n   tree parms = NULL_TREE;\n+  bool ellipsis = false;\n+\n   if (c_parser_next_token_is (parser, CPP_OPEN_PAREN))\n     {\n       c_parser_consume_token (parser);\n@@ -5804,7 +5806,6 @@ c_parser_objc_method_decl (c_parser *parser)\n     {\n       tree tsel = sel;\n       tree list = NULL_TREE;\n-      bool ellipsis;\n       while (true)\n \t{\n \t  tree atype = NULL_TREE, id, keyworddecl;\n@@ -5834,7 +5835,6 @@ c_parser_objc_method_decl (c_parser *parser)\n \t method parameters follow the C syntax, and may include '...'\n \t to denote a variable number of arguments.  */\n       parms = make_node (TREE_LIST);\n-      ellipsis = false;\n       while (c_parser_next_token_is (parser, CPP_COMMA))\n \t{\n \t  struct c_parm *parm;\n@@ -5851,10 +5851,9 @@ c_parser_objc_method_decl (c_parser *parser)\n \t  parms = chainon (parms,\n \t\t\t   build_tree_list (NULL_TREE, grokparm (parm)));\n \t}\n-      TREE_OVERFLOW (parms) = ellipsis;\n       sel = list;\n     }\n-  return objc_build_method_signature (type, sel, parms);\n+  return objc_build_method_signature (type, sel, parms, ellipsis);\n }\n \n /* Parse an objc-type-name."}, {"sha": "b6583b4e7cbc373c3489c14649cf4c6050e0822d", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb743654f3b7d96ba40b9683feed4cb20e4435d/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb743654f3b7d96ba40b9683feed4cb20e4435d/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=dbb743654f3b7d96ba40b9683feed4cb20e4435d", "patch": "@@ -1,3 +1,15 @@\n+2005-04-21  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* objc-act.h (METHOD_ADD_ARGS_ELLIPSIS_P): New macro for accessing\n+\tthis field of an objc method decl.\n+\t* objc-act.c (build_method_decl): Take an additional \"ellipsis\"\n+\targument, and set METHOD_ADD_ARGS_ELLIPSIS_P as appropriate.\n+\t(objc_build_method_signature): Accept additional \"ellipsis\"\n+\targument and pass it to build_method_decl.\n+\t(get_arg_type_list, start_method_def, gen_method_decl): Use\n+\tthe new METHOD_ADD_ARGS_ELLIPSIS_P instead of examining the\n+\tTREE_OVERFLOW field of a TREE_LIST node.\n+\n 2005-04-20  Joseph S. Myers  <joseph@codesourcery.com>\n \n \tPR c/12913"}, {"sha": "017c2cd73004f3188cdbef559c94da1b510c82cb", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb743654f3b7d96ba40b9683feed4cb20e4435d/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb743654f3b7d96ba40b9683feed4cb20e4435d/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=dbb743654f3b7d96ba40b9683feed4cb20e4435d", "patch": "@@ -164,7 +164,7 @@ static void objc_start_function (tree, tree, tree, tree);\n static void objc_start_function (tree, tree, tree, struct c_arg_info *);\n #endif\n static tree start_protocol (enum tree_code, tree, tree);\n-static tree build_method_decl (enum tree_code, tree, tree, tree);\n+static tree build_method_decl (enum tree_code, tree, tree, tree, bool);\n static tree objc_add_method (tree, tree, int);\n static tree add_instance_variable (tree, int, tree);\n static tree build_ivar_reference (tree);\n@@ -771,9 +771,11 @@ objc_set_method_type (enum tree_code type)\n }\n \n tree\n-objc_build_method_signature (tree rettype, tree selector, tree optparms)\n+objc_build_method_signature (tree rettype, tree selector,\n+\t\t\t     tree optparms, bool ellipsis)\n {\n-  return build_method_decl (objc_inherit_code, rettype, selector, optparms);\n+  return build_method_decl (objc_inherit_code, rettype, selector,\n+\t\t\t    optparms, ellipsis);\n }\n \n void\n@@ -5263,7 +5265,7 @@ build_keyword_selector (tree selector)\n \n static tree\n build_method_decl (enum tree_code code, tree ret_type, tree selector,\n-\t\t   tree add_args)\n+\t\t   tree add_args, bool ellipsis)\n {\n   tree method_decl;\n \n@@ -5280,6 +5282,7 @@ build_method_decl (enum tree_code code, tree ret_type, tree selector,\n       METHOD_SEL_NAME (method_decl) = build_keyword_selector (selector);\n       METHOD_SEL_ARGS (method_decl) = selector;\n       METHOD_ADD_ARGS (method_decl) = add_args;\n+      METHOD_ADD_ARGS_ELLIPSIS_P (method_decl) = ellipsis;\n     }\n   else\n     {\n@@ -5347,7 +5350,7 @@ get_arg_type_list (tree meth, int context, int superflag)\n \t  chainon (arglist, build_tree_list (NULL_TREE, arg_type));\n \t}\n \n-      if (!TREE_OVERFLOW (METHOD_ADD_ARGS (meth)))\n+      if (!METHOD_ADD_ARGS_ELLIPSIS_P (meth))\n \tgoto lack_of_ellipsis;\n     }\n   else\n@@ -7536,7 +7539,7 @@ start_method_def (tree method)\n \t  objc_push_parm (TREE_VALUE (akey));\n \t}\n \n-      if (TREE_OVERFLOW (METHOD_ADD_ARGS (method)))\n+      if (METHOD_ADD_ARGS_ELLIPSIS_P (method))\n \thave_ellipsis = 1;\n     }\n \n@@ -8116,7 +8119,7 @@ gen_method_decl (tree method)\n \t      chain = TREE_CHAIN (chain);\n \t    }\n \n-\t  if (TREE_OVERFLOW (METHOD_ADD_ARGS (method)))\n+\t  if (METHOD_ADD_ARGS_ELLIPSIS_P (method))\n \t    strcat (errbuf, \", ...\");\n \t}\n     }"}, {"sha": "fe84260e4b50b70c27ce11cbeaa70152ac2280c0", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb743654f3b7d96ba40b9683feed4cb20e4435d/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb743654f3b7d96ba40b9683feed4cb20e4435d/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=dbb743654f3b7d96ba40b9683feed4cb20e4435d", "patch": "@@ -52,6 +52,7 @@ enum gimplify_status objc_gimplify_expr (tree *, tree *, tree *);\n #define METHOD_SEL_NAME(DECL) ((DECL)->decl.name)\n #define METHOD_SEL_ARGS(DECL) ((DECL)->decl.arguments)\n #define METHOD_ADD_ARGS(DECL) ((DECL)->decl.result)\n+#define METHOD_ADD_ARGS_ELLIPSIS_P(DECL) ((DECL)->decl.lang_flag_0)\n #define METHOD_DEFINITION(DECL) ((DECL)->decl.initial)\n #define METHOD_ENCODING(DECL) ((DECL)->decl.context)\n "}, {"sha": "481183fd9423c1ac7c70b39ab8a4e9291123e1d3", "filename": "gcc/stub-objc.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb743654f3b7d96ba40b9683feed4cb20e4435d/gcc%2Fstub-objc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb743654f3b7d96ba40b9683feed4cb20e4435d/gcc%2Fstub-objc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstub-objc.c?ref=dbb743654f3b7d96ba40b9683feed4cb20e4435d", "patch": "@@ -189,7 +189,8 @@ objc_build_keyword_decl (tree ARG_UNUSED (selector),\n tree\n objc_build_method_signature (tree ARG_UNUSED (rettype),\n \t\t\t     tree ARG_UNUSED (selectors),\n-\t\t\t     tree ARG_UNUSED (optparms))\n+\t\t\t     tree ARG_UNUSED (optparms),\n+\t\t\t     bool ARG_UNUSED (ellipsis))\n {\n   return 0;\n }"}]}