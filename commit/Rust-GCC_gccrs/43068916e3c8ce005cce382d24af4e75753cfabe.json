{"sha": "43068916e3c8ce005cce382d24af4e75753cfabe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMwNjg5MTZlM2M4Y2UwMDVjY2UzODJkMjRhZjRlNzU3NTNjZmFiZQ==", "commit": {"author": {"name": "Fritz Reese", "email": "fritzoreese@gmail.com", "date": "2016-07-17T20:13:41Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2016-07-17T20:13:41Z"}, "message": "re PR fortran/71523 (Static variables given automatic initializers with -finit-* and -fmax-stack-var-size)\n\n2016-07-17  Fritz Reese  <fritzoreese@gmail.com>\n\n\tPR fortran/71523\n\t* trans-decl.c (gfc_finish_var_decl): Replace automatic initializer with\n\ta static one.\n\n\t* gfortran.dg/pr71523_1.f90: New test.\n\t* gfortran.dg/pr71523_2.f90: New test.\n\nFrom-SVN: r238420", "tree": {"sha": "19a50866091bdb30b6a2a08e83748752362c9c93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19a50866091bdb30b6a2a08e83748752362c9c93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43068916e3c8ce005cce382d24af4e75753cfabe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43068916e3c8ce005cce382d24af4e75753cfabe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43068916e3c8ce005cce382d24af4e75753cfabe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43068916e3c8ce005cce382d24af4e75753cfabe/comments", "author": {"login": "fritzr", "id": 2230564, "node_id": "MDQ6VXNlcjIyMzA1NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2230564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzr", "html_url": "https://github.com/fritzr", "followers_url": "https://api.github.com/users/fritzr/followers", "following_url": "https://api.github.com/users/fritzr/following{/other_user}", "gists_url": "https://api.github.com/users/fritzr/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzr/subscriptions", "organizations_url": "https://api.github.com/users/fritzr/orgs", "repos_url": "https://api.github.com/users/fritzr/repos", "events_url": "https://api.github.com/users/fritzr/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "48b3613757c8959fc49165fdc9531b504fb8e30f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48b3613757c8959fc49165fdc9531b504fb8e30f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48b3613757c8959fc49165fdc9531b504fb8e30f"}], "stats": {"total": 112, "additions": 110, "deletions": 2}, "files": [{"sha": "04335d927266e8cd41e6f663bb67fdb5aa68b788", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43068916e3c8ce005cce382d24af4e75753cfabe/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43068916e3c8ce005cce382d24af4e75753cfabe/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=43068916e3c8ce005cce382d24af4e75753cfabe", "patch": "@@ -1,3 +1,9 @@\n+2016-07-17  Fritz Reese  <fritzoreese@gmail.com>\n+\n+\tPR fortran/71523\n+\t* trans-decl.c (gfc_finish_var_decl): Replace automatic initializer with\n+\ta static one.\n+\n 2016-07-15  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \t    Marco Restelli <mrestelli@gmail.com>\n "}, {"sha": "6c9bf50a69aa7b4993f0238df8583c72106fd713", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43068916e3c8ce005cce382d24af4e75753cfabe/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43068916e3c8ce005cce382d24af4e75753cfabe/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=43068916e3c8ce005cce382d24af4e75753cfabe", "patch": "@@ -657,7 +657,43 @@ gfc_finish_var_decl (tree decl, gfc_symbol * sym)\n \t  || sym->attr.pointer\n \t  || sym->attr.allocatable)\n       && !DECL_ARTIFICIAL (decl))\n-    TREE_STATIC (decl) = 1;\n+    {\n+      TREE_STATIC (decl) = 1;\n+\n+      /* Because the size of this variable isn't known until now, we may have\n+         greedily added an initializer to this variable (in build_init_assign)\n+         even though the max-stack-var-size indicates the variable should be\n+         static. Therefore we rip out the automatic initializer here and\n+         replace it with a static one.  */\n+      gfc_symtree *st = gfc_find_symtree (sym->ns->sym_root, sym->name);\n+      gfc_code *prev = NULL;\n+      gfc_code *code = sym->ns->code;\n+      while (code && code->op == EXEC_INIT_ASSIGN)\n+        {\n+          /* Look for an initializer meant for this symbol.  */\n+          if (code->expr1->symtree == st)\n+            {\n+              if (prev)\n+                prev->next = code->next;\n+              else\n+                sym->ns->code = code->next;\n+\n+              break;\n+            }\n+\n+          prev = code;\n+          code = code->next;\n+        }\n+      if (code && code->op == EXEC_INIT_ASSIGN)\n+        {\n+          /* Keep the init expression for a static initializer.  */\n+          sym->value = code->expr2;\n+          /* Cleanup the defunct code object, without freeing the init expr.  */\n+          code->expr2 = NULL;\n+          gfc_free_statement (code);\n+          free (code);\n+        }\n+    }\n \n   /* Handle threadprivate variables.  */\n   if (sym->attr.threadprivate\n@@ -1693,7 +1729,7 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n   if (TREE_STATIC (decl)\n       && !(sym->attr.use_assoc && !intrinsic_array_parameter)\n       && (sym->attr.save || sym->ns->proc_name->attr.is_main_program\n-\t  || flag_max_stack_var_size == 0\n+\t  || !gfc_can_put_var_on_stack (DECL_SIZE_UNIT (decl))\n \t  || sym->attr.data || sym->ns->proc_name->attr.flavor == FL_MODULE)\n       && (flag_coarray != GFC_FCOARRAY_LIB\n \t  || !sym->attr.codimension || sym->attr.allocatable))"}, {"sha": "9568baa7e74ad4db03979041aec051bf3eeab472", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43068916e3c8ce005cce382d24af4e75753cfabe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43068916e3c8ce005cce382d24af4e75753cfabe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=43068916e3c8ce005cce382d24af4e75753cfabe", "patch": "@@ -1,3 +1,9 @@\n+2016-07-17  Fritz Reese  <fritzoreese@gmail.com>\n+\n+\tPR fortran/71523\n+\t* gfortran.dg/pr71523_1.f90: New test.\n+\t* gfortran.dg/pr71523_2.f90: New test.\n+\n 2016-07-16  Andreas Schwab  <schwab@linux-m68k.org>\n \n \t* g++.dg/cpp0x/nullptr35.C (caught): Fix typo."}, {"sha": "7b5b2abc88b0c7511db924cb6a276c52d57f9aaf", "filename": "gcc/testsuite/gfortran.dg/pr71523_1.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43068916e3c8ce005cce382d24af4e75753cfabe/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr71523_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43068916e3c8ce005cce382d24af4e75753cfabe/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr71523_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr71523_1.f90?ref=43068916e3c8ce005cce382d24af4e75753cfabe", "patch": "@@ -0,0 +1,22 @@\n+! PR Fortran/71523\n+!\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original -finit-local-zero -fautomatic -fmax-stack-var-size=8\" }\n+!\n+! Make sure that variables larger than max-stack-var-size which become\n+! static are not given automatic initializers on function entry.\n+!\n+\n+function set(idx, val)\n+  implicit none\n+  integer, intent(in) :: idx, val\n+  integer set\n+  integer arr(100)\n+\n+  set = arr(idx)\n+  arr(idx) = val\n+  return\n+end function\n+\n+! There should be no automatic initializer for arr\n+! { dg-final { scan-tree-dump-times \"arr = \" 0 \"original\" } }"}, {"sha": "5be0dd798818fc7c40e4f5843e3ad1cf20059286", "filename": "gcc/testsuite/gfortran.dg/pr71523_2.f90", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43068916e3c8ce005cce382d24af4e75753cfabe/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr71523_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43068916e3c8ce005cce382d24af4e75753cfabe/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr71523_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr71523_2.f90?ref=43068916e3c8ce005cce382d24af4e75753cfabe", "patch": "@@ -0,0 +1,38 @@\n+! PR Fortran/71523\n+!\n+! { dg-do run }\n+! { dg-options \"-finit-integer=12345 -fautomatic -fmax-stack-var-size=8\" }\n+!\n+! Make sure that variables larger than max-stack-var-size become\n+! static and are given the correct _static_ initializer.\n+!\n+\n+function set(idx, val)\n+  implicit none\n+  integer, intent(in) :: idx, val\n+  integer set\n+  integer arr(100)\n+\n+  set = arr(idx)\n+  arr(idx) = val\n+  return\n+end function\n+\n+  integer set, val\n+\n+  val = set(1, 5)\n+  if (val .ne. 12345) then\n+    call abort()\n+  endif\n+\n+  val = set(1, 10)\n+  if (val .ne. 5) then\n+    call abort()\n+  endif\n+\n+  val = set(1, 100)\n+  if (val .ne. 10) then\n+    call abort()\n+  endif\n+\n+end"}]}