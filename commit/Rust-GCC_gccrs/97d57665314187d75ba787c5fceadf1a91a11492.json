{"sha": "97d57665314187d75ba787c5fceadf1a91a11492", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdkNTc2NjUzMTQxODdkNzViYTc4N2M1ZmNlYWRmMWE5MWExMTQ5Mg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2019-09-28T21:11:55Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2019-09-28T21:11:55Z"}, "message": "stl_algo.h (merge): Fix documentation.\n\n2019-09-28  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/stl_algo.h (merge): Fix documentation.\n\t* include/debug/functions.h (__check_sorted_aux): Add C++20 constexpr.\n\t(__check_sorted): Likewise and remove nested irreflexive check.\n\t(__check_sorted_set_aux, __check_sorted_set): Add C++20 constexpr.\n\t(__check_partitioned_lower, __check_partitioned_upper): Likewise.\n\t(_Irreflexive_checker::_S_is_valid): Likewise.\n\t(__is_irreflexive, __is_irreflexive_pred): Likewise.\n\t* include/debug/helper_functions.h (__get_distance): Add constexpr.\n\t(__valid_range_aux): Add C++20 constexpr.\n\t(__valid_range(_Iter, _Iter, _Distance_traits<_Iter>::__type&)):\n\tLikewise and add std::is_constant_evaluated check.\n\t(__valid_range_aux(_Iter, _Iter, std::input_iterator_tag)): New.\n\t(__valid_range_aux(_Iter, _Iter, std::random_accss_iterator_tag)): New.\n\t(__valid_range_aux(_Integral, _Integral, std::__true_type)): New,\n\tuse latter.\n\t(__valid_range(_Iter, _Iter)): Adapt to use latter, add constexpr and\n\t__builtin_is_contant_evaludated check..\n\t(__can_advance, __base): Add constexpr.\n\t* include/debug/macros.h [_GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED]\n\t(_GLIBCXX_DEBUG_VERIFY_COND_AT): New.\n\t(__glibcxx_check_sorted): Use __glibcxx_check_irreflexive.\n\t(__glibcxx_check_sorted_pred): Use __glibcxx_check_irreflexive_pred.\n\t* testsuite/25_algorithms/binary_search/constexpr.cc: Use irreflexive\n\tstd::less.\n\t* testsuite/25_algorithms/is_sorted/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/merge/constexpr.cc: Fix order in camm. Fix\n\tlambda to be irreflexive.\n\nFrom-SVN: r276260", "tree": {"sha": "363acc509ef2ddd88fdd27033971300d6e12ce85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/363acc509ef2ddd88fdd27033971300d6e12ce85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97d57665314187d75ba787c5fceadf1a91a11492", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97d57665314187d75ba787c5fceadf1a91a11492", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97d57665314187d75ba787c5fceadf1a91a11492", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97d57665314187d75ba787c5fceadf1a91a11492/comments", "author": null, "committer": null, "parents": [{"sha": "23cb6f8e0c0b462c13fbc01d5d6777d6b49bfaa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23cb6f8e0c0b462c13fbc01d5d6777d6b49bfaa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23cb6f8e0c0b462c13fbc01d5d6777d6b49bfaa7"}], "stats": {"total": 209, "additions": 157, "deletions": 52}, "files": [{"sha": "bb19eb53f566ca8f961378e3e52b97563b54e1c1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97d57665314187d75ba787c5fceadf1a91a11492/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97d57665314187d75ba787c5fceadf1a91a11492/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=97d57665314187d75ba787c5fceadf1a91a11492", "patch": "@@ -1,3 +1,33 @@\n+2019-09-28  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/stl_algo.h (merge): Fix documentation.\n+\t* include/debug/functions.h (__check_sorted_aux): Add C++20 constexpr.\n+\t(__check_sorted): Likewise and remove nested irreflexive check.\n+\t(__check_sorted_set_aux, __check_sorted_set): Add C++20 constexpr.\n+\t(__check_partitioned_lower, __check_partitioned_upper): Likewise.\n+\t(_Irreflexive_checker::_S_is_valid): Likewise.\n+\t(__is_irreflexive, __is_irreflexive_pred): Likewise.\n+\t* include/debug/helper_functions.h (__get_distance): Add constexpr.\n+\t(__valid_range_aux): Add C++20 constexpr.\n+\t(__valid_range(_Iter, _Iter, _Distance_traits<_Iter>::__type&)):\n+\tLikewise and add std::is_constant_evaluated check.\n+\t(__valid_range_aux(_Iter, _Iter, std::input_iterator_tag)): New.\n+\t(__valid_range_aux(_Iter, _Iter, std::random_accss_iterator_tag)): New.\n+\t(__valid_range_aux(_Integral, _Integral, std::__true_type)): New,\n+\tuse latter.\n+\t(__valid_range(_Iter, _Iter)): Adapt to use latter, add constexpr and\n+\t__builtin_is_contant_evaludated check..\n+\t(__can_advance, __base): Add constexpr.\n+\t* include/debug/macros.h [_GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED]\n+\t(_GLIBCXX_DEBUG_VERIFY_COND_AT): New.\n+\t(__glibcxx_check_sorted): Use __glibcxx_check_irreflexive.\n+\t(__glibcxx_check_sorted_pred): Use __glibcxx_check_irreflexive_pred.\n+\t* testsuite/25_algorithms/binary_search/constexpr.cc: Use irreflexive\n+\tstd::less.\n+\t* testsuite/25_algorithms/is_sorted/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/merge/constexpr.cc: Fix order in camm. Fix\n+\tlambda to be irreflexive.\n+\n 2019-09-27  Maciej W. Rozycki  <macro@wdc.com>\n \n \t* configure: Regenerate."}, {"sha": "b326c6305d8a4acddc7df30041bdb3cb6e6d08dd", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97d57665314187d75ba787c5fceadf1a91a11492/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97d57665314187d75ba787c5fceadf1a91a11492/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=97d57665314187d75ba787c5fceadf1a91a11492", "patch": "@@ -5057,8 +5057,8 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @param  __last1   Another iterator.\n    *  @param  __last2   Another iterator.\n    *  @param  __result  An iterator pointing to the end of the merged range.\n-   *  @return         An iterator pointing to the first element <em>not less\n-   *                  than</em> @e val.\n+   *  @return   An output iterator equal to @p __result + (__last1 - __first1)\n+   *            + (__last2 - __first2).\n    *\n    *  Merges the ranges @p [__first1,__last1) and @p [__first2,__last2) into\n    *  the sorted range @p [__result, __result + (__last1-__first1) +\n@@ -5105,8 +5105,8 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @param  __last2   Another iterator.\n    *  @param  __result  An iterator pointing to the end of the merged range.\n    *  @param  __comp    A functor to use for comparisons.\n-   *  @return         An iterator pointing to the first element \"not less\n-   *                  than\" @e val.\n+   *  @return   An output iterator equal to @p __result + (__last1 - __first1)\n+   *            + (__last2 - __first2).\n    *\n    *  Merges the ranges @p [__first1,__last1) and @p [__first2,__last2) into\n    *  the sorted range @p [__result, __result + (__last1-__first1) +"}, {"sha": "8c385b87244ae512898ef71a04098878cfbee024", "filename": "libstdc++-v3/include/debug/functions.h", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97d57665314187d75ba787c5fceadf1a91a11492/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97d57665314187d75ba787c5fceadf1a91a11492/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h?ref=97d57665314187d75ba787c5fceadf1a91a11492", "patch": "@@ -219,6 +219,7 @@ namespace __gnu_debug\n   // Can't check if an input iterator sequence is sorted, because we\n   // can't step through the sequence.\n   template<typename _InputIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __check_sorted_aux(const _InputIterator&, const _InputIterator&,\n                        std::input_iterator_tag)\n@@ -227,6 +228,7 @@ namespace __gnu_debug\n   // Can verify if a forward iterator sequence is in fact sorted using\n   // std::__is_sorted\n   template<typename _ForwardIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __check_sorted_aux(_ForwardIterator __first, _ForwardIterator __last,\n                        std::forward_iterator_tag)\n@@ -245,6 +247,7 @@ namespace __gnu_debug\n   // Can't check if an input iterator sequence is sorted, because we can't step\n   // through the sequence.\n   template<typename _InputIterator, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __check_sorted_aux(const _InputIterator&, const _InputIterator&,\n                        _Predicate, std::input_iterator_tag)\n@@ -253,6 +256,7 @@ namespace __gnu_debug\n   // Can verify if a forward iterator sequence is in fact sorted using\n   // std::__is_sorted\n   template<typename _ForwardIterator, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __check_sorted_aux(_ForwardIterator __first, _ForwardIterator __last,\n                        _Predicate __pred, std::forward_iterator_tag)\n@@ -270,52 +274,50 @@ namespace __gnu_debug\n \n   // Determine if a sequence is sorted.\n   template<typename _InputIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __check_sorted(const _InputIterator& __first, const _InputIterator& __last)\n     {\n-      // Verify that the < operator for elements in the sequence is a\n-      // StrictWeakOrdering by checking that it is irreflexive.\n-      __glibcxx_assert(__first == __last || !(*__first < *__first));\n-\n       return __check_sorted_aux(__first, __last,\n \t\t\t\tstd::__iterator_category(__first));\n     }\n \n   template<typename _InputIterator, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __check_sorted(const _InputIterator& __first, const _InputIterator& __last,\n                    _Predicate __pred)\n     {\n-      // Verify that the predicate is StrictWeakOrdering by checking that it\n-      // is irreflexive.\n-      __glibcxx_assert(__first == __last || !__pred(*__first, *__first));\n-\n       return __check_sorted_aux(__first, __last, __pred,\n \t\t\t\tstd::__iterator_category(__first));\n     }\n \n   template<typename _InputIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __check_sorted_set_aux(const _InputIterator& __first,\n \t\t\t   const _InputIterator& __last,\n \t\t\t   std::__true_type)\n     { return __check_sorted(__first, __last); }\n \n   template<typename _InputIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __check_sorted_set_aux(const _InputIterator&,\n \t\t\t   const _InputIterator&,\n \t\t\t   std::__false_type)\n     { return true; }\n \n   template<typename _InputIterator, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __check_sorted_set_aux(const _InputIterator& __first,\n \t\t\t   const _InputIterator& __last,\n \t\t\t   _Predicate __pred, std::__true_type)\n     { return __check_sorted(__first, __last, __pred); }\n \n   template<typename _InputIterator, typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __check_sorted_set_aux(const _InputIterator&,\n \t\t\t   const _InputIterator&, _Predicate,\n@@ -324,6 +326,7 @@ namespace __gnu_debug\n \n   // ... special variant used in std::merge, std::includes, std::set_*.\n   template<typename _InputIterator1, typename _InputIterator2>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __check_sorted_set(const _InputIterator1& __first,\n \t\t       const _InputIterator1& __last,\n@@ -341,6 +344,7 @@ namespace __gnu_debug\n \n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __check_sorted_set(const _InputIterator1& __first,\n \t\t       const _InputIterator1& __last,\n@@ -360,6 +364,7 @@ namespace __gnu_debug\n   // 270. Binary search requirements overly strict\n   // Determine if a sequence is partitioned w.r.t. this element.\n   template<typename _ForwardIterator, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __check_partitioned_lower(_ForwardIterator __first,\n \t\t\t      _ForwardIterator __last, const _Tp& __value)\n@@ -376,6 +381,7 @@ namespace __gnu_debug\n     }\n \n   template<typename _ForwardIterator, typename _Tp>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __check_partitioned_upper(_ForwardIterator __first,\n \t\t\t      _ForwardIterator __last, const _Tp& __value)\n@@ -393,6 +399,7 @@ namespace __gnu_debug\n \n   // Determine if a sequence is partitioned w.r.t. this element.\n   template<typename _ForwardIterator, typename _Tp, typename _Pred>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __check_partitioned_lower(_ForwardIterator __first,\n \t\t\t      _ForwardIterator __last, const _Tp& __value,\n@@ -410,6 +417,7 @@ namespace __gnu_debug\n     }\n \n   template<typename _ForwardIterator, typename _Tp, typename _Pred>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __check_partitioned_upper(_ForwardIterator __first,\n \t\t\t      _ForwardIterator __last, const _Tp& __value,\n@@ -435,35 +443,41 @@ namespace __gnu_debug\n \n     template<typename _It,\n \t     typename = decltype(__deref<_It>() < __deref<_It>())>\n+      _GLIBCXX20_CONSTEXPR\n       static bool\n       _S_is_valid(_It __it)\n       { return !(*__it < *__it); }\n \n     // Fallback method if operator doesn't exist.\n     template<typename... _Args>\n+      _GLIBCXX20_CONSTEXPR\n       static bool\n       _S_is_valid(_Args...)\n       { return true; }\n \n     template<typename _It, typename _Pred, typename\n \t= decltype(std::declval<_Pred>()(__deref<_It>(), __deref<_It>()))>\n+      _GLIBCXX20_CONSTEXPR\n       static bool\n       _S_is_valid_pred(_It __it, _Pred __pred)\n       { return !__pred(*__it, *__it); }\n \n     // Fallback method if predicate can't be invoked.\n     template<typename... _Args>\n+      _GLIBCXX20_CONSTEXPR\n       static bool\n       _S_is_valid_pred(_Args...)\n       { return true; }\n   };\n \n   template<typename _Iterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __is_irreflexive(_Iterator __it)\n     { return _Irreflexive_checker::_S_is_valid(__it); }\n \n   template<typename _Iterator, typename _Pred>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __is_irreflexive_pred(_Iterator __it, _Pred __pred)\n     { return _Irreflexive_checker::_S_is_valid_pred(__it, __pred); }"}, {"sha": "475fdda1d7b9303dcee1ceea9a1f79b1ad94f1e4", "filename": "libstdc++-v3/include/debug/helper_functions.h", "status": "modified", "additions": 51, "deletions": 2, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97d57665314187d75ba787c5fceadf1a91a11492/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhelper_functions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97d57665314187d75ba787c5fceadf1a91a11492/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhelper_functions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhelper_functions.h?ref=97d57665314187d75ba787c5fceadf1a91a11492", "patch": "@@ -87,12 +87,14 @@ namespace __gnu_debug\n    *\tprecision.\n   */\n   template<typename _Iterator>\n+    _GLIBCXX_CONSTEXPR\n     inline typename _Distance_traits<_Iterator>::__type\n     __get_distance(_Iterator __lhs, _Iterator __rhs,\n \t\t   std::random_access_iterator_tag)\n     { return std::make_pair(__rhs - __lhs, __dp_exact); }\n \n   template<typename _Iterator>\n+    _GLIBCXX_CONSTEXPR\n     inline typename _Distance_traits<_Iterator>::__type\n     __get_distance(_Iterator __lhs, _Iterator __rhs,\n \t\t   std::input_iterator_tag)\n@@ -104,6 +106,7 @@ namespace __gnu_debug\n     }\n \n   template<typename _Iterator>\n+    _GLIBCXX_CONSTEXPR\n     inline typename _Distance_traits<_Iterator>::__type\n     __get_distance(_Iterator __lhs, _Iterator __rhs)\n     { return __get_distance(__lhs, __rhs, std::__iterator_category(__lhs)); }\n@@ -113,6 +116,13 @@ namespace __gnu_debug\n    *  iterators.\n   */\n   template<typename _Integral>\n+    _GLIBCXX_CONSTEXPR\n+    inline bool\n+    __valid_range_aux(_Integral, _Integral, std::__true_type)\n+    { return true; }\n+\n+  template<typename _Integral>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __valid_range_aux(_Integral, _Integral,\n \t\t      typename _Distance_traits<_Integral>::__type& __dist,\n@@ -122,10 +132,35 @@ namespace __gnu_debug\n       return true;\n     }\n \n+  template<typename _InputIterator>\n+    _GLIBCXX_CONSTEXPR\n+    inline bool\n+    __valid_range_aux(_InputIterator __first, _InputIterator __last,\n+\t\t      std::input_iterator_tag)\n+    { return true; }\n+\n+  template<typename _InputIterator>\n+    _GLIBCXX_CONSTEXPR\n+    inline bool\n+    __valid_range_aux(_InputIterator __first, _InputIterator __last,\n+\t\t      std::random_access_iterator_tag)\n+    { return __first <= __last; }\n+\n   /** We have iterators, so figure out what kind of iterators they are\n    *  to see if we can check the range ahead of time.\n   */\n   template<typename _InputIterator>\n+    _GLIBCXX_CONSTEXPR\n+    inline bool\n+    __valid_range_aux(_InputIterator __first, _InputIterator __last,\n+\t\t      std::__false_type)\n+    {\n+      return __valid_range_aux(__first, __last,\n+\t\t\t       std::__iterator_category(__first));\n+    }\n+\n+  template<typename _InputIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __valid_range_aux(_InputIterator __first, _InputIterator __last,\n \t\t      typename _Distance_traits<_InputIterator>::__type& __dist,\n@@ -155,10 +190,16 @@ namespace __gnu_debug\n    *  otherwise.\n   */\n   template<typename _InputIterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __valid_range(_InputIterator __first, _InputIterator __last,\n \t\t  typename _Distance_traits<_InputIterator>::__type& __dist)\n     {\n+#ifdef __cpp_lib_is_constant_evaluated\n+      if (std::is_constant_evaluated())\n+\t// Detected by the compiler directly.\n+\treturn true;\n+#endif\n       typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n       return __valid_range_aux(__first, __last, __dist, _Integral());\n     }\n@@ -178,11 +219,17 @@ namespace __gnu_debug\n #endif\n \n   template<typename _InputIterator>\n+    _GLIBCXX_CONSTEXPR\n     inline bool\n     __valid_range(_InputIterator __first, _InputIterator __last)\n     {\n-      typename _Distance_traits<_InputIterator>::__type __dist;\n-      return __valid_range(__first, __last, __dist);\n+#ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n+      if (__builtin_is_constant_evaluated())\n+\t// Detected by the compiler directly.\n+\treturn true;\n+#endif\n+      typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n+      return __valid_range_aux(__first, __last, _Integral());\n     }\n \n   template<typename _Iterator, typename _Sequence, typename _Category>\n@@ -199,6 +246,7 @@ namespace __gnu_debug\n \n   // Fallback method, always ok.\n   template<typename _InputIterator, typename _Size>\n+    _GLIBCXX_CONSTEXPR\n     inline bool\n     __can_advance(_InputIterator, _Size)\n     { return true; }\n@@ -216,6 +264,7 @@ namespace __gnu_debug\n    *  thanks to the < operator.\n    */\n   template<typename _Iterator>\n+    _GLIBCXX_CONSTEXPR\n     inline _Iterator\n     __base(_Iterator __it)\n     { return __it; }"}, {"sha": "97e54fd8390eab5017d2062459a55495da89e454", "filename": "libstdc++-v3/include/debug/macros.h", "status": "modified", "additions": 46, "deletions": 34, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97d57665314187d75ba787c5fceadf1a91a11492/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97d57665314187d75ba787c5fceadf1a91a11492/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h?ref=97d57665314187d75ba787c5fceadf1a91a11492", "patch": "@@ -38,10 +38,20 @@\n  * the user error and where the error is reported.\n  *\n  */\n-#define _GLIBCXX_DEBUG_VERIFY_COND_AT(_Cond,_ErrMsg,_File,_Line,_Func)\t\\\n+#if 0 /* defined _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED */\n+# define _GLIBCXX_DEBUG_VERIFY_COND_AT(_Cond,_ErrMsg,_File,_Line,_Func)\t\\\n+  if (__builtin_is_constant_evaluated())\t\t\t\t\\\n+    /* FIXME: Compilation error here when !_Cond. */\t\t\t\\\n+    break;\t\t\t\t\t\t\t\t\\\n   if (! (_Cond))\t\t\t\t\t\t\t\\\n     __gnu_debug::_Error_formatter::_S_at(_File, _Line, _Func)\t\t\\\n       ._ErrMsg._M_error()\n+#else\n+# define _GLIBCXX_DEBUG_VERIFY_COND_AT(_Cond,_ErrMsg,_File,_Line,_Func)\t\\\n+  if (! (_Cond))\t\t\t\t\t\t\t\\\n+    __gnu_debug::_Error_formatter::_S_at(_File, _Line, _Func)\t\t\\\n+      ._ErrMsg._M_error()\n+#endif\n \n #define _GLIBCXX_DEBUG_VERIFY_AT_F(_Cond,_ErrMsg,_File,_Line,_Func)\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n@@ -291,9 +301,43 @@ _GLIBCXX_DEBUG_VERIFY(! this->empty(),\t\t\t\t\t\\\n \t\t      _M_message(__gnu_debug::__msg_empty)\t        \\\n                       ._M_sequence(*this, \"this\"))\n \n+// Verify that a predicate is irreflexive\n+#define __glibcxx_check_irreflexive(_First,_Last)\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY(_First == _Last || !(*_First < *_First),\t\\\n+\t\t\t_M_message(__gnu_debug::__msg_irreflexive_ordering) \\\n+\t\t\t._M_iterator_value_type(_First, \"< operator type\"))\n+\n+#if __cplusplus >= 201103L\n+# define __glibcxx_check_irreflexive2(_First,_Last)\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY(_First == _Last\t\t\t\t\t\\\n+\t\t\t|| __gnu_debug::__is_irreflexive(_First),\t\\\n+\t\t\t_M_message(__gnu_debug::__msg_irreflexive_ordering) \\\n+\t\t\t._M_iterator_value_type(_First, \"< operator type\"))\n+#else\n+# define __glibcxx_check_irreflexive2(_First,_Last)\n+#endif\n+\n+#define __glibcxx_check_irreflexive_pred(_First,_Last,_Pred)\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY(_First == _Last || !_Pred(*_First, *_First),\t\\\n+\t\t\t_M_message(__gnu_debug::__msg_irreflexive_ordering) \\\n+\t\t\t._M_instance(_Pred, \"functor\")\t\t\t\\\n+\t\t\t._M_iterator_value_type(_First, \"ordered type\"))\n+\n+#if __cplusplus >= 201103L\n+# define __glibcxx_check_irreflexive_pred2(_First,_Last,_Pred)\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY(_First == _Last\t\t\t\t\t\\\n+\t\t\t||__gnu_debug::__is_irreflexive_pred(_First, _Pred), \\\n+\t\t\t_M_message(__gnu_debug::__msg_irreflexive_ordering) \\\n+\t\t\t._M_instance(_Pred, \"functor\")\t\t\t\\\n+\t\t\t._M_iterator_value_type(_First, \"ordered type\"))\n+#else\n+# define __glibcxx_check_irreflexive_pred2(_First,_Last,_Pred)\n+#endif\n+\n // Verify that the iterator range [_First, _Last) is sorted\n #define __glibcxx_check_sorted(_First,_Last)\t\t\t\t\\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n+__glibcxx_check_irreflexive(_First,_Last);\t\t\t\t\\\n  _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_sorted(\t\t\t\\\n \t\t\t__gnu_debug::__base(_First),\t\t\t\\\n \t\t\t__gnu_debug::__base(_Last)),\t\t\t\\\n@@ -305,6 +349,7 @@ __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n     predicate _Pred. */\n #define __glibcxx_check_sorted_pred(_First,_Last,_Pred)\t\t\t\\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n+__glibcxx_check_irreflexive_pred(_First,_Last,_Pred);\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_sorted(\t\t\t\\\n \t\t\t__gnu_debug::__base(_First),\t\t\t\\\n \t\t\t__gnu_debug::__base(_Last), _Pred),\t\t\\\n@@ -423,37 +468,4 @@ _GLIBCXX_DEBUG_VERIFY(_This.get_allocator() == _Other.get_allocator(),\t\\\n #define __glibcxx_check_string_len(_String,_Len) \\\n   _GLIBCXX_DEBUG_PEDASSERT(_String != 0 || _Len == 0)\n \n-// Verify that a predicate is irreflexive\n-#define __glibcxx_check_irreflexive(_First,_Last)\t\t\t\\\n-  _GLIBCXX_DEBUG_VERIFY(_First == _Last || !(*_First < *_First),\t\\\n-\t\t\t_M_message(__gnu_debug::__msg_irreflexive_ordering) \\\n-\t\t\t._M_iterator_value_type(_First, \"< operator type\"))\n-\n-#if __cplusplus >= 201103L\n-# define __glibcxx_check_irreflexive2(_First,_Last)\t\t\t\\\n-  _GLIBCXX_DEBUG_VERIFY(_First == _Last\t\t\t\t\t\\\n-\t\t\t|| __gnu_debug::__is_irreflexive(_First),\t\\\n-\t\t\t_M_message(__gnu_debug::__msg_irreflexive_ordering) \\\n-\t\t\t._M_iterator_value_type(_First, \"< operator type\"))\n-#else\n-# define __glibcxx_check_irreflexive2(_First,_Last)\n-#endif\n-\n-#define __glibcxx_check_irreflexive_pred(_First,_Last,_Pred)\t\t\\\n-  _GLIBCXX_DEBUG_VERIFY(_First == _Last\t|| !_Pred(*_First, *_First),\t\t\\\n-\t\t\t_M_message(__gnu_debug::__msg_irreflexive_ordering) \\\n-\t\t\t._M_instance(_Pred, \"functor\")\t\t\t\\\n-\t\t\t._M_iterator_value_type(_First, \"ordered type\"))\n-\n-#if __cplusplus >= 201103L\n-# define __glibcxx_check_irreflexive_pred2(_First,_Last,_Pred)\t\t\\\n-  _GLIBCXX_DEBUG_VERIFY(_First == _Last\t\t\t\t\t\\\n-\t\t\t||__gnu_debug::__is_irreflexive_pred(_First, _Pred), \\\n-\t\t\t_M_message(__gnu_debug::__msg_irreflexive_ordering) \\\n-\t\t\t._M_instance(_Pred, \"functor\")\t\t\t\\\n-\t\t\t._M_iterator_value_type(_First, \"ordered type\"))\n-#else\n-# define __glibcxx_check_irreflexive_pred2(_First,_Last,_Pred)\n-#endif\n-\n #endif"}, {"sha": "205a96a223bf242345f5972416c943cca2bb235b", "filename": "libstdc++-v3/testsuite/25_algorithms/binary_search/constexpr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97d57665314187d75ba787c5fceadf1a91a11492/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fbinary_search%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97d57665314187d75ba787c5fceadf1a91a11492/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fbinary_search%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fbinary_search%2Fconstexpr.cc?ref=97d57665314187d75ba787c5fceadf1a91a11492", "patch": "@@ -29,7 +29,7 @@ test()\n   const auto out4 = std::binary_search(ca0.begin(), ca0.end(), 5);\n \n   const auto out5 = std::binary_search(ca0.begin(), ca0.end(), 5,\n-\t\t\t\t       std::equal_to<int>());\n+\t\t\t\t       std::less<int>());\n \n   return true;\n }"}, {"sha": "f549b3d930786c41082200ac88d713ad58b11872", "filename": "libstdc++-v3/testsuite/25_algorithms/is_sorted/constexpr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97d57665314187d75ba787c5fceadf1a91a11492/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97d57665314187d75ba787c5fceadf1a91a11492/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted%2Fconstexpr.cc?ref=97d57665314187d75ba787c5fceadf1a91a11492", "patch": "@@ -26,7 +26,7 @@ constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n constexpr auto outv = std::is_sorted(ca0.begin(), ca0.end());\n \n constexpr auto outw = std::is_sorted(ca0.begin(), ca0.end(),\n-\t\t\t\t     std::equal_to<int>());\n+\t\t\t\t     std::less<int>());\n \n constexpr bool\n test()"}, {"sha": "794453dd50cda3395d6c20bfd5ce182a7d4ce9e3", "filename": "libstdc++-v3/testsuite/25_algorithms/merge/constexpr.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97d57665314187d75ba787c5fceadf1a91a11492/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmerge%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97d57665314187d75ba787c5fceadf1a91a11492/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmerge%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmerge%2Fconstexpr.cc?ref=97d57665314187d75ba787c5fceadf1a91a11492", "patch": "@@ -26,15 +26,15 @@ test()\n {\n   constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n   constexpr std::array<int, 12> cas{{3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}};\n-  constexpr std::array<int, 3> camm{{-4, -5, -6}};\n+  constexpr std::array<int, 3> camm{{-6, -5, -4}};\n   std::array<int, 24> out0{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};\n \n   const auto outdd = std::merge(ca0.begin(), ca0.end(),\n \t\t\t\tcas.begin(), cas.end(), out0.begin());\n \n   const auto outee = std::merge(ca0.begin(), ca0.end(),\n \t\t\t\tcamm.begin(), camm.end(), out0.begin(),\n-\t\t\t\t[](int i, int j){ return i < -j; });\n+\t\t\t\t[](int i, int j){ return i < j; });\n \n   return true;\n }"}]}