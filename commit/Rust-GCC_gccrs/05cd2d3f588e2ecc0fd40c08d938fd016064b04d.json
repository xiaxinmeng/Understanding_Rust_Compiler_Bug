{"sha": "05cd2d3f588e2ecc0fd40c08d938fd016064b04d", "node_id": "C_kwDOANBUbNoAKDA1Y2QyZDNmNTg4ZTJlY2MwZmQ0MGMwOGQ5MzhmZDAxNjA2NGIwNGQ", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-04-27T22:36:29Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-05-02T16:25:24Z"}, "message": "c++: uses_template_parms cleanups\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (uses_template_parms): Adjust declaration.\n\t* pt.cc (uses_template_parms): Return bool.  Use a RAII sentinel.", "tree": {"sha": "b8df8eb2532932c4120388e488885ead122ade41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8df8eb2532932c4120388e488885ead122ade41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05cd2d3f588e2ecc0fd40c08d938fd016064b04d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05cd2d3f588e2ecc0fd40c08d938fd016064b04d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05cd2d3f588e2ecc0fd40c08d938fd016064b04d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05cd2d3f588e2ecc0fd40c08d938fd016064b04d/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cb220498e1f59021dab36c39c5d726e9f070c6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cb220498e1f59021dab36c39c5d726e9f070c6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cb220498e1f59021dab36c39c5d726e9f070c6a"}], "stats": {"total": 35, "additions": 15, "deletions": 20}, "files": [{"sha": "6de29c0571c5a1ec3bf5919ab29443e0d5e4e699", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05cd2d3f588e2ecc0fd40c08d938fd016064b04d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05cd2d3f588e2ecc0fd40c08d938fd016064b04d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=05cd2d3f588e2ecc0fd40c08d938fd016064b04d", "patch": "@@ -7312,7 +7312,7 @@ extern tree lookup_template_class\t\t(tree, tree, tree, tree,\n \t\t\t\t\t\t int, tsubst_flags_t);\n extern tree lookup_template_function\t\t(tree, tree);\n extern tree lookup_template_variable\t\t(tree, tree);\n-extern int uses_template_parms\t\t\t(tree);\n+extern bool uses_template_parms\t\t\t(tree);\n extern bool uses_template_parms_level\t\t(tree, int);\n extern bool in_template_function\t\t(void);\n extern bool need_generic_capture\t\t(void);"}, {"sha": "23fbd8245d4b0d63683869a61aeb99a5ce64027e", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05cd2d3f588e2ecc0fd40c08d938fd016064b04d/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05cd2d3f588e2ecc0fd40c08d938fd016064b04d/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=05cd2d3f588e2ecc0fd40c08d938fd016064b04d", "patch": "@@ -10884,35 +10884,30 @@ find_template_parameters (tree t, tree ctx_parms)\n \n /* Returns true if T depends on any template parameter.  */\n \n-int\n+bool\n uses_template_parms (tree t)\n {\n-  if (t == NULL_TREE)\n+  if (t == NULL_TREE || t == error_mark_node)\n     return false;\n \n-  bool dependent_p;\n-  int saved_processing_template_decl;\n+  /* Namespaces can't depend on any template parameters.  */\n+  if (TREE_CODE (t) == NAMESPACE_DECL)\n+    return false;\n+\n+  processing_template_decl_sentinel ptds (/*reset*/false);\n+  ++processing_template_decl;\n \n-  saved_processing_template_decl = processing_template_decl;\n-  if (!saved_processing_template_decl)\n-    processing_template_decl = 1;\n   if (TYPE_P (t))\n-    dependent_p = dependent_type_p (t);\n+    return dependent_type_p (t);\n   else if (TREE_CODE (t) == TREE_VEC)\n-    dependent_p = any_dependent_template_arguments_p (t);\n+    return any_dependent_template_arguments_p (t);\n   else if (TREE_CODE (t) == TREE_LIST)\n-    dependent_p = (uses_template_parms (TREE_VALUE (t))\n-\t\t   || uses_template_parms (TREE_CHAIN (t)));\n+    return (uses_template_parms (TREE_VALUE (t))\n+\t    || uses_template_parms (TREE_CHAIN (t)));\n   else if (TREE_CODE (t) == TYPE_DECL)\n-    dependent_p = dependent_type_p (TREE_TYPE (t));\n-  else if (t == error_mark_node || TREE_CODE (t) == NAMESPACE_DECL)\n-    dependent_p = false;\n+    return dependent_type_p (TREE_TYPE (t));\n   else\n-    dependent_p = instantiation_dependent_expression_p (t);\n-\n-  processing_template_decl = saved_processing_template_decl;\n-\n-  return dependent_p;\n+    return instantiation_dependent_expression_p (t);\n }\n \n /* Returns true iff we're processing an incompletely instantiated function"}]}