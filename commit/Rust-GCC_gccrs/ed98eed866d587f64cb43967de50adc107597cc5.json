{"sha": "ed98eed866d587f64cb43967de50adc107597cc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ5OGVlZDg2NmQ1ODdmNjRjYjQzOTY3ZGU1MGFkYzEwNzU5N2NjNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-06-01T07:51:02Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-06-01T07:51:02Z"}, "message": "trans.c (lvalue_required_p): Deal with character and enumeration literals as index values.\n\n\t* gcc-interface/trans.c (lvalue_required_p) <N_Indexed_Component>: Deal\n\twith character and enumeration literals as index values.\n\nFrom-SVN: r223913", "tree": {"sha": "781e6893e9ed4d48796deb9cfc660c9b2be0a226", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/781e6893e9ed4d48796deb9cfc660c9b2be0a226"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed98eed866d587f64cb43967de50adc107597cc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed98eed866d587f64cb43967de50adc107597cc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed98eed866d587f64cb43967de50adc107597cc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed98eed866d587f64cb43967de50adc107597cc5/comments", "author": null, "committer": null, "parents": [{"sha": "73a1a803087a914aea66321618595bf6c9614d67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73a1a803087a914aea66321618595bf6c9614d67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73a1a803087a914aea66321618595bf6c9614d67"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "2c2b237608ec21322cfc19bffdb9a2e23508cc1a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed98eed866d587f64cb43967de50adc107597cc5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed98eed866d587f64cb43967de50adc107597cc5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ed98eed866d587f64cb43967de50adc107597cc5", "patch": "@@ -1,3 +1,8 @@\n+2015-06-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (lvalue_required_p) <N_Indexed_Component>: Deal\n+\twith character and enumeration literals as index values.\n+\n 2015-06-01  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/gigi.h (build_simple_component_ref): Declare."}, {"sha": "b561bf015a32df569742b755376d31551073d19c", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed98eed866d587f64cb43967de50adc107597cc5/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed98eed866d587f64cb43967de50adc107597cc5/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=ed98eed866d587f64cb43967de50adc107597cc5", "patch": "@@ -858,14 +858,17 @@ lvalue_required_p (Node_Id gnat_node, tree gnu_type, bool constant,\n       if (Prefix (gnat_parent) != gnat_node)\n \treturn 0;\n \n-      /* ??? Consider that referencing an indexed component with a\n-\t non-constant index forces the whole aggregate to memory.\n-\t Note that N_Integer_Literal is conservative, any static\n-\t expression in the RM sense could probably be accepted.  */\n+      /* ??? Consider that referencing an indexed component with a variable\n+\t index forces the whole aggregate to memory.  Note that testing only\n+\t for literals is conservative, any static expression in the RM sense\n+\t could probably be accepted with some additional work.  */\n       for (gnat_temp = First (Expressions (gnat_parent));\n \t   Present (gnat_temp);\n \t   gnat_temp = Next (gnat_temp))\n-\tif (Nkind (gnat_temp) != N_Integer_Literal)\n+\tif (Nkind (gnat_temp) != N_Character_Literal\n+\t    && Nkind (gnat_temp) != N_Integer_Literal\n+\t    && !(Is_Entity_Name (gnat_temp)\n+\t\t && Ekind (Entity (gnat_temp)) == E_Enumeration_Literal))\n \t  return 1;\n \n       /* ... fall through ... */"}]}