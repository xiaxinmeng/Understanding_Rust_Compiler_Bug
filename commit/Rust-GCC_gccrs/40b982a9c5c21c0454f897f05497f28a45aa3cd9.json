{"sha": "40b982a9c5c21c0454f897f05497f28a45aa3cd9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBiOTgyYTljNWMyMWMwNDU0Zjg5N2YwNTQ5N2YyOGE0NWFhM2NkOQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-12-21T05:22:17Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-12-21T05:22:17Z"}, "message": "fr30.md: Fix a comment typo.\n\n\t* config/fr30/fr30.md: Fix a comment typo.\n\t* config/i386/i386.c: Likewise.\n\t* config/ip2k/ip2k.h: Likewise.\n\nFrom-SVN: r60379", "tree": {"sha": "2dfcec1d1e545ab88a22d1b179a5bb6ebb60d7b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dfcec1d1e545ab88a22d1b179a5bb6ebb60d7b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40b982a9c5c21c0454f897f05497f28a45aa3cd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40b982a9c5c21c0454f897f05497f28a45aa3cd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40b982a9c5c21c0454f897f05497f28a45aa3cd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40b982a9c5c21c0454f897f05497f28a45aa3cd9/comments", "author": null, "committer": null, "parents": [{"sha": "609545727840272d8b8f0e4f488d4ef22035b9c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/609545727840272d8b8f0e4f488d4ef22035b9c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/609545727840272d8b8f0e4f488d4ef22035b9c3"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "6261fe35c804bf411528dcb479ada5662d3fa169", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b982a9c5c21c0454f897f05497f28a45aa3cd9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b982a9c5c21c0454f897f05497f28a45aa3cd9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40b982a9c5c21c0454f897f05497f28a45aa3cd9", "patch": "@@ -1,3 +1,9 @@\n+2002-12-21  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/fr30/fr30.md: Fix a comment typo.\n+\t* config/i386/i386.c: Likewise.\n+\t* config/ip2k/ip2k.h: Likewise.\n+\n 2002-12-20  Jim Wilson  <wilson@redhat.com>\n \n \t* config/rs6000/spe.h (__ev_subifw): Reverse arguments."}, {"sha": "442b910791c77d05a0181015746c38c0127e2062", "filename": "gcc/config/fr30/fr30.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b982a9c5c21c0454f897f05497f28a45aa3cd9/gcc%2Fconfig%2Ffr30%2Ffr30.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b982a9c5c21c0454f897f05497f28a45aa3cd9/gcc%2Fconfig%2Ffr30%2Ffr30.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.md?ref=40b982a9c5c21c0454f897f05497f28a45aa3cd9", "patch": "@@ -36,7 +36,7 @@\n ;; Define an attribute to be used by the delay slot code.\n ;; An instruction by default is considered to be 'delyabable'\n ;; that is, it can be placed into a delay slot, but it is not\n-;; itself a delyaed branch type instruction.  An instruction\n+;; itself a delayed branch type instruction.  An instruction\n ;; whoes type is 'delayed' is one which has a delay slot, and\n ;; an instruction whoes delay_type is 'other' is one which does\n ;; not have a delay slot, nor can it be placed into a delay slot."}, {"sha": "984abaf6e33fd250fc6fc8bb9270cfd3220881ed", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b982a9c5c21c0454f897f05497f28a45aa3cd9/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b982a9c5c21c0454f897f05497f28a45aa3cd9/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=40b982a9c5c21c0454f897f05497f28a45aa3cd9", "patch": "@@ -3079,7 +3079,7 @@ register_and_not_any_fp_reg_operand (op, mode)\n   return register_operand (op, mode) && !ANY_FP_REG_P (op);\n }\n \n-/* Return nonzero of OP is a register operand other than an\n+/* Return nonzero if OP is a register operand other than an\n    i387 fp register.  */\n int\n register_and_not_fp_reg_operand (op, mode)"}, {"sha": "6957021ba4f67a4b9743b69fb8353423299d4638", "filename": "gcc/config/ip2k/ip2k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b982a9c5c21c0454f897f05497f28a45aa3cd9/gcc%2Fconfig%2Fip2k%2Fip2k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b982a9c5c21c0454f897f05497f28a45aa3cd9/gcc%2Fconfig%2Fip2k%2Fip2k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.h?ref=40b982a9c5c21c0454f897f05497f28a45aa3cd9", "patch": "@@ -680,7 +680,7 @@ enum reg_class {\n \n #define MODE_BASE_REG_CLASS(MODE) ((MODE) == QImode ? PTR_REGS : DP_SP_REGS)\n /* This is a variation of the BASE_REG_CLASS macro which allows\n-   the selection of a base register in a mode depenedent manner.\n+   the selection of a base register in a mode dependent manner.\n    If MODE is VOIDmode then it should return the same value as\n    BASE_REG_CLASS.  */\n "}]}