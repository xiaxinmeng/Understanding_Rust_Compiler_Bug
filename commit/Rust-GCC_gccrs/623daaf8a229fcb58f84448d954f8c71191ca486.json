{"sha": "623daaf8a229fcb58f84448d954f8c71191ca486", "node_id": "C_kwDOANBUbNoAKDYyM2RhYWY4YTIyOWZjYjU4Zjg0NDQ4ZDk1NGY4YzcxMTkxY2E0ODY", "commit": {"author": {"name": "Chung-Lin Tang", "email": "cltang@codesourcery.com", "date": "2022-12-21T13:26:06Z"}, "committer": {"name": "Chung-Lin Tang", "email": "cltang@codesourcery.com", "date": "2022-12-21T13:58:49Z"}, "message": "nvptx: support bar.red instruction\n\nThis patch adds support for the PTX 'bar.red' (i.e. \"barrier reduction\")\ninstruction, in the form of nvptx-specific __builtin_nvptx_bar_red_[and/or/popc]\nbuilt-in functions.\n\ngcc/ChangeLog:\n\n\t* config/nvptx/nvptx.cc (nvptx_print_operand): Add 'p' case, adjust\n\tcomments.\n\t(enum nvptx_builtins): Add NVPTX_BUILTIN_BAR_RED_AND,\n\tNVPTX_BUILTIN_BAR_RED_OR, and NVPTX_BUILTIN_BAR_RED_POPC.\n\t(nvptx_expand_bar_red): New function.\n\t(nvptx_init_builtins):\n\tAdd DEFs of __builtin_nvptx_bar_red_[and/or/popc].\n\t(nvptx_expand_builtin): Use nvptx_expand_bar_red to expand\n\tNVPTX_BUILTIN_BAR_RED_[AND/OR/POPC] cases.\n\n\t* config/nvptx/nvptx.md (define_c_enum \"unspecv\"): Add\n\tUNSPECV_BARRED_AND, UNSPECV_BARRED_OR, and UNSPECV_BARRED_POPC.\n\t(BARRED): New int iterator.\n\t(barred_op,barred_mode,barred_ptxtype): New int attrs.\n\t(nvptx_barred_<barred_op>): New define_insn.", "tree": {"sha": "58228ef7d6f61905df9b1bf868b76929163dd566", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58228ef7d6f61905df9b1bf868b76929163dd566"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/623daaf8a229fcb58f84448d954f8c71191ca486", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/623daaf8a229fcb58f84448d954f8c71191ca486", "html_url": "https://github.com/Rust-GCC/gccrs/commit/623daaf8a229fcb58f84448d954f8c71191ca486", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/623daaf8a229fcb58f84448d954f8c71191ca486/comments", "author": {"login": "cltang", "id": 4055966, "node_id": "MDQ6VXNlcjQwNTU5NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/4055966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cltang", "html_url": "https://github.com/cltang", "followers_url": "https://api.github.com/users/cltang/followers", "following_url": "https://api.github.com/users/cltang/following{/other_user}", "gists_url": "https://api.github.com/users/cltang/gists{/gist_id}", "starred_url": "https://api.github.com/users/cltang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cltang/subscriptions", "organizations_url": "https://api.github.com/users/cltang/orgs", "repos_url": "https://api.github.com/users/cltang/repos", "events_url": "https://api.github.com/users/cltang/events{/privacy}", "received_events_url": "https://api.github.com/users/cltang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cltang", "id": 4055966, "node_id": "MDQ6VXNlcjQwNTU5NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/4055966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cltang", "html_url": "https://github.com/cltang", "followers_url": "https://api.github.com/users/cltang/followers", "following_url": "https://api.github.com/users/cltang/following{/other_user}", "gists_url": "https://api.github.com/users/cltang/gists{/gist_id}", "starred_url": "https://api.github.com/users/cltang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cltang/subscriptions", "organizations_url": "https://api.github.com/users/cltang/orgs", "repos_url": "https://api.github.com/users/cltang/repos", "events_url": "https://api.github.com/users/cltang/events{/privacy}", "received_events_url": "https://api.github.com/users/cltang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f661b3d11e57853864b5bd04490115dd79869533", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f661b3d11e57853864b5bd04490115dd79869533", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f661b3d11e57853864b5bd04490115dd79869533"}], "stats": {"total": 131, "additions": 131, "deletions": 0}, "files": [{"sha": "06a9585dd3b0483f736043a90e6e0a5cb6e7f5e0", "filename": "gcc/config/nvptx/nvptx.cc", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/623daaf8a229fcb58f84448d954f8c71191ca486/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/623daaf8a229fcb58f84448d954f8c71191ca486/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc?ref=623daaf8a229fcb58f84448d954f8c71191ca486", "patch": "@@ -2883,6 +2883,7 @@ nvptx_mem_maybe_shared_p (const_rtx x)\n    t -- print a type opcode suffix, promoting QImode to 32 bits\n    T -- print a type size in bits\n    u -- print a type opcode suffix without promotions.\n+   p -- print a '!' for constant 0.\n    x -- print a destination operand that may also be a bit bucket.  */\n \n static void\n@@ -3016,6 +3017,11 @@ nvptx_print_operand (FILE *file, rtx x, int code)\n       fprintf (file, \"@!\");\n       goto common;\n \n+    case 'p':\n+      if (INTVAL (x) == 0)\n+\tfprintf (file, \"!\");\n+      break;\n+\n     case 'c':\n       mode = GET_MODE (XEXP (x, 0));\n       switch (x_code)\n@@ -6155,9 +6161,90 @@ enum nvptx_builtins\n   NVPTX_BUILTIN_CMP_SWAPLL,\n   NVPTX_BUILTIN_MEMBAR_GL,\n   NVPTX_BUILTIN_MEMBAR_CTA,\n+  NVPTX_BUILTIN_BAR_RED_AND,\n+  NVPTX_BUILTIN_BAR_RED_OR,\n+  NVPTX_BUILTIN_BAR_RED_POPC,\n   NVPTX_BUILTIN_MAX\n };\n \n+/* Expander for 'bar.red' instruction builtins.  */\n+\n+static rtx\n+nvptx_expand_bar_red (tree exp, rtx target,\n+\t\t      machine_mode ARG_UNUSED (m), int ARG_UNUSED (ignore))\n+{\n+  int code = DECL_MD_FUNCTION_CODE (TREE_OPERAND (CALL_EXPR_FN (exp), 0));\n+  machine_mode mode = TYPE_MODE (TREE_TYPE (exp));\n+\n+  if (!target)\n+    target = gen_reg_rtx (mode);\n+\n+  rtx pred, dst;\n+  rtx bar = expand_expr (CALL_EXPR_ARG (exp, 0),\n+\t\t\t NULL_RTX, SImode, EXPAND_NORMAL);\n+  rtx nthr = expand_expr (CALL_EXPR_ARG (exp, 1),\n+\t\t\t  NULL_RTX, SImode, EXPAND_NORMAL);\n+  rtx cpl = expand_expr (CALL_EXPR_ARG (exp, 2),\n+\t\t\t NULL_RTX, SImode, EXPAND_NORMAL);\n+  rtx redop = expand_expr (CALL_EXPR_ARG (exp, 3),\n+\t\t\t   NULL_RTX, SImode, EXPAND_NORMAL);\n+  if (CONST_INT_P (bar))\n+    {\n+      if (INTVAL (bar) < 0 || INTVAL (bar) > 15)\n+\t{\n+\t  error_at (EXPR_LOCATION (exp),\n+\t\t    \"barrier value must be within [0,15]\");\n+\t  return const0_rtx;\n+\t}\n+    }\n+  else if (!REG_P (bar))\n+    bar = copy_to_mode_reg (SImode, bar);\n+\n+  if (!CONST_INT_P (nthr) && !REG_P (nthr))\n+    nthr = copy_to_mode_reg (SImode, nthr);\n+\n+  if (!CONST_INT_P (cpl))\n+    {\n+      error_at (EXPR_LOCATION (exp),\n+\t\t\"complement argument must be constant\");\n+      return const0_rtx;\n+    }\n+\n+  pred = gen_reg_rtx (BImode);\n+  if (!REG_P (redop))\n+    redop = copy_to_mode_reg (SImode, redop);\n+  emit_insn (gen_rtx_SET (pred, gen_rtx_NE (BImode, redop, GEN_INT (0))));\n+  redop = pred;\n+\n+  rtx pat;\n+  switch (code)\n+    {\n+    case NVPTX_BUILTIN_BAR_RED_AND:\n+      dst = gen_reg_rtx (BImode);\n+      pat = gen_nvptx_barred_and (dst, bar, nthr, cpl, redop);\n+      break;\n+    case NVPTX_BUILTIN_BAR_RED_OR:\n+      dst = gen_reg_rtx (BImode);\n+      pat = gen_nvptx_barred_or (dst, bar, nthr, cpl, redop);\n+      break;\n+    case NVPTX_BUILTIN_BAR_RED_POPC:\n+      dst = gen_reg_rtx (SImode);\n+      pat = gen_nvptx_barred_popc (dst, bar, nthr, cpl, redop);\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+  emit_insn (pat);\n+  if (GET_MODE (dst) == BImode)\n+    {\n+      rtx tmp = gen_reg_rtx (mode);\n+      emit_insn (gen_rtx_SET (tmp, gen_rtx_NE (mode, dst, GEN_INT (0))));\n+      dst = tmp;\n+    }\n+  emit_move_insn (target, dst);\n+  return target;\n+}\n+\n static GTY(()) tree nvptx_builtin_decls[NVPTX_BUILTIN_MAX];\n \n /* Return the NVPTX builtin for CODE.  */\n@@ -6198,6 +6285,13 @@ nvptx_init_builtins (void)\n   DEF (MEMBAR_GL, \"membar_gl\", (VOID, VOID, NULL_TREE));\n   DEF (MEMBAR_CTA, \"membar_cta\", (VOID, VOID, NULL_TREE));\n \n+  DEF (BAR_RED_AND, \"bar_red_and\",\n+       (UINT, UINT, UINT, UINT, UINT, NULL_TREE));\n+  DEF (BAR_RED_OR, \"bar_red_or\",\n+       (UINT, UINT, UINT, UINT, UINT, NULL_TREE));\n+  DEF (BAR_RED_POPC, \"bar_red_popc\",\n+       (UINT, UINT, UINT, UINT, UINT, NULL_TREE));\n+\n #undef DEF\n #undef ST\n #undef UINT\n@@ -6240,6 +6334,11 @@ nvptx_expand_builtin (tree exp, rtx target, rtx ARG_UNUSED (subtarget),\n       emit_insn (gen_nvptx_membar_cta ());\n       return NULL_RTX;\n \n+    case NVPTX_BUILTIN_BAR_RED_AND:\n+    case NVPTX_BUILTIN_BAR_RED_OR:\n+    case NVPTX_BUILTIN_BAR_RED_POPC:\n+      return nvptx_expand_bar_red (exp, target, mode, ignore);\n+\n     default: gcc_unreachable ();\n     }\n }"}, {"sha": "740c4def620ed8f630620f7961f3d1350c49ad26", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/623daaf8a229fcb58f84448d954f8c71191ca486/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/623daaf8a229fcb58f84448d954f8c71191ca486/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=623daaf8a229fcb58f84448d954f8c71191ca486", "patch": "@@ -58,6 +58,9 @@\n    UNSPECV_CAS_LOCAL\n    UNSPECV_XCHG\n    UNSPECV_ST\n+   UNSPECV_BARRED_AND\n+   UNSPECV_BARRED_OR\n+   UNSPECV_BARRED_POPC\n    UNSPECV_BARSYNC\n    UNSPECV_WARPSYNC\n    UNSPECV_UNIFORM_WARP_CHECK\n@@ -2274,6 +2277,35 @@\n   \"TARGET_PTX_6_0\"\n   \"%.\\\\tbar.warp.sync\\\\t0xffffffff;\")\n \n+(define_int_iterator BARRED\n+  [UNSPECV_BARRED_AND\n+   UNSPECV_BARRED_OR\n+   UNSPECV_BARRED_POPC])\n+(define_int_attr barred_op\n+  [(UNSPECV_BARRED_AND      \"and\")\n+   (UNSPECV_BARRED_OR       \"or\")\n+   (UNSPECV_BARRED_POPC     \"popc\")])\n+(define_int_attr barred_mode\n+  [(UNSPECV_BARRED_AND      \"BI\")\n+   (UNSPECV_BARRED_OR       \"BI\")\n+   (UNSPECV_BARRED_POPC     \"SI\")])\n+(define_int_attr barred_ptxtype\n+  [(UNSPECV_BARRED_AND      \"pred\")\n+   (UNSPECV_BARRED_OR       \"pred\")\n+   (UNSPECV_BARRED_POPC     \"u32\")])\n+\n+(define_insn \"nvptx_barred_<barred_op>\"\n+  [(set (match_operand:<barred_mode> 0 \"nvptx_register_operand\" \"=R\")\n+        (unspec_volatile\n+\t  [(match_operand:SI 1 \"nvptx_nonmemory_operand\" \"Ri\")\n+           (match_operand:SI 2 \"nvptx_nonmemory_operand\" \"Ri\")\n+\t   (match_operand:SI 3 \"const_int_operand\" \"i\")\n+           (match_operand:BI 4 \"nvptx_register_operand\" \"R\")]\n+          BARRED))]\n+  \"\"\n+  \"\\\\tbar.red.<barred_op>.<barred_ptxtype> \\\\t%0, %1, %2, %p3%4;\";\"\n+  [(set_attr \"predicable\" \"no\")])\n+\n (define_insn \"nvptx_uniform_warp_check\"\n   [(unspec_volatile [(const_int 0)] UNSPECV_UNIFORM_WARP_CHECK)]\n   \"\""}]}