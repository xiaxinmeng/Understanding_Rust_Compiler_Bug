{"sha": "b14446e2ff63e339f814681b8ec7c467de819b66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE0NDQ2ZTJmZjYzZTMzOWY4MTQ2ODFiOGVjN2M0NjdkZTgxOWI2Ng==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2010-09-29T21:32:42Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2010-09-29T21:32:42Z"}, "message": "ia64.c (ia64_builtin_decl): New.\n\n2010-09-29  Steve Ellcey  <sje@cup.hp.com>\n\n\t* config/ia64/ia64.c (ia64_builtin_decl): New.\n\t(TARGET_BUILTIN_DECL): Define.\n\t(ia64_builtins): New.\n\t(ia64_init_builtins): Save decls in ia64_builtins.\n\nFrom-SVN: r164734", "tree": {"sha": "eb3aa29786fa1866b1888e0ae4a8e7b730d3f63c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb3aa29786fa1866b1888e0ae4a8e7b730d3f63c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b14446e2ff63e339f814681b8ec7c467de819b66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b14446e2ff63e339f814681b8ec7c467de819b66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b14446e2ff63e339f814681b8ec7c467de819b66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b14446e2ff63e339f814681b8ec7c467de819b66/comments", "author": null, "committer": null, "parents": [{"sha": "907c53bbdf5deda5bb247f535af5fc1f1968946d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/907c53bbdf5deda5bb247f535af5fc1f1968946d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/907c53bbdf5deda5bb247f535af5fc1f1968946d"}], "stats": {"total": 52, "additions": 42, "deletions": 10}, "files": [{"sha": "67899b8283b59589a6fb8f5bf8e2714e7ddd63a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b14446e2ff63e339f814681b8ec7c467de819b66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b14446e2ff63e339f814681b8ec7c467de819b66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b14446e2ff63e339f814681b8ec7c467de819b66", "patch": "@@ -1,3 +1,10 @@\n+2010-09-29  Steve Ellcey  <sje@cup.hp.com>\n+\n+\t* config/ia64/ia64.c (ia64_builtin_decl): New.\n+\t(TARGET_BUILTIN_DECL): Define.\n+\t(ia64_builtins): New.\n+\t(ia64_init_builtins): Save decls in ia64_builtins.\n+\n 2010-09-29  Bernd Schmidt  <bernds@codesourcery.com>\n \n \tPR target/40457"}, {"sha": "dcd88a0d44dc80519c5ff4c83dc54fb8b660540e", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 35, "deletions": 10, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b14446e2ff63e339f814681b8ec7c467de819b66/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b14446e2ff63e339f814681b8ec7c467de819b66/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=b14446e2ff63e339f814681b8ec7c467de819b66", "patch": "@@ -322,6 +322,7 @@ static void ia64_trampoline_init (rtx, tree, rtx);\n static void ia64_override_options_after_change (void);\n \n static void ia64_dwarf_handle_frame_unspec (const char *, rtx, int);\n+static tree ia64_builtin_decl (unsigned, bool);\n \f\n /* Table of valid machine attributes.  */\n static const struct attribute_spec ia64_attribute_table[] =\n@@ -347,6 +348,9 @@ static const struct attribute_spec ia64_attribute_table[] =\n #undef TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN ia64_expand_builtin\n \n+#undef TARGET_BUILTIN_DECL\n+#define TARGET_BUILTIN_DECL ia64_builtin_decl\n+\n #undef TARGET_ASM_BYTE_OP\n #define TARGET_ASM_BYTE_OP \"\\tdata1\\t\"\n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -10033,14 +10037,18 @@ enum ia64_builtins\n   IA64_BUILTIN_FABSQ,\n   IA64_BUILTIN_FLUSHRS,\n   IA64_BUILTIN_INFQ,\n-  IA64_BUILTIN_HUGE_VALQ\n+  IA64_BUILTIN_HUGE_VALQ,\n+  IA64_BUILTIN_max\n };\n \n+static GTY(()) tree ia64_builtins[(int) IA64_BUILTIN_max];\n+\n void\n ia64_init_builtins (void)\n {\n   tree fpreg_type;\n   tree float80_type;\n+  tree decl;\n \n   /* The __fpreg type.  */\n   fpreg_type = make_node (REAL_TYPE);\n@@ -10057,7 +10065,7 @@ ia64_init_builtins (void)\n   /* The __float128 type.  */\n   if (!TARGET_HPUX)\n     {\n-      tree ftype, decl;\n+      tree ftype;\n       tree float128_type = make_node (REAL_TYPE);\n \n       TYPE_PRECISION (float128_type) = 128;\n@@ -10066,13 +10074,15 @@ ia64_init_builtins (void)\n \n       /* TFmode support builtins.  */\n       ftype = build_function_type (float128_type, void_list_node);\n-      add_builtin_function (\"__builtin_infq\", ftype,\n-\t\t\t    IA64_BUILTIN_INFQ, BUILT_IN_MD,\n-\t\t\t    NULL, NULL_TREE);\n+      decl = add_builtin_function (\"__builtin_infq\", ftype,\n+\t\t\t\t   IA64_BUILTIN_INFQ, BUILT_IN_MD,\n+\t\t\t\t   NULL, NULL_TREE);\n+      ia64_builtins[IA64_BUILTIN_INFQ] = decl;\n \n-      add_builtin_function (\"__builtin_huge_valq\", ftype,\n-\t\t\t    IA64_BUILTIN_HUGE_VALQ, BUILT_IN_MD,\n-\t\t\t    NULL, NULL_TREE);\n+      decl = add_builtin_function (\"__builtin_huge_valq\", ftype,\n+\t\t\t\t   IA64_BUILTIN_HUGE_VALQ, BUILT_IN_MD,\n+\t\t\t\t   NULL, NULL_TREE);\n+      ia64_builtins[IA64_BUILTIN_HUGE_VALQ] = decl;\n \n       ftype = build_function_type_list (float128_type,\n \t\t\t\t\tfloat128_type,\n@@ -10081,6 +10091,7 @@ ia64_init_builtins (void)\n \t\t\t\t   IA64_BUILTIN_FABSQ, BUILT_IN_MD,\n \t\t\t\t   \"__fabstf2\", NULL_TREE);\n       TREE_READONLY (decl) = 1;\n+      ia64_builtins[IA64_BUILTIN_FABSQ] = decl;\n \n       ftype = build_function_type_list (float128_type,\n \t\t\t\t\tfloat128_type,\n@@ -10090,6 +10101,7 @@ ia64_init_builtins (void)\n \t\t\t\t   IA64_BUILTIN_COPYSIGNQ, BUILT_IN_MD,\n \t\t\t\t   \"__copysigntf3\", NULL_TREE);\n       TREE_READONLY (decl) = 1;\n+      ia64_builtins[IA64_BUILTIN_COPYSIGNQ] = decl;\n     }\n   else\n     /* Under HPUX, this is a synonym for \"long double\".  */\n@@ -10107,13 +10119,15 @@ ia64_init_builtins (void)\n   add_builtin_function ((name), (type), (code), BUILT_IN_MD,\t\\\n \t\t       NULL, NULL_TREE)\n \n-  def_builtin (\"__builtin_ia64_bsp\",\n+  decl = def_builtin (\"__builtin_ia64_bsp\",\n \t       build_function_type (ptr_type_node, void_list_node),\n \t       IA64_BUILTIN_BSP);\n+  ia64_builtins[IA64_BUILTIN_BSP] = decl;\n \n-  def_builtin (\"__builtin_ia64_flushrs\",\n+  decl = def_builtin (\"__builtin_ia64_flushrs\",\n \t       build_function_type (void_type_node, void_list_node),\n \t       IA64_BUILTIN_FLUSHRS);\n+  ia64_builtins[IA64_BUILTIN_FLUSHRS] = decl;\n \n #undef def_builtin\n \n@@ -10183,6 +10197,17 @@ ia64_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n   return NULL_RTX;\n }\n \n+/* Return the ia64 builtin for CODE.  */\n+\n+static tree\n+ia64_builtin_decl (unsigned code, bool initialize_p ATTRIBUTE_UNUSED)\n+{\n+  if (code >= IA64_BUILTIN_max)\n+    return error_mark_node;\n+\n+  return ia64_builtins[code];\n+}\n+\n /* For the HP-UX IA64 aggregate parameters are passed stored in the\n    most significant bits of the stack slot.  */\n "}]}