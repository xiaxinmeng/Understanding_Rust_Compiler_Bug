{"sha": "d969caf8295b75420b532a7c9ebe89eb38194f1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk2OWNhZjgyOTViNzU0MjBiNTMyYTdjOWViZTg5ZWIzODE5NGYxYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-11T11:43:24Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-11T11:43:24Z"}, "message": "Define SHIFT_COUNT_TRUNCATED to have a value of 1.\n\nFrom-SVN: r5732", "tree": {"sha": "a1f98e8f57a97ff13679fc0d68831da5aa703070", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1f98e8f57a97ff13679fc0d68831da5aa703070"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d969caf8295b75420b532a7c9ebe89eb38194f1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d969caf8295b75420b532a7c9ebe89eb38194f1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d969caf8295b75420b532a7c9ebe89eb38194f1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d969caf8295b75420b532a7c9ebe89eb38194f1b/comments", "author": null, "committer": null, "parents": [{"sha": "85c0a55631f8cf5fd8e44d506d150f725327b02d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85c0a55631f8cf5fd8e44d506d150f725327b02d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85c0a55631f8cf5fd8e44d506d150f725327b02d"}], "stats": {"total": 63, "additions": 27, "deletions": 36}, "files": [{"sha": "1ee727aaf6e79f8bf91fcabf9fe5ee748db9ccc8", "filename": "gcc/config/a29k/a29k.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d969caf8295b75420b532a7c9ebe89eb38194f1b/gcc%2Fconfig%2Fa29k%2Fa29k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d969caf8295b75420b532a7c9ebe89eb38194f1b/gcc%2Fconfig%2Fa29k%2Fa29k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.h?ref=d969caf8295b75420b532a7c9ebe89eb38194f1b", "patch": "@@ -1276,9 +1276,9 @@ extern char *a29k_function_name;\n    but a CALL with constant address is cheap.  */\n #define NO_FUNCTION_CSE\n \n-/* Define this if shift instructions ignore all but the low-order\n+/* Define this to be nonzero if shift instructions ignore all but the low-order\n    few bits. */\n-#define SHIFT_COUNT_TRUNCATED\n+#define SHIFT_COUNT_TRUNCATED 1\n \n /* Compute the cost of computing a constant rtl expression RTX\n    whose rtx-code is CODE.  The body of this macro is a portion"}, {"sha": "4a6756d998a6df56463145c0816929cbe78ebe19", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d969caf8295b75420b532a7c9ebe89eb38194f1b/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d969caf8295b75420b532a7c9ebe89eb38194f1b/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=d969caf8295b75420b532a7c9ebe89eb38194f1b", "patch": "@@ -1279,9 +1279,9 @@ extern char *current_function_name;\n \n #define NO_FUNCTION_CSE\n \n-/* Define this if shift instructions ignore all but the low-order\n+/* Define this to be nonzero if shift instructions ignore all but the low-order\n    few bits. */\n-#define SHIFT_COUNT_TRUNCATED\n+#define SHIFT_COUNT_TRUNCATED 1\n \n /* Compute the cost of computing a constant rtl expression RTX\n    whose rtx-code is CODE.  The body of this macro is a portion"}, {"sha": "8c9ba725e7521c85666c8533f2912a49287d8d41", "filename": "gcc/config/fx80/fx80.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d969caf8295b75420b532a7c9ebe89eb38194f1b/gcc%2Fconfig%2Ffx80%2Ffx80.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d969caf8295b75420b532a7c9ebe89eb38194f1b/gcc%2Fconfig%2Ffx80%2Ffx80.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffx80%2Ffx80.h?ref=d969caf8295b75420b532a7c9ebe89eb38194f1b", "patch": "@@ -841,10 +841,9 @@ extern enum reg_class regno_reg_class[];\n /* Nonzero if access to memory by bytes is slow and undesirable.  */\n #define SLOW_BYTE_ACCESS 0\n \n-/* Define if shifts truncate the shift count\n-   which implies one can omit a sign-extension or zero-extension\n-   of a shift count.  */\n-#define SHIFT_COUNT_TRUNCATED\n+/* Define this to be nonzero if shift instructions ignore all but the low-order\n+   few bits. */\n+#define SHIFT_COUNT_TRUNCATED 1\n \n /* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n    is done just by pretending it is already truncated.  */"}, {"sha": "d95e8c09207567be594b13cec55237f6a942c817", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d969caf8295b75420b532a7c9ebe89eb38194f1b/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d969caf8295b75420b532a7c9ebe89eb38194f1b/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=d969caf8295b75420b532a7c9ebe89eb38194f1b", "patch": "@@ -1075,10 +1075,9 @@ extern struct rtx_def *legitimize_address ();\n \n #define STORE_FLAG_VALUE 1\n \n-/* Define if shifts truncate the shift count\n-   which implies one can omit a sign-extension or zero-extension\n-   of a shift count.  */\n-#define SHIFT_COUNT_TRUNCATED\n+/* Define this to be nonzero if shift instructions ignore all but the low-order\n+   few bits. */\n+#define SHIFT_COUNT_TRUNCATED 1\n \n /* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n    is done just by pretending it is already truncated.  */"}, {"sha": "80314f45b8bbbe5d4c0d326d6e6fe230ce60546e", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d969caf8295b75420b532a7c9ebe89eb38194f1b/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d969caf8295b75420b532a7c9ebe89eb38194f1b/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=d969caf8295b75420b532a7c9ebe89eb38194f1b", "patch": "@@ -2389,13 +2389,9 @@ while (0)\n /* Define this if zero-extension is slow (more than one real instruction).  */\n #define SLOW_ZERO_EXTEND\n \n-/* Define if shifts truncate the shift count\n-   which implies one can omit a sign-extension or zero-extension\n-   of a shift count.\n-\n-   Only 5 bits are used in SLLV and SRLV */\n-\n-#define SHIFT_COUNT_TRUNCATED\n+/* Define this to be nonzero if shift instructions ignore all but the low-order\n+   few bits. */\n+#define SHIFT_COUNT_TRUNCATED 1\n \n /* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n    is done just by pretending it is already truncated.  */"}, {"sha": "74aca47798473d988c0b908a22cad9d5cc6aa643", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d969caf8295b75420b532a7c9ebe89eb38194f1b/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d969caf8295b75420b532a7c9ebe89eb38194f1b/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=d969caf8295b75420b532a7c9ebe89eb38194f1b", "patch": "@@ -1427,9 +1427,9 @@ while (0)\n    but a CALL with constant address is cheap.  */\n #define NO_FUNCTION_CSE\n \n-/* Define this if shift instructions ignore all but the low-order\n+/* Define this to be nonzero if shift instructions ignore all but the low-order\n    few bits. */\n-#define SHIFT_COUNT_TRUNCATED\n+#define SHIFT_COUNT_TRUNCATED 1\n \n /* Use atexit for static constructors/destructors, instead of defining\n    our own exit function.  */"}, {"sha": "e9f9bbd4d80c9fcdd248f91c4ca8c983a4b3c9f5", "filename": "gcc/config/pyr/pyr.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d969caf8295b75420b532a7c9ebe89eb38194f1b/gcc%2Fconfig%2Fpyr%2Fpyr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d969caf8295b75420b532a7c9ebe89eb38194f1b/gcc%2Fconfig%2Fpyr%2Fpyr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpyr%2Fpyr.h?ref=d969caf8295b75420b532a7c9ebe89eb38194f1b", "patch": "@@ -1029,10 +1029,9 @@ extern int current_function_calls_alloca;\n /* 1 if byte access requires more than one instruction */\n #define SLOW_BYTE_ACCESS 0\n \n-/* Define if shifts truncate the shift count\n-   which implies one can omit a sign-extension or zero-extension\n-   of a shift count.  */\n-#define SHIFT_COUNT_TRUNCATED\n+/* Define this to be nonzero if shift instructions ignore all but the low-order\n+   few bits. */\n+#define SHIFT_COUNT_TRUNCATED 1\n \n /* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n    is done just by pretending it is already truncated.  */"}, {"sha": "deed036450e210236f55bff362ef590a3793b153", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d969caf8295b75420b532a7c9ebe89eb38194f1b/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d969caf8295b75420b532a7c9ebe89eb38194f1b/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=d969caf8295b75420b532a7c9ebe89eb38194f1b", "patch": "@@ -1341,9 +1341,9 @@ struct rs6000_args {int words, fregno, nargs_prototype; };\n    but a CALL with constant address is cheap.  */\n #define NO_FUNCTION_CSE\n \n-/* Define this if shift instructions ignore all but the low-order\n+/* Define this to be nonzero if shift instructions ignore all but the low-order\n    few bits. */\n-#define SHIFT_COUNT_TRUNCATED\n+#define SHIFT_COUNT_TRUNCATED 1\n \n /* Use atexit for static constructors/destructors, instead of defining\n    our own exit function.  */"}, {"sha": "a60f80b563910f753079afaa10e11482bdf1767f", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d969caf8295b75420b532a7c9ebe89eb38194f1b/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d969caf8295b75420b532a7c9ebe89eb38194f1b/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=d969caf8295b75420b532a7c9ebe89eb38194f1b", "patch": "@@ -1383,10 +1383,9 @@ extern struct rtx_def *legitimize_pic_address ();\n /* When a prototype says `char' or `short', really pass an `int'.  */\n #define PROMOTE_PROTOTYPES\n \n-/* Define if shifts truncate the shift count\n-   which implies one can omit a sign-extension or zero-extension\n-   of a shift count.  */\n-#define SHIFT_COUNT_TRUNCATED\n+/* Define this to be nonzero if shift instructions ignore all but the low-order\n+   few bits. */\n+#define SHIFT_COUNT_TRUNCATED 1\n \n /* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n    is done just by pretending it is already truncated.  */"}, {"sha": "607c98824a2c3282ac89b8c5ebd8c6a0066ccb6e", "filename": "gcc/config/tahoe/tahoe.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d969caf8295b75420b532a7c9ebe89eb38194f1b/gcc%2Fconfig%2Ftahoe%2Ftahoe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d969caf8295b75420b532a7c9ebe89eb38194f1b/gcc%2Fconfig%2Ftahoe%2Ftahoe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftahoe%2Ftahoe.h?ref=d969caf8295b75420b532a7c9ebe89eb38194f1b", "patch": "@@ -621,7 +621,7 @@ enum reg_class {NO_REGS,GENERAL_REGS,FPP_REG,ALL_REGS,LIM_REG_CLASSES};\n /* any bits higher than the low 4 are ignored in the shift count */\n /* so don't bother zero extending or sign extending them         */\n \n-#define SHIFT_COUNT_TRUNCATED\n+#define SHIFT_COUNT_TRUNCATED 1\n \n /* we don't need to officially convert from one fixed type to another */\n /* in order to use it as that type. We can just assume it's the same  */"}, {"sha": "a48e052e6a8ca58d82236ca766159ff9de99978f", "filename": "gcc/config/we32k/we32k.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d969caf8295b75420b532a7c9ebe89eb38194f1b/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d969caf8295b75420b532a7c9ebe89eb38194f1b/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.h?ref=d969caf8295b75420b532a7c9ebe89eb38194f1b", "patch": "@@ -647,10 +647,9 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n /* Nonzero if access to memory by bytes is slow and undesirable.  */\n #define SLOW_BYTE_ACCESS 0\n \n-/* Define if shifts truncate the shift count\n-   which implies one can omit a sign-extension or zero-extension\n-   of a shift count.  */\n-#define SHIFT_COUNT_TRUNCATED\n+/* Define this to be nonzero if shift instructions ignore all but the low-order\n+   few bits. */\n+#define SHIFT_COUNT_TRUNCATED 1\n \n /* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n    is done just by pretending it is already truncated.  */"}]}