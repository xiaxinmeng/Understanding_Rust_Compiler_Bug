{"sha": "e23541755f8ded87da6b3056562ba9736d0126ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIzNTQxNzU1ZjhkZWQ4N2RhNmIzMDU2NTYyYmE5NzM2ZDAxMjZlZQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-02-18T16:04:10Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-02-18T16:04:10Z"}, "message": "re PR fortran/47750 (testsuite/gfortran.dg: dg-warning and dg-error should be distinguished)\n\n2011-02-15  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/47750\n        * lib/gfortran.exp (gfortran_init): Set gcc_error_prefix and\n        gcc_warning_prefix.\n        * lib/gfortran-dg.exp (gfortran-dg-test): Update regexp for\n        normalizing the error/warning output.\n        * gfortran.dg/Wall.f90: Update dg-error/warning.\n        * gfortran.dg/argument_checking_15.f90: Update dg-error/warning.\n        * gfortran.dg/argument_checking_3.f90: Update dg-error/warning.\n        * gfortran.dg/argument_checking_6.f90: Update dg-error/warning.\n        * gfortran.dg/bounds_temporaries_1.f90: Update dg-error/warning.\n        * gfortran.dg/class_30.f90: Update dg-error/warning.\n        * gfortran.dg/continuation_1.f90: Update dg-error/warning.\n        * gfortran.dg/continuation_9.f90: Update dg-error/warning.\n        * gfortran.dg/do_check_5.f90: Update dg-error/warning.\n        * gfortran.dg/entry_17.f90: Update dg-error/warning.\n        * gfortran.dg/entry_19.f90: Update dg-error/warning.\n        * gfortran.dg/fmt_error.f90: Update dg-error/warning.\n        * gfortran.dg/fmt_read_2.f90: Update dg-error/warning.\n        * gfortran.dg/g77/12632.f: Update dg-error/warning.\n        * gfortran.dg/g77/970625-2.f: Update dg-error/warning.\n        * gfortran.dg/g77/980615-0.f: Update dg-error/warning.\n        * gfortran.dg/generic_actual_arg.f90: Update dg-error/warning.\n        * gfortran.dg/global_references_1.f90: Update dg-error/warning.\n        * gfortran.dg/goto_8.f90: Update dg-error/warning.\n        * gfortran.dg/initialization_1.f90: Update dg-error/warning.\n        * gfortran.dg/io_constraints_1.f90: Update dg-error/warning.\n        * gfortran.dg/io_constraints_2.f90: Update dg-error/warning.\n        * gfortran.dg/io_constraints_3.f90: Update dg-error/warning.\n        * gfortran.dg/iostat_3.f90: Update dg-error/warning.\n        * gfortran.dg/public_private_module.f90: Update\n        * dg-error/warning.\n        * gfortran.dg/volatile3.f90: Update dg-error/warning.\n        * gfortran.dg/warning-directive-2.F90: Update dg-error/warning.\n        * gfortran.dg/warnings_are_errors_1.f: Update dg-error/warning.\n        * gfortran.dg/whole_file_1.f90: Update dg-error/warning.\n        * gfortran.dg/whole_file_2.f90: Update dg-error/warning.\n        * gfortran.dg/whole_file_3.f90: Update dg-error/warning.\n\nFrom-SVN: r170273", "tree": {"sha": "1641647b08a6c6cc2238fd27a587000b13dba8e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1641647b08a6c6cc2238fd27a587000b13dba8e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e23541755f8ded87da6b3056562ba9736d0126ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e23541755f8ded87da6b3056562ba9736d0126ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e23541755f8ded87da6b3056562ba9736d0126ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e23541755f8ded87da6b3056562ba9736d0126ee/comments", "author": null, "committer": null, "parents": [{"sha": "12d80acc4898f08ea2abbfd8c2be41a52c8d98bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12d80acc4898f08ea2abbfd8c2be41a52c8d98bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12d80acc4898f08ea2abbfd8c2be41a52c8d98bc"}], "stats": {"total": 165, "additions": 110, "deletions": 55}, "files": [{"sha": "1076e32262a56db232255a3343718fa9d95be990", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -1,3 +1,42 @@\n+2011-02-15  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/47750\n+\t* lib/gfortran.exp (gfortran_init): Set gcc_error_prefix and\n+\tgcc_warning_prefix.\n+\t* lib/gfortran-dg.exp (gfortran-dg-test): Update regexp for\n+\tnormalizing the error/warning output.\n+\t* gfortran.dg/Wall.f90: Update dg-error/warning.\n+\t* gfortran.dg/argument_checking_15.f90: Update dg-error/warning.\n+\t* gfortran.dg/argument_checking_3.f90: Update dg-error/warning.\n+\t* gfortran.dg/argument_checking_6.f90: Update dg-error/warning.\n+\t* gfortran.dg/bounds_temporaries_1.f90: Update dg-error/warning.\n+\t* gfortran.dg/class_30.f90: Update dg-error/warning.\n+\t* gfortran.dg/continuation_1.f90: Update dg-error/warning.\n+\t* gfortran.dg/continuation_9.f90: Update dg-error/warning.\n+\t* gfortran.dg/do_check_5.f90: Update dg-error/warning.\n+\t* gfortran.dg/entry_17.f90: Update dg-error/warning.\n+\t* gfortran.dg/entry_19.f90: Update dg-error/warning.\n+\t* gfortran.dg/fmt_error.f90: Update dg-error/warning.\n+\t* gfortran.dg/fmt_read_2.f90: Update dg-error/warning.\n+\t* gfortran.dg/g77/12632.f: Update dg-error/warning.\n+\t* gfortran.dg/g77/970625-2.f: Update dg-error/warning.\n+\t* gfortran.dg/g77/980615-0.f: Update dg-error/warning.\n+\t* gfortran.dg/generic_actual_arg.f90: Update dg-error/warning.\n+\t* gfortran.dg/global_references_1.f90: Update dg-error/warning.\n+\t* gfortran.dg/goto_8.f90: Update dg-error/warning.\n+\t* gfortran.dg/initialization_1.f90: Update dg-error/warning.\n+\t* gfortran.dg/io_constraints_1.f90: Update dg-error/warning.\n+\t* gfortran.dg/io_constraints_2.f90: Update dg-error/warning.\n+\t* gfortran.dg/io_constraints_3.f90: Update dg-error/warning.\n+\t* gfortran.dg/iostat_3.f90: Update dg-error/warning.\n+\t* gfortran.dg/public_private_module.f90: Update dg-error/warning.\n+\t* gfortran.dg/volatile3.f90: Update dg-error/warning.\n+\t* gfortran.dg/warning-directive-2.F90: Update dg-error/warning.\n+\t* gfortran.dg/warnings_are_errors_1.f: Update dg-error/warning.\n+\t* gfortran.dg/whole_file_1.f90: Update dg-error/warning.\n+\t* gfortran.dg/whole_file_2.f90: Update dg-error/warning.\n+\t* gfortran.dg/whole_file_3.f90: Update dg-error/warning.\n+\n 2011-02-18  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/47768\n@@ -15,7 +54,7 @@\n \n 2011-02-18  Dodji Seketeli  <dodji@redhat.com>\n \n-    \tPR c++/47208\n+\tPR c++/47208\n \t* g++.dg/cpp0x/auto21.C: New test.\n \n 2011-02-17  Iain Sandoe  <iains@gcc.gnu.org>"}, {"sha": "64c95a9c094613d1aee7af38d492b2c709464bf5", "filename": "gcc/testsuite/gfortran.dg/Wall.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2FWall.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2FWall.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2FWall.f90?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -5,7 +5,7 @@ program main\n   character (len=40) &\n   c\n   c = \"Hello, &\n-         world!\" ! { dg-warning \"Warning: Missing '&' in continued character constant\" }\n+         world!\" ! { dg-warning \"Missing '&' in continued character constant\" }\n   if (c.ne.&\n                                    \"Hello, world!\")&\n                                call abort();end program main"}, {"sha": "5d3c9f654884fd83abecc380a29a2f60d098f9fe", "filename": "gcc/testsuite/gfortran.dg/argument_checking_15.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_15.f90?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -45,8 +45,8 @@ subroutine test()\n implicit none\n character(len=5), pointer :: c\n character(len=5) :: str(5)\n-call foo(c) ! { dg-error \"Character length mismatch\" }\n-call bar(str) ! { dg-error \"Character length mismatch\" }\n+call foo(c) ! { dg-warning \"Character length mismatch\" }\n+call bar(str) ! { dg-warning \"Character length mismatch\" }\n contains\n   subroutine foo(a)\n     character(len=3), pointer :: a"}, {"sha": "5f451bf6dc1eb9114a9a2a921dad80ff3450e3d1", "filename": "gcc/testsuite/gfortran.dg/argument_checking_3.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_3.f90?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -22,9 +22,9 @@ end subroutine arr\n   len2 = '12'\n   len4 = '1234'\n \n-  call foo(len2) ! { dg-warning \"Rank mismatch in argument\" }\n-  call foo(\"ca\") ! { dg-warning \"Rank mismatch in argument\" }\n-  call bar(\"ca\") ! { dg-warning \"Rank mismatch in argument\" }\n+  call foo(len2) ! { dg-error \"Rank mismatch in argument\" }\n+  call foo(\"ca\") ! { dg-error \"Rank mismatch in argument\" }\n+  call bar(\"ca\") ! { dg-error \"Rank mismatch in argument\" }\n   call foobar(len2) ! { dg-warning \"contains too few elements\" }\n   call foobar(len4)\n   call foobar(\"bar\") ! { dg-warning \"contains too few elements\" }"}, {"sha": "e2d26923d77af97bf9a982c99488f2a63f386ae3", "filename": "gcc/testsuite/gfortran.dg/argument_checking_6.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_6.f90?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -14,7 +14,7 @@ program tfe\n call sub(x(:))\n call sub(y(:))\n call sub(z(:))\n-call sub(w(:)) ! { dg-error \"too few elements\" }\n+call sub(w(:)) ! { dg-warning \"too few elements\" }\n \n contains\n   subroutine sub(a)"}, {"sha": "44b5a7dbaff88d9ec04df300e5e2d2618805e9f5", "filename": "gcc/testsuite/gfortran.dg/bounds_temporaries_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_temporaries_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_temporaries_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_temporaries_1.f90?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -22,7 +22,7 @@ end subroutine gfcbug34\n ! This is PR25669\n subroutine foo (a)\n   real a(*)\n-  call bar (a, LBOUND(a),2) ! { dg-warning \"Rank mismatch in argument\" }\n+  call bar (a, LBOUND(a),2) ! { dg-error \"Rank mismatch in argument\" }\n end subroutine foo\n subroutine bar (b, i, j)\n   real b(i:j)"}, {"sha": "f2cedcb976340accbe7bbd8e6e81143e605d8e88", "filename": "gcc/testsuite/gfortran.dg/class_30.f90", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_30.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_30.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_30.f90?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -14,6 +14,8 @@\n end type t2\n \n type, bind(C):: t3\n-  class(t), pointer :: y ! { dg-error \"may not be C interoperable|Polymorphic component y at .1. in SEQUENCE or BIND\" }\n+  class(t), pointer :: y\n+  ! { dg-warning \"may not be C interoperable\" \"\" { target *-*-* } 17 }\n+  ! { dg-error \"Polymorphic component y at .1. in SEQUENCE or BIND\" \"\" { target *-*-* } 17 }\n end type t3\n end"}, {"sha": "1036db9cb1ecac53b08fd7b2f9cb56f57d1eff9d", "filename": "gcc/testsuite/gfortran.dg/continuation_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fcontinuation_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fcontinuation_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcontinuation_1.f90?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -8,7 +8,7 @@ program main\n   character (len=40) &\n   c\n   c = \"Hello, &\n-         world!\" ! { dg-warning \"Warning: Missing '&' in continued character constant\" }\n+         world!\" ! { dg-warning \"Missing '&' in continued character constant\" }\n   if (c.ne.&\n                                    \"Hello, world!\")&\n                                call abort();end program main"}, {"sha": "04a7c331e2e5e0839c06c52d9f893665f6a97baf", "filename": "gcc/testsuite/gfortran.dg/continuation_9.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fcontinuation_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fcontinuation_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcontinuation_9.f90?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -4,6 +4,6 @@\n &\n  &\n end\n-! { dg-error \"not allowed by itself in line 3\" \"\" {target \"*-*-*\"} 0 }\n-! { dg-error \"not allowed by itself in line 4\" \"\" {target \"*-*-*\"} 0 }\n-! { dg-error \"not allowed by itself in line 5\" \"\" {target \"*-*-*\"} 0 }\n+! { dg-warning \"not allowed by itself in line 3\" \"\" {target \"*-*-*\"} 0 }\n+! { dg-warning \"not allowed by itself in line 4\" \"\" {target \"*-*-*\"} 0 }\n+! { dg-warning \"not allowed by itself in line 5\" \"\" {target \"*-*-*\"} 0 }"}, {"sha": "3df7b14f0ebfd604411a5e8c02960acb3fd678ae", "filename": "gcc/testsuite/gfortran.dg/do_check_5.f90", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_5.f90?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -27,6 +27,8 @@\n do r = 1, 2, -1 ! { dg-warning \"must be integer|executed zero times\" }\n end do\n \n-do r = 1, 2, 0 ! { dg-error \"must be integer|cannot be zero\" }\n+do r = 1, 2, 0\n end do\n+! { dg-warning \"must be integer\" \"loop var\" { target *-*-* } 30 }\n+! { dg-error \"cannot be zero\" \"loop step\" { target *-*-* } 30 }\n end"}, {"sha": "5671cfe5029af807a483fd4c940e7147a34100ce", "filename": "gcc/testsuite/gfortran.dg/entry_17.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_17.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_17.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_17.f90?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -26,7 +26,7 @@ function test3() ! { dg-warning \"Obsolescent feature\" }\n   bar3 = \"\"\n end function test3\n \n-function test4(n) ! { dg-error \"returning variables of different string lengths\" }\n+function test4(n) ! { dg-warning \"returning variables of different string lengths\" }\n   integer  :: n\n   character(n) :: test4\n   character(*) :: bar4 ! { dg-warning \"Obsolescent feature\" }\n@@ -36,7 +36,7 @@ function test4(n) ! { dg-error \"returning variables of different string lengths\"\n   bar4 = \"\"\n end function test4\n \n-function test5() ! { dg-error \"returning variables of different string lengths\" }\n+function test5() ! { dg-warning \"returning variables of different string lengths\" }\n   character(1) :: test5\n   character(2) :: bar5\n   test5 = \"\""}, {"sha": "87b52ad67c1045af630f62f4c476be44366c15bd", "filename": "gcc/testsuite/gfortran.dg/entry_19.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_19.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_19.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_19.f90?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -5,5 +5,5 @@\n ! Entry is obsolete in Fortran 2008\n !\n subroutine foo()\n-entry bar() ! { dg-error \"Fortran 2008 obsolescent feature: ENTRY\" }\n+entry bar() ! { dg-warning \"Fortran 2008 obsolescent feature: ENTRY\" }\n end "}, {"sha": "7dc2ab6a5376afb075b3c88b22f1203218a23a75", "filename": "gcc/testsuite/gfortran.dg/fmt_error.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_error.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_error.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_error.f90?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -1,4 +1,4 @@\n ! { dg-do compile }\n ! PR32545 Give compile error not warning for wrong edit format statements.\n-read (5,'(i0)') i ! { dg-error \"Error: Positive width required in format\" }\n+read (5,'(i0)') i ! { dg-error \"Positive width required in format\" }\n end"}, {"sha": "316f737b621eb5797aff6fa313dd3242719b469a", "filename": "gcc/testsuite/gfortran.dg/fmt_read_2.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_read_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_read_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_read_2.f90?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -4,7 +4,7 @@\n       integer :: r\n       real :: a\n       write (*,'(i0)') r\n-      read (*,'(i0)') r ! { dg-warning \"Positive width required\" }\n-      read (*,'(f0.2)') a ! { dg-warning \"Positive width required\" }\n+      read (*,'(i0)') r ! { dg-error \"Positive width required\" }\n+      read (*,'(f0.2)') a ! { dg-error \"Positive width required\" }\n       print *, r,a\n       END"}, {"sha": "398333926edb012f046bf9a4683289520365f5c5", "filename": "gcc/testsuite/gfortran.dg/g77/12632.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F12632.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F12632.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F12632.f?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -1,6 +1,6 @@\n C { dg-do compile }\n C { dg-options \"-fbounds-check\" }\n        INTEGER I(1)\n-       I(2) = 0  ! { dg-error \"out of bounds\" \"out of bounds\" }\n+       I(2) = 0  ! { dg-warning \"out of bounds\" \"out of bounds\" }\n        END\n "}, {"sha": "7f8a464480823aa994bce410b6a1461ce7c403b6", "filename": "gcc/testsuite/gfortran.dg/g77/970625-2.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F970625-2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F970625-2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F970625-2.f?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -40,7 +40,7 @@ PROGRAM SUBROUTINE\n          PROGRAM = THEN - IF\n          ELSE IF = THEN .GT. IF\n          IF (THEN.GT.REAL) THEN\n-            CALL FUNCTION PROGRAM (ELSE IF, GO TO PROGRAM, THEN) ! { dg-warning \"Type mismatch in argument\" }\n+            CALL FUNCTION PROGRAM (ELSE IF, GO TO PROGRAM, THEN) ! { dg-error \"Type mismatch in argument\" }\n          ELSE IF (ELSE IF) THEN\n             REAL = THEN + END DO\n          END IF"}, {"sha": "5107f4f796d08cbf6c585a91b771aec7722b0795", "filename": "gcc/testsuite/gfortran.dg/g77/980615-0.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980615-0.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980615-0.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980615-0.f?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -8,5 +8,5 @@\n       CaLL foo(W)\n       END\n       SUBROUTINE foo(W)\n-      yy(I)=A(I)Q(X) ! { dg-error \"Error: Unclassifiable statement\" \"\" }\n+      yy(I)=A(I)Q(X) ! { dg-error \"Unclassifiable statement\" \"\" }\n c { dg-error \"end of file\" \"end of file\" { target *-*-* } 0 }"}, {"sha": "17c50627f982278b46b2ea13e78aa92e946ba5aa", "filename": "gcc/testsuite/gfortran.dg/generic_actual_arg.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_actual_arg.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_actual_arg.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_actual_arg.f90?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -37,7 +37,7 @@ END MODULE TEST2\n USE TEST2\n CALL F(CALCULATION)  ! { dg-error \"GENERIC procedure\" } \n \n-CALL F(CALCULATION2) ! OK because there is a same name specific, but: ! { dg-warning \"More actual than formal arguments\" }\n+CALL F(CALCULATION2) ! OK because there is a same name specific, but: ! { dg-error \"More actual than formal arguments\" }\n END\n \n SUBROUTINE F()"}, {"sha": "7e0a5bd0a34d03b3f84e5afe449b4c218351fade", "filename": "gcc/testsuite/gfortran.dg/global_references_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fglobal_references_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fglobal_references_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fglobal_references_1.f90?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -32,7 +32,7 @@ function h(x)       ! { dg-error \"is already being used as a FUNCTION\" }\n end function h\n \n SUBROUTINE TT()\n-  CHARACTER(LEN=10), EXTERNAL :: j ! { dg-warning \"Return type mismatch\" }\n+  CHARACTER(LEN=10), EXTERNAL :: j ! { dg-error \"Return type mismatch\" }\n   CHARACTER(LEN=10)          :: T\n ! PR20881=========================================================== \n ! Error only appears once but testsuite associates with both lines."}, {"sha": "744b5f3c87795acde10a3765789425efef68e601", "filename": "gcc/testsuite/gfortran.dg/goto_8.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoto_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoto_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoto_8.f90?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -23,9 +23,9 @@\n 88 continue\n \n ! 3rd example: jumping into BLOCK (invalid)\n-goto 99        ! { dg-error \"is not in the same block\" }\n+goto 99        ! { dg-warning \"is not in the same block\" }\n block\n-  99 continue  ! { dg-error \"is not in the same block\" }\n+  99 continue  ! { dg-warning \"is not in the same block\" }\n end block\n \n end"}, {"sha": "2fb014ecedd87fb96721537a45a344b10dd1eaea", "filename": "gcc/testsuite/gfortran.dg/initialization_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_1.f90?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -24,7 +24,7 @@ subroutine foo(ch1, x, y)\n     real :: z(2, 2)\n \n ! However, this gives a warning because it is an initialization expression.\n-    integer :: l1 = len (ch1)     ! { dg-warning \"Assumed or deferred character length variable\" }\n+    integer :: l1 = len (ch1)     ! { dg-error \"Assumed or deferred character length variable\" }\n \n ! These are warnings because they are gfortran extensions.\n     integer :: m3 = size (x, 1)   ! { dg-error \"Assumed size array\" }"}, {"sha": "eb8ab8d5349a10603ebb0a851a0e22ee79f70119", "filename": "gcc/testsuite/gfortran.dg/io_constraints_1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fio_constraints_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fio_constraints_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fio_constraints_1.f90?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -33,7 +33,7 @@ end module global\n \n ! Appending to a USE associated namelist is an extension.\n \n- NAMELIST /NL/ a,b                              ! { dg-warning \"already is USE associated\" }\n+ NAMELIST /NL/ a,b                              ! { dg-error \"already is USE associated\" }\n \n  a=1 ; b=2\n \n@@ -54,7 +54,7 @@ end module global\n \n ! R912\n !Was correctly picked up before patch.\n- write(6, NML=NL, iostat = ierr)                ! { dg-warning \"requires default INTEGER\" }\n+ write(6, NML=NL, iostat = ierr)                ! { dg-error \"requires default INTEGER\" }\n \n ! Constraints\n !Was correctly picked up before patch."}, {"sha": "42aba66a8d521d092b72526270d23ba95862dadc", "filename": "gcc/testsuite/gfortran.dg/io_constraints_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fio_constraints_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fio_constraints_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fio_constraints_2.f90?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -30,7 +30,7 @@ end module global\n \n ! Appending to a USE associated namelist is an extension.\n \n- NAMELIST /NL/ a,b                              ! { dg-warning \"already is USE associated\" }\n+ NAMELIST /NL/ a,b                              ! { dg-error \"already is USE associated\" }\n \n  a=1 ; b=2\n "}, {"sha": "7622a24861695f3ed194918af9338161a5f19178", "filename": "gcc/testsuite/gfortran.dg/io_constraints_3.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fio_constraints_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fio_constraints_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fio_constraints_3.f90?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -44,8 +44,8 @@\n   open(10, iostat=u,position=\"append\")\n   open(10, iostat=u,position=foo) ! { dg-warning \"POSITION specifier in OPEN statement\" }\n \n-  open(10, iostat=u,recl=\"ee\") ! { dg-warning \"must be of type INTEGER\" }\n-  open(10, iostat=u,recl=0.4) ! { dg-warning \"must be of type INTEGER\" }\n+  open(10, iostat=u,recl=\"ee\") ! { dg-error \"must be of type INTEGER\" }\n+  open(10, iostat=u,recl=0.4) ! { dg-error \"must be of type INTEGER\" }\n   open(10, iostat=u,recl=zero) ! { dg-warning \"must be positive\" }\n   open(10, iostat=u,recl=mone) ! { dg-warning \"must be positive\" }\n \n@@ -105,8 +105,8 @@\n   open(10, err=99,position=\"append\")\n   open(10, err=99,position=foo) ! { dg-warning \"POSITION specifier in OPEN statement\" }\n \n-  open(10, err=99,recl=\"ee\") ! { dg-warning \"must be of type INTEGER\" }\n-  open(10, err=99,recl=0.4) ! { dg-warning \"must be of type INTEGER\" }\n+  open(10, err=99,recl=\"ee\") ! { dg-error \"must be of type INTEGER\" }\n+  open(10, err=99,recl=0.4) ! { dg-error \"must be of type INTEGER\" }\n   open(10, err=99,recl=zero) ! { dg-warning \"must be positive\" }\n   open(10, err=99,recl=mone) ! { dg-warning \"must be positive\" }\n "}, {"sha": "23492f2af654b4e2561783b8d7a668f2eb1c7606", "filename": "gcc/testsuite/gfortran.dg/iostat_3.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fiostat_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fiostat_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fiostat_3.f90?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -4,6 +4,6 @@\n   real :: u\n   integer(kind=8) :: i\n   open (10,status=\"scratch\")\n-  read (10,*,iostat=i) u ! { dg-warning \"Fortran 95 requires default INTEGER in IOSTAT tag\" }\n-  close (10,iostat=i) ! { dg-warning \"Fortran 95 requires default INTEGER in IOSTAT tag\" }\n+  read (10,*,iostat=i) u ! { dg-error \"Fortran 95 requires default INTEGER in IOSTAT tag\" }\n+  close (10,iostat=i) ! { dg-error \"Fortran 95 requires default INTEGER in IOSTAT tag\" }\n   end"}, {"sha": "48e78b60cfa7ffa304a5e63c186196d0c62fb6d6", "filename": "gcc/testsuite/gfortran.dg/public_private_module.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fpublic_private_module.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fpublic_private_module.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpublic_private_module.f90?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -8,12 +8,12 @@ end module a\n module b\n   use a\n   implicit none\n-  public a  ! { dg-warning \"attribute applied to\" }\n+  public a  ! { dg-error \"attribute applied to\" }\n end module b\n \n module d\n   use a\n   implicit none\n-  private a  ! { dg-warning \"attribute applied to\" }\n+  private a  ! { dg-error \"attribute applied to\" }\n end module d\n ! { dg-final { cleanup-modules \"a\" } }"}, {"sha": "f9f720262fbe5406d50fe6bee9870d890b8dc96d", "filename": "gcc/testsuite/gfortran.dg/volatile3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fvolatile3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fvolatile3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvolatile3.f90?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -11,7 +11,7 @@ program volatile_test\n   real :: l,m\n   real,volatile :: n\n   real, volatile,volatile :: r = 3. ! { dg-error \"Duplicate VOLATILE attribute\" }\n-  volatile :: l,n ! { dg-error \"Duplicate VOLATILE attribute\" }\n+  volatile :: l,n ! { dg-warning \"Duplicate VOLATILE attribute\" }\n   volatile ! { dg-error \"Syntax error in VOLATILE statement\" }\n   volatile :: volatile_test ! { dg-error \"PROGRAM attribute conflicts with VOLATILE attribute\" }\n   l = 4.0"}, {"sha": "7e4418530ef8b7c58b56e3243dc35602d7115227", "filename": "gcc/testsuite/gfortran.dg/warning-directive-2.F90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarning-directive-2.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarning-directive-2.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarning-directive-2.F90?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do preprocess }\n ! { dg-options \"-std=f95 -fdiagnostics-show-option -Werror=cpp\" }\n-! { dg-warning \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } \n+! { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } \n #warning \"Printed\"\n ! { dg-error \"\\\"Printed\\\" .-Werror=cpp.\" \"\" { target *-*-* } 4 }"}, {"sha": "56465a9c065a6f059b588605a5c033976da06cee", "filename": "gcc/testsuite/gfortran.dg/warnings_are_errors_1.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarnings_are_errors_1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarnings_are_errors_1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarnings_are_errors_1.f?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -12,7 +12,7 @@ program warnings_are_errors_1\n !\n 34 5   i=0 \n ! gfc_notify_std(GFC_STD_F95_DEL):\n-       do r1 = 1, 2 ! { dg-error \"Deleted feature: Loop variable\" }\n+       do r1 = 1, 2 ! { dg-warning \"Deleted feature: Loop variable\" }\n          i = i+1\n        end do\n        call foo j bar"}, {"sha": "598c9d3193ade689cf497ecaf471ae35965d44f0", "filename": "gcc/testsuite/gfortran.dg/whole_file_1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_1.f90?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -19,7 +19,7 @@ subroutine b\n     integer :: u1\n   end type\n   type (u) :: q\n-  call a(q)  ! { dg-error \"Type mismatch\" }\n+  call a(q)  ! { dg-warning \"Type mismatch\" }\n   print *, q%u1\n end subroutine\n \n@@ -36,7 +36,7 @@ subroutine d\n     integer :: u1\n   end type\n   type (u) :: q\n-  call c(q)  ! { dg-error \"Type mismatch\" }\n+  call c(q)  ! { dg-warning \"Type mismatch\" }\n   print *, q%u1\n end subroutine\n "}, {"sha": "4e33c06b668e5f879bc80fe0e2669d7ec4d3fd40", "filename": "gcc/testsuite/gfortran.dg/whole_file_2.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_2.f90?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -14,8 +14,8 @@ function a(b)\n program gg\n real :: h\n character (5) :: chr = 'hello'\n-h = a(); ! { dg-error \"Missing actual argument\" }\n-call test ([chr]) ! { dg-error \"Rank mismatch\" }\n+h = a(); ! { dg-warning \"Missing actual argument\" }\n+call test ([chr]) ! { dg-warning \"Rank mismatch\" }\n end program gg\n \n subroutine test (a)"}, {"sha": "242280ccf53dbaa7a1576ae0db6175db8bf51db8", "filename": "gcc/testsuite/gfortran.dg/whole_file_3.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_3.f90?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -14,8 +14,8 @@ SUBROUTINE PHLOAD (READER,*)\n \n       program test\n       EXTERNAL R\n-      call PHLOAD (R, 1) ! { dg-error \"Missing alternate return spec\" }\n-      CALL PHLOAD (R, 2) ! { dg-error \"Missing alternate return spec\" }\n+      call PHLOAD (R, 1) ! { dg-warning \"Missing alternate return spec\" }\n+      CALL PHLOAD (R, 2) ! { dg-warning \"Missing alternate return spec\" }\n       CALL PHLOAD (R, *999) ! This one is OK\n  999  continue\n       END program test"}, {"sha": "0fd96b395ce6629fbb16bf29c7b2cafb5b2978e8", "filename": "gcc/testsuite/lib/gfortran-dg.exp", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Flib%2Fgfortran-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Flib%2Fgfortran-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgfortran-dg.exp?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -52,23 +52,30 @@ proc gfortran-dg-test { prog do_what extra_tool_flags } {\n     # Where [locus] is either [line] or [line].[columns] .\n     #\n     # We collapse these to look like:\n-    #  [name]:[line]: Error: Some error at (1) and (2)\n+    #  [name]:[line]:[column]: Error: Some error at (1) and (2)\n     # or\n-    #  [name]:[line]: Error: Some error at (1) and (2)\n-    #  [name]:[line2]: Error: Some error at (1) and (2)\n+    #  [name]:[line]:[column]: Error: Some error at (1) and (2)\n+    #  [name]:[line2]:[column]: Error: Some error at (1) and (2)\n     # We proceed in two steps: first we deal with the form with two\n     # different locus lines, then with the form with only one locus line.\n     #\n     # Note that these regexps only make sense in the combinations used below.\n     # Note also that is imperative that we first deal with the form with\n     # two loci.\n-    set locus_regexp \"(\\[^\\n\\]*):(\\[0-9\\]*)\\[^\\n\\]*:\\n\\n\\[^\\n\\]*\\n\\[^\\n\\]*\\n\"\n+    set locus_regexp \"(\\[^\\n\\]*):(\\[0-9\\]+)\\[\\.:\\](\\[0-9\\]*)(-\\[0-9\\]*)?:\\n\\n\\[^\\n\\]*\\n\\[^\\n\\]*\\n\"\n     set diag_regexp \"(\\[^\\n\\]*)\\n\"\n \n+    # Add column number if none exists\n+    set colnum_regexp \"(Warning: |Error: )?(\\[^\\n\\]*):(\\[0-9\\]+):(\\[ \\n\\])\"\n+    regsub -all $colnum_regexp $comp_output \"\\\\2:\\\\3:0:\\\\4\\\\1\" comp_output\n+\n     set two_loci \"$locus_regexp$locus_regexp$diag_regexp\"\n     set single_locus \"$locus_regexp$diag_regexp\"\n-    regsub -all $two_loci $comp_output \"\\\\1:\\\\2: \\\\5\\n\\\\3:\\\\4: \\\\5\\n\" comp_output\n-    regsub -all $single_locus $comp_output \"\\\\1:\\\\2: \\\\3\\n\" comp_output\n+    regsub -all $two_loci $comp_output \"\\\\1:\\\\2:\\\\3: \\\\9\\n\\\\5:\\\\6:\\\\7: \\\\9\\n\" comp_output\n+    regsub -all $single_locus $comp_output \"\\\\1:\\\\2:\\\\3: \\\\5\\n\" comp_output\n+\n+    # Add a line number if none exists\n+    regsub -all \"(^|\\n)(Warning: |Error: )\" $comp_output \"\\\\1:0:0: \\\\2\" comp_output\n \n     return [list $comp_output $output_file]\n }"}, {"sha": "4a1a636bb931c432a57a0c10486b9d175fe6d954", "filename": "gcc/testsuite/lib/gfortran.exp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Flib%2Fgfortran.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23541755f8ded87da6b3056562ba9736d0126ee/gcc%2Ftestsuite%2Flib%2Fgfortran.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgfortran.exp?ref=e23541755f8ded87da6b3056562ba9736d0126ee", "patch": "@@ -142,11 +142,16 @@ proc gfortran_init { args } {\n     global TOOL_EXECUTABLE TOOL_OPTIONS\n     global GFORTRAN_UNDER_TEST\n     global TESTING_IN_BUILD_TREE\n+    global gcc_warning_prefix\n+    global gcc_error_prefix\n \n     # We set LC_ALL and LANG to C so that we get the same error messages as expected.\n     setenv LC_ALL C\n     setenv LANG C\n \n+    set gcc_warning_prefix \"\\[Ww\\]arning:\"\n+    set gcc_error_prefix \"(Fatal )?\\[Ee\\]rror:\"\n+\n     # Many hosts now default to a non-ASCII C locale, however, so\n     # they can set a charset encoding here if they need.\n     if { [ishost \"*-*-cygwin*\"] } {"}]}