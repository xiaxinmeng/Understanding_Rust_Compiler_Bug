{"sha": "ede9446c26a9290bfb60422b31868212c00a4af7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRlOTQ0NmMyNmE5MjkwYmZiNjA0MjJiMzE4NjgyMTJjMDBhNGFmNw==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@linux-m68k.org", "date": "2018-08-08T20:01:26Z"}, "committer": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "2018-08-08T20:01:26Z"}, "message": "m68k: handle more cases of TLS symbols with offset\n\nPR target/46179\n* config/m68k/m68k.h (FINAL_PRESCAN_INSN): Don't define.\n* config/m68k/m68k.c (handle_move_double): Don't call\nm68k_final_prescan_insn.\n(m68k_adjust_decorated_operand): Renamed from\nm68k_final_prescan_insn, remove first and third operand and\nsimplify.\n(print_operand): Call it.\n(print_operand_address): Call it.\n\nPR target/46179\n* gcc.target/m68k/tls-dimode.c: New file.\n\nFrom-SVN: r263432", "tree": {"sha": "a1f3ea49d5630e2f4ad14d977deca75fb0d3b278", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1f3ea49d5630e2f4ad14d977deca75fb0d3b278"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ede9446c26a9290bfb60422b31868212c00a4af7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ede9446c26a9290bfb60422b31868212c00a4af7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ede9446c26a9290bfb60422b31868212c00a4af7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ede9446c26a9290bfb60422b31868212c00a4af7/comments", "author": {"login": "andreas-schwab", "id": 2175493, "node_id": "MDQ6VXNlcjIxNzU0OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2175493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreas-schwab", "html_url": "https://github.com/andreas-schwab", "followers_url": "https://api.github.com/users/andreas-schwab/followers", "following_url": "https://api.github.com/users/andreas-schwab/following{/other_user}", "gists_url": "https://api.github.com/users/andreas-schwab/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreas-schwab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreas-schwab/subscriptions", "organizations_url": "https://api.github.com/users/andreas-schwab/orgs", "repos_url": "https://api.github.com/users/andreas-schwab/repos", "events_url": "https://api.github.com/users/andreas-schwab/events{/privacy}", "received_events_url": "https://api.github.com/users/andreas-schwab/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f10a91352f83232394646df5a67bdb8f4366a067", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f10a91352f83232394646df5a67bdb8f4366a067", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f10a91352f83232394646df5a67bdb8f4366a067"}], "stats": {"total": 101, "additions": 62, "deletions": 39}, "files": [{"sha": "e8f65c97911d37ac342c1140a84330f64188bffc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede9446c26a9290bfb60422b31868212c00a4af7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede9446c26a9290bfb60422b31868212c00a4af7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ede9446c26a9290bfb60422b31868212c00a4af7", "patch": "@@ -1,3 +1,15 @@\n+2018-08-08  Andreas Schwab  <schwab@linux-m68k.org>\n+\n+\tPR target/46179\n+\t* config/m68k/m68k.h (FINAL_PRESCAN_INSN): Don't define.\n+\t* config/m68k/m68k.c (handle_move_double): Don't call\n+\tm68k_final_prescan_insn.\n+\t(m68k_adjust_decorated_operand): Renamed from\n+\tm68k_final_prescan_insn, remove first and third operand and\n+\tsimplify.\n+\t(print_operand): Call it.\n+\t(print_operand_address): Call it.\n+\n 2018-08-08  Nathan Sidwell  <nathan@acm.org>\n \n \t* diagnostic.c (diagnostic_report_current_module): Use"}, {"sha": "303dfc1c0c9432c83400eaaa11c8cd163c34eebd", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 30, "deletions": 36, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede9446c26a9290bfb60422b31868212c00a4af7/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede9446c26a9290bfb60422b31868212c00a4af7/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=ede9446c26a9290bfb60422b31868212c00a4af7", "patch": "@@ -2329,11 +2329,10 @@ m68k_unwrap_symbol (rtx orig, bool unwrap_reloc32_p)\n   return m68k_unwrap_symbol_1 (orig, unwrap_reloc32_p, NULL);\n }\n \n-/* Prescan insn before outputing assembler for it.  */\n+/* Adjust decorated address operand before outputing assembler for it.  */\n \n-void\n-m68k_final_prescan_insn (rtx_insn *insn ATTRIBUTE_UNUSED,\n-\t\t\t rtx *operands, int n_operands)\n+static void\n+m68k_adjust_decorated_operand (rtx op)\n {\n   int i;\n \n@@ -2355,45 +2354,38 @@ m68k_final_prescan_insn (rtx_insn *insn ATTRIBUTE_UNUSED,\n      to patch up anything outside of the operand.  */\n \n   subrtx_var_iterator::array_type array;\n-  for (i = 0; i < n_operands; ++i)\n+  FOR_EACH_SUBRTX_VAR (iter, array, op, ALL)\n     {\n-      rtx op;\n-\n-      op = operands[i];\n-\n-      FOR_EACH_SUBRTX_VAR (iter, array, op, ALL)\n+      rtx x = *iter;\n+      if (m68k_unwrap_symbol (x, true) != x)\n \t{\n-\t  rtx x = *iter;\n-\t  if (m68k_unwrap_symbol (x, true) != x)\n-\t    {\n-\t      rtx plus;\n+\t  rtx plus;\n \n-\t      gcc_assert (GET_CODE (x) == CONST);\n-\t      plus = XEXP (x, 0);\n+\t  gcc_assert (GET_CODE (x) == CONST);\n+\t  plus = XEXP (x, 0);\n \n-\t      if (GET_CODE (plus) == PLUS || GET_CODE (plus) == MINUS)\n-\t\t{\n-\t\t  rtx unspec;\n-\t\t  rtx addend;\n+\t  if (GET_CODE (plus) == PLUS || GET_CODE (plus) == MINUS)\n+\t    {\n+\t      rtx unspec;\n+\t      rtx addend;\n \n-\t\t  unspec = XEXP (plus, 0);\n-\t\t  gcc_assert (GET_CODE (unspec) == UNSPEC);\n-\t\t  addend = XEXP (plus, 1);\n-\t\t  gcc_assert (CONST_INT_P (addend));\n+\t      unspec = XEXP (plus, 0);\n+\t      gcc_assert (GET_CODE (unspec) == UNSPEC);\n+\t      addend = XEXP (plus, 1);\n+\t      gcc_assert (CONST_INT_P (addend));\n \n-\t\t  /* We now have all the pieces, rearrange them.  */\n+\t      /* We now have all the pieces, rearrange them.  */\n \n-\t\t  /* Move symbol to plus.  */\n-\t\t  XEXP (plus, 0) = XVECEXP (unspec, 0, 0);\n+\t      /* Move symbol to plus.  */\n+\t      XEXP (plus, 0) = XVECEXP (unspec, 0, 0);\n \n-\t\t  /* Move plus inside unspec.  */\n-\t\t  XVECEXP (unspec, 0, 0) = plus;\n+\t      /* Move plus inside unspec.  */\n+\t      XVECEXP (unspec, 0, 0) = plus;\n \n-\t\t  /* Move unspec to top level of const.  */\n-\t\t  XEXP (x, 0) = unspec;\n-\t\t}\n-\t      iter.skip_subrtxes ();\n+\t      /* Move unspec to top level of const.  */\n+\t      XEXP (x, 0) = unspec;\n \t    }\n+\t  iter.skip_subrtxes ();\n \t}\n     }\n }\n@@ -3496,7 +3488,6 @@ handle_move_double (rtx operands[2],\n \n   /* Normal case: do the two words, low-numbered first.  */\n \n-  m68k_final_prescan_insn (NULL, operands, 2);\n   handle_movsi (operands);\n \n   /* Do the middle one of the three words for long double */\n@@ -3507,7 +3498,6 @@ handle_move_double (rtx operands[2],\n       if (addreg1)\n \thandle_reg_adjust (addreg1, 4);\n \n-      m68k_final_prescan_insn (NULL, middlehalf, 2);\n       handle_movsi (middlehalf);\n     }\n \n@@ -3518,7 +3508,6 @@ handle_move_double (rtx operands[2],\n     handle_reg_adjust (addreg1, 4);\n \n   /* Do that word.  */\n-  m68k_final_prescan_insn (NULL, latehalf, 2);\n   handle_movsi (latehalf);\n \n   /* Undo the adds we just did.  */\n@@ -4464,6 +4453,9 @@ floating_exact_log2 (rtx x)\n void\n print_operand (FILE *file, rtx op, int letter)\n {\n+  if (op != NULL_RTX)\n+    m68k_adjust_decorated_operand (op);\n+\n   if (letter == '.')\n     {\n       if (MOTOROLA)\n@@ -4712,6 +4704,8 @@ print_operand_address (FILE *file, rtx addr)\n {\n   struct m68k_address address;\n \n+  m68k_adjust_decorated_operand (addr);\n+\n   if (!m68k_decompose_address (QImode, addr, true, &address))\n     gcc_unreachable ();\n "}, {"sha": "29e9be2b9d2c2ce5c179df2112807f837b0798db", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede9446c26a9290bfb60422b31868212c00a4af7/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede9446c26a9290bfb60422b31868212c00a4af7/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=ede9446c26a9290bfb60422b31868212c00a4af7", "patch": "@@ -867,9 +867,6 @@ do { if (cc_prev_status.flags & CC_IN_68881)\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n   fprintf ((FILE), \",%u\\n\", (int)(ROUNDED)))\n \n-#define FINAL_PRESCAN_INSN(INSN, OPVEC, NOPERANDS) \\\n-  m68k_final_prescan_insn (INSN, OPVEC, NOPERANDS)\n-\n /* On the 68000, we use several CODE characters:\n    '.' for dot needed in Motorola-style opcode names.\n    '-' for an operand pushing on the stack:"}, {"sha": "779b50f98ed31475ee77e7d9f6afdec8cc1ccbe4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede9446c26a9290bfb60422b31868212c00a4af7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede9446c26a9290bfb60422b31868212c00a4af7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ede9446c26a9290bfb60422b31868212c00a4af7", "patch": "@@ -1,3 +1,8 @@\n+2018-08-08  Andreas Schwab  <schwab@linux-m68k.org>\n+\n+\tPR target/46179\n+\t* gcc.target/m68k/tls-dimode.c: New file.\n+\n 2018-08-08  Nathan Sidwell  <nathan@acm.org>\n \n \t* c-c++-common/inc-from-1a.h, c-c++-common/inc-from-1b.h,"}, {"sha": "0bc59cd1d92f8c0cec22a688cdce963ad6bd33e3", "filename": "gcc/testsuite/gcc.target/m68k/tls-dimode.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede9446c26a9290bfb60422b31868212c00a4af7/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Ftls-dimode.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede9446c26a9290bfb60422b31868212c00a4af7/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Ftls-dimode.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Ftls-dimode.c?ref=ede9446c26a9290bfb60422b31868212c00a4af7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { ! *-linux-* } } */\n+/* { dg-options \"-w -O2\" } */\n+\n+__thread long long ti;\n+\n+void f (void)\n+{\n+  ti++;\n+}\n+\n+void g (long long x)\n+{\n+  ti = x;\n+}"}]}