{"sha": "0fa35c7e2974a22b2107fa378895c3069fe07ff3", "node_id": "C_kwDOANBUbNoAKDBmYTM1YzdlMjk3NGEyMmIyMTA3ZmEzNzg4OTVjMzA2OWZlMDdmZjM", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2022-09-30T16:43:30Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2022-10-11T11:39:50Z"}, "message": "libiberty: Demangling 'M' prefixes\n\nThe grammar for a lambda context can include <source-name> 'M', and we\nwere adding the component that generated to the substitution table\ntwice.  Just ignore the 'M' completely -- we'll already have done the\nchecks we need when we saw its predecessor.  A prefix cannot be the\nlast component of a nested name, so we do not need to check for that\ncase (although we could if we wanted to be more lenient).\n\n\tlibiberty/\n\t* cp-demangle.c (d_prefix): 'M' components are not\n\t(re-)added to the substitution table.\n\t* testsuite/demangle-expected: Add tests.", "tree": {"sha": "36fd8ccab6d49574e1974f2ad178e5506999735a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36fd8ccab6d49574e1974f2ad178e5506999735a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fa35c7e2974a22b2107fa378895c3069fe07ff3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fa35c7e2974a22b2107fa378895c3069fe07ff3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fa35c7e2974a22b2107fa378895c3069fe07ff3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fa35c7e2974a22b2107fa378895c3069fe07ff3/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee467644c53ee2f7d633a8e1f53603feafab4351", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee467644c53ee2f7d633a8e1f53603feafab4351", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee467644c53ee2f7d633a8e1f53603feafab4351"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "4beb4d257bb2d9cb2810ee3c221bc01b5bd402ef", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa35c7e2974a22b2107fa378895c3069fe07ff3/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa35c7e2974a22b2107fa378895c3069fe07ff3/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=0fa35c7e2974a22b2107fa378895c3069fe07ff3", "patch": "@@ -1609,12 +1609,10 @@ d_prefix (struct d_info *di, int substable)\n \t}\n       else if (peek == 'M')\n \t{\n-\t  /* Initializer scope for a lambda.  We don't need to represent\n-\t     this; the normal code will just treat the variable as a type\n-\t     scope, which gives appropriate output.  */\n-\t  if (ret == NULL)\n-\t    return NULL;\n+\t  /* Initializer scope for a lambda.  We already added it as a\n+  \t     substitution candidate, don't do that again.  */\n \t  d_advance (di, 1);\n+\t  continue;\n \t}\n       else\n \t{"}, {"sha": "bd92b12076b4a630ba13f776a7a11d0d0c92ee41", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa35c7e2974a22b2107fa378895c3069fe07ff3/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa35c7e2974a22b2107fa378895c3069fe07ff3/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=0fa35c7e2974a22b2107fa378895c3069fe07ff3", "patch": "@@ -1581,3 +1581,24 @@ void L1()::{lambda((auto:1)...)#1}::operator()<int, int*>(int, int*) const\n _ZZ2L1vENKUlDpT_E_clIJiPiEEEDaS0_\n auto L1()::{lambda((auto:1)...)#1}::operator()<int, int*>(int, int*) const\n \n+_Z7captureIN4gvarMUlvE_EE7WrapperIT_EOS3_\n+Wrapper<gvar::{lambda()#1}> capture<gvar::{lambda()#1}>(gvar::{lambda()#1}&&)\n+\n+_ZNK2L2MUlT_T0_E_clIifEEvS_S0_\n+void L2::{lambda(auto:1, auto:2)#1}::operator()<int, float>(L2, int) const\n+\n+_ZNK1C1fMUlT_E_clIMS_iEEDaS1_\n+auto C::f::{lambda(auto:1)#1}::operator()<int C::*>(int C::*) const\n+\n+_ZNK2L2MUlT_T0_E_clIifEEvS0_S1_\n+void L2::{lambda(auto:1, auto:2)#1}::operator()<int, float>(int, float) const\n+\n+_ZNK1B2L3MUlT_T0_E_clIjdEEvS1_S2_\n+void B::L3::{lambda(auto:1, auto:2)#1}::operator()<unsigned int, double>(unsigned int, double) const\n+\n+_Z3fooIN1qMUlvE_ENS0_UlvE0_EEiOT_OT0_\n+int foo<q::{lambda()#1}, q::{lambda()#2}>(q::{lambda()#1}&&, q::{lambda()#2}&&)\n+\n+_ZNK2L1MUlDpT_E_clIJiPiEEEvS1_\n+void L1::{lambda((auto:1)...)#1}::operator()<int, int*>(int, int*) const\n+"}]}