{"sha": "04126e46eb2d829d7b4149d394b667e878912cc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQxMjZlNDZlYjJkODI5ZDdiNDE0OWQzOTRiNjY3ZTg3ODkxMmNjOA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-11-06T17:33:53Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-11-09T23:22:58Z"}, "message": "c++: DR 1914 - Allow duplicate standard attributes.\n\nFollowing Joseph's change for C to allow duplicate C2x standard attributes\n<https://gcc.gnu.org/pipermail/gcc-patches/2020-October/557272.html>,\nthis patch does a similar thing for C++.  This is DR 1914, to be resolved by\n<wg21.link/p2156>, which is not part of the standard yet, but has wide\nsupport so looks like a shoo-in.  The duplications now produce warnings\ninstead, but only if the attribute wasn't specified via a macro.\n\ngcc/c-family/ChangeLog:\n\n\tDR 1914\n\t* c-common.c (attribute_fallthrough_p): Tweak the warning\n\tmessage.\n\ngcc/cp/ChangeLog:\n\n\tDR 1914\n\t* parser.c (cp_parser_check_std_attribute): Return bool.  Add a\n\tlocation_t parameter.  Return true if the attribute wasn't duplicated.\n\tGive a warning instead of an error.  Check more attributes.\n\t(cp_parser_std_attribute_list): Don't add duplicated attributes to\n\tthe list.  Pass location to cp_parser_check_std_attribute.\n\ngcc/testsuite/ChangeLog:\n\n\tDR 1914\n\t* c-c++-common/attr-fallthrough-2.c: Adjust dg-warning.\n\t* g++.dg/cpp0x/fallthrough2.C: Likewise.\n\t* g++.dg/cpp0x/gen-attrs-60.C: Turn dg-error into dg-warning.\n\t* g++.dg/cpp1y/attr-deprecated-2.C: Likewise.\n\t* g++.dg/cpp2a/attr-likely2.C: Adjust dg-warning.\n\t* g++.dg/cpp2a/nodiscard-once.C: Turn dg-error into dg-warning.\n\t* g++.dg/cpp0x/gen-attrs-72.C: New test.", "tree": {"sha": "d335d40d1f5e99dad16532ef1f34e6099465ff31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d335d40d1f5e99dad16532ef1f34e6099465ff31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04126e46eb2d829d7b4149d394b667e878912cc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04126e46eb2d829d7b4149d394b667e878912cc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04126e46eb2d829d7b4149d394b667e878912cc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04126e46eb2d829d7b4149d394b667e878912cc8/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3fd75d869480044213553000d2c9dc236a4f7af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3fd75d869480044213553000d2c9dc236a4f7af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3fd75d869480044213553000d2c9dc236a4f7af"}], "stats": {"total": 113, "additions": 81, "deletions": 32}, "files": [{"sha": "29508bca97b5b9482b45164104c66b98f4920fbf", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04126e46eb2d829d7b4149d394b667e878912cc8/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04126e46eb2d829d7b4149d394b667e878912cc8/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=04126e46eb2d829d7b4149d394b667e878912cc8", "patch": "@@ -5752,9 +5752,10 @@ attribute_fallthrough_p (tree attr)\n   tree t = lookup_attribute (\"fallthrough\", attr);\n   if (t == NULL_TREE)\n     return false;\n-  /* This attribute shall appear at most once in each attribute-list.  */\n+  /* It is no longer true that \"this attribute shall appear at most once in\n+     each attribute-list\", but we still give a warning.  */\n   if (lookup_attribute (\"fallthrough\", TREE_CHAIN (t)))\n-    warning (OPT_Wattributes, \"%<fallthrough%> attribute specified multiple \"\n+    warning (OPT_Wattributes, \"attribute %<fallthrough%> specified multiple \"\n \t     \"times\");\n   /* No attribute-argument-clause shall be present.  */\n   else if (TREE_VALUE (t) != NULL_TREE)"}, {"sha": "4c819ea1c5df09fcabec977fed72b9249a790c87", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04126e46eb2d829d7b4149d394b667e878912cc8/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04126e46eb2d829d7b4149d394b667e878912cc8/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=04126e46eb2d829d7b4149d394b667e878912cc8", "patch": "@@ -27280,30 +27280,30 @@ cp_parser_std_attribute (cp_parser *parser, tree attr_ns)\n   return attribute;\n }\n \n-/* Check that the attribute ATTRIBUTE appears at most once in the\n-   attribute-list ATTRIBUTES.  This is enforced for noreturn (7.6.3),\n-   nodiscard, and deprecated (7.6.5).  Note that\n-   carries_dependency (7.6.4) isn't implemented yet in GCC.  */\n+/* Warn if the attribute ATTRIBUTE appears more than once in the\n+   attribute-list ATTRIBUTES.  This used to be enforced for certain\n+   attributes, but the restriction was removed in P2156.  Note that\n+   carries_dependency ([dcl.attr.depend]) isn't implemented yet in GCC.\n+   LOC is the location of ATTRIBUTE.  Returns true if ATTRIBUTE was not\n+   found in ATTRIBUTES.  */\n \n-static void\n-cp_parser_check_std_attribute (tree attributes, tree attribute)\n+static bool\n+cp_parser_check_std_attribute (location_t loc, tree attributes, tree attribute)\n {\n+  static auto alist = { \"noreturn\", \"deprecated\", \"nodiscard\", \"maybe_unused\",\n+\t\t\t\"likely\", \"unlikely\", \"fallthrough\",\n+\t\t\t\"no_unique_address\" };\n   if (attributes)\n-    {\n-      tree name = get_attribute_name (attribute);\n-      if (is_attribute_p (\"noreturn\", name)\n-\t  && lookup_attribute (\"noreturn\", attributes))\n-\terror (\"attribute %<noreturn%> can appear at most once \"\n-\t       \"in an attribute-list\");\n-      else if (is_attribute_p (\"deprecated\", name)\n-\t       && lookup_attribute (\"deprecated\", attributes))\n-\terror (\"attribute %<deprecated%> can appear at most once \"\n-\t       \"in an attribute-list\");\n-      else if (is_attribute_p (\"nodiscard\", name)\n-\t       && lookup_attribute (\"nodiscard\", attributes))\n-\terror (\"attribute %<nodiscard%> can appear at most once \"\n-\t       \"in an attribute-list\");\n-    }\n+    for (const auto &a : alist)\n+      if (is_attribute_p (a, get_attribute_name (attribute))\n+\t  && lookup_attribute (a, attributes))\n+\t{\n+\t  if (!from_macro_expansion_at (loc))\n+\t    warning_at (loc, OPT_Wattributes, \"attribute %qs specified \"\n+\t\t\t\"multiple times\", a);\n+\t  return false;\n+\t}\n+  return true;\n }\n \n /* Parse a list of standard C++-11 attributes.\n@@ -27323,14 +27323,17 @@ cp_parser_std_attribute_list (cp_parser *parser, tree attr_ns)\n \n   while (true)\n     {\n+      location_t loc = cp_lexer_peek_token (parser->lexer)->location;\n       attribute = cp_parser_std_attribute (parser, attr_ns);\n       if (attribute == error_mark_node)\n \tbreak;\n       if (attribute != NULL_TREE)\n \t{\n-\t  cp_parser_check_std_attribute (attributes, attribute);\n-\t  TREE_CHAIN (attribute) = attributes;\n-\t  attributes = attribute;\n+\t  if (cp_parser_check_std_attribute (loc, attributes, attribute))\n+\t    {\n+\t      TREE_CHAIN (attribute) = attributes;\n+\t      attributes = attribute;\n+\t    }\n \t}\n       token = cp_lexer_peek_token (parser->lexer);\n       if (token->type == CPP_ELLIPSIS)"}, {"sha": "156b413db7ad122908783bf2c2ea0cb700cd4a89", "filename": "gcc/testsuite/c-c++-common/attr-fallthrough-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04126e46eb2d829d7b4149d394b667e878912cc8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-fallthrough-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04126e46eb2d829d7b4149d394b667e878912cc8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-fallthrough-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-fallthrough-2.c?ref=04126e46eb2d829d7b4149d394b667e878912cc8", "patch": "@@ -34,7 +34,7 @@ fn (int i)\n     __attribute__((fallthrough (\"x\"))); /* { dg-warning \"specified with a parameter\" } */\n   case 7:\n     bar (1);\n-    __attribute__((fallthrough, fallthrough)); /* { dg-warning \"attribute specified multiple times\" } */\n+    __attribute__((fallthrough, fallthrough)); /* { dg-warning \"specified multiple times\" } */\n   case 8:\n     bar (1);\n     __attribute__((fallthrough));"}, {"sha": "071c2cb09eb54dec0f389fb8d6026b4c8acd56ec", "filename": "gcc/testsuite/g++.dg/cpp0x/fallthrough2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04126e46eb2d829d7b4149d394b667e878912cc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffallthrough2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04126e46eb2d829d7b4149d394b667e878912cc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffallthrough2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffallthrough2.C?ref=04126e46eb2d829d7b4149d394b667e878912cc8", "patch": "@@ -14,7 +14,7 @@ f (int i)\n       [[fallthrough]];\n     case 3:\n       bar (1);\n-      [[gnu::fallthrough, gnu::fallthrough]]; // { dg-warning \".fallthrough. attribute specified multiple times\" }\n+      [[gnu::fallthrough, gnu::fallthrough]]; // { dg-warning \".fallthrough. specified multiple times\" }\n     case 2:\n       bar (2);\n     }"}, {"sha": "9203d1dd1bdcae1dc87745bc670a531f3f5f4ee8", "filename": "gcc/testsuite/g++.dg/cpp0x/gen-attrs-60.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04126e46eb2d829d7b4149d394b667e878912cc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-60.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04126e46eb2d829d7b4149d394b667e878912cc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-60.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-60.C?ref=04126e46eb2d829d7b4149d394b667e878912cc8", "patch": "@@ -1,4 +1,4 @@\n // PR c++/60365\n // { dg-do compile { target c++11 } }\n \n-void func [[noreturn, noreturn]] ();     // { dg-error \"at most once\" }\n+void func [[noreturn, noreturn]] (); // { dg-warning \"specified multiple times\" }"}, {"sha": "3c235b5e921eecb098211fd7d791da06689b9f34", "filename": "gcc/testsuite/g++.dg/cpp0x/gen-attrs-72.C", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04126e46eb2d829d7b4149d394b667e878912cc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-72.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04126e46eb2d829d7b4149d394b667e878912cc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-72.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-72.C?ref=04126e46eb2d829d7b4149d394b667e878912cc8", "patch": "@@ -0,0 +1,45 @@\n+// DR 1914 - Duplicate standard attributes \n+// { dg-do compile { target c++11 } }\n+\n+#define ATTR_NORETURN [[noreturn, noreturn]] \n+\n+[[noreturn, noreturn]] void fn0(); // { dg-warning \"specified multiple times\" }\n+ATTR_NORETURN void fn0a();\n+[[noreturn]] [[noreturn]] void fn1();\n+[[deprecated, deprecated]] void fn2(); // { dg-warning \"specified multiple times\" }\n+[[deprecated]] [[deprecated]] void fn3();\n+[[maybe_unused]] [[maybe_unused]] int fn4();\n+[[maybe_unused, maybe_unused]] int fn5(); // { dg-warning \"specified multiple times\" }\n+[[nodiscard]] [[nodiscard]] int fn6();\n+[[nodiscard, nodiscard]] int fn7(); // { dg-warning \"specified multiple times\" }\n+\n+struct E { };\n+struct A {\n+  [[no_unique_address]] [[no_unique_address]] E e;\n+};\n+struct B {\n+  [[no_unique_address, no_unique_address]] E e; // { dg-warning \"specified multiple times\" }\n+};\n+\n+int\n+f (int n)\n+{\n+  switch (n)\n+    {\n+    case 1:\n+      [[fallthrough, fallthrough]]; // { dg-warning \"specified multiple times\" }\n+    case 2:\n+      [[fallthrough]] [[fallthrough]]; // { dg-warning \"specified multiple times\" }\n+    case 3:\n+      return 15;\n+    }\n+\n+  if (n == 10)\n+    [[likely]] [[likely]] return 42; // { dg-warning \"ignoring attribute\" }\n+  else if (n == 11)\n+    [[unlikely]] [[unlikely]] return 10; // { dg-warning \"ignoring attribute\" }\n+  else if (n == 12)\n+    [[likely, likely]] return 42; // { dg-warning \"specified multiple times\" }\n+  else\n+    [[unlikely, unlikely]] return 0; // { dg-warning \"specified multiple times\" }\n+}"}, {"sha": "ac6c4aecf9b36590b07f7a509566a785cba19493", "filename": "gcc/testsuite/g++.dg/cpp1y/attr-deprecated-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04126e46eb2d829d7b4149d394b667e878912cc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fattr-deprecated-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04126e46eb2d829d7b4149d394b667e878912cc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fattr-deprecated-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fattr-deprecated-2.C?ref=04126e46eb2d829d7b4149d394b667e878912cc8", "patch": "@@ -1,4 +1,4 @@\n // PR c++/60365\n // { dg-do compile { target c++14 } }\n \n-void func [[deprecated, deprecated]] (); // { dg-error \"at most once\" }\n+void func [[deprecated, deprecated]] (); // { dg-warning \"specified multiple times\" }"}, {"sha": "0bc5f1e1ae77a3e2259bad322eb878adf6675aee", "filename": "gcc/testsuite/g++.dg/cpp2a/attr-likely2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04126e46eb2d829d7b4149d394b667e878912cc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fattr-likely2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04126e46eb2d829d7b4149d394b667e878912cc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fattr-likely2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fattr-likely2.C?ref=04126e46eb2d829d7b4149d394b667e878912cc8", "patch": "@@ -4,7 +4,7 @@ bool b;\n int main()\n {\n   if (b)\n-    [[likely, likely]] b;\t// { dg-warning \"ignoring\" }\n+    [[likely, likely]] b;\t// { dg-warning \"specified multiple times\" }\n   else\n     [[unlikely]] [[likely]] b;\t// { dg-warning \"ignoring\" }\n "}, {"sha": "c95fa1b0741d24567fb7c7be68d42afcebc8fd79", "filename": "gcc/testsuite/g++.dg/cpp2a/nodiscard-once.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04126e46eb2d829d7b4149d394b667e878912cc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-once.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04126e46eb2d829d7b4149d394b667e878912cc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-once.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-once.C?ref=04126e46eb2d829d7b4149d394b667e878912cc8", "patch": "@@ -2,7 +2,7 @@\n /* { dg-do compile { target c++20 } } */\n /* { dg-options \"-O -ftrack-macro-expansion=0\" } */\n \n-[[nodiscard, nodiscard]] int check1 (void); /* { dg-error \"nodiscard\\[^\\n\\r]*can appear at most once\" } */\n+[[nodiscard, nodiscard]] int check1 (void); // { dg-warning \"specified multiple times\" }\n \n void\n test (void)"}]}