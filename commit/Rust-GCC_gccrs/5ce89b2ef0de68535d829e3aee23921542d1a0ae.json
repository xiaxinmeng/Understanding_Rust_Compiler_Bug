{"sha": "5ce89b2ef0de68535d829e3aee23921542d1a0ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNlODliMmVmMGRlNjg1MzVkODI5ZTNhZWUyMzkyMTU0MmQxYTBhZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2002-02-06T20:40:18Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-02-06T20:40:18Z"}, "message": "c-decl.c (finish_function): Warn about a non-void function with no return statement and no abnormal exit.\n\n        * c-decl.c (finish_function): Warn about a non-void function with\n        no return statement and no abnormal exit.\n        (current_function_returns_abnormally): New variable.\n        (start_function): Clear it.\n        (struct c_language_function): Add returns_abnormally.\n        (push_c_function_context): Save it.\n        (pop_c_function_context): Restore it.\n        (builtin_function): Set TREE_THIS_VOLATILE on return fns.\n        (grokdeclarator): Set C_FUNCTION_IMPLICIT_INT on functions without\n        an explicit return type.\n        * c-tree.h: Declare current_function_returns_abnormally.\n        (C_FUNCTION_IMPLICIT_INT): New macro.\n        * c-typeck.c (build_function_call): Set it.\n        (c_expand_return): Set current_function_returns_value even if the\n        value is erroneous.\n\nFrom-SVN: r49551", "tree": {"sha": "9c61da9c4a64edc8cbc210d2755ecb06d031534b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c61da9c4a64edc8cbc210d2755ecb06d031534b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ce89b2ef0de68535d829e3aee23921542d1a0ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ce89b2ef0de68535d829e3aee23921542d1a0ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ce89b2ef0de68535d829e3aee23921542d1a0ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ce89b2ef0de68535d829e3aee23921542d1a0ae/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "caaf2272c0eeb365b2c98d60f3ecf8f8f78cdb1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caaf2272c0eeb365b2c98d60f3ecf8f8f78cdb1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caaf2272c0eeb365b2c98d60f3ecf8f8f78cdb1f"}], "stats": {"total": 103, "additions": 86, "deletions": 17}, "files": [{"sha": "c1ba34f534fb2065f9541b4599bf0116da9913db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ce89b2ef0de68535d829e3aee23921542d1a0ae", "patch": "@@ -1,3 +1,21 @@\n+2002-02-06  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-decl.c (finish_function): Warn about a non-void function with\n+\tno return statement and no abnormal exit.\n+\t(current_function_returns_abnormally): New variable.\n+\t(start_function): Clear it.\n+\t(struct c_language_function): Add returns_abnormally.\n+\t(push_c_function_context): Save it.\n+\t(pop_c_function_context): Restore it.\n+\t(builtin_function): Set TREE_THIS_VOLATILE on return fns.\n+\t(grokdeclarator): Set C_FUNCTION_IMPLICIT_INT on functions without\n+\tan explicit return type.\n+\t* c-tree.h: Declare current_function_returns_abnormally.\n+\t(C_FUNCTION_IMPLICIT_INT): New macro.\n+\t* c-typeck.c (build_function_call): Set it.\n+\t(c_expand_return): Set current_function_returns_value even if the\n+\tvalue is erroneous.\n+\n 2002-02-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/5420:"}, {"sha": "746fa470dff44c302c24f5f87b009b77f1556486", "filename": "gcc/c-decl.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=5ce89b2ef0de68535d829e3aee23921542d1a0ae", "patch": "@@ -134,6 +134,11 @@ int current_function_returns_value;\n \n int current_function_returns_null;\n \n+/* Set to 0 at beginning of a function definition, set to 1 if\n+   a call to a noreturn function is seen.  */\n+\n+int current_function_returns_abnormally;\n+\n /* Set to nonzero by `grokdeclarator' for a function\n    whose return type is defaulted, if warnings for this are desired.  */\n \n@@ -3214,6 +3219,10 @@ builtin_function (name, type, function_code, class, library_name)\n   DECL_BUILT_IN_CLASS (decl) = class;\n   DECL_FUNCTION_CODE (decl) = function_code;\n \n+  /* The return builtins leave the current function.  */\n+  if (function_code == BUILT_IN_RETURN || function_code == BUILT_IN_EH_RETURN)\n+    TREE_THIS_VOLATILE (decl) = 1;\n+\n   /* Warn if a function in the namespace for users\n      is used without an occasion to consider it declared.  */\n   if (name[0] != '_' || name[1] != '_')\n@@ -5086,6 +5095,9 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \tTREE_PUBLIC (decl)\n \t  = !(specbits & ((1 << (int) RID_STATIC) | (1 << (int) RID_AUTO)));\n \n+\tif (defaulted_int)\n+\t  C_FUNCTION_IMPLICIT_INT (decl) = 1;\n+\n \t/* Record presence of `inline', if it is reasonable.  */\n \tif (MAIN_NAME_P (declarator))\n \t  {\n@@ -6175,6 +6187,7 @@ start_function (declspecs, declarator, attributes)\n \n   current_function_returns_value = 0;  /* Assume, until we see it does.  */\n   current_function_returns_null = 0;\n+  current_function_returns_abnormally = 0;\n   warn_about_return_type = 0;\n   current_extern_inline = 0;\n   c_function_varargs = 0;\n@@ -6904,6 +6917,21 @@ finish_function (nested)\n \n   /* Tie off the statement tree for this function.  */\n   finish_stmt_tree (&DECL_SAVED_TREE (fndecl));\n+\n+  /* Complain if there's just no return statement.  */\n+  if (TREE_CODE (TREE_TYPE (TREE_TYPE (fndecl))) != VOID_TYPE\n+      && !current_function_returns_value && !current_function_returns_null\n+      /* Don't complain if we abort.  */\n+      && !current_function_returns_abnormally\n+      /* Don't warn for main().  */\n+      && !MAIN_NAME_P (DECL_NAME (fndecl))\n+      /* Or if they didn't actually specify a return type.  */\n+      && !C_FUNCTION_IMPLICIT_INT (fndecl)\n+      /* If we have -Wreturn-type, let flow complain.  Unless we're an\n+\t inline function, as we might never be compiled separately.  */\n+      && (!warn_return_type || DECL_INLINE (fndecl)))\n+    warning (\"no return statement in function returning non-void\");\n+\n   /* Clear out memory we no longer need.  */\n   free_after_parsing (cfun);\n   /* Since we never call rest_of_compilation, we never clear\n@@ -7193,6 +7221,7 @@ struct c_language_function\n   tree shadowed_labels;\n   int returns_value;\n   int returns_null;\n+  int returns_abnormally;\n   int warn_about_return_type;\n   int extern_inline;\n   struct binding_level *binding_level;\n@@ -7216,6 +7245,7 @@ push_c_function_context (f)\n   p->shadowed_labels = shadowed_labels;\n   p->returns_value = current_function_returns_value;\n   p->returns_null = current_function_returns_null;\n+  p->returns_abnormally = current_function_returns_abnormally;\n   p->warn_about_return_type = warn_about_return_type;\n   p->extern_inline = current_extern_inline;\n   p->binding_level = current_binding_level;\n@@ -7253,6 +7283,7 @@ pop_c_function_context (f)\n   shadowed_labels = p->shadowed_labels;\n   current_function_returns_value = p->returns_value;\n   current_function_returns_null = p->returns_null;\n+  current_function_returns_abnormally = p->returns_abnormally;\n   warn_about_return_type = p->warn_about_return_type;\n   current_extern_inline = p->extern_inline;\n   current_binding_level = p->binding_level;"}, {"sha": "8f53b17e6bce7b1808cd1d9d9e2f320930993ec4", "filename": "gcc/c-tree.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=5ce89b2ef0de68535d829e3aee23921542d1a0ae", "patch": "@@ -132,6 +132,10 @@ struct lang_type\n /* Record whether a typedef for type `int' was actually `signed int'.  */\n #define C_TYPEDEF_EXPLICITLY_SIGNED(EXP) DECL_LANG_FLAG_1 (EXP)\n \n+/* For a FUNCTION_DECL, nonzero if it was defined without an explicit\n+   return type.  */\n+#define C_FUNCTION_IMPLICIT_INT(EXP) DECL_LANG_FLAG_1 (EXP)\n+\n /* Nonzero for a declaration of a built in function if there has been no\n    occasion that would declare the function in ordinary C.\n    Using the function draws a pedantic warning in this case.  */\n@@ -277,6 +281,11 @@ extern int current_function_returns_value;\n \n extern int current_function_returns_null;\n \n+/* Set to 0 at beginning of a function definition, set to 1 if\n+   a call to a noreturn function is seen.  */\n+\n+extern int current_function_returns_abnormally;\n+\n /* Nonzero means the expression being parsed will never be evaluated.\n    This is a count, since unevaluated expressions can nest.  */\n "}, {"sha": "dc844bfb7a3a0ba9e589b8b79507d4f0fa767a83", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=5ce89b2ef0de68535d829e3aee23921542d1a0ae", "patch": "@@ -1547,6 +1547,9 @@ build_function_call (function, params)\n       return error_mark_node;\n     }\n \n+  if (fundecl && TREE_THIS_VOLATILE (fundecl))\n+    current_function_returns_abnormally = 1;\n+\n   /* fntype now gets the type of function pointed to.  */\n   fntype = TREE_TYPE (fntype);\n \n@@ -7084,6 +7087,7 @@ c_expand_return (retval)\n       tree res = DECL_RESULT (current_function_decl);\n       tree inner;\n \n+      current_function_returns_value = 1;\n       if (t == error_mark_node)\n \treturn NULL_TREE;\n \n@@ -7141,7 +7145,6 @@ c_expand_return (retval)\n \t}\n \n       retval = build (MODIFY_EXPR, TREE_TYPE (res), res, t);\n-      current_function_returns_value = 1;\n     }\n \n  return add_stmt (build_return_stmt (retval));"}, {"sha": "b184af088d10d444f6f6fd1cd8301a37db084c7d", "filename": "gcc/testsuite/gcc.dg/20011029-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.dg%2F20011029-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.dg%2F20011029-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20011029-2.c?ref=5ce89b2ef0de68535d829e3aee23921542d1a0ae", "patch": "@@ -20,4 +20,5 @@ int foo (int s)\n \t\t\t\t\t: \"cc\"); r; }))\n         continue;\n     }\n+  return 0;\n }"}, {"sha": "8581d999dbd64a74631a8bbbc23e939155742c8e", "filename": "gcc/testsuite/gcc.dg/980816-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.dg%2F980816-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.dg%2F980816-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F980816-1.c?ref=5ce89b2ef0de68535d829e3aee23921542d1a0ae", "patch": "@@ -17,4 +17,5 @@ div_and_round_double (lden_orig, hden_orig)\n       quo[i] = work / (unsigned int ) lden;\n       carry = work % (unsigned int ) lden;\n     }\n+  return 0;\n }"}, {"sha": "606ba440ca8245b435f8ff543c8d248e6c745fda", "filename": "gcc/testsuite/gcc.dg/990117-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.dg%2F990117-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.dg%2F990117-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F990117-1.c?ref=5ce89b2ef0de68535d829e3aee23921542d1a0ae", "patch": "@@ -18,4 +18,5 @@ foo ()\n   for (i = 0; i < 10; i++)\n     ;\n   fabs (x - y);\n+  return 0;\n }"}, {"sha": "a0a13b560f9b52c9ca4a2e4f7878d15f2f4551e7", "filename": "gcc/testsuite/gcc.dg/990213-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.dg%2F990213-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.dg%2F990213-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F990213-2.c?ref=5ce89b2ef0de68535d829e3aee23921542d1a0ae", "patch": "@@ -12,4 +12,5 @@ XmlInitUnknownEncoding(void *mem)\n   struct unknown_encoding *e = mem;\n   for (i = 0; i < sizeof(struct normal_encoding); i++)\n     ((char *)mem)[i] = ((char *)&latin1_encoding)[i];\n+  return 0;\n }"}, {"sha": "7ad81b6b90bcdeced8d1457f27af3d3cde0580f6", "filename": "gcc/testsuite/gcc.dg/990214-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.dg%2F990214-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.dg%2F990214-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F990214-1.c?ref=5ce89b2ef0de68535d829e3aee23921542d1a0ae", "patch": "@@ -12,4 +12,6 @@ bar (int64_t which)\n \tcase 5 :\n \tcase 2 : ;\n \t}\n+\n+\treturn 0;\n }"}, {"sha": "8b1017245033d7d9fa149c1356dcc2f98c687dc7", "filename": "gcc/testsuite/gcc.dg/990524-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.dg%2F990524-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.dg%2F990524-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F990524-1.c?ref=5ce89b2ef0de68535d829e3aee23921542d1a0ae", "patch": "@@ -34,5 +34,5 @@ p_frames_to_multilayer(t_anim_info *ainfo_ptr,\n        break;\n     l_cur_frame_nr += l_step;\n   }\n+  return 0;\n }\n-"}, {"sha": "c8e3a04049d39f6557b273eeb1b98ed0d9dfe935", "filename": "gcc/testsuite/gcc.dg/991214-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.dg%2F991214-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.dg%2F991214-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F991214-1.c?ref=5ce89b2ef0de68535d829e3aee23921542d1a0ae", "patch": "@@ -3,8 +3,8 @@\n \n /* Test against a problem with the combiner substituting explicit hard reg\n    references when it shouldn't.  */\n-int foo (int, int) __attribute__ ((regparm (3)));\n-int foo (int x, int y)\n+void foo (int, int) __attribute__ ((regparm (3)));\n+void foo (int x, int y)\n {\n   __asm__ __volatile__(\"\" : : \"d\" (x), \"r\" (y));\n }"}, {"sha": "9c464ce89412f63c4fda350da423220ab38b4857", "filename": "gcc/testsuite/gcc.dg/asm-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-2.c?ref=5ce89b2ef0de68535d829e3aee23921542d1a0ae", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n \n-int f()\n+void f()\n {\n   asm volatile (\"foo%%bar\" : : );\n }"}, {"sha": "917942d7b698a39b92d907dbb25af7d176921c88", "filename": "gcc/testsuite/gcc.dg/asm-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-3.c?ref=5ce89b2ef0de68535d829e3aee23921542d1a0ae", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n \n-int f()\n+void f()\n {\n   asm (\"foo%%bar\");\n }"}, {"sha": "a999c267c3aba4bd98239d573a5d753b502f19c3", "filename": "gcc/testsuite/gcc.dg/attr-invalid.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-invalid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-invalid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-invalid.c?ref=5ce89b2ef0de68535d829e3aee23921542d1a0ae", "patch": "@@ -21,13 +21,14 @@ int ATSYM(var) ATTR;  /* { dg-warning \"attribute ignored\" \"\" } */\n \n int ATSYM(fn_knrarg) (arg)\n   int arg ATTR; /* { dg-warning \"attribute ignored\" \"\" } */\n-{}\n+{ return 0; }\n \n-int ATSYM(fn_isoarg) (int arg ATTR) {} /* { dg-warning \"attribute ignored\" \"\" } */\n+int ATSYM(fn_isoarg) (int arg ATTR) { return 0; } /* { dg-warning \"attribute ignored\" \"\" } */\n \n int ATSYM(fn_vars) (void) {\n   static int svar ATTR; /* { dg-warning \"attribute ignored\" \"\" } */\n   auto int lvar ATTR; /* { dg-warning \"attribute ignored\" \"\" } */\n+  return 0;\n }\n \n \n@@ -46,11 +47,12 @@ int ATSYM(var) ATTR;  /* { dg-warning \"attribute ignored\" \"\" } */\n \n int ATSYM(fn_knrarg) (arg)\n   int arg ATTR; /* { dg-warning \"attribute ignored\" \"\" } */\n-{}\n+{ return 0; }\n \n-int ATSYM(fn_isoarg) (int arg ATTR) {} /* { dg-warning \"attribute ignored\" \"\" } */\n+int ATSYM(fn_isoarg) (int arg ATTR) { return 0; } /* { dg-warning \"attribute ignored\" \"\" } */\n \n int ATSYM(fn_vars) (void) {\n   static int svar ATTR; /* { dg-warning \"attribute ignored\" \"\" } */\n   auto int lvar ATTR; /* { dg-warning \"attribute ignored\" \"\" } */\n+  return 0;\n }"}, {"sha": "ee48eb9ed7e29cd226e5b9b449bb641357c9507e", "filename": "gcc/testsuite/gcc.dg/attr-noinline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-noinline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-noinline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-noinline.c?ref=5ce89b2ef0de68535d829e3aee23921542d1a0ae", "patch": "@@ -43,7 +43,7 @@ static inline void function_declaration_noinline_inline_before(void); /* { dg-wa\n \n static void function_declaration_noinline_inline_before(void) {}\n \n-int f () {\n+void f () {\n   function_definition ();\n   function_declaration_both_before ();\n   function_declaration_both_after ();"}, {"sha": "83557475c445f865f87948d9c4117e3c9f38ca10", "filename": "gcc/testsuite/gcc.dg/deprecated.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.dg%2Fdeprecated.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.dg%2Fdeprecated.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeprecated.c?ref=5ce89b2ef0de68535d829e3aee23921542d1a0ae", "patch": "@@ -13,10 +13,10 @@ INT1 should_be_unavailable; \t\t/* { dg-warning \"`INT1' is deprecated\" \"\" } */\n INT1a should_not_be_deprecated;\n \n INT1 f1(void) __attribute__ ((deprecated)); \n-INT1 f2(void) {}\t\t\t/* { dg-warning \"`INT1' is deprecated\" \"\" } */\n+INT1 f2(void) { return 0; }\t\t/* { dg-warning \"`INT1' is deprecated\" \"\" } */\n \n INT2 f3(void) __attribute__ ((__deprecated__)); \n-INT2 f4(void) {}\t\t\t/* { dg-warning \"`INT2' is deprecated\" \"\" } */\n+INT2 f4(void) { return 0; }\t\t/* { dg-warning \"`INT2' is deprecated\" \"\" } */\n int f5(INT2 x);\t\t\t\t/* { dg-warning \"`INT2' is deprecated\" \"\" } */\n int f6(INT2 x) __attribute__ ((__deprecated__)); /* { dg-warning \"`INT2' is deprecated\" \"\" } */\n "}, {"sha": "0d9b86f6fe53718f1406cf5d80bccef1cf7c5ea9", "filename": "gcc/testsuite/gcc.dg/struct-ret-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct-ret-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct-ret-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct-ret-2.c?ref=5ce89b2ef0de68535d829e3aee23921542d1a0ae", "patch": "@@ -4,7 +4,7 @@\n    Copyright (C) 1999 Free Software Foundation  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O3\" } */\n+/* { dg-options \"-O3 -w\" } */\n \n struct {\n   unsigned i[4];"}, {"sha": "94202504fb586996ee0247c203dc9f608fd1f0f4", "filename": "gcc/testsuite/gcc.misc-tests/bprob-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fbprob-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fbprob-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fbprob-1.c?ref=5ce89b2ef0de68535d829e3aee23921542d1a0ae", "patch": "@@ -68,7 +68,7 @@ test_for2 (int m, int n, int o)\n   return for_temp;\t\t\t/* count(6) */\n }\n \n-int\n+void\n call_for ()\n {\n   for_val1 += test_for1 (0);"}, {"sha": "27ef508cfe6cc39889897b24918dcc54ecda0ea9", "filename": "gcc/testsuite/gcc.misc-tests/gcov-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-4.c?ref=5ce89b2ef0de68535d829e3aee23921542d1a0ae", "patch": "@@ -68,7 +68,7 @@ test_for2 (int m, int n, int o)\n   return for_temp;\t\t\t/* count(6) */\n }\n \n-int\n+void\n call_for ()\n {\n   for_val1 += test_for1 (0);"}, {"sha": "72870b20952d566aba487ef94091f3ffa10d21b3", "filename": "gcc/testsuite/gcc.misc-tests/gcov-4b.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-4b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-4b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-4b.c?ref=5ce89b2ef0de68535d829e3aee23921542d1a0ae", "patch": "@@ -41,7 +41,7 @@ test_for2 (int m, int n, int o)\n   return for_temp;\n }\n \n-int\n+void\n call_for ()\n {\n   for_val1 += test_for1 (0);"}]}