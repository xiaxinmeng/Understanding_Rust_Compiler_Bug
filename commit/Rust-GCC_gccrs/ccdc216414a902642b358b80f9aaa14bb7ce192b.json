{"sha": "ccdc216414a902642b358b80f9aaa14bb7ce192b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NkYzIxNjQxNGE5MDI2NDJiMzU4YjgwZjlhYWExNGJiN2NlMTkyYg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2011-06-22T09:57:02Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2011-06-22T09:57:02Z"}, "message": "invoke.texi (ARM Options): Document -mtls-dialect option.\n\n\t* doc/invoke.texi (ARM Options): Document -mtls-dialect option.\n\t* doc/install.texi (Configuration): Document --with-tls.\n\t* config.gcc (arm*-*-linux*): Default to gnu tls.\n\t(arm*-*-*): Add --with-tls option.\n\t(all_defaults): Add 'tls'.\n\t* config/arm/arm.c (enum tls_reloc): Add TLS_DESCSEQ.\n\t(arm_call_tls_get_addr): Clean up. Assert not tls descriptor.\n\t(arm_tls_descseq_addr): New.\n\t(legitimize_tls_address): Add tlsdesc support.\n\t(arm_cannot_copy_insn_p): Check for tlscall.\n\t(arm_emit_tls_decoration): Likewise.\n\t* config/arm/arm.h (TARGET_GNU2_TLS): New.\n\t(OPTION_DEFAULT_SPECS): Add with-tls support.\n\t* config/arm/arm.md (R1_REGNUM): Define.\n\t(tlscall): New.\n\t* config/arm/arm.opt (tls_type): New enumeration type and values.\n\t(mtls-dialect): New switch.\n\t* config/arm/arm-opts.h (enum tls_type): New.\n\n\ttestsuite/\n\t* gcc.target/arm/tlscall.c: New.\n\nFrom-SVN: r175287", "tree": {"sha": "c569dfb959139fe6dbc9e0be0b3faf1a129cf42a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c569dfb959139fe6dbc9e0be0b3faf1a129cf42a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccdc216414a902642b358b80f9aaa14bb7ce192b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccdc216414a902642b358b80f9aaa14bb7ce192b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccdc216414a902642b358b80f9aaa14bb7ce192b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccdc216414a902642b358b80f9aaa14bb7ce192b/comments", "author": null, "committer": null, "parents": [{"sha": "70e41a6a27a6aad0abbe5598497b4b17ef3feb48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70e41a6a27a6aad0abbe5598497b4b17ef3feb48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70e41a6a27a6aad0abbe5598497b4b17ef3feb48"}], "stats": {"total": 231, "additions": 204, "deletions": 27}, "files": [{"sha": "83c9b1021be4176fc893189d34c2cd0177bb8ba2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccdc216414a902642b358b80f9aaa14bb7ce192b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccdc216414a902642b358b80f9aaa14bb7ce192b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ccdc216414a902642b358b80f9aaa14bb7ce192b", "patch": "@@ -1,3 +1,24 @@\n+2011-06-22  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* doc/invoke.texi (ARM Options): Document -mtls-dialect option.\n+\t* doc/install.texi (Configuration): Document --with-tls.\n+\t* config.gcc (arm*-*-linux*): Default to gnu tls.\n+\t(arm*-*-*): Add --with-tls option.\n+\t(all_defaults): Add 'tls'.\n+\t* config/arm/arm.c (enum tls_reloc): Add TLS_DESCSEQ.\n+\t(arm_call_tls_get_addr): Clean up. Assert not tls descriptor.\n+\t(arm_tls_descseq_addr): New.\n+\t(legitimize_tls_address): Add tlsdesc support.\n+\t(arm_cannot_copy_insn_p): Check for tlscall.\n+\t(arm_emit_tls_decoration): Likewise.\n+\t* config/arm/arm.h (TARGET_GNU2_TLS): New.\n+\t(OPTION_DEFAULT_SPECS): Add with-tls support.\n+\t* config/arm/arm.md (R1_REGNUM): Define.\n+\t(tlscall): New.\n+\t* config/arm/arm.opt (tls_type): New enumeration type and values.\n+\t(mtls-dialect): New switch.\n+\t* config/arm/arm-opts.h (enum tls_type): New.\n+\n 2011-06-21  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* attribs.c (register_attribute): Added assert to check that all"}, {"sha": "6e604db3f45ead92a33e315cf67dcb31baac3761", "filename": "gcc/config/arm/arm-opts.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccdc216414a902642b358b80f9aaa14bb7ce192b/gcc%2Fconfig%2Farm%2Farm-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccdc216414a902642b358b80f9aaa14bb7ce192b/gcc%2Fconfig%2Farm%2Farm-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-opts.h?ref=ccdc216414a902642b358b80f9aaa14bb7ce192b", "patch": "@@ -68,4 +68,9 @@ enum arm_tp_type {\n   TP_CP15\n };\n \n+/* Which TLS scheme to use.  */\n+enum arm_tls_type {\n+  TLS_GNU,\n+  TLS_GNU2\n+};\n #endif"}, {"sha": "88e3b623562d7c51e075a507546db1ec5f366653", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 83, "deletions": 24, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccdc216414a902642b358b80f9aaa14bb7ce192b/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccdc216414a902642b358b80f9aaa14bb7ce192b/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=ccdc216414a902642b358b80f9aaa14bb7ce192b", "patch": "@@ -1009,7 +1009,8 @@ enum tls_reloc {\n   TLS_LDM32,\n   TLS_LDO32,\n   TLS_IE32,\n-  TLS_LE32\n+  TLS_LE32,\n+  TLS_DESCSEQ\t/* GNU scheme */\n };\n \n /* The maximum number of insns to be used when loading a constant.  */\n@@ -5881,6 +5882,7 @@ arm_call_tls_get_addr (rtx x, rtx reg, rtx *valuep, int reloc)\n {\n   rtx insns, label, labelno, sum;\n \n+  gcc_assert (reloc != TLS_DESCSEQ);\n   start_sequence ();\n \n   labelno = GEN_INT (pic_labelno++);\n@@ -5895,20 +5897,42 @@ arm_call_tls_get_addr (rtx x, rtx reg, rtx *valuep, int reloc)\n \n   if (TARGET_ARM)\n     emit_insn (gen_pic_add_dot_plus_eight (reg, reg, labelno));\n-  else if (TARGET_THUMB2)\n-    emit_insn (gen_pic_add_dot_plus_four (reg, reg, labelno));\n-  else /* TARGET_THUMB1 */\n+  else\n     emit_insn (gen_pic_add_dot_plus_four (reg, reg, labelno));\n-\n-  *valuep = emit_library_call_value (get_tls_get_addr (), NULL_RTX, LCT_PURE, /* LCT_CONST?  */\n+  \n+  *valuep = emit_library_call_value (get_tls_get_addr (), NULL_RTX,\n+\t\t\t\t     LCT_PURE, /* LCT_CONST?  */\n \t\t\t\t     Pmode, 1, reg, Pmode);\n-\n+  \n   insns = get_insns ();\n   end_sequence ();\n \n   return insns;\n }\n \n+static rtx\n+arm_tls_descseq_addr (rtx x, rtx reg)\n+{\n+  rtx labelno = GEN_INT (pic_labelno++);\n+  rtx label = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, labelno), UNSPEC_PIC_LABEL);\n+  rtx sum = gen_rtx_UNSPEC (Pmode,\n+\t\t\t    gen_rtvec (4, x, GEN_INT (TLS_DESCSEQ),\n+\t\t\t\t       gen_rtx_CONST (VOIDmode, label),\n+\t\t\t\t       GEN_INT (!TARGET_ARM)),\n+\t\t\t    UNSPEC_TLS);\n+  rtx reg0 = load_tls_operand (sum, gen_rtx_REG (SImode, 0));\n+  \n+  emit_insn (gen_tlscall (x, labelno));\n+  if (!reg)\n+    reg = gen_reg_rtx (SImode);\n+  else\n+    gcc_assert (REGNO (reg) != 0);\n+\n+  emit_move_insn (reg, reg0);\n+\n+  return reg;\n+}\n+\n rtx\n legitimize_tls_address (rtx x, rtx reg)\n {\n@@ -5918,26 +5942,51 @@ legitimize_tls_address (rtx x, rtx reg)\n   switch (model)\n     {\n     case TLS_MODEL_GLOBAL_DYNAMIC:\n-      insns = arm_call_tls_get_addr (x, reg, &ret, TLS_GD32);\n-      dest = gen_reg_rtx (Pmode);\n-      emit_libcall_block (insns, dest, ret, x);\n+      if (TARGET_GNU2_TLS)\n+\t{\n+\t  reg = arm_tls_descseq_addr (x, reg);\n+\n+\t  tp = arm_load_tp (NULL_RTX);\n+\t  \n+\t  dest = gen_rtx_PLUS (Pmode, tp, reg);\n+\t}\n+      else\n+\t{\n+\t  /* Original scheme */\n+\t  insns = arm_call_tls_get_addr (x, reg, &ret, TLS_GD32);\n+\t  dest = gen_reg_rtx (Pmode);\n+\t  emit_libcall_block (insns, dest, ret, x);\n+\t}\n       return dest;\n \n     case TLS_MODEL_LOCAL_DYNAMIC:\n-      insns = arm_call_tls_get_addr (x, reg, &ret, TLS_LDM32);\n-\n-      /* Attach a unique REG_EQUIV, to allow the RTL optimizers to\n-\t share the LDM result with other LD model accesses.  */\n-      eqv = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, const1_rtx),\n-\t\t\t    UNSPEC_TLS);\n-      dest = gen_reg_rtx (Pmode);\n-      emit_libcall_block (insns, dest, ret, eqv);\n+      if (TARGET_GNU2_TLS)\n+\t{\n+\t  reg = arm_tls_descseq_addr (x, reg);\n \n-      /* Load the addend.  */\n-      addend = gen_rtx_UNSPEC (Pmode, gen_rtvec (2, x, GEN_INT (TLS_LDO32)),\n-\t\t\t       UNSPEC_TLS);\n-      addend = force_reg (SImode, gen_rtx_CONST (SImode, addend));\n-      return gen_rtx_PLUS (Pmode, dest, addend);\n+\t  tp = arm_load_tp (NULL_RTX);\n+\t  \n+\t  dest = gen_rtx_PLUS (Pmode, tp, reg);\n+\t}\n+      else\n+\t{\n+\t  insns = arm_call_tls_get_addr (x, reg, &ret, TLS_LDM32);\n+\t  \n+\t  /* Attach a unique REG_EQUIV, to allow the RTL optimizers to\n+\t     share the LDM result with other LD model accesses.  */\n+\t  eqv = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, const1_rtx),\n+\t\t\t\tUNSPEC_TLS);\n+\t  dest = gen_reg_rtx (Pmode);\n+\t  emit_libcall_block (insns, dest, ret, eqv);\n+\t  \n+\t  /* Load the addend.  */\n+\t  addend = gen_rtx_UNSPEC (Pmode, gen_rtvec (2, x,\n+\t\t\t\t\t\t     GEN_INT (TLS_LDO32)),\n+\t\t\t\t   UNSPEC_TLS);\n+\t  addend = force_reg (SImode, gen_rtx_CONST (SImode, addend));\n+\t  dest = gen_rtx_PLUS (Pmode, dest, addend);\n+\t}\n+      return dest;\n \n     case TLS_MODEL_INITIAL_EXEC:\n       labelno = GEN_INT (pic_labelno++);\n@@ -9384,6 +9433,11 @@ arm_note_pic_base (rtx *x, void *date ATTRIBUTE_UNUSED)\n static bool\n arm_cannot_copy_insn_p (rtx insn)\n {\n+  /* The tls call insn cannot be copied, as it is paired with a data\n+     word.  */\n+  if (recog_memoized (insn) == CODE_FOR_tlscall)\n+    return true;\n+  \n   return for_each_rtx (&PATTERN (insn), arm_note_pic_base, NULL);\n }\n \n@@ -22912,6 +22966,9 @@ arm_emit_tls_decoration (FILE *fp, rtx x)\n     case TLS_LE32:\n       fputs (\"(tpoff)\", fp);\n       break;\n+    case TLS_DESCSEQ:\n+      fputs (\"(tlsdesc)\", fp);\n+      break;\n     default:\n       gcc_unreachable ();\n     }\n@@ -22921,9 +22978,11 @@ arm_emit_tls_decoration (FILE *fp, rtx x)\n     case TLS_GD32:\n     case TLS_LDM32:\n     case TLS_IE32:\n+    case TLS_DESCSEQ:\n       fputs (\" + (. - \", fp);\n       output_addr_const (fp, XVECEXP (x, 0, 2));\n-      fputs (\" - \", fp);\n+      /* For DESCSEQ the 3rd operand encodes thumbness, and is added */\n+      fputs (reloc == TLS_DESCSEQ ? \" + \" : \" - \", fp);\n       output_addr_const (fp, XVECEXP (x, 0, 3));\n       fputc (')', fp);\n       break;"}, {"sha": "f030f418b8a46b9553a6cd5d1cde3269d6d99b64", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccdc216414a902642b358b80f9aaa14bb7ce192b/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccdc216414a902642b358b80f9aaa14bb7ce192b/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=ccdc216414a902642b358b80f9aaa14bb7ce192b", "patch": "@@ -220,6 +220,7 @@ extern void (*arm_lang_output_object_attributes_hook)(void);\n \n #define TARGET_HARD_TP\t\t\t(target_thread_pointer == TP_CP15)\n #define TARGET_SOFT_TP\t\t\t(target_thread_pointer == TP_SOFT)\n+#define TARGET_GNU2_TLS\t\t\t(target_tls_dialect == TLS_GNU2)\n \n /* Only 16-bit thumb code.  */\n #define TARGET_THUMB1\t\t\t(TARGET_THUMB && !arm_arch_thumb2)\n@@ -313,15 +314,17 @@ extern void (*arm_lang_output_object_attributes_hook)(void);\n      by -march).\n    --with-float is ignored if -mfloat-abi is specified.\n    --with-fpu is ignored if -mfpu is specified.\n-   --with-abi is ignored is -mabi is specified.  */\n+   --with-abi is ignored if -mabi is specified.\n+   --with-tls is ignored if -mtls-dialect is specified. */\n #define OPTION_DEFAULT_SPECS \\\n   {\"arch\", \"%{!march=*:%{!mcpu=*:-march=%(VALUE)}}\" }, \\\n   {\"cpu\", \"%{!march=*:%{!mcpu=*:-mcpu=%(VALUE)}}\" }, \\\n   {\"tune\", \"%{!mcpu=*:%{!mtune=*:-mtune=%(VALUE)}}\" }, \\\n   {\"float\", \"%{!mfloat-abi=*:-mfloat-abi=%(VALUE)}\" }, \\\n   {\"fpu\", \"%{!mfpu=*:-mfpu=%(VALUE)}\"}, \\\n   {\"abi\", \"%{!mabi=*:-mabi=%(VALUE)}\"}, \\\n-  {\"mode\", \"%{!marm:%{!mthumb:-m%(VALUE)}}\"},\n+  {\"mode\", \"%{!marm:%{!mthumb:-m%(VALUE)}}\"}, \\\n+  {\"tls\", \"%{!mtls-dialect:-mtls-dialect=%(VALUE)}\"},\n \n /* Which floating point model to use.  */\n enum arm_fp_model"}, {"sha": "431208ef7d2da00b9a9b53ed44479e00dd937487", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccdc216414a902642b358b80f9aaa14bb7ce192b/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccdc216414a902642b358b80f9aaa14bb7ce192b/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=ccdc216414a902642b358b80f9aaa14bb7ce192b", "patch": "@@ -31,6 +31,7 @@\n ;; Register numbers\n (define_constants\n   [(R0_REGNUM        0)\t\t; First CORE register\n+   (R1_REGNUM\t     1)\t\t; Second CORE register\n    (IP_REGNUM\t    12)\t\t; Scratch register\n    (SP_REGNUM\t    13)\t\t; Stack pointer\n    (LR_REGNUM       14)\t\t; Return address register\n@@ -10719,6 +10720,27 @@\n   [(set_attr \"conds\" \"clob\")]\n )\n \n+;; tls descriptor call\n+(define_insn \"tlscall\"\n+  [(set (reg:SI R0_REGNUM)\n+        (unspec:SI [(reg:SI R0_REGNUM)\n+                    (match_operand:SI 0 \"\" \"X\")\n+\t            (match_operand 1 \"\" \"\")] UNSPEC_TLS))\n+   (clobber (reg:SI R1_REGNUM))\n+   (clobber (reg:SI LR_REGNUM))\n+   (clobber (reg:SI CC_REGNUM))]\n+  \"TARGET_GNU2_TLS\"\n+  {\n+    targetm.asm_out.internal_label (asm_out_file, \"LPIC\",\n+\t\t\t\t    INTVAL (operands[1]));\n+    return \"bl\\\\t%c0(tlscall)\";\n+  }\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"4\")]\n+)\n+\n+;;\n+\n ;; We only care about the lower 16 bits of the constant \n ;; being inserted into the upper 16 bits of the register.\n (define_insn \"*arm_movtas_ze\" "}, {"sha": "48a5cb346f74ab45d189e80ee6fdb0224dbb8735", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccdc216414a902642b358b80f9aaa14bb7ce192b/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccdc216414a902642b358b80f9aaa14bb7ce192b/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=ccdc216414a902642b358b80f9aaa14bb7ce192b", "patch": "@@ -21,6 +21,16 @@\n HeaderInclude\n config/arm/arm-opts.h\n \n+Enum\n+Name(tls_type) Type(enum arm_tls_type)\n+TLS dialect to use:\n+\n+EnumValue\n+Enum(tls_type) String(gnu) Value(TLS_GNU)\n+\n+EnumValue\n+Enum(tls_type) String(gnu2) Value(TLS_GNU2)\n+\n mabi=\n Target RejectNegative Joined Enum(arm_abi_type) Var(arm_abi) Init(ARM_DEFAULT_ABI)\n Specify an ABI\n@@ -190,6 +200,10 @@ mthumb-interwork\n Target Report Mask(INTERWORK)\n Support calls between Thumb and ARM instruction sets\n \n+mtls-dialect=\n+Target RejectNegative Joined Enum(tls_type) Var(target_tls_dialect) Init(TLS_GNU)\n+Specify thread local storage scheme\n+\n mtp=\n Target RejectNegative Joined Enum(arm_tp_type) Var(target_thread_pointer) Init(TP_AUTO)\n Specify how to access the thread pointer"}, {"sha": "a4a1b04519c713988b73d0fcbfbe99449578314c", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccdc216414a902642b358b80f9aaa14bb7ce192b/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccdc216414a902642b358b80f9aaa14bb7ce192b/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=ccdc216414a902642b358b80f9aaa14bb7ce192b", "patch": "@@ -1016,6 +1016,12 @@ information normally used on 386 SVR4 platforms; stabs provide a\n workable alternative.  This requires gas and gdb, as the normal SVR4\n tools can not generate or interpret stabs.\n \n+@item --with-tls=@var{dialect}\n+Specify the default TLS dialect, for systems were there is a choice.\n+For ARM targets, possible values for @var{dialect} are @code{gnu} or\n+@code{gnu2}, which select between the original GNU dialect and the GNU TLS\n+descriptor-based dialect.\n+\n @item --disable-multilib\n Specify that multiple target\n libraries to support different target variants, calling"}, {"sha": "d397d607f1c7fc2790fc879f39c0131ebe126210", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccdc216414a902642b358b80f9aaa14bb7ce192b/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccdc216414a902642b358b80f9aaa14bb7ce192b/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ccdc216414a902642b358b80f9aaa14bb7ce192b", "patch": "@@ -477,7 +477,7 @@ Objective-C and Objective-C++ Dialects}.\n -mthumb  -marm @gol\n -mtpcs-frame  -mtpcs-leaf-frame @gol\n -mcaller-super-interworking  -mcallee-super-interworking @gol\n--mtp=@var{name} @gol\n+-mtp=@var{name} -mtls-dialect=@var{dialect} @gol\n -mword-relocations @gol\n -mfix-cortex-m3-ldrd}\n \n@@ -10471,6 +10471,18 @@ models are @option{soft}, which generates calls to @code{__aeabi_read_tp},\n best available method for the selected processor.  The default setting is\n @option{auto}.\n \n+@item -mtls-dialect=@var{dialect}\n+@opindex mtls-dialect\n+Specify the dialect to use for accessing thread local storage.  Two\n+dialects are supported --- @option{gnu} and @option{gnu2}.  The\n+@option{gnu} dialect selects the original GNU scheme for supporting\n+local and global dynamic TLS models.  The @option{gnu2} dialect\n+selects the GNU descriptor scheme, which provides better performance\n+for shared libraries.  The GNU descriptor scheme is compatible with\n+the original scheme, but does require new assembler, linker and\n+library support.  Initial and local exec TLS models are unaffected by\n+this option and always use the original scheme.\n+\n @item -mword-relocations\n @opindex mword-relocations\n Only generate absolute relocations on word sized values (i.e. R_ARM_ABS32)."}, {"sha": "883d355903dd101d6721aee7925a21643fc45ea5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccdc216414a902642b358b80f9aaa14bb7ce192b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccdc216414a902642b358b80f9aaa14bb7ce192b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ccdc216414a902642b358b80f9aaa14bb7ce192b", "patch": "@@ -1,3 +1,7 @@\n+2011-06-22  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* gcc.target/arm/tlscall.c: New.\n+\n 2011-06-21  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/49172"}, {"sha": "366c1ae712376afe350bf8679a79b29d2ee9e868", "filename": "gcc/testsuite/gcc.target/arm/tlscall.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccdc216414a902642b358b80f9aaa14bb7ce192b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ftlscall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccdc216414a902642b358b80f9aaa14bb7ce192b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ftlscall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ftlscall.c?ref=ccdc216414a902642b358b80f9aaa14bb7ce192b", "patch": "@@ -0,0 +1,31 @@\n+/* Test non-duplication of tlscall insn */\n+\n+/* { dg-do assemble } */\n+/* { dg-options \"-O2 -fPIC -mtls-dialect=gnu2\" } */\n+\n+typedef struct _IO_FILE FILE;\n+\n+extern int foo(void);\n+extern int bar(void);\n+\n+void uuid__generate_time()\n+{\n+ static int has_init = 0;\n+ static __thread int state_fd = -2;\n+ static __thread FILE *state_f;\n+\n+ if (!has_init) {\n+   foo();\n+   has_init = 1;\n+ }\n+\n+ if (state_fd == -2) {\n+  if (!state_f) {\n+   state_fd = -1;\n+  }\n+ }\n+ if (state_fd >= 0) {\n+  while (bar() < 0) {}\n+ }\n+\n+}"}]}