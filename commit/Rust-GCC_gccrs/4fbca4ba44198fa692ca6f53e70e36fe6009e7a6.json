{"sha": "4fbca4ba44198fa692ca6f53e70e36fe6009e7a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZiY2E0YmE0NDE5OGZhNjkyY2E2ZjUzZTcwZTM2ZmU2MDA5ZTdhNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-09-03T18:36:10Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-09-03T18:36:10Z"}, "message": "output.h (get_some_local_dynamic_name): Declare.\n\ngcc/\n\t* output.h (get_some_local_dynamic_name): Declare.\n\t* final.c (some_local_dynamic_name): New variable.\n\t(get_some_local_dynamic_name): New function.\n\t(final_end_function): Clear some_local_dynamic_name.\n\t* config/alpha/alpha.c (machine_function): Remove some_ld_name.\n\t(get_some_local_dynamic_name, get_some_local_dynamic_name_1): Delete.\n\t(print_operand): Report an error if '%&' is used inappropriately.\n\t* config/i386/i386.c (get_some_local_dynamic_name): Delete.\n\t(get_some_local_dynamic_name_1): Delete.\n\t* config/rs6000/rs6000.c (machine_function): Remove some_ld_name.\n\t(rs6000_get_some_local_dynamic_name): Delete.\n\t(rs6000_get_some_local_dynamic_name_1): Delete.\n\t(print_operand): Report an error if '%&' is used inappropriately.\n\t* config/s390/s390.c (machine_function): Remove some_ld_name.\n\t(get_some_local_dynamic_name, get_some_local_dynamic_name_1): Delete.\n\t(print_operand): Assert that get_some_local_dynamic_name is nonnull.\n\t* config/sparc/sparc.c: Include rtl-iter.h.\n\t(machine_function): Remove some_ld_name.\n\t(sparc_print_operand): Report an error if '%&' is used inappropriately.\n\t(get_some_local_dynamic_name, get_some_local_dynamic_name_1): Delete.\n\nFrom-SVN: r214889", "tree": {"sha": "c9154659b0fa458cc8b2e9802ac3e0935f722369", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9154659b0fa458cc8b2e9802ac3e0935f722369"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fbca4ba44198fa692ca6f53e70e36fe6009e7a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fbca4ba44198fa692ca6f53e70e36fe6009e7a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fbca4ba44198fa692ca6f53e70e36fe6009e7a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fbca4ba44198fa692ca6f53e70e36fe6009e7a6/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dd991abb1bb40648f53a1b8014b485ed0ea3ac4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd991abb1bb40648f53a1b8014b485ed0ea3ac4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd991abb1bb40648f53a1b8014b485ed0ea3ac4c"}], "stats": {"total": 282, "additions": 78, "deletions": 204}, "files": [{"sha": "d248a107b6f5ec747cd325aa645655b39e7d287e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbca4ba44198fa692ca6f53e70e36fe6009e7a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbca4ba44198fa692ca6f53e70e36fe6009e7a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4fbca4ba44198fa692ca6f53e70e36fe6009e7a6", "patch": "@@ -1,3 +1,26 @@\n+2014-09-03  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* output.h (get_some_local_dynamic_name): Declare.\n+\t* final.c (some_local_dynamic_name): New variable.\n+\t(get_some_local_dynamic_name): New function.\n+\t(final_end_function): Clear some_local_dynamic_name.\n+\t* config/alpha/alpha.c (machine_function): Remove some_ld_name.\n+\t(get_some_local_dynamic_name, get_some_local_dynamic_name_1): Delete.\n+\t(print_operand): Report an error if '%&' is used inappropriately.\n+\t* config/i386/i386.c (get_some_local_dynamic_name): Delete.\n+\t(get_some_local_dynamic_name_1): Delete.\n+\t* config/rs6000/rs6000.c (machine_function): Remove some_ld_name.\n+\t(rs6000_get_some_local_dynamic_name): Delete.\n+\t(rs6000_get_some_local_dynamic_name_1): Delete.\n+\t(print_operand): Report an error if '%&' is used inappropriately.\n+\t* config/s390/s390.c (machine_function): Remove some_ld_name.\n+\t(get_some_local_dynamic_name, get_some_local_dynamic_name_1): Delete.\n+\t(print_operand): Assert that get_some_local_dynamic_name is nonnull.\n+\t* config/sparc/sparc.c: Include rtl-iter.h.\n+\t(machine_function): Remove some_ld_name.\n+\t(sparc_print_operand): Report an error if '%&' is used inappropriately.\n+\t(get_some_local_dynamic_name, get_some_local_dynamic_name_1): Delete.\n+\n 2014-09-03  Richard Henderson  <rth@redhat.com>\n \n \t* config/aarch64/aarch64.c (aarch64_popwb_single_reg): Remove."}, {"sha": "a011daf4b2d6a0a83bbb0fa9c0185fe60c506d57", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 5, "deletions": 38, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbca4ba44198fa692ca6f53e70e36fe6009e7a6/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbca4ba44198fa692ca6f53e70e36fe6009e7a6/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=4fbca4ba44198fa692ca6f53e70e36fe6009e7a6", "patch": "@@ -4858,9 +4858,6 @@ struct GTY(()) alpha_links;\n \n struct GTY(()) machine_function\n {\n-  /* For OSF.  */\n-  const char *some_ld_name;\n-\n   /* For flag_reorder_blocks_and_partition.  */\n   rtx gp_save_rtx;\n \n@@ -5120,40 +5117,6 @@ get_round_mode_suffix (void)\n   gcc_unreachable ();\n }\n \n-/* Locate some local-dynamic symbol still in use by this function\n-   so that we can print its name in some movdi_er_tlsldm pattern.  */\n-\n-static int\n-get_some_local_dynamic_name_1 (rtx *px, void *data ATTRIBUTE_UNUSED)\n-{\n-  rtx x = *px;\n-\n-  if (GET_CODE (x) == SYMBOL_REF\n-      && SYMBOL_REF_TLS_MODEL (x) == TLS_MODEL_LOCAL_DYNAMIC)\n-    {\n-      cfun->machine->some_ld_name = XSTR (x, 0);\n-      return 1;\n-    }\n-\n-  return 0;\n-}\n-\n-static const char *\n-get_some_local_dynamic_name (void)\n-{\n-  rtx_insn *insn;\n-\n-  if (cfun->machine->some_ld_name)\n-    return cfun->machine->some_ld_name;\n-\n-  for (insn = get_insns (); insn ; insn = NEXT_INSN (insn))\n-    if (INSN_P (insn)\n-\t&& for_each_rtx (&PATTERN (insn), get_some_local_dynamic_name_1, 0))\n-      return cfun->machine->some_ld_name;\n-\n-  gcc_unreachable ();\n-}\n-\n /* Print an operand.  Recognize special options, documented below.  */\n \n void\n@@ -5169,7 +5132,11 @@ print_operand (FILE *file, rtx x, int code)\n       break;\n \n     case '&':\n-      assemble_name (file, get_some_local_dynamic_name ());\n+      if (const char *name = get_some_local_dynamic_name ())\n+\tassemble_name (file, name);\n+      else\n+\toutput_operand_lossage (\"'%%&' used without any \"\n+\t\t\t\t\"local dynamic TLS references\");\n       break;\n \n     case '/':"}, {"sha": "a11771846fddd51e6e5e547b540cccb299027f31", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbca4ba44198fa692ca6f53e70e36fe6009e7a6/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbca4ba44198fa692ca6f53e70e36fe6009e7a6/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=4fbca4ba44198fa692ca6f53e70e36fe6009e7a6", "patch": "@@ -14756,41 +14756,6 @@ print_reg (rtx x, int code, FILE *file)\n     }\n }\n \n-/* Locate some local-dynamic symbol still in use by this function\n-   so that we can print its name in some tls_local_dynamic_base\n-   pattern.  */\n-\n-static int\n-get_some_local_dynamic_name_1 (rtx *px, void *)\n-{\n-  rtx x = *px;\n-\n-  if (GET_CODE (x) == SYMBOL_REF\n-      && SYMBOL_REF_TLS_MODEL (x) == TLS_MODEL_LOCAL_DYNAMIC)\n-    {\n-      cfun->machine->some_ld_name = XSTR (x, 0);\n-      return 1;\n-    }\n-\n-  return 0;\n-}\n-\n-static const char *\n-get_some_local_dynamic_name (void)\n-{\n-  rtx_insn *insn;\n-\n-  if (cfun->machine->some_ld_name)\n-    return cfun->machine->some_ld_name;\n-\n-  for (insn = get_insns (); insn ; insn = NEXT_INSN (insn))\n-    if (NONDEBUG_INSN_P (insn)\n-\t&& for_each_rtx (&PATTERN (insn), get_some_local_dynamic_name_1, 0))\n-      return cfun->machine->some_ld_name;\n-\n-  return NULL;\n-}\n-\n /* Meaning of CODE:\n    L,W,B,Q,S,T -- print the opcode suffix for specified size of operand.\n    C -- print opcode suffix for set/cmov insn."}, {"sha": "58f23ea57a1175cd7458f12f62abc6401fef9da3", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 5, "deletions": 44, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbca4ba44198fa692ca6f53e70e36fe6009e7a6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbca4ba44198fa692ca6f53e70e36fe6009e7a6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=4fbca4ba44198fa692ca6f53e70e36fe6009e7a6", "patch": "@@ -143,8 +143,6 @@ typedef struct rs6000_stack {\n    This is added to the cfun structure.  */\n typedef struct GTY(()) machine_function\n {\n-  /* Some local-dynamic symbol.  */\n-  const char *some_ld_name;\n   /* Whether the instruction chain has been scanned already.  */\n   int insn_chain_scanned_p;\n   /* Flags if __builtin_return_address (n) with n >= 1 was used.  */\n@@ -1104,7 +1102,6 @@ static void is_altivec_return_reg (rtx, void *);\n int easy_vector_constant (rtx, enum machine_mode);\n static rtx rs6000_debug_legitimize_address (rtx, rtx, enum machine_mode);\n static rtx rs6000_legitimize_tls_address (rtx, enum tls_model);\n-static int rs6000_get_some_local_dynamic_name_1 (rtx *, void *);\n static rtx rs6000_darwin64_record_arg (CUMULATIVE_ARGS *, const_tree,\n \t\t\t\t       bool, bool);\n #if TARGET_MACHO\n@@ -17938,46 +17935,6 @@ extract_ME (rtx op)\n   return i;\n }\n \n-/* Locate some local-dynamic symbol still in use by this function\n-   so that we can print its name in some tls_ld pattern.  */\n-\n-static const char *\n-rs6000_get_some_local_dynamic_name (void)\n-{\n-  rtx_insn *insn;\n-\n-  if (cfun->machine->some_ld_name)\n-    return cfun->machine->some_ld_name;\n-\n-  for (insn = get_insns (); insn ; insn = NEXT_INSN (insn))\n-    if (INSN_P (insn)\n-\t&& for_each_rtx (&PATTERN (insn),\n-\t\t\t rs6000_get_some_local_dynamic_name_1, 0))\n-      return cfun->machine->some_ld_name;\n-\n-  gcc_unreachable ();\n-}\n-\n-/* Helper function for rs6000_get_some_local_dynamic_name.  */\n-\n-static int\n-rs6000_get_some_local_dynamic_name_1 (rtx *px, void *data ATTRIBUTE_UNUSED)\n-{\n-  rtx x = *px;\n-\n-  if (GET_CODE (x) == SYMBOL_REF)\n-    {\n-      const char *str = XSTR (x, 0);\n-      if (SYMBOL_REF_TLS_MODEL (x) == TLS_MODEL_LOCAL_DYNAMIC)\n-\t{\n-\t  cfun->machine->some_ld_name = str;\n-\t  return 1;\n-\t}\n-    }\n-\n-  return 0;\n-}\n-\n /* Write out a function code label.  */\n \n void\n@@ -18653,7 +18610,11 @@ print_operand (FILE *file, rtx x, int code)\n       return;\n \n     case '&':\n-      assemble_name (file, rs6000_get_some_local_dynamic_name ());\n+      if (const char *name = get_some_local_dynamic_name ())\n+\tassemble_name (file, name);\n+      else\n+\toutput_operand_lossage (\"'%%&' used without any \"\n+\t\t\t\t\"local dynamic TLS references\");\n       return;\n \n     default:"}, {"sha": "f7a95dd60933afe969f7a9a82623e4138d9dd828", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 3, "deletions": 46, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbca4ba44198fa692ca6f53e70e36fe6009e7a6/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbca4ba44198fa692ca6f53e70e36fe6009e7a6/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=4fbca4ba44198fa692ca6f53e70e36fe6009e7a6", "patch": "@@ -387,9 +387,6 @@ struct GTY(()) machine_function\n   /* True if we may need to perform branch splitting.  */\n   bool split_branches_pending_p;\n \n-  /* Some local-dynamic TLS symbol name.  */\n-  const char *some_ld_name;\n-\n   bool has_landing_pad_p;\n \n   /* True if the current function may contain a tbegin clobbering\n@@ -5197,48 +5194,6 @@ print_shift_count_operand (FILE *file, rtx op)\n     fprintf (file, \"(%s)\", reg_names[REGNO (base)]);\n }\n \n-/* See 'get_some_local_dynamic_name'.  */\n-\n-static int\n-get_some_local_dynamic_name_1 (rtx *px, void *data ATTRIBUTE_UNUSED)\n-{\n-  rtx x = *px;\n-\n-  if (GET_CODE (x) == SYMBOL_REF && CONSTANT_POOL_ADDRESS_P (x))\n-    {\n-      x = get_pool_constant (x);\n-      return for_each_rtx (&x, get_some_local_dynamic_name_1, 0);\n-    }\n-\n-  if (GET_CODE (x) == SYMBOL_REF\n-      && tls_symbolic_operand (x) == TLS_MODEL_LOCAL_DYNAMIC)\n-    {\n-      cfun->machine->some_ld_name = XSTR (x, 0);\n-      return 1;\n-    }\n-\n-  return 0;\n-}\n-\n-/* Locate some local-dynamic symbol still in use by this function\n-   so that we can print its name in local-dynamic base patterns.  */\n-\n-static const char *\n-get_some_local_dynamic_name (void)\n-{\n-  rtx_insn *insn;\n-\n-  if (cfun->machine->some_ld_name)\n-    return cfun->machine->some_ld_name;\n-\n-  for (insn = get_insns (); insn ; insn = NEXT_INSN (insn))\n-    if (INSN_P (insn)\n-        && for_each_rtx (&PATTERN (insn), get_some_local_dynamic_name_1, 0))\n-      return cfun->machine->some_ld_name;\n-\n-  gcc_unreachable ();\n-}\n-\n /* Returns -1 if the function should not be made hotpatchable.  Otherwise it\n    returns a number >= 0 that is the desired size of the hotpatch trampoline\n    in halfwords. */\n@@ -5508,7 +5463,9 @@ print_operand (FILE *file, rtx x, int code)\n       else if (GET_CODE (x) == UNSPEC && XINT (x, 1) == UNSPEC_TLSLDM)\n \t{\n \t  fprintf (file, \"%s\", \":tls_ldcall:\");\n-\t  assemble_name (file, get_some_local_dynamic_name ());\n+\t  const char *name = get_some_local_dynamic_name ();\n+\t  gcc_assert (name);\n+\t  assemble_name (file, name);\n \t}\n       else\n \toutput_operand_lossage (\"invalid reference for 'J' output modifier\");"}, {"sha": "866afb1e59bbcc10b424366d99f67053c7e34edb", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 6, "deletions": 41, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbca4ba44198fa692ca6f53e70e36fe6009e7a6/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbca4ba44198fa692ca6f53e70e36fe6009e7a6/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=4fbca4ba44198fa692ca6f53e70e36fe6009e7a6", "patch": "@@ -70,6 +70,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"context.h\"\n #include \"wide-int.h\"\n #include \"builtins.h\"\n+#include \"rtl-iter.h\"\n \n /* Processor costs */\n \n@@ -500,9 +501,6 @@ struct GTY(()) machine_function\n   rtx frame_base_reg;\n   HOST_WIDE_INT frame_base_offset;\n \n-  /* Some local-dynamic TLS symbol name.  */\n-  const char *some_ld_name;\n-\n   /* Number of global or FP registers to be saved (as 4-byte quantities).  */\n   int n_global_fp_regs;\n \n@@ -584,8 +582,6 @@ static struct machine_function * sparc_init_machine_status (void);\n static bool sparc_cannot_force_const_mem (enum machine_mode, rtx);\n static rtx sparc_tls_get_addr (void);\n static rtx sparc_tls_got (void);\n-static const char *get_some_local_dynamic_name (void);\n-static int get_some_local_dynamic_name_1 (rtx *, void *);\n static int sparc_register_move_cost (enum machine_mode,\n \t\t\t\t     reg_class_t, reg_class_t);\n static bool sparc_rtx_costs (rtx, int, int, int, int *, bool);\n@@ -8790,7 +8786,11 @@ sparc_print_operand (FILE *file, rtx x, int code)\n       return;\n     case '&':\n       /* Print some local dynamic TLS name.  */\n-      assemble_name (file, get_some_local_dynamic_name ());\n+      if (const char *name = get_some_local_dynamic_name ())\n+\tassemble_name (file, name);\n+      else\n+\toutput_operand_lossage (\"'%%&' used without any \"\n+\t\t\t\t\"local dynamic TLS references\");\n       return;\n \n     case 'Y':\n@@ -11484,41 +11484,6 @@ sparc_init_machine_status (void)\n   return ggc_cleared_alloc<machine_function> ();\n }\n \n-/* Locate some local-dynamic symbol still in use by this function\n-   so that we can print its name in local-dynamic base patterns.  */\n-\n-static const char *\n-get_some_local_dynamic_name (void)\n-{\n-  rtx_insn *insn;\n-\n-  if (cfun->machine->some_ld_name)\n-    return cfun->machine->some_ld_name;\n-\n-  for (insn = get_insns (); insn ; insn = NEXT_INSN (insn))\n-    if (INSN_P (insn)\n-\t&& for_each_rtx (&PATTERN (insn), get_some_local_dynamic_name_1, 0))\n-      return cfun->machine->some_ld_name;\n-\n-  gcc_unreachable ();\n-}\n-\n-static int\n-get_some_local_dynamic_name_1 (rtx *px, void *data ATTRIBUTE_UNUSED)\n-{\n-  rtx x = *px;\n-\n-  if (x\n-      && GET_CODE (x) == SYMBOL_REF\n-      && SYMBOL_REF_TLS_MODEL (x) == TLS_MODEL_LOCAL_DYNAMIC)\n-    {\n-      cfun->machine->some_ld_name = XSTR (x, 0);\n-      return 1;\n-    }\n-\n-  return 0;\n-}\n-\n /* This is called from dwarf2out.c via TARGET_ASM_OUTPUT_DWARF_DTPREL.\n    We need to emit DTP-relative relocations.  */\n "}, {"sha": "6469f408b44c5b72ed39111e03e08f7e59e2e423", "filename": "gcc/final.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbca4ba44198fa692ca6f53e70e36fe6009e7a6/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbca4ba44198fa692ca6f53e70e36fe6009e7a6/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=4fbca4ba44198fa692ca6f53e70e36fe6009e7a6", "patch": "@@ -1719,6 +1719,38 @@ reemit_insn_block_notes (void)\n   reorder_blocks ();\n }\n \n+static const char *some_local_dynamic_name;\n+\n+/* Locate some local-dynamic symbol still in use by this function\n+   so that we can print its name in local-dynamic base patterns.\n+   Return null if there are no local-dynamic references.  */\n+\n+const char *\n+get_some_local_dynamic_name ()\n+{\n+  subrtx_iterator::array_type array;\n+  rtx_insn *insn;\n+\n+  if (some_local_dynamic_name)\n+    return some_local_dynamic_name;\n+\n+  for (insn = get_insns (); insn ; insn = NEXT_INSN (insn))\n+    if (NONDEBUG_INSN_P (insn))\n+      FOR_EACH_SUBRTX (iter, array, PATTERN (insn), ALL)\n+\t{\n+\t  const_rtx x = *iter;\n+\t  if (GET_CODE (x) == SYMBOL_REF)\n+\t    {\n+\t      if (SYMBOL_REF_TLS_MODEL (x) == TLS_MODEL_LOCAL_DYNAMIC)\n+\t\treturn some_local_dynamic_name = XSTR (x, 0);\n+\t      if (CONSTANT_POOL_ADDRESS_P (x))\n+\t\titer.substitute (get_pool_constant (x));\n+\t    }\n+\t}\n+\n+  return 0;\n+}\n+\n /* Output assembler code for the start of a function,\n    and initialize some of the variables in this file\n    for the new function.  The label for the function and associated\n@@ -1904,6 +1936,8 @@ final_end_function (void)\n   if (!dwarf2_debug_info_emitted_p (current_function_decl)\n       && dwarf2out_do_frame ())\n     dwarf2out_end_epilogue (last_linenum, last_filename);\n+\n+  some_local_dynamic_name = 0;\n }\n \f\n "}, {"sha": "a2ac1ec8bce7dce51498a224eeb5df0dbf5d095c", "filename": "gcc/output.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbca4ba44198fa692ca6f53e70e36fe6009e7a6/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbca4ba44198fa692ca6f53e70e36fe6009e7a6/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=4fbca4ba44198fa692ca6f53e70e36fe6009e7a6", "patch": "@@ -52,6 +52,8 @@ extern int get_attr_min_length (rtx);\n    any branches of variable length if possible.  */\n extern void shorten_branches (rtx_insn *);\n \n+const char *get_some_local_dynamic_name ();\n+\n /* Output assembler code for the start of a function,\n    and initialize some of the variables in this file\n    for the new function.  The label for the function and associated"}]}