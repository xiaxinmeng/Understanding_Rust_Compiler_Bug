{"sha": "a1998fab44f12c5d4553e62d33b974f7ec189477", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE5OThmYWI0NGYxMmM1ZDQ1NTNlNjJkMzNiOTc0ZjdlYzE4OTQ3Nw==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@normalesup.org", "date": "2011-08-18T14:59:47Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2011-08-18T14:59:47Z"}, "message": "Use Solaris prototypes if possible (PR libstdc++-v3/1773)\n\nCo-Authored-By: Rainer Orth <ro@CeBiTec.Uni-Bielefeld.DE>\n\nFrom-SVN: r177866", "tree": {"sha": "e1ac4cec20e9f3be646050a685354d96a5798a90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1ac4cec20e9f3be646050a685354d96a5798a90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1998fab44f12c5d4553e62d33b974f7ec189477", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1998fab44f12c5d4553e62d33b974f7ec189477", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1998fab44f12c5d4553e62d33b974f7ec189477", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1998fab44f12c5d4553e62d33b974f7ec189477/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9181a6e5b0beb4486bcd8c5d5b53d6e10cfc89ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9181a6e5b0beb4486bcd8c5d5b53d6e10cfc89ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9181a6e5b0beb4486bcd8c5d5b53d6e10cfc89ad"}], "stats": {"total": 408, "additions": 403, "deletions": 5}, "files": [{"sha": "e45c891df2444c4010576ca198e723d1180fc470", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1998fab44f12c5d4553e62d33b974f7ec189477/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1998fab44f12c5d4553e62d33b974f7ec189477/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a1998fab44f12c5d4553e62d33b974f7ec189477", "patch": "@@ -1,3 +1,63 @@\n+2011-08-18  Marc Glisse  <marc.glisse@normalesup.org>\n+\t    Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR libstdc++-v3/1773\n+\t* config/os/solaris2.7: Rename to config/os/solaris2.9.\n+\t* config/os/solaris/solaris2.9/os_defines.h\n+\t(__CORRECT_ISO_CPP_MATH_H_PROTO1)\n+\t(__CORRECT_ISO_CPP_STDLIB_H_PROTO)\n+\t(__CORRECT_ISO_CPP_STRING_H_PROTO)\n+\t(__CORRECT_ISO_CPP_WCHAR_H_PROTO): Define.\n+\t* config/os/solaris2.8/ctype_base.h,\n+\tconfig/os/solaris2.8/ctype_configure_char.cc,\n+\tconfig/solaris2.8/ctype_inline.h,\n+\tconfig/os/solaris2.8/os_defines.h: New files.\n+\n+\t* configure.host (solaris2.[89], solaris2.1[0-9]):\n+\tSplit into ...\n+\t(solaris2.8): ... this.\n+\tUse os/solaris/solaris2.8.\n+\t(solaris2.9, solaris2.1[0-9]): ... and this.\n+\tUse os/solaris/solaris2.9.\n+\n+\t* include/c_global/cmath (double abs(double)): Wrap in\n+\t!__CORRECT_ISO_CPP_MATH_H_PROTO1 &&\n+\t!__CORRECT_ISO_CPP_MATH_H_PROTO2.\n+\t(float abs(float), long double abs(long double): Wrap in\n+\t!__CORRECT_ISO_CPP_MATH_H_PROTO1.\n+\t(float acos(float), long double acos(long double)): Likewise.\n+\t(float asin(float), long double asin(long double)): Likewise.\n+\t(float atan(float), long double atan(long double)): Likewise.\n+\t(float atan2(float, float), long double atan2(long double, long\n+\tdouble)): Likewise.\n+\t(float ceil(float), long double ceil(long double)): Likewise.\n+\t(float cos(float), long double cos(long double)): Likewise.\n+\t(float cosh(float), long double cosh(long double)): Likewise.\n+\t(float exp(float), long double exp(long double)): Likewise.\n+\t(float fabs(float), long double fabs(long double)): Likewise.\n+\t(float floor(float), long double floor(long double)): Likewise.\n+\t(float fmod(float, float), long double fmod(long double, long\n+\tdouble)): Likewise.\n+\t(float frexp(float, int*), long double frexp(long double, int*)):\n+\tLikewise.\n+\t(float ldexp(float, int), long double ldexp(long double, int)):\n+\tLikewise.\n+\t(float log(float), long double log(long double)): Likewise.\n+\t(float log10(float), long double log10(long double)): Likewise.\n+\t(float modf(float, float*), long double modf(long double, long\n+\tdouble*))): Likewise.\n+\t(float pow(float, float), long double pow(long double, long\n+\tdouble)): Likewise.\n+\t(float sin(float), long double sin(long double)): Likewise.\n+\t(float sinh(float), long double sinh(long double)): Likewise.\n+\t(float sqrt(float), long double sqrt(long double)): Likewise.\n+\t(float tan(float), long double tan(long double)): Likewise.\n+\t(float tanh(float), long double tanh(long double)): Likewise.\n+\t* include/c_global/cstdlib (long abs(long), ldiv_t div(long,\n+\tlong)): Wrap in !__CORRECT_ISO_CPP_STDLIB_H_PROTO.\n+\t* include/tr1/cmath (float fabs(float), long double fabs(long\n+\tdouble)): Wrap in !__CORRECT_ISO_CPP_MATH_H_PROTO1.\n+\n 2011-08-14  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* doc/xml/images/*: Image and image filename changes."}, {"sha": "1ae3874a6dbb1f7d2279f577225b27501b3a7fcb", "filename": "libstdc++-v3/config/os/solaris/solaris2.8/ctype_base.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1998fab44f12c5d4553e62d33b974f7ec189477/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.8%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1998fab44f12c5d4553e62d33b974f7ec189477/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.8%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.8%2Fctype_base.h?ref=a1998fab44f12c5d4553e62d33b974f7ec189477", "previous_filename": "libstdc++-v3/config/os/solaris/solaris2.7/ctype_base.h"}, {"sha": "d3519429a015b7edd7bb7b0390c1da659b23b8ef", "filename": "libstdc++-v3/config/os/solaris/solaris2.8/ctype_configure_char.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1998fab44f12c5d4553e62d33b974f7ec189477/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.8%2Fctype_configure_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1998fab44f12c5d4553e62d33b974f7ec189477/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.8%2Fctype_configure_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.8%2Fctype_configure_char.cc?ref=a1998fab44f12c5d4553e62d33b974f7ec189477", "previous_filename": "libstdc++-v3/config/os/solaris/solaris2.7/ctype_configure_char.cc"}, {"sha": "d6b8df484611c77e0cfdc617745d59cae6e82746", "filename": "libstdc++-v3/config/os/solaris/solaris2.8/ctype_inline.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1998fab44f12c5d4553e62d33b974f7ec189477/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.8%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1998fab44f12c5d4553e62d33b974f7ec189477/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.8%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.8%2Fctype_inline.h?ref=a1998fab44f12c5d4553e62d33b974f7ec189477", "previous_filename": "libstdc++-v3/config/os/solaris/solaris2.7/ctype_inline.h"}, {"sha": "c58126bb7cbcf44e129dc424fc2f37751a35cc1b", "filename": "libstdc++-v3/config/os/solaris/solaris2.8/os_defines.h", "status": "renamed", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1998fab44f12c5d4553e62d33b974f7ec189477/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.8%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1998fab44f12c5d4553e62d33b974f7ec189477/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.8%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.8%2Fos_defines.h?ref=a1998fab44f12c5d4553e62d33b974f7ec189477", "patch": "@@ -1,6 +1,6 @@\n-// Specific definitions for Solaris 7,8  -*- C++ -*-\n+// Specific definitions for Solaris 8  -*- C++ -*-\n \n-// Copyright (C) 2000, 2002, 2005, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2002, 2005, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,5 +28,12 @@\n // System-specific #define, typedefs, corrections, etc, go here.  This\n // file will come before all others.\n \n+// FIXME: Autoconf if possible.\n+#if __cplusplus >= 199711L\n+#define __CORRECT_ISO_CPP_MATH_H_PROTO2\n+#define __CORRECT_ISO_CPP_STRING_H_PROTO\n+#define __CORRECT_ISO_CPP_WCHAR_H_PROTO\n+#endif\n+\n #endif\n ", "previous_filename": "libstdc++-v3/config/os/solaris/solaris2.7/os_defines.h"}, {"sha": "1ae3874a6dbb1f7d2279f577225b27501b3a7fcb", "filename": "libstdc++-v3/config/os/solaris/solaris2.9/ctype_base.h", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1998fab44f12c5d4553e62d33b974f7ec189477/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1998fab44f12c5d4553e62d33b974f7ec189477/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fctype_base.h?ref=a1998fab44f12c5d4553e62d33b974f7ec189477", "patch": "@@ -0,0 +1,60 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2003, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+  \n+// Information as gleaned from /usr/include/ctype.h. Looks like this\n+// only works with solaris2.7 and solaris2.8. Thanks for not changing\n+// things, sun engineers!\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  /// @brief  Base class for ctype.\n+  struct ctype_base\n+  {\n+    // Non-standard typedefs.\n+    typedef int* \t\t__to_type;\n+\n+    // NB: Offsets into ctype<char>::_M_table force a particular size\n+    // on the mask type. Because of this, we don't use an enum.\n+    typedef unsigned int \tmask;   \n+    static const mask upper    \t= _ISUPPER;\n+    static const mask lower \t= _ISLOWER;\n+    static const mask alpha \t= _ISALPHA;\n+    static const mask digit \t= _ISDIGIT;\n+    static const mask xdigit \t= _ISXDIGIT;\n+    static const mask space \t= _ISSPACE;\n+    static const mask print \t= _ISPRINT;\n+    static const mask graph \t= _ISALPHA | _ISDIGIT | _ISPUNCT;\n+    static const mask cntrl \t= _ISCNTRL;\n+    static const mask punct \t= _ISPUNCT;\n+    static const mask alnum \t= _ISALPHA | _ISDIGIT;\n+  };\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "d3519429a015b7edd7bb7b0390c1da659b23b8ef", "filename": "libstdc++-v3/config/os/solaris/solaris2.9/ctype_configure_char.cc", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1998fab44f12c5d4553e62d33b974f7ec189477/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fctype_configure_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1998fab44f12c5d4553e62d33b974f7ec189477/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fctype_configure_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fctype_configure_char.cc?ref=a1998fab44f12c5d4553e62d33b974f7ec189477", "patch": "@@ -0,0 +1,99 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file ctype_configure_char.cc */\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+\n+#include <locale>\n+#include <cstdlib>\n+#include <cstring>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+// Information as gleaned from /usr/include/ctype.h\n+  \n+  const ctype_base::mask* \n+  ctype<char>::classic_table() throw()\n+  { return __ctype_mask; }\n+\n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n+\t\t     size_t __refs)\n+  : facet(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(__trans_upper), _M_tolower(__trans_lower),\n+  _M_table(__table ? __table : classic_table()) \n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n+\n+  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n+  : facet(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(__trans_upper), _M_tolower(__trans_lower),\n+  _M_table(__table ? __table : classic_table()) \n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n+\n+  char\n+  ctype<char>::do_toupper(char __c) const\n+  { return _M_toupper[static_cast<unsigned char>(__c)]; }\n+\n+  const char*\n+  ctype<char>::do_toupper(char* __low, const char* __high) const\n+  {\n+    while (__low < __high)\n+      {\n+\t*__low = _M_toupper[static_cast<unsigned char>(*__low)];\n+\t++__low;\n+      }\n+    return __high;\n+  }\n+\n+  char\n+  ctype<char>::do_tolower(char __c) const\n+  { return _M_tolower[static_cast<unsigned char>(__c)]; }\n+\n+  const char* \n+  ctype<char>::do_tolower(char* __low, const char* __high) const\n+  {\n+    while (__low < __high)\n+      {\n+\t*__low = _M_tolower[static_cast<unsigned char>(*__low)];\n+\t++__low;\n+      }\n+    return __high;\n+  }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "d6b8df484611c77e0cfdc617745d59cae6e82746", "filename": "libstdc++-v3/config/os/solaris/solaris2.9/ctype_inline.h", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1998fab44f12c5d4553e62d33b974f7ec189477/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1998fab44f12c5d4553e62d33b974f7ec189477/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fctype_inline.h?ref=a1998fab44f12c5d4553e62d33b974f7ec189477", "patch": "@@ -0,0 +1,76 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 2000, 2002, 2009, 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+  \n+/** @file bits/ctype_inline.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{locale}\n+ */\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+\n+// ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n+// functions go in ctype.cc\n+  \n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  bool\n+  ctype<char>::\n+  is(mask __m, char __c) const\n+  { return _M_table[static_cast<unsigned char>(__c)] & __m; }\n+\n+  const char*\n+  ctype<char>::\n+  is(const char* __low, const char* __high, mask* __vec) const\n+  {\n+    while (__low < __high)\n+      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];\n+    return __high;\n+  }\n+\n+  const char*\n+  ctype<char>::\n+  scan_is(mask __m, const char* __low, const char* __high) const\n+  {\n+    while (__low < __high \n+\t   && !(_M_table[static_cast<unsigned char>(*__low)] & __m))\n+      ++__low;\n+    return __low;\n+  }\n+\n+  const char*\n+  ctype<char>::\n+  scan_not(mask __m, const char* __low, const char* __high) const\n+  {\n+    while (__low < __high \n+\t   && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)\n+      ++__low;\n+    return __low;\n+  }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "bf84f6152454c2cef3197aa9e7d131f205c95b63", "filename": "libstdc++-v3/config/os/solaris/solaris2.9/os_defines.h", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1998fab44f12c5d4553e62d33b974f7ec189477/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1998fab44f12c5d4553e62d33b974f7ec189477/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.9%2Fos_defines.h?ref=a1998fab44f12c5d4553e62d33b974f7ec189477", "patch": "@@ -0,0 +1,40 @@\n+// Specific definitions for Solaris 9+  -*- C++ -*-\n+\n+// Copyright (C) 2000, 2002, 2005, 2009, 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef _GLIBCXX_OS_DEFINES\n+#define _GLIBCXX_OS_DEFINES 1\n+\n+// System-specific #define, typedefs, corrections, etc, go here.  This\n+// file will come before all others.\n+\n+// FIXME: Autoconf if possible.\n+#if __cplusplus >= 199711L\n+#define __CORRECT_ISO_CPP_MATH_H_PROTO1\n+#define __CORRECT_ISO_CPP_STDLIB_H_PROTO\n+#define __CORRECT_ISO_CPP_STRING_H_PROTO\n+#define __CORRECT_ISO_CPP_WCHAR_H_PROTO\n+#endif\n+\n+#endif\n+"}, {"sha": "6aa164821301aca6a4924f487824426eb1b07b48", "filename": "libstdc++-v3/configure.host", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1998fab44f12c5d4553e62d33b974f7ec189477/libstdc%2B%2B-v3%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1998fab44f12c5d4553e62d33b974f7ec189477/libstdc%2B%2B-v3%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.host?ref=a1998fab44f12c5d4553e62d33b974f7ec189477", "patch": "@@ -284,8 +284,11 @@ case \"${host_os}\" in\n     echo \"Please specify the full version of Solaris, ie. solaris2.9 \" 1>&2\n     exit 1\n     ;;\n-  solaris2.[89] | solaris2.1[0-9])\n-    os_include_dir=\"os/solaris/solaris2.7\"\n+  solaris2.8)\n+    os_include_dir=\"os/solaris/solaris2.8\"\n+    ;;\n+  solaris2.9 | solaris2.1[0-9])\n+    os_include_dir=\"os/solaris/solaris2.9\"\n     ;;\n   tpf)\n     os_include_dir=\"os/tpf\""}, {"sha": "016bdba040872b2ffbebad27960decc14802346f", "filename": "libstdc++-v3/include/c_global/cmath", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1998fab44f12c5d4553e62d33b974f7ec189477/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1998fab44f12c5d4553e62d33b974f7ec189477/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath?ref=a1998fab44f12c5d4553e62d33b974f7ec189477", "patch": "@@ -78,17 +78,22 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+#if !defined(__CORRECT_ISO_CPP_MATH_H_PROTO1) \\\n+  && !defined(__CORRECT_ISO_CPP_MATH_H_PROTO2)\n   inline _GLIBCXX_CONSTEXPR double\n   abs(double __x)\n   { return __builtin_fabs(__x); }\n+#endif\n \n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n   inline _GLIBCXX_CONSTEXPR float\n   abs(float __x)\n   { return __builtin_fabsf(__x); }\n \n   inline _GLIBCXX_CONSTEXPR long double\n   abs(long double __x)\n   { return __builtin_fabsl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline _GLIBCXX_CONSTEXPR\n@@ -99,13 +104,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::acos;\n \n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n   inline _GLIBCXX_CONSTEXPR float\n   acos(float __x)\n   { return __builtin_acosf(__x); }\n \n   inline _GLIBCXX_CONSTEXPR long double\n   acos(long double __x)\n   { return __builtin_acosl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline _GLIBCXX_CONSTEXPR\n@@ -116,13 +123,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::asin;\n \n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n   inline _GLIBCXX_CONSTEXPR float\n   asin(float __x)\n   { return __builtin_asinf(__x); }\n \n   inline _GLIBCXX_CONSTEXPR long double\n   asin(long double __x)\n   { return __builtin_asinl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline _GLIBCXX_CONSTEXPR\n@@ -133,13 +142,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::atan;\n \n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n   inline _GLIBCXX_CONSTEXPR float\n   atan(float __x)\n   { return __builtin_atanf(__x); }\n \n   inline _GLIBCXX_CONSTEXPR long double\n   atan(long double __x)\n   { return __builtin_atanl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline _GLIBCXX_CONSTEXPR\n@@ -150,13 +161,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::atan2;\n \n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n   inline _GLIBCXX_CONSTEXPR float\n   atan2(float __y, float __x)\n   { return __builtin_atan2f(__y, __x); }\n \n   inline _GLIBCXX_CONSTEXPR long double\n   atan2(long double __y, long double __x)\n   { return __builtin_atan2l(__y, __x); }\n+#endif\n \n   template<typename _Tp, typename _Up>\n     inline _GLIBCXX_CONSTEXPR\n@@ -172,13 +185,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::ceil;\n \n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n   inline _GLIBCXX_CONSTEXPR float\n   ceil(float __x)\n   { return __builtin_ceilf(__x); }\n \n   inline _GLIBCXX_CONSTEXPR long double\n   ceil(long double __x)\n   { return __builtin_ceill(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline _GLIBCXX_CONSTEXPR\n@@ -189,13 +204,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::cos;\n \n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n   inline _GLIBCXX_CONSTEXPR float\n   cos(float __x)\n   { return __builtin_cosf(__x); }\n \n   inline _GLIBCXX_CONSTEXPR long double\n   cos(long double __x)\n   { return __builtin_cosl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline _GLIBCXX_CONSTEXPR\n@@ -206,13 +223,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::cosh;\n \n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n   inline _GLIBCXX_CONSTEXPR float\n   cosh(float __x)\n   { return __builtin_coshf(__x); }\n \n   inline _GLIBCXX_CONSTEXPR long double\n   cosh(long double __x)\n   { return __builtin_coshl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline _GLIBCXX_CONSTEXPR\n@@ -223,13 +242,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::exp;\n \n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n   inline _GLIBCXX_CONSTEXPR float\n   exp(float __x)\n   { return __builtin_expf(__x); }\n \n   inline _GLIBCXX_CONSTEXPR long double\n   exp(long double __x)\n   { return __builtin_expl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline _GLIBCXX_CONSTEXPR\n@@ -240,13 +261,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::fabs;\n \n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n   inline _GLIBCXX_CONSTEXPR float\n   fabs(float __x)\n   { return __builtin_fabsf(__x); }\n \n   inline _GLIBCXX_CONSTEXPR long double\n   fabs(long double __x)\n   { return __builtin_fabsl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline _GLIBCXX_CONSTEXPR\n@@ -257,13 +280,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::floor;\n \n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n   inline _GLIBCXX_CONSTEXPR float\n   floor(float __x)\n   { return __builtin_floorf(__x); }\n \n   inline _GLIBCXX_CONSTEXPR long double\n   floor(long double __x)\n   { return __builtin_floorl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline _GLIBCXX_CONSTEXPR\n@@ -274,13 +299,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::fmod;\n \n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n   inline _GLIBCXX_CONSTEXPR float\n   fmod(float __x, float __y)\n   { return __builtin_fmodf(__x, __y); }\n \n   inline _GLIBCXX_CONSTEXPR long double\n   fmod(long double __x, long double __y)\n   { return __builtin_fmodl(__x, __y); }\n+#endif\n \n   template<typename _Tp, typename _Up>\n     inline _GLIBCXX_CONSTEXPR\n@@ -296,13 +323,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::frexp;\n \n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n   inline _GLIBCXX_CONSTEXPR float\n   frexp(float __x, int* __exp)\n   { return __builtin_frexpf(__x, __exp); }\n \n   inline _GLIBCXX_CONSTEXPR long double\n   frexp(long double __x, int* __exp)\n   { return __builtin_frexpl(__x, __exp); }\n+#endif\n \n   template<typename _Tp>\n     inline _GLIBCXX_CONSTEXPR\n@@ -313,13 +342,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::ldexp;\n \n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n   inline _GLIBCXX_CONSTEXPR float\n   ldexp(float __x, int __exp)\n   { return __builtin_ldexpf(__x, __exp); }\n \n   inline _GLIBCXX_CONSTEXPR long double\n   ldexp(long double __x, int __exp)\n   { return __builtin_ldexpl(__x, __exp); }\n+#endif\n \n   template<typename _Tp>\n     inline _GLIBCXX_CONSTEXPR\n@@ -330,13 +361,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::log;\n \n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n   inline _GLIBCXX_CONSTEXPR float\n   log(float __x)\n   { return __builtin_logf(__x); }\n \n   inline _GLIBCXX_CONSTEXPR long double\n   log(long double __x)\n   { return __builtin_logl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline _GLIBCXX_CONSTEXPR\n@@ -347,13 +380,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::log10;\n \n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n   inline _GLIBCXX_CONSTEXPR float\n   log10(float __x)\n   { return __builtin_log10f(__x); }\n \n   inline _GLIBCXX_CONSTEXPR long double\n   log10(long double __x)\n   { return __builtin_log10l(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline _GLIBCXX_CONSTEXPR\n@@ -364,16 +399,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::modf;\n \n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n   inline _GLIBCXX_CONSTEXPR float\n   modf(float __x, float* __iptr)\n   { return __builtin_modff(__x, __iptr); }\n \n   inline _GLIBCXX_CONSTEXPR long double\n   modf(long double __x, long double* __iptr)\n   { return __builtin_modfl(__x, __iptr); }\n+#endif\n \n   using ::pow;\n \n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n   inline _GLIBCXX_CONSTEXPR float\n   pow(float __x, float __y)\n   { return __builtin_powf(__x, __y); }\n@@ -396,6 +434,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   inline long double\n   pow(long double __x, int __n)\n   { return __builtin_powil(__x, __n); }\n+#endif\n #endif\n \n   template<typename _Tp, typename _Up>\n@@ -412,13 +451,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::sin;\n \n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n   inline _GLIBCXX_CONSTEXPR float\n   sin(float __x)\n   { return __builtin_sinf(__x); }\n \n   inline _GLIBCXX_CONSTEXPR long double\n   sin(long double __x)\n   { return __builtin_sinl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline _GLIBCXX_CONSTEXPR\n@@ -429,13 +470,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::sinh;\n \n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n   inline _GLIBCXX_CONSTEXPR float\n   sinh(float __x)\n   { return __builtin_sinhf(__x); }\n \n   inline _GLIBCXX_CONSTEXPR long double\n   sinh(long double __x)\n   { return __builtin_sinhl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline _GLIBCXX_CONSTEXPR\n@@ -446,13 +489,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::sqrt;\n \n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n   inline _GLIBCXX_CONSTEXPR float\n   sqrt(float __x)\n   { return __builtin_sqrtf(__x); }\n \n   inline _GLIBCXX_CONSTEXPR long double\n   sqrt(long double __x)\n   { return __builtin_sqrtl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline _GLIBCXX_CONSTEXPR\n@@ -463,13 +508,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::tan;\n \n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n   inline _GLIBCXX_CONSTEXPR float\n   tan(float __x)\n   { return __builtin_tanf(__x); }\n \n   inline _GLIBCXX_CONSTEXPR long double\n   tan(long double __x)\n   { return __builtin_tanl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline _GLIBCXX_CONSTEXPR\n@@ -480,13 +527,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::tanh;\n \n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n   inline _GLIBCXX_CONSTEXPR float\n   tanh(float __x)\n   { return __builtin_tanhf(__x); }\n \n   inline _GLIBCXX_CONSTEXPR long double\n   tanh(long double __x)\n   { return __builtin_tanhl(__x); }\n+#endif\n \n   template<typename _Tp>\n     inline _GLIBCXX_CONSTEXPR"}, {"sha": "f4785b4ad93b58c43767d25845f739853805024f", "filename": "libstdc++-v3/include/c_global/cstdlib", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1998fab44f12c5d4553e62d33b974f7ec189477/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdlib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1998fab44f12c5d4553e62d33b974f7ec189477/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdlib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdlib?ref=a1998fab44f12c5d4553e62d33b974f7ec189477", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009, 2010\n+// 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -135,11 +135,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   using ::wctomb;\n #endif // _GLIBCXX_USE_WCHAR_T\n \n+#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO\n   inline long\n   abs(long __i) { return labs(__i); }\n \n   inline ldiv_t\n   div(long __i, long __j) { return ldiv(__i, __j); }\n+#endif\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "d104572088f39eaba6ccfb19d00a3719baf4580a", "filename": "libstdc++-v3/include/tr1/cmath", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1998fab44f12c5d4553e62d33b974f7ec189477/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1998fab44f12c5d4553e62d33b974f7ec189477/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath?ref=a1998fab44f12c5d4553e62d33b974f7ec189477", "patch": "@@ -569,6 +569,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // mode have a different return type.\n   using ::fabs;\n \n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1\n   inline float\n   fabs(float __x)\n   { return __builtin_fabsf(__x); }\n@@ -582,6 +583,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t   double>::__type\n     fabs(_Tp __x)\n     { return __builtin_fabs(__x); }\n+#endif\n \n   inline float\n   fdim(float __x, float __y)"}]}