{"sha": "c569c2c1dcd837586c920b282337c2dcc441cb1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU2OWMyYzFkY2Q4Mzc1ODZjOTIwYjI4MjMzN2MyZGNjNDQxY2IxYw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-06-26T07:05:47Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-06-26T07:05:47Z"}, "message": "Clean up formatting.\n\nFrom-SVN: r4739", "tree": {"sha": "21b92a8e98d453a3041f75d2754b9c81f1032a87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21b92a8e98d453a3041f75d2754b9c81f1032a87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c569c2c1dcd837586c920b282337c2dcc441cb1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c569c2c1dcd837586c920b282337c2dcc441cb1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c569c2c1dcd837586c920b282337c2dcc441cb1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c569c2c1dcd837586c920b282337c2dcc441cb1c/comments", "author": null, "committer": null, "parents": [{"sha": "9f4d9f6cd70f6a66c0c3499fb4e1afd42acd183d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f4d9f6cd70f6a66c0c3499fb4e1afd42acd183d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f4d9f6cd70f6a66c0c3499fb4e1afd42acd183d"}], "stats": {"total": 182, "additions": 94, "deletions": 88}, "files": [{"sha": "c6904a567f271444e1cb83356efc2706c658d283", "filename": "gcc/config/we32k/we32k.c", "status": "modified", "additions": 94, "deletions": 88, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c569c2c1dcd837586c920b282337c2dcc441cb1c/gcc%2Fconfig%2Fwe32k%2Fwe32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c569c2c1dcd837586c920b282337c2dcc441cb1c/gcc%2Fconfig%2Fwe32k%2Fwe32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.c?ref=c569c2c1dcd837586c920b282337c2dcc441cb1c", "patch": "@@ -25,109 +25,115 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"real.h\"\n \n \n-void output_move_double(operands)\n-rtx *operands;\n-  {\n+void\n+output_move_double (operands)\n+     rtx *operands;\n+{\n   rtx lsw_operands[2];\n   rtx lsw_sreg = NULL;\n   rtx msw_dreg = NULL;\n \n-  if (GET_CODE (operands[0]) == REG) {\n-    lsw_operands[0] = gen_rtx(REG, SImode, REGNO (operands[0]) + 1);\n-    msw_dreg = operands[0];\n+  if (GET_CODE (operands[0]) == REG) \n+    {\n+      lsw_operands[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+      msw_dreg = operands[0];\n     }\n+  else if (GET_CODE (operands[0]) == MEM && offsettable_memref_p (operands[0]))\n+    lsw_operands[0] = adj_offsettable_operand (operands[0], 4);\n   else\n-    if (GET_CODE (operands[0]) == MEM && offsettable_memref_p (operands[0]))\n-      lsw_operands[0] = adj_offsettable_operand(operands[0], 4);\n-    else\n-      abort();\n+    abort ();\n \n-  if (GET_CODE (operands[1]) == REG) {\n-    lsw_operands[1] = gen_rtx(REG, SImode, REGNO (operands[1]) + 1);\n-    lsw_sreg = lsw_operands[1];\n+  if (GET_CODE (operands[1]) == REG) \n+    {\n+      lsw_operands[1] = gen_rtx (REG, SImode, REGNO (operands[1]) + 1);\n+      lsw_sreg = lsw_operands[1];\n     }\n-  else\n-    if (GET_CODE (operands[1]) == MEM && offsettable_memref_p (operands[1])) {\n-      lsw_operands[1] = adj_offsettable_operand(operands[1], 4);\n+  else if (GET_CODE (operands[1]) == MEM && offsettable_memref_p (operands[1])) \n+    {\n+      lsw_operands[1] = adj_offsettable_operand (operands[1], 4);\n       lsw_sreg = operands[1];\n-      for ( ; ; ) {\n-        if (REG_P (lsw_sreg))\n-          break;\n-        if (CONSTANT_ADDRESS_P (lsw_sreg)) {\n-          lsw_sreg = NULL;\n-          break;\n-          }\n-        if (GET_CODE (lsw_sreg) == MEM) {\n-          lsw_sreg = XEXP (lsw_sreg, 0);\n-          continue;\n-          }\n-        if (GET_CODE (lsw_sreg) == PLUS)\n-          if (CONSTANT_ADDRESS_P (XEXP (lsw_sreg, 1))) {\n-            lsw_sreg = XEXP (lsw_sreg, 0);\n-            continue;\n-            }\n-          else\n-            if (CONSTANT_ADDRESS_P (XEXP (lsw_sreg, 0))) {\n-              lsw_sreg = XEXP (lsw_sreg, 1);\n-              continue;\n-              }\n-        abort();\n-        }\n-      }\n-    else\n-      if (GET_CODE (operands[1]) == CONST_DOUBLE)\n-        {\n-        lsw_operands[1] = gen_rtx(CONST_INT, SImode,\n-                                  CONST_DOUBLE_HIGH(operands[1]));\n-        operands[1] = gen_rtx(CONST_INT, SImode,\n-                              CONST_DOUBLE_LOW(operands[1]));\n-        }\n-      else\n-        if (GET_CODE (operands[1]) == CONST_INT)\n-          {\n-          lsw_operands[1] = operands[1];\n-          operands[1] = const0_rtx;\n-          }\n-        else\n-          abort();\n+      for ( ; ; ) \n+\t{\n+\t  if (REG_P (lsw_sreg))\n+\t    break;\n+\t  if (CONSTANT_ADDRESS_P (lsw_sreg)) \n+\t    {\n+\t      lsw_sreg = NULL;\n+\t      break;\n+\t    }\n+\t  if (GET_CODE (lsw_sreg) == MEM) \n+\t    {\n+\t      lsw_sreg = XEXP (lsw_sreg, 0);\n+\t      continue;\n+\t    }\n+\t  if (GET_CODE (lsw_sreg) == PLUS)\n+\t    {\n+\t      if (CONSTANT_ADDRESS_P (XEXP (lsw_sreg, 1))) \n+\t\t{\n+\t\t  lsw_sreg = XEXP (lsw_sreg, 0);\n+\t\t  continue;\n+\t\t}\n+\t      else if (CONSTANT_ADDRESS_P (XEXP (lsw_sreg, 0))) \n+\t\t{\n+\t\t  lsw_sreg = XEXP (lsw_sreg, 1);\n+\t\t  continue;\n+\t\t}\n+\t    }\n+\t  abort ();\n+\t}\n+    }\n+  else if (GET_CODE (operands[1]) == CONST_DOUBLE)\n+    {\n+      lsw_operands[1] = gen_rtx (CONST_INT, SImode,\n+\t\t\t\t CONST_DOUBLE_HIGH (operands[1]));\n+      operands[1] = gen_rtx (CONST_INT, SImode,\n+\t\t\t     CONST_DOUBLE_LOW (operands[1]));\n+    }\n+  else if (GET_CODE (operands[1]) == CONST_INT)\n+    {\n+      lsw_operands[1] = operands[1];\n+      operands[1] = const0_rtx;\n+    }\n+  else\n+    abort ();\n \n-  if ( !msw_dreg || !lsw_sreg || REGNO (msw_dreg) != REGNO (lsw_sreg)) {\n-    output_asm_insn(\"movw %1, %0\", operands);\n-    output_asm_insn(\"movw %1, %0\", lsw_operands);\n+  if (!msw_dreg || !lsw_sreg || REGNO (msw_dreg) != REGNO (lsw_sreg)) \n+    {\n+      output_asm_insn (\"movw %1, %0\", operands);\n+      output_asm_insn (\"movw %1, %0\", lsw_operands);\n     }\n-  else {\n-    output_asm_insn(\"movw %1, %0\", lsw_operands);\n-    output_asm_insn(\"movw %1, %0\", operands);\n+  else \n+    {\n+      output_asm_insn (\"movw %1, %0\", lsw_operands);\n+      output_asm_insn (\"movw %1, %0\", operands);\n     }\n-  }\n+}\n \n-void output_push_double(operands)\n-rtx *operands;\n-  {\n+void\n+output_push_double (operands)\n+     rtx *operands;\n+{\n   rtx lsw_operands[1];\n \n   if (GET_CODE (operands[0]) == REG)\n-    lsw_operands[0] = gen_rtx(REG, SImode, REGNO (operands[0]) + 1);\n+    lsw_operands[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+  else if (GET_CODE (operands[0]) == MEM && offsettable_memref_p (operands[0]))\n+    lsw_operands[0] = adj_offsettable_operand (operands[0], 4);\n+  else if (GET_CODE (operands[0]) == CONST_DOUBLE)\n+    {\n+      lsw_operands[0] = gen_rtx (CONST_INT, SImode,\n+\t\t\t\t CONST_DOUBLE_HIGH (operands[0]));\n+      operands[0] = gen_rtx (CONST_INT, SImode,\n+\t\t\t     CONST_DOUBLE_LOW (operands[0]));\n+    }\n+  else if (GET_CODE (operands[0]) == CONST_INT)\n+    { \n+      lsw_operands[0] = operands[0];\n+      operands[0] = const0_rtx;\n+    }\n   else\n-    if (GET_CODE (operands[0]) == MEM && offsettable_memref_p (operands[0]))\n-      lsw_operands[0] = adj_offsettable_operand(operands[0], 4);\n-    else\n-      if (GET_CODE (operands[0]) == CONST_DOUBLE)\n-        {\n-        lsw_operands[0] = gen_rtx(CONST_INT, SImode,\n-                                  CONST_DOUBLE_HIGH(operands[0]));\n-        operands[0] = gen_rtx(CONST_INT, SImode,\n-                              CONST_DOUBLE_LOW(operands[0]));\n-        }\n-      else\n-        if (GET_CODE (operands[0]) == CONST_INT)\n-          {\n-          lsw_operands[0] = operands[0];\n-          operands[0] = const0_rtx;\n-          }\n-        else\n-          abort();\n+    abort ();\n \n-  output_asm_insn(\"pushw %0\", operands);\n-  output_asm_insn(\"pushw %0\", lsw_operands);\n-  }\n+  output_asm_insn (\"pushw %0\", operands);\n+  output_asm_insn (\"pushw %0\", lsw_operands);\n+}"}]}