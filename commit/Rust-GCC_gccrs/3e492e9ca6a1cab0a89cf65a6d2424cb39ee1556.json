{"sha": "3e492e9ca6a1cab0a89cf65a6d2424cb39ee1556", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U0OTJlOWNhNmExY2FiMGE4OWNmNjVhNmQyNDI0Y2IzOWVlMTU1Ng==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-03-05T09:20:30Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-03-05T09:20:30Z"}, "message": "re PR lto/56515 (location references block not in block tree, verify_gimple failed (LTO + profile))\n\n2013-03-05  Richard Biener  <rguenther@suse.de>\n\n\tPR lto/56515\n\t* tree-inline.c (remap_blocks_to_null): New function.\n\t(expand_call_inline): When expanding a call stmt without\n\tan associated block inline remap all callee blocks to NULL.\n\nFrom-SVN: r196452", "tree": {"sha": "944e306e62bd559731e2480fe1db75db29f8265c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/944e306e62bd559731e2480fe1db75db29f8265c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e492e9ca6a1cab0a89cf65a6d2424cb39ee1556", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e492e9ca6a1cab0a89cf65a6d2424cb39ee1556", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e492e9ca6a1cab0a89cf65a6d2424cb39ee1556", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e492e9ca6a1cab0a89cf65a6d2424cb39ee1556/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "86efb5cd550babd6bf69ead21cc73f0012c55a97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86efb5cd550babd6bf69ead21cc73f0012c55a97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86efb5cd550babd6bf69ead21cc73f0012c55a97"}], "stats": {"total": 86, "additions": 59, "deletions": 27}, "files": [{"sha": "56d6b41f629735e9a6a6df19a7525aa3775ff21a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e492e9ca6a1cab0a89cf65a6d2424cb39ee1556/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e492e9ca6a1cab0a89cf65a6d2424cb39ee1556/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e492e9ca6a1cab0a89cf65a6d2424cb39ee1556", "patch": "@@ -1,3 +1,10 @@\n+2013-03-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR lto/56515\n+\t* tree-inline.c (remap_blocks_to_null): New function.\n+\t(expand_call_inline): When expanding a call stmt without\n+\tan associated block inline remap all callee blocks to NULL.\n+\n 2013-03-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/56494"}, {"sha": "714bcf0fcb043dd941eec6730ea9bce2c8651476", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 52, "deletions": 27, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e492e9ca6a1cab0a89cf65a6d2424cb39ee1556/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e492e9ca6a1cab0a89cf65a6d2424cb39ee1556/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=3e492e9ca6a1cab0a89cf65a6d2424cb39ee1556", "patch": "@@ -651,6 +651,16 @@ remap_blocks (tree block, copy_body_data *id)\n   return new_tree;\n }\n \n+/* Remap the block tree rooted at BLOCK to nothing.  */\n+static void\n+remap_blocks_to_null (tree block, copy_body_data *id)\n+{\n+  tree t;\n+  insert_decl_map (id, block, NULL_TREE);\n+  for (t = BLOCK_SUBBLOCKS (block); t ; t = BLOCK_CHAIN (t))\n+    remap_blocks_to_null (t, id);\n+}\n+\n static void\n copy_statement_list (tree *tp)\n {\n@@ -3908,12 +3918,20 @@ expand_call_inline (basic_block bb, gimple stmt, copy_body_data *id)\n   /* Build a block containing code to initialize the arguments, the\n      actual inline expansion of the body, and a label for the return\n      statements within the function to jump to.  The type of the\n-     statement expression is the return type of the function call.  */\n-  id->block = make_node (BLOCK);\n-  BLOCK_ABSTRACT_ORIGIN (id->block) = fn;\n-  BLOCK_SOURCE_LOCATION (id->block) = input_location;\n+     statement expression is the return type of the function call.\n+     ???  If the call does not have an associated block then we will\n+     remap all callee blocks to NULL, effectively dropping most of\n+     its debug information.  This should only happen for calls to\n+     artificial decls inserted by the compiler itself.  We need to\n+     either link the inlined blocks into the caller block tree or\n+     not refer to them in any way to not break GC for locations.  */\n   if (gimple_block (stmt))\n-    prepend_lexical_block (gimple_block (stmt), id->block);\n+    {\n+      id->block = make_node (BLOCK);\n+      BLOCK_ABSTRACT_ORIGIN (id->block) = fn;\n+      BLOCK_SOURCE_LOCATION (id->block) = input_location;\n+      prepend_lexical_block (gimple_block (stmt), id->block);\n+    }\n \n   /* Local declarations will be replaced by their equivalents in this\n      map.  */\n@@ -3942,27 +3960,33 @@ expand_call_inline (basic_block bb, gimple stmt, copy_body_data *id)\n \n   if (DECL_INITIAL (fn))\n     {\n-      tree *var;\n-\n-      prepend_lexical_block (id->block, remap_blocks (DECL_INITIAL (fn), id));\n-      gcc_checking_assert (BLOCK_SUBBLOCKS (id->block)\n-\t\t\t   && (BLOCK_CHAIN (BLOCK_SUBBLOCKS (id->block))\n-\t\t\t       == NULL_TREE));\n-      /* Move vars for PARM_DECLs from DECL_INITIAL block to id->block,\n-\t otherwise for DWARF DW_TAG_formal_parameter will not be children of\n-\t DW_TAG_inlined_subroutine, but of a DW_TAG_lexical_block\n-\t under it.  The parameters can be then evaluated in the debugger,\n-\t but don't show in backtraces.  */\n-      for (var = &BLOCK_VARS (BLOCK_SUBBLOCKS (id->block)); *var; )\n-\tif (TREE_CODE (DECL_ORIGIN (*var)) == PARM_DECL)\n-\t  {\n-\t    tree v = *var;\n-\t    *var = TREE_CHAIN (v);\n-\t    TREE_CHAIN (v) = BLOCK_VARS (id->block);\n-\t    BLOCK_VARS (id->block) = v;\n-\t  }\n-\telse\n-\t  var = &TREE_CHAIN (*var);\n+      if (gimple_block (stmt))\n+\t{\n+\t  tree *var;\n+\n+\t  prepend_lexical_block (id->block,\n+\t\t\t\t remap_blocks (DECL_INITIAL (fn), id));\n+\t  gcc_checking_assert (BLOCK_SUBBLOCKS (id->block)\n+\t\t\t       && (BLOCK_CHAIN (BLOCK_SUBBLOCKS (id->block))\n+\t\t\t\t   == NULL_TREE));\n+\t  /* Move vars for PARM_DECLs from DECL_INITIAL block to id->block,\n+\t     otherwise for DWARF DW_TAG_formal_parameter will not be children of\n+\t     DW_TAG_inlined_subroutine, but of a DW_TAG_lexical_block\n+\t     under it.  The parameters can be then evaluated in the debugger,\n+\t     but don't show in backtraces.  */\n+\t  for (var = &BLOCK_VARS (BLOCK_SUBBLOCKS (id->block)); *var; )\n+\t    if (TREE_CODE (DECL_ORIGIN (*var)) == PARM_DECL)\n+\t      {\n+\t\ttree v = *var;\n+\t\t*var = TREE_CHAIN (v);\n+\t\tTREE_CHAIN (v) = BLOCK_VARS (id->block);\n+\t\tBLOCK_VARS (id->block) = v;\n+\t      }\n+\t    else\n+\t      var = &TREE_CHAIN (*var);\n+\t}\n+      else\n+\tremap_blocks_to_null (DECL_INITIAL (fn), id);\n     }\n \n   /* Return statements in the function body will be replaced by jumps\n@@ -4106,7 +4130,8 @@ expand_call_inline (basic_block bb, gimple stmt, copy_body_data *id)\n      inlined.  If we don't do this now, we can lose the information about the\n      variables in the function when the blocks get blown away as soon as we\n      remove the cgraph node.  */\n-  (*debug_hooks->outlining_inline_function) (cg_edge->callee->symbol.decl);\n+  if (gimple_block (stmt))\n+    (*debug_hooks->outlining_inline_function) (cg_edge->callee->symbol.decl);\n \n   /* Update callgraph if needed.  */\n   cgraph_remove_node (cg_edge->callee);"}]}