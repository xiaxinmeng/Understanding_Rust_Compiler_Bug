{"sha": "61dddae4e72e300597afeff4b081114a25598c5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFkZGRhZTRlNzJlMzAwNTk3YWZlZmY0YjA4MTExNGEyNTU5OGM1Zg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2006-02-15T09:36:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-15T09:36:45Z"}, "message": "debug.adb: Eliminate numeric switches for binder/gnatmake\n\n2006-02-13  Robert Dewar  <dewar@adacore.com>\n\t    Vincent Celier  <celier@adacore.com>\n\n\t* debug.adb: Eliminate numeric switches for binder/gnatmake\n\n\t* switch-m.adb (Normalize_Compiler_Switches): Record numeric debug\n\tswitches for the compiler.\n\t(Scan_Make_Switches): Do not allow numeric debug switches for gnatmake\n\t(Scan_Make_Switches): When failing with an illegal switch, output an\n\terror message with the full switch.\n\tEliminate numeric switches for binder/gnatmake\n\n\t* switch.ads, switch.adb (Bad_Switch): New procedure\n\n\t* switch-b.adb (Scan_Binder_Switches): Do not accept combined switches.\n\tRemove 0-9 as debug flag character possibilities\n\t-d is now controlling the primary stack size when its value is a\n\tpositive. Also add checks against invalid values, and support for kb,\n\tmb. Ditto for -D switch.\n\nFrom-SVN: r111053", "tree": {"sha": "21c6aed88c4d5ed4dfbc700b0cbb33b914758de6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21c6aed88c4d5ed4dfbc700b0cbb33b914758de6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61dddae4e72e300597afeff4b081114a25598c5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61dddae4e72e300597afeff4b081114a25598c5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61dddae4e72e300597afeff4b081114a25598c5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61dddae4e72e300597afeff4b081114a25598c5f/comments", "author": null, "committer": null, "parents": [{"sha": "86ac5e79ab137815e463c0b46495551c641e33d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86ac5e79ab137815e463c0b46495551c641e33d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86ac5e79ab137815e463c0b46495551c641e33d8"}], "stats": {"total": 241, "additions": 152, "deletions": 89}, "files": [{"sha": "8fe80da32cbd403edd760d1af65c99af6adef49c", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61dddae4e72e300597afeff4b081114a25598c5f/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61dddae4e72e300597afeff4b081114a25598c5f/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=61dddae4e72e300597afeff4b081114a25598c5f", "patch": "@@ -159,16 +159,6 @@ package body Debug is\n    --  dy\n    --  dz\n \n-   --  d1\n-   --  d2\n-   --  d3\n-   --  d4\n-   --  d5\n-   --  d6\n-   --  d7\n-   --  d8\n-   --  d9\n-\n    --  Debug flags used in package Make and its clients (e.g. GNATMAKE)\n \n    --  da\n@@ -198,16 +188,6 @@ package body Debug is\n    --  dy\n    --  dz\n \n-   --  d1\n-   --  d2\n-   --  d3\n-   --  d4\n-   --  d5\n-   --  d6\n-   --  d7\n-   --  d8\n-   --  d9\n-\n    --------------------------------------------\n    -- Documentation for Compiler Debug Flags --\n    --------------------------------------------"}, {"sha": "ee8ac6a2512c81bfdcb3062921fdb9bb7d26350e", "filename": "gcc/ada/switch-b.adb", "status": "modified", "additions": 134, "deletions": 51, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61dddae4e72e300597afeff4b081114a25598c5f/gcc%2Fada%2Fswitch-b.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61dddae4e72e300597afeff4b081114a25598c5f/gcc%2Fada%2Fswitch-b.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-b.adb?ref=61dddae4e72e300597afeff4b081114a25598c5f", "patch": "@@ -41,11 +41,60 @@ package body Switch.B is\n       Ptr : Integer          := Switch_Chars'First;\n       C   : Character        := ' ';\n \n+      function Get_Stack_Size (S : Character) return Int;\n+      --  Used for -d and -D to scan stack size including handling k/m.\n+      --  S is set to 'd' or 'D' to indicate the switch being scanned.\n+\n+      --------------------\n+      -- Get_Stack_Size --\n+      --------------------\n+\n+      function Get_Stack_Size (S : Character) return Int is\n+         Result : Int;\n+\n+      begin\n+         Scan_Pos (Switch_Chars, Max, Ptr, Result, S);\n+\n+         --  In the following code, we enable overflow checking since the\n+         --  multiplication by K or M may cause overflow, which is an error.\n+\n+         declare\n+            pragma Unsuppress (Overflow_Check);\n+\n+         begin\n+            --  Check for additional character 'k' (for kilobytes) or 'm'\n+            --  (for Megabytes), but only if we have not reached the end\n+            --  of the switch string. Note that if this appears before the\n+            --  end of the string we will get an error when we test to make\n+            --  sure that the string is exhausted (at the end of the case).\n+\n+            if Ptr <= Max then\n+               if Switch_Chars (Ptr) = 'k' then\n+                  Result := Result * 1024;\n+                  Ptr := Ptr + 1;\n+\n+               elsif Switch_Chars (Ptr) = 'm' then\n+                  Result := Result * (1024 * 1024);\n+                  Ptr := Ptr + 1;\n+               end if;\n+            end if;\n+\n+         exception\n+            when Constraint_Error =>\n+               Osint.Fail\n+                 (\"numeric value out of range for switch: \", (1 => S));\n+         end;\n+\n+         return Result;\n+      end Get_Stack_Size;\n+\n+   --  Start of processing for Scan_Binder_Switches\n+\n    begin\n       --  Skip past the initial character (must be the switch character)\n \n       if Ptr = Max then\n-         Bad_Switch (C);\n+         Bad_Switch (Switch_Chars);\n       else\n          Ptr := Ptr + 1;\n       end if;\n@@ -62,7 +111,7 @@ package body Switch.B is\n \n       --  Loop to scan through switches given in switch string\n \n-      while Ptr <= Max loop\n+      Check_Switch : begin\n          C := Switch_Chars (Ptr);\n \n          case C is\n@@ -103,37 +152,55 @@ package body Switch.B is\n \n          when 'd' =>\n \n-            --  Note: for the debug switch, the remaining characters in this\n-            --  switch field must all be debug flags, since all valid switch\n-            --  characters are also valid debug characters. This switch is not\n-            --  documented on purpose because it is only used by the\n-            --  implementors.\n+            if Ptr = Max then\n+               Bad_Switch (Switch_Chars);\n+            end if;\n \n-            --  Loop to scan out debug flags\n+            Ptr := Ptr + 1;\n+            C := Switch_Chars (Ptr);\n \n-            while Ptr < Max loop\n-               Ptr := Ptr + 1;\n-               C := Switch_Chars (Ptr);\n-               exit when C = ASCII.NUL or else C = '/' or else C = '-';\n+            --  Case where character after -d is a digit (default stack size)\n \n-               if C in '1' .. '9' or else\n-                  C in 'a' .. 'z' or else\n-                  C in 'A' .. 'Z'\n-               then\n-                  Set_Debug_Flag (C);\n-               else\n-                  Bad_Switch (C);\n-               end if;\n-            end loop;\n+            if C in '0' .. '9' then\n+\n+               --  In this case, we process the default primary stack size\n+\n+               Default_Stack_Size := Get_Stack_Size ('d');\n+\n+            --  Case where character after -d is not digit (debug flags)\n+\n+            else\n+               --  Note: for the debug switch, the remaining characters in this\n+               --  switch field must all be debug flags, since all valid switch\n+               --  characters are also valid debug characters. This switch is\n+               --  not documented on purpose because it is only used by the\n+               --  implementors.\n+\n+               --  Loop to scan out debug flags\n+\n+               loop\n+                  C := Switch_Chars (Ptr);\n \n-            return;\n+                  if C in 'a' .. 'z' or else C in 'A' .. 'Z' then\n+                     Set_Debug_Flag (C);\n+                  else\n+                     Bad_Switch (Switch_Chars);\n+                  end if;\n+\n+                  Ptr := Ptr + 1;\n+                  exit when Ptr > Max;\n+               end loop;\n+            end if;\n \n          --  Processing for D switch\n \n          when 'D' =>\n+            if Ptr = Max then\n+               Bad_Switch (Switch_Chars);\n+            end if;\n+\n             Ptr := Ptr + 1;\n-            Scan_Pos\n-              (Switch_Chars, Max, Ptr, Default_Sec_Stack_Size, C);\n+            Default_Sec_Stack_Size := Get_Stack_Size ('D');\n \n          --  Processing for e switch\n \n@@ -182,7 +249,7 @@ package body Switch.B is\n \n          when 'i' =>\n             if Ptr = Max then\n-               Bad_Switch (C);\n+               Bad_Switch (Switch_Chars);\n             end if;\n \n             Ptr := Ptr + 1;\n@@ -198,7 +265,7 @@ package body Switch.B is\n                Identifier_Character_Set := C;\n                Ptr := Ptr + 1;\n             else\n-               Bad_Switch (C);\n+               Bad_Switch (Switch_Chars);\n             end if;\n \n          --  Processing for K switch\n@@ -216,6 +283,10 @@ package body Switch.B is\n          --  Processing for m switch\n \n          when 'm' =>\n+            if Ptr = Max then\n+               Bad_Switch (Switch_Chars);\n+            end if;\n+\n             Ptr := Ptr + 1;\n             Scan_Pos (Switch_Chars, Max, Ptr, Maximum_Errors, C);\n \n@@ -281,6 +352,10 @@ package body Switch.B is\n          --  Processing for T switch\n \n          when 'T' =>\n+            if Ptr = Max then\n+               Bad_Switch (Switch_Chars);\n+            end if;\n+\n             Ptr := Ptr + 1;\n             Time_Slice_Set := True;\n             Scan_Nat (Switch_Chars, Max, Ptr, Time_Slice_Value, C);\n@@ -289,6 +364,10 @@ package body Switch.B is\n          --  Processing for u switch\n \n          when 'u' =>\n+            if Ptr = Max then\n+               Bad_Switch (Switch_Chars);\n+            end if;\n+\n             Ptr := Ptr + 1;\n             Dynamic_Stack_Measurement := True;\n             Scan_Nat\n@@ -307,6 +386,9 @@ package body Switch.B is\n          --  Processing for w switch\n \n          when 'w' =>\n+            if Ptr = Max then\n+               Bad_Switch (Switch_Chars);\n+            end if;\n \n             --  For the binder we only allow suppress/error cases\n \n@@ -321,14 +403,18 @@ package body Switch.B is\n                   Warning_Mode  := Suppress;\n \n                when others =>\n-                  Bad_Switch (C);\n+                  Bad_Switch (Switch_Chars);\n             end case;\n \n             Ptr := Ptr + 1;\n \n          --  Processing for W switch\n \n          when 'W' =>\n+            if Ptr = Max then\n+               Bad_Switch (Switch_Chars);\n+            end if;\n+\n             Ptr := Ptr + 1;\n \n             for J in WC_Encoding_Method loop\n@@ -337,7 +423,7 @@ package body Switch.B is\n                   exit;\n \n                elsif J = WC_Encoding_Method'Last then\n-                  Bad_Switch (C);\n+                  Bad_Switch (Switch_Chars);\n                end if;\n             end loop;\n \n@@ -357,6 +443,10 @@ package body Switch.B is\n          --  Processing for X switch\n \n          when 'X' =>\n+            if Ptr = Max then\n+               Bad_Switch (Switch_Chars);\n+            end if;\n+\n             Ptr := Ptr + 1;\n             Scan_Pos (Switch_Chars, Max, Ptr, Default_Exit_Status, C);\n \n@@ -366,42 +456,34 @@ package body Switch.B is\n             Ptr := Ptr + 1;\n             No_Main_Subprogram := True;\n \n-         --  Ignore extra switch character\n-\n-         when '/'  =>\n-            Ptr := Ptr + 1;\n-\n-         --  Ignore '-' extra switch caracter, only if it isn't followed by\n-         --  'RTS'. If it is, then we must process the 'RTS' switch\n+         --  Processing for --RTS\n \n          when '-' =>\n \n-            if Ptr + 3 <= Max and then\n+            if Ptr + 4 <= Max and then\n               Switch_Chars (Ptr + 1 .. Ptr + 3) = \"RTS\"\n             then\n-               Ptr := Ptr + 1;\n+               Ptr := Ptr + 4;\n \n-               if Switch_Chars (Ptr + 3) /= '=' or else\n-                 (Switch_Chars (Ptr + 3) = '='\n-                  and then Ptr + 4 > Max)\n-               then\n+               if Switch_Chars (Ptr) /= '=' or else Ptr = Max then\n                   Osint.Fail (\"missing path for --RTS\");\n-               else\n \n+               else\n                   --  valid --RTS switch\n+\n                   Opt.No_Stdinc := True;\n                   Opt.RTS_Switch := True;\n \n                   declare\n                      Src_Path_Name : constant String_Ptr :=\n                                        Get_RTS_Search_Dir\n                                          (Switch_Chars\n-                                           (Ptr + 4 .. Switch_Chars'Last),\n+                                           (Ptr + 1 .. Switch_Chars'Last),\n                                           Include);\n                      Lib_Path_Name : constant String_Ptr :=\n                                        Get_RTS_Search_Dir\n                                          (Switch_Chars\n-                                           (Ptr + 4 .. Switch_Chars'Last),\n+                                           (Ptr + 1 .. Switch_Chars'Last),\n                                           Objects);\n \n                   begin\n@@ -415,10 +497,7 @@ package body Switch.B is\n                         RTS_Src_Path_Name := Src_Path_Name;\n                         RTS_Lib_Path_Name := Lib_Path_Name;\n \n-                        --  We can exit as there cannot be another switch\n-                        --  after --RTS\n-\n-                        exit;\n+                        Ptr := Max + 1;\n \n                      elsif  Src_Path_Name = null\n                        and then Lib_Path_Name = null\n@@ -436,15 +515,19 @@ package body Switch.B is\n                end if;\n \n             else\n-               Ptr := Ptr + 1;\n+               Bad_Switch (Switch_Chars);\n             end if;\n \n          --  Anything else is an error (illegal switch character)\n \n          when others =>\n-            Bad_Switch (C);\n+            Bad_Switch (Switch_Chars);\n          end case;\n-      end loop;\n+\n+         if Ptr <= Max then\n+            Bad_Switch (Switch_Chars);\n+         end if;\n+      end Check_Switch;\n    end Scan_Binder_Switches;\n \n end Switch.B;"}, {"sha": "b193a112fa8b6a3000e65080e5f12ecb9ae7f202", "filename": "gcc/ada/switch-m.adb", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61dddae4e72e300597afeff4b081114a25598c5f/gcc%2Fada%2Fswitch-m.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61dddae4e72e300597afeff4b081114a25598c5f/gcc%2Fada%2Fswitch-m.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-m.adb?ref=61dddae4e72e300597afeff4b081114a25598c5f", "patch": "@@ -491,7 +491,7 @@ package body Switch.M is\n       --  Skip past the initial character (must be the switch character)\n \n       if Ptr = Max then\n-         Bad_Switch (C);\n+         Bad_Switch (Switch_Chars);\n \n       else\n          Ptr := Ptr + 1;\n@@ -573,15 +573,11 @@ package body Switch.M is\n             while Ptr < Max loop\n                Ptr := Ptr + 1;\n                C := Switch_Chars (Ptr);\n-               exit when C = ASCII.NUL or else C = '/' or else C = '-';\n \n-               if C in '1' .. '9' or else\n-                  C in 'a' .. 'z' or else\n-                  C in 'A' .. 'Z'\n-               then\n+               if C in 'a' .. 'z' or else C in 'A' .. 'Z' then\n                   Set_Debug_Flag (C);\n                else\n-                  Bad_Switch (C);\n+                  Bad_Switch (Switch_Chars);\n                end if;\n             end loop;\n \n@@ -593,7 +589,7 @@ package body Switch.M is\n             Ptr := Ptr + 1;\n \n             if Ptr > Max then\n-               Bad_Switch (C);\n+               Bad_Switch (Switch_Chars);\n             end if;\n \n             case Switch_Chars (Ptr) is\n@@ -611,7 +607,7 @@ package body Switch.M is\n                   Follow_Links := True;\n \n                when others =>\n-                  Bad_Switch (C);\n+                  Bad_Switch (Switch_Chars);\n             end case;\n \n          --  Processing for f switch\n@@ -641,6 +637,10 @@ package body Switch.M is\n          --  Processing for j switch\n \n          when 'j' =>\n+            if Ptr = Max then\n+               Bad_Switch (Switch_Chars);\n+            end if;\n+\n             Ptr := Ptr + 1;\n \n             declare\n@@ -721,7 +721,7 @@ package body Switch.M is\n                      Verbosity_Level := Opt.High;\n \n                   when others =>\n-                     Osint.Fail (\"invalid switch: \", Switch_Chars);\n+                     Bad_Switch (Switch_Chars);\n                end case;\n \n                Ptr := Ptr + 1;\n@@ -739,20 +739,15 @@ package body Switch.M is\n             Ptr := Ptr + 1;\n             No_Main_Subprogram := True;\n \n-         --  Ignore extra switch character\n-\n-         when '/' | '-' =>\n-            Ptr := Ptr + 1;\n-\n          --  Anything else is an error (illegal switch character)\n \n          when others =>\n-            Bad_Switch (C);\n+            Bad_Switch (Switch_Chars);\n \n          end case;\n \n          if Ptr <= Max then\n-            Osint.Fail (\"invalid switch: \", Switch_Chars);\n+            Bad_Switch (Switch_Chars);\n          end if;\n \n       end Check_Switch;"}, {"sha": "7692f589f989f46c98fe9cf3cc74e0087b865c2f", "filename": "gcc/ada/switch.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61dddae4e72e300597afeff4b081114a25598c5f/gcc%2Fada%2Fswitch.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61dddae4e72e300597afeff4b081114a25598c5f/gcc%2Fada%2Fswitch.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch.adb?ref=61dddae4e72e300597afeff4b081114a25598c5f", "patch": "@@ -37,6 +37,11 @@ package body Switch is\n       Osint.Fail (\"invalid switch: \", (1 => Switch));\n    end Bad_Switch;\n \n+   procedure Bad_Switch (Switch : String) is\n+   begin\n+      Osint.Fail (\"invalid switch: \", Switch);\n+   end Bad_Switch;\n+\n    -------------------------\n    -- Is_Front_End_Switch --\n    -------------------------\n@@ -63,7 +68,6 @@ package body Switch is\n         and then Switch_Chars (Switch_Chars'First) = '-';\n    end Is_Switch;\n \n-   ------------------------\n    --------------\n    -- Scan_Nat --\n    --------------"}, {"sha": "dce2f12d8f81648a5adb51734ea7bf659c6cf134", "filename": "gcc/ada/switch.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61dddae4e72e300597afeff4b081114a25598c5f/gcc%2Fada%2Fswitch.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61dddae4e72e300597afeff4b081114a25598c5f/gcc%2Fada%2Fswitch.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch.ads?ref=61dddae4e72e300597afeff4b081114a25598c5f", "patch": "@@ -86,6 +86,7 @@ private\n    --  digit of the integer value.\n \n    procedure Bad_Switch (Switch : Character);\n+   procedure Bad_Switch (Switch : String);\n    --  Fail with an appropriate message when a switch is not recognized\n \n end Switch;"}]}