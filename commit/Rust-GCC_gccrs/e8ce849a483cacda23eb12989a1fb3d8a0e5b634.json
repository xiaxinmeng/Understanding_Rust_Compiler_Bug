{"sha": "e8ce849a483cacda23eb12989a1fb3d8a0e5b634", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThjZTg0OWE0ODNjYWNkYTIzZWIxMjk4OWExZmIzZDhhMGU1YjYzNA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-10-18T19:35:46Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-10-18T19:35:46Z"}, "message": "compiler: drop semicolons in export data\n    \n    The export data, which is approximately readable and looks something\n    like Go, was first implemented back when Go still used semicolons.\n    Drop the semicolons, to make it look slightly more Go like and make it\n    slightly smaller.\n    \n    This updates the compiler and the gccgoimporter package.\n    \n    This introduces a new version of the export data.  There are going to\n    be more changes to the export data, so this version is still subject\n    to change.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/143018\n\nFrom-SVN: r265284", "tree": {"sha": "956bedb12394507194c1d64f4c1f462ff16316d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/956bedb12394507194c1d64f4c1f462ff16316d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8ce849a483cacda23eb12989a1fb3d8a0e5b634", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8ce849a483cacda23eb12989a1fb3d8a0e5b634", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8ce849a483cacda23eb12989a1fb3d8a0e5b634", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8ce849a483cacda23eb12989a1fb3d8a0e5b634/comments", "author": null, "committer": null, "parents": [{"sha": "d0477233215e37dea91b1a98e58074257d7fbb5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0477233215e37dea91b1a98e58074257d7fbb5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0477233215e37dea91b1a98e58074257d7fbb5b"}], "stats": {"total": 195, "additions": 123, "deletions": 72}, "files": [{"sha": "fa708bceae7a35093471d4d44096d76625a9f807", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8ce849a483cacda23eb12989a1fb3d8a0e5b634/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8ce849a483cacda23eb12989a1fb3d8a0e5b634/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=e8ce849a483cacda23eb12989a1fb3d8a0e5b634", "patch": "@@ -1,4 +1,4 @@\n-e32e9aaee598eeb43f9616cf6ca1d11acaa9d167\n+0494dc5737f0c89ad6f45e04e8313e4161678861\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "db57ab58850f5c93ea3e0d918c75a495e0327d09", "filename": "gcc/go/gofrontend/export.cc", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8ce849a483cacda23eb12989a1fb3d8a0e5b634/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8ce849a483cacda23eb12989a1fb3d8a0e5b634/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.cc?ref=e8ce849a483cacda23eb12989a1fb3d8a0e5b634", "patch": "@@ -26,14 +26,18 @@ const int Export::magic_len;\n // Current version magic string.\n const char Export::cur_magic[Export::magic_len] =\n   {\n-    'v', '2', ';', '\\n'\n+    'v', '3', ';', '\\n'\n   };\n \n-// Magic string for previous version (still supported)\n+// Magic strings for previous versions (still supported).\n const char Export::v1_magic[Export::magic_len] =\n   {\n     'v', '1', ';', '\\n'\n   };\n+const char Export::v2_magic[Export::magic_len] =\n+  {\n+    'v', '2', ';', '\\n'\n+  };\n \n const int Export::checksum_len;\n \n@@ -147,7 +151,7 @@ Export::export_globals(const std::string& package_name,\n   // The package name.\n   this->write_c_string(\"package \");\n   this->write_string(package_name);\n-  this->write_c_string(\";\\n\");\n+  this->write_c_string(\"\\n\");\n \n   // The prefix or package path, used for all global symbols.\n   if (prefix.empty())\n@@ -161,7 +165,7 @@ Export::export_globals(const std::string& package_name,\n       this->write_c_string(\"prefix \");\n       this->write_string(prefix);\n     }\n-  this->write_c_string(\";\\n\");\n+  this->write_c_string(\"\\n\");\n \n   this->write_packages(packages);\n \n@@ -191,7 +195,7 @@ Export::export_globals(const std::string& package_name,\n       dig = c & 0xf;\n       s += dig < 10 ? '0' + dig : 'A' + dig - 10;\n     }\n-  s += \";\\n\";\n+  s += \"\\n\";\n   this->stream_->write_checksum(s);\n }\n \n@@ -233,7 +237,7 @@ Export::write_packages(const std::map<std::string, Package*>& packages)\n       this->write_string((*p)->pkgpath());\n       this->write_c_string(\" \");\n       this->write_string((*p)->pkgpath_symbol());\n-      this->write_c_string(\";\\n\");\n+      this->write_c_string(\"\\n\");\n     }\n }\n \n@@ -271,7 +275,7 @@ Export::write_imports(const std::map<std::string, Package*>& imports)\n       this->write_string(p->second->pkgpath());\n       this->write_c_string(\" \\\"\");\n       this->write_string(p->first);\n-      this->write_c_string(\"\\\";\\n\");\n+      this->write_c_string(\"\\\"\\n\");\n \n       this->packages_.insert(p->second);\n     }\n@@ -347,7 +351,7 @@ Export::write_imported_init_fns(const std::string& package_name,\n \n   if (imported_init_fns.empty())\n     {\n-      this->write_c_string(\";\\n\");\n+      this->write_c_string(\"\\n\");\n       return;\n     }\n \n@@ -394,7 +398,7 @@ Export::write_imported_init_fns(const std::string& package_name,\n \t    it->second.push_back(ii->init_name());\n \t}\n     }\n-  this->write_c_string(\";\\n\");\n+  this->write_c_string(\"\\n\");\n \n   // Create the init graph. Start by populating the graph with\n   // all the edges we inherited from imported packages.\n@@ -494,7 +498,7 @@ Export::write_imported_init_fns(const std::string& package_name,\n \t  this->write_unsigned(sink);\n \t}\n     }\n-  this->write_c_string(\";\\n\");\n+  this->write_c_string(\"\\n\");\n }\n \n // Write a name to the export stream."}, {"sha": "b08bf8513182ae99125d8c84fe0f49947ee300c4", "filename": "gcc/go/gofrontend/export.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8ce849a483cacda23eb12989a1fb3d8a0e5b634/gcc%2Fgo%2Fgofrontend%2Fexport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8ce849a483cacda23eb12989a1fb3d8a0e5b634/gcc%2Fgo%2Fgofrontend%2Fexport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.h?ref=e8ce849a483cacda23eb12989a1fb3d8a0e5b634", "patch": "@@ -57,7 +57,8 @@ enum Export_data_version {\n   EXPORT_FORMAT_UNKNOWN = 0,\n   EXPORT_FORMAT_V1 = 1,\n   EXPORT_FORMAT_V2 = 2,\n-  EXPORT_FORMAT_CURRENT = EXPORT_FORMAT_V2\n+  EXPORT_FORMAT_V3 = 3,\n+  EXPORT_FORMAT_CURRENT = EXPORT_FORMAT_V3\n };\n \n // This class manages exporting Go declarations.  It handles the main\n@@ -119,9 +120,10 @@ class Export : public String_dump\n   // Size of export data magic string (which includes version number).\n   static const int magic_len = 4;\n \n-  // Magic strings (current version and older v1 version).\n+  // Magic strings (current version and older versions).\n   static const char cur_magic[magic_len];\n   static const char v1_magic[magic_len];\n+  static const char v2_magic[magic_len];\n \n   // The length of the checksum string.\n   static const int checksum_len = 20;"}, {"sha": "d07068d49ac5bf3da594900ebdc1b56f9a01af50", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8ce849a483cacda23eb12989a1fb3d8a0e5b634/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8ce849a483cacda23eb12989a1fb3d8a0e5b634/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=e8ce849a483cacda23eb12989a1fb3d8a0e5b634", "patch": "@@ -5391,7 +5391,7 @@ Function::export_func_with_type(Export* exp, const std::string& name,\n \t  exp->write_c_string(\")\");\n \t}\n     }\n-  exp->write_c_string(\";\\n\");\n+  exp->write_c_string(\"\\n\");\n }\n \n // Import a function.\n@@ -5498,7 +5498,8 @@ Function::import_func(Import* imp, std::string* pname,\n \t  imp->require_c_string(\")\");\n \t}\n     }\n-  imp->require_c_string(\";\\n\");\n+  imp->require_semicolon_if_old_version();\n+  imp->require_c_string(\"\\n\");\n   *presults = results;\n }\n \n@@ -6885,7 +6886,7 @@ Variable::export_var(Export* exp, const std::string& name) const\n   exp->write_string(name);\n   exp->write_c_string(\" \");\n   exp->write_type(this->type());\n-  exp->write_c_string(\";\\n\");\n+  exp->write_c_string(\"\\n\");\n }\n \n // Import a variable.\n@@ -6897,7 +6898,8 @@ Variable::import_var(Import* imp, std::string* pname, Type** ptype)\n   *pname = imp->read_identifier();\n   imp->require_c_string(\" \");\n   *ptype = imp->read_type();\n-  imp->require_c_string(\";\\n\");\n+  imp->require_semicolon_if_old_version();\n+  imp->require_c_string(\"\\n\");\n }\n \n // Convert a variable to the backend representation.\n@@ -7089,7 +7091,7 @@ Named_constant::export_const(Export* exp, const std::string& name) const\n     }\n   exp->write_c_string(\"= \");\n   this->expr()->export_expression(exp);\n-  exp->write_c_string(\";\\n\");\n+  exp->write_c_string(\"\\n\");\n }\n \n // Import a constant.\n@@ -7110,7 +7112,8 @@ Named_constant::import_const(Import* imp, std::string* pname, Type** ptype,\n     }\n   imp->require_c_string(\"= \");\n   *pexpr = Expression::import_expression(imp);\n-  imp->require_c_string(\";\\n\");\n+  imp->require_semicolon_if_old_version();\n+  imp->require_c_string(\"\\n\");\n }\n \n // Get the backend representation."}, {"sha": "ad30e6ee488e9d7d6093fc2b06d5284c27030afe", "filename": "gcc/go/gofrontend/import.cc", "status": "modified", "additions": 32, "deletions": 13, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8ce849a483cacda23eb12989a1fb3d8a0e5b634/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8ce849a483cacda23eb12989a1fb3d8a0e5b634/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.cc?ref=e8ce849a483cacda23eb12989a1fb3d8a0e5b634", "patch": "@@ -241,8 +241,9 @@ Import::find_export_data(const std::string& filename, int fd, Location location)\n     return NULL;\n \n   // Check for a file containing nothing but Go export data.\n-  if (memcmp(buf, Export::cur_magic, Export::magic_len) == 0 ||\n-      memcmp(buf, Export::v1_magic, Export::magic_len) == 0)\n+  if (memcmp(buf, Export::cur_magic, Export::magic_len) == 0\n+      || memcmp(buf, Export::v1_magic, Export::magic_len) == 0\n+      || memcmp(buf, Export::v2_magic, Export::magic_len) == 0)\n     return new Stream_from_file(fd);\n \n   // See if we can read this as an archive.\n@@ -325,6 +326,12 @@ Import::import(Gogo* gogo, const std::string& local_name,\n \t                        Export::magic_len);\n \t  this->version_ = EXPORT_FORMAT_V1;\n \t}\n+      else if (stream->match_bytes(Export::v2_magic, Export::magic_len))\n+\t{\n+\t  stream->require_bytes(this->location_, Export::v2_magic,\n+\t                        Export::magic_len);\n+\t  this->version_ = EXPORT_FORMAT_V2;\n+\t}\n       else\n \t{\n \t  go_error_at(this->location_,\n@@ -335,15 +342,17 @@ Import::import(Gogo* gogo, const std::string& local_name,\n \n       this->require_c_string(\"package \");\n       std::string package_name = this->read_identifier();\n-      this->require_c_string(\";\\n\");\n+      this->require_semicolon_if_old_version();\n+      this->require_c_string(\"\\n\");\n \n       std::string pkgpath;\n       std::string pkgpath_symbol;\n       if (this->match_c_string(\"prefix \"))\n \t{\n \t  this->advance(7);\n \t  std::string unique_prefix = this->read_identifier();\n-\t  this->require_c_string(\";\\n\");\n+\t  this->require_semicolon_if_old_version();\n+\t  this->require_c_string(\"\\n\");\n \t  pkgpath = unique_prefix + '.' + package_name;\n \t  pkgpath_symbol = (Gogo::pkgpath_for_symbol(unique_prefix) + '.'\n \t\t\t    + Gogo::pkgpath_for_symbol(package_name));\n@@ -352,10 +361,14 @@ Import::import(Gogo* gogo, const std::string& local_name,\n \t{\n \t  this->require_c_string(\"pkgpath \");\n \t  pkgpath = this->read_identifier();\n-\t  this->require_c_string(\";\\n\");\n+\t  this->require_semicolon_if_old_version();\n+\t  this->require_c_string(\"\\n\");\n \t  pkgpath_symbol = Gogo::pkgpath_for_symbol(pkgpath);\n \t}\n \n+      if (stream->saw_error())\n+\treturn NULL;\n+\n       this->package_ = gogo->add_imported_package(package_name, local_name,\n \t\t\t\t\t\t  is_local_name_exported,\n \t\t\t\t\t\t  pkgpath, pkgpath_symbol,\n@@ -418,7 +431,8 @@ Import::import(Gogo* gogo, const std::string& local_name,\n       // load time.\n       this->require_c_string(\"checksum \");\n       stream->advance(Export::checksum_len * 2);\n-      this->require_c_string(\";\\n\");\n+      this->require_semicolon_if_old_version();\n+      this->require_c_string(\"\\n\");\n     }\n \n   return this->package_;\n@@ -436,7 +450,8 @@ Import::read_one_package()\n   std::string pkgpath = this->read_identifier();\n   this->require_c_string(\" \");\n   std::string pkgpath_symbol = this->read_identifier();\n-  this->require_c_string(\";\\n\");\n+  this->require_semicolon_if_old_version();\n+  this->require_c_string(\"\\n\");\n \n   Package* p = this->gogo_->register_package(pkgpath, pkgpath_symbol,\n \t\t\t\t\t     Linemap::unknown_location());\n@@ -456,7 +471,9 @@ Import::read_one_import()\n   Stream* stream = this->stream_;\n   while (stream->peek_char() != '\"')\n     stream->advance(1);\n-  this->require_c_string(\"\\\";\\n\");\n+  this->require_c_string(\"\\\"\");\n+  this->require_semicolon_if_old_version();\n+  this->require_c_string(\"\\n\");\n \n   Package* p = this->gogo_->register_package(pkgpath, \"\",\n \t\t\t\t\t     Linemap::unknown_location());\n@@ -474,7 +491,7 @@ Import::read_import_init_fns(Gogo* gogo)\n   // to read the init_graph section.\n   std::map<std::string, unsigned> init_idx;\n \n-  while (!this->match_c_string(\";\"))\n+  while (!this->match_c_string(\"\\n\") && !this->match_c_string(\";\"))\n     {\n       int priority = -1;\n \n@@ -499,7 +516,8 @@ Import::read_import_init_fns(Gogo* gogo)\n       unsigned idx = init_idx.size();\n       init_idx[init_name] = idx;\n     }\n-  this->require_c_string(\";\\n\");\n+  this->require_semicolon_if_old_version();\n+  this->require_c_string(\"\\n\");\n \n   if (this->match_c_string(\"init_graph\"))\n     {\n@@ -524,7 +542,7 @@ Import::read_import_init_fns(Gogo* gogo)\n       //\n       // where src + sink are init functions indices.\n \n-      while (!this->match_c_string(\";\"))\n+      while (!this->match_c_string(\"\\n\") && !this->match_c_string(\";\"))\n \t{\n \t  this->require_c_string(\" \");\n \t  std::string src_string = this->read_identifier();\n@@ -543,7 +561,8 @@ Import::read_import_init_fns(Gogo* gogo)\n \n \t  ii_src->record_precursor_fcn(ii_sink->init_name());\n \t}\n-      this->require_c_string(\";\\n\");\n+      this->require_semicolon_if_old_version();\n+      this->require_c_string(\"\\n\");\n     }\n }\n \n@@ -967,7 +986,7 @@ Import::read_identifier()\n   while (true)\n     {\n       c = stream->peek_char();\n-      if (c == -1 || c == ' ' || c == ';')\n+      if (c == -1 || c == ' ' || c == '\\n' || c == ';')\n \tbreak;\n       ret += c;\n       stream->advance(1);"}, {"sha": "84f5fc7eb86ef255e71aca44030568cc05db9896", "filename": "gcc/go/gofrontend/import.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8ce849a483cacda23eb12989a1fb3d8a0e5b634/gcc%2Fgo%2Fgofrontend%2Fimport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8ce849a483cacda23eb12989a1fb3d8a0e5b634/gcc%2Fgo%2Fgofrontend%2Fimport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.h?ref=e8ce849a483cacda23eb12989a1fb3d8a0e5b634", "patch": "@@ -184,6 +184,15 @@ class Import\n   advance(size_t skip)\n   { this->stream_->advance(skip); }\n \n+  // Skip a semicolon if using an older version.\n+  void\n+  require_semicolon_if_old_version()\n+  {\n+    if (this->version_ == EXPORT_FORMAT_V1\n+\t|| this->version_ == EXPORT_FORMAT_V2)\n+      this->require_c_string(\";\");\n+  }\n+\n   // Read an identifier.\n   std::string\n   read_identifier();"}, {"sha": "573011a25658da72e110850c022ac2d746dfbe35", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8ce849a483cacda23eb12989a1fb3d8a0e5b634/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8ce849a483cacda23eb12989a1fb3d8a0e5b634/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=e8ce849a483cacda23eb12989a1fb3d8a0e5b634", "patch": "@@ -10892,7 +10892,7 @@ Named_type::export_named_type(Export* exp, const std::string&) const\n   // be written by Export::write_type anyhow.\n   exp->write_c_string(\"type \");\n   exp->write_type(this);\n-  exp->write_c_string(\";\\n\");\n+  exp->write_c_string(\"\\n\");\n }\n \n // Import a named type.\n@@ -10904,7 +10904,8 @@ Named_type::import_named_type(Import* imp, Named_type** ptype)\n   Type *type = imp->read_type();\n   *ptype = type->named_type();\n   go_assert(*ptype != NULL);\n-  imp->require_c_string(\";\\n\");\n+  imp->require_semicolon_if_old_version();\n+  imp->require_c_string(\"\\n\");\n }\n \n // Export the type when it is referenced by another type.  In this"}, {"sha": "d3ce10cb0ca64f95e5ebcc44e603d9072deff7a1", "filename": "libgo/go/go/internal/gccgoimporter/importer.go", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8ce849a483cacda23eb12989a1fb3d8a0e5b634/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Fimporter.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8ce849a483cacda23eb12989a1fb3d8a0e5b634/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Fimporter.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Fimporter.go?ref=e8ce849a483cacda23eb12989a1fb3d8a0e5b634", "patch": "@@ -64,6 +64,7 @@ func findExportFile(searchpaths []string, pkgpath string) (string, error) {\n const (\n \tgccgov1Magic    = \"v1;\\n\"\n \tgccgov2Magic    = \"v2;\\n\"\n+\tgccgov3Magic    = \"v3;\\n\"\n \tgoimporterMagic = \"\\n$$ \"\n \tarchiveMagic    = \"!<ar\"\n \taixbigafMagic   = \"<big\"\n@@ -93,7 +94,7 @@ func openExportFile(fpath string) (reader io.ReadSeeker, closer io.Closer, err e\n \n \tvar objreader io.ReaderAt\n \tswitch string(magic[:]) {\n-\tcase gccgov1Magic, gccgov2Magic, goimporterMagic:\n+\tcase gccgov1Magic, gccgov2Magic, gccgov3Magic, goimporterMagic:\n \t\t// Raw export data.\n \t\treader = f\n \t\treturn\n@@ -208,7 +209,7 @@ func GetImporter(searchpaths []string, initmap map[*types.Package]InitData) Impo\n \t\t}\n \n \t\tswitch magics {\n-\t\tcase gccgov1Magic, gccgov2Magic:\n+\t\tcase gccgov1Magic, gccgov2Magic, gccgov3Magic:\n \t\t\tvar p parser\n \t\t\tp.init(fpath, reader, imports)\n \t\t\tpkg = p.parsePackage()"}, {"sha": "5988c5d36738f117319cfb76eb84ab9c762f7466", "filename": "libgo/go/go/internal/gccgoimporter/parser.go", "status": "modified", "additions": 47, "deletions": 35, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8ce849a483cacda23eb12989a1fb3d8a0e5b634/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Fparser.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8ce849a483cacda23eb12989a1fb3d8a0e5b634/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Fparser.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Fparser.go?ref=e8ce849a483cacda23eb12989a1fb3d8a0e5b634", "patch": "@@ -34,7 +34,7 @@ func (p *parser) init(filename string, src io.Reader, imports map[string]*types.\n \tp.scanner.Init(src)\n \tp.scanner.Error = func(_ *scanner.Scanner, msg string) { p.error(msg) }\n \tp.scanner.Mode = scanner.ScanIdents | scanner.ScanInts | scanner.ScanFloats | scanner.ScanStrings | scanner.ScanComments | scanner.SkipComments\n-\tp.scanner.Whitespace = 1<<'\\t' | 1<<'\\n' | 1<<' '\n+\tp.scanner.Whitespace = 1<<'\\t' | 1<<' '\n \tp.scanner.Filename = filename // for good error messages\n \tp.next()\n \tp.imports = imports\n@@ -71,6 +71,13 @@ func (p *parser) expect(tok rune) string {\n \treturn lit\n }\n \n+func (p *parser) expectEOL() {\n+\tif p.version == \"v1\" || p.version == \"v2\" {\n+\t\tp.expect(';')\n+\t}\n+\tp.expect('\\n')\n+}\n+\n func (p *parser) expectKeyword(keyword string) {\n \tlit := p.expect(scanner.Ident)\n \tif lit != keyword {\n@@ -96,7 +103,7 @@ func (p *parser) parseUnquotedString() string {\n \tbuf.WriteString(p.scanner.TokenText())\n \t// This loop needs to examine each character before deciding whether to consume it. If we see a semicolon,\n \t// we need to let it be consumed by p.next().\n-\tfor ch := p.scanner.Peek(); ch != ';' && ch != scanner.EOF && p.scanner.Whitespace&(1<<uint(ch)) == 0; ch = p.scanner.Peek() {\n+\tfor ch := p.scanner.Peek(); ch != '\\n' && ch != ';' && ch != scanner.EOF && p.scanner.Whitespace&(1<<uint(ch)) == 0; ch = p.scanner.Peek() {\n \t\tbuf.WriteRune(ch)\n \t\tp.scanner.Next()\n \t}\n@@ -431,19 +438,22 @@ func (p *parser) parseNamedType(n int) types.Type {\n \t\tnt.SetUnderlying(underlying.Underlying())\n \t}\n \n-\t// collect associated methods\n-\tfor p.tok == scanner.Ident {\n-\t\tp.expectKeyword(\"func\")\n-\t\tp.expect('(')\n-\t\treceiver, _ := p.parseParam(pkg)\n-\t\tp.expect(')')\n-\t\tname := p.parseName()\n-\t\tparams, isVariadic := p.parseParamList(pkg)\n-\t\tresults := p.parseResultList(pkg)\n-\t\tp.expect(';')\n-\n-\t\tsig := types.NewSignature(receiver, params, results, isVariadic)\n-\t\tnt.AddMethod(types.NewFunc(token.NoPos, pkg, name, sig))\n+\tif p.tok == '\\n' {\n+\t\tp.next()\n+\t\t// collect associated methods\n+\t\tfor p.tok == scanner.Ident {\n+\t\t\tp.expectKeyword(\"func\")\n+\t\t\tp.expect('(')\n+\t\t\treceiver, _ := p.parseParam(pkg)\n+\t\t\tp.expect(')')\n+\t\t\tname := p.parseName()\n+\t\t\tparams, isVariadic := p.parseParamList(pkg)\n+\t\t\tresults := p.parseResultList(pkg)\n+\t\t\tp.expectEOL()\n+\n+\t\t\tsig := types.NewSignature(receiver, params, results, isVariadic)\n+\t\t\tnt.AddMethod(types.NewFunc(token.NoPos, pkg, name, sig))\n+\t\t}\n \t}\n \n \treturn nt\n@@ -740,11 +750,12 @@ func (p *parser) parsePackageInit() PackageInit {\n \treturn PackageInit{Name: name, InitFunc: initfunc, Priority: priority}\n }\n \n-// Throw away tokens until we see a ';'. If we see a '<', attempt to parse as a type.\n+// Throw away tokens until we see a newline or ';'.\n+// If we see a '<', attempt to parse as a type.\n func (p *parser) discardDirectiveWhileParsingTypes(pkg *types.Package) {\n \tfor {\n \t\tswitch p.tok {\n-\t\tcase ';':\n+\t\tcase '\\n', ';':\n \t\t\treturn\n \t\tcase '<':\n \t\t\tp.parseType(pkg)\n@@ -763,7 +774,7 @@ func (p *parser) maybeCreatePackage() {\n \t}\n }\n \n-// InitDataDirective = ( \"v1\" | \"v2\" ) \";\" |\n+// InitDataDirective = ( \"v1\" | \"v2\" | \"v3\" ) \";\" |\n //                     \"priority\" int \";\" |\n //                     \"init\" { PackageInit } \";\" |\n //                     \"checksum\" unquotedString \";\" .\n@@ -774,31 +785,32 @@ func (p *parser) parseInitDataDirective() {\n \t}\n \n \tswitch p.lit {\n-\tcase \"v1\", \"v2\":\n+\tcase \"v1\", \"v2\", \"v3\":\n \t\tp.version = p.lit\n \t\tp.next()\n \t\tp.expect(';')\n+\t\tp.expect('\\n')\n \n \tcase \"priority\":\n \t\tp.next()\n \t\tp.initdata.Priority = int(p.parseInt())\n-\t\tp.expect(';')\n+\t\tp.expectEOL()\n \n \tcase \"init\":\n \t\tp.next()\n-\t\tfor p.tok != ';' && p.tok != scanner.EOF {\n+\t\tfor p.tok != '\\n' && p.tok != ';' && p.tok != scanner.EOF {\n \t\t\tp.initdata.Inits = append(p.initdata.Inits, p.parsePackageInit())\n \t\t}\n-\t\tp.expect(';')\n+\t\tp.expectEOL()\n \n \tcase \"init_graph\":\n \t\tp.next()\n \t\t// The graph data is thrown away for now.\n-\t\tfor p.tok != ';' && p.tok != scanner.EOF {\n+\t\tfor p.tok != '\\n' && p.tok != ';' && p.tok != scanner.EOF {\n \t\t\tp.parseInt()\n \t\t\tp.parseInt()\n \t\t}\n-\t\tp.expect(';')\n+\t\tp.expectEOL()\n \n \tcase \"checksum\":\n \t\t// Don't let the scanner try to parse the checksum as a number.\n@@ -808,7 +820,7 @@ func (p *parser) parseInitDataDirective() {\n \t\tp.scanner.Mode &^= scanner.ScanInts | scanner.ScanFloats\n \t\tp.next()\n \t\tp.parseUnquotedString()\n-\t\tp.expect(';')\n+\t\tp.expectEOL()\n \n \tdefault:\n \t\tp.errorf(\"unexpected identifier: %q\", p.lit)\n@@ -831,62 +843,62 @@ func (p *parser) parseDirective() {\n \t}\n \n \tswitch p.lit {\n-\tcase \"v1\", \"v2\", \"priority\", \"init\", \"init_graph\", \"checksum\":\n+\tcase \"v1\", \"v2\", \"v3\", \"priority\", \"init\", \"init_graph\", \"checksum\":\n \t\tp.parseInitDataDirective()\n \n \tcase \"package\":\n \t\tp.next()\n \t\tp.pkgname = p.parseUnquotedString()\n \t\tp.maybeCreatePackage()\n-\t\tif p.version == \"v2\" && p.tok != ';' {\n+\t\tif p.version != \"v1\" && p.tok != '\\n' && p.tok != ';' {\n \t\t\tp.parseUnquotedString()\n \t\t\tp.parseUnquotedString()\n \t\t}\n-\t\tp.expect(';')\n+\t\tp.expectEOL()\n \n \tcase \"pkgpath\":\n \t\tp.next()\n \t\tp.pkgpath = p.parseUnquotedString()\n \t\tp.maybeCreatePackage()\n-\t\tp.expect(';')\n+\t\tp.expectEOL()\n \n \tcase \"prefix\":\n \t\tp.next()\n \t\tp.pkgpath = p.parseUnquotedString()\n-\t\tp.expect(';')\n+\t\tp.expectEOL()\n \n \tcase \"import\":\n \t\tp.next()\n \t\tpkgname := p.parseUnquotedString()\n \t\tpkgpath := p.parseUnquotedString()\n \t\tp.getPkg(pkgpath, pkgname)\n \t\tp.parseString()\n-\t\tp.expect(';')\n+\t\tp.expectEOL()\n \n \tcase \"func\":\n \t\tp.next()\n \t\tfun := p.parseFunc(p.pkg)\n \t\tif fun != nil {\n \t\t\tp.pkg.Scope().Insert(fun)\n \t\t}\n-\t\tp.expect(';')\n+\t\tp.expectEOL()\n \n \tcase \"type\":\n \t\tp.next()\n \t\tp.parseType(p.pkg)\n-\t\tp.expect(';')\n+\t\tp.expectEOL()\n \n \tcase \"var\":\n \t\tp.next()\n \t\tv := p.parseVar(p.pkg)\n \t\tp.pkg.Scope().Insert(v)\n-\t\tp.expect(';')\n+\t\tp.expectEOL()\n \n \tcase \"const\":\n \t\tp.next()\n \t\tc := p.parseConst(p.pkg)\n \t\tp.pkg.Scope().Insert(c)\n-\t\tp.expect(';')\n+\t\tp.expectEOL()\n \n \tdefault:\n \t\tp.errorf(\"unexpected identifier: %q\", p.lit)"}, {"sha": "4d3568afc3df3d9c15d2b13cae60b989c2a8531c", "filename": "libgo/go/go/internal/gccgoimporter/parser_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8ce849a483cacda23eb12989a1fb3d8a0e5b634/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Fparser_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8ce849a483cacda23eb12989a1fb3d8a0e5b634/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Fparser_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Fparser_test.go?ref=e8ce849a483cacda23eb12989a1fb3d8a0e5b634", "patch": "@@ -19,7 +19,7 @@ var typeParserTests = []struct {\n \t{id: \"foo\", typ: \"<type 1 *<type -19>>\", want: \"*error\"},\n \t{id: \"foo\", typ: \"<type 1 *any>\", want: \"unsafe.Pointer\"},\n \t{id: \"foo\", typ: \"<type 1 \\\"Bar\\\" <type 2 *<type 1>>>\", want: \"foo.Bar\", underlying: \"*foo.Bar\"},\n-\t{id: \"foo\", typ: \"<type 1 \\\"bar.Foo\\\" \\\"bar\\\" <type -1> func (? <type 1>) M (); >\", want: \"bar.Foo\", underlying: \"int8\", methods: \"func (bar.Foo).M()\"},\n+\t{id: \"foo\", typ: \"<type 1 \\\"bar.Foo\\\" \\\"bar\\\" <type -1>\\n func (? <type 1>) M ()\\n>\", want: \"bar.Foo\", underlying: \"int8\", methods: \"func (bar.Foo).M()\"},\n \t{id: \"foo\", typ: \"<type 1 \\\".bar.foo\\\" \\\"bar\\\" <type -1>>\", want: \"bar.foo\", underlying: \"int8\"},\n \t{id: \"foo\", typ: \"<type 1 []<type -1>>\", want: \"[]int8\"},\n \t{id: \"foo\", typ: \"<type 1 [42]<type -1>>\", want: \"[42]int8\"},"}]}