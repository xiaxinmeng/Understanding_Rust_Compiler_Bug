{"sha": "1660cb3ac4068304926550396c9da9fb26e26b74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY2MGNiM2FjNDA2ODMwNDkyNjU1MDM5NmM5ZGE5ZmIyNmUyNmI3NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@casey.cygnus.com", "date": "2000-03-10T11:56:00Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-03-10T11:56:00Z"}, "message": "lang-options.h, decl2.c: Add -fno-enforce-eh-specs.\n\n        * lang-options.h, decl2.c: Add -fno-enforce-eh-specs.\n        * cp-tree.h: Declare flag_enforce_eh_specs.\n        * decl.c (store_parm_decls, finish_function): Check it.\n\n        C library functions don't throw.\n        * Makefile.in (cfns.h): New target.\n        (except.o): Depend on it.\n        * Make-lang.in (cc1plus): Depend on cfns.gperf.\n        * cfns.gperf: New file.\n        * cfns.h: Generated.\n        * except.c: Include it.\n        (nothrow_libfn_p): New fn.\n        * decl.c (grokfndecl): Use it.\n        * cp-tree.h: Declare it.\n\nFrom-SVN: r32469", "tree": {"sha": "64d2573001d0d41dba0b3e2f6df81872d766ceec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64d2573001d0d41dba0b3e2f6df81872d766ceec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1660cb3ac4068304926550396c9da9fb26e26b74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1660cb3ac4068304926550396c9da9fb26e26b74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1660cb3ac4068304926550396c9da9fb26e26b74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1660cb3ac4068304926550396c9da9fb26e26b74/comments", "author": null, "committer": null, "parents": [{"sha": "0c11ada67b89f4103c6c4abf680149bc3dee0959", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c11ada67b89f4103c6c4abf680149bc3dee0959", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c11ada67b89f4103c6c4abf680149bc3dee0959"}], "stats": {"total": 750, "additions": 748, "deletions": 2}, "files": [{"sha": "d518d7395b0521b7996031d87235c9fd1a9f20ad", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1660cb3ac4068304926550396c9da9fb26e26b74/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1660cb3ac4068304926550396c9da9fb26e26b74/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1660cb3ac4068304926550396c9da9fb26e26b74", "patch": "@@ -1,5 +1,20 @@\n 2000-03-10  Jason Merrill  <jason@casey.cygnus.com>\n \n+\t* lang-options.h, decl2.c: Add -fno-enforce-eh-specs.\n+\t* cp-tree.h: Declare flag_enforce_eh_specs.\n+\t* decl.c (store_parm_decls, finish_function): Check it.\n+\n+\tC library functions don't throw.\n+\t* Makefile.in (cfns.h): New target.\n+\t(except.o): Depend on it.\n+\t* Make-lang.in (cc1plus): Depend on cfns.gperf.\n+\t* cfns.gperf: New file.\n+\t* cfns.h: Generated.\n+\t* except.c: Include it.\n+\t(nothrow_libfn_p): New fn.\n+\t* decl.c (grokfndecl): Use it.\n+\t* cp-tree.h: Declare it.\n+\t\n \t* decl.c (push_overloaded_decl_1, auto_function, \n \tdefine_function): Lose.\n \t(build_library_fn_1): New static fn."}, {"sha": "745e033b1e702c04c3becef93ccd98df90a4a66b", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1660cb3ac4068304926550396c9da9fb26e26b74/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1660cb3ac4068304926550396c9da9fb26e26b74/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=1660cb3ac4068304926550396c9da9fb26e26b74", "patch": "@@ -123,7 +123,7 @@ CXX_SRCS = $(srcdir)/cp/call.c $(srcdir)/cp/class.c $(srcdir)/cp/cp-tree.def \\\n \n cc1plus$(exeext): $(P) $(CXX_SRCS) $(LIBDEPS) stamp-objlist c-common.o \\\n         c-pragma.o $(srcdir)/cp/cp-tree.h $(srcdir)/cp/cp-tree.def \\\n-\t$(srcdir)/cp/gxx.gperf hash.o\n+\t$(srcdir)/cp/gxx.gperf $(srcdir)/cp/cfns.gperf hash.o\n \tcd cp; $(MAKE) $(FLAGS_TO_PASS) $(CXX_FLAGS_TO_PASS) ../cc1plus$(exeext)\n #\f\n # Build hooks:"}, {"sha": "43bebf53a9a1039bd23e4dc57150ed04ce44e29b", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1660cb3ac4068304926550396c9da9fb26e26b74/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1660cb3ac4068304926550396c9da9fb26e26b74/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=1660cb3ac4068304926550396c9da9fb26e26b74", "patch": "@@ -242,6 +242,10 @@ $(srcdir)/hash.h: $(srcdir)/gxx.gperf\n \techo \"\tftp://sourceware.cygnus.com/pub/egcs/infrastructure/gperf*\" >&2 ; \\\n \texit 1 )\n \n+$(srcdir)/cfns.h: $(srcdir)/cfns.gperf\n+\tgperf -o -C -E -k '1-6,$$' -j1 -D -N 'libc_name_p' \\\n+\t\t$(srcdir)/cfns.gperf > $(srcdir)/cfns.h\n+\n spew.o : spew.c $(CXX_TREE_H) $(PARSE_H) $(srcdir)/../flags.h \\\n   lex.h $(srcdir)/../toplev.h\n lex.o : lex.c $(CXX_TREE_H) \\\n@@ -283,7 +287,7 @@ ptree.o : ptree.c $(CXX_TREE_H) $(srcdir)/../system.h\n rtti.o : rtti.c $(CXX_TREE_H) $(srcdir)/../flags.h \\\n   $(srcdir)/../toplev.h\n except.o : except.c $(CXX_TREE_H) $(srcdir)/../flags.h $(RTL_H) \\\n-  $(srcdir)/../except.h $(srcdir)/../toplev.h\n+  $(srcdir)/../except.h $(srcdir)/../toplev.h cfns.h\n expr.o : expr.c $(CXX_TREE_H) $(RTL_H) $(srcdir)/../flags.h \\\n   $(EXPR_H) $(srcdir)/../toplev.h $(srcdir)/../except.h\n xref.o : xref.c $(CXX_TREE_H) $(srcdir)/../input.h \\"}, {"sha": "d7a530a6d4b514002741da394091695873f3f0d6", "filename": "gcc/cp/cfns.gperf", "status": "added", "additions": 219, "deletions": 0, "changes": 219, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1660cb3ac4068304926550396c9da9fb26e26b74/gcc%2Fcp%2Fcfns.gperf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1660cb3ac4068304926550396c9da9fb26e26b74/gcc%2Fcp%2Fcfns.gperf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcfns.gperf?ref=1660cb3ac4068304926550396c9da9fb26e26b74", "patch": "@@ -0,0 +1,219 @@\n+# The standard C library functions, for feeding to gperf; the result is used\n+# by nothrow_libfn_p.\n+#\n+#   [lib.res.on.exception.handling]: None of the functions from the\n+#   Standard C library shall report an error by throwing an\n+#   exception, unless it calls a program-supplied function that\n+#   throws an exception.\n+#\n+# bsearch and qsort are commented out because they can call such functions.\n+#\n+abort\n+abs\n+acos\n+asctime\n+asin\n+atan\n+atan2\n+atexit\n+atof\n+atoi\n+atol\n+#bsearch\n+btowc\n+calloc\n+ceil\n+clearerr\n+clock\n+cos\n+cosh\n+ctime\n+difftime\n+div\n+exit\n+exp\n+fabs\n+fclose\n+feof\n+ferror\n+fflush\n+fgetc\n+fgetpos\n+fgets\n+fgetwc\n+fgetws\n+floor\n+fmod\n+fopen\n+fprintf\n+fputc\n+fputs\n+fputwc\n+fputws\n+fread\n+free\n+freopen\n+frexp\n+fscanf\n+fseek\n+fsetpos\n+ftell\n+fwide\n+fwprintf\n+fwrite\n+fwscanf\n+getc\n+getchar\n+getenv\n+gets\n+getwc\n+getwchar\n+gmtime\n+isalnum\n+isalpha\n+iscntrl\n+isdigit\n+isgraph\n+islower\n+isprint\n+ispunct\n+isspace\n+isupper\n+iswalnum\n+iswalpha\n+iswcntrl\n+iswctype\n+iswdigit\n+iswgraph\n+iswlower\n+iswprint\n+iswpunct\n+iswspace\n+iswupper\n+iswxdigit\n+isxdigit\n+labs\n+ldexp\n+ldiv\n+localeconv\n+localtime\n+log\n+log10\n+longjmp\n+malloc\n+mblen\n+mbrlen\n+mbrtowc\n+mbsinit\n+mbsrtowcs\n+mbstowcs\n+mbtowc\n+memchr\n+memcmp\n+memcpy\n+memmove\n+memset\n+mktime\n+modf\n+perror\n+pow\n+printf\n+putc\n+putchar\n+puts\n+putwc\n+putwchar\n+#qsort\n+raise\n+rand\n+realloc\n+remove\n+rename\n+rewind\n+scanf\n+setbuf\n+setlocale\n+setvbuf\n+signal\n+sin\n+sinh\n+sprintf\n+sqrt\n+srand\n+sscanf\n+strcat\n+strchr\n+strcmp\n+strcoll\n+strcpy\n+strcspn\n+strerror\n+strftime\n+strlen\n+strncat\n+strncmp\n+strncpy\n+strpbrk\n+strrchr\n+strspn\n+strstr\n+strtod\n+strtok\n+strtol\n+strtoul\n+strxfrm\n+swprintf\n+swscanf\n+system\n+tan\n+tanh\n+time\n+tmpfile\n+tmpnam\n+tolower\n+toupper\n+towctrans\n+towlower\n+towupper\n+ungetc\n+ungetwc\n+vfprintf\n+vfwprintf\n+vprintf\n+vsprintf\n+vswprintf\n+vwprintf\n+wcrtomb\n+wcscat\n+wcschr\n+wcscmp\n+wcscoll\n+wcscpy\n+wcscspn\n+wcsftime\n+wcslen\n+wcsncat\n+wcsncmp\n+wcsncpy\n+wcspbrk\n+wcsrchr\n+wcsrtombs\n+wcsspn\n+wcsstr\n+wcstod\n+wcstok\n+wcstol\n+wcstombs\n+wcstoul\n+wcsxfrm\n+wctob\n+wctomb\n+wctrans\n+wctype\n+wmemchr\n+wmemcmp\n+wmemcpy\n+wmemmove\n+wmemset\n+wprintf\n+wscanf"}, {"sha": "df8c7b58be2977527f4f30fffbc00899c72d48a9", "filename": "gcc/cp/cfns.h", "status": "added", "additions": 459, "deletions": 0, "changes": 459, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1660cb3ac4068304926550396c9da9fb26e26b74/gcc%2Fcp%2Fcfns.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1660cb3ac4068304926550396c9da9fb26e26b74/gcc%2Fcp%2Fcfns.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcfns.h?ref=1660cb3ac4068304926550396c9da9fb26e26b74", "patch": "@@ -0,0 +1,459 @@\n+/* C code produced by gperf version 2.7 */\n+/* Command-line: gperf -o -C -E -k 1-6,$ -j1 -D -N libc_name_p /home/jason/eg/gcc/cp/cfns.gperf  */\n+/* maximum key range = 1020, duplicates = 1 */\n+\n+#ifdef __GNUC__\n+__inline\n+#endif\n+static unsigned int\n+hash (str, len)\n+     register const char *str;\n+     register unsigned int len;\n+{\n+  static const unsigned short asso_values[] =\n+    {\n+      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n+      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n+      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n+      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n+      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,    0,    1,\n+         0, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n+      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n+      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n+      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n+      1038, 1038, 1038, 1038, 1038, 1038, 1038,  247,  218,  144,\n+         0,    0,   40,    7,  126,  184,    2,   15,  146,   67,\n+         9,   60,    0,    0,    3,    0,    7,    8,  197,    1,\n+        40,    8, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n+      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n+      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n+      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n+      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n+      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n+      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n+      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n+      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n+      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n+      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n+      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n+      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n+      1038, 1038, 1038, 1038, 1038, 1038\n+    };\n+  register int hval = len;\n+\n+  switch (hval)\n+    {\n+      default:\n+      case 6:\n+        hval += asso_values[(unsigned char)str[5]];\n+      case 5:\n+        hval += asso_values[(unsigned char)str[4]];\n+      case 4:\n+        hval += asso_values[(unsigned char)str[3]];\n+      case 3:\n+        hval += asso_values[(unsigned char)str[2]];\n+      case 2:\n+        hval += asso_values[(unsigned char)str[1]];\n+      case 1:\n+        hval += asso_values[(unsigned char)str[0]];\n+        break;\n+    }\n+  return hval + asso_values[(unsigned char)str[len - 1]];\n+}\n+\n+#ifdef __GNUC__\n+__inline\n+#endif\n+const char *\n+libc_name_p (str, len)\n+     register const char *str;\n+     register unsigned int len;\n+{\n+  enum\n+    {\n+      TOTAL_KEYWORDS = 207,\n+      MIN_WORD_LENGTH = 3,\n+      MAX_WORD_LENGTH = 10,\n+      MIN_HASH_VALUE = 18,\n+      MAX_HASH_VALUE = 1037\n+    };\n+\n+  static const char * const wordlist[] =\n+    {\n+      \"gets\",\n+      \"puts\",\n+      \"sqrt\",\n+      \"strerror\",\n+      \"strstr\",\n+      \"strspn\",\n+      \"exp\",\n+      \"free\",\n+      \"fgets\",\n+      \"fputs\",\n+      \"fgetws\",\n+      \"fputws\",\n+      \"pow\",\n+      \"fseek\",\n+      \"perror\",\n+      \"strtod\",\n+      \"toupper\",\n+      \"towupper\",\n+      \"frexp\",\n+      \"strtok\",\n+      \"fsetpos\",\n+      \"ferror\",\n+      \"freopen\",\n+      \"fgetpos\",\n+      \"fopen\",\n+      \"wmemset\",\n+      \"memset\",\n+      \"system\",\n+      \"wcsstr\",\n+      \"wctype\",\n+      \"strxfrm\",\n+      \"wcsspn\",\n+      \"strcspn\",\n+      \"fmod\",\n+      \"strcpy\",\n+      \"strncpy\",\n+      \"strlen\",\n+      \"ungetwc\",\n+      \"feof\",\n+      \"ldexp\",\n+      \"isupper\",\n+      \"rewind\",\n+      \"iswupper\",\n+      \"sin\",\n+      \"cos\",\n+      \"modf\",\n+      \"iswpunct\",\n+      \"wcstod\",\n+      \"log10\",\n+      \"log\",\n+      \"wcsrtombs\",\n+      \"strcmp\",\n+      \"fwide\",\n+      \"towctrans\",\n+      \"strncmp\",\n+      \"strtoul\",\n+      \"fwrite\",\n+      \"exit\",\n+      \"swprintf\",\n+      \"wcstok\",\n+      \"strftime\",\n+      \"sprintf\",\n+      \"wprintf\",\n+      \"strpbrk\",\n+      \"time\",\n+      \"rand\",\n+      \"srand\",\n+      \"wmemmove\",\n+      \"tan\",\n+      \"tolower\",\n+      \"fwprintf\",\n+      \"towlower\",\n+      \"wcstombs\",\n+      \"printf\",\n+      \"fprintf\",\n+      \"strchr\",\n+      \"strrchr\",\n+      \"wmemcpy\",\n+      \"fread\",\n+      \"getwchar\",\n+      \"putwchar\",\n+      \"longjmp\",\n+      \"memcpy\",\n+      \"wcsxfrm\",\n+      \"wcscspn\",\n+      \"getc\",\n+      \"putc\",\n+      \"getwc\",\n+      \"putwc\",\n+      \"wcscpy\",\n+      \"wcsncpy\",\n+      \"wcslen\",\n+      \"floor\",\n+      \"setbuf\",\n+      \"ungetc\",\n+      \"rename\",\n+      \"remove\",\n+      \"gmtime\",\n+      \"mktime\",\n+      \"fgetc\",\n+      \"fputc\",\n+      \"fgetwc\",\n+      \"fputwc\",\n+      \"memcmp\",\n+      \"iswctype\",\n+      \"wmemcmp\",\n+      \"ispunct\",\n+      \"mbstowcs\",\n+      \"wcscmp\",\n+      \"mbsrtowcs\",\n+      \"setlocale\",\n+      \"wcsncmp\",\n+      \"wcstoul\",\n+      \"strtol\",\n+      \"wcsftime\",\n+      \"iswprint\",\n+      \"wcspbrk\",\n+      \"iswdigit\",\n+      \"isprint\",\n+      \"fclose\",\n+      \"atof\",\n+      \"islower\",\n+      \"iswlower\",\n+      \"ctime\",\n+      \"wmemchr\",\n+      \"memchr\",\n+      \"wctrans\",\n+      \"strcat\",\n+      \"getenv\",\n+      \"strncat\",\n+      \"iswxdigit\",\n+      \"wcschr\",\n+      \"wcsrchr\",\n+      \"isxdigit\",\n+      \"vswprintf\",\n+      \"raise\",\n+      \"iswspace\",\n+      \"vsprintf\",\n+      \"vwprintf\",\n+      \"vprintf\",\n+      \"swscanf\",\n+      \"sinh\",\n+      \"tmpfile\",\n+      \"asin\",\n+      \"mblen\",\n+      \"acos\",\n+      \"mbrlen\",\n+      \"cosh\",\n+      \"difftime\",\n+      \"memmove\",\n+      \"abs\",\n+      \"tmpnam\",\n+      \"vfwprintf\",\n+      \"setvbuf\",\n+      \"vfprintf\",\n+      \"scanf\",\n+      \"sscanf\",\n+      \"wscanf\",\n+      \"fwscanf\",\n+      \"ftell\",\n+      \"fflush\",\n+      \"atexit\",\n+      \"iswcntrl\",\n+      \"iscntrl\",\n+      \"mbrtowc\",\n+      \"wcrtomb\",\n+      \"fabs\",\n+      \"wcstol\",\n+      \"strcoll\",\n+      \"atan2\",\n+      \"tanh\",\n+      \"atan\",\n+      \"fscanf\",\n+      \"clock\",\n+      \"getchar\",\n+      \"putchar\",\n+      \"abort\",\n+      \"clearerr\",\n+      \"wcscat\",\n+      \"wcsncat\",\n+      \"isdigit\",\n+      \"isgraph\",\n+      \"iswgraph\",\n+      \"btowc\",\n+      \"div\",\n+      \"isspace\",\n+      \"atol\",\n+      \"labs\",\n+      \"ceil\",\n+      \"mbtowc\",\n+      \"wcscoll\",\n+      \"wctob\",\n+      \"asctime\",\n+      \"iswalnum\",\n+      \"isalnum\",\n+      \"mbsinit\",\n+      \"atoi\",\n+      \"wctomb\",\n+      \"ldiv\",\n+      \"signal\",\n+      \"realloc\",\n+      \"localtime\",\n+      \"iswalpha\",\n+      \"localeconv\",\n+      \"isalpha\",\n+      \"malloc\",\n+      \"calloc\"\n+    };\n+\n+  static const short lookup[] =\n+    {\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,    0,    1,   -1,    2,   -1,   -1,\n+        -1,   -1,   -1,    3,   -1,    4,   -1,   -1,\n+        -1,   -1,    5,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,    6,   -1,   -1,   -1,    7,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,    8,    9,   10,   11,   -1,\n+        -1,   12,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   13,   -1,   -1,   14,   -1,\n+        -1,   -1,   -1,   15,   -1,   16,   -1,   17,\n+        18,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   19,   20,   -1,   -1,   -1,   21,   22,\n+        -1,   23,   -1,   24,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   25,   -1,   -1,\n+        -1,   -1,   26,   27,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   28,   -1,   29,   30,\n+        -1,   31,   32,   33,   -1,   -1,   -1,   -1,\n+        34,   -1,   35,   -1,   36,   -1,   -1,   37,\n+        38,   -1,   -1,   -1,   -1,   -1,   -1,   39,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   40,   41,   42,   43,   -1,   44,\n+        -1,   -1,   -1,   45,   -1,   -1,   -1,   -1,\n+        -1,   46,   47,   48,   -1,   -1,   -1,   49,\n+        50,   -1,   -1,   51,   -1,   -1,   52,   53,\n+        -1,   -1,   -1,   -1,   -1,   54,   55,   -1,\n+        -1,   56,   57,   -1,   -1,   58,   -1,   -1,\n+        59,   60,   61,   62,   -1,   63,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   64,   65,\n+        66,   -1,   -1,   -1,   -1,   -1,   67,   -1,\n+        -1,   -1,   -1,   68,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   69,   70,   71,   72,\n+        -1,   73,   74,   -1,   75,   76,   77,   78,\n+        79,   80,   81,   -1,   82,   -1,   83,   -1,\n+        -1,   84,   85,   86,   87,   88,   -1,   89,\n+        -1,   90,   -1,   91,   -1,   92,   -1,   93,\n+        -1,   -1,   -1,   -1,   -1,   94,   -1,   -1,\n+        -1,   -1,   -1,   -1,   95,   96,   -1,   -1,\n+        -1,   -1,   97,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   98,   99,  100,  101,  102,  103,\n+       104,  105,   -1,   -1,   -1,   -1,   -1,  106,\n+        -1,  107,  108,   -1,  109,   -1,  110,   -1,\n+        -1,   -1,   -1,   -1,  111,  112,   -1,  113,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+       114,   -1,   -1,  115,  116,   -1,   -1,  117,\n+        -1,   -1,  118,   -1,  119,   -1,  120,   -1,\n+        -1,  121,   -1,  122,   -1,   -1,   -1,  123,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,\n+       125,   -1,  126,   -1,   -1,  127,   -1,  128,\n+       129,  130,   -1,  131,  132,   -1,  133,   -1,\n+        -1,   -1,  134,   -1,   -1,   -1,   -1,  135,\n+       136,  137,  138,   -1,   -1,   -1,   -1,  139,\n+       140,  141,   -1,  142,   -1,  143,  144,  145,\n+        -1,   -1,  146,   -1,  147,   -1,   -1,  148,\n+        -1,  149,   -1,   -1,  150,   -1,  151,   -1,\n+        -1,   -1,  152,   -1,   -1,  153,   -1,   -1,\n+        -1,  154,   -1,   -1,   -1,  155,  156,  157,\n+       158,   -1,  159,   -1,  160,   -1,   -1,   -1,\n+        -1,   -1,  161,  162,  163,   -1,   -1,   -1,\n+        -1,   -1,   -1, -719,   -1,  166,  167,  -43,\n+        -2,  168,   -1,  169,   -1,   -1,   -1,  170,\n+        -1,   -1,   -1,  171,   -1,   -1,  172,   -1,\n+        -1,  173,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,  174,  175,   -1,\n+        -1,   -1,   -1,  176,   -1,   -1,   -1,  177,\n+        -1,   -1,   -1,   -1,  178,   -1,   -1,  179,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,  180,  181,   -1,\n+       182,   -1,   -1,  183,   -1,  184,  185,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,  186,   -1,   -1,   -1,   -1,  187,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+       188,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,  189,\n+       190,   -1,   -1,   -1,   -1,  191,   -1,   -1,\n+       192,   -1,   -1,   -1,   -1,   -1,  193,   -1,\n+        -1,   -1,   -1,   -1,  194,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,  195,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,  196,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,  197,   -1,   -1,   -1,   -1,   -1,   -1,\n+       198,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,  199,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,  200,   -1,   -1,   -1,   -1,   -1,  201,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,  202,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,  203,   -1,\n+        -1,   -1,   -1,   -1,   -1,  204,   -1,   -1,\n+       205,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,  206\n+    };\n+\n+  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)\n+    {\n+      register int key = hash (str, len);\n+\n+      if (key <= MAX_HASH_VALUE && key >= 0)\n+        {\n+          register int index = lookup[key];\n+\n+          if (index >= 0)\n+            {\n+              register const char *s = wordlist[index];\n+\n+              if (*str == *s && !strcmp (str + 1, s + 1))\n+                return s;\n+            }\n+          else if (index < -TOTAL_KEYWORDS)\n+            {\n+              register int offset = - 1 - TOTAL_KEYWORDS - index;\n+              register const char * const *wordptr = &wordlist[TOTAL_KEYWORDS + lookup[offset]];\n+              register const char * const *wordendptr = wordptr + -lookup[offset + 1];\n+\n+              while (wordptr < wordendptr)\n+                {\n+                  register const char *s = *wordptr;\n+\n+                  if (*str == *s && !strcmp (str + 1, s + 1))\n+                    return s;\n+                  wordptr++;\n+                }\n+            }\n+        }\n+    }\n+  return 0;\n+}"}, {"sha": "9c348a0a53f6ce9cb8d9f95512b9631046047baa", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1660cb3ac4068304926550396c9da9fb26e26b74/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1660cb3ac4068304926550396c9da9fb26e26b74/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1660cb3ac4068304926550396c9da9fb26e26b74", "patch": "@@ -1149,6 +1149,12 @@ extern int flag_vtable_gc;\n    The value of this flag is ignored if -pedantic is specified.  */\n extern int flag_permissive;\n \n+/* Nonzero means to implement standard semantics for exception\n+   specifications, calling unexpected if an exception is thrown that\n+   doesn't match the specification.  Zero means to treat them as\n+   assertions and optimize accordingly, but not check them.  */\n+extern int flag_enforce_eh_specs;\n+\n /* Nonzero if we want to obey access control semantics.  */\n \n extern int flag_access_control;\n@@ -3922,6 +3928,7 @@ extern void expand_end_eh_spec\t\t        PARAMS ((tree, tree));\n extern void expand_exception_blocks\t\tPARAMS ((void));\n extern tree build_throw\t\t\t\tPARAMS ((tree));\n extern void mark_all_runtime_matches            PARAMS ((void));\n+extern int nothrow_libfn_p\t\t\tPARAMS ((tree));\n \n /* in expr.c */\n extern void init_cplus_expand\t\t\tPARAMS ((void));"}, {"sha": "53cbb745116ee6281c2bd93f677f0abade88e021", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1660cb3ac4068304926550396c9da9fb26e26b74/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1660cb3ac4068304926550396c9da9fb26e26b74/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1660cb3ac4068304926550396c9da9fb26e26b74", "patch": "@@ -8668,6 +8668,9 @@ grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n        tentative.  error_mark_node is replaced later with the BLOCK.  */\n     DECL_INITIAL (decl) = error_mark_node;\n \n+  if (nothrow_libfn_p (decl))\n+    TREE_NOTHROW (decl) = 1;\n+\n   /* Caller will do the rest of this.  */\n   if (check < 0)\n     return decl;\n@@ -13563,6 +13566,7 @@ store_parm_decls ()\n \n   /* Do the starting of the exception specifications, if we have any.  */\n   if (flag_exceptions && !processing_template_decl\n+      && flag_enforce_eh_specs\n       && building_stmt_tree ()\n       && TYPE_RAISES_EXCEPTIONS (TREE_TYPE (current_function_decl)))\n     current_eh_spec_try_block = expand_start_eh_spec ();\n@@ -13840,6 +13844,7 @@ finish_function (lineno, flags)\n \n       /* Finish dealing with exception specifiers.  */\n       if (flag_exceptions && !processing_template_decl\n+\t  && flag_enforce_eh_specs\n \t  && TYPE_RAISES_EXCEPTIONS (TREE_TYPE (current_function_decl)))\n \texpand_end_eh_spec (TYPE_RAISES_EXCEPTIONS\n \t\t\t    (TREE_TYPE (current_function_decl)),"}, {"sha": "851b4022086082fe6c776d63b7965b4cdfe1da61", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1660cb3ac4068304926550396c9da9fb26e26b74/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1660cb3ac4068304926550396c9da9fb26e26b74/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=1660cb3ac4068304926550396c9da9fb26e26b74", "patch": "@@ -490,6 +490,13 @@ int flag_vtable_gc;\n \n int flag_permissive;\n \n+/* Nonzero means to implement standard semantics for exception\n+   specifications, calling unexpected if an exception is thrown that\n+   doesn't match the specification.  Zero means to treat them as\n+   assertions and optimize accordingly, but not check them.  */\n+\n+int flag_enforce_eh_specs = 1;\n+\n /* If this variable is defined to a non-NULL value, it will be called\n    after the file has been completely parsed.  */\n \n@@ -524,6 +531,7 @@ lang_f_options[] =\n   {\"default-inline\", &flag_default_inline, 1},\n   {\"dollars-in-identifiers\", &dollars_in_ident, 1},\n   {\"elide-constructors\", &flag_elide_constructors, 1},\n+  {\"enforce-eh-specs\", &flag_enforce_eh_specs, 1},\n   {\"external-templates\", &flag_external_templates, 1},\n   {\"for-scope\", &flag_new_for_scope, 2},\n   {\"gnu-keywords\", &flag_no_gnu_keywords, 0},"}, {"sha": "3a54ea82d4222de84aa18b6c47e0c9e7c8f48a36", "filename": "gcc/cp/except.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1660cb3ac4068304926550396c9da9fb26e26b74/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1660cb3ac4068304926550396c9da9fb26e26b74/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=1660cb3ac4068304926550396c9da9fb26e26b74", "patch": "@@ -1027,3 +1027,30 @@ complete_ptr_ref_or_void_ptr_p (type, from)\n   return 1;\n }\n \n+/* Returns nonzero if FN is a declaration of a standard C library\n+   function which is known not to throw.\n+\n+   [lib.res.on.exception.handling]: None of the functions from the\n+   Standard C library shall report an error by throwing an\n+   exception, unless it calls a program-supplied function that\n+   throws an exception.  */\n+\n+#include \"cfns.h\"\n+\n+int\n+nothrow_libfn_p (fn)\n+     tree fn;\n+{\n+  tree id;\n+\n+  if (TREE_PUBLIC (fn)\n+      && DECL_EXTERNAL (fn)\n+      && DECL_LANGUAGE (fn) == lang_c)\n+    /* OK */;\n+  else\n+    /* Can't be a C library function.  */\n+    return 0;\n+\n+  id = DECL_ASSEMBLER_NAME (fn);\n+  return !!libc_name_p (IDENTIFIER_POINTER (id), IDENTIFIER_LENGTH (id));\n+}"}, {"sha": "9f3f6fe396c8af60dac85b5f3a2bdc7e4ccd06f1", "filename": "gcc/cp/lang-options.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1660cb3ac4068304926550396c9da9fb26e26b74/gcc%2Fcp%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1660cb3ac4068304926550396c9da9fb26e26b74/gcc%2Fcp%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-options.h?ref=1660cb3ac4068304926550396c9da9fb26e26b74", "patch": "@@ -45,6 +45,8 @@ DEFINE_LANG_NAME (\"C++\")\n   { \"-fno-rtti\", \"Do not generate run time type descriptor information\" },\n   { \"-felide-constructors\", \"\" },\n   { \"-fno-elide-constructors\", \"\" },\n+  { \"-fenforce-eh-specs\", \"\" },\n+  { \"-fno-enforce-eh-specs\", \"Do not generate code to check exception specifications\" },\n   { \"-fenum-int-equiv\", \"\" },\n   { \"-fno-enum-int-equiv\", \"\" },\n   { \"-fexternal-templates\", \"\" },"}]}