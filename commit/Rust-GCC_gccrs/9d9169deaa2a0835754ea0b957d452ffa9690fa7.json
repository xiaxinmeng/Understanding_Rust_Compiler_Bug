{"sha": "9d9169deaa2a0835754ea0b957d452ffa9690fa7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ5MTY5ZGVhYTJhMDgzNTc1NGVhMGI5NTdkNDUyZmZhOTY5MGZhNw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-08-22T18:11:40Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-08-22T18:11:40Z"}, "message": "cp-tree.def (STMT_EXPR): Fix typo in node name.\n\n\t* cp-tree.def (STMT_EXPR): Fix typo in node name.\n\n\t* dump.c (dump_next_stmt): New function.\n\t(dequeue_and_dump): Use it.\n\n\t* pt.c (tsubst_copy): Make sure to initialize return value for a\n\tSTMT_EXPR, even when processing_template_decl.\n\t* semantics.c (finish_stmt_expr): A statement-expression whose\n\tlast statement is not an expression-statement has type `void'.\n\nFrom-SVN: r28804", "tree": {"sha": "a7791d9cc542ab307d92c00dfda3ddcfa88d8be1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7791d9cc542ab307d92c00dfda3ddcfa88d8be1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d9169deaa2a0835754ea0b957d452ffa9690fa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d9169deaa2a0835754ea0b957d452ffa9690fa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d9169deaa2a0835754ea0b957d452ffa9690fa7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d9169deaa2a0835754ea0b957d452ffa9690fa7/comments", "author": null, "committer": null, "parents": [{"sha": "b78639f6f2386e61e96742d6c8646e34ac2db3a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b78639f6f2386e61e96742d6c8646e34ac2db3a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b78639f6f2386e61e96742d6c8646e34ac2db3a3"}], "stats": {"total": 66, "additions": 60, "deletions": 6}, "files": [{"sha": "450cd63d69b2676b9e6a038e2a95c3c0f4271b9c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d9169deaa2a0835754ea0b957d452ffa9690fa7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d9169deaa2a0835754ea0b957d452ffa9690fa7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9d9169deaa2a0835754ea0b957d452ffa9690fa7", "patch": "@@ -1,3 +1,15 @@\n+1999-08-22  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.def (STMT_EXPR): Fix typo in node name.\n+\n+\t* dump.c (dump_next_stmt): New function.\n+\t(dequeue_and_dump): Use it.\n+\t\n+\t* pt.c (tsubst_copy): Make sure to initialize return value for a\n+\tSTMT_EXPR, even when processing_template_decl.\n+\t* semantics.c (finish_stmt_expr): A statement-expression whose\n+\tlast statement is not an expression-statement has type `void'.\t\n+\t\n 1999-08-20  Mark Mitchell  <mark@codesourcery.com>\n \n \t* semantics.c (finish_stmt_expr): Fix typo in comment."}, {"sha": "b48906e1d1007565278b4a2f66fd97a2fd37e718", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d9169deaa2a0835754ea0b957d452ffa9690fa7/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d9169deaa2a0835754ea0b957d452ffa9690fa7/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=9d9169deaa2a0835754ea0b957d452ffa9690fa7", "patch": "@@ -238,7 +238,7 @@ DEFTREECODE (HANDLER, \"catch_stmt\", 'e', 2)\n \n /* A STMT_EXPR represents a statement-expression.  The\n    STMT_EXPR_STMT is the statement given by the expression.  */\n-DEFTREECODE (STMT_EXPR, \"cp_stmt_expr\", 'e', 1)\n+DEFTREECODE (STMT_EXPR, \"stmt_expr\", 'e', 1)\n \n DEFTREECODE (TAG_DEFN, \"tag_defn\", 'e', 0)\n "}, {"sha": "4ef27e1d69618fd26e37d21379e0b83311d998cb", "filename": "gcc/cp/dump.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d9169deaa2a0835754ea0b957d452ffa9690fa7/gcc%2Fcp%2Fdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d9169deaa2a0835754ea0b957d452ffa9690fa7/gcc%2Fcp%2Fdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdump.c?ref=9d9169deaa2a0835754ea0b957d452ffa9690fa7", "patch": "@@ -19,9 +19,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* TODO: Class types.\n-         Binfos.  */\n-\n #include \"config.h\"\n #include \"system.h\"\n #include \"tree.h\"\n@@ -90,6 +87,7 @@ static void dump_string PROTO ((dump_info_p, const char *));\n static void dump_string_field PROTO ((dump_info_p, const char *, const char *));\n static void dump_node PROTO ((tree, FILE *));\n static void dump_stmt PROTO ((dump_info_p, tree));\n+static void dump_next_stmt PROTO ((dump_info_p, tree));\n \n /* Add T to the end of the queue of nodes to dump.  If DUMP_CHILDREN_P\n    is non-zero, then its children should be dumped as well.  Returns\n@@ -277,6 +275,16 @@ dump_stmt (di, t)\n #define dump_child(field, child) \\\n   queue_and_dump_index (di, field, child, DUMP_CHILDREN)\n \n+/* Dump the next statement after STMT.  */\n+\n+static void\n+dump_next_stmt (di, t)\n+     dump_info_p di;\n+     tree t;\n+{\n+  dump_child (\"next\", TREE_CHAIN (t));\n+}\n+\n /* Dump the next node in the queue.  */\n \n static void \n@@ -642,11 +650,13 @@ dequeue_and_dump (di)\n \t  dump_child (\"ins\", ASM_INPUTS (t));\n \t  dump_child (\"clbr\", ASM_CLOBBERS (t));\n \t}\n+      dump_next_stmt (di, t);\n       break;\n \n     case BREAK_STMT:\n     case CONTINUE_STMT:\n       dump_stmt (di, t);\n+      dump_next_stmt (di, t);\n       break;\n \n     case CASE_LABEL:\n@@ -657,18 +667,21 @@ dequeue_and_dump (di)\n \t  dump_child (\"low\", CASE_LOW (t));\n \t  dump_child (\"high\", CASE_HIGH (t));\n \t}\n+      dump_next_stmt (di, t);\n       break;\n \n     case COMPOUND_STMT:\n       dump_stmt (di, t);\n       if (dump_children_p)\n \tdump_child (\"body\", COMPOUND_BODY (t));\n+      dump_next_stmt (di, t);\n       break;\n \n     case DECL_STMT:\n       dump_stmt (di, t);\n       if (dump_children_p)\n \tdump_child (\"decl\", DECL_STMT_DECL (t));\n+      dump_next_stmt (di, t);\n       break;\n       \n     case DO_STMT:\n@@ -678,12 +691,14 @@ dequeue_and_dump (di)\n \t  dump_child (\"body\", DO_BODY (t));\n \t  dump_child (\"cond\", DO_COND (t));\n \t}\n+      dump_next_stmt (di, t);\n       break;\n \n     case EXPR_STMT:\n       dump_stmt (di, t);\n       if (dump_children_p)\n \tdump_child (\"expr\", EXPR_STMT_EXPR (t));\n+      dump_next_stmt (di, t);\n       break;\n \n     case FOR_STMT:\n@@ -695,12 +710,14 @@ dequeue_and_dump (di)\n \t  dump_child (\"expr\", FOR_EXPR (t));\n \t  dump_child (\"body\", FOR_BODY (t));\n \t}\n+      dump_next_stmt (di, t);\n       break;\n \n     case GOTO_STMT:\n       dump_stmt (di, t);\n       if (dump_children_p)\n \tdump_child (\"dest\", GOTO_DESTINATION (t));\n+      dump_next_stmt (di, t);\n       break;\n \n     case IF_STMT:\n@@ -711,12 +728,14 @@ dequeue_and_dump (di)\n \t  dump_child (\"then\", THEN_CLAUSE (t));\n \t  dump_child (\"else\", ELSE_CLAUSE (t));\n \t}\n+      dump_next_stmt (di, t);\n       break;\n \n     case RETURN_STMT:\n       dump_stmt (di, t);\n       if (dump_children_p)\n \tdump_child (\"expr\", RETURN_EXPR (t));\n+      dump_next_stmt (di, t);\n       break;\n \n     case SWITCH_STMT:\n@@ -726,6 +745,7 @@ dequeue_and_dump (di)\n \t  dump_child (\"cond\", SWITCH_COND (t));\n \t  dump_child (\"body\", SWITCH_BODY (t));\n \t}\n+      dump_next_stmt (di, t);\n       break;\n \n     case TRY_BLOCK:\n@@ -735,6 +755,7 @@ dequeue_and_dump (di)\n \t  dump_child (\"body\", TRY_STMTS (t));\n \t  dump_child (\"hdlr\", TRY_HANDLERS (t));\n \t}\n+      dump_next_stmt (di, t);\n       break;\n \n     case WHILE_STMT:\n@@ -744,6 +765,7 @@ dequeue_and_dump (di)\n \t  dump_child (\"cond\", WHILE_COND (t));\n \t  dump_child (\"body\", WHILE_BODY (t));\n \t}\n+      dump_next_stmt (di, t);\n       break;\n \n     case INTEGER_CST:\n@@ -801,6 +823,11 @@ dequeue_and_dump (di)\n \tdump_child (\"elts\", TREE_OPERAND (t, 1));\n       break;\n \n+    case STMT_EXPR:\n+      if (dump_children_p)\n+\tdump_child (\"stmt\", STMT_EXPR_STMT (t));\n+      break;\n+\n     default:\n       /* There are no additional fields to print.  */\n       break;"}, {"sha": "288eb461e0a98b054395058b40c7f104ea5412d5", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d9169deaa2a0835754ea0b957d452ffa9690fa7/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d9169deaa2a0835754ea0b957d452ffa9690fa7/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9d9169deaa2a0835754ea0b957d452ffa9690fa7", "patch": "@@ -7085,9 +7085,10 @@ tsubst_copy (t, args, complain, in_decl)\n \t  tree rtl_expr = begin_stmt_expr ();\n \t  tree block = tsubst_expr (STMT_EXPR_STMT (t), args,\n \t\t\t\t    complain, in_decl);\n-\t  r = finish_stmt_expr (rtl_expr, block);\n+\t  return finish_stmt_expr (rtl_expr, block);\n \t}\n-      return r;\n+      \n+      return t;\n \n     case COND_EXPR:\n     case MODOP_EXPR:"}, {"sha": "38787be83d6a4f7264127fafebe2e20bbde93288", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d9169deaa2a0835754ea0b957d452ffa9690fa7/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d9169deaa2a0835754ea0b957d452ffa9690fa7/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=9d9169deaa2a0835754ea0b957d452ffa9690fa7", "patch": "@@ -1060,6 +1060,10 @@ finish_stmt_expr (rtl_expr, expr)\n       /* Make a BIND_EXPR for the BLOCK already made.  */\n       if (building_stmt_tree ())\n \t{\n+\t  /* If the last thing in the statement-expression was not an\n+\t     expression-statement, then it has type `void'.  */\n+\t  if (!last_expr_type)\n+\t    last_expr_type = void_type_node;\n \t  result = build_min (STMT_EXPR, last_expr_type, last_tree);\n \t  /* FIXME: Do we need this?  */\n \t  TREE_SIDE_EFFECTS (result) = 1;"}, {"sha": "6415fc3032ad85b7c69a6d91f3281ec6fb03cb64", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash50.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d9169deaa2a0835754ea0b957d452ffa9690fa7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash50.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d9169deaa2a0835754ea0b957d452ffa9690fa7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash50.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash50.C?ref=9d9169deaa2a0835754ea0b957d452ffa9690fa7", "patch": "@@ -0,0 +1,10 @@\n+// Build don't link:\n+// Origin: Mark Mitchell <mark@codesourcery.com>\n+\n+template <class T>\n+void f ()\n+{\n+  __extension__ ( { if (3); });\n+}\n+\n+template void f<int>();"}]}