{"sha": "10a0e2a9a8bd476aa5681ebd6b140ecf10b36fd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBhMGUyYTlhOGJkNDc2YWE1NjgxZWJkNmIxNDBlY2YxMGIzNmZkNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-07-16T21:25:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-07-16T21:25:22Z"}, "message": "re PR tree-optimization/86526 (ICE in builtin_memcpy_read_str, at builtins.c:3017)\n\n\tPR tree-optimization/86526\n\t* builtins.c (expand_builtin_memcmp): Formatting fixes.\n\t(inline_expand_builtin_string_cmp): Likewise.\n\t(inline_string_cmp): Likewise.  Use c_readstr instead of\n\tbuiltin_memcpy_read_str.  Add unit_mode temporary.\n\n\t* gcc.c-torture/compile/pr86526.c: New test.\n\nFrom-SVN: r262750", "tree": {"sha": "8a5348f279bc1b54917f99513880e76a13e55325", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a5348f279bc1b54917f99513880e76a13e55325"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10a0e2a9a8bd476aa5681ebd6b140ecf10b36fd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a0e2a9a8bd476aa5681ebd6b140ecf10b36fd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10a0e2a9a8bd476aa5681ebd6b140ecf10b36fd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a0e2a9a8bd476aa5681ebd6b140ecf10b36fd4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ce04dc3fe9d7008de27e90678013e9584f00770c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce04dc3fe9d7008de27e90678013e9584f00770c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce04dc3fe9d7008de27e90678013e9584f00770c"}], "stats": {"total": 90, "additions": 54, "deletions": 36}, "files": [{"sha": "f09e49c7fd9b3746d25b03d9497b28021db0632c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a0e2a9a8bd476aa5681ebd6b140ecf10b36fd4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a0e2a9a8bd476aa5681ebd6b140ecf10b36fd4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10a0e2a9a8bd476aa5681ebd6b140ecf10b36fd4", "patch": "@@ -1,3 +1,11 @@\n+2018-07-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/86526\n+\t* builtins.c (expand_builtin_memcmp): Formatting fixes.\n+\t(inline_expand_builtin_string_cmp): Likewise.\n+\t(inline_string_cmp): Likewise.  Use c_readstr instead of\n+\tbuiltin_memcpy_read_str.  Add unit_mode temporary.\n+\n 2018-07-16  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR middle-end/86528"}, {"sha": "c069d6611fb9600e0b64caca4e43fcc3343472f3", "filename": "gcc/builtins.c", "status": "modified", "additions": 33, "deletions": 36, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a0e2a9a8bd476aa5681ebd6b140ecf10b36fd4/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a0e2a9a8bd476aa5681ebd6b140ecf10b36fd4/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=10a0e2a9a8bd476aa5681ebd6b140ecf10b36fd4", "patch": "@@ -4458,19 +4458,19 @@ expand_builtin_memcmp (tree exp, rtx target, bool result_eq)\n   no_overflow = check_access (exp, /*dst=*/NULL_TREE, /*src=*/NULL_TREE,\n \t\t\t      len, /*maxread=*/NULL_TREE, size,\n \t\t\t      /*objsize=*/NULL_TREE);\n-  if (no_overflow) \n+  if (no_overflow)\n     {\n       size = compute_objsize (arg2, 0);\n       no_overflow = check_access (exp, /*dst=*/NULL_TREE, /*src=*/NULL_TREE,\n \t\t\t\t  len,  /*maxread=*/NULL_TREE, size,\n \t\t\t\t  /*objsize=*/NULL_TREE);\n-    } \n+    }\n \n-  /* Due to the performance benefit, always inline the calls first \n+  /* Due to the performance benefit, always inline the calls first\n      when result_eq is false.  */\n   rtx result = NULL_RTX;\n-   \n-  if (!result_eq && fcode != BUILT_IN_BCMP && no_overflow) \n+\n+  if (!result_eq && fcode != BUILT_IN_BCMP && no_overflow)\n     {\n       result = inline_expand_builtin_string_cmp (exp, target, true);\n       if (result)\n@@ -6752,7 +6752,7 @@ expand_builtin_goacc_parlevel_id_size (tree exp, rtx target, int ignore)\n   return target;\n }\n \n-/* Expand a string compare operation using a sequence of char comparison \n+/* Expand a string compare operation using a sequence of char comparison\n    to get rid of the calling overhead, with result going to TARGET if\n    that's convenient.\n \n@@ -6761,7 +6761,7 @@ expand_builtin_goacc_parlevel_id_size (tree exp, rtx target, int ignore)\n    LENGTH is the number of chars to compare;\n    CONST_STR_N indicates which source string is the constant string;\n    IS_MEMCMP indicates whether it's a memcmp or strcmp.\n-   \n+  \n    to: (assume const_str_n is 2, i.e., arg2 is a constant string)\n \n    target = var_str[0] - const_str[0];\n@@ -6776,41 +6776,38 @@ expand_builtin_goacc_parlevel_id_size (tree exp, rtx target, int ignore)\n   */\n \n static rtx\n-inline_string_cmp (rtx target, tree var_str, const char* const_str, \n+inline_string_cmp (rtx target, tree var_str, const char *const_str,\n \t\t   unsigned HOST_WIDE_INT length,\n \t\t   int const_str_n, machine_mode mode,\n-\t\t   bool is_memcmp) \n+\t\t   bool is_memcmp)\n {\n   HOST_WIDE_INT offset = 0;\n-  rtx var_rtx_array \n+  rtx var_rtx_array\n     = get_memory_rtx (var_str, build_int_cst (unsigned_type_node,length));\n   rtx var_rtx = NULL_RTX;\n-  rtx const_rtx = NULL_RTX; \n-  rtx result = target ? target : gen_reg_rtx (mode); \n-  rtx_code_label *ne_label = gen_label_rtx ();  \n+  rtx const_rtx = NULL_RTX;\n+  rtx result = target ? target : gen_reg_rtx (mode);\n+  rtx_code_label *ne_label = gen_label_rtx ();\n   tree unit_type_node = is_memcmp ? unsigned_char_type_node : char_type_node;\n+  scalar_int_mode unit_mode\n+    = as_a <scalar_int_mode> TYPE_MODE (unit_type_node);\n \n   start_sequence ();\n \n   for (unsigned HOST_WIDE_INT i = 0; i < length; i++)\n     {\n-      var_rtx \n+      var_rtx\n \t= adjust_address (var_rtx_array, TYPE_MODE (unit_type_node), offset);\n-      const_rtx \n-\t= builtin_memcpy_read_str (CONST_CAST (char *, const_str),\n-\t\t\t\t   offset,\n-    \t\t\t\t   as_a <scalar_int_mode> \n-\t\t\t\t   TYPE_MODE (unit_type_node));\n+      const_rtx = c_readstr (const_str + offset, unit_mode);\n       rtx op0 = (const_str_n == 1) ? const_rtx : var_rtx;\n       rtx op1 = (const_str_n == 1) ? var_rtx : const_rtx;\n-  \n-      result = expand_simple_binop (mode, MINUS, op0, op1, \n-\t\t\t            result, is_memcmp ? 1 : 0, OPTAB_WIDEN);\n-      if (i < length - 1) \n-        emit_cmp_and_jump_insns (result, CONST0_RTX (mode), NE, NULL_RTX,\n-            \t\t         mode, true, ne_label);\n-      offset \n-\t+= GET_MODE_SIZE (as_a <scalar_int_mode> TYPE_MODE (unit_type_node));\n+\n+      result = expand_simple_binop (mode, MINUS, op0, op1,\n+\t\t\t\t    result, is_memcmp ? 1 : 0, OPTAB_WIDEN);\n+      if (i < length - 1)\n+\temit_cmp_and_jump_insns (result, CONST0_RTX (mode), NE, NULL_RTX,\n+\t    \t\t\t mode, true, ne_label);\n+      offset += GET_MODE_SIZE (unit_mode);\n     }\n \n   emit_label (ne_label);\n@@ -6821,7 +6818,7 @@ inline_string_cmp (rtx target, tree var_str, const char* const_str,\n   return result;\n }\n \n-/* Inline expansion a call to str(n)cmp, with result going to \n+/* Inline expansion a call to str(n)cmp, with result going to\n    TARGET if that's convenient.\n    If the call is not been inlined, return NULL_RTX.  */\n static rtx\n@@ -6833,7 +6830,7 @@ inline_expand_builtin_string_cmp (tree exp, rtx target, bool is_memcmp)\n   bool is_ncmp = (fcode == BUILT_IN_STRNCMP || fcode == BUILT_IN_MEMCMP);\n \n   gcc_checking_assert (fcode == BUILT_IN_STRCMP\n-\t\t       || fcode == BUILT_IN_STRNCMP \n+\t\t       || fcode == BUILT_IN_STRNCMP\n \t\t       || fcode == BUILT_IN_MEMCMP);\n \n   tree arg1 = CALL_EXPR_ARG (exp, 0);\n@@ -6846,7 +6843,7 @@ inline_expand_builtin_string_cmp (tree exp, rtx target, bool is_memcmp)\n \n   const char *src_str1 = c_getstr (arg1, &len1);\n   const char *src_str2 = c_getstr (arg2, &len2);\n- \n+\n   /* If neither strings is constant string, the call is not qualify.  */\n   if (!src_str1 && !src_str2)\n     return NULL_RTX;\n@@ -6871,16 +6868,16 @@ inline_expand_builtin_string_cmp (tree exp, rtx target, bool is_memcmp)\n   if (is_ncmp && (len3 = tree_to_uhwi (len3_tree)) < length)\n     length = len3;\n \n-  /* If the length of the comparision is larger than the threshold, \n+  /* If the length of the comparision is larger than the threshold,\n      do nothing.  */\n-  if (length > (unsigned HOST_WIDE_INT) \n+  if (length > (unsigned HOST_WIDE_INT)\n \t       PARAM_VALUE (BUILTIN_STRING_CMP_INLINE_LENGTH))\n     return NULL_RTX;\n \n   machine_mode mode = TYPE_MODE (TREE_TYPE (exp));\n \n   /* Now, start inline expansion the call.  */\n-  return inline_string_cmp (target, (const_str_n == 1) ? arg2 : arg1, \n+  return inline_string_cmp (target, (const_str_n == 1) ? arg2 : arg1,\n \t\t\t    (const_str_n == 1) ? src_str1 : src_str2, length,\n \t\t\t    const_str_n, mode, is_memcmp);\n }\n@@ -7286,7 +7283,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, machine_mode mode,\n \treturn target;\n       break;\n \n-    /* Expand it as BUILT_IN_MEMCMP_EQ first. If not successful, change it \n+    /* Expand it as BUILT_IN_MEMCMP_EQ first. If not successful, change it\n        back to a BUILT_IN_STRCMP. Remember to delete the 3rd paramater\n        when changing it to a strcmp call.  */\n     case BUILT_IN_STRCMP_EQ:\n@@ -7295,7 +7292,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, machine_mode mode,\n \treturn target;\n \n       /* Change this call back to a BUILT_IN_STRCMP.  */\n-      TREE_OPERAND (exp, 1) \n+      TREE_OPERAND (exp, 1)\n \t= build_fold_addr_expr (builtin_decl_explicit (BUILT_IN_STRCMP));\n \n       /* Delete the last parameter.  */\n@@ -7321,7 +7318,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, machine_mode mode,\n \treturn target;\n \n       /* Change it back to a BUILT_IN_STRNCMP.  */\n-      TREE_OPERAND (exp, 1) \n+      TREE_OPERAND (exp, 1)\n \t= build_fold_addr_expr (builtin_decl_explicit (BUILT_IN_STRNCMP));\n       /* FALLTHROUGH */\n "}, {"sha": "cd952134d9d01b2adf6377c02a8278900d474c7c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a0e2a9a8bd476aa5681ebd6b140ecf10b36fd4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a0e2a9a8bd476aa5681ebd6b140ecf10b36fd4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=10a0e2a9a8bd476aa5681ebd6b140ecf10b36fd4", "patch": "@@ -1,3 +1,8 @@\n+2018-07-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/86526\n+\t* gcc.c-torture/compile/pr86526.c: New test.\n+\n 2018-07-16  Carl Love  <cel@us.ibm.com>\n \n  \t* gcc.target/powerpc/divkc3-2.c: Add dg-require-effective-target"}, {"sha": "2baa1eab92becc7d84d7fa0c5dd3acdc07fa219c", "filename": "gcc/testsuite/gcc.c-torture/compile/pr86526.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a0e2a9a8bd476aa5681ebd6b140ecf10b36fd4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr86526.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a0e2a9a8bd476aa5681ebd6b140ecf10b36fd4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr86526.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr86526.c?ref=10a0e2a9a8bd476aa5681ebd6b140ecf10b36fd4", "patch": "@@ -0,0 +1,8 @@\n+/* PR tree-optimization/86526 */\n+\n+void\n+foo (char *x)\n+{\n+  if (__builtin_memcmp (x, \"\\0a\", 3))\n+    __builtin_abort ();\n+}"}]}