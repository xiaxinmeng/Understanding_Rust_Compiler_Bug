{"sha": "7b352d63e1c08a8bec3af9d6324b53a4d2010407", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IzNTJkNjNlMWMwOGE4YmVjM2FmOWQ2MzI0YjUzYTRkMjAxMDQwNw==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T20:30:14Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:22Z"}, "message": "Fix formatting in Makefile", "tree": {"sha": "07985588c4aee0ccd0414ca440e165549f360037", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07985588c4aee0ccd0414ca440e165549f360037"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b352d63e1c08a8bec3af9d6324b53a4d2010407", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b352d63e1c08a8bec3af9d6324b53a4d2010407", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b352d63e1c08a8bec3af9d6324b53a4d2010407", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b352d63e1c08a8bec3af9d6324b53a4d2010407/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e475efeb4e3d0c8a418f28ea1176aa5b0550b44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e475efeb4e3d0c8a418f28ea1176aa5b0550b44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e475efeb4e3d0c8a418f28ea1176aa5b0550b44"}], "stats": {"total": 83, "additions": 42, "deletions": 41}, "files": [{"sha": "234d51bc92c0585530c13b8dacf855591d9bdc0b", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 42, "deletions": 41, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b352d63e1c08a8bec3af9d6324b53a4d2010407/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b352d63e1c08a8bec3af9d6324b53a4d2010407/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=7b352d63e1c08a8bec3af9d6324b53a4d2010407", "patch": "@@ -1,6 +1,6 @@\n # Make-lang.in -- Top level -*- makefile -*- fragment for GCC Rust frontend.\n \n-# Copyright (C) 2009-2013 Free Software Foundation, Inc.\n+# Copyright (C) 2009-2020 Free Software Foundation, Inc.\n \n # This file is part of GCC.\n \n@@ -11,7 +11,7 @@\n \n # GCC is distributed in the hope that it will be useful,\n # but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\tSee the\n # GNU General Public License for more details.\n \n # You should have received a copy of the GNU General Public License\n@@ -54,7 +54,7 @@ gccrs$(exeext): $(GCCRS_D_OBJS) $(EXTRA_GCC_OBJS) libcommon-target.a $(LIBDEPS)\n \t  $(GCCRS_D_OBJS) $(EXTRA_GCC_OBJS) libcommon-target.a \\\n \t  $(EXTRA_GCC_LIBS) $(LIBS)\n \n-# List of host object files used by the rust language - files for translation from the parse tree \n+# List of host object files used by the rust language - files for translation from the parse tree\n # to GENERIC\n # The compiler proper, not driver\n GRS_OBJS = \\\n@@ -69,12 +69,13 @@ GRS_OBJS = \\\n     rust/rust-parse.o \\\n     rust/rust-ast-full-test.o \\\n     rust/rust-session-manager.o \\\n-    rust/rust-resolution.o \\\n+    rust/rust-name-resolution.o \\\n+    rust/rust-type-resolution.o \\\n     rust/rust-scan.o \\\n     rust/rust-compile.o \\\n     rust/rust-macro-expand.o \\\n     $(END)\n-# removed object files from here \n+# removed object files from here\n \n # All language-specific object files for Rust.\n RUST_ALL_OBJS = $(GRS_OBJS) $(RUST_TARGET_OBJS)\n@@ -93,25 +94,25 @@ lang_checks_parallelized += check-rust\n check_rust_parallelize = 10\n \n # Copies its dependencies into the source directory. This generally should be used for generated files\n-# such as Bison output files which are not version-controlled, but should be included in any release \n-# tarballs. This target will be executed during a bootstrap if \u2018--enable-generated-files-in-srcdir\u2019 \n-# was specified as a configure option. \n-rust.srcextra: \n+# such as Bison output files which are not version-controlled, but should be included in any release\n+# tarballs. This target will be executed during a bootstrap if \u2018--enable-generated-files-in-srcdir\u2019\n+# was specified as a configure option.\n+rust.srcextra:\n \n rust.all.cross:\n \n # idk what this does but someone used it\n rust.start.encap: gccrs$(exeext)\n rust.rest.encap:\n \n-# Build generated man pages for the front end from Texinfo manuals (see Man Page Generation), in the \n-# build directory. This target is only called if the necessary tools are available, but should ignore \n-# errors so as not to stop the build if errors occur; man pages are optional and the tools involved \n-# may be installed in a broken way. \n+# Build generated man pages for the front end from Texinfo manuals (see Man Page Generation), in the\n+# build directory. This target is only called if the necessary tools are available, but should ignore\n+# errors so as not to stop the build if errors occur; man pages are optional and the tools involved\n+# may be installed in a broken way.\n rust.man:\n \n # Copies its dependencies into the source directory. These targets will be executed during a bootstrap\n-# if \u2018--enable-generated-files-in-srcdir\u2019 was specified as a configure option. \n+# if \u2018--enable-generated-files-in-srcdir\u2019 was specified as a configure option.\n rust.srcman:\n \n # Clean hooks.\n@@ -122,40 +123,40 @@ rust.mostlyclean:\n rust.clean: rust.mostlyclean\n \n # Builds an etags TAGS file in the language subdirectory in the source tree.\n-# TODO: add more directories if I add more \n+# TODO: add more directories if I add more\n rust.tags: force\n \tcd $(srcdir)/rust; \\\n \tetags -o TAGS.sub *.y *.l *.cc *.h ast/*.h ast/*.cc lex/*.h lex/*.cc parse/*.h parse/*.cc; \\\n \tetags --include TAGS.sub --include ../TAGS.sub\n \n # Build documentation hooks.\n \n-# Build info documentation for the front end, in the build directory. This target is only called by \n-# \u2018make bootstrap\u2019 if a suitable version of makeinfo is available, so does not need to check for this, \n-# and should fail if an error occurs. \n-rust.info: \n+# Build info documentation for the front end, in the build directory. This target is only called by\n+# \u2018make bootstrap\u2019 if a suitable version of makeinfo is available, so does not need to check for this,\n+# and should fail if an error occurs.\n+rust.info:\n \n-rust.srcinfo: \n+rust.srcinfo:\n \n-# Build DVI documentation for the front end, in the build directory. This should be done using \n-# $(TEXI2DVI), with appropriate -I arguments pointing to directories of included files. \n-rust.dvi: \n+# Build DVI documentation for the front end, in the build directory. This should be done using\n+# $(TEXI2DVI), with appropriate -I arguments pointing to directories of included files.\n+rust.dvi:\n \n-# Build PDF documentation for the front end, in the build directory. This should be done using \n-# $(TEXI2PDF), with appropriate -I arguments pointing to directories of included files. \n-rust.pdf: \n+# Build PDF documentation for the front end, in the build directory. This should be done using\n+# $(TEXI2PDF), with appropriate -I arguments pointing to directories of included files.\n+rust.pdf:\n \n-doc/rust.info: \n-doc/rust.dvi: \n-doc/rust.pdf: \n+doc/rust.info:\n+doc/rust.dvi:\n+doc/rust.pdf:\n \n-# Build HTML documentation for the front end, in the build directory. \n-rust.html: \n+# Build HTML documentation for the front end, in the build directory.\n+rust.html:\n \n # Install hooks.\n \n-# Install everything that is part of the front end, apart from the compiler executables listed in \n-# compilers in config-lang.in. \n+# Install everything that is part of the front end, apart from the compiler executables listed in\n+# compilers in config-lang.in.\n rust.install-common: installdirs\n #\t-rm -f $(DESTDIR)$(bindir)/$(GCCRS_INSTALL_NAME)$(exeext)\n #\t-rm -f $(DESTDIR)$(bindir)/$(GCCRS_TARGET_INSTALL_NAME)$(exeext)\n@@ -172,11 +173,11 @@ rust.install-common: installdirs\n \t( cd $(DESTDIR)$(bindir) && \\\n       $(LN) $(GCCRS_INSTALL_NAME)$(exeext) $(GCCRS_TARGET_INSTALL_NAME)$(exeext) ); \\\n \n-# Install headers needed for plugins. \n+# Install headers needed for plugins.\n rust.install-plugin:\n \n-# Uninstall files installed by installing the compiler. This is currently documented not to be \n-# supported, so the hook need not do anything. \n+# Uninstall files installed by installing the compiler. This is currently documented not to be\n+# supported, so the hook need not do anything.\n rust.uninstall:\n #\t-rm -rf $(DESTDIR)/$(bindir)/$(GCCRS_INSTALL_NAME)$(exeext)\n \t-rm -f gccrs$(exeext) grs1$(exeext)\n@@ -186,13 +187,13 @@ rust.uninstall:\n # No rust-specific selftests\n selftest-rust:\n \n-# Install info documentation for the front end, if it is present in the source directory. This target \n-# should have dependencies on info files that should be installed. \n-rust.install-info: \n+# Install info documentation for the front end, if it is present in the source directory. This target\n+# should have dependencies on info files that should be installed.\n+rust.install-info:\n \n-rust.install-pdf: \n+rust.install-pdf:\n \n-# Install man pages for the front end. This target should ignore errors. \n+# Install man pages for the front end. This target should ignore errors.\n rust.install-man:\n \n # Stage hooks:"}]}