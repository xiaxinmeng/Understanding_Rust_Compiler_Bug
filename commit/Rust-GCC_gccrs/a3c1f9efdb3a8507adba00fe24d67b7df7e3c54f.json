{"sha": "a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNjMWY5ZWZkYjNhODUwN2FkYmEwMGZlMjRkNjdiN2RmN2UzYzU0Zg==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-11-24T23:32:29Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-11-24T23:32:29Z"}, "message": "revert accidentally committed changes\n\nFrom-SVN: r167130", "tree": {"sha": "2c4e12dc2765003fb2fbc7f4ec6f43b79539a187", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c4e12dc2765003fb2fbc7f4ec6f43b79539a187"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/comments", "author": null, "committer": null, "parents": [{"sha": "a3abe41c30c8f779e203452a0b31a33b825565c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3abe41c30c8f779e203452a0b31a33b825565c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3abe41c30c8f779e203452a0b31a33b825565c7"}], "stats": {"total": 112, "additions": 13, "deletions": 99}, "files": [{"sha": "67f4f93d2b2f6b90c6a1d5eb622bcffe946049d4", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f", "patch": "@@ -5639,9 +5639,6 @@ extern tree cxx_omp_clause_dtor\t\t\t(tree, tree);\n extern void cxx_omp_finish_clause\t\t(tree);\n extern bool cxx_omp_privatize_by_reference\t(const_tree);\n \n-/* in name-lookup.c */\n-extern void suggest_alternatives_for (tree);\n-\n /* -- end of C++ */\n \n #endif /* ! GCC_CP_TREE_H */"}, {"sha": "1560fc6047be211ac420b35d9d52660c5c0a3a73", "filename": "gcc/cp/error.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f", "patch": "@@ -1700,7 +1700,6 @@ dump_expr (tree t, int flags)\n     case NAMESPACE_DECL:\n     case LABEL_DECL:\n     case OVERLOAD:\n-    case TYPE_DECL:\n     case IDENTIFIER_NODE:\n       dump_decl (t, (flags & ~TFF_DECL_SPECIFIERS) | TFF_NO_FUNCTION_ARGUMENTS);\n       break;"}, {"sha": "c583d7d307e80bc3e1a0091c2fd1628c9e9fa73a", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f", "patch": "@@ -450,10 +450,7 @@ unqualified_name_lookup_error (tree name)\n   else\n     {\n       if (!objc_diagnose_private_ivar (name))\n-\t{\n-\t  error (\"%qD was not declared in this scope\", name);\n-\t  suggest_alternatives_for (name);\n-\t}\n+        error (\"%qD was not declared in this scope\", name);\n       /* Prevent repeated error messages by creating a VAR_DECL with\n \t this NAME in the innermost block scope.  */\n       if (current_function_decl)"}, {"sha": "dc735443db251ad3e836aa88d56622f9f3bac38e", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f", "patch": "@@ -30,10 +30,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"timevar.h\"\n #include \"toplev.h\"\n #include \"diagnostic-core.h\"\n-#include \"intl.h\"\n #include \"debug.h\"\n #include \"c-family/c-pragma.h\"\n-#include \"params.h\"\n \n /* The bindings for a particular name in a particular scope.  */\n \n@@ -3919,73 +3917,6 @@ remove_hidden_names (tree fns)\n   return fns;\n }\n \n-/* Suggest alternatives for NAME, an IDENTIFIER_NODE for which name\n-   lookup failed.  Search through all available namespaces and print out\n-   possible candidates.  */\n-\n-void\n-suggest_alternatives_for (tree name)\n-{\n-  VEC(tree,heap) *candidates = NULL;\n-  VEC(tree,heap) *namespaces_to_search = NULL;\n-  int max_to_search = PARAM_VALUE (CXX_MAX_NAMESPACES_FOR_DIAGNOSTIC_HELP);\n-  int n_searched = 0;\n-  char *spaces;\n-  const char *str;\n-  tree t;\n-  unsigned ix;\n-\n-  VEC_safe_push (tree, heap, namespaces_to_search, global_namespace);\n-\n-  while (!VEC_empty (tree, namespaces_to_search)\n-\t && n_searched < max_to_search)\n-    {\n-      tree scope = VEC_pop (tree, namespaces_to_search);\n-      struct scope_binding binding = EMPTY_SCOPE_BINDING;\n-      struct cp_binding_level *level = NAMESPACE_LEVEL (scope);\n-\n-      /* Look in this namespace.  */\n-      qualified_lookup_using_namespace (name, scope, &binding, 0);\n-\n-      n_searched++;\n-\n-      if (binding.value)\n-\tVEC_safe_push (tree, heap, candidates, binding.value);\n-\n-      /* Add child namespaces.  */\n-      for (t = level->namespaces; t; t = DECL_CHAIN (t))\n-\tVEC_safe_push (tree, heap, namespaces_to_search, t);\n-    }\n-\n-  /* If we stopped before we could examine all namespaces, inform the\n-     user.  Do this even if we don't have any candidates, since there\n-     might be more candidates further down that we weren't able to\n-     find.  */\n-  if (n_searched >= max_to_search)\n-    inform (input_location,\n-\t    \"maximum limit of %d namespaces searched for %qE\",\n-\t    max_to_search, name);\n-\n-  /* Nothing useful to report.  */\n-  if (VEC_empty (tree, candidates))\n-    return;\n-\n-  str = (VEC_length(tree, candidates) > 1\n-\t ? _(\"suggested alternatives:\")\n-\t : _(\"suggested alternative:\"));\n-  spaces = NULL;\n-\n-  FOR_EACH_VEC_ELT (tree, candidates, ix, t)\n-    {\n-      inform (input_location, \"%s %qE\", (spaces ? spaces : str), t);\n-      spaces = spaces ? spaces : get_spaces (str);\n-    }\n-\n-  VEC_free (tree, heap, candidates);\n-  VEC_free (tree, heap, namespaces_to_search);\n-  free (spaces);\n-}\n-\n /* Unscoped lookup of a global: iterate over current namespaces,\n    considering using-directives.  */\n "}, {"sha": "3db5ac1bbd85afbc5a0a5debf435a6767016cc23", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f", "patch": "@@ -1932,6 +1932,7 @@ lto_fixup_tree (tree *tp, int *walk_subtrees, void *data)\n \t{\n \t  /* walk_tree only handles TREE_OPERANDs. Do the rest here.  */\n \t  lto_fixup_common (t, data);\n+\t  LTO_FIXUP_SUBTREE (t->exp.block);\n \t  *walk_subtrees = 1;\n \t}\n       else"}, {"sha": "6b6e05500b53f7cfc1a0fb178c422674cefe1a88", "filename": "gcc/params.def", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f", "patch": "@@ -855,15 +855,6 @@ DEFPARAM (MIN_PARTITION_SIZE,\n \t  \"lto-min-partition\",\n \t  \"Size of minimal paritition for WHOPR (in estimated instructions)\",\n \t  1000, 0, 0)\n-\n-/* Diagnostic parameters.  */\n-\n-DEFPARAM (CXX_MAX_NAMESPACES_FOR_DIAGNOSTIC_HELP,\n-\t  \"cxx-max-namespaces-for-diagnostic-help\",\n-\t  \"Maximum number of namespaces to search for alternatives when \"\n-\t  \"name lookup fails\",\n-\t  1000, 0, 0)\n-\n /*\n Local variables:\n mode:c"}, {"sha": "da354a7e32536c94ffbae1a506054d294b560507", "filename": "gcc/reload1.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f", "patch": "@@ -6600,6 +6600,17 @@ choose_reload_regs (struct insn_chain *chain)\n \t      && (rld[r].nregs == max_group_size\n \t\t  || ! reg_classes_intersect_p (rld[r].rclass, group_class)))\n \t    search_equiv = rld[r].in;\n+\t  /* If this is an output reload from a simple move insn, look\n+\t     if an equivalence for the input is available.  */\n+\t  else if (inheritance && rld[r].in == 0 && rld[r].out != 0)\n+\t    {\n+\t      rtx set = single_set (insn);\n+\n+\t      if (set\n+\t\t  && rtx_equal_p (rld[r].out, SET_DEST (set))\n+\t\t  && CONSTANT_P (SET_SRC (set)))\n+\t\tsearch_equiv = SET_SRC (set);\n+\t    }\n \n \t  if (search_equiv)\n \t    {"}, {"sha": "3d06dd7534ae146e63b529de21cfc74bef71cbf0", "filename": "gcc/testsuite/g++.dg/ext/builtin3.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin3.C?ref=a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f", "patch": "@@ -10,5 +10,4 @@ extern \"C\" int printf(char*, ...);\n \n void foo() {\n   printf(\"abc\"); \t\t// { dg-error \"not declared\" }\n-  // { dg-message \"note\" \"suggested alternative\" { target *-*-* } 12 }\n }"}, {"sha": "2264b238403c96f5a81a749cb09916f2ca20e8d3", "filename": "gcc/testsuite/g++.dg/lookup/error1.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ferror1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ferror1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ferror1.C?ref=a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f", "patch": "@@ -4,7 +4,6 @@\n \n namespace N { int i; }\n void foo() { i; }   // { dg-error \"not declared\" }\n-  // { dg-message \"note\" \"suggested alternative\" { target *-*-* } 6 }\n \n using namespace N;\n void bar() { i; }"}, {"sha": "6ecc25daadb9ac8a60e7581ce1fd8a8b8260b829", "filename": "gcc/testsuite/g++.dg/lookup/koenig5.C", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fkoenig5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fkoenig5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fkoenig5.C?ref=a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f", "patch": "@@ -32,18 +32,15 @@ void g (N::A *a, M::B *b, O::C *c)\n   One (a); // ok\n   One (a, b); // ok\n   One (b); // { dg-error \"not declared\" }\n-  // { dg-message \"note\" \"suggested alternative\" { target *-*-* } 34 }\n \n   Two (c); // ok\n   Two (a, c); // ok\n   Two (a); // { dg-error \"not declared\" }\n-  // { dg-message \"note\" \"suggested alternative\" { target *-*-* } 39 }\n   Two (a, a); // error masked by earlier error\n   Two (b); // error masked by earlier error\n   Two (a, b); // error masked by earlier error\n   \n   Three (b); // ok\n   Three (a, b); // ok\n   Three (a); // { dg-error \"not declared\" }\n-  // { dg-message \"note\" \"suggested alternative\" { target *-*-* } 47 }\n }"}, {"sha": "1ed7bce0b146d95f4db7b88a9be408a87d2331a5", "filename": "gcc/testsuite/g++.dg/overload/koenig1.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fkoenig1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fkoenig1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fkoenig1.C?ref=a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f", "patch": "@@ -14,6 +14,5 @@ void g ()\n   B *bp;\n   N::A *ap;\n   f (bp);\t\t\t// { dg-error \"not declared\" }\n-  // { dg-message \"note\" \"suggested alternative\" { target *-*-* } 16 }\n   f (ap);\n }"}, {"sha": "e81fbabf2c34f5753fa84df244f416d823203050", "filename": "gcc/testsuite/g++.dg/parse/decl-specifier-1.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdecl-specifier-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdecl-specifier-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdecl-specifier-1.C?ref=a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f", "patch": "@@ -13,5 +13,4 @@ N::X X;                           // { dg-error \"\" \"\" }\n int main()\n {\n     return sizeof(X);             // { dg-error \"\" \"\" }\n-    // { dg-message \"note\" \"suggested alternative\" { target *-*-* } 15 }\n }"}, {"sha": "ab857bd814e28fdd4e2c844ad39e09a5aa6e7719", "filename": "gcc/testsuite/g++.dg/template/static10.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic10.C?ref=a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f", "patch": "@@ -20,5 +20,4 @@ namespace std\n {\n   template<> void\n   vector<int, allocator<int> >::swap(vector<int, allocator<int> >&) { } // { dg-error \"\" }\n-  // { dg-message \"note\" \"suggested alternative\" { target *-*-* } 22 }\n }"}, {"sha": "9d806cabdb314795526adaa0ff12c4ba03ed7e51", "filename": "gcc/testsuite/g++.old-deja/g++.mike/ns5.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns5.C?ref=a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f", "patch": "@@ -4,4 +4,3 @@ namespace A {\n }\n \n int j = i;\t\t// { dg-error \"\" } \n-  // { dg-message \"note\" \"suggested alternative\" { target *-*-* } 6 }"}, {"sha": "57008dbed614f0f33d004ae2dd36fbd78aed3825", "filename": "gcc/testsuite/g++.old-deja/g++.mike/ns7.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns7.C?ref=a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f", "patch": "@@ -6,5 +6,4 @@ namespace A {\n \n namespace B {\n   int j = i;\t// { dg-error \"\" } \n-  // { dg-message \"note\" \"suggested alternative\" { target *-*-* } 8 }\n }"}, {"sha": "33061ad0bd8ae9e2f74ef39df451f5e281bee174", "filename": "gcc/testsuite/g++.old-deja/g++.ns/koenig5.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fkoenig5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fkoenig5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fkoenig5.C?ref=a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f", "patch": "@@ -15,5 +15,4 @@ void g()\n \t\t\t // foo variable first, and therefore do not\n \t\t\t // perform argument-dependent lookup.\n   bar(new X);            // { dg-error \"not declared\" }\n-  // { dg-message \"note\" \"suggested alternative\" { target *-*-* } 17 }\n }"}, {"sha": "78b0e8b36ca1ecd2cc8bfd8b586c2da489af5cc0", "filename": "gcc/testsuite/g++.old-deja/g++.ns/koenig9.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fkoenig9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fkoenig9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fkoenig9.C?ref=a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f", "patch": "@@ -10,5 +10,4 @@ void foo(const char*,...);\n inline void\n bar() {\n   foo(\"\",count);    //  { dg-error \"\" } multiple overloaded count functions\n-  // { dg-message \"note\" \"suggested alternative\" { target *-*-* } 12 }\n }"}, {"sha": "d14bd90c2db3660adb01ddbeda113568c8b43347", "filename": "gcc/testsuite/g++.old-deja/g++.other/lineno5.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flineno5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flineno5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flineno5.C?ref=a3c1f9efdb3a8507adba00fe24d67b7df7e3c54f", "patch": "@@ -16,5 +16,4 @@ namespace tmp {\n class A {\n   public:\n   int kaka(tmp::B = b);\t\t// { dg-error \"\" } no b in scope\n-  // { dg-message \"note\" \"suggested alternative\" { target *-*-* } 18 }\n };"}]}