{"sha": "86e212125feadb56d55459f167c9de10e8bf998c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZlMjEyMTI1ZmVhZGI1NmQ1NTQ1OWYxNjdjOWRlMTBlOGJmOTk4Yw==", "commit": {"author": {"name": "Michael Hayes", "email": "mhayes@redhat.com", "date": "2001-01-25T09:28:55Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "2001-01-25T09:28:55Z"}, "message": "loop.c (loop_call_insn_emit_before, [...]): New.\n\n\t* loop.c (loop_call_insn_emit_before, loop_call_insn_hoist): New.\n\t(loop_insn_emit_before): No longer static.\n\t(move_movables): Replace emit_insn_after with loop_insn_emit_after.\n\t(loop_givs_rescan, load_mems): Likewise.\n\t(check_dbra_loop): Replace emit_insn_before with loop_insn_emit_before.\n\t(maybe_eliminate_biv_1):\n\t(move_movables): Replace emit_call_insn_before with\n\tloop_call_insn_hoist.\n\t* loop.h (loop_insn_emit_before): Add.\n\t* unroll.c (copy_loop_body): Replace emit_insn_before with\n\tloop_insn_emit_before.\n\nFrom-SVN: r39260", "tree": {"sha": "ebd458480ad696ce4a1b2b5597c6de5617decfb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebd458480ad696ce4a1b2b5597c6de5617decfb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86e212125feadb56d55459f167c9de10e8bf998c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86e212125feadb56d55459f167c9de10e8bf998c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86e212125feadb56d55459f167c9de10e8bf998c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86e212125feadb56d55459f167c9de10e8bf998c/comments", "author": null, "committer": null, "parents": [{"sha": "9dee3e02ce0937566ea043f335975b2afc84ccf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dee3e02ce0937566ea043f335975b2afc84ccf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dee3e02ce0937566ea043f335975b2afc84ccf5"}], "stats": {"total": 73, "additions": 58, "deletions": 15}, "files": [{"sha": "491a93e950de117edc9f504f4890d5454aedcee0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86e212125feadb56d55459f167c9de10e8bf998c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86e212125feadb56d55459f167c9de10e8bf998c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=86e212125feadb56d55459f167c9de10e8bf998c", "patch": "@@ -1,3 +1,17 @@\n+2001-01-25  Michael Hayes  <mhayes@redhat.com>\n+\n+\t* loop.c (loop_call_insn_emit_before, loop_call_insn_hoist): New.\n+\t(loop_insn_emit_before): No longer static.\n+\t(move_movables): Replace emit_insn_after with loop_insn_emit_after.\n+\t(loop_givs_rescan, load_mems): Likewise.\n+\t(check_dbra_loop): Replace emit_insn_before with loop_insn_emit_before.\n+\t(maybe_eliminate_biv_1):\n+\t(move_movables): Replace emit_call_insn_before with\n+\tloop_call_insn_hoist.\n+\t* loop.h (loop_insn_emit_before): Add.\n+\t* unroll.c (copy_loop_body): Replace emit_insn_before with \n+\tloop_insn_emit_before.\n+\n 2001-01-25  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n         * diagnostic.c (fatal): Request preprocessed source."}, {"sha": "91fdf7fb83f27af732ee06af8e83aaf66e9361f9", "filename": "gcc/loop.c", "status": "modified", "additions": 41, "deletions": 14, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86e212125feadb56d55459f167c9de10e8bf998c/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86e212125feadb56d55459f167c9de10e8bf998c/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=86e212125feadb56d55459f167c9de10e8bf998c", "patch": "@@ -253,8 +253,9 @@ static int iv_add_mult_cost PARAMS ((rtx, rtx, rtx, rtx));\n \n static rtx loop_insn_emit_after PARAMS((const struct loop *, basic_block, \n \t\t\t\t\trtx, rtx));\n-static rtx loop_insn_emit_before PARAMS((const struct loop *, basic_block, \n-\t\t\t\t\t rtx, rtx));\n+static rtx loop_call_insn_emit_before PARAMS((const struct loop *,\n+\t\t\t\t\t      basic_block, rtx, rtx));\n+static rtx loop_call_insn_hoist PARAMS((const struct loop *, rtx));\n static rtx loop_insn_sink_or_swim PARAMS((const struct loop *, rtx));\n \n static void loop_dump_aux PARAMS ((const struct loop *, FILE *, int));\n@@ -1885,13 +1886,13 @@ move_movables (loop, movables, threshold, insn_count)\n \t\t\t      if (GET_CODE (temp) == CALL_INSN\n \t\t\t\t  && fn_address != 0\n \t\t\t\t  && reg_referenced_p (fn_reg, body))\n-\t\t\t\temit_insn_after (gen_move_insn (fn_reg,\n-\t\t\t\t\t\t\t\tfn_address),\n-\t\t\t\t\t\t fn_address_insn);\n+\t\t\t\tloop_insn_emit_after (loop, 0, fn_address_insn,\n+\t\t\t\t\t\t      gen_move_insn\n+\t\t\t\t\t\t      (fn_reg, fn_address));\n \n \t\t\t      if (GET_CODE (temp) == CALL_INSN)\n \t\t\t\t{\n-\t\t\t\t  i1 = emit_call_insn_before (body, loop_start);\n+\t\t\t\t  i1 = loop_call_insn_hoist (loop, body);\n \t\t\t\t  /* Because the USAGE information potentially\n \t\t\t\t     contains objects other than hard registers\n \t\t\t\t     we need to copy it.  */\n@@ -1937,7 +1938,7 @@ move_movables (loop, movables, threshold, insn_count)\n \t\t\t}\n \t\t      else if (GET_CODE (p) == CALL_INSN)\n \t\t\t{\n-\t\t\t  i1 = emit_call_insn_before (PATTERN (p), loop_start);\n+\t\t\t  i1 = loop_call_insn_hoist (loop, PATTERN (p));\n \t\t\t  /* Because the USAGE information potentially\n \t\t\t     contains objects other than hard registers\n \t\t\t     we need to copy it.  */\n@@ -4052,8 +4053,8 @@ loop_givs_rescan (loop, bl, reg_map)\n \t{\n \t  /* Not replaceable; emit an insn to set the original giv reg from\n \t     the reduced giv, same as above.  */\n-\t  emit_insn_after (gen_move_insn (v->dest_reg, v->new_reg),\n-\t\t\t   v->insn);\n+\t  loop_insn_emit_after (loop, 0, v->insn, \n+\t\t\t\tgen_move_insn (v->dest_reg, v->new_reg));\n \t}\n       \n       /* When a loop is reversed, givs which depend on the reversed\n@@ -7563,7 +7564,7 @@ check_dbra_loop (loop, insn_count)\n \t      tem = gen_sequence ();\n \t      end_sequence ();\n \n-\t      p = emit_insn_before (tem, bl->biv->insn);\n+\t      p = loop_insn_emit_before (loop, 0, bl->biv->insn, tem);\n \t      delete_insn (bl->biv->insn);\n \n \t      /* Update biv info to reflect its new status.  */\n@@ -7941,8 +7942,9 @@ maybe_eliminate_biv_1 (loop, x, insn, bl, eliminate_p, where_bb, where_insn)\n \t\t   into a register (it will be a loop invariant.)  */\n \t\ttem = gen_reg_rtx (GET_MODE (v->new_reg));\n \n-\t\temit_insn_before (gen_move_insn (tem, copy_rtx (v->add_val)),\n-\t\t\t\t  where_insn);\n+\t\tloop_insn_emit_before (loop, 0, where_insn,\n+\t\t\t\t       gen_move_insn (tem,\n+\t\t\t\t\t\t      copy_rtx (v->add_val)));\n \n \t\t/* Substitute the new register for its invariant value in\n \t\t   the compare expression.  */\n@@ -9075,7 +9077,7 @@ load_mems (loop)\n \t      /* Store the memory immediately after END, which is\n \t\t the NOTE_LOOP_END.  */\n \t      set = gen_move_insn (copy_rtx (mem), reg);\n-\t      emit_insn_after (set, label);\n+\t      loop_insn_emit_after (loop, 0, label, set);\n \t    }\n \n \t  if (loop_dump_stream)\n@@ -9459,7 +9461,7 @@ loop_insn_emit_after (loop, where_bb, where_insn, pattern)\n    in basic block WHERE_BB (ignored in the interim) within the loop\n    otherwise hoist PATTERN into the loop pre-header.  */\n \n-static rtx\n+rtx\n loop_insn_emit_before (loop, where_bb, where_insn, pattern)\n      const struct loop *loop;\n      basic_block where_bb ATTRIBUTE_UNUSED;\n@@ -9472,6 +9474,20 @@ loop_insn_emit_before (loop, where_bb, where_insn, pattern)\n }\n \n \n+/* Emit call insn for PATTERN before WHERE_INSN in basic block\n+   WHERE_BB (ignored in the interim) within the loop.  */\n+\n+static rtx\n+loop_call_insn_emit_before (loop, where_bb, where_insn, pattern)\n+     const struct loop *loop ATTRIBUTE_UNUSED;\n+     basic_block where_bb ATTRIBUTE_UNUSED;\n+     rtx where_insn;\n+     rtx pattern;\n+{\n+  return emit_call_insn_before (pattern, where_insn);\n+}\n+\n+\n /* Hoist insn for PATTERN into the loop pre-header.  */\n \n rtx\n@@ -9483,6 +9499,17 @@ loop_insn_hoist (loop, pattern)\n }\n \n \n+/* Hoist call insn for PATTERN into the loop pre-header.  */\n+\n+static rtx\n+loop_call_insn_hoist (loop, pattern)\n+     const struct loop *loop;\n+     rtx pattern;\n+{\n+  return loop_call_insn_emit_before (loop, 0, loop->start, pattern);\n+}\n+\n+\n /* Sink insn for PATTERN after the loop end.  */\n \n rtx"}, {"sha": "cfec9934b20b7da017f37b743bb680239319dbd3", "filename": "gcc/loop.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86e212125feadb56d55459f167c9de10e8bf998c/gcc%2Floop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86e212125feadb56d55459f167c9de10e8bf998c/gcc%2Floop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.h?ref=86e212125feadb56d55459f167c9de10e8bf998c", "patch": "@@ -412,6 +412,8 @@ int back_branch_in_range_p PARAMS ((const struct loop *, rtx));\n int loop_insn_first_p PARAMS ((rtx, rtx));\n typedef rtx (*loop_insn_callback) PARAMS ((struct loop *, rtx, int, int));\n void for_each_insn_in_loop PARAMS ((struct loop *, loop_insn_callback));\n+rtx loop_insn_emit_before PARAMS((const struct loop *, basic_block, \n+\t\t\t\t  rtx, rtx));\n rtx loop_insn_sink PARAMS((const struct loop *, rtx));\n rtx loop_insn_hoist PARAMS((const struct loop *, rtx));\n "}, {"sha": "0d3927632b1bd8a6853493c046067f382f55d8da", "filename": "gcc/unroll.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86e212125feadb56d55459f167c9de10e8bf998c/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86e212125feadb56d55459f167c9de10e8bf998c/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=86e212125feadb56d55459f167c9de10e8bf998c", "patch": "@@ -2257,7 +2257,7 @@ copy_loop_body (loop, copy_start, copy_end, map, exit_label, last_iteration,\n \n   tem = gen_sequence ();\n   end_sequence ();\n-  emit_insn_before (tem, insert_before);\n+  loop_insn_emit_before (loop, 0, insert_before, tem);\n }\n \f\n /* Emit an insn, using the expand_binop to ensure that a valid insn is"}]}