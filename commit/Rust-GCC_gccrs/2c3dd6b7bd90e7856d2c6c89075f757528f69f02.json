{"sha": "2c3dd6b7bd90e7856d2c6c89075f757528f69f02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmMzZGQ2YjdiZDkwZTc4NTZkMmM2Yzg5MDc1Zjc1NzUyOGY2OWYwMg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-01T16:41:57Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-01T16:41:57Z"}, "message": "(build_type_variant): Simplify by using build_type_copy.\n\nFrom-SVN: r6460", "tree": {"sha": "9dc7ae5cc435acca64c811550333468603263ac0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dc7ae5cc435acca64c811550333468603263ac0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c3dd6b7bd90e7856d2c6c89075f757528f69f02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c3dd6b7bd90e7856d2c6c89075f757528f69f02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c3dd6b7bd90e7856d2c6c89075f757528f69f02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c3dd6b7bd90e7856d2c6c89075f757528f69f02/comments", "author": null, "committer": null, "parents": [{"sha": "8e158db406c75855a68e3317d0ea01991cf0a578", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e158db406c75855a68e3317d0ea01991cf0a578", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e158db406c75855a68e3317d0ea01991cf0a578"}], "stats": {"total": 16, "additions": 3, "deletions": 13}, "files": [{"sha": "9bf9cfd53780c9be4fa9bc2d1978cfb02ead9eb8", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3dd6b7bd90e7856d2c6c89075f757528f69f02/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3dd6b7bd90e7856d2c6c89075f757528f69f02/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=2c3dd6b7bd90e7856d2c6c89075f757528f69f02", "patch": "@@ -2637,8 +2637,7 @@ build_type_variant (type, constp, volatilep)\n      tree type;\n      int constp, volatilep;\n {\n-  register tree t, m = TYPE_MAIN_VARIANT (type);\n-  register struct obstack *ambient_obstack = current_obstack;\n+  register tree t;\n \n   /* Treat any nonzero argument as 1.  */\n   constp = !!constp;\n@@ -2654,24 +2653,15 @@ build_type_variant (type, constp, volatilep)\n      (existing) type.  */\n \n   if (!flag_gen_aux_info)\n-    for (t = m; t; t = TYPE_NEXT_VARIANT (t))\n+    for (t = TYPE_MAIN_VARIANT(type); t; t = TYPE_NEXT_VARIANT (t))\n       if (constp == TYPE_READONLY (t) && volatilep == TYPE_VOLATILE (t))\n         return t;\n \n   /* We need a new one.  */\n \n-  current_obstack = TYPE_OBSTACK (type);\n-  t = copy_node (type);\n-  current_obstack = ambient_obstack;\n-\n+  t = build_type_copy (type);\n   TYPE_READONLY (t) = constp;\n   TYPE_VOLATILE (t) = volatilep;\n-  TYPE_POINTER_TO (t) = 0;\n-  TYPE_REFERENCE_TO (t) = 0;\n-\n-  /* Add this type to the chain of variants of TYPE.  */\n-  TYPE_NEXT_VARIANT (t) = TYPE_NEXT_VARIANT (m);\n-  TYPE_NEXT_VARIANT (m) = t;\n \n   return t;\n }"}]}