{"sha": "b6b904bd616d3e1bb186db29c91172279cbd21b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZiOTA0YmQ2MTZkM2UxYmIxODZkYjI5YzkxMTcyMjc5Y2JkMjFiOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-08-29T18:48:30Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-08-29T18:48:30Z"}, "message": "dwarf2out.c (add_subscript_info): Stop on Fortran TYPE_STRING_FLAG types.\n\n\t* dwarf2out.c (add_subscript_info): Stop on Fortran TYPE_STRING_FLAG\n\ttypes.\n\t(gen_array_type_die): Emit DW_TAG_string_type for Fortran character\n\ttypes.\n\nFrom-SVN: r139778", "tree": {"sha": "bfc0f5b20071fe951f174b64e91d8a12a392692c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfc0f5b20071fe951f174b64e91d8a12a392692c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6b904bd616d3e1bb186db29c91172279cbd21b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6b904bd616d3e1bb186db29c91172279cbd21b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6b904bd616d3e1bb186db29c91172279cbd21b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6b904bd616d3e1bb186db29c91172279cbd21b9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "714495cdcf2425b6aa9f3eac6bd010f3030ddd41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/714495cdcf2425b6aa9f3eac6bd010f3030ddd41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/714495cdcf2425b6aa9f3eac6bd010f3030ddd41"}], "stats": {"total": 54, "additions": 50, "deletions": 4}, "files": [{"sha": "551723211f27dd55aab084edebac75c327513056", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b904bd616d3e1bb186db29c91172279cbd21b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b904bd616d3e1bb186db29c91172279cbd21b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6b904bd616d3e1bb186db29c91172279cbd21b9", "patch": "@@ -1,5 +1,10 @@\n 2008-08-29  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* dwarf2out.c (add_subscript_info): Stop on Fortran TYPE_STRING_FLAG\n+\ttypes.\n+\t(gen_array_type_die): Emit DW_TAG_string_type for Fortran character\n+\ttypes.\n+\n \t* dwarf2out.c (loc_by_reference): New function.\n \t(add_location_or_const_value_attribute): Use it.\n "}, {"sha": "13eebbc34d2684fb9e70851d3292e2d194639fe5", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 45, "deletions": 4, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b904bd616d3e1bb186db29c91172279cbd21b9/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b904bd616d3e1bb186db29c91172279cbd21b9/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=b6b904bd616d3e1bb186db29c91172279cbd21b9", "patch": "@@ -12027,6 +12027,9 @@ add_subscript_info (dw_die_ref type_die, tree type, bool collapse_p)\n     {\n       tree domain = TYPE_DOMAIN (type);\n \n+      if (TYPE_STRING_FLAG (type) && is_fortran () && dimension_number > 0)\n+\tbreak;\n+\n       /* Arrays come in three flavors: Unspecified bounds, fixed bounds,\n \t and (in GNU C only) variable bounds.  Handle all three forms\n \t here.  */\n@@ -12560,7 +12563,40 @@ gen_array_type_die (tree type, dw_die_ref context_die)\n \n   bool collapse_nested_arrays = !is_ada ();\n   tree element_type;\n-  \n+\n+  /* Emit DW_TAG_string_type for Fortran character types (with kind 1 only, as\n+     DW_TAG_string_type doesn't have DW_AT_type attribute).  */\n+  if (TYPE_STRING_FLAG (type)\n+      && TREE_CODE (type) == ARRAY_TYPE\n+      && is_fortran ()\n+      && TYPE_MODE (TREE_TYPE (type)) == TYPE_MODE (char_type_node))\n+    {\n+      HOST_WIDE_INT size;\n+\n+      array_die = new_die (DW_TAG_string_type, scope_die, type);\n+      add_name_attribute (array_die, type_tag (type));\n+      equate_type_number_to_die (type, array_die);\n+      size = int_size_in_bytes (type);\n+      if (size >= 0)\n+\tadd_AT_unsigned (array_die, DW_AT_byte_size, size);\n+      else if (TYPE_DOMAIN (type) != NULL_TREE\n+\t       && TYPE_MAX_VALUE (TYPE_DOMAIN (type)) != NULL_TREE\n+\t       && DECL_P (TYPE_MAX_VALUE (TYPE_DOMAIN (type))))\n+\t{\n+\t  tree szdecl = TYPE_MAX_VALUE (TYPE_DOMAIN (type));\n+\t  dw_loc_descr_ref loc = loc_descriptor_from_tree (szdecl);\n+\n+\t  size = int_size_in_bytes (TREE_TYPE (szdecl));\n+\t  if (loc && size > 0)\n+\t    {\n+\t      add_AT_loc (array_die, DW_AT_string_length, loc);\n+\t      if (size != DWARF2_ADDR_SIZE)\n+\t\tadd_AT_unsigned (array_die, DW_AT_byte_size, size);\n+\t    }\n+\t}\n+      return;\n+    }\n+\n   /* ??? The SGI dwarf reader fails for array of array of enum types\n      (e.g. const enum machine_mode insn_operand_mode[2][10]) unless the inner\n      array type comes before the outer array type.  We thus call gen_type_die\n@@ -12587,7 +12623,8 @@ gen_array_type_die (tree type, dw_die_ref context_die)\n   /* For Fortran multidimensional arrays use DW_ORD_col_major ordering.  */\n   if (is_fortran ()\n       && TREE_CODE (type) == ARRAY_TYPE\n-      && TREE_CODE (TREE_TYPE (type)) == ARRAY_TYPE)\n+      && TREE_CODE (TREE_TYPE (type)) == ARRAY_TYPE\n+      && !TYPE_STRING_FLAG (TREE_TYPE (type)))\n     add_AT_unsigned (array_die, DW_AT_ordering, DW_ORD_col_major);\n \n #if 0\n@@ -12615,8 +12652,12 @@ gen_array_type_die (tree type, dw_die_ref context_die)\n   element_type = TREE_TYPE (type);\n   if (collapse_nested_arrays)\n     while (TREE_CODE (element_type) == ARRAY_TYPE)\n-      element_type = TREE_TYPE (element_type);\n-  \n+      {\n+\tif (TYPE_STRING_FLAG (element_type) && is_fortran ())\n+\t  break;\n+\telement_type = TREE_TYPE (element_type);\n+      }\n+\n #ifndef MIPS_DEBUGGING_INFO\n   gen_type_die (element_type, context_die);\n #endif"}]}