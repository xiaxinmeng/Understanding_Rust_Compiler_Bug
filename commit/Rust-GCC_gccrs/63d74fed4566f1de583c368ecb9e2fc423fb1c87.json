{"sha": "63d74fed4566f1de583c368ecb9e2fc423fb1c87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNkNzRmZWQ0NTY2ZjFkZTU4M2MzNjhlY2I5ZTJmYzQyM2ZiMWM4Nw==", "commit": {"author": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2021-03-09T22:18:58Z"}, "committer": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2021-03-09T22:19:52Z"}, "message": "IRA: Process digital constraints containing more one digit\n\ngcc/ChangeLog:\n\n\t* ira.c (ira_setup_alts, ira_get_dup_out_num): Process digital\n\tconstraints > 9.\n\t* ira-lives.c (single_reg_class): Ditto.", "tree": {"sha": "0ed66571b1d95369a74b717f9bebc3a80ed7700c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ed66571b1d95369a74b717f9bebc3a80ed7700c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63d74fed4566f1de583c368ecb9e2fc423fb1c87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d74fed4566f1de583c368ecb9e2fc423fb1c87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63d74fed4566f1de583c368ecb9e2fc423fb1c87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d74fed4566f1de583c368ecb9e2fc423fb1c87/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0455cd76b687621f28488393c81d0854200a220a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0455cd76b687621f28488393c81d0854200a220a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0455cd76b687621f28488393c81d0854200a220a"}], "stats": {"total": 123, "additions": 69, "deletions": 54}, "files": [{"sha": "f3341313bd164a3a5047e4da40a1cd2eb8329821", "filename": "gcc/ira-lives.c", "status": "modified", "additions": 53, "deletions": 45, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d74fed4566f1de583c368ecb9e2fc423fb1c87/gcc%2Fira-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d74fed4566f1de583c368ecb9e2fc423fb1c87/gcc%2Fira-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-lives.c?ref=63d74fed4566f1de583c368ecb9e2fc423fb1c87", "patch": "@@ -855,53 +855,61 @@ single_reg_class (const char *constraints, rtx op, rtx equiv_const)\n \n   cl = NO_REGS;\n   alternative_mask preferred = preferred_alternatives;\n-  for (; (c = *constraints); constraints += CONSTRAINT_LEN (c, constraints))\n-    if (c == '#')\n-      preferred &= ~ALTERNATIVE_BIT (0);\n-    else if (c == ',')\n-      preferred >>= 1;\n-    else if (preferred & 1)\n-      switch (c)\n-\t{\n-\tcase 'g':\n-\t  return NO_REGS;\n-\n-\tdefault:\n-\t  /* ??? Is this the best way to handle memory constraints?  */\n-\t  cn = lookup_constraint (constraints);\n-\t  if (insn_extra_memory_constraint (cn)\n-\t      || insn_extra_special_memory_constraint (cn)\n-\t      || insn_extra_address_constraint (cn))\n-\t    return NO_REGS;\n-\t  if (constraint_satisfied_p (op, cn)\n-\t      || (equiv_const != NULL_RTX\n-\t\t  && CONSTANT_P (equiv_const)\n-\t\t  && constraint_satisfied_p (equiv_const, cn)))\n+  while ((c = *constraints))\n+    {\n+      if (c == '#')\n+\tpreferred &= ~ALTERNATIVE_BIT (0);\n+      else if (c == ',')\n+\tpreferred >>= 1;\n+      else if (preferred & 1)\n+\tswitch (c)\n+\t  {\n+\t  case 'g':\n \t    return NO_REGS;\n-\t  next_cl = reg_class_for_constraint (cn);\n-\t  if (next_cl == NO_REGS)\n+\t    \n+\t  default:\n+\t    /* ??? Is this the best way to handle memory constraints?  */\n+\t    cn = lookup_constraint (constraints);\n+\t    if (insn_extra_memory_constraint (cn)\n+\t\t|| insn_extra_special_memory_constraint (cn)\n+\t\t|| insn_extra_address_constraint (cn))\n+\t      return NO_REGS;\n+\t    if (constraint_satisfied_p (op, cn)\n+\t\t|| (equiv_const != NULL_RTX\n+\t\t    && CONSTANT_P (equiv_const)\n+\t\t    && constraint_satisfied_p (equiv_const, cn)))\n+\t      return NO_REGS;\n+\t    next_cl = reg_class_for_constraint (cn);\n+\t    if (next_cl == NO_REGS)\n+\t      break;\n+\t    if (cl == NO_REGS\n+\t\t? ira_class_singleton[next_cl][GET_MODE (op)] < 0\n+\t\t: (ira_class_singleton[cl][GET_MODE (op)]\n+\t\t   != ira_class_singleton[next_cl][GET_MODE (op)]))\n+\t      return NO_REGS;\n+\t    cl = next_cl;\n \t    break;\n-\t  if (cl == NO_REGS\n-\t      ? ira_class_singleton[next_cl][GET_MODE (op)] < 0\n-\t      : (ira_class_singleton[cl][GET_MODE (op)]\n-\t\t != ira_class_singleton[next_cl][GET_MODE (op)]))\n-\t    return NO_REGS;\n-\t  cl = next_cl;\n-\t  break;\n-\n-\tcase '0': case '1': case '2': case '3': case '4':\n-\tcase '5': case '6': case '7': case '8': case '9':\n-\t  next_cl\n-\t    = single_reg_class (recog_data.constraints[c - '0'],\n-\t\t\t\trecog_data.operand[c - '0'], NULL_RTX);\n-\t  if (cl == NO_REGS\n-\t      ? ira_class_singleton[next_cl][GET_MODE (op)] < 0\n-\t      : (ira_class_singleton[cl][GET_MODE (op)]\n-\t\t != ira_class_singleton[next_cl][GET_MODE (op)]))\n-\t    return NO_REGS;\n-\t  cl = next_cl;\n-\t  break;\n-\t}\n+\t    \n+\t  case '0': case '1': case '2': case '3': case '4':\n+\t  case '5': case '6': case '7': case '8': case '9':\n+\t    {\n+\t      char *end;\n+\t      unsigned long dup = strtoul (constraints, &end, 10);\n+\t      constraints = end;\n+\t      next_cl\n+\t\t= single_reg_class (recog_data.constraints[dup],\n+\t\t\t\t    recog_data.operand[dup], NULL_RTX);\n+\t      if (cl == NO_REGS\n+\t\t  ? ira_class_singleton[next_cl][GET_MODE (op)] < 0\n+\t\t  : (ira_class_singleton[cl][GET_MODE (op)]\n+\t\t     != ira_class_singleton[next_cl][GET_MODE (op)]))\n+\t\treturn NO_REGS;\n+\t      cl = next_cl;\n+\t      continue;\n+\t    }\n+\t  }\n+      constraints += CONSTRAINT_LEN (c, constraints);\n+   }\n   return cl;\n }\n "}, {"sha": "fc77131491ddee7f7f4e13a9e06882583bef61b7", "filename": "gcc/ira.c", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d74fed4566f1de583c368ecb9e2fc423fb1c87/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d74fed4566f1de583c368ecb9e2fc423fb1c87/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=63d74fed4566f1de583c368ecb9e2fc423fb1c87", "patch": "@@ -1829,7 +1829,10 @@ ira_setup_alts (rtx_insn *insn)\n \t\t  case '0':  case '1':  case '2':  case '3':  case '4':\n \t\t  case '5':  case '6':  case '7':  case '8':  case '9':\n \t\t    {\n-\t\t      rtx other = recog_data.operand[c - '0'];\n+\t\t      char *end;\n+\t\t      unsigned long dup = strtoul (p, &end, 10);\n+\t\t      rtx other = recog_data.operand[dup];\n+\t\t      len = end - p;\n \t\t      if (MEM_P (other)\n \t\t\t  ? rtx_equal_p (other, op)\n \t\t\t  : REG_P (op) || SUBREG_P (op))\n@@ -1922,7 +1925,7 @@ ira_setup_alts (rtx_insn *insn)\n int\n ira_get_dup_out_num (int op_num, alternative_mask alts)\n {\n-  int curr_alt, c, original, dup;\n+  int curr_alt, c, original;\n   bool ignore_p, use_commut_op_p;\n   const char *str;\n \n@@ -1969,18 +1972,22 @@ ira_get_dup_out_num (int op_num, alternative_mask alts)\n \t\t\n \t      case '0': case '1': case '2': case '3': case '4':\n \t      case '5': case '6': case '7': case '8': case '9':\n-\t\tif (original != -1 && original != c)\n-\t\t  goto fail;\n-\t\toriginal = c;\n-\t\tbreak;\n+\t\t{\n+\t\t  char *end;\n+\t\t  int n = (int) strtoul (str, &end, 10);\n+\t\t  str = end;\n+\t\t  if (original != -1 && original != n)\n+\t\t    goto fail;\n+\t\t  original = n;\n+\t\t  continue;\n+\t\t}\n \t      }\n \t  str += CONSTRAINT_LEN (c, str);\n \t}\n       if (original == -1)\n \tgoto fail;\n-      dup = original - '0';\n-      if (recog_data.operand_type[dup] == OP_OUT)\n-\treturn dup;\n+      if (recog_data.operand_type[original] == OP_OUT)\n+\treturn original;\n     fail:\n       if (use_commut_op_p)\n \tbreak;"}]}