{"sha": "b97b4e6f71da62cae325d1f41610cfb43870a4a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk3YjRlNmY3MWRhNjJjYWUzMjVkMWY0MTYxMGNmYjQzODcwYTRhMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-11-21T23:54:18Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-12-14T15:51:53Z"}, "message": "[Ada] Adjust again previous change to System.Fat_Gen\n\ngcc/ada/\n\n\t* libgnat/s-fatgen.adb: Add with clause for Interfaces and use\n\ttype clause for Interfaces.Unsigned_64.\n\t(Small): Comment out.\n\t(Tiny): Likewise.\n\t(Tiny16): New integer constant.\n\t(Tiny32): Likewise.\n\t(Tiny64): Likewise.\n\t(Tiny80): New integer array constant.\n\t(Pred): Declare a local overlay for Tiny.\n\t(Succ): Likewise.", "tree": {"sha": "d952f569405e3fea90909f838af8231515501846", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d952f569405e3fea90909f838af8231515501846"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b97b4e6f71da62cae325d1f41610cfb43870a4a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b97b4e6f71da62cae325d1f41610cfb43870a4a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b97b4e6f71da62cae325d1f41610cfb43870a4a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b97b4e6f71da62cae325d1f41610cfb43870a4a1/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a36a291399fbcf24d5ea237850b862921ebdec95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a36a291399fbcf24d5ea237850b862921ebdec95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a36a291399fbcf24d5ea237850b862921ebdec95"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "d297451d99c44b80d90572d613b746568dbf6a51", "filename": "gcc/ada/libgnat/s-fatgen.adb", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97b4e6f71da62cae325d1f41610cfb43870a4a1/gcc%2Fada%2Flibgnat%2Fs-fatgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97b4e6f71da62cae325d1f41610cfb43870a4a1/gcc%2Fada%2Flibgnat%2Fs-fatgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-fatgen.adb?ref=b97b4e6f71da62cae325d1f41610cfb43870a4a1", "patch": "@@ -35,12 +35,15 @@\n --  floating-point implementations.\n \n with Ada.Unchecked_Conversion;\n+with Interfaces;\n with System.Unsigned_Types;\n \n pragma Warnings (Off, \"non-static constant in preelaborated unit\");\n --  Every constant is static given our instantiation model\n \n package body System.Fat_Gen is\n+   use type Interfaces.Unsigned_64;\n+\n    pragma Assert (T'Machine_Radix = 2);\n    --  This version does not handle radix 16\n \n@@ -53,13 +56,22 @@ package body System.Fat_Gen is\n    Invrad : constant T := 1.0 / Rad;\n    --  Smallest positive mantissa in the canonical form (RM A.5.3(4))\n \n-   Small : constant T := Rad ** (T'Machine_Emin - 1);\n-   pragma Unreferenced (Small);\n+   --  Small : constant T := Rad ** (T'Machine_Emin - 1);\n    --  Smallest positive normalized number\n \n-   Tiny : constant T := Rad ** (T'Machine_Emin - Mantissa);\n+   --  Tiny : constant T := Rad ** (T'Machine_Emin - Mantissa);\n    --  Smallest positive denormalized number\n \n+   Tiny16 : constant Interfaces.Unsigned_16 := 1;\n+   Tiny32 : constant Interfaces.Unsigned_32 := 1;\n+   Tiny64 : constant Interfaces.Unsigned_64 := 1;\n+   Tiny80 : constant array (1 .. 2) of Interfaces.Unsigned_64 :=\n+              (1 * Standard'Default_Bit_Order,\n+               2**48 * (1 - Standard'Default_Bit_Order));\n+   --  We cannot use the direct declaration because it cannot be translated\n+   --  into C90, as the hexadecimal floating constants were introduced in C99.\n+   --  So we work around this by using an overlay of the integer constant.\n+\n    RM1 : constant T := Rad ** (Mantissa - 1);\n    --  Smallest positive member of the large consecutive integers. It is equal\n    --  to the ratio Small / Tiny, which means that multiplying by it normalizes\n@@ -411,6 +423,13 @@ package body System.Fat_Gen is\n    ----------\n \n    function Pred (X : T) return T is\n+      Tiny : constant T;\n+      pragma Import (Ada, Tiny);\n+      for Tiny'Address use (if     T'Size   = 16 then Tiny16'Address\n+                             elsif T'Size   = 32 then Tiny32'Address\n+                             elsif T'Size   = 64 then Tiny64'Address\n+                             elsif Mantissa = 64 then Tiny80'Address\n+                             else raise Program_Error);\n       X_Frac : T;\n       X_Exp  : UI;\n \n@@ -676,6 +695,13 @@ package body System.Fat_Gen is\n    ----------\n \n    function Succ (X : T) return T is\n+      Tiny : constant T;\n+      pragma Import (Ada, Tiny);\n+      for Tiny'Address use (if     T'Size   = 16 then Tiny16'Address\n+                             elsif T'Size   = 32 then Tiny32'Address\n+                             elsif T'Size   = 64 then Tiny64'Address\n+                             elsif Mantissa = 64 then Tiny80'Address\n+                             else raise Program_Error);\n       X_Frac : T;\n       X_Exp  : UI;\n "}]}