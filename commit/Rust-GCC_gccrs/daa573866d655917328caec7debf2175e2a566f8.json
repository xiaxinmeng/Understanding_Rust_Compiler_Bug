{"sha": "daa573866d655917328caec7debf2175e2a566f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFhNTczODY2ZDY1NTkxNzMyOGNhZWM3ZGViZjIxNzVlMmE1NjZmOA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-04-19T08:51:50Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-04-19T08:51:50Z"}, "message": "re PR tree-optimization/44688 (Excessive code-size growth at -O3)\n\n2012-04-19  Richard Guenther  <rguenther@suse.de>\n\n\tPR rtl-optimization/44688\n\t* loop-iv.c (determine_max_iter): Only return max_iter.\n\t(iv_number_of_iterations): Also use the recorded loop bound\n\ton the maximum number of iterations.\n\t* loop-unroll.c (decide_unroll_runtime_iterations): Use\n\tmax_iter to avoid unrolling loops that do not roll.\n\t(decide_unroll_stupid): Likewise.\n\n\t* gcc.dg/var-expand1.c: Increase array size to make unrolling\n\tpossibly profitable.\n\nFrom-SVN: r186585", "tree": {"sha": "92d23c442fd6840815fd73d552e519a3d4bac434", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92d23c442fd6840815fd73d552e519a3d4bac434"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/daa573866d655917328caec7debf2175e2a566f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daa573866d655917328caec7debf2175e2a566f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daa573866d655917328caec7debf2175e2a566f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daa573866d655917328caec7debf2175e2a566f8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1295401bcf45076d15e73746dd52ed2127d47588", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1295401bcf45076d15e73746dd52ed2127d47588", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1295401bcf45076d15e73746dd52ed2127d47588"}], "stats": {"total": 58, "additions": 39, "deletions": 19}, "files": [{"sha": "f2a9e0ae29fc7f77cec5cd8dcb796f381d09bdd0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa573866d655917328caec7debf2175e2a566f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa573866d655917328caec7debf2175e2a566f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=daa573866d655917328caec7debf2175e2a566f8", "patch": "@@ -1,3 +1,13 @@\n+2012-04-19  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR rtl-optimization/44688\n+\t* loop-iv.c (determine_max_iter): Only return max_iter.\n+\t(iv_number_of_iterations): Also use the recorded loop bound\n+\ton the maximum number of iterations.\n+\t* loop-unroll.c (decide_unroll_runtime_iterations): Use\n+\tmax_iter to avoid unrolling loops that do not roll.\n+\t(decide_unroll_stupid): Likewise.\n+\n 2012-04-18  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* targhooks.c (default_case_values_threshold): Fix code style nit."}, {"sha": "382d4ce1591170c57e02d529fb84ed5ac53270d1", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa573866d655917328caec7debf2175e2a566f8/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa573866d655917328caec7debf2175e2a566f8/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=daa573866d655917328caec7debf2175e2a566f8", "patch": "@@ -2190,8 +2190,8 @@ canonicalize_iv_subregs (struct rtx_iv *iv0, struct rtx_iv *iv1,\n   return true;\n }\n \n-/* Tries to estimate the maximum number of iterations in LOOP, and store the\n-   result in DESC.  This function is called from iv_number_of_iterations with\n+/* Tries to estimate the maximum number of iterations in LOOP, and return the\n+   result.  This function is called from iv_number_of_iterations with\n    a number of fields in DESC already filled in.  OLD_NITER is the original\n    expression for the number of iterations, before we tried to simplify it.  */\n \n@@ -2207,10 +2207,7 @@ determine_max_iter (struct loop *loop, struct niter_desc *desc, rtx old_niter)\n     {\n       nmax = INTVAL (XEXP (niter, 0));\n       if (!(nmax & (nmax + 1)))\n-\t{\n-\t  desc->niter_max = nmax;\n-\t  return nmax;\n-\t}\n+\treturn nmax;\n     }\n \n   get_mode_bounds (desc->mode, desc->signed_p, desc->mode, &mmin, &mmax);\n@@ -2219,10 +2216,7 @@ determine_max_iter (struct loop *loop, struct niter_desc *desc, rtx old_niter)\n   if (GET_CODE (niter) == UDIV)\n     {\n       if (!CONST_INT_P (XEXP (niter, 1)))\n-\t{\n-\t  desc->niter_max = nmax;\n-\t  return nmax;\n-\t}\n+\treturn nmax;\n       inc = INTVAL (XEXP (niter, 1));\n       niter = XEXP (niter, 0);\n     }\n@@ -2241,7 +2235,6 @@ determine_max_iter (struct loop *loop, struct niter_desc *desc, rtx old_niter)\n       if (dump_file)\n \tfprintf (dump_file, \";; improved upper bound by one.\\n\");\n     }\n-  desc->niter_max = nmax / inc;\n   return nmax / inc;\n }\n \n@@ -2259,7 +2252,7 @@ iv_number_of_iterations (struct loop *loop, rtx insn, rtx condition,\n   enum rtx_code cond;\n   enum machine_mode mode, comp_mode;\n   rtx mmin, mmax, mode_mmin, mode_mmax;\n-  unsigned HOST_WIDEST_INT s, size, d, inv;\n+  unsigned HOST_WIDEST_INT s, size, d, inv, max;\n   HOST_WIDEST_INT up, down, inc, step_val;\n   int was_sharp = false;\n   rtx old_niter;\n@@ -2279,6 +2272,9 @@ iv_number_of_iterations (struct loop *loop, rtx insn, rtx condition,\n   desc->const_iter = false;\n   desc->niter_expr = NULL_RTX;\n   desc->niter_max = 0;\n+  if (loop->any_upper_bound\n+      && double_int_fits_in_uhwi_p (loop->nb_iterations_upper_bound))\n+    desc->niter_max = loop->nb_iterations_upper_bound.low;\n \n   cond = GET_CODE (condition);\n   gcc_assert (COMPARISON_P (condition));\n@@ -2547,7 +2543,10 @@ iv_number_of_iterations (struct loop *loop, rtx insn, rtx condition,\n \t  down = INTVAL (CONST_INT_P (iv0.base)\n \t\t\t ? iv0.base\n \t\t\t : mode_mmin);\n-\t  desc->niter_max = (up - down) / inc + 1;\n+\t  max = (up - down) / inc + 1;\n+\t  if (!desc->niter_max\n+\t      || max < desc->niter_max)\n+\t    desc->niter_max = max;\n \n \t  if (iv0.step == const0_rtx)\n \t    {\n@@ -2762,8 +2761,10 @@ iv_number_of_iterations (struct loop *loop, rtx insn, rtx condition,\n     }\n   else\n     {\n-      if (!desc->niter_max)\n-\tdesc->niter_max = determine_max_iter (loop, desc, old_niter);\n+      max = determine_max_iter (loop, desc, old_niter);\n+      if (!desc->niter_max\n+\t  || max < desc->niter_max)\n+\tdesc->niter_max = max;\n \n       /* simplify_using_initial_values does a copy propagation on the registers\n \t in the expression for the number of iterations.  This prolongs life"}, {"sha": "f251f5dbacd0361b8b461a2177d8dd1e636435de", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa573866d655917328caec7debf2175e2a566f8/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa573866d655917328caec7debf2175e2a566f8/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=daa573866d655917328caec7debf2175e2a566f8", "patch": "@@ -857,7 +857,9 @@ decide_unroll_runtime_iterations (struct loop *loop, int flags)\n     }\n \n   /* If we have profile feedback, check whether the loop rolls.  */\n-  if (loop->header->count && expected_loop_iterations (loop) < 2 * nunroll)\n+  if ((loop->header->count\n+       && expected_loop_iterations (loop) < 2 * nunroll)\n+      || desc->niter_max < 2 * nunroll)\n     {\n       if (dump_file)\n \tfprintf (dump_file, \";; Not unrolling loop, doesn't roll\\n\");\n@@ -1400,8 +1402,9 @@ decide_unroll_stupid (struct loop *loop, int flags)\n     }\n \n   /* If we have profile feedback, check whether the loop rolls.  */\n-  if (loop->header->count\n-      && expected_loop_iterations (loop) < 2 * nunroll)\n+  if ((loop->header->count\n+       && expected_loop_iterations (loop) < 2 * nunroll)\n+      || desc->niter_max < 2 * nunroll)\n     {\n       if (dump_file)\n \tfprintf (dump_file, \";; Not unrolling loop, doesn't roll\\n\");"}, {"sha": "6d9506edb273333706f8c06640f10308846eadf9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa573866d655917328caec7debf2175e2a566f8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa573866d655917328caec7debf2175e2a566f8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=daa573866d655917328caec7debf2175e2a566f8", "patch": "@@ -1,3 +1,9 @@\n+2012-04-19  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR rtl-optimization/44688\n+\t* gcc.dg/var-expand1.c: Increase array size to make unrolling\n+\tpossibly profitable.\n+\n 2012-04-18  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR tree-optimization/52976"}, {"sha": "a784ea1a0416b6ec07f2a1ec865419887e2485ef", "filename": "gcc/testsuite/gcc.dg/var-expand1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa573866d655917328caec7debf2175e2a566f8/gcc%2Ftestsuite%2Fgcc.dg%2Fvar-expand1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa573866d655917328caec7debf2175e2a566f8/gcc%2Ftestsuite%2Fgcc.dg%2Fvar-expand1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvar-expand1.c?ref=daa573866d655917328caec7debf2175e2a566f8", "patch": "@@ -6,7 +6,7 @@\n \n extern void abort (void);\n \n-float array[10] = { 1,2,3,4,5,6,7,8,9,10 };\n+float array[30] = { 1,2,3,4,5,6,7,8,9,10 };\n \n int foo (int n)\n {"}]}