{"sha": "122ae89b144a0eaf31107f871f26ead27df8daad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIyYWU4OWIxNDRhMGVhZjMxMTA3Zjg3MWYyNmVhZDI3ZGY4ZGFhZA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@rabi.columbia.edu", "date": "1999-02-25T14:24:40Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "1999-02-25T14:24:40Z"}, "message": "cpphash.c (install): Rename to cpp_install, add cpp_reader* first argument.\n\n1999-02-25 17:14 -0500  Zack Weinberg  <zack@rabi.columbia.edu>\n\t* cpphash.c (install): Rename to cpp_install, add cpp_reader*\n\tfirst argument.  All callers changed.\n\t(hashtab): Removed.\n\t(cpp_lookup, cpp_install): Change all refs to hashtab to\n\tpfile->hashtab.\n\t(cpp_hash_cleanup): Removed.\n\t* cpphash.h: Adjust prototypes.\n\t* cpplib.h (struct cpp_reader): Add hashtab pointer.\n\t* cppinit.c (cpp_reader_init): Also allocate space for the\n\thashtab.\n\t(cpp_cleanup): Delete all macros and free the hashtab.\n\nFrom-SVN: r25441", "tree": {"sha": "6a70d45559c3b1a18fd0998b7705e78d86303259", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a70d45559c3b1a18fd0998b7705e78d86303259"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/122ae89b144a0eaf31107f871f26ead27df8daad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/122ae89b144a0eaf31107f871f26ead27df8daad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/122ae89b144a0eaf31107f871f26ead27df8daad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/122ae89b144a0eaf31107f871f26ead27df8daad/comments", "author": null, "committer": null, "parents": [{"sha": "9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ab70a9bd7c8ee4fcf2f074459525e981ed1ca2e"}], "stats": {"total": 110, "additions": 58, "deletions": 52}, "files": [{"sha": "4c618ae15b95e1e9dcb32fef97298e90de9b2e90", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/122ae89b144a0eaf31107f871f26ead27df8daad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/122ae89b144a0eaf31107f871f26ead27df8daad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=122ae89b144a0eaf31107f871f26ead27df8daad", "patch": "@@ -1,3 +1,17 @@\n+1999-02-25 17:14 -0500  Zack Weinberg  <zack@rabi.columbia.edu>\n+\n+\t* cpphash.c (install): Rename to cpp_install, add cpp_reader*\n+\tfirst argument.  All callers changed.\n+\t(hashtab): Removed.\n+\t(cpp_lookup, cpp_install): Change all refs to hashtab to\n+\tpfile->hashtab.\n+\t(cpp_hash_cleanup): Removed.\n+\t* cpphash.h: Adjust prototypes.\n+\t* cpplib.h (struct cpp_reader): Add hashtab pointer.\n+\t* cppinit.c (cpp_reader_init): Also allocate space for the\n+\thashtab.\n+\t(cpp_cleanup): Delete all macros and free the hashtab.\n+\n Thu Feb 25 21:52:54 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* sh.h (PASS_IN_REG_P):  For TARGET_HITACHI, don't pass structures"}, {"sha": "0f95d8ad3078bccf61cdd590a84dca4e41138b40", "filename": "gcc/cpphash.c", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/122ae89b144a0eaf31107f871f26ead27df8daad/gcc%2Fcpphash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/122ae89b144a0eaf31107f871f26ead27df8daad/gcc%2Fcpphash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.c?ref=122ae89b144a0eaf31107f871f26ead27df8daad", "patch": "@@ -27,8 +27,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #include \"cpplib.h\"\n #include \"cpphash.h\"\n \n-static HASHNODE *hashtab[HASHSIZE];\n-\n static int comp_def_part\t PARAMS ((int, U_CHAR *, int, U_CHAR *,\n \t\t\t\t\t  int, int));\n static int change_newlines\t PARAMS ((U_CHAR *, int));\n@@ -104,7 +102,7 @@ hashf (name, len, hashsize)\n }\n \n /* Find the most recent hash node for name \"name\" (ending with first\n-   non-identifier char) installed by install\n+   non-identifier char) installed by cpp_install\n \n    If LEN is >= 0, it is the length of the name.\n    Otherwise, compute the length by scanning the entire name.\n@@ -131,7 +129,7 @@ cpp_lookup (pfile, name, len, hash)\n   if (hash < 0)\n     hash = hashf (name, len, HASHSIZE);\n \n-  bucket = hashtab[hash];\n+  bucket = pfile->hashtab[hash];\n   while (bucket)\n     {\n       if (bucket->length == len && strncmp (bucket->name, name, len) == 0)\n@@ -191,7 +189,7 @@ delete_macro (hp)\n /* Install a name in the main hash table, even if it is already there.\n    Name stops with first non alphanumeric, except leading '#'.\n    Caller must check against redefinition if that is desired.\n-   delete_macro () removes things installed by install () in fifo order.\n+   delete_macro () removes things installed by cpp_install () in fifo order.\n    this is important because of the `defined' special symbol used\n    in #if, and also if pushdef/popdef directives are ever implemented.\n \n@@ -202,7 +200,8 @@ delete_macro (hp)\n    Otherwise, compute the hash code.  */\n \n HASHNODE *\n-install (name, len, type, value, hash)\n+cpp_install (pfile, name, len, type, value, hash)\n+     cpp_reader *pfile;\n      U_CHAR *name;\n      int len;\n      enum node_type type;\n@@ -227,9 +226,9 @@ install (name, len, type, value, hash)\n   i = sizeof (HASHNODE) + len + 1;\n   hp = (HASHNODE *) xmalloc (i);\n   bucket = hash;\n-  hp->bucket_hdr = &hashtab[bucket];\n-  hp->next = hashtab[bucket];\n-  hashtab[bucket] = hp;\n+  hp->bucket_hdr = &pfile->hashtab[bucket];\n+  hp->next = pfile->hashtab[bucket];\n+  pfile->hashtab[bucket] = hp;\n   hp->prev = NULL;\n   if (hp->next != NULL)\n     hp->next->prev = hp;\n@@ -242,18 +241,6 @@ install (name, len, type, value, hash)\n   return hp;\n }\n \n-void\n-cpp_hash_cleanup (pfile)\n-     cpp_reader *pfile ATTRIBUTE_UNUSED;\n-{\n-  register int i;\n-  for (i = HASHSIZE; --i >= 0;)\n-    {\n-      while (hashtab[i])\n-\tdelete_macro (hashtab[i]);\n-    }\n-}\n-\n static int\n macro_cleanup (pbuf, pfile)\n      cpp_buffer *pbuf;"}, {"sha": "d304f1a169e4a3a20878e3604493e1471a8e03e2", "filename": "gcc/cpphash.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/122ae89b144a0eaf31107f871f26ead27df8daad/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/122ae89b144a0eaf31107f871f26ead27df8daad/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=122ae89b144a0eaf31107f871f26ead27df8daad", "patch": "@@ -45,18 +45,16 @@ typedef struct hashnode HASHNODE;\n    the hashf () function.  Hashf () only exists for the sake of\n    politeness, for use when speed isn't so important. */\n \n-#define HASHSIZE 1403\n #define HASHSTEP(old, c) ((old << 2) + c)\n #define MAKE_POS(v) (v & 0x7fffffff) /* make number positive */\n \n-extern HASHNODE *install PARAMS ((U_CHAR *, int, enum node_type,\n-\t\t\t\t  const char *, int));\n-extern int hashf PARAMS ((const U_CHAR *, int, int));\n-extern void delete_macro PARAMS ((HASHNODE *));\n+extern HASHNODE *cpp_install\t  PARAMS ((cpp_reader *, U_CHAR *, int,\n+\t\t\t\t\t   enum node_type, const char *, int));\n+extern int hashf\t\t  PARAMS ((const U_CHAR *, int, int));\n+extern void delete_macro\t  PARAMS ((HASHNODE *));\n \n extern MACRODEF create_definition PARAMS ((U_CHAR *, U_CHAR *,\n \t\t\t\t\t   cpp_reader *, int));\n extern int compare_defs\t\t  PARAMS ((cpp_reader *, DEFINITION *,\n \t\t\t\t\t   DEFINITION *));\n extern void macroexpand\t\t  PARAMS ((cpp_reader *, HASHNODE *));\n-extern void cpp_hash_cleanup\t  PARAMS ((cpp_reader *));"}, {"sha": "551d922a06eb1fef0c20d42ab62cfde9c23efbbc", "filename": "gcc/cppinit.c", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/122ae89b144a0eaf31107f871f26ead27df8daad/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/122ae89b144a0eaf31107f871f26ead27df8daad/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=122ae89b144a0eaf31107f871f26ead27df8daad", "patch": "@@ -452,6 +452,8 @@ cpp_reader_init (pfile)\n   pfile->token_buffer_size = 200;\n   pfile->token_buffer = (U_CHAR *) xmalloc (pfile->token_buffer_size);\n   CPP_SET_WRITTEN (pfile, 0);\n+\n+  pfile->hashtab = (HASHNODE **) xcalloc (HASHSIZE, sizeof (HASHNODE *));\n }\n \n /* Free resources used by PFILE.\n@@ -500,7 +502,12 @@ cpp_cleanup (pfile)\n       pfile->all_include_files[i] = 0;\n     }\n \n-  cpp_hash_cleanup (pfile);\n+  for (i = HASHSIZE; --i >= 0;)\n+    {\n+      while (pfile->hashtab[i])\n+\tdelete_macro (pfile->hashtab[i]);\n+    }\n+  free (pfile->hashtab);\n }\n \n \n@@ -510,31 +517,31 @@ initialize_builtins (pfile)\n      cpp_reader *pfile;\n {\n #define NAME(str) (U_CHAR *)str, sizeof str - 1\n-  install (NAME(\"__TIME__\"),\t\t  T_TIME,\t0, -1);\n-  install (NAME(\"__DATE__\"),\t\t  T_DATE,\t0, -1);\n-  install (NAME(\"__FILE__\"),\t\t  T_FILE,\t0, -1);\n-  install (NAME(\"__BASE_FILE__\"),\t  T_BASE_FILE,\t0, -1);\n-  install (NAME(\"__LINE__\"),\t\t  T_SPECLINE,\t0, -1);\n-  install (NAME(\"__INCLUDE_LEVEL__\"),\t  T_INCLUDE_LEVEL, 0, -1);\n-  install (NAME(\"__VERSION__\"),\t\t  T_VERSION,\t0, -1);\n+  cpp_install (pfile, NAME(\"__TIME__\"),\t\t  T_TIME,\t0, -1);\n+  cpp_install (pfile, NAME(\"__DATE__\"),\t\t  T_DATE,\t0, -1);\n+  cpp_install (pfile, NAME(\"__FILE__\"),\t\t  T_FILE,\t0, -1);\n+  cpp_install (pfile, NAME(\"__BASE_FILE__\"),\t  T_BASE_FILE,\t0, -1);\n+  cpp_install (pfile, NAME(\"__LINE__\"),\t\t  T_SPECLINE,\t0, -1);\n+  cpp_install (pfile, NAME(\"__INCLUDE_LEVEL__\"),  T_INCLUDE_LEVEL, 0, -1);\n+  cpp_install (pfile, NAME(\"__VERSION__\"),\t  T_VERSION,\t0, -1);\n #ifndef NO_BUILTIN_SIZE_TYPE\n-  install (NAME(\"__SIZE_TYPE__\"),\t  T_CONST, SIZE_TYPE, -1);\n+  cpp_install (pfile, NAME(\"__SIZE_TYPE__\"),\t  T_CONST, SIZE_TYPE, -1);\n #endif\n #ifndef NO_BUILTIN_PTRDIFF_TYPE\n-  install (NAME(\"__PTRDIFF_TYPE__ \"),\t  T_CONST, PTRDIFF_TYPE, -1);\n+  cpp_install (pfile, NAME(\"__PTRDIFF_TYPE__ \"),  T_CONST, PTRDIFF_TYPE, -1);\n #endif\n-  install (NAME(\"__WCHAR_TYPE__\"),\t  T_CONST, WCHAR_TYPE, -1);\n-  install (NAME(\"__USER_LABEL_PREFIX__\"), T_CONST, user_label_prefix, -1);\n-  install (NAME(\"__REGISTER_PREFIX__\"),\t  T_CONST, REGISTER_PREFIX, -1);\n+  cpp_install (pfile, NAME(\"__WCHAR_TYPE__\"),\t  T_CONST, WCHAR_TYPE, -1);\n+  cpp_install (pfile, NAME(\"__USER_LABEL_PREFIX__\"), T_CONST, user_label_prefix, -1);\n+  cpp_install (pfile, NAME(\"__REGISTER_PREFIX__\"),  T_CONST, REGISTER_PREFIX, -1);\n   if (!CPP_TRADITIONAL (pfile))\n     {\n-      install (NAME(\"__STDC__\"),\t  T_STDC,  0, -1);\n+      cpp_install (pfile, NAME(\"__STDC__\"),\t  T_STDC,  0, -1);\n #if 0\n       if (CPP_OPTIONS (pfile)->c9x)\n-\tinstall (NAME(\"__STDC_VERSION__\"),T_CONST, \"199909L\", -1);\n+\tcpp_install (pfile, NAME(\"__STDC_VERSION__\"),T_CONST, \"199909L\", -1);\n       else\n #endif\n-\tinstall (NAME(\"__STDC_VERSION__\"),T_CONST, \"199409L\", -1);\n+\tcpp_install (pfile, NAME(\"__STDC_VERSION__\"),T_CONST, \"199409L\", -1);\n     }\n #undef NAME\n "}, {"sha": "26536e91a8e737f4dd06943f98ac6cf0e7c3f5ec", "filename": "gcc/cpplib.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/122ae89b144a0eaf31107f871f26ead27df8daad/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/122ae89b144a0eaf31107f871f26ead27df8daad/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=122ae89b144a0eaf31107f871f26ead27df8daad", "patch": "@@ -657,8 +657,8 @@ do_define (pfile, keyword)\n \t that for this new definition now.  */\n       if (CPP_OPTIONS (pfile)->debug_output && keyword)\n \tpass_thru_directive (macro, end, pfile, keyword);\n-      install (mdef.symnam, mdef.symlen, T_MACRO,\n-\t       (char *) mdef.defn, hashcode);\n+      cpp_install (pfile, mdef.symnam, mdef.symlen, T_MACRO,\n+\t\t   (char *) mdef.defn, hashcode);\n     }\n \n   return 0;\n@@ -2845,7 +2845,7 @@ do_assert (pfile, keyword)\n \n   base = cpp_lookup (pfile, sym, baselen, -1);\n   if (! base)\n-    base = install (sym, baselen, T_ASSERT, 0, -1);\n+    base = cpp_install (pfile, sym, baselen, T_ASSERT, 0, -1);\n   else if (base->type != T_ASSERT)\n   {\n     /* Token clash - but with what?! */\n@@ -2854,8 +2854,8 @@ do_assert (pfile, keyword)\n     goto error;\n   }\n \n-  this = install (sym, thislen, T_ASSERT,\n-\t\t  (char *)base->value.aschain, -1);\n+  this = cpp_install (pfile, sym, thislen, T_ASSERT,\n+\t\t      (char *)base->value.aschain, -1);\n   base->value.aschain = this;\n   \n   pfile->limit = sym; /* Pop */"}, {"sha": "9ce146364ea138ff83d9a56d9f0dc022faff1e38", "filename": "gcc/cpplib.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/122ae89b144a0eaf31107f871f26ead27df8daad/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/122ae89b144a0eaf31107f871f26ead27df8daad/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=122ae89b144a0eaf31107f871f26ead27df8daad", "patch": "@@ -181,6 +181,10 @@ struct cpp_reader\n   /* Current depth of buffer stack. */\n   int buffer_stack_depth;\n \n+  /* Hash table of macros and assertions.  See cpphash.c */\n+#define HASHSIZE 1403\n+  struct hashnode **hashtab;\n+  \n   /* Hash table of other included files.  See cppfiles.c */\n #define ALL_INCLUDE_HASHSIZE 71\n   struct include_hash *all_include_files[ALL_INCLUDE_HASHSIZE];\n@@ -245,10 +249,6 @@ struct cpp_reader\n \n   /* Number of bytes since the last newline.  */\n   int deps_column;\n-\n-#ifdef __cplusplus\n-  ~cpp_reader () { cpp_cleanup (this); }\n-#endif\n };\n \n #define CPP_FATAL_LIMIT 1000"}]}