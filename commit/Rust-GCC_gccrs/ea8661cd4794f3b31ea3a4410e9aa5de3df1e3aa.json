{"sha": "ea8661cd4794f3b31ea3a4410e9aa5de3df1e3aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE4NjYxY2Q0Nzk0ZjNiMzFlYTNhNDQxMGU5YWE1ZGUzZGYxZTNhYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-09-13T17:10:39Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-09-13T17:10:39Z"}, "message": "re PR c++/77553 (wrong code with post-increment operator in constexpr)\n\n\tPR c++/77553\n\t* constexpr.c (cxx_fold_pointer_plus_expression): New function.\n\t(cxx_eval_binary_expression): Use it for POINTER_PLUS_EXPR.\n\t(cxx_eval_pointer_plus_expression): Remove.\n\t(cxx_eval_constant_expression) <case POINTER_PLUS_EXPR>: Don't\n\tcall cxx_eval_pointer_plus_expression.\n\n\t* g++.dg/cpp1y/constexpr-77553.C: New test.\n\nFrom-SVN: r240119", "tree": {"sha": "dfb4f23dd508e41b13086ef84b698a9c55f80f64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfb4f23dd508e41b13086ef84b698a9c55f80f64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea8661cd4794f3b31ea3a4410e9aa5de3df1e3aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea8661cd4794f3b31ea3a4410e9aa5de3df1e3aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea8661cd4794f3b31ea3a4410e9aa5de3df1e3aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea8661cd4794f3b31ea3a4410e9aa5de3df1e3aa/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "072eee8f22b99e2362ccdc3930fbfc61e1800b63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/072eee8f22b99e2362ccdc3930fbfc61e1800b63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/072eee8f22b99e2362ccdc3930fbfc61e1800b63"}], "stats": {"total": 172, "additions": 103, "deletions": 69}, "files": [{"sha": "a8407fdaa753a123b764d23865b1b8d611217914", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea8661cd4794f3b31ea3a4410e9aa5de3df1e3aa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea8661cd4794f3b31ea3a4410e9aa5de3df1e3aa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ea8661cd4794f3b31ea3a4410e9aa5de3df1e3aa", "patch": "@@ -1,3 +1,12 @@\n+2016-09-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/77553\n+\t* constexpr.c (cxx_fold_pointer_plus_expression): New function.\n+\t(cxx_eval_binary_expression): Use it for POINTER_PLUS_EXPR.\n+\t(cxx_eval_pointer_plus_expression): Remove.\n+\t(cxx_eval_constant_expression) <case POINTER_PLUS_EXPR>: Don't\n+\tcall cxx_eval_pointer_plus_expression.\n+\n 2016-09-13  David Malcolm  <dmalcolm@redhat.com>\n \n \t* parser.c (cp_parser_class_specifier_1): Update for renaming of"}, {"sha": "34806d6749a960d816344aa894ae2d1d138a5a3c", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 60, "deletions": 69, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea8661cd4794f3b31ea3a4410e9aa5de3df1e3aa/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea8661cd4794f3b31ea3a4410e9aa5de3df1e3aa/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=ea8661cd4794f3b31ea3a4410e9aa5de3df1e3aa", "patch": "@@ -1813,6 +1813,63 @@ cxx_eval_unary_expression (const constexpr_ctx *ctx, tree t,\n   return r;\n }\n \n+/* Helper function for cxx_eval_binary_expression.  Try to optimize\n+   original POINTER_PLUS_EXPR T, LHS p+ RHS, return NULL_TREE if the\n+   generic folding should be used.  */\n+\n+static tree\n+cxx_fold_pointer_plus_expression (const constexpr_ctx *ctx, tree t,\n+\t\t\t\t  tree lhs, tree rhs, bool *non_constant_p,\n+\t\t\t\t  bool *overflow_p)\n+{\n+  STRIP_NOPS (lhs);\n+  if (TREE_CODE (lhs) != ADDR_EXPR)\n+    return NULL_TREE;\n+\n+  lhs = TREE_OPERAND (lhs, 0);\n+\n+  /* &A[i] p+ j => &A[i + j] */\n+  if (TREE_CODE (lhs) == ARRAY_REF\n+      && TREE_CODE (TREE_OPERAND (lhs, 1)) == INTEGER_CST\n+      && TREE_CODE (rhs) == INTEGER_CST\n+      && TYPE_SIZE_UNIT (TREE_TYPE (lhs))\n+      && TREE_CODE (TYPE_SIZE_UNIT (TREE_TYPE (lhs))) == INTEGER_CST)\n+    {\n+      tree orig_type = TREE_TYPE (t);\n+      location_t loc = EXPR_LOCATION (t);\n+      tree type = TREE_TYPE (lhs);\n+\n+      t = fold_convert_loc (loc, ssizetype, TREE_OPERAND (lhs, 1));\n+      tree nelts = array_type_nelts_top (TREE_TYPE (TREE_OPERAND (lhs, 0)));\n+      nelts = cxx_eval_constant_expression (ctx, nelts, false, non_constant_p,\n+\t\t\t\t\t    overflow_p);\n+      if (*non_constant_p)\n+\treturn NULL_TREE;\n+      /* Don't fold an out-of-bound access.  */\n+      if (!tree_int_cst_le (t, nelts))\n+\treturn NULL_TREE;\n+      rhs = cp_fold_convert (ssizetype, rhs);\n+      /* Don't fold if rhs can't be divided exactly by TYPE_SIZE_UNIT.\n+\t constexpr int A[1]; ... (char *)&A[0] + 1 */\n+      if (!integer_zerop (fold_build2_loc (loc, TRUNC_MOD_EXPR, sizetype,\n+\t\t\t\t\t   rhs, TYPE_SIZE_UNIT (type))))\n+\treturn NULL_TREE;\n+      /* Make sure to treat the second operand of POINTER_PLUS_EXPR\n+\t as signed.  */\n+      rhs = fold_build2_loc (loc, EXACT_DIV_EXPR, ssizetype, rhs,\n+\t\t\t     TYPE_SIZE_UNIT (type));\n+      t = size_binop_loc (loc, PLUS_EXPR, rhs, t);\n+      t = build4_loc (loc, ARRAY_REF, type, TREE_OPERAND (lhs, 0),\n+\t\t      t, NULL_TREE, NULL_TREE);\n+      t = cp_build_addr_expr (t, tf_warning_or_error);\n+      t = cp_fold_convert (orig_type, t);\n+      return cxx_eval_constant_expression (ctx, t, /*lval*/false,\n+\t\t\t\t\t   non_constant_p, overflow_p);\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Subroutine of cxx_eval_constant_expression.\n    Like cxx_eval_unary_expression, except for binary expressions.  */\n \n@@ -1865,6 +1922,9 @@ cxx_eval_binary_expression (const constexpr_ctx *ctx, tree t,\n \terror (\"arithmetic involving a null pointer in %qE\", lhs);\n       return t;\n     }\n+  else if (code == POINTER_PLUS_EXPR)\n+    r = cxx_fold_pointer_plus_expression (ctx, t, lhs, rhs, non_constant_p,\n+\t\t\t\t\t  overflow_p);\n \n   if (r == NULL_TREE)\n     r = fold_binary_loc (loc, code, type, lhs, rhs);\n@@ -3579,69 +3639,6 @@ cxx_eval_switch_expr (const constexpr_ctx *ctx, tree t,\n   return NULL_TREE;\n }\n \n-/* Subroutine of cxx_eval_constant_expression.\n-   Attempt to reduce a POINTER_PLUS_EXPR expression T.  */\n-\n-static tree\n-cxx_eval_pointer_plus_expression (const constexpr_ctx *ctx, tree t,\n-\t\t\t\t  bool lval, bool *non_constant_p,\n-\t\t\t\t  bool *overflow_p)\n-{\n-  tree orig_type = TREE_TYPE (t);\n-  tree op00 = TREE_OPERAND (t, 0);\n-  tree op01 = TREE_OPERAND (t, 1);\n-  location_t loc = EXPR_LOCATION (t);\n-\n-  op00 = cxx_eval_constant_expression (ctx, op00, lval,\n-\t\t\t\t       non_constant_p, overflow_p);\n-\n-  STRIP_NOPS (op00);\n-  if (TREE_CODE (op00) != ADDR_EXPR)\n-    return NULL_TREE;\n-\n-  op01 = cxx_eval_constant_expression (ctx, op01, lval,\n-\t\t\t\t       non_constant_p, overflow_p);\n-  op00 = TREE_OPERAND (op00, 0);\n-\n-  /* &A[i] p+ j => &A[i + j] */\n-  if (TREE_CODE (op00) == ARRAY_REF\n-      && TREE_CODE (TREE_OPERAND (op00, 1)) == INTEGER_CST\n-      && TREE_CODE (op01) == INTEGER_CST\n-      && TYPE_SIZE_UNIT (TREE_TYPE (op00))\n-      && TREE_CODE (TYPE_SIZE_UNIT (TREE_TYPE (op00))) == INTEGER_CST)\n-    {\n-      tree type = TREE_TYPE (op00);\n-      t = fold_convert_loc (loc, ssizetype, TREE_OPERAND (op00, 1));\n-      tree nelts = array_type_nelts_top (TREE_TYPE (TREE_OPERAND (op00, 0)));\n-      nelts = cxx_eval_constant_expression (ctx, nelts, false, non_constant_p,\n-\t\t\t\t\t    overflow_p);\n-      if (*non_constant_p)\n-\treturn NULL_TREE;\n-      /* Don't fold an out-of-bound access.  */\n-      if (!tree_int_cst_le (t, nelts))\n-\treturn NULL_TREE;\n-      op01 = cp_fold_convert (ssizetype, op01);\n-      /* Don't fold if op01 can't be divided exactly by TYPE_SIZE_UNIT.\n-\t constexpr int A[1]; ... (char *)&A[0] + 1 */\n-      if (!integer_zerop (fold_build2_loc (loc, TRUNC_MOD_EXPR, sizetype,\n-\t\t\t\t\t   op01, TYPE_SIZE_UNIT (type))))\n-\treturn NULL_TREE;\n-      /* Make sure to treat the second operand of POINTER_PLUS_EXPR\n-\t as signed.  */\n-      op01 = fold_build2_loc (loc, EXACT_DIV_EXPR, ssizetype, op01,\n-\t\t\t      TYPE_SIZE_UNIT (type));\n-      t = size_binop_loc (loc, PLUS_EXPR, op01, t);\n-      t = build4_loc (loc, ARRAY_REF, type, TREE_OPERAND (op00, 0),\n-\t\t      t, NULL_TREE, NULL_TREE);\n-      t = cp_build_addr_expr (t, tf_warning_or_error);\n-      t = cp_fold_convert (orig_type, t);\n-      return cxx_eval_constant_expression (ctx, t, lval, non_constant_p,\n-\t\t\t\t\t   overflow_p);\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n /* Attempt to reduce the expression T to a constant value.\n    On failure, issue diagnostic and return error_mark_node.  */\n /* FIXME unify with c_fully_fold */\n@@ -3984,12 +3981,6 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n       break;\n \n     case POINTER_PLUS_EXPR:\n-      r = cxx_eval_pointer_plus_expression (ctx, t, lval, non_constant_p,\n-\t\t\t\t\t    overflow_p);\n-      if (r)\n-\tbreak;\n-      /* fall through */\n-\n     case PLUS_EXPR:\n     case MINUS_EXPR:\n     case MULT_EXPR:"}, {"sha": "64ce0ce8e6f57d6a03a09fec63ed63e88de984f6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea8661cd4794f3b31ea3a4410e9aa5de3df1e3aa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea8661cd4794f3b31ea3a4410e9aa5de3df1e3aa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ea8661cd4794f3b31ea3a4410e9aa5de3df1e3aa", "patch": "@@ -1,3 +1,8 @@\n+2016-09-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/77553\n+\t* g++.dg/cpp1y/constexpr-77553.C: New test.\n+\n 2016-09-13  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/plugin/diagnostic_plugin_test_show_locus.c"}, {"sha": "b924b3830dd8c26e30cbda8a6ec9b79c42722c4d", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-77553.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea8661cd4794f3b31ea3a4410e9aa5de3df1e3aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-77553.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea8661cd4794f3b31ea3a4410e9aa5de3df1e3aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-77553.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-77553.C?ref=ea8661cd4794f3b31ea3a4410e9aa5de3df1e3aa", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/77553\n+// { dg-do compile { target c++14 } }\n+\n+constexpr void\n+bar (int *x)\n+{\n+  int i = 0;\n+  x[i++] = 1;\n+  x[3] = i;\n+}\n+\n+constexpr int\n+foo ()\n+{\n+  int a[] = { 0, 0, 0, 0 };\n+  bar (a);\n+\n+  return a[0] + 8 * a[1] + 64 * a[2] + 512 * a[3];\n+}\n+\n+constexpr int b = foo ();\n+\n+int\n+main ()\n+{\n+  static_assert (b == 513, \"\");\n+  if (foo () != 513)\n+    __builtin_abort ();\n+}"}]}