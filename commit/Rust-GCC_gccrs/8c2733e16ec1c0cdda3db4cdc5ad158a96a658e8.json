{"sha": "8c2733e16ec1c0cdda3db4cdc5ad158a96a658e8", "node_id": "C_kwDOANBUbNoAKDhjMjczM2UxNmVjMWMwY2RkYTNkYjRjZGM1YWQxNThhOTZhNjU4ZTg", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-06-15T09:27:31Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-06-15T11:15:11Z"}, "message": "tree-optimization/105971 - less surprising refs_may_alias_p_2\n\nWhen DSE asks whether __real a is using __imag a it gets a surprising\nresult when a is a FUNCTION_DECL.  The following makes sure this case\nis less surprising to callers but keeping the bail-out for the\nnon-decl case where it is true that PTA doesn't track aliases to code\ncorrectly.\n\n2022-06-15  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/105971\n\t* tree-ssa-alias.cc (refs_may_alias_p_2): Put bail-out for\n\tFUNCTION_DECL and LABEL_DECL refs after decl-decl disambiguation\n\tto leak less surprising alias results.\n\n\t* gcc.dg/torture/pr106971.c: New testcase.", "tree": {"sha": "89f4994f3979b631a0717a5766d87d18dfe8fc07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89f4994f3979b631a0717a5766d87d18dfe8fc07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c2733e16ec1c0cdda3db4cdc5ad158a96a658e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c2733e16ec1c0cdda3db4cdc5ad158a96a658e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c2733e16ec1c0cdda3db4cdc5ad158a96a658e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c2733e16ec1c0cdda3db4cdc5ad158a96a658e8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edb9330c29fe8a0a0b76df6fafd6a223a4d0e41f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edb9330c29fe8a0a0b76df6fafd6a223a4d0e41f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edb9330c29fe8a0a0b76df6fafd6a223a4d0e41f"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "33f21056e6274afe4263d2b93cc018c3a4770246", "filename": "gcc/testsuite/gcc.dg/torture/pr106971.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2733e16ec1c0cdda3db4cdc5ad158a96a658e8/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr106971.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2733e16ec1c0cdda3db4cdc5ad158a96a658e8/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr106971.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr106971.c?ref=8c2733e16ec1c0cdda3db4cdc5ad158a96a658e8", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+\n+void a()\n+{\n+  int b;\n+  int c;\n+  int d = (__INTPTR_TYPE__)a;\n+  _Complex float *e = (_Complex float *)a;\n+  for (;;) {\n+    (*e += d) / b ?: 0;\n+  }\n+}"}, {"sha": "b1e7a2d5afc0053450d82c3a4de29e1e1f794002", "filename": "gcc/tree-ssa-alias.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2733e16ec1c0cdda3db4cdc5ad158a96a658e8/gcc%2Ftree-ssa-alias.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2733e16ec1c0cdda3db4cdc5ad158a96a658e8/gcc%2Ftree-ssa-alias.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.cc?ref=8c2733e16ec1c0cdda3db4cdc5ad158a96a658e8", "patch": "@@ -2397,15 +2397,6 @@ refs_may_alias_p_2 (ao_ref *ref1, ao_ref *ref2, bool tbaa_p)\n       || CONSTANT_CLASS_P (base2))\n     return false;\n \n-  /* We can end up referring to code via function and label decls.\n-     As we likely do not properly track code aliases conservatively\n-     bail out.  */\n-  if (TREE_CODE (base1) == FUNCTION_DECL\n-      || TREE_CODE (base1) == LABEL_DECL\n-      || TREE_CODE (base2) == FUNCTION_DECL\n-      || TREE_CODE (base2) == LABEL_DECL)\n-    return true;\n-\n   /* Two volatile accesses always conflict.  */\n   if (ref1->volatile_p\n       && ref2->volatile_p)\n@@ -2432,6 +2423,15 @@ refs_may_alias_p_2 (ao_ref *ref1, ao_ref *ref2, bool tbaa_p)\n \t\t\t\t  ref2ref, base2, offset2, max_size2,\n \t\t\t\t  ref2->size);\n \n+  /* We can end up referring to code via function and label decls.\n+     As we likely do not properly track code aliases conservatively\n+     bail out.  */\n+  if (TREE_CODE (base1) == FUNCTION_DECL\n+      || TREE_CODE (base1) == LABEL_DECL\n+      || TREE_CODE (base2) == FUNCTION_DECL\n+      || TREE_CODE (base2) == LABEL_DECL)\n+    return true;\n+\n   /* Handle restrict based accesses.\n      ???  ao_ref_base strips inner MEM_REF [&decl], recover from that\n      here.  */"}]}