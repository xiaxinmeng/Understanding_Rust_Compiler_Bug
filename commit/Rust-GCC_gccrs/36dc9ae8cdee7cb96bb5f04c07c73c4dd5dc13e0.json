{"sha": "36dc9ae8cdee7cb96bb5f04c07c73c4dd5dc13e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZkYzlhZThjZGVlN2NiOTZiYjVmMDRjMDdjNzNjNGRkNWRjMTNlMA==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-05-07T20:08:23Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-05-07T20:08:23Z"}, "message": "re PR target/60884 ([SH] improve inlined strlen-like builtin functions)\n\ngcc/\n\tPR target/60884\n\t* config/sh/sh-mem.cc (sh_expand_strlen): Use loop when emitting\n\tunrolled byte insns.  Emit address increments after move insns.\n\ngcc/testsuite/\n\tPR target/60884\n\t* gcc.target/sh/pr53976-1.c (test_02): Remove inappropriate test case.\n\t(test_03): Rename to test_02.\n\nFrom-SVN: r210187", "tree": {"sha": "b890d505b7aa4e51f44300ca2288196c2d5ea43f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b890d505b7aa4e51f44300ca2288196c2d5ea43f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36dc9ae8cdee7cb96bb5f04c07c73c4dd5dc13e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36dc9ae8cdee7cb96bb5f04c07c73c4dd5dc13e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36dc9ae8cdee7cb96bb5f04c07c73c4dd5dc13e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36dc9ae8cdee7cb96bb5f04c07c73c4dd5dc13e0/comments", "author": null, "committer": null, "parents": [{"sha": "9bbf45f692c7f45b0bdbeffb6eb837790433e676", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bbf45f692c7f45b0bdbeffb6eb837790433e676", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bbf45f692c7f45b0bdbeffb6eb837790433e676"}], "stats": {"total": 56, "additions": 23, "deletions": 33}, "files": [{"sha": "2dde4fb1b66c48bd03d52ddf2dc6e64405659303", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36dc9ae8cdee7cb96bb5f04c07c73c4dd5dc13e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36dc9ae8cdee7cb96bb5f04c07c73c4dd5dc13e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36dc9ae8cdee7cb96bb5f04c07c73c4dd5dc13e0", "patch": "@@ -1,3 +1,9 @@\n+2014-05-07  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/60884\n+\t* config/sh/sh-mem.cc (sh_expand_strlen): Use loop when emitting\n+\tunrolled byte insns.  Emit address increments after move insns.\n+\n 2014-05-07  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gimple.h (gimple_builtin_call_types_compatible_p): Accept a"}, {"sha": "d3110f2351f31d13647abec231ec364ec5f4a4fb", "filename": "gcc/config/sh/sh-mem.cc", "status": "modified", "additions": 10, "deletions": 25, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36dc9ae8cdee7cb96bb5f04c07c73c4dd5dc13e0/gcc%2Fconfig%2Fsh%2Fsh-mem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36dc9ae8cdee7cb96bb5f04c07c73c4dd5dc13e0/gcc%2Fconfig%2Fsh%2Fsh-mem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-mem.cc?ref=36dc9ae8cdee7cb96bb5f04c07c73c4dd5dc13e0", "patch": "@@ -568,7 +568,7 @@ sh_expand_strlen (rtx *operands)\n \n   addr1 = adjust_automodify_address (addr1, SImode, current_addr, 0);\n \n-  /*start long loop.  */\n+  /* start long loop.  */\n   emit_label (L_loop_long);\n \n   /* tmp1 is aligned, OK to load.  */\n@@ -589,29 +589,15 @@ sh_expand_strlen (rtx *operands)\n   addr1 = adjust_address (addr1, QImode, 0);\n \n   /* unroll remaining bytes.  */\n-  emit_insn (gen_extendqisi2 (tmp1, addr1));\n-  emit_insn (gen_cmpeqsi_t (tmp1, const0_rtx));\n-  jump = emit_jump_insn (gen_branch_true (L_return));\n-  add_int_reg_note (jump, REG_BR_PROB, prob_likely);\n-\n-  emit_move_insn (current_addr, plus_constant (Pmode, current_addr, 1));\n-\n-  emit_insn (gen_extendqisi2 (tmp1, addr1));\n-  emit_insn (gen_cmpeqsi_t (tmp1, const0_rtx));\n-  jump = emit_jump_insn (gen_branch_true (L_return));\n-  add_int_reg_note (jump, REG_BR_PROB, prob_likely);\n-\n-  emit_move_insn (current_addr, plus_constant (Pmode, current_addr, 1));\n-\n-  emit_insn (gen_extendqisi2 (tmp1, addr1));\n-  emit_insn (gen_cmpeqsi_t (tmp1, const0_rtx));\n-  jump = emit_jump_insn (gen_branch_true (L_return));\n-  add_int_reg_note (jump, REG_BR_PROB, prob_likely);\n-\n-  emit_move_insn (current_addr, plus_constant (Pmode, current_addr, 1));\n+  for (int i = 0; i < 4; ++i)\n+    {\n+      emit_insn (gen_extendqisi2 (tmp1, addr1));\n+      emit_move_insn (current_addr, plus_constant (Pmode, current_addr, 1));\n+      emit_insn (gen_cmpeqsi_t (tmp1, const0_rtx));\n+      jump = emit_jump_insn (gen_branch_true (L_return));\n+      add_int_reg_note (jump, REG_BR_PROB, prob_likely);\n+    }\n \n-  emit_insn (gen_extendqisi2 (tmp1, addr1));\n-  jump = emit_jump_insn (gen_jump_compact (L_return));\n   emit_barrier_after (jump);\n \n   /* start byte loop.  */\n@@ -626,10 +612,9 @@ sh_expand_strlen (rtx *operands)\n \n   /* end loop.  */\n \n-  emit_insn (gen_addsi3 (start_addr, start_addr, GEN_INT (1)));\n-\n   emit_label (L_return);\n \n+  emit_insn (gen_addsi3 (start_addr, start_addr, GEN_INT (1)));\n   emit_insn (gen_subsi3 (operands[0], current_addr, start_addr));\n \n   return true;"}, {"sha": "123a02f0378ceeb791cf790f4b5a0354d99505c5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36dc9ae8cdee7cb96bb5f04c07c73c4dd5dc13e0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36dc9ae8cdee7cb96bb5f04c07c73c4dd5dc13e0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=36dc9ae8cdee7cb96bb5f04c07c73c4dd5dc13e0", "patch": "@@ -1,3 +1,9 @@\n+2014-05-07  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/60884\n+\t* gcc.target/sh/pr53976-1.c (test_02): Remove inappropriate test case.\n+\t(test_03): Rename to test_02.\n+\n 2014-05-07  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/61083"}, {"sha": "68f8cdcc430746fad07477ad9b27bfff63023514", "filename": "gcc/testsuite/gcc.target/sh/pr53976-1.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36dc9ae8cdee7cb96bb5f04c07c73c4dd5dc13e0/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53976-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36dc9ae8cdee7cb96bb5f04c07c73c4dd5dc13e0/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53976-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53976-1.c?ref=36dc9ae8cdee7cb96bb5f04c07c73c4dd5dc13e0", "patch": "@@ -24,14 +24,7 @@ test_01 (long long a, long long b)\n }\n \n int\n-test_02 (const char* a)\n-{\n-  /* Must not see a sett after the inlined strlen.  */\n-  return __builtin_strlen (a);\n-}\n-\n-int\n-test_03 (int a, int b, int c, int d)\n+test_02 (int a, int b, int c, int d)\n {\n   /* One of the blocks should have a sett and the other one should not.  */\n   if (d > 4)"}]}