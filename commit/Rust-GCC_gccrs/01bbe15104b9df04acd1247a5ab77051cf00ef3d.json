{"sha": "01bbe15104b9df04acd1247a5ab77051cf00ef3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFiYmUxNTEwNGI5ZGYwNGFjZDEyNDdhNWFiNzcwNTFjZjAwZWYzZA==", "commit": {"author": {"name": "Chris Jefferson", "email": "chris@bubblescope.net", "date": "2009-09-01T10:19:11Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-09-01T10:19:11Z"}, "message": "testsuite_rvalref.h: Remove obsolete macro using _GLIBCXX_TESTSUITE_ALLOW_RVALREF_ALIASING.\n\n2009-09-01  Chris Jefferson  <chris@bubblescope.net>\n\t    Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* testsuite/util/testsuite_rvalref.h: Remove obsolete macro using\n\t_GLIBCXX_TESTSUITE_ALLOW_RVALREF_ALIASING.\n\t* testsuite/20_util/specialized_algorithms/uninitialized_copy_n/\n\tmove_iterators/1.cc: Adjust, do not define\n\t_GLIBCXX_TESTSUITE_ALLOW_RVALREF_ALIASING.\n\t* testsuite/20_util/specialized_algorithms/uninitialized_copy/\n\tmove_iterators/1.cc: Likewise.\n\t* testsuite/25_algorithms/copy_n/move_iterators/1.cc: Likewise.\n\t* testsuite/25_algorithms/move/1.cc: Likewise.\n\t* testsuite/25_algorithms/move_backward/1.cc: Likewise.\n\t* testsuite/25_algorithms/copy_backward/move_iterators/1.cc: Likewise.\n\t* testsuite/25_algorithms/copy/move_iterators/1.cc: Likewise.\n\t* testsuite/25_algorithms/heap/moveable.cc: Likewise.\n\t* testsuite/25_algorithms/partial_sort/moveable.cc: Likewise; add\n\ttest for predicated test.\n\t* testsuite/25_algorithms/sort/moveable.cc: Likewise.\n\t* testsuite/25_algorithms/nth_element/moveable.cc: Add test\n\tfor predicated version.\n\t* testsuite/25_algorithms/unique/moveable.cc: Likewise.\n\n\t* testsuite/25_algorithms/inplace_merge/1.cc (S::operator<): Fix,\n\tenable test2 and test3.\n\n\t* testsuite/util/testsuite_iterators.h (operator=): Fix invalid\n\tmoving bug in C++0x mode.\n\n\t* testsuite/25_algorithms/random_shuffle/moveable.cc: New.\n\t* testsuite/25_algorithms/prev_permutation/moveable.cc: Likewise.\n\t* testsuite/25_algorithms/next_permutation/moveable.cc: Likewise.\n\t* testsuite/25_algorithms/heap/moveable2.cc: Likewise.\n\nCo-Authored-By: Paolo Carlini <paolo.carlini@oracle.com>\n\nFrom-SVN: r151264", "tree": {"sha": "94b59d8e20cee214d016964ddbd2856ce6dad80e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94b59d8e20cee214d016964ddbd2856ce6dad80e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01bbe15104b9df04acd1247a5ab77051cf00ef3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01bbe15104b9df04acd1247a5ab77051cf00ef3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01bbe15104b9df04acd1247a5ab77051cf00ef3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01bbe15104b9df04acd1247a5ab77051cf00ef3d/comments", "author": {"login": "ChrisJefferson", "id": 811527, "node_id": "MDQ6VXNlcjgxMTUyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/811527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisJefferson", "html_url": "https://github.com/ChrisJefferson", "followers_url": "https://api.github.com/users/ChrisJefferson/followers", "following_url": "https://api.github.com/users/ChrisJefferson/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisJefferson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisJefferson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisJefferson/subscriptions", "organizations_url": "https://api.github.com/users/ChrisJefferson/orgs", "repos_url": "https://api.github.com/users/ChrisJefferson/repos", "events_url": "https://api.github.com/users/ChrisJefferson/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisJefferson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "437926c09e3a6425c7b02a6ddd47e731d82a0047", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/437926c09e3a6425c7b02a6ddd47e731d82a0047", "html_url": "https://github.com/Rust-GCC/gccrs/commit/437926c09e3a6425c7b02a6ddd47e731d82a0047"}], "stats": {"total": 741, "additions": 676, "deletions": 65}, "files": [{"sha": "5d9031ed817da649964cc349709ce59eca2ef74e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=01bbe15104b9df04acd1247a5ab77051cf00ef3d", "patch": "@@ -1,3 +1,37 @@\n+2009-09-01  Chris Jefferson  <chris@bubblescope.net>\n+\t    Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* testsuite/util/testsuite_rvalref.h: Remove obsolete macro using\n+\t_GLIBCXX_TESTSUITE_ALLOW_RVALREF_ALIASING.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_copy_n/\n+\tmove_iterators/1.cc: Adjust, do not define\n+\t_GLIBCXX_TESTSUITE_ALLOW_RVALREF_ALIASING.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_copy/\n+\tmove_iterators/1.cc: Likewise.\n+\t* testsuite/25_algorithms/copy_n/move_iterators/1.cc: Likewise.\n+\t* testsuite/25_algorithms/move/1.cc: Likewise.\n+\t* testsuite/25_algorithms/move_backward/1.cc: Likewise.\n+\t* testsuite/25_algorithms/copy_backward/move_iterators/1.cc: Likewise.\n+\t* testsuite/25_algorithms/copy/move_iterators/1.cc: Likewise.\n+\t* testsuite/25_algorithms/heap/moveable.cc: Likewise.\n+\t* testsuite/25_algorithms/partial_sort/moveable.cc: Likewise; add\n+\ttest for predicated test.\n+\t* testsuite/25_algorithms/sort/moveable.cc: Likewise.\n+\t* testsuite/25_algorithms/nth_element/moveable.cc: Add test\n+\tfor predicated version.\n+\t* testsuite/25_algorithms/unique/moveable.cc: Likewise.\n+\n+\t* testsuite/25_algorithms/inplace_merge/1.cc (S::operator<): Fix,\n+\tenable test2 and test3.\n+\n+\t* testsuite/util/testsuite_iterators.h (operator=): Fix invalid\n+\tmoving bug in C++0x mode.\n+\n+\t* testsuite/25_algorithms/random_shuffle/moveable.cc: New.\n+\t* testsuite/25_algorithms/prev_permutation/moveable.cc: Likewise.\n+\t* testsuite/25_algorithms/next_permutation/moveable.cc: Likewise.\n+\t* testsuite/25_algorithms/heap/moveable2.cc: Likewise.\n+\n 2009-08-31  Uros Bizjak  <ubizjak@gmail.com>\n \t    Kaz Kojima  <kkojima@gcc.gnu.org>\n "}, {"sha": "5d1ba942d544da27b914b0757eb90a150efdfa68", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_copy/move_iterators/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy%2Fmove_iterators%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy%2Fmove_iterators%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy%2Fmove_iterators%2F1.cc?ref=01bbe15104b9df04acd1247a5ab77051cf00ef3d", "patch": "@@ -18,7 +18,6 @@\n // <http://www.gnu.org/licenses/>.\n \n #undef _GLIBCXX_CONCEPT_CHECKS\n-#define  _GLIBCXX_TESTSUITE_ALLOW_RVALREF_ALIASING\n \n #include <algorithm>\n #include <iterator>"}, {"sha": "fc11a74eba92777ecc6e9b33f2110bf8bc1bc84d", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_copy_n/move_iterators/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy_n%2Fmove_iterators%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy_n%2Fmove_iterators%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy_n%2Fmove_iterators%2F1.cc?ref=01bbe15104b9df04acd1247a5ab77051cf00ef3d", "patch": "@@ -20,7 +20,6 @@\n // <http://www.gnu.org/licenses/>.\n \n #undef _GLIBCXX_CONCEPT_CHECKS\n-#define  _GLIBCXX_TESTSUITE_ALLOW_RVALREF_ALIASING\n \n #include <algorithm>\n #include <iterator>"}, {"sha": "e07c4920cd2232a6291096e9553efe871dec6da2", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/move_iterators/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fmove_iterators%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fmove_iterators%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fmove_iterators%2F1.cc?ref=01bbe15104b9df04acd1247a5ab77051cf00ef3d", "patch": "@@ -18,7 +18,6 @@\n // <http://www.gnu.org/licenses/>.\n \n #undef _GLIBCXX_CONCEPT_CHECKS\n-#define  _GLIBCXX_TESTSUITE_ALLOW_RVALREF_ALIASING\n \n #include <algorithm>\n #include <iterator>"}, {"sha": "aaf50064f1679e46b261bdb070ebb233a3c89b74", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_backward/move_iterators/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fmove_iterators%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fmove_iterators%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fmove_iterators%2F1.cc?ref=01bbe15104b9df04acd1247a5ab77051cf00ef3d", "patch": "@@ -18,7 +18,6 @@\n // <http://www.gnu.org/licenses/>.\n \n #undef _GLIBCXX_CONCEPT_CHECKS\n-#define  _GLIBCXX_TESTSUITE_ALLOW_RVALREF_ALIASING\n \n #include <algorithm>\n #include <iterator>"}, {"sha": "6c22ba672ac04ab3f0910281f0367bf49682907b", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_n/move_iterators/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2Fmove_iterators%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2Fmove_iterators%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2Fmove_iterators%2F1.cc?ref=01bbe15104b9df04acd1247a5ab77051cf00ef3d", "patch": "@@ -20,7 +20,6 @@\n // <http://www.gnu.org/licenses/>.\n \n #undef _GLIBCXX_CONCEPT_CHECKS\n-#define  _GLIBCXX_TESTSUITE_ALLOW_RVALREF_ALIASING\n \n #include <algorithm>\n #include <iterator>"}, {"sha": "0a6965916828969cfa339707d972b9b73841feb3", "filename": "libstdc++-v3/testsuite/25_algorithms/heap/moveable.cc", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fmoveable.cc?ref=01bbe15104b9df04acd1247a5ab77051cf00ef3d", "patch": "@@ -22,7 +22,6 @@\n // 25.3.6 Heap operations [lib.alg.heap.operations]\n \n #undef _GLIBCXX_CONCEPT_CHECKS\n-#define  _GLIBCXX_TESTSUITE_ALLOW_RVALREF_ALIASING\n \n #include <algorithm>\n #include <testsuite_hooks.h>\n@@ -40,11 +39,11 @@ using __gnu_test::rvalstruct;\n typedef test_container<rvalstruct, random_access_iterator_wrapper> container;\n typedef test_container<int, random_access_iterator_wrapper> container_ref;\n \n-bool test __attribute__((unused)) = true;\n-\n void \n check_make(int* array, int length)\n {\n+  bool test __attribute__((unused)) = true;\n+\n   rvalstruct makeheap[9];\n   int        makeheap_ref[9];\n   std::copy(array, array + length, makeheap);\n@@ -63,6 +62,8 @@ check_make(int* array, int length)\n void\n check_pop(int* array, int length)\n {\n+  bool test __attribute__((unused)) = true;\n+\n   rvalstruct popheap[9];\n   int        popheap_ref[9];\n   std::copy(array, array + length, popheap);\n@@ -81,6 +82,8 @@ check_pop(int* array, int length)\n void\n check_sort(int* array, int length)\n {\n+  bool test __attribute__((unused)) = true;\n+\n   rvalstruct sortheap[9];\n   int        sortheap_ref[9];\n   std::copy(array, array + length, sortheap);\n@@ -99,6 +102,8 @@ check_sort(int* array, int length)\n void\n check_push(int* array, int pushval, int length)\n {\n+  bool test __attribute__((unused)) = true;\n+\n   rvalstruct pushheap[10];\n   int        pushheap_ref[10];\n   std::copy(array, array + length, pushheap);"}, {"sha": "86eefbee63ca60d7443b8b37f4a979d9ac84f948", "filename": "libstdc++-v3/testsuite/25_algorithms/heap/moveable2.cc", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fmoveable2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fmoveable2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fmoveable2.cc?ref=01bbe15104b9df04acd1247a5ab77051cf00ef3d", "patch": "@@ -0,0 +1,157 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++0x -DITERATIONS=5\" { target simulator } }\n+\n+// 25.3.6 Heap operations [lib.alg.heap.operations]\n+\n+#undef _GLIBCXX_CONCEPT_CHECKS\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+#include <testsuite_rvalref.h>\n+\n+#ifndef ITERATIONS\n+#define ITERATIONS 9\n+#endif\n+\n+using __gnu_test::test_container;\n+using __gnu_test::random_access_iterator_wrapper;\n+using __gnu_test::rvalstruct;\n+\n+typedef test_container<rvalstruct, random_access_iterator_wrapper> container;\n+typedef test_container<int, random_access_iterator_wrapper> container_ref;\n+\n+bool are_ordered(const rvalstruct& lhs, const rvalstruct& rhs)\n+{ return lhs < rhs; }\n+\n+bool are_ordered_int(const int& lhs, const int& rhs)\n+{ return lhs < rhs; }\n+\n+void \n+check_make(int* array, int length)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  rvalstruct makeheap[9];\n+  int        makeheap_ref[9];\n+  std::copy(array, array + length, makeheap);\n+  std::copy(array, array + length, makeheap_ref);  \n+  container makecon(makeheap, makeheap + length);\n+  container_ref makecon_ref(makeheap_ref, makeheap_ref + length);\n+  std::make_heap(makecon.begin(), makecon.end(), are_ordered);\n+  std::make_heap(makecon_ref.begin(), makecon_ref.end(), are_ordered_int);\n+  for (int z = 0; z < length; ++z)\n+    VERIFY( makeheap[z] == makeheap_ref[z] );\n+  VERIFY( std::__is_heap(makecon.begin(), makecon.end(), are_ordered) );\n+  for (int z = 0; z < length; ++z)\n+    VERIFY( makeheap[z].valid );\n+}\n+\n+void\n+check_pop(int* array, int length)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  rvalstruct popheap[9];\n+  int        popheap_ref[9];\n+  std::copy(array, array + length, popheap);\n+  std::copy(array, array + length, popheap_ref);\n+  container popcon(popheap, popheap + length);\n+  container_ref popcon_ref(popheap_ref, popheap_ref + length);\n+  std::pop_heap(popcon.begin(), popcon.end(), are_ordered);\n+  std::pop_heap(popcon_ref.begin(), popcon_ref.end(), are_ordered_int);\n+  for (int z = 0; z < length; ++z)\n+    VERIFY( popheap[z] == popheap_ref[z] );\n+  VERIFY( (std::__is_heap(popheap, popheap + length - 1), are_ordered) );\n+  for (int z = 0; z < length; ++z)\n+    VERIFY( popheap[z].val <= popheap[length-1].val && popheap[z].valid );\n+}\n+\n+void\n+check_sort(int* array, int length)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  rvalstruct sortheap[9];\n+  int        sortheap_ref[9];\n+  std::copy(array, array + length, sortheap);\n+  std::copy(array, array + length, sortheap_ref);\n+  container sortcon(sortheap, sortheap + length);\n+  container_ref sortcon_ref(sortheap_ref, sortheap_ref + length);\n+  std::sort_heap(sortcon.begin(), sortcon.end(), are_ordered);\n+  std::sort_heap(sortcon_ref.begin(), sortcon_ref.end(), are_ordered_int);\n+  for (int z = 0; z < length; ++z)\n+    VERIFY( sortheap[z] == sortheap_ref[z] );\n+  for (int z = 0; z < length - 1; ++z)\n+    VERIFY( sortheap[z].val <= sortheap[z + 1].val && sortheap[z].valid );\n+  VERIFY( sortheap[length - 1].valid );\n+}\n+\n+void\n+check_push(int* array, int pushval, int length)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  rvalstruct pushheap[10];\n+  int        pushheap_ref[10];\n+  std::copy(array, array + length, pushheap);\n+  std::copy(array, array + length, pushheap_ref);  \n+  pushheap[length] = pushval;\n+  pushheap_ref[length] = pushval;\n+  container pushcon(pushheap, pushheap + length + 1);\n+  container_ref pushcon_ref(pushheap_ref, pushheap_ref + length + 1);\n+  std::push_heap(pushcon.begin(), pushcon.end(), are_ordered);\n+  std::push_heap(pushcon_ref.begin(), pushcon_ref.end(), are_ordered_int);\n+  for (int z = 0; z < length + 1; ++z)\n+    VERIFY( pushheap[z] == pushheap_ref[z] );\n+  VERIFY( std::__is_heap(pushheap, pushheap + length + 1) );\n+  for (int z = 0; z < length + 1; ++z)\n+    VERIFY( pushheap[z].valid );\n+}\n+\n+void\n+test01()\n+{\n+  int array[9];\n+  for (int i = 1; i < ITERATIONS; ++i)\n+    {\n+      for(int z = 0; z < i; ++z)\n+\tarray[z] = z;\n+      while (std::next_permutation(array, array + i))\n+\t{\n+\t  check_make(array, i);\n+\t  if (std::__is_heap(array, array + i, are_ordered_int))\n+\t    {\n+\t      check_pop(array, i);\n+\t      check_sort(array, i);\n+\t      for (int pushval = -1; pushval <= i; ++pushval)\n+\t\tcheck_push(array, pushval, i);\n+\t    }\n+\t}\n+    }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "d4da753b6dd7ebc81dd90a21b5a3534274b1caf9", "filename": "libstdc++-v3/testsuite/25_algorithms/inplace_merge/1.cc", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2F1.cc?ref=01bbe15104b9df04acd1247a5ab77051cf00ef3d", "patch": "@@ -27,11 +27,10 @@ using std::inplace_merge;\n \n typedef test_container<int, bidirectional_iterator_wrapper> container;\n \n-\n void \n test1()\n {\n-  int array[]={1};\n+  int array[] = { 1 };\n   container con1(array, array);\n   inplace_merge(con1.begin(), con1.end(), con1.end());\n   container con2(array, array + 1);\n@@ -42,11 +41,13 @@ test1()\n void \n test2()\n {\n-  int array[]={0,2,4,1,3,5};\n+  bool test __attribute__((unused)) = true;\n+\n+  int array[] = { 0, 2, 4, 1, 3, 5 };\n   container con(array, array + 6);\n   inplace_merge(con.begin(), con.it(3), con.end());\n-  VERIFY(array[0] == 0 && array[1] == 1 && array[2] == 2 &&\n-\t array[3] == 3 && array[4] == 4 && array[5] == 5);\n+  VERIFY( array[0] == 0 && array[1] == 1 && array[2] == 2\n+\t  && array[3] == 3 && array[4] == 4 && array[5] == 5 );\n }\n \n struct S\n@@ -57,12 +58,14 @@ struct S\n   S() { }\n   bool \n   operator<(const S& _s) const \n-  { return _s.a < a; }\n+  { return a < _s.a; }\n };\n \n void \n test3()\n {\n+  bool test __attribute__((unused)) = true;\n+\n   S s[4];\n   s[0].a = 0;\n   s[1].a = 1;\n@@ -73,11 +76,14 @@ test3()\n   s[2].b = 1;\n   s[3].b = 1;\n   inplace_merge(s, s + 2, s + 4);\n-  VERIFY(s[0].b == 0 && s[1].b == 1 && s[2].b == 0 && s[3].b == 1);\n+  VERIFY( s[0].b == 0 && s[1].b == 1 && s[2].b == 0 && s[3].b == 1 );\n }\n \n int \n main()\n {\n   test1();\n+  test2();\n+  test3();\n+  return 0;\n }"}, {"sha": "b577cfa5d6d8731cfc4cad263167300b020af680", "filename": "libstdc++-v3/testsuite/25_algorithms/move/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2F1.cc?ref=01bbe15104b9df04acd1247a5ab77051cf00ef3d", "patch": "@@ -18,7 +18,6 @@\n // <http://www.gnu.org/licenses/>.\n \n #undef _GLIBCXX_CONCEPT_CHECKS\n-#define  _GLIBCXX_TESTSUITE_ALLOW_RVALREF_ALIASING\n \n #include <algorithm>\n #include <testsuite_hooks.h>"}, {"sha": "436ccb031240f4485ed66d7d04c35356bb5a9615", "filename": "libstdc++-v3/testsuite/25_algorithms/move_backward/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove_backward%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove_backward%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove_backward%2F1.cc?ref=01bbe15104b9df04acd1247a5ab77051cf00ef3d", "patch": "@@ -18,7 +18,6 @@\n // <http://www.gnu.org/licenses/>.\n \n #undef _GLIBCXX_CONCEPT_CHECKS\n-#define  _GLIBCXX_TESTSUITE_ALLOW_RVALREF_ALIASING\n \n #include <algorithm>\n #include <testsuite_hooks.h>"}, {"sha": "d754f6b3c287f03de263e1ede6d8a51cdb895e86", "filename": "libstdc++-v3/testsuite/25_algorithms/next_permutation/moveable.cc", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnext_permutation%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnext_permutation%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnext_permutation%2Fmoveable.cc?ref=01bbe15104b9df04acd1247a5ab77051cf00ef3d", "patch": "@@ -0,0 +1,121 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 25.3.9 [lib.alg.permutation.generators]\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+#include <testsuite_rvalref.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::bidirectional_iterator_wrapper;\n+using __gnu_test::rvalstruct;\n+using std::next_permutation;\n+\n+typedef test_container<rvalstruct, bidirectional_iterator_wrapper> Container;\n+\n+void\n+test1()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  // Note: The standard is unclear on what should happen in this case.\n+  // This seems the only really sensible behaviour, and what is done.\n+  rvalstruct array[] = {0};\n+  Container con(array, array);\n+  VERIFY( !next_permutation(con.begin(), con.end()) );\n+}\n+\n+void\n+test2()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  rvalstruct array[] = {0};\n+  Container con(array, array + 1);\n+  VERIFY( !next_permutation(con.begin(), con.end()) );\n+}\n+\n+void\n+test3()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  rvalstruct array[] = {0, 3};\n+  Container con(array, array + 2);\n+  VERIFY( next_permutation(con.begin(), con.end()) );\n+  VERIFY( array[0] == 3 && array[1] == 0 );\n+  VERIFY( !next_permutation(con.begin(), con.end()) );\n+  VERIFY( array[0] == 0 && array[1] == 3 );\n+}\n+\n+void\n+test4()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  int array[6] = {0, 1, 2, 3, 4, 5};\n+  for(int i = 0 ; i < 719; ++i)\n+    {\n+      rvalstruct temp_array[6];\n+      std::copy(array, array + 6, temp_array);\n+      Container con(temp_array, temp_array + 6);\n+      VERIFY( next_permutation(array, array + 6) );\n+      VERIFY( std::lexicographical_compare(temp_array, temp_array + 6, \n+\t\t\t\t\t   array, array + 6) );\n+    }\n+  VERIFY( !next_permutation(array,array + 6) );\n+  for(int i = 0; i < 6; ++i)\n+    VERIFY( array[i] == i );\n+}\n+\n+bool\n+are_ordered(const rvalstruct& lhs, const rvalstruct& rhs)\n+{ return lhs < rhs; }\n+\n+void\n+test5()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  int array[6] = {0, 1, 2, 3, 4, 5};\n+  for(int i = 0 ; i < 719; ++i)\n+    {\n+      rvalstruct temp_array[6];\n+      std::copy(array, array + 6, temp_array);\n+      Container con(temp_array, temp_array + 6);\n+      VERIFY( next_permutation(array, array + 6, are_ordered) );\n+      VERIFY( std::lexicographical_compare(temp_array, temp_array + 6,\n+\t\t\t\t\t   array, array + 6, are_ordered) );\n+    }\n+  VERIFY( !next_permutation(array,array + 6, are_ordered) );\n+  for(int i = 0; i < 6; ++i)\n+    VERIFY( array[i] == i );\n+}\n+\n+int main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+  test4();\n+  test5();\n+  return 0;\n+}"}, {"sha": "93a514fa8bc2d4de22885b42cb745af3d3b1ff7a", "filename": "libstdc++-v3/testsuite/25_algorithms/nth_element/moveable.cc", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2Fmoveable.cc?ref=01bbe15104b9df04acd1247a5ab77051cf00ef3d", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2005, 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,39 +36,66 @@ typedef test_container<rvalstruct, random_access_iterator_wrapper> Container;\n void \n test1()\n {\n+  bool test __attribute__((unused)) = true;\n+\n   int intarray[] = {6, 5, 4, 3, 2, 1, 0};\n   rvalstruct array[7];\n   std::copy(intarray, intarray + 7, array);\n   Container con(array, array + 7);\n   nth_element(con.begin(), con.it(3), con.end());\n   for(int i = 0; i < 3; ++i)\n-    VERIFY(array[i].val < 3);\n+    VERIFY( array[i].val < 3 );\n   for(int i = 4; i < 7; ++i)\n-    VERIFY(array[i].val > 3);\n+    VERIFY( array[i].val > 3 );\n   for(int i = 0; i < 7; ++i)\n-    VERIFY(array[i].valid);\n+    VERIFY( array[i].valid );\n }\n \n void \n test2()\n {\n+  bool test __attribute__((unused)) = true;\n+\n   int intarray[] = {0, 6, 1, 5, 2, 4, 3};\n   rvalstruct array[7];\n   std::copy(intarray, intarray + 7, array);\n   Container con(array,array + 7);\n   nth_element(con.begin(), con.it(3), con.end());\n   for(int i = 0; i < 3; ++i)\n-    VERIFY(array[i].val < 3);\n+    VERIFY( array[i].val < 3 );\n+  for(int i = 4; i < 7; ++i)\n+    VERIFY( array[i].val > 3 );\n+  for(int i = 0; i < 7; ++i)\n+    VERIFY( array[i].valid );  \n+}\n+\n+bool\n+are_less(const rvalstruct& lhs, const rvalstruct& rhs)\n+{ return lhs < rhs; }\n+\n+void \n+test3()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  int intarray[] = {0, 6, 1, 5, 2, 4, 3};\n+  rvalstruct array[7];\n+  std::copy(intarray, intarray + 7, array);\n+  Container con(array,array + 7);\n+  nth_element(con.begin(), con.it(3), con.end(), are_less);\n+  for(int i = 0; i < 3; ++i)\n+    VERIFY( array[i].val < 3 );\n   for(int i = 4; i < 7; ++i)\n-    VERIFY(array[i].val > 3);\n+    VERIFY( array[i].val > 3 );\n   for(int i = 0; i < 7; ++i)\n-    VERIFY(array[i].valid);  \n+    VERIFY( array[i].valid );  \n }\n \n int \n main()\n {\n   test1();\n   test2();\n+  test3();\n   return 0;\n }"}, {"sha": "fcad384dcdf0c83763ce4bab502518a4e06ca8f4", "filename": "libstdc++-v3/testsuite/25_algorithms/partial_sort/moveable.cc", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2Fmoveable.cc?ref=01bbe15104b9df04acd1247a5ab77051cf00ef3d", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2005, 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,7 +20,6 @@\n // 25.3.1.3 [lib.partial.sort]\n \n #undef _GLIBCXX_CONCEPT_CHECKS\n-#define _GLIBCXX_TESTSUITE_ALLOW_RVALREF_ALIASING\n \n #include <algorithm>\n #include <testsuite_hooks.h>\n@@ -37,32 +36,56 @@ typedef test_container<rvalstruct, random_access_iterator_wrapper> Container;\n void \n test1()\n {\n+  bool test __attribute__((unused)) = true;\n+\n   int intarray[] = {6, 5, 4, 3, 2, 1, 0};\n   rvalstruct array[7];\n   std::copy(intarray, intarray + 7, array);\n   Container con(array, array + 7);\n   partial_sort(con.begin(), con.it(3), con.end());\n-  VERIFY(array[0].val == 0 && array[1].val == 1 && array[2].val == 2);\n+  VERIFY( array[0].val == 0 && array[1].val == 1 && array[2].val == 2 );\n   for(int i = 0; i < 7; ++i)\n-    VERIFY(array[i].valid);\n+    VERIFY( array[i].valid );\n }\n \n void \n test2()\n {\n+  bool test __attribute__((unused)) = true;\n+\n   int intarray[] = {0, 6, 1, 5, 2, 4, 3};\n   rvalstruct array[7];\n   std::copy(intarray, intarray + 7, array);\n   Container con(array,array + 7);\n   partial_sort(con.begin(), con.it(3), con.end());\n-  VERIFY(array[0].val == 0 && array[1].val == 1 && array[2].val == 2);\n+  VERIFY( array[0].val == 0 && array[1].val == 1 && array[2].val == 2 );\n+  for(int i = 0; i < 7; ++i)\n+    VERIFY( array[i].valid );\n+}\n+\n+bool are_less(const rvalstruct& lhs, const rvalstruct& rhs)\n+{ return lhs < rhs; }\n+\n+void \n+test3()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  int intarray[] = {0, 6, 1, 5, 2, 4, 3};\n+  rvalstruct array[7];\n+  std::copy(intarray, intarray + 7, array);\n+  Container con(array,array + 7);\n+  partial_sort(con.begin(), con.it(3), con.end(), are_less);\n+  VERIFY( array[0].val == 0 && array[1].val == 1 && array[2].val == 2 );\n   for(int i = 0; i < 7; ++i)\n-    VERIFY(array[i].valid);\n+    VERIFY( array[i].valid );\n }\n \n int \n main()\n {\n   test1();\n   test2();\n+  test3();\n+  return 0;\n }"}, {"sha": "796c5df1b3c797b2fd5312d6d0590c398f674e44", "filename": "libstdc++-v3/testsuite/25_algorithms/prev_permutation/moveable.cc", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fprev_permutation%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fprev_permutation%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fprev_permutation%2Fmoveable.cc?ref=01bbe15104b9df04acd1247a5ab77051cf00ef3d", "patch": "@@ -0,0 +1,121 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 25.3.9 [lib.alg.permutation.generators]\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+#include <testsuite_rvalref.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::bidirectional_iterator_wrapper;\n+using __gnu_test::rvalstruct;\n+using std::prev_permutation;\n+\n+typedef test_container<rvalstruct, bidirectional_iterator_wrapper> Container;\n+\n+void\n+test1()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  // Note: The standard is unclear on what should happen in this case.\n+  // This seems the only really sensible behaviour, and what is done.\n+  rvalstruct array[] = {0};\n+  Container con(array, array);\n+  VERIFY( !prev_permutation(con.begin(), con.end()) );\n+}\n+\n+void\n+test2()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  rvalstruct array[] = {0};\n+  Container con(array, array + 1);\n+  VERIFY( !prev_permutation(con.begin(), con.end()) );\n+}\n+\n+void\n+test3()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  rvalstruct array[] = {3, 0};\n+  Container con(array, array + 2);\n+  VERIFY( prev_permutation(con.begin(), con.end()) );\n+  VERIFY( array[0] == 0 && array[1] == 3 );\n+  VERIFY( !prev_permutation(con.begin(), con.end()) );\n+  VERIFY( array[0] == 3 && array[1] == 0 );\n+}\n+\n+void\n+test4()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  int array[6] = {5, 4, 3, 2, 1, 0};\n+  for(int i = 0 ; i < 719; ++i)\n+    {\n+      rvalstruct temp_array[6];\n+      std::copy(array, array + 6, temp_array);\n+      Container con(temp_array, temp_array + 6);\n+      VERIFY( prev_permutation(array, array + 6) );\n+      VERIFY( !std::lexicographical_compare(temp_array, temp_array + 6, \n+\t\t\t\t\t    array, array + 6) );\n+    }\n+  VERIFY( !prev_permutation(array,array + 6)) ;\n+  for(int i = 0; i < 6; ++i)\n+    VERIFY( array[i] == (5 - i) );\n+}\n+\n+bool\n+are_ordered(const rvalstruct& lhs, const rvalstruct& rhs)\n+{ return lhs < rhs; }\n+\n+void\n+test5()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  int array[6] = {5, 4, 3, 2, 1, 0};\n+  for(int i = 0 ; i < 719; ++i)\n+    {\n+      rvalstruct temp_array[6];\n+      std::copy(array, array + 6, temp_array);\n+      Container con(temp_array, temp_array + 6);\n+      VERIFY( prev_permutation(array, array + 6, are_ordered) );\n+      VERIFY( !std::lexicographical_compare(temp_array, temp_array + 6, \n+\t\t\t\t\t    array, array + 6, are_ordered) );\n+    }\n+  VERIFY( !prev_permutation(array,array + 6, are_ordered) );\n+  for(int i = 0; i < 6; ++i)\n+    VERIFY( array[i] == (5 - i) );\n+}\n+\n+int main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+  test4();\n+  test5();\n+  return 0;\n+}"}, {"sha": "6a44bb8c8c407a2a81586dd613fb3c67bb75e0f1", "filename": "libstdc++-v3/testsuite/25_algorithms/random_shuffle/moveable.cc", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frandom_shuffle%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frandom_shuffle%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frandom_shuffle%2Fmoveable.cc?ref=01bbe15104b9df04acd1247a5ab77051cf00ef3d", "patch": "@@ -0,0 +1,85 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 25.2.11 random_shuffle()\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+#include <testsuite_rvalref.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::random_access_iterator_wrapper;\n+using __gnu_test::rvalstruct;\n+\n+typedef test_container<rvalstruct, random_access_iterator_wrapper> Container;\n+\n+const int N = 200000;\n+int A[N];\n+\n+void fill_ascending()\n+{\n+  for (int i = 0; i < N; ++i)\n+    A[i] = i;\n+}\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  fill_ascending();\n+  rvalstruct rv[N];\n+  std::copy(A, A + N, rv);\n+  Container con(rv, rv + N);\n+  std::random_shuffle(con.begin(), con.end());\n+\n+  // The chance that random_shuffle leaves the order as is by coincidence\n+  // is negligible, so we expect it to be permuted\n+  VERIFY( !std::equal(rv, rv + N, A) );\n+\n+  std::sort(con.begin(), con.end());\n+  VERIFY( std::equal(rv, rv + N, A) );\n+}\n+\n+int random_generator(int)\n+{ return 0; }\n+\n+void\n+test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  fill_ascending();\n+  rvalstruct rv[10] = {1,2,3,4,5,6,7,8,9,10};\n+  int result[10] = {10,1,2,3,4,5,6,7,8,9};\n+  Container con(rv, rv + 10);\n+  std::random_shuffle(con.begin(), con.end(), random_generator);\n+  // The above answer was generated by hand. It is not required by the standard,\n+  // but is produced by the current algorithm.\n+  VERIFY( std::equal(rv, rv + 10, result) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "6972d16681dfc0e7aa7038903c81784dce267a77", "filename": "libstdc++-v3/testsuite/25_algorithms/sort/moveable.cc", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2Fmoveable.cc?ref=01bbe15104b9df04acd1247a5ab77051cf00ef3d", "patch": "@@ -1,7 +1,6 @@\n-// { dg-require-rvalref \"\" }\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2005, 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -21,43 +20,60 @@\n // 25.3.1 algorithms, sort()\n \n #undef _GLIBCXX_CONCEPT_CHECKS\n-#define _GLIBCXX_TESTSUITE_ALLOW_RVALREF_ALIASING\n \n #include <algorithm>\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n #include <testsuite_rvalref.h>\n \n-bool test __attribute__((unused)) = true;\n-\n using __gnu_test::test_container;\n using __gnu_test::random_access_iterator_wrapper;\n using __gnu_test::rvalstruct;\n using std::partial_sort;\n \n typedef test_container<rvalstruct, random_access_iterator_wrapper> Container;\n \n-\n const int A[] = {10, 20, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, \n-\t\t\t17, 8, 18, 9, 19};\n+\t\t 17, 8, 18, 9, 19};\n const int N = sizeof(A) / sizeof(int);\n \n // 25.3.1.1 sort()\n void\n test01()\n {\n-    rvalstruct s1[N];\n-    std::copy(A, A + N, s1);\n-    Container con(s1, s1 + N);\n-    std::sort(con.begin(), con.end());\n-    VERIFY(s1[0].valid);\n-    for(int i = 1; i < N; ++i)\n-      VERIFY(s1[i].val>s1[i-1].val && s1[i].valid);\n+  bool test __attribute__((unused)) = true;\n+\n+  rvalstruct s1[N];\n+  std::copy(A, A + N, s1);\n+  Container con(s1, s1 + N);\n+  std::sort(con.begin(), con.end());\n+  VERIFY( s1[0].valid );\n+  for(int i = 1; i < N; ++i)\n+    VERIFY( s1[i].val>s1[i-1].val && s1[i].valid );\n+}\n+\n+bool order(const rvalstruct& lhs, const rvalstruct& rhs)\n+{ return lhs < rhs; }\n+\n+// 25.3.1.1 sort()\n+void\n+test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  rvalstruct s1[N];\n+  std::copy(A, A + N, s1);\n+  Container con(s1, s1 + N);\n+  std::sort(con.begin(), con.end(), order);\n+  VERIFY( s1[0].valid );\n+  for(int i = 1; i < N; ++i)\n+    VERIFY( s1[i].val>s1[i-1].val && s1[i].valid );\n }\n \n int\n main()\n {\n   test01();\n+  test02();\n   return 0;\n }"}, {"sha": "b5bf16dbb1f31073565e700d727836a081f0485e", "filename": "libstdc++-v3/testsuite/25_algorithms/unique/moveable.cc", "status": "modified", "additions": 38, "deletions": 5, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique%2Fmoveable.cc?ref=01bbe15104b9df04acd1247a5ab77051cf00ef3d", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2005, 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -54,19 +54,52 @@ void test01()\n \n   Container con(T1, T1 + N);\n \n-  VERIFY(std::unique(con.begin(), con.end()).ptr - T1 == 12);\n+  VERIFY( std::unique(con.begin(), con.end()).ptr - T1 == 12 );\n   for(int i = 0; i < 12; ++i)\n-    VERIFY(T1[i].val == A1[i]);\n+    VERIFY( T1[i].val == A1[i] );\n \n   Container con2(T2, T2 + N);\n-  VERIFY(std::unique(con2.begin(), con2.end()).ptr - T2 == 8);\n+  VERIFY( std::unique(con2.begin(), con2.end()).ptr - T2 == 8 );\n   for(int i = 0; i < 8; ++i)\n-    VERIFY(T2[i].val == B1[i]);\n+    VERIFY( T2[i].val == B1[i] );\n }\n \n+bool are_equal(const rvalstruct& rhs, const rvalstruct& lhs)\n+{ return rhs == lhs; }\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  int intarray1[] = {1, 4, 4, 6, 1, 2, 2, 3, 1, 6, 6, 6, 5, 7, 5, 4, 4};\n+  int intarray2[] = {1, 1, 1, 2, 2, 1, 1, 7, 6, 6, 7, 8, 8, 8, 8, 9, 9};\n+\n+  const int N = sizeof(intarray1) / sizeof(int);\n+\n+  rvalstruct T1[N];\n+  rvalstruct T2[N];\n+  \n+  std::copy(intarray1,intarray1 + N, T1);\n+  std::copy(intarray2,intarray2 + N, T2);\n+  \n+  const int A1[] = {1, 4, 6, 1, 2, 3, 1, 6, 5, 7, 5, 4};\n+  const int B1[] = {1, 2, 1, 7, 6, 7, 8, 9};\n+\n+  Container con(T1, T1 + N);\n+\n+  VERIFY( std::unique(con.begin(), con.end(), are_equal).ptr - T1 == 12 );\n+  for(int i = 0; i < 12; ++i)\n+    VERIFY( T1[i].val == A1[i] );\n+\n+  Container con2(T2, T2 + N);\n+  VERIFY( std::unique(con2.begin(), con2.end(), are_equal).ptr - T2 == 8 );\n+  for(int i = 0; i < 8; ++i)\n+    VERIFY( T2[i].val == B1[i] );\n+}\n \n int main()\n {\n   test01();\n+  test02();\n   return 0;\n }"}, {"sha": "14a725fcbec5a8f98184f42570acb07e58064c2f", "filename": "libstdc++-v3/testsuite/util/testsuite_iterators.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h?ref=01bbe15104b9df04acd1247a5ab77051cf00ef3d", "patch": "@@ -88,23 +88,23 @@ namespace __gnu_test\n \tptr(ptr_in), SharedInfo(SharedInfo_in)\n       { }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n       template<class U>\n       void\n-      operator=(const U& new_val)\n+      operator=(U&& new_val)\n       {\n \tITERATOR_VERIFY(SharedInfo->writtento[ptr - SharedInfo->first] == 0);\n \tSharedInfo->writtento[ptr - SharedInfo->first] = 1;\n-\t*ptr = new_val;\n+\t*ptr = std::forward<U>(new_val);\n       }\n-\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#else\n       template<class U>\n       void\n-      operator=(U&& new_val)\n+      operator=(const U& new_val)\n       {\n \tITERATOR_VERIFY(SharedInfo->writtento[ptr - SharedInfo->first] == 0);\n \tSharedInfo->writtento[ptr - SharedInfo->first] = 1;\n-\t*ptr = std::move(new_val);\n+\t*ptr = new_val;\n       }\n #endif\n     };"}, {"sha": "b44d6ddd12d5071fae46af8672d9bd81c99bb37c", "filename": "libstdc++-v3/testsuite/util/testsuite_rvalref.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_rvalref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01bbe15104b9df04acd1247a5ab77051cf00ef3d/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_rvalref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_rvalref.h?ref=01bbe15104b9df04acd1247a5ab77051cf00ef3d", "patch": "@@ -35,19 +35,9 @@ namespace __gnu_test\n     bool\n     operator=(const rvalstruct&);\n \n-// Normally we don't define a copy constructor, as any use of it would\n-// show an inefficency. In some cases we know it will be aliased away\n-// by the compiler, but it still insists it is defined, so we provide\n-// a way of making it public but not giving a body, so any usage would\n-// instead fail at link-time.\n-#ifdef _GLIBCXX_TESTSUITE_ALLOW_RVALREF_ALIASING\n-  public:\n-    rvalstruct(const rvalstruct&);\n-#else\n     rvalstruct(const rvalstruct&);\n \n   public:\n-#endif\n     int val;\n     bool valid;\n "}]}