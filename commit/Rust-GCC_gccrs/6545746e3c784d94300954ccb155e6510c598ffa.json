{"sha": "6545746e3c784d94300954ccb155e6510c598ffa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU0NTc0NmUzYzc4NGQ5NDMwMDk1NGNjYjE1NWU2NTEwYzU5OGZmYQ==", "commit": {"author": {"name": "Florian Weimer", "email": "fweimer@redhat.com", "date": "2014-05-09T12:23:46Z"}, "committer": {"name": "Florian Weimer", "email": "fw@gcc.gnu.org", "date": "2014-05-09T12:23:46Z"}, "message": "-fstack-protector-strong: Instrumentation for return slots\n\nThis patch fixes a loophole in the -fstack-protector-strong protection.\nIf a function call uses a return slot, the caller needs stack protector\ninstrumentation because the return slot is addressable. \n\ngcc/\n\n2014-05-09  Florian Weimer  <fweimer@redhat.com>\n\n\t* cfgexpand.c (stack_protect_decl_p): New function, extracted from\n\texpand_used_vars.\n\t(stack_protect_return_slot_p): New function.\n\t(expand_used_vars): Call stack_protect_decl_p and\n\tstack_protect_return_slot_p for -fstack-protector-strong.\n\ngcc/testsuite/\n\n2014-05-09  Florian Weimer  <fweimer@redhat.com>\n\n\t* gcc.dg/fstack-protector-strong.c: Add coverage for return slots.\n\t* g++.dg/fstack-protector-strong.C: Likewise.\n\t* gcc.target/i386/ssp-strong-reg.c: New file.\n\nFrom-SVN: r210275", "tree": {"sha": "6da35ec3f858b95d454e7bb32fb9dd5f8dc6c95c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6da35ec3f858b95d454e7bb32fb9dd5f8dc6c95c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6545746e3c784d94300954ccb155e6510c598ffa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6545746e3c784d94300954ccb155e6510c598ffa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6545746e3c784d94300954ccb155e6510c598ffa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6545746e3c784d94300954ccb155e6510c598ffa/comments", "author": {"login": "fweimer-rh", "id": 75532728, "node_id": "MDQ6VXNlcjc1NTMyNzI4", "avatar_url": "https://avatars.githubusercontent.com/u/75532728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fweimer-rh", "html_url": "https://github.com/fweimer-rh", "followers_url": "https://api.github.com/users/fweimer-rh/followers", "following_url": "https://api.github.com/users/fweimer-rh/following{/other_user}", "gists_url": "https://api.github.com/users/fweimer-rh/gists{/gist_id}", "starred_url": "https://api.github.com/users/fweimer-rh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fweimer-rh/subscriptions", "organizations_url": "https://api.github.com/users/fweimer-rh/orgs", "repos_url": "https://api.github.com/users/fweimer-rh/repos", "events_url": "https://api.github.com/users/fweimer-rh/events{/privacy}", "received_events_url": "https://api.github.com/users/fweimer-rh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b8d29c66597d6ff2a41ca6a190c0bd52126f491d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8d29c66597d6ff2a41ca6a190c0bd52126f491d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8d29c66597d6ff2a41ca6a190c0bd52126f491d"}], "stats": {"total": 167, "additions": 149, "deletions": 18}, "files": [{"sha": "6b508f7ec9ebd0072a11ed0756f636992c56b73f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6545746e3c784d94300954ccb155e6510c598ffa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6545746e3c784d94300954ccb155e6510c598ffa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6545746e3c784d94300954ccb155e6510c598ffa", "patch": "@@ -1,3 +1,11 @@\n+2014-05-09  Florian Weimer  <fweimer@redhat.com>\n+\n+\t* cfgexpand.c (stack_protect_decl_p): New function, extracted from\n+\texpand_used_vars.\n+\t(stack_protect_return_slot_p): New function.\n+\t(expand_used_vars): Call stack_protect_decl_p and\n+\tstack_protect_return_slot_p for -fstack-protector-strong.\n+\n 2014-05-06  Kenneth Zadeck  <zadeck@naturalbridge.com>\n \n \tPR middle-end/61111"}, {"sha": "934f40d0627b9aa7d429682ecdbdeee260a8d7ab", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 48, "deletions": 16, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6545746e3c784d94300954ccb155e6510c598ffa/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6545746e3c784d94300954ccb155e6510c598ffa/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=6545746e3c784d94300954ccb155e6510c598ffa", "patch": "@@ -1611,6 +1611,52 @@ record_or_union_type_has_array_p (const_tree tree_type)\n   return 0;\n }\n \n+/* Check if the current function has local referenced variables that\n+   have their addresses taken, contain an array, or are arrays.  */\n+\n+static bool\n+stack_protect_decl_p ()\n+{\n+  unsigned i;\n+  tree var;\n+\n+  FOR_EACH_LOCAL_DECL (cfun, i, var)\n+    if (!is_global_var (var))\n+      {\n+\ttree var_type = TREE_TYPE (var);\n+\tif (TREE_CODE (var) == VAR_DECL\n+\t    && (TREE_CODE (var_type) == ARRAY_TYPE\n+\t\t|| TREE_ADDRESSABLE (var)\n+\t\t|| (RECORD_OR_UNION_TYPE_P (var_type)\n+\t\t    && record_or_union_type_has_array_p (var_type))))\n+\t  return true;\n+      }\n+  return false;\n+}\n+\n+/* Check if the current function has calls that use a return slot.  */\n+\n+static bool\n+stack_protect_return_slot_p ()\n+{\n+  basic_block bb;\n+  \n+  FOR_ALL_BB_FN (bb, cfun)\n+    for (gimple_stmt_iterator gsi = gsi_start_bb (bb);\n+\t !gsi_end_p (gsi); gsi_next (&gsi))\n+      {\n+\tgimple stmt = gsi_stmt (gsi);\n+\t/* This assumes that calls to internal-only functions never\n+\t   use a return slot.  */\n+\tif (is_gimple_call (stmt)\n+\t    && !gimple_call_internal_p (stmt)\n+\t    && aggregate_value_p (TREE_TYPE (gimple_call_fntype (stmt)),\n+\t\t\t\t  gimple_call_fndecl (stmt)))\n+\t  return true;\n+      }\n+  return false;\n+}\n+\n /* Expand all variables used in the function.  */\n \n static rtx\n@@ -1683,22 +1729,8 @@ expand_used_vars (void)\n   pointer_map_destroy (ssa_name_decls);\n \n   if (flag_stack_protect == SPCT_FLAG_STRONG)\n-    FOR_EACH_LOCAL_DECL (cfun, i, var)\n-      if (!is_global_var (var))\n-\t{\n-\t  tree var_type = TREE_TYPE (var);\n-\t  /* Examine local referenced variables that have their addresses taken,\n-\t     contain an array, or are arrays.  */\n-\t  if (TREE_CODE (var) == VAR_DECL\n-\t      && (TREE_CODE (var_type) == ARRAY_TYPE\n-\t\t  || TREE_ADDRESSABLE (var)\n-\t\t  || (RECORD_OR_UNION_TYPE_P (var_type)\n-\t\t      && record_or_union_type_has_array_p (var_type))))\n-\t    {\n-\t      gen_stack_protect_signal = true;\n-\t      break;\n-\t    }\n-\t}\n+      gen_stack_protect_signal\n+\t= stack_protect_decl_p () || stack_protect_return_slot_p ();\n \n   /* At this point all variables on the local_decls with TREE_USED\n      set are not associated with any block scope.  Lay them out.  */"}, {"sha": "9092cba553e42a30d8a6db69527cb6326ca00375", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6545746e3c784d94300954ccb155e6510c598ffa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6545746e3c784d94300954ccb155e6510c598ffa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6545746e3c784d94300954ccb155e6510c598ffa", "patch": "@@ -1,3 +1,9 @@\n+2014-05-09  Florian Weimer  <fweimer@redhat.com>\n+\n+\t* gcc.dg/fstack-protector-strong.c: Add coverage for return slots.\n+\t* g++.dg/fstack-protector-strong.C: Likewise.\n+\t* gcc.target/i386/ssp-strong-reg.c: New file.\n+\n 2014-05-09  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/61055"}, {"sha": "5a820ed69d82b8da99ea797d8228e55da2fe1511", "filename": "gcc/testsuite/g++.dg/fstack-protector-strong.C", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6545746e3c784d94300954ccb155e6510c598ffa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ffstack-protector-strong.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6545746e3c784d94300954ccb155e6510c598ffa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ffstack-protector-strong.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ffstack-protector-strong.C?ref=6545746e3c784d94300954ccb155e6510c598ffa", "patch": "@@ -32,4 +32,52 @@ int foo2 ()\n   return global_func (a);\n }\n \n-/* { dg-final { scan-assembler-times \"stack_chk_fail\" 2 } } */\n+/* Frame addressed exposed through return slot. */\n+\n+struct B\n+{\n+  /* Discourage passing this struct in registers. */\n+  int a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;\n+  int method ();\n+  B return_slot();\n+};\n+\n+B global_func ();\n+void noop ();\n+\n+int foo3 ()\n+{\n+  return global_func ().a1;\n+}\n+\n+int foo4 ()\n+{\n+  try {\n+    noop ();\n+    return 0;\n+  } catch (...) {\n+    return global_func ().a1;\n+  }\n+}\n+\n+int foo5 ()\n+{\n+  try {\n+    return global_func ().a1;\n+  } catch (...) {\n+    return 0;\n+  }\n+}\n+\n+int foo6 ()\n+{\n+  B b;\n+  return b.method ();\n+}\n+\n+int foo7 (B *p)\n+{\n+  return p->return_slot ().a1;\n+}\n+\n+/* { dg-final { scan-assembler-times \"stack_chk_fail\" 7 } } */"}, {"sha": "da33abb3d7d5427ab35611f5e3e036a2b22926cc", "filename": "gcc/testsuite/gcc.dg/fstack-protector-strong.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6545746e3c784d94300954ccb155e6510c598ffa/gcc%2Ftestsuite%2Fgcc.dg%2Ffstack-protector-strong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6545746e3c784d94300954ccb155e6510c598ffa/gcc%2Ftestsuite%2Fgcc.dg%2Ffstack-protector-strong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffstack-protector-strong.c?ref=6545746e3c784d94300954ccb155e6510c598ffa", "patch": "@@ -131,4 +131,22 @@ foo10 ()\n   return bb.three;\n }\n \n-/* { dg-final { scan-assembler-times \"stack_chk_fail\" 10 } } */\n+struct B\n+{\n+  /* Discourage passing this struct in registers. */\n+  int a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;\n+};\n+\n+struct B global3 (void);\n+\n+int foo11 ()\n+{\n+  return global3 ().a1;\n+}\n+\n+void foo12 ()\n+{\n+  global3 ();\n+}\n+\n+/* { dg-final { scan-assembler-times \"stack_chk_fail\" 12 } } */"}, {"sha": "9fe56641b9ed692c9b71474e029b53e96c061947", "filename": "gcc/testsuite/gcc.target/i386/ssp-strong-reg.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6545746e3c784d94300954ccb155e6510c598ffa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fssp-strong-reg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6545746e3c784d94300954ccb155e6510c598ffa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fssp-strong-reg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fssp-strong-reg.c?ref=6545746e3c784d94300954ccb155e6510c598ffa", "patch": "@@ -0,0 +1,19 @@\n+/* Test that structs returned in registers do not lead to\n+   instrumentation with -fstack-protector-strong.  */\n+\n+/* { dg-do compile { target { ! { ia32 } } } } */\n+/* { dg-options \"-O2 -fstack-protector-strong\" } */\n+\n+struct S {\n+  int a;\n+  int b;\n+};\n+\n+struct S f (void);\n+\n+int g (void)\n+{\n+  return f ().a;\n+}\n+\n+/* { dg-final { scan-assembler-times \"stack_chk_fail\" 0 } } */"}]}