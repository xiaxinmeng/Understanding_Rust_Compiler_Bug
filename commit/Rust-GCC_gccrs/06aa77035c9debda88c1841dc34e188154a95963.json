{"sha": "06aa77035c9debda88c1841dc34e188154a95963", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZhYTc3MDM1YzlkZWJkYTg4YzE4NDFkYzM0ZTE4ODE1NGE5NTk2Mw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-07-27T20:05:28Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-07-27T20:13:32Z"}, "message": "common: Use strcmp to compare location file names\n\nThe logic to figure out where a missing #include should be inserted\nuses pointer equality to check filenames -- the routine even says so.\nBut cpplib makes no such guarantee.  It happens to be true for input\nthat it preprocesses[* see line zero below], but is not true for\nsource that has already been preprocessed -- all those '# ...' line\ndirectives produce disctinct filename strings.  That renders using\n-fdirectives-only as a prescanning stage (as I understand some people\ndo), broken.\n\nThis patch changes to string comparisons, and explicitly rejects any\nline-zero location map that occurs at the beginning of a file.  The\nvery first map of a file has a different string to the remaining maps,\nand we never tripped on that because of the pointer comparison.  The\nsecond testcase deploys -save-temps to cause an intermediate\npreprocessed output that is read back.\n\n\tgcc/c-family/\n\t* c-common.c (try_to_locate_new_include_insertion_point): Use\n\tstrcmp, not pointer equality.\n\tgcc/testsuite/\n\t* g++.dg/lookup/missing-std-include-10.h: New.\n\t* g++.dg/lookup/missing-std-include-10.C: New.\n\t* g++.dg/lookup/missing-std-include-11.C: New.", "tree": {"sha": "dac51aba497cbe52cc0602ebf2519886615791dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dac51aba497cbe52cc0602ebf2519886615791dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06aa77035c9debda88c1841dc34e188154a95963", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06aa77035c9debda88c1841dc34e188154a95963", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06aa77035c9debda88c1841dc34e188154a95963", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06aa77035c9debda88c1841dc34e188154a95963/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b95eba48a1a25284ce7385bbfa0ee733124cb84b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b95eba48a1a25284ce7385bbfa0ee733124cb84b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b95eba48a1a25284ce7385bbfa0ee733124cb84b"}], "stats": {"total": 98, "additions": 94, "deletions": 4}, "files": [{"sha": "116867a4513cfd2838f76a2eb6b9de8f6ea28238", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06aa77035c9debda88c1841dc34e188154a95963/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06aa77035c9debda88c1841dc34e188154a95963/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=06aa77035c9debda88c1841dc34e188154a95963", "patch": "@@ -8764,8 +8764,7 @@ c_family_tests (void)\n #endif /* #if CHECKING_P */\n \n /* Attempt to locate a suitable location within FILE for a\n-   #include directive to be inserted before.  FILE should\n-   be a string from libcpp (pointer equality is used).\n+   #include directive to be inserted before.  \n    LOC is the location of the relevant diagnostic.\n \n    Attempt to return the location within FILE immediately\n@@ -8800,13 +8799,17 @@ try_to_locate_new_include_insertion_point (const char *file, location_t loc)\n \n       if (const line_map_ordinary *from\n \t  = linemap_included_from_linemap (line_table, ord_map))\n-\tif (from->to_file == file)\n+\t/* We cannot use pointer equality, because with preprocessed\n+\t   input all filename strings are unique.  */\n+\tif (0 == strcmp (from->to_file, file))\n \t  {\n \t    last_include_ord_map = from;\n \t    last_ord_map_after_include = NULL;\n \t  }\n \n-      if (ord_map->to_file == file)\n+      /* Likewise, use strcmp, and reject any line-zero introductory\n+\t map.  */\n+      if (ord_map->to_line && 0 == strcmp (ord_map->to_file, file))\n \t{\n \t  if (!first_ord_map_in_file)\n \t    first_ord_map_in_file = ord_map;"}, {"sha": "9dfa78fb60e9704a247ca461431d6fb625bdd1b7", "filename": "gcc/testsuite/g++.dg/lookup/missing-std-include-10.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06aa77035c9debda88c1841dc34e188154a95963/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include-10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06aa77035c9debda88c1841dc34e188154a95963/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include-10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include-10.C?ref=06aa77035c9debda88c1841dc34e188154a95963", "patch": "@@ -0,0 +1,43 @@\n+// { dg-do compile }\n+// { dg-additional-options -fdiagnostics-show-caret }\n+// comment\n+\n+\n+\n+\n+\n+\n+// Intentional blank lines\n+\n+\n+\n+\n+\n+\n+\n+\n+#include \"missing-std-include-10.h\"\n+// HERE\n+\n+\n+\n+\n+\n+\n+// Intentional blank lines\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+int main ()\n+{\n+  return strcmp (\"\", \"\");\n+}\n+// { dg-additional-files \"missing-std-include-10.h\" }\n+// { dg-regexp {[^\\n]*: error: 'strcmp' was not declared in this scope\\n *return strcmp [^\\n]*;\\n *\\^~*\\n} }\n+// { dg-regexp {[^\\n]* note: 'strcmp' is defined in header[^\\n]*\\n #include \"missing-std-include-10.h\"\\n\\+#include <cstring>\\n // HERE\\n} }"}, {"sha": "40a8c178f10d9e85a2873c83247c3f2fe553f408", "filename": "gcc/testsuite/g++.dg/lookup/missing-std-include-10.h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06aa77035c9debda88c1841dc34e188154a95963/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include-10.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06aa77035c9debda88c1841dc34e188154a95963/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include-10.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include-10.h?ref=06aa77035c9debda88c1841dc34e188154a95963", "patch": "@@ -0,0 +1 @@\n+/* empty */"}, {"sha": "ec2c494c557780637f3e4b10955753bc8b143183", "filename": "gcc/testsuite/g++.dg/lookup/missing-std-include-11.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06aa77035c9debda88c1841dc34e188154a95963/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include-11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06aa77035c9debda88c1841dc34e188154a95963/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include-11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include-11.C?ref=06aa77035c9debda88c1841dc34e188154a95963", "patch": "@@ -0,0 +1,43 @@\n+// { dg-do compile }\n+// { dg-additional-options {-fdiagnostics-show-caret -save-temps} }\n+// comment  save-temps causes us to compile preprocessed output\n+\n+\n+\n+\n+\n+\n+// Intentional blank lines\n+\n+\n+\n+\n+\n+\n+\n+\n+#include \"missing-std-include-10.h\"\n+// HERE\n+\n+\n+\n+\n+\n+\n+// Intentional blank lines\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+int main ()\n+{\n+  return strcmp (\"\", \"\");\n+}\n+// { dg-additional-files \"missing-std-include-10.h\" }\n+// { dg-regexp {[^\\n]*: error: 'strcmp' was not declared in this scope\\n *return strcmp [^\\n]*;\\n *\\^~*\\n} }\n+// { dg-regexp {[^\\n]* note: 'strcmp' is defined in header[^\\n]*\\n #include \"missing-std-include-10.h\"\\n\\+#include <cstring>\\n // HERE\\n} }"}]}