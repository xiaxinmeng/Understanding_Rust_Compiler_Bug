{"sha": "d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM0ZDM2ZWYwZDg1Yzc0ODg0ZjhmOGIwYzgwZDg0NWQzZDFiYzA0Zg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-03-02T03:43:49Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-03-02T03:43:49Z"}, "message": "PR libstdc++/79789 fix non-reserved names in headers\n\n\tPR libstdc++/79789\n\t* include/bits/hashtable_policy.h (__clp2): Use reserved names for\n\tparameters and local variables.\n\t* include/bits/ios_base.h (make_error_code, make_error_condition):\n\tLikewise.\n\t* include/bits/list.tcc (list::sort): Likewise.\n\t* include/bits/mask_array.h (mask_array): Likewise.\n\t* include/bits/regex.h (regex_token_iterator): Likewise.\n\t* include/bits/slice_array.h (slice_array): Likewise.\n\t* include/bits/stl_algo.h (__sample): Likewise.\n\t* include/std/memory (undeclare_no_pointers): Likewise.\n\t* include/std/type_traits (is_callable_v, is_nothrow_callable_v):\n\tLikewise.\n\t* libsupc++/exception_ptr.h (__dest_thunk): Likewise.\n\t* testsuite/17_intro/headers/names.cc: New test.\n\nFrom-SVN: r245828", "tree": {"sha": "69e9081d4292ab46de3188a521dfa8e52e686b73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69e9081d4292ab46de3188a521dfa8e52e686b73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5782e3094161376c1679c2e5099445b09cf2bf75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5782e3094161376c1679c2e5099445b09cf2bf75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5782e3094161376c1679c2e5099445b09cf2bf75"}], "stats": {"total": 192, "additions": 155, "deletions": 37}, "files": [{"sha": "883cd9ad0cbe66779022f9e3c0a8d2789070cc2c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f", "patch": "@@ -1,5 +1,21 @@\n 2017-03-02  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/79789\n+\t* include/bits/hashtable_policy.h (__clp2): Use reserved names for\n+\tparameters and local variables.\n+\t* include/bits/ios_base.h (make_error_code, make_error_condition):\n+\tLikewise.\n+\t* include/bits/list.tcc (list::sort): Likewise.\n+\t* include/bits/mask_array.h (mask_array): Likewise.\n+\t* include/bits/regex.h (regex_token_iterator): Likewise.\n+\t* include/bits/slice_array.h (slice_array): Likewise.\n+\t* include/bits/stl_algo.h (__sample): Likewise.\n+\t* include/std/memory (undeclare_no_pointers): Likewise.\n+\t* include/std/type_traits (is_callable_v, is_nothrow_callable_v):\n+\tLikewise.\n+\t* libsupc++/exception_ptr.h (__dest_thunk): Likewise.\n+\t* testsuite/17_intro/headers/names.cc: New test.\n+\n \tPR libstdc++/79798\n \t* include/std/functional (bind::_Res_type_impl): Fix incorrect use of\n \tresult_of that loses top-level cv-qualifiers."}, {"sha": "8af8c498de2bd97b53151b1a1fb66a9716f44be1", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f", "patch": "@@ -521,24 +521,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// Compute closest power of 2.\n   _GLIBCXX14_CONSTEXPR\n   inline std::size_t\n-  __clp2(std::size_t n) noexcept\n+  __clp2(std::size_t __n) noexcept\n   {\n #if __SIZEOF_SIZE_T__ >= 8\n-    std::uint_fast64_t x = n;\n+    std::uint_fast64_t __x = __n;\n #else\n-    std::uint_fast32_t x = n;\n+    std::uint_fast32_t __x = __n;\n #endif\n     // Algorithm from Hacker's Delight, Figure 3-3.\n-    x = x - 1;\n-    x = x | (x >> 1);\n-    x = x | (x >> 2);\n-    x = x | (x >> 4);\n-    x = x | (x >> 8);\n-    x = x | (x >>16);\n+    __x = __x - 1;\n+    __x = __x | (__x >> 1);\n+    __x = __x | (__x >> 2);\n+    __x = __x | (__x >> 4);\n+    __x = __x | (__x >> 8);\n+    __x = __x | (__x >>16);\n #if __SIZEOF_SIZE_T__ >= 8\n-    x = x | (x >>32);\n+    __x = __x | (__x >>32);\n #endif\n-    return x + 1;\n+    return __x + 1;\n   }\n \n   /// Rehash policy providing power of 2 bucket numbers. Avoids modulo"}, {"sha": "f1ebfccaca51a98e99aa40ad92c10cc60b1a4589", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f", "patch": "@@ -207,12 +207,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   const error_category& iostream_category() noexcept;\n \n   inline error_code\n-  make_error_code(io_errc e) noexcept\n-  { return error_code(static_cast<int>(e), iostream_category()); }\n+  make_error_code(io_errc __e) noexcept\n+  { return error_code(static_cast<int>(__e), iostream_category()); }\n \n   inline error_condition\n-  make_error_condition(io_errc e) noexcept\n-  { return error_condition(static_cast<int>(e), iostream_category()); }\n+  make_error_condition(io_errc __e) noexcept\n+  { return error_condition(static_cast<int>(__e), iostream_category()); }\n #endif\n \n   // 27.4.2  Class ios_base"}, {"sha": "9623a139a70591077993110aed23203d62273f86", "filename": "libstdc++-v3/include/bits/list.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc?ref=d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f", "patch": "@@ -500,8 +500,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t__catch(...)\n \t  {\n \t    this->splice(this->end(), __carry);\n-\t    for (int i = 0; i < sizeof(__tmp)/sizeof(__tmp[0]); ++i)\n-\t      this->splice(this->end(), __tmp[i]);\n+\t    for (int __i = 0; __i < sizeof(__tmp)/sizeof(__tmp[0]); ++__i)\n+\t      this->splice(this->end(), __tmp[__i]);\n \t    __throw_exception_again;\n \t  }\n       }\n@@ -586,8 +586,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    __catch(...)\n \t      {\n \t\tthis->splice(this->end(), __carry);\n-\t\tfor (int i = 0; i < sizeof(__tmp)/sizeof(__tmp[0]); ++i)\n-\t\t  this->splice(this->end(), __tmp[i]);\n+\t\tfor (int __i = 0; __i < sizeof(__tmp)/sizeof(__tmp[0]); ++__i)\n+\t\t  this->splice(this->end(), __tmp[__i]);\n \t\t__throw_exception_again;\n \t      }\n \t  }"}, {"sha": "5c4fcc67635bf0253994a6c189da43b327e0c26c", "filename": "libstdc++-v3/include/bits/mask_array.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h?ref=d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f", "patch": "@@ -136,8 +136,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n   template<typename _Tp>\n-    inline mask_array<_Tp>::mask_array(const mask_array<_Tp>& a)\n-    : _M_sz(a._M_sz), _M_mask(a._M_mask), _M_array(a._M_array) {}\n+    inline mask_array<_Tp>::mask_array(const mask_array<_Tp>& __a)\n+    : _M_sz(__a._M_sz), _M_mask(__a._M_mask), _M_array(__a._M_array) {}\n \n   template<typename _Tp>\n     inline"}, {"sha": "60837ea6cff88dd38db5a6a73b6ed3bcab907ea5", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f", "patch": "@@ -2674,9 +2674,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t\t\t   initializer_list<int>,\n \t\t\t   regex_constants::match_flag_type =\n \t\t\t   regex_constants::match_default) = delete;\n-      template <std::size_t N>\n+      template <std::size_t _Nm>\n \tregex_token_iterator(_Bi_iter, _Bi_iter, const regex_type&&,\n-\t\t\t     const int (&)[N],\n+\t\t\t     const int (&)[_Nm],\n \t\t\t     regex_constants::match_flag_type =\n \t\t\t     regex_constants::match_default) = delete;\n "}, {"sha": "cd668fbc1d8ede784e5cd0d36040d1edc8fc9a37", "filename": "libstdc++-v3/include/bits/slice_array.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h?ref=d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f", "patch": "@@ -204,8 +204,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp>\n     inline\n-    slice_array<_Tp>::slice_array(const slice_array<_Tp>& a)\n-    : _M_sz(a._M_sz), _M_stride(a._M_stride), _M_array(a._M_array) {}\n+    slice_array<_Tp>::slice_array(const slice_array<_Tp>& __a)\n+    : _M_sz(__a._M_sz), _M_stride(__a._M_stride), _M_array(__a._M_array) {}\n \n   //    template<typename _Tp>\n   //    inline slice_array<_Tp>::~slice_array () {}"}, {"sha": "2cd5303a100b998f80369c0baf2cd39aedf14b52", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f", "patch": "@@ -5748,11 +5748,11 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n         {\n \t  while (__n != 0 && __unsampled_sz >= 2)\n \t    {\n-\t      const pair<_Size, _Size> p =\n+\t      const pair<_Size, _Size> __p =\n \t\t__gen_two_uniform_ints(__unsampled_sz, __unsampled_sz - 1, __g);\n \n \t      --__unsampled_sz;\n-\t      if (p.first < __n)\n+\t      if (__p.first < __n)\n \t\t{\n \t\t  *__out++ = *__first;\n \t\t  --__n;\n@@ -5763,7 +5763,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t      if (__n == 0) break;\n \n \t      --__unsampled_sz;\n-\t      if (p.second < __n)\n+\t      if (__p.second < __n)\n \t\t{\n \t\t  *__out++ = *__first;\n \t\t  --__n;"}, {"sha": "2d2d6fa90f681abdb5302e96c3020ceb7420f2b6", "filename": "libstdc++-v3/include/std/memory", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory?ref=d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f", "patch": "@@ -132,9 +132,9 @@ enum class pointer_safety { relaxed, preferred, strict };\n inline void\n declare_reachable(void*) { }\n \n-template <class T>\n-  inline T*\n-  undeclare_reachable(T* __p) { return __p; }\n+template <typename _Tp>\n+  inline _Tp*\n+  undeclare_reachable(_Tp* __p) { return __p; }\n \n inline void\n declare_no_pointers(char*, size_t) { }"}, {"sha": "76865f44541b7753888a301a582922fc6c352a11", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f", "patch": "@@ -2892,12 +2892,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { };\n \n   /// std::is_callable_v\n-  template<typename T, typename _Ret = void>\n-    constexpr bool is_callable_v = is_callable<T, _Ret>::value;\n+  template<typename _Tp, typename _Ret = void>\n+    constexpr bool is_callable_v = is_callable<_Tp, _Ret>::value;\n \n   /// std::is_nothrow_callable_v\n-  template<typename T, typename _Ret = void>\n-    constexpr bool is_nothrow_callable_v = is_nothrow_callable<T, _Ret>::value;\n+  template<typename _Tp, typename _Ret = void>\n+    constexpr bool is_nothrow_callable_v\n+      = is_nothrow_callable<_Tp, _Ret>::value;\n #endif // C++17\n \n "}, {"sha": "0ece81d8137a0db1910342a99b52d335a0b765da", "filename": "libstdc++-v3/libsupc++/exception_ptr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h?ref=d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f", "patch": "@@ -168,8 +168,8 @@ namespace std\n \n     template<typename _Ex>\n       inline void\n-      __dest_thunk(void* x)\n-      { static_cast<_Ex*>(x)->~_Ex(); }\n+      __dest_thunk(void* __x)\n+      { static_cast<_Ex*>(__x)->~_Ex(); }\n \n   } // namespace __exception_ptr\n "}, {"sha": "a7d9a6bced3495d6413ddff684fb2422a11576ff", "filename": "libstdc++-v3/testsuite/17_intro/headers/names.cc", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fnames.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fnames.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fnames.cc?ref=d34d36ef0d85c74884f8f8b0c80d845d3d1bc04f", "patch": "@@ -0,0 +1,101 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+\n+// Define macros for some common variables names that we must not use for\n+// naming variables, parameters etc. in the library.\n+#define tmp (\n+#define A (\n+#define B (\n+#define C (\n+#define D (\n+#define E (\n+#define F (\n+#define G (\n+#define H (\n+#define I (\n+#define J (\n+#define K (\n+#define L (\n+#define M (\n+#define N (\n+#define O (\n+#define P (\n+#define Q (\n+#define R (\n+#define S (\n+#define T (\n+#define U (\n+#define V (\n+#define W (\n+#define X (\n+#define Y (\n+#define Z (\n+#if __cplusplus >= 201103L\n+// <random> defines member functions called a() and b()\n+#else\n+#define a (\n+#define b (\n+#endif\n+// <queue> and <stack> defined data members called c\n+#define d (\n+#define e (\n+#define f (\n+#define g (\n+#if __cplusplus >= 201402L\n+// <chrono> defines operator \"\"h in C++14\n+// <complex> defines operator \"\"i in C++14\n+#else\n+#define h (\n+#define i (\n+#endif\n+#define j (\n+#if __cplusplus >= 201103L\n+// <random> defines member functions called k()\n+#else\n+#define k (\n+#endif\n+#define l (\n+#if __cplusplus >= 201103L\n+// <random> defines member functions called m() and n()\n+#else\n+#define m (\n+#define n (\n+#endif\n+#define o (\n+#if __cplusplus >= 201103L\n+// <random> defines member functions called p()\n+#else\n+#define p (\n+#endif\n+#define q (\n+#define r (\n+#if __cplusplus >= 201103L\n+// <random> defines member functions called s() and t()\n+// <chrono> and <string> define operator \"\"s in C++14\n+#else\n+#define s (\n+#define t (\n+#endif\n+#define u (\n+#define v (\n+#define w (\n+#define x (\n+#define y (\n+#define z (\n+#include <bits/stdc++.h>"}]}