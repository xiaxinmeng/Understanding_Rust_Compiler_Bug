{"sha": "859abddd0692f10f89f3368264e3df955f6e2d68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU5YWJkZGQwNjkyZjEwZjg5ZjMzNjgyNjRlM2RmOTU1ZjZlMmQ2OA==", "commit": {"author": {"name": "Sofiane Naci", "email": "sofiane.naci@arm.com", "date": "2013-07-22T12:39:18Z"}, "committer": {"name": "Sofiane Naci", "email": "sofiane@gcc.gnu.org", "date": "2013-07-22T12:39:18Z"}, "message": "arm.md (attribute \"insn\"): Delete.\n\n\t* config/arm/arm.md (attribute \"insn\"): Delete.\n\t(attribute \"type\"): Add \"mov_imm\", \"mov_reg\", \"mov_shift\",\n\t\"mov_shift_reg\", \"mvn_imm\", \"mvn_reg\", \"mvn_shift\" and \"mvn_shift_reg\".\n\t(not_shiftsi): Update for attribute change.\n\t(not_shiftsi_compare0): Likewise.\n\t(not_shiftsi_compare0_scratch): Likewise.\n\t(arm_one_cmplsi2): Likewise.\n\t(thumb1_one_cmplsi2): Likewise.\n\t(notsi_compare0): Likewise.\n\t(notsi_compare0_scratch): Likewise.\n\t(thumb1_movdi_insn): Likewise.\n\t(arm_movsi_insn): Likewise.\n\t(movhi_insn_arch4): Likewise.\n\t(movhi_bytes): Likewise.\n\t(arm_movqi_insn): Likewise.\n\t(thumb1_movqi_insn): Likewise.\n\t(arm32_movhf): Likewise.\n\t(thumb1_movhf): Likewise.\n\t(arm_movsf_soft_insn): Likewise.\n\t(thumb1_movsf_insn): Likewise.\n\t(thumb_movdf_insn): Likewise.\n\t(movsicc_insn): Likewise.\n\t(movsfcc_soft_insn): Likewise.\n\t(and_scc): Likewise.\n\t(cond_move): Likewise.\n\t(if_move_not): Likewise.\n\t(if_not_move): Likewise.\n\t(if_shift_move): Likewise.\n\t(if_move_shift): Likewise.\n\t(if_shift_shift): Likewise.\n\t(if_not_arith): Likewise.\n\t(if_arith_not): Likewise.\n\t(cond_move_not): Likewise.\n\t* config/arm/neon.md (neon_mov<mode>): Update for attribute change.\n\t(neon_mov<mode>): Likewise.\n\t* config/arm/vfp.md (arm_movsi_vfp): Update for attribute change.\n\t(thumb2_movsi_vfp): Likewise.\n\t(movsf_vfp): Likewise.\n\t(thumb2_movsf_vfp): Likewise.\n\t* config/arm/arm.c (xscale_sched_adjust_cost): Update for attribute change.\n\t(cortexa7_older_only): Likewise.\n\t(cortexa7_younger): Likewise.\n\t* config/arm/arm1020e.md (1020alu_op): Update for attribute change.\n\t(1020alu_shift_op): Likewise.\n\t(1020alu_shift_reg_op): Likewise.\n\t* config/arm/arm1026ejs.md (alu_op): Update for attribute change.\n\t(alu_shift_op): Likewise.\n\t(alu_shift_reg_op): Likewise.\n\t* config/arm/arm1136jfs.md (11_alu_op): Update for attribute change.\n\t(11_alu_shift_op): Likewise.\n\t(11_alu_shift_reg_op): Likewise.\n\t* config/arm/arm926ejs.md (9_alu_op): Update for attribute change.\n\t(9_alu_shift_reg_op): Likewise.\n\t* config/arm/cortex-a15.md (cortex_a15_alu): Update for attribute change.\n\t(cortex_a15_alu_shift): Likewise.\n\t(cortex_a15_alu_shift_reg): Likewise.\n\t* config/arm/cortex-a5.md (cortex_a5_alu): Update for attribute change.\n\t(cortex_a5_alu_shift): Likewise.\n\t* config/arm/cortex-a53.md (cortex_a53_alu): Update for attribute change.\n\t(cortex_a53_alu_shift): Likewise.\n\t* config/arm/cortex-a7.md (cortex_a7_alu_imm): Update for attribute change.\n\t(cortex_a7_alu_reg): Likewise.\n\t(cortex_a7_alu_shift): Likewise.\n\t* config/arm/cortex-a8.md (cortex_a8_alu): Update for attribute change.\n\t(cortex_a8_alu_shift): Likewise.\n\t(cortex_a8_alu_shift_reg): Likewise.\n\t(cortex_a8_mov): Likewise.\n\t* config/arm/cortex-a9.md (cortex_a9_dp): Update for attribute change.\n\t(cortex_a9_dp_shift): Likewise.\n\t* config/arm/cortex-m4.md (cortex_m4_alu): Update for attribute change.\n\t* config/arm/cortex-r4.md (cortex_r4_alu): Update for attribute change.\n\t(cortex_r4_mov): Likewise.\n\t(cortex_r4_alu_shift): Likewise.\n\t(cortex_r4_alu_shift_reg): Likewise.\n\t* config/arm/fa526.md (526_alu_op): Update for attribute change.\n\t(526_alu_shift_op): Likewise.\n\t* config/arm/fa606te.md (606te_alu_op): Update for attribute change.\n\t* config/arm/fa626te.md (626te_alu_op): Update for attribute change.\n\t(626te_alu_shift_op): Likewise.\n\t* config/arm/fa726te.md (726te_shift_op): Update for attribute change.\n\t(726te_alu_op): Likewise.\n\t(726te_alu_shift_op): Likewise.\n\t(726te_alu_shift_reg_op): Likewise.\n\t* config/arm/fmp626.md (mp626_alu_op): Update for attribute change.\n\t(mp626_alu_shift_op): Likewise.\n\t* config/arm/marvell-pj4.md (pj4_alu_e1): Update for attribute change.\n\t(pj4_alu_e1_conds): Likewise.\n\t(pj4_alu): Likewise.\n\t(pj4_alu_conds): Likewise.\n\t(pj4_shift): Likewise.\n\t(pj4_shift_conds): Likewise.\n\t(pj4_alu_shift): Likewise.\n\t(pj4_alu_shift_conds): Likewise.\n\nFrom-SVN: r201124", "tree": {"sha": "3ec935bb24e43a2fa069d9baaf3bed7a18cb3c24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ec935bb24e43a2fa069d9baaf3bed7a18cb3c24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/859abddd0692f10f89f3368264e3df955f6e2d68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/859abddd0692f10f89f3368264e3df955f6e2d68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/859abddd0692f10f89f3368264e3df955f6e2d68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/859abddd0692f10f89f3368264e3df955f6e2d68/comments", "author": null, "committer": null, "parents": [{"sha": "119b97c3693ed62165fabb8eca647fc18597e97a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/119b97c3693ed62165fabb8eca647fc18597e97a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/119b97c3693ed62165fabb8eca647fc18597e97a"}], "stats": {"total": 436, "additions": 271, "deletions": 165}, "files": [{"sha": "2715fb15a2ef7698749d60163f78832c0b4c29f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=859abddd0692f10f89f3368264e3df955f6e2d68", "patch": "@@ -1,3 +1,99 @@\n+2013-07-22  Sofiane Naci  <sofiane.naci@arm.com>\n+\n+\t* config/arm/arm.md (attribute \"insn\"): Delete.\n+\t(attribute \"type\"): Add \"mov_imm\", \"mov_reg\", \"mov_shift\",\n+\t\"mov_shift_reg\", \"mvn_imm\", \"mvn_reg\", \"mvn_shift\" and \"mvn_shift_reg\".\n+\t(not_shiftsi): Update for attribute change.\n+\t(not_shiftsi_compare0): Likewise.\n+\t(not_shiftsi_compare0_scratch): Likewise.\n+\t(arm_one_cmplsi2): Likewise.\n+\t(thumb1_one_cmplsi2): Likewise.\n+\t(notsi_compare0): Likewise.\n+\t(notsi_compare0_scratch): Likewise.\n+\t(thumb1_movdi_insn): Likewise.\n+\t(arm_movsi_insn): Likewise.\n+\t(movhi_insn_arch4): Likewise.\n+\t(movhi_bytes): Likewise.\n+\t(arm_movqi_insn): Likewise.\n+\t(thumb1_movqi_insn): Likewise.\n+\t(arm32_movhf): Likewise.\n+\t(thumb1_movhf): Likewise.\n+\t(arm_movsf_soft_insn): Likewise.\n+\t(thumb1_movsf_insn): Likewise.\n+\t(thumb_movdf_insn): Likewise.\n+\t(movsicc_insn): Likewise.\n+\t(movsfcc_soft_insn): Likewise.\n+\t(and_scc): Likewise.\n+\t(cond_move): Likewise.\n+\t(if_move_not): Likewise.\n+\t(if_not_move): Likewise.\n+\t(if_shift_move): Likewise.\n+\t(if_move_shift): Likewise.\n+\t(if_shift_shift): Likewise.\n+\t(if_not_arith): Likewise.\n+\t(if_arith_not): Likewise.\n+\t(cond_move_not): Likewise.\n+\t* config/arm/neon.md (neon_mov<mode>): Update for attribute change.\n+\t(neon_mov<mode>): Likewise.\n+\t* config/arm/vfp.md (arm_movsi_vfp): Update for attribute change.\n+\t(thumb2_movsi_vfp): Likewise.\n+\t(movsf_vfp): Likewise.\n+\t(thumb2_movsf_vfp): Likewise.\n+\t* config/arm/arm.c (xscale_sched_adjust_cost): Update for attribute change.\n+\t(cortexa7_older_only): Likewise.\n+\t(cortexa7_younger): Likewise.\n+\t* config/arm/arm1020e.md (1020alu_op): Update for attribute change.\n+\t(1020alu_shift_op): Likewise.\n+\t(1020alu_shift_reg_op): Likewise.\n+\t* config/arm/arm1026ejs.md (alu_op): Update for attribute change.\n+\t(alu_shift_op): Likewise.\n+\t(alu_shift_reg_op): Likewise.\n+\t* config/arm/arm1136jfs.md (11_alu_op): Update for attribute change.\n+\t(11_alu_shift_op): Likewise.\n+\t(11_alu_shift_reg_op): Likewise.\n+\t* config/arm/arm926ejs.md (9_alu_op): Update for attribute change.\n+\t(9_alu_shift_reg_op): Likewise.\n+\t* config/arm/cortex-a15.md (cortex_a15_alu): Update for attribute change.\n+\t(cortex_a15_alu_shift): Likewise.\n+\t(cortex_a15_alu_shift_reg): Likewise.\n+\t* config/arm/cortex-a5.md (cortex_a5_alu): Update for attribute change.\n+\t(cortex_a5_alu_shift): Likewise.\n+\t* config/arm/cortex-a53.md (cortex_a53_alu): Update for attribute change.\n+\t(cortex_a53_alu_shift): Likewise.\n+\t* config/arm/cortex-a7.md (cortex_a7_alu_imm): Update for attribute change.\n+\t(cortex_a7_alu_reg): Likewise.\n+\t(cortex_a7_alu_shift): Likewise.\n+\t* config/arm/cortex-a8.md (cortex_a8_alu): Update for attribute change.\n+\t(cortex_a8_alu_shift): Likewise.\n+\t(cortex_a8_alu_shift_reg): Likewise.\n+\t(cortex_a8_mov): Likewise.\n+\t* config/arm/cortex-a9.md (cortex_a9_dp): Update for attribute change.\n+\t(cortex_a9_dp_shift): Likewise.\n+\t* config/arm/cortex-m4.md (cortex_m4_alu): Update for attribute change.\n+\t* config/arm/cortex-r4.md (cortex_r4_alu): Update for attribute change.\n+\t(cortex_r4_mov): Likewise.\n+\t(cortex_r4_alu_shift): Likewise.\n+\t(cortex_r4_alu_shift_reg): Likewise.\n+\t* config/arm/fa526.md (526_alu_op): Update for attribute change.\n+\t(526_alu_shift_op): Likewise.\n+\t* config/arm/fa606te.md (606te_alu_op): Update for attribute change.\n+\t* config/arm/fa626te.md (626te_alu_op): Update for attribute change.\n+\t(626te_alu_shift_op): Likewise.\n+\t* config/arm/fa726te.md (726te_shift_op): Update for attribute change.\n+\t(726te_alu_op): Likewise.\n+\t(726te_alu_shift_op): Likewise.\n+\t(726te_alu_shift_reg_op): Likewise.\n+\t* config/arm/fmp626.md (mp626_alu_op): Update for attribute change.\n+\t(mp626_alu_shift_op): Likewise.\n+\t* config/arm/marvell-pj4.md (pj4_alu_e1): Update for attribute change.\n+\t(pj4_alu_e1_conds): Likewise.\n+\t(pj4_alu): Likewise.\n+\t(pj4_alu_conds): Likewise.\n+\t(pj4_shift): Likewise.\n+\t(pj4_shift_conds): Likewise.\n+\t(pj4_alu_shift): Likewise.\n+\t(pj4_alu_shift_conds): Likewise.\n+\n 2013-07-22  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/predicates.md (shiftable_operator_strict_it):"}, {"sha": "ad5446927d47a72f93ec57f708eb9c2b88bcadd3", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=859abddd0692f10f89f3368264e3df955f6e2d68", "patch": "@@ -8653,7 +8653,12 @@ xscale_sched_adjust_cost (rtx insn, rtx link, rtx dep, int * cost)\n \t instruction we depend on is another ALU instruction, then we may\n \t have to account for an additional stall.  */\n       if (shift_opnum != 0\n-\t  && (attr_type == TYPE_ARLO_SHIFT || attr_type == TYPE_ARLO_SHIFT_REG))\n+\t  && (attr_type == TYPE_ARLO_SHIFT\n+\t      || attr_type == TYPE_ARLO_SHIFT_REG\n+\t      || attr_type == TYPE_MOV_SHIFT\n+\t      || attr_type == TYPE_MVN_SHIFT\n+\t      || attr_type == TYPE_MOV_SHIFT_REG\n+\t      || attr_type == TYPE_MVN_SHIFT_REG))\n \t{\n \t  rtx shifted_operand;\n \t  int opno;\n@@ -8934,12 +8939,10 @@ cortexa7_older_only (rtx insn)\n   if (recog_memoized (insn) < 0)\n     return false;\n \n-  if (get_attr_insn (insn) == INSN_MOV)\n-    return false;\n-\n   switch (get_attr_type (insn))\n     {\n     case TYPE_ARLO_REG:\n+    case TYPE_MVN_REG:\n     case TYPE_SHIFT:\n     case TYPE_SHIFT_REG:\n     case TYPE_LOAD_BYTE:\n@@ -8982,13 +8985,15 @@ cortexa7_younger (FILE *file, int verbose, rtx insn)\n       return false;\n     }\n \n-  if (get_attr_insn (insn) == INSN_MOV)\n-    return true;\n-\n   switch (get_attr_type (insn))\n     {\n     case TYPE_ARLO_IMM:\n     case TYPE_EXTEND:\n+    case TYPE_MVN_IMM:\n+    case TYPE_MOV_IMM:\n+    case TYPE_MOV_REG:\n+    case TYPE_MOV_SHIFT:\n+    case TYPE_MOV_SHIFT_REG:\n     case TYPE_BRANCH:\n     case TYPE_CALL:\n       return true;"}, {"sha": "b313d3beec7aa9a308c68f5bfbedd6b2e785619d", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 63, "deletions": 73, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=859abddd0692f10f89f3368264e3df955f6e2d68", "patch": "@@ -245,14 +245,6 @@\n   (set_attr \"length\" \"4\")\n   (set_attr \"pool_range\" \"250\")])\n \n-;; The instruction used to implement a particular pattern.  This\n-;; information is used by pipeline descriptions to provide accurate\n-;; scheduling information.\n-\n-(define_attr \"insn\"\n-        \"mov,mvn,other\"\n-        (const_string \"other\"))\n-\n ; TYPE attribute is used to classify instructions for use in scheduling.\n ;\n ; Instruction classification:\n@@ -298,9 +290,18 @@\n ; load4              load 4 words from memory to arm registers.\n ; mla                integer multiply accumulate.\n ; mlas               integer multiply accumulate, flag setting.\n-; mov                integer move.\n+; mov_imm            simple MOV instruction that moves an immediate to\n+;                    register.  This includes MOVW, but not MOVT.\n+; mov_reg            simple MOV instruction that moves a register to another\n+;                    register.  This includes MOVW, but not MOVT.\n+; mov_shift          simple MOV instruction, shifted operand by a constant.\n+; mov_shift_reg      simple MOV instruction, shifted operand by a register.\n ; mul                integer multiply.\n ; muls               integer multiply, flag setting.\n+; mvn_imm            inverting move instruction, immediate.\n+; mvn_reg            inverting move instruction, register.\n+; mvn_shift          inverting move instruction, shifted operand by a constant.\n+; mvn_shift_reg      inverting move instruction, shifted operand by a register.\n ; r_2_f              transfer from core to float.\n ; sdiv               signed division.\n ; shift              simple shift operation (LSL, LSR, ASR, ROR) with an\n@@ -453,8 +454,16 @@\n   load4,\\\n   mla,\\\n   mlas,\\\n+  mov_imm,\\\n+  mov_reg,\\\n+  mov_shift,\\\n+  mov_shift_reg,\\\n   mul,\\\n   muls,\\\n+  mvn_imm,\\\n+  mvn_reg,\\\n+  mvn_shift,\\\n+  mvn_shift_reg,\\\n   r_2_f,\\\n   sdiv,\\\n   shift,\\\n@@ -4250,8 +4259,7 @@\n   \"TARGET_32BIT\"\n   \"mov\\\\t%0, %1, rrx\"\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"insn\" \"mov\")\n-   (set_attr \"type\" \"arlo_shift\")]\n+   (set_attr \"type\" \"mov_shift\")]\n )\n \n (define_expand \"ashrsi3\"\n@@ -4486,9 +4494,8 @@\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")\n    (set_attr \"shift\" \"1\")\n-   (set_attr \"insn\" \"mvn\")\n    (set_attr \"arch\" \"32,a\")\n-   (set_attr \"type\" \"arlo_shift,arlo_shift_reg\")])\n+   (set_attr \"type\" \"mvn_shift,mvn_shift_reg\")])\n \n (define_insn \"*not_shiftsi_compare0\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n@@ -4503,9 +4510,8 @@\n   \"mvn%.\\\\t%0, %1%S3\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"1\")\n-   (set_attr \"insn\" \"mvn\")\n    (set_attr \"arch\" \"32,a\")\n-   (set_attr \"type\" \"arlo_shift,arlo_shift_reg\")])\n+   (set_attr \"type\" \"mvn_shift,mvn_shift_reg\")])\n \n (define_insn \"*not_shiftsi_compare0_scratch\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n@@ -4519,9 +4525,8 @@\n   \"mvn%.\\\\t%0, %1%S3\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"1\")\n-   (set_attr \"insn\" \"mvn\")\n    (set_attr \"arch\" \"32,a\")\n-   (set_attr \"type\" \"arlo_shift,arlo_shift_reg\")])\n+   (set_attr \"type\" \"mvn_shift,mvn_shift_reg\")])\n \n ;; We don't really have extzv, but defining this using shifts helps\n ;; to reduce register pressure later on.\n@@ -5249,7 +5254,7 @@\n    (set_attr \"predicable_short_it\" \"yes,no\")\n    (set_attr \"arch\" \"t2,*\")\n    (set_attr \"length\" \"4\")\n-   (set_attr \"insn\" \"mvn\")]\n+   (set_attr \"type\" \"mvn_reg\")]\n )\n \n (define_insn \"*thumb1_one_cmplsi2\"\n@@ -5258,7 +5263,7 @@\n   \"TARGET_THUMB1\"\n   \"mvn\\\\t%0, %1\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"insn\" \"mvn\")]\n+   (set_attr \"type\" \"mvn_reg\")]\n )\n \n (define_insn \"*notsi_compare0\"\n@@ -5270,7 +5275,7 @@\n   \"TARGET_32BIT\"\n   \"mvn%.\\\\t%0, %1\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"insn\" \"mvn\")]\n+   (set_attr \"type\" \"mvn_reg\")]\n )\n \n (define_insn \"*notsi_compare0_scratch\"\n@@ -5281,7 +5286,7 @@\n   \"TARGET_32BIT\"\n   \"mvn%.\\\\t%0, %1\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"insn\" \"mvn\")]\n+   (set_attr \"type\" \"mvn_reg\")]\n )\n \f\n ;; Fixed <--> Floating conversion insns\n@@ -6378,8 +6383,7 @@\n     }\n   }\"\n   [(set_attr \"length\" \"4,4,6,2,2,6,4,4\")\n-   (set_attr \"type\" \"*,*,*,load2,store2,load2,store2,*\")\n-   (set_attr \"insn\" \"*,mov,*,*,*,*,*,mov\")\n+   (set_attr \"type\" \"*,mov_reg,*,load2,store2,load2,store2,mov_reg\")\n    (set_attr \"pool_range\" \"*,*,*,*,*,1018,*,*\")]\n )\n \n@@ -6494,8 +6498,7 @@\n    movw%?\\\\t%0, %1\n    ldr%?\\\\t%0, %1\n    str%?\\\\t%1, %0\"\n-  [(set_attr \"type\" \"*,arlo_imm,arlo_imm,arlo_imm,load1,store1\")\n-   (set_attr \"insn\" \"mov,mov,mvn,mov,*,*\")\n+  [(set_attr \"type\" \"mov_reg,mov_imm,mvn_imm,mov_imm,load1,store1\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"pool_range\" \"*,*,*,*,4096,*\")\n    (set_attr \"neg_pool_range\" \"*,*,*,*,4084,*\")]\n@@ -7211,14 +7214,13 @@\n    str%(h%)\\\\t%1, %0\\\\t%@ movhi\n    ldr%(h%)\\\\t%0, %1\\\\t%@ movhi\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"insn\" \"mov,mvn,*,*\")\n    (set_attr \"pool_range\" \"*,*,*,256\")\n    (set_attr \"neg_pool_range\" \"*,*,*,244\")\n    (set_attr_alternative \"type\"\n                          [(if_then_else (match_operand 1 \"const_int_operand\" \"\")\n-                                        (const_string \"arlo_imm\" )\n-                                        (const_string \"*\"))\n-                          (const_string \"arlo_imm\")\n+                                        (const_string \"mov_imm\" )\n+                                        (const_string \"mov_reg\"))\n+                          (const_string \"mvn_imm\")\n                           (const_string \"store1\")\n                           (const_string \"load1\")])]\n )\n@@ -7232,8 +7234,7 @@\n    mov%?\\\\t%0, %1\\\\t%@ movhi\n    mvn%?\\\\t%0, #%B1\\\\t%@ movhi\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"insn\" \"mov, mov,mvn\")\n-   (set_attr \"type\" \"arlo_imm,*,arlo_imm\")]\n+   (set_attr \"type\" \"mov_imm,mov_reg,mvn_imm\")]\n )\n \n (define_expand \"thumb_movhi_clobber\"\n@@ -7372,8 +7373,7 @@\n    str%(b%)\\\\t%1, %0\n    ldr%(b%)\\\\t%0, %1\n    str%(b%)\\\\t%1, %0\"\n-  [(set_attr \"type\" \"*,*,arlo_imm,arlo_imm,arlo_imm,load1, store1, load1, store1\")\n-   (set_attr \"insn\" \"mov,mov,mov,mov,mvn,*,*,*,*\")\n+  [(set_attr \"type\" \"mov_reg,mov_reg,mov_imm,mov_imm,mvn_imm,load1,store1,load1,store1\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"yes,yes,yes,no,no,no,no,no,no\")\n    (set_attr \"arch\" \"t2,any,any,t2,any,t2,t2,any,any\")\n@@ -7394,8 +7394,7 @@\n    mov\\\\t%0, %1\n    mov\\\\t%0, %1\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"type\" \"arlo_imm,load1,store1,*,*,arlo_imm\")\n-   (set_attr \"insn\" \"*,*,*,mov,mov,mov\")\n+   (set_attr \"type\" \"arlo_imm,load1,store1,mov_reg,mov_imm,mov_imm\")\n    (set_attr \"pool_range\" \"*,32,*,*,*,*\")\n    (set_attr \"conds\" \"clob,nocond,nocond,nocond,nocond,clob\")])\n \n@@ -7460,8 +7459,7 @@\n     }\n   \"\n   [(set_attr \"conds\" \"unconditional\")\n-   (set_attr \"type\" \"load1,store1,*,*\")\n-   (set_attr \"insn\" \"*,*,mov,mov\")\n+   (set_attr \"type\" \"load1,store1,mov_reg,mov_reg\")\n    (set_attr \"length\" \"4,4,4,8\")\n    (set_attr \"predicable\" \"yes\")]\n )\n@@ -7496,8 +7494,7 @@\n     }\n   \"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"type\" \"*,load1,store1,*,*\")\n-   (set_attr \"insn\" \"mov,*,*,mov,mov\")\n+   (set_attr \"type\" \"mov_reg,load1,store1,mov_reg,mov_reg\")\n    (set_attr \"pool_range\" \"*,1018,*,*,*\")\n    (set_attr \"conds\" \"clob,nocond,nocond,nocond,nocond\")])\n \n@@ -7551,8 +7548,7 @@\n    ldr%?\\\\t%0, %1\\\\t%@ float\n    str%?\\\\t%1, %0\\\\t%@ float\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"*,load1,store1\")\n-   (set_attr \"insn\" \"mov,*,*\")\n+   (set_attr \"type\" \"mov_reg,load1,store1\")\n    (set_attr \"arm_pool_range\" \"*,4096,*\")\n    (set_attr \"thumb2_pool_range\" \"*,4094,*\")\n    (set_attr \"arm_neg_pool_range\" \"*,4084,*\")\n@@ -7575,9 +7571,8 @@\n    mov\\\\t%0, %1\n    mov\\\\t%0, %1\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"type\" \"*,load1,store1,load1,store1,*,*\")\n+   (set_attr \"type\" \"*,load1,store1,load1,store1,mov_reg,mov_reg\")\n    (set_attr \"pool_range\" \"*,*,*,1018,*,*,*\")\n-   (set_attr \"insn\" \"*,*,*,*,*,mov,mov\")\n    (set_attr \"conds\" \"clob,nocond,nocond,nocond,nocond,nocond,nocond\")]\n )\n \n@@ -7708,8 +7703,7 @@\n     }\n   \"\n   [(set_attr \"length\" \"4,2,2,6,4,4\")\n-   (set_attr \"type\" \"*,load2,store2,load2,store2,*\")\n-   (set_attr \"insn\" \"*,*,*,*,*,mov\")\n+   (set_attr \"type\" \"*,load2,store2,load2,store2,mov_reg\")\n    (set_attr \"pool_range\" \"*,*,*,1018,*,*\")]\n )\n \f\n@@ -9175,20 +9169,19 @@\n   }\n   [(set_attr \"length\" \"4,4,4,4,8,8,8,8\")\n    (set_attr \"conds\" \"use\")\n-   (set_attr \"insn\" \"mov,mvn,mov,mvn,mov,mov,mvn,mvn\")\n    (set_attr_alternative \"type\"\n                          [(if_then_else (match_operand 2 \"const_int_operand\" \"\")\n-                                        (const_string \"arlo_imm\")\n-                                        (const_string \"*\"))\n-                          (const_string \"arlo_imm\")\n+                                        (const_string \"mov_imm\")\n+                                        (const_string \"mov_reg\"))\n+                          (const_string \"mvn_imm\")\n                           (if_then_else (match_operand 1 \"const_int_operand\" \"\")\n-                                        (const_string \"arlo_imm\")\n-                                        (const_string \"*\"))\n-                          (const_string \"arlo_imm\")\n-                          (const_string \"*\")\n-                          (const_string \"*\")\n-                          (const_string \"*\")\n-                          (const_string \"*\")])]\n+                                        (const_string \"mov_imm\")\n+                                        (const_string \"mov_reg\"))\n+                          (const_string \"mvn_imm\")\n+                          (const_string \"mov_reg\")\n+                          (const_string \"mov_reg\")\n+                          (const_string \"mov_reg\")\n+                          (const_string \"mov_reg\")])]\n )\n \n (define_insn \"*movsfcc_soft_insn\"\n@@ -9202,7 +9195,7 @@\n    mov%D3\\\\t%0, %2\n    mov%d3\\\\t%0, %1\"\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"insn\" \"mov\")]\n+   (set_attr \"type\" \"mov_reg\")]\n )\n \n \f\n@@ -10195,7 +10188,7 @@\n     operands[5] = gen_rtx_fmt_ee (rc, VOIDmode, operands[2], const0_rtx);\n   }\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"insn\" \"mov\")\n+   (set_attr \"type\" \"mov_reg\")\n    (set_attr \"length\" \"8\")]\n )\n \n@@ -10442,7 +10435,7 @@\n     return \\\"\\\";\n   \"\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"insn\" \"mov\")\n+   (set_attr \"type\" \"mov_reg\")\n    (set_attr \"length\" \"4,4,8\")]\n )\n \n@@ -11405,7 +11398,7 @@\n    mov%d4\\\\t%0, %1\\;mvn%D4\\\\t%0, %2\n    mvn%d4\\\\t%0, #%B1\\;mvn%D4\\\\t%0, %2\"\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"insn\" \"mvn\")\n+   (set_attr \"type\" \"mvn_reg\")\n    (set_attr \"length\" \"4,8,8\")]\n )\n \n@@ -11438,7 +11431,7 @@\n    mov%D4\\\\t%0, %1\\;mvn%d4\\\\t%0, %2\n    mvn%D4\\\\t%0, #%B1\\;mvn%d4\\\\t%0, %2\"\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"insn\" \"mvn\")\n+   (set_attr \"type\" \"mvn_reg\")\n    (set_attr \"length\" \"4,8,8\")]\n )\n \n@@ -11476,10 +11469,9 @@\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"shift\" \"2\")\n    (set_attr \"length\" \"4,8,8\")\n-   (set_attr \"insn\" \"mov\")\n    (set (attr \"type\") (if_then_else (match_operand 3 \"const_int_operand\" \"\")\n-\t\t      (const_string \"arlo_shift\")\n-\t\t      (const_string \"arlo_shift_reg\")))]\n+\t\t      (const_string \"mov_shift\")\n+\t\t      (const_string \"mov_shift_reg\")))]\n )\n \n (define_insn \"*ifcompare_move_shift\"\n@@ -11516,10 +11508,9 @@\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"shift\" \"2\")\n    (set_attr \"length\" \"4,8,8\")\n-   (set_attr \"insn\" \"mov\")\n    (set (attr \"type\") (if_then_else (match_operand 3 \"const_int_operand\" \"\")\n-\t\t      (const_string \"arlo_shift\")\n-\t\t      (const_string \"arlo_shift_reg\")))]\n+\t\t      (const_string \"mov_shift\")\n+\t\t      (const_string \"mov_shift_reg\")))]\n )\n \n (define_insn \"*ifcompare_shift_shift\"\n@@ -11557,12 +11548,11 @@\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"shift\" \"1\")\n    (set_attr \"length\" \"8\")\n-   (set_attr \"insn\" \"mov\")\n    (set (attr \"type\") (if_then_else\n \t\t        (and (match_operand 2 \"const_int_operand\" \"\")\n                              (match_operand 4 \"const_int_operand\" \"\"))\n-\t\t      (const_string \"arlo_shift\")\n-\t\t      (const_string \"arlo_shift_reg\")))]\n+\t\t      (const_string \"mov_shift\")\n+\t\t      (const_string \"mov_shift_reg\")))]\n )\n \n (define_insn \"*ifcompare_not_arith\"\n@@ -11594,7 +11584,7 @@\n   \"TARGET_ARM\"\n   \"mvn%d5\\\\t%0, %1\\;%I6%D5\\\\t%0, %2, %3\"\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"insn\" \"mvn\")\n+   (set_attr \"type\" \"mvn_reg\")\n    (set_attr \"length\" \"8\")]\n )\n \n@@ -11627,7 +11617,7 @@\n   \"TARGET_ARM\"\n   \"mvn%D5\\\\t%0, %1\\;%I6%d5\\\\t%0, %2, %3\"\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"insn\" \"mvn\")\n+   (set_attr \"type\" \"mvn_reg\")\n    (set_attr \"length\" \"8\")]\n )\n \n@@ -12075,7 +12065,7 @@\n    mvn%D4\\\\t%0, %2\n    mov%d4\\\\t%0, %1\\;mvn%D4\\\\t%0, %2\"\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"insn\" \"mvn\")\n+   (set_attr \"type\" \"mvn_reg\")\n    (set_attr \"length\" \"4,8\")]\n )\n "}, {"sha": "317e4cd4ad6f635d390a62bbbd9345cf00d5563e", "filename": "gcc/config/arm/arm1020e.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Farm1020e.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Farm1020e.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm1020e.md?ref=859abddd0692f10f89f3368264e3df955f6e2d68", "patch": "@@ -66,13 +66,14 @@\n ;; ALU operations with no shifted operand\n (define_insn_reservation \"1020alu_op\" 1 \n  (and (eq_attr \"tune\" \"arm1020e,arm1022e\")\n-      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\"))\n+      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,\\\n+                       mov_imm,mov_reg,mvn_imm,mvn_reg\"))\n  \"1020a_e,1020a_m,1020a_w\")\n \n ;; ALU operations with a shift-by-constant operand\n (define_insn_reservation \"1020alu_shift_op\" 1 \n  (and (eq_attr \"tune\" \"arm1020e,arm1022e\")\n-      (eq_attr \"type\" \"extend,arlo_shift\"))\n+      (eq_attr \"type\" \"extend,arlo_shift,mov_shift,mvn_shift\"))\n  \"1020a_e,1020a_m,1020a_w\")\n \n ;; ALU operations with a shift-by-register operand\n@@ -81,7 +82,7 @@\n ;; the execute stage.\n (define_insn_reservation \"1020alu_shift_reg_op\" 2 \n  (and (eq_attr \"tune\" \"arm1020e,arm1022e\")\n-      (eq_attr \"type\" \"arlo_shift_reg\"))\n+      (eq_attr \"type\" \"arlo_shift_reg,mov_shift_reg,mvn_shift_reg\"))\n  \"1020a_e*2,1020a_m,1020a_w\")\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}, {"sha": "9112122d67b5b13189fe4e936b2c9775117ca191", "filename": "gcc/config/arm/arm1026ejs.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Farm1026ejs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Farm1026ejs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm1026ejs.md?ref=859abddd0692f10f89f3368264e3df955f6e2d68", "patch": "@@ -66,13 +66,14 @@\n ;; ALU operations with no shifted operand\n (define_insn_reservation \"alu_op\" 1 \n  (and (eq_attr \"tune\" \"arm1026ejs\")\n-      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\"))\n+      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,\\\n+                       mov_imm,mov_reg,mvn_imm,mvn_reg\"))\n  \"a_e,a_m,a_w\")\n \n ;; ALU operations with a shift-by-constant operand\n (define_insn_reservation \"alu_shift_op\" 1 \n  (and (eq_attr \"tune\" \"arm1026ejs\")\n-      (eq_attr \"type\" \"extend,arlo_shift\"))\n+      (eq_attr \"type\" \"extend,arlo_shift,mov_shift,mvn_shift\"))\n  \"a_e,a_m,a_w\")\n \n ;; ALU operations with a shift-by-register operand\n@@ -81,7 +82,7 @@\n ;; the execute stage.\n (define_insn_reservation \"alu_shift_reg_op\" 2 \n  (and (eq_attr \"tune\" \"arm1026ejs\")\n-      (eq_attr \"type\" \"arlo_shift_reg\"))\n+      (eq_attr \"type\" \"arlo_shift_reg,mov_shift_reg,mvn_shift_reg\"))\n  \"a_e*2,a_m,a_w\")\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}, {"sha": "f83b9d14f2b72d09530163138a73fb8ae35e77ef", "filename": "gcc/config/arm/arm1136jfs.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Farm1136jfs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Farm1136jfs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm1136jfs.md?ref=859abddd0692f10f89f3368264e3df955f6e2d68", "patch": "@@ -75,13 +75,14 @@\n ;; ALU operations with no shifted operand\n (define_insn_reservation \"11_alu_op\" 2\n  (and (eq_attr \"tune\" \"arm1136js,arm1136jfs\")\n-      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\"))\n+      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,\\\n+                       mov_imm,mov_reg,mvn_imm,mvn_reg\"))\n  \"e_1,e_2,e_3,e_wb\")\n \n ;; ALU operations with a shift-by-constant operand\n (define_insn_reservation \"11_alu_shift_op\" 2\n  (and (eq_attr \"tune\" \"arm1136js,arm1136jfs\")\n-      (eq_attr \"type\" \"extend,arlo_shift\"))\n+      (eq_attr \"type\" \"extend,arlo_shift,mov_shift,mvn_shift\"))\n  \"e_1,e_2,e_3,e_wb\")\n \n ;; ALU operations with a shift-by-register operand\n@@ -90,7 +91,7 @@\n ;; the shift stage.\n (define_insn_reservation \"11_alu_shift_reg_op\" 3\n  (and (eq_attr \"tune\" \"arm1136js,arm1136jfs\")\n-      (eq_attr \"type\" \"arlo_shift_reg\"))\n+      (eq_attr \"type\" \"arlo_shift_reg,mov_shift_reg,mvn_shift_reg\"))\n  \"e_1*2,e_2,e_3,e_wb\")\n \n ;; alu_ops can start sooner, if there is no shifter dependency"}, {"sha": "8c38e86ce667de26013dc4ab8e39a59c13df0d8b", "filename": "gcc/config/arm/arm926ejs.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Farm926ejs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Farm926ejs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm926ejs.md?ref=859abddd0692f10f89f3368264e3df955f6e2d68", "patch": "@@ -58,7 +58,9 @@\n ;; ALU operations with no shifted operand\n (define_insn_reservation \"9_alu_op\" 1 \n  (and (eq_attr \"tune\" \"arm926ejs\")\n-      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,extend,arlo_shift\"))\n+      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,extend,arlo_shift,\\\n+                       mov_imm,mov_reg,mov_shift,\\\n+                       mvn_imm,mvn_reg,mvn_shift\"))\n  \"e,m,w\")\n \n ;; ALU operations with a shift-by-register operand\n@@ -67,7 +69,7 @@\n ;; the execute stage.\n (define_insn_reservation \"9_alu_shift_reg_op\" 2 \n  (and (eq_attr \"tune\" \"arm926ejs\")\n-      (eq_attr \"type\" \"arlo_shift_reg\"))\n+      (eq_attr \"type\" \"arlo_shift_reg,mov_shift_reg,mvn_shift_reg\"))\n  \"e*2,m,w\")\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}, {"sha": "4ad87121d6dbb6e2514d301aaa3bcf674026d562", "filename": "gcc/config/arm/cortex-a15.md", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Fcortex-a15.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Fcortex-a15.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a15.md?ref=859abddd0692f10f89f3368264e3df955f6e2d68", "patch": "@@ -61,22 +61,24 @@\n ;; Simple ALU without shift\n (define_insn_reservation \"cortex_a15_alu\" 2\n   (and (eq_attr \"tune\" \"cortexa15\")\n-       (and (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\")\n+       (and (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,\\\n+                             mov_imm,mov_reg,\\\n+                             mvn_imm,mvn_reg\")\n             (eq_attr \"neon_type\" \"none\")))\n   \"ca15_issue1,(ca15_sx1,ca15_sx1_alu)|(ca15_sx2,ca15_sx2_alu)\")\n \n ;; ALU ops with immediate shift\n (define_insn_reservation \"cortex_a15_alu_shift\" 3\n   (and (eq_attr \"tune\" \"cortexa15\")\n-       (and (eq_attr \"type\" \"extend,arlo_shift\")\n+       (and (eq_attr \"type\" \"extend,arlo_shift,,mov_shift,mvn_shift\")\n             (eq_attr \"neon_type\" \"none\")))\n   \"ca15_issue1,(ca15_sx1,ca15_sx1+ca15_sx1_shf,ca15_sx1_alu)\\\n \t       |(ca15_sx2,ca15_sx2+ca15_sx2_shf,ca15_sx2_alu)\")\n \n ;; ALU ops with register controlled shift\n (define_insn_reservation \"cortex_a15_alu_shift_reg\" 3\n   (and (eq_attr \"tune\" \"cortexa15\")\n-       (and (eq_attr \"type\" \"arlo_shift_reg\")\n+       (and (eq_attr \"type\" \"arlo_shift_reg,mov_shift_reg,mvn_shift_reg\")\n \t    (eq_attr \"neon_type\" \"none\")))\n   \"(ca15_issue2,ca15_sx1+ca15_sx2,ca15_sx1_shf,ca15_sx2_alu)\\\n    |(ca15_issue1,(ca15_issue1+ca15_sx2,ca15_sx1+ca15_sx2_shf)\\"}, {"sha": "1400c47d95a91417e1e0792b446536618ec43c78", "filename": "gcc/config/arm/cortex-a5.md", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Fcortex-a5.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Fcortex-a5.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a5.md?ref=859abddd0692f10f89f3368264e3df955f6e2d68", "patch": "@@ -58,12 +58,15 @@\n \n (define_insn_reservation \"cortex_a5_alu\" 2\n   (and (eq_attr \"tune\" \"cortexa5\")\n-       (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\"))\n+       (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,\\\n+                        mov_imm,mov_reg,mvn_imm,mvn_reg\"))\n   \"cortex_a5_ex1\")\n \n (define_insn_reservation \"cortex_a5_alu_shift\" 2\n   (and (eq_attr \"tune\" \"cortexa5\")\n-       (eq_attr \"type\" \"extend,arlo_shift,arlo_shift_reg\"))\n+       (eq_attr \"type\" \"extend,arlo_shift,arlo_shift_reg,\\\n+                        mov_shift,mov_shift_reg,\\\n+                        mvn_shift,mvn_shift_reg\"))\n   \"cortex_a5_ex1\")\n \n ;; Forwarding path for unshifted operands."}, {"sha": "2f9107994c955e3341116f003d65571ff5c76466", "filename": "gcc/config/arm/cortex-a53.md", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Fcortex-a53.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Fcortex-a53.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a53.md?ref=859abddd0692f10f89f3368264e3df955f6e2d68", "patch": "@@ -67,12 +67,15 @@\n \n (define_insn_reservation \"cortex_a53_alu\" 2\n   (and (eq_attr \"tune\" \"cortexa53\")\n-       (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\"))\n+       (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,\\\n+                        mov_imm,mov_reg,mvn_imm,mvn_reg\"))\n   \"cortex_a53_slot_any\")\n \n (define_insn_reservation \"cortex_a53_alu_shift\" 2\n   (and (eq_attr \"tune\" \"cortexa53\")\n-       (eq_attr \"type\" \"arlo_shift,arlo_shift_reg\"))\n+       (eq_attr \"type\" \"arlo_shift,arlo_shift_reg,\\\n+                        mov_shift,mov_shift_reg,\\\n+                        mvn_shift,mvn_shift_reg\"))\n   \"cortex_a53_slot_any\")\n \n ;; Forwarding path for unshifted operands."}, {"sha": "e14413d5083a206052ee9c63a0b67fb336c1bc6f", "filename": "gcc/config/arm/cortex-a7.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Fcortex-a7.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Fcortex-a7.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a7.md?ref=859abddd0692f10f89f3368264e3df955f6e2d68", "patch": "@@ -88,9 +88,9 @@\n ;; ALU instruction with an immediate operand can dual-issue.\n (define_insn_reservation \"cortex_a7_alu_imm\" 2\n   (and (eq_attr \"tune\" \"cortexa7\")\n-       (and (ior (eq_attr \"type\" \"arlo_imm\")\n+       (and (ior (eq_attr \"type\" \"arlo_imm,mov_imm,mvn_imm\")\n                  (ior (eq_attr \"type\" \"extend\")\n-                      (and (eq_attr \"insn\" \"mov\")\n+                      (and (eq_attr \"type\" \"mov_reg,mov_shift,mov_shift_reg\")\n                            (not (eq_attr \"length\" \"8\")))))\n             (eq_attr \"neon_type\" \"none\")))\n   \"cortex_a7_ex2|cortex_a7_ex1\")\n@@ -99,13 +99,15 @@\n ;; with a younger immediate-based instruction.\n (define_insn_reservation \"cortex_a7_alu_reg\" 2\n   (and (eq_attr \"tune\" \"cortexa7\")\n-       (and (eq_attr \"type\" \"arlo_reg,shift,shift_reg\")\n+       (and (eq_attr \"type\" \"arlo_reg,shift,shift_reg,mov_reg,mvn_reg\")\n             (eq_attr \"neon_type\" \"none\")))\n   \"cortex_a7_ex1\")\n \n (define_insn_reservation \"cortex_a7_alu_shift\" 2\n   (and (eq_attr \"tune\" \"cortexa7\")\n-       (and (eq_attr \"type\" \"arlo_shift,arlo_shift_reg\")\n+       (and (eq_attr \"type\" \"arlo_shift,arlo_shift_reg,\\\n+                             mov_shift,mov_shift_reg,\\\n+                             mvn_shift,mvn_shift_reg\")\n             (eq_attr \"neon_type\" \"none\")))\n   \"cortex_a7_ex1\")\n "}, {"sha": "1113a45ff0e499f095adb0f16c3f08a5df4c6a85", "filename": "gcc/config/arm/cortex-a8.md", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Fcortex-a8.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Fcortex-a8.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a8.md?ref=859abddd0692f10f89f3368264e3df955f6e2d68", "patch": "@@ -85,30 +85,27 @@\n ;; (source read in E2 and destination available at the end of that cycle).\n (define_insn_reservation \"cortex_a8_alu\" 2\n   (and (eq_attr \"tune\" \"cortexa8\")\n-       (ior (and (and (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\")\n-\t\t      (eq_attr \"neon_type\" \"none\"))\n-\t\t (not (eq_attr \"insn\" \"mov,mvn\")))\n+       (ior (and (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\")\n+                 (eq_attr \"neon_type\" \"none\"))\n             (eq_attr \"type\" \"clz\")))\n   \"cortex_a8_default\")\n \n (define_insn_reservation \"cortex_a8_alu_shift\" 2\n   (and (eq_attr \"tune\" \"cortexa8\")\n-       (and (eq_attr \"type\" \"extend,arlo_shift\")\n-            (not (eq_attr \"insn\" \"mov,mvn\"))))\n+       (eq_attr \"type\" \"extend,arlo_shift\"))\n   \"cortex_a8_default\")\n \n (define_insn_reservation \"cortex_a8_alu_shift_reg\" 2\n   (and (eq_attr \"tune\" \"cortexa8\")\n-       (and (eq_attr \"type\" \"arlo_shift_reg\")\n-            (not (eq_attr \"insn\" \"mov,mvn\"))))\n+       (eq_attr \"type\" \"arlo_shift_reg\"))\n   \"cortex_a8_default\")\n \n ;; Move instructions.\n \n (define_insn_reservation \"cortex_a8_mov\" 1\n   (and (eq_attr \"tune\" \"cortexa8\")\n-       (and (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,extend,arlo_shift,arlo_shift_reg\")\n-            (eq_attr \"insn\" \"mov,mvn\")))\n+       (eq_attr \"type\" \"mov_imm,mov_reg,mov_shift,mov_shift_reg,\\\n+                        mvn_imm,mvn_reg,mvn_shift,mvn_shift_reg\"))\n   \"cortex_a8_default\")\n \n ;; Exceptions to the default latencies for data processing instructions."}, {"sha": "11dc0b32c38b250bd6bba4b5e390403c3de3812e", "filename": "gcc/config/arm/cortex-a9.md", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Fcortex-a9.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Fcortex-a9.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a9.md?ref=859abddd0692f10f89f3368264e3df955f6e2d68", "patch": "@@ -80,18 +80,17 @@ cortex_a9_p1_e2 + cortex_a9_p0_e1 + cortex_a9_p1_e1\")\n ;; which can go down E2 without any problem.\n (define_insn_reservation \"cortex_a9_dp\" 2\n   (and (eq_attr \"tune\" \"cortexa9\")\n-         (ior (and (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\")\n-                        (eq_attr \"neon_type\" \"none\"))\n-\t      (and (and (eq_attr \"type\" \"arlo_shift_reg,extend,arlo_shift\")\n-\t\t\t(eq_attr \"insn\" \"mov\"))\n-                 (eq_attr \"neon_type\" \"none\"))))\n+       (and (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,\\\n+                             mov_imm,mov_reg,mvn_imm,mvn_reg,\\\n+                             mov_shift_reg,mov_shift\")\n+            (eq_attr \"neon_type\" \"none\")))\n   \"cortex_a9_p0_default|cortex_a9_p1_default\")\n \n ;; An instruction using the shifter will go down E1.\n (define_insn_reservation \"cortex_a9_dp_shift\" 3\n    (and (eq_attr \"tune\" \"cortexa9\")\n-\t(and (eq_attr \"type\" \"arlo_shift_reg,extend,arlo_shift\")\n-\t     (not (eq_attr \"insn\" \"mov\"))))\n+        (eq_attr \"type\" \"arlo_shift_reg,extend,arlo_shift,\\\n+                         mvn_shift,mvn_shift_reg\"))\n    \"cortex_a9_p0_shift | cortex_a9_p1_shift\")\n \n ;; Loads have a latency of 4 cycles."}, {"sha": "53bd60cd98f66c6f51e68bb69ffaa722df03fd51", "filename": "gcc/config/arm/cortex-m4.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Fcortex-m4.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Fcortex-m4.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-m4.md?ref=859abddd0692f10f89f3368264e3df955f6e2d68", "patch": "@@ -32,7 +32,9 @@\n (define_insn_reservation \"cortex_m4_alu\" 1\n   (and (eq_attr \"tune\" \"cortexm4\")\n        (ior (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,extend,\\\n-                             arlo_shift,arlo_shift_reg\")\n+                             arlo_shift,arlo_shift_reg,\\\n+                             mov_imm,mov_reg,mov_shift,mov_shift_reg,\\\n+                             mvn_imm,mvn_reg,mvn_shift,mvn_shift_reg\")\n \t    (ior (eq_attr \"mul32\" \"yes\")\n \t\t (eq_attr \"mul64\" \"yes\"))))\n   \"cortex_m4_ex\")"}, {"sha": "597774dbd89d766921c4f050211b567a1ceefa0a", "filename": "gcc/config/arm/cortex-r4.md", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Fcortex-r4.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Fcortex-r4.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-r4.md?ref=859abddd0692f10f89f3368264e3df955f6e2d68", "patch": "@@ -78,24 +78,22 @@\n ;; for the purposes of the dual-issue constraints above.\n (define_insn_reservation \"cortex_r4_alu\" 2\n   (and (eq_attr \"tune_cortexr4\" \"yes\")\n-       (and (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\")\n-            (not (eq_attr \"insn\" \"mov\"))))\n+       (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,mvn_imm,mvn_reg\"))\n   \"cortex_r4_alu\")\n \n (define_insn_reservation \"cortex_r4_mov\" 2\n   (and (eq_attr \"tune_cortexr4\" \"yes\")\n-       (and (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\")\n-            (eq_attr \"insn\" \"mov\")))\n+       (eq_attr \"type\" \"mov_imm,mov_reg\"))\n   \"cortex_r4_mov\")\n \n (define_insn_reservation \"cortex_r4_alu_shift\" 2\n   (and (eq_attr \"tune_cortexr4\" \"yes\")\n-       (eq_attr \"type\" \"extend,arlo_shift\"))\n+       (eq_attr \"type\" \"extend,arlo_shift,mov_shift,mvn_shift\"))\n   \"cortex_r4_alu\")\n \n (define_insn_reservation \"cortex_r4_alu_shift_reg\" 2\n   (and (eq_attr \"tune_cortexr4\" \"yes\")\n-       (eq_attr \"type\" \"arlo_shift_reg\"))\n+       (eq_attr \"type\" \"arlo_shift_reg,mov_shift_reg,mvn_shift_reg\"))\n   \"cortex_r4_alu_shift_reg\")\n \n ;; An ALU instruction followed by an ALU instruction with no early dep."}, {"sha": "9ec92d60dc5a6017a76db881e7e165120d149af8", "filename": "gcc/config/arm/fa526.md", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Ffa526.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Ffa526.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffa526.md?ref=859abddd0692f10f89f3368264e3df955f6e2d68", "patch": "@@ -62,12 +62,15 @@\n ;; ALU operations\n (define_insn_reservation \"526_alu_op\" 1\n  (and (eq_attr \"tune\" \"fa526\")\n-      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\"))\n+      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,\\\n+                       mov_imm,mov_reg,mvn_imm,mvn_reg\"))\n  \"fa526_core\")\n \n (define_insn_reservation \"526_alu_shift_op\" 2\n  (and (eq_attr \"tune\" \"fa526\")\n-      (eq_attr \"type\" \"extend,arlo_shift,arlo_shift_reg\"))\n+      (eq_attr \"type\" \"extend,arlo_shift,arlo_shift_reg,\\\n+                       mov_shift,mov_shift_reg,\\\n+                       mvn_shift,mvn_shift_reg\"))\n  \"fa526_core\")\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}, {"sha": "e61242886d7bd154639e1be00b2b20a74d611d12", "filename": "gcc/config/arm/fa606te.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Ffa606te.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Ffa606te.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffa606te.md?ref=859abddd0692f10f89f3368264e3df955f6e2d68", "patch": "@@ -62,7 +62,10 @@\n ;; ALU operations\n (define_insn_reservation \"606te_alu_op\" 1\n  (and (eq_attr \"tune\" \"fa606te\")\n-      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,extend,arlo_shift,arlo_shift_reg\"))\n+      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,\n+                       extend,arlo_shift,arlo_shift_reg,\\\n+                       mov_imm,mov_reg,mov_shift,mov_shift_reg,\\\n+                       mvn_imm,mvn_reg,mvn_shift,mvn_shift_reg\"))\n  \"fa606te_core\")\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}, {"sha": "04d2a5cf33f25a3c54bc84dc09c192137f4bb672", "filename": "gcc/config/arm/fa626te.md", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Ffa626te.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Ffa626te.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffa626te.md?ref=859abddd0692f10f89f3368264e3df955f6e2d68", "patch": "@@ -68,12 +68,15 @@\n ;; ALU operations\n (define_insn_reservation \"626te_alu_op\" 1\n  (and (eq_attr \"tune\" \"fa626,fa626te\")\n-      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\"))\n+      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,\\\n+                       mov_imm,mov_reg,mvn_imm,mvn_reg\"))\n  \"fa626te_core\")\n \n (define_insn_reservation \"626te_alu_shift_op\" 2\n  (and (eq_attr \"tune\" \"fa626,fa626te\")\n-      (eq_attr \"type\" \"extend,arlo_shift,arlo_shift_reg\"))\n+      (eq_attr \"type\" \"extend,arlo_shift,arlo_shift_reg,\\\n+                       mov_shift,mov_shift_reg,\\\n+                       mvn_shift,mvn_shift_reg\"))\n  \"fa626te_core\")\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}, {"sha": "342b9bf5d33cbe2f2c74fa2ea47aa3ee936a6d53", "filename": "gcc/config/arm/fa726te.md", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Ffa726te.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Ffa726te.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffa726te.md?ref=859abddd0692f10f89f3368264e3df955f6e2d68", "patch": "@@ -78,15 +78,15 @@\n ;; Move instructions.\n (define_insn_reservation \"726te_shift_op\" 1\n   (and (eq_attr \"tune\" \"fa726te\")\n-       (eq_attr \"insn\" \"mov,mvn\"))\n+       (eq_attr \"type\" \"mov_imm,mov_reg,mov_shift,mov_shift_reg,\\\n+                        mvn_imm,mvn_reg,mvn_shift,mvn_shift_reg\"))\n   \"fa726te_issue+(fa726te_alu0_pipe|fa726te_alu1_pipe)\")\n \n ;; ALU operations with no shifted operand will finished in 1 cycle\n ;; Other ALU instructions 2 cycles.\n (define_insn_reservation \"726te_alu_op\" 1\n  (and (eq_attr \"tune\" \"fa726te\")\n-      (and (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\")\n-           (not (eq_attr \"insn\" \"mov,mvn\"))))\n+      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\"))\n   \"fa726te_issue+(fa726te_alu0_pipe|fa726te_alu1_pipe)\")\n \n ;; ALU operations with a shift-by-register operand.\n@@ -95,14 +95,12 @@\n ;; it takes 3 cycles.\n (define_insn_reservation \"726te_alu_shift_op\" 3\n  (and (eq_attr \"tune\" \"fa726te\")\n-      (and (eq_attr \"type\" \"extend,arlo_shift\")\n-           (not (eq_attr \"insn\" \"mov,mvn\"))))\n+      (eq_attr \"type\" \"extend,arlo_shift\"))\n   \"fa726te_issue+(fa726te_alu0_pipe|fa726te_alu1_pipe)\")\n \n (define_insn_reservation \"726te_alu_shift_reg_op\" 3\n  (and (eq_attr \"tune\" \"fa726te\")\n-      (and (eq_attr \"type\" \"arlo_shift_reg\")\n-           (not (eq_attr \"insn\" \"mov,mvn\"))))\n+      (eq_attr \"type\" \"arlo_shift_reg\"))\n   \"fa726te_issue+(fa726te_alu0_pipe|fa726te_alu1_pipe)\")\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;; Multiplication Instructions"}, {"sha": "944645b9ead395be7950ff7dfbdcb72310cb39ff", "filename": "gcc/config/arm/fmp626.md", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Ffmp626.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Ffmp626.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffmp626.md?ref=859abddd0692f10f89f3368264e3df955f6e2d68", "patch": "@@ -63,12 +63,15 @@\n ;; ALU operations\n (define_insn_reservation \"mp626_alu_op\" 1\n  (and (eq_attr \"tune\" \"fmp626\")\n-      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\"))\n+      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,\\\n+                       mov_imm,mov_reg,mvn_imm,mvn_reg\"))\n  \"fmp626_core\")\n \n (define_insn_reservation \"mp626_alu_shift_op\" 2\n  (and (eq_attr \"tune\" \"fmp626\")\n-      (eq_attr \"type\" \"extend,arlo_shift,arlo_shift_reg\"))\n+      (eq_attr \"type\" \"extend,arlo_shift,arlo_shift_reg,\\\n+                       mov_shift,mov_shift_reg,\\\n+                       mvn_shift,mvn_shift_reg\"))\n  \"fmp626_core\")\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}, {"sha": "0e2c443721e5bff7fc50b46177b0b288c8bf90d9", "filename": "gcc/config/arm/marvell-pj4.md", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Fmarvell-pj4.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Fmarvell-pj4.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmarvell-pj4.md?ref=859abddd0692f10f89f3368264e3df955f6e2d68", "patch": "@@ -41,54 +41,54 @@\n \n (define_insn_reservation \"pj4_alu_e1\" 1\n   (and (eq_attr \"tune\" \"marvell_pj4\")\n-       (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\")\n-       (not (eq_attr \"conds\" \"set\"))\n-       (eq_attr \"insn\" \"mov,mvn\"))\n+       (eq_attr \"type\" \"mov_imm,mov_reg,mvn_imm,mvn_reg\")\n+       (not (eq_attr \"conds\" \"set\")))\n                                \"pj4_is,(pj4_alu1,pj4_w1+pj4_cp)|(pj4_alu2,pj4_w2+pj4_cp)\")\n \n (define_insn_reservation \"pj4_alu_e1_conds\" 4\n   (and (eq_attr \"tune\" \"marvell_pj4\")\n-       (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\")\n-       (eq_attr \"conds\" \"set\")\n-       (eq_attr \"insn\" \"mov,mvn\"))\n+       (eq_attr \"type\" \"mov_imm,mov_reg,mvn_imm,mvn_reg\")\n+       (eq_attr \"conds\" \"set\"))\n                                \"pj4_is,(pj4_alu1,pj4_w1+pj4_cp)|(pj4_alu2,pj4_w2+pj4_cp)\")\n \n (define_insn_reservation \"pj4_alu\" 1\n   (and (eq_attr \"tune\" \"marvell_pj4\")\n        (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\")\n-       (not (eq_attr \"conds\" \"set\"))\n-       (not (eq_attr \"insn\" \"mov,mvn\")))\n+       (not (eq_attr \"conds\" \"set\")))\n                                \"pj4_is,(pj4_alu1,pj4_w1+pj4_cp)|(pj4_alu2,pj4_w2+pj4_cp)\")\n \n (define_insn_reservation \"pj4_alu_conds\" 4\n   (and (eq_attr \"tune\" \"marvell_pj4\")\n        (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\")\n-       (eq_attr \"conds\" \"set\")\n-       (not (eq_attr \"insn\" \"mov,mvn\")))\n+       (eq_attr \"conds\" \"set\"))\n                                \"pj4_is,(pj4_alu1,pj4_w1+pj4_cp)|(pj4_alu2,pj4_w2+pj4_cp)\")\n \n (define_insn_reservation \"pj4_shift\" 1\n   (and (eq_attr \"tune\" \"marvell_pj4\")\n-       (eq_attr \"type\" \"arlo_shift,arlo_shift_reg,extend\")\n+       (eq_attr \"type\" \"arlo_shift,arlo_shift_reg,extend,\\\n+                        mov_shift,mvn_shift,mov_shift_reg,mvn_shift_reg\")\n        (not (eq_attr \"conds\" \"set\"))\n        (eq_attr \"shift\" \"1\"))  \"pj4_is,(pj4_alu1,pj4_w1+pj4_cp)|(pj4_alu2,pj4_w2+pj4_cp)\")\n \n (define_insn_reservation \"pj4_shift_conds\" 4\n   (and (eq_attr \"tune\" \"marvell_pj4\")\n-       (eq_attr \"type\" \"arlo_shift,arlo_shift_reg,extend\")\n+       (eq_attr \"type\" \"arlo_shift,arlo_shift_reg,extend,\\\n+                        mov_shift,mvn_shift,mov_shift_reg,mvn_shift_reg\")\n        (eq_attr \"conds\" \"set\")\n        (eq_attr \"shift\" \"1\"))  \"pj4_is,(pj4_alu1,pj4_w1+pj4_cp)|(pj4_alu2,pj4_w2+pj4_cp)\")\n \n (define_insn_reservation \"pj4_alu_shift\" 1\n   (and (eq_attr \"tune\" \"marvell_pj4\")\n        (not (eq_attr \"conds\" \"set\"))\n-       (eq_attr \"type\" \"arlo_shift,arlo_shift_reg,extend\"))\n+       (eq_attr \"type\" \"arlo_shift,arlo_shift_reg,extend,\\\n+                        mov_shift,mvn_shift,mov_shift_reg,mvn_shift_reg\"))\n                                \"pj4_is,(pj4_alu1,nothing,pj4_w1+pj4_cp)|(pj4_alu2,nothing,pj4_w2+pj4_cp)\")\n \n (define_insn_reservation \"pj4_alu_shift_conds\" 4\n   (and (eq_attr \"tune\" \"marvell_pj4\")\n        (eq_attr \"conds\" \"set\")\n-       (eq_attr \"type\" \"arlo_shift,arlo_shift_reg,extend\"))\n+       (eq_attr \"type\" \"arlo_shift,arlo_shift_reg,extend,\\\n+                        mov_shift,mvn_shift,mov_shift_reg,mvn_shift_reg\"))\n                                \"pj4_is,(pj4_alu1,nothing,pj4_w1+pj4_cp)|(pj4_alu2,nothing,pj4_w2+pj4_cp)\")\n \n (define_bypass 2 \"pj4_alu_shift,pj4_shift\""}, {"sha": "e8d2285fa8126f92472c777bea094caa24fb60bd", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=859abddd0692f10f89f3368264e3df955f6e2d68", "patch": "@@ -61,8 +61,7 @@\n     }\n }\n  [(set_attr \"neon_type\" \"neon_int_1,*,neon_vmov,*,neon_mrrc,neon_mcr_2_mcrr,*,*,*\")\n-  (set_attr \"type\" \"*,f_stored,*,f_loadd,*,*,arlo_reg,load2,store2\")\n-  (set_attr \"insn\" \"*,*,*,*,*,*,mov,*,*\")\n+  (set_attr \"type\" \"*,f_stored,*,f_loadd,*,*,mov_reg,load2,store2\")\n   (set_attr \"length\" \"4,4,4,4,4,4,8,8,8\")\n   (set_attr \"arm_pool_range\"     \"*,*,*,1020,*,*,*,1020,*\")\n   (set_attr \"thumb2_pool_range\"     \"*,*,*,1018,*,*,*,1018,*\")\n@@ -107,8 +106,7 @@\n }\n   [(set_attr \"neon_type\" \"neon_int_1,neon_stm_2,neon_vmov,neon_ldm_2,\\\n                           neon_mrrc,neon_mcr_2_mcrr,*,*,*\")\n-   (set_attr \"type\" \"*,*,*,*,*,*,arlo_reg,load4,store4\")\n-   (set_attr \"insn\" \"*,*,*,*,*,*,mov,*,*\")\n+   (set_attr \"type\" \"*,*,*,*,*,*,mov_reg,load4,store4\")\n    (set_attr \"length\" \"4,8,4,8,8,8,16,8,16\")\n    (set_attr \"arm_pool_range\" \"*,*,*,1020,*,*,*,1020,*\")\n    (set_attr \"thumb2_pool_range\" \"*,*,*,1018,*,*,*,1018,*\")"}, {"sha": "ef8777a900bfdc539b3d688665d815e61873f693", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859abddd0692f10f89f3368264e3df955f6e2d68/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=859abddd0692f10f89f3368264e3df955f6e2d68", "patch": "@@ -53,9 +53,8 @@\n     }\n   \"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"*,*,arlo_imm,arlo_imm,load1,store1,r_2_f,f_2_r,fcpys,f_loads,f_stores\")\n+   (set_attr \"type\" \"mov_reg,mov_reg,mvn_imm,mov_imm,load1,store1,r_2_f,f_2_r,fcpys,f_loads,f_stores\")\n    (set_attr \"neon_type\" \"*,*,*,*,*,*,neon_mcr,neon_mrc,neon_vmov,*,*\")\n-   (set_attr \"insn\" \"mov,mov,mvn,mov,*,*,*,*,*,*,*\")\n    (set_attr \"pool_range\"     \"*,*,*,*,4096,*,*,*,*,1020,*\")\n    (set_attr \"neg_pool_range\" \"*,*,*,*,4084,*,*,*,*,1008,*\")]\n )\n@@ -102,10 +101,9 @@\n   \"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"yes,no,yes,no,no,no,no,no,no,no,no,no,no,no\")\n-   (set_attr \"type\" \"*,*,*,*,*,load1,load1,store1,store1,r_2_f,f_2_r,fcpys,f_loads,f_stores\")\n+   (set_attr \"type\" \"mov_reg,mov_reg,mov_reg,mvn_reg,mov_reg,load1,load1,store1,store1,r_2_f,f_2_r,fcpys,f_loads,f_stores\")\n    (set_attr \"length\" \"2,4,2,4,4,4,4,4,4,4,4,4,4,4\")\n    (set_attr \"neon_type\" \"*,*,*,*,*,*,*,*,*,neon_mcr,neon_mrc,neon_vmov,*,*\")\n-   (set_attr \"insn\" \"mov,mov,mov,mvn,mov,*,*,*,*,*,*,*,*,*\")\n    (set_attr \"pool_range\"     \"*,*,*,*,*,1018,4094,*,*,*,*,*,1018,*\")\n    (set_attr \"neg_pool_range\" \"*,*,*,*,*,   0,   0,*,*,*,*,*,1008,*\")]\n )\n@@ -357,9 +355,8 @@\n   \"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"type\"\n-     \"r_2_f,f_2_r,fconsts,f_loads,f_stores,load1,store1,fcpys,*\")\n+     \"r_2_f,f_2_r,fconsts,f_loads,f_stores,load1,store1,fcpys,mov_reg\")\n    (set_attr \"neon_type\" \"neon_mcr,neon_mrc,*,*,*,*,*,neon_vmov,*\")\n-   (set_attr \"insn\" \"*,*,*,*,*,*,*,*,mov\")\n    (set_attr \"pool_range\" \"*,*,*,1020,*,4096,*,*,*\")\n    (set_attr \"neg_pool_range\" \"*,*,*,1008,*,4080,*,*,*\")]\n )\n@@ -396,9 +393,8 @@\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")\n    (set_attr \"type\"\n-     \"r_2_f,f_2_r,fconsts,f_loads,f_stores,load1,store1,fcpys,*\")\n+     \"r_2_f,f_2_r,fconsts,f_loads,f_stores,load1,store1,fcpys,mov_reg\")\n    (set_attr \"neon_type\" \"neon_mcr,neon_mrc,*,*,*,*,*,neon_vmov,*\")\n-   (set_attr \"insn\" \"*,*,*,*,*,*,*,*,mov\")\n    (set_attr \"pool_range\" \"*,*,*,1018,*,4090,*,*,*\")\n    (set_attr \"neg_pool_range\" \"*,*,*,1008,*,0,*,*,*\")]\n )"}]}