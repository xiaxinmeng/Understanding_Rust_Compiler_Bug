{"sha": "a0d85b7572a80c023a0eef537a8c94e6af280c51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBkODViNzU3MmE4MGMwMjNhMGVlZjUzN2E4Yzk0ZTZhZjI4MGM1MQ==", "commit": {"author": {"name": "Dave Brolley", "email": "brolley@cygnus.com", "date": "1998-06-10T10:12:36Z"}, "committer": {"name": "Dave Brolley", "email": "brolley@gcc.gnu.org", "date": "1998-06-10T10:12:36Z"}, "message": "Integrate cpplib into the C and C++ front ends.\n\nWed Jun 10 13:07:02 1998  Dave Brolley  <brolley@cygnus.com>\n\t* objc/objc-act.c: Add cpplib declarations.\n\t(lang_decode_option): Initialize cpplib if necessary.\n\t(lang_decode_option): New argc/argv interface.\n\t* tree.h (lang_decode_option): New argc/argv interface.\n\t* toplev.c (lang_options): Add cpp options.\n\t(main): New interface for lang_decode_option.\n\t* gcc.c (default_compilers): Don't call cpp for a cpplib-enabled C compiler\n\tunless -E, -M or -MM is specified.\n\t* cpplib.h (cpp_handle_option): New function.\n\t* cpplib.c (cpp_handle_option): New function.\n\t(cpp_handle_options): Now calls cpp_handle_option.\n\t* c-tree.h (c_decode_option): New argc/argv interface.\n\t* c-lex.c (init_parse): cpplib now initialized in c_decode_option.\n\t* c-lang.c (lang_decode_option): New argc/argv interface.\n\t* c-decl.c: Add cpplib declarations.\n\t(c_decode_option): New argc/argv interface.\n\t(c_decode_option): Call cpp_handle_option.\n\t(c_decode_option): Now returns number of strings processed.\n\nFrom-SVN: r20407", "tree": {"sha": "34e222e6636a47fccb9290f46b926d67612b47a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34e222e6636a47fccb9290f46b926d67612b47a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0d85b7572a80c023a0eef537a8c94e6af280c51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0d85b7572a80c023a0eef537a8c94e6af280c51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0d85b7572a80c023a0eef537a8c94e6af280c51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0d85b7572a80c023a0eef537a8c94e6af280c51/comments", "author": null, "committer": null, "parents": [{"sha": "0875c2f39b0d864b3dcd220b4f594b58d48e82f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0875c2f39b0d864b3dcd220b4f594b58d48e82f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0875c2f39b0d864b3dcd220b4f594b58d48e82f1"}], "stats": {"total": 1075, "additions": 600, "deletions": 475}, "files": [{"sha": "393f5b75a61f059c59ceaecb293a621499bb1141", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d85b7572a80c023a0eef537a8c94e6af280c51/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d85b7572a80c023a0eef537a8c94e6af280c51/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0d85b7572a80c023a0eef537a8c94e6af280c51", "patch": "@@ -1,3 +1,24 @@\n+Wed Jun 10 13:07:02 1998  Dave Brolley  <brolley@cygnus.com>\n+\n+\t* objc/objc-act.c: Add cpplib declarations.\n+\t(lang_decode_option): Initialize cpplib if necessary.\n+\t(lang_decode_option): New argc/argv interface. \n+\t* tree.h (lang_decode_option): New argc/argv interface. \n+\t* toplev.c (lang_options): Add cpp options.\n+\t(main): New interface for lang_decode_option.\n+\t* gcc.c (default_compilers): Don't call cpp for a cpplib-enabled C compiler\n+\tunless -E, -M or -MM is specified.\n+\t* cpplib.h (cpp_handle_option): New function. \n+\t* cpplib.c (cpp_handle_option): New function.\n+\t(cpp_handle_options): Now calls cpp_handle_option.\n+\t* c-tree.h (c_decode_option): New argc/argv interface. \n+\t* c-lex.c (init_parse): cpplib now initialized in c_decode_option.\n+\t* c-lang.c (lang_decode_option): New argc/argv interface.\n+\t* c-decl.c: Add cpplib declarations.\n+\t(c_decode_option): New argc/argv interface.\n+\t(c_decode_option): Call cpp_handle_option.\n+\t(c_decode_option): Now returns number of strings processed.\n+\n Wed Jun 10 09:47:13 1998  Richard Earnshaw (rearnsha@arm.com)\n \n \t* unroll.c (verify_addresses): Use validate_replace_rtx to undo the "}, {"sha": "bce134ca9d90615f1d62305b00d13f685f96cce6", "filename": "gcc/LANGUAGES", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d85b7572a80c023a0eef537a8c94e6af280c51/gcc%2FLANGUAGES", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d85b7572a80c023a0eef537a8c94e6af280c51/gcc%2FLANGUAGES", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FLANGUAGES?ref=a0d85b7572a80c023a0eef537a8c94e6af280c51", "patch": "@@ -6,6 +6,13 @@ time as we can formally start documenting the interface this file will\n serve as a repository for information on these interface and any incompatable\n changes we've made.\n \n+Jun 10, 1998:\n+  The interface to lang_decode_option has changed. It now uses and argc/argv\n+  interface to allow for options that use more than one input string. The new\n+  declaration is: int lang_decode_option (int argc, char** argv). It now\n+  returns the number of input strings processed, or 0 if the option is\n+  unknown.\n+\n Jun  7, 1998:\n   Front-ends must now define lang_init_options.  It is safe for this\n   function to do nothing.  See c-lang.c."}, {"sha": "0f2a3f2ccac91172a6925196a3b33683aac253e4", "filename": "gcc/c-decl.c", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d85b7572a80c023a0eef537a8c94e6af280c51/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d85b7572a80c023a0eef537a8c94e6af280c51/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=a0d85b7572a80c023a0eef537a8c94e6af280c51", "patch": "@@ -35,6 +35,13 @@ Boston, MA 02111-1307, USA.  */\n #include \"c-lex.h\"\n #include \"toplev.h\"\n \n+#if USE_CPPLIB\n+#include \"cpplib.h\"\n+extern cpp_reader  parse_in;\n+extern cpp_options parse_options;\n+static int cpp_initialized;\n+#endif\n+\n /* In grokdeclarator, distinguish syntactic contexts of declarators.  */\n enum decl_context\n { NORMAL,\t\t\t/* Ordinary declaration */\n@@ -578,13 +585,28 @@ int warn_sign_compare = -1;\n int dollars_in_ident = DOLLARS_IN_IDENTIFIERS;\n \n /* Decode the string P as a language-specific option for C.\n-   Return 1 if it is recognized (and handle it);\n-   return 0 if not recognized.  */\n+   Return the number of strings consumed.  */\n    \n int\n-c_decode_option (p)\n-     char *p;\n+c_decode_option (argc, argv)\n+     int argc;\n+     char **argv;\n {\n+  int strings_processed;\n+  char *p = argv[0];\n+#if USE_CPPLIB\n+  if (! cpp_initialized)\n+    {\n+      cpp_reader_init (&parse_in);\n+      parse_in.data = &parse_options;\n+      cpp_options_init (&parse_options);\n+      cpp_initialized = 1;\n+    }\n+  strings_processed = cpp_handle_option (&parse_in, argc, argv);\n+#else\n+  strings_processed = 0;\n+#endif /* ! USE_CPPLIB */\n+\n   if (!strcmp (p, \"-ftraditional\") || !strcmp (p, \"-traditional\"))\n     {\n       flag_traditional = 1;\n@@ -799,7 +821,7 @@ c_decode_option (p)\n       warn_unknown_pragmas = 1;\n     }\n   else\n-    return 0;\n+    return strings_processed;\n \n   return 1;\n }"}, {"sha": "4a21666cb170e2fbfb2b3972cbd6ef5900dcad77", "filename": "gcc/c-lang.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d85b7572a80c023a0eef537a8c94e6af280c51/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d85b7572a80c023a0eef537a8c94e6af280c51/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=a0d85b7572a80c023a0eef537a8c94e6af280c51", "patch": "@@ -31,10 +31,11 @@ Boston, MA 02111-1307, USA.  */\n    is an alternative to a function in objc-actions.c.  */\n    \n int\n-lang_decode_option (p)\n-     char *p;\n+lang_decode_option (argc, argv)\n+     int argc;\n+     char **argv;\n {\n-  return c_decode_option (p);\n+  return c_decode_option (argc, argv);\n }\n \n void"}, {"sha": "840ad14b99b7f91edfb1af6632ad0bb2b8e513f4", "filename": "gcc/c-lex.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d85b7572a80c023a0eef537a8c94e6af280c51/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d85b7572a80c023a0eef537a8c94e6af280c51/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=a0d85b7572a80c023a0eef537a8c94e6af280c51", "patch": "@@ -200,10 +200,6 @@ init_parse (filename)\n   yy_cur = \"\\n\";\n   yy_lim = yy_cur+1;\n \n-  cpp_reader_init (&parse_in);\n-  parse_in.data = &parse_options;\n-  cpp_options_init (&parse_options);\n-  cpp_handle_options (&parse_in, 0, NULL); /* FIXME */\n   parse_in.show_column = 1;\n   if (! cpp_start_read (&parse_in, filename))\n     abort ();"}, {"sha": "a2a76c032b8221607c3a9bf9c30cde2fa394d878", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d85b7572a80c023a0eef537a8c94e6af280c51/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d85b7572a80c023a0eef537a8c94e6af280c51/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=a0d85b7572a80c023a0eef537a8c94e6af280c51", "patch": "@@ -263,7 +263,7 @@ extern tree build_enumerator                    PROTO((tree, tree));\n extern tree builtin_function                    PROTO((char *, tree, enum built_in_function function_, char *));\n /* Add qualifiers to a type, in the fashion for C.  */\n extern tree c_build_type_variant                PROTO((tree, int, int));\n-extern int  c_decode_option                     PROTO((char *));\n+extern int  c_decode_option                     PROTO((int, char **));\n extern void c_mark_varargs                      PROTO((void));\n extern tree check_identifier                    PROTO((tree, tree));\n extern void clear_parm_order                    PROTO((void));"}, {"sha": "e29de4a2ab573e8d7979a1ed7fbe7d585a46b7cd", "filename": "gcc/cpplib.c", "status": "modified", "additions": 474, "deletions": 455, "changes": 929, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d85b7572a80c023a0eef537a8c94e6af280c51/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d85b7572a80c023a0eef537a8c94e6af280c51/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=a0d85b7572a80c023a0eef537a8c94e6af280c51", "patch": "@@ -6234,507 +6234,526 @@ push_pending (pfile, cmd, arg)\n   CPP_OPTIONS (pfile)->pending = pend;\n }\n \n-/* Handle command-line options in (argc, argv).\n+/* Handle one command-line option in (argc, argv).\n    Can be called multiple times, to handle multiple sets of options.\n-   Returns if an unrecognized option is seen.\n-   Returns number of handled arguments.  */\n-\n+   Returns number of strings consumed.  */\n int\n-cpp_handle_options (pfile, argc, argv)\n+cpp_handle_option (pfile, argc, argv)\n      cpp_reader *pfile;\n      int argc;\n      char **argv;\n {\n-  int i;\n   struct cpp_options *opts = CPP_OPTIONS (pfile);\n-  for (i = 0; i < argc; i++) {\n-    if (argv[i][0] != '-') {\n-      if (opts->out_fname != NULL)\n-\t{\n-\t  cpp_fatal (pfile, \"Usage: %s [switches] input output\", argv[0]);\n-\t  return argc;\n-\t}\n-      else if (opts->in_fname != NULL)\n-\topts->out_fname = argv[i];\n-      else\n-\topts->in_fname = argv[i];\n-    } else {\n-      switch (argv[i][1]) {\n-\n-      missing_filename:\n-\tcpp_fatal (pfile, \"Filename missing after `%s' option\", argv[i]);\n-\treturn argc;\n-      missing_dirname:\n-\tcpp_fatal (pfile, \"Directory name missing after `%s' option\", argv[i]);\n+  int i = 0;\n+  if (argv[i][0] != '-') {\n+    if (opts->out_fname != NULL)\n+      {\n+\tcpp_fatal (pfile, \"Usage: %s [switches] input output\", argv[0]);\n \treturn argc;\n-\n-      case 'i':\n-\tif (!strcmp (argv[i], \"-include\")\n-\t    || !strcmp (argv[i], \"-imacros\")) {\n-\t  if (i + 1 == argc)\n-\t    goto missing_filename;\n-\t  else\n-\t    push_pending (pfile, argv[i], argv[i+1]), i++;\n-\t}\n-\tif (!strcmp (argv[i], \"-iprefix\")) {\n-\t  if (i + 1 == argc)\n-\t    goto missing_filename;\n-\t  else\n-\t    opts->include_prefix = argv[++i];\n-\t}\n-\tif (!strcmp (argv[i], \"-ifoutput\")) {\n-\t  opts->output_conditionals = 1;\n-\t}\n-\tif (!strcmp (argv[i], \"-isystem\")) {\n-\t  struct file_name_list *dirtmp;\n-\n-\t  if (i + 1 == argc)\n-\t    goto missing_filename;\n-\n-\t  dirtmp = (struct file_name_list *)\n-\t    xmalloc (sizeof (struct file_name_list));\n-\t  dirtmp->next = 0;\n-\t  dirtmp->control_macro = 0;\n-\t  dirtmp->c_system_include_path = 1;\n-\t  dirtmp->fname = (char *) xmalloc (strlen (argv[i+1]) + 1);\n-\t  strcpy (dirtmp->fname, argv[++i]);\n-\t  dirtmp->got_name_map = 0;\n-\n-\t  if (opts->before_system == 0)\n-\t    opts->before_system = dirtmp;\n-\t  else\n-\t    opts->last_before_system->next = dirtmp;\n-\t  opts->last_before_system = dirtmp; /* Tail follows the last one */\n-\t}\n-\t/* Add directory to end of path for includes,\n-\t   with the default prefix at the front of its name.  */\n-\tif (!strcmp (argv[i], \"-iwithprefix\")) {\n-\t  struct file_name_list *dirtmp;\n-\t  char *prefix;\n-\n-\t  if (opts->include_prefix != 0)\n-\t    prefix = opts->include_prefix;\n-\t  else {\n-\t    prefix = savestring (GCC_INCLUDE_DIR);\n-\t    /* Remove the `include' from /usr/local/lib/gcc.../include.  */\n-\t    if (!strcmp (prefix + strlen (prefix) - 8, \"/include\"))\n-\t      prefix[strlen (prefix) - 7] = 0;\n-\t  }\n-\n-\t  dirtmp = (struct file_name_list *)\n-\t    xmalloc (sizeof (struct file_name_list));\n-\t  dirtmp->next = 0;\t/* New one goes on the end */\n-\t  dirtmp->control_macro = 0;\n-\t  dirtmp->c_system_include_path = 0;\n-\t  if (i + 1 == argc)\n-\t    goto missing_dirname;\n-\n-\t  dirtmp->fname = (char *) xmalloc (strlen (argv[i+1])\n-\t\t\t\t\t    + strlen (prefix) + 1);\n-\t  strcpy (dirtmp->fname, prefix);\n-\t  strcat (dirtmp->fname, argv[++i]);\n-\t  dirtmp->got_name_map = 0;\n-\n-\t  if (opts->after_include == 0)\n-\t    opts->after_include = dirtmp;\n-\t  else\n-\t    opts->last_after_include->next = dirtmp;\n-\t  opts->last_after_include = dirtmp; /* Tail follows the last one */\n-\t}\n-\t/* Add directory to main path for includes,\n-\t   with the default prefix at the front of its name.  */\n-\tif (!strcmp (argv[i], \"-iwithprefixbefore\")) {\n-\t  struct file_name_list *dirtmp;\n-\t  char *prefix;\n-\n-\t  if (opts->include_prefix != 0)\n-\t    prefix = opts->include_prefix;\n-\t  else {\n-\t    prefix = savestring (GCC_INCLUDE_DIR);\n-\t    /* Remove the `include' from /usr/local/lib/gcc.../include.  */\n-\t    if (!strcmp (prefix + strlen (prefix) - 8, \"/include\"))\n-\t      prefix[strlen (prefix) - 7] = 0;\n-\t  }\n-\n-\t  dirtmp = (struct file_name_list *)\n-\t    xmalloc (sizeof (struct file_name_list));\n-\t  dirtmp->next = 0;\t/* New one goes on the end */\n-\t  dirtmp->control_macro = 0;\n-\t  dirtmp->c_system_include_path = 0;\n-\t  if (i + 1 == argc)\n-\t    goto missing_dirname;\n-\n-\t  dirtmp->fname = (char *) xmalloc (strlen (argv[i+1])\n-\t\t\t\t\t    + strlen (prefix) + 1);\n-\t  strcpy (dirtmp->fname, prefix);\n-\t  strcat (dirtmp->fname, argv[++i]);\n-\t  dirtmp->got_name_map = 0;\n-\n-\t  append_include_chain (pfile, dirtmp, dirtmp);\n+      }\n+    else if (opts->in_fname != NULL)\n+      opts->out_fname = argv[i];\n+    else\n+      opts->in_fname = argv[i];\n+  } else {\n+    switch (argv[i][1]) {\n+      \n+    missing_filename:\n+      cpp_fatal (pfile, \"Filename missing after `%s' option\", argv[i]);\n+      return argc;\n+    missing_dirname:\n+      cpp_fatal (pfile, \"Directory name missing after `%s' option\", argv[i]);\n+      return argc;\n+      \n+    case 'i':\n+      if (!strcmp (argv[i], \"-include\")\n+\t  || !strcmp (argv[i], \"-imacros\")) {\n+\tif (i + 1 == argc)\n+\t  goto missing_filename;\n+\telse\n+\t  push_pending (pfile, argv[i], argv[i+1]), i++;\n+      }\n+      if (!strcmp (argv[i], \"-iprefix\")) {\n+\tif (i + 1 == argc)\n+\t  goto missing_filename;\n+\telse\n+\t  opts->include_prefix = argv[++i];\n+      }\n+      if (!strcmp (argv[i], \"-ifoutput\")) {\n+\topts->output_conditionals = 1;\n+      }\n+      if (!strcmp (argv[i], \"-isystem\")) {\n+\tstruct file_name_list *dirtmp;\n+\t\n+\tif (i + 1 == argc)\n+\t  goto missing_filename;\n+\t\n+\tdirtmp = (struct file_name_list *)\n+\t  xmalloc (sizeof (struct file_name_list));\n+\tdirtmp->next = 0;\n+\tdirtmp->control_macro = 0;\n+\tdirtmp->c_system_include_path = 1;\n+\tdirtmp->fname = (char *) xmalloc (strlen (argv[i+1]) + 1);\n+\tstrcpy (dirtmp->fname, argv[++i]);\n+\tdirtmp->got_name_map = 0;\n+\t\n+\tif (opts->before_system == 0)\n+\t  opts->before_system = dirtmp;\n+\telse\n+\t  opts->last_before_system->next = dirtmp;\n+\topts->last_before_system = dirtmp; /* Tail follows the last one */\n+      }\n+      /* Add directory to end of path for includes,\n+\t with the default prefix at the front of its name.  */\n+      if (!strcmp (argv[i], \"-iwithprefix\")) {\n+\tstruct file_name_list *dirtmp;\n+\tchar *prefix;\n+\t\n+\tif (opts->include_prefix != 0)\n+\t  prefix = opts->include_prefix;\n+\telse {\n+\t  prefix = savestring (GCC_INCLUDE_DIR);\n+\t  /* Remove the `include' from /usr/local/lib/gcc.../include.  */\n+\t  if (!strcmp (prefix + strlen (prefix) - 8, \"/include\"))\n+\t    prefix[strlen (prefix) - 7] = 0;\n \t}\n-\t/* Add directory to end of path for includes.  */\n-\tif (!strcmp (argv[i], \"-idirafter\")) {\n-\t  struct file_name_list *dirtmp;\n-\n-\t  dirtmp = (struct file_name_list *)\n-\t    xmalloc (sizeof (struct file_name_list));\n-\t  dirtmp->next = 0;\t/* New one goes on the end */\n-\t  dirtmp->control_macro = 0;\n-\t  dirtmp->c_system_include_path = 0;\n-\t  if (i + 1 == argc)\n-\t    goto missing_dirname;\n-\t  else\n-\t    dirtmp->fname = argv[++i];\n-\t  dirtmp->got_name_map = 0;\n-\n-\t  if (opts->after_include == 0)\n-\t    opts->after_include = dirtmp;\n-\t  else\n-\t    opts->last_after_include->next = dirtmp;\n-\t  opts->last_after_include = dirtmp; /* Tail follows the last one */\n+\t\n+\tdirtmp = (struct file_name_list *)\n+\t  xmalloc (sizeof (struct file_name_list));\n+\tdirtmp->next = 0;\t/* New one goes on the end */\n+\tdirtmp->control_macro = 0;\n+\tdirtmp->c_system_include_path = 0;\n+\tif (i + 1 == argc)\n+\t  goto missing_dirname;\n+\t\n+\tdirtmp->fname = (char *) xmalloc (strlen (argv[i+1])\n+\t\t\t\t\t  + strlen (prefix) + 1);\n+\tstrcpy (dirtmp->fname, prefix);\n+\tstrcat (dirtmp->fname, argv[++i]);\n+\tdirtmp->got_name_map = 0;\n+\t\n+\tif (opts->after_include == 0)\n+\t  opts->after_include = dirtmp;\n+\telse\n+\t  opts->last_after_include->next = dirtmp;\n+\topts->last_after_include = dirtmp; /* Tail follows the last one */\n+      }\n+      /* Add directory to main path for includes,\n+\t with the default prefix at the front of its name.  */\n+      if (!strcmp (argv[i], \"-iwithprefixbefore\")) {\n+\tstruct file_name_list *dirtmp;\n+\tchar *prefix;\n+\t\n+\tif (opts->include_prefix != 0)\n+\t  prefix = opts->include_prefix;\n+\telse {\n+\t  prefix = savestring (GCC_INCLUDE_DIR);\n+\t  /* Remove the `include' from /usr/local/lib/gcc.../include.  */\n+\t  if (!strcmp (prefix + strlen (prefix) - 8, \"/include\"))\n+\t    prefix[strlen (prefix) - 7] = 0;\n \t}\n-\tbreak;\n-\n-      case 'o':\n-\tif (opts->out_fname != NULL)\n-\t  {\n-\t    cpp_fatal (pfile, \"Output filename specified twice\");\n-\t    return argc;\n-\t  }\n+\t\n+\tdirtmp = (struct file_name_list *)\n+\t  xmalloc (sizeof (struct file_name_list));\n+\tdirtmp->next = 0;\t/* New one goes on the end */\n+\tdirtmp->control_macro = 0;\n+\tdirtmp->c_system_include_path = 0;\n \tif (i + 1 == argc)\n-\t  goto missing_filename;\n-\topts->out_fname = argv[++i];\n-\tif (!strcmp (opts->out_fname, \"-\"))\n-\t  opts->out_fname = \"\";\n-\tbreak;\n-\n-      case 'p':\n-\tif (!strcmp (argv[i], \"-pedantic\"))\n-\t  CPP_PEDANTIC (pfile) = 1;\n-\telse if (!strcmp (argv[i], \"-pedantic-errors\")) {\n-\t  CPP_PEDANTIC (pfile) = 1;\n-\t  opts->pedantic_errors = 1;\n+\t  goto missing_dirname;\n+\t\n+\tdirtmp->fname = (char *) xmalloc (strlen (argv[i+1])\n+\t\t\t\t\t  + strlen (prefix) + 1);\n+\tstrcpy (dirtmp->fname, prefix);\n+\tstrcat (dirtmp->fname, argv[++i]);\n+\tdirtmp->got_name_map = 0;\n+\t\n+\tappend_include_chain (pfile, dirtmp, dirtmp);\n+      }\n+      /* Add directory to end of path for includes.  */\n+      if (!strcmp (argv[i], \"-idirafter\")) {\n+\tstruct file_name_list *dirtmp;\n+\t\n+\tdirtmp = (struct file_name_list *)\n+\t  xmalloc (sizeof (struct file_name_list));\n+\tdirtmp->next = 0;\t/* New one goes on the end */\n+\tdirtmp->control_macro = 0;\n+\tdirtmp->c_system_include_path = 0;\n+\tif (i + 1 == argc)\n+\t  goto missing_dirname;\n+\telse\n+\t  dirtmp->fname = argv[++i];\n+\tdirtmp->got_name_map = 0;\n+\t\n+\tif (opts->after_include == 0)\n+\t  opts->after_include = dirtmp;\n+\telse\n+\t  opts->last_after_include->next = dirtmp;\n+\topts->last_after_include = dirtmp; /* Tail follows the last one */\n+      }\n+      break;\n+      \n+    case 'o':\n+      if (opts->out_fname != NULL)\n+\t{\n+\t  cpp_fatal (pfile, \"Output filename specified twice\");\n+\t  return argc;\n \t}\n+      if (i + 1 == argc)\n+\tgoto missing_filename;\n+      opts->out_fname = argv[++i];\n+      if (!strcmp (opts->out_fname, \"-\"))\n+\topts->out_fname = \"\";\n+      break;\n+      \n+    case 'p':\n+      if (!strcmp (argv[i], \"-pedantic\"))\n+\tCPP_PEDANTIC (pfile) = 1;\n+      else if (!strcmp (argv[i], \"-pedantic-errors\")) {\n+\tCPP_PEDANTIC (pfile) = 1;\n+\topts->pedantic_errors = 1;\n+      }\n #if 0\n-\telse if (!strcmp (argv[i], \"-pcp\")) {\n-\t  char *pcp_fname = argv[++i];\n-\t  pcp_outfile = ((pcp_fname[0] != '-' || pcp_fname[1] != '\\0')\n-\t\t\t ? fopen (pcp_fname, \"w\")\n-\t\t\t : fdopen (dup (fileno (stdout)), \"w\"));\n-\t  if (pcp_outfile == 0)\n-\t    cpp_pfatal_with_name (pfile, pcp_fname);\n-\t  no_precomp = 1;\n-\t}\n+      else if (!strcmp (argv[i], \"-pcp\")) {\n+\tchar *pcp_fname = argv[++i];\n+\tpcp_outfile = ((pcp_fname[0] != '-' || pcp_fname[1] != '\\0')\n+\t\t       ? fopen (pcp_fname, \"w\")\n+\t\t       : fdopen (dup (fileno (stdout)), \"w\"));\n+\tif (pcp_outfile == 0)\n+\t  cpp_pfatal_with_name (pfile, pcp_fname);\n+\tno_precomp = 1;\n+      }\n #endif\n-\tbreak;\n-\n-      case 't':\n-\tif (!strcmp (argv[i], \"-traditional\")) {\n-\t  opts->traditional = 1;\n-\t} else if (!strcmp (argv[i], \"-trigraphs\")) {\n-\t  if (!opts->chill)\n-\t    opts->no_trigraphs = 0;\n-\t}\n-\tbreak;\n-\n-      case 'l':\n-\tif (! strcmp (argv[i], \"-lang-c\"))\n-\t  opts->cplusplus = 0, opts->cplusplus_comments = 1, opts->c89 = 0,\n+      break;\n+      \n+    case 't':\n+      if (!strcmp (argv[i], \"-traditional\")) {\n+\topts->traditional = 1;\n+      } else if (!strcmp (argv[i], \"-trigraphs\")) {\n+\tif (!opts->chill)\n+\t  opts->no_trigraphs = 0;\n+      }\n+      break;\n+      \n+    case 'l':\n+      if (! strcmp (argv[i], \"-lang-c\"))\n+\topts->cplusplus = 0, opts->cplusplus_comments = 1, opts->c89 = 0,\n \t  opts->objc = 0;\n-\tif (! strcmp (argv[i], \"-lang-c89\"))\n-\t  opts->cplusplus = 0, opts->cplusplus_comments = 0, opts->c89 = 1,\n+      if (! strcmp (argv[i], \"-lang-c89\"))\n+\topts->cplusplus = 0, opts->cplusplus_comments = 0, opts->c89 = 1,\n \t  opts->objc = 0;\n-\tif (! strcmp (argv[i], \"-lang-c++\"))\n-\t  opts->cplusplus = 1, opts->cplusplus_comments = 1, opts->c89 = 0,\n+      if (! strcmp (argv[i], \"-lang-c++\"))\n+\topts->cplusplus = 1, opts->cplusplus_comments = 1, opts->c89 = 0,\n \t  opts->objc = 0;\n-\tif (! strcmp (argv[i], \"-lang-objc\"))\n-\t  opts->cplusplus = 0, opts->cplusplus_comments = 1, opts->c89 = 0,\n+      if (! strcmp (argv[i], \"-lang-objc\"))\n+\topts->cplusplus = 0, opts->cplusplus_comments = 1, opts->c89 = 0,\n \t  opts->objc = 1;\n-\tif (! strcmp (argv[i], \"-lang-objc++\"))\n-\t  opts->cplusplus = 1, opts->cplusplus_comments = 1, opts->c89 = 0,\n+      if (! strcmp (argv[i], \"-lang-objc++\"))\n+\topts->cplusplus = 1, opts->cplusplus_comments = 1, opts->c89 = 0,\n \t  opts->objc = 1;\n- \tif (! strcmp (argv[i], \"-lang-asm\"))\n- \t  opts->lang_asm = 1;\n- \tif (! strcmp (argv[i], \"-lint\"))\n- \t  opts->for_lint = 1;\n-\tif (! strcmp (argv[i], \"-lang-chill\"))\n-\t  opts->objc = 0, opts->cplusplus = 0, opts->chill = 1,\n+      if (! strcmp (argv[i], \"-lang-asm\"))\n+\topts->lang_asm = 1;\n+      if (! strcmp (argv[i], \"-lint\"))\n+\topts->for_lint = 1;\n+      if (! strcmp (argv[i], \"-lang-chill\"))\n+\topts->objc = 0, opts->cplusplus = 0, opts->chill = 1,\n \t  opts->traditional = 1, opts->no_trigraphs = 1;\n-\tbreak;\n-\n-      case '+':\n-\topts->cplusplus = 1, opts->cplusplus_comments = 1;\n-\tbreak;\n-\n-      case 'w':\n-\topts->inhibit_warnings = 1;\n-\tbreak;\n-\n-      case 'W':\n-\tif (!strcmp (argv[i], \"-Wtrigraphs\"))\n+      break;\n+      \n+    case '+':\n+      opts->cplusplus = 1, opts->cplusplus_comments = 1;\n+      break;\n+      \n+    case 'w':\n+      opts->inhibit_warnings = 1;\n+      break;\n+      \n+    case 'W':\n+      if (!strcmp (argv[i], \"-Wtrigraphs\"))\n+\topts->warn_trigraphs = 1;\n+      else if (!strcmp (argv[i], \"-Wno-trigraphs\"))\n+\topts->warn_trigraphs = 0;\n+      else if (!strcmp (argv[i], \"-Wcomment\"))\n+\topts->warn_comments = 1;\n+      else if (!strcmp (argv[i], \"-Wno-comment\"))\n+\topts->warn_comments = 0;\n+      else if (!strcmp (argv[i], \"-Wcomments\"))\n+\topts->warn_comments = 1;\n+      else if (!strcmp (argv[i], \"-Wno-comments\"))\n+\topts->warn_comments = 0;\n+      else if (!strcmp (argv[i], \"-Wtraditional\"))\n+\topts->warn_stringify = 1;\n+      else if (!strcmp (argv[i], \"-Wno-traditional\"))\n+\topts->warn_stringify = 0;\n+      else if (!strcmp (argv[i], \"-Wundef\"))\n+\topts->warn_undef = 1;\n+      else if (!strcmp (argv[i], \"-Wno-undef\"))\n+\topts->warn_undef = 0;\n+      else if (!strcmp (argv[i], \"-Wimport\"))\n+\topts->warn_import = 1;\n+      else if (!strcmp (argv[i], \"-Wno-import\"))\n+\topts->warn_import = 0;\n+      else if (!strcmp (argv[i], \"-Werror\"))\n+\topts->warnings_are_errors = 1;\n+      else if (!strcmp (argv[i], \"-Wno-error\"))\n+\topts->warnings_are_errors = 0;\n+      else if (!strcmp (argv[i], \"-Wall\"))\n+\t{\n \t  opts->warn_trigraphs = 1;\n-\telse if (!strcmp (argv[i], \"-Wno-trigraphs\"))\n-\t  opts->warn_trigraphs = 0;\n-\telse if (!strcmp (argv[i], \"-Wcomment\"))\n-\t  opts->warn_comments = 1;\n-\telse if (!strcmp (argv[i], \"-Wno-comment\"))\n-\t  opts->warn_comments = 0;\n-\telse if (!strcmp (argv[i], \"-Wcomments\"))\n \t  opts->warn_comments = 1;\n-\telse if (!strcmp (argv[i], \"-Wno-comments\"))\n-\t  opts->warn_comments = 0;\n-\telse if (!strcmp (argv[i], \"-Wtraditional\"))\n-\t  opts->warn_stringify = 1;\n-\telse if (!strcmp (argv[i], \"-Wno-traditional\"))\n-\t  opts->warn_stringify = 0;\n-\telse if (!strcmp (argv[i], \"-Wundef\"))\n-\t  opts->warn_undef = 1;\n-\telse if (!strcmp (argv[i], \"-Wno-undef\"))\n-\t  opts->warn_undef = 0;\n-\telse if (!strcmp (argv[i], \"-Wimport\"))\n-\t  opts->warn_import = 1;\n-\telse if (!strcmp (argv[i], \"-Wno-import\"))\n-\t  opts->warn_import = 0;\n-\telse if (!strcmp (argv[i], \"-Werror\"))\n-\t  opts->warnings_are_errors = 1;\n-\telse if (!strcmp (argv[i], \"-Wno-error\"))\n-\t  opts->warnings_are_errors = 0;\n-\telse if (!strcmp (argv[i], \"-Wall\"))\n-\t  {\n-\t    opts->warn_trigraphs = 1;\n-\t    opts->warn_comments = 1;\n-\t  }\n-\tbreak;\n-\n-      case 'M':\n-\t/* The style of the choices here is a bit mixed.\n-\t   The chosen scheme is a hybrid of keeping all options in one string\n-\t   and specifying each option in a separate argument:\n-\t   -M|-MM|-MD file|-MMD file [-MG].  An alternative is:\n-\t   -M|-MM|-MD file|-MMD file|-MG|-MMG; or more concisely:\n-\t   -M[M][G][D file].  This is awkward to handle in specs, and is not\n-\t   as extensible.  */\n-\t/* ??? -MG must be specified in addition to one of -M or -MM.\n-\t   This can be relaxed in the future without breaking anything.\n-\t   The converse isn't true.  */\n-\n-\t/* -MG isn't valid with -MD or -MMD.  This is checked for later.  */\n-\tif (!strcmp (argv[i], \"-MG\"))\n-\t  {\n-\t    opts->print_deps_missing_files = 1;\n-\t    break;\n-\t  }\n-\tif (!strcmp (argv[i], \"-M\"))\n-\t  opts->print_deps = 2;\n-\telse if (!strcmp (argv[i], \"-MM\"))\n-\t  opts->print_deps = 1;\n-\telse if (!strcmp (argv[i], \"-MD\"))\n-\t  opts->print_deps = 2;\n-\telse if (!strcmp (argv[i], \"-MMD\"))\n-\t  opts->print_deps = 1;\n-\t/* For -MD and -MMD options, write deps on file named by next arg.  */\n-\tif (!strcmp (argv[i], \"-MD\") || !strcmp (argv[i], \"-MMD\"))\n-\t  {\n-\t    if (i+1 == argc)\n-\t      goto missing_filename;\n-\t    opts->deps_file = argv[++i];\n-\t  }\n-\telse\n-\t  {\n-\t    /* For -M and -MM, write deps on standard output\n-\t       and suppress the usual output.  */\n-\t    opts->no_output = 1;\n-\t  }\t  \n-\tbreak;\n-\n-      case 'd':\n+\t}\n+      break;\n+      \n+    case 'M':\n+      /* The style of the choices here is a bit mixed.\n+\t The chosen scheme is a hybrid of keeping all options in one string\n+\t and specifying each option in a separate argument:\n+\t -M|-MM|-MD file|-MMD file [-MG].  An alternative is:\n+\t -M|-MM|-MD file|-MMD file|-MG|-MMG; or more concisely:\n+\t -M[M][G][D file].  This is awkward to handle in specs, and is not\n+\t as extensible.  */\n+      /* ??? -MG must be specified in addition to one of -M or -MM.\n+\t This can be relaxed in the future without breaking anything.\n+\t The converse isn't true.  */\n+      \n+      /* -MG isn't valid with -MD or -MMD.  This is checked for later.  */\n+      if (!strcmp (argv[i], \"-MG\"))\n \t{\n-\t  char *p = argv[i] + 2;\n-\t  char c;\n-\t  while ((c = *p++) != 0) {\n-\t    /* Arg to -d specifies what parts of macros to dump */\n-\t    switch (c) {\n-\t    case 'M':\n-\t      opts->dump_macros = dump_only;\n-\t      opts->no_output = 1;\n-\t      break;\n-\t    case 'N':\n-\t      opts->dump_macros = dump_names;\n-\t      break;\n-\t    case 'D':\n-\t      opts->dump_macros = dump_definitions;\n-\t      break;\n-\t    case 'I':\n-\t      opts->dump_includes = 1;\n-\t      break;\n-\t    }\n+\t  opts->print_deps_missing_files = 1;\n+\t  break;\n+\t}\n+      if (!strcmp (argv[i], \"-M\"))\n+\topts->print_deps = 2;\n+      else if (!strcmp (argv[i], \"-MM\"))\n+\topts->print_deps = 1;\n+      else if (!strcmp (argv[i], \"-MD\"))\n+\topts->print_deps = 2;\n+      else if (!strcmp (argv[i], \"-MMD\"))\n+\topts->print_deps = 1;\n+      /* For -MD and -MMD options, write deps on file named by next arg.  */\n+      if (!strcmp (argv[i], \"-MD\") || !strcmp (argv[i], \"-MMD\"))\n+\t{\n+\t  if (i+1 == argc)\n+\t    goto missing_filename;\n+\t  opts->deps_file = argv[++i];\n+\t}\n+      else\n+\t{\n+\t  /* For -M and -MM, write deps on standard output\n+\t     and suppress the usual output.  */\n+\t  opts->no_output = 1;\n+\t}\t  \n+      break;\n+      \n+    case 'd':\n+      {\n+\tchar *p = argv[i] + 2;\n+\tchar c;\n+\twhile ((c = *p++) != 0) {\n+\t  /* Arg to -d specifies what parts of macros to dump */\n+\t  switch (c) {\n+\t  case 'M':\n+\t    opts->dump_macros = dump_only;\n+\t    opts->no_output = 1;\n+\t    break;\n+\t  case 'N':\n+\t    opts->dump_macros = dump_names;\n+\t    break;\n+\t  case 'D':\n+\t    opts->dump_macros = dump_definitions;\n+\t    break;\n+\t  case 'I':\n+\t    opts->dump_includes = 1;\n+\t    break;\n \t  }\n \t}\n-\tbreak;\n-\n-      case 'g':\n-\tif (argv[i][2] == '3')\n-\t  opts->debug_output = 1;\n-\tbreak;\n-\n-      case 'v':\n-\tfprintf (stderr, \"GNU CPP version %s\", version_string);\n+      }\n+    break;\n+    \n+    case 'g':\n+      if (argv[i][2] == '3')\n+\topts->debug_output = 1;\n+      break;\n+      \n+    case 'v':\n+      fprintf (stderr, \"GNU CPP version %s\", version_string);\n #ifdef TARGET_VERSION\n-\tTARGET_VERSION;\n+      TARGET_VERSION;\n #endif\n-\tfprintf (stderr, \"\\n\");\n-\topts->verbose = 1;\n-\tbreak;\n-\n-      case 'H':\n-\topts->print_include_names = 1;\n-\tbreak;\n-\n-      case 'D':\n+      fprintf (stderr, \"\\n\");\n+      opts->verbose = 1;\n+      break;\n+      \n+    case 'H':\n+      opts->print_include_names = 1;\n+      break;\n+      \n+    case 'D':\n+      if (argv[i][2] != 0)\n+\tpush_pending (pfile, \"-D\", argv[i] + 2);\n+      else if (i + 1 == argc)\n+\t{\n+\t  cpp_fatal (pfile, \"Macro name missing after -D option\");\n+\t  return argc;\n+\t}\n+      else\n+\ti++, push_pending (pfile, \"-D\", argv[i]);\n+      break;\n+      \n+    case 'A':\n+      {\n+\tchar *p;\n+\t\n \tif (argv[i][2] != 0)\n-\t  push_pending (pfile, \"-D\", argv[i] + 2);\n+\t  p = argv[i] + 2;\n \telse if (i + 1 == argc)\n \t  {\n-\t    cpp_fatal (pfile, \"Macro name missing after -D option\");\n+\t    cpp_fatal (pfile, \"Assertion missing after -A option\");\n \t    return argc;\n \t  }\n \telse\n-\t  i++, push_pending (pfile, \"-D\", argv[i]);\n-\tbreak;\n-\n-      case 'A':\n-\t{\n-\t  char *p;\n-\n-\t  if (argv[i][2] != 0)\n-\t    p = argv[i] + 2;\n-\t  else if (i + 1 == argc)\n+\t  p = argv[++i];\n+\t\n+\tif (!strcmp (p, \"-\")) {\n+\t  struct cpp_pending **ptr;\n+\t  /* -A- eliminates all predefined macros and assertions.\n+\t     Let's include also any that were specified earlier\n+\t     on the command line.  That way we can get rid of any\n+\t     that were passed automatically in from GCC.  */\n+\t  opts->inhibit_predefs = 1;\n+\t  for (ptr = &opts->pending; *ptr != NULL; )\n \t    {\n-\t      cpp_fatal (pfile, \"Assertion missing after -A option\");\n-\t      return argc;\n+\t      struct cpp_pending *pend = *ptr;\n+\t      if (pend->cmd && pend->cmd[0] == '-'\n+\t\t  && (pend->cmd[1] == 'D' || pend->cmd[1] == 'A'))\n+\t\t{\n+\t\t  *ptr = pend->next;\n+\t\t  free (pend);\n+\t\t}\n+\t      else\n+\t\tptr = &pend->next;\n \t    }\n-\t  else\n-\t    p = argv[++i];\n-\n-\t  if (!strcmp (p, \"-\")) {\n-\t    struct cpp_pending **ptr;\n-\t    /* -A- eliminates all predefined macros and assertions.\n-\t       Let's include also any that were specified earlier\n-\t       on the command line.  That way we can get rid of any\n-\t       that were passed automatically in from GCC.  */\n-\t    opts->inhibit_predefs = 1;\n-\t    for (ptr = &opts->pending; *ptr != NULL; )\n-\t      {\n-\t\tstruct cpp_pending *pend = *ptr;\n-\t\tif (pend->cmd && pend->cmd[0] == '-'\n-\t\t    && (pend->cmd[1] == 'D' || pend->cmd[1] == 'A'))\n-\t\t  {\n-\t\t    *ptr = pend->next;\n-\t\t    free (pend);\n-\t\t  }\n-\t\telse\n-\t\t  ptr = &pend->next;\n-\t      }\n-\t  } else {\n-\t    push_pending (pfile, \"-A\", p);\n-\t  }\n+\t} else {\n+\t  push_pending (pfile, \"-A\", p);\n \t}\n-\tbreak;\n-\n-      case 'U':\t\t/* JF #undef something */\n-\tif (argv[i][2] != 0)\n-\t  push_pending (pfile, \"-U\", argv[i] + 2);\n-\telse if (i + 1 == argc)\n-\t  {\n-\t    cpp_fatal (pfile, \"Macro name missing after -U option\");\n-\t    return argc;\n-\t  }\n-\telse\n-\t  push_pending (pfile, \"-U\", argv[i+1]), i++;\n-\tbreak;\n-\n-      case 'C':\n-\topts->put_out_comments = 1;\n-\tbreak;\n-\n-      case 'E':\t\t\t/* -E comes from cc -E; ignore it.  */\n-\tbreak;\n-\n-      case 'P':\n-\topts->no_line_commands = 1;\n-\tbreak;\n-\n-      case '$':\t\t\t/* Don't include $ in identifiers.  */\n-\topts->dollars_in_ident = 0;\n-\tbreak;\n-\n-      case 'I':\t\t\t/* Add directory to path for includes.  */\n+      }\n+    break;\n+    \n+    case 'U':\t\t/* JF #undef something */\n+      if (argv[i][2] != 0)\n+\tpush_pending (pfile, \"-U\", argv[i] + 2);\n+      else if (i + 1 == argc)\n \t{\n-\t  struct file_name_list *dirtmp;\n-\n-\t  if (! CPP_OPTIONS(pfile)->ignore_srcdir\n-\t      && !strcmp (argv[i] + 2, \"-\")) {\n-\t    CPP_OPTIONS (pfile)->ignore_srcdir = 1;\n-\t    /* Don't use any preceding -I directories for #include <...>.  */\n-\t    CPP_OPTIONS (pfile)->first_bracket_include = 0;\n-\t  }\n-\t  else {\n-\t    dirtmp = (struct file_name_list *)\n-\t      xmalloc (sizeof (struct file_name_list));\n-\t    dirtmp->next = 0;\t\t/* New one goes on the end */\n-\t    dirtmp->control_macro = 0;\n-\t    dirtmp->c_system_include_path = 0;\n-\t    if (argv[i][2] != 0)\n-\t      dirtmp->fname = argv[i] + 2;\n-\t    else if (i + 1 == argc)\n-\t      goto missing_dirname;\n-\t    else\n-\t      dirtmp->fname = argv[++i];\n-\t    dirtmp->got_name_map = 0;\n-\t    append_include_chain (pfile, dirtmp, dirtmp);\n-\t  }\n+\t  cpp_fatal (pfile, \"Macro name missing after -U option\", NULL);\n+\t  return argc;\n \t}\n-\tbreak;\n-\n-      case 'n':\n-\tif (!strcmp (argv[i], \"-nostdinc\"))\n-\t  /* -nostdinc causes no default include directories.\n-\t     You must specify all include-file directories with -I.  */\n-\t  opts->no_standard_includes = 1;\n-\telse if (!strcmp (argv[i], \"-nostdinc++\"))\n-\t  /* -nostdinc++ causes no default C++-specific include directories. */\n-\t  opts->no_standard_cplusplus_includes = 1;\n+      else\n+\tpush_pending (pfile, \"-U\", argv[i+1]), i++;\n+      break;\n+      \n+    case 'C':\n+      opts->put_out_comments = 1;\n+      break;\n+      \n+    case 'E':\t\t\t/* -E comes from cc -E; ignore it.  */\n+      break;\n+      \n+    case 'P':\n+      opts->no_line_commands = 1;\n+      break;\n+      \n+    case '$':\t\t\t/* Don't include $ in identifiers.  */\n+      opts->dollars_in_ident = 0;\n+      break;\n+      \n+    case 'I':\t\t\t/* Add directory to path for includes.  */\n+      {\n+\tstruct file_name_list *dirtmp;\n+\t\n+\tif (! CPP_OPTIONS(pfile)->ignore_srcdir\n+\t    && !strcmp (argv[i] + 2, \"-\")) {\n+\t  CPP_OPTIONS (pfile)->ignore_srcdir = 1;\n+\t  /* Don't use any preceding -I directories for #include <...>.  */\n+\t  CPP_OPTIONS (pfile)->first_bracket_include = 0;\n+\t}\n+\telse {\n+\t  dirtmp = (struct file_name_list *)\n+\t    xmalloc (sizeof (struct file_name_list));\n+\t  dirtmp->next = 0;\t\t/* New one goes on the end */\n+\t  dirtmp->control_macro = 0;\n+\t  dirtmp->c_system_include_path = 0;\n+\t  if (argv[i][2] != 0)\n+\t    dirtmp->fname = argv[i] + 2;\n+\t  else if (i + 1 == argc)\n+\t    goto missing_dirname;\n+\t  else\n+\t    dirtmp->fname = argv[++i];\n+\t  dirtmp->got_name_map = 0;\n+\t  append_include_chain (pfile, dirtmp, dirtmp);\n+\t}\n+      }\n+    break;\n+    \n+    case 'n':\n+      if (!strcmp (argv[i], \"-nostdinc\"))\n+\t/* -nostdinc causes no default include directories.\n+\t   You must specify all include-file directories with -I.  */\n+\topts->no_standard_includes = 1;\n+      else if (!strcmp (argv[i], \"-nostdinc++\"))\n+\t/* -nostdinc++ causes no default C++-specific include directories. */\n+\topts->no_standard_cplusplus_includes = 1;\n #if 0\n-\telse if (!strcmp (argv[i], \"-noprecomp\"))\n-\t  no_precomp = 1;\n+      else if (!strcmp (argv[i], \"-noprecomp\"))\n+\tno_precomp = 1;\n #endif\n+      break;\n+      \n+    case 'r':\n+      if (!strcmp (argv[i], \"-remap\"))\n+\topts->remap = 1;\n+      break;\n+      \n+    case 'u':\n+      /* Sun compiler passes undocumented switch \"-undef\".\n+\t Let's assume it means to inhibit the predefined symbols.  */\n+      opts->inhibit_predefs = 1;\n+      break;\n+      \n+    case '\\0': /* JF handle '-' as file name meaning stdin or stdout */\n+      if (opts->in_fname == NULL) {\n+\topts->in_fname = \"\";\n \tbreak;\n-\n-      case 'r':\n-\tif (!strcmp (argv[i], \"-remap\"))\n-\t  opts->remap = 1;\n+      } else if (opts->out_fname == NULL) {\n+\topts->out_fname = \"\";\n \tbreak;\n+      }\t/* else fall through into error */\n+      \n+    default:\n+      return i;\n+    }\n+  }\n \n-      case 'u':\n-\t/* Sun compiler passes undocumented switch \"-undef\".\n-\t   Let's assume it means to inhibit the predefined symbols.  */\n-\topts->inhibit_predefs = 1;\n-\tbreak;\n+  return i + 1;\n+}\n \n-      case '\\0': /* JF handle '-' as file name meaning stdin or stdout */\n-\tif (opts->in_fname == NULL) {\n-\t  opts->in_fname = \"\";\n-\t  break;\n-\t} else if (opts->out_fname == NULL) {\n-\t  opts->out_fname = \"\";\n-\t  break;\n-\t}\t/* else fall through into error */\n+/* Handle command-line options in (argc, argv).\n+   Can be called multiple times, to handle multiple sets of options.\n+   Returns if an unrecognized option is seen.\n+   Returns number of strings consumed.  */\n \n-      default:\n-\treturn i;\n-      }\n+int\n+cpp_handle_options (pfile, argc, argv)\n+     cpp_reader *pfile;\n+     int argc;\n+     char **argv;\n+{\n+  int i;\n+  int strings_processed;\n+  for (i = 0; i < argc; i += strings_processed)\n+    {\n+      strings_processed = cpp_handle_option (pfile, argc - i, argv + i);\n+      if (strings_processed == 0)\n+\tbreak;\n     }\n-  }\n   return i;\n }\n \f"}, {"sha": "e6a32954124423e3625344ac037f13ac152edd56", "filename": "gcc/cpplib.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d85b7572a80c023a0eef537a8c94e6af280c51/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d85b7572a80c023a0eef537a8c94e6af280c51/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=a0d85b7572a80c023a0eef537a8c94e6af280c51", "patch": "@@ -94,6 +94,7 @@ extern void parse_clear_mark PARAMS ((struct parse_marker *));\n extern void parse_goto_mark PARAMS((struct parse_marker *, cpp_reader *));\n extern void parse_move_mark PARAMS((struct parse_marker *, cpp_reader *));\n \n+extern int cpp_handle_option PARAMS ((cpp_reader *, int, char **));\n extern int cpp_handle_options PARAMS ((cpp_reader *, int, char **));\n extern enum cpp_token cpp_get_token PARAMS ((cpp_reader *));\n extern void cpp_skip_hspace PARAMS((cpp_reader *));"}, {"sha": "606fb7d9001a783713d6ce680f0ef63361d788be", "filename": "gcc/gcc.c", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d85b7572a80c023a0eef537a8c94e6af280c51/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d85b7572a80c023a0eef537a8c94e6af280c51/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=a0d85b7572a80c023a0eef537a8c94e6af280c51", "patch": "@@ -597,7 +597,46 @@ static struct compiler default_compilers[] =\n   /* Next come the entries for C.  */\n   {\".c\", {\"@c\"}},\n   {\"@c\",\n-   {\"cpp -lang-c%{ansi:89} %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %I\\\n+   {\n+#if USE_CPPLIB\n+#define CPP_FOR_C \\\n+     \"cpp -lang-c%{ansi:89} %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %I\\\n+\t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n+\t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n+        -undef -D__GNUC__=%v1 -D__GNUC_MINOR__=%v2\\\n+\t%{ansi:-trigraphs -D__STRICT_ANSI__}\\\n+\t%{!undef:%{!ansi:%p} %P} %{trigraphs} \\\n+        %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n+        %{traditional} %{ftraditional:-traditional}\\\n+        %{traditional-cpp:-traditional}\\\n+\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*} %Z\\\n+        %i %{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}}\\n\"\n+\n+     \"%{E:\"CPP_FOR_C\"}\"\n+     \"%{!E:%{M:\"CPP_FOR_C\"}\"\n+          \"%{!M:%{MM:\"CPP_FOR_C\"}\"\n+               \"%{!MM:cc1 %i %1 \\\n+                  -lang-c%{ansi:89} %{nostdinc*} %{A*} %{I*} %I\\\n+                  %{!Q:-quiet} -dumpbase %b.c %{d*} %{m*} %{a*}\\\n+                  %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n+                  -undef -D__GNUC__=%v1 -D__GNUC_MINOR__=%v2\\\n+                  %{ansi:-trigraphs -D__STRICT_ANSI__}\\\n+                  %{!undef:%{!ansi:%p} %P} %{trigraphs} \\\n+                  %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n+                  %{H} %C %{D*} %{U*} %{i*} %Z\\\n+                  %{ftraditional:-traditional}\\\n+                  %{traditional-cpp:-traditional}\\\n+\t\t  %{traditional} %{v:-version} %{pg:-p} %{p} %{f*}\\\n+\t\t  %{aux-info*}\\\n+\t\t  %{g*} %{O*} %{W*} %{w} %{pedantic*} %{ansi} \\\n+\t\t  %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n+\t\t  %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\\\n+                  %{!S:as %a %Y\\\n+\t\t     %{c:%W{o*}%{!o*:-o %w%b%O}}%{!c:-o %d%w%u%O}\\\n+                     %{!pipe:%g.s} %A\\n }}}}\"\n+  }},\n+#else /* ! USE_CPPLIB */\n+    \"cpp -lang-c%{ansi:89} %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n         -undef -D__GNUC__=%v1 -D__GNUC_MINOR__=%v2\\\n@@ -608,7 +647,7 @@ static struct compiler default_compilers[] =\n         %{traditional-cpp:-traditional}\\\n \t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*} %Z\\\n         %i %{!M:%{!MM:%{!E:%{!pipe:%g.i}}}}%{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\",\n-    \"%{!M:%{!MM:%{!E:cc1 %{!pipe:%g.i} %1 \\\n+   \"%{!M:%{!MM:%{!E:cc1 %{!pipe:%g.i} %1 \\\n \t\t   %{!Q:-quiet} -dumpbase %b.c %{d*} %{m*} %{a*}\\\n \t\t   %{g*} %{O*} %{W*} %{w} %{pedantic*} %{ansi} \\\n \t\t   %{traditional} %{v:-version} %{pg:-p} %{p} %{f*}\\\n@@ -617,7 +656,9 @@ static struct compiler default_compilers[] =\n \t\t   %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\\\n               %{!S:as %a %Y\\\n \t\t      %{c:%W{o*}%{!o*:-o %w%b%O}}%{!c:-o %d%w%u%O}\\\n-                      %{!pipe:%g.s} %A\\n }}}}\"}},\n+                      %{!pipe:%g.s} %A\\n }}}}\"\n+  }},\n+#endif /* ! USE_CPPLIB */\n   {\"-\",\n    {\"%{E:cpp -lang-c%{ansi:89} %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\"}, {"sha": "d4c57cb52d0f8b696d9abeff04199d5d7a5af9aa", "filename": "gcc/toplev.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d85b7572a80c023a0eef537a8c94e6af280c51/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d85b7572a80c023a0eef537a8c94e6af280c51/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a0d85b7572a80c023a0eef537a8c94e6af280c51", "patch": "@@ -894,6 +894,19 @@ char *lang_options[] =\n   \"-Wno-protocol\",\n   \"-print-objc-runtime-info\",\n \n+  /* These are for languages with USE_CPPLIB.  */\n+  \"-A\",\n+  \"-D\",\n+  \"-I\",\n+  \"-iprefix\",\n+  \"-isystem\",\n+  \"-lang-c\",\n+  \"-lang-c89\",\n+  \"-lang-c++\",\n+  \"-nostdinc++\",\n+  \"-U\",\n+  \"-undef\",\n+\n #include \"options.h\"\n   0\n };\n@@ -3853,9 +3866,13 @@ main (argc, argv, envp)\n \t\t      strlen (lang_options[j])))\n \t  break;\n       if (lang_options[j] != 0)\n-\t/* If the option is valid for *some* language,\n-\t   treat it as valid even if this language doesn't understand it.  */\n-\tlang_decode_option (argv[i]);\n+\t{\n+\t  /* If the option is valid for *some* language,\n+\t     treat it as valid even if this language doesn't understand it.  */\n+\t  int strings_processed = lang_decode_option (argc - i, argv + i);\n+\t  if (strings_processed != 0)\n+\t    i += strings_processed - 1;\n+\t}\n       else if (argv[i][0] == '-' && argv[i][1] != 0)\n \t{\n \t  register char *str = argv[i] + 1;"}, {"sha": "3a89122eab66737b1a00304e40f544e46a1900c3", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d85b7572a80c023a0eef537a8c94e6af280c51/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d85b7572a80c023a0eef537a8c94e6af280c51/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a0d85b7572a80c023a0eef537a8c94e6af280c51", "patch": "@@ -1967,7 +1967,7 @@ extern int yyparse\t\t\t\tPROTO((void));\n /* Function called with option as argument\n    to decode options starting with -f or -W or +.\n    It should return nonzero if it handles the option.  */\n-extern int lang_decode_option\t\t\tPROTO((char *));\n+extern int lang_decode_option\t\t\tPROTO((int, char **));\n \n /* Functions for processing symbol declarations.  */\n /* Function to enter a new lexical scope."}]}