{"sha": "a3dbf764ae79f617b1710dbffd7698057d98c5f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNkYmY3NjRhZTc5ZjYxN2IxNzEwZGJmZmQ3Njk4MDU3ZDk4YzVmOQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-02-21T04:17:20Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-02-21T04:17:20Z"}, "message": "Support libgo on Solaris.\n\nFrom Rainer Orth.\n\nFrom-SVN: r170355", "tree": {"sha": "8c3438b2ec8fe5d78be2332c12e39da3187460af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c3438b2ec8fe5d78be2332c12e39da3187460af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3dbf764ae79f617b1710dbffd7698057d98c5f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3dbf764ae79f617b1710dbffd7698057d98c5f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3dbf764ae79f617b1710dbffd7698057d98c5f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3dbf764ae79f617b1710dbffd7698057d98c5f9/comments", "author": null, "committer": null, "parents": [{"sha": "086bb4b9cd0780609f150e03cad8490bb734ccd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/086bb4b9cd0780609f150e03cad8490bb734ccd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/086bb4b9cd0780609f150e03cad8490bb734ccd8"}], "stats": {"total": 164, "additions": 130, "deletions": 34}, "files": [{"sha": "9274b36d52d355080159538fc0f6f4929eae4b93", "filename": "libgo/Makefile.am", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3dbf764ae79f617b1710dbffd7698057d98c5f9/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3dbf764ae79f617b1710dbffd7698057d98c5f9/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=a3dbf764ae79f617b1710dbffd7698057d98c5f9", "patch": "@@ -657,6 +657,20 @@ go_netchan_files = \\\n \tgo/netchan/export.go \\\n \tgo/netchan/import.go\n \n+if LIBGO_IS_SOLARIS\n+if LIBGO_IS_386\n+go_os_dir_file = go/os/dir_largefile.go\n+else\n+go_os_dir_file = go/os/dir_regfile.go\n+endif\n+else\n+if LIBGO_IS_LINUX\n+go_os_dir_file = go/os/dir_largefile.go\n+else\n+go_os_dir_file = go/os/dir_regfile.go\n+endif\n+endif\n+\n if LIBGO_IS_LINUX\n go_os_sys_file = go/os/sys_linux.go\n else\n@@ -672,6 +686,7 @@ endif\n endif\n \n go_os_files = \\\n+\t$(go_os_dir_file) \\\n \tgo/os/dir.go \\\n \tgo/os/env.go \\\n \tgo/os/env_unix.go \\\n@@ -1111,18 +1126,23 @@ endif\n if LIBGO_IS_LINUX\n # Always use lseek64 on GNU/Linux.\n syscall_filesize_file = syscalls/sysfile_largefile.go\n+syscall_stat_file = syscalls/sysfile_stat_largefile.go\n else # !LIBGO_IS_LINUX\n if LIBGO_IS_SOLARIS\n+# FIXME: Same for sparc vs. sparc64.  Introduce new/additional conditional?\n if LIBGO_IS_386\n # Use lseek64 on 386 Solaris.\n syscall_filesize_file = syscalls/sysfile_largefile.go\n+syscall_stat_file = syscalls/sysfile_stat_largefile.go\n else # !LIBGO_IS_LINUX && LIBGO_IS_SOLARIS && !LIBGO_IS_386\n # Use lseek on amd64 Solaris.\n syscall_filesize_file = syscalls/sysfile_regfile.go\n+syscall_stat_file = syscalls/sysfile_stat_regfile.go\n endif # !LIBGO_IS_386\n else # !LIBGO_IS_LINUX && !LIBGO_IS_SOLARIS\n # Use lseek by default.\n syscall_filesize_file = syscalls/sysfile_regfile.go\n+syscall_stat_file = syscalls/sysfile_stat_regfile.go\n endif # !LIBGO_IS_SOLARIS\n endif # !LIBGO_IS_LINUX\n \n@@ -1195,6 +1215,7 @@ go_syscall_files = \\\n \tsyscalls/exec_helpers.go \\\n \t$(syscall_exec_os_file) \\\n \t$(syscall_filesize_file) \\\n+\t$(syscall_stat_file) \\\n \t$(syscall_sleep_file) \\\n \tsyscalls/socket.go \\\n \t$(syscall_socket_os_file) \\"}, {"sha": "e4ec14901c6c922b168f4b23a285625e04d3d448", "filename": "libgo/Makefile.in", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3dbf764ae79f617b1710dbffd7698057d98c5f9/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3dbf764ae79f617b1710dbffd7698057d98c5f9/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=a3dbf764ae79f617b1710dbffd7698057d98c5f9", "patch": "@@ -1037,11 +1037,16 @@ go_netchan_files = \\\n \tgo/netchan/export.go \\\n \tgo/netchan/import.go\n \n+@LIBGO_IS_386_FALSE@@LIBGO_IS_SOLARIS_TRUE@go_os_dir_file = go/os/dir_regfile.go\n+@LIBGO_IS_386_TRUE@@LIBGO_IS_SOLARIS_TRUE@go_os_dir_file = go/os/dir_largefile.go\n+@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_os_dir_file = go/os/dir_regfile.go\n+@LIBGO_IS_LINUX_TRUE@@LIBGO_IS_SOLARIS_FALSE@go_os_dir_file = go/os/dir_largefile.go\n @LIBGO_IS_LINUX_FALSE@@LIBGO_IS_RTEMS_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_os_sys_file = go/os/sys_bsd.go\n @LIBGO_IS_LINUX_FALSE@@LIBGO_IS_RTEMS_TRUE@@LIBGO_IS_SOLARIS_FALSE@go_os_sys_file = go/os/sys_uname.go\n @LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_TRUE@go_os_sys_file = go/os/sys_uname.go\n @LIBGO_IS_LINUX_TRUE@go_os_sys_file = go/os/sys_linux.go\n go_os_files = \\\n+\t$(go_os_dir_file) \\\n \tgo/os/dir.go \\\n \tgo/os/env.go \\\n \tgo/os/env_unix.go \\\n@@ -1513,6 +1518,7 @@ go_testing_script_files = \\\n @LIBGO_IS_RTEMS_TRUE@syscall_syscall_file = syscalls/syscall_stubs.go\n # Use lseek on amd64 Solaris.\n @LIBGO_IS_386_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_TRUE@syscall_filesize_file = syscalls/sysfile_regfile.go\n+# FIXME: Same for sparc vs. sparc64.  Introduce new/additional conditional?\n # Use lseek64 on 386 Solaris.\n @LIBGO_IS_386_TRUE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_TRUE@syscall_filesize_file = syscalls/sysfile_largefile.go\n # Use lseek by default.\n@@ -1521,6 +1527,10 @@ go_testing_script_files = \\\n # Declare libc functions that vary for largefile systems.\n # Always use lseek64 on GNU/Linux.\n @LIBGO_IS_LINUX_TRUE@syscall_filesize_file = syscalls/sysfile_largefile.go\n+@LIBGO_IS_386_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_TRUE@syscall_stat_file = syscalls/sysfile_stat_regfile.go\n+@LIBGO_IS_386_TRUE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_TRUE@syscall_stat_file = syscalls/sysfile_stat_largefile.go\n+@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_FALSE@syscall_stat_file = syscalls/sysfile_stat_regfile.go\n+@LIBGO_IS_LINUX_TRUE@syscall_stat_file = syscalls/sysfile_stat_largefile.go\n @LIBGO_IS_RTEMS_FALSE@syscall_exec_os_file = syscalls/exec.go\n \n # Define ForkExec, PtraceForkExec, Exec, and Wait4.\n@@ -1556,6 +1566,7 @@ go_syscall_files = \\\n \tsyscalls/exec_helpers.go \\\n \t$(syscall_exec_os_file) \\\n \t$(syscall_filesize_file) \\\n+\t$(syscall_stat_file) \\\n \t$(syscall_sleep_file) \\\n \tsyscalls/socket.go \\\n \t$(syscall_socket_os_file) \\"}, {"sha": "d6f6ac1aec4cbf131c7ed86e4ad3d0adaea767b7", "filename": "libgo/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3dbf764ae79f617b1710dbffd7698057d98c5f9/libgo%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3dbf764ae79f617b1710dbffd7698057d98c5f9/libgo%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfig.h.in?ref=a3dbf764ae79f617b1710dbffd7698057d98c5f9", "patch": "@@ -62,6 +62,9 @@\n /* Define to 1 if you have the <sys/stat.h> header file. */\n #undef HAVE_SYS_STAT_H\n \n+/* Define to 1 if you have the <sys/syscall.h> header file. */\n+#undef HAVE_SYS_SYSCALL_H\n+\n /* Define to 1 if you have the <sys/types.h> header file. */\n #undef HAVE_SYS_TYPES_H\n "}, {"sha": "ca3544e5f2be13dac6f46b4f7d4d962527ac7a4a", "filename": "libgo/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3dbf764ae79f617b1710dbffd7698057d98c5f9/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3dbf764ae79f617b1710dbffd7698057d98c5f9/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=a3dbf764ae79f617b1710dbffd7698057d98c5f9", "patch": "@@ -14129,7 +14129,7 @@ no)\n   ;;\n esac\n \n-for ac_header in sys/mman.h syscall.h sys/epoll.h sys/ptrace.h sys/user.h sys/utsname.h\n+for ac_header in sys/mman.h syscall.h sys/epoll.h sys/ptrace.h sys/syscall.h sys/user.h sys/utsname.h\n do :\n   as_ac_Header=`$as_echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n ac_fn_c_check_header_mongrel \"$LINENO\" \"$ac_header\" \"$as_ac_Header\" \"$ac_includes_default\""}, {"sha": "2ec9f5c475ec75e0480b0e6435981a77b1ebba28", "filename": "libgo/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3dbf764ae79f617b1710dbffd7698057d98c5f9/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3dbf764ae79f617b1710dbffd7698057d98c5f9/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=a3dbf764ae79f617b1710dbffd7698057d98c5f9", "patch": "@@ -378,7 +378,7 @@ no)\n   ;;\n esac\n \n-AC_CHECK_HEADERS(sys/mman.h syscall.h sys/epoll.h sys/ptrace.h sys/user.h sys/utsname.h)\n+AC_CHECK_HEADERS(sys/mman.h syscall.h sys/epoll.h sys/ptrace.h sys/syscall.h sys/user.h sys/utsname.h)\n AM_CONDITIONAL(HAVE_SYS_MMAN_H, test \"$ac_cv_header_sys_mman_h\" = yes)\n AC_CHECK_FUNCS(srandom random strsignal)\n "}, {"sha": "b3b5d3e37dceb648bfd1a411d6caea62ec7e76ac", "filename": "libgo/go/os/dir.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3dbf764ae79f617b1710dbffd7698057d98c5f9/libgo%2Fgo%2Fos%2Fdir.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3dbf764ae79f617b1710dbffd7698057d98c5f9/libgo%2Fgo%2Fos%2Fdir.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Fdir.go?ref=a3dbf764ae79f617b1710dbffd7698057d98c5f9", "patch": "@@ -11,7 +11,6 @@ import (\n \n func libc_dup(fd int) int __asm__ (\"dup\")\n func libc_opendir(*byte) *syscall.DIR __asm__ (\"opendir\")\n-func libc_readdir_r(*syscall.DIR, *syscall.Dirent, **syscall.Dirent) int __asm__ (\"readdir_r\")\n func libc_closedir(*syscall.DIR) int __asm__ (\"closedir\")\n \n // FIXME: pathconf returns long, not int."}, {"sha": "c723ec92400285e64da553a2d30731b48e0d90e2", "filename": "libgo/go/os/dir_largefile.go", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3dbf764ae79f617b1710dbffd7698057d98c5f9/libgo%2Fgo%2Fos%2Fdir_largefile.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3dbf764ae79f617b1710dbffd7698057d98c5f9/libgo%2Fgo%2Fos%2Fdir_largefile.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Fdir_largefile.go?ref=a3dbf764ae79f617b1710dbffd7698057d98c5f9", "patch": "@@ -0,0 +1,12 @@\n+// dir_largefile.go -- For systems which use the large file interface for\n+// readdir_r.\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package os\n+\n+import \"syscall\"\n+\n+func libc_readdir_r(*syscall.DIR, *syscall.Dirent, **syscall.Dirent) int __asm__ (\"readdir64_r\")"}, {"sha": "22fb5febbb2d3d440b2afd02c577f14910667182", "filename": "libgo/go/os/dir_regfile.go", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3dbf764ae79f617b1710dbffd7698057d98c5f9/libgo%2Fgo%2Fos%2Fdir_regfile.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3dbf764ae79f617b1710dbffd7698057d98c5f9/libgo%2Fgo%2Fos%2Fdir_regfile.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Fdir_regfile.go?ref=a3dbf764ae79f617b1710dbffd7698057d98c5f9", "patch": "@@ -0,0 +1,12 @@\n+// dir_regfile.go -- For systems which do not use the large file interface\n+// for readdir_r.\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package os\n+\n+import \"syscall\"\n+\n+func libc_readdir_r(*syscall.DIR, *syscall.Dirent, **syscall.Dirent) int __asm__ (\"readdir_r\")"}, {"sha": "e29febfa619c97be1920e5f7f7188ca4cb04c6a6", "filename": "libgo/mksysinfo.sh", "status": "modified", "additions": 45, "deletions": 28, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3dbf764ae79f617b1710dbffd7698057d98c5f9/libgo%2Fmksysinfo.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3dbf764ae79f617b1710dbffd7698057d98c5f9/libgo%2Fmksysinfo.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmksysinfo.sh?ref=a3dbf764ae79f617b1710dbffd7698057d98c5f9", "patch": "@@ -26,6 +26,9 @@ cat > sysinfo.c <<EOF\n #include \"config.h\"\n \n #define _GNU_SOURCE\n+#define _LARGEFILE_SOURCE\n+#define _FILE_OFFSET_BITS 64\n+\n #if defined(__sun__) && defined(__svr4__)\n /* Needed by Solaris header files.  */\n #define _XOPEN_SOURCE 600\n@@ -42,6 +45,9 @@ cat > sysinfo.c <<EOF\n #if defined(HAVE_SYSCALL_H)\n #include <syscall.h>\n #endif\n+#if defined(HAVE_SYS_SYSCALL_H)\n+#include <sys/syscall.h>\n+#endif\n #if defined(HAVE_SYS_EPOLL_H)\n #include <sys/epoll.h>\n #endif\n@@ -306,36 +312,47 @@ if test \"$timestruc\" != \"\"; then\n fi\n \n # The stat type.\n-grep 'type _stat ' gen-sysinfo.go | \\\n-  sed -e 's/type _stat/type Stat_t/' \\\n-      -e 's/st_dev/Dev/' \\\n-      -e 's/st_ino/Ino/' \\\n-      -e 's/st_nlink/Nlink/' \\\n-      -e 's/st_mode/Mode/' \\\n-      -e 's/st_uid/Uid/' \\\n-      -e 's/st_gid/Gid/' \\\n-      -e 's/st_rdev/Rdev/' \\\n-      -e 's/st_size/Size/' \\\n-      -e 's/st_blksize/Blksize/' \\\n-      -e 's/st_blocks/Blocks/' \\\n-      -e 's/st_atim/Atime/' \\\n-      -e 's/st_mtim/Mtime/' \\\n-      -e 's/st_ctim/Ctime/' \\\n-      -e 's/\\([^a-zA-Z0-9_]\\)_timeval\\([^a-zA-Z0-9_]\\)/\\1Timeval\\2/g' \\\n-      -e 's/\\([^a-zA-Z0-9_]\\)_timespec\\([^a-zA-Z0-9_]\\)/\\1Timespec\\2/g' \\\n-      -e 's/\\([^a-zA-Z0-9_]\\)_timestruc_t\\([^a-zA-Z0-9_]\\)/\\1Timestruc\\2/g' \\\n-    >> ${OUT}\n+# Prefer largefile variant if available.\n+stat=`grep '^type _stat64 ' gen-sysinfo.go || true`\n+if test \"$stat\" != \"\"; then\n+  grep '^type _stat64 ' gen-sysinfo.go\n+else\n+  grep '^type _stat ' gen-sysinfo.go\n+fi | sed -e 's/type _stat\\(64\\)\\?/type Stat_t/' \\\n+         -e 's/st_dev/Dev/' \\\n+         -e 's/st_ino/Ino/g' \\\n+         -e 's/st_nlink/Nlink/' \\\n+         -e 's/st_mode/Mode/' \\\n+         -e 's/st_uid/Uid/' \\\n+         -e 's/st_gid/Gid/' \\\n+         -e 's/st_rdev/Rdev/' \\\n+         -e 's/st_size/Size/' \\\n+         -e 's/st_blksize/Blksize/' \\\n+         -e 's/st_blocks/Blocks/' \\\n+         -e 's/st_atim/Atime/' \\\n+         -e 's/st_mtim/Mtime/' \\\n+         -e 's/st_ctim/Ctime/' \\\n+         -e 's/\\([^a-zA-Z0-9_]\\)_timeval\\([^a-zA-Z0-9_]\\)/\\1Timeval\\2/g' \\\n+         -e 's/\\([^a-zA-Z0-9_]\\)_timespec\\([^a-zA-Z0-9_]\\)/\\1Timespec\\2/g' \\\n+         -e 's/\\([^a-zA-Z0-9_]\\)_timestruc_t\\([^a-zA-Z0-9_]\\)/\\1Timestruc\\2/g' \\\n+       >> ${OUT}\n \n # The directory searching types.\n-grep '^type _dirent ' gen-sysinfo.go | \\\n-  sed -e 's/type _dirent/type Dirent/' \\\n-      -e 's/d_name/Name/' \\\n-      -e 's/]int8/]byte/' \\\n-      -e 's/d_ino/Ino/' \\\n-      -e 's/d_off/Off/' \\\n-      -e 's/d_reclen/Reclen/' \\\n-      -e 's/d_type/Type/' \\\n-    >> ${OUT}\n+# Prefer largefile variant if available.\n+dirent=`grep '^type _dirent64 ' gen-sysinfo.go || true`\n+if test \"$dirent\" != \"\"; then\n+  grep '^type _dirent64 ' gen-sysinfo.go\n+else\n+  grep '^type _dirent ' gen-sysinfo.go\n+fi | sed -e 's/type _dirent\\(64\\)\\?/type Dirent/' \\\n+         -e 's/d_name \\[0+1\\]/d_name [0+256]/' \\\n+         -e 's/d_name/Name/' \\\n+         -e 's/]int8/]byte/' \\\n+         -e 's/d_ino/Ino/' \\\n+         -e 's/d_off/Off/' \\\n+         -e 's/d_reclen/Reclen/' \\\n+         -e 's/d_type/Type/' \\\n+      >> ${OUT}\n echo \"type DIR _DIR\" >> ${OUT}\n \n # The rusage struct."}, {"sha": "8b724983c631016fb4394e9d9bacbb8ea62b1af6", "filename": "libgo/syscalls/sysfile_posix.go", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3dbf764ae79f617b1710dbffd7698057d98c5f9/libgo%2Fsyscalls%2Fsysfile_posix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3dbf764ae79f617b1710dbffd7698057d98c5f9/libgo%2Fsyscalls%2Fsysfile_posix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fsyscalls%2Fsysfile_posix.go?ref=a3dbf764ae79f617b1710dbffd7698057d98c5f9", "patch": "@@ -18,9 +18,6 @@ func libc_read(fd int, buf *byte, count Size_t) Ssize_t __asm__ (\"read\");\n func libc_write(fd int, buf *byte, count Size_t) Ssize_t __asm__ (\"write\");\n func libc_fsync(fd int) int __asm__ (\"fsync\")\n func libc_pipe(filedes *int) int __asm__(\"pipe\");\n-func libc_stat(name *byte, buf *Stat_t) int __asm__ (\"stat\");\n-func libc_fstat(fd int, buf *Stat_t) int __asm__ (\"fstat\");\n-func libc_lstat(name *byte, buf *Stat_t) int __asm__ (\"lstat\");\n func libc_unlink(name *byte) int __asm__ (\"unlink\");\n func libc_rmdir(name *byte) int __asm__ (\"rmdir\");\n func libc_fcntl(fd int, cmd int, arg int) int __asm__ (\"fcntl\");"}, {"sha": "1b785f70a6415c9969cf6992176a28d4ed0c0fe7", "filename": "libgo/syscalls/sysfile_stat_largefile.go", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3dbf764ae79f617b1710dbffd7698057d98c5f9/libgo%2Fsyscalls%2Fsysfile_stat_largefile.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3dbf764ae79f617b1710dbffd7698057d98c5f9/libgo%2Fsyscalls%2Fsysfile_stat_largefile.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fsyscalls%2Fsysfile_stat_largefile.go?ref=a3dbf764ae79f617b1710dbffd7698057d98c5f9", "patch": "@@ -0,0 +1,12 @@\n+// sysfile_stat_largefile.go -- For systems which use the large file interface\n+// for *stat.\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package syscall\n+\n+func libc_stat(name *byte, buf *Stat_t) int __asm__ (\"stat64\");\n+func libc_fstat(fd int, buf *Stat_t) int __asm__ (\"fstat64\");\n+func libc_lstat(name *byte, buf *Stat_t) int __asm__ (\"lstat64\");"}, {"sha": "b3d486413759cf23b65a0de11457b8f85b328ca7", "filename": "libgo/syscalls/sysfile_stat_regfile.go", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3dbf764ae79f617b1710dbffd7698057d98c5f9/libgo%2Fsyscalls%2Fsysfile_stat_regfile.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3dbf764ae79f617b1710dbffd7698057d98c5f9/libgo%2Fsyscalls%2Fsysfile_stat_regfile.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fsyscalls%2Fsysfile_stat_regfile.go?ref=a3dbf764ae79f617b1710dbffd7698057d98c5f9", "patch": "@@ -0,0 +1,12 @@\n+// sysfile_stat_regfile.go -- For systems which do not use the large file\n+// interface for *stat.\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package syscall\n+\n+func libc_stat(name *byte, buf *Stat_t) int __asm__ (\"stat\");\n+func libc_fstat(fd int, buf *Stat_t) int __asm__ (\"fstat\");\n+func libc_lstat(name *byte, buf *Stat_t) int __asm__ (\"lstat\");"}]}