{"sha": "97b4ba9f89565410751f1649dc911f14d0098508", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdiNGJhOWY4OTU2NTQxMDc1MWYxNjQ5ZGM5MTFmMTRkMDA5ODUwOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-03-16T16:07:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-03-16T16:07:07Z"}, "message": "re PR tree-optimization/39455 (ICE : in compare_values_warnv, at tree-vrp.c:1073)\n\n\tPR tree-optimization/39455\n\t* tree-ssa-loop-niter.c (number_of_iterations_lt_to_ne): Fix types\n\tmismatches for POINTER_TYPE_P (type).\n\t(number_of_iterations_le): Likewise.\n\n\t* gcc.dg/pr39455.c: New test.\n\nFrom-SVN: r144885", "tree": {"sha": "a6e176d86e17b8e5d2e79857a5dddd49f0ca47f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6e176d86e17b8e5d2e79857a5dddd49f0ca47f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97b4ba9f89565410751f1649dc911f14d0098508", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97b4ba9f89565410751f1649dc911f14d0098508", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97b4ba9f89565410751f1649dc911f14d0098508", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97b4ba9f89565410751f1649dc911f14d0098508/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "83c191e155257e2a98b6be59bd036a5ad0b7c5ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83c191e155257e2a98b6be59bd036a5ad0b7c5ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83c191e155257e2a98b6be59bd036a5ad0b7c5ca"}], "stats": {"total": 61, "additions": 56, "deletions": 5}, "files": [{"sha": "44b6795a7bfd65d0927f92129fa365190b8adad1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b4ba9f89565410751f1649dc911f14d0098508/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b4ba9f89565410751f1649dc911f14d0098508/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97b4ba9f89565410751f1649dc911f14d0098508", "patch": "@@ -1,3 +1,10 @@\n+2009-03-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/39455\n+\t* tree-ssa-loop-niter.c (number_of_iterations_lt_to_ne): Fix types\n+\tmismatches for POINTER_TYPE_P (type).\n+\t(number_of_iterations_le): Likewise.\n+\n 2009-03-16  Hariharan Sandanagobalane <hariharan@picochip.com>\n \n \t* config/picochip/picochip.c: Removed profiling support."}, {"sha": "c0fa09cc5fbc3067d21e39c02c6e80d796d17304", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b4ba9f89565410751f1649dc911f14d0098508/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b4ba9f89565410751f1649dc911f14d0098508/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=97b4ba9f89565410751f1649dc911f14d0098508", "patch": "@@ -1,3 +1,8 @@\n+2009-03-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/39455\n+\t* gcc.dg/pr39455.c: New test.\n+\n 2009-03-13  David Ayers  <ayers@fsfe.org>\n \n \t* objc/execute/trivial.m. New test."}, {"sha": "8e8c67034f2c0dd2cb479c3c82d0f4ba0540a1b3", "filename": "gcc/testsuite/gcc.dg/pr39455.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b4ba9f89565410751f1649dc911f14d0098508/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39455.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b4ba9f89565410751f1649dc911f14d0098508/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39455.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39455.c?ref=97b4ba9f89565410751f1649dc911f14d0098508", "patch": "@@ -0,0 +1,13 @@\n+/* PR tree-optimization/39455 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fprefetch-loop-arrays -w\" } */\n+\n+void\n+foo (char *x, unsigned long y, unsigned char *z)\n+{\n+  unsigned int c[256], *d;\n+\n+  for (d = c + 1; d < c + 256; ++d)\n+    *d += d[-1];\n+  x[--c[z[y]]] = 0;\n+}"}, {"sha": "d657e1ae78f14653eeaa2a5c742fa564fda6caa9", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b4ba9f89565410751f1649dc911f14d0098508/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b4ba9f89565410751f1649dc911f14d0098508/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=97b4ba9f89565410751f1649dc911f14d0098508", "patch": "@@ -699,15 +699,22 @@ number_of_iterations_lt_to_ne (tree type, affine_iv *iv0, affine_iv *iv1,\n \t iv0->base <= iv1->base + MOD.  */\n       if (!iv0->no_overflow && !integer_zerop (mod))\n \t{\n-\t  bound = fold_build2 (MINUS_EXPR, type,\n+\t  bound = fold_build2 (MINUS_EXPR, type1,\n \t\t\t       TYPE_MAX_VALUE (type1), tmod);\n+\t  if (POINTER_TYPE_P (type))\n+\t    bound = fold_convert (type, bound);\n \t  assumption = fold_build2 (LE_EXPR, boolean_type_node,\n \t\t\t\t    iv1->base, bound);\n \t  if (integer_zerop (assumption))\n \t    goto end;\n \t}\n       if (mpz_cmp (mmod, bnds->below) < 0)\n \tnoloop = boolean_false_node;\n+      else if (POINTER_TYPE_P (type))\n+\tnoloop = fold_build2 (GT_EXPR, boolean_type_node,\n+\t\t\t      iv0->base,\n+\t\t\t      fold_build2 (POINTER_PLUS_EXPR, type,\n+\t\t\t\t\t   iv1->base, tmod));\n       else\n \tnoloop = fold_build2 (GT_EXPR, boolean_type_node,\n \t\t\t      iv0->base,\n@@ -723,13 +730,22 @@ number_of_iterations_lt_to_ne (tree type, affine_iv *iv0, affine_iv *iv1,\n \t{\n \t  bound = fold_build2 (PLUS_EXPR, type1,\n \t\t\t       TYPE_MIN_VALUE (type1), tmod);\n+\t  if (POINTER_TYPE_P (type))\n+\t    bound = fold_convert (type, bound);\n \t  assumption = fold_build2 (GE_EXPR, boolean_type_node,\n \t\t\t\t    iv0->base, bound);\n \t  if (integer_zerop (assumption))\n \t    goto end;\n \t}\n       if (mpz_cmp (mmod, bnds->below) < 0)\n \tnoloop = boolean_false_node;\n+      else if (POINTER_TYPE_P (type))\n+\tnoloop = fold_build2 (GT_EXPR, boolean_type_node,\n+\t\t\t      fold_build2 (POINTER_PLUS_EXPR, type,\n+\t\t\t\t\t   iv0->base,\n+\t\t\t\t\t   fold_build1 (NEGATE_EXPR,\n+\t\t\t\t\t\t\ttype1, tmod)),\n+\t\t\t      iv1->base);\n       else\n \tnoloop = fold_build2 (GT_EXPR, boolean_type_node,\n \t\t\t      fold_build2 (MINUS_EXPR, type1,\n@@ -1084,10 +1100,10 @@ number_of_iterations_le (tree type, affine_iv *iv0, affine_iv *iv1,\n     {\n       if (integer_nonzerop (iv0->step))\n \tassumption = fold_build2 (NE_EXPR, boolean_type_node,\n-\t\t\t\t  iv1->base, TYPE_MAX_VALUE (type1));\n+\t\t\t\t  iv1->base, TYPE_MAX_VALUE (type));\n       else\n \tassumption = fold_build2 (NE_EXPR, boolean_type_node,\n-\t\t\t\t  iv0->base, TYPE_MIN_VALUE (type1));\n+\t\t\t\t  iv0->base, TYPE_MIN_VALUE (type));\n \n       if (integer_zerop (assumption))\n \treturn false;\n@@ -1097,8 +1113,18 @@ number_of_iterations_le (tree type, affine_iv *iv0, affine_iv *iv1,\n     }\n \n   if (integer_nonzerop (iv0->step))\n-    iv1->base = fold_build2 (PLUS_EXPR, type1,\n-\t\t\t     iv1->base, build_int_cst (type1, 1));\n+    {\n+      if (POINTER_TYPE_P (type))\n+\tiv1->base = fold_build2 (POINTER_PLUS_EXPR, type, iv1->base,\n+\t\t\t\t build_int_cst (type1, 1));\n+      else\n+\tiv1->base = fold_build2 (PLUS_EXPR, type1, iv1->base,\n+\t\t\t\t build_int_cst (type1, 1));\n+    }\n+  else if (POINTER_TYPE_P (type))\n+    iv0->base = fold_build2 (POINTER_PLUS_EXPR, type, iv0->base,\n+\t\t\t     fold_build1 (NEGATE_EXPR, type1,\n+\t\t\t\t\t  build_int_cst (type1, 1)));\n   else\n     iv0->base = fold_build2 (MINUS_EXPR, type1,\n \t\t\t     iv0->base, build_int_cst (type1, 1));"}]}