{"sha": "f3e10ef29e6b2b6e6d1918ce10426dcf73285825", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNlMTBlZjI5ZTZiMmI2ZTZkMTkxOGNlMTA0MjZkY2Y3MzI4NTgyNQ==", "commit": {"author": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1997-05-29T19:41:36Z"}, "committer": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1997-05-29T19:41:36Z"}, "message": "(movsfcc_1, movdfcc_1, movxfcc_1): Use singlemove_string\n\nFrom-SVN: r14138", "tree": {"sha": "2fc56cab82620cc144d3dc6b36e630b8e09f52c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fc56cab82620cc144d3dc6b36e630b8e09f52c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3e10ef29e6b2b6e6d1918ce10426dcf73285825", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3e10ef29e6b2b6e6d1918ce10426dcf73285825", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3e10ef29e6b2b6e6d1918ce10426dcf73285825", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3e10ef29e6b2b6e6d1918ce10426dcf73285825/comments", "author": null, "committer": null, "parents": [{"sha": "b078c5c69ca6f58eb0367c0569e426b69b03c1af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b078c5c69ca6f58eb0367c0569e426b69b03c1af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b078c5c69ca6f58eb0367c0569e426b69b03c1af"}], "stats": {"total": 58, "additions": 45, "deletions": 13}, "files": [{"sha": "e3deee53c4120205a9ac8c76654c7e0be0f615cb", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 45, "deletions": 13, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3e10ef29e6b2b6e6d1918ce10426dcf73285825/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3e10ef29e6b2b6e6d1918ce10426dcf73285825/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f3e10ef29e6b2b6e6d1918ce10426dcf73285825", "patch": "@@ -7365,8 +7365,8 @@ byte_xor_operation:\n   [(match_dup 4)\n    (set (match_operand 0 \"register_operand\" \"t\")\n \t(if_then_else:DF (match_operand 1 \"comparison_operator\" \"\")\n-\t\t\t (match_operand:DF 2 \"register_operand\" \"f\")\n-\t\t\t (match_operand:DF 3 \"register_operand\" \"f\")))]\n+\t\t\t (match_operand:DF 2 \"general_operand\" \"\")\n+\t\t\t (match_operand:DF 3 \"general_operand\" \"\")))]\n   \"TARGET_CMOVE\"\n   \"\n {\n@@ -7377,8 +7377,8 @@ byte_xor_operation:\n   [(match_dup 4)\n    (set (match_operand 0 \"register_operand\" \"t\")\n \t(if_then_else:XF (match_operand 1 \"comparison_operator\" \"\")\n-\t\t\t (match_operand:XF 2 \"register_operand\" \"f\")\n-\t\t\t (match_operand:XF 3 \"register_operand\" \"f\")))]\n+\t\t\t (match_operand:XF 2 \"general_operand\" \"\")\n+\t\t\t (match_operand:XF 3 \"general_operand\" \"\")))]\n   \"TARGET_CMOVE\"\n   \"\n {\n@@ -7423,16 +7423,16 @@ byte_xor_operation:\n         {\n           xops[0] = operands[0];\n           xops[1] = operands[2];\n-\t  output_move_const_single (xops);\n+\t  output_asm_insn (singlemove_string (xops), xops);\n         }\n       output_asm_insn (\\\"j%C1 %l4\\\", operands);\n       if (STACK_REG_P (operands[3]) || GET_CODE (operands[0]) == MEM)\n \t  output_asm_insn (AS1 (fld%z3,%y3), operands);\n       else\n \t{\n+          xops[0] = operands[0];\n \t  xops[1] = operands[3];\n-\t  SET_SRC (PATTERN (insn)) = XEXP (SET_SRC (PATTERN (insn)), 2);\n-\t  output_move_const_single (xops);\n+\t  output_asm_insn (singlemove_string (xops), xops);\n \t}\n       ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (operands[4]));\n }\n@@ -7477,28 +7477,28 @@ byte_xor_operation:\n         {\n           xops[0] = operands[0];\n           xops[1] = operands[2];\n-\t  output_move_const_single (xops);\n+\t  output_asm_insn (singlemove_string (xops), xops);\n         }\n       output_asm_insn (\\\"j%C1 %l4\\\", operands);\n       if (STACK_REG_P (operands[3]) || GET_CODE (operands[0]) == MEM)\n \t  output_asm_insn (AS1 (fld%z3,%y3), operands);\n       else\n \t{\n+          xops[0] = operands[0];\n \t  xops[1] = operands[3];\n-\t  SET_SRC (PATTERN (insn)) = XEXP (SET_SRC (PATTERN (insn)), 2);\n-\t  output_move_const_single (xops);\n+\t  output_asm_insn (singlemove_string (xops), xops);\n \t}\n       ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (operands[4]));\n }\n   RET;\n }\")\n \n (define_insn \"movxfcc_1\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=t,t\")\n+  [(set (match_operand:XF 0 \"register_operand\" \"=t,=t,f,fFm\")\n \t(if_then_else:XF (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(cc0) (const_int 0)])\n-\t\t      (match_operand:XF 2 \"register_operand\" \"0,f\")\n-\t\t      (match_operand:XF 3 \"register_operand\" \"f,0\")))]\n+\t\t      (match_operand:XF 2 \"register_operand\" \"0,f,f,fFm\")\n+\t\t      (match_operand:XF 3 \"register_operand\" \"f,0,f,fFm\")))]\n   \"TARGET_CMOVE\"\n   \"*\n {\n@@ -7512,6 +7512,38 @@ byte_xor_operation:\n       /* r <- cond ? r : arg */\n       output_asm_insn (AS2 (fcmov%F1,%2,%0), operands);\n     }\n+  else if (which_alternative == 2)\n+    {\n+      /* r <- cond ? r : arg */\n+      output_asm_insn (AS2 (fcmov%F1,%2,%0), operands);\n+      output_asm_insn (AS2 (fcmov%f1,%3,%0), operands);\n+    }\n+  else if (which_alternative == 3)\n+    {\n+      rtx xops[2];\n+\n+      /* r <- cond ? arg1 : arg2 */\n+      operands[4] = gen_label_rtx ();\n+\n+      if (STACK_REG_P (operands[2]) || GET_CODE (operands[2]) == MEM)\n+\toutput_asm_insn (AS1 (fld%z2,%y2), operands);\n+      else\n+        {\n+          xops[0] = operands[0];\n+          xops[1] = operands[2];\n+\t  output_asm_insn (singlemove_string (xops), xops);\n+        }\n+      output_asm_insn (\\\"j%C1 %l4\\\", operands);\n+      if (STACK_REG_P (operands[3]) || GET_CODE (operands[0]) == MEM)\n+\t  output_asm_insn (AS1 (fld%z3,%y3), operands);\n+      else\n+\t{\n+          xops[0] = operands[0];\n+\t  xops[1] = operands[3];\n+\t  output_asm_insn (singlemove_string (xops), xops);\n+\t}\n+      ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (operands[4]));\n+}\n   RET;\n }\")\n "}]}