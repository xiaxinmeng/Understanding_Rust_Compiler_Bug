{"sha": "45e0683d99cf5396b2e8232c3986767cfbb0dd34", "node_id": "C_kwDOANBUbNoAKDQ1ZTA2ODNkOTljZjUzOTZiMmU4MjMyYzM5ODY3NjdjZmJiMGRkMzQ", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2022-07-22T00:38:22Z"}, "committer": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2022-07-22T00:44:06Z"}, "message": "[PATCH, rs6000] Cleanup some vstrir define_expand naming inconsistencies\n\n  This cleans up some of the naming around the vstrir and vstril\ninstruction definitions, with some cosmetic changes for consistency.\nNo functional changes.\nRegtested just in case, no regressions.\n\n[V2] Used 'direct' instead of 'internal', and cosmetically reworked\nthe changelog.\n\ngcc/\n\t* config/rs6000/altivec.md:\n\t(vstrir_code_<mode>): Rename to...\n\t(vstrir_direct_<mode>): ... this.\n\t(vstrir_p_code_<mode>): Rename to...\n\t(vstrir_p_direct_<mode>): ... this.\n\t(vstril_code_<mode>): Rename to...\n\t(vstril_direct_<mode>): ... this.\n\t(vstril_p_code_<mode>): Rename to...\n\t(vstril_p_direct_<mode>): ... this.", "tree": {"sha": "1bcd8a07fe76d0db17078d59f289eb9855abce42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bcd8a07fe76d0db17078d59f289eb9855abce42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45e0683d99cf5396b2e8232c3986767cfbb0dd34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45e0683d99cf5396b2e8232c3986767cfbb0dd34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45e0683d99cf5396b2e8232c3986767cfbb0dd34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45e0683d99cf5396b2e8232c3986767cfbb0dd34/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75841b04987f8619615a8ed5955e70aa844231b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75841b04987f8619615a8ed5955e70aa844231b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75841b04987f8619615a8ed5955e70aa844231b5"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "2c4940f2e21c1ac2b94bcf61b06a3e1668ea14d6", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e0683d99cf5396b2e8232c3986767cfbb0dd34/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e0683d99cf5396b2e8232c3986767cfbb0dd34/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=45e0683d99cf5396b2e8232c3986767cfbb0dd34", "patch": "@@ -886,13 +886,13 @@\n   \"TARGET_POWER10\"\n {\n   if (BYTES_BIG_ENDIAN)\n-    emit_insn (gen_vstrir_code_<mode> (operands[0], operands[1]));\n+    emit_insn (gen_vstrir_direct_<mode> (operands[0], operands[1]));\n   else\n-    emit_insn (gen_vstril_code_<mode> (operands[0], operands[1]));\n+    emit_insn (gen_vstril_direct_<mode> (operands[0], operands[1]));\n   DONE;\n })\n \n-(define_insn \"vstrir_code_<mode>\"\n+(define_insn \"vstrir_direct_<mode>\"\n   [(set (match_operand:VIshort 0 \"altivec_register_operand\" \"=v\")\n \t(unspec:VIshort\n \t   [(match_operand:VIshort 1 \"altivec_register_operand\" \"v\")]\n@@ -901,7 +901,7 @@\n   \"vstri<wd>r %0,%1\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n-;; This expands into same code as vstrir_<mode> followed by condition logic\n+;; This expands into same code as vstrir<mode> followed by condition logic\n ;; so that a single vstribr. or vstrihr. or vstribl. or vstrihl. instruction\n ;; can, for example, satisfy the needs of a vec_strir () function paired\n ;; with a vec_strir_p () function if both take the same incoming arguments.\n@@ -912,14 +912,14 @@\n {\n   rtx scratch = gen_reg_rtx (<MODE>mode);\n   if (BYTES_BIG_ENDIAN)\n-    emit_insn (gen_vstrir_p_code_<mode> (scratch, operands[1]));\n+    emit_insn (gen_vstrir_p_direct_<mode> (scratch, operands[1]));\n   else\n-    emit_insn (gen_vstril_p_code_<mode> (scratch, operands[1]));\n+    emit_insn (gen_vstril_p_direct_<mode> (scratch, operands[1]));\n   emit_insn (gen_cr6_test_for_zero (operands[0]));\n   DONE;\n })\n \n-(define_insn \"vstrir_p_code_<mode>\"\n+(define_insn \"vstrir_p_direct_<mode>\"\n   [(set (match_operand:VIshort 0 \"altivec_register_operand\" \"=v\")\n \t(unspec:VIshort\n \t   [(match_operand:VIshort 1 \"altivec_register_operand\" \"v\")]\n@@ -938,13 +938,13 @@\n   \"TARGET_POWER10\"\n {\n   if (BYTES_BIG_ENDIAN)\n-    emit_insn (gen_vstril_code_<mode> (operands[0], operands[1]));\n+    emit_insn (gen_vstril_direct_<mode> (operands[0], operands[1]));\n   else\n-    emit_insn (gen_vstrir_code_<mode> (operands[0], operands[1]));\n+    emit_insn (gen_vstrir_direct_<mode> (operands[0], operands[1]));\n   DONE;\n })\n \n-(define_insn \"vstril_code_<mode>\"\n+(define_insn \"vstril_direct_<mode>\"\n   [(set (match_operand:VIshort 0 \"altivec_register_operand\" \"=v\")\n \t(unspec:VIshort\n \t   [(match_operand:VIshort 1 \"altivec_register_operand\" \"v\")]\n@@ -964,14 +964,14 @@\n {\n   rtx scratch = gen_reg_rtx (<MODE>mode);\n   if (BYTES_BIG_ENDIAN)\n-    emit_insn (gen_vstril_p_code_<mode> (scratch, operands[1]));\n+    emit_insn (gen_vstril_p_direct_<mode> (scratch, operands[1]));\n   else\n-    emit_insn (gen_vstrir_p_code_<mode> (scratch, operands[1]));\n+    emit_insn (gen_vstrir_p_direct_<mode> (scratch, operands[1]));\n   emit_insn (gen_cr6_test_for_zero (operands[0]));\n   DONE;\n })\n \n-(define_insn \"vstril_p_code_<mode>\"\n+(define_insn \"vstril_p_direct_<mode>\"\n   [(set (match_operand:VIshort 0 \"altivec_register_operand\" \"=v\")\n \t(unspec:VIshort\n \t   [(match_operand:VIshort 1 \"altivec_register_operand\" \"v\")]"}]}