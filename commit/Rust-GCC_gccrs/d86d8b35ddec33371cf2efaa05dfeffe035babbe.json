{"sha": "d86d8b35ddec33371cf2efaa05dfeffe035babbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg2ZDhiMzVkZGVjMzMzNzFjZjJlZmFhMDVkZmVmZmUwMzViYWJiZQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-11-26T23:56:22Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-11-26T23:56:22Z"}, "message": "PR tree-optimization/92683 - strncmp incorrect result with equal substrings and non-const bound\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/92683\n\t* gcc.dg/strcmpopt_8.c: New test.\n\t* gcc.dg/strcmpopt_9.c: New test.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/92683\n\t* gimple-fold.c (gimple_fold_builtin_string_compare): Restore a test\n\tinadvertently removed in a previous change.  Rename local variable\n\tfor clarity.\n\nFrom-SVN: r278742", "tree": {"sha": "0e6e859da945b4aa63f8da56da2c3774068d8e62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e6e859da945b4aa63f8da56da2c3774068d8e62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d86d8b35ddec33371cf2efaa05dfeffe035babbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d86d8b35ddec33371cf2efaa05dfeffe035babbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d86d8b35ddec33371cf2efaa05dfeffe035babbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d86d8b35ddec33371cf2efaa05dfeffe035babbe/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e4c935cb98add40d0a6350a798a8258951dfc9d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4c935cb98add40d0a6350a798a8258951dfc9d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4c935cb98add40d0a6350a798a8258951dfc9d9"}], "stats": {"total": 238, "additions": 233, "deletions": 5}, "files": [{"sha": "205c48977515f3d6e8b96640853f53a5f9d699a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d86d8b35ddec33371cf2efaa05dfeffe035babbe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d86d8b35ddec33371cf2efaa05dfeffe035babbe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d86d8b35ddec33371cf2efaa05dfeffe035babbe", "patch": "@@ -1,3 +1,10 @@\n+2019-11-26  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/92683\n+\t* gimple-fold.c (gimple_fold_builtin_string_compare): Restore a test\n+\tinadvertently removed in a previous change.  Rename local variable\n+\tfor clarity.\n+\n 2019-11-26  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/92669"}, {"sha": "849bee2e069f73fdfe3dc3bc4a2475751e597170", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d86d8b35ddec33371cf2efaa05dfeffe035babbe/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d86d8b35ddec33371cf2efaa05dfeffe035babbe/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=d86d8b35ddec33371cf2efaa05dfeffe035babbe", "patch": "@@ -2346,18 +2346,19 @@ gimple_fold_builtin_string_compare (gimple_stmt_iterator *gsi)\n   tree str1 = gimple_call_arg (stmt, 0);\n   tree str2 = gimple_call_arg (stmt, 1);\n   tree lhs = gimple_call_lhs (stmt);\n-  tree len = NULL_TREE;\n+\n+  tree bound_node = NULL_TREE;\n   unsigned HOST_WIDE_INT bound = HOST_WIDE_INT_M1U;\n \n   /* Handle strncmp and strncasecmp functions.  */\n   if (gimple_call_num_args (stmt) == 3)\n     {\n-      len = gimple_call_arg (stmt, 2);\n-      if (tree_fits_uhwi_p (len))\n-\tbound = tree_to_uhwi (len);\n+      bound_node = gimple_call_arg (stmt, 2);\n+      if (tree_fits_uhwi_p (bound_node))\n+\tbound = tree_to_uhwi (bound_node);\n     }\n \n-  /* If the LEN parameter is zero, return zero.  */\n+  /* If the BOUND parameter is zero, return zero.  */\n   if (bound == 0)\n     {\n       replace_call_with_value (gsi, integer_zero_node);\n@@ -2418,6 +2419,9 @@ gimple_fold_builtin_string_compare (gimple_stmt_iterator *gsi)\n \tcase BUILT_IN_STRNCMP:\n \tcase BUILT_IN_STRNCMP_EQ:\n \t  {\n+\t    if (bound == HOST_WIDE_INT_M1U)\n+\t      break;\n+\n \t    /* Reduce the bound to be no more than the length\n \t       of the shorter of the two strings, or the sizes\n \t       of the unterminated arrays.  */"}, {"sha": "4dd9b7fdb88e94c9818b1654f62c484ef3d9ba4d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d86d8b35ddec33371cf2efaa05dfeffe035babbe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d86d8b35ddec33371cf2efaa05dfeffe035babbe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d86d8b35ddec33371cf2efaa05dfeffe035babbe", "patch": "@@ -1,3 +1,9 @@\n+2019-11-26  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/92683\n+\t* gcc.dg/strcmpopt_8.c: New test.\n+\t* gcc.dg/strcmpopt_9.c: New test.\n+\n 2019-11-26  Joel Hutton  <Joel.Hutton@arm.com>\n \n \tPR testsuite/92391"}, {"sha": "a90c0d371b45961ee9914810a0c3555e315e4be4", "filename": "gcc/testsuite/gcc.dg/strcmpopt_8.c", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d86d8b35ddec33371cf2efaa05dfeffe035babbe/gcc%2Ftestsuite%2Fgcc.dg%2Fstrcmpopt_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d86d8b35ddec33371cf2efaa05dfeffe035babbe/gcc%2Ftestsuite%2Fgcc.dg%2Fstrcmpopt_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrcmpopt_8.c?ref=d86d8b35ddec33371cf2efaa05dfeffe035babbe", "patch": "@@ -0,0 +1,177 @@\n+/* PR tree-optimization/92683 - strncmp incorrect result with equal substrings\n+   and nonconst bound\n+   { dg-do compile }\n+   { dg-options \"-O1 -Wall -fdump-tree-forwprop1\" } */\n+\n+#define SIZE_MAX  __SIZE_MAX__\n+\n+#define S123  \"123\"\n+#define S1234 \"1234\"\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+#ifndef ident\n+#  define ident(n) n\n+#endif\n+\n+extern void failure_on_line (int);\n+\n+/* Verify that the test in 'if (EQL strncmp (S, T, N))' is folded.  */\n+#define T(eql, s, t, n) do {\t\t\t\\\n+    max = ident (n);\t\t\t\t\\\n+    if (!(eql __builtin_strncmp (s, t, max)))\t\\\n+      failure_on_line (__LINE__);\t\t\\\n+  } while (0)\n+\n+void test_literal (void)\n+{\n+  size_t max;\n+\n+  T (0 ==, S123, S1234, 0);\n+  T (0 ==, S123, S1234, 1);\n+  T (0 ==, S123, S1234, 2);\n+  T (0 ==, S123, S1234, 3);\n+  T (0 >,  S123, S1234, 4);\n+  T (0 >,  S123, S1234, 5);\n+  T (0 >,  S123, S1234, SIZE_MAX - 2);\n+  T (0 >,  S123, S1234, SIZE_MAX - 1);\n+  T (0 >,  S123, S1234, SIZE_MAX);\n+\n+  T (0 ==, S123 + 1, S1234, 0);\n+  T (0 <,  S123 + 1, S1234, 1);\n+  T (0 <,  S123 + 1, S1234, 2);\n+  T (0 <,  S123 + 1, S1234, 3);\n+  T (0 <,  S123 + 1, S1234, 4);\n+  T (0 <,  S123 + 1, S1234, SIZE_MAX - 2);\n+  T (0 <,  S123 + 1, S1234, SIZE_MAX - 1);\n+  T (0 <,  S123 + 1, S1234, SIZE_MAX);\n+\n+  T (0 ==, S123 + 1, S1234 + 1, 0);\n+  T (0 ==, S123 + 1, S1234 + 1, 1);\n+  T (0 ==, S123 + 1, S1234 + 1, 2);\n+  T (0 >,  S123 + 1, S1234 + 1, 3);\n+  T (0 >,  S123 + 1, S1234 + 1, SIZE_MAX - 1);\n+  T (0 >,  S123 + 1, S1234 + 1, SIZE_MAX);\n+\n+  T (0 ==, S123 + 3, S1234 + 1, 0);\n+  T (0 >,  S123 + 3, S1234 + 1, 1);\n+  T (0 >,  S123 + 3, S1234 + 1, 2);\n+  T (0 >,  S123 + 3, S1234 + 1, 3);\n+  T (0 >,  S123 + 3, S1234 + 1, SIZE_MAX - 1);\n+  T (0 >,  S123 + 3, S1234 + 1, SIZE_MAX);\n+\n+  int zero = 0;\n+\n+  T (zero ==, S123, S1234, 0);\n+  T (zero ==, S123, S1234, 1);\n+  T (zero ==, S123, S1234, 2);\n+  T (zero ==, S123, S1234, 3);\n+  T (zero >,  S123, S1234, 4);\n+  T (zero >,  S123, S1234, 5);\n+  T (zero >,  S123, S1234, SIZE_MAX - 2);\n+  T (zero >,  S123, S1234, SIZE_MAX - 1);\n+  T (zero >,  S123, S1234, SIZE_MAX);\n+\n+  T (zero ==, S123 + 1, S1234, 0);\n+  T (zero <,  S123 + 1, S1234, 1);\n+  T (zero <,  S123 + 1, S1234, 2);\n+  T (zero <,  S123 + 1, S1234, 3);\n+  T (zero <,  S123 + 1, S1234, 4);\n+  T (zero <,  S123 + 1, S1234, SIZE_MAX - 2);\n+  T (zero <,  S123 + 1, S1234, SIZE_MAX - 1);\n+  T (zero <,  S123 + 1, S1234, SIZE_MAX);\n+\n+  T (zero ==, S123 + 1, S1234 + 1, 0);\n+  T (zero ==, S123 + 1, S1234 + 1, 1);\n+  T (zero ==, S123 + 1, S1234 + 1, 2);\n+  T (zero >,  S123 + 1, S1234 + 1, 3);\n+  T (zero >,  S123 + 1, S1234 + 1, SIZE_MAX - 1);\n+  T (zero >,  S123 + 1, S1234 + 1, SIZE_MAX);\n+\n+  T (zero ==, S123 + 3, S1234 + 1, 0);\n+  T (zero >,  S123 + 3, S1234 + 1, 1);\n+  T (zero >,  S123 + 3, S1234 + 1, 2);\n+  T (zero >,  S123 + 3, S1234 + 1, 3);\n+  T (zero >,  S123 + 3, S1234 + 1, SIZE_MAX - 1);\n+  T (zero >,  S123 + 3, S1234 + 1, SIZE_MAX);\n+}\n+\n+const char s123[] = S123;\n+const char s1234[] = S1234;\n+\n+void test_cst_array (void)\n+{\n+  size_t max;\n+\n+  T (0 ==, s123, s1234, 0);\n+  T (0 ==, s123, s1234, 1);\n+  T (0 ==, s123, s1234, 2);\n+  T (0 ==, s123, s1234, 3);\n+  T (0 >,  s123, s1234, 4);\n+  T (0 >,  s123, s1234, 5);\n+  T (0 >,  s123, s1234, SIZE_MAX - 2);\n+  T (0 >,  s123, s1234, SIZE_MAX - 1);\n+  T (0 >,  s123, s1234, SIZE_MAX);\n+\n+  T (0 ==, s123 + 1, s1234, 0);\n+  T (0 <,  s123 + 1, s1234, 1);\n+  T (0 <,  s123 + 1, s1234, 2);\n+  T (0 <,  s123 + 1, s1234, 3);\n+  T (0 <,  s123 + 1, s1234, 4);\n+  T (0 <,  s123 + 1, s1234, SIZE_MAX - 2);\n+  T (0 <,  s123 + 1, s1234, SIZE_MAX - 1);\n+  T (0 <,  s123 + 1, s1234, SIZE_MAX);\n+\n+  T (0 ==, s123 + 1, s1234 + 1, 0);\n+  T (0 ==, s123 + 1, s1234 + 1, 1);\n+  T (0 ==, s123 + 1, s1234 + 1, 2);\n+  T (0 >,  s123 + 1, s1234 + 1, 3);\n+  T (0 >,  s123 + 1, s1234 + 1, SIZE_MAX - 1);\n+  T (0 >,  s123 + 1, s1234 + 1, SIZE_MAX);\n+\n+  T (0 ==, s123 + 3, s1234 + 1, 0);\n+  T (0 >,  s123 + 3, s1234 + 1, 1);\n+  T (0 >,  s123 + 3, s1234 + 1, 2);\n+  T (0 >,  s123 + 3, s1234 + 1, 3);\n+  T (0 >,  s123 + 3, s1234 + 1, SIZE_MAX - 1);\n+  T (0 >,  s123 + 3, s1234 + 1, SIZE_MAX);\n+\n+  int zero = 0;\n+\n+  T (zero ==, s123, s1234, 0);\n+  T (zero ==, s123, s1234, 1);\n+  T (zero ==, s123, s1234, 2);\n+  T (zero ==, s123, s1234, 3);\n+  T (zero >,  s123, s1234, 4);\n+  T (zero >,  s123, s1234, 5);\n+  T (zero >,  s123, s1234, SIZE_MAX - 2);\n+  T (zero >,  s123, s1234, SIZE_MAX - 1);\n+  T (zero >,  s123, s1234, SIZE_MAX);\n+\n+  T (zero ==, s123 + 1, s1234, 0);\n+  T (zero <,  s123 + 1, s1234, 1);\n+  T (zero <,  s123 + 1, s1234, 2);\n+  T (zero <,  s123 + 1, s1234, 3);\n+  T (zero <,  s123 + 1, s1234, 4);\n+  T (zero <,  s123 + 1, s1234, SIZE_MAX - 2);\n+  T (zero <,  s123 + 1, s1234, SIZE_MAX - 1);\n+  T (zero <,  s123 + 1, s1234, SIZE_MAX);\n+\n+  T (zero ==, s123 + 1, s1234 + 1, 0);\n+  T (zero ==, s123 + 1, s1234 + 1, 1);\n+  T (zero ==, s123 + 1, s1234 + 1, 2);\n+  T (zero >,  s123 + 1, s1234 + 1, 3);\n+  T (zero >,  s123 + 1, s1234 + 1, SIZE_MAX - 1);\n+  T (zero >,  s123 + 1, s1234 + 1, SIZE_MAX);\n+\n+  T (zero ==, s123 + 3, s1234 + 1, 0);\n+  T (zero >,  s123 + 3, s1234 + 1, 1);\n+  T (zero >,  s123 + 3, s1234 + 1, 2);\n+  T (zero >,  s123 + 3, s1234 + 1, 3);\n+  T (zero >,  s123 + 3, s1234 + 1, SIZE_MAX - 1);\n+  T (zero >,  s123 + 3, s1234 + 1, SIZE_MAX);\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"strcmp\" \"forwprop1\" } }\n+   { dg-final { scan-tree-dump-not \"strncmp\" \"forwprop1\" } }\n+   { dg-final { scan-tree-dump-not \"failure_on_line_\" \"forwprop1\" } } */"}, {"sha": "15f6b63d1911e6e69772d0b119c013b86031ce41", "filename": "gcc/testsuite/gcc.dg/strcmpopt_9.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d86d8b35ddec33371cf2efaa05dfeffe035babbe/gcc%2Ftestsuite%2Fgcc.dg%2Fstrcmpopt_9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d86d8b35ddec33371cf2efaa05dfeffe035babbe/gcc%2Ftestsuite%2Fgcc.dg%2Fstrcmpopt_9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrcmpopt_9.c?ref=d86d8b35ddec33371cf2efaa05dfeffe035babbe", "patch": "@@ -0,0 +1,34 @@\n+/* PR tree-optimization/92683 - strncmp incorrect result with equal substrings\n+   and nonconst bound\n+   { dg-do run }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+#include \"strlenopt.h\"\n+\n+#define ident(n) ident (n)\n+\n+__attribute__ ((noclone, noinline, noipa)) size_t\n+ident (size_t x)\n+{\n+  return x;\n+}\n+\n+int nfails;\n+\n+__attribute__ ((noclone, noinline, noipa)) void\n+failure_on_line (int line)\n+{\n+  __builtin_printf (\"failure on line %i\\n\", line);\n+  ++nfails;\n+}\n+\n+#include \"strcmpopt_8.c\"\n+\n+int main (void)\n+{\n+  test_literal ();\n+  test_cst_array ();\n+\n+  if (nfails)\n+    __builtin_abort ();\n+}"}]}