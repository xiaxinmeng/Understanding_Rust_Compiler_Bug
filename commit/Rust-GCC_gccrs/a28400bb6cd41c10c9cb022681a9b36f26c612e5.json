{"sha": "a28400bb6cd41c10c9cb022681a9b36f26c612e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI4NDAwYmI2Y2Q0MWMxMGM5Y2IwMjI2ODFhOWIzNmYyNmM2MTJlNQ==", "commit": {"author": {"name": "Mohan Embar", "email": "gnustuff@thisiscool.com", "date": "2003-09-17T14:59:28Z"}, "committer": {"name": "Mohan Embar", "email": "membar@gcc.gnu.org", "date": "2003-09-17T14:59:28Z"}, "message": "configure.in: Standardized help text case of --enable-hash-synchronization New configure...\n\n\t* configure.in: Standardized help text case of\n\t--enable-hash-synchronization\n\tNew configure switch --enable-libgcj-multifile and corresponding\n\tautomake conditional ONESTEP.\n\t* configure: Rebuilt.\n\t* Makefile.am: Use automake conditional ONESTEP to determine\n\twhether classfiles should be compiled individually or all\n\tat once.\n\t* Makefile.in: Rebuilt.\n\nFrom-SVN: r71459", "tree": {"sha": "fdfcfe22626d5e0eed65c248e1c336a73e3d60f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdfcfe22626d5e0eed65c248e1c336a73e3d60f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a28400bb6cd41c10c9cb022681a9b36f26c612e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a28400bb6cd41c10c9cb022681a9b36f26c612e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a28400bb6cd41c10c9cb022681a9b36f26c612e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a28400bb6cd41c10c9cb022681a9b36f26c612e5/comments", "author": null, "committer": null, "parents": [{"sha": "43bc5d6b3de833197978a9eec994bc1ad8328f6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43bc5d6b3de833197978a9eec994bc1ad8328f6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43bc5d6b3de833197978a9eec994bc1ad8328f6c"}], "stats": {"total": 794, "additions": 439, "deletions": 355}, "files": [{"sha": "d9487ff0425cf4640f41b68498e546e183d79176", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a28400bb6cd41c10c9cb022681a9b36f26c612e5/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a28400bb6cd41c10c9cb022681a9b36f26c612e5/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a28400bb6cd41c10c9cb022681a9b36f26c612e5", "patch": "@@ -1,3 +1,15 @@\n+2003-09-17  Mohan Embar  <gnustuff@thisiscool.com>\n+\n+\t* configure.in: Standardized help text case of\n+\t--enable-hash-synchronization\n+\tNew configure switch --enable-libgcj-multifile and corresponding\n+\tautomake conditional ONESTEP.\n+\t* configure: Rebuilt.\n+\t* Makefile.am: Use automake conditional ONESTEP to determine\n+\twhether classfiles should be compiled individually or all\n+\tat once.\n+\t* Makefile.in: Rebuilt.\n+\n 2003-09-16  Thomas Fitzsimmons  <fitzsim@redhat.com>\n \n \t* gnu/java/awt/peer/gtk/GtkEmbeddedWindowPeer.java (construct):"}, {"sha": "b17f920af1a1260ec8a89919106ed4083060912a", "filename": "libjava/Makefile.am", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a28400bb6cd41c10c9cb022681a9b36f26c612e5/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a28400bb6cd41c10c9cb022681a9b36f26c612e5/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=a28400bb6cd41c10c9cb022681a9b36f26c612e5", "patch": "@@ -339,6 +339,10 @@ all_java_source_files = \\\n \n all_java_class_files = $(all_java_source_files:.java=.class)\n \n+if ONESTEP\n+\n+# Compile all classfiles in one go.\n+\n libgcj-@gcc_version@.jar: $(all_java_source_files)\n \t-@rm -f libgcj-@gcc_version@.jar\n \t@echo Compiling Java sourcefiles...\n@@ -356,6 +360,22 @@ libgcj-@gcc_version@.jar: $(all_java_source_files)\n # is built.\n $(all_java_class_files): libgcj-@gcc_version@.jar\n \n+else # !ONESTEP\n+\n+# Compile each classfile individually.\n+\n+.java.class:\n+\t$(JAVAC) $(JCFLAGS) -classpath '' -bootclasspath $(here):$(srcdir) -d $(here) $<\n+\n+libgcj-@gcc_version@.jar: $(all_java_class_files)\n+\t-@rm -f libgcj-@gcc_version@.jar\n+## Note that we explicitly want to include directory information.\n+\tfind java gnu javax org -type d -o -type f -name '*.class' | \\\n+\t  sed -e '/\\/\\./d' -e '/\\/xlib/d' | \\\n+\t  $(ZIP) cfM0E@ $@\n+\n+endif\n+\n # Note: The libtool objects are removed by mostlyclean-local\n # because of command-line-length issues.\n MOSTLYCLEANFILES = $(nat_headers) $(x_nat_headers)"}, {"sha": "58895df8175f7c34d0a7df37d3b0000d9cca540e", "filename": "libjava/Makefile.in", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a28400bb6cd41c10c9cb022681a9b36f26c612e5/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a28400bb6cd41c10c9cb022681a9b36f26c612e5/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=a28400bb6cd41c10c9cb022681a9b36f26c612e5", "patch": "@@ -4872,21 +4872,34 @@ $(gtk_c_headers): $(gtk_awt_peer_sources)\n \techo \"$(GCJH) -jni -d jniinclude -classpath '' -bootclasspath $(top_builddir) $$input\"; \\\n \t$(GCJH) -jni -d jniinclude -classpath '' -bootclasspath $(top_builddir) $$input\n \n-libgcj-@gcc_version@.jar: $(all_java_source_files)\n-\t-@rm -f libgcj-@gcc_version@.jar\n-\t@echo Compiling Java sourcefiles...\n-\t@: $(call write_entries_to_file,$?,libgcj.sourcelist)\n-\t$(JAVAC) $(JCFLAGS) -classpath '' -bootclasspath $(here):$(srcdir) -d $(here) @libgcj.sourcelist\n-\tfind java gnu javax org -type d -o -type f -name '*.class' | \\\n-\t  sed -e '/\\/\\./d' -e '/\\/xlib/d' | \\\n-\t  $(ZIP) cfM0E@ $@\n+# Compile all classfiles in one go.\n+\n+@ONESTEP_TRUE@libgcj-@gcc_version@.jar: $(all_java_source_files)\n+@ONESTEP_TRUE@\t-@rm -f libgcj-@gcc_version@.jar\n+@ONESTEP_TRUE@\t@echo Compiling Java sourcefiles...\n+@ONESTEP_TRUE@\t@: $(call write_entries_to_file,$?,libgcj.sourcelist)\n+@ONESTEP_TRUE@\t$(JAVAC) $(JCFLAGS) -classpath '' -bootclasspath $(here):$(srcdir) -d $(here) @libgcj.sourcelist\n+@ONESTEP_TRUE@\tfind java gnu javax org -type d -o -type f -name '*.class' | \\\n+@ONESTEP_TRUE@\t  sed -e '/\\/\\./d' -e '/\\/xlib/d' | \\\n+@ONESTEP_TRUE@\t  $(ZIP) cfM0E@ $@\n \n # This next rule seems backward, but reflects the fact\n # that 1) all classfiles are compiled in one go when the\n # libgcj jarfile is built and 2) anything which depends\n # on a particular .class file must wait until the jarfile\n # is built.\n-$(all_java_class_files): libgcj-@gcc_version@.jar\n+@ONESTEP_TRUE@$(all_java_class_files): libgcj-@gcc_version@.jar\n+\n+# Compile each classfile individually.\n+\n+@ONESTEP_FALSE@.java.class:\n+@ONESTEP_FALSE@\t$(JAVAC) $(JCFLAGS) -classpath '' -bootclasspath $(here):$(srcdir) -d $(here) $<\n+\n+@ONESTEP_FALSE@libgcj-@gcc_version@.jar: $(all_java_class_files)\n+@ONESTEP_FALSE@\t-@rm -f libgcj-@gcc_version@.jar\n+@ONESTEP_FALSE@\tfind java gnu javax org -type d -o -type f -name '*.class' | \\\n+@ONESTEP_FALSE@\t  sed -e '/\\/\\./d' -e '/\\/xlib/d' | \\\n+@ONESTEP_FALSE@\t  $(ZIP) cfM0E@ $@\n \n mostlyclean-local:\n \tfind . -name '*.lo' -print | xargs $(LIBTOOL) rm -f"}, {"sha": "6c44b70fa7e6d7614f25c7c146cb3127a6884b64", "filename": "libjava/configure", "status": "modified", "additions": 373, "deletions": 345, "changes": 718, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a28400bb6cd41c10c9cb022681a9b36f26c612e5/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a28400bb6cd41c10c9cb022681a9b36f26c612e5/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=a28400bb6cd41c10c9cb022681a9b36f26c612e5"}, {"sha": "dac09ab4d28af2415134a1c0007955078d6d2d3f", "filename": "libjava/configure.in", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a28400bb6cd41c10c9cb022681a9b36f26c612e5/libjava%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a28400bb6cd41c10c9cb022681a9b36f26c612e5/libjava%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.in?ref=a28400bb6cd41c10c9cb022681a9b36f26c612e5", "patch": "@@ -80,12 +80,23 @@ dnl Currently works only for Linux X86/ia64\n dnl Typically faster and more space-efficient\n AC_ARG_ENABLE(hash-synchronization,\n [  --enable-hash-synchronization\n-                          Use global hash table for monitor locks])\n+                          use global hash table for monitor locks])\n \n if test -z \"$enable_hash_synchronization\"; then\n    enable_hash_synchronization=$enable_hash_synchronization_default\n fi\n \n+# Do we allow intermodule optimizations (i.e. compiling many files at once)?\n+AC_ARG_ENABLE(libgcj-multifile,\n+[  --enable-libgcj-multifile\n+                          allow compilation of several files at once],\n+[case \"${enableval}\" in\n+  yes) enable_libgcj_multifile=yes ;;\n+  no)  enable_libgcj_multifile=no ;;\n+  *) AC_MSG_ERROR(bad value ${enableval} for --enable-libgcj-multifile) ;;\n+esac],[enable_libgcj_multifile=no])\n+AM_CONDITIONAL(ONESTEP, test \"$enable_libgcj_multifile\" = yes)\n+\n dnl configure.host sets slow_pthread_self if the synchronization code should \n dnl try to avoid pthread_self calls by caching thread IDs in a hashtable.\n if test \"${slow_pthread_self}\" = \"yes\"; then"}]}