{"sha": "68119618f7a027c1c0205319fc9d315169e6d60f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgxMTk2MThmN2EwMjdjMWMwMjA1MzE5ZmM5ZDMxNTE2OWU2ZDYwZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-05-17T09:13:33Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-05-17T09:13:33Z"}, "message": "tree-vect-patterns.c (vect_recog_rotate_pattern): For vect_external_def oprnd1 with loop_vinfo...\n\n\t* tree-vect-patterns.c (vect_recog_rotate_pattern): For\n\tvect_external_def oprnd1 with loop_vinfo, try to emit\n\toptional cast, negation and and stmts on the loop preheader\n\tedge instead of into the pattern def seq.\n\n\t* gcc.target/i386/rotate-4.c: Compile only with -mavx\n\tinstead of -mavx2, require only avx instead of avx2.\n\t* gcc.target/i386/rotate-4a.c: Include avx-check.h instead\n\tof avx2-check.h and turn into an avx runtime test instead of\n\tavx2 runtime test.\n\nFrom-SVN: r199005", "tree": {"sha": "a4d3a746419a4a5e8ccd17a8b13d9a8d167337e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4d3a746419a4a5e8ccd17a8b13d9a8d167337e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68119618f7a027c1c0205319fc9d315169e6d60f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68119618f7a027c1c0205319fc9d315169e6d60f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68119618f7a027c1c0205319fc9d315169e6d60f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68119618f7a027c1c0205319fc9d315169e6d60f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0a91f65deba068300da5c8cc30ef3124f758bfbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a91f65deba068300da5c8cc30ef3124f758bfbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a91f65deba068300da5c8cc30ef3124f758bfbb"}], "stats": {"total": 86, "additions": 69, "deletions": 17}, "files": [{"sha": "0394c0ee87eb6f5de0da9685ae9852d396eb81ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68119618f7a027c1c0205319fc9d315169e6d60f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68119618f7a027c1c0205319fc9d315169e6d60f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68119618f7a027c1c0205319fc9d315169e6d60f", "patch": "@@ -1,5 +1,10 @@\n 2013-05-17  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* tree-vect-patterns.c (vect_recog_rotate_pattern): For\n+\tvect_external_def oprnd1 with loop_vinfo, try to emit\n+\toptional cast, negation and and stmts on the loop preheader\n+\tedge instead of into the pattern def seq.\n+\n \tPR tree-optimization/57051\n \t* fold-const.c (const_binop) <case VEC_LSHIFT_EXPR,\n \tcase VEC_RSHIFT_EXPR>: Fix BYTES_BIG_ENDIAN handling."}, {"sha": "8635b0b72e29dc75f8518eb0c0b83e02750545e1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68119618f7a027c1c0205319fc9d315169e6d60f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68119618f7a027c1c0205319fc9d315169e6d60f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=68119618f7a027c1c0205319fc9d315169e6d60f", "patch": "@@ -1,3 +1,11 @@\n+2013-05-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.target/i386/rotate-4.c: Compile only with -mavx\n+\tinstead of -mavx2, require only avx instead of avx2.\n+\t* gcc.target/i386/rotate-4a.c: Include avx-check.h instead\n+\tof avx2-check.h and turn into an avx runtime test instead of\n+\tavx2 runtime test.\n+\n 2013-05-16  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* g++.dg/ext/vector22.C: Uncomment working test."}, {"sha": "7faa052cbff5b23fb758bb96d723337d1a831694", "filename": "gcc/testsuite/gcc.target/i386/rotate-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68119618f7a027c1c0205319fc9d315169e6d60f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frotate-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68119618f7a027c1c0205319fc9d315169e6d60f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frotate-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frotate-4.c?ref=68119618f7a027c1c0205319fc9d315169e6d60f", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-require-effective-target avx2 } */\n-/* { dg-options \"-O3 -mavx2 -fdump-tree-vect-details\" } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O3 -mavx -fdump-tree-vect-details\" } */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "3da440fb78c8a1d837f287e717bcbfdc2ac9da5d", "filename": "gcc/testsuite/gcc.target/i386/rotate-4a.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68119618f7a027c1c0205319fc9d315169e6d60f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frotate-4a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68119618f7a027c1c0205319fc9d315169e6d60f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frotate-4a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frotate-4a.c?ref=68119618f7a027c1c0205319fc9d315169e6d60f", "patch": "@@ -1,14 +1,14 @@\n /* { dg-do run } */\n-/* { dg-require-effective-target avx2 } */\n-/* { dg-options \"-O3 -mavx2\" } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O3 -mavx\" } */\n \n-#include \"avx2-check.h\"\n+#include \"avx-check.h\"\n \n #include \"rotate-4.c\"\n \n static void\n __attribute__((noinline))\n-avx2_test (void)\n+avx_test (void)\n {\n   int i;\n   for (i = 0; i < 1024; i++)"}, {"sha": "648385a9b0cabe9a1c7d53db8a2a5a51c2536f2e", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 50, "deletions": 11, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68119618f7a027c1c0205319fc9d315169e6d60f/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68119618f7a027c1c0205319fc9d315169e6d60f/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=68119618f7a027c1c0205319fc9d315169e6d60f", "patch": "@@ -1494,6 +1494,7 @@ vect_recog_rotate_pattern (vec<gimple> *stmts, tree *type_in, tree *type_out)\n   bb_vec_info bb_vinfo = STMT_VINFO_BB_VINFO (stmt_vinfo);\n   enum vect_def_type dt;\n   optab optab1, optab2;\n+  edge ext_def = NULL;\n \n   if (!is_gimple_assign (last_stmt))\n     return NULL;\n@@ -1574,6 +1575,21 @@ vect_recog_rotate_pattern (vec<gimple> *stmts, tree *type_in, tree *type_out)\n   if (*type_in == NULL_TREE)\n     return NULL;\n \n+  if (dt == vect_external_def\n+      && TREE_CODE (oprnd1) == SSA_NAME\n+      && loop_vinfo)\n+    {\n+      struct loop *loop = LOOP_VINFO_LOOP (loop_vinfo);\n+      ext_def = loop_preheader_edge (loop);\n+      if (!SSA_NAME_IS_DEFAULT_DEF (oprnd1))\n+\t{\n+\t  basic_block bb = gimple_bb (SSA_NAME_DEF_STMT (oprnd1));\n+\t  if (bb == NULL\n+\t      || !dominated_by_p (CDI_DOMINATORS, ext_def->dest, bb))\n+\t    ext_def = NULL;\n+\t}\n+    }\n+\n   def = NULL_TREE;\n   if (TREE_CODE (oprnd1) == INTEGER_CST\n       || TYPE_MODE (TREE_TYPE (oprnd1)) == TYPE_MODE (type))\n@@ -1593,7 +1609,14 @@ vect_recog_rotate_pattern (vec<gimple> *stmts, tree *type_in, tree *type_out)\n       def = vect_recog_temp_ssa_var (type, NULL);\n       def_stmt = gimple_build_assign_with_ops (NOP_EXPR, def, oprnd1,\n \t\t\t\t\t       NULL_TREE);\n-      append_pattern_def_seq (stmt_vinfo, def_stmt);\n+      if (ext_def)\n+\t{\n+\t  basic_block new_bb\n+\t    = gsi_insert_on_edge_immediate (ext_def, def_stmt);\n+\t  gcc_assert (!new_bb);\n+\t}\n+      else\n+\tappend_pattern_def_seq (stmt_vinfo, def_stmt);\n     }\n   stype = TREE_TYPE (def);\n \n@@ -1618,23 +1641,39 @@ vect_recog_rotate_pattern (vec<gimple> *stmts, tree *type_in, tree *type_out)\n       def2 = vect_recog_temp_ssa_var (stype, NULL);\n       def_stmt = gimple_build_assign_with_ops (NEGATE_EXPR, def2, def,\n \t\t\t\t\t       NULL_TREE);\n-      def_stmt_vinfo\n-\t= new_stmt_vec_info (def_stmt, loop_vinfo, bb_vinfo);\n-      set_vinfo_for_stmt (def_stmt, def_stmt_vinfo);\n-      STMT_VINFO_VECTYPE (def_stmt_vinfo) = vecstype;\n-      append_pattern_def_seq (stmt_vinfo, def_stmt);\n+      if (ext_def)\n+\t{\n+\t  basic_block new_bb\n+\t    = gsi_insert_on_edge_immediate (ext_def, def_stmt);\n+\t  gcc_assert (!new_bb);\n+\t}\n+      else\n+\t{\n+\t  def_stmt_vinfo = new_stmt_vec_info (def_stmt, loop_vinfo, bb_vinfo);\n+\t  set_vinfo_for_stmt (def_stmt, def_stmt_vinfo);\n+\t  STMT_VINFO_VECTYPE (def_stmt_vinfo) = vecstype;\n+\t  append_pattern_def_seq (stmt_vinfo, def_stmt);\n+\t}\n \n       def2 = vect_recog_temp_ssa_var (stype, NULL);\n       tree mask\n \t= build_int_cst (stype, GET_MODE_PRECISION (TYPE_MODE (stype)) - 1);\n       def_stmt = gimple_build_assign_with_ops (BIT_AND_EXPR, def2,\n \t\t\t\t\t       gimple_assign_lhs (def_stmt),\n \t\t\t\t\t       mask);\n-      def_stmt_vinfo\n-\t= new_stmt_vec_info (def_stmt, loop_vinfo, bb_vinfo);\n-      set_vinfo_for_stmt (def_stmt, def_stmt_vinfo);\n-      STMT_VINFO_VECTYPE (def_stmt_vinfo) = vecstype;\n-      append_pattern_def_seq (stmt_vinfo, def_stmt);\n+      if (ext_def)\n+\t{\n+\t  basic_block new_bb\n+\t    = gsi_insert_on_edge_immediate (ext_def, def_stmt);\n+\t  gcc_assert (!new_bb);\n+\t}\n+      else\n+\t{\n+\t  def_stmt_vinfo = new_stmt_vec_info (def_stmt, loop_vinfo, bb_vinfo);\n+\t  set_vinfo_for_stmt (def_stmt, def_stmt_vinfo);\n+\t  STMT_VINFO_VECTYPE (def_stmt_vinfo) = vecstype;\n+\t  append_pattern_def_seq (stmt_vinfo, def_stmt);\n+\t}\n     }\n \n   var1 = vect_recog_temp_ssa_var (type, NULL);"}]}