{"sha": "c29c2a0604719684ca3d65c7c10912c11afb8357", "node_id": "C_kwDOANBUbNoAKGMyOWMyYTA2MDQ3MTk2ODRjYTNkNjVjN2MxMDkxMmMxMWFmYjgzNTc", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-05-12T21:26:34Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-05-13T12:32:23Z"}, "message": "libstdc++: Improve doxygen docs for <thread> and <future>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/std_thread.h (thread, thread::id): Improve\n\tdoxygen docs.\n\t* include/std/future: Likewise.\n\t* include/std/thread (jthread): Likewise.", "tree": {"sha": "b294a8398339c8db302f487b53078876d712fb40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b294a8398339c8db302f487b53078876d712fb40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c29c2a0604719684ca3d65c7c10912c11afb8357", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c29c2a0604719684ca3d65c7c10912c11afb8357", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c29c2a0604719684ca3d65c7c10912c11afb8357", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c29c2a0604719684ca3d65c7c10912c11afb8357/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e61492549b95dff635395f69034b5fefa00e339a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e61492549b95dff635395f69034b5fefa00e339a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e61492549b95dff635395f69034b5fefa00e339a"}], "stats": {"total": 83, "additions": 73, "deletions": 10}, "files": [{"sha": "f67bc114591f43190a2ae4f076f4538d671e8a1e", "filename": "libstdc++-v3/include/bits/std_thread.h", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c2a0604719684ca3d65c7c10912c11afb8357/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_thread.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c2a0604719684ca3d65c7c10912c11afb8357/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_thread.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_thread.h?ref=c29c2a0604719684ca3d65c7c10912c11afb8357", "patch": "@@ -57,7 +57,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @{\n    */\n \n-  /// thread\n+  /** A std::thread represents a new thread of execution.\n+   *\n+   * The default constructor creates an object that does not own a thread.\n+   * The `thread(F&&, Args&&...)` constructor invokes a callable in a new\n+   * thread, and owns that new thread. A `std::thread` that owns a thread\n+   * is *joinable*. Joining a thread waits for it to finish executing,\n+   * which happens when the callable running in that thread returns.\n+   *\n+   * A `std::thread` cannot be copied, but can be moved. Moving a joinable\n+   * object transfers ownership of its thread to another object.\n+   *\n+   * A joinable `std::thread` must be explicitly joined (or detached) before\n+   * it is destroyed or assigned to. Attempting to destroy a joinable thread\n+   * will terminate the whole process.\n+   *\n+   * @headerfile thread\n+   * @since C++11\n+   */\n   class thread\n   {\n   public:\n@@ -76,7 +93,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     using native_handle_type = int;\n #endif\n \n-    /// thread::id\n+    /** A std::thread::id is a unique identifier for a thread.\n+     *\n+     * @headerfile thread\n+     * @since C++11\n+     */\n     class id\n     {\n       native_handle_type\t_M_thread;\n@@ -261,8 +282,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       };\n \n   public:\n+    /// @cond undocumented\n     template<typename... _Tp>\n       using _Call_wrapper = _Invoker<tuple<typename decay<_Tp>::type...>>;\n+    /// @endcond\n #endif // _GLIBCXX_HAS_GTHREADS\n   };\n \n@@ -272,10 +295,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   inline unsigned int thread::hardware_concurrency() noexcept { return 0; }\n #endif\n \n+  /// @relates std::thread\n   inline void\n   swap(thread& __x, thread& __y) noexcept\n   { __x.swap(__y); }\n \n+  /// @relates std::thread::id\n   inline bool\n   operator==(thread::id __x, thread::id __y) noexcept\n   {\n@@ -301,7 +326,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   namespace this_thread\n   {\n-    /// this_thread::get_id\n+    /// The unique identifier of the current thread.\n     inline thread::id\n     get_id() noexcept\n     {\n@@ -314,7 +339,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n     }\n \n-    /// this_thread::yield\n+    /// Allow the implementation to schedule a different thread.\n     inline void\n     yield() noexcept\n     {"}, {"sha": "3d5d793a08ec5f72ddb0644a23f67f54545d3c55", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c2a0604719684ca3d65c7c10912c11afb8357/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c2a0604719684ca3d65c7c10912c11afb8357/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=c29c2a0604719684ca3d65c7c10912c11afb8357", "patch": "@@ -58,7 +58,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @defgroup futures Futures\n    * @ingroup concurrency\n    *\n-   * Classes for futures support.\n+   * Futures and promises provide support for retrieving the result from\n+   * an asynchronous function, e.g. one that is running in another thread.\n+   * A `std::future` represents an asynchronous result that will become\n+   * ready at some later time. A consumer can wait on a future until the\n+   * result is ready to be accessed.\n+   *\n+   * @since C++11\n    * @{\n    */\n \n@@ -71,27 +77,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     broken_promise\n   };\n \n-  /// Specialization.\n+  /// Specialization that allows `future_errc` to convert to `error_code`.\n   template<>\n     struct is_error_code_enum<future_errc> : public true_type { };\n \n   /// Points to a statically-allocated object derived from error_category.\n   const error_category&\n   future_category() noexcept;\n \n-  /// Overload for make_error_code.\n+  /// Overload of make_error_code for `future_errc`.\n   inline error_code\n   make_error_code(future_errc __errc) noexcept\n   { return error_code(static_cast<int>(__errc), future_category()); }\n \n-  /// Overload for make_error_condition.\n+  /// Overload of make_error_condition for `future_errc`.\n   inline error_condition\n   make_error_condition(future_errc __errc) noexcept\n   { return error_condition(static_cast<int>(__errc), future_category()); }\n \n   /**\n    *  @brief Exception type thrown by futures.\n    *  @ingroup exceptions\n+   *  @since C++11\n    */\n   class future_error : public logic_error\n   {\n@@ -178,11 +185,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     deferred\n   };\n \n+  /// @cond undocumented\n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // 2021. Further incorrect usages of result_of\n   template<typename _Fn, typename... _Args>\n     using __async_result_of = typename __invoke_result<\n       typename decay<_Fn>::type, typename decay<_Args>::type...>::type;\n+  /// @endcond\n \n   template<typename _Fn, typename... _Args>\n     future<__async_result_of<_Fn, _Args...>>\n@@ -194,6 +203,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if defined(_GLIBCXX_HAS_GTHREADS)\n \n+  /// @cond undocumented\n+\n   /// Base class and enclosing scope.\n   struct __future_base\n   {\n@@ -655,8 +666,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void _M_destroy() { delete this; }\n     };\n \n+  /// @endcond\n+\n #ifndef _GLIBCXX_ASYNC_ABI_COMPAT\n \n+  /// @cond undocumented\n   // Allow _Setter objects to be stored locally in std::function\n   template<typename _Res, typename _Arg>\n     struct __is_location_invariant\n@@ -668,6 +682,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_location_invariant\n     <__future_base::_Task_setter<_Res_ptr, _Fn, _Res>>\n     : true_type { };\n+  /// @endcond\n \n   /// Common implementation for future and shared_future.\n   template<typename _Res>\n@@ -1376,6 +1391,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     };\n \n+  /// @cond undocumented\n   template<typename _Ptr_type, typename _Fn, typename _Res>\n     struct __future_base::_Task_setter\n     {\n@@ -1512,6 +1528,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __create_task_state<_Res(_Args...)>(std::move(_M_impl._M_fn),\n \t\t\t\t\t\t static_cast<_Alloc&>(_M_impl));\n     }\n+  /// @endcond\n \n   /// packaged_task\n   template<typename _Res, typename... _ArgTypes>\n@@ -1648,6 +1665,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public true_type { };\n #endif\n \n+  /// @cond undocumented\n+\n   // Shared state created by std::async().\n   // Holds a deferred function and storage for its result.\n   template<typename _BoundFn, typename _Res>\n@@ -1761,7 +1780,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Ptr_type _M_result;\n       _BoundFn _M_fn;\n     };\n-\n+  /// @endcond\n \n   /// async\n   template<typename _Fn, typename... _Args>"}, {"sha": "82f191afe2d96d5c2c992cc53a88fc9cf8b6d0eb", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c2a0604719684ca3d65c7c10912c11afb8357/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c2a0604719684ca3d65c7c10912c11afb8357/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=c29c2a0604719684ca3d65c7c10912c11afb8357", "patch": "@@ -50,13 +50,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /**\n    * @defgroup threads Threads\n    * @ingroup concurrency\n+   * @since C++11\n    *\n    * Classes for thread support.\n    * @{\n    */\n \n   // std::thread is defined in <bits/std_thread.h>\n \n+  /// @relates std::thread::id @{\n+\n #if __cpp_lib_three_way_comparison\n   inline strong_ordering\n   operator<=>(thread::id __x, thread::id __y) noexcept\n@@ -96,9 +99,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       else\n \treturn __out << __id._M_thread;\n     }\n+  /// @}\n \n #ifdef __cpp_lib_jthread\n \n+  /// @cond undocumented\n #ifndef __STRICT_ANSI__\n     template<typename _Callable, typename... _Args>\n       constexpr bool __pmf_expects_stop_token = false;\n@@ -108,8 +113,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t= __and_<is_member_function_pointer<remove_reference_t<_Callable>>,\n \t\t is_invocable<_Callable, _Obj, stop_token, _Args...>>::value;\n #endif\n+    /// @endcond\n \n-  /// A thread that can be requested to stop and automatically joined.\n+  /** A thread with cancellation and automatic joining.\n+   *\n+   * Unlike `std::thread`, destroying a joinable `std::jthread` will not\n+   * terminate the process. Instead, it will try to request its thread to\n+   * stop, then will join it.\n+   *\n+   * A `std::jthread` has a `std::stop_source` member which will be passed\n+   * as the first argument to the callable that runs in the new thread\n+   * (as long as the callable will accept that argument). That can then\n+   * be used to send a stop request that the new thread can test for.\n+   *\n+   * @headerfile thread\n+   * @since C++20\n+   */\n   class jthread\n   {\n   public:"}]}