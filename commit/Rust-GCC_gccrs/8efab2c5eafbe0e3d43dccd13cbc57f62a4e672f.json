{"sha": "8efab2c5eafbe0e3d43dccd13cbc57f62a4e672f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVmYWIyYzVlYWZiZTBlM2Q0M2RjY2QxM2NiYzU3ZjYyYTRlNjcyZg==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-10-11T18:34:16Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-10-11T18:34:16Z"}, "message": "avr-protos.h (avr_mode_code_base_reg_class): New prototype.\n\n\t* config/avr/avr-protos.h (avr_mode_code_base_reg_class): New prototype.\n\t(avr_regno_mode_code_ok_for_base_p): New prototype.\n\t* config/avr/avr.h (BASE_REG_CLASS): Remove.\n\t(REGNO_OK_FOR_BASE_P): Remove.\n\t(REG_OK_FOR_BASE_NOSTRICT_P): Remove.\n\t(REG_OK_FOR_BASE_STRICT_P): Remove.\n\t(MODE_CODE_BASE_REG_CLASS): New define.\n\t(REGNO_MODE_CODE_OK_FOR_BASE_P): New define.\n\t* config/avr/avr.c (avr_mode_code_base_reg_class): New function.\n\t(avr_regno_mode_code_ok_for_base_p): New function.\n\t(avr_reg_ok_for_addr_p): New static function.\n\t(avr_legitimate_address_p): Use it.  Beautify.\n\nFrom-SVN: r179817", "tree": {"sha": "5ccf985e6fad4f353938c32fb0d87118757c65b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ccf985e6fad4f353938c32fb0d87118757c65b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8efab2c5eafbe0e3d43dccd13cbc57f62a4e672f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8efab2c5eafbe0e3d43dccd13cbc57f62a4e672f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8efab2c5eafbe0e3d43dccd13cbc57f62a4e672f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8efab2c5eafbe0e3d43dccd13cbc57f62a4e672f/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05058b6e31ec87bb08cb9457b22080afbd2c4723", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05058b6e31ec87bb08cb9457b22080afbd2c4723", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05058b6e31ec87bb08cb9457b22080afbd2c4723"}], "stats": {"total": 153, "additions": 114, "deletions": 39}, "files": [{"sha": "29a49a0aac68ee277ba45f57ba9e94692dff9581", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efab2c5eafbe0e3d43dccd13cbc57f62a4e672f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efab2c5eafbe0e3d43dccd13cbc57f62a4e672f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8efab2c5eafbe0e3d43dccd13cbc57f62a4e672f", "patch": "@@ -1,3 +1,18 @@\n+2011-10-11  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/avr-protos.h (avr_mode_code_base_reg_class): New prototype.\n+\t(avr_regno_mode_code_ok_for_base_p): New prototype.\n+\t* config/avr/avr.h (BASE_REG_CLASS): Remove.\n+\t(REGNO_OK_FOR_BASE_P): Remove.\n+\t(REG_OK_FOR_BASE_NOSTRICT_P): Remove.\n+\t(REG_OK_FOR_BASE_STRICT_P): Remove.\n+\t(MODE_CODE_BASE_REG_CLASS): New define.\n+\t(REGNO_MODE_CODE_OK_FOR_BASE_P): New define.\n+\t* config/avr/avr.c (avr_mode_code_base_reg_class): New function.\n+\t(avr_regno_mode_code_ok_for_base_p): New function.\n+\t(avr_reg_ok_for_addr_p): New static function.\n+\t(avr_legitimate_address_p): Use it.  Beautify.\n+\n 2011-10-11  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/50447"}, {"sha": "a799fb2a9374ade1ab8264278efc2b5f321d3af0", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efab2c5eafbe0e3d43dccd13cbc57f62a4e672f/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efab2c5eafbe0e3d43dccd13cbc57f62a4e672f/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=8efab2c5eafbe0e3d43dccd13cbc57f62a4e672f", "patch": "@@ -106,6 +106,8 @@ extern int avr_simplify_comparison_p (enum machine_mode mode,\n extern RTX_CODE avr_normalize_condition (RTX_CODE condition);\n extern void out_shift_with_cnt (const char *templ, rtx insn,\n \t\t\t\trtx operands[], int *len, int t_len);\n+extern reg_class_t avr_mode_code_base_reg_class (enum machine_mode, RTX_CODE, RTX_CODE);\n+extern bool avr_regno_mode_code_ok_for_base_p (int, enum machine_mode, RTX_CODE, RTX_CODE);\n extern rtx avr_incoming_return_addr_rtx (void);\n extern rtx avr_legitimize_reload_address (rtx, enum machine_mode, int, int, int, int, rtx (*)(rtx,int));\n #endif /* RTX_CODE */"}, {"sha": "751f27abb2ca5ac06fdeb4621997ed1d0212edea", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 93, "deletions": 23, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efab2c5eafbe0e3d43dccd13cbc57f62a4e672f/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efab2c5eafbe0e3d43dccd13cbc57f62a4e672f/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=8efab2c5eafbe0e3d43dccd13cbc57f62a4e672f", "patch": "@@ -1202,43 +1202,68 @@ avr_cannot_modify_jumps_p (void)\n }\n \n \n+/* Helper function for `avr_legitimate_address_p'.  */\n+\n+static inline bool\n+avr_reg_ok_for_addr_p (rtx reg, addr_space_t as ATTRIBUTE_UNUSED, int strict)\n+{\n+  return (REG_P (reg)\n+          && (avr_regno_mode_code_ok_for_base_p (REGNO (reg),\n+                                                 QImode, MEM, UNKNOWN)\n+              || (!strict\n+                  && REGNO (reg) >= FIRST_PSEUDO_REGISTER)));\n+}\n+\n+\n /* Return nonzero if X (an RTX) is a legitimate memory address on the target\n    machine for a memory operand of mode MODE.  */\n \n-bool\n+static bool\n avr_legitimate_address_p (enum machine_mode mode, rtx x, bool strict)\n {\n   reg_class_t r = NO_REGS;\n   \n-  if (REG_P (x) && (strict ? REG_OK_FOR_BASE_STRICT_P (x)\n-                    : REG_OK_FOR_BASE_NOSTRICT_P (x)))\n-    r = POINTER_REGS;\n+  if (REG_P (x)\n+      && avr_reg_ok_for_addr_p (x, ADDR_SPACE_GENERIC, strict))\n+    {\n+      r = POINTER_REGS;\n+    }\n   else if (CONSTANT_ADDRESS_P (x))\n-    r = ALL_REGS;\n+    {\n+      r = ALL_REGS;\n+    }\n   else if (GET_CODE (x) == PLUS\n            && REG_P (XEXP (x, 0))\n-\t   && GET_CODE (XEXP (x, 1)) == CONST_INT\n-\t   && INTVAL (XEXP (x, 1)) >= 0)\n+           && CONST_INT_P (XEXP (x, 1))\n+           && INTVAL (XEXP (x, 1)) >= 0)\n     {\n-      int fit = INTVAL (XEXP (x, 1)) <= MAX_LD_OFFSET (mode);\n+      rtx reg = XEXP (x, 0);\n+      bool fit = INTVAL (XEXP (x, 1)) <= MAX_LD_OFFSET (mode);\n+      \n       if (fit)\n-\t{\n-\t  if (! strict\n-\t      || REGNO (XEXP (x,0)) == REG_X\n-\t      || REGNO (XEXP (x,0)) == REG_Y\n-\t      || REGNO (XEXP (x,0)) == REG_Z)\n-\t    r = BASE_POINTER_REGS;\n-\t  if (XEXP (x,0) == frame_pointer_rtx\n-\t      || XEXP (x,0) == arg_pointer_rtx)\n-\t    r = BASE_POINTER_REGS;\n-\t}\n-      else if (frame_pointer_needed && XEXP (x,0) == frame_pointer_rtx)\n-\tr = POINTER_Y_REGS;\n+        {\n+          if (! strict\n+              || REGNO (reg) == REG_X\n+              || REGNO (reg) == REG_Y\n+              || REGNO (reg) == REG_Z)\n+            {\n+              r = BASE_POINTER_REGS;\n+            }\n+          \n+          if (reg == frame_pointer_rtx\n+              || reg == arg_pointer_rtx)\n+            {\n+              r = BASE_POINTER_REGS;\n+            }\n+        }\n+      else if (frame_pointer_needed && reg == frame_pointer_rtx)\n+        {\n+          r = POINTER_Y_REGS;\n+        }\n     }\n   else if ((GET_CODE (x) == PRE_DEC || GET_CODE (x) == POST_INC)\n            && REG_P (XEXP (x, 0))\n-           && (strict ? REG_OK_FOR_BASE_STRICT_P (XEXP (x, 0))\n-               : REG_OK_FOR_BASE_NOSTRICT_P (XEXP (x, 0))))\n+           && avr_reg_ok_for_addr_p (XEXP (x, 0), ADDR_SPACE_GENERIC, strict))\n     {\n       r = POINTER_REGS;\n     }\n@@ -1269,7 +1294,7 @@ avr_legitimate_address_p (enum machine_mode mode, rtx x, bool strict)\n /* Attempts to replace X with a valid\n    memory address for an operand of mode MODE  */\n \n-rtx\n+static rtx\n avr_legitimize_address (rtx x, rtx oldx, enum machine_mode mode)\n {\n   bool big_offset_p = false;\n@@ -7224,6 +7249,51 @@ avr_hard_regno_mode_ok (int regno, enum machine_mode mode)\n }\n \n \n+/* Implement `MODE_CODE_BASE_REG_CLASS'.  */\n+\n+reg_class_t\n+avr_mode_code_base_reg_class (enum machine_mode mode ATTRIBUTE_UNUSED,\n+                              RTX_CODE outer_code ATTRIBUTE_UNUSED,\n+                              RTX_CODE index_code ATTRIBUTE_UNUSED)\n+{\n+  return reload_completed ? BASE_POINTER_REGS : POINTER_REGS;\n+}\n+\n+\n+/* Implement `REGNO_MODE_CODE_OK_FOR_BASE_P'.  */\n+\n+bool\n+avr_regno_mode_code_ok_for_base_p (int regno,\n+                                   enum machine_mode mode ATTRIBUTE_UNUSED,\n+                                   RTX_CODE outer_code ATTRIBUTE_UNUSED,\n+                                   RTX_CODE index_code ATTRIBUTE_UNUSED)\n+{\n+  if (regno < FIRST_PSEUDO_REGISTER\n+      && (regno == REG_X\n+          || regno == REG_Y\n+          || regno == REG_Z\n+          || regno == ARG_POINTER_REGNUM))\n+    {\n+      return true;\n+    }\n+\n+  if (reg_renumber)\n+    {\n+      regno = reg_renumber[regno];\n+\n+      if (regno == REG_X\n+          || regno == REG_Y\n+          || regno == REG_Z\n+          || regno == ARG_POINTER_REGNUM)\n+        {\n+          return true;\n+        }\n+    }\n+  \n+  return false;\n+}\n+\n+\n /* A helper for `output_reload_insisf' and `output_reload_inhi'.  */\n /* Set 32-bit register OP[0] to compile-time constant OP[1].\n    CLOBBER_REG is a QI clobber register or NULL_RTX."}, {"sha": "015f12b5fe51306eaabea890306b3eba61488014", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efab2c5eafbe0e3d43dccd13cbc57f62a4e672f/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efab2c5eafbe0e3d43dccd13cbc57f62a4e672f/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=8efab2c5eafbe0e3d43dccd13cbc57f62a4e672f", "patch": "@@ -308,21 +308,13 @@ enum reg_class {\n \n #define REGNO_REG_CLASS(R) avr_regno_reg_class(R)\n \n-#define BASE_REG_CLASS (reload_completed ? BASE_POINTER_REGS : POINTER_REGS)\n+#define MODE_CODE_BASE_REG_CLASS(mode, outer_code, index_code) \\\n+  avr_mode_code_base_reg_class (mode, outer_code, index_code)\n \n #define INDEX_REG_CLASS NO_REGS\n \n-#define REGNO_OK_FOR_BASE_P(r) (((r) < FIRST_PSEUDO_REGISTER\t\t\\\n-\t\t\t\t && ((r) == REG_X\t\t\t\\\n-\t\t\t\t     || (r) == REG_Y\t\t\t\\\n-\t\t\t\t     || (r) == REG_Z\t\t\t\\\n-\t\t\t\t     || (r) == ARG_POINTER_REGNUM))\t\\\n-\t\t\t\t|| (reg_renumber\t\t\t\\\n-\t\t\t\t    && (reg_renumber[r] == REG_X\t\\\n-\t\t\t\t\t|| reg_renumber[r] == REG_Y\t\\\n-\t\t\t\t\t|| reg_renumber[r] == REG_Z\t\\\n-\t\t\t\t\t|| (reg_renumber[r]\t\t\\\n-\t\t\t\t\t    == ARG_POINTER_REGNUM))))\n+#define REGNO_MODE_CODE_OK_FOR_BASE_P(num, mode, outer_code, index_code) \\\n+  avr_regno_mode_code_ok_for_base_p (num, mode, outer_code, index_code)\n \n #define REGNO_OK_FOR_INDEX_P(NUM) 0\n \n@@ -381,10 +373,6 @@ typedef struct avr_args {\n \n #define MAX_REGS_PER_ADDRESS 1\n \n-#define REG_OK_FOR_BASE_NOSTRICT_P(X) \\\n-  (REGNO (X) >= FIRST_PSEUDO_REGISTER || REG_OK_FOR_BASE_STRICT_P(X))\n-\n-#define REG_OK_FOR_BASE_STRICT_P(X) REGNO_OK_FOR_BASE_P (REGNO (X))\n #define LEGITIMIZE_RELOAD_ADDRESS(X,MODE,OPNUM,TYPE,IND_L,WIN)          \\\n   do {                                                                  \\\n     rtx new_x = avr_legitimize_reload_address (X, MODE, OPNUM, TYPE,    \\"}]}