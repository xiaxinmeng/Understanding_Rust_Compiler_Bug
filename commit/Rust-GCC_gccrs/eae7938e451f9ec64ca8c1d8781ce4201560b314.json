{"sha": "eae7938e451f9ec64ca8c1d8781ce4201560b314", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFlNzkzOGU0NTFmOWVjNjRjYThjMWQ4NzgxY2U0MjAxNTYwYjMxNA==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "maxim@codesourcery.com", "date": "2010-07-27T19:39:15Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2010-07-27T19:39:15Z"}, "message": "gcse.c (insert_insn_end_basic_block): Update signature, remove unused checks.\n\n\t* gcse.c (insert_insn_end_basic_block): Update signature, remove\n\tunused checks.\n\t(pre_edge_insert, hoist_code): Update.\n\nFrom-SVN: r162593", "tree": {"sha": "548109df4af001b838cd32f618d2aeb1d071bf1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/548109df4af001b838cd32f618d2aeb1d071bf1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eae7938e451f9ec64ca8c1d8781ce4201560b314", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eae7938e451f9ec64ca8c1d8781ce4201560b314", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eae7938e451f9ec64ca8c1d8781ce4201560b314", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eae7938e451f9ec64ca8c1d8781ce4201560b314/comments", "author": null, "committer": null, "parents": [{"sha": "c7c910cee2ebe8faf33297eba3600add9ab233d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7c910cee2ebe8faf33297eba3600add9ab233d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7c910cee2ebe8faf33297eba3600add9ab233d1"}], "stats": {"total": 36, "additions": 12, "deletions": 24}, "files": [{"sha": "cb9e3b8f9151b8a519c5ac5f7452b6b6361d7261", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae7938e451f9ec64ca8c1d8781ce4201560b314/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae7938e451f9ec64ca8c1d8781ce4201560b314/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eae7938e451f9ec64ca8c1d8781ce4201560b314", "patch": "@@ -1,3 +1,9 @@\n+2010-07-27  Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\n+\t* gcse.c (insert_insn_end_basic_block): Update signature, remove\n+\tunused checks.\n+\t(pre_edge_insert, hoist_code): Update.\n+\n 2010-07-27  Maxim Kuvyrkov  <maxim@codesourcery.com>\n \n \tPR target/42495"}, {"sha": "fc1013b78f79e2cf2ef7f946860e29cc6db50cb5", "filename": "gcc/gcse.c", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae7938e451f9ec64ca8c1d8781ce4201560b314/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae7938e451f9ec64ca8c1d8781ce4201560b314/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=eae7938e451f9ec64ca8c1d8781ce4201560b314", "patch": "@@ -500,7 +500,7 @@ static void free_pre_mem (void);\n static void compute_pre_data (void);\n static int pre_expr_reaches_here_p (basic_block, struct expr *,\n \t\t\t\t    basic_block);\n-static void insert_insn_end_basic_block (struct expr *, basic_block, int);\n+static void insert_insn_end_basic_block (struct expr *, basic_block);\n static void pre_insert_copy_insn (struct expr *, rtx);\n static void pre_insert_copies (void);\n static int pre_delete (void);\n@@ -3535,14 +3535,10 @@ process_insert_insn (struct expr *expr)\n \n /* Add EXPR to the end of basic block BB.\n \n-   This is used by both the PRE and code hoisting.\n-\n-   For PRE, we want to verify that the expr is either transparent\n-   or locally anticipatable in the target block.  This check makes\n-   no sense for code hoisting.  */\n+   This is used by both the PRE and code hoisting.  */\n \n static void\n-insert_insn_end_basic_block (struct expr *expr, basic_block bb, int pre)\n+insert_insn_end_basic_block (struct expr *expr, basic_block bb)\n {\n   rtx insn = BB_END (bb);\n   rtx new_insn;\n@@ -3569,12 +3565,6 @@ insert_insn_end_basic_block (struct expr *expr, basic_block bb, int pre)\n #ifdef HAVE_cc0\n       rtx note;\n #endif\n-      /* It should always be the case that we can put these instructions\n-\t anywhere in the basic block with performing PRE optimizations.\n-\t Check this.  */\n-      gcc_assert (!NONJUMP_INSN_P (insn) || !pre\n-\t\t  || TEST_BIT (antloc[bb->index], expr->bitmap_index)\n-\t\t  || TEST_BIT (transp[bb->index], expr->bitmap_index));\n \n       /* If this is a jump table, then we can't insert stuff here.  Since\n \t we know the previous real insn must be the tablejump, we insert\n@@ -3611,15 +3601,7 @@ insert_insn_end_basic_block (struct expr *expr, basic_block bb, int pre)\n       /* Keeping in mind targets with small register classes and parameters\n          in registers, we search backward and place the instructions before\n \t the first parameter is loaded.  Do this for everyone for consistency\n-\t and a presumption that we'll get better code elsewhere as well.\n-\n-\t It should always be the case that we can put these instructions\n-\t anywhere in the basic block with performing PRE optimizations.\n-\t Check this.  */\n-\n-      gcc_assert (!pre\n-\t\t  || TEST_BIT (antloc[bb->index], expr->bitmap_index)\n-\t\t  || TEST_BIT (transp[bb->index], expr->bitmap_index));\n+\t and a presumption that we'll get better code elsewhere as well.  */\n \n       /* Since different machines initialize their parameter registers\n \t in different orders, assume nothing.  Collect the set of all\n@@ -3716,7 +3698,7 @@ pre_edge_insert (struct edge_list *edge_list, struct expr **index_map)\n \t\t\t   now.  */\n \n \t\t\tif (eg->flags & EDGE_ABNORMAL)\n-\t\t\t  insert_insn_end_basic_block (index_map[j], bb, 0);\n+\t\t\t  insert_insn_end_basic_block (index_map[j], bb);\n \t\t\telse\n \t\t\t  {\n \t\t\t    insn = process_insert_insn (index_map[j]);\n@@ -4595,7 +4577,7 @@ hoist_code (void)\n \n \t\t      if (!insn_inserted_p)\n \t\t\t{\n-\t\t\t  insert_insn_end_basic_block (index_map[i], bb, 0);\n+\t\t\t  insert_insn_end_basic_block (index_map[i], bb);\n \t\t\t  insn_inserted_p = 1;\n \t\t\t}\n \t\t    }"}]}