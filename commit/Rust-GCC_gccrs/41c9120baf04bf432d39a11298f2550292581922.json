{"sha": "41c9120baf04bf432d39a11298f2550292581922", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFjOTEyMGJhZjA0YmY0MzJkMzlhMTEyOThmMjU1MDI5MjU4MTkyMg==", "commit": {"author": {"name": "Paul Eggert", "email": "eggert@twinsun.com", "date": "1997-11-14T00:07:27Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1997-11-14T00:07:27Z"}, "message": "patch from paul eggert to fix -0.0/0.0 confusion that breaks glibc\n\t* real.h (REAL_VALUES_IDENTICAL): New macro.\n\t* expr.c (is_zeros_p): Don't consider -0.0 to be all zeros.\n\t* fold-const.c (operand_equal_p): Don't consider -0.0 to be\n\tidentical to 0.0.\n\t* tree.c (simple_cst_equal): Don't consider -0.0 to have the\n\tsame tree structure as 0.0.\n\t* varasm.c (immed_real_const_1): Use new REAL_VALUES_IDENTICAL\n\tmacro instead of doing it by hand.\n\nFrom-SVN: r16472", "tree": {"sha": "1ed9b899bbe18e155415baaf3f9f4beafd425fb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ed9b899bbe18e155415baaf3f9f4beafd425fb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41c9120baf04bf432d39a11298f2550292581922", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41c9120baf04bf432d39a11298f2550292581922", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41c9120baf04bf432d39a11298f2550292581922", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41c9120baf04bf432d39a11298f2550292581922/comments", "author": null, "committer": null, "parents": [{"sha": "323d8e7b661297d87002730d2e3f55bca134baaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/323d8e7b661297d87002730d2e3f55bca134baaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/323d8e7b661297d87002730d2e3f55bca134baaf"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "12cac79d33c2c651f259e56f2c31aab711a2fbaa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41c9120baf04bf432d39a11298f2550292581922/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41c9120baf04bf432d39a11298f2550292581922/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41c9120baf04bf432d39a11298f2550292581922", "patch": "@@ -1,3 +1,18 @@\n+1997-11-13  Paul Eggert  <eggert@twinsun.com>\n+\n+\tFix some confusion with IEEE minus zero.\n+\n+\t* real.h (REAL_VALUES_IDENTICAL): New macro.\n+\n+\t* expr.c (is_zeros_p): Don't consider -0.0 to be all zeros.\n+\t* fold-const.c (operand_equal_p): Don't consider -0.0 to be\n+\tidentical to 0.0.\n+\t* tree.c (simple_cst_equal): Don't consider -0.0 to have the\n+\tsame tree structure as 0.0.\n+\n+\t* varasm.c (immed_real_const_1): Use new REAL_VALUES_IDENTICAL\n+\tmacro instead of doing it by hand.\n+\n Thu Nov 13 16:56:14 1997  Jeffrey A Law  (law@cygnus.com)\n \n \t* v850/lib1funcs.asm: Minor whitespace changes."}, {"sha": "a18b09e9aba7c71093b74e542d715648a743ab61", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41c9120baf04bf432d39a11298f2550292581922/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41c9120baf04bf432d39a11298f2550292581922/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=41c9120baf04bf432d39a11298f2550292581922", "patch": "@@ -3476,7 +3476,7 @@ is_zeros_p (exp)\n \tis_zeros_p (TREE_REALPART (exp)) && is_zeros_p (TREE_IMAGPART (exp));\n \n     case REAL_CST:\n-      return REAL_VALUES_EQUAL (TREE_REAL_CST (exp), dconst0);\n+      return REAL_VALUES_IDENTICAL (TREE_REAL_CST (exp), dconst0);\n \n     case CONSTRUCTOR:\n       if (TREE_TYPE (exp) && TREE_CODE (TREE_TYPE (exp)) == SET_TYPE)"}, {"sha": "4b4c5e184b4c55e96ba3beb08585d16657ab9f75", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41c9120baf04bf432d39a11298f2550292581922/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41c9120baf04bf432d39a11298f2550292581922/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=41c9120baf04bf432d39a11298f2550292581922", "patch": "@@ -1796,8 +1796,8 @@ operand_equal_p (arg0, arg1, only_const)\n       case REAL_CST:\n \treturn (! TREE_CONSTANT_OVERFLOW (arg0)\n \t\t&& ! TREE_CONSTANT_OVERFLOW (arg1)\n-\t\t&& REAL_VALUES_EQUAL (TREE_REAL_CST (arg0),\n-\t\t\t\t      TREE_REAL_CST (arg1)));\n+\t\t&& REAL_VALUES_IDENTICAL (TREE_REAL_CST (arg0),\n+\t\t\t\t\t  TREE_REAL_CST (arg1)));\n \n       case COMPLEX_CST:\n \treturn (operand_equal_p (TREE_REALPART (arg0), TREE_REALPART (arg1),"}, {"sha": "a91061ef54d610e1f1a13a33cd1662cd5d9df3ad", "filename": "gcc/real.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41c9120baf04bf432d39a11298f2550292581922/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41c9120baf04bf432d39a11298f2550292581922/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=41c9120baf04bf432d39a11298f2550292581922", "patch": "@@ -294,6 +294,13 @@ do { REAL_VALUE_TYPE in = (IN);  /* Make sure it's not in a register.  */\\\n #define REAL_VALUE_TO_TARGET_LONG_DOUBLE(a, b) REAL_VALUE_TO_TARGET_DOUBLE (a, b)\n #endif\n \n+/* Compare two floating-point objects for bitwise identity.\n+   This is not the same as comparing for equality on IEEE hosts:\n+   -0.0 equals 0.0 but they are not identical, and conversely\n+   two NaNs might be identical but they cannot be equal.  */\n+#define REAL_VALUES_IDENTICAL(x, y) \\\n+  (!bcmp ((char *) &(x), (char *) &(y), sizeof (REAL_VALUE_TYPE)))\n+\n /* Compare two floating-point values for equality.  */\n #ifndef REAL_VALUES_EQUAL\n #define REAL_VALUES_EQUAL(x, y) ((x) == (y))"}, {"sha": "ecd6961daf6ec4ba6c135bb3f4aa7a15ace766ee", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41c9120baf04bf432d39a11298f2550292581922/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41c9120baf04bf432d39a11298f2550292581922/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=41c9120baf04bf432d39a11298f2550292581922", "patch": "@@ -3840,7 +3840,7 @@ simple_cst_equal (t1, t2)\n \t&& TREE_INT_CST_HIGH (t1) == TREE_INT_CST_HIGH (t2);\n \n     case REAL_CST:\n-      return REAL_VALUES_EQUAL (TREE_REAL_CST (t1), TREE_REAL_CST (t2));\n+      return REAL_VALUES_IDENTICAL (TREE_REAL_CST (t1), TREE_REAL_CST (t2));\n \n     case STRING_CST:\n       return TREE_STRING_LENGTH (t1) == TREE_STRING_LENGTH (t2)"}, {"sha": "ab88bebb46f4259f650132de537abb4dbc5c4c95", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41c9120baf04bf432d39a11298f2550292581922/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41c9120baf04bf432d39a11298f2550292581922/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=41c9120baf04bf432d39a11298f2550292581922", "patch": "@@ -2245,8 +2245,7 @@ immed_real_const_1 (d, mode)\n \n   /* Detect special cases.  */\n \n-  /* Avoid REAL_VALUES_EQUAL here in order to distinguish minus zero.  */\n-  if (!bcmp ((char *) &dconst0, (char *) &d, sizeof d))\n+  if (REAL_VALUES_IDENTICAL (dconst0, d))\n     return CONST0_RTX (mode);\n   /* Check for NaN first, because some ports (specifically the i386) do not\n      emit correct ieee-fp code by default, and thus will generate a core"}]}