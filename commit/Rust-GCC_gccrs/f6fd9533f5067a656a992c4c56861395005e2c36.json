{"sha": "f6fd9533f5067a656a992c4c56861395005e2c36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZmZDk1MzNmNTA2N2E2NTZhOTkyYzRjNTY4NjEzOTUwMDVlMmMzNg==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2020-06-30T22:58:56Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-16T07:31:34Z"}, "message": "[Ada] Legal actual type with inherited discriminants rejected in instantiation\n\ngcc/ada/\n\n\t* sem_eval.adb (Subtypes_Statically_Match): Retrieve\n\tdiscriminant constraints from the two types via new function\n\tOriginal_Discriminant_Constraint rather than\n\tDiscriminant_Constraint.\n\t(Original_Discriminant_Constraint): New function to locate the\n\tnearest explicit discriminant constraint associated with a type\n\tthat may possibly have inherited a constraint from an ancestor\n\ttype.", "tree": {"sha": "1ac2c684a70733e0c49d3eeefccc56c2d30a65e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ac2c684a70733e0c49d3eeefccc56c2d30a65e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6fd9533f5067a656a992c4c56861395005e2c36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6fd9533f5067a656a992c4c56861395005e2c36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6fd9533f5067a656a992c4c56861395005e2c36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6fd9533f5067a656a992c4c56861395005e2c36/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e1ccdbb5141e4dd2d4b0c4fdbba80dd5fa9cae4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e1ccdbb5141e4dd2d4b0c4fdbba80dd5fa9cae4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e1ccdbb5141e4dd2d4b0c4fdbba80dd5fa9cae4"}], "stats": {"total": 61, "additions": 59, "deletions": 2}, "files": [{"sha": "f61f905a3bc03fa14f65d76b109f8756e8678282", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 59, "deletions": 2, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6fd9533f5067a656a992c4c56861395005e2c36/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6fd9533f5067a656a992c4c56861395005e2c36/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=f6fd9533f5067a656a992c4c56861395005e2c36", "patch": "@@ -6554,8 +6554,65 @@ package body Sem_Eval is\n          end if;\n \n          declare\n-            DL1 : constant Elist_Id := Discriminant_Constraint (T1);\n-            DL2 : constant Elist_Id := Discriminant_Constraint (T2);\n+\n+            function Original_Discriminant_Constraint\n+              (Typ : Entity_Id) return Elist_Id;\n+            --  Returns Typ's discriminant constraint, or if the constraint\n+            --  is inherited from an ancestor type, then climbs the parent\n+            --  types to locate and return the constraint farthest up the\n+            --  parent chain that Typ's constraint is ultimately inherited\n+            --  from (stopping before a parent that doesn't impose a constraint\n+            --  or a parent that has new discriminants). This ensures a proper\n+            --  result from the equality comparison of Elist_Ids below (as\n+            --  otherwise, derived types that inherit constraints may appear\n+            --  to be unequal, because each level of derivation can have its\n+            --  own copy of the constraint).\n+\n+            function Original_Discriminant_Constraint\n+              (Typ : Entity_Id) return Elist_Id\n+            is\n+            begin\n+               if not Has_Discriminants (Typ) then\n+                  return No_Elist;\n+\n+               --  If Typ is not a derived type, then directly return the\n+               --  its constraint.\n+\n+               elsif not Is_Derived_Type (Typ) then\n+                  return Discriminant_Constraint (Typ);\n+\n+               --  If the parent type doesn't have discriminants, doesn't\n+               --  have a constraint, or has new discriminants, then stop\n+               --  and return Typ's constraint.\n+\n+               elsif not Has_Discriminants (Etype (Typ))\n+\n+                 --  No constraint on the parent type\n+\n+                 or else not Present (Discriminant_Constraint (Etype (Typ)))\n+                 or else Is_Empty_Elmt_List\n+                           (Discriminant_Constraint (Etype (Typ)))\n+\n+                 --  The parent type defines new discriminants\n+\n+                 or else\n+                   (Is_Base_Type (Etype (Typ))\n+                     and then Present (Discriminant_Specifications\n+                                         (Parent (Etype (Typ)))))\n+               then\n+                  return Discriminant_Constraint (Typ);\n+\n+               --  Otherwise, make a recursive call on the parent type\n+\n+               else\n+                  return Original_Discriminant_Constraint (Etype (Typ));\n+               end if;\n+            end Original_Discriminant_Constraint;\n+\n+            --  Local variables\n+\n+            DL1 : constant Elist_Id := Original_Discriminant_Constraint (T1);\n+            DL2 : constant Elist_Id := Original_Discriminant_Constraint (T2);\n \n             DA1 : Elmt_Id;\n             DA2 : Elmt_Id;"}]}