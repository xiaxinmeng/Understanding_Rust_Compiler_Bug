{"sha": "99e9b54313dbb8fdb3d2a354c9554478cc33e234", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTllOWI1NDMxM2RiYjhmZGIzZDJhMzU0Yzk1NTQ0NzhjYzMzZTIzNA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-10-07T12:02:34Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-10-07T12:06:52Z"}, "message": "c++: Rename DECL_BUILTIN_P to DECL_UNDECLARED_BUILTIN_P\n\nI realized I'd misnamed DECL_BUILTIN_P, it's only true of compiler\nbuiltins unless and until the user declares them -- at that point\nthey're real decls, and will have a location in the user's source.\n(BUILT_IN_FN and friends still work though).  This renames them so\nfuture-me is not confused as to why the predicate becomes false.\n\n\tgcc/cp/\n\t* cp-tree.h (DECL_BUILTIN_P): Rename to ...\n\t(DECL_UNDECLARED_BUILTIN_P): ... here.\n\t* decl.c (duplicate_decls): Adjust.\n\t* name-lookup.c (anticipated_builtin_p): Adjust.\n\t(do_nonmember_using_decl): Likewise.\n\tlibcc1/\n\t* libcp1plugin.cc (supplement_binding): Rename\n\tDECL_BUILTIN_P.", "tree": {"sha": "951f89b82e5393a8fbdf3bd7e47ff961738e2811", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/951f89b82e5393a8fbdf3bd7e47ff961738e2811"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99e9b54313dbb8fdb3d2a354c9554478cc33e234", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99e9b54313dbb8fdb3d2a354c9554478cc33e234", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99e9b54313dbb8fdb3d2a354c9554478cc33e234", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99e9b54313dbb8fdb3d2a354c9554478cc33e234/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba42c30445cef0aef15405d92361a536e12ae865", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba42c30445cef0aef15405d92361a536e12ae865", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba42c30445cef0aef15405d92361a536e12ae865"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "e5a2ff20223c1e6b6fcc92978b5e8bc606556620", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e9b54313dbb8fdb3d2a354c9554478cc33e234/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e9b54313dbb8fdb3d2a354c9554478cc33e234/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=99e9b54313dbb8fdb3d2a354c9554478cc33e234", "patch": "@@ -4035,8 +4035,9 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define FNDECL_USED_AUTO(NODE) \\\n   TREE_LANG_FLAG_2 (FUNCTION_DECL_CHECK (NODE))\n \n-/* True if NODE is a builtin decl.  */\n-#define DECL_BUILTIN_P(NODE) \\\n+/* True if NODE is an undeclared builtin decl.  As soon as the user\n+   declares it, the location will be updated.  */\n+#define DECL_UNDECLARED_BUILTIN_P(NODE) \\\n   (DECL_SOURCE_LOCATION(NODE) == BUILTINS_LOCATION)\n \n /* True for artificial decls added for OpenMP privatized non-static"}, {"sha": "4ec1f4a973238741a39d44ed32e8f7472e0c53cd", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e9b54313dbb8fdb3d2a354c9554478cc33e234/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e9b54313dbb8fdb3d2a354c9554478cc33e234/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=99e9b54313dbb8fdb3d2a354c9554478cc33e234", "patch": "@@ -1467,7 +1467,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool hiding, bool was_hidden)\n \n   /* Check for redeclaration and other discrepancies.  */\n   if (TREE_CODE (olddecl) == FUNCTION_DECL\n-      && DECL_BUILTIN_P (olddecl))\n+      && DECL_UNDECLARED_BUILTIN_P (olddecl))\n     {\n       if (TREE_CODE (newdecl) != FUNCTION_DECL)\n \t{"}, {"sha": "ea0bfdca3d7181fdf6f4c57374a45e2e5432960a", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e9b54313dbb8fdb3d2a354c9554478cc33e234/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e9b54313dbb8fdb3d2a354c9554478cc33e234/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=99e9b54313dbb8fdb3d2a354c9554478cc33e234", "patch": "@@ -2129,7 +2129,7 @@ anticipated_builtin_p (tree ovl)\n {\n   return (TREE_CODE (ovl) == OVERLOAD\n \t  && OVL_HIDDEN_P (ovl)\n-\t  && DECL_BUILTIN_P (OVL_FUNCTION (ovl)));\n+\t  && DECL_UNDECLARED_BUILTIN_P (OVL_FUNCTION (ovl)));\n }\n \n /* BINDING records an existing declaration for a name in the current scope.\n@@ -3982,7 +3982,7 @@ do_nonmember_using_decl (name_lookup &lookup, bool fn_scope_p,\n \t\t}\n \t      else if (old.using_p ())\n \t\tcontinue; /* This is a using decl. */\n-\t      else if (old.hidden_p () && DECL_BUILTIN_P (old_fn))\n+\t      else if (old.hidden_p () && DECL_UNDECLARED_BUILTIN_P (old_fn))\n \t\tcontinue; /* This is an anticipated builtin.  */\n \t      else if (!matching_fn_p (new_fn, old_fn))\n \t\tcontinue; /* Parameters do not match.  */"}, {"sha": "e7ab325d7df71446dc8f99cbeb4398358e1d01d0", "filename": "libcc1/libcp1plugin.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e9b54313dbb8fdb3d2a354c9554478cc33e234/libcc1%2Flibcp1plugin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e9b54313dbb8fdb3d2a354c9554478cc33e234/libcc1%2Flibcp1plugin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcp1plugin.cc?ref=99e9b54313dbb8fdb3d2a354c9554478cc33e234", "patch": "@@ -353,7 +353,7 @@ supplement_binding (cxx_binding *binding, tree decl)\n \t   /* If TARGET_BVAL is anticipated but has not yet been\n \t      declared, pretend it is not there at all.  */\n \t   || (TREE_CODE (target_bval) == FUNCTION_DECL\n-\t       && DECL_BUILTIN_P (target_bval)))\n+\t       && DECL_UNDECLARED_BUILTIN_P (target_bval)))\n     binding->value = decl;\n   else if (TREE_CODE (target_bval) == TYPE_DECL\n \t   && DECL_ARTIFICIAL (target_bval)"}]}