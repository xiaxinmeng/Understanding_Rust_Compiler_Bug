{"sha": "0614bbbe59c6953e088cffa39dfe63d86fc1fa96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYxNGJiYmU1OWM2OTUzZTA4OGNmZmEzOWRmZTYzZDg2ZmMxZmE5Ng==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-03T16:30:29Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-03T16:30:29Z"}, "message": "libstdc++: Avoid hard error in ranges::unique_copy [PR100770]\n\nHere, in the constexpr if condition within ranges::unique_copy, when\ninput_iterator<_Out> isn't satisfied we must avoid substituting into\niter_value_t<_Out> because the latter isn't necessarily well-formed\nthen.  To that end, this patch factors out the condition into a concept\nand uses it throughout.\n\nThis patch also makes the definition of our testsuite\noutput_iterator_wrapper more minimal by setting its value_type, pointer\nand reference member types to void.  This means our existing tests for\nunique_copy already exercise the fix for this bug, so we don't need\nto add another test.  The only other fallout of this testsuite iterator\nchange appears in std/ranges/range.cc, where the use of range_value_t\non a test_output_range is now ill-formed.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/ranges_algo.h (__detail::__can_reread_output):\n\tFactor out this concept from ...\n\t(__unique_copy_fn::operator()): ... here.  Use the concept\n\tthroughout.\n\t* testsuite/std/ranges/range.cc: Remove now ill-formed use\n\tof range_value_t on an output_range.\n\t* testsuite/util/testsuite_iterators.h (output_iterator_wrapper):\n\tDefine value_type, pointer and reference member types to void.", "tree": {"sha": "3b848e0660f4e2765f2b095d74ce85160426b1e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b848e0660f4e2765f2b095d74ce85160426b1e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0614bbbe59c6953e088cffa39dfe63d86fc1fa96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0614bbbe59c6953e088cffa39dfe63d86fc1fa96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0614bbbe59c6953e088cffa39dfe63d86fc1fa96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0614bbbe59c6953e088cffa39dfe63d86fc1fa96/comments", "author": null, "committer": null, "parents": [{"sha": "cd4dd47265f2bff89fbbfb6a12a98a7101fb5280", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd4dd47265f2bff89fbbfb6a12a98a7101fb5280", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd4dd47265f2bff89fbbfb6a12a98a7101fb5280"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "ecf1378742d819ce3fd2ad8852726bb105f53a16", "filename": "libstdc++-v3/include/bits/ranges_algo.h", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0614bbbe59c6953e088cffa39dfe63d86fc1fa96/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0614bbbe59c6953e088cffa39dfe63d86fc1fa96/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h?ref=0614bbbe59c6953e088cffa39dfe63d86fc1fa96", "patch": "@@ -1396,6 +1396,13 @@ namespace ranges\n \n   inline constexpr __unique_fn unique{};\n \n+  namespace __detail\n+  {\n+    template<typename _Out, typename _Tp>\n+      concept __can_reread_output = input_iterator<_Out>\n+\t&& same_as<_Tp, iter_value_t<_Out>>;\n+  }\n+\n   template<typename _Iter, typename _Out>\n     using unique_copy_result = in_out_result<_Iter, _Out>;\n \n@@ -1407,8 +1414,7 @@ namespace ranges\n \t       projected<_Iter, _Proj>> _Comp = ranges::equal_to>\n       requires indirectly_copyable<_Iter, _Out>\n \t&& (forward_iterator<_Iter>\n-\t    || (input_iterator<_Out>\n-\t\t&& same_as<iter_value_t<_Iter>, iter_value_t<_Out>>)\n+\t    || __detail::__can_reread_output<_Out, iter_value_t<_Iter>>\n \t    || indirectly_copyable_storable<_Iter, _Out>)\n       constexpr unique_copy_result<_Iter, _Out>\n       operator()(_Iter __first, _Sent __last, _Out __result,\n@@ -1432,8 +1438,7 @@ namespace ranges\n \t\t}\n \t    return {__next, std::move(++__result)};\n \t  }\n-\telse if constexpr (input_iterator<_Out>\n-\t\t\t   && same_as<iter_value_t<_Iter>, iter_value_t<_Out>>)\n+\telse if constexpr (__detail::__can_reread_output<_Out, iter_value_t<_Iter>>)\n \t  {\n \t    *__result = *__first;\n \t    while (++__first != __last)\n@@ -1467,8 +1472,7 @@ namespace ranges\n \t       projected<iterator_t<_Range>, _Proj>> _Comp = ranges::equal_to>\n       requires indirectly_copyable<iterator_t<_Range>, _Out>\n \t&& (forward_iterator<iterator_t<_Range>>\n-\t    || (input_iterator<_Out>\n-\t\t&& same_as<range_value_t<_Range>, iter_value_t<_Out>>)\n+\t    || __detail::__can_reread_output<_Out, range_value_t<_Range>>\n \t    || indirectly_copyable_storable<iterator_t<_Range>, _Out>)\n       constexpr unique_copy_result<borrowed_iterator_t<_Range>, _Out>\n       operator()(_Range&& __r, _Out __result,"}, {"sha": "aa29af471a46960655421a44c40dc4c5006ed9f6", "filename": "libstdc++-v3/testsuite/std/ranges/range.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0614bbbe59c6953e088cffa39dfe63d86fc1fa96/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Frange.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0614bbbe59c6953e088cffa39dfe63d86fc1fa96/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Frange.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Frange.cc?ref=0614bbbe59c6953e088cffa39dfe63d86fc1fa96", "patch": "@@ -75,9 +75,6 @@ static_assert( same_as<std::ranges::range_difference_t<C>,\n static_assert( same_as<std::ranges::range_difference_t<O>,\n \t\t       std::ptrdiff_t> );\n \n-static_assert( same_as<std::ranges::range_value_t<O>,\n-\t\t       char> );\n-\n static_assert( same_as<std::ranges::range_reference_t<I>,\n \t\t       char&> );\n static_assert( same_as<std::ranges::range_reference_t<O>,"}, {"sha": "4e668d648f210486eab37970185d078d20544397", "filename": "libstdc++-v3/testsuite/util/testsuite_iterators.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0614bbbe59c6953e088cffa39dfe63d86fc1fa96/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0614bbbe59c6953e088cffa39dfe63d86fc1fa96/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h?ref=0614bbbe59c6953e088cffa39dfe63d86fc1fa96", "patch": "@@ -122,7 +122,7 @@ namespace __gnu_test\n    */\n   template<class T>\n   struct output_iterator_wrapper\n-  : public std::iterator<std::output_iterator_tag, T, std::ptrdiff_t, T*, T&>\n+  : public std::iterator<std::output_iterator_tag, void, std::ptrdiff_t, void, void>\n   {\n   protected:\n     output_iterator_wrapper() : ptr(0), SharedInfo(0)"}]}