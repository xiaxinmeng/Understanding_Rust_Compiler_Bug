{"sha": "9310366b70c4953aff526ec62d0405dc729d5edf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTMxMDM2NmI3MGM0OTUzYWZmNTI2ZWM2MmQwNDA1ZGM3MjlkNWVkZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2014-11-11T13:12:39Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-11-11T13:12:39Z"}, "message": "system.h: Include algorithm and utility.\n\n\t* system.h: Include algorithm and utility.\n\t* rtl.h: Do not include utility here.\n\t* wide-int.h: Ditto.\n\t* tree-vect-data-refs.c (swap): Remove template.\n\t(vect_prune_runtime_alias_test_list): Use std::swap instead of swap.\n\nFrom-SVN: r217348", "tree": {"sha": "d5e79eb5d58db620ac7bc854f753b8808505bdd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5e79eb5d58db620ac7bc854f753b8808505bdd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9310366b70c4953aff526ec62d0405dc729d5edf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9310366b70c4953aff526ec62d0405dc729d5edf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9310366b70c4953aff526ec62d0405dc729d5edf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9310366b70c4953aff526ec62d0405dc729d5edf/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "568ccfea0f9f6c4a188429faa42c89087503f5a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/568ccfea0f9f6c4a188429faa42c89087503f5a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/568ccfea0f9f6c4a188429faa42c89087503f5a9"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "2f6582dc90ee07b550997c7a9b165626337ccfd2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9310366b70c4953aff526ec62d0405dc729d5edf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9310366b70c4953aff526ec62d0405dc729d5edf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9310366b70c4953aff526ec62d0405dc729d5edf", "patch": "@@ -1,3 +1,11 @@\n+2014-11-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* system.h: Include algorithm and utility.\n+\t* rtl.h: Do not include utility here.\n+\t* wide-int.h: Ditto.\n+\t* tree-vect-data-refs.c (swap): Remove template.\n+\t(vect_prune_runtime_alias_test_list): Use std::swap instead of swap.\n+\n 2014-11-11  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR bootstrap/63699"}, {"sha": "fa38abb102edbad3828ca2fe8d861d648aa4bdc3", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9310366b70c4953aff526ec62d0405dc729d5edf/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9310366b70c4953aff526ec62d0405dc729d5edf/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=9310366b70c4953aff526ec62d0405dc729d5edf", "patch": "@@ -20,7 +20,6 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_RTL_H\n #define GCC_RTL_H\n \n-#include <utility>\n #include \"statistics.h\"\n #include \"machmode.h\"\n #include \"input.h\""}, {"sha": "58f50f195211e1fa6ab0a5a6dc7f4ccab59c9af5", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9310366b70c4953aff526ec62d0405dc729d5edf/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9310366b70c4953aff526ec62d0405dc729d5edf/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=9310366b70c4953aff526ec62d0405dc729d5edf", "patch": "@@ -215,7 +215,9 @@ extern int errno;\n #endif\n \n #ifdef __cplusplus\n+# include <algorithm>\n # include <cstring>\n+# include <utility>\n #endif\n \n /* Some of glibc's string inlines cause warnings.  Plus we'd rather"}, {"sha": "c49b47c7cc4f7caf7bf0976aaf5b581b7d84faca", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9310366b70c4953aff526ec62d0405dc729d5edf/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9310366b70c4953aff526ec62d0405dc729d5edf/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=9310366b70c4953aff526ec62d0405dc729d5edf", "patch": "@@ -2718,14 +2718,6 @@ comp_dr_with_seg_len_pair (const void *p1_, const void *p2_)\n   return 0;\n }\n \n-template <class T> static void\n-swap (T& a, T& b)\n-{\n-  T c (a);\n-  a = b;\n-  b = c;\n-}\n-\n /* Function vect_vfa_segment_size.\n \n    Create an expression that computes the size of segment\n@@ -2858,7 +2850,7 @@ vect_prune_runtime_alias_test_list (loop_vec_info loop_vinfo)\n \t   dr_with_seg_len (dr_b, segment_length_b));\n \n       if (compare_tree (DR_BASE_ADDRESS (dr_a), DR_BASE_ADDRESS (dr_b)) > 0)\n-\tswap (dr_with_seg_len_pair.first, dr_with_seg_len_pair.second);\n+\tstd::swap (dr_with_seg_len_pair.first, dr_with_seg_len_pair.second);\n \n       comp_alias_ddrs.safe_push (dr_with_seg_len_pair);\n     }\n@@ -2908,8 +2900,8 @@ vect_prune_runtime_alias_test_list (loop_vec_info loop_vinfo)\n \t     and DR_A1 and DR_A2 are two consecutive memrefs.  */\n \t  if (*dr_a1 == *dr_a2)\n \t    {\n-\t      swap (dr_a1, dr_b1);\n-\t      swap (dr_a2, dr_b2);\n+\t      std::swap (dr_a1, dr_b1);\n+\t      std::swap (dr_a2, dr_b2);\n \t    }\n \n \t  if (!operand_equal_p (DR_BASE_ADDRESS (dr_a1->dr),"}, {"sha": "f5735d8090491ee9f21c86b4d7ac4bba2d790421", "filename": "gcc/wide-int.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9310366b70c4953aff526ec62d0405dc729d5edf/gcc%2Fwide-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9310366b70c4953aff526ec62d0405dc729d5edf/gcc%2Fwide-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int.h?ref=9310366b70c4953aff526ec62d0405dc729d5edf", "patch": "@@ -216,8 +216,6 @@ along with GCC; see the file COPYING3.  If not see\n    the same result as X + X; the precision of the shift amount Y\n    can be arbitrarily different from X.  */\n \n-\n-#include <utility>\n #include \"system.h\"\n #include \"hwint.h\"\n #include \"signop.h\""}]}