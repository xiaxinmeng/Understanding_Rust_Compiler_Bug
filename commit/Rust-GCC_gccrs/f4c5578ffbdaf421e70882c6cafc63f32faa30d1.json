{"sha": "f4c5578ffbdaf421e70882c6cafc63f32faa30d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRjNTU3OGZmYmRhZjQyMWU3MDg4MmM2Y2FmYzYzZjMyZmFhMzBkMQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-05-31T11:13:57Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-05-31T11:13:57Z"}, "message": "PR c++/32158 (libstdc++ bits)\n\n2007-05-31  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR c++/32158 (libstdc++ bits)\n\t* include/bits/stl_uninitialized.h (__uninitialized_copy_aux,\n\t__uninitialized_fill_aux, __uninitialized_fill_n_aux):\n\tRemove.\n\t(struct __uninitialized_copy, struct __uninitialized_fill,\n\tstruct __uninitialized_fill_n): Add.\n\t(uninitialized_copy, uninitialized_fill, uninitialized_fill_n):\n\tAdjust.\n\t* testsuite/20_util/specialized_algorithms/32158.cc: New.\n\n\t* include/bits/stl_uninitialized.h (uninitialized_copy(_InputIterator,\n\t_InputIterator, _ForwardIterator)): Robustify vs non-POD input.\n\n\t* include/bits/stl_vector.h (_M_fill_initialize): New.\n\t(vector(size_type, const value_type&, const allocator_type&),\n\t_M_initialize_dispatch(_Integer, _Integer, __true_type)): Use it.\n\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n\tAdjust dg-error line.\n\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\nFrom-SVN: r125223", "tree": {"sha": "94d2132a022b2a210e815336da045b2165e41d13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94d2132a022b2a210e815336da045b2165e41d13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4c5578ffbdaf421e70882c6cafc63f32faa30d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4c5578ffbdaf421e70882c6cafc63f32faa30d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4c5578ffbdaf421e70882c6cafc63f32faa30d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4c5578ffbdaf421e70882c6cafc63f32faa30d1/comments", "author": null, "committer": null, "parents": [{"sha": "b1ae209ca96f6fb9a32c56212c899d5bab399647", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1ae209ca96f6fb9a32c56212c899d5bab399647", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1ae209ca96f6fb9a32c56212c899d5bab399647"}], "stats": {"total": 253, "additions": 178, "deletions": 75}, "files": [{"sha": "4259ef3e30b0f4e53de4023a6f45a41525fab373", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c5578ffbdaf421e70882c6cafc63f32faa30d1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c5578ffbdaf421e70882c6cafc63f32faa30d1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f4c5578ffbdaf421e70882c6cafc63f32faa30d1", "patch": "@@ -1,3 +1,30 @@\n+2007-05-31  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR c++/32158 (libstdc++ bits)\n+\t* include/bits/stl_uninitialized.h (__uninitialized_copy_aux,\n+\t__uninitialized_fill_aux, __uninitialized_fill_n_aux):\n+\tRemove.\n+\t(struct __uninitialized_copy, struct __uninitialized_fill,\n+\tstruct __uninitialized_fill_n): Add.\n+\t(uninitialized_copy, uninitialized_fill, uninitialized_fill_n):\n+\tAdjust.\n+\t* testsuite/20_util/specialized_algorithms/32158.cc: New.\n+\n+\t* include/bits/stl_uninitialized.h (uninitialized_copy(_InputIterator,\n+\t_InputIterator, _ForwardIterator)): Robustify vs non-POD input.\n+\n+\t* include/bits/stl_vector.h (_M_fill_initialize): New.\n+\t(vector(size_type, const value_type&, const allocator_type&),\n+\t_M_initialize_dispatch(_Integer, _Integer, __true_type)): Use it.\n+\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n+\tAdjust dg-error line.\n+\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\n 2007-05-29  Paolo Carlini  <pcarlini@suse.de>\n \n \t* aclocal.m4: Regenerate."}, {"sha": "c564c21e3fd04987b9aa33bc277e1e0e976d5cd3", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 101, "deletions": 61, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c5578ffbdaf421e70882c6cafc63f32faa30d1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c5578ffbdaf421e70882c6cafc63f32faa30d1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=f4c5578ffbdaf421e70882c6cafc63f32faa30d1", "patch": "@@ -64,25 +64,38 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n-  template<typename _InputIterator, typename _ForwardIterator>\n-    _ForwardIterator\n-    __uninitialized_copy_aux(_InputIterator __first,\n-\t\t\t     _InputIterator __last,\n-\t\t\t     _ForwardIterator __result)\n+  template<bool>\n+    struct __uninitialized_copy\n     {\n-      _ForwardIterator __cur = __result;\n-      try\n-\t{\n-\t  for (; __first != __last; ++__first, ++__cur)\n-\t    std::_Construct(&*__cur, *__first);\n-\t  return __cur;\n-\t}\n-      catch(...)\n-\t{\n-\t  std::_Destroy(__result, __cur);\n-\t  __throw_exception_again;\n+      template<typename _InputIterator, typename _ForwardIterator>\n+        static _ForwardIterator\n+        uninitialized_copy(_InputIterator __first, _InputIterator __last,\n+\t\t\t   _ForwardIterator __result)\n+        {\n+\t  _ForwardIterator __cur = __result;\n+\t  try\n+\t    {\n+\t      for (; __first != __last; ++__first, ++__cur)\n+\t\tstd::_Construct(&*__cur, *__first);\n+\t      return __cur;\n+\t    }\n+\t  catch(...)\n+\t    {\n+\t      std::_Destroy(__result, __cur);\n+\t      __throw_exception_again;\n+\t    }\n \t}\n-    }\n+    };\n+\n+  template<>\n+    struct __uninitialized_copy<true>\n+    {\n+      template<typename _InputIterator, typename _ForwardIterator>\n+        static _ForwardIterator\n+        uninitialized_copy(_InputIterator __first, _InputIterator __last,\n+\t\t\t   _ForwardIterator __result)\n+        { return std::copy(__first, __last, __result); }\n+    };\n \n   /**\n    *  @brief Copies the range [first,last) into result.\n@@ -98,33 +111,48 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     uninitialized_copy(_InputIterator __first, _InputIterator __last,\n \t\t       _ForwardIterator __result)\n     {\n+      typedef typename iterator_traits<_InputIterator>::value_type\n+\t_ValueType1;\n       typedef typename iterator_traits<_ForwardIterator>::value_type\n-\t_ValueType;\n-      if (__is_pod(_ValueType))\n-\treturn std::copy(__first, __last, __result);\n-      else\n-\treturn std::__uninitialized_copy_aux(__first, __last, __result);\n+\t_ValueType2;\n+\n+      return std::__uninitialized_copy<(__is_pod(_ValueType1)\n+\t\t\t\t\t&& __is_pod(_ValueType2))>::\n+\tuninitialized_copy(__first, __last, __result);\n     }\n \n \n-  template<typename _ForwardIterator, typename _Tp>\n-    void\n-    __uninitialized_fill_aux(_ForwardIterator __first,\n-\t\t\t     _ForwardIterator __last,\n-\t\t\t     const _Tp& __x)\n+  template<bool>\n+    struct __uninitialized_fill\n     {\n-      _ForwardIterator __cur = __first;\n-      try\n-\t{\n-\t  for (; __cur != __last; ++__cur)\n-\t    std::_Construct(&*__cur, __x);\n+      template<typename _ForwardIterator, typename _Tp>\n+        static void\n+        uninitialized_fill(_ForwardIterator __first,\n+\t\t\t   _ForwardIterator __last, const _Tp& __x)\n+        {\n+\t  _ForwardIterator __cur = __first;\n+\t  try\n+\t    {\n+\t      for (; __cur != __last; ++__cur)\n+\t\tstd::_Construct(&*__cur, __x);\n+\t    }\n+\t  catch(...)\n+\t    {\n+\t      std::_Destroy(__first, __cur);\n+\t      __throw_exception_again;\n+\t    }\n \t}\n-      catch(...)\n-\t{\n-\t  std::_Destroy(__first, __cur);\n-\t  __throw_exception_again;\n-\t}\n-    }\n+    };\n+\n+  template<>\n+    struct __uninitialized_fill<true>\n+    {\n+      template<typename _ForwardIterator, typename _Tp>\n+        static void\n+        uninitialized_fill(_ForwardIterator __first,\n+\t\t\t   _ForwardIterator __last, const _Tp& __x)\n+        { std::fill(__first, __last, __x); }\n+    };\n \n   /**\n    *  @brief Copies the value x into the range [first,last).\n@@ -142,30 +170,43 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       typedef typename iterator_traits<_ForwardIterator>::value_type\n \t_ValueType;\n-      if (__is_pod(_ValueType))\n-\tstd::fill(__first, __last, __x);\n-      else\n-\tstd::__uninitialized_fill_aux(__first, __last, __x);\n+\n+      std::__uninitialized_fill<__is_pod(_ValueType)>::\n+\tuninitialized_fill(__first, __last, __x);\n     }\n \n \n-  template<typename _ForwardIterator, typename _Size, typename _Tp>\n-    void\n-    __uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n,\n-\t\t\t       const _Tp& __x)\n+  template<bool>\n+    struct __uninitialized_fill_n\n     {\n-      _ForwardIterator __cur = __first;\n-      try\n-\t{\n-\t  for (; __n > 0; --__n, ++__cur)\n-\t    std::_Construct(&*__cur, __x);\n-\t}\n-      catch(...)\n-\t{\n-\t  std::_Destroy(__first, __cur);\n-\t  __throw_exception_again;\n+      template<typename _ForwardIterator, typename _Size, typename _Tp>\n+        static void\n+        uninitialized_fill_n(_ForwardIterator __first, _Size __n,\n+\t\t\t     const _Tp& __x)\n+        {\n+\t  _ForwardIterator __cur = __first;\n+\t  try\n+\t    {\n+\t      for (; __n > 0; --__n, ++__cur)\n+\t\tstd::_Construct(&*__cur, __x);\n+\t    }\n+\t  catch(...)\n+\t    {\n+\t      std::_Destroy(__first, __cur);\n+\t      __throw_exception_again;\n+\t    }\n \t}\n-    }\n+    };\n+\n+  template<>\n+    struct __uninitialized_fill_n<true>\n+    {\n+      template<typename _ForwardIterator, typename _Size, typename _Tp>\n+        static void\n+        uninitialized_fill_n(_ForwardIterator __first, _Size __n,\n+\t\t\t     const _Tp& __x)\n+        { std::fill_n(__first, __n, __x); }\n+    };\n \n   /**\n    *  @brief Copies the value x into the range [first,first+n).\n@@ -182,10 +223,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       typedef typename iterator_traits<_ForwardIterator>::value_type\n \t_ValueType;\n-      if (__is_pod(_ValueType))\n-\tstd::fill_n(__first, __n, __x);\n-      else\n-\tstd::__uninitialized_fill_n_aux(__first, __n, __x);\n+\n+      std::__uninitialized_fill_n<__is_pod(_ValueType)>::\n+\tuninitialized_fill_n(__first, __n, __x);\n     }\n \n   // Extensions: versions of uninitialized_copy, uninitialized_fill,"}, {"sha": "f885f022a7d576bfc817e7406e28abaad5bbb10f", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c5578ffbdaf421e70882c6cafc63f32faa30d1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c5578ffbdaf421e70882c6cafc63f32faa30d1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=f4c5578ffbdaf421e70882c6cafc63f32faa30d1", "patch": "@@ -210,11 +210,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n       vector(size_type __n, const value_type& __value = value_type(),\n \t     const allocator_type& __a = allocator_type())\n       : _Base(__n, __a)\n-      {\n-\tstd::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,\n-\t\t\t\t      _M_get_Tp_allocator());\n-\tthis->_M_impl._M_finish = this->_M_impl._M_start + __n;\n-      }\n+      { _M_fill_initialize(__n, __value); }\n \n       /**\n        *  @brief  %Vector copy constructor.\n@@ -788,11 +784,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n \t  this->_M_impl._M_start = _M_allocate(static_cast<size_type>(__n));\n \t  this->_M_impl._M_end_of_storage =\n \t    this->_M_impl._M_start + static_cast<size_type>(__n);\n-\t  std::__uninitialized_fill_n_a(this->_M_impl._M_start,\n-\t\t\t\t\tstatic_cast<size_type>(__n),\n-\t\t\t\t\t__value,\n-\t\t\t\t\t_M_get_Tp_allocator());\n-\t  this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;\n+\t  _M_fill_initialize(static_cast<size_type>(__n), __value);\n \t}\n \n       // Called by the range constructor to implement [23.1.1]/9\n@@ -831,6 +823,15 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n \t\t\t\t\t_M_get_Tp_allocator());\n \t}\n \n+      // Called by the first initialize_dispatch above and by the\n+      // vector(n,value,a) constructor.\n+      _M_fill_initialize(size_type __n, const value_type& __value)\n+      {\n+\tstd::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value, \n+\t\t\t\t      _M_get_Tp_allocator());\n+\tthis->_M_impl._M_finish = this->_M_impl._M_end_of_storage;\n+      }\n+\n \n       // Internal assign functions follow.  The *_aux functions do the actual\n       // assignment work for the range versions."}, {"sha": "1f9867e01b2874ca7f7f5a05000208366e5f87b4", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/32158.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c5578ffbdaf421e70882c6cafc63f32faa30d1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2F32158.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c5578ffbdaf421e70882c6cafc63f32faa30d1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2F32158.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2F32158.cc?ref=f4c5578ffbdaf421e70882c6cafc63f32faa30d1", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 20.4.4 specialized algorithms\n+\n+// { dg-do compile }\n+\n+#include <memory>\n+#include <utility>\n+\n+// c++/32158\n+\n+typedef std::pair<const int, int> MyPair;\n+\n+void\n+Alpha(MyPair* start, MyPair* end)\n+{\n+  MyPair my_pair(1, 2);\n+  std::uninitialized_fill(start, end, my_pair);\n+};"}, {"sha": "f076afef0848b1c59c91b6e5e061e1f4baa0dc59", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c5578ffbdaf421e70882c6cafc63f32faa30d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c5578ffbdaf421e70882c6cafc63f32faa30d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=f4c5578ffbdaf421e70882c6cafc63f32faa30d1", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 845 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 846 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "12aa0aea6952a840e22294ae3a4ca09bf1650d24", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c5578ffbdaf421e70882c6cafc63f32faa30d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c5578ffbdaf421e70882c6cafc63f32faa30d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=f4c5578ffbdaf421e70882c6cafc63f32faa30d1", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no match\" \"\" { target *-*-* } 622 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 787 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "1dd8d305e2e48ce1537a420bd40838921f45663c", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c5578ffbdaf421e70882c6cafc63f32faa30d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c5578ffbdaf421e70882c6cafc63f32faa30d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=f4c5578ffbdaf421e70882c6cafc63f32faa30d1", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no match\" \"\" { target *-*-* } 622 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 787 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "be39739f0059284b75d23c3452ab7d401f31418c", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c5578ffbdaf421e70882c6cafc63f32faa30d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c5578ffbdaf421e70882c6cafc63f32faa30d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=f4c5578ffbdaf421e70882c6cafc63f32faa30d1", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 886 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 887 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}]}