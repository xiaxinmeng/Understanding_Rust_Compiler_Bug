{"sha": "afffc96a5259ba4e3f3cca154dc5ea32a496875e", "node_id": "C_kwDOANBUbNoAKGFmZmZjOTZhNTI1OWJhNGUzZjNjY2ExNTRkYzVlYTMyYTQ5Njg3NWU", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-09-24T12:56:33Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-09-28T19:22:51Z"}, "message": "libstdc++: Fix concept checks for iterators\n\nThis adds some additional checks the the C++98-style concept checks for\niterators, and removes some bogus checks for mutable iterators. Instead\nof requiring that the result of dereferencing a mutable iterator is\nassignable (which is a property of the value type, not required for the\niterator) check that the reference type is a non-const reference to the\nvalue type.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/boost_concept_check.h (_ForwardIteratorConcept)\n\t(_BidirectionalIteratorConcept, _RandomAccessIteratorConcept):\n\tCheck result types of iterator operations.\n\t(_Mutable_ForwardIteratorConcept): Check that iterator's\n\treference type is a reference to its value type.\n\t(_Mutable_BidirectionalIteratorConcept): Do not require the\n\tvalue type to be assignable.\n\t(_Mutable_RandomAccessIteratorConcept): Likewise.\n\t* testsuite/24_iterators/operations/prev_neg.cc: Adjust dg-error\n\tline number.", "tree": {"sha": "cbced4b89016672b840a05dbc918aab7d1eb7575", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbced4b89016672b840a05dbc918aab7d1eb7575"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afffc96a5259ba4e3f3cca154dc5ea32a496875e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afffc96a5259ba4e3f3cca154dc5ea32a496875e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afffc96a5259ba4e3f3cca154dc5ea32a496875e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afffc96a5259ba4e3f3cca154dc5ea32a496875e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f1db7627f6eea2050c3d71f17bca5ecf586a813", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f1db7627f6eea2050c3d71f17bca5ecf586a813", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f1db7627f6eea2050c3d71f17bca5ecf586a813"}], "stats": {"total": 83, "additions": 72, "deletions": 11}, "files": [{"sha": "71c99c13e93ddde57f0d0c4f2dde5309fb894e49", "filename": "libstdc++-v3/include/bits/boost_concept_check.h", "status": "modified", "additions": 71, "deletions": 10, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afffc96a5259ba4e3f3cca154dc5ea32a496875e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afffc96a5259ba4e3f3cca154dc5ea32a496875e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h?ref=afffc96a5259ba4e3f3cca154dc5ea32a496875e", "patch": "@@ -44,6 +44,14 @@\n #include <bits/c++config.h>\n #include <bits/stl_iterator_base_types.h>    // for traits and tags\n \n+namespace std  _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+  struct _Bit_iterator;\n+  struct _Bit_const_iterator;\n+_GLIBCXX_END_NAMESPACE_VERSION\n+}\n+\n namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -470,6 +478,52 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n     _ValueT __val() const;\n   };\n \n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wunused-variable\"\n+\n+  template <class _Tp>\n+  struct _ForwardIteratorReferenceConcept\n+  {\n+    void __constraints() {\n+#if __cplusplus >= 201103L\n+      typedef typename std::iterator_traits<_Tp>::reference _Ref;\n+      static_assert(std::is_reference<_Ref>::value,\n+\t  \"reference type of a forward iterator must be a real reference\");\n+#endif\n+    }\n+  };\n+\n+  template <class _Tp>\n+  struct _Mutable_ForwardIteratorReferenceConcept\n+  {\n+    void __constraints() {\n+      typedef typename std::iterator_traits<_Tp>::reference _Ref;\n+      typedef typename std::iterator_traits<_Tp>::value_type _Val;\n+      __function_requires< _SameTypeConcept<_Ref, _Val&> >();\n+    }\n+  };\n+\n+  // vector<bool>::iterator is not a real forward reference, but pretend it is.\n+  template <>\n+  struct _ForwardIteratorReferenceConcept<std::_Bit_iterator>\n+  {\n+    void __constraints() { }\n+  };\n+\n+  // vector<bool>::iterator is not a real forward reference, but pretend it is.\n+  template <>\n+  struct _Mutable_ForwardIteratorReferenceConcept<std::_Bit_iterator>\n+  {\n+    void __constraints() { }\n+  };\n+\n+  // And vector<bool>::const iterator too.\n+  template <>\n+  struct _ForwardIteratorReferenceConcept<std::_Bit_const_iterator>\n+  {\n+    void __constraints() { }\n+  };\n+\n   template <class _Tp>\n   struct _ForwardIteratorConcept\n   {\n@@ -479,8 +533,12 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n       __function_requires< _ConvertibleConcept<\n         typename std::iterator_traits<_Tp>::iterator_category,\n         std::forward_iterator_tag> >();\n+      __function_requires< _ForwardIteratorReferenceConcept<_Tp> >();\n+      _Tp& __j = ++__i;\n+      const _Tp& __k = __i++;\n       typedef typename std::iterator_traits<_Tp>::reference _Ref;\n-      _Ref __r _IsUnused = *__i;\n+      _Ref __r = *__k;\n+      _Ref __r2 = *__i++;\n     }\n     _Tp __i;\n   };\n@@ -490,7 +548,9 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n   {\n     void __constraints() {\n       __function_requires< _ForwardIteratorConcept<_Tp> >();\n-      *__i++ = *__i;                    // require postincrement and assignment\n+      typedef typename std::iterator_traits<_Tp>::reference _Ref;\n+      typedef typename std::iterator_traits<_Tp>::value_type _Val;\n+      __function_requires< _Mutable_ForwardIteratorReferenceConcept<_Tp> >();\n     }\n     _Tp __i;\n   };\n@@ -503,8 +563,10 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n       __function_requires< _ConvertibleConcept<\n         typename std::iterator_traits<_Tp>::iterator_category,\n         std::bidirectional_iterator_tag> >();\n-      --__i;                            // require predecrement operator\n-      __i--;                            // require postdecrement operator\n+      _Tp& __j = --__i;                 // require predecrement operator\n+      const _Tp& __k = __i--;           // require postdecrement operator\n+      typedef typename std::iterator_traits<_Tp>::reference _Ref;\n+      _Ref __r = *__j--;\n     }\n     _Tp __i;\n   };\n@@ -515,7 +577,6 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n     void __constraints() {\n       __function_requires< _BidirectionalIteratorConcept<_Tp> >();\n       __function_requires< _Mutable_ForwardIteratorConcept<_Tp> >();\n-      *__i-- = *__i;                    // require postdecrement and assignment\n     }\n     _Tp __i;\n   };\n@@ -530,16 +591,15 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n       __function_requires< _ConvertibleConcept<\n         typename std::iterator_traits<_Tp>::iterator_category,\n         std::random_access_iterator_tag> >();\n-      // ??? We don't use _Ref, are we just checking for \"referenceability\"?\n       typedef typename std::iterator_traits<_Tp>::reference _Ref;\n \n-      __i += __n;                       // require assignment addition operator\n+      _Tp& __j = __i += __n;            // require assignment addition operator\n       __i = __i + __n; __i = __n + __i; // require addition with difference type\n-      __i -= __n;                       // require assignment subtraction op\n+      _Tp& __k = __i -= __n;            // require assignment subtraction op\n       __i = __i - __n;                  // require subtraction with\n                                         //            difference type\n       __n = __i - __j;                  // require difference operator\n-      (void)__i[__n];                   // require element access operator\n+      _Ref __r = __i[__n];              // require element access operator\n     }\n     _Tp __a, __b;\n     _Tp __i, __j;\n@@ -552,12 +612,13 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n     void __constraints() {\n       __function_requires< _RandomAccessIteratorConcept<_Tp> >();\n       __function_requires< _Mutable_BidirectionalIteratorConcept<_Tp> >();\n-      __i[__n] = *__i;                  // require element access and assignment\n     }\n     _Tp __i;\n     typename std::iterator_traits<_Tp>::difference_type __n;\n   };\n \n+#pragma GCC diagnostic pop\n+\n   //===========================================================================\n   // Container Concepts\n "}, {"sha": "d22491999a85124fd30fde12a6260605b01e2263", "filename": "libstdc++-v3/testsuite/24_iterators/operations/prev_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afffc96a5259ba4e3f3cca154dc5ea32a496875e/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Foperations%2Fprev_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afffc96a5259ba4e3f3cca154dc5ea32a496875e/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Foperations%2Fprev_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Foperations%2Fprev_neg.cc?ref=afffc96a5259ba4e3f3cca154dc5ea32a496875e", "patch": "@@ -38,5 +38,5 @@ test02()\n {\n   const Y array[1] = { };\n   (void) std::prev(array + 1);\n-  // { dg-error \"forward_iterator\" \"\" { target *-*-* } 223 }\n+  // { dg-error \"forward_iterator\" \"\" { target *-*-* } 231 }\n }"}]}