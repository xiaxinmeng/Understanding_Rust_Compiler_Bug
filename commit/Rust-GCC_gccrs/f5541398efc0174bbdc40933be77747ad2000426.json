{"sha": "f5541398efc0174bbdc40933be77747ad2000426", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU1NDEzOThlZmMwMTc0YmJkYzQwOTMzYmU3Nzc0N2FkMjAwMDQyNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2011-07-19T17:43:15Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-07-19T17:43:15Z"}, "message": "rtl.texi (MEM_SIZE_KNOWN_P): Document.\n\ngcc/\n\t* doc/rtl.texi (MEM_SIZE_KNOWN_P): Document.\n\t(MEM_SIZE): Change from returning an rtx to returning a HOST_WIDE_INT.\n\t* rtl.h (MEM_SIZE_KNOWN_P): New macro.\n\t(MEM_SIZE): Return a HOST_WIDE_INT rather than an rtx.\n\t* emit-rtl.h (set_mem_size): Take a HOST_WIDE_INT rather than an rtx.\n\t(clear_mem_size): Declare.\n\t* emit-rtl.c (set_mem_size): Take a HOST_WIDE_INT rather than an rtx.\n\t(clear_mem_size): New function.\n\t* alias.c (ao_ref_from_mem): Adjust uses of MEM_SIZE, using\n\tMEM_SIZE_KNOWN_P to test whether the size is known, and MEM_SIZE\n\tto get a HOST_WIDE_INT size.  Adjust calls to set_mem_size,\n\tpassing a HOST_WIDE_INT rather than an rtx.  Use clear_mem_size\n\tto clear the size.\n\t(nonoverlapping_memrefs_p): Likewise.\n\t* builtins.c (get_memory_rtx, expand_builtin_memcmp): Likewise.\n\t(expand_builtin_init_trampoline): Likewise.\n\t* calls.c (compute_argument_addresses): Likewise.\n\t* cfgcleanup.c (merge_memattrs): Likewise.\n\t* dce.c (find_call_stack_args): Likewise.\n\t* dse.c (record_store, scan_insn): Likewise.\n\t* dwarf2out.c (dw_sra_loc_expr): Likewise.\n\t* expr.c (emit_block_move_hints): Likewise.\n\t* function.c (assign_parm_find_stack_rtl): Likewise.\n\t* print-rtl.c (print_rtx): Likewise.\n\t* reload.c (find_reloads_subreg_address): Likewise.\n\t* rtlanal.c (may_trap_p_1): Likewise.\n\t* var-tracking.c (track_expr_p): Likewise.\n\t* varasm.c (assemble_trampoline_template): Likewise.\n\t* config/arm/arm.c (arm_print_operand): Likewise.\n\t* config/h8300/h8300.c (h8sx_emit_movmd): Likewise.\n\t* config/i386/i386.c (expand_movmem_via_rep_mov): Likewise.\n\t(expand_setmem_via_rep_stos, expand_constant_movmem_prologue)\n\t(expand_constant_setmem_prologue): Likewise.\n\t* config/mips/mips.c (mips_get_unaligned_mem): Likewise.\n\t* config/rs6000/rs6000.c (expand_block_move): Likewise.\n\t(adjacent_mem_locations): Likewise.\n\t* config/s390/s390.c (s390_expand_setmem): Likewise.\n\t(s390_expand_insv): Likewise.\n\t* config/s390/s390.md (*extzv<mode>, *extv<mode>): Likewise.\n\t(*extendqi<mode>2_short_displ): Likewise.\n\t* config/sh/sh.c (expand_block_move): Likewise.\n\t* config/sh/sh.md (extv, extzv): Likewise.\n\nFrom-SVN: r176476", "tree": {"sha": "199413c100fd80dfb372de82470fdf80f5b55ccd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/199413c100fd80dfb372de82470fdf80f5b55ccd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5541398efc0174bbdc40933be77747ad2000426", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5541398efc0174bbdc40933be77747ad2000426", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5541398efc0174bbdc40933be77747ad2000426", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5541398efc0174bbdc40933be77747ad2000426/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f12144ddd56e9be0faae4d144a1fb5af7969edfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f12144ddd56e9be0faae4d144a1fb5af7969edfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f12144ddd56e9be0faae4d144a1fb5af7969edfd"}], "stats": {"total": 278, "additions": 171, "deletions": 107}, "files": [{"sha": "71049d0cbb781f74b404e663a8af1d54156a5c05", "filename": "gcc/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5541398efc0174bbdc40933be77747ad2000426/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5541398efc0174bbdc40933be77747ad2000426/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5541398efc0174bbdc40933be77747ad2000426", "patch": "@@ -1,3 +1,48 @@\n+2011-07-19  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* doc/rtl.texi (MEM_SIZE_KNOWN_P): Document.\n+\t(MEM_SIZE): Change from returning an rtx to returning a HOST_WIDE_INT.\n+\t* rtl.h (MEM_SIZE_KNOWN_P): New macro.\n+\t(MEM_SIZE): Return a HOST_WIDE_INT rather than an rtx.\n+\t* emit-rtl.h (set_mem_size): Take a HOST_WIDE_INT rather than an rtx.\n+\t(clear_mem_size): Declare.\n+\t* emit-rtl.c (set_mem_size): Take a HOST_WIDE_INT rather than an rtx.\n+\t(clear_mem_size): New function.\n+\t* alias.c (ao_ref_from_mem): Adjust uses of MEM_SIZE, using\n+\tMEM_SIZE_KNOWN_P to test whether the size is known, and MEM_SIZE\n+\tto get a HOST_WIDE_INT size.  Adjust calls to set_mem_size,\n+\tpassing a HOST_WIDE_INT rather than an rtx.  Use clear_mem_size\n+\tto clear the size.\n+\t(nonoverlapping_memrefs_p): Likewise.\n+\t* builtins.c (get_memory_rtx, expand_builtin_memcmp): Likewise.\n+\t(expand_builtin_init_trampoline): Likewise.\n+\t* calls.c (compute_argument_addresses): Likewise.\n+\t* cfgcleanup.c (merge_memattrs): Likewise.\n+\t* dce.c (find_call_stack_args): Likewise.\n+\t* dse.c (record_store, scan_insn): Likewise.\n+\t* dwarf2out.c (dw_sra_loc_expr): Likewise.\n+\t* expr.c (emit_block_move_hints): Likewise.\n+\t* function.c (assign_parm_find_stack_rtl): Likewise.\n+\t* print-rtl.c (print_rtx): Likewise.\n+\t* reload.c (find_reloads_subreg_address): Likewise.\n+\t* rtlanal.c (may_trap_p_1): Likewise.\n+\t* var-tracking.c (track_expr_p): Likewise.\n+\t* varasm.c (assemble_trampoline_template): Likewise.\n+\t* config/arm/arm.c (arm_print_operand): Likewise.\n+\t* config/h8300/h8300.c (h8sx_emit_movmd): Likewise.\n+\t* config/i386/i386.c (expand_movmem_via_rep_mov): Likewise.\n+\t(expand_setmem_via_rep_stos, expand_constant_movmem_prologue)\n+\t(expand_constant_setmem_prologue): Likewise.\n+\t* config/mips/mips.c (mips_get_unaligned_mem): Likewise.\n+\t* config/rs6000/rs6000.c (expand_block_move): Likewise.\n+\t(adjacent_mem_locations): Likewise.\n+\t* config/s390/s390.c (s390_expand_setmem): Likewise.\n+\t(s390_expand_insv): Likewise.\n+\t* config/s390/s390.md (*extzv<mode>, *extv<mode>): Likewise.\n+\t(*extendqi<mode>2_short_displ): Likewise.\n+\t* config/sh/sh.c (expand_block_move): Likewise.\n+\t* config/sh/sh.md (extv, extzv): Likewise.\n+\n 2011-07-19  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* emit-rtl.c (mem_attrs_eq_p): New function, split out from..."}, {"sha": "1d74e34118740bec5044f0cd35e7659a9941d697", "filename": "gcc/alias.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=f5541398efc0174bbdc40933be77747ad2000426", "patch": "@@ -313,10 +313,10 @@ ao_ref_from_mem (ao_ref *ref, const_rtx mem)\n \n   ref->ref_alias_set = MEM_ALIAS_SET (mem);\n \n-  /* If MEM_OFFSET or MEM_SIZE are NULL we have to punt.\n+  /* If MEM_OFFSET or MEM_SIZE are unknown we have to punt.\n      Keep points-to related information though.  */\n   if (!MEM_OFFSET (mem)\n-      || !MEM_SIZE (mem))\n+      || !MEM_SIZE_KNOWN_P (mem))\n     {\n       ref->ref = NULL_TREE;\n       ref->offset = 0;\n@@ -329,12 +329,12 @@ ao_ref_from_mem (ao_ref *ref, const_rtx mem)\n      case of promoted subregs on bigendian targets.  Trust the MEM_EXPR\n      here.  */\n   if (INTVAL (MEM_OFFSET (mem)) < 0\n-      && ((INTVAL (MEM_SIZE (mem)) + INTVAL (MEM_OFFSET (mem)))\n+      && ((MEM_SIZE (mem) + INTVAL (MEM_OFFSET (mem)))\n \t  * BITS_PER_UNIT) == ref->size)\n     return true;\n \n   ref->offset += INTVAL (MEM_OFFSET (mem)) * BITS_PER_UNIT;\n-  ref->size = INTVAL (MEM_SIZE (mem)) * BITS_PER_UNIT;\n+  ref->size = MEM_SIZE (mem) * BITS_PER_UNIT;\n \n   /* The MEM may extend into adjacent fields, so adjust max_size if\n      necessary.  */\n@@ -2338,11 +2338,11 @@ nonoverlapping_memrefs_p (const_rtx x, const_rtx y, bool loop_invariant)\n     return 0;              \n \n   sizex = (!MEM_P (rtlx) ? (int) GET_MODE_SIZE (GET_MODE (rtlx))\n-\t   : MEM_SIZE (rtlx) ? INTVAL (MEM_SIZE (rtlx))\n+\t   : MEM_SIZE_KNOWN_P (rtlx) ? MEM_SIZE (rtlx)\n \t   : -1);\n   sizey = (!MEM_P (rtly) ? (int) GET_MODE_SIZE (GET_MODE (rtly))\n-\t   : MEM_SIZE (rtly) ? INTVAL (MEM_SIZE (rtly)) :\n-\t   -1);\n+\t   : MEM_SIZE_KNOWN_P (rtly) ? MEM_SIZE (rtly)\n+\t   : -1);\n \n   /* If we have an offset for either memref, it can update the values computed\n      above.  */\n@@ -2354,10 +2354,10 @@ nonoverlapping_memrefs_p (const_rtx x, const_rtx y, bool loop_invariant)\n   /* If a memref has both a size and an offset, we can use the smaller size.\n      We can't do this if the offset isn't known because we must view this\n      memref as being anywhere inside the DECL's MEM.  */\n-  if (MEM_SIZE (x) && moffsetx)\n-    sizex = INTVAL (MEM_SIZE (x));\n-  if (MEM_SIZE (y) && moffsety)\n-    sizey = INTVAL (MEM_SIZE (y));\n+  if (MEM_SIZE_KNOWN_P (x) && moffsetx)\n+    sizex = MEM_SIZE (x);\n+  if (MEM_SIZE_KNOWN_P (y) && moffsety)\n+    sizey = MEM_SIZE (y);\n \n   /* Put the values of the memref with the lower offset in X's values.  */\n   if (offsetx > offsety)"}, {"sha": "6818fe20d86a6c703c81938688be7f045f3baf29", "filename": "gcc/builtins.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=f5541398efc0174bbdc40933be77747ad2000426", "patch": "@@ -1299,7 +1299,7 @@ get_memory_rtx (tree exp, tree len)\n \t    }\n \t}\n       set_mem_alias_set (mem, 0);\n-      set_mem_size (mem, NULL_RTX);\n+      clear_mem_size (mem);\n     }\n \n   return mem;\n@@ -3691,8 +3691,8 @@ expand_builtin_memcmp (tree exp, ATTRIBUTE_UNUSED rtx target,\n     /* Set MEM_SIZE as appropriate.  */\n     if (CONST_INT_P (arg3_rtx))\n       {\n-\tset_mem_size (arg1_rtx, arg3_rtx);\n-\tset_mem_size (arg2_rtx, arg3_rtx);\n+\tset_mem_size (arg1_rtx, INTVAL (arg3_rtx));\n+\tset_mem_size (arg2_rtx, INTVAL (arg3_rtx));\n       }\n \n #ifdef HAVE_cmpmemsi\n@@ -4835,7 +4835,7 @@ expand_builtin_init_trampoline (tree exp)\n     {\n       m_tramp = change_address (m_tramp, BLKmode, tmp);\n       set_mem_align (m_tramp, TRAMPOLINE_ALIGNMENT);\n-      set_mem_size (m_tramp, GEN_INT (TRAMPOLINE_SIZE));\n+      set_mem_size (m_tramp, TRAMPOLINE_SIZE);\n     }\n \n   /* The FUNC argument should be the address of the nested function."}, {"sha": "87a1a70a28d4a3ab61a6e1b34b1d5035a4838991", "filename": "gcc/calls.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=f5541398efc0174bbdc40933be77747ad2000426", "patch": "@@ -1481,7 +1481,7 @@ compute_argument_addresses (struct arg_data *args, rtx argblock, int num_actuals\n \t      partial_mode = mode_for_size (units_on_stack * BITS_PER_UNIT,\n \t\t\t\t\t    MODE_INT, 1);\n \t      args[i].stack = gen_rtx_MEM (partial_mode, addr);\n-\t      set_mem_size (args[i].stack, GEN_INT (units_on_stack));\n+\t      set_mem_size (args[i].stack, units_on_stack);\n \t    }\n \t  else\n \t    {\n@@ -1513,7 +1513,7 @@ compute_argument_addresses (struct arg_data *args, rtx argblock, int num_actuals\n \t\t Generate a simple memory reference of the correct size.\n \t       */\n \t      args[i].stack_slot = gen_rtx_MEM (partial_mode, addr);\n-\t      set_mem_size (args[i].stack_slot, GEN_INT (units_on_stack));\n+\t      set_mem_size (args[i].stack_slot, units_on_stack);\n \t    }\n \t  else\n \t    {"}, {"sha": "f41379114e27b89368351d54c065b89478175ab9", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=f5541398efc0174bbdc40933be77747ad2000426", "patch": "@@ -883,7 +883,7 @@ merge_memattrs (rtx x, rtx y)\n \tMEM_ATTRS (x) = 0;\n       else\n \t{\n-\t  rtx mem_size;\n+\t  HOST_WIDE_INT mem_size;\n \n \t  if (MEM_ALIAS_SET (x) != MEM_ALIAS_SET (y))\n \t    {\n@@ -904,15 +904,17 @@ merge_memattrs (rtx x, rtx y)\n \t      set_mem_offset (y, 0);\n \t    }\n \n-\t  if (!MEM_SIZE (x))\n-\t    mem_size = NULL_RTX;\n-\t  else if (!MEM_SIZE (y))\n-\t    mem_size = NULL_RTX;\n+\t  if (MEM_SIZE_KNOWN_P (x) && MEM_SIZE_KNOWN_P (y))\n+\t    {\n+\t      mem_size = MAX (MEM_SIZE (x), MEM_SIZE (y));\n+\t      set_mem_size (x, mem_size);\n+\t      set_mem_size (y, mem_size);\n+\t    }\n \t  else\n-\t    mem_size = GEN_INT (MAX (INTVAL (MEM_SIZE (x)),\n-\t\t\t\t     INTVAL (MEM_SIZE (y))));\n-\t  set_mem_size (x, mem_size);\n-\t  set_mem_size (y, mem_size);\n+\t    {\n+\t      clear_mem_size (x);\n+\t      clear_mem_size (y);\n+\t    }\n \n \t  set_mem_align (x, MIN (MEM_ALIGN (x), MEM_ALIGN (y)));\n \t  set_mem_align (y, MEM_ALIGN (x));"}, {"sha": "3e7f0381353f99ea5afea44985f56570f2e33f07", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=f5541398efc0174bbdc40933be77747ad2000426", "patch": "@@ -16713,7 +16713,7 @@ arm_print_operand (FILE *stream, rtx x, int code)\n \t   instruction (for some alignments) as an aid to the memory subsystem\n \t   of the target.  */\n \talign = MEM_ALIGN (x) >> 3;\n-\tmemsize = INTVAL (MEM_SIZE (x));\n+\tmemsize = MEM_SIZE (x);\n \t\n \t/* Only certain alignment specifiers are supported by the hardware.  */\n \tif (memsize == 16 && (align % 32) == 0)"}, {"sha": "62e9e85895ead497721e9a43e3003e23575c67dd", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=f5541398efc0174bbdc40933be77747ad2000426", "patch": "@@ -2642,8 +2642,8 @@ h8sx_emit_movmd (rtx dest, rtx src, rtx length,\n       first_dest = replace_equiv_address (dest, dest_reg);\n       first_src = replace_equiv_address (src, src_reg);\n \n-      set_mem_size (first_dest, GEN_INT (n & -factor));\n-      set_mem_size (first_src, GEN_INT (n & -factor));\n+      set_mem_size (first_dest, n & -factor);\n+      set_mem_size (first_src, n & -factor);\n \n       length = copy_to_mode_reg (HImode, gen_int_mode (n / factor, HImode));\n       emit_insn (gen_movmd (first_dest, first_src, length, GEN_INT (factor)));"}, {"sha": "a87fb29d5e33fc4c983abc6697390c60fb6a3ef6", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f5541398efc0174bbdc40933be77747ad2000426", "patch": "@@ -19697,6 +19697,7 @@ expand_movmem_via_rep_mov (rtx destmem, rtx srcmem,\n   rtx destexp;\n   rtx srcexp;\n   rtx countreg;\n+  HOST_WIDE_INT rounded_count;\n \n   /* If the size is known, it is shorter to use rep movs.  */\n   if (mode == QImode && CONST_INT_P (count)\n@@ -19724,19 +19725,19 @@ expand_movmem_via_rep_mov (rtx destmem, rtx srcmem,\n     }\n   if (CONST_INT_P (count))\n     {\n-      count = GEN_INT (INTVAL (count)\n+      rounded_count = (INTVAL (count)\n \t\t       & ~((HOST_WIDE_INT) GET_MODE_SIZE (mode) - 1));\n       destmem = shallow_copy_rtx (destmem);\n       srcmem = shallow_copy_rtx (srcmem);\n-      set_mem_size (destmem, count);\n-      set_mem_size (srcmem, count);\n+      set_mem_size (destmem, rounded_count);\n+      set_mem_size (srcmem, rounded_count);\n     }\n   else\n     {\n-      if (MEM_SIZE (destmem))\n-\tset_mem_size (destmem, NULL_RTX);\n-      if (MEM_SIZE (srcmem))\n-\tset_mem_size (srcmem, NULL_RTX);\n+      if (MEM_SIZE_KNOWN_P (destmem))\n+\tclear_mem_size (destmem);\n+      if (MEM_SIZE_KNOWN_P (srcmem))\n+\tclear_mem_size (srcmem);\n     }\n   emit_insn (gen_rep_mov (destptr, destmem, srcptr, srcmem, countreg,\n \t\t\t  destexp, srcexp));\n@@ -19751,6 +19752,7 @@ expand_setmem_via_rep_stos (rtx destmem, rtx destptr, rtx value,\n {\n   rtx destexp;\n   rtx countreg;\n+  HOST_WIDE_INT rounded_count;\n \n   if (destptr != XEXP (destmem, 0) || GET_MODE (destmem) != BLKmode)\n     destmem = adjust_automodify_address_nv (destmem, BLKmode, destptr, 0);\n@@ -19766,13 +19768,13 @@ expand_setmem_via_rep_stos (rtx destmem, rtx destptr, rtx value,\n     destexp = gen_rtx_PLUS (Pmode, destptr, countreg);\n   if (orig_value == const0_rtx && CONST_INT_P (count))\n     {\n-      count = GEN_INT (INTVAL (count)\n+      rounded_count = (INTVAL (count)\n \t\t       & ~((HOST_WIDE_INT) GET_MODE_SIZE (mode) - 1));\n       destmem = shallow_copy_rtx (destmem);\n-      set_mem_size (destmem, count);\n+      set_mem_size (destmem, rounded_count);\n     }\n-  else if (MEM_SIZE (destmem))\n-    set_mem_size (destmem, NULL_RTX);\n+  else if (MEM_SIZE_KNOWN_P (destmem))\n+    clear_mem_size (destmem);\n   emit_insn (gen_rep_stos (destptr, countreg, destmem, value, destexp));\n }\n \n@@ -20113,13 +20115,12 @@ expand_constant_movmem_prologue (rtx dst, rtx *srcp, rtx destreg, rtx srcreg,\n \t\t\t\t int desired_align, int align_bytes)\n {\n   rtx src = *srcp;\n-  rtx src_size, dst_size;\n+  rtx orig_dst = dst;\n+  rtx orig_src = src;\n   int off = 0;\n   int src_align_bytes = get_mem_align_offset (src, desired_align * BITS_PER_UNIT);\n   if (src_align_bytes >= 0)\n     src_align_bytes = desired_align - src_align_bytes;\n-  src_size = MEM_SIZE (src);\n-  dst_size = MEM_SIZE (dst);\n   if (align_bytes & 1)\n     {\n       dst = adjust_automodify_address_nv (dst, QImode, destreg, 0);\n@@ -20177,10 +20178,10 @@ expand_constant_movmem_prologue (rtx dst, rtx *srcp, rtx destreg, rtx srcreg,\n       if (MEM_ALIGN (src) < src_align * BITS_PER_UNIT)\n \tset_mem_align (src, src_align * BITS_PER_UNIT);\n     }\n-  if (dst_size)\n-    set_mem_size (dst, GEN_INT (INTVAL (dst_size) - align_bytes));\n-  if (src_size)\n-    set_mem_size (dst, GEN_INT (INTVAL (src_size) - align_bytes));\n+  if (MEM_SIZE_KNOWN_P (orig_dst))\n+    set_mem_size (dst, MEM_SIZE (orig_dst) - align_bytes);\n+  if (MEM_SIZE_KNOWN_P (orig_src))\n+    set_mem_size (src, MEM_SIZE (orig_src) - align_bytes);\n   *srcp = src;\n   return dst;\n }\n@@ -20228,7 +20229,7 @@ expand_constant_setmem_prologue (rtx dst, rtx destreg, rtx value,\n \t\t\t\t int desired_align, int align_bytes)\n {\n   int off = 0;\n-  rtx dst_size = MEM_SIZE (dst);\n+  rtx orig_dst = dst;\n   if (align_bytes & 1)\n     {\n       dst = adjust_automodify_address_nv (dst, QImode, destreg, 0);\n@@ -20257,8 +20258,8 @@ expand_constant_setmem_prologue (rtx dst, rtx destreg, rtx value,\n   dst = adjust_automodify_address_nv (dst, BLKmode, destreg, off);\n   if (MEM_ALIGN (dst) < (unsigned int) desired_align * BITS_PER_UNIT)\n     set_mem_align (dst, desired_align * BITS_PER_UNIT);\n-  if (dst_size)\n-    set_mem_size (dst, GEN_INT (INTVAL (dst_size) - align_bytes));\n+  if (MEM_SIZE_KNOWN_P (orig_dst))\n+    set_mem_size (dst, MEM_SIZE (orig_dst) - align_bytes);\n   return dst;\n }\n "}, {"sha": "06a13f8d78258c63252b9608a9aa7219451454c0", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=f5541398efc0174bbdc40933be77747ad2000426", "patch": "@@ -6850,7 +6850,7 @@ mips_get_unaligned_mem (rtx *op, HOST_WIDE_INT width, HOST_WIDE_INT bitpos,\n   /* Adjust *OP to refer to the whole field.  This also has the effect\n      of legitimizing *OP's address for BLKmode, possibly simplifying it.  */\n   *op = adjust_address (*op, BLKmode, 0);\n-  set_mem_size (*op, GEN_INT (width / BITS_PER_UNIT));\n+  set_mem_size (*op, width / BITS_PER_UNIT);\n \n   /* Get references to both ends of the field.  We deliberately don't\n      use the original QImode *OP for FIRST since the new BLKmode one\n@@ -6950,13 +6950,9 @@ mips_expand_ins_as_unaligned_store (rtx dest, rtx src, HOST_WIDE_INT width,\n bool\n mips_mem_fits_mode_p (enum machine_mode mode, rtx x)\n {\n-  rtx size;\n-\n-  if (!MEM_P (x))\n-    return false;\n-\n-  size = MEM_SIZE (x);\n-  return size && INTVAL (size) == GET_MODE_SIZE (mode);\n+  return (MEM_P (x)\n+\t  && MEM_SIZE_KNOWN_P (x)\n+\t  && MEM_SIZE (x) == GET_MODE_SIZE (mode));\n }\n \n /* Return true if (zero_extract OP WIDTH BITPOS) can be used as the"}, {"sha": "20b3cb8fea6c9f6f3c9b390e071c208fc4ccf169", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=f5541398efc0174bbdc40933be77747ad2000426", "patch": "@@ -13679,14 +13679,14 @@ expand_block_move (rtx operands[])\n \t      rtx src_reg = copy_addr_to_reg (XEXP (src, 0));\n \t      src = replace_equiv_address (src, src_reg);\n \t    }\n-\t  set_mem_size (src, GEN_INT (move_bytes));\n+\t  set_mem_size (src, move_bytes);\n \n \t  if (!REG_P (XEXP (dest, 0)))\n \t    {\n \t      rtx dest_reg = copy_addr_to_reg (XEXP (dest, 0));\n \t      dest = replace_equiv_address (dest, dest_reg);\n \t    }\n-\t  set_mem_size (dest, GEN_INT (move_bytes));\n+\t  set_mem_size (dest, move_bytes);\n \n \t  emit_insn ((*gen_func.movmemsi) (dest, src,\n \t\t\t\t\t   GEN_INT (move_bytes & 31),\n@@ -23057,8 +23057,8 @@ adjacent_mem_locations (rtx insn1, rtx insn2)\n       val_diff = val1 - val0;\n \n       return ((REGNO (reg0) == REGNO (reg1))\n-\t      && ((MEM_SIZE (a) && val_diff == INTVAL (MEM_SIZE (a)))\n-\t\t  || (MEM_SIZE (b) && val_diff == -INTVAL (MEM_SIZE (b)))));\n+\t      && ((MEM_SIZE_KNOWN_P (a) && val_diff == MEM_SIZE (a))\n+\t\t  || (MEM_SIZE_KNOWN_P (b) && val_diff == -MEM_SIZE (b))));\n     }\n \n   return false;"}, {"sha": "5976b7fd328a7ede7edc871a79474fa2fcb4c6af", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=f5541398efc0174bbdc40933be77747ad2000426", "patch": "@@ -4099,7 +4099,7 @@ s390_expand_setmem (rtx dst, rtx len, rtx val)\n \t\t DST is set to size 1 so the rest of the memory location\n \t\t does not count as source operand.  */\n \t      rtx dstp1 = adjust_address (dst, VOIDmode, 1);\n-\t      set_mem_size (dst, const1_rtx);\n+\t      set_mem_size (dst, 1);\n \n \t      emit_insn (gen_movmem_short (dstp1, dst,\n \t\t\t\t\t   GEN_INT (INTVAL (len) - 2)));\n@@ -4142,7 +4142,7 @@ s390_expand_setmem (rtx dst, rtx len, rtx val)\n       else\n \t{\n \t  dstp1 = adjust_address (dst, VOIDmode, 1);\n-\t  set_mem_size (dst, const1_rtx);\n+\t  set_mem_size (dst, 1);\n \n \t  /* Initialize memory by storing the first byte.  */\n \t  emit_move_insn (adjust_address (dst, QImode, 0), val);\n@@ -4551,7 +4551,7 @@ s390_expand_insv (rtx dest, rtx op1, rtx op2, rtx src)\n \t\t\t\t\tGET_MODE_SIZE (word_mode) - size);\n \n \t  dest = adjust_address (dest, BLKmode, 0);\n-\t  set_mem_size (dest, GEN_INT (size));\n+\t  set_mem_size (dest, size);\n \t  s390_expand_movmem (dest, src_mem, GEN_INT (size));\n \t}\n \n@@ -4569,7 +4569,7 @@ s390_expand_insv (rtx dest, rtx op1, rtx op2, rtx src)\n \n \t      emit_move_insn (adjust_address (dest, SImode, size),\n \t\t\t      gen_lowpart (SImode, src));\n-\t      set_mem_size (dest, GEN_INT (size));\n+\t      set_mem_size (dest, size);\n \t      emit_move_insn (gen_rtx_ZERO_EXTRACT (word_mode, dest, GEN_INT\n \t\t\t\t\t\t    (stcmh_width), const0_rtx),\n \t\t\t      gen_rtx_LSHIFTRT (word_mode, src, GEN_INT"}, {"sha": "c04e0245b0dab927814e9d761a69f4e85e7b8f1a", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=f5541398efc0174bbdc40933be77747ad2000426", "patch": "@@ -3295,7 +3295,7 @@\n   int mask = ((1ul << size) - 1) << (GET_MODE_SIZE (SImode) - size);\n \n   operands[1] = adjust_address (operands[1], BLKmode, 0);\n-  set_mem_size (operands[1], GEN_INT (size));\n+  set_mem_size (operands[1], size);\n   operands[2] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode) - bitsize);\n   operands[3] = GEN_INT (mask);\n })\n@@ -3322,7 +3322,7 @@\n   int mask = ((1ul << size) - 1) << (GET_MODE_SIZE (SImode) - size);\n \n   operands[1] = adjust_address (operands[1], BLKmode, 0);\n-  set_mem_size (operands[1], GEN_INT (size));\n+  set_mem_size (operands[1], size);\n   operands[2] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode) - bitsize);\n   operands[3] = GEN_INT (mask);\n })\n@@ -3656,7 +3656,7 @@\n      (clobber (reg:CC CC_REGNUM))])]\n {\n   operands[1] = adjust_address (operands[1], BLKmode, 0);\n-  set_mem_size (operands[1], GEN_INT (GET_MODE_SIZE (QImode)));\n+  set_mem_size (operands[1], GET_MODE_SIZE (QImode));\n   operands[2] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode)\n \t\t\t - GET_MODE_BITSIZE (QImode));\n })"}, {"sha": "70fbf884bce87be1c93d97b5fe65030fcad43d82", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=f5541398efc0174bbdc40933be77747ad2000426", "patch": "@@ -1456,7 +1456,7 @@ expand_block_move (rtx *operands)\n \t  rtx from = adjust_automodify_address (src, BLKmode,\n \t\t\t\t\t\tsrc_addr, copied);\n \n-\t  set_mem_size (from, GEN_INT (4));\n+\t  set_mem_size (from, 4);\n \t  emit_insn (gen_movua (temp, from));\n \t  emit_move_insn (src_addr, plus_constant (src_addr, 4));\n \t  emit_move_insn (to, temp);"}, {"sha": "0f7c8a776294a4890887880428ab612e13765386", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=f5541398efc0174bbdc40933be77747ad2000426", "patch": "@@ -11070,7 +11070,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n       && MEM_P (operands[1]) && MEM_ALIGN (operands[1]) < 32)\n     {\n       rtx src = adjust_address (operands[1], BLKmode, 0);\n-      set_mem_size (src, GEN_INT (4));\n+      set_mem_size (src, 4);\n       emit_insn (gen_movua (operands[0], src));\n       DONE;\n     }\n@@ -11102,7 +11102,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n       && MEM_P (operands[1]) && MEM_ALIGN (operands[1]) < 32)\n     {\n       rtx src = adjust_address (operands[1], BLKmode, 0);\n-      set_mem_size (src, GEN_INT (4));\n+      set_mem_size (src, 4);\n       emit_insn (gen_movua (operands[0], src));\n       DONE;\n     }"}, {"sha": "a36ac61dea8c772123eb08750c208d0bc403e860", "filename": "gcc/dce.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdce.c?ref=f5541398efc0174bbdc40933be77747ad2000426", "patch": "@@ -275,11 +275,11 @@ find_call_stack_args (rtx call_insn, bool do_mark, bool fast,\n     if (GET_CODE (XEXP (p, 0)) == USE\n \t&& MEM_P (XEXP (XEXP (p, 0), 0)))\n       {\n-\trtx mem = XEXP (XEXP (p, 0), 0), addr, size;\n-\tHOST_WIDE_INT off = 0;\n-\tsize = MEM_SIZE (mem);\n-\tif (size == NULL_RTX)\n+\trtx mem = XEXP (XEXP (p, 0), 0), addr;\n+\tHOST_WIDE_INT off = 0, size;\n+\tif (!MEM_SIZE_KNOWN_P (mem))\n \t  return false;\n+\tsize = MEM_SIZE (mem);\n \taddr = XEXP (mem, 0);\n \tif (GET_CODE (addr) == PLUS\n \t    && REG_P (XEXP (addr, 0))\n@@ -329,7 +329,7 @@ find_call_stack_args (rtx call_insn, bool do_mark, bool fast,\n \t      return false;\n \t  }\n \tmin_sp_off = MIN (min_sp_off, off);\n-\tmax_sp_off = MAX (max_sp_off, off + INTVAL (size));\n+\tmax_sp_off = MAX (max_sp_off, off + size);\n       }\n \n   if (min_sp_off >= max_sp_off)\n@@ -370,7 +370,7 @@ find_call_stack_args (rtx call_insn, bool do_mark, bool fast,\n \t    set = single_set (DF_REF_INSN (defs->ref));\n \t    off += INTVAL (XEXP (SET_SRC (set), 1));\n \t  }\n-\tfor (byte = off; byte < off + INTVAL (MEM_SIZE (mem)); byte++)\n+\tfor (byte = off; byte < off + MEM_SIZE (mem); byte++)\n \t  {\n \t    if (!bitmap_set_bit (sp_bytes, byte - min_sp_off))\n \t      gcc_unreachable ();"}, {"sha": "0d348dc6b562ba69226a1e13b31e03c6526723ba", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=f5541398efc0174bbdc40933be77747ad2000426", "patch": "@@ -413,11 +413,17 @@ object associated with the reference.\n @item MEM_OFFSET (@var{x})\n The offset from the start of @code{MEM_EXPR} as a @code{CONST_INT} rtx.\n \n+@findex MEM_SIZE_KNOWN_P\n+@item MEM_SIZE_KNOWN_P (@var{x})\n+True if the size of the memory reference is known.\n+@samp{MEM_SIZE (@var{x})} provides its size if so.\n+\n @findex MEM_SIZE\n @item MEM_SIZE (@var{x})\n-The size in bytes of the memory reference as a @code{CONST_INT} rtx.\n+The size in bytes of the memory reference.\n This is mostly relevant for @code{BLKmode} references as otherwise\n-the size is implied by the mode.\n+the size is implied by the mode.  The value is only valid if\n+@samp{MEM_SIZE_KNOWN_P (@var{x})} is true.\n \n @findex MEM_ALIGN\n @item MEM_ALIGN (@var{x})"}, {"sha": "8bad4ef04ac162f6cf48820ee7675ed9f7c767fb", "filename": "gcc/dse.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=f5541398efc0174bbdc40933be77747ad2000426", "patch": "@@ -1355,11 +1355,10 @@ record_store (rtx body, bb_info_t bb_info)\n \t}\n       /* Handle (set (mem:BLK (addr) [... S36 ...]) (const_int 0))\n \t as memset (addr, 0, 36);  */\n-      else if (!MEM_SIZE (mem)\n-\t       || !CONST_INT_P (MEM_SIZE (mem))\n+      else if (!MEM_SIZE_KNOWN_P (mem)\n+\t       || MEM_SIZE (mem) <= 0\n+\t       || MEM_SIZE (mem) > MAX_OFFSET\n \t       || GET_CODE (body) != SET\n-\t       || INTVAL (MEM_SIZE (mem)) <= 0\n-\t       || INTVAL (MEM_SIZE (mem)) > MAX_OFFSET\n \t       || !CONST_INT_P (SET_SRC (body)))\n \t{\n \t  if (!store_is_unused)\n@@ -1384,7 +1383,7 @@ record_store (rtx body, bb_info_t bb_info)\n     }\n \n   if (GET_MODE (mem) == BLKmode)\n-    width = INTVAL (MEM_SIZE (mem));\n+    width = MEM_SIZE (mem);\n   else\n     {\n       width = GET_MODE_SIZE (GET_MODE (mem));\n@@ -2517,7 +2516,7 @@ scan_insn (bb_info_t bb_info, rtx insn)\n \t\t  && INTVAL (args[2]) > 0)\n \t\t{\n \t\t  rtx mem = gen_rtx_MEM (BLKmode, args[0]);\n-\t\t  set_mem_size (mem, args[2]);\n+\t\t  set_mem_size (mem, INTVAL (args[2]));\n \t\t  body = gen_rtx_SET (VOIDmode, mem, args[1]);\n \t\t  mems_found += record_store (body, bb_info);\n \t\t  if (dump_file)"}, {"sha": "44a27584b650e87e09c7f56bd6d9b7da95272f9c", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=f5541398efc0174bbdc40933be77747ad2000426", "patch": "@@ -12876,7 +12876,7 @@ dw_sra_loc_expr (tree decl, rtx loc)\n \t  if (MEM_P (varloc))\n \t    {\n \t      unsigned HOST_WIDE_INT memsize\n-\t\t= INTVAL (MEM_SIZE (varloc)) * BITS_PER_UNIT;\n+\t\t= MEM_SIZE (varloc) * BITS_PER_UNIT;\n \t      if (memsize != bitsize)\n \t\t{\n \t\t  if (BYTES_BIG_ENDIAN != WORDS_BIG_ENDIAN"}, {"sha": "88624904f01cf54fe28c8db2faaeb88764b21bda", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=f5541398efc0174bbdc40933be77747ad2000426", "patch": "@@ -1913,12 +1913,24 @@ set_mem_offset (rtx mem, rtx offset)\n /* Set the size of MEM to SIZE.  */\n \n void\n-set_mem_size (rtx mem, rtx size)\n+set_mem_size (rtx mem, HOST_WIDE_INT size)\n {\n   struct mem_attrs attrs;\n \n   attrs = *get_mem_attrs (mem);\n-  attrs.size = size;\n+  attrs.size = GEN_INT (size);\n+  set_mem_attrs (mem, &attrs);\n+}\n+\n+/* Clear the size of MEM.  */\n+\n+void\n+clear_mem_size (rtx mem)\n+{\n+  struct mem_attrs attrs;\n+\n+  attrs = *get_mem_attrs (mem);\n+  attrs.size = NULL_RTX;\n   set_mem_attrs (mem, &attrs);\n }\n \f"}, {"sha": "cc145b96e1ca2c8e478fc92bbc196b37297994aa", "filename": "gcc/emit-rtl.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Femit-rtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Femit-rtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.h?ref=f5541398efc0174bbdc40933be77747ad2000426", "patch": "@@ -36,7 +36,10 @@ extern void set_mem_expr (rtx, tree);\n extern void set_mem_offset (rtx, rtx);\n \n /* Set the size for MEM to SIZE.  */\n-extern void set_mem_size (rtx, rtx);\n+extern void set_mem_size (rtx, HOST_WIDE_INT);\n+\n+/* Clear the size recorded for MEM.  */\n+extern void clear_mem_size (rtx);\n \n /* Set the attributes for MEM appropriate for a spill slot.  */\n extern void set_mem_attrs_for_spill (rtx);"}, {"sha": "27bca174114a4efe808f6132debca9d738707b7b", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=f5541398efc0174bbdc40933be77747ad2000426", "patch": "@@ -1166,8 +1166,8 @@ emit_block_move_hints (rtx x, rtx y, rtx size, enum block_op_methods method,\n     {\n       x = shallow_copy_rtx (x);\n       y = shallow_copy_rtx (y);\n-      set_mem_size (x, size);\n-      set_mem_size (y, size);\n+      set_mem_size (x, INTVAL (size));\n+      set_mem_size (y, INTVAL (size));\n     }\n \n   if (CONST_INT_P (size) && MOVE_BY_PIECES_P (INTVAL (size), align))"}, {"sha": "9e65bfd012930cce10b17b127defb28122db6577", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=f5541398efc0174bbdc40933be77747ad2000426", "patch": "@@ -2576,8 +2576,7 @@ assign_parm_find_stack_rtl (tree parm, struct assign_parm_data_one *data)\n       if (data->promoted_mode != BLKmode\n \t  && data->promoted_mode != DECL_MODE (parm))\n \t{\n-\t  set_mem_size (stack_parm,\n-\t\t\tGEN_INT (GET_MODE_SIZE (data->promoted_mode)));\n+\t  set_mem_size (stack_parm, GET_MODE_SIZE (data->promoted_mode));\n \t  if (MEM_EXPR (stack_parm) && MEM_OFFSET (stack_parm))\n \t    {\n \t      int offset = subreg_lowpart_offset (DECL_MODE (parm),"}, {"sha": "bff2483d14b4545f55c6887d2e97f327c94f8e77", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=f5541398efc0174bbdc40933be77747ad2000426", "patch": "@@ -601,9 +601,8 @@ print_rtx (const_rtx in_rtx)\n \tfprintf (outfile, \"+\" HOST_WIDE_INT_PRINT_DEC,\n \t\t INTVAL (MEM_OFFSET (in_rtx)));\n \n-      if (MEM_SIZE (in_rtx))\n-\tfprintf (outfile, \" S\" HOST_WIDE_INT_PRINT_DEC,\n-\t\t INTVAL (MEM_SIZE (in_rtx)));\n+      if (MEM_SIZE_KNOWN_P (in_rtx))\n+\tfprintf (outfile, \" S\" HOST_WIDE_INT_PRINT_DEC, MEM_SIZE (in_rtx));\n \n       if (MEM_ALIGN (in_rtx) != 1)\n \tfprintf (outfile, \" A%u\", MEM_ALIGN (in_rtx));"}, {"sha": "5f48ae7277b4bb2f0f18d2521694825d7c6b7e70", "filename": "gcc/reload.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=f5541398efc0174bbdc40933be77747ad2000426", "patch": "@@ -6139,9 +6139,9 @@ find_reloads_subreg_address (rtx x, int force_replace, int opnum,\n \t      PUT_MODE (tem, GET_MODE (x));\n \t      if (MEM_OFFSET (tem))\n \t\tset_mem_offset (tem, plus_constant (MEM_OFFSET (tem), offset));\n-\t      if (MEM_SIZE (tem)\n-\t\t  && INTVAL (MEM_SIZE (tem)) != (HOST_WIDE_INT) outer_size)\n-\t\tset_mem_size (tem, GEN_INT (outer_size));\n+\t      if (MEM_SIZE_KNOWN_P (tem)\n+\t\t  && MEM_SIZE (tem) != (HOST_WIDE_INT) outer_size)\n+\t\tset_mem_size (tem, outer_size);\n \n \t      /* If this was a paradoxical subreg that we replaced, the\n \t\t resulting memory must be sufficiently aligned to allow"}, {"sha": "7e09a1103bcd63ff61d2b7ec732c7739d21d158e", "filename": "gcc/rtl.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=f5541398efc0174bbdc40933be77747ad2000426", "patch": "@@ -1309,9 +1309,11 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* For a MEM rtx, the address space.  */\n #define MEM_ADDR_SPACE(RTX) (get_mem_attrs (RTX)->addrspace)\n \n-/* For a MEM rtx, the size in bytes of the MEM, if known, as an RTX that\n-   is always a CONST_INT.  */\n-#define MEM_SIZE(RTX) (get_mem_attrs (RTX)->size)\n+/* For a MEM rtx, true if its MEM_SIZE is known.  */\n+#define MEM_SIZE_KNOWN_P(RTX) (get_mem_attrs (RTX)->size != NULL_RTX)\n+\n+/* For a MEM rtx, the size in bytes of the MEM.  */\n+#define MEM_SIZE(RTX) INTVAL (get_mem_attrs (RTX)->size)\n \n /* For a MEM rtx, the alignment in bits.  We can use the alignment of the\n    mode as a default when STRICT_ALIGNMENT, but not if not.  */"}, {"sha": "3692c16004b6a3e3e089b83581dc33a89d193b49", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=f5541398efc0174bbdc40933be77747ad2000426", "patch": "@@ -2279,7 +2279,7 @@ may_trap_p_1 (const_rtx x, unsigned flags)\n \t  code_changed\n \t  || !MEM_NOTRAP_P (x))\n \t{\n-\t  HOST_WIDE_INT size = MEM_SIZE (x) ? INTVAL (MEM_SIZE (x)) : 0;\n+\t  HOST_WIDE_INT size = MEM_SIZE_KNOWN_P (x) ? MEM_SIZE (x) : 0;\n \t  return rtx_addr_can_trap_p_1 (XEXP (x, 0), 0, size,\n \t\t\t\t\tGET_MODE (x), code_changed);\n \t}"}, {"sha": "ce9aec4eebf2e6e813f8ec41e7432f77c75e2f93", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=f5541398efc0174bbdc40933be77747ad2000426", "patch": "@@ -4674,8 +4674,8 @@ track_expr_p (tree expr, bool need_rtl)\n       if (GET_MODE (decl_rtl) == BLKmode\n \t  || AGGREGATE_TYPE_P (TREE_TYPE (realdecl)))\n \treturn 0;\n-      if (MEM_SIZE (decl_rtl)\n-\t  && INTVAL (MEM_SIZE (decl_rtl)) > MAX_VAR_PARTS)\n+      if (MEM_SIZE_KNOWN_P (decl_rtl)\n+\t  && MEM_SIZE (decl_rtl) > MAX_VAR_PARTS)\n \treturn 0;\n     }\n "}, {"sha": "88aea9bb3543788022e8404c9c2e9681563b1712", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5541398efc0174bbdc40933be77747ad2000426/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=f5541398efc0174bbdc40933be77747ad2000426", "patch": "@@ -2391,7 +2391,7 @@ assemble_trampoline_template (void)\n \n   initial_trampoline = gen_const_mem (BLKmode, symbol);\n   set_mem_align (initial_trampoline, TRAMPOLINE_ALIGNMENT);\n-  set_mem_size (initial_trampoline, GEN_INT (TRAMPOLINE_SIZE));\n+  set_mem_size (initial_trampoline, TRAMPOLINE_SIZE);\n \n   return initial_trampoline;\n }"}]}