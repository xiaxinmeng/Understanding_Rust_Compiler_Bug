{"sha": "27a19c584743458ee775ef5e0af5d0e32a465f06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdhMTljNTg0NzQzNDU4ZWU3NzVlZjVlMGFmNWQwZTMyYTQ2NWYwNg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-24T00:01:44Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-24T00:01:44Z"}, "message": "Change c <- v from an expression to a statement.\n\nDon't do anything special if we don't use the value of <-c.\nFix sending an untyped constant in a select statement.\n\nFrom-SVN: r171371", "tree": {"sha": "4cb70d5d25eafaf22a09b592159852d8ae95b17f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cb70d5d25eafaf22a09b592159852d8ae95b17f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27a19c584743458ee775ef5e0af5d0e32a465f06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27a19c584743458ee775ef5e0af5d0e32a465f06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27a19c584743458ee775ef5e0af5d0e32a465f06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27a19c584743458ee775ef5e0af5d0e32a465f06/comments", "author": null, "committer": null, "parents": [{"sha": "e110e232b6f7bbd3b4315161373f61623204d2b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e110e232b6f7bbd3b4315161373f61623204d2b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e110e232b6f7bbd3b4315161373f61623204d2b4"}], "stats": {"total": 756, "additions": 423, "deletions": 333}, "files": [{"sha": "125715bb2de8bb325f3c67a4ed18a3d9a7d3493c", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 0, "deletions": 97, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a19c584743458ee775ef5e0af5d0e32a465f06/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a19c584743458ee775ef5e0af5d0e32a465f06/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=27a19c584743458ee775ef5e0af5d0e32a465f06", "patch": "@@ -12357,103 +12357,6 @@ Expression::make_receive(Expression* channel, source_location location)\n   return new Receive_expression(channel, location);\n }\n \n-// Class Send_expression.\n-\n-// Traversal.\n-\n-int\n-Send_expression::do_traverse(Traverse* traverse)\n-{\n-  if (Expression::traverse(&this->channel_, traverse) == TRAVERSE_EXIT)\n-    return TRAVERSE_EXIT;\n-  return Expression::traverse(&this->val_, traverse);\n-}\n-\n-// Get the type.\n-\n-Type*\n-Send_expression::do_type()\n-{\n-  if (this->is_value_discarded_)\n-    return Type::make_void_type();\n-  else\n-    return Type::lookup_bool_type();\n-}\n-\n-// Set types.\n-\n-void\n-Send_expression::do_determine_type(const Type_context*)\n-{\n-  this->channel_->determine_type_no_context();\n-\n-  Type* type = this->channel_->type();\n-  Type_context subcontext;\n-  if (type->channel_type() != NULL)\n-    subcontext.type = type->channel_type()->element_type();\n-  this->val_->determine_type(&subcontext);\n-}\n-\n-// Check types.\n-\n-void\n-Send_expression::do_check_types(Gogo*)\n-{\n-  Type* type = this->channel_->type();\n-  if (type->is_error_type())\n-    {\n-      this->set_is_error();\n-      return;\n-    }\n-  Channel_type* channel_type = type->channel_type();\n-  if (channel_type == NULL)\n-    {\n-      error_at(this->location(), \"left operand of %<<-%> must be channel\");\n-      this->set_is_error();\n-      return;\n-    }\n-  Type* element_type = channel_type->element_type();\n-  if (element_type != NULL\n-      && !Type::are_assignable(element_type, this->val_->type(), NULL))\n-    {\n-      this->report_error(_(\"incompatible types in send\"));\n-      return;\n-    }\n-  if (!channel_type->may_send())\n-    {\n-      this->report_error(_(\"invalid send on receive-only channel\"));\n-      return;\n-    }\n-}\n-\n-// Get a tree for a send expression.\n-\n-tree\n-Send_expression::do_get_tree(Translate_context* context)\n-{\n-  tree channel = this->channel_->get_tree(context);\n-  tree val = this->val_->get_tree(context);\n-  if (channel == error_mark_node || val == error_mark_node)\n-    return error_mark_node;\n-  Channel_type* channel_type = this->channel_->type()->channel_type();\n-  val = Expression::convert_for_assignment(context,\n-\t\t\t\t\t   channel_type->element_type(),\n-\t\t\t\t\t   this->val_->type(),\n-\t\t\t\t\t   val,\n-\t\t\t\t\t   this->location());\n-  return Gogo::send_on_channel(channel, val, this->is_value_discarded_,\n-\t\t\t       this->for_select_, this->location());\n-}\n-\n-// Make a send expression\n-\n-Send_expression*\n-Expression::make_send(Expression* channel, Expression* val,\n-\t\t      source_location location)\n-{\n-  return new Send_expression(channel, val, location);\n-}\n-\n // An expression which evaluates to a pointer to the type descriptor\n // of a type.\n "}, {"sha": "fa240a69b8c139dc11979d4de3f7ee4511505884", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 3, "deletions": 71, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a19c584743458ee775ef5e0af5d0e32a465f06/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a19c584743458ee775ef5e0af5d0e32a465f06/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=27a19c584743458ee775ef5e0af5d0e32a465f06", "patch": "@@ -36,7 +36,6 @@ class Field_reference_expression;\n class Interface_field_reference_expression;\n class Type_guard_expression;\n class Receive_expression;\n-class Send_expression;\n class Named_object;\n class Export;\n class Import;\n@@ -89,7 +88,6 @@ class Expression\n     EXPRESSION_COMPOSITE_LITERAL,\n     EXPRESSION_HEAP_COMPOSITE,\n     EXPRESSION_RECEIVE,\n-    EXPRESSION_SEND,\n     EXPRESSION_TYPE_DESCRIPTOR,\n     EXPRESSION_TYPE_INFO,\n     EXPRESSION_STRUCT_FIELD_OFFSET,\n@@ -271,10 +269,6 @@ class Expression\n   static Receive_expression*\n   make_receive(Expression* channel, source_location);\n \n-  // Make a send expression.\n-  static Send_expression*\n-  make_send(Expression* channel, Expression* val, source_location);\n-\n   // Make an expression which evaluates to the type descriptor of a\n   // type.\n   static Expression*\n@@ -356,8 +350,7 @@ class Expression\n \n   // This is called by the parser if the value of this expression is\n   // being discarded.  This issues warnings about computed values\n-  // being unused, and handles send expressions which act differently\n-  // depending upon whether the value is used.\n+  // being unused.\n   void\n   discarding_value()\n   { this->do_discarding_value(); }\n@@ -1807,7 +1800,7 @@ class Receive_expression : public Expression\n  public:\n   Receive_expression(Expression* channel, source_location location)\n     : Expression(EXPRESSION_RECEIVE, location),\n-      channel_(channel), is_value_discarded_(false), for_select_(false)\n+      channel_(channel), for_select_(false)\n   { }\n \n   // Return the channel.\n@@ -1827,7 +1820,7 @@ class Receive_expression : public Expression\n \n   void\n   do_discarding_value()\n-  { this->is_value_discarded_ = true; }\n+  { }\n \n   Type*\n   do_type();\n@@ -1855,67 +1848,6 @@ class Receive_expression : public Expression\n  private:\n   // The channel from which we are receiving.\n   Expression* channel_;\n-  // Whether the value is being discarded.\n-  bool is_value_discarded_;\n-  // Whether this is for a select statement.\n-  bool for_select_;\n-};\n-\n-// A send expression.\n-\n-class Send_expression : public Expression\n-{\n- public:\n-  Send_expression(Expression* channel, Expression* val,\n-\t\t  source_location location)\n-    : Expression(EXPRESSION_SEND, location),\n-      channel_(channel), val_(val), is_value_discarded_(false),\n-      for_select_(false)\n-  { }\n-\n-  // Note that this is for a select statement.\n-  void\n-  set_for_select()\n-  { this->for_select_ = true; }\n-\n- protected:\n-  int\n-  do_traverse(Traverse* traverse);\n-\n-  void\n-  do_discarding_value()\n-  { this->is_value_discarded_ = true; }\n-\n-  Type*\n-  do_type();\n-\n-  void\n-  do_determine_type(const Type_context*);\n-\n-  void\n-  do_check_types(Gogo*);\n-\n-  Expression*\n-  do_copy()\n-  {\n-    return Expression::make_send(this->channel_->copy(), this->val_->copy(),\n-\t\t\t\t this->location());\n-  }\n-\n-  bool\n-  do_must_eval_in_order() const\n-  { return true; }\n-\n-  tree\n-  do_get_tree(Translate_context*);\n-\n- private:\n-  // The channel on which to send the value.\n-  Expression* channel_;\n-  // The value to send.\n-  Expression* val_;\n-  // Whether the value is being discarded.\n-  bool is_value_discarded_;\n   // Whether this is for a select statement.\n   bool for_select_;\n };"}, {"sha": "f2476d549d11cf7af5c8a87f613520fd92a2c6bc", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a19c584743458ee775ef5e0af5d0e32a465f06/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a19c584743458ee775ef5e0af5d0e32a465f06/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=27a19c584743458ee775ef5e0af5d0e32a465f06", "patch": "@@ -1926,14 +1926,6 @@ Order_eval::statement(Block* block, size_t* pindex, Statement* s)\n     {\n       Expression** pexpr = *p;\n \n-      // If the last expression is a send or receive expression, we\n-      // may be ignoring the value; we don't want to evaluate it\n-      // early.\n-      if (p + 1 == find_eval_ordering.end()\n-\t  && ((*pexpr)->classification() == Expression::EXPRESSION_SEND\n-\t      || (*pexpr)->classification() == Expression::EXPRESSION_RECEIVE))\n-\tbreak;\n-\n       // The last expression in a thunk will be the call passed to go\n       // or defer, which we must not evaluate early.\n       if (is_thunk && p + 1 == find_eval_ordering.end())"}, {"sha": "2e591495684eb5e0744b113a18a787d5f254a776", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 31, "deletions": 22, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a19c584743458ee775ef5e0af5d0e32a465f06/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a19c584743458ee775ef5e0af5d0e32a465f06/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=27a19c584743458ee775ef5e0af5d0e32a465f06", "patch": "@@ -2944,9 +2944,6 @@ Parse::expression(Precedence precedence, bool may_be_sink,\n \tcase OPERATOR_ANDAND:\n \t  right_precedence = PRECEDENCE_ANDAND;\n \t  break;\n-\tcase OPERATOR_CHANOP:\n-\t  right_precedence = PRECEDENCE_CHANOP;\n-\t  break;\n \tcase OPERATOR_EQEQ:\n \tcase OPERATOR_NOTEQ:\n \tcase OPERATOR_LT:\n@@ -2997,10 +2994,7 @@ Parse::expression(Precedence precedence, bool may_be_sink,\n       Expression* right = this->expression(right_precedence, false,\n \t\t\t\t\t   may_be_composite_lit,\n \t\t\t\t\t   NULL);\n-      if (op == OPERATOR_CHANOP)\n-\tleft = Expression::make_send(left, right, binop_location);\n-      else\n-\tleft = Expression::make_binary(op, left, right, binop_location);\n+      left = Expression::make_binary(op, left, right, binop_location);\n     }\n }\n \n@@ -3302,8 +3296,10 @@ Parse::labeled_stmt(const std::string& label_name, source_location location)\n   this->statement(label);\n }\n \n-// SimpleStat =\n-//   ExpressionStat | IncDecStat | Assignment | SimpleVarDecl .\n+// SimpleStmt = EmptyStmt | ExpressionStmt | SendStmt | IncDecStmt |\n+//\tAssignment | ShortVarDecl .\n+\n+// EmptyStmt was handled in Parse::statement.\n \n // In order to make this work for if and switch statements, if\n // RETURN_EXP is true, and we see an ExpressionStat, we return the\n@@ -3360,7 +3356,10 @@ Parse::simple_stat(bool may_be_composite_lit, bool return_exp,\n       return NULL;\n     }\n   token = this->peek_token();\n-  if (token->is_op(OPERATOR_PLUSPLUS) || token->is_op(OPERATOR_MINUSMINUS))\n+  if (token->is_op(OPERATOR_CHANOP))\n+    this->send_stmt(this->verify_not_sink(exp));\n+  else if (token->is_op(OPERATOR_PLUSPLUS)\n+\t   || token->is_op(OPERATOR_MINUSMINUS))\n     this->inc_dec_stat(this->verify_not_sink(exp));\n   else if (token->is_op(OPERATOR_COMMA)\n \t   || token->is_op(OPERATOR_EQ))\n@@ -3430,6 +3429,20 @@ Parse::expression_stat(Expression* exp)\n   this->gogo_->add_statement(Statement::make_statement(exp));\n }\n \n+// SendStmt = Channel \"&lt;-\" Expression .\n+// Channel  = Expression .\n+\n+void\n+Parse::send_stmt(Expression* channel)\n+{\n+  gcc_assert(this->peek_token()->is_op(OPERATOR_CHANOP));\n+  source_location loc = this->location();\n+  this->advance_token();\n+  Expression* val = this->expression(PRECEDENCE_NORMAL, false, true, NULL);\n+  Statement* s = Statement::make_send_statement(channel, val, loc);\n+  this->gogo_->add_statement(s);\n+}\n+\n // IncDecStat = Expression ( \"++\" | \"--\" ) .\n \n void\n@@ -4159,7 +4172,7 @@ Parse::select_stat(const Label* label)\n   this->gogo_->add_statement(statement);\n }\n \n-// CommClause = CommCase [ StatementList ] .\n+// CommClause = CommCase \":\" { Statement \";\" } .\n \n void\n Parse::comm_clause(Select_clauses* clauses, bool* saw_default)\n@@ -4173,6 +4186,11 @@ Parse::comm_clause(Select_clauses* clauses, bool* saw_default)\n   bool got_case = this->comm_case(&is_send, &channel, &val, &varname,\n \t\t\t\t  &is_default);\n \n+  if (this->peek_token()->is_op(OPERATOR_COLON))\n+    this->advance_token();\n+  else\n+    error_at(this->location(), \"expected colon\");\n+\n   Block* statements = NULL;\n   Named_object* var = NULL;\n   if (this->peek_token()->is_op(OPERATOR_SEMICOLON))\n@@ -4214,7 +4232,7 @@ Parse::comm_clause(Select_clauses* clauses, bool* saw_default)\n     }\n }\n \n-// CommCase = ( \"default\" | ( \"case\" ( SendExpr | RecvExpr) ) ) \":\" .\n+// CommCase   = \"case\" ( SendStmt | RecvStmt ) | \"default\" .\n \n bool\n Parse::comm_case(bool* is_send, Expression** channel, Expression** val,\n@@ -4240,18 +4258,9 @@ Parse::comm_case(bool* is_send, Expression** channel, Expression** val,\n       return false;\n     }\n \n-  if (!this->peek_token()->is_op(OPERATOR_COLON))\n-    {\n-      error_at(this->location(), \"expected colon\");\n-      return false;\n-    }\n-\n-  this->advance_token();\n-\n   return true;\n }\n \n-// SendExpr = Expression \"<-\" Expression .\n // RecvExpr =  [ Expression ( \"=\" | \":=\" ) ] \"<-\" Expression .\n \n bool\n@@ -4291,7 +4300,7 @@ Parse::send_or_recv_expr(bool* is_send, Expression** channel, Expression** val,\n     }\n   else\n     {\n-      Expression* left = this->expression(PRECEDENCE_CHANOP, true, true, NULL);\n+      Expression* left = this->expression(PRECEDENCE_NORMAL, true, true, NULL);\n \n       if (this->peek_token()->is_op(OPERATOR_EQ))\n \t{"}, {"sha": "04ae324f4d813c4bd4b05d8f2e39b88461c32d2d", "filename": "gcc/go/gofrontend/parse.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a19c584743458ee775ef5e0af5d0e32a465f06/gcc%2Fgo%2Fgofrontend%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a19c584743458ee775ef5e0af5d0e32a465f06/gcc%2Fgo%2Fgofrontend%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.h?ref=27a19c584743458ee775ef5e0af5d0e32a465f06", "patch": "@@ -44,7 +44,6 @@ class Parse\n     PRECEDENCE_NORMAL = 0,\n     PRECEDENCE_OROR,\n     PRECEDENCE_ANDAND,\n-    PRECEDENCE_CHANOP,\n     PRECEDENCE_RELOP,\n     PRECEDENCE_ADDOP,\n     PRECEDENCE_MULOP\n@@ -229,6 +228,7 @@ class Parse\n   void statement_list();\n   bool statement_list_may_start_here();\n   void expression_stat(Expression*);\n+  void send_stmt(Expression*);\n   void inc_dec_stat(Expression*);\n   void assignment(Expression*, Range_clause*);\n   void tuple_assignment(Expression_list*, Range_clause*);"}, {"sha": "5a4ad06132978e9426f4991afc1087afb615712a", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 92, "deletions": 5, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a19c584743458ee775ef5e0af5d0e32a465f06/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a19c584743458ee775ef5e0af5d0e32a465f06/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=27a19c584743458ee775ef5e0af5d0e32a465f06", "patch": "@@ -3987,6 +3987,90 @@ Statement::make_type_switch_statement(Named_object* var, Expression* expr,\n   return new Type_switch_statement(var, expr, location);\n }\n \n+// Class Send_statement.\n+\n+// Traversal.\n+\n+int\n+Send_statement::do_traverse(Traverse* traverse)\n+{\n+  if (this->traverse_expression(traverse, &this->channel_) == TRAVERSE_EXIT)\n+    return TRAVERSE_EXIT;\n+  return this->traverse_expression(traverse, &this->val_);\n+}\n+\n+// Determine types.\n+\n+void\n+Send_statement::do_determine_types()\n+{\n+  this->channel_->determine_type_no_context();\n+  Type* type = this->channel_->type();\n+  Type_context context;\n+  if (type->channel_type() != NULL)\n+    context.type = type->channel_type()->element_type();\n+  this->val_->determine_type(&context);\n+}\n+\n+// Check types.\n+\n+void\n+Send_statement::do_check_types(Gogo*)\n+{\n+  Type* type = this->channel_->type();\n+  if (type->is_error_type())\n+    {\n+      this->set_is_error();\n+      return;\n+    }\n+  Channel_type* channel_type = type->channel_type();\n+  if (channel_type == NULL)\n+    {\n+      error_at(this->location(), \"left operand of %<<-%> must be channel\");\n+      this->set_is_error();\n+      return;\n+    }\n+  Type* element_type = channel_type->element_type();\n+  if (!Type::are_assignable(element_type, this->val_->type(), NULL))\n+    {\n+      this->report_error(_(\"incompatible types in send\"));\n+      return;\n+    }\n+  if (!channel_type->may_send())\n+    {\n+      this->report_error(_(\"invalid send on receive-only channel\"));\n+      return;\n+    }\n+}\n+\n+// Get a tree for a send statement.\n+\n+tree\n+Send_statement::do_get_tree(Translate_context* context)\n+{\n+  tree channel = this->channel_->get_tree(context);\n+  tree val = this->val_->get_tree(context);\n+  if (channel == error_mark_node || val == error_mark_node)\n+    return error_mark_node;\n+  Channel_type* channel_type = this->channel_->type()->channel_type();\n+  val = Expression::convert_for_assignment(context,\n+\t\t\t\t\t   channel_type->element_type(),\n+\t\t\t\t\t   this->val_->type(),\n+\t\t\t\t\t   val,\n+\t\t\t\t\t   this->location());\n+  return Gogo::send_on_channel(channel, val, true, this->for_select_,\n+\t\t\t       this->location());\n+}\n+\n+// Make a send statement.\n+\n+Send_statement*\n+Statement::make_send_statement(Expression* channel, Expression* val,\n+\t\t\t       source_location location)\n+{\n+  return new Send_statement(channel, val, location);\n+}\n+\n // Class Select_clauses::Select_clause.\n \n // Traversal.\n@@ -4043,7 +4127,7 @@ Select_clauses::Select_clause::lower(Block* b)\n   // If this is a send clause, evaluate the value to send before the\n   // select statement.\n   Temporary_statement* val_temp = NULL;\n-  if (this->is_send_)\n+  if (this->is_send_ && !this->val_->is_constant())\n     {\n       val_temp = Statement::make_temporary(NULL, this->val_, loc);\n       b->add_statement(val_temp);\n@@ -4054,11 +4138,14 @@ Select_clauses::Select_clause::lower(Block* b)\n   Expression* ref = Expression::make_temporary_reference(channel_temp, loc);\n   if (this->is_send_)\n     {\n-      Expression* ref2 = Expression::make_temporary_reference(val_temp, loc);\n-      Send_expression* send = Expression::make_send(ref, ref2, loc);\n-      send->discarding_value();\n+      Expression* ref2;\n+      if (val_temp == NULL)\n+\tref2 = this->val_;\n+      else\n+\tref2 = Expression::make_temporary_reference(val_temp, loc);\n+      Send_statement* send = Statement::make_send_statement(ref, ref2, loc);\n       send->set_for_select();\n-      init->add_statement(Statement::make_statement(send));\n+      init->add_statement(send);\n     }\n   else\n     {"}, {"sha": "83d5436ac74beb2fc27852c618ce9f87128df61f", "filename": "gcc/go/gofrontend/statements.h", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a19c584743458ee775ef5e0af5d0e32a465f06/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a19c584743458ee775ef5e0af5d0e32a465f06/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.h?ref=27a19c584743458ee775ef5e0af5d0e32a465f06", "patch": "@@ -23,6 +23,7 @@ class For_statement;\n class For_range_statement;\n class Switch_statement;\n class Type_switch_statement;\n+class Send_statement;\n class Select_statement;\n class Variable;\n class Named_object;\n@@ -99,6 +100,7 @@ class Statement\n     STATEMENT_UNNAMED_LABEL,\n     STATEMENT_IF,\n     STATEMENT_CONSTANT_SWITCH,\n+    STATEMENT_SEND,\n     STATEMENT_SELECT,\n \n     // These statements types are created by the parser, but they\n@@ -236,6 +238,10 @@ class Statement\n   static Type_switch_statement*\n   make_type_switch_statement(Named_object* var, Expression*, source_location);\n \n+  // Make a send statement.\n+  static Send_statement*\n+  make_send_statement(Expression* channel, Expression* val, source_location);\n+\n   // Make a select statement.\n   static Select_statement*\n   make_select_statement(source_location);\n@@ -592,6 +598,44 @@ class Return_statement : public Statement\n   Expression_list* vals_;\n };\n \n+// A send statement.\n+\n+class Send_statement : public Statement\n+{\n+ public:\n+  Send_statement(Expression* channel, Expression* val,\n+\t\t source_location location)\n+    : Statement(STATEMENT_SEND, location),\n+      channel_(channel), val_(val), for_select_(false)\n+  { }\n+\n+  // Note that this is for a select statement.\n+  void\n+  set_for_select()\n+  { this->for_select_ = true; }\n+\n+ protected:\n+  int\n+  do_traverse(Traverse* traverse);\n+\n+  void\n+  do_determine_types();\n+\n+  void\n+  do_check_types(Gogo*);\n+\n+  tree\n+  do_get_tree(Translate_context*);\n+\n+ private:\n+  // The channel on which to send the value.\n+  Expression* channel_;\n+  // The value to send.\n+  Expression* val_;\n+  // Whether this is for a select statement.\n+  bool for_select_;\n+};\n+\n // Select_clauses holds the clauses of a select statement.  This is\n // built by the parser.\n "}, {"sha": "33afb3291652b11f93da64001ba36d85a84c5cb9", "filename": "gcc/testsuite/go.test/test/chan/nonblock.go", "status": "modified", "additions": 102, "deletions": 51, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a19c584743458ee775ef5e0af5d0e32a465f06/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fnonblock.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a19c584743458ee775ef5e0af5d0e32a465f06/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fnonblock.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fnonblock.go?ref=27a19c584743458ee775ef5e0af5d0e32a465f06", "patch": "@@ -76,7 +76,6 @@ func main() {\n \tvar i64 int64\n \tvar b bool\n \tvar s string\n-\tvar ok bool\n \n \tvar sync = make(chan bool)\n \n@@ -86,35 +85,45 @@ func main() {\n \t\tcb := make(chan bool, buffer)\n \t\tcs := make(chan string, buffer)\n \n-\t\ti32, ok = <-c32\n-\t\tif ok {\n+\t\tselect {\n+\t\tcase i32 = <-c32:\n \t\t\tpanic(\"blocked i32sender\")\n+\t\tdefault:\n \t\t}\n \n-\t\ti64, ok = <-c64\n-\t\tif ok {\n+\t\tselect {\n+\t\tcase i64 = <-c64:\n \t\t\tpanic(\"blocked i64sender\")\n+\t\tdefault:\n \t\t}\n \n-\t\tb, ok = <-cb\n-\t\tif ok {\n+\t\tselect {\n+\t\tcase b = <-cb:\n \t\t\tpanic(\"blocked bsender\")\n+\t\tdefault:\n \t\t}\n \n-\t\ts, ok = <-cs\n-\t\tif ok {\n+\t\tselect {\n+\t\tcase s = <-cs:\n \t\t\tpanic(\"blocked ssender\")\n+\t\tdefault:\n \t\t}\n \n \t\tgo i32receiver(c32, sync)\n \t\ttry := 0\n-\t\tfor !(c32 <- 123) {\n-\t\t\ttry++\n-\t\t\tif try > maxTries {\n-\t\t\t\tprintln(\"i32receiver buffer=\", buffer)\n-\t\t\t\tpanic(\"fail\")\n+\tSend32:\n+\t\tfor {\n+\t\t\tselect {\n+\t\t\tcase c32 <- 123:\n+\t\t\t\tbreak Send32\n+\t\t\tdefault:\n+\t\t\t\ttry++\n+\t\t\t\tif try > maxTries {\n+\t\t\t\t\tprintln(\"i32receiver buffer=\", buffer)\n+\t\t\t\t\tpanic(\"fail\")\n+\t\t\t\t}\n+\t\t\t\tsleep()\n \t\t\t}\n-\t\t\tsleep()\n \t\t}\n \t\t<-sync\n \n@@ -123,13 +132,19 @@ func main() {\n \t\t\t<-sync\n \t\t}\n \t\ttry = 0\n-\t\tfor i32, ok = <-c32; !ok; i32, ok = <-c32 {\n-\t\t\ttry++\n-\t\t\tif try > maxTries {\n-\t\t\t\tprintln(\"i32sender buffer=\", buffer)\n-\t\t\t\tpanic(\"fail\")\n+\tRecv32:\n+\t\tfor {\n+\t\t\tselect {\n+\t\t\tcase i32 = <-c32:\n+\t\t\t\tbreak Recv32\n+\t\t\tdefault:\n+\t\t\t\ttry++\n+\t\t\t\tif try > maxTries {\n+\t\t\t\t\tprintln(\"i32sender buffer=\", buffer)\n+\t\t\t\t\tpanic(\"fail\")\n+\t\t\t\t}\n+\t\t\t\tsleep()\n \t\t\t}\n-\t\t\tsleep()\n \t\t}\n \t\tif i32 != 234 {\n \t\t\tpanic(\"i32sender value\")\n@@ -140,12 +155,18 @@ func main() {\n \n \t\tgo i64receiver(c64, sync)\n \t\ttry = 0\n-\t\tfor !(c64 <- 123456) {\n-\t\t\ttry++\n-\t\t\tif try > maxTries {\n-\t\t\t\tpanic(\"i64receiver\")\n+\tSend64:\n+\t\tfor {\n+\t\t\tselect {\n+\t\t\tcase c64 <- 123456:\n+\t\t\t\tbreak Send64\n+\t\t\tdefault:\n+\t\t\t\ttry++\n+\t\t\t\tif try > maxTries {\n+\t\t\t\t\tpanic(\"i64receiver\")\n+\t\t\t\t}\n+\t\t\t\tsleep()\n \t\t\t}\n-\t\t\tsleep()\n \t\t}\n \t\t<-sync\n \n@@ -154,12 +175,18 @@ func main() {\n \t\t\t<-sync\n \t\t}\n \t\ttry = 0\n-\t\tfor i64, ok = <-c64; !ok; i64, ok = <-c64 {\n-\t\t\ttry++\n-\t\t\tif try > maxTries {\n-\t\t\t\tpanic(\"i64sender\")\n+\tRecv64:\n+\t\tfor {\n+\t\t\tselect {\n+\t\t\tcase i64 = <-c64:\n+\t\t\t\tbreak Recv64\n+\t\t\tdefault:\n+\t\t\t\ttry++\n+\t\t\t\tif try > maxTries {\n+\t\t\t\t\tpanic(\"i64sender\")\n+\t\t\t\t}\n+\t\t\t\tsleep()\n \t\t\t}\n-\t\t\tsleep()\n \t\t}\n \t\tif i64 != 234567 {\n \t\t\tpanic(\"i64sender value\")\n@@ -170,12 +197,18 @@ func main() {\n \n \t\tgo breceiver(cb, sync)\n \t\ttry = 0\n-\t\tfor !(cb <- true) {\n-\t\t\ttry++\n-\t\t\tif try > maxTries {\n-\t\t\t\tpanic(\"breceiver\")\n+\tSendBool:\n+\t\tfor {\n+\t\t\tselect {\n+\t\t\tcase cb <- true:\n+\t\t\t\tbreak SendBool\n+\t\t\tdefault:\n+\t\t\t\ttry++\n+\t\t\t\tif try > maxTries {\n+\t\t\t\t\tpanic(\"breceiver\")\n+\t\t\t\t}\n+\t\t\t\tsleep()\n \t\t\t}\n-\t\t\tsleep()\n \t\t}\n \t\t<-sync\n \n@@ -184,12 +217,18 @@ func main() {\n \t\t\t<-sync\n \t\t}\n \t\ttry = 0\n-\t\tfor b, ok = <-cb; !ok; b, ok = <-cb {\n-\t\t\ttry++\n-\t\t\tif try > maxTries {\n-\t\t\t\tpanic(\"bsender\")\n+\tRecvBool:\n+\t\tfor {\n+\t\t\tselect {\n+\t\t\tcase b = <-cb:\n+\t\t\t\tbreak RecvBool\n+\t\t\tdefault:\n+\t\t\t\ttry++\n+\t\t\t\tif try > maxTries {\n+\t\t\t\t\tpanic(\"bsender\")\n+\t\t\t\t}\n+\t\t\t\tsleep()\n \t\t\t}\n-\t\t\tsleep()\n \t\t}\n \t\tif !b {\n \t\t\tpanic(\"bsender value\")\n@@ -200,12 +239,18 @@ func main() {\n \n \t\tgo sreceiver(cs, sync)\n \t\ttry = 0\n-\t\tfor !(cs <- \"hello\") {\n-\t\t\ttry++\n-\t\t\tif try > maxTries {\n-\t\t\t\tpanic(\"sreceiver\")\n+\tSendString:\n+\t\tfor {\n+\t\t\tselect {\n+\t\t\tcase cs <- \"hello\":\n+\t\t\t\tbreak SendString\n+\t\t\tdefault:\n+\t\t\t\ttry++\n+\t\t\t\tif try > maxTries {\n+\t\t\t\t\tpanic(\"sreceiver\")\n+\t\t\t\t}\n+\t\t\t\tsleep()\n \t\t\t}\n-\t\t\tsleep()\n \t\t}\n \t\t<-sync\n \n@@ -214,12 +259,18 @@ func main() {\n \t\t\t<-sync\n \t\t}\n \t\ttry = 0\n-\t\tfor s, ok = <-cs; !ok; s, ok = <-cs {\n-\t\t\ttry++\n-\t\t\tif try > maxTries {\n-\t\t\t\tpanic(\"ssender\")\n+\tRecvString:\n+\t\tfor {\n+\t\t\tselect {\n+\t\t\tcase s = <-cs:\n+\t\t\t\tbreak RecvString\n+\t\t\tdefault:\n+\t\t\t\ttry++\n+\t\t\t\tif try > maxTries {\n+\t\t\t\t\tpanic(\"ssender\")\n+\t\t\t\t}\n+\t\t\t\tsleep()\n \t\t\t}\n-\t\t\tsleep()\n \t\t}\n \t\tif s != \"hello again\" {\n \t\t\tpanic(\"ssender value\")"}, {"sha": "c725829d13293aa8817b6ee2f239d8788728910e", "filename": "gcc/testsuite/go.test/test/chan/perm.go", "status": "modified", "additions": 31, "deletions": 34, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a19c584743458ee775ef5e0af5d0e32a465f06/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fperm.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a19c584743458ee775ef5e0af5d0e32a465f06/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fperm.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fperm.go?ref=27a19c584743458ee775ef5e0af5d0e32a465f06", "patch": "@@ -9,49 +9,46 @@ package main\n var (\n \tcr <-chan int\n \tcs chan<- int\n-\tc chan int\n+\tc  chan int\n )\n \n func main() {\n-\tcr = c\t\t// ok\n-\tcs = c\t\t// ok\n-\tc = cr\t\t// ERROR \"illegal types|incompatible|cannot\"\n-\tc = cs\t\t// ERROR \"illegal types|incompatible|cannot\"\n-\tcr = cs\t// ERROR \"illegal types|incompatible|cannot\"\n-\tcs = cr\t// ERROR \"illegal types|incompatible|cannot\"\n-\n-\tc <- 0\t\t// ok\n-\tok := c <- 0\t// ok\n-\t_ = ok\n-\t<-c\t\t// ok\n-\tx, ok := <-c\t// ok\n-\t_, _ = x, ok\n-\n-\tcr <- 0\t// ERROR \"send\"\n-\tok = cr <- 0\t// ERROR \"send\"\n-\t_ = ok\n-\t<-cr\t\t// ok\n-\tx, ok = <-cr\t// ok\n-\t_, _ = x, ok\n-\n-\tcs <- 0\t// ok\n-\tok = cs <- 0\t// ok\n-\t_ = ok\n-\t<-cs\t\t// ERROR \"receive\"\n-\tx, ok = <-cs\t// ERROR \"receive\"\n-\t_, _ = x, ok\n+\tcr = c  // ok\n+\tcs = c  // ok\n+\tc = cr  // ERROR \"illegal types|incompatible|cannot\"\n+\tc = cs  // ERROR \"illegal types|incompatible|cannot\"\n+\tcr = cs // ERROR \"illegal types|incompatible|cannot\"\n+\tcs = cr // ERROR \"illegal types|incompatible|cannot\"\n+\n+\tc <- 0 // ok\n+\t<-c    // ok\n+\t//TODO(rsc): uncomment when this syntax is valid for receive+check closed\n+\t//\tx, ok := <-c\t// ok\n+\t//\t_, _ = x, ok\n+\n+\tcr <- 0 // ERROR \"send\"\n+\t<-cr    // ok\n+\t//TODO(rsc): uncomment when this syntax is valid for receive+check closed\n+\t//\tx, ok = <-cr\t// ok\n+\t//\t_, _ = x, ok\n+\n+\tcs <- 0 // ok\n+\t<-cs    // ERROR \"receive\"\n+\t////TODO(rsc): uncomment when this syntax is valid for receive+check closed\n+\t////\tx, ok = <-cs\t// ERROR \"receive\"\n+\t////\t_, _ = x, ok\n \n \tselect {\n-\tcase c <- 0:\t// ok\n-\tcase x := <-c:\t// ok\n+\tcase c <- 0: // ok\n+\tcase x := <-c: // ok\n \t\t_ = x\n \n-\tcase cr <- 0:\t// ERROR \"send\"\n-\tcase x := <-cr:\t// ok\n+\tcase cr <- 0: // ERROR \"send\"\n+\tcase x := <-cr: // ok\n \t\t_ = x\n \n-\tcase cs <- 0:\t// ok\n-\tcase x := <-cs:\t// ERROR \"receive\"\n+\tcase cs <- 0: // ok\n+\tcase x := <-cs: // ERROR \"receive\"\n \t\t_ = x\n \t}\n }"}, {"sha": "46d9d0f5d211effcf6a34cd4e06dc034b6b93abc", "filename": "gcc/testsuite/go.test/test/closedchan.go", "status": "modified", "additions": 82, "deletions": 10, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a19c584743458ee775ef5e0af5d0e32a465f06/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fclosedchan.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a19c584743458ee775ef5e0af5d0e32a465f06/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fclosedchan.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fclosedchan.go?ref=27a19c584743458ee775ef5e0af5d0e32a465f06", "patch": "@@ -21,23 +21,35 @@ type Chan interface {\n \tImpl() string\n }\n \n-// direct channel operations\n+// direct channel operations when possible\n type XChan chan int\n+\n func (c XChan) Send(x int) {\n \tc <- x\n }\n \n func (c XChan) Nbsend(x int) bool {\n-\treturn c <- x\n+\tselect {\n+\tcase c <- x:\n+\t\treturn true\n+\tdefault:\n+\t\treturn false\n+\t}\n+\tpanic(\"nbsend\")\n }\n \n func (c XChan) Recv() int {\n \treturn <-c\n }\n \n func (c XChan) Nbrecv() (int, bool) {\n-\tx, ok := <-c\n-\treturn x, ok\n+\tselect {\n+\tcase x := <-c:\n+\t\treturn x, true\n+\tdefault:\n+\t\treturn 0, false\n+\t}\n+\tpanic(\"nbrecv\")\n }\n \n func (c XChan) Close() {\n@@ -54,6 +66,7 @@ func (c XChan) Impl() string {\n \n // indirect operations via select\n type SChan chan int\n+\n func (c SChan) Send(x int) {\n \tselect {\n \tcase c <- x:\n@@ -62,10 +75,10 @@ func (c SChan) Send(x int) {\n \n func (c SChan) Nbsend(x int) bool {\n \tselect {\n-\tcase c <- x:\n-\t\treturn true\n \tdefault:\n \t\treturn false\n+\tcase c <- x:\n+\t\treturn true\n \t}\n \tpanic(\"nbsend\")\n }\n@@ -80,10 +93,10 @@ func (c SChan) Recv() int {\n \n func (c SChan) Nbrecv() (int, bool) {\n \tselect {\n-\tcase x := <-c:\n-\t\treturn x, true\n \tdefault:\n \t\treturn 0, false\n+\tcase x := <-c:\n+\t\treturn x, true\n \t}\n \tpanic(\"nbrecv\")\n }\n@@ -100,6 +113,62 @@ func (c SChan) Impl() string {\n \treturn \"(select)\"\n }\n \n+// indirect operations via larger selects\n+var dummy = make(chan bool)\n+\n+type SSChan chan int\n+\n+func (c SSChan) Send(x int) {\n+\tselect {\n+\tcase c <- x:\n+\tcase <-dummy:\n+\t}\n+}\n+\n+func (c SSChan) Nbsend(x int) bool {\n+\tselect {\n+\tdefault:\n+\t\treturn false\n+\tcase <-dummy:\n+\tcase c <- x:\n+\t\treturn true\n+\t}\n+\tpanic(\"nbsend\")\n+}\n+\n+func (c SSChan) Recv() int {\n+\tselect {\n+\tcase <-dummy:\n+\tcase x := <-c:\n+\t\treturn x\n+\t}\n+\tpanic(\"recv\")\n+}\n+\n+func (c SSChan) Nbrecv() (int, bool) {\n+\tselect {\n+\tcase <-dummy:\n+\tdefault:\n+\t\treturn 0, false\n+\tcase x := <-c:\n+\t\treturn x, true\n+\t}\n+\tpanic(\"nbrecv\")\n+}\n+\n+func (c SSChan) Close() {\n+\tclose(c)\n+}\n+\n+func (c SSChan) Closed() bool {\n+\treturn closed(c)\n+}\n+\n+func (c SSChan) Impl() string {\n+\treturn \"(select)\"\n+}\n+\n+\n func shouldPanic(f func()) {\n \tdefer func() {\n \t\tif recover() == nil {\n@@ -137,15 +206,15 @@ func test1(c Chan) {\n \t}\n \n \t// send should work with ,ok too: sent a value without blocking, so ok == true.\n-\tshouldPanic(func(){c.Nbsend(1)})\n+\tshouldPanic(func() { c.Nbsend(1) })\n \n \t// the value should have been discarded.\n \tif x := c.Recv(); x != 0 {\n \t\tprintln(\"test1: recv on closed got non-zero after send on closed:\", x, c.Impl())\n \t}\n \n \t// similarly Send.\n-\tshouldPanic(func(){c.Send(2)})\n+\tshouldPanic(func() { c.Send(2) })\n \tif x := c.Recv(); x != 0 {\n \t\tprintln(\"test1: recv on closed got non-zero after send on closed:\", x, c.Impl())\n \t}\n@@ -195,9 +264,12 @@ func closedasync() chan int {\n func main() {\n \ttest1(XChan(closedsync()))\n \ttest1(SChan(closedsync()))\n+\ttest1(SSChan(closedsync()))\n \n \ttestasync1(XChan(closedasync()))\n \ttestasync1(SChan(closedasync()))\n+\ttestasync1(SSChan(closedasync()))\n \ttestasync2(XChan(closedasync()))\n \ttestasync2(SChan(closedasync()))\n+\ttestasync2(SSChan(closedasync()))\n }"}, {"sha": "bf73163134d709cb41b4fdb97f0add621cd54bb0", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug069.go", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a19c584743458ee775ef5e0af5d0e32a465f06/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug069.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a19c584743458ee775ef5e0af5d0e32a465f06/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug069.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug069.go?ref=27a19c584743458ee775ef5e0af5d0e32a465f06", "patch": "@@ -6,15 +6,16 @@\n \n package main\n \n-func main(){\n-\tc := make(chan int);\n-\tok := false;\n-\tvar i int;\n-\n-\ti, ok = <-c;  // works\n-\t_, _ = i, ok;\n-\n-\tca := new([2]chan int);\n-\ti, ok = <-(ca[0]);  // fails: c.go:11: bad shape across assignment - cr=1 cl=2\n-\t_, _ = i, ok;\n+func main() {\n+\t//TODO(rsc): uncomment when this syntax is valid for receive+check closed\n+\t//\tc := make(chan int);\n+\t//\tok := false;\n+\t//\tvar i int;\n+\t//\n+\t//\ti, ok = <-c;  // works\n+\t//\t_, _ = i, ok;\n+\t//\n+\t//\tca := new([2]chan int);\n+\t//\ti, ok = <-(ca[0]);  // fails: c.go:11: bad shape across assignment - cr=1 cl=2\n+\t//\t_, _ = i, ok;\n }"}, {"sha": "8cb9c9990d9d3bf9d2cf5070a0b569278ea9fa77", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug196.go", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a19c584743458ee775ef5e0af5d0e32a465f06/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug196.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a19c584743458ee775ef5e0af5d0e32a465f06/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug196.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug196.go?ref=27a19c584743458ee775ef5e0af5d0e32a465f06", "patch": "@@ -13,11 +13,12 @@ var i int\n func multi() (int, int) { return 1, 2 }\n \n func xxx() {\n-\tvar c chan int\n-\tx, ok := <-c\n+\t//TODO(rsc): uncomment when this syntax is valid for receive+check closed\n+\t//\tvar c chan int\n+\t//\tx, ok := <-c\n \n \tvar m map[int]int\n-\tx, ok = m[1]\n+\tx, ok := m[1]\n \n \tvar i interface{}\n \tvar xx int"}, {"sha": "9affad043027a3e6cde34f0a05fcc7c5d515d056", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug234.go", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a19c584743458ee775ef5e0af5d0e32a465f06/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug234.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a19c584743458ee775ef5e0af5d0e32a465f06/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug234.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug234.go?ref=27a19c584743458ee775ef5e0af5d0e32a465f06", "patch": "@@ -7,16 +7,17 @@\n package main\n \n func main() {\n-\tc := make(chan int, 1)\n-\tc <- 100\n-\tx, ok := <-c\n-\tif x != 100 || !ok {\n-\t\tprintln(\"x=\", x, \" ok=\", ok, \" want 100, true\")\n-\t\tpanic(\"fail\")\n-\t}\n-\tx, ok = <-c\n-\tif x != 0 || ok {\n-\t\tprintln(\"x=\", x, \" ok=\", ok, \" want 0, false\")\n-\t\tpanic(\"fail\")\n-\t}\n+\t//TODO(rsc): uncomment when this syntax is valid for receive+check closed\n+\t//\tc := make(chan int, 1)\n+\t//\tc <- 100\n+\t//\tx, ok := <-c\n+\t//\tif x != 100 || !ok {\n+\t//\t\tprintln(\"x=\", x, \" ok=\", ok, \" want 100, true\")\n+\t//\t\tpanic(\"fail\")\n+\t//\t}\n+\t//\tx, ok = <-c\n+\t//\tif x != 0 || ok {\n+\t//\t\tprintln(\"x=\", x, \" ok=\", ok, \" want 0, false\")\n+\t//\t\tpanic(\"fail\")\n+\t//\t}\n }"}, {"sha": "ad1cef8df4302b49baa0f30cb699990b74283241", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug242.go", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a19c584743458ee775ef5e0af5d0e32a465f06/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug242.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a19c584743458ee775ef5e0af5d0e32a465f06/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug242.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug242.go?ref=27a19c584743458ee775ef5e0af5d0e32a465f06", "patch": "@@ -101,10 +101,13 @@ func main() {\n \n \tc := make(chan byte, 1)\n \tc <- 'C'\n+\t//TODO(rsc): uncomment when this syntax is valid for receive+check closed\n \t// 15          16\n-\t*f(), p1 = <-e1(c, 16)\n+\t//\t*f(), p1 = <-e1(c, 16)\n+\t*f(), p1 = <-e1(c, 16), true // delete uncommenting above\n \t// 17          18\n-\t*f(), p2 = <-e1(c, 18)\n+\t//\t*f(), p2 = <-e1(c, 18)\n+\t*f(), p2, _ = 0, false, e1(c, 18) // delete when uncommenting above\n \ta[17] += '0'\n \tif !p1 || p2 {\n \t\tprintln(\"bad chan check\", i, p1, p2)"}, {"sha": "1776313f05cea2de56c2cba1e61b7de4d5635d4b", "filename": "gcc/testsuite/go.test/test/named1.go", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a19c584743458ee775ef5e0af5d0e32a465f06/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnamed1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a19c584743458ee775ef5e0af5d0e32a465f06/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnamed1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnamed1.go?ref=27a19c584743458ee775ef5e0af5d0e32a465f06", "patch": "@@ -43,12 +43,9 @@ func main() {\n \t_, b = m[2] // ERROR \"cannot .* bool.*type Bool\"\n \tm[2] = 1, b // ERROR \"cannot use.*type Bool.*as type bool\"\n \n-\tb = c <- 1 // ERROR \"cannot use.*type bool.*type Bool\"\n-\t_ = b\n-\tasBool(c <- 1) // ERROR \"cannot use.*type bool.*as type Bool\"\n-\n-\t_, b = <-c // ERROR \"cannot .* bool.*type Bool\"\n-\t_ = b\n+\t////TODO(rsc): uncomment when this syntax is valid for receive+check closed\n+\t////\t_, b = <-c // ERROR \"cannot .* bool.*type Bool\"\n+\t////\t_ = b\n \n \tvar inter interface{}\n \t_, b = inter.(Map) // ERROR \"cannot .* bool.*type Bool\""}]}