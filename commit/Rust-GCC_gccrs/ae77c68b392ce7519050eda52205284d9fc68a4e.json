{"sha": "ae77c68b392ce7519050eda52205284d9fc68a4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU3N2M2OGIzOTJjZTc1MTkwNTBlZGE1MjIwNTI4NGQ5ZmM2OGE0ZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-22T06:53:11Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-22T06:53:11Z"}, "message": "[multiple changes]\n\n2010-06-22  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_eval.adb: Minor reformatting.\n\n2010-06-22  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_Conditional_Expression): Use\n\tExpression_With_Actions to clean up the code generated when folding\n\tconstant expressions.\n\n2010-06-22  Vincent Celier  <celier@adacore.com>\n\n\t* g-expect-vms.adb: Add new subprograms Free, First_Dead_Process and\n\tHas_Process.\n\nFrom-SVN: r161132", "tree": {"sha": "6dccee2db5513fb7349c7ab2ce471110df87f7f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dccee2db5513fb7349c7ab2ce471110df87f7f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae77c68b392ce7519050eda52205284d9fc68a4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae77c68b392ce7519050eda52205284d9fc68a4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae77c68b392ce7519050eda52205284d9fc68a4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae77c68b392ce7519050eda52205284d9fc68a4e/comments", "author": null, "committer": null, "parents": [{"sha": "47edeeab0f1802db436a50ff241b2f30200add54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47edeeab0f1802db436a50ff241b2f30200add54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47edeeab0f1802db436a50ff241b2f30200add54"}], "stats": {"total": 100, "additions": 87, "deletions": 13}, "files": [{"sha": "cf19f2e0b28577bcb48648d2d8692bcdc24b1ce9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae77c68b392ce7519050eda52205284d9fc68a4e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae77c68b392ce7519050eda52205284d9fc68a4e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ae77c68b392ce7519050eda52205284d9fc68a4e", "patch": "@@ -1,3 +1,18 @@\n+2010-06-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_eval.adb: Minor reformatting.\n+\n+2010-06-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Conditional_Expression): Use\n+\tExpression_With_Actions to clean up the code generated when folding\n+\tconstant expressions.\n+\n+2010-06-22  Vincent Celier  <celier@adacore.com>\n+\n+\t* g-expect-vms.adb: Add new subprograms Free, First_Dead_Process and\n+\tHas_Process.\n+\n 2010-06-22  Vincent Celier  <celier@adacore.com>\n \n \t* prj-nmsc.adb (Find_Sources): When a source from a multi-unit file is"}, {"sha": "a74ba4638039b4256731afb3f5c708ddab2dcf0e", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae77c68b392ce7519050eda52205284d9fc68a4e/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae77c68b392ce7519050eda52205284d9fc68a4e/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=ae77c68b392ce7519050eda52205284d9fc68a4e", "patch": "@@ -4053,8 +4053,25 @@ package body Exp_Ch4 is\n          end if;\n \n          Remove (Expr);\n-         Insert_Actions (N, Actions);\n-         Rewrite (N, Relocate_Node (Expr));\n+\n+         if Present (Actions) then\n+\n+            --  If we are not allowed to use Expression_With_Actions, just\n+            --  skip the optimization, it is not critical for correctness.\n+\n+            if not Use_Expression_With_Actions then\n+               goto Skip_Optimization;\n+            end if;\n+\n+            Rewrite (N,\n+              Make_Expression_With_Actions (Loc,\n+                Expression => Relocate_Node (Expr),\n+                Actions    => Actions));\n+            Analyze_And_Resolve (N, Typ);\n+\n+         else\n+            Rewrite (N, Relocate_Node (Expr));\n+         end if;\n \n          --  Note that the result is never static (legitimate cases of static\n          --  conditional expressions were folded in Sem_Eval).\n@@ -4063,6 +4080,8 @@ package body Exp_Ch4 is\n          return;\n       end if;\n \n+      <<Skip_Optimization>>\n+\n       --  If the type is limited or unconstrained, we expand as follows to\n       --  avoid any possibility of improper copies.\n "}, {"sha": "d57093c28d1ce1c714dbfce8387e4eb6b6f76117", "filename": "gcc/ada/g-expect-vms.adb", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae77c68b392ce7519050eda52205284d9fc68a4e/gcc%2Fada%2Fg-expect-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae77c68b392ce7519050eda52205284d9fc68a4e/gcc%2Fada%2Fg-expect-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-expect-vms.adb?ref=ae77c68b392ce7519050eda52205284d9fc68a4e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2002-2009, AdaCore                     --\n+--                     Copyright (C) 2002-2010, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -715,6 +715,24 @@ package body GNAT.Expect is\n         (Descriptor.Last_Match_Start .. Descriptor.Last_Match_End);\n    end Expect_Out_Match;\n \n+   ------------------------\n+   -- First_Dead_Process --\n+   ------------------------\n+\n+   function First_Dead_Process\n+     (Regexp : Multiprocess_Regexp_Array) return Natural is\n+   begin\n+      for R in Regexp'Range loop\n+         if Regexp (R).Descriptor /= null\n+           and then Regexp (R).Descriptor.Input_Fd = GNAT.OS_Lib.Invalid_FD\n+         then\n+            return R;\n+         end if;\n+      end loop;\n+\n+      return 0;\n+   end First_Dead_Process;\n+\n    -----------\n    -- Flush --\n    -----------\n@@ -770,6 +788,18 @@ package body GNAT.Expect is\n       end loop;\n    end Flush;\n \n+   ----------\n+   -- Free --\n+   ----------\n+\n+   procedure Free (Regexp : in out Multiprocess_Regexp) is\n+      procedure Unchecked_Free is new Ada.Unchecked_Deallocation\n+        (Process_Descriptor'Class, Process_Descriptor_Access);\n+   begin\n+      Unchecked_Free (Regexp.Descriptor);\n+      Free (Regexp.Regexp);\n+   end Free;\n+\n    ------------------------\n    -- Get_Command_Output --\n    ------------------------\n@@ -897,6 +927,15 @@ package body GNAT.Expect is\n       return Descriptor.Pid;\n    end Get_Pid;\n \n+   -----------------\n+   -- Has_Process --\n+   -----------------\n+\n+   function Has_Process (Regexp : Multiprocess_Regexp_Array) return Boolean is\n+   begin\n+      return Regexp /= (Regexp'Range => (null, null));\n+   end Has_Process;\n+\n    ---------------\n    -- Interrupt --\n    ---------------"}, {"sha": "6c8eb6639a5f82f82f0afe3c996acf747af33f45", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae77c68b392ce7519050eda52205284d9fc68a4e/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae77c68b392ce7519050eda52205284d9fc68a4e/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=ae77c68b392ce7519050eda52205284d9fc68a4e", "patch": "@@ -183,7 +183,7 @@ package body Sem_Eval is\n    procedure Test_Ambiguous_Operator (N : Node_Id);\n    --  Check whether an arithmetic operation with universal operands which\n    --  is a rewritten function call with an explicit scope indication is\n-   --  ambiguous:  P.\"+\" (1, 2) will be ambiguous if there is more than one\n+   --  ambiguous: P.\"+\" (1, 2) will be ambiguous if there is more than one\n    --  visible numeric type declared in P and the context does not impose a\n    --  type on the result (e.g. in the expression of a type conversion).\n \n@@ -1466,10 +1466,12 @@ package body Sem_Eval is\n       end if;\n \n       if (Etype (Right) = Universal_Integer\n-           or else Etype (Right) = Universal_Real)\n+            or else\n+          Etype (Right) = Universal_Real)\n         and then\n           (Etype (Left) = Universal_Integer\n-            or else Etype (Left) = Universal_Real)\n+            or else\n+           Etype (Left) = Universal_Real)\n       then\n          Test_Ambiguous_Operator (N);\n       end if;\n@@ -3412,7 +3414,8 @@ package body Sem_Eval is\n       end if;\n \n       if Etype (Right) = Universal_Integer\n-           or else Etype (Right) = Universal_Real\n+           or else\n+         Etype (Right) = Universal_Real\n       then\n          Test_Ambiguous_Operator (N);\n       end if;\n@@ -4730,9 +4733,9 @@ package body Sem_Eval is\n       Is_Int : constant Boolean := Is_Integer_Type (Etype (N));\n \n       Is_Fix : constant Boolean :=\n-        Nkind (N) in N_Binary_Op\n-        and then Nkind (Right_Opnd (N)) /= Nkind (Left_Opnd (N));\n-      --  a mixed-mode operation in this context indicates the\n+                 Nkind (N) in N_Binary_Op\n+                   and then Nkind (Right_Opnd (N)) /= Nkind (Left_Opnd (N));\n+      --  A mixed-mode operation in this context indicates the\n       --  presence of fixed-point type in the designated package.\n \n       E      : Entity_Id;\n@@ -4763,9 +4766,7 @@ package body Sem_Eval is\n \n          Typ1 := Empty;\n          E := First_Entity (Pack);\n-         while Present (E)\n-           and then E /= Priv_E\n-         loop\n+         while Present (E) and then E /= Priv_E loop\n             if Is_Numeric_Type (E)\n               and then Nkind (Parent (E)) /= N_Subtype_Declaration\n               and then Comes_From_Source (E)"}]}