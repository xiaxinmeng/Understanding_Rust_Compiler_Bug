{"sha": "a1dd66b108cba086f58448ccbe9bf57b0a342f9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFkZDY2YjEwOGNiYTA4NmY1ODQ0OGNjYmU5YmY1N2IwYTM0MmY5YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-24T09:45:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-24T09:45:40Z"}, "message": "i386: Add *setcc_hi_1* define_insn_and_split [PR97950]\n\nAs the following testcase shows, unlike char, int or long long sized\n__builtin_*_overflow{,_p}, for short sized one in most cases the ce1 pass\ndoesn't optimize the jo/jno or jc/jnc jumps with setting of a pseudo to 0/1\ninto seto/setc.  The reason is missing *setcc_hi_1* pattern.  The following\npatch implements it using mode iterators so that on i486 and pentium?\none can get the zero extension through and instead of movzbw.\n\n2020-11-24  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/97950\n\t* config/i386/i386.md (*setcc_si_1_and): Macroize into...\n\t(*setcc_<mode>_1_and): New define_insn_and_split with SWI24 iterator.\n\t(*setcc_si_1_movzbl): Macroize into...\n\t(*setcc_<mode>_1_movzbl): New define_insn_and_split with SWI24\n\titerator.\n\n\t* gcc.target/i386/pr97950.c: New test.", "tree": {"sha": "99ce7ab0567e177ed2422f49194689e11ee76b15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99ce7ab0567e177ed2422f49194689e11ee76b15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1dd66b108cba086f58448ccbe9bf57b0a342f9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1dd66b108cba086f58448ccbe9bf57b0a342f9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1dd66b108cba086f58448ccbe9bf57b0a342f9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1dd66b108cba086f58448ccbe9bf57b0a342f9a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4adfcea0a1b0c6dcaefddca3d5f45dd5403b1a80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4adfcea0a1b0c6dcaefddca3d5f45dd5403b1a80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4adfcea0a1b0c6dcaefddca3d5f45dd5403b1a80"}], "stats": {"total": 169, "additions": 161, "deletions": 8}, "files": [{"sha": "943a1c98a391a9dd4d7185dfe875038c87b7b114", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1dd66b108cba086f58448ccbe9bf57b0a342f9a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1dd66b108cba086f58448ccbe9bf57b0a342f9a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a1dd66b108cba086f58448ccbe9bf57b0a342f9a", "patch": "@@ -12714,34 +12714,34 @@\n   operands[2] = gen_lowpart (QImode, operands[0]);\n })\n \n-(define_insn_and_split \"*setcc_si_1_and\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=q\")\n-\t(match_operator:SI 1 \"ix86_comparison_operator\"\n+(define_insn_and_split \"*setcc_<mode>_1_and\"\n+  [(set (match_operand:SWI24 0 \"register_operand\" \"=q\")\n+\t(match_operator:SWI24 1 \"ix86_comparison_operator\"\n \t  [(reg FLAGS_REG) (const_int 0)]))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_PARTIAL_REG_STALL\n    && TARGET_ZERO_EXTEND_WITH_AND && optimize_function_for_speed_p (cfun)\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 2) (match_dup 1))\n-   (parallel [(set (match_dup 0) (zero_extend:SI (match_dup 2)))\n+   (parallel [(set (match_dup 0) (zero_extend:SWI24 (match_dup 2)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n {\n   operands[1] = shallow_copy_rtx (operands[1]);\n   PUT_MODE (operands[1], QImode);\n   operands[2] = gen_lowpart (QImode, operands[0]);\n })\n \n-(define_insn_and_split \"*setcc_si_1_movzbl\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=q\")\n-\t(match_operator:SI 1 \"ix86_comparison_operator\"\n+(define_insn_and_split \"*setcc_<mode>_1_movzbl\"\n+  [(set (match_operand:SWI24 0 \"register_operand\" \"=q\")\n+\t(match_operator:SWI24 1 \"ix86_comparison_operator\"\n \t  [(reg FLAGS_REG) (const_int 0)]))]\n   \"!TARGET_PARTIAL_REG_STALL\n    && (!TARGET_ZERO_EXTEND_WITH_AND || optimize_function_for_size_p (cfun))\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 2) (match_dup 1))\n-   (set (match_dup 0) (zero_extend:SI (match_dup 2)))]\n+   (set (match_dup 0) (zero_extend:SWI24 (match_dup 2)))]\n {\n   operands[1] = shallow_copy_rtx (operands[1]);\n   PUT_MODE (operands[1], QImode);"}, {"sha": "277311d9a4ea1db3d97133392231c6e02a7586a7", "filename": "gcc/testsuite/gcc.target/i386/pr97950.c", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1dd66b108cba086f58448ccbe9bf57b0a342f9a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97950.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1dd66b108cba086f58448ccbe9bf57b0a342f9a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97950.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97950.c?ref=a1dd66b108cba086f58448ccbe9bf57b0a342f9a", "patch": "@@ -0,0 +1,153 @@\n+/* PR target/95950 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=generic\" } */\n+/* { dg-final { scan-assembler-times \"\\tseta\\t\" 4 } } */\n+/* { dg-final { scan-assembler-times \"\\tseto\\t\" 16 } } */\n+/* { dg-final { scan-assembler-times \"\\tsetc\\t\" 4 } } */\n+/* { dg-final { scan-assembler-not \"\\tjn?a\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tjn?o\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tjn?c\\t\" } } */\n+\n+char\n+f1 (short a, short b)\n+{\n+  return __builtin_mul_overflow_p (a, b, (short) 0);\n+}\n+\n+char\n+f2 (short a, short b)\n+{\n+  return __builtin_add_overflow_p (a, b, (short) 0);\n+}\n+\n+char\n+f3 (short a, short b)\n+{\n+  return __builtin_sub_overflow_p (a, b, (short) 0);\n+}\n+\n+char\n+f4 (unsigned short a, unsigned short b)\n+{\n+  return __builtin_mul_overflow_p (a, b, (unsigned short) 0);\n+}\n+\n+char\n+f5 (unsigned short a, unsigned short b)\n+{\n+  return __builtin_add_overflow_p (a, b, (unsigned short) 0);\n+}\n+\n+char\n+f6 (unsigned short a, unsigned short b)\n+{\n+  return __builtin_sub_overflow_p (a, b, (unsigned short) 0);\n+}\n+\n+char\n+f7 (short a, short b)\n+{\n+  return __builtin_mul_overflow_p (a, b, (short) 0);\n+}\n+\n+char\n+f8 (short a, short b)\n+{\n+  return __builtin_add_overflow_p (a, b, (short) 0);\n+}\n+\n+char\n+f9 (short a, short b)\n+{\n+  return __builtin_sub_overflow_p (a, b, (short) 0);\n+}\n+\n+char\n+f10 (unsigned short a, unsigned short b)\n+{\n+  return __builtin_mul_overflow_p (a, b, (unsigned short) 0);\n+}\n+\n+char\n+f11 (unsigned short a, unsigned short b)\n+{\n+  return __builtin_add_overflow_p (a, b, (unsigned short) 0);\n+}\n+\n+char\n+f12 (unsigned short a, unsigned short b)\n+{\n+  return __builtin_sub_overflow_p (a, b, (unsigned short) 0);\n+}\n+\n+unsigned short\n+f13 (short a, short b)\n+{\n+  return __builtin_mul_overflow_p (a, b, (short) 0);\n+}\n+\n+unsigned short\n+f14 (short a, short b)\n+{\n+  return __builtin_add_overflow_p (a, b, (short) 0);\n+}\n+\n+unsigned short\n+f15 (short a, short b)\n+{\n+  return __builtin_sub_overflow_p (a, b, (short) 0);\n+}\n+\n+unsigned short\n+f16 (unsigned short a, unsigned short b)\n+{\n+  return __builtin_mul_overflow_p (a, b, (unsigned short) 0);\n+}\n+\n+unsigned short\n+f17 (unsigned short a, unsigned short b)\n+{\n+  return __builtin_add_overflow_p (a, b, (unsigned short) 0);\n+}\n+\n+unsigned short\n+f18 (unsigned short a, unsigned short b)\n+{\n+  return __builtin_sub_overflow_p (a, b, (unsigned short) 0);\n+}\n+\n+unsigned short\n+f19 (short a, short b)\n+{\n+  return __builtin_mul_overflow_p (a, b, (short) 0);\n+}\n+\n+unsigned short\n+f20 (short a, short b)\n+{\n+  return __builtin_add_overflow_p (a, b, (short) 0);\n+}\n+\n+unsigned short\n+f21 (short a, short b)\n+{\n+  return __builtin_sub_overflow_p (a, b, (short) 0);\n+}\n+\n+unsigned short\n+f22 (unsigned short a, unsigned short b)\n+{\n+  return __builtin_mul_overflow_p (a, b, (unsigned short) 0);\n+}\n+\n+unsigned short\n+f23 (unsigned short a, unsigned short b)\n+{\n+  return __builtin_add_overflow_p (a, b, (unsigned short) 0);\n+}\n+\n+unsigned short\n+f24 (unsigned short a, unsigned short b)\n+{\n+  return __builtin_sub_overflow_p (a, b, (unsigned short) 0);\n+}"}]}