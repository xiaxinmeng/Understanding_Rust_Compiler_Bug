{"sha": "094a14eff78e4f2a4830b80416642dd247e6ad8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk0YTE0ZWZmNzhlNGYyYTQ4MzBiODA0MTY2NDJkZDI0N2U2YWQ4ZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2010-11-24T16:33:14Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2010-11-24T16:33:14Z"}, "message": "tuple: Mark more constructors constexpr.\n\n2010-11-24  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/std/tuple: Mark more constructors constexpr.\n\t* include/bits/stl_pair.h: Same.\n\t* testsuite/20_util/tuple/requirements/dr801.cc: New.\n\t* testsuite/20_util/pair/requirements/dr801.cc: New.\n\t* testsuite/20_util/tuple/cons/constexpr.cc: Add cases for new\n\tconstexpr constructors.\n\t* testsuite/20_util/pair/cons/constexpr.cc: Same.\n\t* testsuite/20_util/pair/comparison_operators/constexpr.cc: New.\n\n\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust line number.\n\nFrom-SVN: r167118", "tree": {"sha": "fa31f22e39362968b11b217d2c9f0e344384479d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa31f22e39362968b11b217d2c9f0e344384479d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/094a14eff78e4f2a4830b80416642dd247e6ad8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/094a14eff78e4f2a4830b80416642dd247e6ad8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/094a14eff78e4f2a4830b80416642dd247e6ad8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/094a14eff78e4f2a4830b80416642dd247e6ad8e/comments", "author": null, "committer": null, "parents": [{"sha": "e0cbb51bee4a942b019971eb2282c478708e7208", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0cbb51bee4a942b019971eb2282c478708e7208", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0cbb51bee4a942b019971eb2282c478708e7208"}], "stats": {"total": 322, "additions": 251, "deletions": 71}, "files": [{"sha": "bf498c36ffc6ccb4aa693ec231c1032ca98e2284", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094a14eff78e4f2a4830b80416642dd247e6ad8e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094a14eff78e4f2a4830b80416642dd247e6ad8e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=094a14eff78e4f2a4830b80416642dd247e6ad8e", "patch": "@@ -1,3 +1,16 @@\n+2010-11-24  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/std/tuple: Mark more constructors constexpr.\n+\t* include/bits/stl_pair.h: Same.\n+\t* testsuite/20_util/tuple/requirements/dr801.cc: New.\n+\t* testsuite/20_util/pair/requirements/dr801.cc: New.\n+\t* testsuite/20_util/tuple/cons/constexpr.cc: Add cases for new\n+\tconstexpr constructors.\n+\t* testsuite/20_util/pair/cons/constexpr.cc: Same.\n+\t* testsuite/20_util/pair/comparison_operators/constexpr.cc: New.\n+\n+\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust line number.\n+\n 2010-11-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/30_threads/future/cons/constexpr.cc: Add dg-require*"}, {"sha": "c6753f6d5d9faff1b05a7e79db4d54ca9fafb065", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 57, "deletions": 52, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094a14eff78e4f2a4830b80416642dd247e6ad8e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094a14eff78e4f2a4830b80416642dd247e6ad8e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=094a14eff78e4f2a4830b80416642dd247e6ad8e", "patch": "@@ -98,72 +98,76 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       : first(), second() { }\n \n       /** Two objects may be passed to a @c pair constructor to be copied.  */\n-      pair(const _T1& __a, const _T2& __b)\n+      _GLIBCXX_CONSTEXPR pair(const _T1& __a, const _T2& __b)\n       : first(__a), second(__b) { }\n \n+      /** There is also a templated copy ctor for the @c pair class itself.  */\n+      template<class _U1, class _U2>\n+\t_GLIBCXX_CONSTEXPR pair(const pair<_U1, _U2>& __p)\n+\t: first(__p.first), second(__p.second) { }\n+\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      pair(const pair&) = default;\n+      constexpr pair(const pair&) = default;\n+\n+      // Implicit.\n+      // pair(pair&&) = default;\n \n       // DR 811.\n       template<class _U1, class = typename\n \t       std::enable_if<std::is_convertible<_U1, _T1>::value>::type>\n-        pair(_U1&& __x, const _T2& __y)\n-\t: first(std::forward<_U1>(__x)),\n-\t  second(__y) { }\n+\tpair(_U1&& __x, const _T2& __y)\n+\t: first(std::forward<_U1>(__x)), second(__y) { }\n \n       template<class _U2, class = typename\n \t       std::enable_if<std::is_convertible<_U2, _T2>::value>::type>\n-        pair(const _T1& __x, _U2&& __y)\n-\t: first(__x),\n-\t  second(std::forward<_U2>(__y)) { }\n+\tpair(const _T1& __x, _U2&& __y)\n+\t: first(__x), second(std::forward<_U2>(__y)) { }\n \n       template<class _U1, class _U2, class = typename\n \t       std::enable_if<std::is_convertible<_U1, _T1>::value\n \t\t\t      && std::is_convertible<_U2, _T2>::value>::type>\n-        pair(_U1&& __x, _U2&& __y)\n-\t: first(std::forward<_U1>(__x)),\n-\t  second(std::forward<_U2>(__y)) { }\n+\tpair(_U1&& __x, _U2&& __y)\n+\t: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }\n \n-      template<class... _Args1, class... _Args2>\n-        pair(piecewise_construct_t,\n-\t     tuple<_Args1...> __first_args,\n-\t     tuple<_Args2...> __second_args)\n-\t: first(__cons<first_type>(std::move(__first_args))),\n-\t  second(__cons<second_type>(std::move(__second_args))) { }\n-#endif\n-\n-      /** There is also a templated copy ctor for the @c pair class itself.  */\n       template<class _U1, class _U2>\n-        pair(const pair<_U1, _U2>& __p)\n-\t: first(__p.first),\n-\t  second(__p.second) { }\n-\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      template<class _U1, class _U2>\n-        pair(pair<_U1, _U2>&& __p)\n+\tpair(pair<_U1, _U2>&& __p)\n \t: first(std::forward<_U1>(__p.first)),\n \t  second(std::forward<_U2>(__p.second)) { }\n \n+      template<class... _Args1, class... _Args2>\n+\tpair(piecewise_construct_t,\n+\t     tuple<_Args1...> __first, tuple<_Args2...> __second)\n+\t: first(__cons<first_type>(std::move(__first))),\n+\t  second(__cons<second_type>(std::move(__second))) { }\n+\n+      pair&\n+      operator=(const pair& __p)\n+      {\n+\tfirst = __p.first;\n+\tsecond = __p.second;\n+\treturn *this;\n+      }\n+\n       pair&\n       operator=(pair&& __p)\n-      { \n+      {\n \tfirst = std::move(__p.first);\n \tsecond = std::move(__p.second);\n \treturn *this;\n       }\n \n       template<class _U1, class _U2>\n-        pair&\n-        operator=(const pair<_U1, _U2>& __p)\n+\tpair&\n+\toperator=(const pair<_U1, _U2>& __p)\n \t{\n \t  first = __p.first;\n \t  second = __p.second;\n \t  return *this;\n \t}\n \n       template<class _U1, class _U2>\n-        pair&\n-        operator=(pair<_U1, _U2>&& __p)\n+\tpair&\n+\toperator=(pair<_U1, _U2>&& __p)\n \t{\n \t  first = std::move(__p.first);\n \t  second = std::move(__p.second);\n@@ -175,54 +179,54 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       {\n \tusing std::swap;\n \tswap(first, __p.first);\n-\tswap(second, __p.second);\t\n+\tswap(second, __p.second);\n       }\n \n     private:\n       template<typename _Tp, typename... _Args>\n-        static _Tp\n-        __cons(tuple<_Args...>&&);\n+\tstatic _Tp\n+\t__cons(tuple<_Args...>&&);\n \n       template<typename _Tp, typename... _Args, int... _Indexes>\n-        static _Tp\n-        __do_cons(tuple<_Args...>&&, const _Index_tuple<_Indexes...>&);\n+\tstatic _Tp\n+\t__do_cons(tuple<_Args...>&&, const _Index_tuple<_Indexes...>&);\n #endif\n     };\n \n   /// Two pairs of the same type are equal iff their members are equal.\n   template<class _T1, class _T2>\n-    inline bool\n+    inline _GLIBCXX_CONSTEXPR bool\n     operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)\n     { return __x.first == __y.first && __x.second == __y.second; }\n \n   /// <http://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>\n   template<class _T1, class _T2>\n-    inline bool\n+    inline _GLIBCXX_CONSTEXPR bool\n     operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)\n     { return __x.first < __y.first\n \t     || (!(__y.first < __x.first) && __x.second < __y.second); }\n \n   /// Uses @c operator== to find the result.\n   template<class _T1, class _T2>\n-    inline bool\n+    inline _GLIBCXX_CONSTEXPR bool\n     operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)\n     { return !(__x == __y); }\n \n   /// Uses @c operator< to find the result.\n   template<class _T1, class _T2>\n-    inline bool\n+    inline _GLIBCXX_CONSTEXPR bool\n     operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)\n     { return __y < __x; }\n \n   /// Uses @c operator< to find the result.\n   template<class _T1, class _T2>\n-    inline bool\n+    inline _GLIBCXX_CONSTEXPR bool\n     operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)\n     { return !(__y < __x); }\n \n   /// Uses @c operator< to find the result.\n   template<class _T1, class _T2>\n-    inline bool\n+    inline _GLIBCXX_CONSTEXPR bool\n     operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)\n     { return !(__x < __y); }\n \n@@ -248,22 +252,23 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    */\n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // 181.  make_pair() unintended behavior\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n-  template<class _T1, class _T2>\n-    inline pair<_T1, _T2>\n-    make_pair(_T1 __x, _T2 __y)\n-    { return pair<_T1, _T2>(__x, __y); }\n-#else\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n   // NB: DR 706.\n   template<class _T1, class _T2>\n     inline pair<typename __decay_and_strip<_T1>::__type,\n \t\ttypename __decay_and_strip<_T2>::__type>\n     make_pair(_T1&& __x, _T2&& __y)\n     {\n-      return pair<typename __decay_and_strip<_T1>::__type,\n-\t          typename __decay_and_strip<_T2>::__type>\n-\t(std::forward<_T1>(__x), std::forward<_T2>(__y));\n+      typedef typename __decay_and_strip<_T1>::__type __ds_type1;\n+      typedef typename __decay_and_strip<_T2>::__type __ds_type2;\n+      typedef pair<__ds_type1, __ds_type2> \t      __pair_type;\n+      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));\n     }\n+#else\n+  template<class _T1, class _T2>\n+    inline pair<_T1, _T2>\n+    make_pair(_T1 __x, _T2 __y)\n+    { return pair<_T1, _T2>(__x, __y); }\n #endif\n \n _GLIBCXX_END_NAMESPACE"}, {"sha": "df9ef1d1694b81f4fccd6ccd733ec1c10c59ed07", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094a14eff78e4f2a4830b80416642dd247e6ad8e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094a14eff78e4f2a4830b80416642dd247e6ad8e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=094a14eff78e4f2a4830b80416642dd247e6ad8e", "patch": "@@ -67,7 +67,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       constexpr _Head_base()\n       : _Head() { }\n \n-      _Head_base(const _Head& __h)\n+      constexpr _Head_base(const _Head& __h)\n       : _Head(__h) { }\n \n       template<typename _UHead>\n@@ -77,7 +77,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _Head&       _M_head()       { return *this; }\n       const _Head& _M_head() const { return *this; }\n     \n-      void _M_swap_impl(_Head&) { /* no-op */ }\n+      void \n+      _M_swap_impl(_Head&) { /* no-op */ }\n     };\n \n   template<std::size_t _Idx, typename _Head>\n@@ -86,7 +87,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       constexpr _Head_base()\n       : _M_head_impl() { }\n \n-      _Head_base(const _Head& __h)\n+      constexpr _Head_base(const _Head& __h)\n       : _M_head_impl(__h) { }\n \n       template<typename _UHead>\n@@ -151,7 +152,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       : _Inherited(), _Base() { }\n \n       explicit \n-      _Tuple_impl(const _Head& __head, const _Tail&... __tail)\n+      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)\n       : _Inherited(__tail...), _Base(__head) { }\n \n       template<typename _UHead, typename... _UTail> \n@@ -160,10 +161,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t: _Inherited(std::forward<_UTail>(__tail)...),\n \t  _Base(std::forward<_UHead>(__head)) { }\n \n-      _Tuple_impl(const _Tuple_impl&) = default;\n+      constexpr _Tuple_impl(const _Tuple_impl&) = default;\n \n       _Tuple_impl(_Tuple_impl&& __in)\n-      : _Inherited(std::move(__in._M_tail())),\n+      : _Inherited(std::move(__in._M_tail())), \n \t_Base(std::forward<_Head>(__in._M_head())) { }\n \n       template<typename... _UElements>\n@@ -229,7 +230,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       : _Inherited() { }\n \n       explicit\n-      tuple(const _Elements&... __elements)\n+      constexpr tuple(const _Elements&... __elements)\n       : _Inherited(__elements...) { }\n \n       template<typename... _UElements, typename = typename\n@@ -239,7 +240,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         tuple(_UElements&&... __elements)\n \t: _Inherited(std::forward<_UElements>(__elements)...) {\t}\n \n-      tuple(const tuple&) = default;\n+      constexpr tuple(const tuple&) = default;\n \n       tuple(tuple&& __in)\n       : _Inherited(static_cast<_Inherited&&>(__in)) { }\n@@ -314,15 +315,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       : _Inherited() { }\n \n       explicit\n-      tuple(const _T1& __a1, const _T2& __a2)\n+      constexpr tuple(const _T1& __a1, const _T2& __a2)\n       : _Inherited(__a1, __a2) { }\n \n       template<typename _U1, typename _U2>\n         explicit\n         tuple(_U1&& __a1, _U2&& __a2)\n \t: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }\n \n-      tuple(const tuple&) = default;\n+      constexpr tuple(const tuple&) = default;\n \n       tuple(tuple&& __in)\n       : _Inherited(static_cast<_Inherited&&>(__in)) { }\n@@ -412,7 +413,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       : _Inherited() { }\n \n       explicit\n-      tuple(const _T1& __a1)\n+      constexpr tuple(const _T1& __a1)\n       : _Inherited(__a1) { }\n \n       template<typename _U1, typename = typename\n@@ -421,14 +422,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         tuple(_U1&& __a1)\n \t: _Inherited(std::forward<_U1>(__a1)) { }\n \n-      tuple(const tuple&) = default;\n+      constexpr tuple(const tuple&) = default;\n \n       tuple(tuple&& __in)\n       : _Inherited(static_cast<_Inherited&&>(__in)) { }\n \n       template<typename _U1>\n         tuple(const tuple<_U1>& __in)\n-        : _Inherited(static_cast<const _Tuple_impl<0, _U1>&>(__in)) { }\n+\t: _Inherited(static_cast<const _Tuple_impl<0, _U1>&>(__in)) { }\n \n       template<typename _U1>\n         tuple(tuple<_U1>&& __in)"}, {"sha": "d5dc6e4e1df8a219339c8adada74643d74d58955", "filename": "libstdc++-v3/testsuite/20_util/pair/comparison_operators/constexpr.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094a14eff78e4f2a4830b80416642dd247e6ad8e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcomparison_operators%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094a14eff78e4f2a4830b80416642dd247e6ad8e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcomparison_operators%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcomparison_operators%2Fconstexpr.cc?ref=094a14eff78e4f2a4830b80416642dd247e6ad8e", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <utility>\n+#include <testsuite_common_types.h>\n+\n+int main()\n+{\n+  __gnu_test::constexpr_comparison_operators test;\n+  test.operator()<std::pair<int, int>>();\n+  return 0;\n+}"}, {"sha": "1c854627ed4c368adf09465bc82865113a5f3eb7", "filename": "libstdc++-v3/testsuite/20_util/pair/cons/constexpr.cc", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094a14eff78e4f2a4830b80416642dd247e6ad8e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcons%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094a14eff78e4f2a4830b80416642dd247e6ad8e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcons%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcons%2Fconstexpr.cc?ref=094a14eff78e4f2a4830b80416642dd247e6ad8e", "patch": "@@ -23,7 +23,17 @@\n \n int main()\n {\n-  __gnu_test::constexpr_default_constructible test;\n-  test.operator()<std::pair<int, int>>();\n+  __gnu_test::constexpr_default_constructible test1;\n+  test1.operator()<std::pair<int, int>>();\n+\n+  __gnu_test::constexpr_single_value_constructible test2;\n+  test2.operator()<std::pair<int, int>, std::pair<int, int>>();\n+  test2.operator()<std::pair<int, int>, std::pair<short, short>>();\n+\n+  // test 3\n+  const int i1(129);\n+  const int i2(6);\n+  constexpr std::pair<int, int> p3(i1, i2);\n+\n   return 0;\n }"}, {"sha": "36d380dcf879715ac9b5e50de338dfa453955f89", "filename": "libstdc++-v3/testsuite/20_util/pair/requirements/dr801.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094a14eff78e4f2a4830b80416642dd247e6ad8e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Frequirements%2Fdr801.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094a14eff78e4f2a4830b80416642dd247e6ad8e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Frequirements%2Fdr801.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Frequirements%2Fdr801.cc?ref=094a14eff78e4f2a4830b80416642dd247e6ad8e", "patch": "@@ -0,0 +1,52 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <memory>\n+#include <type_traits>\n+\n+// DR 801, pair and tuple vs. \"passed in registers\"\n+void test_trivial()\n+{\n+  // PODType, TType, NType, SLType, LType, NLType, LTypeDerived\n+  typedef std::pair<int, int> pair_type;\n+  // static_assert(std::is_literal_type<pair_type>::value, \"! literal\");\n+  static_assert(std::has_trivial_copy_constructor<pair_type>::value,\n+\t\t\"! triv copy\");\n+  static_assert(std::has_trivial_destructor<pair_type>::value,\n+\t\t\"! triv destructor\");\n+  // static_assert(std::is_standard_layout<pair_type>::value,\n+  //               \"! standard layout\");\n+\n+  // Negative\n+  /*\n+  static_assert(std::has_trivial_default_constructor<pair_type>::value,\n+\t\t\"! triv default\");\n+  static_assert(std::has_trivial_copy_assign<pair_type>::value,\n+\t\t\"! triv assign\");\n+  static_assert(std::is_trivial<pair_type>::value, \"! triv\");\n+  static_assert(std::is_pod<pair_type>::value, \"! pod\");\n+  */\n+}\n+\n+int main()\n+{\n+  test_trivial();\n+  return 0;\n+}"}, {"sha": "b5eba73fdacb7e8d00cf23b8f46b0c130add0198", "filename": "libstdc++-v3/testsuite/20_util/tuple/cons/constexpr.cc", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094a14eff78e4f2a4830b80416642dd247e6ad8e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094a14eff78e4f2a4830b80416642dd247e6ad8e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fconstexpr.cc?ref=094a14eff78e4f2a4830b80416642dd247e6ad8e", "patch": "@@ -23,7 +23,25 @@\n \n int main()\n {\n-  __gnu_test::constexpr_default_constructible test;\n-  test.operator()<std::tuple<int, int>>();\n+  __gnu_test::constexpr_default_constructible test1;\n+  test1.operator()<std::tuple<int, int>>();\n+\n+  __gnu_test::constexpr_single_value_constructible test2;\n+  test2.operator()<std::tuple<int, int>, std::tuple<int, int>>();\n+  //  test2.operator()<std::tuple<int, int>, std::pair<short, short>>();\n+  //  test2.operator()<std::tuple<int>, std::tuple<short>>();\n+  //  test2.operator()<std::tuple<int, int>, std::tuple<short, short>>();\n+\n+  // test 3\n+  const int i1(129);\n+  const int i2(6);\n+  constexpr std::tuple<int, int> p3(i1, i2);\n+\n+  // test 4\n+  const int i3(415);\n+  const int i4(550);\n+  const int i5(6414);\n+  constexpr std::tuple<int, int, int, int, int> p4(i1, i2, i3, i4, i5);\n+\n   return 0;\n }"}, {"sha": "fd21b9ee5c5a516d7a6a9c41a5038170aac33b63", "filename": "libstdc++-v3/testsuite/20_util/tuple/requirements/dr801.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094a14eff78e4f2a4830b80416642dd247e6ad8e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Frequirements%2Fdr801.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094a14eff78e4f2a4830b80416642dd247e6ad8e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Frequirements%2Fdr801.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Frequirements%2Fdr801.cc?ref=094a14eff78e4f2a4830b80416642dd247e6ad8e", "patch": "@@ -0,0 +1,52 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tuple>\n+#include <type_traits>\n+\n+// DR 801, pair and tuple vs. \"passed in registers\"\n+void test_trivial()\n+{\n+  // PODType, TType, NType, SLType, LType, NLType, LTypeDerived\n+  typedef std::tuple<int, int> tuple_type;\n+  // static_assert(std::is_literal_type<tuple_type>::value, \"! literal\");\n+  static_assert(std::has_trivial_copy_constructor<tuple_type>::value,\n+\t\t\"! triv copy\");\n+  static_assert(std::has_trivial_destructor<tuple_type>::value,\n+\t\t\"! triv destructor\");\n+  // static_assert(std::is_standard_layout<tuple_type>::value,\n+  //\t\t   \"! standard layout\");\n+\n+  // Negative\n+  /*\n+  static_assert(std::has_trivial_default_constructor<tuple_type>::value,\n+\t\t\"! triv default\");\n+  static_assert(std::has_trivial_copy_assign<tuple_type>::value,\n+\t\t\"! triv assign\");\n+  static_assert(std::is_trivial<tuple_type>::value, \"! triv\");\n+  static_assert(std::is_pod<tuple_type>::value, \"! pod\");\n+  */\n+}\n+\n+int main()\n+{\n+  test_trivial();\n+  return 0;\n+}"}, {"sha": "7f5b109b61effa4d2e2f1c6976c735d871c8eaf6", "filename": "libstdc++-v3/testsuite/20_util/weak_ptr/comparison/cmp_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094a14eff78e4f2a4830b80416642dd247e6ad8e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094a14eff78e4f2a4830b80416642dd247e6ad8e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc?ref=094a14eff78e4f2a4830b80416642dd247e6ad8e", "patch": "@@ -44,8 +44,8 @@ main()\n // { dg-warning \"note\" \"\" { target *-*-* } 350 }\n // { dg-warning \"note\" \"\" { target *-*-* } 1082 }\n // { dg-warning \"note\" \"\" { target *-*-* } 465 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 580 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 581 }\n // { dg-warning \"note\" \"\" { target *-*-* } 1027 }\n // { dg-warning \"note\" \"\" { target *-*-* } 340 }\n // { dg-warning \"note\" \"\" { target *-*-* } 290 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 201 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 205 }"}]}