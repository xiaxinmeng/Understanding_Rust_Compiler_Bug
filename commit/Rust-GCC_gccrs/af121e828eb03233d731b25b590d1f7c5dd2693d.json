{"sha": "af121e828eb03233d731b25b590d1f7c5dd2693d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYxMjFlODI4ZWIwMzIzM2Q3MzFiMjViNTkwZDFmN2M1ZGQyNjkzZA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-11-09T15:45:59Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-11-09T15:45:59Z"}, "message": "Fix memory leaks and use a pool_allocator\n\n\t* gcc.c (record_temp_file): Release name string.\n\t* ifcvt.c (noce_convert_multiple_sets): Use auto_vec instead\n\tof vec.\n\t* lra-lives.c (free_live_range_list): Utilize\n\tlra_live_range_pool for allocation and deallocation.\n\t(create_live_range): Likewise.\n\t(copy_live_range): Likewise.\n\t(lra_merge_live_ranges): Likewise.\n\t(remove_some_program_points_and_update_live_ranges): Likewise.\n\t(lra_create_live_ranges_1): Release point_freq_vec that can\n\tbe not freed from previous iteration of the function.\n\t* tree-eh.c (lower_try_finally_switch): Use auto_vec instead of\n\tvec.\n\t* tree-sra.c (sra_deinitialize): Release all vectors in\n\tbase_access_vec.\n\t* tree-ssa-dom.c (free_dom_edge_info): Make the function extern.\n\t* tree-ssa-threadupdate.c (remove_ctrl_stmt_and_useless_edges):\n\tRelease edge_info for a removed edge.\n\t(thread_through_all_blocks): Free region vector.\n\t* tree-ssa.h (free_dom_edge_info): Declare function extern.\n\nFrom-SVN: r230027", "tree": {"sha": "a60b2807573bbeab492c0ef1ec1bb75bcd6b8efa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a60b2807573bbeab492c0ef1ec1bb75bcd6b8efa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af121e828eb03233d731b25b590d1f7c5dd2693d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af121e828eb03233d731b25b590d1f7c5dd2693d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af121e828eb03233d731b25b590d1f7c5dd2693d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af121e828eb03233d731b25b590d1f7c5dd2693d/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fc402eec4b203f2fba90abd57805174d4101d618", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc402eec4b203f2fba90abd57805174d4101d618", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc402eec4b203f2fba90abd57805174d4101d618"}], "stats": {"total": 71, "additions": 55, "deletions": 16}, "files": [{"sha": "1d60b7084e07257d88f424d617e1878ee4180dad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af121e828eb03233d731b25b590d1f7c5dd2693d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af121e828eb03233d731b25b590d1f7c5dd2693d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af121e828eb03233d731b25b590d1f7c5dd2693d", "patch": "@@ -1,3 +1,26 @@\n+2015-11-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.c (record_temp_file): Release name string.\n+\t* ifcvt.c (noce_convert_multiple_sets): Use auto_vec instead\n+\tof vec.\n+\t* lra-lives.c (free_live_range_list): Utilize\n+\tlra_live_range_pool for allocation and deallocation.\n+\t(create_live_range): Likewise.\n+\t(copy_live_range): Likewise.\n+\t(lra_merge_live_ranges): Likewise.\n+\t(remove_some_program_points_and_update_live_ranges): Likewise.\n+\t(lra_create_live_ranges_1): Release point_freq_vec that can\n+\tbe not freed from previous iteration of the function.\n+\t* tree-eh.c (lower_try_finally_switch): Use auto_vec instead of\n+\tvec.\n+\t* tree-sra.c (sra_deinitialize): Release all vectors in\n+\tbase_access_vec.\n+\t* tree-ssa-dom.c (free_dom_edge_info): Make the function extern.\n+\t* tree-ssa-threadupdate.c (remove_ctrl_stmt_and_useless_edges):\n+\tRelease edge_info for a removed edge.\n+\t(thread_through_all_blocks): Free region vector.\n+\t* tree-ssa.h (free_dom_edge_info): Declare function extern.\n+\n 2015-11-09  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \t* optabs.c (expand_vec_cond_expr): Always get sign from type."}, {"sha": "8bbf5be831a1c65271e997276e0555854eddc88a", "filename": "gcc/gcc.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af121e828eb03233d731b25b590d1f7c5dd2693d/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af121e828eb03233d731b25b590d1f7c5dd2693d/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=af121e828eb03233d731b25b590d1f7c5dd2693d", "patch": "@@ -2345,7 +2345,10 @@ record_temp_file (const char *filename, int always_delete, int fail_delete)\n       struct temp_file *temp;\n       for (temp = always_delete_queue; temp; temp = temp->next)\n \tif (! filename_cmp (name, temp->name))\n-\t  goto already1;\n+\t  {\n+\t    free (name);\n+\t    goto already1;\n+\t  }\n \n       temp = XNEW (struct temp_file);\n       temp->next = always_delete_queue;"}, {"sha": "c830b3cb8c4280586b09e63c7f6340c0b6b22709", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af121e828eb03233d731b25b590d1f7c5dd2693d/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af121e828eb03233d731b25b590d1f7c5dd2693d/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=af121e828eb03233d731b25b590d1f7c5dd2693d", "patch": "@@ -3101,12 +3101,12 @@ noce_convert_multiple_sets (struct noce_if_info *if_info)\n   rtx_code cond_code = GET_CODE (cond);\n \n   /* The true targets for a conditional move.  */\n-  vec<rtx> targets = vNULL;\n+  auto_vec<rtx> targets;\n   /* The temporaries introduced to allow us to not consider register\n      overlap.  */\n-  vec<rtx> temporaries = vNULL;\n+  auto_vec<rtx> temporaries;\n   /* The insns we've emitted.  */\n-  vec<rtx_insn *> unmodified_insns = vNULL;\n+  auto_vec<rtx_insn *> unmodified_insns;\n   int count = 0;\n \n   FOR_BB_INSNS (then_bb, insn)"}, {"sha": "9453759a521c45fea00a2e9f87bb6ca87fa6690f", "filename": "gcc/lra-lives.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af121e828eb03233d731b25b590d1f7c5dd2693d/gcc%2Flra-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af121e828eb03233d731b25b590d1f7c5dd2693d/gcc%2Flra-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-lives.c?ref=af121e828eb03233d731b25b590d1f7c5dd2693d", "patch": "@@ -103,7 +103,7 @@ free_live_range_list (lra_live_range_t lr)\n   while (lr != NULL)\n     {\n       next = lr->next;\n-      delete lr;\n+      lra_live_range_pool.remove (lr);\n       lr = next;\n     }\n }\n@@ -112,7 +112,7 @@ free_live_range_list (lra_live_range_t lr)\n static lra_live_range_t\n create_live_range (int regno, int start, int finish, lra_live_range_t next)\n {\n-  lra_live_range_t p = new lra_live_range;\n+  lra_live_range_t p = lra_live_range_pool.allocate ();\n   p->regno = regno;\n   p->start = start;\n   p->finish = finish;\n@@ -124,7 +124,7 @@ create_live_range (int regno, int start, int finish, lra_live_range_t next)\n static lra_live_range_t\n copy_live_range (lra_live_range_t r)\n {\n-  return new lra_live_range (*r);\n+  return new (lra_live_range_pool) lra_live_range (*r);\n }\n \n /* Copy live range list given by its head R and return the result.  */\n@@ -167,7 +167,7 @@ lra_merge_live_ranges (lra_live_range_t r1, lra_live_range_t r2)\n \t  r1->start = r2->start;\n \t  lra_live_range_t temp = r2;\n \t  r2 = r2->next;\n-\t  delete temp;\n+\t  lra_live_range_pool.remove (temp);\n \t}\n       else\n \t{\n@@ -1081,7 +1081,7 @@ remove_some_program_points_and_update_live_ranges (void)\n \t\t}\n \t      prev_r->start = r->start;\n \t      prev_r->next = next_r;\n-\t      delete r;\n+\t      lra_live_range_pool.remove (r);\n \t    }\n \t}\n     }\n@@ -1240,7 +1240,9 @@ lra_create_live_ranges_1 (bool all_p, bool dead_insn_p)\n   dead_set = sparseset_alloc (max_regno);\n   unused_set = sparseset_alloc (max_regno);\n   curr_point = 0;\n-  point_freq_vec.create (get_max_uid () * 2);\n+  unsigned new_length = get_max_uid () * 2;\n+  if (point_freq_vec.length () < new_length)\n+    point_freq_vec.safe_grow (new_length);\n   lra_point_freq = point_freq_vec.address ();\n   int *post_order_rev_cfg = XNEWVEC (int, last_basic_block_for_fn (cfun));\n   int n_blocks_inverted = inverted_post_order_compute (post_order_rev_cfg);"}, {"sha": "9f68f31d09149fd9b74ec91e6614b6cb1d77ef59", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af121e828eb03233d731b25b590d1f7c5dd2693d/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af121e828eb03233d731b25b590d1f7c5dd2693d/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=af121e828eb03233d731b25b590d1f7c5dd2693d", "patch": "@@ -1362,7 +1362,7 @@ lower_try_finally_switch (struct leh_state *state, struct leh_tf_state *tf)\n   int return_index, eh_index, fallthru_index;\n   int nlabels, ndests, j, last_case_index;\n   tree last_case;\n-  vec<tree> case_label_vec;\n+  auto_vec<tree> case_label_vec;\n   gimple_seq switch_body = NULL;\n   gimple *x;\n   geh_else *eh_else;"}, {"sha": "30aee19aae746377ebd38eac877d9dd4d845463e", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af121e828eb03233d731b25b590d1f7c5dd2693d/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af121e828eb03233d731b25b590d1f7c5dd2693d/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=af121e828eb03233d731b25b590d1f7c5dd2693d", "patch": "@@ -674,6 +674,12 @@ sra_deinitialize (void)\n   assign_link_pool.release ();\n   obstack_free (&name_obstack, NULL);\n \n+  /* TODO: hash_map does not support traits that can release\n+     value type of the hash_map.  */\n+  for (hash_map<tree, auto_vec<access_p> >::iterator it =\n+       base_access_vec->begin (); it != base_access_vec->end (); ++it)\n+    (*it).second.release ();\n+\n   delete base_access_vec;\n }\n "}, {"sha": "5cb26441b5153da9a589e189c42489fc9ed0103c", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af121e828eb03233d731b25b590d1f7c5dd2693d/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af121e828eb03233d731b25b590d1f7c5dd2693d/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=af121e828eb03233d731b25b590d1f7c5dd2693d", "patch": "@@ -121,8 +121,8 @@ static void dump_dominator_optimization_stats (FILE *file,\n \n /* Free the edge_info data attached to E, if it exists.  */\n \n-static void\n-free_edge_info (edge e)\n+void\n+free_dom_edge_info (edge e)\n {\n   struct edge_info *edge_info = (struct edge_info *)e->aux;\n \n@@ -142,7 +142,7 @@ allocate_edge_info (edge e)\n   struct edge_info *edge_info;\n \n   /* Free the old one, if it exists.  */\n-  free_edge_info (e);\n+  free_dom_edge_info (e);\n \n   edge_info = XCNEW (struct edge_info);\n \n@@ -167,7 +167,7 @@ free_all_edge_infos (void)\n     {\n       FOR_EACH_EDGE (e, ei, bb->preds)\n         {\n-\t  free_edge_info (e);\n+\t  free_dom_edge_info (e);\n \t  e->aux = NULL;\n \t}\n     }"}, {"sha": "c527206409a6eb46ce2a1e9cc1ce00a2cbd02d82", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af121e828eb03233d731b25b590d1f7c5dd2693d/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af121e828eb03233d731b25b590d1f7c5dd2693d/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=af121e828eb03233d731b25b590d1f7c5dd2693d", "patch": "@@ -290,7 +290,10 @@ remove_ctrl_stmt_and_useless_edges (basic_block bb, basic_block dest_bb)\n   for (ei = ei_start (bb->succs); (e = ei_safe_edge (ei)); )\n     {\n       if (e->dest != dest_bb)\n-\tremove_edge (e);\n+\t{\n+\t  free_dom_edge_info (e);\n+\t  remove_edge (e);\n+\t}\n       else\n \tei_next (&ei);\n     }\n@@ -2522,6 +2525,7 @@ thread_through_all_blocks (bool may_peel_loop_headers)\n \n       delete_jump_thread_path (path);\n       paths.unordered_remove (i);\n+      free (region);\n     }\n \n   /* Remove from PATHS all the jump-threads starting with an edge already"}, {"sha": "e0eb3f5c7244fb190082e6abc99b63627cf80f93", "filename": "gcc/tree-ssa-threadupdate.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af121e828eb03233d731b25b590d1f7c5dd2693d/gcc%2Ftree-ssa-threadupdate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af121e828eb03233d731b25b590d1f7c5dd2693d/gcc%2Ftree-ssa-threadupdate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.h?ref=af121e828eb03233d731b25b590d1f7c5dd2693d", "patch": "@@ -46,4 +46,5 @@ extern void register_jump_thread (vec <class jump_thread_edge *> *);\n extern void remove_jump_threads_including (edge);\n extern void delete_jump_thread_path (vec <class jump_thread_edge *> *);\n extern void remove_ctrl_stmt_and_useless_edges (basic_block, basic_block);\n+extern void free_dom_edge_info (edge);\n #endif"}]}