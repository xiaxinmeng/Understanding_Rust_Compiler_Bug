{"sha": "fbf53020b5a62deb6f105aaca0b62906b8fe49ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJmNTMwMjBiNWE2MmRlYjZmMTA1YWFjYTBiNjI5MDZiOGZlNDllYQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-01-17T08:13:09Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-01-17T08:13:09Z"}, "message": "tree.c (hash_chainon): Remove.\n\n\t* tree.c (hash_chainon): Remove.\n\t* cp-tree.h: Remove the corresponding prototypes.\n\nFrom-SVN: r93757", "tree": {"sha": "f3bbea103c06b971c651934d5f96ea6f2e852243", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3bbea103c06b971c651934d5f96ea6f2e852243"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbf53020b5a62deb6f105aaca0b62906b8fe49ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbf53020b5a62deb6f105aaca0b62906b8fe49ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbf53020b5a62deb6f105aaca0b62906b8fe49ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbf53020b5a62deb6f105aaca0b62906b8fe49ea/comments", "author": null, "committer": null, "parents": [{"sha": "2e6da5d7da73a62dec7c48d008bd2d4045546aa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e6da5d7da73a62dec7c48d008bd2d4045546aa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e6da5d7da73a62dec7c48d008bd2d4045546aa0"}], "stats": {"total": 19, "additions": 3, "deletions": 16}, "files": [{"sha": "56974b6bd9faf3c6aa335e7ee28f7484729da69a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbf53020b5a62deb6f105aaca0b62906b8fe49ea/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbf53020b5a62deb6f105aaca0b62906b8fe49ea/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fbf53020b5a62deb6f105aaca0b62906b8fe49ea", "patch": "@@ -9,6 +9,9 @@\n \t* pt.c (tinst_for_decl): Remove.\n \t* cp-tree.h: Remove the corresponding prototypes.\n \n+\t* tree.c (hash_chainon): Remove.\n+\t* cp-tree.h: Remove the corresponding prototypes.\n+\n 2005-01-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/19263"}, {"sha": "ffb76d535ed124f285a204903efab306d1a6ec65", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbf53020b5a62deb6f105aaca0b62906b8fe49ea/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbf53020b5a62deb6f105aaca0b62906b8fe49ea/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=fbf53020b5a62deb6f105aaca0b62906b8fe49ea", "patch": "@@ -4242,7 +4242,6 @@ extern tree build_cplus_staticfn_type\t\t(tree, tree, tree);\n extern tree build_cplus_array_type\t\t(tree, tree);\n extern tree hash_tree_cons\t\t\t(tree, tree, tree);\n extern tree hash_tree_chain\t\t\t(tree, tree);\n-extern tree hash_chainon\t\t\t(tree, tree);\n extern int count_functions\t\t\t(tree);\n extern int is_overloaded_fn\t\t\t(tree);\n extern tree get_first_fn\t\t\t(tree);"}, {"sha": "2b6c96ebfc6f60e0ab7aff319905c7f872959f25", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbf53020b5a62deb6f105aaca0b62906b8fe49ea/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbf53020b5a62deb6f105aaca0b62906b8fe49ea/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=fbf53020b5a62deb6f105aaca0b62906b8fe49ea", "patch": "@@ -736,21 +736,6 @@ hash_tree_chain (tree value, tree chain)\n {\n   return hash_tree_cons (NULL_TREE, value, chain);\n }\n-\n-/* Similar, but used for concatenating two lists.  */\n-\n-tree\n-hash_chainon (tree list1, tree list2)\n-{\n-  if (list2 == 0)\n-    return list1;\n-  if (list1 == 0)\n-    return list2;\n-  if (TREE_CHAIN (list1) == NULL_TREE)\n-    return hash_tree_chain (TREE_VALUE (list1), list2);\n-  return hash_tree_chain (TREE_VALUE (list1),\n-\t\t\t  hash_chainon (TREE_CHAIN (list1), list2));\n-}\n \f\n void\n debug_binfo (tree elem)"}]}