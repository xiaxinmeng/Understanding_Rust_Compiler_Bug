{"sha": "f05fd841fd0ed4417d4705b5fb9979597468f6ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA1ZmQ4NDFmZDBlZDQ0MTdkNDcwNWI1ZmI5OTc5NTk3NDY4ZjZjZQ==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2003-10-07T23:39:32Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2003-10-07T23:39:32Z"}, "message": "Remove accidentally committed piece of patch.\n\nFrom-SVN: r72209", "tree": {"sha": "1f193cf39461afef1527e7f377b921a7a7895a60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f193cf39461afef1527e7f377b921a7a7895a60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f05fd841fd0ed4417d4705b5fb9979597468f6ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f05fd841fd0ed4417d4705b5fb9979597468f6ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f05fd841fd0ed4417d4705b5fb9979597468f6ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f05fd841fd0ed4417d4705b5fb9979597468f6ce/comments", "author": null, "committer": null, "parents": [{"sha": "53400b9e49e8201a22b81376a960eb7ea8cedf92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53400b9e49e8201a22b81376a960eb7ea8cedf92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53400b9e49e8201a22b81376a960eb7ea8cedf92"}], "stats": {"total": 167, "additions": 76, "deletions": 91}, "files": [{"sha": "af31de54c522919045b5c604f2c7bd9df0746b3b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 76, "deletions": 91, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f05fd841fd0ed4417d4705b5fb9979597468f6ce/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f05fd841fd0ed4417d4705b5fb9979597468f6ce/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=f05fd841fd0ed4417d4705b5fb9979597468f6ce", "patch": "@@ -544,149 +544,134 @@ rs6000_override_options (const char *default_cpu)\n   /* Simplify the entries below by making a mask for any POWER\n      variant and any PowerPC variant.  */\n \n-  enum {\n-    POWER_MASKS = MASK_POWER | MASK_POWER2 | MASK_MULTIPLE | MASK_STRING,\n-    POWERPC_BASE_MASK = MASK_POWERPC | MASK_NEW_MNEMONICS,\n-    POWERPC_MASKS = (POWERPC_BASE_MASK | MASK_PPC_GPOPT \n-\t\t     | MASK_PPC_GFXOPT | MASK_POWERPC64 | MASK_ALTIVEC),\n-    POWERPC_OPT_MASKS = MASK_PPC_GPOPT | MASK_PPC_GFXOPT | MASK_ALTIVEC,\n-    \n-    SET_MASKS = (POWER_MASKS | POWERPC_MASKS | MASK_SOFT_FLOAT)\n-  };\n-\n-  /* FIXME: In this table, there are a few places where SET_MASKS is\n-     used with MASK_POWERPC64 masked off; these indicate processors\n-     that are 64-bit but that don't yet have 64-bit switched on by\n-     default because it doesn't work in the rest of the backend.\n-     There are also some places that SET_MASKS is used with other\n-     flags, those are because earlier versions of this table didn't\n-     specifically set or clear those flags and I didn't know what the\n-     processor supported.  Please delete this comment when all of those\n-     cases are gone.  */\n+#define POWER_MASKS (MASK_POWER | MASK_POWER2 | MASK_MULTIPLE | MASK_STRING)\n+#define POWERPC_MASKS (MASK_POWERPC | MASK_PPC_GPOPT \\\n+\t\t       | MASK_PPC_GFXOPT | MASK_POWERPC64)\n+#define POWERPC_OPT_MASKS (MASK_PPC_GPOPT | MASK_PPC_GFXOPT)\n \n   static struct ptt\n     {\n       const char *const name;\t\t/* Canonical processor name.  */\n       const enum processor_type processor; /* Processor type enum value.  */\n       const int target_enable;\t/* Target flags to enable.  */\n-      const int target_set;\t/* Target flags to change.  */\n+      const int target_disable;\t/* Target flags to disable.  */\n     } const processor_target_table[]\n       = {{\"common\", PROCESSOR_COMMON, MASK_NEW_MNEMONICS,\n-\t    SET_MASKS},\n+\t    POWER_MASKS | POWERPC_MASKS},\n \t {\"power\", PROCESSOR_POWER,\n \t    MASK_POWER | MASK_MULTIPLE | MASK_STRING,\n-\t    SET_MASKS},\n+\t    MASK_POWER2 | POWERPC_MASKS | MASK_NEW_MNEMONICS},\n \t {\"power2\", PROCESSOR_POWER,\n \t    MASK_POWER | MASK_POWER2 | MASK_MULTIPLE | MASK_STRING,\n-\t    SET_MASKS},\n+\t    POWERPC_MASKS | MASK_NEW_MNEMONICS},\n \t {\"power3\", PROCESSOR_PPC630,\n-\t    POWERPC_BASE_MASK | MASK_PPC_GFXOPT,\n-\t    SET_MASKS & ~MASK_POWERPC64 & ~MASK_PPC_GPOPT},\n+\t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS},\n \t {\"power4\", PROCESSOR_POWER4,\n-            POWERPC_BASE_MASK | MASK_PPC_GFXOPT,\n-\t    SET_MASKS & ~MASK_POWERPC64 & ~MASK_PPC_GPOPT},\n+            MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n+            POWER_MASKS},\n \t {\"powerpc\", PROCESSOR_POWERPC,\n-\t    POWERPC_BASE_MASK,\n-\t    SET_MASKS},\n+\t    MASK_POWERPC | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n \t {\"powerpc64\", PROCESSOR_POWERPC64,\n-\t    POWERPC_BASE_MASK | MASK_POWERPC64,\n-\t    SET_MASKS},\n+\t    MASK_POWERPC | MASK_POWERPC64 | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS | POWERPC_OPT_MASKS},\n \t {\"rios\", PROCESSOR_RIOS1,\n \t    MASK_POWER | MASK_MULTIPLE | MASK_STRING,\n-\t    SET_MASKS},\n+\t    MASK_POWER2 | POWERPC_MASKS | MASK_NEW_MNEMONICS},\n \t {\"rios1\", PROCESSOR_RIOS1,\n \t    MASK_POWER | MASK_MULTIPLE | MASK_STRING,\n-\t    SET_MASKS},\n+\t    MASK_POWER2 | POWERPC_MASKS | MASK_NEW_MNEMONICS},\n \t {\"rsc\", PROCESSOR_PPC601,\n \t    MASK_POWER | MASK_MULTIPLE | MASK_STRING,\n-\t    SET_MASKS},\n+\t    MASK_POWER2 | POWERPC_MASKS | MASK_NEW_MNEMONICS},\n \t {\"rsc1\", PROCESSOR_PPC601,\n \t    MASK_POWER | MASK_MULTIPLE | MASK_STRING,\n-\t    SET_MASKS},\n+\t    MASK_POWER2 | POWERPC_MASKS | MASK_NEW_MNEMONICS},\n \t {\"rios2\", PROCESSOR_RIOS2,\n \t    MASK_POWER | MASK_MULTIPLE | MASK_STRING | MASK_POWER2,\n-\t    SET_MASKS},\n+\t    POWERPC_MASKS | MASK_NEW_MNEMONICS},\n \t {\"rs64a\", PROCESSOR_RS64A,\n-\t    POWERPC_BASE_MASK,\n-\t    SET_MASKS},\n+\t    MASK_POWERPC | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS | POWERPC_OPT_MASKS},\n \t {\"401\", PROCESSOR_PPC403,\n-\t    POWERPC_BASE_MASK | MASK_SOFT_FLOAT,\n-\t    SET_MASKS},\n+\t    MASK_POWERPC | MASK_SOFT_FLOAT | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n \t {\"403\", PROCESSOR_PPC403,\n-\t    POWERPC_BASE_MASK | MASK_SOFT_FLOAT | MASK_STRICT_ALIGN,\n-\t    SET_MASKS},\n+\t    MASK_POWERPC | MASK_SOFT_FLOAT | MASK_NEW_MNEMONICS | MASK_STRICT_ALIGN,\n+\t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n \t {\"405\", PROCESSOR_PPC405,\n-\t    POWERPC_BASE_MASK | MASK_SOFT_FLOAT,\n-\t    SET_MASKS},\n+\t    MASK_POWERPC | MASK_SOFT_FLOAT | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n \t {\"405fp\", PROCESSOR_PPC405,\n-\t    POWERPC_BASE_MASK,\n-\t    SET_MASKS},\n+\t    MASK_POWERPC | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n \t {\"440\", PROCESSOR_PPC440,\n-\t    POWERPC_BASE_MASK | MASK_SOFT_FLOAT,\n-\t    SET_MASKS},\n+\t    MASK_POWERPC | MASK_SOFT_FLOAT | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n \t {\"440fp\", PROCESSOR_PPC440,\n-\t    POWERPC_BASE_MASK,\n-\t    SET_MASKS},\n+\t    MASK_POWERPC | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n \t {\"505\", PROCESSOR_MPCCORE,\n-\t    POWERPC_BASE_MASK,\n-\t    SET_MASKS},\n+\t    MASK_POWERPC | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n \t {\"601\", PROCESSOR_PPC601,\n-\t    MASK_POWER | POWERPC_BASE_MASK | MASK_MULTIPLE | MASK_STRING,\n-\t    SET_MASKS},\n+\t    MASK_POWER | MASK_POWERPC | MASK_NEW_MNEMONICS | MASK_MULTIPLE | MASK_STRING,\n+\t    MASK_POWER2 | POWERPC_OPT_MASKS | MASK_POWERPC64},\n \t {\"602\", PROCESSOR_PPC603,\n-\t    POWERPC_BASE_MASK | MASK_PPC_GFXOPT,\n-\t    SET_MASKS},\n+\t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n \t {\"603\", PROCESSOR_PPC603,\n-\t    POWERPC_BASE_MASK | MASK_PPC_GFXOPT,\n-\t    SET_MASKS},\n+\t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n \t {\"603e\", PROCESSOR_PPC603,\n-\t    POWERPC_BASE_MASK | MASK_PPC_GFXOPT,\n-\t    SET_MASKS},\n+\t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n \t {\"ec603e\", PROCESSOR_PPC603,\n-\t    POWERPC_BASE_MASK | MASK_SOFT_FLOAT,\n-\t    SET_MASKS},\n+\t    MASK_POWERPC | MASK_SOFT_FLOAT | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n \t {\"604\", PROCESSOR_PPC604,\n-\t    POWERPC_BASE_MASK | MASK_PPC_GFXOPT,\n-\t    SET_MASKS},\n+\t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n \t {\"604e\", PROCESSOR_PPC604e,\n-\t    POWERPC_BASE_MASK | MASK_PPC_GFXOPT,\n-\t    SET_MASKS},\n+\t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n \t {\"620\", PROCESSOR_PPC620,\n-\t    POWERPC_BASE_MASK | MASK_PPC_GFXOPT,\n-\t    SET_MASKS & ~MASK_POWERPC64 & ~MASK_PPC_GPOPT},\n+\t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS},\n \t {\"630\", PROCESSOR_PPC630,\n-\t    POWERPC_BASE_MASK | MASK_PPC_GFXOPT,\n-\t    SET_MASKS & ~MASK_POWERPC64 & ~MASK_PPC_GPOPT},\n+\t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS},\n \t {\"740\", PROCESSOR_PPC750,\n- \t    POWERPC_BASE_MASK | MASK_PPC_GFXOPT,\n- \t    SET_MASKS},\n+ \t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n+ \t    POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n \t {\"750\", PROCESSOR_PPC750,\n- \t    POWERPC_BASE_MASK | MASK_PPC_GFXOPT,\n- \t    SET_MASKS},\n+ \t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n+ \t    POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n \t {\"7400\", PROCESSOR_PPC7400,\n-            POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_ALTIVEC,\n-            SET_MASKS},\n+            MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n+            POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n \t {\"7450\", PROCESSOR_PPC7450,\n-            POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_ALTIVEC,\n-            SET_MASKS},\n+            MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n+            POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n \t {\"8540\", PROCESSOR_PPC8540,\n-\t    POWERPC_BASE_MASK | MASK_PPC_GFXOPT,\n-\t    SET_MASKS},\n+\t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n \t {\"801\", PROCESSOR_MPCCORE,\n-\t    POWERPC_BASE_MASK | MASK_SOFT_FLOAT,\n-\t    SET_MASKS},\n+\t    MASK_POWERPC | MASK_SOFT_FLOAT | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n \t {\"821\", PROCESSOR_MPCCORE,\n-\t    POWERPC_BASE_MASK | MASK_SOFT_FLOAT,\n-\t    SET_MASKS},\n+\t    MASK_POWERPC | MASK_SOFT_FLOAT | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n \t {\"823\", PROCESSOR_MPCCORE,\n-\t    POWERPC_BASE_MASK | MASK_SOFT_FLOAT,\n-\t    SET_MASKS},\n+\t    MASK_POWERPC | MASK_SOFT_FLOAT | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n \t {\"860\", PROCESSOR_MPCCORE,\n-\t    POWERPC_BASE_MASK | MASK_SOFT_FLOAT,\n-\t    SET_MASKS},\n+\t    MASK_POWERPC | MASK_SOFT_FLOAT | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n \t {\"970\", PROCESSOR_POWER4,\n-\t    POWERPC_BASE_MASK | POWERPC_OPT_MASKS | MASK_ALTIVEC,\n-\t    SET_MASKS & ~MASK_POWERPC64}};\n+\t    MASK_POWERPC | POWERPC_OPT_MASKS | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS}};\n \n   const size_t ptt_size = ARRAY_SIZE (processor_target_table);\n \n@@ -712,8 +697,8 @@ rs6000_override_options (const char *default_cpu)\n \n \t\tif (ptr->set_arch_p)\n \t\t  {\n-\t\t    target_flags &= ~processor_target_table[j].target_set;\n \t\t    target_flags |= processor_target_table[j].target_enable;\n+\t\t    target_flags &= ~processor_target_table[j].target_disable;\n \t\t  }\n \t\tbreak;\n \t      }"}]}