{"sha": "e4c85816577edeef910cdd45a4405c564beba903", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRjODU4MTY1NzdlZGVlZjkxMGNkZDQ1YTQ0MDVjNTY0YmViYTkwMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2000-05-15T19:53:07Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2000-05-15T19:53:07Z"}, "message": "jump.c (condjump_p): Mark as depreached.\n\n\t* jump.c (condjump_p):  Mark as depreached.\n\t(any_condump_p): New.\n\t(any_uncondump_p): New.\n\t(pc_set): New.\n\t(safe_to_remove_jump_p): New.\n\t* rtl.h (any_condump_p, any_uncondjump_p, pc_set\n\tsafe_to_remove_jump_p): Declare.\n\nFrom-SVN: r33914", "tree": {"sha": "47173f5b1965f22ccaf7cb2d8cfb4a20ae0da292", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47173f5b1965f22ccaf7cb2d8cfb4a20ae0da292"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4c85816577edeef910cdd45a4405c564beba903", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4c85816577edeef910cdd45a4405c564beba903", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4c85816577edeef910cdd45a4405c564beba903", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4c85816577edeef910cdd45a4405c564beba903/comments", "author": null, "committer": null, "parents": [{"sha": "099e9712f166092364e51630f3e5138f3ff81811", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/099e9712f166092364e51630f3e5138f3ff81811", "html_url": "https://github.com/Rust-GCC/gccrs/commit/099e9712f166092364e51630f3e5138f3ff81811"}], "stats": {"total": 101, "additions": 99, "deletions": 2}, "files": [{"sha": "05c917f121255e99dcce3ea92e14815f3bd34091", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c85816577edeef910cdd45a4405c564beba903/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c85816577edeef910cdd45a4405c564beba903/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4c85816577edeef910cdd45a4405c564beba903", "patch": "@@ -1,3 +1,13 @@\n+Mon May 15 21:45:36 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n+\n+\t* jump.c (condjump_p):  Mark as depreached.\n+\t(any_condump_p): New.\n+\t(any_uncondump_p): New.\n+\t(pc_set): New.\n+\t(safe_to_remove_jump_p): New.\n+\t* rtl.h (any_condump_p, any_uncondjump_p, pc_set\n+\tsafe_to_remove_jump_p): Declare.\n+\n Mon May 15 21:07:20 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \n \t* calls.c: Re-install both patches reverted by last patch."}, {"sha": "3ea076757480ccae3a6a300b9ccb563cd0fbb521", "filename": "gcc/jump.c", "status": "modified", "additions": 85, "deletions": 2, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c85816577edeef910cdd45a4405c564beba903/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c85816577edeef910cdd45a4405c564beba903/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=e4c85816577edeef910cdd45a4405c564beba903", "patch": "@@ -2097,7 +2097,12 @@ simplejump_p (insn)\n }\n \n /* Return nonzero if INSN is a (possibly) conditional jump\n-   and nothing more.  */\n+   and nothing more.  \n+ \n+   Use this function is depreached, since we need to support\n+   branch and compare insns.  Use nontrivial_condjump_p instead\n+   whenever possible.\n+ */\n \n int\n condjump_p (insn)\n@@ -2124,7 +2129,12 @@ condjump_p (insn)\n }\n \n /* Return nonzero if INSN is a (possibly) conditional jump inside a\n-   PARALLEL.  */\n+   PARALLEL.\n+ \n+   Use this function is depreached, since we need to support\n+   branch and compare insns.  Use any_condjump_p instead\n+   whenever possible.\n+ */\n \n int\n condjump_in_parallel_p (insn)\n@@ -2156,6 +2166,79 @@ condjump_in_parallel_p (insn)\n   return 0;\n }\n \n+/* Return set of PC if available NULL otherwise.  */\n+rtx\n+pc_set (insn)\n+     rtx insn;\n+{\n+  rtx pat;\n+  if (GET_CODE (insn) != JUMP_INSN)\n+    return NULL;\n+  pat = PATTERN (insn);\n+  /* The set is allowed to appear eighter as insn pattern or the first in\n+     PARALLEL expression.  */\n+  if (GET_CODE (pat) == SET && GET_CODE (SET_DEST (pat)) == PC)\n+    return pat;\n+  if (GET_CODE (pat) == PARALLEL)\n+    {\n+      rtx set = XVECEXP (pat, 0, 0);\n+      if (GET_CODE (set) == SET && GET_CODE (SET_DEST (set)) == PC)\n+\treturn set;\n+    }\n+  return NULL;\n+}\n+\n+/* Return true when insn in unconditional jump possibly boundled inside\n+   PARALLEL.  */\n+int\n+any_uncondjump_p (insn)\n+     rtx insn;\n+{\n+  rtx x = pc_set (insn);\n+  if (!x)\n+    return 0;\n+  if (GET_CODE (SET_SRC (x)) != LABEL_REF)\n+    return 0;\n+  return 1;\n+}\n+\n+/* Return true when insn is conditional jump.  This function work for\n+   instructions containing PC sets in PARALLELs.  The instruction may have\n+   various other effects so before removing the jump you must verify\n+   safe_to_remove_jump_p.\n+\n+   Note that unlike condjump_p it returns 0 for unconditionals jumps.\n+  */\n+int\n+any_condjump_p (insn)\n+     rtx insn;\n+{\n+  rtx x = pc_set (insn);\n+  if (!x)\n+    return 0;\n+  if (XEXP (SET_SRC (x), 2) == pc_rtx\n+      && (GET_CODE (XEXP (SET_SRC (x), 1)) == LABEL_REF\n+\t  || GET_CODE (XEXP (SET_SRC (x), 1)) == RETURN))\n+    return 1;\n+  if (XEXP (SET_SRC (x), 1) == pc_rtx\n+      && (GET_CODE (XEXP (SET_SRC (x), 2)) == LABEL_REF\n+\t  || GET_CODE (XEXP (SET_SRC (x), 2)) == RETURN))\n+    return 1;\n+  return 0;\n+}\n+\n+\n+/* Return true when the condjump is safe to remove.  */\n+int\n+safe_to_remove_jump_p (insn)\n+     rtx insn;\n+{\n+  /* For non-single set insns we may remove set of the other registers.  */\n+  if (!pc_set (insn) || !single_set (insn))\n+    return 0;\n+  return 1;\n+}\n+\n /* Return the label of a conditional jump.  */\n \n rtx"}, {"sha": "1a42d90286e76964c693b0f66639b755d4587301", "filename": "gcc/rtl.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c85816577edeef910cdd45a4405c564beba903/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c85816577edeef910cdd45a4405c564beba903/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=e4c85816577edeef910cdd45a4405c564beba903", "patch": "@@ -1511,6 +1511,10 @@ extern void cse_end_of_basic_block\tPARAMS ((rtx,\n /* In jump.c */\n extern int comparison_dominates_p\tPARAMS ((enum rtx_code, enum rtx_code));\n extern int condjump_p\t\t\tPARAMS ((rtx));\n+extern int any_condjump_p\t\tPARAMS ((rtx));\n+extern int any_uncondjump_p\t\tPARAMS ((rtx));\n+extern int safe_to_remove_jump_p\tPARAMS ((rtx));\n+extern rtx pc_set\t\t\tPARAMS ((rtx));\n extern rtx condjump_label\t\tPARAMS ((rtx));\n extern int simplejump_p\t\t\tPARAMS ((rtx));\n extern int returnjump_p\t\t\tPARAMS ((rtx));"}]}