{"sha": "207503fa5116448fe49b518a7f04e120bdf5b807", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA3NTAzZmE1MTE2NDQ4ZmU0OWI1MThhN2YwNGUxMjBiZGY1YjgwNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-03-30T09:17:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-03-30T09:17:34Z"}, "message": "[multiple changes]\n\n2012-03-30  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_ch5.adb (Expand_Iterator_Loop_Over_Array): For the case of a\n\tloop entity which is rewritten as a renaming\n\tof the indexed array, explicitly mark the entity as needing\n\tdebug info so that Materialize entity will be set later by\n\tDebug_Renaming_Declaration when the renaming is expanded.\n\n2012-03-30  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_attr.ads: Update comment.\n\nFrom-SVN: r185999", "tree": {"sha": "f86306f51df58e1ad978e47bd546039cc69d6053", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f86306f51df58e1ad978e47bd546039cc69d6053"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/207503fa5116448fe49b518a7f04e120bdf5b807", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/207503fa5116448fe49b518a7f04e120bdf5b807", "html_url": "https://github.com/Rust-GCC/gccrs/commit/207503fa5116448fe49b518a7f04e120bdf5b807", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/207503fa5116448fe49b518a7f04e120bdf5b807/comments", "author": null, "committer": null, "parents": [{"sha": "50421527ecf401ca7668048d0fe599bd043f776f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50421527ecf401ca7668048d0fe599bd043f776f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50421527ecf401ca7668048d0fe599bd043f776f"}], "stats": {"total": 47, "additions": 41, "deletions": 6}, "files": [{"sha": "9c1090927888c0a5773d633d7b383fc5cc2cee2e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207503fa5116448fe49b518a7f04e120bdf5b807/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207503fa5116448fe49b518a7f04e120bdf5b807/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=207503fa5116448fe49b518a7f04e120bdf5b807", "patch": "@@ -1,3 +1,15 @@\n+2012-03-30  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_Iterator_Loop_Over_Array): For the case of a\n+\tloop entity which is rewritten as a renaming\n+\tof the indexed array, explicitly mark the entity as needing\n+\tdebug info so that Materialize entity will be set later by\n+\tDebug_Renaming_Declaration when the renaming is expanded.\n+\n+2012-03-30  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_attr.ads: Update comment.\n+\n 2012-03-30  Vincent Celier  <celier@adacore.com>\n \n \t* prj.ads: New Dependency_Kind: ALI_Closure."}, {"sha": "349745616b493ab87245815bb949aa6d7d670abe", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207503fa5116448fe49b518a7f04e120bdf5b807/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207503fa5116448fe49b518a7f04e120bdf5b807/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=207503fa5116448fe49b518a7f04e120bdf5b807", "patch": "@@ -3303,6 +3303,14 @@ package body Exp_Ch5 is\n                New_Reference_To (Component_Type (Array_Typ), Loc),\n              Name                => Ind_Comp));\n \n+         --  Mark the loop variable as needing debug info, so that expansion\n+         --  of the renaming will result in Materialize_Entity getting set via\n+         --  Debug_Renaming_Declaration. (This setting is needed here because\n+         --  the setting in Freeze_Entity comes after the expansion, which is\n+         --  too late. ???)\n+\n+         Set_Debug_Info_Needed (Id);\n+\n       --  for Index in Array loop\n \n       --  This case utilizes the already given iterator name"}, {"sha": "45e1bc05acba707df04f173fbc41df691bba701f", "filename": "gcc/ada/sem_attr.ads", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207503fa5116448fe49b518a7f04e120bdf5b807/gcc%2Fada%2Fsem_attr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207503fa5116448fe49b518a7f04e120bdf5b807/gcc%2Fada%2Fsem_attr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.ads?ref=207503fa5116448fe49b518a7f04e120bdf5b807", "patch": "@@ -554,12 +554,27 @@ package Sem_Attr is\n       -------------------\n \n       Attribute_Valid_Scalars => True,\n-      --  Obj'Valid_Scalars applies to objects of scalar types, on which it is\n-      --  equivalent to Obj'Valid, and objects of array and record types, on\n-      --  which it amounts to applying 'Valid to each subcomponent of Obj. It\n-      --  does not apply to prefixes of classwide type, or of a formal generic\n-      --  type that has an unknown discriminant (which could be instantiated\n-      --  with a classwide type).\n+      --  Obj'Valid_Scalars can be applied to any object. The result depends\n+      --  on the type of the object:\n+      --\n+      --    For a scalar type, the result is the same as obj'Valid\n+      --\n+      --    For an array object, the result is True if the result of applying\n+      --    Valid_Scalars to every component is True.\n+      --\n+      --    For a record object, the result is True if the result of applying\n+      --    Valid_Scalars to every component is True. For class-wide types,\n+      --    only the components of the base type are checked. For variant\n+      --    records, only the components actually present are checked.\n+      --\n+      --    For all other types, the result is always True\n+      --\n+      --  A warning is given for a trivially True result, when the attribute\n+      --  is applied to an object that is not of scalar, array, or record\n+      --  type, or in the composite case if no scalar subcomponents exist. For\n+      --  a variant record, the warning is given only if none of the variants\n+      --  have scalar subcomponents. In addition, the warning is suppressed\n+      --  for private types, or generic types in an instance.\n \n       ----------------\n       -- Value_Size --"}]}