{"sha": "03b3e2712c6ece43c93688cd1e3aef302b44df76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNiM2UyNzEyYzZlY2U0M2M5MzY4OGNkMWUzYWVmMzAyYjQ0ZGY3Ng==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2008-06-12T16:15:58Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2008-06-12T16:15:58Z"}, "message": "m68k.c (m68k_tune_flags): New.\n\n\t* config/m68k/m68k.c (m68k_tune_flags): New.\n\t(override_options): Compute m68k_tune_flags.\n\t(MULL_COST, MULW_COST): Update for various variants of CFV2.\n\t* config/m68k/m68k.h (TUNE_MAC, TUNE_EMAC): New.\n\nFrom-SVN: r136711", "tree": {"sha": "de2ed758825255ce5881b83984e452aa24506a93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de2ed758825255ce5881b83984e452aa24506a93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03b3e2712c6ece43c93688cd1e3aef302b44df76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03b3e2712c6ece43c93688cd1e3aef302b44df76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03b3e2712c6ece43c93688cd1e3aef302b44df76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03b3e2712c6ece43c93688cd1e3aef302b44df76/comments", "author": null, "committer": null, "parents": [{"sha": "3ac4c44a58c0efc38fea252672028a1737036e32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ac4c44a58c0efc38fea252672028a1737036e32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ac4c44a58c0efc38fea252672028a1737036e32"}], "stats": {"total": 39, "additions": 34, "deletions": 5}, "files": [{"sha": "936c2ffda504b0e06c9089c16c07d7badceb6998", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03b3e2712c6ece43c93688cd1e3aef302b44df76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03b3e2712c6ece43c93688cd1e3aef302b44df76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03b3e2712c6ece43c93688cd1e3aef302b44df76", "patch": "@@ -1,3 +1,10 @@\n+2008-06-12  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* config/m68k/m68k.c (m68k_tune_flags): New.\n+\t(override_options): Compute m68k_tune_flags.\n+\t(MULL_COST, MULW_COST): Update for various variants of CFV2.\n+\t* config/m68k/m68k.h (TUNE_MAC, TUNE_EMAC): New.\n+\n 2008-06-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/36506"}, {"sha": "f95e37e947910c97737073f2c3e4e112905b1ceb", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03b3e2712c6ece43c93688cd1e3aef302b44df76/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03b3e2712c6ece43c93688cd1e3aef302b44df76/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=03b3e2712c6ece43c93688cd1e3aef302b44df76", "patch": "@@ -391,6 +391,9 @@ enum fpu_type m68k_fpu;\n /* The set of FL_* flags that apply to the target processor.  */\n unsigned int m68k_cpu_flags;\n \n+/* The set of FL_* flags that apply to the processor to be tuned for.  */\n+unsigned int m68k_tune_flags;\n+\n /* Asm templates for calling or jumping to an arbitrary symbolic address,\n    or NULL if such calls or jumps are not supported.  The address is held\n    in operand 0.  */\n@@ -571,13 +574,23 @@ override_options (void)\n   /* Set the directly-usable versions of the -mcpu and -mtune settings.  */\n   m68k_cpu = entry->device;\n   if (m68k_tune_entry)\n-    m68k_tune = m68k_tune_entry->microarch;\n+    {\n+      m68k_tune = m68k_tune_entry->microarch;\n+      m68k_tune_flags = m68k_tune_entry->flags;\n+    }\n #ifdef M68K_DEFAULT_TUNE\n   else if (!m68k_cpu_entry && !m68k_arch_entry)\n-    m68k_tune = M68K_DEFAULT_TUNE;\n+    {\n+      enum target_device dev;\n+      dev = all_microarchs[M68K_DEFAULT_TUNE].device;\n+      m68k_tune_flags = all_devices[dev]->flags;\n+    }\n #endif\n   else\n-    m68k_tune = entry->microarch;\n+    {\n+      m68k_tune = entry->microarch;\n+      m68k_tune_flags = entry->flags;\n+    }\n \n   /* Set the type of FPU.  */\n   m68k_fpu = (!TARGET_HARD_FLOAT ? FPUTYPE_NONE\n@@ -2226,13 +2239,18 @@ m68k_rtx_costs (rtx x, int code, int outer_code, int *total)\n #define MULL_COST\t\t\t\t\\\n   (TUNE_68060 ? 2\t\t\t\t\\\n    : TUNE_68040 ? 5\t\t\t\t\\\n-   : TUNE_CFV2 ? 10\t\t\t\t\\\n+   : (TUNE_CFV2 && TUNE_EMAC) ? 3\t\t\\\n+   : (TUNE_CFV2 && TUNE_MAC) ? 4\t\t\\\n+   : TUNE_CFV2 ? 8\t\t\t\t\\\n    : TARGET_COLDFIRE ? 3 : 13)\n \n #define MULW_COST\t\t\t\t\\\n   (TUNE_68060 ? 2\t\t\t\t\\\n    : TUNE_68040 ? 3\t\t\t\t\\\n-   : TUNE_68000_10 || TUNE_CFV2 ? 5\t\t\\\n+   : TUNE_68000_10 ? 5\t\t\t\t\\\n+   : (TUNE_CFV2 && TUNE_EMAC) ? 3\t\t\\\n+   : (TUNE_CFV2 && TUNE_MAC) ? 2\t\t\\\n+   : TUNE_CFV2 ? 8\t\t\t\t\\\n    : TARGET_COLDFIRE ? 2 : 8)\n \n #define DIVW_COST\t\t\t\t\\"}, {"sha": "2bb725f04231d7f7509c395b27e67fb4b8ecbdd0", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03b3e2712c6ece43c93688cd1e3aef302b44df76/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03b3e2712c6ece43c93688cd1e3aef302b44df76/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=03b3e2712c6ece43c93688cd1e3aef302b44df76", "patch": "@@ -269,6 +269,9 @@ along with GCC; see the file COPYING3.  If not see\n #define TUNE_CFV3       (m68k_tune == ucfv3)\n #define TUNE_CFV4       (m68k_tune == ucfv4 || m68k_tune == ucfv4e)\n \n+#define TUNE_MAC\t((m68k_tune_flags & FL_CF_MAC) != 0)\n+#define TUNE_EMAC\t((m68k_tune_flags & FL_CF_EMAC) != 0)\n+\n #define OVERRIDE_OPTIONS   override_options()\n \n /* These are meant to be redefined in the host dependent files */\n@@ -1137,6 +1140,7 @@ extern enum target_device m68k_cpu;\n extern enum uarch_type m68k_tune;\n extern enum fpu_type m68k_fpu;\n extern unsigned int m68k_cpu_flags;\n+extern unsigned int m68k_tune_flags;\n extern const char *m68k_symbolic_call;\n extern const char *m68k_symbolic_jump;\n "}]}