{"sha": "65ba91b79e1664ba7e7f60f68e4cb956453b692e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjViYTkxYjc5ZTE2NjRiYTdlN2Y2MGY2OGU0Y2I5NTY0NTNiNjkyZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2020-05-09T19:37:13Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2020-05-09T20:14:04Z"}, "message": "Remove last use of expr_align\n\nIt was in the ada/gcc-interface repository and is outdated.\n\n\t* tree.h (expr_align): Delete.\n\t* tree.c (expr_align): Likewise.\nada/\n\t* gcc-interface/utils2.c: Include builtins.h.\n\t(known_alignment) <ADDR_EXPR>: Use DECL_ALIGN for DECL_P operands\n\tand get_object_alignment for the rest.", "tree": {"sha": "65d9b2f0e7fdd202b43b2904e14a15d159eb9794", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65d9b2f0e7fdd202b43b2904e14a15d159eb9794"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65ba91b79e1664ba7e7f60f68e4cb956453b692e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65ba91b79e1664ba7e7f60f68e4cb956453b692e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65ba91b79e1664ba7e7f60f68e4cb956453b692e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65ba91b79e1664ba7e7f60f68e4cb956453b692e/comments", "author": null, "committer": null, "parents": [{"sha": "8415ced06ed9690dfbce8b8b5f2f4f98f15598b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8415ced06ed9690dfbce8b8b5f2f4f98f15598b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8415ced06ed9690dfbce8b8b5f2f4f98f15598b6"}], "stats": {"total": 63, "additions": 16, "deletions": 47}, "files": [{"sha": "cff8ea3f95abdcdab34cbc8c288fdedd1ba352b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65ba91b79e1664ba7e7f60f68e4cb956453b692e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65ba91b79e1664ba7e7f60f68e4cb956453b692e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65ba91b79e1664ba7e7f60f68e4cb956453b692e", "patch": "@@ -1,3 +1,8 @@\n+2020-05-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree.h (expr_align): Delete.\n+\t* tree.c (expr_align): Likewise.\n+\n 2020-05-09  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* resource.c (init_resource_info): Filter-out TARGET_FLAGS_REGNUM"}, {"sha": "0c1c265c8ebfad2dfa8ce1d02893d6407b32ff52", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65ba91b79e1664ba7e7f60f68e4cb956453b692e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65ba91b79e1664ba7e7f60f68e4cb956453b692e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=65ba91b79e1664ba7e7f60f68e4cb956453b692e", "patch": "@@ -1,3 +1,9 @@\n+2020-05-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils2.c: Include builtins.h.\n+\t(known_alignment) <ADDR_EXPR>: Use DECL_ALIGN for DECL_P operands\n+\tand get_object_alignment for the rest.\n+\n 2020-05-08  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Variable>: Force at"}, {"sha": "30d08f508965a6965ba144da1007e202e232cbf0", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65ba91b79e1664ba7e7f60f68e4cb956453b692e/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65ba91b79e1664ba7e7f60f68e4cb956453b692e/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=65ba91b79e1664ba7e7f60f68e4cb956453b692e", "patch": "@@ -32,6 +32,7 @@\n #include \"alias.h\"\n #include \"tree.h\"\n #include \"inchash.h\"\n+#include \"builtins.h\"\n #include \"fold-const.h\"\n #include \"stor-layout.h\"\n #include \"stringpool.h\"\n@@ -167,7 +168,10 @@ known_alignment (tree exp)\n       break;\n \n     case ADDR_EXPR:\n-      this_alignment = expr_align (TREE_OPERAND (exp, 0));\n+      if (DECL_P (TREE_OPERAND (exp, 0)))\n+\tthis_alignment = DECL_ALIGN (TREE_OPERAND (exp, 0));\n+      else\n+\tthis_alignment = get_object_alignment (TREE_OPERAND (exp, 0));\n       break;\n \n     case CALL_EXPR:"}, {"sha": "5b7d3fddbcbcc1f4814677f99e7a4c25b55fd53e", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65ba91b79e1664ba7e7f60f68e4cb956453b692e/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65ba91b79e1664ba7e7f60f68e4cb956453b692e/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=65ba91b79e1664ba7e7f60f68e4cb956453b692e", "patch": "@@ -3351,51 +3351,6 @@ int_byte_position (const_tree field)\n   return tree_to_shwi (byte_position (field));\n }\n \f\n-/* Return the strictest alignment, in bits, that T is known to have.  */\n-\n-unsigned int\n-expr_align (const_tree t)\n-{\n-  unsigned int align0, align1;\n-\n-  switch (TREE_CODE (t))\n-    {\n-    CASE_CONVERT:  case NON_LVALUE_EXPR:\n-      /* If we have conversions, we know that the alignment of the\n-\t object must meet each of the alignments of the types.  */\n-      align0 = expr_align (TREE_OPERAND (t, 0));\n-      align1 = TYPE_ALIGN (TREE_TYPE (t));\n-      return MAX (align0, align1);\n-\n-    case SAVE_EXPR:         case COMPOUND_EXPR:       case MODIFY_EXPR:\n-    case INIT_EXPR:         case TARGET_EXPR:         case WITH_CLEANUP_EXPR:\n-    case CLEANUP_POINT_EXPR:\n-      /* These don't change the alignment of an object.  */\n-      return expr_align (TREE_OPERAND (t, 0));\n-\n-    case COND_EXPR:\n-      /* The best we can do is say that the alignment is the least aligned\n-\t of the two arms.  */\n-      align0 = expr_align (TREE_OPERAND (t, 1));\n-      align1 = expr_align (TREE_OPERAND (t, 2));\n-      return MIN (align0, align1);\n-\n-      /* FIXME: LABEL_DECL and CONST_DECL never have DECL_ALIGN set\n-\t meaningfully, it's always 1.  */\n-    case LABEL_DECL:     case CONST_DECL:\n-    case VAR_DECL:       case PARM_DECL:   case RESULT_DECL:\n-    case FUNCTION_DECL:\n-      gcc_assert (DECL_ALIGN (t) != 0);\n-      return DECL_ALIGN (t);\n-\n-    default:\n-      break;\n-    }\n-\n-  /* Otherwise take the alignment from that of the type.  */\n-  return TYPE_ALIGN (TREE_TYPE (t));\n-}\n-\f\n /* Return, as a tree node, the number of elements for TYPE (which is an\n    ARRAY_TYPE) minus one. This counts only elements of the top array.  */\n "}, {"sha": "4644d6616d91229fde7035c5fc5f50bf170e67b8", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65ba91b79e1664ba7e7f60f68e4cb956453b692e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65ba91b79e1664ba7e7f60f68e4cb956453b692e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=65ba91b79e1664ba7e7f60f68e4cb956453b692e", "patch": "@@ -4641,7 +4641,6 @@ extern hashval_t type_hash_canon_hash (tree);\n extern tree type_hash_canon (unsigned int, tree);\n \n extern tree convert (tree, tree);\n-extern unsigned int expr_align (const_tree);\n extern tree size_in_bytes_loc (location_t, const_tree);\n inline tree\n size_in_bytes (const_tree t)"}]}