{"sha": "03471b3fcd6dd21855ba0ed90b7963d90904b08b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM0NzFiM2ZjZDZkZDIxODU1YmEwZWQ5MGI3OTYzZDkwOTA0YjA4Yg==", "commit": {"author": {"name": "Carlos O'Donell", "email": "carlos@codesourcery.com", "date": "2006-07-14T15:54:23Z"}, "committer": {"name": "Carlos O'Donell", "email": "carlos@gcc.gnu.org", "date": "2006-07-14T15:54:23Z"}, "message": "dbxout.c (dbxout_begin_prologue): Emit LFBB label at function start.\n\ngcc/\n\n2006-07-14  Carlos O'Donell  <carlos@codesoucery.com>\n\n\n\t* dbxout.c (dbxout_begin_prologue): Emit LFBB label at function start.\n\t(dbxout_function_end): Use local label LFBB. Remove hook DBX_OUTPUT_NFUN.\n\t(dbxout_source_line): Use local label LFBB.\n\t(dbxout_block): Likewise.\n\t(dbx_output_lbrac): Remove hook DBX_OUTPUT_LBRAC.\n\t(dbx_output_rbrac): Remove hook DBX_OUTPUT_RBRAC.\n\t* config/rs6000/linux64.h: Remove DBX_OUTPUT_LBRAC, DBX_OUTPUT_RBRAC,\n\tand DBX_OUTPUT_NFUN.\n\nFrom-SVN: r115444", "tree": {"sha": "7371a8b2fee00fa92e9edb125a2420b945596e6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7371a8b2fee00fa92e9edb125a2420b945596e6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03471b3fcd6dd21855ba0ed90b7963d90904b08b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03471b3fcd6dd21855ba0ed90b7963d90904b08b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03471b3fcd6dd21855ba0ed90b7963d90904b08b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03471b3fcd6dd21855ba0ed90b7963d90904b08b/comments", "author": null, "committer": null, "parents": [{"sha": "1470f196e47e33334ca4ff0cd71ebd3a1bad30de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1470f196e47e33334ca4ff0cd71ebd3a1bad30de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1470f196e47e33334ca4ff0cd71ebd3a1bad30de"}], "stats": {"total": 121, "additions": 33, "deletions": 88}, "files": [{"sha": "5a604c0e258725a59113dc731f53d4237ccb6b7c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03471b3fcd6dd21855ba0ed90b7963d90904b08b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03471b3fcd6dd21855ba0ed90b7963d90904b08b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03471b3fcd6dd21855ba0ed90b7963d90904b08b", "patch": "@@ -1,3 +1,15 @@\n+2006-07-14  Carlos O'Donell  <carlos@codesoucery.com>\n+\n+\n+\t* dbxout.c (dbxout_begin_prologue): Emit LFBB label at function start.\n+\t(dbxout_function_end): Use local label LFBB. Remove hook DBX_OUTPUT_NFUN.\n+\t(dbxout_source_line): Use local label LFBB.\n+\t(dbxout_block): Likewise.\n+\t(dbx_output_lbrac): Remove hook DBX_OUTPUT_LBRAC.\n+\t(dbx_output_rbrac): Remove hook DBX_OUTPUT_RBRAC.\n+\t* config/rs6000/linux64.h: Remove DBX_OUTPUT_LBRAC, DBX_OUTPUT_RBRAC,\n+\tand DBX_OUTPUT_NFUN.\n+\n 2006-07-13  Janis Johnson  <janis187@us.ibm.com>\n \n \t* doc/sourcebuild.texi (Test Directives): Document dg-shouldfail."}, {"sha": "f52b2451abe7a9f8a3ec7aebf0b1258760ab11bb", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03471b3fcd6dd21855ba0ed90b7963d90904b08b/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03471b3fcd6dd21855ba0ed90b7963d90904b08b/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=03471b3fcd6dd21855ba0ed90b7963d90904b08b", "patch": "@@ -486,68 +486,6 @@ extern int dot_symbols;\n \t\t   && SCALAR_FLOAT_MODE_P (GET_MODE (X))\t\t\\\n \t\t   && BITS_PER_WORD == HOST_BITS_PER_INT)))))\n \n-/* This ABI cannot use DBX_LINES_FUNCTION_RELATIVE, nor can it use\n-   dbxout_stab_value_internal_label_diff, because we must\n-   use the function code label, not the function descriptor label.  */\n-#define\tDBX_OUTPUT_SOURCE_LINE(FILE, LINE, COUNTER)\t\t\t\\\n-do\t\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    char temp[256];\t\t\t\t\t\t\t\\\n-    const char *s;\t\t\t\t\t\t\t\\\n-    ASM_GENERATE_INTERNAL_LABEL (temp, \"LM\", COUNTER);\t\t\t\\\n-    dbxout_begin_stabn_sline (LINE);\t\t\t\t\t\\\n-    assemble_name (FILE, temp);\t\t\t\t\t\t\\\n-    putc ('-', FILE);\t\t\t\t\t\t\t\\\n-    s = XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0);\t\t\\\n-    rs6000_output_function_entry (FILE, s);\t\t\t\t\\\n-    putc ('\\n', FILE);\t\t\t\t\t\t\t\\\n-    targetm.asm_out.internal_label (FILE, \"LM\", COUNTER);\t\t\\\n-    COUNTER += 1;\t\t\t\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-while (0)\n-\n-/* Similarly, we want the function code label here.  Cannot use\n-   dbxout_stab_value_label_diff, as we have to use\n-   rs6000_output_function_entry.  FIXME.  */\n-#define DBX_OUTPUT_BRAC(FILE, NAME, BRAC)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      const char *s;\t\t\t\t\t\t\t\\\n-      dbxout_begin_stabn (BRAC);\t\t\t\t\t\\\n-      s = XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0);\t\t\\\n-      /* dbxout_block passes this macro the function name as NAME,\t\\\n-\t assuming that it is the function code start label.  In our\t\\\n-\t case, the function name is the OPD entry.  dbxout_block is\t\\\n-\t broken, hack around it here.  */\t\t\t\t\\\n-      if (NAME == s)\t\t\t\t\t\t\t\\\n-\tputc ('0', FILE);\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  assemble_name (FILE, NAME);\t\t\t\t\t\\\n-\t  putc ('-', FILE);\t\t\t\t\t\t\\\n-\t  rs6000_output_function_entry (FILE, s);\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-      putc ('\\n', FILE);\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-#define DBX_OUTPUT_LBRAC(FILE, NAME) DBX_OUTPUT_BRAC (FILE, NAME, N_LBRAC)\n-#define DBX_OUTPUT_RBRAC(FILE, NAME) DBX_OUTPUT_BRAC (FILE, NAME, N_RBRAC)\n-\n-/* Another case where we want the dot name.  */\n-#define\tDBX_OUTPUT_NFUN(FILE, LSCOPE, DECL)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      const char *s;\t\t\t\t\t\t\t\\\n-      dbxout_begin_empty_stabs (N_FUN);\t\t\t\t\t\\\n-      assemble_name (FILE, LSCOPE);\t\t\t\t\t\\\n-      putc ('-', FILE);\t\t\t\t\t\t\t\\\n-      s = XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0);\t\t\\\n-      rs6000_output_function_entry (FILE, s);\t\t\t\t\\\n-      putc ('\\n', FILE);\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n /* Select a format to encode pointers in exception handling data.  CODE\n    is 0 for data, 1 for code labels, 2 for function pointers.  GLOBAL is\n    true if the symbol may be affected by dynamic relocations.  */"}, {"sha": "07d0bccfb3ad3fc3dbcc5d9b0d90e58a2197122a", "filename": "gcc/dbxout.c", "status": "modified", "additions": 21, "deletions": 26, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03471b3fcd6dd21855ba0ed90b7963d90904b08b/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03471b3fcd6dd21855ba0ed90b7963d90904b08b/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=03471b3fcd6dd21855ba0ed90b7963d90904b08b", "patch": "@@ -905,6 +905,7 @@ static void\n dbxout_function_end (tree decl)\n {\n   char lscope_label_name[100];\n+  int lscope_labelno = scope_labelno++;\n \n   /* The Lscope label must be emitted even if we aren't doing anything\n      else; dbxout_block needs it.  */\n@@ -913,9 +914,8 @@ dbxout_function_end (tree decl)\n   /* Convert Lscope into the appropriate format for local labels in case\n      the system doesn't insert underscores in front of user generated\n      labels.  */\n-  ASM_GENERATE_INTERNAL_LABEL (lscope_label_name, \"Lscope\", scope_labelno);\n-  targetm.asm_out.internal_label (asm_out_file, \"Lscope\", scope_labelno);\n-  scope_labelno++;\n+  ASM_GENERATE_INTERNAL_LABEL (lscope_label_name, \"Lscope\", lscope_labelno);\n+  targetm.asm_out.internal_label (asm_out_file, \"Lscope\", lscope_labelno);\n \n   /* The N_FUN tag at the end of the function is a GNU extension,\n      which may be undesirable, and is unnecessary if we do not have\n@@ -928,9 +928,6 @@ dbxout_function_end (tree decl)\n \n   /* By convention, GCC will mark the end of a function with an N_FUN\n      symbol and an empty string.  */\n-#ifdef DBX_OUTPUT_NFUN\n-  DBX_OUTPUT_NFUN (asm_out_file, lscope_label_name, current_function_decl);\n-#else\n   if (flag_reorder_blocks_and_partition)\n     {\n       dbxout_begin_empty_stabs (N_FUN);\n@@ -942,13 +939,12 @@ dbxout_function_end (tree decl)\n     }\n   else\n     {\n+      char begin_label[20];\n+      /* Reference current function start using LFBB.  */\n+      ASM_GENERATE_INTERNAL_LABEL (begin_label, \"LFBB\", lscope_labelno);\n       dbxout_begin_empty_stabs (N_FUN);\n-      dbxout_stab_value_label_diff (lscope_label_name,\n-\t\t\t\t    XSTR (XEXP (DECL_RTL (current_function_decl), \n-\t\t\t\t\t\t0), 0));\n+      dbxout_stab_value_label_diff (lscope_label_name, begin_label);\n     }\n-\t\t\t\t\n-#endif\n \n   if (!NO_DBX_BNSYM_ENSYM && !flag_debug_only_used_symbols)\n     dbxout_stabd (N_ENSYM, 0);\n@@ -1241,7 +1237,8 @@ dbxout_source_file (const char *filename)\n     }\n }\n \n-/* Output N_BNSYM and line number symbol entry.  */\n+/* Output N_BNSYM, line number symbol entry, and local symbol at \n+   function scope  */\n \n static void\n dbxout_begin_prologue (unsigned int lineno, const char *filename)\n@@ -1253,6 +1250,10 @@ dbxout_begin_prologue (unsigned int lineno, const char *filename)\n     dbxout_stabd (N_BNSYM, 0);\n \n   dbxout_source_line (lineno, filename);\n+  /* Output function begin block at function scope, referenced \n+     by dbxout_block, dbxout_source_line and dbxout_function_end.  */\n+  emit_pending_bincls_if_required ();\n+  targetm.asm_out.internal_label (asm_out_file, \"LFBB\", scope_labelno);\n }\n \n /* Output a line number symbol entry for source file FILENAME and line\n@@ -1268,11 +1269,12 @@ dbxout_source_line (unsigned int lineno, const char *filename)\n #else\n   if (DBX_LINES_FUNCTION_RELATIVE)\n     {\n-      rtx begin_label = XEXP (DECL_RTL (current_function_decl), 0);\n+      char begin_label[20];\n       dbxout_begin_stabn_sline (lineno);\n+      /* Reference current function start using LFBB.  */\n+      ASM_GENERATE_INTERNAL_LABEL (begin_label, \"LFBB\", scope_labelno); \n       dbxout_stab_value_internal_label_diff (\"LM\", &dbxout_source_line_counter,\n-\t\t\t\t\t     XSTR (begin_label, 0));\n-\n+\t\t\t\t\t     begin_label);\n     }\n   else\n     dbxout_stabd (N_SLINE, lineno);\n@@ -3263,15 +3265,11 @@ static void\n dbx_output_lbrac (const char *label,\n \t\t  const char *begin_label ATTRIBUTE_UNUSED)\n {\n-#ifdef DBX_OUTPUT_LBRAC\n-  DBX_OUTPUT_LBRAC (asm_out_file, label);\n-#else\n   dbxout_begin_stabn (N_LBRAC);\n   if (DBX_BLOCKS_FUNCTION_RELATIVE)\n     dbxout_stab_value_label_diff (label, begin_label);\n   else\n     dbxout_stab_value_label (label);\n-#endif\n }\n \n /* Subroutine of dbxout_block.  Emit an N_RBRAC stab referencing LABEL.\n@@ -3281,15 +3279,11 @@ static void\n dbx_output_rbrac (const char *label,\n \t\t  const char *begin_label ATTRIBUTE_UNUSED)\n {\n-#ifdef DBX_OUTPUT_RBRAC\n-  DBX_OUTPUT_RBRAC (asm_out_file, label);\n-#else\n   dbxout_begin_stabn (N_RBRAC);\n   if (DBX_BLOCKS_FUNCTION_RELATIVE)\n     dbxout_stab_value_label_diff (label, begin_label);\n   else\n     dbxout_stab_value_label (label);\n-#endif\n }\n \n /* Output everything about a symbol block (a BLOCK node\n@@ -3312,8 +3306,9 @@ dbx_output_rbrac (const char *label,\n static void\n dbxout_block (tree block, int depth, tree args)\n {\n-  const char *begin_label\n-    = XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0);\n+  char begin_label[20];\n+  /* Reference current function start using LFBB.  */\n+  ASM_GENERATE_INTERNAL_LABEL (begin_label, \"LFBB\", scope_labelno);\n \n   while (block)\n     {\n@@ -3342,7 +3337,7 @@ dbxout_block (tree block, int depth, tree args)\n \n \t      if (depth == 0)\n \t\t/* The outermost block doesn't get LBB labels; use\n-\t\t   the function symbol.  */\n+\t\t   the LFBB local symbol emitted by dbxout_begin_prologue.  */\n \t\tscope_start = begin_label;\n \t      else\n \t\t{"}]}