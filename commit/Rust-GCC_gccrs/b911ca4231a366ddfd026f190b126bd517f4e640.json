{"sha": "b911ca4231a366ddfd026f190b126bd517f4e640", "node_id": "C_kwDOANBUbNoAKGI5MTFjYTQyMzFhMzY2ZGRmZDAyNmYxOTBiMTI2YmQ1MTdmNGU2NDA", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-08-26T15:22:21Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-08-31T09:28:46Z"}, "message": "libstdc++: Add [[nodiscard]] attribute to <string> and <string_view>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/basic_string.h (basic_string): Add nodiscard\n\tattribute to all relevant functions.\n\t* include/std/string_view (basic_string_view): Likewise.\n\t* testsuite/21_strings/basic_string/capacity/1.cc: Cast unused\n\tresults to void.\n\t* testsuite/21_strings/basic_string/capacity/char/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/capacity/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/cons/char/self_move.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/element_access/char/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/element_access/char/21674.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/element_access/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/element_access/wchar_t/21674.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/lwg2758.cc: Likewise.\n\t* testsuite/21_strings/basic_string/lwg2946.cc: Likewise.\n\t* testsuite/21_strings/basic_string/operations/contains/nonnull.cc:\n\tAdd -Wno-unused-result to options.\n\t* testsuite/21_strings/basic_string/operations/ends_with/nonnull.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/operations/starts_with/nonnull.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/operators/char/1.cc: Cast\n\tunused results to void.\n\t* testsuite/21_strings/basic_string/operators/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/capacity/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/element_access/char/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/element_access/char/2.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/element_access/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/element_access/wchar_t/2.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/contains/nonnull.cc:\n\tLikewise.\n\tAdd -Wno-unused-result to options.\n\t* testsuite/21_strings/basic_string_view/operations/ends_with/nonnull.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/starts_with/nonnull.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_stringbuf/sputbackc/char/1.cc: Cast\n\tunused results to void.\n\t* testsuite/27_io/basic_stringbuf/sputbackc/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_stringbuf/sungetc/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_stringbuf/sungetc/wchar_t/1.cc:\n\tLikewise.", "tree": {"sha": "494d307eeb67a6eefcd2b7f5081ac7b727b6a2ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/494d307eeb67a6eefcd2b7f5081ac7b727b6a2ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b911ca4231a366ddfd026f190b126bd517f4e640", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b911ca4231a366ddfd026f190b126bd517f4e640", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b911ca4231a366ddfd026f190b126bd517f4e640", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b911ca4231a366ddfd026f190b126bd517f4e640/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "beec815f26bcb7041a824e0f7180855d364e2271", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beec815f26bcb7041a824e0f7180855d364e2271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beec815f26bcb7041a824e0f7180855d364e2271"}], "stats": {"total": 436, "additions": 279, "deletions": 157}, "files": [{"sha": "0df64ea98ca8db905a6a22eafbba50d83a252bc2", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 127, "deletions": 84, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=b911ca4231a366ddfd026f190b126bd517f4e640", "patch": "@@ -942,7 +942,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Returns a read/write iterator that points to the first character in\n        *  the %string.\n        */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       iterator\n       begin() _GLIBCXX_NOEXCEPT\n       { return iterator(_M_data()); }\n@@ -951,7 +951,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Returns a read-only (constant) iterator that points to the first\n        *  character in the %string.\n        */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       const_iterator\n       begin() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_M_data()); }\n@@ -960,7 +960,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Returns a read/write iterator that points one past the last\n        *  character in the %string.\n        */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       iterator\n       end() _GLIBCXX_NOEXCEPT\n       { return iterator(_M_data() + this->size()); }\n@@ -969,7 +969,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Returns a read-only (constant) iterator that points one past the\n        *  last character in the %string.\n        */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       const_iterator\n       end() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_M_data() + this->size()); }\n@@ -979,7 +979,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  character in the %string.  Iteration is done in reverse element\n        *  order.\n        */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       reverse_iterator\n       rbegin() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(this->end()); }\n@@ -989,7 +989,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  to the last character in the %string.  Iteration is done in\n        *  reverse element order.\n        */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       const_reverse_iterator\n       rbegin() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(this->end()); }\n@@ -999,7 +999,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  first character in the %string.  Iteration is done in reverse\n        *  element order.\n        */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       reverse_iterator\n       rend() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(this->begin()); }\n@@ -1009,7 +1009,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  to one before the first character in the %string.  Iteration\n        *  is done in reverse element order.\n        */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       const_reverse_iterator\n       rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(this->begin()); }\n@@ -1019,7 +1019,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Returns a read-only (constant) iterator that points to the first\n        *  character in the %string.\n        */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       const_iterator\n       cbegin() const noexcept\n       { return const_iterator(this->_M_data()); }\n@@ -1028,7 +1028,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Returns a read-only (constant) iterator that points one past the\n        *  last character in the %string.\n        */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       const_iterator\n       cend() const noexcept\n       { return const_iterator(this->_M_data() + this->size()); }\n@@ -1038,7 +1038,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  to the last character in the %string.  Iteration is done in\n        *  reverse element order.\n        */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       const_reverse_iterator\n       crbegin() const noexcept\n       { return const_reverse_iterator(this->end()); }\n@@ -1048,7 +1048,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  to one before the first character in the %string.  Iteration\n        *  is done in reverse element order.\n        */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       const_reverse_iterator\n       crend() const noexcept\n       { return const_reverse_iterator(this->begin()); }\n@@ -1058,20 +1058,20 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       // Capacity:\n       ///  Returns the number of characters in the string, not including any\n       ///  null-termination.\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       size_type\n       size() const _GLIBCXX_NOEXCEPT\n       { return _M_string_length; }\n \n       ///  Returns the number of characters in the string, not including any\n       ///  null-termination.\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       size_type\n       length() const _GLIBCXX_NOEXCEPT\n       { return _M_string_length; }\n \n       ///  Returns the size() of the largest possible %string.\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       size_type\n       max_size() const _GLIBCXX_NOEXCEPT\n       { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }\n@@ -1127,7 +1127,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Returns the total number of characters that the %string can hold\n        *  before needing to allocate more memory.\n        */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       size_type\n       capacity() const _GLIBCXX_NOEXCEPT\n       {\n@@ -1194,7 +1194,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  out_of_range lookups are not defined. (For checked lookups\n        *  see at().)\n        */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       const_reference\n       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT\n       {\n@@ -1212,7 +1212,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  out_of_range lookups are not defined. (For checked lookups\n        *  see at().)\n        */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       reference\n       operator[](size_type __pos)\n       {\n@@ -1234,7 +1234,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  first checked that it is in the range of the string.  The function\n        *  throws out_of_range if the check fails.\n        */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       const_reference\n       at(size_type __n) const\n       {\n@@ -1256,7 +1256,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  first checked that it is in the range of the string.  The function\n        *  throws out_of_range if the check fails.\n        */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       reference\n       at(size_type __n)\n       {\n@@ -1273,7 +1273,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Returns a read/write reference to the data at the first\n        *  element of the %string.\n        */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       reference\n       front() noexcept\n       {\n@@ -1285,7 +1285,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Returns a read-only (constant) reference to the data at the first\n        *  element of the %string.\n        */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       const_reference\n       front() const noexcept\n       {\n@@ -1297,7 +1297,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Returns a read/write reference to the data at the last\n        *  element of the %string.\n        */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       reference\n       back() noexcept\n       {\n@@ -1309,7 +1309,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Returns a read-only (constant) reference to the data at the\n        *  last element of the %string.\n        */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       const_reference\n       back() const noexcept\n       {\n@@ -2549,7 +2549,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  This is a handle to internal data.  Do not modify or dire things may\n        *  happen.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       const _CharT*\n       c_str() const _GLIBCXX_NOEXCEPT\n       { return _M_data(); }\n@@ -2562,7 +2562,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  allows modifying the contents use @c &str[0] instead,\n        *  (or in C++17 the non-const @c str.data() overload).\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       const _CharT*\n       data() const _GLIBCXX_NOEXCEPT\n       { return _M_data(); }\n@@ -2574,7 +2574,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  This is a pointer to the character sequence held by the string.\n        *  Modifying the characters in the sequence is allowed.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       _CharT*\n       data() noexcept\n       { return _M_data(); }\n@@ -2583,7 +2583,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       /**\n        *  @brief  Return copy of allocator used to construct this string.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       allocator_type\n       get_allocator() const _GLIBCXX_NOEXCEPT\n       { return _M_get_allocator(); }\n@@ -2600,7 +2600,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  returns the index where it begins.  If not found, returns\n        *  npos.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       size_type\n       find(const _CharT* __s, size_type __pos, size_type __n) const\n       _GLIBCXX_NOEXCEPT;\n@@ -2615,7 +2615,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  this string.  If found, returns the index where it begins.  If not\n        *  found, returns npos.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       size_type\n       find(const basic_string& __str, size_type __pos = 0) const\n       _GLIBCXX_NOEXCEPT\n@@ -2629,7 +2629,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  Index of start of first occurrence.\n       */\n       template<typename _Tp>\n-\t_GLIBCXX20_CONSTEXPR\n+\t_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n \t_If_sv<_Tp, size_type>\n \tfind(const _Tp& __svt, size_type __pos = 0) const\n \tnoexcept(is_same<_Tp, __sv_type>::value)\n@@ -2649,7 +2649,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  __s within this string.  If found, returns the index where\n        *  it begins.  If not found, returns npos.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       size_type\n       find(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT\n       {\n@@ -2667,7 +2667,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  this string.  If found, returns the index where it was\n        *  found.  If not found, returns npos.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       size_type\n       find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;\n \n@@ -2681,7 +2681,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  __str within this string.  If found, returns the index where\n        *  it begins.  If not found, returns npos.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       size_type\n       rfind(const basic_string& __str, size_type __pos = npos) const\n       _GLIBCXX_NOEXCEPT\n@@ -2695,7 +2695,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  Index of start of last occurrence.\n       */\n       template<typename _Tp>\n-\t_GLIBCXX20_CONSTEXPR\n+\t_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n \t_If_sv<_Tp, size_type>\n \trfind(const _Tp& __svt, size_type __pos = npos) const\n \tnoexcept(is_same<_Tp, __sv_type>::value)\n@@ -2717,7 +2717,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  returns the index where it begins.  If not found, returns\n        *  npos.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       size_type\n       rfind(const _CharT* __s, size_type __pos, size_type __n) const\n       _GLIBCXX_NOEXCEPT;\n@@ -2732,7 +2732,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @a __s within this string.  If found, returns the index\n        *  where it begins.  If not found, returns npos.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       size_type\n       rfind(const _CharT* __s, size_type __pos = npos) const\n       {\n@@ -2750,7 +2750,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  this string.  If found, returns the index where it was\n        *  found.  If not found, returns npos.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       size_type\n       rfind(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT;\n \n@@ -2765,7 +2765,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  returns the index where it was found.  If not found, returns\n        *  npos.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       size_type\n       find_first_of(const basic_string& __str, size_type __pos = 0) const\n       _GLIBCXX_NOEXCEPT\n@@ -2780,7 +2780,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  Index of first occurrence.\n       */\n       template<typename _Tp>\n-\t_GLIBCXX20_CONSTEXPR\n+\t_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n \t_If_sv<_Tp, size_type>\n \tfind_first_of(const _Tp& __svt, size_type __pos = 0) const\n \tnoexcept(is_same<_Tp, __sv_type>::value)\n@@ -2802,7 +2802,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  found, returns the index where it was found.  If not found,\n        *  returns npos.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       size_type\n       find_first_of(const _CharT* __s, size_type __pos, size_type __n) const\n       _GLIBCXX_NOEXCEPT;\n@@ -2817,7 +2817,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  characters of @a __s within this string.  If found, returns\n        *  the index where it was found.  If not found, returns npos.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       size_type\n       find_first_of(const _CharT* __s, size_type __pos = 0) const\n       _GLIBCXX_NOEXCEPT\n@@ -2838,7 +2838,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *\n        *  Note: equivalent to find(__c, __pos).\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       size_type\n       find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT\n       { return this->find(__c, __pos); }\n@@ -2854,7 +2854,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  returns the index where it was found.  If not found, returns\n        *  npos.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       size_type\n       find_last_of(const basic_string& __str, size_type __pos = npos) const\n       _GLIBCXX_NOEXCEPT\n@@ -2869,7 +2869,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  Index of last occurrence.\n       */\n       template<typename _Tp>\n-\t_GLIBCXX20_CONSTEXPR\n+\t_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n \t_If_sv<_Tp, size_type>\n \tfind_last_of(const _Tp& __svt, size_type __pos = npos) const\n \tnoexcept(is_same<_Tp, __sv_type>::value)\n@@ -2891,7 +2891,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  found, returns the index where it was found.  If not found,\n        *  returns npos.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       size_type\n       find_last_of(const _CharT* __s, size_type __pos, size_type __n) const\n       _GLIBCXX_NOEXCEPT;\n@@ -2906,7 +2906,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  characters of @a __s within this string.  If found, returns\n        *  the index where it was found.  If not found, returns npos.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       size_type\n       find_last_of(const _CharT* __s, size_type __pos = npos) const\n       _GLIBCXX_NOEXCEPT\n@@ -2927,7 +2927,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *\n        *  Note: equivalent to rfind(__c, __pos).\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       size_type\n       find_last_of(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT\n       { return this->rfind(__c, __pos); }\n@@ -2942,7 +2942,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  in @a __str within this string.  If found, returns the index where it\n        *  was found.  If not found, returns npos.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       size_type\n       find_first_not_of(const basic_string& __str, size_type __pos = 0) const\n       _GLIBCXX_NOEXCEPT\n@@ -2957,8 +2957,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  Index of first occurrence.\n        */\n       template<typename _Tp>\n+\t_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n \t_If_sv<_Tp, size_type>\n-\t_GLIBCXX20_CONSTEXPR\n \tfind_first_not_of(const _Tp& __svt, size_type __pos = 0) const\n \tnoexcept(is_same<_Tp, __sv_type>::value)\n \t{\n@@ -2979,7 +2979,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  this string.  If found, returns the index where it was\n        *  found.  If not found, returns npos.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       size_type\n       find_first_not_of(const _CharT* __s, size_type __pos,\n \t\t\tsize_type __n) const _GLIBCXX_NOEXCEPT;\n@@ -2994,7 +2994,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  contained in @a __s within this string.  If found, returns\n        *  the index where it was found.  If not found, returns npos.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       size_type\n       find_first_not_of(const _CharT* __s, size_type __pos = 0) const\n       _GLIBCXX_NOEXCEPT\n@@ -3013,7 +3013,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  other than @a __c within this string.  If found, returns the\n        *  index where it was found.  If not found, returns npos.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       size_type\n       find_first_not_of(_CharT __c, size_type __pos = 0) const\n       _GLIBCXX_NOEXCEPT;\n@@ -3029,7 +3029,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  returns the index where it was found.  If not found, returns\n        *  npos.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       size_type\n       find_last_not_of(const basic_string& __str, size_type __pos = npos) const\n       _GLIBCXX_NOEXCEPT\n@@ -3044,7 +3044,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  Index of last occurrence.\n        */\n       template<typename _Tp>\n-\t_GLIBCXX20_CONSTEXPR\n+\t_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n \t_If_sv<_Tp, size_type>\n \tfind_last_not_of(const _Tp& __svt, size_type __pos = npos) const\n \tnoexcept(is_same<_Tp, __sv_type>::value)\n@@ -3066,7 +3066,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  If found, returns the index where it was found.  If not found,\n        *  returns npos.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       size_type\n       find_last_not_of(const _CharT* __s, size_type __pos,\n \t\t       size_type __n) const _GLIBCXX_NOEXCEPT;\n@@ -3081,7 +3081,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  returns the index where it was found.  If not found, returns\n        *  npos.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       size_type\n       find_last_not_of(const _CharT* __s, size_type __pos = npos) const\n       _GLIBCXX_NOEXCEPT\n@@ -3100,7 +3100,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @a __c within this string.  If found, returns the index where it was\n        *  found.  If not found, returns npos.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       size_type\n       find_last_not_of(_CharT __c, size_type __pos = npos) const\n       _GLIBCXX_NOEXCEPT;\n@@ -3117,7 +3117,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  short, use the remainder of the characters.  If @a __pos is\n        *  beyond the end of the string, out_of_range is thrown.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       basic_string\n       substr(size_type __pos = 0, size_type __n = npos) const\n       { return basic_string(*this,\n@@ -3137,7 +3137,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  If the result of the comparison is nonzero returns it,\n        *  otherwise the shorter one is ordered first.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       int\n       compare(const basic_string& __str) const\n       {\n@@ -3158,7 +3158,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  Integer < 0, 0, or > 0.\n        */\n       template<typename _Tp>\n-\t_GLIBCXX20_CONSTEXPR\n+\t_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n \t_If_sv<_Tp, int>\n \tcompare(const _Tp& __svt) const\n \tnoexcept(is_same<_Tp, __sv_type>::value)\n@@ -3183,7 +3183,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  Integer < 0, 0, or > 0.\n        */\n       template<typename _Tp>\n-\t_GLIBCXX20_CONSTEXPR\n+\t_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n \t_If_sv<_Tp, int>\n \tcompare(size_type __pos, size_type __n, const _Tp& __svt) const\n \tnoexcept(is_same<_Tp, __sv_type>::value)\n@@ -3203,7 +3203,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  Integer < 0, 0, or > 0.\n        */\n       template<typename _Tp>\n-\t_GLIBCXX20_CONSTEXPR\n+\t_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n \t_If_sv<_Tp, int>\n \tcompare(size_type __pos1, size_type __n1, const _Tp& __svt,\n \t\tsize_type __pos2, size_type __n2 = npos) const\n@@ -3234,7 +3234,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  result of the comparison is nonzero returns it, otherwise\n        *  the shorter one is ordered first.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       int\n       compare(size_type __pos, size_type __n, const basic_string& __str) const\n       {\n@@ -3271,7 +3271,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  If the result of the comparison is nonzero returns it,\n        *  otherwise the shorter one is ordered first.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       int\n       compare(size_type __pos1, size_type __n1, const basic_string& __str,\n \t      size_type __pos2, size_type __n2 = npos) const\n@@ -3302,7 +3302,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  comparison is nonzero returns it, otherwise the shorter one is\n        *  ordered first.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       int\n       compare(const _CharT* __s) const _GLIBCXX_NOEXCEPT\n       {\n@@ -3337,7 +3337,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  the comparison is nonzero returns it, otherwise the shorter\n        *  one is ordered first.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       int\n       compare(size_type __pos, size_type __n1, const _CharT* __s) const\n       {\n@@ -3376,7 +3376,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  NB: s must have at least n2 characters, &apos;\\\\0&apos; has\n        *  no special meaning.\n       */\n-      _GLIBCXX20_CONSTEXPR\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n       int\n       compare(size_type __pos, size_type __n1, const _CharT* __s,\n \t      size_type __n2) const\n@@ -3392,43 +3392,49 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       }\n \n #if __cplusplus >= 202002L\n+      [[nodiscard]]\n       constexpr bool\n       starts_with(basic_string_view<_CharT, _Traits> __x) const noexcept\n       { return __sv_type(this->data(), this->size()).starts_with(__x); }\n \n+      [[nodiscard]]\n       constexpr bool\n       starts_with(_CharT __x) const noexcept\n       { return __sv_type(this->data(), this->size()).starts_with(__x); }\n \n-      [[__gnu__::__nonnull__]]\n+      [[nodiscard, __gnu__::__nonnull__]]\n       constexpr bool\n       starts_with(const _CharT* __x) const noexcept\n       { return __sv_type(this->data(), this->size()).starts_with(__x); }\n \n+      [[nodiscard]]\n       constexpr bool\n       ends_with(basic_string_view<_CharT, _Traits> __x) const noexcept\n       { return __sv_type(this->data(), this->size()).ends_with(__x); }\n \n+      [[nodiscard]]\n       constexpr bool\n       ends_with(_CharT __x) const noexcept\n       { return __sv_type(this->data(), this->size()).ends_with(__x); }\n \n-      [[__gnu__::__nonnull__]]\n+      [[nodiscard, __gnu__::__nonnull__]]\n       constexpr bool\n       ends_with(const _CharT* __x) const noexcept\n       { return __sv_type(this->data(), this->size()).ends_with(__x); }\n #endif // C++20\n \n #if __cplusplus > 202002L\n+      [[nodiscard]]\n       constexpr bool\n       contains(basic_string_view<_CharT, _Traits> __x) const noexcept\n       { return __sv_type(this->data(), this->size()).contains(__x); }\n \n+      [[nodiscard]]\n       constexpr bool\n       contains(_CharT __x) const noexcept\n       { return __sv_type(this->data(), this->size()).contains(__x); }\n \n-      [[__gnu__::__nonnull__]]\n+      [[nodiscard, __gnu__::__nonnull__]]\n       constexpr bool\n       contains(const _CharT* __x) const noexcept\n       { return __sv_type(this->data(), this->size()).contains(__x); }\n@@ -3483,7 +3489,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  @return  New string with value of @a __lhs followed by @a __rhs.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    _GLIBCXX20_CONSTEXPR\n+    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n     basic_string<_CharT, _Traits, _Alloc>\n     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t      const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n@@ -3500,7 +3506,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  @return  New string with value of @a __lhs followed by @a __rhs.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    _GLIBCXX20_CONSTEXPR\n+    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n     basic_string<_CharT,_Traits,_Alloc>\n     operator+(const _CharT* __lhs,\n \t      const basic_string<_CharT,_Traits,_Alloc>& __rhs);\n@@ -3512,7 +3518,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  @return  New string with @a __lhs followed by @a __rhs.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    _GLIBCXX20_CONSTEXPR\n+    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n     basic_string<_CharT,_Traits,_Alloc>\n     operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);\n \n@@ -3523,7 +3529,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  @return  New string with @a __lhs followed by @a __rhs.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    _GLIBCXX20_CONSTEXPR\n+    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n     inline basic_string<_CharT, _Traits, _Alloc>\n     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t      const _CharT* __rhs)\n@@ -3540,7 +3546,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  @return  New string with @a __lhs followed by @a __rhs.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    _GLIBCXX20_CONSTEXPR\n+    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n     inline basic_string<_CharT, _Traits, _Alloc>\n     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)\n     {\n@@ -3553,7 +3559,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n \n #if __cplusplus >= 201103L\n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    _GLIBCXX20_CONSTEXPR\n+    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n     inline basic_string<_CharT, _Traits, _Alloc>\n     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\n \t      const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n@@ -3567,7 +3573,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n     { return std::move(__rhs.insert(0, __lhs)); }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    _GLIBCXX20_CONSTEXPR\n+    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n     inline basic_string<_CharT, _Traits, _Alloc>\n     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\n \t      basic_string<_CharT, _Traits, _Alloc>&& __rhs)\n@@ -3590,28 +3596,28 @@ _GLIBCXX_END_NAMESPACE_CXX11\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    _GLIBCXX20_CONSTEXPR\n+    _GLIBCXX_NODISCARD _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n     inline basic_string<_CharT, _Traits, _Alloc>\n     operator+(const _CharT* __lhs,\n \t      basic_string<_CharT, _Traits, _Alloc>&& __rhs)\n     { return std::move(__rhs.insert(0, __lhs)); }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    _GLIBCXX20_CONSTEXPR\n+    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n     inline basic_string<_CharT, _Traits, _Alloc>\n     operator+(_CharT __lhs,\n \t      basic_string<_CharT, _Traits, _Alloc>&& __rhs)\n     { return std::move(__rhs.insert(0, 1, __lhs)); }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    _GLIBCXX20_CONSTEXPR\n+    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n     inline basic_string<_CharT, _Traits, _Alloc>\n     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\n \t      const _CharT* __rhs)\n     { return std::move(__lhs.append(__rhs)); }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    _GLIBCXX20_CONSTEXPR\n+    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n     inline basic_string<_CharT, _Traits, _Alloc>\n     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\n \t      _CharT __rhs)\n@@ -3626,7 +3632,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    _GLIBCXX20_CONSTEXPR\n+    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n     inline bool\n     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t       const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n@@ -3643,7 +3649,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    _GLIBCXX20_CONSTEXPR\n+    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n     inline bool\n     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t       const _CharT* __rhs)\n@@ -3661,6 +3667,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *\t       greater than, or incomparable with `__rhs`.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    [[nodiscard]]\n     constexpr auto\n     operator<=>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t\tconst basic_string<_CharT, _Traits, _Alloc>& __rhs) noexcept\n@@ -3675,6 +3682,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *\t       greater than, or incomparable with `__rhs`.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    [[nodiscard]]\n     constexpr auto\n     operator<=>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t\tconst _CharT* __rhs) noexcept\n@@ -3688,6 +3696,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  @return  True if @a __rhs.compare(@a __lhs) == 0.  False otherwise.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator==(const _CharT* __lhs,\n \t       const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n@@ -3701,6 +3710,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  @return  True if @a __lhs.compare(@a __rhs) != 0.  False otherwise.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t       const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n@@ -3714,6 +3724,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  @return  True if @a __rhs.compare(@a __lhs) != 0.  False otherwise.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator!=(const _CharT* __lhs,\n \t       const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n@@ -3726,6 +3737,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  @return  True if @a __lhs.compare(@a __rhs) != 0.  False otherwise.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t       const _CharT* __rhs)\n@@ -3739,6 +3751,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t      const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n@@ -3752,6 +3765,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t      const _CharT* __rhs)\n@@ -3764,6 +3778,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator<(const _CharT* __lhs,\n \t      const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n@@ -3777,6 +3792,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  @return  True if @a __lhs follows @a __rhs.  False otherwise.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t      const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n@@ -3790,6 +3806,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  @return  True if @a __lhs follows @a __rhs.  False otherwise.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t      const _CharT* __rhs)\n@@ -3802,6 +3819,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  @return  True if @a __lhs follows @a __rhs.  False otherwise.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator>(const _CharT* __lhs,\n \t      const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n@@ -3815,6 +3833,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  @return  True if @a __lhs doesn't follow @a __rhs.  False otherwise.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t       const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n@@ -3828,6 +3847,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  @return  True if @a __lhs doesn't follow @a __rhs.  False otherwise.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t       const _CharT* __rhs)\n@@ -3840,6 +3860,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  @return  True if @a __lhs doesn't follow @a __rhs.  False otherwise.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator<=(const _CharT* __lhs,\n \t       const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n@@ -3853,6 +3874,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  @return  True if @a __lhs doesn't precede @a __rhs.  False otherwise.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t       const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n@@ -3866,6 +3888,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  @return  True if @a __lhs doesn't precede @a __rhs.  False otherwise.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t       const _CharT* __rhs)\n@@ -3878,6 +3901,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  @return  True if @a __lhs doesn't precede @a __rhs.  False otherwise.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator>=(const _CharT* __lhs,\n \t     const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n@@ -4060,6 +4084,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n   // DR 1261. Insufficent overloads for to_string / to_wstring\n \n+  _GLIBCXX_NODISCARD\n   inline string\n   to_string(int __val)\n #if _GLIBCXX_USE_CXX11_ABI && (__CHAR_BIT__ * __SIZEOF_INT__) <= 32\n@@ -4074,6 +4099,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     return __str;\n   }\n \n+  _GLIBCXX_NODISCARD\n   inline string\n   to_string(unsigned __val)\n #if _GLIBCXX_USE_CXX11_ABI && (__CHAR_BIT__ * __SIZEOF_INT__) <= 32\n@@ -4085,6 +4111,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     return __str;\n   }\n \n+  _GLIBCXX_NODISCARD\n   inline string\n   to_string(long __val)\n #if _GLIBCXX_USE_CXX11_ABI && (__CHAR_BIT__ * __SIZEOF_LONG__) <= 32\n@@ -4099,6 +4126,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     return __str;\n   }\n \n+  _GLIBCXX_NODISCARD\n   inline string\n   to_string(unsigned long __val)\n #if _GLIBCXX_USE_CXX11_ABI && (__CHAR_BIT__ * __SIZEOF_LONG__) <= 32\n@@ -4110,6 +4138,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     return __str;\n   }\n \n+  _GLIBCXX_NODISCARD\n   inline string\n   to_string(long long __val)\n   {\n@@ -4122,6 +4151,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     return __str;\n   }\n \n+  _GLIBCXX_NODISCARD\n   inline string\n   to_string(unsigned long long __val)\n   {\n@@ -4133,6 +4163,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #if _GLIBCXX_USE_C99_STDIO\n   // NB: (v)snprintf vs sprintf.\n \n+  _GLIBCXX_NODISCARD\n   inline string\n   to_string(float __val)\n   {\n@@ -4142,6 +4173,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t\t\t\t\t   \"%f\", __val);\n   }\n \n+  _GLIBCXX_NODISCARD\n   inline string\n   to_string(double __val)\n   {\n@@ -4151,6 +4183,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t\t\t\t\t   \"%f\", __val);\n   }\n \n+  _GLIBCXX_NODISCARD\n   inline string\n   to_string(long double __val)\n   {\n@@ -4202,40 +4235,47 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n #ifndef _GLIBCXX_HAVE_BROKEN_VSWPRINTF\n   // DR 1261.\n+  _GLIBCXX_NODISCARD\n   inline wstring\n   to_wstring(int __val)\n   { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(int),\n \t\t\t\t\t    L\"%d\", __val); }\n \n+  _GLIBCXX_NODISCARD\n   inline wstring\n   to_wstring(unsigned __val)\n   { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,\n \t\t\t\t\t    4 * sizeof(unsigned),\n \t\t\t\t\t    L\"%u\", __val); }\n \n+  _GLIBCXX_NODISCARD\n   inline wstring\n   to_wstring(long __val)\n   { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(long),\n \t\t\t\t\t    L\"%ld\", __val); }\n \n+  _GLIBCXX_NODISCARD\n   inline wstring\n   to_wstring(unsigned long __val)\n   { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,\n \t\t\t\t\t    4 * sizeof(unsigned long),\n \t\t\t\t\t    L\"%lu\", __val); }\n \n+  _GLIBCXX_NODISCARD\n   inline wstring\n   to_wstring(long long __val)\n   { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,\n \t\t\t\t\t    4 * sizeof(long long),\n \t\t\t\t\t    L\"%lld\", __val); }\n \n+  _GLIBCXX_NODISCARD\n   inline wstring\n   to_wstring(unsigned long long __val)\n   { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,\n \t\t\t\t\t    4 * sizeof(unsigned long long),\n \t\t\t\t\t    L\"%llu\", __val); }\n \n+  _GLIBCXX_NODISCARD\n   inline wstring\n   to_wstring(float __val)\n   {\n@@ -4245,6 +4285,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t\t\t\t\t    L\"%f\", __val);\n   }\n \n+  _GLIBCXX_NODISCARD\n   inline wstring\n   to_wstring(double __val)\n   {\n@@ -4254,6 +4295,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t\t\t\t\t    L\"%f\", __val);\n   }\n \n+  _GLIBCXX_NODISCARD\n   inline wstring\n   to_wstring(long double __val)\n   {\n@@ -4287,6 +4329,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __str_hash_base\n     : public __hash_base<size_t, _StrT>\n     {\n+      [[__nodiscard__]]\n       size_t\n       operator()(const _StrT& __s) const noexcept\n       { return _Hash_impl::hash(__s.data(), __s.length() * sizeof(_CharT)); }"}, {"sha": "2604af2e9aacb819c31ce8db038abb34d23f7333", "filename": "libstdc++-v3/include/std/string_view", "status": "modified", "additions": 93, "deletions": 14, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view?ref=b911ca4231a366ddfd026f190b126bd517f4e640", "patch": "@@ -129,7 +129,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       constexpr basic_string_view(const basic_string_view&) noexcept = default;\n \n-      __attribute__((__nonnull__)) constexpr\n+      [[__gnu__::__nonnull__]]\n+      constexpr\n       basic_string_view(const _CharT* __str) noexcept\n       : _M_len{traits_type::length(__str)},\n \t_M_str{__str}\n@@ -172,74 +173,87 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif // C++23\n #endif // C++20\n \n-\n       constexpr basic_string_view&\n       operator=(const basic_string_view&) noexcept = default;\n \n       // [string.view.iterators], iterator support\n \n+      [[nodiscard]]\n       constexpr const_iterator\n       begin() const noexcept\n       { return this->_M_str; }\n \n+      [[nodiscard]]\n       constexpr const_iterator\n       end() const noexcept\n       { return this->_M_str + this->_M_len; }\n \n+      [[nodiscard]]\n       constexpr const_iterator\n       cbegin() const noexcept\n       { return this->_M_str; }\n \n+      [[nodiscard]]\n       constexpr const_iterator\n       cend() const noexcept\n       { return this->_M_str + this->_M_len; }\n \n+      [[nodiscard]]\n       constexpr const_reverse_iterator\n       rbegin() const noexcept\n       { return const_reverse_iterator(this->end()); }\n \n+      [[nodiscard]]\n       constexpr const_reverse_iterator\n       rend() const noexcept\n       { return const_reverse_iterator(this->begin()); }\n \n+      [[nodiscard]]\n       constexpr const_reverse_iterator\n       crbegin() const noexcept\n       { return const_reverse_iterator(this->end()); }\n \n+      [[nodiscard]]\n       constexpr const_reverse_iterator\n       crend() const noexcept\n       { return const_reverse_iterator(this->begin()); }\n \n       // [string.view.capacity], capacity\n \n+      [[nodiscard]]\n       constexpr size_type\n       size() const noexcept\n       { return this->_M_len; }\n \n+      [[nodiscard]]\n       constexpr size_type\n       length() const noexcept\n       { return _M_len; }\n \n+      [[nodiscard]]\n       constexpr size_type\n       max_size() const noexcept\n       {\n \treturn (npos - sizeof(size_type) - sizeof(void*))\n \t\t/ sizeof(value_type) / 4;\n       }\n \n-      [[nodiscard]] constexpr bool\n+      [[nodiscard]]\n+      constexpr bool\n       empty() const noexcept\n       { return this->_M_len == 0; }\n \n       // [string.view.access], element access\n \n+      [[nodiscard]]\n       constexpr const_reference\n       operator[](size_type __pos) const noexcept\n       {\n \t__glibcxx_assert(__pos < this->_M_len);\n \treturn *(this->_M_str + __pos);\n       }\n \n+      [[nodiscard]]\n       constexpr const_reference\n       at(size_type __pos) const\n       {\n@@ -250,20 +264,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *(this->_M_str + __pos);\n       }\n \n+      [[nodiscard]]\n       constexpr const_reference\n       front() const noexcept\n       {\n \t__glibcxx_assert(this->_M_len > 0);\n \treturn *this->_M_str;\n       }\n \n+      [[nodiscard]]\n       constexpr const_reference\n       back() const noexcept\n       {\n \t__glibcxx_assert(this->_M_len > 0);\n \treturn *(this->_M_str + this->_M_len - 1);\n       }\n \n+      [[nodiscard]]\n       constexpr const_pointer\n       data() const noexcept\n       { return this->_M_str; }\n@@ -305,6 +322,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __rlen;\n       }\n \n+      [[nodiscard]]\n       constexpr basic_string_view\n       substr(size_type __pos = 0, size_type __n = npos) const noexcept(false)\n       {\n@@ -313,6 +331,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn basic_string_view{_M_str + __pos, __rlen};\n       }\n \n+      [[nodiscard]]\n       constexpr int\n       compare(basic_string_view __str) const noexcept\n       {\n@@ -323,25 +342,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __ret;\n       }\n \n+      [[nodiscard]]\n       constexpr int\n       compare(size_type __pos1, size_type __n1, basic_string_view __str) const\n       { return this->substr(__pos1, __n1).compare(__str); }\n \n+      [[nodiscard]]\n       constexpr int\n       compare(size_type __pos1, size_type __n1,\n \t      basic_string_view __str, size_type __pos2, size_type __n2) const\n       {\n \treturn this->substr(__pos1, __n1).compare(__str.substr(__pos2, __n2));\n       }\n \n-      __attribute__((__nonnull__)) constexpr int\n+      [[nodiscard, __gnu__::__nonnull__]]\n+      constexpr int\n       compare(const _CharT* __str) const noexcept\n       { return this->compare(basic_string_view{__str}); }\n \n-      __attribute__((__nonnull__)) constexpr int\n+      [[nodiscard, __gnu__::__nonnull__]]\n+      constexpr int\n       compare(size_type __pos1, size_type __n1, const _CharT* __str) const\n       { return this->substr(__pos1, __n1).compare(basic_string_view{__str}); }\n \n+      [[nodiscard]]\n       constexpr int\n       compare(size_type __pos1, size_type __n1,\n \t      const _CharT* __str, size_type __n2) const noexcept(false)\n@@ -352,19 +376,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus > 201703L\n #define __cpp_lib_starts_ends_with 201711L\n+      [[nodiscard]]\n       constexpr bool\n       starts_with(basic_string_view __x) const noexcept\n       { return this->substr(0, __x.size()) == __x; }\n \n+      [[nodiscard]]\n       constexpr bool\n       starts_with(_CharT __x) const noexcept\n       { return !this->empty() && traits_type::eq(this->front(), __x); }\n \n-      [[__gnu__::__nonnull__]]\n+      [[nodiscard, __gnu__::__nonnull__]]\n       constexpr bool\n       starts_with(const _CharT* __x) const noexcept\n       { return this->starts_with(basic_string_view(__x)); }\n \n+      [[nodiscard]]\n       constexpr bool\n       ends_with(basic_string_view __x) const noexcept\n       {\n@@ -374,127 +401,154 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  && traits_type::compare(end() - __xlen, __x.data(), __xlen) == 0;\n       }\n \n+      [[nodiscard]]\n       constexpr bool\n       ends_with(_CharT __x) const noexcept\n       { return !this->empty() && traits_type::eq(this->back(), __x); }\n \n-      [[__gnu__::__nonnull__]]\n+      [[nodiscard, __gnu__::__nonnull__]]\n       constexpr bool\n       ends_with(const _CharT* __x) const noexcept\n       { return this->ends_with(basic_string_view(__x)); }\n #endif // C++20\n \n #if __cplusplus > 202002L\n #define __cpp_lib_string_contains 202011L\n+      [[nodiscard]]\n       constexpr bool\n       contains(basic_string_view __x) const noexcept\n       { return this->find(__x) != npos; }\n \n+      [[nodiscard]]\n       constexpr bool\n       contains(_CharT __x) const noexcept\n       { return this->find(__x) != npos; }\n \n-      [[__gnu__::__nonnull__]]\n+      [[nodiscard, __gnu__::__nonnull__]]\n       constexpr bool\n       contains(const _CharT* __x) const noexcept\n       { return this->find(__x) != npos; }\n #endif // C++23\n \n       // [string.view.find], searching\n \n+      [[nodiscard]]\n       constexpr size_type\n       find(basic_string_view __str, size_type __pos = 0) const noexcept\n       { return this->find(__str._M_str, __pos, __str._M_len); }\n \n+      [[nodiscard]]\n       constexpr size_type\n       find(_CharT __c, size_type __pos = 0) const noexcept;\n \n+      [[nodiscard]]\n       constexpr size_type\n       find(const _CharT* __str, size_type __pos, size_type __n) const noexcept;\n \n-      __attribute__((__nonnull__)) constexpr size_type\n+      [[nodiscard, __gnu__::__nonnull__]]\n+      constexpr size_type\n       find(const _CharT* __str, size_type __pos = 0) const noexcept\n       { return this->find(__str, __pos, traits_type::length(__str)); }\n \n+      [[nodiscard]]\n       constexpr size_type\n       rfind(basic_string_view __str, size_type __pos = npos) const noexcept\n       { return this->rfind(__str._M_str, __pos, __str._M_len); }\n \n+      [[nodiscard]]\n       constexpr size_type\n       rfind(_CharT __c, size_type __pos = npos) const noexcept;\n \n+      [[nodiscard]]\n       constexpr size_type\n       rfind(const _CharT* __str, size_type __pos, size_type __n) const noexcept;\n \n-      __attribute__((__nonnull__)) constexpr size_type\n+      [[nodiscard, __gnu__::__nonnull__]]\n+      constexpr size_type\n       rfind(const _CharT* __str, size_type __pos = npos) const noexcept\n       { return this->rfind(__str, __pos, traits_type::length(__str)); }\n \n+      [[nodiscard]]\n       constexpr size_type\n       find_first_of(basic_string_view __str, size_type __pos = 0) const noexcept\n       { return this->find_first_of(__str._M_str, __pos, __str._M_len); }\n \n+      [[nodiscard]]\n       constexpr size_type\n       find_first_of(_CharT __c, size_type __pos = 0) const noexcept\n       { return this->find(__c, __pos); }\n \n+      [[nodiscard]]\n       constexpr size_type\n       find_first_of(const _CharT* __str, size_type __pos,\n \t\t    size_type __n) const noexcept;\n \n-      __attribute__((__nonnull__)) constexpr size_type\n+      [[nodiscard, __gnu__::__nonnull__]]\n+      constexpr size_type\n       find_first_of(const _CharT* __str, size_type __pos = 0) const noexcept\n       { return this->find_first_of(__str, __pos, traits_type::length(__str)); }\n \n+      [[nodiscard]]\n       constexpr size_type\n       find_last_of(basic_string_view __str,\n \t\t   size_type __pos = npos) const noexcept\n       { return this->find_last_of(__str._M_str, __pos, __str._M_len); }\n \n+      [[nodiscard]]\n       constexpr size_type\n       find_last_of(_CharT __c, size_type __pos=npos) const noexcept\n       { return this->rfind(__c, __pos); }\n \n+      [[nodiscard]]\n       constexpr size_type\n       find_last_of(const _CharT* __str, size_type __pos,\n \t\t   size_type __n) const noexcept;\n \n-      __attribute__((__nonnull__)) constexpr size_type\n+      [[nodiscard, __gnu__::__nonnull__]]\n+      constexpr size_type\n       find_last_of(const _CharT* __str, size_type __pos = npos) const noexcept\n       { return this->find_last_of(__str, __pos, traits_type::length(__str)); }\n \n+      [[nodiscard]]\n       constexpr size_type\n       find_first_not_of(basic_string_view __str,\n \t\t\tsize_type __pos = 0) const noexcept\n       { return this->find_first_not_of(__str._M_str, __pos, __str._M_len); }\n \n+      [[nodiscard]]\n       constexpr size_type\n       find_first_not_of(_CharT __c, size_type __pos = 0) const noexcept;\n \n+      [[nodiscard]]\n       constexpr size_type\n       find_first_not_of(const _CharT* __str,\n \t\t\tsize_type __pos, size_type __n) const noexcept;\n \n-      __attribute__((__nonnull__)) constexpr size_type\n+      [[nodiscard, __gnu__::__nonnull__]]\n+      constexpr size_type\n       find_first_not_of(const _CharT* __str, size_type __pos = 0) const noexcept\n       {\n \treturn this->find_first_not_of(__str, __pos,\n \t\t\t\t       traits_type::length(__str));\n       }\n \n+      [[nodiscard]]\n       constexpr size_type\n       find_last_not_of(basic_string_view __str,\n \t\t       size_type __pos = npos) const noexcept\n       { return this->find_last_not_of(__str._M_str, __pos, __str._M_len); }\n \n+      [[nodiscard]]\n       constexpr size_type\n       find_last_not_of(_CharT __c, size_type __pos = npos) const noexcept;\n \n+      [[nodiscard]]\n       constexpr size_type\n       find_last_not_of(const _CharT* __str,\n \t\t       size_type __pos, size_type __n) const noexcept;\n \n-      __attribute__((__nonnull__)) constexpr size_type\n+      [[nodiscard, __gnu__::__nonnull__]]\n+      constexpr size_type\n       find_last_not_of(const _CharT* __str,\n \t\t       size_type __pos = npos) const noexcept\n       {\n@@ -539,12 +593,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // type (see N3766).\n \n   template<typename _CharT, typename _Traits>\n+    [[nodiscard]]\n     constexpr bool\n     operator==(basic_string_view<_CharT, _Traits> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.size() == __y.size() && __x.compare(__y) == 0; }\n \n   template<typename _CharT, typename _Traits>\n+    [[nodiscard]]\n     constexpr bool\n     operator==(basic_string_view<_CharT, _Traits> __x,\n                __type_identity_t<basic_string_view<_CharT, _Traits>> __y)\n@@ -553,13 +609,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cpp_lib_three_way_comparison\n   template<typename _CharT, typename _Traits>\n+    [[nodiscard]]\n     constexpr auto\n     operator<=>(basic_string_view<_CharT, _Traits> __x,\n \t\tbasic_string_view<_CharT, _Traits> __y) noexcept\n     -> decltype(__detail::__char_traits_cmp_cat<_Traits>(0))\n     { return __detail::__char_traits_cmp_cat<_Traits>(__x.compare(__y)); }\n \n   template<typename _CharT, typename _Traits>\n+    [[nodiscard]]\n     constexpr auto\n     operator<=>(basic_string_view<_CharT, _Traits> __x,\n \t\t__type_identity_t<basic_string_view<_CharT, _Traits>> __y)\n@@ -568,101 +626,117 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return __detail::__char_traits_cmp_cat<_Traits>(__x.compare(__y)); }\n #else\n   template<typename _CharT, typename _Traits>\n+    [[nodiscard]]\n     constexpr bool\n     operator==(__type_identity_t<basic_string_view<_CharT, _Traits>> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.size() == __y.size() && __x.compare(__y) == 0; }\n \n   template<typename _CharT, typename _Traits>\n+    [[nodiscard]]\n     constexpr bool\n     operator!=(basic_string_view<_CharT, _Traits> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return !(__x == __y); }\n \n   template<typename _CharT, typename _Traits>\n+    [[nodiscard]]\n     constexpr bool\n     operator!=(basic_string_view<_CharT, _Traits> __x,\n                __type_identity_t<basic_string_view<_CharT, _Traits>> __y)\n     noexcept\n     { return !(__x == __y); }\n \n   template<typename _CharT, typename _Traits>\n+    [[nodiscard]]\n     constexpr bool\n     operator!=(__type_identity_t<basic_string_view<_CharT, _Traits>> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return !(__x == __y); }\n \n   template<typename _CharT, typename _Traits>\n+    [[nodiscard]]\n     constexpr bool\n     operator< (basic_string_view<_CharT, _Traits> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) < 0; }\n \n   template<typename _CharT, typename _Traits>\n+    [[nodiscard]]\n     constexpr bool\n     operator< (basic_string_view<_CharT, _Traits> __x,\n                __type_identity_t<basic_string_view<_CharT, _Traits>> __y)\n     noexcept\n     { return __x.compare(__y) < 0; }\n \n   template<typename _CharT, typename _Traits>\n+    [[nodiscard]]\n     constexpr bool\n     operator< (__type_identity_t<basic_string_view<_CharT, _Traits>> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) < 0; }\n \n   template<typename _CharT, typename _Traits>\n+    [[nodiscard]]\n     constexpr bool\n     operator> (basic_string_view<_CharT, _Traits> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) > 0; }\n \n   template<typename _CharT, typename _Traits>\n+    [[nodiscard]]\n     constexpr bool\n     operator> (basic_string_view<_CharT, _Traits> __x,\n                __type_identity_t<basic_string_view<_CharT, _Traits>> __y)\n     noexcept\n     { return __x.compare(__y) > 0; }\n \n   template<typename _CharT, typename _Traits>\n+    [[nodiscard]]\n     constexpr bool\n     operator> (__type_identity_t<basic_string_view<_CharT, _Traits>> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) > 0; }\n \n   template<typename _CharT, typename _Traits>\n+    [[nodiscard]]\n     constexpr bool\n     operator<=(basic_string_view<_CharT, _Traits> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) <= 0; }\n \n   template<typename _CharT, typename _Traits>\n+    [[nodiscard]]\n     constexpr bool\n     operator<=(basic_string_view<_CharT, _Traits> __x,\n                __type_identity_t<basic_string_view<_CharT, _Traits>> __y)\n     noexcept\n     { return __x.compare(__y) <= 0; }\n \n   template<typename _CharT, typename _Traits>\n+    [[nodiscard]]\n     constexpr bool\n     operator<=(__type_identity_t<basic_string_view<_CharT, _Traits>> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) <= 0; }\n \n   template<typename _CharT, typename _Traits>\n+    [[nodiscard]]\n     constexpr bool\n     operator>=(basic_string_view<_CharT, _Traits> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) >= 0; }\n \n   template<typename _CharT, typename _Traits>\n+    [[nodiscard]]\n     constexpr bool\n     operator>=(basic_string_view<_CharT, _Traits> __x,\n                __type_identity_t<basic_string_view<_CharT, _Traits>> __y)\n     noexcept\n     { return __x.compare(__y) >= 0; }\n \n   template<typename _CharT, typename _Traits>\n+    [[nodiscard]]\n     constexpr bool\n     operator>=(__type_identity_t<basic_string_view<_CharT, _Traits>> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n@@ -696,6 +770,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct hash<string_view>\n     : public __hash_base<size_t, string_view>\n     {\n+      [[nodiscard]]\n       size_t\n       operator()(const string_view& __str) const noexcept\n       { return std::_Hash_impl::hash(__str.data(), __str.length()); }\n@@ -709,6 +784,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct hash<wstring_view>\n     : public __hash_base<size_t, wstring_view>\n     {\n+      [[nodiscard]]\n       size_t\n       operator()(const wstring_view& __s) const noexcept\n       { return std::_Hash_impl::hash(__s.data(),\n@@ -724,6 +800,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct hash<u8string_view>\n     : public __hash_base<size_t, u8string_view>\n     {\n+      [[nodiscard]]\n       size_t\n       operator()(const u8string_view& __str) const noexcept\n       { return std::_Hash_impl::hash(__str.data(), __str.length()); }\n@@ -738,6 +815,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct hash<u16string_view>\n     : public __hash_base<size_t, u16string_view>\n     {\n+      [[nodiscard]]\n       size_t\n       operator()(const u16string_view& __s) const noexcept\n       { return std::_Hash_impl::hash(__s.data(),\n@@ -752,6 +830,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct hash<u32string_view>\n     : public __hash_base<size_t, u32string_view>\n     {\n+      [[nodiscard]]\n       size_t\n       operator()(const u32string_view& __s) const noexcept\n       { return std::_Hash_impl::hash(__s.data(),"}, {"sha": "1ae4d3da9764fc5dbca4db8d6418137ff8113340", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2F1.cc?ref=b911ca4231a366ddfd026f190b126bd517f4e640", "patch": "@@ -175,7 +175,7 @@ void test01()\n   sz03 = str02.size();\n   sz04 = str02.length();\n   VERIFY( sz03 == sz04 );\n-  str02.c_str();\n+  (void) str02.c_str();\n   sz03 = str02.size();\n   sz04 = str02.length();\n   VERIFY( sz03 == sz04 );"}, {"sha": "1da273b091ec4bb2e356a8c9e48e43892d92141c", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/char/1.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F1.cc?ref=b911ca4231a366ddfd026f190b126bd517f4e640", "patch": "@@ -74,15 +74,15 @@ void test01()\n   sz01 = str01.size();\n   sz02 = str01.length();\n   VERIFY( sz01 == sz02 );\n-  str01.c_str();\n+  (void) str01.c_str();\n   sz01 = str01.size();\n   sz02 = str01.length();\n   VERIFY( sz01 == sz02 );\n \n   sz01 = str01.length();\n-  str01.c_str();\n+  (void) str01.c_str();\n   str011 = str01 +  \"_addendum_\";\n-  str01.c_str();\n+  (void) str01.c_str();\n   sz02 = str01.length();    \n   VERIFY( sz01 == sz02 );\n   sz02 = str011.length();"}, {"sha": "6f03e346dfef3e56d8cf7229b953a13235b17fc9", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/wchar_t/1.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F1.cc?ref=b911ca4231a366ddfd026f190b126bd517f4e640", "patch": "@@ -71,15 +71,15 @@ void test01()\n   sz01 = str01.size();\n   sz02 = str01.length();\n   VERIFY( sz01 == sz02 );\n-  str01.c_str();\n+  (void) str01.c_str();\n   sz01 = str01.size();\n   sz02 = str01.length();\n   VERIFY( sz01 == sz02 );\n \n   sz01 = str01.length();\n-  str01.c_str();\n+  (void) str01.c_str();\n   str011 = str01 +  L\"_addendum_\";\n-  str01.c_str();\n+  (void) str01.c_str();\n   sz02 = str01.length();    \n   VERIFY( sz01 == sz02 );\n   sz02 = str011.length();"}, {"sha": "ddd9aea867a4c34a70c0f76d8185d001a2dea8aa", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/self_move.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fself_move.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fself_move.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fself_move.cc?ref=b911ca4231a366ddfd026f190b126bd517f4e640", "patch": "@@ -32,7 +32,7 @@ test(const char* s)\n   String s3 __attribute__((unused)) = s1;\n   s1 = std::move(s1);\n \n-  s1.begin(); // causes COW string to \"leak\"\n+  (void) s1.begin(); // causes COW string to \"leak\"\n   s1 = std::move(s1);\n \n   String s4 __attribute__((unused)) = s1;"}, {"sha": "5a176c0b0884798353d89c7478430c091624e370", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/element_access/char/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2F1.cc?ref=b911ca4231a366ddfd026f190b126bd517f4e640", "patch": "@@ -53,7 +53,7 @@ void test01(void)\n   cref cref3 = str01.at(csz01 - 1);\n   VERIFY( cref3 == 'a' );\n   try {\n-    str01.at(csz01);\n+    (void) str01.at(csz01);\n     VERIFY( false ); // Should not get here, as exception thrown.\n   }\n   catch(std::out_of_range& fail) {\n@@ -68,7 +68,7 @@ void test01(void)\n   ref ref3 = str02.at(csz02 - 1);\n   VERIFY( ref3 == 'a' );\n   try {\n-    str02.at(csz02);\n+    (void) str02.at(csz02);\n     VERIFY( false ); // Should not get here, as exception thrown.\n   }\n   catch(std::out_of_range& fail) {"}, {"sha": "3ff8d51edff9cf72c5eb92572b81f36181354cf6", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/element_access/char/21674.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2F21674.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2F21674.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2F21674.cc?ref=b911ca4231a366ddfd026f190b126bd517f4e640", "patch": "@@ -27,5 +27,5 @@ int main()\n {\n   typedef std::string string_type;\n   string_type s;\n-  s[1]; // abort\n+  (void) s[1]; // abort\n }"}, {"sha": "f9a07abe8c3737005026c477497d24e71737c97f", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/element_access/wchar_t/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2F1.cc?ref=b911ca4231a366ddfd026f190b126bd517f4e640", "patch": "@@ -53,7 +53,7 @@ void test01(void)\n   cref cref3 = str01.at(csz01 - 1);\n   VERIFY( cref3 == L'a' );\n   try {\n-    str01.at(csz01);\n+    (void) str01.at(csz01);\n     VERIFY( false ); // Should not get here, as exception thrown.\n   }\n   catch(std::out_of_range& fail) {\n@@ -68,7 +68,7 @@ void test01(void)\n   ref ref3 = str02.at(csz02 - 1);\n   VERIFY( ref3 == L'a' );\n   try {\n-    str02.at(csz02);\n+    (void) str02.at(csz02);\n     VERIFY( false ); // Should not get here, as exception thrown.\n   }\n   catch(std::out_of_range& fail) {"}, {"sha": "fc023a8e93ea29680b3ce428643c47018e6cc425", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/element_access/wchar_t/21674.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2F21674.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2F21674.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2F21674.cc?ref=b911ca4231a366ddfd026f190b126bd517f4e640", "patch": "@@ -27,5 +27,5 @@ int main()\n {\n   typedef std::wstring string_type;\n   string_type s;\n-  s[1]; // abort\n+  (void) s[1]; // abort\n }"}, {"sha": "a9dcd9ab42180154fdc24ec197599347b1811437", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/lwg2758.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Flwg2758.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Flwg2758.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Flwg2758.cc?ref=b911ca4231a366ddfd026f190b126bd517f4e640", "patch": "@@ -40,6 +40,6 @@ int main()\n     x.replace(0, 3, \"foo\", 0, 3);\n     x.replace(0, 3, cs, 0, 3);\n     x = \"bar\";\n-    x.compare(0, 3, \"foo\", 0, 3);\n-    x.compare(0, 3, cs, 0, 3);\n+    (void) x.compare(0, 3, \"foo\", 0, 3);\n+    (void) x.compare(0, 3, cs, 0, 3);\n }"}, {"sha": "6e308baa71ecc4d5bf2e60b55054341af8ae3e86", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/lwg2946.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Flwg2946.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Flwg2946.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Flwg2946.cc?ref=b911ca4231a366ddfd026f190b126bd517f4e640", "patch": "@@ -29,12 +29,12 @@ int main()\n   s.insert(0, {\"abc\", 1});\n   s.replace(0, 1, {\"abc\", 1});\n   s.replace(s.begin(), s.begin(), {\"abc\", 1});\n-  s.find({\"abc\", 1});\n-  s.rfind({\"abc\", 1});\n-  s.find_first_of({\"abc\", 1});\n-  s.find_last_of({\"abc\", 1});\n-  s.find_first_not_of({\"abc\", 1});\n-  s.find_last_not_of({\"abc\", 1});\n-  s.compare({\"abc\", 1});\n-  s.compare(0, 1, {\"abc\", 1});\n+  (void) s.find({\"abc\", 1});\n+  (void) s.rfind({\"abc\", 1});\n+  (void) s.find_first_of({\"abc\", 1});\n+  (void) s.find_last_of({\"abc\", 1});\n+  (void) s.find_first_not_of({\"abc\", 1});\n+  (void) s.find_last_not_of({\"abc\", 1});\n+  (void) s.compare({\"abc\", 1});\n+  (void) s.compare(0, 1, {\"abc\", 1});\n }"}, {"sha": "41bb39113903db20240b4cf3b39c382c93320d7d", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/contains/nonnull.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcontains%2Fnonnull.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcontains%2Fnonnull.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcontains%2Fnonnull.cc?ref=b911ca4231a366ddfd026f190b126bd517f4e640", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=gnu++23 -Wnonnull -O0\" }\n+// { dg-options \"-std=gnu++23 -Wnonnull -O0 -Wno-unused-result\" }\n // { dg-do compile { target c++23 } }\n \n #include <string>"}, {"sha": "32f3449b4e9a9f4eda1250114671753e8d9a31b1", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/ends_with/nonnull.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fends_with%2Fnonnull.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fends_with%2Fnonnull.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fends_with%2Fnonnull.cc?ref=b911ca4231a366ddfd026f190b126bd517f4e640", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=gnu++20 -Wnonnull -O0\" }\n+// { dg-options \"-std=gnu++20 -Wnonnull -O0 -Wno-unused-result\" }\n // { dg-do compile { target c++20 } }\n \n #include <string>"}, {"sha": "9e0d6659e66432e0be8d7f1ccee47efa197cb60a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/starts_with/nonnull.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fstarts_with%2Fnonnull.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fstarts_with%2Fnonnull.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fstarts_with%2Fnonnull.cc?ref=b911ca4231a366ddfd026f190b126bd517f4e640", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=gnu++20 -Wnonnull -O0\" }\n+// { dg-options \"-std=gnu++20 -Wnonnull -O0 -Wno-unused-result\" }\n // { dg-do compile { target c++20 } }\n \n #include <string>"}, {"sha": "be3e41a3766a1264361b6bbc19c9a9e20a7d4d5a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operators/char/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fchar%2F1.cc?ref=b911ca4231a366ddfd026f190b126bd517f4e640", "patch": "@@ -35,12 +35,12 @@ int test01(void)\n   // 2:8-chars_8-chars_\n   // The following triggers -Wstringop-overread.  See PR 103332.\n   str1 = std::string(\"8-chars_\") + \"8-chars_\";\n-  str1.c_str();\n+  (void) str1.c_str();\n   // printf(\"1:%s\\n\", str1.c_str());\n   VERIFY( str1 == \"8-chars_8-chars_\" );\n   str2 = str1 + \"7-chars\";\n   // printf(\"2:%s\\n\", str1.c_str()); //str1 is gone\n-  str1.c_str();\n+  (void) str1.c_str();\n   VERIFY( str1 == \"8-chars_8-chars_\" );\n   return 0;\n }"}, {"sha": "df3ff7c9a526737b890230bdcc267addc9004fc5", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operators/wchar_t/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fwchar_t%2F1.cc?ref=b911ca4231a366ddfd026f190b126bd517f4e640", "patch": "@@ -32,11 +32,11 @@ int test01(void)\n   // 1:8-chars_8-chars_\n   // 2:8-chars_8-chars_\n   str1 = std::wstring(L\"8-chars_\") + L\"8-chars_\";\n-  str1.c_str();\n+  (void) str1.c_str();\n   // wprintf(\"1:%s\\n\", str1.c_str());\n   str2 = str1 + L\"7-chars\";\n   // wprintf(\"2:%s\\n\", str1.c_str()); //str1 is gone\n-  str1.c_str();\n+  (void) str1.c_str();\n   return 0;\n }\n "}, {"sha": "3d162c60667b0974bb6851d8ff117c71e4a3144a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/capacity/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcapacity%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcapacity%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcapacity%2F1.cc?ref=b911ca4231a366ddfd026f190b126bd517f4e640", "patch": "@@ -137,7 +137,7 @@ test01()\n   sz03 = str02.size();\n   sz04 = str02.length();\n   VERIFY( sz03 == sz04 );\n-  str02.data();\n+  (void) str02.data();\n   sz03 = str02.size();\n   sz04 = str02.length();\n   VERIFY( sz03 == sz04 );"}, {"sha": "b27e7d7dcfc9a28b790d7a72129a02c10f0b494f", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/element_access/char/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2F1.cc?ref=b911ca4231a366ddfd026f190b126bd517f4e640", "patch": "@@ -49,7 +49,7 @@ test01()\n   VERIFY( cref3 == 'a' );\n   try\n   {\n-    str01.at(csz01);\n+    (void) str01.at(csz01);\n     VERIFY( false ); // Should not get here, as exception thrown.\n   }\n   catch (std::out_of_range& fail)"}, {"sha": "834d3f626dee4a71bb377526e4f974e129000ab3", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/element_access/char/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2F2.cc?ref=b911ca4231a366ddfd026f190b126bd517f4e640", "patch": "@@ -27,5 +27,5 @@ main()\n {\n   typedef std::string_view string_view_type;\n   string_view_type s;\n-  s[0]; // abort\n+  (void) s[0]; // abort\n }"}, {"sha": "e9df8720fdc28a229ed88a81477c16e111b55297", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/element_access/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2F1.cc?ref=b911ca4231a366ddfd026f190b126bd517f4e640", "patch": "@@ -49,7 +49,7 @@ test01()\n   VERIFY( cref3 == L'a' );\n   try\n   {\n-    str01.at(csz01);\n+    (void) str01.at(csz01);\n     VERIFY( false ); // Should not get here, as exception thrown.\n   }\n   catch (std::out_of_range& fail)"}, {"sha": "840de84f2cf102e437705af2cc090d2c8cb0cdec", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/element_access/wchar_t/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2F2.cc?ref=b911ca4231a366ddfd026f190b126bd517f4e640", "patch": "@@ -29,5 +29,5 @@ main()\n {\n   typedef std::wstring_view string_view_type;\n   string_view_type s;\n-  s[0]; // abort\n+  (void) s[0]; // abort\n }"}, {"sha": "fafadcca01caf9de58a553840be308d66349331a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/contains/nonnull.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcontains%2Fnonnull.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcontains%2Fnonnull.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcontains%2Fnonnull.cc?ref=b911ca4231a366ddfd026f190b126bd517f4e640", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=gnu++23 -Wnonnull -O0\" }\n+// { dg-options \"-std=gnu++23 -Wnonnull -O0 -Wno-unused-result\" }\n // { dg-do compile { target c++23 } }\n \n #include <string_view>"}, {"sha": "50437bb448abe2b535f269c7303d850c002db2ba", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/ends_with/nonnull.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fends_with%2Fnonnull.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fends_with%2Fnonnull.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fends_with%2Fnonnull.cc?ref=b911ca4231a366ddfd026f190b126bd517f4e640", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=gnu++20 -Wnonnull -O0\" }\n+// { dg-options \"-std=gnu++20 -Wnonnull -O0 -Wno-unused-result\" }\n // { dg-do compile { target c++20 } }\n \n #include <string_view>"}, {"sha": "fedba28afa3efa344ebc314cc10ae04b4ff311d4", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/starts_with/nonnull.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fstarts_with%2Fnonnull.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fstarts_with%2Fnonnull.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fstarts_with%2Fnonnull.cc?ref=b911ca4231a366ddfd026f190b126bd517f4e640", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=gnu++20 -Wnonnull -O0\" }\n+// { dg-options \"-std=gnu++20 -Wnonnull -O0 -Wno-unused-result\" }\n // { dg-do compile { target c++20 } }\n \n #include <string_view>"}, {"sha": "2296fd1278f38badef4ee8864ddff00e71a16d60", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sputbackc/char/1.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputbackc%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputbackc%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputbackc%2Fchar%2F1.cc?ref=b911ca4231a366ddfd026f190b126bd517f4e640", "patch": "@@ -41,18 +41,18 @@ void test04()\n \n   // PUT\n   strb_03.str(str_01); //reset\n-  strb_03.str().length();\n-  strb_03.str().length();\n+  (void) strb_03.str().length();\n+  (void) strb_03.str().length();\n   \n   // streamsize sputn(const char_typs* s, streamsize n)\n   // write up to n chars to out_cur from s, returning number assigned\n   // NB *sputn will happily put '\\0' into your stream if you give it a chance*\n   str_tmp = strb_03.str();\n-  str_tmp.length();\n+  (void) str_tmp.length();\n   strb_03.sputn(\"racadabras\", 10);//\"abracadabras or what?\"\n-  strb_03.str().length();\n+  (void) strb_03.str().length();\n   strb_03.sputn(\", i wanna reach out and\", 10);\n-  strb_03.str().length();\n+  (void) strb_03.str().length();\n   str_tmp = strb_02.str();\n   strb_02.sputn(\"racadabra\", 10);\n "}, {"sha": "c44a535350da844d1652626b8c02a9ad49baf6d7", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sputbackc/wchar_t/1.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputbackc%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputbackc%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputbackc%2Fwchar_t%2F1.cc?ref=b911ca4231a366ddfd026f190b126bd517f4e640", "patch": "@@ -41,18 +41,18 @@ void test04()\n \n   // PUT\n   strb_03.str(str_01); //reset\n-  strb_03.str().length();\n-  strb_03.str().length();\n+  (void) strb_03.str().length();\n+  (void) strb_03.str().length();\n   \n   // streamsize sputn(const char_typs* s, streamsize n)\n   // write up to n chars to out_cur from s, returning number assigned\n   // NB *sputn will happily put '\\0' into your stream if you give it a chance*\n   str_tmp = strb_03.str();\n-  str_tmp.length();\n+  (void) str_tmp.length();\n   strb_03.sputn(L\"racadabras\", 10);//\"abracadabras or what?\"\n-  strb_03.str().length();\n+  (void) strb_03.str().length();\n   strb_03.sputn(L\", i wanna reach out and\", 10);\n-  strb_03.str().length();\n+  (void) strb_03.str().length();\n   str_tmp = strb_02.str();\n   strb_02.sputn(L\"racadabra\", 10);\n "}, {"sha": "b4cdb17f3b75c6db7d3d146f50b99efb58e7c1f7", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sungetc/char/1.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsungetc%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsungetc%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsungetc%2Fchar%2F1.cc?ref=b911ca4231a366ddfd026f190b126bd517f4e640", "patch": "@@ -41,18 +41,18 @@ void test04()\n \n   // PUT\n   strb_03.str(str_01); //reset\n-  strb_03.str().length();\n-  strb_03.str().length();\n+  (void) strb_03.str().length();\n+  (void) strb_03.str().length();\n   \n   // streamsize sputn(const char_typs* s, streamsize n)\n   // write up to n chars to out_cur from s, returning number assigned\n   // NB *sputn will happily put '\\0' into your stream if you give it a chance*\n   str_tmp = strb_03.str();\n-  str_tmp.length();\n+  (void) str_tmp.length();\n   strb_03.sputn(\"racadabras\", 10);//\"abracadabras or what?\"\n-  strb_03.str().length();\n+  (void) strb_03.str().length();\n   strb_03.sputn(\", i wanna reach out and\", 10);\n-  strb_03.str().length();\n+  (void) strb_03.str().length();\n   str_tmp = strb_02.str();\n   strb_02.sputn(\"racadabra\", 10);\n "}, {"sha": "eb0ae5e5efa2c01508f55b202b01a90d6d1443c0", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sungetc/wchar_t/1.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsungetc%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b911ca4231a366ddfd026f190b126bd517f4e640/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsungetc%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsungetc%2Fwchar_t%2F1.cc?ref=b911ca4231a366ddfd026f190b126bd517f4e640", "patch": "@@ -41,18 +41,18 @@ void test04()\n \n   // PUT\n   strb_03.str(str_01); //reset\n-  strb_03.str().length();\n-  strb_03.str().length();\n+  (void) strb_03.str().length();\n+  (void) strb_03.str().length();\n   \n   // streamsize sputn(const char_typs* s, streamsize n)\n   // write up to n chars to out_cur from s, returning number assigned\n   // NB *sputn will happily put '\\0' into your stream if you give it a chance*\n   str_tmp = strb_03.str();\n-  str_tmp.length();\n+  (void) str_tmp.length();\n   strb_03.sputn(L\"racadabras\", 10);//\"abracadabras or what?\"\n-  strb_03.str().length();\n+  (void) strb_03.str().length();\n   strb_03.sputn(L\", i wanna reach out and\", 10);\n-  strb_03.str().length();\n+  (void) strb_03.str().length();\n   str_tmp = strb_02.str();\n   strb_02.sputn(L\"racadabra\", 10);\n "}]}