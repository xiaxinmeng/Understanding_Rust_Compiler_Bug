{"sha": "c264208e161830a5642ee3125871c23110508462", "node_id": "C_kwDOANBUbNoAKGMyNjQyMDhlMTYxODMwYTU2NDJlZTMxMjU4NzFjMjMxMTA1MDg0NjI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-12-01T09:21:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-12-01T09:21:20Z"}, "message": "libcpp: Enable P1949R7 for C++98 too [PR100977]\n\nOn Mon, Nov 29, 2021 at 05:53:58PM -0500, Jason Merrill wrote:\n> I'm inclined to go ahead and change C++98 as well; I doubt anyone is relying\n> on the particular C++98 extended character set rules, and we already accept\n> the union of the different sets when not pedantic.\n\nOk, here is an incremental patch to do that also for -std={c,gnu}++98.\n\n2021-12-01  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/100977\n\t* init.c (struct lang_flags): Remove cxx23_identifiers.\n\t(lang_defaults): Remove cxx23_identifiers initializers.\n\t(cpp_set_lang): Don't copy cxx23_identifiers.\n\t* include/cpplib.h (struct cpp_options): Adjust comment about\n\tc11_identifiers.  Remove cxx23_identifiers field.\n\t* lex.c (warn_about_normalization): Use cplusplus instead of\n\tcxx23_identifiers.\n\t* charset.c (ucn_valid_in_identifier): Likewise.\n\n\t* g++.dg/cpp/ucnid-1.C: Adjust expected diagnostics.\n\t* g++.dg/cpp/ucnid-1-utf8.C: Likewise.", "tree": {"sha": "d9ceae0bad702467a9c2e5042ddbe7a7d7066040", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9ceae0bad702467a9c2e5042ddbe7a7d7066040"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c264208e161830a5642ee3125871c23110508462", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c264208e161830a5642ee3125871c23110508462", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c264208e161830a5642ee3125871c23110508462", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c264208e161830a5642ee3125871c23110508462/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35f2c098c81118020b1d288cd739108c8747a520", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35f2c098c81118020b1d288cd739108c8747a520", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35f2c098c81118020b1d288cd739108c8747a520"}], "stats": {"total": 98, "additions": 45, "deletions": 53}, "files": [{"sha": "01172c853c473404c33db69076f182d5239ec02a", "filename": "gcc/testsuite/g++.dg/cpp/ucnid-1-utf8.C", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c264208e161830a5642ee3125871c23110508462/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fucnid-1-utf8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c264208e161830a5642ee3125871c23110508462/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fucnid-1-utf8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fucnid-1-utf8.C?ref=c264208e161830a5642ee3125871c23110508462", "patch": "@@ -1,17 +1,17 @@\n /* { dg-do preprocess } */\n /* { dg-options \"-std=gnu++98 -pedantic\" } */\n \n-\u00aa /* { dg-error \"not valid in an identifier\" } */\n+\u00aa\n \u00ab /* { dg-error \"not valid in an identifier\" } */\n \u00b6 /* { dg-error \"not valid in an identifier\" } */\n-\u00ba /* { dg-error \"not valid in an identifier\" } */\n+\u00ba\n \u00c0\n \u00d6\n-\u0384\n+\u0384 /* { dg-error \"not valid in an identifier\" } */\n \n-\u0669 /* { dg-error \"not valid in an identifier\" } */\n-A\u0669 /* { dg-error \"not valid in an identifier\" } */\n-0\u00ba /* { dg-error \"not valid in an identifier\" } */\n-0\u0669 /* { dg-error \"not valid in an identifier\" } */\n-\u0e59\n+\u0669 /* { dg-error \"not valid at the start of an identifier\" } */\n+A\u0669\n+0\u00ba\n+0\u0669\n+\u0e59 /* { dg-error \"not valid at the start of an identifier\" } */\n A\u0e59"}, {"sha": "b0a64e34d4bc39ea3e1522a40f2cabc4a19ae1b2", "filename": "gcc/testsuite/g++.dg/cpp/ucnid-1.C", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c264208e161830a5642ee3125871c23110508462/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fucnid-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c264208e161830a5642ee3125871c23110508462/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fucnid-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fucnid-1.C?ref=c264208e161830a5642ee3125871c23110508462", "patch": "@@ -1,17 +1,17 @@\n /* { dg-do preprocess } */\n /* { dg-options \"-std=gnu++98 -pedantic\" } */\n \n-\\u00AA /* { dg-error \"not valid in an identifier\" } */\n+\\u00AA\n \\u00AB /* { dg-error \"not valid in an identifier\" } */\n \\u00B6 /* { dg-error \"not valid in an identifier\" } */\n-\\u00BA /* { dg-error \"not valid in an identifier\" } */\n+\\u00BA\n \\u00C0\n \\u00D6\n-\\u0384\n+\\u0384 /* { dg-error \"not valid in an identifier\" } */\n \n-\\u0669 /* { dg-error \"not valid in an identifier\" } */\n-A\\u0669 /* { dg-error \"not valid in an identifier\" } */\n-0\\u00BA /* { dg-error \"not valid in an identifier\" } */\n-0\\u0669 /* { dg-error \"not valid in an identifier\" } */\n-\\u0E59\n+\\u0669 /* { dg-error \"not valid at the start of an identifier\" } */\n+A\\u0669\n+0\\u00BA\n+0\\u0669\n+\\u0E59 /* { dg-error \"not valid at the start of an identifier\" } */\n A\\u0E59"}, {"sha": "0854677e5157dbfa55ca5d8f9dbf652bc093466a", "filename": "libcpp/charset.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c264208e161830a5642ee3125871c23110508462/libcpp%2Fcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c264208e161830a5642ee3125871c23110508462/libcpp%2Fcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.c?ref=c264208e161830a5642ee3125871c23110508462", "patch": "@@ -955,14 +955,12 @@ ucn_valid_in_identifier (cpp_reader *pfile, cppchar_t c,\n   valid_flags = C99 | CXX | C11 | CXX23;\n   if (CPP_PEDANTIC (pfile))\n     {\n-      if (CPP_OPTION (pfile, cxx23_identifiers))\n+      if (CPP_OPTION (pfile, cplusplus))\n \tvalid_flags = CXX23;\n       else if (CPP_OPTION (pfile, c11_identifiers))\n \tvalid_flags = C11;\n       else if (CPP_OPTION (pfile, c99))\n \tvalid_flags = C99;\n-      else if (CPP_OPTION (pfile, cplusplus))\n-\tvalid_flags = CXX;\n     }\n   if (! (ucnranges[mn].flags & valid_flags))\n       return 0;\n@@ -1021,7 +1019,7 @@ ucn_valid_in_identifier (cpp_reader *pfile, cppchar_t c,\n       return 2;\n     }\n \n-  if (CPP_OPTION (pfile, cxx23_identifiers))\n+  if (CPP_OPTION (pfile, cplusplus))\n     invalid_start_flags = NXX23;\n   else if (CPP_OPTION (pfile, c11_identifiers))\n     invalid_start_flags = N11;"}, {"sha": "08c72e7bc26cd73cd7add521681c9ecad9d6f8b5", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c264208e161830a5642ee3125871c23110508462/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c264208e161830a5642ee3125871c23110508462/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=c264208e161830a5642ee3125871c23110508462", "patch": "@@ -491,13 +491,9 @@ struct cpp_options\n   unsigned char ext_numeric_literals;\n \n   /* Nonzero means extended identifiers allow the characters specified\n-     in C11 and C++11.  */\n+     in C11.  */\n   unsigned char c11_identifiers;\n \n-  /* Nonzero means extended identifiers allow the characters specified\n-     in C++23.  */\n-  unsigned char cxx23_identifiers;\n-\n   /* Nonzero for C++ 2014 Standard binary constants.  */\n   unsigned char binary_constants;\n "}, {"sha": "198afd077c1ee342a7ebb7d1e386c126c006fe76", "filename": "libcpp/init.c", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c264208e161830a5642ee3125871c23110508462/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c264208e161830a5642ee3125871c23110508462/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=c264208e161830a5642ee3125871c23110508462", "patch": "@@ -82,7 +82,6 @@ struct lang_flags\n   char extended_numbers;\n   char extended_identifiers;\n   char c11_identifiers;\n-  char cxx23_identifiers;\n   char std;\n   char digraphs;\n   char uliterals;\n@@ -100,31 +99,31 @@ struct lang_flags\n };\n \n static const struct lang_flags lang_defaults[] =\n-{ /*              c99 c++ xnum xid c11 c++23 std digr ulit rlit udlit bincst digsep trig u8chlit vaopt scope dfp szlit elifdef */\n-  /* GNUC89   */  { 0,  0,  1,  0,  0,  0,    0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0 },\n-  /* GNUC99   */  { 1,  0,  1,  1,  0,  0,    0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0 },\n-  /* GNUC11   */  { 1,  0,  1,  1,  1,  0,    0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0 },\n-  /* GNUC17   */  { 1,  0,  1,  1,  1,  0,    0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0 },\n-  /* GNUC2X   */  { 1,  0,  1,  1,  1,  0,    0,  1,   1,   1,   0,    1,     1,     0,   1,      1,   1,     1,   0,   1 },\n-  /* STDC89   */  { 0,  0,  0,  0,  0,  0,    1,  0,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0 },\n-  /* STDC94   */  { 0,  0,  0,  0,  0,  0,    1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0 },\n-  /* STDC99   */  { 1,  0,  1,  1,  0,  0,    1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0 },\n-  /* STDC11   */  { 1,  0,  1,  1,  1,  0,    1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0 },\n-  /* STDC17   */  { 1,  0,  1,  1,  1,  0,    1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0 },\n-  /* STDC2X   */  { 1,  0,  1,  1,  1,  0,    1,  1,   1,   0,   0,    1,     1,     1,   1,      0,   1,     1,   0,   1 },\n-  /* GNUCXX   */  { 0,  1,  1,  1,  0,  0,    0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0 },\n-  /* CXX98    */  { 0,  1,  0,  1,  0,  0,    1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   1,     0,   0,   0 },\n-  /* GNUCXX11 */  { 1,  1,  1,  1,  1,  1,    0,  1,   1,   1,   1,    0,     0,     0,   0,      1,   1,     0,   0,   0 },\n-  /* CXX11    */  { 1,  1,  0,  1,  1,  1,    1,  1,   1,   1,   1,    0,     0,     1,   0,      0,   1,     0,   0,   0 },\n-  /* GNUCXX14 */  { 1,  1,  1,  1,  1,  1,    0,  1,   1,   1,   1,    1,     1,     0,   0,      1,   1,     0,   0,   0 },\n-  /* CXX14    */  { 1,  1,  0,  1,  1,  1,    1,  1,   1,   1,   1,    1,     1,     1,   0,      0,   1,     0,   0,   0 },\n-  /* GNUCXX17 */  { 1,  1,  1,  1,  1,  1,    0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0,   0 },\n-  /* CXX17    */  { 1,  1,  1,  1,  1,  1,    1,  1,   1,   1,   1,    1,     1,     0,   1,      0,   1,     0,   0,   0 },\n-  /* GNUCXX20 */  { 1,  1,  1,  1,  1,  1,    0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0,   0 },\n-  /* CXX20    */  { 1,  1,  1,  1,  1,  1,    1,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0,   0 },\n-  /* GNUCXX23 */  { 1,  1,  1,  1,  1,  1,    0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   1,   1 },\n-  /* CXX23    */  { 1,  1,  1,  1,  1,  1,    1,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   1,   1 },\n-  /* ASM      */  { 0,  0,  1,  0,  0,  0,    0,  0,   0,   0,   0,    0,     0,     0,   0,      0,   0,     0,   0,   0 }\n+{ /*              c99 c++ xnum xid c11 std digr ulit rlit udlit bincst digsep trig u8chlit vaopt scope dfp szlit elifdef */\n+  /* GNUC89   */  { 0,  0,  1,  0,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0 },\n+  /* GNUC99   */  { 1,  0,  1,  1,  0,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0 },\n+  /* GNUC11   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0 },\n+  /* GNUC17   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0 },\n+  /* GNUC2X   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    1,     1,     0,   1,      1,   1,     1,   0,   1 },\n+  /* STDC89   */  { 0,  0,  0,  0,  0,  1,  0,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0 },\n+  /* STDC94   */  { 0,  0,  0,  0,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0 },\n+  /* STDC99   */  { 1,  0,  1,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0 },\n+  /* STDC11   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0 },\n+  /* STDC17   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0 },\n+  /* STDC2X   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    1,     1,     1,   1,      0,   1,     1,   0,   1 },\n+  /* GNUCXX   */  { 0,  1,  1,  1,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0 },\n+  /* CXX98    */  { 0,  1,  0,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   1,     0,   0,   0 },\n+  /* GNUCXX11 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    0,     0,     0,   0,      1,   1,     0,   0,   0 },\n+  /* CXX11    */  { 1,  1,  0,  1,  1,  1,  1,   1,   1,   1,    0,     0,     1,   0,      0,   1,     0,   0,   0 },\n+  /* GNUCXX14 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   0,      1,   1,     0,   0,   0 },\n+  /* CXX14    */  { 1,  1,  0,  1,  1,  1,  1,   1,   1,   1,    1,     1,     1,   0,      0,   1,     0,   0,   0 },\n+  /* GNUCXX17 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0,   0 },\n+  /* CXX17    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      0,   1,     0,   0,   0 },\n+  /* GNUCXX20 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0,   0 },\n+  /* CXX20    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   0,   0 },\n+  /* GNUCXX23 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   1,   1 },\n+  /* CXX23    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0,   1,   1 },\n+  /* ASM      */  { 0,  0,  1,  0,  0,  0,  0,   0,   0,   0,    0,     0,     0,   0,      0,   0,     0,   0,   0 }\n };\n \n /* Sets internal flags correctly for a given language.  */\n@@ -140,7 +139,6 @@ cpp_set_lang (cpp_reader *pfile, enum c_lang lang)\n   CPP_OPTION (pfile, extended_numbers)\t\t = l->extended_numbers;\n   CPP_OPTION (pfile, extended_identifiers)\t = l->extended_identifiers;\n   CPP_OPTION (pfile, c11_identifiers)\t\t = l->c11_identifiers;\n-  CPP_OPTION (pfile, cxx23_identifiers)\t\t = l->cxx23_identifiers;\n   CPP_OPTION (pfile, std)\t\t\t = l->std;\n   CPP_OPTION (pfile, digraphs)\t\t\t = l->digraphs;\n   CPP_OPTION (pfile, uliterals)\t\t\t = l->uliterals;"}, {"sha": "7e56edc21316124f84b5b291a3f5cc8a89b41359", "filename": "libcpp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c264208e161830a5642ee3125871c23110508462/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c264208e161830a5642ee3125871c23110508462/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=c264208e161830a5642ee3125871c23110508462", "patch": "@@ -1838,7 +1838,7 @@ warn_about_normalization (cpp_reader *pfile,\n       if (NORMALIZE_STATE_RESULT (s) == normalized_C)\n \tcpp_warning_at (pfile, CPP_W_NORMALIZE, &rich_loc,\n \t\t\t\"`%.*s' is not in NFKC\", (int) sz, buf);\n-      else if (CPP_OPTION (pfile, cxx23_identifiers))\n+      else if (CPP_OPTION (pfile, cplusplus))\n \tcpp_pedwarning_at (pfile, CPP_W_NORMALIZE, &rich_loc,\n \t\t\t\t  \"`%.*s' is not in NFC\", (int) sz, buf);\n       else"}]}