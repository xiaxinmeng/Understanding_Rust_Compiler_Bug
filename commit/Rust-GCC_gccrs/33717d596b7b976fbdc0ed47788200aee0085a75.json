{"sha": "33717d596b7b976fbdc0ed47788200aee0085a75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM3MTdkNTk2YjdiOTc2ZmJkYzBlZDQ3Nzg4MjAwYWVlMDA4NWE3NQ==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2007-11-18T20:53:16Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2007-11-18T20:53:16Z"}, "message": "trans-expr.c (gfc_conv_missing_dummy): Set the type of the dummy argument to default integer if flagged to do so.\n\n2007-11-18  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\t* trans-expr.c (gfc_conv_missing_dummy): Set the type of the dummy\n\targument to default integer if flagged to do so. Fix typo in comment.\n\t* resolve.c (gfc_resolve_dim_arg): Whitespace cleanup.\n\t* iresolve.c (gfc_resolve_cshift): Do not convert type, mark attribute\n\tfor converting the DIM type appropriately in trans-expr.c.\n\t(gfc_resolve_eoshift): Likewise.\n\t* check.c (dim_check): Remove pre-existing dead code.\n\t(gfc_check_cshift): Enable dim_check to allow DIM as an optional.\n\t(gfc_check_eoshift): Likewise.\n\t* trans_intrinsic.c (gfc_conv_intrinsic_function_args): Fix whitespace.\n\nFrom-SVN: r130276", "tree": {"sha": "303cdfc1589a960500cc95db50a0570b408ad8fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/303cdfc1589a960500cc95db50a0570b408ad8fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33717d596b7b976fbdc0ed47788200aee0085a75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33717d596b7b976fbdc0ed47788200aee0085a75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33717d596b7b976fbdc0ed47788200aee0085a75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33717d596b7b976fbdc0ed47788200aee0085a75/comments", "author": null, "committer": null, "parents": [{"sha": "05969da4c37b0c4120a5ac7b7a803f3f98f972af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05969da4c37b0c4120a5ac7b7a803f3f98f972af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05969da4c37b0c4120a5ac7b7a803f3f98f972af"}], "stats": {"total": 67, "additions": 38, "deletions": 29}, "files": [{"sha": "8e35536a4348fa720aaf2f111b7c8f0908378315", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33717d596b7b976fbdc0ed47788200aee0085a75/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33717d596b7b976fbdc0ed47788200aee0085a75/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=33717d596b7b976fbdc0ed47788200aee0085a75", "patch": "@@ -1,3 +1,16 @@\n+2007-11-18  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\t* trans-expr.c (gfc_conv_missing_dummy): Set the type of the dummy\n+\targument to default integer if flagged to do so. Fix typo in comment.\n+\t* resolve.c (gfc_resolve_dim_arg): Whitespace cleanup.\n+\t* iresolve.c (gfc_resolve_cshift): Do not convert type, mark attribute\n+\tfor converting the DIM type appropriately in trans-expr.c.\n+\t(gfc_resolve_eoshift): Likewise.\n+\t* check.c (dim_check): Remove pre-existing dead code.\n+\t(gfc_check_cshift): Enable dim_check to allow DIM as an optional.\n+\t(gfc_check_eoshift): Likewise.\n+\t* trans_intrinsic.c (gfc_conv_intrinsic_function_args): Fix whitespace.\n+\n 2007-11-18  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/31608"}, {"sha": "511dce63c12e54e1e1dac7ba3c1cddd58d7d6c72", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33717d596b7b976fbdc0ed47788200aee0085a75/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33717d596b7b976fbdc0ed47788200aee0085a75/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=33717d596b7b976fbdc0ed47788200aee0085a75", "patch": "@@ -315,13 +315,6 @@ dim_check (gfc_expr *dim, int n, bool optional)\n   if (dim == NULL)\n     return SUCCESS;\n \n-  if (dim == NULL)\n-    {\n-      gfc_error (\"Missing DIM parameter in intrinsic '%s' at %L\",\n-\t\t gfc_current_intrinsic, gfc_current_intrinsic_where);\n-      return FAILURE;\n-    }\n-\n   if (type_check (dim, n, BT_INTEGER) == FAILURE)\n     return FAILURE;\n \n@@ -870,8 +863,7 @@ gfc_check_cshift (gfc_expr *array, gfc_expr *shift, gfc_expr *dim)\n       /* TODO: more requirements on shift parameter.  */\n     }\n \n-  /* FIXME (PR33317): Allow optional DIM=.  */\n-  if (dim_check (dim, 2, false) == FAILURE)\n+  if (dim_check (dim, 2, true) == FAILURE)\n     return FAILURE;\n \n   return SUCCESS;\n@@ -1040,8 +1032,7 @@ gfc_check_eoshift (gfc_expr *array, gfc_expr *shift, gfc_expr *boundary,\n       /* TODO: more restrictions on boundary.  */\n     }\n \n-  /* FIXME (PR33317): Allow optional DIM=.  */\n-  if (dim_check (dim, 4, false) == FAILURE)\n+  if (dim_check (dim, 4, true) == FAILURE)\n     return FAILURE;\n \n   return SUCCESS;"}, {"sha": "9b6337a54e67f30468962ded489ccc8d34662729", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33717d596b7b976fbdc0ed47788200aee0085a75/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33717d596b7b976fbdc0ed47788200aee0085a75/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=33717d596b7b976fbdc0ed47788200aee0085a75", "patch": "@@ -583,13 +583,10 @@ gfc_resolve_cshift (gfc_expr *f, gfc_expr *array, gfc_expr *shift,\n       gfc_convert_type_warn (shift, &ts, 2, 0);\n     }\n \n-  if (dim != NULL)\n-    {\n-      gfc_resolve_dim_arg (dim);\n-      /* Convert dim to shift's kind, so we don't need so many variations.  */\n-      if (dim->ts.kind != shift->ts.kind)\n-\tgfc_convert_type_warn (dim, &shift->ts, 2, 0);\n-    }\n+  /* Mark this for later setting the type in gfc_conv_missing_dummy.  */\n+  if (dim != NULL && dim->symtree != NULL)\n+    dim->symtree->n.sym->attr.untyped = 1;\n+\n   f->value.function.name\n     = gfc_get_string (PREFIX (\"cshift%d_%d%s\"), n, shift->ts.kind,\n \t\t      array->ts.type == BT_CHARACTER ? \"_char\" : \"\");\n@@ -707,13 +704,9 @@ gfc_resolve_eoshift (gfc_expr *f, gfc_expr *array, gfc_expr *shift,\n       gfc_convert_type_warn (shift, &ts, 2, 0);\n     }\n \n-  if (dim != NULL)\n-    {\n-      gfc_resolve_dim_arg (dim);\n-      /* Convert dim to shift's kind, so we don't need so many variations.  */\n-      if (dim->ts.kind != shift->ts.kind)\n-\tgfc_convert_type_warn (dim, &shift->ts, 2, 0);\n-    }\n+  /* Mark this for later setting the type in gfc_conv_missing_dummy.  */\n+  if (dim != NULL && dim->symtree != NULL)\n+    dim->symtree->n.sym->attr.untyped = 1;\n \n   f->value.function.name\n     = gfc_get_string (PREFIX (\"eoshift%d_%d%s\"), n, shift->ts.kind,"}, {"sha": "6c9856d5f62aea1719cab8b074ab2166caaa9a0a", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33717d596b7b976fbdc0ed47788200aee0085a75/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33717d596b7b976fbdc0ed47788200aee0085a75/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=33717d596b7b976fbdc0ed47788200aee0085a75", "patch": "@@ -3445,11 +3445,13 @@ gfc_resolve_dim_arg (gfc_expr *dim)\n       return FAILURE;\n \n     }\n+\n   if (dim->ts.type != BT_INTEGER)\n     {\n       gfc_error (\"Argument dim at %L must be of INTEGER type\", &dim->where);\n       return FAILURE;\n     }\n+\n   if (dim->ts.kind != gfc_index_integer_kind)\n     {\n       gfc_typespec ts;"}, {"sha": "69031fbb0c5284b9301f201df79866a157565c54", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33717d596b7b976fbdc0ed47788200aee0085a75/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33717d596b7b976fbdc0ed47788200aee0085a75/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=33717d596b7b976fbdc0ed47788200aee0085a75", "patch": "@@ -152,11 +152,21 @@ gfc_conv_missing_dummy (gfc_se * se, gfc_expr * arg, gfc_typespec ts)\n   tree tmp;\n \n   present = gfc_conv_expr_present (arg->symtree->n.sym);\n-  tmp = build3 (COND_EXPR, TREE_TYPE (se->expr), present, se->expr,\n-\t\tfold_convert (TREE_TYPE (se->expr), integer_zero_node));\n+\n+  /* Make sure the type is at least default integer kind to match certain\n+     runtime library functions. (ie cshift and eoshift).  */\n+  if (ts.type == BT_INTEGER && arg->symtree->n.sym->attr.untyped)\n+    {\n+      tmp = gfc_get_int_type (gfc_default_integer_kind);\n+      tmp = fold_convert (tmp, se->expr);\n+    }\n+  else\n+    tmp = build3 (COND_EXPR, TREE_TYPE (se->expr), present, se->expr,\n+\t\t  fold_convert (TREE_TYPE (se->expr), integer_zero_node));\n \n   tmp = gfc_evaluate_now (tmp, &se->pre);\n   se->expr = tmp;\n+\n   if (ts.type == BT_CHARACTER)\n     {\n       tmp = build_int_cst (gfc_charlen_type_node, 0);\n@@ -3400,7 +3410,7 @@ gfc_conv_expr_val (gfc_se * se, gfc_expr * expr)\n     }\n }\n \n-/* Helper to translate and expression and convert it to a particular type.  */\n+/* Helper to translate an expression and convert it to a particular type.  */\n void\n gfc_conv_expr_type (gfc_se * se, gfc_expr * expr, tree type)\n {"}, {"sha": "23c94f651da3cf8ea58f1d2bb9e3f91a079894cf", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33717d596b7b976fbdc0ed47788200aee0085a75/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33717d596b7b976fbdc0ed47788200aee0085a75/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=33717d596b7b976fbdc0ed47788200aee0085a75", "patch": "@@ -210,7 +210,7 @@ gfc_conv_intrinsic_function_args (gfc_se *se, gfc_expr *expr,\n \n       /* If an optional argument is itself an optional dummy argument,\n \t check its presence and substitute a null if absent.  */\n-      if (e->expr_type ==EXPR_VARIABLE\n+      if (e->expr_type == EXPR_VARIABLE\n \t    && e->symtree->n.sym->attr.optional\n \t    && formal\n \t    && formal->optional)"}]}