{"sha": "a7e73b4158f528600ef97aca29201ddc92b3439f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdlNzNiNDE1OGY1Mjg2MDBlZjk3YWNhMjkyMDFkZGM5MmIzNDM5Zg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2019-08-27T10:05:51Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2019-08-27T10:05:51Z"}, "message": "[arm/aarch64] Add comments warning that stack-protector initializer insns shouldn't be split\n\nFollowing the publication of https://kb.cert.org/vuls/id/129209/ I've\nbeen having a look at GCC's implementation for Arm and AArch64.  I\nhaven't identified any issues yet, but it's a bit early to be\ncompletely sure.\n\nOne observation, however, is that the instruction sequence that\ninitializes the stack canary might be vulnerable to producing a\nreusable value if it were ever split early.  I don't think we ever\nwould, because the memory locations involved with the stack protector\nare all marked volatile to ensure that the values are only loaded at\nthe point in time when the test is intended to happen, and that also\nhas the effect of making it unlikely that the value would be reused\nwithout reloading.  Nevertheless, defence in depth is probably\nwarranted here.\n\nSo this patch just adds some comments warning that the patterns should\nnot be split.\n\n\t* config/arm/arm.md (stack_protect_set_insn): Add security-related\n\tcomment.\n\t* config/aarch64/aarch64.md (stack_protect_set_<mode>): Likewise.\n\nFrom-SVN: r274946", "tree": {"sha": "039a54b8909cb0f818dbcbf9cedd9882cb5d5e95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/039a54b8909cb0f818dbcbf9cedd9882cb5d5e95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7e73b4158f528600ef97aca29201ddc92b3439f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7e73b4158f528600ef97aca29201ddc92b3439f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7e73b4158f528600ef97aca29201ddc92b3439f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7e73b4158f528600ef97aca29201ddc92b3439f/comments", "author": null, "committer": null, "parents": [{"sha": "72bb85f8d180725a84b17fb9e6a7a66d4d649af3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72bb85f8d180725a84b17fb9e6a7a66d4d649af3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72bb85f8d180725a84b17fb9e6a7a66d4d649af3"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "b7c0fbeaa9de6edf7e3f53f7b62362069a176a19", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7e73b4158f528600ef97aca29201ddc92b3439f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7e73b4158f528600ef97aca29201ddc92b3439f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7e73b4158f528600ef97aca29201ddc92b3439f", "patch": "@@ -1,3 +1,9 @@\n+2019-08-27  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/arm.md (stack_protect_set_insn): Add security-related\n+\tcomment.\n+\t* config/aarch64/aarch64.md (stack_protect_set_<mode>): Likewise.\n+\n 2019-08-27  Martin Liska  <mliska@suse.cz>\n \n \t* cgraph.c (cgraph_node::remove): Remove dead assignment before"}, {"sha": "88e04df6a807a290d9c245c31677717c51be0cb4", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7e73b4158f528600ef97aca29201ddc92b3439f/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7e73b4158f528600ef97aca29201ddc92b3439f/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=a7e73b4158f528600ef97aca29201ddc92b3439f", "patch": "@@ -7016,13 +7016,15 @@\n  }\n  [(set_attr \"type\" \"mrs\")])\n \n+;; DO NOT SPLIT THIS PATTERN.  It is important for security reasons that the\n+;; canary value does not live beyond the life of this sequence.\n (define_insn \"stack_protect_set_<mode>\"\n   [(set (match_operand:PTR 0 \"memory_operand\" \"=m\")\n \t(unspec:PTR [(match_operand:PTR 1 \"memory_operand\" \"m\")]\n \t UNSPEC_SP_SET))\n    (set (match_scratch:PTR 2 \"=&r\") (const_int 0))]\n   \"\"\n-  \"ldr\\\\t%<w>2, %1\\;str\\\\t%<w>2, %0\\;mov\\t%<w>2,0\"\n+  \"ldr\\\\t%<w>2, %1\\;str\\\\t%<w>2, %0\\;mov\\t%<w>2, 0\"\n   [(set_attr \"length\" \"12\")\n    (set_attr \"type\" \"multiple\")])\n "}, {"sha": "f138d31f01293162fe0713b6bead45d1b7ab0e67", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7e73b4158f528600ef97aca29201ddc92b3439f/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7e73b4158f528600ef97aca29201ddc92b3439f/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=a7e73b4158f528600ef97aca29201ddc92b3439f", "patch": "@@ -8208,15 +8208,17 @@\n   [(set_attr \"arch\" \"t1,32\")]\n )\n \n+;; DO NOT SPLIT THIS INSN.  It's important for security reasons that the\n+;; canary value does not live beyond the life of this sequence.\n (define_insn \"*stack_protect_set_insn\"\n   [(set (match_operand:SI 0 \"memory_operand\" \"=m,m\")\n \t(unspec:SI [(mem:SI (match_operand:SI 1 \"register_operand\" \"+&l,&r\"))]\n \t UNSPEC_SP_SET))\n    (clobber (match_dup 1))]\n   \"\"\n   \"@\n-   ldr\\\\t%1, [%1]\\;str\\\\t%1, %0\\;movs\\t%1,#0\n-   ldr\\\\t%1, [%1]\\;str\\\\t%1, %0\\;mov\\t%1,#0\"\n+   ldr\\\\t%1, [%1]\\;str\\\\t%1, %0\\;movs\\t%1, #0\n+   ldr\\\\t%1, [%1]\\;str\\\\t%1, %0\\;mov\\t%1, #0\"\n   [(set_attr \"length\" \"8,12\")\n    (set_attr \"conds\" \"clob,nocond\")\n    (set_attr \"type\" \"multiple\")"}]}