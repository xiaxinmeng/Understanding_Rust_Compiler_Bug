{"sha": "3342fd71e0465ab4a702480a35043b295fc6fa21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM0MmZkNzFlMDQ2NWFiNGE3MDI0ODBhMzUwNDNiMjk1ZmM2ZmEyMQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2016-01-13T20:03:26Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2016-01-13T20:03:26Z"}, "message": "Improve warning locations (PR66208)\n\n\tPR c/66208\n\t* c-common.c (check_function_nonnull): Remove unnecessary declaration.\n\tAdd new arg loc and pass it down as context.\n\t(check_nonnull_arg): Don't mark ctx arg as unused. Use it as a pointer\n\tto the location to use for the warning.\n\t(check_function_arguments): New arg loc.  All callers changed.  Pass\n\tit to check_function_nonnull.\n\t* c-common.h (check_function_arguments): Adjust declaration.\n\ntestsuite/\n\tPR c/66208\n\t* c-c++-common/pr66208.c: New file.\n\nFrom-SVN: r232345", "tree": {"sha": "c35775b90eda0d70234de508315954e7ece5b4b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c35775b90eda0d70234de508315954e7ece5b4b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3342fd71e0465ab4a702480a35043b295fc6fa21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3342fd71e0465ab4a702480a35043b295fc6fa21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3342fd71e0465ab4a702480a35043b295fc6fa21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3342fd71e0465ab4a702480a35043b295fc6fa21/comments", "author": null, "committer": null, "parents": [{"sha": "2ad3adf102641812fe09742f545f8565bebd74ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ad3adf102641812fe09742f545f8565bebd74ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ad3adf102641812fe09742f545f8565bebd74ac"}], "stats": {"total": 61, "additions": 44, "deletions": 17}, "files": [{"sha": "3d2e621f8fbb05d3fcc97ef1396e9cc975af1414", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3342fd71e0465ab4a702480a35043b295fc6fa21/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3342fd71e0465ab4a702480a35043b295fc6fa21/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3342fd71e0465ab4a702480a35043b295fc6fa21", "patch": "@@ -1,3 +1,14 @@\n+2016-01-13  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\tPR c/66208\n+\t* c-common.c (check_function_nonnull): Remove unnecessary declaration.\n+\tAdd new arg loc and pass it down as context.\n+\t(check_nonnull_arg): Don't mark ctx arg as unused. Use it as a pointer\n+\tto the location to use for the warning.\n+\t(check_function_arguments): New arg loc.  All callers changed.  Pass\n+\tit to check_function_nonnull.\n+\t* c-common.h (check_function_arguments): Adjust declaration.\n+\n 2016-01-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/69156"}, {"sha": "0bfa1f6879e02bbfc952ea54deba05982e7ba652", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3342fd71e0465ab4a702480a35043b295fc6fa21/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3342fd71e0465ab4a702480a35043b295fc6fa21/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=3342fd71e0465ab4a702480a35043b295fc6fa21", "patch": "@@ -394,7 +394,6 @@ static tree handle_bnd_variable_size_attribute (tree *, tree, tree, int, bool *)\n static tree handle_bnd_legacy (tree *, tree, tree, int, bool *);\n static tree handle_bnd_instrument (tree *, tree, tree, int, bool *);\n \n-static void check_function_nonnull (tree, int, tree *);\n static void check_nonnull_arg (void *, tree, unsigned HOST_WIDE_INT);\n static bool nonnull_check_p (tree, unsigned HOST_WIDE_INT);\n static bool get_nonnull_operand (tree, unsigned HOST_WIDE_INT *);\n@@ -9097,11 +9096,10 @@ handle_nonnull_attribute (tree *node, tree ARG_UNUSED (name),\n \n /* Check the argument list of a function call for null in argument slots\n    that are marked as requiring a non-null pointer argument.  The NARGS\n-   arguments are passed in the array ARGARRAY.\n-*/\n+   arguments are passed in the array ARGARRAY.  */\n \n static void\n-check_function_nonnull (tree attrs, int nargs, tree *argarray)\n+check_function_nonnull (location_t loc, tree attrs, int nargs, tree *argarray)\n {\n   tree a;\n   int i;\n@@ -9121,7 +9119,7 @@ check_function_nonnull (tree attrs, int nargs, tree *argarray)\n \n   if (a != NULL_TREE)\n     for (i = 0; i < nargs; i++)\n-      check_function_arguments_recurse (check_nonnull_arg, NULL, argarray[i],\n+      check_function_arguments_recurse (check_nonnull_arg, &loc, argarray[i],\n \t\t\t\t\ti + 1);\n   else\n     {\n@@ -9137,7 +9135,7 @@ check_function_nonnull (tree attrs, int nargs, tree *argarray)\n \t    }\n \n \t  if (a != NULL_TREE)\n-\t    check_function_arguments_recurse (check_nonnull_arg, NULL,\n+\t    check_function_arguments_recurse (check_nonnull_arg, &loc,\n \t\t\t\t\t      argarray[i], i + 1);\n \t}\n     }\n@@ -9223,9 +9221,10 @@ nonnull_check_p (tree args, unsigned HOST_WIDE_INT param_num)\n    via check_function_arguments_recurse.  */\n \n static void\n-check_nonnull_arg (void * ARG_UNUSED (ctx), tree param,\n-\t\t   unsigned HOST_WIDE_INT param_num)\n+check_nonnull_arg (void *ctx, tree param, unsigned HOST_WIDE_INT param_num)\n {\n+  location_t *ploc = (location_t *) ctx;\n+\n   /* Just skip checking the argument if it's not a pointer.  This can\n      happen if the \"nonnull\" attribute was given without an operand\n      list (which means to check every pointer argument).  */\n@@ -9234,8 +9233,8 @@ check_nonnull_arg (void * ARG_UNUSED (ctx), tree param,\n     return;\n \n   if (integer_zerop (param))\n-    warning (OPT_Wnonnull, \"null argument where non-null required \"\n-\t     \"(argument %lu)\", (unsigned long) param_num);\n+    warning_at (*ploc, OPT_Wnonnull, \"null argument where non-null required \"\n+\t\t\"(argument %lu)\", (unsigned long) param_num);\n }\n \n /* Helper for nonnull attribute handling; fetch the operand number\n@@ -9678,15 +9677,17 @@ handle_designated_init_attribute (tree *node, tree name, tree, int,\n \n \f\n /* Check for valid arguments being passed to a function with FNTYPE.\n-   There are NARGS arguments in the array ARGARRAY.  */\n+   There are NARGS arguments in the array ARGARRAY.  LOC should be used for\n+   diagnostics.  */\n void\n-check_function_arguments (const_tree fntype, int nargs, tree *argarray)\n+check_function_arguments (location_t loc, const_tree fntype, int nargs,\n+\t\t\t  tree *argarray)\n {\n   /* Check for null being passed in a pointer argument that must be\n      non-null.  We also need to do this if format checking is enabled.  */\n \n   if (warn_nonnull)\n-    check_function_nonnull (TYPE_ATTRIBUTES (fntype), nargs, argarray);\n+    check_function_nonnull (loc, TYPE_ATTRIBUTES (fntype), nargs, argarray);\n \n   /* Check for errors in format strings.  */\n "}, {"sha": "93e605b061dae36afd59f197c286917b6b8f349d", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3342fd71e0465ab4a702480a35043b295fc6fa21/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3342fd71e0465ab4a702480a35043b295fc6fa21/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=3342fd71e0465ab4a702480a35043b295fc6fa21", "patch": "@@ -782,7 +782,7 @@ extern const char *fname_as_string (int);\n extern tree fname_decl (location_t, unsigned, tree);\n \n extern int check_user_alignment (const_tree, bool);\n-extern void check_function_arguments (const_tree, int, tree *);\n+extern void check_function_arguments (location_t loc, const_tree, int, tree *);\n extern void check_function_arguments_recurse (void (*)\n \t\t\t\t\t      (void *, tree,\n \t\t\t\t\t       unsigned HOST_WIDE_INT),"}, {"sha": "d602e3383e9e84d4c37e6bc08e8c96c08b833507", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3342fd71e0465ab4a702480a35043b295fc6fa21/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3342fd71e0465ab4a702480a35043b295fc6fa21/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=3342fd71e0465ab4a702480a35043b295fc6fa21", "patch": "@@ -3048,7 +3048,7 @@ build_function_call_vec (location_t loc, vec<location_t> arg_loc,\n     return error_mark_node;\n \n   /* Check that the arguments to the function are valid.  */\n-  check_function_arguments (fntype, nargs, argarray);\n+  check_function_arguments (loc, fntype, nargs, argarray);\n \n   if (name != NULL_TREE\n       && !strncmp (IDENTIFIER_POINTER (name), \"__builtin_\", 10))"}, {"sha": "f3f95ef13acab5463b2cf0986c6e0a01ba733515", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3342fd71e0465ab4a702480a35043b295fc6fa21/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3342fd71e0465ab4a702480a35043b295fc6fa21/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=3342fd71e0465ab4a702480a35043b295fc6fa21", "patch": "@@ -7536,7 +7536,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n       for (j = 0; j < nargs; j++)\n \tfargs[j] = maybe_constant_value (argarray[j]);\n \n-      check_function_arguments (TREE_TYPE (fn), nargs, fargs);\n+      check_function_arguments (input_location, TREE_TYPE (fn), nargs, fargs);\n     }\n \n   /* Avoid actually calling copy constructors and copy assignment operators,"}, {"sha": "94267b67f961c009832c41a6da3d47f916cd4c08", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3342fd71e0465ab4a702480a35043b295fc6fa21/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3342fd71e0465ab4a702480a35043b295fc6fa21/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=3342fd71e0465ab4a702480a35043b295fc6fa21", "patch": "@@ -3598,7 +3598,7 @@ cp_build_function_call_vec (tree function, vec<tree, va_gc> **params,\n \n   /* Check for errors in format strings and inappropriately\n      null parameters.  */\n-  check_function_arguments (fntype, nargs, argarray);\n+  check_function_arguments (input_location, fntype, nargs, argarray);\n \n   ret = build_cxx_call (function, nargs, argarray, complain);\n "}, {"sha": "f393e2581d42204ee5e9cb1fb03e1eebce756cfd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3342fd71e0465ab4a702480a35043b295fc6fa21/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3342fd71e0465ab4a702480a35043b295fc6fa21/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3342fd71e0465ab4a702480a35043b295fc6fa21", "patch": "@@ -1,3 +1,8 @@\n+2016-01-13  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\tPR c/66208\n+\t* c-c++-common/pr66208.c: New file.\n+\n 2016-01-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/69156"}, {"sha": "d394c42b76db549583f2db22ef7ffd725529a721", "filename": "gcc/testsuite/c-c++-common/pr66208.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3342fd71e0465ab4a702480a35043b295fc6fa21/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr66208.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3342fd71e0465ab4a702480a35043b295fc6fa21/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr66208.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr66208.c?ref=3342fd71e0465ab4a702480a35043b295fc6fa21", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wnonnull\" } */\n+\n+void foox (char*, ...) __attribute__ ((nonnull (1)));\n+#define foo(p) foox (p, \"p is null\") /* { dg-warning \"null argument\" } */\n+\n+void baz (void)\n+{\n+  foo (0); /* { dg-message \"note: in expansion\" } */\n+}"}]}