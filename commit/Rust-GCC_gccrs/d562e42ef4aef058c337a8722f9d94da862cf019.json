{"sha": "d562e42ef4aef058c337a8722f9d94da862cf019", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU2MmU0MmVmNGFlZjA1OGMzMzdhODcyMmY5ZDk0ZGE4NjJjZjAxOQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-08-26T06:30:34Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-08-26T06:30:34Z"}, "message": "Partially undo Mar 7 change.\n\nPartially undo Mar 7 change.  Only call\nemit_library_call with no_queue == 1 for const functions.\n\nFrom-SVN: r1961", "tree": {"sha": "4321e9a0551f293866d0e00cec288be7f11cef67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4321e9a0551f293866d0e00cec288be7f11cef67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d562e42ef4aef058c337a8722f9d94da862cf019", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d562e42ef4aef058c337a8722f9d94da862cf019", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d562e42ef4aef058c337a8722f9d94da862cf019", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d562e42ef4aef058c337a8722f9d94da862cf019/comments", "author": null, "committer": null, "parents": [{"sha": "2df53c0b9bbeb950836d2a734e9bbc9478e23df0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2df53c0b9bbeb950836d2a734e9bbc9478e23df0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2df53c0b9bbeb950836d2a734e9bbc9478e23df0"}], "stats": {"total": 35, "additions": 22, "deletions": 13}, "files": [{"sha": "7a43acac37b45bfacfe25c6aeb6f0dd596e05a35", "filename": "gcc/expr.c", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d562e42ef4aef058c337a8722f9d94da862cf019/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d562e42ef4aef058c337a8722f9d94da862cf019/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=d562e42ef4aef058c337a8722f9d94da862cf019", "patch": "@@ -1219,12 +1219,12 @@ emit_block_move (x, y, size, align)\n \t}\n \n #ifdef TARGET_MEM_FUNCTIONS\n-      emit_library_call (memcpy_libfunc, 1,\n+      emit_library_call (memcpy_libfunc, 0,\n \t\t\t VOIDmode, 3, XEXP (x, 0), Pmode,\n \t\t\t XEXP (y, 0), Pmode,\n \t\t\t convert_to_mode (Pmode, size, 1), Pmode);\n #else\n-      emit_library_call (bcopy_libfunc, 1,\n+      emit_library_call (bcopy_libfunc, 0,\n \t\t\t VOIDmode, 3, XEXP (y, 0), Pmode,\n \t\t\t XEXP (x, 0), Pmode,\n \t\t\t convert_to_mode (Pmode, size, 1), Pmode);\n@@ -1328,12 +1328,12 @@ clear_storage (object, size)\n   if (GET_MODE (object) == BLKmode)\n     {\n #ifdef TARGET_MEM_FUNCTIONS\n-      emit_library_call (memset_libfunc, 1,\n+      emit_library_call (memset_libfunc, 0,\n \t\t\t VOIDmode, 3,\n \t\t\t XEXP (object, 0), Pmode, const0_rtx, Pmode,\n \t\t\t GEN_INT (size), Pmode);\n #else\n-      emit_library_call (bzero_libfunc, 1,\n+      emit_library_call (bzero_libfunc, 0,\n \t\t\t VOIDmode, 2,\n \t\t\t XEXP (object, 0), Pmode,\n \t\t\t GEN_INT (size), Pmode);\n@@ -1696,11 +1696,11 @@ emit_push_insn (x, mode, type, size, align, partial, reg, extra,\n \t     to force it to pop the bcopy-arguments right away.  */\n \t  NO_DEFER_POP;\n #ifdef TARGET_MEM_FUNCTIONS\n-\t  emit_library_call (memcpy_libfunc, 1,\n+\t  emit_library_call (memcpy_libfunc, 0,\n \t\t\t     VOIDmode, 3, temp, Pmode, XEXP (xinner, 0), Pmode,\n \t\t\t     size, Pmode);\n #else\n-\t  emit_library_call (bcopy_libfunc, 1,\n+\t  emit_library_call (bcopy_libfunc, 0,\n \t\t\t     VOIDmode, 3, XEXP (xinner, 0), Pmode, temp, Pmode,\n \t\t\t     size, Pmode);\n #endif\n@@ -1818,7 +1818,16 @@ emit_push_insn (x, mode, type, size, align, partial, reg, extra,\n \n    NO_QUEUE will be true if and only if the library call is a `const' call\n    which will be enclosed in REG_LIBCALL/REG_RETVAL notes; it is equivalent\n-   to the variable is_const in expand_call.  */\n+   to the variable is_const in expand_call.\n+\n+   NO_QUEUE must be true for const calls, because if it isn't, then\n+   any pending increment will be emitted between REG_LIBCALL/REG_RETVAL notes,\n+   and will be lost if the libcall sequence is optimized away.\n+\n+   NO_QUEUE must be false for non-const calls, because if it isn't, the\n+   call insn will have its CONST_CALL_P bit set, and it will be incorrectly\n+   optimized.  For instance, the instruction scheduler may incorrectly\n+   move memory references across the non-const call.  */\n \n void\n emit_library_call (va_alist)\n@@ -2148,12 +2157,12 @@ expand_assignment (to, from, want_value, suggest_reg)\n       rtx size = expr_size (from);\n \n #ifdef TARGET_MEM_FUNCTIONS\n-      emit_library_call (memcpy_libfunc, 1,\n+      emit_library_call (memcpy_libfunc, 0,\n \t\t\t VOIDmode, 3, XEXP (to_rtx, 0), Pmode,\n \t\t\t XEXP (from_rtx, 0), Pmode,\n \t\t\t size, Pmode);\n #else\n-      emit_library_call (bcopy_libfunc, 1,\n+      emit_library_call (bcopy_libfunc, 0,\n \t\t\t VOIDmode, 3, XEXP (from_rtx, 0), Pmode,\n \t\t\t XEXP (to_rtx, 0), Pmode,\n \t\t\t size, Pmode);\n@@ -2350,10 +2359,10 @@ store_expr (exp, target, suggest_reg)\n \t      if (size != const0_rtx)\n \t\t{\n #ifdef TARGET_MEM_FUNCTIONS\n-\t\t  emit_library_call (memset_libfunc, 1, VOIDmode, 3,\n+\t\t  emit_library_call (memset_libfunc, 0, VOIDmode, 3,\n \t\t\t\t     temp, Pmode, const0_rtx, Pmode, size, Pmode);\n #else\n-\t\t  emit_library_call (bzero_libfunc, 1, VOIDmode, 2,\n+\t\t  emit_library_call (bzero_libfunc, 0, VOIDmode, 2,\n \t\t\t\t     temp, Pmode, size, Pmode);\n #endif\n \t\t}"}, {"sha": "c99bbc797fbf48b089a81aa37d48871fca60a09a", "filename": "gcc/optabs.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d562e42ef4aef058c337a8722f9d94da862cf019/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d562e42ef4aef058c337a8722f9d94da862cf019/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=d562e42ef4aef058c337a8722f9d94da862cf019", "patch": "@@ -1708,12 +1708,12 @@ emit_cmp_insn (x, y, comparison, size, mode, unsignedp, align)\n #endif\n \t{\n #ifdef TARGET_MEM_FUNCTIONS\n-\t  emit_library_call (memcmp_libfunc, 1,\n+\t  emit_library_call (memcmp_libfunc, 0,\n \t\t\t     TYPE_MODE (integer_type_node), 3,\n \t\t\t     XEXP (x, 0), Pmode, XEXP (y, 0), Pmode,\n \t\t\t     size, Pmode);\n #else\n-\t  emit_library_call (bcmp_libfunc, 1,\n+\t  emit_library_call (bcmp_libfunc, 0,\n \t\t\t     TYPE_MODE (integer_type_node), 3,\n \t\t\t     XEXP (x, 0), Pmode, XEXP (y, 0), Pmode,\n \t\t\t     size, Pmode);"}]}