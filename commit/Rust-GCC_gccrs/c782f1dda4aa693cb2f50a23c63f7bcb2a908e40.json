{"sha": "c782f1dda4aa693cb2f50a23c63f7bcb2a908e40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc4MmYxZGRhNGFhNjkzY2IyZjUwYTIzYzYzZjdiY2IyYTkwOGU0MA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2009-04-18T02:10:37Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2009-04-18T02:10:37Z"}, "message": "* doc/extend.texi, doc/invoke.texi: Fix typos.\n\nFrom-SVN: r146303", "tree": {"sha": "59de234a2f7fecfad002219db6088a165c33ea94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59de234a2f7fecfad002219db6088a165c33ea94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c782f1dda4aa693cb2f50a23c63f7bcb2a908e40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c782f1dda4aa693cb2f50a23c63f7bcb2a908e40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c782f1dda4aa693cb2f50a23c63f7bcb2a908e40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c782f1dda4aa693cb2f50a23c63f7bcb2a908e40/comments", "author": null, "committer": null, "parents": [{"sha": "8d22d141f59f033adcc62e886b5f7ad46d78ca92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d22d141f59f033adcc62e886b5f7ad46d78ca92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d22d141f59f033adcc62e886b5f7ad46d78ca92"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "bffa45a36e58e62a4ce0df82d458eae66b7ec3f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c782f1dda4aa693cb2f50a23c63f7bcb2a908e40/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c782f1dda4aa693cb2f50a23c63f7bcb2a908e40/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c782f1dda4aa693cb2f50a23c63f7bcb2a908e40", "patch": "@@ -1,3 +1,7 @@\n+2009-04-18  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* doc/extend.texi, doc/invoke.texi: Fix typos.\n+\n 2009-04-17  Cary Coutant  <ccoutant@google.com>\n \n \t* tree-flow-inline.h (get_lineno): Fix inverted test."}, {"sha": "4a7db02c9021676bf69225a8f6a073a4832d8be0", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c782f1dda4aa693cb2f50a23c63f7bcb2a908e40/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c782f1dda4aa693cb2f50a23c63f7bcb2a908e40/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=c782f1dda4aa693cb2f50a23c63f7bcb2a908e40", "patch": "@@ -6758,7 +6758,7 @@ This is an acceptable initializer even if @var{EXPRESSION} is not a\n constant expression, including the case where\n @code{__builtin_constant_p} returns 1 because @var{EXPRESSION} can be\n folded to a constant but @var{EXPRESSION} contains operands that would\n-not otherwize be permitted in a static initializer (for example,\n+not otherwise be permitted in a static initializer (for example,\n @code{0 && foo ()}).  GCC must be more conservative about evaluating the\n built-in in this case, because it has no opportunity to perform\n optimization."}, {"sha": "3c49a8d81b0edd9cd190a3b89af04f95936929a0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c782f1dda4aa693cb2f50a23c63f7bcb2a908e40/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c782f1dda4aa693cb2f50a23c63f7bcb2a908e40/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c782f1dda4aa693cb2f50a23c63f7bcb2a908e40", "patch": "@@ -15568,14 +15568,14 @@ This option is available for Cygwin and MinGW targets.  It\n specifies that a console application is to be generated, by\n instructing the linker to set the PE header subsystem type\n required for console applications.\n-This is the default behaviour for Cygwin and MinGW targets.\n+This is the default behavior for Cygwin and MinGW targets.\n \n @item -mcygwin\n @opindex mcygwin\n This option is available for Cygwin targets.  It specifies that\n the Cygwin internal interface is to be used for predefined\n preprocessor macros, C runtime libraries and related linker\n-paths and options.  For Cygwin targets this is the default behaviour.\n+paths and options.  For Cygwin targets this is the default behavior.\n This option is deprecated and will be removed in a future release.\n \n @item -mno-cygwin"}]}