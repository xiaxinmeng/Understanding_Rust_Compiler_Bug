{"sha": "1ea7ea181d8d3139df4ea66dc2ee98b27fa66b6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVhN2VhMTgxZDhkMzEzOWRmNGVhNjZkYzJlZTk4YjI3ZmE2NmI2Zg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2018-11-27T01:59:56Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2018-11-27T01:59:56Z"}, "message": "[RS6000] libgcc cfi\n\nThere are a few places in libgcc assembly where we don't emit call\nframe information for functions, potentially breaking unwinding from\nasynchronous signal handlers.  This patch fixes them.  Although I\npatch tramp.S there is no attempt made to provide CFI for the actual\ntrampoline on the stack.  Doing that would require generating CFI at\nrun time and both registering and deregistering it, which is probably\nnot worth doing since it would significantly slow down the call.\n\n\t* config/rs6000/morestack.S (__stack_split_initialize),\n\t(__morestack_get_guard, __morestack_set_guard),\n\t(__morestack_make_guard): Provide CFI covering these functions.\n\t* config/rs6000/tramp.S (__trampoline_setup): Likewise.\n\nFrom-SVN: r266503", "tree": {"sha": "cc0b51bdc527218d6d57587139ce8a46357d33bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc0b51bdc527218d6d57587139ce8a46357d33bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ea7ea181d8d3139df4ea66dc2ee98b27fa66b6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ea7ea181d8d3139df4ea66dc2ee98b27fa66b6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ea7ea181d8d3139df4ea66dc2ee98b27fa66b6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ea7ea181d8d3139df4ea66dc2ee98b27fa66b6f/comments", "author": null, "committer": null, "parents": [{"sha": "28a095763f48725900eb86f7b4ee1b17c2e7afff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28a095763f48725900eb86f7b4ee1b17c2e7afff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28a095763f48725900eb86f7b4ee1b17c2e7afff"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "a4bce25cb231d86e38a31db977bacab79fcfb82d", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea7ea181d8d3139df4ea66dc2ee98b27fa66b6f/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea7ea181d8d3139df4ea66dc2ee98b27fa66b6f/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=1ea7ea181d8d3139df4ea66dc2ee98b27fa66b6f", "patch": "@@ -1,6 +1,13 @@\n+2018-11-27  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/morestack.S (__stack_split_initialize),\n+\t(__morestack_get_guard, __morestack_set_guard),\n+\t(__morestack_make_guard): Provide CFI covering these functions.\n+\t* config/rs6000/tramp.S (__trampoline_setup): Likewise.\n+\n 2018-11-15  Xianmiao Qu  <xianmiao_qu@c-sky.com>\n \n-\t* config/csky/linux-unwind.h (sc_pt_regs): Update for kernel. \n+\t* config/csky/linux-unwind.h (sc_pt_regs): Update for kernel.\n \t(sc_pt_regs_lr): Update for kernel.\n \t(sc_pt_regs_tls): Update for kernel.\n \n@@ -11,7 +18,7 @@\n 2018-11-13  Xianmiao Qu  <xianmiao_qu@c-sky.com>\n \n \t* config/csky/linux-unwind.h (_sig_ucontext_t): Remove.\n-\t(csky_fallback_frame_state): Modify the check of the \n+\t(csky_fallback_frame_state): Modify the check of the\n \tinstructions to adapt to changes in the kernel\n \n 2018-11-09  Stafford Horne  <shorne@gmail.com>\n@@ -243,7 +250,7 @@\n \n 2018-08-22  Iain Sandoe  <iain@sandoe.co.uk>\n \n-\t* config/unwind-dw2-fde-darwin.c \n+\t* config/unwind-dw2-fde-darwin.c\n \t(_darwin10_Unwind_FindEnclosingFunction): move from here ...\n \t* config/darwin10-unwind-find-enc-func.c: \u2026 to here.\n \t* config/t-darwin: Build Darwin10 unwinder shim crt."}, {"sha": "936051eab33cea3d313ebceef7c810470091e824", "filename": "libgcc/config/rs6000/morestack.S", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea7ea181d8d3139df4ea66dc2ee98b27fa66b6f/libgcc%2Fconfig%2Frs6000%2Fmorestack.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea7ea181d8d3139df4ea66dc2ee98b27fa66b6f/libgcc%2Fconfig%2Frs6000%2Fmorestack.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Fmorestack.S?ref=1ea7ea181d8d3139df4ea66dc2ee98b27fa66b6f", "patch": "@@ -304,12 +304,15 @@ DW.ref.__gcc_personality_v0:\n # new thread starts.  This is called from a constructor.\n # void __stack_split_initialize (void)\n ENTRY(__stack_split_initialize)\n+\t.cfi_startproc\n \taddi %r3,%r1,-0x4000\t\t# We should have at least 16K.\n \tstd %r3,-0x7000-64(%r13)\t# tcbhead_t.__private_ss\n \t# void __generic_morestack_set_initial_sp (void *sp, size_t len)\n \tmr %r3,%r1\n \tli %r4, 0x4000\n \tb __generic_morestack_set_initial_sp\n+# The lack of .cfi_endproc here is deliberate.  This function and the\n+# following ones can all use the default FDE.\n \tSIZE (__stack_split_initialize)\n \n \n@@ -335,6 +338,7 @@ ENTRY0(__morestack_make_guard)\n \tsub %r3,%r3,%r4\n \taddi %r3,%r3,BACKOFF\n \tblr\n+\t.cfi_endproc\n \tSIZE (__morestack_make_guard)\n \n "}, {"sha": "637f4510146a19b86229aa7bbab23649d80b0e1b", "filename": "libgcc/config/rs6000/tramp.S", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea7ea181d8d3139df4ea66dc2ee98b27fa66b6f/libgcc%2Fconfig%2Frs6000%2Ftramp.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea7ea181d8d3139df4ea66dc2ee98b27fa66b6f/libgcc%2Fconfig%2Frs6000%2Ftramp.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ftramp.S?ref=1ea7ea181d8d3139df4ea66dc2ee98b27fa66b6f", "patch": "@@ -56,8 +56,10 @@ trampoline_size = .-trampoline_initial\n /* R6 = static chain */\n \n FUNC_START(__trampoline_setup)\n+\t.cfi_startproc\n \tmflr\tr0\t\t/* save return address */\n         bcl\t20,31,.LCF0\t/* load up __trampoline_initial into r7 */\n+\t.cfi_register lr,r0\n .LCF0:\n         mflr\tr11\n         addi\tr7,r11,trampoline_initial-4-.LCF0 /* trampoline address -4 */\n@@ -112,6 +114,7 @@ FUNC_START(__trampoline_setup)\n \taddi\tr30,r30,_GLOBAL_OFFSET_TABLE_-1b@l\n #endif\n \tbl\tJUMP_TARGET(abort)\n+\t.cfi_endproc\n FUNC_END(__trampoline_setup)\n \n #endif\n@@ -144,6 +147,7 @@ trampoline_size = .-trampoline_initial\n \t.popsection\n \n FUNC_START(__trampoline_setup)\n+\t.cfi_startproc\n \taddis 7,2,.LC0@toc@ha\n \tld 7,.LC0@toc@l(7)\t/* trampoline address -8 */\n \n@@ -180,6 +184,7 @@ FUNC_START(__trampoline_setup)\n .Labort:\n \tbl\tJUMP_TARGET(abort)\n \tnop\n+\t.cfi_endproc\n FUNC_END(__trampoline_setup)\n \n #endif"}]}