{"sha": "e35da26d8ed884b27050c6cbfe2460696e4c9ebe", "node_id": "C_kwDOANBUbNoAKGUzNWRhMjZkOGVkODg0YjI3MDUwYzZjYmZlMjQ2MDY5NmU0YzllYmU", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-02T16:27:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-02T16:27:51Z"}, "message": "Merge #988\n\n988: lexer: Add reference and warning documentation r=tschwinge a=CohenArthur\n\nFixes the -fself-test invalid memory accesses and adds documentation\r\nregarding a possible future fix.\r\n\r\nCo-authored-by: tschwinge <thomas@schwinge.name>\r\nCo-authored-by: philberty <philip.herron@embecosm.com>\r\n\r\nCloses #987 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "d10f25c6473712c0709ca854b763f06952142896", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d10f25c6473712c0709ca854b763f06952142896"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e35da26d8ed884b27050c6cbfe2460696e4c9ebe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiH5sHCRBK7hj4Ov3rIwAAgg8IAB/Eaf6hAO69qzkzvHKBe1iN\nxh+O99vdWYL4OCYhTr8tT1q4aEjUMKkinJYEqg3U0BubJMuMieTAhL2xG0lDsFNG\nOXbqdG309xWHoVMQewzSpazNqc0Bt4aqQ6+BGCXBtUabFZEOxweU0G/UTy0Y/zXb\nP7TOHqCwUR8k7rExrsMltH5F9EoiOz8kA7BFCS+NfSlfQwvFMi7bg0Ml+hzFKWDc\nuqJaCbonWeVCZh0SNcHDrXqWuC64hxNGTVuy0L+rnql3RuZigkx89t67UwdOQKb7\n00ImWVycNbVuw9oxvjCa61JpwTrcr6MDm5UtQjqcHSmWE+a14w0YP6P5p2Tm0O4=\n=zNgw\n-----END PGP SIGNATURE-----\n", "payload": "tree d10f25c6473712c0709ca854b763f06952142896\nparent 6cf9f8c99c5813a23d7cec473fedf00683f409e4\nparent 45eac568686745af73848f6c238fefcd87e315de\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1646238471 +0000\ncommitter GitHub <noreply@github.com> 1646238471 +0000\n\nMerge #988\n\n988: lexer: Add reference and warning documentation r=tschwinge a=CohenArthur\n\nFixes the -fself-test invalid memory accesses and adds documentation\r\nregarding a possible future fix.\r\n\r\nCo-authored-by: tschwinge <thomas@schwinge.name>\r\nCo-authored-by: philberty <philip.herron@embecosm.com>\r\n\r\nCloses #987 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e35da26d8ed884b27050c6cbfe2460696e4c9ebe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e35da26d8ed884b27050c6cbfe2460696e4c9ebe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e35da26d8ed884b27050c6cbfe2460696e4c9ebe/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cf9f8c99c5813a23d7cec473fedf00683f409e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cf9f8c99c5813a23d7cec473fedf00683f409e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cf9f8c99c5813a23d7cec473fedf00683f409e4"}, {"sha": "45eac568686745af73848f6c238fefcd87e315de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45eac568686745af73848f6c238fefcd87e315de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45eac568686745af73848f6c238fefcd87e315de"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "039c783c56410e727d7c3b5606ec73ab30f4c872", "filename": "gcc/rust/lex/rust-lex.h", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35da26d8ed884b27050c6cbfe2460696e4c9ebe/gcc%2Frust%2Flex%2Frust-lex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35da26d8ed884b27050c6cbfe2460696e4c9ebe/gcc%2Frust%2Flex%2Frust-lex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-lex.h?ref=e35da26d8ed884b27050c6cbfe2460696e4c9ebe", "patch": "@@ -144,7 +144,30 @@ class Lexer\n   /**\n    * Lex the contents of a string instead of a file\n    */\n-  static Lexer lex_string (std::string input)\n+  // FIXME: This is unsafe!\n+  // Since we are taking a reference to the string's internal buffer, we must\n+  // ensure that the lexer does not outlive the string, which might not always\n+  // be the case.\n+  //\n+  // We could have a fix, which would include using fmemopen() to allocate a\n+  // buffer and copy the string inside it.\n+  // ```\n+  // // There will be an extra nul-terminator byte written on fclose(), so\n+  // // account for that\n+  // auto string_file = fmemopen(NULL, input.length() + 1, \"wr\");\n+  // fwrite(input.c_str(), sizeof(char), input.length(), string_file);\n+  // auto wrapper = RAIIFile(string_file);\n+  // ```\n+  // But sadly our RAIIFile does not support moving really well... And the\n+  // destructor, which calls fclose(), gets called, triggering a lack of a\n+  // buffer to parse :)\n+  //\n+  // We need to look into fixing the RAIIFile so that it supports this\n+  // behaviour. I'm assuming this will be something like fixing one of the copy\n+  // or move constructors, but is outside of the scope of this fix. For now,\n+  // make sure your lexers don't live longer than the strings they're trying\n+  // to lex\n+  static Lexer lex_string (std::string &input)\n   {\n     // We can perform this ugly cast to a non-const char* since we're only\n     // *reading* the string. This would not be valid if we were doing any"}]}