{"sha": "8d1341f797149e33a9cee62b90cc9055b7c542b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQxMzQxZjc5NzE0OWUzM2E5Y2VlNjJiOTBjYzkwNTViN2M1NDJiOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2007-07-14T08:43:48Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2007-07-14T08:43:48Z"}, "message": "re PR tree-optimization/32705 (ICE in set_ssa_val_to, at tree-ssa-sccvn.c:1022)\n\n\tPR tree-optimization/32705\n\t* tree-ssa-sccvn.c (set_ssa_val_to): Accept VN_TOP as value number.\n\t(simplify_binary_expression): Use SSA_VAL consistently.\n\nFrom-SVN: r126637", "tree": {"sha": "4bfc8405f2aee189e4f82ced2f4657732db9b84a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bfc8405f2aee189e4f82ced2f4657732db9b84a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d1341f797149e33a9cee62b90cc9055b7c542b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d1341f797149e33a9cee62b90cc9055b7c542b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d1341f797149e33a9cee62b90cc9055b7c542b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d1341f797149e33a9cee62b90cc9055b7c542b9/comments", "author": null, "committer": null, "parents": [{"sha": "5de7f07cb460aa0b7f149eec08872f85b9f36a23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5de7f07cb460aa0b7f149eec08872f85b9f36a23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5de7f07cb460aa0b7f149eec08872f85b9f36a23"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "4002720655f39f8fa8989f987c096e6eea1d1512", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1341f797149e33a9cee62b90cc9055b7c542b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1341f797149e33a9cee62b90cc9055b7c542b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d1341f797149e33a9cee62b90cc9055b7c542b9", "patch": "@@ -1,3 +1,9 @@\n+2007-07-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR tree-optimization/32705\n+\t* tree-ssa-sccvn.c (set_ssa_val_to): Accept VN_TOP as value number.\n+\t(simplify_binary_expression): Use SSA_VAL consistently.\n+\n 2007-07-13  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/spe.md (SPE_ACC_REGNO): Delete definition."}, {"sha": "53e680c383ae7ae07cea85fe9ca994061fda4894", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1341f797149e33a9cee62b90cc9055b7c542b9/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1341f797149e33a9cee62b90cc9055b7c542b9/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=8d1341f797149e33a9cee62b90cc9055b7c542b9", "patch": "@@ -1017,11 +1017,13 @@ static inline bool\n set_ssa_val_to (tree from, tree to)\n {\n   tree currval;\n-  gcc_assert (to != NULL);\n \n-  /* The only thing we allow as value numbers are ssa_names and\n-     invariants.  So assert that here.  */\n-  gcc_assert (TREE_CODE (to) == SSA_NAME || is_gimple_min_invariant (to));\n+  /* The only thing we allow as value numbers are VN_TOP, ssa_names\n+     and invariants.  So assert that here.  */\n+  gcc_assert (to != NULL_TREE\n+\t      && (to == VN_TOP\n+\t\t  || TREE_CODE (to) == SSA_NAME\n+\t\t  || is_gimple_min_invariant (to)));\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n@@ -1389,15 +1391,15 @@ simplify_binary_expression (tree rhs)\n       if (VN_INFO (op0)->has_constants)\n \top0 = valueize_expr (VN_INFO (op0)->expr);\n       else if (SSA_VAL (op0) != VN_TOP && SSA_VAL (op0) != op0)\n-\top0 = VN_INFO (op0)->valnum;      \n+\top0 = SSA_VAL (op0);\n     }\n \n   if (TREE_CODE (op1) == SSA_NAME)\n     {\n       if (VN_INFO (op1)->has_constants)\n \top1 = valueize_expr (VN_INFO (op1)->expr);\n       else if (SSA_VAL (op1) != VN_TOP && SSA_VAL (op1) != op1)\n-\top1 = VN_INFO (op1)->valnum;\n+\top1 = SSA_VAL (op1);\n     }\n \n   result = fold_binary (TREE_CODE (rhs), TREE_TYPE (rhs), op0, op1);"}]}