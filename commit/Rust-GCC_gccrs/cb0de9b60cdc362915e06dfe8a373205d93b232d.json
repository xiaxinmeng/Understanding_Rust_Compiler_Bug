{"sha": "cb0de9b60cdc362915e06dfe8a373205d93b232d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IwZGU5YjYwY2RjMzYyOTE1ZTA2ZGZlOGEzNzMyMDVkOTNiMjMyZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-08-08T10:18:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-08-08T10:18:53Z"}, "message": "P0325R4 to_array from LFTS with updates\n\nAs an extension to what the standard requires, this also adds\nconditional noexcept-specifiers to the std::to_array functions.\n\n\tP0325R4 to_array from LFTS with updates\n\t* include/experimental/array (to_array): Qualify call to __to_array.\n\t* include/std/array (__cpp_lib_to_array, to_array): Define for C++20.\n\t* include/std/version (__cpp_lib_to_array): Likewise.\n\t* testsuite/23_containers/array/creation/1.cc: New test.\n\t* testsuite/23_containers/array/creation/2.cc: New test.\n\t* testsuite/23_containers/array/creation/3_neg.cc: New test.\n\t* testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc:\n\tUse zero for dg-error line number.\n\nFrom-SVN: r274209", "tree": {"sha": "eb8ea5a352572f604143dbf7c15af88900098bb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb8ea5a352572f604143dbf7c15af88900098bb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb0de9b60cdc362915e06dfe8a373205d93b232d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb0de9b60cdc362915e06dfe8a373205d93b232d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb0de9b60cdc362915e06dfe8a373205d93b232d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb0de9b60cdc362915e06dfe8a373205d93b232d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fddb1847019ceb570c6e0aea0ea779f1f9988cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fddb1847019ceb570c6e0aea0ea779f1f9988cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fddb1847019ceb570c6e0aea0ea779f1f9988cf"}], "stats": {"total": 199, "additions": 195, "deletions": 4}, "files": [{"sha": "29418eb9ad96d07c67b73918b7ac4508402faa66", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb0de9b60cdc362915e06dfe8a373205d93b232d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb0de9b60cdc362915e06dfe8a373205d93b232d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cb0de9b60cdc362915e06dfe8a373205d93b232d", "patch": "@@ -1,3 +1,15 @@\n+2019-08-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tP0325R4 to_array from LFTS with updates\n+\t* include/experimental/array (to_array): Qualify call to __to_array.\n+\t* include/std/array (__cpp_lib_to_array, to_array): Define for C++20.\n+\t* include/std/version (__cpp_lib_to_array): Likewise.\n+\t* testsuite/23_containers/array/creation/1.cc: New test.\n+\t* testsuite/23_containers/array/creation/2.cc: New test.\n+\t* testsuite/23_containers/array/creation/3_neg.cc: New test.\n+\t* testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc:\n+\tUse zero for dg-error line number.\n+\n 2019-08-06  Jonathan Wakely  <jwakely@redhat.com>\n \n \tP1651R0 bind_front should not unwrap reference_wrapper"}, {"sha": "0064a0b3b3daa9d6bcb811e34eb42b7d154a19eb", "filename": "libstdc++-v3/include/experimental/array", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb0de9b60cdc362915e06dfe8a373205d93b232d/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb0de9b60cdc362915e06dfe8a373205d93b232d/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Farray?ref=cb0de9b60cdc362915e06dfe8a373205d93b232d", "patch": "@@ -101,7 +101,7 @@ template <typename _Tp, size_t _Nm>\n   to_array(_Tp (&__a)[_Nm])\n   noexcept(is_nothrow_constructible<remove_cv_t<_Tp>, _Tp&>::value)\n   {\n-    return __to_array(__a, make_index_sequence<_Nm>{});\n+    return experimental::__to_array(__a, make_index_sequence<_Nm>{});\n   }\n \n   // @} group make_array"}, {"sha": "a380f523d440a7d33b576bca51ffaa98f2bb89b6", "filename": "libstdc++-v3/include/std/array", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb0de9b60cdc362915e06dfe8a373205d93b232d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb0de9b60cdc362915e06dfe8a373205d93b232d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=cb0de9b60cdc362915e06dfe8a373205d93b232d", "patch": "@@ -88,7 +88,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *  Sets support random access iterators.\n    *\n    *  @tparam  Tp  Type of element. Required to be a complete type.\n-   *  @tparam  N  Number of elements.\n+   *  @tparam  Nm  Number of elements.\n   */\n   template<typename _Tp, std::size_t _Nm>\n     struct array\n@@ -343,6 +343,44 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       return std::move(_GLIBCXX_STD_C::get<_Int>(__arr));\n     }\n \n+#if __cplusplus > 201703L\n+#define __cpp_lib_to_array 201907L\n+\n+  template<bool _Move = false, typename _Tp, size_t... _Idx>\n+    constexpr array<remove_cv_t<_Tp>, sizeof...(_Idx)>\n+    __to_array(_Tp (&__a)[sizeof...(_Idx)], index_sequence<_Idx...>)\n+    {\n+      if constexpr (_Move)\n+\treturn {{std::move(__a[_Idx])...}};\n+      else\n+\treturn {{__a[_Idx]...}};\n+    }\n+\n+  template<typename _Tp, size_t _Nm>\n+    constexpr array<remove_cv_t<_Tp>, _Nm>\n+    to_array(_Tp (&__a)[_Nm])\n+    noexcept(is_nothrow_constructible_v<_Tp, _Tp&>)\n+    {\n+      static_assert(!is_array_v<_Tp>);\n+      static_assert(is_constructible_v<_Tp, _Tp&>);\n+      if constexpr (is_constructible_v<_Tp, _Tp&>)\n+\treturn _GLIBCXX_STD_C::__to_array(__a, make_index_sequence<_Nm>{});\n+      __builtin_unreachable(); // FIXME: see PR c++/91388\n+    }\n+\n+  template<typename _Tp, size_t _Nm>\n+    constexpr array<remove_cv_t<_Tp>, _Nm>\n+    to_array(_Tp (&&__a)[_Nm])\n+    noexcept(is_nothrow_move_constructible_v<_Tp>)\n+    {\n+      static_assert(!is_array_v<_Tp>);\n+      static_assert(is_move_constructible_v<_Tp>);\n+      if constexpr (is_move_constructible_v<_Tp>)\n+\treturn _GLIBCXX_STD_C::__to_array<1>(__a, make_index_sequence<_Nm>{});\n+      __builtin_unreachable(); // FIXME: see PR c++/91388\n+    }\n+#endif // C++20\n+\n _GLIBCXX_END_NAMESPACE_CONTAINER\n } // namespace std\n "}, {"sha": "5757568d639248a265486f5182672cb79c3546e3", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb0de9b60cdc362915e06dfe8a373205d93b232d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb0de9b60cdc362915e06dfe8a373205d93b232d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=cb0de9b60cdc362915e06dfe8a373205d93b232d", "patch": "@@ -153,6 +153,7 @@\n #define __cpp_lib_atomic_ref 201806L\n #define __cpp_lib_bind_front 201907L\n #define __cpp_lib_bounded_array_traits 201902L\n+#define __cpp_lib_constexpr_algorithms 201711L\n #if __cpp_impl_destroying_delete\n # define __cpp_lib_destroying_delete 201806L\n #endif\n@@ -164,7 +165,7 @@\n #endif\n #define __cpp_lib_list_remove_return_type 201806L\n #define __cpp_lib_math_constants 201907L\n-#define __cpp_lib_constexpr_algorithms 201711L\n+#define __cpp_lib_to_array 201907L\n #endif // C++2a\n #endif // C++17\n #endif // C++14"}, {"sha": "6279d736353192b1a28be7f1a4ab18aaf9752082", "filename": "libstdc++-v3/testsuite/23_containers/array/creation/1.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb0de9b60cdc362915e06dfe8a373205d93b232d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcreation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb0de9b60cdc362915e06dfe8a373205d93b232d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcreation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcreation%2F1.cc?ref=cb0de9b60cdc362915e06dfe8a373205d93b232d", "patch": "@@ -0,0 +1,57 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <array>\n+\n+#ifndef __cpp_lib_to_array\n+# error \"Feature test macro for to_array is missing\"\n+#elif __cpp_lib_to_array < 201907L\n+# error \"Feature test macro for to_array has wrong value\"\n+#endif\n+\n+void test01()\n+{\n+  const char x[6]{};\n+  std::array<char, 6> y = std::to_array(x);\n+\n+  constexpr char x2[] = \"foo\";\n+  constexpr std::array<char, 4> y2 = std::to_array(x2);\n+  static_assert( std::equal(y2.begin(), y2.end(), x2) );\n+}\n+\n+void\n+test02()\n+{\n+  struct MoveOnly\n+  {\n+    constexpr MoveOnly(int i = 0) : i(i) { }\n+    constexpr MoveOnly(MoveOnly&& m) : i(m.i + 100) { }\n+    int i;\n+  };\n+\n+  struct X {\n+    MoveOnly m[3];\n+  };\n+  X x;\n+  std::array<MoveOnly, 3> y = std::to_array(std::move(x).m);\n+\n+  constexpr std::array<MoveOnly, 3> y2 = std::to_array(X{{1, 2, 3}}.m);\n+  static_assert( y2[0].i == 101 && y2[1].i == 102 && y2[2].i == 103 );\n+}"}, {"sha": "725f95061b2b4b9fbc314c591403e53bd8d0b851", "filename": "libstdc++-v3/testsuite/23_containers/array/creation/2.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb0de9b60cdc362915e06dfe8a373205d93b232d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcreation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb0de9b60cdc362915e06dfe8a373205d93b232d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcreation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcreation%2F2.cc?ref=cb0de9b60cdc362915e06dfe8a373205d93b232d", "patch": "@@ -0,0 +1,27 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <version>\n+\n+#ifndef __cpp_lib_to_array\n+# error \"Feature test macro for to_array is missing in <version>\"\n+#elif __cpp_lib_to_array < 201907L\n+# error \"Feature test macro for to_array has wrong value in <version>\"\n+#endif"}, {"sha": "72f389918e03a66e1a3ca88c057ab9ea13091800", "filename": "libstdc++-v3/testsuite/23_containers/array/creation/3_neg.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb0de9b60cdc362915e06dfe8a373205d93b232d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcreation%2F3_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb0de9b60cdc362915e06dfe8a373205d93b232d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcreation%2F3_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcreation%2F3_neg.cc?ref=cb0de9b60cdc362915e06dfe8a373205d93b232d", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <array>\n+\n+void\n+test01()\n+{\n+  int two_dee[3][4];\n+  std::to_array(two_dee); // { dg-error \"here\" }\n+}\n+\n+void\n+test02()\n+{\n+  struct X\n+  {\n+    int two_dee[3][4];\n+  };\n+  std::to_array(X{}.two_dee); // { dg-error \"here\" }\n+}\n+\n+void\n+test03()\n+{\n+  struct MoveOnly\n+  {\n+    MoveOnly() = default;\n+    MoveOnly(MoveOnly&&) = default;\n+  };\n+\n+  MoveOnly mo[2];\n+  std::to_array(mo); // { dg-error \"here\" }\n+\n+  const MoveOnly cmo[3];\n+  std::to_array(std::move(cmo)); // { dg-error \"here\" }\n+}\n+\n+// { dg-prune-output \"static assertion failed\" }"}, {"sha": "393f29de5a7c0a64c3a79b622d093b3eb7d73454", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb0de9b60cdc362915e06dfe8a373205d93b232d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb0de9b60cdc362915e06dfe8a373205d93b232d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc?ref=cb0de9b60cdc362915e06dfe8a373205d93b232d", "patch": "@@ -22,4 +22,4 @@\n \n typedef std::tuple_element<1, std::array<int, 1>>::type type;\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 372 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }"}]}