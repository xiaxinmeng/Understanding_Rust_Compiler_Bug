{"sha": "966010b2eb4a4c52f139b63548533e7bbd74ec9c", "node_id": "C_kwDOANBUbNoAKDk2NjAxMGIyZWI0YTRjNTJmMTM5YjYzNTQ4NTMzZTdiYmQ3NGVjOWM", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-10-06T00:17:24Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-10-06T00:17:24Z"}, "message": "Daily bump.", "tree": {"sha": "79d71e7d7bcd7d2293c6e0e42e979f77547f74f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79d71e7d7bcd7d2293c6e0e42e979f77547f74f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/966010b2eb4a4c52f139b63548533e7bbd74ec9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/966010b2eb4a4c52f139b63548533e7bbd74ec9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/966010b2eb4a4c52f139b63548533e7bbd74ec9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/966010b2eb4a4c52f139b63548533e7bbd74ec9c/comments", "author": null, "committer": null, "parents": [{"sha": "e99dcbb54e07b798c3353124f38336f96a826d43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e99dcbb54e07b798c3353124f38336f96a826d43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e99dcbb54e07b798c3353124f38336f96a826d43"}], "stats": {"total": 417, "additions": 416, "deletions": 1}, "files": [{"sha": "f79e04757c7b62cfde6dda147788a2d5356affde", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966010b2eb4a4c52f139b63548533e7bbd74ec9c/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966010b2eb4a4c52f139b63548533e7bbd74ec9c/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=966010b2eb4a4c52f139b63548533e7bbd74ec9c", "patch": "@@ -1,3 +1,7 @@\n+2022-10-05  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_update_version.py: Do fetch before a push.\n+\n 2022-09-20  Martin Liska  <mliska@suse.cz>\n \n \t* filter-clang-warnings.py: Skip egrep: warning: egrep is"}, {"sha": "e40b049f5e103b449fd1f7edb21cb291fa75c182", "filename": "gcc/ChangeLog", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966010b2eb4a4c52f139b63548533e7bbd74ec9c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966010b2eb4a4c52f139b63548533e7bbd74ec9c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=966010b2eb4a4c52f139b63548533e7bbd74ec9c", "patch": "@@ -1,3 +1,88 @@\n+2022-10-05  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/constraints.md (wD): Delete.\n+\t* doc/md.texi (Machine Constraints): Adjust.\n+\n+2022-10-05  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/vsx.md (vsx_extract_<mode>): Replace define_insn by a\n+\tdefine_expand.  Split the contents to...\n+\t(*vsx_extract_<mode>_0): ... this.  Rewrite.\n+\t(*vsx_extract_<mode>_1): ... and this.  Rewrite.\n+\n+2022-10-05  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/vsx.md (*vsx_extract_<mode>_store): Use \"n\" instead of\n+\t\"wD\" constraint.\n+\n+2022-10-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107060\n+\t* doc/analyzer.texi (__analyzer_get_unknown_ptr): Document.\n+\n+2022-10-05  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config.gcc: Add riscv_vector.h.\n+\t* config/riscv/riscv-builtins.cc: Add RVV builtin types support.\n+\t* config/riscv/riscv-c.cc (riscv_pragma_intrinsic): New function.\n+\t(riscv_register_pragmas): Ditto.\n+\t* config/riscv/riscv-protos.h (riscv_register_pragmas): Ditto.\n+\t(init_builtins): Move declaration from riscv-vector-builtins.h to riscv-protos.h.\n+\t(mangle_builtin_type): Ditto.\n+\t(verify_type_context): Ditto.\n+\t(handle_pragma_vector): New function.\n+\t* config/riscv/riscv-vector-builtins.cc (GTY): New variable.\n+\t(register_vector_type): New function.\n+\t(init_builtins): Add RVV builtin types support.\n+\t(handle_pragma_vector): New function.\n+\t* config/riscv/riscv-vector-builtins.h (GCC_RISCV_V_BUILTINS_H): Change\n+\tname according to file name.\n+\t(GCC_RISCV_VECTOR_BUILTINS_H): Ditto.\n+\t(init_builtins): Remove declaration in riscv-vector-builtins.h.\n+\t(mangle_builtin_type): Ditto.\n+\t(verify_type_context): Ditto.\n+\t* config/riscv/riscv.cc: Adjust for RVV builtin types support.\n+\t* config/riscv/riscv.h (REGISTER_TARGET_PRAGMAS): New macro.\n+\t* config/riscv/t-riscv: Remove redundant file including.\n+\t* config/riscv/riscv_vector.h: New file.\n+\n+2022-10-05  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op.cc (operator_cast::fold_range): Handle truncating casts\n+\tfor nonzero masks.\n+\n+2022-10-05  Martin Liska  <mliska@suse.cz>\n+\n+\tPR c/107156\n+\t* attribs.h (lookup_attribute_by_prefix): Support the attribute\n+\tstarting with underscore (_Noreturn).\n+\n+2022-10-05  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/107052\n+\t* gimple-range-op.cc (cfn_popcount::fold_range): Take into account\n+\tnonzero bit mask.\n+\n+2022-10-05  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/107052\n+\t* range-op.cc (operator_cast::fold_range): Set nonzero mask.\n+\n+2022-10-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR tree-optimization/106698\n+\t* pointer-query.cc (handle_array_ref): Fix handling of low bound.\n+\n+2022-10-05  Vineet Gupta  <vineetg@rivosinc.com>\n+\n+\t* config/riscv/riscv-c.cc (riscv_cpu_cpp_builtins):\n+\tRemove __riscv_cmodel_pic, that deprecated in last version.\n+\n+2022-10-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107072\n+\t* Makefile.in (ANALYZER_OBJS): Add analyzer/call-summary.o.\n+\n 2022-10-04  Jakub Jelinek  <jakub@redhat.com>\n \n \t* attribs.h (remove_attribute): Declare overload with additional"}, {"sha": "5ba2bc5284f7623cdb75f8cb301a3f577e484ccb", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966010b2eb4a4c52f139b63548533e7bbd74ec9c/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966010b2eb4a4c52f139b63548533e7bbd74ec9c/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=966010b2eb4a4c52f139b63548533e7bbd74ec9c", "patch": "@@ -1 +1 @@\n-20221005\n+20221006"}, {"sha": "627d9d729a91a28458d6a840a0c2c22a9662bc3b", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966010b2eb4a4c52f139b63548533e7bbd74ec9c/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966010b2eb4a4c52f139b63548533e7bbd74ec9c/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=966010b2eb4a4c52f139b63548533e7bbd74ec9c", "patch": "@@ -1,3 +1,182 @@\n+2022-10-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analysis-plan.cc: Simplify includes.\n+\t* analyzer-pass.cc: Likewise.\n+\t* analyzer-selftests.cc: Likewise.\n+\t* analyzer.cc: Likewise.\n+\t* analyzer.h: Add includes of \"json.h\" and \"tristate.h\".\n+\t* call-info.cc: Simplify includes.\n+\t* call-string.cc: Likewise.\n+\t* call-summary.cc: Likewise.\n+\t* checker-path.cc: Likewise.\n+\t* complexity.cc: Likewise.\n+\t* constraint-manager.cc: Likewise.\n+\t* diagnostic-manager.cc: Likewise.\n+\t* engine.cc: Likewise.\n+\t* feasible-graph.cc: Likewise.\n+\t* known-function-manager.cc: Likewise.\n+\t* pending-diagnostic.cc: Likewise.\n+\t* program-point.cc: Likewise.\n+\t* program-state.cc: Likewise.\n+\t* region-model-asm.cc: Likewise.\n+\t* region-model-impl-calls.cc: Likewise.\n+\t* region-model-manager.cc: Likewise.\n+\t* region-model-reachability.cc: Likewise.\n+\t* region-model.cc: Likewise.\n+\t* region-model.h: Include \"selftest.h\".\n+\t* region.cc: Simplify includes.\n+\t* sm-fd.cc: Likewise.\n+\t* sm-file.cc: Likewise.\n+\t* sm-malloc.cc: Likewise.\n+\t* sm-pattern-test.cc: Likewise.\n+\t* sm-sensitive.cc: Likewise.\n+\t* sm-signal.cc: Likewise.\n+\t* sm-taint.cc: Likewise.\n+\t* sm.cc: Likewise.\n+\t* state-purge.cc: Likewise.\n+\t* store.cc: Likewise.\n+\t* store.h: Likewise.\n+\t* supergraph.cc: Likewise.\n+\t* svalue.cc: Likewise.\n+\t* svalue.h: Likewise.\n+\t* trimmed-graph.cc: Likewise.\n+\t* varargs.cc: Likewise.\n+\n+2022-10-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107060\n+\t* call-summary.cc\n+\t(call_summary_replay::convert_svalue_from_summary_1): Handle NULL\n+\tresults from convert_svalue_from_summary in SK_UNARY_OP and\n+\tSK_BIN_OP.\n+\t* engine.cc (impl_region_model_context::on_unknown_change): Bail\n+\tout on svalues that can't have associated state.\n+\t* region-model-impl-calls.cc\n+\t(region_model::impl_call_analyzer_get_unknown_ptr): New.\n+\t* region-model.cc (region_model::on_stmt_pre): Handle\n+\t\"__analyzer_get_unknown_ptr\".\n+\t* region-model.h\n+\t(region_model::impl_call_analyzer_get_unknown_ptr): New decl.\n+\t* store.cc (store::replay_call_summary_cluster): Avoid trying to\n+\tcreate binding clusters for base regions that shouldn't have them.\n+\n+2022-10-05  Martin Liska  <mliska@suse.cz>\n+\n+\t* call-summary.cc (call_summary_replay::call_summary_replay):\n+\t  Remove unused variable and arguments.\n+\t* call-summary.h: Likewise.\n+\t* engine.cc (exploded_node::on_stmt): Likewise.\n+\t(exploded_node::replay_call_summaries): Likewise.\n+\t(exploded_node::replay_call_summary): Likewise.\n+\t* exploded-graph.h (class exploded_node): Likewise.\n+\n+2022-10-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107072\n+\t* analyzer-logging.h: Include \"diagnostic-core.h\".\n+\t* analyzer.h: Include \"function.h\".\n+\t(class call_summary): New forward decl.\n+\t(class call_summary_replay): New forward decl.\n+\t(struct per_function_data): New forward decl.\n+\t(struct interesting_t): New forward decl.\n+\t(custom_edge_info::update_state): New vfunc.\n+\t* call-info.cc (custom_edge_info::update_state): New.\n+\t* call-summary.cc: New file.\n+\t* call-summary.h: New file.\n+\t* constraint-manager.cc: Include \"analyzer/call-summary.h\".\n+\t(class replay_fact_visitor): New.\n+\t(constraint_manager::replay_call_summary): New.\n+\t* constraint-manager.h (constraint_manager::replay_call_summary):\n+\tNew.\n+\t* engine.cc: Include \"analyzer/call-summary.h\".\n+\t(exploded_node::on_stmt): Handle call summaries.\n+\t(class call_summary_edge_info): New.\n+\t(exploded_node::replay_call_summaries): New.\n+\t(exploded_node::replay_call_summary): New.\n+\t(per_function_data::~per_function_data): New.\n+\t(per_function_data::add_call_summary): Move here from header and\n+\treimplement.\n+\t(exploded_graph::process_node): Call update_state rather than\n+\tupdate_model when handling bifurcation\n+\t(viz_callgraph_node::dump_dot): Use a regular label rather\n+\tthan an HTML table; add summaries to dump.\n+\t* exploded-graph.h: Include \"alloc-pool.h\", \"fibonacci_heap.h\",\n+\t\"supergraph.h\", \"sbitmap.h\", \"shortest-paths.h\", \"analyzer/sm.h\",\n+\t\"analyzer/program-state.h\", and \"analyzer/diagnostic-manager.h\".\n+\t(exploded_node::replay_call_summaries): New decl.\n+\t(exploded_node::replay_call_summary): New decl.\n+\t(per_function_data::~per_function_data): New decl.\n+\t(per_function_data::add_call_summary): Move implemention from\n+\theader.\n+\t(per_function_data::m_summaries): Update type of element.\n+\t* known-function-manager.h: Include \"analyzer/analyzer-logging.h\".\n+\t* program-point.h: Include \"pretty-print.h\" and\n+\t\"analyzer/call-string.h\".\n+\t* program-state.cc: Include \"analyzer/call-summary.h\".\n+\t(sm_state_map::replay_call_summary): New.\n+\t(program_state::replay_call_summary): New.\n+\t* program-state.h (sm_state_map::replay_call_summary): New decl.\n+\t(program_state::replay_call_summary): New decl.\n+\t* region-model-manager.cc\n+\t(region_model_manager::get_or_create_asm_output_svalue): New\n+\toverload.\n+\t* region-model-manager.h\n+\t(region_model_manager::get_or_create_asm_output_svalue): New\n+\toverload decl.\n+\t* region-model.cc: Include \"analyzer/call-summary.h\".\n+\t(region_model::maybe_update_for_edge): Remove call to\n+\tregion_model::update_for_call_summary on\n+\tSUPEREDGE_INTRAPROCEDURAL_CALL.\n+\t(region_model::update_for_call_summary): Delete.\n+\t(region_model::replay_call_summary): New.\n+\t* region-model.h (region_model::replay_call_summary): New decl.\n+\t(region_model::update_for_call_summary): Delete decl.\n+\t* store.cc: Include \"analyzer/call-summary.h\".\n+\t(store::replay_call_summary): New.\n+\t(store::replay_call_summary_cluster): New.\n+\t* store.h: Include \"tristate.h\".\n+\t(is_a_helper <const ana::concrete_binding *>::test): New.\n+\t(store::replay_call_summary): New decl.\n+\t(store::replay_call_summary_cluster): New decl.\n+\t* supergraph.cc (get_ultimate_function_for_cgraph_edge): Remove\n+\t\"static\" from decl.\n+\t(supergraph_call_edge): Make stmt param const.\n+\t* supergraph.h: Include \"ordered-hash-map.h\", \"cfg.h\",\n+\t\"basic-block.h\", \"gimple.h\", \"gimple-iterator.h\", and \"digraph.h\".\n+\t(supergraph_call_edge): Make stmt param const.\n+\t(get_ultimate_function_for_cgraph_edge): New decl.\n+\t* svalue.cc (compound_svalue::compound_svalue): Assert that we're\n+\tnot nesting compound_svalues.\n+\t* svalue.h: Include \"json.h\", \"analyzer/store.h\", and\n+\t\"analyzer/program-point.h\".\n+\t(asm_output_svalue::get_num_outputs): New accessor.\n+\n+2022-10-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* region-model.h: Include \"analyzer/region-model-manager.h\"\n+\t(class region_model_manager): Move decl to...\n+\t* region-model-manager.h: ...this new file.\n+\n+2022-10-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* region-model-manager.cc\n+\t(region_model_manager::maybe_fold_unaryop): Fold -(-(VAL)) to VAL.\n+\n+2022-10-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* region-model-manager.cc\n+\t(region_model_manager::get_or_create_widening_svalue): Use a\n+\tfunction_point rather than a program_point.\n+\t* region-model.cc (selftest::test_widening_constraints): Likewise.\n+\t* region-model.h\n+\t(region_model_manager::get_or_create_widening_svalue): Likewise.\n+\t(model_merger::get_function_point): New.\n+\t* svalue.cc (svalue::can_merge_p): Use a function_point rather\n+\tthan a program_point.\n+\t(svalue::can_merge_p): Likewise.\n+\t* svalue.h (widening_svalue::key_t): Likewise.\n+\t(widening_svalue::widening_svalue): Likewise.\n+\n 2022-09-12  Martin Liska  <mliska@suse.cz>\n \n \t* region-model.cc (region_model::maybe_complain_about_infoleak):"}, {"sha": "1fc07990e2866b9577a882677ac144793d59ee46", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966010b2eb4a4c52f139b63548533e7bbd74ec9c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966010b2eb4a4c52f139b63548533e7bbd74ec9c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=966010b2eb4a4c52f139b63548533e7bbd74ec9c", "patch": "@@ -1,3 +1,8 @@\n+2022-10-05  Jason Merrill  <jason@redhat.com>\n+\n+\t* tree.cc (lvalue_kind) [VIEW_CONVERT_EXPR]: Change prvalue to\n+\txvalue.\n+\n 2022-10-04  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/107154"}, {"sha": "f359f120e8396858d5b4093fb8b624c9d10d97a9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966010b2eb4a4c52f139b63548533e7bbd74ec9c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966010b2eb4a4c52f139b63548533e7bbd74ec9c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=966010b2eb4a4c52f139b63548533e7bbd74ec9c", "patch": "@@ -1,3 +1,43 @@\n+2022-10-05  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* dump-parse-tree.cc (show_omp_assumes): New.\n+\t(show_omp_clauses, show_namespace): Call it.\n+\t(show_omp_node, show_code_node): Handle OpenMP ASSUME.\n+\t* gfortran.h (enum gfc_statement): Add ST_OMP_ASSUME,\n+\tST_OMP_END_ASSUME, ST_OMP_ASSUMES and ST_NOTHING.\n+\t(gfc_exec_op): Add EXEC_OMP_ASSUME.\n+\t(gfc_omp_assumptions): New struct.\n+\t(gfc_get_omp_assumptions): New XCNEW #define.\n+\t(gfc_omp_clauses, gfc_namespace): Add assume member.\n+\t(gfc_resolve_omp_assumptions): New prototype.\n+\t* match.h (gfc_match_omp_assume, gfc_match_omp_assumes): New.\n+\t* openmp.cc (omp_code_to_statement): Forward declare.\n+\t(enum gfc_omp_directive_kind, struct gfc_omp_directive): New.\n+\t(gfc_free_omp_clauses): Free assume member and its struct data.\n+\t(enum omp_mask2): Add OMP_CLAUSE_ASSUMPTIONS.\n+\t(gfc_omp_absent_contains_clause): New.\n+\t(gfc_match_omp_clauses): Call it; optionally use passed\n+\tomp_clauses argument.\n+\t(omp_verify_merge_absent_contains, gfc_match_omp_assume,\n+\t gfc_match_omp_assumes, gfc_resolve_omp_assumptions): New.\n+\t(resolve_omp_clauses): Call the latter.\n+\t(gfc_resolve_omp_directive, omp_code_to_statement): Handle\n+\tEXEC_OMP_ASSUME.\n+\t* parse.cc (decode_omp_directive): Parse OpenMP ASSUME(S).\n+\t(next_statement, parse_executable, parse_omp_structured_block):\n+\tHandle ST_OMP_ASSUME.\n+\t(case_omp_decl): Add ST_OMP_ASSUMES.\n+\t(gfc_ascii_statement): Handle Assumes, optional return\n+\tstring without '!$OMP '/'!$ACC ' prefix.\n+\t* parse.h (gfc_ascii_statement): Add optional bool arg to prototype.\n+\t* resolve.cc (gfc_resolve_blocks, gfc_resolve_code): Add\n+\tEXEC_OMP_ASSUME.\n+\t(gfc_resolve): Resolve ASSUMES directive.\n+\t* symbol.cc (gfc_free_namespace): Free omp_assumes member.\n+\t* st.cc (gfc_free_statement): Handle EXEC_OMP_ASSUME.\n+\t* trans-openmp.cc (gfc_trans_omp_directive): Likewise.\n+\t* trans.cc (trans_code): Likewise.\n+\n 2022-10-04  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* parse.cc (decode_omp_directive): Handle '(end) loop' and 'scan'"}, {"sha": "584fba4c8fdb30957d0b5b2bda8f5a9a9c8631b6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966010b2eb4a4c52f139b63548533e7bbd74ec9c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966010b2eb4a4c52f139b63548533e7bbd74ec9c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=966010b2eb4a4c52f139b63548533e7bbd74ec9c", "patch": "@@ -1,3 +1,91 @@\n+2022-10-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107158\n+\t* gcc.dg/analyzer/call-summaries-pr107158.c: New test.\n+\n+2022-10-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107060\n+\t* gcc.dg/analyzer/analyzer-decls.h (__analyzer_get_unknown_ptr):\n+\tNew decl.\n+\t* gcc.dg/analyzer/call-summaries-2.c\n+\t(test_summarized_writes_param_to_ptr_unknown): New test.\n+\n+2022-10-05  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/assume-1.f90: New test.\n+\t* gfortran.dg/gomp/assume-2.f90: New test.\n+\t* gfortran.dg/gomp/assumes-1.f90: New test.\n+\t* gfortran.dg/gomp/assumes-2.f90: New test.\n+\n+2022-10-05  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/base/pragma-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/pragma-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/pragma-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/user-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/user-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/user-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/user-4.c: New test.\n+\t* gcc.target/riscv/rvv/base/user-5.c: New test.\n+\t* gcc.target/riscv/rvv/base/user-6.c: New test.\n+\t* gcc.target/riscv/rvv/base/vread_csr.c: New test.\n+\t* gcc.target/riscv/rvv/base/vwrite_csr.c: New test.\n+\n+2022-10-05  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/107052\n+\t* gcc.dg/tree-ssa/pr107052.c: New file.\n+\n+2022-10-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/lto26.adb: New test.\n+\t* gnat.dg/lto26_pkg1.ads, gnat.dg/lto26_pkg1.adb: New helper.\n+\t* gnat.dg/lto26_pkg2.ads, gnat.dg/lto26_pkg2.adb: Likewise.\n+\n+2022-10-05  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/106679\n+\t* gcc.dg/tree-prof/cmpsf-1.c: Mark as a known limitation.\n+\n+2022-10-05  Torbj\u00f6rn SVENSSON  <torbjorn.svensson@foss.st.com>\n+\t    Yvan ROUX   <yvan.roux@foss.st.com>\n+\n+\t* gcc.target/arm/stack-protector-1.c: Use 'bl' instead of 'b'\n+\tinstruction.\n+\t* gcc.target/arm/stack-protector-3.c: Likewise.\n+\n+2022-10-05  Torbj\u00f6rn SVENSSON  <torbjorn.svensson@foss.st.com>\n+\t    Yvan ROUX   <yvan.roux@foss.st.com>\n+\n+\t* g++.dg/modules/bad-mapper-1.C: Also accept CreateProcess.\n+\n+2022-10-05  Torbj\u00f6rn SVENSSON  <torbjorn.svensson@foss.st.com>\n+\t    Yvan ROUX   <yvan.roux@foss.st.com>\n+\n+\t* gcc.misc-tests/outputs.exp: Use \"@nul\" for Windows,\n+\t\"@/dev/null\" for other environments.\n+\n+2022-10-05  Vineet Gupta  <vineetg@rivosinc.com>\n+\n+\t* gcc.target/riscv/predef-1.c: Remove __riscv_cmodel_pic check.\n+\t* gcc.target/riscv/predef-2.c: Ditto.\n+\t* gcc.target/riscv/predef-3.c: Ditto.\n+\t* gcc.target/riscv/predef-4.c: Ditto.\n+\t* gcc.target/riscv/predef-5.c: Ditto.\n+\t* gcc.target/riscv/predef-6.c: Ditto.\n+\t* gcc.target/riscv/predef-7.c: Ditto.\n+\t* gcc.target/riscv/predef-8.c: Ditto.\n+\n+2022-10-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107072\n+\t* gcc.dg/analyzer/call-summaries-2.c: New test.\n+\t* gcc.dg/analyzer/call-summaries-3.c: New test.\n+\t* gcc.dg/analyzer/call-summaries-asm-x86.c: New test.\n+\t* gcc.dg/analyzer/call-summaries-malloc.c: New test.\n+\t* gcc.dg/analyzer/call-summaries-pr107072.c: New test.\n+\n 2022-10-04  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/107154"}, {"sha": "67794934fe6d06bbcafcdb5d89b5a433b4010a54", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966010b2eb4a4c52f139b63548533e7bbd74ec9c/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966010b2eb4a4c52f139b63548533e7bbd74ec9c/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=966010b2eb4a4c52f139b63548533e7bbd74ec9c", "patch": "@@ -1,3 +1,7 @@\n+2022-10-05  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* libgomp.texi (OpenMP 5.1 Impl. Status): Mark 'assume' as 'Y'.\n+\n 2022-10-04  Jakub Jelinek  <jakub@redhat.com>\n \n \t* libgomp.texi (Support begin/end declare target syntax in C/C++):"}, {"sha": "a357c7e1813a7eaa6e2b9cc9c8feabfe241bac4f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966010b2eb4a4c52f139b63548533e7bbd74ec9c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966010b2eb4a4c52f139b63548533e7bbd74ec9c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=966010b2eb4a4c52f139b63548533e7bbd74ec9c", "patch": "@@ -1,3 +1,13 @@\n+2022-10-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/Makefile.in: Regenerate.\n+\n+2022-10-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/invoke.h (__invoke_r): Check\n+\t__has_builtin(__reference_converts_from_temporary) before using\n+\tbuilt-in.\n+\n 2022-10-04  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/std/ranges/adaptors/join_with/1.cc: Remove unused"}]}