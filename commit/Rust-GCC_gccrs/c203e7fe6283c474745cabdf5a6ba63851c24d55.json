{"sha": "c203e7fe6283c474745cabdf5a6ba63851c24d55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIwM2U3ZmU2MjgzYzQ3NDc0NWNhYmRmNWE2YmE2Mzg1MWMyNGQ1NQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2002-01-10T16:55:14Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-01-10T16:55:14Z"}, "message": "varasm.c: Fix formatting.\n\n\t* varasm.c: Fix formatting.\n\t* varray.c: Likewise.\n\t* vmsdbgout.c: Likewise.\n\t* xcoffout.c: Likewise.\n\nFrom-SVN: r48735", "tree": {"sha": "da0fc47c67e1c2039adfdc7ebefe2d5318977a42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da0fc47c67e1c2039adfdc7ebefe2d5318977a42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c203e7fe6283c474745cabdf5a6ba63851c24d55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c203e7fe6283c474745cabdf5a6ba63851c24d55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c203e7fe6283c474745cabdf5a6ba63851c24d55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c203e7fe6283c474745cabdf5a6ba63851c24d55/comments", "author": null, "committer": null, "parents": [{"sha": "bcb3bc6d901f28c1ea237584198c89e5aff2a074", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcb3bc6d901f28c1ea237584198c89e5aff2a074", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcb3bc6d901f28c1ea237584198c89e5aff2a074"}], "stats": {"total": 151, "additions": 88, "deletions": 63}, "files": [{"sha": "23609c6141983ee8c2944c5cd29e99f4f564bb9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c203e7fe6283c474745cabdf5a6ba63851c24d55/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c203e7fe6283c474745cabdf5a6ba63851c24d55/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c203e7fe6283c474745cabdf5a6ba63851c24d55", "patch": "@@ -1,3 +1,10 @@\n+2002-01-10  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* varasm.c: Fix formatting.\n+\t* varray.c: Likewise.\n+\t* vmsdbgout.c: Likewise.\n+\t* xcoffout.c: Likewise.\n+\n Thu Jan 10 17:19:12 CET 2002  Jan Hubicka  <jh@suse.cz>\n \n \t* cfgcleanup.c (try_forward_edges): Properly initialize nthreaded_edges;"}, {"sha": "3ad78504263ea0b3f00da2f2340b101dfefe8932", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c203e7fe6283c474745cabdf5a6ba63851c24d55/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c203e7fe6283c474745cabdf5a6ba63851c24d55/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=c203e7fe6283c474745cabdf5a6ba63851c24d55", "patch": "@@ -2425,7 +2425,7 @@ static struct constant_descriptor *const_hash_table[MAX_HASH_TABLE];\n    they are actually used.  This will be if something takes its address or if\n    there is a usage of the string in the RTL of a function.  */\n \n-#define STRHASH(x) ((hashval_t)((long)(x) >> 3))\n+#define STRHASH(x) ((hashval_t) ((long) (x) >> 3))\n \n struct deferred_string\n {\n@@ -2590,7 +2590,7 @@ const_hash (exp)\n \telse if (GET_CODE (value.base) == LABEL_REF)\n \t  hi = value.offset + CODE_LABEL_NUMBER (XEXP (value.base, 0)) * 13;\n \telse\n-\t  abort();\n+\t  abort ();\n \n \thi &= (1 << HASHBITS) - 1;\n \thi %= MAX_HASH_TABLE;"}, {"sha": "eef2234099a18b970feeb2bbb72cff1a16aaba89", "filename": "gcc/varray.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c203e7fe6283c474745cabdf5a6ba63851c24d55/gcc%2Fvarray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c203e7fe6283c474745cabdf5a6ba63851c24d55/gcc%2Fvarray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarray.c?ref=c203e7fe6283c474745cabdf5a6ba63851c24d55", "patch": "@@ -1,5 +1,5 @@\n /* Virtual array support.\n-   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Cygnus Solutions.\n \n    This file is part of GCC.\n@@ -62,7 +62,7 @@ varray_grow (va, n)\n       size_t old_data_size = old_elements * element_size;\n       size_t data_size = n * element_size;\n \n-      va = (varray_type) xrealloc ((char *)va, VARRAY_HDR_SIZE + data_size);\n+      va = (varray_type) xrealloc ((char *) va, VARRAY_HDR_SIZE + data_size);\n       va->num_elements = n;\n       if (n > old_elements)\n \tmemset (&va->data.c[old_data_size], 0, data_size - old_data_size);"}, {"sha": "da3948bcb3f1a4f22038e110702845b4b26672ec", "filename": "gcc/vmsdbgout.c", "status": "modified", "additions": 62, "deletions": 48, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c203e7fe6283c474745cabdf5a6ba63851c24d55/gcc%2Fvmsdbgout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c203e7fe6283c474745cabdf5a6ba63851c24d55/gcc%2Fvmsdbgout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvmsdbgout.c?ref=c203e7fe6283c474745cabdf5a6ba63851c24d55", "patch": "@@ -1,6 +1,6 @@\n /* Output VMS debug format symbol table information from the GNU C compiler.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Douglas B. Rupp (rupp@gnat.com).\n \n This file is part of GNU CC.\n@@ -277,37 +277,49 @@ static char text_end_label[MAX_ARTIFICIAL_LABEL_BYTES];\n #endif\n \n #ifndef ASM_OUTPUT_DEBUG_DELTA2\n-#define ASM_OUTPUT_DEBUG_DELTA2(FILE,LABEL1,LABEL2)\t\t\t\\\n- do {\tfprintf ((FILE), \"\\t%s\\t\", UNALIGNED_SHORT_ASM_OP);\t\t\\\n-\tassemble_name (FILE, LABEL1);\t\t\t\t\t\\\n-\tfprintf (FILE, \"-\");\t\t\t\t\t\t\\\n-\tassemble_name (FILE, LABEL2);\t\t\t\t\t\\\n-  } while (0)\n+#define ASM_OUTPUT_DEBUG_DELTA2(FILE,LABEL1,LABEL2)\t\t\t \\\n+  do\t\t\t\t\t\t\t\t\t \\\n+    {\t\t\t\t\t\t\t\t\t \\\n+      fprintf ((FILE), \"\\t%s\\t\", UNALIGNED_SHORT_ASM_OP);\t\t \\\n+      assemble_name (FILE, LABEL1);\t\t\t\t\t \\\n+      fprintf (FILE, \"-\");\t\t\t\t\t\t \\\n+      assemble_name (FILE, LABEL2);\t\t\t\t\t \\\n+    }\t\t\t\t\t\t\t\t\t \\\n+  while (0)\n #endif\n \n #ifndef ASM_OUTPUT_DEBUG_DELTA4\n-#define ASM_OUTPUT_DEBUG_DELTA4(FILE,LABEL1,LABEL2)\t\t\t\\\n- do {\tfprintf ((FILE), \"\\t%s\\t\", UNALIGNED_INT_ASM_OP);\t\t\\\n-\tassemble_name (FILE, LABEL1);\t\t\t\t\t\\\n-\tfprintf (FILE, \"-\");\t\t\t\t\t\t\\\n-\tassemble_name (FILE, LABEL2);\t\t\t\t\t\\\n-  } while (0)\n+#define ASM_OUTPUT_DEBUG_DELTA4(FILE,LABEL1,LABEL2)\t\t\t \\\n+  do\t\t\t\t\t\t\t\t\t \\\n+    {\t\t\t\t\t\t\t\t\t \\\n+      fprintf ((FILE), \"\\t%s\\t\", UNALIGNED_INT_ASM_OP);\t\t\t \\\n+      assemble_name (FILE, LABEL1);\t\t\t\t\t \\\n+      fprintf (FILE, \"-\");\t\t\t\t\t\t \\\n+      assemble_name (FILE, LABEL2);\t\t\t\t\t \\\n+    }\t\t\t\t\t\t\t\t\t \\\n+  while (0)\n #endif\n \n #ifndef ASM_OUTPUT_DEBUG_ADDR_DELTA\n-#define ASM_OUTPUT_DEBUG_ADDR_DELTA(FILE,LABEL1,LABEL2)\t\t\t\\\n- do {\tfprintf ((FILE), \"\\t%s\\t\", UNALIGNED_PTR_ASM_OP);\t\t\\\n-\tassemble_name (FILE, LABEL1);\t\t\t\t\t\\\n-\tfprintf (FILE, \"-\");\t\t\t\t\t\t\\\n-\tassemble_name (FILE, LABEL2);\t\t\t\t\t\\\n-  } while (0)\n+#define ASM_OUTPUT_DEBUG_ADDR_DELTA(FILE,LABEL1,LABEL2)\t\t\t \\\n+  do\t\t\t\t\t\t\t\t\t \\\n+    {\t\t\t\t\t\t\t\t\t \\\n+      fprintf ((FILE), \"\\t%s\\t\", UNALIGNED_PTR_ASM_OP);\t\t\t \\\n+      assemble_name (FILE, LABEL1);\t\t\t\t\t \\\n+      fprintf (FILE, \"-\");\t\t\t\t\t\t \\\n+      assemble_name (FILE, LABEL2);\t\t\t\t\t \\\n+    }\t\t\t\t\t\t\t\t\t \\\n+  while (0)\n #endif\n \n #ifndef ASM_OUTPUT_DEBUG_ADDR\n-#define ASM_OUTPUT_DEBUG_ADDR(FILE,LABEL)\t\t\t\t\\\n- do {\tfprintf ((FILE), \"\\t%s\\t\", UNALIGNED_PTR_ASM_OP);\t\t\\\n-\tassemble_name (FILE, LABEL);\t\t\t\t\t\\\n-  } while (0)\n+#define ASM_OUTPUT_DEBUG_ADDR(FILE,LABEL)\t\t\t\t \\\n+  do\t\t\t\t\t\t\t\t\t \\\n+    {\t\t\t\t\t\t\t\t\t \\\n+      fprintf ((FILE), \"\\t%s\\t\", UNALIGNED_PTR_ASM_OP);\t\t\t \\\n+      assemble_name (FILE, LABEL);\t\t\t\t\t \\\n+    }\t\t\t\t\t\t\t\t\t \\\n+  while (0)\n #endif\n \n #ifndef ASM_OUTPUT_DEBUG_ADDR_CONST\n@@ -352,38 +364,40 @@ static char text_end_label[MAX_ARTIFICIAL_LABEL_BYTES];\n    newline is produced.  When flag_verbose_asm is asserted, we add commnetary\n    at the end of the line, so we must avoid output of a newline here.  */\n #ifndef ASM_OUTPUT_DEBUG_STRING\n-#define ASM_OUTPUT_DEBUG_STRING(FILE,P)\t\\\n-  do {\t\t\t\t\t\\\n-    register int slen = strlen(P);      \\\n-    register char *p = (P);  \t        \\\n-    register int i;\t\t\t\\\n-    fprintf (FILE, \"\\t.ascii \\\"\");\t\\\n-    for (i = 0; i < slen; i++)\t\t\\\n-      {\t\t\t\t\t\\\n-\t  register int c = p[i];\t\\\n-\t  if (c == '\\\"' || c == '\\\\')\t\\\n-\t    putc ('\\\\', FILE);\t\t\\\n-\t  if (c >= ' ' && c < 0177)\t\\\n-\t    putc (c, FILE);\t\t\\\n-\t  else\t\t\t\t\\\n-\t    fprintf (FILE, \"\\\\%o\", c);\t\\\n-      }\t\t\t\t\t\\\n-    fprintf (FILE, \"\\\"\");\t\t\\\n-  }\t\t\t\t\t\\\n+#define ASM_OUTPUT_DEBUG_STRING(FILE,P)\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      register int slen = strlen(P);\t\t\\\n+      register char *p = (P);\t\t\t\\\n+      register int i;\t\t\t\t\\\n+      fprintf (FILE, \"\\t.ascii \\\"\");\t\t\\\n+      for (i = 0; i < slen; i++)\t\t\\\n+\t{\t\t\t\t\t\\\n+\t  register int c = p[i];\t\t\\\n+\t  if (c == '\\\"' || c == '\\\\')\t\t\\\n+\t    putc ('\\\\', FILE);\t\t\t\\\n+\t  if (c >= ' ' && c < 0177)\t\t\\\n+\t    putc (c, FILE);\t\t\t\\\n+\t  else\t\t\t\t\t\\\n+\t    fprintf (FILE, \"\\\\%o\", c);\t\t\\\n+\t}\t\t\t\t\t\\\n+      fprintf (FILE, \"\\\"\");\t\t\t\\\n+    }\t\t\t\t\t\t\\\n   while (0)\n #endif\n \n /* Convert a reference to the assembler name of a C-level name.  This\n    macro has the same effect as ASM_OUTPUT_LABELREF, but copies to\n    a string rather than writing to a file.  */\n #ifndef ASM_NAME_TO_STRING\n-#define ASM_NAME_TO_STRING(STR, NAME) \\\n-  do {\t\t\t\t\t\t\t\t\t      \\\n-      if ((NAME)[0] == '*')\t\t\t\t\t\t      \\\n-\tstrcpy (STR, NAME+1);\t\t\t\t\t\t      \\\n-      else\t\t\t\t\t\t\t\t      \\\n-\tstrcpy (STR, NAME);                                                   \\\n-  }                                                                           \\\n+#define ASM_NAME_TO_STRING(STR, NAME) \t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      if ((NAME)[0] == '*')\t\t\t\\\n+\tstrcpy (STR, NAME+1);\t\t\t\\\n+      else\t\t\t\t\t\\\n+\tstrcpy (STR, NAME);\t\t\t\\\n+    }\t\t\t\t\t\t\\\n   while (0)\n #endif\n "}, {"sha": "8396b7b334c56170a169c24b547e634a3b1fde55", "filename": "gcc/xcoffout.c", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c203e7fe6283c474745cabdf5a6ba63851c24d55/gcc%2Fxcoffout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c203e7fe6283c474745cabdf5a6ba63851c24d55/gcc%2Fxcoffout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fxcoffout.c?ref=c203e7fe6283c474745cabdf5a6ba63851c24d55", "patch": "@@ -1,5 +1,5 @@\n /* Output xcoff-format symbol table information from GNU compiler.\n-   Copyright (C) 1992, 1994, 1995, 1997, 1998, 1999, 2000\n+   Copyright (C) 1992, 1994, 1995, 1997, 1998, 1999, 2000, 2002\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -75,11 +75,13 @@ const char *xcoff_lastfile;\n ((xcoff_inlining) ? (LINENO) : (LINENO) - xcoff_begin_function_line)\n \n /* Output source line numbers via \".line\" rather than \".stabd\".  */\n-#define ASM_OUTPUT_SOURCE_LINE(FILE,LINENUM) \\\n-  do {\t\t\t\t\t\t\\\n-    if (xcoff_begin_function_line >= 0)\t\t\\\n-      fprintf (FILE, \"\\t.line\\t%d\\n\", ABS_OR_RELATIVE_LINENO (LINENUM)); \\\n-  } while (0)\n+#define ASM_OUTPUT_SOURCE_LINE(FILE,LINENUM) \t\t\t\t   \\\n+  do\t\t\t\t\t\t\t\t\t   \\\n+    {\t\t\t\t\t\t\t\t\t   \\\n+      if (xcoff_begin_function_line >= 0)\t\t\t\t   \\\n+\tfprintf (FILE, \"\\t.line\\t%d\\n\", ABS_OR_RELATIVE_LINENO (LINENUM)); \\\n+    }\t\t\t\t\t\t\t\t\t   \\\n+  while (0)\n \n #define ASM_OUTPUT_LFB(FILE,LINENUM) \\\n {\t\t\t\t\t\t\\\n@@ -93,11 +95,13 @@ const char *xcoff_lastfile;\n        ? xcoff_current_include_file : main_input_filename); \\\n }\n \n-#define ASM_OUTPUT_LFE(FILE,LINENUM) \\\n-  do {\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t.ef\\t%d\\n\", (LINENUM));\t\\\n-    xcoff_begin_function_line = -1;\t\t\\\n-  } while (0)\n+#define ASM_OUTPUT_LFE(FILE,LINENUM) \t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      fprintf (FILE, \"\\t.ef\\t%d\\n\", (LINENUM));\t\\\n+      xcoff_begin_function_line = -1;\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n \n #define ASM_OUTPUT_LBB(FILE,LINENUM,BLOCKNUM) \\\n   fprintf (FILE, \"\\t.bb\\t%d\\n\", ABS_OR_RELATIVE_LINENO (LINENUM))"}]}