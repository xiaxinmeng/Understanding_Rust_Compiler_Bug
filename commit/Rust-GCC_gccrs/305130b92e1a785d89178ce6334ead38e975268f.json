{"sha": "305130b92e1a785d89178ce6334ead38e975268f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA1MTMwYjkyZTFhNzg1ZDg5MTc4Y2U2MzM0ZWFkMzhlOTc1MjY4Zg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-07-11T14:22:12Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-07-11T14:22:12Z"}, "message": "compiler: fix evaluation order of LHS index expressions\n    \n    The spec says that when an index expression appears on the left hand\n    side of an assignment, the operands should be evaluated. The\n    gofrontend code was assuming that that only referred to the index\n    operand. But discussion of https://golang.org/issue/23188 has\n    clarified that this means both the slice/map/string operand and the\n    index operand. Adjust the gofrontend code accordingly.\n    \n    Fixes golang/go#23188\n    \n    Reviewed-on: https://go-review.googlesource.com/123155\n\nFrom-SVN: r262554", "tree": {"sha": "bda3b9e97b0fab2129706a037775832f83e6982f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bda3b9e97b0fab2129706a037775832f83e6982f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/305130b92e1a785d89178ce6334ead38e975268f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/305130b92e1a785d89178ce6334ead38e975268f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/305130b92e1a785d89178ce6334ead38e975268f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/305130b92e1a785d89178ce6334ead38e975268f/comments", "author": null, "committer": null, "parents": [{"sha": "2bae8b2fadab13b6f886829f782e4d5cffdfafd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bae8b2fadab13b6f886829f782e4d5cffdfafd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bae8b2fadab13b6f886829f782e4d5cffdfafd6"}], "stats": {"total": 44, "additions": 23, "deletions": 21}, "files": [{"sha": "7d5c0aa7e0d0b8e1a4d9a3f3286823116c3528e3", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/305130b92e1a785d89178ce6334ead38e975268f/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/305130b92e1a785d89178ce6334ead38e975268f/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=305130b92e1a785d89178ce6334ead38e975268f", "patch": "@@ -1,4 +1,4 @@\n-8ad67a72a4fa59efffc891e73ecf10020e3c565d\n+ea7ac7784791dca517b6681a02c39c11bf136755\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "e7d0b7522195acf946d3b48a21feacd99647f7c7", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/305130b92e1a785d89178ce6334ead38e975268f/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/305130b92e1a785d89178ce6334ead38e975268f/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=305130b92e1a785d89178ce6334ead38e975268f", "patch": "@@ -10898,6 +10898,20 @@ Array_index_expression::do_check_types(Gogo*)\n     }\n }\n \n+// The subexpressions of an array index must be evaluated in order.\n+// If this is indexing into an array, rather than a slice, then only\n+// the index should be evaluated.  Since this is called for values on\n+// the left hand side of an assigment, evaluating the array, meaning\n+// copying the array, will cause a different array to be modified.\n+\n+bool\n+Array_index_expression::do_must_eval_subexpressions_in_order(\n+    int* skip) const\n+{\n+  *skip = this->array_->type()->is_slice_type() ? 0 : 1;\n+  return true;\n+}\n+\n // Flatten array indexing by using temporary variables for slices and indexes.\n \n Expression*"}, {"sha": "5fa417159462b7d0e97c54576051a1ce36c03838", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/305130b92e1a785d89178ce6334ead38e975268f/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/305130b92e1a785d89178ce6334ead38e975268f/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=305130b92e1a785d89178ce6334ead38e975268f", "patch": "@@ -2771,12 +2771,10 @@ class Index_expression : public Parser_expression\n \t\t\t\tthis->location());\n   }\n \n+  // This shouldn't be called--we don't know yet.\n   bool\n-  do_must_eval_subexpressions_in_order(int* skip) const\n-  {\n-    *skip = 1;\n-    return true;\n-  }\n+  do_must_eval_subexpressions_in_order(int*) const\n+  { go_unreachable(); }\n \n   void\n   do_dump_expression(Ast_dump_context*) const;\n@@ -2882,11 +2880,7 @@ class Array_index_expression : public Expression\n   }\n \n   bool\n-  do_must_eval_subexpressions_in_order(int* skip) const\n-  {\n-    *skip = 1;\n-    return true;\n-  }\n+  do_must_eval_subexpressions_in_order(int* skip) const;\n \n   bool\n   do_is_addressable() const;\n@@ -2965,11 +2959,8 @@ class String_index_expression : public Expression\n   }\n \n   bool\n-  do_must_eval_subexpressions_in_order(int* skip) const\n-  {\n-    *skip = 1;\n-    return true;\n-  }\n+  do_must_eval_subexpressions_in_order(int*) const\n+  { return true; }\n \n   Bexpression*\n   do_get_backend(Translate_context*);\n@@ -3052,11 +3043,8 @@ class Map_index_expression : public Expression\n   }\n \n   bool\n-  do_must_eval_subexpressions_in_order(int* skip) const\n-  {\n-    *skip = 1;\n-    return true;\n-  }\n+  do_must_eval_subexpressions_in_order(int*) const\n+  { return true; }\n \n   // A map index expression is an lvalue but it is not addressable.\n "}]}