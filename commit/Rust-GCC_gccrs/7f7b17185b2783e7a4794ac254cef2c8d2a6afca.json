{"sha": "7f7b17185b2783e7a4794ac254cef2c8d2a6afca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y3YjE3MTg1YjI3ODNlN2E0Nzk0YWMyNTRjZWYyYzhkMmE2YWZjYQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2005-06-19T22:40:34Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2005-06-19T22:40:34Z"}, "message": "cfgloop.h (DLTHE_RECORD_COPY_NUMBER): New flag.\n\n\t* cfgloop.h (DLTHE_RECORD_COPY_NUMBER): New flag.\n\t* cfgloopmanip.c (duplicate_loop_to_header_edge): Set aux flags only\n\twhen asked for.\n\t* loop-unroll.c (peel_loop_completely, unroll_loop_constant_iterations,\n\tunroll_loop_runtime_iterations, peel_loop_simple, unroll_loop_stupid):\n\tUpdate call of duplicate_loop_to_header_edge.\n\t(apply_opt_in_copies): Clear out aux pointers.\n\nFrom-SVN: r101193", "tree": {"sha": "07b4151376678a25dbd81f59058d37f2a765165b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07b4151376678a25dbd81f59058d37f2a765165b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f7b17185b2783e7a4794ac254cef2c8d2a6afca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f7b17185b2783e7a4794ac254cef2c8d2a6afca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f7b17185b2783e7a4794ac254cef2c8d2a6afca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f7b17185b2783e7a4794ac254cef2c8d2a6afca/comments", "author": null, "committer": null, "parents": [{"sha": "cac24f06cb5600e5e744e724764687b2837a2a52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cac24f06cb5600e5e744e724764687b2837a2a52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cac24f06cb5600e5e744e724764687b2837a2a52"}], "stats": {"total": 58, "additions": 46, "deletions": 12}, "files": [{"sha": "e4731651c02d129879f3c1b9d50bad8cbb0a4281", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f7b17185b2783e7a4794ac254cef2c8d2a6afca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f7b17185b2783e7a4794ac254cef2c8d2a6afca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f7b17185b2783e7a4794ac254cef2c8d2a6afca", "patch": "@@ -1,3 +1,13 @@\n+2005-06-20  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cfgloop.h (DLTHE_RECORD_COPY_NUMBER): New flag.\n+\t* cfgloopmanip.c (duplicate_loop_to_header_edge): Set aux flags only\n+\twhen asked for.\n+\t* loop-unroll.c (peel_loop_completely, unroll_loop_constant_iterations,\n+\tunroll_loop_runtime_iterations, peel_loop_simple, unroll_loop_stupid):\n+\tUpdate call of duplicate_loop_to_header_edge.\n+\t(apply_opt_in_copies): Clear out aux pointers.\n+\n 2005-06-19  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* config/i386/i386.c (TARGET_MANGLE_FUNDAMENTAL_TYPE): Define."}, {"sha": "bfcb0b9bb58a17b3a30bea2be023883406ffee36", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f7b17185b2783e7a4794ac254cef2c8d2a6afca/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f7b17185b2783e7a4794ac254cef2c8d2a6afca/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=7f7b17185b2783e7a4794ac254cef2c8d2a6afca", "patch": "@@ -296,6 +296,8 @@ extern bool can_duplicate_loop_p (struct loop *loop);\n \n #define DLTHE_FLAG_UPDATE_FREQ\t1\t/* Update frequencies in\n \t\t\t\t\t   duplicate_loop_to_header_edge.  */\n+#define DLTHE_RECORD_COPY_NUMBER 2\t/* Record copy number in the aux\n+\t\t\t\t\t   field of newly create BB.  */\n \n extern struct loop * duplicate_loop (struct loops *, struct loop *,\n \t\t\t\t     struct loop *);"}, {"sha": "d75c7d409627f4b3616a8c2af7dc6d369634d5fa", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f7b17185b2783e7a4794ac254cef2c8d2a6afca/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f7b17185b2783e7a4794ac254cef2c8d2a6afca/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=7f7b17185b2783e7a4794ac254cef2c8d2a6afca", "patch": "@@ -982,11 +982,12 @@ duplicate_loop_to_header_edge (struct loop *loop, edge e, struct loops *loops,\n       /* Copy bbs.  */\n       copy_bbs (bbs, n, new_bbs, spec_edges, 2, new_spec_edges, loop);\n \n-      for (i = 0; i < n; i++)\n-\t{\n-\t  gcc_assert (!new_bbs[i]->aux);\n-\t  new_bbs[i]->aux = (void *)(size_t)(j + 1);\n-\t}\n+      if (flags & DLTHE_RECORD_COPY_NUMBER)\n+\tfor (i = 0; i < n; i++)\n+\t  {\n+\t    gcc_assert (!new_bbs[i]->aux);\n+\t    new_bbs[i]->aux = (void *)(size_t)(j + 1);\n+\t  }\n \n       /* Note whether the blocks and edges belong to an irreducible loop.  */\n       if (add_irreducible_flag)"}, {"sha": "fd1821c80cec51091eed138de0f264df8c4f17b4", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f7b17185b2783e7a4794ac254cef2c8d2a6afca/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f7b17185b2783e7a4794ac254cef2c8d2a6afca/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=7f7b17185b2783e7a4794ac254cef2c8d2a6afca", "patch": "@@ -519,7 +519,9 @@ peel_loop_completely (struct loops *loops, struct loop *loop)\n \t\t\t\t\t  loops, npeel,\n \t\t\t\t\t  wont_exit, desc->out_edge,\n \t\t\t\t\t  remove_edges, &n_remove_edges,\n-\t\t\t\t\t  DLTHE_FLAG_UPDATE_FREQ);\n+\t\t\t\t\t  DLTHE_FLAG_UPDATE_FREQ\n+\t\t\t\t\t  | (opt_info\n+\t\t\t\t\t     ? DLTHE_RECORD_COPY_NUMBER : 0));\n       gcc_assert (ok);\n \n       free (wont_exit);\n@@ -717,7 +719,10 @@ unroll_loop_constant_iterations (struct loops *loops, struct loop *loop)\n \t\t\t\t\t      loops, exit_mod,\n \t\t\t\t\t      wont_exit, desc->out_edge,\n \t\t\t\t\t      remove_edges, &n_remove_edges,\n-\t\t\t\t\t      DLTHE_FLAG_UPDATE_FREQ);\n+\t\t\t\t\t      DLTHE_FLAG_UPDATE_FREQ\n+\t\t\t\t\t      | (opt_info && exit_mod > 1\n+\t\t\t\t\t\t ? DLTHE_RECORD_COPY_NUMBER\n+\t\t\t\t\t\t   : 0));\n \t  gcc_assert (ok);\n \n           if (opt_info && exit_mod > 1)\n@@ -753,7 +758,10 @@ unroll_loop_constant_iterations (struct loops *loops, struct loop *loop)\n \t\t\t\t\t      loops, exit_mod + 1,\n \t\t\t\t\t      wont_exit, desc->out_edge,\n \t\t\t\t\t      remove_edges, &n_remove_edges,\n-\t\t\t\t\t      DLTHE_FLAG_UPDATE_FREQ);\n+\t\t\t\t\t      DLTHE_FLAG_UPDATE_FREQ\n+\t\t\t\t\t      | (opt_info && exit_mod > 0\n+\t\t\t\t\t\t ? DLTHE_RECORD_COPY_NUMBER\n+\t\t\t\t\t\t   : 0));\n \t  gcc_assert (ok);\n  \n           if (opt_info && exit_mod > 0)\n@@ -777,7 +785,10 @@ unroll_loop_constant_iterations (struct loops *loops, struct loop *loop)\n \t\t\t\t      loops, max_unroll,\n \t\t\t\t      wont_exit, desc->out_edge,\n \t\t\t\t      remove_edges, &n_remove_edges,\n-\t\t\t\t      DLTHE_FLAG_UPDATE_FREQ);\n+\t\t\t\t      DLTHE_FLAG_UPDATE_FREQ\n+\t\t\t\t      | (opt_info\n+\t\t\t\t\t ? DLTHE_RECORD_COPY_NUMBER\n+\t\t\t\t\t   : 0));\n   gcc_assert (ok);\n \n   if (opt_info)\n@@ -1097,7 +1108,10 @@ unroll_loop_runtime_iterations (struct loops *loops, struct loop *loop)\n \t\t\t\t      loops, max_unroll,\n \t\t\t\t      wont_exit, desc->out_edge,\n \t\t\t\t      remove_edges, &n_remove_edges,\n-\t\t\t\t      DLTHE_FLAG_UPDATE_FREQ);\n+\t\t\t\t      DLTHE_FLAG_UPDATE_FREQ\n+\t\t\t\t      | (opt_info\n+\t\t\t\t\t ? DLTHE_RECORD_COPY_NUMBER\n+\t\t\t\t\t   : 0));\n   gcc_assert (ok);\n   \n   if (opt_info)\n@@ -1274,7 +1288,10 @@ peel_loop_simple (struct loops *loops, struct loop *loop)\n   ok = duplicate_loop_to_header_edge (loop, loop_preheader_edge (loop),\n \t\t\t\t      loops, npeel, wont_exit,\n \t\t\t\t      NULL, NULL,\n-\t\t\t\t      NULL, DLTHE_FLAG_UPDATE_FREQ);\n+\t\t\t\t      NULL, DLTHE_FLAG_UPDATE_FREQ\n+\t\t\t\t      | (opt_info\n+\t\t\t\t\t ? DLTHE_RECORD_COPY_NUMBER\n+\t\t\t\t\t   : 0));\n   gcc_assert (ok);\n \n   free (wont_exit);\n@@ -1422,7 +1439,10 @@ unroll_loop_stupid (struct loops *loops, struct loop *loop)\n   ok = duplicate_loop_to_header_edge (loop, loop_latch_edge (loop),\n \t\t\t\t      loops, nunroll, wont_exit,\n \t\t\t\t      NULL, NULL, NULL,\n-\t\t\t\t      DLTHE_FLAG_UPDATE_FREQ);\n+\t\t\t\t      DLTHE_FLAG_UPDATE_FREQ\n+\t\t\t\t      | (opt_info\n+\t\t\t\t\t ? DLTHE_RECORD_COPY_NUMBER\n+\t\t\t\t\t   : 0));\n   gcc_assert (ok);\n   \n   if (opt_info)\n@@ -2064,6 +2084,7 @@ apply_opt_in_copies (struct opt_info *opt_info,\n \t duplicate_loop_to_header_edge.  */\n       delta = determine_split_iv_delta ((size_t)bb->aux, n_copies,\n \t\t\t\t\tunrolling);\n+      bb->aux = 0;\n       orig_insn = BB_HEAD (orig_bb);\n       for (insn = BB_HEAD (bb); insn != NEXT_INSN (BB_END (bb)); insn = next)\n         {"}]}