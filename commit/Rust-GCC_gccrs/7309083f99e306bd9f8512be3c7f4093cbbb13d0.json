{"sha": "7309083f99e306bd9f8512be3c7f4093cbbb13d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMwOTA4M2Y5OWUzMDZiZDlmODUxMmJlM2M3ZjQwOTNjYmJiMTNkMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-06-23T12:36:43Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-06-23T12:36:43Z"}, "message": "re PR libstdc++/40518 (data races when calling std::string::erase() on empty string)\n\n2009-06-23  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/40518\n\t* include/bits/basic_string.h (basic_string<>::_Rep::\n\t_M_set_length_and_sharable): Do not write the empty rep.\n\t(basic_string<>::erase(iterator, iterator)): Likewise,\n\tmove out of line...\n\t* include/bits/basic_string.tcc: ... here.\n\nFrom-SVN: r148850", "tree": {"sha": "e75e40c13a65e7f0449922ee1c3c4606a42e111a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e75e40c13a65e7f0449922ee1c3c4606a42e111a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7309083f99e306bd9f8512be3c7f4093cbbb13d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7309083f99e306bd9f8512be3c7f4093cbbb13d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7309083f99e306bd9f8512be3c7f4093cbbb13d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7309083f99e306bd9f8512be3c7f4093cbbb13d0/comments", "author": null, "committer": null, "parents": [{"sha": "2724e58f9632352aecea376a0fdbbae54c4a2895", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2724e58f9632352aecea376a0fdbbae54c4a2895", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2724e58f9632352aecea376a0fdbbae54c4a2895"}], "stats": {"total": 61, "additions": 45, "deletions": 16}, "files": [{"sha": "a92920efdb84500e75d4a3e5b026943a1fb42cbf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7309083f99e306bd9f8512be3c7f4093cbbb13d0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7309083f99e306bd9f8512be3c7f4093cbbb13d0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7309083f99e306bd9f8512be3c7f4093cbbb13d0", "patch": "@@ -1,3 +1,12 @@\n+2009-06-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/40518\n+\t* include/bits/basic_string.h (basic_string<>::_Rep::\n+\t_M_set_length_and_sharable): Do not write the empty rep.\n+\t(basic_string<>::erase(iterator, iterator)): Likewise,\n+\tmove out of line...\n+\t* include/bits/basic_string.tcc: ... here.\n+\n 2009-06-22  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/util/testsuite_common_types.h (bitwise_operators,"}, {"sha": "085aea463b6fb69d95060f2c126ea1e3ebaa26a2", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7309083f99e306bd9f8512be3c7f4093cbbb13d0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7309083f99e306bd9f8512be3c7f4093cbbb13d0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=7309083f99e306bd9f8512be3c7f4093cbbb13d0", "patch": "@@ -197,12 +197,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n \tvoid\n \t_M_set_length_and_sharable(size_type __n)\n-\t{ \n-\t  this->_M_set_sharable();  // One reference.\n-\t  this->_M_length = __n;\n-\t  traits_type::assign(this->_M_refdata()[__n], _S_terminal);\n-\t  // grrr. (per 21.3.4)\n-\t  // You cannot leave those LWG people alone for a second.\n+\t{\n+#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n+\t  if (__builtin_expect(this != &_S_empty_rep(), false))\n+#endif\n+\t    {\n+\t      this->_M_set_sharable();  // One reference.\n+\t      this->_M_length = __n;\n+\t      traits_type::assign(this->_M_refdata()[__n], _S_terminal);\n+\t      // grrr. (per 21.3.4)\n+\t      // You cannot leave those LWG people alone for a second.\n+\t    }\n \t}\n \n \t_CharT*\n@@ -1226,16 +1231,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  The value of the string doesn't change if an error is thrown.\n       */\n       iterator\n-      erase(iterator __first, iterator __last)\n-      {\n-\t_GLIBCXX_DEBUG_PEDASSERT(__first >= _M_ibegin() && __first <= __last\n-\t\t\t\t && __last <= _M_iend());\n-        const size_type __pos = __first - _M_ibegin();\n-\t_M_mutate(__pos, __last - __first, size_type(0));\n-\t_M_rep()->_M_set_leaked();\n-\treturn iterator(_M_data() + __pos);\n-      }\n-\n+      erase(iterator __first, iterator __last);\n+ \n       /**\n        *  @brief  Replace characters with value from another string.\n        *  @param pos  Index of first character to replace."}, {"sha": "d450a4717de8ff75e24b283f1fd60aeff7379987", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7309083f99e306bd9f8512be3c7f4093cbbb13d0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7309083f99e306bd9f8512be3c7f4093cbbb13d0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=7309083f99e306bd9f8512be3c7f4093cbbb13d0", "patch": "@@ -385,6 +385,29 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n          }\n      }\n \n+   template<typename _CharT, typename _Traits, typename _Alloc>\n+     typename basic_string<_CharT, _Traits, _Alloc>::iterator\n+     basic_string<_CharT, _Traits, _Alloc>::\n+     erase(iterator __first, iterator __last)\n+     {\n+       _GLIBCXX_DEBUG_PEDASSERT(__first >= _M_ibegin() && __first <= __last\n+\t\t\t\t&& __last <= _M_iend());\n+\n+       // NB: This isn't just an optimization (bail out early when\n+       // there is nothing to do, really), it's also a correctness\n+       // issue vs MT, see libstdc++/40518.\n+       const size_type __size = __last - __first;\n+       if (__size)\n+\t {\n+\t   const size_type __pos = __first - _M_ibegin();\n+\t   _M_mutate(__pos, __size, size_type(0));\n+\t   _M_rep()->_M_set_leaked();\n+\t   return iterator(_M_data() + __pos);\n+\t }\n+       else\n+\t return __first;\n+     }\n+\n    template<typename _CharT, typename _Traits, typename _Alloc>\n      basic_string<_CharT, _Traits, _Alloc>&\n      basic_string<_CharT, _Traits, _Alloc>::"}]}