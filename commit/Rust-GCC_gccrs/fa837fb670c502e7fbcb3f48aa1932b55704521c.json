{"sha": "fa837fb670c502e7fbcb3f48aa1932b55704521c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE4MzdmYjY3MGM1MDJlN2ZiY2IzZjQ4YWExOTMyYjU1NzA0NTIxYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-02-18T05:08:09Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-02-18T05:08:09Z"}, "message": "re PR c++/65985 (compiler segfault with assert() in constexpr constructor body)\n\n\tPR c++/65985\n\t* constexpr.c (build_constexpr_constructor_member_initializers):\n\tHandle an additional STATEMENT_LIST.\n\nFrom-SVN: r233514", "tree": {"sha": "f88a1e5605680ea78fc264696fec9c23f95fdbb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f88a1e5605680ea78fc264696fec9c23f95fdbb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa837fb670c502e7fbcb3f48aa1932b55704521c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa837fb670c502e7fbcb3f48aa1932b55704521c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa837fb670c502e7fbcb3f48aa1932b55704521c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa837fb670c502e7fbcb3f48aa1932b55704521c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bcb5f3c9f5aa8d3368e887b40f4ab1197afab59e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcb5f3c9f5aa8d3368e887b40f4ab1197afab59e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcb5f3c9f5aa8d3368e887b40f4ab1197afab59e"}], "stats": {"total": 74, "additions": 60, "deletions": 14}, "files": [{"sha": "18f80729b78c65c024e2fe6828841d7c617cb757", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa837fb670c502e7fbcb3f48aa1932b55704521c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa837fb670c502e7fbcb3f48aa1932b55704521c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fa837fb670c502e7fbcb3f48aa1932b55704521c", "patch": "@@ -1,5 +1,9 @@\n 2016-02-17  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/65985\n+\t* constexpr.c (build_constexpr_constructor_member_initializers):\n+\tHandle an additional STATEMENT_LIST.\n+\n \tPR c++/68585\n \t* constexpr.c (cxx_eval_bare_aggregate): Fix 'changed' detection.\n "}, {"sha": "d3b04b11e803cb0efab4672f7fa052aebc7c4bb2", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa837fb670c502e7fbcb3f48aa1932b55704521c/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa837fb670c502e7fbcb3f48aa1932b55704521c/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=fa837fb670c502e7fbcb3f48aa1932b55704521c", "patch": "@@ -528,21 +528,32 @@ build_constexpr_constructor_member_initializers (tree type, tree body)\n {\n   vec<constructor_elt, va_gc> *vec = NULL;\n   bool ok = true;\n-  if (TREE_CODE (body) == MUST_NOT_THROW_EXPR\n-      || TREE_CODE (body) == EH_SPEC_BLOCK)\n-    body = TREE_OPERAND (body, 0);\n-  if (TREE_CODE (body) == STATEMENT_LIST)\n-    {\n-      for (tree_stmt_iterator i = tsi_start (body);\n-\t   !tsi_end_p (i); tsi_next (&i))\n-\t{\n-\t  body = tsi_stmt (i);\n-\t  if (TREE_CODE (body) == BIND_EXPR)\n-\t    break;\n-\t}\n+  while (true)\n+    switch (TREE_CODE (body))\n+      {\n+      case MUST_NOT_THROW_EXPR:\n+      case EH_SPEC_BLOCK:\n+\tbody = TREE_OPERAND (body, 0);\n+\tbreak;\n+\n+      case STATEMENT_LIST:\n+\tfor (tree_stmt_iterator i = tsi_start (body);\n+\t     !tsi_end_p (i); tsi_next (&i))\n+\t  {\n+\t    body = tsi_stmt (i);\n+\t    if (TREE_CODE (body) == BIND_EXPR)\n+\t      break;\n+\t  }\n+\tbreak;\n+\n+      case BIND_EXPR:\n+\tbody = BIND_EXPR_BODY (body);\n+\tgoto found;\n+\n+      default:\n+\tgcc_unreachable ();\n     }\n-  if (TREE_CODE (body) == BIND_EXPR)\n-    body = BIND_EXPR_BODY (body);\n+ found:\n   if (TREE_CODE (body) == CLEANUP_POINT_EXPR)\n     {\n       body = TREE_OPERAND (body, 0);"}, {"sha": "a3291017324ee8e9a68fef47b68292aec38eae13", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-assert2.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa837fb670c502e7fbcb3f48aa1932b55704521c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-assert2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa837fb670c502e7fbcb3f48aa1932b55704521c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-assert2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-assert2.C?ref=fa837fb670c502e7fbcb3f48aa1932b55704521c", "patch": "@@ -0,0 +1,31 @@\n+// PR c++/65985\n+// { dg-do compile { target c++14 } }\n+\n+#include <cassert>\n+\n+class Angle\n+{\n+  int degrees = 0;\n+\n+  constexpr auto invariant() const noexcept\n+  {\n+    return 0 <= degrees && degrees < 360;\n+  }\n+\n+public:\n+  explicit constexpr Angle(int n) noexcept\n+    : degrees{n % 360}\n+  {\n+    assert(invariant());\n+  }\n+\n+  /* implicit */ constexpr operator auto() const noexcept\n+  {\n+    return degrees;\n+  }\n+};\n+\n+int main()\n+{\n+  static_assert(Angle{360} == 0, \"\");\n+}"}]}