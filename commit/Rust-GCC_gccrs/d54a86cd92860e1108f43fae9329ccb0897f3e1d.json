{"sha": "d54a86cd92860e1108f43fae9329ccb0897f3e1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU0YTg2Y2Q5Mjg2MGUxMTA4ZjQzZmFlOTMyOWNjYjA4OTdmM2UxZA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-01-17T20:17:42Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-01-24T20:44:01Z"}, "message": "c++: Fix ICE in tsubst_copy with parenthesized expression [PR93299]\n\nSince e4511ca2e9ecdb51d41b64452398f8e2df575668 force_paren_expr can create\na VIEW_CONVERT_EXPR so that we have something to set REF_PARENTHESIZED_P\non, while not making the expression dependent.  But tsubst_copy can't cope\nwith such a VIEW_CONVERT_EXPR, because it's not location_wrapper_p, or\na TEMPLATE_PARM_INDEX wrapped in a VIEW_CONVERT_EXPR.\n\nI think we need to teach tsubst_copy how to handle it.  Setting\nEXPR_LOCATION_WRAPPER_P in force_paren_expr would make the ICE go away\ntoo, but tsubst_copy would lose the REF_PARENTHESIZED_P flag.\n\n2020-01-24  Marek Polacek  <polacek@redhat.com>\n\n\tPR c++/93299 - ICE in tsubst_copy with parenthesized expression.\n\t* pt.c (tsubst_copy): Handle a REF_PARENTHESIZED_P VIEW_CONVERT_EXPR.\n\n\t* g++.dg/cpp1y/paren5.C: New test.", "tree": {"sha": "481092d986b214da6742ca2a36a08c1323939c83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/481092d986b214da6742ca2a36a08c1323939c83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d54a86cd92860e1108f43fae9329ccb0897f3e1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d54a86cd92860e1108f43fae9329ccb0897f3e1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d54a86cd92860e1108f43fae9329ccb0897f3e1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d54a86cd92860e1108f43fae9329ccb0897f3e1d/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c75a2a3bfdcc2fc792d730562c677d513347d1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c75a2a3bfdcc2fc792d730562c677d513347d1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c75a2a3bfdcc2fc792d730562c677d513347d1c"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "0ed260b5da1f5cd23275e4d71fb08c3673f6a387", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d54a86cd92860e1108f43fae9329ccb0897f3e1d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d54a86cd92860e1108f43fae9329ccb0897f3e1d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d54a86cd92860e1108f43fae9329ccb0897f3e1d", "patch": "@@ -1,3 +1,8 @@\n+2020-01-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/93299 - ICE in tsubst_copy with parenthesized expression.\n+\t* pt.c (tsubst_copy): Handle a REF_PARENTHESIZED_P VIEW_CONVERT_EXPR.\n+\n 2020-01-24  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/92852 - ICE with generic lambda and reference var."}, {"sha": "95719927249bb81559dacdbe6f9b0652faaa02ca", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d54a86cd92860e1108f43fae9329ccb0897f3e1d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d54a86cd92860e1108f43fae9329ccb0897f3e1d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=d54a86cd92860e1108f43fae9329ccb0897f3e1d", "patch": "@@ -16423,6 +16423,14 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t\t  return op;\n \t\t}\n \t    }\n+\t  /* force_paren_expr can also create a VIEW_CONVERT_EXPR.  */\n+\t  else if (code == VIEW_CONVERT_EXPR && REF_PARENTHESIZED_P (t))\n+\t    {\n+\t      op = tsubst_copy (op, args, complain, in_decl);\n+\t      op = build1 (code, TREE_TYPE (op), op);\n+\t      REF_PARENTHESIZED_P (op) = true;\n+\t      return op;\n+\t    }\n \t  /* We shouldn't see any other uses of these in templates.  */\n \t  gcc_unreachable ();\n \t}"}, {"sha": "d1213ccd44f3aa652a5bb5971dc5af12b005a522", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d54a86cd92860e1108f43fae9329ccb0897f3e1d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d54a86cd92860e1108f43fae9329ccb0897f3e1d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d54a86cd92860e1108f43fae9329ccb0897f3e1d", "patch": "@@ -1,3 +1,8 @@\n+2020-01-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/93299 - ICE in tsubst_copy with parenthesized expression.\n+\t* g++.dg/cpp1y/paren5.C: New test.\n+\n 2020-01-24  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* g++.dg/cpp0x/constexpr-odr1.C: Add -fdelete-null-pointer-checks."}, {"sha": "86a513564656b921489b7a0ca42255e4a1265e10", "filename": "gcc/testsuite/g++.dg/cpp1y/paren5.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d54a86cd92860e1108f43fae9329ccb0897f3e1d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fparen5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d54a86cd92860e1108f43fae9329ccb0897f3e1d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fparen5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fparen5.C?ref=d54a86cd92860e1108f43fae9329ccb0897f3e1d", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/93299 - ICE in tsubst_copy with parenthesized expression.\n+// { dg-do compile { target c++14 } }\n+\n+template <typename> struct A {\n+  enum { b = 8 };\n+};\n+\n+template <int> struct __attribute__((aligned((A<int>::b)))) D { };\n+struct S : D<0> { };\n+\n+template <int N> struct __attribute__((aligned((A<int>::b) + N))) D2 { };\n+struct S2 : D2<0> { };"}]}