{"sha": "6cc8f68381ef967849049433c63cb6324b16a1ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNjOGY2ODM4MWVmOTY3ODQ5MDQ5NDMzYzYzY2I2MzI0YjE2YTFhYw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-06-04T23:35:13Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-06-04T23:35:13Z"}, "message": "rs6000: <VSs> -> <sd>p\n\nWe don't need the <VSs> mode attribute, if we make <sd> work for V4SF\nand V2DF just like for SF and DF.\n\n\n\t* config/rs6000/rs6000.md (define_mode_attr sd): Add values for V4SF\n\tand V2DF.\n\t* config/rs6000/vsx.md (define_mode_attr VSs): Delete.\n\t(rest of file): Adjust.\n\nFrom-SVN: r271936", "tree": {"sha": "049964df6c4fbdda2be9c1acf2acc2e63248b057", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/049964df6c4fbdda2be9c1acf2acc2e63248b057"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cc8f68381ef967849049433c63cb6324b16a1ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cc8f68381ef967849049433c63cb6324b16a1ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cc8f68381ef967849049433c63cb6324b16a1ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cc8f68381ef967849049433c63cb6324b16a1ac/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0d0863136f59e7f937f60c772921bc73708fba81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d0863136f59e7f937f60c772921bc73708fba81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d0863136f59e7f937f60c772921bc73708fba81"}], "stats": {"total": 114, "additions": 54, "deletions": 60}, "files": [{"sha": "3571664b16081652bd9f8aee543d40f1940c663f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cc8f68381ef967849049433c63cb6324b16a1ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cc8f68381ef967849049433c63cb6324b16a1ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6cc8f68381ef967849049433c63cb6324b16a1ac", "patch": "@@ -1,3 +1,10 @@\n+2019-06-04  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/rs6000.md (define_mode_attr sd): Add values for V4SF\n+\tand V2DF.\n+\t* config/rs6000/vsx.md (define_mode_attr VSs): Delete.\n+\t(rest of file): Adjust.\n+\n 2019-06-04  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/vsx.md (vsx_<VS_spdp_insn>): Use wa instead of <VSa>."}, {"sha": "b8b246a5a2d0ec94142188d19b1f858753197676", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cc8f68381ef967849049433c63cb6324b16a1ac/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cc8f68381ef967849049433c63cb6324b16a1ac/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=6cc8f68381ef967849049433c63cb6324b16a1ac", "patch": "@@ -493,7 +493,8 @@\n (define_mode_iterator SFDF2 [SF DF])\n \n ; A generic s/d attribute, for sp/dp for example.\n-(define_mode_attr sd [(SF \"s\") (DF \"d\")])\n+(define_mode_attr sd [(SF   \"s\") (DF   \"d\")\n+\t\t      (V4SF \"s\") (V2DF \"d\")])\n \n ; \"s\" or nothing, for fmuls/fmul for example.\n (define_mode_attr s [(SF \"s\") (DF \"\")])"}, {"sha": "4061a5e2292a993760fe9b949957306c0d537476", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 45, "deletions": 59, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cc8f68381ef967849049433c63cb6324b16a1ac/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cc8f68381ef967849049433c63cb6324b16a1ac/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=6cc8f68381ef967849049433c63cb6324b16a1ac", "patch": "@@ -93,20 +93,6 @@\n \t\t\t(V1TI  \"vd2\")\n \t\t\t(TI    \"vd2\")])\n \n-;; Map into the appropriate suffix based on the type\n-(define_mode_attr VSs\t[(V16QI \"sp\")\n-\t\t\t (V8HI  \"sp\")\n-\t\t\t (V4SI  \"sp\")\n-\t\t\t (V4SF  \"sp\")\n-\t\t\t (V2DF  \"dp\")\n-\t\t\t (V2DI  \"dp\")\n-\t\t\t (DF    \"dp\")\n-\t\t\t (SF\t\"sp\")\n-\t\t\t (TF    \"dp\")\n-\t\t\t (KF    \"dp\")\n-\t\t\t (V1TI  \"dp\")\n-\t\t\t (TI    \"dp\")])\n-\n ;; Map the register class used\n (define_mode_attr VSr\t[(V16QI \"v\")\n \t\t\t (V8HI  \"v\")\n@@ -1594,23 +1580,23 @@\n         (plus:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")\n \t\t    (match_operand:VSX_F 2 \"vsx_register_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"xvadd<VSs> %x0,%x1,%x2\"\n+  \"xvadd<sd>p %x0,%x1,%x2\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"*vsx_sub<mode>3\"\n   [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa>\")\n         (minus:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")\n \t\t     (match_operand:VSX_F 2 \"vsx_register_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"xvsub<VSs> %x0,%x1,%x2\"\n+  \"xvsub<sd>p %x0,%x1,%x2\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"*vsx_mul<mode>3\"\n   [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n         (mult:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")\n \t\t    (match_operand:VSX_F 2 \"vsx_register_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"xvmul<VSs> %x0,%x1,%x2\"\n+  \"xvmul<sd>p %x0,%x1,%x2\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n ; Emulate vector with scalar for vec_mul in V2DImode\n@@ -1658,7 +1644,7 @@\n         (div:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")\n \t\t   (match_operand:VSX_F 2 \"vsx_register_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"xvdiv<VSs> %x0,%x1,%x2\"\n+  \"xvdiv<sd>p %x0,%x1,%x2\"\n   [(set_attr \"type\" \"<VStype_div>\")])\n \n ; Emulate vector with scalar for vec_div in V2DImode\n@@ -1790,29 +1776,29 @@\n \t\t      (match_operand:VSX_B 2 \"vsx_register_operand\" \"wa\")]\n \t\t   UNSPEC_VSX_TDIV))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"x<VSv>tdiv<VSs> %0,%x1,%x2\"\n+  \"x<VSv>tdiv<sd>p %0,%x1,%x2\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"vsx_fre<mode>2\"\n   [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n \t(unspec:VSX_F [(match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")]\n \t\t      UNSPEC_FRES))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"xvre<VSs> %x0,%x1\"\n+  \"xvre<sd>p %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"*vsx_neg<mode>2\"\n   [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n         (neg:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"xvneg<VSs> %x0,%x1\"\n+  \"xvneg<sd>p %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"*vsx_abs<mode>2\"\n   [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n         (abs:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"xvabs<VSs> %x0,%x1\"\n+  \"xvabs<sd>p %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"vsx_nabs<mode>2\"\n@@ -1821,38 +1807,38 @@\n \t (abs:VSX_F\n \t  (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\"))))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"xvnabs<VSs> %x0,%x1\"\n+  \"xvnabs<sd>p %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"vsx_smax<mode>3\"\n   [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n         (smax:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")\n \t\t    (match_operand:VSX_F 2 \"vsx_register_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"xvmax<VSs> %x0,%x1,%x2\"\n+  \"xvmax<sd>p %x0,%x1,%x2\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"*vsx_smin<mode>3\"\n   [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n         (smin:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")\n \t\t    (match_operand:VSX_F 2 \"vsx_register_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"xvmin<VSs> %x0,%x1,%x2\"\n+  \"xvmin<sd>p %x0,%x1,%x2\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"*vsx_sqrt<mode>2\"\n   [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n         (sqrt:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"xvsqrt<VSs> %x0,%x1\"\n+  \"xvsqrt<sd>p %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_sqrt>\")])\n \n (define_insn \"*vsx_rsqrte<mode>2\"\n   [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n \t(unspec:VSX_F [(match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")]\n \t\t      UNSPEC_RSQRT))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"xvrsqrte<VSs> %x0,%x1\"\n+  \"xvrsqrte<sd>p %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n ;; *tsqrt* returning the fg flag\n@@ -1886,7 +1872,7 @@\n \t(unspec:CCFP [(match_operand:VSX_B 1 \"vsx_register_operand\" \"wa\")]\n \t\t     UNSPEC_VSX_TSQRT))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"x<VSv>tsqrt<VSs> %0,%x1\"\n+  \"x<VSv>tsqrt<sd>p %0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n ;; Fused vector multiply/add instructions. Support the classical Altivec\n@@ -1928,8 +1914,8 @@\n \t    (match_operand:VSX_F 3 \"vsx_register_operand\" \"0,wa\"))))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"@\n-   xvmsuba<VSs> %x0,%x1,%x2\n-   xvmsubm<VSs> %x0,%x1,%x3\"\n+   xvmsuba<sd>p %x0,%x1,%x2\n+   xvmsubm<sd>p %x0,%x1,%x3\"\n   [(set_attr \"type\" \"<VStype_mul>\")])\n \n (define_insn \"*vsx_nfma<mode>4\"\n@@ -1941,8 +1927,8 @@\n \t  (match_operand:VSX_F 3 \"vsx_register_operand\" \"0,wa\"))))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"@\n-   xvnmadda<VSs> %x0,%x1,%x2\n-   xvnmaddm<VSs> %x0,%x1,%x3\"\n+   xvnmadda<sd>p %x0,%x1,%x2\n+   xvnmaddm<sd>p %x0,%x1,%x3\"\n   [(set_attr \"type\" \"<VStype_mul>\")])\n \n (define_insn \"*vsx_nfmsv4sf4\"\n@@ -1980,23 +1966,23 @@\n \t(eq:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")\n \t\t  (match_operand:VSX_F 2 \"vsx_register_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"xvcmpeq<VSs> %x0,%x1,%x2\"\n+  \"xvcmpeq<sd>p %x0,%x1,%x2\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"vsx_gt<mode>\"\n   [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n \t(gt:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")\n \t\t  (match_operand:VSX_F 2 \"vsx_register_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"xvcmpgt<VSs> %x0,%x1,%x2\"\n+  \"xvcmpgt<sd>p %x0,%x1,%x2\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"*vsx_ge<mode>\"\n   [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n \t(ge:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")\n \t\t  (match_operand:VSX_F 2 \"vsx_register_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"xvcmpge<VSs> %x0,%x1,%x2\"\n+  \"xvcmpge<sd>p %x0,%x1,%x2\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n ;; Compare vectors producing a vector result and a predicate, setting CR6 to\n@@ -2011,7 +1997,7 @@\n \t(eq:VSX_F (match_dup 1)\n \t\t  (match_dup 2)))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"xvcmpeq<VSs>. %x0,%x1,%x2\"\n+  \"xvcmpeq<sd>p. %x0,%x1,%x2\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"*vsx_gt_<mode>_p\"\n@@ -2024,7 +2010,7 @@\n \t(gt:VSX_F (match_dup 1)\n \t\t  (match_dup 2)))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"xvcmpgt<VSs>. %x0,%x1,%x2\"\n+  \"xvcmpgt<sd>p. %x0,%x1,%x2\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"*vsx_ge_<mode>_p\"\n@@ -2037,7 +2023,7 @@\n \t(ge:VSX_F (match_dup 1)\n \t\t  (match_dup 2)))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"xvcmpge<VSs>. %x0,%x1,%x2\"\n+  \"xvcmpge<sd>p. %x0,%x1,%x2\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n ;; Vector select\n@@ -2071,7 +2057,7 @@\n \t  (match_operand:VSX_F 2 \"vsx_register_operand\" \"wa\")]\n \t UNSPEC_COPYSIGN))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"xvcpsgn<VSs> %x0,%x2,%x1\"\n+  \"xvcpsgn<sd>p %x0,%x2,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n ;; For the conversions, limit the register class for the integer value to be\n@@ -2084,76 +2070,76 @@\n   [(set (match_operand:VSX_F 0 \"gpc_reg_operand\" \"=wa\")\n \t(float:VSX_F (match_operand:<VSI> 1 \"gpc_reg_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"xvcvsx<VSc><VSs> %x0,%x1\"\n+  \"xvcvsx<VSc><sd>p %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"vsx_floatuns<VSi><mode>2\"\n   [(set (match_operand:VSX_F 0 \"gpc_reg_operand\" \"=wa\")\n \t(unsigned_float:VSX_F (match_operand:<VSI> 1 \"gpc_reg_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"xvcvux<VSc><VSs> %x0,%x1\"\n+  \"xvcvux<VSc><sd>p %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"vsx_fix_trunc<mode><VSi>2\"\n   [(set (match_operand:<VSI> 0 \"gpc_reg_operand\" \"=wa\")\n \t(fix:<VSI> (match_operand:VSX_F 1 \"gpc_reg_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"x<VSv>cv<VSs>sx<VSc>s %x0,%x1\"\n+  \"x<VSv>cv<sd>psx<VSc>s %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"vsx_fixuns_trunc<mode><VSi>2\"\n   [(set (match_operand:<VSI> 0 \"gpc_reg_operand\" \"=wa\")\n \t(unsigned_fix:<VSI> (match_operand:VSX_F 1 \"gpc_reg_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"x<VSv>cv<VSs>ux<VSc>s %x0,%x1\"\n+  \"x<VSv>cv<sd>pux<VSc>s %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n ;; Math rounding functions\n-(define_insn \"vsx_x<VSv>r<VSs>i\"\n+(define_insn \"vsx_x<VSv>r<sd>pi\"\n   [(set (match_operand:VSX_B 0 \"vsx_register_operand\" \"=wa\")\n \t(unspec:VSX_B [(match_operand:VSX_B 1 \"vsx_register_operand\" \"wa\")]\n \t\t      UNSPEC_VSX_ROUND_I))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"x<VSv>r<VSs>i %x0,%x1\"\n+  \"x<VSv>r<sd>pi %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n-(define_insn \"vsx_x<VSv>r<VSs>ic\"\n+(define_insn \"vsx_x<VSv>r<sd>pic\"\n   [(set (match_operand:VSX_B 0 \"vsx_register_operand\" \"=wa\")\n \t(unspec:VSX_B [(match_operand:VSX_B 1 \"vsx_register_operand\" \"wa\")]\n \t\t      UNSPEC_VSX_ROUND_IC))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"x<VSv>r<VSs>ic %x0,%x1\"\n+  \"x<VSv>r<sd>pic %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"vsx_btrunc<mode>2\"\n   [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n \t(fix:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"xvr<VSs>iz %x0,%x1\"\n+  \"xvr<sd>piz %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"*vsx_b2trunc<mode>2\"\n   [(set (match_operand:VSX_B 0 \"vsx_register_operand\" \"=wa\")\n \t(unspec:VSX_B [(match_operand:VSX_B 1 \"vsx_register_operand\" \"wa\")]\n \t\t      UNSPEC_FRIZ))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"x<VSv>r<VSs>iz %x0,%x1\"\n+  \"x<VSv>r<sd>piz %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"vsx_floor<mode>2\"\n   [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n \t(unspec:VSX_F [(match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")]\n \t\t      UNSPEC_FRIM))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"xvr<VSs>im %x0,%x1\"\n+  \"xvr<sd>pim %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n (define_insn \"vsx_ceil<mode>2\"\n   [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n \t(unspec:VSX_F [(match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")]\n \t\t      UNSPEC_FRIP))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"xvr<VSs>ip %x0,%x1\"\n+  \"xvr<sd>pip %x0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n \f\n@@ -4688,47 +4674,47 @@\n   [(set_attr \"type\" \"fpcompare\")])\n \n ;; VSX Vector Extract Exponent Double and Single Precision\n-(define_insn \"xvxexp<VSs>\"\n+(define_insn \"xvxexp<sd>p\"\n   [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n \t(unspec:VSX_F\n \t [(match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")]\n \t UNSPEC_VSX_VXEXP))]\n   \"TARGET_P9_VECTOR\"\n-  \"xvxexp<VSs> %x0,%x1\"\n+  \"xvxexp<sd>p %x0,%x1\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n ;; VSX Vector Extract Significand Double and Single Precision\n-(define_insn \"xvxsig<VSs>\"\n+(define_insn \"xvxsig<sd>p\"\n   [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n \t(unspec:VSX_F\n \t [(match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")]\n \t UNSPEC_VSX_VXSIG))]\n   \"TARGET_P9_VECTOR\"\n-  \"xvxsig<VSs> %x0,%x1\"\n+  \"xvxsig<sd>p %x0,%x1\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n ;; VSX Vector Insert Exponent Double and Single Precision\n-(define_insn \"xviexp<VSs>\"\n+(define_insn \"xviexp<sd>p\"\n   [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n \t(unspec:VSX_F\n \t [(match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")\n \t  (match_operand:VSX_F 2 \"vsx_register_operand\" \"wa\")]\n \t UNSPEC_VSX_VIEXP))]\n   \"TARGET_P9_VECTOR\"\n-  \"xviexp<VSs> %x0,%x1,%x2\"\n+  \"xviexp<sd>p %x0,%x1,%x2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n ;; VSX Vector Test Data Class Double and Single Precision\n ;; The corresponding elements of the result vector are all ones\n ;; if any of the conditions tested by operand 3 are satisfied.\n-(define_insn \"xvtstdc<VSs>\"\n+(define_insn \"xvtstdc<sd>p\"\n   [(set (match_operand:<VSI> 0 \"vsx_register_operand\" \"=wa\")\n \t(unspec:<VSI>\n \t [(match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")\n \t  (match_operand:SI 2 \"u7bit_cint_operand\" \"n\")]\n \t UNSPEC_VSX_VTSTDC))]\n   \"TARGET_P9_VECTOR\"\n-  \"xvtstdc<VSs> %x0,%x1,%2\"\n+  \"xvtstdc<sd>p %x0,%x1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n ;; ISA 3.0 String Operations Support"}]}