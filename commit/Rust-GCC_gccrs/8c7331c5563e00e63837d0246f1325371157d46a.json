{"sha": "8c7331c5563e00e63837d0246f1325371157d46a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM3MzMxYzU1NjNlMDBlNjM4MzdkMDI0NmYxMzI1MzcxMTU3ZDQ2YQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-07-21T16:05:10Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-07-21T16:05:10Z"}, "message": "Add AddressSanitizer annotations to std::vector\n\n\t* config/allocator/malloc_allocator_base.h [__SANITIZE_ADDRESS__]\n\t(_GLIBCXX_SANITIZE_STD_ALLOCATOR): Define.\n\t* config/allocator/new_allocator_base.h [__SANITIZE_ADDRESS__]\n\t(_GLIBCXX_SANITIZE_STD_ALLOCATOR): Define.\n\t* doc/xml/manual/using.xml (_GLIBCXX_SANITIZE_VECTOR): Document macro.\n\t* include/bits/stl_vector.h [_GLIBCXX_SANITIZE_VECTOR]\n\t(_Vector_impl::_Asan, _Vector_impl::_Asan::_Reinit)\n\t(_Vector_impl::_Asan::_Grow, _GLIBCXX_ASAN_ANNOTATE_REINIT)\n\t(_GLIBCXX_ASAN_ANNOTATE_GROW, _GLIBCXX_ASAN_ANNOTATE_GREW)\n\t(_GLIBCXX_ASAN_ANNOTATE_SHRINK, _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC):\n\tDefine annotation helper types and macros.\n\t(vector::~vector, vector::push_back, vector::pop_back)\n\t(vector::_M_erase_at_end): Add annotations.\n\t* include/bits/vector.tcc (vector::reserve, vector::emplace_back)\n\t(vector::insert, vector::_M_erase, vector::operator=)\n\t(vector::_M_fill_assign, vector::_M_assign_aux)\n\t(vector::_M_insert_rval, vector::_M_emplace_aux)\n\t(vector::_M_insert_aux, vector::_M_realloc_insert)\n\t(vector::_M_fill_insert, vector::_M_default_append)\n\t(vector::_M_shrink_to_fit, vector::_M_range_insert): Annotate.\n\nFrom-SVN: r250430", "tree": {"sha": "6043f52919e5b7b0577fcb51573583ea8183b79c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6043f52919e5b7b0577fcb51573583ea8183b79c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c7331c5563e00e63837d0246f1325371157d46a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c7331c5563e00e63837d0246f1325371157d46a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c7331c5563e00e63837d0246f1325371157d46a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c7331c5563e00e63837d0246f1325371157d46a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c2dee6fc9c52bf0cb0ddbd95333ab3d0745df3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c2dee6fc9c52bf0cb0ddbd95333ab3d0745df3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c2dee6fc9c52bf0cb0ddbd95333ab3d0745df3b"}], "stats": {"total": 246, "additions": 234, "deletions": 12}, "files": [{"sha": "6d827669d9a2354e3bb8355961ee935fc1ed8967", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7331c5563e00e63837d0246f1325371157d46a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7331c5563e00e63837d0246f1325371157d46a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8c7331c5563e00e63837d0246f1325371157d46a", "patch": "@@ -1,3 +1,26 @@\n+2017-07-20  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* config/allocator/malloc_allocator_base.h [__SANITIZE_ADDRESS__]\n+\t(_GLIBCXX_SANITIZE_STD_ALLOCATOR): Define.\n+\t* config/allocator/new_allocator_base.h [__SANITIZE_ADDRESS__]\n+\t(_GLIBCXX_SANITIZE_STD_ALLOCATOR): Define.\n+\t* doc/xml/manual/using.xml (_GLIBCXX_SANITIZE_VECTOR): Document macro.\n+\t* include/bits/stl_vector.h [_GLIBCXX_SANITIZE_VECTOR]\n+\t(_Vector_impl::_Asan, _Vector_impl::_Asan::_Reinit)\n+\t(_Vector_impl::_Asan::_Grow, _GLIBCXX_ASAN_ANNOTATE_REINIT)\n+\t(_GLIBCXX_ASAN_ANNOTATE_GROW, _GLIBCXX_ASAN_ANNOTATE_GREW)\n+\t(_GLIBCXX_ASAN_ANNOTATE_SHRINK, _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC):\n+\tDefine annotation helper types and macros.\n+\t(vector::~vector, vector::push_back, vector::pop_back)\n+\t(vector::_M_erase_at_end): Add annotations.\n+\t* include/bits/vector.tcc (vector::reserve, vector::emplace_back)\n+\t(vector::insert, vector::_M_erase, vector::operator=)\n+\t(vector::_M_fill_assign, vector::_M_assign_aux)\n+\t(vector::_M_insert_rval, vector::_M_emplace_aux)\n+\t(vector::_M_insert_aux, vector::_M_realloc_insert)\n+\t(vector::_M_fill_insert, vector::_M_default_append)\n+\t(vector::_M_shrink_to_fit, vector::_M_range_insert): Annotate.\n+\n 2017-07-19  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/81476"}, {"sha": "54e0837f01f011a32decc5c935dd12225a5ba265", "filename": "libstdc++-v3/config/allocator/malloc_allocator_base.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7331c5563e00e63837d0246f1325371157d46a/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fmalloc_allocator_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7331c5563e00e63837d0246f1325371157d46a/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fmalloc_allocator_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fmalloc_allocator_base.h?ref=8c7331c5563e00e63837d0246f1325371157d46a", "patch": "@@ -52,4 +52,8 @@ namespace std\n # define __allocator_base  __gnu_cxx::malloc_allocator\n #endif\n \n+#if defined(__SANITIZE_ADDRESS__) && !defined(_GLIBCXX_SANITIZE_STD_ALLOCATOR)\n+# define _GLIBCXX_SANITIZE_STD_ALLOCATOR 1\n+#endif\n+\n #endif"}, {"sha": "e776ed31864069a10c2b92a702d6aa527738e09d", "filename": "libstdc++-v3/config/allocator/new_allocator_base.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7331c5563e00e63837d0246f1325371157d46a/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fnew_allocator_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7331c5563e00e63837d0246f1325371157d46a/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fnew_allocator_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fnew_allocator_base.h?ref=8c7331c5563e00e63837d0246f1325371157d46a", "patch": "@@ -52,4 +52,8 @@ namespace std\n # define __allocator_base  __gnu_cxx::new_allocator\n #endif\n \n+#if defined(__SANITIZE_ADDRESS__) && !defined(_GLIBCXX_SANITIZE_STD_ALLOCATOR)\n+# define _GLIBCXX_SANITIZE_STD_ALLOCATOR 1\n+#endif\n+\n #endif"}, {"sha": "6ce29fd30be74fcc5273ec0971a3b72115aaba73", "filename": "libstdc++-v3/doc/xml/manual/using.xml", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7331c5563e00e63837d0246f1325371157d46a/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7331c5563e00e63837d0246f1325371157d46a/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml?ref=8c7331c5563e00e63837d0246f1325371157d46a", "patch": "@@ -991,6 +991,24 @@ g++ -Winvalid-pch -I. -include stdc++.h -H -g -O2 hello.cc -o test.exe\n     </listitem></varlistentry>\n     </variablelist>\n \n+    <varlistentry><term><code>_GLIBCXX_SANITIZE_VECTOR</code></term>\n+    <listitem>\n+      <para>\n+\tUndefined by default. When defined, <classname>std::vector</classname>\n+        operations will be annotated so that AddressSanitizer can detect\n+        invalid accesses to the unused capacity of a\n+        <classname>std::vector</classname>. These annotations are only\n+        enabled for\n+        <classname>std::vector&lt;T, std::allocator&lt;T&gt;&gt;</classname>\n+        and only when <classname>std::allocator</classname> is derived from\n+        <xref linkend=\"allocator.impl\"><classname>new_allocator</classname>\n+        or <classname>malloc_allocator</classname></xref>. The annotations\n+        must be present on all vector operations or none, so this macro must\n+        be defined to the same value for all translation units that create,\n+        destroy or modify vectors.\n+      </para>\n+    </listitem></varlistentry>\n+\n   </section>\n \n <section xml:id=\"manual.intro.using.abi\" xreflabel=\"Dual ABI\">"}, {"sha": "c7787f72ff5aa2b2dbe25c6bf0730066e2939005", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 140, "deletions": 6, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7331c5563e00e63837d0246f1325371157d46a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7331c5563e00e63837d0246f1325371157d46a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=8c7331c5563e00e63837d0246f1325371157d46a", "patch": "@@ -65,6 +65,12 @@\n \n #include <debug/assertions.h>\n \n+#if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR\n+extern \"C\" void\n+__sanitizer_annotate_contiguous_container(const void*, const void*,\n+\t\t\t\t\t  const void*, const void*);\n+#endif\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n@@ -106,6 +112,121 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  std::swap(_M_finish, __x._M_finish);\n \t  std::swap(_M_end_of_storage, __x._M_end_of_storage);\n \t}\n+\n+#if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR\n+\ttemplate<typename = _Tp_alloc_type>\n+\t  struct _Asan\n+\t  {\n+\t    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>\n+\t      ::size_type size_type;\n+\n+\t    static void _S_shrink(_Vector_impl&, size_type) { }\n+\t    static void _S_on_dealloc(_Vector_impl&) { }\n+\n+\t    typedef _Vector_impl& _Reinit;\n+\n+\t    struct _Grow\n+\t    {\n+\t      _Grow(_Vector_impl&, size_type) { }\n+\t      void _M_grew(size_type) { }\n+\t    };\n+\t  };\n+\n+\t// Enable ASan annotations for memory obtained from std::allocator.\n+\ttemplate<typename _Up>\n+\t  struct _Asan<allocator<_Up> >\n+\t  {\n+\t    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>\n+\t      ::size_type size_type;\n+\n+\t    // Adjust ASan annotation for [_M_start, _M_end_of_storage) to\n+\t    // mark end of valid region as __curr instead of __prev.\n+\t    static void\n+\t    _S_adjust(_Vector_impl& __impl, pointer __prev, pointer __curr)\n+\t    {\n+\t      __sanitizer_annotate_contiguous_container(__impl._M_start,\n+\t\t  __impl._M_end_of_storage, __prev, __curr);\n+\t    }\n+\n+\t    static void\n+\t    _S_grow(_Vector_impl& __impl, size_type __n)\n+\t    { _S_adjust(__impl, __impl._M_finish, __impl._M_finish + __n); }\n+\n+\t    static void\n+\t    _S_shrink(_Vector_impl& __impl, size_type __n)\n+\t    { _S_adjust(__impl, __impl._M_finish + __n, __impl._M_finish); }\n+\n+\t    static void\n+\t    _S_on_dealloc(_Vector_impl& __impl)\n+\t    {\n+\t      if (__impl._M_start)\n+\t\t_S_adjust(__impl, __impl._M_finish, __impl._M_end_of_storage);\n+\t    }\n+\n+\t    // Used on reallocation to tell ASan unused capacity is invalid.\n+\t    struct _Reinit\n+\t    {\n+\t      explicit _Reinit(_Vector_impl& __impl) : _M_impl(__impl)\n+\t      {\n+\t\t// Mark unused capacity as valid again before deallocating it.\n+\t\t_S_on_dealloc(_M_impl);\n+\t      }\n+\n+\t      ~_Reinit()\n+\t      {\n+\t\t// Mark unused capacity as invalid after reallocation.\n+\t\tif (_M_impl._M_start)\n+\t\t  _S_adjust(_M_impl, _M_impl._M_end_of_storage,\n+\t\t\t    _M_impl._M_finish);\n+\t      }\n+\n+\t      _Vector_impl& _M_impl;\n+\n+#if __cplusplus >= 201103L\n+\t      _Reinit(const _Reinit&) = delete;\n+\t      _Reinit& operator=(const _Reinit&) = delete;\n+#endif\n+\t    };\n+\n+\t    // Tell ASan when unused capacity is initialized to be valid.\n+\t    struct _Grow\n+\t    {\n+\t      _Grow(_Vector_impl& __impl, size_type __n)\n+\t      : _M_impl(__impl), _M_n(__n)\n+\t      { _S_grow(_M_impl, __n); }\n+\n+\t      ~_Grow() { if (_M_n) _S_shrink(_M_impl, _M_n); }\n+\n+\t      void _M_grew(size_type __n) { _M_n -= __n; }\n+\n+#if __cplusplus >= 201103L\n+\t      _Grow(const _Grow&) = delete;\n+\t      _Grow& operator=(const _Grow&) = delete;\n+#endif\n+\t    private:\n+\t      _Vector_impl& _M_impl;\n+\t      size_type _M_n;\n+\t    };\n+\t  };\n+\n+#define _GLIBCXX_ASAN_ANNOTATE_REINIT \\\n+  typename _Base::_Vector_impl::template _Asan<>::_Reinit const \\\n+\t__attribute__((__unused__)) __reinit_guard(this->_M_impl)\n+#define _GLIBCXX_ASAN_ANNOTATE_GROW(n) \\\n+  typename _Base::_Vector_impl::template _Asan<>::_Grow \\\n+\t__attribute__((__unused__)) __grow_guard(this->_M_impl, (n))\n+#define _GLIBCXX_ASAN_ANNOTATE_GREW(n) __grow_guard._M_grew(n)\n+#define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n) \\\n+  _Base::_Vector_impl::template _Asan<>::_S_shrink(this->_M_impl, n)\n+#define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC \\\n+  _Base::_Vector_impl::template _Asan<>::_S_on_dealloc(this->_M_impl)\n+#else // ! (_GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR)\n+#define _GLIBCXX_ASAN_ANNOTATE_REINIT\n+#define _GLIBCXX_ASAN_ANNOTATE_GROW(n)\n+#define _GLIBCXX_ASAN_ANNOTATE_GREW(n)\n+#define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n)\n+#define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC\n+#endif // _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR\n       };\n \n     public:\n@@ -159,8 +280,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #endif\n \n       ~_Vector_base() _GLIBCXX_NOEXCEPT\n-      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage\n-\t\t      - this->_M_impl._M_start); }\n+      {\n+\t_M_deallocate(_M_impl._M_start,\n+\t\t      _M_impl._M_end_of_storage - _M_impl._M_start);\n+      }\n \n     public:\n       _Vector_impl _M_impl;\n@@ -431,8 +554,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  responsibility.\n        */\n       ~vector() _GLIBCXX_NOEXCEPT\n-      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,\n-\t\t      _M_get_Tp_allocator()); }\n+      {\n+\tstd::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,\n+\t\t      _M_get_Tp_allocator());\n+\t_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;\n+      }\n \n       /**\n        *  @brief  %Vector assignment operator.\n@@ -940,9 +1066,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       {\n \tif (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)\n \t  {\n+\t    _GLIBCXX_ASAN_ANNOTATE_GROW(1);\n \t    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,\n \t\t\t\t     __x);\n \t    ++this->_M_impl._M_finish;\n+\t    _GLIBCXX_ASAN_ANNOTATE_GREW(1);\n \t  }\n \telse\n \t  _M_realloc_insert(end(), __x);\n@@ -977,6 +1105,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t__glibcxx_requires_nonempty();\n \t--this->_M_impl._M_finish;\n \t_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);\n+\t_GLIBCXX_ASAN_ANNOTATE_SHRINK(1);\n       }\n \n #if __cplusplus >= 201103L\n@@ -1510,8 +1639,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       void\n       _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT\n       {\n-\tstd::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());\n-\tthis->_M_impl._M_finish = __pos;\n+\tif (size_type __n = this->_M_impl._M_finish - __pos)\n+\t  {\n+\t    std::_Destroy(__pos, this->_M_impl._M_finish,\n+\t\t\t  _M_get_Tp_allocator());\n+\t    this->_M_impl._M_finish = __pos;\n+\t    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);\n+\t  }\n       }\n \n       iterator"}, {"sha": "b9dff0e80df4f3cadecf6531cbafe8fb3d15a6d1", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 45, "deletions": 6, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7331c5563e00e63837d0246f1325371157d46a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7331c5563e00e63837d0246f1325371157d46a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=8c7331c5563e00e63837d0246f1325371157d46a", "patch": "@@ -73,6 +73,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  pointer __tmp = _M_allocate_and_copy(__n,\n \t    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),\n \t    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));\n+\t  _GLIBCXX_ASAN_ANNOTATE_REINIT;\n \t  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,\n \t\t\t_M_get_Tp_allocator());\n \t  _M_deallocate(this->_M_impl._M_start,\n@@ -97,9 +98,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       {\n \tif (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)\n \t  {\n+\t    _GLIBCXX_ASAN_ANNOTATE_GROW(1);\n \t    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,\n \t\t\t\t     std::forward<_Args>(__args)...);\n \t    ++this->_M_impl._M_finish;\n+\t    _GLIBCXX_ASAN_ANNOTATE_GREW(1);\n \t  }\n \telse\n \t  _M_realloc_insert(end(), std::forward<_Args>(__args)...);\n@@ -122,9 +125,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)\n \tif (__position == end())\n \t  {\n+\t    _GLIBCXX_ASAN_ANNOTATE_GROW(1);\n \t    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,\n \t\t\t\t     __x);\n \t    ++this->_M_impl._M_finish;\n+\t    _GLIBCXX_ASAN_ANNOTATE_GREW(1);\n \t  }\n \telse\n \t  {\n@@ -157,6 +162,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t_GLIBCXX_MOVE3(__position + 1, end(), __position);\n       --this->_M_impl._M_finish;\n       _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);\n+      _GLIBCXX_ASAN_ANNOTATE_SHRINK(1);\n       return __position;\n     }\n \n@@ -181,6 +187,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     {\n       if (&__x != this)\n \t{\n+\t  _GLIBCXX_ASAN_ANNOTATE_REINIT;\n #if __cplusplus >= 201103L\n \t  if (_Alloc_traits::_S_propagate_on_copy_assign())\n \t    {\n@@ -245,10 +252,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       else if (__n > size())\n \t{\n \t  std::fill(begin(), end(), __val);\n+\t  const size_type __add = __n - size();\n+\t  _GLIBCXX_ASAN_ANNOTATE_GROW(__add);\n \t  this->_M_impl._M_finish =\n \t    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,\n-\t\t\t\t\t  __n - size(), __val,\n-\t\t\t\t\t  _M_get_Tp_allocator());\n+\t\t\t\t\t  __add, __val, _M_get_Tp_allocator());\n+\t  _GLIBCXX_ASAN_ANNOTATE_GREW(__add);\n \t}\n       else\n         _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));\n@@ -284,6 +293,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tif (__len > capacity())\n \t  {\n \t    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));\n+\t    _GLIBCXX_ASAN_ANNOTATE_REINIT;\n \t    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,\n \t\t\t  _M_get_Tp_allocator());\n \t    _M_deallocate(this->_M_impl._M_start,\n@@ -300,10 +310,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    _ForwardIterator __mid = __first;\n \t    std::advance(__mid, size());\n \t    std::copy(__first, __mid, this->_M_impl._M_start);\n+\t    const size_type __attribute__((__unused__)) __n = __len - size();\n+\t    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);\n \t    this->_M_impl._M_finish =\n \t      std::__uninitialized_copy_a(__mid, __last,\n \t\t\t\t\t  this->_M_impl._M_finish,\n \t\t\t\t\t  _M_get_Tp_allocator());\n+\t    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);\n \t  }\n       }\n \n@@ -317,9 +330,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)\n \tif (__position == cend())\n \t  {\n+\t    _GLIBCXX_ASAN_ANNOTATE_GROW(1);\n \t    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,\n \t\t\t\t     std::move(__v));\n \t    ++this->_M_impl._M_finish;\n+\t    _GLIBCXX_ASAN_ANNOTATE_GREW(1);\n \t  }\n \telse\n \t  _M_insert_aux(begin() + __n, std::move(__v));\n@@ -340,9 +355,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tif (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)\n \t  if (__position == cend())\n \t    {\n+\t      _GLIBCXX_ASAN_ANNOTATE_GROW(1);\n \t      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,\n \t\t\t\t       std::forward<_Args>(__args)...);\n \t      ++this->_M_impl._M_finish;\n+\t      _GLIBCXX_ASAN_ANNOTATE_GREW(1);\n \t    }\n \t  else\n \t    {\n@@ -370,10 +387,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     _M_insert_aux(iterator __position, const _Tp& __x)\n #endif\n     {\n+      _GLIBCXX_ASAN_ANNOTATE_GROW(1);\n       _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,\n-\t\t\t       _GLIBCXX_MOVE(*(this->_M_impl._M_finish\n-\t\t\t\t\t       - 1)));\n+\t\t\t       _GLIBCXX_MOVE(*(this->_M_impl._M_finish - 1)));\n       ++this->_M_impl._M_finish;\n+      _GLIBCXX_ASAN_ANNOTATE_GREW(1);\n #if __cplusplus < 201103L\n       _Tp __x_copy = __x;\n #endif\n@@ -443,11 +461,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  _M_deallocate(__new_start, __len);\n \t  __throw_exception_again;\n \t}\n+      _GLIBCXX_ASAN_ANNOTATE_REINIT;\n       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,\n \t\t    _M_get_Tp_allocator());\n       _M_deallocate(this->_M_impl._M_start,\n-\t\t    this->_M_impl._M_end_of_storage\n-\t\t    - this->_M_impl._M_start);\n+\t\t    this->_M_impl._M_end_of_storage - this->_M_impl._M_start);\n       this->_M_impl._M_start = __new_start;\n       this->_M_impl._M_finish = __new_finish;\n       this->_M_impl._M_end_of_storage = __new_start + __len;\n@@ -473,27 +491,32 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t      pointer __old_finish(this->_M_impl._M_finish);\n \t      if (__elems_after > __n)\n \t\t{\n+\t\t  _GLIBCXX_ASAN_ANNOTATE_GROW(__n);\n \t\t  std::__uninitialized_move_a(this->_M_impl._M_finish - __n,\n \t\t\t\t\t      this->_M_impl._M_finish,\n \t\t\t\t\t      this->_M_impl._M_finish,\n \t\t\t\t\t      _M_get_Tp_allocator());\n \t\t  this->_M_impl._M_finish += __n;\n+\t\t  _GLIBCXX_ASAN_ANNOTATE_GREW(__n);\n \t\t  _GLIBCXX_MOVE_BACKWARD3(__position.base(),\n \t\t\t\t\t  __old_finish - __n, __old_finish);\n \t\t  std::fill(__position.base(), __position.base() + __n,\n \t\t\t    __x_copy);\n \t\t}\n \t      else\n \t\t{\n+\t\t  _GLIBCXX_ASAN_ANNOTATE_GROW(__n);\n \t\t  this->_M_impl._M_finish =\n \t\t    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,\n \t\t\t\t\t\t  __n - __elems_after,\n \t\t\t\t\t\t  __x_copy,\n \t\t\t\t\t\t  _M_get_Tp_allocator());\n+\t\t  _GLIBCXX_ASAN_ANNOTATE_GREW(__n - __elems_after);\n \t\t  std::__uninitialized_move_a(__position.base(), __old_finish,\n \t\t\t\t\t      this->_M_impl._M_finish,\n \t\t\t\t\t      _M_get_Tp_allocator());\n \t\t  this->_M_impl._M_finish += __elems_after;\n+\t\t  _GLIBCXX_ASAN_ANNOTATE_GREW(__elems_after);\n \t\t  std::fill(__position.base(), __old_finish, __x_copy);\n \t\t}\n \t    }\n@@ -536,6 +559,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t  _M_deallocate(__new_start, __len);\n \t\t  __throw_exception_again;\n \t\t}\n+\t      _GLIBCXX_ASAN_ANNOTATE_REINIT;\n \t      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,\n \t\t\t    _M_get_Tp_allocator());\n \t      _M_deallocate(this->_M_impl._M_start,\n@@ -559,9 +583,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  if (size_type(this->_M_impl._M_end_of_storage\n \t\t\t- this->_M_impl._M_finish) >= __n)\n \t    {\n+\t      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);\n \t      this->_M_impl._M_finish =\n \t\tstd::__uninitialized_default_n_a(this->_M_impl._M_finish,\n \t\t\t\t\t\t __n, _M_get_Tp_allocator());\n+\t      _GLIBCXX_ASAN_ANNOTATE_GREW(__n);\n \t    }\n \t  else\n \t    {\n@@ -587,6 +613,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t  _M_deallocate(__new_start, __len);\n \t\t  __throw_exception_again;\n \t\t}\n+\t      _GLIBCXX_ASAN_ANNOTATE_REINIT;\n \t      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,\n \t\t\t    _M_get_Tp_allocator());\n \t      _M_deallocate(this->_M_impl._M_start,\n@@ -606,6 +633,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     {\n       if (capacity() == size())\n \treturn false;\n+      _GLIBCXX_ASAN_ANNOTATE_REINIT;\n       return std::__shrink_to_fit_aux<vector>::_S_do_it(*this);\n     }\n #endif\n@@ -648,11 +676,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\tpointer __old_finish(this->_M_impl._M_finish);\n \t\tif (__elems_after > __n)\n \t\t  {\n+\t\t    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);\n \t\t    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,\n \t\t\t\t\t\tthis->_M_impl._M_finish,\n \t\t\t\t\t\tthis->_M_impl._M_finish,\n \t\t\t\t\t\t_M_get_Tp_allocator());\n \t\t    this->_M_impl._M_finish += __n;\n+\t\t    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);\n \t\t    _GLIBCXX_MOVE_BACKWARD3(__position.base(),\n \t\t\t\t\t    __old_finish - __n, __old_finish);\n \t\t    std::copy(__first, __last, __position);\n@@ -661,15 +691,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t  {\n \t\t    _ForwardIterator __mid = __first;\n \t\t    std::advance(__mid, __elems_after);\n+\t\t    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);\n \t\t    std::__uninitialized_copy_a(__mid, __last,\n \t\t\t\t\t\tthis->_M_impl._M_finish,\n \t\t\t\t\t\t_M_get_Tp_allocator());\n \t\t    this->_M_impl._M_finish += __n - __elems_after;\n+\t\t    _GLIBCXX_ASAN_ANNOTATE_GREW(__n - __elems_after);\n \t\t    std::__uninitialized_move_a(__position.base(),\n \t\t\t\t\t\t__old_finish,\n \t\t\t\t\t\tthis->_M_impl._M_finish,\n \t\t\t\t\t\t_M_get_Tp_allocator());\n \t\t    this->_M_impl._M_finish += __elems_after;\n+\t\t    _GLIBCXX_ASAN_ANNOTATE_GREW(__elems_after);\n \t\t    std::copy(__first, __mid, __position);\n \t\t  }\n \t      }\n@@ -701,6 +734,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t    _M_deallocate(__new_start, __len);\n \t\t    __throw_exception_again;\n \t\t  }\n+\t\t_GLIBCXX_ASAN_ANNOTATE_REINIT;\n \t\tstd::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,\n \t\t\t      _M_get_Tp_allocator());\n \t\t_M_deallocate(this->_M_impl._M_start,\n@@ -909,4 +943,9 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n #endif // C++11\n \n+#undef _GLIBCXX_ASAN_ANNOTATE_REINIT\n+#undef _GLIBCXX_ASAN_ANNOTATE_GROW\n+#undef _GLIBCXX_ASAN_ANNOTATE_GREW\n+#undef _GLIBCXX_ASAN_ANNOTATE_SHRINK\n+\n #endif /* _VECTOR_TCC */"}]}