{"sha": "03bebcacbedccd204bb09a4cfb75caf6cc8b21dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNiZWJjYWNiZWRjY2QyMDRiYjA5YTRjZmI3NWNhZjZjYzhiMjFkZA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-02-14T21:08:52Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-02-14T21:08:52Z"}, "message": "re PR middle-end/23670 (Fold does not fold (a|b)&b to b likewise for (a&b) | b to b)\n\n\n\tPR middle-end/23670\n\t* fold-const.c (fold_binary) <BIT_IOR_EXPR>: Optimize (X&Y)|Y into\n\t(X,Y) and the corresponding symmetry related transformations.\n\t(fold_binary) <BIT_AND_EXPR>: Likewise, optimize (X|Y)&Y into\n\t(X,Y) and its symmetry related transformations.\n\n\t* gcc.dg/tree-ssa/andor-2.c: New test case.\n\nFrom-SVN: r110997", "tree": {"sha": "bdacffd2a9c579632752e1e9a4855d9be7b49879", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdacffd2a9c579632752e1e9a4855d9be7b49879"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03bebcacbedccd204bb09a4cfb75caf6cc8b21dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03bebcacbedccd204bb09a4cfb75caf6cc8b21dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03bebcacbedccd204bb09a4cfb75caf6cc8b21dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03bebcacbedccd204bb09a4cfb75caf6cc8b21dd/comments", "author": null, "committer": null, "parents": [{"sha": "ce99d59440477170c00aa9ef2c2dfacb42e6f25f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce99d59440477170c00aa9ef2c2dfacb42e6f25f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce99d59440477170c00aa9ef2c2dfacb42e6f25f"}], "stats": {"total": 105, "additions": 105, "deletions": 0}, "files": [{"sha": "a134098cc8187fdd747e3c4a61c4d29ab433791a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03bebcacbedccd204bb09a4cfb75caf6cc8b21dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03bebcacbedccd204bb09a4cfb75caf6cc8b21dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03bebcacbedccd204bb09a4cfb75caf6cc8b21dd", "patch": "@@ -1,3 +1,11 @@\n+2006-02-14  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/23670\n+\t* fold-const.c (fold_binary) <BIT_IOR_EXPR>: Optimize (X&Y)|Y into\n+\t(X,Y) and the corresponding symmetry related transformations.\n+\t(fold_binary) <BIT_AND_EXPR>: Likewise, optimize (X|Y)&Y into\n+\t(X,Y) and its symmetry related transformations.\n+\n 2006-02-14  Roger Sayle  <roger@eyesopen.com>\n \n         * dojump.c (do_compare_rtx_and_jump): Also handle multi-word GTU"}, {"sha": "2683dab7d249d3db604a8be8b958e97e772445a4", "filename": "gcc/fold-const.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03bebcacbedccd204bb09a4cfb75caf6cc8b21dd/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03bebcacbedccd204bb09a4cfb75caf6cc8b21dd/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=03bebcacbedccd204bb09a4cfb75caf6cc8b21dd", "patch": "@@ -8161,6 +8161,26 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t\t\t\targ1);\n \t}\n \n+      /* (X & Y) | Y is (X, Y).  */\n+      if (TREE_CODE (arg0) == BIT_AND_EXPR\n+\t  && operand_equal_p (TREE_OPERAND (arg0, 1), arg1, 0))\n+\treturn omit_one_operand (type, arg1, TREE_OPERAND (arg0, 0));\n+      /* (X & Y) | X is (Y, X).  */\n+      if (TREE_CODE (arg0) == BIT_AND_EXPR\n+\t  && operand_equal_p (TREE_OPERAND (arg0, 0), arg1, 0)\n+\t  && reorder_operands_p (TREE_OPERAND (arg0, 1), arg1))\n+\treturn omit_one_operand (type, arg1, TREE_OPERAND (arg0, 1));\n+      /* X | (X & Y) is (Y, X).  */\n+      if (TREE_CODE (arg1) == BIT_AND_EXPR\n+\t  && operand_equal_p (arg0, TREE_OPERAND (arg1, 0), 0)\n+\t  && reorder_operands_p (arg0, TREE_OPERAND (arg1, 1)))\n+\treturn omit_one_operand (type, arg0, TREE_OPERAND (arg1, 1));\n+      /* X | (Y & X) is (Y, X).  */\n+      if (TREE_CODE (arg1) == BIT_AND_EXPR\n+\t  && operand_equal_p (arg0, TREE_OPERAND (arg1, 1), 0)\n+\t  && reorder_operands_p (arg0, TREE_OPERAND (arg1, 0)))\n+\treturn omit_one_operand (type, arg0, TREE_OPERAND (arg1, 0));\n+\n       t1 = distribute_bit_expr (code, type, arg0, arg1);\n       if (t1 != NULL_TREE)\n \treturn t1;\n@@ -8313,6 +8333,26 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t\t\t    fold_build2 (BIT_AND_EXPR, type,\n \t\t\t\t\t TREE_OPERAND (arg0, 1), arg1));\n \n+      /* (X | Y) & Y is (X, Y).  */\n+      if (TREE_CODE (arg0) == BIT_IOR_EXPR\n+\t  && operand_equal_p (TREE_OPERAND (arg0, 1), arg1, 0))\n+\treturn omit_one_operand (type, arg1, TREE_OPERAND (arg0, 0));\n+      /* (X | Y) & X is (Y, X).  */\n+      if (TREE_CODE (arg0) == BIT_IOR_EXPR\n+\t  && operand_equal_p (TREE_OPERAND (arg0, 0), arg1, 0)\n+\t  && reorder_operands_p (TREE_OPERAND (arg0, 1), arg1))\n+\treturn omit_one_operand (type, arg1, TREE_OPERAND (arg0, 1));\n+      /* X & (X | Y) is (Y, X).  */\n+      if (TREE_CODE (arg1) == BIT_IOR_EXPR\n+\t  && operand_equal_p (arg0, TREE_OPERAND (arg1, 0), 0)\n+\t  && reorder_operands_p (arg0, TREE_OPERAND (arg1, 1)))\n+\treturn omit_one_operand (type, arg0, TREE_OPERAND (arg1, 1));\n+      /* X & (Y | X) is (Y, X).  */\n+      if (TREE_CODE (arg1) == BIT_IOR_EXPR\n+\t  && operand_equal_p (arg0, TREE_OPERAND (arg1, 1), 0)\n+\t  && reorder_operands_p (arg0, TREE_OPERAND (arg1, 0)))\n+\treturn omit_one_operand (type, arg0, TREE_OPERAND (arg1, 0));\n+\n       t1 = distribute_bit_expr (code, type, arg0, arg1);\n       if (t1 != NULL_TREE)\n \treturn t1;"}, {"sha": "d2319a10fbf51c0c5dcb59934f56b7c80ff200ec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03bebcacbedccd204bb09a4cfb75caf6cc8b21dd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03bebcacbedccd204bb09a4cfb75caf6cc8b21dd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=03bebcacbedccd204bb09a4cfb75caf6cc8b21dd", "patch": "@@ -1,3 +1,8 @@\n+2006-02-14  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/23670\n+\t* gcc.dg/tree-ssa/andor-2.c: New test case.\n+\n 2006-02-14  Thomas Koenig  <Thomas.Koenig@online.de>\n \n         PR fortran/25045"}, {"sha": "cdc00b7a4e9dfe7e573ef816a65889445e444c36", "filename": "gcc/testsuite/gcc.dg/tree-ssa/andor-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03bebcacbedccd204bb09a4cfb75caf6cc8b21dd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fandor-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03bebcacbedccd204bb09a4cfb75caf6cc8b21dd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fandor-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fandor-2.c?ref=03bebcacbedccd204bb09a4cfb75caf6cc8b21dd", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-original\" } */\n+\n+int test1(int a, int b)\n+{\n+  return (a & b) | b;\n+}\n+\n+int test2(int c, int d)\n+{\n+  return (c & d) | c;\n+}\n+\n+int test3(int e, int f)\n+{\n+  return e | (e & f);\n+}\n+\n+int test4(int g, int h)\n+{\n+  return g | (h & g);\n+}\n+\n+int test5(int i, int j)\n+{\n+  return (i | j) & j;\n+}\n+\n+int test6(int k, int l)\n+{\n+  return (k | l) & k;\n+}\n+\n+int test7(int m, int n)\n+{\n+  return m & (m | n);\n+}\n+\n+int test8(int o, int p)\n+{\n+  return o & (p | o);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"return b;\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"return c;\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"return e;\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"return g;\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"return j;\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"return k;\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"return m;\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"return o;\" 1 \"original\" } } */\n+/* { dg-final { cleanup-tree-dump \"original\" } } */"}]}