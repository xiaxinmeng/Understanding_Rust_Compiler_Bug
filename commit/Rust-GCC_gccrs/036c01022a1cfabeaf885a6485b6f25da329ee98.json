{"sha": "036c01022a1cfabeaf885a6485b6f25da329ee98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM2YzAxMDIyYTFjZmFiZWFmODg1YTY0ODViNmYyNWRhMzI5ZWU5OA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2012-04-30T21:34:35Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-04-30T21:34:35Z"}, "message": "re PR middle-end/53136 (Use after free in ipa_make_edge_direct_to_target, cxx_printable_name_internal problem)\n\n\tPR middle-end/53136\n\t* ipa-prop.c (ipa_print_node_jump_functions): Wrap multiple\n\tcalls to cgraph_node_name in xstrdup.\n\t(ipa_make_edge_direct_to_target): Ditto.\n\t* cgraph.c (dump_cgraph_node): Ditto.\n\t* tree-sra.c (convert_callers_for_node): Ditto.\n\t* lto-symtab.c (lto_cgraph_replace_node): Ditto.\n\t* ipa-cp.c (perhaps_add_new_callers): Ditto.\n\t* cgraphunit.c (cgraph_redirect_edge_call_stmt_to_callee): Ditto.\n\t(cgraph_materialize_all_clones): Ditto.\n\t* ipa-inline.c (report_inline_failed_reason): Ditto.\n\t(want_early_inline_function_p): Ditto.\n\t(edge_badness): Ditto.\n\t(update_edge_key): Ditto.\n\t(flatten_function): Ditto.\n\t(ipa_inline): Ditto.\n\t(inlinw_always_inline_functions): Ditto.\n\t(early_inline_small_functions): Ditto.\n\nFrom-SVN: r187001", "tree": {"sha": "ce57d487e05cec03c2151c772f2cb79883c72c40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce57d487e05cec03c2151c772f2cb79883c72c40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/036c01022a1cfabeaf885a6485b6f25da329ee98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/036c01022a1cfabeaf885a6485b6f25da329ee98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/036c01022a1cfabeaf885a6485b6f25da329ee98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/036c01022a1cfabeaf885a6485b6f25da329ee98/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "24b2a15a832a4ada89c40badfe3742e5fe10891f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24b2a15a832a4ada89c40badfe3742e5fe10891f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24b2a15a832a4ada89c40badfe3742e5fe10891f"}], "stats": {"total": 105, "additions": 66, "deletions": 39}, "files": [{"sha": "478ba87686a43052773bec2dea02c8e3b5a9644a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036c01022a1cfabeaf885a6485b6f25da329ee98/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036c01022a1cfabeaf885a6485b6f25da329ee98/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=036c01022a1cfabeaf885a6485b6f25da329ee98", "patch": "@@ -1,3 +1,24 @@\n+2012-04-30  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR middle-end/53136\n+\t* ipa-prop.c (ipa_print_node_jump_functions): Wrap multiple\n+\tcalls to cgraph_node_name in xstrdup.\n+\t(ipa_make_edge_direct_to_target): Ditto.\n+\t* cgraph.c (dump_cgraph_node): Ditto.\n+\t* tree-sra.c (convert_callers_for_node): Ditto.\n+\t* lto-symtab.c (lto_cgraph_replace_node): Ditto.\n+\t* ipa-cp.c (perhaps_add_new_callers): Ditto.\n+\t* cgraphunit.c (cgraph_redirect_edge_call_stmt_to_callee): Ditto.\n+\t(cgraph_materialize_all_clones): Ditto.\n+\t* ipa-inline.c (report_inline_failed_reason): Ditto.\n+\t(want_early_inline_function_p): Ditto.\n+\t(edge_badness): Ditto.\n+\t(update_edge_key): Ditto.\n+\t(flatten_function): Ditto.\n+\t(ipa_inline): Ditto.\n+\t(inlinw_always_inline_functions): Ditto.\n+\t(early_inline_small_functions): Ditto.\n+\n 2012-04-30  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/53141"}, {"sha": "c765b3179b572701b7a304f8f645fe3e6f115bfc", "filename": "gcc/cgraph.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036c01022a1cfabeaf885a6485b6f25da329ee98/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036c01022a1cfabeaf885a6485b6f25da329ee98/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=036c01022a1cfabeaf885a6485b6f25da329ee98", "patch": "@@ -1476,9 +1476,9 @@ dump_cgraph_node (FILE *f, struct cgraph_node *node)\n \n   if (node->global.inlined_to)\n     fprintf (f, \"  Function %s/%i is inline copy in %s/%i\\n\",\n-\t     cgraph_node_name (node),\n+\t     xstrdup (cgraph_node_name (node)),\n \t     node->symbol.order,\n-\t     cgraph_node_name (node->global.inlined_to),\n+\t     xstrdup (cgraph_node_name (node->global.inlined_to)),\n \t     node->global.inlined_to->symbol.order);\n   if (node->clone_of)\n     fprintf (f, \"  Clone of %s/%i\\n\","}, {"sha": "ee69afa0e8cd92f5abe7e2118cf168f410ca88fe", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036c01022a1cfabeaf885a6485b6f25da329ee98/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036c01022a1cfabeaf885a6485b6f25da329ee98/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=036c01022a1cfabeaf885a6485b6f25da329ee98", "patch": "@@ -2146,8 +2146,8 @@ cgraph_redirect_edge_call_stmt_to_callee (struct cgraph_edge *e)\n   if (cgraph_dump_file)\n     {\n       fprintf (cgraph_dump_file, \"updating call of %s/%i -> %s/%i: \",\n-\t       cgraph_node_name (e->caller), e->caller->uid,\n-\t       cgraph_node_name (e->callee), e->callee->uid);\n+\t       xstrdup (cgraph_node_name (e->caller)), e->caller->uid,\n+\t       xstrdup (cgraph_node_name (e->callee)), e->callee->uid);\n       print_gimple_stmt (cgraph_dump_file, e->call_stmt, 0, dump_flags);\n       if (e->callee->clone.combined_args_to_skip)\n \t{\n@@ -2233,8 +2233,8 @@ cgraph_materialize_all_clones (void)\n \t\t  if (cgraph_dump_file)\n \t\t    {\n \t\t      fprintf (cgraph_dump_file, \"cloning %s to %s\\n\",\n-\t\t\t       cgraph_node_name (node->clone_of),\n-\t\t\t       cgraph_node_name (node));\n+\t\t\t       xstrdup (cgraph_node_name (node->clone_of)),\n+\t\t\t       xstrdup (cgraph_node_name (node)));\n \t\t      if (node->clone.tree_map)\n \t\t        {\n \t\t\t  unsigned int i;"}, {"sha": "eb8d20d94f644acc15b7c54bea1b91c0ecd199b8", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036c01022a1cfabeaf885a6485b6f25da329ee98/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036c01022a1cfabeaf885a6485b6f25da329ee98/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=036c01022a1cfabeaf885a6485b6f25da329ee98", "patch": "@@ -2180,8 +2180,9 @@ perhaps_add_new_callers (struct cgraph_node *node, struct ipcp_value *val)\n \t\t  if (dump_file)\n \t\t    fprintf (dump_file, \" - adding an extra caller %s/%i\"\n \t\t\t     \" of %s/%i\\n\",\n-\t\t\t     cgraph_node_name (cs->caller), cs->caller->uid,\n-\t\t\t     cgraph_node_name (val->spec_node),\n+\t\t\t     xstrdup (cgraph_node_name (cs->caller)),\n+\t\t\t     cs->caller->uid,\n+\t\t\t     xstrdup (cgraph_node_name (val->spec_node)),\n \t\t\t     val->spec_node->uid);\n \n \t\t  cgraph_redirect_edge_callee (cs, val->spec_node);"}, {"sha": "eb3d42d25d6e014c3a983dfa3277917a2f6904e9", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 28, "deletions": 23, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036c01022a1cfabeaf885a6485b6f25da329ee98/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036c01022a1cfabeaf885a6485b6f25da329ee98/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=036c01022a1cfabeaf885a6485b6f25da329ee98", "patch": "@@ -220,8 +220,8 @@ report_inline_failed_reason (struct cgraph_edge *e)\n   if (dump_file)\n     {\n       fprintf (dump_file, \"  not inlinable: %s/%i -> %s/%i, %s\\n\",\n-\t       cgraph_node_name (e->caller), e->caller->uid,\n-\t       cgraph_node_name (e->callee), e->callee->uid,\n+\t       xstrdup (cgraph_node_name (e->caller)), e->caller->uid,\n+\t       xstrdup (cgraph_node_name (e->callee)), e->callee->uid,\n \t       cgraph_inline_failed_string (e->inline_failed));\n     }\n }\n@@ -423,8 +423,8 @@ want_early_inline_function_p (struct cgraph_edge *e)\n \t  if (dump_file)\n \t    fprintf (dump_file, \"  will not early inline: %s/%i->%s/%i, \"\n \t\t     \"call is cold and code would grow by %i\\n\",\n-\t\t     cgraph_node_name (e->caller), e->caller->uid,\n-\t\t     cgraph_node_name (callee), callee->uid,\n+\t\t     xstrdup (cgraph_node_name (e->caller)), e->caller->uid,\n+\t\t     xstrdup (cgraph_node_name (callee)), callee->uid,\n \t\t     growth);\n \t  want_inline = false;\n \t}\n@@ -434,8 +434,8 @@ want_early_inline_function_p (struct cgraph_edge *e)\n \t  if (dump_file)\n \t    fprintf (dump_file, \"  will not early inline: %s/%i->%s/%i, \"\n \t\t     \"callee is not leaf and code would grow by %i\\n\",\n-\t\t     cgraph_node_name (e->caller), e->caller->uid,\n-\t\t     cgraph_node_name (callee), callee->uid,\n+\t\t     xstrdup (cgraph_node_name (e->caller)), e->caller->uid,\n+\t\t     xstrdup (cgraph_node_name (callee)), callee->uid,\n \t\t     growth);\n \t  want_inline = false;\n \t}\n@@ -444,8 +444,8 @@ want_early_inline_function_p (struct cgraph_edge *e)\n \t  if (dump_file)\n \t    fprintf (dump_file, \"  will not early inline: %s/%i->%s/%i, \"\n \t\t     \"growth %i exceeds --param early-inlining-insns\\n\",\n-\t\t     cgraph_node_name (e->caller), e->caller->uid,\n-\t\t     cgraph_node_name (callee), callee->uid,\n+\t\t     xstrdup (cgraph_node_name (e->caller)), e->caller->uid,\n+\t\t     xstrdup (cgraph_node_name (callee)), callee->uid,\n \t\t     growth);\n \t  want_inline = false;\n \t}\n@@ -754,8 +754,8 @@ edge_badness (struct cgraph_edge *edge, bool dump)\n   if (dump)\n     {\n       fprintf (dump_file, \"    Badness calculation for %s -> %s\\n\",\n-\t       cgraph_node_name (edge->caller),\n-\t       cgraph_node_name (callee));\n+\t       xstrdup (cgraph_node_name (edge->caller)),\n+\t       xstrdup (cgraph_node_name (callee)));\n       fprintf (dump_file, \"      size growth %i, time growth %i\\n\",\n \t       growth,\n \t       time_growth);\n@@ -910,8 +910,10 @@ update_edge_key (fibheap_t heap, struct cgraph_edge *edge)\n \t    {\n \t      fprintf (dump_file,\n \t\t       \"  decreasing badness %s/%i -> %s/%i, %i to %i\\n\",\n-\t\t       cgraph_node_name (edge->caller), edge->caller->uid,\n-\t\t       cgraph_node_name (edge->callee), edge->callee->uid,\n+\t\t       xstrdup (cgraph_node_name (edge->caller)),\n+\t\t       edge->caller->uid,\n+\t\t       xstrdup (cgraph_node_name (edge->callee)),\n+\t\t       edge->callee->uid,\n \t\t       (int)n->key,\n \t\t       badness);\n \t    }\n@@ -925,8 +927,10 @@ update_edge_key (fibheap_t heap, struct cgraph_edge *edge)\n \t {\n \t   fprintf (dump_file,\n \t\t    \"  enqueuing call %s/%i -> %s/%i, badness %i\\n\",\n-\t\t    cgraph_node_name (edge->caller), edge->caller->uid,\n-\t\t    cgraph_node_name (edge->callee), edge->callee->uid,\n+\t\t    xstrdup (cgraph_node_name (edge->caller)),\n+\t\t    edge->caller->uid,\n+\t\t    xstrdup (cgraph_node_name (edge->callee)),\n+\t\t    edge->callee->uid,\n \t\t    badness);\n \t }\n       edge->aux = fibheap_insert (heap, badness, edge);\n@@ -1610,8 +1614,8 @@ flatten_function (struct cgraph_node *node, bool early)\n \t  if (dump_file)\n \t    fprintf (dump_file,\n \t\t     \"Not inlining %s into %s to avoid cycle.\\n\",\n-\t\t     cgraph_node_name (callee),\n-\t\t     cgraph_node_name (e->caller));\n+\t\t     xstrdup (cgraph_node_name (callee)),\n+\t\t     xstrdup (cgraph_node_name (e->caller)));\n \t  e->inline_failed = CIF_RECURSIVE_INLINING;\n \t  continue;\n \t}\n@@ -1651,8 +1655,8 @@ flatten_function (struct cgraph_node *node, bool early)\n          recursing through the original node if the node was cloned.  */\n       if (dump_file)\n \tfprintf (dump_file, \" Inlining %s into %s.\\n\",\n-\t\t cgraph_node_name (callee),\n-\t\t cgraph_node_name (e->caller));\n+\t\t xstrdup (cgraph_node_name (callee)),\n+\t\t xstrdup (cgraph_node_name (e->caller)));\n       orig_callee = callee;\n       inline_call (e, true, NULL, NULL);\n       if (e->callee != orig_callee)\n@@ -1754,7 +1758,8 @@ ipa_inline (void)\n \t\t    {\n \t\t      fprintf (dump_file,\n \t\t\t       \"\\nInlining %s size %i.\\n\",\n-\t\t\t       cgraph_node_name (node), inline_summary (node)->size);\n+\t\t\t       cgraph_node_name (node),\n+\t\t\t       inline_summary (node)->size);\n \t\t      fprintf (dump_file,\n \t\t\t       \" Called once from %s %i insns.\\n\",\n \t\t\t       cgraph_node_name (node->callers->caller),\n@@ -1817,8 +1822,8 @@ inline_always_inline_functions (struct cgraph_node *node)\n \n       if (dump_file)\n \tfprintf (dump_file, \"  Inlining %s into %s (always_inline).\\n\",\n-\t\t cgraph_node_name (e->callee),\n-\t\t cgraph_node_name (e->caller));\n+\t\t xstrdup (cgraph_node_name (e->callee)),\n+\t\t xstrdup (cgraph_node_name (e->caller)));\n       inline_call (e, true, NULL, NULL);\n       inlined = true;\n     }\n@@ -1867,8 +1872,8 @@ early_inline_small_functions (struct cgraph_node *node)\n \n       if (dump_file)\n \tfprintf (dump_file, \" Inlining %s into %s.\\n\",\n-\t\t cgraph_node_name (callee),\n-\t\t cgraph_node_name (e->caller));\n+\t\t xstrdup (cgraph_node_name (callee)),\n+\t\t xstrdup (cgraph_node_name (e->caller)));\n       inline_call (e, true, NULL, NULL);\n       inlined = true;\n     }"}, {"sha": "02d6c3162766d4b1d867bdb26315d21ea3bd4c57", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036c01022a1cfabeaf885a6485b6f25da329ee98/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036c01022a1cfabeaf885a6485b6f25da329ee98/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=036c01022a1cfabeaf885a6485b6f25da329ee98", "patch": "@@ -230,8 +230,8 @@ ipa_print_node_jump_functions (FILE *f, struct cgraph_node *node)\n \tcontinue;\n \n       fprintf (f, \"    callsite  %s/%i -> %s/%i : \\n\",\n-\t       cgraph_node_name (node), node->uid,\n-\t       cgraph_node_name (cs->callee), cs->callee->uid);\n+\t       xstrdup (cgraph_node_name (node)), node->uid,\n+\t       xstrdup (cgraph_node_name (cs->callee)), cs->callee->uid);\n       ipa_print_node_jump_functions_for_edge (f, cs);\n     }\n \n@@ -1780,8 +1780,8 @@ ipa_make_edge_direct_to_target (struct cgraph_edge *ie, tree target)\n       fprintf (dump_file, \"ipa-prop: Discovered %s call to a known target \"\n \t       \"(%s/%i -> %s/%i), for stmt \",\n \t       ie->indirect_info->polymorphic ? \"a virtual\" : \"an indirect\",\n-\t       cgraph_node_name (ie->caller), ie->caller->uid,\n-\t       cgraph_node_name (ie->callee), ie->callee->uid);\n+\t       xstrdup (cgraph_node_name (ie->caller)), ie->caller->uid,\n+\t       xstrdup (cgraph_node_name (ie->callee)), ie->callee->uid);\n       if (ie->call_stmt)\n \tprint_gimple_stmt (dump_file, ie->call_stmt, 2, TDF_SLIM);\n       else"}, {"sha": "a371c0a7f111d02848bfe033857c57df1246dbac", "filename": "gcc/lto-symtab.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036c01022a1cfabeaf885a6485b6f25da329ee98/gcc%2Flto-symtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036c01022a1cfabeaf885a6485b6f25da329ee98/gcc%2Flto-symtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-symtab.c?ref=036c01022a1cfabeaf885a6485b6f25da329ee98", "patch": "@@ -215,8 +215,8 @@ lto_cgraph_replace_node (struct cgraph_node *node,\n     {\n       fprintf (cgraph_dump_file, \"Replacing cgraph node %s/%i by %s/%i\"\n  \t       \" for symbol %s\\n\",\n-\t       cgraph_node_name (node), node->uid,\n-\t       cgraph_node_name (prevailing_node),\n+\t       xstrdup (cgraph_node_name (node)), node->uid,\n+\t       xstrdup (cgraph_node_name (prevailing_node)),\n \t       prevailing_node->uid,\n \t       IDENTIFIER_POINTER ((*targetm.asm_out.mangle_assembler_name)\n \t\t (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (node->symbol.decl)))));"}, {"sha": "110990a211a5351aac1df8d0d843d2def7f58ad4", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036c01022a1cfabeaf885a6485b6f25da329ee98/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036c01022a1cfabeaf885a6485b6f25da329ee98/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=036c01022a1cfabeaf885a6485b6f25da329ee98", "patch": "@@ -4612,8 +4612,8 @@ convert_callers_for_node (struct cgraph_node *node,\n       if (dump_file)\n \tfprintf (dump_file, \"Adjusting call (%i -> %i) %s -> %s\\n\",\n \t\t cs->caller->uid, cs->callee->uid,\n-\t\t cgraph_node_name (cs->caller),\n-\t\t cgraph_node_name (cs->callee));\n+\t\t xstrdup (cgraph_node_name (cs->caller)),\n+\t\t xstrdup (cgraph_node_name (cs->callee)));\n \n       ipa_modify_call_arguments (cs, cs->call_stmt, adjustments);\n "}]}