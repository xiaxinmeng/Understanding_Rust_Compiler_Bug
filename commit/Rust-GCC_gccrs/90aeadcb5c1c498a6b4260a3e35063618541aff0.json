{"sha": "90aeadcb5c1c498a6b4260a3e35063618541aff0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBhZWFkY2I1YzFjNDk4YTZiNDI2MGEzZTM1MDYzNjE4NTQxYWZmMA==", "commit": {"author": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2005-04-27T15:37:53Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2005-04-27T15:37:53Z"}, "message": "re PR fortran/21177 (wrong code with NULL())\n\n\tPR fortran/21177\n\n\t* interface.c (compare_parameter): Ignore type for EXPR_NULL\n\tonly if type is BT_UNKNOWN.\n\n\t* gfortran.dg/pr21177.f90: New test\n\nFrom-SVN: r98837", "tree": {"sha": "994299707c399c2909c8c7b1436fe3b387996d36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/994299707c399c2909c8c7b1436fe3b387996d36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90aeadcb5c1c498a6b4260a3e35063618541aff0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90aeadcb5c1c498a6b4260a3e35063618541aff0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90aeadcb5c1c498a6b4260a3e35063618541aff0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90aeadcb5c1c498a6b4260a3e35063618541aff0/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9f8dfba4222e65611c4e9ff15ee392a40e5117a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9f8dfba4222e65611c4e9ff15ee392a40e5117a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9f8dfba4222e65611c4e9ff15ee392a40e5117a"}], "stats": {"total": 84, "additions": 74, "deletions": 10}, "files": [{"sha": "822dcd0da30ea9babe46205aba8093469b5bb243", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90aeadcb5c1c498a6b4260a3e35063618541aff0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90aeadcb5c1c498a6b4260a3e35063618541aff0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=90aeadcb5c1c498a6b4260a3e35063618541aff0", "patch": "@@ -1,3 +1,9 @@\n+2005-04-27  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR fortran/21177\n+\t* interface.c (compare_parameter): Ignore type for EXPR_NULL\n+\tonly if type is BT_UNKNOWN.\n+\n 2005-04-25  Paul Brook  <paul@codesourcery.com>\n \tSteven G. Kargl  <kargls@comcast.net>\n "}, {"sha": "5b848bc0a20e828f0cb5f6d8c2672e370c0263ea", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90aeadcb5c1c498a6b4260a3e35063618541aff0/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90aeadcb5c1c498a6b4260a3e35063618541aff0/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=90aeadcb5c1c498a6b4260a3e35063618541aff0", "patch": "@@ -1096,7 +1096,7 @@ compare_parameter (gfc_symbol * formal, gfc_expr * actual,\n       return compare_interfaces (formal, actual->symtree->n.sym, 0);\n     }\n \n-  if (actual->expr_type != EXPR_NULL\n+  if ((actual->expr_type != EXPR_NULL || actual->ts.type != BT_UNKNOWN)\n       && !gfc_compare_types (&formal->ts, &actual->ts))\n     return 0;\n "}, {"sha": "e76ab25b2a692cd4d44650cb4951491924b98380", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90aeadcb5c1c498a6b4260a3e35063618541aff0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90aeadcb5c1c498a6b4260a3e35063618541aff0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=90aeadcb5c1c498a6b4260a3e35063618541aff0", "patch": "@@ -1,19 +1,24 @@\n+2005-04-27  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR fortran/21177\n+\t* gfortran.dg/pr21177.f90: New test.\n+\n 2005-04-27  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \tPR tree-optimization/21171\n \t* gcc.dg/tree-ssa/pr21171.c: New test.\n \n 2004-04-27  Paolo Bonzini  <bonzini@gnu.org>\n \n-        * gcc.dg/tree-ssa/gen-vect-11.c, gcc.dg/tree-ssa/gen-vect-11a.c,\n-        gcc.dg/tree-ssa/gen-vect-11b.c, gcc.dg/tree-ssa/gen-vect-11c.c,\n-        gcc.dg/tree-ssa/gen-vect-2.c, gcc.dg/tree-ssa/gen-vect-25.c,\n-        gcc.dg/tree-ssa/gen-vect-26.c, gcc.dg/tree-ssa/gen-vect-28.c,\n-        gcc.dg/tree-ssa/gen-vect-32.c: New.\n-        * gcc.dg/vect/vect-82.c, gcc.dg/vect/vect-83.c: Fix dg-final.\n-        * gcc.dg/vect/vect-82_64.c, gcc.dg/vect/vect-83_64.c: Remove xfail,\n-        don't run on PPC32.\n-        \n+\t* gcc.dg/tree-ssa/gen-vect-11.c, gcc.dg/tree-ssa/gen-vect-11a.c,\n+\tgcc.dg/tree-ssa/gen-vect-11b.c, gcc.dg/tree-ssa/gen-vect-11c.c,\n+\tgcc.dg/tree-ssa/gen-vect-2.c, gcc.dg/tree-ssa/gen-vect-25.c,\n+\tgcc.dg/tree-ssa/gen-vect-26.c, gcc.dg/tree-ssa/gen-vect-28.c,\n+\tgcc.dg/tree-ssa/gen-vect-32.c: New.\n+\t* gcc.dg/vect/vect-82.c, gcc.dg/vect/vect-83.c: Fix dg-final.\n+\t* gcc.dg/vect/vect-82_64.c, gcc.dg/vect/vect-83_64.c: Remove xfail,\n+\tdon't run on PPC32.\n+\n 2005-04-27  Joseph S. Myers  <joseph@codesourcery.com>\n \n \tPR c/21213"}, {"sha": "8ce0180dfc171831463e09b8a551ab2788aa8411", "filename": "gcc/testsuite/gfortran.dg/pr21177.f90", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90aeadcb5c1c498a6b4260a3e35063618541aff0/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr21177.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90aeadcb5c1c498a6b4260a3e35063618541aff0/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr21177.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr21177.f90?ref=90aeadcb5c1c498a6b4260a3e35063618541aff0", "patch": "@@ -0,0 +1,53 @@\n+! { dg-do run }\n+! PR fortran/21177\n+module mymod\n+  interface tt\n+    module procedure tt_i, tt_r, tt_l, tt_c4, tt_c8\n+  end interface tt\n+contains\n+  function tt_l(x) result(y)\n+    integer :: y\n+    logical, pointer :: x\n+    y = 0\n+  end function\n+  function tt_i(x) result(y)\n+    integer :: y\n+    integer, pointer :: x\n+    y = 1\n+  end function\n+  function tt_r(x) result(y)\n+    integer :: y\n+    real, pointer :: x\n+    y = 2\n+  end function\n+  function tt_c4(x) result(y)\n+    integer :: y\n+    complex(4), pointer :: x\n+    y = 3\n+  end function\n+  function tt_c8(x) result(y)\n+    integer :: y\n+    complex(8), pointer :: x\n+    y = 4\n+  end function\n+end module mymod\n+\n+program test\n+  use mymod\n+  logical, pointer :: l\n+  integer, pointer :: i\n+  real, pointer :: r\n+  complex(4), pointer :: c4\n+  complex(8), pointer :: c8\n+  \n+  if (tt(l) /= 0) call abort()\n+  if (tt(i) /= 1) call abort()\n+  if (tt(r) /= 2) call abort()\n+  if (tt(c4) /= 3) call abort()\n+  if (tt(c8) /= 4) call abort()\n+  if (tt(null(l)) /= 0) call abort()\n+  if (tt(null(i)) /= 1) call abort()\n+  if (tt(null(r)) /= 2) call abort()\n+  if (tt(null(c4)) /= 3) call abort()\n+  if (tt(null(c8)) /= 4) call abort()\n+end program test"}]}