{"sha": "c21d2b6661c82a455be551d55e4e17005b480ad3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIxZDJiNjY2MWM4MmE0NTViZTU1MWQ1NWU0ZTE3MDA1YjQ4MGFkMw==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2020-05-13T21:09:17Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2020-05-13T21:09:17Z"}, "message": "rs6000: Add vec_extracth and vec_extractl\n\nAdd new insns vextdu[bhw]vlx, vextddvlx, vextdu[bhw]vhx, and\nvextddvhx, along with built-in access and overloaded built-in\naccess to these insns.\n\n[gcc]\n\n2020-05-13  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* config/rs6000/altivec.h (vec_extractl): New #define.\n\t(vec_extracth): Likewise.\n\t* config/rs6000/altivec.md (UNSPEC_EXTRACTL): New constant.\n\t(UNSPEC_EXTRACTR): Likewise.\n\t(vextractl<mode>): New expansion.\n\t(vextractl<mode>_internal): New insn.\n\t(vextractr<mode>): New expansion.\n\t(vextractr<mode>_internal): New insn.\n\t* config/rs6000/rs6000-builtin.def (__builtin_altivec_vextdubvlx):\n\tNew built-in function.\n\t(__builtin_altivec_vextduhvlx): Likewise.\n\t(__builtin_altivec_vextduwvlx): Likewise.\n\t(__builtin_altivec_vextddvlx): Likewise.\n\t(__builtin_altivec_vextdubvhx): Likewise.\n\t(__builtin_altivec_vextduhvhx): Likewise.\n\t(__builtin_altivec_vextduwvhx): Likewise.\n\t(__builtin_altivec_vextddvhx): Likewise.\n\t(__builtin_vec_extractl): New overloaded built-in function.\n\t(__builtin_vec_extracth): Likewise.\n\t* config/rs6000/rs6000-call.c (altivec_overloaded_builtins):\n\tDefine overloaded forms of __builtin_vec_extractl and\n\t__builtin_vec_extracth.\n\t(builtin_function_type): Add cases to mark arguments of new\n\tbuilt-in functions as unsigned.\n\t(rs6000_common_init_builtins): Add\n\topaque_ftype_opaque_opaque_opaque_opaque.\n\t* config/rs6000/rs6000.md (du_or_d): New mode attribute.\n\t* doc/extend.texi (PowerPC AltiVec Built-in Functions Available\n\tfor a Future Architecture): Add description of vec_extractl and\n\tvec_extractr built-in functions.\n\n[gcc/testsuite]\n\n2020-05-13  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* gcc.target/powerpc/vec-extracth-0.c: New.\n\t* gcc.target/powerpc/vec-extracth-1.c: New.\n\t* gcc.target/powerpc/vec-extracth-2.c: New.\n\t* gcc.target/powerpc/vec-extracth-3.c: New.\n\t* gcc.target/powerpc/vec-extracth-4.c: New.\n\t* gcc.target/powerpc/vec-extracth-5.c: New.\n\t* gcc.target/powerpc/vec-extracth-6.c: New.\n\t* gcc.target/powerpc/vec-extracth-7.c: New.\n\t* gcc.target/powerpc/vec-extracth-be-0.c: New.\n\t* gcc.target/powerpc/vec-extracth-be-1.c: New.\n\t* gcc.target/powerpc/vec-extracth-be-2.c: New.\n\t* gcc.target/powerpc/vec-extracth-be-3.c: New.\n\t* gcc.target/powerpc/vec-extractl-0.c: New.\n\t* gcc.target/powerpc/vec-extractl-1.c: New.\n\t* gcc.target/powerpc/vec-extractl-2.c: New.\n\t* gcc.target/powerpc/vec-extractl-3.c: New.\n\t* gcc.target/powerpc/vec-extractl-4.c: New.\n\t* gcc.target/powerpc/vec-extractl-5.c: New.\n\t* gcc.target/powerpc/vec-extractl-6.c: New.\n\t* gcc.target/powerpc/vec-extractl-7.c: New.\n\t* gcc.target/powerpc/vec-extractl-be-0.c: New.\n\t* gcc.target/powerpc/vec-extractl-be-1.c: New.\n\t* gcc.target/powerpc/vec-extractl-be-2.c: New.\n\t* gcc.target/powerpc/vec-extractl-be-3.c: New.", "tree": {"sha": "be7e0fdb6fcd498b979b5959df7d40f86a560296", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be7e0fdb6fcd498b979b5959df7d40f86a560296"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c21d2b6661c82a455be551d55e4e17005b480ad3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c21d2b6661c82a455be551d55e4e17005b480ad3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c21d2b6661c82a455be551d55e4e17005b480ad3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c21d2b6661c82a455be551d55e4e17005b480ad3/comments", "author": null, "committer": null, "parents": [{"sha": "4924293a62ee797310dd448e545118afd5aebb3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4924293a62ee797310dd448e545118afd5aebb3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4924293a62ee797310dd448e545118afd5aebb3f"}], "stats": {"total": 981, "additions": 979, "deletions": 2}, "files": [{"sha": "c1ee99eb0dfc93224b74dabd78f35e3c086a337d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -1,3 +1,36 @@\n+2020-05-13  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* config/rs6000/altivec.h (vec_extractl): New #define.\n+\t(vec_extracth): Likewise.\n+\t* config/rs6000/altivec.md (UNSPEC_EXTRACTL): New constant.\n+\t(UNSPEC_EXTRACTR): Likewise.\n+\t(vextractl<mode>): New expansion.\n+\t(vextractl<mode>_internal): New insn.\n+\t(vextractr<mode>): New expansion.\n+\t(vextractr<mode>_internal): New insn.\n+\t* config/rs6000/rs6000-builtin.def (__builtin_altivec_vextdubvlx):\n+\tNew built-in function.\n+\t(__builtin_altivec_vextduhvlx): Likewise.\n+\t(__builtin_altivec_vextduwvlx): Likewise.\n+\t(__builtin_altivec_vextddvlx): Likewise.\n+\t(__builtin_altivec_vextdubvhx): Likewise.\n+\t(__builtin_altivec_vextduhvhx): Likewise.\n+\t(__builtin_altivec_vextduwvhx): Likewise.\n+\t(__builtin_altivec_vextddvhx): Likewise.\n+\t(__builtin_vec_extractl): New overloaded built-in function.\n+\t(__builtin_vec_extracth): Likewise.\n+\t* config/rs6000/rs6000-call.c (altivec_overloaded_builtins):\n+\tDefine overloaded forms of __builtin_vec_extractl and\n+\t__builtin_vec_extracth.\n+\t(builtin_function_type): Add cases to mark arguments of new\n+\tbuilt-in functions as unsigned.\n+\t(rs6000_common_init_builtins): Add\n+\topaque_ftype_opaque_opaque_opaque_opaque.\n+\t* config/rs6000/rs6000.md (du_or_d): New mode attribute.\n+\t* doc/extend.texi (PowerPC AltiVec Built-in Functions Available\n+\tfor a Future Architecture): Add description of vec_extractl and\n+\tvec_extractr built-in functions.\n+\n 2020-05-13  Richard Biener  <rguenther@suse.de>\n \n \t* target.def (add_stmt_cost): Add new vectype parameter."}, {"sha": "0a7e8ab36477365ecab2e314d57da87f35c37b59", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -697,6 +697,9 @@ __altivec_scalar_pred(vec_any_nle,\n #define vec_genpcvm(a, b)\t__builtin_vec_xxgenpcvm (a, b)\n \n /* Overloaded built-in functions for future architecture.  */\n+#define vec_extractl(a, b, c)\t__builtin_vec_extractl (a, b, c)\n+#define vec_extracth(a, b, c)\t__builtin_vec_extracth (a, b, c)\n+\n #define vec_gnb(a, b)\t__builtin_vec_gnb (a, b)\n #define vec_clrl(a, b)\t__builtin_vec_clrl (a, b)\n #define vec_clrr(a, b)\t__builtin_vec_clrr (a, b)"}, {"sha": "792ca4f488e31ee3a2be93c690312ddd32091ab4", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -171,6 +171,8 @@\n    UNSPEC_XXEVAL\n    UNSPEC_VSTRIR\n    UNSPEC_VSTRIL\n+   UNSPEC_EXTRACTL\n+   UNSPEC_EXTRACTR\n ])\n \n (define_c_enum \"unspecv\"\n@@ -783,6 +785,66 @@\n   DONE;\n })\n \n+(define_expand \"vextractl<mode>\"\n+  [(set (match_operand:V2DI 0 \"altivec_register_operand\")\n+\t(unspec:V2DI [(match_operand:VI2 1 \"altivec_register_operand\")\n+\t\t      (match_operand:VI2 2 \"altivec_register_operand\")\n+\t\t      (match_operand:SI 3 \"register_operand\")]\n+\t\t     UNSPEC_EXTRACTL))]\n+  \"TARGET_FUTURE\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    {\n+      emit_insn (gen_vextractl<mode>_internal (operands[0], operands[1],\n+\t\t\t\t\t       operands[2], operands[3]));\n+      emit_insn (gen_xxswapd_v2di (operands[0], operands[0]));\n+    }\n+  else\n+    emit_insn (gen_vextractr<mode>_internal (operands[0], operands[2],\n+\t\t\t\t\t     operands[1], operands[3]));\n+  DONE;\n+})\n+\n+(define_insn \"vextractl<mode>_internal\"\n+  [(set (match_operand:V2DI 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:V2DI [(match_operand:VEC_I 1 \"altivec_register_operand\" \"v\")\n+\t\t      (match_operand:VEC_I 2 \"altivec_register_operand\" \"v\")\n+\t\t      (match_operand:SI 3 \"register_operand\" \"r\")]\n+\t\t     UNSPEC_EXTRACTL))]\n+  \"TARGET_FUTURE\"\n+  \"vext<du_or_d><wd>vlx %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_expand \"vextractr<mode>\"\n+  [(set (match_operand:V2DI 0 \"altivec_register_operand\")\n+\t(unspec:V2DI [(match_operand:VI2 1 \"altivec_register_operand\")\n+\t\t      (match_operand:VI2 2 \"altivec_register_operand\")\n+\t\t      (match_operand:SI 3 \"register_operand\")]\n+\t\t     UNSPEC_EXTRACTR))]\n+  \"TARGET_FUTURE\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    {\n+      emit_insn (gen_vextractr<mode>_internal (operands[0], operands[1],\n+\t\t\t\t\t       operands[2], operands[3]));\n+      emit_insn (gen_xxswapd_v2di (operands[0], operands[0]));\n+    }\n+  else\n+    emit_insn (gen_vextractl<mode>_internal (operands[0], operands[2],\n+    \t\t\t\t\t     operands[1], operands[3]));\n+  DONE;\n+})\n+\n+(define_insn \"vextractr<mode>_internal\"\n+  [(set (match_operand:V2DI 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:V2DI [(match_operand:VEC_I 1 \"altivec_register_operand\" \"v\")\n+\t\t      (match_operand:VEC_I 2 \"altivec_register_operand\" \"v\")\n+\t\t      (match_operand:SI 3 \"register_operand\" \"r\")]\n+\t\t     UNSPEC_EXTRACTR))]\n+  \"TARGET_FUTURE\"\n+  \"vext<du_or_d><wd>vrx %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n (define_expand \"vstrir_<mode>\"\n   [(set (match_operand:VIshort 0 \"altivec_register_operand\")\n \t(unspec:VIshort [(match_operand:VIshort 1 \"altivec_register_operand\")]"}, {"sha": "e58edec47da39a79e5f0a7d3db30c1acfe90fd8b", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -2616,6 +2616,16 @@ BU_FUTURE_V_2 (XXGENPCVM_V8HI, \"xxgenpcvm_v8hi\", CONST, xxgenpcvm_v8hi)\n BU_FUTURE_V_2 (XXGENPCVM_V4SI, \"xxgenpcvm_v4si\", CONST, xxgenpcvm_v4si)\n BU_FUTURE_V_2 (XXGENPCVM_V2DI, \"xxgenpcvm_v2di\", CONST, xxgenpcvm_v2di)\n \n+BU_FUTURE_V_3 (VEXTRACTBL, \"vextdubvlx\", CONST, vextractlv16qi)\n+BU_FUTURE_V_3 (VEXTRACTHL, \"vextduhvlx\", CONST, vextractlv8hi)\n+BU_FUTURE_V_3 (VEXTRACTWL, \"vextduwvlx\", CONST, vextractlv4si)\n+BU_FUTURE_V_3 (VEXTRACTDL, \"vextddvlx\", CONST, vextractlv2di)\n+\n+BU_FUTURE_V_3 (VEXTRACTBR, \"vextdubvhx\", CONST, vextractrv16qi)\n+BU_FUTURE_V_3 (VEXTRACTHR, \"vextduhvhx\", CONST, vextractrv8hi)\n+BU_FUTURE_V_3 (VEXTRACTWR, \"vextduwvhx\", CONST, vextractrv4si)\n+BU_FUTURE_V_3 (VEXTRACTDR, \"vextddvhx\", CONST, vextractrv2di)\n+\n BU_FUTURE_V_1 (VSTRIBR, \"vstribr\", CONST, vstrir_v16qi)\n BU_FUTURE_V_1 (VSTRIHR, \"vstrihr\", CONST, vstrir_v8hi)\n BU_FUTURE_V_1 (VSTRIBL, \"vstribl\", CONST, vstril_v16qi)\n@@ -2633,6 +2643,9 @@ BU_FUTURE_OVERLOAD_2 (GNB, \"gnb\")\n BU_FUTURE_OVERLOAD_4 (XXEVAL, \"xxeval\")\n BU_FUTURE_OVERLOAD_2 (XXGENPCVM, \"xxgenpcvm\")\n \n+BU_FUTURE_OVERLOAD_3 (EXTRACTL, \"extractl\")\n+BU_FUTURE_OVERLOAD_3 (EXTRACTH, \"extracth\")\n+\n BU_FUTURE_OVERLOAD_1 (VSTRIR, \"strir\")\n BU_FUTURE_OVERLOAD_1 (VSTRIL, \"stril\")\n "}, {"sha": "0ac8054d03092630546cd1c185dfddd1670c58bc", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -5552,6 +5552,32 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V1TI, RS6000_BTI_unsigned_V1TI,\n     RS6000_BTI_unsigned_V1TI, RS6000_BTI_unsigned_V1TI },\n \n+  { FUTURE_BUILTIN_VEC_EXTRACTL, FUTURE_BUILTIN_VEXTRACTBL,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_UINTQI },\n+  { FUTURE_BUILTIN_VEC_EXTRACTL, FUTURE_BUILTIN_VEXTRACTHL,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V8HI,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_UINTQI },\n+  { FUTURE_BUILTIN_VEC_EXTRACTL, FUTURE_BUILTIN_VEXTRACTWL,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V4SI,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_UINTQI },\n+  { FUTURE_BUILTIN_VEC_EXTRACTL, FUTURE_BUILTIN_VEXTRACTDL,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_UINTQI },\n+\n+  { FUTURE_BUILTIN_VEC_EXTRACTH, FUTURE_BUILTIN_VEXTRACTBR,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_UINTQI },\n+  { FUTURE_BUILTIN_VEC_EXTRACTH, FUTURE_BUILTIN_VEXTRACTHR,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V8HI,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_UINTQI },\n+  { FUTURE_BUILTIN_VEC_EXTRACTH, FUTURE_BUILTIN_VEXTRACTWR,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V4SI,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_UINTQI },\n+  { FUTURE_BUILTIN_VEC_EXTRACTH, FUTURE_BUILTIN_VEXTRACTDR,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_UINTQI },\n+\n   { FUTURE_BUILTIN_VEC_VSTRIL, FUTURE_BUILTIN_VSTRIBL,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0, 0 },\n   { FUTURE_BUILTIN_VEC_VSTRIL, FUTURE_BUILTIN_VSTRIBL,\n@@ -13255,6 +13281,14 @@ builtin_function_type (machine_mode mode_ret, machine_mode mode_arg0,\n     case CRYPTO_BUILTIN_VSHASIGMAW:\n     case CRYPTO_BUILTIN_VSHASIGMAD:\n     case CRYPTO_BUILTIN_VSHASIGMA:\n+    case FUTURE_BUILTIN_VEXTRACTBL:\n+    case FUTURE_BUILTIN_VEXTRACTHL:\n+    case FUTURE_BUILTIN_VEXTRACTWL:\n+    case FUTURE_BUILTIN_VEXTRACTDL:\n+    case FUTURE_BUILTIN_VEXTRACTBR:\n+    case FUTURE_BUILTIN_VEXTRACTHR:\n+    case FUTURE_BUILTIN_VEXTRACTWR:\n+    case FUTURE_BUILTIN_VEXTRACTDR:\n       h.uns_p[0] = 1;\n       h.uns_p[1] = 1;\n       h.uns_p[2] = 1;\n@@ -13393,6 +13427,7 @@ rs6000_common_init_builtins (void)\n   tree opaque_ftype_opaque = NULL_TREE;\n   tree opaque_ftype_opaque_opaque = NULL_TREE;\n   tree opaque_ftype_opaque_opaque_opaque = NULL_TREE;\n+  tree opaque_ftype_opaque_opaque_opaque_opaque = NULL_TREE;\n   HOST_WIDE_INT builtin_mask = rs6000_builtin_mask;\n \n   /* Create Altivec and VSX builtins on machines with at least the\n@@ -13418,9 +13453,9 @@ rs6000_common_init_builtins (void)\n \n       if (rs6000_overloaded_builtin_p (d->code))\n \t{\n-\t  type = opaque_ftype_opaque_opaque_opaque;\n+\t  type = opaque_ftype_opaque_opaque_opaque_opaque;\n \t  if (!type)\n-\t    type = opaque_ftype_opaque_opaque_opaque\n+\t    type = opaque_ftype_opaque_opaque_opaque_opaque\n \t      = build_function_type_list (opaque_V4SI_type_node,\n \t\t\t\t\t  opaque_V4SI_type_node,\n \t\t\t\t\t  opaque_V4SI_type_node,"}, {"sha": "0aa5265d199a90e39c8a85c7826bab114dd2698b", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -653,6 +653,16 @@\n \t\t      (V1TI  \"q\")\n \t\t      (TI    \"q\")])\n \n+; For double extract from different origin types\n+(define_mode_attr du_or_d [(QI    \"du\")\n+\t\t\t   (HI    \"du\")\n+\t\t\t   (SI    \"du\")\n+\t\t\t   (DI    \"d\")\n+\t\t\t   (V16QI \"du\")\n+\t\t\t   (V8HI  \"du\")\n+\t\t\t   (V4SI  \"du\")\n+\t\t\t   (V2DI  \"d\")])\n+\n ;; How many bits in this mode?\n (define_mode_attr bits [(QI \"8\") (HI \"16\") (SI \"32\") (DI \"64\")\n \t\t\t\t\t   (SF \"32\") (DF \"64\")])"}, {"sha": "c80848e9061104463424b9e36d9d525d98591532", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -20899,6 +20899,62 @@ Perform a 128-bit vector gather  operation, as if implemented by the Future\n integer value between 2 and 7 inclusive.\n @findex vec_gnb\n \n+@smallexample\n+@exdent vector unsigned long long int\n+@exdent vec_extractl (vector unsigned char, vector unsigned char, unsigned int)\n+@exdent vector unsigned long long int\n+@exdent vec_extractl (vector unsigned short, vector unsigned short, unsigned int)\n+@exdent vector unsigned long long int\n+@exdent vec_extractl (vector unsigned int, vector unsigned int, unsigned int)\n+@exdent vector unsigned long long int\n+@exdent vec_extractl (vector unsigned long long, vector unsigned long long, unsigned int)\n+@end smallexample\n+Extract a single element from the vector formed by catenating this function's\n+first two arguments at the byte offset specified by this function's\n+third argument.  On big-endian targets, this function behaves as if\n+implemented by the Future @code{vextdubvlx}, @code{vextduhvlx},\n+@code{vextduwvlx}, or @code{vextddvlx} instructions, depending on the\n+types of the function's first two arguments.  On little-endian\n+targets, this function behaves as if implemented by the Future\n+@code{vextdubvrx}, @code{vextduhvrx},\n+@code{vextduwvrx}, or @code{vextddvrx} instructions.\n+The byte offset of the element to be extracted is calculated\n+by computing the remainder of dividing the third argument by 32.\n+If this reminader value is not a multiple of the vector element size,\n+or if its value added to the vector element size exceeds 32, the\n+result is undefined.\n+@findex vec_extractl\n+\n+@smallexample\n+@exdent vector unsigned long long int\n+@exdent vec_extractr (vector unsigned char, vector unsigned char, unsigned int)\n+@exdent vector unsigned long long int\n+@exdent vec_extractr (vector unsigned short, vector unsigned short, unsigned int)\n+@exdent vector unsigned long long int\n+@exdent vec_extractr (vector unsigned int, vector unsigned int, unsigned int)\n+@exdent vector unsigned long long int\n+@exdent vec_extractr (vector unsigned long long, vector unsigned long long, unsigned int)\n+@end smallexample\n+Extract a single element from the vector formed by catenating this function's\n+first two arguments at the byte offset calculated by subtracting this\n+function's third argument from 31.  On big-endian targets, this\n+function behaves as if\n+implemented by the Future\n+@code{vextdubvrx}, @code{vextduhvrx},\n+@code{vextduwvrx}, or @code{vextddvrx} instructions, depending on the\n+types of the function's first two arguments.\n+On little-endian\n+targets, this function behaves as if implemented by the Future\n+@code{vextdubvlx}, @code{vextduhvlx},\n+@code{vextduwvlx}, or @code{vextddvlx} instructions.\n+The byte offset of the element to be extracted, measured from the\n+right end of the catenation of the two vector arguments, is calculated\n+by computing the remainder of dividing the third argument by 32.\n+If this reminader value is not a multiple of the vector element size,\n+or if its value added to the vector element size exceeds 32, the\n+result is undefined.\n+@findex vec_extractr\n+\n @smallexample\n @exdent vector unsigned long long int\n @exdent vec_pdep (vector unsigned long long int, vector unsigned long long int)"}, {"sha": "916bc2d40c8512d6dfbb540b6ad90b80b199e396", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -1,3 +1,30 @@\n+2020-05-13  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/vec-extracth-0.c: New.\n+\t* gcc.target/powerpc/vec-extracth-1.c: New.\n+\t* gcc.target/powerpc/vec-extracth-2.c: New.\n+\t* gcc.target/powerpc/vec-extracth-3.c: New.\n+\t* gcc.target/powerpc/vec-extracth-4.c: New.\n+\t* gcc.target/powerpc/vec-extracth-5.c: New.\n+\t* gcc.target/powerpc/vec-extracth-6.c: New.\n+\t* gcc.target/powerpc/vec-extracth-7.c: New.\n+\t* gcc.target/powerpc/vec-extracth-be-0.c: New.\n+\t* gcc.target/powerpc/vec-extracth-be-1.c: New.\n+\t* gcc.target/powerpc/vec-extracth-be-2.c: New.\n+\t* gcc.target/powerpc/vec-extracth-be-3.c: New.\n+\t* gcc.target/powerpc/vec-extractl-0.c: New.\n+\t* gcc.target/powerpc/vec-extractl-1.c: New.\n+\t* gcc.target/powerpc/vec-extractl-2.c: New.\n+\t* gcc.target/powerpc/vec-extractl-3.c: New.\n+\t* gcc.target/powerpc/vec-extractl-4.c: New.\n+\t* gcc.target/powerpc/vec-extractl-5.c: New.\n+\t* gcc.target/powerpc/vec-extractl-6.c: New.\n+\t* gcc.target/powerpc/vec-extractl-7.c: New.\n+\t* gcc.target/powerpc/vec-extractl-be-0.c: New.\n+\t* gcc.target/powerpc/vec-extractl-be-1.c: New.\n+\t* gcc.target/powerpc/vec-extractl-be-2.c: New.\n+\t* gcc.target/powerpc/vec-extractl-be-3.c: New.\n+\n 2020-05-13  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/79706"}, {"sha": "953b148d8e8691efd6ecd66991ede48055e7bbe8", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extracth-0.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-0.c?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  vector unsigned char source_a = {\n+    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n+  vector unsigned char source_b = {\n+    16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };\n+\n+  vector unsigned long long int result_1 = { 0, 16 };\n+  vector unsigned long long int result_2 = { 0, 15 };\n+  vector unsigned long long int result_3 = { 0, 11 };\n+  vector unsigned long long int result_4 = { 0, 23 };\n+\n+  if (!vec_all_eq (vec_extracth (source_a, source_b, 15), result_1))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_a, source_b, 16), result_2))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_b, source_a, 4), result_3))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_b, source_a, 24), result_4))\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mvextdubvlx\\M} { target le } } } */\n+/* { dg-final { scan-assembler {\\mvextdubvrx\\M} { target be } } } */"}, {"sha": "ec55f0ed8e2589ef56310bd11090b9cf94a9e83d", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extracth-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-1.c?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  vector unsigned char source_a = {\n+    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n+  vector unsigned char source_b = {\n+    16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };\n+\n+  vector unsigned long long int result_1 = { 0, 16 };\n+  vector unsigned long long int result_2 = { 0, 15 };\n+  vector unsigned long long int result_3 = { 0, 11 };\n+  vector unsigned long long int result_4 = { 0, 23 };\n+\n+  if (!vec_all_eq (vec_extracth (source_a, source_b, 15), result_1))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_a, source_b, 16), result_2))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_b, source_a, 4), result_3))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_b, source_a, 24), result_4))\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "0520546ba39127bd921af2c4a28eab0518e0b2d5", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extracth-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-2.c?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  vector unsigned short source_a = { 0, 2, 4, 6, 8, 10, 12, 14 };\n+  vector unsigned short source_b = { 16, 18, 20, 22, 24, 26, 28, 30 };\n+\n+  vector unsigned long long int result_1 = { 0, 16 };\n+  vector unsigned long long int result_2 = { 0, 14 };\n+  vector unsigned long long int result_3 = { 0, 6 };\n+  vector unsigned long long int result_4 = { 0, 18 };\n+\n+  if (!vec_all_eq (vec_extracth (source_a, source_b, 14), result_1))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_a, source_b, 16), result_2))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_b, source_a, 8), result_3))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_b, source_a, 28), result_4))\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mvextduhvlx\\M} { target le } } } */\n+/* { dg-final { scan-assembler {\\mvextduhvrx\\M} { target be } } } */"}, {"sha": "962b2fd3035127f30a348d3c37a992ff630b223e", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extracth-3.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-3.c?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  vector unsigned short source_a = { 0, 2, 4, 6, 8, 10, 12, 14 };\n+  vector unsigned short source_b = { 16, 18, 20, 22, 24, 26, 28, 30 };\n+\n+  vector unsigned long long int result_1 = { 0, 16 };\n+  vector unsigned long long int result_2 = { 0, 14 };\n+  vector unsigned long long int result_3 = { 0, 6 };\n+  vector unsigned long long int result_4 = { 0, 18 };\n+\n+  if (!vec_all_eq (vec_extracth (source_a, source_b, 14), result_1))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_a, source_b, 16), result_2))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_b, source_a, 8), result_3))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_b, source_a, 28), result_4))\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "0f6d1bf9a9d16e04d585993dd8159f540b55eb5e", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extracth-4.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-4.c?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  vector unsigned int source_a = { 0, 4, 8, 12 };\n+  vector unsigned int source_b = { 16, 20, 24, 28 };\n+\n+  vector unsigned long long int result_1 = { 0, 16 };\n+  vector unsigned long long int result_2 = { 0, 12 };\n+  vector unsigned long long int result_3 = { 0, 4 };\n+  vector unsigned long long int result_4 = { 0, 16 };\n+\n+  if (!vec_all_eq (vec_extracth (source_a, source_b, 12), result_1))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_a, source_b, 16), result_2))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_b, source_a, 8), result_3))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_b, source_a, 28), result_4))\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mvextduwvlx\\M} { target le } } } */\n+/* { dg-final { scan-assembler {\\mvextduwvrx\\M} { target be } } } */"}, {"sha": "94ed061725f8468756018ee370f957ba16ee5f9e", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extracth-5.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-5.c?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  vector unsigned int source_a = { 0, 4, 8, 12 };\n+  vector unsigned int source_b = { 16, 20, 24, 28 };\n+\n+  vector unsigned long long int result_1 = { 0, 16 };\n+  vector unsigned long long int result_2 = { 0, 12 };\n+  vector unsigned long long int result_3 = { 0, 4 };\n+  vector unsigned long long int result_4 = { 0, 16 };\n+\n+  if (!vec_all_eq (vec_extracth (source_a, source_b, 12), result_1))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_a, source_b, 16), result_2))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_b, source_a, 8), result_3))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_b, source_a, 28), result_4))\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "27acaa192cce90f1a266506eb2e4b18428b98748", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extracth-6.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-6.c?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  vector unsigned long long source_a = { 0, 14 };\n+  vector unsigned long long source_b = { 16, 30 };\n+\n+  vector unsigned long long int result_1 = { 0, 16 };\n+  vector unsigned long long int result_2 = { 0, 14 };\n+  vector unsigned long long int result_3 = { 0, 0 };\n+  vector unsigned long long int result_4 = { 0, 30 };\n+\n+  if (!vec_all_eq (vec_extracth (source_a, source_b, 8), result_1))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_a, source_b, 16), result_2))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_b, source_a, 8), result_3))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_b, source_a, 16), result_4))\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mvextddvlx\\M} { target le } } } */\n+/* { dg-final { scan-assembler {\\mvextddvrx\\M} { target be } } } */"}, {"sha": "30c4d3a5cf0b76a128f69ea93849b5a9d3006e9e", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extracth-7.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-7.c?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  vector unsigned long long source_a = { 0, 14 };\n+  vector unsigned long long source_b = { 16, 30 };\n+\n+  vector unsigned long long int result_1 = { 0, 16 };\n+  vector unsigned long long int result_2 = { 0, 14 };\n+  vector unsigned long long int result_3 = { 0, 0 };\n+  vector unsigned long long int result_4 = { 0, 30 };\n+\n+  if (!vec_all_eq (vec_extracth (source_a, source_b, 8), result_1))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_a, source_b, 16), result_2))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_b, source_a, 8), result_3))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_b, source_a, 16), result_4))\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "93181033693487ce44114412fa835b3ba7ad8bcb", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extracth-be-0.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-be-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-be-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-be-0.c?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-options \"-mdejagnu-cpu=future -mbig-endian\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  vector unsigned char source_a = {\n+    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n+  vector unsigned char source_b = {\n+    16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };\n+\n+  vector unsigned long long int result_1 = { 0, 16 };\n+  vector unsigned long long int result_2 = { 0, 15 };\n+  vector unsigned long long int result_3 = { 0, 11 };\n+  vector unsigned long long int result_4 = { 0, 23 };\n+\n+  if (!vec_all_eq (vec_extracth (source_a, source_b, 15), result_1))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_a, source_b, 16), result_2))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_b, source_a, 4), result_3))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_b, source_a, 24), result_4))\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mvextdubvrx\\M} } } */"}, {"sha": "48cf3ac86283d28035715df236398c118298b3dd", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extracth-be-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-be-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-be-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-be-1.c?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-options \"-mdejagnu-cpu=future -mbig-endian\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  vector unsigned short source_a = { 0, 2, 4, 6, 8, 10, 12, 14 };\n+  vector unsigned short source_b = { 16, 18, 20, 22, 24, 26, 28, 30 };\n+\n+  vector unsigned long long int result_1 = { 0, 16 };\n+  vector unsigned long long int result_2 = { 0, 14 };\n+  vector unsigned long long int result_3 = { 0, 6 };\n+  vector unsigned long long int result_4 = { 0, 18 };\n+\n+  if (!vec_all_eq (vec_extracth (source_a, source_b, 14), result_1))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_a, source_b, 16), result_2))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_b, source_a, 8), result_3))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_b, source_a, 28), result_4))\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mvextduhvrx\\M} } } */"}, {"sha": "cb2b1c8412730a0015b54cf78e915cb829e3dd19", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extracth-be-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-be-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-be-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-be-2.c?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-options \"-mdejagnu-cpu=future -mbig-endian\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  vector unsigned int source_a = { 0, 4, 8, 12 };\n+  vector unsigned int source_b = { 16, 20, 24, 28 };\n+\n+  vector unsigned long long int result_1 = { 0, 16 };\n+  vector unsigned long long int result_2 = { 0, 12 };\n+  vector unsigned long long int result_3 = { 0, 4 };\n+  vector unsigned long long int result_4 = { 0, 16 };\n+\n+  if (!vec_all_eq (vec_extracth (source_a, source_b, 12), result_1))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_a, source_b, 16), result_2))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_b, source_a, 8), result_3))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_b, source_a, 28), result_4))\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mvextduwvrx\\M} } } */"}, {"sha": "292c8fea5710c77057b6b73b08c263a116d74d4b", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extracth-be-3.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-be-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-be-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extracth-be-3.c?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-options \"-mdejagnu-cpu=future -mbig-endian\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  vector unsigned long long source_a = { 0, 14 };\n+  vector unsigned long long source_b = { 16, 30 };\n+\n+  vector unsigned long long int result_1 = { 0, 16 };\n+  vector unsigned long long int result_2 = { 0, 14 };\n+  vector unsigned long long int result_3 = { 0, 0 };\n+  vector unsigned long long int result_4 = { 0, 30 };\n+\n+  if (!vec_all_eq (vec_extracth (source_a, source_b, 8), result_1))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_a, source_b, 16), result_2))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_b, source_a, 8), result_3))\n+    abort ();\n+  if (!vec_all_eq (vec_extracth (source_b, source_a, 16), result_4))\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mvextddvrx\\M} } } */"}, {"sha": "7cbd79ca384239a6533fc5801da7f7987cb68709", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extractl-0.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-0.c?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  vector unsigned char source_a = {\n+    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n+  vector unsigned char source_b = {\n+    16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };\n+\n+  vector unsigned long long int result_1 = { 0, 15 };\n+  vector unsigned long long int result_2 = { 0, 16 };\n+  vector unsigned long long int result_3 = { 0, 20 };\n+  vector unsigned long long int result_4 = { 0, 8 };\n+\n+  if (!vec_all_eq (vec_extractl (source_a, source_b, 15), result_1))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_a, source_b, 16), result_2))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_b, source_a, 4), result_3))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_b, source_a, 24), result_4))\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mvextdubvrx\\M} { target le } } } */\n+/* { dg-final { scan-assembler {\\mvextdubvlx\\M} { target be } } } */"}, {"sha": "3a8329abea62a5fcedf17390b72411a391da4695", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extractl-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-1.c?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  vector unsigned char source_a = {\n+    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n+  vector unsigned char source_b = {\n+    16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };\n+\n+  vector unsigned long long int result_1 = { 0, 15 };\n+  vector unsigned long long int result_2 = { 0, 16 };\n+  vector unsigned long long int result_3 = { 0, 20 };\n+  vector unsigned long long int result_4 = { 0, 8 };\n+\n+  if (!vec_all_eq (vec_extractl (source_a, source_b, 15), result_1))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_a, source_b, 16), result_2))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_b, source_a, 4), result_3))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_b, source_a, 24), result_4))\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "3912b9427bcde3c84c5e50cdd60875509d29fe27", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extractl-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-2.c?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  vector unsigned short source_a = { 0, 2, 4, 6, 8, 10, 12, 14 };\n+  vector unsigned short source_b = { 16, 18, 20, 22, 24, 26, 28, 30 };\n+\n+  vector unsigned long long int result_1 = { 0, 14 };\n+  vector unsigned long long int result_2 = { 0, 16 };\n+  vector unsigned long long int result_3 = { 0, 24 };\n+  vector unsigned long long int result_4 = { 0, 12 };\n+\n+  if (!vec_all_eq (vec_extractl (source_a, source_b, 14), result_1))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_a, source_b, 16), result_2))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_b, source_a, 8), result_3))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_b, source_a, 28), result_4))\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mvextduhvrx\\M} { target le } } } */\n+/* { dg-final { scan-assembler {\\mvextduhvlx\\M} { target be } } } */"}, {"sha": "fd61fdfd077983c1a957bd161bda87e7bfa385a6", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extractl-3.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-3.c?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  vector unsigned short source_a = { 0, 2, 4, 6, 8, 10, 12, 14 };\n+  vector unsigned short source_b = { 16, 18, 20, 22, 24, 26, 28, 30 };\n+\n+  vector unsigned long long int result_1 = { 0, 14 };\n+  vector unsigned long long int result_2 = { 0, 16 };\n+  vector unsigned long long int result_3 = { 0, 24 };\n+  vector unsigned long long int result_4 = { 0, 12 };\n+\n+  if (!vec_all_eq (vec_extractl (source_a, source_b, 14), result_1))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_a, source_b, 16), result_2))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_b, source_a, 8), result_3))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_b, source_a, 28), result_4))\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "df06570449be58f6802e978a32d41e6d3229fbba", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extractl-4.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-4.c?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  vector unsigned int source_a = { 0, 4, 8, 12 };\n+  vector unsigned int source_b = { 16, 20, 24, 28 };\n+\n+  vector unsigned long long int result_1 = { 0, 12 };\n+  vector unsigned long long int result_2 = { 0, 16 };\n+  vector unsigned long long int result_3 = { 0, 24 };\n+  vector unsigned long long int result_4 = { 0, 4 };\n+\n+  if (!vec_all_eq (vec_extractl (source_a, source_b, 12), result_1))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_a, source_b, 16), result_2))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_b, source_a, 8), result_3))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_b, source_a, 20), result_4))\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mvextduwvrx\\M} { target le } } } */\n+/* { dg-final { scan-assembler {\\mvextduwvlx\\M} { target be } } } */"}, {"sha": "dc9b9cce8e5ac7e3834dbbd3e0c37bdd6b26684b", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extractl-5.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-5.c?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  vector unsigned int source_a = { 0, 4, 8, 12 };\n+  vector unsigned int source_b = { 16, 20, 24, 28 };\n+\n+  vector unsigned long long int result_1 = { 0, 12 };\n+  vector unsigned long long int result_2 = { 0, 16 };\n+  vector unsigned long long int result_3 = { 0, 24 };\n+  vector unsigned long long int result_4 = { 0, 4 };\n+\n+  if (!vec_all_eq (vec_extractl (source_a, source_b, 12), result_1))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_a, source_b, 16), result_2))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_b, source_a, 8), result_3))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_b, source_a, 20), result_4))\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "925073b874c8a46d0df7899fb1d6359e10978e8b", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extractl-6.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-6.c?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  vector unsigned long long source_a = { 0, 14 };\n+  vector unsigned long long source_b = { 16, 30 };\n+\n+  vector unsigned long long int result_1 = { 0, 14 };\n+  vector unsigned long long int result_2 = { 0, 16 };\n+  vector unsigned long long int result_3 = { 0, 30 };\n+  vector unsigned long long int result_4 = { 0, 0 };\n+\n+  if (!vec_all_eq (vec_extractl (source_a, source_b, 8), result_1))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_a, source_b, 16), result_2))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_b, source_a, 8), result_3))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_b, source_a, 16), result_4))\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mvextddvrx\\M} { target le } } } */\n+/* { dg-final { scan-assembler {\\mvextddvlx\\M} { target be } } } */"}, {"sha": "9d212d28e740c051e09db6066434a9558f739ee6", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extractl-7.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-7.c?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  vector unsigned long long source_a = { 0, 14 };\n+  vector unsigned long long source_b = { 16, 30 };\n+\n+  vector unsigned long long int result_1 = { 0, 14 };\n+  vector unsigned long long int result_2 = { 0, 16 };\n+  vector unsigned long long int result_3 = { 0, 30 };\n+  vector unsigned long long int result_4 = { 0, 0 };\n+\n+  if (!vec_all_eq (vec_extractl (source_a, source_b, 8), result_1))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_a, source_b, 16), result_2))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_b, source_a, 8), result_3))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_b, source_a, 16), result_4))\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "743d90a382f7a0a67987c0c7de961018b07b3677", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extractl-be-0.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-be-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-be-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-be-0.c?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-options \"-mdejagnu-cpu=future -mbig-endian\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  vector unsigned char source_a = {\n+    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n+  vector unsigned char source_b = {\n+    16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };\n+\n+  vector unsigned long long int result_1 = { 0, 15 };\n+  vector unsigned long long int result_2 = { 0, 16 };\n+  vector unsigned long long int result_3 = { 0, 20 };\n+  vector unsigned long long int result_4 = { 0, 8 };\n+\n+  if (!vec_all_eq (vec_extractl (source_a, source_b, 15), result_1))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_a, source_b, 16), result_2))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_b, source_a, 4), result_3))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_b, source_a, 24), result_4))\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mvextdubvlx\\M} } } */"}, {"sha": "0dd223b792077346ea836655227fa3ca8a8f21a2", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extractl-be-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-be-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-be-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-be-1.c?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-options \"-mdejagnu-cpu=future -mbig-endian\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  vector unsigned short source_a = { 0, 2, 4, 6, 8, 10, 12, 14 };\n+  vector unsigned short source_b = { 16, 18, 20, 22, 24, 26, 28, 30 };\n+\n+  vector unsigned long long int result_1 = { 0, 14 };\n+  vector unsigned long long int result_2 = { 0, 16 };\n+  vector unsigned long long int result_3 = { 0, 24 };\n+  vector unsigned long long int result_4 = { 0, 12 };\n+\n+  if (!vec_all_eq (vec_extractl (source_a, source_b, 14), result_1))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_a, source_b, 16), result_2))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_b, source_a, 8), result_3))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_b, source_a, 28), result_4))\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mvextduhvlx\\M} } } */"}, {"sha": "d9d4396e5d9a1d04b5091d87109a72b996ca2237", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extractl-be-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-be-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-be-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-be-2.c?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-options \"-mdejagnu-cpu=future -mbig-endian\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  vector unsigned int source_a = { 0, 4, 8, 12 };\n+  vector unsigned int source_b = { 16, 20, 24, 28 };\n+\n+  vector unsigned long long int result_1 = { 0, 12 };\n+  vector unsigned long long int result_2 = { 0, 16 };\n+  vector unsigned long long int result_3 = { 0, 24 };\n+  vector unsigned long long int result_4 = { 0, 4 };\n+\n+  if (!vec_all_eq (vec_extractl (source_a, source_b, 12), result_1))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_a, source_b, 16), result_2))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_b, source_a, 8), result_3))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_b, source_a, 20), result_4))\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mvextduwvlx\\M} } } */"}, {"sha": "95f9ddda7471f2517eff5fb6429ec361a5c59608", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extractl-be-3.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-be-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21d2b6661c82a455be551d55e4e17005b480ad3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-be-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extractl-be-3.c?ref=c21d2b6661c82a455be551d55e4e17005b480ad3", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-options \"-mdejagnu-cpu=future -mbig-endian\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  vector unsigned long long source_a = { 0, 14 };\n+  vector unsigned long long source_b = { 16, 30 };\n+\n+  vector unsigned long long int result_1 = { 0, 14 };\n+  vector unsigned long long int result_2 = { 0, 16 };\n+  vector unsigned long long int result_3 = { 0, 30 };\n+  vector unsigned long long int result_4 = { 0, 0 };\n+\n+  if (!vec_all_eq (vec_extractl (source_a, source_b, 8), result_1))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_a, source_b, 16), result_2))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_b, source_a, 8), result_3))\n+    abort ();\n+  if (!vec_all_eq (vec_extractl (source_b, source_a, 16), result_4))\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mvextddvlx\\M} } } */"}]}