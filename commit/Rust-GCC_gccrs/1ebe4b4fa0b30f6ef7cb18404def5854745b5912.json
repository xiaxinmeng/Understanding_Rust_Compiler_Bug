{"sha": "1ebe4b4fa0b30f6ef7cb18404def5854745b5912", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWViZTRiNGZhMGIzMGY2ZWY3Y2IxODQwNGRlZjU4NTQ3NDViNTkxMg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-10-05T14:28:39Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-10-05T14:28:39Z"}, "message": "opts-common.c (handle_option, [...]): Add diagnostic_context parameter.\n\n\t* opts-common.c (handle_option, handle_generated_option,\n\tread_cmdline_option, set_option): Add diagnostic_context\n\tparameter.  Update calls among these functions.\n\t(set_option): Don't use global_dc.\n\t* opts.c (read_cmdline_options): Pass global_dc to\n\tread_cmdline_option.\n\t(decode_options): Pass global_dc to enable_warning_as_error.\n\t(common_handle_option): Pass global_dc to enable_warning_as_error.\n\t(enable_warning_as_error): Add diagnostic_context parameter.\n\tDocument parameters.  Don't use global_dc.  Pass\n\tdiagnostic_context parameter to handle_generated_option.\n\t* opts.h (set_option, handle_option, handle_generated_option,\n\tread_cmdline_option, enable_warning_as_error): Add\n\tdiagnostic_context parameter.\n\t* Makefile.in (lto-opts.o): Update dependencies.\n\t* coretypes.h (struct diagnostic_context, diagnostic_context):\n\tDeclare here.\n\t* diagnostic.h (diagnostic_context): Don't declare typedef here.\n\t* gcc.c (process_command): Pass global_dc to read_cmdline_option.\n\t* langhooks-def.h (struct diagnostic_context): Don't declare here.\n\t(lhd_print_error_function, lhd_initialize_diagnostics): Declare\n\tusing diagnostic_context typedef.\n\t* langhooks.c (lhd_initialize_diagnostics): Declare using\n\tdiagnostic_context typedef.\n\t* langhooks.h (struct diagnostic_context): Don't declare here.\n\t(initialize_diagnostics, print_error_function): Declare using\n\tdiagnostic_context typedef.\n\t* lto-opts.c: Include diagnostic.h.\n\t(lto_reissue_options): Pass global_dc to set_option.  Pass\n\tDK_UNSPECIFIED not 0.\n\t* plugin.c (plugins_internal_error_function): Declare using\n\tdiagnostic_context typedef.\n\t* plugin.h (struct diagnostic_context): Don't declare here.\n\t(plugins_internal_error_function): Declare using\n\tdiagnostic_context typedef.\n\nc-family:\n\t* c-common.h (struct diagnostic_context): Don't declare here.\n\t(c_common_initialize_diagnostics): Declare using\n\tdiagnostic_context typedef.\n\t* c-opts.c (c_common_handle_option): Pass global_dc to\n\thandle_generated_option.\n\ncp:\n\t* cp-tree.h (cxx_print_error_function,\n\tcxx_initialize_diagnostics): Declare using diagnostic_context\n\ttypedef.\n\nFrom-SVN: r164991", "tree": {"sha": "43c4d6f7a1bd908c7de82db7e4231d62541f883a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43c4d6f7a1bd908c7de82db7e4231d62541f883a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ebe4b4fa0b30f6ef7cb18404def5854745b5912", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ebe4b4fa0b30f6ef7cb18404def5854745b5912", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ebe4b4fa0b30f6ef7cb18404def5854745b5912", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcee41ff81d1c5aee58820299fe51eaf4545f3c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcee41ff81d1c5aee58820299fe51eaf4545f3c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcee41ff81d1c5aee58820299fe51eaf4545f3c0"}], "stats": {"total": 168, "additions": 119, "deletions": 49}, "files": [{"sha": "c5f5c4799b5c5adc8e3ee48ae89fcd7384f5d2e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ebe4b4fa0b30f6ef7cb18404def5854745b5912", "patch": "@@ -1,3 +1,41 @@\n+2010-10-05  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* opts-common.c (handle_option, handle_generated_option,\n+\tread_cmdline_option, set_option): Add diagnostic_context\n+\tparameter.  Update calls among these functions.\n+\t(set_option): Don't use global_dc.\n+\t* opts.c (read_cmdline_options): Pass global_dc to\n+\tread_cmdline_option.\n+\t(decode_options): Pass global_dc to enable_warning_as_error.\n+\t(common_handle_option): Pass global_dc to enable_warning_as_error.\n+\t(enable_warning_as_error): Add diagnostic_context parameter.\n+\tDocument parameters.  Don't use global_dc.  Pass\n+\tdiagnostic_context parameter to handle_generated_option.\n+\t* opts.h (set_option, handle_option, handle_generated_option,\n+\tread_cmdline_option, enable_warning_as_error): Add\n+\tdiagnostic_context parameter.\n+\t* Makefile.in (lto-opts.o): Update dependencies.\n+\t* coretypes.h (struct diagnostic_context, diagnostic_context):\n+\tDeclare here.\n+\t* diagnostic.h (diagnostic_context): Don't declare typedef here.\n+\t* gcc.c (process_command): Pass global_dc to read_cmdline_option.\n+\t* langhooks-def.h (struct diagnostic_context): Don't declare here.\n+\t(lhd_print_error_function, lhd_initialize_diagnostics): Declare\n+\tusing diagnostic_context typedef.\n+\t* langhooks.c (lhd_initialize_diagnostics): Declare using\n+\tdiagnostic_context typedef.\n+\t* langhooks.h (struct diagnostic_context): Don't declare here.\n+\t(initialize_diagnostics, print_error_function): Declare using\n+\tdiagnostic_context typedef.\n+\t* lto-opts.c: Include diagnostic.h.\n+\t(lto_reissue_options): Pass global_dc to set_option.  Pass\n+\tDK_UNSPECIFIED not 0.\n+\t* plugin.c (plugins_internal_error_function): Declare using\n+\tdiagnostic_context typedef.\n+\t* plugin.h (struct diagnostic_context): Don't declare here.\n+\t(plugins_internal_error_function): Declare using\n+\tdiagnostic_context typedef.\n+\n 2010-10-05  Olivier Hainque  <hainque@adacore.com>\n             Nicolas Roche  <roche@adacore.com>\n "}, {"sha": "04670344a0a491e6b59b3ce3bdce7e55d8156ba7", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=1ebe4b4fa0b30f6ef7cb18404def5854745b5912", "patch": "@@ -2325,7 +2325,7 @@ lto-symtab.o: lto-symtab.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(LTO_STREAMER_H) $(LINKER_PLUGIN_API_H) gt-lto-symtab.h\n lto-opts.o: lto-opts.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n    $(HASHTAB_H) $(GGC_H) $(BITMAP_H) $(FLAGS_H) opts.h options.h \\\n-   $(TARGET_H) $(TOPLEV_H) $(DIAGNOSTIC_CORE_H) $(LTO_STREAMER_H)\n+   $(TARGET_H) $(TOPLEV_H) $(DIAGNOSTIC_H) $(LTO_STREAMER_H)\n lto-streamer.o: lto-streamer.c $(CONFIG_H) $(SYSTEM_H) coretypes.h   \\\n    $(TM_H) $(TREE_H) $(GIMPLE_H) $(BITMAP_H) $(LTO_STREAMER_H) $(FLAGS_H) \\\n    $(TREE_FLOW_H) $(DIAGNOSTIC_CORE_H) $(LTO_SYMTAB_H) $(TOPLEV_H) $(DIAGNOSTIC_CORE_H)"}, {"sha": "efe6b54a984a17021063ea33b41da6d8ef04602b", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=1ebe4b4fa0b30f6ef7cb18404def5854745b5912", "patch": "@@ -1,3 +1,11 @@\n+2010-10-05  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.h (struct diagnostic_context): Don't declare here.\n+\t(c_common_initialize_diagnostics): Declare using\n+\tdiagnostic_context typedef.\n+\t* c-opts.c (c_common_handle_option): Pass global_dc to\n+\thandle_generated_option.\n+\n 2010-10-04  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-opts.c (c_common_handle_option): Pass &global_options_set to"}, {"sha": "f8d7ff5291420cc4727f9a1369ff4b18c2341cbd", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=1ebe4b4fa0b30f6ef7cb18404def5854745b5912", "patch": "@@ -740,10 +740,8 @@ extern void set_compound_literal_name (tree decl);\n \n extern tree build_va_arg (location_t, tree, tree);\n \n-struct diagnostic_context;\n-\n extern unsigned int c_common_option_lang_mask (void);\n-extern void c_common_initialize_diagnostics (struct diagnostic_context *);\n+extern void c_common_initialize_diagnostics (diagnostic_context *);\n extern bool c_common_complain_wrong_lang_p (const struct cl_option *);\n extern void c_common_init_options (unsigned int, struct cl_decoded_option *);\n extern bool c_common_post_options (const char **);"}, {"sha": "b7bf295f80cc4195dd88e08f060665c64b789703", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=1ebe4b4fa0b30f6ef7cb18404def5854745b5912", "patch": "@@ -438,7 +438,7 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       set_Wformat (value);\n       handle_generated_option (&global_options, &global_options_set,\n \t\t\t       OPT_Wimplicit, NULL, value,\n-\t\t\t       c_family_lang_mask, kind, handlers);\n+\t\t\t       c_family_lang_mask, kind, handlers, global_dc);\n       warn_char_subscripts = value;\n       warn_missing_braces = value;\n       warn_parentheses = value;\n@@ -533,11 +533,13 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       if (warn_implicit_int == -1)\n \thandle_generated_option (&global_options, &global_options_set,\n \t\t\t\t OPT_Wimplicit_int, NULL, value,\n-\t\t\t\t c_family_lang_mask, kind, handlers);\n+\t\t\t\t c_family_lang_mask, kind, handlers,\n+\t\t\t\t global_dc);\n       if (warn_implicit_function_declaration == -1)\n \thandle_generated_option (&global_options, &global_options_set,\n \t\t\t\t OPT_Wimplicit_function_declaration, NULL,\n-\t\t\t\t value, c_family_lang_mask, kind, handlers);\n+\t\t\t\t value, c_family_lang_mask, kind, handlers,\n+\t\t\t\t global_dc);\n       break;\n \n     case OPT_Winvalid_pch:"}, {"sha": "419142a733f6eb83c7f963ff6253fad4ab4b10d2", "filename": "gcc/coretypes.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=1ebe4b4fa0b30f6ef7cb18404def5854745b5912", "patch": "@@ -70,6 +70,8 @@ struct cl_optimization;\n struct cl_option;\n struct cl_decoded_option;\n struct cl_option_handlers;\n+struct diagnostic_context;\n+typedef struct diagnostic_context diagnostic_context;\n struct gimple_seq_d;\n typedef struct gimple_seq_d *gimple_seq;\n typedef const struct gimple_seq_d *const_gimple_seq;"}, {"sha": "7f77a7b56a3c6162b35f833837eebc98f4e1158f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1ebe4b4fa0b30f6ef7cb18404def5854745b5912", "patch": "@@ -1,3 +1,9 @@\n+2010-10-05  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* cp-tree.h (cxx_print_error_function,\n+\tcxx_initialize_diagnostics): Declare using diagnostic_context\n+\ttypedef.\n+\n 2010-10-04  Andi Kleen <ak@linux.intel.com>\n \n \t* Make-lang.in (g++, cc1plus): Add + to build rule."}, {"sha": "e4f24126dcaa92b2160e8ee49167b82fe1c17e6e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1ebe4b4fa0b30f6ef7cb18404def5854745b5912", "patch": "@@ -5430,7 +5430,7 @@ extern void cxx_print_xnode\t\t\t(FILE *, tree, int);\n extern void cxx_print_decl\t\t\t(FILE *, tree, int);\n extern void cxx_print_type\t\t\t(FILE *, tree, int);\n extern void cxx_print_identifier\t\t(FILE *, tree, int);\n-extern void cxx_print_error_function\t(struct diagnostic_context *,\n+extern void cxx_print_error_function\t\t(diagnostic_context *,\n \t\t\t\t\t\t const char *,\n \t\t\t\t\t\t struct diagnostic_info *);\n \n@@ -5594,7 +5594,7 @@ extern alias_set_type cxx_get_alias_set\t\t(tree);\n extern bool cxx_warn_unused_global_decl\t\t(const_tree);\n extern size_t cp_tree_size\t\t\t(enum tree_code);\n extern bool cp_var_mod_type_p\t\t\t(tree, tree);\n-extern void cxx_initialize_diagnostics\t\t(struct diagnostic_context *);\n+extern void cxx_initialize_diagnostics\t\t(diagnostic_context *);\n extern int cxx_types_compatible_p\t\t(tree, tree);\n extern void init_shadowed_var_for_decl\t\t(void);\n "}, {"sha": "99671c64e59b199c0b5100164f8e311b8d14d222", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=1ebe4b4fa0b30f6ef7cb18404def5854745b5912", "patch": "@@ -52,7 +52,6 @@ typedef struct diagnostic_classification_change_t\n } diagnostic_classification_change_t;\n \n /*  Forward declarations.  */\n-typedef struct diagnostic_context diagnostic_context;\n typedef void (*diagnostic_starter_fn) (diagnostic_context *,\n \t\t\t\t       diagnostic_info *);\n typedef diagnostic_starter_fn diagnostic_finalizer_fn;"}, {"sha": "f6e0b9ec22f436ed091d7aa0cdd8f29abffad21d", "filename": "gcc/gcc.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=1ebe4b4fa0b30f6ef7cb18404def5854745b5912", "patch": "@@ -3806,7 +3806,8 @@ process_command (unsigned int decoded_options_count,\n \t}\n \n       read_cmdline_option (&global_options, &global_options_set,\n-\t\t\t   decoded_options + j, CL_DRIVER, &handlers);\n+\t\t\t   decoded_options + j, CL_DRIVER, &handlers,\n+\t\t\t   global_dc);\n     }\n \n   /* If -save-temps=obj and -o name, create the prefix to use for %b."}, {"sha": "fa18eed9fb7fcf1041a3b4b3c0732917198d4a42", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=1ebe4b4fa0b30f6ef7cb18404def5854745b5912", "patch": "@@ -24,7 +24,6 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"hooks.h\"\n \n-struct diagnostic_context;\n struct diagnostic_info;\n \n /* Note to creators of new hooks:\n@@ -51,7 +50,7 @@ extern void lhd_print_tree_nothing (FILE *, tree, int);\n extern const char *lhd_decl_printable_name (tree, int);\n extern const char *lhd_dwarf_name (tree, int);\n extern int lhd_types_compatible_p (tree, tree);\n-extern void lhd_print_error_function (struct diagnostic_context *,\n+extern void lhd_print_error_function (diagnostic_context *,\n \t\t\t\t      const char *, struct diagnostic_info *);\n extern void lhd_set_decl_assembler_name (tree);\n extern bool lhd_warn_unused_global_decl (const_tree);\n@@ -65,7 +64,7 @@ extern tree lhd_expr_to_decl (tree, bool *, bool *);\n extern tree lhd_builtin_function (tree);\n \n /* Declarations of default tree inlining hooks.  */\n-extern void lhd_initialize_diagnostics (struct diagnostic_context *);\n+extern void lhd_initialize_diagnostics (diagnostic_context *);\n extern void lhd_init_options (unsigned int,\n \t\t\t      struct cl_decoded_option *);\n extern bool lhd_complain_wrong_lang_p (const struct cl_option *);"}, {"sha": "76c066bfaa3793ec1044e7ce50fadc3353e32c44", "filename": "gcc/langhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=1ebe4b4fa0b30f6ef7cb18404def5854745b5912", "patch": "@@ -333,7 +333,7 @@ write_global_declarations (void)\n \n /* Called to perform language-specific initialization of CTX.  */\n void\n-lhd_initialize_diagnostics (struct diagnostic_context *ctx ATTRIBUTE_UNUSED)\n+lhd_initialize_diagnostics (diagnostic_context *ctx ATTRIBUTE_UNUSED)\n {\n }\n "}, {"sha": "0c8a982c67391d09da08a2cbea57c5123807273c", "filename": "gcc/langhooks.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=1ebe4b4fa0b30f6ef7cb18404def5854745b5912", "patch": "@@ -23,7 +23,6 @@ along with GCC; see the file COPYING3.  If not see\n \n /* This file should be #include-d after tree.h.  */\n \n-struct diagnostic_context;\n struct diagnostic_info;\n \n struct gimplify_omp_ctx;\n@@ -275,7 +274,7 @@ struct lang_hooks\n \n   /* Callback used to perform language-specific initialization for the\n      global diagnostic context structure.  */\n-  void (*initialize_diagnostics) (struct diagnostic_context *);\n+  void (*initialize_diagnostics) (diagnostic_context *);\n \n   /* Return true if a warning should be given about option OPTION,\n      which is for the wrong language, false if it should be quietly\n@@ -374,7 +373,7 @@ struct lang_hooks\n   int (*types_compatible_p) (tree x, tree y);\n \n   /* Called by report_error_function to print out function name.  */\n-  void (*print_error_function) (struct diagnostic_context *, const char *,\n+  void (*print_error_function) (diagnostic_context *, const char *,\n \t\t\t\tstruct diagnostic_info *);\n \n   /* Convert a character from the host's to the target's character"}, {"sha": "66010c68adf4f2b42599234e3f7cff7254dca5e3", "filename": "gcc/lto-opts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Flto-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Flto-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-opts.c?ref=1ebe4b4fa0b30f6ef7cb18404def5854745b5912", "patch": "@@ -31,7 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"opts.h\"\n #include \"options.h\"\n #include \"target.h\"\n-#include \"diagnostic-core.h\"\n+#include \"diagnostic.h\"\n #include \"toplev.h\"\n #include \"lto-streamer.h\"\n \n@@ -404,7 +404,7 @@ lto_reissue_options (void)\n       if (flag_var)\n \tset_option (&global_options, &global_options_set,\n \t\t    o->code, o->value, o->arg,\n-\t\t    0 /*DK_UNSPECIFIED*/);\n+\t\t    DK_UNSPECIFIED, global_dc);\n \n       if (o->type == CL_TARGET)\n \ttargetm.handle_option (o->code, o->arg, o->value);"}, {"sha": "a5f66ce45faafad821f5c7b6fe6e64143b3ab024", "filename": "gcc/opts-common.c", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=1ebe4b4fa0b30f6ef7cb18404def5854745b5912", "patch": "@@ -804,15 +804,16 @@ prune_options (struct cl_decoded_option **decoded_options,\n    option, DK_UNSPECIFIED otherwise.  GENERATED_P is true for an\n    option generated as part of processing another option or otherwise\n    generated internally, false for one explicitly passed by the user.\n-   Returns false if the switch was invalid.  */\n+   Returns false if the switch was invalid.  DC is the diagnostic\n+   context for options affecting diagnostics state, or NULL.  */\n \n bool\n handle_option (struct gcc_options *opts,\n \t       struct gcc_options *opts_set,\n \t       const struct cl_decoded_option *decoded,\n \t       unsigned int lang_mask, int kind,\n \t       const struct cl_option_handlers *handlers,\n-\t       bool generated_p)\n+\t       bool generated_p, diagnostic_context *dc)\n {\n   size_t opt_index = decoded->opt_index;\n   const char *arg = decoded->arg;\n@@ -823,7 +824,7 @@ handle_option (struct gcc_options *opts,\n \n   if (flag_var)\n     set_option (opts, (generated_p ? NULL : opts_set),\n-\t\topt_index, value, arg, kind);\n+\t\topt_index, value, arg, kind, dc);\n \n   for (i = 0; i < handlers->num_handlers; i++)\n     if (option->flags & handlers->handlers[i].mask)\n@@ -849,13 +850,14 @@ handle_generated_option (struct gcc_options *opts,\n \t\t\t struct gcc_options *opts_set,\n \t\t\t size_t opt_index, const char *arg, int value,\n \t\t\t unsigned int lang_mask, int kind,\n-\t\t\t const struct cl_option_handlers *handlers)\n+\t\t\t const struct cl_option_handlers *handlers,\n+\t\t\t diagnostic_context *dc)\n {\n   struct cl_decoded_option decoded;\n \n   generate_option (opt_index, arg, value, lang_mask, &decoded);\n   return handle_option (opts, opts_set, &decoded, lang_mask, kind, handlers,\n-\t\t\ttrue);\n+\t\t\ttrue, dc);\n }\n \n /* Fill in *DECODED with an option described by OPT_INDEX, ARG and\n@@ -915,14 +917,16 @@ generate_option_input_file (const char *file,\n \n /* Handle the switch DECODED for the language indicated by LANG_MASK,\n    using the handlers in *HANDLERS and setting fields in OPTS and\n-   OPTS_SET.  */\n+   OPTS_SET and using diagnostic context DC (if not NULL) for\n+   diagnostic options.  */\n \n void\n read_cmdline_option (struct gcc_options *opts,\n \t\t     struct gcc_options *opts_set,\n \t\t     struct cl_decoded_option *decoded,\n \t\t     unsigned int lang_mask,\n-\t\t     const struct cl_option_handlers *handlers)\n+\t\t     const struct cl_option_handlers *handlers,\n+\t\t     diagnostic_context *dc)\n {\n   const struct cl_option *option;\n   const char *opt = decoded->orig_option_with_args_text;\n@@ -974,16 +978,19 @@ read_cmdline_option (struct gcc_options *opts,\n   gcc_assert (!decoded->errors);\n \n   if (!handle_option (opts, opts_set, decoded, lang_mask, DK_UNSPECIFIED,\n-\t\t      handlers, false))\n+\t\t      handlers, false, dc))\n     error (\"unrecognized command line option %qs\", opt);\n }\n \n /* Set any field in OPTS, and OPTS_SET if not NULL, for option\n-   OPT_INDEX according to VALUE and ARG, diagnostic kind KIND.  */\n+   OPT_INDEX according to VALUE and ARG, diagnostic kind KIND, using\n+   diagnostic context DC if not NULL for diagnostic\n+   classification.  */\n \n void\n set_option (struct gcc_options *opts, struct gcc_options *opts_set,\n-\t    int opt_index, int value, const char *arg, int kind)\n+\t    int opt_index, int value, const char *arg, int kind,\n+\t    diagnostic_context *dc)\n {\n   const struct cl_option *option = &cl_options[opt_index];\n   void *flag_var = option_flag_var (opt_index, opts);\n@@ -1028,8 +1035,9 @@ set_option (struct gcc_options *opts, struct gcc_options *opts_set,\n \tbreak;\n     }\n \n-  if ((diagnostic_t) kind != DK_UNSPECIFIED)\n-    diagnostic_classify_diagnostic (global_dc, opt_index, (diagnostic_t) kind,\n+  if ((diagnostic_t) kind != DK_UNSPECIFIED\n+      && dc != NULL)\n+    diagnostic_classify_diagnostic (dc, opt_index, (diagnostic_t) kind,\n \t\t\t\t    UNKNOWN_LOCATION);\n }\n "}, {"sha": "056033581700160839357f99760e2bd6c3ccefd2", "filename": "gcc/opts.c", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=1ebe4b4fa0b30f6ef7cb18404def5854745b5912", "patch": "@@ -639,7 +639,8 @@ read_cmdline_options (struct cl_decoded_option *decoded_options,\n \t}\n \n       read_cmdline_option (&global_options, &global_options_set,\n-\t\t\t   decoded_options + i, lang_mask, handlers);\n+\t\t\t   decoded_options + i, lang_mask, handlers,\n+\t\t\t   global_dc);\n     }\n }\n \n@@ -879,7 +880,8 @@ decode_options (unsigned int argc, const char **argv,\n     }\n \n   /* Enable -Werror=coverage-mismatch by default */\n-  enable_warning_as_error (\"coverage-mismatch\", 1, lang_mask, &handlers);\n+  enable_warning_as_error (\"coverage-mismatch\", 1, lang_mask, &handlers,\n+\t\t\t   global_dc);\n \n   if (first_time_p)\n     {\n@@ -1606,7 +1608,7 @@ common_handle_option (struct gcc_options *opts,\n       break;\n \n     case OPT_Werror_:\n-      enable_warning_as_error (arg, value, lang_mask, handlers);\n+      enable_warning_as_error (arg, value, lang_mask, handlers, global_dc);\n       break;\n \n     case OPT_Wlarger_than_:\n@@ -2284,12 +2286,15 @@ register_warning_as_error_callback (void (*callback) (int))\n   warning_as_error_callback = callback;\n }\n \n-/* Enable a warning option as an error.  This is used by -Werror= and\n-   also by legacy Werror-implicit-function-declaration.  */\n+/* Enable (or disable if VALUE is 0) a warning option ARG (language\n+   mask LANG_MASK, option handlers HANDLERS) as an error for\n+   diagnostic context DC (possibly NULL).  This is used by\n+   -Werror=.  */\n \n void\n enable_warning_as_error (const char *arg, int value, unsigned int lang_mask,\n-\t\t\t const struct cl_option_handlers *handlers)\n+\t\t\t const struct cl_option_handlers *handlers,\n+\t\t\t diagnostic_context *dc)\n {\n   char *new_option;\n   int option_index;\n@@ -2311,8 +2316,9 @@ enable_warning_as_error (const char *arg, int value, unsigned int lang_mask,\n \toption_index = option->alias_target;\n       if (option_index == OPT_SPECIAL_ignore)\n \treturn;\n-      diagnostic_classify_diagnostic (global_dc, option_index, kind,\n-\t\t\t\t      UNKNOWN_LOCATION);\n+      if (dc)\n+\tdiagnostic_classify_diagnostic (dc, option_index, kind,\n+\t\t\t\t\tUNKNOWN_LOCATION);\n       if (kind == DK_ERROR)\n \t{\n \t  const struct cl_option * const option = cl_options + option_index;\n@@ -2321,7 +2327,8 @@ enable_warning_as_error (const char *arg, int value, unsigned int lang_mask,\n \t  if (option->var_type == CLVC_BOOLEAN)\n \t    handle_generated_option (&global_options, &global_options_set,\n \t\t\t\t     option_index, NULL, value, lang_mask,\n-\t\t\t\t     (int)kind, handlers);\n+\t\t\t\t     (int)kind, handlers,\n+\t\t\t\t     dc);\n \n \t  if (warning_as_error_callback)\n \t    warning_as_error_callback (option_index);"}, {"sha": "fbfe6bf34479c9f548ed1b509809a901023f1434", "filename": "gcc/opts.h", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=1ebe4b4fa0b30f6ef7cb18404def5854745b5912", "patch": "@@ -216,19 +216,21 @@ extern bool get_option_state (struct gcc_options *, int,\n \t\t\t      struct cl_option_state *);\n extern void set_option (struct gcc_options *opts,\n \t\t\tstruct gcc_options *opts_set,\n-\t\t\tint opt_index, int value, const char *arg, int);\n+\t\t\tint opt_index, int value, const char *arg, int kind,\n+\t\t\tdiagnostic_context *dc);\n extern void *option_flag_var (int opt_index, struct gcc_options *opts);\n bool handle_option (struct gcc_options *opts,\n \t\t    struct gcc_options *opts_set,\n \t\t    const struct cl_decoded_option *decoded,\n \t\t    unsigned int lang_mask, int kind,\n \t\t    const struct cl_option_handlers *handlers,\n-\t\t    bool generated_p);\n+\t\t    bool generated_p, diagnostic_context *dc);\n bool handle_generated_option (struct gcc_options *opts,\n \t\t\t      struct gcc_options *opts_set,\n \t\t\t      size_t opt_index, const char *arg, int value,\n \t\t\t      unsigned int lang_mask, int kind,\n-\t\t\t      const struct cl_option_handlers *handlers);\n+\t\t\t      const struct cl_option_handlers *handlers,\n+\t\t\t      diagnostic_context *dc);\n void generate_option (size_t opt_index, const char *arg, int value,\n \t\t      unsigned int lang_mask,\n \t\t      struct cl_decoded_option *decoded);\n@@ -238,10 +240,12 @@ extern void read_cmdline_option (struct gcc_options *opts,\n \t\t\t\t struct gcc_options *opts_set,\n \t\t\t\t struct cl_decoded_option *decoded,\n \t\t\t\t unsigned int lang_mask,\n-\t\t\t\t const struct cl_option_handlers *handlers);\n+\t\t\t\t const struct cl_option_handlers *handlers,\n+\t\t\t\t diagnostic_context *dc);\n extern void register_warning_as_error_callback (void (*callback) (int));\n extern void enable_warning_as_error (const char *arg, int value,\n \t\t\t\t     unsigned int lang_mask,\n-\t\t\t\t     const struct cl_option_handlers *handlers);\n+\t\t\t\t     const struct cl_option_handlers *handlers,\n+\t\t\t\t     diagnostic_context *dc);\n extern void print_ignored_options (void);\n #endif"}, {"sha": "bfcff3e9cde604286492c757f4e6ccb799b9d4a1", "filename": "gcc/plugin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Fplugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Fplugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fplugin.c?ref=1ebe4b4fa0b30f6ef7cb18404def5854745b5912", "patch": "@@ -830,7 +830,7 @@ warn_if_plugins (void)\n /* Likewise, as a callback from the diagnostics code.  */\n \n void\n-plugins_internal_error_function (struct diagnostic_context *context ATTRIBUTE_UNUSED,\n+plugins_internal_error_function (diagnostic_context *context ATTRIBUTE_UNUSED,\n \t\t\t\t const char *msgid ATTRIBUTE_UNUSED,\n \t\t\t\t va_list *ap ATTRIBUTE_UNUSED)\n {"}, {"sha": "4d2d12a9da61090ea811afa43289a61956b7d188", "filename": "gcc/plugin.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Fplugin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebe4b4fa0b30f6ef7cb18404def5854745b5912/gcc%2Fplugin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fplugin.h?ref=1ebe4b4fa0b30f6ef7cb18404def5854745b5912", "patch": "@@ -23,7 +23,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gcc-plugin.h\"\n \n struct attribute_spec;\n-struct diagnostic_context;\n \n extern void add_new_plugin (const char *);\n extern void parse_plugin_arg_opt (const char *);\n@@ -33,7 +32,7 @@ extern bool plugins_active_p (void);\n extern void dump_active_plugins (FILE *);\n extern void debug_active_plugins (void);\n extern void warn_if_plugins (void);\n-extern void plugins_internal_error_function (struct diagnostic_context *,\n+extern void plugins_internal_error_function (diagnostic_context *,\n \t\t\t\t\t     const char *, va_list *);\n extern void print_plugins_versions (FILE *file, const char *indent);\n extern void print_plugins_help (FILE *file, const char *indent);"}]}