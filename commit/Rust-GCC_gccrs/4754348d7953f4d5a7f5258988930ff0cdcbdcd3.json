{"sha": "4754348d7953f4d5a7f5258988930ff0cdcbdcd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc1NDM0OGQ3OTUzZjRkNWE3ZjUyNTg5ODg5MzBmZjBjZGNiZGNkMw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-03-11T19:51:45Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-03-11T19:51:45Z"}, "message": "(emit_float_lib_cmp): Make non static.\n\n(init_optabs): Use {ADDTF3,SUBTF3,MULTF3,DIVTF3,SQRTTF2,FLOATSITF2,\nFIX_TRUNCTFSI2,EXTENDSFTF2,TRUNCTFSF2,EXTENDDFTF2,TRUNCTFDF2,EQTF2,\nNETF2,GTTF2,GETF2,LTTF2,LETF2}_LIBCALL macros.\n\nFrom-SVN: r6749", "tree": {"sha": "f0e66543537063ac875faefe9ac15181910f08c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0e66543537063ac875faefe9ac15181910f08c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4754348d7953f4d5a7f5258988930ff0cdcbdcd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4754348d7953f4d5a7f5258988930ff0cdcbdcd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4754348d7953f4d5a7f5258988930ff0cdcbdcd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4754348d7953f4d5a7f5258988930ff0cdcbdcd3/comments", "author": null, "committer": null, "parents": [{"sha": "761a5bcdf44dbe7f27f733a9143684fb4fd51a8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/761a5bcdf44dbe7f27f733a9143684fb4fd51a8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/761a5bcdf44dbe7f27f733a9143684fb4fd51a8c"}], "stats": {"total": 67, "additions": 65, "deletions": 2}, "files": [{"sha": "f166bcfd332baef911813439aee895ebc203c18e", "filename": "gcc/optabs.c", "status": "modified", "additions": 65, "deletions": 2, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4754348d7953f4d5a7f5258988930ff0cdcbdcd3/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4754348d7953f4d5a7f5258988930ff0cdcbdcd3/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=4754348d7953f4d5a7f5258988930ff0cdcbdcd3", "patch": "@@ -205,7 +205,7 @@ enum insn_code setcc_gen_code[NUM_RTX_CODE];\n \n static int add_equal_note\tPROTO((rtx, rtx, enum rtx_code, rtx, rtx));\n static rtx widen_operand\tPROTO((rtx, enum machine_mode, enum machine_mode, int, int));\n-static void emit_float_lib_cmp\tPROTO((rtx, rtx, enum rtx_code));\n+void emit_float_lib_cmp\tPROTO((rtx, rtx, enum rtx_code));\n static enum insn_code can_fix_p\tPROTO((enum machine_mode, enum machine_mode,\n \t\t\t\t       int, int *));\n static enum insn_code can_float_p PROTO((enum machine_mode, enum machine_mode,\n@@ -2641,7 +2641,7 @@ can_compare_p (mode)\n /* Emit a library call comparison between floating point X and Y.\n    COMPARISON is the rtl operator to compare with (EQ, NE, GT, etc.).  */\n \n-static void\n+void\n emit_float_lib_cmp (x, y, comparison)\n      rtx x, y;\n      enum rtx_code comparison;\n@@ -3741,6 +3741,28 @@ init_optabs ()\n     = gen_rtx (SYMBOL_REF, Pmode, UMODTI3_LIBCALL);\n #endif\n \n+/* Define library calls for quad FP instructions */\n+#ifdef ADDTF3_LIBCALL\n+  add_optab->handlers[(int) TFmode].libfunc\n+    = gen_rtx (SYMBOL_REF, Pmode, ADDTF3_LIBCALL);\n+#endif\n+#ifdef SUBTF3_LIBCALL\n+  sub_optab->handlers[(int) TFmode].libfunc\n+    = gen_rtx (SYMBOL_REF, Pmode, SUBTF3_LIBCALL);\n+#endif\n+#ifdef MULTF3_LIBCALL\n+  smul_optab->handlers[(int) TFmode].libfunc\n+    = gen_rtx (SYMBOL_REF, Pmode, MULTF3_LIBCALL);\n+#endif\n+#ifdef DIVTF3_LIBCALL\n+  flodiv_optab->handlers[(int) TFmode].libfunc\n+    = gen_rtx (SYMBOL_REF, Pmode, DIVTF3_LIBCALL);\n+#endif\n+#ifdef SQRTTF2_LIBCALL\n+  sqrt_optab->handlers[(int) TFmode].libfunc\n+    = gen_rtx (SYMBOL_REF, Pmode, SQRTTF2_LIBCALL);\n+#endif\n+\n   /* Use cabs for DC complex abs, since systems generally have cabs.\n      Don't define any libcall for SCmode, so that cabs will be used.  */\n   abs_optab->handlers[(int) DCmode].libfunc\n@@ -3800,6 +3822,26 @@ init_optabs ()\n   lttf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__lttf2\");\n   letf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__letf2\");\n \n+/* Define library calls for quad FP instructions */\n+#ifdef EQTF2_LIBCALL\n+  eqtf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, EQTF2_LIBCALL);\n+#endif\n+#ifdef NETF2_LIBCALL\n+  netf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, NETF2_LIBCALL);\n+#endif\n+#ifdef GTTF2_LIBCALL\n+  gttf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, GTTF2_LIBCALL);\n+#endif\n+#ifdef GETF2_LIBCALL\n+  getf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, GETF2_LIBCALL);\n+#endif\n+#ifdef LTTF2_LIBCALL\n+  lttf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, LTTF2_LIBCALL);\n+#endif\n+#ifdef LETF2_LIBCALL\n+  letf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, LETF2_LIBCALL);\n+#endif\n+\n   floatsisf_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__floatsisf\");\n   floatdisf_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__floatdisf\");\n   floattisf_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__floattisf\");\n@@ -3847,6 +3889,27 @@ init_optabs ()\n   fixunstfsi_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixunstfsi\");\n   fixunstfdi_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixunstfdi\");\n   fixunstfti_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixunstfti\");\n+\n+/* Define library calls for quad FP instructions */\n+#ifdef TRUNCTFSF2_LIBCALL\n+  trunctfsf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, TRUNCTFSF2_LIBCALL);\n+#endif\n+#ifdef TRUNCTFDF2_LIBCALL\n+  trunctfdf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, TRUNCTFDF2_LIBCALL);\n+#endif\n+#ifdef EXTENDSFTF2_LIBCALL\n+  extendsftf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, EXTENDSFTF2_LIBCALL);\n+#endif\n+#ifdef EXTENDDFTF2_LIBCALL\n+  extenddftf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, EXTENDDFTF2_LIBCALL);\n+#endif\n+#ifdef FLOATSITF2_LIBCALL\n+  floatsitf_libfunc = gen_rtx (SYMBOL_REF, Pmode, FLOATSITF2_LIBCALL);\n+#endif\n+#ifdef FIX_TRUNCTFSI2_LIBCALL\n+  fixtfsi_libfunc = gen_rtx (SYMBOL_REF, Pmode, FIX_TRUNCTFSI2_LIBCALL);\n+#endif\n+\n }\n \f\n #ifdef BROKEN_LDEXP"}]}