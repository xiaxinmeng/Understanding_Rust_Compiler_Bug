{"sha": "b110e5283e368b5377e04766e4ff82cd52634208", "node_id": "C_kwDOANBUbNoAKGIxMTBlNTI4M2UzNjhiNTM3N2UwNDc2NmU0ZmY4MmNkNTI2MzQyMDg", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2022-07-01T18:57:18Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2022-07-04T15:07:04Z"}, "message": "tree-sra: Fix union handling in build_reconstructed_reference\n\nAs the testcase in PR 105860 shows, the code that tries to re-use the\nhandled_component chains in SRA can be horribly confused by unions,\nwhere it thinks it has found a compatible structure under which it can\nchain the references, but in fact it found the type it was looking\nfor elsewhere in a union and generated a write to a completely wrong\npart of an aggregate.\n\nI don't remember whether the plan was to support unions at all in\nbuild_reconstructed_reference but it can work, to an extent, if we\nmake sure that we start the search only outside the outermost union,\nwhich is what the patch does (and the extra testcase verifies).\n\ngcc/ChangeLog:\n\n2022-07-01  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/105860\n\t* tree-sra.cc (build_reconstructed_reference): Start expr\n\ttraversal only just below the outermost union.\n\ngcc/testsuite/ChangeLog:\n\n2022-07-01  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/105860\n\t* gcc.dg/tree-ssa/alias-access-path-13.c: New test.\n\t* gcc.dg/tree-ssa/pr105860.c: Likewise.", "tree": {"sha": "b969fd0417da3f245932d3ea64abaf6f9f08daaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b969fd0417da3f245932d3ea64abaf6f9f08daaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b110e5283e368b5377e04766e4ff82cd52634208", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE5elVTFt/d09Vsoczv2PBvD+kNUAFAmLDAhgACgkQv2PBvD+k\nNUAo/xAApiHUdwPxJ6ObleAFumiQ+1Y/J/pvvuthFqXzNtisjIKTQu0zye/CdmnY\n1j4C88/SKFtwRKB6vEe6Rbt2tt1Ot9LebCvPhaUTmUYD/oHzaWeQ4cyPYuIN2drT\nACBKK3aU7h44FJsBRytU6MhAY6Ds0L0hPBzeW5pjrZM1XX4E8harrlHh6yoiCd5e\ntE3lOHFJ8zriv1MzdlCEcpb9huDdwPI0B6CbwNdqb7pcBgHwd6Og8rdrgh9qRIgI\nxQlHmMzVoWG0J/2mvcGMKa0uVvP8QPkTdnGWS9VJaFD0zMP6MBXD3YZqM2SvfA7z\nqUdYhQnXmIpEEsDBsc2gqru3dq8q/U70uBVuIVw9M8z9RfYfFw9y45HxZhcwsSY4\nqYaU9/vojGQFtZ1P8kDwuYYTSjohSyQ1zI0rxklcXzPhw/frS6QKY294hkA+3p46\nbst6ROxY7/8F9eXud+rxmi+96LZFpU5jbHmdwlUD95W85KrAEYQM4T/h9wNQEuSH\nExNCXFVW7Rb29NiCA1TmDq7HFwugCpT7DaKp8/8L40NkScsVXHraADJAPEm8+pUI\nZejBmHqDIAO8IgeyOzPH1H/GsNZoO0w+0DfF/usnoXiidPCOZhCfd9BmCBtlys20\n3UQRR+xBKBy5VKpIlE+WJI/RTza/aq6CfFLMI4y3gzP+TLfL0Fo=\n=vm0i\n-----END PGP SIGNATURE-----", "payload": "tree b969fd0417da3f245932d3ea64abaf6f9f08daaf\nparent 3769ad4ccea9589b3f7edaef901cb542aa10f49a\nauthor Martin Jambor <mjambor@suse.cz> 1656701838 +0200\ncommitter Martin Jambor <mjambor@suse.cz> 1656947224 +0200\n\ntree-sra: Fix union handling in build_reconstructed_reference\n\nAs the testcase in PR 105860 shows, the code that tries to re-use the\nhandled_component chains in SRA can be horribly confused by unions,\nwhere it thinks it has found a compatible structure under which it can\nchain the references, but in fact it found the type it was looking\nfor elsewhere in a union and generated a write to a completely wrong\npart of an aggregate.\n\nI don't remember whether the plan was to support unions at all in\nbuild_reconstructed_reference but it can work, to an extent, if we\nmake sure that we start the search only outside the outermost union,\nwhich is what the patch does (and the extra testcase verifies).\n\ngcc/ChangeLog:\n\n2022-07-01  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/105860\n\t* tree-sra.cc (build_reconstructed_reference): Start expr\n\ttraversal only just below the outermost union.\n\ngcc/testsuite/ChangeLog:\n\n2022-07-01  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/105860\n\t* gcc.dg/tree-ssa/alias-access-path-13.c: New test.\n\t* gcc.dg/tree-ssa/pr105860.c: Likewise.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b110e5283e368b5377e04766e4ff82cd52634208", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b110e5283e368b5377e04766e4ff82cd52634208", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b110e5283e368b5377e04766e4ff82cd52634208/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3769ad4ccea9589b3f7edaef901cb542aa10f49a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3769ad4ccea9589b3f7edaef901cb542aa10f49a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3769ad4ccea9589b3f7edaef901cb542aa10f49a"}], "stats": {"total": 107, "additions": 106, "deletions": 1}, "files": [{"sha": "e502a97bc750335232b97181f7aa32c86c902c87", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias-access-path-13.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b110e5283e368b5377e04766e4ff82cd52634208/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-access-path-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b110e5283e368b5377e04766e4ff82cd52634208/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-access-path-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-access-path-13.c?ref=b110e5283e368b5377e04766e4ff82cd52634208", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-fre1\" } */\n+\n+struct inn\n+{\n+  int val;\n+};\n+\n+union foo\n+{\n+  struct inn inn;\n+  long int baz;\n+} *fooptr;\n+\n+struct bar\n+{\n+  union foo foo;\n+  int val2;\n+} *barptr;\n+\n+int\n+test ()\n+{\n+  union foo foo;\n+  foo.inn.val = 0;\n+  barptr->val2 = 123;\n+  *fooptr = foo;\n+  return barptr->val2;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"return 123\" 1 \"fre1\"} } */"}, {"sha": "77bcb4a673931f9541530551c5f894f4bfdd580a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr105860.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b110e5283e368b5377e04766e4ff82cd52634208/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr105860.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b110e5283e368b5377e04766e4ff82cd52634208/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr105860.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr105860.c?ref=b110e5283e368b5377e04766e4ff82cd52634208", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O1\" } */\n+\n+struct S1  {\n+        unsigned int _0;\n+        unsigned int _1;\n+} ;\n+struct S2  {\n+        struct S1 _s1;\n+        unsigned long _x2;\n+} ;\n+\n+struct ufld_type1  {\n+        unsigned int _u1t;\n+        struct S2 _s2;\n+} ;\n+\n+struct ufld_type2  {\n+        unsigned int _u2t;\n+        struct S1 _s1;\n+} ;\n+struct parm_type {\n+        union {\n+                struct ufld_type1 var_1;\n+                struct ufld_type2 var_2;\n+        } U;\n+};\n+\n+struct parm_type  bad_function( struct parm_type arg0 )\n+{\n+        struct parm_type rv;\n+        struct S2 var4;\n+        switch( arg0.U.var_2._u2t ) {\n+        case 4294967041:\n+                var4._s1 = arg0.U.var_1._s2._s1;\n+                rv.U.var_1._u1t = 4294967041;\n+                rv.U.var_1._s2 = var4;\n+                break;\n+        case 4294967043:\n+                rv.U.var_2._u2t = 4294967043;\n+                rv.U.var_2._s1 = arg0.U.var_2._s1;\n+                break;\n+        default:\n+                break;\n+        }\n+        return rv;\n+}\n+\n+int main() {\n+        struct parm_type val;\n+        struct parm_type out;\n+        val.U.var_2._u2t = 4294967043;\n+        val.U.var_2._s1._0 = 0x01010101;\n+        val.U.var_2._s1._1 = 0x02020202;\n+        out = bad_function(val);\n+\tif (val.U.var_2._u2t != 4294967043)\n+\t  __builtin_abort ();\n+        if (out.U.var_2._s1._0 != 0x01010101)\n+\t  __builtin_abort ();\n+        if (val.U.var_2._s1._1 != 0x02020202 )\n+\t  __builtin_abort ();\n+\treturn 0;\n+}"}, {"sha": "1a3e12f18cc7fe58fd8046ff7e11b4039eff9df3", "filename": "gcc/tree-sra.cc", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b110e5283e368b5377e04766e4ff82cd52634208/gcc%2Ftree-sra.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b110e5283e368b5377e04766e4ff82cd52634208/gcc%2Ftree-sra.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.cc?ref=b110e5283e368b5377e04766e4ff82cd52634208", "patch": "@@ -1667,7 +1667,18 @@ build_ref_for_offset (location_t loc, tree base, poly_int64 offset,\n static tree\n build_reconstructed_reference (location_t, tree base, struct access *model)\n {\n-  tree expr = model->expr, prev_expr = NULL;\n+  tree expr = model->expr;\n+  /* We have to make sure to start just below the outermost union.  */\n+  tree start_expr = expr;\n+  while (handled_component_p (expr))\n+    {\n+      if (TREE_CODE (TREE_TYPE (TREE_OPERAND (expr, 0))) == UNION_TYPE)\n+\tstart_expr = expr;\n+      expr = TREE_OPERAND (expr, 0);\n+    }\n+\n+  expr = start_expr;\n+  tree prev_expr = NULL_TREE;\n   while (!types_compatible_p (TREE_TYPE (expr), TREE_TYPE (base)))\n     {\n       if (!handled_component_p (expr))"}]}