{"sha": "d033409e943fd9c584a3488df2709671e30555a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAzMzQwOWU5NDNmZDljNTg0YTM0ODhkZjI3MDk2NzFlMzA1NTVhNg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-05-10T20:03:57Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-05-10T20:03:57Z"}, "message": "c-parser.c (c_parser_declaration_or_fndef): Pass init_loc to maybe_warn_string_init.\n\n\t* c-parser.c (c_parser_declaration_or_fndef): Pass init_loc to\n\tmaybe_warn_string_init.\n\t(c_parser_postfix_expression_after_paren_type): Pass type_loc to\n\tmaybe_warn_string_init.\n\t* c-tree.h (maybe_warn_string_init): Update declaration.\n\t* c-typeck.c (maybe_warn_string_init): Add location parameter.\n\tCall pedwarn_init with loc instead of with input_location.\n\t(digest_init): Pass init_loc to maybe_warn_string_init.\n\t(pop_init_level): Call pedwarn_init with loc instead of with\n\tinput_location.\n\t(set_init_index): Likewise.\n\t(process_init_element): Likewise.\n\n\t* gcc.dg/pedwarn-init.c: New test.\n\t* gcc.dg/init-string-1.c: Adjust dg-error.\n\nFrom-SVN: r210300", "tree": {"sha": "fdf170b705a741473342bef1cba458b93231ff9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdf170b705a741473342bef1cba458b93231ff9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d033409e943fd9c584a3488df2709671e30555a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d033409e943fd9c584a3488df2709671e30555a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d033409e943fd9c584a3488df2709671e30555a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d033409e943fd9c584a3488df2709671e30555a6/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "00599202676518ba22834e3fb5d818dc9ff8fa98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00599202676518ba22834e3fb5d818dc9ff8fa98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00599202676518ba22834e3fb5d818dc9ff8fa98"}], "stats": {"total": 81, "additions": 60, "deletions": 21}, "files": [{"sha": "919b4ff5f5ff99612b12c3e860fca2e739404537", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d033409e943fd9c584a3488df2709671e30555a6/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d033409e943fd9c584a3488df2709671e30555a6/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=d033409e943fd9c584a3488df2709671e30555a6", "patch": "@@ -1,3 +1,18 @@\n+2014-05-10  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-parser.c (c_parser_declaration_or_fndef): Pass init_loc to\n+\tmaybe_warn_string_init.\n+\t(c_parser_postfix_expression_after_paren_type): Pass type_loc to\n+\tmaybe_warn_string_init.\n+\t* c-tree.h (maybe_warn_string_init): Update declaration.\n+\t* c-typeck.c (maybe_warn_string_init): Add location parameter.\n+\tCall pedwarn_init with loc instead of with input_location.\n+\t(digest_init): Pass init_loc to maybe_warn_string_init.\n+\t(pop_init_level): Call pedwarn_init with loc instead of with\n+\tinput_location.\n+\t(set_init_index): Likewise.\n+\t(process_init_element): Likewise.\n+\n 2014-05-09  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/61096"}, {"sha": "6e8554dc7d2cc2b94011c7e352b6d2128c99bc46", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d033409e943fd9c584a3488df2709671e30555a6/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d033409e943fd9c584a3488df2709671e30555a6/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=d033409e943fd9c584a3488df2709671e30555a6", "patch": "@@ -1777,9 +1777,9 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n \t\t}\n \t      if (d != error_mark_node)\n \t\t{\n-\t\t  maybe_warn_string_init (TREE_TYPE (d), init);\n+\t\t  maybe_warn_string_init (init_loc, TREE_TYPE (d), init);\n \t\t  finish_decl (d, init_loc, init.value,\n-\t\t      \t       init.original_type, asm_name);\n+\t\t\t       init.original_type, asm_name);\n \t\t}\n \t    }\n \t  else\n@@ -7599,7 +7599,7 @@ c_parser_postfix_expression_after_paren_type (c_parser *parser,\n     }\n   init = c_parser_braced_init (parser, type, false);\n   finish_init ();\n-  maybe_warn_string_init (type, init);\n+  maybe_warn_string_init (type_loc, type, init);\n \n   if (type != error_mark_node\n       && !ADDR_SPACE_GENERIC_P (TYPE_ADDR_SPACE (type))"}, {"sha": "e7dcb355e9ce098cb1c5de850dc2a3ecc0d1db84", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d033409e943fd9c584a3488df2709671e30555a6/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d033409e943fd9c584a3488df2709671e30555a6/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=d033409e943fd9c584a3488df2709671e30555a6", "patch": "@@ -602,7 +602,7 @@ extern tree build_compound_expr (location_t, tree, tree);\n extern tree c_cast_expr (location_t, struct c_type_name *, tree);\n extern tree build_c_cast (location_t, tree, tree);\n extern void store_init_value (location_t, tree, tree, tree);\n-extern void maybe_warn_string_init (tree, struct c_expr);\n+extern void maybe_warn_string_init (location_t, tree, struct c_expr);\n extern void start_init (tree, tree, int);\n extern void finish_init (void);\n extern void really_start_incremental_init (tree);"}, {"sha": "4b1fe66cd6b5c8279cfe3dfa33d40b01727757e8", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d033409e943fd9c584a3488df2709671e30555a6/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d033409e943fd9c584a3488df2709671e30555a6/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=d033409e943fd9c584a3488df2709671e30555a6", "patch": "@@ -5596,13 +5596,13 @@ warning_init (location_t loc, int opt, const char *gmsgid)\n    object of type TYPE.  */\n \n void\n-maybe_warn_string_init (tree type, struct c_expr expr)\n+maybe_warn_string_init (location_t loc, tree type, struct c_expr expr)\n {\n   if (pedantic\n       && TREE_CODE (type) == ARRAY_TYPE\n       && TREE_CODE (expr.value) == STRING_CST\n       && expr.original_code != STRING_CST)\n-    pedwarn_init (input_location, OPT_Wpedantic,\n+    pedwarn_init (loc, OPT_Wpedantic,\n \t\t  \"array initialized from parenthesized string constant\");\n }\n \n@@ -5657,14 +5657,14 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n   /* This macro is used to emit diagnostics to ensure that all format\n      strings are complete sentences, visible to gettext and checked at\n      compile time.  */\n-#define WARN_FOR_ASSIGNMENT(LOCATION, OPT, AR, AS, IN, RE)             \t \\\n+#define WARN_FOR_ASSIGNMENT(LOCATION, OPT, AR, AS, IN, RE)\t\t \\\n   do {                                                                   \\\n     switch (errtype)                                                     \\\n       {                                                                  \\\n       case ic_argpass:                                                   \\\n         if (pedwarn (LOCATION, OPT, AR, parmnum, rname))                 \\\n           inform ((fundecl && !DECL_IS_BUILTIN (fundecl))\t         \\\n-\t      \t  ? DECL_SOURCE_LOCATION (fundecl) : LOCATION,\t\t \\\n+\t\t  ? DECL_SOURCE_LOCATION (fundecl) : LOCATION,\t\t \\\n                   \"expected %qT but argument is of type %qT\",            \\\n                   type, rhstype);                                        \\\n         break;                                                           \\\n@@ -5675,7 +5675,7 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n         pedwarn_init (LOCATION, OPT, IN);                                \\\n         break;                                                           \\\n       case ic_return:                                                    \\\n-        pedwarn (LOCATION, OPT, RE);                                 \t \\\n+        pedwarn (LOCATION, OPT, RE);\t\t\t\t\t \\\n         break;                                                           \\\n       default:                                                           \\\n         gcc_unreachable ();                                              \\\n@@ -6541,7 +6541,7 @@ digest_init (location_t init_loc, tree type, tree init, tree origtype,\n \t  expr.value = inside_init;\n \t  expr.original_code = (strict_string ? STRING_CST : ERROR_MARK);\n \t  expr.original_type = NULL;\n-\t  maybe_warn_string_init (type, expr);\n+\t  maybe_warn_string_init (init_loc, type, expr);\n \n \t  if (TYPE_DOMAIN (type) && !TYPE_MAX_VALUE (TYPE_DOMAIN (type)))\n \t    pedwarn_init (init_loc, OPT_Wpedantic,\n@@ -7430,7 +7430,7 @@ pop_init_level (location_t loc, int implicit,\n \t  if (constructor_depth > 2)\n \t    error_init (loc, \"initialization of flexible array member in a nested context\");\n \t  else\n-\t    pedwarn_init (input_location, OPT_Wpedantic,\n+\t    pedwarn_init (loc, OPT_Wpedantic,\n \t\t\t  \"initialization of a flexible array member\");\n \n \t  /* We have already issued an error message for the existence\n@@ -7650,7 +7650,7 @@ push_range_stack (tree range_end, struct obstack * braced_init_obstack)\n \n void\n set_init_index (location_t loc, tree first, tree last,\n-\t\tstruct obstack * braced_init_obstack)\n+\t\tstruct obstack *braced_init_obstack)\n {\n   if (set_designator (loc, 1, braced_init_obstack))\n     return;\n@@ -7668,7 +7668,7 @@ set_init_index (location_t loc, tree first, tree last,\n     {\n       first = c_fully_fold (first, false, NULL);\n       if (TREE_CODE (first) == INTEGER_CST)\n-\tpedwarn_init (input_location, OPT_Wpedantic,\n+\tpedwarn_init (loc, OPT_Wpedantic,\n \t\t      \"array index in initializer is not \"\n \t\t      \"an integer constant expression\");\n     }\n@@ -7677,7 +7677,7 @@ set_init_index (location_t loc, tree first, tree last,\n     {\n       last = c_fully_fold (last, false, NULL);\n       if (TREE_CODE (last) == INTEGER_CST)\n-\tpedwarn_init (input_location, OPT_Wpedantic,\n+\tpedwarn_init (loc, OPT_Wpedantic,\n \t\t      \"array index in initializer is not \"\n \t\t      \"an integer constant expression\");\n     }\n@@ -8745,7 +8745,7 @@ process_init_element (location_t loc, struct c_expr value, bool implicit,\n \n \t  if (constructor_fields == 0)\n \t    {\n-\t      pedwarn_init (input_location, 0,\n+\t      pedwarn_init (loc, 0,\n \t\t\t    \"excess elements in union initializer\");\n \t      break;\n \t    }\n@@ -8835,7 +8835,7 @@ process_init_element (location_t loc, struct c_expr value, bool implicit,\n \t      && (tree_int_cst_lt (constructor_max_index, constructor_index)\n \t\t  || integer_all_onesp (constructor_max_index)))\n \t    {\n-\t      pedwarn_init (input_location, 0,\n+\t      pedwarn_init (loc, 0,\n \t\t\t    \"excess elements in array initializer\");\n \t      break;\n \t    }\n@@ -8869,7 +8869,7 @@ process_init_element (location_t loc, struct c_expr value, bool implicit,\n \t    always have a fixed size derived from their type.  */\n \t  if (tree_int_cst_lt (constructor_max_index, constructor_index))\n \t    {\n-\t      pedwarn_init (input_location, 0,\n+\t      pedwarn_init (loc, 0,\n \t\t\t    \"excess elements in vector initializer\");\n \t      break;\n \t    }\n@@ -8901,7 +8901,7 @@ process_init_element (location_t loc, struct c_expr value, bool implicit,\n       else if (constructor_type != error_mark_node\n \t       && constructor_fields == 0)\n \t{\n-\t  pedwarn_init (input_location, 0,\n+\t  pedwarn_init (loc, 0,\n \t\t\t\"excess elements in scalar initializer\");\n \t  break;\n \t}\n@@ -9413,7 +9413,7 @@ do_case (location_t loc, tree low_value, tree high_value)\n     {\n       low_value = c_fully_fold (low_value, false, NULL);\n       if (TREE_CODE (low_value) == INTEGER_CST)\n-\tpedwarn (input_location, OPT_Wpedantic,\n+\tpedwarn (loc, OPT_Wpedantic,\n \t\t \"case label is not an integer constant expression\");\n     }\n "}, {"sha": "8475e21838443707d211ed93ee899cb4b1d23f43", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d033409e943fd9c584a3488df2709671e30555a6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d033409e943fd9c584a3488df2709671e30555a6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d033409e943fd9c584a3488df2709671e30555a6", "patch": "@@ -1,3 +1,8 @@\n+2014-05-10  Marek Polacek  <polacek@redhat.com>\n+\n+\t* gcc.dg/pedwarn-init.c: New test.\n+\t* gcc.dg/init-string-1.c: Adjust dg-error.\n+\n 2014-05-10  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* lib/target-supports.exp"}, {"sha": "a33f741aea1f75a0b6edb68c111fba8b591ce5dd", "filename": "gcc/testsuite/gcc.dg/init-string-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d033409e943fd9c584a3488df2709671e30555a6/gcc%2Ftestsuite%2Fgcc.dg%2Finit-string-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d033409e943fd9c584a3488df2709671e30555a6/gcc%2Ftestsuite%2Fgcc.dg%2Finit-string-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finit-string-1.c?ref=d033409e943fd9c584a3488df2709671e30555a6", "patch": "@@ -30,7 +30,7 @@ struct s j = {\n   1,\n   (L\"j\")\n }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"parenthesized|near init\" \"paren array\" { target *-*-* } 32 } */\n+/* { dg-error \"parenthesized|near init\" \"paren array\" { target *-*-* } 31 } */\n struct s k = {\n   ((\"k\")), /* { dg-bogus \"warning\" \"warning in place of error\" } */\n   /* { dg-error \"parenthesized|near init\" \"paren array\" { target *-*-* } 35 } */\n@@ -48,7 +48,7 @@ struct s m = {\n   .c = L\"m\",\n   .a = (\"m\")\n }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"parenthesized|near init\" \"paren array\" { target *-*-* } 50 } */\n+/* { dg-error \"parenthesized|near init\" \"paren array\" { target *-*-* } 49 } */\n \n char *n = (char []){ \"n\" };\n "}, {"sha": "12611154bee30d1b5750a8fe02e202af9f0f2598", "filename": "gcc/testsuite/gcc.dg/pedwarn-init.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d033409e943fd9c584a3488df2709671e30555a6/gcc%2Ftestsuite%2Fgcc.dg%2Fpedwarn-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d033409e943fd9c584a3488df2709671e30555a6/gcc%2Ftestsuite%2Fgcc.dg%2Fpedwarn-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpedwarn-init.c?ref=d033409e943fd9c584a3488df2709671e30555a6", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wpedantic\" } */\n+/* { dg-prune-output \".*near initialization for.*\" } */\n+\n+typedef unsigned vec __attribute__ ((vector_size (2 * sizeof (int))));\n+union u { int a; double d; };\n+struct S { int i; char fam[]; };\n+\n+int i;\n+vec v = { 1, 2, 3 }; /* { dg-warning \"17:excess elements in vector initializer\" } */\n+int a1 = { 1, 2 }; /* { dg-warning \"15:excess elements in scalar initializer\" } */\n+int a2[2] = { 1, 2, 3 }; /* { dg-warning \"21:excess elements in array initializer\" } */\n+int a3[] = { [1 ? 1 : i] = 0 }; /* { dg-warning \"15:array index in initializer is not an integer constant expression\" } */\n+int a4[] = { [1 ... 1 ? 2 : i] = 0 }; /* { dg-warning \"15:array index in initializer is not an integer constant expression\" } */\n+char a5[] = (\"lol\"); /* { dg-warning \"13:array initialized from parenthesized string constant\" } */\n+char a6[] = { (\"foo\") }; /* { dg-warning \"13:array initialized from parenthesized string constant\" } */\n+char *a7 = (char []) { (\"bar\") }; /* { dg-warning \"12:array initialized from parenthesized string constant\" } */\n+union u u = { 1, 1.0 }; /* { dg-warning \"18:excess elements in union initializer\" } */\n+struct S s = { 1, 2 }; /* { dg-warning \"14:initialization of a flexible array member\" } */"}]}