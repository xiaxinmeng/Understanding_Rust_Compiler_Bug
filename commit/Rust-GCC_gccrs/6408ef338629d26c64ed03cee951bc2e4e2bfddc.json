{"sha": "6408ef338629d26c64ed03cee951bc2e4e2bfddc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQwOGVmMzM4NjI5ZDI2YzY0ZWQwM2NlZTk1MWJjMmU0ZTJiZmRkYw==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@apple.com", "date": "2004-09-08T00:49:44Z"}, "committer": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2004-09-08T00:49:44Z"}, "message": "Makefile.in (c-parse.o): Depend on $(C_COMMON_H).\n\n[gcc/ChangeLog]\n2004-09-07  Ziemowit Laski  <zlaski@apple.com>\n\n\t* Makefile.in (c-parse.o): Depend on $(C_COMMON_H).\n\t* c-parse.in: Include c-common.h instead of objc-act.h.\n\t(ivar_decl_list, ivar_decls, ivar_decl, ivars, ivar_declarator,\n\tmyparms, myparm): Remove %type declarations.\n\t(methodtype, optparms, OBJC_TYPE_QUAL, objc_quals, objc_qual,\n\tobjc_typename, objc_try_catch_stmt, optellipsis): Add %type\n\tdeclarations.\n\t(objc_inherit_code, objc_public_flag): Remove.\n\t(typespec_nonreserved_nonattr): Call\n\tobjc_get_protocol_qualified_type() instead of get_static_reference()\n\tand get_protocol_reference().\n\t(stmt_nocomp): Call grokparm() on @catch parameter.\n\t(objcdef): Move semantic action to objc_finish_implementation().\n\t(classdef): Move semantic action to objc_start_class_interface(),\n\tobjc_continue_interface(), objc_finish_interface(),\n\tobjc_start_class_implementation(), objc_continue_implementation(),\n\tobjc_start_category_interface() and\n\tobjc_start_category_implementation().\n\t(protocoldef): Move semantic actions to objc_start_protocol() and\n\tobjc_finish_interface().\n\t(ivar_decl_list): Remove nonterminal.\n\t(visibility_spec): Move semantic actions to objc_set_visibility().\n\t(ivar_decls): Remove assignment to $$.\n\t(ivar_decl): Rephrase in terms of component_decl; call\n\tobjc_add_instance_variable().\n\t(ivars, ivar_declarator): Remove nonterminals.\n\t(opt_semi): New nonterminal.\n\t(methodtype): Remove semantic actions.\n\t(methoddef): Move semantic actions to objc_set_method_type(),\n\tobjc_start_method_definition() and objc_finish_method_definition().\n\t(methodproto): Move semantic actions to objc_set_method_type() and\n\tobjc_add_method_declaration().\n\t(methoddecl): Use objc_typename instead of typename; move semantic\n\tactions to objc_build_method_signature().\n\t(optarglist, myxdecls, mydecl, myparms, myparm): Remove nonterminals.\n\t(optparmlist): Express in terms of optparms and optellipsis.\n\t(optparms, optellipsis, objc_qual, objc_quals, objc_typename): New\n\tnonterminals.\n\t(keyworddecl): Use objc_typename instead of typename.\n\t(rid_to_yy): Mark RID_IN, RID_OUT, RID_INOUT, RID_BYCOPY, RID_BYREF\n\tand RID_ONEWAY as returning OBJC_TYPE_QUAL to yyparse().\n\n[gcc/objc/ChangeLog]\n2004-09-07  Ziemowit Laski  <zlaski@apple.com>\n\n\t* Make-lang.in (objc/objc-parse.o): Depend on $(C_COMMON_H) instead of\n\tobjc/objc-act.h.\n\t(objc/objc-act.o): Depend on $(HASHTAB_H).\n\t* objc-act.c: Include hashtab.h; in ObjC++ mode, include cp-tree.h and\n\tobjcp-decl.h instead of c-tree.h.\n\t(build_module_descriptor, get_class_ivars, synth_id_with_class_suffix,\n\terror_with_ivar, gen_method_decl, gen_declaration, setup_string_decl,\n\tbuild_protocol_template): Adjust prototypes.\n\t(build_module_initializer_routine, start_class, continue_class,\n\tfinish_class, start_method_def, objc_start_function, start_protocol,\n\tbuild_method_decl, objc_add_method, add_instance_variable,\n\tbuild_ivar_reference, is_ivar, is_private, get_super_receiver,\n\tbuild_selector_table_decl, objc_push_parm, objc_get_parm_info,\n\tgen_type_name, gen_type_name_0, start_var_decl, finish_var_decl,\n\tcreate_field_decl): New prototypes.\n\t(objc_expand_function_end, comp_method_with_proto, objc_expr_last,\n\tgen_declaration_1, gen_declarator, is_complex_decl, adorn_decl,\n\tdefine_decl, create_builtin_decl, gen_declspecs): Remove prototypes.\n\t(TYPE_ID): Rename to OBJECT_TYPEDEF_NAME.\n\t(CLASS_TYPEDEF_NAME): New.\n\t(TAG_EXECCLASS): Change from a global variable to a #define.\n\t(TAG_RETURN_STRUCT): Delete.\n\t(TAG_GNUINIT): New, holds '__objc_gnu_init' name.\n\t(objc_inherit_code, objc_public_flag): New, moved from c-parse.in.\n\t(string_descriptor): New struct.\n\t(string_htab): New hash table.\n\t(string_hash, string_eq): New prototypes.\n\t(generate_struct_by_value_array): Call create_field_decl() instead of\n\tcreate_builtin_decl().\n\t(objc_init): Do not initialize objc_ellipsis_node or TAG_EXECCLASS;\n\tIn ObjC++ mode, call cxx_init() instead of c_objc_common_init().\n\t(objc_finish_file): In ObjC++, call instantiate_pending_templates()\n\tand cp_finish_file().\n\t(define_decl, get_static_reference, get_protocol_reference,\n\tcreate_builtin_decl): Remove functions.\n\t(objc_start_class_interface, objc_start_category_interface,\n\tobjc_start_protocol, objc_continue_interface, objc_finish_interface,\n\tobjc_start_class_implementation, objc_start_category_implementation,\n\tobjc_continue_implementation, objc_finish_implementation,\n\tobjc_set_visibility, objc_set_method_type,\n\tobjc_build_method_signature, objc_add_method_declaration,\n\tobjc_start_method_definition, objc_add_instance_variable,\n\tobjc_get_protocol_qualified_type, create_field_decl,\n\tstart_var_decl, finish_var_decl): New functions.\n\t(setup_string_decl): Simplify since it is only called once.\n\t(synth_module_prologue): Call build_class_template(); predefine 'id'\n\tand 'Class' as typedefs; rename 'temp_type' to 'type'; disable debug\n\thooks for duration of function; fix GNU runtime messenger signatures\n\tto correspond to reality; forward-declare '__objc_exec_class' for the\n\tGNU runtime; call build_selector_table_decl(); in ObjC++ mode, generate\n\t'extern \"C\" { ... }' wrappers around synthesized declarations; call\n\tbuild_protocol_template() and build_category_template().\n\t(string_hash, string_eq): New functions.\n\t(objc_build_string_object): Check metaclass correctness only once;\n\tstore string literals in hash table.\n\t(objc_build_constructor): Do not convert initializer elements;\n\tadjust for ObjC++ impedance mismatch.\n\t(build_objc_symtab_template): Call create_field_decl() instead of\n\tcreate_builtin_decl().\n\t(init_objc_symtab): Add missing conversion to initializer element.\n\t(build_metadata_decl): Call start_var_decl() instead of define_decl().\n\t(generate_objc_symtab_decl): Do not call build_category_template();\n\tcall start_var_decl() and finish_var_decl() instead of start_decl()\n\tand finish_decl().\n\t(build_module_descriptor): Call create_field_decl() instead of\n\tgrokfield(); call start_var_decl() and finish_var_decl() instead of\n\tstart_decl() and finish_decl(); always mark module descriptor as\n\tused; move GNU runtime-specific functionality to\n\tbuild_module_initializer_routine().\n\t(build_module_initializer_routine): New function, broken off of\n\tbuild_module_descriptor().\n\t(objc_static_init_needed_p, objc_generate_static_init_call): New\n\tfunctions.\n\t(generate_static_references, generate_strings,\n\tbuild_selector_translation_table, generate_descriptor_table,\n\tgenerate_ivars_list, generate_dispatch_table, generate_category): Call\n\tstart_var_decl() and finish_var_decl() instead of start_decl() and\n\tfinish_decl(); build a type directly instead of via groktypename().\n\t(build_selector_reference_decl, build_selector_table_decl,\n\tbuild_class_reference_decl, build_protocol_reference,\n\tgenerate_objc_image_info): Call start_var_decl() instead of\n\tbuild_decl().\n\t(build_selector_reference): For GNU runtime, do not call\n\tbuild_selector_reference_decl().\n\t(build_selector, build_typed_selector_reference): Always convert\n\tresult to the selector type.\n\t(add_objc_string): Cast return value to 'char *'.\n\t(build_method_prototype_template, build_selector_template,\n\tbuild_method_template): Use actual selector type for fields\n\tpointing to selectors.\n\t(finish_objc): For GNU runtime, call\n\tbuild_module_initializer_routine() after build_module_descriptor().\n\t(generate_protocol_list, generate_shared_structures): Call\n\tstart_var_decl() and finish_var_decl() instead of start_decl() and\n\tfinish_decl(); build a type directly instead of via\n\tgroktypename().\n\t(synth_id_with_class_suffix): Return a string.\n\t(get_arg_type_list): For instance methods, use the instance type for\n\t'self'; do not call groktypename_in_parm_context().\n\t(build_objc_string_decl): Squash redeclaration errors in ObjC++.\n\t(objc_is_class_name): Use OBJC_TYPE_NAME instead of TYPE_NAME;\n\thandle RECORD_TYPEs in ObjC as well as ObjC++.\n\t(objc_is_id): New function.\n\t(objc_is_object_ptr): Return the canonical type node.\n\t(objc_get_class_ivars): Simplify using get_class_ivars().\n\t(get_class_ivars): Remove second parameter; create a fresh copy\n\tof the ivar list for each call; do not check for existence of\n\tsuper class.\n\t(objc_eh_runtime_type): Mark #ifndef OBJCPLUS.\n\t(objc_init_exceptions): When using SJLJ-style exceptions, require\n\tthe use of '-fobjc-exceptions' flag; do not require it for DWARF-style\n\texceptions.\n\t(objc_build_exc_ptr, next_sjlj_build_try_catch_finally): Use\n\tobjc_object_type instead of objc_id_type.\n\t(objc_begin_catch_clause): Convert the incoming PARM_DECL into\n\ta VAR_DECL before placing it in the appropriate scope; do not\n\tcall define_decl(); adjust call to c_begin_compound_stmt();\n\tuse objc_object_type instead of objc_id_type.\n\t(build_next_objc_exception_stuff): Call create_field_decl() instead\n\tof create_builtin_decl(); construct type directly instead of calling\n\tgroktypename(); use OBJC_VOID_AT_END to mark end of function parameters.\n\t(build_private_template): Adjust call to get_class_ivars(); build\n\ta type directly instead of via groktypename().\n\t(build_protocol_template, build_method_prototype_list_template,\n\tbuild_method_prototype_template, build_category_template,\n\tbuild_selector_template, build_class_template, build_super_template,\n\tbuild_ivar_template, build_ivar_list_template,\n\tbuild_method_list_template, build_method_template):\n\tCall create_field_decl() instead of grokfield().\n\t(objc_method_parm_type): Do not call groktypename().\n\t(generate_descriptor_table): Call start_var_decl() and\n\tfinish_var_decl() instead of start_decl() and finish_decl().\n\t(generate_method_descriptors, build_protocol_initializer,\n\tgenerate_dispatch_tables, build_category_initializer,\n\tbuild_shared_structure_initializer): Do not call groktypename().\n\t(generate_protocols): Call start_var_decl() and finish_var_decl()\n\tinstead of start_decl() and finish_decl(); do not call groktypename().\n\t(error_with_ivar): Remove last parameter.\n\t(check_ivars): Do not iterate ovar CLASS_RAW_IVARS lists in addition\n\tto CLASS_IVARS lists; adjust calls to error_with_ivar().\n\t(generate_ivar_lists): Convert one of the initializer elements; do\n\tnot call groktypename().\n\t(get_arg_type_list, start_method_def, gen_method_def): Account for\n\tnew representation of variable arguments and '...' in Objective-C\n\tmethods; add Objective-C++ impedance matching code.\n\t(is_objc_type_qualifier): Remove function.\n\t(adjust_type_for_id_default): Simplify; there is no longer a need to\n\twade through declspecs.\n\t(lookup_interface, start_class, continue_class,\n\tfinish_class, start_method_def, start_protocol, build_method_decl,\n\tobjc_add_method, add_instance_variable, build_ivar_reference,\n\tis_ivar, is_private, get_super_receiver, objc_build_finally_epilogue):\n\tMake into static functions.\n\t(receiver_is_class_object): Use new IS_CLASS() macro.\n\t(objc_build_message_expr): Tweak ObjC++ message argument handling;\n\tcall objc_finish_message_expr() instead of finish_message_expr().\n\t(finish_message_expr): Rename to objc_finish_message_expr(); use\n\tOBJC_TYPE_NAME and OBJC_SET_TYPE_NAME macros instead of TYPE_NAME.\n\tcall gen_type_name() instead of gen_declaration(); call objc_is_id()\n\tinstead of using IS_ID and IS_CLASS; Use objc_class_name instead of\n\tcalling get_identifier(\"Class\"); handle CONVERT_EXPRs in receiver.\n\t(build_objc_method_call, warn_with_method): Do not call groktypename().\n\t(build_ivar_reference): Call convert() instead of clobbering in a\n\ttype.\n\t(hash_init): Initialize string_htab hash table.\n\t(add_instance_variable): Simplify parameter list; do not call grokfield();\n\tdo not populate CLASS_IVARS list.\n\t(start_class): Check for the existence of super class, if one was specified.\n\t(continue_class): Use CLASS_RAW_IVARS rather than CLASS_IVARS; do not\n\tcall build_class_template(); adjust call to get_class_ivars(); call\n\tbuild_decl(), pushdecl() and finish_decl() instead of define_decl().\n\t(finish_class): Call build_decl(), pushdecl() and finish_decl() instead\n\tof define_decl().\n\t(add_protocols): Use PROTOCOL_BINFO_ELTS for the tree vector size.\n\t(start_protocol): Do not call build_protocol_template(); use\n\tPROTOCOL_BINFO_ELTS for the tree vector size.\n\t(encode_type_qualifiers): Do not handle the 'const' qualifier here.\n\t(encode_pointer): Encode 'const char *' as 'r*', for backwards\n\tcompatibility.\n\t(encode_array): Use HOST_WIDE_INT_PRINT_DEC instead of \"%ld\".\n\t(encode_type): Handle the 'const' qualifier here.\n\t(objc_parmlist): New global variable, sued by objc_push_parm and\n\tobjc_get_parm_info().\n\t(objc_push_parm, objc_get_parm_info): New functions.\n\t(objc_expr_last): Remove function.\n\t(synth_self_and_ucmd_args): For instance methods, use the instance\n\ttype for 'self'; call objc_push_parm() instead of push_parm_decl().\n\t(start_method_def): Do not call push_scope(), declare_parm_level(),\n\tpop_scope(), push_parm_decl(), store_parm_decls() or objc_expr_last();\n\tjust use objc_push_parm() and objc_get_parm_info().\n\t(comp_method_with_proto): Remove function.\n\t(objc_types_are_equivalent): Strip away indirections before comparing\n\tunderlying types.\n\t(comp_proto_with_proto): Do not call groktypename(); types are no\n\tlonger in raw declspec format.\n\t(objc_start_function): New function.\n\t(really_start_method): Call comp_proto_with_proto() instead of\n\tcomp_method_with_proto(); call objc_start_function() instead of\n\thand-crafting a function declarator.\n\t(continue_method_def, objc_expand_function_end): Remove functions.\n\t(get_super_receiver): Call objc_get_current_scope() instead of\n\tget_current_scope(); reference 'super_class' field (instead of\n\t'class').\n\t(finish_method_def): Rename to objc_finish_method_definition() and\n\tadd a function decl parameter; move method encoding call from\n\tobjc_expand_function_end().\n\t(is_complex_decl, adorn_decl, gen_declarator, gen_declspecs,\n\tgen_declaration_1): Remove functions.\n\t(tmpbuf, RAW_DECLSPEC): Remove.\n\t(gen_declaration): Remove second parameter; simplify to deal\n\twith TYPE_P nodes instead of raw declspecs.\n\t(gen_type_name, gen_type_name_0): New functions.\n\t(gen_method_decl): Remove second parameter; call gen_type_name()\n\tinstead of gen_declaration_1().\n\t(dump_interface): Adjust calls to gen_declaration() and\n\tgen_method_decl(); do not allocate a separate string buffer.\n\t(init_objc): Allocate a larger string buffer to accommodate\n\tdump_interface(); adjust call to build_module_descriptor();\n\tadd call to build_module_initializer_routine() for the GNU\n\truntime.\n\t(generate_classref_translation_entry): Do not call start_decl(); call\n\tfinish_var_decl() instead of finish_decl(); call convert() instead of\n\tbuild_c_cast().\n\t* objc-act.h (CLASS_OWN_IVARS): Remove accessor.\n\t(CLASS_BINFO_ELTS): Reduce from 6 to 5, now that CLASS_OWN_IVARS is\n\tgone.\n\t(OCTI_GNU_INIT_DECL, GNU_INIT_decl): New.\n\t(OCTI_ELLIPSIS_NODE, objc_ellipsis_node): Remove.\n\t(OCTI_ID_ID, id_type, objc_id_id): Rename to OCTI_ID_NAME,\n\tobjc_object_type and objc_object_name, respectively.\n\t(OCTI_CLS_REF, OCTI_CLASS_NAME, objc_class_reference,\n\tobjc_class_name): New.\n\t(IS_CLASS): New macro.\n\t(IS_ID, IS_SUPER): Robustify.\n\t(OCTI_EXECCLASS_DECL, execclass_decl): New.\n\t(finish_file, start_class, continue_class, finish_class,\n\tstart_method_def, continue_method_def, finish_method_def,\n\tstart_protocol, finish_protocol, objc_build_throw_stmt,\n\tobjc_build_try_catch_finally_stmt, objc_build_synchronized_prologue,\n\tobjc_build_synchronized_epilogue, objc_build_try_prologue,\n\tobjc_build_try_epilogue, objc_build_catch_stmt, objc_build_catch_epilogue,\n\tobjc_build_finally_prologue, objc_build_finally_epilogue,\n\tis_ivar, is_private, is_public, add_instance_variable, objc_add_method,\n\tget_super_receiver, objc_clear_super_receiver, get_class_ivars_from_name,\n\tget_class_reference, get_static_reference, get_object_reference,\n\tbuild_message_expr, finish_message_expr, build_selector_expr,\n\tbuild_ivar_reference, build_keyword_decl, build_method_decl,\n\tbuild_protocol_expr, build_objc_string_object, objc_declare_alias,\n\tobjc_declare_class, objc_declare_protocols, objc_comptypes,\n\tobjc_check_decl, build_encode_expr): Remove prototypes.\n\t(imp_count, cat_count): Make GGC-aware.\n\t(OBJC_SET_TYPE_NAME): New macro.\n\nFrom-SVN: r87168", "tree": {"sha": "39e252e037a2e91d03654547f193dfc01d41993a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39e252e037a2e91d03654547f193dfc01d41993a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6408ef338629d26c64ed03cee951bc2e4e2bfddc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6408ef338629d26c64ed03cee951bc2e4e2bfddc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6408ef338629d26c64ed03cee951bc2e4e2bfddc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6408ef338629d26c64ed03cee951bc2e4e2bfddc/comments", "author": null, "committer": null, "parents": [{"sha": "8662eb14c0ef6531d7086ec08f5e52b87c472ede", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8662eb14c0ef6531d7086ec08f5e52b87c472ede", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8662eb14c0ef6531d7086ec08f5e52b87c472ede"}], "stats": {"total": 4315, "additions": 1887, "deletions": 2428}, "files": [{"sha": "a9fe8d307df76e5c3bf0c72d9aa35ceced711f96", "filename": "gcc/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6408ef338629d26c64ed03cee951bc2e4e2bfddc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6408ef338629d26c64ed03cee951bc2e4e2bfddc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6408ef338629d26c64ed03cee951bc2e4e2bfddc", "patch": "@@ -1,3 +1,47 @@\n+2004-09-07  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* Makefile.in (c-parse.o): Depend on $(C_COMMON_H).\n+\t* c-parse.in: Include c-common.h instead of objc-act.h.\n+\t(ivar_decl_list, ivar_decls, ivar_decl, ivars, ivar_declarator,\n+\tmyparms, myparm): Remove %type declarations.\n+\t(methodtype, optparms, OBJC_TYPE_QUAL, objc_quals, objc_qual,\n+\tobjc_typename, objc_try_catch_stmt, optellipsis): Add %type\n+\tdeclarations.\n+\t(objc_inherit_code, objc_public_flag): Remove.\n+\t(typespec_nonreserved_nonattr): Call\n+\tobjc_get_protocol_qualified_type() instead of get_static_reference()\n+\tand get_protocol_reference().\n+\t(stmt_nocomp): Call grokparm() on @catch parameter.\n+\t(objcdef): Move semantic action to objc_finish_implementation().\n+\t(classdef): Move semantic action to objc_start_class_interface(),\n+\tobjc_continue_interface(), objc_finish_interface(),\n+\tobjc_start_class_implementation(), objc_continue_implementation(),\n+\tobjc_start_category_interface() and\n+\tobjc_start_category_implementation().\n+\t(protocoldef): Move semantic actions to objc_start_protocol() and\n+\tobjc_finish_interface().\n+\t(ivar_decl_list): Remove nonterminal.\n+\t(visibility_spec): Move semantic actions to objc_set_visibility().\n+\t(ivar_decls): Remove assignment to $$.\n+\t(ivar_decl): Rephrase in terms of component_decl; call\n+\tobjc_add_instance_variable().\n+\t(ivars, ivar_declarator): Remove nonterminals.\n+\t(opt_semi): New nonterminal.\n+\t(methodtype): Remove semantic actions.\n+\t(methoddef): Move semantic actions to objc_set_method_type(),\n+\tobjc_start_method_definition() and objc_finish_method_definition().\n+\t(methodproto): Move semantic actions to objc_set_method_type() and\n+\tobjc_add_method_declaration().\n+\t(methoddecl): Use objc_typename instead of typename; move semantic\n+\tactions to objc_build_method_signature().\n+\t(optarglist, myxdecls, mydecl, myparms, myparm): Remove nonterminals.\n+\t(optparmlist): Express in terms of optparms and optellipsis.\n+\t(optparms, optellipsis, objc_qual, objc_quals, objc_typename): New\n+\tnonterminals.\n+\t(keyworddecl): Use objc_typename instead of typename.\n+\t(rid_to_yy): Mark RID_IN, RID_OUT, RID_INOUT, RID_BYCOPY, RID_BYREF\n+\tand RID_ONEWAY as returning OBJC_TYPE_QUAL to yyparse().\n+\n 2004-09-08  Alan Modra  <amodra@bigpond.net.au>\n \n \t* doc/tm.texi (MD_UNWIND_SUPPORT): Document."}, {"sha": "df01f9f1b295c03ee0be53f4c19c26d2a4fe2964", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6408ef338629d26c64ed03cee951bc2e4e2bfddc/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6408ef338629d26c64ed03cee951bc2e4e2bfddc/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=6408ef338629d26c64ed03cee951bc2e4e2bfddc", "patch": "@@ -1352,7 +1352,7 @@ c-errors.o: c-errors.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(C_TREE_H) $(FLAGS_H) $(DIAGNOSTIC_H) $(TM_P_H)\n c-parse.o : c-parse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(GGC_H) intl.h $(C_TREE_H) input.h $(FLAGS_H) toplev.h output.h $(CPPLIB_H) \\\n-    varray.h gt-c-parse.h langhooks.h\n+    varray.h gt-c-parse.h langhooks.h $(C_COMMON_H)\n \n srcextra: gcc.srcextra lang.srcextra\n "}, {"sha": "9774bcf461d4655c73446db58b3b927904c89928", "filename": "gcc/c-parse.in", "status": "modified", "additions": 113, "deletions": 198, "changes": 311, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6408ef338629d26c64ed03cee951bc2e4e2bfddc/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6408ef338629d26c64ed03cee951bc2e4e2bfddc/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=6408ef338629d26c64ed03cee951bc2e4e2bfddc", "patch": "@@ -50,10 +50,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"output.h\"\n #include \"toplev.h\"\n #include \"ggc.h\"\n-\n-@@ifobjc\n-#include \"objc-act.h\"\n-@@end_ifobjc\n+#include \"c-common.h\"\n \n /* Like YYERROR but do call yyerror.  */\n #define YYERROR1 { yyerror (\"syntax error\"); YYERROR; }\n@@ -179,7 +176,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* The Objective-C keywords.  These are included in C and in\n    Objective C, so that the token codes are the same in both.  */\n %token AT_INTERFACE AT_IMPLEMENTATION AT_END AT_SELECTOR AT_DEFS AT_ENCODE\n-%token CLASSNAME AT_PUBLIC AT_PRIVATE AT_PROTECTED AT_PROTOCOL \n+%token CLASSNAME AT_PUBLIC AT_PRIVATE AT_PROTECTED AT_PROTOCOL\n %token OBJECTNAME AT_CLASS AT_ALIAS\n %token AT_THROW AT_TRY AT_CATCH AT_FINALLY AT_SYNCHRONIZED\n %token OBJC_STRING\n@@ -248,17 +245,18 @@ do {\t\t\t\t\t\t\t\t\t\\\n @@ifobjc\n /* the Objective-C nonterminals */\n \n-%type <ttype> ivar_decl_list ivar_decls ivar_decl ivars ivar_declarator\n %type <ttype> methoddecl unaryselector keywordselector selector\n+%type <code> methodtype\n %type <ttype> keyworddecl receiver objcmessageexpr messageargs\n %type <ttype> keywordexpr keywordarglist keywordarg\n-%type <ttype> myparms myparm optparmlist reservedwords objcselectorexpr\n+%type <ttype> optparmlist optparms reservedwords objcselectorexpr\n %type <ttype> selectorarg keywordnamelist keywordname objcencodeexpr\n %type <ttype> non_empty_protocolrefs protocolrefs identifier_list objcprotocolexpr\n \n-%type <ttype> CLASSNAME OBJECTNAME OBJC_STRING\n+%type <ttype> CLASSNAME OBJECTNAME OBJC_STRING OBJC_TYPE_QUAL\n \n-%type <ttype> superclass\n+%type <ttype> superclass objc_quals objc_qual objc_typename\n+%type <itype> objc_try_catch_stmt optellipsis\n @@end_ifobjc\n \f\n %{\n@@ -315,8 +313,7 @@ static tree offsetof_base;\n @@ifobjc\n /* Objective-C specific parser/lexer information */\n \n-static enum tree_code objc_inherit_code;\n-static int objc_pq_context = 0, objc_public_flag = 0;\n+static int objc_pq_context = 0;\n \n /* The following flag is needed to contextualize ObjC lexical analysis.\n    In some cases (e.g., 'int NSObject;'), it is undesirable to bind\n@@ -1368,14 +1365,14 @@ typespec_nonreserved_nonattr:\n \t\t  $$ = lookup_name ($1); }\n @@ifobjc\n \t| CLASSNAME protocolrefs\n-\t\t{ $$ = get_static_reference ($1, $2); }\n+\t\t{ $$ = objc_get_protocol_qualified_type ($1, $2); }\n \t| OBJECTNAME protocolrefs\n-\t\t{ $$ = get_protocol_reference ($2); }\n+\t\t{ $$ = objc_get_protocol_qualified_type ($1, $2); }\n \n /* Make \"<SomeProtocol>\" equivalent to \"id <SomeProtocol>\"\n    - nisse@lysator.liu.se */\n         | non_empty_protocolrefs\n-                { $$ = get_protocol_reference ($1); }\n+                { $$ = objc_get_protocol_qualified_type (NULL_TREE, $1); }\n @@end_ifobjc\n \t| typeof '(' expr ')'\n \t\t{ skip_evaluation--;\n@@ -2315,7 +2312,7 @@ stmt_nocomp:\n \n objc_catch_prefix:\n \tAT_CATCH '(' parm ')'\n-\t\t{ objc_begin_catch_clause ($3); }\n+\t\t{ objc_begin_catch_clause (grokparm ($3)); }\n \t;\n \n objc_catch_clause:\n@@ -2645,14 +2642,7 @@ objcdef:\n \t| methoddef\n \t| AT_END\n \t\t{\n-\t\t  if (objc_implementation_context)\n-                    {\n-\t\t      finish_class (objc_implementation_context);\n-\t\t      objc_ivar_chain = NULL_TREE;\n-\t\t      objc_implementation_context = NULL_TREE;\n-\t\t    }\n-\t\t  else\n-\t\t    warning (\"`@end' must appear in an implementation context\");\n+\t\t  objc_finish_implementation ();\n \t\t}\n \t;\n \n@@ -2691,65 +2681,51 @@ class_ivars:\n classdef:\n \t  AT_INTERFACE identifier superclass protocolrefs\n \t\t{\n-\t\t  objc_interface_context = objc_ivar_context\n-\t\t    = start_class (CLASS_INTERFACE_TYPE, $2, $3, $4);\n-                  objc_public_flag = 0;\n+\t\t  objc_start_class_interface ($2, $3, $4);\n \t\t}\n \t  class_ivars\n \t\t{\n-                  continue_class (objc_interface_context);\n+\t\t  objc_continue_interface ();\n \t\t}\n \t  methodprotolist AT_END\n \t\t{\n-\t\t  finish_class (objc_interface_context);\n-\t\t  objc_interface_context = NULL_TREE;\n+\t\t  objc_finish_interface ();\n \t\t}\n \n \t| AT_IMPLEMENTATION identifier superclass\n \t\t{\n-\t\t  objc_implementation_context = objc_ivar_context\n-\t\t    = start_class (CLASS_IMPLEMENTATION_TYPE, $2, $3, NULL_TREE);\n-                  objc_public_flag = 0;\n+\t\t  objc_start_class_implementation ($2, $3);\n \t\t}\n \t  class_ivars\n \t\t{\n-                  objc_ivar_chain\n-\t\t    = continue_class (objc_implementation_context);\n+\t\t  objc_continue_implementation ();\n \t\t}\n \n \t| AT_INTERFACE identifier '(' identifier ')' protocolrefs\n \t\t{\n-\t\t  objc_interface_context\n-\t\t    = start_class (CATEGORY_INTERFACE_TYPE, $2, $4, $6);\n-                  continue_class (objc_interface_context);\n+\t\t  objc_start_category_interface ($2, $4, $6);\n \t\t}\n \t  methodprotolist AT_END\n \t\t{\n-\t\t  finish_class (objc_interface_context);\n-\t\t  objc_interface_context = NULL_TREE;\n+\t\t  objc_finish_interface ();\n \t\t}\n \n \t| AT_IMPLEMENTATION identifier '(' identifier ')'\n \t\t{\n-\t\t  objc_implementation_context\n-\t\t    = start_class (CATEGORY_IMPLEMENTATION_TYPE, $2, $4, NULL_TREE);\n-                  objc_ivar_chain\n-\t\t    = continue_class (objc_implementation_context);\n+\t\t  objc_start_category_implementation ($2, $4);\n \t\t}\n \t;\n \n protocoldef:\n \t  AT_PROTOCOL identifier protocolrefs\n \t\t{\n \t\t  objc_pq_context = 1;\n-\t\t  objc_interface_context\n-\t\t    = start_protocol(PROTOCOL_INTERFACE_TYPE, $2, $3);\n+\t\t  objc_start_protocol ($2, $3);\n \t\t}\n \t  methodprotolist AT_END\n \t\t{\n \t\t  objc_pq_context = 0;\n-\t\t  finish_protocol(objc_interface_context);\n-\t\t  objc_interface_context = NULL_TREE;\n+\t\t  objc_finish_interface ();\n \t\t}\n \t/* The @protocol forward-declaration production introduces a\n \t   reduce/reduce conflict on ';', which should be resolved in\n@@ -2779,109 +2755,67 @@ non_empty_protocolrefs:\n \t;\n \n ivar_decl_list:\n-          ivar_decl_list visibility_spec ivar_decls\n-        | ivar_decls\n+\t  /* empty */\n+        | ivar_decl_list visibility_spec ivar_decls\n         ;\n \n visibility_spec:\n-\t  AT_PRIVATE { objc_public_flag = 2; }\n-\t| AT_PROTECTED { objc_public_flag = 0; }\n-\t| AT_PUBLIC { objc_public_flag = 1; }\n+\t  /* empty */\n+\t| AT_PRIVATE { objc_set_visibility (2); }\n+\t| AT_PROTECTED { objc_set_visibility (0); }\n+\t| AT_PUBLIC { objc_set_visibility (1); }\n \t;\n \n ivar_decls:\n-          /* empty */\n-\t\t{\n-                  $$ = NULL_TREE;\n-                }\n+\t  /* empty */\n \t| ivar_decls ivar_decl ';'\n \t| ivar_decls ';'\n \t\t{\n-                  if (pedantic)\n+\t\t  if (pedantic)\n \t\t    pedwarn (\"extra semicolon in struct or union specified\");\n-                }\n+\t\t}\n \t;\n \n-\n-/* There is a shift-reduce conflict here, because `components' may\n-   start with a `typename'.  It happens that shifting (the default resolution)\n-   does the right thing, because it treats the `typename' as part of\n-   a `typed_typespecs'.\n-\n-   It is possible that this same technique would allow the distinction\n-   between `notype_initdecls' and `initdecls' to be eliminated.\n-   But I am being cautious and not trying it.  */\n-\n ivar_decl:\n-\tdeclspecs_nosc_ts setspecs ivars\n-\t        { $$ = $3;\n-\t\t  POP_DECLSPEC_STACK; }\n-\t| declspecs_nosc_nots setspecs ivars\n-\t\t{ $$ = $3;\n-\t\t  POP_DECLSPEC_STACK; }\n-\t| error\n-\t\t{ $$ = NULL_TREE; }\n-\t;\n+\tcomponent_decl\n+\t\t{\n+\t\t  /* Comma-separated ivars are chained together in\n+\t\t     reverse order; add them one by one.  */\n+\t\t  tree ivar = nreverse ($1);\n \n-ivars:\n-\t  /* empty */\n-\t\t{ $$ = NULL_TREE; }\n-\t| ivar_declarator\n-\t| ivars ',' maybe_resetattrs ivar_declarator\n+\t\t  for (; ivar; ivar = TREE_CHAIN (ivar))\n+\t\t    objc_add_instance_variable (copy_node (ivar));\n+\t\t}\n \t;\n \n-ivar_declarator:\n-\t  declarator\n-\t\t{\n-\t\t  $$ = add_instance_variable (objc_ivar_context,\n-\t\t\t\t\t      objc_public_flag,\n-\t\t\t\t\t      $1, current_declspecs,\n-\t\t\t\t\t      NULL_TREE);\n-                }\n-\t| declarator ':' expr_no_commas\n-\t\t{\n-\t\t  $$ = add_instance_variable (objc_ivar_context,\n-\t\t\t\t\t      objc_public_flag,\n-\t\t\t\t\t      $1, current_declspecs, $3.value);\n-                }\n-\t| ':' expr_no_commas\n+opt_semi:\n+\t  /* NULL */\n+\t| ';'\n \t\t{\n-\t\t  $$ = add_instance_variable (objc_ivar_context,\n-\t\t\t\t\t      objc_public_flag,\n-\t\t\t\t\t      NULL_TREE,\n-\t\t\t\t\t      current_declspecs, $2.value);\n-                }\n+\t\t  if (pedantic)\n+\t\t    pedwarn (\"extra semicolon in method definition specified\");\n+\t\t}\n \t;\n \n methodtype:\n \t  '+'\n-\t\t{ objc_inherit_code = CLASS_METHOD_DECL; }\n \t| '-'\n-\t\t{ objc_inherit_code = INSTANCE_METHOD_DECL; }\n \t;\n \n methoddef:\n \t  methodtype\n \t\t{\n+\t\t  objc_set_method_type ($1);\n \t\t  objc_pq_context = 1;\n-\t\t  if (!objc_implementation_context)\n-\t\t    fatal_error (\"method definition not in class context\");\n \t\t}\n-\t  methoddecl\n+\t  methoddecl opt_semi\n \t\t{\n \t\t  objc_pq_context = 0;\n-\t\t  objc_add_method (objc_implementation_context,\n-\t\t\t\t   $3,\n-\t\t\t\t   objc_inherit_code == CLASS_METHOD_DECL);\n-\t\t  start_method_def ($3);\n-\t\t}\n-\t  optarglist\n-\t\t{\n-\t\t  continue_method_def ();\n+\t\t  objc_start_method_definition ($3);\n \t\t}\n \t  compstmt_or_error\n \t\t{\n-\t\t  finish_method_def ();\n+\t\t  objc_finish_method_definition (current_function_decl);\n \t\t}\n \t;\n \n@@ -2903,116 +2837,71 @@ semi_or_error:\n methodproto:\n \t  methodtype\n \t\t{\n+\t\t  objc_set_method_type ($1);\n \t\t  /* Remember protocol qualifiers in prototypes.  */\n \t\t  objc_pq_context = 1;\n \t\t}\n \t  methoddecl\n \t\t{\n \t\t  /* Forget protocol qualifiers here.  */\n \t\t  objc_pq_context = 0;\n-\t\t  objc_add_method (objc_interface_context,\n-\t\t\t\t   $3,\n-\t\t\t\t   objc_inherit_code == CLASS_METHOD_DECL);\n+\t\t  objc_add_method_declaration ($3);\n \t\t}\n \t  semi_or_error\n \t;\n \n methoddecl:\n-\t  '(' typename ')' unaryselector\n+\t  '(' objc_typename ')' unaryselector\n \t\t{\n-\t\t  $$ = build_method_decl (objc_inherit_code, $2, $4, NULL_TREE);\n+\t\t  $$ = objc_build_method_signature ($2, $4, NULL_TREE);\n \t\t}\n \n \t| unaryselector\n \t\t{\n-\t\t  $$ = build_method_decl (objc_inherit_code, NULL_TREE, $1, NULL_TREE);\n+\t\t  $$ = objc_build_method_signature (NULL_TREE, $1, NULL_TREE);\n \t\t}\n \n-\t| '(' typename ')' keywordselector optparmlist\n+\t| '(' objc_typename ')' keywordselector optparmlist\n \t\t{\n-\t\t  $$ = build_method_decl (objc_inherit_code, $2, $4, $5);\n+\t\t  $$ = objc_build_method_signature ($2, $4, $5);\n \t\t}\n \n \t| keywordselector optparmlist\n \t\t{\n-\t\t  $$ = build_method_decl (objc_inherit_code, NULL_TREE, $1, $2);\n+\t\t  $$ = objc_build_method_signature (NULL_TREE, $1, $2);\n \t\t}\n \t;\n \n-/* \"optarglist\" assumes that start_method_def has already been called...\n-   if it is not, the \"xdecls\" will not be placed in the proper scope */\n-\n-optarglist:\n-\t  /* empty */\n-\t| ';' myxdecls\n-\t;\n-\n-/* to get around the following situation: \"int foo (int a) int b; {}\" that\n-   is synthesized when parsing \"- a:a b:b; id c; id d; { ... }\" */\n-\n-myxdecls:\n-\t  /* empty */\n-\t| mydecls\n-\t;\n-\n-mydecls:\n-\tmydecl\n-\t| errstmt\n-\t| mydecls mydecl\n-\t| mydecl errstmt\n-\t;\n-\n-mydecl:\n-\tdeclspecs_ts setspecs myparms ';'\n-\t\t{ POP_DECLSPEC_STACK; }\n-\t| declspecs_ts ';'\n-\t\t{ shadow_tag ($1); }\n-\t| declspecs_nots ';'\n-\t\t{ pedwarn (\"empty declaration\"); }\n-\t;\n-\n-myparms:\n-\tmyparm\n-\t\t{ push_parm_decl ($1); }\n-\t| myparms ',' myparm\n-\t\t{ push_parm_decl ($3); }\n-\t;\n+/* Optional ObjC method parameters follow the C syntax, and may include '...'\n+   to denote a variable number of arguments.  */\n \n-/* A single parameter declaration or parameter type name,\n-   as found in a parmlist. DOES NOT ALLOW AN INITIALIZER OR ASMSPEC */\n-\n-myparm:\n-\t  parm_declarator maybe_attribute\n-\t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n-\t\t\t\t\t\t\t $1),\n-\t\t\t\t\tchainon ($2, all_prefix_attributes)); }\n-\t| notype_declarator maybe_attribute\n-\t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n-\t\t\t\t\t\t\t $1),\n-\t\t\t\t\tchainon ($2, all_prefix_attributes)); }\n-\t| absdcl_maybe_attribute\n-\t\t{ $$ = $1; }\n+optparmlist:\n+\t  optparms optellipsis\n+\t\t{\n+\t\t  TREE_OVERFLOW ($$) = $2;\n+\t\t}\n \t;\n \n-optparmlist:\n-\t  /* empty */\n+optparms:\n+\t  /* NULL */\n \t\t{\n-\t\t  $$ = NULL_TREE;\n+\t\t  $$ = make_node (TREE_LIST);\n \t\t}\n-\t| ',' ELLIPSIS\n+\t| optparms ',' parm\n \t\t{\n-\t\t  /* oh what a kludge! */\n-\t\t  $$ = objc_ellipsis_node;\n+\t\t  $$ = chainon ($1, build_tree_list (NULL_TREE,\n+\t\t\t\t\t\t     grokparm ($3)));\n \t\t}\n-\t| ','\n+\t;\n+\t\n+optellipsis:\n+\t  /* NULL */\n \t\t{\n-\t\t  push_scope ();\n+\t\t  $$ = 0;\n \t\t}\n-\t  parmlist_2\n+\t| ',' ELLIPSIS\n \t\t{\n-\t\t  /* returns a tree list node generated by get_parm_info */\n-\t\t  $$ = $3;\n-\t\t  pop_scope ();\n+\t\t  $$ = 1;\n \t\t}\n \t;\n \n@@ -3038,14 +2927,40 @@ selector:\n \t;\n \n reservedwords:\n-\t  ENUM | STRUCT\t| UNION\t| IF | ELSE | WHILE | DO | FOR\n+\t  ENUM | STRUCT | UNION | IF | ELSE | WHILE | DO | FOR\n \t| SWITCH | CASE | DEFAULT | BREAK | CONTINUE | RETURN\n \t| GOTO | ASM_KEYWORD | SIZEOF | TYPEOF | ALIGNOF\n \t| TYPESPEC | TYPE_QUAL\n \t;\n \n+objc_qual:\n+\t  OBJC_TYPE_QUAL\n+\t;\n+\n+objc_quals:\n+\t  objc_quals objc_qual\n+\t\t{\n+\t\t  $$ = chainon ($1, build_tree_list (NULL_TREE, $2));\n+\t\t}\n+\t| /* NULL */\n+\t\t{\n+\t\t  $$ = NULL_TREE;\n+\t\t}\n+\t;\n+\n+objc_typename:\n+\t  objc_quals typename\n+\t\t{\n+\t\t  $$ = build_tree_list ($1, groktypename ($2));\n+\t\t}\n+\t| objc_quals\n+\t\t{\n+\t\t  $$ = build_tree_list ($1, NULL_TREE);\n+\t\t}\n+\t;\n+\n keyworddecl:\n-\t  selector ':' '(' typename ')' identifier\n+\t  selector ':' '(' objc_typename ')' identifier\n \t\t{\n \t\t  $$ = objc_build_keyword_decl ($1, $4, $6);\n \t\t}\n@@ -3055,7 +2970,7 @@ keyworddecl:\n \t\t  $$ = objc_build_keyword_decl ($1, NULL_TREE, $3);\n \t\t}\n \n-\t| ':' '(' typename ')' identifier\n+\t| ':' '(' objc_typename ')' identifier\n \t\t{\n \t\t  $$ = objc_build_keyword_decl (NULL_TREE, $3, $5);\n \t\t}\n@@ -3337,12 +3252,12 @@ static const short rid_to_yy[RID_MAX] =\n   /* RID_MUTABLE */\t0,\n \n   /* ObjC */\n-  /* RID_IN */\t\tTYPE_QUAL,\n-  /* RID_OUT */\t\tTYPE_QUAL,\n-  /* RID_INOUT */\tTYPE_QUAL,\n-  /* RID_BYCOPY */\tTYPE_QUAL,\n-  /* RID_BYREF */\tTYPE_QUAL,\n-  /* RID_ONEWAY */\tTYPE_QUAL,\n+  /* RID_IN */\t\tOBJC_TYPE_QUAL,\n+  /* RID_OUT */\t\tOBJC_TYPE_QUAL,\n+  /* RID_INOUT */\tOBJC_TYPE_QUAL,\n+  /* RID_BYCOPY */\tOBJC_TYPE_QUAL,\n+  /* RID_BYREF */\tOBJC_TYPE_QUAL,\n+  /* RID_ONEWAY */\tOBJC_TYPE_QUAL,\n \n   /* C */\n   /* RID_INT */\t\tTYPESPEC,"}, {"sha": "53e6a280ba176cb2d7589ec02a8d7e9ee4435961", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 255, "deletions": 0, "changes": 255, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6408ef338629d26c64ed03cee951bc2e4e2bfddc/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6408ef338629d26c64ed03cee951bc2e4e2bfddc/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=6408ef338629d26c64ed03cee951bc2e4e2bfddc", "patch": "@@ -1,3 +1,258 @@\n+2004-09-07  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* Make-lang.in (objc/objc-parse.o): Depend on $(C_COMMON_H) instead of\n+\tobjc/objc-act.h.\n+\t(objc/objc-act.o): Depend on $(HASHTAB_H).\n+\t* objc-act.c: Include hashtab.h; in ObjC++ mode, include cp-tree.h and\n+\tobjcp-decl.h instead of c-tree.h.\n+\t(build_module_descriptor, get_class_ivars, synth_id_with_class_suffix,\n+\terror_with_ivar, gen_method_decl, gen_declaration, setup_string_decl,\n+\tbuild_protocol_template): Adjust prototypes.\n+\t(build_module_initializer_routine, start_class, continue_class,\n+\tfinish_class, start_method_def, objc_start_function, start_protocol,\n+\tbuild_method_decl, objc_add_method, add_instance_variable,\n+\tbuild_ivar_reference, is_ivar, is_private, get_super_receiver,\n+\tbuild_selector_table_decl, objc_push_parm, objc_get_parm_info,\n+\tgen_type_name, gen_type_name_0, start_var_decl, finish_var_decl,\n+\tcreate_field_decl): New prototypes.\n+\t(objc_expand_function_end, comp_method_with_proto, objc_expr_last,\n+\tgen_declaration_1, gen_declarator, is_complex_decl, adorn_decl,\n+\tdefine_decl, create_builtin_decl, gen_declspecs): Remove prototypes.\n+\t(TYPE_ID): Rename to OBJECT_TYPEDEF_NAME.\n+\t(CLASS_TYPEDEF_NAME): New.\n+\t(TAG_EXECCLASS): Change from a global variable to a #define.\n+\t(TAG_RETURN_STRUCT): Delete.\n+\t(TAG_GNUINIT): New, holds '__objc_gnu_init' name.\n+\t(objc_inherit_code, objc_public_flag): New, moved from c-parse.in.\n+\t(string_descriptor): New struct.\n+\t(string_htab): New hash table.\n+\t(string_hash, string_eq): New prototypes.\n+\t(generate_struct_by_value_array): Call create_field_decl() instead of\n+\tcreate_builtin_decl().\n+\t(objc_init): Do not initialize objc_ellipsis_node or TAG_EXECCLASS;\n+\tIn ObjC++ mode, call cxx_init() instead of c_objc_common_init().\n+\t(objc_finish_file): In ObjC++, call instantiate_pending_templates()\n+\tand cp_finish_file().\n+\t(define_decl, get_static_reference, get_protocol_reference,\n+\tcreate_builtin_decl): Remove functions.\n+\t(objc_start_class_interface, objc_start_category_interface,\n+\tobjc_start_protocol, objc_continue_interface, objc_finish_interface,\n+\tobjc_start_class_implementation, objc_start_category_implementation,\n+\tobjc_continue_implementation, objc_finish_implementation,\n+\tobjc_set_visibility, objc_set_method_type,\n+\tobjc_build_method_signature, objc_add_method_declaration,\n+\tobjc_start_method_definition, objc_add_instance_variable,\n+\tobjc_get_protocol_qualified_type, create_field_decl,\n+\tstart_var_decl, finish_var_decl): New functions.\n+\t(setup_string_decl): Simplify since it is only called once.\n+\t(synth_module_prologue): Call build_class_template(); predefine 'id'\n+\tand 'Class' as typedefs; rename 'temp_type' to 'type'; disable debug\n+\thooks for duration of function; fix GNU runtime messenger signatures\n+\tto correspond to reality; forward-declare '__objc_exec_class' for the\n+\tGNU runtime; call build_selector_table_decl(); in ObjC++ mode, generate\n+\t'extern \"C\" { ... }' wrappers around synthesized declarations; call\n+\tbuild_protocol_template() and build_category_template().\n+\t(string_hash, string_eq): New functions.\n+\t(objc_build_string_object): Check metaclass correctness only once;\n+\tstore string literals in hash table.\n+\t(objc_build_constructor): Do not convert initializer elements;\n+\tadjust for ObjC++ impedance mismatch.\n+\t(build_objc_symtab_template): Call create_field_decl() instead of\n+\tcreate_builtin_decl().\n+\t(init_objc_symtab): Add missing conversion to initializer element.\n+\t(build_metadata_decl): Call start_var_decl() instead of define_decl().\n+\t(generate_objc_symtab_decl): Do not call build_category_template();\n+\tcall start_var_decl() and finish_var_decl() instead of start_decl()\n+\tand finish_decl().\n+\t(build_module_descriptor): Call create_field_decl() instead of\n+\tgrokfield(); call start_var_decl() and finish_var_decl() instead of\n+\tstart_decl() and finish_decl(); always mark module descriptor as\n+\tused; move GNU runtime-specific functionality to\n+\tbuild_module_initializer_routine().\n+\t(build_module_initializer_routine): New function, broken off of\n+\tbuild_module_descriptor().\n+\t(objc_static_init_needed_p, objc_generate_static_init_call): New\n+\tfunctions.\n+\t(generate_static_references, generate_strings,\n+\tbuild_selector_translation_table, generate_descriptor_table,\n+\tgenerate_ivars_list, generate_dispatch_table, generate_category): Call\n+\tstart_var_decl() and finish_var_decl() instead of start_decl() and\n+\tfinish_decl(); build a type directly instead of via groktypename().\n+\t(build_selector_reference_decl, build_selector_table_decl,\n+\tbuild_class_reference_decl, build_protocol_reference,\n+\tgenerate_objc_image_info): Call start_var_decl() instead of\n+\tbuild_decl().\n+\t(build_selector_reference): For GNU runtime, do not call\n+\tbuild_selector_reference_decl().\n+\t(build_selector, build_typed_selector_reference): Always convert\n+\tresult to the selector type.\n+\t(add_objc_string): Cast return value to 'char *'.\n+\t(build_method_prototype_template, build_selector_template,\n+\tbuild_method_template): Use actual selector type for fields\n+\tpointing to selectors.\n+\t(finish_objc): For GNU runtime, call\n+\tbuild_module_initializer_routine() after build_module_descriptor().\n+\t(generate_protocol_list, generate_shared_structures): Call\n+\tstart_var_decl() and finish_var_decl() instead of start_decl() and\n+\tfinish_decl(); build a type directly instead of via\n+\tgroktypename().\n+\t(synth_id_with_class_suffix): Return a string.\n+\t(get_arg_type_list): For instance methods, use the instance type for\n+\t'self'; do not call groktypename_in_parm_context().\n+\t(build_objc_string_decl): Squash redeclaration errors in ObjC++.\n+\t(objc_is_class_name): Use OBJC_TYPE_NAME instead of TYPE_NAME;\n+\thandle RECORD_TYPEs in ObjC as well as ObjC++.\n+\t(objc_is_id): New function.\n+\t(objc_is_object_ptr): Return the canonical type node.\n+\t(objc_get_class_ivars): Simplify using get_class_ivars().\n+\t(get_class_ivars): Remove second parameter; create a fresh copy\n+\tof the ivar list for each call; do not check for existence of\n+\tsuper class.\n+\t(objc_eh_runtime_type): Mark #ifndef OBJCPLUS.\n+\t(objc_init_exceptions): When using SJLJ-style exceptions, require\n+\tthe use of '-fobjc-exceptions' flag; do not require it for DWARF-style\n+\texceptions.\n+\t(objc_build_exc_ptr, next_sjlj_build_try_catch_finally): Use\n+\tobjc_object_type instead of objc_id_type.\n+\t(objc_begin_catch_clause): Convert the incoming PARM_DECL into\n+\ta VAR_DECL before placing it in the appropriate scope; do not\n+\tcall define_decl(); adjust call to c_begin_compound_stmt();\n+\tuse objc_object_type instead of objc_id_type.\n+\t(build_next_objc_exception_stuff): Call create_field_decl() instead\n+\tof create_builtin_decl(); construct type directly instead of calling\n+\tgroktypename(); use OBJC_VOID_AT_END to mark end of function parameters.\n+\t(build_private_template): Adjust call to get_class_ivars(); build\n+\ta type directly instead of via groktypename().\n+\t(build_protocol_template, build_method_prototype_list_template,\n+\tbuild_method_prototype_template, build_category_template,\n+\tbuild_selector_template, build_class_template, build_super_template,\n+\tbuild_ivar_template, build_ivar_list_template,\n+\tbuild_method_list_template, build_method_template):\n+\tCall create_field_decl() instead of grokfield().\n+\t(objc_method_parm_type): Do not call groktypename().\n+\t(generate_descriptor_table): Call start_var_decl() and\n+\tfinish_var_decl() instead of start_decl() and finish_decl().\n+\t(generate_method_descriptors, build_protocol_initializer,\n+\tgenerate_dispatch_tables, build_category_initializer,\n+\tbuild_shared_structure_initializer): Do not call groktypename().\n+\t(generate_protocols): Call start_var_decl() and finish_var_decl()\n+\tinstead of start_decl() and finish_decl(); do not call groktypename().\n+\t(error_with_ivar): Remove last parameter.\n+\t(check_ivars): Do not iterate ovar CLASS_RAW_IVARS lists in addition\n+\tto CLASS_IVARS lists; adjust calls to error_with_ivar().\n+\t(generate_ivar_lists): Convert one of the initializer elements; do\n+\tnot call groktypename().\n+\t(get_arg_type_list, start_method_def, gen_method_def): Account for\n+\tnew representation of variable arguments and '...' in Objective-C\n+\tmethods; add Objective-C++ impedance matching code.\n+\t(is_objc_type_qualifier): Remove function.\n+\t(adjust_type_for_id_default): Simplify; there is no longer a need to\n+\twade through declspecs.\n+\t(lookup_interface, start_class, continue_class,\n+\tfinish_class, start_method_def, start_protocol, build_method_decl,\n+\tobjc_add_method, add_instance_variable, build_ivar_reference,\n+\tis_ivar, is_private, get_super_receiver, objc_build_finally_epilogue):\n+\tMake into static functions.\n+\t(receiver_is_class_object): Use new IS_CLASS() macro.\n+\t(objc_build_message_expr): Tweak ObjC++ message argument handling;\n+\tcall objc_finish_message_expr() instead of finish_message_expr().\n+\t(finish_message_expr): Rename to objc_finish_message_expr(); use\n+\tOBJC_TYPE_NAME and OBJC_SET_TYPE_NAME macros instead of TYPE_NAME.\n+\tcall gen_type_name() instead of gen_declaration(); call objc_is_id()\n+\tinstead of using IS_ID and IS_CLASS; Use objc_class_name instead of\n+\tcalling get_identifier(\"Class\"); handle CONVERT_EXPRs in receiver.\n+\t(build_objc_method_call, warn_with_method): Do not call groktypename().\n+\t(build_ivar_reference): Call convert() instead of clobbering in a\n+\ttype.\n+\t(hash_init): Initialize string_htab hash table.\n+\t(add_instance_variable): Simplify parameter list; do not call grokfield();\n+\tdo not populate CLASS_IVARS list.\n+\t(start_class): Check for the existence of super class, if one was specified.\n+\t(continue_class): Use CLASS_RAW_IVARS rather than CLASS_IVARS; do not\n+\tcall build_class_template(); adjust call to get_class_ivars(); call\n+\tbuild_decl(), pushdecl() and finish_decl() instead of define_decl().\n+\t(finish_class): Call build_decl(), pushdecl() and finish_decl() instead\n+\tof define_decl().\n+\t(add_protocols): Use PROTOCOL_BINFO_ELTS for the tree vector size.\n+\t(start_protocol): Do not call build_protocol_template(); use\n+\tPROTOCOL_BINFO_ELTS for the tree vector size.\n+\t(encode_type_qualifiers): Do not handle the 'const' qualifier here.\n+\t(encode_pointer): Encode 'const char *' as 'r*', for backwards\n+\tcompatibility.\n+\t(encode_array): Use HOST_WIDE_INT_PRINT_DEC instead of \"%ld\".\n+\t(encode_type): Handle the 'const' qualifier here.\n+\t(objc_parmlist): New global variable, sued by objc_push_parm and\n+\tobjc_get_parm_info().\n+\t(objc_push_parm, objc_get_parm_info): New functions.\n+\t(objc_expr_last): Remove function.\n+\t(synth_self_and_ucmd_args): For instance methods, use the instance\n+\ttype for 'self'; call objc_push_parm() instead of push_parm_decl().\n+\t(start_method_def): Do not call push_scope(), declare_parm_level(),\n+\tpop_scope(), push_parm_decl(), store_parm_decls() or objc_expr_last();\n+\tjust use objc_push_parm() and objc_get_parm_info().\n+\t(comp_method_with_proto): Remove function.\n+\t(objc_types_are_equivalent): Strip away indirections before comparing\n+\tunderlying types.\n+\t(comp_proto_with_proto): Do not call groktypename(); types are no\n+\tlonger in raw declspec format.\n+\t(objc_start_function): New function.\n+\t(really_start_method): Call comp_proto_with_proto() instead of\n+\tcomp_method_with_proto(); call objc_start_function() instead of\n+\thand-crafting a function declarator.\n+\t(continue_method_def, objc_expand_function_end): Remove functions.\n+\t(get_super_receiver): Call objc_get_current_scope() instead of\n+\tget_current_scope(); reference 'super_class' field (instead of\n+\t'class').\n+\t(finish_method_def): Rename to objc_finish_method_definition() and\n+\tadd a function decl parameter; move method encoding call from\n+\tobjc_expand_function_end().\n+\t(is_complex_decl, adorn_decl, gen_declarator, gen_declspecs,\n+\tgen_declaration_1): Remove functions.\n+\t(tmpbuf, RAW_DECLSPEC): Remove.\n+\t(gen_declaration): Remove second parameter; simplify to deal\n+\twith TYPE_P nodes instead of raw declspecs.\n+\t(gen_type_name, gen_type_name_0): New functions.\n+\t(gen_method_decl): Remove second parameter; call gen_type_name()\n+\tinstead of gen_declaration_1().\n+\t(dump_interface): Adjust calls to gen_declaration() and \n+\tgen_method_decl(); do not allocate a separate string buffer.\n+\t(init_objc): Allocate a larger string buffer to accommodate\n+\tdump_interface(); adjust call to build_module_descriptor();\n+\tadd call to build_module_initializer_routine() for the GNU\n+\truntime.\n+\t(generate_classref_translation_entry): Do not call start_decl(); call\n+\tfinish_var_decl() instead of finish_decl(); call convert() instead of\n+\tbuild_c_cast().\n+\t* objc-act.h (CLASS_OWN_IVARS): Remove accessor.\n+\t(CLASS_BINFO_ELTS): Reduce from 6 to 5, now that CLASS_OWN_IVARS is\n+\tgone.\n+\t(OCTI_GNU_INIT_DECL, GNU_INIT_decl): New.\n+\t(OCTI_ELLIPSIS_NODE, objc_ellipsis_node): Remove.\n+\t(OCTI_ID_ID, id_type, objc_id_id): Rename to OCTI_ID_NAME,\n+\tobjc_object_type and objc_object_name, respectively.\n+\t(OCTI_CLS_REF, OCTI_CLASS_NAME, objc_class_reference,\n+\tobjc_class_name): New.\n+\t(IS_CLASS): New macro.\n+\t(IS_ID, IS_SUPER): Robustify.\n+\t(OCTI_EXECCLASS_DECL, execclass_decl): New.\n+\t(finish_file, start_class, continue_class, finish_class,\n+\tstart_method_def, continue_method_def, finish_method_def,\n+\tstart_protocol, finish_protocol, objc_build_throw_stmt,\n+\tobjc_build_try_catch_finally_stmt, objc_build_synchronized_prologue,\n+\tobjc_build_synchronized_epilogue, objc_build_try_prologue,\n+\tobjc_build_try_epilogue, objc_build_catch_stmt, objc_build_catch_epilogue,\n+\tobjc_build_finally_prologue, objc_build_finally_epilogue,\n+\tis_ivar, is_private, is_public, add_instance_variable, objc_add_method,\n+\tget_super_receiver, objc_clear_super_receiver, get_class_ivars_from_name,\n+\tget_class_reference, get_static_reference, get_object_reference,\n+\tbuild_message_expr, finish_message_expr, build_selector_expr,\n+\tbuild_ivar_reference, build_keyword_decl, build_method_decl,\n+\tbuild_protocol_expr, build_objc_string_object, objc_declare_alias,\n+\tobjc_declare_class, objc_declare_protocols, objc_comptypes,\n+\tobjc_check_decl, build_encode_expr): Remove prototypes.\n+\t(imp_count, cat_count): Make GGC-aware.\n+\t(OBJC_SET_TYPE_NAME): New macro.\n+\t\n 2004-09-03  Ziemowit Laski  <zlaski@apple.com>\n \n \t* config-lang.in: Update copyright notice."}, {"sha": "23bd9cd3628c764b3245b429e264c2f2fee817d0", "filename": "gcc/objc/Make-lang.in", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6408ef338629d26c64ed03cee951bc2e4e2bfddc/gcc%2Fobjc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6408ef338629d26c64ed03cee951bc2e4e2bfddc/gcc%2Fobjc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMake-lang.in?ref=6408ef338629d26c64ed03cee951bc2e4e2bfddc", "patch": "@@ -66,18 +66,17 @@ objc/objc-lang.o : objc/objc-lang.c \\\n \n objc/objc-parse.o : objc/objc-parse.c \\\n    $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_TREE_H) \\\n-   toplev.h $(GGC_H) c-pragma.h input.h flags.h output.h objc/objc-act.h \\\n-   langhooks.h\n+   toplev.h $(GGC_H) c-pragma.h input.h flags.h output.h langhooks.h $(C_COMMON_H)\n \n objc/objc-act.o : objc/objc-act.c \\\n    $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) $(TM_P_H) \\\n    $(EXPR_H) $(TARGET_H) $(C_TREE_H) diagnostic.h toplev.h flags.h \\\n    objc/objc-act.h input.h function.h output.h debug.h langhooks.h \\\n-   $(LANGHOOKS_DEF_H) gt-objc-objc-act.h\n+   $(LANGHOOKS_DEF_H) $(HASHTAB_H) gt-objc-objc-act.h\n \n objc.srcextra: objc/objc-parse.c objc/objc-parse.y\n \t-cp -p $^ $(srcdir)/objc\n- \n+\n objc/objc-parse.c : objc/objc-parse.y\n \t-$(BISON) $(BISONFLAGS) -o $@ $<\n "}, {"sha": "00dd3dfe95d484282c19531b2d8500a26ce5e43f", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1443, "deletions": 2159, "changes": 3602, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6408ef338629d26c64ed03cee951bc2e4e2bfddc/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6408ef338629d26c64ed03cee951bc2e4e2bfddc/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=6408ef338629d26c64ed03cee951bc2e4e2bfddc"}, {"sha": "b80761d310feb120adebf192c25d957f32b05dba", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 28, "deletions": 66, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6408ef338629d26c64ed03cee951bc2e4e2bfddc/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6408ef338629d26c64ed03cee951bc2e4e2bfddc/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=6408ef338629d26c64ed03cee951bc2e4e2bfddc", "patch": "@@ -28,61 +28,12 @@ bool objc_init (void);\n const char *objc_printable_name (tree, int);\n void objc_finish_file (void);\n \n-/* used by yyparse */\n-\n-tree start_class (enum tree_code, tree, tree, tree);\n-tree continue_class (tree);\n-void finish_class (tree);\n-void start_method_def (tree);\n-void continue_method_def (void);\n-void finish_method_def (void);\n-tree start_protocol (enum tree_code, tree, tree);\n-void finish_protocol (tree);\n-\n-tree objc_build_throw_stmt (tree);\n-void objc_begin_try_stmt (location_t, tree);\n-void objc_begin_catch_clause (tree);\n-void objc_finish_catch_clause (void);\n-void objc_build_finally_clause (location_t, tree);\n-void objc_finish_try_stmt (void);\n-void objc_build_synchronized (location_t, tree, tree);\n-\n-tree is_ivar (tree, tree);\n-int is_private (tree);\n-int objc_is_public (tree, tree);\n-tree add_instance_variable (tree, int, tree, tree, tree);\n-tree objc_add_method (tree, tree, int);\n-tree get_super_receiver (void);\n-void objc_clear_super_receiver (void);\n-tree objc_get_class_ivars (tree);\n-tree objc_get_class_reference (tree);\n-tree get_static_reference (tree, tree);\n-tree get_protocol_reference (tree);\n-tree objc_build_message_expr (tree);\n-tree finish_message_expr (tree, tree, tree);\n-tree objc_build_selector_expr (tree);\n-tree build_ivar_reference (tree);\n-tree objc_build_keyword_decl (tree, tree, tree);\n-tree build_method_decl (enum tree_code, tree, tree, tree);\n-tree objc_build_protocol_expr (tree);\n-tree objc_build_string_object (tree);\n-\n-void objc_declare_alias (tree, tree);\n-void objc_declare_class (tree);\n-void objc_declare_protocols (tree);\n-\n-/* the following routines are used to implement statically typed objects */\n-\n-int objc_comptypes (tree, tree, int);\n-void objc_check_decl (tree);\n-\n-/* NeXT extensions */\n-\n-tree objc_build_encode_expr (tree);\n+/* NB: The remaining public functions are prototyped in c-common.h, for the\n+   benefit of stub-objc.c and objc-act.c.  */\n \n /* Objective-C structures */\n \n-#define CLASS_LANG_SLOT_ELTS\t\t6\n+#define CLASS_LANG_SLOT_ELTS\t\t5\n #define PROTOCOL_LANG_SLOT_ELTS\t\t2\n \n /* KEYWORD_DECL */\n@@ -108,13 +59,13 @@ tree objc_build_encode_expr (tree);\n #define CLASS_STATIC_TEMPLATE(CLASS) TREE_VEC_ELT (TYPE_LANG_SLOT_1 (CLASS), 2)\n #define CLASS_CATEGORY_LIST(CLASS) TREE_VEC_ELT (TYPE_LANG_SLOT_1 (CLASS), 3)\n #define CLASS_PROTOCOL_LIST(CLASS) TREE_VEC_ELT (TYPE_LANG_SLOT_1 (CLASS), 4)\n-#define CLASS_OWN_IVARS(CLASS) TREE_VEC_ELT (TYPE_LANG_SLOT_1 (CLASS), 5)\n #define PROTOCOL_NAME(CLASS) ((CLASS)->type.name)\n #define PROTOCOL_LIST(CLASS) TREE_VEC_ELT (TYPE_LANG_SLOT_1 (CLASS), 0)\n #define PROTOCOL_NST_METHODS(CLASS) ((CLASS)->type.minval)\n #define PROTOCOL_CLS_METHODS(CLASS) ((CLASS)->type.maxval)\n #define PROTOCOL_FORWARD_DECL(CLASS) TREE_VEC_ELT (TYPE_LANG_SLOT_1 (CLASS), 1)\n #define PROTOCOL_DEFINED(CLASS) TREE_USED (CLASS)\n+\n /* We need to distinguish TYPE_PROTOCOL_LISTs from TYPE_CONTEXTs, both of which\n    are stored in the same accessor slot.  */\n #define TYPE_PROTOCOL_LIST(TYPE)\t\t\t\t\\\n@@ -123,12 +74,11 @@ tree objc_build_encode_expr (tree);\n \t ? (TYPE)->type.context : NULL_TREE)\n #define SET_TYPE_PROTOCOL_LIST(TYPE, P) (TYPE_CHECK (TYPE)->type.context = (P))\n \n-/* Set by `continue_class' and checked by `objc_is_public'.  */\n-\n-#define TREE_STATIC_TEMPLATE(record_type) (TREE_PRIVATE (record_type))\n+#define TREE_STATIC_TEMPLATE(record_type) (TREE_PUBLIC (record_type))\n #define TYPED_OBJECT(type) \\\n        (TREE_CODE (type) == RECORD_TYPE && TREE_STATIC_TEMPLATE (type))\n #define OBJC_TYPE_NAME(type) TYPE_NAME(type)\n+#define OBJC_SET_TYPE_NAME(type, name) (TYPE_NAME (type) = name)\n \n /* Define the Objective-C or Objective-C++ language-specific tree codes.  */\n \n@@ -182,8 +132,11 @@ struct imp_entry GTY(())\n };\n \n extern GTY(()) struct imp_entry *imp_list;\n-extern int imp_count;\t/* `@implementation' */\n-extern int cat_count;\t/* `@category' */\n+extern GTY(()) int imp_count;\t/* `@implementation' */\n+extern GTY(()) int cat_count;\t/* `@category' */\n+\n+extern GTY(()) enum tree_code objc_inherit_code;\n+extern GTY(()) int objc_public_flag;\n \n /* Objective-C/Objective-C++ global tree enumeration.  */\n \n@@ -194,7 +147,6 @@ enum objc_tree_index\n     OCTI_SELF_ID,\n     OCTI_UCMD_ID,\n     OCTI_UNUSED_LIST,\n-    OCTI_ELLIPSIS_NODE,\n \n     OCTI_SELF_DECL,\n     OCTI_UMSG_DECL,\n@@ -231,6 +183,7 @@ enum objc_tree_index\n     OCTI_MCLS_DECL,\n     OCTI_SEL_TABLE_DECL,\n     OCTI_MODULES_DECL,\n+    OCTI_GNU_INIT_DECL,\n \n     OCTI_INTF_CTX,\n     OCTI_IMPL_CTX,\n@@ -251,13 +204,15 @@ enum objc_tree_index\n     OCTI_MODULE_TEMPL,\n     OCTI_SUPER_TEMPL,\n     OCTI_OBJ_REF,\n+    OCTI_CLS_REF,\n     OCTI_METH_PROTO_TEMPL,\n     OCTI_FUNCTION1_TEMPL,\n     OCTI_FUNCTION2_TEMPL,\n \n     OCTI_OBJ_ID,\n     OCTI_CLS_ID,\n-    OCTI_ID_ID,\n+    OCTI_ID_NAME,\n+    OCTI_CLASS_NAME,\n     OCTI_CNST_STR_ID,\n     OCTI_CNST_STR_TYPE,\n     OCTI_CNST_STR_GLOB_ID,\n@@ -280,6 +235,7 @@ enum objc_tree_index\n     OCTI_RETHROW_EXCEPTION_DECL,\n     OCTI_EVAL_ONCE_DECL,\n     OCTI_CATCH_TYPE,\n+    OCTI_EXECCLASS_DECL,\n \n     OCTI_MAX\n };\n@@ -297,7 +253,6 @@ extern GTY(()) tree objc_global_trees[OCTI_MAX];\n #define self_id\t\t\tobjc_global_trees[OCTI_SELF_ID]\n #define ucmd_id\t\t\tobjc_global_trees[OCTI_UCMD_ID]\n #define unused_list\t\tobjc_global_trees[OCTI_UNUSED_LIST]\n-#define objc_ellipsis_node\tobjc_global_trees[OCTI_ELLIPSIS_NODE]\n \n #define self_decl\t\tobjc_global_trees[OCTI_SELF_DECL]\n #define umsg_decl\t\tobjc_global_trees[OCTI_UMSG_DECL]\n@@ -309,20 +264,22 @@ extern GTY(()) tree objc_global_trees[OCTI_MAX];\n \t\t\t\tobjc_global_trees[OCTI_GET_MCLASS_DECL]\n \n #define objc_super_type\t\tobjc_global_trees[OCTI_SUPER_TYPE]\n-#define objc_selector_type\tobjc_global_trees[OCTI_SEL_TYPE]\n-#define objc_id_type\t\tobjc_global_trees[OCTI_ID_TYPE]\n+#define objc_selector_type\t\tobjc_global_trees[OCTI_SEL_TYPE]\n+#define objc_object_type\tobjc_global_trees[OCTI_ID_TYPE]\n #define objc_class_type\t\tobjc_global_trees[OCTI_CLS_TYPE]\n #define objc_instance_type\tobjc_global_trees[OCTI_NST_TYPE]\n #define objc_protocol_type\tobjc_global_trees[OCTI_PROTO_TYPE]\n \n /* Type checking macros.  */\n \n #define IS_ID(TYPE) \\\n-  (TYPE_MAIN_VARIANT (TYPE) == TYPE_MAIN_VARIANT (objc_id_type))\n+  (POINTER_TYPE_P (TYPE) && TREE_TYPE (TYPE) == TREE_TYPE (objc_object_type))\n+#define IS_CLASS(TYPE) \\\n+  (POINTER_TYPE_P (TYPE) && TREE_TYPE (TYPE) == TREE_TYPE (objc_class_type))\n #define IS_PROTOCOL_QUALIFIED_ID(TYPE) \\\n   (IS_ID (TYPE) && TYPE_PROTOCOL_LIST (TYPE))\n #define IS_SUPER(TYPE) \\\n-  (TREE_CODE (TYPE) == POINTER_TYPE && TREE_TYPE (TYPE) == objc_super_template)\n+  (POINTER_TYPE_P (TYPE) && TREE_TYPE (TYPE) == objc_super_template)\n \n #define class_chain\t\tobjc_global_trees[OCTI_CLS_CHAIN]\n #define alias_chain\t\tobjc_global_trees[OCTI_ALIAS_CHAIN]\n@@ -355,6 +312,7 @@ extern GTY(()) tree objc_global_trees[OCTI_MAX];\n #define UOBJC_METACLASS_decl\t\tobjc_global_trees[OCTI_MCLS_DECL]\n #define UOBJC_SELECTOR_TABLE_decl\tobjc_global_trees[OCTI_SEL_TABLE_DECL]\n #define UOBJC_MODULES_decl\t\tobjc_global_trees[OCTI_MODULES_DECL]\n+#define GNU_INIT_decl\t\t\tobjc_global_trees[OCTI_GNU_INIT_DECL]\n \n /* The following are used when compiling a class implementation.\n    implementation_template will normally be an interface, however if\n@@ -400,20 +358,24 @@ extern GTY(()) tree objc_global_trees[OCTI_MAX];\n #define objc_eval_once\t\tobjc_global_trees[OCTI_EVAL_ONCE_DECL]\t\n #define objc_catch_type\t\tobjc_global_trees[OCTI_CATCH_TYPE]\n \n+#define execclass_decl\t\tobjc_global_trees[OCTI_EXECCLASS_DECL]\n+\n #define objc_method_template\tobjc_global_trees[OCTI_METH_TEMPL]\n #define objc_ivar_template\tobjc_global_trees[OCTI_IVAR_TEMPL]\n #define objc_symtab_template\tobjc_global_trees[OCTI_SYMTAB_TEMPL]\n #define objc_module_template\tobjc_global_trees[OCTI_MODULE_TEMPL]\n #define objc_super_template\tobjc_global_trees[OCTI_SUPER_TEMPL]\n #define objc_object_reference\tobjc_global_trees[OCTI_OBJ_REF]\n+#define objc_class_reference\tobjc_global_trees[OCTI_CLS_REF]\n #define objc_method_prototype_template\t\t\\\n \t\t\t\tobjc_global_trees[OCTI_METH_PROTO_TEMPL]\n #define function1_template\tobjc_global_trees[OCTI_FUNCTION1_TEMPL]\n #define function2_template\tobjc_global_trees[OCTI_FUNCTION2_TEMPL]\n \n #define objc_object_id\t\tobjc_global_trees[OCTI_OBJ_ID]\n #define objc_class_id\t\tobjc_global_trees[OCTI_CLS_ID]\n-#define objc_id_id\t\tobjc_global_trees[OCTI_ID_ID]\n+#define objc_object_name\t\tobjc_global_trees[OCTI_ID_NAME]\n+#define objc_class_name\t\tobjc_global_trees[OCTI_CLASS_NAME]\n #define constant_string_id\tobjc_global_trees[OCTI_CNST_STR_ID]\n #define constant_string_type\tobjc_global_trees[OCTI_CNST_STR_TYPE]\n #define constant_string_global_id\t\t\\"}]}