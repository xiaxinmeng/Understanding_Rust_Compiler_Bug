{"sha": "a0e71127bb2ab3450437010387edd33404590de8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBlNzExMjdiYjJhYjM0NTA0MzcwMTAzODdlZGQzMzQwNDU5MGRlOA==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@apple.com", "date": "2005-07-08T01:53:37Z"}, "committer": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2005-07-08T01:53:37Z"}, "message": "objc-act.c (objc_build_struct): Pass in an actual @interface instead of its name...\n\n[gcc/objc/ChangeLog]\n2005-07-07  Ziemowit Laski  <zlaski@apple.com>\n\n        * objc-act.c (objc_build_struct): Pass in an actual @interface\n        instead of its name, and annotate the struct created (and all\n        existing variants thereof) with the @interface.\n        (objc_compare_types): Treat forward-declared ObjC classes\n        as stand-alone (root) classes for purposes of type comparisons.\n        (build_private_template): Move some code to objc_build_struct().\n\n[gcc/testsuite/ChangeLog]\n2005-07-07  Ziemowit Laski  <zlaski@apple.com>\n\n        * obj-c++.dg/proto-lossage-6.mm: New.\n        * objc.dg/proto-lossage-6.m: New.\n\nFrom-SVN: r101750", "tree": {"sha": "42e7259e06a7cac78cdf1510f45d3e6ca75fa394", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42e7259e06a7cac78cdf1510f45d3e6ca75fa394"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0e71127bb2ab3450437010387edd33404590de8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0e71127bb2ab3450437010387edd33404590de8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0e71127bb2ab3450437010387edd33404590de8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0e71127bb2ab3450437010387edd33404590de8/comments", "author": null, "committer": null, "parents": [{"sha": "478cc28d237453d3d30fe1ee99cdaef2f9e15a88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/478cc28d237453d3d30fe1ee99cdaef2f9e15a88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/478cc28d237453d3d30fe1ee99cdaef2f9e15a88"}], "stats": {"total": 84, "additions": 75, "deletions": 9}, "files": [{"sha": "00fa28acd6697e43235e88e940da538f669ac3f0", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e71127bb2ab3450437010387edd33404590de8/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e71127bb2ab3450437010387edd33404590de8/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=a0e71127bb2ab3450437010387edd33404590de8", "patch": "@@ -1,3 +1,12 @@\n+2005-07-07  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* objc-act.c (objc_build_struct): Pass in an actual @interface\n+\tinstead of its name, and annotate the struct created (and all\n+\texisting variants thereof) with the @interface.\n+\t(objc_compare_types): Treat forward-declared ObjC classes\n+\tas stand-alone (root) classes for purposes of type comparisons.\n+\t(build_private_template): Move some code to objc_build_struct().\n+\n 2005-07-07  Ziemowit Laski  <zlaski@apple.com>\n \n \tPR objc/22274"}, {"sha": "35d534368debc4701fb464602d2f42fa6173c7b0", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e71127bb2ab3450437010387edd33404590de8/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e71127bb2ab3450437010387edd33404590de8/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=a0e71127bb2ab3450437010387edd33404590de8", "patch": "@@ -794,12 +794,13 @@ objc_is_class_id (tree type)\n   return OBJC_TYPE_NAME (type) == objc_class_id;\n }\n \n-/* Construct a C struct with tag NAME, a base struct with tag\n+/* Construct a C struct with same name as CLASS, a base struct with tag\n    SUPER_NAME (if any), and FIELDS indicated.  */\n \n static tree\n-objc_build_struct (tree name, tree fields, tree super_name)\n+objc_build_struct (tree class, tree fields, tree super_name)\n {\n+  tree name = CLASS_NAME (class);\n   tree s = start_struct (RECORD_TYPE, name);\n   tree super = (super_name ? xref_tag (RECORD_TYPE, super_name) : NULL_TREE);\n   tree t, objc_info = NULL_TREE;\n@@ -857,15 +858,26 @@ objc_build_struct (tree name, tree fields, tree super_name)\n       = chainon (objc_info,\n \t\t build_tree_list (NULL_TREE, TYPE_OBJC_INFO (t)));\n \n+  /* Point the struct at its related Objective-C class.  */\n+  INIT_TYPE_OBJC_INFO (s);\n+  TYPE_OBJC_INTERFACE (s) = class;\n+\n   s = finish_struct (s, fields, NULL_TREE);\n \n   for (t = TYPE_NEXT_VARIANT (s); t;\n        t = TYPE_NEXT_VARIANT (t), objc_info = TREE_CHAIN (objc_info))\n-    TYPE_OBJC_INFO (t) = TREE_VALUE (objc_info);\n+    {\n+      TYPE_OBJC_INFO (t) = TREE_VALUE (objc_info);\n+      /* Replace the IDENTIFIER_NODE with an actual @interface.  */\n+      TYPE_OBJC_INTERFACE (t) = class;\n+    }\n \n   /* Use TYPE_BINFO structures to point at the super class, if any.  */\n   objc_xref_basetypes (s, super);\n \n+  /* Mark this struct as a class template.  */\n+  CLASS_STATIC_TEMPLATE (class) = s;\n+\n   return s;\n }\n \n@@ -1099,6 +1111,16 @@ objc_compare_types (tree ltyp, tree rtyp, int argno, tree callee)\n   else\n     rcls = rproto = NULL_TREE;\n \n+  /* If we could not find an @interface declaration, we must have\n+     only seen a @class declaration; for purposes of type comparison,\n+     treat it as a stand-alone (root) class.  */\n+\n+  if (lcls && TREE_CODE (lcls) == IDENTIFIER_NODE)\n+    lcls = NULL_TREE;\n+\n+  if (rcls && TREE_CODE (rcls) == IDENTIFIER_NODE)\n+    rcls = NULL_TREE;\n+\n   /* If either type is an unqualified 'id', we're done.  */\n   if ((!lproto && objc_is_object_id (ltyp))\n       || (!rproto && objc_is_object_id (rtyp)))\n@@ -4109,15 +4131,10 @@ build_private_template (tree class)\n {\n   if (!CLASS_STATIC_TEMPLATE (class))\n     {\n-      tree record = objc_build_struct (CLASS_NAME (class),\n+      tree record = objc_build_struct (class,\n \t\t\t\t       get_class_ivars (class, false),\n \t\t\t\t       CLASS_SUPER_NAME (class));\n \n-      /* mark this record as class template - for class type checking */\n-      INIT_TYPE_OBJC_INFO (record);\n-      TYPE_OBJC_INTERFACE (record) = class;\n-      CLASS_STATIC_TEMPLATE (class) = record;\n-\n       /* Set the TREE_USED bit for this struct, so that stab generator\n \t can emit stabs for this struct type.  */\n       if (flag_debug_only_used_symbols && TYPE_STUB_DECL (record))"}, {"sha": "394b84667a287a27b5776a79302bb757c8f13f00", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e71127bb2ab3450437010387edd33404590de8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e71127bb2ab3450437010387edd33404590de8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a0e71127bb2ab3450437010387edd33404590de8", "patch": "@@ -10,6 +10,11 @@\n \tAdd test cases where the shift length is greater than the\n \tarray length.\n \n+2005-07-07  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* obj-c++.dg/proto-lossage-6.mm: New.\n+\t* objc.dg/proto-lossage-6.m: New.\n+\n 2005-07-07  Ziemowit Laski  <zlaski@apple.com>\n \n \t* obj-c++.dg/gnu-runtime-2.mm: Compile, do not run."}, {"sha": "6a4552eb048070eb038a649fdd2d57e22cab521b", "filename": "gcc/testsuite/obj-c++.dg/proto-lossage-6.mm", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e71127bb2ab3450437010387edd33404590de8/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-6.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e71127bb2ab3450437010387edd33404590de8/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-6.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-6.mm?ref=a0e71127bb2ab3450437010387edd33404590de8", "patch": "@@ -0,0 +1,17 @@\n+@class Base;\n+@protocol _Protocol;\n+\n+@interface ClassA {\n+}\n+-(void) func1:(Base<_Protocol> *)inTarget;\n+@end\n+\n+int main()\n+{\n+\tClassA* theA = 0;\n+\tBase<_Protocol>* myBase = 0;\n+\t[theA func1:myBase];\n+\n+\treturn 0;\n+}\n+"}, {"sha": "2b8720c367062506832bc9ef7e590ca7b98816e5", "filename": "gcc/testsuite/objc.dg/proto-lossage-6.m", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e71127bb2ab3450437010387edd33404590de8/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-6.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e71127bb2ab3450437010387edd33404590de8/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-6.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-6.m?ref=a0e71127bb2ab3450437010387edd33404590de8", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+@class Base;\n+@protocol _Protocol;\n+\n+@interface ClassA {\n+}\n+-(void) func1:(Base<_Protocol> *)inTarget;\n+@end\n+\n+int main()\n+{\n+\tClassA* theA = 0;\n+\tBase<_Protocol>* myBase = 0;\n+\t[theA func1:myBase];\n+\n+\treturn 0;\n+}\n+"}]}