{"sha": "e42d063054571ac6678f5799c3d4fe890ecc9a84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQyZDA2MzA1NDU3MWFjNjY3OGY1Nzk5YzNkNGZlODkwZWNjOWE4NA==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2012-04-30T11:42:50Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2012-04-30T11:42:50Z"}, "message": "Fix va_arg type location\n\nNow that diagnostics first point to the spelling location of tokens\ncoming from macro expansion, the test case\ngcc/testsuite/g++.old-deja/g++.other/vaarg3.C shows that when I write\nva_args (args, some_type), the location that is recorded for\n\"some_type\" is not correct.  We wrongly record a location that is in\nthe system header where the va_args macro is defined.\n\nThis patch changes that to correctly record the location for the type\noperand of the va_arg expression.\n\nWith this patch applied, the\ngcc/testsuite/g++.old-deja/g++.other/vaarg3.C test PASSes with and\nwithout -ftrack-macro-expansion.\n\nTested on x86_64-unknown-linux-gnu against trunk.\n\nNote that the bootstrap with -ftrack-macro-expansion exhibits other\nseparate issues that are addressed in subsequent patches.  This patch\njust fixes one class of problems.\n\nThe patch does pass bootstrap with -ftrack-macro-expansion turned off,\nthough.\n\ngcc/cp/\n\n\t* cp-tree.h (build_x_va_arg): Take an additional location\n\tparameter.\n\t* call.c (build_x_va_arg): Take a loc parameter for the location\n\tof the type of the va_arg expression.\n\t* parser.c (cp_parser_primary_expression): Pass the type of the\n\ttype in the va_arg expression to build_x_va_arg.\n\t* pt.c (tsubst_copy): Adjust calls to build_x_va_arg.\n\nFrom-SVN: r186973", "tree": {"sha": "47c7277c13e9785e5257a0e7d0c6373cf70ffd13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47c7277c13e9785e5257a0e7d0c6373cf70ffd13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e42d063054571ac6678f5799c3d4fe890ecc9a84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e42d063054571ac6678f5799c3d4fe890ecc9a84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e42d063054571ac6678f5799c3d4fe890ecc9a84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e42d063054571ac6678f5799c3d4fe890ecc9a84/comments", "author": null, "committer": null, "parents": [{"sha": "70dc395a5098e9ae3958e1a317e202358095ed97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70dc395a5098e9ae3958e1a317e202358095ed97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70dc395a5098e9ae3958e1a317e202358095ed97"}], "stats": {"total": 25, "additions": 19, "deletions": 6}, "files": [{"sha": "06edc5007b0bb24c1a94ada82b970b8a90e27764", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e42d063054571ac6678f5799c3d4fe890ecc9a84/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e42d063054571ac6678f5799c3d4fe890ecc9a84/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e42d063054571ac6678f5799c3d4fe890ecc9a84", "patch": "@@ -1,5 +1,14 @@\n 2012-04-30  Dodji Seketeli  <dodji@redhat.com>\n \n+\tFix va_arg type location\n+\t* cp-tree.h (build_x_va_arg): Take an additional location\n+\tparameter.\n+\t* call.c (build_x_va_arg): Take a loc parameter for the location\n+\tof the type of the va_arg expression.\n+\t* parser.c (cp_parser_primary_expression): Pass the type of the\n+\ttype in the va_arg expression to build_x_va_arg.\n+\t* pt.c (tsubst_copy): Adjust calls to build_x_va_arg.\n+\n \tMake conversion warnings work on NULL with -ftrack-macro-expansion\n \t* call.c (conversion_null_warnings): Use the new\n \texpansion_point_location_if_in_system_header."}, {"sha": "e072891f9271c2c69d3d9f211ccbaed2e5afa235", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e42d063054571ac6678f5799c3d4fe890ecc9a84/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e42d063054571ac6678f5799c3d4fe890ecc9a84/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=e42d063054571ac6678f5799c3d4fe890ecc9a84", "patch": "@@ -6133,7 +6133,7 @@ convert_arg_to_ellipsis (tree arg, tsubst_flags_t complain)\n /* va_arg (EXPR, TYPE) is a builtin. Make sure it is not abused.  */\n \n tree\n-build_x_va_arg (tree expr, tree type)\n+build_x_va_arg (source_location loc, tree expr, tree type)\n {\n   if (processing_template_decl)\n     return build_min (VA_ARG_EXPR, type, expr);\n@@ -6159,7 +6159,7 @@ build_x_va_arg (tree expr, tree type)\n       return expr;\n     }\n \n-  return build_va_arg (input_location, expr, type);\n+  return build_va_arg (loc, expr, type);\n }\n \n /* TYPE has been given to va_arg.  Apply the default conversions which"}, {"sha": "5a7ebaed9934909af2570ae8c456ea04f6822b01", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e42d063054571ac6678f5799c3d4fe890ecc9a84/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e42d063054571ac6678f5799c3d4fe890ecc9a84/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=e42d063054571ac6678f5799c3d4fe890ecc9a84", "patch": "@@ -4891,7 +4891,7 @@ extern void pop_defarg_context\t\t\t(void);\n extern tree convert_default_arg\t\t\t(tree, tree, tree, int,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree convert_arg_to_ellipsis\t\t(tree, tsubst_flags_t);\n-extern tree build_x_va_arg\t\t\t(tree, tree);\n+extern tree build_x_va_arg\t\t\t(source_location, tree, tree);\n extern tree cxx_type_promotes_to\t\t(tree);\n extern tree type_passed_as\t\t\t(tree);\n extern tree convert_for_arg_passing\t\t(tree, tree, tsubst_flags_t);"}, {"sha": "f0f7e987efb7352c6ec73c5425ec6bb63f2f2d9a", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e42d063054571ac6678f5799c3d4fe890ecc9a84/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e42d063054571ac6678f5799c3d4fe890ecc9a84/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=e42d063054571ac6678f5799c3d4fe890ecc9a84", "patch": "@@ -4168,6 +4168,7 @@ cp_parser_primary_expression (cp_parser *parser,\n \t  {\n \t    tree expression;\n \t    tree type;\n+\t    source_location type_location;\n \n \t    /* The `__builtin_va_arg' construct is used to handle\n \t       `va_arg'.  Consume the `__builtin_va_arg' token.  */\n@@ -4179,6 +4180,7 @@ cp_parser_primary_expression (cp_parser *parser,\n \t\t\t\t\t\t\t  /*cast_p=*/false, NULL);\n \t    /* Look for the `,'.  */\n \t    cp_parser_require (parser, CPP_COMMA, RT_COMMA);\n+\t    type_location = cp_lexer_peek_token (parser->lexer)->location;\n \t    /* Parse the type-id.  */\n \t    type = cp_parser_type_id (parser);\n \t    /* Look for the closing `)'.  */\n@@ -4188,7 +4190,7 @@ cp_parser_primary_expression (cp_parser *parser,\n \t    if (cp_parser_non_integral_constant_expression (parser,\n \t\t\t\t\t\t\t    NIC_VA_ARG))\n \t      return error_mark_node;\n-\t    return build_x_va_arg (expression, type);\n+\t    return build_x_va_arg (type_location, expression, type);\n \t  }\n \n \tcase RID_OFFSETOF:"}, {"sha": "b720d4a3161f46639194602c0ea8daa90969b1f0", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e42d063054571ac6678f5799c3d4fe890ecc9a84/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e42d063054571ac6678f5799c3d4fe890ecc9a84/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e42d063054571ac6678f5799c3d4fe890ecc9a84", "patch": "@@ -12480,7 +12480,8 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n       gcc_unreachable ();\n \n     case VA_ARG_EXPR:\n-      return build_x_va_arg (tsubst_copy (TREE_OPERAND (t, 0), args, complain,\n+      return build_x_va_arg (EXPR_LOCATION (t),\n+\t\t\t     tsubst_copy (TREE_OPERAND (t, 0), args, complain,\n \t\t\t\t\t  in_decl),\n \t\t\t     tsubst (TREE_TYPE (t), args, complain, in_decl));\n \n@@ -14313,7 +14314,8 @@ tsubst_copy_and_build (tree t,\n       }\n \n     case VA_ARG_EXPR:\n-      return build_x_va_arg (RECUR (TREE_OPERAND (t, 0)),\n+      return build_x_va_arg (EXPR_LOCATION (t),\n+\t\t\t     RECUR (TREE_OPERAND (t, 0)),\n \t\t\t     tsubst (TREE_TYPE (t), args, complain, in_decl));\n \n     case OFFSETOF_EXPR:"}]}