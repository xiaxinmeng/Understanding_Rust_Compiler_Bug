{"sha": "a672fa1247e54171542e1692bcd3cd6b2f41df2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY3MmZhMTI0N2U1NDE3MTU0MmUxNjkyYmNkM2NkNmIyZjQxZGYyYQ==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2016-06-08T10:16:07Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2016-06-08T10:16:07Z"}, "message": "[AArch64, 5/6] Reimplement fabd intrinsics & merge rtl patterns\n\n\t* config/aarch64/aarch64-builtins.def (fabd): New builtins for modes\n\tVALLF.\n\t* config/aarch64/aarch64-simd.md (fabd<mode>_3): Extend modes from VDQF\n\tto VALLF.  Rename to \"fabd<mode>3\".\n\t\"*fabd_scalar<mode>3): Delete.\n\t* config/aarch64/arm_neon.h (vabds_f32): Remove inline assembly.\n\tUse builtin.\n\t(vabdd_f64): Likewise.\n\t(vabd_f32): Likewise.\n\t(vabd_f64): Likewise.\n\t(vabdq_f32): Likewise.\n\t(vabdq_f64): Likewise.\n\nFrom-SVN: r237204", "tree": {"sha": "e7216c805bd5eb611ab5ac3f7764fc581b827b0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7216c805bd5eb611ab5ac3f7764fc581b827b0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a672fa1247e54171542e1692bcd3cd6b2f41df2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a672fa1247e54171542e1692bcd3cd6b2f41df2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a672fa1247e54171542e1692bcd3cd6b2f41df2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a672fa1247e54171542e1692bcd3cd6b2f41df2a/comments", "author": null, "committer": null, "parents": [{"sha": "00ea75d4e27922d720ee1b29b7567247c3dab622", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00ea75d4e27922d720ee1b29b7567247c3dab622", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00ea75d4e27922d720ee1b29b7567247c3dab622"}], "stats": {"total": 135, "additions": 64, "deletions": 71}, "files": [{"sha": "5a3f57fe727e8350160d5b2fffd5b2dbe3d6d3f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a672fa1247e54171542e1692bcd3cd6b2f41df2a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a672fa1247e54171542e1692bcd3cd6b2f41df2a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a672fa1247e54171542e1692bcd3cd6b2f41df2a", "patch": "@@ -1,3 +1,18 @@\n+2016-06-08  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.def (fabd): New builtins for modes\n+\tVALLF.\n+\t* config/aarch64/aarch64-simd.md (fabd<mode>_3): Extend modes from VDQF\n+\tto VALLF.  Rename to \"fabd<mode>3\".\n+\t\"*fabd_scalar<mode>3): Delete.\n+\t* config/aarch64/arm_neon.h (vabds_f32): Remove inline assembly.\n+\tUse builtin.\n+\t(vabdd_f64): Likewise.\n+\t(vabd_f32): Likewise.\n+\t(vabd_f64): Likewise.\n+\t(vabdq_f32): Likewise.\n+\t(vabdq_f64): Likewise.\n+\n 2016-06-08  Jiong Wang  <jiong.wang@arm.com>\n \n \t* config/aarch64/aarch64-builtins.def (rsqrts): New builtins for modes"}, {"sha": "342b98b1dc69b2b6d723c5c7bcd5692244b9b532", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a672fa1247e54171542e1692bcd3cd6b2f41df2a/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a672fa1247e54171542e1692bcd3cd6b2f41df2a/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=a672fa1247e54171542e1692bcd3cd6b2f41df2a", "patch": "@@ -457,3 +457,6 @@\n \n   /* Implemented by aarch64_rsqrts<mode>.  */\n   BUILTIN_VALLF (BINOP, rsqrts, 0)\n+\n+  /* Implemented by fabd<mode>3.  */\n+  BUILTIN_VALLF (BINOP, fabd, 3)"}, {"sha": "32f58f40e37e9b408bb8f51d5a5a8a83a56a9c32", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a672fa1247e54171542e1692bcd3cd6b2f41df2a/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a672fa1247e54171542e1692bcd3cd6b2f41df2a/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=a672fa1247e54171542e1692bcd3cd6b2f41df2a", "patch": "@@ -474,23 +474,14 @@\n   [(set_attr \"type\" \"neon_arith_acc<q>\")]\n )\n \n-(define_insn \"fabd<mode>_3\"\n-  [(set (match_operand:VDQF 0 \"register_operand\" \"=w\")\n-\t(abs:VDQF (minus:VDQF\n-\t\t   (match_operand:VDQF 1 \"register_operand\" \"w\")\n-\t\t   (match_operand:VDQF 2 \"register_operand\" \"w\"))))]\n-  \"TARGET_SIMD\"\n-  \"fabd\\t%0.<Vtype>, %1.<Vtype>, %2.<Vtype>\"\n-  [(set_attr \"type\" \"neon_fp_abd_<Vetype><q>\")]\n-)\n-\n-(define_insn \"*fabd_scalar<mode>3\"\n-  [(set (match_operand:GPF 0 \"register_operand\" \"=w\")\n-        (abs:GPF (minus:GPF\n-                 (match_operand:GPF 1 \"register_operand\" \"w\")\n-                 (match_operand:GPF 2 \"register_operand\" \"w\"))))]\n+(define_insn \"fabd<mode>3\"\n+  [(set (match_operand:VALLF 0 \"register_operand\" \"=w\")\n+\t(abs:VALLF\n+\t  (minus:VALLF\n+\t    (match_operand:VALLF 1 \"register_operand\" \"w\")\n+\t    (match_operand:VALLF 2 \"register_operand\" \"w\"))))]\n   \"TARGET_SIMD\"\n-  \"fabd\\t%<s>0, %<s>1, %<s>2\"\n+  \"fabd\\t%<v>0<Vmtype>, %<v>1<Vmtype>, %<v>2<Vmtype>\"\n   [(set_attr \"type\" \"neon_fp_abd_<Vetype><q>\")]\n )\n "}, {"sha": "f3011167d6d983d11f918efa2edb06af3404066a", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 39, "deletions": 55, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a672fa1247e54171542e1692bcd3cd6b2f41df2a/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a672fa1247e54171542e1692bcd3cd6b2f41df2a/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=a672fa1247e54171542e1692bcd3cd6b2f41df2a", "patch": "@@ -5440,17 +5440,6 @@ vabaq_u32 (uint32x4_t a, uint32x4_t b, uint32x4_t c)\n   return result;\n }\n \n-__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n-vabd_f32 (float32x2_t a, float32x2_t b)\n-{\n-  float32x2_t result;\n-  __asm__ (\"fabd %0.2s, %1.2s, %2.2s\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n vabd_s8 (int8x8_t a, int8x8_t b)\n {\n@@ -5517,17 +5506,6 @@ vabd_u32 (uint32x2_t a, uint32x2_t b)\n   return result;\n }\n \n-__extension__ static __inline float64_t __attribute__ ((__always_inline__))\n-vabdd_f64 (float64_t a, float64_t b)\n-{\n-  float64_t result;\n-  __asm__ (\"fabd %d0, %d1, %d2\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n __extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n vabdl_high_s8 (int8x16_t a, int8x16_t b)\n {\n@@ -5660,28 +5638,6 @@ vabdl_u32 (uint32x2_t a, uint32x2_t b)\n   return result;\n }\n \n-__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n-vabdq_f32 (float32x4_t a, float32x4_t b)\n-{\n-  float32x4_t result;\n-  __asm__ (\"fabd %0.4s, %1.4s, %2.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n-vabdq_f64 (float64x2_t a, float64x2_t b)\n-{\n-  float64x2_t result;\n-  __asm__ (\"fabd %0.2d, %1.2d, %2.2d\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n vabdq_s8 (int8x16_t a, int8x16_t b)\n {\n@@ -5748,17 +5704,6 @@ vabdq_u32 (uint32x4_t a, uint32x4_t b)\n   return result;\n }\n \n-__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n-vabds_f32 (float32_t a, float32_t b)\n-{\n-  float32_t result;\n-  __asm__ (\"fabd %s0, %s1, %s2\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n __extension__ static __inline int16_t __attribute__ ((__always_inline__))\n vaddlv_s8 (int8x8_t a)\n {\n@@ -10235,6 +10180,45 @@ vtbx2_p8 (poly8x8_t r, poly8x8x2_t tab, uint8x8_t idx)\n \n /* Start of optimal implementations in approved order.  */\n \n+/* vabd.  */\n+\n+__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n+vabds_f32 (float32_t __a, float32_t __b)\n+{\n+  return __builtin_aarch64_fabdsf (__a, __b);\n+}\n+\n+__extension__ static __inline float64_t __attribute__ ((__always_inline__))\n+vabdd_f64 (float64_t __a, float64_t __b)\n+{\n+  return __builtin_aarch64_fabddf (__a, __b);\n+}\n+\n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vabd_f32 (float32x2_t __a, float32x2_t __b)\n+{\n+  return __builtin_aarch64_fabdv2sf (__a, __b);\n+}\n+\n+__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n+vabd_f64 (float64x1_t __a, float64x1_t __b)\n+{\n+  return (float64x1_t) {vabdd_f64 (vget_lane_f64 (__a, 0),\n+\t\t\t\t   vget_lane_f64 (__b, 0))};\n+}\n+\n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vabdq_f32 (float32x4_t __a, float32x4_t __b)\n+{\n+  return __builtin_aarch64_fabdv4sf (__a, __b);\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n+vabdq_f64 (float64x2_t __a, float64x2_t __b)\n+{\n+  return __builtin_aarch64_fabdv2df (__a, __b);\n+}\n+\n /* vabs  */\n \n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))"}]}