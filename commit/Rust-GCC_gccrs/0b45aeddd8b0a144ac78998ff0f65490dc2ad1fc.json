{"sha": "0b45aeddd8b0a144ac78998ff0f65490dc2ad1fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI0NWFlZGRkOGIwYTE0NGFjNzg5OThmZjBmNjU0OTBkYzJhZDFmYw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2006-10-13T08:38:43Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2006-10-13T08:38:43Z"}, "message": "re PR c++/28506 (ICE with initializers for functions)\n\n\tPR c++/28506\n\t* parser.c (function_declarator_p): New function.\n\t(cp_parser_init_declarator): Use it.\n\t(cp_parser_member_declaration): Likewise.\n\tPR c++/28506\n\t* g++.dg/parse/pure1.C: New test.\n\nFrom-SVN: r117687", "tree": {"sha": "d0987ed158a6772cd231320670bc4c23d1e423b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0987ed158a6772cd231320670bc4c23d1e423b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b45aeddd8b0a144ac78998ff0f65490dc2ad1fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b45aeddd8b0a144ac78998ff0f65490dc2ad1fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b45aeddd8b0a144ac78998ff0f65490dc2ad1fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b45aeddd8b0a144ac78998ff0f65490dc2ad1fc/comments", "author": null, "committer": null, "parents": [{"sha": "16dbbd9957c126f9d3b8014ac8f9d414163c03c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16dbbd9957c126f9d3b8014ac8f9d414163c03c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16dbbd9957c126f9d3b8014ac8f9d414163c03c7"}], "stats": {"total": 47, "additions": 43, "deletions": 4}, "files": [{"sha": "b1df987227d222fcba5b6b5846e742c7e8814dbf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b45aeddd8b0a144ac78998ff0f65490dc2ad1fc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b45aeddd8b0a144ac78998ff0f65490dc2ad1fc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0b45aeddd8b0a144ac78998ff0f65490dc2ad1fc", "patch": "@@ -1,3 +1,10 @@\n+2006-10-13  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/28506\n+\t* parser.c (function_declarator_p): New function.\n+\t(cp_parser_init_declarator): Use it.\n+\t(cp_parser_member_declaration): Likewise.\n+\n 2006-10-12  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/29318"}, {"sha": "cb357cfd59565dd689ded83d36a9fe2ef7ccc1fb", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b45aeddd8b0a144ac78998ff0f65490dc2ad1fc/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b45aeddd8b0a144ac78998ff0f65490dc2ad1fc/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=0b45aeddd8b0a144ac78998ff0f65490dc2ad1fc", "patch": "@@ -965,6 +965,24 @@ make_parameter_declarator (cp_decl_specifier_seq *decl_specifiers,\n   return parameter;\n }\n \n+/* Returns true iff DECLARATOR  is a declaration for a function.  */\n+\n+static bool\n+function_declarator_p (const cp_declarator *declarator)\n+{\n+  while (declarator)\n+    {\n+      if (declarator->kind == cdk_function\n+\t  && declarator->declarator->kind == cdk_id)\n+\treturn true;\n+      if (declarator->kind == cdk_id\n+\t  || declarator->kind == cdk_error)\n+\treturn false;\n+      declarator = declarator->declarator;\n+    }\n+  return false;\n+}\n+ \n /* The parser.  */\n \n /* Overview\n@@ -11157,8 +11175,7 @@ cp_parser_init_declarator (cp_parser* parser,\n   is_non_constant_init = true;\n   if (is_initialized)\n     {\n-      if (declarator->kind == cdk_function\n-\t  && declarator->declarator->kind == cdk_id\n+      if (function_declarator_p (declarator)\n \t  && initialization_kind == CPP_EQ)\n \tinitializer = cp_parser_pure_specifier (parser);\n       else\n@@ -13825,8 +13842,7 @@ cp_parser_member_declaration (cp_parser* parser)\n \t\t     for a pure-specifier; otherwise, we look for a\n \t\t     constant-initializer.  When we call `grokfield', it will\n \t\t     perform more stringent semantics checks.  */\n-\t\t  if (declarator->kind == cdk_function\n-\t\t      && declarator->declarator->kind == cdk_id)\n+\t\t  if (function_declarator_p (declarator))\n \t\t    initializer = cp_parser_pure_specifier (parser);\n \t\t  else\n \t\t    /* Parse the initializer.  */"}, {"sha": "3a48c5d4c4d67f7e6c94c77c73ade85e89c4097a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b45aeddd8b0a144ac78998ff0f65490dc2ad1fc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b45aeddd8b0a144ac78998ff0f65490dc2ad1fc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0b45aeddd8b0a144ac78998ff0f65490dc2ad1fc", "patch": "@@ -1,3 +1,8 @@\n+2006-10-13  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/28506\n+\t* g++.dg/parse/pure1.C: New test.\n+\n 2006-10-13  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR fortran/21435"}, {"sha": "2b6f28b7df5111c44495e87b3c79fc4c817291b6", "filename": "gcc/testsuite/g++.dg/parse/pure1.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b45aeddd8b0a144ac78998ff0f65490dc2ad1fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpure1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b45aeddd8b0a144ac78998ff0f65490dc2ad1fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpure1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpure1.C?ref=0b45aeddd8b0a144ac78998ff0f65490dc2ad1fc", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/28506\n+\n+struct A\n+{\n+  virtual void* foo() = 1; // { dg-error \"pure\" }\n+};\n+\n+struct B\n+{\n+  void operator()()() = 1; // { dg-error \"pure|function|initializer\" }\n+};"}]}