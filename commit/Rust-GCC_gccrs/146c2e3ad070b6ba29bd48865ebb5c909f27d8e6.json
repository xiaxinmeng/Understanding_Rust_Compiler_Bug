{"sha": "146c2e3ad070b6ba29bd48865ebb5c909f27d8e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ2YzJlM2FkMDcwYjZiYTI5YmQ0ODg2NWViYjVjOTA5ZjI3ZDhlNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-09-05T20:08:41Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-09-05T20:08:41Z"}, "message": "[75/77] Use scalar_mode in the AArch64 port\n\nSimilar to the previous scalar_int_mode patch.\n\n2017-09-05  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-protos.h (aarch64_gen_adjusted_ldpstp):\n\tTake a scalar_mode rather than a machine_mode.\n\t(aarch64_operands_adjust_ok_for_ldpstp): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_simd_container_mode): Likewise.\n\t(aarch64_operands_adjust_ok_for_ldpstp): Likewise.\n\t(aarch64_gen_adjusted_ldpstp): Likewise.\n\t(aarch64_expand_vector_init): Use scalar_mode instead of machine_mode.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r251736", "tree": {"sha": "f50a16d2518e380c145a7002e940537a445f24f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f50a16d2518e380c145a7002e940537a445f24f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/146c2e3ad070b6ba29bd48865ebb5c909f27d8e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/146c2e3ad070b6ba29bd48865ebb5c909f27d8e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/146c2e3ad070b6ba29bd48865ebb5c909f27d8e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/146c2e3ad070b6ba29bd48865ebb5c909f27d8e6/comments", "author": null, "committer": null, "parents": [{"sha": "77e994c9098df0da205b627d75d2282a4b983435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77e994c9098df0da205b627d75d2282a4b983435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77e994c9098df0da205b627d75d2282a4b983435"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "3d38a7ae94c23bf701adf5bd38e1d5c4f785e8b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146c2e3ad070b6ba29bd48865ebb5c909f27d8e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146c2e3ad070b6ba29bd48865ebb5c909f27d8e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=146c2e3ad070b6ba29bd48865ebb5c909f27d8e6", "patch": "@@ -1,3 +1,15 @@\n+2017-09-05  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_gen_adjusted_ldpstp):\n+\tTake a scalar_mode rather than a machine_mode.\n+\t(aarch64_operands_adjust_ok_for_ldpstp): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_simd_container_mode): Likewise.\n+\t(aarch64_operands_adjust_ok_for_ldpstp): Likewise.\n+\t(aarch64_gen_adjusted_ldpstp): Likewise.\n+\t(aarch64_expand_vector_init): Use scalar_mode instead of machine_mode.\n+\n 2017-09-05  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "ed5d373dc105feec5bff3885cef0f4d7f8c75b52", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146c2e3ad070b6ba29bd48865ebb5c909f27d8e6/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146c2e3ad070b6ba29bd48865ebb5c909f27d8e6/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=146c2e3ad070b6ba29bd48865ebb5c909f27d8e6", "patch": "@@ -441,7 +441,7 @@ bool aarch64_atomic_ldop_supported_p (enum rtx_code);\n void aarch64_gen_atomic_ldop (enum rtx_code, rtx, rtx, rtx, rtx, rtx);\n void aarch64_split_atomic_op (enum rtx_code, rtx, rtx, rtx, rtx, rtx, rtx);\n \n-bool aarch64_gen_adjusted_ldpstp (rtx *, bool, machine_mode, RTX_CODE);\n+bool aarch64_gen_adjusted_ldpstp (rtx *, bool, scalar_mode, RTX_CODE);\n #endif /* RTX_CODE */\n \n void aarch64_init_builtins (void);\n@@ -469,7 +469,7 @@ int aarch64_ccmp_mode_to_code (machine_mode mode);\n \n bool extract_base_offset_in_addr (rtx mem, rtx *base, rtx *offset);\n bool aarch64_operands_ok_for_ldpstp (rtx *, bool, machine_mode);\n-bool aarch64_operands_adjust_ok_for_ldpstp (rtx *, bool, machine_mode);\n+bool aarch64_operands_adjust_ok_for_ldpstp (rtx *, bool, scalar_mode);\n \n extern void aarch64_asm_output_pool_epilogue (FILE *, const char *,\n \t\t\t\t\t      tree, HOST_WIDE_INT);"}, {"sha": "a2ecd7ac33672a05487efe7f89909372a4b34f5c", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146c2e3ad070b6ba29bd48865ebb5c909f27d8e6/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146c2e3ad070b6ba29bd48865ebb5c909f27d8e6/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=146c2e3ad070b6ba29bd48865ebb5c909f27d8e6", "patch": "@@ -149,7 +149,7 @@ static bool aarch64_builtin_support_vector_misalignment (machine_mode mode,\n \t\t\t\t\t\t\t int misalignment,\n \t\t\t\t\t\t\t bool is_packed);\n static machine_mode\n-aarch64_simd_container_mode (machine_mode mode, unsigned width);\n+aarch64_simd_container_mode (scalar_mode mode, unsigned width);\n \n /* Major revision number of the ARM Architecture implemented by the target.  */\n unsigned aarch64_architecture_version;\n@@ -11248,7 +11248,7 @@ aarch64_vector_mode_supported_p (machine_mode mode)\n /* Return appropriate SIMD container\n    for MODE within a vector of WIDTH bits.  */\n static machine_mode\n-aarch64_simd_container_mode (machine_mode mode, unsigned width)\n+aarch64_simd_container_mode (scalar_mode mode, unsigned width)\n {\n   gcc_assert (width == 64 || width == 128);\n   if (TARGET_SIMD)\n@@ -11997,7 +11997,7 @@ void\n aarch64_expand_vector_init (rtx target, rtx vals)\n {\n   machine_mode mode = GET_MODE (target);\n-  machine_mode inner_mode = GET_MODE_INNER (mode);\n+  scalar_mode inner_mode = GET_MODE_INNER (mode);\n   /* The number of vector elements.  */\n   int n_elts = GET_MODE_NUNITS (mode);\n   /* The number of vector elements which are not constant.  */\n@@ -14810,7 +14810,7 @@ aarch64_operands_ok_for_ldpstp (rtx *operands, bool load,\n \n bool\n aarch64_operands_adjust_ok_for_ldpstp (rtx *operands, bool load,\n-\t\t\t\t       machine_mode mode)\n+\t\t\t\t       scalar_mode mode)\n {\n   enum reg_class rclass_1, rclass_2, rclass_3, rclass_4;\n   HOST_WIDE_INT offval_1, offval_2, offval_3, offval_4, msize;\n@@ -14944,7 +14944,7 @@ aarch64_operands_adjust_ok_for_ldpstp (rtx *operands, bool load,\n \n bool\n aarch64_gen_adjusted_ldpstp (rtx *operands, bool load,\n-\t\t\t     machine_mode mode, RTX_CODE code)\n+\t\t\t     scalar_mode mode, RTX_CODE code)\n {\n   rtx base, offset, t1, t2;\n   rtx mem_1, mem_2, mem_3, mem_4;"}]}