{"sha": "fc81ccd3e5f9ce5a18c2e9e1519634ad9947e430", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM4MWNjZDNlNWY5Y2U1YTE4YzJlOWUxNTE5NjM0YWQ5OTQ3ZTQzMA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2000-11-29T21:30:30Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-11-29T21:30:30Z"}, "message": "Fixes for build directories with colons, AIX build problems.\n\n\n2000-11-29  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tFixes for build directories with colons, AIX build problems.\n\t* src/Makefile.am: Cleanups, add documentation.\n\t(libstdc++.INC): Simplify rule.\n\t(myinstallheaders): Consolidate install rules.\n\t(myinstalldirs): New, make directores.\n\t(base_headers): Subdivide based on install directory.\n\t(ext_headers): New.\n\t(backward_headers): New.\n\t(headers): Remove.\n\t(c_headers): Remove, unused.\n\t(c_shadow_headers): Split up, deal with conditional usage in a\n\tsane manner.\n\t* src/Makefile.in: Regenerate.\n\nFrom-SVN: r37858", "tree": {"sha": "1c9645b673932773157c76e2d561aa7c0b0a1765", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c9645b673932773157c76e2d561aa7c0b0a1765"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc81ccd3e5f9ce5a18c2e9e1519634ad9947e430", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc81ccd3e5f9ce5a18c2e9e1519634ad9947e430", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc81ccd3e5f9ce5a18c2e9e1519634ad9947e430", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc81ccd3e5f9ce5a18c2e9e1519634ad9947e430/comments", "author": null, "committer": null, "parents": [{"sha": "981666391297739542a41bc2ea23cb4d64a4a819", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/981666391297739542a41bc2ea23cb4d64a4a819", "html_url": "https://github.com/Rust-GCC/gccrs/commit/981666391297739542a41bc2ea23cb4d64a4a819"}], "stats": {"total": 235, "additions": 144, "deletions": 91}, "files": [{"sha": "8e1274e2504d25a690a0d4a3f0ac0611bc8af803", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc81ccd3e5f9ce5a18c2e9e1519634ad9947e430/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc81ccd3e5f9ce5a18c2e9e1519634ad9947e430/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fc81ccd3e5f9ce5a18c2e9e1519634ad9947e430", "patch": "@@ -1,3 +1,19 @@\n+2000-11-29  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tFixes for build directories with colons, AIX build problems.\n+\t* src/Makefile.am: Cleanups, add documentation.\n+\t(libstdc++.INC): Simplify rule.\n+\t(myinstallheaders): Consolidate install rules.\n+\t(myinstalldirs): New, make directores.\n+\t(base_headers): Subdivide based on install directory.\n+\t(ext_headers): New.\n+\t(backward_headers): New.\n+\t(headers): Remove.\n+\t(c_headers): Remove, unused.\n+\t(c_shadow_headers): Split up, deal with conditional usage in a\n+\tsane manner.\n+\t* src/Makefile.in: Regenerate.\n+\t\n 2000-11-29  Phil Edwards  <pme@sources.redhat.com>\n \n \tSync with the documentation from wwwdocs."}, {"sha": "6a874cd2ad753c7567d471bc4d5f9257cc64ce54", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 68, "deletions": 55, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc81ccd3e5f9ce5a18c2e9e1519634ad9947e430/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc81ccd3e5f9ce5a18c2e9e1519634ad9947e430/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=fc81ccd3e5f9ce5a18c2e9e1519634ad9947e430", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.52 2000/11/25 09:11:15 bkoz Exp $\n+## $Id: Makefile.am,v 1.53 2000/11/29 01:09:09 gdr Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -93,17 +93,6 @@ base_headers = \\\n \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \\\n \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \\\n \tbits/stl_threads.h bits/stl_iterator_base.h \\\n-\tbackward/complex.h backward/iomanip.h backward/istream.h \\\n-\tbackward/ostream.h backward/stream.h backward/streambuf.h \\\n-\tbackward/algo.h backward/algobase.h backward/alloc.h \\\n-\tbackward/bvector.h backward/defalloc.h backward/deque.h \\\n-\tbackward/function.h backward/hash_map.h backward/hash_set.h \\\n-\tbackward/hashtable.h backward/heap.h backward/iterator.h \\\n-\tbackward/list.h backward/map.h backward/multimap.h backward/new.h \\\n-\tbackward/multiset.h backward/pair.h backward/iostream.h \\\n-\tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \\\n-\tbackward/tempbuf.h backward/tree.h backward/vector.h \\\n-\tbackward/fstream.h backward/strstream.h backward/strstream \\\n \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \\\n \tbits/std_iterator.h bits/std_list.h \\\n \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \\\n@@ -119,10 +108,24 @@ base_headers = \\\n \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \\\n \tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \\\n \tbits/concept_checks.h bits/container_concepts.h \\\n-\tbits/sequence_concepts.h \\\n+\tbits/sequence_concepts.h bits/stl_config.h bits/stl_construct.h\n+\n+backward_headers = \\\n+\tbackward/complex.h backward/iomanip.h backward/istream.h \\\n+\tbackward/ostream.h backward/stream.h backward/streambuf.h \\\n+\tbackward/algo.h backward/algobase.h backward/alloc.h \\\n+\tbackward/bvector.h backward/defalloc.h backward/deque.h \\\n+\tbackward/function.h backward/hash_map.h backward/hash_set.h \\\n+\tbackward/hashtable.h backward/heap.h backward/iterator.h \\\n+\tbackward/list.h backward/map.h backward/multimap.h backward/new.h \\\n+\tbackward/multiset.h backward/pair.h backward/iostream.h \\\n+\tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \\\n+\tbackward/tempbuf.h backward/tree.h backward/vector.h \\\n+\tbackward/fstream.h backward/strstream.h backward/strstream\n+\n+ext_headers = \\\n \text/ropeimpl.h ext/stl_rope.h \\\n-\text/stl_bvector.h bits/stl_config.h bits/stl_construct.h \\\n-\text/stl_hashtable.h ext/stl_hash_fun.h \\\n+\text/stl_bvector.h ext/stl_hashtable.h ext/stl_hash_fun.h \\\n \text/hash_map ext/hash_set ext/rope ext/slist \\\n \text/tree ext/bvector \n \n@@ -134,6 +137,7 @@ c_base_headers = \\\n \tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \\\n \tbits/std_cwchar.h bits/std_cwctype.h \n \n+if GLIBCPP_USE_CSHADOW\n c_shadow_headers = \\\n \tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \\\n \tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \\\n@@ -143,11 +147,8 @@ c_shadow_headers = \\\n \tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \\\n \tbits/wrap_features.h bits/wrap_langinfo.h \\\n \tsys/cdefs.h \n-\n-if GLIBCPP_USE_CSHADOW\n-c_headers = $(c_base_headers) $(c_shadow_headers)\n else\n-c_headers = $(c_base_headers)\n+c_shadow_headers =\n endif\n \n std_headers = \\\n@@ -171,8 +172,6 @@ build_headers = \\\n \tbits/atomicity.h bits/os_defines.h \\\n \tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n \n-headers = $(base_headers) $(c_headers)\n-\n sources = \\\n \tlimitsMEMBERS.cc \\\n \tcmath.cc \\\n@@ -235,37 +234,68 @@ myincludep = $(prefix)/include/g++-@libstdcxx_interface@\n endif\n endif\n \n-# We have our own special, needlessly complicated installation routine\n+# We have our own special, ridiculously complicated installation routine\n # here, as automake/autoconf is currently brain-damaged when it comes\n-# to installing sub-directories of headers.\n-install-data-local: myinstallheaders\n+# to installing sub-directories of headers. In particular, we want to\n+# 1) install build headers from (blddir)/include/bits -> (install)/bits\n+# 2) install source headers from\n+#      (srcdir)/include/bits -> (install)/bits\n+#      (srcdir)/include/ext -> (install)/ext\n+#      (srcdir)/include/backward -> (install)/backward\n+#      ... and the always entertaining \"C\" compatibility bits\n+#      where * represents configure-time directory switching\n+#      (srcdir)/include/c* -> (install)/\n+#      (srcdir)/include/c*/bits -> (install)/bits\n+#      (srcdir)/include/c*/sys -> (install)/sys\n+install-data-local: myinstalldirs myinstallheaders\n+\n+# NB: installation of shadow header directories is not attempted.\n+myinstalldirs:\n+\tif test -z \"$(MULTISUBDIR)\"; then \\\n+\t$(mkinstalldirs) $(DESTDIR)$(myincludep)/bits; \\\n+\t$(mkinstalldirs) $(DESTDIR)$(myincludep)/backward; \\\n+\t$(mkinstalldirs) $(DESTDIR)$(myincludep)/ext; \\\n+\tfi\n \n # NB: As libio_headers may be empty, need this to make sure bash doesn't\n # choke on an empty for... loop by using libio_headers_install\n-myinstallheaders: $(headers:%=$(myincludep)/%)\n+# NB: installation of shadow headers is not attempted.\n+src_incdir = @GLIBCPP_INCLUDE_DIR@\n+bld_incdir = $(top_builddir)/include\n+c_incdir = @C_INCLUDE_DIR@\n+myinstallheaders: \n \tif test -z \"$(MULTISUBDIR)\"; then \\\n+\tfor i in $(base_headers); do \\\n+        echo \"$(INSTALL_DATA) $(src_incdir)/$$i $(myincludep)/bits/\"; \\\n+\t  $(INSTALL_DATA) $(src_incdir)/$$i $(myincludep)/bits/; \\\n+\tdone; \\\n+\tfor i in $(ext_headers); do \\\n+        echo \"$(INSTALL_DATA) $(src_incdir)/$$i $(myincludep)/ext/\"; \\\n+\t  $(INSTALL_DATA) $(src_incdir)/$$i $(myincludep)/ext/; \\\n+\tdone; \\\n+\tfor i in $(backward_headers); do \\\n+        echo \"$(INSTALL_DATA) $(src_incdir)/$$i $(myincludep)/backward/\"; \\\n+\t  $(INSTALL_DATA) $(src_incdir)/$$i $(myincludep)/backward/; \\\n+\tdone; \\\n+\tfor i in $(c_base_headers); do \\\n+        echo \"$(INSTALL_DATA) $(c_incdir)/$$i $(myincludep)/bits/\"; \\\n+\t  $(INSTALL_DATA) $(c_incdir)/$$i $(myincludep)/bits/; \\\n+\tdone; \\\n \tfor i in $(std_headers); do \\\n-\t  echo \"$(INSTALL_DATA) $(GLIBCPP_INCLUDE_DIR)/std/$$i $(myincludep)\";\\\n-\t        $(INSTALL_DATA) $(GLIBCPP_INCLUDE_DIR)/std/$$i $(myincludep); \\\n+\techo \"$(INSTALL_DATA) $(src_incdir)/std/$$i $(myincludep)\";\\\n+\t  $(INSTALL_DATA) $(src_incdir)/std/$$i $(myincludep); \\\n \tdone; \\\n \tfor i in $(build_headers); do \\\n-          echo \"$(INSTALL_DATA) $(top_builddir)/include/$$i $(myincludep)/bits/\"; \\\n-\t     $(INSTALL_DATA) $(top_builddir)/include/$$i $(myincludep)/bits/; \\\n+        echo \"$(INSTALL_DATA) $(bld_incdir)/$$i $(myincludep)/bits/\"; \\\n+\t  $(INSTALL_DATA) $(bld_incdir)/$$i $(myincludep)/bits/; \\\n \tdone; \\\n \tlibio_headers_install='$(libio_headers)'; \\\n \tfor i in $$libio_headers_install; do \\\n-          echo \"$(INSTALL_DATA) $$i $(myincludep)\"; \\\n-                $(INSTALL_DATA) $$i $(myincludep); \\\n+        echo \"$(INSTALL_DATA) $$i $(myincludep)\"; \\\n+          $(INSTALL_DATA) $$i $(myincludep); \\\n \tdone; \\\n \tfi;\n \n-$(headers:%=$(myincludep)/%): $(myincludep)/%: %\n-\tif test -z \"$(MULTISUBDIR)\"; then \\\n-\t$(mkinstalldirs) $(@D); \\\n-\techo \" $(INSTALL_DATA) $^ $@\"; \\\n-\t$(INSTALL_DATA) $^ $@; \\\n-\tfi;\n-\n # We have to handle misc-inst.cc and locale-inst.cc in a special way\n # since we cannot instantiate all classes due to missing definitions\n # for things like vptrs, type_info bits, etc. when using\n@@ -289,14 +319,6 @@ wstring-inst.lo: string-inst.cc\n # Alexandre put this in here for some libtool-related reason.\n all: libstdc++.INC\n libstdc++.INC: Makefile\n-\t$(MAKE) \\\n-\t  top_builddir=`CDPATH=:. && cd $(top_builddir) && pwd` \\\n-\t  top_srcdir=`CDPATH=:. && cd $(top_srcdir) && pwd` \\\n-\t  tmp-$@\n-\t-rm -f $@\n-\tmv tmp-$@ $@\n-\n-tmp-libstdc++.INC: Makefile\n \techo $(INCLUDES) > $@\n \n \n@@ -340,12 +362,3 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n # which of course is problematic at this point.\n CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \\\n \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n-\n-\n-\n-\n-\n-\n-\n-\n-"}, {"sha": "0190c959fd2f5d7498ee50ce2fd1c8b7202e7ce8", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 60, "deletions": 36, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc81ccd3e5f9ce5a18c2e9e1519634ad9947e430/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc81ccd3e5f9ce5a18c2e9e1519634ad9947e430/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=fc81ccd3e5f9ce5a18c2e9e1519634ad9947e430", "patch": "@@ -147,16 +147,19 @@ CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n INCLUDES =  \t-nostdinc++ \t$(CSHADOW_INCLUDES) $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \t$(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) -I$(top_builddir)/include \t$(TOPLEVEL_INCLUDES)\t\n \n \n-base_headers =  \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \tbits/basic_string.h bits/std_string.h  bits/string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/exception_support.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h bits/stl_iterator_base.h \tbackward/complex.h backward/iomanip.h backward/istream.h \tbackward/ostream.h backward/stream.h backward/streambuf.h \tbackward/algo.h backward/algobase.h backward/alloc.h \tbackward/bvector.h backward/defalloc.h backward/deque.h \tbackward/function.h backward/hash_map.h backward/hash_set.h \tbackward/hashtable.h backward/heap.h backward/iterator.h \tbackward/list.h backward/map.h backward/multimap.h backward/new.h \tbackward/multiset.h backward/pair.h backward/iostream.h \tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \tbackward/tempbuf.h backward/tree.h backward/vector.h \tbackward/fstream.h backward/strstream.h backward/strstream \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h \tbits/stl_stack.h bits/stl_string_fwd.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \tbits/concept_checks.h bits/container_concepts.h \tbits/sequence_concepts.h \text/ropeimpl.h ext/stl_rope.h \text/stl_bvector.h bits/stl_config.h bits/stl_construct.h \text/stl_hashtable.h ext/stl_hash_fun.h \text/hash_map ext/hash_set ext/rope ext/slist \text/tree ext/bvector \n+base_headers =  \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \tbits/basic_string.h bits/std_string.h  bits/string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/exception_support.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h bits/stl_iterator_base.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h \tbits/stl_stack.h bits/stl_string_fwd.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \tbits/concept_checks.h bits/container_concepts.h \tbits/sequence_concepts.h bits/stl_config.h bits/stl_construct.h\n \n \n-c_base_headers =  \tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \tbits/std_cwchar.h bits/std_cwctype.h \n+backward_headers =  \tbackward/complex.h backward/iomanip.h backward/istream.h \tbackward/ostream.h backward/stream.h backward/streambuf.h \tbackward/algo.h backward/algobase.h backward/alloc.h \tbackward/bvector.h backward/defalloc.h backward/deque.h \tbackward/function.h backward/hash_map.h backward/hash_set.h \tbackward/hashtable.h backward/heap.h backward/iterator.h \tbackward/list.h backward/map.h backward/multimap.h backward/new.h \tbackward/multiset.h backward/pair.h backward/iostream.h \tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \tbackward/tempbuf.h backward/tree.h backward/vector.h \tbackward/fstream.h backward/strstream.h backward/strstream\n+\n \n+ext_headers =  \text/ropeimpl.h ext/stl_rope.h \text/stl_bvector.h ext/stl_hashtable.h ext/stl_hash_fun.h \text/hash_map ext/hash_set ext/rope ext/slist \text/tree ext/bvector \n \n-c_shadow_headers =  \tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \tfeatures.h langinfo.h \tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \tbits/wrap_features.h bits/wrap_langinfo.h \tsys/cdefs.h \n \n-@GLIBCPP_USE_CSHADOW_TRUE@c_headers = $(c_base_headers) $(c_shadow_headers)\n-@GLIBCPP_USE_CSHADOW_FALSE@c_headers = $(c_base_headers)\n+c_base_headers =  \tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \tbits/std_cwchar.h bits/std_cwctype.h \n+\n+@GLIBCPP_USE_CSHADOW_TRUE@c_shadow_headers = \tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \tfeatures.h langinfo.h \tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \tbits/wrap_features.h bits/wrap_langinfo.h \tsys/cdefs.h \n+@GLIBCPP_USE_CSHADOW_FALSE@c_shadow_headers = \n \n std_headers =  \talgorithm bitset complex deque fstream functional \tiomanip ios iosfwd iostream istream iterator limits list locale \tmap memory numeric ostream queue set sstream stack stdexcept \tstreambuf string utility valarray vector \tcassert cctype cerrno cfloat climits clocale ciso646 \tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \tcstring ctime cwchar cwctype\n \n@@ -166,8 +169,6 @@ std_headers =  \talgorithm bitset complex deque fstream functional \tiomanip ios i\n build_headers =  \tbits/std_limits.h bits/c++config.h bits/c++io.h bits/c++threads.h \tbits/atomicity.h bits/os_defines.h \tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n \n \n-headers = $(base_headers) $(c_headers)\n-\n sources =  \tlimitsMEMBERS.cc \tcmath.cc \tcomplex.cc complexf.cc complexl.cc complex_io.cc \tstdexcept.cc bitset.cc \tc++io.cc ios.cc stdstreams.cc strstream.cc \tlocale.cc localename.cc codecvt.cc \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n \n \n@@ -194,6 +195,13 @@ libstdc___la_DEPENDENCIES = $(libstdc___la_LIBADD)\n @GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@myincludep = $(libdir)/gcc-lib/$(target_alias)/@gcc_version@/include/g++\n @GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@myincludep = $(prefix)/include/g++-@libstdcxx_interface@\n \n+# NB: As libio_headers may be empty, need this to make sure bash doesn't\n+# choke on an empty for... loop by using libio_headers_install\n+# NB: installation of shadow headers is not attempted.\n+src_incdir = @GLIBCPP_INCLUDE_DIR@\n+bld_incdir = $(top_builddir)/include\n+c_incdir = @C_INCLUDE_DIR@\n+\n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually\n # set this option because CONFIG_CXXFLAGS has to be after\n@@ -400,7 +408,7 @@ distdir: $(DISTFILES)\n \t@for file in $(DISTFILES); do \\\n \t  if test -f $$file; then d=.; else d=$(srcdir); fi; \\\n \t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$/$$file $(distdir)/$$file; \\\n+\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n \t  else \\\n \t    test -f $(distdir)/$$file \\\n \t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\\n@@ -498,37 +506,61 @@ $(top_builddir)/stamp-cshadow: $(top_srcdir)/mkinclosure \\\n \trm -f  $(top_builddir)/stamp-cshadow \n \techo \"done\" > $(top_builddir)/stamp-cshadow \n \n-# We have our own special, needlessly complicated installation routine\n+# We have our own special, ridiculously complicated installation routine\n # here, as automake/autoconf is currently brain-damaged when it comes\n-# to installing sub-directories of headers.\n-install-data-local: myinstallheaders\n-\n-# NB: As libio_headers may be empty, need this to make sure bash doesn't\n-# choke on an empty for... loop by using libio_headers_install\n-myinstallheaders: $(headers:%=$(myincludep)/%)\n+# to installing sub-directories of headers. In particular, we want to\n+# 1) install build headers from (blddir)/include/bits -> (install)/bits\n+# 2) install source headers from\n+#      (srcdir)/include/bits -> (install)/bits\n+#      (srcdir)/include/ext -> (install)/ext\n+#      (srcdir)/include/backward -> (install)/backward\n+#      ... and the always entertaining \"C\" compatibility bits\n+#      where * represents configure-time directory switching\n+#      (srcdir)/include/c* -> (install)/\n+#      (srcdir)/include/c*/bits -> (install)/bits\n+#      (srcdir)/include/c*/sys -> (install)/sys\n+install-data-local: myinstalldirs myinstallheaders\n+\n+# NB: installation of shadow header directories is not attempted.\n+myinstalldirs:\n+\tif test -z \"$(MULTISUBDIR)\"; then \\\n+\t$(mkinstalldirs) $(DESTDIR)$(myincludep)/bits; \\\n+\t$(mkinstalldirs) $(DESTDIR)$(myincludep)/backward; \\\n+\t$(mkinstalldirs) $(DESTDIR)$(myincludep)/ext; \\\n+\tfi\n+myinstallheaders: \n \tif test -z \"$(MULTISUBDIR)\"; then \\\n+\tfor i in $(base_headers); do \\\n+        echo \"$(INSTALL_DATA) $(src_incdir)/$$i $(myincludep)/bits/\"; \\\n+\t  $(INSTALL_DATA) $(src_incdir)/$$i $(myincludep)/bits/; \\\n+\tdone; \\\n+\tfor i in $(ext_headers); do \\\n+        echo \"$(INSTALL_DATA) $(src_incdir)/$$i $(myincludep)/ext/\"; \\\n+\t  $(INSTALL_DATA) $(src_incdir)/$$i $(myincludep)/ext/; \\\n+\tdone; \\\n+\tfor i in $(backward_headers); do \\\n+        echo \"$(INSTALL_DATA) $(src_incdir)/$$i $(myincludep)/backward/\"; \\\n+\t  $(INSTALL_DATA) $(src_incdir)/$$i $(myincludep)/backward/; \\\n+\tdone; \\\n+\tfor i in $(c_base_headers); do \\\n+        echo \"$(INSTALL_DATA) $(c_incdir)/$$i $(myincludep)/bits/\"; \\\n+\t  $(INSTALL_DATA) $(c_incdir)/$$i $(myincludep)/bits/; \\\n+\tdone; \\\n \tfor i in $(std_headers); do \\\n-\t  echo \"$(INSTALL_DATA) $(GLIBCPP_INCLUDE_DIR)/std/$$i $(myincludep)\";\\\n-\t        $(INSTALL_DATA) $(GLIBCPP_INCLUDE_DIR)/std/$$i $(myincludep); \\\n+\techo \"$(INSTALL_DATA) $(src_incdir)/std/$$i $(myincludep)\";\\\n+\t  $(INSTALL_DATA) $(src_incdir)/std/$$i $(myincludep); \\\n \tdone; \\\n \tfor i in $(build_headers); do \\\n-          echo \"$(INSTALL_DATA) $(top_builddir)/include/$$i $(myincludep)/bits/\"; \\\n-\t     $(INSTALL_DATA) $(top_builddir)/include/$$i $(myincludep)/bits/; \\\n+        echo \"$(INSTALL_DATA) $(bld_incdir)/$$i $(myincludep)/bits/\"; \\\n+\t  $(INSTALL_DATA) $(bld_incdir)/$$i $(myincludep)/bits/; \\\n \tdone; \\\n \tlibio_headers_install='$(libio_headers)'; \\\n \tfor i in $$libio_headers_install; do \\\n-          echo \"$(INSTALL_DATA) $$i $(myincludep)\"; \\\n-                $(INSTALL_DATA) $$i $(myincludep); \\\n+        echo \"$(INSTALL_DATA) $$i $(myincludep)\"; \\\n+          $(INSTALL_DATA) $$i $(myincludep); \\\n \tdone; \\\n \tfi;\n \n-$(headers:%=$(myincludep)/%): $(myincludep)/%: %\n-\tif test -z \"$(MULTISUBDIR)\"; then \\\n-\t$(mkinstalldirs) $(@D); \\\n-\techo \" $(INSTALL_DATA) $^ $@\"; \\\n-\t$(INSTALL_DATA) $^ $@; \\\n-\tfi;\n-\n # We have to handle misc-inst.cc and locale-inst.cc in a special way\n # since we cannot instantiate all classes due to missing definitions\n # for things like vptrs, type_info bits, etc. when using\n@@ -551,14 +583,6 @@ wstring-inst.lo: string-inst.cc\n # Alexandre put this in here for some libtool-related reason.\n all: libstdc++.INC\n libstdc++.INC: Makefile\n-\t$(MAKE) \\\n-\t  top_builddir=`CDPATH=:. && cd $(top_builddir) && pwd` \\\n-\t  top_srcdir=`CDPATH=:. && cd $(top_srcdir) && pwd` \\\n-\t  tmp-$@\n-\t-rm -f $@\n-\tmv tmp-$@ $@\n-\n-tmp-libstdc++.INC: Makefile\n \techo $(INCLUDES) > $@\n \n # Tell versions [3.59,3.63) of GNU make to not export all variables."}]}