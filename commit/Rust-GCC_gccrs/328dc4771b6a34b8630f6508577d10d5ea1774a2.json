{"sha": "328dc4771b6a34b8630f6508577d10d5ea1774a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI4ZGM0NzcxYjZhMzRiODYzMGY2NTA4NTc3ZDEwZDVlYTE3NzRhMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-05-22T08:55:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-05-22T08:55:59Z"}, "message": "tree-vect-patterns.c (vect_recog_dot_prod_pattern): Replace assert with guard, remove check on detected reduction.\n\n2015-05-22  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-patterns.c (vect_recog_dot_prod_pattern): Replace\n\tassert with guard, remove check on detected reduction.\n\t(vect_recog_sad_pattern): Likewise.\n\t(vect_recog_widen_sum_pattern): Likewise.\n\nFrom-SVN: r223525", "tree": {"sha": "b799f01dd8622713cf303bcf5b93e73b3cc66605", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b799f01dd8622713cf303bcf5b93e73b3cc66605"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/328dc4771b6a34b8630f6508577d10d5ea1774a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/328dc4771b6a34b8630f6508577d10d5ea1774a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/328dc4771b6a34b8630f6508577d10d5ea1774a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/328dc4771b6a34b8630f6508577d10d5ea1774a2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6333ad3d459e4734c0cec7eb4e2c89097c9a1466", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6333ad3d459e4734c0cec7eb4e2c89097c9a1466", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6333ad3d459e4734c0cec7eb4e2c89097c9a1466"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "4a6a81edec2adc9807b292b9d24ee73f96b8f851", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328dc4771b6a34b8630f6508577d10d5ea1774a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328dc4771b6a34b8630f6508577d10d5ea1774a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=328dc4771b6a34b8630f6508577d10d5ea1774a2", "patch": "@@ -1,3 +1,10 @@\n+2015-05-22  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-patterns.c (vect_recog_dot_prod_pattern): Replace\n+\tassert with guard, remove check on detected reduction.\n+\t(vect_recog_sad_pattern): Likewise.\n+\t(vect_recog_widen_sum_pattern): Likewise.\n+\n 2015-05-22  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/arm_neon.h (vaeseq_u8): Add __extension__ and"}, {"sha": "42002c464d0b995ad259a0be3f84fe0ba3e112ea", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328dc4771b6a34b8630f6508577d10d5ea1774a2/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328dc4771b6a34b8630f6508577d10d5ea1774a2/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=328dc4771b6a34b8630f6508577d10d5ea1774a2", "patch": "@@ -318,6 +318,11 @@ vect_recog_dot_prod_pattern (vec<gimple> *stmts, tree *type_in,\n \n   loop = LOOP_VINFO_LOOP (loop_info);\n \n+  /* We don't allow changing the order of the computation in the inner-loop\n+     when doing outer-loop vectorization.  */\n+  if (loop && nested_in_vect_loop_p (loop, last_stmt))\n+    return NULL;\n+\n   if (!is_gimple_assign (last_stmt))\n     return NULL;\n \n@@ -366,8 +371,6 @@ vect_recog_dot_prod_pattern (vec<gimple> *stmts, tree *type_in,\n     {\n       gimple def_stmt;\n \n-      if (STMT_VINFO_DEF_TYPE (stmt_vinfo) != vect_reduction_def)\n-        return NULL;\n       oprnd0 = gimple_assign_rhs1 (last_stmt);\n       oprnd1 = gimple_assign_rhs2 (last_stmt);\n       if (!types_compatible_p (TREE_TYPE (oprnd0), type)\n@@ -469,10 +472,6 @@ vect_recog_dot_prod_pattern (vec<gimple> *stmts, tree *type_in,\n       dump_printf (MSG_NOTE, \"\\n\");\n     }\n \n-  /* We don't allow changing the order of the computation in the inner-loop\n-     when doing outer-loop vectorization.  */\n-  gcc_assert (!nested_in_vect_loop_p (loop, last_stmt));\n-\n   return pattern_stmt;\n }\n \n@@ -533,6 +532,11 @@ vect_recog_sad_pattern (vec<gimple> *stmts, tree *type_in,\n \n   loop = LOOP_VINFO_LOOP (loop_info);\n \n+  /* We don't allow changing the order of the computation in the inner-loop\n+     when doing outer-loop vectorization.  */\n+  if (loop && nested_in_vect_loop_p (loop, last_stmt))\n+    return NULL;\n+\n   if (!is_gimple_assign (last_stmt))\n     return NULL;\n \n@@ -586,8 +590,6 @@ vect_recog_sad_pattern (vec<gimple> *stmts, tree *type_in,\n     {\n       gimple def_stmt;\n \n-      if (STMT_VINFO_DEF_TYPE (stmt_vinfo) != vect_reduction_def)\n-        return NULL;\n       plus_oprnd0 = gimple_assign_rhs1 (last_stmt);\n       plus_oprnd1 = gimple_assign_rhs2 (last_stmt);\n       if (!types_compatible_p (TREE_TYPE (plus_oprnd0), sum_type)\n@@ -703,10 +705,6 @@ vect_recog_sad_pattern (vec<gimple> *stmts, tree *type_in,\n       dump_printf (MSG_NOTE, \"\\n\");\n     }\n \n-  /* We don't allow changing the order of the computation in the inner-loop\n-     when doing outer-loop vectorization.  */\n-  gcc_assert (!nested_in_vect_loop_p (loop, last_stmt));\n-\n   return pattern_stmt;\n }\n \n@@ -1201,6 +1199,11 @@ vect_recog_widen_sum_pattern (vec<gimple> *stmts, tree *type_in,\n \n   loop = LOOP_VINFO_LOOP (loop_info);\n \n+  /* We don't allow changing the order of the computation in the inner-loop\n+     when doing outer-loop vectorization.  */\n+  if (loop && nested_in_vect_loop_p (loop, last_stmt))\n+    return NULL;\n+\n   if (!is_gimple_assign (last_stmt))\n     return NULL;\n \n@@ -1219,9 +1222,6 @@ vect_recog_widen_sum_pattern (vec<gimple> *stmts, tree *type_in,\n   if (gimple_assign_rhs_code (last_stmt) != PLUS_EXPR)\n     return NULL;\n \n-  if (STMT_VINFO_DEF_TYPE (stmt_vinfo) != vect_reduction_def)\n-    return NULL;\n-\n   oprnd0 = gimple_assign_rhs1 (last_stmt);\n   oprnd1 = gimple_assign_rhs2 (last_stmt);\n   if (!types_compatible_p (TREE_TYPE (oprnd0), type)\n@@ -1255,10 +1255,6 @@ vect_recog_widen_sum_pattern (vec<gimple> *stmts, tree *type_in,\n       dump_printf (MSG_NOTE, \"\\n\");\n     }\n \n-  /* We don't allow changing the order of the computation in the inner-loop\n-     when doing outer-loop vectorization.  */\n-  gcc_assert (!nested_in_vect_loop_p (loop, last_stmt));\n-\n   return pattern_stmt;\n }\n "}]}