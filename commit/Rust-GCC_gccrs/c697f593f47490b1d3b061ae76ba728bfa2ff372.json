{"sha": "c697f593f47490b1d3b061ae76ba728bfa2ff372", "node_id": "C_kwDOANBUbNoAKGM2OTdmNTkzZjQ3NDkwYjFkM2IwNjFhZTc2YmE3MjhiZmEyZmYzNzI", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-04-09T22:47:48Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-19T14:05:28Z"}, "message": "[Ada] Get rid of secondary stack for controlled components\n\nThis eliminates the use of the secondary stack to return composite types\nwith controlled components from functions, by exposing the return slot of\nthese functions through the support interface of memory pools, much like\nfor the secondary stack itself.  This is piggybacked on the support of a\nspecific intrinsic function by the code generator, and can be disabled if\nthis support is not available, as well with the -gnatd_r debug switch.\n\nThe change also streamlines a bit the implementation by consistently using\nthe Needs_Finalization predicate, or its derivatives, in various places.\n\ngcc/ada/\n\n\t* Makefile.rtl (GNATRTL_NONTASKING_OBJS): Add s-retsta.\n\t* debug.adb (d_r): Document usage.\n\t* exp_ch4.adb (Expand_N_Allocato): Deal with the return stack pool.\n\t* exp_ch6.adb (Expand_Simple_Function_Return): Replace calls to\n\tRequires_Transient_Scope with Returns_On_Secondary_Stack.  Deal\n\twith types that need finalization returned on the primary stack,\n\tuse CW_Or_Needs_Finalization for those returned on the secondary.\n\t* exp_util.adb (Build_Allocate_Deallocate_Proc): Return early\n\tfor the return stack pool.\n\t(Remove_Side_Effects): Call CW_Or_Needs_Finalization.\n\t* fe.h (Requires_Transient_Scope): Delete.\n\t(Returns_On_Secondary_Stack): Declare.\n\t* gnat1drv.adb (Adjust_Global_Switches): Set Back_End_Return_Slot\n\tto False when generating C code or if -gnatd_r is specified.\n\t* opt.ads (Back_End_Return_Slot): New boolean variable.\n\t* rtsfind.ads (RTU_Id): Add System_Return_Stack.\n\t(RE_Id): Add RE_RS_Allocate and RE_RS_Pool.\n\t(RE_Unit_Table): Add entries for RE_RS_Allocate and RE_RS_Pool.\n\t* sem_util.ads (CW_Or_Has_Controlled_Part): Delete.\n\t(CW_Or_Needs_Finalization): Declare.\n\t(Requires_Transient_Scope): Adjust description.\n\t(Returns_On_Secondary_Stack): Declare.\n\t* sem_util.adb (Compute_Returns_By_Ref): Set Returns_By_Ref on types\n\twhich need finalization if they are returned on the secondary stack.\n\t(CW_Or_Has_Controlled_Part): Rename to...\n\t(CW_Or_Needs_Finalization): ...this.\n\t(Requires_Transient_Scope): Move bulk of implementation to...\n\t(Returns_On_Secondary_Stack): ...here.  Return true for types which\n\tneed finalization only if the back-end return slot is not supported.\n\t* libgnat/s-retsta.ads: New file.\n\t* gcc-interface/ada-builtin-types.def (BT_FN_PTR_SSIZE): Define.\n\t* gcc-interface/ada-builtins.def (return_slot): Likewise.\n\t* gcc-interface/ada-tree.h (BUILT_IN_RETURN_SLOT): Likewise.\n\t* gcc-interface/decl.cc (gnat_to_gnu_subprog_type): Replace call to\n\tRequires_Transient_Scope with Returns_On_Secondary_Stack.\n\t* gcc-interface/trans.cc (gnat_to_gnu) <N_Simple_Return_Statement>:\n\tIn the return by invisible reference, skip the copy if the source\n\tis the same as the destination.\n\t* gcc-interface/utils2.cc (build_call_alloc_dealloc_proc): Deal with\n\tthe return stack pool.", "tree": {"sha": "c9b4883d40c89883b0609a6d8289b1118e64339f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9b4883d40c89883b0609a6d8289b1118e64339f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c697f593f47490b1d3b061ae76ba728bfa2ff372", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c697f593f47490b1d3b061ae76ba728bfa2ff372", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c697f593f47490b1d3b061ae76ba728bfa2ff372", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c697f593f47490b1d3b061ae76ba728bfa2ff372/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e08f1aad6fbc1cab4604f01f6fcf66349bb6c713", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e08f1aad6fbc1cab4604f01f6fcf66349bb6c713", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e08f1aad6fbc1cab4604f01f6fcf66349bb6c713"}], "stats": {"total": 498, "additions": 334, "deletions": 164}, "files": [{"sha": "ed3d33408d80735b9b0b67fba26c7a49fb750f12", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=c697f593f47490b1d3b061ae76ba728bfa2ff372", "patch": "@@ -739,6 +739,7 @@ GNATRTL_NONTASKING_OBJS= \\\n   s-regpat$(objext) \\\n   s-resfil$(objext) \\\n   s-restri$(objext) \\\n+  s-retsta$(objext) \\\n   s-rident$(objext) \\\n   s-rpc$(objext)    \\\n   s-scaval$(objext) \\"}, {"sha": "a03c88d97f92fcf9bec17a10a94ddc2c399e665a", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=c697f593f47490b1d3b061ae76ba728bfa2ff372", "patch": "@@ -156,7 +156,7 @@ package body Debug is\n    --  d_o\n    --  d_p  Ignore assertion pragmas for elaboration\n    --  d_q\n-   --  d_r\n+   --  d_r  Disable the use of the return slot in functions\n    --  d_s  Stop elaboration checks on synchronous suspension\n    --  d_t  In LLVM-based CCG, dump LLVM IR after transformations are done\n    --  d_u  In LLVM-based CCG, dump flows\n@@ -993,6 +993,11 @@ package body Debug is\n    --       semantics of invariants and postconditions in both the static and\n    --       dynamic elaboration models.\n \n+   --  d_r  The compiler does not make use of the return slot in the expansion\n+   --       of functions returning a by-reference type. If this use is required\n+   --       for these functions to return on the primary stack, then they are\n+   --       changed to return on the secondary stack instead.\n+\n    --  d_s  The compiler stops the examination of a task body once it reaches\n    --       a call to routine Ada.Synchronous_Task_Control.Suspend_Until_True\n    --       or Ada.Synchronous_Barriers.Wait_For_Release."}, {"sha": "14e9b0e508e9512bd861b0d21a55bdb766596fb5", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=c697f593f47490b1d3b061ae76ba728bfa2ff372", "patch": "@@ -4537,7 +4537,10 @@ package body Exp_Ch4 is\n          if Present (Pool) then\n             Set_Storage_Pool (N, Pool);\n \n-            if Is_RTE (Pool, RE_SS_Pool) then\n+            if Is_RTE (Pool, RE_RS_Pool) then\n+               Set_Procedure_To_Call (N, RTE (RE_RS_Allocate));\n+\n+            elsif Is_RTE (Pool, RE_SS_Pool) then\n                Check_Restriction (No_Secondary_Stack, N);\n                Set_Procedure_To_Call (N, RTE (RE_SS_Allocate));\n "}, {"sha": "e95c6c5b5a7f83ddf5b84922e9268377adf5d5f5", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 79, "deletions": 12, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=c697f593f47490b1d3b061ae76ba728bfa2ff372", "patch": "@@ -7325,10 +7325,9 @@ package body Exp_Ch6 is\n       --  A return statement from an ignored Ghost function does not use the\n       --  secondary stack (or any other one).\n \n-      elsif not Requires_Transient_Scope (R_Type)\n+      elsif not Returns_On_Secondary_Stack (R_Type)\n         or else Is_Ignored_Ghost_Entity (Scope_Id)\n       then\n-\n          --  Mutable records with variable-length components are not returned\n          --  on the sec-stack, so we need to make sure that the back end will\n          --  only copy back the size of the actual value, and not the maximum\n@@ -7341,6 +7340,7 @@ package body Exp_Ch6 is\n             Ubt  : constant Entity_Id := Underlying_Type (Base_Type (Exp_Typ));\n             Decl : Node_Id;\n             Ent  : Entity_Id;\n+\n          begin\n             if not Exp_Is_Function_Call\n               and then Has_Discriminants (Ubt)\n@@ -7355,6 +7355,72 @@ package body Exp_Ch6 is\n             end if;\n          end;\n \n+         --  For types which need finalization, do the allocation on the return\n+         --  stack manually in order to call Adjust at the right time:\n+\n+         --    type Ann is access R_Type;\n+         --    for Ann'Storage_pool use rs_pool;\n+         --    Rnn : Ann := new Exp_Typ'(Exp);\n+         --    return Rnn.all;\n+\n+         --  but optimize the case where the result is a function call that\n+         --  also needs finalization. In this case the result is already on\n+         --  the return stack and no further processing is required.\n+\n+         if Present (Utyp)\n+           and then Needs_Finalization (Utyp)\n+           and then not (Nkind (Exp) = N_Function_Call\n+                          and then Needs_Finalization (Exp_Typ))\n+         then\n+            declare\n+               Loc        : constant Source_Ptr := Sloc (N);\n+               Acc_Typ    : constant Entity_Id := Make_Temporary (Loc, 'A');\n+               Alloc_Node : Node_Id;\n+               Temp       : Entity_Id;\n+\n+            begin\n+               Mutate_Ekind (Acc_Typ, E_Access_Type);\n+\n+               Set_Associated_Storage_Pool (Acc_Typ, RTE (RE_RS_Pool));\n+\n+               --  This is an allocator for the return stack, and it's fine\n+               --  to have Comes_From_Source set False on it, as gigi knows not\n+               --  to flag it as a violation of No_Implicit_Heap_Allocations.\n+\n+               Alloc_Node :=\n+                 Make_Allocator (Loc,\n+                   Expression =>\n+                     Make_Qualified_Expression (Loc,\n+                       Subtype_Mark => New_Occurrence_Of (Exp_Typ, Loc),\n+                       Expression   => Relocate_Node (Exp)));\n+\n+               --  We do not want discriminant checks on the declaration,\n+               --  given that it gets its value from the allocator.\n+\n+               Set_No_Initialization (Alloc_Node);\n+\n+               Temp := Make_Temporary (Loc, 'R', Alloc_Node);\n+\n+               Insert_Actions (Exp, New_List (\n+                 Make_Full_Type_Declaration (Loc,\n+                   Defining_Identifier => Acc_Typ,\n+                   Type_Definition     =>\n+                     Make_Access_To_Object_Definition (Loc,\n+                       Subtype_Indication => Subtype_Ind)),\n+\n+                 Make_Object_Declaration (Loc,\n+                   Defining_Identifier => Temp,\n+                   Object_Definition   => New_Occurrence_Of (Acc_Typ, Loc),\n+                   Expression          => Alloc_Node)));\n+\n+               Rewrite (Exp,\n+                 Make_Explicit_Dereference (Loc,\n+                 Prefix => New_Occurrence_Of (Temp, Loc)));\n+\n+               Analyze_And_Resolve (Exp, R_Type);\n+            end;\n+         end if;\n+\n       --  Here if secondary stack is used\n \n       else\n@@ -7372,8 +7438,8 @@ package body Exp_Ch6 is\n          --  wrong in the case of a controlled type, where gigi does not know\n          --  how to do a copy.)\n \n-         pragma Assert (Requires_Transient_Scope (R_Type));\n-         if Exp_Is_Function_Call and then Requires_Transient_Scope (Exp_Typ)\n+         if Exp_Is_Function_Call\n+           and then Returns_On_Secondary_Stack (Exp_Typ)\n          then\n             Set_By_Ref (N);\n \n@@ -7393,19 +7459,20 @@ package body Exp_Ch6 is\n \n             Analyze_And_Resolve (Exp, R_Type);\n \n-         --  For controlled types, do the allocation on the secondary stack\n-         --  manually in order to call adjust at the right time:\n+         --  For types which both need finalization and are returned on the\n+         --  secondary stack, do the allocation on secondary stack manually\n+         --  in order to call Adjust at the right time:\n \n-         --    type Anon1 is access R_Type;\n-         --    for Anon1'Storage_pool use ss_pool;\n-         --    Anon2 : anon1 := new R_Type'(expr);\n-         --    return Anon2.all;\n+         --    type Ann is access R_Type;\n+         --    for Ann'Storage_pool use ss_pool;\n+         --    Rnn : Ann := new Exp_Typ'(Exp);\n+         --    return Rnn.all;\n \n-         --  We do the same for classwide types that are not potentially\n+         --  And we do the same for class-wide types that are not potentially\n          --  controlled (by the virtue of restriction No_Finalization) because\n          --  gigi is not able to properly allocate class-wide types.\n \n-         elsif CW_Or_Has_Controlled_Part (Utyp) then\n+         elsif CW_Or_Needs_Finalization (Utyp) then\n             declare\n                Loc        : constant Source_Ptr := Sloc (N);\n                Acc_Typ    : constant Entity_Id := Make_Temporary (Loc, 'A');"}, {"sha": "31a2d5c31654537597bde0c6a8331f31c00652e8", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=c697f593f47490b1d3b061ae76ba728bfa2ff372", "patch": "@@ -897,6 +897,11 @@ package body Exp_Util is\n       if No (Pool_Id) then\n          return;\n \n+      --  Do not process allocations from the return stack\n+\n+      elsif Is_RTE (Pool_Id, RE_RS_Pool) then\n+         return;\n+\n       --  Do not process allocations on / deallocations from the secondary\n       --  stack, except for access types used to implement indirect temps.\n \n@@ -12108,7 +12113,7 @@ package body Exp_Util is\n       elsif Nkind (Exp) = N_Unchecked_Type_Conversion\n         and then not Safe_Unchecked_Type_Conversion (Exp)\n       then\n-         if CW_Or_Has_Controlled_Part (Exp_Type) then\n+         if CW_Or_Needs_Finalization (Exp_Type) then\n \n             --  Use a renaming to capture the expression, rather than create\n             --  a controlled temporary."}, {"sha": "4be9d94685e9b5c30686478077d34a22c6a0f62f", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=c697f593f47490b1d3b061ae76ba728bfa2ff372", "patch": "@@ -298,14 +298,14 @@ extern Boolean Compile_Time_Known_Value\t(Node_Id);\n #define Is_Expression_Function\t\tsem_util__is_expression_function\n #define Is_Variable_Size_Record \tsem_util__is_variable_size_record\n #define Next_Actual\t\t\tsem_util__next_actual\n-#define Requires_Transient_Scope\tsem_util__requires_transient_scope\n-\n-extern Entity_Id Defining_Entity\t(Node_Id);\n-extern Node_Id First_Actual\t\t(Node_Id);\n-extern Boolean Is_Expression_Function\t(Entity_Id);\n-extern Boolean Is_Variable_Size_Record \t(Entity_Id);\n-extern Node_Id Next_Actual\t\t(Node_Id);\n-extern Boolean Requires_Transient_Scope\t(Entity_Id);\n+#define Returns_On_Secondary_Stack\tsem_util__returns_on_secondary_stack\n+\n+extern Entity_Id Defining_Entity\t\t(Node_Id);\n+extern Node_Id First_Actual\t\t\t(Node_Id);\n+extern Boolean Is_Expression_Function\t\t(Entity_Id);\n+extern Boolean Is_Variable_Size_Record \t\t(Entity_Id);\n+extern Node_Id Next_Actual\t\t\t(Node_Id);\n+extern Boolean Returns_On_Secondary_Stack\t(Entity_Id);\n \n /* sinfo: */\n "}, {"sha": "000d429042959759e6c054e6cdd2537fa5ecf463", "filename": "gcc/ada/gcc-interface/ada-builtin-types.def", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Fgcc-interface%2Fada-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Fgcc-interface%2Fada-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fada-builtin-types.def?ref=c697f593f47490b1d3b061ae76ba728bfa2ff372", "patch": "@@ -1,7 +1,7 @@\n /* This file contains the type definitions for the builtins exclusively\n    used in the GNU Ada compiler.\n \n-   Copyright (C) 2019 Free Software Foundation, Inc.\n+   Copyright (C) 2019-2022 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -22,4 +22,5 @@ along with GCC; see the file COPYING3.  If not see\n /* See builtin-types.def for details.  */\n \n DEF_FUNCTION_TYPE_1 (BT_FN_BOOL_BOOL, BT_BOOL, BT_BOOL)\n+DEF_FUNCTION_TYPE_1 (BT_FN_PTR_SSIZE, BT_PTR, BT_SSIZE)\n DEF_FUNCTION_TYPE_2 (BT_FN_BOOL_BOOL_BOOL, BT_BOOL, BT_BOOL, BT_BOOL)"}, {"sha": "8ba89a80e70b8c42c63bba5a92885f0c43e7305d", "filename": "gcc/ada/gcc-interface/ada-builtins.def", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Fgcc-interface%2Fada-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Fgcc-interface%2Fada-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fada-builtins.def?ref=c697f593f47490b1d3b061ae76ba728bfa2ff372", "patch": "@@ -1,7 +1,7 @@\n /* This file contains the definitions for the builtins exclusively used\n    in the GNU Ada compiler.\n \n-   Copyright (C) 2019 Free Software Foundation, Inc.\n+   Copyright (C) 2019-2022 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -28,3 +28,4 @@ along with GCC; see the file COPYING3.  If not see\n DEF_ADA_BUILTIN        (BUILT_IN_EXPECT, \"expect\", BT_FN_BOOL_BOOL_BOOL, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_ADA_BUILTIN        (BUILT_IN_LIKELY, \"likely\", BT_FN_BOOL_BOOL, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_ADA_BUILTIN        (BUILT_IN_UNLIKELY, \"unlikely\", BT_FN_BOOL_BOOL, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_ADA_BUILTIN        (BUILT_IN_RETURN_SLOT, \"return_slot\", BT_FN_PTR_SSIZE, ATTR_CONST_NOTHROW_LEAF_LIST)"}, {"sha": "ca718f48c79a287ba6be4dd6eca95351b86ac08e", "filename": "gcc/ada/gcc-interface/ada-tree.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fada-tree.h?ref=c697f593f47490b1d3b061ae76ba728bfa2ff372", "patch": "@@ -577,5 +577,6 @@ do {\t\t\t\t\t\t   \\\n \n /* Small kludge to be able to define Ada built-in functions locally.\n    We overload them on top of the C++ coroutines builtin functions.  */\n-#define BUILT_IN_LIKELY   BUILT_IN_CORO_PROMISE\n-#define BUILT_IN_UNLIKELY BUILT_IN_CORO_RESUME\n+#define BUILT_IN_LIKELY      BUILT_IN_CORO_PROMISE\n+#define BUILT_IN_UNLIKELY    BUILT_IN_CORO_RESUME\n+#define BUILT_IN_RETURN_SLOT BUILT_IN_CORO_DESTROY"}, {"sha": "c096b0d08d35b50d1f017d9a8f85b3c0f275210d", "filename": "gcc/ada/gcc-interface/decl.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.cc?ref=c697f593f47490b1d3b061ae76ba728bfa2ff372", "patch": "@@ -5838,10 +5838,8 @@ gnat_to_gnu_subprog_type (Entity_Id gnat_subprog, bool definition,\n \t  return_unconstrained_p = true;\n \t}\n \n-      /* Likewise, if the return type requires a transient scope, the return\n-\t value will also be allocated on the secondary stack so the actual\n-\t return type is the reference type.  */\n-      else if (Requires_Transient_Scope (gnat_return_type))\n+      /* This is for the other types returned on the secondary stack.  */\n+      else if (Returns_On_Secondary_Stack (gnat_return_type))\n \t{\n \t  gnu_return_type = build_reference_type (gnu_return_type);\n \t  return_unconstrained_p = true;"}, {"sha": "b8a0d5d5d30bb8ea2ed8491610e3a2b8d9c8f973", "filename": "gcc/ada/gcc-interface/trans.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Fgcc-interface%2Ftrans.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Fgcc-interface%2Ftrans.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.cc?ref=c697f593f47490b1d3b061ae76ba728bfa2ff372", "patch": "@@ -7456,6 +7456,14 @@ gnat_to_gnu (Node_Id gnat_node)\n \t\t\t\t    gnu_ret_obj);\n \t\tgnu_result = build2 (INIT_EXPR, void_type_node,\n \t\t\t\t     gnu_ret_deref, gnu_ret_val);\n+\t\t/* Avoid a useless copy with __builtin_return_slot.  */\n+\t\tif (TREE_CODE (gnu_ret_val) == INDIRECT_REF)\n+\t\t  gnu_result\n+\t\t    = build3 (COND_EXPR, void_type_node,\n+\t\t\t      fold_build2 (NE_EXPR, boolean_type_node,\n+\t\t\t\t\t   TREE_OPERAND (gnu_ret_val, 0),\n+\t\t\t\t\t   gnu_ret_obj),\n+\t\t\t      gnu_result, NULL_TREE);\n \t\tadd_stmt_with_node (gnu_result, gnat_node);\n \t\tgnu_ret_val = NULL_TREE;\n \t      }"}, {"sha": "ae81a0d42a4d7b07eca0ddd710ad49c045a0afe3", "filename": "gcc/ada/gcc-interface/utils2.cc", "status": "modified", "additions": 36, "deletions": 5, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Fgcc-interface%2Futils2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Fgcc-interface%2Futils2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.cc?ref=c697f593f47490b1d3b061ae76ba728bfa2ff372", "patch": "@@ -2141,9 +2141,9 @@ build_call_alloc_dealloc_proc (tree gnu_obj, tree gnu_size, tree gnu_type,\n   tree gnu_proc = gnat_to_gnu (gnat_proc);\n   tree gnu_call;\n \n-  /* A storage pool's underlying type is a record type (for both predefined\n-     storage pools and GNAT simple storage pools). The secondary stack uses\n-     the same mechanism, but its pool object (SS_Pool) is an integer.  */\n+  /* A storage pool's underlying type is a record type for both predefined\n+     storage pools and GNAT simple storage pools.  The return and secondary\n+     stacks use the same mechanism, but their pool object is an integer.  */\n   if (Is_Record_Type (Underlying_Type (Etype (gnat_pool))))\n     {\n       /* The size is the third parameter; the alignment is the\n@@ -2170,7 +2170,6 @@ build_call_alloc_dealloc_proc (tree gnu_obj, tree gnu_size, tree gnu_type,\n \t\t\t\t      gnu_size, gnu_align);\n     }\n \n-  /* Secondary stack case.  */\n   else\n     {\n       /* The size is the second parameter.  */\n@@ -2180,10 +2179,42 @@ build_call_alloc_dealloc_proc (tree gnu_obj, tree gnu_size, tree gnu_type,\n \n       gnu_size = convert (gnu_size_type, gnu_size);\n \n+      if (DECL_BUILT_IN_CLASS (gnu_proc) == BUILT_IN_FRONTEND\n+\t  && DECL_FE_FUNCTION_CODE (gnu_proc) == BUILT_IN_RETURN_SLOT)\n+\t{\n+\t  /* This must be an allocation of the return stack in a function that\n+\t     returns by invisible reference.  */\n+\t  gcc_assert (!gnu_obj);\n+\t  gcc_assert (current_function_decl\n+\t\t      && TREE_ADDRESSABLE (TREE_TYPE (current_function_decl)));\n+\t  tree gnu_ret_size;\n+\n+\t  gnu_call = DECL_RESULT (current_function_decl);\n+\n+\t  /* The allocation has alreay been done by the caller so we check that\n+\t     we are not going to overflow the return slot.  */\n+\t  if (TYPE_CI_CO_LIST (TREE_TYPE (current_function_decl)))\n+\t    gnu_ret_size\n+\t      = TYPE_SIZE_UNIT\n+                (TREE_TYPE (TYPE_FIELDS (TREE_TYPE (TREE_TYPE (gnu_call)))));\n+\t  else\n+\t    gnu_ret_size = TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (gnu_call)));\n+\n+\t  gnu_call\n+\t    = fold_build3 (COND_EXPR, TREE_TYPE (gnu_call),\n+\t\t\t   fold_build2 (LE_EXPR, boolean_type_node,\n+\t\t\t\t        fold_convert (sizetype, gnu_size),\n+\t\t\t\t\tgnu_ret_size),\n+\t\t\t   gnu_call,\n+\t\t\t   build_call_raise (PE_Explicit_Raise, Empty,\n+\t\t\t\t\t     N_Raise_Program_Error));\n+\t}\n+\n       /* The first arg is the address of the object, for a deallocator,\n \t then the size.  */\n-      if (gnu_obj)\n+      else if (gnu_obj)\n \tgnu_call = build_call_n_expr (gnu_proc, 2, gnu_obj, gnu_size);\n+\n       else\n \tgnu_call = build_call_n_expr (gnu_proc, 1, gnu_size);\n     }"}, {"sha": "cd70a141e30b2ff6c48fec8752333c1ab441200c", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=c697f593f47490b1d3b061ae76ba728bfa2ff372", "patch": "@@ -186,6 +186,7 @@ procedure Gnat1drv is\n          Building_Static_Dispatch_Tables := False;\n          Minimize_Expression_With_Actions := True;\n          Expand_Nonbinary_Modular_Ops := True;\n+         Back_End_Return_Slot := False;\n \n          --  Set operating mode to Generate_Code to benefit from full front-end\n          --  expansion (e.g. generics).\n@@ -726,6 +727,12 @@ procedure Gnat1drv is\n          Back_End_Handles_Limited_Types := False;\n       end if;\n \n+      --  Return slot support is disabled if -gnatd_r is specified\n+\n+      if Debug_Flag_Underscore_R then\n+         Back_End_Return_Slot := False;\n+      end if;\n+\n       --  If the inlining level has not been set by the user, compute it from\n       --  the optimization level: 1 at -O1/-O2 (and -Os), 2 at -O3 and above.\n "}, {"sha": "8340341105213875518fc8de05b33d84ec537d10", "filename": "gcc/ada/libgnat/s-retsta.ads", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Flibgnat%2Fs-retsta.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Flibgnat%2Fs-retsta.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-retsta.ads?ref=c697f593f47490b1d3b061ae76ba728bfa2ff372", "patch": "@@ -0,0 +1,57 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                  S Y S T E M . R E T U R N _ S T A C K                   --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--             Copyright (C) 2022, Free Software Foundation, Inc.           --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This small package provides direct access to the return stack of the code\n+--  generator for functions returning a by-reference type. This return stack\n+--  is the portion of the primary stack that has been allocated by callers of\n+--  the functions and onto which the functions put the result before returning.\n+\n+with System.Storage_Elements;\n+\n+package System.Return_Stack is\n+   pragma Preelaborate;\n+\n+   package SSE renames System.Storage_Elements;\n+\n+   procedure RS_Allocate\n+     (Addr         : out Address;\n+      Storage_Size : SSE.Storage_Count);\n+   pragma Import (Intrinsic, RS_Allocate, \"__builtin_return_slot\");\n+   --  Allocate enough space on the return stack of the invoking task to\n+   --  accommodate a return of size Storage_Size. Return the address of the\n+   --  first byte of the allocation in Addr.\n+\n+private\n+   RS_Pool : Integer;\n+   --  Unused entity that is just present to ease the sharing of the pool\n+   --  mechanism for specific allocation/deallocation in the compiler.\n+\n+end System.Return_Stack;"}, {"sha": "2ce24eec332f5d93c22e92c621734c7fb424fdc5", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=c697f593f47490b1d3b061ae76ba728bfa2ff372", "patch": "@@ -202,7 +202,7 @@ package Opt is\n    --  values.\n \n    Back_End_Handles_Limited_Types : Boolean;\n-   --  This flag is set true if the back end can properly handle limited or\n+   --  This flag is set True if the back end can properly handle limited or\n    --  other by reference types, and avoid copies. If this flag is False, then\n    --  the front end does special expansion for if/case expressions to make\n    --  sure that no copy occurs. If the flag is True, then the expansion for\n@@ -214,12 +214,20 @@ package Opt is\n    Back_End_Inlining : Boolean := False;\n    --  GNAT\n    --  Set True to activate inlining by back-end expansion. This is the normal\n-   --  default mode for gcc targets, so it is True on such targets unless the\n+   --  default mode for GCC targets, so it is True on such targets unless the\n    --  switches -gnatN or -gnatd.z are used. See circuitry in gnat1drv for the\n    --  exact conditions for setting this switch.\n \n    --  WARNING: There is a matching C declaration of this variable in fe.h\n \n+   Back_End_Return_Slot : Boolean := True;\n+   --  GNAT\n+   --  This flag is set True if the return slot of the back end for functions\n+   --  returning a by-reference type can be accessed by means of an intrinsic\n+   --  function callable in the body of these functions. This is the normal\n+   --  default mode for GCC targets, so it is True on such targets unless the\n+   --  switch -gnatd_r is used.\n+\n    Bind_Alternate_Main_Name : Boolean := False;\n    --  GNATBIND\n    --  True if main should be called Alternate_Main_Name.all."}, {"sha": "280e2bda84eec032829bad1a673e599548f7b457", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=c697f593f47490b1d3b061ae76ba728bfa2ff372", "patch": "@@ -428,6 +428,7 @@ package Rtsfind is\n       System_Put_Images,\n       System_Put_Task_Images,\n       System_Relative_Delays,\n+      System_Return_Stack,\n       System_RPC,\n       System_Scalar_Values,\n       System_Secondary_Stack,\n@@ -1843,6 +1844,9 @@ package Rtsfind is\n \n      RO_RD_Delay_For,                    -- System.Relative_Delays\n \n+     RE_RS_Allocate,                     -- System.Return_Stack\n+     RE_RS_Pool,                         -- System.Return_Stack\n+\n      RE_IS_Is1,                          -- System.Scalar_Values\n      RE_IS_Is2,                          -- System.Scalar_Values\n      RE_IS_Is4,                          -- System.Scalar_Values\n@@ -3535,6 +3539,9 @@ package Rtsfind is\n \n      RO_RD_Delay_For                     => System_Relative_Delays,\n \n+     RE_RS_Allocate                      => System_Return_Stack,\n+     RE_RS_Pool                          => System_Return_Stack,\n+\n      RE_Do_Apc                           => System_RPC,\n      RE_Do_Rpc                           => System_RPC,\n      RE_Params_Stream_Type               => System_RPC,\n@@ -4021,6 +4028,7 @@ package Rtsfind is\n       System_Fat_LLF          => True,\n       System_Fat_SFlt         => True,\n       System_Machine_Code     => True,\n+      System_Return_Stack     => True,\n       System_Secondary_Stack  => True,\n       System_Storage_Elements => True,\n       System_Task_Info        => True,"}, {"sha": "c306e2779a4b19bf5c600b7fa79f6a5b16139f61", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 79, "deletions": 113, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=c697f593f47490b1d3b061ae76ba728bfa2ff372", "patch": "@@ -6808,13 +6808,18 @@ package body Sem_Util is\n \n    procedure Compute_Returns_By_Ref (Func : Entity_Id) is\n       Typ  : constant Entity_Id := Etype (Func);\n-      Utyp : constant Entity_Id := Underlying_Type (Typ);\n \n    begin\n       if Is_Limited_View (Typ) then\n          Set_Returns_By_Ref (Func);\n \n-      elsif Present (Utyp) and then CW_Or_Has_Controlled_Part (Utyp) then\n+      --  For class-wide types and types which both need finalization and are\n+      --  returned on the secondary stack, the secondary stack allocation is\n+      --  done by the front end, see Expand_Simple_Function_Return.\n+\n+      elsif Returns_On_Secondary_Stack (Typ)\n+        and then CW_Or_Needs_Finalization (Underlying_Type (Typ))\n+      then\n          Set_Returns_By_Ref (Func);\n       end if;\n    end Compute_Returns_By_Ref;\n@@ -7294,14 +7299,14 @@ package body Sem_Util is\n       end if;\n    end Current_Subprogram;\n \n-   -------------------------------\n-   -- CW_Or_Has_Controlled_Part --\n-   -------------------------------\n+   ------------------------------\n+   -- CW_Or_Needs_Finalization --\n+   ------------------------------\n \n-   function CW_Or_Has_Controlled_Part (T : Entity_Id) return Boolean is\n+   function CW_Or_Needs_Finalization (Typ : Entity_Id) return Boolean is\n    begin\n-      return Is_Class_Wide_Type (T) or else Needs_Finalization (T);\n-   end CW_Or_Has_Controlled_Part;\n+      return Is_Class_Wide_Type (Typ) or else Needs_Finalization (Typ);\n+   end CW_Or_Needs_Finalization;\n \n    -------------------------------\n    -- Deepest_Type_Access_Level --\n@@ -27301,11 +27306,61 @@ package body Sem_Util is\n    -- Requires_Transient_Scope --\n    ------------------------------\n \n-   --  A transient scope is required when variable-sized temporaries are\n-   --  allocated on the secondary stack, or when finalization actions must be\n-   --  generated before the next instruction.\n+   function Requires_Transient_Scope (Typ : Entity_Id) return Boolean is\n+   begin\n+      return Returns_On_Secondary_Stack (Typ) or else Needs_Finalization (Typ);\n+   end Requires_Transient_Scope;\n+\n+   --------------------------\n+   -- Reset_Analyzed_Flags --\n+   --------------------------\n+\n+   procedure Reset_Analyzed_Flags (N : Node_Id) is\n+      function Clear_Analyzed (N : Node_Id) return Traverse_Result;\n+      --  Function used to reset Analyzed flags in tree. Note that we do\n+      --  not reset Analyzed flags in entities, since there is no need to\n+      --  reanalyze entities, and indeed, it is wrong to do so, since it\n+      --  can result in generating auxiliary stuff more than once.\n+\n+      --------------------\n+      -- Clear_Analyzed --\n+      --------------------\n+\n+      function Clear_Analyzed (N : Node_Id) return Traverse_Result is\n+      begin\n+         if Nkind (N) not in N_Entity then\n+            Set_Analyzed (N, False);\n+         end if;\n+\n+         return OK;\n+      end Clear_Analyzed;\n+\n+      procedure Reset_Analyzed is new Traverse_Proc (Clear_Analyzed);\n+\n+   --  Start of processing for Reset_Analyzed_Flags\n+\n+   begin\n+      Reset_Analyzed (N);\n+   end Reset_Analyzed_Flags;\n+\n+   ------------------------\n+   -- Restore_SPARK_Mode --\n+   ------------------------\n+\n+   procedure Restore_SPARK_Mode\n+     (Mode : SPARK_Mode_Type;\n+      Prag : Node_Id)\n+   is\n+   begin\n+      SPARK_Mode        := Mode;\n+      SPARK_Mode_Pragma := Prag;\n+   end Restore_SPARK_Mode;\n+\n+   ---------------------------------\n+   --  Returns_On_Secondary_Stack --\n+   ---------------------------------\n \n-   function Requires_Transient_Scope (Id : Entity_Id) return Boolean is\n+   function Returns_On_Secondary_Stack (Id : Entity_Id) return Boolean is\n       pragma Assert (if Present (Id) then Ekind (Id) in E_Void | Type_Kind);\n \n       function Caller_Known_Size_Record (Typ : Entity_Id) return Boolean;\n@@ -27318,11 +27373,6 @@ package body Sem_Util is\n       --  could be nested inside some other record that is constrained by\n       --  nondiscriminants). That is, the recursive calls are too conservative.\n \n-      procedure Ensure_Minimum_Decoration (Typ : Entity_Id);\n-      --  If Typ is not frozen then add to Typ the minimum decoration required\n-      --  by Requires_Transient_Scope to reliably provide its functionality;\n-      --  otherwise no action is performed.\n-\n       function Large_Max_Size_Mutable (Typ : Entity_Id) return Boolean;\n       --  Returns True if Typ is a nonlimited record with defaulted\n       --  discriminants whose max size makes it unsuitable for allocating on\n@@ -27378,46 +27428,6 @@ package body Sem_Util is\n          return True;\n       end Caller_Known_Size_Record;\n \n-      -------------------------------\n-      -- Ensure_Minimum_Decoration --\n-      -------------------------------\n-\n-      procedure Ensure_Minimum_Decoration (Typ : Entity_Id) is\n-         Comp : Entity_Id;\n-      begin\n-         --  Do not set Has_Controlled_Component on a class-wide equivalent\n-         --  type. See Make_CW_Equivalent_Type.\n-\n-         if not Is_Frozen (Typ)\n-           and then Is_Base_Type (Typ)\n-           and then (Is_Record_Type (Typ)\n-                       or else Is_Concurrent_Type (Typ)\n-                       or else Is_Incomplete_Or_Private_Type (Typ))\n-           and then not Is_Class_Wide_Equivalent_Type (Typ)\n-         then\n-            Comp := First_Component (Typ);\n-            while Present (Comp) loop\n-               if Has_Controlled_Component (Etype (Comp))\n-                 or else\n-                   (Chars (Comp) /= Name_uParent\n-                      and then Is_Controlled (Etype (Comp)))\n-                 or else\n-                   (Is_Protected_Type (Etype (Comp))\n-                      and then\n-                        Present (Corresponding_Record_Type (Etype (Comp)))\n-                      and then\n-                        Has_Controlled_Component\n-                          (Corresponding_Record_Type (Etype (Comp))))\n-               then\n-                  Set_Has_Controlled_Component (Typ);\n-                  exit;\n-               end if;\n-\n-               Next_Component (Comp);\n-            end loop;\n-         end if;\n-      end Ensure_Minimum_Decoration;\n-\n       ------------------------------\n       -- Large_Max_Size_Mutable --\n       ------------------------------\n@@ -27502,7 +27512,7 @@ package body Sem_Util is\n \n       Typ : constant Entity_Id := Underlying_Type (Id);\n \n-   --  Start of processing for Requires_Transient_Scope\n+   --  Start of processing for Returns_On_Secondary_Stack\n \n    begin\n       --  This is a private type which is not completed yet. This can only\n@@ -27513,8 +27523,6 @@ package body Sem_Util is\n          return False;\n       end if;\n \n-      Ensure_Minimum_Decoration (Id);\n-\n       --  Do not expand transient scope for non-existent procedure return or\n       --  string literal types.\n \n@@ -27529,20 +27537,23 @@ package body Sem_Util is\n       elsif Ekind (Typ) = E_Record_Subtype\n         and then Present (Cloned_Subtype (Typ))\n       then\n-         return Requires_Transient_Scope (Cloned_Subtype (Typ));\n+         return Returns_On_Secondary_Stack (Cloned_Subtype (Typ));\n \n       --  Functions returning specific tagged types may dispatch on result, so\n       --  their returned value is allocated on the secondary stack, even in the\n       --  definite case. We must treat nondispatching functions the same way,\n       --  because access-to-function types can point at both, so the calling\n-      --  conventions must be compatible. Is_Tagged_Type includes controlled\n-      --  types and class-wide types. Controlled type temporaries need\n-      --  finalization.\n+      --  conventions must be compatible.\n+\n+      elsif Is_Tagged_Type (Typ) then\n+         return True;\n \n-      --  ???It's not clear why we need to return noncontrolled types with\n-      --  controlled components on the secondary stack.\n+      --  If the return slot of the back end cannot be accessed, then there\n+      --  is no way to call Adjust at the right time for the return object if\n+      --  the type needs finalization, so the return object must be allocated\n+      --  on the secondary stack.\n \n-      elsif Is_Tagged_Type (Typ) or else Has_Controlled_Component (Typ) then\n+      elsif not Back_End_Return_Slot and then Needs_Finalization (Typ) then\n          return True;\n \n       --  Untagged definite subtypes are known size. This includes all\n@@ -27571,52 +27582,7 @@ package body Sem_Util is\n          pragma Assert (Is_Array_Type (Typ) and not Is_Definite_Subtype (Typ));\n          return True;\n       end if;\n-   end Requires_Transient_Scope;\n-\n-   --------------------------\n-   -- Reset_Analyzed_Flags --\n-   --------------------------\n-\n-   procedure Reset_Analyzed_Flags (N : Node_Id) is\n-      function Clear_Analyzed (N : Node_Id) return Traverse_Result;\n-      --  Function used to reset Analyzed flags in tree. Note that we do\n-      --  not reset Analyzed flags in entities, since there is no need to\n-      --  reanalyze entities, and indeed, it is wrong to do so, since it\n-      --  can result in generating auxiliary stuff more than once.\n-\n-      --------------------\n-      -- Clear_Analyzed --\n-      --------------------\n-\n-      function Clear_Analyzed (N : Node_Id) return Traverse_Result is\n-      begin\n-         if Nkind (N) not in N_Entity then\n-            Set_Analyzed (N, False);\n-         end if;\n-\n-         return OK;\n-      end Clear_Analyzed;\n-\n-      procedure Reset_Analyzed is new Traverse_Proc (Clear_Analyzed);\n-\n-   --  Start of processing for Reset_Analyzed_Flags\n-\n-   begin\n-      Reset_Analyzed (N);\n-   end Reset_Analyzed_Flags;\n-\n-   ------------------------\n-   -- Restore_SPARK_Mode --\n-   ------------------------\n-\n-   procedure Restore_SPARK_Mode\n-     (Mode : SPARK_Mode_Type;\n-      Prag : Node_Id)\n-   is\n-   begin\n-      SPARK_Mode        := Mode;\n-      SPARK_Mode_Pragma := Prag;\n-   end Restore_SPARK_Mode;\n+   end Returns_On_Secondary_Stack;\n \n    --------------------------------\n    -- Returns_Unconstrained_Type --"}, {"sha": "f9903b8ebdd6c8990abb10261942e85eac1e5c34", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c697f593f47490b1d3b061ae76ba728bfa2ff372/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=c697f593f47490b1d3b061ae76ba728bfa2ff372", "patch": "@@ -672,11 +672,10 @@ package Sem_Util is\n    --  Current_Scope is returned. The returned value is Empty if this is called\n    --  from a library package which is not within any subprogram.\n \n-   function CW_Or_Has_Controlled_Part (T : Entity_Id) return Boolean;\n-   --  True if T is a class-wide type, or if it has controlled parts (\"part\"\n-   --  means T or any of its subcomponents). Same as Needs_Finalization, except\n-   --  when pragma Restrictions (No_Finalization) applies, in which case we\n-   --  know that class-wide objects do not contain controlled parts.\n+   function CW_Or_Needs_Finalization (Typ : Entity_Id) return Boolean;\n+   --  True if Typ is a class-wide type or requires finalization actions. Same\n+   --  as Needs_Finalization except with pragma Restrictions (No_Finalization),\n+   --  in which case we know that class-wide objects do not need finalization.\n \n    function Deepest_Type_Access_Level\n      (Typ             : Entity_Id;\n@@ -3048,14 +3047,12 @@ package Sem_Util is\n    --  This is used as a defense mechanism against ill-formed trees caused by\n    --  previous errors (particularly in -gnatq mode).\n \n-   function Requires_Transient_Scope (Id : Entity_Id) return Boolean;\n-   --  Id is a type entity. The result is True when temporaries of this type\n-   --  need to be wrapped in a transient scope to be reclaimed properly when a\n-   --  secondary stack is in use. Examples of types requiring such wrapping are\n-   --  controlled types and variable-sized types including unconstrained\n-   --  arrays.\n-\n-   --  WARNING: There is a matching C declaration of this subprogram in fe.h\n+   function Requires_Transient_Scope (Typ : Entity_Id) return Boolean;\n+   --  Return true if temporaries of Typ need to be wrapped in a transient\n+   --  scope, either because they are allocated on the secondary stack or\n+   --  finalization actions must be generated before the next instruction.\n+   --  Examples of types requiring such wrapping are variable-sized types,\n+   --  including unconstrained arrays, and controlled types.\n \n    procedure Reset_Analyzed_Flags (N : Node_Id);\n    --  Reset the Analyzed flags in all nodes of the tree whose root is N\n@@ -3064,6 +3061,12 @@ package Sem_Util is\n    --  Set the current SPARK_Mode to Mode and SPARK_Mode_Pragma to Prag. This\n    --  routine must be used in tandem with Set_SPARK_Mode.\n \n+   function Returns_On_Secondary_Stack (Id : Entity_Id) return Boolean;\n+   --  Return true if functions whose result type is Id must return on the\n+   --  secondary stack, i.e. allocate the return object on this stack.\n+\n+   --  WARNING: There is a matching C declaration of this subprogram in fe.h\n+\n    function Returns_Unconstrained_Type (Subp : Entity_Id) return Boolean;\n    --  Return true if Subp is a function that returns an unconstrained type\n "}]}