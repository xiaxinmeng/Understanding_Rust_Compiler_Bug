{"sha": "ba199a5345bb20427b46b0de24e80feb5afd7e0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmExOTlhNTM0NWJiMjA0MjdiNDZiMGRlMjRlODBmZWI1YWZkN2UwZA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-03-22T17:36:37Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-03-22T17:36:37Z"}, "message": "fold-const.c (fold_build1, [...]): New.\n\n\t* fold-const.c (fold_build1, fold_build2, fold_build3): New.\n\t* tree.h: Add corresponding prototypes.\n\nFrom-SVN: r96881", "tree": {"sha": "0ffafddb8f7c25fe5cb7637b2509823c28d945e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ffafddb8f7c25fe5cb7637b2509823c28d945e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba199a5345bb20427b46b0de24e80feb5afd7e0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba199a5345bb20427b46b0de24e80feb5afd7e0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba199a5345bb20427b46b0de24e80feb5afd7e0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba199a5345bb20427b46b0de24e80feb5afd7e0d/comments", "author": null, "committer": null, "parents": [{"sha": "7cf572596f5c190e40fe851a86ef182ed5190783", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cf572596f5c190e40fe851a86ef182ed5190783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cf572596f5c190e40fe851a86ef182ed5190783"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "a22363f7fdeb911f087cbf97872dc5596fd46fa9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba199a5345bb20427b46b0de24e80feb5afd7e0d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba199a5345bb20427b46b0de24e80feb5afd7e0d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba199a5345bb20427b46b0de24e80feb5afd7e0d", "patch": "@@ -4,6 +4,9 @@\n \tCALL_EXPR.\n \t(fold): Update a call to fold_ternary.\n \n+\t* fold-const.c (fold_build1, fold_build2, fold_build3): New.\n+\t* tree.h: Add corresponding prototypes.\n+\n 2005-03-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/20561"}, {"sha": "593796304704b6958f213459062d239bf5003fbc", "filename": "gcc/fold-const.c", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba199a5345bb20427b46b0de24e80feb5afd7e0d/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba199a5345bb20427b46b0de24e80feb5afd7e0d/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=ba199a5345bb20427b46b0de24e80feb5afd7e0d", "patch": "@@ -10168,6 +10168,51 @@ fold_checksum_tree (tree expr, struct md5_ctx *ctx, htab_t ht)\n \n #endif\n \n+/* Fold a unary tree expression with code CODE of type TYPE with an\n+   operand OP0.  Return a folded expresion if successful.  Otherwise,\n+   return a tree expression with code CODE of type TYPE with an\n+   operand OP0.  */\n+\n+tree\n+fold_build1 (enum tree_code code, tree type, tree op0)\n+{\n+  tree tem = fold_unary (code, type, op0);\n+  if (tem)\n+    return tem;\n+\n+  return build1 (code, type, op0);\n+}\n+\n+/* Fold a binary tree expression with code CODE of type TYPE with\n+   operands OP0 and OP1.  Return a folded expresion if successful.\n+   Otherwise, return a tree expression with code CODE of type TYPE\n+   with operands OP0 and OP1.  */\n+\n+tree\n+fold_build2 (enum tree_code code, tree type, tree op0, tree op1)\n+{\n+  tree tem = fold_binary (code, type, op0, op1);\n+  if (tem)\n+    return tem;\n+\n+  return build2 (code, type, op0, op1);\n+}\n+\n+/* Fold a ternary tree expression with code CODE of type TYPE with\n+   operands OP0, OP1, and OP2.  Return a folded expresion if\n+   successful.  Otherwise, return a tree expression with code CODE of\n+   type TYPE with operands OP0, OP1, and OP2.  */\n+\n+tree\n+fold_build3 (enum tree_code code, tree type, tree op0, tree op1, tree op2)\n+{\n+  tree tem = fold_ternary (code, type, op0, op1, op2);\n+  if (tem)\n+    return tem;\n+\n+  return build3 (code, type, op0, op1, op2);\n+}\n+\n /* Perform constant folding and related simplification of initializer\n    expression EXPR.  This behaves identically to \"fold\" but ignores\n    potential run-time traps and exceptions that fold must preserve.  */"}, {"sha": "6010a47e52931909cb3b758cbc6c22a247a1d980", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba199a5345bb20427b46b0de24e80feb5afd7e0d/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba199a5345bb20427b46b0de24e80feb5afd7e0d/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ba199a5345bb20427b46b0de24e80feb5afd7e0d", "patch": "@@ -3495,6 +3495,9 @@ extern void using_eh_for_cleanups (void);\n    subexpressions are not changed.  */\n \n extern tree fold (tree);\n+extern tree fold_build1 (enum tree_code, tree, tree);\n+extern tree fold_build2 (enum tree_code, tree, tree, tree);\n+extern tree fold_build3 (enum tree_code, tree, tree, tree, tree);\n extern tree fold_initializer (tree);\n extern tree fold_convert (tree, tree);\n extern tree fold_single_bit_test (enum tree_code, tree, tree, tree);"}]}