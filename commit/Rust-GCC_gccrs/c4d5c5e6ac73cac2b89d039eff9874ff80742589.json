{"sha": "c4d5c5e6ac73cac2b89d039eff9874ff80742589", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRkNWM1ZTZhYzczY2FjMmI4OWQwMzllZmY5ODc0ZmY4MDc0MjU4OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-12-16T09:38:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-12-16T09:38:18Z"}, "message": "re PR middle-end/71632 (hang at -O3 on x86_64-linux-gnu)\n\n2016-12-16  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/71632\n\t* expr.c (expand_cond_expr_using_cmove): Bail out early if\n\twe end up recursing via TER.\n\n\t* gcc.dg/pr71632.c: New testcase.\n\nFrom-SVN: r243737", "tree": {"sha": "5ca4810e059a745910ac4104d358ec371aca2b33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ca4810e059a745910ac4104d358ec371aca2b33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4d5c5e6ac73cac2b89d039eff9874ff80742589", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d5c5e6ac73cac2b89d039eff9874ff80742589", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4d5c5e6ac73cac2b89d039eff9874ff80742589", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d5c5e6ac73cac2b89d039eff9874ff80742589/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7bd1e2edf9a0456062dfd7cbc47b46d93239e997", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bd1e2edf9a0456062dfd7cbc47b46d93239e997", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bd1e2edf9a0456062dfd7cbc47b46d93239e997"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "ca4f4f4f5ed033ae488de5a7ffa2c13b9b3d3f72", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d5c5e6ac73cac2b89d039eff9874ff80742589/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d5c5e6ac73cac2b89d039eff9874ff80742589/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4d5c5e6ac73cac2b89d039eff9874ff80742589", "patch": "@@ -1,3 +1,9 @@\n+2016-12-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/71632\n+\t* expr.c (expand_cond_expr_using_cmove): Bail out early if\n+\twe end up recursing via TER.\n+\n 2016-12-15  Martin Sebor  <msebor@redhat.com>\n \n \tPR bootstrap/78817"}, {"sha": "32aa237c6fa5d6219c09586c991c6e7e92089ca0", "filename": "gcc/expr.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d5c5e6ac73cac2b89d039eff9874ff80742589/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d5c5e6ac73cac2b89d039eff9874ff80742589/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=c4d5c5e6ac73cac2b89d039eff9874ff80742589", "patch": "@@ -8096,6 +8096,15 @@ expand_cond_expr_using_cmove (tree treeop0 ATTRIBUTE_UNUSED,\n   int unsignedp = TYPE_UNSIGNED (type);\n   machine_mode mode = TYPE_MODE (type);\n   machine_mode orig_mode = mode;\n+  static bool expanding_cond_expr_using_cmove = false;\n+\n+  /* Conditional move expansion can end up TERing two operands which,\n+     when recursively hitting conditional expressions can result in\n+     exponential behavior if the cmove expansion ultimatively fails.\n+     It's hardly profitable to TER a cmove into a cmove so avoid doing\n+     that by failing early if we end up recursing.  */\n+  if (expanding_cond_expr_using_cmove)\n+    return NULL_RTX;\n \n   /* If we cannot do a conditional move on the mode, try doing it\n      with the promoted mode. */\n@@ -8109,6 +8118,7 @@ expand_cond_expr_using_cmove (tree treeop0 ATTRIBUTE_UNUSED,\n   else\n     temp = assign_temp (type, 0, 1);\n \n+  expanding_cond_expr_using_cmove = true;\n   start_sequence ();\n   expand_operands (treeop1, treeop2,\n \t\t   temp, &op1, &op2, EXPAND_NORMAL);\n@@ -8143,6 +8153,7 @@ expand_cond_expr_using_cmove (tree treeop0 ATTRIBUTE_UNUSED,\n       if (comparison_mode == VOIDmode)\n \tcomparison_mode = TYPE_MODE (TREE_TYPE (treeop0));\n     }\n+  expanding_cond_expr_using_cmove = false;\n \n   if (GET_MODE (op1) != mode)\n     op1 = gen_lowpart (mode, op1);"}, {"sha": "8de3e189c4b65683fea74fda0c7facf4ab899868", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d5c5e6ac73cac2b89d039eff9874ff80742589/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d5c5e6ac73cac2b89d039eff9874ff80742589/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c4d5c5e6ac73cac2b89d039eff9874ff80742589", "patch": "@@ -1,3 +1,8 @@\n+2016-12-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/71632\n+\t* gcc.dg/pr71632.c: New testcase.\n+\n 2016-12-15  Andrew Senkevich  <andrew.senkevich@intel.com>\n \n \t* gcc.target/i386/avx512bw-kmovd-1.c: New test."}, {"sha": "e8d5cc54c12b03a71a687869b8a3b6024662206d", "filename": "gcc/testsuite/gcc.dg/pr71632.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d5c5e6ac73cac2b89d039eff9874ff80742589/gcc%2Ftestsuite%2Fgcc.dg%2Fpr71632.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d5c5e6ac73cac2b89d039eff9874ff80742589/gcc%2Ftestsuite%2Fgcc.dg%2Fpr71632.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr71632.c?ref=c4d5c5e6ac73cac2b89d039eff9874ff80742589", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-loop-if-convert\" } */\n+\n+void\n+foo (double d, double *p, double *q)\n+{\n+  int i;\n+  for (i = 0; i < 64; i++)\n+    {\n+      double t1 = d > p[0] ? 1.0 : 0.0;\n+      double t2 = t1 > p[1] ? 1.0 : 0.0;\n+      double t3 = t2 > p[2] ? 1.0 : 0.0;\n+      double t4 = t3 > p[3] ? 1.0 : 0.0;\n+      double t5 = t4 > p[4] ? 1.0 : 0.0;\n+      double t6 = t5 > p[5] ? 1.0 : 0.0;\n+      double t7 = t6 > p[6] ? 1.0 : 0.0;\n+      double t8 = t7 > p[7] ? 1.0 : 0.0;\n+      double t9 = t8 > p[8] ? 1.0 : 0.0;\n+      double t10 = t9 > p[9] ? 1.0 : 0.0;\n+      double t11 = t10 > p[10] ? 1.0 : 0.0;\n+      double t12 = t11 > p[11] ? 1.0 : 0.0;\n+      double t13 = t12 > p[12] ? 1.0 : 0.0;\n+      double t14 = t13 > p[13] ? 1.0 : 0.0;\n+      double t15 = t14 > p[14] ? 1.0 : 0.0;\n+      double t16 = t15 > p[15] ? 1.0 : 0.0;\n+      double t17 = t16 > p[16] ? 1.0 : 0.0;\n+      double t18 = t17 > p[17] ? 1.0 : 0.0;\n+      double t19 = t18 > p[18] ? 1.0 : 0.0;\n+      double t20 = t19 > p[19] ? 1.0 : 0.0;\n+      double t21 = t20 > p[20] ? 1.0 : 0.0;\n+      double t22 = t21 > p[21] ? 1.0 : 0.0;\n+      double t23 = t22 > p[22] ? 1.0 : 0.0;\n+      double t24 = t23 > p[23] ? 1.0 : 0.0;\n+      double t25 = t24 > p[24] ? 1.0 : 0.0;\n+      double t26 = t25 > p[25] ? 1.0 : 0.0;\n+      double t27 = t26 > p[26] ? 1.0 : 0.0;\n+      double t28 = t27 > p[27] ? 1.0 : 0.0;\n+      double t29 = t28 > p[28] ? 1.0 : 0.0;\n+      double t30 = t29 > p[29] ? 1.0 : 0.0;\n+      double t31 = t30 > p[30] ? 1.0 : 0.0;\n+      double t32 = t31 > p[31] ? 1.0 : 0.0;\n+      double t33 = t32 > p[32] ? 1.0 : 0.0;\n+      double t34 = t33 > p[33] ? 1.0 : 0.0;\n+      double t35 = t34 > p[34] ? 1.0 : 0.0;\n+      double t36 = t35 > p[35] ? 1.0 : 0.0;\n+      double t37 = t36 > p[36] ? 1.0 : 0.0;\n+      double t38 = t37 > p[37] ? 1.0 : 0.0;\n+      double t39 = t38 > p[38] ? 1.0 : 0.0;\n+      *q = t39;\n+      p += 39;\n+      q++;\n+    }\n+}"}]}