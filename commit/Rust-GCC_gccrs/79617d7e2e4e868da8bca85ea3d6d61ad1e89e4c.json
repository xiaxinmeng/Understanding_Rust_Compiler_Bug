{"sha": "79617d7e2e4e868da8bca85ea3d6d61ad1e89e4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk2MTdkN2UyZTRlODY4ZGE4YmNhODVlYTNkNmQ2MWFkMWU4OWU0Yw==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2012-04-15T11:52:44Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2012-04-15T11:52:44Z"}, "message": "re PR libfortran/38199 (missed optimization: I/O performance)\n\n2012-04-15  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR libfortran/38199\n\tPR libfortran/50673\n\t* intrinsics/string_intriniscs_inc.c (string_len_trim):\n\tRemove prototypes for string_len_trim and move to...\n\t* libgfortran.h (string_len_trim): ... here and\n\t(string_len_trim_char4): ...here.\n\t* io/unit.c: For non-array internal arrays where we do reading,\n\tadjust the record length to the last non-blank character.\n\t* io/unix.c:  Fix typo.\n\nFrom-SVN: r186466", "tree": {"sha": "08aaee7239c0ac44b4cc25e5300419ba6b41659f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08aaee7239c0ac44b4cc25e5300419ba6b41659f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79617d7e2e4e868da8bca85ea3d6d61ad1e89e4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79617d7e2e4e868da8bca85ea3d6d61ad1e89e4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79617d7e2e4e868da8bca85ea3d6d61ad1e89e4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79617d7e2e4e868da8bca85ea3d6d61ad1e89e4c/comments", "author": null, "committer": null, "parents": [{"sha": "9b63dcab1e9c9243604c8762ff9145951e485b9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b63dcab1e9c9243604c8762ff9145951e485b9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b63dcab1e9c9243604c8762ff9145951e485b9e"}], "stats": {"total": 46, "additions": 41, "deletions": 5}, "files": [{"sha": "302895bbb339ca7c029b9ac64930d91838768f22", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79617d7e2e4e868da8bca85ea3d6d61ad1e89e4c/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79617d7e2e4e868da8bca85ea3d6d61ad1e89e4c/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=79617d7e2e4e868da8bca85ea3d6d61ad1e89e4c", "patch": "@@ -1,3 +1,15 @@\n+2012-04-15  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR libfortran/38199\n+\tPR libfortran/50673\n+\t* intrinsics/string_intriniscs_inc.c (string_len_trim):\n+\tRemove prototypes for string_len_trim and move to...\n+\t* libgfortran.h (string_len_trim): ... here and\n+\t(string_len_trim_char4): ...here.\n+\t* io/unit.c: For non-array internal arrays where we do reading,\n+\tadjust the record length to the last non-blank character.\n+\t* io/unix.c:  Fix typo.\n+\n 2012-04-10  Michael Matz  <matz@suse.de>\n \n \t* m4/cshift0.m4 (cshift0_'rtype_code`): Guard use of modulo."}, {"sha": "a1f86b558c8079603699210d446ee4813d24d0c2", "filename": "libgfortran/intrinsics/string_intrinsics_inc.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79617d7e2e4e868da8bca85ea3d6d61ad1e89e4c/libgfortran%2Fintrinsics%2Fstring_intrinsics_inc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79617d7e2e4e868da8bca85ea3d6d61ad1e89e4c/libgfortran%2Fintrinsics%2Fstring_intrinsics_inc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fstring_intrinsics_inc.c?ref=79617d7e2e4e868da8bca85ea3d6d61ad1e89e4c", "patch": "@@ -44,9 +44,6 @@ extern void concat_string (gfc_charlen_type, CHARTYPE *,\n \t\t\t   gfc_charlen_type, const CHARTYPE *);\n export_proto(concat_string);\n \n-extern gfc_charlen_type string_len_trim (gfc_charlen_type, const CHARTYPE *);\n-export_proto(string_len_trim);\n-\n extern void adjustl (CHARTYPE *, gfc_charlen_type, const CHARTYPE *);\n export_proto(adjustl);\n "}, {"sha": "6b68e1494d0b8c13f256eb13255a679ebf26825a", "filename": "libgfortran/io/unit.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79617d7e2e4e868da8bca85ea3d6d61ad1e89e4c/libgfortran%2Fio%2Funit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79617d7e2e4e868da8bca85ea3d6d61ad1e89e4c/libgfortran%2Fio%2Funit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funit.c?ref=79617d7e2e4e868da8bca85ea3d6d61ad1e89e4c", "patch": "@@ -397,7 +397,7 @@ get_internal_unit (st_parameter_dt *dtp)\n   __gthread_mutex_lock (&iunit->lock);\n \n   iunit->recl = dtp->internal_unit_len;\n-  \n+\n   /* For internal units we set the unit number to -1.\n      Otherwise internal units can be mistaken for a pre-connected unit or\n      some other file I/O unit.  */\n@@ -415,6 +415,26 @@ get_internal_unit (st_parameter_dt *dtp)\n \n       start_record *= iunit->recl;\n     }\n+  else\n+    {\n+      /* If we are not processing an array, adjust the unit record length not\n+\t to include trailing blanks for list-formatted reads.  */\n+      if (dtp->u.p.mode == READING && dtp->format == NULL)\n+\t{\n+\t  if (dtp->common.unit == 0)\n+\t    {\n+\t      dtp->internal_unit_len =\n+\t\tstring_len_trim (dtp->internal_unit_len, dtp->internal_unit);\n+\t      iunit->recl = dtp->internal_unit_len;\n+\t    }\n+\t  else\n+\t    {\n+\t      dtp->internal_unit_len =\n+\t\tstring_len_trim_char4 (dtp->internal_unit_len, dtp->internal_unit);\n+\t      iunit->recl = dtp->internal_unit_len;\n+\t    }\n+\t}\n+    }\n \n   /* Set initial values for unit parameters.  */\n   if (dtp->common.unit)"}, {"sha": "185936f109d35c8e28561aff2e44b734b808ee25", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79617d7e2e4e868da8bca85ea3d6d61ad1e89e4c/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79617d7e2e4e868da8bca85ea3d6d61ad1e89e4c/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=79617d7e2e4e868da8bca85ea3d6d61ad1e89e4c", "patch": "@@ -736,7 +736,7 @@ mem_alloc_w4 (stream * strm, int * len)\n }\n \n \n-/* Stream read function for character(kine=1) internal units.  */\n+/* Stream read function for character(kind=1) internal units.  */\n \n static ssize_t\n mem_read (stream * s, void * buf, ssize_t nbytes)"}, {"sha": "e7f5b711a51f2ca66af21ddfbd806d531b9b5ecc", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79617d7e2e4e868da8bca85ea3d6d61ad1e89e4c/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79617d7e2e4e868da8bca85ea3d6d61ad1e89e4c/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=79617d7e2e4e868da8bca85ea3d6d61ad1e89e4c", "patch": "@@ -791,6 +791,13 @@ internal_proto(fstrcpy);\n extern gfc_charlen_type cf_strcpy (char *, gfc_charlen_type, const char *);\n internal_proto(cf_strcpy);\n \n+extern gfc_charlen_type string_len_trim (gfc_charlen_type, const char *);\n+export_proto(string_len_trim);\n+\n+extern gfc_charlen_type string_len_trim_char4 (gfc_charlen_type,\n+\t\t\t\t\t       const gfc_char4_t *);\n+export_proto(string_len_trim_char4);\n+\n /* io/intrinsics.c */\n \n extern void flush_all_units (void);"}]}