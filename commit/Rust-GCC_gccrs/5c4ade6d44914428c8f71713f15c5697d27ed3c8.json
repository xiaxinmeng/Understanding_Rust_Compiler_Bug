{"sha": "5c4ade6d44914428c8f71713f15c5697d27ed3c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM0YWRlNmQ0NDkxNDQyOGM4ZjcxNzEzZjE1YzU2OTdkMjdlZDNjOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-03-22T10:08:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-03-22T10:08:40Z"}, "message": "re PR target/89784 (Missing AVX512 intrinsics)\n\n\tPR target/89784\n\t* config/i386/i386.c (enum ix86_builtins): Remove\n\tIX86_BUILTIN_VFMSUBSD3_MASK3 and IX86_BUILTIN_VFMSUBSS3_MASK3.\n\t* config/i386/i386-builtin.def (__builtin_ia32_vfmaddsd3_mask,\n\t__builtin_ia32_vfmaddsd3_mask3, __builtin_ia32_vfmaddsd3_maskz,\n\t__builtin_ia32_vfmsubsd3_mask3, __builtin_ia32_vfmaddss3_mask,\n\t__builtin_ia32_vfmaddss3_mask3, __builtin_ia32_vfmaddss3_maskz,\n\t__builtin_ia32_vfmsubss3_mask3): New builtins.\n\t* config/i386/sse.md (avx512f_vmfmadd_<mode>_mask<round_name>,\n\tavx512f_vmfmadd_<mode>_mask3<round_name>,\n\tavx512f_vmfmadd_<mode>_maskz_1<round_name>,\n\t*avx512f_vmfmsub_<mode>_mask<round_name>,\n\tavx512f_vmfmsub_<mode>_mask3<round_name>,\n\t*avx512f_vmfmasub_<mode>_maskz_1<round_name>,\n\t*avx512f_vmfnmadd_<mode>_mask<round_name>,\n\t*avx512f_vmfnmadd_<mode>_mask3<round_name>,\n\t*avx512f_vmfnmadd_<mode>_maskz_1<round_name>,\n\t*avx512f_vmfnmsub_<mode>_mask<round_name>,\n\t*avx512f_vmfnmsub_<mode>_mask3<round_name>,\n\t*avx512f_vmfnmasub_<mode>_maskz_1<round_name>): New define_insns.\n\t(avx512f_vmfmadd_<mode>_maskz<round_expand_name>): New define_expand.\n\t* config/i386/avx512fintrin.h (_mm_mask_fmadd_sd, _mm_mask_fmadd_ss,\n\t_mm_mask3_fmadd_sd, _mm_mask3_fmadd_ss, _mm_maskz_fmadd_sd,\n\t_mm_maskz_fmadd_ss, _mm_mask_fmsub_sd, _mm_mask_fmsub_ss,\n\t_mm_mask3_fmsub_sd, _mm_mask3_fmsub_ss, _mm_maskz_fmsub_sd,\n\t_mm_maskz_fmsub_ss, _mm_mask_fnmadd_sd, _mm_mask_fnmadd_ss,\n\t_mm_mask3_fnmadd_sd, _mm_mask3_fnmadd_ss, _mm_maskz_fnmadd_sd,\n\t_mm_maskz_fnmadd_ss, _mm_mask_fnmsub_sd, _mm_mask_fnmsub_ss,\n\t_mm_mask3_fnmsub_sd, _mm_mask3_fnmsub_ss, _mm_maskz_fnmsub_sd,\n\t_mm_maskz_fnmsub_ss, _mm_mask_fmadd_round_sd, _mm_mask_fmadd_round_ss,\n\t_mm_mask3_fmadd_round_sd, _mm_mask3_fmadd_round_ss,\n\t_mm_maskz_fmadd_round_sd, _mm_maskz_fmadd_round_ss,\n\t_mm_mask_fmsub_round_sd, _mm_mask_fmsub_round_ss,\n\t_mm_mask3_fmsub_round_sd, _mm_mask3_fmsub_round_ss,\n\t_mm_maskz_fmsub_round_sd, _mm_maskz_fmsub_round_ss,\n\t_mm_mask_fnmadd_round_sd, _mm_mask_fnmadd_round_ss,\n\t_mm_mask3_fnmadd_round_sd, _mm_mask3_fnmadd_round_ss,\n\t_mm_maskz_fnmadd_round_sd, _mm_maskz_fnmadd_round_ss,\n\t_mm_mask_fnmsub_round_sd, _mm_mask_fnmsub_round_ss,\n\t_mm_mask3_fnmsub_round_sd, _mm_mask3_fnmsub_round_ss,\n\t_mm_maskz_fnmsub_round_sd, _mm_maskz_fnmsub_round_ss): New intrinsics.\n\n\t* gcc.target/i386/sse-13.c (__builtin_ia32_vfmaddsd3_mask,\n\t__builtin_ia32_vfmaddsd3_mask3, __builtin_ia32_vfmaddsd3_maskz,\n\t__builtin_ia32_vfmsubsd3_mask3, __builtin_ia32_vfmaddss3_mask,\n\t__builtin_ia32_vfmaddss3_mask3, __builtin_ia32_vfmaddss3_maskz,\n\t__builtin_ia32_vfmsubss3_mask3): Define.\n\t* gcc.target/i386/sse-23.c (__builtin_ia32_vfmaddsd3_mask,\n\t__builtin_ia32_vfmaddsd3_mask3, __builtin_ia32_vfmaddsd3_maskz,\n\t__builtin_ia32_vfmsubsd3_mask3, __builtin_ia32_vfmaddss3_mask,\n\t__builtin_ia32_vfmaddss3_mask3, __builtin_ia32_vfmaddss3_maskz,\n\t__builtin_ia32_vfmsubss3_mask3): Define.\n\t* gcc.target/i386/avx-1.c (__builtin_ia32_vfmaddsd3_mask,\n\t__builtin_ia32_vfmaddsd3_mask3, __builtin_ia32_vfmaddsd3_maskz,\n\t__builtin_ia32_vfmsubsd3_mask3, __builtin_ia32_vfmaddss3_mask,\n\t__builtin_ia32_vfmaddss3_mask3, __builtin_ia32_vfmaddss3_maskz,\n\t__builtin_ia32_vfmsubss3_mask3): Define.\n\t* gcc.target/i386/sse-14.c: Add tests for\n\t_mm_mask{,3,z}_f{,n}m{add,sub}_round_s{s,d} builtins.\n\t* gcc.target/i386/sse-22.c: Likewise.\n\n2019-03-22  Hongtao Liu  <hongtao.liu@intel.com>\n\n\t* gcc.target/i386/avx512f-vfmaddXXXsd-1.c (avx512f_test): Add tests\n\tfor _mm_mask{,3,z}_*.\n\t* gcc.target/i386/avx512f-vfmaddXXXss-1.c (avx512f_test): Likewise.\n\t* gcc.target/i386/avx512f-vfmsubXXXsd-1.c (avx512f_test): Likewise.\n\t* gcc.target/i386/avx512f-vfmsubXXXss-1.c (avx512f_test): Likewise.\n\t* gcc.target/i386/avx512f-vfnmaddXXXsd-1.c (avx512f_test): Likewise.\n\t* gcc.target/i386/avx512f-vfnmaddXXXss-1.c (avx512f_test): Likewise.\n\t* gcc.target/i386/avx512f-vfnmsubXXXsd-1.c (avx512f_test): Likewise.\n\t* gcc.target/i386/avx512f-vfnmsubXXXss-1.c (avx512f_test): Likewise.\n\t* gcc.target/i386/avx512f-vfmaddXXXsd-2.c: New test.\n\t* gcc.target/i386/avx512f-vfmaddXXXss-2.c: New test.\n\t* gcc.target/i386/avx512f-vfmsubXXXsd-2.c: New test.\n\t* gcc.target/i386/avx512f-vfmsubXXXss-2.c: New test.\n\t* gcc.target/i386/avx512f-vfnmaddXXXsd-2.c: New test.\n\t* gcc.target/i386/avx512f-vfnmaddXXXss-2.c: New test.\n\t* gcc.target/i386/avx512f-vfnmsubXXXsd-2.c: New test.\n\t* gcc.target/i386/avx512f-vfnmsubXXXss-2.c: New test.\n\nFrom-SVN: r269868", "tree": {"sha": "c2edbbaeee0df6bcdd3aa79d5e5fb37f76a6d201", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2edbbaeee0df6bcdd3aa79d5e5fb37f76a6d201"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c4ade6d44914428c8f71713f15c5697d27ed3c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c4ade6d44914428c8f71713f15c5697d27ed3c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c4ade6d44914428c8f71713f15c5697d27ed3c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c4ade6d44914428c8f71713f15c5697d27ed3c8/comments", "author": null, "committer": null, "parents": [{"sha": "a411ae9b355c739bf05c065fb2e1b748129c6894", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a411ae9b355c739bf05c065fb2e1b748129c6894", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a411ae9b355c739bf05c065fb2e1b748129c6894"}], "stats": {"total": 1873, "additions": 1871, "deletions": 2}, "files": [{"sha": "6601be5319713cf62c2957318fcfffca25b188b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c4ade6d44914428c8f71713f15c5697d27ed3c8", "patch": "@@ -1,3 +1,47 @@\n+2019-03-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/89784\n+\t* config/i386/i386.c (enum ix86_builtins): Remove\n+\tIX86_BUILTIN_VFMSUBSD3_MASK3 and IX86_BUILTIN_VFMSUBSS3_MASK3.\n+\t* config/i386/i386-builtin.def (__builtin_ia32_vfmaddsd3_mask,\n+\t__builtin_ia32_vfmaddsd3_mask3, __builtin_ia32_vfmaddsd3_maskz,\n+\t__builtin_ia32_vfmsubsd3_mask3, __builtin_ia32_vfmaddss3_mask,\n+\t__builtin_ia32_vfmaddss3_mask3, __builtin_ia32_vfmaddss3_maskz,\n+\t__builtin_ia32_vfmsubss3_mask3): New builtins.\n+\t* config/i386/sse.md (avx512f_vmfmadd_<mode>_mask<round_name>,\n+\tavx512f_vmfmadd_<mode>_mask3<round_name>,\n+\tavx512f_vmfmadd_<mode>_maskz_1<round_name>,\n+\t*avx512f_vmfmsub_<mode>_mask<round_name>,\n+\tavx512f_vmfmsub_<mode>_mask3<round_name>,\n+\t*avx512f_vmfmasub_<mode>_maskz_1<round_name>,\n+\t*avx512f_vmfnmadd_<mode>_mask<round_name>,\n+\t*avx512f_vmfnmadd_<mode>_mask3<round_name>,\n+\t*avx512f_vmfnmadd_<mode>_maskz_1<round_name>,\n+\t*avx512f_vmfnmsub_<mode>_mask<round_name>,\n+\t*avx512f_vmfnmsub_<mode>_mask3<round_name>,\n+\t*avx512f_vmfnmasub_<mode>_maskz_1<round_name>): New define_insns.\n+\t(avx512f_vmfmadd_<mode>_maskz<round_expand_name>): New define_expand.\n+\t* config/i386/avx512fintrin.h (_mm_mask_fmadd_sd, _mm_mask_fmadd_ss,\n+\t_mm_mask3_fmadd_sd, _mm_mask3_fmadd_ss, _mm_maskz_fmadd_sd,\n+\t_mm_maskz_fmadd_ss, _mm_mask_fmsub_sd, _mm_mask_fmsub_ss,\n+\t_mm_mask3_fmsub_sd, _mm_mask3_fmsub_ss, _mm_maskz_fmsub_sd,\n+\t_mm_maskz_fmsub_ss, _mm_mask_fnmadd_sd, _mm_mask_fnmadd_ss,\n+\t_mm_mask3_fnmadd_sd, _mm_mask3_fnmadd_ss, _mm_maskz_fnmadd_sd,\n+\t_mm_maskz_fnmadd_ss, _mm_mask_fnmsub_sd, _mm_mask_fnmsub_ss,\n+\t_mm_mask3_fnmsub_sd, _mm_mask3_fnmsub_ss, _mm_maskz_fnmsub_sd,\n+\t_mm_maskz_fnmsub_ss, _mm_mask_fmadd_round_sd, _mm_mask_fmadd_round_ss,\n+\t_mm_mask3_fmadd_round_sd, _mm_mask3_fmadd_round_ss,\n+\t_mm_maskz_fmadd_round_sd, _mm_maskz_fmadd_round_ss,\n+\t_mm_mask_fmsub_round_sd, _mm_mask_fmsub_round_ss,\n+\t_mm_mask3_fmsub_round_sd, _mm_mask3_fmsub_round_ss,\n+\t_mm_maskz_fmsub_round_sd, _mm_maskz_fmsub_round_ss,\n+\t_mm_mask_fnmadd_round_sd, _mm_mask_fnmadd_round_ss,\n+\t_mm_mask3_fnmadd_round_sd, _mm_mask3_fnmadd_round_ss,\n+\t_mm_maskz_fnmadd_round_sd, _mm_maskz_fnmadd_round_ss,\n+\t_mm_mask_fnmsub_round_sd, _mm_mask_fnmsub_round_ss,\n+\t_mm_mask3_fnmsub_round_sd, _mm_mask3_fnmsub_round_ss,\n+\t_mm_maskz_fnmsub_round_sd, _mm_maskz_fnmsub_round_ss): New intrinsics.\n+\n 2019-03-21  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/89350"}, {"sha": "afcba5dd0420cd0c0bb342c83b4078d16e957f20", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 602, "deletions": 0, "changes": 602, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=5c4ade6d44914428c8f71713f15c5697d27ed3c8", "patch": "@@ -11562,6 +11562,608 @@ _mm_fnmsub_round_ss (__m128 __W, __m128 __A, __m128 __B, const int __R)\n     (__m128)__builtin_ia32_vfmaddss3_round(A, -(B), -(C), R)\n #endif\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fmadd_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)\n+{\n+  return (__m128d) __builtin_ia32_vfmaddsd3_mask ((__v2df) __W,\n+\t\t\t\t\t\t  (__v2df) __A,\n+\t\t\t\t\t\t  (__v2df) __B,\n+\t\t\t\t\t\t  (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fmadd_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)\n+{\n+  return (__m128) __builtin_ia32_vfmaddss3_mask ((__v4sf) __W,\n+\t\t\t\t\t\t (__v4sf) __A,\n+\t\t\t\t\t\t (__v4sf) __B,\n+\t\t\t\t\t\t (__mmask8) __U,\n+\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fmadd_sd (__m128d __W, __m128d __A, __m128d __B, __mmask8 __U)\n+{\n+  return (__m128d) __builtin_ia32_vfmaddsd3_mask3 ((__v2df) __W,\n+\t\t\t\t\t\t   (__v2df) __A,\n+\t\t\t\t\t\t   (__v2df) __B,\n+\t\t\t\t\t\t   (__mmask8) __U,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fmadd_ss (__m128 __W, __m128 __A, __m128 __B, __mmask8 __U)\n+{\n+  return (__m128) __builtin_ia32_vfmaddss3_mask3 ((__v4sf) __W,\n+\t\t\t\t\t\t  (__v4sf) __A,\n+\t\t\t\t\t\t  (__v4sf) __B,\n+\t\t\t\t\t\t  (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fmadd_sd (__mmask8 __U, __m128d __W, __m128d __A, __m128d __B)\n+{\n+  return (__m128d) __builtin_ia32_vfmaddsd3_maskz ((__v2df) __W,\n+\t\t\t\t\t\t   (__v2df) __A,\n+\t\t\t\t\t\t   (__v2df) __B,\n+\t\t\t\t\t\t   (__mmask8) __U,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fmadd_ss (__mmask8 __U, __m128 __W, __m128 __A, __m128 __B)\n+{\n+  return (__m128) __builtin_ia32_vfmaddss3_maskz ((__v4sf) __W,\n+\t\t\t\t\t\t  (__v4sf) __A,\n+\t\t\t\t\t\t  (__v4sf) __B,\n+\t\t\t\t\t\t  (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fmsub_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)\n+{\n+  return (__m128d) __builtin_ia32_vfmaddsd3_mask ((__v2df) __W,\n+\t\t\t\t\t\t  (__v2df) __A,\n+\t\t\t\t\t\t  -(__v2df) __B,\n+\t\t\t\t\t\t  (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fmsub_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)\n+{\n+  return (__m128) __builtin_ia32_vfmaddss3_mask ((__v4sf) __W,\n+\t\t\t\t\t\t (__v4sf) __A,\n+\t\t\t\t\t\t -(__v4sf) __B,\n+\t\t\t\t\t\t (__mmask8) __U,\n+\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fmsub_sd (__m128d __W, __m128d __A, __m128d __B, __mmask8 __U)\n+{\n+  return (__m128d) __builtin_ia32_vfmsubsd3_mask3 ((__v2df) __W,\n+\t\t\t\t\t\t   (__v2df) __A,\n+\t\t\t\t\t\t   (__v2df) __B,\n+\t\t\t\t\t\t   (__mmask8) __U,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fmsub_ss (__m128 __W, __m128 __A, __m128 __B, __mmask8 __U)\n+{\n+  return (__m128) __builtin_ia32_vfmsubss3_mask3 ((__v4sf) __W,\n+\t\t\t\t\t\t  (__v4sf) __A,\n+\t\t\t\t\t\t  (__v4sf) __B,\n+\t\t\t\t\t\t  (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fmsub_sd (__mmask8 __U, __m128d __W, __m128d __A, __m128d __B)\n+{\n+  return (__m128d) __builtin_ia32_vfmaddsd3_maskz ((__v2df) __W,\n+\t\t\t\t\t\t   (__v2df) __A,\n+\t\t\t\t\t\t   -(__v2df) __B,\n+\t\t\t\t\t\t   (__mmask8) __U,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fmsub_ss (__mmask8 __U, __m128 __W, __m128 __A, __m128 __B)\n+{\n+  return (__m128) __builtin_ia32_vfmaddss3_maskz ((__v4sf) __W,\n+\t\t\t\t\t\t  (__v4sf) __A,\n+\t\t\t\t\t\t  -(__v4sf) __B,\n+\t\t\t\t\t\t  (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fnmadd_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)\n+{\n+  return (__m128d) __builtin_ia32_vfmaddsd3_mask ((__v2df) __W,\n+\t\t\t\t\t\t  -(__v2df) __A,\n+\t\t\t\t\t\t  (__v2df) __B,\n+\t\t\t\t\t\t  (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fnmadd_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)\n+{\n+  return (__m128) __builtin_ia32_vfmaddss3_mask ((__v4sf) __W,\n+\t\t\t\t\t\t -(__v4sf) __A,\n+\t\t\t\t\t\t (__v4sf) __B,\n+\t\t\t\t\t\t (__mmask8) __U,\n+\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fnmadd_sd (__m128d __W, __m128d __A, __m128d __B, __mmask8 __U)\n+{\n+  return (__m128d) __builtin_ia32_vfmaddsd3_mask3 ((__v2df) __W,\n+\t\t\t\t\t\t   -(__v2df) __A,\n+\t\t\t\t\t\t   (__v2df) __B,\n+\t\t\t\t\t\t   (__mmask8) __U,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fnmadd_ss (__m128 __W, __m128 __A, __m128 __B, __mmask8 __U)\n+{\n+  return (__m128) __builtin_ia32_vfmaddss3_mask3 ((__v4sf) __W,\n+\t\t\t\t\t\t  -(__v4sf) __A,\n+\t\t\t\t\t\t  (__v4sf) __B,\n+\t\t\t\t\t\t  (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fnmadd_sd (__mmask8 __U, __m128d __W, __m128d __A, __m128d __B)\n+{\n+  return (__m128d) __builtin_ia32_vfmaddsd3_maskz ((__v2df) __W,\n+\t\t\t\t\t\t   -(__v2df) __A,\n+\t\t\t\t\t\t   (__v2df) __B,\n+\t\t\t\t\t\t   (__mmask8) __U,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fnmadd_ss (__mmask8 __U, __m128 __W, __m128 __A, __m128 __B)\n+{\n+  return (__m128) __builtin_ia32_vfmaddss3_maskz ((__v4sf) __W,\n+\t\t\t\t\t\t  -(__v4sf) __A,\n+\t\t\t\t\t\t  (__v4sf) __B,\n+\t\t\t\t\t\t  (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fnmsub_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)\n+{\n+  return (__m128d) __builtin_ia32_vfmaddsd3_mask ((__v2df) __W,\n+\t\t\t\t\t\t  -(__v2df) __A,\n+\t\t\t\t\t\t  -(__v2df) __B,\n+\t\t\t\t\t\t  (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fnmsub_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)\n+{\n+  return (__m128) __builtin_ia32_vfmaddss3_mask ((__v4sf) __W,\n+\t\t\t\t\t\t -(__v4sf) __A,\n+\t\t\t\t\t\t -(__v4sf) __B,\n+\t\t\t\t\t\t (__mmask8) __U,\n+\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fnmsub_sd (__m128d __W, __m128d __A, __m128d __B, __mmask8 __U)\n+{\n+  return (__m128d) __builtin_ia32_vfmsubsd3_mask3 ((__v2df) __W,\n+\t\t\t\t\t\t   -(__v2df) __A,\n+\t\t\t\t\t\t   (__v2df) __B,\n+\t\t\t\t\t\t   (__mmask8) __U,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fnmsub_ss (__m128 __W, __m128 __A, __m128 __B, __mmask8 __U)\n+{\n+  return (__m128) __builtin_ia32_vfmsubss3_mask3 ((__v4sf) __W,\n+\t\t\t\t\t\t  -(__v4sf) __A,\n+\t\t\t\t\t\t  (__v4sf) __B,\n+\t\t\t\t\t\t  (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fnmsub_sd (__mmask8 __U, __m128d __W, __m128d __A, __m128d __B)\n+{\n+  return (__m128d) __builtin_ia32_vfmaddsd3_maskz ((__v2df) __W,\n+\t\t\t\t\t\t   -(__v2df) __A,\n+\t\t\t\t\t\t   -(__v2df) __B,\n+\t\t\t\t\t\t   (__mmask8) __U,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fnmsub_ss (__mmask8 __U, __m128 __W, __m128 __A, __m128 __B)\n+{\n+  return (__m128) __builtin_ia32_vfmaddss3_maskz ((__v4sf) __W,\n+\t\t\t\t\t\t  -(__v4sf) __A,\n+\t\t\t\t\t\t  -(__v4sf) __B,\n+\t\t\t\t\t\t  (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fmadd_round_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B,\n+\t\t\t const int __R)\n+{\n+  return (__m128d) __builtin_ia32_vfmaddsd3_mask ((__v2df) __W,\n+\t\t\t\t\t\t  (__v2df) __A,\n+\t\t\t\t\t\t  (__v2df) __B,\n+\t\t\t\t\t\t  (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fmadd_round_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B,\n+\t\t\t const int __R)\n+{\n+  return (__m128) __builtin_ia32_vfmaddss3_mask ((__v4sf) __W,\n+\t\t\t\t\t\t (__v4sf) __A,\n+\t\t\t\t\t\t (__v4sf) __B,\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fmadd_round_sd (__m128d __W, __m128d __A, __m128d __B, __mmask8 __U,\n+\t\t\t  const int __R)\n+{\n+  return (__m128d) __builtin_ia32_vfmaddsd3_mask3 ((__v2df) __W,\n+\t\t\t\t\t\t   (__v2df) __A,\n+\t\t\t\t\t\t   (__v2df) __B,\n+\t\t\t\t\t\t   (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fmadd_round_ss (__m128 __W, __m128 __A, __m128 __B, __mmask8 __U,\n+\t\t\t  const int __R)\n+{\n+  return (__m128) __builtin_ia32_vfmaddss3_mask3 ((__v4sf) __W,\n+\t\t\t\t\t\t  (__v4sf) __A,\n+\t\t\t\t\t\t  (__v4sf) __B,\n+\t\t\t\t\t\t  (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fmadd_round_sd (__mmask8 __U, __m128d __W, __m128d __A, __m128d __B,\n+\t\t\t  const int __R)\n+{\n+  return (__m128d) __builtin_ia32_vfmaddsd3_maskz ((__v2df) __W,\n+\t\t\t\t\t\t   (__v2df) __A,\n+\t\t\t\t\t\t   (__v2df) __B,\n+\t\t\t\t\t\t   (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fmadd_round_ss (__mmask8 __U, __m128 __W, __m128 __A, __m128 __B,\n+\t\t\t  const int __R)\n+{\n+  return (__m128) __builtin_ia32_vfmaddss3_maskz ((__v4sf) __W,\n+\t\t\t\t\t\t  (__v4sf) __A,\n+\t\t\t\t\t\t  (__v4sf) __B,\n+\t\t\t\t\t\t  (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fmsub_round_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B,\n+\t\t\t const int __R)\n+{\n+  return (__m128d) __builtin_ia32_vfmaddsd3_mask ((__v2df) __W,\n+\t\t\t\t\t\t  (__v2df) __A,\n+\t\t\t\t\t\t  -(__v2df) __B,\n+\t\t\t\t\t\t  (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fmsub_round_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B,\n+\t\t\t const int __R)\n+{\n+  return (__m128) __builtin_ia32_vfmaddss3_mask ((__v4sf) __W,\n+\t\t\t\t\t\t (__v4sf) __A,\n+\t\t\t\t\t\t -(__v4sf) __B,\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fmsub_round_sd (__m128d __W, __m128d __A, __m128d __B, __mmask8 __U,\n+\t\t\t  const int __R)\n+{\n+  return (__m128d) __builtin_ia32_vfmsubsd3_mask3 ((__v2df) __W,\n+\t\t\t\t\t\t   (__v2df) __A,\n+\t\t\t\t\t\t   (__v2df) __B,\n+\t\t\t\t\t\t   (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fmsub_round_ss (__m128 __W, __m128 __A, __m128 __B, __mmask8 __U,\n+\t\t\t  const int __R)\n+{\n+  return (__m128) __builtin_ia32_vfmsubss3_mask3 ((__v4sf) __W,\n+\t\t\t\t\t\t  (__v4sf) __A,\n+\t\t\t\t\t\t  (__v4sf) __B,\n+\t\t\t\t\t\t  (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fmsub_round_sd (__mmask8 __U, __m128d __W, __m128d __A, __m128d __B,\n+\t\t\t  const int __R)\n+{\n+  return (__m128d) __builtin_ia32_vfmaddsd3_maskz ((__v2df) __W,\n+\t\t\t\t\t\t   (__v2df) __A,\n+\t\t\t\t\t\t   -(__v2df) __B,\n+\t\t\t\t\t\t   (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fmsub_round_ss (__mmask8 __U, __m128 __W, __m128 __A, __m128 __B,\n+\t\t\t  const int __R)\n+{\n+  return (__m128) __builtin_ia32_vfmaddss3_maskz ((__v4sf) __W,\n+\t\t\t\t\t\t  (__v4sf) __A,\n+\t\t\t\t\t\t  -(__v4sf) __B,\n+\t\t\t\t\t\t  (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fnmadd_round_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B,\n+\t\t\t const int __R)\n+{\n+  return (__m128d) __builtin_ia32_vfmaddsd3_mask ((__v2df) __W,\n+\t\t\t\t\t\t  -(__v2df) __A,\n+\t\t\t\t\t\t  (__v2df) __B,\n+\t\t\t\t\t\t  (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fnmadd_round_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B,\n+\t\t\t const int __R)\n+{\n+  return (__m128) __builtin_ia32_vfmaddss3_mask ((__v4sf) __W,\n+\t\t\t\t\t\t -(__v4sf) __A,\n+\t\t\t\t\t\t (__v4sf) __B,\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fnmadd_round_sd (__m128d __W, __m128d __A, __m128d __B, __mmask8 __U,\n+\t\t\t  const int __R)\n+{\n+  return (__m128d) __builtin_ia32_vfmaddsd3_mask3 ((__v2df) __W,\n+\t\t\t\t\t\t   -(__v2df) __A,\n+\t\t\t\t\t\t   (__v2df) __B,\n+\t\t\t\t\t\t   (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fnmadd_round_ss (__m128 __W, __m128 __A, __m128 __B, __mmask8 __U,\n+\t\t\t  const int __R)\n+{\n+  return (__m128) __builtin_ia32_vfmaddss3_mask3 ((__v4sf) __W,\n+\t\t\t\t\t\t  -(__v4sf) __A,\n+\t\t\t\t\t\t  (__v4sf) __B,\n+\t\t\t\t\t\t  (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fnmadd_round_sd (__mmask8 __U, __m128d __W, __m128d __A, __m128d __B,\n+\t\t\t  const int __R)\n+{\n+  return (__m128d) __builtin_ia32_vfmaddsd3_maskz ((__v2df) __W,\n+\t\t\t\t\t\t   -(__v2df) __A,\n+\t\t\t\t\t\t   (__v2df) __B,\n+\t\t\t\t\t\t   (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fnmadd_round_ss (__mmask8 __U, __m128 __W, __m128 __A, __m128 __B,\n+\t\t\t  const int __R)\n+{\n+  return (__m128) __builtin_ia32_vfmaddss3_maskz ((__v4sf) __W,\n+\t\t\t\t\t\t  -(__v4sf) __A,\n+\t\t\t\t\t\t  (__v4sf) __B,\n+\t\t\t\t\t\t  (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fnmsub_round_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B,\n+\t\t\t const int __R)\n+{\n+  return (__m128d) __builtin_ia32_vfmaddsd3_mask ((__v2df) __W,\n+\t\t\t\t\t\t  -(__v2df) __A,\n+\t\t\t\t\t\t  -(__v2df) __B,\n+\t\t\t\t\t\t  (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fnmsub_round_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B,\n+\t\t\t const int __R)\n+{\n+  return (__m128) __builtin_ia32_vfmaddss3_mask ((__v4sf) __W,\n+\t\t\t\t\t\t -(__v4sf) __A,\n+\t\t\t\t\t\t -(__v4sf) __B,\n+\t\t\t\t\t\t (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fnmsub_round_sd (__m128d __W, __m128d __A, __m128d __B, __mmask8 __U,\n+\t\t\t  const int __R)\n+{\n+  return (__m128d) __builtin_ia32_vfmsubsd3_mask3 ((__v2df) __W,\n+\t\t\t\t\t\t   -(__v2df) __A,\n+\t\t\t\t\t\t   (__v2df) __B,\n+\t\t\t\t\t\t   (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fnmsub_round_ss (__m128 __W, __m128 __A, __m128 __B, __mmask8 __U,\n+\t\t\t  const int __R)\n+{\n+  return (__m128) __builtin_ia32_vfmsubss3_mask3 ((__v4sf) __W,\n+\t\t\t\t\t\t  -(__v4sf) __A,\n+\t\t\t\t\t\t  (__v4sf) __B,\n+\t\t\t\t\t\t  (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fnmsub_round_sd (__mmask8 __U, __m128d __W, __m128d __A, __m128d __B,\n+\t\t\t  const int __R)\n+{\n+  return (__m128d) __builtin_ia32_vfmaddsd3_maskz ((__v2df) __W,\n+\t\t\t\t\t\t   -(__v2df) __A,\n+\t\t\t\t\t\t   -(__v2df) __B,\n+\t\t\t\t\t\t   (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fnmsub_round_ss (__mmask8 __U, __m128 __W, __m128 __A, __m128 __B,\n+\t\t\t  const int __R)\n+{\n+  return (__m128) __builtin_ia32_vfmaddss3_maskz ((__v4sf) __W,\n+\t\t\t\t\t\t  -(__v4sf) __A,\n+\t\t\t\t\t\t  -(__v4sf) __B,\n+\t\t\t\t\t\t  (__mmask8) __U, __R);\n+}\n+#else\n+#define _mm_mask_fmadd_round_sd(A, U, B, C, R)            \\\n+    (__m128d) __builtin_ia32_vfmaddsd3_mask (A, B, C, U, R)\n+\n+#define _mm_mask_fmadd_round_ss(A, U, B, C, R)            \\\n+    (__m128) __builtin_ia32_vfmaddss3_mask (A, B, C, U, R)\n+\n+#define _mm_mask3_fmadd_round_sd(A, B, C, U, R)            \\\n+    (__m128d) __builtin_ia32_vfmaddsd3_mask3 (A, B, C, U, R)\n+\n+#define _mm_mask3_fmadd_round_ss(A, B, C, U, R)            \\\n+    (__m128) __builtin_ia32_vfmaddss3_mask3 (A, B, C, U, R)\n+\n+#define _mm_maskz_fmadd_round_sd(U, A, B, C, R)            \\\n+    (__m128d) __builtin_ia32_vfmaddsd3_mask3 (A, B, C, U, R)\n+\n+#define _mm_maskz_fmadd_round_ss(U, A, B, C, R)            \\\n+    (__m128) __builtin_ia32_vfmaddss3_mask3 (A, B, C, U, R)\n+\n+#define _mm_mask_fmsub_round_sd(A, U, B, C, R)            \\\n+    (__m128d) __builtin_ia32_vfmaddsd3_mask (A, B, -(C), U, R)\n+\n+#define _mm_mask_fmsub_round_ss(A, U, B, C, R)            \\\n+    (__m128) __builtin_ia32_vfmaddss3_mask (A, B, -(C), U, R)\n+\n+#define _mm_mask3_fmsub_round_sd(A, B, C, U, R)            \\\n+    (__m128d) __builtin_ia32_vfmsubsd3_mask3 (A, B, C, U, R)\n+\n+#define _mm_mask3_fmsub_round_ss(A, B, C, U, R)            \\\n+    (__m128) __builtin_ia32_vfmsubss3_mask3 (A, B, C, U, R)\n+\n+#define _mm_maskz_fmsub_round_sd(U, A, B, C, R)            \\\n+    (__m128d) __builtin_ia32_vfmaddsd3_mask3 (A, B, -(C), U, R)\n+\n+#define _mm_maskz_fmsub_round_ss(U, A, B, C, R)            \\\n+    (__m128) __builtin_ia32_vfmaddss3_mask3 (A, B, -(C), U, R)\n+\n+#define _mm_mask_fnmadd_round_sd(A, U, B, C, R)            \\\n+    (__m128d) __builtin_ia32_vfmaddsd3_mask (A, -(B), C, U, R)\n+\n+#define _mm_mask_fnmadd_round_ss(A, U, B, C, R)            \\\n+    (__m128) __builtin_ia32_vfmaddss3_mask (A, -(B), C, U, R)\n+\n+#define _mm_mask3_fnmadd_round_sd(A, B, C, U, R)            \\\n+    (__m128d) __builtin_ia32_vfmaddsd3_mask3 (A, -(B), C, U, R)\n+\n+#define _mm_mask3_fnmadd_round_ss(A, B, C, U, R)            \\\n+    (__m128) __builtin_ia32_vfmaddss3_mask3 (A, -(B), C, U, R)\n+\n+#define _mm_maskz_fnmadd_round_sd(U, A, B, C, R)            \\\n+    (__m128d) __builtin_ia32_vfmaddsd3_mask3 (A, -(B), C, U, R)\n+\n+#define _mm_maskz_fnmadd_round_ss(U, A, B, C, R)            \\\n+    (__m128) __builtin_ia32_vfmaddss3_mask3 (A, -(B), C, U, R)\n+\n+#define _mm_mask_fnmsub_round_sd(A, U, B, C, R)            \\\n+    (__m128d) __builtin_ia32_vfmaddsd3_mask (A, -(B), -(C), U, R)\n+\n+#define _mm_mask_fnmsub_round_ss(A, U, B, C, R)            \\\n+    (__m128) __builtin_ia32_vfmaddss3_mask (A, -(B), -(C), U, R)\n+\n+#define _mm_mask3_fnmsub_round_sd(A, B, C, U, R)            \\\n+    (__m128d) __builtin_ia32_vfmsubsd3_mask3 (A, -(B), C, U, R)\n+\n+#define _mm_mask3_fnmsub_round_ss(A, B, C, U, R)            \\\n+    (__m128) __builtin_ia32_vfmsubss3_mask3 (A, -(B), C, U, R)\n+\n+#define _mm_maskz_fnmsub_round_sd(U, A, B, C, R)            \\\n+    (__m128d) __builtin_ia32_vfmaddsd3_mask3 (A, -(B), -(C), U, R)\n+\n+#define _mm_maskz_fnmsub_round_ss(U, A, B, C, R)            \\\n+    (__m128) __builtin_ia32_vfmaddss3_mask3 (A, -(B), -(C), U, R)\n+#endif\n+\n #ifdef __OPTIMIZE__\n extern __inline int\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))"}, {"sha": "6580890edc08468d60ac633208f17b100b94c1d0", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=5c4ade6d44914428c8f71713f15c5697d27ed3c8", "patch": "@@ -2827,6 +2827,14 @@ BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_fmadd_v16sf_mask3_round, \"__\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_fmadd_v16sf_maskz_round, \"__builtin_ia32_vfmaddps512_maskz\", IX86_BUILTIN_VFMADDPS512_MASKZ, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_fmai_vmfmadd_v2df_round, \"__builtin_ia32_vfmaddsd3_round\", IX86_BUILTIN_VFMADDSD3_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DF_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_fmai_vmfmadd_v4sf_round, \"__builtin_ia32_vfmaddss3_round\", IX86_BUILTIN_VFMADDSS3_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_vmfmadd_v2df_mask_round, \"__builtin_ia32_vfmaddsd3_mask\", IX86_BUILTIN_VFMADDSD3_MASK, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DF_UQI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_vmfmadd_v2df_mask3_round, \"__builtin_ia32_vfmaddsd3_mask3\", IX86_BUILTIN_VFMADDSD3_MASK3, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DF_UQI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_vmfmadd_v2df_maskz_round, \"__builtin_ia32_vfmaddsd3_maskz\", IX86_BUILTIN_VFMADDSD3_MASKZ, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DF_UQI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_vmfmsub_v2df_mask3_round, \"__builtin_ia32_vfmsubsd3_mask3\", IX86_BUILTIN_VFMSUBSD3_MASK3, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DF_UQI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_vmfmadd_v4sf_mask_round, \"__builtin_ia32_vfmaddss3_mask\", IX86_BUILTIN_VFMADDSS3_MASK, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF_UQI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_vmfmadd_v4sf_mask3_round, \"__builtin_ia32_vfmaddss3_mask3\", IX86_BUILTIN_VFMADDSS3_MASK3, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF_UQI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_vmfmadd_v4sf_maskz_round, \"__builtin_ia32_vfmaddss3_maskz\", IX86_BUILTIN_VFMADDSS3_MASKZ, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF_UQI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_vmfmsub_v4sf_mask3_round, \"__builtin_ia32_vfmsubss3_mask3\", IX86_BUILTIN_VFMSUBSS3_MASK3, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_fmaddsub_v8df_mask_round, \"__builtin_ia32_vfmaddsubpd512_mask\", IX86_BUILTIN_VFMADDSUBPD512_MASK, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_fmaddsub_v8df_mask3_round, \"__builtin_ia32_vfmaddsubpd512_mask3\", IX86_BUILTIN_VFMADDSUBPD512_MASK3, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_fmaddsub_v8df_maskz_round, \"__builtin_ia32_vfmaddsubpd512_maskz\", IX86_BUILTIN_VFMADDSUBPD512_MASKZ, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_UQI_INT)"}, {"sha": "b5f20f1597ed56068571c02174af5fda8868bf95", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5c4ade6d44914428c8f71713f15c5697d27ed3c8", "patch": "@@ -30524,8 +30524,6 @@ enum ix86_builtins\n   IX86_BUILTIN_GATHERSIV8SI,\n   IX86_BUILTIN_GATHERDIV4SI,\n   IX86_BUILTIN_GATHERDIV8SI,\n-  IX86_BUILTIN_VFMSUBSD3_MASK3,\n-  IX86_BUILTIN_VFMSUBSS3_MASK3,\n   IX86_BUILTIN_GATHER3SIV8SF,\n   IX86_BUILTIN_GATHER3SIV4SF,\n   IX86_BUILTIN_GATHER3SIV4DF,"}, {"sha": "dc588ec1ccbdba624d3af1b12fe589a7125ba2c5", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 246, "deletions": 0, "changes": 246, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=5c4ade6d44914428c8f71713f15c5697d27ed3c8", "patch": "@@ -4643,6 +4643,252 @@\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"avx512f_vmfmadd_<mode>_mask<round_name>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:VF_128\n+\t  (vec_merge:VF_128\n+\t    (fma:VF_128\n+\t      (match_operand:VF_128 1 \"register_operand\" \"0,0\")\n+\t      (match_operand:VF_128 2 \"<round_nimm_predicate>\" \"<round_constraint>,v\")\n+\t      (match_operand:VF_128 3 \"<round_nimm_predicate>\" \"v,<round_constraint>\"))\n+\t    (match_dup 1)\n+\t    (match_operand:QI 4 \"register_operand\" \"Yk,Yk\"))\n+\t  (match_dup 1)\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512F\"\n+  \"@\n+   vfmadd132<ssescalarmodesuffix>\\t{<round_op5>%2, %3, %0%{%4%}|%0%{%4%}, %<iptr>3, %<iptr>2<round_op5>}\n+   vfmadd213<ssescalarmodesuffix>\\t{<round_op5>%3, %2, %0%{%4%}|%0%{%4%}, %<iptr>2, %<iptr>3<round_op5>}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"avx512f_vmfmadd_<mode>_mask3<round_name>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VF_128\n+\t  (vec_merge:VF_128\n+\t    (fma:VF_128\n+\t      (match_operand:VF_128 1 \"register_operand\" \"v\")\n+\t      (match_operand:VF_128 2 \"<round_nimm_predicate>\" \"<round_constraint>\")\n+\t      (match_operand:VF_128 3 \"register_operand\" \"0\"))\n+\t    (match_dup 3)\n+\t    (match_operand:QI 4 \"register_operand\" \"Yk\"))\n+\t  (match_dup 3)\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512F\"\n+  \"vfmadd231<ssescalarmodesuffix>\\t{<round_op5>%2, %1, %0%{%4%}|%0%{%4%}, %<iptr>3, %<iptr>2<round_op5>}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_expand \"avx512f_vmfmadd_<mode>_maskz<round_expand_name>\"\n+  [(match_operand:VF_128 0 \"register_operand\")\n+   (match_operand:VF_128 1 \"<round_expand_nimm_predicate>\")\n+   (match_operand:VF_128 2 \"<round_expand_nimm_predicate>\")\n+   (match_operand:VF_128 3 \"<round_expand_nimm_predicate>\")\n+   (match_operand:QI 4 \"register_operand\")]\n+  \"TARGET_AVX512F\"\n+{\n+  emit_insn (gen_avx512f_vmfmadd_<mode>_maskz_1<round_expand_name> (\n+    operands[0], operands[1], operands[2], operands[3],\n+    CONST0_RTX (<MODE>mode), operands[4]<round_expand_operand>));\n+  DONE;\n+})\n+\n+(define_insn \"avx512f_vmfmadd_<mode>_maskz_1<round_name>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:VF_128\n+\t  (vec_merge:VF_128\n+\t    (fma:VF_128\n+\t      (match_operand:VF_128 1 \"register_operand\" \"0,0\")\n+\t      (match_operand:VF_128 2 \"<round_nimm_predicate>\" \"<round_constraint>,v\")\n+\t      (match_operand:VF_128 3 \"<round_nimm_predicate>\" \"v,<round_constraint>\"))\n+\t    (match_operand:VF_128 4 \"const0_operand\" \"C,C\")\n+\t    (match_operand:QI 5 \"register_operand\" \"Yk,Yk\"))\n+\t  (match_dup 1)\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512F\"\n+  \"@\n+   vfmadd132<ssescalarmodesuffix>\\t{<round_op6>%2, %3, %0%{%5%}%{z%}|%0%{%5%}%{z%}, %<iptr>3, %<iptr>2<round_op6>}\n+   vfmadd213<ssescalarmodesuffix>\\t{<round_op6>%3, %2, %0%{%5%}%{z%}|%0%{%5%}%{z%}, %<iptr>2, %<iptr>3<round_op6>}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*avx512f_vmfmsub_<mode>_mask<round_name>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:VF_128\n+\t  (vec_merge:VF_128\n+\t    (fma:VF_128\n+\t      (match_operand:VF_128 1 \"register_operand\" \"0,0\")\n+\t      (match_operand:VF_128 2 \"<round_nimm_predicate>\" \"<round_constraint>,v\")\n+\t      (neg:VF_128\n+\t\t(match_operand:VF_128 3 \"<round_nimm_predicate>\" \"v,<round_constraint>\")))\n+\t    (match_dup 1)\n+\t    (match_operand:QI 4 \"register_operand\" \"Yk,Yk\"))\n+\t  (match_dup 1)\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512F\"\n+  \"@\n+   vfmsub132<ssescalarmodesuffix>\\t{<round_op5>%2, %3, %0%{%4%}|%0%{%4%}, %<iptr>3, %<iptr>2<round_op5>}\n+   vfmsub213<ssescalarmodesuffix>\\t{<round_op5>%3, %2, %0%{%4%}|%0%{%4%}, %<iptr>2, %<iptr>3<round_op5>}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"avx512f_vmfmsub_<mode>_mask3<round_name>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VF_128\n+\t  (vec_merge:VF_128\n+\t    (fma:VF_128\n+\t      (match_operand:VF_128 1 \"register_operand\" \"v\")\n+\t      (match_operand:VF_128 2 \"<round_nimm_predicate>\" \"<round_constraint>\")\n+\t      (neg:VF_128\n+\t\t(match_operand:VF_128 3 \"register_operand\" \"0\")))\n+\t    (match_dup 3)\n+\t    (match_operand:QI 4 \"register_operand\" \"Yk\"))\n+\t  (match_dup 3)\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512F\"\n+  \"vfmsub231<ssescalarmodesuffix>\\t{<round_op5>%2, %1, %0%{%4%}|%0%{%4%}, %<iptr>3, %<iptr>2<round_op5>}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*avx512f_vmfmsub_<mode>_maskz_1<round_name>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:VF_128\n+\t  (vec_merge:VF_128\n+\t    (fma:VF_128\n+\t      (match_operand:VF_128 1 \"register_operand\" \"0,0\")\n+\t      (match_operand:VF_128 2 \"<round_nimm_predicate>\" \"<round_constraint>,v\")\n+\t      (neg:VF_128\n+\t\t(match_operand:VF_128 3 \"<round_nimm_predicate>\" \"v,<round_constraint>\")))\n+\t    (match_operand:VF_128 4 \"const0_operand\" \"C,C\")\n+\t    (match_operand:QI 5 \"register_operand\" \"Yk,Yk\"))\n+\t  (match_dup 1)\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512F\"\n+  \"@\n+   vfmsub132<ssescalarmodesuffix>\\t{<round_op6>%2, %3, %0%{%5%}%{z%}|%0%{%5%}%{z%}, %<iptr>3, %<iptr>2<round_op6>}\n+   vfmsub213<ssescalarmodesuffix>\\t{<round_op6>%3, %2, %0%{%5%}%{z%}|%0%{%5%}%{z%}, %<iptr>2, %<iptr>3<round_op6>}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*avx512f_vmfnmadd_<mode>_mask<round_name>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:VF_128\n+\t  (vec_merge:VF_128\n+\t    (fma:VF_128\n+\t      (neg:VF_128\n+\t\t(match_operand:VF_128 2 \"<round_nimm_predicate>\" \"<round_constraint>,v\"))\n+\t      (match_operand:VF_128 1 \"register_operand\" \"0,0\")\n+\t      (match_operand:VF_128 3 \"<round_nimm_predicate>\" \"v,<round_constraint>\"))\n+\t    (match_dup 1)\n+\t    (match_operand:QI 4 \"register_operand\" \"Yk,Yk\"))\n+\t  (match_dup 1)\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512F\"\n+  \"@\n+   vfnmadd132<ssescalarmodesuffix>\\t{<round_op5>%2, %3, %0%{%4%}|%0%{%4%}, %<iptr>3, %<iptr>2<round_op5>}\n+   vfnmadd213<ssescalarmodesuffix>\\t{<round_op5>%3, %2, %0%{%4%}|%0%{%4%}, %<iptr>2, %<iptr>3<round_op5>}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*avx512f_vmfnmadd_<mode>_mask3<round_name>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VF_128\n+\t  (vec_merge:VF_128\n+\t    (fma:VF_128\n+\t      (neg:VF_128\n+\t\t(match_operand:VF_128 2 \"<round_nimm_predicate>\" \"<round_constraint>\"))\n+\t      (match_operand:VF_128 1 \"register_operand\" \"v\")\n+\t      (match_operand:VF_128 3 \"register_operand\" \"0\"))\n+\t    (match_dup 3)\n+\t    (match_operand:QI 4 \"register_operand\" \"Yk\"))\n+\t  (match_dup 3)\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512F\"\n+  \"vfnmadd231<ssescalarmodesuffix>\\t{<round_op5>%2, %1, %0%{%4%}|%0%{%4%}, %<iptr>3, %<iptr>2<round_op5>}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*avx512f_vmfnmadd_<mode>_maskz_1<round_name>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:VF_128\n+\t  (vec_merge:VF_128\n+\t    (fma:VF_128\n+\t      (neg:VF_128\n+\t\t(match_operand:VF_128 2 \"<round_nimm_predicate>\" \"<round_constraint>,v\"))\n+\t      (match_operand:VF_128 1 \"register_operand\" \"0,0\")\n+\t      (match_operand:VF_128 3 \"<round_nimm_predicate>\" \"v,<round_constraint>\"))\n+\t    (match_operand:VF_128 4 \"const0_operand\" \"C,C\")\n+\t    (match_operand:QI 5 \"register_operand\" \"Yk,Yk\"))\n+\t  (match_dup 1)\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512F\"\n+  \"@\n+   vfnmadd132<ssescalarmodesuffix>\\t{<round_op6>%2, %3, %0%{%5%}%{z%}|%0%{%5%}%{z%}, %<iptr>3, %<iptr>2<round_op6>}\n+   vfnmadd213<ssescalarmodesuffix>\\t{<round_op6>%3, %2, %0%{%5%}%{z%}|%0%{%5%}%{z%}, %<iptr>2, %<iptr>3<round_op6>}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*avx512f_vmfnmsub_<mode>_mask<round_name>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:VF_128\n+\t  (vec_merge:VF_128\n+\t    (fma:VF_128\n+\t      (neg:VF_128\n+\t\t(match_operand:VF_128 2 \"<round_nimm_predicate>\" \"<round_constraint>,v\"))\n+\t      (match_operand:VF_128 1 \"register_operand\" \"0,0\")\n+\t      (neg:VF_128\n+\t\t(match_operand:VF_128 3 \"<round_nimm_predicate>\" \"v,<round_constraint>\")))\n+\t    (match_dup 1)\n+\t    (match_operand:QI 4 \"register_operand\" \"Yk,Yk\"))\n+\t  (match_dup 1)\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512F\"\n+  \"@\n+   vfnmsub132<ssescalarmodesuffix>\\t{<round_op5>%2, %3, %0%{%4%}|%0%{%4%}, %<iptr>3, %<iptr>2<round_op5>}\n+   vfnmsub213<ssescalarmodesuffix>\\t{<round_op5>%3, %2, %0%{%4%}|%0%{%4%}, %<iptr>2, %<iptr>3<round_op5>}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"avx512f_vmfnmsub_<mode>_mask3<round_name>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VF_128\n+\t  (vec_merge:VF_128\n+\t    (fma:VF_128\n+\t      (neg:VF_128\n+\t\t(match_operand:VF_128 2 \"<round_nimm_predicate>\" \"<round_constraint>\"))\n+\t      (match_operand:VF_128 1 \"register_operand\" \"v\")\n+\t      (neg:VF_128\n+\t\t(match_operand:VF_128 3 \"register_operand\" \"0\")))\n+\t    (match_dup 3)\n+\t    (match_operand:QI 4 \"register_operand\" \"Yk\"))\n+\t  (match_dup 3)\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512F\"\n+  \"vfnmsub231<ssescalarmodesuffix>\\t{<round_op5>%2, %1, %0%{%4%}|%0%{%4%}, %<iptr>3, %<iptr>2<round_op5>}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*avx512f_vmfnmsub_<mode>_maskz_1<round_name>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:VF_128\n+\t  (vec_merge:VF_128\n+\t    (fma:VF_128\n+\t      (neg:VF_128\n+\t\t(match_operand:VF_128 2 \"<round_nimm_predicate>\" \"<round_constraint>,v\"))\n+\t      (match_operand:VF_128 1 \"register_operand\" \"0,0\")\n+\t      (neg:VF_128\n+\t\t(match_operand:VF_128 3 \"<round_nimm_predicate>\" \"v,<round_constraint>\")))\n+\t    (match_operand:VF_128 4 \"const0_operand\" \"C,C\")\n+\t    (match_operand:QI 5 \"register_operand\" \"Yk,Yk\"))\n+\t  (match_dup 1)\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512F\"\n+  \"@\n+   vfnmsub132<ssescalarmodesuffix>\\t{<round_op6>%2, %3, %0%{%5%}%{z%}|%0%{%5%}%{z%}, %<iptr>3, %<iptr>2<round_op6>}\n+   vfnmsub213<ssescalarmodesuffix>\\t{<round_op6>%3, %2, %0%{%5%}%{z%}|%0%{%5%}%{z%}, %<iptr>2, %<iptr>3<round_op6>}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n ;; FMA4 floating point scalar intrinsics.  These write the\n ;; entire destination register, with the high-order elements zeroed.\n "}, {"sha": "ac41542e2265e5c73d8b2c9cc82dcbfbcf8763dc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5c4ade6d44914428c8f71713f15c5697d27ed3c8", "patch": "@@ -1,3 +1,46 @@\n+2019-03-22  Hongtao Liu  <hongtao.liu@intel.com>\n+\n+\tPR target/89784\n+\t* gcc.target/i386/avx512f-vfmaddXXXsd-1.c (avx512f_test): Add tests\n+\tfor _mm_mask{,3,z}_*.\n+\t* gcc.target/i386/avx512f-vfmaddXXXss-1.c (avx512f_test): Likewise.\n+\t* gcc.target/i386/avx512f-vfmsubXXXsd-1.c (avx512f_test): Likewise.\n+\t* gcc.target/i386/avx512f-vfmsubXXXss-1.c (avx512f_test): Likewise.\n+\t* gcc.target/i386/avx512f-vfnmaddXXXsd-1.c (avx512f_test): Likewise.\n+\t* gcc.target/i386/avx512f-vfnmaddXXXss-1.c (avx512f_test): Likewise.\n+\t* gcc.target/i386/avx512f-vfnmsubXXXsd-1.c (avx512f_test): Likewise.\n+\t* gcc.target/i386/avx512f-vfnmsubXXXss-1.c (avx512f_test): Likewise.\n+\t* gcc.target/i386/avx512f-vfmaddXXXsd-2.c: New test.\n+\t* gcc.target/i386/avx512f-vfmaddXXXss-2.c: New test.\n+\t* gcc.target/i386/avx512f-vfmsubXXXsd-2.c: New test.\n+\t* gcc.target/i386/avx512f-vfmsubXXXss-2.c: New test.\n+\t* gcc.target/i386/avx512f-vfnmaddXXXsd-2.c: New test.\n+\t* gcc.target/i386/avx512f-vfnmaddXXXss-2.c: New test.\n+\t* gcc.target/i386/avx512f-vfnmsubXXXsd-2.c: New test.\n+\t* gcc.target/i386/avx512f-vfnmsubXXXss-2.c: New test.\n+\n+2019-03-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/89784\n+\t* gcc.target/i386/sse-13.c (__builtin_ia32_vfmaddsd3_mask,\n+\t__builtin_ia32_vfmaddsd3_mask3, __builtin_ia32_vfmaddsd3_maskz,\n+\t__builtin_ia32_vfmsubsd3_mask3, __builtin_ia32_vfmaddss3_mask,\n+\t__builtin_ia32_vfmaddss3_mask3, __builtin_ia32_vfmaddss3_maskz,\n+\t__builtin_ia32_vfmsubss3_mask3): Define.\n+\t* gcc.target/i386/sse-23.c (__builtin_ia32_vfmaddsd3_mask,\n+\t__builtin_ia32_vfmaddsd3_mask3, __builtin_ia32_vfmaddsd3_maskz,\n+\t__builtin_ia32_vfmsubsd3_mask3, __builtin_ia32_vfmaddss3_mask,\n+\t__builtin_ia32_vfmaddss3_mask3, __builtin_ia32_vfmaddss3_maskz,\n+\t__builtin_ia32_vfmsubss3_mask3): Define.\n+\t* gcc.target/i386/avx-1.c (__builtin_ia32_vfmaddsd3_mask,\n+\t__builtin_ia32_vfmaddsd3_mask3, __builtin_ia32_vfmaddsd3_maskz,\n+\t__builtin_ia32_vfmsubsd3_mask3, __builtin_ia32_vfmaddss3_mask,\n+\t__builtin_ia32_vfmaddss3_mask3, __builtin_ia32_vfmaddss3_maskz,\n+\t__builtin_ia32_vfmsubss3_mask3): Define.\n+\t* gcc.target/i386/sse-14.c: Add tests for\n+\t_mm_mask{,3,z}_f{,n}m{add,sub}_round_s{s,d} builtins.\n+\t* gcc.target/i386/sse-22.c: Likewise.\n+\n 2019-03-21  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/89350"}, {"sha": "e09f5a17984073e8d9358072bd5694b8d54661cb", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=5c4ade6d44914428c8f71713f15c5697d27ed3c8", "patch": "@@ -373,6 +373,14 @@\n #define __builtin_ia32_vfnmsubps512_maskz(A, B, C, D, E) __builtin_ia32_vfnmsubps512_maskz(A, B, C, D, 8)\n #define __builtin_ia32_vpermilpd512_mask(A, E, C, D) __builtin_ia32_vpermilpd512_mask(A, 1, C, D)\n #define __builtin_ia32_vpermilps512_mask(A, E, C, D) __builtin_ia32_vpermilps512_mask(A, 1, C, D)\n+#define __builtin_ia32_vfmaddsd3_mask(A, B, C, D, E) __builtin_ia32_vfmaddsd3_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsd3_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsd3_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsd3_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsd3_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubsd3_mask3(A, B, C, D, E) __builtin_ia32_vfmsubsd3_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddss3_mask(A, B, C, D, E) __builtin_ia32_vfmaddss3_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddss3_mask3(A, B, C, D, E) __builtin_ia32_vfmaddss3_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddss3_maskz(A, B, C, D, E) __builtin_ia32_vfmaddss3_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubss3_mask3(A, B, C, D, E) __builtin_ia32_vfmsubss3_mask3(A, B, C, D, 8)\n \n /* avx512erintrin.h */\n #define __builtin_ia32_exp2ps_mask(A, B, C, D) __builtin_ia32_exp2ps_mask(A, B, C, 8)"}, {"sha": "d6f9015327b01142ca04d297d8caa02d3ae26c0b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmaddXXXsd-1.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXsd-1.c?ref=5c4ade6d44914428c8f71713f15c5697d27ed3c8", "patch": "@@ -1,13 +1,26 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmadd...sd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd231sd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd...sd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vfmadd...sd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd...sd\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd231sd\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd...sd\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n volatile __m128d a, b, c;\n+volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n+  a = _mm_mask_fmadd_sd (a, m, b, c);\n+  c = _mm_mask3_fmadd_sd (a, b, c, m);\n+  a = _mm_maskz_fmadd_sd (m, a, b, c);\n   a = _mm_fmadd_round_sd (a, b, c, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  a = _mm_mask_fmadd_round_sd (a, m, b, c, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  c = _mm_mask3_fmadd_round_sd (a, b, c, m, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  a = _mm_maskz_fmadd_round_sd (m, a, b, c, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "6e01bd0619bb4dadc51b5cb85c055266fed246ac", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmaddXXXsd-2.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXsd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXsd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXsd-2.c?ref=5c4ade6d44914428c8f71713f15c5697d27ed3c8", "patch": "@@ -0,0 +1,94 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_add (double *s1, double *s2, double *s3, double* r)\n+{\n+  r[0] = s1[0] * s2[0] + s3[0];\n+  \n+  int i;\n+  for (i = 1; i < SIZE; i++)\n+    r[i] = s1[i];\n+}\n+\n+static void\n+calc_add_3 (double *s1, double *s2, double *s3, double* r)\n+{\n+  r[0] = s2[0] * s3[0] + s1[0];\n+  \n+  int i;\n+  for (i = 1; i < SIZE; i++)\n+    r[i] = s1[i];\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128d res1, res2, res3, res4, res5, res6, res7, src1, src2, src3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref1[SIZE], res_ref2[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = DEFAULT_VALUE;\n+      src2.a[i] = 56.78 * (i + 1) * sign;\n+      src3.a[i] = 90.12 * (i + 2) * sign;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res1.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res5.a[i] = DEFAULT_VALUE;\n+      res6.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  calc_add (src1.a, src2.a, src3.a, res_ref1);\n+  calc_add_3(src1.a, src2.a, src3.a, res_ref2);\n+\n+  res1.x = _mm_mask_fmadd_sd (src1.x, mask, src2.x, src3.x);\n+  res2.x = _mm_mask3_fmadd_sd (src2.x, src3.x, src1.x, mask);\n+  res3.x = _mm_maskz_fmadd_sd (mask, src1.x, src2.x, src3.x);\n+  res4.x = _mm_fmadd_round_sd (src1.x, src2.x, src3.x, _MM_FROUND_NO_EXC);\n+  res5.x = _mm_mask_fmadd_round_sd (src1.x, mask, src2.x, src3.x, _MM_FROUND_NO_EXC);\n+  res6.x = _mm_mask3_fmadd_round_sd (src2.x, src3.x, src1.x, mask, _MM_FROUND_NO_EXC);\n+  res7.x = _mm_maskz_fmadd_round_sd (mask, src1.x, src2.x, src3.x, _MM_FROUND_NO_EXC);\n+\n+  if (check_union128d (res4, res_ref1))\n+    abort();\n+\n+  MASK_ZERO (d) (res_ref1, mask, 1);\n+  if (check_union128d (res3, res_ref1))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref1, mask, 1);\n+  if (check_union128d (res7, res_ref1))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref2, mask, 1);\n+  if (check_union128d (res2, res_ref2))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref2, mask, 1);\n+  if (check_union128d (res6, res_ref2))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref1, mask, 1);\n+  if (check_union128d (res1, res_ref1))\n+    abort ();\n+  \n+  MASK_MERGE (d) (res_ref1, mask, 1);\n+  if (check_union128d (res5, res_ref1))\n+    abort ();\n+}\n+"}, {"sha": "e50b5b586c5a8b4d4f7a76de754ef6624c946372", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmaddXXXss-1.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXss-1.c?ref=5c4ade6d44914428c8f71713f15c5697d27ed3c8", "patch": "@@ -1,13 +1,26 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmadd...ss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd231ss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd...ss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vfmadd...ss\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd...ss\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd231ss\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd...ss\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n volatile __m128 a, b, c;\n+volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n+  a = _mm_mask_fmadd_ss (a, m, b, c);\n+  c = _mm_mask3_fmadd_ss (a, b, c, m);\n+  a = _mm_maskz_fmadd_ss (m, a, b, c);\n   a = _mm_fmadd_round_ss (a, b, c, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  a = _mm_mask_fmadd_round_ss (a, m, b, c, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  c = _mm_mask3_fmadd_round_ss (a, b, c, m, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  a = _mm_maskz_fmadd_round_ss (m, a, b, c, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "4fb7a08fa7ade0ca29b74633aaa23712c71ba3bc", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmaddXXXss-2.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXss-2.c?ref=5c4ade6d44914428c8f71713f15c5697d27ed3c8", "patch": "@@ -0,0 +1,94 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_add (float *s1, float *s2, float *s3, float* r)\n+{\n+  r[0] = s1[0] * s2[0] + s3[0];\n+  \n+  int i;\n+  for (i = 1; i < SIZE; i++)\n+    r[i] = s1[i];\n+}\n+\n+static void\n+calc_add_3 (float *s1, float *s2, float *s3, float* r)\n+{\n+  r[0] = s2[0] * s3[0] + s1[0];\n+  \n+  int i;\n+  for (i = 1; i < SIZE; i++)\n+    r[i] = s1[i];\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128 res1, res2, res3, res4, res5, res6, res7, src1, src2, src3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref1[SIZE], res_ref2[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = DEFAULT_VALUE;\n+      src2.a[i] = 56.78 * (i + 1) * sign;\n+      src3.a[i] = 90.12 * (i + 2) * sign;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res1.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res5.a[i] = DEFAULT_VALUE;\n+      res6.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  calc_add (src1.a, src2.a, src3.a, res_ref1);\n+  calc_add_3(src1.a, src2.a, src3.a, res_ref2);\n+\n+  res1.x = _mm_mask_fmadd_ss (src1.x, mask, src2.x, src3.x);\n+  res2.x = _mm_mask3_fmadd_ss (src2.x, src3.x, src1.x, mask);\n+  res3.x = _mm_maskz_fmadd_ss (mask, src1.x, src2.x, src3.x);\n+  res4.x = _mm_fmadd_round_ss (src1.x, src2.x, src3.x, _MM_FROUND_NO_EXC);\n+  res5.x = _mm_mask_fmadd_round_ss (src1.x, mask, src2.x, src3.x, _MM_FROUND_NO_EXC);\n+  res6.x = _mm_mask3_fmadd_round_ss (src2.x, src3.x, src1.x, mask, _MM_FROUND_NO_EXC);\n+  res7.x = _mm_maskz_fmadd_round_ss (mask, src1.x, src2.x, src3.x, _MM_FROUND_NO_EXC);\n+\n+  if (check_union128 (res4, res_ref1))\n+    abort();\n+\n+  MASK_ZERO () (res_ref1, mask, 1);\n+  if (check_union128 (res3, res_ref1))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref1, mask, 1);\n+  if (check_union128 (res7, res_ref1))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref2, mask, 1);\n+  if (check_union128 (res2, res_ref2))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref2, mask, 1);\n+  if (check_union128 (res6, res_ref2))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref1, mask, 1);\n+  if (check_union128 (res1, res_ref1))\n+    abort ();\n+  \n+  MASK_MERGE () (res_ref1, mask, 1);\n+  if (check_union128 (res5, res_ref1))\n+    abort ();\n+}\n+"}, {"sha": "15affb880ef45341af58e8edf2fefb152d91aea5", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmsubXXXsd-1.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXsd-1.c?ref=5c4ade6d44914428c8f71713f15c5697d27ed3c8", "patch": "@@ -1,13 +1,26 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmsub...sd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub231sd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...sd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vfmsub...sd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...sd\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub231sd\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...sd\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n volatile __m128d a, b, c;\n+volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n+  a = _mm_mask_fmsub_sd (a, m, b, c);\n+  c = _mm_mask3_fmsub_sd (a, b, c, m);\n+  a = _mm_maskz_fmsub_sd (m, a, b, c);\n   a = _mm_fmsub_round_sd (a, b, c, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  a = _mm_mask_fmsub_round_sd (a, m, b, c, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  c = _mm_mask3_fmsub_round_sd (a, b, c, m, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  a = _mm_maskz_fmsub_round_sd (m, a, b, c, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "701db187bbd67ac065458848ec47785f3fa98404", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmsubXXXsd-2.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXsd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXsd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXsd-2.c?ref=5c4ade6d44914428c8f71713f15c5697d27ed3c8", "patch": "@@ -0,0 +1,94 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_add (double *s1, double *s2, double *s3, double* r)\n+{\n+  r[0] = s1[0] * s2[0] - s3[0];\n+  \n+  int i;\n+  for (i = 1; i < SIZE; i++)\n+    r[i] = s1[i];\n+}\n+\n+static void\n+calc_add_3 (double *s1, double *s2, double *s3, double* r)\n+{\n+  r[0] = s2[0] * s3[0] - s1[0];\n+  \n+  int i;\n+  for (i = 1; i < SIZE; i++)\n+    r[i] = s1[i];\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128d res1, res2, res3, res4, res5, res6, res7, src1, src2, src3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref1[SIZE], res_ref2[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = DEFAULT_VALUE;\n+      src2.a[i] = 56.78 * (i + 1) * sign;\n+      src3.a[i] = 90.12 * (i + 2) * sign;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res1.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res5.a[i] = DEFAULT_VALUE;\n+      res6.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  calc_add (src1.a, src2.a, src3.a, res_ref1);\n+  calc_add_3(src1.a, src2.a, src3.a, res_ref2);\n+\n+  res1.x = _mm_mask_fmsub_sd (src1.x, mask, src2.x, src3.x);\n+  res2.x = _mm_mask3_fmsub_sd (src2.x, src3.x, src1.x, mask);\n+  res3.x = _mm_maskz_fmsub_sd (mask, src1.x, src2.x, src3.x);\n+  res4.x = _mm_fmsub_round_sd (src1.x, src2.x, src3.x, _MM_FROUND_NO_EXC);\n+  res5.x = _mm_mask_fmsub_round_sd (src1.x, mask, src2.x, src3.x, _MM_FROUND_NO_EXC);\n+  res6.x = _mm_mask3_fmsub_round_sd (src2.x, src3.x, src1.x, mask, _MM_FROUND_NO_EXC);\n+  res7.x = _mm_maskz_fmsub_round_sd (mask, src1.x, src2.x, src3.x, _MM_FROUND_NO_EXC);\n+\n+  if (check_union128d (res4, res_ref1))\n+    abort();\n+\n+  MASK_ZERO (d) (res_ref1, mask, 1);\n+  if (check_union128d (res3, res_ref1))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref1, mask, 1);\n+  if (check_union128d (res7, res_ref1))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref2, mask, 1);\n+  if (check_union128d (res2, res_ref2))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref2, mask, 1);\n+  if (check_union128d (res6, res_ref2))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref1, mask, 1);\n+  if (check_union128d (res1, res_ref1))\n+    abort ();\n+  \n+  MASK_MERGE (d) (res_ref1, mask, 1);\n+  if (check_union128d (res5, res_ref1))\n+    abort ();\n+}\n+"}, {"sha": "34e444e3e81a4c1c04a6b8d8e7445f34a03186f7", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmsubXXXss-1.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXss-1.c?ref=5c4ade6d44914428c8f71713f15c5697d27ed3c8", "patch": "@@ -1,13 +1,26 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub231ss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vfmsub...ss\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ss\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub231ss\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ss\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n volatile __m128 a, b, c;\n+volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n+  a = _mm_mask_fmsub_ss (a, m, b, c);\n+  c = _mm_mask3_fmsub_ss (a, b, c, m);\n+  a = _mm_maskz_fmsub_ss (m, a, b, c);\n   a = _mm_fmsub_round_ss (a, b, c, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  a = _mm_mask_fmsub_round_ss (a, m, b, c, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  c = _mm_mask3_fmsub_round_ss (a, b, c, m, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  a = _mm_maskz_fmsub_round_ss (m, a, b, c, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "6beaed87898f8e5ad52d373fe1f72ffbdd7a626f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmsubXXXss-2.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXss-2.c?ref=5c4ade6d44914428c8f71713f15c5697d27ed3c8", "patch": "@@ -0,0 +1,94 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_add (float *s1, float *s2, float *s3, float* r)\n+{\n+  r[0] = s1[0] * s2[0] - s3[0];\n+  \n+  int i;\n+  for (i = 1; i < SIZE; i++)\n+    r[i] = s1[i];\n+}\n+\n+static void\n+calc_add_3 (float *s1, float *s2, float *s3, float* r)\n+{\n+  r[0] = s2[0] * s3[0] - s1[0];\n+  \n+  int i;\n+  for (i = 1; i < SIZE; i++)\n+    r[i] = s1[i];\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128 res1, res2, res3, res4, res5, res6, res7, src1, src2, src3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref1[SIZE], res_ref2[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = DEFAULT_VALUE;\n+      src2.a[i] = 56.78 * (i + 1) * sign;\n+      src3.a[i] = 90.12 * (i + 2) * sign;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res1.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res5.a[i] = DEFAULT_VALUE;\n+      res6.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  calc_add (src1.a, src2.a, src3.a, res_ref1);\n+  calc_add_3(src1.a, src2.a, src3.a, res_ref2);\n+\n+  res1.x = _mm_mask_fmsub_ss (src1.x, mask, src2.x, src3.x);\n+  res2.x = _mm_mask3_fmsub_ss (src2.x, src3.x, src1.x, mask);\n+  res3.x = _mm_maskz_fmsub_ss (mask, src1.x, src2.x, src3.x);\n+  res4.x = _mm_fmsub_round_ss (src1.x, src2.x, src3.x, _MM_FROUND_NO_EXC);\n+  res5.x = _mm_mask_fmsub_round_ss (src1.x, mask, src2.x, src3.x, _MM_FROUND_NO_EXC);\n+  res6.x = _mm_mask3_fmsub_round_ss (src2.x, src3.x, src1.x, mask, _MM_FROUND_NO_EXC);\n+  res7.x = _mm_maskz_fmsub_round_ss (mask, src1.x, src2.x, src3.x, _MM_FROUND_NO_EXC);\n+\n+  if (check_union128 (res4, res_ref1))\n+    abort();\n+\n+  MASK_ZERO () (res_ref1, mask, 1);\n+  if (check_union128 (res3, res_ref1))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref1, mask, 1);\n+  if (check_union128 (res7, res_ref1))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref2, mask, 1);\n+  if (check_union128 (res2, res_ref2))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref2, mask, 1);\n+  if (check_union128 (res6, res_ref2))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref1, mask, 1);\n+  if (check_union128 (res1, res_ref1))\n+    abort ();\n+  \n+  MASK_MERGE () (res_ref1, mask, 1);\n+  if (check_union128 (res5, res_ref1))\n+    abort ();\n+}\n+"}, {"sha": "09b923e39517e8fd556b77fdc9918e345042dd0c", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfnmaddXXXsd-1.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXsd-1.c?ref=5c4ade6d44914428c8f71713f15c5697d27ed3c8", "patch": "@@ -1,13 +1,26 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...sd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd231sd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...sd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vfnmadd...sd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...sd\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd231sd\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...sd\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n volatile __m128d a, b, c;\n+volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n+  a = _mm_mask_fnmadd_sd (a, m, b, c);\n+  c = _mm_mask3_fnmadd_sd (a, b, c, m);\n+  a = _mm_maskz_fnmadd_sd (m, a, b, c);\n   a = _mm_fnmadd_round_sd (a, b, c, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  a = _mm_mask_fnmadd_round_sd (a, m, b, c, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  c = _mm_mask3_fnmadd_round_sd (a, b, c, m, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  a = _mm_maskz_fnmadd_round_sd (m, a, b, c, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "4715f2dc892a7056e3caa2578fcce4faec04d02d", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfnmaddXXXsd-2.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXsd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXsd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXsd-2.c?ref=5c4ade6d44914428c8f71713f15c5697d27ed3c8", "patch": "@@ -0,0 +1,94 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_add (double *s1, double *s2, double *s3, double* r)\n+{\n+  r[0] = -s1[0] * s2[0] + s3[0];\n+  \n+  int i;\n+  for (i = 1; i < SIZE; i++)\n+    r[i] = s1[i];\n+}\n+\n+static void\n+calc_add_3 (double *s1, double *s2, double *s3, double* r)\n+{\n+  r[0] = -s2[0] * s3[0] + s1[0];\n+  \n+  int i;\n+  for (i = 1; i < SIZE; i++)\n+    r[i] = s1[i];\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128d res1, res2, res3, res4, res5, res6, res7, src1, src2, src3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref1[SIZE], res_ref2[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = DEFAULT_VALUE;\n+      src2.a[i] = 56.78 * (i + 1) * sign;\n+      src3.a[i] = 90.12 * (i + 2) * sign;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res1.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res5.a[i] = DEFAULT_VALUE;\n+      res6.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  calc_add (src1.a, src2.a, src3.a, res_ref1);\n+  calc_add_3(src1.a, src2.a, src3.a, res_ref2);\n+\n+  res1.x = _mm_mask_fnmadd_sd (src1.x, mask, src2.x, src3.x);\n+  res2.x = _mm_mask3_fnmadd_sd (src2.x, src3.x, src1.x, mask);\n+  res3.x = _mm_maskz_fnmadd_sd (mask, src1.x, src2.x, src3.x);\n+  res4.x = _mm_fnmadd_round_sd (src1.x, src2.x, src3.x, _MM_FROUND_NO_EXC);\n+  res5.x = _mm_mask_fnmadd_round_sd (src1.x, mask, src2.x, src3.x, _MM_FROUND_NO_EXC);\n+  res6.x = _mm_mask3_fnmadd_round_sd (src2.x, src3.x, src1.x, mask, _MM_FROUND_NO_EXC);\n+  res7.x = _mm_maskz_fnmadd_round_sd (mask, src1.x, src2.x, src3.x, _MM_FROUND_NO_EXC);\n+\n+  if (check_union128d (res4, res_ref1))\n+    abort();\n+\n+  MASK_ZERO (d) (res_ref1, mask, 1);\n+  if (check_union128d (res3, res_ref1))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref1, mask, 1);\n+  if (check_union128d (res7, res_ref1))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref2, mask, 1);\n+  if (check_union128d (res2, res_ref2))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref2, mask, 1);\n+  if (check_union128d (res6, res_ref2))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref1, mask, 1);\n+  if (check_union128d (res1, res_ref1))\n+    abort ();\n+  \n+  MASK_MERGE (d) (res_ref1, mask, 1);\n+  if (check_union128d (res5, res_ref1))\n+    abort ();\n+}\n+"}, {"sha": "85e8d00fa666c408af8ecd94df1e9f6de5795abb", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfnmaddXXXss-1.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXss-1.c?ref=5c4ade6d44914428c8f71713f15c5697d27ed3c8", "patch": "@@ -1,13 +1,26 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd231ss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vfnmadd...ss\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ss\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd231ss\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ss\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n volatile __m128 a, b, c;\n+volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n+  a = _mm_mask_fnmadd_ss (a, m, b, c);\n+  c = _mm_mask3_fnmadd_ss (a, b, c, m);\n+  a = _mm_maskz_fnmadd_ss (m, a, b, c);\n   a = _mm_fnmadd_round_ss (a, b, c, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  a = _mm_mask_fnmadd_round_ss (a, m, b, c, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  c = _mm_mask3_fnmadd_round_ss (a, b, c, m, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  a = _mm_maskz_fnmadd_round_ss (m, a, b, c, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "e94b7d4aed4aa635f61558f7e9854c19cbeee4d8", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfnmaddXXXss-2.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXss-2.c?ref=5c4ade6d44914428c8f71713f15c5697d27ed3c8", "patch": "@@ -0,0 +1,94 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_add (float *s1, float *s2, float *s3, float* r)\n+{\n+  r[0] = -s1[0] * s2[0] + s3[0];\n+  \n+  int i;\n+  for (i = 1; i < SIZE; i++)\n+    r[i] = s1[i];\n+}\n+\n+static void\n+calc_add_3 (float *s1, float *s2, float *s3, float* r)\n+{\n+  r[0] = -s2[0] * s3[0] + s1[0];\n+  \n+  int i;\n+  for (i = 1; i < SIZE; i++)\n+    r[i] = s1[i];\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128 res1, res2, res3, res4, res5, res6, res7, src1, src2, src3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref1[SIZE], res_ref2[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = DEFAULT_VALUE;\n+      src2.a[i] = 56.78 * (i + 1) * sign;\n+      src3.a[i] = 90.12 * (i + 2) * sign;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res1.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res5.a[i] = DEFAULT_VALUE;\n+      res6.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  calc_add (src1.a, src2.a, src3.a, res_ref1);\n+  calc_add_3(src1.a, src2.a, src3.a, res_ref2);\n+\n+  res1.x = _mm_mask_fnmadd_ss (src1.x, mask, src2.x, src3.x);\n+  res2.x = _mm_mask3_fnmadd_ss (src2.x, src3.x, src1.x, mask);\n+  res3.x = _mm_maskz_fnmadd_ss (mask, src1.x, src2.x, src3.x);\n+  res4.x = _mm_fnmadd_round_ss (src1.x, src2.x, src3.x, _MM_FROUND_NO_EXC);\n+  res5.x = _mm_mask_fnmadd_round_ss (src1.x, mask, src2.x, src3.x, _MM_FROUND_NO_EXC);\n+  res6.x = _mm_mask3_fnmadd_round_ss (src2.x, src3.x, src1.x, mask, _MM_FROUND_NO_EXC);\n+  res7.x = _mm_maskz_fnmadd_round_ss (mask, src1.x, src2.x, src3.x, _MM_FROUND_NO_EXC);\n+\n+  if (check_union128 (res4, res_ref1))\n+    abort();\n+\n+  MASK_ZERO () (res_ref1, mask, 1);\n+  if (check_union128 (res3, res_ref1))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref1, mask, 1);\n+  if (check_union128 (res7, res_ref1))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref2, mask, 1);\n+  if (check_union128 (res2, res_ref2))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref2, mask, 1);\n+  if (check_union128 (res6, res_ref2))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref1, mask, 1);\n+  if (check_union128 (res1, res_ref1))\n+    abort ();\n+  \n+  MASK_MERGE () (res_ref1, mask, 1);\n+  if (check_union128 (res5, res_ref1))\n+    abort ();\n+}\n+"}, {"sha": "4553e0d37725776b495284a4aba802ca0d488d54", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfnmsubXXXsd-1.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXsd-1.c?ref=5c4ade6d44914428c8f71713f15c5697d27ed3c8", "patch": "@@ -1,13 +1,26 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...sd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub231sd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...sd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vfnmsub...sd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...sd\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub231sd\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...sd\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n volatile __m128d a, b, c;\n+volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n+  a = _mm_mask_fnmsub_sd (a, m, b, c);\n+  c = _mm_mask3_fnmsub_sd (a, b, c, m);\n+  a = _mm_maskz_fnmsub_sd (m, a, b, c);\n   a = _mm_fnmsub_round_sd (a, b, c, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  a = _mm_mask_fnmsub_round_sd (a, m, b, c, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  c = _mm_mask3_fnmsub_round_sd (a, b, c, m, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  a = _mm_maskz_fnmsub_round_sd (m, a, b, c, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "ecb4bd585bcd9b2ce86628f781ba1789afb6d322", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfnmsubXXXsd-2.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXsd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXsd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXsd-2.c?ref=5c4ade6d44914428c8f71713f15c5697d27ed3c8", "patch": "@@ -0,0 +1,94 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_add (double *s1, double *s2, double *s3, double* r)\n+{\n+  r[0] = -s1[0] * s2[0] - s3[0];\n+  \n+  int i;\n+  for (i = 1; i < SIZE; i++)\n+    r[i] = s1[i];\n+}\n+\n+static void\n+calc_add_3 (double *s1, double *s2, double *s3, double* r)\n+{\n+  r[0] = -s2[0] * s3[0] - s1[0];\n+  \n+  int i;\n+  for (i = 1; i < SIZE; i++)\n+    r[i] = s1[i];\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128d res1, res2, res3, res4, res5, res6, res7, src1, src2, src3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref1[SIZE], res_ref2[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = DEFAULT_VALUE;\n+      src2.a[i] = 56.78 * (i + 1) * sign;\n+      src3.a[i] = 90.12 * (i + 2) * sign;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res1.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res5.a[i] = DEFAULT_VALUE;\n+      res6.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  calc_add (src1.a, src2.a, src3.a, res_ref1);\n+  calc_add_3(src1.a, src2.a, src3.a, res_ref2);\n+\n+  res1.x = _mm_mask_fnmsub_sd (src1.x, mask, src2.x, src3.x);\n+  res2.x = _mm_mask3_fnmsub_sd (src2.x, src3.x, src1.x, mask);\n+  res3.x = _mm_maskz_fnmsub_sd (mask, src1.x, src2.x, src3.x);\n+  res4.x = _mm_fnmsub_round_sd (src1.x, src2.x, src3.x, _MM_FROUND_NO_EXC);\n+  res5.x = _mm_mask_fnmsub_round_sd (src1.x, mask, src2.x, src3.x, _MM_FROUND_NO_EXC);\n+  res6.x = _mm_mask3_fnmsub_round_sd (src2.x, src3.x, src1.x, mask, _MM_FROUND_NO_EXC);\n+  res7.x = _mm_maskz_fnmsub_round_sd (mask, src1.x, src2.x, src3.x, _MM_FROUND_NO_EXC);\n+\n+  if (check_union128d (res4, res_ref1))\n+    abort();\n+\n+  MASK_ZERO (d) (res_ref1, mask, 1);\n+  if (check_union128d (res3, res_ref1))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref1, mask, 1);\n+  if (check_union128d (res7, res_ref1))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref2, mask, 1);\n+  if (check_union128d (res2, res_ref2))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref2, mask, 1);\n+  if (check_union128d (res6, res_ref2))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref1, mask, 1);\n+  if (check_union128d (res1, res_ref1))\n+    abort ();\n+  \n+  MASK_MERGE (d) (res_ref1, mask, 1);\n+  if (check_union128d (res5, res_ref1))\n+    abort ();\n+}\n+"}, {"sha": "f86ae2d44173b90a88317a59a3d44fd68f0248db", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfnmsubXXXss-1.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXss-1.c?ref=5c4ade6d44914428c8f71713f15c5697d27ed3c8", "patch": "@@ -1,13 +1,26 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...ss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub231ss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...ss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vfnmsub...ss\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...ss\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub231ss\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...ss\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n volatile __m128 a, b, c;\n+volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n+  a = _mm_mask_fnmsub_ss (a, m, b, c);\n+  c = _mm_mask3_fnmsub_ss (a, b, c, m);\n+  a = _mm_maskz_fnmsub_ss (m, a, b, c);\n   a = _mm_fnmsub_round_ss (a, b, c, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  a = _mm_mask_fnmsub_round_ss (a, m, b, c, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  c = _mm_mask3_fnmsub_round_ss (a, b, c, m, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  a = _mm_maskz_fnmsub_round_ss (m, a, b, c, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "d092988e45358b67b3e1b29be930393a682e131e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfnmsubXXXss-2.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXss-2.c?ref=5c4ade6d44914428c8f71713f15c5697d27ed3c8", "patch": "@@ -0,0 +1,94 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+calc_add (float *s1, float *s2, float *s3, float* r)\n+{\n+  r[0] = -s1[0] * s2[0] - s3[0];\n+  \n+  int i;\n+  for (i = 1; i < SIZE; i++)\n+    r[i] = s1[i];\n+}\n+\n+static void\n+calc_add_3 (float *s1, float *s2, float *s3, float* r)\n+{\n+  r[0] = -s2[0] * s3[0] - s1[0];\n+  \n+  int i;\n+  for (i = 1; i < SIZE; i++)\n+    r[i] = s1[i];\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128 res1, res2, res3, res4, res5, res6, res7, src1, src2, src3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref1[SIZE], res_ref2[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = DEFAULT_VALUE;\n+      src2.a[i] = 56.78 * (i + 1) * sign;\n+      src3.a[i] = 90.12 * (i + 2) * sign;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res1.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res5.a[i] = DEFAULT_VALUE;\n+      res6.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  calc_add (src1.a, src2.a, src3.a, res_ref1);\n+  calc_add_3(src1.a, src2.a, src3.a, res_ref2);\n+\n+  res1.x = _mm_mask_fnmsub_ss (src1.x, mask, src2.x, src3.x);\n+  res2.x = _mm_mask3_fnmsub_ss (src2.x, src3.x, src1.x, mask);\n+  res3.x = _mm_maskz_fnmsub_ss (mask, src1.x, src2.x, src3.x);\n+  res4.x = _mm_fnmsub_round_ss (src1.x, src2.x, src3.x, _MM_FROUND_NO_EXC);\n+  res5.x = _mm_mask_fnmsub_round_ss (src1.x, mask, src2.x, src3.x, _MM_FROUND_NO_EXC);\n+  res6.x = _mm_mask3_fnmsub_round_ss (src2.x, src3.x, src1.x, mask, _MM_FROUND_NO_EXC);\n+  res7.x = _mm_maskz_fnmsub_round_ss (mask, src1.x, src2.x, src3.x, _MM_FROUND_NO_EXC);\n+\n+  if (check_union128 (res4, res_ref1))\n+    abort();\n+\n+  MASK_ZERO () (res_ref1, mask, 1);\n+  if (check_union128 (res3, res_ref1))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref1, mask, 1);\n+  if (check_union128 (res7, res_ref1))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref2, mask, 1);\n+  if (check_union128 (res2, res_ref2))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref2, mask, 1);\n+  if (check_union128 (res6, res_ref2))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref1, mask, 1);\n+  if (check_union128 (res1, res_ref1))\n+    abort ();\n+  \n+  MASK_MERGE () (res_ref1, mask, 1);\n+  if (check_union128 (res5, res_ref1))\n+    abort ();\n+}\n+"}, {"sha": "e868f6d293ff925b5d99bdce79f3d17aae07b190", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=5c4ade6d44914428c8f71713f15c5697d27ed3c8", "patch": "@@ -390,6 +390,14 @@\n #define __builtin_ia32_vfnmsubps512_maskz(A, B, C, D, E) __builtin_ia32_vfnmsubps512_maskz(A, B, C, D, 8)\n #define __builtin_ia32_vpermilpd512_mask(A, E, C, D) __builtin_ia32_vpermilpd512_mask(A, 1, C, D)\n #define __builtin_ia32_vpermilps512_mask(A, E, C, D) __builtin_ia32_vpermilps512_mask(A, 1, C, D)\n+#define __builtin_ia32_vfmaddsd3_mask(A, B, C, D, E) __builtin_ia32_vfmaddsd3_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsd3_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsd3_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsd3_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsd3_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubsd3_mask3(A, B, C, D, E) __builtin_ia32_vfmsubsd3_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddss3_mask(A, B, C, D, E) __builtin_ia32_vfmaddss3_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddss3_mask3(A, B, C, D, E) __builtin_ia32_vfmaddss3_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddss3_maskz(A, B, C, D, E) __builtin_ia32_vfmaddss3_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubss3_mask3(A, B, C, D, E) __builtin_ia32_vfmsubss3_mask3(A, B, C, D, 8)\n \n /* avx512erintrin.h */\n #define __builtin_ia32_exp2ps_mask(A, B, C, D) __builtin_ia32_exp2ps_mask(A, B, C, 8)"}, {"sha": "748339f7d47c2403df005ac4d95b03e7a0d4858a", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=5c4ade6d44914428c8f71713f15c5697d27ed3c8", "patch": "@@ -534,6 +534,30 @@ test_4 (_mm512_maskz_fnmsub_round_pd, __m512d, __mmask8, __m512d, __m512d, __m51\n test_4 (_mm512_maskz_fnmsub_round_ps, __m512, __mmask16, __m512, __m512, __m512, 9)\n test_4 (_mm512_maskz_ternarylogic_epi32, __m512i, __mmask16, __m512i, __m512i, __m512i, 1)\n test_4 (_mm512_maskz_ternarylogic_epi64, __m512i, __mmask8, __m512i, __m512i, __m512i, 1)\n+test_4 (_mm_mask_fmadd_round_sd, __m128d, __m128d, __mmask8, __m128d, __m128d, 9)\n+test_4 (_mm_mask_fmadd_round_ss, __m128, __m128, __mmask8, __m128, __m128, 9)\n+test_4 (_mm_mask3_fmadd_round_sd, __m128d, __m128d, __m128d, __m128d, __mmask8, 9)\n+test_4 (_mm_mask3_fmadd_round_ss, __m128, __m128, __m128, __m128, __mmask8, 9)\n+test_4 (_mm_maskz_fmadd_round_sd, __m128d, __mmask8, __m128d, __m128d, __m128d, 9)\n+test_4 (_mm_maskz_fmadd_round_ss, __m128, __mmask8, __m128, __m128, __m128, 9)\n+test_4 (_mm_mask_fmsub_round_sd, __m128d, __m128d, __mmask8, __m128d, __m128d, 9)\n+test_4 (_mm_mask_fmsub_round_ss, __m128, __m128, __mmask8, __m128, __m128, 9)\n+test_4 (_mm_mask3_fmsub_round_sd, __m128d, __m128d, __m128d, __m128d, __mmask8, 9)\n+test_4 (_mm_mask3_fmsub_round_ss, __m128, __m128, __m128, __m128, __mmask8, 9)\n+test_4 (_mm_maskz_fmsub_round_sd, __m128d, __mmask8, __m128d, __m128d, __m128d, 9)\n+test_4 (_mm_maskz_fmsub_round_ss, __m128, __mmask8, __m128, __m128, __m128, 9)\n+test_4 (_mm_mask_fnmadd_round_sd, __m128d, __m128d, __mmask8, __m128d, __m128d, 9)\n+test_4 (_mm_mask_fnmadd_round_ss, __m128, __m128, __mmask8, __m128, __m128, 9)\n+test_4 (_mm_mask3_fnmadd_round_sd, __m128d, __m128d, __m128d, __m128d, __mmask8, 9)\n+test_4 (_mm_mask3_fnmadd_round_ss, __m128, __m128, __m128, __m128, __mmask8, 9)\n+test_4 (_mm_maskz_fnmadd_round_sd, __m128d, __mmask8, __m128d, __m128d, __m128d, 9)\n+test_4 (_mm_maskz_fnmadd_round_ss, __m128, __mmask8, __m128, __m128, __m128, 9)\n+test_4 (_mm_mask_fnmsub_round_sd, __m128d, __m128d, __mmask8, __m128d, __m128d, 9)\n+test_4 (_mm_mask_fnmsub_round_ss, __m128, __m128, __mmask8, __m128, __m128, 9)\n+test_4 (_mm_mask3_fnmsub_round_sd, __m128d, __m128d, __m128d, __m128d, __mmask8, 9)\n+test_4 (_mm_mask3_fnmsub_round_ss, __m128, __m128, __m128, __m128, __mmask8, 9)\n+test_4 (_mm_maskz_fnmsub_round_sd, __m128d, __mmask8, __m128d, __m128d, __m128d, 9)\n+test_4 (_mm_maskz_fnmsub_round_ss, __m128, __mmask8, __m128, __m128, __m128, 9)\n test_4v (_mm512_mask_i32scatter_epi32, void *, __mmask16, __m512i, __m512i, 1)\n test_4v (_mm512_mask_i32scatter_epi64, void *, __mmask8, __m256i, __m512i, 1)\n test_4v (_mm512_mask_i32scatter_pd, void *, __mmask8, __m256i, __m512d, 1)"}, {"sha": "0c62f2049c289db2839dc0bc525d7e33dea37130", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=5c4ade6d44914428c8f71713f15c5697d27ed3c8", "patch": "@@ -633,6 +633,30 @@ test_4 (_mm512_maskz_fnmsub_round_pd, __m512d, __mmask8, __m512d, __m512d, __m51\n test_4 (_mm512_maskz_fnmsub_round_ps, __m512, __mmask16, __m512, __m512, __m512, 9)\n test_4 (_mm512_maskz_ternarylogic_epi32, __m512i, __mmask16, __m512i, __m512i, __m512i, 1)\n test_4 (_mm512_maskz_ternarylogic_epi64, __m512i, __mmask8, __m512i, __m512i, __m512i, 1)\n+test_4 (_mm_mask_fmadd_round_sd, __m128d, __m128d, __mmask8, __m128d, __m128d, 9)\n+test_4 (_mm_mask_fmadd_round_ss, __m128, __m128, __mmask8, __m128, __m128, 9)\n+test_4 (_mm_mask3_fmadd_round_sd, __m128d, __m128d, __m128d, __m128d, __mmask8, 9)\n+test_4 (_mm_mask3_fmadd_round_ss, __m128, __m128, __m128, __m128, __mmask8, 9)\n+test_4 (_mm_maskz_fmadd_round_sd, __m128d, __mmask8, __m128d, __m128d, __m128d, 9)\n+test_4 (_mm_maskz_fmadd_round_ss, __m128, __mmask8, __m128, __m128, __m128, 9)\n+test_4 (_mm_mask_fmsub_round_sd, __m128d, __m128d, __mmask8, __m128d, __m128d, 9)\n+test_4 (_mm_mask_fmsub_round_ss, __m128, __m128, __mmask8, __m128, __m128, 9)\n+test_4 (_mm_mask3_fmsub_round_sd, __m128d, __m128d, __m128d, __m128d, __mmask8, 9)\n+test_4 (_mm_mask3_fmsub_round_ss, __m128, __m128, __m128, __m128, __mmask8, 9)\n+test_4 (_mm_maskz_fmsub_round_sd, __m128d, __mmask8, __m128d, __m128d, __m128d, 9)\n+test_4 (_mm_maskz_fmsub_round_ss, __m128, __mmask8, __m128, __m128, __m128, 9)\n+test_4 (_mm_mask_fnmadd_round_sd, __m128d, __m128d, __mmask8, __m128d, __m128d, 9)\n+test_4 (_mm_mask_fnmadd_round_ss, __m128, __m128, __mmask8, __m128, __m128, 9)\n+test_4 (_mm_mask3_fnmadd_round_sd, __m128d, __m128d, __m128d, __m128d, __mmask8, 9)\n+test_4 (_mm_mask3_fnmadd_round_ss, __m128, __m128, __m128, __m128, __mmask8, 9)\n+test_4 (_mm_maskz_fnmadd_round_sd, __m128d, __mmask8, __m128d, __m128d, __m128d, 9)\n+test_4 (_mm_maskz_fnmadd_round_ss, __m128, __mmask8, __m128, __m128, __m128, 9)\n+test_4 (_mm_mask_fnmsub_round_sd, __m128d, __m128d, __mmask8, __m128d, __m128d, 9)\n+test_4 (_mm_mask_fnmsub_round_ss, __m128, __m128, __mmask8, __m128, __m128, 9)\n+test_4 (_mm_mask3_fnmsub_round_sd, __m128d, __m128d, __m128d, __m128d, __mmask8, 9)\n+test_4 (_mm_mask3_fnmsub_round_ss, __m128, __m128, __m128, __m128, __mmask8, 9)\n+test_4 (_mm_maskz_fnmsub_round_sd, __m128d, __mmask8, __m128d, __m128d, __m128d, 9)\n+test_4 (_mm_maskz_fnmsub_round_ss, __m128, __mmask8, __m128, __m128, __m128, 9)\n test_4v (_mm512_mask_i32scatter_epi32, void *, __mmask16, __m512i, __m512i, 1)\n test_4v (_mm512_mask_i32scatter_epi64, void *, __mmask8, __m256i, __m512i, 1)\n test_4v (_mm512_mask_i32scatter_pd, void *, __mmask8, __m256i, __m512d, 1)"}, {"sha": "78a3c0aa26e6e4c7b6f4f4607c6b4ccc031aefd7", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4ade6d44914428c8f71713f15c5697d27ed3c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=5c4ade6d44914428c8f71713f15c5697d27ed3c8", "patch": "@@ -389,6 +389,14 @@\n #define __builtin_ia32_vfnmsubps512_maskz(A, B, C, D, E) __builtin_ia32_vfnmsubps512_maskz(A, B, C, D, 8)\n #define __builtin_ia32_vpermilpd512_mask(A, E, C, D) __builtin_ia32_vpermilpd512_mask(A, 1, C, D)\n #define __builtin_ia32_vpermilps512_mask(A, E, C, D) __builtin_ia32_vpermilps512_mask(A, 1, C, D)\n+#define __builtin_ia32_vfmaddsd3_mask(A, B, C, D, E) __builtin_ia32_vfmaddsd3_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsd3_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsd3_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsd3_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsd3_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubsd3_mask3(A, B, C, D, E) __builtin_ia32_vfmsubsd3_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddss3_mask(A, B, C, D, E) __builtin_ia32_vfmaddss3_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddss3_mask3(A, B, C, D, E) __builtin_ia32_vfmaddss3_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddss3_maskz(A, B, C, D, E) __builtin_ia32_vfmaddss3_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubss3_mask3(A, B, C, D, E) __builtin_ia32_vfmsubss3_mask3(A, B, C, D, 8)\n \n /* avx512pfintrin.h */\n #define __builtin_ia32_gatherpfdps(A, B, C, D, E) __builtin_ia32_gatherpfdps(A, B, C, 1, _MM_HINT_T0)"}]}