{"sha": "570f86f94eca76fbfab919dcbfe639a5ba69f20e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTcwZjg2Zjk0ZWNhNzZmYmZhYjkxOWRjYmZlNjM5YTViYTY5ZjIwZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-03-16T12:46:12Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-03-16T12:46:12Z"}, "message": "re PR c++/79937 (ICE in replace_placeholders_r)\n\n\tPR c++/79937\n\tPR c++/82410\n\t* tree.h (TARGET_EXPR_NO_ELIDE): Define.\n\t* gimplify.c (gimplify_modify_expr_rhs): Don't elide TARGET_EXPRs with\n\tTARGET_EXPR_NO_ELIDE flag set unless *expr_p is INIT_EXPR.\n\n\t* cp-tree.h (CONSTRUCTOR_PLACEHOLDER_BOUNDARY): Define.\n\t(find_placeholder): Declare.\n\t* tree.c (struct replace_placeholders_t): Add exp member.\n\t(replace_placeholders_r): Don't walk into ctors with\n\tCONSTRUCTOR_PLACEHOLDER_BOUNDARY flag set, unless they are equal to\n\td->exp.  Replace PLACEHOLDER_EXPR with unshare_expr (x) rather than x.\n\t(replace_placeholders): Initialize data.exp.\n\t(find_placeholders_r, find_placeholders): New functions.\n\t* typeck2.c (process_init_constructor_record,\n\tprocess_init_constructor_union): Set CONSTRUCTOR_PLACEHOLDER_BOUNDARY\n\tif adding NSDMI on which find_placeholder returns true.\n\t* call.c (build_over_call): Don't call replace_placeholders here.\n\t* cp-gimplify.c (cp_genericize_r): Set TARGET_EXPR_NO_ELIDE on\n\tTARGET_EXPRs with CONSTRUCTOR_PLACEHOLDER_BOUNDARY set on\n\tTARGET_EXPR_INITIAL.\n\t(cp_fold): Copy over CONSTRUCTOR_PLACEHOLDER_BOUNDARY bit to new\n\tctor.\n\n\t* g++.dg/cpp1y/pr79937-1.C: New test.\n\t* g++.dg/cpp1y/pr79937-2.C: New test.\n\t* g++.dg/cpp1y/pr79937-3.C: New test.\n\t* g++.dg/cpp1y/pr79937-4.C: New test.\n\t* g++.dg/cpp1y/pr82410.C: New test.\n\nFrom-SVN: r258593", "tree": {"sha": "1139d8cfc2b9466af7e0ef552bbdca551cdc549b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1139d8cfc2b9466af7e0ef552bbdca551cdc549b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/570f86f94eca76fbfab919dcbfe639a5ba69f20e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/570f86f94eca76fbfab919dcbfe639a5ba69f20e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/570f86f94eca76fbfab919dcbfe639a5ba69f20e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/570f86f94eca76fbfab919dcbfe639a5ba69f20e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aafdbe06af7127972c483fb2c9bf07b542b49d23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aafdbe06af7127972c483fb2c9bf07b542b49d23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aafdbe06af7127972c483fb2c9bf07b542b49d23"}], "stats": {"total": 254, "additions": 243, "deletions": 11}, "files": [{"sha": "627700ae9bd35a76688b566b1a7582f77aef0eab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/570f86f94eca76fbfab919dcbfe639a5ba69f20e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/570f86f94eca76fbfab919dcbfe639a5ba69f20e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=570f86f94eca76fbfab919dcbfe639a5ba69f20e", "patch": "@@ -1,3 +1,11 @@\n+2018-03-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/79937\n+\tPR c++/82410\n+\t* tree.h (TARGET_EXPR_NO_ELIDE): Define.\n+\t* gimplify.c (gimplify_modify_expr_rhs): Don't elide TARGET_EXPRs with\n+\tTARGET_EXPR_NO_ELIDE flag set unless *expr_p is INIT_EXPR.\n+\n 2018-03-16  Julia Koval  <julia.koval@intel.com>\n \n \t* doc/invoke.texi (Skylake Server): Add CLWB."}, {"sha": "0ea83713701f8a2baea0dcef58c9b2f043987dfb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/570f86f94eca76fbfab919dcbfe639a5ba69f20e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/570f86f94eca76fbfab919dcbfe639a5ba69f20e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=570f86f94eca76fbfab919dcbfe639a5ba69f20e", "patch": "@@ -1,3 +1,25 @@\n+2018-03-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/79937\n+\tPR c++/82410\n+\t* cp-tree.h (CONSTRUCTOR_PLACEHOLDER_BOUNDARY): Define.\n+\t(find_placeholder): Declare.\n+\t* tree.c (struct replace_placeholders_t): Add exp member.\n+\t(replace_placeholders_r): Don't walk into ctors with\n+\tCONSTRUCTOR_PLACEHOLDER_BOUNDARY flag set, unless they are equal to\n+\td->exp.  Replace PLACEHOLDER_EXPR with unshare_expr (x) rather than x.\n+\t(replace_placeholders): Initialize data.exp.\n+\t(find_placeholders_r, find_placeholders): New functions.\n+\t* typeck2.c (process_init_constructor_record,\n+\tprocess_init_constructor_union): Set CONSTRUCTOR_PLACEHOLDER_BOUNDARY\n+\tif adding NSDMI on which find_placeholder returns true.\n+\t* call.c (build_over_call): Don't call replace_placeholders here.\n+\t* cp-gimplify.c (cp_genericize_r): Set TARGET_EXPR_NO_ELIDE on\n+\tTARGET_EXPRs with CONSTRUCTOR_PLACEHOLDER_BOUNDARY set on\n+\tTARGET_EXPR_INITIAL.\n+\t(cp_fold): Copy over CONSTRUCTOR_PLACEHOLDER_BOUNDARY bit to new\n+\tctor.\n+\n 2018-03-16  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/83911 - ICE with multiversioned constructor."}, {"sha": "5cee63fed092ee3ea39ffa366e6bb08bf6f5e77e", "filename": "gcc/cp/call.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/570f86f94eca76fbfab919dcbfe639a5ba69f20e/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/570f86f94eca76fbfab919dcbfe639a5ba69f20e/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=570f86f94eca76fbfab919dcbfe639a5ba69f20e", "patch": "@@ -8164,8 +8164,6 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t{\n \t  arg = cp_build_fold_indirect_ref (arg);\n \t  val = build2 (MODIFY_EXPR, TREE_TYPE (to), to, arg);\n-\t  /* Handle NSDMI that refer to the object being initialized.  */\n-\t  replace_placeholders (arg, to);\n \t}\n       else\n \t{"}, {"sha": "332ff2bbb054e343724051a0d1eb79c1d17bfe70", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/570f86f94eca76fbfab919dcbfe639a5ba69f20e/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/570f86f94eca76fbfab919dcbfe639a5ba69f20e/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=570f86f94eca76fbfab919dcbfe639a5ba69f20e", "patch": "@@ -1538,6 +1538,13 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n       }\n       break;\n \n+    case TARGET_EXPR:\n+      if (TARGET_EXPR_INITIAL (stmt)\n+\t  && TREE_CODE (TARGET_EXPR_INITIAL (stmt)) == CONSTRUCTOR\n+\t  && CONSTRUCTOR_PLACEHOLDER_BOUNDARY (TARGET_EXPR_INITIAL (stmt)))\n+\tTARGET_EXPR_NO_ELIDE (stmt) = 1;\n+      break;\n+\n     default:\n       if (IS_TYPE_OR_DECL_P (stmt))\n \t*walk_subtrees = 0;\n@@ -2492,7 +2499,11 @@ cp_fold (tree x)\n \t      }\n \t  }\n \tif (nelts)\n-\t  x = build_constructor (TREE_TYPE (x), nelts);\n+\t  {\n+\t    x = build_constructor (TREE_TYPE (x), nelts);\n+\t    CONSTRUCTOR_PLACEHOLDER_BOUNDARY (x)\n+\t      = CONSTRUCTOR_PLACEHOLDER_BOUNDARY (org_x);\n+\t  }\n \tbreak;\n       }\n     case TREE_VEC:"}, {"sha": "727822e36da64251392b27eb9df053323d6d109f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/570f86f94eca76fbfab919dcbfe639a5ba69f20e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/570f86f94eca76fbfab919dcbfe639a5ba69f20e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=570f86f94eca76fbfab919dcbfe639a5ba69f20e", "patch": "@@ -425,6 +425,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n       DECL_VTABLE_OR_VTT_P (in VAR_DECL)\n       FUNCTION_RVALUE_QUALIFIED (in FUNCTION_TYPE, METHOD_TYPE)\n       CALL_EXPR_REVERSE_ARGS (in CALL_EXPR, AGGR_INIT_EXPR)\n+      CONSTRUCTOR_PLACEHOLDER_BOUNDARY (in CONSTRUCTOR)\n    6: IDENTIFIER_REPO_CHOSEN (in IDENTIFIER_NODE)\n       DECL_CONSTRUCTION_VTABLE_P (in VAR_DECL)\n       TYPE_MARKED_P (in _TYPE)\n@@ -4144,6 +4145,12 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define CONSTRUCTOR_C99_COMPOUND_LITERAL(NODE) \\\n   (TREE_LANG_FLAG_3 (CONSTRUCTOR_CHECK (NODE)))\n \n+/* True if this CONSTRUCTOR contains PLACEHOLDER_EXPRs referencing the\n+   CONSTRUCTOR's type not nested inside another CONSTRUCTOR marked with\n+   CONSTRUCTOR_PLACEHOLDER_BOUNDARY.  */\n+#define CONSTRUCTOR_PLACEHOLDER_BOUNDARY(NODE) \\\n+  (TREE_LANG_FLAG_5 (CONSTRUCTOR_CHECK (NODE)))\n+\n #define DIRECT_LIST_INIT_P(NODE) \\\n    (BRACE_ENCLOSED_INITIALIZER_P (NODE) && CONSTRUCTOR_IS_DIRECT_INIT (NODE))\n \n@@ -7021,6 +7028,7 @@ extern tree array_type_nelts_top\t\t(tree);\n extern tree break_out_target_exprs\t\t(tree);\n extern tree build_ctor_subob_ref\t\t(tree, tree, tree);\n extern tree replace_placeholders\t\t(tree, tree, bool * = NULL);\n+extern bool find_placeholders\t\t\t(tree);\n extern tree get_type_decl\t\t\t(tree);\n extern tree decl_namespace_context\t\t(tree);\n extern bool decl_anon_ns_mem_p\t\t\t(const_tree);"}, {"sha": "90fbe183b97dab5611ab0ecfeaab93f939954ce9", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 51, "deletions": 4, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/570f86f94eca76fbfab919dcbfe639a5ba69f20e/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/570f86f94eca76fbfab919dcbfe639a5ba69f20e/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=570f86f94eca76fbfab919dcbfe639a5ba69f20e", "patch": "@@ -3096,6 +3096,7 @@ build_ctor_subob_ref (tree index, tree type, tree obj)\n struct replace_placeholders_t\n {\n   tree obj;\t    /* The object to be substituted for a PLACEHOLDER_EXPR.  */\n+  tree exp;\t    /* The outermost exp.  */\n   bool seen;\t    /* Whether we've encountered a PLACEHOLDER_EXPR.  */\n   hash_set<tree> *pset;\t/* To avoid walking same trees multiple times.  */\n };\n@@ -3124,7 +3125,7 @@ replace_placeholders_r (tree* t, int* walk_subtrees, void* data_)\n \t\t\t\t\t\t\t   TREE_TYPE (x));\n \t     x = TREE_OPERAND (x, 0))\n \t  gcc_assert (TREE_CODE (x) == COMPONENT_REF);\n-\t*t = x;\n+\t*t = unshare_expr (x);\n \t*walk_subtrees = false;\n \td->seen = true;\n       }\n@@ -3134,7 +3135,12 @@ replace_placeholders_r (tree* t, int* walk_subtrees, void* data_)\n       {\n \tconstructor_elt *ce;\n \tvec<constructor_elt,va_gc> *v = CONSTRUCTOR_ELTS (*t);\n-\tif (d->pset->add (*t))\n+\t/* Don't walk into CONSTRUCTOR_PLACEHOLDER_BOUNDARY ctors\n+\t   other than the d->exp one, those have PLACEHOLDER_EXPRs\n+\t   related to another object.  */\n+\tif ((CONSTRUCTOR_PLACEHOLDER_BOUNDARY (*t)\n+\t     && *t != d->exp)\n+\t    || d->pset->add (*t))\n \t  {\n \t    *walk_subtrees = false;\n \t    return NULL_TREE;\n@@ -3192,16 +3198,57 @@ replace_placeholders (tree exp, tree obj, bool *seen_p)\n     return exp;\n \n   tree *tp = &exp;\n-  hash_set<tree> pset;\n-  replace_placeholders_t data = { obj, false, &pset };\n   if (TREE_CODE (exp) == TARGET_EXPR)\n     tp = &TARGET_EXPR_INITIAL (exp);\n+  hash_set<tree> pset;\n+  replace_placeholders_t data = { obj, *tp, false, &pset };\n   cp_walk_tree (tp, replace_placeholders_r, &data, NULL);\n   if (seen_p)\n     *seen_p = data.seen;\n   return exp;\n }\n \n+/* Callback function for find_placeholders.  */\n+\n+static tree\n+find_placeholders_r (tree *t, int *walk_subtrees, void *)\n+{\n+  if (TYPE_P (*t) || TREE_CONSTANT (*t))\n+    {\n+      *walk_subtrees = false;\n+      return NULL_TREE;\n+    }\n+\n+  switch (TREE_CODE (*t))\n+    {\n+    case PLACEHOLDER_EXPR:\n+      return *t;\n+\n+    case CONSTRUCTOR:\n+      if (CONSTRUCTOR_PLACEHOLDER_BOUNDARY (*t))\n+\t*walk_subtrees = false;\n+      break;\n+\n+    default:\n+      break;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+/* Return true if EXP contains a PLACEHOLDER_EXPR.  Don't walk into\n+   ctors with CONSTRUCTOR_PLACEHOLDER_BOUNDARY flag set.  */\n+\n+bool\n+find_placeholders (tree exp)\n+{\n+  /* This is only relevant for C++14.  */\n+  if (cxx_dialect < cxx14)\n+    return false;\n+\n+  return cp_walk_tree_without_duplicates (&exp, find_placeholders_r, NULL);\n+}\n+\n /* Similar to `build_nt', but for template definitions of dependent\n    expressions  */\n "}, {"sha": "464e8a7c3b13b8d4a320ef0749b8cab8e68f42e9", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/570f86f94eca76fbfab919dcbfe639a5ba69f20e/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/570f86f94eca76fbfab919dcbfe639a5ba69f20e/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=570f86f94eca76fbfab919dcbfe639a5ba69f20e", "patch": "@@ -1470,6 +1470,9 @@ process_init_constructor_record (tree type, tree init, int nested,\n \t    }\n \t  /* C++14 aggregate NSDMI.  */\n \t  next = get_nsdmi (field, /*ctor*/false, complain);\n+\t  if (!CONSTRUCTOR_PLACEHOLDER_BOUNDARY (init)\n+\t      && find_placeholders (next))\n+\t    CONSTRUCTOR_PLACEHOLDER_BOUNDARY (init) = 1;\n \t}\n       else if (type_build_ctor_call (TREE_TYPE (field)))\n \t{\n@@ -1608,10 +1611,11 @@ process_init_constructor_union (tree type, tree init, int nested,\n \t  if (TREE_CODE (field) == FIELD_DECL\n \t      && DECL_INITIAL (field) != NULL_TREE)\n \t    {\n-\t      CONSTRUCTOR_APPEND_ELT (CONSTRUCTOR_ELTS (init),\n-\t\t\t\t      field,\n-\t\t\t\t      get_nsdmi (field, /*in_ctor=*/false,\n-\t\t\t\t\t\t complain));\n+\t      tree val = get_nsdmi (field, /*in_ctor=*/false, complain);\n+\t      if (!CONSTRUCTOR_PLACEHOLDER_BOUNDARY (init)\n+\t\t  && find_placeholders (val))\n+\t\tCONSTRUCTOR_PLACEHOLDER_BOUNDARY (init) = 1;\n+\t      CONSTRUCTOR_APPEND_ELT (CONSTRUCTOR_ELTS (init), field, val);\n \t      break;\n \t    }\n \t}"}, {"sha": "115f80bef9b6fa9238495a53d791fcb0e820a776", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/570f86f94eca76fbfab919dcbfe639a5ba69f20e/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/570f86f94eca76fbfab919dcbfe639a5ba69f20e/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=570f86f94eca76fbfab919dcbfe639a5ba69f20e", "patch": "@@ -5211,6 +5211,8 @@ gimplify_modify_expr_rhs (tree *expr_p, tree *from_p, tree *to_p,\n \t    tree init = TARGET_EXPR_INITIAL (*from_p);\n \n \t    if (init\n+\t\t&& (TREE_CODE (*expr_p) != MODIFY_EXPR\n+\t\t    || !TARGET_EXPR_NO_ELIDE (*from_p))\n \t\t&& !VOID_TYPE_P (TREE_TYPE (init)))\n \t      {\n \t\t*from_p = init;"}, {"sha": "ff2ac8b33bedb34c986afae4ff9a0d4506c1d3de", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/570f86f94eca76fbfab919dcbfe639a5ba69f20e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/570f86f94eca76fbfab919dcbfe639a5ba69f20e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=570f86f94eca76fbfab919dcbfe639a5ba69f20e", "patch": "@@ -1,3 +1,13 @@\n+2018-03-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/79937\n+\tPR c++/82410\n+\t* g++.dg/cpp1y/pr79937-1.C: New test.\n+\t* g++.dg/cpp1y/pr79937-2.C: New test.\n+\t* g++.dg/cpp1y/pr79937-3.C: New test.\n+\t* g++.dg/cpp1y/pr79937-4.C: New test.\n+\t* g++.dg/cpp1y/pr82410.C: New test.\n+\n 2018-03-16  Tom de Vries  <tom@codesourcery.com>\n \n \t* gcc.dg/tree-ssa/pr84512.c: Require effective target vect_int_mult."}, {"sha": "f547782a54e971d3cc5f1472af89f51d1ea74501", "filename": "gcc/testsuite/g++.dg/cpp1y/pr79937-1.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/570f86f94eca76fbfab919dcbfe639a5ba69f20e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr79937-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/570f86f94eca76fbfab919dcbfe639a5ba69f20e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr79937-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr79937-1.C?ref=570f86f94eca76fbfab919dcbfe639a5ba69f20e", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/79937\n+// { dg-do run { target c++14 } }\n+\n+struct C {};\n+\n+struct X {\n+  unsigned i;\n+  unsigned n = i;\n+};\n+\n+C\n+bar (X x)\n+{\n+  if (x.i != 1 || x.n != 1)\n+    __builtin_abort ();\n+  return {};\n+}\n+\n+int\n+main ()\n+{\n+  C c = bar (X {1});\n+}"}, {"sha": "551b8b67e3027cec6c4eb0062fa5e5b79f34a41e", "filename": "gcc/testsuite/g++.dg/cpp1y/pr79937-2.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/570f86f94eca76fbfab919dcbfe639a5ba69f20e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr79937-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/570f86f94eca76fbfab919dcbfe639a5ba69f20e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr79937-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr79937-2.C?ref=570f86f94eca76fbfab919dcbfe639a5ba69f20e", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/79937\n+// { dg-do run { target c++14 } }\n+\n+struct C {};\n+\n+struct X {\n+  unsigned i;\n+  unsigned n = i;\n+  unsigned m = i;\n+};\n+\n+C\n+bar (X x)\n+{\n+  if (x.i != 1 || x.n != 2 || x.m != 1)\n+    __builtin_abort ();\n+  return {};\n+}\n+\n+int\n+main ()\n+{\n+  C c = bar (X {1, X {2}.n});\n+}"}, {"sha": "6f0c22d6ad90c2faee64a7beb9782c9064e7460f", "filename": "gcc/testsuite/g++.dg/cpp1y/pr79937-3.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/570f86f94eca76fbfab919dcbfe639a5ba69f20e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr79937-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/570f86f94eca76fbfab919dcbfe639a5ba69f20e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr79937-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr79937-3.C?ref=570f86f94eca76fbfab919dcbfe639a5ba69f20e", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/79937\n+// { dg-do run { target c++14 } }\n+\n+struct X {\n+  unsigned i;\n+  unsigned n = i;\n+  unsigned m = i;\n+};\n+\n+X\n+bar (X x)\n+{\n+  if (x.i != 1 || x.n != 2 || x.m != 1)\n+    __builtin_abort ();\n+  return x;\n+}\n+\n+int\n+main ()\n+{\n+  X x = bar (X {1, X {2}.n});\n+  if (x.i != 1 || x.n != 2 || x.m != 1)\n+    __builtin_abort ();\n+}"}, {"sha": "1a496303129bfe91e6699845d32acbe59b63c099", "filename": "gcc/testsuite/g++.dg/cpp1y/pr79937-4.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/570f86f94eca76fbfab919dcbfe639a5ba69f20e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr79937-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/570f86f94eca76fbfab919dcbfe639a5ba69f20e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr79937-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr79937-4.C?ref=570f86f94eca76fbfab919dcbfe639a5ba69f20e", "patch": "@@ -0,0 +1,32 @@\n+// PR c++/79937\n+// { dg-do run { target c++14 } }\n+\n+struct X {\n+  unsigned i;\n+  unsigned n = i;\n+};\n+\n+X\n+bar (X x)\n+{\n+  return x;\n+}\n+\n+struct Y\n+{\n+  static Y bar (Y y) { return y; }\n+  unsigned i;\n+  unsigned n = bar (Y{2,i}).n;\n+};\n+\n+int\n+main ()\n+{\n+  X x { 1, bar (X{2}).n };\n+  if (x.n != 2)\n+    __builtin_abort ();\n+\n+  Y y { 1 };\n+  if (y.n != 1)\n+    __builtin_abort ();\n+}"}, {"sha": "185f6447d0f7d651074fddda38de9c067de120fa", "filename": "gcc/testsuite/g++.dg/cpp1y/pr82410.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/570f86f94eca76fbfab919dcbfe639a5ba69f20e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr82410.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/570f86f94eca76fbfab919dcbfe639a5ba69f20e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr82410.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr82410.C?ref=570f86f94eca76fbfab919dcbfe639a5ba69f20e", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/82410\n+// { dg-do compile { target c++14 } }\n+\n+int\n+main ()\n+{\n+  struct A {};\n+  struct S\n+  {\n+    int & p;\n+    int x = p;\n+    operator A () { return {}; }\n+  };\n+  int l;\n+  [] (A) {} (S{l});\n+}"}, {"sha": "1e14d9f5866cce27c5c3090f5165771fd405d5fb", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/570f86f94eca76fbfab919dcbfe639a5ba69f20e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/570f86f94eca76fbfab919dcbfe639a5ba69f20e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=570f86f94eca76fbfab919dcbfe639a5ba69f20e", "patch": "@@ -1197,6 +1197,9 @@ extern tree maybe_wrap_with_location (tree, location_t);\n #define TARGET_EXPR_SLOT(NODE) TREE_OPERAND_CHECK_CODE (NODE, TARGET_EXPR, 0)\n #define TARGET_EXPR_INITIAL(NODE) TREE_OPERAND_CHECK_CODE (NODE, TARGET_EXPR, 1)\n #define TARGET_EXPR_CLEANUP(NODE) TREE_OPERAND_CHECK_CODE (NODE, TARGET_EXPR, 2)\n+/* Don't elide the initialization of TARGET_EXPR_SLOT for this TARGET_EXPR\n+   on rhs of MODIFY_EXPR.  */\n+#define TARGET_EXPR_NO_ELIDE(NODE) (TARGET_EXPR_CHECK (NODE)->base.private_flag)\n \n /* DECL_EXPR accessor. This gives access to the DECL associated with\n    the given declaration statement.  */"}]}