{"sha": "f2a5346244a18c89bebac078657d0f74dbb24622", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJhNTM0NjI0NGExOGM4OWJlYmFjMDc4NjU3ZDBmNzRkYmIyNDYyMg==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2021-01-08T12:49:59Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2021-01-09T16:30:51Z"}, "message": "VAX/testsuite: Remove notsi comparison elimination regressions\n\nRemove fallout from commit 0bd675183d94 (\"match.pd: Add ~(X - Y) -> ~X\n+ Y simplification [PR96685]\") and paper over the regression caused as\nit is not the matter of the test cases affected.\n\nPreviously assembly like this:\n\n\t.text\n\t.align 1\n.globl eq_notsi\n\t.type\teq_notsi, @function\neq_notsi:\n\t.word 0\t# 35\t[c=0]  procedure_entry_mask\n\tsubl2 $4,%sp\t# 46\t[c=32]  *addsi3\n\tmcoml 4(%ap),%r0\t# 32\t[c=16]  *one_cmplsi2_ccz\n\tjeql .L1\t\t# 34\t[c=26]  *branch_ccz\n\taddl2 $2,%r0\t# 31\t[c=32]  *addsi3\n.L1:\n\tret\t\t# 40\t[c=0]  return\n\t.size\teq_notsi, .-eq_notsi\n\nwas produced.  Now this:\n\n\t.text\n\t.align 1\n.globl eq_notsi\n\t.type\teq_notsi, @function\neq_notsi:\n\t.word 0\t# 36\t[c=0]  procedure_entry_mask\n\tsubl2 $4,%sp\t# 48\t[c=32]  *addsi3\n\tmovl 4(%ap),%r0\t# 33\t[c=16]  *movsi_2\n\tcmpl %r0,$-1\t# 34\t[c=8]  *cmpsi_ccz/1\n\tjeql .L3\t\t# 35\t[c=26]  *branch_ccz\n\tsubl3 %r0,$1,%r0\t# 32\t[c=32]  *subsi3/1\n\tret\t\t# 27\t[c=0]  return\n.L3:\n\tclrl %r0\t\t# 31\t[c=2]  *movsi_2\n\tret\t\t# 41\t[c=0]  return\n\t.size\teq_notsi, .-eq_notsi\n\nis, which cannot work with post-reload comparison elimination, due to\nthe comparison against -1 rather than 0.\n\nUse subtraction from a constant then rather than addition as the former\noperation is not transformed, removing these regressions:\n\nFAIL: gcc.target/vax/cmpelim-eq-notsi.c   -O1   scan-rtl-dump-times cmpelim \"deleting insn with uid\" 1\nFAIL: gcc.target/vax/cmpelim-eq-notsi.c   -O1   scan-assembler-not \\t(bit|cmpz?|tst).\nFAIL: gcc.target/vax/cmpelim-eq-notsi.c   -O1   scan-assembler one_cmplsi[^ ]*_ccz(/[0-9]+)?\\n\nFAIL: gcc.target/vax/cmpelim-lt-notsi.c   -O1   scan-rtl-dump-times cmpelim \"deleting insn with uid\" 1\nFAIL: gcc.target/vax/cmpelim-lt-notsi.c   -O1   scan-assembler-not \\t(bit|cmpz?|tst).\nFAIL: gcc.target/vax/cmpelim-lt-notsi.c   -O1   scan-assembler one_cmplsi[^ ]*_ccn(/[0-9]+)?\\n\n\nand likewise across some of the other the optimization levels verified.\n\nThe LE variant appears unaffected as the new transformation produces\nslightly different although still suboptimal code:\n\n\t.text\n\t.align 1\n.globl le_notsi\n\t.type\tle_notsi, @function\nle_notsi:\n\t.word 0\t# 27\t[c=0]  procedure_entry_mask\n\tsubl2 $4,%sp\t# 34\t[c=32]  *addsi3\n\tmovl 4(%ap),%r1\t# 23\t[c=16]  *movsi_2\n\tmcoml %r1,%r0\t# 24\t[c=8]  *one_cmplsi2_ccnz\n\tjleq .L1\t\t# 26\t[c=26]  *branch_ccnz\n\tsubl3 %r1,$1,%r0\t# 22\t[c=32]  *subsi3/1\n.L1:\n\tret\t\t# 32\t[c=0]  return\n\t.size\tle_notsi, .-le_notsi\n\nbut update the test case too, for consistency with the other two.\n\n\tgcc/testsuite/\n\t* gcc.target/vax/cmpelim-eq-notsi.c: Use subtraction from a\n\tconstant then rather than addition.\n\t* gcc.target/vax/cmpelim-le-notsi.c: Likewise.\n\t* gcc.target/vax/cmpelim-lt-notsi.c: Likewise.", "tree": {"sha": "2af3cb3b38f504eaae6276270a65ef8bae5a400a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2af3cb3b38f504eaae6276270a65ef8bae5a400a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2a5346244a18c89bebac078657d0f74dbb24622", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2a5346244a18c89bebac078657d0f74dbb24622", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2a5346244a18c89bebac078657d0f74dbb24622", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2a5346244a18c89bebac078657d0f74dbb24622/comments", "author": null, "committer": null, "parents": [{"sha": "7f5c4d23db82f3cf499de144894615c84e4e7f64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f5c4d23db82f3cf499de144894615c84e4e7f64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f5c4d23db82f3cf499de144894615c84e4e7f64"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "dbd6d43212d5405bd77a1e7ec8bbb6911b2a1a6e", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-notsi.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2a5346244a18c89bebac078657d0f74dbb24622/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-notsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2a5346244a18c89bebac078657d0f74dbb24622/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-notsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-notsi.c?ref=f2a5346244a18c89bebac078657d0f74dbb24622", "patch": "@@ -11,14 +11,14 @@ eq_notsi (int_t x)\n   if (x == 0)\n     return x;\n   else\n-    return x + 2;\n+    return 2 - x;\n }\n \n /* Expect assembly like:\n \n \tmcoml 4(%ap),%r0\t\t# 32\t[c=16]  *one_cmplsi2_ccz\n \tjeql .L1\t\t\t# 34\t[c=26]  *branch_ccz\n-\taddl2 $2,%r0\t\t\t# 31\t[c=32]  *addsi3\n+\tsubl3 %r0,$2,%r0\t\t# 31\t[c=32]  *subsi3/1\n .L1:\n \n  */"}, {"sha": "3e52da13beee8d865205882a8d09ce4cd492997b", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-notsi.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2a5346244a18c89bebac078657d0f74dbb24622/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-notsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2a5346244a18c89bebac078657d0f74dbb24622/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-notsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-notsi.c?ref=f2a5346244a18c89bebac078657d0f74dbb24622", "patch": "@@ -11,14 +11,14 @@ le_notsi (int_t x)\n   if (x <= 0)\n     return x;\n   else\n-    return x + 2;\n+    return 2 - x;\n }\n \n /* Expect assembly like:\n \n \tmcoml 4(%ap),%r0\t\t# 28\t[c=16]  *one_cmplsi2_ccnz\n \tjleq .L1\t\t\t# 30\t[c=26]  *branch_ccnz\n-\taddl2 $2,%r0\t\t\t# 27\t[c=32]  *addsi3\n+\tsubl3 %r0,$2,%r0\t\t# 27\t[c=32]  *subsi3/1\n .L1:\n \n  */"}, {"sha": "2c758ccb5934b752066acef38c96ea3db02c627c", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-notsi.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2a5346244a18c89bebac078657d0f74dbb24622/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-notsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2a5346244a18c89bebac078657d0f74dbb24622/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-notsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-notsi.c?ref=f2a5346244a18c89bebac078657d0f74dbb24622", "patch": "@@ -11,14 +11,14 @@ lt_notsi (int_t x)\n   if (x < 0)\n     return x;\n   else\n-    return x + 2;\n+    return 2 - x;\n }\n \n /* Expect assembly like:\n \n \tmcoml 4(%ap),%r0\t\t# 28\t[c=16]  *one_cmplsi2_ccn\n \tjlss .L1\t\t\t# 30\t[c=26]  *branch_ccn\n-\taddl2 $2,%r0\t\t\t# 27\t[c=32]  *addsi3\n+\tsubl3 %r0,$2,%r0\t\t# 27\t[c=32]  *subsi3/1\n .L1:\n \n  */"}]}