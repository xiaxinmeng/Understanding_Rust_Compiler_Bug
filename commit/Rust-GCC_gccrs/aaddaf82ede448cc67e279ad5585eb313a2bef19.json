{"sha": "aaddaf82ede448cc67e279ad5585eb313a2bef19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFkZGFmODJlZGU0NDhjYzY3ZTI3OWFkNTU4NWViMzEzYTJiZWYxOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-06-24T10:19:36Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-09-20T12:31:33Z"}, "message": "[Ada] Add support for PE-COFF PIE to System.Dwarf_Line\n\ngcc/ada/\n\n\t* adaint.c (__gnat_get_executable_load_address): Add Win32 support.\n\t* libgnat/s-objrea.ads (Get_Xcode_Bounds): Fix typo in comment.\n\t(Object_File): Minor reformatting.\n\t(ELF_Object_File): Uncomment predicate.\n\t(PECOFF_Object_File): Likewise.\n\t(XCOFF32_Object_File): Likewise.\n\t* libgnat/s-objrea.adb: Minor reformatting throughout.\n\t(Get_Load_Address): Implement for PE-COFF.\n\t* libgnat/s-dwalin.ads: Remove clause for System.Storage_Elements\n\tand use consistent wording in comments.\n\t(Dwarf_Context): Set type of Low, High and Load_Address to Address.\n\t* libgnat/s-dwalin.adb (Get_Load_Displacement): New function.\n\t(Is_Inside): Call Get_Load_Displacement.\n\t(Low_Address): Likewise.\n\t(Open): Adjust to type change.\n\t(Aranges_Lookup): Change type of Addr to Address.\n\t(Read_Aranges_Entry): Likewise for Start and adjust.\n\t(Enable_Cach): Adjust to type change.\n\t(Symbolic_Address): Change type of Addr to Address.\n\t(Symbolic_Traceback): Call Get_Load_Displacement.", "tree": {"sha": "79945993eefcbb3ea6d329f7a01830fba8720b80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79945993eefcbb3ea6d329f7a01830fba8720b80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aaddaf82ede448cc67e279ad5585eb313a2bef19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaddaf82ede448cc67e279ad5585eb313a2bef19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaddaf82ede448cc67e279ad5585eb313a2bef19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaddaf82ede448cc67e279ad5585eb313a2bef19/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a8e133af28f8039740d09c650f0eca0a03113f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a8e133af28f8039740d09c650f0eca0a03113f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a8e133af28f8039740d09c650f0eca0a03113f6"}], "stats": {"total": 178, "additions": 111, "deletions": 67}, "files": [{"sha": "d4445f01b30b366d2b529e6669c6eca68be32d17", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaddaf82ede448cc67e279ad5585eb313a2bef19/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaddaf82ede448cc67e279ad5585eb313a2bef19/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=aaddaf82ede448cc67e279ad5585eb313a2bef19", "patch": "@@ -3542,6 +3542,9 @@ __gnat_get_executable_load_address (void)\n \n   return (const void *)map->l_addr;\n \n+#elif defined (_WIN32)\n+  return GetModuleHandle (NULL);\n+\n #else\n   return NULL;\n #endif"}, {"sha": "530b80294273c6104475f1d1cc95c5ccc49b1800", "filename": "gcc/ada/libgnat/s-dwalin.adb", "status": "modified", "additions": 38, "deletions": 22, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaddaf82ede448cc67e279ad5585eb313a2bef19/gcc%2Fada%2Flibgnat%2Fs-dwalin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaddaf82ede448cc67e279ad5585eb313a2bef19/gcc%2Fada%2Flibgnat%2Fs-dwalin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-dwalin.adb?ref=aaddaf82ede448cc67e279ad5585eb313a2bef19", "patch": "@@ -47,6 +47,10 @@ package body System.Dwarf_Lines is\n \n    SSU : constant := System.Storage_Unit;\n \n+   function Get_Load_Displacement (C : Dwarf_Context) return Storage_Offset;\n+   --  Return the displacement between the load address present in the binary\n+   --  and the run-time address at which it is loaded (i.e. non-zero for PIE).\n+\n    function String_Length (Str : Str_Access) return Natural;\n    --  Return the length of the C string Str\n \n@@ -74,7 +78,7 @@ package body System.Dwarf_Lines is\n \n    procedure Read_Aranges_Entry\n      (C     : in out Dwarf_Context;\n-      Start :    out Storage_Offset;\n+      Start :    out Address;\n       Len   :    out Storage_Count);\n    --  Read a single .debug_aranges pair\n \n@@ -86,7 +90,7 @@ package body System.Dwarf_Lines is\n \n    procedure Aranges_Lookup\n      (C           : in out Dwarf_Context;\n-      Addr        :        Storage_Offset;\n+      Addr        :        Address;\n       Info_Offset :    out Offset;\n       Success     :    out Boolean);\n    --  Search for Addr in .debug_aranges and return offset Info_Offset in\n@@ -151,7 +155,7 @@ package body System.Dwarf_Lines is\n \n    procedure Symbolic_Address\n      (C           : in out Dwarf_Context;\n-      Addr        :        Storage_Offset;\n+      Addr        :        Address;\n       Dir_Name    :    out Str_Access;\n       File_Name   :    out Str_Access;\n       Subprg_Name :    out String_Ptr_Len;\n@@ -368,6 +372,19 @@ package body System.Dwarf_Lines is\n       end loop;\n    end For_Each_Row;\n \n+   ---------------------------\n+   -- Get_Load_Displacement --\n+   ---------------------------\n+\n+   function Get_Load_Displacement (C : Dwarf_Context) return Storage_Offset is\n+   begin\n+      if C.Load_Address /= Null_Address then\n+         return C.Load_Address - Address (Get_Load_Address (C.Obj.all));\n+      else\n+         return 0;\n+      end if;\n+   end Get_Load_Displacement;\n+\n    ---------------------\n    -- Initialize_Pass --\n    ---------------------\n@@ -403,18 +420,19 @@ package body System.Dwarf_Lines is\n    ---------------\n \n    function Is_Inside (C : Dwarf_Context; Addr : Address) return Boolean is\n+      Disp : constant Storage_Offset := Get_Load_Displacement (C);\n+\n    begin\n-      return (Addr >= C.Low + C.Load_Address\n-                and then Addr <= C.High + C.Load_Address);\n+      return Addr >= C.Low + Disp and then Addr <= C.High + Disp;\n    end Is_Inside;\n \n    -----------------\n    -- Low_Address --\n    -----------------\n \n-   function Low_Address (C : Dwarf_Context) return System.Address is\n+   function Low_Address (C : Dwarf_Context) return Address is\n    begin\n-      return C.Load_Address + C.Low;\n+      return C.Low + Get_Load_Displacement (C);\n    end Low_Address;\n \n    ----------\n@@ -448,12 +466,12 @@ package body System.Dwarf_Lines is\n \n       Success := True;\n \n-      --  Get memory bounds for executable code.  Note that such code\n+      --  Get address bounds for executable code. Note that such code\n       --  might come from multiple sections.\n \n       Get_Xcode_Bounds (C.Obj.all, Lo, Hi);\n-      C.Low  := Storage_Offset (Lo);\n-      C.High := Storage_Offset (Hi);\n+      C.Low  := Address (Lo);\n+      C.High := Address (Hi);\n \n       --  Create a stream for debug sections\n \n@@ -1046,7 +1064,7 @@ package body System.Dwarf_Lines is\n \n    procedure Aranges_Lookup\n      (C           : in out Dwarf_Context;\n-      Addr        :        Storage_Offset;\n+      Addr        :        Address;\n       Info_Offset :    out Offset;\n       Success     :    out Boolean)\n    is\n@@ -1060,7 +1078,7 @@ package body System.Dwarf_Lines is\n \n          loop\n             declare\n-               Start : Storage_Offset;\n+               Start : Address;\n                Len   : Storage_Count;\n             begin\n                Read_Aranges_Entry (C, Start, Len);\n@@ -1391,7 +1409,7 @@ package body System.Dwarf_Lines is\n \n    procedure Read_Aranges_Entry\n      (C     : in out Dwarf_Context;\n-      Start :    out Storage_Offset;\n+      Start :    out Address;\n       Len   :    out Storage_Count)\n    is\n    begin\n@@ -1403,7 +1421,7 @@ package body System.Dwarf_Lines is\n          begin\n             S     := Read (C.Aranges);\n             L     := Read (C.Aranges);\n-            Start := Storage_Offset (S);\n+            Start := Address (S);\n             Len   := Storage_Count (L);\n          end;\n \n@@ -1413,7 +1431,7 @@ package body System.Dwarf_Lines is\n          begin\n             S     := Read (C.Aranges);\n             L     := Read (C.Aranges);\n-            Start := Storage_Offset (S);\n+            Start := Address (S);\n             Len   := Storage_Count (L);\n          end;\n \n@@ -1503,11 +1521,12 @@ package body System.Dwarf_Lines is\n          Info_Offset : Offset;\n          Line_Offset : Offset;\n          Success     : Boolean;\n-         Ar_Start    : Storage_Offset;\n+         Ar_Start    : Address;\n          Ar_Len      : Storage_Count;\n          Start, Len  : uint32;\n          First, Last : Natural;\n          Mid         : Natural;\n+\n       begin\n          Seek (C.Aranges, 0);\n \n@@ -1522,7 +1541,7 @@ package body System.Dwarf_Lines is\n \n             loop\n                Read_Aranges_Entry (C, Ar_Start, Ar_Len);\n-               exit when Ar_Start = 0 and Ar_Len = 0;\n+               exit when Ar_Start = Null_Address and Ar_Len = 0;\n \n                Len   := uint32 (Ar_Len);\n                Start := uint32 (Ar_Start - C.Low);\n@@ -1578,7 +1597,7 @@ package body System.Dwarf_Lines is\n \n    procedure Symbolic_Address\n      (C           : in out Dwarf_Context;\n-      Addr        :        Storage_Offset;\n+      Addr        :        Address;\n       Dir_Name    :    out Str_Access;\n       File_Name   :    out Str_Access;\n       Subprg_Name :    out String_Ptr_Len;\n@@ -1871,7 +1890,6 @@ package body System.Dwarf_Lines is\n       C : Dwarf_Context := Cin;\n \n       Addr_In_Traceback : Address;\n-      Offset_To_Lookup  : Storage_Offset;\n \n       Dir_Name    : Str_Access;\n       File_Name   : Str_Access;\n@@ -1893,11 +1911,9 @@ package body System.Dwarf_Lines is\n \n          Addr_In_Traceback := STE.PC_For (Traceback (J));\n \n-         Offset_To_Lookup := Addr_In_Traceback - C.Load_Address;\n-\n          Symbolic_Address\n            (C,\n-            Offset_To_Lookup,\n+            Addr_In_Traceback - Get_Load_Displacement (C),\n             Dir_Name,\n             File_Name,\n             Subprg_Name,"}, {"sha": "bd86e5e4812ed6d32475ef1d6fea487a1d510915", "filename": "gcc/ada/libgnat/s-dwalin.ads", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaddaf82ede448cc67e279ad5585eb313a2bef19/gcc%2Fada%2Flibgnat%2Fs-dwalin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaddaf82ede448cc67e279ad5585eb313a2bef19/gcc%2Fada%2Flibgnat%2Fs-dwalin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-dwalin.ads?ref=aaddaf82ede448cc67e279ad5585eb313a2bef19", "patch": "@@ -37,7 +37,6 @@\n \n with System.Bounded_Strings;\n with System.Object_Reader;\n-with System.Storage_Elements;\n with System.Traceback_Entries;\n \n package System.Dwarf_Lines is\n@@ -57,19 +56,19 @@ package System.Dwarf_Lines is\n       C         : out Dwarf_Context;\n       Success   : out Boolean);\n    procedure Close (C : in out Dwarf_Context);\n-   --  Open and close files\n+   --  Open and close a file\n \n    procedure Set_Load_Address (C : in out Dwarf_Context; Addr : Address);\n-   --  Set the load address of a file. This is used to rebase PIE (Position\n+   --  Set the run-time load address of a file. Used to rebase PIE (Position\n    --  Independent Executable) binaries.\n \n    function Is_Inside (C : Dwarf_Context; Addr : Address) return Boolean;\n    pragma Inline (Is_Inside);\n-   --  Return true iff a run-time address Addr is within the module\n+   --  Return whether a run-time address Addr lies within the file\n \n-   function Low_Address (C : Dwarf_Context) return System.Address;\n+   function Low_Address (C : Dwarf_Context) return Address;\n    pragma Inline (Low_Address);\n-   --  Return the lowest address of C, accounting for the module load address\n+   --  Return the lowest run-time address of the file\n \n    procedure Dump (C : in out Dwarf_Context);\n    --  Dump each row found in the object's .debug_lines section to standard out\n@@ -174,13 +173,13 @@ private\n    type Search_Array_Access is access Search_Array;\n \n    type Dwarf_Context (In_Exception : Boolean := False) is record\n-      Low, High  : System.Storage_Elements.Storage_Offset;\n-      --  Bounds of the module, per the module object file\n+      Low, High : Address;\n+      --  Address bounds for executable code\n \n       Obj : SOR.Object_File_Access;\n       --  The object file containing dwarf sections\n \n-      Load_Address : System.Address := System.Null_Address;\n+      Load_Address : Address := Null_Address;\n       --  The address at which the object file was loaded at run time\n \n       Has_Debug : Boolean;"}, {"sha": "e46c4700d921b67468a1de66758481ca954d19f4", "filename": "gcc/ada/libgnat/s-objrea.adb", "status": "modified", "additions": 49, "deletions": 24, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaddaf82ede448cc67e279ad5585eb313a2bef19/gcc%2Fada%2Flibgnat%2Fs-objrea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaddaf82ede448cc67e279ad5585eb313a2bef19/gcc%2Fada%2Flibgnat%2Fs-objrea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-objrea.adb?ref=aaddaf82ede448cc67e279ad5585eb313a2bef19", "patch": "@@ -36,6 +36,7 @@ with Interfaces.C;\n with System.CRTL;\n \n package body System.Object_Reader is\n+\n    use Interfaces;\n    use Interfaces.C;\n    use System.Mmap;\n@@ -220,7 +221,6 @@ package body System.Object_Reader is\n          Characteristics      : uint16;\n          Variant              : uint16;\n       end record;\n-\n       pragma Pack (Header);\n \n       type Optional_Header_PE32 is record\n@@ -306,7 +306,6 @@ package body System.Object_Reader is\n          NumberOfLinenumbers  : uint16;\n          Characteristics      : uint32;\n       end record;\n-\n       pragma Pack (Section_Header);\n \n       IMAGE_SCN_CNT_CODE : constant := 16#0020#;\n@@ -319,7 +318,6 @@ package body System.Object_Reader is\n          StorageClass          : uint8;\n          NumberOfAuxSymbols    : uint8;\n       end record;\n-\n       pragma Pack (Symtab_Entry);\n \n       type Auxent_Section is record\n@@ -435,7 +433,6 @@ package body System.Object_Reader is\n          s_nlnno   : uint16;\n          s_flags   : uint32;\n       end record;\n-\n       pragma Pack (Section_Header);\n \n       STYP_TEXT : constant := 16#0020#;\n@@ -460,7 +457,6 @@ package body System.Object_Reader is\n          x_snstab   : uint16;\n       end record;\n       for Aux_Entry'Size use 18 * 8;\n-\n       pragma Pack (Aux_Entry);\n \n       C_EXT     : constant := 2;\n@@ -549,6 +545,7 @@ package body System.Object_Reader is\n          Shnum : uint32) return Object_Section\n       is\n          SHdr : constant Section_Header := Read_Section_Header (Obj, Shnum);\n+\n       begin\n          return (Shnum,\n                  Offset (SHdr.Sh_Offset),\n@@ -680,6 +677,7 @@ package body System.Object_Reader is\n \n       function Read_Header (F : in out Mapped_Stream) return Header is\n          Hdr : Header;\n+\n       begin\n          Seek (F, 0);\n          Read_Raw (F, Hdr'Address, uint32 (Hdr'Size / SSU));\n@@ -695,6 +693,7 @@ package body System.Object_Reader is\n          Shnum : uint32) return Section_Header\n       is\n          Shdr : Section_Header;\n+\n       begin\n          Seek (Obj.Sectab_Stream, Offset (Shnum * Section_Header'Size / SSU));\n          Read_Raw (Obj.Sectab_Stream, Shdr'Address, Section_Header'Size / SSU);\n@@ -749,6 +748,7 @@ package body System.Object_Reader is\n          Sec : Object_Section) return String\n       is\n          SHdr : Section_Header;\n+\n       begin\n          SHdr := Read_Section_Header (Obj, Sec.Num);\n          return Offset_To_String (Obj.Secstr_Stream, Offset (SHdr.Sh_Name));\n@@ -861,7 +861,8 @@ package body System.Object_Reader is\n       ------------------\n \n       function First_Symbol\n-        (Obj : in out PECOFF_Object_File) return Object_Symbol is\n+        (Obj : in out PECOFF_Object_File) return Object_Symbol\n+      is\n       begin\n          --  Return Null_Symbol in the case that the symbol table is empty\n \n@@ -881,6 +882,7 @@ package body System.Object_Reader is\n          Index : uint32) return Object_Section\n       is\n          Sec : constant Section_Header := Read_Section_Header (Obj, Index);\n+\n       begin\n          --  Use VirtualSize instead of SizeOfRawData. The latter is rounded to\n          --  the page size, so it may add garbage to the content. On the other\n@@ -938,6 +940,7 @@ package body System.Object_Reader is\n          Hdr_Offset : Offset;\n          Opt_Offset : File_Size;\n          Opt_Stream : Mapped_Stream;\n+\n       begin\n          Res.MF := F;\n          Res.In_Exception := In_Exception;\n@@ -1180,7 +1183,8 @@ package body System.Object_Reader is\n \n       function String_Table\n         (Obj   : in out PECOFF_Object_File;\n-         Index : Offset) return String is\n+         Index : Offset) return String\n+      is\n       begin\n          --  An index of zero is used to represent an empty string, as the\n          --  first word of the string table is specified to contain the length\n@@ -1361,6 +1365,7 @@ package body System.Object_Reader is\n       is\n          Res : XCOFF32_Object_File (Format => XCOFF32);\n          Strtab_Sz : uint32;\n+\n       begin\n          Res.Mf := F;\n          Res.In_Exception := In_Exception;\n@@ -1401,6 +1406,7 @@ package body System.Object_Reader is\n          Index : uint32) return Object_Section\n       is\n          Sec : constant Section_Header := Read_Section_Header (Obj, Index);\n+\n       begin\n          return (Index, Offset (Sec.s_scnptr),\n                  uint64 (Sec.s_vaddr),\n@@ -1414,6 +1420,7 @@ package body System.Object_Reader is\n \n       function Read_Header (F : in out Mapped_Stream) return Header is\n          Hdr : Header;\n+\n       begin\n          Seek (F, 0);\n          Read_Raw (F, Hdr'Address, uint32 (Hdr'Size / SSU));\n@@ -1428,7 +1435,7 @@ package body System.Object_Reader is\n         (Obj   : in out XCOFF32_Object_File;\n          Index : uint32) return Section_Header\n       is\n-         Sec     : Section_Header;\n+         Sec : Section_Header;\n \n       begin\n          --  Seek to the end of the object header\n@@ -1451,6 +1458,7 @@ package body System.Object_Reader is\n          Sec : Object_Section) return String\n       is\n          Hdr : Section_Header;\n+\n       begin\n          Hdr := Read_Section_Header (Obj, Sec.Num);\n          return Trim_Trailing_Nuls (Hdr.s_name);\n@@ -1520,7 +1528,8 @@ package body System.Object_Reader is\n \n    function Create_Stream\n      (Obj : Object_File;\n-      Sec : Object_Section) return Mapped_Stream is\n+      Sec : Object_Section) return Mapped_Stream\n+   is\n    begin\n       return Create_Stream (Obj.Mf, File_Size (Sec.Off), File_Size (Sec.Size));\n    end Create_Stream;\n@@ -1573,7 +1582,8 @@ package body System.Object_Reader is\n \n    function Strip_Leading_Char\n      (Obj : in out Object_File;\n-      Sym : String_Ptr_Len) return Positive is\n+      Sym : String_Ptr_Len) return Positive\n+   is\n    begin\n       if (Obj.Format = PECOFF  and then Sym.Ptr (1) = '_')\n         or else\n@@ -1605,6 +1615,7 @@ package body System.Object_Reader is\n         String (Sym.Ptr (1 .. Sym.Len)) & ASCII.NUL;\n       Decoded : char_array (0 .. size_t (Sym.Len) * 2 + 60);\n       Off     : Natural;\n+\n    begin\n       --  In the PECOFF case most but not all symbol table entries have an\n       --  extra leading underscore. In this case we trim it.\n@@ -1645,8 +1656,12 @@ package body System.Object_Reader is\n \n    function Get_Load_Address (Obj : Object_File) return uint64 is\n    begin\n-      raise Format_Error with \"Get_Load_Address not implemented\";\n-      return 0;\n+      if Obj.Format in Any_PECOFF then\n+         return Obj.ImageBase;\n+\n+      else\n+         raise Format_Error with \"Get_Load_Address not implemented\";\n+      end if;\n    end Get_Load_Address;\n \n    -----------------\n@@ -1655,7 +1670,8 @@ package body System.Object_Reader is\n \n    function Get_Section\n      (Obj   : in out Object_File;\n-      Shnum : uint32) return Object_Section is\n+      Shnum : uint32) return Object_Section\n+   is\n    begin\n       case Obj.Format is\n          when ELF32      => return ELF32_Ops.Get_Section   (Obj, Shnum);\n@@ -1692,9 +1708,11 @@ package body System.Object_Reader is\n    ----------------------\n \n    procedure Get_Xcode_Bounds\n-     (Obj   : in out Object_File;\n-      Low, High : out uint64) is\n+     (Obj       : in out Object_File;\n+      Low, High : out uint64)\n+   is\n       Sec : Object_Section;\n+\n    begin\n       --  First set as an empty range\n       Low := uint64'Last;\n@@ -1721,7 +1739,8 @@ package body System.Object_Reader is\n \n    function Name\n      (Obj : in out Object_File;\n-      Sec : Object_Section) return String is\n+      Sec : Object_Section) return String\n+   is\n    begin\n       case Obj.Format is\n          when ELF32      => return ELF32_Ops.Name   (Obj, Sec);\n@@ -1733,7 +1752,8 @@ package body System.Object_Reader is\n \n    function Name\n      (Obj : in out Object_File;\n-      Sym : Object_Symbol) return String_Ptr_Len is\n+      Sym : Object_Symbol) return String_Ptr_Len\n+   is\n    begin\n       case Obj.Format is\n          when ELF32      => return ELF32_Ops.Name   (Obj, Sym);\n@@ -1749,7 +1769,8 @@ package body System.Object_Reader is\n \n    function Next_Symbol\n      (Obj  : in out Object_File;\n-      Prev : Object_Symbol) return Object_Symbol is\n+      Prev : Object_Symbol) return Object_Symbol\n+   is\n    begin\n       --  Test whether we've reached the end of the symbol table\n \n@@ -1801,6 +1822,7 @@ package body System.Object_Reader is\n       Off : Offset) return String\n    is\n       Buf     : Buffer;\n+\n    begin\n       Seek (S, Off);\n       Read_C_String (S, Buf);\n@@ -1922,10 +1944,10 @@ package body System.Object_Reader is\n    -- Read --\n    ----------\n \n-   function Read (S : in out Mapped_Stream) return Mmap.Str_Access\n-   is\n+   function Read (S : in out Mapped_Stream) return Mmap.Str_Access is\n       function To_Str_Access is\n          new Ada.Unchecked_Conversion (Address, Str_Access);\n+\n    begin\n       return To_Str_Access (Data (S.Region) (Natural (S.Off + 1))'Address);\n    end Read;\n@@ -1949,8 +1971,8 @@ package body System.Object_Reader is\n    is\n       function To_Str_Access is\n          new Ada.Unchecked_Conversion (Address, Str_Access);\n-\n       Sz : constant Offset := Offset (Size);\n+\n    begin\n       --  Check size\n \n@@ -2027,7 +2049,8 @@ package body System.Object_Reader is\n    ------------------\n \n    function Read_Address\n-     (Obj : Object_File; S : in out Mapped_Stream) return uint64 is\n+     (Obj : Object_File; S : in out Mapped_Stream) return uint64\n+   is\n       Address_32 : uint32;\n       Address_64 : uint64;\n \n@@ -2147,7 +2170,8 @@ package body System.Object_Reader is\n \n    function Read_Symbol\n      (Obj : in out Object_File;\n-      Off : Offset) return Object_Symbol is\n+      Off : Offset) return Object_Symbol\n+   is\n    begin\n       case Obj.Format is\n          when ELF32      => return ELF32_Ops.Read_Symbol   (Obj, Off);\n@@ -2221,7 +2245,8 @@ package body System.Object_Reader is\n \n    function To_String_Ptr_Len\n      (Ptr : Mmap.Str_Access;\n-      Max_Len : Natural := Natural'Last) return String_Ptr_Len is\n+      Max_Len : Natural := Natural'Last) return String_Ptr_Len\n+   is\n    begin\n       for I in 1 .. Max_Len loop\n          if Ptr (I) = ASCII.NUL then"}, {"sha": "d20a53dd8f006dee7c436db198326a3b346bc5c6", "filename": "gcc/ada/libgnat/s-objrea.ads", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaddaf82ede448cc67e279ad5585eb313a2bef19/gcc%2Fada%2Flibgnat%2Fs-objrea.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaddaf82ede448cc67e279ad5585eb313a2bef19/gcc%2Fada%2Flibgnat%2Fs-objrea.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-objrea.ads?ref=aaddaf82ede448cc67e279ad5585eb313a2bef19", "patch": "@@ -287,7 +287,7 @@ package System.Object_Reader is\n      (Obj   : in out Object_File;\n       Low, High : out uint64);\n    --  Return the low and high addresses of the code for the object file. Can\n-   --  be used to check if an address in within this object file. This\n+   --  be used to check if an address lies within this object file. This\n    --  procedure is not efficient and the result should be saved to avoid\n    --  recomputation.\n \n@@ -381,9 +381,8 @@ private\n    subtype Any_PECOFF is Object_Format range PECOFF .. PECOFF_PLUS;\n \n    type Object_File (Format : Object_Format) is record\n-      Mf           : System.Mmap.Mapped_File :=\n-                        System.Mmap.Invalid_Mapped_File;\n-      Arch         : Object_Arch := Unknown;\n+      Mf   : System.Mmap.Mapped_File := System.Mmap.Invalid_Mapped_File;\n+      Arch : Object_Arch := Unknown;\n \n       Num_Sections : uint32 := 0;\n       --  Number of sections\n@@ -406,26 +405,28 @@ private\n          when ELF =>\n             Secstr_Stream : Mapped_Stream;\n             --  Section strings\n+\n          when Any_PECOFF =>\n             ImageBase   : uint64;       --  ImageBase value from header\n \n             --  Cache for latest result of Get_Section_Virtual_Address\n \n             GSVA_Sec  : uint32 := uint32'Last;\n             GSVA_Addr : uint64;\n+\n          when XCOFF32 =>\n             null;\n       end case;\n    end record;\n \n-   subtype ELF_Object_File is Object_File; -- with\n-   --  Predicate => ELF_Object_File.Format in ELF;\n-   subtype PECOFF_Object_File is Object_File; -- with\n-   --  Predicate => PECOFF_Object_File.Format in Any_PECOFF;\n-   subtype XCOFF32_Object_File is Object_File; -- with\n-   --  Predicate => XCOFF32_Object_File.Format in XCOFF32;\n-   --  ???Above predicates cause the compiler to crash when instantiating\n-   --  ELF64_Ops (see package body).\n+   subtype ELF_Object_File is Object_File\n+     with Predicate => ELF_Object_File.Format in ELF;\n+\n+   subtype PECOFF_Object_File is Object_File\n+     with Predicate => PECOFF_Object_File.Format in Any_PECOFF;\n+\n+   subtype XCOFF32_Object_File is Object_File\n+     with Predicate => XCOFF32_Object_File.Format in XCOFF32;\n \n    type Object_Section is record\n       Num        : uint32 := 0;"}]}