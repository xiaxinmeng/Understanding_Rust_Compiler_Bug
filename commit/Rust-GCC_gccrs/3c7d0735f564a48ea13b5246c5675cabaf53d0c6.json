{"sha": "3c7d0735f564a48ea13b5246c5675cabaf53d0c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M3ZDA3MzVmNTY0YTQ4ZWExM2I1MjQ2YzU2NzVjYWJhZjUzZDBjNg==", "commit": {"author": {"name": "Dorit Nuzman", "email": "dorit@il.ibm.com", "date": "2005-09-19T14:54:28Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2005-09-19T14:54:28Z"}, "message": "tree-ssa-operands.c (swap_tree_operands): Export.\n\n        * tree-ssa-operands.c (swap_tree_operands): Export.\n        * tree.h (swap_tree_operands): Declare.\n        * tree-vectorizer.c (vect_is_simple_reduction): Remove ATTRIBUTE_UNUSED.\n        Call swap_tree_operands.\n\nFrom-SVN: r104421", "tree": {"sha": "2900f810d56e7c95c656926bb2065f9957bcf714", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2900f810d56e7c95c656926bb2065f9957bcf714"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c7d0735f564a48ea13b5246c5675cabaf53d0c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c7d0735f564a48ea13b5246c5675cabaf53d0c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c7d0735f564a48ea13b5246c5675cabaf53d0c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c7d0735f564a48ea13b5246c5675cabaf53d0c6/comments", "author": null, "committer": null, "parents": [{"sha": "99c09897c242936f17490c0340ac272fc90b67f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99c09897c242936f17490c0340ac272fc90b67f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99c09897c242936f17490c0340ac272fc90b67f0"}], "stats": {"total": 28, "additions": 12, "deletions": 16}, "files": [{"sha": "118b6b676a33e89c4d82a57f2c7855577ec1592e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7d0735f564a48ea13b5246c5675cabaf53d0c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7d0735f564a48ea13b5246c5675cabaf53d0c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c7d0735f564a48ea13b5246c5675cabaf53d0c6", "patch": "@@ -1,3 +1,10 @@\n+2005-09-19  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\t* tree-ssa-operands.c (swap_tree_operands): Export.\n+\t* tree.h (swap_tree_operands): Declare.\n+\t* tree-vectorizer.c (vect_is_simple_reduction): Remove ATTRIBUTE_UNUSED.\n+\tCall swap_tree_operands.\n+\t\n 2005-09-19  Richard Henderson  <rth@redhat.com>\n \n \t* tree-flow.h (merge_alias_info): Declare."}, {"sha": "5b1e4454e4d979846525637ab10c8d3d4dd2f603", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7d0735f564a48ea13b5246c5675cabaf53d0c6/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7d0735f564a48ea13b5246c5675cabaf53d0c6/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=3c7d0735f564a48ea13b5246c5675cabaf53d0c6", "patch": "@@ -1165,7 +1165,7 @@ create_ssa_artficial_load_stmt (tree new_stmt, tree old_stmt)\n     delink_imm_use (use_p);\n }\n \n-static void\n+void\n swap_tree_operands (tree stmt, tree *exp0, tree *exp1)\n {\n   tree op0, op1;"}, {"sha": "bc0f11ee3c7b4068a5c49d7e0de3c068f5a13b40", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7d0735f564a48ea13b5246c5675cabaf53d0c6/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7d0735f564a48ea13b5246c5675cabaf53d0c6/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=3c7d0735f564a48ea13b5246c5675cabaf53d0c6", "patch": "@@ -1787,8 +1787,7 @@ reduction_code_for_scalar_code (enum tree_code code,\n    Conditions 2,3 are tested in vect_mark_stmts_to_be_vectorized.  */\n \n tree\n-vect_is_simple_reduction (struct loop *loop ATTRIBUTE_UNUSED, \n-\t\t\t  tree phi ATTRIBUTE_UNUSED)\n+vect_is_simple_reduction (struct loop *loop, tree phi)\n {\n   edge latch_e = loop_latch_edge (loop);\n   tree loop_arg = PHI_ARG_DEF_FROM_EDGE (phi, latch_e);\n@@ -1930,9 +1929,6 @@ vect_is_simple_reduction (struct loop *loop ATTRIBUTE_UNUSED,\n       && flow_bb_inside_loop_p (loop, bb_for_stmt (def2))\n       && def1 == phi)\n     {\n-      use_operand_p use;\n-      ssa_op_iter iter;\n-\n       /* Swap operands (just for simplicity - so that the rest of the code\n \t can assume that the reduction variable is always the last (second)\n \t argument).  */\n@@ -1941,16 +1937,8 @@ vect_is_simple_reduction (struct loop *loop ATTRIBUTE_UNUSED,\n           fprintf (vect_dump, \"detected reduction: need to swap operands:\");\n           print_generic_expr (vect_dump, operation, TDF_SLIM);\n         }\n-\n-      /* CHECKME */\n-      FOR_EACH_SSA_USE_OPERAND (use, def_stmt, iter, SSA_OP_USE)\n-        {\n-          tree tuse = USE_FROM_PTR (use);\n-          if (tuse == op1)\n-            SET_USE (use, op2);\n-          else if (tuse == op2)\n-            SET_USE (use, op1);\n-        }\n+      swap_tree_operands (def_stmt, &TREE_OPERAND (operation, 0), \n+\t\t\t\t    &TREE_OPERAND (operation, 1));\n       return def_stmt;\n     }\n   else"}, {"sha": "198c4437f07e5b37dda2bdccca12cb8ef393f278", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7d0735f564a48ea13b5246c5675cabaf53d0c6/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7d0735f564a48ea13b5246c5675cabaf53d0c6/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=3c7d0735f564a48ea13b5246c5675cabaf53d0c6", "patch": "@@ -3857,6 +3857,7 @@ extern tree constant_boolean_node (int, tree);\n extern tree build_low_bits_mask (tree, unsigned);\n \n extern bool tree_swap_operands_p (tree, tree, bool);\n+extern void swap_tree_operands (tree, tree *, tree *);\n extern enum tree_code swap_tree_comparison (enum tree_code);\n \n extern bool ptr_difference_const (tree, tree, HOST_WIDE_INT *);"}]}