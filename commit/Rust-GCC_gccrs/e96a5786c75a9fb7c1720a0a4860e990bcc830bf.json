{"sha": "e96a5786c75a9fb7c1720a0a4860e990bcc830bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk2YTU3ODZjNzVhOWZiN2MxNzIwYTBhNDg2MGU5OTBiY2M4MzBiZg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2018-01-09T13:25:38Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2018-01-09T13:25:38Z"}, "message": "Fix folding of Inf/NaN comparisons for -ftrapping-math (PR tree-optimization/64811).\n\nThe folding of comparisons against Inf (to constants or comparisons\nwith the maximum finite value) has various cases where it introduces\nor loses \"invalid\" exceptions for comparisons with NaNs.\n\nFolding x > +Inf to 0 should not be about HONOR_SNANS - ordered\ncomparisons of both quiet and signaling NaNs should raise invalid.\n\nx <= +Inf is not the same as x == x, because again that loses an\nexception (equality comparisons don't raise exceptions except for\nsignaling NaNs).\n\nx == +Inf is not the same as x > DBL_MAX, and a similar issue applies\nwith the x != +Inf case - that transformation causes a spurious\nexception.\n\nThis patch fixes the conditionals on the folding to avoid such\nintroducing or losing exceptions.\n\nBootstrapped with no regressions on x86_64-pc-linux-gnu (where the\ncases involving spurious exceptions wouldn't have failed anyway before\nGCC 8 because of unordered comparisons wrongly always having formerly\nbeen used by the back end).  Also tested for powerpc-linux-gnu\nsoft-float that this fixes many glibc math/ test failures that arose\nin that configuration because this folding affected the IBM long\ndouble support in libgcc (no such failures appeared for hard-float\nbecause of the bug of powerpc hard-float always using unordered\ncomparisons) - some failures remain, but I believe them to be\nunrelated.\n\n\tPR tree-optimization/64811\ngcc:\n\t* match.pd: When optimizing comparisons with Inf, avoid\n\tintroducing or losing exceptions from comparisons with NaN.\n\ngcc/testsuite:\n\t* gcc.dg/torture/inf-compare-1.c, gcc.dg/torture/inf-compare-2.c,\n\tgcc.dg/torture/inf-compare-3.c, gcc.dg/torture/inf-compare-4.c,\n\tgcc.dg/torture/inf-compare-5.c, gcc.dg/torture/inf-compare-6.c,\n\tgcc.dg/torture/inf-compare-7.c, gcc.dg/torture/inf-compare-8.c:\n\tNew tests.\n\t* gcc.c-torture/execute/ieee/fp-cmp-7.x: New file.\n\nFrom-SVN: r256380", "tree": {"sha": "a89520fd45e90056d90ab7810d9c09d60ed7698d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a89520fd45e90056d90ab7810d9c09d60ed7698d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e96a5786c75a9fb7c1720a0a4860e990bcc830bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e96a5786c75a9fb7c1720a0a4860e990bcc830bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e96a5786c75a9fb7c1720a0a4860e990bcc830bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e96a5786c75a9fb7c1720a0a4860e990bcc830bf/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa5bfa8d5d9b5751bc6b1854d663fbf777849711", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa5bfa8d5d9b5751bc6b1854d663fbf777849711", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa5bfa8d5d9b5751bc6b1854d663fbf777849711"}], "stats": {"total": 197, "additions": 185, "deletions": 12}, "files": [{"sha": "24fd1b4187f466c110157daf2bda3a61c7da6119", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e96a5786c75a9fb7c1720a0a4860e990bcc830bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e96a5786c75a9fb7c1720a0a4860e990bcc830bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e96a5786c75a9fb7c1720a0a4860e990bcc830bf", "patch": "@@ -1,3 +1,9 @@\n+2018-01-09  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR tree-optimization/64811\n+\t* match.pd: When optimizing comparisons with Inf, avoid\n+\tintroducing or losing exceptions from comparisons with NaN.\n+\n 2018-01-09  Martin Liska  <mliska@suse.cz>\n \n \tPR sanitizer/82517"}, {"sha": "435125a317275527661fba011a9d26e507d293a6", "filename": "gcc/match.pd", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e96a5786c75a9fb7c1720a0a4860e990bcc830bf/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e96a5786c75a9fb7c1720a0a4860e990bcc830bf/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=e96a5786c75a9fb7c1720a0a4860e990bcc830bf", "patch": "@@ -3050,18 +3050,22 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n          code = swap_tree_comparison (code);\n      }\n      (switch\n-      /* x > +Inf is always false, if with ignore sNANs.  */\n+      /* x > +Inf is always false, if we ignore NaNs or exceptions.  */\n       (if (code == GT_EXPR\n-\t   && ! HONOR_SNANS (@0))\n+\t   && !(HONOR_NANS (@0) && flag_trapping_math))\n        { constant_boolean_node (false, type); })\n       (if (code == LE_EXPR)\n-       /* x <= +Inf is always true, if we don't case about NaNs.  */\n+       /* x <= +Inf is always true, if we don't care about NaNs.  */\n        (if (! HONOR_NANS (@0))\n \t{ constant_boolean_node (true, type); }\n-\t/* x <= +Inf is the same as x == x, i.e. !isnan(x).  */\n-\t(eq @0 @0)))\n-      /* x == +Inf and x >= +Inf are always equal to x > DBL_MAX.  */\n-      (if (code == EQ_EXPR || code == GE_EXPR)\n+\t/* x <= +Inf is the same as x == x, i.e. !isnan(x), but this loses\n+\t   an \"invalid\" exception.  */\n+\t(if (!flag_trapping_math)\n+\t (eq @0 @0))))\n+      /* x == +Inf and x >= +Inf are always equal to x > DBL_MAX, but\n+\t for == this introduces an exception for x a NaN.  */\n+      (if ((code == EQ_EXPR && !(HONOR_NANS (@0) && flag_trapping_math))\n+\t   || code == GE_EXPR)\n        (with { real_maxval (&max, neg, TYPE_MODE (TREE_TYPE (@0))); }\n \t(if (neg)\n \t (lt @0 { build_real (TREE_TYPE (@0), max); })\n@@ -3072,18 +3076,17 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t(if (neg)\n \t (ge @0 { build_real (TREE_TYPE (@0), max); })\n \t (le @0 { build_real (TREE_TYPE (@0), max); }))))\n-      /* x != +Inf is always equal to !(x > DBL_MAX).  */\n+      /* x != +Inf is always equal to !(x > DBL_MAX), but this introduces\n+\t an exception for x a NaN so use an unordered comparison.  */\n       (if (code == NE_EXPR)\n        (with { real_maxval (&max, neg, TYPE_MODE (TREE_TYPE (@0))); }\n \t(if (! HONOR_NANS (@0))\n \t (if (neg)\n \t  (ge @0 { build_real (TREE_TYPE (@0), max); })\n \t  (le @0 { build_real (TREE_TYPE (@0), max); }))\n \t (if (neg)\n-\t  (bit_xor (lt @0 { build_real (TREE_TYPE (@0), max); })\n-\t   { build_one_cst (type); })\n-\t  (bit_xor (gt @0 { build_real (TREE_TYPE (@0), max); })\n-\t   { build_one_cst (type); }))))))))))\n+\t  (unge @0 { build_real (TREE_TYPE (@0), max); })\n+\t  (unle @0 { build_real (TREE_TYPE (@0), max); }))))))))))\n \n  /* If this is a comparison of a real constant with a PLUS_EXPR\n     or a MINUS_EXPR of a real constant, we can convert it into a"}, {"sha": "679b22a68d405332fd5de444bec9bbedc7b1a452", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e96a5786c75a9fb7c1720a0a4860e990bcc830bf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e96a5786c75a9fb7c1720a0a4860e990bcc830bf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e96a5786c75a9fb7c1720a0a4860e990bcc830bf", "patch": "@@ -1,3 +1,13 @@\n+2018-01-09  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR tree-optimization/64811\n+\t* gcc.dg/torture/inf-compare-1.c, gcc.dg/torture/inf-compare-2.c,\n+\tgcc.dg/torture/inf-compare-3.c, gcc.dg/torture/inf-compare-4.c,\n+\tgcc.dg/torture/inf-compare-5.c, gcc.dg/torture/inf-compare-6.c,\n+\tgcc.dg/torture/inf-compare-7.c, gcc.dg/torture/inf-compare-8.c:\n+\tNew tests.\n+\t* gcc.c-torture/execute/ieee/fp-cmp-7.x: New file.\n+\n 2018-01-09  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/79883"}, {"sha": "35f7a0a7d99a32290ce02518c76e01f69e1a769b", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/fp-cmp-7.x", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e96a5786c75a9fb7c1720a0a4860e990bcc830bf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-7.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e96a5786c75a9fb7c1720a0a4860e990bcc830bf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-7.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-7.x?ref=e96a5786c75a9fb7c1720a0a4860e990bcc830bf", "patch": "@@ -0,0 +1,2 @@\n+lappend additional_flags \"-fno-trapping-math\"\n+return 0"}, {"sha": "0f4510829b5e6dd1b860d34bb24a8625800b1e3a", "filename": "gcc/testsuite/gcc.dg/torture/inf-compare-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e96a5786c75a9fb7c1720a0a4860e990bcc830bf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Finf-compare-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e96a5786c75a9fb7c1720a0a4860e990bcc830bf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Finf-compare-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Finf-compare-1.c?ref=e96a5786c75a9fb7c1720a0a4860e990bcc830bf", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-add-options ieee } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#include <fenv.h>\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+volatile double x = __builtin_nan (\"\");\n+volatile int i;\n+\n+int\n+main (void)\n+{\n+  i = x > __builtin_inf ();\n+  if (i != 0 || !fetestexcept (FE_INVALID))\n+    abort ();\n+}"}, {"sha": "ba7339586a41048b53a6d5a52b9e96b9454159b3", "filename": "gcc/testsuite/gcc.dg/torture/inf-compare-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e96a5786c75a9fb7c1720a0a4860e990bcc830bf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Finf-compare-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e96a5786c75a9fb7c1720a0a4860e990bcc830bf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Finf-compare-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Finf-compare-2.c?ref=e96a5786c75a9fb7c1720a0a4860e990bcc830bf", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-add-options ieee } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#include <fenv.h>\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+volatile double x = __builtin_nan (\"\");\n+volatile int i;\n+\n+int\n+main (void)\n+{\n+  i = x < -__builtin_inf ();\n+  if (i != 0 || !fetestexcept (FE_INVALID))\n+    abort ();\n+}"}, {"sha": "e545d3b620c6cbd62058acd65b419946d6a78aba", "filename": "gcc/testsuite/gcc.dg/torture/inf-compare-3.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e96a5786c75a9fb7c1720a0a4860e990bcc830bf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Finf-compare-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e96a5786c75a9fb7c1720a0a4860e990bcc830bf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Finf-compare-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Finf-compare-3.c?ref=e96a5786c75a9fb7c1720a0a4860e990bcc830bf", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-add-options ieee } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#include <fenv.h>\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+volatile double x = __builtin_nan (\"\");\n+volatile int i;\n+\n+int\n+main (void)\n+{\n+  i = x <= __builtin_inf ();\n+  if (i != 0 || !fetestexcept (FE_INVALID))\n+    abort ();\n+}"}, {"sha": "fca6cbf6d947db06756a0bf0937eb841731e1b0b", "filename": "gcc/testsuite/gcc.dg/torture/inf-compare-4.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e96a5786c75a9fb7c1720a0a4860e990bcc830bf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Finf-compare-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e96a5786c75a9fb7c1720a0a4860e990bcc830bf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Finf-compare-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Finf-compare-4.c?ref=e96a5786c75a9fb7c1720a0a4860e990bcc830bf", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-add-options ieee } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#include <fenv.h>\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+volatile double x = __builtin_nan (\"\");\n+volatile int i;\n+\n+int\n+main (void)\n+{\n+  i = x >= -__builtin_inf ();\n+  if (i != 0 || !fetestexcept (FE_INVALID))\n+    abort ();\n+}"}, {"sha": "d7f17e7dd2145d0e296bcd806dddd66bfc03987b", "filename": "gcc/testsuite/gcc.dg/torture/inf-compare-5.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e96a5786c75a9fb7c1720a0a4860e990bcc830bf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Finf-compare-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e96a5786c75a9fb7c1720a0a4860e990bcc830bf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Finf-compare-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Finf-compare-5.c?ref=e96a5786c75a9fb7c1720a0a4860e990bcc830bf", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-add-options ieee } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#include <fenv.h>\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+volatile double x = __builtin_nan (\"\");\n+volatile int i;\n+\n+int\n+main (void)\n+{\n+  i = x == __builtin_inf ();\n+  if (i != 0 || fetestexcept (FE_INVALID))\n+    abort ();\n+}"}, {"sha": "2dd862b7ebe9862aa0338753424506205d5559ca", "filename": "gcc/testsuite/gcc.dg/torture/inf-compare-6.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e96a5786c75a9fb7c1720a0a4860e990bcc830bf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Finf-compare-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e96a5786c75a9fb7c1720a0a4860e990bcc830bf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Finf-compare-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Finf-compare-6.c?ref=e96a5786c75a9fb7c1720a0a4860e990bcc830bf", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-add-options ieee } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#include <fenv.h>\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+volatile double x = __builtin_nan (\"\");\n+volatile int i;\n+\n+int\n+main (void)\n+{\n+  i = x == -__builtin_inf ();\n+  if (i != 0 || fetestexcept (FE_INVALID))\n+    abort ();\n+}"}, {"sha": "36676b4e79f09fe9e0865e39c6667c0cea5eb746", "filename": "gcc/testsuite/gcc.dg/torture/inf-compare-7.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e96a5786c75a9fb7c1720a0a4860e990bcc830bf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Finf-compare-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e96a5786c75a9fb7c1720a0a4860e990bcc830bf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Finf-compare-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Finf-compare-7.c?ref=e96a5786c75a9fb7c1720a0a4860e990bcc830bf", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-add-options ieee } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#include <fenv.h>\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+volatile double x = __builtin_nan (\"\");\n+volatile int i;\n+\n+int\n+main (void)\n+{\n+  i = x != __builtin_inf ();\n+  if (i != 1 || fetestexcept (FE_INVALID))\n+    abort ();\n+}"}, {"sha": "cfda813a0c634a13baaf98f167e15918b2bbe56e", "filename": "gcc/testsuite/gcc.dg/torture/inf-compare-8.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e96a5786c75a9fb7c1720a0a4860e990bcc830bf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Finf-compare-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e96a5786c75a9fb7c1720a0a4860e990bcc830bf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Finf-compare-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Finf-compare-8.c?ref=e96a5786c75a9fb7c1720a0a4860e990bcc830bf", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-add-options ieee } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#include <fenv.h>\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+volatile double x = __builtin_nan (\"\");\n+volatile int i;\n+\n+int\n+main (void)\n+{\n+  i = x != -__builtin_inf ();\n+  if (i != 1 || fetestexcept (FE_INVALID))\n+    abort ();\n+}"}]}