{"sha": "ceee0bde3650a71c8acd8e24f858bdd21846c13e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VlZTBiZGUzNjUwYTcxYzhhY2Q4ZTI0Zjg1OGJkZDIxODQ2YzEzZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-12-05T10:12:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-12-05T10:12:49Z"}, "message": "[multiple changes]\n\n2012-12-05  Yannick Moy  <moy@adacore.com>\n\n\t* gnat1drv.adb (Adjust_Global_Switches): Move setting of flags for\n\tAlfa mode before general treatment of flags, so that overflow checks\n\tsettings are set appropriately in Alfa mode. Also set the mode to\n\tSTRICT in Alfa mode if not already set by the user.\n\n2012-12-05  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch3.adb: Minor reformatting.\n\n2012-12-05  Steve Baird  <baird@adacore.com>\n\n\t* sinfo.ads: Improve comments about SCIL-related node kinds and selector\n\tfunctions.\n\n2012-12-05  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch10.adb (Build_Limited_Views): Even though the unit is\n\tnot analyzed, place its entity on the name in the with clause,\n\tso that warnings on unused with-clause are properly supported\n\tfor limited withs.\n\n2012-12-05  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_ugn.texi: Update overflow description. Pragma\n\tOverflow_Checks changed to Overflow_Mode.\n\nFrom-SVN: r194191", "tree": {"sha": "55aaacd5405a3eca06000fe23ac0bf99469c7f1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55aaacd5405a3eca06000fe23ac0bf99469c7f1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ceee0bde3650a71c8acd8e24f858bdd21846c13e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceee0bde3650a71c8acd8e24f858bdd21846c13e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceee0bde3650a71c8acd8e24f858bdd21846c13e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceee0bde3650a71c8acd8e24f858bdd21846c13e/comments", "author": null, "committer": null, "parents": [{"sha": "97948f419d8f77bbf30e402016c865d9de333b7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97948f419d8f77bbf30e402016c865d9de333b7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97948f419d8f77bbf30e402016c865d9de333b7f"}], "stats": {"total": 490, "additions": 258, "deletions": 232}, "files": [{"sha": "62809f666743aadc2caa455e21e96d073f435a32", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceee0bde3650a71c8acd8e24f858bdd21846c13e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceee0bde3650a71c8acd8e24f858bdd21846c13e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ceee0bde3650a71c8acd8e24f858bdd21846c13e", "patch": "@@ -1,3 +1,31 @@\n+2012-12-05  Yannick Moy  <moy@adacore.com>\n+\n+\t* gnat1drv.adb (Adjust_Global_Switches): Move setting of flags for\n+\tAlfa mode before general treatment of flags, so that overflow checks\n+\tsettings are set appropriately in Alfa mode. Also set the mode to\n+\tSTRICT in Alfa mode if not already set by the user.\n+\n+2012-12-05  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch3.adb: Minor reformatting.\n+\n+2012-12-05  Steve Baird  <baird@adacore.com>\n+\n+\t* sinfo.ads: Improve comments about SCIL-related node kinds and selector\n+\tfunctions.\n+\n+2012-12-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch10.adb (Build_Limited_Views): Even though the unit is\n+\tnot analyzed, place its entity on the name in the with clause,\n+\tso that warnings on unused with-clause are properly supported\n+\tfor limited withs.\n+\n+2012-12-05  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_ugn.texi: Update overflow description. Pragma\n+\tOverflow_Checks changed to Overflow_Mode.\n+\n 2012-12-05  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch3.adb (Build_Derived_Private_Type): Handle properly a"}, {"sha": "62fdc4babda447c9c5d248a89bbabbe9d0239bf5", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 128, "deletions": 111, "changes": 239, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceee0bde3650a71c8acd8e24f858bdd21846c13e/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceee0bde3650a71c8acd8e24f858bdd21846c13e/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=ceee0bde3650a71c8acd8e24f858bdd21846c13e", "patch": "@@ -201,7 +201,9 @@ procedure Gnat1drv is\n \n          Dynamic_Elaboration_Checks := False;\n \n-         --  Set STRICT mode for overflow checks if not set explicitly\n+         --  Set STRICT mode for overflow checks if not set explicitly. This\n+         --  prevents suppressing of overflow checks by default, in code down\n+         --  below.\n \n          if Suppress_Options.Overflow_Checks_General = Not_Set then\n             Suppress_Options.Overflow_Checks_General    := Strict;\n@@ -268,6 +270,129 @@ procedure Gnat1drv is\n          Try_Semantics := True;\n       end if;\n \n+      --  Set switches for formal verification mode\n+\n+      if Debug_Flag_Dot_VV then\n+         Formal_Extensions := True;\n+      end if;\n+\n+      if Debug_Flag_Dot_FF then\n+         Alfa_Mode := True;\n+\n+         --  Set strict standard interpretation of compiler permissions\n+\n+         if Debug_Flag_Dot_DD then\n+            Strict_Alfa_Mode := True;\n+         end if;\n+\n+         --  Turn off inlining, which would confuse formal verification output\n+         --  and gain nothing.\n+\n+         Front_End_Inlining := False;\n+         Inline_Active      := False;\n+\n+         --  Disable front-end optimizations, to keep the tree as close to the\n+         --  source code as possible, and also to avoid inconsistencies between\n+         --  trees when using different optimization switches.\n+\n+         Optimization_Level := 0;\n+\n+         --  Enable some restrictions systematically to simplify the generated\n+         --  code (and ease analysis). Note that restriction checks are also\n+         --  disabled in Alfa mode, see Restrict.Check_Restriction, and user\n+         --  specified Restrictions pragmas are ignored, see\n+         --  Sem_Prag.Process_Restrictions_Or_Restriction_Warnings.\n+\n+         Restrict.Restrictions.Set (No_Initialize_Scalars) := True;\n+\n+         --  Note: at this point we used to suppress various checks, but that\n+         --  is not what we want. We need the semantic processing for these\n+         --  checks (which will set flags like Do_Overflow_Check, showing the\n+         --  points at which potential checks are required semantically). We\n+         --  don't want the expansion associated with these checks, but that\n+         --  happens anyway because this expansion is simply not done in the\n+         --  Alfa version of the expander.\n+\n+         --  Turn off dynamic elaboration checks: generates inconsistencies in\n+         --  trees between specs compiled as part of a main unit or as part of\n+         --  a with-clause.\n+\n+         Dynamic_Elaboration_Checks := False;\n+\n+         --  Set STRICT mode for overflow checks if not set explicitly. This\n+         --  prevents suppressing of overflow checks by default, in code down\n+         --  below.\n+\n+         if Suppress_Options.Overflow_Checks_General = Not_Set then\n+            Suppress_Options.Overflow_Checks_General    := Strict;\n+            Suppress_Options.Overflow_Checks_Assertions := Strict;\n+         end if;\n+\n+         --  Kill debug of generated code, since it messes up sloc values\n+\n+         Debug_Generated_Code := False;\n+\n+         --  Turn cross-referencing on in case it was disabled (e.g. by -gnatD)\n+         --  as it is needed for computing effects of subprograms in the formal\n+         --  verification backend.\n+\n+         Xref_Active := True;\n+\n+         --  Polling mode forced off, since it generates confusing junk\n+\n+         Polling_Required := False;\n+\n+         --  Set operating mode to Generate_Code, but full front-end expansion\n+         --  is not desirable in Alfa mode, so a light expansion is performed\n+         --  instead.\n+\n+         Operating_Mode := Generate_Code;\n+\n+         --  Skip call to gigi\n+\n+         Debug_Flag_HH := True;\n+\n+         --  Disable Expressions_With_Actions nodes\n+\n+         --  The gnat2why backend does not deal with Expressions_With_Actions\n+         --  in all places (in particular assertions). It is difficult to\n+         --  determine in the frontend which cases are allowed, so we disable\n+         --  Expressions_With_Actions entirely. Even in the cases where\n+         --  gnat2why deals with Expressions_With_Actions, it is easier to\n+         --  deal with the original constructs (quantified, conditional and\n+         --  case expressions) instead of the rewritten ones.\n+\n+         Use_Expression_With_Actions := False;\n+\n+         --  Enable assertions and debug pragmas, since they give valuable\n+         --  extra information for formal verification.\n+\n+         Assertions_Enabled    := True;\n+         Debug_Pragmas_Enabled := True;\n+\n+         --  Turn off style check options since we are not interested in any\n+         --  front-end warnings when we are getting Alfa output.\n+\n+         Reset_Style_Check_Options;\n+\n+         --  Suppress compiler warnings, since what we are interested in here\n+         --  is what formal verification can find out.\n+\n+         Warning_Mode := Suppress;\n+\n+         --  Suppress the generation of name tables for enumerations, which are\n+         --  not needed for formal verification, and fall outside the Alfa\n+         --  subset (use of pointers).\n+\n+         Global_Discard_Names := True;\n+\n+         --  Suppress the expansion of tagged types and dispatching calls,\n+         --  which lead to the generation of non-Alfa code (use of pointers),\n+         --  which is more complex to formally verify than the original source.\n+\n+         Tagged_Type_Expansion := False;\n+      end if;\n+\n       --  Set Configurable_Run_Time mode if system.ads flag set\n \n       if Targparm.Configurable_Run_Time_On_Target or Debug_Flag_YY then\n@@ -335,8 +460,8 @@ procedure Gnat1drv is\n \n       --  Set proper status for overflow check mechanism\n \n-      --  If already set (by -gnato or above in CodePeer mode) then we have\n-      --  nothing to do.\n+      --  If already set (by -gnato or above in Alfa or CodePeer mode) then we\n+      --  have nothing to do.\n \n       if Opt.Suppress_Options.Overflow_Checks_General /= Not_Set then\n          null;\n@@ -430,114 +555,6 @@ procedure Gnat1drv is\n          Back_End_Handles_Limited_Types := False;\n       end if;\n \n-      --  Set switches for formal verification mode\n-\n-      if Debug_Flag_Dot_VV then\n-         Formal_Extensions := True;\n-      end if;\n-\n-      if Debug_Flag_Dot_FF then\n-         Alfa_Mode := True;\n-\n-         --  Set strict standard interpretation of compiler permissions\n-\n-         if Debug_Flag_Dot_DD then\n-            Strict_Alfa_Mode := True;\n-         end if;\n-\n-         --  Turn off inlining, which would confuse formal verification output\n-         --  and gain nothing.\n-\n-         Front_End_Inlining := False;\n-         Inline_Active      := False;\n-\n-         --  Disable front-end optimizations, to keep the tree as close to the\n-         --  source code as possible, and also to avoid inconsistencies between\n-         --  trees when using different optimization switches.\n-\n-         Optimization_Level := 0;\n-\n-         --  Enable some restrictions systematically to simplify the generated\n-         --  code (and ease analysis). Note that restriction checks are also\n-         --  disabled in Alfa mode, see Restrict.Check_Restriction, and user\n-         --  specified Restrictions pragmas are ignored, see\n-         --  Sem_Prag.Process_Restrictions_Or_Restriction_Warnings.\n-\n-         Restrict.Restrictions.Set (No_Initialize_Scalars) := True;\n-\n-         --  Note: at this point we used to suppress various checks, but that\n-         --  is not what we want. We need the semantic processing for these\n-         --  checks (which will set flags like Do_Overflow_Check, showing the\n-         --  points at which potential checks are required semantically). We\n-         --  don't want the expansion associated with these checks, but that\n-         --  happens anyway because this expansion is simply not done in the\n-         --  Alfa version of the expander.\n-\n-         --  Kill debug of generated code, since it messes up sloc values\n-\n-         Debug_Generated_Code := False;\n-\n-         --  Turn cross-referencing on in case it was disabled (e.g. by -gnatD)\n-         --  as it is needed for computing effects of subprograms in the formal\n-         --  verification backend.\n-\n-         Xref_Active := True;\n-\n-         --  Polling mode forced off, since it generates confusing junk\n-\n-         Polling_Required := False;\n-\n-         --  Set operating mode to Generate_Code, but full front-end expansion\n-         --  is not desirable in Alfa mode, so a light expansion is performed\n-         --  instead.\n-\n-         Operating_Mode := Generate_Code;\n-\n-         --  Skip call to gigi\n-\n-         Debug_Flag_HH := True;\n-\n-         --  Disable Expressions_With_Actions nodes\n-\n-         --  The gnat2why backend does not deal with Expressions_With_Actions\n-         --  in all places (in particular assertions). It is difficult to\n-         --  determine in the frontend which cases are allowed, so we disable\n-         --  Expressions_With_Actions entirely. Even in the cases where\n-         --  gnat2why deals with Expressions_With_Actions, it is easier to\n-         --  deal with the original constructs (quantified, conditional and\n-         --  case expressions) instead of the rewritten ones.\n-\n-         Use_Expression_With_Actions := False;\n-\n-         --  Enable assertions and debug pragmas, since they give valuable\n-         --  extra information for formal verification.\n-\n-         Assertions_Enabled    := True;\n-         Debug_Pragmas_Enabled := True;\n-\n-         --  Turn off style check options since we are not interested in any\n-         --  front-end warnings when we are getting Alfa output.\n-\n-         Reset_Style_Check_Options;\n-\n-         --  Suppress compiler warnings, since what we are interested in here\n-         --  is what formal verification can find out.\n-\n-         Warning_Mode := Suppress;\n-\n-         --  Suppress the generation of name tables for enumerations, which are\n-         --  not needed for formal verification, and fall outside the Alfa\n-         --  subset (use of pointers).\n-\n-         Global_Discard_Names := True;\n-\n-         --  Suppress the expansion of tagged types and dispatching calls,\n-         --  which lead to the generation of non-Alfa code (use of pointers),\n-         --  which is more complex to formally verify than the original source.\n-\n-         Tagged_Type_Expansion := False;\n-      end if;\n-\n       --  If the inlining level has not been set by the user, compute it from\n       --  the optimization level: 1 at -O1/-O2 (and -Os), 2 at -O3 and above.\n "}, {"sha": "c5434fb4d21783c674f58f852dac71b2eaab4659", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 60, "deletions": 102, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceee0bde3650a71c8acd8e24f858bdd21846c13e/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceee0bde3650a71c8acd8e24f858bdd21846c13e/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=ceee0bde3650a71c8acd8e24f858bdd21846c13e", "patch": "@@ -4362,11 +4362,11 @@ If no digits follow the @option{-gnato}, then it is equivalent to\n causing all intermediate overflows to be handled in strict mode.\n \n This switch also causes arithmetic overflow checking to be performed\n-(as though pragma @code{Unsuppress (Overflow_Check)} has been specified.\n+(as though pragma @code{Unsuppress (Overflow_Mode)} has been specified.\n \n The default if no option @option{-gnato} is given is that overflow handling\n is in @code{STRICT} mode (computations done using the base type), and that\n-overflow is not enabled.\n+overflow checking is suppressed.\n \n Note that division by zero is a separate check that is not\n controlled by this switch (division by zero checking is on by default).\n@@ -6931,94 +6931,47 @@ This switch cancels the effect of a previous @option{gnatp} switch.\n @item -gnato??\n @cindex @option{-gnato??} (@command{gcc})\n @cindex Overflow checks\n+@cindex Overflow mode\n @cindex Check, overflow\n-In @code{CHECKED} and @code{MINIMIZED} modes (@option{-gnato1} and\n-@option{-gnato2}), it enables overflow checking for integer operations.\n-In @code{ELIMINATED} mode (@option{-gnato3}), it enables arbitrary\n-precision arithmetic for integer operations. In all these modes, this\n-causes @value{EDITION} to generate slower and larger executable programs\n-by adding code to either check for overflow (resulting in raising\n-@code{Constraint_Error} as required by standard Ada semantics) or avoid\n-overflows. In mode @code{CHECKED}, overflow checks correspond to\n-situations in which the true value of the result of an operation may be\n-outside the base range of the result type. In mode @code{MINIMIZED},\n-overflow checks correspond to situations in which the true value of the\n-result of an operation may be outside the largest available machine\n-integer type (@code{Long_Long_Integer}). The following example shows the\n-distinction:\n+This switch controls the mode used for computing intermediate\n+arithmetic integer operations, and also enables overflow checking.\n+For a full description of overflow mode and checking control, see\n+the ``Overflow Check Handling in GNAT'' appendix in this\n+User's Guide.\n \n-@smallexample @c ada\n-procedure Add_And_Subtract (X : in out Integer; Y, Z : in Integer) is\n-begin\n-   X := X + Y - Z;\n-end Add_And_Subtract;\n-\n-X1 : Integer := Integer'Last;\n-X2 : Integer range 1 .. 5 := 5;\n-\n-Add_And_Subtract (X1, 1, 0);  --  first addition and subtraction\n-Add_And_Subtract (X1, 1, 1);  --  second addition and subtraction\n-Add_And_Subtract (X2, 1, 0);  --  third addition and subtraction\n-Add_And_Subtract (X2, 1, 1);  --  fourth addition and subtraction\n-@end smallexample\n-\n-@noindent\n-Note that if explicit values are assigned at compile time, the compiler\n-may be able to detect overflow at compile time, in which case no actual\n-run-time checking code is required, and @code{Constraint_Error} will be\n-raised unconditionally, with or without @option{-gnato}.\n-\n-The first addition results in a value that is outside the base range of\n-@code{Integer}. In mode @code{CHECKED}, this raises\n-@code{Constraint_Error} at run time. In mode @code{MINIMIZED}, the\n-addition and subtraction are performed in type @code{Long_Long_Integer},\n-which is 64 bits for most machines. The compiler detects that no\n-overflow check is needed on these operations. The program still raises\n-@code{Constraint_Error} at run time because the resulting value is too\n-large to be assigned to @code{X}. The assignment results in a violation\n-of the explicit range constraint; such range checks are performed by\n-default, and are unaffected by @option{-gnato??}.  In mode\n-@code{ELIMINATED}, the compiler uses type @code{Long_Long_Integer} for\n-intermediate computations, as this type is sufficient here to avoid all\n-overflows. When it is not sufficient, the compiler uses instead a\n-library for multiple-precision arithmetic, which may cause a significant\n-run-time overhead. The program still raises @code{Constraint_Error} at\n-run time when assigning to @code{X}.\n-\n-The second addition results in a value that is outside the base range of\n-@code{Integer}. In mode @code{CHECKED}, this raises\n-@code{Constraint_Error} at run time, like in the previous case. In mode\n-@code{MINIMIZED}, the addition and subtraction are performed in type\n-@code{Long_Long_Integer}, resulting in a final value that fits in an\n-@code{Integer}. Thus, no @code{Constraint_Error} is raised. In mode\n-@code{ELIMINATED}, the compiler generates the same code as in mode\n-@code{MINIMIZED}, which avoids all overflows.\n-\n-The third addition and subtraction result in an intermediate value and a\n-result well in the base range of @code{Integer}, so no\n-@code{Constraint_Error} exception is raised at run time in any\n-mode. However, the copy to @code{X2} when returning from the call to\n-@code{Add_And_Subtract} fails the range check for the type of\n-@code{X2}. Hence, a @code{Constraint_Error} exception is raised at run\n-time in all modes.\n-\n-The fourth addition and subtraction result in an intermediate value and\n-a result well in the base range of @code{Integer}, and in a final value\n-that fits in the type of @code{X2}. Hence, no exception is raised at run\n-time in any mode.\n-\n-Basically the rule is that in the default mode (@option{-gnato??} not\n-used), the generated code assures that all integer variables stay within\n-their declared ranges, or within the base range if there is no declared\n-range. This prevents any serious problems like indexes out of range for\n-array operations.\n-\n-What is not checked in default mode is an overflow that results in an\n-in-range, but incorrect value. In the above example, the first\n-assignment to @code{X1} gives a result that is within the range of the\n-target variable, but the result is wrong in the sense that it is too\n-large to be represented correctly. Typically the assignment to @code{X1}\n-will result in wrap around to the largest negative number.\n+Overflow checks are always enabled by this switch. The argument\n+controls the mode, using the codes\n+\n+@itemize\n+@item 1 = STRICT\n+In STRICT mode, intermediate operations are always done using the\n+base type, and overflow checking ensures that the result is within\n+the base type range.\n+\n+@item 2 = MINIMIZED\n+In MINIMIZED mode, overflows in intermediate operations are avoided\n+where possible by using a larger integer type for the computation\n+(typically @code{Long_Long_Integer). Overflow checking ensures that\n+the result fits in this larger integer type.\n+\n+@item 3 = ELIMINATED\n+In ELIMINATED mode, overflows in intermediate operations are avoided\n+by using multi-precision arithmetic. In this case, overflow checking\n+has no effect on intermediate operations (since overflow is impossible).\n+@end itemize\n+\n+If two digits are present after @option{-gnato} then the first digit\n+sets the mode for expressions outside assertions, and the second digit\n+sets the mode for expressions within assertions. Here assertions is used\n+in the technical sense (which includes for example precondition and\n+postcondition expressions).\n+\n+If one digit is present, the corresponding mode is applicable to both\n+expressions within and outside assertion expressions.\n+\n+If no digits are present, the default is to enable overflow checks\n+and set STRICT mode for both kinds of expressions. This is compatible\n+with the use of @option{-gnato} in previous versions of GNAT.\n \n @findex Machine_Overflows\n Note that the @option{-gnato??} switch does not affect the code generated\n@@ -25718,26 +25671,30 @@ and for expressions appearing outside assertions.\n The three modes are:\n \n @itemize @bullet\n-@item   @i{All intermediate overflows checked} (@code{STRICT})\n+@item   @i{Use base type for intermediate operations} (@code{STRICT})\n \n      In this mode, all intermediate results for predefined arithmetic\n-     operators must be in range of the base type. If this is not the\n+     operators are computed using the base type, and the result must\n+     be in range of the base type. If this is not the\n      case then either an exception is raised (if overflow checks are\n      enabled) or the execution is erroneous (if overflow checks are suppressed).\n      This is the normal default mode.\n \n @item   @i{Most intermediate overflows avoided} (@code{MINIMIZED})\n \n      In this mode, the compiler attempts to avoid intermediate overflows by\n-     using @code{Long_Long_Integer} as the type in which arithmetic is\n-     performed for predefined arithmetic operators. This is slightly more\n+     using a larger integer type, typically @code{Long_Long_Integer},\n+     as the type in which arithmetic is\n+     performed for predefined arithmetic operators. This may be slightly more\n      expensive at\n      run time (compared to suppressing intermediate overflow checks), though\n      the cost is negligible on modern 64-bit machines. For the examples given\n      earlier, no intermediate overflows would have resulted in exceptions,\n      since the intermediate results are all in the range of\n      @code{Long_Long_Integer} (typically 64-bits on nearly all implementations\n-     of GNAT).\n+     of GNAT). In addition, if checks are enabled, this reduces the number of\n+     checks that must be made, so this choice may actually result in an\n+     improvement in space and time behavior.\n \n      However, there are cases where @code{Long_Long_Integer} is not large\n      enough, consider the following example:\n@@ -25813,12 +25770,12 @@ The three modes are:\n \n @noindent\n The desired mode of for handling intermediate overflow can be specified using\n-either the @code{Overflow_Checks} pragma or an equivalent compiler switch.\n+either the @code{Overflow_Mode} pragma or an equivalent compiler switch.\n The pragma has the form\n-@cindex pragma @code{Overflow_Checks}\n+@cindex pragma @code{Overflow_Mode}\n \n @smallexample @c ada\n-    pragma Overflow_Checks ([General =>] MODE [, [Assertions =>] MODE]);\n+    pragma Overflow_Mode ([General =>] MODE [, [Assertions =>] MODE]);\n @end smallexample\n \n @noindent\n@@ -25841,7 +25798,7 @@ are present, then @code{General} applies to expressions outside assertions,\n and @code{Assertions} applies to expressions within assertions. For example:\n \n @smallexample @c ada\n-   pragma Overflow_Checks\n+   pragma Overflow_Mode\n      (General => Minimized, Assertions => Eliminated);\n @end smallexample\n \n@@ -25856,13 +25813,13 @@ the extra overhead for assertion expressions to ensure that\n the behavior at run time matches the expected mathematical\n behavior.\n \n-The @code{Overflow_Checks} pragma has the same scoping and placement\n+The @code{Overflow_Mode} pragma has the same scoping and placement\n rules as pragma @code{Suppress}, so it can occur either as a\n configuration pragma, specifying a default for the whole\n program, or in a declarative scope, where it applies to the\n remaining declarations and statements in that scope.\n \n-Note that pragma @code{Overflow_Checks} does not affect whether\n+Note that pragma @code{Overflow_Mode} does not affect whether\n overflow checks are enabled or suppressed. It only controls the\n method used to compute intermediate values. To control whether\n overflow checking is enabled or suppressed, use pragma @code{Suppress}\n@@ -25878,7 +25835,7 @@ Here `@code{?}' is one of the digits `@code{1}' through `@code{3}':\n \n @itemize @bullet\n @item   @code{1}:\n-all intermediate overflows checked (@code{CHECKED})\n+use base type for intermediate operations (@code{STRICT})\n @item   @code{2}:\n minimize intermediate overflows (@code{MINIMIZED})\n @item   @code{3}:\n@@ -25893,12 +25850,13 @@ of the example pragma above would be @option{-gnato23}.\n \n If no digits follow the @option{-gnato}, then it is equivalent to\n @option{-gnato11},\n-causing all intermediate overflows to be checked.\n+causing all intermediate operations to be computed using the base\n+type (@code{STRICT} mode).\n \n In addition to setting the mode used for computation of intermediate\n results, the @code{-gnato} switch also enables overflow checking (which\n is suppressed by default). It thus combines the effect of using\n-a pragma @code{Overflow_Checks} and pragma @code{Unsuppress}.\n+a pragma @code{Overflow_Mode} and pragma @code{Unsuppress}.\n \n \n @c -------------------------"}, {"sha": "19d749931b4b6d1732998ed659d590970f5f70c5", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceee0bde3650a71c8acd8e24f858bdd21846c13e/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceee0bde3650a71c8acd8e24f858bdd21846c13e/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=ceee0bde3650a71c8acd8e24f858bdd21846c13e", "patch": "@@ -5716,6 +5716,17 @@ package body Sem_Ch10 is\n             raise Program_Error;\n       end case;\n \n+      --  The limited unit is not analyzed but the with clause must be\n+      --  minimally decorated so that checks on unused with clause also work\n+      --  with limited with clauses.\n+\n+      if Is_Entity_Name (Name (N)) then\n+         Set_Entity (Name (N), P);\n+\n+      elsif Nkind (Name (N)) = N_Selected_Component then\n+         Set_Entity (Selector_Name (Name (N)), P);\n+      end if;\n+\n       --  Check if the chain is already built\n \n       Spec := Specification (Unit (Library_Unit (N)));"}, {"sha": "ae175e301668e8cd750e5f0927a1a69784a9d26e", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceee0bde3650a71c8acd8e24f858bdd21846c13e/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceee0bde3650a71c8acd8e24f858bdd21846c13e/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=ceee0bde3650a71c8acd8e24f858bdd21846c13e", "patch": "@@ -6512,23 +6512,27 @@ package body Sem_Ch3 is\n       then\n          Append_Elmt (Derived_Type, Private_Dependents (Parent_Type));\n \n+         --  Check for unusual case where a type completed by a private\n+         --  derivation occurs within a package nested in a child unit, and\n+         --  the parent is declared in an ancestor.\n+\n          if Is_Child_Unit (Scope (Current_Scope))\n            and then Is_Completion\n            and then In_Private_Part (Current_Scope)\n            and then Scope (Parent_Type) /= Current_Scope\n+\n+           --  Note that if the parent has a completion in the private part,\n+           --  (which is itself a derivation from some other private type)\n+           --  it is that completion that is visible, there is no full view\n+           --  available, and no special processing is needed.\n+\n            and then Present (Full_View (Parent_Type))\n          then\n-            --  This is the unusual case where a type completed by a private\n-            --  derivation occurs within a package nested in a child unit, and\n-            --  the parent is declared in an ancestor. In this case, the full\n-            --  view of the parent type will become visible in the body of\n-            --  the enclosing child, and only then will the current type be\n-            --  possibly non-private. We build a underlying full view that\n-            --  will be installed when the enclosing child body is compiled.\n-            --  Note that if the parent has a completion in the private part,\n-            --  (which is itself a derivation from some other private type)\n-            --  it is that completion that is visible, there is no full view\n-            --  view available, and no special processing is needed.\n+            --  In this case, the full view of the parent type will become\n+            --  visible in the body of the enclosing child, and only then will\n+            --  the current type be possibly non-private. We build an\n+            --  underlying full view that will be installed when the enclosing\n+            --  child body is compiled.\n \n             Full_Der :=\n               Make_Defining_Identifier"}, {"sha": "e44a7ef80cd6a039cad086e2d5224d8ee38767a4", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceee0bde3650a71c8acd8e24f858bdd21846c13e/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceee0bde3650a71c8acd8e24f858bdd21846c13e/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=ceee0bde3650a71c8acd8e24f858bdd21846c13e", "patch": "@@ -7336,29 +7336,37 @@ package Sinfo is\n \n       --  SCIL nodes are special nodes added to the tree when the CodePeer\n       --  mode is active. They help the CodePeer backend to locate nodes that\n-      --  require special processing.\n-\n-      --  Major documentation on the general design of the SCIL interface, and\n-      --  in particular detailed description of these nodes is missing and is\n-      --  to be supplied in the future, when the design has finalized ???\n-\n-      --  Meanwhile these nodes should be considered in experimental form, and\n-      --  should be ignored by all code generating back ends. ???\n+      --  require special processing. They are only generated if SCIL\n+      --  generation is enabled. A standard tree-walk will not encounter\n+      --  these nodes even if they are present; these nodes are only\n+      --  accessible via the function SCIL_LL.Get_SCIL_Node.\n \n       --  N_SCIL_Dispatch_Table_Tag_Init\n       --  Sloc references a node for a tag initialization\n       --  SCIL_Entity (Node4-Sem)\n+      --\n+      --  An N_SCIL_Dispatch_Table_Tag_Init node may be associated (via\n+      --  Get_SCIL_Node) with the N_Object_Declaration node corresponding to\n+      --  the declaration of the dispatch table for a tagged type.\n \n       --  N_SCIL_Dispatching_Call\n       --  Sloc references the node of a dispatching call\n       --  SCIL_Target_Prim (Node2-Sem)\n       --  SCIL_Entity (Node4-Sem)\n       --  SCIL_Controlling_Tag (Node5-Sem)\n+      --\n+      --  An N_Scil_Dispatching call node may be associated (via Get_SCIL_Node)\n+      --  with the N_Procedure_Call or N_Function_Call node (or a rewriting\n+      --  thereof) corresponding to a dispatching call.\n \n       --  N_SCIL_Membership_Test\n       --  Sloc references the node of a membership test\n       --  SCIL_Tag_Value (Node5-Sem)\n       --  SCIL_Entity (Node4-Sem)\n+      --\n+      --  An N_Scil_Membership_Test node may be associated (via Get_SCIL_Node)\n+      --  with the N_In node (or a rewriting thereof) corresponding to a\n+      --  classwide membership test.\n \n       ---------------------\n       -- Subprogram_Info --"}]}