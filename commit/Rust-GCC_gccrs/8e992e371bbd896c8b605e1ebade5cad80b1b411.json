{"sha": "8e992e371bbd896c8b605e1ebade5cad80b1b411", "node_id": "C_kwDOANBUbNoAKDhlOTkyZTM3MWJiZDg5NmM4YjYwNWUxZWJhZGU1Y2FkODBiMWI0MTE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-11-03T18:00:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-03T18:00:24Z"}, "message": "Merge #785\n\n785: rust: track inline module scopes for module file resolution r=CohenArthur a=mathstuf\n\nThe set of inline modules is required to find the expected location of a\r\nmodule file. Track this information with an RAII object\r\n(`InlineModuleStackScope`) and pass it down to any out-of-line modules\r\nso that, when requested, the set of inline modules can be added to the\r\nsearch path.\r\n\r\nSigned-off-by: Ben Boeckel <mathstuf@gmail.com>\r\n\r\n---\r\nNote that this does not include a test case because I have no idea how to mark up this for all the warnings that come out (#676):\r\n\r\n```diff\r\ndiff --git a/gcc/testsuite/rust/compile/missing_middle/sub/mod.rs b/gcc/testsuite/rust/compile/missing_middle/sub/mod.rs\r\nnew file mode 100644\r\nindex 00000000000..f099d61e04a\r\n--- /dev/null\r\n+++ b/gcc/testsuite/rust/compile/missing_middle/sub/mod.rs\r\n`@@` -0,0 +1,3 `@@`\r\n+pub fn f() -> u32 {\r\n+    1\r\n+}\r\ndiff --git a/gcc/testsuite/rust/compile/mod_missing_middle.rs b/gcc/testsuite/rust/compile/mod_missing_middle.rs\r\nnew file mode 100644\r\nindex 00000000000..d9cdf0a54f1\r\n--- /dev/null\r\n+++ b/gcc/testsuite/rust/compile/mod_missing_middle.rs\r\n`@@` -0,0 +1,11 `@@`\r\n+pub mod missing_middle {\r\n+    pub mod sub;\r\n+}\r\n```\r\n\r\nObserved warnings:\r\n\r\n```\r\n/home/boeckb/code/depot/group-compilers/gcc/src-gccrs/gcc/testsuite/rust/compile/missing_middle/sub/mod.rs:1:5: warning: unused name 'f'\r\n/home/boeckb/code/depot/group-compilers/gcc/src-gccrs/gcc/testsuite/rust/compile/mod_missing_middle.rs:2:9: warning: unused name 'sub'\r\n/home/boeckb/code/depot/group-compilers/gcc/src-gccrs/gcc/testsuite/rust/compile/missing_middle/sub/mod.rs:1:5: warning: unused name 'sub::f'\r\n/home/boeckb/code/depot/group-compilers/gcc/src-gccrs/gcc/testsuite/rust/compile/mod_missing_middle.rs:2:9: warning: unused name 'missing_middle::sub'\r\n/home/boeckb/code/depot/group-compilers/gcc/src-gccrs/gcc/testsuite/rust/compile/mod_missing_middle.rs:1:5: warning: unused name 'missing_middle'\r\n/home/boeckb/code/depot/group-compilers/gcc/src-gccrs/gcc/testsuite/rust/compile/missing_middle/sub/mod.rs:1:5: warning: unused name 'missing_middle::sub::f'\r\n```\r\n\r\nFixes: #645 \r\n\r\nHere is a checklist to help you with your PR.\r\n\r\n- \\[x] GCC development requires copyright assignment or the Developer's Certificate of Origin sign-off, see https://gcc.gnu.org/contribute.html or https://gcc.gnu.org/dco.html\r\n- \\[x] Read contributing guidlines\r\n- \\[x] `make check-rust` passes locally\r\n- \\[x] Run `clang-format` (leaving to CI)\r\n- \\[x] Added any relevant test cases to `gcc/testsuite/rust/` (see above)\n\nCo-authored-by: Ben Boeckel <mathstuf@gmail.com>", "tree": {"sha": "329a3e626fb05effe7383efb8df3bdf671f7e35c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/329a3e626fb05effe7383efb8df3bdf671f7e35c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e992e371bbd896c8b605e1ebade5cad80b1b411", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhgs44CRBK7hj4Ov3rIwAApUEIAH+NmN8lAPNZYMnL/cOnsHIo\nXMoAvhKvrx14ibxG2gS5cQeolg8zEIKjjftwOEcC507KnaPE9AxPauaPGT8C+k+o\n+dlpMADE+qhvXDFmDsJ/tJ4idyTPs0zYuCqvEove7RJSDbPtInHwHuEaotKklSs+\nAqAQZgmcm9CZzyJKJ86b4hJp0CbEOh6vlXnrb4vJNeP8n7xkCF7gFzikyDa2j4fc\nGTVH8Phag9lrgL9QIHPHfnv69EsM0PPG2K559uLgJuw5gUp1j7m0xKTr1vuVMW0t\nBwYUz7BdG8C4JIvPaLsHcKcGUAFe8/7U3NsM6Owb7eiMOezxNcm6Cm7sZFC+Xn0=\n=3IX1\n-----END PGP SIGNATURE-----\n", "payload": "tree 329a3e626fb05effe7383efb8df3bdf671f7e35c\nparent 674221a3b27f5455fddc793ec9aaf30a4d858ecb\nparent 1657ee53d578d68c7d807312b1063ffd804d7ef9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1635962424 +0000\ncommitter GitHub <noreply@github.com> 1635962424 +0000\n\nMerge #785\n\n785: rust: track inline module scopes for module file resolution r=CohenArthur a=mathstuf\n\nThe set of inline modules is required to find the expected location of a\r\nmodule file. Track this information with an RAII object\r\n(`InlineModuleStackScope`) and pass it down to any out-of-line modules\r\nso that, when requested, the set of inline modules can be added to the\r\nsearch path.\r\n\r\nSigned-off-by: Ben Boeckel <mathstuf@gmail.com>\r\n\r\n---\r\nNote that this does not include a test case because I have no idea how to mark up this for all the warnings that come out (#676):\r\n\r\n```diff\r\ndiff --git a/gcc/testsuite/rust/compile/missing_middle/sub/mod.rs b/gcc/testsuite/rust/compile/missing_middle/sub/mod.rs\r\nnew file mode 100644\r\nindex 00000000000..f099d61e04a\r\n--- /dev/null\r\n+++ b/gcc/testsuite/rust/compile/missing_middle/sub/mod.rs\r\n`@@` -0,0 +1,3 `@@`\r\n+pub fn f() -> u32 {\r\n+    1\r\n+}\r\ndiff --git a/gcc/testsuite/rust/compile/mod_missing_middle.rs b/gcc/testsuite/rust/compile/mod_missing_middle.rs\r\nnew file mode 100644\r\nindex 00000000000..d9cdf0a54f1\r\n--- /dev/null\r\n+++ b/gcc/testsuite/rust/compile/mod_missing_middle.rs\r\n`@@` -0,0 +1,11 `@@`\r\n+pub mod missing_middle {\r\n+    pub mod sub;\r\n+}\r\n```\r\n\r\nObserved warnings:\r\n\r\n```\r\n/home/boeckb/code/depot/group-compilers/gcc/src-gccrs/gcc/testsuite/rust/compile/missing_middle/sub/mod.rs:1:5: warning: unused name 'f'\r\n/home/boeckb/code/depot/group-compilers/gcc/src-gccrs/gcc/testsuite/rust/compile/mod_missing_middle.rs:2:9: warning: unused name 'sub'\r\n/home/boeckb/code/depot/group-compilers/gcc/src-gccrs/gcc/testsuite/rust/compile/missing_middle/sub/mod.rs:1:5: warning: unused name 'sub::f'\r\n/home/boeckb/code/depot/group-compilers/gcc/src-gccrs/gcc/testsuite/rust/compile/mod_missing_middle.rs:2:9: warning: unused name 'missing_middle::sub'\r\n/home/boeckb/code/depot/group-compilers/gcc/src-gccrs/gcc/testsuite/rust/compile/mod_missing_middle.rs:1:5: warning: unused name 'missing_middle'\r\n/home/boeckb/code/depot/group-compilers/gcc/src-gccrs/gcc/testsuite/rust/compile/missing_middle/sub/mod.rs:1:5: warning: unused name 'missing_middle::sub::f'\r\n```\r\n\r\nFixes: #645 \r\n\r\nHere is a checklist to help you with your PR.\r\n\r\n- \\[x] GCC development requires copyright assignment or the Developer's Certificate of Origin sign-off, see https://gcc.gnu.org/contribute.html or https://gcc.gnu.org/dco.html\r\n- \\[x] Read contributing guidlines\r\n- \\[x] `make check-rust` passes locally\r\n- \\[x] Run `clang-format` (leaving to CI)\r\n- \\[x] Added any relevant test cases to `gcc/testsuite/rust/` (see above)\n\nCo-authored-by: Ben Boeckel <mathstuf@gmail.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e992e371bbd896c8b605e1ebade5cad80b1b411", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e992e371bbd896c8b605e1ebade5cad80b1b411", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e992e371bbd896c8b605e1ebade5cad80b1b411/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "674221a3b27f5455fddc793ec9aaf30a4d858ecb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/674221a3b27f5455fddc793ec9aaf30a4d858ecb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/674221a3b27f5455fddc793ec9aaf30a4d858ecb"}, {"sha": "1657ee53d578d68c7d807312b1063ffd804d7ef9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1657ee53d578d68c7d807312b1063ffd804d7ef9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1657ee53d578d68c7d807312b1063ffd804d7ef9"}], "stats": {"total": 227, "additions": 169, "deletions": 58}, "files": [{"sha": "87808536e07e40058302a7550fda6a295f774d12", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 18, "deletions": 53, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e992e371bbd896c8b605e1ebade5cad80b1b411/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e992e371bbd896c8b605e1ebade5cad80b1b411/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=8e992e371bbd896c8b605e1ebade5cad80b1b411", "patch": "@@ -3984,53 +3984,11 @@ file_exists (const std::string path)\n static std::string\n filename_from_path_attribute (std::vector<Attribute> &outer_attrs)\n {\n-  Attribute path_attr = Attribute::create_empty ();\n-  for (auto attr : outer_attrs)\n-    {\n-      if (attr.get_path ().as_string () == \"path\")\n-\t{\n-\t  path_attr = attr;\n-\t  break;\n-\t}\n-    }\n-\n-  // We didn't find a path attribute. This is not an error, there simply isn't\n-  // one present\n-  if (path_attr.is_empty ())\n-    return \"\";\n-\n-  // Here, we found a path attribute, but it has no associated string. This is\n-  // invalid\n-  if (!path_attr.has_attr_input ())\n-    {\n-      rust_error_at (\n-\tpath_attr.get_locus (),\n-\t// Split the format string so that -Wformat-diag does not complain...\n-\t\"path attributes must contain a filename: '%s'\", \"#[path = \\\"file\\\"]\");\n-      return \"\";\n-    }\n-\n-  auto path_value = path_attr.get_attr_input ().as_string ();\n-\n-  // At this point, the 'path' is of the following format: '= \"<file.rs>\"'\n-  // We need to remove the equal sign and only keep the actual filename.\n-  // In order to do this, we can simply go through the string until we find\n-  // a character that is not an equal sign or whitespace\n-  auto filename_begin = path_value.find_first_not_of (\"=\\t \");\n-\n-  auto path = path_value.substr (filename_begin);\n-\n-  // On windows, the path might mix '/' and '\\' separators. Replace the\n-  // UNIX-like separators by MSDOS separators to make sure the path will resolve\n-  // properly.\n-  //\n-  // Source: rustc compiler\n-  // (https://github.com/rust-lang/rust/blob/9863bf51a52b8e61bcad312f81b5193d53099f9f/compiler/rustc_expand/src/module.rs#L174)\n-#if defined(HAVE_DOS_BASED_FILE_SYSTEM)\n-  path.replace ('/', '\\\\');\n-#endif /* HAVE_DOS_BASED_FILE_SYSTEM */\n-\n-  return path;\n+  // An out-of-line module cannot have inner attributes. Additionally, the\n+  // default name is specified as `\"\"` so that the caller can detect the case\n+  // of \"no path given\" and use the default path logic (`name.rs` or\n+  // `name/mod.rs`).\n+  return extract_module_path ({}, outer_attrs, \"\");\n }\n \n void\n@@ -4057,6 +4015,13 @@ Module::process_file_path ()\n     current_directory_name\n       = including_fname.substr (0, dir_slash_pos) + file_separator;\n \n+  // Handle inline module declarations adding path components.\n+  for (auto const &name : module_scope)\n+    {\n+      current_directory_name.append (name);\n+      current_directory_name.append (file_separator);\n+    }\n+\n   auto path_string = filename_from_path_attribute (get_outer_attrs ());\n   if (!path_string.empty ())\n     {\n@@ -4070,12 +4035,13 @@ Module::process_file_path ()\n   // current file is titled `mod.rs`.\n \n   // First, we search for <directory>/<module_name>.rs\n-  bool file_mod_found\n-    = file_exists (current_directory_name + expected_file_path);\n+  std::string file_mod_path = current_directory_name + expected_file_path;\n+  bool file_mod_found = file_exists (file_mod_path);\n \n   // Then, search for <directory>/<module_name>/mod.rs\n-  current_directory_name += module_name + file_separator;\n-  bool dir_mod_found = file_exists (current_directory_name + expected_dir_path);\n+  std::string dir_mod_path\n+    = current_directory_name + module_name + file_separator + expected_dir_path;\n+  bool dir_mod_found = file_exists (dir_mod_path);\n \n   bool multiple_candidates_found = file_mod_found && dir_mod_found;\n   bool no_candidates_found = !file_mod_found && !dir_mod_found;\n@@ -4093,8 +4059,7 @@ Module::process_file_path ()\n   if (no_candidates_found || multiple_candidates_found)\n     return;\n \n-  module_file = file_mod_found ? expected_file_path\n-\t\t\t       : current_directory_name + expected_dir_path;\n+  module_file = std::move (file_mod_found ? file_mod_path : dir_mod_path);\n }\n \n void"}, {"sha": "f952dccf3b18d40863388c2f9b8e2404a339087f", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e992e371bbd896c8b605e1ebade5cad80b1b411/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e992e371bbd896c8b605e1ebade5cad80b1b411/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=8e992e371bbd896c8b605e1ebade5cad80b1b411", "patch": "@@ -991,6 +991,8 @@ class Module : public VisItem\n   std::vector<Attribute> inner_attrs;\n   // bool has_items;\n   std::vector<std::unique_ptr<Item>> items;\n+  // Names of including inline modules (immediate parent is last in the list)\n+  std::vector<std::string> module_scope;\n \n   // Filename the module refers to. Empty string on LOADED modules or if an\n   // error occured when dealing with UNLOADED modules\n@@ -1013,11 +1015,12 @@ class Module : public VisItem\n   // Unloaded module constructor\n   Module (Identifier module_name, Visibility visibility,\n \t  std::vector<Attribute> outer_attrs, Location locus,\n-\t  std::string outer_filename)\n+\t  std::string outer_filename, std::vector<std::string> module_scope)\n     : VisItem (std::move (visibility), std::move (outer_attrs)),\n       module_name (module_name), locus (locus), kind (ModuleKind::UNLOADED),\n       outer_filename (outer_filename), inner_attrs (std::vector<Attribute> ()),\n-      items (std::vector<std::unique_ptr<Item>> ())\n+      items (std::vector<std::unique_ptr<Item>> ()),\n+      module_scope (std::move (module_scope))\n   {}\n \n   // Loaded module constructor, with items\n@@ -1035,7 +1038,8 @@ class Module : public VisItem\n   // Copy constructor with vector clone\n   Module (Module const &other)\n     : VisItem (other), module_name (other.module_name), locus (other.locus),\n-      kind (other.kind), inner_attrs (other.inner_attrs)\n+      kind (other.kind), inner_attrs (other.inner_attrs),\n+      module_scope (other.module_scope)\n   {\n     // We need to check whether we are copying a loaded module or an unloaded\n     // one. In the second case, clear the `items` vector.\n@@ -1054,6 +1058,7 @@ class Module : public VisItem\n     locus = other.locus;\n     kind = other.kind;\n     inner_attrs = other.inner_attrs;\n+    module_scope = other.module_scope;\n \n     // Likewise, we need to clear the `items` vector in case the other module is\n     // unloaded"}, {"sha": "7f0db1b4d1f76714ee08e4d20f54d703c3297c53", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e992e371bbd896c8b605e1ebade5cad80b1b411/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e992e371bbd896c8b605e1ebade5cad80b1b411/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=8e992e371bbd896c8b605e1ebade5cad80b1b411", "patch": "@@ -2104,14 +2104,18 @@ Parser<ManagedTokenSource>::parse_module (AST::Visibility vis,\n       // Construct an external module\n       return std::unique_ptr<AST::Module> (\n \tnew AST::Module (std::move (name), std::move (vis),\n-\t\t\t std::move (outer_attrs), locus,\n-\t\t\t lexer.get_filename ()));\n+\t\t\t std::move (outer_attrs), locus, lexer.get_filename (),\n+\t\t\t inline_module_stack));\n       case LEFT_CURLY: {\n \tlexer.skip_token ();\n \n \t// parse inner attributes\n \tAST::AttrVec inner_attrs = parse_inner_attributes ();\n \n+\tstd::string module_path_name\n+\t  = extract_module_path (inner_attrs, outer_attrs, name);\n+\tInlineModuleStackScope scope (*this, std::move (module_path_name));\n+\n \t// parse items\n \tstd::vector<std::unique_ptr<AST::Item>> items;\n \tconst_TokenPtr tok = lexer.peek_token ();"}, {"sha": "e78de5164052de5e6dbc623b8df1470cd3fa2c2a", "filename": "gcc/rust/parse/rust-parse.cc", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e992e371bbd896c8b605e1ebade5cad80b1b411/gcc%2Frust%2Fparse%2Frust-parse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e992e371bbd896c8b605e1ebade5cad80b1b411/gcc%2Frust%2Fparse%2Frust-parse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse.cc?ref=8e992e371bbd896c8b605e1ebade5cad80b1b411", "patch": "@@ -46,4 +46,77 @@ along with GCC; see the file COPYING3.  If not see\n \n namespace Rust {\n \n+std::string\n+extract_module_path (const AST::AttrVec &inner_attrs,\n+\t\t     const AST::AttrVec &outer_attrs, const std::string &name)\n+{\n+  AST::Attribute path_attr = AST::Attribute::create_empty ();\n+  for (const auto &attr : inner_attrs)\n+    {\n+      if (attr.get_path ().as_string () == \"path\")\n+\t{\n+\t  path_attr = attr;\n+\t  break;\n+\t}\n+    }\n+\n+  // Here, we found a path attribute, but it has no associated string. This is\n+  // invalid\n+  if (!path_attr.is_empty () && !path_attr.has_attr_input ())\n+    {\n+      rust_error_at (\n+\tpath_attr.get_locus (),\n+\t// Split the format string so that -Wformat-diag does not complain...\n+\t\"path attributes must contain a filename: '%s'\", \"#![path = \\\"file\\\"]\");\n+      return name;\n+    }\n+\n+  for (const auto &attr : outer_attrs)\n+    {\n+      if (attr.get_path ().as_string () == \"path\")\n+\t{\n+\t  path_attr = attr;\n+\t  break;\n+\t}\n+    }\n+\n+  // We didn't find a path attribute. This is not an error, there simply isn't\n+  // one present\n+  if (path_attr.is_empty ())\n+    return name;\n+\n+  // Here, we found a path attribute, but it has no associated string. This is\n+  // invalid\n+  if (!path_attr.has_attr_input ())\n+    {\n+      rust_error_at (\n+\tpath_attr.get_locus (),\n+\t// Split the format string so that -Wformat-diag does not complain...\n+\t\"path attributes must contain a filename: '%s'\", \"#[path = \\\"file\\\"]\");\n+      return name;\n+    }\n+\n+  auto path_value = path_attr.get_attr_input ().as_string ();\n+\n+  // At this point, the 'path' is of the following format: '= \"<file.rs>\"'\n+  // We need to remove the equal sign and only keep the actual filename.\n+  // In order to do this, we can simply go through the string until we find\n+  // a character that is not an equal sign or whitespace\n+  auto filename_begin = path_value.find_first_not_of (\"=\\t \");\n+\n+  auto path = path_value.substr (filename_begin);\n+\n+  // On windows, the path might mix '/' and '\\' separators. Replace the\n+  // UNIX-like separators by MSDOS separators to make sure the path will resolve\n+  // properly.\n+  //\n+  // Source: rustc compiler\n+  // (https://github.com/rust-lang/rust/blob/9863bf51a52b8e61bcad312f81b5193d53099f9f/compiler/rustc_expand/src/module.rs#L174)\n+#if defined(HAVE_DOS_BASED_FILE_SYSTEM)\n+  path.replace ('/', '\\\\');\n+#endif /* HAVE_DOS_BASED_FILE_SYSTEM */\n+\n+  return path;\n+}\n+\n } // namespace Rust"}, {"sha": "acab7ff4a83350ebd0efdbe0af0aa9209acb3e31", "filename": "gcc/rust/parse/rust-parse.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e992e371bbd896c8b605e1ebade5cad80b1b411/gcc%2Frust%2Fparse%2Frust-parse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e992e371bbd896c8b605e1ebade5cad80b1b411/gcc%2Frust%2Fparse%2Frust-parse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse.h?ref=8e992e371bbd896c8b605e1ebade5cad80b1b411", "patch": "@@ -622,7 +622,26 @@ template <typename ManagedTokenSource> class Parser\n   ManagedTokenSource lexer;\n   // The error list.\n   std::vector<Error> error_table;\n+  // The names of inline modules while parsing.\n+  std::vector<std::string> inline_module_stack;\n+\n+  class InlineModuleStackScope\n+  {\n+  private:\n+    Parser &parser;\n+\n+  public:\n+    InlineModuleStackScope (Parser &parser, std::string name) : parser (parser)\n+    {\n+      parser.inline_module_stack.emplace_back (std::move (name));\n+    }\n+    ~InlineModuleStackScope () { parser.inline_module_stack.pop_back (); }\n+  };\n };\n+\n+std::string\n+extract_module_path (const AST::AttrVec &inner_attrs,\n+\t\t     const AST::AttrVec &outer_attrs, const std::string &name);\n } // namespace Rust\n \n // as now template, include implementations of all methods"}, {"sha": "5e5ad15457aa2887c7acda6f80993a55c2b956b7", "filename": "gcc/testsuite/rust/compile/missing_middle/both_path.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e992e371bbd896c8b605e1ebade5cad80b1b411/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Fboth_path.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e992e371bbd896c8b605e1ebade5cad80b1b411/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Fboth_path.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Fboth_path.rs?ref=8e992e371bbd896c8b605e1ebade5cad80b1b411", "patch": "@@ -0,0 +1,3 @@\n+pub fn f() -> u32 {\n+    5\n+}"}, {"sha": "e28288b0f995b2691ca3ccf16e5c1a8a530a9510", "filename": "gcc/testsuite/rust/compile/missing_middle/explicit.not.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e992e371bbd896c8b605e1ebade5cad80b1b411/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Fexplicit.not.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e992e371bbd896c8b605e1ebade5cad80b1b411/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Fexplicit.not.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Fexplicit.not.rs?ref=8e992e371bbd896c8b605e1ebade5cad80b1b411", "patch": "@@ -0,0 +1 @@\n+mod other;"}, {"sha": "daf4e3cc25aef6421227d1a4d7d64c00bc03ba85", "filename": "gcc/testsuite/rust/compile/missing_middle/inner_path.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e992e371bbd896c8b605e1ebade5cad80b1b411/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Finner_path.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e992e371bbd896c8b605e1ebade5cad80b1b411/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Finner_path.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Finner_path.rs?ref=8e992e371bbd896c8b605e1ebade5cad80b1b411", "patch": "@@ -0,0 +1,3 @@\n+pub fn f() -> u32 {\n+    4\n+}"}, {"sha": "0c0884ec968ef84c9fbfccb8e4e36be067ee17e7", "filename": "gcc/testsuite/rust/compile/missing_middle/other.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e992e371bbd896c8b605e1ebade5cad80b1b411/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Fother.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e992e371bbd896c8b605e1ebade5cad80b1b411/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Fother.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Fother.rs?ref=8e992e371bbd896c8b605e1ebade5cad80b1b411", "patch": "@@ -0,0 +1,3 @@\n+pub fn f() -> u32 {\n+    2\n+}"}, {"sha": "fbe5074191bd59bfbbc7ceba4c564620f6d4d9aa", "filename": "gcc/testsuite/rust/compile/missing_middle/outer_path.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e992e371bbd896c8b605e1ebade5cad80b1b411/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Fouter_path.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e992e371bbd896c8b605e1ebade5cad80b1b411/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Fouter_path.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Fouter_path.rs?ref=8e992e371bbd896c8b605e1ebade5cad80b1b411", "patch": "@@ -0,0 +1,3 @@\n+pub fn f() -> u32 {\n+    3\n+}"}, {"sha": "f099d61e04a29f4a6752a5d1fe2f1aaa3b7d36ac", "filename": "gcc/testsuite/rust/compile/missing_middle/sub/mod.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e992e371bbd896c8b605e1ebade5cad80b1b411/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Fsub%2Fmod.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e992e371bbd896c8b605e1ebade5cad80b1b411/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Fsub%2Fmod.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Fsub%2Fmod.rs?ref=8e992e371bbd896c8b605e1ebade5cad80b1b411", "patch": "@@ -0,0 +1,3 @@\n+pub fn f() -> u32 {\n+    1\n+}"}, {"sha": "79633407671134b42b33b3493b278ff1f8142dcf", "filename": "gcc/testsuite/rust/compile/mod_missing_middle.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e992e371bbd896c8b605e1ebade5cad80b1b411/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmod_missing_middle.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e992e371bbd896c8b605e1ebade5cad80b1b411/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmod_missing_middle.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmod_missing_middle.rs?ref=8e992e371bbd896c8b605e1ebade5cad80b1b411", "patch": "@@ -0,0 +1,29 @@\n+// { dg-additional-options \"-w\" }\n+\n+mod missing_middle {\n+    mod sub;\n+\n+    #[path = \"explicit.not.rs\"]\n+    mod explicit;\n+}\n+\n+#[path = \"missing_middle\"]\n+mod with_outer_path_attr {\n+    #[path = \"outer_path.rs\"]\n+    mod inner;\n+}\n+\n+mod with_inner_path_attr {\n+    #![path = \"missing_middle\"]\n+\n+    #[path = \"inner_path.rs\"]\n+    mod inner;\n+}\n+\n+#[path = \"missing_middle\"]\n+mod with_both_path_attr {\n+    #![path = \"this_is_ignored\"]\n+\n+    #[path = \"both_path.rs\"]\n+    mod inner;\n+}"}]}