{"sha": "2ec974d90fb0920d58ed5f987e738f7d069eb3f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVjOTc0ZDkwZmIwOTIwZDU4ZWQ1Zjk4N2U3MzhmN2QwNjllYjNmNA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2013-08-29T00:49:36Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-08-29T00:49:36Z"}, "message": "go-gcc.cc (Gcc_backend::immutable_struct): Set TREE_PUBLIC if the struct is not hidden.\n\n\t* go-gcc.cc (Gcc_backend::immutable_struct): Set TREE_PUBLIC if\n\tthe struct is not hidden.\n\t(Gcc_backend::immutable_struct_set_init): Don't set TREE_PUBLIC.\n\nFrom-SVN: r202065", "tree": {"sha": "9e5b80ee7e73d7be2c52c7410fe6ac10e012dcf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e5b80ee7e73d7be2c52c7410fe6ac10e012dcf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ec974d90fb0920d58ed5f987e738f7d069eb3f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ec974d90fb0920d58ed5f987e738f7d069eb3f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ec974d90fb0920d58ed5f987e738f7d069eb3f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ec974d90fb0920d58ed5f987e738f7d069eb3f4/comments", "author": null, "committer": null, "parents": [{"sha": "652974f2aa68b6fee12dfbc1f89abbe6a225e455", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/652974f2aa68b6fee12dfbc1f89abbe6a225e455", "html_url": "https://github.com/Rust-GCC/gccrs/commit/652974f2aa68b6fee12dfbc1f89abbe6a225e455"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "c730ecaa183d6652e814376bf2ef9bf8db529561", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec974d90fb0920d58ed5f987e738f7d069eb3f4/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec974d90fb0920d58ed5f987e738f7d069eb3f4/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=2ec974d90fb0920d58ed5f987e738f7d069eb3f4", "patch": "@@ -1,3 +1,9 @@\n+2013-08-28  Ian Lance Taylor  <iant@google.com>\n+\n+\t* go-gcc.cc (Gcc_backend::immutable_struct): Set TREE_PUBLIC if\n+\tthe struct is not hidden.\n+\t(Gcc_backend::immutable_struct_set_init): Don't set TREE_PUBLIC.\n+\n 2013-08-06  Ian Lance Taylor  <iant@google.com>\n \n \t* go-gcc.cc (Gcc_backend::immutable_struct_set_init): Use"}, {"sha": "025bb2bdca068754cc9a06c8515d85d18afa1860", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec974d90fb0920d58ed5f987e738f7d069eb3f4/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec974d90fb0920d58ed5f987e738f7d069eb3f4/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=2ec974d90fb0920d58ed5f987e738f7d069eb3f4", "patch": "@@ -1475,8 +1475,8 @@ Gcc_backend::temporary_variable(Bfunction* function, Bblock* bblock,\n // Create a named immutable initialized data structure.\n \n Bvariable*\n-Gcc_backend::immutable_struct(const std::string& name, bool, bool,\n-\t\t\t      Btype* btype, Location location)\n+Gcc_backend::immutable_struct(const std::string& name, bool is_hidden,\n+\t\t\t      bool, Btype* btype, Location location)\n {\n   tree type_tree = btype->get_tree();\n   if (type_tree == error_mark_node)\n@@ -1490,6 +1490,8 @@ Gcc_backend::immutable_struct(const std::string& name, bool, bool,\n   TREE_CONSTANT(decl) = 1;\n   TREE_USED(decl) = 1;\n   DECL_ARTIFICIAL(decl) = 1;\n+  if (!is_hidden)\n+    TREE_PUBLIC(decl) = 1;\n \n   // We don't call rest_of_decl_compilation until we have the\n   // initializer.\n@@ -1503,8 +1505,7 @@ Gcc_backend::immutable_struct(const std::string& name, bool, bool,\n \n void\n Gcc_backend::immutable_struct_set_init(Bvariable* var, const std::string&,\n-\t\t\t\t       bool is_hidden, bool is_common, Btype*,\n-\t\t\t\t       Location,\n+\t\t\t\t       bool, bool is_common, Btype*, Location,\n \t\t\t\t       Bexpression* initializer)\n {\n   tree decl = var->get_tree();\n@@ -1515,12 +1516,7 @@ Gcc_backend::immutable_struct_set_init(Bvariable* var, const std::string&,\n   DECL_INITIAL(decl) = init_tree;\n \n   // We can't call make_decl_one_only until we set DECL_INITIAL.\n-  if (!is_common)\n-    {\n-      if (!is_hidden)\n-\tTREE_PUBLIC(decl) = 1;\n-    }\n-  else\n+  if (is_common)\n     make_decl_one_only(decl, DECL_ASSEMBLER_NAME(decl));\n \n   // These variables are often unneeded in the final program, so put"}]}