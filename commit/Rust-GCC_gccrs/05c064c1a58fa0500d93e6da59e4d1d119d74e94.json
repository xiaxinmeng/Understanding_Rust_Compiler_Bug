{"sha": "05c064c1a58fa0500d93e6da59e4d1d119d74e94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVjMDY0YzFhNThmYTA1MDBkOTNlNmRhNTllNGQxZDExOWQ3NGU5NA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-23T14:52:28Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-23T14:52:28Z"}, "message": "[multiple changes]\n\n2013-04-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch6.adb (Expand_N_Subprogram_Body): When compiling with\n\tinitialize_scalars, disable predicate checks on the generated\n\tassignment to an out scalar parameter.\n\n2013-04-23  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_ch4.adb (Analyze_Allocator): Remove error\n\tcheck for \"constrained in partial view\" constraints entirely.\n\n2013-04-23  Robert Dewar  <dewar@adacore.com>\n\n\t* einfo.ads, sem_prag.ads: Minor reformatting.\n\t* errout.ads: Comment update.\n\nFrom-SVN: r198194", "tree": {"sha": "c20bc4877e4a7f9f0f03664554f90471f9f253b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c20bc4877e4a7f9f0f03664554f90471f9f253b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05c064c1a58fa0500d93e6da59e4d1d119d74e94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05c064c1a58fa0500d93e6da59e4d1d119d74e94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05c064c1a58fa0500d93e6da59e4d1d119d74e94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05c064c1a58fa0500d93e6da59e4d1d119d74e94/comments", "author": null, "committer": null, "parents": [{"sha": "92e776e9971b9fc4e31fd0f23352809cb3680d3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92e776e9971b9fc4e31fd0f23352809cb3680d3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92e776e9971b9fc4e31fd0f23352809cb3680d3a"}], "stats": {"total": 69, "additions": 40, "deletions": 29}, "files": [{"sha": "83cb681671024fa72634c2609c0071bc625ce792", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05c064c1a58fa0500d93e6da59e4d1d119d74e94/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05c064c1a58fa0500d93e6da59e4d1d119d74e94/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=05c064c1a58fa0500d93e6da59e4d1d119d74e94", "patch": "@@ -1,3 +1,19 @@\n+2013-04-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_N_Subprogram_Body): When compiling with\n+\tinitialize_scalars, disable predicate checks on the generated\n+\tassignment to an out scalar parameter.\n+\n+2013-04-23  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Allocator): Remove error\n+\tcheck for \"constrained in partial view\" constraints entirely.\n+\n+2013-04-23  Robert Dewar  <dewar@adacore.com>\n+\n+\t* einfo.ads, sem_prag.ads: Minor reformatting.\n+\t* errout.ads: Comment update.\n+\n 2013-04-23  Yannick Moy  <moy@adacore.com>\n \n \t* exp_ch5.adb: Minor typo."}, {"sha": "8d7981b8f22815aba024f3567a7b0e4962e10826", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05c064c1a58fa0500d93e6da59e4d1d119d74e94/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05c064c1a58fa0500d93e6da59e4d1d119d74e94/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=05c064c1a58fa0500d93e6da59e4d1d119d74e94", "patch": "@@ -1429,7 +1429,7 @@ package Einfo is\n --       type has no discriminants and the full view has discriminants with\n --       defaults. In Ada 2005 heap-allocated objects of such types are not\n --       constrained, and can change their discriminants with full assignment.\n-\n+--\n --       Ada 2012 has an additional rule (3.3. (23/10.3)) concerning objects\n --       declared in a generic package body. Objects whose type is an untagged\n --       generic formal private type are considered to have a constrained"}, {"sha": "ef8977f2190fed3935e0d61d73739a143f2a0597", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05c064c1a58fa0500d93e6da59e4d1d119d74e94/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05c064c1a58fa0500d93e6da59e4d1d119d74e94/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=05c064c1a58fa0500d93e6da59e4d1d119d74e94", "patch": "@@ -280,24 +280,27 @@ package Errout is\n    --      which is being continued. It is allowable to put ? in continuation\n    --      messages, and the usual style is to include it, since it makes it\n    --      clear that the continuation is part of a warning message.\n+   --\n+   --      Note: this usage is obsolete, use ??, ?x? or ?X? instead to specify\n+   --      the string to be added when Warn_Doc_Switch is set to True. If this\n+   --      switch is True, then for simple ? messages it has no effect. This\n+   --      simple form is to ease transition and will be removed later.\n \n-   --    Insertion character ?? (two question marks)\n+   --    Insertion character ?? (Two question marks: default warning)\n    --      Like ?, but if the flag Warn_Doc_Switch is True, adds the string\n-   --      \"[enabled by default]\" at the end of the warning message. In the\n-   --      case of continuations, use this in each continuation message.\n+   --      \"[enabled by default]\" at the end of the warning message. For\n+   --      continuations, use this in each continuation message.\n \n    --    Insertion character ?x? (warning with switch)\n    --      Like ?, but if the flag Warn_Doc_Switch is True, adds the string\n    --      \"[-gnatwx]\" at the end of the warning message. x is a lower case\n-   --      letter. In the case of continuations, use this on each continuation\n-   --      message.\n+   --      letter. For continuations, use this on each continuation message.\n \n    --    Insertion character ?X? (warning with dot switch)\n    --      Like ?, but if the flag Warn_Doc_Switch is True, adds the string\n    --      \"[-gnatw.x]\" at the end of the warning message. X is an upper case\n-   --      letter corresponding to the lower case letter x in the message. In\n-   --      the case of continuations, use this on each continuation\n-   --      message.\n+   --      letter corresponding to the lower case letter x in the message.\n+   --      For continuations, use this on each continuation message.\n \n    --    Insertion character < (Less Than: conditional warning message)\n    --      The character < appearing anywhere in a message is used for a\n@@ -321,9 +324,8 @@ package Errout is\n    --    Insertion character ' (Quote: literal character)\n    --      Precedes a character which is placed literally into the message.\n    --      Used to insert characters into messages that are one of the\n-   --      insertion characters defined here. Also useful in inserting\n-   --      sequences of upper case letters which are not to be treated as\n-   --      keywords.\n+   --      insertion characters defined here. Also used when insertion\n+   --      upper case letter sequences not to be treated as keywords.\n \n    --    Insertion character \\ (Backslash: continuation message)\n    --      Indicates that the message is a continuation of a message"}, {"sha": "b0977797603f2b28cecc7c03c6f7f23654e82981", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05c064c1a58fa0500d93e6da59e4d1d119d74e94/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05c064c1a58fa0500d93e6da59e4d1d119d74e94/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=05c064c1a58fa0500d93e6da59e4d1d119d74e94", "patch": "@@ -6550,6 +6550,7 @@ package body Exp_Ch6 is\n       if Init_Or_Norm_Scalars and then Is_Subprogram (Spec_Id) then\n          declare\n             F : Entity_Id;\n+            A : Node_Id;\n \n          begin\n             --  Loop through formals\n@@ -6564,12 +6565,15 @@ package body Exp_Ch6 is\n                   --  Insert the initialization. We turn off validity checks\n                   --  for this assignment, since we do not want any check on\n                   --  the initial value itself (which may well be invalid).\n+                  --  Predicate checks are disabled as well (RM 6.4.1 (13/3))\n \n-                  Insert_Before_And_Analyze (First (L),\n-                    Make_Assignment_Statement (Loc,\n+                  A :=  Make_Assignment_Statement (Loc,\n                       Name       => New_Occurrence_Of (F, Loc),\n-                      Expression => Get_Simple_Init_Val (Etype (F), N)),\n-                    Suppress => Validity_Check);\n+                      Expression => Get_Simple_Init_Val (Etype (F), N));\n+                  Set_Suppress_Assignment_Checks (A);\n+\n+                  Insert_Before_And_Analyze (First (L),\n+                    A, Suppress => Validity_Check);\n                end if;\n \n                Next_Formal (F);"}, {"sha": "abdbf15891f6148e64ae072270cc334b1d84c887", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05c064c1a58fa0500d93e6da59e4d1d119d74e94/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05c064c1a58fa0500d93e6da59e4d1d119d74e94/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=05c064c1a58fa0500d93e6da59e4d1d119d74e94", "patch": "@@ -574,17 +574,6 @@ package body Sem_Ch4 is\n                   Rewrite (E, New_Copy_Tree (Subtype_Mark (E)));\n                   Analyze_Allocator (N);\n                   return;\n-\n-               --  Ada 2005, AI-363: if the designated type has a constrained\n-               --  partial view, it cannot receive a discriminant constraint,\n-               --  and the allocated object is unconstrained.\n-\n-               elsif Ada_Version >= Ada_2005\n-                 and then Has_Constrained_Partial_View (Base_Typ)\n-               then\n-                  Error_Msg_N\n-                    (\"constraint not allowed when type \" &\n-                      \"has a constrained partial view\", Constraint (E));\n                end if;\n \n                if Expander_Active then"}, {"sha": "7c370b8894150a3d41bc99491432d75200e159f8", "filename": "gcc/ada/sem_prag.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05c064c1a58fa0500d93e6da59e4d1d119d74e94/gcc%2Fada%2Fsem_prag.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05c064c1a58fa0500d93e6da59e4d1d119d74e94/gcc%2Fada%2Fsem_prag.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.ads?ref=05c064c1a58fa0500d93e6da59e4d1d119d74e94", "patch": "@@ -107,9 +107,9 @@ package Sem_Prag is\n    function Effective_Name (N : Node_Id) return Name_Id;\n    --  N is a pragma node or aspect specification node. This function returns\n    --  the name of the pragma or aspect, taking into account possible rewrites,\n-   --  and also cases where a pragma comes from an attribute (in such cases,\n+   --  and also cases where a pragma comes from an aspect (in such cases,\n    --  the name can be different from the pragma name, e.g. Pre generates\n-   --  a Precondition pragma. This also deals with the presence of 'Class\n+   --  a Precondition pragma). This also deals with the presence of 'Class\n    --  which results in one of the special names Name_uPre, Name_uPost,\n    --  Name_uInvariant, or Name_uType_Invariant being returned to represent\n    --  the corresponding aspects with x'Class names."}]}