{"sha": "75c299acc47b19fd6c445a6931798325a54e6fb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVjMjk5YWNjNDdiMTlmZDZjNDQ1YTY5MzE3OTgzMjVhNTRlNmZiNA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2020-02-27T19:41:39Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2020-02-27T19:41:39Z"}, "message": "Fix PR target/93932\n\n[gcc]\n2020-02-27  Michael Meissner  <meissner@linux.ibm.com>\n\n\tPR target/93932\n\t* config/rs6000/vsx.md (vsx_extract_<mode>_var, VSX_D iterator):\n\tSplit the insn into two parts.  This insn only does variable\n\textract from a register.\n\t(vsx_extract_<mode>_var_load, VSX_D iterator): New insn, do\n\tvariable extract from memory.\n\t(vsx_extract_v4sf_var): Split the insn into two parts.  This insn\n\tonly does variable extract from a register.\n\t(vsx_extract_v4sf_var_load): New insn, do variable extract from\n\tmemory.\n\t(vsx_extract_<mode>_var, VSX_EXTRACT_I iterator): Split the insn\n\tinto two parts.  This insn only does variable extract from a\n\tregister.\n\t(vsx_extract_<mode>_var_load, VSX_EXTRACT_I iterator): New insn,\n\tdo variable extract from memory.\n\n[gcc/testsuite]\n2020-02-27  Michael Meissner  <meissner@linux.ibm.com>\n\n\tPR target/93932\n\t* gcc.target/powerpc/fold-vec-extract-longlong.p8.c: Adjust\n\tinstruction counts.", "tree": {"sha": "71ec833f2107d725a207b6278d3e4373dabf95c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71ec833f2107d725a207b6278d3e4373dabf95c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75c299acc47b19fd6c445a6931798325a54e6fb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75c299acc47b19fd6c445a6931798325a54e6fb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75c299acc47b19fd6c445a6931798325a54e6fb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75c299acc47b19fd6c445a6931798325a54e6fb4/comments", "author": null, "committer": null, "parents": [{"sha": "9d2d283367a407c1ba9ecdb8590f9295828e25f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d2d283367a407c1ba9ecdb8590f9295828e25f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d2d283367a407c1ba9ecdb8590f9295828e25f8"}], "stats": {"total": 139, "additions": 107, "deletions": 32}, "files": [{"sha": "f5d4e6dd582697565e0622079fb18f68b1b873b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c299acc47b19fd6c445a6931798325a54e6fb4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c299acc47b19fd6c445a6931798325a54e6fb4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75c299acc47b19fd6c445a6931798325a54e6fb4", "patch": "@@ -1,3 +1,21 @@\n+2020-02-27  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\tPR target/93932\n+\t* config/rs6000/vsx.md (vsx_extract_<mode>_var, VSX_D iterator):\n+\tSplit the insn into two parts.  This insn only does variable\n+\textract from a register.\n+\t(vsx_extract_<mode>_var_load, VSX_D iterator): New insn, do\n+\tvariable extract from memory.\n+\t(vsx_extract_v4sf_var): Split the insn into two parts.  This insn\n+\tonly does variable extract from a register.\n+\t(vsx_extract_v4sf_var_load): New insn, do variable extract from\n+\tmemory.\n+\t(vsx_extract_<mode>_var, VSX_EXTRACT_I iterator): Split the insn\n+\tinto two parts.  This insn only does variable extract from a\n+\tregister.\n+\t(vsx_extract_<mode>_var_load, VSX_EXTRACT_I iterator): New insn,\n+\tdo variable extract from memory.\n+\n 2020-02-27  Martin Jambor  <mjambor@suse.cz>\n \t    Feng Xue  <fxue@os.amperecomputing.com>\n "}, {"sha": "b5d80f677dc79c40b1fe927ca6c11bb481482019", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 71, "deletions": 19, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c299acc47b19fd6c445a6931798325a54e6fb4/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c299acc47b19fd6c445a6931798325a54e6fb4/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=75c299acc47b19fd6c445a6931798325a54e6fb4", "patch": "@@ -3245,14 +3245,14 @@\n   \"vslo %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n-;; Variable V2DI/V2DF extract\n+;; Variable V2DI/V2DF extract from a register\n (define_insn_and_split \"vsx_extract_<mode>_var\"\n-  [(set (match_operand:<VS_scalar> 0 \"gpc_reg_operand\" \"=v,wa,r\")\n-\t(unspec:<VS_scalar> [(match_operand:VSX_D 1 \"input_operand\" \"v,Q,Q\")\n-\t\t\t     (match_operand:DI 2 \"gpc_reg_operand\" \"r,r,r\")]\n+  [(set (match_operand:<VS_scalar> 0 \"gpc_reg_operand\" \"=v\")\n+\t(unspec:<VS_scalar> [(match_operand:VSX_D 1 \"gpc_reg_operand\" \"v\")\n+\t\t\t     (match_operand:DI 2 \"gpc_reg_operand\" \"r\")]\n \t\t\t    UNSPEC_VSX_EXTRACT))\n-   (clobber (match_scratch:DI 3 \"=r,&b,&b\"))\n-   (clobber (match_scratch:V2DI 4 \"=&v,X,X\"))]\n+   (clobber (match_scratch:DI 3 \"=r\"))\n+   (clobber (match_scratch:V2DI 4 \"=&v\"))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode) && TARGET_DIRECT_MOVE_64BIT\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -3263,6 +3263,23 @@\n   DONE;\n })\n \n+;; Variable V2DI/V2DF extract from memory\n+(define_insn_and_split \"*vsx_extract_<mode>_var_load\"\n+  [(set (match_operand:<VS_scalar> 0 \"gpc_reg_operand\" \"=wa,r\")\n+\t(unspec:<VS_scalar> [(match_operand:VSX_D 1 \"memory_operand\" \"Q,Q\")\n+\t\t\t     (match_operand:DI 2 \"gpc_reg_operand\" \"r,r\")]\n+\t\t\t    UNSPEC_VSX_EXTRACT))\n+   (clobber (match_scratch:DI 3 \"=&b,&b\"))]\n+  \"VECTOR_MEM_VSX_P (<MODE>mode) && TARGET_DIRECT_MOVE_64BIT\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (match_dup 4))]\n+{\n+  operands[4] = rs6000_adjust_vec_address (operands[0], operands[1], operands[2],\n+\t\t\t\t\t   operands[3], <VS_scalar>mode);\n+}\n+  [(set_attr \"type\" \"fpload,load\")])\n+\n ;; Extract a SF element from V4SF\n (define_insn_and_split \"vsx_extract_v4sf\"\n   [(set (match_operand:SF 0 \"vsx_register_operand\" \"=wa\")\n@@ -3315,14 +3332,14 @@\n    (set_attr \"length\" \"8\")\n    (set_attr \"isa\" \"*,p7v,p9v,*\")])\n \n-;; Variable V4SF extract\n+;; Variable V4SF extract from a register\n (define_insn_and_split \"vsx_extract_v4sf_var\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=wa,wa,?r\")\n-\t(unspec:SF [(match_operand:V4SF 1 \"input_operand\" \"v,Q,Q\")\n-\t\t    (match_operand:DI 2 \"gpc_reg_operand\" \"r,r,r\")]\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=wa\")\n+\t(unspec:SF [(match_operand:V4SF 1 \"gpc_reg_operand\" \"v\")\n+\t\t    (match_operand:DI 2 \"gpc_reg_operand\" \"r\")]\n \t\t   UNSPEC_VSX_EXTRACT))\n-   (clobber (match_scratch:DI 3 \"=r,&b,&b\"))\n-   (clobber (match_scratch:V2DI 4 \"=&v,X,X\"))]\n+   (clobber (match_scratch:DI 3 \"=r\"))\n+   (clobber (match_scratch:V2DI 4 \"=&v\"))]\n   \"VECTOR_MEM_VSX_P (V4SFmode) && TARGET_DIRECT_MOVE_64BIT\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -3333,6 +3350,23 @@\n   DONE;\n })\n \n+;; Variable V4SF extract from memory\n+(define_insn_and_split \"*vsx_extract_v4sf_var_load\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=wa,?r\")\n+\t(unspec:SF [(match_operand:V4SF 1 \"memory_operand\" \"Q,Q\")\n+\t\t    (match_operand:DI 2 \"gpc_reg_operand\" \"r,r\")]\n+\t\t   UNSPEC_VSX_EXTRACT))\n+   (clobber (match_scratch:DI 3 \"=&b,&b\"))]\n+  \"VECTOR_MEM_VSX_P (V4SFmode) && TARGET_DIRECT_MOVE_64BIT\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (match_dup 4))]\n+{\n+  operands[4] = rs6000_adjust_vec_address (operands[0], operands[1], operands[2],\n+\t\t\t\t\t   operands[3], SFmode);\n+}\n+  [(set_attr \"type\" \"fpload,load\")])\n+\n ;; Expand the builtin form of xxpermdi to canonical rtl.\n (define_expand \"vsx_xxpermdi_<mode>\"\n   [(match_operand:VSX_L 0 \"vsx_register_operand\")\n@@ -3677,15 +3711,15 @@\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"8\")])\n \n-;; Variable V16QI/V8HI/V4SI extract\n+;; Variable V16QI/V8HI/V4SI extract from a register\n (define_insn_and_split \"vsx_extract_<mode>_var\"\n-  [(set (match_operand:<VS_scalar> 0 \"gpc_reg_operand\" \"=r,r,r\")\n+  [(set (match_operand:<VS_scalar> 0 \"gpc_reg_operand\" \"=r,r\")\n \t(unspec:<VS_scalar>\n-\t [(match_operand:VSX_EXTRACT_I 1 \"input_operand\" \"v,v,Q\")\n-\t  (match_operand:DI 2 \"gpc_reg_operand\" \"r,r,r\")]\n+\t [(match_operand:VSX_EXTRACT_I 1 \"gpc_reg_operand\" \"v,v\")\n+\t  (match_operand:DI 2 \"gpc_reg_operand\" \"r,r\")]\n \t UNSPEC_VSX_EXTRACT))\n-   (clobber (match_scratch:DI 3 \"=r,r,&b\"))\n-   (clobber (match_scratch:V2DI 4 \"=X,&v,X\"))]\n+   (clobber (match_scratch:DI 3 \"=r,r\"))\n+   (clobber (match_scratch:V2DI 4 \"=X,&v\"))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode) && TARGET_DIRECT_MOVE_64BIT\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -3695,7 +3729,25 @@\n \t\t\t\toperands[3], operands[4]);\n   DONE;\n }\n-  [(set_attr \"isa\" \"p9v,*,*\")])\n+  [(set_attr \"isa\" \"p9v,*\")])\n+\n+;; Variable V16QI/V8HI/V4SI extract from memory\n+(define_insn_and_split \"*vsx_extract_<mode>_var_load\"\n+  [(set (match_operand:<VS_scalar> 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec:<VS_scalar>\n+\t [(match_operand:VSX_EXTRACT_I 1 \"memory_operand\" \"Q\")\n+\t  (match_operand:DI 2 \"gpc_reg_operand\" \"r\")]\n+\t UNSPEC_VSX_EXTRACT))\n+   (clobber (match_scratch:DI 3 \"=&b\"))]\n+  \"VECTOR_MEM_VSX_P (<MODE>mode) && TARGET_DIRECT_MOVE_64BIT\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (match_dup 4))]\n+{\n+  operands[4] = rs6000_adjust_vec_address (operands[0], operands[1], operands[2],\n+\t\t\t\t\t   operands[3], <VS_scalar>mode);\n+}\n+  [(set_attr \"type\" \"load\")])\n \n (define_insn_and_split \"*vsx_extract_<mode>_<VS_scalar>mode_var\"\n   [(set (match_operand:<VS_scalar> 0 \"gpc_reg_operand\" \"=r,r,r\")"}, {"sha": "35fd93a18fc7b5eb1ebd1f849ed4810ada5176e8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c299acc47b19fd6c445a6931798325a54e6fb4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c299acc47b19fd6c445a6931798325a54e6fb4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=75c299acc47b19fd6c445a6931798325a54e6fb4", "patch": "@@ -1,3 +1,9 @@\n+2020-02-27  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\tPR target/93932\n+\t* gcc.target/powerpc/fold-vec-extract-longlong.p8.c: Adjust\n+\tinstruction counts.\n+\n 2020-02-27  Martin Jambor  <mjambor@suse.cz>\n \t    Feng Xue  <fxue@os.amperecomputing.com>\n "}, {"sha": "56746989f7479c17de93e03ab1a1f547e22af7a1", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-extract-longlong.p8.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c299acc47b19fd6c445a6931798325a54e6fb4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-longlong.p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c299acc47b19fd6c445a6931798325a54e6fb4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-longlong.p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-longlong.p8.c?ref=75c299acc47b19fd6c445a6931798325a54e6fb4", "patch": "@@ -7,24 +7,23 @@\n \n // Targeting P8LE and P8BE, six tests total.\n // P8 (LE) constants: mfvsrd\n-// P8 (LE) variables: addi,xxpermdi,mr,stxvd2x|stxvd4x,rldicl,sldi,ldx,blr\n-// P8 (BE) constants: mfvsrd\n-// P8 (BE) Variables: addi,xxpermdi,rldicl,mr,stxvd2x|stxvd4x,sldi,ldx,blr\n+// P8 (LE) variables: xori, rldic, mtvsrd, xxpermdi, vslo, mfvsrd\n+// P8 (BE) constants: xxpermdi, mfvsrd\n+// P8 (BE) Variables:       rldic, mtvsrd, xxpermdi, vslo, mfvsrd\n \n-/* { dg-final { scan-assembler-times {\\maddi\\M} 6 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\maddi\\M} 3 { target lp64 } } } */\n+/* results. */\n+/* { dg-final { scan-assembler-times {\\mxori\\M} 3 { target le } } } */\n+/* { dg-final { scan-assembler-times {\\mrldic\\M|\\mrlwinm\\M} 3 } } */\n+/* { dg-final { scan-assembler-times {\\mstxvd2x\\M|\\mstxvw4x\\M} 4 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\madd\\M} 3 { target ilp32 } } } */\n /* { dg-final { scan-assembler-times {\\mlwz\\M} 11 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\maddi\\M} 6 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mmfvsrd\\M} 6 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times {\\mmtvsrd\\M} 3 { target lp64 } } } */\n /* { dg-final { scan-assembler-times {\\mxxpermdi\\M} 3 { target le } } } */\n+/* { dg-final { scan-assembler-times {\\mxxpermdi\\M} 6 { target { be && lp64 } } } } */\n /* { dg-final { scan-assembler-times {\\mxxpermdi\\M} 2 { target { be && ilp32 } } } } */\n-/* { dg-final { scan-assembler-times {\\mxxpermdi\\M} 3 { target { be && lp64 } } } } */\n-/* { dg-final { scan-assembler-times {\\mstxvd2x\\M|\\mstxvw4x\\M} 3 { target lp64 } } } */\n-/* { dg-final { scan-assembler-times {\\mstxvd2x\\M|\\mstxvw4x\\M} 4 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mrldicl\\M|\\mrldic\\M|\\mrlwinm\\M} 3 } } */\n-/* { dg-final { scan-assembler-times {\\mmfvsrd\\M} 3 { target { lp64 } } } } */\n-/* { dg-final { scan-assembler-times {\\mmfvsrd\\M} 0 { target { be && ilp32 } } } } */\n-/* { dg-final { scan-assembler-times {\\mmtvsrd\\M} 0 { target { lp64 } } } } */\n-/* { dg-final { scan-assembler-times {\\mmtvsrd\\M} 0 { target { be && ilp32 } } } } */\n+/* { dg-final { scan-assembler-times {\\mvslo\\M} 3 { target lp64 } } } */\n \n #include <altivec.h>\n "}]}