{"sha": "8feb61a3c53240194d76c1a8e57a07faa5ef5d4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZlYjYxYTNjNTMyNDAxOTRkNzZjMWE4ZTU3YTA3ZmFhNWVmNWQ0Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-04-16T08:40:58Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-04-16T08:40:58Z"}, "message": "re PR target/90096 (Misleading option hint for AVX intrinsics)\n\n\tPR target/90096\n\t* config/i386/i386.c (ix86_target_string): Add ADD_ABI_P argument, only\n\tprint -m64/-mx32/-m32 if it is true.\n\t(ix86_debug_options, ix86_function_specific_print): Pass true as\n\tADD_ABI_P to ix86_target_string.\n\t(ix86_expand_builtin): Adjust ix86_target_string caller, pass true as\n\tADD_ABI_P only if OPTION_MASK_ISA_64BIT is set in bisa and in that case\n\tor into it OPTION_MASK_ISA_ABI_64 or OPTION_MASK_ISA_ABI_X32.\n\n\t* gcc.target/i386/pr90096.c: New test.\n\t* gcc.target/i386/pr69255-1.c: Adjust expected diagnostics.\n\t* gcc.target/i386/pr69255-2.c: Likewise.\n\t* gcc.target/i386/pr69255-3.c: Likewise.\n\nFrom-SVN: r270381", "tree": {"sha": "4b40e536f9e0cd00e3228d2ad25e0286894927dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b40e536f9e0cd00e3228d2ad25e0286894927dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8feb61a3c53240194d76c1a8e57a07faa5ef5d4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8feb61a3c53240194d76c1a8e57a07faa5ef5d4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8feb61a3c53240194d76c1a8e57a07faa5ef5d4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8feb61a3c53240194d76c1a8e57a07faa5ef5d4c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "234b5365c5485a0606a0d2faac7e9f1e30ce8303", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/234b5365c5485a0606a0d2faac7e9f1e30ce8303", "html_url": "https://github.com/Rust-GCC/gccrs/commit/234b5365c5485a0606a0d2faac7e9f1e30ce8303"}], "stats": {"total": 81, "additions": 63, "deletions": 18}, "files": [{"sha": "024f6757f3dfa0184f7c2770b25f8b5901721b46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8feb61a3c53240194d76c1a8e57a07faa5ef5d4c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8feb61a3c53240194d76c1a8e57a07faa5ef5d4c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8feb61a3c53240194d76c1a8e57a07faa5ef5d4c", "patch": "@@ -1,5 +1,14 @@\n 2019-04-16  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/90096\n+\t* config/i386/i386.c (ix86_target_string): Add ADD_ABI_P argument, only\n+\tprint -m64/-mx32/-m32 if it is true.\n+\t(ix86_debug_options, ix86_function_specific_print): Pass true as\n+\tADD_ABI_P to ix86_target_string.\n+\t(ix86_expand_builtin): Adjust ix86_target_string caller, pass true as\n+\tADD_ABI_P only if OPTION_MASK_ISA_64BIT is set in bisa and in that case\n+\tor into it OPTION_MASK_ISA_ABI_64 or OPTION_MASK_ISA_ABI_X32.\n+\n \tPR rtl-optimization/90082\n \t* dce.c (can_delete_call): New function.\n \t(deletable_insn_p, mark_insn): Use it."}, {"sha": "498a35d8aea34d9b62c686595d2ddb888d78bd80", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8feb61a3c53240194d76c1a8e57a07faa5ef5d4c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8feb61a3c53240194d76c1a8e57a07faa5ef5d4c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8feb61a3c53240194d76c1a8e57a07faa5ef5d4c", "patch": "@@ -838,7 +838,7 @@ enum ix86_function_specific_strings\n \n static char *ix86_target_string (HOST_WIDE_INT, HOST_WIDE_INT, int, int,\n \t\t\t\t const char *, const char *, enum fpmath_unit,\n-\t\t\t\t bool);\n+\t\t\t\t bool, bool);\n static void ix86_function_specific_save (struct cl_target_option *,\n \t\t\t\t\t struct gcc_options *opts);\n static void ix86_function_specific_restore (struct gcc_options *opts,\n@@ -2928,7 +2928,7 @@ static char *\n ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n \t\t    int flags, int flags2,\n \t\t    const char *arch, const char *tune,\n-\t\t    enum fpmath_unit fpmath, bool add_nl_p)\n+\t\t    enum fpmath_unit fpmath, bool add_nl_p, bool add_abi_p)\n {\n   struct ix86_target_opts\n   {\n@@ -3095,19 +3095,20 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n     }\n \n   /* Add -m32/-m64/-mx32.  */\n-  if ((isa & OPTION_MASK_ISA_64BIT) != 0)\n+  if (add_abi_p)\n     {\n-      if ((isa & OPTION_MASK_ABI_64) != 0)\n-\tabi = \"-m64\";\n+      if ((isa & OPTION_MASK_ISA_64BIT) != 0)\n+\t{\n+\t  if ((isa & OPTION_MASK_ABI_64) != 0)\n+\t    abi = \"-m64\";\n+\t  else\n+\t    abi = \"-mx32\";\n+\t}\n       else\n-\tabi = \"-mx32\";\n-      isa &= ~ (OPTION_MASK_ISA_64BIT\n-\t\t| OPTION_MASK_ABI_64\n-\t\t| OPTION_MASK_ABI_X32);\n+\tabi = \"-m32\";\n+      opts[num++][0] = abi;\n     }\n-  else\n-    abi = \"-m32\";\n-  opts[num++][0] = abi;\n+  isa &= ~(OPTION_MASK_ISA_64BIT | OPTION_MASK_ABI_64 | OPTION_MASK_ABI_X32);\n \n   /* Pick out the options in isa2 options.  */\n   for (i = 0; i < ARRAY_SIZE (isa2_opts); i++)\n@@ -3269,7 +3270,7 @@ ix86_debug_options (void)\n   char *opts = ix86_target_string (ix86_isa_flags, ix86_isa_flags2,\n \t\t\t\t   target_flags, ix86_target_flags,\n \t\t\t\t   ix86_arch_string,ix86_tune_string,\n-\t\t\t\t   ix86_fpmath, true);\n+\t\t\t\t   ix86_fpmath, true, true);\n \n   if (opts)\n     {\n@@ -5121,7 +5122,7 @@ ix86_function_specific_print (FILE *file, int indent,\n   char *target_string\n     = ix86_target_string (ptr->x_ix86_isa_flags, ptr->x_ix86_isa_flags2,\n \t\t\t  ptr->x_target_flags, ptr->x_ix86_target_flags,\n-\t\t\t  NULL, NULL, ptr->x_ix86_fpmath, false);\n+\t\t\t  NULL, NULL, ptr->x_ix86_fpmath, false, true);\n \n   gcc_assert (ptr->arch < PROCESSOR_max);\n   fprintf (file, \"%*sarch = %d (%s)\\n\",\n@@ -36709,8 +36710,13 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n     isa |= (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4);\n   if ((bisa & isa) != bisa || (bisa2 & isa2) != bisa2)\n     {\n+      bool add_abi_p = bisa & OPTION_MASK_ISA_64BIT;\n+      if (TARGET_ABI_X32)\n+\tbisa |= OPTION_MASK_ABI_X32;\n+      else\n+\tbisa |= OPTION_MASK_ABI_64;\n       char *opts = ix86_target_string (bisa, bisa2, 0, 0, NULL, NULL,\n-\t\t\t\t       (enum fpmath_unit) 0, false);\n+\t\t\t\t       (enum fpmath_unit) 0, false, add_abi_p);\n       if (!opts)\n \terror (\"%qE needs unknown isa option\", fndecl);\n       else"}, {"sha": "decbf085c4c173fc9d426fe548ed8f43c16d99f9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8feb61a3c53240194d76c1a8e57a07faa5ef5d4c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8feb61a3c53240194d76c1a8e57a07faa5ef5d4c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8feb61a3c53240194d76c1a8e57a07faa5ef5d4c", "patch": "@@ -1,5 +1,11 @@\n 2019-04-16  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/90096\n+\t* gcc.target/i386/pr90096.c: New test.\n+\t* gcc.target/i386/pr69255-1.c: Adjust expected diagnostics.\n+\t* gcc.target/i386/pr69255-2.c: Likewise.\n+\t* gcc.target/i386/pr69255-3.c: Likewise.\n+\n \tPR rtl-optimization/90082\n \t* gcc.dg/pr90082.c: New test.\n "}, {"sha": "1bb6c8d120f6ac1d1d22025633689b65f03a0295", "filename": "gcc/testsuite/gcc.target/i386/pr69255-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8feb61a3c53240194d76c1a8e57a07faa5ef5d4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69255-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8feb61a3c53240194d76c1a8e57a07faa5ef5d4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69255-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69255-1.c?ref=8feb61a3c53240194d76c1a8e57a07faa5ef5d4c", "patch": "@@ -12,7 +12,7 @@ __attribute__ ((__vector_size__ (16))) int b;\n void\n foo (const long long *p)\n {\n-  a = __builtin_ia32_gather3siv4di (a, p, b, 1, 1);\t/* { dg-error \"needs isa option -m32 -mavx512vl\" } */\n+  a = __builtin_ia32_gather3siv4di (a, p, b, 1, 1);\t/* { dg-error \"needs isa option -mavx512vl\" } */\n   /* { dg-warning \"AVX vector return without AVX enabled changes the ABI\" \"\" { target *-*-* } .-1 } */\n   /* { dg-warning \"AVX vector argument without AVX enabled changes the ABI\" \"\" { target *-*-* } .-2 } */\n }"}, {"sha": "cedf76c10cd0e60ca8916300480a354b143573bc", "filename": "gcc/testsuite/gcc.target/i386/pr69255-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8feb61a3c53240194d76c1a8e57a07faa5ef5d4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69255-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8feb61a3c53240194d76c1a8e57a07faa5ef5d4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69255-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69255-2.c?ref=8feb61a3c53240194d76c1a8e57a07faa5ef5d4c", "patch": "@@ -13,7 +13,7 @@ void\n foo (const long long *p)\n {\n   volatile __attribute__ ((__vector_size__ (32))) long long c;\n-  c = __builtin_ia32_gather3siv4di (a, p, b, 1, 1);\t\t/* { dg-error \"needs isa option -m32 -mavx512vl\" } */\n+  c = __builtin_ia32_gather3siv4di (a, p, b, 1, 1);\t\t/* { dg-error \"needs isa option -mavx512vl\" } */\n   /* { dg-warning \"AVX vector return without AVX enabled changes the ABI\" \"\" { target *-*-* } .-1 } */\n   /* { dg-warning \"AVX vector argument without AVX enabled changes the ABI\" \"\" { target *-*-* } .-2 } */\n }"}, {"sha": "69c802524ccbf5921617b944fe77094f4e6de9e6", "filename": "gcc/testsuite/gcc.target/i386/pr69255-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8feb61a3c53240194d76c1a8e57a07faa5ef5d4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69255-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8feb61a3c53240194d76c1a8e57a07faa5ef5d4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69255-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69255-3.c?ref=8feb61a3c53240194d76c1a8e57a07faa5ef5d4c", "patch": "@@ -12,7 +12,7 @@ __attribute__ ((__vector_size__ (16))) int b;\n void\n foo (const long long *p, __attribute__ ((__vector_size__ (32))) long long *q)\n {\n-  *q = __builtin_ia32_gather3siv4di (a, p, b, 1, 1);\t/* { dg-error \"needs isa option -m32 -mavx512vl\" } */\n+  *q = __builtin_ia32_gather3siv4di (a, p, b, 1, 1);\t/* { dg-error \"needs isa option -mavx512vl\" } */\n   /* { dg-warning \"AVX vector return without AVX enabled changes the ABI\" \"\" { target *-*-* } .-1 } */\n   /* { dg-warning \"AVX vector argument without AVX enabled changes the ABI\" \"\" { target *-*-* } .-2 } */\n }"}, {"sha": "fe29e3c76fe7bd6adcdd9deca42b499fcf62777a", "filename": "gcc/testsuite/gcc.target/i386/pr90096.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8feb61a3c53240194d76c1a8e57a07faa5ef5d4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90096.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8feb61a3c53240194d76c1a8e57a07faa5ef5d4c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90096.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90096.c?ref=8feb61a3c53240194d76c1a8e57a07faa5ef5d4c", "patch": "@@ -0,0 +1,24 @@\n+/* PR target/90096 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -mno-gfni -mno-avx512f -Wno-psabi\" } */\n+\n+#include <x86intrin.h>\n+\n+volatile __m512i x1, x2;\n+volatile __mmask64 m64;\n+\n+void\n+foo (int i)\n+{\n+  x1 = _mm512_gf2p8affineinv_epi64_epi8 (x1, x2, 3);\t/* { dg-error \"needs isa option -mgfni -mavx512f\" } */\n+}\n+\n+#ifdef __x86_64__\n+unsigned long long\n+bar (__m128 *p)\n+{\n+  return _mm_cvtt_roundss_u64 (*p, _MM_FROUND_TO_ZERO |_MM_FROUND_NO_EXC);\n+  /* { dg-error \"needs isa option -m64 -mavx512f\" \"\" { target lp64 } .-1 } */\n+  /* { dg-error \"needs isa option -mx32 -mavx512f\" \"\" { target x32 } .-1 } */\n+}\n+#endif"}]}