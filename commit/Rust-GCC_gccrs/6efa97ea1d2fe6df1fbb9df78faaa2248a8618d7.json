{"sha": "6efa97ea1d2fe6df1fbb9df78faaa2248a8618d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVmYTk3ZWExZDJmZTZkZjFmYmI5ZGY3OGZhYWEyMjQ4YTg2MThkNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-05-27T14:27:25Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-05-27T17:56:56Z"}, "message": "c++: Handle multiple aggregate overloads [PR95319].\n\nHere, when considering the two 'insert' overloads, we look for aggregate\nconversions from the same initializer-list to B<3> or\ninitializer_list<B<3>>.  But since my fix for reshape_init overhead on the\nPR14179 testcase we reshaped the initializer-list directly, leading to an\nerror when we then tried to reshape it differently for the second overload.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95319\n\t* decl.c (reshape_init_array_1): Don't reuse in overload context.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/95319\n\t* g++.dg/cpp0x/initlist-array12.C: New test.", "tree": {"sha": "91fc64c10ba4920564cb1170a6e5937d7194b45a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91fc64c10ba4920564cb1170a6e5937d7194b45a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6efa97ea1d2fe6df1fbb9df78faaa2248a8618d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6efa97ea1d2fe6df1fbb9df78faaa2248a8618d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6efa97ea1d2fe6df1fbb9df78faaa2248a8618d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6efa97ea1d2fe6df1fbb9df78faaa2248a8618d7/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7fd43c38f7469a3ef5ee30e889d60e1376d4dfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7fd43c38f7469a3ef5ee30e889d60e1376d4dfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7fd43c38f7469a3ef5ee30e889d60e1376d4dfc"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "56571e39570892741b4fe6c59323b2379df79ea2", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efa97ea1d2fe6df1fbb9df78faaa2248a8618d7/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efa97ea1d2fe6df1fbb9df78faaa2248a8618d7/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=6efa97ea1d2fe6df1fbb9df78faaa2248a8618d7", "patch": "@@ -6029,8 +6029,10 @@ reshape_init_array_1 (tree elt_type, tree max_index, reshape_iter *d,\n \n   /* The initializer for an array is always a CONSTRUCTOR.  If this is the\n      outermost CONSTRUCTOR and the element type is non-aggregate, we don't need\n-     to build a new one.  */\n+     to build a new one.  But don't reuse if not complaining; if this is\n+     tentative, we might also reshape to another type (95319).  */\n   bool reuse = (first_initializer_p\n+\t\t&& (complain & tf_error)\n \t\t&& !CP_AGGREGATE_TYPE_P (elt_type)\n \t\t&& !TREE_SIDE_EFFECTS (first_initializer_p));\n   if (reuse)"}, {"sha": "b012e7295d50203c3306a22576d8f38219e95d25", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist-array12.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efa97ea1d2fe6df1fbb9df78faaa2248a8618d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-array12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efa97ea1d2fe6df1fbb9df78faaa2248a8618d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-array12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-array12.C?ref=6efa97ea1d2fe6df1fbb9df78faaa2248a8618d7", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/95319\n+// { dg-do compile { target c++11 } }\n+\n+namespace std {\n+template <class> class initializer_list {\n+  int *_M_array;\n+  unsigned long _M_len;\n+};\n+template <int _Nm> struct A { typedef int _Type[_Nm]; };\n+template <int _Nm> struct B { typename A<_Nm>::_Type _M_elems; };\n+class C {\n+public:\n+  void insert(int, B<3>);\n+  void insert(int, initializer_list<B<3>>);\n+};\n+} // namespace std\n+int a;\n+int\n+main() {\n+  using ArrayVector = std::C;\n+  auto b = ArrayVector();\n+  b.insert(a, {{2}});\n+  return 0;\n+}"}]}