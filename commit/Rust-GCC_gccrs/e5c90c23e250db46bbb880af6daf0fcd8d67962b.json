{"sha": "e5c90c23e250db46bbb880af6daf0fcd8d67962b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVjOTBjMjNlMjUwZGI0NmJiYjg4MGFmNmRhZjBmY2Q4ZDY3OTYyYg==", "commit": {"author": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-03-05T20:07:30Z"}, "committer": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-03-05T20:07:30Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r395", "tree": {"sha": "d3908563298a74e34cac5c144200cf38331cb318", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3908563298a74e34cac5c144200cf38331cb318"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5c90c23e250db46bbb880af6daf0fcd8d67962b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5c90c23e250db46bbb880af6daf0fcd8d67962b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5c90c23e250db46bbb880af6daf0fcd8d67962b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5c90c23e250db46bbb880af6daf0fcd8d67962b/comments", "author": null, "committer": null, "parents": [{"sha": "bf4400c2e6915a4ca437a3932575f92b08b46647", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf4400c2e6915a4ca437a3932575f92b08b46647", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf4400c2e6915a4ca437a3932575f92b08b46647"}], "stats": {"total": 27, "additions": 12, "deletions": 15}, "files": [{"sha": "544d78e23799b85eb31b6466b9eb11b161707f82", "filename": "gcc/regclass.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c90c23e250db46bbb880af6daf0fcd8d67962b/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c90c23e250db46bbb880af6daf0fcd8d67962b/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=e5c90c23e250db46bbb880af6daf0fcd8d67962b", "patch": "@@ -326,18 +326,14 @@ fix_register (name, fixed, call_used)\n   /* Decode the name and update the primary form of\n      the register info.  */\n \n-  for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-    if (reg_names[i][0] && ! strcmp (reg_names[i], name))\n-      {\n-\tfixed_regs[i] = fixed;\n-\tcall_used_regs[i] = call_used;\n-\tbreak;\n-      }\n-\n-  if (i == FIRST_PSEUDO_REGISTER)\n+  if ((i = decode_reg_name (name)) >= 0)\n+    {\n+      fixed_regs[i] = fixed;\n+      call_used_regs[i] = call_used;\n+    }\n+  else\n     {\n       warning (\"unknown register name: %s\", name);\n-      return;\n     }\n }\n \f"}, {"sha": "890c9696671a6adbf86ebd0cb9794a63297c4c43", "filename": "gcc/varasm.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c90c23e250db46bbb880af6daf0fcd8d67962b/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c90c23e250db46bbb880af6daf0fcd8d67962b/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=e5c90c23e250db46bbb880af6daf0fcd8d67962b", "patch": "@@ -191,7 +191,8 @@ make_function_rtl (decl)\n \n /* Decode an `asm' spec for a declaration as a register name.\n    Return the register number, or -1 if nothing specified,\n-   or -2 if the name is not a register.  */\n+   or -2 if the name is not a register.  Accept an exact spelling,\n+   a decimal number, or an optional prefix of '%' or '#'.  */\n \n int\n decode_reg_name (asmspec)\n@@ -218,7 +219,7 @@ decode_reg_name (asmspec)\n \tif (reg_names[i][0] && ! strcmp (asmspec, reg_names[i]))\n \t  return i;\n \n-      if (asmspec[0] == '%')\n+      if (asmspec[0] == '%' || asmspec[0] == '#')\n \tfor (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n \t  if (reg_names[i][0] && ! strcmp (asmspec + 1, reg_names[i]))\n \t    return i;\n@@ -232,7 +233,7 @@ decode_reg_name (asmspec)\n \t  if (! strcmp (asmspec, table[i].name))\n \t    return table[i].number;\n \n-\tif (asmspec[0] == '%')\n+\tif (asmspec[0] == '%' || asmspec[0] == '#')\n \t  for (i = 0; i < sizeof (table) / sizeof (table[0]); i++)\n \t    if (! strcmp (asmspec + 1, table[i].name))\n \t      return table[i].number;\n@@ -499,9 +500,9 @@ assemble_start_function (decl, fnname)\n #endif\n \n #ifdef DBX_DEBUGGING_INFO\n-  /* Output SDB definition of the function.  */\n+  /* Output DBX definition of the function.  */\n   if (write_symbols == DBX_DEBUG)\n-    dbxout_begin_function ();\n+    dbxout_begin_function (decl);\n #endif\n \n   /* Make function name accessible from other files, if appropriate.  */"}]}