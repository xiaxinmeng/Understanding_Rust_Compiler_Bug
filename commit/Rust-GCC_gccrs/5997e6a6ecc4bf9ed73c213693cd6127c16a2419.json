{"sha": "5997e6a6ecc4bf9ed73c213693cd6127c16a2419", "node_id": "C_kwDOANBUbNoAKDU5OTdlNmE2ZWNjNGJmOWVkNzNjMjEzNjkzY2Q2MTI3YzE2YTI0MTk", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-20T08:25:24Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-05T18:14:40Z"}, "message": "libstdc++: Add support for POWER9 DARN instruction to std::random_device\n\nThe ISA-3.0 instruction set includes DARN (\"deliver a random number\")\nwhich can be used similarly to the existing support for RDRAND and RDSEED.\n\nlibstdc++-v3/ChangeLog:\n\n\t* src/c++11/random.cc [__powerpc__] (USE_DARN): Define.\n\t(__ppc_darn): New function to use POWER9 DARN instruction.\n\t(Which): Add 'darn' enumerator.\n\t(which_source): Check for __ppc_darn.\n\t(random_device::_M_init): Support \"darn\" and \"hw\" tokens.\n\t(random_device::_M_getentropy): Add darn to switch.\n\t* testsuite/26_numerics/random/random_device/cons/token.cc:\n\tCheck \"darn\" token.\n\t* testsuite/26_numerics/random/random_device/entropy.cc:\n\tLikewise.", "tree": {"sha": "63f0c8d126e6314338dd529a0b8551de1287b7c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63f0c8d126e6314338dd529a0b8551de1287b7c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5997e6a6ecc4bf9ed73c213693cd6127c16a2419", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5997e6a6ecc4bf9ed73c213693cd6127c16a2419", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5997e6a6ecc4bf9ed73c213693cd6127c16a2419", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5997e6a6ecc4bf9ed73c213693cd6127c16a2419/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdb9d472189f329ded1d9bc974d05a39d73949e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdb9d472189f329ded1d9bc974d05a39d73949e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdb9d472189f329ded1d9bc974d05a39d73949e3"}], "stats": {"total": 63, "additions": 57, "deletions": 6}, "files": [{"sha": "55a73c51fcaae8bf4dcda97c39ed4fcc41b7ead7", "filename": "libstdc++-v3/src/c++11/random.cc", "status": "modified", "additions": 53, "deletions": 3, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5997e6a6ecc4bf9ed73c213693cd6127c16a2419/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Frandom.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5997e6a6ecc4bf9ed73c213693cd6127c16a2419/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Frandom.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Frandom.cc?ref=5997e6a6ecc4bf9ed73c213693cd6127c16a2419", "patch": "@@ -37,6 +37,8 @@\n # ifdef _GLIBCXX_X86_RDSEED\n #  define USE_RDSEED 1\n # endif\n+#elif defined __powerpc__ && defined __BUILTIN_CPU_SUPPORTS__\n+# define USE_DARN 1\n #endif\n \n #include <cerrno>\n@@ -69,7 +71,7 @@\n #if defined _GLIBCXX_USE_CRT_RAND_S || defined _GLIBCXX_USE_DEV_RANDOM\n // The OS provides a source of randomness we can use.\n # pragma GCC poison _M_mt\n-#elif defined USE_RDRAND || defined USE_RDSEED\n+#elif defined USE_RDRAND || defined USE_RDSEED || defined USE_DARN\n // Hardware instructions might be available, but use cpuid checks at runtime.\n # pragma GCC poison _M_mt\n // If the runtime cpuid checks fail we'll use a linear congruential engine.\n@@ -135,6 +137,24 @@ namespace std _GLIBCXX_VISIBILITY(default)\n #endif\n #endif\n \n+#ifdef USE_DARN\n+    unsigned int\n+    __attribute__((target(\"cpu=power9\")))\n+    __ppc_darn(void*)\n+    {\n+      const uint64_t failed = -1;\n+      unsigned int retries = 10;\n+      uint64_t val = __builtin_darn();\n+      while (val == failed) [[__unlikely__]]\n+\t{\n+\t  if (--retries == 0)\n+\t    std::__throw_runtime_error(__N(\"random_device: darn failed\"));\n+\t  val = __builtin_darn();\n+\t}\n+      return (uint32_t)val;\n+    }\n+#endif\n+\n #ifdef _GLIBCXX_USE_CRT_RAND_S\n     unsigned int\n     __winxp_rand_s(void*)\n@@ -193,11 +213,16 @@ namespace std _GLIBCXX_VISIBILITY(default)\n     }\n #endif\n \n-    enum Which {\n-      rand_s = 1, rdseed = 2, rdrand = 4, device_file = 8, prng = 16,\n+    enum Which : unsigned {\n+      device_file = 1, prng = 2, rand_s = 4,\n+      rdseed = 64, rdrand = 128, darn = 256,\n       any = 0xffff\n     };\n \n+    constexpr Which\n+    operator|(Which l, Which r) noexcept\n+    { return Which(unsigned(l) | unsigned(r)); }\n+\n     inline Which\n     which_source(random_device::result_type (*func [[maybe_unused]])(void*),\n \t\t void* file [[maybe_unused]])\n@@ -221,6 +246,11 @@ namespace std _GLIBCXX_VISIBILITY(default)\n \treturn rdrand;\n #endif\n \n+#ifdef USE_DARN\n+      if (func == &__ppc_darn)\n+\treturn darn;\n+#endif\n+\n #ifdef _GLIBCXX_USE_DEV_RANDOM\n       if (file != nullptr)\n \treturn device_file;\n@@ -269,6 +299,14 @@ namespace std _GLIBCXX_VISIBILITY(default)\n     else if (token == \"rdrand\" || token == \"rdrnd\")\n       which = rdrand;\n #endif // USE_RDRAND\n+#ifdef USE_DARN\n+    else if (token == \"darn\")\n+      which = darn;\n+#endif\n+#if defined USE_RDRAND || defined USE_RDSEED || defined USE_DARN\n+    else if (token == \"hw\" || token == \"hardware\")\n+      which = rdrand | rdseed | darn;\n+#endif\n #ifdef _GLIBCXX_USE_CRT_RAND_S\n     else if (token == \"rand_s\")\n       which = rand_s;\n@@ -346,6 +384,17 @@ namespace std _GLIBCXX_VISIBILITY(default)\n     }\n #endif // USE_RDRAND\n \n+#ifdef USE_DARN\n+    if (which & darn)\n+      {\n+\tif (__builtin_cpu_supports(\"darn\"))\n+\t  {\n+\t    _M_func = &__ppc_darn;\n+\t    return;\n+\t  }\n+      }\n+#endif // USE_DARN\n+\n #ifdef _GLIBCXX_USE_DEV_RANDOM\n     if (which & device_file)\n     {\n@@ -497,6 +546,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n     {\n     case rdrand:\n     case rdseed:\n+    case darn:\n       return (double) max;\n     case rand_s:\n     case prng:"}, {"sha": "d6ac3a37c64d4175fd6e1b37ee0c6224c5e02a4c", "filename": "libstdc++-v3/testsuite/26_numerics/random/random_device/cons/token.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5997e6a6ecc4bf9ed73c213693cd6127c16a2419/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fcons%2Ftoken.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5997e6a6ecc4bf9ed73c213693cd6127c16a2419/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fcons%2Ftoken.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fcons%2Ftoken.cc?ref=5997e6a6ecc4bf9ed73c213693cd6127c16a2419", "patch": "@@ -51,8 +51,9 @@ test03()\n {\n   // At least one of these tokens should be valid.\n   const std::string tokens[] = {\n-    \"rdseed\", \"rdrand\", \"rand_s\", \"/dev/urandom\", \"/dev/random\", \"mt19937\",\n-    \"prng\"\n+    \"rdseed\", \"rdrand\", \"darn\",\n+    \"rand_s\", \"/dev/urandom\", \"/dev/random\",\n+    \"mt19937\", \"prng\"\n   };\n   int count = 0;\n   for (const std::string& token : tokens)"}, {"sha": "6f3ebb1b38e3b49a29fd6be70406eaea8d4e6326", "filename": "libstdc++-v3/testsuite/26_numerics/random/random_device/entropy.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5997e6a6ecc4bf9ed73c213693cd6127c16a2419/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fentropy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5997e6a6ecc4bf9ed73c213693cd6127c16a2419/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fentropy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fentropy.cc?ref=5997e6a6ecc4bf9ed73c213693cd6127c16a2419", "patch": "@@ -22,7 +22,7 @@ test01()\n       VERIFY( entropy <= max );\n     }\n \n-  for (auto token : { \"rdrand\", \"rdseed\" })\n+  for (auto token : { \"rdrand\", \"rdseed\", \"darn\", \"hw\" })\n     if (__gnu_test::random_device_available(token))\n     {\n       const double entropy = std::random_device(token).entropy();"}]}