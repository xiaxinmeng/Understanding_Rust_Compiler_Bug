{"sha": "4ddee425b8c427d3cc13c49b26f442313e239572", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRkZWU0MjViOGM0MjdkM2NjMTNjNDliMjZmNDQyMzEzZTIzOTU3Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-05T15:37:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-05T15:37:40Z"}, "message": "reassoc: Fix reassociation on 32-bit hosts with > 32767 bbs [PR98514]\n\nApparently reassoc ICEs on large functions (more than 32767 basic blocks\nwith something to reassociate in those).\nThe problem is that the pass uses long type to store the ranks, and\nthe bb ranks are (number of SSA_NAMEs with default defs + 2 + bb->index) << 16,\nso with many basic blocks we overflow the ranks and we then have assertions\nrank is not negative.\n\nThe following patch just uses int64_t instead of long in the pass,\nyes, it means slightly higher memory consumption (one array indexed by\nbb->index is twice as large, and one hash_map from trees to the ranks\nwill grow by 50%, but I think it is better than punting on large functions\nthe reassociation on 32-bit hosts and making it inconsistent e.g. when\ncross-compiling.  Given vec.h uses unsigned for vect element counts,\nwe don't really support more than 4G of SSA_NAMEs or more than 2G of basic\nblocks in a function, so even with the << 16 we can't really overflow the\nint64_t rank counters.\n\n2021-01-05  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/98514\n\t* tree-ssa-reassoc.c (bb_rank): Change type from long * to\n\tint64_t *.\n\t(operand_rank): Change type from hash_map<tree, long> to\n\thash_map<tree, int64_t>.\n\t(phi_rank): Change return type from long to int64_t.\n\t(loop_carried_phi): Change block_rank variable type from long to\n\tint64_t.\n\t(propagate_rank): Change return type, rank parameter type and\n\top_rank variable type from long to int64_t.\n\t(find_operand_rank): Change return type from long to int64_t\n\tand change slot variable type from long * to int64_t *.\n\t(insert_operand_rank): Change rank parameter type from long to\n\tint64_t.\n\t(get_rank): Change return type and rank variable type from long to\n\tint64_t.  Use PRId64 instead of ld to print the rank.\n\t(init_reassoc): Change rank variable type from long to int64_t\n\tand adjust correspondingly bb_rank and operand_rank initialization.", "tree": {"sha": "05161d9a40eaca65f2719dafe10d4af0cb1577c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05161d9a40eaca65f2719dafe10d4af0cb1577c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ddee425b8c427d3cc13c49b26f442313e239572", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ddee425b8c427d3cc13c49b26f442313e239572", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ddee425b8c427d3cc13c49b26f442313e239572", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ddee425b8c427d3cc13c49b26f442313e239572/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "576714b309b330df0e80e34114bcdf0bba35e146", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/576714b309b330df0e80e34114bcdf0bba35e146", "html_url": "https://github.com/Rust-GCC/gccrs/commit/576714b309b330df0e80e34114bcdf0bba35e146"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "fac74a3d83c50867223bafec62dce71f8416e59f", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ddee425b8c427d3cc13c49b26f442313e239572/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ddee425b8c427d3cc13c49b26f442313e239572/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=4ddee425b8c427d3cc13c49b26f442313e239572", "patch": "@@ -200,10 +200,10 @@ static unsigned int next_operand_entry_id;\n /* Starting rank number for a given basic block, so that we can rank\n    operations using unmovable instructions in that BB based on the bb\n    depth.  */\n-static long *bb_rank;\n+static int64_t *bb_rank;\n \n /* Operand->rank hashtable.  */\n-static hash_map<tree, long> *operand_rank;\n+static hash_map<tree, int64_t> *operand_rank;\n \n /* Vector of SSA_NAMEs on which after reassociate_bb is done with\n    all basic blocks the CFG should be adjusted - basic blocks\n@@ -212,7 +212,7 @@ static hash_map<tree, long> *operand_rank;\n static vec<tree> reassoc_branch_fixups;\n \n /* Forward decls.  */\n-static long get_rank (tree);\n+static int64_t get_rank (tree);\n static bool reassoc_stmt_dominates_stmt_p (gimple *, gimple *);\n \n /* Wrapper around gsi_remove, which adjusts gimple_uid of debug stmts\n@@ -257,7 +257,7 @@ reassoc_remove_stmt (gimple_stmt_iterator *gsi)\n    calculated into an accumulator variable to be independent for each\n    iteration of the loop.  If STMT is some other phi, the rank is the\n    block rank of its containing block.  */\n-static long\n+static int64_t\n phi_rank (gimple *stmt)\n {\n   basic_block bb = gimple_bb (stmt);\n@@ -311,7 +311,7 @@ static bool\n loop_carried_phi (tree exp)\n {\n   gimple *phi_stmt;\n-  long block_rank;\n+  int64_t block_rank;\n \n   if (TREE_CODE (exp) != SSA_NAME\n       || SSA_NAME_IS_DEFAULT_DEF (exp))\n@@ -337,10 +337,10 @@ loop_carried_phi (tree exp)\n    from expression OP.  For most operands, this is just the rank of OP.\n    For loop-carried phis, the value is zero to avoid undoing the bias\n    in favor of the phi.  */\n-static long\n-propagate_rank (long rank, tree op)\n+static int64_t\n+propagate_rank (int64_t rank, tree op)\n {\n-  long op_rank;\n+  int64_t op_rank;\n \n   if (loop_carried_phi (op))\n     return rank;\n@@ -352,25 +352,25 @@ propagate_rank (long rank, tree op)\n \n /* Look up the operand rank structure for expression E.  */\n \n-static inline long\n+static inline int64_t\n find_operand_rank (tree e)\n {\n-  long *slot = operand_rank->get (e);\n+  int64_t *slot = operand_rank->get (e);\n   return slot ? *slot : -1;\n }\n \n /* Insert {E,RANK} into the operand rank hashtable.  */\n \n static inline void\n-insert_operand_rank (tree e, long rank)\n+insert_operand_rank (tree e, int64_t rank)\n {\n   gcc_assert (rank > 0);\n   gcc_assert (!operand_rank->put (e, rank));\n }\n \n /* Given an expression E, return the rank of the expression.  */\n \n-static long\n+static int64_t\n get_rank (tree e)\n {\n   /* SSA_NAME's have the rank of the expression they are the result\n@@ -414,7 +414,7 @@ get_rank (tree e)\n     {\n       ssa_op_iter iter;\n       gimple *stmt;\n-      long rank;\n+      int64_t rank;\n       tree op;\n \n       /* If we already have a rank for this expression, use that.  */\n@@ -448,7 +448,7 @@ get_rank (tree e)\n \t{\n \t  fprintf (dump_file, \"Rank for \");\n \t  print_generic_expr (dump_file, e);\n-\t  fprintf (dump_file, \" is %ld\\n\", rank);\n+\t  fprintf (dump_file, \" is %\" PRId64 \"\\n\", rank);\n \t}\n \n       /* Note the rank in the hashtable so we don't recompute it.  */\n@@ -6774,7 +6774,7 @@ static void\n init_reassoc (void)\n {\n   int i;\n-  long rank = 2;\n+  int64_t rank = 2;\n   int *bbs = XNEWVEC (int, n_basic_blocks_for_fn (cfun) - NUM_FIXED_BLOCKS);\n \n   /* Find the loops, so that we can prevent moving calculations in\n@@ -6788,8 +6788,8 @@ init_reassoc (void)\n   /* Reverse RPO (Reverse Post Order) will give us something where\n      deeper loops come later.  */\n   pre_and_rev_post_order_compute (NULL, bbs, false);\n-  bb_rank = XCNEWVEC (long, last_basic_block_for_fn (cfun));\n-  operand_rank = new hash_map<tree, long>;\n+  bb_rank = XCNEWVEC (int64_t, last_basic_block_for_fn (cfun));\n+  operand_rank = new hash_map<tree, int64_t>;\n \n   /* Give each default definition a distinct rank.  This includes\n      parameters and the static chain.  Walk backwards over all"}]}