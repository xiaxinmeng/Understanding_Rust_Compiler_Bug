{"sha": "5780ff348ad4430383fd67c6f0c572d8c3e721ad", "node_id": "C_kwDOANBUbNoAKDU3ODBmZjM0OGFkNDQzMDM4M2ZkNjdjNmYwYzU3MmQ4YzNlNzIxYWQ", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-04-12T21:20:30Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-04-12T21:20:30Z"}, "message": "libgccjit: Add support for register variables [PR104072]\n\ngcc/jit/\n\tPR jit/104072\n\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n\t* docs/topics/compatibility.rst (LIBGCCJIT_ABI_22): New ABI tag.\n\t* docs/topics/expressions.rst: Add documentation for the\n\tfunction gcc_jit_lvalue_set_register_name.\n\t* jit-playback.h: New function (set_register_name).\n\t* jit-recording.cc: New function (set_register_name) and add\n\tsupport for register variables.\n\t* jit-recording.h: New field (m_reg_name) and new function\n\t(set_register_name).\n\t* libgccjit.cc: New function (gcc_jit_lvalue_set_register_name).\n\t* libgccjit.h: New function (gcc_jit_lvalue_set_register_name).\n\t* libgccjit.map (LIBGCCJIT_ABI_22): New ABI tag.\n\ngcc/\n\tPR jit/104072\n\t* reginfo.cc: New functions (clear_global_regs_cache,\n\treginfo_cc_finalize) to avoid an issue where compiling the same\n\tcode multiple times gives an error about assigning the same\n\tregister to 2 global variables.\n\t* rtl.h: New function (reginfo_cc_finalize).\n\t* toplev.cc: Call it.\n\ngcc/testsuite/\n\tPR jit/104072\n\t* jit.dg/all-non-failing-tests.h: Add new\n\ttest-register-variable.\n\t* jit.dg/harness.h: Add -fdiagnostics-color=never to context's\n\tcommand-line options.\n\t* jit.dg/test-error-register-variable-bad-name.c: New test.\n\t* jit.dg/test-error-register-variable-size-mismatch.c: New test.\n\t* jit.dg/test-register-variable.c: New test.", "tree": {"sha": "311284f0fbd68d5886a3e3b0843026fa09517828", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/311284f0fbd68d5886a3e3b0843026fa09517828"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5780ff348ad4430383fd67c6f0c572d8c3e721ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5780ff348ad4430383fd67c6f0c572d8c3e721ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5780ff348ad4430383fd67c6f0c572d8c3e721ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5780ff348ad4430383fd67c6f0c572d8c3e721ad/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30f7c83e9cfe7c015448d72f63c4c39d14bc6de6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30f7c83e9cfe7c015448d72f63c4c39d14bc6de6"}], "stats": {"total": 1510, "additions": 895, "deletions": 615}, "files": [{"sha": "4c92b8aeaec7ca485b713a08dd639cc2264f511c", "filename": "gcc/jit/docs/_build/texinfo/libgccjit.texi", "status": "modified", "additions": 649, "deletions": 609, "changes": 1258, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi?ref=5780ff348ad4430383fd67c6f0c572d8c3e721ad"}, {"sha": "7f2b2dcb4da8049b2c301cc9226b4871ef98377d", "filename": "gcc/jit/docs/topics/compatibility.rst", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst?ref=5780ff348ad4430383fd67c6f0c572d8c3e721ad", "patch": "@@ -343,3 +343,12 @@ of a global with an rvalue and to use constructors:\n value from one type to another:\n \n   * :func:`gcc_jit_context_new_bitcast`\n+\n+.. _LIBGCCJIT_ABI_22:\n+\n+``LIBGCCJIT_ABI_22``\n+--------------------\n+``LIBGCCJIT_ABI_22`` covers the addition of an API entrypoint to set the\n+register name of a variable:\n+\n+  * :func:`gcc_jit_lvalue_set_register_name`"}, {"sha": "5d81fde97fa5aade82ab6fd530df72269edd0903", "filename": "gcc/jit/docs/topics/expressions.rst", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst?ref=5780ff348ad4430383fd67c6f0c572d8c3e721ad", "patch": "@@ -761,6 +761,26 @@ where the rvalue is computed by reading from the storage area.\n \n       #ifdef LIBGCCJIT_HAVE_gcc_jit_lvalue_set_link_section\n \n+.. function:: void\\\n+              gcc_jit_lvalue_set_register_name (gcc_jit_lvalue *lvalue,\\\n+                                                const char *reg_name);\n+\n+   Set the register name of a variable.\n+   The parameter ``reg_name`` must be non-NULL. Analogous to:\n+\n+   .. code-block:: c\n+\n+     register int variable asm (\"r12\");\n+\n+   in C.\n+\n+   This entrypoint was added in :ref:`LIBGCCJIT_ABI_22`; you can test for\n+   its presence using\n+\n+   .. code-block:: c\n+\n+      #ifdef LIBGCCJIT_HAVE_gcc_jit_lvalue_set_register_name\n+\n Global variables\n ****************\n "}, {"sha": "ff15615b046928dc067f06091cb383547e7eb5db", "filename": "gcc/jit/jit-playback.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Fjit%2Fjit-playback.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Fjit%2Fjit-playback.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.h?ref=5780ff348ad4430383fd67c6f0c572d8c3e721ad", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include <utility> // for std::pair\n \n #include \"timevar.h\"\n+#include \"varasm.h\"\n \n #include \"jit-recording.h\"\n \n@@ -706,6 +707,14 @@ class lvalue : public rvalue\n     set_decl_section_name (as_tree (), name);\n   }\n \n+  void\n+  set_register_name (const char* reg_name)\n+  {\n+    set_user_assembler_name (as_tree (), reg_name);\n+    DECL_REGISTER (as_tree ()) = 1;\n+    DECL_HARD_REGISTER (as_tree ()) = 1;\n+  }\n+\n private:\n   bool mark_addressable (location *loc);\n };"}, {"sha": "dd0bdef420663b0f74894aa50e02edf43c905eab", "filename": "gcc/jit/jit-recording.cc", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Fjit%2Fjit-recording.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Fjit%2Fjit-recording.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.cc?ref=5780ff348ad4430383fd67c6f0c572d8c3e721ad", "patch": "@@ -3965,6 +3965,11 @@ void recording::lvalue::set_link_section (const char *name)\n   m_link_section = new_string (name);\n }\n \n+void recording::lvalue::set_register_name (const char *reg_name)\n+{\n+  m_reg_name = new_string (reg_name);\n+}\n+\n /* The implementation of class gcc::jit::recording::param.  */\n \n /* Implementation of pure virtual hook recording::memento::replay_into\n@@ -4831,6 +4836,9 @@ recording::global::replay_into (replayer *r)\n   if (m_link_section != NULL)\n     global->set_link_section (m_link_section->c_str ());\n \n+  if (m_reg_name != NULL)\n+    global->set_register_name (m_reg_name->c_str ());\n+\n   set_playback_obj (global);\n }\n \n@@ -6551,11 +6559,15 @@ recording::function_pointer::write_reproducer (reproducer &r)\n void\n recording::local::replay_into (replayer *r)\n {\n-  set_playback_obj (\n-    m_func->playback_function ()\n+  playback::lvalue *obj = m_func->playback_function ()\n       ->new_local (playback_location (r, m_loc),\n \t\t   m_type->playback_type (),\n-\t\t   playback_string (m_name)));\n+\t\t   playback_string (m_name));\n+\n+  if (m_reg_name != NULL)\n+    obj->set_register_name (m_reg_name->c_str ());\n+\n+  set_playback_obj (obj);\n }\n \n /* Override the default implementation of"}, {"sha": "80f824ee0495946a51b83fb55046c6eae1c81da1", "filename": "gcc/jit/jit-recording.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Fjit%2Fjit-recording.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Fjit%2Fjit-recording.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.h?ref=5780ff348ad4430383fd67c6f0c572d8c3e721ad", "patch": "@@ -1170,8 +1170,9 @@ class lvalue : public rvalue\n \t  location *loc,\n \t  type *type_)\n     : rvalue (ctxt, loc, type_),\n-    m_tls_model (GCC_JIT_TLS_MODEL_NONE),\n-    m_link_section (NULL)\n+    m_link_section (NULL),\n+    m_reg_name (NULL),\n+    m_tls_model (GCC_JIT_TLS_MODEL_NONE)\n     {}\n \n   playback::lvalue *\n@@ -1195,10 +1196,12 @@ class lvalue : public rvalue\n   virtual bool is_global () const { return false; }\n   void set_tls_model (enum gcc_jit_tls_model model);\n   void set_link_section (const char *name);\n+  void set_register_name (const char *reg_name);\n \n protected:\n-  enum gcc_jit_tls_model m_tls_model;\n   string *m_link_section;\n+  string *m_reg_name;\n+  enum gcc_jit_tls_model m_tls_model;\n };\n \n class param : public lvalue"}, {"sha": "522593b6d8914894d06589742607f94230d1c63c", "filename": "gcc/jit/libgccjit.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Fjit%2Flibgccjit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Fjit%2Flibgccjit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.cc?ref=5780ff348ad4430383fd67c6f0c572d8c3e721ad", "patch": "@@ -2699,6 +2699,20 @@ gcc_jit_lvalue_set_link_section (gcc_jit_lvalue *lvalue,\n   lvalue->set_link_section (section_name);\n }\n \n+/* Public entrypoint.  See description in libgccjit.h.\n+\n+   After error-checking, the real work is done by the\n+   gcc::jit::recording::lvalue::set_register_name method in jit-recording.cc.  */\n+\n+void\n+gcc_jit_lvalue_set_register_name (gcc_jit_lvalue *lvalue,\n+\t\t\t\t  const char *reg_name)\n+{\n+  RETURN_IF_FAIL (lvalue, NULL, NULL, \"NULL lvalue\");\n+  RETURN_IF_FAIL (reg_name, NULL, NULL, \"NULL reg_name\");\n+  lvalue->set_register_name (reg_name);\n+}\n+\n /* Public entrypoint.  See description in libgccjit.h.\n \n    After error-checking, the real work is done by the"}, {"sha": "d3fc93529f6673361d52ff08ffc436076f072abe", "filename": "gcc/jit/libgccjit.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Fjit%2Flibgccjit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Fjit%2Flibgccjit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.h?ref=5780ff348ad4430383fd67c6f0c572d8c3e721ad", "patch": "@@ -1320,6 +1320,18 @@ extern void\n gcc_jit_lvalue_set_link_section (gcc_jit_lvalue *lvalue,\n \t\t\t    const char *section_name);\n \n+#define LIBGCCJIT_HAVE_gcc_jit_lvalue_set_register_name\n+\n+/* Make this variable a register variable and set its register name.\n+\n+   This API entrypoint was added in LIBGCCJIT_ABI_22; you can test for its\n+   presence using\n+     #ifdef LIBGCCJIT_HAVE_gcc_jit_lvalue_set_register_name\n+*/\n+void\n+gcc_jit_lvalue_set_register_name (gcc_jit_lvalue *lvalue,\n+\t\t\t\t  const char *reg_name);\n+\n extern gcc_jit_lvalue *\n gcc_jit_function_new_local (gcc_jit_function *func,\n \t\t\t    gcc_jit_location *loc,"}, {"sha": "4b3de8b02792028415f3500eb06b371da3d97b94", "filename": "gcc/jit/libgccjit.map", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Fjit%2Flibgccjit.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Fjit%2Flibgccjit.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.map?ref=5780ff348ad4430383fd67c6f0c572d8c3e721ad", "patch": "@@ -255,3 +255,8 @@ LIBGCCJIT_ABI_21 {\n   global:\n     gcc_jit_context_new_bitcast;\n } LIBGCCJIT_ABI_20;\n+\n+LIBGCCJIT_ABI_22 {\n+  global:\n+    gcc_jit_lvalue_set_register_name;\n+} LIBGCCJIT_ABI_21;"}, {"sha": "2ab7bbb73532f4b820974def9b0c80ac27e40b77", "filename": "gcc/reginfo.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Freginfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Freginfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freginfo.cc?ref=5780ff348ad4430383fd67c6f0c572d8c3e721ad", "patch": "@@ -122,6 +122,24 @@ const char * reg_class_names[] = REG_CLASS_NAMES;\n    reginfo has been initialized.  */\n static int no_global_reg_vars = 0;\n \n+static void\n+clear_global_regs_cache (void)\n+{\n+  for (size_t i = 0 ; i < FIRST_PSEUDO_REGISTER ; i++)\n+  {\n+    global_regs[i] = 0;\n+    global_regs_decl[i] = NULL;\n+  }\n+}\n+\n+void\n+reginfo_cc_finalize (void)\n+{\n+  clear_global_regs_cache ();\n+  no_global_reg_vars = 0;\n+  CLEAR_HARD_REG_SET (global_reg_set);\n+}\n+\n /* Given a register bitmap, turn on the bits in a HARD_REG_SET that\n    correspond to the hard registers, if any, set in that map.  This\n    could be done far more efficiently by having all sorts of special-cases"}, {"sha": "488016bb42a128916dbcf569d8625cbbca44c76f", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=5780ff348ad4430383fd67c6f0c572d8c3e721ad", "patch": "@@ -3774,6 +3774,7 @@ extern bool resize_reg_info (void);\n extern void free_reg_info (void);\n extern void init_subregs_of_mode (void);\n extern void finish_subregs_of_mode (void);\n+extern void reginfo_cc_finalize (void);\n \n /* recog.cc */\n extern rtx extract_asm_operands (rtx);"}, {"sha": "abf715e65d500e39ee4519b2afda1a918d2a0dcd", "filename": "gcc/testsuite/jit.dg/all-non-failing-tests.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h?ref=5780ff348ad4430383fd67c6f0c572d8c3e721ad", "patch": "@@ -313,6 +313,9 @@\n #undef create_code\n #undef verify_code\n \n+/* test-register-variable.c: This can't be in the testcases array as it\n+   is target-specific.  */\n+\n /* test-string-literal.c */\n #define create_code create_code_string_literal\n #define verify_code verify_code_string_literal"}, {"sha": "7b70ce73dd5246af1c9b2125b1467eb9986176fd", "filename": "gcc/testsuite/jit.dg/harness.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Ftestsuite%2Fjit.dg%2Fharness.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Ftestsuite%2Fjit.dg%2Fharness.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fharness.h?ref=5780ff348ad4430383fd67c6f0c572d8c3e721ad", "patch": "@@ -262,6 +262,10 @@ static void set_options (gcc_jit_context *ctxt, const char *argv0)\n     ctxt,\n     GCC_JIT_BOOL_OPTION_DUMP_SUMMARY,\n     0);\n+  /* Make it easier to compare error messages by disabling colorization,\n+     rather then have them be affected by whether stderr is going to a tty.  */\n+  gcc_jit_context_add_command_line_option\n+    (ctxt, \"-fdiagnostics-color=never\");\n }\n #endif /* #ifndef TEST_ESCHEWS_SET_OPTIONS */\n "}, {"sha": "f2496861eec2224f0b94cbcfed99d2f157eaf44b", "filename": "gcc/testsuite/jit.dg/test-error-register-variable-bad-name.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-register-variable-bad-name.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-register-variable-bad-name.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-register-variable-bad-name.c?ref=5780ff348ad4430383fd67c6f0c572d8c3e721ad", "patch": "@@ -0,0 +1,35 @@\n+/*\n+\n+  Test that the proper error is triggered when we build a register variable\n+  with a register name that doesn't exist.\n+\n+*/\n+\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+#include \"libgccjit.h\"\n+#include \"harness.h\"\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  gcc_jit_type *int_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n+  gcc_jit_lvalue *global_variable =\n+    gcc_jit_context_new_global (\n+      ctxt, NULL, GCC_JIT_GLOBAL_EXPORTED, int_type, \"global_variable\");\n+  gcc_jit_lvalue_set_register_name(global_variable, \"this_is_not_a_register\");\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  /* Ensure that the bad API usage prevents the API giving a bogus\n+     result back.  */\n+  CHECK_VALUE (result, NULL);\n+\n+  /* Verify that the correct error message was emitted. */\n+  CHECK_STRING_VALUE (gcc_jit_context_get_last_error (ctxt),\n+\t\t      \"invalid register name for 'global_variable'\");\n+}"}, {"sha": "edea50f81040896ee9eee1e8deae7e034d373c25", "filename": "gcc/testsuite/jit.dg/test-error-register-variable-size-mismatch.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-register-variable-size-mismatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-register-variable-size-mismatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-register-variable-size-mismatch.c?ref=5780ff348ad4430383fd67c6f0c572d8c3e721ad", "patch": "@@ -0,0 +1,38 @@\n+/*\n+\n+  Test that the proper error is triggered when we build a register variable\n+  with a register name that doesn't exist.\n+\n+*/\n+\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+#include \"libgccjit.h\"\n+#include \"harness.h\"\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  gcc_jit_type *int_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n+  gcc_jit_type *array_type =\n+    gcc_jit_context_new_array_type (ctxt, NULL, int_type, 4096);\n+  gcc_jit_lvalue *global_variable =\n+    gcc_jit_context_new_global (\n+      ctxt, NULL, GCC_JIT_GLOBAL_EXPORTED, array_type, \"global_variable\");\n+  gcc_jit_lvalue_set_register_name(global_variable, \"r12\");\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  /* Ensure that the bad API usage prevents the API giving a bogus\n+     result back.  */\n+  CHECK_VALUE (result, NULL);\n+\n+  /* Verify that the correct error message was emitted. */\n+  CHECK_STRING_VALUE\n+    (gcc_jit_context_get_last_error (ctxt),\n+     \"data type of 'global_variable' isn't suitable for a register\");\n+}"}, {"sha": "ce6dcaa921325be61d446fbbdf2f9900a074afe1", "filename": "gcc/testsuite/jit.dg/test-register-variable.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Ftestsuite%2Fjit.dg%2Ftest-register-variable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Ftestsuite%2Fjit.dg%2Ftest-register-variable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-register-variable.c?ref=5780ff348ad4430383fd67c6f0c572d8c3e721ad", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile { target x86_64-*-* } } */\n+\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+#include \"libgccjit.h\"\n+\n+/* We don't want set_options() in harness.h to set -O3 so our little local\n+   is optimized away. */\n+#define TEST_ESCHEWS_SET_OPTIONS\n+static void set_options (gcc_jit_context *ctxt, const char *argv0)\n+{\n+}\n+\n+#define TEST_COMPILING_TO_FILE\n+#define OUTPUT_KIND      GCC_JIT_OUTPUT_KIND_ASSEMBLER\n+#define OUTPUT_FILENAME  \"output-of-test-link-section-assembler.c.s\"\n+#include \"harness.h\"\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  /* Let's try to inject the equivalent of:\n+     register int global_variable asm (\"r13\");\n+     int main() {\n+        register int variable asm (\"r12\");\n+        return 0;\n+     }\n+  */\n+  gcc_jit_type *int_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n+  gcc_jit_lvalue *global_variable =\n+    gcc_jit_context_new_global (\n+      ctxt, NULL, GCC_JIT_GLOBAL_EXPORTED, int_type, \"global_variable\");\n+  gcc_jit_lvalue_set_register_name(global_variable, \"r13\");\n+\n+  gcc_jit_function *func_main =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+\t\t\t\t  GCC_JIT_FUNCTION_EXPORTED,\n+\t\t\t\t  int_type,\n+\t\t\t\t  \"main\",\n+\t\t\t\t  0, NULL,\n+\t\t\t\t  0);\n+  gcc_jit_lvalue *variable = gcc_jit_function_new_local(func_main, NULL, int_type, \"variable\");\n+  gcc_jit_lvalue_set_register_name(variable, \"r12\");\n+  gcc_jit_rvalue *two = gcc_jit_context_new_rvalue_from_int (ctxt, int_type, 2);\n+  gcc_jit_rvalue *one = gcc_jit_context_one (ctxt, int_type);\n+  gcc_jit_block *block = gcc_jit_function_new_block (func_main, NULL);\n+  gcc_jit_block_add_assignment(block, NULL, variable, one);\n+  gcc_jit_block_add_assignment(block, NULL, global_variable, two);\n+  gcc_jit_block_end_with_return (block, NULL, gcc_jit_lvalue_as_rvalue(variable));\n+}\n+\n+/* { dg-final { jit-verify-output-file-was-created \"\" } } */\n+/* { dg-final { jit-verify-assembler-output \"movl\t\\\\\\$1, %r12d\" } } */\n+/* { dg-final { jit-verify-assembler-output \"movl\t\\\\\\$2, %r13d\" } } */"}, {"sha": "ed546b2cad80e4fa6e3614c8b572c8d6290ee77a", "filename": "gcc/toplev.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Ftoplev.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5780ff348ad4430383fd67c6f0c572d8c3e721ad/gcc%2Ftoplev.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.cc?ref=5780ff348ad4430383fd67c6f0c572d8c3e721ad", "patch": "@@ -2379,6 +2379,7 @@ toplev::finalize (void)\n   ipa_cp_cc_finalize ();\n   ira_costs_cc_finalize ();\n   tree_cc_finalize ();\n+  reginfo_cc_finalize ();\n \n   /* save_decoded_options uses opts_obstack, so these must\n      be cleaned up together.  */"}]}