{"sha": "d0ba67dc043059f7eeaece0f6460709d20133cc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBiYTY3ZGMwNDMwNTlmN2VlYWVjZTBmNjQ2MDcwOWQyMDEzM2NjMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-06-11T15:16:45Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-06-11T15:16:45Z"}, "message": "re PR c++/19200 (Friend declaration misinterpreted as constructor)\n\n/cp\n2014-06-11  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/19200\n\t* parser.c (cp_parser_declarator): Add bool parameter.\n\t(cp_parser_direct_declarator): Likewise, use it.\n\t(cp_parser_member_declaration): Pass friend_p to cp_parser_declarator.\n\t(cp_parser_condition, cp_parser_explicit_instantiation,\n\tcp_parser_init_declarator, cp_parser_type_id_1,\n\tcp_parser_parameter_declaration, cp_parser_exception_declaration,\n\tcp_parser_cache_defarg, cp_parser_objc_class_ivars,\n\tcp_parser_objc_struct_declaration, cp_parser_omp_for_loop_init):\n\tAdjust.\n\t* decl.c (grokdeclarator): Fix handling of friend declared in\n\tnamespace scope (g++.dg/parse/friend10.C).\n\n/testsuite\n2014-06-11  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/19200\n\t* g++.dg/parse/friend9.C: New.\n\t* g++.dg/parse/friend10.C: Likewise.\n\t* g++.dg/parse/friend7.C: Adjust.\n\nFrom-SVN: r211467", "tree": {"sha": "818298a304770ede7b7a3bee66865559a4dea8ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/818298a304770ede7b7a3bee66865559a4dea8ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0ba67dc043059f7eeaece0f6460709d20133cc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0ba67dc043059f7eeaece0f6460709d20133cc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0ba67dc043059f7eeaece0f6460709d20133cc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0ba67dc043059f7eeaece0f6460709d20133cc0/comments", "author": null, "committer": null, "parents": [{"sha": "f8c59c050940a36f5aef5b1873bf253935c78fa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8c59c050940a36f5aef5b1873bf253935c78fa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8c59c050940a36f5aef5b1873bf253935c78fa7"}], "stats": {"total": 122, "additions": 95, "deletions": 27}, "files": [{"sha": "e330f73ad048ce0ac8d5e747b43913d90d75f992", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ba67dc043059f7eeaece0f6460709d20133cc0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ba67dc043059f7eeaece0f6460709d20133cc0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d0ba67dc043059f7eeaece0f6460709d20133cc0", "patch": "@@ -1,6 +1,22 @@\n+2014-06-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/19200\n+\t* parser.c (cp_parser_declarator): Add bool parameter.\n+\t(cp_parser_direct_declarator): Likewise, use it.\n+\t(cp_parser_member_declaration): Pass friend_p to cp_parser_declarator.\n+\t(cp_parser_condition, cp_parser_explicit_instantiation,\n+\tcp_parser_init_declarator, cp_parser_type_id_1,\n+\tcp_parser_parameter_declaration, cp_parser_exception_declaration,\n+\tcp_parser_cache_defarg, cp_parser_objc_class_ivars,\n+\tcp_parser_objc_struct_declaration, cp_parser_omp_for_loop_init):\n+\tAdjust.\n+\t* decl.c (grokdeclarator): Fix handling of friend declared in\n+\tnamespace scope (g++.dg/parse/friend10.C).\n+\n 2014-06-10  Jan Hubicka  <hubicka@ucw.cz>\n \n-\t* vtable-class-hierarchy.c: Use symtab_get_node (var_decl)->implicit_section.\n+\t* vtable-class-hierarchy.c: Use symtab_get_node (var_decl)\n+\t->implicit_section.\n \t* optimize.c (cdtor_comdat_group): Fix handling of aliases.\n \t(maybe_clone_body): Move symbol across comdat groups.\n \t* method.c (use_thunk): Copy implicit section flag."}, {"sha": "08f621ad2bd0f4533b621ad7be5725d32dc9677b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ba67dc043059f7eeaece0f6460709d20133cc0/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ba67dc043059f7eeaece0f6460709d20133cc0/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d0ba67dc043059f7eeaece0f6460709d20133cc0", "patch": "@@ -9686,7 +9686,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t    if (ctype == NULL_TREE\n \t\t&& decl_context == FIELD\n \t\t&& funcdecl_p\n-\t\t&& (friendp == 0 || dname == current_class_name))\n+\t\t&& friendp == 0)\n \t      ctype = current_class_type;\n \n \t    if (ctype && (sfk == sfk_constructor"}, {"sha": "22d7ba69fe6d7755c5e48a27bce3e2ba8f1583f5", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 51, "deletions": 21, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ba67dc043059f7eeaece0f6460709d20133cc0/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ba67dc043059f7eeaece0f6460709d20133cc0/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=d0ba67dc043059f7eeaece0f6460709d20133cc0", "patch": "@@ -2078,9 +2078,9 @@ static tree cp_parser_decltype\n static tree cp_parser_init_declarator\n   (cp_parser *, cp_decl_specifier_seq *, vec<deferred_access_check, va_gc> *, bool, bool, int, bool *, tree *);\n static cp_declarator *cp_parser_declarator\n-  (cp_parser *, cp_parser_declarator_kind, int *, bool *, bool);\n+  (cp_parser *, cp_parser_declarator_kind, int *, bool *, bool, bool);\n static cp_declarator *cp_parser_direct_declarator\n-  (cp_parser *, cp_parser_declarator_kind, int *, bool);\n+  (cp_parser *, cp_parser_declarator_kind, int *, bool, bool);\n static enum tree_code cp_parser_ptr_operator\n   (cp_parser *, tree *, cp_cv_quals *, tree *);\n static cp_cv_quals cp_parser_cv_qualifier_seq_opt\n@@ -10014,7 +10014,8 @@ cp_parser_condition (cp_parser* parser)\n       declarator = cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,\n \t\t\t\t\t /*ctor_dtor_or_conv_p=*/NULL,\n \t\t\t\t\t /*parenthesized_p=*/NULL,\n-\t\t\t\t\t /*member_p=*/false);\n+\t\t\t\t\t /*member_p=*/false,\n+\t\t\t\t\t /*friend_p=*/false);\n       /* Parse the attributes.  */\n       attributes = cp_parser_attributes_opt (parser);\n       /* Parse the asm-specification.  */\n@@ -14160,7 +14161,8 @@ cp_parser_explicit_instantiation (cp_parser* parser)\n \t= cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,\n \t\t\t\t/*ctor_dtor_or_conv_p=*/NULL,\n \t\t\t\t/*parenthesized_p=*/NULL,\n-\t\t\t\t/*member_p=*/false);\n+\t\t\t\t/*member_p=*/false,\n+\t\t\t\t/*friend_p=*/false);\n       if (declares_class_or_enum & 2)\n \tcp_parser_check_for_definition_in_return_type (declarator,\n \t\t\t\t\t\t       decl_specifiers.type,\n@@ -16570,7 +16572,7 @@ cp_parser_init_declarator (cp_parser* parser,\n     = cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,\n \t\t\t    &ctor_dtor_or_conv_p,\n \t\t\t    /*parenthesized_p=*/NULL,\n-\t\t\t    member_p);\n+\t\t\t    member_p, /*friend_p=*/false);\n   /* Gather up the deferred checks.  */\n   stop_deferring_access_checks ();\n \n@@ -16958,14 +16960,16 @@ cp_parser_init_declarator (cp_parser* parser,\n    If PARENTHESIZED_P is non-NULL, *PARENTHESIZED_P is set to true iff\n    the declarator is a direct-declarator of the form \"(...)\".\n \n-   MEMBER_P is true iff this declarator is a member-declarator.  */\n+   MEMBER_P is true iff this declarator is a member-declarator.\n+\n+   FRIEND_P is true iff this declarator is a friend.  */\n \n static cp_declarator *\n cp_parser_declarator (cp_parser* parser,\n \t\t      cp_parser_declarator_kind dcl_kind,\n \t\t      int* ctor_dtor_or_conv_p,\n \t\t      bool* parenthesized_p,\n-\t\t      bool member_p)\n+\t\t      bool member_p, bool friend_p)\n {\n   cp_declarator *declarator;\n   enum tree_code code;\n@@ -17005,7 +17009,8 @@ cp_parser_declarator (cp_parser* parser,\n       declarator = cp_parser_declarator (parser, dcl_kind,\n \t\t\t\t\t /*ctor_dtor_or_conv_p=*/NULL,\n \t\t\t\t\t /*parenthesized_p=*/NULL,\n-\t\t\t\t\t /*member_p=*/false);\n+\t\t\t\t\t /*member_p=*/false,\n+\t\t\t\t\t friend_p);\n \n       /* If we are parsing an abstract-declarator, we must handle the\n \t case where the dependent declarator is absent.  */\n@@ -17024,7 +17029,7 @@ cp_parser_declarator (cp_parser* parser,\n \t\t\t\t\t\t   CPP_OPEN_PAREN);\n       declarator = cp_parser_direct_declarator (parser, dcl_kind,\n \t\t\t\t\t\tctor_dtor_or_conv_p,\n-\t\t\t\t\t\tmember_p);\n+\t\t\t\t\t\tmember_p, friend_p);\n     }\n \n   if (gnu_attributes && declarator && declarator != cp_error_declarator)\n@@ -17058,14 +17063,14 @@ cp_parser_declarator (cp_parser* parser,\n    we are parsing a direct-declarator.  It is\n    CP_PARSER_DECLARATOR_EITHER, if we can accept either - in the case\n    of ambiguity we prefer an abstract declarator, as per\n-   [dcl.ambig.res].  CTOR_DTOR_OR_CONV_P and MEMBER_P are as for\n-   cp_parser_declarator.  */\n+   [dcl.ambig.res].  CTOR_DTOR_OR_CONV_P, MEMBER_P, and FRIEND_P are\n+   as for cp_parser_declarator.  */\n \n static cp_declarator *\n cp_parser_direct_declarator (cp_parser* parser,\n \t\t\t     cp_parser_declarator_kind dcl_kind,\n \t\t\t     int* ctor_dtor_or_conv_p,\n-\t\t\t     bool member_p)\n+\t\t\t     bool member_p, bool friend_p)\n {\n   cp_token *token;\n   cp_declarator *declarator = NULL;\n@@ -17246,7 +17251,7 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t      declarator\n \t\t= cp_parser_declarator (parser, dcl_kind, ctor_dtor_or_conv_p,\n \t\t\t\t\t/*parenthesized_p=*/NULL,\n-\t\t\t\t\tmember_p);\n+\t\t\t\t\tmember_p, friend_p);\n \t      parser->in_type_id_in_expr_p = saved_in_type_id_in_expr_p;\n \t      first = false;\n \t      /* Expect a `)'.  */\n@@ -17492,6 +17497,24 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t\t\t\tfor an anonymous type, even if the type\n \t\t\t\tgot a name for linkage purposes.  */\n \t\t\t     !TYPE_WAS_ANONYMOUS (class_type)\n+\t\t\t     /* Handle correctly (c++/19200):\n+\n+\t\t\t\tstruct S {\n+\t\t\t\t  struct T{};\n+\t\t\t\t  friend void S(T);\n+\t\t\t\t};\n+\n+\t\t\t\tand also:\n+\n+\t\t\t\tnamespace N {\n+\t\t\t\t  void S();\n+\t\t\t\t}\n+\n+\t\t\t\tstruct S {\n+\t\t\t\t  friend void N::S();\n+\t\t\t\t};  */\n+\t\t\t     && !(friend_p\n+\t\t\t\t  && class_type != qualifying_scope)\n \t\t\t     && constructor_name_p (unqualified_name,\n \t\t\t\t\t\t    class_type))\n \t\t      {\n@@ -18035,7 +18058,8 @@ cp_parser_type_id_1 (cp_parser* parser, bool is_template_arg,\n   abstract_declarator\n     = cp_parser_declarator (parser, CP_PARSER_DECLARATOR_ABSTRACT, NULL,\n \t\t\t    /*parenthesized_p=*/NULL,\n-\t\t\t    /*member_p=*/false);\n+\t\t\t    /*member_p=*/false,\n+\t\t\t    /*friend_p=*/false);\n   /* Check to see if there really was a declarator.  */\n   if (!cp_parser_parse_definitely (parser))\n     abstract_declarator = NULL;\n@@ -18610,7 +18634,8 @@ cp_parser_parameter_declaration (cp_parser *parser,\n \t\t\t\t\t CP_PARSER_DECLARATOR_EITHER,\n \t\t\t\t\t /*ctor_dtor_or_conv_p=*/NULL,\n \t\t\t\t\t parenthesized_p,\n-\t\t\t\t\t /*member_p=*/false);\n+\t\t\t\t\t /*member_p=*/false,\n+\t\t\t\t\t /*friend_p=*/false);\n       parser->default_arg_ok_p = saved_default_arg_ok_p;\n       /* After the declarator, allow more attributes.  */\n       decl_specifiers.attributes\n@@ -20446,7 +20471,8 @@ cp_parser_member_declaration (cp_parser* parser)\n \t\t= cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,\n \t\t\t\t\t&ctor_dtor_or_conv_p,\n \t\t\t\t\t/*parenthesized_p=*/NULL,\n-\t\t\t\t\t/*member_p=*/true);\n+\t\t\t\t\t/*member_p=*/true,\n+\t\t\t\t\tfriend_p);\n \n \t      /* If something went wrong parsing the declarator, make sure\n \t\t that we at least consume some tokens.  */\n@@ -21274,7 +21300,8 @@ cp_parser_exception_declaration (cp_parser* parser)\n     declarator = cp_parser_declarator (parser, CP_PARSER_DECLARATOR_EITHER,\n \t\t\t\t       /*ctor_dtor_or_conv_p=*/NULL,\n \t\t\t\t       /*parenthesized_p=*/NULL,\n-\t\t\t\t       /*member_p=*/false);\n+\t\t\t\t       /*member_p=*/false,\n+\t\t\t\t       /*friend_p=*/false);\n \n   /* Restore the saved message.  */\n   parser->type_definition_forbidden_message = saved_message;\n@@ -24820,7 +24847,8 @@ cp_parser_cache_defarg (cp_parser *parser, bool nsdmi)\n \t\t  cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,\n \t\t\t\t\t&ctor_dtor_or_conv_p,\n \t\t\t\t\t/*parenthesized_p=*/NULL,\n-\t\t\t\t\t/*member_p=*/true);\n+\t\t\t\t\t/*member_p=*/true,\n+\t\t\t\t\t/*friend_p=*/false);\n \t\t}\n \t      else\n \t\t{\n@@ -26106,7 +26134,8 @@ cp_parser_objc_class_ivars (cp_parser* parser)\n \t\t= cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,\n \t\t\t\t\t&ctor_dtor_or_conv_p,\n \t\t\t\t\t/*parenthesized_p=*/NULL,\n-\t\t\t\t\t/*member_p=*/false);\n+\t\t\t\t\t/*member_p=*/false,\n+\t\t\t\t\t/*friend_p=*/false);\n \t    }\n \n \t  /* Look for attributes that apply to the ivar.  */\n@@ -26657,7 +26686,7 @@ cp_parser_objc_struct_declaration (cp_parser *parser)\n \n       /* Parse the declarator.  */\n       declarator = cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,\n-\t\t\t\t\t NULL, NULL, false);\n+\t\t\t\t\t NULL, NULL, false, false);\n \n       /* Look for attributes that apply to the ivar.  */\n       attributes = cp_parser_attributes_opt (parser);\n@@ -29170,7 +29199,8 @@ cp_parser_omp_for_loop_init (cp_parser *parser,\n \t\t\t\t\t CP_PARSER_DECLARATOR_NAMED,\n \t\t\t\t\t /*ctor_dtor_or_conv_p=*/NULL,\n \t\t\t\t\t /*parenthesized_p=*/NULL,\n-\t\t\t\t\t /*member_p=*/false);\n+\t\t\t\t\t /*member_p=*/false,\n+\t\t\t\t\t /*friend_p=*/false);\n       attributes = cp_parser_attributes_opt (parser);\n       asm_specification = cp_parser_asm_specification_opt (parser);\n "}, {"sha": "12502181eb047e972c43f079ee5657f1dbc41008", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ba67dc043059f7eeaece0f6460709d20133cc0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ba67dc043059f7eeaece0f6460709d20133cc0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d0ba67dc043059f7eeaece0f6460709d20133cc0", "patch": "@@ -1,3 +1,10 @@\n+2014-06-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/19200\n+\t* g++.dg/parse/friend9.C: New.\n+\t* g++.dg/parse/friend10.C: Likewise.\n+\t* g++.dg/parse/friend7.C: Adjust.\n+\n 2014-06-11  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/61452"}, {"sha": "16c2e0a7f363d7665e7608a4ceb30bdc44bea3a4", "filename": "gcc/testsuite/g++.dg/parse/friend10.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ba67dc043059f7eeaece0f6460709d20133cc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffriend10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ba67dc043059f7eeaece0f6460709d20133cc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffriend10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffriend10.C?ref=d0ba67dc043059f7eeaece0f6460709d20133cc0", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/19200\n+\n+namespace N {\n+  void S();\n+}\n+\n+struct S {\n+  friend void N::S();\n+};"}, {"sha": "72ab430ef1bb8f75c19f8385791ec89e4da9bb5d", "filename": "gcc/testsuite/g++.dg/parse/friend7.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ba67dc043059f7eeaece0f6460709d20133cc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffriend7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ba67dc043059f7eeaece0f6460709d20133cc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffriend7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffriend7.C?ref=d0ba67dc043059f7eeaece0f6460709d20133cc0", "patch": "@@ -17,16 +17,16 @@ struct B\n \n struct C\n {\n-  friend int C ();\t\t// { dg-error \"return type|in friend decl\" }\n+  friend int C ();\n   friend int ~C ();\t\t// { dg-error \"return type|in friend decl\" }\n-  friend int C (const C &);\t// { dg-error \"return type|in friend decl\" }\n+  friend int C (const C &);\n };\n \n struct D\n {\n-  friend int D () {}\t\t// { dg-error \"return type|in friend decl\" }\n+  friend int D () {}\n   friend int ~D () {}\t\t// { dg-error \"return type|in friend decl\" }\n-  friend int D (const D &) {}\t// { dg-error \"return type|in friend decl\" }\n+  friend int D (const D &) {}\n };\n \n struct E"}, {"sha": "dd6729f17a67d95eec5f43e313c011e44036a4b7", "filename": "gcc/testsuite/g++.dg/parse/friend9.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ba67dc043059f7eeaece0f6460709d20133cc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffriend9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ba67dc043059f7eeaece0f6460709d20133cc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffriend9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffriend9.C?ref=d0ba67dc043059f7eeaece0f6460709d20133cc0", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/19200\n+\n+struct S {\n+  struct T{};\n+  friend void S(T);\n+};"}]}