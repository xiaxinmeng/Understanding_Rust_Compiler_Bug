{"sha": "09625c1681b30febed411fa7526cf4b620a54ab3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk2MjVjMTY4MWIzMGZlYmVkNDExZmE3NTI2Y2Y0YjYyMGE1NGFiMw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-01-11T15:17:02Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-01-11T15:17:02Z"}, "message": "re PR libstdc++/13582 (basic_filebuf::imbue drops characters)\n\n2004-01-11  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/13582\n\t* include/bits/fstream.tcc (imbue): Exploit the external\n\tbuffer to imbue 'on the fly' a new locale and convert its\n\tremainder with the new codecvt facet.\n\t(underflow): Tweak slightly to deal with this special case.\n\t* testsuite/27_io/basic_filebuf/imbue/char/13582-2.cc: New.\n\t* testsuite/27_io/basic_filebuf/imbue/wchar_t/13582-2.cc: Ditto.\n\t* testsuite/27_io/basic_filebuf/imbue/wchar_t/13582-3.cc: Ditto.\n\t* testsuite/27_io/objects/wchar_t/13582-1_xin.cc: Ditto.\n\t* testsuite/27_io/objects/wchar_t/13582-1_xin.in: Ditto.\n\nFrom-SVN: r75677", "tree": {"sha": "265078aa8a455b8d2943d54accb0d8d8122148c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/265078aa8a455b8d2943d54accb0d8d8122148c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09625c1681b30febed411fa7526cf4b620a54ab3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09625c1681b30febed411fa7526cf4b620a54ab3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09625c1681b30febed411fa7526cf4b620a54ab3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09625c1681b30febed411fa7526cf4b620a54ab3/comments", "author": null, "committer": null, "parents": [{"sha": "df9bad81839fd9e5323543cbfe74d9859eb4dc1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df9bad81839fd9e5323543cbfe74d9859eb4dc1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df9bad81839fd9e5323543cbfe74d9859eb4dc1a"}], "stats": {"total": 376, "additions": 359, "deletions": 17}, "files": [{"sha": "1c425f138875da928d6d3e3f8b867b13266a8239", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09625c1681b30febed411fa7526cf4b620a54ab3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09625c1681b30febed411fa7526cf4b620a54ab3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=09625c1681b30febed411fa7526cf4b620a54ab3", "patch": "@@ -1,3 +1,16 @@\n+2004-01-11  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/13582\n+\t* include/bits/fstream.tcc (imbue): Exploit the external\n+\tbuffer to imbue 'on the fly' a new locale and convert its\n+\tremainder with the new codecvt facet.\n+\t(underflow): Tweak slightly to deal with this special case.\n+\t* testsuite/27_io/basic_filebuf/imbue/char/13582-2.cc: New.\n+\t* testsuite/27_io/basic_filebuf/imbue/wchar_t/13582-2.cc: Ditto.\n+\t* testsuite/27_io/basic_filebuf/imbue/wchar_t/13582-3.cc: Ditto.\n+\t* testsuite/27_io/objects/wchar_t/13582-1_xin.cc: Ditto.\n+\t* testsuite/27_io/objects/wchar_t/13582-1_xin.in: Ditto.\n+\t\n 2004-01-10  Paolo Carlini  <pcarlini@suse.de>\n \n \t* docs/html/ext/lwg-active.html, docs/html/ext/lwg-defects.html:"}, {"sha": "ed2fb6aace9756554573497115946e3936c6cd97", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 52, "deletions": 17, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09625c1681b30febed411fa7526cf4b620a54ab3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09625c1681b30febed411fa7526cf4b620a54ab3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=09625c1681b30febed411fa7526cf4b620a54ab3", "patch": "@@ -1,6 +1,6 @@\n // File based streams -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -171,7 +171,7 @@ namespace std\n \t}\n       return __ret;\n     }\n-  \n+\n   template<typename _CharT, typename _Traits>\n     typename basic_filebuf<_CharT, _Traits>::int_type \n     basic_filebuf<_CharT, _Traits>::\n@@ -222,20 +222,25 @@ namespace std\n \t\t}\n \t      const streamsize __remainder = _M_ext_end - _M_ext_next;\n \t      __rlen = __rlen > __remainder ? __rlen - __remainder : 0;\n-\t      \n+\n+\t      // An imbue in 'read' mode implies first converting the external\n+\t      // chars already present.\n+\t      if (_M_reading && this->egptr() == this->eback() && __remainder)\n+\t\t__rlen = 0;\n+      \n \t      // Allocate buffer if necessary and move unconverted\n \t      // bytes to front.\n \t      if (_M_ext_buf_size < __blen)\n \t\t{\n \t\t  char* __buf = new char[__blen];\n-\t\t  if (__remainder > 0)\n+\t\t  if (__remainder)\n \t\t    std::memcpy(__buf, _M_ext_next, __remainder);\n \n \t\t  delete [] _M_ext_buf;\n \t\t  _M_ext_buf = __buf;\n \t\t  _M_ext_buf_size = __blen;\n \t\t}\n-\t      else if (__remainder > 0)\n+\t      else if (__remainder)\n \t\tstd::memmove(_M_ext_buf, _M_ext_next, __remainder);\n \n \t      _M_ext_next = _M_ext_buf;\n@@ -738,22 +743,52 @@ namespace std\n     basic_filebuf<_CharT, _Traits>::\n     imbue(const locale& __loc)\n     {\n-      bool __testfail = false;\n-      if (this->is_open())\n-\t{\n-\t  const pos_type __ret = this->seekoff(0, ios_base::cur,\n-\t\t\t\t\t       this->_M_mode);\n-\t  const bool __teststate = __check_facet(_M_codecvt).encoding() == -1;\n-\t  __testfail = __teststate && __ret != pos_type(off_type(0));\n-\t}\n+      bool __testvalid = true;\n+\n+      const __codecvt_type* _M_codecvt_tmp = 0;\n+      if (__builtin_expect(has_facet<__codecvt_type>(__loc), true))\t      \n+\t_M_codecvt_tmp = &use_facet<__codecvt_type>(__loc);      \n \n-      if (!__testfail)\n+      if (this->is_open())\n \t{\n-\t  if (__builtin_expect(has_facet<__codecvt_type>(__loc), true))\n-\t    _M_codecvt = &use_facet<__codecvt_type>(__loc);\n+\t  // encoding() == -1 is ok only at the beginning.\n+\t  if ((_M_reading || _M_writing)\n+\t      && __check_facet(_M_codecvt).encoding() == -1)\n+\t    __testvalid = false;\n \t  else\n-\t    _M_codecvt = 0;\n+\t    {\n+\t      if (_M_reading)\n+\t\t{\n+\t\t  if (__check_facet(_M_codecvt).always_noconv())\n+\t\t    {\n+\t\t      if (_M_codecvt_tmp\n+\t\t\t  && !__check_facet(_M_codecvt_tmp).always_noconv())\n+\t\t\t__testvalid = this->seekoff(0, ios_base::cur, this->_M_mode)\n+\t\t\t              != pos_type(off_type(-1));\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      // External position corresponding to gptr().\n+\t\t      _M_ext_next = _M_ext_buf \n+\t\t\t+ _M_codecvt->length(_M_state_last, _M_ext_buf, _M_ext_next,\n+\t\t\t\t\t     this->gptr() - this->eback());\n+\t\t      const streamsize __remainder = _M_ext_end - _M_ext_next;\n+\t\t      if (__remainder)\n+\t\t\tstd::memmove(_M_ext_buf, _M_ext_next, __remainder);\n+\n+\t\t      _M_ext_next = _M_ext_buf;\n+\t\t      _M_ext_end = _M_ext_buf + __remainder;\n+\t\t      _M_set_buffer(-1);\n+\t\t      _M_state_last = _M_state_cur = _M_state_beg;\n+\t\t    }\n+\t\t}\n+\t      else if (_M_writing && (__testvalid = _M_terminate_output()))\n+\t\t_M_set_buffer(-1);\n+\t    }\n \t}\n+\n+      if (__testvalid)\n+\t_M_codecvt = _M_codecvt_tmp;\n     }\n \n   // Inhibit implicit instantiations for required instantiations,"}, {"sha": "7bab4c5b43959b0fb8db8cd751557d09686ea008", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/imbue/char/13582-2.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09625c1681b30febed411fa7526cf4b620a54ab3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fchar%2F13582-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09625c1681b30febed411fa7526cf4b620a54ab3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fchar%2F13582-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fchar%2F13582-2.cc?ref=09625c1681b30febed411fa7526cf4b620a54ab3", "patch": "@@ -0,0 +1,80 @@\n+// 2004-01-11  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <locale>\n+\n+#include <unistd.h>\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/13582\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std; \n+\n+  locale loc_en(__gnu_test::try_named_locale(\"en_US\"));\n+  locale loc_fr(__gnu_test::try_named_locale(\"fr_FR\"));\n+\n+  const char* name = \"tmp_fifo_13582-2\";\n+  unlink(name);\n+  mkfifo(name, S_IRWXU);\n+  \n+  int child = fork();\n+  if (child == 0)\n+    {\n+      filebuf fbout;\n+      fbout.open(name, ios_base::out);\n+      fbout.sputn(\"12345\", 5);\n+      fbout.pubsync();\n+      sleep(2);\n+      fbout.close();\n+      exit(0);\n+    }\n+\n+  filebuf fbin;\n+  fbin.open(name, ios_base::in);\n+  sleep(1);\n+  filebuf::int_type n = fbin.sbumpc();\n+  VERIFY( n == '1' );\n+  fbin.pubimbue(loc_en);\n+  n = fbin.sbumpc();\n+  VERIFY( n == '2' );\n+  fbin.pubimbue(loc_fr);\n+  n = fbin.sbumpc();\n+  VERIFY( n == '3' );\n+  n = fbin.sbumpc();\n+  VERIFY( n == '4' );\n+  n = fbin.sbumpc();\n+  VERIFY( n == '5' );\n+  n = fbin.sbumpc();\n+  VERIFY( n == filebuf::traits_type::eof() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "83ce03b0b372e616052f1875ac83353275a9dfc5", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/imbue/wchar_t/13582-2.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09625c1681b30febed411fa7526cf4b620a54ab3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fwchar_t%2F13582-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09625c1681b30febed411fa7526cf4b620a54ab3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fwchar_t%2F13582-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fwchar_t%2F13582-2.cc?ref=09625c1681b30febed411fa7526cf4b620a54ab3", "patch": "@@ -0,0 +1,80 @@\n+// 2004-01-11  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <locale>\n+\n+#include <unistd.h>\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/13582\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std; \n+\n+  locale loc_en(__gnu_test::try_named_locale(\"en_US\"));\n+  locale loc_fr(__gnu_test::try_named_locale(\"fr_FR\"));\n+\n+  const char* name = \"tmp_fifo_13582-2\";\n+  unlink(name);\n+  mkfifo(name, S_IRWXU);\n+  \n+  int child = fork();\n+  if (child == 0)\n+    {\n+      filebuf fbout;\n+      fbout.open(name, ios_base::out);\n+      fbout.sputn(\"12345\", 5);\n+      fbout.pubsync();\n+      sleep(2);\n+      fbout.close();\n+      exit(0);\n+    }\n+\n+  wfilebuf fbin;\n+  fbin.open(name, ios_base::in);\n+  sleep(1);\n+  wfilebuf::int_type n = fbin.sbumpc();\n+  VERIFY( n == L'1' );\n+  fbin.pubimbue(loc_en);\n+  n = fbin.sbumpc();\n+  VERIFY( n == L'2' );\n+  fbin.pubimbue(loc_fr);\n+  n = fbin.sbumpc();\n+  VERIFY( n == L'3' );\n+  n = fbin.sbumpc();\n+  VERIFY( n == L'4' );\n+  n = fbin.sbumpc();\n+  VERIFY( n == L'5' );\n+  n = fbin.sbumpc();\n+  VERIFY( n == wfilebuf::traits_type::eof() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "afda81412cb296bc6110a5a22d7ac42f57efafa1", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/imbue/wchar_t/13582-3.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09625c1681b30febed411fa7526cf4b620a54ab3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fwchar_t%2F13582-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09625c1681b30febed411fa7526cf4b620a54ab3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fwchar_t%2F13582-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fwchar_t%2F13582-3.cc?ref=09625c1681b30febed411fa7526cf4b620a54ab3", "patch": "@@ -0,0 +1,72 @@\n+// 2004-01-11  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/13582\n+int test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  locale loc_en(__gnu_test::try_named_locale(\"en_US\"));\n+  locale loc_fr(__gnu_test::try_named_locale(\"fr_FR\"));\n+\n+  const char* name = \"tmp_13582-3.tst\";\n+\n+  {\n+    filebuf fbout;\n+    fbout.open(name, ios_base::out);\n+    fbout.sputn(\"AbCdE\", 5);\n+    fbout.close();\n+  }\n+\n+  {\n+    wfilebuf fbin;\n+    fbin.open(name, ios_base::in);\n+    wfilebuf::int_type n = fbin.sbumpc();\n+    VERIFY( n == L'A' );\n+    fbin.pubimbue(loc_en);\n+    fbin.pubseekoff(0, ios_base::cur);\n+    n = fbin.sbumpc();\n+    VERIFY( n == L'b' );\n+    fbin.pubimbue(loc_fr);\n+    n = fbin.sbumpc();\n+    VERIFY( n == L'C' );\n+    n = fbin.sbumpc();\n+    VERIFY( n == L'd' );\n+    fbin.pubseekoff(0, ios_base::cur);\n+    n = fbin.sbumpc();\n+    VERIFY( n == L'E' );\n+    n = fbin.sbumpc();\n+    VERIFY( n == wfilebuf::traits_type::eof() );\n+    fbin.close();\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "008bf7e939997dba1292b7f1b6d5f568253a9fb4", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/13582-1_xin.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09625c1681b30febed411fa7526cf4b620a54ab3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F13582-1_xin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09625c1681b30febed411fa7526cf4b620a54ab3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F13582-1_xin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F13582-1_xin.cc?ref=09625c1681b30febed411fa7526cf4b620a54ab3", "patch": "@@ -0,0 +1,61 @@\n+// 2004-01-11  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <iostream>\n+#include <string>\n+#include <locale>\n+\n+// libstdc++/13582\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  ios_base::sync_with_stdio(false);\n+  wcout << \"Type in 12345\\n\";\n+  \n+  wstring str;\n+  wchar_t c;\n+  \n+  if (wcin.get(c) && !isspace(c, wcin.getloc()))\n+    {\n+      str.push_back(c);\n+      wcin.imbue(locale(\"en_US\"));\n+    }\n+\n+  if (wcin.get(c) && !isspace(c, wcin.getloc()))\n+    {\n+      str.push_back(c);\n+      wcin.imbue(locale(\"fr_FR\"));\n+    }\n+\n+  while (wcin.get(c) && !isspace(c, wcin.getloc()))\n+    {\n+      str.push_back(c);\n+    }\n+  \n+  wcout << str << endl;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e56e15bb7ddb6bd0b6d924b18fcee53d8713d7ea", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/13582-1_xin.in", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09625c1681b30febed411fa7526cf4b620a54ab3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F13582-1_xin.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09625c1681b30febed411fa7526cf4b620a54ab3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F13582-1_xin.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F13582-1_xin.in?ref=09625c1681b30febed411fa7526cf4b620a54ab3", "patch": "@@ -0,0 +1 @@\n+12345"}]}