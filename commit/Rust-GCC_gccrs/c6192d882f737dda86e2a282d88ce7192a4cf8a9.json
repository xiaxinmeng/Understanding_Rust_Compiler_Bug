{"sha": "c6192d882f737dda86e2a282d88ce7192a4cf8a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYxOTJkODgyZjczN2RkYTg2ZTJhMjgyZDg4Y2U3MTkyYTRjZjhhOQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-05-14T01:15:36Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-05-14T01:15:36Z"}, "message": "Switch over to new harness.\n\n\n2001-05-13   Benjamin Kosnik  <bkoz@redhat.com>\n\n\tSwitch over to new harness.\n\t* testsuite_flags.in: Tweaks via Gaby.\n\t* testsuite/Makefile.am: Change tool to libstdc++-v3.\n\t(EXPECT): Quote directly.\n\t(RUNTEST): Same.\n\t* configure.in: Output testsuite_flags.\n\t* acinclude.m4: Substitute src, bld, and prefix dirs.\n\tRemove glibcpp_expect, glibcpp_runtestflags.\n\t* Makefile.am (RUNTESTFLAGS): Pass this down to subdirs.\n\t* mkcheck.in: Port to new interface.\n\n\t* aclocal.m4: Regerate.\n\t* configure: Regnerate.\n\t* Makefile.in: Regnerate.\n\t* */Makefile.in: Regenerate.\n\n\t* tests_flags.in: Remove.\n\t* testsuite/lib/libstdc++.exp: Remove.\n\t* testsuite/libstdc++.tests/tests.exp: Remove.\n\nFrom-SVN: r42055", "tree": {"sha": "1ed29dbb4d80462a7bbcb51d061f4b720091f586", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ed29dbb4d80462a7bbcb51d061f4b720091f586"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6192d882f737dda86e2a282d88ce7192a4cf8a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6192d882f737dda86e2a282d88ce7192a4cf8a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6192d882f737dda86e2a282d88ce7192a4cf8a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6192d882f737dda86e2a282d88ce7192a4cf8a9/comments", "author": null, "committer": null, "parents": [{"sha": "602928d139cbb68f2ccc070705c22ef989bfc051", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/602928d139cbb68f2ccc070705c22ef989bfc051", "html_url": "https://github.com/Rust-GCC/gccrs/commit/602928d139cbb68f2ccc070705c22ef989bfc051"}], "stats": {"total": 2428, "additions": 1056, "deletions": 1372}, "files": [{"sha": "caf31dc1dce2fcb52c47a5e741b1706542bd6f9a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c6192d882f737dda86e2a282d88ce7192a4cf8a9", "patch": "@@ -1,3 +1,25 @@\n+2001-05-13   Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tSwitch over to new harness.\n+\t* testsuite_flags.in: Tweaks via Gaby.\n+\t* testsuite/Makefile.am: Change tool to libstdc++-v3.\n+\t(EXPECT): Quote directly.\n+\t(RUNTEST): Same.\n+\t* configure.in: Output testsuite_flags.\n+\t* acinclude.m4: Substitute src, bld, and prefix dirs.\n+\tRemove glibcpp_expect, glibcpp_runtestflags.\n+\t* Makefile.am (RUNTESTFLAGS): Pass this down to subdirs.\n+\t* mkcheck.in: Port to new interface.\n+\t\n+\t* aclocal.m4: Regerate.\n+\t* configure: Regnerate.\n+\t* Makefile.in: Regnerate.\n+\t* */Makefile.in: Regenerate.\n+\t\n+\t* tests_flags.in: Remove.\n+\t* testsuite/lib/libstdc++.exp: Remove.\n+\t* testsuite/libstdc++.tests/tests.exp: Remove.\n+\t\n 2001-05-13  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* configure.target: Remove detection of AIX pthread multilib, now\n@@ -8,6 +30,13 @@\n \t* mkcheck.in (setup_size_command): Use Berkeley \"-B\" mode with GNU\n \tsize.  Add hpux case for HP size.\n \n+2001-05-11   Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite_flags.in: New, simplified interface.\n+\t* testsuite/lib/libstdc++-v3-dg.exp: New test harness.\n+\t* testsuite/libstdc++-v3.dg: Add.\n+\t* testsuite/libstdc++-v3.dg/dg.exp: Add.\t\n+\n 2001-05-11   Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/*/*.cc: Remove spaces, make sure testcases return zero."}, {"sha": "3ca98d5b18bb4be2c8b78d4d726313f8a03dfb82", "filename": "libstdc++-v3/Makefile.am", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.am?ref=c6192d882f737dda86e2a282d88ce7192a4cf8a9", "patch": "@@ -28,23 +28,24 @@ SUBDIRS = libio libmath libsupc++ src testsuite\n \n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n-# Use $${builddir} instead of $(top_builddir) for arguments to \"mkcheck\"\n-# because then the paths will be full pathnames, not relative\n-# pathnames. (-Wl,--rpath seems to like this better.)\n+# These two special 'check-script' rules use the bash script 'mkcheck'\n+# to do testing. This script is not as portable as the dejagnu test\n+# harness, and is thus off by default. It does produce interesting\n+# output however, including various performance analysis items like\n+# compile time, execution time, and binary size.\n check-script: $(top_builddir)/mkcheck\n \t-(chmod + $(top_builddir)/mkcheck; \\\n-\t  srcdir=`cd $(top_srcdir); pwd`; builddir=`pwd`; \\\n \t  test -d testsuite || (mkdir testsuite; chmod u+w testsuite); \\\n-\t  cd testsuite; $${builddir}/mkcheck 0 $${builddir} $${srcdir})\n+\t  cd testsuite; \\\n+\t  @glibcpp_builddir@/mkcheck 0)\n \n check-script-install: $(top_builddir)/mkcheck\n \t-(chmod + $(top_builddir)/mkcheck; \\\n-\t  srcdir=`cd $(top_srcdir); pwd`; builddir=`pwd`; \\\n \t  test -d testsuite || (mkdir testsuite; chmod u+w testsuite); \\\n \t  cd testsuite; \\\n-\t  $${builddir}/mkcheck 1 $${builddir} $${srcdir} $(prefix))\n+\t  @glibcpp_builddir@/mkcheck 1)\n \n-# These two rules seem messy.\n+# These two rules might seem messy, but are hella worth it.\n doxygen:\n \t-(srcdir=`cd ${top_srcdir}; pwd`; \\\n \t  outdir=`pwd`; \\\n@@ -121,6 +122,7 @@ AM_MAKEFLAGS = \\\n \t\"PICFLAG=$(PICFLAG)\" \\\n \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \\\n \t\"SHELL=$(SHELL)\" \\\n+\t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \\\n \t\"exec_prefix=$(exec_prefix)\" \\\n \t\"infodir=$(infodir)\" \\\n \t\"libdir=$(libdir)\" \\"}, {"sha": "f5182ae96957c75026d6ea5ce7d20989217b1503", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 17, "deletions": 51, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=c6192d882f737dda86e2a282d88ce7192a4cf8a9", "patch": "@@ -107,8 +107,9 @@ enable_shared = @enable_shared@\n enable_static = @enable_static@\n glibcpp_CXX = @glibcpp_CXX@\n glibcpp_basedir = @glibcpp_basedir@\n-glibcpp_expect = @glibcpp_expect@\n-glibcpp_runtest = @glibcpp_runtest@\n+glibcpp_builddir = @glibcpp_builddir@\n+glibcpp_prefixdir = @glibcpp_prefixdir@\n+glibcpp_srcdir = @glibcpp_srcdir@\n glibcpp_toolexecdir = @glibcpp_toolexecdir@\n glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n@@ -137,50 +138,14 @@ MULTICLEAN = true\n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n-AM_MAKEFLAGS = \\\n-\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n-\t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \\\n-\t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \\\n-\t\"CFLAGS=$(CFLAGS)\" \\\n-\t\"CXXFLAGS=$(CXXFLAGS)\" \\\n-\t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \\\n-\t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \\\n-\t\"INSTALL=$(INSTALL)\" \\\n-\t\"INSTALL_DATA=$(INSTALL_DATA)\" \\\n-\t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \\\n-\t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \\\n-\t\"LDFLAGS=$(LDFLAGS)\" \\\n-\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n-\t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\"MAKE=$(MAKE)\" \\\n-\t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \\\n-\t\"PICFLAG=$(PICFLAG)\" \\\n-\t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \\\n-\t\"SHELL=$(SHELL)\" \\\n-\t\"exec_prefix=$(exec_prefix)\" \\\n-\t\"infodir=$(infodir)\" \\\n-\t\"libdir=$(libdir)\" \\\n-\t\"includedir=$(includedir)\" \\\n-\t\"prefix=$(prefix)\" \\\n-\t\"tooldir=$(tooldir)\" \\\n-\t\"AR=$(AR)\" \\\n-\t\"AS=$(AS)\" \\\n-\t\"LD=$(LD)\" \\\n-\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n-\t\"PICFLAG=$(PICFLAG)\" \\\n-\t\"RANLIB=$(RANLIB)\" \\\n-\t\"NM=$(NM)\" \\\n-\t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \\\n-\t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n-\t\"DESTDIR=$(DESTDIR)\" \\\n-\t\"WERROR=$(WERROR)\" \n+AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\" \n \n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n CONFIG_HEADER = config.h\n-CONFIG_CLEAN_FILES =  tests_flags mkcheck\n+CONFIG_CLEAN_FILES =  mkcheck testsuite_flags\n DIST_COMMON =  README ./stamp-h.in ChangeLog Makefile.am Makefile.in \\\n acconfig.h acinclude.m4 aclocal.m4 config.h.in configure configure.in \\\n-mkcheck.in tests_flags.in\n+mkcheck.in testsuite_flags.in\n \n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n@@ -231,10 +196,10 @@ distclean-hdr:\n \t-rm -f config.h\n \n maintainer-clean-hdr:\n-tests_flags: $(top_builddir)/config.status tests_flags.in\n-\tcd $(top_builddir) && CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status\n mkcheck: $(top_builddir)/config.status mkcheck.in\n \tcd $(top_builddir) && CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status\n+testsuite_flags: $(top_builddir)/config.status testsuite_flags.in\n+\tcd $(top_builddir) && CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status\n \n # This directory's subdirectories are mostly independent; you can cd\n # into them and run `make' without going through this Makefile.\n@@ -446,23 +411,24 @@ distclean-generic clean-generic maintainer-clean-generic clean \\\n mostlyclean distclean maintainer-clean\n \n \n-# Use $${builddir} instead of $(top_builddir) for arguments to \"mkcheck\"\n-# because then the paths will be full pathnames, not relative\n-# pathnames. (-Wl,--rpath seems to like this better.)\n+# These two special 'check-script' rules use the bash script 'mkcheck'\n+# to do testing. This script is not as portable as the dejagnu test\n+# harness, and is thus off by default. It does produce interesting\n+# output however, including various performance analysis items like\n+# compile time, execution time, and binary size.\n check-script: $(top_builddir)/mkcheck\n \t-(chmod + $(top_builddir)/mkcheck; \\\n-\t  srcdir=`cd $(top_srcdir); pwd`; builddir=`pwd`; \\\n \t  test -d testsuite || (mkdir testsuite; chmod u+w testsuite); \\\n-\t  cd testsuite; $${builddir}/mkcheck 0 $${builddir} $${srcdir})\n+\t  cd testsuite; \\\n+\t  @glibcpp_builddir@/mkcheck 0)\n \n check-script-install: $(top_builddir)/mkcheck\n \t-(chmod + $(top_builddir)/mkcheck; \\\n-\t  srcdir=`cd $(top_srcdir); pwd`; builddir=`pwd`; \\\n \t  test -d testsuite || (mkdir testsuite; chmod u+w testsuite); \\\n \t  cd testsuite; \\\n-\t  $${builddir}/mkcheck 1 $${builddir} $${srcdir} $(prefix))\n+\t  @glibcpp_builddir@/mkcheck 1)\n \n-# These two rules seem messy.\n+# These two rules might seem messy, but are hella worth it.\n doxygen:\n \t-(srcdir=`cd ${top_srcdir}; pwd`; \\\n \t  outdir=`pwd`; \\"}, {"sha": "d40cf1e6c142d09b714ecc70255eead00c981abe", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=c6192d882f737dda86e2a282d88ce7192a4cf8a9", "patch": "@@ -117,10 +117,6 @@ LIB_AC_PROG_CXX\n   AC_CHECK_TOOL(AS, as)\n   AC_CHECK_TOOL(AR, ar)\n   AC_CHECK_TOOL(RANLIB, ranlib, ranlib-not-found-in-path-error)\n-  AC_CHECK_TOOL(glibcpp_expect, expect, expect-not-found-in-path-error)\n-  AC_CHECK_TOOL(glibcpp_runtest, runtest, runtest-not-found-in-path-error)\n-  AC_SUBST(glibcpp_expect)\n-  AC_SUBST(glibcpp_runtest)\n   AC_PROG_INSTALL\n \n   AM_MAINTAINER_MODE\n@@ -1581,6 +1577,12 @@ AC_DEFUN(GLIBCPP_EXPORT_INSTALL_INFO, [\n glibcpp_toolexecdir=no\n glibcpp_toolexeclibdir=no\n \n+# Export build and source directories.\n+tmp_builddir=`pwd`\n+glibcpp_builddir=$tmp_builddir\n+glibcpp_srcdir=${srcdir}\n+glibcpp_prefixdir=${prefix}\n+\n AC_MSG_CHECKING([for interface version number])\n libstdcxx_interface=$INTERFACE\n AC_MSG_RESULT($libstdcxx_interface)\n@@ -1643,6 +1645,9 @@ fi\n AC_MSG_CHECKING([for install location])\n AC_MSG_RESULT($gxx_include_dir)\n \n+AC_SUBST(glibcpp_builddir)\n+AC_SUBST(glibcpp_srcdir)\n+AC_SUBST(glibcpp_prefixdir)\n AC_SUBST(gxx_include_dir)\n AC_SUBST(glibcpp_toolexecdir)\n AC_SUBST(glibcpp_toolexeclibdir)"}, {"sha": "7630620e23c0e18044c3ff5bb4d4d68df31d0963", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=c6192d882f737dda86e2a282d88ce7192a4cf8a9", "patch": "@@ -129,10 +129,6 @@ LIB_AC_PROG_CXX\n   AC_CHECK_TOOL(AS, as)\n   AC_CHECK_TOOL(AR, ar)\n   AC_CHECK_TOOL(RANLIB, ranlib, ranlib-not-found-in-path-error)\n-  AC_CHECK_TOOL(glibcpp_expect, expect, expect-not-found-in-path-error)\n-  AC_CHECK_TOOL(glibcpp_runtest, runtest, runtest-not-found-in-path-error)\n-  AC_SUBST(glibcpp_expect)\n-  AC_SUBST(glibcpp_runtest)\n   AC_PROG_INSTALL\n \n   AM_MAINTAINER_MODE\n@@ -1593,6 +1589,12 @@ AC_DEFUN(GLIBCPP_EXPORT_INSTALL_INFO, [\n glibcpp_toolexecdir=no\n glibcpp_toolexeclibdir=no\n \n+# Export build and source directories.\n+tmp_builddir=`pwd`\n+glibcpp_builddir=$tmp_builddir\n+glibcpp_srcdir=${srcdir}\n+glibcpp_prefixdir=${prefix}\n+\n AC_MSG_CHECKING([for interface version number])\n libstdcxx_interface=$INTERFACE\n AC_MSG_RESULT($libstdcxx_interface)\n@@ -1655,6 +1657,9 @@ fi\n AC_MSG_CHECKING([for install location])\n AC_MSG_RESULT($gxx_include_dir)\n \n+AC_SUBST(glibcpp_builddir)\n+AC_SUBST(glibcpp_srcdir)\n+AC_SUBST(glibcpp_prefixdir)\n AC_SUBST(gxx_include_dir)\n AC_SUBST(glibcpp_toolexecdir)\n AC_SUBST(glibcpp_toolexeclibdir)"}, {"sha": "59273aebf4d592a96d60fbaa026f6c97f75fb140", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 865, "deletions": 1002, "changes": 1867, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=c6192d882f737dda86e2a282d88ce7192a4cf8a9"}, {"sha": "4b8cfc9ee0a630adf8b5f2a051739b23d6532524", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=c6192d882f737dda86e2a282d88ce7192a4cf8a9", "patch": "@@ -281,14 +281,14 @@ fi\n # installed in the correct place. To work around this not being passed\n # down from config-ml.in -> top_srcdir/Makefile.am ->\n # top_srcdir/{src,libsupc++}/Makefile.am, manually append it here.\n-AC_OUTPUT(tests_flags mkcheck Makefile src/Makefile libmath/Makefile libio/Makefile libsupc++/Makefile testsuite/Makefile,\n+AC_OUTPUT(Makefile src/Makefile libmath/Makefile libio/Makefile libsupc++/Makefile testsuite/Makefile mkcheck testsuite_flags,\n [if test -n \"$CONFIG_FILES\"; then\n   ac_file=Makefile . ${glibcpp_basedir}/../config-ml.in\n   grep '^MULTISUBDIR =' Makefile >> src/Makefile\n   grep '^MULTISUBDIR =' Makefile >> libsupc++/Makefile\n fi\n-chmod +x tests_flags\n chmod +x mkcheck\n+chmod +x testsuite_flags\n ],\n srcdir=${srcdir}\n host=${host}"}, {"sha": "ac805d2bf42c216e318e080bd6781d8058a3f45e", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=c6192d882f737dda86e2a282d88ce7192a4cf8a9", "patch": "@@ -101,8 +101,9 @@ enable_shared = @enable_shared@\n enable_static = @enable_static@\n glibcpp_CXX = @glibcpp_CXX@\n glibcpp_basedir = @glibcpp_basedir@\n-glibcpp_expect = @glibcpp_expect@\n-glibcpp_runtest = @glibcpp_runtest@\n+glibcpp_builddir = @glibcpp_builddir@\n+glibcpp_prefixdir = @glibcpp_prefixdir@\n+glibcpp_srcdir = @glibcpp_srcdir@\n glibcpp_toolexecdir = @glibcpp_toolexecdir@\n glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n@@ -113,7 +114,7 @@ toplevel_srcdir = @toplevel_srcdir@\n AUTOMAKE_OPTIONS = 1.3 cygnus\n \n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n-@GLIBCPP_BUILD_LIBIO_TRUE@noinst_LTLIBRARIES = @GLIBCPP_BUILD_LIBIO_TRUE@libio.la\n+@GLIBCPP_BUILD_LIBIO_TRUE@noinst_LTLIBRARIES = libio.la\n @GLIBCPP_BUILD_LIBIO_FALSE@noinst_LTLIBRARIES = \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -125,21 +126,14 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES = \\\n-\t-nostdinc++ \\\n-\t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \\\n-\t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n+INCLUDES =  \t-nostdinc++ \t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n \n \n-libio_headers = \\\n-        libio.h libioP.h iolibio.h\n+libio_headers =          libio.h libioP.h iolibio.h\n \n-@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = @GLIBCPP_NEED_LIBIO_TRUE@\\\n-@GLIBCPP_NEED_LIBIO_TRUE@\tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c \\\n-@GLIBCPP_NEED_LIBIO_TRUE@\tiofclose.c iofopen.c \n+@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = \tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c \tiofclose.c iofopen.c \n @GLIBCPP_NEED_LIBIO_FALSE@LIBIO_SRCS = \n-@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = @GLIBCPP_NEED_WLIBIO_TRUE@\\\n-@GLIBCPP_NEED_WLIBIO_TRUE@\twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n+@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = \twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n @GLIBCPP_NEED_WLIBIO_FALSE@LIBIO_WSRCS = \n \n EXTRA_DIST = iostreamP.h"}, {"sha": "470dc123a72ae30f59a76b070d0572b0564ce10a", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=c6192d882f737dda86e2a282d88ce7192a4cf8a9", "patch": "@@ -101,8 +101,9 @@ enable_shared = @enable_shared@\n enable_static = @enable_static@\n glibcpp_CXX = @glibcpp_CXX@\n glibcpp_basedir = @glibcpp_basedir@\n-glibcpp_expect = @glibcpp_expect@\n-glibcpp_runtest = @glibcpp_runtest@\n+glibcpp_builddir = @glibcpp_builddir@\n+glibcpp_prefixdir = @glibcpp_prefixdir@\n+glibcpp_srcdir = @glibcpp_srcdir@\n glibcpp_toolexecdir = @glibcpp_toolexecdir@\n glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n@@ -116,24 +117,18 @@ mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n noinst_LTLIBRARIES = libmath.la\n \n-EXTRA_LONG_DOUBLE_yes = \\\n-\thypotl.c signbitl.c\n+EXTRA_LONG_DOUBLE_yes =  \thypotl.c signbitl.c\n \n \n-EXTRA_DIST = \\\n-\thypot.c hypotf.c atan2f.c expf.c \\\n-\t$(EXTRA_LONG_DOUBLE_yes) \n+EXTRA_DIST =  \thypot.c hypotf.c atan2f.c expf.c \t$(EXTRA_LONG_DOUBLE_yes) \n \n \n-libmath_la_LIBADD = \\\n-\t@LIBMATHOBJS@ \\\n-\t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n+libmath_la_LIBADD =  \t@LIBMATHOBJS@ \t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n \n \n libmath_la_DEPENDENCIES = $(libmath_la_LIBADD)\n \n-libmath_la_SOURCES = \\\n-\tsignbit.c signbitf.c\n+libmath_la_SOURCES =  \tsignbit.c signbitf.c\n \n \n LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n@@ -147,9 +142,7 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES = \\\n-\t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \\\n-\t$(TOPLEVEL_INCLUDES) \n+INCLUDES =  \t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \t$(TOPLEVEL_INCLUDES) \n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "822a6ad9ca3acd873aabb35a9a2925ea4406760e", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 15, "deletions": 50, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=c6192d882f737dda86e2a282d88ce7192a4cf8a9", "patch": "@@ -98,8 +98,9 @@ enable_shared = @enable_shared@\n enable_static = @enable_static@\n glibcpp_CXX = @glibcpp_CXX@\n glibcpp_basedir = @glibcpp_basedir@\n-glibcpp_expect = @glibcpp_expect@\n-glibcpp_runtest = @glibcpp_runtest@\n+glibcpp_builddir = @glibcpp_builddir@\n+glibcpp_prefixdir = @glibcpp_prefixdir@\n+glibcpp_srcdir = @glibcpp_srcdir@\n glibcpp_toolexecdir = @glibcpp_toolexecdir@\n glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n@@ -131,13 +132,11 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS = \\\n-\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS = \\\n-\t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n+WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -149,38 +148,13 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n-INCLUDES = \\\n-\t-I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include \\\n-\t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \\\n-\t $(LIBSUPCXX_INCLUDES)\n-\n-\n-headers = \\\n-\texception new typeinfo cxxabi.h exception_defines.h \n-\n-\n-sources = \\\n-\tdel_op.cc \\\n-\tdel_opnt.cc \\\n-\tdel_opv.cc \\\n-\tdel_opvnt.cc \\\n-\teh_alloc.cc \\\n-\teh_aux_runtime.cc \\\n-\teh_catch.cc \\\n-\teh_exception.cc \\\n-\teh_globals.cc \\\n-\teh_personality.cc \\\n-\teh_terminate.cc \\\n-\teh_throw.cc \\\n-\tnew_handler.cc \\\n-\tnew_op.cc \\\n-\tnew_opnt.cc \\\n-\tnew_opv.cc \\\n-\tnew_opvnt.cc \\\n-\tpure.cc \\\n-\ttinfo.cc \\\n-\ttinfo2.cc \\\n-\tvec.cc\n+INCLUDES =  \t-I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include \t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \t $(LIBSUPCXX_INCLUDES)\n+\n+\n+headers =  \texception new typeinfo cxxabi.h exception_defines.h \n+\n+\n+sources =  \tdel_op.cc \tdel_opnt.cc \tdel_opv.cc \tdel_opvnt.cc \teh_alloc.cc \teh_aux_runtime.cc \teh_catch.cc \teh_exception.cc \teh_globals.cc \teh_personality.cc \teh_terminate.cc \teh_throw.cc \tnew_handler.cc \tnew_op.cc \tnew_opnt.cc \tnew_opv.cc \tnew_opvnt.cc \tpure.cc \ttinfo.cc \ttinfo2.cc \tvec.cc\n \n \n libsupc___la_SOURCES = $(sources)\n@@ -196,12 +170,7 @@ LIBSUPCXX_CXXFLAGS = $(LIBSUPCXX_PICFLAGS)\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS = \\\n-\t-fno-implicit-templates \\\n-\t$(LIBSUPCXX_CXXFLAGS) \\\n-\t$(WARN_CXXFLAGS) \\\n-\t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -225,9 +194,7 @@ AM_CXXFLAGS = \\\n #\n # We have to put --tag disable-shared after --tag CXX lest things\n # CXX undo the affect of disable-shared.\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared \\\n-               --mode=compile $(CXX) $(INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared                --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We'd have a problem when building the shared libstdc++ object if\n@@ -236,9 +203,7 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared \\\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared \\\n-          --mode=link $(CXX) \\\n-          @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared           --mode=link $(CXX)           @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "546a948dd406a85fddf29216bd99d97911a6453e", "filename": "libstdc++-v3/mkcheck.in", "status": "modified", "additions": 26, "deletions": 38, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2Fmkcheck.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2Fmkcheck.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmkcheck.in?ref=c6192d882f737dda86e2a282d88ce7192a4cf8a9", "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/env bash\n+!/usr/bin/env bash\n \n \n # Script to do automated testing and data collection for various test\n@@ -9,34 +9,23 @@\n # has been enabled.\n \n # Invocation \n-# mkcheck [01] (path to build) (path to src) (path to install)\n-\n-### XXX There are a lot of tests in here for OS-specific stuff.  If we\n-###     move to a 'configure.target' method of determining those extra\n-###     flags and whatnot, we can take out all those things and source\n-###     that file from here.  (Write that file with this in mind...)\n-\n-### XXX Note that breaking out of this with ^C will not work under\n-###     Solaris (at least).  Dunno why.\n-\n+# mkcheck [01] \n \n # 1: variables\n #\n # WHICH determines if you are\n # (0) testing the build binary and headers, or\n # (1) testing the installed binary and headers, or\n WHICH=$1\n-if [ \"$WHICH\"x = 0x ] && [ $# -eq 3 ]; then\n+if [ \"$WHICH\"x = 0x ]; then\n   echo \"running mkcheck\"\n   echo \"$0: testing the build directory\"\n-  query=\"--built-library\"\n-elif [ \"$WHICH\"x = 1x ] && [ $# -eq 4 ]; then\n+elif [ \"$WHICH\"x = 1x ]; then\n   echo \"running mkcheck\"\n-  echo \"$0: testing the install directory $4\"\n-  query=\"--installed-library\"\n+  echo \"$0: testing the install directory\"\n else\n-  echo 'Usage: mkcheck 0 (path to build) (path to src)'\n-  echo '       mkcheck 1 (path to build) (path to src) (path to install)'\n+  echo 'Usage: mkcheck 0'\n+  echo '       mkcheck 1'\n   exit 1;\n fi\n \n@@ -50,32 +39,32 @@ case $BASH_VERSION in\n     *)   ;;   # ??\n esac\n \n-# Compute the flags necessary to run the testsuite.\n-saved_ifs=$IFS\n-# bash 2.01 does the wrong thing with $* if IFS doesn't include space\n-if test ${BASH_VERSINFO[1]} = 01 ; then\n-    IFS=': '\n+BUILD_DIR=@glibcpp_builddir@\n+SRC_DIR=@glibcpp_srcdir@\n+PREFIX_DIR=@glibcpp_prefixdir@\n+if [ \"$WHICH\"x = 0x ]; then\n+  CXX=`$BUILD_DIR/testsuite_flags --build-cxx`\n+  INCLUDES=`$BUILD_DIR/testsuite_flags --build-includes`\n else\n-    IFS=':'\n+  CXX=`$BUILD_DIR/testsuite_flags --install-cxx`\n+  INCLUDES=`$BUILD_DIR/testsuite_flags --install-includes`\n fi\n-set `../tests_flags ${query} $*` || exit 1\n-BUILD_DIR=$1; SRC_DIR=$2; PREFIX_DIR=$3; CXX=$4; CXXFLAGS=$5; INCLUDES=$6; LIBS=$7;\n-IFS=$saved_ifs\n-\n+CXXFLAGS=`$BUILD_DIR/testsuite_flags --cxxflags`\n LIBTOOL=\"$BUILD_DIR/libtool\"\n LTEXE=\"$LIBTOOL --mode=execute\"\n-LTCXX=\"$LIBTOOL --tag=CXX --mode=link $CXX $CXXFLAGS $INCLUDES $LIBS\"\n+#LTCXX=\"$LIBTOOL --tag=CXX --mode=link $CXX $CXXFLAGS $INCLUDES\"\n+LTCXX=\"$CXX $CXXFLAGS $INCLUDES\"\n \n-# specific libtool flag(s) to force the use of shared libraries, if any\n-SH_FLAG=\n+# specific libtool flag(s) to use shared libraries, if any\n+SH_FLAG=\"-Wl,--rpath -Wl,$BUILD_DIR/../../gcc -Wl,--rpath -Wl,$BUILD_DIR/src/.libs\"\n \n-# specific libtool flag(s) to force the use of static libraries, if any\n+# specific libtool flag(s) to use static libraries, if any\n ST_FLAG=\"-static\"\n #ST_FLAG=\"-all-static\"\n \n # Set up the testing directory, which should be in a directory called\n # \"testsuite\" in the root level of the build directory.\n-TEST_DIR='.'\n+TEST_DIR=\"$BUILD_DIR/testsuite\"\n # help libtool keep quiet\n if [ ! -d ${TEST_DIR}/.libs ]; then\n     mkdir $TEST_DIR/.libs    \n@@ -330,6 +319,7 @@ test_file()\n     # eventually have to calculate time_t anyhow.  Or 3) just grab two\n     # time_t's (no more overhead than grabbing two date(1)'s).\n     compiler_invocation=\"$LTCXX $S_FLAG $SRC_NAME -o $EXENAME\"\n+    echo $compiler_invocation >> compile.out 2>&1\n     COMP_TIME_START=$($TIMER_COMMAND)\n     $compiler_invocation >> compile.out 2>&1\n     COMP_TIME_END=$($TIMER_COMMAND)\n@@ -341,7 +331,7 @@ test_file()\n     fi\n \n     if [ -f $EXENAME ]; then\n-        rm compile.out\n+#        rm compile.out\n         size_command TEXT\n         size_command DATA\n         size_command SIZE\n@@ -379,8 +369,8 @@ test_file()\n     else\n         # the file did not compile/link.\n         printf \"\\n\" >> $LOG_FILE\n-        `cat compile.out >> $LOG_FILE` \n-        rm compile.out\n+#        `cat compile.out >> $LOG_FILE` \n+#        rm compile.out\n         RESULT=\"-b\"\n         TEXT=\"0\"\n         DATA=\"0\"\n@@ -463,5 +453,3 @@ if [ $TEST_TIME_START -lt $TEST_TIME_END ]; then\n fi\n \n exit 0\n-\n-"}, {"sha": "bc44f95fc74d7bacbd9be7d08be948e822df4395", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 30, "deletions": 126, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=c6192d882f737dda86e2a282d88ce7192a4cf8a9", "patch": "@@ -97,8 +97,9 @@ enable_shared = @enable_shared@\n enable_static = @enable_static@\n glibcpp_CXX = @glibcpp_CXX@\n glibcpp_basedir = @glibcpp_basedir@\n-glibcpp_expect = @glibcpp_expect@\n-glibcpp_runtest = @glibcpp_runtest@\n+glibcpp_builddir = @glibcpp_builddir@\n+glibcpp_prefixdir = @glibcpp_prefixdir@\n+glibcpp_srcdir = @glibcpp_srcdir@\n glibcpp_toolexecdir = @glibcpp_toolexecdir@\n glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n ifGNUmake = @ifGNUmake@\n@@ -123,13 +124,11 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS = \\\n-\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS = \\\n-\t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n+WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -141,132 +140,44 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n-INCLUDES = \\\n-\t-nostdinc++ \\\n-\t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \\\n-\t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \\\n-\t$(TOPLEVEL_INCLUDES)\n-\n-\n-base_headers = \\\n-\tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \\\n-\tbits/stringfwd.h bits/std_string.h bits/basic_string.h \\\n-\tbits/basic_string.tcc \\\n-\tbits/generic_shadow.h bits/std_utility.h \\\n-\tbits/std_complex.h \\\n-\tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \\\n-\tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \\\n-\tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \\\n-\tbits/std_fstream.h bits/std_iomanip.h \\\n-\tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \\\n-\tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \\\n-\tbits/std_istream.h bits/istream.tcc bits/std_locale.h \\\n-\tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \\\n-\tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \\\n-\tbits/streambuf.tcc bits/basic_file.h \\\n-\tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \\\n-\tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \\\n-\tbits/stl_threads.h \\\n-\tbits/stl_iterator_base_types.h bits/stl_iterator_base_funcs.h \\\n-\tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \\\n-\tbits/std_iterator.h bits/std_list.h \\\n-\tbits/std_map.h bits/std_memory.h bits/std_numeric.h \\\n-\tbits/std_queue.h bits/std_set.h bits/std_stack.h \\\n-\tbits/std_stdexcept.h bits/functexcept.h bits/std_vector.h \\\n-\tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \\\n-\tbits/stl_deque.h bits/stl_function.h \\\n-\tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \\\n-\tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \\\n-\tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \\\n-\tbits/stl_relops.h bits/stl_set.h bits/stl_stack.h bits/stl_tempbuf.h \\\n-\tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \\\n-\tbits/stl_bvector.h bits/type_traits.h bits/std_algorithm.h \\\n-\tbits/stl_construct.h bits/boost_concept_check.h bits/concept_check.h\n-\n-\n-backward_headers = \\\n-\tbackward/complex.h backward/iomanip.h backward/istream.h \\\n-\tbackward/ostream.h backward/stream.h backward/streambuf.h \\\n-\tbackward/algo.h backward/algobase.h backward/alloc.h \\\n-\tbackward/bvector.h backward/defalloc.h backward/deque.h \\\n-\tbackward/function.h backward/hash_map.h backward/hash_set.h \\\n-\tbackward/hashtable.h backward/heap.h backward/iostream.h \\\n-\tbackward/iterator.h backward/list.h backward/map.h \\\n-\tbackward/multimap.h backward/new.h backward/multiset.h \\\n-\tbackward/pair.h backward/queue.h backward/rope.h backward/set.h \\\n-\tbackward/slist.h backward/stack.h backward/tempbuf.h backward/tree.h \\\n-\tbackward/vector.h backward/fstream.h backward/strstream.h \\\n-\tbackward/strstream backward/backward_warning.h\n-\n-\n-ext_headers = \\\n-\text/rope ext/ropeimpl.h ext/stl_rope.h \\\n-\text/slist ext/hash_map ext/hash_set \\\n-\text/stl_hashtable.h ext/stl_hash_fun.h \n-\n-\n-c_base_headers = \\\n-\tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \\\n-\tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \\\n-\tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \\\n-\tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \\\n-\tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \\\n-\tbits/std_cwchar.h bits/std_cwctype.h bits/cmath.tcc\n-\n-@GLIBCPP_USE_CSHADOW_TRUE@c_shadow_headers = @GLIBCPP_USE_CSHADOW_TRUE@\\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tfeatures.h langinfo.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_features.h bits/wrap_langinfo.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tsys/cdefs.h \n+INCLUDES =  \t-nostdinc++ \t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \t$(TOPLEVEL_INCLUDES)\n+\n+\n+base_headers =  \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \tbits/stringfwd.h bits/std_string.h bits/basic_string.h \tbits/basic_string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h \tbits/stl_iterator_base_types.h bits/stl_iterator_base_funcs.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/functexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h bits/stl_stack.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/stl_bvector.h bits/type_traits.h bits/std_algorithm.h \tbits/stl_construct.h bits/boost_concept_check.h bits/concept_check.h\n+\n+\n+backward_headers =  \tbackward/complex.h backward/iomanip.h backward/istream.h \tbackward/ostream.h backward/stream.h backward/streambuf.h \tbackward/algo.h backward/algobase.h backward/alloc.h \tbackward/bvector.h backward/defalloc.h backward/deque.h \tbackward/function.h backward/hash_map.h backward/hash_set.h \tbackward/hashtable.h backward/heap.h backward/iostream.h \tbackward/iterator.h backward/list.h backward/map.h \tbackward/multimap.h backward/new.h backward/multiset.h \tbackward/pair.h backward/queue.h backward/rope.h backward/set.h \tbackward/slist.h backward/stack.h backward/tempbuf.h backward/tree.h \tbackward/vector.h backward/fstream.h backward/strstream.h \tbackward/strstream backward/backward_warning.h\n+\n+\n+ext_headers =  \text/rope ext/ropeimpl.h ext/stl_rope.h \text/slist ext/hash_map ext/hash_set \text/stl_hashtable.h ext/stl_hash_fun.h \n+\n+\n+c_base_headers =  \tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \tbits/std_cwchar.h bits/std_cwctype.h bits/cmath.tcc\n+\n+@GLIBCPP_USE_CSHADOW_TRUE@c_shadow_headers = \tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \tfeatures.h langinfo.h \tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \tbits/wrap_features.h bits/wrap_langinfo.h \tsys/cdefs.h \n @GLIBCPP_USE_CSHADOW_FALSE@c_shadow_headers = \n \n-std_headers = \\\n-\talgorithm bitset complex deque fstream functional \\\n-\tiomanip ios iosfwd iostream istream iterator limits list locale \\\n-\tmap memory numeric ostream queue set sstream stack stdexcept \\\n-\tstreambuf string utility valarray vector \\\n-\tcassert cctype cerrno cfloat climits clocale ciso646 \\\n-\tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \\\n-\tcstring ctime cwchar cwctype\n-\n-@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = @GLIBCPP_NEED_LIBIO_TRUE@\\\n-@GLIBCPP_NEED_LIBIO_TRUE@\t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n+std_headers =  \talgorithm bitset complex deque fstream functional \tiomanip ios iosfwd iostream istream iterator limits list locale \tmap memory numeric ostream queue set sstream stack stdexcept \tstreambuf string utility valarray vector \tcassert cctype cerrno cfloat climits clocale ciso646 \tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \tcstring ctime cwchar cwctype\n+\n+@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = \t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n @GLIBCPP_NEED_LIBIO_FALSE@libio_headers = \n \n-build_headers = \\\n-\tbits/std_limits.h \\\n-\tbits/c++config.h bits/c++io.h bits/c++locale.h bits/c++threads.h \\\n-\tbits/basic_file_model.h \\\n-\tbits/atomicity.h bits/os_defines.h \\\n-\tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n+build_headers =  \tbits/std_limits.h \tbits/c++config.h bits/c++io.h bits/c++locale.h bits/c++threads.h \tbits/basic_file_model.h \tbits/atomicity.h bits/os_defines.h \tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n \n \n-sources = \\\n-\tlimitsMEMBERS.cc \\\n-\tstdexcept.cc functexcept.cc bitset.cc \\\n-\tglobals.cc \\\n-\tbasic_file.cc ios.cc complex_io.cc strstream.cc \\\n-\tc++locale.cc locale.cc localename.cc codecvt.cc \\\n-\tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc \\\n-\tstring-inst.cc wstring-inst.cc \n+sources =  \tlimitsMEMBERS.cc \tstdexcept.cc functexcept.cc bitset.cc \tglobals.cc \tbasic_file.cc ios.cc complex_io.cc strstream.cc \tc++locale.cc locale.cc localename.cc codecvt.cc \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc \tstring-inst.cc wstring-inst.cc \n \n VPATH =  $(top_srcdir) $(top_srcdir)/src $(GLIBCPP_INCLUDE_DIR)  $(GLIBCPP_INCLUDE_DIR)/std $(C_INCLUDE_DIR)\n \n libstdc___la_SOURCES = $(sources)\n \n-libstdc___la_LIBADD = \\\n-\t../libmath/libmath.la @libio_la@ \\\n-\t../libsupc++/libsupc++convenience.la\n+libstdc___la_LIBADD =  \t../libmath/libmath.la @libio_la@ \t../libsupc++/libsupc++convenience.la\n \n \n libstdc___la_LDFLAGS = -version-info 3:0:0 -lm\n \n libstdc___la_DEPENDENCIES = $(libstdc___la_LIBADD)\n-@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = @GLIBCPP_USE_CSHADOW_TRUE@$(top_builddir)/stamp-cshadow\n+@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = $(top_builddir)/stamp-cshadow\n @GLIBCPP_USE_CSHADOW_FALSE@CSHADOW_H = \n \n # Check for various configure bits that change where the headers get installed.\n@@ -289,12 +200,7 @@ c_incdir = @C_INCLUDE_DIR@\n # The no-implicit-templates flag will generate unresolved references to\n # the concept-checking symbols.  So we must disable the checks while\n # actually building the library.\n-AM_CXXFLAGS = \\\n-\t-fno-implicit-templates \\\n-\t$(LIBSUPCXX_CXXFLAGS) \\\n-\t$(WARN_CXXFLAGS) \\\n-\t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -315,8 +221,7 @@ AM_CXXFLAGS = \\\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We'd have a problem when building the shared libstdc++ object if\n@@ -325,8 +230,7 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX --mode=link $(CXX) \\\n-\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --tag CXX --mode=link $(CXX) \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "6aecb39485a26ae166fa29fad6f751c759431a24", "filename": "libstdc++-v3/testsuite/Makefile.am", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am?ref=c6192d882f737dda86e2a282d88ce7192a4cf8a9", "patch": "@@ -23,12 +23,15 @@\n \n AUTOMAKE_OPTIONS =  foreign dejagnu\n \n-DEJATOOL = libstdc++\n-\n-EXPECT = @glibcpp_expect@\n-\n-RUNTEST = @glibcpp_runtest@\n+DEJATOOL = libstdc++-v3\n \n+EXPECT = `if [ -f @glibcpp_builddir@/../../expect/expect ] ; then \\\n+            echo @glibcpp_builddir@/../../expect/expect ; \\\n+          else echo expect ; fi`\n \n+RUNTEST = `if [ -f @glibcpp_srcdir@/../dejagnu/runtest ] ; then \\\n+\t       echo @glibcpp_srcdir@/../dejagnu/runtest ; \\\n+\t    else echo runtest; fi`\n \n+RUNTESTFLAGS =\n "}, {"sha": "ca5e1d506916466d8ffc650515520f1b49ff80b0", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=c6192d882f737dda86e2a282d88ce7192a4cf8a9", "patch": "@@ -107,8 +107,9 @@ enable_shared = @enable_shared@\n enable_static = @enable_static@\n glibcpp_CXX = @glibcpp_CXX@\n glibcpp_basedir = @glibcpp_basedir@\n-glibcpp_expect = @glibcpp_expect@\n-glibcpp_runtest = @glibcpp_runtest@\n+glibcpp_builddir = @glibcpp_builddir@\n+glibcpp_prefixdir = @glibcpp_prefixdir@\n+glibcpp_srcdir = @glibcpp_srcdir@\n glibcpp_toolexecdir = @glibcpp_toolexecdir@\n glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n@@ -118,11 +119,15 @@ toplevel_srcdir = @toplevel_srcdir@\n \n AUTOMAKE_OPTIONS = foreign dejagnu\n \n-DEJATOOL = libstdc++\n+DEJATOOL = libstdc++-v3\n \n-EXPECT = @glibcpp_expect@\n+EXPECT = `if [ -f @glibcpp_builddir@/../../expect/expect ] ; then             echo @glibcpp_builddir@/../../expect/expect ;           else echo expect ; fi`\n \n-RUNTEST = @glibcpp_runtest@\n+\n+RUNTEST = `if [ -f @glibcpp_srcdir@/../dejagnu/runtest ] ; then \t       echo @glibcpp_srcdir@/../dejagnu/runtest ; \t    else echo runtest; fi`\n+\n+\n+RUNTESTFLAGS = \n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = \n@@ -162,8 +167,6 @@ distdir: $(DISTFILES)\n \t  fi; \\\n \tdone\n \n-RUNTESTFLAGS =\n-\n RUNTESTDEFAULTFLAGS = --tool $(DEJATOOL) --srcdir $$srcdir\n \n check-DEJAGNU: site.exp"}, {"sha": "21729c90d8707270029784949e6919bce56e3c06", "filename": "libstdc++-v3/testsuite/lib/libstdc++-v3-dg.exp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B-v3-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B-v3-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B-v3-dg.exp?ref=c6192d882f737dda86e2a282d88ce7192a4cf8a9", "patch": "@@ -108,6 +108,10 @@ proc libstdc++-v3_target_compile { source dest type options } {\n     set cxx_final [concat $cxx_final $cxxlibglossflags]\n     set cxx_final [concat $cxx_final $cxxflags]\n     set cxx_final [concat $cxx_final $includes]\n+\n+    # XXX \n+    set cxx_final [concat $cxx_final -static]\n+\n     lappend options \"compiler=$cxx_final\";\n \n     return [target_compile $source $dest $type $options]"}, {"sha": "e730eb7c63201c6886894c07082f1f20d35c3744", "filename": "libstdc++-v3/testsuite/libstdc++.tests/tests.exp", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/602928d139cbb68f2ccc070705c22ef989bfc051/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B.tests%2Ftests.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/602928d139cbb68f2ccc070705c22ef989bfc051/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B.tests%2Ftests.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B.tests%2Ftests.exp?ref=602928d139cbb68f2ccc070705c22ef989bfc051", "patch": "@@ -1,40 +0,0 @@\n-# Copyright (C) 2001 Free Software Foundation, Inc.\n-\n-# This program is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 2 of the License, or\n-# (at your option) any later version.\n-# \n-# This program is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-# \n-# You should have received a copy of the GNU General Public License\n-# along with this program; if not, write to the Free Software\n-# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n-\n-# Please email any bugs, comments, and/or additions to this file to:\n-# libstdc++@gcc.gnu.org\n-#\n-# This file is contributed by Gabriel Dos Reis <gdr@codesourcery.com>\n-\n-load_lib libstdc++.exp\n-\n-## Initialize the framework.\n-libstdc++-dg-init\n-\n-## Set ulimits.  This should normally be handled on test-by-test\n-## basis through @xxx@-keywords.\n-## The following limit is expressed in kilobytes.  For history, Have a \n-## look at http://gcc.gnu.org/ml/libstdc++/2000-10/msg00029.html\n-set maximum-memory-usage 16384\n-set shell-ulimit-command ulimit\n-remote_exec host ${shell-ulimit-command} \"-d ${maximum-memory-usage}\"\n-remote_exec host ${shell-ulimit-command} \"-v ${maximum-memory-usage}\"\n-\n-## Now, do the work directory by directory\n-libstdc++-runtest [glob -nocomplain $srcdir/*]\n-dg-finish\n-\n-"}, {"sha": "cec805735e025a06d53ba8bb7ad946376cac81c0", "filename": "libstdc++-v3/testsuite_flags.in", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2Ftestsuite_flags.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6192d882f737dda86e2a282d88ce7192a4cf8a9/libstdc%2B%2B-v3%2Ftestsuite_flags.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite_flags.in?ref=c6192d882f737dda86e2a282d88ce7192a4cf8a9", "patch": "@@ -12,11 +12,11 @@\n print_usage() {\n     cat <<EOF\n Usage: \n-    tests_flags --install-includes\n-\t\t--build-includes\n-\t\t--build-cxx\n-\t\t--install-cxx\n-\t\t--cxxflags\n+    testsuite_flags --install-includes\n+\t\t    --build-includes\n+\t\t    --build-cxx\n+\t\t    --install-cxx\n+\t\t    --cxxflags\n EOF\n }\n \n@@ -44,7 +44,7 @@ case ${query} in\n       echo ${CXX}\n       ;;\n     --build-cxx)\n-      CC_build=\"@glibcpp_CXX@ -static \"\n+      CC_build=\"@glibcpp_CXX@\"\n       CXX=`echo $CC_build | sed 's/xgcc/g++/g'`\n       echo ${CXX}\n       ;;"}]}