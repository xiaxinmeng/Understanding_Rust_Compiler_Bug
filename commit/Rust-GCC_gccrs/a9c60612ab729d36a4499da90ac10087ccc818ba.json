{"sha": "a9c60612ab729d36a4499da90ac10087ccc818ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTljNjA2MTJhYjcyOWQzNmE0NDk5ZGE5MGFjMTAwODdjY2M4MThiYQ==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2002-09-04T16:36:45Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2002-09-04T16:36:45Z"}, "message": "invoke.texi (-fshort-wchar): Move to Code Generation Options.\n\n2002-09-04  Janis Johnson  <janis187@us.ibm.com>\n\n\t* doc/invoke.texi (-fshort-wchar): Move to Code Generation Options.\n\t(-fpcc-struct-return, -freg-struct-return, -fshort-enums,\n\t-fshort-double, -fshort-wchar, -fpack-struct, -fleading-underscore):\n\tWarn that these options can break ABI compatibility.\n\nFrom-SVN: r56799", "tree": {"sha": "dfe49a940fff842c43947eecd36af6ac506ebc45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfe49a940fff842c43947eecd36af6ac506ebc45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9c60612ab729d36a4499da90ac10087ccc818ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9c60612ab729d36a4499da90ac10087ccc818ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9c60612ab729d36a4499da90ac10087ccc818ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9c60612ab729d36a4499da90ac10087ccc818ba/comments", "author": null, "committer": null, "parents": [{"sha": "4b67a2744180ace28c32242b2a19d5e460cb85b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b67a2744180ace28c32242b2a19d5e460cb85b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b67a2744180ace28c32242b2a19d5e460cb85b3"}], "stats": {"total": 63, "additions": 49, "deletions": 14}, "files": [{"sha": "0778a30aa5ddd39ad90330fa97f03e3388fe59ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c60612ab729d36a4499da90ac10087ccc818ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c60612ab729d36a4499da90ac10087ccc818ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a9c60612ab729d36a4499da90ac10087ccc818ba", "patch": "@@ -1,3 +1,10 @@\n+2002-09-04  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* doc/invoke.texi (-fshort-wchar): Move to Code Generation Options.\n+\t(-fpcc-struct-return, -freg-struct-return, -fshort-enums,\n+\t-fshort-double, -fshort-wchar, -fpack-struct, -fleading-underscore):\n+\tWarn that these options can break ABI compatibility.\n+\n 2002-09-04  Richard Henderson  <rth@redhat.com>\n \n \t* real.c (ereal_to_decimal): Add digits parameter."}, {"sha": "adc9de8c15605c46bd65ee02acb006c82a2155c6", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 42, "deletions": 14, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c60612ab729d36a4499da90ac10087ccc818ba/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c60612ab729d36a4499da90ac10087ccc818ba/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a9c60612ab729d36a4499da90ac10087ccc818ba", "patch": "@@ -169,7 +169,7 @@ in the following sections.\n -fallow-single-precision  -fcond-mismatch @gol\n -fsigned-bitfields  -fsigned-char @gol\n -funsigned-bitfields  -funsigned-char @gol\n--fwritable-strings  -fshort-wchar}\n+-fwritable-strings}\n \n @item C++ Language Options\n @xref{C++ Dialect Options,,Options Controlling C++ Dialect}.\n@@ -679,7 +679,7 @@ in the following sections.\n -fno-common  -fno-ident  -fno-gnu-linker @gol\n -fpcc-struct-return  -fpic  -fPIC @gol\n -freg-struct-return  -fshared-data  -fshort-enums @gol\n--fshort-double  -fvolatile @gol\n+-fshort-double  -fshort-wchar -fvolatile @gol\n -fvolatile-global  -fvolatile-static @gol\n -fverbose-asm  -fpack-struct  -fstack-check @gol\n -fstack-limit-register=@var{reg}  -fstack-limit-symbol=@var{sym} @gol\n@@ -1221,12 +1221,6 @@ write into string constants.\n \n Writing into string constants is a very bad idea; ``constants'' should\n be constant.\n-\n-@item -fshort-wchar\n-@opindex fshort-wchar\n-Override the underlying type for @samp{wchar_t} to be @samp{short\n-unsigned int} instead of the default for the target.  This option is\n-useful for building programs to run under WINE@.\n @end table\n \n @node C++ Dialect Options\n@@ -9893,14 +9887,20 @@ unwinding from asynchronous events (such as debugger or garbage collector).\n Return ``short'' @code{struct} and @code{union} values in memory like\n longer ones, rather than in registers.  This convention is less\n efficient, but it has the advantage of allowing intercallability between\n-GCC-compiled files and files compiled with other compilers.\n+GCC-compiled files and files compiled with other compilers, particularly\n+the Portable C Compiler (pcc).\n \n The precise convention for returning structures in memory depends\n on the target configuration macros.\n \n Short structures and unions are those whose size and alignment match\n that of some integer type.\n \n+@strong{Warning:} code compiled with the @option{-fpcc-struct-return}\n+switch is not binary compatible with code compiled with the\n+@option{-freg-struct-return} switch.\n+Use it to conform to a non-default application binary interface.\n+\n @item -freg-struct-return\n @opindex freg-struct-return\n Return @code{struct} and @code{union} values in registers when possible.\n@@ -9914,16 +9914,39 @@ defaults to @option{-fpcc-struct-return}, except on targets where GCC is\n the principal compiler.  In those cases, we can choose the standard, and\n we chose the more efficient register return alternative.\n \n+@strong{Warning:} code compiled with the @option{-freg-struct-return}\n+switch is not binary compatible with code compiled with the\n+@option{-fpcc-struct-return} switch.\n+Use it to conform to a non-default application binary interface.\n+\n @item -fshort-enums\n @opindex fshort-enums\n Allocate to an @code{enum} type only as many bytes as it needs for the\n declared range of possible values.  Specifically, the @code{enum} type\n will be equivalent to the smallest integer type which has enough room.\n \n+@strong{Warning:} the @option{-fshort-enums} switch causes GCC to generate\n+code that is not binary compatible with code generated without that switch.\n+Use it to conform to a non-default application binary interface.\n+\n @item -fshort-double\n @opindex fshort-double\n Use the same size for @code{double} as for @code{float}.\n \n+@strong{Warning:} the @option{-fshort-double} switch causes GCC to generate\n+code that is not binary compatible with code generated without that switch.\n+Use it to conform to a non-default application binary interface.\n+\n+@item -fshort-wchar\n+@opindex fshort-wchar\n+Override the underlying type for @samp{wchar_t} to be @samp{short\n+unsigned int} instead of the default for the target.  This option is\n+useful for building programs to run under WINE@.\n+\n+@strong{Warning:} the @option{-fshort-wchar} switch causes GCC to generate\n+code that is not binary compatible with code generated without that switch.\n+Use it to conform to a non-default application binary interface.\n+\n @item -fshared-data\n @opindex fshared-data\n Requests that the data and non-@code{const} variables of this\n@@ -10065,9 +10088,12 @@ three-way choice.\n \n @item -fpack-struct\n @opindex fpack-struct\n-Pack all structure members together without holes.  Usually you would\n-not want to use this option, since it makes the code suboptimal, and\n-the offsets of structure members won't agree with system libraries.\n+Pack all structure members together without holes.\n+\n+@strong{Warning:} the @option{-fpack-struct} switch causes GCC to generate\n+code that is not binary compatible with code generated without that switch.\n+Additionally, it makes the code suboptimial.\n+Use it to conform to a non-default application binary interface.\n \n @item -finstrument-functions\n @opindex finstrument-functions\n@@ -10164,8 +10190,10 @@ This option and its counterpart, @option{-fno-leading-underscore}, forcibly\n change the way C symbols are represented in the object file.  One use\n is to help link with legacy assembly code.\n \n-Be warned that you should know what you are doing when invoking this\n-option, and that not all targets provide complete support for it.\n+@strong{Warning:} the @option{-fleading-underscore} switch causes GCC to\n+generate code that is not binary compatible with code generated without that\n+switch.  Use it to conform to a non-default application binary interface.\n+Not all targets provide complete support for this switch.\n \n @item -ftls-model=@var{model}\n Alter the thread-local storage model to be used (@pxref{Thread-Local})."}]}