{"sha": "2e9a1f6b05e79f1b7de15d5ae64f3222d989e7e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU5YTFmNmIwNWU3OWYxYjdkZTE1ZDVhZTY0ZjMyMjJkOTg5ZTdlNQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-02-12T18:24:07Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-02-12T18:24:07Z"}, "message": "PR libstdc++/13731 (final part: writev)\n\n2004-02-12  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/13731 (final part: writev)\n\t* config/io/basic_file_stdio.cc (__gnu_internal::xwrite):\n\tNew, a wrapper around writev() handling partial writes.\n\t(__basic_file<char>::xwrite): Move to __gnu_internal and make\n\tstatic.\n\t(__basic_file<char>::xsputn): Update call.\n\t(__basic_file<char>::xsputn_2): Likewise.\n\t* config/io/basic_file_stdio.h (__basic_file<char>::write):\n\tDon't declare, now static.\n\nFrom-SVN: r77717", "tree": {"sha": "f18437faf7a97a867caae0fc3a5d38421cf6c9a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f18437faf7a97a867caae0fc3a5d38421cf6c9a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e9a1f6b05e79f1b7de15d5ae64f3222d989e7e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e9a1f6b05e79f1b7de15d5ae64f3222d989e7e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e9a1f6b05e79f1b7de15d5ae64f3222d989e7e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e9a1f6b05e79f1b7de15d5ae64f3222d989e7e5/comments", "author": null, "committer": null, "parents": [{"sha": "9dfc74a3ca1a13573044e8d2c3a7e7c1e623e72f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dfc74a3ca1a13573044e8d2c3a7e7c1e623e72f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dfc74a3ca1a13573044e8d2c3a7e7c1e623e72f"}], "stats": {"total": 103, "additions": 70, "deletions": 33}, "files": [{"sha": "b4a808445aeca1201b26b9124b8e65867f5dddae", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e9a1f6b05e79f1b7de15d5ae64f3222d989e7e5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e9a1f6b05e79f1b7de15d5ae64f3222d989e7e5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2e9a1f6b05e79f1b7de15d5ae64f3222d989e7e5", "patch": "@@ -1,3 +1,15 @@\n+2004-02-12  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/13731 (final part: writev)\n+\t* config/io/basic_file_stdio.cc (__gnu_internal::xwrite):\n+\tNew, a wrapper around writev() handling partial writes.\n+\t(__basic_file<char>::xwrite): Move to __gnu_internal and make\n+\tstatic.\n+\t(__basic_file<char>::xsputn): Update call.\n+\t(__basic_file<char>::xsputn_2): Likewise.\t\n+\t* config/io/basic_file_stdio.h (__basic_file<char>::write):\n+\tDon't declare, now static.\n+\n 2004-02-11  Stefan Olsson  <stefan@xapa.se>\n \n \t* docs/html/ext/mt_allocator.html: New."}, {"sha": "f83b7a25f88dee88eb98e380cb238ae1ad71ab3b", "filename": "libstdc++-v3/config/io/basic_file_stdio.cc", "status": "modified", "additions": 58, "deletions": 30, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e9a1f6b05e79f1b7de15d5ae64f3222d989e7e5/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e9a1f6b05e79f1b7de15d5ae64f3222d989e7e5/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc?ref=2e9a1f6b05e79f1b7de15d5ae64f3222d989e7e5", "patch": "@@ -105,6 +105,60 @@ namespace __gnu_internal\n       default: return 0; // invalid\n       }\n   }\n+\n+  // Wrapper handling partial write.\n+  static std::streamsize\n+  xwrite(int __fd, const char* __s, std::streamsize __n)\n+  {\n+    std::streamsize __nleft = __n;\n+    while (__nleft > 0)\n+      {\n+\tconst std::streamsize __ret = write(__fd, __s, __nleft);\n+\tif (__ret == -1L && errno == EINTR)\n+\t  continue;\n+\telse if (__ret == -1L)\n+\t  break;\n+\t__nleft -= __ret;\n+\t__s += __ret;\n+      }\n+    return __n - __nleft;\n+  }\n+\n+#ifdef _GLIBCXX_HAVE_WRITEV\n+  // Wrapper handling partial writev.\n+  static std::streamsize\n+  xwritev(int __fd, const char* __s1, std::streamsize __n1,\n+\t  const char* __s2, std::streamsize __n2)\n+  {\n+    std::streamsize __ret;\n+\n+    struct iovec __iov[2];\n+    __iov[0].iov_base = const_cast<char*>(__s1);\n+    __iov[0].iov_len = __n1;\n+    __iov[1].iov_base = const_cast<char*>(__s2);\n+    __iov[1].iov_len = __n2;\n+\n+    do\n+      __ret = writev(__fd, __iov, 2);\n+    while (__ret == -1L && errno == EINTR);\n+\n+    if (__ret == -1L)\n+      __ret = 0;\n+    else if (__ret < __n1 + __n2)\n+      {\n+\tif (__ret >= __n1)\n+\t  {\n+\t    const std::streamsize __off = __ret - __n1;\n+\t    __ret += xwrite(__fd, __s2 + __off, __n2 - __off);\n+\t  }\n+\telse\n+\t  __ret += xwritev(__fd, __s1 + __ret, __n1 - __ret,\n+\t\t\t   __s2, __n2);\n+      }\n+\n+    return __ret;\n+  }\n+#endif\n } // namespace __gnu_internal\n \n namespace std \n@@ -201,49 +255,23 @@ namespace std\n     return __ret;\n   }\n \n-  // Wrapper handling partial write.\n-  streamsize\n-  __basic_file<char>::xwrite(const char* __s, streamsize __n)\n-  {\n-    streamsize __nleft = __n;\n-    while (__nleft > 0)\n-      {\n-\tconst streamsize __ret = write(this->fd(), __s, __nleft);\n-\tif (__ret == -1L && errno == EINTR)\n-\t  continue;\n-\telse if (__ret == -1L)\n-\t  break;\n-\t__nleft -= __ret;\n-\t__s += __ret;\n-      }\n-    return __n - __nleft;\n-  }\n- \n   streamsize \n   __basic_file<char>::xsputn(const char* __s, streamsize __n)\n-  { return __basic_file<char>::xwrite(__s, __n); }\n+  { return __gnu_internal::xwrite(this->fd(), __s, __n); }\n \n   streamsize \n   __basic_file<char>::xsputn_2(const char* __s1, streamsize __n1,\n \t\t\t       const char* __s2, streamsize __n2)\n   {\n     streamsize __ret = 0;\n #ifdef _GLIBCXX_HAVE_WRITEV\n-    struct iovec __iov[2];\n-    __iov[0].iov_base = const_cast<char*>(__s1);\n-    __iov[0].iov_len = __n1;\n-    __iov[1].iov_base = const_cast<char*>(__s2);\n-    __iov[1].iov_len = __n2;\n-\n-    do\n-      __ret = writev(this->fd(), __iov, 2);\n-    while (__ret == -1L && errno == EINTR);\n+    __ret = __gnu_internal::xwritev(this->fd(), __s1, __n1, __s2, __n2);\n #else\n     if (__n1)\n-      __ret = __basic_file<char>::xwrite(__s1, __n1);\n+      __ret = __gnu_internal::xwrite(this->fd(), __s1, __n1);\n \n     if (__ret == __n1)\n-      __ret += __basic_file<char>::xwrite(__s2, __n2);\n+      __ret += __gnu_internal::xwrite(this->fd(), __s2, __n2);\n #endif\n     return __ret;\n   }"}, {"sha": "57ff4326e6b190498d5f9c153ca4186e26450dce", "filename": "libstdc++-v3/config/io/basic_file_stdio.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e9a1f6b05e79f1b7de15d5ae64f3222d989e7e5/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e9a1f6b05e79f1b7de15d5ae64f3222d989e7e5/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h?ref=2e9a1f6b05e79f1b7de15d5ae64f3222d989e7e5", "patch": "@@ -83,9 +83,6 @@ namespace std\n \n       ~__basic_file();\n \n-      streamsize \n-      xwrite(const char* __s, streamsize __n);\n-\n       streamsize \n       xsputn(const char* __s, streamsize __n);\n "}]}