{"sha": "755c2e7d71cbab89b2bd1d787db46428a604efb2", "node_id": "C_kwDOANBUbNoAKDc1NWMyZTdkNzFjYmFiODliMmJkMWQ3ODdkYjQ2NDI4YTYwNGVmYjI", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-11-24T06:39:05Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-11-24T06:39:05Z"}, "message": "middle-end: Fix failures with bitclear patterns on signed values\n\nDuring testing after rebasing to commit I noticed a failing testcase with the\nbitmask compare patch.\n\nConsider the following C++ testcase:\n\n#include <compare>\n\n#define A __attribute__((noipa))\nA bool f5 (double i, double j) { auto c = i <=> j; return c >= 0; }\n\nThis turns into a comparison against chars, on systems where chars are signed\nthe pattern inserts an unsigned convert such that it's able to do the\ntransformation.\n\ni.e.:\n\n  # RANGE [-1, 2]\n  # c$_M_value_22 = PHI <-1(3), 0(2), 2(5), 1(4)>\n  # RANGE ~[3, 254]\n  _11 = (unsigned char) c$_M_value_22;\n  _19 = _11 <= 1;\n  # .MEM_24 = VDEF <.MEM_6(D)>\n  D.10434 ={v} {CLOBBER};\n  # .MEM_14 = VDEF <.MEM_24>\n  D.10407 ={v} {CLOBBER};\n  # VUSE <.MEM_14>\n  return _19;\n\ninstead of:\n\n  # RANGE [-1, 2]\n  # c$_M_value_5 = PHI <-1(3), 0(2), 2(5), 1(4)>\n  # RANGE [-2, 2]\n  _3 = c$_M_value_5 & -2;\n  _19 = _3 == 0;\n  # .MEM_24 = VDEF <.MEM_6(D)>\n  D.10440 ={v} {CLOBBER};\n  # .MEM_14 = VDEF <.MEM_24>\n  D.10413 ={v} {CLOBBER};\n  # VUSE <.MEM_14>\n  return _19;\n\nThis causes much worse codegen under -ffast-math due to phiops no longer\nrecognizing the pattern.  It turns out that phiopts spaceship_replacement is\nlooking for the exact form that was just changed.\n\nThe comments seems to suggest this code only checks for (res & ~1) == 0 but the\nimplementation seems to suggest it's broader.\n\nAs such I added a case to check to see if the value comparison we found is a\ntype cast.  and strips away the type cast and continues.\n\nIn match.pd the typecasts are only added for signed comparisons to == 0 and != 0\nwhich are then rewritten into comparisons with 1.\n\nAs such I only check for 1 and LE and GT, which is what match.pd would have\nrewritten it to.\n\nThis fixes the regression but this is not code I 100% understand, since I don't\nreally know the semantics of the spaceship operator so would appreciate an extra\nlook.\n\ngcc/ChangeLog:\n\n\t* tree-ssa-phiopt.c (spaceship_replacement): Handle new canonical\n\tcodegen.", "tree": {"sha": "3a96133010d3ed8194e020e684572e9719300ee3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a96133010d3ed8194e020e684572e9719300ee3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/755c2e7d71cbab89b2bd1d787db46428a604efb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/755c2e7d71cbab89b2bd1d787db46428a604efb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/755c2e7d71cbab89b2bd1d787db46428a604efb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/755c2e7d71cbab89b2bd1d787db46428a604efb2/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0888d6bbe97e10de0e624f4ab46acc276e5ee1d7"}], "stats": {"total": 94, "additions": 86, "deletions": 8}, "files": [{"sha": "3eac9b1ce465b5ead8e31fba87ec614775edb603", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 86, "deletions": 8, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755c2e7d71cbab89b2bd1d787db46428a604efb2/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755c2e7d71cbab89b2bd1d787db46428a604efb2/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=755c2e7d71cbab89b2bd1d787db46428a604efb2", "patch": "@@ -2055,11 +2055,36 @@ spaceship_replacement (basic_block cond_bb, basic_block middle_bb,\n   gimple *orig_use_stmt = use_stmt;\n   tree orig_use_lhs = NULL_TREE;\n   int prec = TYPE_PRECISION (TREE_TYPE (phires));\n-  if (is_gimple_assign (use_stmt)\n-      && gimple_assign_rhs_code (use_stmt) == BIT_AND_EXPR\n-      && TREE_CODE (gimple_assign_rhs2 (use_stmt)) == INTEGER_CST\n-      && (wi::to_wide (gimple_assign_rhs2 (use_stmt))\n-\t  == wi::shifted_mask (1, prec - 1, false, prec)))\n+  bool is_cast = false;\n+\n+  /* Deal with the case when match.pd has rewritten the (res & ~1) == 0\n+     into res <= 1 and has left a type-cast for signed types.  */\n+  if (gimple_assign_cast_p (use_stmt))\n+    {\n+      orig_use_lhs = gimple_assign_lhs (use_stmt);\n+      /* match.pd would have only done this for a signed type,\n+\t so the conversion must be to an unsigned one.  */\n+      tree ty1 = TREE_TYPE (gimple_assign_rhs1 (use_stmt));\n+      tree ty2 = TREE_TYPE (orig_use_lhs);\n+\n+      if (!TYPE_UNSIGNED (ty2) || !INTEGRAL_TYPE_P (ty2))\n+\treturn false;\n+      if (TYPE_PRECISION (ty1) != TYPE_PRECISION (ty2))\n+\treturn false;\n+      if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (orig_use_lhs))\n+\treturn false;\n+      if (EDGE_COUNT (phi_bb->preds) != 4)\n+\treturn false;\n+      if (!single_imm_use (orig_use_lhs, &use_p, &use_stmt))\n+\treturn false;\n+\n+      is_cast = true;\n+    }\n+  else if (is_gimple_assign (use_stmt)\n+\t   && gimple_assign_rhs_code (use_stmt) == BIT_AND_EXPR\n+\t   && TREE_CODE (gimple_assign_rhs2 (use_stmt)) == INTEGER_CST\n+\t   && (wi::to_wide (gimple_assign_rhs2 (use_stmt))\n+\t       == wi::shifted_mask (1, prec - 1, false, prec)))\n     {\n       /* For partial_ordering result operator>= with unspec as second\n \t argument is (res & 1) == res, folded by match.pd into\n@@ -2116,7 +2141,43 @@ spaceship_replacement (basic_block cond_bb, basic_block middle_bb,\n       || !tree_fits_shwi_p (rhs)\n       || !IN_RANGE (tree_to_shwi (rhs), -1, 1))\n     return false;\n-  if (orig_use_lhs)\n+\n+  if (is_cast)\n+    {\n+      if (TREE_CODE (rhs) != INTEGER_CST)\n+\treturn false;\n+      /* As for -ffast-math we assume the 2 return to be\n+\t impossible, canonicalize (unsigned) res <= 1U or\n+\t (unsigned) res < 2U into res >= 0 and (unsigned) res > 1U\n+\t or (unsigned) res >= 2U as res < 0.  */\n+      switch (cmp)\n+\t{\n+\tcase LE_EXPR:\n+\t  if (!integer_onep (rhs))\n+\t    return false;\n+\t  cmp = GE_EXPR;\n+\t  break;\n+\tcase LT_EXPR:\n+\t  if (wi::ne_p (wi::to_widest (rhs), 2))\n+\t    return false;\n+\t  cmp = GE_EXPR;\n+\t  break;\n+\tcase GT_EXPR:\n+\t  if (!integer_onep (rhs))\n+\t    return false;\n+\t  cmp = LT_EXPR;\n+\t  break;\n+\tcase GE_EXPR:\n+\t  if (wi::ne_p (wi::to_widest (rhs), 2))\n+\t    return false;\n+\t  cmp = LT_EXPR;\n+\t  break;\n+\tdefault:\n+\t  return false;\n+\t}\n+      rhs = build_zero_cst (TREE_TYPE (phires));\n+    }\n+  else if (orig_use_lhs)\n     {\n       if ((cmp != EQ_EXPR && cmp != NE_EXPR) || !integer_zerop (rhs))\n \treturn false;\n@@ -2411,6 +2472,7 @@ spaceship_replacement (basic_block cond_bb, basic_block middle_bb,\n       use_operand_p use_p;\n       imm_use_iterator iter;\n       bool has_debug_uses = false;\n+      bool has_cast_debug_uses = false;\n       FOR_EACH_IMM_USE_FAST (use_p, iter, phires)\n \t{\n \t  gimple *use_stmt = USE_STMT (use_p);\n@@ -2422,12 +2484,14 @@ spaceship_replacement (basic_block cond_bb, basic_block middle_bb,\n \t}\n       if (orig_use_lhs)\n \t{\n-\t  if (!has_debug_uses)\n+\t  if (!has_debug_uses || is_cast)\n \t    FOR_EACH_IMM_USE_FAST (use_p, iter, orig_use_lhs)\n \t      {\n \t\tgimple *use_stmt = USE_STMT (use_p);\n \t\tgcc_assert (is_gimple_debug (use_stmt));\n \t\thas_debug_uses = true;\n+\t\tif (is_cast)\n+\t\t  has_cast_debug_uses = true;\n \t      }\n \t  gimple_stmt_iterator gsi = gsi_for_stmt (orig_use_stmt);\n \t  tree zero = build_zero_cst (TREE_TYPE (orig_use_lhs));\n@@ -2459,7 +2523,21 @@ spaceship_replacement (basic_block cond_bb, basic_block middle_bb,\n \t  gsi_insert_before (&gsi, g, GSI_SAME_STMT);\n \t  replace_uses_by (phires, temp2);\n \t  if (orig_use_lhs)\n-\t    replace_uses_by (orig_use_lhs, temp2);\n+\t    {\n+\t      if (has_cast_debug_uses)\n+\t\t{\n+\t\t  tree temp3 = make_node (DEBUG_EXPR_DECL);\n+\t\t  DECL_ARTIFICIAL (temp3) = 1;\n+\t\t  TREE_TYPE (temp3) = TREE_TYPE (orig_use_lhs);\n+\t\t  SET_DECL_MODE (temp3, TYPE_MODE (type));\n+\t\t  t = fold_convert (TREE_TYPE (temp3), temp2);\n+\t\t  g = gimple_build_debug_bind (temp3, t, phi);\n+\t\t  gsi_insert_before (&gsi, g, GSI_SAME_STMT);\n+\t\t  replace_uses_by (orig_use_lhs, temp3);\n+\t\t}\n+\t      else\n+\t\treplace_uses_by (orig_use_lhs, temp2);\n+\t    }\n \t}\n     }\n "}]}