{"sha": "1efafef383b156074d4bd5ed35f656a509c7bf7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVmYWZlZjM4M2IxNTYwNzRkNGJkNWVkMzVmNjU2YTUwOWM3YmY3YQ==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2016-08-02T09:25:19Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2016-08-02T09:25:19Z"}, "message": "[PATCH AArch64] Add more AArch64 NEON intrinsics\n\nAdd vmaxnm_f64, vminnm_f64, vmax_f64, vmin_f64.\n\nCommitted on behalf of Tamar Christina <tamar.christina@arm.com> .\n\ngcc/\n\n\t* config/aarch64/aarch64-simd-builtins.def\n\t(__builtin_aarch64_fmindf): Change BUILTIN_VDQF to BUILTIN_VDQF_DF.\n\t(__builtin_aarch64_fmaxdf): Likewise.\n\t(__builtin_aarch64_smin_nandf): Likewise.\n\t(__builtin_aarch64_smax_nandf): Likewise.\n\t* config/aarch64/aarch64-simd.md (<fmaxmin><mode>3): Remove.\n\t* config/aarch64/aarch64.md (<fmaxmin><mode>3): Rename to...\n\t(<fmaxmin><mode>3): ...this.\n\t* config/aarch64/arm_neon.h (vmaxnm_f64): New.\n\t(vminnm_f64): Likewise.\n\t(vmin_f64): Likewise.\n\t(vmax_f64): Likewise.\n\t* config/aarch64/iterators.md (FMAXMIN): Merge with...\n\t(FMAXMIN_UNS): ...this.\n\t(fmaxmin): Merged with\n\t(fmaxmin_op): ...this...\n\t(maxmin_uns_op): ...in to this.\n\ngcc/testsuite/\n\n\t* gcc.target/aarch64/vminmaxnm.c: New.\n\t* gcc.target/aarch64/simd/vminmaxnm_1.c (main): Added float64x1_t\n\ttests.\n\nFrom-SVN: r238977", "tree": {"sha": "03746c0e2e5243b1dad9f050a454caff5e255376", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03746c0e2e5243b1dad9f050a454caff5e255376"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1efafef383b156074d4bd5ed35f656a509c7bf7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1efafef383b156074d4bd5ed35f656a509c7bf7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1efafef383b156074d4bd5ed35f656a509c7bf7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1efafef383b156074d4bd5ed35f656a509c7bf7a/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0b953808f4395ee3e5f31a8355b200142ab30cd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b953808f4395ee3e5f31a8355b200142ab30cd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b953808f4395ee3e5f31a8355b200142ab30cd6"}], "stats": {"total": 205, "additions": 166, "deletions": 39}, "files": [{"sha": "f2c81b077fb57aba2a2b635c2cefdfead0d375fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efafef383b156074d4bd5ed35f656a509c7bf7a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efafef383b156074d4bd5ed35f656a509c7bf7a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1efafef383b156074d4bd5ed35f656a509c7bf7a", "patch": "@@ -1,3 +1,23 @@\n+2016-08-02  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def\n+\t(__builtin_aarch64_fmindf): Change BUILTIN_VDQF to BUILTIN_VDQF_DF.\n+\t(__builtin_aarch64_fmaxdf): Likewise.\n+\t(__builtin_aarch64_smin_nandf): Likewise.\n+\t(__builtin_aarch64_smax_nandf): Likewise.\n+\t* config/aarch64/aarch64-simd.md (<fmaxmin><mode>3): Remove.\n+\t* config/aarch64/aarch64.md (<fmaxmin><mode>3): Rename to...\n+\t(<fmaxmin><mode>3): ...this.\n+\t* config/aarch64/arm_neon.h (vmaxnm_f64): New.\n+\t(vminnm_f64): Likewise.\n+\t(vmin_f64): Likewise.\n+\t(vmax_f64): Likewise.\n+\t* config/aarch64/iterators.md (FMAXMIN): Merge with...\n+\t(FMAXMIN_UNS): ...this.\n+\t(fmaxmin): Merged with\n+\t(fmaxmin_op): ...this...\n+\t(maxmin_uns_op): ...in to this.\n+\n 2016-08-01  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin):"}, {"sha": "e1154b4b27820c0075d9a9edb4f8b48ef4f06b07", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efafef383b156074d4bd5ed35f656a509c7bf7a/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efafef383b156074d4bd5ed35f656a509c7bf7a/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=1efafef383b156074d4bd5ed35f656a509c7bf7a", "patch": "@@ -241,19 +241,19 @@\n   BUILTIN_VHSDF (UNOP, reduc_smax_nan_scal_, 10)\n   BUILTIN_VHSDF (UNOP, reduc_smin_nan_scal_, 10)\n \n-  /* Implemented by <maxmin><mode>3.\n+  /* Implemented by <maxmin_uns><mode>3.\n      smax variants map to fmaxnm,\n      smax_nan variants map to fmax.  */\n   BUILTIN_VDQ_BHSI (BINOP, smax, 3)\n   BUILTIN_VDQ_BHSI (BINOP, smin, 3)\n   BUILTIN_VDQ_BHSI (BINOP, umax, 3)\n   BUILTIN_VDQ_BHSI (BINOP, umin, 3)\n-  BUILTIN_VHSDF (BINOP, smax_nan, 3)\n-  BUILTIN_VHSDF (BINOP, smin_nan, 3)\n+  BUILTIN_VHSDF_DF (BINOP, smax_nan, 3)\n+  BUILTIN_VHSDF_DF (BINOP, smin_nan, 3)\n \n-  /* Implemented by <fmaxmin><mode>3.  */\n-  BUILTIN_VHSDF (BINOP, fmax, 3)\n-  BUILTIN_VHSDF (BINOP, fmin, 3)\n+  /* Implemented by <maxmin_uns><mode>3.  */\n+  BUILTIN_VHSDF_HSDF (BINOP, fmax, 3)\n+  BUILTIN_VHSDF_HSDF (BINOP, fmin, 3)\n \n   /* Implemented by aarch64_<maxmin_uns>p<mode>.  */\n   BUILTIN_VDQ_BHSI (BINOP, smaxp, 0)\n@@ -549,8 +549,4 @@\n   BUILTIN_GPI (UNOP, fix_truncdf, 2)\n   BUILTIN_GPI_I16 (UNOPUS, fixuns_trunchf, 2)\n   BUILTIN_GPI (UNOPUS, fixuns_truncsf, 2)\n-  BUILTIN_GPI (UNOPUS, fixuns_truncdf, 2)\n-\n-  /* Implemented by <fmaxmin><mode>3.  */\n-  VAR1 (BINOP, fmax, 3, hf)\n-  VAR1 (BINOP, fmin, 3, hf)\n+  BUILTIN_GPI (UNOPUS, fixuns_truncdf, 2)\n\\ No newline at end of file"}, {"sha": "f2575a0f300db2b6f943d55b035db951d896971a", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efafef383b156074d4bd5ed35f656a509c7bf7a/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efafef383b156074d4bd5ed35f656a509c7bf7a/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=1efafef383b156074d4bd5ed35f656a509c7bf7a", "patch": "@@ -2038,6 +2038,9 @@\n   [(set_attr \"type\" \"neon_fp_minmax_<stype><q>\")]\n )\n \n+;; Vector forms for fmax, fmin, fmaxnm, fminnm.\n+;; fmaxnm and fminnm are used for the fmax<mode>3 standard pattern names,\n+;; which implement the IEEE fmax ()/fmin () functions.\n (define_insn \"<maxmin_uns><mode>3\"\n   [(set (match_operand:VHSDF 0 \"register_operand\" \"=w\")\n        (unspec:VHSDF [(match_operand:VHSDF 1 \"register_operand\" \"w\")\n@@ -2048,17 +2051,6 @@\n   [(set_attr \"type\" \"neon_fp_minmax_<stype><q>\")]\n )\n \n-;; Auto-vectorized forms for the IEEE-754 fmax()/fmin() functions\n-(define_insn \"<fmaxmin><mode>3\"\n-  [(set (match_operand:VHSDF 0 \"register_operand\" \"=w\")\n-\t(unspec:VHSDF [(match_operand:VHSDF 1 \"register_operand\" \"w\")\n-\t\t       (match_operand:VHSDF 2 \"register_operand\" \"w\")]\n-\t\t       FMAXMIN))]\n-  \"TARGET_SIMD\"\n-  \"<fmaxmin_op>\\\\t%0.<Vtype>, %1.<Vtype>, %2.<Vtype>\"\n-  [(set_attr \"type\" \"neon_fp_minmax_<stype><q>\")]\n-)\n-\n ;; 'across lanes' add.\n \n (define_expand \"reduc_plus_scal_<mode>\""}, {"sha": "f15dd8d8672e089d6d33b2237faf92e923cf1ac3", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efafef383b156074d4bd5ed35f656a509c7bf7a/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efafef383b156074d4bd5ed35f656a509c7bf7a/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=1efafef383b156074d4bd5ed35f656a509c7bf7a", "patch": "@@ -4841,14 +4841,16 @@\n   [(set_attr \"type\" \"f_minmax<s>\")]\n )\n \n-;; Scalar forms for the IEEE-754 fmax()/fmin() functions\n-(define_insn \"<fmaxmin><mode>3\"\n+;; Scalar forms for fmax, fmin, fmaxnm, fminnm.\n+;; fmaxnm and fminnm are used for the fmax<mode>3 standard pattern names,\n+;; which implement the IEEE fmax ()/fmin () functions.\n+(define_insn \"<maxmin_uns><mode>3\"\n   [(set (match_operand:GPF_F16 0 \"register_operand\" \"=w\")\n \t(unspec:GPF_F16 [(match_operand:GPF_F16 1 \"register_operand\" \"w\")\n \t\t     (match_operand:GPF_F16 2 \"register_operand\" \"w\")]\n-\t\t     FMAXMIN))]\n+\t\t     FMAXMIN_UNS))]\n   \"TARGET_FLOAT\"\n-  \"<fmaxmin_op>\\\\t%<s>0, %<s>1, %<s>2\"\n+  \"<maxmin_uns_op>\\\\t%<s>0, %<s>1, %<s>2\"\n   [(set_attr \"type\" \"f_minmax<stype>\")]\n )\n "}, {"sha": "fcdc977d6316284199a30d2b50d67c8360a13ec9", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efafef383b156074d4bd5ed35f656a509c7bf7a/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efafef383b156074d4bd5ed35f656a509c7bf7a/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=1efafef383b156074d4bd5ed35f656a509c7bf7a", "patch": "@@ -17201,6 +17201,14 @@ vmax_f32 (float32x2_t __a, float32x2_t __b)\n   return __builtin_aarch64_smax_nanv2sf (__a, __b);\n }\n \n+__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n+vmax_f64 (float64x1_t __a, float64x1_t __b)\n+{\n+    return (float64x1_t)\n+      { __builtin_aarch64_smax_nandf (vget_lane_f64 (__a, 0),\n+\t\t\t\t      vget_lane_f64 (__b, 0)) };\n+}\n+\n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n vmax_s8 (int8x8_t __a, int8x8_t __b)\n {\n@@ -17692,6 +17700,14 @@ vmaxnm_f32 (float32x2_t __a, float32x2_t __b)\n   return __builtin_aarch64_fmaxv2sf (__a, __b);\n }\n \n+__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n+vmaxnm_f64 (float64x1_t __a, float64x1_t __b)\n+{\n+  return (float64x1_t)\n+    { __builtin_aarch64_fmaxdf (vget_lane_f64 (__a, 0),\n+\t\t\t\tvget_lane_f64 (__b, 0)) };\n+}\n+\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vmaxnmq_f32 (float32x4_t __a, float32x4_t __b)\n {\n@@ -17824,6 +17840,14 @@ vmin_f32 (float32x2_t __a, float32x2_t __b)\n   return __builtin_aarch64_smin_nanv2sf (__a, __b);\n }\n \n+__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n+vmin_f64 (float64x1_t __a, float64x1_t __b)\n+{\n+    return (float64x1_t)\n+\t  { __builtin_aarch64_smin_nandf (vget_lane_f64 (__a, 0),\n+\t\t\t\t\t  vget_lane_f64 (__b, 0)) };\n+}\n+\n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n vmin_s8 (int8x8_t __a, int8x8_t __b)\n {\n@@ -17922,6 +17946,14 @@ vminnm_f32 (float32x2_t __a, float32x2_t __b)\n   return __builtin_aarch64_fminv2sf (__a, __b);\n }\n \n+__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n+vminnm_f64 (float64x1_t __a, float64x1_t __b)\n+{\n+  return (float64x1_t)\n+    { __builtin_aarch64_fmind (vget_lane_f64 (__a, 0),\n+\t\t\t\tvget_lane_f64 (__b, 0)) };\n+}\n+\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vminnmq_f32 (float32x4_t __a, float32x4_t __b)\n {"}, {"sha": "187057f2da07981e1949f61c55a2226c6f1c4a2a", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efafef383b156074d4bd5ed35f656a509c7bf7a/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efafef383b156074d4bd5ed35f656a509c7bf7a/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=1efafef383b156074d4bd5ed35f656a509c7bf7a", "patch": "@@ -1016,9 +1016,8 @@\n (define_int_iterator ADDSUBHN2 [UNSPEC_ADDHN2 UNSPEC_RADDHN2\n \t\t\t        UNSPEC_SUBHN2 UNSPEC_RSUBHN2])\n \n-(define_int_iterator FMAXMIN_UNS [UNSPEC_FMAX UNSPEC_FMIN])\n-\n-(define_int_iterator FMAXMIN [UNSPEC_FMAXNM UNSPEC_FMINNM])\n+(define_int_iterator FMAXMIN_UNS [UNSPEC_FMAX UNSPEC_FMIN\n+\t\t\t\t  UNSPEC_FMAXNM UNSPEC_FMINNM])\n \n (define_int_iterator VQDMULH [UNSPEC_SQDMULH UNSPEC_SQRDMULH])\n \n@@ -1102,7 +1101,9 @@\n \t\t\t      (UNSPEC_FMAXV \"smax_nan\")\n \t\t\t      (UNSPEC_FMIN \"smin_nan\")\n \t\t\t      (UNSPEC_FMINNMV \"smin\")\n-\t\t\t      (UNSPEC_FMINV \"smin_nan\")])\n+\t\t\t      (UNSPEC_FMINV \"smin_nan\")\n+\t\t\t      (UNSPEC_FMAXNM \"fmax\")\n+\t\t\t      (UNSPEC_FMINNM \"fmin\")])\n \n (define_int_attr  maxmin_uns_op [(UNSPEC_UMAXV \"umax\")\n \t\t\t\t (UNSPEC_UMINV \"umin\")\n@@ -1113,13 +1114,9 @@\n \t\t\t\t (UNSPEC_FMAXV \"fmax\")\n \t\t\t\t (UNSPEC_FMIN \"fmin\")\n \t\t\t\t (UNSPEC_FMINNMV \"fminnm\")\n-\t\t\t\t (UNSPEC_FMINV \"fmin\")])\n-\n-(define_int_attr fmaxmin [(UNSPEC_FMAXNM \"fmax\")\n-\t\t\t  (UNSPEC_FMINNM \"fmin\")])\n-\n-(define_int_attr fmaxmin_op [(UNSPEC_FMAXNM \"fmaxnm\")\n-\t\t\t     (UNSPEC_FMINNM \"fminnm\")])\n+\t\t\t\t (UNSPEC_FMINV \"fmin\")\n+\t\t\t\t (UNSPEC_FMAXNM \"fmaxnm\")\n+\t\t\t\t (UNSPEC_FMINNM \"fminnm\")])\n \n (define_int_attr sur [(UNSPEC_SHADD \"s\") (UNSPEC_UHADD \"u\")\n \t\t      (UNSPEC_SRHADD \"sr\") (UNSPEC_URHADD \"ur\")"}, {"sha": "f5bd074cf189225db9c76b047b5d28ee45cecafc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efafef383b156074d4bd5ed35f656a509c7bf7a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efafef383b156074d4bd5ed35f656a509c7bf7a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1efafef383b156074d4bd5ed35f656a509c7bf7a", "patch": "@@ -1,3 +1,9 @@\n+2016-08-02  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/aarch64/vminmaxnm.c: New.\n+\t* gcc.target/aarch64/simd/vminmaxnm_1.c (main): Add float64x1_t\n+\ttests.\n+\n 2016-08-01  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/vec-extract-5.c: New tests to test"}, {"sha": "192bad9879b580ed51f159d14fd5d899c63891e7", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vminmaxnm_1.c", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efafef383b156074d4bd5ed35f656a509c7bf7a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvminmaxnm_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efafef383b156074d4bd5ed35f656a509c7bf7a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvminmaxnm_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvminmaxnm_1.c?ref=1efafef383b156074d4bd5ed35f656a509c7bf7a", "patch": "@@ -1,4 +1,4 @@\n-/* Test the `v[min|max]nm{q}_f*' AArch64 SIMD intrinsic.  */\n+/* Test the `v[min|max]{nm}{q}_f*' AArch64 SIMD intrinsic.  */\n \n /* { dg-do run } */\n /* { dg-options \"-O2\" } */\n@@ -18,6 +18,7 @@ extern void abort ();\n int\n main (int argc, char **argv)\n {\n+  /* v{min|max}nm_f32 normal.  */\n   float32x2_t f32x2_input1 = vdup_n_f32 (-1.0);\n   float32x2_t f32x2_input2 = vdup_n_f32 (0.0);\n   float32x2_t f32x2_exp_minnm  = vdup_n_f32 (-1.0);\n@@ -28,6 +29,7 @@ main (int argc, char **argv)\n   CHECK (uint32_t, 2, f32x2_ret_minnm, f32x2_exp_minnm);\n   CHECK (uint32_t, 2, f32x2_ret_maxnm, f32x2_exp_maxnm);\n \n+  /* v{min|max}nm_f32 NaN.  */\n   f32x2_input1 = vdup_n_f32 (__builtin_nanf (\"\"));\n   f32x2_input2 = vdup_n_f32 (1.0);\n   f32x2_exp_minnm  = vdup_n_f32 (1.0);\n@@ -38,6 +40,7 @@ main (int argc, char **argv)\n   CHECK (uint32_t, 2, f32x2_ret_minnm, f32x2_exp_minnm);\n   CHECK (uint32_t, 2, f32x2_ret_maxnm, f32x2_exp_maxnm);\n \n+  /* v{min|max}nmq_f32 normal.  */\n   float32x4_t f32x4_input1 = vdupq_n_f32 (-1024.0);\n   float32x4_t f32x4_input2 = vdupq_n_f32 (77.0);\n   float32x4_t f32x4_exp_minnm  = vdupq_n_f32 (-1024.0);\n@@ -48,6 +51,7 @@ main (int argc, char **argv)\n   CHECK (uint32_t, 4, f32x4_ret_minnm, f32x4_exp_minnm);\n   CHECK (uint32_t, 4, f32x4_ret_maxnm, f32x4_exp_maxnm);\n \n+  /* v{min|max}nmq_f32 NaN.  */\n   f32x4_input1 = vdupq_n_f32 (-__builtin_nanf (\"\"));\n   f32x4_input2 = vdupq_n_f32 (-1.0);\n   f32x4_exp_minnm  = vdupq_n_f32 (-1.0);\n@@ -58,16 +62,57 @@ main (int argc, char **argv)\n   CHECK (uint32_t, 4, f32x4_ret_minnm, f32x4_exp_minnm);\n   CHECK (uint32_t, 4, f32x4_ret_maxnm, f32x4_exp_maxnm);\n \n+  /* v{min|max}nm_f64 normal.  */\n+  float64x1_t f64x1_input1 = vdup_n_f64 (1.23);\n+  float64x1_t f64x1_input2 = vdup_n_f64 (4.56);\n+  float64x1_t f64x1_exp_minnm  = vdup_n_f64 (1.23);\n+  float64x1_t f64x1_exp_maxnm  = vdup_n_f64 (4.56);\n+  float64x1_t f64x1_ret_minnm  = vminnm_f64 (f64x1_input1, f64x1_input2);\n+  float64x1_t f64x1_ret_maxnm  = vmaxnm_f64 (f64x1_input1, f64x1_input2);\n+  CHECK (uint64_t, 1, f64x1_ret_minnm, f64x1_exp_minnm);\n+  CHECK (uint64_t, 1, f64x1_ret_maxnm, f64x1_exp_maxnm);\n+\n+  /* v{min|max}_f64 normal.  */\n+  float64x1_t f64x1_exp_min  = vdup_n_f64 (1.23);\n+  float64x1_t f64x1_exp_max  = vdup_n_f64 (4.56);\n+  float64x1_t f64x1_ret_min  = vmin_f64 (f64x1_input1, f64x1_input2);\n+  float64x1_t f64x1_ret_max  = vmax_f64 (f64x1_input1, f64x1_input2);\n+  CHECK (uint64_t, 1, f64x1_ret_min, f64x1_exp_min);\n+  CHECK (uint64_t, 1, f64x1_ret_max, f64x1_exp_max);\n+\n+  /* v{min|max}nmq_f64 normal.  */\n   float64x2_t f64x2_input1 = vdupq_n_f64 (1.23);\n   float64x2_t f64x2_input2 = vdupq_n_f64 (4.56);\n   float64x2_t f64x2_exp_minnm  = vdupq_n_f64 (1.23);\n   float64x2_t f64x2_exp_maxnm  = vdupq_n_f64 (4.56);\n   float64x2_t f64x2_ret_minnm  = vminnmq_f64 (f64x2_input1, f64x2_input2);\n   float64x2_t f64x2_ret_maxnm  = vmaxnmq_f64 (f64x2_input1, f64x2_input2);\n-\n   CHECK (uint64_t, 2, f64x2_ret_minnm, f64x2_exp_minnm);\n   CHECK (uint64_t, 2, f64x2_ret_maxnm, f64x2_exp_maxnm);\n \n+  /* v{min|max}nm_f64 NaN.  */\n+  f64x1_input1 = vdup_n_f64 (-__builtin_nanf (\"\"));\n+  f64x1_input2 = vdup_n_f64 (1.0);\n+  f64x1_exp_minnm  = vdup_n_f64 (1.0);\n+  f64x1_exp_maxnm  = vdup_n_f64 (1.0);\n+  f64x1_ret_minnm  = vminnm_f64 (f64x1_input1, f64x1_input2);\n+  f64x1_ret_maxnm  = vmaxnm_f64 (f64x1_input1, f64x1_input2);\n+\n+  CHECK (uint64_t, 1, f64x1_ret_minnm, f64x1_exp_minnm);\n+  CHECK (uint64_t, 1, f64x1_ret_maxnm, f64x1_exp_maxnm);\n+\n+  /* v{min|max}_f64 NaN.  */\n+  f64x1_input1 = vdup_n_f64 (-__builtin_nanf (\"\"));\n+  f64x1_input2 = vdup_n_f64 (1.0);\n+  f64x1_exp_minnm  = vdup_n_f64 (-__builtin_nanf (\"\"));\n+  f64x1_exp_maxnm  = vdup_n_f64 (-__builtin_nanf (\"\"));\n+  f64x1_ret_minnm  = vmin_f64 (f64x1_input1, f64x1_input2);\n+  f64x1_ret_maxnm  = vmax_f64 (f64x1_input1, f64x1_input2);\n+\n+  CHECK (uint64_t, 1, f64x1_ret_minnm, f64x1_exp_minnm);\n+  CHECK (uint64_t, 1, f64x1_ret_maxnm, f64x1_exp_maxnm);\n+\n+  /* v{min|max}nmq_f64 NaN.  */\n   f64x2_input1 = vdupq_n_f64 (-__builtin_nan (\"\"));\n   f64x2_input2 = vdupq_n_f64 (1.0);\n   f64x2_exp_minnm  = vdupq_n_f64 (1.0);"}, {"sha": "bdaa56499716aa68de92f507193091fc16901684", "filename": "gcc/testsuite/gcc.target/aarch64/vminmaxnm.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efafef383b156074d4bd5ed35f656a509c7bf7a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvminmaxnm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efafef383b156074d4bd5ed35f656a509c7bf7a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvminmaxnm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvminmaxnm.c?ref=1efafef383b156074d4bd5ed35f656a509c7bf7a", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#include \"arm_neon.h\"\n+\n+/* For each of these intrinsics, we map directly to an unspec in RTL.\n+   We're just using the argument directly and returning the result, so we\n+   can precisely specify the exact instruction pattern and register\n+   allocations we expect.  */\n+\n+float64x1_t\n+test_vmaxnm_f64 (float64x1_t a, float64x1_t b)\n+{\n+  /* { dg-final { scan-assembler-times \"fmaxnm\\td0, d0, d1\" 1 } } */\n+  return vmaxnm_f64 (a, b);\n+}\n+\n+float64x1_t\n+test_vminnm_f64 (float64x1_t a, float64x1_t b)\n+{\n+  /* { dg-final { scan-assembler-times \"fminnm\\td0, d0, d1\" 1 } } */\n+  return vminnm_f64 (a, b);\n+}\n+\n+float64x1_t\n+test_vmax_f64 (float64x1_t a, float64x1_t b)\n+{\n+  /* { dg-final { scan-assembler-times \"fmax\\td0, d0, d1\" 1 } } */\n+  return vmax_f64 (a, b);\n+}\n+\n+float64x1_t\n+test_vmin_f64 (float64x1_t a, float64x1_t b)\n+{\n+  /* { dg-final { scan-assembler-times \"fmin\\td0, d0, d1\" 1 } } */\n+  return vmin_f64 (a, b);\n+}\n\\ No newline at end of file"}]}