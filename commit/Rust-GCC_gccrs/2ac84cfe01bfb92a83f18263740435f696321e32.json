{"sha": "2ac84cfe01bfb92a83f18263740435f696321e32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFjODRjZmUwMWJmYjkyYTgzZjE4MjYzNzQwNDM1ZjY5NjMyMWUzMg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "1999-08-24T20:49:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-08-24T20:49:12Z"}, "message": "expr.c (expand_expr): Cope with COND_EXPRs with one non-returning branch.\n\n\t* expr.c (expand_expr): Cope with COND_EXPRs with one\n\tnon-returning branch.\n\nFrom-SVN: r28825", "tree": {"sha": "daa01fc0f611dbb0f5dbc26dadf1e8aa3145eecb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/daa01fc0f611dbb0f5dbc26dadf1e8aa3145eecb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ac84cfe01bfb92a83f18263740435f696321e32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ac84cfe01bfb92a83f18263740435f696321e32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ac84cfe01bfb92a83f18263740435f696321e32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ac84cfe01bfb92a83f18263740435f696321e32/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1da93fe012a0f34e4c50f3ccc98bd8a21ab396d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1da93fe012a0f34e4c50f3ccc98bd8a21ab396d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1da93fe012a0f34e4c50f3ccc98bd8a21ab396d3"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "b107d30a121c45113e385307474a7a6e5ce8f2cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac84cfe01bfb92a83f18263740435f696321e32/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac84cfe01bfb92a83f18263740435f696321e32/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ac84cfe01bfb92a83f18263740435f696321e32", "patch": "@@ -1,3 +1,8 @@\n+Tue Aug 24 13:48:39 1999  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* expr.c (expand_expr): Cope with COND_EXPRs with one\n+\tnon-returning branch.\n+\t\n Mon Aug 23 22:28:16 1999  Mark Mitchell  <mark@codesourcery.com>\n \n \t* expr.c (store_expr): Always pass down the target, even when not"}, {"sha": "97bf5a9fa00b9f94e7d5411593c43bbc9569358a", "filename": "gcc/expr.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac84cfe01bfb92a83f18263740435f696321e32/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac84cfe01bfb92a83f18263740435f696321e32/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=2ac84cfe01bfb92a83f18263740435f696321e32", "patch": "@@ -7700,7 +7700,11 @@ expand_expr (exp, target, tmode, modifier)\n \t    jumpifnot (TREE_OPERAND (exp, 0), op0);\n \n \t    start_cleanup_deferral ();\n-\t    if (temp != 0)\n+\t    \n+\t    /* One branch of the cond can be void, if it never returns. For\n+               example A ? throw : E  */\n+\t    if (temp != 0\n+\t        && TREE_TYPE (TREE_OPERAND (exp, 1)) != void_type_node)\n \t      store_expr (TREE_OPERAND (exp, 1), temp, 0);\n \t    else\n \t      expand_expr (TREE_OPERAND (exp, 1),\n@@ -7711,7 +7715,8 @@ expand_expr (exp, target, tmode, modifier)\n \t    emit_barrier ();\n \t    emit_label (op0);\n \t    start_cleanup_deferral ();\n-\t    if (temp != 0)\n+\t    if (temp != 0\n+\t        && TREE_TYPE (TREE_OPERAND (exp, 2)) != void_type_node)\n \t      store_expr (TREE_OPERAND (exp, 2), temp, 0);\n \t    else\n \t      expand_expr (TREE_OPERAND (exp, 2),"}]}