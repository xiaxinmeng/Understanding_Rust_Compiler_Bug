{"sha": "e4bf60773bd02c39870837ec4f3677ba9a54c574", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRiZjYwNzczYmQwMmMzOTg3MDgzN2VjNGYzNjc3YmE5YTU0YzU3NA==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-06-25T20:57:51Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-06-25T20:57:51Z"}, "message": "re PR libstdc++/3377 (missing std::__cmath_power<double>(double,unsigned))\n\n2001-06-25  Phil Edwards  <pme@sources.redhat.com>\n            Kurt Garloff <garloff@suse.de>\n\n\tPR libstdc++/3377\n\t* src/cmath.cc:  New [version of an old] file; instantiate\n\t__cmath_power to start with.\n\t* src/Makefile.am (sources):  Add cmath.cc (and alphabetize).\n\t* Makefile.in:  Regenerate.\n\t* libio/Makefile.in:  Regenerate.\n\t* libmath/Makefile.in:  Regenerate.\n\t* libsupc++/Makefile.in:  Regenerate.\n\t* src/Makefile.in:  Regenerate.\n\t* testsuite/Makefile.in:  Regenerate.\n\nCo-Authored-By: Kurt Garloff <garloff@suse.de>\n\nFrom-SVN: r43559", "tree": {"sha": "2eafa77d270c7b2d31a603cfbc2722c5c9d5ea0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2eafa77d270c7b2d31a603cfbc2722c5c9d5ea0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4bf60773bd02c39870837ec4f3677ba9a54c574", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4bf60773bd02c39870837ec4f3677ba9a54c574", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4bf60773bd02c39870837ec4f3677ba9a54c574", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4bf60773bd02c39870837ec4f3677ba9a54c574/comments", "author": null, "committer": null, "parents": [{"sha": "c94ef60f8f2e6e2c9ba2f5f3145d5c9cf2aed11c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c94ef60f8f2e6e2c9ba2f5f3145d5c9cf2aed11c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c94ef60f8f2e6e2c9ba2f5f3145d5c9cf2aed11c"}], "stats": {"total": 373, "additions": 310, "deletions": 63}, "files": [{"sha": "af4453e633549dd821da554f8889a8fe3e2e4b51", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4bf60773bd02c39870837ec4f3677ba9a54c574/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4bf60773bd02c39870837ec4f3677ba9a54c574/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e4bf60773bd02c39870837ec4f3677ba9a54c574", "patch": "@@ -1,3 +1,17 @@\n+2001-06-25  Phil Edwards  <pme@sources.redhat.com>\n+            Kurt Garloff <garloff@suse.de>\n+\n+\tPR libstdc++/3377\n+\t* src/cmath.cc:  New [version of an old] file; instantiate\n+\t__cmath_power to start with.\n+\t* src/Makefile.am (sources):  Add cmath.cc (and alphabetize).\n+\t* Makefile.in:  Regenerate.\n+\t* libio/Makefile.in:  Regenerate.\n+\t* libmath/Makefile.in:  Regenerate.\n+\t* libsupc++/Makefile.in:  Regenerate.\n+\t* src/Makefile.in:  Regenerate.\n+\t* testsuite/Makefile.in:  Regenerate.\n+\n 2001-06-24  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n \n \t* libmath/stubs.c: Fix thinko."}, {"sha": "3e4e87e966159a20f674be40bc02e85a3a7bca67", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4bf60773bd02c39870837ec4f3677ba9a54c574/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4bf60773bd02c39870837ec4f3677ba9a54c574/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=e4bf60773bd02c39870837ec4f3677ba9a54c574", "patch": "@@ -138,7 +138,44 @@ MULTICLEAN = true\n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n-AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\" \n+AM_MAKEFLAGS = \\\n+\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n+\t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \\\n+\t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \\\n+\t\"CFLAGS=$(CFLAGS)\" \\\n+\t\"CXXFLAGS=$(CXXFLAGS)\" \\\n+\t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \\\n+\t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \\\n+\t\"INSTALL=$(INSTALL)\" \\\n+\t\"INSTALL_DATA=$(INSTALL_DATA)\" \\\n+\t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \\\n+\t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \\\n+\t\"LDFLAGS=$(LDFLAGS)\" \\\n+\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n+\t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\"MAKE=$(MAKE)\" \\\n+\t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \\\n+\t\"PICFLAG=$(PICFLAG)\" \\\n+\t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \\\n+\t\"SHELL=$(SHELL)\" \\\n+\t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \\\n+\t\"exec_prefix=$(exec_prefix)\" \\\n+\t\"infodir=$(infodir)\" \\\n+\t\"libdir=$(libdir)\" \\\n+\t\"includedir=$(includedir)\" \\\n+\t\"prefix=$(prefix)\" \\\n+\t\"tooldir=$(tooldir)\" \\\n+\t\"AR=$(AR)\" \\\n+\t\"AS=$(AS)\" \\\n+\t\"LD=$(LD)\" \\\n+\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n+\t\"PICFLAG=$(PICFLAG)\" \\\n+\t\"RANLIB=$(RANLIB)\" \\\n+\t\"NM=$(NM)\" \\\n+\t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \\\n+\t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n+\t\"DESTDIR=$(DESTDIR)\" \\\n+\t\"WERROR=$(WERROR)\" \n \n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n CONFIG_HEADER = config.h"}, {"sha": "dbd0a04fa6cdacf14fbb7129fc3de7ed099266d4", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4bf60773bd02c39870837ec4f3677ba9a54c574/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4bf60773bd02c39870837ec4f3677ba9a54c574/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=e4bf60773bd02c39870837ec4f3677ba9a54c574", "patch": "@@ -114,7 +114,7 @@ toplevel_srcdir = @toplevel_srcdir@\n AUTOMAKE_OPTIONS = 1.3 cygnus\n \n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n-@GLIBCPP_BUILD_LIBIO_TRUE@noinst_LTLIBRARIES = libio.la\n+@GLIBCPP_BUILD_LIBIO_TRUE@noinst_LTLIBRARIES = @GLIBCPP_BUILD_LIBIO_TRUE@libio.la\n @GLIBCPP_BUILD_LIBIO_FALSE@noinst_LTLIBRARIES = \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -126,14 +126,21 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES =  \t-nostdinc++ \t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n+INCLUDES = \\\n+\t-nostdinc++ \\\n+\t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \\\n+\t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n \n \n-libio_headers =          libio.h libioP.h iolibio.h\n+libio_headers = \\\n+        libio.h libioP.h iolibio.h\n \n-@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = \tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c \tiofclose.c iofopen.c \n+@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = @GLIBCPP_NEED_LIBIO_TRUE@\\\n+@GLIBCPP_NEED_LIBIO_TRUE@\tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c \\\n+@GLIBCPP_NEED_LIBIO_TRUE@\tiofclose.c iofopen.c \n @GLIBCPP_NEED_LIBIO_FALSE@LIBIO_SRCS = \n-@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = \twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n+@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = @GLIBCPP_NEED_WLIBIO_TRUE@\\\n+@GLIBCPP_NEED_WLIBIO_TRUE@\twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n @GLIBCPP_NEED_WLIBIO_FALSE@LIBIO_WSRCS = \n \n EXTRA_DIST = iostreamP.h"}, {"sha": "6a4bc2cfe05fb6d92db9f13a9901890dc1708306", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4bf60773bd02c39870837ec4f3677ba9a54c574/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4bf60773bd02c39870837ec4f3677ba9a54c574/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=e4bf60773bd02c39870837ec4f3677ba9a54c574", "patch": "@@ -117,13 +117,18 @@ mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n noinst_LTLIBRARIES = libmath.la\n \n-EXTRA_LONG_DOUBLE_yes =  \thypotl.c signbitl.c\n+EXTRA_LONG_DOUBLE_yes = \\\n+\thypotl.c signbitl.c\n \n \n-EXTRA_DIST =  \thypot.c hypotf.c atan2f.c expf.c \t$(EXTRA_LONG_DOUBLE_yes) \n+EXTRA_DIST = \\\n+\thypot.c hypotf.c atan2f.c expf.c \\\n+\t$(EXTRA_LONG_DOUBLE_yes) \n \n \n-libmath_la_LIBADD =  \t@LIBMATHOBJS@ \t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n+libmath_la_LIBADD = \\\n+\t@LIBMATHOBJS@ \\\n+\t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n \n \n libmath_la_DEPENDENCIES = $(libmath_la_LIBADD)\n@@ -141,7 +146,9 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES =  \t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \t$(TOPLEVEL_INCLUDES) \n+INCLUDES = \\\n+\t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \\\n+\t$(TOPLEVEL_INCLUDES) \n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "c025dd2e3434dc8b8d196afbb273fb70dc476c9c", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 48, "deletions": 12, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4bf60773bd02c39870837ec4f3677ba9a54c574/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4bf60773bd02c39870837ec4f3677ba9a54c574/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=e4bf60773bd02c39870837ec4f3677ba9a54c574", "patch": "@@ -132,11 +132,13 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS = \\\n+\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n+WARN_CXXFLAGS = \\\n+\t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -148,13 +150,38 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n-INCLUDES =  \t-I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include \t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \t $(LIBSUPCXX_INCLUDES)\n-\n-\n-headers =  \texception new typeinfo cxxabi.h exception_defines.h \n-\n-\n-sources =  \tdel_op.cc \tdel_opnt.cc \tdel_opv.cc \tdel_opvnt.cc \teh_alloc.cc \teh_aux_runtime.cc \teh_catch.cc \teh_exception.cc \teh_globals.cc \teh_personality.cc \teh_terminate.cc \teh_throw.cc \tnew_handler.cc \tnew_op.cc \tnew_opnt.cc \tnew_opv.cc \tnew_opvnt.cc \tpure.cc \ttinfo.cc \ttinfo2.cc \tvec.cc\n+INCLUDES = \\\n+\t-I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include \\\n+\t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \\\n+\t $(LIBSUPCXX_INCLUDES)\n+\n+\n+headers = \\\n+\texception new typeinfo cxxabi.h exception_defines.h \n+\n+\n+sources = \\\n+\tdel_op.cc \\\n+\tdel_opnt.cc \\\n+\tdel_opv.cc \\\n+\tdel_opvnt.cc \\\n+\teh_alloc.cc \\\n+\teh_aux_runtime.cc \\\n+\teh_catch.cc \\\n+\teh_exception.cc \\\n+\teh_globals.cc \\\n+\teh_personality.cc \\\n+\teh_terminate.cc \\\n+\teh_throw.cc \\\n+\tnew_handler.cc \\\n+\tnew_op.cc \\\n+\tnew_opnt.cc \\\n+\tnew_opv.cc \\\n+\tnew_opvnt.cc \\\n+\tpure.cc \\\n+\ttinfo.cc \\\n+\ttinfo2.cc \\\n+\tvec.cc\n \n \n libsupc___la_SOURCES = $(sources)\n@@ -170,7 +197,12 @@ LIBSUPCXX_CXXFLAGS = $(LIBSUPCXX_PICFLAGS)\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS = \\\n+\t-fno-implicit-templates \\\n+\t$(LIBSUPCXX_CXXFLAGS) \\\n+\t$(WARN_CXXFLAGS) \\\n+\t$(OPTIMIZE_CXXFLAGS) \\\n+\t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -194,7 +226,9 @@ AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS)\n #\n # We have to put --tag disable-shared after --tag CXX lest things\n # CXX undo the affect of disable-shared.\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared                --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared \\\n+               --mode=compile $(CXX) $(INCLUDES) \\\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We'd have a problem when building the shared libstdc++ object if\n@@ -203,7 +237,9 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared                --mode=c\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared           --mode=link $(CXX)           @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared \\\n+          --mode=link $(CXX) \\\n+          @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "b0296c9338d2f2994fbb06ef7984efa021dd8f34", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4bf60773bd02c39870837ec4f3677ba9a54c574/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4bf60773bd02c39870837ec4f3677ba9a54c574/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=e4bf60773bd02c39870837ec4f3677ba9a54c574", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.86 2001/06/01 09:22:05 hp Exp $\n+## $Id: Makefile.am,v 1.87 2001/06/08 03:53:32 ljrittle Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -165,13 +165,11 @@ build_headers = \\\n \tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n \n sources = \\\n-\tlimitsMEMBERS.cc \\\n-\tstdexcept.cc functexcept.cc bitset.cc \\\n-\tglobals.cc \\\n-\tbasic_file.cc ios.cc complex_io.cc strstream.cc \\\n-\tc++locale.cc locale.cc localename.cc codecvt.cc \\\n-\tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc \\\n-\tstring-inst.cc wstring-inst.cc \n+\tbasic_file.cc bitset.cc c++locale.cc cmath.cc codecvt.cc \\\n+\tcomplex_io.cc functexcept.cc globals.cc ios.cc limitsMEMBERS.cc \\\n+\tlocale.cc locale-inst.cc localename.cc misc-inst.cc stdexcept.cc \\\n+\tstl-inst.cc string-inst.cc strstream.cc valarray-inst.cc \\\n+\twstring-inst.cc\n \n \n VPATH = $(top_srcdir):$(top_srcdir)/src:$(GLIBCPP_INCLUDE_DIR):$(GLIBCPP_INCLUDE_DIR)/std:$(C_INCLUDE_DIR)"}, {"sha": "a5b82b2a7fee507bc91e74003407014c9ce85f88", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 127, "deletions": 31, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4bf60773bd02c39870837ec4f3677ba9a54c574/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4bf60773bd02c39870837ec4f3677ba9a54c574/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=e4bf60773bd02c39870837ec4f3677ba9a54c574", "patch": "@@ -124,11 +124,13 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS = \\\n+\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n+WARN_CXXFLAGS = \\\n+\t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -140,45 +142,132 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n-INCLUDES =  \t-nostdinc++ \t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \t$(TOPLEVEL_INCLUDES)\n-\n-\n-base_headers =  \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \tbits/stringfwd.h bits/std_string.h bits/basic_string.h \tbits/basic_string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h \tbits/stl_iterator_base_types.h bits/stl_iterator_base_funcs.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/functexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h bits/stl_stack.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/stl_bvector.h bits/type_traits.h bits/std_algorithm.h \tbits/stl_construct.h bits/boost_concept_check.h bits/concept_check.h\n-\n-\n-backward_headers =  \tbackward/complex.h backward/iomanip.h backward/istream.h \tbackward/ostream.h backward/stream.h backward/streambuf.h \tbackward/algo.h backward/algobase.h backward/alloc.h \tbackward/bvector.h backward/defalloc.h backward/deque.h \tbackward/function.h backward/hash_map.h backward/hash_set.h \tbackward/hashtable.h backward/heap.h backward/iostream.h \tbackward/iterator.h backward/list.h backward/map.h \tbackward/multimap.h backward/new.h backward/multiset.h \tbackward/pair.h backward/queue.h backward/rope.h backward/set.h \tbackward/slist.h backward/stack.h backward/tempbuf.h backward/tree.h \tbackward/vector.h backward/fstream.h backward/strstream.h \tbackward/strstream backward/backward_warning.h\n-\n-\n-ext_headers =  \text/rope ext/ropeimpl.h ext/stl_rope.h \text/slist ext/hash_map ext/hash_set \text/stl_hashtable.h ext/stl_hash_fun.h \n-\n-\n-c_base_headers =  \tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \tbits/std_cwchar.h bits/std_cwctype.h bits/cmath.tcc\n-\n-@GLIBCPP_USE_CSHADOW_TRUE@c_shadow_headers = \tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \tfeatures.h langinfo.h \tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \tbits/wrap_features.h bits/wrap_langinfo.h \tsys/cdefs.h \n+INCLUDES = \\\n+\t-nostdinc++ \\\n+\t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \\\n+\t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \\\n+\t$(TOPLEVEL_INCLUDES)\n+\n+\n+base_headers = \\\n+\tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \\\n+\tbits/stringfwd.h bits/std_string.h bits/basic_string.h \\\n+\tbits/basic_string.tcc \\\n+\tbits/generic_shadow.h bits/std_utility.h \\\n+\tbits/std_complex.h \\\n+\tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \\\n+\tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \\\n+\tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \\\n+\tbits/std_fstream.h bits/std_iomanip.h \\\n+\tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \\\n+\tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \\\n+\tbits/std_istream.h bits/istream.tcc bits/std_locale.h \\\n+\tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \\\n+\tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \\\n+\tbits/streambuf.tcc bits/basic_file.h \\\n+\tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \\\n+\tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \\\n+\tbits/stl_threads.h \\\n+\tbits/stl_iterator_base_types.h bits/stl_iterator_base_funcs.h \\\n+\tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \\\n+\tbits/std_iterator.h bits/std_list.h \\\n+\tbits/std_map.h bits/std_memory.h bits/std_numeric.h \\\n+\tbits/std_queue.h bits/std_set.h bits/std_stack.h \\\n+\tbits/std_stdexcept.h bits/functexcept.h bits/std_vector.h \\\n+\tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \\\n+\tbits/stl_deque.h bits/stl_function.h \\\n+\tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \\\n+\tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \\\n+\tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \\\n+\tbits/stl_relops.h bits/stl_set.h bits/stl_stack.h bits/stl_tempbuf.h \\\n+\tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \\\n+\tbits/stl_bvector.h bits/type_traits.h bits/std_algorithm.h \\\n+\tbits/stl_construct.h bits/boost_concept_check.h bits/concept_check.h\n+\n+\n+backward_headers = \\\n+\tbackward/complex.h backward/iomanip.h backward/istream.h \\\n+\tbackward/ostream.h backward/stream.h backward/streambuf.h \\\n+\tbackward/algo.h backward/algobase.h backward/alloc.h \\\n+\tbackward/bvector.h backward/defalloc.h backward/deque.h \\\n+\tbackward/function.h backward/hash_map.h backward/hash_set.h \\\n+\tbackward/hashtable.h backward/heap.h backward/iostream.h \\\n+\tbackward/iterator.h backward/list.h backward/map.h \\\n+\tbackward/multimap.h backward/new.h backward/multiset.h \\\n+\tbackward/pair.h backward/queue.h backward/rope.h backward/set.h \\\n+\tbackward/slist.h backward/stack.h backward/tempbuf.h backward/tree.h \\\n+\tbackward/vector.h backward/fstream.h backward/strstream.h \\\n+\tbackward/strstream backward/backward_warning.h\n+\n+\n+ext_headers = \\\n+\text/rope ext/ropeimpl.h ext/stl_rope.h \\\n+\text/slist ext/hash_map ext/hash_set \\\n+\text/stl_hashtable.h ext/stl_hash_fun.h \n+\n+\n+c_base_headers = \\\n+\tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \\\n+\tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \\\n+\tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \\\n+\tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \\\n+\tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \\\n+\tbits/std_cwchar.h bits/std_cwctype.h bits/cmath.tcc\n+\n+@GLIBCPP_USE_CSHADOW_TRUE@c_shadow_headers = @GLIBCPP_USE_CSHADOW_TRUE@\\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tfeatures.h langinfo.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_features.h bits/wrap_langinfo.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tsys/cdefs.h \n @GLIBCPP_USE_CSHADOW_FALSE@c_shadow_headers = \n \n-std_headers =  \talgorithm bitset complex deque fstream functional \tiomanip ios iosfwd iostream istream iterator limits list locale \tmap memory numeric ostream queue set sstream stack stdexcept \tstreambuf string utility valarray vector \tcassert cctype cerrno cfloat climits clocale ciso646 \tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \tcstring ctime cwchar cwctype\n-\n-@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = \t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n+std_headers = \\\n+\talgorithm bitset complex deque fstream functional \\\n+\tiomanip ios iosfwd iostream istream iterator limits list locale \\\n+\tmap memory numeric ostream queue set sstream stack stdexcept \\\n+\tstreambuf string utility valarray vector \\\n+\tcassert cctype cerrno cfloat climits clocale ciso646 \\\n+\tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \\\n+\tcstring ctime cwchar cwctype\n+\n+@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = @GLIBCPP_NEED_LIBIO_TRUE@\\\n+@GLIBCPP_NEED_LIBIO_TRUE@\t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n @GLIBCPP_NEED_LIBIO_FALSE@libio_headers = \n \n-build_headers =  \tbits/std_limits.h \tbits/c++config.h bits/c++io.h bits/c++locale.h \tbits/gthr.h bits/gthr-single.h bits/gthr-default.h \tbits/basic_file_model.h \tbits/atomicity.h bits/os_defines.h \tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n+build_headers = \\\n+\tbits/std_limits.h \\\n+\tbits/c++config.h bits/c++io.h bits/c++locale.h \\\n+\tbits/gthr.h bits/gthr-single.h bits/gthr-default.h \\\n+\tbits/basic_file_model.h \\\n+\tbits/atomicity.h bits/os_defines.h \\\n+\tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n \n \n-sources =  \tlimitsMEMBERS.cc \tstdexcept.cc functexcept.cc bitset.cc \tglobals.cc \tbasic_file.cc ios.cc complex_io.cc strstream.cc \tc++locale.cc locale.cc localename.cc codecvt.cc \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc \tstring-inst.cc wstring-inst.cc \n+sources = \\\n+\tbasic_file.cc bitset.cc c++locale.cc cmath.cc codecvt.cc \\\n+\tcomplex_io.cc functexcept.cc globals.cc ios.cc limitsMEMBERS.cc \\\n+\tlocale.cc locale-inst.cc localename.cc misc-inst.cc stdexcept.cc \\\n+\tstl-inst.cc string-inst.cc strstream.cc valarray-inst.cc \\\n+\twstring-inst.cc\n \n \n VPATH = $(top_srcdir):$(top_srcdir)/src:$(GLIBCPP_INCLUDE_DIR):$(GLIBCPP_INCLUDE_DIR)/std:$(C_INCLUDE_DIR)\n \n libstdc___la_SOURCES = $(sources)\n \n-libstdc___la_LIBADD =  \t../libmath/libmath.la @libio_la@ \t../libsupc++/libsupc++convenience.la\n+libstdc___la_LIBADD = \\\n+\t../libmath/libmath.la @libio_la@ \\\n+\t../libsupc++/libsupc++convenience.la\n \n \n libstdc___la_LDFLAGS = -version-info 3:0:0 -lm\n \n libstdc___la_DEPENDENCIES = $(libstdc___la_LIBADD)\n-@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = $(top_builddir)/stamp-cshadow\n+@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = @GLIBCPP_USE_CSHADOW_TRUE@$(top_builddir)/stamp-cshadow\n @GLIBCPP_USE_CSHADOW_FALSE@CSHADOW_H = \n \n # Check for various configure bits that change where the headers get installed.\n@@ -201,7 +290,12 @@ c_incdir = @C_INCLUDE_DIR@\n # The no-implicit-templates flag will generate unresolved references to\n # the concept-checking symbols.  So we must disable the checks while\n # actually building the library.\n-AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS = \\\n+\t-fno-implicit-templates \\\n+\t$(LIBSUPCXX_CXXFLAGS) \\\n+\t$(WARN_CXXFLAGS) \\\n+\t$(OPTIMIZE_CXXFLAGS) \\\n+\t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -222,7 +316,8 @@ AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS)\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We'd have a problem when building the shared libstdc++ object if\n@@ -231,7 +326,8 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX --mode=link $(CXX) \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --tag CXX --mode=link $(CXX) \\\n+\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = \n@@ -242,10 +338,10 @@ DEFS = @DEFS@ -I. -I$(srcdir) -I..\n CPPFLAGS = @CPPFLAGS@\n LDFLAGS = @LDFLAGS@\n LIBS = @LIBS@\n-libstdc___la_OBJECTS =  limitsMEMBERS.lo stdexcept.lo functexcept.lo \\\n-bitset.lo globals.lo basic_file.lo ios.lo complex_io.lo strstream.lo \\\n-c++locale.lo locale.lo localename.lo codecvt.lo locale-inst.lo \\\n-stl-inst.lo misc-inst.lo valarray-inst.lo string-inst.lo \\\n+libstdc___la_OBJECTS =  basic_file.lo bitset.lo c++locale.lo cmath.lo \\\n+codecvt.lo complex_io.lo functexcept.lo globals.lo ios.lo \\\n+limitsMEMBERS.lo locale.lo locale-inst.lo localename.lo misc-inst.lo \\\n+stdexcept.lo stl-inst.lo string-inst.lo strstream.lo valarray-inst.lo \\\n wstring-inst.lo\n CXXFLAGS = @CXXFLAGS@\n CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)"}, {"sha": "6442e0cda4e3b2347aecb97d43d00c1eb2fec82e", "filename": "libstdc++-v3/src/cmath.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4bf60773bd02c39870837ec4f3677ba9a54c574/libstdc%2B%2B-v3%2Fsrc%2Fcmath.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4bf60773bd02c39870837ec4f3677ba9a54c574/libstdc%2B%2B-v3%2Fsrc%2Fcmath.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcmath.cc?ref=e4bf60773bd02c39870837ec4f3677ba9a54c574", "patch": "@@ -0,0 +1,48 @@\n+// Explicit instantiation file for -*- C++ -*- math library.\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+\n+// These are explicit instantiations of the behind-the-scenes internal\n+// helper functions used in the math routines of libstdc++.\n+\n+\n+#include <bits/std_cmath.h>\n+\n+namespace std\n+{\n+    // This function is only declared/used in the cheaders=c_std case.\n+    template float\n+      __cmath_power<float>(float, unsigned int);\n+    template double\n+      __cmath_power<double>(double, unsigned int);\n+    template long double\n+      __cmath_power<long double>(long double, unsigned int);\n+  \n+} // namespace std\n+"}, {"sha": "97d4bf23240fee1208be2be7f203033cc10494b7", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4bf60773bd02c39870837ec4f3677ba9a54c574/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4bf60773bd02c39870837ec4f3677ba9a54c574/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=e4bf60773bd02c39870837ec4f3677ba9a54c574", "patch": "@@ -121,10 +121,14 @@ AUTOMAKE_OPTIONS = foreign dejagnu\n \n DEJATOOL = libstdc++-v3\n \n-EXPECT = `if [ -f @glibcpp_builddir@/../../expect/expect ] ; then             echo @glibcpp_builddir@/../../expect/expect ;           else echo expect ; fi`\n+EXPECT = `if [ -f @glibcpp_builddir@/../../expect/expect ] ; then \\\n+            echo @glibcpp_builddir@/../../expect/expect ; \\\n+          else echo expect ; fi`\n \n \n-RUNTEST = `if [ -f @glibcpp_srcdir@/../dejagnu/runtest ] ; then \t       echo @glibcpp_srcdir@/../dejagnu/runtest ; \t    else echo runtest; fi`\n+RUNTEST = `if [ -f @glibcpp_srcdir@/../dejagnu/runtest ] ; then \\\n+\t       echo @glibcpp_srcdir@/../dejagnu/runtest ; \\\n+\t    else echo runtest; fi`\n \n \n RUNTESTFLAGS = "}]}