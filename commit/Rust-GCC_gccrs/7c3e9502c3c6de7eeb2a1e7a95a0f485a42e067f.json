{"sha": "7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MzZTk1MDJjM2M2ZGU3ZWViMmExZTdhOTVhMGY0ODVhNDJlMDY3Zg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2011-01-15T00:27:10Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2011-01-15T00:27:10Z"}, "message": "re PR libstdc++/36104 (gnu-versioned-namespace is broken)\n\n2011-01-14  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/36104\n\t* include/Makefile.am (bits_sup_headers, stamp-bits-sup): New.\n\t* include/Makefile.in: Regenerate.\n\t* libsupc++/Makefile.am (std_HEADERS, bits_HEADERS): New.\n\t(install-stdHEADERS, install-bitsHEADERS): New.\n\t* libsupc++/Makefile.in: Regenerate.\n\n\t* include/bits/c++config: Update for inline namespaces.\n\t* libsupc++/cxxabi-forced.h: To...\n\t* libsupc++/cxxabi_forced.h: ...this.\n\t* libsupc++/hash_bytes.h: Separate file.\n\t* libsupc++/typeinfo: Use it.\n\t* libsupc++/exception: Adjust for bits subdirectory.\n\t* libsupc++/eh_aux_runtime.cc: Same.\n\t* libsupc++/eh_ptr.cc: Same.\n\t* libsupc++/new_op.cc: Same.\n\t* libsupc++/exception_defines.h: Same.\n\t* libsupc++/nested_exception.h: Same.\n\t* libsupc++/eh_terminate.cc: Same.\n\t* libsupc++/vec.cc: Same.\n\t* libsupc++/vterminate.cc: Same.\n\t* libsupc++/exception_ptr.h: Same.\n\t* libsupc++/eh_personality.cc: Same.\n\t* libsupc++/eh_call.cc: Same.\n\t* libsupc++/new_opnt.cc: Same.\n\t* libsupc++/hash_bytes.cc: Same.\n\t* config/cpu/arm/cxxabi_tweaks.h: Same.\n\t* config/cpu/generic/cxxabi_tweaks.h: Same.\n\t* libsupc++/cxxabi.h: Same. Consolidate _GLIBCXX_NOTHROW defines.\n\t* include/std/bitset: Same.\n\t* include/ext/vstring.tcc: Same.\n\t* include/bits/hashtable.h: Same.\n\t* include/bits/functional_hash.h: Same.\n\t* include/bits/hashtable_policy.h: Same.\n\t* include/bits/basic_string.h: Same.\n\t* include/bits/istream.tcc: Same.\n\t* include/bits/ostream.tcc: Same.\n\t* include/bits/algorithmfwd.h: Same.\n\t* include/bits/basic_string.tcc: Same.\n\t* include/bits/ostream_insert.h: Same.\n\t* include/bits/fstream.tcc: Same.\n\t* include/bits/functexcept.h: Same.\n\n\t* doc/doxygen/user.cfg.in: Adjust names.\n\n\t* testsuite/ext/profile/mutex_extensions_neg.cc: Adjust line numbers.\n\nFrom-SVN: r168831", "tree": {"sha": "92cfd5a67a2cf548c2b1658650973b15ae1bb270", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92cfd5a67a2cf548c2b1658650973b15ae1bb270"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/comments", "author": null, "committer": null, "parents": [{"sha": "6227ed7d7a5b331229d24fcd8c120c1a982529d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6227ed7d7a5b331229d24fcd8c120c1a982529d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6227ed7d7a5b331229d24fcd8c120c1a982529d0"}], "stats": {"total": 1128, "additions": 646, "deletions": 482}, "files": [{"sha": "57295dfd86fa0f4e9bb146796b12864eb0c680e6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,3 +1,52 @@\n+2011-01-14  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/36104\n+\t* include/Makefile.am (bits_sup_headers, stamp-bits-sup): New.\n+\t* include/Makefile.in: Regenerate.\n+\t* libsupc++/Makefile.am (std_HEADERS, bits_HEADERS): New.\n+\t(install-stdHEADERS, install-bitsHEADERS): New.\n+\t* libsupc++/Makefile.in: Regenerate.\n+\n+\t* include/bits/c++config: Update for inline namespaces.\n+\t* libsupc++/cxxabi-forced.h: To...\n+\t* libsupc++/cxxabi_forced.h: ...this.\n+\t* libsupc++/hash_bytes.h: Separate file.\n+\t* libsupc++/typeinfo: Use it.\n+\t* libsupc++/exception: Adjust for bits subdirectory.\n+\t* libsupc++/eh_aux_runtime.cc: Same.\n+\t* libsupc++/eh_ptr.cc: Same.\n+\t* libsupc++/new_op.cc: Same.\n+\t* libsupc++/exception_defines.h: Same.\n+\t* libsupc++/nested_exception.h: Same.\n+\t* libsupc++/eh_terminate.cc: Same.\n+\t* libsupc++/vec.cc: Same.\n+\t* libsupc++/vterminate.cc: Same.\n+\t* libsupc++/exception_ptr.h: Same.\n+\t* libsupc++/eh_personality.cc: Same.\n+\t* libsupc++/eh_call.cc: Same.\n+\t* libsupc++/new_opnt.cc: Same.\n+\t* libsupc++/hash_bytes.cc: Same.\n+\t* config/cpu/arm/cxxabi_tweaks.h: Same.\n+\t* config/cpu/generic/cxxabi_tweaks.h: Same.\n+\t* libsupc++/cxxabi.h: Same. Consolidate _GLIBCXX_NOTHROW defines.\n+\t* include/std/bitset: Same.\n+\t* include/ext/vstring.tcc: Same.\n+\t* include/bits/hashtable.h: Same.\n+\t* include/bits/functional_hash.h: Same.\n+\t* include/bits/hashtable_policy.h: Same.\n+\t* include/bits/basic_string.h: Same.\n+\t* include/bits/istream.tcc: Same.\n+\t* include/bits/ostream.tcc: Same.\n+\t* include/bits/algorithmfwd.h: Same.\n+\t* include/bits/basic_string.tcc: Same.\n+\t* include/bits/ostream_insert.h: Same.\n+\t* include/bits/fstream.tcc: Same.\n+\t* include/bits/functexcept.h: Same.\n+\n+\t* doc/doxygen/user.cfg.in: Adjust names.\n+\n+\t* testsuite/ext/profile/mutex_extensions_neg.cc: Adjust line numbers.\n+\n 2011-01-14  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/25_algorithms/is_permutation/check_type.cc: Minor"}, {"sha": "2ac349dfc179e95194c34ef65840967a638444c9", "filename": "libstdc++-v3/config/cpu/arm/cxxabi_tweaks.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Farm%2Fcxxabi_tweaks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Farm%2Fcxxabi_tweaks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Farm%2Fcxxabi_tweaks.h?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,6 +1,6 @@\n // Control various target specific ABI tweaks.  ARM version.\n \n-// Copyright (C) 2004, 2006, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2006, 2008, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,8 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file cxxabi_tweaks.h\n- *  The header provides an CPU-variable interface to the C++ ABI.\n+/** @file bits/cxxabi_tweaks.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{cxxabi.h}\n  */\n \n #ifndef _CXXABI_TWEAKS_H"}, {"sha": "f48f73e0003d6295d01f52e9fcb1567421aa5098", "filename": "libstdc++-v3/config/cpu/generic/cxxabi_tweaks.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fcxxabi_tweaks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fcxxabi_tweaks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fcxxabi_tweaks.h?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,6 +1,6 @@\n // Control various target specific ABI tweaks.  Generic version.\n \n-// Copyright (C) 2004, 2006, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2006, 2008, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,8 +22,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file cxxabi_tweaks.h\n- *  The header provides an CPU-variable interface to the C++ ABI.\n+/** @file bits/cxxabi_tweaks.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{cxxabi.h}\n  */\n \n #ifndef _CXXABI_TWEAKS_H"}, {"sha": "442bba21b06306cabe47b555faac952f69074160", "filename": "libstdc++-v3/doc/doxygen/user.cfg.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -586,7 +586,7 @@ WARN_LOGFILE           =\n \n INPUT                  = @srcdir@/doc/doxygen/doxygroups.cc \\\n                          @srcdir@/libsupc++/cxxabi.h \\\n-                         @srcdir@/libsupc++/cxxabi-forced.h \\\n+                         @srcdir@/libsupc++/cxxabi_forced.h \\\n                          @srcdir@/libsupc++/exception \\\n                          @srcdir@/libsupc++/exception_defines.h \\\n                          @srcdir@/libsupc++/exception_ptr.h \\"}, {"sha": "5b6352e33b85635ac2004882e240068d2c8de4ac", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,6 +1,7 @@\n ## Makefile for the include subdirectory of the GNU C++ Standard library.\n ##\n-## Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+## Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+## 2011\n ## Free Software Foundation, Inc.\n ##\n ## This file is part of the libstdc++ version 3 distribution.\n@@ -172,6 +173,14 @@ bits_headers = \\\n \t${bits_srcdir}/valarray_after.h \\\n \t${bits_srcdir}/vector.tcc\n \n+bits_sup_srcdir = ${glibcxx_srcdir}/libsupc++\n+bits_sup_headers = \\\n+        ${bits_sup_srcdir}/cxxabi_forced.h \\\n+        ${bits_sup_srcdir}/exception_defines.h \\\n+        ${bits_sup_srcdir}/exception_ptr.h \\\n+        ${bits_sup_srcdir}/hash_bytes.h \\\n+        ${bits_sup_srcdir}/nested_exception.h\n+\n backward_srcdir = ${glibcxx_srcdir}/include/backward\n backward_builddir = ./backward\n backward_headers = \\\n@@ -888,7 +897,7 @@ endif\n # List of all timestamp files.  By keeping only one copy of this list, both\n # CLEANFILES and all-local are kept up-to-date.\n allstamped = \\\n-\tstamp-std stamp-bits stamp-c_base stamp-c_compatibility \\\n+\tstamp-std stamp-bits stamp-bits-sup stamp-c_base stamp-c_compatibility \\\n \tstamp-backward stamp-ext stamp-pb stamp-tr1 stamp-decimal \\\n \tstamp-debug stamp-parallel stamp-profile stamp-profile-impl \\\n \tstamp-host \n@@ -917,6 +926,10 @@ stamp-bits: ${bits_headers}\n \t@-cd ${bits_builddir} && $(LN_S) $? . 2>/dev/null\n \t@$(STAMP) stamp-bits\n \n+stamp-bits-sup: stamp-bits ${bits_sup_headers}\n+\t@-cd ${bits_builddir} && $(LN_S) $? . 2>/dev/null\n+\t@$(STAMP) stamp-bits-sup\n+\n stamp-c_base: ${c_base_headers}\n \t@-mkdir -p ${c_base_builddir}\n \t@-cd ${c_base_builddir} && $(LN_S) $? . 2>/dev/null\n@@ -1071,14 +1084,14 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t\t\t      stamp-namespace-version \\\n \t\t\t      stamp-visibility\n \t@date=`cat ${toplevel_srcdir}/gcc/DATESTAMP` ;\\\n-\tnsa_version=`cat stamp-namespace-version` ;\\\n+\tns_version=`cat stamp-namespace-version` ;\\\n \tvisibility=`cat stamp-visibility` ;\\\n \tldbl_compat='s,g,g,' ;\\\n \tgrep \"^[ \t]*#[ \t]*define[ \t][ \t]*_GLIBCXX_LONG_DOUBLE_COMPAT[ \t][ \t]*1[ \t]*$$\" \\\n \t${CONFIG_HEADER} > /dev/null 2>&1 \\\n \t&& ldbl_compat='s,^#undef _GLIBCXX_LONG_DOUBLE_COMPAT$$,#define _GLIBCXX_LONG_DOUBLE_COMPAT 1,' ;\\\n \tsed -e \"s,define __GLIBCXX__,define __GLIBCXX__ $$date,\" \\\n-\t-e \"s,define _GLIBCXX_NAMESPACE_ASSOCIATION_VERSION, define _GLIBCXX_NAMESPACE_ASSOCIATION_VERSION $$nsa_version,\" \\\n+\t-e \"s,define _GLIBCXX_INLINE_VERSION, define _GLIBCXX_INLINE_VERSION $$ns_version,\" \\\n \t-e \"s,define _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY, define _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY $$visibility,\" \\\n \t-e \"$$ldbl_compat\" \\\n             < ${glibcxx_srcdir}/include/bits/c++config > $@ ;\\"}, {"sha": "d78315885cc66f5be74e1eb0f8c0e7239a450900", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -423,6 +423,14 @@ bits_headers = \\\n \t${bits_srcdir}/valarray_after.h \\\n \t${bits_srcdir}/vector.tcc\n \n+bits_sup_srcdir = ${glibcxx_srcdir}/libsupc++\n+bits_sup_headers = \\\n+        ${bits_sup_srcdir}/cxxabi_forced.h \\\n+        ${bits_sup_srcdir}/exception_defines.h \\\n+        ${bits_sup_srcdir}/exception_ptr.h \\\n+        ${bits_sup_srcdir}/hash_bytes.h \\\n+        ${bits_sup_srcdir}/nested_exception.h\n+\n backward_srcdir = ${glibcxx_srcdir}/include/backward\n backward_builddir = ./backward\n backward_headers = \\\n@@ -1125,7 +1133,7 @@ PCHFLAGS = -x c++-header -nostdinc++ $(CXXFLAGS)\n # List of all timestamp files.  By keeping only one copy of this list, both\n # CLEANFILES and all-local are kept up-to-date.\n allstamped = \\\n-\tstamp-std stamp-bits stamp-c_base stamp-c_compatibility \\\n+\tstamp-std stamp-bits stamp-bits-sup stamp-c_base stamp-c_compatibility \\\n \tstamp-backward stamp-ext stamp-pb stamp-tr1 stamp-decimal \\\n \tstamp-debug stamp-parallel stamp-profile stamp-profile-impl \\\n \tstamp-host \n@@ -1316,6 +1324,10 @@ stamp-bits: ${bits_headers}\n \t@-cd ${bits_builddir} && $(LN_S) $? . 2>/dev/null\n \t@$(STAMP) stamp-bits\n \n+stamp-bits-sup: stamp-bits ${bits_sup_headers}\n+\t@-cd ${bits_builddir} && $(LN_S) $? . 2>/dev/null\n+\t@$(STAMP) stamp-bits-sup\n+\n stamp-c_base: ${c_base_headers}\n \t@-mkdir -p ${c_base_builddir}\n \t@-cd ${c_base_builddir} && $(LN_S) $? . 2>/dev/null\n@@ -1464,14 +1476,14 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t\t\t      stamp-namespace-version \\\n \t\t\t      stamp-visibility\n \t@date=`cat ${toplevel_srcdir}/gcc/DATESTAMP` ;\\\n-\tnsa_version=`cat stamp-namespace-version` ;\\\n+\tns_version=`cat stamp-namespace-version` ;\\\n \tvisibility=`cat stamp-visibility` ;\\\n \tldbl_compat='s,g,g,' ;\\\n \tgrep \"^[ \t]*#[ \t]*define[ \t][ \t]*_GLIBCXX_LONG_DOUBLE_COMPAT[ \t][ \t]*1[ \t]*$$\" \\\n \t${CONFIG_HEADER} > /dev/null 2>&1 \\\n \t&& ldbl_compat='s,^#undef _GLIBCXX_LONG_DOUBLE_COMPAT$$,#define _GLIBCXX_LONG_DOUBLE_COMPAT 1,' ;\\\n \tsed -e \"s,define __GLIBCXX__,define __GLIBCXX__ $$date,\" \\\n-\t-e \"s,define _GLIBCXX_NAMESPACE_ASSOCIATION_VERSION, define _GLIBCXX_NAMESPACE_ASSOCIATION_VERSION $$nsa_version,\" \\\n+\t-e \"s,define _GLIBCXX_INLINE_VERSION, define _GLIBCXX_INLINE_VERSION $$ns_version,\" \\\n \t-e \"s,define _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY, define _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY $$visibility,\" \\\n \t-e \"$$ldbl_compat\" \\\n             < ${glibcxx_srcdir}/include/bits/c++config > $@ ;\\"}, {"sha": "f6f4eacd1f65f0af043c1a0c6a95b3e190645d7c", "filename": "libstdc++-v3/include/bits/algorithmfwd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -804,7 +804,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n _GLIBCXX_END_NESTED_NAMESPACE\n \n-#ifdef _GLIBCXX_NAMESPACE_ASSOCIATION_PARALLEL\n+#ifdef _GLIBCXX_PARALLEL\n # include <parallel/algorithmfwd.h>\n #endif\n "}, {"sha": "03c89620ddfcee22b30d1131fecadb73a6ebab6d", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,7 +1,7 @@\n // Components for manipulating sequences of characters -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009, 2010\n+// 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free"}, {"sha": "2b22c6b0acf38628ac3a145a4a3a623fb8caa972", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,7 +1,7 @@\n // Components for manipulating sequences of characters -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009, 2010\n+// 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -41,7 +41,7 @@\n \n #pragma GCC system_header\n \n-#include <cxxabi-forced.h>\n+#include <bits/cxxabi_forced.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n "}, {"sha": "7465f364d496897706a93cc6fe547064a18a16ad", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 61, "deletions": 64, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,7 +1,7 @@\n // Predefined symbols and macros -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n+// 2006, 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,7 +32,7 @@\n #define _GLIBCXX_CXX_CONFIG_H 1\n \n // The current version of the C++ library in compressed ISO date format.\n-#define __GLIBCXX__ \n+#define __GLIBCXX__\n \n // Macros for various attributes.\n #ifndef _GLIBCXX_PURE\n@@ -49,7 +49,7 @@\n \n #ifndef _GLIBCXX_NOTHROW\n # ifdef __cplusplus\n-#  define _GLIBCXX_NOTHROW throw() \n+#  define _GLIBCXX_NOTHROW throw()\n # else\n #  define _GLIBCXX_NOTHROW __attribute__((__nothrow__))\n # endif\n@@ -87,7 +87,7 @@ namespace std\n {\n   typedef __SIZE_TYPE__ \tsize_t;\n   typedef __PTRDIFF_TYPE__\tptrdiff_t;\n-  \n+\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n   typedef decltype(nullptr)\tnullptr_t;\n #endif\n@@ -103,30 +103,27 @@ namespace std\n #ifndef _GLIBCXX_CONSTEXPR\n # ifdef __GXX_EXPERIMENTAL_CXX0X__\n #  define _GLIBCXX_CONSTEXPR constexpr\n-# else\n-#  define _GLIBCXX_CONSTEXPR \n-# endif\n-#endif\n-\n-#ifndef _GLIBCXX_USE_CONSTEXPR\n-# ifdef __GXX_EXPERIMENTAL_CXX0X__\n #  define _GLIBCXX_USE_CONSTEXPR constexpr\n # else\n+#  define _GLIBCXX_CONSTEXPR\n #  define _GLIBCXX_USE_CONSTEXPR const\n # endif\n #endif\n \n-// Macros for activating various namespace association modes.\n-// _GLIBCXX_NAMESPACE_ASSOCIATION_DEBUG\n-// _GLIBCXX_NAMESPACE_ASSOCIATION_PARALLEL\n-// _GLIBCXX_NAMESPACE_ASSOCIATION_VERSION\n+// Macros for activating various inline namespaces.\n+//\n+// _GLIBCXX_NAMESPACE_DEBUG\n+// _GLIBCXX_NAMESPACE_PARALLEL\n+// _GLIBCXX_NAMESPACE_PROFILE\n+// _GLIBCXX_NAMESPACE_VERSION\n \n // Guide to libstdc++ namespaces.\n /*\n   namespace std\n   {\n     namespace __debug { }\n     namespace __parallel { }\n+    namespace __profile { }\n     namespace __norm { } // __normative, __shadow, __replaced\n     namespace __cxx1998 { }\n \n@@ -135,26 +132,26 @@ namespace std\n */\n \n #ifdef _GLIBCXX_DEBUG\n-# define _GLIBCXX_NAMESPACE_ASSOCIATION_DEBUG 1\n+# define _GLIBCXX_INLINE_DEBUG 1\n #endif\n \n #ifdef _GLIBCXX_PARALLEL\n-# define _GLIBCXX_NAMESPACE_ASSOCIATION_PARALLEL 1\n+# define _GLIBCXX_INLINE_PARALLEL 1\n #endif\n \n-// Namespace association for profile\n+// Namespace association for profile.\n #ifdef _GLIBCXX_PROFILE\n-# define _GLIBCXX_NAMESPACE_ASSOCIATION_PROFILE 1\n+# define _GLIBCXX_INLINE_PROFILE 1\n #endif\n \n-#define _GLIBCXX_NAMESPACE_ASSOCIATION_VERSION \n+#define _GLIBCXX_INLINE_VERSION\n \n-// Defined if any namespace association modes are active.\n-#if _GLIBCXX_NAMESPACE_ASSOCIATION_DEBUG \\\n-  || _GLIBCXX_NAMESPACE_ASSOCIATION_PARALLEL \\\n-  || _GLIBCXX_NAMESPACE_ASSOCIATION_PROFILE \\\n-  || _GLIBCXX_NAMESPACE_ASSOCIATION_VERSION\n-# define _GLIBCXX_USE_NAMESPACE_ASSOCIATION 1\n+// Defined if inline namespaces modes are active.\n+#if _GLIBCXX_INLINE_DEBUG \\\n+  || _GLIBCXX_INLINE_PARALLEL \\\n+  || _GLIBCXX_INLINE_PROFILE \\\n+  || _GLIBCXX_INLINE_VERSION\n+# define _GLIBCXX_USE_INLINE_NAMESPACES 1\n #endif\n \n // Macros for namespace scope. Either namespace std:: or the name\n@@ -169,7 +166,7 @@ namespace std\n // _GLIBCXX_END_NAMESPACE\n // _GLIBCXX_BEGIN_NESTED_NAMESPACE\n // _GLIBCXX_END_NESTED_NAMESPACE\n-#ifndef _GLIBCXX_USE_NAMESPACE_ASSOCIATION\n+#ifndef _GLIBCXX_USE_INLINE_NAMESPACES\n # define _GLIBCXX_STD_D _GLIBCXX_STD\n # define _GLIBCXX_STD_P _GLIBCXX_STD\n # define _GLIBCXX_STD_PR _GLIBCXX_STD\n@@ -180,7 +177,7 @@ namespace std\n # define _GLIBCXX_END_NAMESPACE }\n #else\n \n-# if _GLIBCXX_NAMESPACE_ASSOCIATION_VERSION // && not anything else\n+# if _GLIBCXX_INLINE_VERSION // && not anything else\n #  define _GLIBCXX_STD_D _GLIBCXX_STD\n #  define _GLIBCXX_STD_P _GLIBCXX_STD\n #  define _GLIBCXX_STD _6\n@@ -189,103 +186,103 @@ namespace std\n # endif\n \n //  debug\n-# if _GLIBCXX_NAMESPACE_ASSOCIATION_DEBUG && !_GLIBCXX_NAMESPACE_ASSOCIATION_PARALLEL && !_GLIBCXX_NAMESPACE_ASSOCIATION_PROFILE\n+# if _GLIBCXX_INLINE_DEBUG && !_GLIBCXX_INLINE_PARALLEL && !_GLIBCXX_INLINE_PROFILE\n #  define _GLIBCXX_STD_D __norm\n #  define _GLIBCXX_STD_P _GLIBCXX_STD\n #  define _GLIBCXX_STD __cxx1998\n-#  define _GLIBCXX_BEGIN_NAMESPACE(X) namespace X _GLIBCXX_VISIBILITY_ATTR(default) { \n+#  define _GLIBCXX_BEGIN_NAMESPACE(X) namespace X _GLIBCXX_VISIBILITY_ATTR(default) {\n #  define _GLIBCXX_END_NAMESPACE }\n #  define _GLIBCXX_EXTERN_TEMPLATE -1\n # endif\n \n // parallel\n-# if _GLIBCXX_NAMESPACE_ASSOCIATION_PARALLEL && !_GLIBCXX_NAMESPACE_ASSOCIATION_DEBUG && !_GLIBCXX_NAMESPACE_ASSOCIATION_PROFILE\n+# if _GLIBCXX_INLINE_PARALLEL && !_GLIBCXX_INLINE_DEBUG && !_GLIBCXX_INLINE_PROFILE\n #  define _GLIBCXX_STD_D _GLIBCXX_STD\n #  define _GLIBCXX_STD_P __norm\n #  define _GLIBCXX_STD __cxx1998\n-#  define _GLIBCXX_BEGIN_NAMESPACE(X) namespace X _GLIBCXX_VISIBILITY_ATTR(default) { \n+#  define _GLIBCXX_BEGIN_NAMESPACE(X) namespace X _GLIBCXX_VISIBILITY_ATTR(default) {\n #  define _GLIBCXX_END_NAMESPACE }\n # endif\n \n // debug + parallel\n-# if _GLIBCXX_NAMESPACE_ASSOCIATION_PARALLEL && _GLIBCXX_NAMESPACE_ASSOCIATION_DEBUG  && !_GLIBCXX_NAMESPACE_ASSOCIATION_PROFILE\n+# if _GLIBCXX_INLINE_PARALLEL && _GLIBCXX_INLINE_DEBUG  && !_GLIBCXX_INLINE_PROFILE\n #  define _GLIBCXX_STD_D __norm\n #  define _GLIBCXX_STD_P __norm\n #  define _GLIBCXX_STD __cxx1998\n-#  define _GLIBCXX_BEGIN_NAMESPACE(X) namespace X _GLIBCXX_VISIBILITY_ATTR(default) { \n+#  define _GLIBCXX_BEGIN_NAMESPACE(X) namespace X _GLIBCXX_VISIBILITY_ATTR(default) {\n #  define _GLIBCXX_END_NAMESPACE }\n #  define _GLIBCXX_EXTERN_TEMPLATE -1\n # endif\n \n // profile\n-# if _GLIBCXX_NAMESPACE_ASSOCIATION_PROFILE\n-#  if _GLIBCXX_NAMESPACE_ASSOCIATION_PARALLEL || _GLIBCXX_NAMESPACE_ASSOCIATION_DEBUG\n+# if _GLIBCXX_INLINE_PROFILE\n+#  if _GLIBCXX_INLINE_PARALLEL || _GLIBCXX_INLINE_DEBUG\n #   error Cannot use -D_GLIBCXX_PROFILE with -D_GLIBCXX_DEBUG or \\\n     -D_GLIBCXX_PARALLEL\n #  endif\n #  define _GLIBCXX_STD_D __norm\n #  define _GLIBCXX_STD_P _GLIBCXX_STD\n #  define _GLIBCXX_STD_PR __norm\n #  define _GLIBCXX_STD __cxx1998\n-#  define _GLIBCXX_BEGIN_NAMESPACE(X) namespace X _GLIBCXX_VISIBILITY_ATTR(default) { \n+#  define _GLIBCXX_BEGIN_NAMESPACE(X) namespace X _GLIBCXX_VISIBILITY_ATTR(default) {\n #  define _GLIBCXX_END_NAMESPACE }\n # endif\n \n # if __NO_INLINE__ && !__GXX_WEAK__\n-#  warning currently using namespace associated mode which may fail \\\n+#  warning currently using inlined namespace mode which may fail \\\n    without inlining due to lack of weak symbols\n # endif\n \n # define _GLIBCXX_BEGIN_NESTED_NAMESPACE(X, Y)  namespace X { namespace Y _GLIBCXX_VISIBILITY_ATTR(default) {\n # define _GLIBCXX_END_NESTED_NAMESPACE } }\n #endif\n \n-// Namespace associations for debug mode.\n-#if _GLIBCXX_NAMESPACE_ASSOCIATION_DEBUG && !_GLIBCXX_NAMESPACE_ASSOCIATION_PROFILE\n+// Inline namespaces for debug mode.\n+#if _GLIBCXX_INLINE_DEBUG && !_GLIBCXX_INLINE_PROFILE\n namespace std\n-{ \n-  namespace __norm { } \n+{\n+  namespace __norm { }\n   inline namespace __debug { }\n   inline namespace __cxx1998 { }\n }\n #endif\n \n-// Namespace associations for parallel mode.\n-#if _GLIBCXX_NAMESPACE_ASSOCIATION_PARALLEL\n+// Inline namespaces for parallel mode.\n+#if _GLIBCXX_INLINE_PARALLEL\n namespace std\n-{ \n-  namespace __norm { } \n+{\n+  namespace __norm { }\n   inline namespace __parallel { }\n   inline namespace __cxx1998 { }\n }\n #endif\n \n-// Namespace associations for profile mode\n-#if _GLIBCXX_NAMESPACE_ASSOCIATION_PROFILE\n+// Inline namespaces for profile mode\n+#if _GLIBCXX_INLINE_PROFILE\n namespace std\n-{ \n-  namespace __norm { } \n+{\n+  namespace __norm { }\n   inline namespace __profile { }\n   inline namespace __cxx1998 { }\n }\n #endif\n \n-// Namespace associations for versioning mode.\n-#if _GLIBCXX_NAMESPACE_ASSOCIATION_VERSION\n+// Inline namespaces for versioning mode.\n+#if _GLIBCXX_INLINE_VERSION\n namespace std\n {\n   inline namespace _6 { }\n }\n \n-namespace __gnu_cxx \n-{ \n+namespace __gnu_cxx\n+{\n   inline namespace _6 { }\n }\n \n namespace std\n {\n-  namespace tr1 \n-  { \n+  namespace tr1\n+  {\n     inline namespace _6 { }\n   }\n }\n@@ -295,8 +292,8 @@ namespace std\n // Define if compatibility should be provided for -mlong-double-64\n #undef _GLIBCXX_LONG_DOUBLE_COMPAT\n \n-// Namespace associations for long double 128 mode.\n-#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__ \n+// Inline namespaces for long double 128 mode.\n+#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__\n namespace std\n {\n   inline namespace __gnu_cxx_ldbl128 { }\n@@ -341,11 +338,11 @@ namespace std\n \n #else // !__cplusplus\n # define _GLIBCXX_BEGIN_EXTERN_C\n-# define _GLIBCXX_END_EXTERN_C \n+# define _GLIBCXX_END_EXTERN_C\n # undef _GLIBCXX_BEGIN_NAMESPACE\n # undef _GLIBCXX_END_NAMESPACE\n-# define _GLIBCXX_BEGIN_NAMESPACE(X) \n-# define _GLIBCXX_END_NAMESPACE \n+# define _GLIBCXX_BEGIN_NAMESPACE(X)\n+# define _GLIBCXX_END_NAMESPACE\n #endif\n \n // First includes.\n@@ -397,7 +394,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // Avoid the use of assert, because we're trying to keep the <cassert>\n   // include out of the mix.\n   inline void\n-  __replacement_assert(const char* __file, int __line, \n+  __replacement_assert(const char* __file, int __line,\n \t\t       const char* __function, const char* __condition)\n   {\n     __builtin_printf(\"%s:%d: %s: Assertion '%s' failed.\\n\", __file, __line,\n@@ -406,8 +403,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   }\n _GLIBCXX_END_NAMESPACE\n \n-#define __glibcxx_assert(_Condition)                               \t\\\n-  do \t\t\t\t\t\t\t\t        \\\n+#define __glibcxx_assert(_Condition)\t\t\t\t   \t\\\n+  do \t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t      \t\t\\\n     if (! (_Condition))                                                 \\\n       std::__replacement_assert(__FILE__, __LINE__, \t\t\t\\"}, {"sha": "bd0fa4be0101a2cc84590e8c9451849e1f28864f", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,7 +1,7 @@\n // File based streams -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,\n-// 2007, 2008, 2009, 2010\n+// 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -38,7 +38,7 @@\n \n #pragma GCC system_header\n \n-#include <cxxabi-forced.h>\n+#include <bits/cxxabi_forced.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n "}, {"sha": "714d1cfd6b8ca7b10c746eb838daf73c8ee8fe3f", "filename": "libstdc++-v3/include/bits/functexcept.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,6 +1,6 @@\n // Function-Based Exception Support -*- C++ -*-\n \n-// Copyright (C) 2001, 2004, 2005, 2008, 2009, 2010\n+// Copyright (C) 2001, 2004, 2005, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -38,7 +38,7 @@\n #define _FUNCTEXCEPT_H 1\n \n #include <bits/c++config.h>\n-#include <exception_defines.h>\n+#include <bits/exception_defines.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n "}, {"sha": "30754510fca89e6ee639ebcb137f3a1e3a918670", "filename": "libstdc++-v3/include/bits/functional_hash.h", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,6 +1,6 @@\n // functional_hash.h header -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,10 +32,10 @@\n \n #pragma GCC system_header\n \n-#include <bits/c++config.h>\n+#include <bits/hash_bytes.h>\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n \n-namespace std\n-{\n   /** @defgroup hashes Hashes\n    *  @ingroup functors\n    *\n@@ -122,20 +122,6 @@ namespace std\n \n #undef _Cxx_hashtable_define_trivial_hash\n \n-  // Hash function implementation for the nontrivial specialization.\n-  // All of them are based on a primitive that hashes a pointer to\n-  // a byte array. The actual hash algorithm is not guaranteed to\n-  // stay the same from release to release -- it may be updated or\n-  // tuned to improve hash quality or speed.\n-  size_t\n-  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);\n-\n-  // A similar hash primitive, using the FNV hash algorithm. This\n-  // algorithm is guaranteed to stay the same from release to release.\n-  // (although it might not produce the same values on different machines.)\n-  size_t\n-  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);\n-\n   struct _Hash_impl\n   {\n     static size_t\n@@ -158,7 +144,7 @@ namespace std\n   {\n     static size_t\n     hash(const void* __ptr, size_t __clength,\n-         size_t __seed = static_cast<size_t>(2166136261UL))\n+\t size_t __seed = static_cast<size_t>(2166136261UL))\n     { return _Fnv_hash_bytes(__ptr, __clength, __seed); }\n \n     template<typename _Tp>\n@@ -196,6 +182,7 @@ namespace std\n     hash<long double>::operator()(long double __val) const;\n \n   // @} group hashes\n-}\n+\n+_GLIBCXX_END_NAMESPACE\n \n #endif // _FUNCTIONAL_HASH_H"}, {"sha": "721d1228a7fedf2318ecc842838b5904a90c5531", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 104, "deletions": 103, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,6 +1,6 @@\n // hashtable.h header -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,39 +35,39 @@\n \n #include <bits/hashtable_policy.h>\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n+\n   // Class template _Hashtable, class definition.\n-  \n+\n   // Meaning of class template _Hashtable's template parameters\n-  \n+\n   // _Key and _Value: arbitrary CopyConstructible types.\n-  \n+\n   // _Allocator: an allocator type ([lib.allocator.requirements]) whose\n   // value type is Value.  As a conforming extension, we allow for\n   // value type != Value.\n \n   // _ExtractKey: function object that takes a object of type Value\n   // and returns a value of type _Key.\n-  \n+\n   // _Equal: function object that takes two objects of type k and returns\n   // a bool-like value that is true if the two objects are considered equal.\n-  \n+\n   // _H1: the hash function.  A unary function object with argument type\n   // Key and result type size_t.  Return values should be distributed\n   // over the entire range [0, numeric_limits<size_t>:::max()].\n-  \n+\n   // _H2: the range-hashing function (in the terminology of Tavori and\n   // Dreizin).  A binary function object whose argument types and result\n   // type are all size_t.  Given arguments r and N, the return value is\n   // in the range [0, N).\n-  \n+\n   // _Hash: the ranged hash function (Tavori and Dreizin). A binary function\n   // whose argument types are _Key and size_t and whose result type is\n   // size_t.  Given arguments k and N, the return value is in the range\n   // [0, N).  Default: hash(k, N) = h2(h1(k), N).  If _Hash is anything other\n   // than the default, _H1 and _H2 are ignored.\n-  \n+\n   // _RehashPolicy: Policy class with three members, all of which govern\n   // the bucket count. _M_next_bkt(n) returns a bucket count no smaller\n   // than n.  _M_bkt_for_elements(n) returns a bucket count appropriate\n@@ -76,27 +76,27 @@ namespace std\n   // current element count is n_elt, we need to increase the bucket\n   // count.  If so, returns make_pair(true, n), where n is the new\n   // bucket count.  If not, returns make_pair(false, <anything>).\n-  \n+\n   // ??? Right now it is hard-wired that the number of buckets never\n   // shrinks.  Should we allow _RehashPolicy to change that?\n-  \n+\n   // __cache_hash_code: bool.  true if we store the value of the hash\n   // function along with the value.  This is a time-space tradeoff.\n   // Storing it may improve lookup speed by reducing the number of times\n   // we need to call the Equal function.\n-  \n+\n   // __constant_iterators: bool.  true if iterator and const_iterator are\n   // both constant iterator types.  This is true for unordered_set and\n   // unordered_multiset, false for unordered_map and unordered_multimap.\n-  \n+\n   // __unique_keys: bool.  true if the return value of _Hashtable::count(k)\n   // is always at most one, false if it may be an arbitrary number.  This\n   // true for unordered_set and unordered_map, false for unordered_multiset\n   // and unordered_multimap.\n-  \n+\n   template<typename _Key, typename _Value, typename _Allocator,\n \t   typename _ExtractKey, typename _Equal,\n-\t   typename _H1, typename _H2, typename _Hash, \n+\t   typename _H1, typename _H2, typename _Hash,\n \t   typename _RehashPolicy,\n \t   bool __cache_hash_code,\n \t   bool __constant_iterators,\n@@ -145,33 +145,33 @@ namespace std\n       typedef std::ptrdiff_t                              difference_type;\n       typedef __detail::_Node_iterator<value_type, __constant_iterators,\n \t\t\t\t       __cache_hash_code>\n-                                                          local_iterator;\n+\t\t\t\t\t\t\t  local_iterator;\n       typedef __detail::_Node_const_iterator<value_type,\n \t\t\t\t\t     __constant_iterators,\n \t\t\t\t\t     __cache_hash_code>\n-                                                          const_local_iterator;\n+\t\t\t\t\t\t\t  const_local_iterator;\n \n       typedef __detail::_Hashtable_iterator<value_type, __constant_iterators,\n \t\t\t\t\t    __cache_hash_code>\n-                                                          iterator;\n+\t\t\t\t\t\t\t  iterator;\n       typedef __detail::_Hashtable_const_iterator<value_type,\n \t\t\t\t\t\t  __constant_iterators,\n \t\t\t\t\t\t  __cache_hash_code>\n-                                                          const_iterator;\n+\t\t\t\t\t\t\t  const_iterator;\n \n       template<typename _Key2, typename _Value2, typename _Ex2, bool __unique2,\n \t       typename _Hashtable2>\n-        friend struct __detail::_Map_base;\n+\tfriend struct __detail::_Map_base;\n \n     private:\n       typedef __detail::_Hash_node<_Value, __cache_hash_code> _Node;\n       typedef typename _Allocator::template rebind<_Node>::other\n-                                                        _Node_allocator_type;\n+\t\t\t\t\t\t\t_Node_allocator_type;\n       typedef typename _Allocator::template rebind<_Node*>::other\n-                                                        _Bucket_allocator_type;\n+\t\t\t\t\t\t\t_Bucket_allocator_type;\n \n       typedef typename _Allocator::template rebind<_Value>::other\n-                                                        _Value_allocator_type;\n+\t\t\t\t\t\t\t_Value_allocator_type;\n \n       _Node_allocator_type   _M_node_allocator;\n       _Node**                _M_buckets;\n@@ -181,39 +181,39 @@ namespace std\n       _RehashPolicy          _M_rehash_policy;\n \n       template<typename... _Args>\n-        _Node*\n-        _M_allocate_node(_Args&&... __args);\n-  \n+\t_Node*\n+\t_M_allocate_node(_Args&&... __args);\n+\n       void\n       _M_deallocate_node(_Node* __n);\n-  \n+\n       void\n       _M_deallocate_nodes(_Node**, size_type);\n \n       _Node**\n       _M_allocate_buckets(size_type __n);\n-  \n+\n       void\n       _M_deallocate_buckets(_Node**, size_type __n);\n \n-    public:\t\t\t    \n+    public:\n       // Constructor, destructor, assignment, swap\n       _Hashtable(size_type __bucket_hint,\n \t\t const _H1&, const _H2&, const _Hash&,\n \t\t const _Equal&, const _ExtractKey&,\n \t\t const allocator_type&);\n-  \n+\n       template<typename _InputIterator>\n-        _Hashtable(_InputIterator __first, _InputIterator __last,\n+\t_Hashtable(_InputIterator __first, _InputIterator __last,\n \t\t   size_type __bucket_hint,\n-\t\t   const _H1&, const _H2&, const _Hash&, \n+\t\t   const _H1&, const _H2&, const _Hash&,\n \t\t   const _Equal&, const _ExtractKey&,\n \t\t   const allocator_type&);\n-  \n+\n       _Hashtable(const _Hashtable&);\n \n       _Hashtable(_Hashtable&&);\n-      \n+\n       _Hashtable&\n       operator=(const _Hashtable& __ht)\n       {\n@@ -264,7 +264,7 @@ namespace std\n       size_type\n       size() const\n       { return _M_element_count; }\n-  \n+\n       bool\n       empty() const\n       { return size() == 0; }\n@@ -288,18 +288,18 @@ namespace std\n       size_type\n       bucket_count() const\n       { return _M_bucket_count; }\n-  \n+\n       size_type\n       max_bucket_count() const\n       { return max_size(); }\n-  \n+\n       size_type\n       bucket_size(size_type __n) const\n       { return std::distance(begin(__n), end(__n)); }\n-  \n+\n       size_type\n       bucket(const key_type& __k) const\n-      { \n+      {\n \treturn this->_M_bucket_index(__k, this->_M_hash_code(__k),\n \t\t\t\t     bucket_count());\n       }\n@@ -331,7 +331,7 @@ namespace std\n \n       float\n       load_factor() const\n-      { \n+      {\n \treturn static_cast<float>(size()) / static_cast<float>(bucket_count());\n       }\n \n@@ -342,8 +342,8 @@ namespace std\n       const _RehashPolicy&\n       __rehash_policy() const\n       { return _M_rehash_policy; }\n-      \n-      void \n+\n+      void\n       __rehash_policy(const _RehashPolicy&);\n \n       // Lookup.\n@@ -369,28 +369,28 @@ namespace std\n \t\t   typename _Hashtable::_Hash_code_type) const;\n \n       template<typename _Arg>\n-        iterator\n-        _M_insert_bucket(_Arg&&, size_type,\n+\titerator\n+\t_M_insert_bucket(_Arg&&, size_type,\n \t\t\t typename _Hashtable::_Hash_code_type);\n \n       template<typename _Arg>\n-        std::pair<iterator, bool>\n-        _M_insert(_Arg&&, std::true_type);\n+\tstd::pair<iterator, bool>\n+\t_M_insert(_Arg&&, std::true_type);\n \n       template<typename _Arg>\n-        iterator\n-        _M_insert(_Arg&&, std::false_type);\n+\titerator\n+\t_M_insert(_Arg&&, std::false_type);\n \n       typedef typename std::conditional<__unique_keys,\n \t\t\t\t\tstd::pair<iterator, bool>,\n \t\t\t\t\titerator>::type\n-        _Insert_Return_Type;\n+\t_Insert_Return_Type;\n \n       typedef typename std::conditional<__unique_keys,\n \t\t\t\t\tstd::_Select1st<_Insert_Return_Type>,\n \t\t\t\t\tstd::_Identity<_Insert_Return_Type>\n-                                   >::type\n-        _Insert_Conv_Type;\n+\t\t\t\t   >::type\n+\t_Insert_Conv_Type;\n \n     public:\n       // Insert and erase\n@@ -415,22 +415,22 @@ namespace std\n \t       std::enable_if<!__constant_iterators\n \t\t\t      && std::is_convertible<_Pair,\n \t\t\t\t\t\t     value_type>::value>::type>\n-        _Insert_Return_Type\n-        insert(_Pair&& __v)\n-        { return _M_insert(std::forward<_Pair>(__v),\n+\t_Insert_Return_Type\n+\tinsert(_Pair&& __v)\n+\t{ return _M_insert(std::forward<_Pair>(__v),\n \t\t\t   std::integral_constant<bool, __unique_keys>()); }\n \n       template<typename _Pair, typename = typename\n \t       std::enable_if<!__constant_iterators\n \t\t\t      && std::is_convertible<_Pair,\n \t\t\t\t\t\t     value_type>::value>::type>\n-        iterator\n-        insert(const_iterator, _Pair&& __v)\n-        { return _Insert_Conv_Type()(insert(std::forward<_Pair>(__v))); }\n+\titerator\n+\tinsert(const_iterator, _Pair&& __v)\n+\t{ return _Insert_Conv_Type()(insert(std::forward<_Pair>(__v))); }\n \n       template<typename _InputIterator>\n-        void\n-        insert(_InputIterator __first, _InputIterator __last);\n+\tvoid\n+\tinsert(_InputIterator __first, _InputIterator __last);\n \n       void\n       insert(initializer_list<value_type> __l)\n@@ -461,7 +461,7 @@ namespace std\n \n \n   // Definitions of class template _Hashtable's out-of-line member functions.\n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -487,7 +487,7 @@ namespace std\n \t  }\n       }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -500,7 +500,7 @@ namespace std\n       _M_node_allocator.deallocate(__n, 1);\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -522,7 +522,7 @@ namespace std\n \t}\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -543,7 +543,7 @@ namespace std\n       return __p;\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -556,7 +556,7 @@ namespace std\n       __alloc.deallocate(__p, __n + 1);\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -581,7 +581,7 @@ namespace std\n       _M_begin_bucket_index = _M_bucket_count;\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -622,8 +622,8 @@ namespace std\n \t    __throw_exception_again;\n \t  }\n       }\n-  \n-  template<typename _Key, typename _Value, \n+\n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -664,7 +664,7 @@ namespace std\n \t}\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -690,7 +690,7 @@ namespace std\n       __ht._M_rehash_policy = _RehashPolicy();\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -702,7 +702,7 @@ namespace std\n       _M_deallocate_buckets(_M_buckets, _M_bucket_count);\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -729,7 +729,7 @@ namespace std\n       std::swap(_M_element_count, __x._M_element_count);\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -744,7 +744,7 @@ namespace std\n \t_M_rehash(__n_bkt);\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -761,7 +761,7 @@ namespace std\n       return __p ? iterator(__p, _M_buckets + __n) : this->end();\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -778,7 +778,7 @@ namespace std\n       return __p ? const_iterator(__p, _M_buckets + __n) : this->end();\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -798,7 +798,7 @@ namespace std\n       return __result;\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -818,7 +818,7 @@ namespace std\n       std::size_t __n = this->_M_bucket_index(__k, __code, _M_bucket_count);\n       _Node** __head = _M_buckets + __n;\n       _Node* __p = _M_find_node(*__head, __k, __code);\n-      \n+\n       if (__p)\n \t{\n \t  _Node* __p1 = __p->_M_next;\n@@ -836,7 +836,7 @@ namespace std\n \treturn std::make_pair(this->end(), this->end());\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -876,13 +876,13 @@ namespace std\n \n   // Find the node whose key compares equal to k, beginning the search\n   // at p (usually the head of a bucket).  Return nil if no node is found.\n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n     typename _Hashtable<_Key, _Value, _Allocator, _ExtractKey,\n \t\t\t_Equal, _H1, _H2, _Hash, _RehashPolicy,\n-\t\t\t__chc, __cit, __uk>::_Node* \n+\t\t\t__chc, __cit, __uk>::_Node*\n     _Hashtable<_Key, _Value, _Allocator, _ExtractKey, _Equal,\n \t       _H1, _H2, _Hash, _RehashPolicy, __chc, __cit, __uk>::\n     _M_find_node(_Node* __p, const key_type& __k,\n@@ -895,7 +895,7 @@ namespace std\n     }\n \n   // Insert v in bucket n (assumes no element with its key already present).\n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -943,7 +943,7 @@ namespace std\n       }\n \n   // Insert v if no element with its key is already present.\n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -967,7 +967,7 @@ namespace std\n       }\n \n   // Insert v unconditionally.\n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -984,7 +984,7 @@ namespace std\n \t\t\t\t\t    _M_element_count, 1);\n \tif (__do_rehash.first)\n \t  _M_rehash(__do_rehash.second);\n- \n+\n \tconst key_type& __k = this->_M_extract(__v);\n \ttypename _Hashtable::_Hash_code_type __code = this->_M_hash_code(__k);\n \tsize_type __n = this->_M_bucket_index(__k, __code, _M_bucket_count);\n@@ -993,7 +993,7 @@ namespace std\n \t_Node* __prev = _M_find_node(_M_buckets[__n], __k, __code);\n \t_Node* __new_node = _M_allocate_node(std::forward<_Arg>(__v));\n \n-        if (__prev)\n+\tif (__prev)\n \t  {\n \t    __new_node->_M_next = __prev->_M_next;\n \t    __prev->_M_next = __new_node;\n@@ -1005,18 +1005,18 @@ namespace std\n \t    if (__n < _M_begin_bucket_index)\n \t      _M_begin_bucket_index = __n;\n \t  }\n-        this->_M_store_code(__new_node, __code);\n+\tthis->_M_store_code(__new_node, __code);\n \n-        ++_M_element_count;\n-        return iterator(__new_node, _M_buckets + __n);\n+\t++_M_element_count;\n+\treturn iterator(__new_node, _M_buckets + __n);\n       }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n     template<typename _InputIterator>\n-      void \n+      void\n       _Hashtable<_Key, _Value, _Allocator, _ExtractKey, _Equal,\n \t\t _H1, _H2, _Hash, _RehashPolicy, __chc, __cit, __uk>::\n       insert(_InputIterator __first, _InputIterator __last)\n@@ -1032,7 +1032,7 @@ namespace std\n \t  this->insert(*__first);\n       }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -1073,7 +1073,7 @@ namespace std\n       return __result;\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -1087,7 +1087,7 @@ namespace std\n       typename _Hashtable::_Hash_code_type __code = this->_M_hash_code(__k);\n       std::size_t __n = this->_M_bucket_index(__k, __code, _M_bucket_count);\n       size_type __result = 0;\n-      \n+\n       _Node** __slot = _M_buckets + __n;\n       while (*__slot && !this->_M_compare(__k, __code, *__slot))\n \t__slot = &((*__slot)->_M_next);\n@@ -1101,8 +1101,8 @@ namespace std\n \t  if (std::__addressof(this->_M_extract((*__slot)->_M_v))\n \t      != std::__addressof(__k))\n \t    {\n-              _Node* __p = *__slot;\n-              *__slot = __p->_M_next;\n+\t      _Node* __p = *__slot;\n+\t      *__slot = __p->_M_next;\n \t      _M_deallocate_node(__p);\n \t      --_M_element_count;\n \t      ++__result;\n@@ -1143,7 +1143,7 @@ namespace std\n   // ??? This could be optimized by taking advantage of the bucket\n   // structure, but it's not clear that it's worth doing.  It probably\n   // wouldn't even be an optimization unless the load factor is large.\n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -1159,7 +1159,7 @@ namespace std\n       return iterator(__last._M_cur_node, __last._M_cur_bucket);\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -1172,8 +1172,8 @@ namespace std\n       _M_element_count = 0;\n       _M_begin_bucket_index = _M_bucket_count;\n     }\n- \n-  template<typename _Key, typename _Value, \n+\n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -1187,7 +1187,7 @@ namespace std\n \t\t\t\t\t\t\t      + 1)));\n     }\n \n-  template<typename _Key, typename _Value, \n+  template<typename _Key, typename _Value,\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n@@ -1228,6 +1228,7 @@ namespace std\n \t  __throw_exception_again;\n \t}\n     }\n-}\n+\n+_GLIBCXX_END_NESTED_NAMESPACE // namespace std\n \n #endif // _HASHTABLE_H"}, {"sha": "e439dfaac8f15bb9460835b0523089e47964af64", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 58, "deletions": 57, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,6 +1,6 @@\n // Internal policy header for unordered_set and unordered_map -*- C++ -*-\n \n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -24,15 +24,15 @@\n \n /** @file bits/hashtable_policy.h\n  *  This is an internal header file, included by other library headers.\n- *  Do not attempt to use it directly. \n+ *  Do not attempt to use it directly.\n  *  @headername{unordered_map,unordered_set}\n  */\n \n #ifndef _HASHTABLE_POLICY_H\n #define _HASHTABLE_POLICY_H 1\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n+\n namespace __detail\n {\n   // Helper function: return distance(first, last) for forward\n@@ -59,7 +59,7 @@ namespace __detail\n \n   // Auxiliary types used for all instantiations of _Hashtable: nodes\n   // and iterators.\n-  \n+\n   // Nodes, used to wrap elements stored in the hash table.  A policy\n   // template parameter of class template _Hashtable controls whether\n   // nodes also store a hash code. In some cases (e.g. strings) this\n@@ -75,7 +75,7 @@ namespace __detail\n       _Hash_node*  _M_next;\n \n       template<typename... _Args>\n-        _Hash_node(_Args&&... __args)\n+\t_Hash_node(_Args&&... __args)\n \t: _M_v(std::forward<_Args>(__args)...),\n \t  _M_hash_code(), _M_next() { }\n     };\n@@ -87,7 +87,7 @@ namespace __detail\n       _Hash_node*  _M_next;\n \n       template<typename... _Args>\n-        _Hash_node(_Args&&... __args)\n+\t_Hash_node(_Args&&... __args)\n \t: _M_v(std::forward<_Args>(__args)...),\n \t  _M_next() { }\n     };\n@@ -99,7 +99,7 @@ namespace __detail\n     {\n       _Node_iterator_base(_Hash_node<_Value, __cache>* __p)\n       : _M_cur(__p) { }\n-      \n+\n       void\n       _M_incr()\n       { _M_cur = _M_cur->_M_next; }\n@@ -126,10 +126,10 @@ namespace __detail\n       typedef _Value                                   value_type;\n       typedef typename std::conditional<__constant_iterators,\n \t\t\t\t\tconst _Value*, _Value*>::type\n-                                                       pointer;\n+\t\t\t\t\t\t       pointer;\n       typedef typename std::conditional<__constant_iterators,\n \t\t\t\t\tconst _Value&, _Value&>::type\n-                                                       reference;\n+\t\t\t\t\t\t       reference;\n       typedef std::ptrdiff_t                           difference_type;\n       typedef std::forward_iterator_tag                iterator_category;\n \n@@ -143,21 +143,21 @@ namespace __detail\n       reference\n       operator*() const\n       { return this->_M_cur->_M_v; }\n-  \n+\n       pointer\n       operator->() const\n       { return std::__addressof(this->_M_cur->_M_v); }\n \n       _Node_iterator&\n       operator++()\n-      { \n+      {\n \tthis->_M_incr();\n-\treturn *this; \n+\treturn *this;\n       }\n-  \n+\n       _Node_iterator\n       operator++(int)\n-      { \n+      {\n \t_Node_iterator __tmp(*this);\n \tthis->_M_incr();\n \treturn __tmp;\n@@ -188,21 +188,21 @@ namespace __detail\n       reference\n       operator*() const\n       { return this->_M_cur->_M_v; }\n-  \n+\n       pointer\n       operator->() const\n       { return std::__addressof(this->_M_cur->_M_v); }\n \n       _Node_const_iterator&\n       operator++()\n-      { \n+      {\n \tthis->_M_incr();\n-\treturn *this; \n+\treturn *this;\n       }\n-  \n+\n       _Node_const_iterator\n       operator++(int)\n-      { \n+      {\n \t_Node_const_iterator __tmp(*this);\n \tthis->_M_incr();\n \treturn __tmp;\n@@ -265,10 +265,10 @@ namespace __detail\n       typedef _Value                                   value_type;\n       typedef typename std::conditional<__constant_iterators,\n \t\t\t\t\tconst _Value*, _Value*>::type\n-                                                       pointer;\n+\t\t\t\t\t\t       pointer;\n       typedef typename std::conditional<__constant_iterators,\n \t\t\t\t\tconst _Value&, _Value&>::type\n-                                                       reference;\n+\t\t\t\t\t\t       reference;\n       typedef std::ptrdiff_t                           difference_type;\n       typedef std::forward_iterator_tag                iterator_category;\n \n@@ -286,21 +286,21 @@ namespace __detail\n       reference\n       operator*() const\n       { return this->_M_cur_node->_M_v; }\n-  \n+\n       pointer\n       operator->() const\n       { return std::__addressof(this->_M_cur_node->_M_v); }\n \n       _Hashtable_iterator&\n       operator++()\n-      { \n+      {\n \tthis->_M_incr();\n \treturn *this;\n       }\n-  \n+\n       _Hashtable_iterator\n       operator++(int)\n-      { \n+      {\n \t_Hashtable_iterator __tmp(*this);\n \tthis->_M_incr();\n \treturn __tmp;\n@@ -336,21 +336,21 @@ namespace __detail\n       reference\n       operator*() const\n       { return this->_M_cur_node->_M_v; }\n-  \n+\n       pointer\n       operator->() const\n       { return std::__addressof(this->_M_cur_node->_M_v); }\n \n       _Hashtable_const_iterator&\n       operator++()\n-      { \n+      {\n \tthis->_M_incr();\n \treturn *this;\n       }\n-  \n+\n       _Hashtable_const_iterator\n       operator++(int)\n-      { \n+      {\n \t_Hashtable_const_iterator __tmp(*this);\n \tthis->_M_incr();\n \treturn __tmp;\n@@ -390,16 +390,16 @@ namespace __detail\n \n     float\n     max_load_factor() const\n-    { return _M_max_load_factor; }      \n+    { return _M_max_load_factor; }\n \n     // Return a bucket size no smaller than n.\n     std::size_t\n     _M_next_bkt(std::size_t __n) const;\n-    \n+\n     // Return a bucket count appropriate for n elements\n     std::size_t\n     _M_bkt_for_elements(std::size_t __n) const;\n-    \n+\n     // __n_bkt is current bucket count, __n_elt is current element count,\n     // and __n_ins is number of elements to be inserted.  Do we need to\n     // increase bucket count?  If so, return make_pair(true, n), where n\n@@ -418,7 +418,7 @@ namespace __detail\n   extern const unsigned long __prime_list[];\n \n   // XXX This is a hack.  There's no good reason for any of\n-  // _Prime_rehash_policy's member functions to be inline.  \n+  // _Prime_rehash_policy's member functions to be inline.\n \n   // Return a prime no smaller than n.\n   inline std::size_t\n@@ -427,7 +427,7 @@ namespace __detail\n   {\n     const unsigned long* __p = std::lower_bound(__prime_list, __prime_list\n \t\t\t\t\t\t+ _S_n_primes, __n);\n-    _M_next_resize = \n+    _M_next_resize =\n       static_cast<std::size_t>(__builtin_ceil(*__p * _M_max_load_factor));\n     return *__p;\n   }\n@@ -448,7 +448,7 @@ namespace __detail\n \n   // Finds the smallest prime p such that alpha p > __n_elt + __n_ins.\n   // If p > __n_bkt, return make_pair(true, p); otherwise return\n-  // make_pair(false, 0).  In principle this isn't very different from \n+  // make_pair(false, 0).  In principle this isn't very different from\n   // _M_bkt_for_elements.\n \n   // The only tricky part is that we're caching the element count at\n@@ -474,7 +474,7 @@ namespace __detail\n \t      (__builtin_ceil(*__p * _M_max_load_factor));\n \t    return std::make_pair(true, *__p);\n \t  }\n-\telse \n+\telse\n \t  {\n \t    _M_next_resize = static_cast<std::size_t>\n \t      (__builtin_ceil(__n_bkt * _M_max_load_factor));\n@@ -642,10 +642,10 @@ namespace __detail\n   //       we have a dummy type as placeholder.\n   //   (2) Whether or not we cache hash codes.  Caching hash codes is\n   //       meaningless if we have a ranged hash function.\n-  // We also put the key extraction and equality comparison function \n+  // We also put the key extraction and equality comparison function\n   // objects here, for convenience.\n-  \n-  // Primary template: unused except as a hook for specializations.  \n+\n+  // Primary template: unused except as a hook for specializations.\n   template<typename _Key, typename _Value,\n \t   typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash,\n@@ -666,11 +666,11 @@ namespace __detail\n       : _M_extract(__ex), _M_eq(__eq), _M_ranged_hash(__h) { }\n \n       typedef void* _Hash_code_type;\n-  \n+\n       _Hash_code_type\n       _M_hash_code(const _Key& __key) const\n       { return 0; }\n-  \n+\n       std::size_t\n       _M_bucket_index(const _Key& __k, _Hash_code_type,\n \t\t      std::size_t __n) const\n@@ -680,7 +680,7 @@ namespace __detail\n       _M_bucket_index(const _Hash_node<_Value, false>* __p,\n \t\t      std::size_t __n) const\n       { return _M_ranged_hash(_M_extract(__p->_M_v), __n); }\n-  \n+\n       bool\n       _M_compare(const _Key& __k, _Hash_code_type,\n \t\t _Hash_node<_Value, false>* __n) const\n@@ -694,7 +694,7 @@ namespace __detail\n       _M_copy_code(_Hash_node<_Value, false>*,\n \t\t   const _Hash_node<_Value, false>*) const\n       { }\n-      \n+\n       void\n       _M_swap(_Hash_code_base& __x)\n       {\n@@ -712,11 +712,11 @@ namespace __detail\n \n   // No specialization for ranged hash function while caching hash codes.\n   // That combination is meaningless, and trying to do it is an error.\n-  \n-  \n+\n+\n   // Specialization: ranged hash function, cache hash codes.  This\n   // combination is meaningless, so we provide only a declaration\n-  // and no definition.  \n+  // and no definition.\n   template<typename _Key, typename _Value,\n \t   typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash>\n@@ -725,7 +725,7 @@ namespace __detail\n \n   // Specialization: hash function and range-hashing function, no\n   // caching of hash codes.  H is provided but ignored.  Provides\n-  // typedef and accessor required by TR1.  \n+  // typedef and accessor required by TR1.\n   template<typename _Key, typename _Value,\n \t   typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2>\n@@ -749,7 +749,7 @@ namespace __detail\n       _Hash_code_type\n       _M_hash_code(const _Key& __k) const\n       { return _M_h1(__k); }\n-      \n+\n       std::size_t\n       _M_bucket_index(const _Key&, _Hash_code_type __c,\n \t\t      std::size_t __n) const\n@@ -790,7 +790,7 @@ namespace __detail\n       _H2          _M_h2;\n     };\n \n-  // Specialization: hash function and range-hashing function, \n+  // Specialization: hash function and range-hashing function,\n   // caching hash codes.  H is provided but ignored.  Provides\n   // typedef and accessor required by TR1.\n   template<typename _Key, typename _Value,\n@@ -800,7 +800,7 @@ namespace __detail\n \t\t\t   _Default_ranged_hash, true>\n     {\n       typedef _H1 hasher;\n-      \n+\n       hasher\n       hash_function() const\n       { return _M_h1; }\n@@ -812,11 +812,11 @@ namespace __detail\n       : _M_extract(__ex), _M_eq(__eq), _M_h1(__h1), _M_h2(__h2) { }\n \n       typedef std::size_t _Hash_code_type;\n-  \n+\n       _Hash_code_type\n       _M_hash_code(const _Key& __k) const\n       { return _M_h1(__k); }\n-  \n+\n       std::size_t\n       _M_bucket_index(const _Key&, _Hash_code_type __c,\n \t\t      std::size_t __n) const\n@@ -849,7 +849,7 @@ namespace __detail\n \tstd::swap(_M_h1, __x._M_h1);\n \tstd::swap(_M_h2, __x._M_h2);\n       }\n-      \n+\n     protected:\n       _ExtractKey  _M_extract;\n       _Equal       _M_eq;\n@@ -898,8 +898,8 @@ namespace __detail\n \n     private:\n       template<typename _Uiterator>\n-        static bool\n-        _S_is_permutation(_Uiterator, _Uiterator, _Uiterator);\n+\tstatic bool\n+\t_S_is_permutation(_Uiterator, _Uiterator, _Uiterator);\n     };\n \n   // See std::is_permutation in N3068.\n@@ -978,6 +978,7 @@ namespace __detail\n       return true;\n     }\n } // namespace __detail\n-}\n+\n+_GLIBCXX_END_NESTED_NAMESPACE // namespace std\n \n #endif // _HASHTABLE_POLICY_H"}, {"sha": "6fc6b31ad261bbdc38f47814a542d3357b4f697b", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,7 +1,7 @@\n // istream classes -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009, 2010\n+// 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -38,7 +38,7 @@\n \n #pragma GCC system_header\n \n-#include <cxxabi-forced.h>\n+#include <bits/cxxabi_forced.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n "}, {"sha": "ec41595a7c99613c1e655dd9edd94af33fd33d5b", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,7 +1,7 @@\n // ostream classes -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009, 2010\n+// 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -38,7 +38,7 @@\n \n #pragma GCC system_header\n \n-#include <cxxabi-forced.h>\n+#include <bits/cxxabi_forced.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n "}, {"sha": "3d7cf2d504206a4bd95760bdeb3d00c8fda00a0b", "filename": "libstdc++-v3/include/bits/ostream_insert.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream_insert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream_insert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream_insert.h?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,6 +1,6 @@\n // Helpers for ostream inserters -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,7 +33,7 @@\n #pragma GCC system_header\n \n #include <iosfwd>\n-#include <cxxabi-forced.h>\n+#include <bits/cxxabi_forced.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n "}, {"sha": "95d4cc36cc49f6cfaeab377bc0b4590ec591b429", "filename": "libstdc++-v3/include/ext/vstring.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,6 +1,6 @@\n // Versatile string -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -33,7 +33,7 @@\n \n #pragma GCC system_header\n \n-#include <cxxabi-forced.h>\n+#include <bits/cxxabi_forced.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n "}, {"sha": "29b06d52e721ac3df7e954a4b4a498022ab9df95", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,6 +1,7 @@\n // <bitset> -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+// 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -49,7 +50,7 @@\n #include <bits/functexcept.h>   // For invalid_argument, out_of_range,\n                                 // overflow_error\n #include <iosfwd>\n-#include <cxxabi-forced.h>\n+#include <bits/cxxabi_forced.h>\n \n #define _GLIBCXX_BITSET_BITS_PER_WORD  (__CHAR_BIT__ * sizeof(unsigned long))\n #define _GLIBCXX_BITSET_WORDS(__n) \\"}, {"sha": "f66832882bd666b9e47a712f7be4c6cf1402f4e4", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "modified", "additions": 41, "deletions": 18, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,7 +1,7 @@\n ## Makefile for the GNU C++ Support library.\n ##\n ## Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n-## 2009, 2010\n+## 2009, 2010, 2011\n ## Free Software Foundation, Inc.\n ##\n ## Process this file with automake to produce Makefile.in.\n@@ -31,10 +31,14 @@ toolexeclib_LTLIBRARIES = libsupc++.la\n # 2) integrated libsupc++convenience.la that is to be a part of libstdc++.a\n noinst_LTLIBRARIES = libsupc++convenience.la\n \n+std_HEADERS = \\\n+\tcxxabi.h exception initializer_list new typeinfo \n \n-headers = \\\n-\texception new typeinfo cxxabi.h cxxabi-forced.h exception_defines.h \\\n-\tinitializer_list exception_ptr.h nested_exception.h\n+bits_HEADERS = \\\n+\tcxxabi_forced.h hash_bytes.h \\\n+\texception_defines.h exception_ptr.h nested_exception.h \n+\n+headers = $(std_HEADERS) $(bits_HEADERS)\n \n if GLIBCXX_HOSTED\n   c_sources = \\\n@@ -88,12 +92,9 @@ sources = \\\n \tvmi_class_type_info.cc \\\n \tvterminate.cc\n \n-libsupc___la_SOURCES = $(sources) $(c_sources)\n+libsupc___la_SOURCES = $(sources) $(c_sources) \n libsupc__convenience_la_SOURCES = $(sources) $(c_sources)\n \n-glibcxxinstalldir = $(gxx_include_dir)\n-glibcxxinstall_HEADERS = $(headers)\n-\n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually\n # set this option because CONFIG_CXXFLAGS has to be after\n@@ -132,7 +133,7 @@ cp-demangle.o: cp-demangle.c\n \t$(C_COMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n \n \n-# libstdc++ libtool notes\n+# Libtool notes\n \n # 1) Need to explicitly set LTCXXCOMPILE so that AM_CXXFLAGS is\n # last. (That way, things like -O2 passed down from the toplevel can\n@@ -169,21 +170,43 @@ CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared $(LIBTOOLFLAGS) \\\n \t  --mode=link $(CXX) \\\n \t  $(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_CXXFLAGS) $(LTLDFLAGS) -o $@\n \n+\n+# Install notes\n # We have to have rules modified from the default to counteract SUN make\n-# prepending each of $(glibcxxinstall_HEADERS) with VPATH below.\n-install-glibcxxinstallHEADERS: $(glibcxxinstall_HEADERS)\n+# prepending each of $(*_HEADERS) with VPATH below.\n+stddir = $(gxx_include_dir)\n+bitsdir = $(gxx_include_dir)/bits\n+\n+install-stdHEADERS: $(std_HEADERS)\n \t@$(NORMAL_INSTALL)\n-\t$(mkinstalldirs) $(DESTDIR)$(glibcxxinstalldir)\n-\t@list='$(glibcxxinstall_HEADERS)'; for p in $$list; do \\\n+\t$(mkinstalldirs) $(DESTDIR)$(stddir)\n+\t@list='$(std_HEADERS)'; for p in $$list; do \\\n \t  q=`echo $$p | sed -e 's,.*/,,'`; \\\n \t  if test -f \"$$p\"; then d= ; else d=\"$(srcdir)/\"; fi; \\\n-\t  echo \" $(INSTALL_DATA) $$d$$p $(DESTDIR)$(glibcxxinstalldir)/$$q\"; \\\n-\t  $(INSTALL_DATA) $$d$$p $(DESTDIR)$(glibcxxinstalldir)/$$q; \\\n+\t  echo \" $(INSTALL_DATA) $$d$$p $(DESTDIR)$(stddir)/$$q\"; \\\n+\t  $(INSTALL_DATA) $$d$$p $(DESTDIR)$(stddir)/$$q; \\\n+\tdone\n+\n+install-bitsHEADERS: $(bits_HEADERS)\n+\t@$(NORMAL_INSTALL)\n+\t$(mkinstalldirs) $(DESTDIR)$(bitsdir)\n+\t@list='$(bits_HEADERS)'; for p in $$list; do \\\n+\t  q=`echo $$p | sed -e 's,.*/,,'`; \\\n+\t  if test -f \"$$p\"; then d= ; else d=\"$(srcdir)/\"; fi; \\\n+\t  echo \" $(INSTALL_DATA) $$d$$p $(DESTDIR)$(bitsdir)/$$q\"; \\\n+\t  $(INSTALL_DATA) $$d$$p $(DESTDIR)$(bitsdir)/$$q; \\\n+\tdone\n+\n+uninstall-stdHEADERS:\n+\t@$(NORMAL_UNINSTALL)\n+\tlist='$(std_HEADERS)'; for p in $$list; do \\\n+\t  q=`echo $$p | sed -e 's,.*/,,'`; \\\n+\t  rm -f $(DESTDIR)$(stddir)/$$q; \\\n \tdone\n \n-uninstall-glibcxxinstallHEADERS:\n+uninstall-bitsHEADERS:\n \t@$(NORMAL_UNINSTALL)\n-\tlist='$(glibcxxinstall_HEADERS)'; for p in $$list; do \\\n+\tlist='$(bits_HEADERS)'; for p in $$list; do \\\n \t  q=`echo $$p | sed -e 's,.*/,,'`; \\\n-\t  rm -f $(DESTDIR)$(glibcxxinstalldir)/$$q; \\\n+\t  rm -f $(DESTDIR)$(bitsdir)/$$q; \\\n \tdone"}, {"sha": "9951feddca17deb99a6a95553ca9bb61326d17ab", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 56, "deletions": 32, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -37,7 +37,7 @@ build_triplet = @build@\n host_triplet = @host@\n target_triplet = @target@\n DIST_COMMON = $(top_srcdir)/fragment.am $(srcdir)/Makefile.in \\\n-\t$(srcdir)/Makefile.am $(glibcxxinstall_HEADERS)\n+\t$(srcdir)/Makefile.am $(bits_HEADERS) $(std_HEADERS)\n subdir = libsupc++\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n@@ -86,8 +86,8 @@ am__nobase_list = $(am__nobase_strip_setup); \\\n am__base_list = \\\n   sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\\n/ /g' | \\\n   sed '$$!N;$$!N;$$!N;$$!N;s/\\n/ /g'\n-am__installdirs = \"$(DESTDIR)$(toolexeclibdir)\" \\\n-\t\"$(DESTDIR)$(glibcxxinstalldir)\"\n+am__installdirs = \"$(DESTDIR)$(toolexeclibdir)\" \"$(DESTDIR)$(bitsdir)\" \\\n+\t\"$(DESTDIR)$(stddir)\"\n LTLIBRARIES = $(noinst_LTLIBRARIES) $(toolexeclib_LTLIBRARIES)\n libsupc___la_LIBADD =\n am__objects_1 = array_type_info.lo atexit_arm.lo bad_alloc.lo \\\n@@ -122,7 +122,7 @@ CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\\n \t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n CXXLD = $(CXX)\n SOURCES = $(libsupc___la_SOURCES) $(libsupc__convenience_la_SOURCES)\n-HEADERS = $(glibcxxinstall_HEADERS)\n+HEADERS = $(bits_HEADERS) $(std_HEADERS)\n ETAGS = etags\n CTAGS = ctags\n ABI_TWEAKS_SRCDIR = @ABI_TWEAKS_SRCDIR@\n@@ -339,10 +339,14 @@ AM_CPPFLAGS = $(GLIBCXX_INCLUDES)\n toolexeclib_LTLIBRARIES = libsupc++.la\n # 2) integrated libsupc++convenience.la that is to be a part of libstdc++.a\n noinst_LTLIBRARIES = libsupc++convenience.la\n-headers = \\\n-\texception new typeinfo cxxabi.h cxxabi-forced.h exception_defines.h \\\n-\tinitializer_list exception_ptr.h nested_exception.h\n+std_HEADERS = \\\n+\tcxxabi.h exception initializer_list new typeinfo \n \n+bits_HEADERS = \\\n+\tcxxabi_forced.h hash_bytes.h \\\n+\texception_defines.h exception_ptr.h nested_exception.h \n+\n+headers = $(std_HEADERS) $(bits_HEADERS)\n @GLIBCXX_HOSTED_TRUE@c_sources = \\\n @GLIBCXX_HOSTED_TRUE@\tcp-demangle.c \n \n@@ -393,10 +397,8 @@ sources = \\\n \tvmi_class_type_info.cc \\\n \tvterminate.cc\n \n-libsupc___la_SOURCES = $(sources) $(c_sources)\n+libsupc___la_SOURCES = $(sources) $(c_sources) \n libsupc__convenience_la_SOURCES = $(sources) $(c_sources)\n-glibcxxinstalldir = $(gxx_include_dir)\n-glibcxxinstall_HEADERS = $(headers)\n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually\n@@ -429,7 +431,7 @@ LTCOMPILE = $(LIBTOOL) --tag CC --tag disable-shared $(LIBTOOLFLAGS) --mode=comp\n             $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n \n \n-# libstdc++ libtool notes\n+# Libtool notes\n \n # 1) Need to explicitly set LTCXXCOMPILE so that AM_CXXFLAGS is\n # last. (That way, things like -O2 passed down from the toplevel can\n@@ -466,6 +468,12 @@ CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared $(LIBTOOLFLAGS) \\\n \t  --mode=link $(CXX) \\\n \t  $(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_CXXFLAGS) $(LTLDFLAGS) -o $@\n \n+\n+# Install notes\n+# We have to have rules modified from the default to counteract SUN make\n+# prepending each of $(*_HEADERS) with VPATH below.\n+stddir = $(gxx_include_dir)\n+bitsdir = $(gxx_include_dir)/bits\n all: all-am\n \n .SUFFIXES:\n@@ -630,7 +638,7 @@ check-am: all-am\n check: check-am\n all-am: Makefile $(LTLIBRARIES) $(HEADERS)\n installdirs:\n-\tfor dir in \"$(DESTDIR)$(toolexeclibdir)\" \"$(DESTDIR)$(glibcxxinstalldir)\"; do \\\n+\tfor dir in \"$(DESTDIR)$(toolexeclibdir)\" \"$(DESTDIR)$(bitsdir)\" \"$(DESTDIR)$(stddir)\"; do \\\n \t  test -z \"$$dir\" || $(MKDIR_P) \"$$dir\"; \\\n \tdone\n install: install-am\n@@ -680,7 +688,7 @@ info: info-am\n \n info-am:\n \n-install-data-am: install-glibcxxinstallHEADERS\n+install-data-am: install-bitsHEADERS install-stdHEADERS\n \n install-dvi: install-dvi-am\n \n@@ -725,7 +733,7 @@ ps: ps-am\n \n ps-am:\n \n-uninstall-am: uninstall-glibcxxinstallHEADERS \\\n+uninstall-am: uninstall-bitsHEADERS uninstall-stdHEADERS \\\n \tuninstall-toolexeclibLTLIBRARIES\n \n .MAKE: install-am install-strip\n@@ -734,16 +742,17 @@ uninstall-am: uninstall-glibcxxinstallHEADERS \\\n \tclean-libtool clean-noinstLTLIBRARIES \\\n \tclean-toolexeclibLTLIBRARIES ctags distclean distclean-compile \\\n \tdistclean-generic distclean-libtool distclean-tags dvi dvi-am \\\n-\thtml html-am info info-am install install-am install-data \\\n-\tinstall-data-am install-dvi install-dvi-am install-exec \\\n-\tinstall-exec-am install-glibcxxinstallHEADERS install-html \\\n+\thtml html-am info info-am install install-am \\\n+\tinstall-bitsHEADERS install-data install-data-am install-dvi \\\n+\tinstall-dvi-am install-exec install-exec-am install-html \\\n \tinstall-html-am install-info install-info-am install-man \\\n \tinstall-pdf install-pdf-am install-ps install-ps-am \\\n-\tinstall-strip install-toolexeclibLTLIBRARIES installcheck \\\n-\tinstallcheck-am installdirs maintainer-clean \\\n-\tmaintainer-clean-generic mostlyclean mostlyclean-compile \\\n-\tmostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \\\n-\ttags uninstall uninstall-am uninstall-glibcxxinstallHEADERS \\\n+\tinstall-stdHEADERS install-strip \\\n+\tinstall-toolexeclibLTLIBRARIES installcheck installcheck-am \\\n+\tinstalldirs maintainer-clean maintainer-clean-generic \\\n+\tmostlyclean mostlyclean-compile mostlyclean-generic \\\n+\tmostlyclean-libtool pdf pdf-am ps ps-am tags uninstall \\\n+\tuninstall-am uninstall-bitsHEADERS uninstall-stdHEADERS \\\n \tuninstall-toolexeclibLTLIBRARIES\n \n \n@@ -755,23 +764,38 @@ cp-demangle.lo: cp-demangle.c\n cp-demangle.o: cp-demangle.c\n \t$(C_COMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n \n-# We have to have rules modified from the default to counteract SUN make\n-# prepending each of $(glibcxxinstall_HEADERS) with VPATH below.\n-install-glibcxxinstallHEADERS: $(glibcxxinstall_HEADERS)\n+install-stdHEADERS: $(std_HEADERS)\n \t@$(NORMAL_INSTALL)\n-\t$(mkinstalldirs) $(DESTDIR)$(glibcxxinstalldir)\n-\t@list='$(glibcxxinstall_HEADERS)'; for p in $$list; do \\\n+\t$(mkinstalldirs) $(DESTDIR)$(stddir)\n+\t@list='$(std_HEADERS)'; for p in $$list; do \\\n \t  q=`echo $$p | sed -e 's,.*/,,'`; \\\n \t  if test -f \"$$p\"; then d= ; else d=\"$(srcdir)/\"; fi; \\\n-\t  echo \" $(INSTALL_DATA) $$d$$p $(DESTDIR)$(glibcxxinstalldir)/$$q\"; \\\n-\t  $(INSTALL_DATA) $$d$$p $(DESTDIR)$(glibcxxinstalldir)/$$q; \\\n+\t  echo \" $(INSTALL_DATA) $$d$$p $(DESTDIR)$(stddir)/$$q\"; \\\n+\t  $(INSTALL_DATA) $$d$$p $(DESTDIR)$(stddir)/$$q; \\\n+\tdone\n+\n+install-bitsHEADERS: $(bits_HEADERS)\n+\t@$(NORMAL_INSTALL)\n+\t$(mkinstalldirs) $(DESTDIR)$(bitsdir)\n+\t@list='$(bits_HEADERS)'; for p in $$list; do \\\n+\t  q=`echo $$p | sed -e 's,.*/,,'`; \\\n+\t  if test -f \"$$p\"; then d= ; else d=\"$(srcdir)/\"; fi; \\\n+\t  echo \" $(INSTALL_DATA) $$d$$p $(DESTDIR)$(bitsdir)/$$q\"; \\\n+\t  $(INSTALL_DATA) $$d$$p $(DESTDIR)$(bitsdir)/$$q; \\\n+\tdone\n+\n+uninstall-stdHEADERS:\n+\t@$(NORMAL_UNINSTALL)\n+\tlist='$(std_HEADERS)'; for p in $$list; do \\\n+\t  q=`echo $$p | sed -e 's,.*/,,'`; \\\n+\t  rm -f $(DESTDIR)$(stddir)/$$q; \\\n \tdone\n \n-uninstall-glibcxxinstallHEADERS:\n+uninstall-bitsHEADERS:\n \t@$(NORMAL_UNINSTALL)\n-\tlist='$(glibcxxinstall_HEADERS)'; for p in $$list; do \\\n+\tlist='$(bits_HEADERS)'; for p in $$list; do \\\n \t  q=`echo $$p | sed -e 's,.*/,,'`; \\\n-\t  rm -f $(DESTDIR)$(glibcxxinstalldir)/$$q; \\\n+\t  rm -f $(DESTDIR)$(bitsdir)/$$q; \\\n \tdone\n \n # Tell versions [3.59,3.63) of GNU make to not export all variables."}, {"sha": "c93085a072bc33cb370d73866c75a8d5a1c2315d", "filename": "libstdc++-v3/libsupc++/cxxabi.h", "status": "modified", "additions": 101, "deletions": 106, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,6 +1,6 @@\n-// new abi support -*- C++ -*-\n-  \n-// Copyright (C) 2000, 2002, 2003, 2004, 2006, 2007, 2009, 2010\n+// ABI Support -*- C++ -*-\n+\n+// Copyright (C) 2000, 2002, 2003, 2004, 2006, 2007, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of GCC.\n@@ -9,12 +9,12 @@\n // it under the terms of the GNU General Public License as published by\n // the Free Software Foundation; either version 3, or (at your option)\n // any later version.\n-// \n+//\n // GCC is distributed in the hope that it will be useful,\n // but WITHOUT ANY WARRANTY; without even the implied warranty of\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n-// \n+//\n // Under Section 7 of GPL version 3, you are granted additional\n // permissions described in the GCC Runtime Library Exception, version\n // 3.1, as published by the Free Software Foundation.\n@@ -25,12 +25,12 @@\n // <http://www.gnu.org/licenses/>.\n \n // Written by Nathan Sidwell, Codesourcery LLC, <nathan@codesourcery.com>\n- \n+\n /* This file declares the new abi entry points into the runtime. It is not\n    normally necessary for user programs to include this header, or use the\n    entry points directly. However, this header is available should that be\n    needed.\n-   \n+\n    Some of the entry points are intended for both C and C++, thus this header\n    is includable from both C and C++. Though the C++ specific parts are not\n    available in C, naturally enough.  */\n@@ -47,40 +47,35 @@\n #pragma GCC visibility push(default)\n \n #include <stddef.h>\n+#include <bits/c++config.h>\n #include <bits/cxxabi_tweaks.h>\n-#include <cxxabi-forced.h>\n- \n-#ifdef __cplusplus\n-#define _GLIBCXX_NOTHROW throw() \n-#else\n-#define _GLIBCXX_NOTHROW __attribute__((__nothrow__))\n-#endif\n+#include <bits/cxxabi_forced.h>\n \n #ifdef __cplusplus\n namespace __cxxabiv1\n-{  \n-  extern \"C\" \n+{\n+  extern \"C\"\n   {\n #endif\n \n   typedef __cxa_cdtor_return_type (*__cxa_cdtor_type)(void *);\n \n   // Allocate array.\n-  void* \n-  __cxa_vec_new(size_t __element_count, size_t __element_size, \n+  void*\n+  __cxa_vec_new(size_t __element_count, size_t __element_size,\n \t\tsize_t __padding_size, __cxa_cdtor_type __constructor,\n \t\t__cxa_cdtor_type __destructor);\n \n   void*\n   __cxa_vec_new2(size_t __element_count, size_t __element_size,\n \t\t size_t __padding_size, __cxa_cdtor_type __constructor,\n-\t\t __cxa_cdtor_type __destructor, void *(*__alloc) (size_t), \n+\t\t __cxa_cdtor_type __destructor, void *(*__alloc) (size_t),\n \t\t void (*__dealloc) (void*));\n \n   void*\n   __cxa_vec_new3(size_t __element_count, size_t __element_size,\n \t\t size_t __padding_size, __cxa_cdtor_type __constructor,\n-\t\t __cxa_cdtor_type __destructor, void *(*__alloc) (size_t), \n+\t\t __cxa_cdtor_type __destructor, void *(*__alloc) (size_t),\n \t\t void (*__dealloc) (void*, size_t));\n \n   // Construct array.\n@@ -91,41 +86,41 @@ namespace __cxxabiv1\n \n   __cxa_vec_ctor_return_type\n   __cxa_vec_cctor(void* __dest_array, void* __src_array,\n-\t\t  size_t __element_count, size_t __element_size, \n-\t\t  __cxa_cdtor_return_type (*__constructor) (void*, void*), \n+\t\t  size_t __element_count, size_t __element_size,\n+\t\t  __cxa_cdtor_return_type (*__constructor) (void*, void*),\n \t\t  __cxa_cdtor_type __destructor);\n- \n+\n   // Destruct array.\n-  void \n+  void\n   __cxa_vec_dtor(void* __array_address, size_t __element_count,\n \t\t size_t __element_size, __cxa_cdtor_type __destructor);\n-  \n-  void \n+\n+  void\n   __cxa_vec_cleanup(void* __array_address, size_t __element_count, size_t __s,\n \t\t    __cxa_cdtor_type __destructor) _GLIBCXX_NOTHROW;\n-  \n+\n   // Destruct and release array.\n-  void \n+  void\n   __cxa_vec_delete(void* __array_address, size_t __element_size,\n \t\t   size_t __padding_size, __cxa_cdtor_type __destructor);\n \n-  void \n+  void\n   __cxa_vec_delete2(void* __array_address, size_t __element_size,\n \t\t    size_t __padding_size, __cxa_cdtor_type __destructor,\n \t\t    void (*__dealloc) (void*));\n-                  \n-  void \n+\n+  void\n   __cxa_vec_delete3(void* __array_address, size_t __element_size,\n \t\t    size_t __padding_size, __cxa_cdtor_type __destructor,\n \t\t    void (*__dealloc) (void*, size_t));\n \n-  int \n+  int\n   __cxa_guard_acquire(__guard*);\n \n-  void \n+  void\n   __cxa_guard_release(__guard*) _GLIBCXX_NOTHROW;\n \n-  void \n+  void\n   __cxa_guard_abort(__guard*) _GLIBCXX_NOTHROW;\n \n   // Pure virtual functions.\n@@ -148,7 +143,7 @@ namespace __cxxabiv1\n \n \n   /**\n-   *  @brief Demangling routine. \n+   *  @brief Demangling routine.\n    *  ABI-mandated entry point in the C++ runtime library for demangling.\n    *\n    *  @param __mangled_name A NUL-terminated character string\n@@ -177,7 +172,7 @@ namespace __cxxabiv1\n    *  The demangling is performed using the C++ ABI mangling rules,\n    *  with GNU extensions. For example, this function is used in\n    *  __gnu_cxx::__verbose_terminate_handler.\n-   * \n+   *\n    *  See http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt12ch39.html\n    *  for other examples of use.\n    *\n@@ -205,48 +200,48 @@ namespace __cxxabiv1\n   class __fundamental_type_info : public std::type_info\n   {\n   public:\n-    explicit \n+    explicit\n     __fundamental_type_info(const char* __n) : std::type_info(__n) { }\n \n-    virtual \n+    virtual\n     ~__fundamental_type_info();\n   };\n \n   // Type information for array objects.\n   class __array_type_info : public std::type_info\n   {\n   public:\n-    explicit \n+    explicit\n     __array_type_info(const char* __n) : std::type_info(__n) { }\n \n-    virtual \n+    virtual\n     ~__array_type_info();\n   };\n \n   // Type information for functions (both member and non-member).\n   class __function_type_info : public std::type_info\n   {\n   public:\n-    explicit \n+    explicit\n     __function_type_info(const char* __n) : std::type_info(__n) { }\n \n-    virtual \n+    virtual\n     ~__function_type_info();\n \n   protected:\n     // Implementation defined member function.\n-    virtual bool \n+    virtual bool\n     __is_function_p() const;\n   };\n \n   // Type information for enumerations.\n   class __enum_type_info : public std::type_info\n   {\n   public:\n-    explicit \n+    explicit\n     __enum_type_info(const char* __n) : std::type_info(__n) { }\n \n-    virtual \n+    virtual\n     ~__enum_type_info();\n   };\n \n@@ -257,17 +252,17 @@ namespace __cxxabiv1\n     unsigned int \t\t__flags; // Qualification of the target object.\n     const std::type_info* \t__pointee; // Type of pointed to object.\n \n-    explicit \n-    __pbase_type_info(const char* __n, int __quals, \n+    explicit\n+    __pbase_type_info(const char* __n, int __quals,\n \t\t      const std::type_info* __type)\n     : std::type_info(__n), __flags(__quals), __pointee(__type)\n     { }\n-    \n-    virtual \n+\n+    virtual\n     ~__pbase_type_info();\n \n     // Implementation defined type.\n-    enum __masks \n+    enum __masks\n       {\n \t__const_mask = 0x1,\n \t__volatile_mask = 0x2,\n@@ -283,11 +278,11 @@ namespace __cxxabiv1\n     operator=(const __pbase_type_info&);\n \n     // Implementation defined member functions.\n-    virtual bool \n-    __do_catch(const std::type_info* __thr_type, void** __thr_obj, \n+    virtual bool\n+    __do_catch(const std::type_info* __thr_type, void** __thr_obj,\n \t       unsigned int __outer) const;\n \n-    inline virtual bool \n+    inline virtual bool\n     __pointer_catch(const __pbase_type_info* __thr_type, void** __thr_obj,\n \t\t    unsigned __outer) const;\n   };\n@@ -296,22 +291,22 @@ namespace __cxxabiv1\n   class __pointer_type_info : public __pbase_type_info\n   {\n   public:\n-    explicit \n-    __pointer_type_info(const char* __n, int __quals, \n+    explicit\n+    __pointer_type_info(const char* __n, int __quals,\n \t\t\tconst std::type_info* __type)\n     : __pbase_type_info (__n, __quals, __type) { }\n \n \n-    virtual \n+    virtual\n     ~__pointer_type_info();\n \n   protected:\n     // Implementation defined member functions.\n-    virtual bool \n+    virtual bool\n     __is_pointer_p() const;\n \n-    virtual bool \n-    __pointer_catch(const __pbase_type_info* __thr_type, void** __thr_obj, \n+    virtual bool\n+    __pointer_catch(const __pbase_type_info* __thr_type, void** __thr_obj,\n \t\t    unsigned __outer) const;\n   };\n \n@@ -323,13 +318,13 @@ namespace __cxxabiv1\n   public:\n     __class_type_info* __context;   // Class of the member.\n \n-    explicit \n+    explicit\n     __pointer_to_member_type_info(const char* __n, int __quals,\n-\t\t\t\t  const std::type_info* __type, \n+\t\t\t\t  const std::type_info* __type,\n \t\t\t\t  __class_type_info* __klass)\n     : __pbase_type_info(__n, __quals, __type), __context(__klass) { }\n \n-    virtual \n+    virtual\n     ~__pointer_to_member_type_info();\n \n   protected:\n@@ -339,7 +334,7 @@ namespace __cxxabiv1\n     operator=(const __pointer_to_member_type_info&);\n \n     // Implementation defined member function.\n-    virtual bool \n+    virtual bool\n     __pointer_catch(const __pbase_type_info* __thr_type, void** __thr_obj,\n \t\t    unsigned __outer) const;\n   };\n@@ -351,26 +346,26 @@ namespace __cxxabiv1\n     const __class_type_info* \t__base_type;  // Base class type.\n     long \t\t\t__offset_flags;  // Offset and info.\n \n-    enum __offset_flags_masks \n+    enum __offset_flags_masks\n       {\n \t__virtual_mask = 0x1,\n \t__public_mask = 0x2,\n \t__hwm_bit = 2,\n \t__offset_shift = 8          // Bits to shift offset.\n       };\n-  \n+\n     // Implementation defined member functions.\n-    bool \n+    bool\n     __is_virtual_p() const\n     { return __offset_flags & __virtual_mask; }\n \n-    bool \n+    bool\n     __is_public_p() const\n     { return __offset_flags & __public_mask; }\n \n-    ptrdiff_t \n+    ptrdiff_t\n     __offset() const\n-    { \n+    {\n       // This shift, being of a signed type, is implementation\n       // defined. GCC implements such shifts as arithmetic, which is\n       // what we want.\n@@ -382,10 +377,10 @@ namespace __cxxabiv1\n   class __class_type_info : public std::type_info\n   {\n   public:\n-    explicit \n+    explicit\n     __class_type_info (const char *__n) : type_info(__n) { }\n \n-    virtual \n+    virtual\n     ~__class_type_info ();\n \n     // Implementation defined types.\n@@ -396,24 +391,24 @@ namespace __cxxabiv1\n     enum __sub_kind\n       {\n \t// We have no idea.\n-\t__unknown = 0, \n+\t__unknown = 0,\n \n \t// Not contained within us (in some circumstances this might\n \t// mean not contained publicly)\n-\t__not_contained, \n+\t__not_contained,\n \n \t// Contained ambiguously.\n-\t__contained_ambig, \n-    \n+\t__contained_ambig,\n+\n \t// Via a virtual path.\n-\t__contained_virtual_mask = __base_class_type_info::__virtual_mask, \n+\t__contained_virtual_mask = __base_class_type_info::__virtual_mask,\n \n \t// Via a public path.\n-\t__contained_public_mask = __base_class_type_info::__public_mask,   \n+\t__contained_public_mask = __base_class_type_info::__public_mask,\n \n \t// Contained within us.\n \t__contained_mask = 1 << __base_class_type_info::__hwm_bit,\n-    \n+\n \t__contained_private = __contained_mask,\n \t__contained_public = __contained_mask | __contained_public_mask\n       };\n@@ -423,17 +418,17 @@ namespace __cxxabiv1\n \n   protected:\n     // Implementation defined member functions.\n-    virtual bool \n+    virtual bool\n     __do_upcast(const __class_type_info* __dst_type, void**__obj_ptr) const;\n \n-    virtual bool \n-    __do_catch(const type_info* __thr_type, void** __thr_obj, \n+    virtual bool\n+    __do_catch(const type_info* __thr_type, void** __thr_obj,\n \t       unsigned __outer) const;\n \n   public:\n-    // Helper for upcast. See if DST is us, or one of our bases. \n-    // Return false if not found, true if found. \n-    virtual bool \n+    // Helper for upcast. See if DST is us, or one of our bases.\n+    // Return false if not found, true if found.\n+    virtual bool\n     __do_upcast(const __class_type_info* __dst, const void* __obj,\n \t\t__upcast_result& __restrict __result) const;\n \n@@ -443,9 +438,9 @@ namespace __cxxabiv1\n     // objects might be contained within this type.  If SRC_PTR is one\n     // of our SRC_TYPE bases, indicate the virtuality. Returns\n     // not_contained for non containment or private containment.\n-    inline __sub_kind \n+    inline __sub_kind\n     __find_public_src(ptrdiff_t __src2dst, const void* __obj_ptr,\n-\t\t      const __class_type_info* __src_type, \n+\t\t      const __class_type_info* __src_type,\n \t\t      const void* __src_ptr) const;\n \n     // Helper for dynamic cast. ACCESS_PATH gives the access from the\n@@ -455,17 +450,17 @@ namespace __cxxabiv1\n     // started from and SRC_PTR points to that base within the most\n     // derived object. Fill in RESULT with what we find. Return true\n     // if we have located an ambiguous match.\n-    virtual bool \n+    virtual bool\n     __do_dyncast(ptrdiff_t __src2dst, __sub_kind __access_path,\n-\t\t const __class_type_info* __dst_type, const void* __obj_ptr, \n-\t\t const __class_type_info* __src_type, const void* __src_ptr, \n+\t\t const __class_type_info* __dst_type, const void* __obj_ptr,\n+\t\t const __class_type_info* __src_type, const void* __src_ptr,\n \t\t __dyncast_result& __result) const;\n-    \n+\n     // Helper for find_public_subobj. SRC2DST indicates how SRC_TYPE\n     // bases are inherited by the type started from -- which is not\n     // necessarily the current type. The current type will be a base\n     // of the destination type.  OBJ_PTR points to the current base.\n-    virtual __sub_kind \n+    virtual __sub_kind\n     __do_find_public_src(ptrdiff_t __src2dst, const void* __obj_ptr,\n \t\t\t const __class_type_info* __src_type,\n \t\t\t const void* __src_ptr) const;\n@@ -477,11 +472,11 @@ namespace __cxxabiv1\n   public:\n     const __class_type_info* __base_type;\n \n-    explicit \n+    explicit\n     __si_class_type_info(const char *__n, const __class_type_info *__base)\n     : __class_type_info(__n), __base_type(__base) { }\n \n-    virtual \n+    virtual\n     ~__si_class_type_info();\n \n   protected:\n@@ -491,24 +486,24 @@ namespace __cxxabiv1\n     operator=(const __si_class_type_info&);\n \n     // Implementation defined member functions.\n-    virtual bool \n+    virtual bool\n     __do_dyncast(ptrdiff_t __src2dst, __sub_kind __access_path,\n \t\t const __class_type_info* __dst_type, const void* __obj_ptr,\n \t\t const __class_type_info* __src_type, const void* __src_ptr,\n \t\t __dyncast_result& __result) const;\n \n-    virtual __sub_kind \n+    virtual __sub_kind\n     __do_find_public_src(ptrdiff_t __src2dst, const void* __obj_ptr,\n \t\t\t const __class_type_info* __src_type,\n \t\t\t const void* __sub_ptr) const;\n \n-    virtual bool \n+    virtual bool\n     __do_upcast(const __class_type_info*__dst, const void*__obj,\n \t\t__upcast_result& __restrict __result) const;\n   };\n \n   // Type information for a class with multiple and/or virtual bases.\n-  class __vmi_class_type_info : public __class_type_info \n+  class __vmi_class_type_info : public __class_type_info\n   {\n   public:\n     unsigned int \t\t__flags;  // Details about the class hierarchy.\n@@ -519,15 +514,15 @@ namespace __cxxabiv1\n     // internally generated by the compiler.\n     __base_class_type_info \t__base_info[1];  // Array of bases.\n \n-    explicit \n+    explicit\n     __vmi_class_type_info(const char* __n, int ___flags)\n     : __class_type_info(__n), __flags(___flags), __base_count(0) { }\n \n-    virtual \n+    virtual\n     ~__vmi_class_type_info();\n \n     // Implementation defined types.\n-    enum __flags_masks \n+    enum __flags_masks\n       {\n \t__non_diamond_repeat_mask = 0x1, // Distinct instance of repeated base.\n \t__diamond_shaped_mask = 0x2, // Diamond shaped multiple inheritance.\n@@ -536,18 +531,18 @@ namespace __cxxabiv1\n \n   protected:\n     // Implementation defined member functions.\n-    virtual bool \n+    virtual bool\n     __do_dyncast(ptrdiff_t __src2dst, __sub_kind __access_path,\n \t\t const __class_type_info* __dst_type, const void* __obj_ptr,\n \t\t const __class_type_info* __src_type, const void* __src_ptr,\n \t\t __dyncast_result& __result) const;\n \n-    virtual __sub_kind \n-    __do_find_public_src(ptrdiff_t __src2dst, const void* __obj_ptr, \n+    virtual __sub_kind\n+    __do_find_public_src(ptrdiff_t __src2dst, const void* __obj_ptr,\n \t\t\t const __class_type_info* __src_type,\n \t\t\t const void* __src_ptr) const;\n-    \n-    virtual bool \n+\n+    virtual bool\n     __do_upcast(const __class_type_info* __dst, const void* __obj,\n \t\t__upcast_result& __restrict __result) const;\n   };\n@@ -628,4 +623,4 @@ namespace __gnu_cxx\n \n #pragma GCC visibility pop\n \n-#endif // __CXXABI_H \n+#endif // __CXXABI_H"}, {"sha": "c45ce799d4773cb8a19a1b0d776b3fc1d45c91d9", "filename": "libstdc++-v3/libsupc++/cxxabi_forced.h", "status": "renamed", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi_forced.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi_forced.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi_forced.h?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,6 +1,6 @@\n-// cxxabi.h subset for inclusion by other library headers -*- C++ -*-\n+// cxxabi.h subset for cancellation -*- C++ -*-\n   \n-// Copyright (C) 2007, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of GCC.\n //\n@@ -23,8 +23,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file cxxabi-forced.h\n- *  The header provides an interface to the C++ ABI.\n+/** @file bits/cxxabi_forced.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{cxxabi.h}\n  */\n \n #ifndef _CXXABI_FORCED_H", "previous_filename": "libstdc++-v3/libsupc++/cxxabi-forced.h"}, {"sha": "c6abe3546477a250b2b079dcea2ce5e0dcb43131", "filename": "libstdc++-v3/libsupc++/eh_aux_runtime.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_aux_runtime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_aux_runtime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_aux_runtime.cc?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,5 +1,5 @@\n // -*- C++ -*- Common throw conditions.\n-// Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2009\n+// Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2009, 2011\n // Free Software Foundation\n //\n // This file is part of GCC.\n@@ -27,7 +27,7 @@\n #include \"exception\"\n #include <cstdlib>\n #include \"unwind-cxx.h\"\n-#include \"exception_defines.h\"\n+#include <bits/exception_defines.h>\n \n extern \"C\" void\n __cxxabiv1::__cxa_bad_cast ()"}, {"sha": "f519f35f02a929d29774297c116fae40be1aec7e", "filename": "libstdc++-v3/libsupc++/eh_call.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_call.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_call.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_call.cc?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,5 +1,6 @@\n // -*- C++ -*- Helpers for calling unextected and terminate\n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,\n+// 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of GCC.\n@@ -25,7 +26,7 @@\n \n #include <bits/c++config.h>\n #include <cstdlib>\n-#include <exception_defines.h>\n+#include <bits/exception_defines.h>\n #include \"unwind-cxx.h\"\n \n using namespace __cxxabiv1;"}, {"sha": "19c2044736bc374faf238fa53066bdb5b6c0de61", "filename": "libstdc++-v3/libsupc++/eh_personality.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,5 +1,6 @@\n // -*- C++ -*- The GNU C++ exception personality routine.\n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+// 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of GCC.\n@@ -25,7 +26,7 @@\n \n #include <bits/c++config.h>\n #include <cstdlib>\n-#include <exception_defines.h>\n+#include <bits/exception_defines.h>\n #include <cxxabi.h>\n #include \"unwind-cxx.h\"\n "}, {"sha": "94c28427d6d27e62a026c7c1cc7f7bd33ae96a51", "filename": "libstdc++-v3/libsupc++/eh_ptr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -29,7 +29,7 @@\n #define _GLIBCXX_EH_PTR_COMPAT\n \n #include <exception>\n-#include <exception_ptr.h>\n+#include <bits/exception_ptr.h>\n #include \"unwind-cxx.h\"\n \n using namespace __cxxabiv1;"}, {"sha": "87359d09fdd7dac4082bf52d2c35bfe3e27e15de", "filename": "libstdc++-v3/libsupc++/eh_terminate.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_terminate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_terminate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_terminate.cc?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,5 +1,6 @@\n // -*- C++ -*- std::terminate, std::unexpected and friends.\n-// Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2009\n+// Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2009,\n+// 2011\n // Free Software Foundation\n //\n // This file is part of GCC.\n@@ -27,7 +28,7 @@\n #include \"exception\"\n #include <cstdlib>\n #include \"unwind-cxx.h\"\n-#include \"exception_defines.h\"\n+#include <bits/exception_defines.h>\n \n using namespace __cxxabiv1;\n "}, {"sha": "7f779f93c74371494e6c1173815bb23511612351", "filename": "libstdc++-v3/libsupc++/exception", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,7 +1,7 @@\n // Exception Handling support header for -*- C++ -*-\n \n // Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,\n-// 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+// 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation\n //\n // This file is part of GCC.\n@@ -148,8 +148,8 @@ _GLIBCXX_END_NAMESPACE\n \n #if (defined(__GXX_EXPERIMENTAL_CXX0X__) \\\n      && defined(_GLIBCXX_ATOMIC_BUILTINS_4))\n-#include <exception_ptr.h>\n-#include <nested_exception.h>\n+#include <bits/exception_ptr.h>\n+#include <bits/nested_exception.h>\n #endif\n \n #endif"}, {"sha": "269937cff9dd7e8d16ad91b9c1c694ae0acfcf07", "filename": "libstdc++-v3/libsupc++/exception_defines.h", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_defines.h?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,6 +1,7 @@\n // -fno-exceptions Support -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2006, 2007, 2008, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2006, 2007, 2008, 2009,\n+// 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -23,12 +24,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-//\n-// ISO C++ 14882: 19.1  Exception classes\n-//\n-\n-/** @file exception_defines.h\n- *  This is a Standard C++ Library header.\n+/** @file bits/exception_defines.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{exception}\n  */\n \n #ifndef _EXCEPTION_DEFINES_H"}, {"sha": "ef826f6bad0be17695e71e05e5674b512616e725", "filename": "libstdc++-v3/libsupc++/exception_ptr.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,6 +1,6 @@\n // Exception Handling support header (exception_ptr class) for -*- C++ -*-\n \n-// Copyright (C) 2008, 2009, 2010 Free Software Foundation\n+// Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation\n //\n // This file is part of GCC.\n //\n@@ -23,7 +23,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file exception_ptr.h\n+/** @file bits/exception_ptr.h\n  *  This is an internal header file, included by other library headers.\n  *  Do not attempt to use it directly. @headername{exception}\n  */\n@@ -34,7 +34,7 @@\n #pragma GCC visibility push(default)\n \n #include <bits/c++config.h>\n-#include <exception_defines.h>\n+#include <bits/exception_defines.h>\n \n #if !defined(_GLIBCXX_ATOMIC_BUILTINS_4)\n #  error This platform does not support exception propagation."}, {"sha": "951f7bb115563454345356d7bfb39e36445361fd", "filename": "libstdc++-v3/libsupc++/hash_bytes.cc", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fhash_bytes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fhash_bytes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fhash_bytes.cc?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,6 +1,6 @@\n // Definition of _Hash_bytes. -*- C++ -*-\n \n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,7 +32,7 @@\n // function apears to be better in both speed and hash quality, and\n // FNV is provided primarily for backward compatibility.\n \n-#include <bits/c++config.h>\n+#include <bits/hash_bytes.h>\n \n namespace\n {\n@@ -63,8 +63,8 @@ namespace\n #endif\n }\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n #if __SIZEOF_SIZE_T__ == 4\n \n   // Implementation of Murmur hash for 32-bit size_t.\n@@ -97,7 +97,7 @@ namespace std\n \thash ^= static_cast<unsigned char>(buf[1]) << 8;\n       case 1:\n \thash ^= static_cast<unsigned char>(buf[0]);\n-        hash *= m;\n+\thash *= m;\n       };\n \n     // Do a few final mixes of the hash.\n@@ -182,4 +182,5 @@ namespace std\n   { return _Hash_bytes(ptr, len, seed); }\n \n #endif /* __SIZEOF_SIZE_T__ */\n-}\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "95db644ee25c609915493318ccec773e48cacaea", "filename": "libstdc++-v3/libsupc++/hash_bytes.h", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fhash_bytes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fhash_bytes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fhash_bytes.h?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -0,0 +1,56 @@\n+// Declarations for hash functions. -*- C++ -*-\n+\n+// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file bits/hash_bytes.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{functional}\n+ */\n+\n+#ifndef _HASH_BYTES_H\n+#define _HASH_BYTES_H 1\n+\n+#pragma GCC system_header\n+\n+#include <bits/c++config.h>\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  // Hash function implementation for the nontrivial specialization.\n+  // All of them are based on a primitive that hashes a pointer to a\n+  // byte array. The actual hash algorithm is not guaranteed to stay\n+  // the same from release to release -- it may be updated or tuned to\n+  // improve hash quality or speed.\n+  size_t\n+  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);\n+\n+  // A similar hash primitive, using the FNV hash algorithm. This\n+  // algorithm is guaranteed to stay the same from release to release.\n+  // (although it might not produce the same values on different\n+  // machines.)\n+  size_t\n+  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#endif"}, {"sha": "799bd1979d7d87666968a9e4c0a532a2cd84a695", "filename": "libstdc++-v3/libsupc++/nested_exception.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.h?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,6 +1,6 @@\n // Nested Exception support header (nested_exception class) for -*- C++ -*-\n \n-// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,7 +22,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file nested_exception.h\n+/** @file bits/nested_exception.h\n  *  This is an internal header file, included by other library headers.\n  *  Do not attempt to use it directly. @headername{exception}\n  */"}, {"sha": "c61e941bcff8b9a37c65c52a526b1dd5f2d394e2", "filename": "libstdc++-v3/libsupc++/new_op.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,6 +1,6 @@\n // Support routines for the -*- C++ -*- dynamic memory management.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004, 2009\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004, 2009, 2011\n // Free Software Foundation\n //\n // This file is part of GCC.\n@@ -26,7 +26,7 @@\n \n #include <bits/c++config.h>\n #include <cstdlib>\n-#include <exception_defines.h>\n+#include <bits/exception_defines.h>\n #include \"new\"\n \n using std::new_handler;"}, {"sha": "1bcdead5846e84b264c6da49964f34f322e86d8e", "filename": "libstdc++-v3/libsupc++/new_opnt.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opnt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opnt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opnt.cc?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,5 +1,5 @@\n // Support routines for the -*- C++ -*- dynamic memory management.\n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2004, 2009\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2004, 2009, 2011\n // Free Software Foundation\n //\n // This file is part of GCC.\n@@ -24,7 +24,7 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <bits/c++config.h>\n-#include <exception_defines.h>\n+#include <bits/exception_defines.h>\n #include \"new\"\n \n using std::new_handler;"}, {"sha": "69311d69e9a8bb114e41838480aa7c662f3db06e", "filename": "libstdc++-v3/libsupc++/typeinfo", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,6 +1,6 @@\n // RTTI support for -*- C++ -*-\n // Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n-// 2003, 2004, 2005, 2006, 2007, 2009, 2010\n+// 2003, 2004, 2005, 2006, 2007, 2009, 2010, 2011\n // Free Software Foundation\n //\n // This file is part of GCC.\n@@ -34,6 +34,10 @@\n #pragma GCC system_header\n \n #include <exception>\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#include <bits/hash_bytes.h>\n+#endif\n+\n \n #pragma GCC visibility push(default)\n \n@@ -78,11 +82,6 @@ namespace __cxxabiv1\n \n namespace std \n {\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-  size_t\n-  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);\n-#endif\n-\n   /**\n    *  @brief  Part of RTTI.\n    *"}, {"sha": "700c5ef431dc9fdb7f0e4aaa1017e2e5e89d83d6", "filename": "libstdc++-v3/libsupc++/vec.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,6 +1,7 @@\n // New abi Support -*- C++ -*-\n \n-// Copyright (C) 2000, 2001, 2003, 2004, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2003, 2004, 2009, 2011\n+// Free Software Foundation, Inc.\n //  \n // This file is part of GCC.\n //\n@@ -28,7 +29,7 @@\n #include <cxxabi.h>\n #include <new>\n #include <exception>\n-#include <exception_defines.h>\n+#include <bits/exception_defines.h>\n #include \"unwind-cxx.h\"\n \n namespace __cxxabiv1"}, {"sha": "008d57846efc1f7559d3ab5bd93e528180c96696", "filename": "libstdc++-v3/libsupc++/vterminate.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvterminate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvterminate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvterminate.cc?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -1,6 +1,6 @@\n // Verbose terminate_handler -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2004, 2005, 2009 Free Software Foundation\n+// Copyright (C) 2001, 2002, 2004, 2005, 2009, 2011 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,7 +27,7 @@\n #if _GLIBCXX_HOSTED\n #include <cstdlib>\n #include <exception>\n-#include <exception_defines.h>\n+#include <bits/exception_defines.h>\n #include <cxxabi.h>\n # include <cstdio>\n "}, {"sha": "b53dc40e5b429b8bb5a7fb66497f44709b63a27d", "filename": "libstdc++-v3/testsuite/ext/profile/mutex_extensions_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc?ref=7c3e9502c3c6de7eeb2a1e7a95a0f485a42e067f", "patch": "@@ -3,7 +3,7 @@\n \n // -*- C++ -*-\n \n-// Copyright (C) 2006, 2007, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2006, 2007, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,4 +22,4 @@\n \n #include <vector>\n \n-// { dg-error \"Cannot use -D_GLIBCXX_PROFILE with \" \"\" { target *-*-* } 223 }\n+// { dg-error \"Cannot use -D_GLIBCXX_PROFILE with \" \"\" { target *-*-* } 220 }"}]}