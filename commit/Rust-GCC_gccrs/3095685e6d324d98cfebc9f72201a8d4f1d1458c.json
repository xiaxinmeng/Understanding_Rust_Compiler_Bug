{"sha": "3095685e6d324d98cfebc9f72201a8d4f1d1458c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA5NTY4NWU2ZDMyNGQ5OGNmZWJjOWY3MjIwMWE4ZDRmMWQxNDU4Yw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-05-05T17:25:50Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-05-05T17:25:50Z"}, "message": "sse.md (*vec_extract<ssevecmodelower>_0): Merge from sse2_stored and *sse2_storeq_rex64 using SWI48 mode iterator.\n\n\t* config/i386/sse.md (*vec_extract<ssevecmodelower>_0): Merge\n\tfrom sse2_stored and *sse2_storeq_rex64 using SWI48 mode iterator.\n\tAdd m->r,x alternatives.\n\t(*vec_extract<ssevecmodelower>_0 splitters): Merge V2DI and V4SI\n\tsplitters using SWI48x mode iterator.\n\t(*vec_extract_v2di_0_sse): Rename from *sse2_storeq.  Disable for\n\tTARGET_64BIT.  Add m->x alternative.\n\t(*vec_extractv4si_mem): Rename from *vec_ext_v4si_mem.\n\tAdd o->x alternative.  Enable for TARGET_SSE.\n\t(sse_storeq): Remove expander.\n\t(*vec_extractv2di_1): Enable for TARGET_SSE. Split alternatives\n\twith memory input operand.\n\t(*vec_extractv2di_1 splitter): New.\n\t(*vec_extractv4sf_mem): Rename from *vec_extract_v4sf_mem.\n\t* config/i386/i386.md (ssevecmodelower): New mode attribute.\n\nFrom-SVN: r198611", "tree": {"sha": "373c74d513356314dff428aa39988fa672e71130", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/373c74d513356314dff428aa39988fa672e71130"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3095685e6d324d98cfebc9f72201a8d4f1d1458c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3095685e6d324d98cfebc9f72201a8d4f1d1458c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3095685e6d324d98cfebc9f72201a8d4f1d1458c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3095685e6d324d98cfebc9f72201a8d4f1d1458c/comments", "author": null, "committer": null, "parents": [{"sha": "f0470cc59fa29b3c0e1759d3098f52c6d3959587", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0470cc59fa29b3c0e1759d3098f52c6d3959587", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0470cc59fa29b3c0e1759d3098f52c6d3959587"}], "stats": {"total": 172, "additions": 88, "deletions": 84}, "files": [{"sha": "0166c901150bc6e7304740e63c36a5ca6c175102", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3095685e6d324d98cfebc9f72201a8d4f1d1458c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3095685e6d324d98cfebc9f72201a8d4f1d1458c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3095685e6d324d98cfebc9f72201a8d4f1d1458c", "patch": "@@ -1,3 +1,21 @@\n+2013-05-05  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (*vec_extract<ssevecmodelower>_0): Merge\n+\tfrom sse2_stored and *sse2_storeq_rex64 using SWI48 mode iterator.\n+\tAdd m->r,x alternatives.\n+\t(*vec_extract<ssevecmodelower>_0 splitters): Merge V2DI and V4SI\n+\tsplitters using SWI48x mode iterator.\n+\t(*vec_extract_v2di_0_sse): Rename from *sse2_storeq.  Disable for\n+\tTARGET_64BIT.  Add m->x alternative.\n+\t(*vec_extractv4si_mem): Rename from *vec_ext_v4si_mem.\n+\tAdd o->x alternative.  Enable for TARGET_SSE.\n+\t(sse_storeq): Remove expander.\n+\t(*vec_extractv2di_1): Enable for TARGET_SSE. Split alternatives\n+\twith memory input operand.\n+\t(*vec_extractv2di_1 splitter): New.\n+\t(*vec_extractv4sf_mem): Rename from *vec_extract_v4sf_mem.\n+\t* config/i386/i386.md (ssevecmodelower): New mode attribute.\n+\n 2013-05-04  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.c (INT_P): Reformat.  Delete obsolete comment.\n@@ -14,8 +32,7 @@\n \tlogical_const_operand): Delete \"CONST_DOUBLE\" case.\n \t* config/rs6000/rs6000.c (num_insns_constant_wide): Delete\n \t\"HOST_BITS_PER_WIDE_INT == 64\" test.\n-\t(num_insns_constant): Ditto.  Delete CONST_DOUBLE DImode/VOIDmode\n-\tcase.\n+\t(num_insns_constant): Ditto.  Delete CONST_DOUBLE DImode/VOIDmode case.\n \t(build_mask64_2_operands): Delete \"HOST_BITS_PER_WIDE_INT >= 64\" test.\n \t(rs6000_emit_set_const): Delete CONST_DOUBLE case.\n \t(rs6000_emit_set_long_const): Delete \"HOST_BITS_PER_WIDE_INT >= 64\"\n@@ -62,8 +79,8 @@\n 2013-05-03  Guozhi Wei  <carrot@google.com>\n \n \t* coverage.c (coverage_obj_init): Move the construction of gcov\n-\tconstructor to\n-\t(build_init_ctor): here.\n+\tconstructor to ...\n+\t(build_init_ctor): ... here.\n \n 2013-05-03  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n@@ -127,9 +144,8 @@\n 2013-05-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/57130\n-\t* combine.c (make_compound_operation) <case SUBREG>: Pass\n-\tSET instead of COMPARE as in_code to the recursive call\n-\tif needed.\n+\t* combine.c (make_compound_operation) <case SUBREG>: Pass SET instead\n+\tof COMPARE as in_code to the recursive call if needed.\n \n 2013-05-03  Uros Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "ee31319ff7b4e6d8e4960e18bf1221174fdaf17f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3095685e6d324d98cfebc9f72201a8d4f1d1458c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3095685e6d324d98cfebc9f72201a8d4f1d1458c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3095685e6d324d98cfebc9f72201a8d4f1d1458c", "patch": "@@ -929,6 +929,8 @@\n ;; SSE vector mode corresponding to a scalar mode\n (define_mode_attr ssevecmode\n   [(QI \"V16QI\") (HI \"V8HI\") (SI \"V4SI\") (DI \"V2DI\") (SF \"V4SF\") (DF \"V2DF\")])\n+(define_mode_attr ssevecmodelower\n+  [(QI \"v16qi\") (HI \"v8hi\") (SI \"v4si\") (DI \"v2di\") (SF \"v4sf\") (DF \"v2df\")])\n \n ;; Instruction suffix for REX 64bit operators.\n (define_mode_attr rex64suffix [(SI \"\") (DI \"{q}\")])"}, {"sha": "c1d03040eef354dd0f08f87e03e408e605906566", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 63, "deletions": 77, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3095685e6d324d98cfebc9f72201a8d4f1d1458c/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3095685e6d324d98cfebc9f72201a8d4f1d1458c/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=3095685e6d324d98cfebc9f72201a8d4f1d1458c", "patch": "@@ -4347,11 +4347,11 @@\n    (set_attr \"prefix\" \"maybe_vex,*,*\")\n    (set_attr \"mode\" \"V4SF,*,*\")])\n \n-(define_insn_and_split \"*vec_extract_v4sf_mem\"\n+(define_insn_and_split \"*vec_extractv4sf_mem\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=x,*r,f\")\n-       (vec_select:SF\n-\t (match_operand:V4SF 1 \"memory_operand\" \"o,o,o\")\n-\t (parallel [(match_operand 2 \"const_0_to_3_operand\" \"n,n,n\")])))]\n+\t(vec_select:SF\n+\t  (match_operand:V4SF 1 \"memory_operand\" \"o,o,o\")\n+\t  (parallel [(match_operand 2 \"const_0_to_3_operand\" \"n,n,n\")])))]\n   \"TARGET_SSE\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -7014,7 +7014,7 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-;; It must come before *vec_extractv2di_1_rex64 since it is preferred.\n+;; It must come before *vec_extractv2di_1 since it is preferred.\n (define_insn \"*sse4_1_pextrq\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(vec_select:DI\n@@ -7357,98 +7357,84 @@\n    (set_attr \"prefix\" \"maybe_vex,maybe_vex,orig,orig,vex\")\n    (set_attr \"mode\" \"TI,TI,V4SF,SF,SF\")])\n \n-(define_insn_and_split \"sse2_stored\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=xm,r\")\n-\t(vec_select:SI\n-\t  (match_operand:V4SI 1 \"register_operand\" \"x,Yj\")\n-\t  (parallel [(const_int 0)])))]\n-  \"TARGET_SSE\"\n-  \"#\"\n-  \"&& reload_completed\n-   && (TARGET_INTER_UNIT_MOVES_FROM_VEC\n-       || MEM_P (operands [0])\n-       || !GENERAL_REGNO_P (true_regnum (operands [0])))\"\n-  [(set (match_dup 0) (match_dup 1))]\n-  \"operands[1] = gen_rtx_REG (SImode, REGNO (operands[1]));\")\n-\n-(define_insn_and_split \"*vec_ext_v4si_mem\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(vec_select:SI\n-\t  (match_operand:V4SI 1 \"memory_operand\" \"o\")\n-\t  (parallel [(match_operand 2 \"const_0_to_3_operand\")])))]\n-  \"\"\n-  \"#\"\n-  \"reload_completed\"\n-  [(const_int 0)]\n-{\n-  int i = INTVAL (operands[2]);\n-\n-  emit_move_insn (operands[0], adjust_address (operands[1], SImode, i*4));\n-  DONE;\n-})\n-\n-(define_expand \"sse_storeq\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\")\n-\t(vec_select:DI\n-\t  (match_operand:V2DI 1 \"register_operand\")\n+(define_insn \"*vec_extract<ssevecmodelower>_0\"\n+  [(set (match_operand:SWI48 0 \"nonimmediate_operand\"\t       \"=x,m,r ,r\")\n+\t(vec_select:SWI48\n+\t  (match_operand:<ssevecmode> 1 \"nonimmediate_operand\" \"xm,x,Yj,m\")\n \t  (parallel [(const_int 0)])))]\n-  \"TARGET_SSE\")\n+  \"TARGET_SSE && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"#\")\n \n-(define_insn \"*sse2_storeq_rex64\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=xm,*r,r\")\n+(define_insn \"*vec_extractv2di_0_sse\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\"     \"=x,m\")\n \t(vec_select:DI\n-\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \"x,Yj,o\")\n+\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \"xm,x\")\n \t  (parallel [(const_int 0)])))]\n-  \"TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n-  \"@\n-   #\n-   #\n-   mov{q}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"*,*,imov\")\n-   (set_attr \"mode\" \"*,*,DI\")])\n+  \"TARGET_SSE && !TARGET_64BIT\n+   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"#\")\n \n-(define_insn \"*sse2_storeq\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=xm\")\n-\t(vec_select:DI\n-\t  (match_operand:V2DI 1 \"register_operand\" \"x\")\n+(define_split\n+  [(set (match_operand:SWI48x 0 \"register_operand\")\n+\t(vec_select:SWI48x\n+\t  (match_operand:<ssevecmode> 1 \"memory_operand\")\n \t  (parallel [(const_int 0)])))]\n-  \"TARGET_SSE\"\n-  \"#\")\n+  \"TARGET_SSE && reload_completed\"\n+  [(set (match_dup 0) (match_dup 1))]\n+  \"operands[1] = adjust_address (operands[1], <MODE>mode, 0);\")\n \n (define_split\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\")\n-\t(vec_select:DI\n-\t  (match_operand:V2DI 1 \"register_operand\")\n+  [(set (match_operand:SWI48x 0 \"nonimmediate_operand\")\n+\t(vec_select:SWI48x\n+\t  (match_operand:<ssevecmode> 1 \"register_operand\")\n \t  (parallel [(const_int 0)])))]\n-  \"TARGET_SSE\n-   && reload_completed\n+  \"TARGET_SSE && reload_completed\n    && (TARGET_INTER_UNIT_MOVES_FROM_VEC\n-       || MEM_P (operands [0])\n-       || !GENERAL_REGNO_P (true_regnum (operands [0])))\"\n+       || !GENERAL_REG_P (operands [0]))\"\n   [(set (match_dup 0) (match_dup 1))]\n-  \"operands[1] = gen_rtx_REG (DImode, REGNO (operands[1]));\")\n+  \"operands[1] = gen_rtx_REG (<MODE>mode, REGNO (operands[1]));\")\n+\n+(define_insn_and_split \"*vec_extractv4si_mem\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=x,r\")\n+\t(vec_select:SI\n+\t  (match_operand:V4SI 1 \"memory_operand\" \"o,o\")\n+\t  (parallel [(match_operand 2 \"const_0_to_3_operand\")])))]\n+  \"TARGET_SSE\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (match_dup 1))]\n+{\n+  operands[1] = adjust_address (operands[1], SImode, INTVAL (operands[2]) * 4);\n+})\n \n (define_insn \"*vec_extractv2di_1\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\"     \"=m,x,x,x,x,x,r\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\"     \"=m,x,x,x,x,r\")\n \t(vec_select:DI\n-\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \" x,0,x,o,x,o,o\")\n+\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \" x,0,x,x,o,o\")\n \t  (parallel [(const_int 1)])))]\n-  \"(TARGET_64BIT || TARGET_SSE)\n-   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"TARGET_SSE && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n    %vmovhps\\t{%1, %0|%0, %1}\n    psrldq\\t{$8, %0|%0, 8}\n    vpsrldq\\t{$8, %1, %0|%0, %1, 8}\n-   %vmovq\\t{%H1, %0|%0, %H1}\n    movhlps\\t{%1, %0|%0, %1}\n-   movlps\\t{%H1, %0|%0, %H1}\n-   mov{q}\\t{%H1, %0|%0, %H1}\"\n-  [(set_attr \"isa\" \"*,sse2_noavx,avx,sse2,noavx,noavx,x64\")\n-   (set_attr \"type\" \"ssemov,sseishft1,sseishft1,ssemov,ssemov,ssemov,imov\")\n-   (set_attr \"length_immediate\" \"*,1,1,*,*,*,*\")\n-   (set_attr \"memory\" \"*,none,none,*,*,*,*\")\n-   (set_attr \"prefix\" \"maybe_vex,orig,vex,maybe_vex,orig,orig,orig\")\n-   (set_attr \"mode\" \"V2SF,TI,TI,TI,V4SF,V2SF,DI\")])\n+   #\n+   #\"\n+  [(set_attr \"isa\" \"*,sse2_noavx,avx,noavx,*,x64\")\n+   (set_attr \"type\" \"ssemov,sseishft1,sseishft1,ssemov,ssemov,imov\")\n+   (set_attr \"length_immediate\" \"*,1,1,*,*,*\")\n+   (set_attr \"memory\" \"*,none,none,*,*,*\")\n+   (set_attr \"prefix\" \"maybe_vex,orig,vex,orig,*,*\")\n+   (set_attr \"mode\" \"V2SF,TI,TI,V4SF,DI,DI\")])\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(vec_select:DI\n+\t  (match_operand:V2DI 1 \"memory_operand\")\n+\t  (parallel [(const_int 1)])))]\n+  \"TARGET_SSE && reload_completed\"\n+  [(set (match_dup 0) (match_dup 1))]\n+  \"operands[1] = adjust_address (operands[1], DImode, 8);\")\n \n (define_insn \"*vec_dupv4si\"\n   [(set (match_operand:V4SI 0 \"register_operand\"     \"=x,x,x\")"}]}