{"sha": "045fcc24c9ae0b3b2d0dee88f9b07327dae90f6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ1ZmNjMjRjOWFlMGIzYjJkMGRlZTg4ZjliMDczMjdkYWU5MGY2Yw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2007-12-24T15:08:16Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2007-12-24T15:08:16Z"}, "message": "default_weaktoshared.cc: Use static_cast not reinterpret_cast.\n\n2007-12-24  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* testsuite/tr1/2_general_utilities/shared_ptr/thread/\n\tdefault_weaktoshared.cc: Use static_cast not reinterpret_cast.\n\t* testsuite/tr1/2_general_utilities/shared_ptr/thread/\n\tmutex_weaktoshared.cc: Likewise.\n\nFrom-SVN: r131158", "tree": {"sha": "4334f35a849798350f0689fabb1968437bdb26fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4334f35a849798350f0689fabb1968437bdb26fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/045fcc24c9ae0b3b2d0dee88f9b07327dae90f6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/045fcc24c9ae0b3b2d0dee88f9b07327dae90f6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/045fcc24c9ae0b3b2d0dee88f9b07327dae90f6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/045fcc24c9ae0b3b2d0dee88f9b07327dae90f6c/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "861d6c431f15b7371273779e54a9b39ea312b41f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/861d6c431f15b7371273779e54a9b39ea312b41f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/861d6c431f15b7371273779e54a9b39ea312b41f"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "4a342a10045002bc704fc83638358d8b826bfb02", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/045fcc24c9ae0b3b2d0dee88f9b07327dae90f6c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/045fcc24c9ae0b3b2d0dee88f9b07327dae90f6c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=045fcc24c9ae0b3b2d0dee88f9b07327dae90f6c", "patch": "@@ -1,3 +1,10 @@\n+2007-12-24  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* testsuite/tr1/2_general_utilities/shared_ptr/thread/\n+\tdefault_weaktoshared.cc: Use static_cast not reinterpret_cast.\n+\t* testsuite/tr1/2_general_utilities/shared_ptr/thread/\n+\tmutex_weaktoshared.cc: Likewise.\n+\n 2007-12-24  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1_impl/hashtable_policy.h (_Prime_rehash_policy::"}, {"sha": "3c681fd87b466790c392a589c85976f3b3f57348", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/shared_ptr/thread/default_weaktoshared.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/045fcc24c9ae0b3b2d0dee88f9b07327dae90f6c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fthread%2Fdefault_weaktoshared.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/045fcc24c9ae0b3b2d0dee88f9b07327dae90f6c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fthread%2Fdefault_weaktoshared.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fthread%2Fdefault_weaktoshared.cc?ref=045fcc24c9ae0b3b2d0dee88f9b07327dae90f6c", "patch": "@@ -82,7 +82,7 @@ struct shared_and_weak_pools\n \n void* thread_hammer_and_kill(void* opaque_pools)\n {\n-  shared_and_weak_pools& pools = *reinterpret_cast<shared_and_weak_pools*>(opaque_pools);\n+  shared_and_weak_pools& pools = *static_cast<shared_and_weak_pools*>(opaque_pools);\n   // Using the same parameters as in the RNG test cases.\n   std::tr1::mersenne_twister<\n     unsigned long, 32, 624, 397, 31,\n@@ -117,7 +117,7 @@ void* thread_hammer_and_kill(void* opaque_pools)\n \n void* thread_hammer(void* opaque_weak)\n {\n-  wp_vector_t& weak_pool = *reinterpret_cast<wp_vector_t*>(opaque_weak);\n+  wp_vector_t& weak_pool = *static_cast<wp_vector_t*>(opaque_weak);\n   // Using the same parameters as in the RNG test cases.\n   std::tr1::mersenne_twister<\n     unsigned long, 32, 624, 397, 31,\n@@ -165,11 +165,11 @@ test01()\n   pthread_attr_init(&tattr);\n \n   shared_and_weak_pools pools(obj_pool, weak_pool[0]);\n-  pthread_create(threads, &tattr, thread_hammer_and_kill, reinterpret_cast<void*>(&pools));\n+  pthread_create(threads, &tattr, thread_hammer_and_kill, static_cast<void*>(&pools));\n   for (unsigned int worker = 1; worker < HAMMER_MAX_THREADS; worker++)\n     {\n       if (pthread_create(&threads[worker], &tattr,\n-\t\t\t thread_hammer, reinterpret_cast<void*>(&weak_pool[worker])))\n+\t\t\t thread_hammer, static_cast<void*>(&weak_pool[worker])))\n \tstd::abort();\n     }\n   // Wait for threads to complete, then check integrity of reference."}, {"sha": "433189e061489589f81d9b04e6aa455d221876ae", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/shared_ptr/thread/mutex_weaktoshared.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/045fcc24c9ae0b3b2d0dee88f9b07327dae90f6c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fthread%2Fmutex_weaktoshared.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/045fcc24c9ae0b3b2d0dee88f9b07327dae90f6c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fthread%2Fmutex_weaktoshared.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fthread%2Fmutex_weaktoshared.cc?ref=045fcc24c9ae0b3b2d0dee88f9b07327dae90f6c", "patch": "@@ -84,7 +84,7 @@ struct shared_and_weak_pools\n \n void* thread_hammer_and_kill(void* opaque_pools)\n {\n-  shared_and_weak_pools& pools = *reinterpret_cast<shared_and_weak_pools*>(opaque_pools);\n+  shared_and_weak_pools& pools = *static_cast<shared_and_weak_pools*>(opaque_pools);\n   // Using the same parameters as in the RNG test cases.\n   std::tr1::mersenne_twister<\n     unsigned long, 32, 624, 397, 31,\n@@ -119,7 +119,7 @@ void* thread_hammer_and_kill(void* opaque_pools)\n \n void* thread_hammer(void* opaque_weak)\n {\n-  wp_vector_t& weak_pool = *reinterpret_cast<wp_vector_t*>(opaque_weak);\n+  wp_vector_t& weak_pool = *static_cast<wp_vector_t*>(opaque_weak);\n   // Using the same parameters as in the RNG test cases.\n   std::tr1::mersenne_twister<\n     unsigned long, 32, 624, 397, 31,\n@@ -167,11 +167,11 @@ test01()\n   pthread_attr_init(&tattr);\n \n   shared_and_weak_pools pools(obj_pool, weak_pool[0]);\n-  pthread_create(threads, &tattr, thread_hammer_and_kill, reinterpret_cast<void*>(&pools));\n+  pthread_create(threads, &tattr, thread_hammer_and_kill, static_cast<void*>(&pools));\n   for (unsigned int worker = 1; worker < HAMMER_MAX_THREADS; worker++)\n     {\n       if (pthread_create(&threads[worker], &tattr,\n-\t\t\t thread_hammer, reinterpret_cast<void*>(&weak_pool[worker])))\n+\t\t\t thread_hammer, static_cast<void*>(&weak_pool[worker])))\n \tstd::abort();\n     }\n   // Wait for threads to complete, then check integrity of reference."}]}