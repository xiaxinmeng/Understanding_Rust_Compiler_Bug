{"sha": "eb8dffe0fbff242efc573fba9eff7a1da7eb893f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI4ZGZmZTBmYmZmMjQyZWZjNTczZmJhOWVmZjdhMWRhN2ViODkzZg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-02-25T22:27:54Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-02-25T22:27:54Z"}, "message": "re PR middle-end/23673 (fold does not fold (a^b) != 0 to a != b)\n\n\n\tPR middle-end/23673\n\t* fold-const.c (fold_binary) <EQ_EXPR>:  Fold (X^Y) == 0 as X == Y\n\tand (X^Y) != 0 as X != Y.  Fold (X^Y) == Y as X == 0, and some\n\tsymmetry related transformations.  Fold (X^C1) == C2 as\n\tX == (C1^C2).\n\n\t* gcc.dg/fold-eqxor-1.c: New test case.\n\t* gcc.dg/fold-eqxor-2.c: Likewise.\n\t* gcc.dg/fold-eqxor-3.c: Likewise.\n\nFrom-SVN: r111442", "tree": {"sha": "33a222942c6e3c0053613f0b378d977c6e36e141", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33a222942c6e3c0053613f0b378d977c6e36e141"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb8dffe0fbff242efc573fba9eff7a1da7eb893f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb8dffe0fbff242efc573fba9eff7a1da7eb893f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb8dffe0fbff242efc573fba9eff7a1da7eb893f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb8dffe0fbff242efc573fba9eff7a1da7eb893f/comments", "author": null, "committer": null, "parents": [{"sha": "d349482e965a1f68edcc6cbac12aa52c5cc95196", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d349482e965a1f68edcc6cbac12aa52c5cc95196", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d349482e965a1f68edcc6cbac12aa52c5cc95196"}], "stats": {"total": 125, "additions": 125, "deletions": 0}, "files": [{"sha": "b2abdcedf5fb34fbd9b9d423c19b496f7ec50372", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb8dffe0fbff242efc573fba9eff7a1da7eb893f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb8dffe0fbff242efc573fba9eff7a1da7eb893f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb8dffe0fbff242efc573fba9eff7a1da7eb893f", "patch": "@@ -1,3 +1,11 @@\n+2006-02-25  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/23673\n+\t* fold-const.c (fold_binary) <EQ_EXPR>:  Fold (X^Y) == 0 as X == Y\n+\tand (X^Y) != 0 as X != Y.  Fold (X^Y) == Y as X == 0, and some\n+\tsymmetry related transformations.  Fold (X^C1) == C2 as\n+\tX == (C1^C2).\n+\n 2006-02-25  Juergen Weigert  <jw@suse.de>\n \tRichard Guenther  <rguenther@suse.de>\n "}, {"sha": "3c3852bc158230f12e648b1b3dfb3946954a06b1", "filename": "gcc/fold-const.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb8dffe0fbff242efc573fba9eff7a1da7eb893f/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb8dffe0fbff242efc573fba9eff7a1da7eb893f/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=eb8dffe0fbff242efc573fba9eff7a1da7eb893f", "patch": "@@ -9767,6 +9767,32 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t    }\n \t}\n \n+      /* (X ^ Y) == 0 becomes X == Y, and (X ^ Y) != 0 becomes X != Y.  */\n+      if (integer_zerop (arg1)\n+\t  && TREE_CODE (arg0) == BIT_XOR_EXPR)\n+\treturn fold_build2 (code, type, TREE_OPERAND (arg0, 0),\n+\t\t\t    TREE_OPERAND (arg0, 1));\n+\n+      /* (X ^ Y) == Y becomes X == 0.  We know that Y has no side-effects.  */\n+      if (TREE_CODE (arg0) == BIT_XOR_EXPR\n+\t  && operand_equal_p (TREE_OPERAND (arg0, 1), arg1, 0))\n+\treturn fold_build2 (code, type, TREE_OPERAND (arg0, 0),\n+\t\t\t    build_int_cst (TREE_TYPE (arg1), 0));\n+      /* Likewise (X ^ Y) == X becomes Y == 0.  X has no side-effects.  */\n+      if (TREE_CODE (arg0) == BIT_XOR_EXPR\n+\t  && operand_equal_p (TREE_OPERAND (arg0, 0), arg1, 0)\n+\t  && reorder_operands_p (TREE_OPERAND (arg0, 1), arg1))\n+\treturn fold_build2 (code, type, TREE_OPERAND (arg0, 1),\n+\t\t\t    build_int_cst (TREE_TYPE (arg1), 0));\n+\n+      /* (X ^ C1) op C2 can be rewritten as X op (C1 ^ C2).  */\n+      if (TREE_CODE (arg0) == BIT_XOR_EXPR\n+\t  && TREE_CODE (arg1) == INTEGER_CST\n+\t  && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST)\n+\treturn fold_build2 (code, type, TREE_OPERAND (arg0, 0),\n+\t\t\t    fold_build2 (BIT_XOR_EXPR, TREE_TYPE (arg1),\n+\t\t\t\t\t TREE_OPERAND (arg0, 1), arg1));\n+\n       if (integer_zerop (arg1)\n \t  && tree_expr_nonzero_p (arg0))\n         {"}, {"sha": "9656f4ee3ffafcb2456b4f6063696b0cc4b1e4f8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb8dffe0fbff242efc573fba9eff7a1da7eb893f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb8dffe0fbff242efc573fba9eff7a1da7eb893f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eb8dffe0fbff242efc573fba9eff7a1da7eb893f", "patch": "@@ -1,3 +1,10 @@\n+2006-02-25  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/23673\n+\t* gcc.dg/fold-eqxor-1.c: New test case.\n+\t* gcc.dg/fold-eqxor-2.c: Likewise.\n+\t* gcc.dg/fold-eqxor-3.c: Likewise.\n+\n 2006-02-25  Thomas Koenig  <Thomas.Koenig@online.de>\n \n \tPR fortran/23092"}, {"sha": "d220e42bbfad8b1cd5721be2765590a128ecf084", "filename": "gcc/testsuite/gcc.dg/fold-eqxor-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb8dffe0fbff242efc573fba9eff7a1da7eb893f/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-eqxor-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb8dffe0fbff242efc573fba9eff7a1da7eb893f/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-eqxor-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-eqxor-1.c?ref=eb8dffe0fbff242efc573fba9eff7a1da7eb893f", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-original\" } */\n+\n+int test1(int a, int b)\n+{\n+  return (a ^ b) == 0;\n+}\n+\n+int test2(int c, int d)\n+{\n+  return (c ^ d) != 0;\n+}\n+\n+unsigned int test3(unsigned int e, unsigned int f)\n+{\n+  return (e ^ f) == 0;\n+}\n+\n+unsigned int test4(unsigned int g, unsigned int h)\n+{\n+  return (g ^ h) != 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"a == b\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"c != d\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"e == f\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"g != h\" 1 \"original\" } } */\n+/* { dg-final { cleanup-tree-dump \"original\" } } */"}, {"sha": "ee5ec9fa5aede63b851b2f3013c75b678bebd008", "filename": "gcc/testsuite/gcc.dg/fold-eqxor-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb8dffe0fbff242efc573fba9eff7a1da7eb893f/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-eqxor-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb8dffe0fbff242efc573fba9eff7a1da7eb893f/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-eqxor-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-eqxor-2.c?ref=eb8dffe0fbff242efc573fba9eff7a1da7eb893f", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-original\" } */\n+\n+int test1(int a, int b)\n+{\n+  return (a ^ b) == a;\n+}\n+\n+int test2(int c, int d)\n+{\n+  return (c ^ d) != c;\n+}\n+\n+int test3(int e, int f)\n+{\n+  return (e ^ f) == f;\n+}\n+\n+int test4(int g, int h)\n+{\n+  return (g ^ h) != h;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"b == 0\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"d != 0\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"e == 0\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"g != 0\" 1 \"original\" } } */\n+/* { dg-final { cleanup-tree-dump \"original\" } } */"}, {"sha": "a087375aee932cdbebe7be5f352f62720a6dc045", "filename": "gcc/testsuite/gcc.dg/fold-eqxor-3.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb8dffe0fbff242efc573fba9eff7a1da7eb893f/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-eqxor-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb8dffe0fbff242efc573fba9eff7a1da7eb893f/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-eqxor-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-eqxor-3.c?ref=eb8dffe0fbff242efc573fba9eff7a1da7eb893f", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-original\" } */\n+\n+int test1(int a, int b)\n+{\n+  return (a ^ 2) == 2;\n+}\n+\n+int test2(int c, int d)\n+{\n+  return (c ^ 4) != 4;\n+}\n+\n+int test3(int e, int f)\n+{\n+  return (e ^ 2) == 6;\n+}\n+\n+int test4(int g, int h)\n+{\n+  return (g ^ 6) != 4;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"a == 0\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"c != 0\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"e == 4\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"g != 2\" 1 \"original\" } } */\n+/* { dg-final { cleanup-tree-dump \"original\" } } */"}]}