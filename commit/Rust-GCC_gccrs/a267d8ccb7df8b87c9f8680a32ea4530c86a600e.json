{"sha": "a267d8ccb7df8b87c9f8680a32ea4530c86a600e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI2N2Q4Y2NiN2RmOGI4N2M5Zjg2ODBhMzJlYTQ1MzBjODZhNjAwZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T12:56:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T12:56:34Z"}, "message": "[multiple changes]\n\n2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch6.adb, sem_ch13.adb, sem_ch6.adb: Minor reformatting.\n\n2017-04-25  Bob Duff  <duff@adacore.com>\n\n\t* sem_res.adb (Resolve_Actuals): Under -gnatd.q, reset\n\tIs_True_Constant for an array variable that is passed to a\n\tforeign function as an 'in' parameter.\n\t* debug.adb: Document -gnatd.q.\n\nFrom-SVN: r247218", "tree": {"sha": "740cce6ad93536544617996dd0b2b928b1dab54c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/740cce6ad93536544617996dd0b2b928b1dab54c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a267d8ccb7df8b87c9f8680a32ea4530c86a600e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a267d8ccb7df8b87c9f8680a32ea4530c86a600e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a267d8ccb7df8b87c9f8680a32ea4530c86a600e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a267d8ccb7df8b87c9f8680a32ea4530c86a600e/comments", "author": null, "committer": null, "parents": [{"sha": "241f328c235be95a49c25681af0ccd34985560e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/241f328c235be95a49c25681af0ccd34985560e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/241f328c235be95a49c25681af0ccd34985560e1"}], "stats": {"total": 76, "additions": 52, "deletions": 24}, "files": [{"sha": "28499f6c856857ddcd94755144f2300640a54982", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a267d8ccb7df8b87c9f8680a32ea4530c86a600e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a267d8ccb7df8b87c9f8680a32ea4530c86a600e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a267d8ccb7df8b87c9f8680a32ea4530c86a600e", "patch": "@@ -1,3 +1,14 @@\n+2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch6.adb, sem_ch13.adb, sem_ch6.adb: Minor reformatting.\n+\n+2017-04-25  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Actuals): Under -gnatd.q, reset\n+\tIs_True_Constant for an array variable that is passed to a\n+\tforeign function as an 'in' parameter.\n+\t* debug.adb: Document -gnatd.q.\n+\n 2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch6.adb (Analyze_Expression_Function): If expression function"}, {"sha": "d855fa8b5e40c6a6794822fdef1d6fb6026c1b33", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a267d8ccb7df8b87c9f8680a32ea4530c86a600e/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a267d8ccb7df8b87c9f8680a32ea4530c86a600e/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=a267d8ccb7df8b87c9f8680a32ea4530c86a600e", "patch": "@@ -107,7 +107,7 @@ package body Debug is\n    --  d.n  Print source file names\n    --  d.o  Conservative elaboration order for indirect calls\n    --  d.p  Use original Ada 95 semantics for Bit_Order (disable AI95-0133)\n-   --  d.q\n+   --  d.q  Suppress optimizations on imported 'in'\n    --  d.r  Enable OK_To_Reorder_Components in non-variant records\n    --  d.s\n    --  d.t  Disable static allocation of library level dispatch tables\n@@ -562,6 +562,13 @@ package body Debug is\n    --       interpretation of component clauses crossing byte boundaries when\n    --       using the non-default bit order (i.e. ignore AI95-0133).\n \n+   --  d.q  If an array variable or constant is not modified in Ada code, and\n+   --       is passed to an 'in' parameter of a foreign-convention subprogram,\n+   --       and that subprogram modifies the array, the Ada compiler normally\n+   --       assumes that the array is not modified. This option suppresses such\n+   --       optimizations. This option should not be used; the correct solution\n+   --       is to declare the parameter 'in out'.\n+\n    --  d.r  Forces the flag OK_To_Reorder_Components to be set in all record\n    --       base types that have no discriminants.\n \n@@ -826,8 +833,8 @@ package body Debug is\n    --      prefer specs with no bodies to specs with bodies, and between two\n    --      specs with bodies, prefers the one whose body is closer to being\n    --      able to be elaborated. This is a clear improvement, but we provide\n-   --      this debug flag in case of regressions. Note: -do is even older than\n-   --      -dp.\n+   --      this debug flag in case of regressions. Note: -gnatdo is even older\n+   --      than -gnatdp.\n \n    --  dp  Use old elaboration order preference. The new preference rules\n    --      elaborate all units within a strongly connected component together,"}, {"sha": "d8443acc72e2c549896a8e055841edf046742dba", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a267d8ccb7df8b87c9f8680a32ea4530c86a600e/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a267d8ccb7df8b87c9f8680a32ea4530c86a600e/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=a267d8ccb7df8b87c9f8680a32ea4530c86a600e", "patch": "@@ -409,13 +409,13 @@ package body Exp_Ch6 is\n             Desig_Typ := Directly_Designated_Type (Ptr_Typ);\n \n             --  Check for a library-level access type whose designated type has\n-            --  supressed finalization. Such an access types lack a master.\n-            --  Pass a null actual to the callee in order to signal a missing\n-            --  master.\n+            --  suppressed finalization or the access type is subject to pragma\n+            --  No_Heap_Finalization. Such an access type lacks a master. Pass\n+            --  a null actual to callee in order to signal a missing master.\n \n             if Is_Library_Level_Entity (Ptr_Typ)\n               and then (Finalize_Storage_Only (Desig_Typ)\n-                          or else No_Heap_Finalization (Ptr_Typ))\n+                         or else No_Heap_Finalization (Ptr_Typ))\n             then\n                Actual := Make_Null (Loc);\n "}, {"sha": "add568041977edc94294e0b4baaa436b664d9ac9", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a267d8ccb7df8b87c9f8680a32ea4530c86a600e/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a267d8ccb7df8b87c9f8680a32ea4530c86a600e/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=a267d8ccb7df8b87c9f8680a32ea4530c86a600e", "patch": "@@ -4371,18 +4371,13 @@ package body Sem_Ch13 is\n \n                   --  Note that analysis will have added the interpretation\n                   --  that corresponds to the dereference. We only check the\n-                  --  subprogram itself.\n+                  --  subprogram itself. Ignore homonyms that may come from\n+                  --  derived types in the context.\n \n-                  if Is_Overloadable (It.Nam) then\n-\n-                     --  Ignore homonyms that may come from derived types\n-                     --  in the context.\n-\n-                     if not Comes_From_Source (It.Nam) then\n-                        null;\n-                     else\n-                        Check_One_Function (It.Nam);\n-                     end if;\n+                  if Is_Overloadable (It.Nam)\n+                    and then Comes_From_Source (It.Nam)\n+                  then\n+                     Check_One_Function (It.Nam);\n                   end if;\n \n                   Get_Next_Interp (I, It);\n@@ -4392,8 +4387,8 @@ package body Sem_Ch13 is\n \n          if not Indexing_Found and then not Error_Posted (N) then\n             Error_Msg_NE\n-              (\"aspect Indexing requires a local function that \"\n-               & \"applies to type&\", Expr, Ent);\n+              (\"aspect Indexing requires a local function that applies to \"\n+               & \"type&\", Expr, Ent);\n          end if;\n       end Check_Indexing_Functions;\n "}, {"sha": "e52d285a48d3a0fb602f764e6c626d4d4a97b95c", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a267d8ccb7df8b87c9f8680a32ea4530c86a600e/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a267d8ccb7df8b87c9f8680a32ea4530c86a600e/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=a267d8ccb7df8b87c9f8680a32ea4530c86a600e", "patch": "@@ -3091,15 +3091,15 @@ package body Sem_Ch6 is\n \n                      --  Check that the enclosing record type can be frozen.\n                      --  This provides a better error message than generating\n-                     --  primitives whose compilation fails much later.\n-                     --  Refine the error message if possible.\n+                     --  primitives whose compilation fails much later. Refine\n+                     --  the error message if possible.\n \n                      Check_Fully_Declared (Rec, Node);\n \n                      if Error_Posted (Node) then\n                         if Has_Private_Component (Rec) then\n-                           Error_Msg_NE (\"\\type& has private component\",\n-                             Node, Rec);\n+                           Error_Msg_NE\n+                             (\"\\type& has private component\", Node, Rec);\n                         end if;\n \n                      else"}, {"sha": "4afba9e653f2f881dbac6d63d2f00b423850cabb", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a267d8ccb7df8b87c9f8680a32ea4530c86a600e/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a267d8ccb7df8b87c9f8680a32ea4530c86a600e/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=a267d8ccb7df8b87c9f8680a32ea4530c86a600e", "patch": "@@ -4211,6 +4211,21 @@ package body Sem_Res is\n                end if;\n             end if;\n \n+            --  In -gnatd.q mode, forget that a given array is constant when\n+            --  it is passed as an IN parameter to a foreign-convention\n+            --  subprogram. This is in case the subprogram evilly modifies the\n+            --  object. Of course, correct code would use IN OUT.\n+\n+            if Debug_Flag_Dot_Q\n+              and then Ekind (F) = E_In_Parameter\n+              and then Has_Foreign_Convention (Nam)\n+              and then Is_Array_Type (F_Typ)\n+              and then Nkind (A) in N_Has_Entity\n+              and then Present (Entity (A))\n+            then\n+               Set_Is_True_Constant (Entity (A), False);\n+            end if;\n+\n             --  Case of OUT or IN OUT parameter\n \n             if Ekind (F) /= E_In_Parameter then"}]}