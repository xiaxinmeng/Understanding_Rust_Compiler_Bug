{"sha": "df770e044284fe071d8e64c82827393a2dab98fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY3NzBlMDQ0Mjg0ZmUwNzFkOGU2NGM4MjgyNzM5M2EyZGFiOThmYQ==", "commit": {"author": {"name": "David Daney", "email": "ddaney@avtrex.com", "date": "2007-07-11T05:14:35Z"}, "committer": {"name": "David Daney", "email": "daney@gcc.gnu.org", "date": "2007-07-11T05:14:35Z"}, "message": "mips.h (ISA_HAS_SYNCI): New target capability predicate.\n\n2007-07-10  David Daney  <ddaney@avtrex.com>\n\n\t* config/mips/mips.h (ISA_HAS_SYNCI): New target capability\n\tpredicate.\n\t(INITIALIZE_TRAMPOLINE): Emit clear_cache insn instead of  library\n\tcall.\n\t* config/mips/mips.c (mips_expand_synci_loop): New function.\n\t* config/mips/mips.md (UNSPEC_CLEAR_HAZARD): New constant.\n\t(UNSPEC_RDHWR): Same.\n\t(UNSPEC_SYNCI): Same.\n\t(UNSPEC_SYNC): Same.\n\t(clear_cache): New expand.\n\t(sync): New insn.\n\t(synci): Same.\n\t(rdhwr): Same.\n\t(clear_hazard): Same.\n\t* config/mips/mips-protos.h (mips_expand_synci_loop): Declare\n\tfunction.\n\t* testsuite/gcc.target/mips/clear-cache-1.c: New test.\n\t* testsuite/gcc.target/mips/clear-cache-2.c: New test.\n\nFrom-SVN: r126537", "tree": {"sha": "55fd8563ea4486e49ee923e02646d4548ba97bc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55fd8563ea4486e49ee923e02646d4548ba97bc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df770e044284fe071d8e64c82827393a2dab98fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df770e044284fe071d8e64c82827393a2dab98fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df770e044284fe071d8e64c82827393a2dab98fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df770e044284fe071d8e64c82827393a2dab98fa/comments", "author": null, "committer": null, "parents": [{"sha": "f8335a4ff0dd1c3caa1e8822f9d86e594b96e934", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8335a4ff0dd1c3caa1e8822f9d86e594b96e934", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8335a4ff0dd1c3caa1e8822f9d86e594b96e934"}], "stats": {"total": 163, "additions": 152, "deletions": 11}, "files": [{"sha": "4d99782a7ebae6103e4e7f4431a06c61626d45db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df770e044284fe071d8e64c82827393a2dab98fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df770e044284fe071d8e64c82827393a2dab98fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df770e044284fe071d8e64c82827393a2dab98fa", "patch": "@@ -1,3 +1,24 @@\n+2007-07-10  David Daney  <ddaney@avtrex.com>\n+\n+\t* config/mips/mips.h (ISA_HAS_SYNCI): New target capability\n+\tpredicate.\n+\t(INITIALIZE_TRAMPOLINE): Emit clear_cache insn instead of  library\n+\tcall.\n+\t* config/mips/mips.c (mips_expand_synci_loop): New function.\n+\t* config/mips/mips.md (UNSPEC_CLEAR_HAZARD): New constant.\n+\t(UNSPEC_RDHWR): Same.\n+\t(UNSPEC_SYNCI): Same.\n+\t(UNSPEC_SYNC): Same.\n+\t(clear_cache): New expand.\n+\t(sync): New insn.\n+\t(synci): Same.\n+\t(rdhwr): Same.\n+\t(clear_hazard): Same.\n+\t* config/mips/mips-protos.h (mips_expand_synci_loop): Declare\n+\tfunction.\n+\t* testsuite/gcc.target/mips/clear-cache-1.c: New test.\n+\t* testsuite/gcc.target/mips/clear-cache-2.c: New test.\n+\n 2007-07-10  Ian Lance Taylor  <iant@google.com>\n \n \t* emit-rtl.c (gen_reg_rtx): Check can_create_pseudo_p rather than"}, {"sha": "09d5d4a9b3950437f66a0ea6e232d4d3356d4b2a", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df770e044284fe071d8e64c82827393a2dab98fa/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df770e044284fe071d8e64c82827393a2dab98fa/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=df770e044284fe071d8e64c82827393a2dab98fa", "patch": "@@ -1,6 +1,6 @@\n /* Prototypes of target machine for GNU compiler.  MIPS version.\n    Copyright (C) 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   1999, 2001, 2002, 2003, 2004, 2005, 2007 Free Software Foundation, Inc.\n    Contributed by A. Lichnewsky (lich@inria.inria.fr).\n    Changed by Michael Meissner\t(meissner@osf.org).\n    64-bit r4000 support by Ian Lance Taylor (ian@cygnus.com) and\n@@ -187,6 +187,7 @@ extern void mips_expand_call (rtx, rtx, rtx, rtx, int);\n extern void mips_emit_fcc_reload (rtx, rtx, rtx);\n extern void mips_set_return_address (rtx, rtx);\n extern bool mips_expand_block_move (rtx, rtx, rtx);\n+extern void mips_expand_synci_loop (rtx, rtx);\n \n extern void init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx);\n extern void function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,"}, {"sha": "e3100d16d0a71a6d9c022a2621729898d7357809", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df770e044284fe071d8e64c82827393a2dab98fa/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df770e044284fe071d8e64c82827393a2dab98fa/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=df770e044284fe071d8e64c82827393a2dab98fa", "patch": "@@ -3883,6 +3883,33 @@ mips_block_move_loop (rtx dest, rtx src, HOST_WIDE_INT length)\n     mips_block_move_straight (dest, src, leftover);\n }\n \f\n+\n+/* Expand a loop of synci insns for the address range [BEGIN, END).  */\n+\n+void\n+mips_expand_synci_loop (rtx begin, rtx end)\n+{\n+  rtx inc, label, cmp, cmp_result;\n+\n+  /* Load INC with the cache line size (rdhwr INC,$1). */\n+  inc = gen_reg_rtx (SImode);\n+  emit_insn (gen_rdhwr (inc, const1_rtx));\n+\n+  /* Loop back to here.  */\n+  label = gen_label_rtx ();\n+  emit_label (label);\n+\n+  emit_insn (gen_synci (begin));\n+\n+  cmp = gen_reg_rtx (Pmode);\n+  mips_emit_binary (GTU, cmp, begin, end);\n+\n+  mips_emit_binary (PLUS, begin, begin, inc);\n+\n+  cmp_result = gen_rtx_EQ (VOIDmode, cmp, const0_rtx);\n+  emit_jump_insn (gen_condjump (cmp_result, label));\n+}\n+\f\n /* Expand a movmemsi instruction.  */\n \n bool"}, {"sha": "38c8edaea7cd262a01ca3e47744173242b7bb95f", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df770e044284fe071d8e64c82827393a2dab98fa/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df770e044284fe071d8e64c82827393a2dab98fa/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=df770e044284fe071d8e64c82827393a2dab98fa", "patch": "@@ -804,6 +804,10 @@ extern const struct mips_rtx_cost_data *mips_cost;\n \t\t\t\t || ISA_MIPS32R2\t\t\t\\\n \t\t\t\t || ISA_MIPS64\t\t\t\t\\\n \t\t\t\t || TARGET_MIPS5500)\n+\n+/* ISA includes synci, jr.hb and jalr.hb.  */\n+#define ISA_HAS_SYNCI ISA_MIPS32R2\n+\n \f\n /* Add -G xx support.  */\n \n@@ -2151,21 +2155,16 @@ typedef struct mips_args {\n \n #define INITIALIZE_TRAMPOLINE(ADDR, FUNC, CHAIN)\t\t\t    \\\n {\t\t\t\t\t\t\t\t\t    \\\n-  rtx func_addr, chain_addr;\t\t\t\t\t\t    \\\n+  rtx func_addr, chain_addr, end_addr;                                      \\\n \t\t\t\t\t\t\t\t\t    \\\n   func_addr = plus_constant (ADDR, 32);\t\t\t\t\t    \\\n   chain_addr = plus_constant (func_addr, GET_MODE_SIZE (ptr_mode));\t    \\\n   emit_move_insn (gen_rtx_MEM (ptr_mode, func_addr), FUNC);\t\t    \\\n   emit_move_insn (gen_rtx_MEM (ptr_mode, chain_addr), CHAIN);\t\t    \\\n-\t\t\t\t\t\t\t\t\t    \\\n-  /* Flush both caches.  We need to flush the data cache in case\t    \\\n-     the system has a write-back cache.  */\t\t\t\t    \\\n-  /* ??? Should check the return value for errors.  */\t\t\t    \\\n-  if (mips_cache_flush_func && mips_cache_flush_func[0])\t\t    \\\n-    emit_library_call (gen_rtx_SYMBOL_REF (Pmode, mips_cache_flush_func),   \\\n-\t\t       0, VOIDmode, 3, ADDR, Pmode,\t\t\t    \\\n-\t\t       GEN_INT (TRAMPOLINE_SIZE), TYPE_MODE (integer_type_node),\\\n-\t\t       GEN_INT (3), TYPE_MODE (integer_type_node));\t    \\\n+  end_addr = gen_reg_rtx (Pmode);\t\t\t\t\t    \\\n+  emit_insn (gen_add3_insn (end_addr, copy_rtx (ADDR),\t\t\t    \\\n+                            GEN_INT (TRAMPOLINE_SIZE)));\t\t    \\\n+  emit_insn (gen_clear_cache (copy_rtx (ADDR), end_addr));\t\t    \\\n }\n \f\n /* Addressing modes, and classification of registers for them.  */"}, {"sha": "df4f80d3ff38ee677039e956b4e7a81adb5d891e", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df770e044284fe071d8e64c82827393a2dab98fa/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df770e044284fe071d8e64c82827393a2dab98fa/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=df770e044284fe071d8e64c82827393a2dab98fa", "patch": "@@ -50,6 +50,10 @@\n    (UNSPEC_TLS_GET_TP\t\t28)\n    (UNSPEC_MFHC1\t\t31)\n    (UNSPEC_MTHC1\t\t32)\n+   (UNSPEC_CLEAR_HAZARD\t\t33)\n+   (UNSPEC_RDHWR\t\t34)\n+   (UNSPEC_SYNCI\t\t35)\n+   (UNSPEC_SYNC\t\t\t36)\n \n    (UNSPEC_ADDRESS_FIRST\t100)\n \n@@ -4221,6 +4225,69 @@\n }\n   [(set_attr \"type\" \"store\")\n    (set_attr \"length\" \"4,12\")])\n+\n+;; Expand in-line code to clear the instruction cache between operand[0] and\n+;; operand[1].\n+(define_expand \"clear_cache\"\n+  [(match_operand 0 \"pmode_register_operand\")\n+   (match_operand 1 \"pmode_register_operand\")]\n+  \"\"\n+  \"\n+{\n+  if (ISA_HAS_SYNCI)\n+    {\n+      mips_expand_synci_loop (operands[0], operands[1]);\n+      emit_insn (gen_sync ());\n+      emit_insn (gen_clear_hazard ());\n+    }\n+  else if (mips_cache_flush_func && mips_cache_flush_func[0])\n+    {\n+      rtx len = gen_reg_rtx (Pmode);\n+      emit_insn (gen_sub3_insn (len, operands[1], operands[0]));\n+      /* Flush both caches.  We need to flush the data cache in case\n+         the system has a write-back cache.  */\n+      emit_library_call (gen_rtx_SYMBOL_REF (Pmode, mips_cache_flush_func),\n+                         0, VOIDmode, 3, operands[0], Pmode,\n+                         len, TYPE_MODE (integer_type_node),\n+                         GEN_INT (3), TYPE_MODE (integer_type_node));\n+   }\n+  DONE;\n+}\")\n+\n+(define_insn \"sync\"\n+  [(unspec_volatile [(const_int 0)] UNSPEC_SYNC)]\n+  \"ISA_HAS_SYNCI\"\n+  \"sync\")\n+\n+(define_insn \"synci\"\n+  [(unspec_volatile [(match_operand 0 \"pmode_register_operand\" \"d\")]\n+\t\t    UNSPEC_SYNCI)]\n+  \"ISA_HAS_SYNCI\"\n+  \"synci\\t0(%0)\")\n+\n+(define_insn \"rdhwr\"\n+  [(set (match_operand:SI 0 \"general_operand\" \"=d\")\n+        (unspec_volatile [(match_operand:SI 1 \"const_int_operand\" \"n\")]\n+        UNSPEC_RDHWR))]\n+  \"ISA_HAS_SYNCI\"\n+  \"rdhwr\\t%0,$%1\")\n+\n+(define_insn \"clear_hazard\"\n+  [(unspec_volatile [(const_int 0)] UNSPEC_CLEAR_HAZARD)\n+   (clobber (reg:SI 31))]\n+  \"ISA_HAS_SYNCI\"\n+{\n+  return \".set\\tpush\\n\"\n+         \"\\t.set\\tnoreorder\\n\"\n+         \"\\t.set\\tnomacro\\n\"\n+         \"\\tbal\\t1f\\n\"\n+         \"\\tnop\\n\"\n+         \"1:\\taddiu\\t$31,$31,12\\n\"\n+         \"\\tjr.hb\\t$31\\n\"\n+         \"\\tnop\\n\"\n+         \"\\t.set\\tpop\";\n+}\n+  [(set_attr \"length\" \"20\")])\n \f\n ;; Block moves, see mips.c for more details.\n ;; Argument 0 is the destination"}, {"sha": "ece1f50daf6f62b299959abea99fb3820c3d35ba", "filename": "gcc/testsuite/gcc.target/mips/clear-cache-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df770e044284fe071d8e64c82827393a2dab98fa/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fclear-cache-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df770e044284fe071d8e64c82827393a2dab98fa/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fclear-cache-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fclear-cache-1.c?ref=df770e044284fe071d8e64c82827393a2dab98fa", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-O2 -mips32r2\" } */\n+/* { dg-final { scan-assembler \"synci\" } } */\n+/* { dg-final { scan-assembler \"jr.hb\" } } */\n+/* { dg-final { scan-assembler-not \"_flush_cache\" } } */\n+\n+void f()\n+{\n+  int size = 40;\n+  char *memory = __builtin_alloca(size);\n+  __builtin___clear_cache(memory, memory + size);\n+}\n+"}, {"sha": "ee7c05048abf881f51e48da8aba57bd3ff218bee", "filename": "gcc/testsuite/gcc.target/mips/clear-cache-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df770e044284fe071d8e64c82827393a2dab98fa/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fclear-cache-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df770e044284fe071d8e64c82827393a2dab98fa/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fclear-cache-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fclear-cache-2.c?ref=df770e044284fe071d8e64c82827393a2dab98fa", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-O2 -mips32\" } */\n+/* { dg-final { scan-assembler-not \"synci\" } } */\n+/* { dg-final { scan-assembler-not \"jr.hb\" } } */\n+/* { dg-final { scan-assembler \"_flush_cache\" } } */\n+\n+void f()\n+{\n+  int size = 40;\n+  char *memory = __builtin_alloca(size);\n+  __builtin___clear_cache(memory, memory + size);\n+}\n+"}]}