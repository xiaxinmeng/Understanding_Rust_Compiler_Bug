{"sha": "3bc75533d1f87f0617be6c1af98804f9127ec637", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JjNzU1MzNkMWY4N2YwNjE3YmU2YzFhZjk4ODA0ZjkxMjdlYzYzNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-23T08:16:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-23T08:16:24Z"}, "message": "openmp: Add support for strict modifier on grainsize/num_tasks clauses\n\nWith strict: modifier on these clauses, the standard is explicit about\nhow many iterations (and which) each generated task of taskloop directive\nshould contain.  For num_tasks it actually matches what we were already\nimplementing, but for grainsize it does not (and even violates the old\nrule - without strict it requires that the number of iterations (unspecified\nwhich exactly) handled by each generated task is >= grainsize argument and\n< 2 * grainsize argument, with strict: it requires that each generated\ntask handles exactly == grainsize argument iterations, except for the\ngenerated task handling the last iteration which can handles <= grainsize\niterations).\n\nThe following patch implements it for C and C++.\n\n2021-08-23  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/\n\t* tree.h (OMP_CLAUSE_GRAINSIZE_STRICT): Define.\n\t(OMP_CLAUSE_NUM_TASKS_STRICT): Define.\n\t* tree-pretty-print.c (dump_omp_clause) <case OMP_CLAUSE_GRAINSIZE,\n\tcase OMP_CLAUSE_NUM_TASKS>: Print strict: modifier.\n\t* omp-expand.c (expand_task_call): Use GOMP_TASK_FLAG_STRICT in iflags\n\tif either grainsize or num_tasks clause has the strict modifier.\ngcc/c/\n\t* c-parser.c (c_parser_omp_clause_num_tasks,\n\tc_parser_omp_clause_grainsize): Parse the optional strict: modifier.\ngcc/cp/\n\t* parser.c (cp_parser_omp_clause_num_tasks,\n\tcp_parser_omp_clause_grainsize): Parse the optional strict: modifier.\ninclude/\n\t* gomp-constants.h (GOMP_TASK_FLAG_STRICT): Define.\nlibgomp/\n\t* taskloop.c (GOMP_taskloop): Handle GOMP_TASK_FLAG_STRICT.\n\t* testsuite/libgomp.c-c++-common/taskloop-4.c (main): Fix up comment.\n\t* testsuite/libgomp.c-c++-common/taskloop-5.c: New test.", "tree": {"sha": "fa6ecc3f9840f638a87d8f4f39884c31ec7e7bab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa6ecc3f9840f638a87d8f4f39884c31ec7e7bab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bc75533d1f87f0617be6c1af98804f9127ec637", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bc75533d1f87f0617be6c1af98804f9127ec637", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bc75533d1f87f0617be6c1af98804f9127ec637", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bc75533d1f87f0617be6c1af98804f9127ec637/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f1a3668f5ee5152bdcca59843802e587339eda1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f1a3668f5ee5152bdcca59843802e587339eda1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f1a3668f5ee5152bdcca59843802e587339eda1"}], "stats": {"total": 255, "additions": 245, "deletions": 10}, "files": [{"sha": "356cf2504d4b4a56bd5de176a9845f07fc3b551c", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc75533d1f87f0617be6c1af98804f9127ec637/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc75533d1f87f0617be6c1af98804f9127ec637/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=3bc75533d1f87f0617be6c1af98804f9127ec637", "patch": "@@ -13786,7 +13786,10 @@ c_parser_omp_clause_num_threads (c_parser *parser, tree list)\n }\n \n /* OpenMP 4.5:\n-   num_tasks ( expression ) */\n+   num_tasks ( expression )\n+\n+   OpenMP 5.1:\n+   num_tasks ( strict : expression ) */\n \n static tree\n c_parser_omp_clause_num_tasks (c_parser *parser, tree list)\n@@ -13795,6 +13798,17 @@ c_parser_omp_clause_num_tasks (c_parser *parser, tree list)\n   matching_parens parens;\n   if (parens.require_open (parser))\n     {\n+      bool strict = false;\n+      if (c_parser_next_token_is (parser, CPP_NAME)\n+\t  && c_parser_peek_2nd_token (parser)->type == CPP_COLON\n+\t  && strcmp (IDENTIFIER_POINTER (c_parser_peek_token (parser)->value),\n+\t\t     \"strict\") == 0)\n+\t{\n+\t  strict = true;\n+\t  c_parser_consume_token (parser);\n+\t  c_parser_consume_token (parser);\n+\t}\n+\n       location_t expr_loc = c_parser_peek_token (parser)->location;\n       c_expr expr = c_parser_expr_no_commas (parser, NULL);\n       expr = convert_lvalue_to_rvalue (expr_loc, expr, false, true);\n@@ -13824,6 +13838,7 @@ c_parser_omp_clause_num_tasks (c_parser *parser, tree list)\n \n       c = build_omp_clause (num_tasks_loc, OMP_CLAUSE_NUM_TASKS);\n       OMP_CLAUSE_NUM_TASKS_EXPR (c) = t;\n+      OMP_CLAUSE_NUM_TASKS_STRICT (c) = strict;\n       OMP_CLAUSE_CHAIN (c) = list;\n       list = c;\n     }\n@@ -13832,7 +13847,10 @@ c_parser_omp_clause_num_tasks (c_parser *parser, tree list)\n }\n \n /* OpenMP 4.5:\n-   grainsize ( expression ) */\n+   grainsize ( expression )\n+\n+   OpenMP 5.1:\n+   grainsize ( strict : expression ) */\n \n static tree\n c_parser_omp_clause_grainsize (c_parser *parser, tree list)\n@@ -13841,6 +13859,17 @@ c_parser_omp_clause_grainsize (c_parser *parser, tree list)\n   matching_parens parens;\n   if (parens.require_open (parser))\n     {\n+      bool strict = false;\n+      if (c_parser_next_token_is (parser, CPP_NAME)\n+\t  && c_parser_peek_2nd_token (parser)->type == CPP_COLON\n+\t  && strcmp (IDENTIFIER_POINTER (c_parser_peek_token (parser)->value),\n+\t\t     \"strict\") == 0)\n+\t{\n+\t  strict = true;\n+\t  c_parser_consume_token (parser);\n+\t  c_parser_consume_token (parser);\n+\t}\n+\n       location_t expr_loc = c_parser_peek_token (parser)->location;\n       c_expr expr = c_parser_expr_no_commas (parser, NULL);\n       expr = convert_lvalue_to_rvalue (expr_loc, expr, false, true);\n@@ -13870,6 +13899,7 @@ c_parser_omp_clause_grainsize (c_parser *parser, tree list)\n \n       c = build_omp_clause (grainsize_loc, OMP_CLAUSE_GRAINSIZE);\n       OMP_CLAUSE_GRAINSIZE_EXPR (c) = t;\n+      OMP_CLAUSE_GRAINSIZE_STRICT (c) = strict;\n       OMP_CLAUSE_CHAIN (c) = list;\n       list = c;\n     }"}, {"sha": "a959c71dfa3c5493f3f3614ed1c41e8b7cb29240", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc75533d1f87f0617be6c1af98804f9127ec637/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc75533d1f87f0617be6c1af98804f9127ec637/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=3bc75533d1f87f0617be6c1af98804f9127ec637", "patch": "@@ -37237,7 +37237,10 @@ cp_parser_omp_clause_num_threads (cp_parser *parser, tree list,\n }\n \n /* OpenMP 4.5:\n-   num_tasks ( expression ) */\n+   num_tasks ( expression )\n+\n+   OpenMP 5.1:\n+   num_tasks ( strict : expression ) */\n \n static tree\n cp_parser_omp_clause_num_tasks (cp_parser *parser, tree list,\n@@ -37249,6 +37252,19 @@ cp_parser_omp_clause_num_tasks (cp_parser *parser, tree list,\n   if (!parens.require_open (parser))\n     return list;\n \n+  bool strict = false;\n+  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME)\n+      && cp_lexer_nth_token_is (parser->lexer, 2, CPP_COLON))\n+    {\n+      tree id = cp_lexer_peek_token (parser->lexer)->u.value;\n+      if (!strcmp (IDENTIFIER_POINTER (id), \"strict\"))\n+\t{\n+\t  strict = true;\n+\t  cp_lexer_consume_token (parser->lexer);\n+\t  cp_lexer_consume_token (parser->lexer);\n+\t}\n+    }\n+\n   t = cp_parser_assignment_expression (parser);\n \n   if (t == error_mark_node\n@@ -37262,13 +37278,17 @@ cp_parser_omp_clause_num_tasks (cp_parser *parser, tree list,\n \n   c = build_omp_clause (location, OMP_CLAUSE_NUM_TASKS);\n   OMP_CLAUSE_NUM_TASKS_EXPR (c) = t;\n+  OMP_CLAUSE_NUM_TASKS_STRICT (c) = strict;\n   OMP_CLAUSE_CHAIN (c) = list;\n \n   return c;\n }\n \n /* OpenMP 4.5:\n-   grainsize ( expression ) */\n+   grainsize ( expression )\n+\n+   OpenMP 5.1:\n+   grainsize ( strict : expression ) */\n \n static tree\n cp_parser_omp_clause_grainsize (cp_parser *parser, tree list,\n@@ -37280,6 +37300,19 @@ cp_parser_omp_clause_grainsize (cp_parser *parser, tree list,\n   if (!parens.require_open (parser))\n     return list;\n \n+  bool strict = false;\n+  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME)\n+      && cp_lexer_nth_token_is (parser->lexer, 2, CPP_COLON))\n+    {\n+      tree id = cp_lexer_peek_token (parser->lexer)->u.value;\n+      if (!strcmp (IDENTIFIER_POINTER (id), \"strict\"))\n+\t{\n+\t  strict = true;\n+\t  cp_lexer_consume_token (parser->lexer);\n+\t  cp_lexer_consume_token (parser->lexer);\n+\t}\n+    }\n+\n   t = cp_parser_assignment_expression (parser);\n \n   if (t == error_mark_node\n@@ -37293,6 +37326,7 @@ cp_parser_omp_clause_grainsize (cp_parser *parser, tree list,\n \n   c = build_omp_clause (location, OMP_CLAUSE_GRAINSIZE);\n   OMP_CLAUSE_GRAINSIZE_EXPR (c) = t;\n+  OMP_CLAUSE_GRAINSIZE_STRICT (c) = strict;\n   OMP_CLAUSE_CHAIN (c) = list;\n \n   return c;"}, {"sha": "66c64f5a37b75e0e63a8e70d47621150170a2826", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc75533d1f87f0617be6c1af98804f9127ec637/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc75533d1f87f0617be6c1af98804f9127ec637/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=3bc75533d1f87f0617be6c1af98804f9127ec637", "patch": "@@ -791,13 +791,19 @@ expand_task_call (struct omp_region *region, basic_block bb,\n       tree tclauses = gimple_omp_for_clauses (g);\n       num_tasks = omp_find_clause (tclauses, OMP_CLAUSE_NUM_TASKS);\n       if (num_tasks)\n-\tnum_tasks = OMP_CLAUSE_NUM_TASKS_EXPR (num_tasks);\n+\t{\n+\t  if (OMP_CLAUSE_NUM_TASKS_STRICT (num_tasks))\n+\t    iflags |= GOMP_TASK_FLAG_STRICT;\n+\t  num_tasks = OMP_CLAUSE_NUM_TASKS_EXPR (num_tasks);\n+\t}\n       else\n \t{\n \t  num_tasks = omp_find_clause (tclauses, OMP_CLAUSE_GRAINSIZE);\n \t  if (num_tasks)\n \t    {\n \t      iflags |= GOMP_TASK_FLAG_GRAINSIZE;\n+\t      if (OMP_CLAUSE_GRAINSIZE_STRICT (num_tasks))\n+\t\tiflags |= GOMP_TASK_FLAG_STRICT;\n \t      num_tasks = OMP_CLAUSE_GRAINSIZE_EXPR (num_tasks);\n \t    }\n \t  else"}, {"sha": "e103d2c6bd44623b81d83a0a3798204ad34fb4a0", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc75533d1f87f0617be6c1af98804f9127ec637/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc75533d1f87f0617be6c1af98804f9127ec637/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=3bc75533d1f87f0617be6c1af98804f9127ec637", "patch": "@@ -1066,13 +1066,17 @@ dump_omp_clause (pretty_printer *pp, tree clause, int spc, dump_flags_t flags)\n \n     case OMP_CLAUSE_GRAINSIZE:\n       pp_string (pp, \"grainsize(\");\n+      if (OMP_CLAUSE_GRAINSIZE_STRICT (clause))\n+\tpp_string (pp, \"strict:\");\n       dump_generic_node (pp, OMP_CLAUSE_GRAINSIZE_EXPR (clause),\n \t\t\t spc, flags, false);\n       pp_right_paren (pp);\n       break;\n \n     case OMP_CLAUSE_NUM_TASKS:\n       pp_string (pp, \"num_tasks(\");\n+      if (OMP_CLAUSE_NUM_TASKS_STRICT (clause))\n+\tpp_string (pp, \"strict:\");\n       dump_generic_node (pp, OMP_CLAUSE_NUM_TASKS_EXPR (clause),\n \t\t\t spc, flags, false);\n       pp_right_paren (pp);"}, {"sha": "060a41f6991f5455644fcdf00817b4b46de515e8", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc75533d1f87f0617be6c1af98804f9127ec637/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc75533d1f87f0617be6c1af98804f9127ec637/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=3bc75533d1f87f0617be6c1af98804f9127ec637", "patch": "@@ -1612,6 +1612,11 @@ class auto_suppress_location_wrappers\n #define OMP_CLAUSE_PRIORITY_EXPR(NODE) \\\n   OMP_CLAUSE_OPERAND (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_PRIORITY),0)\n \n+#define OMP_CLAUSE_GRAINSIZE_STRICT(NODE) \\\n+  TREE_PRIVATE (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_GRAINSIZE))\n+#define OMP_CLAUSE_NUM_TASKS_STRICT(NODE) \\\n+  TREE_PRIVATE (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_NUM_TASKS))\n+\n /* OpenACC clause expressions  */\n #define OMP_CLAUSE_EXPR(NODE, CLAUSE) \\\n   OMP_CLAUSE_OPERAND (OMP_CLAUSE_SUBCODE_CHECK (NODE, CLAUSE), 0)"}, {"sha": "ebd0801343025368e4b084d8c6dad773275892b3", "filename": "include/gomp-constants.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc75533d1f87f0617be6c1af98804f9127ec637/include%2Fgomp-constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc75533d1f87f0617be6c1af98804f9127ec637/include%2Fgomp-constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fgomp-constants.h?ref=3bc75533d1f87f0617be6c1af98804f9127ec637", "patch": "@@ -222,6 +222,7 @@ enum gomp_map_kind\n #define GOMP_TASK_FLAG_NOGROUP\t\t(1 << 11)\n #define GOMP_TASK_FLAG_REDUCTION\t(1 << 12)\n #define GOMP_TASK_FLAG_DETACH\t\t(1 << 13)\n+#define GOMP_TASK_FLAG_STRICT\t\t(1 << 14)\n \n /* GOMP_target{_ext,update_ext,enter_exit_data} flags argument.  */\n #define GOMP_TARGET_FLAG_NOWAIT\t\t(1 << 0)"}, {"sha": "9d27dd05f6c3148eb1eff77a3bdb6edd2e66973b", "filename": "libgomp/taskloop.c", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc75533d1f87f0617be6c1af98804f9127ec637/libgomp%2Ftaskloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc75533d1f87f0617be6c1af98804f9127ec637/libgomp%2Ftaskloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftaskloop.c?ref=3bc75533d1f87f0617be6c1af98804f9127ec637", "patch": "@@ -97,6 +97,7 @@ GOMP_taskloop (void (*fn) (void *), void *data, void (*cpyfn) (void *, void *),\n #endif\n \n   TYPE task_step = step;\n+  TYPE nfirst_task_step = step;\n   unsigned long nfirst = n;\n   if (flags & GOMP_TASK_FLAG_GRAINSIZE)\n     {\n@@ -109,7 +110,22 @@ GOMP_taskloop (void (*fn) (void *), void *data, void (*cpyfn) (void *, void *),\n       if (num_tasks != ndiv)\n \tnum_tasks = ~0UL;\n #endif\n-      if (num_tasks <= 1)\n+      if ((flags & GOMP_TASK_FLAG_STRICT)\n+\t  && num_tasks != ~0ULL)\n+\t{\n+\t  UTYPE mod = n % grainsize;\n+\t  task_step = (TYPE) grainsize * step;\n+\t  if (mod)\n+\t    {\n+\t      num_tasks++;\n+\t      nfirst_task_step = (TYPE) mod * step;\n+\t      if (num_tasks == 1)\n+\t\ttask_step = nfirst_task_step;\n+\t      else\n+\t\tnfirst = num_tasks - 2;\n+\t    }\n+\t}\n+      else if (num_tasks <= 1)\n \t{\n \t  num_tasks = 1;\n \t  task_step = end - start;\n@@ -124,6 +140,7 @@ GOMP_taskloop (void (*fn) (void *), void *data, void (*cpyfn) (void *, void *),\n \t  task_step = (TYPE) grainsize * step;\n \t  if (mul != n)\n \t    {\n+\t      nfirst_task_step = task_step;\n \t      task_step += step;\n \t      nfirst = n - mul - 1;\n \t    }\n@@ -135,6 +152,7 @@ GOMP_taskloop (void (*fn) (void *), void *data, void (*cpyfn) (void *, void *),\n \t  task_step = (TYPE) div * step;\n \t  if (mod)\n \t    {\n+\t      nfirst_task_step = task_step;\n \t      task_step += step;\n \t      nfirst = mod - 1;\n \t    }\n@@ -153,6 +171,7 @@ GOMP_taskloop (void (*fn) (void *), void *data, void (*cpyfn) (void *, void *),\n \t  task_step = (TYPE) div * step;\n \t  if (mod)\n \t    {\n+\t      nfirst_task_step = task_step;\n \t      task_step += step;\n \t      nfirst = mod - 1;\n \t    }\n@@ -225,7 +244,7 @@ GOMP_taskloop (void (*fn) (void *), void *data, void (*cpyfn) (void *, void *),\n \t      start += task_step;\n \t      ((TYPE *)arg)[1] = start;\n \t      if (i == nfirst)\n-\t\ttask_step -= step;\n+\t\ttask_step = nfirst_task_step;\n \t      fn (arg);\n \t      arg += arg_size;\n \t      if (!priority_queue_empty_p (&task[i].children_queue,\n@@ -258,7 +277,7 @@ GOMP_taskloop (void (*fn) (void *), void *data, void (*cpyfn) (void *, void *),\n \t    start += task_step;\n \t    ((TYPE *)data)[1] = start;\n \t    if (i == nfirst)\n-\t      task_step -= step;\n+\t      task_step = nfirst_task_step;\n \t    fn (data);\n \t    if (!priority_queue_empty_p (&task.children_queue,\n \t\t\t\t\t MEMMODEL_RELAXED))\n@@ -303,7 +322,7 @@ GOMP_taskloop (void (*fn) (void *), void *data, void (*cpyfn) (void *, void *),\n \t  start += task_step;\n \t  ((TYPE *)arg)[1] = start;\n \t  if (i == nfirst)\n-\t    task_step -= step;\n+\t    task_step = nfirst_task_step;\n \t  thr->task = parent;\n \t  task->kind = GOMP_TASK_WAITING;\n \t  task->fn = fn;"}, {"sha": "b9499387d11590750ad82f22be58637f0f932fc2", "filename": "libgomp/testsuite/libgomp.c-c++-common/taskloop-4.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc75533d1f87f0617be6c1af98804f9127ec637/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftaskloop-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc75533d1f87f0617be6c1af98804f9127ec637/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftaskloop-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftaskloop-4.c?ref=3bc75533d1f87f0617be6c1af98804f9127ec637", "patch": "@@ -85,7 +85,8 @@ main ()\n \tif (test (7, 21, 2, 15, grainsize, &ntasks, &min_iters, &max_iters) != 7\n \t    || ntasks != 1 || min_iters != 7 || max_iters != 7)\n \t  __builtin_abort ();\n-\t/* If num_tasks is present, # of task loop iters is min (# of loop iters, num_tasks).  */\n+\t/* If num_tasks is present, # of tasks is min (# of loop iters, num_tasks)\n+\t   and each task has at least one iteration.  */\n \tif (test (-51, 2500, 48, 9, num_tasks, &ntasks, &min_iters, &max_iters) != 54\n \t    || ntasks != 9)\n \t  __builtin_abort ();"}, {"sha": "1b64a6dc4f7e82ef70d76934b5f839796c790e2e", "filename": "libgomp/testsuite/libgomp.c-c++-common/taskloop-5.c", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc75533d1f87f0617be6c1af98804f9127ec637/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftaskloop-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc75533d1f87f0617be6c1af98804f9127ec637/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftaskloop-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftaskloop-5.c?ref=3bc75533d1f87f0617be6c1af98804f9127ec637", "patch": "@@ -0,0 +1,135 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+int u[64], v, w[64];\n+\n+__attribute__((noinline, noclone)) int\n+test (int a, int b, int c, int d, void (*fn) (int, int, int, int),\n+      int *num_tasks, int *min_iters, int *max_iters, int *sep)\n+{\n+  int i, j, t = 0;\n+  __builtin_memset (u, 0, sizeof u);\n+  v = 0;\n+  fn (a, b, c, d);\n+  *min_iters = 0;\n+  *max_iters = 0;\n+  *num_tasks = v;\n+  *sep = v;\n+  if (v)\n+    {\n+      *min_iters = u[0];\n+      *max_iters = u[0];\n+      t = u[0];\n+      for (i = 1; i < v; i++)\n+\t{\n+\t  if (*min_iters > u[i])\n+\t    *min_iters = u[i];\n+\t  if (*max_iters < u[i])\n+\t    *max_iters = u[i];\n+\t  t += u[i];\n+\t}\n+      if (*min_iters != *max_iters)\n+\t{\n+\t  for (i = 0; i < v - 1; i++)\n+\t    {\n+\t      int min_idx = i;\n+\t      for (j = i + 1; j < v; j++)\n+\t\tif (w[min_idx] > w[j])\n+\t\t  min_idx = j;\n+\t      if (min_idx != i)\n+\t\t{\n+\t\t  int tem = u[i];\n+\t\t  u[i] = u[min_idx];\n+\t\t  u[min_idx] = tem;\n+\t\t  tem = w[i];\n+\t\t  w[i] = w[min_idx];\n+\t\t  w[min_idx] = tem;\n+\t\t}\n+\t    }\n+\t  if (u[0] != *max_iters)\n+\t    __builtin_abort ();\n+\t  for (i = 1; i < v; i++)\n+\t    if (u[i] != u[i - 1])\n+\t      {\n+\t\tif (*sep != v || u[i] != *min_iters)\n+\t\t  __builtin_abort ();\n+\t\t*sep = i;\n+\t      }\n+\t}\n+    }\n+  return t;\n+}\n+\n+void\n+grainsize (int a, int b, int c, int d)\n+{\n+  int i, j = 0, k = 0;\n+  #pragma omp taskloop firstprivate (j, k) grainsize(strict:d)\n+  for (i = a; i < b; i += c)\n+    {\n+      if (j == 0)\n+\t{\n+\t  #pragma omp atomic capture\n+\t    k = v++;\n+\t  if (k >= 64)\n+\t    __builtin_abort ();\n+\t  w[k] = i;\n+\t}\n+      u[k] = ++j;\n+    }\n+}\n+\n+void\n+num_tasks (int a, int b, int c, int d)\n+{\n+  int i, j = 0, k = 0;\n+  #pragma omp taskloop firstprivate (j, k) num_tasks(strict:d)\n+  for (i = a; i < b; i += c)\n+    {\n+      if (j == 0)\n+\t{\n+\t  #pragma omp atomic capture\n+\t    k = v++;\n+\t  if (k >= 64)\n+\t    __builtin_abort ();\n+\t  w[k] = i;\n+\t}\n+      u[k] = ++j;\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  #pragma omp parallel\n+    #pragma omp single\n+      {\n+\tint min_iters, max_iters, ntasks, sep;\n+\t/* If grainsize is present and has strict modifier, # of task loop iters is == grainsize,\n+\t   except that it can be smaller on the last task.  */\n+\tif (test (0, 79, 1, 17, grainsize, &ntasks, &min_iters, &max_iters, &sep) != 79\n+\t    || ntasks != 5 || min_iters != 11 || max_iters != 17 || sep != 4)\n+\t  __builtin_abort ();\n+\tif (test (-49, 2541, 7, 28, grainsize, &ntasks, &min_iters, &max_iters, &sep) != 370\n+\t    || ntasks != 14 || min_iters != 6 || max_iters != 28 || sep != 13)\n+\t  __builtin_abort ();\n+\tif (test (7, 21, 2, 15, grainsize, &ntasks, &min_iters, &max_iters, &sep) != 7\n+\t    || ntasks != 1 || min_iters != 7 || max_iters != 7 || sep != 1)\n+\t  __builtin_abort ();\n+\t/* If num_tasks is present, # of tasks is min (# of loop iters, num_tasks)\n+\t   and each task has at least one iteration.  If strict modifier is present,\n+\t   first set of tasks has ceil (# of loop iters / num_tasks) iterations,\n+\t   followed by possibly empty set of tasks with floor (# of loop iters / num_tasks)\n+\t   iterations.  */\n+\tif (test (-51, 2500, 48, 9, num_tasks, &ntasks, &min_iters, &max_iters, &sep) != 54\n+\t    || ntasks != 9 || min_iters != 6 || max_iters != 6 || sep != 9)\n+\t  __builtin_abort ();\n+\tif (test (0, 57, 1, 9, num_tasks, &ntasks, &min_iters, &max_iters, &sep) != 57\n+\t    || ntasks != 9 || min_iters != 6 || max_iters != 7 || sep != 3)\n+\t  __builtin_abort ();\n+\tif (test (0, 25, 2, 17, num_tasks, &ntasks, &min_iters, &max_iters, &sep) != 13\n+\t    || ntasks != 13 || min_iters != 1 || max_iters != 1 || sep != 13)\n+\t  __builtin_abort ();\n+      }\n+  return 0;\n+}"}]}