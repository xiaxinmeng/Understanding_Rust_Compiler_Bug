{"sha": "35af99b462628310bdc6a196d7c8e80f37fd4a30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVhZjk5YjQ2MjYyODMxMGJkYzZhMTk2ZDdjOGU4MGYzN2ZkNGEzMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-11-27T21:16:21Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-11-27T21:16:21Z"}, "message": "var-tracking.c (track_expr_p): Do not track declarations for parts of tracked parameters.\n\n\t* var-tracking.c (track_expr_p): Do not track declarations for parts\n\tof tracked parameters.\n\t(add_stores): Do not track values for tracked parameters passed in\n\tmultiple locations.\n\t(vt_get_decl_and_offset): Handle PARALLEL.\n\t(vt_add_function_parameter): Handle parameters with incoming PARALLEL.\n\nFrom-SVN: r205461", "tree": {"sha": "b4084a76d2f0ba4c98d3ab6e67c3359c1494717f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4084a76d2f0ba4c98d3ab6e67c3359c1494717f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35af99b462628310bdc6a196d7c8e80f37fd4a30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35af99b462628310bdc6a196d7c8e80f37fd4a30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35af99b462628310bdc6a196d7c8e80f37fd4a30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35af99b462628310bdc6a196d7c8e80f37fd4a30/comments", "author": null, "committer": null, "parents": [{"sha": "fa788bb403ace05d749fcfd753735e7d23c29760", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa788bb403ace05d749fcfd753735e7d23c29760", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa788bb403ace05d749fcfd753735e7d23c29760"}], "stats": {"total": 132, "additions": 129, "deletions": 3}, "files": [{"sha": "f13ae78f0de7e181257cc48a5ac557432485b185", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35af99b462628310bdc6a196d7c8e80f37fd4a30/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35af99b462628310bdc6a196d7c8e80f37fd4a30/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35af99b462628310bdc6a196d7c8e80f37fd4a30", "patch": "@@ -1,3 +1,12 @@\n+2013-11-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* var-tracking.c (track_expr_p): Do not track declarations for parts\n+\tof tracked parameters.\n+\t(add_stores): Do not track values for tracked parameters passed in\n+\tmultiple locations.\n+\t(vt_get_decl_and_offset): Handle PARALLEL.\n+\t(vt_add_function_parameter): Handle parameters with incoming PARALLEL.\n+\n 2013-11-27  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-threadupdate.c (thread_through_all_blocks): Do not\n@@ -11,9 +20,8 @@\n \n 2013-11-27  Kenneth Zadeck  <zadeck@naturalbridge.com>\n \n-\t* fold-const.c\n-\t(int_const_binop_1): Make INT_MIN % -1 return 0 with the overflow\n-\tbit set.\n+\t* fold-const.c (int_const_binop_1): Make INT_MIN % -1 return 0 with the\n+\toverflow bit set.\n \n 2013-11-27  Richard Biener  <rguenther@suse.de>\n "}, {"sha": "ec83e6c1fa4d8c0d130534f1ed97fb715db1b464", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35af99b462628310bdc6a196d7c8e80f37fd4a30/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35af99b462628310bdc6a196d7c8e80f37fd4a30/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=35af99b462628310bdc6a196d7c8e80f37fd4a30", "patch": "@@ -1,3 +1,7 @@\n+2013-11-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/guality/param-3.c: New test.\n+\n 2013-11-27  Uros Bizjak  <ubizjak@gmail.com>\n \t    Ganesh Gopalasubramanian  <Ganesh.Gopalasubramanian@amd.com>\n "}, {"sha": "a3b5adb5a0bec86f0da078ecb7f0de5d3fde4e0d", "filename": "gcc/testsuite/gcc.dg/guality/param-3.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35af99b462628310bdc6a196d7c8e80f37fd4a30/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fparam-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35af99b462628310bdc6a196d7c8e80f37fd4a30/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fparam-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fparam-3.c?ref=35af99b462628310bdc6a196d7c8e80f37fd4a30", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-options \"-g\" } */\n+/* { dg-skip-if \"\" { *-*-* }  { \"*\" } { \"-O0\" \"-O1\" } } */\n+\n+typedef __UINTPTR_TYPE__ uintptr_t;\n+\n+__attribute__((noinline, noclone)) int\n+sub (int a, int b)\n+{\n+  return a - b;\n+}\n+\n+typedef struct { uintptr_t pa; uintptr_t pb; } fatp_t\n+  __attribute__ ((aligned (2 * __alignof__ (uintptr_t))));\n+\n+__attribute__((noinline, noclone)) void\n+foo (fatp_t str, int a, int b)\n+{\n+  int i = sub (a, b);\n+  if (i == 0)           /* BREAK */\n+    foo (str, a - 1, b);\n+}\n+\n+int\n+main (void)\n+{\n+  fatp_t ptr = { 31415927, 27182818 };\n+  foo (ptr, 1, 2);\n+  return 0;\n+}\n+\n+/* { dg-final { gdb-test 20 \"str.pa\" \"31415927\" } } */\n+/* { dg-final { gdb-test 20 \"str.pb\" \"27182818\" } } */"}, {"sha": "7d4a9831b0bb9a4f6319c2449a64a1e8b121e68e", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35af99b462628310bdc6a196d7c8e80f37fd4a30/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35af99b462628310bdc6a196d7c8e80f37fd4a30/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=35af99b462628310bdc6a196d7c8e80f37fd4a30", "patch": "@@ -5071,6 +5071,11 @@ track_expr_p (tree expr, bool need_rtl)\n \t\t\t\t\t   &maxsize);\n \t      if (!DECL_P (innerdecl)\n \t\t  || DECL_IGNORED_P (innerdecl)\n+\t\t  /* Do not track declarations for parts of tracked parameters\n+\t\t     since we want to track them as a whole instead.  */\n+\t\t  || (TREE_CODE (innerdecl) == PARM_DECL\n+\t\t      && DECL_MODE (innerdecl) != BLKmode\n+\t\t      && TREE_CODE (TREE_TYPE (innerdecl)) != UNION_TYPE)\n \t\t  || TREE_STATIC (innerdecl)\n \t\t  || bitsize <= 0\n \t\t  || bitpos + bitsize > 256\n@@ -5925,6 +5930,20 @@ add_stores (rtx loc, const_rtx expr, void *cuip)\n   if (type != MO_VAL_SET)\n     goto log_and_return;\n \n+  /* We cannot track values for multiple-part variables, so we track only\n+     locations for tracked parameters passed either by invisible reference\n+     or directly in multiple locations.  */\n+  if (track_p\n+      && REG_P (loc)\n+      && REG_EXPR (loc)\n+      && TREE_CODE (REG_EXPR (loc)) == PARM_DECL\n+      && DECL_MODE (REG_EXPR (loc)) != BLKmode\n+      && ((MEM_P (DECL_INCOMING_RTL (REG_EXPR (loc)))\n+\t   && XEXP (DECL_INCOMING_RTL (REG_EXPR (loc)), 0) != arg_pointer_rtx)\n+          || (GET_CODE (DECL_INCOMING_RTL (REG_EXPR (loc))) == PARALLEL\n+\t      && XVECLEN (DECL_INCOMING_RTL (REG_EXPR (loc)), 0) > 1)))\n+    goto log_and_return;\n+\n   v = find_use_val (oloc, mode, cui);\n \n   if (!v)\n@@ -9447,6 +9466,32 @@ vt_get_decl_and_offset (rtx rtl, tree *declp, HOST_WIDE_INT *offsetp)\n \t  return true;\n \t}\n     }\n+  else if (GET_CODE (rtl) == PARALLEL)\n+    {\n+      tree decl = NULL_TREE;\n+      HOST_WIDE_INT offset = MAX_VAR_PARTS;\n+      int len = XVECLEN (rtl, 0), i;\n+\n+      for (i = 0; i < len; i++)\n+\t{\n+\t  rtx reg = XEXP (XVECEXP (rtl, 0, i), 0);\n+\t  if (!REG_P (reg) || !REG_ATTRS (reg))\n+\t    break;\n+\t  if (!decl)\n+\t    decl = REG_EXPR (reg);\n+\t  if (REG_EXPR (reg) != decl)\n+\t    break;\n+\t  if (REG_OFFSET (reg) < offset)\n+\t    offset = REG_OFFSET (reg);\n+\t}\n+\n+      if (i == len)\n+\t{\n+\t  *declp = decl;\n+\t  *offsetp = offset;\n+\t  return true;\n+\t}\n+    }\n   else if (MEM_P (rtl))\n     {\n       if (MEM_ATTRS (rtl))\n@@ -9532,6 +9577,28 @@ vt_add_function_parameter (tree parm)\n \t  p.outgoing = incoming;\n \t  vec_safe_push (windowed_parm_regs, p);\n \t}\n+      else if (GET_CODE (incoming) == PARALLEL)\n+\t{\n+\t  rtx outgoing\n+\t    = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (XVECLEN (incoming, 0)));\n+\t  int i;\n+\n+\t  for (i = 0; i < XVECLEN (incoming, 0); i++)\n+\t    {\n+\t      rtx reg = XEXP (XVECEXP (incoming, 0, i), 0);\n+\t      parm_reg_t p;\n+\t      p.incoming = reg;\n+\t      reg = gen_rtx_REG_offset (reg, GET_MODE (reg),\n+\t\t\t\t\tOUTGOING_REGNO (REGNO (reg)), 0);\n+\t      p.outgoing = reg;\n+\t      XVECEXP (outgoing, 0, i)\n+\t\t= gen_rtx_EXPR_LIST (VOIDmode, reg,\n+\t\t\t\t     XEXP (XVECEXP (incoming, 0, i), 1));\n+\t      vec_safe_push (windowed_parm_regs, p);\n+\t    }\n+\n+\t  incoming = outgoing;\n+\t}\n       else if (MEM_P (incoming)\n \t       && REG_P (XEXP (incoming, 0))\n \t       && HARD_REGISTER_P (XEXP (incoming, 0)))\n@@ -9665,6 +9732,20 @@ vt_add_function_parameter (tree parm)\n \t    }\n \t}\n     }\n+  else if (GET_CODE (incoming) == PARALLEL && !dv_onepart_p (dv))\n+    {\n+      int i;\n+\n+      for (i = 0; i < XVECLEN (incoming, 0); i++)\n+\t{\n+\t  rtx reg = XEXP (XVECEXP (incoming, 0, i), 0);\n+\t  offset = REG_OFFSET (reg);\n+\t  gcc_assert (REGNO (reg) < FIRST_PSEUDO_REGISTER);\n+\t  attrs_list_insert (&out->regs[REGNO (reg)], dv, offset, reg);\n+\t  set_variable_part (out, reg, dv, offset,\n+\t\t\t     VAR_INIT_STATUS_INITIALIZED, NULL, INSERT);\n+\t}\n+    }\n   else if (MEM_P (incoming))\n     {\n       incoming = var_lowpart (mode, incoming);"}]}