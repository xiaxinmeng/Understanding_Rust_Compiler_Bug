{"sha": "a22b794dcaf672c349b95652d975f7cf3c88a9ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIyYjc5NGRjYWY2NzJjMzQ5Yjk1NjUyZDk3NWY3Y2YzYzg4YTllZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-06-26T10:21:54Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-06-26T10:21:54Z"}, "message": "gigi.h (note_types_used_by_globals): Delete.\n\n\t* gcc-interface/gigi.h (note_types_used_by_globals): Delete.\n\t(gnat_write_global_declarations): New prototype.\n\t* gcc-interface/utils.c (type_decls): Rename back to...\n\t(global_decls): ...this.\n\t(gnat_pushdecls): Revert previous change.\n\t(create_var_decl): Do not output global variables.\n\t(note_types_used_by_globals): Rename back to...\n\t(gnat_write_global_declarations): ...this.  Output variables on the\n\tglobal_decls vector.\n\t* gcc-interface/misc.c (gnat_parse_file): Adjust to above renaming.\n\nFrom-SVN: r225003", "tree": {"sha": "08094a396e861c3d7aa238ead9d839f7105bcd4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08094a396e861c3d7aa238ead9d839f7105bcd4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a22b794dcaf672c349b95652d975f7cf3c88a9ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a22b794dcaf672c349b95652d975f7cf3c88a9ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a22b794dcaf672c349b95652d975f7cf3c88a9ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a22b794dcaf672c349b95652d975f7cf3c88a9ee/comments", "author": null, "committer": null, "parents": [{"sha": "6249559b626a40ddfe26db57791fd6a7216883be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6249559b626a40ddfe26db57791fd6a7216883be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6249559b626a40ddfe26db57791fd6a7216883be"}], "stats": {"total": 70, "additions": 40, "deletions": 30}, "files": [{"sha": "943395e99a87227f67c5a8976a5846021e97f6a0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a22b794dcaf672c349b95652d975f7cf3c88a9ee/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a22b794dcaf672c349b95652d975f7cf3c88a9ee/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a22b794dcaf672c349b95652d975f7cf3c88a9ee", "patch": "@@ -1,3 +1,16 @@\n+2015-06-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/gigi.h (note_types_used_by_globals): Delete.\n+\t(gnat_write_global_declarations): New prototype.\n+\t* gcc-interface/utils.c (type_decls): Rename back to...\n+\t(global_decls): ...this.\n+\t(gnat_pushdecls): Revert previous change.\n+\t(create_var_decl): Do not output global variables.\n+\t(note_types_used_by_globals): Rename back to...\n+\t(gnat_write_global_declarations): ...this.  Output variables on the\n+\tglobal_decls vector.\n+\t* gcc-interface/misc.c (gnat_parse_file): Adjust to above renaming.\n+\n 2015-06-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/gigi.h (create_var_decl_1): Rename into..."}, {"sha": "67977b01f8788a3645d0be71c8128d6b57018f51", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a22b794dcaf672c349b95652d975f7cf3c88a9ee/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a22b794dcaf672c349b95652d975f7cf3c88a9ee/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=a22b794dcaf672c349b95652d975f7cf3c88a9ee", "patch": "@@ -531,9 +531,8 @@ extern tree gnat_type_for_size (unsigned precision, int unsignedp);\n    an unsigned type; otherwise a signed type is returned.  */\n extern tree gnat_type_for_mode (machine_mode mode, int unsignedp);\n \n-/* Keep track of types used at the global level and emit debug info\n-   for all global types.  */\n-extern void note_types_used_by_globals (void);\n+/* Perform final processing on global declarations.  */\n+extern void gnat_write_global_declarations (void);\n \n /* Return the unsigned version of a TYPE_NODE, a scalar type.  */\n extern tree gnat_unsigned_type (tree type_node);"}, {"sha": "2f397ba1fe7842c5e3495823d654990e1eabf2ba", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a22b794dcaf672c349b95652d975f7cf3c88a9ee/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a22b794dcaf672c349b95652d975f7cf3c88a9ee/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=a22b794dcaf672c349b95652d975f7cf3c88a9ee", "patch": "@@ -113,7 +113,8 @@ gnat_parse_file (void)\n   /* Call the front end.  */\n   _ada_gnat1drv ();\n \n-  note_types_used_by_globals ();\n+  /* Write the global declarations.  */\n+  gnat_write_global_declarations ();\n }\n \n /* Return language mask for option processing.  */"}, {"sha": "e4b0ebac320fbe254f31baa035ee1b660c371d8c", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 23, "deletions": 26, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a22b794dcaf672c349b95652d975f7cf3c88a9ee/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a22b794dcaf672c349b95652d975f7cf3c88a9ee/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=a22b794dcaf672c349b95652d975f7cf3c88a9ee", "patch": "@@ -218,8 +218,8 @@ static GTY((deletable)) struct gnat_binding_level *free_binding_level;\n /* The context to be used for global declarations.  */\n static GTY(()) tree global_context;\n \n-/* An array of global type declarations.  */\n-static GTY(()) vec<tree, va_gc> *type_decls;\n+/* An array of global declarations.  */\n+static GTY(()) vec<tree, va_gc> *global_decls;\n \n /* An array of builtin function declarations.  */\n static GTY(()) vec<tree, va_gc> *builtin_decls;\n@@ -753,10 +753,7 @@ gnat_pushdecl (tree decl, Node_Id gnat_node)\n \t    vec_safe_push (builtin_decls, decl);\n \t}\n       else if (global_bindings_p ())\n-\t{\n-\t  if (TREE_CODE (decl) == TYPE_DECL)\n-\t    vec_safe_push (type_decls, decl);\n-\t}\n+\tvec_safe_push (global_decls, decl);\n       else\n \t{\n \t  DECL_CHAIN (decl) = BLOCK_VARS (current_binding_level->block);\n@@ -2439,19 +2436,13 @@ create_var_decl (tree name, tree asm_name, tree type, tree init,\n   /* Add this decl to the current binding level.  */\n   gnat_pushdecl (var_decl, gnat_node);\n \n-  if (TREE_CODE (var_decl) == VAR_DECL)\n+  if (TREE_CODE (var_decl) == VAR_DECL && asm_name)\n     {\n-      if (asm_name)\n-\t{\n-\t  /* Let the target mangle the name if this isn't a verbatim asm.  */\n-\t  if (*IDENTIFIER_POINTER (asm_name) != '*')\n-\t    asm_name = targetm.mangle_decl_assembler_name (var_decl, asm_name);\n-\n-\t  SET_DECL_ASSEMBLER_NAME (var_decl, asm_name);\n-\t}\n+      /* Let the target mangle the name if this isn't a verbatim asm.  */\n+      if (*IDENTIFIER_POINTER (asm_name) != '*')\n+\tasm_name = targetm.mangle_decl_assembler_name (var_decl, asm_name);\n \n-      if (global_bindings_p ())\n-\trest_of_decl_compilation (var_decl, true, 0);\n+      SET_DECL_ASSEMBLER_NAME (var_decl, asm_name);\n     }\n \n   return var_decl;\n@@ -5200,13 +5191,12 @@ smaller_form_type_p (tree type, tree orig_type)\n   return tree_int_cst_lt (size, osize) != 0;\n }\n \n-/* Keep track of types used at the global level and emit debug info\n-   for all global types.  */\n+/* Perform final processing on global declarations.  */\n \n static GTY (()) tree dummy_global;\n \n void\n-note_types_used_by_globals (void)\n+gnat_write_global_declarations (void)\n {\n   unsigned int i;\n   tree iter;\n@@ -5235,13 +5225,20 @@ note_types_used_by_globals (void)\n \t}\n     }\n \n-  /* Output debug information for all global type declarations.  This ensures\n-     that global types whose compilation cannot been finalized earlier, e.g.\n-     pointers to Taft amendment types, have their compilation finalized in\n-     the right context.  */\n-  FOR_EACH_VEC_SAFE_ELT (type_decls, i, iter)\n-    if (!DECL_IGNORED_P (iter))\n+  /* Output debug information for all global type declarations first.  This\n+     ensures that global types whose compilation hasn't been finalized yet,\n+     for example pointers to Taft amendment types, have their compilation\n+     finalized in the right context.  */\n+  FOR_EACH_VEC_SAFE_ELT (global_decls, i, iter)\n+    if (TREE_CODE (iter) == TYPE_DECL && !DECL_IGNORED_P (iter))\n       debug_hooks->type_decl (iter, false);\n+\n+  /* Then output the global variables.  We need to do that after the debug\n+     information is emitted above so that \"forward\" type declarations are\n+     properly merged with their definition in the debug information.  */\n+  FOR_EACH_VEC_SAFE_ELT (global_decls, i, iter)\n+    if (TREE_CODE (iter) == VAR_DECL)\n+      rest_of_decl_compilation (iter, true, 0);\n }\n \n /* ************************************************************************"}]}