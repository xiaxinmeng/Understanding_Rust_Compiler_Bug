{"sha": "8236c8eb4f599f95d76aafcdc11720edbce407cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODIzNmM4ZWI0ZjU5OWY5NWQ3NmFhZmNkYzExNzIwZWRiY2U0MDdjZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-12-14T14:09:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-12-14T14:09:59Z"}, "message": "re PR tree-optimization/46909 (Logical OR expressions are miscompiled)\n\n\tPR tree-optimization/46909\n\t* gimple-fold.c (and_var_with_comparison_1): Save partial\n\tresult even in the is_and case, if both partial results\n\tare the same, return it.\n\t(or_var_with_comparison_1): Use is_or predicate instead of\n\tinnercode == TRUTH_OR_EXPR test.  Save partial result\n\teven in the is_or case, if both partial results are the\n\tsame, return it.  In the !is_or case when both partial\n\tresults are the same, return the partial result instead\n\tof boolean_true_node.\n\n\t* gcc.c-torture/execute/pr46909-1.c: New test.\n\t* gcc.c-torture/execute/pr46909-2.c: New test.\n\t* gcc.dg/pr46909.c: New test.\n\nFrom-SVN: r167800", "tree": {"sha": "e408f2279c770c233318337d4a252ee4b8fb25c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e408f2279c770c233318337d4a252ee4b8fb25c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8236c8eb4f599f95d76aafcdc11720edbce407cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8236c8eb4f599f95d76aafcdc11720edbce407cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8236c8eb4f599f95d76aafcdc11720edbce407cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8236c8eb4f599f95d76aafcdc11720edbce407cf/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2b503136079b6b526bd438b47ae6c5163942b7d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b503136079b6b526bd438b47ae6c5163942b7d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b503136079b6b526bd438b47ae6c5163942b7d0"}], "stats": {"total": 126, "additions": 105, "deletions": 21}, "files": [{"sha": "b4efa6fe7ac5b37896dd435b3bdabdfb4bb6be68", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8236c8eb4f599f95d76aafcdc11720edbce407cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8236c8eb4f599f95d76aafcdc11720edbce407cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8236c8eb4f599f95d76aafcdc11720edbce407cf", "patch": "@@ -1,3 +1,16 @@\n+2010-12-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/46909\n+\t* gimple-fold.c (and_var_with_comparison_1): Save partial\n+\tresult even in the is_and case, if both partial results\n+\tare the same, return it.\n+\t(or_var_with_comparison_1): Use is_or predicate instead of\n+\tinnercode == TRUTH_OR_EXPR test.  Save partial result\n+\teven in the is_or case, if both partial results are the\n+\tsame, return it.  In the !is_or case when both partial\n+\tresults are the same, return the partial result instead\n+\tof boolean_true_node.\n+\n 2010-12-14  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/46667"}, {"sha": "bf5e80449dec45083a4ed258da955c368ad7e0da", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8236c8eb4f599f95d76aafcdc11720edbce407cf/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8236c8eb4f599f95d76aafcdc11720edbce407cf/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=8236c8eb4f599f95d76aafcdc11720edbce407cf", "patch": "@@ -2008,14 +2008,11 @@ and_var_with_comparison_1 (gimple stmt,\n \t  /* Handle the OR case, where we are redistributing:\n \t     (inner1 OR inner2) AND (op2a code2 op2b)\n \t     => (t OR (inner2 AND (op2a code2 op2b)))  */\n-\t  else\n-\t    {\n-\t      if (integer_onep (t))\n-\t\treturn boolean_true_node;\n-\t      else\n-\t\t/* Save partial result for later.  */\n-\t\tpartial = t;\n-\t    }\n+\t  else if (integer_onep (t))\n+\t    return boolean_true_node;\n+\n+\t  /* Save partial result for later.  */\n+\t  partial = t;\n \t}\n       \n       /* Compute the second partial result, (inner2 AND (op2a code op2b)) */\n@@ -2036,6 +2033,10 @@ and_var_with_comparison_1 (gimple stmt,\n \t\treturn inner1;\n \t      else if (integer_zerop (t))\n \t\treturn boolean_false_node;\n+\t      /* If both are the same, we can apply the identity\n+\t\t (x AND x) == x.  */\n+\t      else if (partial && same_bool_result_p (t, partial))\n+\t\treturn t;\n \t    }\n \n \t  /* Handle the OR case. where we are redistributing:\n@@ -2445,7 +2446,7 @@ or_var_with_comparison_1 (gimple stmt,\n \t     => (t OR inner2)\n \t     If the partial result t is a constant, we win.  Otherwise\n \t     continue on to try reassociating with the other inner test.  */\n-\t  if (innercode == TRUTH_OR_EXPR)\n+\t  if (is_or)\n \t    {\n \t      if (integer_onep (t))\n \t\treturn boolean_true_node;\n@@ -2456,14 +2457,11 @@ or_var_with_comparison_1 (gimple stmt,\n \t  /* Handle the AND case, where we are redistributing:\n \t     (inner1 AND inner2) OR (op2a code2 op2b)\n \t     => (t AND (inner2 OR (op2a code op2b)))  */\n-\t  else\n-\t    {\n-\t      if (integer_zerop (t))\n-\t\treturn boolean_false_node;\n-\t      else\n-\t\t/* Save partial result for later.  */\n-\t\tpartial = t;\n-\t    }\n+\t  else if (integer_zerop (t))\n+\t    return boolean_false_node;\n+\n+\t  /* Save partial result for later.  */\n+\t  partial = t;\n \t}\n       \n       /* Compute the second partial result, (inner2 OR (op2a code op2b)) */\n@@ -2477,13 +2475,18 @@ or_var_with_comparison_1 (gimple stmt,\n \t{\n \t  /* Handle the OR case, where we are reassociating:\n \t     (inner1 OR inner2) OR (op2a code2 op2b)\n-\t     => (inner1 OR t)  */\n-\t  if (innercode == TRUTH_OR_EXPR)\n+\t     => (inner1 OR t)\n+\t     => (t OR partial)  */\n+\t  if (is_or)\n \t    {\n \t      if (integer_zerop (t))\n \t\treturn inner1;\n \t      else if (integer_onep (t))\n \t\treturn boolean_true_node;\n+\t      /* If both are the same, we can apply the identity\n+\t\t (x OR x) == x.  */\n+\t      else if (partial && same_bool_result_p (t, partial))\n+\t\treturn t;\n \t    }\n \t  \n \t  /* Handle the AND case, where we are redistributing:\n@@ -2500,13 +2503,13 @@ or_var_with_comparison_1 (gimple stmt,\n \t\t     operand to the redistributed AND expression.  The\n \t\t     interesting case is when at least one is true.\n \t\t     Or, if both are the same, we can apply the identity\n-\t\t     (x AND x) == true.  */\n+\t\t     (x AND x) == x.  */\n \t\t  if (integer_onep (partial))\n \t\t    return t;\n \t\t  else if (integer_onep (t))\n \t\t    return partial;\n \t\t  else if (same_bool_result_p (t, partial))\n-\t\t    return boolean_true_node;\n+\t\t    return t;\n \t\t}\n \t    }\n \t}"}, {"sha": "0d20e5127f9590466002311c1f4d9f9986439788", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8236c8eb4f599f95d76aafcdc11720edbce407cf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8236c8eb4f599f95d76aafcdc11720edbce407cf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8236c8eb4f599f95d76aafcdc11720edbce407cf", "patch": "@@ -1,3 +1,10 @@\n+2010-12-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/46909\n+\t* gcc.c-torture/execute/pr46909-1.c: New test.\n+\t* gcc.c-torture/execute/pr46909-2.c: New test.\n+\t* gcc.dg/pr46909.c: New test.\n+\n 2010-12-14  Alexander Monakov  <amonakov@ispras.ru>\n \n \tPR rtl-optimization/46875"}, {"sha": "c6c92fcbb1e1d4445522b37bfff14f52a8c08b05", "filename": "gcc/testsuite/gcc.c-torture/execute/pr46909-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8236c8eb4f599f95d76aafcdc11720edbce407cf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr46909-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8236c8eb4f599f95d76aafcdc11720edbce407cf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr46909-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr46909-1.c?ref=8236c8eb4f599f95d76aafcdc11720edbce407cf", "patch": "@@ -0,0 +1,22 @@\n+/* PR tree-optimization/46909 */\n+\n+extern void abort ();\n+\n+int\n+__attribute__ ((__noinline__))\n+foo (unsigned int x)\n+{\n+  if (! (x == 4 || x == 6) || (x == 2 || x == 6))\n+    return 1;\n+  return -1;\n+}\n+\n+int\n+main ()\n+{\n+  int i;\n+  for (i = -10; i < 10; i++)\n+    if (foo (i) != 1 - 2 * (i == 4))\n+      abort ();\n+  return 0;\n+}"}, {"sha": "33da2189c447a78e91235aa3d18021beefc0a3ca", "filename": "gcc/testsuite/gcc.c-torture/execute/pr46909-2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8236c8eb4f599f95d76aafcdc11720edbce407cf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr46909-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8236c8eb4f599f95d76aafcdc11720edbce407cf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr46909-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr46909-2.c?ref=8236c8eb4f599f95d76aafcdc11720edbce407cf", "patch": "@@ -0,0 +1,22 @@\n+/* PR tree-optimization/46909 */\n+\n+extern void abort (void);\n+\n+int\n+__attribute__((noinline))\n+foo (int x)\n+{\n+  if ((x != 0 && x != 13) || x == 5 || x == 20)\n+    return 1;\n+  return -1;\n+}\n+\n+int\n+main (void)\n+{\n+  int i;\n+  for (i = -10; i < 30; i++)\n+    if (foo (i) != 1 - 2 * (i == 0) - 2 * (i == 13))\n+      abort ();\n+  return 0;\n+}"}, {"sha": "affedab8676fd3b10f3af69bc0d31f198aef81c8", "filename": "gcc/testsuite/gcc.dg/pr46909.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8236c8eb4f599f95d76aafcdc11720edbce407cf/gcc%2Ftestsuite%2Fgcc.dg%2Fpr46909.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8236c8eb4f599f95d76aafcdc11720edbce407cf/gcc%2Ftestsuite%2Fgcc.dg%2Fpr46909.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr46909.c?ref=8236c8eb4f599f95d76aafcdc11720edbce407cf", "patch": "@@ -0,0 +1,17 @@\n+/* PR tree-optimization/46909 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-ifcombine\" } */\n+\n+extern void abort ();\n+\n+int\n+__attribute__ ((__noinline__))\n+foo (unsigned int x)\n+{\n+  if (! (x == 4 || x == 6) || (x == 2 || x == 6))\n+    return 1;\n+  return -1;\n+}\n+\n+/* { dg-final { scan-tree-dump \"optimizing two comparisons to x_\\[0-9\\]+\\\\(D\\\\) != 4\" \"ifcombine\" } } */\n+/* { dg-final { cleanup-tree-dump \"ifcombine\" } } */"}]}