{"sha": "08a2b1188a24261747454d0c91aef90c75e2eeda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhhMmIxMTg4YTI0MjYxNzQ3NDU0ZDBjOTFhZWY5MGM3NWUyZWVkYQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-06-04T06:52:49Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-06-04T06:52:49Z"}, "message": "(output_function_epilogue): If the last insn in the current function is a (volatile) call...\n\n(output_function_epilogue): If the last insn in the\ncurrent function is a (volatile) call, then emit an extra\nnop after the call so that RP will point to a valid instruction.\n\nFrom-SVN: r4630", "tree": {"sha": "d9fe0655f32697c46743ed97098736d1f20df6ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9fe0655f32697c46743ed97098736d1f20df6ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08a2b1188a24261747454d0c91aef90c75e2eeda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08a2b1188a24261747454d0c91aef90c75e2eeda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08a2b1188a24261747454d0c91aef90c75e2eeda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08a2b1188a24261747454d0c91aef90c75e2eeda/comments", "author": null, "committer": null, "parents": [{"sha": "71cdef7e2ef1f0934855d6102be21992c7194095", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71cdef7e2ef1f0934855d6102be21992c7194095", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71cdef7e2ef1f0934855d6102be21992c7194095"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "58fe1e0edd7ed4b99bcccea8ce1f79929af238bb", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08a2b1188a24261747454d0c91aef90c75e2eeda/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08a2b1188a24261747454d0c91aef90c75e2eeda/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=08a2b1188a24261747454d0c91aef90c75e2eeda", "patch": "@@ -2155,14 +2155,36 @@ output_function_epilogue (file, size)\n      FILE *file;\n      int size;\n {\n+\n+  rtx insn = get_last_insn ();\n+\n   /* hppa_expand_epilogue does the dirty work now.  We just need\n      to output the assembler directives which denote the end\n-     of a function.  */\n+     of a function.\n+\n+     To make debuggers happy, emit a nop if the epilogue was completely\n+     eliminated due to a volatile call as the last insn in the\n+     current function.  That way the return address (in %r2) will \n+     always point to a valid instruction in the current function.  */\n+\n+  /* Get the last real insn.  */\n+  if (GET_CODE (insn) == NOTE)\n+    insn = prev_real_insn (insn);\n+\n+  /* If it is a sequence, then look inside.  */\n+  if (insn && GET_CODE (insn) == INSN && GET_CODE (PATTERN (insn)) == SEQUENCE)\n+    insn = XVECEXP (PATTERN (insn), 0, 0);\n+\n+  /* If insn is a CALL_INSN, then it must be a call to a volatile \n+     function (otherwise there would be epilogue insns).  */\n+  if (insn && GET_CODE (insn) == CALL_INSN)\n+    fprintf (file, \"\\tnop\\n\");\n+  \n   fprintf (file, \"\\t.EXIT\\n\\t.PROCEND\\n\");\n }\n \n void\n-hppa_expand_epilogue()\n+hppa_expand_epilogue ()\n {\n   rtx tmpreg; \n   int offset,i;"}]}