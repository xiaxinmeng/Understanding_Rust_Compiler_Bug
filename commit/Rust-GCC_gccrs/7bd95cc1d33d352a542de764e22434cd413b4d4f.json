{"sha": "7bd95cc1d33d352a542de764e22434cd413b4d4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JkOTVjYzFkMzNkMzUyYTU0MmRlNzY0ZTIyNDM0Y2Q0MTNiNGQ0Zg==", "commit": {"author": {"name": "Brendan Kehoe", "email": "brendan@gcc.gnu.org", "date": "1993-01-26T18:45:24Z"}, "committer": {"name": "Brendan Kehoe", "email": "brendan@gcc.gnu.org", "date": "1993-01-26T18:45:24Z"}, "message": "Makefile.in (insn-*.[ch], [...]): When using a trailing semicolon to force a rule to not do anything...\n\n        * Makefile.in (insn-*.[ch], protoize.o, unprotoize.o, install): When\n        using a trailing semicolon to force a rule to not do anything,\n        explicitly run the command `true', to avoid warnings or other\n        problems with versions of make which don't like null commands.\n\nFrom-SVN: r3349", "tree": {"sha": "3f30aa69b100442d338165b1dea257a9772b24df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f30aa69b100442d338165b1dea257a9772b24df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bd95cc1d33d352a542de764e22434cd413b4d4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bd95cc1d33d352a542de764e22434cd413b4d4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bd95cc1d33d352a542de764e22434cd413b4d4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bd95cc1d33d352a542de764e22434cd413b4d4f/comments", "author": null, "committer": null, "parents": [{"sha": "293e1467cb5550b0fbaf264584f224012eb9d1c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/293e1467cb5550b0fbaf264584f224012eb9d1c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/293e1467cb5550b0fbaf264584f224012eb9d1c9"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "b0f28074367f44e54d1c9932a949357640e3c1a1", "filename": "gcc/Makefile.in", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bd95cc1d33d352a542de764e22434cd413b4d4f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bd95cc1d33d352a542de764e22434cd413b4d4f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7bd95cc1d33d352a542de764e22434cd413b4d4f", "patch": "@@ -954,21 +954,23 @@ alloca.o:\talloca.c\n \n # Each of the insn-*.[ch] rules has a semicolon at the end,\n # for otherwise the system Make on SunOS 4.1 never tries\n-# to recompile insn-*.o.\n+# to recompile insn-*.o.  To avoid problems and extra noise from\n+# versions of make which don't like empty commands (nothing after the\n+# trailing `;'), we call true for each.\n \n-insn-config.h: stamp-config ;\n+insn-config.h: stamp-config ; true\n stamp-config : md genconfig $(srcdir)/move-if-change\n \t./genconfig md > tmp-config.h\n \t$(srcdir)/move-if-change tmp-config.h insn-config.h\n \ttouch stamp-config\n \n-insn-flags.h: stamp-flags ;\n+insn-flags.h: stamp-flags ; true\n stamp-flags : md genflags $(srcdir)/move-if-change\n \t./genflags md > tmp-flags.h\n \t$(srcdir)/move-if-change tmp-flags.h insn-flags.h\n \ttouch stamp-flags\n \n-insn-codes.h: stamp-codes ;\n+insn-codes.h: stamp-codes ; true\n stamp-codes : md gencodes $(srcdir)/move-if-change\n \t./gencodes md > tmp-codes.h\n \t$(srcdir)/move-if-change tmp-codes.h insn-codes.h\n@@ -978,7 +980,7 @@ insn-emit.o : insn-emit.c $(CONFIG_H) $(RTL_H) expr.h real.h output.h \\\n   insn-config.h insn-flags.h insn-codes.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-emit.c\n \n-insn-emit.c: stamp-emit ;\n+insn-emit.c: stamp-emit ; true\n stamp-emit : md genemit $(srcdir)/move-if-change\n \t./genemit md > tmp-emit.c\n \t$(srcdir)/move-if-change tmp-emit.c insn-emit.c\n@@ -988,7 +990,7 @@ insn-recog.o : insn-recog.c $(CONFIG_H) $(RTL_H) insn-config.h recog.h \\\n   real.h output.h flags.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-recog.c\n \n-insn-recog.c: stamp-recog ;\n+insn-recog.c: stamp-recog ; true\n stamp-recog : md genrecog $(srcdir)/move-if-change\n \t./genrecog md > tmp-recog.c\n \t$(srcdir)/move-if-change tmp-recog.c insn-recog.c\n@@ -997,7 +999,7 @@ stamp-recog : md genrecog $(srcdir)/move-if-change\n insn-extract.o : insn-extract.c $(CONFIG_H) $(RTL_H)\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-extract.c\n \n-insn-extract.c: stamp-extract ;\n+insn-extract.c: stamp-extract ; true\n stamp-extract : md genextract $(srcdir)/move-if-change\n \t./genextract md > tmp-extract.c\n \t$(srcdir)/move-if-change tmp-extract.c insn-extract.c\n@@ -1006,7 +1008,7 @@ stamp-extract : md genextract $(srcdir)/move-if-change\n insn-peep.o : insn-peep.c $(CONFIG_H) $(RTL_H) regs.h output.h real.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-peep.c\n \n-insn-peep.c: stamp-peep ;\n+insn-peep.c: stamp-peep ; true\n stamp-peep : md genpeep $(srcdir)/move-if-change\n \t./genpeep md > tmp-peep.c\n \t$(srcdir)/move-if-change tmp-peep.c insn-peep.c\n@@ -1016,13 +1018,13 @@ insn-attrtab.o : insn-attrtab.c $(CONFIG_H) $(RTL_H) regs.h real.h output.h \\\n      insn-attr.h insn-config.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-attrtab.c\n \n-insn-attr.h: stamp-attr ;\n+insn-attr.h: stamp-attr ; true\n stamp-attr : md genattr $(srcdir)/move-if-change\n \t./genattr md > tmp-attr.h\n \t$(srcdir)/move-if-change tmp-attr.h insn-attr.h\n \ttouch stamp-attr\n \n-insn-attrtab.c: stamp-attrtab ;\n+insn-attrtab.c: stamp-attrtab ; true\n stamp-attrtab : md genattrtab $(srcdir)/move-if-change\n \tif cmp -s $(PREMADE_ATTRTAB_MD) md;\t\\\n \tthen\t\t\t\t\t\\\n@@ -1039,7 +1041,7 @@ insn-output.o : insn-output.c $(CONFIG_H) $(RTL_H) regs.h real.h conditions.h \\\n     insn-codes.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-output.c\n \n-insn-output.c: stamp-output ;\n+insn-output.c: stamp-output ; true\n stamp-output : md genoutput $(srcdir)/move-if-change\n \t./genoutput md > tmp-output.c\n \t$(srcdir)/move-if-change tmp-output.c insn-output.c\n@@ -1188,17 +1190,20 @@ cccp.o: cccp.c $(CONFIG_H) pcp.h version.c\n \t  -DTOOLDIR=\\\"$(tooldir)/\\\" \\\n \t  -c `echo $(srcdir)/cccp.c | sed 's,^\\./,,'`\n \n+# Note for the stamp targets, we run the program `true' instead of\n+# having an empty command (nothing following the semicolon).\n+\n proto: config.status protoize unprotoize SYSCALLS.c.X\n \n protoize: protoize.o getopt.o getopt1.o getpwd.o version.o $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) \\\n \t  protoize.o getopt.o getopt1.o getpwd.o version.o $(LIBS) -o $@\n-protoize.o: stamp-proto ;\n+protoize.o: stamp-proto ; true\n \n unprotoize: unprotoize.o getopt.o getopt1.o getpwd.o version.o $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) \\\n \t  unprotoize.o getopt.o getopt1.o getpwd.o version.o $(LIBS) -o $@\n-unprotoize.o:\tstamp-proto ;\n+unprotoize.o:\tstamp-proto ; true\n \n stamp-proto:\t$(srcdir)/protoize.c getopt.h $(CONFIG_H)\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n@@ -1427,8 +1432,9 @@ realclean: distclean\n # Also use `install-collect2' to install collect2 when the config files don't.\n \n # The semicolon is to prevent the install.sh -> install default rule\n-# from doing anything.\n-install: $(INSTALL_TARGET) ;\n+# from doing anything.  Having it run true helps avoid problems and\n+# noise from versions of make which don't like to have null commands.\n+install: $(INSTALL_TARGET) ; true\n \n # Copy the compiler files into directories where they will be run.\n install-normal: install-common install-libgcc $(INSTALL_HEADERS) install-man"}]}