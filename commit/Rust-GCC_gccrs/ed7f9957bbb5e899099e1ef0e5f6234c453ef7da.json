{"sha": "ed7f9957bbb5e899099e1ef0e5f6234c453ef7da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ3Zjk5NTdiYmI1ZTg5OTA5OWUxZWYwZTVmNjIzNGM0NTNlZjdkYQ==", "commit": {"author": {"name": "kamlesh kumar", "email": "kamleshbhalui@gmail.com", "date": "2020-11-02T15:10:21Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-11-03T19:36:24Z"}, "message": "c++: DR2303, ambiguous base deduction [PR97453]\n\nWhen there are two possible matches and one is a base of the other, choose\nthe derived class rather than fail.\n\ngcc/cp/ChangeLog\n\n2020-10-21  Kamlesh Kumar  <kamleshbhalui@gmail.com>\n\t    Jason Merrill  <jason@redhat.com>\n\n\tPR c++/97453\n\tDR2303\n\t* pt.c (get_template_base): Consider closest base in template\n\tdeduction when base of base also matches.\n\ngcc/testsuite/ChangeLog\n\n2020-10-21  Kamlesh Kumar  <kamleshbhalui@gmail.com>\n\n\t* g++.dg/DRs/dr2303.C: New test.", "tree": {"sha": "e234f66f71aead87f0e5a3feab0f35759ee690ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e234f66f71aead87f0e5a3feab0f35759ee690ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed7f9957bbb5e899099e1ef0e5f6234c453ef7da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed7f9957bbb5e899099e1ef0e5f6234c453ef7da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed7f9957bbb5e899099e1ef0e5f6234c453ef7da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed7f9957bbb5e899099e1ef0e5f6234c453ef7da/comments", "author": {"login": "kamleshbhalui", "id": 22392991, "node_id": "MDQ6VXNlcjIyMzkyOTkx", "avatar_url": "https://avatars.githubusercontent.com/u/22392991?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamleshbhalui", "html_url": "https://github.com/kamleshbhalui", "followers_url": "https://api.github.com/users/kamleshbhalui/followers", "following_url": "https://api.github.com/users/kamleshbhalui/following{/other_user}", "gists_url": "https://api.github.com/users/kamleshbhalui/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamleshbhalui/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamleshbhalui/subscriptions", "organizations_url": "https://api.github.com/users/kamleshbhalui/orgs", "repos_url": "https://api.github.com/users/kamleshbhalui/repos", "events_url": "https://api.github.com/users/kamleshbhalui/events{/privacy}", "received_events_url": "https://api.github.com/users/kamleshbhalui/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2058f5812bea3673859a68f9bfea61dbce6730f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2058f5812bea3673859a68f9bfea61dbce6730f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2058f5812bea3673859a68f9bfea61dbce6730f"}], "stats": {"total": 53, "additions": 51, "deletions": 2}, "files": [{"sha": "f401c75b9e507a8c2f4a13049d9257fbdd2222f2", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed7f9957bbb5e899099e1ef0e5f6234c453ef7da/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed7f9957bbb5e899099e1ef0e5f6234c453ef7da/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ed7f9957bbb5e899099e1ef0e5f6234c453ef7da", "patch": "@@ -22699,8 +22699,20 @@ get_template_base (tree tparms, tree targs, tree parm, tree arg,\n \t     applies.  */\n \t  if (rval && !same_type_p (r, rval))\n \t    {\n-\t      *result = NULL_TREE;\n-\t      return tbr_ambiguous_baseclass;\n+\t      /* [temp.deduct.call]/4.3: If there is a class C that is a\n+\t\t (direct or indirect) base class of D and derived (directly or\n+\t\t indirectly) from a class B and that would be a valid deduced\n+\t\t A, the deduced A cannot be B or pointer to B, respectively. */\n+\t      if (DERIVED_FROM_P (r, rval))\n+\t\t/* Ignore r.  */\n+\t\tcontinue;\n+\t      else if (DERIVED_FROM_P (rval, r))\n+\t\t/* Ignore rval.  */;\n+\t      else\n+\t\t{\n+\t\t  *result = NULL_TREE;\n+\t\t  return tbr_ambiguous_baseclass;\n+\t\t}\n \t    }\n \n \t  rval = r;"}, {"sha": "b6acb6e2197916bc518036e9fea84571a5d3089a", "filename": "gcc/testsuite/g++.dg/DRs/dr2303.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed7f9957bbb5e899099e1ef0e5f6234c453ef7da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr2303.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed7f9957bbb5e899099e1ef0e5f6234c453ef7da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr2303.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr2303.C?ref=ed7f9957bbb5e899099e1ef0e5f6234c453ef7da", "patch": "@@ -0,0 +1,37 @@\n+// DR 2303\n+// PR c++/97453\n+// { dg-do compile { target c++11 } }\n+\n+template <typename... T> struct A;\n+template <> struct A<>\n+{\n+};\n+template <typename T, typename... Ts> struct A<T, Ts...> : A<Ts...>\n+{\n+};\n+struct B : A<int, int>\n+{\n+};\n+\n+struct C : A<int, int>, A<int> //  { dg-warning \"direct base .A<int>. inaccessible in .C. due to ambiguity\" }\n+{\n+};\n+\n+struct D : A<int>, A<int, int> //  { dg-warning \"direct base .A<int>. inaccessible in .D. due to ambiguity\" }\n+{\n+};\n+template <typename... T>\n+void\n+f (const A<T...> &)\n+{\n+  static_assert (sizeof...(T) == 2, \"it should duduce to A<int,int>\");\n+}\n+\n+\n+void\n+g ()\n+{\n+  f (B{});\n+  f (C{});\n+  f (D{});\n+}"}]}