{"sha": "906668bb6f8c3f1eb4046dec89e9664554481eaa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA2NjY4YmI2ZjhjM2YxZWI0MDQ2ZGVjODllOTY2NDU1NDQ4MWVhYQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2010-08-02T09:51:39Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2010-08-02T09:51:39Z"}, "message": "final.c (final_scan_insn): Call CC_STATUS_INIT unconditionally.\n\n\t* final.c (final_scan_insn): Call CC_STATUS_INIT unconditionally.\n\t* config/arm/arm.c (thumb1_code): New variable.\n\t(arm_override_options): Set it.\n\t(thumb1_final_prescan_insn): Keep track of condition code status.\n\t(arm_adjust_cost): For Thumb, try to keep cc-setting insns next to\n\tjumps that depend on them.\n\t* config/arm/arm.h (thumb1_code): Declare variable.\n\t(struct machine_function): Guard with #ifndef GENERATOR_FILE.  Add\n\tmembers thumb1_cc_insn, thumb1_cc_op0, thumb1_cc_op1 and\n\tthumb1_cc_mode.\n\t(CC_STATUS_INIT): New macro.\n\t* config/arm/constraints.md (Pd): New constraint.\n\t* config/arm/predicates.md (noov_comparison_operator): New predicate.\n\t* config/arm/arm.md (is_thumb1): New define_attr.\n\t(conds): Set default to \"clob\" when generating Thumb1 code.\n\t(thumb1_bicsi3): Renamed from bicsi3.  All uses changed.  Condition\n\tcode are set.  Use two-operand assembly syntax.\n\t(thumb1_subsi3_insn): Condition codes are set.  Now a properly named\n\tpattern.\n\t(thumb1_andsi3_insn, thumb1_iorsi3_insn, thumb1_xorsi3_insn): Condition\n\tcodes are set.  Use two-operand assembly syntax.\n\t(zero_extendhisi splitter): Remove constraints.\n\t(thumb1_movsi_insn, thumb1_movhi_insn, thumb1_movqi_insn, thumb1_movhf,\n\tthumb1_movsf_insn): Set conds attribute as appropriate.\n\t(cbranchsi4_insn): Use condition code status from struct\n\tmachine_function to determine whether the comparison can be eliminated.\n\tDiscourage the alternative using high registers.\n\t(movsi_cbranchsi4, andsi3_cbranch, orrsi3_cbranch_scratch,\n\torrsi3_cbranch, xorsi3_cbranch_scratch, xorsi3_cbranch,\n\tbicsi3_cbranch_scratch, bicsi3_cbranch, subsi3_cbranch_scratch,\n\tsubsi3_cbranch): Delete.\n\t(movsi_cbranchsi4 peepholes): Rewrite to generate a sequence of\n\tone subtract and one cbranch insn.\n\nFrom-SVN: r162813", "tree": {"sha": "27d233f3de06e2d1b08481a8ff99d7a0b0370973", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27d233f3de06e2d1b08481a8ff99d7a0b0370973"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/906668bb6f8c3f1eb4046dec89e9664554481eaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/906668bb6f8c3f1eb4046dec89e9664554481eaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/906668bb6f8c3f1eb4046dec89e9664554481eaa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/906668bb6f8c3f1eb4046dec89e9664554481eaa/comments", "author": null, "committer": null, "parents": [{"sha": "f37e278a150cfdb1ead8b5e0662a27f4ee58ae89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f37e278a150cfdb1ead8b5e0662a27f4ee58ae89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f37e278a150cfdb1ead8b5e0662a27f4ee58ae89"}], "stats": {"total": 836, "additions": 195, "deletions": 641}, "files": [{"sha": "fb365750c465eb62ea308072c9d39a11508821dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/906668bb6f8c3f1eb4046dec89e9664554481eaa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/906668bb6f8c3f1eb4046dec89e9664554481eaa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=906668bb6f8c3f1eb4046dec89e9664554481eaa", "patch": "@@ -3,6 +3,40 @@\n \t* postreload.c (reload_cse_simplify_operands): Take attribute enabled\n \tinto account.\n \n+\t* final.c (final_scan_insn): Call CC_STATUS_INIT unconditionally.\n+\t* config/arm/arm.c (thumb1_code): New variable.\n+\t(arm_override_options): Set it.\n+\t(thumb1_final_prescan_insn): Keep track of condition code status.\n+\t(arm_adjust_cost): For Thumb, try to keep cc-setting insns next to\n+\tjumps that depend on them.\n+\t* config/arm/arm.h (thumb1_code): Declare variable.\n+\t(struct machine_function): Guard with #ifndef GENERATOR_FILE.  Add\n+\tmembers thumb1_cc_insn, thumb1_cc_op0, thumb1_cc_op1 and\n+\tthumb1_cc_mode.\n+\t(CC_STATUS_INIT): New macro.\n+\t* config/arm/constraints.md (Pd): New constraint.\n+\t* config/arm/predicates.md (noov_comparison_operator): New predicate.\n+\t* config/arm/arm.md (is_thumb1): New define_attr.\n+\t(conds): Set default to \"clob\" when generating Thumb1 code.\n+\t(thumb1_bicsi3): Renamed from bicsi3.  All uses changed.  Condition\n+\tcode are set.  Use two-operand assembly syntax.\n+\t(thumb1_subsi3_insn): Condition codes are set.  Now a properly named\n+\tpattern.\n+\t(thumb1_andsi3_insn, thumb1_iorsi3_insn, thumb1_xorsi3_insn): Condition\n+\tcodes are set.  Use two-operand assembly syntax.\n+\t(zero_extendhisi splitter): Remove constraints.\n+\t(thumb1_movsi_insn, thumb1_movhi_insn, thumb1_movqi_insn, thumb1_movhf,\n+\tthumb1_movsf_insn): Set conds attribute as appropriate.\n+\t(cbranchsi4_insn): Use condition code status from struct\n+\tmachine_function to determine whether the comparison can be eliminated.\n+\tDiscourage the alternative using high registers.\n+\t(movsi_cbranchsi4, andsi3_cbranch, orrsi3_cbranch_scratch,\n+\torrsi3_cbranch, xorsi3_cbranch_scratch, xorsi3_cbranch,\n+\tbicsi3_cbranch_scratch, bicsi3_cbranch, subsi3_cbranch_scratch,\n+\tsubsi3_cbranch): Delete.\n+\t(movsi_cbranchsi4 peepholes): Rewrite to generate a sequence of\n+\tone subtract and one cbranch insn.\n+\n 2010-08-02  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \t* config/arm/arm.c (COSTS_N_INSNS): Remove definition."}, {"sha": "d22ded39b33f8030d64b9a6769cd869024af46b4", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 53, "deletions": 3, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/906668bb6f8c3f1eb4046dec89e9664554481eaa/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/906668bb6f8c3f1eb4046dec89e9664554481eaa/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=906668bb6f8c3f1eb4046dec89e9664554481eaa", "patch": "@@ -687,6 +687,9 @@ int arm_tune_cortex_a9 = 0;\n /* Nonzero if generating Thumb instructions.  */\n int thumb_code = 0;\n \n+/* Nonzero if generating Thumb-1 instructions.  */\n+int thumb1_code = 0;\n+\n /* Nonzero if we should define __THUMB_INTERWORK__ in the\n    preprocessor.\n    XXX This is a bit of a hack, it's intended to help work around\n@@ -718,6 +721,7 @@ enum arm_pcs arm_pcs_default;\n int arm_ccfsm_state;\n /* arm_current_cc is also used for Thumb-2 cond_exec blocks.  */\n enum arm_cond_code arm_current_cc;\n+\n rtx arm_target_insn;\n int arm_target_label;\n /* The number of conditionally executed insns, including the current insn.  */\n@@ -1572,7 +1576,8 @@ arm_override_options (void)\n \n   arm_ld_sched = (tune_flags & FL_LDSCHED) != 0;\n   arm_tune_strongarm = (tune_flags & FL_STRONG) != 0;\n-  thumb_code = (TARGET_ARM == 0);\n+  thumb_code = TARGET_ARM == 0;\n+  thumb1_code = TARGET_THUMB1 != 0;\n   arm_tune_wbuf = (tune_flags & FL_WBUF) != 0;\n   arm_tune_xscale = (tune_flags & FL_XSCALE) != 0;\n   arm_arch_iwmmxt = (insn_flags & FL_IWMMXT) != 0;\n@@ -7682,12 +7687,26 @@ arm_address_cost (rtx x, bool speed ATTRIBUTE_UNUSED)\n {\n   return TARGET_32BIT ? arm_arm_address_cost (x) : arm_thumb_address_cost (x);\n }\n-\n+/* This function implements the target macro TARGET_SCHED_ADJUST_COST.\n+   It corrects the value of COST based on the relationship between\n+   INSN and DEP through the dependence LINK.  It returns the new\n+   value.  */\n+  \n static int\n arm_adjust_cost (rtx insn, rtx link, rtx dep, int cost)\n {\n   rtx i_pat, d_pat;\n \n+  /* When generating Thumb-1 code, we want to place flag-setting operations\n+     close to a conditional branch which depends on them, so that we can\n+     omit the comparison.  */\n+  if (TARGET_THUMB1\n+      && REG_NOTE_KIND (link) == 0\n+      && recog_memoized (insn) == CODE_FOR_cbranchsi4_insn\n+      && recog_memoized (dep) >= 0\n+      && get_attr_conds (dep) == CONDS_SET)\n+    return 0;\n+\n   /* Some true dependencies can have a higher cost depending\n      on precisely how certain input operands are used.  */\n   if (arm_tune_xscale\n@@ -19474,14 +19493,45 @@ thumb_exit (FILE *f, int reg_containing_return_addr)\n   /* Return to caller.  */\n   asm_fprintf (f, \"\\tbx\\t%r\\n\", reg_containing_return_addr);\n }\n-\n \f\n+/* Scan INSN just before assembler is output for it.\n+   For Thumb-1, we track the status of the condition codes; this\n+   information is used in the cbranchsi4_insn pattern.  */\n void\n thumb1_final_prescan_insn (rtx insn)\n {\n   if (flag_print_asm_name)\n     asm_fprintf (asm_out_file, \"%@ 0x%04x\\n\",\n \t\t INSN_ADDRESSES (INSN_UID (insn)));\n+  /* Don't overwrite the previous setter when we get to a cbranch.  */\n+  if (INSN_CODE (insn) != CODE_FOR_cbranchsi4_insn)\n+    {\n+      enum attr_conds conds;\n+\n+      if (cfun->machine->thumb1_cc_insn)\n+\t{\n+\t  if (modified_in_p (cfun->machine->thumb1_cc_op0, insn)\n+\t      || modified_in_p (cfun->machine->thumb1_cc_op1, insn))\n+\t    CC_STATUS_INIT;\n+\t}\n+      conds = get_attr_conds (insn);\n+      if (conds == CONDS_SET)\n+\t{\n+\t  rtx set = single_set (insn);\n+\t  cfun->machine->thumb1_cc_insn = insn;\n+\t  cfun->machine->thumb1_cc_op0 = SET_DEST (set);\n+\t  cfun->machine->thumb1_cc_op1 = const0_rtx;\n+\t  cfun->machine->thumb1_cc_mode = CC_NOOVmode;\n+\t  if (INSN_CODE (insn) == CODE_FOR_thumb1_subsi3_insn)\n+\t    {\n+\t      rtx src1 = XEXP (SET_SRC (set), 1);\n+\t      if (src1 == const0_rtx)\n+\t\tcfun->machine->thumb1_cc_mode = CCmode;\n+\t    }\n+\t}\n+      else if (conds != CONDS_NOCOND)\n+\tcfun->machine->thumb1_cc_insn = NULL_RTX;\n+    }\n }\n \n int"}, {"sha": "e90f1d3cbdd4f47172f92f3207fe7dbc31fa9e9e", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/906668bb6f8c3f1eb4046dec89e9664554481eaa/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/906668bb6f8c3f1eb4046dec89e9664554481eaa/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=906668bb6f8c3f1eb4046dec89e9664554481eaa", "patch": "@@ -412,9 +412,12 @@ extern int arm_arch7em;\n /* Nonzero if this chip can benefit from load scheduling.  */\n extern int arm_ld_sched;\n \n-/* Nonzero if generating thumb code.  */\n+/* Nonzero if generating Thumb code, either Thumb-1 or Thumb-2.  */\n extern int thumb_code;\n \n+/* Nonzero if generating Thumb-1 code.  */\n+extern int thumb1_code;\n+\n /* Nonzero if this chip is a StrongARM.  */\n extern int arm_tune_strongarm;\n \n@@ -1593,6 +1596,7 @@ typedef struct GTY(()) arm_stack_offsets\n }\n arm_stack_offsets;\n \n+#ifndef GENERATOR_FILE\n /* A C structure for machine-specific, per-function data.\n    This is added to the cfun structure.  */\n typedef struct GTY(()) machine_function\n@@ -1623,8 +1627,16 @@ typedef struct GTY(()) machine_function\n   /* Set to 1 when a return insn is output, this means that the epilogue\n      is not needed.  */\n   int return_used_this_function;\n+  /* When outputting Thumb-1 code, record the last insn that provides\n+     information about condition codes, and the comparison operands.  */\n+  rtx thumb1_cc_insn;\n+  rtx thumb1_cc_op0;\n+  rtx thumb1_cc_op1;\n+  /* Also record the CC mode that is supported.  */\n+  enum machine_mode thumb1_cc_mode;\n }\n machine_function;\n+#endif\n \n /* As in the machine_function, a global set of call-via labels, for code \n    that is in text_section.  */\n@@ -2259,6 +2271,9 @@ extern int making_const_table;\n #define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE)  ((VALUE) = 32, 1)\n #define CTZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE)  ((VALUE) = 32, 1)\n \f\n+#define CC_STATUS_INIT \\\n+  do { cfun->machine->thumb1_cc_insn = NULL_RTX; } while (0)\n+\n #undef  ASM_APP_OFF\n #define ASM_APP_OFF (TARGET_THUMB1 ? \"\\t.code\\t16\\n\" : \\\n \t\t     TARGET_THUMB2 ? \"\\t.thumb\\n\" : \"\")"}, {"sha": "097defd07425d6f4a2deeae62999b1699d0f30ed", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 81, "deletions": 632, "changes": 713, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/906668bb6f8c3f1eb4046dec89e9664554481eaa/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/906668bb6f8c3f1eb4046dec89e9664554481eaa/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=906668bb6f8c3f1eb4046dec89e9664554481eaa", "patch": "@@ -151,6 +151,9 @@\n ; IS_ARCH6 is set to 'yes' when we are generating code form ARMv6.\n (define_attr \"is_arch6\" \"no,yes\" (const (symbol_ref \"arm_arch6\")))\n \n+; IS_THUMB1 is set to 'yes' iff we are generating Thumb-1 code.\n+(define_attr \"is_thumb1\" \"no,yes\" (const (symbol_ref \"thumb1_code\")))\n+\n ;; Operand number of an input operand that is shifted.  Zero if the\n ;; given instruction does not shift one of its input operands.\n (define_attr \"shift\" \"\" (const_int 0))\n@@ -339,7 +342,9 @@\n ;   output of this insn\n \n (define_attr \"conds\" \"use,set,clob,unconditional,nocond\"\n-\t(if_then_else (eq_attr \"type\" \"call\")\n+\t(if_then_else\n+\t (ior (eq_attr \"is_thumb1\" \"yes\")\n+\t      (eq_attr \"type\" \"call\"))\n \t (const_string \"clob\")\n \t (if_then_else (eq_attr \"neon_type\" \"none\")\n \t  (const_string \"nocond\")\n@@ -1080,14 +1085,14 @@\n   \"\n )\n \n-(define_insn \"*thumb1_subsi3_insn\"\n+(define_insn \"thumb1_subsi3_insn\"\n   [(set (match_operand:SI           0 \"register_operand\" \"=l\")\n \t(minus:SI (match_operand:SI 1 \"register_operand\" \"l\")\n-\t\t  (match_operand:SI 2 \"register_operand\" \"l\")))]\n+\t\t  (match_operand:SI 2 \"reg_or_int_operand\" \"lPd\")))]\n   \"TARGET_THUMB1\"\n   \"sub\\\\t%0, %1, %2\"\n-  [(set_attr \"length\" \"2\")]\n-)\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"conds\" \"set\")])\n \n ; ??? Check Thumb-2 split length\n (define_insn_and_split \"*arm_subsi3_insn\"\n@@ -1962,7 +1967,7 @@\n \t      operands[2] = force_reg (SImode,\n \t\t\t\t       GEN_INT (~INTVAL (operands[2])));\n \t      \n-\t      emit_insn (gen_bicsi3 (operands[0], operands[2], operands[1]));\n+\t      emit_insn (gen_thumb1_bicsi3 (operands[0], operands[2], operands[1]));\n \t      \n \t      DONE;\n \t    }\n@@ -2023,9 +2028,9 @@\n \t(and:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n \t\t(match_operand:SI 2 \"register_operand\" \"l\")))]\n   \"TARGET_THUMB1\"\n-  \"and\\\\t%0, %0, %2\"\n-  [(set_attr \"length\" \"2\")]\n-)\n+  \"and\\\\t%0, %2\"\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"conds\" \"set\")])\n \n (define_insn \"*andsi3_compare0\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n@@ -2564,14 +2569,14 @@\n   [(set_attr \"predicable\" \"yes\")]\n )\n \n-(define_insn \"bicsi3\"\n+(define_insn \"thumb1_bicsi3\"\n   [(set (match_operand:SI                 0 \"register_operand\" \"=l\")\n \t(and:SI (not:SI (match_operand:SI 1 \"register_operand\" \"l\"))\n \t\t(match_operand:SI         2 \"register_operand\" \"0\")))]\n   \"TARGET_THUMB1\"\n-  \"bic\\\\t%0, %0, %1\"\n-  [(set_attr \"length\" \"2\")]\n-)\n+  \"bic\\\\t%0, %1\"\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"conds\" \"set\")])\n \n (define_insn \"andsi_not_shiftsi_si\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -2706,14 +2711,14 @@\n    (set_attr \"predicable\" \"yes\")]\n )\n \n-(define_insn \"*thumb1_iorsi3\"\n+(define_insn \"*thumb1_iorsi3_insn\"\n   [(set (match_operand:SI         0 \"register_operand\" \"=l\")\n \t(ior:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n \t\t(match_operand:SI 2 \"register_operand\" \"l\")))]\n   \"TARGET_THUMB1\"\n-  \"orr\\\\t%0, %0, %2\"\n-  [(set_attr \"length\" \"2\")]\n-)\n+  \"orr\\\\t%0, %2\"\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"conds\" \"set\")])\n \n (define_peephole2\n   [(match_scratch:SI 3 \"r\")\n@@ -2830,14 +2835,14 @@\n   [(set_attr \"predicable\" \"yes\")]\n )\n \n-(define_insn \"*thumb1_xorsi3\"\n+(define_insn \"*thumb1_xorsi3_insn\"\n   [(set (match_operand:SI         0 \"register_operand\" \"=l\")\n \t(xor:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n \t\t(match_operand:SI 2 \"register_operand\" \"l\")))]\n   \"TARGET_THUMB1\"\n-  \"eor\\\\t%0, %0, %2\"\n-  [(set_attr \"length\" \"2\")]\n-)\n+  \"eor\\\\t%0, %2\"\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"conds\" \"set\")])\n \n (define_insn \"*xorsi3_compare0\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n@@ -3264,8 +3269,8 @@\n \t\t   (match_operand:SI 2 \"nonmemory_operand\" \"N,l\")))]\n   \"TARGET_THUMB1\"\n   \"lsl\\\\t%0, %1, %2\"\n-  [(set_attr \"length\" \"2\")]\n-)\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"conds\" \"set\")])\n \n (define_expand \"ashrdi3\"\n   [(set (match_operand:DI              0 \"s_register_operand\" \"\")\n@@ -3320,8 +3325,8 @@\n \t\t     (match_operand:SI 2 \"nonmemory_operand\" \"N,l\")))]\n   \"TARGET_THUMB1\"\n   \"asr\\\\t%0, %1, %2\"\n-  [(set_attr \"length\" \"2\")]\n-)\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"conds\" \"set\")])\n \n (define_expand \"lshrdi3\"\n   [(set (match_operand:DI              0 \"s_register_operand\" \"\")\n@@ -3379,8 +3384,8 @@\n \t\t     (match_operand:SI 2 \"nonmemory_operand\" \"N,l\")))]\n   \"TARGET_THUMB1\"\n   \"lsr\\\\t%0, %1, %2\"\n-  [(set_attr \"length\" \"2\")]\n-)\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"conds\" \"set\")])\n \n (define_expand \"rotlsi3\"\n   [(set (match_operand:SI              0 \"s_register_operand\" \"\")\n@@ -4029,7 +4034,7 @@\n \n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(zero_extend:SI (match_operand:HI 1 \"register_operand\" \"l,m\")))]\n+\t(zero_extend:SI (match_operand:HI 1 \"register_operand\" \"\")))]\n   \"!TARGET_THUMB2 && !arm_arch6\"\n   [(set (match_dup 0) (ashift:SI (match_dup 2) (const_int 16)))\n    (set (match_dup 0) (lshiftrt:SI (match_dup 0) (const_int 16)))]\n@@ -5086,8 +5091,8 @@\n    mov\\\\t%0, %1\"\n   [(set_attr \"length\" \"2,2,4,4,2,2,2,2,2\")\n    (set_attr \"type\" \"*,*,*,*,load1,store1,load1,store1,*\")\n-   (set_attr \"pool_range\" \"*,*,*,*,*,*,1020,*,*\")]\n-)\n+   (set_attr \"pool_range\" \"*,*,*,*,*,*,1020,*,*\")\n+   (set_attr \"conds\" \"set,clob,*,*,nocond,nocond,nocond,nocond,nocond\")])\n \n (define_split \n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n@@ -5635,8 +5640,8 @@\n       return \\\"ldrh\t%0, %1\\\";\n     }\"\n   [(set_attr \"length\" \"2,4,2,2,2,2\")\n-   (set_attr \"type\" \"*,load1,store1,*,*,*\")]\n-)\n+   (set_attr \"type\" \"*,load1,store1,*,*,*\")\n+   (set_attr \"conds\" \"clob,nocond,nocond,nocond,nocond,clob\")])\n \n \n (define_expand \"movhi_bytes\"\n@@ -5869,8 +5874,8 @@\n    mov\\\\t%0, %1\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"type\" \"*,load1,store1,*,*,*\")\n-   (set_attr \"pool_range\" \"*,32,*,*,*,*\")]\n-)\n+   (set_attr \"pool_range\" \"*,32,*,*,*,*\")\n+   (set_attr \"conds\" \"clob,nocond,nocond,nocond,nocond,clob\")])\n \n ;; HFmode moves\n (define_expand \"movhf\"\n@@ -5970,8 +5975,8 @@\n   \"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"type\" \"*,load1,store1,*,*\")\n-   (set_attr \"pool_range\" \"*,1020,*,*,*\")]\n-)\n+   (set_attr \"pool_range\" \"*,1020,*,*,*\")\n+   (set_attr \"conds\" \"clob,nocond,nocond,nocond,nocond\")])\n \n (define_expand \"movsf\"\n   [(set (match_operand:SF 0 \"general_operand\" \"\")\n@@ -6046,7 +6051,8 @@\n    mov\\\\t%0, %1\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"type\" \"*,load1,store1,load1,store1,*,*\")\n-   (set_attr \"pool_range\" \"*,*,*,1020,*,*,*\")]\n+   (set_attr \"pool_range\" \"*,*,*,1020,*,*,*\")\n+   (set_attr \"conds\" \"clob,nocond,nocond,nocond,nocond,nocond,nocond\")]\n )\n \n (define_expand \"movdf\"\n@@ -6681,34 +6687,46 @@\n (define_insn \"cbranchsi4_insn\"\n   [(set (pc) (if_then_else\n \t      (match_operator 0 \"arm_comparison_operator\"\n-\t       [(match_operand:SI 1 \"s_register_operand\" \"l,*h\")\n+\t       [(match_operand:SI 1 \"s_register_operand\" \"l,l*h\")\n \t        (match_operand:SI 2 \"thumb1_cmp_operand\" \"lI*h,*r\")])\n \t      (label_ref (match_operand 3 \"\" \"\"))\n \t      (pc)))]\n   \"TARGET_THUMB1\"\n-  \"*\n-  rtx t = prev_nonnote_insn (insn);\n-  if (t != NULL_RTX\n-      && INSN_P (t)\n-      && INSN_CODE (t) == CODE_FOR_cbranchsi4_insn)\n+{\n+  rtx t = cfun->machine->thumb1_cc_insn;\n+  if (t != NULL_RTX)\n     {\n-      t = XEXP (SET_SRC (PATTERN (t)), 0);\n-      if (!rtx_equal_p (XEXP (t, 0), operands[1])\n-\t  || !rtx_equal_p (XEXP (t, 1), operands[2]))\n+      if (!rtx_equal_p (cfun->machine->thumb1_cc_op0, operands[1])\n+\t  || !rtx_equal_p (cfun->machine->thumb1_cc_op1, operands[2]))\n+\tt = NULL_RTX;\n+      if (cfun->machine->thumb1_cc_mode == CC_NOOVmode)\n+\t{\n+\t  if (!noov_comparison_operator (operands[0], VOIDmode))\n+\t    t = NULL_RTX;\n+\t}\n+      else if (cfun->machine->thumb1_cc_mode != CCmode)\n \tt = NULL_RTX;\n     }\n-  else\n-    t = NULL_RTX;\n   if (t == NULL_RTX)\n-    output_asm_insn (\\\"cmp\\\\t%1, %2\\\", operands);\n+    {\n+      output_asm_insn (\"cmp\\t%1, %2\", operands);\n+      cfun->machine->thumb1_cc_insn = insn;\n+      cfun->machine->thumb1_cc_op0 = operands[1];\n+      cfun->machine->thumb1_cc_op1 = operands[2];\n+      cfun->machine->thumb1_cc_mode = CCmode;\n+    }\n+  else\n+    /* Ensure we emit the right type of condition code on the jump.  */\n+    XEXP (operands[0], 0) = gen_rtx_REG (cfun->machine->thumb1_cc_mode,\n+\t\t\t\t\t CC_REGNUM);\n \n   switch (get_attr_length (insn))\n     {\n     case 4:  return \\\"b%d0\\\\t%l3\\\";\n     case 6:  return \\\"b%D0\\\\t.LCB%=\\;b\\\\t%l3\\\\t%@long jump\\\\n.LCB%=:\\\";\n     default: return \\\"b%D0\\\\t.LCB%=\\;bl\\\\t%l3\\\\t%@far jump\\\\n.LCB%=:\\\";\n     }\n-  \"\n+}\n   [(set (attr \"far_jump\")\n         (if_then_else\n \t    (eq_attr \"length\" \"8\")\n@@ -6762,69 +6780,8 @@\n \t\t(const_int 8))))]\n )\n \n-(define_insn \"*movsi_cbranchsi4\"\n-  [(set (pc)\n-\t(if_then_else\n-\t (match_operator 3 \"arm_comparison_operator\"\n-\t  [(match_operand:SI 1 \"s_register_operand\" \"0,l,l,l\")\n-\t   (const_int 0)])\n-\t (label_ref (match_operand 2 \"\" \"\"))\n-\t (pc)))\n-   (set (match_operand:SI 0 \"thumb_cbrch_target_operand\" \"=l,l,*h,*m\")\n-\t(match_dup 1))]\n-  \"TARGET_THUMB1\"\n-  \"*{\n-  if (which_alternative == 0)\n-    output_asm_insn (\\\"cmp\\t%0, #0\\\", operands);\n-  else if (which_alternative == 1)\n-    output_asm_insn (\\\"sub\\t%0, %1, #0\\\", operands);\n-  else\n-    {\n-      output_asm_insn (\\\"cmp\\t%1, #0\\\", operands);\n-      if (which_alternative == 2)\n-\toutput_asm_insn (\\\"mov\\t%0, %1\\\", operands);\n-      else\n-\toutput_asm_insn (\\\"str\\t%1, %0\\\", operands);\n-    }\n-  switch (get_attr_length (insn) - ((which_alternative > 1) ? 2 : 0))\n-    {\n-    case 4:  return \\\"b%d3\\\\t%l2\\\";\n-    case 6:  return \\\"b%D3\\\\t.LCB%=\\;b\\\\t%l2\\\\t%@long jump\\\\n.LCB%=:\\\";\n-    default: return \\\"b%D3\\\\t.LCB%=\\;bl\\\\t%l2\\\\t%@far jump\\\\n.LCB%=:\\\";\n-    }\n-  }\"\n-  [(set (attr \"far_jump\")\n-        (if_then_else\n-\t    (ior (and (gt (symbol_ref (\"which_alternative\"))\n-\t                  (const_int 1))\n-\t\t      (eq_attr \"length\" \"8\"))\n-\t\t (eq_attr \"length\" \"10\"))\n-\t    (const_string \"yes\")\n-            (const_string \"no\")))\n-   (set (attr \"length\")\n-     (if_then_else\n-       (le (symbol_ref (\"which_alternative\"))\n-\t\t       (const_int 1))\n-       (if_then_else\n-\t (and (ge (minus (match_dup 2) (pc)) (const_int -250))\n-\t      (le (minus (match_dup 2) (pc)) (const_int 256)))\n-\t (const_int 4)\n-\t (if_then_else\n-\t   (and (ge (minus (match_dup 2) (pc)) (const_int -2040))\n-\t\t(le (minus (match_dup 2) (pc)) (const_int 2048)))\n-\t   (const_int 6)\n-\t   (const_int 8)))\n-       (if_then_else\n-\t (and (ge (minus (match_dup 2) (pc)) (const_int -248))\n-\t      (le (minus (match_dup 2) (pc)) (const_int 256)))\n-\t (const_int 6)\n-\t (if_then_else\n-\t   (and (ge (minus (match_dup 2) (pc)) (const_int -2038))\n-\t\t(le (minus (match_dup 2) (pc)) (const_int 2048)))\n-\t   (const_int 8)\n-\t   (const_int 10)))))]\n-)\n-\n+;; Two peepholes to generate subtract of 0 instead of a move if the\n+;; condition codes will be useful.\n (define_peephole2\n   [(set (match_operand:SI 0 \"low_register_operand\" \"\")\n \t(match_operand:SI 1 \"low_register_operand\" \"\"))\n@@ -6834,14 +6791,12 @@\n \t\t      (label_ref (match_operand 3 \"\" \"\"))\n \t\t      (pc)))]\n   \"TARGET_THUMB1\"\n-  [(parallel\n-    [(set (pc)\n-\t(if_then_else (match_op_dup 2 [(match_dup 1) (const_int 0)])\n+  [(set (match_dup 0) (minus:SI (match_dup 1) (const_int 0)))\n+   (set (pc)\n+\t(if_then_else (match_op_dup 2 [(match_dup 0) (const_int 0)])\n \t\t      (label_ref (match_dup 3))\n-\t\t      (pc)))\n-     (set (match_dup 0) (match_dup 1))])]\n-  \"\"\n-)\n+\t\t      (pc)))]\n+  \"\")\n \n ;; Sigh!  This variant shouldn't be needed, but combine often fails to\n ;; merge cases like this because the op1 is a hard register in\n@@ -6855,14 +6810,12 @@\n \t\t      (label_ref (match_operand 3 \"\" \"\"))\n \t\t      (pc)))]\n   \"TARGET_THUMB1\"\n-  [(parallel\n-    [(set (pc)\n-\t(if_then_else (match_op_dup 2 [(match_dup 1) (const_int 0)])\n+  [(set (match_dup 0) (minus:SI (match_dup 1) (const_int 0)))\n+   (set (pc)\n+\t(if_then_else (match_op_dup 2 [(match_dup 0) (const_int 0)])\n \t\t      (label_ref (match_dup 3))\n-\t\t      (pc)))\n-     (set (match_dup 0) (match_dup 1))])]\n-  \"\"\n-)\n+\t\t      (pc)))]\n+  \"\")\n \n (define_insn \"*negated_cbranchsi4\"\n   [(set (pc)\n@@ -6986,7 +6939,7 @@\n \t\t(const_int 6)\n \t\t(const_int 8))))]\n )\n-  \n+\n (define_insn \"*tstsi3_cbranch\"\n   [(set (pc)\n \t(if_then_else\n@@ -7024,390 +6977,6 @@\n \t\t(const_int 8))))]\n )\n   \n-(define_insn \"*andsi3_cbranch\"\n-  [(set (pc)\n-\t(if_then_else\n-\t (match_operator 5 \"equality_operator\"\n-\t  [(and:SI (match_operand:SI 2 \"s_register_operand\" \"%0,1,1,1\")\n-\t\t   (match_operand:SI 3 \"s_register_operand\" \"l,l,l,l\"))\n-\t   (const_int 0)])\n-\t (label_ref (match_operand 4 \"\" \"\"))\n-\t (pc)))\n-   (set (match_operand:SI 0 \"thumb_cbrch_target_operand\" \"=l,*?h,*?m,*?m\")\n-\t(and:SI (match_dup 2) (match_dup 3)))\n-   (clobber (match_scratch:SI 1 \"=X,l,&l,&l\"))]\n-  \"TARGET_THUMB1\"\n-  \"*\n-  {\n-  if (which_alternative == 0)\n-    output_asm_insn (\\\"and\\\\t%0, %3\\\", operands);\n-  else if (which_alternative == 1)\n-    {\n-      output_asm_insn (\\\"and\\\\t%1, %3\\\", operands);\n-      output_asm_insn (\\\"mov\\\\t%0, %1\\\", operands);\n-    }\n-  else\n-    {\n-      output_asm_insn (\\\"and\\\\t%1, %3\\\", operands);\n-      output_asm_insn (\\\"str\\\\t%1, %0\\\", operands);\n-    }\n-\n-  switch (get_attr_length (insn) - (which_alternative ? 2 : 0))\n-    {\n-    case 4:  return \\\"b%d5\\\\t%l4\\\";\n-    case 6:  return \\\"b%D5\\\\t.LCB%=\\;b\\\\t%l4\\\\t%@long jump\\\\n.LCB%=:\\\";\n-    default: return \\\"b%D5\\\\t.LCB%=\\;bl\\\\t%l4\\\\t%@far jump\\\\n.LCB%=:\\\";\n-    }\n-  }\"\n-  [(set (attr \"far_jump\")\n-        (if_then_else\n-\t    (ior (and (eq (symbol_ref (\"which_alternative\"))\n-\t                  (const_int 0))\n-\t\t      (eq_attr \"length\" \"8\"))\n-\t\t (eq_attr \"length\" \"10\"))\n-\t    (const_string \"yes\")\n-            (const_string \"no\")))\n-   (set (attr \"length\")\n-     (if_then_else\n-       (eq (symbol_ref (\"which_alternative\"))\n-\t\t       (const_int 0))\n-       (if_then_else\n-\t (and (ge (minus (match_dup 4) (pc)) (const_int -250))\n-\t      (le (minus (match_dup 4) (pc)) (const_int 256)))\n-\t (const_int 4)\n-\t (if_then_else\n-\t   (and (ge (minus (match_dup 4) (pc)) (const_int -2040))\n-\t\t(le (minus (match_dup 4) (pc)) (const_int 2048)))\n-\t   (const_int 6)\n-\t   (const_int 8)))\n-       (if_then_else\n-\t (and (ge (minus (match_dup 4) (pc)) (const_int -248))\n-\t      (le (minus (match_dup 4) (pc)) (const_int 256)))\n-\t (const_int 6)\n-\t (if_then_else\n-\t   (and (ge (minus (match_dup 4) (pc)) (const_int -2038))\n-\t\t(le (minus (match_dup 4) (pc)) (const_int 2048)))\n-\t   (const_int 8)\n-\t   (const_int 10)))))]\n-)\n-\n-(define_insn \"*orrsi3_cbranch_scratch\"\n-  [(set (pc)\n-\t(if_then_else\n-\t (match_operator 4 \"equality_operator\"\n-\t  [(ior:SI (match_operand:SI 1 \"s_register_operand\" \"%0\")\n-\t\t   (match_operand:SI 2 \"s_register_operand\" \"l\"))\n-\t   (const_int 0)])\n-\t (label_ref (match_operand 3 \"\" \"\"))\n-\t (pc)))\n-   (clobber (match_scratch:SI 0 \"=l\"))]\n-  \"TARGET_THUMB1\"\n-  \"*\n-  {\n-  output_asm_insn (\\\"orr\\\\t%0, %2\\\", operands);\n-  switch (get_attr_length (insn))\n-    {\n-    case 4:  return \\\"b%d4\\\\t%l3\\\";\n-    case 6:  return \\\"b%D4\\\\t.LCB%=\\;b\\\\t%l3\\\\t%@long jump\\\\n.LCB%=:\\\";\n-    default: return \\\"b%D4\\\\t.LCB%=\\;bl\\\\t%l3\\\\t%@far jump\\\\n.LCB%=:\\\";\n-    }\n-  }\"\n-  [(set (attr \"far_jump\")\n-        (if_then_else\n-\t    (eq_attr \"length\" \"8\")\n-\t    (const_string \"yes\")\n-            (const_string \"no\")))\n-   (set (attr \"length\") \n-        (if_then_else\n-\t    (and (ge (minus (match_dup 3) (pc)) (const_int -250))\n-\t         (le (minus (match_dup 3) (pc)) (const_int 256)))\n-\t    (const_int 4)\n-\t    (if_then_else\n-\t        (and (ge (minus (match_dup 3) (pc)) (const_int -2040))\n-\t\t     (le (minus (match_dup 3) (pc)) (const_int 2048)))\n-\t\t(const_int 6)\n-\t\t(const_int 8))))]\n-)\n-  \n-(define_insn \"*orrsi3_cbranch\"\n-  [(set (pc)\n-\t(if_then_else\n-\t (match_operator 5 \"equality_operator\"\n-\t  [(ior:SI (match_operand:SI 2 \"s_register_operand\" \"%0,1,1,1\")\n-\t\t   (match_operand:SI 3 \"s_register_operand\" \"l,l,l,l\"))\n-\t   (const_int 0)])\n-\t (label_ref (match_operand 4 \"\" \"\"))\n-\t (pc)))\n-   (set (match_operand:SI 0 \"thumb_cbrch_target_operand\" \"=l,*?h,*?m,*?m\")\n-\t(ior:SI (match_dup 2) (match_dup 3)))\n-   (clobber (match_scratch:SI 1 \"=X,l,&l,&l\"))]\n-  \"TARGET_THUMB1\"\n-  \"*\n-  {\n-  if (which_alternative == 0)\n-    output_asm_insn (\\\"orr\\\\t%0, %3\\\", operands);\n-  else if (which_alternative == 1)\n-    {\n-      output_asm_insn (\\\"orr\\\\t%1, %3\\\", operands);\n-      output_asm_insn (\\\"mov\\\\t%0, %1\\\", operands);\n-    }\n-  else\n-    {\n-      output_asm_insn (\\\"orr\\\\t%1, %3\\\", operands);\n-      output_asm_insn (\\\"str\\\\t%1, %0\\\", operands);\n-    }\n-\n-  switch (get_attr_length (insn) - (which_alternative ? 2 : 0))\n-    {\n-    case 4:  return \\\"b%d5\\\\t%l4\\\";\n-    case 6:  return \\\"b%D5\\\\t.LCB%=\\;b\\\\t%l4\\\\t%@long jump\\\\n.LCB%=:\\\";\n-    default: return \\\"b%D5\\\\t.LCB%=\\;bl\\\\t%l4\\\\t%@far jump\\\\n.LCB%=:\\\";\n-    }\n-  }\"\n-  [(set (attr \"far_jump\")\n-        (if_then_else\n-\t    (ior (and (eq (symbol_ref (\"which_alternative\"))\n-\t                  (const_int 0))\n-\t\t      (eq_attr \"length\" \"8\"))\n-\t\t (eq_attr \"length\" \"10\"))\n-\t    (const_string \"yes\")\n-            (const_string \"no\")))\n-   (set (attr \"length\")\n-     (if_then_else\n-       (eq (symbol_ref (\"which_alternative\"))\n-\t\t       (const_int 0))\n-       (if_then_else\n-\t (and (ge (minus (match_dup 4) (pc)) (const_int -250))\n-\t      (le (minus (match_dup 4) (pc)) (const_int 256)))\n-\t (const_int 4)\n-\t (if_then_else\n-\t   (and (ge (minus (match_dup 4) (pc)) (const_int -2040))\n-\t\t(le (minus (match_dup 4) (pc)) (const_int 2048)))\n-\t   (const_int 6)\n-\t   (const_int 8)))\n-       (if_then_else\n-\t (and (ge (minus (match_dup 4) (pc)) (const_int -248))\n-\t      (le (minus (match_dup 4) (pc)) (const_int 256)))\n-\t (const_int 6)\n-\t (if_then_else\n-\t   (and (ge (minus (match_dup 4) (pc)) (const_int -2038))\n-\t\t(le (minus (match_dup 4) (pc)) (const_int 2048)))\n-\t   (const_int 8)\n-\t   (const_int 10)))))]\n-)\n-\n-(define_insn \"*xorsi3_cbranch_scratch\"\n-  [(set (pc)\n-\t(if_then_else\n-\t (match_operator 4 \"equality_operator\"\n-\t  [(xor:SI (match_operand:SI 1 \"s_register_operand\" \"%0\")\n-\t\t   (match_operand:SI 2 \"s_register_operand\" \"l\"))\n-\t   (const_int 0)])\n-\t (label_ref (match_operand 3 \"\" \"\"))\n-\t (pc)))\n-   (clobber (match_scratch:SI 0 \"=l\"))]\n-  \"TARGET_THUMB1\"\n-  \"*\n-  {\n-  output_asm_insn (\\\"eor\\\\t%0, %2\\\", operands);\n-  switch (get_attr_length (insn))\n-    {\n-    case 4:  return \\\"b%d4\\\\t%l3\\\";\n-    case 6:  return \\\"b%D4\\\\t.LCB%=\\;b\\\\t%l3\\\\t%@long jump\\\\n.LCB%=:\\\";\n-    default: return \\\"b%D4\\\\t.LCB%=\\;bl\\\\t%l3\\\\t%@far jump\\\\n.LCB%=:\\\";\n-    }\n-  }\"\n-  [(set (attr \"far_jump\")\n-        (if_then_else\n-\t    (eq_attr \"length\" \"8\")\n-\t    (const_string \"yes\")\n-            (const_string \"no\")))\n-   (set (attr \"length\") \n-        (if_then_else\n-\t    (and (ge (minus (match_dup 3) (pc)) (const_int -250))\n-\t         (le (minus (match_dup 3) (pc)) (const_int 256)))\n-\t    (const_int 4)\n-\t    (if_then_else\n-\t        (and (ge (minus (match_dup 3) (pc)) (const_int -2040))\n-\t\t     (le (minus (match_dup 3) (pc)) (const_int 2048)))\n-\t\t(const_int 6)\n-\t\t(const_int 8))))]\n-)\n-  \n-(define_insn \"*xorsi3_cbranch\"\n-  [(set (pc)\n-\t(if_then_else\n-\t (match_operator 5 \"equality_operator\"\n-\t  [(xor:SI (match_operand:SI 2 \"s_register_operand\" \"%0,1,1,1\")\n-\t\t   (match_operand:SI 3 \"s_register_operand\" \"l,l,l,l\"))\n-\t   (const_int 0)])\n-\t (label_ref (match_operand 4 \"\" \"\"))\n-\t (pc)))\n-   (set (match_operand:SI 0 \"thumb_cbrch_target_operand\" \"=l,*?h,*?m,*?m\")\n-\t(xor:SI (match_dup 2) (match_dup 3)))\n-   (clobber (match_scratch:SI 1 \"=X,l,&l,&l\"))]\n-  \"TARGET_THUMB1\"\n-  \"*\n-  {\n-  if (which_alternative == 0)\n-    output_asm_insn (\\\"eor\\\\t%0, %3\\\", operands);\n-  else if (which_alternative == 1)\n-    {\n-      output_asm_insn (\\\"eor\\\\t%1, %3\\\", operands);\n-      output_asm_insn (\\\"mov\\\\t%0, %1\\\", operands);\n-    }\n-  else\n-    {\n-      output_asm_insn (\\\"eor\\\\t%1, %3\\\", operands);\n-      output_asm_insn (\\\"str\\\\t%1, %0\\\", operands);\n-    }\n-\n-  switch (get_attr_length (insn) - (which_alternative ? 2 : 0))\n-    {\n-    case 4:  return \\\"b%d5\\\\t%l4\\\";\n-    case 6:  return \\\"b%D5\\\\t.LCB%=\\;b\\\\t%l4\\\\t%@long jump\\\\n.LCB%=:\\\";\n-    default: return \\\"b%D5\\\\t.LCB%=\\;bl\\\\t%l4\\\\t%@far jump\\\\n.LCB%=:\\\";\n-    }\n-  }\"\n-  [(set (attr \"far_jump\")\n-        (if_then_else\n-\t    (ior (and (eq (symbol_ref (\"which_alternative\"))\n-\t                  (const_int 0))\n-\t\t      (eq_attr \"length\" \"8\"))\n-\t\t (eq_attr \"length\" \"10\"))\n-\t    (const_string \"yes\")\n-            (const_string \"no\")))\n-   (set (attr \"length\")\n-     (if_then_else\n-       (eq (symbol_ref (\"which_alternative\"))\n-\t\t       (const_int 0))\n-       (if_then_else\n-\t (and (ge (minus (match_dup 4) (pc)) (const_int -250))\n-\t      (le (minus (match_dup 4) (pc)) (const_int 256)))\n-\t (const_int 4)\n-\t (if_then_else\n-\t   (and (ge (minus (match_dup 4) (pc)) (const_int -2040))\n-\t\t(le (minus (match_dup 4) (pc)) (const_int 2048)))\n-\t   (const_int 6)\n-\t   (const_int 8)))\n-       (if_then_else\n-\t (and (ge (minus (match_dup 4) (pc)) (const_int -248))\n-\t      (le (minus (match_dup 4) (pc)) (const_int 256)))\n-\t (const_int 6)\n-\t (if_then_else\n-\t   (and (ge (minus (match_dup 4) (pc)) (const_int -2038))\n-\t\t(le (minus (match_dup 4) (pc)) (const_int 2048)))\n-\t   (const_int 8)\n-\t   (const_int 10)))))]\n-)\n-\n-(define_insn \"*bicsi3_cbranch_scratch\"\n-  [(set (pc)\n-\t(if_then_else\n-\t (match_operator 4 \"equality_operator\"\n-\t  [(and:SI (not:SI (match_operand:SI 2 \"s_register_operand\" \"l\"))\n-\t\t   (match_operand:SI 1 \"s_register_operand\" \"0\"))\n-\t   (const_int 0)])\n-\t (label_ref (match_operand 3 \"\" \"\"))\n-\t (pc)))\n-   (clobber (match_scratch:SI 0 \"=l\"))]\n-  \"TARGET_THUMB1\"\n-  \"*\n-  {\n-  output_asm_insn (\\\"bic\\\\t%0, %2\\\", operands);\n-  switch (get_attr_length (insn))\n-    {\n-    case 4:  return \\\"b%d4\\\\t%l3\\\";\n-    case 6:  return \\\"b%D4\\\\t.LCB%=\\;b\\\\t%l3\\\\t%@long jump\\\\n.LCB%=:\\\";\n-    default: return \\\"b%D4\\\\t.LCB%=\\;bl\\\\t%l3\\\\t%@far jump\\\\n.LCB%=:\\\";\n-    }\n-  }\"\n-  [(set (attr \"far_jump\")\n-        (if_then_else\n-\t    (eq_attr \"length\" \"8\")\n-\t    (const_string \"yes\")\n-            (const_string \"no\")))\n-   (set (attr \"length\") \n-        (if_then_else\n-\t    (and (ge (minus (match_dup 3) (pc)) (const_int -250))\n-\t         (le (minus (match_dup 3) (pc)) (const_int 256)))\n-\t    (const_int 4)\n-\t    (if_then_else\n-\t        (and (ge (minus (match_dup 3) (pc)) (const_int -2040))\n-\t\t     (le (minus (match_dup 3) (pc)) (const_int 2048)))\n-\t\t(const_int 6)\n-\t\t(const_int 8))))]\n-)\n-  \n-(define_insn \"*bicsi3_cbranch\"\n-  [(set (pc)\n-\t(if_then_else\n-\t (match_operator 5 \"equality_operator\"\n-\t  [(and:SI (not:SI (match_operand:SI 3 \"s_register_operand\" \"l,l,l,l,l\"))\n-\t\t   (match_operand:SI 2 \"s_register_operand\" \"0,1,1,1,1\"))\n-\t   (const_int 0)])\n-\t (label_ref (match_operand 4 \"\" \"\"))\n-\t (pc)))\n-   (set (match_operand:SI 0 \"thumb_cbrch_target_operand\" \"=!l,l,*?h,*?m,*?m\")\n-\t(and:SI (not:SI (match_dup 3)) (match_dup 2)))\n-   (clobber (match_scratch:SI 1 \"=X,l,l,&l,&l\"))]\n-  \"TARGET_THUMB1\"\n-  \"*\n-  {\n-  if (which_alternative == 0)\n-    output_asm_insn (\\\"bic\\\\t%0, %3\\\", operands);\n-  else if (which_alternative <= 2)\n-    {\n-      output_asm_insn (\\\"bic\\\\t%1, %3\\\", operands);\n-      /* It's ok if OP0 is a lo-reg, even though the mov will set the\n-\t conditions again, since we're only testing for equality.  */\n-      output_asm_insn (\\\"mov\\\\t%0, %1\\\", operands);\n-    }\n-  else\n-    {\n-      output_asm_insn (\\\"bic\\\\t%1, %3\\\", operands);\n-      output_asm_insn (\\\"str\\\\t%1, %0\\\", operands);\n-    }\n-\n-  switch (get_attr_length (insn) - (which_alternative ? 2 : 0))\n-    {\n-    case 4:  return \\\"b%d5\\\\t%l4\\\";\n-    case 6:  return \\\"b%D5\\\\t.LCB%=\\;b\\\\t%l4\\\\t%@long jump\\\\n.LCB%=:\\\";\n-    default: return \\\"b%D5\\\\t.LCB%=\\;bl\\\\t%l4\\\\t%@far jump\\\\n.LCB%=:\\\";\n-    }\n-  }\"\n-  [(set (attr \"far_jump\")\n-        (if_then_else\n-\t    (ior (and (eq (symbol_ref (\"which_alternative\"))\n-\t                  (const_int 0))\n-\t\t      (eq_attr \"length\" \"8\"))\n-\t\t (eq_attr \"length\" \"10\"))\n-\t    (const_string \"yes\")\n-            (const_string \"no\")))\n-   (set (attr \"length\")\n-     (if_then_else\n-       (eq (symbol_ref (\"which_alternative\"))\n-\t\t       (const_int 0))\n-       (if_then_else\n-\t (and (ge (minus (match_dup 4) (pc)) (const_int -250))\n-\t      (le (minus (match_dup 4) (pc)) (const_int 256)))\n-\t (const_int 4)\n-\t (if_then_else\n-\t   (and (ge (minus (match_dup 4) (pc)) (const_int -2040))\n-\t\t(le (minus (match_dup 4) (pc)) (const_int 2048)))\n-\t   (const_int 6)\n-\t   (const_int 8)))\n-       (if_then_else\n-\t (and (ge (minus (match_dup 4) (pc)) (const_int -248))\n-\t      (le (minus (match_dup 4) (pc)) (const_int 256)))\n-\t (const_int 6)\n-\t (if_then_else\n-\t   (and (ge (minus (match_dup 4) (pc)) (const_int -2038))\n-\t\t(le (minus (match_dup 4) (pc)) (const_int 2048)))\n-\t   (const_int 8)\n-\t   (const_int 10)))))]\n-)\n-\n (define_insn \"*cbranchne_decr1\"\n   [(set (pc)\n \t(if_then_else (match_operator 3 \"equality_operator\"\n@@ -7660,126 +7229,6 @@\n \t   (const_int 8))))]\n )\n \n-(define_insn \"*subsi3_cbranch\"\n-  [(set (pc)\n-\t(if_then_else\n-\t (match_operator 4 \"arm_comparison_operator\"\n-\t  [(minus:SI\n-\t    (match_operand:SI 2 \"s_register_operand\" \"l,l,1,l\")\n-\t    (match_operand:SI 3 \"s_register_operand\" \"l,l,l,l\"))\n-\t   (const_int 0)])\n-\t (label_ref (match_operand 5 \"\" \"\"))\n-\t (pc)))\n-   (set (match_operand:SI 0 \"thumb_cbrch_target_operand\" \"=l,*?h,*?m,*?m\")\n-\t(minus:SI (match_dup 2) (match_dup 3)))\n-   (clobber (match_scratch:SI 1 \"=X,l,&l,&l\"))]\n-  \"TARGET_THUMB1\n-   && (GET_CODE (operands[4]) == EQ\n-       || GET_CODE (operands[4]) == NE\n-       || GET_CODE (operands[4]) == GE\n-       || GET_CODE (operands[4]) == LT)\"\n-  \"*\n-   {\n-     if (which_alternative == 0)\n-       output_asm_insn (\\\"sub\\\\t%0, %2, %3\\\", operands);\n-     else if (which_alternative == 1)\n-       {\n-\t /* We must provide an alternative for a hi reg because reload \n-\t    cannot handle output reloads on a jump instruction, but we\n-\t    can't subtract into that.  Fortunately a mov from lo to hi\n-\t    does not clobber the condition codes.  */\n-\t output_asm_insn (\\\"sub\\\\t%1, %2, %3\\\", operands);\n-\t output_asm_insn (\\\"mov\\\\t%0, %1\\\", operands);\n-       }\n-     else\n-       {\n-\t /* Similarly, but the target is memory.  */\n-\t output_asm_insn (\\\"sub\\\\t%1, %2, %3\\\", operands);\n-\t output_asm_insn (\\\"str\\\\t%1, %0\\\", operands);\n-       }\n-\n-     switch (get_attr_length (insn) - ((which_alternative != 0) ? 2 : 0))\n-       {\n-\t case 4:\n-\t   return \\\"b%d4\\\\t%l5\\\";\n-\t case 6:\n-\t   return \\\"b%D4\\\\t.LCB%=\\;b\\\\t%l5\\\\t%@long jump\\\\n.LCB%=:\\\";\n-\t default:\n-\t   return \\\"b%D4\\\\t.LCB%=\\;bl\\\\t%l5\\\\t%@far jump\\\\n.LCB%=:\\\";\n-       }\n-   }\n-  \"\n-  [(set (attr \"far_jump\")\n-        (if_then_else\n-\t    (ior (and (eq (symbol_ref (\"which_alternative\"))\n-\t                  (const_int 0))\n-\t\t      (eq_attr \"length\" \"8\"))\n-\t\t (eq_attr \"length\" \"10\"))\n-\t    (const_string \"yes\")\n-            (const_string \"no\")))\n-   (set (attr \"length\")\n-     (if_then_else\n-       (eq (symbol_ref (\"which_alternative\"))\n-\t\t       (const_int 0))\n-       (if_then_else\n-\t (and (ge (minus (match_dup 5) (pc)) (const_int -250))\n-\t      (le (minus (match_dup 5) (pc)) (const_int 256)))\n-\t (const_int 4)\n-\t (if_then_else\n-\t   (and (ge (minus (match_dup 5) (pc)) (const_int -2040))\n-\t\t(le (minus (match_dup 5) (pc)) (const_int 2048)))\n-\t   (const_int 6)\n-\t   (const_int 8)))\n-       (if_then_else\n-\t (and (ge (minus (match_dup 5) (pc)) (const_int -248))\n-\t      (le (minus (match_dup 5) (pc)) (const_int 256)))\n-\t (const_int 6)\n-\t (if_then_else\n-\t   (and (ge (minus (match_dup 5) (pc)) (const_int -2038))\n-\t\t(le (minus (match_dup 5) (pc)) (const_int 2048)))\n-\t   (const_int 8)\n-\t   (const_int 10)))))]\n-)\n-\n-(define_insn \"*subsi3_cbranch_scratch\"\n-  [(set (pc)\n-\t(if_then_else\n-\t (match_operator 0 \"arm_comparison_operator\"\n-\t  [(minus:SI (match_operand:SI 1 \"register_operand\" \"l\")\n-\t\t     (match_operand:SI 2 \"nonmemory_operand\" \"l\"))\n-\t   (const_int 0)])\n-\t (label_ref (match_operand 3 \"\" \"\"))\n-\t (pc)))]\n-  \"TARGET_THUMB1\n-   && (GET_CODE (operands[0]) == EQ\n-       || GET_CODE (operands[0]) == NE\n-       || GET_CODE (operands[0]) == GE\n-       || GET_CODE (operands[0]) == LT)\"\n-  \"*\n-  output_asm_insn (\\\"cmp\\\\t%1, %2\\\", operands);\n-  switch (get_attr_length (insn))\n-    {\n-    case 4:  return \\\"b%d0\\\\t%l3\\\";\n-    case 6:  return \\\"b%D0\\\\t.LCB%=\\;b\\\\t%l3\\\\t%@long jump\\\\n.LCB%=:\\\";\n-    default: return \\\"b%D0\\\\t.LCB%=\\;bl\\\\t%l3\\\\t%@far jump\\\\n.LCB%=:\\\";\n-    }\n-  \"\n-  [(set (attr \"far_jump\")\n-        (if_then_else\n-\t    (eq_attr \"length\" \"8\")\n-\t    (const_string \"yes\")\n-            (const_string \"no\")))\n-   (set (attr \"length\") \n-        (if_then_else\n-\t    (and (ge (minus (match_dup 3) (pc)) (const_int -250))\n-\t         (le (minus (match_dup 3) (pc)) (const_int 256)))\n-\t    (const_int 4)\n-\t    (if_then_else\n-\t        (and (ge (minus (match_dup 3) (pc)) (const_int -2040))\n-\t\t     (le (minus (match_dup 3) (pc)) (const_int 2048)))\n-\t\t(const_int 6)\n-\t\t(const_int 8))))]\n-)\n \n ;; Comparison and test insns\n "}, {"sha": "9ee681ca07289c8aa8b2ecd1a5693b45bf7dda35", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/906668bb6f8c3f1eb4046dec89e9664554481eaa/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/906668bb6f8c3f1eb4046dec89e9664554481eaa/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=906668bb6f8c3f1eb4046dec89e9664554481eaa", "patch": "@@ -30,7 +30,7 @@\n \n ;; The following multi-letter normal constraints have been used:\n ;; in ARM/Thumb-2 state: Da, Db, Dc, Dn, Dl, DL, Dv, Dy, Di\n-;; in Thumb-1 state: Pa, Pb, Pc\n+;; in Thumb-1 state: Pa, Pb, Pc, Pd\n ;; in Thumb-2 state: Ps, Pt, Pu, Pv, Pw, Px\n \n ;; The following memory constraints have been used:\n@@ -154,6 +154,11 @@\n        (match_test \"TARGET_THUMB1\n   \t\t    && ival > 1020 && ival <= 1275\")))\n \n+(define_constraint \"Pd\"\n+  \"@internal In Thumb-1 state a constant in the range 0 to 7\"\n+  (and (match_code \"const_int\")\n+       (match_test \"TARGET_THUMB1 && ival >= 0 && ival <= 7\")))\n+\n (define_constraint \"Ps\"\n   \"@internal In Thumb-2 state a constant in the range -255 to +255\"\n   (and (match_code \"const_int\")"}, {"sha": "89dcb29a25086d511b138c9fc934d7fc8ec1b0d6", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/906668bb6f8c3f1eb4046dec89e9664554481eaa/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/906668bb6f8c3f1eb4046dec89e9664554481eaa/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=906668bb6f8c3f1eb4046dec89e9664554481eaa", "patch": "@@ -235,6 +235,9 @@\n (define_special_predicate \"lt_ge_comparison_operator\"\n   (match_code \"lt,ge\"))\n \n+(define_special_predicate \"noov_comparison_operator\"\n+  (match_code \"lt,ge,eq,ne\"))\n+\n (define_special_predicate \"minmax_operator\"\n   (and (match_code \"smin,smax,umin,umax\")\n        (match_test \"mode == GET_MODE (op)\")))"}, {"sha": "f1cff3409ade3c62e97253d8340f11d4fff53f0b", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/906668bb6f8c3f1eb4046dec89e9664554481eaa/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/906668bb6f8c3f1eb4046dec89e9664554481eaa/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=906668bb6f8c3f1eb4046dec89e9664554481eaa", "patch": "@@ -99,8 +99,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"sdbout.h\"\n #endif\n \n-/* If we aren't using cc0, CC_STATUS_INIT shouldn't exist.  So define a\n-   null default for it to save conditionalization later.  */\n+/* Most ports that aren't using cc0 don't need to define CC_STATUS_INIT.\n+   So define a null default for it to save conditionalization later.  */\n #ifndef CC_STATUS_INIT\n #define CC_STATUS_INIT\n #endif\n@@ -2039,9 +2039,7 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n #endif\n \t    }\n \t}\n-#ifdef HAVE_cc0\n       CC_STATUS_INIT;\n-#endif\n \n       if (!DECL_IGNORED_P (current_function_decl) && LABEL_NAME (insn))\n \tdebug_hooks->label (insn);"}]}