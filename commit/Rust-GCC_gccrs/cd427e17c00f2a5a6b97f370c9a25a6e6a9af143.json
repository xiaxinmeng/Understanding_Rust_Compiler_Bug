{"sha": "cd427e17c00f2a5a6b97f370c9a25a6e6a9af143", "node_id": "C_kwDOANBUbNoAKGNkNDI3ZTE3YzAwZjJhNWE2Yjk3ZjM3MGM5YTI1YTZlNmE5YWYxNDM", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2022-05-09T22:05:50Z"}, "committer": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2022-05-19T16:44:02Z"}, "message": "[PATCH, rs6000] Remove the (no longer used) BTC defines.\n\nThese defines are no longer used once the rs6000 built-in\nreworks were completed.   Time to remove them.\n\nThere was a reference to RS6000_BTC_SPECIAL in a TODO comment\nin rs6000-builtins.def.  That comment remains, but I have updated\nthe comment to refer to \"SPECIAL\" processing, instead of having it\nrefer directly to the _BTC_SPECIAL macro.\n\n2022-05-18  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\ngcc/\n\t* config/rs6000/rs6000-builtins.def: Rephrase\n\tto remove RS6000_BTC_SPECIAL from comment.\n\t* config/rs6000/rs6000.h (RS6000_BTC_UNARY, RS6000_BTC_BINARY,\n\tRS6000_BTC_TERNARY, RS6000_BTC_QUATERNARY,\n\tRS6000_BTC_QUINARY, RS6000_BTC_SENARY, RS6000_BTC_OPND_MASK,\n\tRS6000_BTC_SPECIAL, RS6000_BTC_PREDICATE, RS6000_BTC_ABS,\n\tRS6000_BTC_DST, RS6000_BTC_TYPE_MASK, RS6000_BTC_MISC,\n\tRS6000_BTC_CONST, RS6000_BTC_PURE, RS6000_BTC_FP,\n\tRS6000_BTC_QUAD, RS6000_BTC_PAIR, RS6000_BTC_QUADPAIR,\n\tRS6000_BTC_ATTR_MASK, RS6000_BTC_SPR, RS6000_BTC_VOID,\n\tRS6000_BTC_CR, RS6000_BTC_OVERLOADED, RS6000_BTC_GIMPLE,\n\tRS6000_BTC_MISC_MASK, RS6000_BTC_MEM, RS6000_BTC_SAT,\n\tRS6000_BTM_ALWAYS): Delete.", "tree": {"sha": "39193fa0cadc962e7a3fcc625a0f8e8cafbc9d4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39193fa0cadc962e7a3fcc625a0f8e8cafbc9d4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd427e17c00f2a5a6b97f370c9a25a6e6a9af143", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd427e17c00f2a5a6b97f370c9a25a6e6a9af143", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd427e17c00f2a5a6b97f370c9a25a6e6a9af143", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd427e17c00f2a5a6b97f370c9a25a6e6a9af143/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f13f9c99dbee9c495955a430dd10bdb24a16f24a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f13f9c99dbee9c495955a430dd10bdb24a16f24a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f13f9c99dbee9c495955a430dd10bdb24a16f24a"}], "stats": {"total": 55, "additions": 4, "deletions": 51}, "files": [{"sha": "f76f54793d73da690fe6d514ce8aa525fa5ad50a", "filename": "gcc/config/rs6000/rs6000-builtins.def", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd427e17c00f2a5a6b97f370c9a25a6e6a9af143/gcc%2Fconfig%2Frs6000%2Frs6000-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd427e17c00f2a5a6b97f370c9a25a6e6a9af143/gcc%2Fconfig%2Frs6000%2Frs6000-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtins.def?ref=cd427e17c00f2a5a6b97f370c9a25a6e6a9af143", "patch": "@@ -1424,9 +1424,10 @@\n   pure vsc __builtin_vsx_ld_elemrev_v16qi (signed long, const void *);\n     LD_ELEMREV_V16QI vsx_ld_elemrev_v16qi {ldvec,endian}\n \n-; TODO: There is apparent intent in rs6000-builtin.def to have\n-; RS6000_BTC_SPECIAL processing for LXSDX, LXVDSX, and STXSDX, but there are\n-; no def_builtin calls for any of them.  At some point, we may want to add a\n+; TODO: There was apparent intent in the rs6000-builtin.def to\n+; have SPECIAL processing for LXSDX, LXVDSX, and STXSDX, but there are\n+; no def_builtin calls for any of them.  That file was removed as part\n+; of the BIF rewrite, but at some point, we may want to add a\n ; set of built-ins for whichever vector types make sense for these.\n \n   pure vsq __builtin_vsx_lxvd2x_v1ti (signed long, const void *);"}, {"sha": "3b8941a86584667061f43152739f417f2c858bdb", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd427e17c00f2a5a6b97f370c9a25a6e6a9af143/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd427e17c00f2a5a6b97f370c9a25a6e6a9af143/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=cd427e17c00f2a5a6b97f370c9a25a6e6a9af143", "patch": "@@ -2248,54 +2248,6 @@ extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0).  */\n /* General flags.  */\n extern int frame_pointer_needed;\n \n-/* Classification of the builtin functions as to which switches enable the\n-   builtin, and what attributes it should have.  We used to use the target\n-   flags macros, but we've run out of bits, so we now map the options into new\n-   settings used here.  */\n-\n-/* Builtin operand count.  */\n-#define RS6000_BTC_UNARY\t0x00000001\t/* normal unary function.  */\n-#define RS6000_BTC_BINARY\t0x00000002\t/* normal binary function.  */\n-#define RS6000_BTC_TERNARY\t0x00000003\t/* normal ternary function.  */\n-#define RS6000_BTC_QUATERNARY\t0x00000004\t/* normal quaternary\n-\t\t\t\t\t\t   function. */\n-#define RS6000_BTC_QUINARY\t0x00000005\t/* normal quinary function.  */\n-#define RS6000_BTC_SENARY\t0x00000006\t/* normal senary function.  */\n-#define RS6000_BTC_OPND_MASK\t0x00000007\t/* Mask to isolate operands. */\n-\n-/* Builtin attributes.  */\n-#define RS6000_BTC_SPECIAL\t0x00000000\t/* Special function.  */\n-#define RS6000_BTC_PREDICATE\t0x00000008\t/* predicate function.  */\n-#define RS6000_BTC_ABS\t\t0x00000010\t/* Altivec/VSX ABS\n-\t\t\t\t\t\t   function.  */\n-#define RS6000_BTC_DST\t\t0x00000020\t/* Altivec DST function.  */\n-\n-#define RS6000_BTC_TYPE_MASK\t0x0000003f\t/* Mask to isolate types */\n-\n-#define RS6000_BTC_MISC\t\t0x00000000\t/* No special attributes.  */\n-#define RS6000_BTC_CONST\t0x00000100\t/* Neither uses, nor\n-\t\t\t\t\t\t   modifies global state.  */\n-#define RS6000_BTC_PURE\t\t0x00000200\t/* reads global\n-\t\t\t\t\t\t   state/mem and does\n-\t\t\t\t\t\t   not modify global state.  */\n-#define RS6000_BTC_FP\t\t0x00000400\t/* depends on rounding mode.  */\n-#define RS6000_BTC_QUAD\t\t0x00000800\t/* Uses a register quad.  */\n-#define RS6000_BTC_PAIR\t\t0x00001000\t/* Uses a register pair.  */\n-#define RS6000_BTC_QUADPAIR\t0x00001800\t/* Uses a quad and a pair.  */\n-#define RS6000_BTC_ATTR_MASK\t0x00001f00\t/* Mask of the attributes.  */\n-\n-/* Miscellaneous information.  */\n-#define RS6000_BTC_SPR\t\t0x01000000\t/* function references SPRs.  */\n-#define RS6000_BTC_VOID\t\t0x02000000\t/* function has no return value.  */\n-#define RS6000_BTC_CR\t\t0x04000000\t/* function references a CR.  */\n-#define RS6000_BTC_OVERLOADED\t0x08000000\t/* function is overloaded.  */\n-#define RS6000_BTC_GIMPLE\t0x10000000\t/* function should be expanded\n-\t\t\t\t\t\t   into gimple.  */\n-#define RS6000_BTC_MISC_MASK\t0x1f000000\t/* Mask of the misc info.  */\n-\n-/* Convenience macros to document the instruction type.  */\n-#define RS6000_BTC_MEM\t\tRS6000_BTC_MISC\t/* load/store touches mem.  */\n-#define RS6000_BTC_SAT\t\tRS6000_BTC_MISC\t/* saturate sets VSCR.  */\n \n /* Builtin targets.  For now, we reuse the masks for those options that are in\n    target flags, and pick a random bit for ldbl128, which isn't in"}]}