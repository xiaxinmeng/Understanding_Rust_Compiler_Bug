{"sha": "128691426dcb9e2a3cb57c89bc863d03c1009d82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI4NjkxNDI2ZGNiOWUyYTNjYjU3Yzg5YmM4NjNkMDNjMTAwOWQ4Mg==", "commit": {"author": {"name": "Dale Johannesen", "email": "dalej@apple.com", "date": "2004-12-17T20:05:34Z"}, "committer": {"name": "Dale Johannesen", "email": "dalej@gcc.gnu.org", "date": "2004-12-17T20:05:34Z"}, "message": "c-decl.c (diagnose_mismatched_decls): Accept mismatched function types: void with previous implicit int.\n\n2004-12-17  Dale Johannesen  <dalej@apple.com>\n\n\t* c-decl.c (diagnose_mismatched_decls):  Accept mismatched\n\tfunction types: void with previous implicit int.\n\nFrom-SVN: r92329", "tree": {"sha": "cc6ac8b5b4b86542f8bc16178aa7879397343679", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc6ac8b5b4b86542f8bc16178aa7879397343679"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/128691426dcb9e2a3cb57c89bc863d03c1009d82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/128691426dcb9e2a3cb57c89bc863d03c1009d82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/128691426dcb9e2a3cb57c89bc863d03c1009d82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/128691426dcb9e2a3cb57c89bc863d03c1009d82/comments", "author": null, "committer": null, "parents": [{"sha": "5429f07f64ebd4b8963489711e2426cc4ab036fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5429f07f64ebd4b8963489711e2426cc4ab036fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5429f07f64ebd4b8963489711e2426cc4ab036fc"}], "stats": {"total": 55, "additions": 54, "deletions": 1}, "files": [{"sha": "50a14327d99d260a7c60ed65c2ada776dadad5b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128691426dcb9e2a3cb57c89bc863d03c1009d82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128691426dcb9e2a3cb57c89bc863d03c1009d82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=128691426dcb9e2a3cb57c89bc863d03c1009d82", "patch": "@@ -1,3 +1,8 @@\n+2004-12-17  Dale Johannesen  <dalej@apple.com>\n+\n+\t* c-decl.c (diagnose_mismatched_decls):  Accept mismatched\n+\tfunction types: void with previous implicit int.\n+\n 2004-12-17  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* config/s390/s390.c (s390_gimplify_va_arg): Set alias set to "}, {"sha": "b728a6b3faae02c838de22006a2c435ecaaddb36", "filename": "gcc/c-decl.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128691426dcb9e2a3cb57c89bc863d03c1009d82/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128691426dcb9e2a3cb57c89bc863d03c1009d82/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=128691426dcb9e2a3cb57c89bc863d03c1009d82", "patch": "@@ -1191,14 +1191,26 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n       else if (TREE_CODE (newdecl) == FUNCTION_DECL && DECL_INITIAL (newdecl)\n \t       && TYPE_MAIN_VARIANT (TREE_TYPE (oldtype)) == void_type_node\n \t       && TYPE_MAIN_VARIANT (TREE_TYPE (newtype)) == integer_type_node\n-\t       && C_FUNCTION_IMPLICIT_INT (newdecl))\n+\t       && C_FUNCTION_IMPLICIT_INT (newdecl) && !DECL_INITIAL (olddecl))\n \t{\n \t  pedwarn (\"%Jconflicting types for %qD\", newdecl, newdecl);\n \t  /* Make sure we keep void as the return type.  */\n \t  TREE_TYPE (newdecl) = *newtypep = newtype = oldtype;\n \t  C_FUNCTION_IMPLICIT_INT (newdecl) = 0;\n \t  pedwarned = true;\n \t}\n+      /* Permit void foo (...) to match an earlier call to foo (...) with\n+\t no declared type (thus, implicitly int).  */\n+      else if (TREE_CODE (newdecl) == FUNCTION_DECL\n+\t       && TYPE_MAIN_VARIANT (TREE_TYPE (newtype)) == void_type_node\n+\t       && TYPE_MAIN_VARIANT (TREE_TYPE (oldtype)) == integer_type_node\n+\t       && C_DECL_IMPLICIT (olddecl) && !DECL_INITIAL (olddecl))\n+\t{\n+\t  pedwarn (\"%Jconflicting types for %qD\", newdecl, newdecl);\n+\t  /* Make sure we keep void as the return type.  */\n+\t  TREE_TYPE (olddecl) = *oldtypep = oldtype = newtype;\n+\t  pedwarned = true;\n+\t}\n       else\n \t{\n \t  if (TYPE_QUALS (newtype) != TYPE_QUALS (oldtype))"}, {"sha": "6dbca4ac5d69d6849bcc94a3c4574a826da06ede", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128691426dcb9e2a3cb57c89bc863d03c1009d82/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128691426dcb9e2a3cb57c89bc863d03c1009d82/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=128691426dcb9e2a3cb57c89bc863d03c1009d82", "patch": "@@ -1,3 +1,7 @@\n+2004-12-17  Dale Johannesen  <dalej@apple.com>\n+\n+\t* gcc.dg/20041213-1.c:  New.\n+\n 2004-12-17  Ziemowit Laski  <zlaski@apple.com>\n \n \t* objc.dg/stabs-1.m: Allow assembly label to begin"}, {"sha": "990273714472dd9ae443faba7edf72b342e8e504", "filename": "gcc/testsuite/gcc.dg/20041213-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128691426dcb9e2a3cb57c89bc863d03c1009d82/gcc%2Ftestsuite%2Fgcc.dg%2F20041213-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128691426dcb9e2a3cb57c89bc863d03c1009d82/gcc%2Ftestsuite%2Fgcc.dg%2F20041213-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20041213-1.c?ref=128691426dcb9e2a3cb57c89bc863d03c1009d82", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* test redeclarations with void and implicit int */\n+extern foo1(); /* { dg-error \"error: previous declaration\" } */\n+extern void foo1(); /* { dg-error \"error: conflicting types\" } */\n+\n+extern void foo2(); /* { dg-error \"error: previous declaration\" } */\n+extern foo2(); /* { dg-error \"error: conflicting types\" } */\n+\n+void foo3() {} /* { dg-error \"error: previous definition\" } */\n+extern foo3(); /* { dg-error \"error: conflicting types\" } */\n+\n+extern foo4(); /* { dg-error \"error: previous declaration\" } */\n+void foo4() {} /* { dg-error \"error: conflicting types\" } */\n+\n+extern void foo5(); /* { dg-warning \"previous declaration\" } */\n+foo5() {} /* { dg-warning \"conflicting types\" } */\n+\n+foo6() {} /* { dg-error \"error: previous definition\" } */\n+extern void foo6(); /* { dg-error \"error: conflicting types\" } */\n+\n+foo7() {} /* { dg-error \"error: previous definition\" } */\n+void foo7() {} /* { dg-error \"error: conflicting types\" } */\n+\n+void foo8() {} /* { dg-error \"error: previous definition\" } */\n+foo8() {} /* { dg-error \"error: conflicting types\" } */\n+\n+int use9() { foo9(); } /* { dg-warning \"previous implicit declaration\" } */\n+extern void foo9(); /* { dg-warning \"conflicting types\" } */\n+\n+int use10() { foo10(); } /* { dg-warning \"previous implicit declaration\" } */\n+void foo10() {} /* { dg-warning \"conflicting types\" } */\n+"}]}