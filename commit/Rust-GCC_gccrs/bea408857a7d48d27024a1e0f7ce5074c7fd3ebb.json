{"sha": "bea408857a7d48d27024a1e0f7ce5074c7fd3ebb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVhNDA4ODU3YTdkNDhkMjcwMjRhMWUwZjdjZTUwNzRjN2ZkM2ViYg==", "commit": {"author": {"name": "Ilya Enkovich", "email": "enkovich.gnu@gmail.com", "date": "2015-11-10T12:19:42Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2015-11-10T12:19:42Z"}, "message": "sse.md (HALFMASKMODE): New attribute.\n\ngcc/\n\n\t* config/i386/sse.md (HALFMASKMODE): New attribute.\n\t(DOUBLEMASKMODE): New attribute.\n\t(vec_pack_trunc_qi): New.\n\t(vec_pack_trunc_<mode>): New.\n\t(vec_unpacks_lo_hi): New.\n\t(vec_unpacks_lo_si): New.\n\t(vec_unpacks_lo_di): New.\n\t(vec_unpacks_hi_hi): New.\n\t(vec_unpacks_hi_<mode>): New.\n\ngcc/testsuite/\n\n\t* gcc.target/i386/mask-pack.c: New test.\n\t* gcc.target/i386/mask-unpack.c: New test.\n\nFrom-SVN: r230104", "tree": {"sha": "60ad0b3f0a515211c653d104d411ce8e63b3c354", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60ad0b3f0a515211c653d104d411ce8e63b3c354"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bea408857a7d48d27024a1e0f7ce5074c7fd3ebb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bea408857a7d48d27024a1e0f7ce5074c7fd3ebb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bea408857a7d48d27024a1e0f7ce5074c7fd3ebb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bea408857a7d48d27024a1e0f7ce5074c7fd3ebb/comments", "author": null, "committer": null, "parents": [{"sha": "e6f5c25d913d3c4e437d6b8b5201a89eb425de9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6f5c25d913d3c4e437d6b8b5201a89eb425de9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6f5c25d913d3c4e437d6b8b5201a89eb425de9a"}], "stats": {"total": 272, "additions": 272, "deletions": 0}, "files": [{"sha": "0763ca1719c524d526cba780fb21671330f580ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea408857a7d48d27024a1e0f7ce5074c7fd3ebb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea408857a7d48d27024a1e0f7ce5074c7fd3ebb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bea408857a7d48d27024a1e0f7ce5074c7fd3ebb", "patch": "@@ -1,3 +1,15 @@\n+2015-11-10  Ilya Enkovich  <enkovich.gnu@gmail.com>\n+\n+\t* config/i386/sse.md (HALFMASKMODE): New attribute.\n+\t(DOUBLEMASKMODE): New attribute.\n+\t(vec_pack_trunc_qi): New.\n+\t(vec_pack_trunc_<mode>): New.\n+\t(vec_unpacks_lo_hi): New.\n+\t(vec_unpacks_lo_si): New.\n+\t(vec_unpacks_lo_di): New.\n+\t(vec_unpacks_hi_hi): New.\n+\t(vec_unpacks_hi_<mode>): New.\n+\n 2015-11-10  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \t* optabs.c (expand_binop_directly): Allow scalar mode for"}, {"sha": "aad6a0ddd98040e101b789e00a4dde655622ede2", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea408857a7d48d27024a1e0f7ce5074c7fd3ebb/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea408857a7d48d27024a1e0f7ce5074c7fd3ebb/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=bea408857a7d48d27024a1e0f7ce5074c7fd3ebb", "patch": "@@ -799,6 +799,14 @@\n   [(V32QI \"t\") (V16HI \"t\") (V8SI \"t\") (V4DI \"t\") (V8SF \"t\") (V4DF \"t\")\n    (V64QI \"g\") (V32HI \"g\") (V16SI \"g\") (V8DI \"g\") (V16SF \"g\") (V8DF \"g\")])\n \n+;; Half mask mode for unpacks\n+(define_mode_attr HALFMASKMODE\n+  [(DI \"SI\") (SI \"HI\")])\n+\n+;; Double mask mode for packs\n+(define_mode_attr DOUBLEMASKMODE\n+  [(HI \"SI\") (SI \"DI\")])\n+\n \n ;; Include define_subst patterns for instructions with mask\n (include \"subst.md\")\n@@ -11578,6 +11586,23 @@\n   DONE;\n })\n \n+(define_expand \"vec_pack_trunc_qi\"\n+  [(set (match_operand:HI 0 (\"register_operand\"))\n+        (ior:HI (ashift:HI (zero_extend:HI (match_operand:QI 1 (\"register_operand\")))\n+                           (const_int 8))\n+                (zero_extend:HI (match_operand:QI 2 (\"register_operand\")))))]\n+  \"TARGET_AVX512F\")\n+\n+(define_expand \"vec_pack_trunc_<mode>\"\n+  [(set (match_operand:<DOUBLEMASKMODE> 0 (\"register_operand\"))\n+        (ior:<DOUBLEMASKMODE> (ashift:<DOUBLEMASKMODE> (zero_extend:<DOUBLEMASKMODE> (match_operand:SWI24 1 (\"register_operand\")))\n+                           (match_dup 3))\n+                (zero_extend:<DOUBLEMASKMODE> (match_operand:SWI24 2 (\"register_operand\")))))]\n+  \"TARGET_AVX512BW\"\n+{\n+  operands[3] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode));\n+})\n+\n (define_insn \"<sse2_avx2>_packsswb<mask_name>\"\n   [(set (match_operand:VI1_AVX512 0 \"register_operand\" \"=x,x\")\n \t(vec_concat:VI1_AVX512\n@@ -13474,12 +13499,42 @@\n   \"TARGET_SSE2\"\n   \"ix86_expand_sse_unpack (operands[0], operands[1], true, false); DONE;\")\n \n+(define_expand \"vec_unpacks_lo_hi\"\n+  [(set (match_operand:QI 0 \"register_operand\")\n+        (subreg:QI (match_operand:HI 1 \"register_operand\") 0))]\n+  \"TARGET_AVX512DQ\")\n+\n+(define_expand \"vec_unpacks_lo_si\"\n+  [(set (match_operand:HI 0 \"register_operand\")\n+        (subreg:HI (match_operand:SI 1 \"register_operand\") 0))]\n+  \"TARGET_AVX512F\")\n+\n+(define_expand \"vec_unpacks_lo_di\"\n+  [(set (match_operand:SI 0 \"register_operand\")\n+        (subreg:SI (match_operand:DI 1 \"register_operand\") 0))]\n+  \"TARGET_AVX512BW\")\n+\n (define_expand \"vec_unpacku_hi_<mode>\"\n   [(match_operand:<sseunpackmode> 0 \"register_operand\")\n    (match_operand:VI124_AVX2_24_AVX512F_1_AVX512BW 1 \"register_operand\")]\n   \"TARGET_SSE2\"\n   \"ix86_expand_sse_unpack (operands[0], operands[1], true, true); DONE;\")\n \n+(define_expand \"vec_unpacks_hi_hi\"\n+  [(set (subreg:HI (match_operand:QI 0 \"register_operand\") 0)\n+        (lshiftrt:HI (match_operand:HI 1 \"register_operand\")\n+                     (const_int 8)))]\n+  \"TARGET_AVX512F\")\n+\n+(define_expand \"vec_unpacks_hi_<mode>\"\n+  [(set (subreg:SWI48x (match_operand:<HALFMASKMODE> 0 \"register_operand\") 0)\n+        (lshiftrt:SWI48x (match_operand:SWI48x 1 \"register_operand\")\n+                         (match_dup 2)))]\n+  \"TARGET_AVX512BW\"\n+{\n+  operands[2] = GEN_INT (GET_MODE_BITSIZE (<HALFMASKMODE>mode));\n+})\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Miscellaneous"}, {"sha": "c99c62c7c5212d5d66acd10be1673e861ceb53ef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea408857a7d48d27024a1e0f7ce5074c7fd3ebb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea408857a7d48d27024a1e0f7ce5074c7fd3ebb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bea408857a7d48d27024a1e0f7ce5074c7fd3ebb", "patch": "@@ -1,3 +1,8 @@\n+2015-11-10  Ilya Enkovich  <enkovich.gnu@gmail.com>\n+\n+\t* gcc.target/i386/mask-pack.c: New test.\n+\t* gcc.target/i386/mask-unpack.c: New test.\n+\n 2015-11-10  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \t* gcc.target/i386/avx2-vec-mask-bit-not.c: New test."}, {"sha": "0b564ef4284790511f48a90b934b9d0311bd7f8d", "filename": "gcc/testsuite/gcc.target/i386/mask-pack.c", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea408857a7d48d27024a1e0f7ce5074c7fd3ebb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmask-pack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea408857a7d48d27024a1e0f7ce5074c7fd3ebb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmask-pack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmask-pack.c?ref=bea408857a7d48d27024a1e0f7ce5074c7fd3ebb", "patch": "@@ -0,0 +1,100 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O3 -fopenmp-simd -fdump-tree-vect-details\" } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 10 \"vect\" } } */\n+/* { dg-final { scan-assembler-not \"maskmov\" } } */\n+\n+#define LENGTH 1000\n+\n+long l1[LENGTH], l2[LENGTH];\n+int i1[LENGTH], i2[LENGTH];\n+short s1[LENGTH], s2[LENGTH];\n+char c1[LENGTH], c2[LENGTH];\n+double d1[LENGTH], d2[LENGTH];\n+\n+int test1 (int n)\n+{\n+  int i;\n+  #pragma omp simd safelen(16)\n+  for (i = 0; i < LENGTH; i++)\n+    if (l1[i] > l2[i])\n+      i1[i] = 1;\n+}\n+\n+int test2 (int n)\n+{\n+  int i;\n+  #pragma omp simd safelen(16)\n+  for (i = 0; i < LENGTH; i++)\n+    if (i1[i] > i2[i])\n+      s1[i] = 1;\n+}\n+\n+int test3 (int n)\n+{\n+  int i;\n+  #pragma omp simd safelen(16)\n+  for (i = 0; i < LENGTH; i++)\n+    if (s1[i] > s2[i])\n+      c1[i] = 1;\n+}\n+\n+int test4 (int n)\n+{\n+  int i;\n+  #pragma omp simd safelen(16)\n+  for (i = 0; i < LENGTH; i++)\n+    if (d1[i] > d2[i])\n+      c1[i] = 1;\n+}\n+\n+int test5 (int n)\n+{\n+  int i;\n+  #pragma omp simd safelen(16)\n+  for (i = 0; i < LENGTH; i++)\n+    i1[i] = l1[i] > l2[i] ? 3 : 4;\n+}\n+\n+int test6 (int n)\n+{\n+  int i;\n+  #pragma omp simd safelen(16)\n+  for (i = 0; i < LENGTH; i++)\n+    s1[i] = i1[i] > i2[i] ? 3 : 4;\n+}\n+\n+int test7 (int n)\n+{\n+  int i;\n+  #pragma omp simd safelen(16)\n+  for (i = 0; i < LENGTH; i++)\n+    c1[i] = s1[i] > s2[i] ? 3 : 4;\n+}\n+\n+int test8 (int n)\n+{\n+  int i;\n+  #pragma omp simd safelen(16)\n+  for (i = 0; i < LENGTH; i++)\n+    c1[i] = d1[i] > d2[i] ? 3 : 4;\n+}\n+\n+int test9 (int n)\n+{\n+  int i;\n+  #pragma omp simd safelen(16)\n+  for (i = 0; i < LENGTH; i++)\n+    if (l1[i] > l2[i] && i1[i] < i2[i])\n+      c1[i] = 1;\n+}\n+\n+int test10 (int n)\n+{\n+  int i;\n+  #pragma omp simd safelen(16)\n+  for (i = 0; i < LENGTH; i++)\n+    if (l1[i] > l2[i] && i1[i] < i2[i])\n+      c1[i] = 1;\n+    else\n+      c1[i] = 2;\n+}"}, {"sha": "5905e1cf00fcf92d3cbcf5d4e97a4c5b4fc63b9e", "filename": "gcc/testsuite/gcc.target/i386/mask-unpack.c", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea408857a7d48d27024a1e0f7ce5074c7fd3ebb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmask-unpack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea408857a7d48d27024a1e0f7ce5074c7fd3ebb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmask-unpack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmask-unpack.c?ref=bea408857a7d48d27024a1e0f7ce5074c7fd3ebb", "patch": "@@ -0,0 +1,100 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512dq -O3 -fopenmp-simd -fdump-tree-vect-details\" } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 10 \"vect\" } } */\n+/* { dg-final { scan-assembler-not \"maskmov\" } } */\n+\n+#define LENGTH 1000\n+\n+long l1[LENGTH], l2[LENGTH];\n+int i1[LENGTH], i2[LENGTH];\n+short s1[LENGTH], s2[LENGTH];\n+char c1[LENGTH], c2[LENGTH];\n+double d1[LENGTH], d2[LENGTH];\n+\n+int test1 ()\n+{\n+  int i;\n+  #pragma omp simd safelen(16)\n+  for (i = 0; i < LENGTH; i++)\n+    if (i1[i] > i2[i])\n+      l1[i] = 1;\n+}\n+\n+int test2 (int n)\n+{\n+  int i;\n+  #pragma omp simd safelen(32)\n+  for (i = 0; i < LENGTH; i++)\n+    if (s1[i] > s2[i])\n+      i1[i] = 1;\n+}\n+\n+int test3 (int n)\n+{\n+  int i;\n+  #pragma omp simd safelen(32)\n+  for (i = 0; i < LENGTH; i++)\n+    if (c1[i] > c2[i])\n+      s1[i] = 1;\n+}\n+\n+int test4 (int n)\n+{\n+  int i;\n+  #pragma omp simd safelen(32)\n+  for (i = 0; i < LENGTH; i++)\n+    if (c1[i] > c2[i])\n+      d1[i] = 1;\n+}\n+\n+int test5 (int n)\n+{\n+  int i;\n+  #pragma omp simd safelen(32)\n+  for (i = 0; i < LENGTH; i++)\n+    l1[i] = i1[i] > i2[i] ? 1 : 2;\n+}\n+\n+int test6 (int n)\n+{\n+  int i;\n+  #pragma omp simd safelen(32)\n+  for (i = 0; i < LENGTH; i++)\n+    i1[i] = s1[i] > s2[i] ? 1 : 2;\n+}\n+\n+int test7 (int n)\n+{\n+  int i;\n+  #pragma omp simd safelen(32)\n+  for (i = 0; i < LENGTH; i++)\n+    s1[i] = c1[i] > c2[i] ? 1 : 2;\n+}\n+\n+int test8 (int n)\n+{\n+  int i;\n+  #pragma omp simd safelen(32)\n+  for (i = 0; i < LENGTH; i++)\n+    d1[i] = c1[i] > c2[i] ? 1 : 2;\n+}\n+\n+int test9 (int n)\n+{\n+  int i;\n+  #pragma omp simd safelen(16)\n+  for (i = 0; i < LENGTH; i++)\n+    if (c1[i] > c2[i] && i1[i] < i2[i])\n+      l1[i] = 1;\n+}\n+\n+int test10 (int n)\n+{\n+  int i;\n+  #pragma omp simd safelen(16)\n+  for (i = 0; i < LENGTH; i++)\n+    if (c1[i] > c2[i] && i1[i] < i2[i])\n+      l1[i] = 1;\n+    else\n+      l1[i] = 2;\n+}"}]}