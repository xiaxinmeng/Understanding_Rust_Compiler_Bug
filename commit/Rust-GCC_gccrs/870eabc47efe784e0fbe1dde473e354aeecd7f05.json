{"sha": "870eabc47efe784e0fbe1dde473e354aeecd7f05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODcwZWFiYzQ3ZWZlNzg0ZTBmYmUxZGRlNDczZTM1NGFlZWNkN2YwNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-02-08T12:39:14Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-02-08T12:39:14Z"}, "message": "improve comments\n\nFrom-SVN: r39537", "tree": {"sha": "5633471312e67fc3cf0bea109b8100e267d5654e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5633471312e67fc3cf0bea109b8100e267d5654e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/870eabc47efe784e0fbe1dde473e354aeecd7f05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/870eabc47efe784e0fbe1dde473e354aeecd7f05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/870eabc47efe784e0fbe1dde473e354aeecd7f05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/870eabc47efe784e0fbe1dde473e354aeecd7f05/comments", "author": null, "committer": null, "parents": [{"sha": "1ae696e59a3b389f2fb75a2470762c7595af3ed7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ae696e59a3b389f2fb75a2470762c7595af3ed7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ae696e59a3b389f2fb75a2470762c7595af3ed7"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "9e7aa99ae941e88215733803975e031ab025c5c3", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870eabc47efe784e0fbe1dde473e354aeecd7f05/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870eabc47efe784e0fbe1dde473e354aeecd7f05/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=870eabc47efe784e0fbe1dde473e354aeecd7f05", "patch": "@@ -3886,9 +3886,9 @@ next_stack_level (void *pc, frame_state *udata, frame_state *caller_udata,\n     return 0;\n \n   /* Now go back to our caller's stack frame.  If our caller's CFA was\n-     saved in a register in this stack frame or a previous one,\n-     restore it; otherwise, assume CFA register was saved in SP and\n-     restore it to our CFA value.  */\n+     saved in a register in this stack frame or a previous one, restore it;\n+     otherwise, assume CFA register is SP and restore it to our CFA value\n+     (which is defined to be the value of SP in the caller's frame).  */\n \n   p = saved_regs->reg[caller_udata->cfa_reg];\n   if (p)\n@@ -4107,7 +4107,12 @@ __throw (void)\n      On the SPARC, this means flushing the register windows.  */\n   __builtin_unwind_init ();\n \n-  /* Now reset pc to the right throw point.  */\n+  /* Now reset pc to the right throw point.  The return address points to\n+     the instruction after the call to __throw; we subtract 1 so that pc\n+     points into the call insn itself.  Since we work with PC ranges (as\n+     opposed to specific call sites), it isn't important for it to point to\n+     the very beginning of the call insn, and making it do so would be\n+     hard on targets with variable length call insns.  */\n   pc = __builtin_extract_return_addr (__builtin_return_address (0)) - 1;\n \n   handler = throw_helper (eh, pc, my_udata, &offset);\n@@ -4157,7 +4162,12 @@ __rethrow (void *index)\n      On the SPARC, this means flushing the register windows.  */\n   __builtin_unwind_init ();\n \n-  /* Now reset pc to the right throw point.  */\n+  /* Now reset pc to the right throw point.  The return address points to\n+     the instruction after the call to __throw; we subtract 1 so that pc\n+     points into the call insn itself.  Since we work with PC ranges (as\n+     opposed to specific call sites), it isn't important for it to point to\n+     the very beginning of the call insn, and making it do so would be\n+     hard on targets with variable length call insns.  */\n   pc = __builtin_extract_return_addr (__builtin_return_address (0)) - 1;\n \n   handler = throw_helper (eh, pc, my_udata, &offset);"}]}