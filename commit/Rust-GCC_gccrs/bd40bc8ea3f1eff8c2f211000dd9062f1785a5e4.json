{"sha": "bd40bc8ea3f1eff8c2f211000dd9062f1785a5e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ0MGJjOGVhM2YxZWZmOGMyZjIxMTAwMGRkOTA2MmYxNzg1YTVlNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-04-04T16:42:44Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-04-04T16:42:44Z"}, "message": "PR c++/85118 - wrong error with generic lambda and std::bind.\n\n\t* call.c (add_template_conv_candidate): Disable if there are any\n\tcall operators.\n\nFrom-SVN: r259090", "tree": {"sha": "9a7e43dc75fb6ef34094a6d4ff75ab17e6525bcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a7e43dc75fb6ef34094a6d4ff75ab17e6525bcd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd40bc8ea3f1eff8c2f211000dd9062f1785a5e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd40bc8ea3f1eff8c2f211000dd9062f1785a5e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd40bc8ea3f1eff8c2f211000dd9062f1785a5e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd40bc8ea3f1eff8c2f211000dd9062f1785a5e4/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7447f1d7e21fbebd7ddaf9865bf05104592f3049", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7447f1d7e21fbebd7ddaf9865bf05104592f3049", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7447f1d7e21fbebd7ddaf9865bf05104592f3049"}], "stats": {"total": 135, "additions": 132, "deletions": 3}, "files": [{"sha": "f0927e82b36d14b8498ea248cb645c3f78b6bc2e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd40bc8ea3f1eff8c2f211000dd9062f1785a5e4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd40bc8ea3f1eff8c2f211000dd9062f1785a5e4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bd40bc8ea3f1eff8c2f211000dd9062f1785a5e4", "patch": "@@ -1,5 +1,9 @@\n 2018-04-04  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/85118 - wrong error with generic lambda and std::bind.\n+\t* call.c (add_template_conv_candidate): Disable if there are any\n+\tcall operators.\n+\n \tPR c++/85141 - ICE with compound assignment and static member fn.\n \t* typeck.c (cp_build_modify_expr): Call decay_conversion for RHS of\n \tcompound assignment."}, {"sha": "f81773157b6ee0d012d3589ae4af7bb2e7f1557f", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd40bc8ea3f1eff8c2f211000dd9062f1785a5e4/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd40bc8ea3f1eff8c2f211000dd9062f1785a5e4/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=bd40bc8ea3f1eff8c2f211000dd9062f1785a5e4", "patch": "@@ -3274,10 +3274,10 @@ add_template_conv_candidate (struct z_candidate **candidates, tree tmpl,\n \t\t\t     tree return_type, tree access_path,\n \t\t\t     tree conversion_path, tsubst_flags_t complain)\n {\n-  /* Making this work broke PR 71117, so until the committee resolves core\n-     issue 2189, let's disable this candidate if there are any viable call\n+  /* Making this work broke PR 71117 and 85118, so until the committee resolves\n+     core issue 2189, let's disable this candidate if there are any call\n      operators.  */\n-  if (any_strictly_viable (*candidates))\n+  if (*candidates)\n     return NULL;\n \n   return"}, {"sha": "4a7392f93bc788cb4326e11585d789e1e2e9ca4c", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-variadic17.C", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd40bc8ea3f1eff8c2f211000dd9062f1785a5e4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd40bc8ea3f1eff8c2f211000dd9062f1785a5e4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic17.C?ref=bd40bc8ea3f1eff8c2f211000dd9062f1785a5e4", "patch": "@@ -0,0 +1,125 @@\n+// PR c++/85118\n+// { dg-do compile { target c++14 } }\n+\n+namespace std\n+{\n+  template<typename _Tp>\n+    struct remove_const\n+    { typedef _Tp type; };\n+\n+  template<typename _Tp>\n+    struct remove_const<_Tp const>\n+    { typedef _Tp type; };\n+\n+\n+  template<typename _Tp>\n+    struct remove_volatile\n+    { typedef _Tp type; };\n+\n+  template<typename _Tp>\n+    struct remove_volatile<_Tp volatile>\n+    { typedef _Tp type; };\n+\n+\n+  template<typename _Tp>\n+    struct remove_cv\n+    {\n+      typedef typename\n+      remove_const<typename remove_volatile<_Tp>::type>::type type;\n+    };\n+\n+  template<typename _Tp>\n+    struct remove_reference\n+    { typedef _Tp type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&>\n+    { typedef _Tp type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&&>\n+    { typedef _Tp type; };\n+\n+  template<typename _Tp>\n+    struct decay\n+    {\n+      using type = typename remove_reference<typename remove_const<_Tp>::type>::type;\n+    };\n+\n+  template<typename _Tp>\n+    _Tp&&\n+    declval() noexcept;\n+\n+  template<typename _Tp>\n+    constexpr _Tp&&\n+    forward(typename std::remove_reference<_Tp>::type& __t) noexcept\n+    { return static_cast<_Tp&&>(__t); }\n+\n+\n+  template<typename _Arg>\n+    struct _Mu\n+    {\n+      template<typename _CVArg, typename _Tuple>\n+         _CVArg&&\n+         operator()(_CVArg&& __arg, _Tuple&) const volatile\n+         { return std::forward<_CVArg>(__arg); }\n+    };\n+\n+   template<typename _Functor, typename _Bound_args>\n+    struct _Bind\n+    {\n+      _Functor _M_f;\n+      _Bound_args _M_bound_args;\n+\n+      template<typename _Args, typename _Result\n+         = decltype( std::declval<_Functor&>()(\n+               _Mu<_Bound_args>()( std::declval<_Bound_args&>(),\n+              std::declval<_Args&>() ) ) )>\n+         _Result\n+      operator()(_Args&& __args) { return {}; }\n+\n+      template<typename _Args, typename _Result\n+         = decltype( std::declval<volatile _Functor&>()(\n+               _Mu<_Bound_args>()( std::declval<volatile _Bound_args&>(),\n+              std::declval<_Args&>() ) ) )>\n+         _Result\n+         operator()(_Args&& __args) volatile;\n+\n+    };\n+\n+  template<typename _Func, typename _BoundArgs>\n+    _Bind<typename decay<_Func>::type, typename decay<_BoundArgs>::type>\n+    bind(_Func&& __f, _BoundArgs&& __args)\n+    {\n+      return {\n+        std::forward<_Func>(__f),\n+          std::forward<_BoundArgs>(__args)\n+      };\n+    }\n+\n+} // namespace std\n+\n+\n+template <typename T>\n+bool isOneOf(const T& )\n+{\n+    return false;\n+}\n+\n+template <typename T, typename FirstType, typename... Tail>\n+bool isOneOf(const T& t, const FirstType& firstValue, const Tail&... tail)\n+{\n+    return t == firstValue || isOneOf(t, tail...);\n+}\n+\n+int main()\n+{\n+    const auto isOneOfHelper = [](auto&&... params)\n+    {\n+      return isOneOf(std::forward<decltype(params)>(params)...);\n+    };\n+\n+    auto isO = std::bind(isOneOfHelper, 'o');\n+\n+    isO('o');\n+}"}]}