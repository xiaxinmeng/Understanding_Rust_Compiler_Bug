{"sha": "705bcbfeeccd0217f1764e9669ae727960563d24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA1YmNiZmVlY2NkMDIxN2YxNzY0ZTk2NjlhZTcyNzk2MDU2M2QyNA==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-07-16T14:09:44Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-07-16T14:09:44Z"}, "message": "[Ada] Illegal deferred constant causes stack overflow\n\nThis patch prevents the compiler from entering infinite recursion when\nprocessing an illegal deferred constant.\n\n------------\n-- Source --\n------------\n\n--  types.ads\n\npackage Types is\n   type Enum is (One, Two);\nend Types;\n\n--  types2.ads\n\nwith Types;\n\npackage Types2 is\n   type Enum is private;\n   One : constant Enum;\n   Two : constant Enum;\n\nprivate\n   type Enum is new Types.Enum;\n   One : constant Enum := One;\n   Two : constant Enum := Two;\n\nend Types2;\n\n----------------------------\n-- Compilation and output --\n----------------------------\n\n$ gcc -c types2.ads\ntypes2.ads:10:04: full constant declaration appears too late\ntypes2.ads:11:04: full constant declaration appears too late\n\n2018-07-16  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* sem_eval.adb (Compile_Time_Known_Value): Add a guard which prevents\n\tthe compiler from entering infinite recursion when trying to determine\n\twhether a deferred constant has a compile time known value, and the\n\tinitialization expression of the constant is a reference to the\n\tconstant itself.\n\nFrom-SVN: r262698", "tree": {"sha": "996e7ec40828441a661586fffa285a6d2f75d9c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/996e7ec40828441a661586fffa285a6d2f75d9c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/705bcbfeeccd0217f1764e9669ae727960563d24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/705bcbfeeccd0217f1764e9669ae727960563d24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/705bcbfeeccd0217f1764e9669ae727960563d24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/705bcbfeeccd0217f1764e9669ae727960563d24/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e05a1ce7113ba87b45bb6c950a8ae0bf56c536e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e05a1ce7113ba87b45bb6c950a8ae0bf56c536e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e05a1ce7113ba87b45bb6c950a8ae0bf56c536e3"}], "stats": {"total": 49, "additions": 37, "deletions": 12}, "files": [{"sha": "7b5c30882a92072e39191acc9383c6836791680c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/705bcbfeeccd0217f1764e9669ae727960563d24/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/705bcbfeeccd0217f1764e9669ae727960563d24/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=705bcbfeeccd0217f1764e9669ae727960563d24", "patch": "@@ -1,3 +1,11 @@\n+2018-07-16  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_eval.adb (Compile_Time_Known_Value): Add a guard which prevents\n+\tthe compiler from entering infinite recursion when trying to determine\n+\twhether a deferred constant has a compile time known value, and the\n+\tinitialization expression of the constant is a reference to the\n+\tconstant itself.\n+\n 2018-07-16  Nicolas Roche  <roche@adacore.com>\n \n \t* libgnat/a-strunb.adb, libgnat/a-strunb__shared.adb: Adjust growth"}, {"sha": "957abde6ad06871c26087419c1a7de3a21bdebc2", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/705bcbfeeccd0217f1764e9669ae727960563d24/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/705bcbfeeccd0217f1764e9669ae727960563d24/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=705bcbfeeccd0217f1764e9669ae727960563d24", "patch": "@@ -1705,29 +1705,46 @@ package body Sem_Eval is\n       end if;\n \n       --  If we have an entity name, then see if it is the name of a constant\n-      --  and if so, test the corresponding constant value, or the name of\n-      --  an enumeration literal, which is always a constant.\n+      --  and if so, test the corresponding constant value, or the name of an\n+      --  enumeration literal, which is always a constant.\n \n       if Present (Etype (Op)) and then Is_Entity_Name (Op) then\n          declare\n-            E : constant Entity_Id := Entity (Op);\n-            V : Node_Id;\n+            Ent : constant Entity_Id := Entity (Op);\n+            Val : Node_Id;\n \n          begin\n-            --  Never known at compile time if it is a packed array value.\n-            --  We might want to try to evaluate these at compile time one\n-            --  day, but we do not make that attempt now.\n+            --  Never known at compile time if it is a packed array value. We\n+            --  might want to try to evaluate these at compile time one day,\n+            --  but we do not make that attempt now.\n \n             if Is_Packed_Array_Impl_Type (Etype (Op)) then\n                return False;\n-            end if;\n \n-            if Ekind (E) = E_Enumeration_Literal then\n+            elsif Ekind (Ent) = E_Enumeration_Literal then\n                return True;\n \n-            elsif Ekind (E) = E_Constant then\n-               V := Constant_Value (E);\n-               return Present (V) and then Compile_Time_Known_Value (V);\n+            elsif Ekind (Ent) = E_Constant then\n+               Val := Constant_Value (Ent);\n+\n+               if Present (Val) then\n+\n+                  --  Guard against an illegal deferred constant whose full\n+                  --  view is initialized with a reference to itself. Treat\n+                  --  this case as value not known at compile time.\n+\n+                  if Is_Entity_Name (Val) and then Entity (Val) = Ent then\n+                     return False;\n+                  else\n+                     return Compile_Time_Known_Value (Val);\n+                  end if;\n+\n+               --  Otherwise the constant does not have a compile time known\n+               --  value.\n+\n+               else\n+                  return False;\n+               end if;\n             end if;\n          end;\n "}]}