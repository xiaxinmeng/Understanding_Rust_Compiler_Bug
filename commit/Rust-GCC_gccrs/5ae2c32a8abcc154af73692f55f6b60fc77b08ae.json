{"sha": "5ae2c32a8abcc154af73692f55f6b60fc77b08ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFlMmMzMmE4YWJjYzE1NGFmNzM2OTJmNTVmNmI2MGZjNzdiMDhhZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-10-16T14:49:29Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-10-16T14:49:29Z"}, "message": "Define _GLIBCXX_USE_DEV_RANDOM as replacement for _GLIBCXX_USE_RANDOM_TR1\n\nDefine and use a new macro with a more descriptive name. Only use the\nold macro in <tr1/random.h>.\n\n\t* acinclude.m4 (GLIBCXX_CHECK_RANDOM_TR1): Replace with ...\n\t(GLIBCXX_CHECK_DEV_RANDOM): New macro with more descriptive name.\n\tDefine _GLIBCXX_USE_DEV_RANDOM as well as _GLIBCXX_USE_RANDOM_TR1.\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.\n\t* configure.ac: Use GLIBCXX_CHECK_DEV_RANDOM instead of\n\tGLIBCXX_CHECK_RANDOM_TR1.\n\tcrossconfig.m4: Likewise.\n\t* include/bits/random.h (random_device): Use _GLIBCXX_USE_DEV_RANDOM\n\tinstead of _GLIBCXX_USE_RANDOM_TR1.\n\t* testsuite/26_numerics/random/random_device/cons/token.cc: Likewise.\n\nFrom-SVN: r265197", "tree": {"sha": "1b49c6938582e78efc39822706e0c5af7bd1e484", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b49c6938582e78efc39822706e0c5af7bd1e484"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ae2c32a8abcc154af73692f55f6b60fc77b08ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ae2c32a8abcc154af73692f55f6b60fc77b08ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ae2c32a8abcc154af73692f55f6b60fc77b08ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ae2c32a8abcc154af73692f55f6b60fc77b08ae/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "630f2da9676a699dbd734799822d146861e76f71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/630f2da9676a699dbd734799822d146861e76f71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/630f2da9676a699dbd734799822d146861e76f71"}], "stats": {"total": 89, "additions": 60, "deletions": 29}, "files": [{"sha": "bfb372dff83e1ee6468488f4fc44783eee65b8e0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae2c32a8abcc154af73692f55f6b60fc77b08ae/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae2c32a8abcc154af73692f55f6b60fc77b08ae/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5ae2c32a8abcc154af73692f55f6b60fc77b08ae", "patch": "@@ -1,3 +1,17 @@\n+2018-10-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* acinclude.m4 (GLIBCXX_CHECK_RANDOM_TR1): Replace with ...\n+\t(GLIBCXX_CHECK_DEV_RANDOM): New macro with more descriptive name.\n+\tDefine _GLIBCXX_USE_DEV_RANDOM as well as _GLIBCXX_USE_RANDOM_TR1.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* configure.ac: Use GLIBCXX_CHECK_DEV_RANDOM instead of\n+\tGLIBCXX_CHECK_RANDOM_TR1.\n+\tcrossconfig.m4: Likewise.\n+\t* include/bits/random.h (random_device): Use _GLIBCXX_USE_DEV_RANDOM\n+\tinstead of _GLIBCXX_USE_RANDOM_TR1.\n+\t* testsuite/26_numerics/random/random_device/cons/token.cc: Likewise.\n+\n 2018-10-16  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* testsuite/lib/dg-options.exp (add_options_for_net_ts): New proc."}, {"sha": "82a25e5f2f113f36cfc12e666ae5a7d6136e3c05", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae2c32a8abcc154af73692f55f6b60fc77b08ae/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae2c32a8abcc154af73692f55f6b60fc77b08ae/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=5ae2c32a8abcc154af73692f55f6b60fc77b08ae", "patch": "@@ -2073,27 +2073,31 @@ AC_DEFUN([GLIBCXX_CHECK_UCHAR_H], [\n \n \n dnl\n-dnl Check whether \"/dev/random\" and \"/dev/urandom\" are available for the\n+dnl Check whether \"/dev/random\" and \"/dev/urandom\" are available for\n+dnl class std::random_device from C++ 2011 [rand.device], and\n dnl random_device of \"TR1\" (Chapter 5.1, \"Random number generation\").\n dnl\n-AC_DEFUN([GLIBCXX_CHECK_RANDOM_TR1], [\n+AC_DEFUN([GLIBCXX_CHECK_DEV_RANDOM], [\n \n-  AC_MSG_CHECKING([for \"/dev/random\" and \"/dev/urandom\" for TR1 random_device])\n-  AC_CACHE_VAL(glibcxx_cv_random_tr1, [\n+  AC_MSG_CHECKING([for \"/dev/random\" and \"/dev/urandom\" for std::random_device])\n+  AC_CACHE_VAL(glibcxx_cv_dev_random, [\n     if test -r /dev/random && test -r /dev/urandom; then\n-  ## For MSys environment the test above is detect as false-positive\n-  ## on mingw-targets.  So disable it explicit for them.\n+  ## For MSys environment the test above is detected as false-positive\n+  ## on mingw-targets.  So disable it explicitly for them.\n       case ${target_os} in\n-\t*mingw*) glibcxx_cv_random_tr1=no ;;\n-\t*) glibcxx_cv_random_tr1=yes ;;\n+\t*mingw*) glibcxx_cv_dev_random=no ;;\n+\t*) glibcxx_cv_dev_random=yes ;;\n       esac\n     else\n-      glibcxx_cv_random_tr1=no;\n+      glibcxx_cv_dev_random=no;\n     fi\n   ])\n-  AC_MSG_RESULT($glibcxx_cv_random_tr1)\n+  AC_MSG_RESULT($glibcxx_cv_dev_random)\n \n-  if test x\"$glibcxx_cv_random_tr1\" = x\"yes\"; then\n+  if test x\"$glibcxx_cv_dev_random\" = x\"yes\"; then\n+    AC_DEFINE(_GLIBCXX_USE_DEV_RANDOM, 1,\n+\t      [Define if /dev/random and /dev/urandom are available for\n+\t       std::random_device.])\n     AC_DEFINE(_GLIBCXX_USE_RANDOM_TR1, 1,\n \t      [Define if /dev/random and /dev/urandom are available for\n \t       the random_device of TR1 (Chapter 5.1).])"}, {"sha": "65e7b46dc4e62c6144c8ca91a9cc960302ce2339", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae2c32a8abcc154af73692f55f6b60fc77b08ae/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae2c32a8abcc154af73692f55f6b60fc77b08ae/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=5ae2c32a8abcc154af73692f55f6b60fc77b08ae", "patch": "@@ -924,6 +924,10 @@\n    this host. */\n #undef _GLIBCXX_USE_DECIMAL_FLOAT\n \n+/* Define if /dev/random and /dev/urandom are available for\n+   std::random_device. */\n+#undef _GLIBCXX_USE_DEV_RANDOM\n+\n /* Define if fchmod is available in <sys/stat.h>. */\n #undef _GLIBCXX_USE_FCHMOD\n "}, {"sha": "93a727e7cff4e02f21cb227f43a15a81304bac2d", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae2c32a8abcc154af73692f55f6b60fc77b08ae/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae2c32a8abcc154af73692f55f6b60fc77b08ae/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=5ae2c32a8abcc154af73692f55f6b60fc77b08ae", "patch": "@@ -27852,32 +27852,35 @@ done\n   CXXFLAGS=\"$ac_save_CXXFLAGS\"\n \n \n-  # For /dev/random and /dev/urandom for TR1.\n+  # For /dev/random and /dev/urandom for std::random_device.\n \n \n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for \\\"/dev/random\\\" and \\\"/dev/urandom\\\" for TR1 random_device\" >&5\n-$as_echo_n \"checking for \\\"/dev/random\\\" and \\\"/dev/urandom\\\" for TR1 random_device... \" >&6; }\n-  if test \"${glibcxx_cv_random_tr1+set}\" = set; then :\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for \\\"/dev/random\\\" and \\\"/dev/urandom\\\" for std::random_device\" >&5\n+$as_echo_n \"checking for \\\"/dev/random\\\" and \\\"/dev/urandom\\\" for std::random_device... \" >&6; }\n+  if test \"${glibcxx_cv_dev_random+set}\" = set; then :\n   $as_echo_n \"(cached) \" >&6\n else\n \n     if test -r /dev/random && test -r /dev/urandom; then\n-  ## For MSys environment the test above is detect as false-positive\n-  ## on mingw-targets.  So disable it explicit for them.\n+  ## For MSys environment the test above is detected as false-positive\n+  ## on mingw-targets.  So disable it explicitly for them.\n       case ${target_os} in\n-\t*mingw*) glibcxx_cv_random_tr1=no ;;\n-\t*) glibcxx_cv_random_tr1=yes ;;\n+\t*mingw*) glibcxx_cv_dev_random=no ;;\n+\t*) glibcxx_cv_dev_random=yes ;;\n       esac\n     else\n-      glibcxx_cv_random_tr1=no;\n+      glibcxx_cv_dev_random=no;\n     fi\n \n fi\n \n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_random_tr1\" >&5\n-$as_echo \"$glibcxx_cv_random_tr1\" >&6; }\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_dev_random\" >&5\n+$as_echo \"$glibcxx_cv_dev_random\" >&6; }\n+\n+  if test x\"$glibcxx_cv_dev_random\" = x\"yes\"; then\n+\n+$as_echo \"#define _GLIBCXX_USE_DEV_RANDOM 1\" >>confdefs.h\n \n-  if test x\"$glibcxx_cv_random_tr1\" = x\"yes\"; then\n \n $as_echo \"#define _GLIBCXX_USE_RANDOM_TR1 1\" >>confdefs.h\n \n@@ -47105,6 +47108,8 @@ done\n \n   CXXFLAGS=\"$ac_save_CXXFLAGS\"\n \n+    $as_echo \"#define _GLIBCXX_USE_DEV_RANDOM 1\" >>confdefs.h\n+\n     $as_echo \"#define _GLIBCXX_USE_RANDOM_TR1 1\" >>confdefs.h\n \n     # We don't yet support AIX's TLS ABI.\n@@ -59737,6 +59742,8 @@ done\n \n   CXXFLAGS=\"$ac_save_CXXFLAGS\"\n \n+    $as_echo \"#define _GLIBCXX_USE_DEV_RANDOM 1\" >>confdefs.h\n+\n     $as_echo \"#define _GLIBCXX_USE_RANDOM_TR1 1\" >>confdefs.h\n \n "}, {"sha": "e3612b036df6822203128b4d244ba4f0a0a1db1d", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae2c32a8abcc154af73692f55f6b60fc77b08ae/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae2c32a8abcc154af73692f55f6b60fc77b08ae/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=5ae2c32a8abcc154af73692f55f6b60fc77b08ae", "patch": "@@ -255,8 +255,8 @@ if $GLIBCXX_IS_NATIVE; then\n   GLIBCXX_CHECK_MATH_SUPPORT\n   GLIBCXX_CHECK_STDLIB_SUPPORT\n \n-  # For /dev/random and /dev/urandom for TR1.\n-  GLIBCXX_CHECK_RANDOM_TR1\n+  # For /dev/random and /dev/urandom for std::random_device.\n+  GLIBCXX_CHECK_DEV_RANDOM\n \n   # For TLS support.\n   GCC_CHECK_TLS"}, {"sha": "3de40dc138b5c0e9d4f36afcab57796c6a0e24d3", "filename": "libstdc++-v3/crossconfig.m4", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae2c32a8abcc154af73692f55f6b60fc77b08ae/libstdc%2B%2B-v3%2Fcrossconfig.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae2c32a8abcc154af73692f55f6b60fc77b08ae/libstdc%2B%2B-v3%2Fcrossconfig.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fcrossconfig.m4?ref=5ae2c32a8abcc154af73692f55f6b60fc77b08ae", "patch": "@@ -66,6 +66,7 @@ case \"${host}\" in\n     GLIBCXX_CHECK_LINKER_FEATURES\n     GLIBCXX_CHECK_MATH_SUPPORT\n     GLIBCXX_CHECK_STDLIB_SUPPORT\n+    AC_DEFINE(_GLIBCXX_USE_DEV_RANDOM)\n     AC_DEFINE(_GLIBCXX_USE_RANDOM_TR1)\n     # We don't yet support AIX's TLS ABI.\n     #GCC_CHECK_TLS\n@@ -188,6 +189,7 @@ case \"${host}\" in\n     GLIBCXX_CHECK_LINKER_FEATURES\n     GLIBCXX_CHECK_MATH_SUPPORT\n     GLIBCXX_CHECK_STDLIB_SUPPORT\n+    AC_DEFINE(_GLIBCXX_USE_DEV_RANDOM)\n     AC_DEFINE(_GLIBCXX_USE_RANDOM_TR1)\n     GCC_CHECK_TLS\n     AC_CHECK_FUNCS(__cxa_thread_atexit_impl)"}, {"sha": "5e994aa883601793b64bef0ae7046511bda9577c", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae2c32a8abcc154af73692f55f6b60fc77b08ae/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae2c32a8abcc154af73692f55f6b60fc77b08ae/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=5ae2c32a8abcc154af73692f55f6b60fc77b08ae", "patch": "@@ -1602,7 +1602,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     // constructors, destructors and member functions\n \n-#ifdef _GLIBCXX_USE_RANDOM_TR1\n+#ifdef _GLIBCXX_USE_DEV_RANDOM\n     random_device() { _M_init(\"default\"); }\n \n     explicit\n@@ -1629,7 +1629,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     double\n     entropy() const noexcept\n     {\n-#ifdef _GLIBCXX_USE_RANDOM_TR1\n+#ifdef _GLIBCXX_USE_DEV_RANDOM\n       return this->_M_getentropy();\n #else\n       return 0.0;\n@@ -1639,7 +1639,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     result_type\n     operator()()\n     {\n-#ifdef _GLIBCXX_USE_RANDOM_TR1\n+#ifdef _GLIBCXX_USE_DEV_RANDOM\n       return this->_M_getval();\n #else\n       return this->_M_getval_pretr1();"}, {"sha": "3d945ae12a1d1876574d9dac642b4cd8e7d0b7ac", "filename": "libstdc++-v3/testsuite/26_numerics/random/random_device/cons/token.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae2c32a8abcc154af73692f55f6b60fc77b08ae/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fcons%2Ftoken.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae2c32a8abcc154af73692f55f6b60fc77b08ae/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fcons%2Ftoken.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fcons%2Ftoken.cc?ref=5ae2c32a8abcc154af73692f55f6b60fc77b08ae", "patch": "@@ -29,7 +29,7 @@\n void\n test01()\n {\n-#ifdef _GLIBCXX_USE_RANDOM_TR1\n+#ifdef _GLIBCXX_USE_DEV_RANDOM\n   std::random_device x(\"/dev/random\");\n #else\n   std::random_device x(\"0\");"}]}