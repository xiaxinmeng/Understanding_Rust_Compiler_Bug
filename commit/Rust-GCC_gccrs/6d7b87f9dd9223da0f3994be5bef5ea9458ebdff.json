{"sha": "6d7b87f9dd9223da0f3994be5bef5ea9458ebdff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ3Yjg3ZjlkZDkyMjNkYTBmMzk5NGJlNWJlZjVlYTk0NThlYmRmZg==", "commit": {"author": {"name": "Thomas Young", "email": "wenzhang5800@gmail.com", "date": "2021-07-01T07:34:38Z"}, "committer": {"name": "Thomas Young", "email": "wenzhang5800@gmail.com", "date": "2021-07-02T04:37:54Z"}, "message": "make struct field carry the location info", "tree": {"sha": "2948f81be055a6ef61090fa1b409e42d26810390", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2948f81be055a6ef61090fa1b409e42d26810390"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d7b87f9dd9223da0f3994be5bef5ea9458ebdff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d7b87f9dd9223da0f3994be5bef5ea9458ebdff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d7b87f9dd9223da0f3994be5bef5ea9458ebdff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d7b87f9dd9223da0f3994be5bef5ea9458ebdff/comments", "author": {"login": "thomasyonug", "id": 17464490, "node_id": "MDQ6VXNlcjE3NDY0NDkw", "avatar_url": "https://avatars.githubusercontent.com/u/17464490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomasyonug", "html_url": "https://github.com/thomasyonug", "followers_url": "https://api.github.com/users/thomasyonug/followers", "following_url": "https://api.github.com/users/thomasyonug/following{/other_user}", "gists_url": "https://api.github.com/users/thomasyonug/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomasyonug/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomasyonug/subscriptions", "organizations_url": "https://api.github.com/users/thomasyonug/orgs", "repos_url": "https://api.github.com/users/thomasyonug/repos", "events_url": "https://api.github.com/users/thomasyonug/events{/privacy}", "received_events_url": "https://api.github.com/users/thomasyonug/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomasyonug", "id": 17464490, "node_id": "MDQ6VXNlcjE3NDY0NDkw", "avatar_url": "https://avatars.githubusercontent.com/u/17464490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomasyonug", "html_url": "https://github.com/thomasyonug", "followers_url": "https://api.github.com/users/thomasyonug/followers", "following_url": "https://api.github.com/users/thomasyonug/following{/other_user}", "gists_url": "https://api.github.com/users/thomasyonug/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomasyonug/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomasyonug/subscriptions", "organizations_url": "https://api.github.com/users/thomasyonug/orgs", "repos_url": "https://api.github.com/users/thomasyonug/repos", "events_url": "https://api.github.com/users/thomasyonug/events{/privacy}", "received_events_url": "https://api.github.com/users/thomasyonug/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "458f7a5459a8907fa55a84248ba137281ac675c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/458f7a5459a8907fa55a84248ba137281ac675c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/458f7a5459a8907fa55a84248ba137281ac675c4"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "37d087cfd2d59095f56c761c6e45d4d3888691b9", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7b87f9dd9223da0f3994be5bef5ea9458ebdff/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7b87f9dd9223da0f3994be5bef5ea9458ebdff/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=6d7b87f9dd9223da0f3994be5bef5ea9458ebdff", "patch": "@@ -1841,10 +1841,10 @@ struct StructField\n   Identifier field_name;\n   std::unique_ptr<Type> field_type;\n \n-  // should this store location info?\n-\n   NodeId node_id;\n \n+  Location locus;\n+\n public:\n   // Returns whether struct field has any outer attributes.\n   bool has_outer_attributes () const { return !outer_attrs.empty (); }\n@@ -1853,17 +1853,18 @@ struct StructField\n   bool has_visibility () const { return !visibility.is_error (); }\n \n   StructField (Identifier field_name, std::unique_ptr<Type> field_type,\n-\t       Visibility vis,\n+\t       Visibility vis, Location locus,\n \t       std::vector<Attribute> outer_attrs = std::vector<Attribute> ())\n     : outer_attrs (std::move (outer_attrs)), visibility (std::move (vis)),\n       field_name (std::move (field_name)), field_type (std::move (field_type)),\n-      node_id (Analysis::Mappings::get ()->get_next_node_id ())\n+      node_id (Analysis::Mappings::get ()->get_next_node_id ()), locus (locus)\n   {}\n \n   // Copy constructor\n   StructField (StructField const &other)\n     : outer_attrs (other.outer_attrs), visibility (other.visibility),\n-      field_name (other.field_name), node_id (other.node_id)\n+      field_name (other.field_name), node_id (other.node_id),\n+      locus (other.locus)\n   {\n     // guard to prevent null dereference\n     if (other.field_type != nullptr)\n@@ -1903,7 +1904,8 @@ struct StructField\n   // Creates an error state struct field.\n   static StructField create_error ()\n   {\n-    return StructField (std::string (\"\"), nullptr, Visibility::create_error ());\n+    return StructField (std::string (\"\"), nullptr, Visibility::create_error (),\n+\t\t\tLocation ());\n   }\n \n   std::string as_string () const;\n@@ -1914,6 +1916,8 @@ struct StructField\n \n   Identifier get_field_name () const { return field_name; }\n \n+  Location get_locus () const { return locus; }\n+\n   // TODO: is this better? Or is a \"vis_block\" better?\n   std::unique_ptr<Type> &get_field_type ()\n   {"}, {"sha": "7985faa4f09a6bdd2e5edf0c2e65baf465e4cba8", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7b87f9dd9223da0f3994be5bef5ea9458ebdff/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7b87f9dd9223da0f3994be5bef5ea9458ebdff/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=6d7b87f9dd9223da0f3994be5bef5ea9458ebdff", "patch": "@@ -165,12 +165,10 @@ class ASTLoweringItem : public ASTLoweringBase\n \t\t\t\t     mappings->get_next_localdef_id (\n \t\t\t\t       crate_num));\n \n-      // FIXME\n-      // AST::StructField is missing Location info\n-      Location field_locus;\n       HIR::StructField translated_field (mapping, field.get_field_name (),\n \t\t\t\t\t std::unique_ptr<HIR::Type> (type), vis,\n-\t\t\t\t\t field_locus, field.get_outer_attrs ());\n+\t\t\t\t\t field.get_locus (),\n+\t\t\t\t\t field.get_outer_attrs ());\n       fields.push_back (std::move (translated_field));\n       return true;\n     });"}, {"sha": "10b1f6143f0f18c9b8297e4e373795fe9ffb4e91", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7b87f9dd9223da0f3994be5bef5ea9458ebdff/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7b87f9dd9223da0f3994be5bef5ea9458ebdff/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=6d7b87f9dd9223da0f3994be5bef5ea9458ebdff", "patch": "@@ -1448,8 +1448,6 @@ struct StructField\n \n   Location locus;\n \n-  // should this store location info?\n-\n   // Returns whether struct field has any outer attributes.\n   bool has_outer_attributes () const { return !outer_attrs.empty (); }\n "}, {"sha": "9f8282b363939c8ddfa9e2a7e9f88125c027f942", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7b87f9dd9223da0f3994be5bef5ea9458ebdff/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7b87f9dd9223da0f3994be5bef5ea9458ebdff/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=6d7b87f9dd9223da0f3994be5bef5ea9458ebdff", "patch": "@@ -4150,6 +4150,8 @@ Parser<ManagedTokenSource>::parse_struct_field ()\n   // parse visibility, if it exists\n   AST::Visibility vis = parse_visibility ();\n \n+  Location locus = lexer.peek_token ()->get_locus ();\n+\n   // parse field name\n   const_TokenPtr field_name_tok = lexer.peek_token ();\n   if (field_name_tok->get_id () != IDENTIFIER)\n@@ -4180,7 +4182,7 @@ Parser<ManagedTokenSource>::parse_struct_field ()\n     }\n \n   return AST::StructField (std::move (field_name), std::move (field_type),\n-\t\t\t   std::move (vis), std::move (outer_attrs));\n+\t\t\t   std::move (vis), locus, std::move (outer_attrs));\n }\n \n // Parses tuple fields in tuple/tuple struct declarations."}]}