{"sha": "152895769581468e98807bbb8835ef63cc07727d", "node_id": "C_kwDOANBUbNoAKDE1Mjg5NTc2OTU4MTQ2OGU5ODgwN2JiYjg4MzVlZjYzY2MwNzcyN2Q", "commit": {"author": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2022-06-27T06:15:22Z"}, "committer": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2022-08-27T03:44:13Z"}, "message": "contrib: modernize gen_autofdo_event.py\n\nPython 2 has been EOL'ed for two years.  egrep has been deprecated\nfor many years and the next grep release will start to print warning if\nit is used.\n\n-E option may be unsupported by some non-POSIX grep implementations, but\ngcc-auto-profile won't work on non-Linux systems anyway.\n\ncontrib/ChangeLog:\n\n\t* gen_autofdo_event.py: Port to Python 3, and use grep -E\n\tinstead of egrep.\n\ngcc/ChangeLog:\n\n\t* config/i386/gcc-auto-profile: Regenerate.", "tree": {"sha": "c0e4664ea956694cd77cc854c5b8f67f94230321", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0e4664ea956694cd77cc854c5b8f67f94230321"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/152895769581468e98807bbb8835ef63cc07727d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQSR0PV2MB+STX3t3OisqtIOGecQ4wUCYwmTDQAKCRCsqtIOGecQ\n40w1AP0QzrQSpiICDQ1WlXswc9mVomCYgoKzu0whTd19BpwH9AD/dVQqzwO7acd3\nf6My+2O7rmY5IfZ3SIYrpPw8ANBxqwI=\n=mRMf\n-----END PGP SIGNATURE-----", "payload": "tree c0e4664ea956694cd77cc854c5b8f67f94230321\nparent 16f542d6b866828e23e699e294e617ca428b04ee\nauthor Xi Ruoyao <xry111@xry111.site> 1656310522 +0800\ncommitter Xi Ruoyao <xry111@xry111.site> 1661571853 +0800\n\ncontrib: modernize gen_autofdo_event.py\n\nPython 2 has been EOL'ed for two years.  egrep has been deprecated\nfor many years and the next grep release will start to print warning if\nit is used.\n\n-E option may be unsupported by some non-POSIX grep implementations, but\ngcc-auto-profile won't work on non-Linux systems anyway.\n\ncontrib/ChangeLog:\n\n\t* gen_autofdo_event.py: Port to Python 3, and use grep -E\n\tinstead of egrep.\n\ngcc/ChangeLog:\n\n\t* config/i386/gcc-auto-profile: Regenerate.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/152895769581468e98807bbb8835ef63cc07727d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/152895769581468e98807bbb8835ef63cc07727d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/152895769581468e98807bbb8835ef63cc07727d/comments", "author": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16f542d6b866828e23e699e294e617ca428b04ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16f542d6b866828e23e699e294e617ca428b04ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16f542d6b866828e23e699e294e617ca428b04ee"}], "stats": {"total": 111, "additions": 57, "deletions": 54}, "files": [{"sha": "7da2876530d737d25b3eae3a5a06cddd69135b79", "filename": "contrib/gen_autofdo_event.py", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152895769581468e98807bbb8835ef63cc07727d/contrib%2Fgen_autofdo_event.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152895769581468e98807bbb8835ef63cc07727d/contrib%2Fgen_autofdo_event.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgen_autofdo_event.py?ref=152895769581468e98807bbb8835ef63cc07727d", "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/python\n+#!/usr/bin/python3\n # Generate Intel taken branches Linux perf event script for autofdo profiling.\n \n # Copyright (C) 2016 Free Software Foundation, Inc.\n@@ -26,18 +26,19 @@\n # Requires internet (https) access. This may require setting up a proxy\n # with export https_proxy=...\n #\n-import urllib2\n+import urllib.request\n import sys\n import json\n import argparse\n import collections\n+import os\n \n baseurl = \"https://download.01.org/perfmon\"\n \n-target_events = (u'BR_INST_RETIRED.NEAR_TAKEN',\n-                 u'BR_INST_EXEC.TAKEN',\n-                 u'BR_INST_RETIRED.TAKEN_JCC',\n-                 u'BR_INST_TYPE_RETIRED.COND_TAKEN')\n+target_events = ('BR_INST_RETIRED.NEAR_TAKEN',\n+                 'BR_INST_EXEC.TAKEN',\n+                 'BR_INST_RETIRED.TAKEN_JCC',\n+                 'BR_INST_TYPE_RETIRED.COND_TAKEN')\n \n ap = argparse.ArgumentParser()\n ap.add_argument('--all', '-a', help='Print for all CPUs', action='store_true')\n@@ -71,47 +72,46 @@ def get_cpustr():\n     return \"%s-%d-%X\" % tuple(cpu)[:3]\n \n def find_event(eventurl, model):\n-    print >>sys.stderr, \"Downloading\", eventurl\n-    u = urllib2.urlopen(eventurl)\n+    print(\"Downloading\", eventurl, file = sys.stderr)\n+    u = urllib.request.urlopen(eventurl)\n     events = json.loads(u.read())\n     u.close()\n \n     found = 0\n     for j in events:\n-        if j[u'EventName'] in target_events:\n-            event = \"cpu/event=%s,umask=%s/\" % (j[u'EventCode'], j[u'UMask'])\n-            if u'PEBS' in j and j[u'PEBS'] > 0:\n+        if j['EventName'] in target_events:\n+            event = \"cpu/event=%s,umask=%s/\" % (j['EventCode'], j['UMask'])\n+            if 'PEBS' in j and int(j['PEBS']) > 0:\n                 event += \"p\"\n             if args.script:\n                 eventmap[event].append(model)\n             else:\n-                print j[u'EventName'], \"event for model\", model, \"is\", event\n+                print(j['EventName'], \"event for model\", model, \"is\", event)\n             found += 1\n     return found\n \n if not args.all:\n-    cpu = get_cpu_str()\n+    cpu = get_cpustr()\n     if not cpu:\n         sys.exit(\"Unknown CPU type\")\n \n url = baseurl + \"/mapfile.csv\"\n-print >>sys.stderr, \"Downloading\", url\n-u = urllib2.urlopen(url)\n+print(\"Downloading\", url, file = sys.stderr)\n+u = urllib.request.urlopen(url)\n found = 0\n cpufound = 0\n for j in u:\n-    n = j.rstrip().split(',')\n+    n = j.rstrip().decode().split(',')\n     if len(n) >= 4 and (args.all or n[0] == cpu) and n[3] == \"core\":\n-        if args.all:\n-            components = n[0].split(\"-\")\n-            model = components[2]\n-            model = int(model, 16)\n+        components = n[0].split(\"-\")\n+        model = components[2]\n+        model = int(model, 16)\n         cpufound += 1\n         found += find_event(baseurl + n[2], model)\n u.close()\n \n if args.script:\n-    print '''#!/bin/sh\n+    print('''#!/bin/sh\n # Profile workload for gcc profile feedback (autofdo) using Linux perf.\n # Auto generated. To regenerate for new CPUs run\n # contrib/gen_autofdo_event.py --script --all in gcc source\n@@ -146,27 +146,27 @@ def find_event(eventurl, model):\n   echo >&2 \"Warning: branch profiling may not be functional in VMs\"\n fi\n \n-case `egrep -q \"^cpu family\\s*: 6\" /proc/cpuinfo &&\n-  egrep \"^model\\s*:\" /proc/cpuinfo | head -n1` in'''\n-    for event, mod in eventmap.iteritems():\n+case `grep -E -q \"^cpu family\\s*: 6\" /proc/cpuinfo &&\n+  grep -E \"^model\\s*:\" /proc/cpuinfo | head -n1` in''')\n+    for event, mod in eventmap.items():\n         for m in mod[:-1]:\n-            print \"model*:\\ %s|\\\\\" % m\n-        print 'model*:\\ %s) E=\"%s$FLAGS\" ;;' % (mod[-1], event)\n-    print '''*)\n+            print(\"model*:\\ %s|\\\\\" % m)\n+        print('model*:\\ %s) E=\"%s$FLAGS\" ;;' % (mod[-1], event))\n+    print('''*)\n echo >&2 \"Unknown CPU. Run contrib/gen_autofdo_event.py --all --script to update script.\"\n-\texit 1 ;;'''\n-    print \"esac\"\n-    print \"set -x\"\n-    print 'if ! perf record -e $E -b \"$@\" ; then'\n-    print '  # PEBS may not actually be working even if the processor supports it'\n-    print '  # (e.g., in a virtual machine). Trying to run without /p.'\n-    print '  set +x'\n-    print '  echo >&2 \"Retrying without /p.\"'\n-    print '  E=\"$(echo \"${E}\" | sed -e \\'s/\\/p/\\//\\')\"'\n-    print '  set -x'\n-    print '  exec perf record -e $E -b \"$@\"'\n-    print ' set +x'\n-    print 'fi'\n+\texit 1 ;;''')\n+    print(\"esac\")\n+    print(\"set -x\")\n+    print('if ! perf record -e $E -b \"$@\" ; then')\n+    print('  # PEBS may not actually be working even if the processor supports it')\n+    print('  # (e.g., in a virtual machine). Trying to run without /p.')\n+    print('  set +x')\n+    print('  echo >&2 \"Retrying without /p.\"')\n+    print('  E=\"$(echo \"${E}\" | sed -e \\'s/\\/p/\\//\\')\"')\n+    print('  set -x')\n+    print('  exec perf record -e $E -b \"$@\"')\n+    print(' set +x')\n+    print('fi')\n \n if cpufound == 0 and not args.all:\n     sys.exit('CPU %s not found' % cpu)"}, {"sha": "5ab224b041b98c2ee8e0571c5152bc99360e862d", "filename": "gcc/config/i386/gcc-auto-profile", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152895769581468e98807bbb8835ef63cc07727d/gcc%2Fconfig%2Fi386%2Fgcc-auto-profile", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152895769581468e98807bbb8835ef63cc07727d/gcc%2Fconfig%2Fi386%2Fgcc-auto-profile", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgcc-auto-profile?ref=152895769581468e98807bbb8835ef63cc07727d", "patch": "@@ -33,8 +33,15 @@ if grep -q hypervisor /proc/cpuinfo ; then\n   echo >&2 \"Warning: branch profiling may not be functional in VMs\"\n fi\n \n-case `egrep -q \"^cpu family\\s*: 6\" /proc/cpuinfo &&\n-  egrep \"^model\\s*:\" /proc/cpuinfo | head -n1` in\n+case `grep -E -q \"^cpu family\\s*: 6\" /proc/cpuinfo &&\n+  grep -E \"^model\\s*:\" /proc/cpuinfo | head -n1` in\n+model*:\\ 46|\\\n+model*:\\ 30|\\\n+model*:\\ 31|\\\n+model*:\\ 26|\\\n+model*:\\ 47|\\\n+model*:\\ 37|\\\n+model*:\\ 44) E=\"cpu/event=0x88,umask=0x40/$FLAGS\" ;;\n model*:\\ 55|\\\n model*:\\ 77|\\\n model*:\\ 76|\\\n@@ -43,6 +50,11 @@ model*:\\ 95|\\\n model*:\\ 87|\\\n model*:\\ 133|\\\n model*:\\ 122) E=\"cpu/event=0xC4,umask=0xFE/p$FLAGS\" ;;\n+model*:\\ 28|\\\n+model*:\\ 38|\\\n+model*:\\ 39|\\\n+model*:\\ 54|\\\n+model*:\\ 53) E=\"cpu/event=0x88,umask=0x41/$FLAGS\" ;;\n model*:\\ 42|\\\n model*:\\ 45|\\\n model*:\\ 58|\\\n@@ -63,23 +75,14 @@ model*:\\ 165|\\\n model*:\\ 166|\\\n model*:\\ 85|\\\n model*:\\ 85) E=\"cpu/event=0xC4,umask=0x20/p$FLAGS\" ;;\n-model*:\\ 46|\\\n-model*:\\ 30|\\\n-model*:\\ 31|\\\n-model*:\\ 26|\\\n-model*:\\ 47|\\\n-model*:\\ 37|\\\n-model*:\\ 44) E=\"cpu/event=0x88,umask=0x40/p$FLAGS\" ;;\n-model*:\\ 28|\\\n-model*:\\ 38|\\\n-model*:\\ 39|\\\n-model*:\\ 54|\\\n-model*:\\ 53) E=\"cpu/event=0x88,umask=0x41/p$FLAGS\" ;;\n model*:\\ 126|\\\n model*:\\ 140|\\\n model*:\\ 141|\\\n+model*:\\ 143|\\\n model*:\\ 106|\\\n model*:\\ 108) E=\"cpu/event=0xc4,umask=0x20/p$FLAGS\" ;;\n+model*:\\ 134|\\\n+model*:\\ 150) E=\"cpu/event=0xc4,umask=0xfe/p$FLAGS\" ;;\n *)\n echo >&2 \"Unknown CPU. Run contrib/gen_autofdo_event.py --all --script to update script.\"\n \texit 1 ;;"}]}