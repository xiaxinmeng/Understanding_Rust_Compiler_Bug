{"sha": "fba53b18ab956e028e1a710f0029404408888c43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJhNTNiMThhYjk1NmUwMjhlMWE3MTBmMDAyOTQwNDQwODg4OGM0Mw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2005-05-31T17:39:03Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2005-05-31T17:39:03Z"}, "message": "char_initialiser_actual.f90: Test character initialisers as actual arguments.\n\n2005-05-30  Paul Thomas  <pault@gcc.gnu.org>\n\n\t* gfortran.dg/char_initialiser_actual.f90:\n\tTest character initialisers as actual arguments.\n\t* gfortran.dg/char_pointer_comp_assign.f90:\n\tTest character pointer structure component assignments.\n\t* gfortran.dg/char_array_structure_constructor.f90:\n\tTest character components in structure constructors.\n\nFrom-SVN: r100401", "tree": {"sha": "18f7a655cf7056d12fcb53ad1a8f99ef82924bbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18f7a655cf7056d12fcb53ad1a8f99ef82924bbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fba53b18ab956e028e1a710f0029404408888c43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fba53b18ab956e028e1a710f0029404408888c43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fba53b18ab956e028e1a710f0029404408888c43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fba53b18ab956e028e1a710f0029404408888c43/comments", "author": null, "committer": null, "parents": [{"sha": "2b052ce2f5a1c84ca9efded4df9308669b9e25e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b052ce2f5a1c84ca9efded4df9308669b9e25e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b052ce2f5a1c84ca9efded4df9308669b9e25e5"}], "stats": {"total": 95, "additions": 95, "deletions": 0}, "files": [{"sha": "57f8f913c02b114f3f994ddded3893ba4473893e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fba53b18ab956e028e1a710f0029404408888c43/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fba53b18ab956e028e1a710f0029404408888c43/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fba53b18ab956e028e1a710f0029404408888c43", "patch": "@@ -1,3 +1,12 @@\n+2005-05-31  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\t* gfortran.dg/char_initialiser_actual.f90:\n+\tTest character initialisers as actual arguments.\n+\t* gfortran.dg/char_pointer_comp_assign.f90:\n+\tTest character pointer structure component assignments.\n+\t* gfortran.dg/char_array_structure_constructor.f90:\n+\tTest character components in structure constructors.\n+\n 2005-05-31  Andrew pinski  <pinskia@physics.uc.edu>\n \n \tPR middle-end/20931"}, {"sha": "0b6c05c332138571a6a4a67cd722a902493c7504", "filename": "gcc/testsuite/gfortran.dg/char_array_structure_constructor.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fba53b18ab956e028e1a710f0029404408888c43/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_array_structure_constructor.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fba53b18ab956e028e1a710f0029404408888c43/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_array_structure_constructor.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_array_structure_constructor.f90?ref=fba53b18ab956e028e1a710f0029404408888c43", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do run }\n+! This test the fix of PR19107, where character array actual\n+! arguments in derived type constructors caused an ICE.\n+! It also checks that the scalar counterparts are OK.\n+! Contributed by Paul Thomas  pault@gcc.gnu.org\n+!\n+MODULE global\n+  TYPE :: dt\n+    CHARACTER(4) a\n+    CHARACTER(4) b(2)\n+  END TYPE\n+  TYPE (dt), DIMENSION(:), ALLOCATABLE, SAVE :: c\n+END MODULE global\n+program char_array_structure_constructor\n+  USE global\n+  call alloc (2)\n+  if ((any (c%a /= \"wxyz\")) .OR. &\n+      (any (c%b(1) /= \"abcd\")) .OR. &\n+      (any (c%b(2) /= \"efgh\"))) call abort ()\n+contains\n+  SUBROUTINE alloc (n)\n+    USE global\n+    ALLOCATE (c(n), STAT=IALLOC_FLAG)\n+    DO i = 1,n\n+      c (i) = dt (\"wxyz\",(/\"abcd\",\"efgh\"/))\n+    ENDDO\n+  end subroutine alloc\n+END program char_array_structure_constructor"}, {"sha": "3796f7ee21c35a008bd1ff09ef5af48a49b87f6a", "filename": "gcc/testsuite/gfortran.dg/char_initialiser_actual.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fba53b18ab956e028e1a710f0029404408888c43/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_initialiser_actual.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fba53b18ab956e028e1a710f0029404408888c43/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_initialiser_actual.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_initialiser_actual.f90?ref=fba53b18ab956e028e1a710f0029404408888c43", "patch": "@@ -0,0 +1,27 @@\n+! { dg do-run }\n+! Tests passing of character array initialiser as actual argument.\n+! Fixes PR18109.\n+! Contributed by Paul Thomas pault@gcc.gnu.org  \n+program char_initialiser\n+  character*5, dimension(3) :: x\n+  character*5, dimension(:), pointer :: y\n+  x=(/\"is Ja\",\"ne Fo\",\"nda\"/)\n+  call sfoo (\"is Ja\", x(1))\n+  call afoo ((/\"is Ja\",\"ne Fo\",\"nda\"/), x)\n+  y => pfoo ((/\"is Ja\",\"ne Fo\",\"nda\"/))\n+  call afoo (y, x)\n+contains\n+  subroutine sfoo(ch1, ch2)\n+     character*(*)               :: ch1, ch2\n+     if (ch1 /= ch2) call abort ()\n+  end subroutine sfoo\n+  subroutine afoo(ch1, ch2)\n+     character*(*), dimension(:) :: ch1, ch2\n+     if (any(ch1 /= ch2)) call abort ()\n+  end subroutine afoo\n+  function pfoo(ch2)\n+     character*5, dimension(:), target  :: ch2\n+     character*5, dimension(:), pointer :: pfoo\n+     pfoo => ch2\n+  end function pfoo\n+end program"}, {"sha": "4e2d853b185c51ae3d926108e88f7d7777ba503a", "filename": "gcc/testsuite/gfortran.dg/char_pointer_comp_assign.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fba53b18ab956e028e1a710f0029404408888c43/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_pointer_comp_assign.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fba53b18ab956e028e1a710f0029404408888c43/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_pointer_comp_assign.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_pointer_comp_assign.f90?ref=fba53b18ab956e028e1a710f0029404408888c43", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do run }\n+! This test the fix of PR18283, where assignments of scalar,\n+! character pointer components of derived types caused an ICE.\n+! It also checks that the array counterparts remain operational.\n+! Contributed by Paul Thomas  pault@gcc.gnu.org\n+!\n+program char_pointer_comp_assign\n+  implicit none\n+  type :: dt\n+     character (len=4), pointer :: scalar\n+     character (len=4), pointer :: array(:)\n+  end type dt\n+  type (dt) :: a \n+  character (len=4), target :: scalar_t =\"abcd\"\n+  character (len=4), target :: array_t(2) = (/\"abcd\",\"efgh\"/)\n+\n+! Do assignments first\n+  allocate (a%scalar, a%array(2))\n+  a%scalar = scalar_t\n+  if (a%scalar /= \"abcd\") call abort ()\n+  a%array = array_t\n+  if (any(a%array /= (/\"abcd\",\"efgh\"/))) call abort ()\n+  deallocate (a%scalar, a%array)\n+\n+! Now do pointer assignments.\n+  a%scalar => scalar_t\n+  if (a%scalar /= \"abcd\") call abort ()\n+  a%array => array_t\n+  if (any(a%array /= (/\"abcd\",\"efgh\"/))) call abort ()\n+\n+end program char_pointer_comp_assign"}]}