{"sha": "b6e3f5722e7fdc94973814996fadbbb5d38c0970", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZlM2Y1NzIyZTdmZGM5NDk3MzgxNDk5NmZhZGJiYjVkMzhjMDk3MA==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2005-04-06T23:27:11Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2005-04-06T23:27:11Z"}, "message": "target-supports.exp (get_compiler_messages): Support optional arguments, the fourth being compiler options.\n\n\t* lib/target-supports.exp (get_compiler_messages): Support\n\toptional arguments, the fourth being compiler options.\n\t(check_effective_target_fpic): New proc.\n\t* gcc.dg/20050321-2.c: Restrict to target fpic.\n\nFrom-SVN: r97763", "tree": {"sha": "fb73a1d0bbafe5023c88e96818257220d57a06a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb73a1d0bbafe5023c88e96818257220d57a06a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6e3f5722e7fdc94973814996fadbbb5d38c0970", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6e3f5722e7fdc94973814996fadbbb5d38c0970", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6e3f5722e7fdc94973814996fadbbb5d38c0970", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6e3f5722e7fdc94973814996fadbbb5d38c0970/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "070e396943c58c4e0f9fc01395ba9b4679ebb0f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/070e396943c58c4e0f9fc01395ba9b4679ebb0f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/070e396943c58c4e0f9fc01395ba9b4679ebb0f3"}], "stats": {"total": 68, "additions": 66, "deletions": 2}, "files": [{"sha": "99cd1665cb079ee7ee3b497ae8d21aa11d324da3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e3f5722e7fdc94973814996fadbbb5d38c0970/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e3f5722e7fdc94973814996fadbbb5d38c0970/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b6e3f5722e7fdc94973814996fadbbb5d38c0970", "patch": "@@ -1,3 +1,10 @@\n+2005-04-07  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* lib/target-supports.exp (get_compiler_messages): Support\n+\toptional arguments, the fourth being compiler options.\n+\t(check_effective_target_fpic): New proc.\n+\t* gcc.dg/20050321-2.c: Restrict to target fpic.\n+\n 2005-04-06  James A. Morrison  <phython@gcc.gnu.org>\n \n \t* gcc.dg/15443-1.c: New test."}, {"sha": "c3f811017c8bf06b9947d8f20836a15dd061872f", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 59, "deletions": 2, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e3f5722e7fdc94973814996fadbbb5d38c0970/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e3f5722e7fdc94973814996fadbbb5d38c0970/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=b6e3f5722e7fdc94973814996fadbbb5d38c0970", "patch": "@@ -24,9 +24,17 @@\n # BASENAME is a basename to use for temporary files.\n # TYPE is the type of compilation to perform (see target_compile).\n # CONTENTS gives the contents of the input file.\n-proc get_compiler_messages {basename type contents} {\n+# The rest is optional:\n+# OPTIONS: additional compiler options to use.\n+proc get_compiler_messages {basename type contents args} {\n     global tool\n \n+    if { [llength $args] > 0 } {\n+\tset options \"additional_flags=[lindex $args 0]\"\n+    } else {\n+\tset options \"\"\n+    }\n+\n     set src ${basename}[pid].c\n     switch $type {\n \tassembly { set output ${basename}[pid].s }\n@@ -35,7 +43,7 @@ proc get_compiler_messages {basename type contents} {\n     set f [open $src \"w\"]\n     puts $f $contents\n     close $f\n-    set lines [${tool}_target_compile $src $output $type \"\"]\n+    set lines [${tool}_target_compile $src $output $type \"$options\"]\n     file delete $src\n     remote_file build delete $output\n \n@@ -295,6 +303,55 @@ proc check_profiling_available { test_what } {\n     return $profiling_available_saved\n }\n \n+# Return 1 if -fpic and -fPIC are supported, as in no warnings or errors\n+# emitted, 0 otherwise.  Whether a shared library can actually be built is\n+# out of scope for this test.\n+#\n+# When the target name changes, replace the cached result.\n+\n+proc check_effective_target_fpic { } {\n+    global et_fpic_saved\n+    global et_fpic_target_name\n+\n+    if { ![info exists et_fpic_target_name] } {\n+\tset et_fpic_target_name \"\"\n+    }\n+\n+    # If the target has changed since we set the cached value, clear it.\n+    set current_target [current_target_name]\n+    if { $current_target != $et_fpic_target_name } {\n+\tverbose \"check_effective_target_fpic: `$et_fpic_target_name'\" 2\n+\tset et_fpic_target_name $current_target\n+\tif [info exists et_fpic_saved] {\n+\t    verbose \"check_effective_target_fpic: removing cached result\" 2\n+\t    unset et_fpic_saved\n+\t}\n+    }\n+\n+    if [info exists et_fpic_saved] {\n+\tverbose \"check_effective_target_fpic: using cached result\" 2\n+    } else {\n+\tverbose \"check_effective_target_fpic: compiling source\" 2\n+\n+\t# Note that M68K has a multilib that supports -fpic but not\n+\t# -fPIC, so we need to check both.  We test with a program that\n+\t# requires GOT references.\n+\tset et_fpic_saved [string match \"\" [get_compiler_messages fpic object {\n+\t    extern int foo (void); extern int bar;\n+\t    int baz (void) { return foo () + bar; }\n+\t} \"-fpic\"]]\n+\n+\tif { $et_fpic_saved != 0 } {\n+\t    set et_fpic_saved [string match \"\" [get_compiler_messages fpic object {\n+\t\textern int foo (void); extern int bar;\n+\t\tint baz (void) { return foo () + bar; }\n+\t    } \"-fPIC\"]]\n+\t}\n+    }\n+    verbose \"check_effective_target_fpic: returning $et_fpic_saved\" 2\n+    return $et_fpic_saved\n+}\n+\n # Return true if iconv is supported on the target. In particular IBM1047.\n \n proc check_iconv_available { test_what } {"}]}