{"sha": "0e988162f6e9cbb9bea998b4f1febda199769692", "node_id": "C_kwDOANBUbNoAKDBlOTg4MTYyZjZlOWNiYjliZWE5OThiNGYxZmViZGExOTk3Njk2OTI", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2021-11-05T11:54:33Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-11-10T08:57:42Z"}, "message": "[Ada] Warn for bidirectional characters\n\ngcc/ada/\n\n\t* scng.adb (Check_Bidi): New procedure to give warning. Note\n\tthat this is called only for non-ASCII characters, so should not\n\tbe an efficiency issue.\n\t(Slit): Call Check_Bidi for wide characters in string_literals.\n\t(Minus_Case): Call Check_Bidi for wide characters in comments.\n\t(Char_Literal_Case): Call Check_Bidi for wide characters in\n\tcharacter_literals.  Move Accumulate_Checksum down, because\n\totherwise, if Err is True, the Code is uninitialized.\n\t* errout.ads: Make the obsolete nature of \"Insertion character\n\t?\" more prominent; one should not have to read several\n\tparagraphs before finding out that it's obsolete.", "tree": {"sha": "12e58aca9976de7fb726a4991b9c94c21bf273e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12e58aca9976de7fb726a4991b9c94c21bf273e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e988162f6e9cbb9bea998b4f1febda199769692", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e988162f6e9cbb9bea998b4f1febda199769692", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e988162f6e9cbb9bea998b4f1febda199769692", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e988162f6e9cbb9bea998b4f1febda199769692/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76a71469f3ea7a6cb9257cec9a34a8c8687f3d15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76a71469f3ea7a6cb9257cec9a34a8c8687f3d15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76a71469f3ea7a6cb9257cec9a34a8c8687f3d15"}], "stats": {"total": 58, "additions": 54, "deletions": 4}, "files": [{"sha": "d6b89105b06b810157f09d7002888d4d07b774b7", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e988162f6e9cbb9bea998b4f1febda199769692/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e988162f6e9cbb9bea998b4f1febda199769692/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=0e988162f6e9cbb9bea998b4f1febda199769692", "patch": "@@ -275,7 +275,7 @@ package Errout is\n    --      contain subprograms to be inlined in the main program. It is also\n    --      used by the Compiler_Unit_Warning pragma for similar reasons.\n \n-   --    Insertion character ? (Question: warning message)\n+   --    Insertion character ? (Question: warning message -- OBSOLETE)\n    --      The character ? appearing anywhere in a message makes the message\n    --      warning instead of a normal error message, and the text of the\n    --      message will be preceded by \"warning:\" in the normal case. The\n@@ -302,7 +302,7 @@ package Errout is\n    --      clear that the continuation is part of a warning message, but it is\n    --      not necessary to go through any computational effort to include it.\n    --\n-   --      Note: this usage is obsolete, use ?? ?*? ?$? ?x? ?.x? ?_x? to\n+   --      Note: this usage is obsolete; use ?? ?*? ?$? ?x? ?.x? ?_x? to\n    --      specify the string to be added when Warn_Doc_Switch is set to True.\n    --      If this switch is True, then for simple ? messages it has no effect.\n    --      This simple form is to ease transition and may be removed later"}, {"sha": "fd184b591d27c1ab132b60bb30c72a6020374c29", "filename": "gcc/ada/scng.adb", "status": "modified", "additions": 52, "deletions": 2, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e988162f6e9cbb9bea998b4f1febda199769692/gcc%2Fada%2Fscng.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e988162f6e9cbb9bea998b4f1febda199769692/gcc%2Fada%2Fscng.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscng.adb?ref=0e988162f6e9cbb9bea998b4f1febda199769692", "patch": "@@ -322,6 +322,49 @@ package body Scng is\n       --  Returns True if the scan pointer is pointing to the start of a wide\n       --  character sequence, does not modify the scan pointer in any case.\n \n+      procedure Check_Bidi (Code : Char_Code);\n+      --  Give a warning if Code is a bidirectional character, which can cause\n+      --  security vulnerabilities. See the following article:\n+      --\n+      --  @article{boucher_trojansource_2021,\n+      --      title = {Trojan {Source}: {Invisible} {Vulnerabilities}},\n+      --      author = {Nicholas Boucher and Ross Anderson},\n+      --      year = {2021},\n+      --      journal = {Preprint},\n+      --      eprint = {2111.00169},\n+      --      archivePrefix = {arXiv},\n+      --      primaryClass = {cs.CR},\n+      --      url = {https://arxiv.org/abs/2111.00169}\n+      --  }\n+\n+      ----------------\n+      -- Check_Bidi --\n+      ----------------\n+\n+      type Bidi_Characters is\n+        (LRE, RLE, LRO, RLO, LRI, RLI, FSI, PDF, PDI);\n+      Bidi_Character_Codes : constant array (Bidi_Characters) of Char_Code :=\n+        (LRE => 16#202A#,\n+         RLE => 16#202B#,\n+         LRO => 16#202D#,\n+         RLO => 16#202E#,\n+         LRI => 16#2066#,\n+         RLI => 16#2067#,\n+         FSI => 16#2068#,\n+         PDF => 16#202C#,\n+         PDI => 16#2069#);\n+      --  Above are the bidirectional characters, along with their Unicode code\n+      --  points.\n+\n+      procedure Check_Bidi (Code : Char_Code) is\n+      begin\n+         for Bidi_Code of Bidi_Character_Codes loop\n+            if Code = Bidi_Code then\n+               Error_Msg (\"??bidirectional wide character\", Wptr);\n+            end if;\n+         end loop;\n+      end Check_Bidi;\n+\n       -----------------------\n       -- Double_Char_Token --\n       -----------------------\n@@ -1070,6 +1113,8 @@ package body Scng is\n                   if Err then\n                      Error_Illegal_Wide_Character;\n                      Code := Get_Char_Code (' ');\n+                  else\n+                     Check_Bidi (Code);\n                   end if;\n \n                   Accumulate_Checksum (Code);\n@@ -1611,11 +1656,11 @@ package body Scng is\n \n                   elsif Start_Of_Wide_Character then\n                      declare\n-                        Wptr : constant Source_Ptr := Scan_Ptr;\n                         Code : Char_Code;\n                         Err  : Boolean;\n \n                      begin\n+                        Wptr := Scan_Ptr;\n                         Scan_Wide (Source, Scan_Ptr, Code, Err);\n \n                         --  If not well formed wide character, then just skip\n@@ -1629,6 +1674,8 @@ package body Scng is\n                         elsif Is_UTF_32_Line_Terminator (UTF_32 (Code)) then\n                            Scan_Ptr := Wptr;\n                            exit;\n+                        else\n+                           Check_Bidi (Code);\n                         end if;\n                      end;\n \n@@ -1736,7 +1783,6 @@ package body Scng is\n                if Start_Of_Wide_Character then\n                   Wptr := Scan_Ptr;\n                   Scan_Wide (Source, Scan_Ptr, Code, Err);\n-                  Accumulate_Checksum (Code);\n \n                   if Err then\n                      Error_Illegal_Wide_Character;\n@@ -1752,8 +1798,12 @@ package body Scng is\n                      Error_Msg -- CODEFIX\n                        (\"(Ada 2005) non-graphic character not permitted \" &\n                         \"in character literal\", Wptr);\n+                  else\n+                     Check_Bidi (Code);\n                   end if;\n \n+                  Accumulate_Checksum (Code);\n+\n                   if Source (Scan_Ptr) /= ''' then\n                         Error_Msg_S (\"missing apostrophe\");\n                   else"}]}