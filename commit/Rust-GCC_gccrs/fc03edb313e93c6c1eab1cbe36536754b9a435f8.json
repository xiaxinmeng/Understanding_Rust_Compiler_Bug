{"sha": "fc03edb313e93c6c1eab1cbe36536754b9a435f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmMwM2VkYjMxM2U5M2M2YzFlYWIxY2JlMzY1MzY3NTRiOWE0MzVmOA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1998-12-17T15:08:34Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-12-17T15:08:34Z"}, "message": "pt.c (push_inline_template_parms_recursive): Set it.\n\n\t* pt.c (push_inline_template_parms_recursive): Set it.\n\t(decl_template_parm_p): Remove.\n\t(check_template_shadow): Use DECL_TEMPLATE_PARM_P.\n\t(process_template_parm): Set it.\nMissed in Mark's earlier checkin.\n\nFrom-SVN: r24365", "tree": {"sha": "6b237ce9a1028a39fd04a50e3a6f48dde119b314", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b237ce9a1028a39fd04a50e3a6f48dde119b314"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc03edb313e93c6c1eab1cbe36536754b9a435f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc03edb313e93c6c1eab1cbe36536754b9a435f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc03edb313e93c6c1eab1cbe36536754b9a435f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc03edb313e93c6c1eab1cbe36536754b9a435f8/comments", "author": null, "committer": null, "parents": [{"sha": "b2e7e6fb8a3ba620d27b747624a9898716edf031", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2e7e6fb8a3ba620d27b747624a9898716edf031", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2e7e6fb8a3ba620d27b747624a9898716edf031"}], "stats": {"total": 39, "additions": 9, "deletions": 30}, "files": [{"sha": "3f04c56f8327068d59dde50e97f1eac86626fba9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc03edb313e93c6c1eab1cbe36536754b9a435f8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc03edb313e93c6c1eab1cbe36536754b9a435f8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fc03edb313e93c6c1eab1cbe36536754b9a435f8", "patch": "@@ -10,7 +10,7 @@\n \t* decl.c (pushdecl): Don't set DECL_CONTEXT for a template\n \tparamter. \n \t* lex.c (do_identifier): Use DECL_TEMPLATE_PARM_P.\n-\t(push_inline_template_parms_recursive): Set it.\n+\t* pt.c (push_inline_template_parms_recursive): Set it.\n \t(decl_template_parm_p): Remove.\n \t(check_template_shadow): Use DECL_TEMPLATE_PARM_P.\n \t(process_template_parm): Set it."}, {"sha": "e27286789bac170679ec3c4041bc7fdc87001f76", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 29, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc03edb313e93c6c1eab1cbe36536754b9a435f8/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc03edb313e93c6c1eab1cbe36536754b9a435f8/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=fc03edb313e93c6c1eab1cbe36536754b9a435f8", "patch": "@@ -357,10 +357,15 @@ push_inline_template_parms_recursive (parmlist, levels)\n \n \tcase PARM_DECL:\n \t  {\n-\t    /* Make a CONST_DECL as is done in process_template_parm. */\n+\t    /* Make a CONST_DECL as is done in process_template_parm.\n+\t       It is ugly that we recreate this here; the original\n+\t       version built in process_template_parm is no longer\n+\t       available.  */\n \t    tree decl = build_decl (CONST_DECL, DECL_NAME (parm),\n \t\t\t\t    TREE_TYPE (parm));\n+\t    SET_DECL_ARTIFICIAL (decl);\n \t    DECL_INITIAL (decl) = DECL_INITIAL (parm);\n+\t    DECL_TEMPLATE_PARM_P (decl) = 1;\n \t    pushdecl (decl);\n \t  }\n \t  break;\n@@ -1467,33 +1472,6 @@ int comp_template_parms (parms1, parms2)\n   return 1;\n }\n \n-\n-/* Returns 1 iff DECL is a template parameter.  */\n-\n-int decl_template_parm_p (decl)\n-     tree decl;\n-{\n-  /* For template template parms. */\n-  if (TREE_CODE (decl) == TEMPLATE_DECL\n-      && TREE_TYPE (decl)\n-      && TREE_CODE (TREE_TYPE (decl)) == TEMPLATE_TEMPLATE_PARM)\n-    return 1;\n-\n-  /* For template type parms. */\n-  if (TREE_CODE (decl) == TYPE_DECL\n-      && TREE_TYPE (decl)\n-      && TREE_CODE (TREE_TYPE (decl)) == TEMPLATE_TYPE_PARM)\n-    return 1;\n-\n-  /* For template non-type parms. */\n-  if (TREE_CODE (decl) == CONST_DECL\n-      && DECL_INITIAL (decl) \n-      && TREE_CODE (DECL_INITIAL (decl)) == TEMPLATE_PARM_INDEX)\n-    return 1;\n-\n-  return 0;\n-}\n-\n /* Complain if DECL shadows a template parameter.\n \n    [temp.local]: A template-parameter shall not be redeclared within its\n@@ -1510,7 +1488,7 @@ check_template_shadow (decl)\n       /* We check for decl != olddecl to avoid bogus errors for using a\n \t name inside a class.  We check TPFI to avoid duplicate errors for\n \t inline member templates.  */\n-      if (decl != olddecl && decl_template_parm_p (olddecl)\n+      if (decl != olddecl && DECL_TEMPLATE_PARM_P (olddecl)\n \t  && ! TEMPLATE_PARMS_FOR_INLINE (current_template_parms))\n \t{\n \t  cp_error_at (\"declaration of `%#D'\", decl);\n@@ -1671,6 +1649,7 @@ process_template_parm (list, next)\n \t\t\t\t     decl, TREE_TYPE (parm));\n     }\n   SET_DECL_ARTIFICIAL (decl);\n+  DECL_TEMPLATE_PARM_P (decl) = 1;\n   pushdecl (decl);\n   parm = build_tree_list (defval, parm);\n   return chainon (list, parm);"}]}