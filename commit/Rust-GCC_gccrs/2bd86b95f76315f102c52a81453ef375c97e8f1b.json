{"sha": "2bd86b95f76315f102c52a81453ef375c97e8f1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJkODZiOTVmNzYzMTVmMTAyYzUyYTgxNDUzZWYzNzVjOTdlOGYxYg==", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2019-08-27T19:16:33Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gcc.gnu.org", "date": "2019-08-27T19:16:33Z"}, "message": "re PR fortran/91496 (!GCC$ directives error if mistyped or unknown)\n\n2019-08-27  Harald Anlauf  <anlauf@gmx.de>\n\n\tPR fortran/91496\n\t* gfortran.h: Extend struct gfc_iterator for loop annotations.\n\t* array.c (gfc_copy_iterator): Copy loop annotations by IVDEP,\n\tVECTOR, and NOVECTOR pragmas.\n\t* decl.c (gfc_match_gcc_ivdep, gfc_match_gcc_vector)\n\t(gfc_match_gcc_novector): New matcher functions handling IVDEP,\n\tVECTOR, and NOVECTOR pragmas.\n\t* match.h: Declare prototypes of matcher functions handling IVDEP,\n\tVECTOR, and NOVECTOR pragmas.\n\t* parse.c (decode_gcc_attribute, parse_do_block)\n\t(parse_executable): Decode IVDEP, VECTOR, and NOVECTOR pragmas;\n\temit warning for unrecognized pragmas instead of error.\n\t* trans-stmt.c (gfc_trans_simple_do, gfc_trans_do): Add code to\n\temit annotations for IVDEP, VECTOR, and NOVECTOR pragmas.\n\t* gfortran.texi: Document IVDEP, VECTOR, and NOVECTOR pragmas.\n\n\tPR fortran/91496\n\t* gfortran.dg/pr91496.f90: New testcase.\n\nFrom-SVN: r274966", "tree": {"sha": "b7b05454a14ad73627667f20119d26edd65542b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7b05454a14ad73627667f20119d26edd65542b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bd86b95f76315f102c52a81453ef375c97e8f1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bd86b95f76315f102c52a81453ef375c97e8f1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bd86b95f76315f102c52a81453ef375c97e8f1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bd86b95f76315f102c52a81453ef375c97e8f1b/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "340d34bf76dd9455ab07ea849168bf2503d5edef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/340d34bf76dd9455ab07ea849168bf2503d5edef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/340d34bf76dd9455ab07ea849168bf2503d5edef"}], "stats": {"total": 240, "additions": 238, "deletions": 2}, "files": [{"sha": "4ef8106f3da1b95564714df83b2824693e06b38b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd86b95f76315f102c52a81453ef375c97e8f1b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd86b95f76315f102c52a81453ef375c97e8f1b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2bd86b95f76315f102c52a81453ef375c97e8f1b", "patch": "@@ -1,3 +1,21 @@\n+2019-08-27  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/91496\n+\t* gfortran.h: Extend struct gfc_iterator for loop annotations.\n+\t* array.c (gfc_copy_iterator): Copy loop annotations by IVDEP,\n+\tVECTOR, and NOVECTOR pragmas.\n+\t* decl.c (gfc_match_gcc_ivdep, gfc_match_gcc_vector)\n+\t(gfc_match_gcc_novector): New matcher functions handling IVDEP,\n+\tVECTOR, and NOVECTOR pragmas.\n+\t* match.h: Declare prototypes of matcher functions handling IVDEP,\n+\tVECTOR, and NOVECTOR pragmas.\n+\t* parse.c (decode_gcc_attribute, parse_do_block)\n+\t(parse_executable): Decode IVDEP, VECTOR, and NOVECTOR pragmas;\n+\temit warning for unrecognized pragmas instead of error.\n+\t* trans-stmt.c (gfc_trans_simple_do, gfc_trans_do): Add code to\n+\temit annotations for IVDEP, VECTOR, and NOVECTOR pragmas.\n+\t* gfortran.texi: Document IVDEP, VECTOR, and NOVECTOR pragmas.\n+\n 2019-08-27  Mark Eggleston  <mark.eggleston@codethink.com>\n \n \t* invoke.texi: Ensure that the option lists fit within the"}, {"sha": "b958e894d596e1586dfb25363bfcb60bca3165ec", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd86b95f76315f102c52a81453ef375c97e8f1b/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd86b95f76315f102c52a81453ef375c97e8f1b/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=2bd86b95f76315f102c52a81453ef375c97e8f1b", "patch": "@@ -2185,6 +2185,9 @@ gfc_copy_iterator (gfc_iterator *src)\n   dest->end = gfc_copy_expr (src->end);\n   dest->step = gfc_copy_expr (src->step);\n   dest->unroll = src->unroll;\n+  dest->ivdep = src->ivdep;\n+  dest->vector = src->vector;\n+  dest->novector = src->novector;\n \n   return dest;\n }"}, {"sha": "d5c8c339e70397a03d018c3b9b51c4103bfcdce8", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd86b95f76315f102c52a81453ef375c97e8f1b/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd86b95f76315f102c52a81453ef375c97e8f1b/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=2bd86b95f76315f102c52a81453ef375c97e8f1b", "patch": "@@ -99,6 +99,11 @@ bool gfc_matching_function;\n /* Set upon parsing a !GCC$ unroll n directive for use in the next loop.  */\n int directive_unroll = -1;\n \n+/* Set upon parsing supported !GCC$ pragmas for use in the next loop.  */\n+bool directive_ivdep = false;\n+bool directive_vector = false;\n+bool directive_novector = false;\n+\n /* Map of middle-end built-ins that should be vectorized.  */\n hash_map<nofree_string_hash, int> *gfc_vectorized_builtins;\n \n@@ -11528,3 +11533,53 @@ gfc_match_gcc_builtin (void)\n \n   return MATCH_YES;\n }\n+\n+/* Match an !GCC$ IVDEP statement.\n+   When we come here, we have already matched the !GCC$ IVDEP string.  */\n+\n+match\n+gfc_match_gcc_ivdep (void)\n+{\n+  if (gfc_match_eos () == MATCH_YES)\n+    {\n+      directive_ivdep = true;\n+      return MATCH_YES;\n+    }\n+\n+  gfc_error (\"Syntax error in !GCC$ IVDEP directive at %C\");\n+  return MATCH_ERROR;\n+}\n+\n+/* Match an !GCC$ VECTOR statement.\n+   When we come here, we have already matched the !GCC$ VECTOR string.  */\n+\n+match\n+gfc_match_gcc_vector (void)\n+{\n+  if (gfc_match_eos () == MATCH_YES)\n+    {\n+      directive_vector = true;\n+      directive_novector = false;\n+      return MATCH_YES;\n+    }\n+\n+  gfc_error (\"Syntax error in !GCC$ VECTOR directive at %C\");\n+  return MATCH_ERROR;\n+}\n+\n+/* Match an !GCC$ NOVECTOR statement.\n+   When we come here, we have already matched the !GCC$ NOVECTOR string.  */\n+\n+match\n+gfc_match_gcc_novector (void)\n+{\n+  if (gfc_match_eos () == MATCH_YES)\n+    {\n+      directive_novector = true;\n+      directive_vector = false;\n+      return MATCH_YES;\n+    }\n+\n+  gfc_error (\"Syntax error in !GCC$ NOVECTOR directive at %C\");\n+  return MATCH_ERROR;\n+}"}, {"sha": "d2f40dfdb91ce135fc8f0bcc161eec779f16e67f", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd86b95f76315f102c52a81453ef375c97e8f1b/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd86b95f76315f102c52a81453ef375c97e8f1b/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=2bd86b95f76315f102c52a81453ef375c97e8f1b", "patch": "@@ -2418,6 +2418,9 @@ typedef struct\n {\n   gfc_expr *var, *start, *end, *step;\n   unsigned short unroll;\n+  bool ivdep;\n+  bool vector;\n+  bool novector;\n }\n gfc_iterator;\n \n@@ -2794,6 +2797,9 @@ gfc_finalizer;\n bool gfc_in_match_data (void);\n match gfc_match_char_spec (gfc_typespec *);\n extern int directive_unroll;\n+extern bool directive_ivdep;\n+extern bool directive_vector;\n+extern bool directive_novector;\n \n /* SIMD clause enum.  */\n enum gfc_simd_clause"}, {"sha": "22d42f49935a68a33ce161457a8495b22e7a3202", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd86b95f76315f102c52a81453ef375c97e8f1b/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd86b95f76315f102c52a81453ef375c97e8f1b/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=2bd86b95f76315f102c52a81453ef375c97e8f1b", "patch": "@@ -3559,6 +3559,9 @@ as this requires the new array descriptor.\n * ATTRIBUTES directive::\n * UNROLL directive::\n * BUILTIN directive::\n+* IVDEP directive::\n+* VECTOR directive::\n+* NOVECTOR directive::\n @end menu\n \n @node ATTRIBUTES directive\n@@ -3670,6 +3673,52 @@ for the built-in that should be vectorized.  Example usage:\n The purpose of the directive is to provide an API among the GCC compiler and\n the GNU C Library which would define vector implementations of math routines.\n \n+\n+@node IVDEP directive\n+@subsection IVDEP directive\n+\n+The syntax of the directive is\n+\n+@code{!GCC$ ivdep}\n+\n+This directive tells the compiler to ignore vector dependencies in the\n+following loop.  It must be placed immediately before a @code{DO} loop\n+and applies only to the loop that follows.\n+\n+Sometimes the compiler may not have sufficient information to decide\n+whether a particular loop is vectorizable due to potential\n+dependencies between iterations.  The purpose of the directive is to\n+tell the compiler that vectorization is safe.\n+\n+This directive is intended for annotation of existing code.  For new\n+code it is recommended to consider OpenMP SIMD directives as potential\n+alternative.\n+\n+\n+@node VECTOR directive\n+@subsection VECTOR directive\n+\n+The syntax of the directive is\n+\n+@code{!GCC$ vector}\n+\n+This directive tells the compiler to vectorize the following loop.  It\n+must be placed immediately before a @code{DO} loop and applies only to\n+the loop that follows.\n+\n+\n+@node NOVECTOR directive\n+@subsection NOVECTOR directive\n+\n+The syntax of the directive is\n+\n+@code{!GCC$ novector}\n+\n+This directive tells the compiler to not vectorize the following loop.\n+It must be placed immediately before a @code{DO} loop and applies only\n+to the loop that follows.\n+\n+\n @node Non-Fortran Main Program\n @section Non-Fortran Main Program\n "}, {"sha": "29854ee9000e6a02e3af066b9ef4c21b1c881c88", "filename": "gcc/fortran/match.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd86b95f76315f102c52a81453ef375c97e8f1b/gcc%2Ffortran%2Fmatch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd86b95f76315f102c52a81453ef375c97e8f1b/gcc%2Ffortran%2Fmatch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.h?ref=2bd86b95f76315f102c52a81453ef375c97e8f1b", "patch": "@@ -246,8 +246,11 @@ match gfc_match_contiguous (void);\n match gfc_match_dimension (void);\n match gfc_match_external (void);\n match gfc_match_gcc_attributes (void);\n-match gfc_match_gcc_unroll (void);\n match gfc_match_gcc_builtin (void);\n+match gfc_match_gcc_ivdep (void);\n+match gfc_match_gcc_novector (void);\n+match gfc_match_gcc_unroll (void);\n+match gfc_match_gcc_vector (void);\n match gfc_match_import (void);\n match gfc_match_intent (void);\n match gfc_match_intrinsic (void);"}, {"sha": "8950b6ac98fa6cd36b582a3d0556c2481e7fcd2a", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd86b95f76315f102c52a81453ef375c97e8f1b/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd86b95f76315f102c52a81453ef375c97e8f1b/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=2bd86b95f76315f102c52a81453ef375c97e8f1b", "patch": "@@ -1079,12 +1079,20 @@ decode_gcc_attribute (void)\n   match (\"attributes\", gfc_match_gcc_attributes, ST_ATTR_DECL);\n   match (\"unroll\", gfc_match_gcc_unroll, ST_NONE);\n   match (\"builtin\", gfc_match_gcc_builtin, ST_NONE);\n+  match (\"ivdep\", gfc_match_gcc_ivdep, ST_NONE);\n+  match (\"vector\", gfc_match_gcc_vector, ST_NONE);\n+  match (\"novector\", gfc_match_gcc_novector, ST_NONE);\n \n   /* All else has failed, so give up.  See if any of the matchers has\n      stored an error message of some sort.  */\n \n   if (!gfc_error_check ())\n-    gfc_error_now (\"Unclassifiable GCC directive at %C\");\n+    {\n+      if (pedantic)\n+\tgfc_error_now (\"Unclassifiable GCC directive at %C\");\n+      else\n+\tgfc_warning_now (0, \"Unclassifiable GCC directive at %C, ignored\");\n+    }\n \n   reject_statement ();\n \n@@ -4672,6 +4680,21 @@ parse_do_block (void)\n \t  new_st.ext.iterator->unroll = directive_unroll;\n \t  directive_unroll = -1;\n \t}\n+      if (directive_ivdep)\n+\t{\n+\t  new_st.ext.iterator->ivdep = directive_ivdep;\n+\t  directive_ivdep = false;\n+\t}\n+      if (directive_vector)\n+\t{\n+\t  new_st.ext.iterator->vector = directive_vector;\n+\t  directive_vector = false;\n+\t}\n+      if (directive_novector)\n+\t{\n+\t  new_st.ext.iterator->novector = directive_novector;\n+\t  directive_novector = false;\n+\t}\n     }\n   else\n     stree = NULL;\n@@ -5433,6 +5456,15 @@ parse_executable (gfc_statement st)\n       if (directive_unroll != -1)\n \tgfc_error (\"%<GCC unroll%> directive does not commence a loop at %C\");\n \n+      if (directive_ivdep)\n+\tgfc_error (\"%<GCC ivdep%> directive does not commence a loop at %C\");\n+\n+      if (directive_vector)\n+\tgfc_error (\"%<GCC vector%> directive does not commence a loop at %C\");\n+\n+      if (directive_novector)\n+\tgfc_error (\"%<GCC novector%> directive does not commence a loop at %C\");\n+\n       st = next_statement ();\n     }\n }"}, {"sha": "360688073c9617f9767f0eef586f028e24bcdc33", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd86b95f76315f102c52a81453ef375c97e8f1b/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd86b95f76315f102c52a81453ef375c97e8f1b/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=2bd86b95f76315f102c52a81453ef375c97e8f1b", "patch": "@@ -2173,6 +2173,19 @@ gfc_trans_simple_do (gfc_code * code, stmtblock_t *pblock, tree dovar,\n \t\tbuild_int_cst (integer_type_node, annot_expr_unroll_kind),\n \t\tbuild_int_cst (integer_type_node, code->ext.iterator->unroll));\n \n+  if (code->ext.iterator->ivdep && cond != error_mark_node)\n+    cond = build3 (ANNOTATE_EXPR, TREE_TYPE (cond), cond,\n+\t\t   build_int_cst (integer_type_node, annot_expr_ivdep_kind),\n+\t\t   integer_zero_node);\n+  if (code->ext.iterator->vector && cond != error_mark_node)\n+    cond = build3 (ANNOTATE_EXPR, TREE_TYPE (cond), cond,\n+\t\t   build_int_cst (integer_type_node, annot_expr_vector_kind),\n+\t\t   integer_zero_node);\n+  if (code->ext.iterator->novector && cond != error_mark_node)\n+    cond = build3 (ANNOTATE_EXPR, TREE_TYPE (cond), cond,\n+\t\t   build_int_cst (integer_type_node, annot_expr_no_vector_kind),\n+\t\t   integer_zero_node);\n+\n   /* The loop exit.  */\n   tmp = fold_build1_loc (loc, GOTO_EXPR, void_type_node, exit_label);\n   TREE_USED (exit_label) = 1;\n@@ -2503,6 +2516,20 @@ gfc_trans_do (gfc_code * code, tree exit_cond)\n       = build3 (ANNOTATE_EXPR, TREE_TYPE (cond), cond,\n \t\tbuild_int_cst (integer_type_node, annot_expr_unroll_kind),\n \t\tbuild_int_cst (integer_type_node, code->ext.iterator->unroll));\n+\n+  if (code->ext.iterator->ivdep && cond != error_mark_node)\n+    cond = build3 (ANNOTATE_EXPR, TREE_TYPE (cond), cond,\n+\t\t   build_int_cst (integer_type_node, annot_expr_ivdep_kind),\n+\t\t   integer_zero_node);\n+  if (code->ext.iterator->vector && cond != error_mark_node)\n+    cond = build3 (ANNOTATE_EXPR, TREE_TYPE (cond), cond,\n+\t\t   build_int_cst (integer_type_node, annot_expr_vector_kind),\n+\t\t   integer_zero_node);\n+  if (code->ext.iterator->novector && cond != error_mark_node)\n+    cond = build3 (ANNOTATE_EXPR, TREE_TYPE (cond), cond,\n+\t\t   build_int_cst (integer_type_node, annot_expr_no_vector_kind),\n+\t\t   integer_zero_node);\n+\n   tmp = fold_build1_loc (loc, GOTO_EXPR, void_type_node, exit_label);\n   tmp = fold_build3_loc (loc, COND_EXPR, void_type_node,\n \t\t\t cond, tmp, build_empty_stmt (loc));"}, {"sha": "37133de87f5359f7058a73e801e11a3cf29248cd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd86b95f76315f102c52a81453ef375c97e8f1b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd86b95f76315f102c52a81453ef375c97e8f1b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2bd86b95f76315f102c52a81453ef375c97e8f1b", "patch": "@@ -1,3 +1,8 @@\n+2019-08-27  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/91496\n+\t* gfortran.dg/pr91496.f90: New testcase.\n+\n 2019-08-27  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/sse4_1-round-roundeven-1.c (dg-options):"}, {"sha": "cb316748f0e18fc272a5d22424b756109f5e4921", "filename": "gcc/testsuite/gfortran.dg/pr91496.f90", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd86b95f76315f102c52a81453ef375c97e8f1b/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91496.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd86b95f76315f102c52a81453ef375c97e8f1b/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91496.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91496.f90?ref=2bd86b95f76315f102c52a81453ef375c97e8f1b", "patch": "@@ -0,0 +1,38 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+subroutine foo (a, b, c, n)\n+  implicit none\n+  real a(*), b(*), c(*)\n+  integer :: i, n\n+  external bar\n+!DIR$ unroll (4)\n+!GCC$ unroll 4\n+  do i = 1, n\n+     a(i) = b(i) + c(i)\n+  end do\n+!DIR$ ivdep\n+!GCC$ ivdep\n+  do i = 1, n\n+     a(i) = b(i) + c(i)\n+  end do\n+!DIR$ vector\n+!GCC$ vector\n+  do i = 1, n\n+     a(i) = b(i) + c(i)\n+  end do\n+!DIR$ novector\n+!GCC$ novector\n+  do i = 1, n\n+     a(i) = b(i) + c(i)\n+  end do\n+!GCC$ ivdep\n+!GCC$ vector\n+  do i = 1, n\n+     a(i) = b(i) + c(i)\n+  end do\n+!DIR$ noinline\n+!GCC$ noinline          ! { dg-warning \"Unclassifiable GCC directive\" }\n+  call bar (a)\n+end subroutine foo\n+! { dg-final { scan-tree-dump-times \"ANNOTATE_EXPR\" 6 \"original\" } }"}]}