{"sha": "e7041fccb24d611126314e352dcdf2e6001bc384", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTcwNDFmY2NiMjRkNjExMTI2MzE0ZTM1MmRjZGYyZTYwMDFiYzM4NA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-25T17:23:42Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-25T17:23:42Z"}, "message": "config/h8300: Use rtx_insn\n\ngcc/\n\t* config/h8300/h8300-protos.h (final_prescan_insn): Strengthen\n\tfirst param from rtx to rtx_insn *.\n\t(h8300_insn_length_from_table): Likewise.\n\t* config/h8300/h8300.c (F): Likewise for return type and param\n\t\"x\".\n\t(Fpa): Add a checked cast to rtx_insn *.\n\t(h8300_emit_stack_adjustment): Strengthen local \"x\" from rtx to\n\trtx_insn *.\n\t(final_prescan_insn): Likewise for param \"insn\".\n\t(h8300_binary_length): Likewise.\n\t(h8300_insn_length_from_table): Likewise.\n\nFrom-SVN: r214442", "tree": {"sha": "c238662a1cb0d441d0adef4fd180728be4d55161", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c238662a1cb0d441d0adef4fd180728be4d55161"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7041fccb24d611126314e352dcdf2e6001bc384", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7041fccb24d611126314e352dcdf2e6001bc384", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7041fccb24d611126314e352dcdf2e6001bc384", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7041fccb24d611126314e352dcdf2e6001bc384/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bcfba653d9710ae743487bda72123d4881e2a5a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcfba653d9710ae743487bda72123d4881e2a5a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcfba653d9710ae743487bda72123d4881e2a5a3"}], "stats": {"total": 37, "additions": 26, "deletions": 11}, "files": [{"sha": "fd79f9213b2d13c401431f54f82416d1d85a728a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7041fccb24d611126314e352dcdf2e6001bc384/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7041fccb24d611126314e352dcdf2e6001bc384/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7041fccb24d611126314e352dcdf2e6001bc384", "patch": "@@ -1,3 +1,17 @@\n+2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* config/h8300/h8300-protos.h (final_prescan_insn): Strengthen\n+\tfirst param from rtx to rtx_insn *.\n+\t(h8300_insn_length_from_table): Likewise.\n+\t* config/h8300/h8300.c (F): Likewise for return type and param\n+\t\"x\".\n+\t(Fpa): Add a checked cast to rtx_insn *.\n+\t(h8300_emit_stack_adjustment): Strengthen local \"x\" from rtx to\n+\trtx_insn *.\n+\t(final_prescan_insn): Likewise for param \"insn\".\n+\t(h8300_binary_length): Likewise.\n+\t(h8300_insn_length_from_table): Likewise.\n+\n 2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n \n \t* config/epiphany/epiphany-protos.h (epiphany_final_prescan_insn):"}, {"sha": "ae14125b3a28b36e2268bc7917d93cb0fb26bc8e", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7041fccb24d611126314e352dcdf2e6001bc384/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7041fccb24d611126314e352dcdf2e6001bc384/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=e7041fccb24d611126314e352dcdf2e6001bc384", "patch": "@@ -33,7 +33,7 @@ extern unsigned int compute_a_shift_length (rtx, rtx *);\n extern const char *output_a_rotate (enum rtx_code, rtx *);\n extern unsigned int compute_a_rotate_length (rtx *);\n extern const char *output_simode_bld (int, rtx[]);\n-extern void final_prescan_insn (rtx, rtx *, int);\n+extern void final_prescan_insn (rtx_insn *, rtx *, int);\n extern int h8300_expand_movsi (rtx[]);\n extern void notice_update_cc (rtx, rtx);\n extern const char *output_logical_op (enum machine_mode, rtx *);\n@@ -107,7 +107,7 @@ struct cpp_reader;\n extern void h8300_pr_interrupt (struct cpp_reader *);\n extern void h8300_pr_saveall (struct cpp_reader *);\n extern enum reg_class  h8300_reg_class_from_letter (int);\n-extern unsigned int    h8300_insn_length_from_table (rtx, rtx *);\n+extern unsigned int    h8300_insn_length_from_table (rtx_insn *, rtx *);\n extern const char *    output_h8sx_shift (rtx *, int, int);\n extern bool            h8300_operands_match_p (rtx *);\n extern bool            h8sx_mergeable_memrefs_p (rtx, rtx);"}, {"sha": "be6fe64b3ae1320e92c508d3fb4b9143edaa271c", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7041fccb24d611126314e352dcdf2e6001bc384/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7041fccb24d611126314e352dcdf2e6001bc384/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=e7041fccb24d611126314e352dcdf2e6001bc384", "patch": "@@ -115,7 +115,7 @@ static unsigned int  h8300_length_from_table      (rtx, rtx, const h8300_length_\n static unsigned int  h8300_unary_length           (rtx);\n static unsigned int  h8300_short_immediate_length (rtx);\n static unsigned int  h8300_bitfield_length        (rtx, rtx);\n-static unsigned int  h8300_binary_length          (rtx, const h8300_length_table *);\n+static unsigned int  h8300_binary_length          (rtx_insn *, const h8300_length_table *);\n static bool          h8300_short_move_mem_p       (rtx, enum rtx_code);\n static unsigned int  h8300_move_length            (rtx *, const h8300_length_table *);\n static bool\t     h8300_hard_regno_scratch_ok  (unsigned int);\n@@ -486,8 +486,8 @@ byte_reg (rtx x, int b)\n \t   && !crtl->is_leaf)))\n \n /* We use this to wrap all emitted insns in the prologue.  */\n-static rtx\n-F (rtx x, bool set_it)\n+static rtx_insn *\n+F (rtx_insn *x, bool set_it)\n {\n   if (set_it)\n     RTX_FRAME_RELATED_P (x) = 1;\n@@ -507,7 +507,7 @@ Fpa (rtx par)\n   int i;\n \n   for (i = 0; i < len; i++)\n-    F (XVECEXP (par, 0, i), true);\n+    F (as_a <rtx_insn *> (XVECEXP (par, 0, i)), true);\n \n   return par;\n }\n@@ -544,8 +544,9 @@ h8300_emit_stack_adjustment (int sign, HOST_WIDE_INT size, bool in_prologue)\n \t the splitter will do.  */\n       if (Pmode == HImode)\n \t{\n-\t  rtx x = emit_insn (gen_addhi3 (stack_pointer_rtx,\n-\t\t\t\t\t stack_pointer_rtx, GEN_INT (sign * size)));\n+\t  rtx_insn *x = emit_insn (gen_addhi3 (stack_pointer_rtx,\n+\t\t\t\t\t       stack_pointer_rtx,\n+\t\t\t\t\t       GEN_INT (sign * size)));\n \t  if (size < 4)\n \t    F (x, in_prologue);\n \t}\n@@ -1875,7 +1876,7 @@ h8300_print_operand_address (FILE *file, rtx addr)\n    option.  */\n \n void\n-final_prescan_insn (rtx insn, rtx *operand ATTRIBUTE_UNUSED,\n+final_prescan_insn (rtx_insn *insn, rtx *operand ATTRIBUTE_UNUSED,\n \t\t    int num_operands ATTRIBUTE_UNUSED)\n {\n   /* This holds the last insn address.  */\n@@ -2439,7 +2440,7 @@ h8300_bitfield_length (rtx op, rtx op2)\n /* Calculate the length of general binary instruction INSN using TABLE.  */\n \n static unsigned int\n-h8300_binary_length (rtx insn, const h8300_length_table *table)\n+h8300_binary_length (rtx_insn *insn, const h8300_length_table *table)\n {\n   rtx set;\n \n@@ -2528,7 +2529,7 @@ h8300_mova_length (rtx dest, rtx src, rtx offset)\n    OPERANDS is the array of its operands.  */\n \n unsigned int\n-h8300_insn_length_from_table (rtx insn, rtx * operands)\n+h8300_insn_length_from_table (rtx_insn *insn, rtx * operands)\n {\n   switch (get_attr_length_table (insn))\n     {"}]}