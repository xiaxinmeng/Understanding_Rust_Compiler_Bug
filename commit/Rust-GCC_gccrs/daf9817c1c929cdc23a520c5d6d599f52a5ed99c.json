{"sha": "daf9817c1c929cdc23a520c5d6d599f52a5ed99c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFmOTgxN2MxYzkyOWNkYzIzYTUyMGM1ZDZkNTk5ZjUyYTVlZDk5Yw==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2015-12-10T13:40:21Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2015-12-10T13:40:21Z"}, "message": "[ARC] Add support for atomic memory built-in. Add atomic.md file.\n\ngcc/\n\n2015-12-10  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/atomic.md: Add new file.\n\nFrom-SVN: r231510", "tree": {"sha": "f908859abb404ad8b9e9cc44e7665ac666bea058", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f908859abb404ad8b9e9cc44e7665ac666bea058"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/daf9817c1c929cdc23a520c5d6d599f52a5ed99c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daf9817c1c929cdc23a520c5d6d599f52a5ed99c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daf9817c1c929cdc23a520c5d6d599f52a5ed99c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daf9817c1c929cdc23a520c5d6d599f52a5ed99c/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b8a64b7f5d699776983eab2c07125523e96bc6ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8a64b7f5d699776983eab2c07125523e96bc6ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8a64b7f5d699776983eab2c07125523e96bc6ea"}], "stats": {"total": 222, "additions": 222, "deletions": 0}, "files": [{"sha": "d2854be2ec258f248c8ce48976dad04f3acbf8c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daf9817c1c929cdc23a520c5d6d599f52a5ed99c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daf9817c1c929cdc23a520c5d6d599f52a5ed99c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=daf9817c1c929cdc23a520c5d6d599f52a5ed99c", "patch": "@@ -1,3 +1,7 @@\n+2015-12-10  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/atomic.md: Add new file.\n+\n 2015-12-10  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc-protos.h (arc_expand_atomic_op): Prototype."}, {"sha": "665cab5ca0f76fd5883b4eb12382baa5fdf1d92e", "filename": "gcc/config/arc/atomic.md", "status": "added", "additions": 218, "deletions": 0, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daf9817c1c929cdc23a520c5d6d599f52a5ed99c/gcc%2Fconfig%2Farc%2Fatomic.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daf9817c1c929cdc23a520c5d6d599f52a5ed99c/gcc%2Fconfig%2Farc%2Fatomic.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fatomic.md?ref=daf9817c1c929cdc23a520c5d6d599f52a5ed99c", "patch": "@@ -0,0 +1,218 @@\n+;; GCC machine description for ARC atomic instructions.\n+;; Copyright (C) 2015 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_mode_iterator QHSI [QI HI SI])\n+(define_code_iterator atomicop [plus minus ior xor and])\n+(define_code_attr atomic_optab\n+  [(ior \"or\") (xor \"xor\") (and \"and\") (plus \"add\") (minus \"sub\")])\n+\n+(define_expand \"memory_barrier\"\n+  [(set (match_dup 0)\n+\t(unspec:BLK [(match_dup 0)] UNSPEC_ARC_MEMBAR))]\n+  \"\"\n+{\n+  operands[0] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[0]) = 1;\n+})\n+\n+;; A compiler-only memory barrier for ARC700.  Generic code, when\n+;; checking for the existence of various named patterns, uses\n+;; asm(\"\":::\"memory\") when we don't need an actual instruction.  For\n+;; ARCHS, we use a hardware data memory barrier that waits for\n+;; completion of current data memory operations before initiating\n+;; similar data memory operations.\n+(define_insn \"*memory_barrier\"\n+  [(set (match_operand:BLK 0 \"\" \"\")\n+\t(unspec:BLK [(match_dup 0)] UNSPEC_ARC_MEMBAR))]\n+  \"\"\n+  {\n+   if (TARGET_HS)\n+      {\n+       return \"dmb\";\n+      }\n+    else\n+      {\n+       return \"\";\n+      }\n+  }\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_expand \"atomic_compare_and_swap<mode>\"\n+  [(match_operand:SI 0 \"register_operand\" \"\")\t;; bool out\n+   (match_operand:QHSI 1 \"register_operand\" \"\")\t;; val out\n+   (match_operand:QHSI 2 \"mem_noofs_operand\" \"\");; memory\n+   (match_operand:QHSI 3 \"register_operand\" \"\")\t;; expected\n+   (match_operand:QHSI 4 \"register_operand\" \"\")\t;; desired\n+   (match_operand:SI 5 \"const_int_operand\")\t;; is_weak\n+   (match_operand:SI 6 \"const_int_operand\")\t;; mod_s\n+   (match_operand:SI 7 \"const_int_operand\")]\t;; mod_f\n+  \"TARGET_ATOMIC\"\n+{\n+  arc_expand_compare_and_swap (operands);\n+  DONE;\n+})\n+\n+(define_insn_and_split \"atomic_compare_and_swapsi_1\"\n+  [(set (reg:CC_Z CC_REG)\t\t\t\t\t;; bool out\n+\t(unspec_volatile:CC_Z [(const_int 0)] VUNSPEC_ARC_CAS))\n+   (set (match_operand:SI 0 \"register_operand\"      \"=&r\")\t;; val out\n+\t(match_operand:SI 1 \"mem_noofs_operand\"      \"+ATO\"))\t;; memory\n+   (set (match_dup 1)\n+\t(unspec_volatile:SI\n+\t  [(match_operand:SI 2 \"register_operand\"     \"r\") ;; expect\n+\t   (match_operand:SI 3 \"register_operand\"     \"r\") ;; desired\n+\t   (match_operand:SI 4 \"const_int_operand\")\t   ;; is_weak\n+\t   (match_operand:SI 5 \"const_int_operand\")\t   ;; mod_s\n+\t   (match_operand:SI 6 \"const_int_operand\")]\t   ;; mod_f\n+\t  VUNSPEC_ARC_CAS))]\n+  \"TARGET_ATOMIC\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+  {\n+    arc_split_compare_and_swap (operands);\n+    DONE;\n+  })\n+\n+(define_insn \"arc_load_exclusivesi\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec_volatile:SI\n+\t  [(match_operand:SI 1 \"mem_noofs_operand\" \"ATO\")]\n+\t  VUNSPEC_ARC_LL))]\n+  \"TARGET_ATOMIC\"\n+  \"llock %0,%1\"\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"iscompact\" \"false\")\n+   (set_attr \"predicable\" \"no\")\n+   (set_attr \"length\" \"*\")])\n+\n+(define_insn \"arc_store_exclusivesi\"\n+  [(set (match_operand:SI 0 \"mem_noofs_operand\"     \"=ATO\")\n+\t(unspec_volatile:SI[(match_operand:SI 1 \"register_operand\" \"r\")]\n+\t\t\t   VUNSPEC_ARC_SC))\n+   (clobber (reg:CC_Z CC_REG))]\n+  \"TARGET_ATOMIC\"\n+  \"scond %1,%0\"\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"iscompact\" \"false\")\n+   (set_attr \"predicable\" \"no\")\n+   (set_attr \"length\" \"*\")])\n+\n+(define_expand \"atomic_exchangesi\"\n+  [(match_operand:SI 0 \"register_operand\" \"\")\n+   (match_operand:SI 1 \"mem_noofs_operand\" \"\")\n+   (match_operand:SI 2 \"register_operand\" \"\")\n+   (match_operand:SI 3 \"const_int_operand\" \"\")]\n+  \"TARGET_ATOMIC\"\n+{\n+  enum memmodel model = (enum memmodel) INTVAL (operands[3]);\n+\n+  if (model == MEMMODEL_SEQ_CST)\n+    emit_insn (gen_sync (const1_rtx));\n+  emit_insn (gen_exchangesi (operands[0], operands[1], operands[2]));\n+  DONE;\n+})\n+\n+(define_insn \"exchangesi\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec_volatile:SI [(match_operand:SI 1 \"mem_noofs_operand\" \"+ATO\")]\n+\t\t\t    VUNSPEC_ARC_EX))\n+   (set (match_dup 1)\n+\t(match_operand:SI 2 \"register_operand\" \"0\"))]\n+  \"\"\n+  \"ex %0,%1\"\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"iscompact\" \"false\")\n+   (set_attr \"predicable\" \"no\")\n+   (set_attr \"length\" \"*\")])\n+\n+(define_expand \"atomic_<atomic_optab>si\"\n+  [(match_operand:SI 0 \"mem_noofs_operand\" \"\")  ;; memory\n+   (atomicop:SI (match_dup 0)\n+\t\t(match_operand:SI 1 \"register_operand\" \"\")) ;; operand\n+   (match_operand:SI 2 \"const_int_operand\" \"\")] ;; model\n+  \"TARGET_ATOMIC\"\n+{\n+  arc_expand_atomic_op (<CODE>, operands[0], operands[1],\n+\t\t\t\tNULL_RTX, NULL_RTX, operands[2]);\n+  DONE;\n+})\n+\n+(define_expand \"atomic_nandsi\"\n+  [(match_operand:SI 0 \"mem_noofs_operand\" \"\")\t;; memory\n+   (match_operand:SI 1 \"register_operand\" \"\")\t;; operand\n+   (match_operand:SI 2 \"const_int_operand\" \"\")]\t;; model\n+  \"TARGET_ATOMIC\"\n+{\n+ arc_expand_atomic_op (NOT, operands[0], operands[1],\n+\t\t\t    NULL_RTX, NULL_RTX, operands[2]);\n+ DONE;\n+})\n+\n+(define_expand \"atomic_fetch_<atomic_optab>si\"\n+  [(match_operand:SI 0 \"register_operand\" \"\")\t;; output\n+   (match_operand:SI 1 \"mem_noofs_operand\" \"\")\t;; memory\n+   (atomicop:SI (match_dup 1)\n+\t\t(match_operand:SI 2 \"register_operand\" \"\")) ;; operand\n+   (match_operand:SI 3 \"const_int_operand\" \"\")]\t;; model\n+  \"TARGET_ATOMIC\"\n+{\n+  arc_expand_atomic_op (<CODE>, operands[1], operands[2],\n+\t\t\t\toperands[0], NULL_RTX, operands[3]);\n+  DONE;\n+})\n+\n+(define_expand \"atomic_fetch_nandsi\"\n+  [(match_operand:SI 0 \"register_operand\" \"\")\t;; output\n+   (match_operand:SI 1 \"mem_noofs_operand\" \"\")\t;; memory\n+   (match_operand:SI 2 \"register_operand\" \"\")\t;; operand\n+   (match_operand:SI 3 \"const_int_operand\" \"\")]\t;; model\n+  \"TARGET_ATOMIC\"\n+{\n+  arc_expand_atomic_op (NOT, operands[1], operands[2],\n+\t\t\t     operands[0], NULL_RTX, operands[3]);\n+  DONE;\n+})\n+\n+(define_expand \"atomic_<atomic_optab>_fetchsi\"\n+  [(match_operand:SI 0 \"register_operand\" \"\")\t;; output\n+   (match_operand:SI 1 \"mem_noofs_operand\" \"\")\t;; memory\n+   (atomicop:SI (match_dup 1)\n+\t\t(match_operand:SI 2 \"register_operand\" \"\")) ;; operand\n+   (match_operand:SI 3 \"const_int_operand\" \"\")]\t;; model\n+  \"TARGET_ATOMIC\"\n+{\n+  arc_expand_atomic_op (<CODE>, operands[1], operands[2],\n+\t\t\t\tNULL_RTX, operands[0], operands[3]);\n+  DONE;\n+})\n+\n+(define_expand \"atomic_nand_fetchsi\"\n+  [(match_operand:SI 0 \"register_operand\" \"\")\t;; output\n+   (match_operand:SI 1 \"mem_noofs_operand\" \"\")\t;; memory\n+   (match_operand:SI 2 \"register_operand\" \"\")\t;; operand\n+   (match_operand:SI 3 \"const_int_operand\" \"\")]\t;; model\n+  \"TARGET_ATOMIC\"\n+{\n+  arc_expand_atomic_op (NOT, operands[1], operands[2],\n+\t\t\t     NULL_RTX, operands[0], operands[3]);\n+  DONE;\n+})\n+"}]}