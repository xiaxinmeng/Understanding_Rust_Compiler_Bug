{"sha": "ec9d6e9f45ea25fd6c5aea6ebb67a51eda432745", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM5ZDZlOWY0NWVhMjVmZDZjNWFlYTZlYmI2N2E1MWVkYTQzMjc0NQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-11-28T06:29:55Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-11-28T06:29:55Z"}, "message": "Numeric facets cleanup.\n\n\n2001-11-27  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tNumeric facets cleanup.\n\t* include/bits/locale_facets.h (__num_base::_S_atoms): Add, remove\n\t+ and - signs.\n\t(__num_base::_M_zero): Add\n\t(__num_base::_M_e): Add.\n\t(__num_base::_M_E): Add.\n\t* include/bits/locale_facets.tcc (num_get::_M_extract): Remove.\n\t(num_get::_M_extract_float): New.\n\t(num_get::_M_extract_int): New.\n\t* src/locale.cc (num_get::_M_extract): Remove.\n\n\t* include/bits/locale_facets.tcc (num_put::_M_insert_float):\n\tSimplify, use _M_insert.\n\t(num_put::do_put(bool)): Simplify, remove __pad.\n\t(__pad): Remove.\n\t(__pad_output): Change to __pad.\n\t* include/bits/ostream.tcc: And here.\n\t* src/locale-inst: Remove instantiations.\n\n\t* include/bits/locale_facets.h: Move helper functions in to class\n\tnum_put.\n\t(num_put::_M_insert_float): Same, for __output_integer.\n\t(num_put::_M_insert_int): Same, for __output_float.\n\t(num_put::_M_insert): New.\n\t(__num_base): Add.\n\t(__num_base::_S_format_float): Move\n\t__build_float_format into class __num_base.\n\t(__num_base::_S_format_int): Move __build_int_format into class\n\t__num_base.\n\t* include/bits/locale_facets.tcc (__group_digits): Change to\n\t(__add_grouping): This.\n\t* src/locale-inst.cc: And here. Tweak instantiations.\n\t* src/misc-inst.cc: Remove instantiations.\n\n\t* include/bits/ostream.tcc (__pad_char): Rename, adjust inserters\n\tfor new calling conventions, move to...\n\t* include/bits/locale_facets.tcc (__pad_output): Here. Adjust\n\tsignature to make it useful for both ostream and num_put.\n\t(__pad_numeric): Remove.\n\t* src/misc-inst.cc: Remove instantiations.\n\t* src/locale-inst.cc: Same.\n\n\t* include/bits/locale_facets.h (_Numeric_get): Remove.\n \t(_Numeric_put): Remove.\n\t(num_get::get(short)): Remove.\n\t(num_get::get(int)): Remove.\n\t(num_get::do_get(short)): Remove.\n\t(num_get::do_get(int)): Remove.\n\t* include/bits/istream.tcc (istream::operator>>(short)): Fix as\n\tper DR 118.\n\t(istream::operator>>(int)): Same.\n\n\t* include/bits/locale_facets.h (_Format_cache): Remove.\n\t* include/bits/locale_facets.tcc: Same.\n\t* src/locale.cc: Same.\n\t* src/locale-inst.cc: Same.\n\t* include/bits/ostream.tcc: Same.\n\t* src/ios.cc (ios_base::imbue): Remove here as well.\n\n\t* testsuite/22_locale/num_get.cc: New file.\n\t* testsuite/22_locale/num_get_members_char.cc: New file.\n\t* testsuite/22_locale/num_get_members_wchar_t.cc: New.\n\t* testsuite/22_locale/numpunct_members_wchar_t.cc: New file.\n\t* testsuite/22_locale/num_put.cc: New file.\n\t* testsuite/22_locale/num_put_members_char.cc: New file.\n\t* testsuite/22_locale/num_put_members_wchar_t.cc: New file.\n\t* testsuite/27_io/ostream_inserter_arith.cc: Fix.\n\t* testsuite/27_io/istream_extractor_arith.cc: Fix.\n\nFrom-SVN: r47399", "tree": {"sha": "9a4526a3b94f602e078a1cb0a0ee3d91d20d6e64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a4526a3b94f602e078a1cb0a0ee3d91d20d6e64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec9d6e9f45ea25fd6c5aea6ebb67a51eda432745", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec9d6e9f45ea25fd6c5aea6ebb67a51eda432745", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec9d6e9f45ea25fd6c5aea6ebb67a51eda432745", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec9d6e9f45ea25fd6c5aea6ebb67a51eda432745/comments", "author": null, "committer": null, "parents": [{"sha": "2883d58bf5caa2a6d05f16248bb8607655c3e128", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2883d58bf5caa2a6d05f16248bb8607655c3e128", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2883d58bf5caa2a6d05f16248bb8607655c3e128"}], "stats": {"total": 250, "additions": 250, "deletions": 0}, "files": [{"sha": "e8d2353d32a74fe9516e64c0bbb5b2df448b999c", "filename": "libstdc++-v3/testsuite/22_locale/num_get_members_wchar_t.cc", "status": "added", "additions": 250, "deletions": 0, "changes": 250, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec9d6e9f45ea25fd6c5aea6ebb67a51eda432745/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec9d6e9f45ea25fd6c5aea6ebb67a51eda432745/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_wchar_t.cc?ref=ec9d6e9f45ea25fd6c5aea6ebb67a51eda432745", "patch": "@@ -0,0 +1,250 @@\n+// 2001-11-26 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// XXX This test is not working for non-glibc locale models.\n+// { dg-do run { xfail *-*-* } }\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the numpunct facets\n+  const numpunct<wchar_t>& numpunct_c = use_facet<numpunct<wchar_t> >(loc_c); \n+  const numpunct<wchar_t>& numpunct_de = use_facet<numpunct<wchar_t> >(loc_de); \n+  const numpunct<wchar_t>& numpunct_hk = use_facet<numpunct<wchar_t> >(loc_hk); \n+\n+  // sanity check the data is correct.\n+  const string empty;\n+  char c;\n+\n+  bool b1 = true;\n+  bool b0 = false;\n+  long l1 = 2147483647;\n+  long l2 = -2147483647;\n+  long l;\n+  unsigned long ul1 = 1294967294;\n+  unsigned long ul2 = 0;\n+  unsigned long ul;\n+  double d1 =  1.02345e+308;\n+  double d2 = 3.15e-308;\n+  double d;\n+  long double ld1 = 6.630025e+4;\n+  long double ld2 = 0.0;\n+  long double ld;\n+  void* v;\n+  const void* cv = &ul2;\n+\n+  // cache the num_get facet\n+  wistringstream iss;\n+  iss.imbue(loc_de);\n+  const num_get<wchar_t>& ng = use_facet<num_get<wchar_t> >(iss.getloc()); \n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;\n+  ios_base::iostate err = ios_base::goodbit;\n+\n+  // bool, simple\n+  iss.str(L\"1\");\n+  iterator_type os_it00 = iss.rdbuf();\n+  iterator_type os_it01 = ng.get(os_it00, 0, iss, err, b1);\n+  VERIFY( b1 == true );\n+  VERIFY( err & ios_base::eofbit );\n+\n+  iss.str(L\"0\");\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, b0);\n+  VERIFY( b0 == false );\n+  VERIFY( err & eofbit );\n+\n+  // bool, more twisted examples\n+  iss.imbue(loc_c);\n+  iss.str(L\"true \");\n+  iss.clear();\n+  iss.setf(ios_base::boolalpha);\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, b0);\n+  VERIFY( b0 == true );\n+  VERIFY( err == goodbit );\n+\n+  iss.str(L\"false \");\n+  iss.clear();\n+  iss.setf(ios_base::boolalpha);\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, b1);\n+  VERIFY( b1 == false );\n+  VERIFY( err == goodbit );\n+\n+  // long, in a locale that expects grouping\n+  iss.imbue(loc_hk);\n+  iss.str(L\"2,147,483,647 \");\n+  iss.clear();\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, l);\n+  VERIFY( l == l1 );\n+  VERIFY( err == goodbit );\n+\n+  iss.str(L\"-2,147,483,647++++++\");\n+  iss.clear();\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, l);\n+  VERIFY( l == l2 );\n+  VERIFY( err == goodbit );\n+\n+  // unsigned long, in a locale that does not group\n+  iss.imbue(loc_c);\n+  iss.str(L\"1294967294\");\n+  iss.clear();\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, ul);\n+  VERIFY( ul == ul1);\n+  VERIFY( err == eofbit );\n+\n+  iss.str(L\"0+++++++++++++++++++\");\n+  iss.clear();\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, ul);\n+  VERIFY( ul == ul2);\n+  VERIFY( err == goodbit );\n+\n+  // ... and one that does\n+  iss.imbue(loc_de);\n+  iss.str(L\"1.294.967.294+++++++\");\n+  iss.clear();\n+  iss.width(20);\n+  iss.setf(ios_base::left, ios_base::adjustfield);\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, ul);\n+  VERIFY( ul == ul1 );\n+  VERIFY( err == goodbit );\n+\n+  // double\n+  iss.imbue(loc_c);\n+  iss.str(L\"1.02345e+308++++++++\");\n+  iss.clear();\n+  iss.width(20);\n+  iss.setf(ios_base::left, ios_base::adjustfield);\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, d);\n+  VERIFY( d == d1 );\n+  VERIFY( err == goodbit );\n+\n+  iss.str(L\"+3.15e-308\");\n+  iss.clear();\n+  iss.width(20);\n+  iss.setf(ios_base::right, ios_base::adjustfield);\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, d);\n+  VERIFY( d == d2 );\n+  VERIFY( err == eofbit );\n+\n+  iss.imbue(loc_de);\n+  iss.str(L\"+1,02345e+308\");\n+  iss.clear();\n+  iss.width(20);\n+  iss.setf(ios_base::right, ios_base::adjustfield);\n+  iss.setf(ios_base::scientific, ios_base::floatfield);\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, d);\n+  VERIFY( d == d1 );\n+  VERIFY( err == eofbit );\n+\n+  iss.str(L\"3,15E-308 \");\n+  iss.clear();\n+  iss.width(20);\n+  iss.precision(10);\n+  iss.setf(ios_base::right, ios_base::adjustfield);\n+  iss.setf(ios_base::scientific, ios_base::floatfield);\n+  iss.setf(ios_base::uppercase);\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, d);\n+  VERIFY( d == d2 );\n+  VERIFY( err == goodbit );\n+\n+  // long double\n+  iss.str(L\"6,630025e+4\");\n+  iss.clear();\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, ld);\n+  VERIFY( ld == ld1 );\n+  VERIFY( err == eofbit );\n+\n+  iss.str(L\"0 \");\n+  iss.clear();\n+  iss.precision(0);\n+  iss.setf(ios_base::fixed, ios_base::floatfield);\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, ld);\n+  VERIFY( ld == 0 );\n+  VERIFY( err == goodbit );\n+\n+  // const void\n+  iss.str(L\"0xbffff74c.\");\n+  iss.clear();\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, v);\n+  VERIFY( &v != &cv );\n+  VERIFY( err == goodbit );\n+\n+\n+#ifdef _GLIBCPP_USE_LONG_LONG\n+  long long ll1 = 9223372036854775807;\n+  long long ll2 = -9223372036854775807;\n+  long long ll;\n+\n+  iss.str(L\"9.223.372.036.854.775.807\");\n+  iss.clear();\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, ll);\n+  VERIFY( ll == ll1 );\n+  VERIFY( err == eofbit );\n+#endif\n+}\n+#endif\n+\n+int main()\n+{\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  test01();\n+#endif\n+  return 0;\n+}\n+\n+\n+// Kathleen Hannah, humanitarian, woman, art-thief\n+"}]}