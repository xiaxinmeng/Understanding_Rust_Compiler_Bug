{"sha": "218e1228c941cf0e1669610eaf33fdf5c010c3c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE4ZTEyMjhjOTQxY2YwZTE2Njk2MTBlYWYzM2ZkZjVjMDEwYzNjMA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-01-31T18:41:47Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-01-31T18:41:47Z"}, "message": "re PR fortran/52024 ([OOP] GENERIC operator cannot be resolved)\n\n2012-01-31  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/52024\n        * gfortran.h (gfc_tbp_generic): Store whether the\n        generic is an operator.\n        * decl.c (gfc_match_generic): Set that flag.\n        * resolve.c (check_generic_tbp_ambiguity): Use it in the\n        gfc_compare_interfaces check.\n\n2012-01-31  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/52024\n        * gfortran.dg/typebound_generic_11.f90: New.\n\nFrom-SVN: r183771", "tree": {"sha": "6bff3afd3f9d393e15e10848c5abbfe4346820f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bff3afd3f9d393e15e10848c5abbfe4346820f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/218e1228c941cf0e1669610eaf33fdf5c010c3c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/218e1228c941cf0e1669610eaf33fdf5c010c3c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/218e1228c941cf0e1669610eaf33fdf5c010c3c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/218e1228c941cf0e1669610eaf33fdf5c010c3c0/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0b73eb812e8455701ef3044839f6de2ee895b15b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b73eb812e8455701ef3044839f6de2ee895b15b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b73eb812e8455701ef3044839f6de2ee895b15b"}], "stats": {"total": 84, "additions": 83, "deletions": 1}, "files": [{"sha": "fbbfccf813ce6e67d056355e8fc7d157662d6ca1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/218e1228c941cf0e1669610eaf33fdf5c010c3c0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/218e1228c941cf0e1669610eaf33fdf5c010c3c0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=218e1228c941cf0e1669610eaf33fdf5c010c3c0", "patch": "@@ -1,3 +1,12 @@\n+2012-01-31  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/52024\n+\t* gfortran.h (gfc_tbp_generic): Store whether the\n+\tgeneric is an operator.\n+\t* decl.c (gfc_match_generic): Set that flag.\n+\t* resolve.c (check_generic_tbp_ambiguity): Use it in the\n+\tgfc_compare_interfaces check.\n+\n 2012-01-31  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/52029"}, {"sha": "43c558a55718765cc8aaba780f7bfe3fbbf97e8e", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/218e1228c941cf0e1669610eaf33fdf5c010c3c0/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/218e1228c941cf0e1669610eaf33fdf5c010c3c0/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=218e1228c941cf0e1669610eaf33fdf5c010c3c0", "patch": "@@ -8391,6 +8391,8 @@ gfc_match_generic (void)\n       target->specific_st = target_st;\n       target->specific = NULL;\n       target->next = tb->u.generic;\n+      target->is_operator = ((op_type == INTERFACE_USER_OP)\n+\t\t\t     || (op_type == INTERFACE_INTRINSIC_OP));\n       tb->u.generic = target;\n     }\n   while (gfc_match (\" ,\") == MATCH_YES);"}, {"sha": "757a4e524d8cf9231031cac3f6648eea1bb146b6", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/218e1228c941cf0e1669610eaf33fdf5c010c3c0/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/218e1228c941cf0e1669610eaf33fdf5c010c3c0/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=218e1228c941cf0e1669610eaf33fdf5c010c3c0", "patch": "@@ -1115,6 +1115,7 @@ typedef struct gfc_tbp_generic\n   struct gfc_typebound_proc* specific;\n \n   struct gfc_tbp_generic* next;\n+  bool is_operator;\n }\n gfc_tbp_generic;\n "}, {"sha": "4dcf9b1b07ce998dc63d034e130414a98a39edcb", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/218e1228c941cf0e1669610eaf33fdf5c010c3c0/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/218e1228c941cf0e1669610eaf33fdf5c010c3c0/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=218e1228c941cf0e1669610eaf33fdf5c010c3c0", "patch": "@@ -10950,6 +10950,7 @@ check_generic_tbp_ambiguity (gfc_tbp_generic* t1, gfc_tbp_generic* t2,\n   gcc_assert (t1->specific && t2->specific);\n   gcc_assert (!t1->specific->is_generic);\n   gcc_assert (!t2->specific->is_generic);\n+  gcc_assert (t1->is_operator == t2->is_operator);\n \n   sym1 = t1->specific->u.specific->n.sym;\n   sym2 = t2->specific->u.specific->n.sym;\n@@ -10968,7 +10969,8 @@ check_generic_tbp_ambiguity (gfc_tbp_generic* t1, gfc_tbp_generic* t2,\n     }\n \n   /* Compare the interfaces.  */\n-  if (gfc_compare_interfaces (sym1, sym2, sym2->name, 1, 0, NULL, 0))\n+  if (gfc_compare_interfaces (sym1, sym2, sym2->name, !t1->is_operator, 0,\n+\t\t\t      NULL, 0))\n     {\n       gfc_error (\"'%s' and '%s' for GENERIC '%s' at %L are ambiguous\",\n \t\t sym1->name, sym2->name, generic_name, &where);"}, {"sha": "23a0ef48be6e8d9b12f2d0e8c503778b66806170", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/218e1228c941cf0e1669610eaf33fdf5c010c3c0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/218e1228c941cf0e1669610eaf33fdf5c010c3c0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=218e1228c941cf0e1669610eaf33fdf5c010c3c0", "patch": "@@ -1,3 +1,8 @@\n+2012-01-31  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/52024\n+\t* gfortran.dg/typebound_generic_11.f90: New.\n+\n 2012-01-31  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/52029"}, {"sha": "eb89d0dfe200f629a6c4943db77a5dd4e6f96696", "filename": "gcc/testsuite/gfortran.dg/typebound_generic_11.f90", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/218e1228c941cf0e1669610eaf33fdf5c010c3c0/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_generic_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/218e1228c941cf0e1669610eaf33fdf5c010c3c0/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_generic_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_generic_11.f90?ref=218e1228c941cf0e1669610eaf33fdf5c010c3c0", "patch": "@@ -0,0 +1,63 @@\n+! { dg-do compile }\n+!\n+! PR fortran/52024\n+!\n+! Contributed by Fran Martinez Fadrique\n+!\n+module m_test\n+  type t_test\n+    integer :: i = 0\n+  contains\n+    generic :: operator(==) => t_equal_i, i_equal_t ! OK\n+    procedure, private          :: t_equal_i\n+    procedure, private, pass(t) :: i_equal_t\n+  end type t_test\n+contains\n+  function t_equal_i (t, i) result(res)\n+    class(t_test), intent(in) :: t\n+    integer,       intent(in) :: i\n+    logical :: res\n+\n+    print *, 't_equal_i', t%i, i  \n+    res = ( t%i == i )\n+  end function t_equal_i\n+\n+  function i_equal_t (i, t) result(res)\n+    integer,       intent(in) :: i\n+    class(t_test), intent(in) :: t\n+    logical :: res\n+  \n+    print *, 'i_equal_t', i, t%i\n+    res = ( t%i == i )\n+  end function i_equal_t\n+end module m_test\n+\n+module m_test2\n+  type t2_test\n+    integer :: i = 0\n+  contains\n+    generic :: gen => t2_equal_i, i_equal_t2 ! { dg-error \"'t2_equal_i' and 'i_equal_t2' for GENERIC 'gen' at .1. are ambiguous\" }\n+    procedure, private          :: t2_equal_i\n+    procedure, private, pass(t) :: i_equal_t2\n+  end type t2_test\n+contains\n+  function t2_equal_i (t, i) result(res)\n+    class(t2_test), intent(in) :: t\n+    integer,        intent(in) :: i\n+    logical :: res\n+\n+    print *, 't2_equal_i', t%i, i  \n+    res = ( t%i == i )\n+  end function t2_equal_i\n+\n+  function i_equal_t2 (i, t) result(res)\n+    integer,        intent(in) :: i\n+    class(t2_test), intent(in) :: t\n+    logical :: res\n+  \n+    print *, 'i_equal_t2', i, t%i\n+    res = ( t%i == i )\n+  end function i_equal_t2\n+end module m_test2\n+\n+! { dg-final { cleanup-modules \"m_test m_test2\" } }"}]}