{"sha": "b53da24424c79a824fa74ec3160efe0bbe9627eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUzZGEyNDQyNGM3OWE4MjRmYTc0ZWMzMTYwZWZlMGJiZTk2MjdlYg==", "commit": {"author": {"name": "Adam Nemet", "email": "anemet@caviumnetworks.com", "date": "2009-09-19T20:23:55Z"}, "committer": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2009-09-19T20:23:55Z"}, "message": "mips.opt (mrelax-pic-calls): New option.\n\n\t* config/mips/mips.opt (mrelax-pic-calls): New option.\n\t* config/mips/mips.c (mips_strip_unspec_address): Move it up in\n\tthe file.\n\t(mips_unspec_call): Change \"unspec_call\" expander into this.\n\t(mips_strip_unspec_call): New function.\n\t(mips_got_load): Call mips_unspec_call instead of\n\tgen_unspec_call<mode>.\n\t(mips16_build_call_stub): Fix comment for fp_code.  Adjust call to\n\tMIPS_CALL.\n\t(mips_cfg_in_reorg): New function.\n\t(mips16_lay_out_constants): Use it to decide whether to call\n\tCFG-aware insn splitting.\n\t(r10k_insert_cache_barriers): Move CFG set-up code from here to\n\tmips_reorg.  Move DF set-up code from here ...\n\t(mips_df_reorg): ... to here.  Call r10k_insert_cache_barriers\n\tfrom here.\n\t(mips_reorg): Call mips_df_reorg instead of\n\tr10k_insert_cache_barriers.  Move CFG set-up code here from\n\tr10k_insert_cache_barriers.\n\t(mips_call_expr_from_insn): New function.\n\t(mips_pic_call_symbol_from_set): Likewise.\n\t(mips_find_pic_call_symbol): Likewise.\n\t(mips_annotate_pic_call_expr): Likewise.\n\t(mips_get_pic_call_symbol): Likewise.\n\t(mips_annotate_pic_calls): Likewise.\n\t(mips_override_options): Disable -mrelax-pic-calls unless PIC\n\tcalls are used.\n\t(mips_set_mips16_mode): Disable -mrelax-pic-calls for MIPS16.\n\t* config/mips/mips-protos.h (mips_get_pic_call_symbol): Declare it.\n\t* config/mips/mips.h (MIPS_CALL): Use it to print the .reloc\n\tdirective.\n\t* config/mips/mips.md (UNSPEC_CALL_ATTR): New unspec.\n\t(unspec_call<mode>): Remove it.\n\t(sibcall_internal, sibcall_value_internal,\n\tsibcall_value_multiple_internal, call_internal, call_split,\n\tcall_value_internal, call_value_split,\n\tcall_value_multiple_internal, call_value_multiple_split): Pass\n\tSIZE_OPNO to MIPS_CALL.\n\t(call_internal_direct, call_direct_split,\n\tcall_value_internal_direct, call_value_direct_split): Pass -1 as\n\tSIZE_OPNO to MIPS_CALL.\n\t* configure.ac <mips*-*-*>: Add test for .reloc R_MIPS_JALR.\n\t* configure: Regenerate.\n\t* doc/invoke.texi (Option Summary): Add -mrelax-pic-calls\n\tand -mno-relax-pic-calls.\n\t(MIPS Options): Document -mrelax-pic-calls\n\tand -mno-relax-pic-calls.\n\ntestsuite/\n\t* gcc.target/mips/mips.exp: Add relax-pic-calls\n\tunder -mfoo/-mno-foo options.\n\t(mips-dg-options): Make -mrelax-pic-calls imply -mno-plt, -mabicalls\n\tand -mexplicit-relocs.\n\t* gcc.target/mips/call-1.c: New test.\n\t* gcc.target/mips/call-2.c: New test.\n\t* gcc.target/mips/call-3.c: New test.\n\t* gcc.target/mips/lazy-binding-1.c: Add MIPS-specific dg-options.\n\t* gcc.dg/tree-ssa/loop-1.c: Likewise.\n\nFrom-SVN: r151890", "tree": {"sha": "b83b530090d1d703cf6e9697e8b8bb94870ed94a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b83b530090d1d703cf6e9697e8b8bb94870ed94a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b53da24424c79a824fa74ec3160efe0bbe9627eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b53da24424c79a824fa74ec3160efe0bbe9627eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b53da24424c79a824fa74ec3160efe0bbe9627eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b53da24424c79a824fa74ec3160efe0bbe9627eb/comments", "author": null, "committer": null, "parents": [{"sha": "4172245c93c6b19cf73fec9c119af87a9df63656", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4172245c93c6b19cf73fec9c119af87a9df63656", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4172245c93c6b19cf73fec9c119af87a9df63656"}], "stats": {"total": 574, "additions": 515, "deletions": 59}, "files": [{"sha": "656df2a86cbcff4caed44cfcf1b61909e7200bf6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b53da24424c79a824fa74ec3160efe0bbe9627eb", "patch": "@@ -1,3 +1,53 @@\n+2009-09-19  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* config/mips/mips.opt (mrelax-pic-calls): New option.\n+\t* config/mips/mips.c (mips_strip_unspec_address): Move it up in\n+\tthe file.\n+\t(mips_unspec_call): Change \"unspec_call\" expander into this.\n+\t(mips_strip_unspec_call): New function.\n+\t(mips_got_load): Call mips_unspec_call instead of\n+\tgen_unspec_call<mode>.\n+\t(mips16_build_call_stub): Fix comment for fp_code.  Adjust call to\n+\tMIPS_CALL.\n+\t(mips_cfg_in_reorg): New function.\n+\t(mips16_lay_out_constants): Use it to decide whether to call\n+\tCFG-aware insn splitting.\n+\t(r10k_insert_cache_barriers): Move CFG set-up code from here to\n+\tmips_reorg.  Move DF set-up code from here ...\n+\t(mips_df_reorg): ... to here.  Call r10k_insert_cache_barriers\n+\tfrom here.\n+\t(mips_reorg): Call mips_df_reorg instead of\n+\tr10k_insert_cache_barriers.  Move CFG set-up code here from\n+\tr10k_insert_cache_barriers.\n+\t(mips_call_expr_from_insn): New function.\n+\t(mips_pic_call_symbol_from_set): Likewise.\n+\t(mips_find_pic_call_symbol): Likewise.\n+\t(mips_annotate_pic_call_expr): Likewise.\n+\t(mips_get_pic_call_symbol): Likewise.\n+\t(mips_annotate_pic_calls): Likewise.\n+\t(mips_override_options): Disable -mrelax-pic-calls unless PIC\n+\tcalls are used.\n+\t(mips_set_mips16_mode): Disable -mrelax-pic-calls for MIPS16.\n+\t* config/mips/mips-protos.h (mips_get_pic_call_symbol): Declare it.\n+\t* config/mips/mips.h (MIPS_CALL): Use it to print the .reloc\n+\tdirective.\n+\t* config/mips/mips.md (UNSPEC_CALL_ATTR): New unspec.\n+\t(unspec_call<mode>): Remove it.\n+\t(sibcall_internal, sibcall_value_internal,\n+\tsibcall_value_multiple_internal, call_internal, call_split,\n+\tcall_value_internal, call_value_split,\n+\tcall_value_multiple_internal, call_value_multiple_split): Pass\n+\tSIZE_OPNO to MIPS_CALL.\n+\t(call_internal_direct, call_direct_split,\n+\tcall_value_internal_direct, call_value_direct_split): Pass -1 as\n+\tSIZE_OPNO to MIPS_CALL.\n+\t* configure.ac <mips*-*-*>: Add test for .reloc R_MIPS_JALR.\n+\t* configure: Regenerate.\n+\t* doc/invoke.texi (Option Summary): Add -mrelax-pic-calls\n+\tand -mno-relax-pic-calls.\n+\t(MIPS Options): Document -mrelax-pic-calls\n+\tand -mno-relax-pic-calls.\n+\n 2009-09-19  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \tPR bootstrap/35619"}, {"sha": "abcc2d421ef85ffd76fdfb6dcd0407f919cf7b0d", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=b53da24424c79a824fa74ec3160efe0bbe9627eb", "patch": "@@ -233,6 +233,7 @@ extern void mips_expand_conditional_trap (rtx);\n extern bool mips_use_pic_fn_addr_reg_p (const_rtx);\n extern rtx mips_expand_call (enum mips_call_type, rtx, rtx, rtx, rtx, bool);\n extern void mips_split_call (rtx, rtx);\n+extern bool mips_get_pic_call_symbol (rtx *, int);\n extern void mips_expand_fcc_reload (rtx, rtx, rtx);\n extern void mips_set_return_address (rtx, rtx);\n extern bool mips_expand_block_move (rtx, rtx, rtx);"}, {"sha": "2f0c56d29c3149b22fa7897e52dcdede6b6357b5", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 254, "deletions": 32, "changes": 286, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=b53da24424c79a824fa74ec3160efe0bbe9627eb", "patch": "@@ -1125,6 +1125,8 @@ static const struct mips_rtx_cost_data mips_rtx_cost_data[PROCESSOR_MAX] = {\n   }\n };\n \f\n+static rtx mips_find_pic_call_symbol (rtx, rtx);\n+\f\n /* This hash table keeps track of implicit \"mips16\" and \"nomips16\" attributes\n    for -mflip_mips16.  It maps decl names onto a boolean mode setting.  */\n struct GTY (())  mflip_mips16_entry {\n@@ -2509,6 +2511,20 @@ mips_unspec_address (rtx address, enum mips_symbol_type symbol_type)\n   return mips_unspec_address_offset (base, offset, symbol_type);\n }\n \n+/* If OP is an UNSPEC address, return the address to which it refers,\n+   otherwise return OP itself.  */\n+\n+static rtx\n+mips_strip_unspec_address (rtx op)\n+{\n+  rtx base, offset;\n+\n+  split_const (op, &base, &offset);\n+  if (UNSPEC_ADDRESS_P (base))\n+    op = plus_constant (UNSPEC_ADDRESS (base), INTVAL (offset));\n+  return op;\n+}\n+\n /* If mips_unspec_address (ADDR, SYMBOL_TYPE) is a 32-bit value, add the\n    high part to BASE and return the result.  Just return BASE otherwise.\n    TEMP is as for mips_force_temporary.\n@@ -2600,6 +2616,28 @@ mips_pic_base_register (rtx temp)\n   return temp;\n }\n \n+/* Return the RHS of a load_call<mode> insn.  */\n+\n+static rtx\n+mips_unspec_call (rtx reg, rtx symbol)\n+{\n+  rtvec vec;\n+\n+  vec = gen_rtvec (3, reg, symbol, gen_rtx_REG (SImode, GOT_VERSION_REGNUM));\n+  return gen_rtx_UNSPEC (Pmode, vec, UNSPEC_LOAD_CALL);\n+}\n+\n+/* If SRC is the RHS of a load_call<mode> insn, return the underlying symbol\n+   reference.  Return NULL_RTX otherwise.  */\n+\n+static rtx\n+mips_strip_unspec_call (rtx src)\n+{\n+  if (GET_CODE (src) == UNSPEC && XINT (src, 1) == UNSPEC_LOAD_CALL)\n+    return mips_strip_unspec_address (XVECEXP (src, 0, 1));\n+  return NULL_RTX;\n+}\n+\n /* Create and return a GOT reference of type TYPE for address ADDR.\n    TEMP, if nonnull, is a scratch Pmode base register.  */\n \n@@ -2619,9 +2657,7 @@ mips_got_load (rtx temp, rtx addr, enum mips_symbol_type type)\n   lo_sum_symbol = mips_unspec_address (addr, type);\n \n   if (type == SYMBOL_GOTOFF_CALL)\n-    return (Pmode == SImode\n-\t    ? gen_unspec_callsi (high, lo_sum_symbol)\n-\t    : gen_unspec_calldi (high, lo_sum_symbol));\n+    return mips_unspec_call (high, lo_sum_symbol);\n   else\n     return (Pmode == SImode\n \t    ? gen_unspec_gotsi (high, lo_sum_symbol)\n@@ -6010,7 +6046,7 @@ mips16_copy_fpr_return_value (void)\n    RETVAL is the location of the return value, or null if this is\n    a \"call\" rather than a \"call_value\".  ARGS_SIZE is the size of the\n    arguments and FP_CODE is the code built by mips_function_arg;\n-   see the comment above CUMULATIVE_ARGS for details.\n+   see the comment before the fp_code field in CUMULATIVE_ARGS for details.\n \n    There are three alternatives:\n \n@@ -6208,7 +6244,7 @@ mips16_build_call_stub (rtx retval, rtx *fn_ptr, rtx args_size, int fp_code)\n \t     $18 is usually a call-saved register.  */\n \t  fprintf (asm_out_file, \"\\tmove\\t%s,%s\\n\",\n \t\t   reg_names[GP_REG_FIRST + 18], reg_names[GP_REG_FIRST + 31]);\n-\t  output_asm_insn (MIPS_CALL (\"jal\", &fn, 0), &fn);\n+\t  output_asm_insn (MIPS_CALL (\"jal\", &fn, 0, -1), &fn);\n \n \t  /* Move the result from floating-point registers to\n \t     general registers.  */\n@@ -7094,20 +7130,6 @@ mips_init_relocs (void)\n   mips_lo_relocs[SYMBOL_HALF] = \"%half(\";\n }\n \n-/* If OP is an UNSPEC address, return the address to which it refers,\n-   otherwise return OP itself.  */\n-\n-static rtx\n-mips_strip_unspec_address (rtx op)\n-{\n-  rtx base, offset;\n-\n-  split_const (op, &base, &offset);\n-  if (UNSPEC_ADDRESS_P (base))\n-    op = plus_constant (UNSPEC_ADDRESS (base), INTVAL (offset));\n-  return op;\n-}\n-\n /* Print symbolic operand OP, which is part of a HIGH or LO_SUM\n    in context CONTEXT.  RELOCS is the array of relocations to use.  */\n \n@@ -13435,6 +13457,15 @@ mips16_rewrite_pool_refs (rtx *x, void *data)\n   return GET_CODE (*x) == CONST ? -1 : 0;\n }\n \n+/* Return whether CFG is used in mips_reorg.  */\n+\n+static bool\n+mips_cfg_in_reorg (void)\n+{\n+  return (mips_r10k_cache_barrier != R10K_CACHE_BARRIER_NONE\n+\t  || TARGET_RELAX_PIC_CALLS);\n+}\n+\n /* Build MIPS16 constant pools.  */\n \n static void\n@@ -13447,7 +13478,10 @@ mips16_lay_out_constants (void)\n   if (!TARGET_MIPS16_PCREL_LOADS)\n     return;\n \n-  split_all_insns_noflow ();\n+  if (mips_cfg_in_reorg ())\n+    split_all_insns ();\n+  else\n+    split_all_insns_noflow ();\n   barrier = 0;\n   memset (&pool, 0, sizeof (pool));\n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n@@ -13783,14 +13817,6 @@ r10k_insert_cache_barriers (void)\n       return;\n     }\n \n-  /* Restore the BLOCK_FOR_INSN pointers, which are needed by DF.  */\n-  compute_bb_for_insn ();\n-\n-  /* Create def-use chains.  */\n-  df_set_flags (DF_EQ_NOTES);\n-  df_chain_add_problem (DF_UD_CHAIN);\n-  df_analyze ();\n-\n   /* Calculate dominators.  */\n   calculate_dominance_info (CDI_DOMINATORS);\n \n@@ -13869,10 +13895,171 @@ r10k_insert_cache_barriers (void)\n   sbitmap_free (protected_bbs);\n \n   free_dominance_info (CDI_DOMINATORS);\n+}\n+\f\n+/* If INSN is a call, return the underlying CALL expr.  Return NULL_RTX\n+   otherwise.  */\n \n-  df_finish_pass (false);\n+static rtx\n+mips_call_expr_from_insn (rtx insn)\n+{\n+  rtx x;\n+\n+  if (!CALL_P (insn))\n+    return NULL_RTX;\n \n-  free_bb_for_insn ();\n+  x = PATTERN (insn);\n+  if (GET_CODE (x) == PARALLEL)\n+    x = XVECEXP (x, 0, 0);\n+  if (GET_CODE (x) == SET)\n+    x = XEXP (x, 1);\n+\n+  gcc_assert (GET_CODE (x) == CALL);\n+  return x;\n+}\n+\n+/* REG is set in DEF.  See if the definition is one of the ways we load a\n+   register with a symbol address for a mips_use_pic_fn_addr_reg_p call.  If\n+   it is return the symbol reference of the function, otherwise return\n+   NULL_RTX.  */\n+\n+static rtx\n+mips_pic_call_symbol_from_set (df_ref def, rtx reg)\n+{\n+  rtx def_insn, set;\n+\n+  if (DF_REF_IS_ARTIFICIAL (def))\n+    return NULL_RTX;\n+\n+  def_insn = DF_REF_INSN (def);\n+  set = single_set (def_insn);\n+  if (set && rtx_equal_p (SET_DEST (set), reg))\n+    {\n+      rtx note, src, symbol;\n+\n+      /* First, look at REG_EQUAL/EQUIV notes.  */\n+      note = find_reg_equal_equiv_note (def_insn);\n+      if (note && GET_CODE (XEXP (note, 0)) == SYMBOL_REF)\n+\treturn XEXP (note, 0);\n+\n+      /* For %call16 references we don't have REG_EQUAL.  */\n+      src = SET_SRC (set);\n+      symbol = mips_strip_unspec_call (src);\n+      if (symbol)\n+\t{\n+\t  gcc_assert (GET_CODE (symbol) == SYMBOL_REF);\n+\t  return symbol;\n+\t}\n+\n+      /* Follow simple register copies.  */\n+      if (REG_P (src))\n+\treturn mips_find_pic_call_symbol (def_insn, src);\n+    }\n+\n+  return NULL_RTX;\n+}\n+\n+/* Find the definition of the use of REG in INSN.  See if the definition is\n+   one of the ways we load a register with a symbol address for a\n+   mips_use_pic_fn_addr_reg_p call.  If it is return the symbol reference of\n+   the function, otherwise return NULL_RTX.  */\n+\n+static rtx\n+mips_find_pic_call_symbol (rtx insn, rtx reg)\n+{\n+  df_ref use;\n+  struct df_link *defs;\n+  rtx symbol;\n+\n+  use = df_find_use (insn, regno_reg_rtx[REGNO (reg)]);\n+  if (!use)\n+    return NULL_RTX;\n+  defs = DF_REF_CHAIN (use);\n+  if (!defs)\n+    return NULL_RTX;\n+  symbol = mips_pic_call_symbol_from_set (defs->ref, reg);\n+  if (!symbol)\n+    return NULL_RTX;\n+\n+  /* If we have more than one definition, they need to be identical.  */\n+  for (defs = defs->next; defs; defs = defs->next)\n+    {\n+      rtx other;\n+\n+      other = mips_pic_call_symbol_from_set (defs->ref, reg);\n+      if (!rtx_equal_p (symbol, other))\n+\treturn NULL_RTX;\n+    }\n+\n+  return symbol;\n+}\n+\n+/* Replace the args_size operand of the call expression CALL with the\n+   call-attribute UNSPEC and fill in SYMBOL as the function symbol.  */\n+\n+static void\n+mips_annotate_pic_call_expr (rtx call, rtx symbol)\n+{\n+  rtx args_size;\n+\n+  args_size = XEXP (call, 1);\n+  XEXP (call, 1) = gen_rtx_UNSPEC (GET_MODE (args_size),\n+\t\t\t\t   gen_rtvec (2, args_size, symbol),\n+\t\t\t\t   UNSPEC_CALL_ATTR);\n+}\n+\n+/* OPERANDS[ARGS_SIZE_OPNO] is the arg_size operand of a CALL expression.  See\n+   if instead of the arg_size argument it contains the call attributes.  If\n+   yes return true along with setting OPERANDS[ARGS_SIZE_OPNO] to the function\n+   symbol from the call attributes.  Also return false if ARGS_SIZE_OPNO is\n+   -1.  */\n+\n+bool\n+mips_get_pic_call_symbol (rtx *operands, int args_size_opno)\n+{\n+  rtx args_size, symbol;\n+\n+  if (!TARGET_RELAX_PIC_CALLS || args_size_opno == -1)\n+    return false;\n+\n+  args_size = operands[args_size_opno];\n+  if (GET_CODE (args_size) != UNSPEC)\n+    return false;\n+  gcc_assert (XINT (args_size, 1) == UNSPEC_CALL_ATTR);\n+\n+  symbol = XVECEXP (args_size, 0, 1);\n+  gcc_assert (GET_CODE (symbol) == SYMBOL_REF);\n+\n+  operands[args_size_opno] = symbol;\n+  return true;\n+}\n+\n+/* Use DF to annotate PIC indirect calls with the function symbol they\n+   dispatch to.  */\n+\n+static void\n+mips_annotate_pic_calls (void)\n+{\n+  basic_block bb;\n+  rtx insn;\n+\n+  FOR_EACH_BB (bb)\n+    FOR_BB_INSNS (bb, insn)\n+    {\n+      rtx call, reg, symbol;\n+\n+      call = mips_call_expr_from_insn (insn);\n+      if (!call)\n+\tcontinue;\n+      gcc_assert (MEM_P (XEXP (call, 0)));\n+      reg = XEXP (XEXP (call, 0), 0);\n+      if (!REG_P (reg))\n+\tcontinue;\n+\n+      symbol = mips_find_pic_call_symbol (insn, reg);\n+      if (symbol)\n+\tmips_annotate_pic_call_expr (call, symbol);\n+    }\n }\n \f\n /* A temporary variable used by for_each_rtx callbacks, etc.  */\n@@ -14586,14 +14773,42 @@ mips_expand_ghost_gp_insns (void)\n   return true;\n }\n \n+/* Subroutine of mips_reorg to manage passes that require DF.  */\n+\n+static void\n+mips_df_reorg (void)\n+{\n+  /* Create def-use chains.  */\n+  df_set_flags (DF_EQ_NOTES);\n+  df_chain_add_problem (DF_UD_CHAIN);\n+  df_analyze ();\n+\n+  if (TARGET_RELAX_PIC_CALLS)\n+    mips_annotate_pic_calls ();\n+\n+  if (mips_r10k_cache_barrier != R10K_CACHE_BARRIER_NONE)\n+    r10k_insert_cache_barriers ();\n+\n+  df_finish_pass (false);\n+}\n+\n /* Implement TARGET_MACHINE_DEPENDENT_REORG.  */\n \n static void\n mips_reorg (void)\n {\n+  /* Restore the BLOCK_FOR_INSN pointers, which are needed by DF.  Also during\n+     insn splitting in mips16_lay_out_constants, DF insn info is only kept up\n+     to date if the CFG is available.  */\n+  if (mips_cfg_in_reorg ())\n+    compute_bb_for_insn ();\n   mips16_lay_out_constants ();\n-  if (mips_r10k_cache_barrier != R10K_CACHE_BARRIER_NONE)\n-    r10k_insert_cache_barriers ();\n+  if (mips_cfg_in_reorg ())\n+    {\n+      mips_df_reorg ();\n+      free_bb_for_insn ();\n+    }\n+\n   if (optimize > 0 && flag_delayed_branch)\n     dbr_schedule (get_insns ());\n   mips_reorg_process_insns ();\n@@ -14798,6 +15013,9 @@ mips_set_mips16_mode (int mips16_p)\n \n       targetm.const_anchor = 0;\n \n+      /* MIPS16 has no BAL instruction.  */\n+      target_flags &= ~MASK_RELAX_PIC_CALLS;\n+\n       if (flag_pic && !TARGET_OLDABI)\n \tsorry (\"MIPS16 PIC for ABIs other than o32 and o64\");\n \n@@ -15389,6 +15607,10 @@ mips_override_options (void)\n       target_flags &= ~MASK_SYNCI;\n     }\n \n+  /* Only optimize PIC indirect calls if they are actually required.  */\n+  if (!TARGET_USE_GOT || !TARGET_EXPLICIT_RELOCS)\n+    target_flags &= ~MASK_RELAX_PIC_CALLS;\n+\n   /* Save base state of options.  */\n   mips_base_target_flags = target_flags;\n   mips_base_schedule_insns = flag_schedule_insns;"}, {"sha": "71b9b1beca03a50663b6f05c51e6ac5575ef4859", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=b53da24424c79a824fa74ec3160efe0bbe9627eb", "patch": "@@ -2686,20 +2686,27 @@ typedef struct mips_args {\n    : INSN)\n \n /* Return the asm template for a call.  INSN is the instruction's mnemonic\n-   (\"j\" or \"jal\"), OPERANDS are its operands, and OPNO is the operand number\n-   of the target.\n+   (\"j\" or \"jal\"), OPERANDS are its operands, TARGET_OPNO is the operand\n+   number of the target.  SIZE_OPNO is the operand number of the argument size\n+   operand that can optionally hold the call attributes.  If SIZE_OPNO is not\n+   -1 and the call is indirect, use the function symbol from the call\n+   attributes to attach a R_MIPS_JALR relocation to the call.\n \n    When generating GOT code without explicit relocation operators,\n    all calls should use assembly macros.  Otherwise, all indirect\n    calls should use \"jr\" or \"jalr\"; we will arrange to restore $gp\n    afterwards if necessary.  Finally, we can only generate direct\n    calls for -mabicalls by temporarily switching to non-PIC mode.  */\n-#define MIPS_CALL(INSN, OPERANDS, OPNO)\t\t\t\t\\\n+#define MIPS_CALL(INSN, OPERANDS, TARGET_OPNO, SIZE_OPNO)\t\\\n   (TARGET_USE_GOT && !TARGET_EXPLICIT_RELOCS\t\t\t\\\n-   ? \"%*\" INSN \"\\t%\" #OPNO \"%/\"\t\t\t\t\t\\\n-   : REG_P (OPERANDS[OPNO])\t\t\t\t\t\\\n-   ? \"%*\" INSN \"r\\t%\" #OPNO \"%/\"\t\t\t\t\\\n-   : MIPS_ABSOLUTE_JUMP (\"%*\" INSN \"\\t%\" #OPNO \"%/\"))\n+   ? \"%*\" INSN \"\\t%\" #TARGET_OPNO \"%/\"\t\t\t\t\\\n+   : (REG_P (OPERANDS[TARGET_OPNO])\t\t\t\t\\\n+      && mips_get_pic_call_symbol (OPERANDS, SIZE_OPNO))\t\\\n+   ? (\"%*.reloc\\t1f,R_MIPS_JALR,%\" #SIZE_OPNO \"\\n\"\t\t\\\n+      \"1:\\t\" INSN \"r\\t%\" #TARGET_OPNO \"%/\")\t\t\t\\\n+   : REG_P (OPERANDS[TARGET_OPNO])\t\t\t\t\\\n+   ? \"%*\" INSN \"r\\t%\" #TARGET_OPNO \"%/\"\t\t\t\t\\\n+   : MIPS_ABSOLUTE_JUMP (\"%*\" INSN \"\\t%\" #TARGET_OPNO \"%/\"))\n \f\n /* Control the assembler format that we output.  */\n "}, {"sha": "19f3ffc7a06605b344b9a6b8df964ba671abe1e6", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=b53da24424c79a824fa74ec3160efe0bbe9627eb", "patch": "@@ -75,6 +75,9 @@\n    (UNSPEC_EHB\t\t\t52)\n    (UNSPEC_RDPGPR\t\t53)\n    (UNSPEC_COP0\t\t\t54)\n+   ;; Used in a call expression in place of args_size.  It's present for PIC\n+   ;; indirect calls where it contains args_size and the function symbol.\n+   (UNSPEC_CALL_ATTR\t\t55)\n    \n    (UNSPEC_ADDRESS_FIRST\t100)\n \n@@ -5981,12 +5984,6 @@\n ;;\tThe register is therefore not a valid register_operand\n ;;\tand cannot be moved to or from other registers.\n \n-;; Convenience expander that generates the rhs of a load_call<mode> insn.\n-(define_expand \"unspec_call<mode>\"\n-  [(unspec:P [(match_operand:P 0)\n-\t      (match_operand:P 1)\n-\t      (reg:SI GOT_VERSION_REGNUM)] UNSPEC_LOAD_CALL)])\n-\n (define_insn \"load_call<mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=d\")\n \t(unspec:P [(match_operand:P 1 \"register_operand\" \"d\")\n@@ -6040,7 +6037,7 @@\n   [(call (mem:SI (match_operand 0 \"call_insn_operand\" \"j,S\"))\n \t (match_operand 1 \"\" \"\"))]\n   \"TARGET_SIBCALLS && SIBLING_CALL_P (insn)\"\n-  { return MIPS_CALL (\"j\", operands, 0); }\n+  { return MIPS_CALL (\"j\", operands, 0, 1); }\n   [(set_attr \"type\" \"call\")])\n \n (define_expand \"sibcall_value\"\n@@ -6060,7 +6057,7 @@\n         (call (mem:SI (match_operand 1 \"call_insn_operand\" \"j,S\"))\n               (match_operand 2 \"\" \"\")))]\n   \"TARGET_SIBCALLS && SIBLING_CALL_P (insn)\"\n-  { return MIPS_CALL (\"j\", operands, 1); }\n+  { return MIPS_CALL (\"j\", operands, 1, 2); }\n   [(set_attr \"type\" \"call\")])\n \n (define_insn \"sibcall_value_multiple_internal\"\n@@ -6071,7 +6068,7 @@\n \t(call (mem:SI (match_dup 1))\n \t      (match_dup 2)))]\n   \"TARGET_SIBCALLS && SIBLING_CALL_P (insn)\"\n-  { return MIPS_CALL (\"j\", operands, 1); }\n+  { return MIPS_CALL (\"j\", operands, 1, 2); }\n   [(set_attr \"type\" \"call\")])\n \n (define_expand \"call\"\n@@ -6128,7 +6125,7 @@\n \t (match_operand 1 \"\" \"\"))\n    (clobber (reg:SI 31))]\n   \"\"\n-  { return TARGET_SPLIT_CALLS ? \"#\" : MIPS_CALL (\"jal\", operands, 0); }\n+  { return TARGET_SPLIT_CALLS ? \"#\" : MIPS_CALL (\"jal\", operands, 0, 1); }\n   \"reload_completed && TARGET_SPLIT_CALLS && (operands[2] = insn)\"\n   [(const_int 0)]\n {\n@@ -6143,7 +6140,7 @@\n    (clobber (reg:SI 31))\n    (clobber (reg:SI 28))]\n   \"TARGET_SPLIT_CALLS\"\n-  { return MIPS_CALL (\"jal\", operands, 0); }\n+  { return MIPS_CALL (\"jal\", operands, 0, 1); }\n   [(set_attr \"type\" \"call\")])\n \n ;; A pattern for calls that must be made directly.  It is used for\n@@ -6156,7 +6153,7 @@\n    (const_int 1)\n    (clobber (reg:SI 31))]\n   \"\"\n-  { return TARGET_SPLIT_CALLS ? \"#\" : MIPS_CALL (\"jal\", operands, 0); }\n+  { return TARGET_SPLIT_CALLS ? \"#\" : MIPS_CALL (\"jal\", operands, 0, -1); }\n   \"reload_completed && TARGET_SPLIT_CALLS && (operands[2] = insn)\"\n   [(const_int 0)]\n {\n@@ -6173,7 +6170,7 @@\n    (clobber (reg:SI 31))\n    (clobber (reg:SI 28))]\n   \"TARGET_SPLIT_CALLS\"\n-  { return MIPS_CALL (\"jal\", operands, 0); }\n+  { return MIPS_CALL (\"jal\", operands, 0, -1); }\n   [(set_attr \"type\" \"call\")])\n \n (define_expand \"call_value\"\n@@ -6195,7 +6192,7 @@\n               (match_operand 2 \"\" \"\")))\n    (clobber (reg:SI 31))]\n   \"\"\n-  { return TARGET_SPLIT_CALLS ? \"#\" : MIPS_CALL (\"jal\", operands, 1); }\n+  { return TARGET_SPLIT_CALLS ? \"#\" : MIPS_CALL (\"jal\", operands, 1, 2); }\n   \"reload_completed && TARGET_SPLIT_CALLS && (operands[3] = insn)\"\n   [(const_int 0)]\n {\n@@ -6213,7 +6210,7 @@\n    (clobber (reg:SI 31))\n    (clobber (reg:SI 28))]\n   \"TARGET_SPLIT_CALLS\"\n-  { return MIPS_CALL (\"jal\", operands, 1); }\n+  { return MIPS_CALL (\"jal\", operands, 1, 2); }\n   [(set_attr \"type\" \"call\")])\n \n ;; See call_internal_direct.\n@@ -6224,7 +6221,7 @@\n    (const_int 1)\n    (clobber (reg:SI 31))]\n   \"\"\n-  { return TARGET_SPLIT_CALLS ? \"#\" : MIPS_CALL (\"jal\", operands, 1); }\n+  { return TARGET_SPLIT_CALLS ? \"#\" : MIPS_CALL (\"jal\", operands, 1, -1); }\n   \"reload_completed && TARGET_SPLIT_CALLS && (operands[3] = insn)\"\n   [(const_int 0)]\n {\n@@ -6243,7 +6240,7 @@\n    (clobber (reg:SI 31))\n    (clobber (reg:SI 28))]\n   \"TARGET_SPLIT_CALLS\"\n-  { return MIPS_CALL (\"jal\", operands, 1); }\n+  { return MIPS_CALL (\"jal\", operands, 1, -1); }\n   [(set_attr \"type\" \"call\")])\n \n ;; See comment for call_internal.\n@@ -6256,7 +6253,7 @@\n \t      (match_dup 2)))\n    (clobber (reg:SI 31))]\n   \"\"\n-  { return TARGET_SPLIT_CALLS ? \"#\" : MIPS_CALL (\"jal\", operands, 1); }\n+  { return TARGET_SPLIT_CALLS ? \"#\" : MIPS_CALL (\"jal\", operands, 1, 2); }\n   \"reload_completed && TARGET_SPLIT_CALLS && (operands[4] = insn)\"\n   [(const_int 0)]\n {\n@@ -6277,7 +6274,7 @@\n    (clobber (reg:SI 31))\n    (clobber (reg:SI 28))]\n   \"TARGET_SPLIT_CALLS\"\n-  { return MIPS_CALL (\"jal\", operands, 1); }\n+  { return MIPS_CALL (\"jal\", operands, 1, 2); }\n   [(set_attr \"type\" \"call\")])\n \n ;; Call subroutine returning any type."}, {"sha": "8462e4646d6c5240ff7ade255655624ca0000db6", "filename": "gcc/config/mips/mips.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2Fconfig%2Fmips%2Fmips.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2Fconfig%2Fmips%2Fmips.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.opt?ref=b53da24424c79a824fa74ec3160efe0bbe9627eb", "patch": "@@ -244,6 +244,10 @@ mr10k-cache-barrier=\n Target Joined RejectNegative\n -mr10k-cache-barrier=SETTING\tSpecify when r10k cache barriers should be inserted\n \n+mrelax-pic-calls\n+Target Report Mask(RELAX_PIC_CALLS)\n+Try to allow the linker to turn PIC calls into direct calls\n+\n mshared\n Target Report Var(TARGET_SHARED) Init(1)\n When generating -mabicalls code, make the code suitable for use in shared libraries"}, {"sha": "2369ba7f83e6a2b76ac78bb78606e8418bb6a7b6", "filename": "gcc/configure", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=b53da24424c79a824fa74ec3160efe0bbe9627eb", "patch": "@@ -23687,6 +23687,44 @@ if test $gcc_cv_as_mips_dtprelword = yes; then\n $as_echo \"#define HAVE_AS_DTPRELWORD 1\" >>confdefs.h\n \n fi\n+\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler and linker for explicit JALR relocation\" >&5\n+$as_echo_n \"checking assembler and linker for explicit JALR relocation... \" >&6; }\n+    gcc_cv_as_ld_jalr_reloc=no\n+    if test $gcc_cv_as_mips_explicit_relocs = yes; then\n+      if test $in_tree_ld = yes ; then\n+        if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 20 -o \"$gcc_cv_gld_major_version\" -gt 2 \\\n+           && test $in_tree_ld_is_elf = yes; then\n+          gcc_cv_as_ld_jalr_reloc=yes\n+        fi\n+      elif test x$gcc_cv_as != x -a x$gcc_cv_ld != x -a x$gcc_cv_objdump != x; then\n+        echo '\t.ent x' > conftest.s\n+        echo 'x:\tld $2,%got_disp(y)($3)' >> conftest.s\n+        echo '\tld $25,%call16(y)($28)' >> conftest.s\n+        echo '\t.reloc\t1f,R_MIPS_JALR,y' >> conftest.s\n+        echo '1:\tjalr $25' >> conftest.s\n+        echo '\t.reloc\t1f,R_MIPS_JALR,x' >> conftest.s\n+        echo '1:\tjalr $25' >> conftest.s\n+        echo '\t.end x' >> conftest.s\n+        if $gcc_cv_as -o conftest.o conftest.s >/dev/null 2>&5 \\\n+           && $gcc_cv_ld -shared -o conftest.so conftest.o >/dev/null 2>&5; then\n+\t  if $gcc_cv_objdump -d conftest.so | grep -q jalr \\\n+\t     && $gcc_cv_objdump -d conftest.so | grep -q \"bal.*<x>\"; then\n+            gcc_cv_as_ld_jalr_reloc=yes\n+\t  fi\n+        fi\n+        rm -f conftest.*\n+      fi\n+    fi\n+    if test $gcc_cv_as_ld_jalr_reloc = yes; then\n+      if test x$target_cpu_default = x; then\n+        target_cpu_default=MASK_RELAX_PIC_CALLS\n+      else\n+        target_cpu_default=\"($target_cpu_default)|MASK_RELAX_PIC_CALLS\"\n+      fi\n+    fi\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_ld_jalr_reloc\" >&5\n+$as_echo \"$gcc_cv_as_ld_jalr_reloc\" >&6; }\n     ;;\n esac\n "}, {"sha": "d1eed729e59a1797724d7fc96e874cc9db8dbb6a", "filename": "gcc/configure.ac", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=b53da24424c79a824fa74ec3160efe0bbe9627eb", "patch": "@@ -3279,6 +3279,42 @@ x:\n \t.dtprelword x+0x8000],,\n       [AC_DEFINE(HAVE_AS_DTPRELWORD, 1,\n \t  [Define if your assembler supports .dtprelword.])])\n+\n+    AC_MSG_CHECKING(assembler and linker for explicit JALR relocation)\n+    gcc_cv_as_ld_jalr_reloc=no\n+    if test $gcc_cv_as_mips_explicit_relocs = yes; then\n+      if test $in_tree_ld = yes ; then\n+        if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 20 -o \"$gcc_cv_gld_major_version\" -gt 2 \\\n+           && test $in_tree_ld_is_elf = yes; then\n+          gcc_cv_as_ld_jalr_reloc=yes\n+        fi\n+      elif test x$gcc_cv_as != x -a x$gcc_cv_ld != x -a x$gcc_cv_objdump != x; then\n+        echo '\t.ent x' > conftest.s\n+        echo 'x:\tld $2,%got_disp(y)($3)' >> conftest.s\n+        echo '\tld $25,%call16(y)($28)' >> conftest.s\n+        echo '\t.reloc\t1f,R_MIPS_JALR,y' >> conftest.s\n+        echo '1:\tjalr $25' >> conftest.s\n+        echo '\t.reloc\t1f,R_MIPS_JALR,x' >> conftest.s\n+        echo '1:\tjalr $25' >> conftest.s\n+        echo '\t.end x' >> conftest.s\n+        if $gcc_cv_as -o conftest.o conftest.s >/dev/null 2>&AS_MESSAGE_LOG_FD \\\n+           && $gcc_cv_ld -shared -o conftest.so conftest.o >/dev/null 2>&AS_MESSAGE_LOG_FD; then\n+\t  if $gcc_cv_objdump -d conftest.so | grep -q jalr \\\n+\t     && $gcc_cv_objdump -d conftest.so | grep -q \"bal.*<x>\"; then\n+            gcc_cv_as_ld_jalr_reloc=yes\n+\t  fi\n+        fi\n+        rm -f conftest.*\n+      fi\n+    fi\n+    if test $gcc_cv_as_ld_jalr_reloc = yes; then\n+      if test x$target_cpu_default = x; then\n+        target_cpu_default=MASK_RELAX_PIC_CALLS\n+      else\n+        target_cpu_default=\"($target_cpu_default)|MASK_RELAX_PIC_CALLS\"\n+      fi\n+    fi\n+    AC_MSG_RESULT($gcc_cv_as_ld_jalr_reloc)\n     ;;\n esac\n "}, {"sha": "5a547e2aaa510cb75286286f1dffcb063914614e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b53da24424c79a824fa74ec3160efe0bbe9627eb", "patch": "@@ -705,7 +705,8 @@ Objective-C and Objective-C++ Dialects}.\n -mflush-func=@var{func}  -mno-flush-func @gol\n -mbranch-cost=@var{num}  -mbranch-likely  -mno-branch-likely @gol\n -mfp-exceptions -mno-fp-exceptions @gol\n--mvr4130-align -mno-vr4130-align -msynci -mno-synci}\n+-mvr4130-align -mno-vr4130-align -msynci -mno-synci @gol\n+-mrelax-pic-calls -mno-relax-pic-calls}\n \n @emph{MMIX Options}\n @gccoptlist{-mlibfuncs  -mno-libfuncs  -mepsilon  -mno-epsilon  -mabi=gnu @gol\n@@ -13906,6 +13907,20 @@ When compiling code for single processor systems, it is generally safe\n to use @code{synci}.  However, on many multi-core (SMP) systems, it\n will not invalidate the instruction caches on all cores and may lead\n to undefined behavior.\n+\n+@item -mrelax-pic-calls\n+@itemx -mno-relax-pic-calls\n+@opindex mrelax-pic-calls\n+Try to turn PIC calls that are normally dispatched via register\n+@code{$25} into direct calls.  This is only possible if the linker can\n+resolve the destination at link-time and if the destination is within\n+range for a direct call.\n+\n+@option{-mrelax-pic-calls} is the default if GCC was configured to use\n+an assembler and a linker that supports the @code{.reloc} assembly\n+directive and @code{-mexplicit-relocs} is in effect.  With\n+@code{-mno-explicit-relocs}, this optimization can be performed by the\n+assembler and the linker alone without help from the compiler.\n @end table\n \n @node MMIX Options"}, {"sha": "c2841f69126b808ff91a810ccd41c382e6ebbc52", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b53da24424c79a824fa74ec3160efe0bbe9627eb", "patch": "@@ -1,3 +1,15 @@\n+2009-09-19  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* gcc.target/mips/mips.exp: Add relax-pic-calls\n+\tunder -mfoo/-mno-foo options.\n+\t(mips-dg-options): Make -mrelax-pic-calls imply -mno-plt, -mabicalls\n+\tand -mexplicit-relocs.\n+\t* gcc.target/mips/call-1.c: New test.\n+\t* gcc.target/mips/call-2.c: New test.\n+\t* gcc.target/mips/call-3.c: New test.\n+\t* gcc.target/mips/lazy-binding-1.c: Add MIPS-specific dg-options.\n+\t* gcc.dg/tree-ssa/loop-1.c: Likewise.\n+\n 2009-09-19  Chris Demetriou  <cgd@google.com>\n \n \tPR preprocessor/28435:"}, {"sha": "8e727716079c972d5a52e14c6dd38fa6ce72bc38", "filename": "gcc/testsuite/gcc.dg/pr27095.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27095.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27095.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27095.c?ref=b53da24424c79a824fa74ec3160efe0bbe9627eb", "patch": "@@ -1,6 +1,11 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2\" } */\n \n+/* On MIPS, disable generating hints (R_MIPS_JALR) for PIC calls.  In addition\n+   to the load from the GOT this also contains the name of the funtion so for\n+   each call the function name would appear twice.  */\n+/* { dg-options \"-O2 -mno-relax-pic-calls\" { target mips*-*-* } } */\n+\n extern void *memset (void *, int, __SIZE_TYPE__);\n extern __SIZE_TYPE__ strlen (const char *);\n "}, {"sha": "a84304857f6a9a6072f761338438a60ead02a5f6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-1.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-1.c?ref=b53da24424c79a824fa74ec3160efe0bbe9627eb", "patch": "@@ -13,6 +13,11 @@\n    of PIC mode.  */\n /* { dg-options \"-O1 -ftree-loop-ivcanon -funroll-loops -fdump-tree-ivcanon-details -fdump-tree-cunroll-details -fdump-tree-optimized -static\" { target *-*-darwin* } } */\n \n+/* On MIPS, disable generating hints (R_MIPS_JALR) for PIC calls.  In addition\n+   to the load from the GOT this also contains the name of the funtion so for\n+   each call the function name would appear twice.  */\n+/* { dg-options \"-O1 -ftree-loop-ivcanon -funroll-loops -fdump-tree-ivcanon-details -fdump-tree-cunroll-details -fdump-tree-optimized -mno-relax-pic-calls\" { target mips*-*-* } } */\n+\n void xxx(void)\n {\n   int x = 45;"}, {"sha": "7dceefaa3d23237d899cbb2bbdcbd59f08f7303b", "filename": "gcc/testsuite/gcc.target/mips/call-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-1.c?ref=b53da24424c79a824fa74ec3160efe0bbe9627eb", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-options \"-O2 -mrelax-pic-calls -mshared\" } */\n+/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,normal\\n1:\\tjalr\\t\" } } */\n+/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,normal2\\n1:\\tjalr\\t\" } } */\n+/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,staticfunc\\n1:\\tjalr\\t\" } } */\n+/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,tail\\n1:\\tjr\\t\" } } */\n+/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,tail2\\n1:\\tjr\\t\" } } */\n+\n+__attribute__ ((noinline)) static void staticfunc () { asm (\"\"); }\n+int normal ();\n+void normal2 ();\n+\n+NOMIPS16 f (int *p)\n+{\n+  *p = normal ();\n+  normal2 ();\n+  staticfunc ();\n+  return 1;\n+}\n+\n+int tail ();\n+\n+NOMIPS16 h ()\n+{\n+  return tail ();\n+}\n+\n+void tail2 ();\n+\n+NOMIPS16 void g ()\n+{\n+  tail2 ();\n+}"}, {"sha": "8e749919031670144148d681f2748a7ce619574a", "filename": "gcc/testsuite/gcc.target/mips/call-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-2.c?ref=b53da24424c79a824fa74ec3160efe0bbe9627eb", "patch": "@@ -0,0 +1,16 @@\n+/* See through some simple data-flow.  */\n+/* { dg-options \"-O2 -mrelax-pic-calls\" } */\n+/* { dg-final { scan-assembler-times \"\\\\.reloc\\t1f,R_MIPS_JALR,g\\n1:\\tjalr\\t\" 3 } } */\n+\n+NOMIPS16 f (int i)\n+{\n+  while (i--)\n+    g ();\n+}\n+\n+NOMIPS16 ff ()\n+{\n+  g ();\n+  g ();\n+  return 1;\n+}"}, {"sha": "b552b61dd2635600a946d616de5fb092d4b27270", "filename": "gcc/testsuite/gcc.target/mips/call-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-3.c?ref=b53da24424c79a824fa74ec3160efe0bbe9627eb", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-options \"-O2 -mrelax-pic-calls -mno-shared\" } */\n+/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,g\\n1:\\tjalr\\t\" } } */\n+\n+__attribute__ ((visibility (\"hidden\"))) void g ();\n+\n+NOMIPS16 f ()\n+{\n+  g ();\n+  return 1;\n+}"}, {"sha": "aef473f89d5fd99238b9ba3aa0cded6af18333f1", "filename": "gcc/testsuite/gcc.target/mips/mips.exp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53da24424c79a824fa74ec3160efe0bbe9627eb/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp?ref=b53da24424c79a824fa74ec3160efe0bbe9627eb", "patch": "@@ -262,6 +262,7 @@ foreach option {\n     smartmips\n     sym32\n     synci\n+    relax-pic-calls\n } {\n     lappend mips_option_groups $option \"-m(no-|)$option\"\n }\n@@ -773,6 +774,8 @@ proc mips-dg-finish {} {\n #            |                           |\n #         -mno-sym32                  -msym32\n #            |                           |\n+#         -mrelax-pic-calls           -mno-relax-pic-calls\n+#            |                           |\n #         -fpic                       -fno-pic\n #            |                           |\n #         -mshared                    -mno-shared\n@@ -833,6 +836,9 @@ proc mips-dg-options { args } {\n     mips_option_dependency options \"-mips3d\" \"-mpaired-single\"\n     mips_option_dependency options \"-mpaired-single\" \"-mfp64\"\n     mips_option_dependency options \"-mfp64\" \"-mhard-float\"\n+    mips_option_dependency options \"-mrelax-pic-calls\" \"-mno-plt\"\n+    mips_option_dependency options \"-mrelax-pic-calls\" \"-mabicalls\"\n+    mips_option_dependency options \"-mrelax-pic-calls\" \"-mexplicit-relocs\"\n     mips_option_dependency options \"-fpic\" \"-mshared\"\n     mips_option_dependency options \"-mshared\" \"-mno-plt\"\n     mips_option_dependency options \"-mno-plt\" \"addressing=unknown\""}]}