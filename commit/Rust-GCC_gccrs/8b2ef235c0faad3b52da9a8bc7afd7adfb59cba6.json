{"sha": "8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIyZWYyMzVjMGZhYWQzYjUyZGE5YThiYzdhZmQ3YWRmYjU5Y2JhNg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2016-05-27T16:32:38Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2016-05-27T16:32:38Z"}, "message": "tree-ssa-threadedge.c: Remove include of tree-ssa-threadbackward.h.\n\n\t* tree-ssa-threadedge.c: Remove include of tree-ssa-threadbackward.h.\n\t(thread_across_edge): Remove calls to find_jump_threads_backwards.\n\t* passes.def: Add jump threading passes before DOM/VRP.\n\t* tree-ssa-threadbackward.c (find_jump_threads_backwards): Change\n\targument to a basic block from an edge.  Remove tests which are\n\thandled elsewhere.\n\t(pass_data_thread_jumps, class pass_thread_jumps): New.\n\t(pass_thread_jumps::gate, pass_thread_jumps::execute): New.\n\t(make_pass_thread_jumps): Likewise.\n\t* tree-pass.h (make_pass_thread_jumps): Declare.\n\n\t* gcc.dg/tree-ssa/pr21417.c: Update expected output.\n\t* gcc.dg/tree-ssa/pr66752-3.c: Likewise.\n\t* gcc.dg/tree-ssa/pr68198.c: Likewise.\n\t* gcc.dg/tree-ssa/pr69196-1.c: Likewise.\n\t* gcc.dg/tree-ssa/pr69270-3.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-2b.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-2g.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-2h.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-6.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-7.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-12.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-13.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp56.c: Likewise.\n\nFrom-SVN: r236831", "tree": {"sha": "fe2f5d0d566581af8f71517fd2e2914ba778b90e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe2f5d0d566581af8f71517fd2e2914ba778b90e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/comments", "author": null, "committer": null, "parents": [{"sha": "a8345bfd646430d3f99b4a34ea5ea466446b1c0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8345bfd646430d3f99b4a34ea5ea466446b1c0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8345bfd646430d3f99b4a34ea5ea466446b1c0e"}], "stats": {"total": 188, "additions": 139, "deletions": 49}, "files": [{"sha": "40bac96a87863c01c0f2b133d2b5d8dfdc55f3ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6", "patch": "@@ -1,3 +1,16 @@\n+2016-05-26  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-threadedge.c: Remove include of tree-ssa-threadbackward.h.\n+\t(thread_across_edge): Remove calls to find_jump_threads_backwards.\n+\t* passes.def: Add jump threading passes before DOM/VRP.\n+\t* tree-ssa-threadbackward.c (find_jump_threads_backwards): Change\n+\targument to a basic block from an edge.  Remove tests which are\n+\thandled elsewhere.\n+\t(pass_data_thread_jumps, class pass_thread_jumps): New.\n+\t(pass_thread_jumps::gate, pass_thread_jumps::execute): New.\n+\t(make_pass_thread_jumps): Likewise.\n+\t* tree-pass.h (make_pass_thread_jumps): Declare.\n+\n 2016-05-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/visium/visium-protos.h (split_double_move): Rename into..."}, {"sha": "3647e90ddfe59fe87e1e7a54564dfecd730b013c", "filename": "gcc/passes.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6", "patch": "@@ -199,6 +199,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_return_slot);\n       NEXT_PASS (pass_fre);\n       NEXT_PASS (pass_merge_phi);\n+      NEXT_PASS (pass_thread_jumps);\n       NEXT_PASS (pass_vrp, true /* warn_array_bounds_p */);\n       NEXT_PASS (pass_chkp_opt);\n       NEXT_PASS (pass_dce);\n@@ -218,6 +219,7 @@ along with GCC; see the file COPYING3.  If not see\n \t propagations have already run, but before some more dead code\n \t is removed, and this place fits nicely.  Remember this when\n \t trying to move or duplicate pass_dominator somewhere earlier.  */\n+      NEXT_PASS (pass_thread_jumps);\n       NEXT_PASS (pass_dominator, true /* may_peel_loop_headers_p */);\n       /* At this point the majority of const/copy propagations\n \t are exposed.  Go ahead and identify paths that should never\n@@ -305,8 +307,10 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_strength_reduction);\n       NEXT_PASS (pass_split_paths);\n       NEXT_PASS (pass_tracer);\n+      NEXT_PASS (pass_thread_jumps);\n       NEXT_PASS (pass_dominator, false /* may_peel_loop_headers_p */);\n       NEXT_PASS (pass_strlen);\n+      NEXT_PASS (pass_thread_jumps);\n       NEXT_PASS (pass_vrp, false /* warn_array_bounds_p */);\n       /* The only const/copy propagation opportunities left after\n \t DOM and VRP should be due to degenerate PHI nodes.  So rather than"}, {"sha": "5ded2d4187358989b1653acdb4df06a5f8e9f4c0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6", "patch": "@@ -1,3 +1,19 @@\n+2016-05-26  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/pr21417.c: Update expected output.\n+\t* gcc.dg/tree-ssa/pr66752-3.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr68198.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr69196-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr69270-3.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-2b.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-2g.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-2h.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-6.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-7.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-12.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-13.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp56.c: Likewise.\n+\n 2016-05-27  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tPR c++/69855"}, {"sha": "484511978a1023724f6ca6a84cbb765777a598a7", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21417.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21417.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21417.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21417.c?ref=8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dom3-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-thread4-details\" } */\n \n struct tree_common \n { \n@@ -49,5 +49,5 @@ test (tree expr, int t, int D17630)\n /* We should thread the backedge to the top of the loop; ie we only\n    execute the if (expr->common.code != 142) test once per loop\n    iteration.  */\n-/* { dg-final { scan-tree-dump-times \"FSM jump thread\" 1 \"dom3\" } } */\n+/* { dg-final { scan-tree-dump-times \"FSM jump thread\" 1 \"thread4\" } } */\n "}, {"sha": "896c8bf7edcc728016884d1f0968b0712303d79d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr66752-3.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr66752-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr66752-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr66752-3.c?ref=8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1-details -fdump-tree-optimized\" } */\n+/* { dg-options \"-O2 -fdump-tree-thread1-details -fdump-tree-dce2\" } */\n \n extern int status, pt;\n extern int count;\n@@ -32,9 +32,10 @@ foo (int N, int c, int b, int *a)\n    pt--;\n }\n \n-/* There are 3 FSM jump threading opportunities, all of which will be\n+/* There are 4 FSM jump threading opportunities, all of which will be\n    realized, which will eliminate testing of FLAG, completely.  */\n-/* { dg-final { scan-tree-dump-times \"Registering FSM\" 3 \"vrp1\"} } */\n+/* { dg-final { scan-tree-dump-times \"Registering FSM\" 4 \"thread1\"} } */\n \n-/* There should be no assignments or references to FLAG.  */\n-/* { dg-final { scan-tree-dump-not \"flag\" \"optimized\"} } */\n+/* There should be no assignments or references to FLAG, verify they're\n+   eliminated as early as possible.  */\n+/* { dg-final { scan-tree-dump-not \"if .flag\" \"dce2\"} } */"}, {"sha": "d678dc8c2cd3f97e17dd662d8d16a72aac5f890d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr68198.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr68198.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr68198.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr68198.c?ref=8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-thread1-details\" } */\n \n extern void abort (void);\n \n@@ -39,5 +39,5 @@ c_finish_omp_clauses (tree clauses)\n \n /* There are 3 FSM jump threading opportunities, two of which will\n   get filtered out.  */\n-/* { dg-final { scan-tree-dump-times \"Registering FSM\" 1 \"vrp1\"} } */\n-/* { dg-final { scan-tree-dump-times \"FSM Thread through multiway branch without threading a multiway branch\" 2 \"vrp1\"} } */\n+/* { dg-final { scan-tree-dump-times \"Registering FSM\" 1 \"thread1\"} } */\n+/* { dg-final { scan-tree-dump-times \"FSM Thread through multiway branch without threading a multiway branch\" 2 \"thread1\"} } */"}, {"sha": "5842e28b94b69931a715469daca6b4bf09069b58", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr69196-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr69196-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr69196-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr69196-1.c?ref=8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile { target sparc*-*-* x86_64-*-* } } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-thread1-details\" } */\n \n-/* { dg-final { scan-tree-dump \"FSM did not thread around loop and would copy too many statements\" \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump \"FSM did not thread around loop and would copy too many statements\" \"thread1\" } } */\n \n \n typedef __builtin_va_list __gnuc_va_list;"}, {"sha": "d546ac62b4625d6d74f29d69d449e9a364f080cb", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr69270-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr69270-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr69270-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr69270-3.c?ref=8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6", "patch": "@@ -3,7 +3,7 @@\n \n /* We're looking for a constant argument a PHI node.  There\n    should only be one if we unpropagate correctly.  */\n-/* { dg-final { scan-tree-dump-times \", 1\" 1 \"uncprop1\"} } */\n+/* { dg-final { scan-tree-dump-times \", 1\" 4 \"uncprop1\"} } */\n \n typedef long unsigned int size_t;\n typedef union gimple_statement_d *gimple;"}, {"sha": "eb66136e47f99eefacb3a76f7c712090ff7e9a3f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-2b.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2b.c?ref=8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-vrp1-stats -fdump-tree-dom2-stats\" } */\n+/* { dg-options \"-O2 -fdump-tree-thread1-stats -fdump-tree-dom2-stats\" } */\n \n void foo();\n void bla();\n@@ -26,4 +26,4 @@ void thread_latch_through_header (void)\n    case.  And we want to thread through the header as well.  These\n    are both caught by threading in DOM.  */\n /* { dg-final { scan-tree-dump-not \"Jumps threaded\" \"dom2\"} } */\n-/* { dg-final { scan-tree-dump-times \"Jumps threaded: 2\" 1 \"vrp1\"} } */\n+/* { dg-final { scan-tree-dump-times \"Jumps threaded: 1\" 1 \"thread1\"} } */"}, {"sha": "ede03e09183a97f738af7c34e77c2304acf9466d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-2g.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2g.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2g.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2g.c?ref=8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1-stats -fdump-tree-dom2-stats\" } */\n+/* { dg-options \"-O2 -fdump-tree-dom2-details\" } */\n \n void foo();\n void bla();\n@@ -22,5 +22,8 @@ void dont_thread_1 (void)\n     } while (i++ < 100);\n }\n \n-/* { dg-final { scan-tree-dump \"Jumps threaded: 2\" \"vrp1\"} } */\n-/* { dg-final { scan-tree-dump \"Jumps threaded: 1\" \"dom2\"} } */\n+/* This one can only be threaded if both paths to the\n+   conditional inside the loop are threaded at the same\n+   time.  Else we potentially end up with irreducible\n+   loops.  */\n+/* { dg-final { scan-tree-dump-not \"IRREDUCIBLE_LOOP\" \"dom2\" } } */"}, {"sha": "043918d7809c26ef9854127fe767e67c198d13ee", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-2h.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2h.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2h.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2h.c?ref=8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1-stats -fdump-tree-dom2-stats\" } */\n+/* { dg-options \"-O2 -fdump-tree-dom2-details\" } */\n \n void foo();\n void bla();\n@@ -25,5 +25,4 @@ void dont_thread_2 (int first)\n \n /* Peeling off the first iteration would make threading through\n    the loop latch safe, but we don't do that currently.  */\n-/* { dg-final { scan-tree-dump \"Jumps threaded: 1\" \"vrp1\"} } */\n-/* { dg-final { scan-tree-dump \"Jumps threaded: 1\" \"dom2\"} } */\n+/* { dg-final { scan-tree-dump-not \"IRREDUCIBLE_LOOP\" \"dom2\" } } */"}, {"sha": "5ec4687d1270b10cda873965e05413f6f5099891", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-6.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-6.c?ref=8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dom2-details\" } */\n-/* { dg-final { scan-tree-dump-times \"FSM\" 6 \"dom2\" } } */\n+/* { dg-options \"-O2 -fdump-tree-thread1-details -fdump-tree-thread2-details\" } */\n+/* { dg-final { scan-tree-dump-times \"FSM\" 3 \"thread1\" } } */\n+/* { dg-final { scan-tree-dump-times \"FSM\" 4 \"thread2\" } } */\n \n int sum0, sum1, sum2, sum3;\n int foo (char *s, char **ret)"}, {"sha": "7cd14510724d3527c7bf1959f7e2f9fbc0ba256b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-7.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c?ref=8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6", "patch": "@@ -1,7 +1,8 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1-stats -fdump-tree-dom2-stats -fdump-tree-dom3-stats -fdump-tree-vrp2-stats\" } */\n-/* { dg-final { scan-tree-dump \"Jumps threaded: 19\"  \"vrp1\" } } */\n-/* { dg-final { scan-tree-dump \"Jumps threaded: 12\" \"dom2\" } } */\n+/* { dg-options \"-O2 -fdump-tree-thread1-stats -fdump-tree-thread2-stats -fdump-tree-thread3-stats -fdump-tree-dom3-stats -fdump-tree-vrp2-stats\" } */\n+/* { dg-final { scan-tree-dump \"Jumps threaded: 16\"  \"thread1\" } } */\n+/* { dg-final { scan-tree-dump \"Jumps threaded: 11\" \"thread2\" } } */\n+/* { dg-final { scan-tree-dump \"Jumps threaded: 3\" \"thread3\" } } */\n /* { dg-final { scan-tree-dump-not \"Jumps threaded\"  \"dom3\" } } */\n /* { dg-final { scan-tree-dump-not \"Jumps threaded\"  \"vrp2\" } } */\n "}, {"sha": "fa6da7bfd999799aaf1bfa343180bb84b99d9ac7", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-thread-12.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-12.c?ref=8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dom2-details\" } */\n-/* { dg-final { scan-tree-dump \"FSM\" \"dom2\" } } */\n+/* { dg-options \"-O2 -fdump-tree-thread2-details -fdump-tree-thread3-details -fdump-tree-thread4-details\" } */\n+/* { dg-final { scan-tree-dump \"FSM\" \"thread2\" } } */\n+/* { dg-final { scan-tree-dump \"FSM\" \"thread3\" } } */\n+/* { dg-final { scan-tree-dump \"FSM\" \"thread4\" } } */\n \n typedef struct bitmap_head_def *bitmap;\n typedef const struct bitmap_head_def *const_bitmap;"}, {"sha": "f5f338ba35786137158f000b07afc87080f56457", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-thread-13.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-13.c?ref=8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1-details\" } */\n-/* { dg-final { scan-tree-dump \"FSM\" \"vrp1\" } } */\n+/* { dg-options \"-O2 -fdump-tree-thread1-details\" } */\n+/* { dg-final { scan-tree-dump \"FSM\" \"thread1\" } } */\n \n typedef struct rtx_def *rtx;\n typedef const struct rtx_def *const_rtx;"}, {"sha": "3a64b017c18105a7c3dd0358dd6a4f376c4691eb", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp56.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp56.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp56.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp56.c?ref=8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-vrp1-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-thread1-stats\" } */\n typedef struct basic_block_def *basic_block;\n struct basic_block_def;\n struct edge_def;\n@@ -38,5 +38,5 @@ cleanup_empty_eh (basic_block bb)\n \tfoo ();\n     }\n }\n-/* { dg-final { scan-tree-dump-times \"Threaded\" 1 \"vrp1\"} } */\n+/* { dg-final { scan-tree-dump \"Jumps threaded: 1\" \"thread1\"} } */\n "}, {"sha": "362aa6e4247ab60da6a09dcc560fcfab30403d78", "filename": "gcc/timevar.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftimevar.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftimevar.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.def?ref=8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6", "patch": "@@ -156,6 +156,7 @@ DEFTIMEVAR (TV_TREE_SSA_OTHER\t     , \"tree SSA other\")\n DEFTIMEVAR (TV_TREE_SSA_INCREMENTAL  , \"tree SSA incremental\")\n DEFTIMEVAR (TV_TREE_OPS\t             , \"tree operand scan\")\n DEFTIMEVAR (TV_TREE_SSA_DOMINATOR_OPTS   , \"dominator optimization\")\n+DEFTIMEVAR (TV_TREE_SSA_THREAD_JUMPS , \"backwards jump threading\")\n DEFTIMEVAR (TV_TREE_SRA              , \"tree SRA\")\n DEFTIMEVAR (TV_ISOLATE_ERRONEOUS_PATHS    , \"isolate eroneous paths\")\n DEFTIMEVAR (TV_TREE_CCP\t\t     , \"tree CCP\")"}, {"sha": "36299a61a5b9624aa8215bee24dcccae17e1549e", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6", "patch": "@@ -398,6 +398,7 @@ extern gimple_opt_pass *make_pass_dce (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_cd_dce (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_call_cdce (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_merge_phi (gcc::context *ctxt);\n+extern gimple_opt_pass *make_pass_thread_jumps (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_split_crit_edges (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_laddress (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_pre (gcc::context *ctxt);"}, {"sha": "57f1f5c54dad99e0e1f63f1db10f815047d78b4a", "filename": "gcc/tree-ssa-threadbackward.c", "status": "modified", "additions": 63, "deletions": 6, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftree-ssa-threadbackward.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftree-ssa-threadbackward.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.c?ref=8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6", "patch": "@@ -33,6 +33,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-loop.h\"\n #include \"cfganal.h\"\n #include \"tree-pass.h\"\n+#include \"gimple-ssa.h\"\n+#include \"tree-phinodes.h\"\n \n static int max_threaded_paths;\n \n@@ -596,15 +598,13 @@ fsm_find_control_statement_thread_paths (tree name,\n    finding a path where NAME is a constant, we can thread the path.  */\n \n void  \n-find_jump_threads_backwards (edge e)\n+find_jump_threads_backwards (basic_block bb)\n {     \n   if (!flag_expensive_optimizations\n-      || optimize_function_for_size_p (cfun)\n-      || e->dest->loop_father != e->src->loop_father\n-      || loop_depth (e->dest->loop_father) == 0)\n+      || optimize_function_for_size_p (cfun))\n     return;\n \n-  gimple *stmt = get_gimple_control_stmt (e->dest);\n+  gimple *stmt = get_gimple_control_stmt (bb);\n   if (!stmt)\n     return;\n \n@@ -628,7 +628,7 @@ find_jump_threads_backwards (edge e)\n \n   vec<basic_block, va_gc> *bb_path;\n   vec_alloc (bb_path, 10);\n-  vec_safe_push (bb_path, e->dest);\n+  vec_safe_push (bb_path, bb);\n   hash_set<basic_block> *visited_bbs = new hash_set<basic_block>;\n \n   max_threaded_paths = PARAM_VALUE (PARAM_MAX_FSM_THREAD_PATHS);\n@@ -637,3 +637,60 @@ find_jump_threads_backwards (edge e)\n   delete visited_bbs;\n   vec_free (bb_path);\n }\n+\n+namespace {\n+\n+const pass_data pass_data_thread_jumps =\n+{\n+  GIMPLE_PASS,\n+  \"thread\",\n+  OPTGROUP_NONE,\n+  TV_TREE_SSA_THREAD_JUMPS,\n+  ( PROP_cfg | PROP_ssa ),\n+  0,\n+  0,\n+  0,\n+  ( TODO_cleanup_cfg | TODO_update_ssa ),\n+};\n+\n+class pass_thread_jumps : public gimple_opt_pass\n+{\n+public:\n+  pass_thread_jumps (gcc::context *ctxt)\n+    : gimple_opt_pass (pass_data_thread_jumps, ctxt)\n+  {}\n+\n+  opt_pass * clone (void) { return new pass_thread_jumps (m_ctxt); }\n+  virtual bool gate (function *);\n+  virtual unsigned int execute (function *);\n+};\n+\n+bool\n+pass_thread_jumps::gate (function *fun ATTRIBUTE_UNUSED)\n+{\n+  return (flag_expensive_optimizations\n+\t  && ! optimize_function_for_size_p (cfun));\n+}\n+\n+\n+unsigned int\n+pass_thread_jumps::execute (function *fun)\n+{\n+  /* Try to thread each block with more than one successor.  */\n+  basic_block bb;\n+  FOR_EACH_BB_FN (bb, fun)\n+    {\n+      if (EDGE_COUNT (bb->succs) > 1)\n+\tfind_jump_threads_backwards (bb);\n+    }\n+  thread_through_all_blocks (true);\n+  return 0;\n+}\n+\n+}\n+\n+gimple_opt_pass *\n+make_pass_thread_jumps (gcc::context *ctxt)\n+{\n+  return new pass_thread_jumps (ctxt);\n+}"}, {"sha": "5fd5b98afe8d256797df0931da2f3ac8625e7d27", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=8b2ef235c0faad3b52da9a8bc7afd7adfb59cba6", "patch": "@@ -34,7 +34,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"params.h\"\n #include \"tree-ssa-scopedtables.h\"\n #include \"tree-ssa-threadedge.h\"\n-#include \"tree-ssa-threadbackward.h\"\n #include \"tree-ssa-dom.h\"\n #include \"gimple-fold.h\"\n \n@@ -1183,8 +1182,6 @@ thread_across_edge (gcond *dummy_cond,\n       path->release ();\n       delete path;\n \n-      find_jump_threads_backwards (e);\n-\n       /* A negative status indicates the target block was deemed too big to\n \t duplicate.  Just quit now rather than trying to use the block as\n \t a joiner in a jump threading path.\n@@ -1231,10 +1228,7 @@ thread_across_edge (gcond *dummy_cond,\n       {\n \tif ((e->flags & EDGE_DFS_BACK) != 0\n \t    || (taken_edge->flags & EDGE_DFS_BACK) != 0)\n-\t  {\n-\t    find_jump_threads_backwards (taken_edge);\n-\t    continue;\n-\t  }\n+\t  continue;\n \n \t/* Push a fresh marker so we can unwind the equivalences created\n \t   for each of E->dest's successors.  */\n@@ -1282,10 +1276,7 @@ thread_across_edge (gcond *dummy_cond,\n \t    register_jump_thread (path);\n \t  }\n \telse\n-\t  {\n-\t    find_jump_threads_backwards (path->last ()->e);\n-\t    delete_jump_thread_path (path);\n-\t  }\n+\t  delete_jump_thread_path (path);\n \n \t/* And unwind the equivalence table.  */\n \tif (avail_exprs_stack)"}]}