{"sha": "817221cc87b78034dd750f6dc94ab336d7e802be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE3MjIxY2M4N2I3ODAzNGRkNzUwZjZkYzk0YWIzMzZkN2U4MDJiZQ==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2017-09-21T12:08:12Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2017-09-21T12:08:12Z"}, "message": "PR71951: Fix unwinding with -fomit-frame-pointer\n\nAs described in PR71951, if libgcc is built with -fomit-frame-pointer,\nunwinding crashes, for example while doing a backtrace.  The underlying\nreason is the Dwarf unwinder does not setup the frame pointer register\nin the initialization code.  When later unwinding a function that uses\nthe frame pointer, it tries to read FP using _Unwind_GetGR, and this\ncrashes if has never restored FP.  To unwind correctly the first frame\nmust save and restore FP (it is unwound in a special way so that it\nuses SP instead of FP).  This is done by adding -fno-omit-frame-pointer.\n\n    gcc/\n\tPR target/71951\n\t* config/aarch64/aarch64.h (LIBGCC2_UNWIND_ATTRIBUTE): Define.\n\nFrom-SVN: r253061", "tree": {"sha": "dd49b44efa5124c2054da2431dcc0ab086c6079d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd49b44efa5124c2054da2431dcc0ab086c6079d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/817221cc87b78034dd750f6dc94ab336d7e802be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/817221cc87b78034dd750f6dc94ab336d7e802be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/817221cc87b78034dd750f6dc94ab336d7e802be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/817221cc87b78034dd750f6dc94ab336d7e802be/comments", "author": null, "committer": null, "parents": [{"sha": "73d1c65029e56f95bfb3d83e2bb9a403f3f69de4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73d1c65029e56f95bfb3d83e2bb9a403f3f69de4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73d1c65029e56f95bfb3d83e2bb9a403f3f69de4"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "c7065000c7d3bba53aab4bb7c820c91f1466c26a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/817221cc87b78034dd750f6dc94ab336d7e802be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/817221cc87b78034dd750f6dc94ab336d7e802be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=817221cc87b78034dd750f6dc94ab336d7e802be", "patch": "@@ -1,3 +1,8 @@\n+2017-09-21  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\tPR target/71951\n+\t* config/aarch64/aarch64.h (LIBGCC2_UNWIND_ATTRIBUTE): Define.\n+\n 2017-09-21  Richard Biener  <rguenther@suse.de>\n \n \t* graphite-isl-ast-to-gimple.c (graphite_regenerate_ast_isl):"}, {"sha": "fe3dd43c6799416dc1b75409ecc28ce7bc957254", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/817221cc87b78034dd750f6dc94ab336d7e802be/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/817221cc87b78034dd750f6dc94ab336d7e802be/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=817221cc87b78034dd750f6dc94ab336d7e802be", "patch": "@@ -954,4 +954,12 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n extern tree aarch64_fp16_type_node;\n extern tree aarch64_fp16_ptr_type_node;\n \n+/* The generic unwind code in libgcc does not initialize the frame pointer.\n+   So in order to unwind a function using a frame pointer, the very first\n+   function that is unwound must save the frame pointer.  That way the frame\n+   pointer is restored and its value is now valid - otherwise _Unwind_GetGR\n+   crashes.  Libgcc can now be safely built with -fomit-frame-pointer.  */\n+#define LIBGCC2_UNWIND_ATTRIBUTE \\\n+  __attribute__((optimize (\"no-omit-frame-pointer\")))\n+\n #endif /* GCC_AARCH64_H */"}]}