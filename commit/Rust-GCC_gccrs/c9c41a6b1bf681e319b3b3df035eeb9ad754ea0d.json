{"sha": "c9c41a6b1bf681e319b3b3df035eeb9ad754ea0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzljNDFhNmIxYmY2ODFlMzE5YjNiM2RmMDM1ZWViOWFkNzU0ZWEwZA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-05-30T17:26:46Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-05-30T17:26:46Z"}, "message": "compiler: intrinsify sync/atomic functions\n    \n    Let the Go frontend recognize sync/atomic functions and turn them\n    into intrinsics.\n    \n    Also make sure not to intrinsify calls in go or defer statements.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/178937\n\nFrom-SVN: r271784", "tree": {"sha": "cc9924b9e6db08472f57e49e27d42a3d6dc7f6b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc9924b9e6db08472f57e49e27d42a3d6dc7f6b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9c41a6b1bf681e319b3b3df035eeb9ad754ea0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9c41a6b1bf681e319b3b3df035eeb9ad754ea0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9c41a6b1bf681e319b3b3df035eeb9ad754ea0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9c41a6b1bf681e319b3b3df035eeb9ad754ea0d/comments", "author": null, "committer": null, "parents": [{"sha": "d05b516e5310dad3348d6d198d59c55fd28a2c6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d05b516e5310dad3348d6d198d59c55fd28a2c6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d05b516e5310dad3348d6d198d59c55fd28a2c6e"}], "stats": {"total": 124, "additions": 112, "deletions": 12}, "files": [{"sha": "b7b0f5027b830a400011628f39b5b73a332d6556", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9c41a6b1bf681e319b3b3df035eeb9ad754ea0d/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9c41a6b1bf681e319b3b3df035eeb9ad754ea0d/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=c9c41a6b1bf681e319b3b3df035eeb9ad754ea0d", "patch": "@@ -1,4 +1,4 @@\n-84b8000c32f671c6cc89df1290ed6e0170308644\n+4dc60d989293d070702024e7dea52b9849f74775\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "e3a662736a0907794bd2c3a7f533e19f23bb2341", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 109, "deletions": 9, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9c41a6b1bf681e319b3b3df035eeb9ad754ea0d/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9c41a6b1bf681e319b3b3df035eeb9ad754ea0d/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=c9c41a6b1bf681e319b3b3df035eeb9ad754ea0d", "patch": "@@ -10432,7 +10432,8 @@ Call_expression::do_flatten(Gogo* gogo, Named_object*,\n \n   // Lower to compiler intrinsic if possible.\n   Func_expression* fe = this->fn_->func_expression();\n-  if (fe != NULL\n+  if (!this->is_concurrent_ && !this->is_deferred_\n+      && fe != NULL\n       && (fe->named_object()->is_function_declaration()\n           || fe->named_object()->is_function()))\n     {\n@@ -10471,6 +10472,73 @@ Call_expression::intrinsify(Gogo* gogo,\n   int int_size = int_type->named_type()->real_type()->integer_type()->bits() / 8;\n   int ptr_size = uintptr_type->named_type()->real_type()->integer_type()->bits() / 8;\n \n+  if (package == \"sync/atomic\")\n+    {\n+      // sync/atomic functions and runtime/internal/atomic functions\n+      // are very similar. In order not to duplicate code, we just\n+      // redirect to the latter and let the code below to handle them.\n+      // In case there is no equivalent functions (slight variance\n+      // in types), we just make an artificial name (begin with '$').\n+      // Note: no StorePointer, SwapPointer, and CompareAndSwapPointer,\n+      // as they need write barriers.\n+      if (name == \"LoadInt32\")\n+        name = \"$Loadint32\";\n+      else if (name == \"LoadInt64\")\n+        name = \"Loadint64\";\n+      else if (name == \"LoadUint32\")\n+        name = \"Load\";\n+      else if (name == \"LoadUint64\")\n+        name = \"Load64\";\n+      else if (name == \"LoadUintptr\")\n+        name = \"Loaduintptr\";\n+      else if (name == \"LoadPointer\")\n+        name = \"Loadp\";\n+      else if (name == \"StoreInt32\")\n+        name = \"$Storeint32\";\n+      else if (name == \"StoreInt64\")\n+        name = \"$Storeint64\";\n+      else if (name == \"StoreUint32\")\n+        name = \"Store\";\n+      else if (name == \"StoreUint64\")\n+        name = \"Store64\";\n+      else if (name == \"StoreUintptr\")\n+        name = \"Storeuintptr\";\n+      else if (name == \"AddInt32\")\n+        name = \"$Xaddint32\";\n+      else if (name == \"AddInt64\")\n+        name = \"Xaddint64\";\n+      else if (name == \"AddUint32\")\n+        name = \"Xadd\";\n+      else if (name == \"AddUint64\")\n+        name = \"Xadd64\";\n+      else if (name == \"AddUintptr\")\n+        name = \"Xadduintptr\";\n+      else if (name == \"SwapInt32\")\n+        name = \"$Xchgint32\";\n+      else if (name == \"SwapInt64\")\n+        name = \"$Xchgint64\";\n+      else if (name == \"SwapUint32\")\n+        name = \"Xchg\";\n+      else if (name == \"SwapUint64\")\n+        name = \"Xchg64\";\n+      else if (name == \"SwapUintptr\")\n+        name = \"Xchguintptr\";\n+      else if (name == \"CompareAndSwapInt32\")\n+        name = \"$Casint32\";\n+      else if (name == \"CompareAndSwapInt64\")\n+        name = \"$Casint64\";\n+      else if (name == \"CompareAndSwapUint32\")\n+        name = \"Cas\";\n+      else if (name == \"CompareAndSwapUint64\")\n+        name = \"Cas64\";\n+      else if (name == \"CompareAndSwapUintptr\")\n+        name = \"Casuintptr\";\n+      else\n+        return NULL;\n+\n+      package = \"runtime/internal/atomic\";\n+    }\n+\n   if (package == \"runtime\")\n     {\n       // Handle a couple of special runtime functions.  In the runtime\n@@ -10557,7 +10625,8 @@ Call_expression::intrinsify(Gogo* gogo,\n       int memorder = __ATOMIC_SEQ_CST;\n \n       if ((name == \"Load\" || name == \"Load64\" || name == \"Loadint64\" || name == \"Loadp\"\n-           || name == \"Loaduint\" || name == \"Loaduintptr\" || name == \"LoadAcq\")\n+           || name == \"Loaduint\" || name == \"Loaduintptr\" || name == \"LoadAcq\"\n+           || name == \"$Loadint32\")\n           && this->args_ != NULL && this->args_->size() == 1)\n         {\n           if (int_size < 8 && (name == \"Load64\" || name == \"Loadint64\"))\n@@ -10577,6 +10646,11 @@ Call_expression::intrinsify(Gogo* gogo,\n               code = Runtime::ATOMIC_LOAD_8;\n               res_type = uint64_type;\n             }\n+          else if (name == \"$Loadint32\")\n+            {\n+              code = Runtime::ATOMIC_LOAD_4;\n+              res_type = int32_type;\n+            }\n           else if (name == \"Loadint64\")\n             {\n               code = Runtime::ATOMIC_LOAD_8;\n@@ -10618,10 +10692,11 @@ Call_expression::intrinsify(Gogo* gogo,\n         }\n \n       if ((name == \"Store\" || name == \"Store64\" || name == \"StorepNoWB\"\n-           || name == \"Storeuintptr\" || name == \"StoreRel\")\n+           || name == \"Storeuintptr\" || name == \"StoreRel\"\n+           || name == \"$Storeint32\" || name == \"$Storeint64\")\n           && this->args_ != NULL && this->args_->size() == 2)\n         {\n-          if (int_size < 8 && name == \"Store64\")\n+          if (int_size < 8 && (name == \"Store64\" || name == \"$Storeint64\"))\n             return NULL;\n \n           Runtime::Function code;\n@@ -10631,6 +10706,10 @@ Call_expression::intrinsify(Gogo* gogo,\n             code = Runtime::ATOMIC_STORE_4;\n           else if (name == \"Store64\")\n             code = Runtime::ATOMIC_STORE_8;\n+          else if (name == \"$Storeint32\")\n+            code = Runtime::ATOMIC_STORE_4;\n+          else if (name == \"$Storeint64\")\n+            code = Runtime::ATOMIC_STORE_8;\n           else if (name == \"Storeuintptr\")\n             code = (ptr_size == 8 ? Runtime::ATOMIC_STORE_8 : Runtime::ATOMIC_STORE_4);\n           else if (name == \"StorepNoWB\")\n@@ -10650,10 +10729,11 @@ Call_expression::intrinsify(Gogo* gogo,\n           return Runtime::make_call(code, loc, 3, a1, a2, a3);\n         }\n \n-      if ((name == \"Xchg\" || name == \"Xchg64\" || name == \"Xchguintptr\")\n+      if ((name == \"Xchg\" || name == \"Xchg64\" || name == \"Xchguintptr\"\n+           || name == \"$Xchgint32\" || name == \"$Xchgint64\")\n           && this->args_ != NULL && this->args_->size() == 2)\n         {\n-          if (int_size < 8 && name == \"Xchg64\")\n+          if (int_size < 8 && (name == \"Xchg64\" || name == \"Xchgint64\"))\n             return NULL;\n \n           Runtime::Function code;\n@@ -10668,6 +10748,16 @@ Call_expression::intrinsify(Gogo* gogo,\n               code = Runtime::ATOMIC_EXCHANGE_8;\n               res_type = uint64_type;\n             }\n+          else if (name == \"$Xchgint32\")\n+            {\n+              code = Runtime::ATOMIC_EXCHANGE_4;\n+              res_type = int32_type;\n+            }\n+          else if (name == \"$Xchgint64\")\n+            {\n+              code = Runtime::ATOMIC_EXCHANGE_8;\n+              res_type = int64_type;\n+            }\n           else if (name == \"Xchguintptr\")\n             {\n               code = (ptr_size == 8\n@@ -10685,10 +10775,11 @@ Call_expression::intrinsify(Gogo* gogo,\n         }\n \n       if ((name == \"Cas\" || name == \"Cas64\" || name == \"Casuintptr\"\n-           || name == \"Casp1\" || name == \"CasRel\")\n+           || name == \"Casp1\" || name == \"CasRel\"\n+           || name == \"$Casint32\" || name == \"$Casint64\")\n           && this->args_ != NULL && this->args_->size() == 3)\n         {\n-          if (int_size < 8 && name == \"Cas64\")\n+          if (int_size < 8 && (name == \"Cas64\" || name == \"$Casint64\"))\n             return NULL;\n \n           Runtime::Function code;\n@@ -10707,6 +10798,10 @@ Call_expression::intrinsify(Gogo* gogo,\n             code = Runtime::ATOMIC_COMPARE_EXCHANGE_4;\n           else if (name == \"Cas64\")\n             code = Runtime::ATOMIC_COMPARE_EXCHANGE_8;\n+          else if (name == \"$Casint32\")\n+            code = Runtime::ATOMIC_COMPARE_EXCHANGE_4;\n+          else if (name == \"$Casint64\")\n+            code = Runtime::ATOMIC_COMPARE_EXCHANGE_8;\n           else if (name == \"Casuintptr\")\n             code = (ptr_size == 8\n                     ? Runtime::ATOMIC_COMPARE_EXCHANGE_8\n@@ -10733,7 +10828,7 @@ Call_expression::intrinsify(Gogo* gogo,\n         }\n \n       if ((name == \"Xadd\" || name == \"Xadd64\" || name == \"Xaddint64\"\n-           || name == \"Xadduintptr\")\n+           || name == \"Xadduintptr\" || name == \"$Xaddint32\")\n           && this->args_ != NULL && this->args_->size() == 2)\n         {\n           if (int_size < 8 && (name == \"Xadd64\" || name == \"Xaddint64\"))\n@@ -10751,6 +10846,11 @@ Call_expression::intrinsify(Gogo* gogo,\n               code = Runtime::ATOMIC_ADD_FETCH_8;\n               res_type = uint64_type;\n             }\n+          else if (name == \"$Xaddint32\")\n+            {\n+              code = Runtime::ATOMIC_ADD_FETCH_4;\n+              res_type = int32_type;\n+            }\n           else if (name == \"Xaddint64\")\n             {\n               code = Runtime::ATOMIC_ADD_FETCH_8;"}, {"sha": "e3354892b40015e93308fa515307bcd47dc98842", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9c41a6b1bf681e319b3b3df035eeb9ad754ea0d/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9c41a6b1bf681e319b3b3df035eeb9ad754ea0d/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=c9c41a6b1bf681e319b3b3df035eeb9ad754ea0d", "patch": "@@ -2682,8 +2682,6 @@ Thunk_statement::build_thunk(Gogo* gogo, const std::string& thunk_name)\n \n   gogo->add_conversions_in_block(b);\n \n-  gogo->flatten_block(function, b);\n-\n   if (may_call_recover\n       || recover_arg != NULL\n       || this->classification() == STATEMENT_GO)\n@@ -2707,6 +2705,8 @@ Thunk_statement::build_thunk(Gogo* gogo, const std::string& thunk_name)\n \t}\n     }\n \n+  gogo->flatten_block(function, b);\n+\n   // That is all the thunk has to do.\n   gogo->finish_function(location);\n }"}]}