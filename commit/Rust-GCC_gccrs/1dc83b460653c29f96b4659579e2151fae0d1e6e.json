{"sha": "1dc83b460653c29f96b4659579e2151fae0d1e6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRjODNiNDYwNjUzYzI5Zjk2YjQ2NTk1NzllMjE1MWZhZTBkMWU2ZQ==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2020-05-23T22:44:22Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2020-06-03T23:22:53Z"}, "message": "Provide diagnostic hints for missing C++ cinttypes string constants.\n\nWhen reporting an error in cp_parser and we notice a string literal\nfollowed by an unknown name check whether there is a known standard\nheader containing a string macro with the same name, then add a hint\nto the error message to include that header.\n\ngcc/c-family/ChangeLog:\n\n\t* known-headers.cc (get_cp_stdlib_header_for_string_macro_name):\n\tNew function.\n\t* known-headers.h (get_cp_stdlib_header_for_string_macro_name):\n\tNew function declaration.\n\ngcc/cp/ChangeLog:\n\n\t* parser.c (cp_lexer_safe_previous_token): New function.\n\t(cp_parser_error_1): Add name_hint if the previous token is\n\ta string literal and next token is a CPP_NAME and we have a\n\tmissing header suggestion for the name.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/spellcheck-inttypes.C: Add string-literal testcases.", "tree": {"sha": "946ec0b018766ecb4f0e8c005c8e4dc3ac81d04a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/946ec0b018766ecb4f0e8c005c8e4dc3ac81d04a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1dc83b460653c29f96b4659579e2151fae0d1e6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dc83b460653c29f96b4659579e2151fae0d1e6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dc83b460653c29f96b4659579e2151fae0d1e6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dc83b460653c29f96b4659579e2151fae0d1e6e/comments", "author": null, "committer": null, "parents": [{"sha": "9eea5d2ddf73037e21b59bcd8084ba969ae10174", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eea5d2ddf73037e21b59bcd8084ba969ae10174", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eea5d2ddf73037e21b59bcd8084ba969ae10174"}], "stats": {"total": 84, "additions": 84, "deletions": 0}, "files": [{"sha": "977230a586db41e4d1694507a5cd764c44de0860", "filename": "gcc/c-family/known-headers.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dc83b460653c29f96b4659579e2151fae0d1e6e/gcc%2Fc-family%2Fknown-headers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dc83b460653c29f96b4659579e2151fae0d1e6e/gcc%2Fc-family%2Fknown-headers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fknown-headers.cc?ref=1dc83b460653c29f96b4659579e2151fae0d1e6e", "patch": "@@ -268,6 +268,14 @@ get_c_stdlib_header_for_string_macro_name (const char *name)\n   return get_string_macro_hint (name, STDLIB_C);\n }\n \n+/* Given non-NULL NAME, return the header name defining a string macro\n+   within the C++ standard library (with '<' and '>'), or NULL.  */\n+const char *\n+get_cp_stdlib_header_for_string_macro_name (const char *name)\n+{\n+  return get_string_macro_hint (name, STDLIB_CPLUSPLUS);\n+}\n+\n /* Implementation of class suggest_missing_header.  */\n \n /* suggest_missing_header's ctor.  */"}, {"sha": "f0c89dc9019d622e63ce372a48e114ed04bb56ef", "filename": "gcc/c-family/known-headers.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dc83b460653c29f96b4659579e2151fae0d1e6e/gcc%2Fc-family%2Fknown-headers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dc83b460653c29f96b4659579e2151fae0d1e6e/gcc%2Fc-family%2Fknown-headers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fknown-headers.h?ref=1dc83b460653c29f96b4659579e2151fae0d1e6e", "patch": "@@ -24,6 +24,7 @@ extern const char *get_c_stdlib_header_for_name (const char *name);\n extern const char *get_cp_stdlib_header_for_name (const char *name);\n \n extern const char *get_c_stdlib_header_for_string_macro_name (const char *n);\n+extern const char *get_cp_stdlib_header_for_string_macro_name (const char *n);\n \n /* Subclass of deferred_diagnostic for suggesting to the user\n    that they have missed a #include.  */"}, {"sha": "b0b31d241f3d8970612717e7e7be9226f07f725c", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dc83b460653c29f96b4659579e2151fae0d1e6e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dc83b460653c29f96b4659579e2151fae0d1e6e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=1dc83b460653c29f96b4659579e2151fae0d1e6e", "patch": "@@ -45,6 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-iterator.h\"\n #include \"cp-name-hint.h\"\n #include \"memmodel.h\"\n+#include \"c-family/known-headers.h\"\n \n \f\n /* The lexer.  */\n@@ -776,6 +777,20 @@ cp_lexer_previous_token (cp_lexer *lexer)\n   return cp_lexer_token_at (lexer, tp);\n }\n \n+/* Same as above, but return NULL when the lexer doesn't own the token\n+   buffer or if the next_token is at the start of the token\n+   vector.  */\n+\n+static cp_token *\n+cp_lexer_safe_previous_token (cp_lexer *lexer)\n+{\n+  if (lexer->buffer)\n+    if (lexer->next_token != lexer->buffer->address ())\n+      return cp_lexer_previous_token (lexer);\n+\n+  return NULL;\n+}\n+\n /* Overload for make_location, taking the lexer to mean the location of the\n    previous token.  */\n \n@@ -2919,6 +2934,7 @@ cp_parser_error_1 (cp_parser* parser, const char* gmsgid,\n \t}\n     }\n \n+  auto_diagnostic_group d;\n   gcc_rich_location richloc (input_location);\n \n   bool added_matching_location = false;\n@@ -2941,6 +2957,26 @@ cp_parser_error_1 (cp_parser* parser, const char* gmsgid,\n \t  = richloc.add_location_if_nearby (matching_location);\n     }\n \n+  /* If we were parsing a string-literal and there is an unknown name\n+     token right after, then check to see if that could also have been\n+     a literal string by checking the name against a list of known\n+     standard string literal constants defined in header files. If\n+     there is one, then add that as an hint to the error message. */\n+  name_hint h;\n+  cp_token *prev_token = cp_lexer_safe_previous_token (parser->lexer);\n+  if (prev_token && cp_parser_is_string_literal (prev_token)\n+      && token->type == CPP_NAME)\n+    {\n+      tree name = token->u.value;\n+      const char *token_name = IDENTIFIER_POINTER (name);\n+      const char *header_hint\n+\t= get_cp_stdlib_header_for_string_macro_name (token_name);\n+      if (header_hint != NULL)\n+\th = name_hint (NULL, new suggest_missing_header (token->location,\n+\t\t\t\t\t\t\t token_name,\n+\t\t\t\t\t\t\t header_hint));\n+    }\n+\n   /* Actually emit the error.  */\n   c_parse_error (gmsgid,\n \t\t /* Because c_parser_error does not understand"}, {"sha": "84bfc125513c456a3d2a4c05510d03c0df76f446", "filename": "gcc/testsuite/g++.dg/spellcheck-inttypes.C", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dc83b460653c29f96b4659579e2151fae0d1e6e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-inttypes.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dc83b460653c29f96b4659579e2151fae0d1e6e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-inttypes.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-inttypes.C?ref=1dc83b460653c29f96b4659579e2151fae0d1e6e", "patch": "@@ -23,6 +23,18 @@ const char *hex64_fmt = PRIx64; /* { dg-error \"'PRIx64' was not declared\" \"undec\n const char *hexptr_fmt = PRIxPTR; /* { dg-error \"'PRIxPTR' was not declared\" \"undeclared identifier\" { target *-*-* } } */\n /* { dg-message \"'PRIxPTR' is defined in header '<cinttypes>'; did you forget to '#include <cinttypes>'?\" \"replacement note\" { target *-*-* } .-1 } */\n \n+/* As a part of a string-literal.  */\n+const char *dec8msg_fmt = \"Provide %\" PRId8 \"\\n\"; /* { dg-error \"expected\" \"expected string-literal\" { target *-*-* } } */\n+/* { dg-message \"'PRId8' is defined in header '<cinttypes>'; did you forget to '#include <cinttypes>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+const char *dec16msg_fmt = \"Provide %\" PRId16 \"\\n\"; /* { dg-error \"expected\" \"expected string-literal\" { target *-*-* } } */\n+/* { dg-message \"'PRId16' is defined in header '<cinttypes>'; did you forget to '#include <cinttypes>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+const char *dec32msg_fmt = \"Provide %\" PRId32 \"\\n\"; /* { dg-error \"expected\" \"expected string-literal\" { target *-*-* } } */\n+/* { dg-message \"'PRId32' is defined in header '<cinttypes>'; did you forget to '#include <cinttypes>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+const char *dec64msg_fmt = \"Provide %\" PRId64 \"\\n\"; /* { dg-error \"expected\" \"expected string-literal\" { target *-*-* } } */\n+/* { dg-message \"'PRId64' is defined in header '<cinttypes>'; did you forget to '#include <cinttypes>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+const char *decptrmsg_fmt = \"Provide %\" PRIdPTR \"\\n\"; /* { dg-error \"expected\" \"expected string-literal\" { target *-*-* } } */\n+/* { dg-message \"'PRIdPTR' is defined in header '<cinttypes>'; did you forget to '#include <cinttypes>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+\n void test_printf (void)\n {\n   printf (\"some format strings %s, %s, %s, %s, %s, %s\\n\",\n@@ -38,4 +50,31 @@ void test_printf (void)\n /* { dg-message \"'PRIx32' is defined in header '<cinttypes>'; did you forget to '#include <cinttypes>'?\" \"replacement note\" { target *-*-* } .-1 } */\n \t  PRIoPTR);  /* { dg-error \"'PRIoPTR' was not declared\" \"undeclared identifier\" { target *-*-* } } */\n /* { dg-message \"'PRIoPTR' is defined in header '<cinttypes>'; did you forget to '#include <cinttypes>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+\n+  printf (\"%\" PRIo8 \"\\n\", i8); /* { dg-error \"expected\" } */\n+/* { dg-message \"'PRIo8' is defined in header '<cinttypes>'; did you forget to '#include <cinttypes>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+  printf (\"%\" PRIo16 \"\\n\", i16); /* { dg-error \"expected\" } */\n+/* { dg-message \"'PRIo16' is defined in header '<cinttypes>'; did you forget to '#include <cinttypes>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+  printf (\"%\" PRIo32 \"\\n\", i32); /* { dg-error \"expected\" } */\n+/* { dg-message \"'PRIo32' is defined in header '<cinttypes>'; did you forget to '#include <cinttypes>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+  printf (\"%\" PRIo64 \"\\n\", i64); /* { dg-error \"expected\" } */\n+/* { dg-message \"'PRIo64' is defined in header '<cinttypes>'; did you forget to '#include <cinttypes>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+  printf (\"%\" PRIoPTR \"\\n\", ip); /* { dg-error \"expected\" } */\n+/* { dg-message \"'PRIoPTR' is defined in header '<cinttypes>'; did you forget to '#include <cinttypes>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+}\n+\n+void test_scanf (void)\n+{\n+  scanf (\"%\" SCNu8 \"\\n\", &i8); /* { dg-error \"expected\" } */\n+/* { dg-message \"'SCNu8' is defined in header '<cinttypes>'; did you forget to '#include <cinttypes>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+  scanf (\"%\" SCNu16 \"\\n\", &i16); /* { dg-error \"expected\" } */\n+/* { dg-message \"'SCNu16' is defined in header '<cinttypes>'; did you forget to '#include <cinttypes>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+  scanf (\"%\" SCNu32 \"\\n\", &i32); /* { dg-error \"expected\" } */\n+/* { dg-message \"'SCNu32' is defined in header '<cinttypes>'; did you forget to '#include <cinttypes>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+  scanf (\"%\" SCNu64 \"\\n\", &i64); /* { dg-error \"expected\" } */\n+/* { dg-message \"'SCNu64' is defined in header '<cinttypes>'; did you forget to '#include <cinttypes>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+  scanf (\"%\" SCNuPTR \"\\n\", &ip); /* { dg-error \"expected\" } */\n+/* { dg-message \"'SCNuPTR' is defined in header '<cinttypes>'; did you forget to '#include <cinttypes>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+  scanf (\"%\" SCNxPTR \"\\n\", &up); /* { dg-error \"expected\" } */\n+/* { dg-message \"'SCNxPTR' is defined in header '<cinttypes>'; did you forget to '#include <cinttypes>'?\" \"replacement note\" { target *-*-* } .-1 } */\n }"}]}