{"sha": "aaa1b10f5419420ef419b6f74299e516f19e5877", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFhMWIxMGY1NDE5NDIwZWY0MTliNmY3NDI5OWU1MTZmMTllNTg3Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-09-23T07:34:43Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-09-23T07:34:43Z"}, "message": "* hsa-gen.c (hsa_op_immed::hsa_op_immed Use CONSTRUCTOR_NELTS (...)\n\tinstead of vec_safe_length (CONSTRUCTOR_ELTS (...)).\n\t(gen_hsa_ctor_assignment): Likewise.\n\t* print-tree.c (print_node): Likewise.\n\t* tree-dump.c (dequeue_and_dump): Likewise.\n\t* tree-sra.c (sra_modify_constructor_assign): Likewise.\n\t* expr.c (store_constructor): Likewise.\n\t* fold-const.c (operand_equal_p): Likewise.\n\t* tree-pretty-print.c (dump_generic_node): Likewise.\n\t* hsa-brig.c (hsa_op_immed::emit_to_buffer): Likewise.\n\t* ipa-icf-gimple.c (func_checker::compare_operand): Likewise.\ncp/\n\t* typeck2.c (process_init_constructor_record): Use\n\tCONSTRUCTOR_NELTS (...) instead of\n\tvec_safe_length (CONSTRUCTOR_ELTS (...)).\n\t* decl.c (reshape_init_r): Likewise.\n\t(check_initializer): Likewise.\nada/\n\t* gcc-interface/decl.c (gnat_to_gnu_entity): Use\n\tCONSTRUCTOR_NELTS (...) instead of\n\tvec_safe_length (CONSTRUCTOR_ELTS (...)).\n\nFrom-SVN: r240390", "tree": {"sha": "829166a3567a2a3dc49d4bf5253352ed8360678b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/829166a3567a2a3dc49d4bf5253352ed8360678b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aaa1b10f5419420ef419b6f74299e516f19e5877", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaa1b10f5419420ef419b6f74299e516f19e5877", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaa1b10f5419420ef419b6f74299e516f19e5877", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaa1b10f5419420ef419b6f74299e516f19e5877/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9500733cc644b84402dce9a53eb32bfa50cfd4a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9500733cc644b84402dce9a53eb32bfa50cfd4a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9500733cc644b84402dce9a53eb32bfa50cfd4a5"}], "stats": {"total": 63, "additions": 44, "deletions": 19}, "files": [{"sha": "453413be33833662961e78bbf3bbafdc53262a59", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa1b10f5419420ef419b6f74299e516f19e5877/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa1b10f5419420ef419b6f74299e516f19e5877/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aaa1b10f5419420ef419b6f74299e516f19e5877", "patch": "@@ -1,3 +1,17 @@\n+2016-09-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* hsa-gen.c (hsa_op_immed::hsa_op_immed Use CONSTRUCTOR_NELTS (...)\n+\tinstead of vec_safe_length (CONSTRUCTOR_ELTS (...)).\n+\t(gen_hsa_ctor_assignment): Likewise.\n+\t* print-tree.c (print_node): Likewise.\n+\t* tree-dump.c (dequeue_and_dump): Likewise.\n+\t* tree-sra.c (sra_modify_constructor_assign): Likewise.\n+\t* expr.c (store_constructor): Likewise.\n+\t* fold-const.c (operand_equal_p): Likewise.\n+\t* tree-pretty-print.c (dump_generic_node): Likewise.\n+\t* hsa-brig.c (hsa_op_immed::emit_to_buffer): Likewise.\n+\t* ipa-icf-gimple.c (func_checker::compare_operand): Likewise.\n+\n 2016-09-23  Richard Biener  <rguenther@suse.de>\n \n \t* hooks.h (hook_uint_uintp_false): Declare."}, {"sha": "9dc0d97b865224d77e8ae25d8c37d9b18f17f665", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa1b10f5419420ef419b6f74299e516f19e5877/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa1b10f5419420ef419b6f74299e516f19e5877/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=aaa1b10f5419420ef419b6f74299e516f19e5877", "patch": "@@ -1,3 +1,9 @@\n+2016-09-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Use\n+\tCONSTRUCTOR_NELTS (...) instead of\n+\tvec_safe_length (CONSTRUCTOR_ELTS (...)).\n+\n 2016-07-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Access_Type>: Also use"}, {"sha": "f820f8452bfefa3a44e46370becf86929e2fea68", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa1b10f5419420ef419b6f74299e516f19e5877/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa1b10f5419420ef419b6f74299e516f19e5877/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=aaa1b10f5419420ef419b6f74299e516f19e5877", "patch": "@@ -1339,7 +1339,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t\t      = TREE_TYPE (DECL_CHAIN (TYPE_FIELDS (gnu_alloc_type)));\n \n \t\t    if (TREE_CODE (gnu_expr) == CONSTRUCTOR\n-\t\t\t&& vec_safe_length (CONSTRUCTOR_ELTS (gnu_expr)) == 1)\n+\t\t\t&& CONSTRUCTOR_NELTS (gnu_expr) == 1)\n \t\t      gnu_expr = NULL_TREE;\n \t\t    else\n \t\t      gnu_expr"}, {"sha": "ae5934301c9fc3b98d881aee49c7789ef3be0b45", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa1b10f5419420ef419b6f74299e516f19e5877/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa1b10f5419420ef419b6f74299e516f19e5877/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=aaa1b10f5419420ef419b6f74299e516f19e5877", "patch": "@@ -1,3 +1,11 @@\n+2016-09-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* typeck2.c (process_init_constructor_record): Use\n+\tCONSTRUCTOR_NELTS (...) instead of\n+\tvec_safe_length (CONSTRUCTOR_ELTS (...)).\n+\t* decl.c (reshape_init_r): Likewise.\n+\t(check_initializer): Likewise.\n+\n 2016-09-22  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/71979"}, {"sha": "24f71ce4f7236fcc14030e87e2034a94f4bc0448", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa1b10f5419420ef419b6f74299e516f19e5877/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa1b10f5419420ef419b6f74299e516f19e5877/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=aaa1b10f5419420ef419b6f74299e516f19e5877", "patch": "@@ -5933,7 +5933,7 @@ reshape_init_r (tree type, reshape_iter *d, bool first_initializer_p,\n \t element (as allowed by [dcl.init.string]).  */\n       if (!first_initializer_p\n \t  && TREE_CODE (str_init) == CONSTRUCTOR\n-\t  && vec_safe_length (CONSTRUCTOR_ELTS (str_init)) == 1)\n+\t  && CONSTRUCTOR_NELTS (str_init) == 1)\n \t{\n \t  str_init = (*CONSTRUCTOR_ELTS (str_init))[0].value;\n \t}\n@@ -6136,7 +6136,7 @@ check_initializer (tree decl, tree init, int flags, vec<tree, va_gc> **cleanups)\n \n   if (init && BRACE_ENCLOSED_INITIALIZER_P (init))\n     {\n-      int init_len = vec_safe_length (CONSTRUCTOR_ELTS (init));\n+      int init_len = CONSTRUCTOR_NELTS (init);\n       if (SCALAR_TYPE_P (type))\n \t{\n \t  if (init_len == 0)"}, {"sha": "6e226856edcbc4021ab370a7d14bdd93343dadef", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa1b10f5419420ef419b6f74299e516f19e5877/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa1b10f5419420ef419b6f74299e516f19e5877/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=aaa1b10f5419420ef419b6f74299e516f19e5877", "patch": "@@ -1379,7 +1379,7 @@ process_init_constructor_record (tree type, tree init,\n       if (type == error_mark_node)\n \treturn PICFLAG_ERRONEOUS;\n \n-      if (idx < vec_safe_length (CONSTRUCTOR_ELTS (init)))\n+      if (idx < CONSTRUCTOR_NELTS (init))\n \t{\n \t  constructor_elt *ce = &(*CONSTRUCTOR_ELTS (init))[idx];\n \t  if (ce->index)\n@@ -1476,7 +1476,7 @@ process_init_constructor_record (tree type, tree init,\n       CONSTRUCTOR_APPEND_ELT (v, field, next);\n     }\n \n-  if (idx < vec_safe_length (CONSTRUCTOR_ELTS (init)))\n+  if (idx < CONSTRUCTOR_NELTS (init))\n     {\n       if (complain & tf_error)\n \terror (\"too many initializers for %qT\", type);"}, {"sha": "d15e98bdfe8a90a0d3022fd8478498fb3d9e6ffb", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa1b10f5419420ef419b6f74299e516f19e5877/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa1b10f5419420ef419b6f74299e516f19e5877/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=aaa1b10f5419420ef419b6f74299e516f19e5877", "patch": "@@ -6187,8 +6187,7 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size,\n \t   register whose mode size isn't equal to SIZE since\n \t   clear_storage can't handle this case.  */\n \telse if (size > 0\n-\t\t && (((int)vec_safe_length (CONSTRUCTOR_ELTS (exp))\n-\t\t      != fields_length (type))\n+\t\t && (((int) CONSTRUCTOR_NELTS (exp) != fields_length (type))\n \t\t     || mostly_zeros_p (exp))\n \t\t && (!REG_P (target)\n \t\t     || ((HOST_WIDE_INT) GET_MODE_SIZE (GET_MODE (target))"}, {"sha": "a6b7ec7dfeced0a019ce2b7d4c2ee6abde25e84b", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa1b10f5419420ef419b6f74299e516f19e5877/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa1b10f5419420ef419b6f74299e516f19e5877/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=aaa1b10f5419420ef419b6f74299e516f19e5877", "patch": "@@ -2954,8 +2954,7 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n       case CONSTRUCTOR:\n \t/* In GIMPLE empty constructors are allowed in initializers of\n \t   aggregates.  */\n-\treturn (!vec_safe_length (CONSTRUCTOR_ELTS (arg0))\n-\t\t&& !vec_safe_length (CONSTRUCTOR_ELTS (arg1)));\n+\treturn !CONSTRUCTOR_NELTS (arg0) && !CONSTRUCTOR_NELTS (arg1);\n       default:\n \tbreak;\n       }"}, {"sha": "4dc568c54e45b4e84b63949199a1549202f73bc9", "filename": "gcc/hsa-brig.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa1b10f5419420ef419b6f74299e516f19e5877/gcc%2Fhsa-brig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa1b10f5419420ef419b6f74299e516f19e5877/gcc%2Fhsa-brig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhsa-brig.c?ref=aaa1b10f5419420ef419b6f74299e516f19e5877", "patch": "@@ -985,7 +985,7 @@ hsa_op_immed::emit_to_buffer (unsigned *brig_repr_size)\n \t}\n       else if (TREE_CODE (m_tree_value) == CONSTRUCTOR)\n \t{\n-\t  unsigned len = vec_safe_length (CONSTRUCTOR_ELTS (m_tree_value));\n+\t  unsigned len = CONSTRUCTOR_NELTS (m_tree_value);\n \t  for (unsigned i = 0; i < len; i++)\n \t    {\n \t      tree v = CONSTRUCTOR_ELT (m_tree_value, i)->value;"}, {"sha": "2c8ec1d95057745e69d31823095f9441c1feef55", "filename": "gcc/hsa-gen.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa1b10f5419420ef419b6f74299e516f19e5877/gcc%2Fhsa-gen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa1b10f5419420ef419b6f74299e516f19e5877/gcc%2Fhsa-gen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhsa-gen.c?ref=aaa1b10f5419420ef419b6f74299e516f19e5877", "patch": "@@ -1100,8 +1100,7 @@ hsa_op_immed::hsa_op_immed (tree tree_val, bool min32int)\n \n   /* Verify that all elements of a constructor are constants.  */\n   if (TREE_CODE (m_tree_value) == CONSTRUCTOR)\n-    for (unsigned i = 0;\n-\t i < vec_safe_length (CONSTRUCTOR_ELTS (m_tree_value)); i++)\n+    for (unsigned i = 0; i < CONSTRUCTOR_NELTS (m_tree_value); i++)\n       {\n \ttree v = CONSTRUCTOR_ELT (m_tree_value, i)->value;\n \tif (!CONSTANT_CLASS_P (v))\n@@ -2845,7 +2844,7 @@ void\n gen_hsa_ctor_assignment (hsa_op_address *addr_lhs, tree rhs, hsa_bb *hbb,\n \t\t\t BrigAlignment8_t align)\n {\n-  if (vec_safe_length (CONSTRUCTOR_ELTS (rhs)))\n+  if (CONSTRUCTOR_NELTS (rhs))\n     {\n       HSA_SORRY_AT (EXPR_LOCATION (rhs),\n \t\t    \"support for HSA does not implement load from constructor\");"}, {"sha": "683df31577902c89b9d23ecb30a868c243f2d413", "filename": "gcc/ipa-icf-gimple.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa1b10f5419420ef419b6f74299e516f19e5877/gcc%2Fipa-icf-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa1b10f5419420ef419b6f74299e516f19e5877/gcc%2Fipa-icf-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf-gimple.c?ref=aaa1b10f5419420ef419b6f74299e516f19e5877", "patch": "@@ -406,8 +406,8 @@ func_checker::compare_operand (tree t1, tree t2)\n     {\n     case CONSTRUCTOR:\n       {\n-\tunsigned length1 = vec_safe_length (CONSTRUCTOR_ELTS (t1));\n-\tunsigned length2 = vec_safe_length (CONSTRUCTOR_ELTS (t2));\n+\tunsigned length1 = CONSTRUCTOR_NELTS (t1);\n+\tunsigned length2 = CONSTRUCTOR_NELTS (t2);\n \n \tif (length1 != length2)\n \t  return return_false ();"}, {"sha": "8c63cb8ee23b5f4cf8d26b4fdc5fb170785f2605", "filename": "gcc/print-tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa1b10f5419420ef419b6f74299e516f19e5877/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa1b10f5419420ef419b6f74299e516f19e5877/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=aaa1b10f5419420ef419b6f74299e516f19e5877", "patch": "@@ -841,7 +841,7 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \t  {\n \t    unsigned HOST_WIDE_INT cnt;\n \t    tree index, value;\n-\t    len = vec_safe_length (CONSTRUCTOR_ELTS (node));\n+\t    len = CONSTRUCTOR_NELTS (node);\n \t    fprintf (file, \" lngt %d\", len);\n \t    FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (node),\n \t\t\t\t      cnt, index, value)"}, {"sha": "ed60e6d3cd58d5ee1640919596bb926506363867", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa1b10f5419420ef419b6f74299e516f19e5877/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa1b10f5419420ef419b6f74299e516f19e5877/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=aaa1b10f5419420ef419b6f74299e516f19e5877", "patch": "@@ -646,7 +646,7 @@ dequeue_and_dump (dump_info_p di)\n       {\n \tunsigned HOST_WIDE_INT cnt;\n \ttree index, value;\n-\tdump_int (di, \"lngt\", vec_safe_length (CONSTRUCTOR_ELTS (t)));\n+\tdump_int (di, \"lngt\", CONSTRUCTOR_NELTS (t));\n \tFOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (t), cnt, index, value)\n \t  {\n \t    dump_child (\"idx\", index);"}, {"sha": "3449f266beade197419bbf5d98666a4e77cbe9c8", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa1b10f5419420ef419b6f74299e516f19e5877/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa1b10f5419420ef419b6f74299e516f19e5877/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=aaa1b10f5419420ef419b6f74299e516f19e5877", "patch": "@@ -1983,7 +1983,7 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, int flags,\n \t\tdump_decl_name (pp, val, flags);\n \t    else\n \t\tdump_generic_node (pp, val, spc, flags, false);\n-\t    if (ix != vec_safe_length (CONSTRUCTOR_ELTS (node)) - 1)\n+\t    if (ix != CONSTRUCTOR_NELTS (node) - 1)\n \t      {\n \t\tpp_comma (pp);\n \t\tpp_space (pp);"}, {"sha": "5565743af0a31f6219203e71261a6cb6ed7db984", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa1b10f5419420ef419b6f74299e516f19e5877/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa1b10f5419420ef419b6f74299e516f19e5877/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=aaa1b10f5419420ef419b6f74299e516f19e5877", "patch": "@@ -3224,7 +3224,7 @@ sra_modify_constructor_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n \treturn SRA_AM_MODIFIED;\n     }\n \n-  if (vec_safe_length (CONSTRUCTOR_ELTS (gimple_assign_rhs1 (stmt))) > 0)\n+  if (CONSTRUCTOR_NELTS (gimple_assign_rhs1 (stmt)) > 0)\n     {\n       /* I have never seen this code path trigger but if it can happen the\n \t following should handle it gracefully.  */"}]}