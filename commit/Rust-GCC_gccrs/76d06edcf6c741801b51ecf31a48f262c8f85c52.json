{"sha": "76d06edcf6c741801b51ecf31a48f262c8f85c52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZkMDZlZGNmNmM3NDE4MDFiNTFlY2YzMWE0OGYyNjJjOGY4NWM1Mg==", "commit": {"author": {"name": "Stephane Carrez", "email": "Stephane.Carrez@worldnet.fr", "date": "2001-01-11T21:10:39Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2001-01-11T21:10:39Z"}, "message": "Fix operand numbers in m68hc11.md\n\nFrom-SVN: r38924", "tree": {"sha": "16b71f3adf00aee6f502293421535ee5a45bd8c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16b71f3adf00aee6f502293421535ee5a45bd8c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76d06edcf6c741801b51ecf31a48f262c8f85c52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76d06edcf6c741801b51ecf31a48f262c8f85c52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76d06edcf6c741801b51ecf31a48f262c8f85c52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76d06edcf6c741801b51ecf31a48f262c8f85c52/comments", "author": null, "committer": null, "parents": [{"sha": "1594c6bcecdb10d7e5d14029d64734352d18ae55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1594c6bcecdb10d7e5d14029d64734352d18ae55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1594c6bcecdb10d7e5d14029d64734352d18ae55"}], "stats": {"total": 98, "additions": 53, "deletions": 45}, "files": [{"sha": "6fc8dc219839069a624a18014ff2eec79858fa0b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d06edcf6c741801b51ecf31a48f262c8f85c52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d06edcf6c741801b51ecf31a48f262c8f85c52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76d06edcf6c741801b51ecf31a48f262c8f85c52", "patch": "@@ -1,3 +1,15 @@\n+2001-01-11  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n+\n+\t* config/m68hc11/m68hc11.md (*adcq, *subcq): Fix operand numbers.\n+\t(*ashlsi3_const16_zexthi, *ashlsi3_const1): Likewise.\n+\t(*lshrsi3_const, *lshrsi3_const1, *lshrsi3_const16): Likewise.\n+\t(*ashrsi3, *ashrsi3_const, *ashlsi3, *ashlsi3_const): Likewise.\n+\t(*ashlsi3_const1, *lshrsi3, *ashlsi3_const16): Likewise.\n+\t(cmphi_z_used): Don't use '@' for the output.\n+\t(tstqi_z_used): Likewise.\n+\t(cmpqi_z_used): Likewise.\n+\t(one_cmplsi2): Likewise.\n+\n 2001-01-11  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config/sh/sh.c (barrier_align): Recognize branch around far"}, {"sha": "6a60b837449b5d01ad77511ca0cfd03945c83f45", "filename": "gcc/config/m68hc11/m68hc11.md", "status": "modified", "additions": 41, "deletions": 45, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d06edcf6c741801b51ecf31a48f262c8f85c52/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d06edcf6c741801b51ecf31a48f262c8f85c52/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md?ref=76d06edcf6c741801b51ecf31a48f262c8f85c52", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description file for Motorola 68HC11 and 68HC12.\n-;;- Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+;;- Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n ;;- Contributed by Stephane Carrez (stcarrez@worldnet.fr)\n \n ;; This file is part of GNU CC.\n@@ -214,8 +214,7 @@\n    (use (match_operand:HI 1 \"hard_reg_operand\" \"dxy\"))\n    (use (reg:HI 11))]\n   \"\"\n-  \"@\n-   #\")\n+  \"#\")\n \n (define_split /* \"tstqi_z_used\" */\n   [(set (cc0)\n@@ -305,8 +304,7 @@\n    (use (match_operand:HI 2 \"hard_reg_operand\" \"dxy\"))\n    (use (reg:HI 11))]\n   \"\"\n-  \"@\n-   #\")\n+  \"#\")\n   \n (define_split /* \"cmphi_z_used\" */\n   [(set (cc0)\n@@ -385,8 +383,7 @@\n    (use (match_operand:HI 2 \"hard_reg_operand\" \"dxy\"))\n    (use (reg:HI 11))]\n   \"\"\n-  \"@\n-   #\")\n+  \"#\")\n   \n (define_split /* cmpqi_z_used */\n   [(set (cc0)\n@@ -2113,10 +2110,10 @@\n (define_insn \"*adcq\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=q\")\n         (plus:QI (plus:QI (reg:QI 7)\n-                          (match_operand:QI 2 \"register_operand\" \"%0\"))\n-                 (match_operand:QI 3 \"general_operand\" \"ium\")))]\n+                          (match_operand:QI 1 \"register_operand\" \"%0\"))\n+                 (match_operand:QI 2 \"general_operand\" \"ium\")))]\n   \"\"\n-  \"adc%0\\\\t%b3\")\n+  \"adc%0\\\\t%b2\")\n \n ;;--------------------------------------------------------------------\n ;;- Subtract instructions.\n@@ -2368,10 +2365,10 @@\n (define_insn \"*subcq\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=q\")\n         (minus:QI (minus:QI (reg:QI 7)\n-                            (match_operand:QI 2 \"register_operand\" \"0\"))\n-                  (match_operand:QI 3 \"general_operand\" \"ium\")))]\n+                            (match_operand:QI 1 \"register_operand\" \"0\"))\n+                  (match_operand:QI 2 \"general_operand\" \"ium\")))]\n   \"\"\n-  \"sbc%0\\\\t%b3\")\n+  \"sbc%0\\\\t%b2\")\n \n ;;--------------------------------------------------------------------\n ;;- Multiply instructions.\n@@ -3504,8 +3501,7 @@\n   [(set (match_operand:SI 0 \"non_push_operand\" \"=D\")\n \t(not:SI (match_operand:SI 1 \"general_operand\" \"0\")))]\n   \"\"\n-  \"@\n-   bsr\\\\t___one_cmplsi2\")\n+  \"bsr\\\\t___one_cmplsi2\")\n \n (define_insn \"one_cmplhi2\"\n   [(set (match_operand:HI 0 \"non_push_operand\" \"=d,!um,*A\")\n@@ -3746,7 +3742,7 @@\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=D,*um\")\n \t(ashift:SI (match_operand:SI 1 \"general_operand\" \"Duim,D\")\n \t           (const_int 16)))\n-   (clobber (match_scratch:HI 3 \"=X,X\"))]\n+   (clobber (match_scratch:HI 2 \"=X,X\"))]\n    \"\"\n    \"#\")\n \n@@ -3755,7 +3751,7 @@\n \t(ashift:SI (zero_extend:HI \n \t\t\t(match_operand:HI 1 \"general_operand\" \"duim*A\"))\n \t           (const_int 16)))\n-   (clobber (match_scratch:HI 3 \"=X\"))]\n+   (clobber (match_scratch:HI 2 \"=X\"))]\n    \"\"\n    \"#\")\n \n@@ -3764,7 +3760,7 @@\n \t(ashift:SI (zero_extend:HI \n \t\t\t(match_operand:HI 1 \"general_operand\" \"duim*a\"))\n \t           (const_int 16)))\n-   (clobber (match_scratch:HI 3 \"=X\"))]\n+   (clobber (match_scratch:HI 2 \"=X\"))]\n    \"reload_completed\"\n    [(set (reg:HI 0) (match_dup 1))\n     (set (reg:HI 1) (const_int 0))]\n@@ -3774,7 +3770,7 @@\n   [(set (match_operand:SI 0 \"non_push_operand\" \"=D,D,*um,?*um\")\n \t(ashift:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,*um,0,*um\")\n \t           (const_int 1)))\n-   (clobber (match_scratch:HI 3 \"=X,X,&d,&d\"))]\n+   (clobber (match_scratch:HI 2 \"=X,X,&d,&d\"))]\n    \"\"\n    \"*\n {\n@@ -3828,20 +3824,20 @@\n (define_insn \"*ashlsi3_const\"\n   [(set (match_operand:SI 0 \"register_operand\" \"+D\")\n \t(ashift:SI (match_dup 0)\n-\t           (match_operand:HI 2 \"const_int_operand\" \"\")))\n-   (clobber (match_scratch:HI 3 \"=y\"))]\n+\t           (match_operand:HI 1 \"const_int_operand\" \"\")))\n+   (clobber (match_scratch:HI 2 \"=y\"))]\n    \"\"\n    \"*\n {\n   CC_STATUS_INIT;\n-  return \\\"ldy\\\\t%2\\\\n\\\\tbsr\\\\t___ashlsi3\\\";\n+  return \\\"ldy\\\\t%1\\\\n\\\\tbsr\\\\t___ashlsi3\\\";\n }\")\n \n (define_insn \"*ashlsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"+D,D\")\n \t(ashift:SI (match_dup 0)\n-\t           (match_operand:HI 2 \"general_operand\" \"y,m\")))\n-   (clobber (match_scratch:HI 3 \"=2,X\"))]\n+\t           (match_operand:HI 1 \"general_operand\" \"y,m\")))\n+   (clobber (match_scratch:HI 2 \"=1,X\"))]\n    \"\"\n    \"*\n {\n@@ -3852,12 +3848,12 @@\n      and this conflicts with all reloads.  Since X, Y, Z are used there\n      is not enough register in class A_REGS.\n \n-     Assuming that 'operands[2]' does not refer to the stack (which \n+     Assuming that 'operands[1]' does not refer to the stack (which \n      is true for 68hc11 only, we save temporary the value of Y.  */\n-  if (!Y_REG_P (operands[3]))\n+  if (!Y_REG_P (operands[2]))\n     {\n       output_asm_insn (\\\"pshy\\\", operands);\n-      output_asm_insn (\\\"ldy\\\\t%2\\\", operands);\n+      output_asm_insn (\\\"ldy\\\\t%1\\\", operands);\n       output_asm_insn (\\\"bsr\\\\t___ashlsi3\\\", operands);\n       return \\\"puly\\\";\n     }\n@@ -4229,20 +4225,20 @@\n (define_insn \"*ashrsi3_const\"\n   [(set (match_operand:SI 0 \"register_operand\" \"+D\")\n \t(ashiftrt:SI (match_dup 0)\n-\t             (match_operand:HI 2 \"const_int_operand\" \"\")))\n-   (clobber (match_scratch:HI 3 \"=y\"))]\n+\t             (match_operand:HI 1 \"const_int_operand\" \"\")))\n+   (clobber (match_scratch:HI 2 \"=y\"))]\n    \"\"\n    \"*\n {\n   CC_STATUS_INIT;\n-  return \\\"ldy\\\\t%2\\\\n\\\\tbsr\\\\t___ashrsi3\\\";\n+  return \\\"ldy\\\\t%1\\\\n\\\\tbsr\\\\t___ashrsi3\\\";\n }\")\n \n (define_insn \"*ashrsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"+D,D\")\n \t(ashiftrt:SI (match_dup 0)\n-\t             (match_operand:HI 2 \"general_operand\" \"y,m\")))\n-   (clobber (match_scratch:HI 3 \"=2,X\"))]\n+\t             (match_operand:HI 1 \"general_operand\" \"y,m\")))\n+   (clobber (match_scratch:HI 2 \"=1,X\"))]\n    \"\"\n    \"*\n {\n@@ -4252,12 +4248,12 @@\n      and this conflicts with all reloads.  Since X, Y, Z are used there\n      is not enough register in class A_REGS.\n \n-     Assuming that 'operands[2]' does not refer to the stack (which \n+     Assuming that 'operands[1]' does not refer to the stack (which \n      is true for 68hc11 only, we save temporary the value of Y.  */\n-  if (!Y_REG_P (operands[3]))\n+  if (!Y_REG_P (operands[2]))\n     {\n       output_asm_insn (\\\"pshy\\\", operands);\n-      output_asm_insn (\\\"ldy\\\\t%2\\\", operands);\n+      output_asm_insn (\\\"ldy\\\\t%1\\\", operands);\n       output_asm_insn (\\\"bsr\\\\t___ashrsi3\\\", operands);\n       return \\\"puly\\\";\n     }\n@@ -4504,7 +4500,7 @@\n   [(set (match_operand:SI 0 \"non_push_operand\" \"=D,D,um\")\n \t(lshiftrt:SI (match_operand:SI 1 \"general_operand\" \"uim,0,D\")\n \t             (const_int 16)))\n-   (clobber (match_scratch:HI 3 \"=X,X,X\"))]\n+   (clobber (match_scratch:HI 2 \"=X,X,X\"))]\n    \"\"\n    \"#\n     xgdx\\\\n\\\\tldx\\\\t#0\n@@ -4514,7 +4510,7 @@\n   [(set (match_operand:SI 0 \"non_push_operand\" \"=D,*um\")\n \t(lshiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"D*um,*um\")\n \t             (const_int 1)))\n-   (clobber (match_scratch:HI 3 \"=X,&d\"))]\n+   (clobber (match_scratch:HI 2 \"=X,&d\"))]\n    \"\"\n    \"*\n {\n@@ -4563,20 +4559,20 @@\n (define_insn \"*lshrsi3_const\"\n   [(set (match_operand:SI 0 \"register_operand\" \"+D\")\n \t(lshiftrt:SI (match_dup 0)\n-\t             (match_operand:HI 2 \"const_int_operand\" \"\")))\n-   (clobber (match_scratch:HI 3 \"=y\"))]\n+\t             (match_operand:HI 1 \"const_int_operand\" \"\")))\n+   (clobber (match_scratch:HI 2 \"=y\"))]\n    \"\"\n    \"*\n {\n   CC_STATUS_INIT;\n-  return \\\"ldy\\\\t%2\\\\n\\\\tbsr\\\\t___lshrsi3\\\";\n+  return \\\"ldy\\\\t%1\\\\n\\\\tbsr\\\\t___lshrsi3\\\";\n }\")\n \n (define_insn \"*lshrsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"+D,D\")\n \t(lshiftrt:SI (match_dup 0)\n-\t             (match_operand:HI 2 \"general_operand\" \"y,m\")))\n-   (clobber (match_scratch:HI 3 \"=2,X\"))]\n+\t             (match_operand:HI 1 \"general_operand\" \"y,m\")))\n+   (clobber (match_scratch:HI 2 \"=1,X\"))]\n    \"\"\n    \"*\n {\n@@ -4586,12 +4582,12 @@\n      and this conflicts with all reloads.  Since X, Y, Z are used there\n      is not enough register in class A_REGS.\n \n-     Assuming that 'operands[2]' does not refer to the stack (which \n+     Assuming that 'operands[1]' does not refer to the stack (which \n      is true for 68hc11 only, we save temporary the value of Y.  */\n-  if (!Y_REG_P (operands[3]))\n+  if (!Y_REG_P (operands[2]))\n     {\n       output_asm_insn (\\\"pshy\\\", operands);\n-      output_asm_insn (\\\"ldy\\\\t%2\\\", operands);\n+      output_asm_insn (\\\"ldy\\\\t%1\\\", operands);\n       output_asm_insn (\\\"bsr\\\\t___lshrsi3\\\", operands);\n       return \\\"puly\\\";\n     }"}]}