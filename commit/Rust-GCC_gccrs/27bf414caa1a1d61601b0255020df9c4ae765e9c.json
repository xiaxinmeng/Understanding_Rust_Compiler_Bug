{"sha": "27bf414caa1a1d61601b0255020df9c4ae765e9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdiZjQxNGNhYTFhMWQ2MTYwMWIwMjU1MDIwZGY5YzRhZTc2NWU5Yw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2005-02-25T23:20:48Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2005-02-25T23:20:48Z"}, "message": "c-parser.c: New file.\n\n\t* c-parser.c: New file.\n\t* c-parse.in: Remove.\n\t* Makefile.in (c-parse.o-warn, c-parse.o, c-parse.c, c-parse.y):\n\tRemove.\n\t(c-parser.o): Add dependencies.\n\t(C_AND_OBJC_OBJC, C_OBJS, gcc.srcextra, GTFILES, distclean,\n\tmaintainer-clean, TAGS): Update.\n\t* c-config-lang.in (gtfiles): Update.\n\t* gengtype-lex.l: Don't handle \"@@\".\n\t* stub-objc.c (objc_get_class_ivars, objc_build_throw_stmt,\n\tobjc_build_synchronized, objc_begin_try_stmt,\n\tobjc_begin_catch_clause, objc_finish_catch_clause,\n\tobjc_build_finally_clause, objc_finish_try_stmt): New.\n\t* c-tree.h (struct c_declspecs): Add declspecs_seen_p and\n\ttype_seen_p.\n\t(c_parse_init): Update comment.\n\t* c-decl.c (c_init_decl_processing): Update comment.\n\t(build_null_declspecs, declspecs_add_qual, declspecs_add_type,\n\tdeclspecs_add_scspec, declspecs_add_attrs): Initialize and update\n\tnew c_declspecs members.\n\nobjc:\n\t* Make-lang.in (objc/objc-parse.o-warn, objc/objc-parse.o,\n\tobjc/objc-parse.c, objc/objc-parse.y): Remove\n\t(OBJC_OBJS, objc.srcextra, objc.tags, objc.mostlyclean,\n\tobjc.distclean, objc.maintainer-clean): Update for new parser.\n\t* config-lang.in (gtfiles): Update for new parser.\n\ntestsuite:\n\t* gcc.dg/cpp/separate-1.c, gcc.dg/noncompile/971104-1.c,\n\tgcc.dg/noncompile/990416-1.c: Adjust expected messages for new\n\tparser.\n\nFrom-SVN: r95558", "tree": {"sha": "3583a41269ae0a4769801c5116794c092decdc2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3583a41269ae0a4769801c5116794c092decdc2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27bf414caa1a1d61601b0255020df9c4ae765e9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27bf414caa1a1d61601b0255020df9c4ae765e9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27bf414caa1a1d61601b0255020df9c4ae765e9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27bf414caa1a1d61601b0255020df9c4ae765e9c/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29231b752cbc105c3158b4b45b97f8374f87cbac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29231b752cbc105c3158b4b45b97f8374f87cbac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29231b752cbc105c3158b4b45b97f8374f87cbac"}], "stats": {"total": 9981, "additions": 6335, "deletions": 3646}, "files": [{"sha": "bc843db024dbf2277e9702ef20fc548b0db1032e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27bf414caa1a1d61601b0255020df9c4ae765e9c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27bf414caa1a1d61601b0255020df9c4ae765e9c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27bf414caa1a1d61601b0255020df9c4ae765e9c", "patch": "@@ -1,3 +1,26 @@\n+2005-02-25  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* c-parser.c: New file.\n+\t* c-parse.in: Remove.\n+\t* Makefile.in (c-parse.o-warn, c-parse.o, c-parse.c, c-parse.y):\n+\tRemove.\n+\t(c-parser.o): Add dependencies.\n+\t(C_AND_OBJC_OBJC, C_OBJS, gcc.srcextra, GTFILES, distclean,\n+\tmaintainer-clean, TAGS): Update.\n+\t* c-config-lang.in (gtfiles): Update.\n+\t* gengtype-lex.l: Don't handle \"@@\".\n+\t* stub-objc.c (objc_get_class_ivars, objc_build_throw_stmt,\n+\tobjc_build_synchronized, objc_begin_try_stmt,\n+\tobjc_begin_catch_clause, objc_finish_catch_clause,\n+\tobjc_build_finally_clause, objc_finish_try_stmt): New.\n+\t* c-tree.h (struct c_declspecs): Add declspecs_seen_p and\n+\ttype_seen_p.\n+\t(c_parse_init): Update comment.\n+\t* c-decl.c (c_init_decl_processing): Update comment.\n+\t(build_null_declspecs, declspecs_add_qual, declspecs_add_type,\n+\tdeclspecs_add_scspec, declspecs_add_attrs): Initialize and update\n+\tnew c_declspecs members.\n+\n 2005-02-25  Julian Brown  <julian@codesourcery.com>\n \n \t* config/elfos.h (MAKE_DECL_ONE_ONLY): Redefined to stop DECL_WEAK"}, {"sha": "1be15cd8e62d4dcac55e36001022f45f0cf9c412", "filename": "gcc/Makefile.in", "status": "modified", "additions": 9, "deletions": 20, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27bf414caa1a1d61601b0255020df9c4ae765e9c/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27bf414caa1a1d61601b0255020df9c4ae765e9c/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=27bf414caa1a1d61601b0255020df9c4ae765e9c", "patch": "@@ -193,7 +193,6 @@ gcc.o-warn = -Wno-error\n build/insn-conditions.o-warn = -Wno-error\n # Bison-1.75 output often yields (harmless) -Wtraditional warnings\n build/gengtype-yacc.o-warn = -Wno-error\n-c-parse.o-warn = -Wno-error\n # flex output may yield harmless \"no previous prototype\" warnings\n build/gengtype-lex.o-warn = -Wno-error\n # SYSCALLS.c misses prototypes\n@@ -884,11 +883,11 @@ CXX_TARGET_OBJS=@cxx_target_objs@\n C_AND_OBJC_OBJS = attribs.o c-errors.o c-lex.o c-pragma.o c-decl.o c-typeck.o \\\n   c-convert.o c-aux-info.o c-common.o c-opts.o c-format.o c-semantics.o \\\n   c-incpath.o cppdefault.o c-ppoutput.o c-cppbuiltin.o prefix.o \\\n-  c-objc-common.o c-dump.o c-pch.o $(C_TARGET_OBJS) \\\n+  c-objc-common.o c-dump.o c-pch.o c-parser.o $(C_TARGET_OBJS) \\\n   c-gimplify.o tree-mudflap.o c-pretty-print.o\n \n # Language-specific object files for C.\n-C_OBJS = c-parse.o c-lang.o stub-objc.o $(C_AND_OBJC_OBJS)\n+C_OBJS = c-lang.o stub-objc.o $(C_AND_OBJC_OBJS)\n \n # Language-independent object files.\n OBJS-common = \\\n@@ -1347,24 +1346,15 @@ s-crt0:\t$(CRT0_S) $(MCRT0_S) $(GCC_PASSES) $(CONFIG_H)\n \n c-errors.o: c-errors.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(C_TREE_H) $(FLAGS_H) $(DIAGNOSTIC_H) $(TM_P_H)\n-c-parse.o : c-parse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n+c-parser.o : c-parser.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(GGC_H) intl.h $(C_TREE_H) input.h $(FLAGS_H) toplev.h output.h \\\n-    $(CPPLIB_H) varray.h gt-c-parse.h langhooks.h $(C_COMMON_H) $(C_PRAGMA_H)\n+    $(CPPLIB_H) varray.h gt-c-parser.h langhooks.h $(C_COMMON_H) $(C_PRAGMA_H)\n \n srcextra: gcc.srcextra lang.srcextra\n \n-gcc.srcextra: c-parse.y c-parse.c gengtype-lex.c gengtype-yacc.c gengtype-yacc.h\n+gcc.srcextra: gengtype-lex.c gengtype-yacc.c gengtype-yacc.h\n \t-cp -p $^ $(srcdir)\n \n-c-parse.c: c-parse.y\n-\t-$(BISON) $(BISONFLAGS) -o $@ $<\n-\n-c-parse.y: c-parse.in\n-\techo '/*WARNING: This file is automatically generated!*/' >tmp-c-parse.y\n-\tsed -e \"/^@@ifobjc.*/,/^@@end_ifobjc.*/d\" \\\n-\t    -e \"/^@@ifc.*/d\" -e \"/^@@end_ifc.*/d\" $< >>tmp-c-parse.y\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-c-parse.y $@\n-\n c-incpath.o: c-incpath.c c-incpath.h $(CONFIG_H) $(SYSTEM_H) $(CPPLIB_H) \\\n \t\tintl.h prefix.h coretypes.h $(TM_H) cppdefault.h $(TARGET_H) \\\n \t\t$(MACHMODE_H)\n@@ -2427,7 +2417,7 @@ GTFILES = $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/sdbout.c $(srcdir)/stor-layout.c \\\n   $(srcdir)/stringpool.c $(srcdir)/tree.c $(srcdir)/varasm.c \\\n   $(srcdir)/tree-mudflap.c $(srcdir)/tree-flow.h \\\n-  $(srcdir)/c-objc-common.c $(srcdir)/c-common.c $(srcdir)/c-parse.in \\\n+  $(srcdir)/c-objc-common.c $(srcdir)/c-common.c $(srcdir)/c-parser.c \\\n   $(srcdir)/tree-ssanames.c $(srcdir)/tree-eh.c \\\n   $(srcdir)/tree-phinodes.c $(srcdir)/tree-cfg.c \\\n   $(srcdir)/tree-dfa.c $(srcdir)/tree-ssa-propagate.c \\\n@@ -2449,7 +2439,7 @@ gt-emit-rtl.h gt-explow.h gt-stor-layout.h gt-regclass.h \\\n gt-lists.h gt-alias.h gt-cselib.h gt-gcse.h \\\n gt-expr.h gt-sdbout.h gt-optabs.h gt-bitmap.h gt-dojump.h \\\n gt-dwarf2out.h gt-reg-stack.h gt-dwarf2asm.h \\\n-gt-dbxout.h gt-c-common.h gt-c-decl.h gt-c-parse.h \\\n+gt-dbxout.h gt-c-common.h gt-c-decl.h gt-c-parser.h \\\n gt-c-pragma.h gtype-c.h gt-cfglayout.h \\\n gt-tree-mudflap.h gt-tree-complex.h \\\n gt-tree-eh.h \\\n@@ -3166,7 +3156,7 @@ distclean: clean lang.distclean\n \t-rm -f Makefile *.oaux\n \t-rm -f gthr-default.h\n \t-rm -f */stage1 */stage2 */stage3 */stage4 */include */stageprofile */stagefeedback\n-\t-rm -f c-parse.y c-parse.c c-parse.output TAGS */TAGS\n+\t-rm -f TAGS */TAGS\n \t-rm -f *.asm\n \t-rm -f site.exp site.bak testsuite/site.exp testsuite/site.bak\n \t-rm -f testsuite/*.log testsuite/*.sum\n@@ -3186,7 +3176,6 @@ maintainer-clean:\n \t@echo 'This command is intended for maintainers to use; it'\n \t@echo 'deletes files that may need special tools to rebuild.'\n \t$(MAKE) lang.maintainer-clean distclean\n-\t-rm -f $(srcdir)/c-parse.y $(srcdir)/c-parse.c\n \t-rm -f cpp.??s cpp.*aux\n \t-rm -f gcc.??s gcc.*aux\n \t-rm -f $(docdir)/*.info $(docdir)/*.1 $(docdir)/*.7 $(docdir)/*.dvi\n@@ -3648,7 +3637,7 @@ TAGS: lang.tags\n \t    incs=\"$$incs --include $$dir/TAGS.sub\";\t\\\n \t  fi;\t\t\t\t\t\t\\\n \tdone;\t\t\t\t\t\t\\\n-\tetags -o TAGS.sub *.y *.h *.c -l yacc c-parse.in; \\\n+\tetags -o TAGS.sub *.y *.h *.c; \\\n \tetags --include TAGS.sub $$incs)\n \n # ------------------------------------------------------"}, {"sha": "6b5edc2a2d315fd72e297a225c1b63131c977d97", "filename": "gcc/c-config-lang.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27bf414caa1a1d61601b0255020df9c4ae765e9c/gcc%2Fc-config-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27bf414caa1a1d61601b0255020df9c4ae765e9c/gcc%2Fc-config-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-config-lang.in?ref=27bf414caa1a1d61601b0255020df9c4ae765e9c", "patch": "@@ -1,5 +1,5 @@\n # Top level configure fragment for GNU C - C language.\n-# Copyright (C) 1994, 1995, 1997, 1998, 2000, 2001, 2002 Free Software Foundation, Inc.\n+# Copyright (C) 1994, 1995, 1997, 1998, 2000, 2001, 2002, 2005 Free Software Foundation, Inc.\n \n #This file is part of GCC.\n \n@@ -23,4 +23,4 @@\n # files used by C that have garbage collection GTY macros in them\n # which therefore need to be scanned by gengtype.c.\n \n-gtfiles=\"\\$(srcdir)/c-lang.c \\$(srcdir)/c-parse.in \\$(srcdir)/c-tree.h \\$(srcdir)/c-decl.c \\$(srcdir)/c-common.c \\$(srcdir)/c-common.h \\$(srcdir)/c-pragma.c \\$(srcdir)/c-objc-common.c\"\n+gtfiles=\"\\$(srcdir)/c-lang.c \\$(srcdir)/c-tree.h \\$(srcdir)/c-decl.c \\$(srcdir)/c-common.c \\$(srcdir)/c-common.h \\$(srcdir)/c-pragma.c \\$(srcdir)/c-objc-common.c \\$(srcdir)/c-parser.c\""}, {"sha": "690d3b3bc8018c34a8d2ff23e196696f03afa466", "filename": "gcc/c-decl.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27bf414caa1a1d61601b0255020df9c4ae765e9c/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27bf414caa1a1d61601b0255020df9c4ae765e9c/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=27bf414caa1a1d61601b0255020df9c4ae765e9c", "patch": "@@ -2581,7 +2581,7 @@ c_init_decl_processing (void)\n   tree ptr_ftype_void, ptr_ftype_ptr;\n   location_t save_loc = input_location;\n \n-  /* Adds some ggc roots, and reserved words for c-parse.in.  */\n+  /* Initialize reserved words for parser.  */\n   c_parse_init ();\n \n   current_function_decl = 0;\n@@ -6746,6 +6746,8 @@ build_null_declspecs (void)\n   ret->attrs = 0;\n   ret->typespec_word = cts_none;\n   ret->storage_class = csc_none;\n+  ret->declspecs_seen_p = false;\n+  ret->type_seen_p = false;\n   ret->non_sc_seen_p = false;\n   ret->typedef_p = false;\n   ret->tag_defined_p = false;\n@@ -6775,6 +6777,7 @@ declspecs_add_qual (struct c_declspecs *specs, tree qual)\n   enum rid i;\n   bool dupe = false;\n   specs->non_sc_seen_p = true;\n+  specs->declspecs_seen_p = true;\n   gcc_assert (TREE_CODE (qual) == IDENTIFIER_NODE\n \t      && C_IS_RESERVED_WORD (qual));\n   i = C_RID_CODE (qual);\n@@ -6808,6 +6811,8 @@ declspecs_add_type (struct c_declspecs *specs, struct c_typespec spec)\n {\n   tree type = spec.spec;\n   specs->non_sc_seen_p = true;\n+  specs->declspecs_seen_p = true;\n+  specs->type_seen_p = true;\n   if (TREE_DEPRECATED (type))\n     specs->deprecated_p = true;\n \n@@ -7102,6 +7107,7 @@ declspecs_add_scspec (struct c_declspecs *specs, tree scspec)\n   enum rid i;\n   enum c_storage_class n = csc_none;\n   bool dupe = false;\n+  specs->declspecs_seen_p = true;\n   gcc_assert (TREE_CODE (scspec) == IDENTIFIER_NODE\n \t      && C_IS_RESERVED_WORD (scspec));\n   i = C_RID_CODE (scspec);\n@@ -7184,6 +7190,7 @@ struct c_declspecs *\n declspecs_add_attrs (struct c_declspecs *specs, tree attrs)\n {\n   specs->attrs = chainon (attrs, specs->attrs);\n+  specs->declspecs_seen_p = true;\n   return specs;\n }\n "}, {"sha": "fe0d51709ebd66c08aeb51cada16b9ac79dbdb95", "filename": "gcc/c-parse.in", "status": "removed", "additions": 0, "deletions": 3588, "changes": 3588, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29231b752cbc105c3158b4b45b97f8374f87cbac/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29231b752cbc105c3158b4b45b97f8374f87cbac/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=29231b752cbc105c3158b4b45b97f8374f87cbac"}, {"sha": "adebfd20589067651a9a649acca8641b39069087", "filename": "gcc/c-parser.c", "status": "added", "additions": 6219, "deletions": 0, "changes": 6219, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27bf414caa1a1d61601b0255020df9c4ae765e9c/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27bf414caa1a1d61601b0255020df9c4ae765e9c/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=27bf414caa1a1d61601b0255020df9c4ae765e9c"}, {"sha": "d16d6a6892d4286eddbeb6d4f0aa70ca80f84a2f", "filename": "gcc/c-tree.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27bf414caa1a1d61601b0255020df9c4ae765e9c/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27bf414caa1a1d61601b0255020df9c4ae765e9c/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=27bf414caa1a1d61601b0255020df9c4ae765e9c", "patch": "@@ -205,6 +205,10 @@ struct c_declspecs {\n   enum c_typespec_keyword typespec_word;\n   /* The storage class specifier, or csc_none if none.  */\n   enum c_storage_class storage_class;\n+  /* Whether any declaration specifiers have been seen at all.  */\n+  BOOL_BITFIELD declspecs_seen_p : 1;\n+  /* Whether a type specifier has been seen.  */\n+  BOOL_BITFIELD type_seen_p : 1;\n   /* Whether something other than a storage class specifier or\n      attribute has been seen.  This is used to warn for the\n      obsolescent usage of storage class specifiers other than at the\n@@ -346,7 +350,7 @@ struct language_function GTY(())\n };\n \n \f\n-/* in c-parse.in */\n+/* in c-parser.c */\n extern void c_parse_init (void);\n \n /* in c-aux-info.c */"}, {"sha": "096af89a8e3167bfb50e3b551ecf027f5753ed87", "filename": "gcc/gengtype-lex.l", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27bf414caa1a1d61601b0255020df9c4ae765e9c/gcc%2Fgengtype-lex.l", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27bf414caa1a1d61601b0255020df9c4ae765e9c/gcc%2Fgengtype-lex.l", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype-lex.l?ref=27bf414caa1a1d61601b0255020df9c4ae765e9c", "patch": "@@ -1,6 +1,6 @@\n /* -*- indented-text -*- */\n /* Process source files and output type information.\n-   Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -272,8 +272,6 @@ ITYPE\t{IWORD}({WS}{IWORD})*\n \n ^\"%{\"\t\t\t\t{ BEGIN(in_yacc_escape); } /* } */\n \n-^\"@@\".*\t\t\t\t/* Used for c-parse.in C/ObjC demarcation.  */\n-\n {WS}\t\t\t\t{ update_lineno (yytext, yyleng); }\n \n \"const\"/[^[:alnum:]_]\t\t/* don't care */"}, {"sha": "49e73af49607de95e02b403404e798a22d718a3d", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27bf414caa1a1d61601b0255020df9c4ae765e9c/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27bf414caa1a1d61601b0255020df9c4ae765e9c/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=27bf414caa1a1d61601b0255020df9c4ae765e9c", "patch": "@@ -1,3 +1,11 @@\n+2005-02-25  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* Make-lang.in (objc/objc-parse.o-warn, objc/objc-parse.o,\n+\tobjc/objc-parse.c, objc/objc-parse.y): Remove\n+\t(OBJC_OBJS, objc.srcextra, objc.tags, objc.mostlyclean,\n+\tobjc.distclean, objc.maintainer-clean): Update for new parser.\n+\t* config-lang.in (gtfiles): Update for new parser.\n+\n 2005-01-29  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* lang-specs.h, objc-act.c, objc-act.h, objc-lang.c: Update"}, {"sha": "56fad72b149e8fd1967b71861cee4be7c2cf1783", "filename": "gcc/objc/Make-lang.in", "status": "modified", "additions": 4, "deletions": 25, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27bf414caa1a1d61601b0255020df9c4ae765e9c/gcc%2Fobjc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27bf414caa1a1d61601b0255020df9c4ae765e9c/gcc%2Fobjc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMake-lang.in?ref=27bf414caa1a1d61601b0255020df9c4ae765e9c", "patch": "@@ -1,5 +1,5 @@\n # Top level -*- makefile -*- fragment for GNU Objective-C\n-#   Copyright (C) 1997, 1998, 2000, 2001, 2002, 2003, 2004\n+#   Copyright (C) 1997, 1998, 2000, 2001, 2002, 2003, 2004, 2005\n #   Free Software Foundation, Inc.\n \n #This file is part of GCC.\n@@ -46,11 +46,9 @@ OBJECTIVE-C objective-c: cc1obj$(exeext)\n \n # Use maximal warnings for this front end.\n objc-warn = $(STRICT_WARN)\n-# Bison-1.75 output yields (harmless) -Wtraditional warnings\n-objc/objc-parse.o-warn = -Wno-error\n \n # Language-specific object files for Objective C.\n-OBJC_OBJS = objc/objc-lang.o objc/objc-parse.o objc/objc-act.o\n+OBJC_OBJS = objc/objc-lang.o objc/objc-act.o\n \n cc1obj$(exeext): $(OBJC_OBJS) $(C_AND_OBJC_OBJS) $(BACKEND) $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \\\n@@ -64,28 +62,13 @@ objc/objc-lang.o : objc/objc-lang.c \\\n    $(GGC_H) langhooks.h $(LANGHOOKS_DEF_H) $(C_COMMON_H) gtype-objc.h \\\n    c-objc-common.h objc/objc-act.h\n \n-objc/objc-parse.o : objc/objc-parse.c \\\n-   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_TREE_H) \\\n-   toplev.h $(GGC_H) input.h flags.h output.h langhooks.h $(C_COMMON_H) \\\n-   $(C_PRAGMA_H)\n-\n objc/objc-act.o : objc/objc-act.c \\\n    $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) $(TM_P_H) \\\n    $(EXPR_H) $(TARGET_H) $(C_TREE_H) diagnostic.h toplev.h flags.h \\\n    objc/objc-act.h input.h function.h output.h debug.h langhooks.h \\\n    $(LANGHOOKS_DEF_H) $(HASHTAB_H) c-pragma.h gt-objc-objc-act.h\n \n-objc.srcextra: objc/objc-parse.c objc/objc-parse.y\n-\t-cp -p $^ $(srcdir)/objc\n-\n-objc/objc-parse.c : objc/objc-parse.y\n-\t-$(BISON) $(BISONFLAGS) -o $@ $<\n-\n-objc/objc-parse.y: c-parse.in\n-\techo '/*WARNING: This file is automatically generated!*/' >tmp-objc-prs.y\n-\tsed -e \"/^@@ifc.*/,/^@@end_ifc.*/d\" \\\n-\t    -e \"/^@@ifobjc.*/d\" -e \"/^@@end_ifobjc.*/d\" < $< >>tmp-objc-prs.y\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-objc-prs.y $@\n+objc.srcextra:\n \n gtype-objc.h : s-gtype ; @true\n gt-objc-objc-act.h : s-gtype ; @true\n@@ -103,7 +86,7 @@ objc.srcinfo:\n objc.srcman:\n \n objc.tags: force\n-\tcd $(srcdir)/objc; etags -o TAGS.sub *.y *.c *.h; \\\n+\tcd $(srcdir)/objc; etags -o TAGS.sub *.c *.h; \\\n \tetags --include TAGS.sub --include ../TAGS.sub\n \n lang_checks += check-objc\n@@ -124,18 +107,14 @@ objc.uninstall:\n # A lot of the ancillary files are deleted by the main makefile.\n # We just have to delete files specific to us.\n objc.mostlyclean:\n-\t-rm -f tmp-objc-prs.y\n \t-rm -f objc/*$(objext) objc/xforward objc/fflags\n-\t-rm -f objc/objc-parse.y objc/objc-parse.c objc/objc-parse.output\n \t-rm -f objc/*$(coverageexts)\n objc.clean: objc.mostlyclean\n \t-rm -rf objc-headers\n objc.distclean:\n \t-rm -f objc/Makefile objc/Make-host objc/Make-target\n \t-rm -f objc/config.status objc/config.cache\n-\t-rm -f objc-parse.output\n objc.maintainer-clean:\n-\t-rm -f $(srcdir)/objc/objc-parse.y $(srcdir)/objc/objc-parse.c \n \n #\f\n # Stage hooks:"}, {"sha": "fbb9a6e9e927053347db0b49b3cc9bf21197c07d", "filename": "gcc/objc/config-lang.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27bf414caa1a1d61601b0255020df9c4ae765e9c/gcc%2Fobjc%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27bf414caa1a1d61601b0255020df9c4ae765e9c/gcc%2Fobjc%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fconfig-lang.in?ref=27bf414caa1a1d61601b0255020df9c4ae765e9c", "patch": "@@ -1,5 +1,5 @@\n # Top level configure fragment for GNU Objective-C\n-#   Copyright (C) 1997, 1998, 2000, 2001, 2002, 2003, 2004\n+#   Copyright (C) 1997, 1998, 2000, 2001, 2002, 2003, 2004, 2005\n #   Free Software Foundation, Inc.\n \n #This file is part of GCC.\n@@ -37,4 +37,4 @@ target_libs=target-libobjc\n # Most of the object files for cc1obj actually come from C.\n lang_requires=\"c\"\n \n-gtfiles=\"\\$(srcdir)/objc/objc-act.h \\$(srcdir)/c-parse.in \\$(srcdir)/c-tree.h \\$(srcdir)/c-decl.c \\$(srcdir)/c-objc-common.c \\$(srcdir)/c-common.c \\$(srcdir)/c-common.h \\$(srcdir)/c-pragma.c \\$(srcdir)/objc/objc-act.c\"\n+gtfiles=\"\\$(srcdir)/objc/objc-act.h \\$(srcdir)/c-parser.c \\$(srcdir)/c-tree.h \\$(srcdir)/c-decl.c \\$(srcdir)/c-objc-common.c \\$(srcdir)/c-common.c \\$(srcdir)/c-common.h \\$(srcdir)/c-pragma.c \\$(srcdir)/objc/objc-act.c\""}, {"sha": "8c03da27545c38f3504c1e13778a7ba62a1669df", "filename": "gcc/stub-objc.c", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27bf414caa1a1d61601b0255020df9c4ae765e9c/gcc%2Fstub-objc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27bf414caa1a1d61601b0255020df9c4ae765e9c/gcc%2Fstub-objc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstub-objc.c?ref=27bf414caa1a1d61601b0255020df9c4ae765e9c", "patch": "@@ -2,7 +2,7 @@\n    that are called from within the C and C++ front-ends,\n    respectively.\n    Copyright (C) 1991, 1995, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -254,3 +254,47 @@ objc_is_public (tree ARG_UNUSED (expr), tree ARG_UNUSED (identifier))\n {\n   return 1;\n }\n+\n+tree\n+objc_get_class_ivars (tree ARG_UNUSED (class_name))\n+{\n+  return 0;\n+}\n+\n+tree\n+objc_build_throw_stmt (tree ARG_UNUSED (throw_expr))\n+{\n+  return 0;\n+}\n+\n+void\n+objc_build_synchronized (location_t ARG_UNUSED (start_locus),\n+\t\t\t tree ARG_UNUSED (mutex), tree ARG_UNUSED (body))\n+{\n+}\n+\n+void\n+objc_begin_try_stmt (location_t ARG_UNUSED (try_locus), tree ARG_UNUSED (body))\n+{\n+}\n+   \n+void\n+objc_begin_catch_clause (tree ARG_UNUSED (decl))\n+{\n+}\n+\n+void\n+objc_finish_catch_clause (void)\n+{\n+}\n+\n+void\n+objc_build_finally_clause (location_t ARG_UNUSED (finally_locus),\n+\t\t\t   tree ARG_UNUSED (body))\n+{\n+}\n+\n+void\n+objc_finish_try_stmt (void)\n+{\n+}"}, {"sha": "ffa4977f33b184b6a877640fd9928d7b7c4f4779", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27bf414caa1a1d61601b0255020df9c4ae765e9c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27bf414caa1a1d61601b0255020df9c4ae765e9c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=27bf414caa1a1d61601b0255020df9c4ae765e9c", "patch": "@@ -1,3 +1,9 @@\n+2005-02-25  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/cpp/separate-1.c, gcc.dg/noncompile/971104-1.c,\n+\tgcc.dg/noncompile/990416-1.c: Adjust expected messages for new\n+\tparser.\n+\n 2005-02-25  Diego Novillo  <dnovillo@redhat.com>\n \n \tPR tree-optimization/20204"}, {"sha": "8698147d521c47c370d349f5606e487376440adb", "filename": "gcc/testsuite/gcc.dg/cpp/separate-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27bf414caa1a1d61601b0255020df9c4ae765e9c/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fseparate-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27bf414caa1a1d61601b0255020df9c4ae765e9c/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fseparate-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fseparate-1.c?ref=27bf414caa1a1d61601b0255020df9c4ae765e9c", "patch": "@@ -12,4 +12,4 @@ int FOO( /* { dg-error \"parse error|syntax error|expected\" \"error on this line\"\n \t), bar;\n \n int baz FOO /* { dg-error \"parse error|syntax error|expected\" \"error on this line\" } */\n-; /* { dg-warning \"no type or storage class\" \"warning on this line\" } */\n+;"}, {"sha": "722b71c784f8079d84d67718035ca7e1d40920e2", "filename": "gcc/testsuite/gcc.dg/noncompile/971104-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27bf414caa1a1d61601b0255020df9c4ae765e9c/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F971104-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27bf414caa1a1d61601b0255020df9c4ae765e9c/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F971104-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F971104-1.c?ref=27bf414caa1a1d61601b0255020df9c4ae765e9c", "patch": "@@ -25,5 +25,5 @@ static void up(int sem){\n     ({ \"MUTEX     \", \"BARB_SEM 1\", \"BARB_SEM 2\", \"CUST_SEM 1\",\n        \"CUST_SEM 2\", \"WAIT_SEM 1\", \"WAIT_SEM 2\", \"WAIT_SEM 3\",\n        \"WAIT_SEM 4\"}\t /* { dg-error \"parse error|syntax error|expected\" } */\n-\t[( sb.sem_num )]) );\n+\t[( sb.sem_num )]) ); /* { dg-error \"expected\" } */\n }"}, {"sha": "49f5569394eb4e965d9c5ae4bbe9c5f31f08690f", "filename": "gcc/testsuite/gcc.dg/noncompile/990416-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27bf414caa1a1d61601b0255020df9c4ae765e9c/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F990416-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27bf414caa1a1d61601b0255020df9c4ae765e9c/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F990416-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F990416-1.c?ref=27bf414caa1a1d61601b0255020df9c4ae765e9c", "patch": "@@ -3,7 +3,7 @@ typedef int word_type;\n    \n static void\n copy_reg (unsigned int reg, frame_state *udata,\t/* { dg-error \"parse|syntax|expected\" } */\n-\t  frame_state *target_udata)\n+\t  frame_state *target_udata)\t/* { dg-error \"expected\" } */\n {  \n   word_type *preg = get_reg_addr (reg, udata, 0);\t/* { dg-error \"undeclared|function|without a cast\" } */\n   word_type *ptreg = get_reg_addr (reg, target_udata, 0); /* { dg-error \"undeclared|without a cast\" } */"}]}