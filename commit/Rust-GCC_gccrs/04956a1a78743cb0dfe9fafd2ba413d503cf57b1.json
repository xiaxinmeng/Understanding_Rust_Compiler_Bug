{"sha": "04956a1a78743cb0dfe9fafd2ba413d503cf57b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ5NTZhMWE3ODc0M2NiMGRmZTlmYWZkMmJhNDEzZDUwM2NmNTdiMQ==", "commit": {"author": {"name": "Lars Brinkhoff", "email": "lars@nocrew.org", "date": "2001-05-27T10:35:09Z"}, "committer": {"name": "Gerald Pfeifer", "email": "gerald@gcc.gnu.org", "date": "2001-05-27T10:35:09Z"}, "message": "combine.c (try_combine): Fix typo in comment.\n\n\t* combine.c (try_combine): Fix typo in comment.\n\t* expr.c (expand_expr): Likewise.\n\t* config/i370/i370.md (untyped_call): Likewise.\n\nFrom-SVN: r42655", "tree": {"sha": "586b9213b1f423dd0fce763ac8836357dc8fc444", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/586b9213b1f423dd0fce763ac8836357dc8fc444"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04956a1a78743cb0dfe9fafd2ba413d503cf57b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04956a1a78743cb0dfe9fafd2ba413d503cf57b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04956a1a78743cb0dfe9fafd2ba413d503cf57b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04956a1a78743cb0dfe9fafd2ba413d503cf57b1/comments", "author": {"login": "larsbrinkhoff", "id": 775050, "node_id": "MDQ6VXNlcjc3NTA1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/775050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/larsbrinkhoff", "html_url": "https://github.com/larsbrinkhoff", "followers_url": "https://api.github.com/users/larsbrinkhoff/followers", "following_url": "https://api.github.com/users/larsbrinkhoff/following{/other_user}", "gists_url": "https://api.github.com/users/larsbrinkhoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/larsbrinkhoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/larsbrinkhoff/subscriptions", "organizations_url": "https://api.github.com/users/larsbrinkhoff/orgs", "repos_url": "https://api.github.com/users/larsbrinkhoff/repos", "events_url": "https://api.github.com/users/larsbrinkhoff/events{/privacy}", "received_events_url": "https://api.github.com/users/larsbrinkhoff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a0f51704d1dfe7a0b94ce413d501373324b30f31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0f51704d1dfe7a0b94ce413d501373324b30f31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0f51704d1dfe7a0b94ce413d501373324b30f31"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "e02767a3fb130e97bd919649b047b6f7d5a57186", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04956a1a78743cb0dfe9fafd2ba413d503cf57b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04956a1a78743cb0dfe9fafd2ba413d503cf57b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04956a1a78743cb0dfe9fafd2ba413d503cf57b1", "patch": "@@ -1,3 +1,9 @@\n+2001-05-27  Lars Brinkhoff  <lars@nocrew.org>\n+\n+\t* combine.c (try_combine): Fix typo in comment.\n+\t* expr.c (expand_expr): Likewise.\n+\t* config/i370/i370.md (untyped_call): Likewise.\n+\n 2001-05-26  Bruce Korb  <bkorb@gnu.org>\n \n \t* fixinc/fixtests.c(stdc_0_in_system_headers_test): Must return \"FIX\""}, {"sha": "bfa97b0434a1e47b14474bca62fd2e05653a95ba", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04956a1a78743cb0dfe9fafd2ba413d503cf57b1/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04956a1a78743cb0dfe9fafd2ba413d503cf57b1/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=04956a1a78743cb0dfe9fafd2ba413d503cf57b1", "patch": "@@ -1458,7 +1458,7 @@ cant_combine_insn_p (insn)\n    Here I1 and I2 appear earlier than I3.\n    I1 can be zero; then we combine just I2 into I3.\n \n-   It we are combining three insns and the resulting insn is not recognized,\n+   If we are combining three insns and the resulting insn is not recognized,\n    try splitting it into two insns.  If that happens, I2 and I3 are retained\n    and I1 is pseudo-deleted by turning it into a NOTE.  Otherwise, I1 and I2\n    are pseudo-deleted."}, {"sha": "7ef666e4323ab1be43e4aa4a8b95c0297dfbad3b", "filename": "gcc/config/i370/i370.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04956a1a78743cb0dfe9fafd2ba413d503cf57b1/gcc%2Fconfig%2Fi370%2Fi370.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04956a1a78743cb0dfe9fafd2ba413d503cf57b1/gcc%2Fconfig%2Fi370%2Fi370.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.md?ref=04956a1a78743cb0dfe9fafd2ba413d503cf57b1", "patch": "@@ -4703,8 +4703,8 @@ check_label_emit ();\n ;; Call subroutine returning any type.\n ;; This instruction pattern appears to be used only by the\n ;; expand_builtin_apply definition for __builtin_apply.  It is needed\n-;; since call_value might return an in in r15 or a float in fpr0 (r16)\n-;; and the builtin code calla abort since the reg is ambiguous. Well,\n+;; since call_value might return an int in r15 or a float in fpr0 (r16)\n+;; and the builtin code calls abort since the reg is ambiguous. Well,\n ;; the below is probably broken anyway, we just want to go for now.\n ;;\n (define_expand \"untyped_call\""}, {"sha": "3dd919e679978479a6f804a26010bcf5605567e0", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04956a1a78743cb0dfe9fafd2ba413d503cf57b1/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04956a1a78743cb0dfe9fafd2ba413d503cf57b1/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=04956a1a78743cb0dfe9fafd2ba413d503cf57b1", "patch": "@@ -6344,7 +6344,7 @@ expand_expr (exp, target, tmode, modifier)\n \t\t\t       copy_rtx (XEXP (DECL_RTL (exp), 0)));\n \n       /* If we got something, return it.  But first, set the alignment\n-\t the address is a register.  */\n+\t if the address is a register.  */\n       if (temp != 0)\n \t{\n \t  if (GET_CODE (temp) == MEM && GET_CODE (XEXP (temp, 0)) == REG)"}]}