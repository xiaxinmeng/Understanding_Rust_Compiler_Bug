{"sha": "23bed4148e21886be1ccd8840bcd7a84e1bdfcec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNiZWQ0MTQ4ZTIxODg2YmUxY2NkODg0MGJjZDdhODRlMWJkZmNlYw==", "commit": {"author": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2016-11-16T22:31:24Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2016-11-16T22:31:24Z"}, "message": "Commentary corrections\n\nFrom-SVN: r242521", "tree": {"sha": "8e847de9e0cc965a0df02ba46f4d9944d6057c2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e847de9e0cc965a0df02ba46f4d9944d6057c2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23bed4148e21886be1ccd8840bcd7a84e1bdfcec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23bed4148e21886be1ccd8840bcd7a84e1bdfcec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23bed4148e21886be1ccd8840bcd7a84e1bdfcec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23bed4148e21886be1ccd8840bcd7a84e1bdfcec/comments", "author": null, "committer": null, "parents": [{"sha": "9e16e6568110b66016b082cf4143b7a8ee3077c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e16e6568110b66016b082cf4143b7a8ee3077c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e16e6568110b66016b082cf4143b7a8ee3077c8"}], "stats": {"total": 9, "additions": 3, "deletions": 6}, "files": [{"sha": "46d6b3423289c5575b30e682d9f052ed143abbca", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23bed4148e21886be1ccd8840bcd7a84e1bdfcec/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23bed4148e21886be1ccd8840bcd7a84e1bdfcec/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=23bed4148e21886be1ccd8840bcd7a84e1bdfcec", "patch": "@@ -2803,12 +2803,9 @@ tree_if_conversion (struct loop *loop)\n \t  || loop->dont_vectorize))\n     goto cleanup;\n \n-  /* Since we have no cost model, always version loops if vectorization\n-     is enabled.  Either version this loop, or if the pattern is right\n-     for outer-loop vectorization, version the outer loop.  In the\n-     latter case we will still if-convert the original inner loop.  */\n-  /* FIXME: When SLP vectorization can handle if-conversion on its own,\n-     predicate all of if-conversion on flag_tree_loop_vectorize.  */\n+  /* Either version this loop, or if the pattern is right for outer-loop\n+     vectorization, version the outer loop.  In the latter case we will\n+     still if-convert the original inner loop.  */\n   if ((any_pred_load_store || any_complicated_phi)\n       && !version_loop_for_if_conversion\n       (versionable_outer_loop_p (loop_outer (loop))"}]}