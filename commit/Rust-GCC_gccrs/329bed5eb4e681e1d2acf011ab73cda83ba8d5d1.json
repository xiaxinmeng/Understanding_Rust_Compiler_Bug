{"sha": "329bed5eb4e681e1d2acf011ab73cda83ba8d5d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI5YmVkNWViNGU2ODFlMWQyYWNmMDExYWI3M2NkYTgzYmE4ZDVkMQ==", "commit": {"author": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-09-16T02:10:43Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-09-16T02:10:43Z"}, "message": "Revert accidental commit of unrelated/unfinished changes.\n\nFrom-SVN: r87583", "tree": {"sha": "96483ba606a678747abcf70192fd36ca44175b0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96483ba606a678747abcf70192fd36ca44175b0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/329bed5eb4e681e1d2acf011ab73cda83ba8d5d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/329bed5eb4e681e1d2acf011ab73cda83ba8d5d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/329bed5eb4e681e1d2acf011ab73cda83ba8d5d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/329bed5eb4e681e1d2acf011ab73cda83ba8d5d1/comments", "author": null, "committer": null, "parents": [{"sha": "bb15588e23279341dc828f846f8a05d3c8b57d34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb15588e23279341dc828f846f8a05d3c8b57d34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb15588e23279341dc828f846f8a05d3c8b57d34"}], "stats": {"total": 90, "additions": 5, "deletions": 85}, "files": [{"sha": "66d25b22db3e40977a0376c18e8fe92a14625480", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 5, "deletions": 85, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329bed5eb4e681e1d2acf011ab73cda83ba8d5d1/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329bed5eb4e681e1d2acf011ab73cda83ba8d5d1/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=329bed5eb4e681e1d2acf011ab73cda83ba8d5d1", "patch": "@@ -1140,79 +1140,6 @@ gfc_trans_dt_end (gfc_code * code)\n   return gfc_finish_block (&block);\n }\n \n-static void\n-transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr);\n-\n-static tree\n-transfer_array_component (tree expr, gfc_component * cm)\n-{\n-  tree tmp;\n-  stmtblock_t body;\n-  stmtblock_t block;\n-  gfc_loopinfo loop;\n-  int n,i;\n-  gfc_ss *ss;\n-  gfc_se se;\n-  gfc_array_ref ar;\n-\n-  gfc_start_block (&block);\n-  gfc_init_se (&se, NULL);\n-\n-  ss = gfc_get_ss ();\n-  ss->type = GFC_SS_COMPONENT;\n-  ss->expr = NULL;\n-  ss->shape = gfc_get_shape (cm->as->rank);\n-  ss->next = gfc_ss_terminator;\n-  ss->data.info.dimen = cm->as->rank;\n-  ss->data.info.descriptor = expr;\n-  ss->data.info.data = gfc_conv_array_data (expr);\n-  ss->data.info.offset = gfc_conv_array_offset (expr);\n-  for (n = 0; n < cm->as->rank; n++)\n-    {\n-      ss->data.info.dim[n] = n;\n-      ss->data.info.start[n] = gfc_conv_array_lbound (expr, n);\n-      ss->data.info.stride[n] = gfc_index_one_node;\n-\n-      mpz_init (ss->shape[n]);\n-      mpz_sub (ss->shape[n], cm->as->upper[n]->value.integer,\n-               cm->as->lower[n]->value.integer);\n-      mpz_add_ui (ss->shape[n], ss->shape[n], 1);\n-    }\n-\n-  gfc_init_loopinfo (&loop);\n-  gfc_add_ss_to_loop (&loop, ss);\n-  gfc_conv_ss_startstride (&loop);\n-  gfc_conv_loop_setup (&loop);\n-  gfc_mark_ss_chain_used (ss, 1);\n-  gfc_start_scalarized_body (&loop, &body);\n-\n-  gfc_copy_loopinfo_to_se (&se, &loop);\n-  se.ss = ss;\n-  se.expr = expr;\n-\n-  ar.type = AR_FULL;\n-  ar.as = cm->as;\n-  ar.dimen = cm->as->rank;\n-  for (i = 0; i < cm->as->rank; i++)\n-    {\n-      ar.dimen_type[i] = DIMEN_RANGE;\n-      ar.start[i] = ar.end[i] = ar.stride[i] = NULL;\n-    }\n-  gfc_conv_array_ref (&se, &ar);\n-  tmp = gfc_build_addr_expr (NULL, se.expr);\n-  transfer_expr (&se, &cm->ts, tmp);\n-\n-  gfc_add_block_to_block (&body, &se.pre);\n-  gfc_add_block_to_block (&body, &se.post);\n-  gfc_trans_scalarizing_loops (&loop, &body);\n-  gfc_add_block_to_block (&loop.pre, &loop.post);\n-  tmp = gfc_finish_block (&loop.pre);\n-  gfc_cleanup_loop (&loop);\n-  for (n = 0; n < cm->as->rank; n++)\n-    mpz_clear (ss->shape[n]);\n-  gfc_free (ss->shape);\n-  return tmp;\n-}\n \n /* Generate the call for a scalar transfer node.  */\n \n@@ -1272,18 +1199,11 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr)\n \t      se->string_length =\n \t\tTYPE_MAX_VALUE (TYPE_DOMAIN (TREE_TYPE (tmp)));\n \t    }\n-\n-          if (c->dimension)\n-            {\n-              tmp = transfer_array_component (tmp, c);\n-              gfc_add_expr_to_block (&se->pre, tmp);\n-            }\n-          else\n-            {\n-              if (!c->pointer)\n-                tmp = gfc_build_addr_expr (NULL, tmp);\n-              transfer_expr (se, &c->ts, tmp);\n-            }\n+\t  if (c->dimension)\n+\t    gfc_todo_error (\"IO of arrays in derived types\");\n+\t  if (!c->pointer)\n+\t    tmp = gfc_build_addr_expr (NULL, tmp);\n+\t  transfer_expr (se, &c->ts, tmp);\n \t}\n       return;\n "}]}