{"sha": "0916f876074b952b3003300a273baa14e6dab8af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkxNmY4NzYwNzRiOTUyYjMwMDMzMDBhMjczYmFhMTRlNmRhYjhhZg==", "commit": {"author": {"name": "Yufeng Zhang", "email": "yufeng@gcc.gnu.org", "date": "2013-10-02T10:21:33Z"}, "committer": {"name": "Yufeng Zhang", "email": "yufeng@gcc.gnu.org", "date": "2013-10-02T10:21:33Z"}, "message": "gimple-ssa-strength-reduction.c (legal_cast_p_1): Forward declaration.\n\ngcc/\n\n\t* gimple-ssa-strength-reduction.c (legal_cast_p_1): Forward\n\tdeclaration.\n\t(backtrace_base_for_ref): Call get_unwidened with 'base_in' if\n\t'base_in' represent a conversion and legal_cast_p_1 holds; set\n\t'base_in' with the returned value from get_unwidened.\n\ngcc/testsuite/\n\n\t* gcc.dg/tree-ssa/slsr-40.c: New test.\n\nFrom-SVN: r203107", "tree": {"sha": "7cbf4cbc19fbaec019e8762b73c36e2e7d3de655", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cbf4cbc19fbaec019e8762b73c36e2e7d3de655"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0916f876074b952b3003300a273baa14e6dab8af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0916f876074b952b3003300a273baa14e6dab8af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0916f876074b952b3003300a273baa14e6dab8af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0916f876074b952b3003300a273baa14e6dab8af/comments", "author": null, "committer": null, "parents": [{"sha": "ebfcd719cf1ca5c186befb9ea013add7342b1cb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebfcd719cf1ca5c186befb9ea013add7342b1cb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebfcd719cf1ca5c186befb9ea013add7342b1cb2"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "76d188f491d03de3adbcc97f7368e67b7762abfb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0916f876074b952b3003300a273baa14e6dab8af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0916f876074b952b3003300a273baa14e6dab8af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0916f876074b952b3003300a273baa14e6dab8af", "patch": "@@ -1,3 +1,12 @@\n+2013-10-02  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\t    Yufeng Zhang  <yufeng.zhang@arm.com>\n+\n+\t* gimple-ssa-strength-reduction.c (legal_cast_p_1): Forward\n+\tdeclaration.\n+\t(backtrace_base_for_ref): Call get_unwidened with 'base_in' if\n+\t'base_in' represent a conversion and legal_cast_p_1 holds; set\n+\t'base_in' with the returned value from get_unwidened.\n+\n 2013-10-02  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/arm.c (arm_legitimize_reload_address): Explain why"}, {"sha": "9a5072c71bdc698e2e6d979b0b0cfc918c8a0838", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0916f876074b952b3003300a273baa14e6dab8af/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0916f876074b952b3003300a273baa14e6dab8af/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=0916f876074b952b3003300a273baa14e6dab8af", "patch": "@@ -379,6 +379,7 @@ static bool address_arithmetic_p;\n /* Forward function declarations.  */\n static slsr_cand_t base_cand_from_table (tree);\n static tree introduce_cast_before_cand (slsr_cand_t, tree, tree);\n+static bool legal_cast_p_1 (tree, tree);\n \f\n /* Produce a pointer to the IDX'th candidate in the candidate vector.  */\n \n@@ -768,6 +769,14 @@ backtrace_base_for_ref (tree *pbase)\n   slsr_cand_t base_cand;\n \n   STRIP_NOPS (base_in);\n+\n+  /* Strip off widening conversion(s) to handle cases where\n+     e.g. 'B' is widened from an 'int' in order to calculate\n+     a 64-bit address.  */\n+  if (CONVERT_EXPR_P (base_in)\n+      && legal_cast_p_1 (base_in, TREE_OPERAND (base_in, 0)))\n+    base_in = get_unwidened (base_in, NULL_TREE);\n+\n   if (TREE_CODE (base_in) != SSA_NAME)\n     return tree_to_double_int (integer_zero_node);\n "}, {"sha": "2fb3cc63e5c4bc73f542dcf7eb90d1d83d72f8bc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0916f876074b952b3003300a273baa14e6dab8af/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0916f876074b952b3003300a273baa14e6dab8af/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0916f876074b952b3003300a273baa14e6dab8af", "patch": "@@ -1,3 +1,7 @@\n+2013-10-02  Yufeng Zhang  <yufeng.zhang@arm.com>\n+\n+\t* gcc.dg/tree-ssa/slsr-40.c: New test.\n+\n 2013-10-01  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58563"}, {"sha": "72726a3aa3bbcd807754e9b8aa44608ba60376ed", "filename": "gcc/testsuite/gcc.dg/tree-ssa/slsr-40.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0916f876074b952b3003300a273baa14e6dab8af/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-40.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0916f876074b952b3003300a273baa14e6dab8af/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-40.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-40.c?ref=0916f876074b952b3003300a273baa14e6dab8af", "patch": "@@ -0,0 +1,27 @@\n+/* Verify straight-line strength reduction for array\n+   subscripting.\n+\n+   elems[n-1] is reduced to elems + n * 4 + 0xffffffff * 4, only when\n+   pointers are of the same size as that of int (assuming 4 bytes).  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+struct data\n+{\n+  unsigned long elms[1];\n+} gData;\n+\n+void __attribute__((noinline))\n+foo (struct data *dst, unsigned int n)\n+{\n+  dst->elms[n - 1] &= 1;\n+}\n+\n+int\n+main ()\n+{\n+  foo (&gData, 1);\n+  return 0;\n+}\n+"}]}