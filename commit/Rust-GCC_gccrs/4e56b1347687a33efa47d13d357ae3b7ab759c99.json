{"sha": "4e56b1347687a33efa47d13d357ae3b7ab759c99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU1NmIxMzQ3Njg3YTMzZWZhNDdkMTNkMzU3YWUzYjdhYjc1OWM5OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-06-16T06:56:21Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-06-16T06:58:28Z"}, "message": "tree-optimization/101083 - fix ICE with SLP reassoc\n\nThis makes us pass down the vector type for the two-operand\nSLP node build rather than picking that from operand one which,\nwhen constant or external, could be NULL.\n\n2021-06-16  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/101083\n\t* tree-vect-slp.c (vect_slp_build_two_operator_nodes): Get\n\tvectype as argument.\n\t(vect_build_slp_tree_2): Adjust.\n\n\t* gcc.dg/vect/pr97832-4.c: New testcase.", "tree": {"sha": "82d3c41342896bbe0cf80b8b43a8523b85de0afd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82d3c41342896bbe0cf80b8b43a8523b85de0afd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e56b1347687a33efa47d13d357ae3b7ab759c99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e56b1347687a33efa47d13d357ae3b7ab759c99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e56b1347687a33efa47d13d357ae3b7ab759c99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e56b1347687a33efa47d13d357ae3b7ab759c99/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ede6c3568f383f62df7bf9234212ee80763fdf6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ede6c3568f383f62df7bf9234212ee80763fdf6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ede6c3568f383f62df7bf9234212ee80763fdf6b"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "74ae27ff873a1b3bb93749531cafc4c9993f443c", "filename": "gcc/testsuite/gcc.dg/vect/pr97832-4.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e56b1347687a33efa47d13d357ae3b7ab759c99/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97832-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e56b1347687a33efa47d13d357ae3b7ab759c99/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97832-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97832-4.c?ref=4e56b1347687a33efa47d13d357ae3b7ab759c99", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Ofast\" } */\n+/* { dg-require-effective-target vect_double } */\n+\n+void foo1x1(double* restrict y, const double* restrict x, int clen)\n+{\n+  int xi = clen & 2;\n+  double f_re = x[0+xi+0];\n+  double f_im = x[4+xi+0];\n+  int clen2 = (clen+xi) * 2;\n+#pragma GCC unroll 0\n+  for (int c = 0; c < clen2; c += 8) {\n+#pragma GCC unroll 4\n+    for (int k = 0; k < 4; ++k) {\n+      double x_re = x[k];\n+      double x_im = x[c+4+k];\n+      double y_re = y[c+0+k];\n+      double y_im = y[c+4+k];\n+      y_re = y_re - x_re * f_re - x_im * f_im;;\n+      y_im = y_im + x_re * f_im - x_im * f_re;\n+      y[c+0+k] = y_re;\n+      y[c+4+k] = y_im;\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorizing stmts using SLP\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"Loop contains only SLP stmts\" \"vect\" } } */"}, {"sha": "8ec589b794801bb604f409274185dc457f38a7ee", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e56b1347687a33efa47d13d357ae3b7ab759c99/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e56b1347687a33efa47d13d357ae3b7ab759c99/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=4e56b1347687a33efa47d13d357ae3b7ab759c99", "patch": "@@ -1536,13 +1536,12 @@ vect_build_slp_tree (vec_info *vinfo,\n /* Helper for building an associated SLP node chain.  */\n \n static void\n-vect_slp_build_two_operator_nodes (slp_tree perm,\n+vect_slp_build_two_operator_nodes (slp_tree perm, tree vectype,\n \t\t\t\t   slp_tree op0, slp_tree op1,\n \t\t\t\t   stmt_vec_info oper1, stmt_vec_info oper2,\n \t\t\t\t   vec<std::pair<unsigned, unsigned> > lperm)\n {\n   unsigned group_size = SLP_TREE_LANES (op1);\n-  tree vectype = SLP_TREE_VECTYPE (op1);\n \n   slp_tree child1 = new _slp_tree;\n   SLP_TREE_DEF_TYPE (child1) = vect_internal_def;\n@@ -2087,7 +2086,7 @@ vect_build_slp_tree_2 (vec_info *vinfo, slp_tree node,\n \t\t  for (unsigned lane = 0; lane < group_size; ++lane)\n \t\t    lperm.quick_push (std::make_pair\n \t\t      (chains[lane][i].code != chains[0][i].code, lane));\n-\t\t  vect_slp_build_two_operator_nodes (child, op0, op1,\n+\t\t  vect_slp_build_two_operator_nodes (child, vectype, op0, op1,\n \t\t\t\t\t\t     (chains[0][i].code == code\n \t\t\t\t\t\t      ? op_stmt_info\n \t\t\t\t\t\t      : other_op_stmt_info),"}]}