{"sha": "213c2316b697c78344ba7d03b2e922c8229e8b35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjEzYzIzMTZiNjk3Yzc4MzQ0YmE3ZDAzYjJlOTIyYzgyMjllOGIzNQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-07-02T23:08:28Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-07-02T23:08:28Z"}, "message": "locale.cc (locale::locale(const char*)): Make sure global locales are initialized.\n\n\n2001-07-02  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* src/locale.cc (locale::locale(const char*)): Make sure global\n\tlocales are initialized.\n\t* include/bits/locale_facets.tcc (locale::combine): Refcout should\n\tbe zero, not one as it's return-by-value.\n\t* testsuite/27_io/ios_base_callbacks.cc (test01): Don't check for\n\tnamed locales here.\n\t* testsuite/22_locale/ctor_copy_dtor.cc (test01): Instead, check\n\tfor it here.\n\t(test02): Add test.\n\t* libsupc++/eh_alloc.cc: Use climits, not limits.h.\n\nFrom-SVN: r43713", "tree": {"sha": "b7c70c18995c1b35cea67a52cbf249a39eb5f33b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7c70c18995c1b35cea67a52cbf249a39eb5f33b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/213c2316b697c78344ba7d03b2e922c8229e8b35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/213c2316b697c78344ba7d03b2e922c8229e8b35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/213c2316b697c78344ba7d03b2e922c8229e8b35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/213c2316b697c78344ba7d03b2e922c8229e8b35/comments", "author": null, "committer": null, "parents": [{"sha": "30b3a033af6c62b95c16c3f26610753c0aaa4002", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30b3a033af6c62b95c16c3f26610753c0aaa4002", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30b3a033af6c62b95c16c3f26610753c0aaa4002"}], "stats": {"total": 47, "additions": 36, "deletions": 11}, "files": [{"sha": "6c582e2959e9d8c65cf2effa736b7c0031ce9f6f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213c2316b697c78344ba7d03b2e922c8229e8b35/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213c2316b697c78344ba7d03b2e922c8229e8b35/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=213c2316b697c78344ba7d03b2e922c8229e8b35", "patch": "@@ -1,10 +1,16 @@\n-2001-07-02  Loren J. Rittle  <ljrittle@acm.org>\n-\n-\tlibstdc++/3284\n-\t* acinclude.m4 (GLIBCPP_ENABLE_THREADS): Portability enhancement.\n-\t* aclocal.m4: Regenerate.\n-\t* configure: Regenerate.\n-\n+2001-07-02  Benjamin Kosnik  <bkoz@redhat.com>\n+\t\n+\t* src/locale.cc (locale::locale(const char*)): Make sure global\n+\tlocales are initialized.\n+\t* include/bits/locale_facets.tcc (locale::combine): Refcout should\n+\tbe zero, not one as it's return-by-value.\n+\t* testsuite/27_io/ios_base_callbacks.cc (test01): Don't check for\n+\tnamed locales here.\n+\t* testsuite/22_locale/ctor_copy_dtor.cc (test01): Instead, check\n+\tfor it here.\n+\t(test02): Add test.\n+\t* libsupc++/eh_alloc.cc: Use climits, not limits.h.\n+\t\n 2001-07-02  Loren J. Rittle  <ljrittle@acm.org>\n \n \tlibstdc++/3243"}, {"sha": "6eceed1ea59c7e6289a5049736a85b222ad5ae5d", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213c2316b697c78344ba7d03b2e922c8229e8b35/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213c2316b697c78344ba7d03b2e922c8229e8b35/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=213c2316b697c78344ba7d03b2e922c8229e8b35", "patch": "@@ -48,7 +48,7 @@ namespace std\n     locale\n     locale::combine(const locale& __other)\n     {\n-      _Impl* __tmp = new _Impl(*_M_impl, 1);\n+      _Impl* __tmp = new _Impl(*_M_impl, 0);\n       __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);\n       return locale(__tmp);\n     }"}, {"sha": "1f59ec463946838619ad39e43cd00291d3ee9dc6", "filename": "libstdc++-v3/libsupc++/eh_alloc.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213c2316b697c78344ba7d03b2e922c8229e8b35/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213c2316b697c78344ba7d03b2e922c8229e8b35/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc?ref=213c2316b697c78344ba7d03b2e922c8229e8b35", "patch": "@@ -33,7 +33,7 @@\n #include <exception>\n #include <cstdlib>\n #include <cstring>\n-#include <limits.h>\n+#include <climits>\n #include \"unwind-cxx.h\"\n #include \"bits/c++config.h\"\n #include \"bits/gthr.h\""}, {"sha": "fb0b406eed4b7d11e401e8c8a04e6c707f895043", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213c2316b697c78344ba7d03b2e922c8229e8b35/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213c2316b697c78344ba7d03b2e922c8229e8b35/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=213c2316b697c78344ba7d03b2e922c8229e8b35", "patch": "@@ -371,6 +371,7 @@ namespace std\n   {\n     if (__s)\n       {\n+\t_S_initialize(); \n \tif (strcmp(__s, \"C\") == 0 || strcmp(__s, \"POSIX\") == 0)\n \t  (_M_impl = _S_classic)->_M_add_reference();\n \telse"}, {"sha": "7269d231da36b6904a46ab44404402d96db60247", "filename": "libstdc++-v3/testsuite/22_locale/ctor_copy_dtor.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213c2316b697c78344ba7d03b2e922c8229e8b35/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctor_copy_dtor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213c2316b697c78344ba7d03b2e922c8229e8b35/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctor_copy_dtor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctor_copy_dtor.cc?ref=213c2316b697c78344ba7d03b2e922c8229e8b35", "patch": "@@ -25,6 +25,14 @@\n #include <stdexcept>\n #include <debug_assert.h>\n \n+\n+void test00()\n+{\n+  // Should be able to do this as the first thing that happens in a\n+  // file and have it not crash.\n+  std::locale loc(\"C\");\n+}\n+\n #if _GLIBCPP_USE_WCHAR_T\n typedef std::codecvt<char, char, std::mbstate_t> \t      c_codecvt;\n typedef std::codecvt_byname<char, char, std::mbstate_t>       c_codecvt_byname;\n@@ -126,6 +134,13 @@ void test01()\n   catch(...)\n     { VERIFY (false); }\n \n+  try\n+    { locale loc08(\"saturn_SUN*RA\"); }\n+  catch(runtime_error& obj)\n+    { VERIFY (true); }\n+  catch(...)\n+    { VERIFY (false); }\n+\n   // 4\n   // locale(const locale& other, const char* std_name, category)\n   {\n@@ -226,6 +241,8 @@ void test01()\n \n int main ()\n {\n+  test00();\n+\n #if _GLIBCPP_USE_WCHAR_T\n   test01();\n #endif "}, {"sha": "84ca815e3564966ee41d393bf0e6e6f5632ab305", "filename": "libstdc++-v3/testsuite/27_io/ios_base_callbacks.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213c2316b697c78344ba7d03b2e922c8229e8b35/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base_callbacks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213c2316b697c78344ba7d03b2e922c8229e8b35/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base_callbacks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base_callbacks.cc?ref=213c2316b697c78344ba7d03b2e922c8229e8b35", "patch": "@@ -42,14 +42,14 @@ callb03(std::ios_base::event e,  std::ios_base& b, int i)\n bool test01() \n {\n   bool test = true;\n-  std::locale locco(\"saturn_SUN*RA\");\n+  std::locale loc(\"C\");\n   std::stringbuf \tstrbuf01;\n   std::ios\t\tios01(&strbuf01);\n \n   ios01.register_callback(callb03, 1);\n   ios01.register_callback(callb02, 1);\n   ios01.register_callback(callb01, 1);\n-  ios01.imbue(locco);\n+  ios01.imbue(loc);\n   VERIFY( str01 == str02 );\n \n #ifdef DEBUG_ASSERT\n@@ -66,3 +66,4 @@ int main(void)\n \n   return 0;\n }\n+"}]}