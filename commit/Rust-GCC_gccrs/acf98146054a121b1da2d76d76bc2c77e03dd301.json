{"sha": "acf98146054a121b1da2d76d76bc2c77e03dd301", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNmOTgxNDYwNTRhMTIxYjFkYTJkNzZkNzZiYzJjNzdlMDNkZDMwMQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2011-05-12T18:35:05Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-05-12T18:35:05Z"}, "message": "Fix bug with taking address of a variable when address does not escape.\n\n\t* go-gcc.cc (Gcc_backend::local_variable): Add is_address_taken\n\tparameter.\n\t(Gcc_backend::parameter_variable): Likewise.\n\nFrom-SVN: r173712", "tree": {"sha": "82ff0959989caa861c84bff4e6205b529671db90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82ff0959989caa861c84bff4e6205b529671db90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acf98146054a121b1da2d76d76bc2c77e03dd301", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acf98146054a121b1da2d76d76bc2c77e03dd301", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acf98146054a121b1da2d76d76bc2c77e03dd301", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acf98146054a121b1da2d76d76bc2c77e03dd301/comments", "author": null, "committer": null, "parents": [{"sha": "1d15f620aa4e68f6298491d52ca8cc8d496457a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d15f620aa4e68f6298491d52ca8cc8d496457a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d15f620aa4e68f6298491d52ca8cc8d496457a6"}], "stats": {"total": 117, "additions": 91, "deletions": 26}, "files": [{"sha": "63a47c1efcd7faf2061eb3d077606da384b95a35", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf98146054a121b1da2d76d76bc2c77e03dd301/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf98146054a121b1da2d76d76bc2c77e03dd301/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=acf98146054a121b1da2d76d76bc2c77e03dd301", "patch": "@@ -1,3 +1,9 @@\n+2011-05-12  Ian Lance Taylor  <iant@google.com>\n+\n+\t* go-gcc.cc (Gcc_backend::local_variable): Add is_address_taken\n+\tparameter.\n+\t(Gcc_backend::parameter_variable): Likewise.\n+\n 2011-05-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* go-lang.c (global_bindings_p): Return bool and simplify."}, {"sha": "49f574a58fd227689944409c462c1ef1d5eb091b", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf98146054a121b1da2d76d76bc2c77e03dd301/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf98146054a121b1da2d76d76bc2c77e03dd301/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=acf98146054a121b1da2d76d76bc2c77e03dd301", "patch": "@@ -260,11 +260,11 @@ class Gcc_backend : public Backend\n   global_variable_set_init(Bvariable*, Bexpression*);\n \n   Bvariable*\n-  local_variable(Bfunction*, const std::string& name, Btype* type,\n+  local_variable(Bfunction*, const std::string&, Btype*, bool,\n \t\t source_location);\n \n   Bvariable*\n-  parameter_variable(Bfunction*, const std::string& name, Btype* type,\n+  parameter_variable(Bfunction*, const std::string&, Btype*, bool,\n \t\t     source_location);\n \n   Bvariable*\n@@ -1074,7 +1074,8 @@ Gcc_backend::global_variable_set_init(Bvariable* var, Bexpression* expr)\n \n Bvariable*\n Gcc_backend::local_variable(Bfunction* function, const std::string& name,\n-\t\t\t    Btype* btype, source_location location)\n+\t\t\t    Btype* btype, bool is_address_taken,\n+\t\t\t    source_location location)\n {\n   tree type_tree = btype->get_tree();\n   if (type_tree == error_mark_node)\n@@ -1084,6 +1085,8 @@ Gcc_backend::local_variable(Bfunction* function, const std::string& name,\n \t\t\t type_tree);\n   DECL_CONTEXT(decl) = function->get_tree();\n   TREE_USED(decl) = 1;\n+  if (is_address_taken)\n+    TREE_ADDRESSABLE(decl) = 1;\n   go_preserve_from_gc(decl);\n   return new Bvariable(decl);\n }\n@@ -1092,7 +1095,8 @@ Gcc_backend::local_variable(Bfunction* function, const std::string& name,\n \n Bvariable*\n Gcc_backend::parameter_variable(Bfunction* function, const std::string& name,\n-\t\t\t\tBtype* btype, source_location location)\n+\t\t\t\tBtype* btype, bool is_address_taken,\n+\t\t\t\tsource_location location)\n {\n   tree type_tree = btype->get_tree();\n   if (type_tree == error_mark_node)\n@@ -1103,6 +1107,8 @@ Gcc_backend::parameter_variable(Bfunction* function, const std::string& name,\n   DECL_CONTEXT(decl) = function->get_tree();\n   DECL_ARG_TYPE(decl) = type_tree;\n   TREE_USED(decl) = 1;\n+  if (is_address_taken)\n+    TREE_ADDRESSABLE(decl) = 1;\n   go_preserve_from_gc(decl);\n   return new Bvariable(decl);\n }"}, {"sha": "fa158be5ad141cc8d043ee2eccab376b735261a5", "filename": "gcc/go/gofrontend/backend.h", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf98146054a121b1da2d76d76bc2c77e03dd301/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf98146054a121b1da2d76d76bc2c77e03dd301/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fbackend.h?ref=acf98146054a121b1da2d76d76bc2c77e03dd301", "patch": "@@ -317,19 +317,23 @@ class Backend\n   // Create a local variable.  The frontend will create the local\n   // variables first, and then create the block which contains them.\n   // FUNCTION is the function in which the variable is defined.  NAME\n-  // is the name of the variable.  TYPE is the type.  LOCATION is\n-  // where the variable is defined.  For each local variable the\n-  // frontend will call init_statement to set the initial value.\n+  // is the name of the variable.  TYPE is the type.  IS_ADDRESS_TAKEN\n+  // is true if the address of this variable is taken (this implies\n+  // that the address does not escape the function, as otherwise the\n+  // variable would be on the heap).  LOCATION is where the variable\n+  // is defined.  For each local variable the frontend will call\n+  // init_statement to set the initial value.\n   virtual Bvariable*\n   local_variable(Bfunction* function, const std::string& name, Btype* type,\n-\t\t source_location location) = 0;\n+\t\t bool is_address_taken, source_location location) = 0;\n \n   // Create a function parameter.  This is an incoming parameter, not\n   // a result parameter (result parameters are treated as local\n   // variables).  The arguments are as for local_variable.\n   virtual Bvariable*\n   parameter_variable(Bfunction* function, const std::string& name,\n-\t\t     Btype* type, source_location location) = 0;\n+\t\t     Btype* type, bool is_address_taken,\n+\t\t     source_location location) = 0;\n \n   // Create a temporary variable.  A temporary variable has no name,\n   // just a type.  We pass in FUNCTION and BLOCK in case they are"}, {"sha": "10618759af44cf39f4beb2bb43d7315189104fb7", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf98146054a121b1da2d76d76bc2c77e03dd301/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf98146054a121b1da2d76d76bc2c77e03dd301/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=acf98146054a121b1da2d76d76bc2c77e03dd301", "patch": "@@ -958,13 +958,23 @@ void\n Var_expression::do_address_taken(bool escapes)\n {\n   if (!escapes)\n-    ;\n-  else if (this->variable_->is_variable())\n-    this->variable_->var_value()->set_address_taken();\n-  else if (this->variable_->is_result_variable())\n-    this->variable_->result_var_value()->set_address_taken();\n+    {\n+      if (this->variable_->is_variable())\n+\tthis->variable_->var_value()->set_non_escaping_address_taken();\n+      else if (this->variable_->is_result_variable())\n+\tthis->variable_->result_var_value()->set_non_escaping_address_taken();\n+      else\n+\tgo_unreachable();\n+    }\n   else\n-    go_unreachable();\n+    {\n+      if (this->variable_->is_variable())\n+\tthis->variable_->var_value()->set_address_taken();\n+      else if (this->variable_->is_result_variable())\n+\tthis->variable_->result_var_value()->set_address_taken();\n+      else\n+\tgo_unreachable();\n+    }\n }\n \n // Get the tree for a reference to a variable."}, {"sha": "c7b847fb4d1ab2002a942194ac2a241ee691c8d7", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf98146054a121b1da2d76d76bc2c77e03dd301/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf98146054a121b1da2d76d76bc2c77e03dd301/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=acf98146054a121b1da2d76d76bc2c77e03dd301", "patch": "@@ -3333,10 +3333,11 @@ Variable::Variable(Type* type, Expression* init, bool is_global,\n   : type_(type), init_(init), preinit_(NULL), location_(location),\n     backend_(NULL), is_global_(is_global), is_parameter_(is_parameter),\n     is_receiver_(is_receiver), is_varargs_parameter_(false),\n-    is_address_taken_(false), seen_(false), init_is_lowered_(false),\n-    type_from_init_tuple_(false), type_from_range_index_(false),\n-    type_from_range_value_(false), type_from_chan_element_(false),\n-    is_type_switch_var_(false), determined_type_(false)\n+    is_address_taken_(false), is_non_escaping_address_taken_(false),\n+    seen_(false), init_is_lowered_(false), type_from_init_tuple_(false),\n+    type_from_range_index_(false), type_from_range_value_(false),\n+    type_from_chan_element_(false), is_type_switch_var_(false),\n+    determined_type_(false)\n {\n   go_assert(type != NULL || init != NULL);\n   go_assert(!is_parameter || init == NULL);\n@@ -3722,11 +3723,15 @@ Variable::get_backend_variable(Gogo* gogo, Named_object* function,\n \t    {\n \t      tree fndecl = function->func_value()->get_decl();\n \t      Bfunction* bfunction = tree_to_function(fndecl);\n+\t      bool is_address_taken = (this->is_non_escaping_address_taken_\n+\t\t\t\t       && !this->is_in_heap());\n \t      if (is_parameter)\n \t\tbvar = backend->parameter_variable(bfunction, n, btype,\n+\t\t\t\t\t\t   is_address_taken,\n \t\t\t\t\t\t   this->location_);\n \t      else\n \t\tbvar = backend->local_variable(bfunction, n, btype,\n+\t\t\t\t\t       is_address_taken,\n \t\t\t\t\t       this->location_);\n \t    }\n \t  this->backend_ = bvar;\n@@ -3757,7 +3762,10 @@ Result_variable::get_backend_variable(Gogo* gogo, Named_object* function,\n \t  tree fndecl = function->func_value()->get_decl();\n \t  Bfunction* bfunction = tree_to_function(fndecl);\n \t  std::string n = Gogo::unpack_hidden_name(name);\n+\t  bool is_address_taken = (this->is_non_escaping_address_taken_\n+\t\t\t\t   && !this->is_in_heap());\n \t  this->backend_ = backend->local_variable(bfunction, n, btype,\n+\t\t\t\t\t\t   is_address_taken,\n \t\t\t\t\t\t   this->location_);\n \t}\n     }"}, {"sha": "ed9d1eb76f111cad2d4bde8f87ee2bcb3496445d", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 38, "deletions": 7, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf98146054a121b1da2d76d76bc2c77e03dd301/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf98146054a121b1da2d76d76bc2c77e03dd301/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=acf98146054a121b1da2d76d76bc2c77e03dd301", "patch": "@@ -1160,6 +1160,22 @@ class Variable\n   is_in_heap() const\n   { return this->is_address_taken_ && !this->is_global_; }\n \n+  // Note that something takes the address of this variable.\n+  void\n+  set_address_taken()\n+  { this->is_address_taken_ = true; }\n+\n+  // Return whether the address is taken but does not escape.\n+  bool\n+  is_non_escaping_address_taken() const\n+  { return this->is_non_escaping_address_taken_; }\n+\n+  // Note that something takes the address of this variable such that\n+  // the address does not escape the function.\n+  void\n+  set_non_escaping_address_taken()\n+  { this->is_non_escaping_address_taken_ = true; }\n+\n   // Get the source location of the variable's declaration.\n   source_location\n   location() const\n@@ -1252,11 +1268,6 @@ class Variable\n   void\n   determine_type();\n \n-  // Note that something takes the address of this variable.\n-  void\n-  set_address_taken()\n-  { this->is_address_taken_ = true; }\n-\n   // Get the backend representation of the variable.\n   Bvariable*\n   get_backend_variable(Gogo*, Named_object*, const Package*,\n@@ -1314,8 +1325,13 @@ class Variable\n   bool is_receiver_ : 1;\n   // Whether this is the varargs parameter of a function.\n   bool is_varargs_parameter_ : 1;\n-  // Whether something takes the address of this variable.\n+  // Whether something takes the address of this variable.  For a\n+  // local variable this implies that the variable has to be on the\n+  // heap.\n   bool is_address_taken_ : 1;\n+  // Whether something takes the address of this variable such that\n+  // the address does not escape the function.\n+  bool is_non_escaping_address_taken_ : 1;\n   // True if we have seen this variable in a traversal.\n   bool seen_ : 1;\n   // True if we have lowered the initialization expression.\n@@ -1343,7 +1359,8 @@ class Result_variable\n   Result_variable(Type* type, Function* function, int index,\n \t\t  source_location location)\n     : type_(type), function_(function), index_(index), location_(location),\n-      backend_(NULL), is_address_taken_(false)\n+      backend_(NULL), is_address_taken_(false),\n+      is_non_escaping_address_taken_(false)\n   { }\n \n   // Get the type of the result variable.\n@@ -1376,6 +1393,17 @@ class Result_variable\n   set_address_taken()\n   { this->is_address_taken_ = true; }\n \n+  // Return whether the address is taken but does not escape.\n+  bool\n+  is_non_escaping_address_taken() const\n+  { return this->is_non_escaping_address_taken_; }\n+\n+  // Note that something takes the address of this variable such that\n+  // the address does not escape the function.\n+  void\n+  set_non_escaping_address_taken()\n+  { this->is_non_escaping_address_taken_ = true; }\n+\n   // Whether this variable should live in the heap.\n   bool\n   is_in_heap() const\n@@ -1404,6 +1432,9 @@ class Result_variable\n   Bvariable* backend_;\n   // Whether something takes the address of this variable.\n   bool is_address_taken_;\n+  // Whether something takes the address of this variable such that\n+  // the address does not escape the function.\n+  bool is_non_escaping_address_taken_;\n };\n \n // The value we keep for a named constant.  This lets us hold a type"}]}