{"sha": "ab04995c1c747f8799e43d8c562343843b6fa0c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWIwNDk5NWMxYzc0N2Y4Nzk5ZTQzZDhjNTYyMzQzODQzYjZmYTBjNA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2016-02-09T22:31:31Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2016-02-09T22:31:31Z"}, "message": "re PR bootstrap/68404 (PGO/LTO bootstrap failure on ppc64le)\n\n[gcc]\n2016-02-09  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/68404\n\t* config/rs6000/predicates.md (fusion_gpr_addis): Prevent fusing\n\tan ADDIS that adds a pointer to a large constant that sets the\n\tupper16 bits with a load operation.\n\n[gcc/testsuite]\n2016-02-09  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/68404\n\t* gcc.target/powerpc/fusion.c: Rewrite test to use TOC fusion\n\tinstead accessing a really large arrray.\n\t* gcc.target/powerpc/fusion3.c: Likewise.\n\nFrom-SVN: r233255", "tree": {"sha": "bd752c6b98e4e55c379f2e075e8c5060f4dd5dd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd752c6b98e4e55c379f2e075e8c5060f4dd5dd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab04995c1c747f8799e43d8c562343843b6fa0c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab04995c1c747f8799e43d8c562343843b6fa0c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab04995c1c747f8799e43d8c562343843b6fa0c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab04995c1c747f8799e43d8c562343843b6fa0c4/comments", "author": null, "committer": null, "parents": [{"sha": "af583c4457feefe6ed9b71f46cb64bccba6c7450", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af583c4457feefe6ed9b71f46cb64bccba6c7450", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af583c4457feefe6ed9b71f46cb64bccba6c7450"}], "stats": {"total": 83, "additions": 54, "deletions": 29}, "files": [{"sha": "4e9dd7d17cf61915f47993b5b16b47984240205e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab04995c1c747f8799e43d8c562343843b6fa0c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab04995c1c747f8799e43d8c562343843b6fa0c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab04995c1c747f8799e43d8c562343843b6fa0c4", "patch": "@@ -1,3 +1,10 @@\n+2016-02-09  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/68404\n+\t* config/rs6000/predicates.md (fusion_gpr_addis): Prevent fusing\n+\tan ADDIS that adds a pointer to a large constant that sets the\n+\tupper16 bits with a load operation.\n+\n 2016-02-09  Charles Baylis  <charles.baylis@linaro.org>\n \n \tPR target/68532"}, {"sha": "b0ab1d5fb792795d788f88d254216baa2ebd5f3a", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab04995c1c747f8799e43d8c562343843b6fa0c4/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab04995c1c747f8799e43d8c562343843b6fa0c4/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=ab04995c1c747f8799e43d8c562343843b6fa0c4", "patch": "@@ -1708,23 +1708,14 @@\n   (match_code \"const_int,high,plus\")\n {\n   HOST_WIDE_INT value;\n-  rtx int_const;\n \n   if (GET_CODE (op) == HIGH)\n     return 1;\n \n-  if (CONST_INT_P (op))\n-    int_const = op;\n-\n-  else if (GET_CODE (op) == PLUS\n-\t   && base_reg_operand (XEXP (op, 0), Pmode)\n-\t   && CONST_INT_P (XEXP (op, 1)))\n-    int_const = XEXP (op, 1);\n-\n-  else\n+  if (!CONST_INT_P (op))\n     return 0;\n \n-  value = INTVAL (int_const);\n+  value = INTVAL (op);\n   if ((value & (HOST_WIDE_INT)0xffff) != 0)\n     return 0;\n "}, {"sha": "3dad666bd3431395ed6cfd1585f957f6037b8f4c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab04995c1c747f8799e43d8c562343843b6fa0c4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab04995c1c747f8799e43d8c562343843b6fa0c4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ab04995c1c747f8799e43d8c562343843b6fa0c4", "patch": "@@ -1,3 +1,10 @@\n+2016-02-09  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/68404\n+\t* gcc.target/powerpc/fusion.c: Rewrite test to use TOC fusion\n+\tinstead accessing a really large arrray.\n+\t* gcc.target/powerpc/fusion3.c: Likewise.\n+\n 2016-02-09  Charles Baylis  <charles.baylis@linaro.org>\n \n \tPR target/68532"}, {"sha": "6f11c503ebbebd750b49cbb9bce90455ad807fa0", "filename": "gcc/testsuite/gcc.target/powerpc/fusion.c", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab04995c1c747f8799e43d8c562343843b6fa0c4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab04995c1c747f8799e43d8c562343843b6fa0c4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion.c?ref=ab04995c1c747f8799e43d8c562343843b6fa0c4", "patch": "@@ -1,17 +1,28 @@\n-/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power7\" } } */\n-/* { dg-options \"-mcpu=power7 -mtune=power8 -O3\" } */\n+/* { dg-options \"-mcpu=power7 -mtune=power8 -O3 -mcmodel=medium\" } */\n \n-#define LARGE 0x12345\n+#define SIZE 4\n+struct foo {\n+  unsigned char uc;\n+  signed char sc;\n+  unsigned short us;\n+  short ss;\n+  int i;\n+  unsigned u;\n+};\n \n-int fusion_uchar (unsigned char *p){ return p[LARGE]; }\n-int fusion_schar (signed char *p){ return p[LARGE]; }\n-int fusion_ushort (unsigned short *p){ return p[LARGE]; }\n-int fusion_short (short *p){ return p[LARGE]; }\n-int fusion_int (int *p){ return p[LARGE]; }\n-unsigned fusion_uns (unsigned *p){ return p[LARGE]; }\n+static struct foo st[SIZE];\n+struct foo *ptr_st = &st[0];\n+\n+int fusion_uchar (void){ return st[SIZE-1].uc; }\n+int fusion_schar (void){ return st[SIZE-1].sc; }\n+int fusion_ushort (void){ return st[SIZE-1].us; }\n+int fusion_short (void){ return st[SIZE-1].ss; }\n+int fusion_int (void){ return st[SIZE-1].i; }\n+unsigned fusion_uns (void){ return st[SIZE-1].u; }\n \n /* { dg-final { scan-assembler-times \"gpr load fusion\"    6 } } */\n /* { dg-final { scan-assembler-times \"lbz\"                2 } } */"}, {"sha": "2a8135de60d149966687b1e35ae50fc64664b998", "filename": "gcc/testsuite/gcc.target/powerpc/fusion3.c", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab04995c1c747f8799e43d8c562343843b6fa0c4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab04995c1c747f8799e43d8c562343843b6fa0c4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion3.c?ref=ab04995c1c747f8799e43d8c562343843b6fa0c4", "patch": "@@ -4,15 +4,24 @@\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power7\" } } */\n /* { dg-options \"-mcpu=power7 -mtune=power9 -O3\" } */\n \n-#define LARGE 0x12345\n+#define SIZE 4\n+struct foo {\n+  float f;\n+  double d;\n+};\n \n-int fusion_float_read (float *p){ return p[LARGE]; }\n-int fusion_double_read (double *p){ return p[LARGE]; }\n+static struct foo st[SIZE];\n+struct foo *ptr_st = &st[0];\n \n-void fusion_float_write (float *p, float f){ p[LARGE] = f; }\n-void fusion_double_write (double *p, double d){ p[LARGE] = d; }\n+float fusion_float_read (void){ return st[SIZE].f; }\n+double fusion_float_extend (void){ return (double)st[SIZE].f; }\n+double fusion_double_read (void){ return st[SIZE].d; }\n \n-/* { dg-final { scan-assembler \"load fusion, type SF\"  } } */\n-/* { dg-final { scan-assembler \"load fusion, type DF\"  } } */\n-/* { dg-final { scan-assembler \"store fusion, type SF\" } } */\n-/* { dg-final { scan-assembler \"store fusion, type DF\" } } */\n+void fusion_float_write (float f){ st[SIZE].f = f; }\n+void fusion_float_truncate (double d){ st[SIZE].f = (float)d; }\n+void fusion_double_write (double d){ st[SIZE].d = d; }\n+\n+/* { dg-final { scan-assembler-times \"load fusion, type SF\"  2 } } */\n+/* { dg-final { scan-assembler-times \"load fusion, type DF\"  1 } } */\n+/* { dg-final { scan-assembler-times \"store fusion, type SF\" 2 } } */\n+/* { dg-final { scan-assembler-times \"store fusion, type DF\" 1 } } */"}]}