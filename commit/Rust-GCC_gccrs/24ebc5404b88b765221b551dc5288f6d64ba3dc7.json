{"sha": "24ebc5404b88b765221b551dc5288f6d64ba3dc7", "node_id": "C_kwDOANBUbNoAKDI0ZWJjNTQwNGI4OGI3NjUyMjFiNTUxZGM1Mjg4ZjZkNjRiYTNkYzc", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-03-01T22:24:32Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-03-01T22:24:32Z"}, "message": "analyzer: fixes to side-effects for built-in functions [PR107565]\n\nPreviously, if the analyzer saw a call to a non-pure and non-const\nbuilt-in function that it didn't have explicit knowledge of the behavior\nof, it would fall back to assuming that the builtin could have arbitrary\nbehavior, similar to a function defined outside of the current TU.\n\nHowever, this only worked for BUILTIN_NORMAL functions that matched\ngimple_builtin_call_types_compatible_p; for BUILT_IN_FRONTEND and\nBUILT_IN_MD, and for mismatched types the analyzer would erroneously\nassume that the builtin had no side-effects, leading e.g. to\nPR analyzer/107565, where the analyzer falsely reported that x\nwas still uninitialized after this target-specific builtin:\n\n  _1 = __builtin_ia32_rdrand64_step (&x);\n\nThis patch generalizes the handling to cover all classes of builtin,\nfixing the above false positive.\n\nUnfortunately this patch regresses gcc.dg/analyzer/pr99716-1.c due to\nthe:\n  fprintf (fp, \"hello\");\nbeing optimized to:\n   __builtin_fwrite (\"hello\", 1, (ssizetype)5, fp_6);\nand the latter has gimple_builtin_call_types_compatible_p return false,\nwhereas the original call had it return true.  I'm assuming that this is\nan optimization bug, and have filed it as PR middle-end/108988.  The\neffect on the analyzer is that it fails to recognize the call to\n__builtin_fwrite and instead assumes arbitraty side-effects (including\nthat it could call fclose on fp, hence the report about the leak goes\naway).\n\nI tried various more involved fixes with new heuristics for handling\nbuilt-ins that aren't explicitly covered by the analyzer, but those\nfixes tended to introduce many more regressions, so I'm going with this\nsimpler fix.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/107565\n\t* region-model.cc (region_model::on_call_pre): Flatten logic by\n\treturning early.  Consolidate logic for detecting const and pure\n\tfunctions.  When considering whether an unhandled built-in\n\tfunction has side-effects, consider all kinds of builtin, rather\n\tthan just BUILT_IN_NORMAL, and don't require\n\tgimple_builtin_call_types_compatible_p.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/107565\n\t* gcc.dg/analyzer/builtins-pr107565.c: New test.\n\t* gcc.dg/analyzer/pr99716-1.c (test_2): Mark the leak as xfailing.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "07fee81451984912a9f7178e001b7029e614a35c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07fee81451984912a9f7178e001b7029e614a35c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24ebc5404b88b765221b551dc5288f6d64ba3dc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24ebc5404b88b765221b551dc5288f6d64ba3dc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24ebc5404b88b765221b551dc5288f6d64ba3dc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24ebc5404b88b765221b551dc5288f6d64ba3dc7/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c54cae823f5243eb63f6de2e2e104aa161db912f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c54cae823f5243eb63f6de2e2e104aa161db912f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c54cae823f5243eb63f6de2e2e104aa161db912f"}], "stats": {"total": 79, "additions": 53, "deletions": 26}, "files": [{"sha": "2187aecbe9127fc6d29dab78f91ffb8a16b573e7", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 19, "deletions": 25, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24ebc5404b88b765221b551dc5288f6d64ba3dc7/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24ebc5404b88b765221b551dc5288f6d64ba3dc7/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=24ebc5404b88b765221b551dc5288f6d64ba3dc7", "patch": "@@ -1477,8 +1477,6 @@ region_model::on_call_pre (const gcall *call, region_model_context *ctxt)\n {\n   call_details cd (call, this, ctxt);\n \n-  bool unknown_side_effects = false;\n-\n   /* Special-case for IFN_DEFERRED_INIT.\n      We want to report uninitialized variables with -fanalyzer (treating\n      -ftrivial-auto-var-init= as purely a mitigation feature).\n@@ -1487,7 +1485,7 @@ region_model::on_call_pre (const gcall *call, region_model_context *ctxt)\n      view of the analyzer.  */\n   if (gimple_call_internal_p (call)\n       && gimple_call_internal_fn (call) == IFN_DEFERRED_INIT)\n-    return false;\n+    return false; /* No side effects.  */\n \n   /* Get svalues for all of the arguments at the callsite, to ensure that we\n      complain about any uninitialized arguments.  This might lead to\n@@ -1532,33 +1530,29 @@ region_model::on_call_pre (const gcall *call, region_model_context *ctxt)\n \t  = get_known_function (gimple_call_internal_fn (call)))\n       {\n \tkf->impl_call_pre (cd);\n-\treturn false;\n+\treturn false; /* No further side effects.  */\n       }\n \n-  if (callee_fndecl)\n-    {\n-      int callee_fndecl_flags = flags_from_decl_or_type (callee_fndecl);\n+  if (!callee_fndecl)\n+    return true; /* Unknown side effects.  */\n \n-      if (const known_function *kf = get_known_function (callee_fndecl, cd))\n-\t{\n-\t  kf->impl_call_pre (cd);\n-\t  return false;\n-\t}\n-      else if (fndecl_built_in_p (callee_fndecl, BUILT_IN_NORMAL)\n-\t  && gimple_builtin_call_types_compatible_p (call, callee_fndecl))\n-\t{\n-\t  if (!(callee_fndecl_flags & (ECF_CONST | ECF_PURE)))\n-\t    unknown_side_effects = true;\n-\t}\n-      else if (!fndecl_has_gimple_body_p (callee_fndecl)\n-\t       && (!(callee_fndecl_flags & (ECF_CONST | ECF_PURE)))\n-\t       && !fndecl_built_in_p (callee_fndecl))\n-\tunknown_side_effects = true;\n+  if (const known_function *kf = get_known_function (callee_fndecl, cd))\n+    {\n+      kf->impl_call_pre (cd);\n+      return false; /* No further side effects.  */\n     }\n-  else\n-    unknown_side_effects = true;\n \n-  return unknown_side_effects;\n+  const int callee_fndecl_flags = flags_from_decl_or_type (callee_fndecl);\n+  if (callee_fndecl_flags & (ECF_CONST | ECF_PURE))\n+    return false; /* No side effects.  */\n+\n+  if (fndecl_built_in_p (callee_fndecl))\n+    return true; /* Unknown side effects.  */\n+\n+  if (!fndecl_has_gimple_body_p (callee_fndecl))\n+    return true; /* Unknown side effects.  */\n+\n+  return false; /* No side effects.  */\n }\n \n /* Update this model for the CALL stmt, using CTXT to report any"}, {"sha": "fb340aa5981bde2ae7be39c0f96f5fc16a101a87", "filename": "gcc/testsuite/gcc.dg/analyzer/builtins-pr107565.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24ebc5404b88b765221b551dc5288f6d64ba3dc7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fbuiltins-pr107565.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24ebc5404b88b765221b551dc5288f6d64ba3dc7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fbuiltins-pr107565.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fbuiltins-pr107565.c?ref=24ebc5404b88b765221b551dc5288f6d64ba3dc7", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile { target { x86_64-*-* && lp64 } } } */\n+/* { dg-additional-options \"-mrdrnd\" } */\n+\n+unsigned short\n+hardware_rand16 (void)\n+{\n+  unsigned short x;\n+  while (! __builtin_ia32_rdrand16_step (&x))\n+    continue;\n+  return x; /* { dg-bogus \"uninit\" } */\n+}\n+\n+unsigned int\n+hardware_rand32 (void)\n+{\n+  unsigned int x;\n+  while (! __builtin_ia32_rdrand32_step (&x))\n+    continue;\n+  return x; /* { dg-bogus \"uninit\" } */\n+}\n+\n+unsigned long long\n+hardware_rand64 (void)\n+{\n+  unsigned long long int x;\n+  while (! __builtin_ia32_rdrand64_step (&x))\n+    continue;\n+  return x; /* { dg-bogus \"uninit\" } */\n+}"}, {"sha": "4fae368f3210ee4b0c1bedcd2394c3f939ac6dee", "filename": "gcc/testsuite/gcc.dg/analyzer/pr99716-1.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24ebc5404b88b765221b551dc5288f6d64ba3dc7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr99716-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24ebc5404b88b765221b551dc5288f6d64ba3dc7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr99716-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr99716-1.c?ref=24ebc5404b88b765221b551dc5288f6d64ba3dc7", "patch": "@@ -27,7 +27,11 @@ test_2 (void)\n     FILE *fp = fopen (\"/tmp/test\", \"w\");\n     fprintf (fp, \"hello\");\n   }\n-} /* { dg-warning \"leak of FILE 'fp'\" } */\n+} /* { dg-warning \"leak of FILE 'fp'\" \"\" { xfail *-*-* } } */\n+/* TODO: fails on some targets due to fprintf call being optimized to\n+   __builtin_fwrite with a size argument (idx 2) that fails\n+   gimple_builtin_call_types_compatible_p, and thus the known_function\n+   for __builtin_fwrite not being used (PR middle-end/108988).  */\n \n FILE *fp3;\n "}]}