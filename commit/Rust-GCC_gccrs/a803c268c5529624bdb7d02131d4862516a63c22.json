{"sha": "a803c268c5529624bdb7d02131d4862516a63c22", "node_id": "C_kwDOANBUbNoAKGE4MDNjMjY4YzU1Mjk2MjRiZGI3ZDAyMTMxZDQ4NjI1MTZhNjNjMjI", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-03-08T07:42:13Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-03-10T08:25:03Z"}, "message": "Extend nops num in \"maybe_gen_insn\" for RISC-V Vector intrinsics\n\nHi, current maybe_gen_insn can only expand 9 nops.\nFor RVV intrinsics, I need to extend it as 10, otherwise I should use GEN_FCN.\nThis patch is quite obvious change, Ok for trunk ?\n\nThanks.\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv-vector-builtins.cc\n\t(function_expander::use_ternop_insn): Use maybe_gen_insn instead.\n\t(function_expander::use_widen_ternop_insn): Ditto.\n\t* optabs.cc (maybe_gen_insn): Extend nops handling.", "tree": {"sha": "aec3f861446e1c9de51cec399463f1f0406a9db5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aec3f861446e1c9de51cec399463f1f0406a9db5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a803c268c5529624bdb7d02131d4862516a63c22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a803c268c5529624bdb7d02131d4862516a63c22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a803c268c5529624bdb7d02131d4862516a63c22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a803c268c5529624bdb7d02131d4862516a63c22/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab7bb445ee586258a6210462e92ed196d61beb9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab7bb445ee586258a6210462e92ed196d61beb9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab7bb445ee586258a6210462e92ed196d61beb9e"}], "stats": {"total": 29, "additions": 7, "deletions": 22}, "files": [{"sha": "680c165cc2baca79b5853858900e6f0f899297ae", "filename": "gcc/config/riscv/riscv-vector-builtins.cc", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803c268c5529624bdb7d02131d4862516a63c22/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803c268c5529624bdb7d02131d4862516a63c22/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc?ref=a803c268c5529624bdb7d02131d4862516a63c22", "patch": "@@ -3100,17 +3100,7 @@ function_expander::use_ternop_insn (bool vd_accum_p, insn_code icode)\n   add_input_operand (Pmode, get_tail_policy_for_pred (pred));\n   add_input_operand (Pmode, get_mask_policy_for_pred (pred));\n   add_input_operand (Pmode, get_avl_type_rtx (avl_type::NONVLMAX));\n-\n-  /* See optabs.cc, the maximum nops is 9 for using 'maybe_gen_insn'.\n-     We temporarily use GCN directly. We will change it back it we\n-     can support nops >= 10.  */\n-  gcc_assert (maybe_legitimize_operands (icode, 0, opno, m_ops));\n-  rtx_insn *pat = GEN_FCN (\n-    icode) (m_ops[0].value, m_ops[1].value, m_ops[2].value, m_ops[3].value,\n-\t    m_ops[4].value, m_ops[5].value, m_ops[6].value, m_ops[7].value,\n-\t    m_ops[8].value, m_ops[9].value);\n-  emit_insn (pat);\n-  return m_ops[0].value;\n+  return generate_insn (icode);\n }\n \n /* Implement the call using instruction ICODE, with a 1:1 mapping between\n@@ -3142,17 +3132,7 @@ function_expander::use_widen_ternop_insn (insn_code icode)\n   add_input_operand (Pmode, get_tail_policy_for_pred (pred));\n   add_input_operand (Pmode, get_mask_policy_for_pred (pred));\n   add_input_operand (Pmode, get_avl_type_rtx (avl_type::NONVLMAX));\n-\n-  /* See optabs.cc, the maximum nops is 9 for using 'maybe_gen_insn'.\n-     We temporarily use GCN directly. We will change it back it we\n-     can support nops >= 10.  */\n-  gcc_assert (maybe_legitimize_operands (icode, 0, opno, m_ops));\n-  rtx_insn *pat = GEN_FCN (\n-    icode) (m_ops[0].value, m_ops[1].value, m_ops[2].value, m_ops[3].value,\n-\t    m_ops[4].value, m_ops[5].value, m_ops[6].value, m_ops[7].value,\n-\t    m_ops[8].value, m_ops[9].value);\n-  emit_insn (pat);\n-  return m_ops[0].value;\n+  return generate_insn (icode);\n }\n \n /* Implement the call using instruction ICODE, with a 1:1 mapping between"}, {"sha": "4c641cab192d543838721cd8e56a51d0b4c5d0f7", "filename": "gcc/optabs.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a803c268c5529624bdb7d02131d4862516a63c22/gcc%2Foptabs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a803c268c5529624bdb7d02131d4862516a63c22/gcc%2Foptabs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.cc?ref=a803c268c5529624bdb7d02131d4862516a63c22", "patch": "@@ -8091,6 +8091,11 @@ maybe_gen_insn (enum insn_code icode, unsigned int nops,\n       return GEN_FCN (icode) (ops[0].value, ops[1].value, ops[2].value,\n \t\t\t      ops[3].value, ops[4].value, ops[5].value,\n \t\t\t      ops[6].value, ops[7].value, ops[8].value);\n+    case 10:\n+      return GEN_FCN (icode) (ops[0].value, ops[1].value, ops[2].value,\n+\t\t\t      ops[3].value, ops[4].value, ops[5].value,\n+\t\t\t      ops[6].value, ops[7].value, ops[8].value,\n+\t\t\t      ops[9].value);\n     }\n   gcc_unreachable ();\n }"}]}