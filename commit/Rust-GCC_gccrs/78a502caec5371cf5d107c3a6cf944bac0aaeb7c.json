{"sha": "78a502caec5371cf5d107c3a6cf944bac0aaeb7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhhNTAyY2FlYzUzNzFjZjVkMTA3YzNhNmNmOTQ0YmFjMGFhZWI3Yw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-11-14T12:08:57Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-11-14T12:08:57Z"}, "message": "Add Optimization keyword for param_max_inline_insns_auto param.\n\n2019-11-14  Martin Liska  <mliska@suse.cz>\n\n\t* ipa-cp.c (devirtualization_time_bonus): Use opt_for_fn\n\tof a callee to get value of the param.\n\t* ipa-inline.c (inline_insns_auto): Use proper\n\topt_for_fn.\n\t* opts.c (maybe_default_option): Do not overwrite param\n\tvalue if optimization level does not match.  Note that\n\tparams usually have default value set via Init() keyword.\n\t* params.opt: Remove -param=max-inline-insns-auto-O2.\n\t* cif-code.def (MAX_INLINE_INSNS_AUTO_O2_LIMIT): Remove.\n\t* doc/invoke.texi: Remove documentation of\n\tmax-inline-insns-auto-O2.\n2019-11-14  Martin Liska  <mliska@suse.cz>\n\n\t* c-c++-common/asan/memcmp-1.c: Update expected backtrace.\n\nFrom-SVN: r278218", "tree": {"sha": "7f84b73d1a7e066bac0f6790400d858ad8b34f20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f84b73d1a7e066bac0f6790400d858ad8b34f20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78a502caec5371cf5d107c3a6cf944bac0aaeb7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78a502caec5371cf5d107c3a6cf944bac0aaeb7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78a502caec5371cf5d107c3a6cf944bac0aaeb7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78a502caec5371cf5d107c3a6cf944bac0aaeb7c/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4c4503bf8c538bdbd8db8940aae3d7000885776e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c4503bf8c538bdbd8db8940aae3d7000885776e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c4503bf8c538bdbd8db8940aae3d7000885776e"}], "stats": {"total": 73, "additions": 38, "deletions": 35}, "files": [{"sha": "7af5644024b69ee666f0457bf15034a1491acb36", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a502caec5371cf5d107c3a6cf944bac0aaeb7c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a502caec5371cf5d107c3a6cf944bac0aaeb7c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78a502caec5371cf5d107c3a6cf944bac0aaeb7c", "patch": "@@ -1,3 +1,17 @@\n+2019-11-14  Martin Liska  <mliska@suse.cz>\n+\n+\t* ipa-cp.c (devirtualization_time_bonus): Use opt_for_fn\n+\tof a callee to get value of the param.\n+\t* ipa-inline.c (inline_insns_auto): Use proper\n+\topt_for_fn.\n+\t* opts.c (maybe_default_option): Do not overwrite param\n+\tvalue if optimization level does not match.  Note that\n+\tparams usually have default value set via Init() keyword.\n+\t* params.opt: Remove -param=max-inline-insns-auto-O2.\n+\t* cif-code.def (MAX_INLINE_INSNS_AUTO_O2_LIMIT): Remove.\n+\t* doc/invoke.texi: Remove documentation of\n+\tmax-inline-insns-auto-O2.\n+\n 2019-11-14  Martin Liska  <mliska@suse.cz>\n \n \t* tree-switch-conversion.c (switch_conversion::switch_conversion):"}, {"sha": "b4403c962475a7bbcfc304027cfb007b95f0adc6", "filename": "gcc/cif-code.def", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a502caec5371cf5d107c3a6cf944bac0aaeb7c/gcc%2Fcif-code.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a502caec5371cf5d107c3a6cf944bac0aaeb7c/gcc%2Fcif-code.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcif-code.def?ref=78a502caec5371cf5d107c3a6cf944bac0aaeb7c", "patch": "@@ -74,8 +74,6 @@ DEFCIFCODE(MAX_INLINE_INSNS_SINGLE_O2_LIMIT, CIF_FINAL_NORMAL,\n \t   N_(\"--param max-inline-insns-single-O2 limit reached\"))\n DEFCIFCODE(MAX_INLINE_INSNS_AUTO_LIMIT, CIF_FINAL_NORMAL,\n \t   N_(\"--param max-inline-insns-auto limit reached\"))\n-DEFCIFCODE(MAX_INLINE_INSNS_AUTO_O2_LIMIT, CIF_FINAL_NORMAL,\n-\t   N_(\"--param max-inline-insns-auto-O2 limit reached\"))\n DEFCIFCODE(INLINE_UNIT_GROWTH_LIMIT, CIF_FINAL_NORMAL,\n \t   N_(\"--param inline-unit-growth limit reached\"))\n "}, {"sha": "fe79ca2247aef11a4187aed7ba3ccc624baf3e2b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a502caec5371cf5d107c3a6cf944bac0aaeb7c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a502caec5371cf5d107c3a6cf944bac0aaeb7c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=78a502caec5371cf5d107c3a6cf944bac0aaeb7c", "patch": "@@ -11283,16 +11283,11 @@ applied. In other cases @option{max-inline-insns-single-O2} is applied.\n \n \n @item max-inline-insns-auto\n-@item max-inline-insns-auto-O2\n When you use @option{-finline-functions} (included in @option{-O3}),\n a lot of functions that would otherwise not be considered for inlining\n by the compiler are investigated.  To those functions, a different\n (more restrictive) limit compared to functions declared inline can\n-be applied.\n-\n-For functions compiled with optimization levels\n-@option{-O3} and @option{-Ofast} parameter @option{max-inline-insns-auto} is\n-applied. In other cases @option{max-inline-insns-auto-O2} is applied.\n+be applied (@option{--param max-inline-insns-auto}).\n \n @item max-inline-insns-small\n This is bound applied to calls which are considered relevant with\n@@ -11313,8 +11308,8 @@ execute function prologue and epilogue\n @item inline-heuristics-hint-percent\n @item inline-heuristics-hint-percent-O2\n The scale (in percents) applied to @option{inline-insns-single},\n-@option{inline-insns-single-O2}, @option{inline-insns-auto},\n-@option{inline-insns-auto-O2} when inline heuristics hints that inlining is\n+@option{inline-insns-single-O2}, @option{inline-insns-auto}\n+when inline heuristics hints that inlining is\n very profitable (will enable later optimizations).\n \n For functions compiled with optimization levels"}, {"sha": "86c625355b6f389feb8e68ef342d1663cd0e32f3", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a502caec5371cf5d107c3a6cf944bac0aaeb7c/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a502caec5371cf5d107c3a6cf944bac0aaeb7c/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=78a502caec5371cf5d107c3a6cf944bac0aaeb7c", "patch": "@@ -2936,11 +2936,13 @@ devirtualization_time_bonus (struct cgraph_node *node,\n       int size = ipa_size_summaries->get (callee)->size;\n       /* FIXME: The values below need re-considering and perhaps also\n \t integrating into the cost metrics, at lest in some very basic way.  */\n-      if (size <= param_max_inline_insns_auto / 4)\n+      int max_inline_insns_auto\n+\t= opt_for_fn (callee->decl, param_max_inline_insns_auto);\n+      if (size <= max_inline_insns_auto / 4)\n \tres += 31 / ((int)speculative + 1);\n-      else if (size <= param_max_inline_insns_auto / 2)\n+      else if (size <= max_inline_insns_auto / 2)\n \tres += 15 / ((int)speculative + 1);\n-      else if (size <= param_max_inline_insns_auto\n+      else if (size <= max_inline_insns_auto\n \t       || DECL_DECLARED_INLINE_P (callee->decl))\n \tres += 7 / ((int)speculative + 1);\n     }"}, {"sha": "effb59784a379a29ff4cd36cba2066b312e48469", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a502caec5371cf5d107c3a6cf944bac0aaeb7c/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a502caec5371cf5d107c3a6cf944bac0aaeb7c/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=78a502caec5371cf5d107c3a6cf944bac0aaeb7c", "patch": "@@ -417,20 +417,10 @@ inline_insns_single (cgraph_node *n, bool hint)\n static int\n inline_insns_auto (cgraph_node *n, bool hint)\n {\n-  if (opt_for_fn (n->decl, optimize) >= 3)\n-    {\n-      if (hint)\n-\treturn param_max_inline_insns_auto\n-\t       * param_inline_heuristics_hint_percent / 100;\n-      return param_max_inline_insns_auto;\n-    }\n-  else\n-    {\n-      if (hint)\n-\treturn param_max_inline_insns_auto_o2\n-\t       * param_inline_heuristics_hint_percent_o2 / 100;\n-      return param_max_inline_insns_auto_o2;\n-    }\n+  int max_inline_insns_auto = opt_for_fn (n->decl, param_max_inline_insns_auto);\n+  if (hint)\n+    return max_inline_insns_auto * param_inline_heuristics_hint_percent / 100;\n+  return max_inline_insns_auto;\n }\n \n /* Decide if we can inline the edge and possibly update"}, {"sha": "addebf1536556be58fae3d7aac51f4aa60ac8902", "filename": "gcc/opts.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a502caec5371cf5d107c3a6cf944bac0aaeb7c/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a502caec5371cf5d107c3a6cf944bac0aaeb7c/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=78a502caec5371cf5d107c3a6cf944bac0aaeb7c", "patch": "@@ -388,7 +388,8 @@ maybe_default_option (struct gcc_options *opts,\n \t\t\t     lang_mask, DK_UNSPECIFIED, loc,\n \t\t\t     handlers, true, dc);\n   else if (default_opt->arg == NULL\n-\t   && !option->cl_reject_negative)\n+\t   && !option->cl_reject_negative\n+\t   && !(option->flags & CL_PARAMS))\n     handle_generated_option (opts, opts_set, default_opt->opt_index,\n \t\t\t     default_opt->arg, !default_opt->value,\n \t\t\t     lang_mask, DK_UNSPECIFIED, loc,\n@@ -541,6 +542,9 @@ static const struct default_options default_options_table[] =\n     { OPT_LEVELS_3_PLUS, OPT_fvect_cost_model_, NULL, VECT_COST_MODEL_DYNAMIC },\n     { OPT_LEVELS_3_PLUS, OPT_fversion_loops_for_strides, NULL, 1 },\n \n+    /* -O3 parameters.  */\n+    { OPT_LEVELS_3_PLUS, OPT__param_max_inline_insns_auto_, NULL, 30 },\n+\n     /* -Ofast adds optimizations to -O3.  */\n     { OPT_LEVELS_FAST, OPT_ffast_math, NULL, 1 },\n     { OPT_LEVELS_FAST, OPT_fallow_store_data_races, NULL, 1 },"}, {"sha": "d8a10b8be4a91de73fe10675b7d2c3ce1061999c", "filename": "gcc/params.opt", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a502caec5371cf5d107c3a6cf944bac0aaeb7c/gcc%2Fparams.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a502caec5371cf5d107c3a6cf944bac0aaeb7c/gcc%2Fparams.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.opt?ref=78a502caec5371cf5d107c3a6cf944bac0aaeb7c", "patch": "@@ -467,11 +467,7 @@ Common Joined UInteger Var(param_max_hoist_depth) Init(30) Param\n Maximum depth of search in the dominator tree for expressions to hoist.\n \n -param=max-inline-insns-auto=\n-Common Joined UInteger Var(param_max_inline_insns_auto) Init(30) Param\n-The maximum number of instructions when automatically inlining with -O3 and -Ofast.\n-\n--param=max-inline-insns-auto-O2=\n-Common Joined UInteger Var(param_max_inline_insns_auto_o2) Init(15) Param\n+Common Joined UInteger Var(param_max_inline_insns_auto) Init(15) Optimization Param\n The maximum number of instructions when automatically inlining.\n \n -param=max-inline-insns-recursive="}, {"sha": "914f00593ff8fd41848ca40d2b87000ef5bf3b83", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a502caec5371cf5d107c3a6cf944bac0aaeb7c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a502caec5371cf5d107c3a6cf944bac0aaeb7c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=78a502caec5371cf5d107c3a6cf944bac0aaeb7c", "patch": "@@ -1,3 +1,7 @@\n+2019-11-14  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-c++-common/asan/memcmp-1.c: Update expected backtrace.\n+\n 2019-11-14  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-c++-common/gomp/declare-variant-11.c: Add \"sse4.2\" and \"sse4.1\""}, {"sha": "0403ad78945d42fb3273bdc8616c25dfdf21109a", "filename": "gcc/testsuite/c-c++-common/asan/memcmp-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a502caec5371cf5d107c3a6cf944bac0aaeb7c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fmemcmp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a502caec5371cf5d107c3a6cf944bac0aaeb7c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fmemcmp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fmemcmp-1.c?ref=78a502caec5371cf5d107c3a6cf944bac0aaeb7c", "patch": "@@ -16,5 +16,5 @@ main ()\n }\n \n /* { dg-output \"ERROR: AddressSanitizer: stack-buffer-overflow.*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"    #1 0x\\[0-9a-f\\]+ +(in _*(interceptor_|wrap_|)memcmp|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"    #2 0x\\[0-9a-f\\]+ +(in _*main|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #\\[1-9\\] 0x\\[0-9a-f\\]+ +(in _*(interceptor_|wrap_|)memcmp|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #\\[2-9\\] 0x\\[0-9a-f\\]+ +(in _*main|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}]}