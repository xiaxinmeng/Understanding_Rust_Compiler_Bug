{"sha": "c204d113c0f4fb764de0482320fcfa98af651607", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIwNGQxMTNjMGY0ZmI3NjRkZTA0ODIzMjBmY2ZhOThhZjY1MTYwNw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2010-11-10T20:08:27Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2010-11-10T20:08:27Z"}, "message": "Check preferred vector mode for vector type in estimate_move_cost.\n\ngcc/\n\n2010-11-10  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR tree-optimization/46414\n\t* tree-inline.c (estimate_move_cost): Check preferred vector\n\tmode for vector type.\n\ngcc/testsuite/\n\n2010-11-10  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR tree-optimization/46414\n\t* gcc.target/i386/recip-vec-sqrtf-avx.c: Updated for loop\n\tunrolling.\n\nFrom-SVN: r166552", "tree": {"sha": "d984c938b2229ed019403ce490a8feadc6d4b9ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d984c938b2229ed019403ce490a8feadc6d4b9ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c204d113c0f4fb764de0482320fcfa98af651607", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c204d113c0f4fb764de0482320fcfa98af651607", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c204d113c0f4fb764de0482320fcfa98af651607", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c204d113c0f4fb764de0482320fcfa98af651607/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e6a054481d2586056b845639c8e26158169c027f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6a054481d2586056b845639c8e26158169c027f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6a054481d2586056b845639c8e26158169c027f"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "1bb3d887c6c613480bb4bcd4a1c3360a620da660", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c204d113c0f4fb764de0482320fcfa98af651607/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c204d113c0f4fb764de0482320fcfa98af651607/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c204d113c0f4fb764de0482320fcfa98af651607", "patch": "@@ -1,3 +1,9 @@\n+2010-11-10  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR tree-optimization/46414\n+\t* tree-inline.c (estimate_move_cost): Check preferred vector\n+\tmode for vector type.\n+\n 2010-11-10  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config/alpha/osf5.h (ASM_SPEC): Remove -nocpp."}, {"sha": "b00c673d3d9199ac9d8282adea0a6fcc1ca8abe3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c204d113c0f4fb764de0482320fcfa98af651607/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c204d113c0f4fb764de0482320fcfa98af651607/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c204d113c0f4fb764de0482320fcfa98af651607", "patch": "@@ -1,3 +1,9 @@\n+2010-11-10  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR tree-optimization/46414\n+\t* gcc.target/i386/recip-vec-sqrtf-avx.c: Updated for loop\n+\tunrolling.\n+\n 2010-11-10  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/46411"}, {"sha": "5a8e6967b42e25e88453e89374511c7b4ba58a14", "filename": "gcc/testsuite/gcc.target/i386/recip-vec-sqrtf-avx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c204d113c0f4fb764de0482320fcfa98af651607/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frecip-vec-sqrtf-avx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c204d113c0f4fb764de0482320fcfa98af651607/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frecip-vec-sqrtf-avx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frecip-vec-sqrtf-avx.c?ref=c204d113c0f4fb764de0482320fcfa98af651607", "patch": "@@ -32,4 +32,4 @@ void t3(void)\n }\n \n /* Last loop is small enough to be fully unrolled.  */\n-/* { dg-final { scan-assembler-times \"vrsqrtps\\[ \\\\t\\]+\\[^\\n\\]*%ymm\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrtps\\[ \\\\t\\]+\\[^\\n\\]*%ymm\" 6 } } */"}, {"sha": "2c05835052f27a4a3d3502149432c1e7575aa8d9", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c204d113c0f4fb764de0482320fcfa98af651607/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c204d113c0f4fb764de0482320fcfa98af651607/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=c204d113c0f4fb764de0482320fcfa98af651607", "patch": "@@ -3249,6 +3249,16 @@ estimate_move_cost (tree type)\n \n   gcc_assert (!VOID_TYPE_P (type));\n \n+  if (TREE_CODE (type) == VECTOR_TYPE)\n+    {\n+      enum machine_mode inner = TYPE_MODE (TREE_TYPE (type));\n+      enum machine_mode simd\n+\t= targetm.vectorize.preferred_simd_mode (inner);\n+      int simd_mode_size = GET_MODE_SIZE (simd);\n+      return ((GET_MODE_SIZE (TYPE_MODE (type)) + simd_mode_size - 1)\n+\t      / simd_mode_size);\n+    }\n+\n   size = int_size_in_bytes (type);\n \n   if (size < 0 || size > MOVE_MAX_PIECES * MOVE_RATIO (!optimize_size))"}]}