{"sha": "0359465c703ad3c214c52c772557ef1b3fe52183", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM1OTQ2NWM3MDNhZDNjMjE0YzUyYzc3MjU1N2VmMWIzZmU1MjE4Mw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2018-04-10T21:09:30Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2018-04-10T21:09:30Z"}, "message": "rs6000: Enable -fasynchronous-unwind-tables by default\n\nTo find out where on-entry register values live at any point in a\nprogram, GDB currently tries to parse to parse the executable code.\nThis does not work very well, for example it gets confused if some\naccesses to the stack use the frame pointer (r31) and some use the\nstack pointer (r1).  A symptom is that backtraces can be cut short.\n\nThis patch enables -fasynchronous-unwind-tables by default for rs6000,\nwhich causes us to emit DWARF unwind tables for all functions, solving\nthese problems.\n\nThis not do anything for sub-targets without DWARF, and only for ELF\nsub-targets for now.\n\nIt increases executable size, but only modestly, and does not change\nmemory use, only the disk image.\n\n\n\t* common/config/rs6000/rs6000-common.c (rs6000_option_init_struct):\n\tEnable -fasynchronous-unwind-tables by default if OBJECT_FORMAT_ELF.\n\ngcc/testsuite/\n\t* gcc.target/powerpc/dfmode_off.c: Add -fno-asynchronous-unwind-tables.\n\t* gcc.target/powerpc/dimode_off.c: Ditto.\n\t* gcc.target/powerpc/tfmode_off.c: Ditto.\n\t* gcc.target/powerpc/timode_off.c: Ditto.\n\nFrom-SVN: r259298", "tree": {"sha": "e169812cbe8cf83c834a123cdeefd4ee0e8c7c15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e169812cbe8cf83c834a123cdeefd4ee0e8c7c15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0359465c703ad3c214c52c772557ef1b3fe52183", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0359465c703ad3c214c52c772557ef1b3fe52183", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0359465c703ad3c214c52c772557ef1b3fe52183", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0359465c703ad3c214c52c772557ef1b3fe52183/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ccdfb97546e2fed58cf7e1fc6cb579df968d5289", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccdfb97546e2fed58cf7e1fc6cb579df968d5289", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccdfb97546e2fed58cf7e1fc6cb579df968d5289"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "2031dc79d41b2ef0f04cb7167b87ddf0d4fb4bca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0359465c703ad3c214c52c772557ef1b3fe52183/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0359465c703ad3c214c52c772557ef1b3fe52183/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0359465c703ad3c214c52c772557ef1b3fe52183", "patch": "@@ -1,3 +1,8 @@\n+2018-04-10  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* common/config/rs6000/rs6000-common.c (rs6000_option_init_struct):\n+\tEnable -fasynchronous-unwind-tables by default if OBJECT_FORMAT_ELF.\n+\n 2018-04-10  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR target/85321"}, {"sha": "ed348f59dfa6f1128553e02deb5774e5e93594cb", "filename": "gcc/common/config/rs6000/rs6000-common.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0359465c703ad3c214c52c772557ef1b3fe52183/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0359465c703ad3c214c52c772557ef1b3fe52183/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c?ref=0359465c703ad3c214c52c772557ef1b3fe52183", "patch": "@@ -49,6 +49,15 @@ rs6000_option_init_struct (struct gcc_options *opts)\n   /* Enable section anchors by default.  */\n   if (!TARGET_MACHO)\n     opts->x_flag_section_anchors = 1;\n+\n+  /* By default, always emit DWARF-2 unwind info.  This allows debugging\n+     without maintaining a stack frame back-chain.  It also allows the\n+     debugger to find out where on-entry register values are stored at any\n+     point in a function, without having to analyze the executable code (which\n+     isn't even possible to do in the general case).  */\n+#ifdef OBJECT_FORMAT_ELF\n+  opts->x_flag_asynchronous_unwind_tables = 1;\n+#endif\n }\n \n /* Implement TARGET_OPTION_DEFAULT_PARAMS.  */"}, {"sha": "8de596e4f6ec0ff101079814c97ae6c75dacbbb9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0359465c703ad3c214c52c772557ef1b3fe52183/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0359465c703ad3c214c52c772557ef1b3fe52183/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0359465c703ad3c214c52c772557ef1b3fe52183", "patch": "@@ -1,3 +1,10 @@\n+2018-04-10  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* gcc.target/powerpc/dfmode_off.c: Add -fno-asynchronous-unwind-tables.\n+\t* gcc.target/powerpc/dimode_off.c: Ditto.\n+\t* gcc.target/powerpc/tfmode_off.c: Ditto.\n+\t* gcc.target/powerpc/timode_off.c: Ditto.\n+\n 2018-04-10  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* gcc.target/powerpc/vec-ldl-1.c: New test."}, {"sha": "b5940cbde612f95b890dab387be916ccb7530c09", "filename": "gcc/testsuite/gcc.target/powerpc/dfmode_off.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0359465c703ad3c214c52c772557ef1b3fe52183/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfmode_off.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0359465c703ad3c214c52c772557ef1b3fe52183/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfmode_off.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfmode_off.c?ref=0359465c703ad3c214c52c772557ef1b3fe52183", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do assemble } */\n-/* { dg-options \"-O2 -fno-align-functions -mtraceback=no -save-temps\" } */\n+/* { dg-options \"-O2 -fno-align-functions -fno-asynchronous-unwind-tables -mtraceback=no -save-temps\" } */\n \n void w1 (void *x, double y) { *(double *) (x + 32767) = y; }\n void w2 (void *x, double y) { *(double *) (x + 32766) = y; }"}, {"sha": "19ca40c508ba9dd0717cec7d0c4748068e343e35", "filename": "gcc/testsuite/gcc.target/powerpc/dimode_off.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0359465c703ad3c214c52c772557ef1b3fe52183/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdimode_off.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0359465c703ad3c214c52c772557ef1b3fe52183/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdimode_off.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdimode_off.c?ref=0359465c703ad3c214c52c772557ef1b3fe52183", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do assemble } */\n-/* { dg-options \"-O2 -fno-align-functions -mtraceback=no -save-temps\" } */\n+/* { dg-options \"-O2 -fno-align-functions -fno-asynchronous-unwind-tables -mtraceback=no -save-temps\" } */\n \n void w1 (void *x, long long y) { *(long long *) (x + 32767) = y; }\n void w2 (void *x, long long y) { *(long long *) (x + 32766) = y; }"}, {"sha": "f19e7592fd417b2b0128c7614b84837bf84f1e76", "filename": "gcc/testsuite/gcc.target/powerpc/tfmode_off.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0359465c703ad3c214c52c772557ef1b3fe52183/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ftfmode_off.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0359465c703ad3c214c52c772557ef1b3fe52183/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ftfmode_off.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ftfmode_off.c?ref=0359465c703ad3c214c52c772557ef1b3fe52183", "patch": "@@ -2,7 +2,7 @@\n /* { dg-skip-if \"\" { powerpc-ibm-aix* } } */\n /* { dg-skip-if \"no TFmode\" { powerpc-*-eabi* } } */\n /* { dg-require-effective-target longdouble128 } */\n-/* { dg-options \"-O2 -fno-align-functions -mtraceback=no -save-temps\" } */\n+/* { dg-options \"-O2 -fno-align-functions -fno-asynchronous-unwind-tables -mtraceback=no -save-temps\" } */\n \n typedef float TFmode __attribute__ ((mode (TF)));\n "}, {"sha": "b63595347b58ee7ab9c643b0034cd15b43b5068a", "filename": "gcc/testsuite/gcc.target/powerpc/timode_off.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0359465c703ad3c214c52c772557ef1b3fe52183/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ftimode_off.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0359465c703ad3c214c52c772557ef1b3fe52183/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ftimode_off.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ftimode_off.c?ref=0359465c703ad3c214c52c772557ef1b3fe52183", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do assemble { target { lp64 } } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power5\" } } */\n-/* { dg-options \"-O2 -fno-align-functions -mtraceback=no -save-temps -mcpu=power5\" } */\n+/* { dg-options \"-O2 -fno-align-functions -fno-asynchronous-unwind-tables -mtraceback=no -save-temps -mcpu=power5\" } */\n \n typedef int TImode __attribute__ ((mode (TI)));\n "}]}