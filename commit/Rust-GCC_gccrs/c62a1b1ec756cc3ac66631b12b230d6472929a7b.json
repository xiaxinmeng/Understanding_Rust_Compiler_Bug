{"sha": "c62a1b1ec756cc3ac66631b12b230d6472929a7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYyYTFiMWVjNzU2Y2MzYWM2NjYzMWIxMmIyMzBkNjQ3MjkyOWE3Yg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2013-03-20T09:24:59Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-03-20T09:24:59Z"}, "message": "i-fortra.ads: Update comment...\n\n2013-03-20  Tobias Burnus  <burnus@net-b.de>\n\n        * i-fortra.ads: Update comment, add Ada 2012's optional\n        Star and Kind data types for enhanced interoperability.\n\nFrom-SVN: r196814", "tree": {"sha": "f829b6c6a9c60d9fd7468ad997a6b4f257d48036", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f829b6c6a9c60d9fd7468ad997a6b4f257d48036"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c62a1b1ec756cc3ac66631b12b230d6472929a7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c62a1b1ec756cc3ac66631b12b230d6472929a7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c62a1b1ec756cc3ac66631b12b230d6472929a7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c62a1b1ec756cc3ac66631b12b230d6472929a7b/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2a930377f9274c613ea5a78fee27e5599841b854", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a930377f9274c613ea5a78fee27e5599841b854", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a930377f9274c613ea5a78fee27e5599841b854"}], "stats": {"total": 69, "additions": 64, "deletions": 5}, "files": [{"sha": "3ec3e291caec0bbee438fdd98f14269b708b3802", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c62a1b1ec756cc3ac66631b12b230d6472929a7b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c62a1b1ec756cc3ac66631b12b230d6472929a7b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c62a1b1ec756cc3ac66631b12b230d6472929a7b", "patch": "@@ -1,3 +1,8 @@\n+2013-03-20  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* i-fortra.ads: Update comment, add Ada 2012's optional\n+\tStar and Kind data types for enhanced interoperability.\n+\n 2013-03-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnatvsn.ads (Library_Version): Bump to 4.9."}, {"sha": "0946e49a7e3cd3d6ced273062c1e03e5e527653e", "filename": "gcc/ada/i-fortra.ads", "status": "modified", "additions": 59, "deletions": 5, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c62a1b1ec756cc3ac66631b12b230d6472929a7b/gcc%2Fada%2Fi-fortra.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c62a1b1ec756cc3ac66631b12b230d6472929a7b/gcc%2Fada%2Fi-fortra.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fi-fortra.ads?ref=c62a1b1ec756cc3ac66631b12b230d6472929a7b", "patch": "@@ -26,11 +26,11 @@ package Interfaces.Fortran is\n    type Logical is new Boolean;\n    for Logical'Size use Integer'Size;\n    pragma Convention (Fortran, Logical);\n-   --  As required by Fortran standard, stand alone logical allocates same\n-   --  space as integer (but what about the array case???). The convention\n-   --  is important, since in Fortran, Booleans have zero/non-zero semantics\n-   --  for False/True, and the pragma Convention (Fortran) activates the\n-   --  special handling required in this case.\n+   --  As required by Fortran standard, logical allocates same space as\n+   --  an integer. The convention is important, since in Fortran, Booleans\n+   --  are implemented with zero/non-zero semantics for False/True, and the\n+   --  pragma Convention (Fortran) activates the special handling required\n+   --  in this case.\n \n    package Single_Precision_Complex_Types is\n       new Ada.Numerics.Generic_Complex_Types (Real);\n@@ -50,6 +50,60 @@ package Interfaces.Fortran is\n \n    type Fortran_Character is array (Positive range <>) of Character_Set;\n \n+   --  Additional declarations as permitted by Ada 2012, p.608, paragraph 21.\n+   --  Interoperability with Fortran 77's vendor extension using star\n+   --  notation and Fortran 90's intrinsic types with kind=n parameter.\n+   --  The following assumes that `n' matches the byte size, which\n+   --  most Fortran compiler, including GCC's follow.\n+\n+   type Integer_Star_1  is new Integer_8;\n+   type Integer_Kind_1  is new Integer_8;\n+   type Integer_Star_2  is new Integer_16;\n+   type Integer_Kind_2  is new Integer_16;\n+   type Integer_Star_4  is new Integer_32;\n+   type Integer_Kind_4  is new Integer_32;\n+   type Integer_Star_8  is new Integer_64;\n+   type Integer_Kind_8  is new Integer_64;\n+\n+   type Logical_Star_1  is new Boolean;\n+   type Logical_Star_2  is new Boolean;\n+   type Logical_Star_4  is new Boolean;\n+   type Logical_Star_8  is new Boolean;\n+   type Logical_Kind_1  is new Boolean;\n+   type Logical_Kind_2  is new Boolean;\n+   type Logical_Kind_4  is new Boolean;\n+   type Logical_Kind_8  is new Boolean;\n+   for Logical_Star_1'Size use Integer_8'Size;\n+   for Logical_Star_2'Size use Integer_16'Size;\n+   for Logical_Star_4'Size use Integer_32'Size;\n+   for Logical_Star_8'Size use Integer_64'Size;\n+   for Logical_Kind_1'Size use Integer_8'Size;\n+   for Logical_Kind_2'Size use Integer_16'Size;\n+   for Logical_Kind_4'Size use Integer_32'Size;\n+   for Logical_Kind_8'Size use Integer_64'Size;\n+   pragma Convention (Fortran, Logical_Star_1);\n+   pragma Convention (Fortran, Logical_Star_2);\n+   pragma Convention (Fortran, Logical_Star_4);\n+   pragma Convention (Fortran, Logical_Star_8);\n+   pragma Convention (Fortran, Logical_Kind_1);\n+   pragma Convention (Fortran, Logical_Kind_2);\n+   pragma Convention (Fortran, Logical_Kind_4);\n+   pragma Convention (Fortran, Logical_Kind_8);\n+\n+   type Real_Star_4  is new Float;\n+   type Real_Kind_4  is new Float;\n+   type Real_Star_8  is new Long_Float;\n+   type Real_Kind_8  is new Long_Float;\n+\n+   --  In the kind syntax, n is the same as the associated real kind.\n+   --  In the star syntax, n is twice as large (real+imaginary size)\n+   type Complex_Star_8  is new Complex;\n+   type Complex_Kind_4  is new Complex;\n+   type Complex_Star_16 is new Double_Complex;\n+   type Complex_Kind_8  is new Double_Complex;\n+\n+   type Character_Kind_n is new Fortran_Character;\n+\n    function To_Fortran (Item : Character)     return Character_Set;\n    function To_Ada     (Item : Character_Set) return Character;\n "}]}