{"sha": "ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWUwN2I0NjMyYzQ3NGQ5YmM0OGRmZGViOGRkNzllZTNmNGIzNjg1MA==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2006-12-05T18:39:13Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2006-12-05T18:39:13Z"}, "message": "tree-vrp.c (pass_vrp): Remove PROP_smt_usage.\n\n2006-12-05  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* tree-vrp.c (pass_vrp): Remove PROP_smt_usage.\n\t* tree-complex.c (pass_lower_complex): Ditto.\n\t* tree-ssa-ccp.c (pass_ccp): Ditto.\n\t(pass_store_ccp): Ditto.\n\t* tree-ssa-dom.c (pass_dominator): Ditto.\n\t(pass_phi_only_cprop): Ditto.\n\t* tree-sra.c (pass_sra): Ditto.\n\t* tree-ssa-forwprop.c (pass_forwprop): Ditto.\n\t* tree-flow.h (updating_used_alone): Remove.\n\t(updating_used_alone): Ditto.\n\t* tree-ssa-alias.c (updating_used_alone): Remove variable.\n\t(lhs_may_store_to): Remove function.\n\t(recalculate_used_alone): Ditto.\n\t(compute_may_aliases): Remove used_alone calculation.\n\t* tree.h (struct tree_memory_tag): Remove is_used_alone and\n\told_used_alone. Remove SMT_USED_ALONE and SMT_OLD_USED_ALONE.\n\t* tree-pass.h (PROP_smt_usage): Remove.\n\t* passes.c (execute_todo): Remove used alone recalculation.\n\t(execute_one_pass): Ditto.\n\t* tree-ssa-operands.c (add_virtual_operand): Remove used_alone\n\tstuff.\n\nFrom-SVN: r119550", "tree": {"sha": "cfefb58bb986dfe548ec2f49bd477bcd0fc04cc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfefb58bb986dfe548ec2f49bd477bcd0fc04cc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850/comments", "author": null, "committer": null, "parents": [{"sha": "c1ac94fbe900aed88c60ffcbf8eac80c54f3f95e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1ac94fbe900aed88c60ffcbf8eac80c54f3f95e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1ac94fbe900aed88c60ffcbf8eac80c54f3f95e"}], "stats": {"total": 183, "additions": 9, "deletions": 174}, "files": [{"sha": "13b3b33e972fdbefd0ef54a80edc53c7d9bbeaac", "filename": "gcc/passes.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850", "patch": "@@ -721,24 +721,14 @@ execute_todo (unsigned int flags)\n   if (!flags)\n     return;\n   \n-  /* Always recalculate SMT usage before doing anything else.  */\n-  if (flags & TODO_update_smt_usage)\n-    recalculate_used_alone ();\n-\n   /* Always cleanup the CFG before trying to update SSA .  */\n   if (flags & TODO_cleanup_cfg)\n     {\n-      /* CFG Cleanup can cause a constant to prop into an ARRAY_REF.  */\n-      updating_used_alone = true;\n-\n       if (current_loops)\n \tcleanup_tree_cfg_loop ();\n       else\n \tcleanup_tree_cfg ();\n \n-      /* Update the used alone after cleanup cfg.  */\n-      recalculate_used_alone ();\n-\n       /* When cleanup_tree_cfg merges consecutive blocks, it may\n \t perform some simplistic propagation when removing single\n \t valued PHI nodes.  This propagation may, in turn, cause the\n@@ -835,9 +825,6 @@ execute_one_pass (struct tree_opt_pass *pass)\n   gcc_assert ((curr_properties & pass->properties_required)\n \t      == pass->properties_required);\n \n-  if (pass->properties_destroyed & PROP_smt_usage)\n-    updating_used_alone = true;\n-\n   /* If a dump file name is present, open it if enabled.  */\n   if (pass->static_pass_number != -1)\n     {\n@@ -904,9 +891,6 @@ execute_one_pass (struct tree_opt_pass *pass)\n       dump_file = NULL;\n     }\n \n-  if (pass->properties_destroyed & PROP_smt_usage)\n-    updating_used_alone = false;\n-\n   return true;\n }\n "}, {"sha": "c3f4e0453ad96ce1a466161a5b042c9b08fe6aa3", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850", "patch": "@@ -1540,7 +1540,7 @@ struct tree_opt_pass pass_lower_complex =\n   0,\t\t\t\t\t/* tv_id */\n   PROP_ssa,\t\t\t\t/* properties_required */\n   0,\t\t\t\t\t/* properties_provided */\n-  PROP_smt_usage,                       /* properties_destroyed */\n+  0,                       \t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_ggc_collect\n   | TODO_update_smt_usage"}, {"sha": "b3aa655f556e23313c0ff14baefcc0ed69ce1e05", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850", "patch": "@@ -1060,9 +1060,6 @@ void delete_alias_heapvars (void);\n \n void swap_tree_operands (tree, tree *, tree *);\n \n-extern void recalculate_used_alone (void);\n-extern bool updating_used_alone;\n-\n int least_common_multiple (int, int);\n \n #endif /* _TREE_FLOW_H  */"}, {"sha": "04db3bbc6d42e390f0cb466d5063701bcddcc78a", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850", "patch": "@@ -151,8 +151,6 @@ struct dump_file_info\n #define PROP_rtl\t\t(1 << 8)\n #define PROP_alias\t\t(1 << 9)\n #define PROP_gimple_lomp\t(1 << 10)\t/* lowered OpenMP directives */\n-#define PROP_smt_usage          (1 << 11)       /* which SMT's are\n-\t\t\t\t\t\t   used alone.  */\n \n #define PROP_trees \\\n   (PROP_gimple_any | PROP_gimple_lcf | PROP_gimple_leh | PROP_gimple_lomp)"}, {"sha": "ab4534186dd8e83418c32af61624d65058b62ec7", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850", "patch": "@@ -2356,7 +2356,7 @@ struct tree_opt_pass pass_sra =\n   TV_TREE_SRA,\t\t\t\t/* tv_id */\n   PROP_cfg | PROP_ssa | PROP_alias,\t/* properties_required */\n   0,\t\t\t\t\t/* properties_provided */\n-  PROP_smt_usage,\t\t        /* properties_destroyed */\n+  0,\t\t\t\t        /* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func /* todo_flags_finish */\n   | TODO_update_ssa"}, {"sha": "b39553ea832f4da9f43f0441f0979870b6df0aac", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 0, "deletions": 123, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850", "patch": "@@ -370,12 +370,6 @@ set_initial_properties (struct alias_info *ai)\n     }\n }\n \n-\n-/* This variable is set to true if we are updating the used alone\n-   information for SMTs, or are in a pass that is going to break it\n-   temporarily.  */\n-bool updating_used_alone;\n-\n /* Compute which variables need to be marked call clobbered because\n    their tag is call clobbered, and which tags need to be marked\n    global because they contain global variables.  */\n@@ -401,120 +395,6 @@ compute_call_clobbered (struct alias_info *ai)\n   compute_tag_properties ();\n }\n \n-\n-/* Helper for recalculate_used_alone.  Return a conservatively correct\n-   answer as to whether STMT may make a store on the LHS to SYM.  */\n-\n-static bool\n-lhs_may_store_to (tree stmt, tree sym ATTRIBUTE_UNUSED)\n-{\n-  tree lhs = GENERIC_TREE_OPERAND (stmt, 0);\n-  \n-  lhs = get_base_address (lhs);\n-  \n-  if (!lhs)\n-    return false;\n-\n-  if (TREE_CODE (lhs) == SSA_NAME)\n-    return false;\n-  /* We could do better here by looking at the type tag of LHS, but it\n-     is unclear whether this is worth it. */\n-  return true;\n-}\n-\n-/* Recalculate the used_alone information for SMTs . */\n-\n-void \n-recalculate_used_alone (void)\n-{\n-  VEC (tree, heap) *calls = NULL;\n-  block_stmt_iterator bsi;\n-  basic_block bb;\n-  tree stmt;\n-  size_t i;\n-  referenced_var_iterator rvi;\n-  tree var;\n-  \n-  /* First, reset all the SMT used alone bits to zero.  */\n-  updating_used_alone = true;\n-  FOR_EACH_REFERENCED_VAR (var, rvi)\n-    if (TREE_CODE (var) == SYMBOL_MEMORY_TAG)\n-      {\n-\tSMT_OLD_USED_ALONE (var) = SMT_USED_ALONE (var);\n-\tSMT_USED_ALONE (var) = 0;\n-      }\n-\n-  /* Walk all the statements.\n-     Calls get put into a list of statements to update, since we will\n-     need to update operands on them if we make any changes.\n-     If we see a bare use of a SMT anywhere in a real virtual use or virtual\n-     def, mark the SMT as used alone, and for renaming.  */\n-  FOR_EACH_BB (bb)\n-    {\n-      for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n-\t{\n-\t  bool iscall = false;\n-\t  ssa_op_iter iter;\n-\n-\t  stmt = bsi_stmt (bsi);\n-\t  \n-\t  if (TREE_CODE (stmt) == CALL_EXPR\n-\t      || (TREE_CODE (stmt) == GIMPLE_MODIFY_STMT \n-\t\t  && TREE_CODE (GIMPLE_STMT_OPERAND (stmt, 1)) == CALL_EXPR))\n-\t    {\n-\t      iscall = true;\n-\t      VEC_safe_push (tree, heap, calls, stmt);\t    \n-\t    }\n-\t  \n-\t  FOR_EACH_SSA_TREE_OPERAND (var, stmt, iter, \n-\t\t\t\t     SSA_OP_VUSE | SSA_OP_VIRTUAL_DEFS)\n-\t    {\n-\t      tree svar = var;\n-\t      \n-\t      if (TREE_CODE (var) == SSA_NAME)\n-\t\tsvar = SSA_NAME_VAR (var);\n-\t      \n-\t      if (TREE_CODE (svar) == SYMBOL_MEMORY_TAG)\n-\t\t{\n-\t\t  /* We only care about the LHS on calls.  */\n-\t\t  if (iscall && !lhs_may_store_to (stmt, svar))\n-\t\t    continue;\n-\n-\t\t  if (!SMT_USED_ALONE (svar))\n-\t\t    {\n-\t\t      SMT_USED_ALONE (svar) = true;\n-\t\t      \n-\t\t      /* Only need to mark for renaming if it wasn't\n-\t\t\t used alone before.  */\n-\t\t      if (!SMT_OLD_USED_ALONE (svar))\n-\t\t\tmark_sym_for_renaming (svar);\n-\t\t    }\n-\t\t}\n-\t    }\n-\t}\t           \n-    }\n-  \n-  /* Update the operands on all the calls we saw.  */\n-  if (calls)\n-    {\n-      for (i = 0; VEC_iterate (tree, calls, i, stmt); i++)\n-\tupdate_stmt (stmt);\n-    }\n-  \n-  /* We need to mark SMT's that are no longer used for renaming so the\n-     symbols go away, or else verification will be angry with us, even\n-     though they are dead.  */\n-  FOR_EACH_REFERENCED_VAR (var, rvi)\n-    if (TREE_CODE (var) == SYMBOL_MEMORY_TAG)\n-      {\n-\tif (SMT_OLD_USED_ALONE (var) && !SMT_USED_ALONE (var))\n-\t  mark_sym_for_renaming (var);\n-      }\n-\n-  VEC_free (tree, heap, calls);\n-  updating_used_alone = false;\n-}\n-\n /* Compute may-alias information for every variable referenced in function\n    FNDECL.\n \n@@ -687,7 +567,6 @@ compute_may_aliases (void)\n   /* Deallocate memory used by aliasing data structures.  */\n   delete_alias_info (ai);\n \n-  updating_used_alone = true;\n   {\n     block_stmt_iterator bsi;\n     basic_block bb;\n@@ -699,8 +578,6 @@ compute_may_aliases (void)\n           }\n       }\n   }\n-  recalculate_used_alone ();\n-  updating_used_alone = false;\n   return 0;\n }\n "}, {"sha": "1dced722942217e147da87aed7934a920dd06ce9", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850", "patch": "@@ -1434,7 +1434,7 @@ struct tree_opt_pass pass_ccp =\n   TV_TREE_CCP,\t\t\t\t/* tv_id */\n   PROP_cfg | PROP_ssa | PROP_alias,\t/* properties_required */\n   0,\t\t\t\t\t/* properties_provided */\n-  PROP_smt_usage,\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_cleanup_cfg | TODO_dump_func | TODO_update_ssa\n     | TODO_ggc_collect | TODO_verify_ssa\n@@ -1472,7 +1472,7 @@ struct tree_opt_pass pass_store_ccp =\n   TV_TREE_STORE_CCP,\t\t\t/* tv_id */\n   PROP_cfg | PROP_ssa | PROP_alias,\t/* properties_required */\n   0,\t\t\t\t\t/* properties_provided */\n-  PROP_smt_usage,\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_update_ssa\n     | TODO_ggc_collect | TODO_verify_ssa"}, {"sha": "7656f365d8f8ebdfe81efd705ba0b7d7c9efcb35", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850", "patch": "@@ -380,7 +380,7 @@ struct tree_opt_pass pass_dominator =\n   TV_TREE_SSA_DOMINATOR_OPTS,\t\t/* tv_id */\n   PROP_cfg | PROP_ssa | PROP_alias,\t/* properties_required */\n   0,\t\t\t\t\t/* properties_provided */\n-  PROP_smt_usage,\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func\n     | TODO_update_ssa\n@@ -2521,7 +2521,7 @@ struct tree_opt_pass pass_phi_only_cprop =\n   TV_TREE_PHI_CPROP,                    /* tv_id */\n   PROP_cfg | PROP_ssa | PROP_alias,     /* properties_required */\n   0,                                    /* properties_provided */\n-  PROP_smt_usage,                       /* properties_destroyed */\n+  0,\t\t                        /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   TODO_cleanup_cfg | TODO_dump_func \n     | TODO_ggc_collect | TODO_verify_ssa"}, {"sha": "492c9a0ada41efc56817d1b7b999250e6551e6ff", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850", "patch": "@@ -1049,7 +1049,7 @@ struct tree_opt_pass pass_forwprop = {\n   PROP_cfg | PROP_ssa\n     | PROP_alias,\t\t/* properties_required */\n   0,\t\t\t\t/* properties_provided */\n-  PROP_smt_usage,\t\t/* properties_destroyed */\n+  0,\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t/* todo_flags_start */\n   TODO_dump_func /* todo_flags_finish */\n   | TODO_ggc_collect"}, {"sha": "c92c0e72a2c7368df36b3dc95746044a44baa942", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850", "patch": "@@ -1303,17 +1303,8 @@ add_virtual_operand (tree var, stmt_ann_t s_ann, int flags,\n \t  if (v_ann->is_aliased\n \t      || none_added\n \t      || (TREE_CODE (var) == SYMBOL_MEMORY_TAG\n-\t\t  && for_clobber\n-\t\t  && SMT_USED_ALONE (var)))\n+\t\t  && for_clobber))\n \t    {\n-\t      /* Every bare SMT def we add should have SMT_USED_ALONE\n-\t\t set on it, or else we will get the wrong answer on\n-\t\t clobbers.  */\n-\t      if (none_added\n-\t\t  && !updating_used_alone && gimple_aliases_computed_p (cfun)\n-\t\t  && TREE_CODE (var) == SYMBOL_MEMORY_TAG)\n-\t\tgcc_assert (SMT_USED_ALONE (var));\n-\n \t      append_v_may_def (var);\n \t    }\n \t}"}, {"sha": "bbbaa5b169a70755786b71be044277381ed110fc", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850", "patch": "@@ -4810,7 +4810,7 @@ struct tree_opt_pass pass_vrp =\n   TV_TREE_VRP,\t\t\t\t/* tv_id */\n   PROP_ssa | PROP_alias,\t\t/* properties_required */\n   0,\t\t\t\t\t/* properties_provided */\n-  PROP_smt_usage,\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_cleanup_cfg\n     | TODO_ggc_collect"}, {"sha": "98be968af50463cc991bb1510c72f386adcb0a70", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ae07b4632c474d9bc48dfdeb8dd79ee3f4b36850", "patch": "@@ -2407,22 +2407,10 @@ struct tree_memory_tag GTY(())\n {\n   struct tree_decl_minimal common;\n   unsigned int is_global:1;\n-  unsigned int is_used_alone:1;\n-  unsigned int old_used_alone:1;\n };\n \n #define MTAG_GLOBAL(NODE) (TREE_MEMORY_TAG_CHECK (NODE)->mtag.is_global)\n \n-/* This flag is true if a SMT is used as the V_MAY_DEF or VUSE operand\n-   directly, because the access had all of the SMT's aliases pruned\n-   from it.  */\n-#define SMT_USED_ALONE(NODE) (SYMBOL_MEMORY_TAG_CHECK (NODE)->mtag.is_used_alone)\n-\n-/* This flag is used to temporarily store the old value of the used alone\n-   flag when updating so we know whether to mark the symbol for\n-   renaming.  */\n-#define SMT_OLD_USED_ALONE(NODE) (SYMBOL_MEMORY_TAG_CHECK (NODE)->mtag.old_used_alone)\n-\n struct tree_struct_field_tag GTY(())\n {\n   struct tree_memory_tag common;"}]}