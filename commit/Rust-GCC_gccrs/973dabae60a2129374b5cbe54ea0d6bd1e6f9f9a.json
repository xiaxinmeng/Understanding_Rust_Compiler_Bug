{"sha": "973dabae60a2129374b5cbe54ea0d6bd1e6f9f9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTczZGFiYWU2MGEyMTI5Mzc0YjVjYmU1NGVhMGQ2YmQxZTZmOWY5YQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2015-09-21T10:11:24Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2015-09-21T10:11:24Z"}, "message": "[PR middle-end/60832] Do not convert widest_int to tree just for printing it.\n\nIn do_warn_aggressive_loop_optimizations, we convert to a tree just to print a\nwidest_int. Apart from overly complicated, this results in printing '3u'\ninstead of just '3'.\n\nUnfortunately, adding a printf-like conversion specifier would require making\npretty-print.c link with wide-int.cc, which will include a lot of new\ndependencies into several other programs (gcov-tool for example). It would be\npossible to add the conversion specifier to every FE pretty-printer, but this\nstill would require updating c-format.c, which is far from trivial. A simpler\napproach is to convert to a string rather than to a tree.\n\nIn addition, \"iteration 3 invokes undefined behavior within this loop\" seems to\nme clearer than \"iteration 3 invokes undefined behavior; containing loop\".\n\ngcc/testsuite/ChangeLog:\n\n2015-09-21  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR middle-end/60832\n\t* gcc.dg/pr53265.c: Update.\n\ngcc/ChangeLog:\n\n2015-09-21  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR middle-end/60832\n\t* tree-ssa-loop-niter.c (do_warn_aggressive_loop_optimizations):\n\tPrint i_bound without converting it to a tree.\n\nFrom-SVN: r227964", "tree": {"sha": "99fcda1134c2e7c64285192a0c3d824825d844cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99fcda1134c2e7c64285192a0c3d824825d844cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/973dabae60a2129374b5cbe54ea0d6bd1e6f9f9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/973dabae60a2129374b5cbe54ea0d6bd1e6f9f9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/973dabae60a2129374b5cbe54ea0d6bd1e6f9f9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/973dabae60a2129374b5cbe54ea0d6bd1e6f9f9a/comments", "author": null, "committer": null, "parents": [{"sha": "6ad9ac88388d049d48364b59a58d1cb72c50c7c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ad9ac88388d049d48364b59a58d1cb72c50c7c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ad9ac88388d049d48364b59a58d1cb72c50c7c6"}], "stats": {"total": 52, "additions": 32, "deletions": 20}, "files": [{"sha": "970ebae979fd1645dd2ae34b79ca6c96977a53ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973dabae60a2129374b5cbe54ea0d6bd1e6f9f9a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973dabae60a2129374b5cbe54ea0d6bd1e6f9f9a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=973dabae60a2129374b5cbe54ea0d6bd1e6f9f9a", "patch": "@@ -1,3 +1,9 @@\n+2015-09-21  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR middle-end/60832\n+\t* tree-ssa-loop-niter.c (do_warn_aggressive_loop_optimizations):\n+\tPrint i_bound without converting it to a tree.\n+\n 2015-09-21  Bilyan Borisov  <bilyan.borisov@arm.com>\n \n \t* config/arm/arm.c (thumb_output_move_mem_multiple): Replaced"}, {"sha": "82d67739ec402c6ca3fa858b209ba5e4564c2b26", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973dabae60a2129374b5cbe54ea0d6bd1e6f9f9a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973dabae60a2129374b5cbe54ea0d6bd1e6f9f9a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=973dabae60a2129374b5cbe54ea0d6bd1e6f9f9a", "patch": "@@ -1,3 +1,8 @@\n+2015-09-21  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR middle-end/60832\n+\t* gcc.dg/pr53265.c: Update.\n+\n 2015-09-21  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.target/arm/stack-checking.c: Skip for Thumb1."}, {"sha": "d3ab6aa60317312fefb94296e2b8f67ab7905eb6", "filename": "gcc/testsuite/gcc.dg/pr53265.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973dabae60a2129374b5cbe54ea0d6bd1e6f9f9a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53265.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973dabae60a2129374b5cbe54ea0d6bd1e6f9f9a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53265.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53265.c?ref=973dabae60a2129374b5cbe54ea0d6bd1e6f9f9a", "patch": "@@ -12,8 +12,8 @@ fn1 (void)\n   unsigned int a[128];\n   int i;\n \n-  for (i = 0; i < 128; ++i)\t/* { dg-message \"note: containing loop\" } */\n-    a[i] = i * 0x02000001;\t/* { dg-warning \"invokes undefined behavior\" } */\n+  for (i = 0; i < 128; ++i)\t/* { dg-message \"note: within this loop\" } */\n+    a[i] = i * 0x02000001;\t/* { dg-warning \"64 invokes undefined behavior\" } */\n   bar (a);\n }\n \n@@ -23,8 +23,8 @@ fn2 (void)\n   unsigned long long a[128];\n   int i;\n \n-  for (i = 0; i < 128; i++)\t\t\t/* { dg-message \"note: containing loop\" } */\n-    a[i] = (i + 1LL) * 0x0123456789ABCDEFLL;\t/* { dg-warning \"invokes undefined behavior\" } */\n+  for (i = 0; i < 128; i++)\t\t\t/* { dg-message \"note: within this loop\" } */\n+    a[i] = (i + 1LL) * 0x0123456789ABCDEFLL;\t/* { dg-warning \"112 invokes undefined behavior\" } */\n   bar (a);\n }\n \n@@ -35,9 +35,9 @@ fn3 (void)\n   int i;\n \n   bar (b);\n-  for (i = 0; i < (int) (sizeof (a) / sizeof (a[0])); i++)\t/* { dg-message \"note: containing loop\" } */\n+  for (i = 0; i < (int) (sizeof (a) / sizeof (a[0])); i++)\t/* { dg-message \"note: within this loop\" } */\n     {\n-      c[i + 8] = b[i];\t/* { dg-warning \"invokes undefined behavior\" } */\n+      c[i + 8] = b[i];\t/* { dg-warning \"8 invokes undefined behavior\" } */\n       a[i + 8] = b[i + 8];\n     }\n   bar (a);\n@@ -50,9 +50,9 @@ fn4 (void)\n   unsigned int *a[32], *o, i;\n \n   bar (a);\n-  for (i = 0; i <= sizeof (a) / sizeof (a[0]); i++)\t/* { dg-message \"note: containing loop\" \"\" } */\n+  for (i = 0; i <= sizeof (a) / sizeof (a[0]); i++)\t/* { dg-message \"note: within this loop\" \"\" } */\n     {\n-      o = a[i];\t/* { dg-warning \"invokes undefined behavior\" \"\" } */\n+      o = a[i];\t/* { dg-warning \"32 invokes undefined behavior\" \"\" } */\n       bar (o);\n     }\n }\n@@ -65,8 +65,8 @@ fn5 (void)\n   int j;\n \n   bar (b);\n-  for (j = 0; j < 1140; j++)\t/* { dg-message \"note: containing loop\" } */\n-    a[23940 + j - 950] = b[j];\t/* { dg-warning \"invokes undefined behavior\" } */\n+  for (j = 0; j < 1140; j++)\t/* { dg-message \"note: within this loop\" } */\n+    a[23940 + j - 950] = b[j];\t/* { dg-warning \"950 invokes undefined behavior\" } */\n   bar (a);\n }\n \n@@ -76,8 +76,8 @@ fn6 (void)\n   double a[4][3], b[12];\n   int i;\n   bar (b);\n-  for (i = 0; i < 12; i++)\t/* { dg-message \"note: containing loop\" } */\n-    a[0][i] = b[i] / 10000.0;\t/* { dg-warning \"invokes undefined behavior\" } */\n+  for (i = 0; i < 12; i++)\t/* { dg-message \"note: within this loop\" } */\n+    a[0][i] = b[i] / 10000.0;\t/* { dg-warning \"3 invokes undefined behavior\" } */\n   bar (a);\n }\n \n@@ -86,11 +86,11 @@ fn7 (void)\n {\n   int a[16], b, c;\n   bar (a);\n-  for (b = a[c = 0]; c < 16; b = a[++c])\t/* { dg-warning \"invokes undefined behavior\" \"\" } */\n+  for (b = a[c = 0]; c < 16; b = a[++c])\t/* { dg-warning \"15 invokes undefined behavior\" \"\" } */\n     baz (b);\n }\n \n-/* { dg-message \"note: containing loop\" \"\" { target *-*-* } 89 } */\n+/* { dg-message \"note: within this loop\" \"\" { target *-*-* } 89 } */\n \n const void *va, *vb, *vc, *vd, *ve;\n const void *vf[4];\n@@ -134,8 +134,8 @@ void\n fn10 (void)\n {\n   int i;\n-  for (i = 16; i < 32; i++)\t/* { dg-message \"note: containing loop\" } */\n-    xa[i] = 26;\t\t\t/* { dg-warning \"invokes undefined behavior\" } */\n+  for (i = 16; i < 32; i++)\t/* { dg-message \"note: within this loop\" } */\n+    xa[i] = 26;\t\t\t/* { dg-warning \"2 invokes undefined behavior\" } */\n }\n \n __attribute__((noinline)) static void"}, {"sha": "5125af4d7bdaa8b36d8902c6b9f61aca51e57f81", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973dabae60a2129374b5cbe54ea0d6bd1e6f9f9a/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973dabae60a2129374b5cbe54ea0d6bd1e6f9f9a/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=973dabae60a2129374b5cbe54ea0d6bd1e6f9f9a", "patch": "@@ -2911,11 +2911,12 @@ do_warn_aggressive_loop_optimizations (struct loop *loop,\n     return;\n \n   gimple *estmt = last_stmt (e->src);\n+  char buf[WIDE_INT_PRINT_BUFFER_SIZE];\n+  print_dec (i_bound, buf, TYPE_UNSIGNED (TREE_TYPE (loop->nb_iterations))\n+\t     ? UNSIGNED : SIGNED);\n   if (warning_at (gimple_location (stmt), OPT_Waggressive_loop_optimizations,\n-\t\t  \"iteration %E invokes undefined behavior\",\n-\t\t  wide_int_to_tree (TREE_TYPE (loop->nb_iterations),\n-\t\t\t\t    i_bound)))\n-    inform (gimple_location (estmt), \"containing loop\");\n+\t\t  \"iteration %s invokes undefined behavior\", buf))\n+    inform (gimple_location (estmt), \"within this loop\");\n   loop->warned_aggressive_loop_optimizations = true;\n }\n "}]}