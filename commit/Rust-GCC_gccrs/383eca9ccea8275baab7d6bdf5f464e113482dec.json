{"sha": "383eca9ccea8275baab7d6bdf5f464e113482dec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgzZWNhOWNjZWE4Mjc1YmFhYjdkNmJkZjVmNDY0ZTExMzQ4MmRlYw==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2005-12-13T22:49:56Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2005-12-13T22:49:56Z"}, "message": "fpgnulib.c (__unordsf2, [...]): New functions.\n\n2005-12-13  Paul Brook  <paul@codesourcery.com>\n\n\t* config/m68k/fpgnulib.c (__unordsf2, __unorddf2, __unordxf2,\n\t__floatunsidf, __floatunsisf, __floatunsixf): New functions.\n\nFrom-SVN: r108487", "tree": {"sha": "221a903a29cd125a6976d43749f9528bfe84ceab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/221a903a29cd125a6976d43749f9528bfe84ceab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/383eca9ccea8275baab7d6bdf5f464e113482dec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/383eca9ccea8275baab7d6bdf5f464e113482dec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/383eca9ccea8275baab7d6bdf5f464e113482dec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/383eca9ccea8275baab7d6bdf5f464e113482dec/comments", "author": null, "committer": null, "parents": [{"sha": "c3d7c86daf797aa476dfa38efe11075ae01a2ae9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3d7c86daf797aa476dfa38efe11075ae01a2ae9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3d7c86daf797aa476dfa38efe11075ae01a2ae9"}], "stats": {"total": 101, "additions": 101, "deletions": 0}, "files": [{"sha": "bc139b27691ec27bcccae6ddf831e85fbe32bc05", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/383eca9ccea8275baab7d6bdf5f464e113482dec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/383eca9ccea8275baab7d6bdf5f464e113482dec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=383eca9ccea8275baab7d6bdf5f464e113482dec", "patch": "@@ -1,3 +1,8 @@\n+2005-12-13  Paul Brook  <paul@codesourcery.com>\n+\n+\t* config/m68k/fpgnulib.c (__unordsf2, __unorddf2, __unordxf2,\n+\t__floatunsidf, __floatunsisf, __floatunsixf): New functions.\n+\n 2005-12-13  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* config/mt/t-mt (crti.o, crtn.o): Add multilib options."}, {"sha": "a3ebc21608e9da61cc4e50d1a2246d0796911b7d", "filename": "gcc/config/m68k/fpgnulib.c", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/383eca9ccea8275baab7d6bdf5f464e113482dec/gcc%2Fconfig%2Fm68k%2Ffpgnulib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/383eca9ccea8275baab7d6bdf5f464e113482dec/gcc%2Fconfig%2Fm68k%2Ffpgnulib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ffpgnulib.c?ref=383eca9ccea8275baab7d6bdf5f464e113482dec", "patch": "@@ -105,6 +105,69 @@ union long_double_long\n \f\n #ifndef EXTFLOAT\n \n+int\n+__unordsf2(float a, float b)\n+{\n+  union float_long fl;\n+\n+  fl.f = a;\n+  if (EXP(fl.l) == EXP(~0u) && (MANT(fl.l) & ~HIDDEN) != 0)\n+    return 1;\n+  fl.f = b;\n+  if (EXP(fl.l) == EXP(~0u) && (MANT(fl.l) & ~HIDDEN) != 0)\n+    return 1;\n+  return 0;\n+}\n+\n+int\n+__unorddf2(double a, double b)\n+{\n+  union double_long dl;\n+\n+  dl.d = a;\n+  if (EXPD(dl) == EXPDMASK\n+      && ((dl.l.upper & MANTDMASK) != 0 || dl.l.lower != 0))\n+    return 1;\n+  dl.d = b;\n+  if (EXPD(dl) == EXPDMASK\n+      && ((dl.l.upper & MANTDMASK) != 0 || dl.l.lower != 0))\n+    return 1;\n+  return 0;\n+}\n+\n+/* convert unsigned int to double */\n+double\n+__floatunsidf (unsigned long a1)\n+{\n+  long exp = 32 + EXCESSD;\n+  union double_long dl;\n+\n+  if (!a1)\n+    {\n+      dl.l.upper = dl.l.lower = 0;\n+      return dl.d;\n+    }\n+\n+  while (a1 < 0x2000000L)\n+    {\n+      a1 <<= 4;\n+      exp -= 4;\n+    }\n+\n+  while (a1 < 0x80000000L)\n+    {\n+      a1 <<= 1;\n+      exp--;\n+    }\n+\n+  /* pack up and go home */\n+  dl.l.upper = exp << 20L;\n+  dl.l.upper |= (a1 >> 11L) & ~HIDDEND;\n+  dl.l.lower = a1 << 21L;\n+\n+  return dl.d;\n+}\n+\n /* convert int to double */\n double\n __floatsidf (long a1)\n@@ -151,6 +214,14 @@ __floatsidf (long a1)\n   return dl.d;\n }\n \n+/* convert unsigned int to float */\n+float\n+__floatunsisf (unsigned long l)\n+{\n+  double foo = __floatunsidf (l);\n+  return foo;\n+}\n+\n /* convert int to float */\n float\n __floatsisf (long l)\n@@ -292,13 +363,30 @@ __fixsfsi (float a1)\n    We assume all numbers are normalized, don't do any rounding, etc.  */\n \n /* Prototypes for the above in case we use them.  */\n+double __floatunsidf (unsigned long);\n double __floatsidf (long);\n float __floatsisf (long);\n double __extendsfdf2 (float);\n float __truncdfsf2 (double);\n long __fixdfsi (double);\n long __fixsfsi (float);\n \n+int\n+__unordxf2(long double a, long double b)\n+{\n+  union long_double_long ldl;\n+\n+  ldl.ld = a;\n+  if (EXPX(ldl) == EXPXMASK\n+      && ((ldl.l.middle & MANTXMASK) != 0 || ldl.l.lower != 0))\n+    return 1;\n+  ldl.ld = b;\n+  if (EXPX(ldl) == EXPXMASK\n+      && ((ldl.l.middle & MANTXMASK) != 0 || ldl.l.lower != 0))\n+    return 1;\n+  return 0;\n+}\n+\n /* convert double to long double */\n long double\n __extenddfxf2 (double d)\n@@ -381,6 +469,14 @@ __floatsixf (long l)\n   return foo;\n }\n \n+/* convert an unsigned int to a long double */\n+long double\n+__floatunsixf (unsigned long l)\n+{\n+  double foo = __floatunsidf (l);\n+  return foo;\n+}\n+\n /* convert a long double to an int */\n long\n __fixxfsi (long double ld)"}]}