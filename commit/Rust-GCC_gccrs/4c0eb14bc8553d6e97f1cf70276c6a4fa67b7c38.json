{"sha": "4c0eb14bc8553d6e97f1cf70276c6a4fa67b7c38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMwZWIxNGJjODU1M2Q2ZTk3ZjFjZjcwMjc2YzZhNGZhNjdiN2MzOA==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2020-09-30T09:51:41Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2020-09-30T12:19:08Z"}, "message": "[testsuite] Re-enable pr94600-{1,3}.c tests for arm\n\nBefore commit 7e437162001 \"[testsuite] Require non_strict_align in\npr94600-{1,3}.c\", some tests were failing for nvptx, because volatile stores\nwere expected, but memcpy's were found instead.\n\nThis was traced back to this bit in compute_record_mode:\n...\n  /* If structure's known alignment is less than what the scalar\n     mode would need, and it matters, then stick with BLKmode.  */\n  if (mode != BLKmode\n      && STRICT_ALIGNMENT\n      && ! (TYPE_ALIGN (type) >= BIGGEST_ALIGNMENT\n            || TYPE_ALIGN (type) >= GET_MODE_ALIGNMENT (mode)))\n    {\n      /* If this is the only reason this type is BLKmode, then\n         don't force containing types to be BLKmode.  */\n      TYPE_NO_FORCE_BLK (type) = 1;\n      mode = BLKmode;\n    }\n...\nwhich got triggered for nvptx, but not for x86_64.\n\nThe commit disabled the tests for non_strict_align effective target, but\nthat had the effect for the arm target that those tests were disabled, even\nthough they were passing before.\n\nFurther investigation in compute_record_mode shows that the if-condition\nevaluates to false for arm because, because TYPE_ALIGN (type) == 32, while\nit's 8 for nvptx.  This again can be explained by the\nPCC_BITFIELD_TYPE_MATTERS setting, which is 1 for arm, but 0 for nvptx.\n\nRe-enable the test for arm by using effective target\n(non_strict_align || pcc_bitfield_type_matters).\n\nTested on arm-eabi and nvptx.\n\ngcc/testsuite/ChangeLog:\n\n2020-09-30  Tom de Vries  <tdevries@suse.de>\n\n\t* gcc.dg/pr94600-1.c: Use effective target\n\t(non_strict_align || pcc_bitfield_type_matters).\n\t* gcc.dg/pr94600-3.c: Same.", "tree": {"sha": "f139f72cb9526b892e6d7d5a35d1abf4f287a02c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f139f72cb9526b892e6d7d5a35d1abf4f287a02c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c0eb14bc8553d6e97f1cf70276c6a4fa67b7c38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c0eb14bc8553d6e97f1cf70276c6a4fa67b7c38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c0eb14bc8553d6e97f1cf70276c6a4fa67b7c38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c0eb14bc8553d6e97f1cf70276c6a4fa67b7c38/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92e652d8c21bd7e66cbb0f9001542a2f55345af0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92e652d8c21bd7e66cbb0f9001542a2f55345af0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92e652d8c21bd7e66cbb0f9001542a2f55345af0"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "c9a7bb9007e1941a503786fdd07d6111e8b463c6", "filename": "gcc/testsuite/gcc.dg/pr94600-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c0eb14bc8553d6e97f1cf70276c6a4fa67b7c38/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c0eb14bc8553d6e97f1cf70276c6a4fa67b7c38/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-1.c?ref=4c0eb14bc8553d6e97f1cf70276c6a4fa67b7c38", "patch": "@@ -32,5 +32,5 @@ foo(void)\n }\n \n /* The only volatile accesses should be the obvious writes.  */\n-/* { dg-final { scan-rtl-dump-times {\\(mem/v} 6 \"final\" { target { non_strict_align } } } } */\n-/* { dg-final { scan-rtl-dump-times {\\(set \\(mem/v} 6 \"final\" { target { non_strict_align } } } } */\n+/* { dg-final { scan-rtl-dump-times {\\(mem/v} 6 \"final\" { target { non_strict_align || pcc_bitfield_type_matters } } } } */\n+/* { dg-final { scan-rtl-dump-times {\\(set \\(mem/v} 6 \"final\" { target { non_strict_align || pcc_bitfield_type_matters } } } } */"}, {"sha": "ff42c7db3c6a757c787a8109bbc6ed1bd43cc174", "filename": "gcc/testsuite/gcc.dg/pr94600-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c0eb14bc8553d6e97f1cf70276c6a4fa67b7c38/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c0eb14bc8553d6e97f1cf70276c6a4fa67b7c38/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-3.c?ref=4c0eb14bc8553d6e97f1cf70276c6a4fa67b7c38", "patch": "@@ -31,5 +31,5 @@ foo(void)\n }\n \n /* The loop isn't unrolled. */\n-/* { dg-final { scan-rtl-dump-times {\\(mem/v} 1 \"final\" { target { non_strict_align } } } } */\n-/* { dg-final { scan-rtl-dump-times {\\(set \\(mem/v} 1 \"final\" { target { non_strict_align } } } } */\n+/* { dg-final { scan-rtl-dump-times {\\(mem/v} 1 \"final\" { target { non_strict_align || pcc_bitfield_type_matters } } } } */\n+/* { dg-final { scan-rtl-dump-times {\\(set \\(mem/v} 1 \"final\" { target { non_strict_align || pcc_bitfield_type_matters } } } } */"}]}