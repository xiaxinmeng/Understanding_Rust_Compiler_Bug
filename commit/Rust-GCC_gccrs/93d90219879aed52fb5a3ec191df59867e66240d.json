{"sha": "93d90219879aed52fb5a3ec191df59867e66240d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNkOTAyMTk4NzlhZWQ1MmZiNWEzZWMxOTFkZjU5ODY3ZTY2MjQwZA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2019-12-11T11:45:49Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2019-12-11T11:45:49Z"}, "message": "libgomp \u2013 spelling fixes, incl. omp_lib.h.in\n\n        * omp_lib.h.in: Fix spelling of function declaration\n        omp_get_cancell(l)ation.\n        * libgomp.texi (acc_is_present, acc_async_test, acc_async_test_all):\n        Fix typos.\n        * env.c: Fix comment typos.\n        * oacc-host.c: Likewise.\n        * ordered.c: Likewise.\n        * task.c: Likewise.\n        * team.c: Likewise.\n        * config/gcn/task.c: Likewise.\n        * config/gcn/team.c: Likewise.\n        * config/nvptx/task.c: Likewise.\n        * config/nvptx/team.c: Likewise.\n        * plugin/plugin-gcn.c: Likewise.\n        * testsuite/libgomp.fortran/jacobi.f: Likewise.\n        * testsuite/libgomp.hsa.c/tiling-2.c: Likewise.\n        * testsuite/libgomp.oacc-c-c++-common/enter_exit-lib.c: Likewise.\n\nFrom-SVN: r279218", "tree": {"sha": "2622e8d5fd6fe09a9c69249428ac6b697bf37519", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2622e8d5fd6fe09a9c69249428ac6b697bf37519"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93d90219879aed52fb5a3ec191df59867e66240d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93d90219879aed52fb5a3ec191df59867e66240d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93d90219879aed52fb5a3ec191df59867e66240d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93d90219879aed52fb5a3ec191df59867e66240d/comments", "author": null, "committer": null, "parents": [{"sha": "a0221aeebd5bbe9ba097490b4b916495f2fe163e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0221aeebd5bbe9ba097490b4b916495f2fe163e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0221aeebd5bbe9ba097490b4b916495f2fe163e"}], "stats": {"total": 92, "additions": 56, "deletions": 36}, "files": [{"sha": "6cefeba5f5f369667b7652b786afc05955bd978d", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=93d90219879aed52fb5a3ec191df59867e66240d", "patch": "@@ -1,3 +1,23 @@\n+2019-12-11  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* omp_lib.h.in: Fix spelling of function declaration\n+\tomp_get_cancell(l)ation.\n+\t* libgomp.texi (acc_is_present, acc_async_test, acc_async_test_all):\n+\tFix typos.\n+\t* env.c: Fix comment typos.\n+\t* oacc-host.c: Likewise.\n+\t* ordered.c: Likewise.\n+\t* task.c: Likewise.\n+\t* team.c: Likewise.\n+\t* config/gcn/task.c: Likewise.\n+\t* config/gcn/team.c: Likewise.\n+\t* config/nvptx/task.c: Likewise.\n+\t* config/nvptx/team.c: Likewise.\n+\t* plugin/plugin-gcn.c: Likewise.\n+\t* testsuite/libgomp.fortran/jacobi.f: Likewise.\n+\t* testsuite/libgomp.hsa.c/tiling-2.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/enter_exit-lib.c: Likewise.\n+\n 2019-12-11  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* testsuite/libgomp.oacc-fortran/optional-cache.f95: Add 'dg-do run'.\n@@ -1235,7 +1255,7 @@\n \t(host_openacc_async_construct): New function.\n \t(host_openacc_async_destruct): New function.\n \t(struct gomp_device_descr host_dispatch): Remove initialization of old\n-\tinterface, add intialization of new async sub-struct.\n+\tinterface, add initialization of new async sub-struct.\n \t* oacc-init.c (acc_shutdown_1): Adjust to use gomp_fini_device.\n \t(goacc_attach_host_thread_to_device): Remove old async code usage.\n \t* oacc-int.h (goacc_init_asyncqueues): New declaration.\n@@ -6373,7 +6393,7 @@\n \t* libgomp_g.h (GOACC_parallel): Remove.\n \t(GOACC_parallel_keyed): Declare.\n \t* plugin/plugin-nvptx.c (struct targ_fn_launch): New struct.\n-\t(stuct targ_gn_descriptor): Replace name field with launch field.\n+\t(struct targ_gn_descriptor): Replace name field with launch field.\n \t(nvptx_exec): Lose separate geometry args, take array.  Process\n \tdynamic dimensions and adjust.\n \t(struct nvptx_tdata): Replace fn_names field with fn_descs.\n@@ -6394,7 +6414,7 @@\n 2015-09-08  Aditya Kumar  <hiraditya@msn.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n \n-\t* testsuite/libgomp.graphite/bounds.c (int foo): Modifed test case to\n+\t* testsuite/libgomp.graphite/bounds.c (int foo): Modified test case to\n \tmatch o/p.\n \t* testsuite/libgomp.graphite/force-parallel-1.c (void parloop): Same.\n \t* testsuite/libgomp.graphite/force-parallel-4.c: Same.\n@@ -6671,7 +6691,7 @@\n \t* target.c (struct offload_image_descr): Constify target_data.\n \t(gomp_offload_image_to_device): Likewise.\n \t(GOMP_offload_register): Likewise.\n-\t(GOMP_offload_unrefister): Likewise.\n+\t(GOMP_offload_unregister): Likewise.\n \t* plugin/plugin-host.c (GOMP_OFFLOAD_load_image,\n \tGOMP_OFFLOAD_unload_image): Constify target data.\n \t* plugin/plugin-nvptx.c (struct ptx_image_data): Constify target data.\n@@ -7997,7 +8017,7 @@\n 2014-12-12  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* testsuite/lib/libgomp.exp: Load target-utils.exp.\n-\tMove load of target-supportes.exp earlier.\n+\tMove load of target-supports.exp earlier.\n \n 2014-12-10  Ilya Verbin  <ilya.verbin@intel.com>\n \n@@ -8484,7 +8504,7 @@\n \n 2013-12-17  Andreas Tobler  <andreast@gcc.gnu.org>\n \n-\t* testsuite/libgomp.c/affinity-1.c: Remove alloca.h inlcude. Replace\n+\t* testsuite/libgomp.c/affinity-1.c: Remove alloca.h include. Replace\n \talloca () with __builtin_alloca ().\n \t* testsuite/libgomp.c/icv-2.c: Add FreeBSD coverage.\n \t* testsuite/libgomp.c/lock-3.c: Likewise.\n@@ -8644,7 +8664,7 @@\n \t(gomp_team_end): Use gomp_managed_threads_lock instead of\n \tgomp_remaining_threads_lock.  Use gomp_team_barrier_wait_final instead\n \tof gomp_team_barrier_wait.  If team->team_cancelled, call\n-\tgomp_fini_worshare on ws chain starting at team->work_shares_to_free\n+\tgomp_fini_workshare on ws chain starting at team->work_shares_to_free\n \trather than thr->ts.work_share.\n \t(initialize_team): Don't call gomp_sem_init here.\n \t* sections.c (GOMP_parallel_sections_start): Adjust gomp_team_start\n@@ -12019,7 +12039,7 @@\n \n \t* configure.ac: Determine whether -pthread or -lpthread is needed.\n \t* Makefile.am (libgomp_la_LDFLAGS): Remove explicit -lpthread.\n-\t* Makefine.in, configure: Rebuild.\n+\t* Makefile.in, configure: Rebuild.\n \n 2005-09-28  Richard Henderson  <rth@redhat.com>\n "}, {"sha": "91554571b997c951f602ae33c3518c7e70820219", "filename": "libgomp/config/gcn/task.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2Fconfig%2Fgcn%2Ftask.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2Fconfig%2Fgcn%2Ftask.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Fgcn%2Ftask.c?ref=93d90219879aed52fb5a3ec191df59867e66240d", "patch": "@@ -23,7 +23,7 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-/* This file handles the maintainence of tasks in response to task\n+/* This file handles the maintenance of tasks in response to task\n    creation and termination.  */\n \n #include \"libgomp.h\""}, {"sha": "e538a10fd8a988d7a411cd7f6176a17a96487c8e", "filename": "libgomp/config/gcn/team.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2Fconfig%2Fgcn%2Fteam.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2Fconfig%2Fgcn%2Fteam.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Fgcn%2Fteam.c?ref=93d90219879aed52fb5a3ec191df59867e66240d", "patch": "@@ -23,7 +23,7 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-/* This file handles maintainance of threads on AMD GCN.  */\n+/* This file handles maintenance of threads on AMD GCN.  */\n \n #include \"libgomp.h\"\n #include <stdlib.h>\n@@ -74,7 +74,7 @@ gomp_gcn_enter_kernel (void)\n \t\t\t\t\t\t      * numthreads);\n       set_gcn_thrs (thrs);\n \n-      /* Allocate and initailize a pool of threads in the team.\n+      /* Allocate and initialize a pool of threads in the team.\n          The threads are already running, of course, we just need to manage\n          the communication between them.  */\n       struct gomp_thread_pool *pool = team_malloc (sizeof (*pool));"}, {"sha": "f7745a7314db3e10489720b7289133812be12c7b", "filename": "libgomp/config/nvptx/task.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2Fconfig%2Fnvptx%2Ftask.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2Fconfig%2Fnvptx%2Ftask.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Fnvptx%2Ftask.c?ref=93d90219879aed52fb5a3ec191df59867e66240d", "patch": "@@ -23,7 +23,7 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-/* This file handles the maintainence of tasks in response to task\n+/* This file handles the maintenance of tasks in response to task\n    creation and termination.  */\n \n #ifdef __nvptx_softstack__"}, {"sha": "d19c963e8719ac9470806c0f9d5f114231aa5ad5", "filename": "libgomp/config/nvptx/team.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2Fconfig%2Fnvptx%2Fteam.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2Fconfig%2Fnvptx%2Fteam.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Fnvptx%2Fteam.c?ref=93d90219879aed52fb5a3ec191df59867e66240d", "patch": "@@ -23,7 +23,7 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-/* This file handles maintainance of threads on NVPTX.  */\n+/* This file handles maintenance of threads on NVPTX.  */\n \n #if defined __nvptx_softstack__ && defined __nvptx_unisimt__\n "}, {"sha": "9a7af1265a4a2e80d9087d0c7f24a5096cb22b6a", "filename": "libgomp/env.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2Fenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2Fenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fenv.c?ref=93d90219879aed52fb5a3ec191df59867e66240d", "patch": "@@ -1337,7 +1337,7 @@ initialize_env (void)\n     ignore = true;\n   /* Make sure OMP_PLACES and GOMP_CPU_AFFINITY env vars are always\n      parsed if present in the environment.  If OMP_PROC_BIND was set\n-     explictly to false, don't populate places list though.  If places\n+     explicitly to false, don't populate places list though.  If places\n      list was successfully set from OMP_PLACES, only parse but don't process\n      GOMP_CPU_AFFINITY.  If OMP_PROC_BIND was not set in the environment,\n      default to OMP_PROC_BIND=true if OMP_PLACES or GOMP_CPU_AFFINITY"}, {"sha": "ac9d38e01d756496044f07b71efcb95909495b90", "filename": "libgomp/libgomp.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2Flibgomp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2Flibgomp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.texi?ref=93d90219879aed52fb5a3ec191df59867e66240d", "patch": "@@ -1887,7 +1887,7 @@ acceleration device.\n                                 host address.\n * acc_hostptr::                 Get host pointer associated with specific\n                                 device address.\n-* acc_is_present::              Indiciate whether host variable / array is\n+* acc_is_present::              Indicate whether host variable / array is\n                                 present on device.\n * acc_memcpy_to_device::        Copy host memory to device memory.\n * acc_memcpy_from_device::      Copy device memory to host memory.\n@@ -2042,10 +2042,10 @@ region.\n @section @code{acc_async_test} -- Test for completion of a specific asynchronous operation.\n @table @asis\n @item @emph{Description}\n-This function tests for completion of the asynchrounous operation specified\n+This function tests for completion of the asynchronous operation specified\n in @var{arg}. In C/C++, a non-zero value will be returned to indicate\n the specified asynchronous operation has completed. While Fortran will return\n-a @code{true}. If the asynchrounous operation has not completed, C/C++ returns\n+a @code{true}. If the asynchronous operation has not completed, C/C++ returns\n a zero and Fortran returns a @code{false}.\n \n @item @emph{C/C++}:\n@@ -2071,7 +2071,7 @@ a zero and Fortran returns a @code{false}.\n @section @code{acc_async_test_all} -- Tests for completion of all asynchronous operations.\n @table @asis\n @item @emph{Description}\n-This function tests for completion of all asynchrounous operations.\n+This function tests for completion of all asynchronous operations.\n In C/C++, a non-zero value will be returned to indicate all asynchronous\n operations have completed. While Fortran will return a @code{true}. If\n any asynchronous operation has not completed, C/C++ returns a zero and\n@@ -2255,7 +2255,7 @@ This function shuts down the runtime for the device type specified in\n @item @emph{Description}:\n This function returns whether the program is executing on a particular\n device specified in @var{devicetype}. In C/C++ a non-zero value is\n-returned to indicate the device is execiting on the specified device type.\n+returned to indicate the device is executing on the specified device type.\n In Fortran, @code{true} will be returned. If the program is not executing\n on the specified device type C/C++ will return a zero, while Fortran will\n return @code{false}."}, {"sha": "845140f04f52b6ac4898b096452f4cfa2fff5c0e", "filename": "libgomp/oacc-host.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2Foacc-host.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2Foacc-host.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-host.c?ref=93d90219879aed52fb5a3ec191df59867e66240d", "patch": "@@ -260,7 +260,7 @@ static struct gomp_device_descr host_dispatch =\n     .run_func = host_run,\n \n     .mem_map = { NULL },\n-    /* .lock initilized in goacc_host_init.  */\n+    /* .lock initialized in goacc_host_init.  */\n     .state = GOMP_DEVICE_UNINITIALIZED,\n \n     .openacc = {"}, {"sha": "2c33ce8ea76eda2cb7a28c60f0a45b81cc5aba9c", "filename": "libgomp/omp_lib.h.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2Fomp_lib.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2Fomp_lib.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fomp_lib.h.in?ref=93d90219879aed52fb5a3ec191df59867e66240d", "patch": "@@ -102,8 +102,8 @@\n       external omp_in_final\n       logical(4) omp_in_final\n \n-      external omp_get_cancelllation\n-      logical(4) omp_get_cancelllation\n+      external omp_get_cancellation\n+      logical(4) omp_get_cancellation\n \n       external omp_get_proc_bind\n       integer(omp_proc_bind_kind) omp_get_proc_bind"}, {"sha": "60e310e01a114988c0725a9f2669dcb07de8cbb8", "filename": "libgomp/ordered.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2Fordered.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2Fordered.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fordered.c?ref=93d90219879aed52fb5a3ec191df59867e66240d", "patch": "@@ -214,7 +214,7 @@ gomp_ordered_sync (void)\n      Either way we get correct results.\n      However, there is an implicit flush on entry to an ordered region,\n      so we do need to have a barrier here.  If we were taking a lock\n-     this could be MEMMODEL_RELEASE since the acquire would be coverd\n+     this could be MEMMODEL_RELEASE since the acquire would be covered\n      by the lock.  */\n \n   __atomic_thread_fence (MEMMODEL_ACQ_REL);\n@@ -246,7 +246,7 @@ GOMP_ordered_start (void)\n \n    However, the current implementation has a flaw in that it does not allow\n    the next thread into the ORDERED section immediately after the current\n-   thread exits the ORDERED section in its last iteration.  The existance\n+   thread exits the ORDERED section in its last iteration.  The existence\n    of this function allows the implementation to change.  */\n \n void"}, {"sha": "04fe472a70dc25f503824b2c6faf3c1dc68f5582", "filename": "libgomp/plugin/plugin-gcn.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2Fplugin%2Fplugin-gcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2Fplugin%2Fplugin-gcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-gcn.c?ref=93d90219879aed52fb5a3ec191df59867e66240d", "patch": "@@ -107,7 +107,7 @@ secure_getenv (const char *name)\n /* }}}  */\n /* {{{ Types  */\n \n-/* GCN-specific implmentation of the GOMP_PLUGIN_acc_thread data.  */\n+/* GCN-specific implementation of the GOMP_PLUGIN_acc_thread data.  */\n \n struct gcn_thread\n {\n@@ -408,7 +408,7 @@ struct agent_info\n   /* Whether the agent has been initialized.  The fields below are usable only\n      if it has been.  */\n   bool initialized;\n-  /* Precomuted check for problem architectures.  */\n+  /* Precomputed check for problem architectures.  */\n   bool gfx900_p;\n \n   /* Command queues of the agent.  */\n@@ -3858,7 +3858,7 @@ GOMP_OFFLOAD_openacc_async_construct (int device)\n   return aq;\n }\n \n-/* Destroy an exisiting asynchronous thread and queue.  Waits for any\n+/* Destroy an existing asynchronous thread and queue.  Waits for any\n    currently-running task to complete, but cancels any queued tasks.  */\n \n bool"}, {"sha": "1ecb5d918c61871bdc85fc333cfb517e0d14c982", "filename": "libgomp/task.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2Ftask.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2Ftask.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftask.c?ref=93d90219879aed52fb5a3ec191df59867e66240d", "patch": "@@ -23,7 +23,7 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-/* This file handles the maintainence of tasks in response to task\n+/* This file handles the maintenance of tasks in response to task\n    creation and termination.  */\n \n #include \"libgomp.h\"\n@@ -1157,7 +1157,7 @@ gomp_task_run_post_handle_dependers (struct gomp_task *child_task,\n \n       /* CHILD_TASK satisfies a dependency for TASK.  Keep track of\n \t TASK's remaining dependencies.  Once TASK has no other\n-\t depenencies, put it into the various queues so it will get\n+\t dependencies, put it into the various queues so it will get\n \t scheduled for execution.  */\n       if (--task->num_dependees != 0)\n \tcontinue;\n@@ -1674,7 +1674,7 @@ gomp_task_maybe_wait_for_dependencies (void **depend)\n \t      {\n \t\ttsk->parent_depends_on = true;\n \t\t++num_awaited;\n-\t\t/* If depenency TSK itself has no dependencies and is\n+\t\t/* If dependency TSK itself has no dependencies and is\n \t\t   ready to run, move it up front so that we run it as\n \t\t   soon as possible.  */\n \t\tif (tsk->num_dependees == 0 && tsk->kind == GOMP_TASK_WAITING)"}, {"sha": "c1633fafa48c26e256a9a7a3e325d83df3f901eb", "filename": "libgomp/team.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2Fteam.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2Fteam.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fteam.c?ref=93d90219879aed52fb5a3ec191df59867e66240d", "patch": "@@ -23,7 +23,7 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-/* This file handles the maintainence of threads in response to team\n+/* This file handles the maintenance of threads in response to team\n    creation and termination.  */\n \n #include \"libgomp.h\""}, {"sha": "5e9a2d836aa381dc5ae6c4526777b038ddcf4538", "filename": "libgomp/testsuite/libgomp.fortran/jacobi.f", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fjacobi.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fjacobi.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fjacobi.f?ref=93d90219879aed52fb5a3ec191df59867e66240d", "patch": "@@ -11,7 +11,7 @@ program main\n * Author:   Joseph Robicheaux, Kuck and Associates, Inc. (KAI), 1998\n * \n * Directives are used in this code to achieve paralleism. \n-* All do loops are parallized with default 'static' scheduling.\n+* All do loops are parallelized with default 'static' scheduling.\n * \n * Input :  n - grid dimension in x direction \n *          m - grid dimension in y direction\n@@ -70,7 +70,7 @@ program main\n       subroutine driver ( ) \n *************************************************************\n * Subroutine driver () \n-* This is where the arrays are allocated and initialzed. \n+* This is where the arrays are allocated and initialized.\n *\n * Working varaibles/arrays \n *     dx  - grid spacing in x direction \n@@ -119,7 +119,7 @@ subroutine initialize (n,m,alpha,dx,dy,u,f)\n       dx = 2.0 / (n-1)\n       dy = 2.0 / (m-1)\n \n-* Initilize initial condition and RHS\n+* Initialize initial condition and RHS\n \n !$omp parallel do private(xx,yy)\n       do j = 1,m"}, {"sha": "2756d14ca8287d1c29c6eec6f28d118de7ab4888", "filename": "libgomp/testsuite/libgomp.hsa.c/tiling-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Ftiling-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Ftiling-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Ftiling-2.c?ref=93d90219879aed52fb5a3ec191df59867e66240d", "patch": "@@ -167,7 +167,7 @@ void tiled_sgemm_tt(const int M, const int N, const int K, const float alpha, co\n \n // -------------------------------------------------------------------\n //      The rest of this code forms the HSAIL kernel with the\n-//      pairs of \"paralell for collapse(2)\" loops repalced with a barrier.\n+//      pairs of \"parallel for collapse(2)\" loops replaced with a barrier.\n //      The kernel initializes these values\n //      C_row_start = get_group_id(0) * BLOCK_SIZE\n //      C_col_start = get_group_id(1) * BLOCK_SIZE"}, {"sha": "f86af75beaa05aa7dd95f9566255ff6e6f274411", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/enter_exit-lib.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fenter_exit-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d90219879aed52fb5a3ec191df59867e66240d/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fenter_exit-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fenter_exit-lib.c?ref=93d90219879aed52fb5a3ec191df59867e66240d", "patch": "@@ -1,4 +1,4 @@\n-/* Verify enter/exit data interoperablilty between pragmas and\n+/* Verify enter/exit data interoperability between pragmas and\n    acc library calls.  */\n \n /* { dg-do run } */"}]}