{"sha": "1d4479957bdda8182a8a442afa53fef543984c56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ0NDc5OTU3YmRkYTgxODJhOGE0NDJhZmE1M2ZlZjU0Mzk4NGM1Ng==", "commit": {"author": {"name": "Richard Sandiford", "email": "r.sandiford@uk.ibm.com", "date": "2009-07-18T07:52:53Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2009-07-18T07:52:53Z"}, "message": "md.texi: Document the new PowerPC \"es\" constraint.\n\ngcc/\n\t* doc/md.texi: Document the new PowerPC \"es\" constraint.\n\tDocument that \"m\" can include automodified addresses on this target,\n\tand explain how %U must be used.  Extend the \"Q\" and \"Z\" documentation\n\tto suggest \"es\" as well as \"m\".\n\t* config/rs6000/constraints.md (es): New memory constraint.\n\t(Q, Z): Update strings to match new documentation.\n\ngcc/testsuite/\n\t* gcc.target/powerpc/asm-es-1.c: New test.\n\t* gcc.target/powerpc/asm-es-2.c: Likewise.\n\nFrom-SVN: r149766", "tree": {"sha": "6549d97285ea079c388418550c41de587a9f4cd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6549d97285ea079c388418550c41de587a9f4cd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d4479957bdda8182a8a442afa53fef543984c56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d4479957bdda8182a8a442afa53fef543984c56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d4479957bdda8182a8a442afa53fef543984c56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d4479957bdda8182a8a442afa53fef543984c56/comments", "author": null, "committer": null, "parents": [{"sha": "406d1650fb890e9e3f6972280e971bdef38bc302", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/406d1650fb890e9e3f6972280e971bdef38bc302", "html_url": "https://github.com/Rust-GCC/gccrs/commit/406d1650fb890e9e3f6972280e971bdef38bc302"}], "stats": {"total": 132, "additions": 126, "deletions": 6}, "files": [{"sha": "43b5cc6fb109caef13683c6971042554c2ff76c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d4479957bdda8182a8a442afa53fef543984c56/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d4479957bdda8182a8a442afa53fef543984c56/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d4479957bdda8182a8a442afa53fef543984c56", "patch": "@@ -1,3 +1,12 @@\n+2009-07-18  Richard Sandiford  <r.sandiford@uk.ibm.com>\n+\n+\t* doc/md.texi: Document the new PowerPC \"es\" constraint.\n+\tDocument that \"m\" can include automodified addresses on this target,\n+\tand explain how %U must be used.  Extend the \"Q\" and \"Z\" documentation\n+\tto suggest \"es\" as well as \"m\".\n+\t* config/rs6000/constraints.md (es): New memory constraint.\n+\t(Q, Z): Update strings to match new documentation.\n+\n 2009-07-18  Richard Sandiford  <r.sandiford@uk.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_mode_dependent_address): Allow any"}, {"sha": "a937d99397de294e5f8786541b3b71ba6249a137", "filename": "gcc/config/rs6000/constraints.md", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d4479957bdda8182a8a442afa53fef543984c56/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d4479957bdda8182a8a442afa53fef543984c56/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fconstraints.md?ref=1d4479957bdda8182a8a442afa53fef543984c56", "patch": "@@ -113,8 +113,17 @@\n \n ;; Memory constraints\n \n+(define_memory_constraint \"es\"\n+  \"A ``stable'' memory operand; that is, one which does not include any\n+automodification of the base register.  Unlike @samp{m}, this constraint\n+can be used in @code{asm} statements that might access the operand\n+several times, or that might not access it at all.\"\n+  (and (match_code \"mem\")\n+       (match_test \"GET_RTX_CLASS (GET_CODE (XEXP (op, 0))) != RTX_AUTOINC\")))\n+\n (define_memory_constraint \"Q\"\n-  \"Memory operand that is just an offset from a reg\"\n+  \"Memory operand that is an offset from a register (it is usually better\n+to use @samp{m} or @samp{es} in @code{asm} statements)\"\n   (and (match_code \"mem\")\n        (match_test \"GET_CODE (XEXP (op, 0)) == REG\")))\n \n@@ -123,7 +132,8 @@\n   (match_operand 0 \"word_offset_memref_operand\"))\n \n (define_memory_constraint \"Z\"\n-  \"Indexed or indirect memory operand\"\n+  \"Memory operand that is an indexed or indirect from a register (it is\n+usually better to use @samp{m} or @samp{es} in @code{asm} statements)\"\n   (match_operand 0 \"indexed_or_indirect_operand\"))\n \n ;; Address constraints"}, {"sha": "d9dca7a87ce784273dbeff1066bd45b1b1351e48", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d4479957bdda8182a8a442afa53fef543984c56/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d4479957bdda8182a8a442afa53fef543984c56/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=1d4479957bdda8182a8a442afa53fef543984c56", "patch": "@@ -1972,13 +1972,40 @@ instruction per word\n Integer/Floating point constant that can be loaded into a register using\n three instructions\n \n+@item m\n+Memory operand.  Note that on PowerPC targets, @code{m} can include\n+addresses that update the base register.  It is therefore only safe\n+to use @samp{m} in an @code{asm} statement if that @code{asm} statement\n+accesses the operand exactly once.  The @code{asm} statement must also\n+use @samp{%U@var{<opno>}} as a placeholder for the ``update'' flag in the\n+corresponding load or store instruction.  For example:\n+\n+@smallexample\n+asm (\"st%U0 %1,%0\" : \"=m\" (mem) : \"r\" (val));\n+@end smallexample\n+\n+is correct but:\n+\n+@smallexample\n+asm (\"st %1,%0\" : \"=m\" (mem) : \"r\" (val));\n+@end smallexample\n+\n+is not.  Use @code{es} rather than @code{m} if you don't want the\n+base register to be updated.\n+\n+@item es\n+A ``stable'' memory operand; that is, one which does not include any\n+automodification of the base register.  Unlike @samp{m}, this constraint\n+can be used in @code{asm} statements that might access the operand\n+several times, or that might not access it at all.\n+\n @item Q\n-Memory operand that is an offset from a register (@samp{m} is preferable\n-for @code{asm} statements)\n+Memory operand that is an offset from a register (it is usually better\n+to use @samp{m} or @samp{es} in @code{asm} statements)\n \n @item Z\n-Memory operand that is an indexed or indirect from a register (@samp{m} is\n-preferable for @code{asm} statements)\n+Memory operand that is an indexed or indirect from a register (it is\n+usually better to use @samp{m} or @samp{es} in @code{asm} statements)\n \n @item R\n AIX TOC entry"}, {"sha": "5f08b2d963c44a8398118282eceee7c253c86131", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d4479957bdda8182a8a442afa53fef543984c56/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d4479957bdda8182a8a442afa53fef543984c56/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1d4479957bdda8182a8a442afa53fef543984c56", "patch": "@@ -1,3 +1,8 @@\n+2009-07-18  Richard Sandiford  <r.sandiford@uk.ibm.com>\n+\n+\t* gcc.target/powerpc/asm-es-1.c: New test.\n+\t* gcc.target/powerpc/asm-es-2.c: Likewise.\n+\n 2009-07-17  Richard Guenther  <rguenther@suse.de>\n \n \tPR c/40401"}, {"sha": "fe3e899d5a22c952c8827a7814241bf809502bbe", "filename": "gcc/testsuite/gcc.target/powerpc/asm-es-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d4479957bdda8182a8a442afa53fef543984c56/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fasm-es-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d4479957bdda8182a8a442afa53fef543984c56/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fasm-es-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fasm-es-1.c?ref=1d4479957bdda8182a8a442afa53fef543984c56", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+static inline void __attribute__((always_inline))\n+f1 (void)\n+{\n+  long unused;\n+  asm volatile (\"\" : \"=es\" (unused) :: \"memory\");\n+}\n+\n+static void __attribute__((noinline))\n+f2 (long *val)\n+{\n+  *val = 0x1234;\n+}\n+\n+static long __attribute__((noinline))\n+test (void)\n+{\n+  f1 ();\n+  {\n+    long val;\n+    f2 (&val);\n+    return val;\n+  }\n+}\n+\n+int\n+main (void)\n+{\n+  return test () != 0x1234;\n+}"}, {"sha": "e9319654cc717a890df7743dd22ee4056f03a089", "filename": "gcc/testsuite/gcc.target/powerpc/asm-es-2.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d4479957bdda8182a8a442afa53fef543984c56/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fasm-es-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d4479957bdda8182a8a442afa53fef543984c56/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fasm-es-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fasm-es-2.c?ref=1d4479957bdda8182a8a442afa53fef543984c56", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-options \"-O2\" } */\n+void\n+f1 (int *p, int x)\n+{\n+  asm (\"asm1 %0\" : \"=es\" (p[x]));\n+}\n+\n+void\n+f2 (int *p)\n+{\n+  while (1)\n+    {\n+      p += 4;\n+      asm (\"asm2%U0 %0\" : \"=m\" (*p));\n+    }\n+}\n+\n+void\n+f3 (int *p)\n+{\n+  while (1)\n+    {\n+      p += 4;\n+      asm (\"asm3%U0 %0\" : \"=es\" (*p));\n+    }\n+}\n+\n+void\n+f4 (int *p)\n+{\n+  asm (\"asm4 %0\" : \"=es\" (p[100]));\n+}\n+\n+/* { dg-final { scan-assembler \"asm1 3,4\" } } */\n+/* { dg-final { scan-assembler \"asm2u 16\\\\(3\\\\)\" } } */\n+/* { dg-final { scan-assembler \"asm3 0\\\\(3\\\\)\" } } */\n+/* { dg-final { scan-assembler \"asm4 400\\\\(3\\\\)\" } } */"}]}