{"sha": "b8c41c8ed2c55f001b14b0a432f4daa73155d278", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhjNDFjOGVkMmM1NWYwMDFiMTRiMGE0MzJmNGRhYTczMTU1ZDI3OA==", "commit": {"author": {"name": "Chris Fairles", "email": "chris.fairles@gmail.com", "date": "2008-08-28T10:22:19Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-08-28T10:22:19Z"}, "message": "acinclude.m4 ([GLIBCXX_CHECK_GTHREADS]): New.\n\n2008-08-28  Chris Fairles  <chris.fairles@gmail.com>\n\n        * acinclude.m4 ([GLIBCXX_CHECK_GTHREADS]): New. Checks for gthread\n\tsupport used by c++0x thread library.\n\t* configure.ac: Test unconditionally.\n\t* configure: Regenerate.\n\t* config.h.in: Regenerate.\n\nFrom-SVN: r139705", "tree": {"sha": "955c8a45336836c8b6d688d28613f005ae3c43ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/955c8a45336836c8b6d688d28613f005ae3c43ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8c41c8ed2c55f001b14b0a432f4daa73155d278", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8c41c8ed2c55f001b14b0a432f4daa73155d278", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8c41c8ed2c55f001b14b0a432f4daa73155d278", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8c41c8ed2c55f001b14b0a432f4daa73155d278/comments", "author": {"login": "chrisfearless", "id": 812000, "node_id": "MDQ6VXNlcjgxMjAwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/812000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisfearless", "html_url": "https://github.com/chrisfearless", "followers_url": "https://api.github.com/users/chrisfearless/followers", "following_url": "https://api.github.com/users/chrisfearless/following{/other_user}", "gists_url": "https://api.github.com/users/chrisfearless/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisfearless/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisfearless/subscriptions", "organizations_url": "https://api.github.com/users/chrisfearless/orgs", "repos_url": "https://api.github.com/users/chrisfearless/repos", "events_url": "https://api.github.com/users/chrisfearless/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisfearless/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a75150aea65b32e4d376a3e13b88d2db7bc04ab0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a75150aea65b32e4d376a3e13b88d2db7bc04ab0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a75150aea65b32e4d376a3e13b88d2db7bc04ab0"}], "stats": {"total": 154, "additions": 150, "deletions": 4}, "files": [{"sha": "c9ca0a8f524849c04871ff3c70337c5aebe2e925", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c41c8ed2c55f001b14b0a432f4daa73155d278/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c41c8ed2c55f001b14b0a432f4daa73155d278/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b8c41c8ed2c55f001b14b0a432f4daa73155d278", "patch": "@@ -1,3 +1,11 @@\n+2008-08-28  Chris Fairles  <chris.fairles@gmail.com>\n+\n+        * acinclude.m4 ([GLIBCXX_CHECK_GTHREADS]): New. Checks for gthread\n+\tsupport used by c++0x thread library.\n+\t* configure.ac: Test unconditionally.\n+\t* configure: Regenerate.\n+\t* config.h.in: Regenerate.\n+\n 2008-08-27  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* doc/Makefile.am: Edit xml file list."}, {"sha": "052515b21568f03d03b6616343c78f45c72999ea", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c41c8ed2c55f001b14b0a432f4daa73155d278/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c41c8ed2c55f001b14b0a432f4daa73155d278/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=b8c41c8ed2c55f001b14b0a432f4daa73155d278", "patch": "@@ -2816,6 +2816,45 @@ AC_DEFUN([GLIBCXX_ENABLE_THREADS], [\n ])\n \n \n+dnl\n+dnl Check if gthread implementation defines the types and functions\n+dnl required by the c++0x thread library.  Conforming gthread\n+dnl implementations can define __GTHREADS_CXX0X to enable use with c++0x.\n+dnl\n+AC_DEFUN([GLIBCXX_CHECK_GTHREADS], [\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -fno-exceptions -I${toplevel_srcdir}/gcc\"\n+\n+  target_thread_file=`$CXX -v 2>&1 | sed -n 's/^Thread model: //p'`\n+  case $target_thread_file in\n+    posix)\n+      CXXFLAGS=\"$CXXFLAGS -DSUPPORTS_WEAK -DGTHREAD_USE_WEAK -D_PTHREADS\"\n+  esac\n+\n+  AC_MSG_CHECKING([for gthreads library])\n+\n+  AC_TRY_COMPILE([#include \"gthr.h\"],\n+    [\n+     \t#ifndef __GTHREADS_CXX0X\n+\t#error\n+\t#endif\n+    ], [ac_has_gthreads=yes], [ac_has_gthreads=no])\n+\n+  AC_MSG_RESULT([$ac_has_gthreads])\n+\n+  if test x\"$ac_has_gthreads\" = x\"yes\"; then\n+    AC_DEFINE(_GLIBCXX_HAS_GTHREADS, 1,\n+              [Define if gthreads library is available.])\n+  fi\n+\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+])\n+\n+\n # Check whether LC_MESSAGES is available in <locale.h>.\n # Ulrich Drepper <drepper@cygnus.com>, 1995.\n #"}, {"sha": "91e6cb87e0e2a67cbb80b481385ac8dfaa6e7721", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c41c8ed2c55f001b14b0a432f4daa73155d278/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c41c8ed2c55f001b14b0a432f4daa73155d278/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=b8c41c8ed2c55f001b14b0a432f4daa73155d278", "patch": "@@ -698,6 +698,9 @@\n /* Define if a fully dynamic basic_string is wanted. */\n #undef _GLIBCXX_FULLY_DYNAMIC_STRING\n \n+/* Define if gthreads library is available. */\n+#undef _GLIBCXX_HAS_GTHREADS\n+\n /* Define to 1 if a full hosted library is built, or 0 if freestanding. */\n #undef _GLIBCXX_HOSTED\n "}, {"sha": "4287de594d8ee2dfe73681454b63f587b57e9cf2", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 95, "deletions": 2, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c41c8ed2c55f001b14b0a432f4daa73155d278/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c41c8ed2c55f001b14b0a432f4daa73155d278/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=b8c41c8ed2c55f001b14b0a432f4daa73155d278", "patch": "@@ -14157,7 +14157,7 @@ _ACEOF\n \n \n \n-# Checks for compiler support that don't require linking.\n+# Checks for compiler support that doesn't require linking.\n \n   # All these tests are for C++; save the language and the compiler flags.\n   # The CXXFLAGS thing is suspicious, but based on similar bits previously\n@@ -17363,7 +17363,7 @@ _ACEOF\n   fi\n \n \n-# Checks for operating systems support that don't require linking.\n+# Checks for operating systems support that doesn't require linking.\n \n \n echo \"$as_me:$LINENO: checking for EOWNERDEAD\" >&5\n@@ -21576,6 +21576,99 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n \n \n+# For gthread support\n+\n+\n+\n+  ac_ext=cc\n+ac_cpp='$CXXCPP $CPPFLAGS'\n+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n+\n+\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -fno-exceptions -I${toplevel_srcdir}/gcc\"\n+\n+  target_thread_file=`$CXX -v 2>&1 | sed -n 's/^Thread model: //p'`\n+  case $target_thread_file in\n+    posix)\n+      CXXFLAGS=\"$CXXFLAGS -DSUPPORTS_WEAK -DGTHREAD_USE_WEAK -D_PTHREADS\"\n+  esac\n+\n+  echo \"$as_me:$LINENO: checking for gthreads library\" >&5\n+echo $ECHO_N \"checking for gthreads library... $ECHO_C\" >&6\n+\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include \"gthr.h\"\n+int\n+main ()\n+{\n+\n+     \t#ifndef __GTHREADS_CXX0X\n+\t#error\n+\t#endif\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_cxx_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_has_gthreads=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_has_gthreads=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+  echo \"$as_me:$LINENO: result: $ac_has_gthreads\" >&5\n+echo \"${ECHO_T}$ac_has_gthreads\" >&6\n+\n+  if test x\"$ac_has_gthreads\" = x\"yes\"; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define _GLIBCXX_HAS_GTHREADS 1\n+_ACEOF\n+\n+  fi\n+\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n+\n+\n \n   if test \"${ac_cv_header_locale_h+set}\" = set; then\n   echo \"$as_me:$LINENO: checking for locale.h\" >&5"}, {"sha": "ff388ab50c40bc7781c601102624540ced7fb4df", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c41c8ed2c55f001b14b0a432f4daa73155d278/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c41c8ed2c55f001b14b0a432f4daa73155d278/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=b8c41c8ed2c55f001b14b0a432f4daa73155d278", "patch": "@@ -100,7 +100,7 @@ GLIBCXX_ENABLE_PCH($is_hosted)\n GLIBCXX_ENABLE_ATOMIC_BUILTINS\n GLIBCXX_ENABLE_THREADS\n \n-# Checks for compiler support that don't require linking.\n+# Checks for compiler support that doesn't require linking.\n GLIBCXX_CHECK_COMPILER_FEATURES\n GLIBCXX_CHECK_STANDARD_LAYOUT\n \n@@ -119,7 +119,7 @@ GLIBCXX_ENABLE_PARALLEL([yes])\n GLIBCXX_ENABLE_CXX_FLAGS\n GLIBCXX_ENABLE_FULLY_DYNAMIC_STRING([no])\n \n-# Checks for operating systems support that don't require linking.\n+# Checks for operating systems support that doesn't require linking.\n GLIBCXX_CHECK_SYSTEM_ERROR\n \n # For the streamoff typedef.\n@@ -150,6 +150,9 @@ GLIBCXX_CHECK_GETTIMEOFDAY\n # NB: The default is [no], because otherwise it requires linking.\n GLIBCXX_ENABLE_CLOCK_GETTIME([no])\n \n+# For gthread support\n+GLIBCXX_CHECK_GTHREADS\n+\n AC_LC_MESSAGES\n \n # Check for available headers."}]}