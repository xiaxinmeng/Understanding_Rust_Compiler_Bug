{"sha": "3c5e83d5b32c31b11cf1684bf5d1ab3e7174685c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M1ZTgzZDViMzJjMzFiMTFjZjE2ODRiZjVkMWFiM2U3MTc0Njg1Yw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-07-20T18:34:46Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-07-20T18:37:10Z"}, "message": "i386: Use lock prefixed insn instead of MFENCE [PR95750]\n\nCurrently, __atomic_thread_fence(seq_cst) on x86 and x86-64 generates\nmfence instruction. A dummy atomic instruction (a lock-prefixed instruction\nor xchg with a memory operand) would provide the same sequential consistency\nguarantees while being more efficient on most current CPUs. The mfence\ninstruction additionally orders non-temporal stores, which is not relevant\nfor atomic operations and are not ordered by seq_cst atomic operations anyway.\n\n2020-07-20  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\tPR target/95750\n\t* config/i386/i386.h (TARGET_AVOID_MFENCE):\n\tRename from TARGET_USE_XCHG_FOR_ATOMIC_STORE.\n\t* config/i386/sync.md (mfence_sse2): Disable for TARGET_AVOID_MFENCE.\n\t(mfence_nosse): Enable also for TARGET_AVOID_MFENCE. Emit stack\n\treferred memory in word_mode.\n\t(mem_thread_fence): Do not generate mfence_sse2 pattern when\n\tTARGET_AVOID_MFENCE is true.\n\t(atomic_store<mode>): Update for rename.\n\t* config/i386/x86-tune.def (X86_TUNE_AVOID_MFENCE):\n\tRename from X86_TUNE_USE_XCHG_FOR_ATOMIC_STORE.\n\ngcc/testsuite/ChangeLog:\n\tPR target/95750\n\t* gcc.target/i386/pr95750.c: New test.", "tree": {"sha": "cc7e1025a52c224d67d2c5e9721fabe1a242d6af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc7e1025a52c224d67d2c5e9721fabe1a242d6af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c5e83d5b32c31b11cf1684bf5d1ab3e7174685c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5e83d5b32c31b11cf1684bf5d1ab3e7174685c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c5e83d5b32c31b11cf1684bf5d1ab3e7174685c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5e83d5b32c31b11cf1684bf5d1ab3e7174685c/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5803b9876b3d11c93d1a10fabb3fbb1c4a14bd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5803b9876b3d11c93d1a10fabb3fbb1c4a14bd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5803b9876b3d11c93d1a10fabb3fbb1c4a14bd6"}], "stats": {"total": 47, "additions": 36, "deletions": 11}, "files": [{"sha": "114967e49a37b7693a6b4e8709a63b8b36eaf1a6", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5e83d5b32c31b11cf1684bf5d1ab3e7174685c/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5e83d5b32c31b11cf1684bf5d1ab3e7174685c/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=3c5e83d5b32c31b11cf1684bf5d1ab3e7174685c", "patch": "@@ -598,8 +598,7 @@ extern unsigned char ix86_tune_features[X86_TUNE_LAST];\n \tix86_tune_features[X86_TUNE_AVOID_FALSE_DEP_FOR_BMI]\n #define TARGET_ONE_IF_CONV_INSN \\\n \tix86_tune_features[X86_TUNE_ONE_IF_CONV_INSN]\n-#define TARGET_USE_XCHG_FOR_ATOMIC_STORE \\\n-\tix86_tune_features[X86_TUNE_USE_XCHG_FOR_ATOMIC_STORE]\n+#define TARGET_AVOID_MFENCE ix86_tune_features[X86_TUNE_AVOID_MFENCE]\n #define TARGET_EMIT_VZEROUPPER \\\n \tix86_tune_features[X86_TUNE_EMIT_VZEROUPPER]\n #define TARGET_EXPAND_ABS \\"}, {"sha": "c6827037abf350e62580121734f9fddb98fd4327", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5e83d5b32c31b11cf1684bf5d1ab3e7174685c/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5e83d5b32c31b11cf1684bf5d1ab3e7174685c/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=3c5e83d5b32c31b11cf1684bf5d1ab3e7174685c", "patch": "@@ -89,7 +89,8 @@\n (define_insn \"mfence_sse2\"\n   [(set (match_operand:BLK 0)\n \t(unspec:BLK [(match_dup 0)] UNSPEC_MFENCE))]\n-  \"TARGET_64BIT || TARGET_SSE2\"\n+  \"(TARGET_64BIT || TARGET_SSE2)\n+   && !TARGET_AVOID_MFENCE\"\n   \"mfence\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"length_address\" \"0\")\n@@ -100,8 +101,14 @@\n   [(set (match_operand:BLK 0)\n \t(unspec:BLK [(match_dup 0)] UNSPEC_MFENCE))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"!(TARGET_64BIT || TARGET_SSE2)\"\n-  \"lock{%;} or{l}\\t{$0, (%%esp)|DWORD PTR [esp], 0}\"\n+  \"!(TARGET_64BIT || TARGET_SSE2)\n+   || TARGET_AVOID_MFENCE\"\n+{\n+  rtx mem = gen_rtx_MEM (word_mode, stack_pointer_rtx);\n+\n+  output_asm_insn (\"lock{%;} or%z0\\t{$0, %0|%0, 0}\", &mem);\n+  return \"\";\n+}\n   [(set_attr \"memory\" \"unknown\")])\n \n (define_expand \"mem_thread_fence\"\n@@ -117,7 +124,8 @@\n       rtx (*mfence_insn)(rtx);\n       rtx mem;\n \n-      if (TARGET_64BIT || TARGET_SSE2)\n+      if ((TARGET_64BIT || TARGET_SSE2)\n+\t  && !TARGET_AVOID_MFENCE)\n \tmfence_insn = gen_mfence_sse2;\n       else\n \tmfence_insn = gen_mfence_nosse;\n@@ -306,11 +314,10 @@\n     {\n       operands[1] = force_reg (<MODE>mode, operands[1]);\n \n-      /* For seq-cst stores, use XCHG when we lack MFENCE\n-      \t or when target prefers XCHG.  */\n+      /* For seq-cst stores, use XCHG when we lack MFENCE.  */\n       if (is_mm_seq_cst (model)\n \t  && (!(TARGET_64BIT || TARGET_SSE2)\n-\t      || TARGET_USE_XCHG_FOR_ATOMIC_STORE))\n+\t      || TARGET_AVOID_MFENCE))\n \t{\n \t  emit_insn (gen_atomic_exchange<mode> (gen_reg_rtx (<MODE>mode),\n \t\t\t\t\t\toperands[0], operands[1],"}, {"sha": "6eff825689704cb2120d5b5ab320a118012d6096", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5e83d5b32c31b11cf1684bf5d1ab3e7174685c/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5e83d5b32c31b11cf1684bf5d1ab3e7174685c/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=3c5e83d5b32c31b11cf1684bf5d1ab3e7174685c", "patch": "@@ -313,8 +313,8 @@ DEF_TUNE (X86_TUNE_ONE_IF_CONV_INSN, \"one_if_conv_insn\",\n \t  m_SILVERMONT | m_KNL | m_KNM | m_INTEL | m_CORE_ALL | m_GOLDMONT\n \t  | m_GOLDMONT_PLUS | m_TREMONT | m_GENERIC)\n \n-/* X86_TUNE_USE_XCHG_FOR_ATOMIC_STORE: Use xchg instead of mov+mfence.  */\n-DEF_TUNE (X86_TUNE_USE_XCHG_FOR_ATOMIC_STORE, \"use_xchg_for_atomic_store\",\n+/* X86_TUNE_AVOID_MFENCE: Use lock prefixed instructions instead of mfence.  */\n+DEF_TUNE (X86_TUNE_AVOID_MFENCE, \"avoid_mfence\",\n \t m_CORE_ALL | m_BDVER | m_ZNVER | m_GENERIC)\n \n /* X86_TUNE_EXPAND_ABS: This enables a new abs pattern by"}, {"sha": "c47108fb79611303fc27fbbbd3bb17fb7de8f867", "filename": "gcc/testsuite/gcc.target/i386/pr95750.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5e83d5b32c31b11cf1684bf5d1ab3e7174685c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95750.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5e83d5b32c31b11cf1684bf5d1ab3e7174685c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95750.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95750.c?ref=3c5e83d5b32c31b11cf1684bf5d1ab3e7174685c", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/95750 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=core2\" } */\n+\n+void\n+foo (void)\n+{\n+  __atomic_thread_fence (__ATOMIC_SEQ_CST);\n+}\n+\n+int x;\n+\n+void\n+bar (void)\n+{\n+  __atomic_store_n (&x, -1, __ATOMIC_SEQ_CST);\n+}\n+\n+/* { dg-final { scan-assembler-not \"mfence\" } } */"}]}