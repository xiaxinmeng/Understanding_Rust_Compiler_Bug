{"sha": "793dbadc8d9a2d95debc7fb49d544c177a316aa5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzkzZGJhZGM4ZDlhMmQ5NWRlYmM3ZmI0OWQ1NDRjMTc3YTMxNmFhNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-10-22T06:56:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-10-22T06:56:36Z"}, "message": "re PR target/63542 (My build log is full of \"non-delegitimized UNSPEC UNSPEC_GOT (0) found in variable location\")\n\n\tPR target/63542\n\t* config/i386/i386.c (ix86_pic_register_p): Also return\n\ttrue if x is a hard register with ORIGINAL_REGNO equal to\n\tpic_offset_table_rtx pseudo REGNO.\n\t(ix86_delegitimize_address): For ix86_use_pseudo_pic_reg ()\n\tafter reload, subtract GOT_SYMBOL_NAME symbol if possible.\n\n\t* gcc.target/i386/pr63542-1.c: New test.\n\t* gcc.target/i386/pr63542-2.c: New test.\n\nFrom-SVN: r216540", "tree": {"sha": "88096dac4da0cd7b62d51922493ff61dc68db7fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88096dac4da0cd7b62d51922493ff61dc68db7fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/793dbadc8d9a2d95debc7fb49d544c177a316aa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/793dbadc8d9a2d95debc7fb49d544c177a316aa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/793dbadc8d9a2d95debc7fb49d544c177a316aa5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/793dbadc8d9a2d95debc7fb49d544c177a316aa5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "19a9ba64e7895c9919b95cd446faa4922ebf284e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19a9ba64e7895c9919b95cd446faa4922ebf284e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19a9ba64e7895c9919b95cd446faa4922ebf284e"}], "stats": {"total": 100, "additions": 94, "deletions": 6}, "files": [{"sha": "2ef7289879a06bd3e38971b75021f017b792f859", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793dbadc8d9a2d95debc7fb49d544c177a316aa5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793dbadc8d9a2d95debc7fb49d544c177a316aa5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=793dbadc8d9a2d95debc7fb49d544c177a316aa5", "patch": "@@ -1,3 +1,12 @@\n+2014-10-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/63542\n+\t* config/i386/i386.c (ix86_pic_register_p): Also return\n+\ttrue if x is a hard register with ORIGINAL_REGNO equal to\n+\tpic_offset_table_rtx pseudo REGNO.\n+\t(ix86_delegitimize_address): For ix86_use_pseudo_pic_reg ()\n+\tafter reload, subtract GOT_SYMBOL_NAME symbol if possible.\n+\n 2014-10-22  Alan Modra  <amodra@gmail.com>\n \n \t* gengtype.h (obstack_chunk_alloc, obstack_chunk_free): Remove cast."}, {"sha": "a6ff41de813b90cf257963b4e277f400ae0616db", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793dbadc8d9a2d95debc7fb49d544c177a316aa5/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793dbadc8d9a2d95debc7fb49d544c177a316aa5/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=793dbadc8d9a2d95debc7fb49d544c177a316aa5", "patch": "@@ -14281,10 +14281,20 @@ ix86_pic_register_p (rtx x)\n   if (GET_CODE (x) == VALUE && CSELIB_VAL_PTR (x))\n     return (pic_offset_table_rtx\n \t    && rtx_equal_for_cselib_p (x, pic_offset_table_rtx));\n+  else if (!REG_P (x))\n+    return false;\n   else if (pic_offset_table_rtx)\n-    return REG_P (x) && REGNO (x) == REGNO (pic_offset_table_rtx);\n+    {\n+      if (REGNO (x) == REGNO (pic_offset_table_rtx))\n+\treturn true;\n+      if (HARD_REGISTER_P (x)\n+\t  && !HARD_REGISTER_P (pic_offset_table_rtx)\n+\t  && ORIGINAL_REGNO (x) == REGNO (pic_offset_table_rtx))\n+\treturn true;\n+      return false;\n+    }\n   else\n-    return REG_P (x) && REGNO (x) == PIC_OFFSET_TABLE_REGNUM;\n+    return REGNO (x) == PIC_OFFSET_TABLE_REGNUM;\n }\n \n /* Helper function for ix86_delegitimize_address.\n@@ -14457,15 +14467,20 @@ ix86_delegitimize_address (rtx x)\n \t leal (%ebx, %ecx, 4), %ecx\n \t ...\n \t movl foo@GOTOFF(%ecx), %edx\n-\t in which case we return (%ecx - %ebx) + foo.\n-\n-\t Note that when pseudo_pic_reg is used we can generate it only\n-\t before reload_completed.  */\n+\t in which case we return (%ecx - %ebx) + foo\n+\t or (%ecx - _GLOBAL_OFFSET_TABLE_) + foo if pseudo_pic_reg\n+\t and reload has completed.  */\n       if (pic_offset_table_rtx\n \t  && (!reload_completed || !ix86_use_pseudo_pic_reg ()))\n         result = gen_rtx_PLUS (Pmode, gen_rtx_MINUS (Pmode, copy_rtx (addend),\n \t\t\t\t\t\t     pic_offset_table_rtx),\n \t\t\t       result);\n+      else if (pic_offset_table_rtx && !TARGET_MACHO && !TARGET_VXWORKS_RTP)\n+\t{\n+\t  rtx tmp = gen_rtx_SYMBOL_REF (Pmode, GOT_SYMBOL_NAME);\n+\t  tmp = gen_rtx_MINUS (Pmode, copy_rtx (addend), tmp);\n+\t  result = gen_rtx_PLUS (Pmode, tmp, result);\n+\t}\n       else\n \treturn orig_x;\n     }"}, {"sha": "b0c392bb089f4836cf862a4476c359c6b51eac90", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793dbadc8d9a2d95debc7fb49d544c177a316aa5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793dbadc8d9a2d95debc7fb49d544c177a316aa5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=793dbadc8d9a2d95debc7fb49d544c177a316aa5", "patch": "@@ -1,3 +1,9 @@\n+2014-10-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/63542\n+\t* gcc.target/i386/pr63542-1.c: New test.\n+\t* gcc.target/i386/pr63542-2.c: New test.\n+\n 2014-10-21  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \t* gcc.target/avr/tiny-memx.c: New test."}, {"sha": "98a4007306314fc7e632e69ff4e175c0569b7c9d", "filename": "gcc/testsuite/gcc.target/i386/pr63542-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793dbadc8d9a2d95debc7fb49d544c177a316aa5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr63542-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793dbadc8d9a2d95debc7fb49d544c177a316aa5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr63542-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr63542-1.c?ref=793dbadc8d9a2d95debc7fb49d544c177a316aa5", "patch": "@@ -0,0 +1,21 @@\n+/* PR target/63542 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g -dA\" } */\n+/* { dg-additional-options \"-fpic\" { target fpic } } */\n+\n+float\n+foo (long long u)\n+{\n+  if (!(-(1LL << 53) < u && u < (1LL << 53)))\n+    {\n+      if ((unsigned long long) u & ((1ULL << 11) - 1))\n+\t{\n+\t  u &= ~((1ULL << 11) - 1);\n+\t  u |= (1ULL << 11);\n+\t}\n+    }\n+  double f = (int) (u >> (32));\n+  f *= 0x1p32f;\n+  f += (unsigned int) u;\n+  return (float) f;\n+}"}, {"sha": "e9e9d8443640858ff126a469592fbcdabfca963f", "filename": "gcc/testsuite/gcc.target/i386/pr63542-2.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793dbadc8d9a2d95debc7fb49d544c177a316aa5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr63542-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793dbadc8d9a2d95debc7fb49d544c177a316aa5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr63542-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr63542-2.c?ref=793dbadc8d9a2d95debc7fb49d544c177a316aa5", "patch": "@@ -0,0 +1,37 @@\n+/* PR target/63542 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g -dA\" } */\n+/* { dg-additional-options \"-fpic\" { target fpic } } */\n+\n+struct B { unsigned long c; unsigned char *d; };\n+extern struct A { struct B *e[0x400]; } *f[128];\n+extern void (*bar) (char *p, char *q);\n+\n+char *\n+foo (char *p, char *q)\n+{\n+  struct B *g;\n+  char *b, *l;\n+  unsigned long s;\n+\n+  g = f[((unsigned long) p) >> 22]->e[(((unsigned long) p) >> 12) & 0x3ff];\n+  s = g->c << 2;\n+  int r = ((unsigned long) p) & 0xfff;\n+  int m = g->d[r];\n+  if (m > 0xfd)\n+    {\n+      m = (r >> 2) % (s >> 2);\n+      if ((((unsigned long) p) & ~(unsigned long) 0xfff) != (((unsigned long) q) & ~(unsigned long) 0xfff))\n+\tgoto fail;\n+    }\n+  b = (char *) ((unsigned long) p & ~(unsigned long) 3);\n+  b -= m << 2;\n+  l = b + s;\n+\n+  if ( q >= l || q < b)\n+    goto fail;\n+  return p;\n+fail:\n+  (*bar) (p, q);\n+  return p;\n+}"}]}