{"sha": "60c703ed1ea6245c2e5297fb132ecf810677d4eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBjNzAzZWQxZWE2MjQ1YzJlNTI5N2ZiMTMyZWNmODEwNjc3ZDRlYg==", "commit": {"author": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2018-12-06T22:03:25Z"}, "committer": {"name": "Paul Clarke", "email": "pc@gcc.gnu.org", "date": "2018-12-06T22:03:25Z"}, "message": "[rs6000] x86-compat vector intrinsics fixes for BE, 32bit\n\nFix general endian and 32-bit mode issues found in the\ncompatibility implementations of the x86 vector intrinsics when running the\nassociated test suite tests.  (The tests had been inadvertently made to PASS\nwithout actually running the test code.  A later patch fixes this issue.)\n\n2018-12-03  Paul A. Clarke  <pc@us.ibm.com>\n\n\tPR target/88316\n\t* config/rs6000/mmintrin.h (_mm_unpackhi_pi8): Fix for big-endian.\n\t(_mm_unpacklo_pi8): Likewise.\n\t(_mm_mulhi_pi16): Likewise.\n\t(_mm_packs_pi16): Fix for big-endian. Use preferred API.\n\t(_mm_packs_pi32): Likewise.\n\t(_mm_packs_pu16): Likewise.\n\t* config/rs6000/xmmintrin.h (_mm_cvtss_si32): Fix for big-endian.\n\t(_mm_cvtss_si64): Likewise.\n\t(_mm_cvtpi32x2_ps): Likewise.\n\t(_mm_shuffle_ps): Likewise.\n\t(_mm_movemask_pi8): Likewise.\n\t(_mm_mulhi_pu16): Likewise.\n\t(_mm_sad_pu8): Likewise.\n\t(_mm_sad_pu8): Likewise.\n\t(_mm_cvtpu16_ps): Fix for big-endian. Use preferred API.\n\t(_mm_cvtpu8_ps): Likewise.\n\t(_mm_movemask_ps): Better #else case for big-endian (no functional\n\tchange).\n\t(_mm_shuffle_pi16): Likewise.\n\t* config/rs6000/emmintrin.h (_mm_movemask_pd): Fix for big-endian.\n\tBetter #else case for big-endian (no functional change).\n\t(_mm_movemask_epi8): Likewise.\n\t(_mm_shufflehi_epi16): Likewise.\n\t(_mm_shufflelo_epi16): Likewise.\n\t(_mm_shuffle_epi32): Likewise.\n\t(_mm_mul_epu32): Fix for big-endian.\n\t(_mm_bsrli_si128): Likewise.\n\t(_mm_cvtps_pd): Better #else case for big endian.\n\t(_mm_mulhi_epi16): Likewise.\n\t(_mm_mul_epu32): Likewise.\n\t(_mm_slli_si128): Likewise.\n\t(_mm_sll_epi16): Likewise.\n\t(_mm_sll_epi32): Likewise.\n\t(_mm_sra_epi16): Likewise.\n\t(_mm_sra_epi32): Likewise.\n\t(_mm_srl_epi16): Likewise.\n\t(_mm_srl_epi32): Likewise.\n\t(_mm_mulhi_epu16): Likewise.\n\t(_mm_sad_epu8): Likewise.\n\t* config/rs6000/pmmintrin.h (_mm_hadd_ps): Fix for big-endian.\n\t(_mm_sub_ps): Likewise.\n\t* config/rs6000/mmintrin.h (_mm_cmpeq_pi8): Fix for 32-bit mode.\n\t* gcc/config/rs6000/tmmintrin.h (_mm_alignr_epi8): Use ENDIAN\n\tmacros consistently (no functional changes).\n\t(_mm_alignr_pi8): Likewise.\n\nFrom-SVN: r266868", "tree": {"sha": "8a440b22eca99d17bec83c982dd9304b1860f0dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a440b22eca99d17bec83c982dd9304b1860f0dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60c703ed1ea6245c2e5297fb132ecf810677d4eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60c703ed1ea6245c2e5297fb132ecf810677d4eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60c703ed1ea6245c2e5297fb132ecf810677d4eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60c703ed1ea6245c2e5297fb132ecf810677d4eb/comments", "author": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5c8b3702e36a8792fa297f6b2b2cc865e08bb1b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c8b3702e36a8792fa297f6b2b2cc865e08bb1b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c8b3702e36a8792fa297f6b2b2cc865e08bb1b7"}], "stats": {"total": 330, "additions": 191, "deletions": 139}, "files": [{"sha": "653ded92bc3dad72951dfe3ef8f668c41b3de6c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c703ed1ea6245c2e5297fb132ecf810677d4eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c703ed1ea6245c2e5297fb132ecf810677d4eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=60c703ed1ea6245c2e5297fb132ecf810677d4eb", "patch": "@@ -1,3 +1,52 @@\n+2018-12-06  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\tPR target/88316\n+\t* config/rs6000/mmintrin.h (_mm_unpackhi_pi8): Fix for big-endian.\n+\t(_mm_unpacklo_pi8): Likewise.\n+\t(_mm_mulhi_pi16): Likewise.\n+\t(_mm_packs_pi16): Fix for big-endian. Use preferred API.\n+\t(_mm_packs_pi32): Likewise.\n+\t(_mm_packs_pu16): Likewise.\n+\t* config/rs6000/xmmintrin.h (_mm_cvtss_si32): Fix for big-endian.\n+\t(_mm_cvtss_si64): Likewise.\n+\t(_mm_cvtpi32x2_ps): Likewise.\n+\t(_mm_shuffle_ps): Likewise.\n+\t(_mm_movemask_pi8): Likewise.\n+\t(_mm_mulhi_pu16): Likewise.\n+\t(_mm_sad_pu8): Likewise.\n+\t(_mm_sad_pu8): Likewise.\n+\t(_mm_cvtpu16_ps): Fix for big-endian. Use preferred API.\n+\t(_mm_cvtpu8_ps): Likewise.\n+\t(_mm_movemask_ps): Better #else case for big-endian (no functional\n+\tchange).\n+\t(_mm_shuffle_pi16): Likewise.\n+\t* config/rs6000/emmintrin.h (_mm_movemask_pd): Fix for big-endian.\n+\tBetter #else case for big-endian (no functional change).\n+\t(_mm_movemask_epi8): Likewise.\n+\t(_mm_shufflehi_epi16): Likewise.\n+\t(_mm_shufflelo_epi16): Likewise.\n+\t(_mm_shuffle_epi32): Likewise.\n+\t(_mm_mul_epu32): Fix for big-endian.\n+\t(_mm_bsrli_si128): Likewise.\n+\t(_mm_cvtps_pd): Better #else case for big endian.\n+\t(_mm_mulhi_epi16): Likewise.\n+\t(_mm_mul_epu32): Likewise.\n+\t(_mm_slli_si128): Likewise.\n+\t(_mm_sll_epi16): Likewise.\n+\t(_mm_sll_epi32): Likewise.\n+\t(_mm_sra_epi16): Likewise.\n+\t(_mm_sra_epi32): Likewise.\n+\t(_mm_srl_epi16): Likewise.\n+\t(_mm_srl_epi32): Likewise.\n+\t(_mm_mulhi_epu16): Likewise.\n+\t(_mm_sad_epu8): Likewise.\n+\t* config/rs6000/pmmintrin.h (_mm_hadd_ps): Fix for big-endian.\n+\t(_mm_sub_ps): Likewise.\n+\t* config/rs6000/mmintrin.h (_mm_cmpeq_pi8): Fix for 32-bit mode.\n+\t* gcc/config/rs6000/tmmintrin.h (_mm_alignr_epi8): Use ENDIAN\n+\tmacros consistently (no functional changes).\n+\t(_mm_alignr_pi8): Likewise.\n+\n 2018-12-06  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR c++/87380"}, {"sha": "41ceca8b6b96a68e32e6d84a7b194b7489bb0279", "filename": "gcc/config/rs6000/emmintrin.h", "status": "modified", "additions": 37, "deletions": 65, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c703ed1ea6245c2e5297fb132ecf810677d4eb/gcc%2Fconfig%2Frs6000%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c703ed1ea6245c2e5297fb132ecf810677d4eb/gcc%2Fconfig%2Frs6000%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Femmintrin.h?ref=60c703ed1ea6245c2e5297fb132ecf810677d4eb", "patch": "@@ -1033,7 +1033,7 @@ _mm_cvtps_pd (__m128 __A)\n      lined up.  */\n   temp = __builtin_vsx_xxsldwi (a, a, 3);\n   temp = __builtin_vsx_xxsldwi (a, temp, 2);\n-#elif __BIG_ENDIAN__\n+#else\n   /* The input float values are in elements {[0], [1]} but the convert\n      instruction needs them in elements {[0], [2]}, So we use two\n      shift left double vector word immediates to get the elements\n@@ -1236,8 +1236,8 @@ _mm_movemask_pd (__m128d  __A)\n     {\n #ifdef __LITTLE_ENDIAN__\n \t0x80800040, 0x80808080, 0x80808080, 0x80808080\n-#elif __BIG_ENDIAN__\n-      0x80808080, 0x80808080, 0x80808080, 0x80800040\n+#else\n+      0x80808080, 0x80808080, 0x80808080, 0x80804000\n #endif\n     };\n \n@@ -1247,7 +1247,7 @@ _mm_movemask_pd (__m128d  __A)\n \n #ifdef __LITTLE_ENDIAN__\n   return result[1];\n-#elif __BIG_ENDIAN__\n+#else\n   return result[0];\n #endif\n }\n@@ -1434,7 +1434,7 @@ _mm_mulhi_epi16 (__m128i __A, __m128i __B)\n #ifdef __LITTLE_ENDIAN__\n       0x02, 0x03, 0x12, 0x13,  0x06, 0x07, 0x16, 0x17,\n       0x0A, 0x0B, 0x1A, 0x1B,  0x0E, 0x0F, 0x1E, 0x1F\n-#elif __BIG_ENDIAN__\n+#else\n       0x00, 0x01, 0x10, 0x11,  0x04, 0x05, 0x14, 0x15,\n       0x08, 0x09, 0x18, 0x19,  0x0C, 0x0D, 0x1C, 0x1D\n #endif\n@@ -1473,7 +1473,7 @@ _mm_mul_epu32 (__m128i __A, __m128i __B)\n       : \"=v\" (result)\n       : \"v\" (__A), \"v\" (__B)\n       : );\n-#elif __BIG_ENDIAN__\n+#else\n   /* VMX Vector Multiply Even Unsigned Word.  */\n   __asm__(\n       \"vmuleuw %0,%1,%2\"\n@@ -1483,11 +1483,7 @@ _mm_mul_epu32 (__m128i __A, __m128i __B)\n #endif\n   return (__m128i) result;\n #else\n-#ifdef __LITTLE_ENDIAN__\n   return (__m128i) vec_mule ((__v4su)__A, (__v4su)__B);\n-#elif __BIG_ENDIAN__\n-  return (__m128i) vec_mulo ((__v4su)__A, (__v4su)__B);\n-#endif\n #endif\n }\n \n@@ -1612,15 +1608,21 @@ _mm_bsrli_si128 (__m128i __A, const int __N)\n   const __v16qu zeros = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n \n   if (__N < 16)\n+#ifdef __LITTLE_ENDIAN__\n     if (__builtin_constant_p(__N))\n       /* Would like to use Vector Shift Left Double by Octet\n \t Immediate here to use the immediate form and avoid\n \t load of __N * 8 value into a separate VR.  */\n       result = vec_sld (zeros, (__v16qu) __A, (16 - __N));\n     else\n+#endif\n       {\n \t__v16qu shift = vec_splats((unsigned char)(__N*8));\n+#ifdef __LITTLE_ENDIAN__\n \tresult = vec_sro ((__v16qu)__A, shift);\n+#else\n+\tresult = vec_slo ((__v16qu)__A, shift);\n+#endif\n       }\n   else\n     result = zeros;\n@@ -1643,7 +1645,7 @@ _mm_slli_si128 (__m128i __A, const int _imm5)\n   if (_imm5 < 16)\n #ifdef __LITTLE_ENDIAN__\n     result = vec_sld ((__v16qu) __A, zeros, _imm5);\n-#elif __BIG_ENDIAN__\n+#else\n     result = vec_sld (zeros, (__v16qu) __A, (16 - _imm5));\n #endif\n   else\n@@ -1732,7 +1734,7 @@ _mm_sll_epi16 (__m128i __A, __m128i __B)\n \n #ifdef __LITTLE_ENDIAN__\n   lshift = vec_splat ((__v8hu) __B, 0);\n-#elif __BIG_ENDIAN__\n+#else\n   lshift = vec_splat ((__v8hu) __B, 3);\n #endif\n   shmask = vec_cmple (lshift, shmax);\n@@ -1751,7 +1753,7 @@ _mm_sll_epi32 (__m128i __A, __m128i __B)\n   __v4su result;\n #ifdef __LITTLE_ENDIAN__\n   lshift = vec_splat ((__v4su) __B, 0);\n-#elif __BIG_ENDIAN__\n+#else\n   lshift = vec_splat ((__v4su) __B, 1);\n #endif\n   shmask = vec_cmplt (lshift, shmax);\n@@ -1788,7 +1790,7 @@ _mm_sra_epi16 (__m128i __A, __m128i __B)\n \n #ifdef __LITTLE_ENDIAN__\n   rshift = vec_splat ((__v8hu)__B, 0);\n-#elif __BIG_ENDIAN__\n+#else\n   rshift = vec_splat ((__v8hu)__B, 3);\n #endif\n   rshift = vec_min (rshift, rshmax);\n@@ -1806,7 +1808,7 @@ _mm_sra_epi32 (__m128i __A, __m128i __B)\n \n #ifdef __LITTLE_ENDIAN__\n   rshift = vec_splat ((__v4su)__B, 0);\n-#elif __BIG_ENDIAN__\n+#else\n   rshift = vec_splat ((__v4su)__B, 1);\n #endif\n   rshift = vec_min (rshift, rshmax);\n@@ -1825,7 +1827,7 @@ _mm_srl_epi16 (__m128i __A, __m128i __B)\n \n #ifdef __LITTLE_ENDIAN__\n   rshift = vec_splat ((__v8hu) __B, 0);\n-#elif __BIG_ENDIAN__\n+#else\n   rshift = vec_splat ((__v8hu) __B, 3);\n #endif\n   shmask = vec_cmple (rshift, shmax);\n@@ -1845,7 +1847,7 @@ _mm_srl_epi32 (__m128i __A, __m128i __B)\n \n #ifdef __LITTLE_ENDIAN__\n   rshift = vec_splat ((__v4su) __B, 0);\n-#elif __BIG_ENDIAN__\n+#else\n   rshift = vec_splat ((__v4su) __B, 1);\n #endif\n   shmask = vec_cmplt (rshift, shmax);\n@@ -2026,13 +2028,8 @@ _mm_movemask_epi8 (__m128i __A)\n   __vector unsigned long long result;\n   static const __vector unsigned char perm_mask =\n     {\n-#ifdef __LITTLE_ENDIAN__\n \t0x78, 0x70, 0x68, 0x60, 0x58, 0x50, 0x48, 0x40,\n \t0x38, 0x30, 0x28, 0x20, 0x18, 0x10, 0x08, 0x00\n-#elif __BIG_ENDIAN__\n-\t0x00, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38,\n-\t0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78\n-#endif\n     };\n \n   result = ((__vector unsigned long long)\n@@ -2041,7 +2038,7 @@ _mm_movemask_epi8 (__m128i __A)\n \n #ifdef __LITTLE_ENDIAN__\n   return result[1];\n-#elif __BIG_ENDIAN__\n+#else\n   return result[0];\n #endif\n }\n@@ -2055,7 +2052,7 @@ _mm_mulhi_epu16 (__m128i __A, __m128i __B)\n #ifdef __LITTLE_ENDIAN__\n       0x02, 0x03, 0x12, 0x13,  0x06, 0x07, 0x16, 0x17,\n       0x0A, 0x0B, 0x1A, 0x1B,  0x0E, 0x0F, 0x1E, 0x1F\n-#elif __BIG_ENDIAN__\n+#else\n       0x00, 0x01, 0x10, 0x11,  0x04, 0x05, 0x14, 0x15,\n       0x08, 0x09, 0x18, 0x19,  0x0C, 0x0D, 0x1C, 0x1D\n #endif\n@@ -2077,35 +2074,24 @@ _mm_shufflehi_epi16 (__m128i __A, const int __mask)\n     {\n #ifdef __LITTLE_ENDIAN__\n \t      0x0908, 0x0B0A, 0x0D0C, 0x0F0E\n-#elif __BIG_ENDIAN__\n-\t      0x0607, 0x0405, 0x0203, 0x0001\n+#else\n+\t      0x0809, 0x0A0B, 0x0C0D, 0x0E0F\n #endif\n     };\n   __v2du pmask =\n #ifdef __LITTLE_ENDIAN__\n-      { 0x1716151413121110UL,  0x1f1e1d1c1b1a1918UL};\n-#elif __BIG_ENDIAN__\n-      { 0x1011121314151617UL,  0x18191a1b1c1d1e1fUL};\n+      { 0x1716151413121110UL,  0UL};\n+#else\n+      { 0x1011121314151617UL,  0UL};\n #endif\n   __m64_union t;\n   __v2du a, r;\n \n-#ifdef __LITTLE_ENDIAN__\n   t.as_short[0] = permute_selectors[element_selector_98];\n   t.as_short[1] = permute_selectors[element_selector_BA];\n   t.as_short[2] = permute_selectors[element_selector_DC];\n   t.as_short[3] = permute_selectors[element_selector_FE];\n-#elif __BIG_ENDIAN__\n-  t.as_short[3] = permute_selectors[element_selector_98];\n-  t.as_short[2] = permute_selectors[element_selector_BA];\n-  t.as_short[1] = permute_selectors[element_selector_DC];\n-  t.as_short[0] = permute_selectors[element_selector_FE];\n-#endif\n-#ifdef __LITTLE_ENDIAN__\n   pmask[1] = t.as_m64;\n-#elif __BIG_ENDIAN__\n-  pmask[0] = t.as_m64;\n-#endif\n   a = (__v2du)__A;\n   r = vec_perm (a, a, (__vector unsigned char)pmask);\n   return (__m128i) r;\n@@ -2122,30 +2108,23 @@ _mm_shufflelo_epi16 (__m128i __A, const int __mask)\n     {\n #ifdef __LITTLE_ENDIAN__\n \t      0x0100, 0x0302, 0x0504, 0x0706\n-#elif __BIG_ENDIAN__\n-\t      0x0e0f, 0x0c0d, 0x0a0b, 0x0809\n+#else\n+\t      0x0001, 0x0203, 0x0405, 0x0607\n #endif\n     };\n-  __v2du pmask = { 0x1011121314151617UL,  0x1f1e1d1c1b1a1918UL};\n+  __v2du pmask =\n+#ifdef __LITTLE_ENDIAN__\n+                 { 0UL,  0x1f1e1d1c1b1a1918UL};\n+#else\n+                 { 0UL,  0x18191a1b1c1d1e1fUL};\n+#endif\n   __m64_union t;\n   __v2du a, r;\n-\n-#ifdef __LITTLE_ENDIAN__\n   t.as_short[0] = permute_selectors[element_selector_10];\n   t.as_short[1] = permute_selectors[element_selector_32];\n   t.as_short[2] = permute_selectors[element_selector_54];\n   t.as_short[3] = permute_selectors[element_selector_76];\n-#elif __BIG_ENDIAN__\n-  t.as_short[3] = permute_selectors[element_selector_10];\n-  t.as_short[2] = permute_selectors[element_selector_32];\n-  t.as_short[1] = permute_selectors[element_selector_54];\n-  t.as_short[0] = permute_selectors[element_selector_76];\n-#endif\n-#ifdef __LITTLE_ENDIAN__\n   pmask[0] = t.as_m64;\n-#elif __BIG_ENDIAN__\n-  pmask[1] = t.as_m64;\n-#endif\n   a = (__v2du)__A;\n   r = vec_perm (a, a, (__vector unsigned char)pmask);\n   return (__m128i) r;\n@@ -2162,23 +2141,16 @@ _mm_shuffle_epi32 (__m128i __A, const int __mask)\n     {\n #ifdef __LITTLE_ENDIAN__\n \t0x03020100, 0x07060504, 0x0B0A0908, 0x0F0E0D0C\n-#elif __BIG_ENDIAN__\n-      0x0C0D0E0F, 0x08090A0B, 0x04050607, 0x00010203\n+#else\n+      0x00010203, 0x04050607, 0x08090A0B, 0x0C0D0E0F\n #endif\n     };\n   __v4su t;\n \n-#ifdef __LITTLE_ENDIAN__\n   t[0] = permute_selectors[element_selector_10];\n   t[1] = permute_selectors[element_selector_32];\n   t[2] = permute_selectors[element_selector_54] + 0x10101010;\n   t[3] = permute_selectors[element_selector_76] + 0x10101010;\n-#elif __BIG_ENDIAN__\n-  t[3] = permute_selectors[element_selector_10] + 0x10101010;\n-  t[2] = permute_selectors[element_selector_32] + 0x10101010;\n-  t[1] = permute_selectors[element_selector_54];\n-  t[0] = permute_selectors[element_selector_76];\n-#endif\n   return (__m128i)vec_perm ((__v4si) __A, (__v4si)__A, (__vector unsigned char)t);\n }\n \n@@ -2229,7 +2201,7 @@ _mm_sad_epu8 (__m128i __A, __m128i __B)\n   /* Rotate the sums into the correct position.  */\n #ifdef __LITTLE_ENDIAN__\n   result = vec_sld (result, result, 4);\n-#elif __BIG_ENDIAN__\n+#else\n   result = vec_sld (result, result, 6);\n #endif\n   /* Rotate the sums into the correct position.  */"}, {"sha": "a267b13d49fe31baa783b946c06b95d59fd45b1f", "filename": "gcc/config/rs6000/mmintrin.h", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c703ed1ea6245c2e5297fb132ecf810677d4eb/gcc%2Fconfig%2Frs6000%2Fmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c703ed1ea6245c2e5297fb132ecf810677d4eb/gcc%2Fconfig%2Frs6000%2Fmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fmmintrin.h?ref=60c703ed1ea6245c2e5297fb132ecf810677d4eb", "patch": "@@ -172,8 +172,13 @@ _mm_packs_pi16 (__m64 __m1, __m64 __m2)\n   __vector signed short vm1;\n   __vector signed char vresult;\n \n-  vm1 = (__vector signed short) (__vector unsigned long long) { __m2, __m1 };\n-  vresult = vec_vpkshss (vm1, vm1);\n+  vm1 = (__vector signed short) (__vector unsigned long long)\n+#ifdef __LITTLE_ENDIAN__\n+        { __m1, __m2 };\n+#else\n+        { __m2, __m1 };\n+#endif\n+  vresult = vec_packs (vm1, vm1);\n   return (__m64) ((__vector long long) vresult)[0];\n }\n \n@@ -192,8 +197,13 @@ _mm_packs_pi32 (__m64 __m1, __m64 __m2)\n   __vector signed int vm1;\n   __vector signed short vresult;\n \n-  vm1 = (__vector signed int) (__vector unsigned long long) { __m2, __m1 };\n-  vresult = vec_vpkswss (vm1, vm1);\n+  vm1 = (__vector signed int) (__vector unsigned long long)\n+#ifdef __LITTLE_ENDIAN__\n+        { __m1, __m2 };\n+#else\n+        { __m2, __m1 };\n+#endif\n+  vresult = vec_packs (vm1, vm1);\n   return (__m64) ((__vector long long) vresult)[0];\n }\n \n@@ -209,12 +219,19 @@ _m_packssdw (__m64 __m1, __m64 __m2)\n extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_packs_pu16 (__m64 __m1, __m64 __m2)\n {\n-  __vector signed short vm1;\n-  __vector unsigned char vresult;\n-\n-  vm1 = (__vector signed short) (__vector unsigned long long) { __m2, __m1 };\n-  vresult = vec_vpkshus (vm1, vm1);\n-  return (__m64) ((__vector long long) vresult)[0];\n+  __vector unsigned char r;\n+  __vector signed short vm1 = (__vector signed short) (__vector long long)\n+#ifdef __LITTLE_ENDIAN__\n+        { __m1, __m2 };\n+#else\n+        { __m2, __m1 };\n+#endif\n+  const __vector signed short __zero = { 0 };\n+  __vector __bool short __select = vec_cmplt (vm1, __zero);\n+  r = vec_packs ((vector unsigned short) vm1, (vector unsigned short) vm1);\n+  __vector __bool char packsel = vec_pack (__select, __select);\n+  r = vec_sel (r, (const vector unsigned char) __zero, packsel);\n+  return (__m64) ((__vector long long) r)[0];\n }\n \n extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -235,7 +252,7 @@ _mm_unpackhi_pi8 (__m64 __m1, __m64 __m2)\n   a = (__vector unsigned char)vec_splats (__m1);\n   b = (__vector unsigned char)vec_splats (__m2);\n   c = vec_mergel (a, b);\n-  return (__m64) ((__vector long long) c)[0];\n+  return (__m64) ((__vector long long) c)[1];\n #else\n   __m64_union m1, m2, res;\n \n@@ -316,7 +333,7 @@ _mm_unpacklo_pi8 (__m64 __m1, __m64 __m2)\n   a = (__vector unsigned char)vec_splats (__m1);\n   b = (__vector unsigned char)vec_splats (__m2);\n   c = vec_mergel (a, b);\n-  return (__m64) ((__vector long long) c)[1];\n+  return (__m64) ((__vector long long) c)[0];\n #else\n   __m64_union m1, m2, res;\n \n@@ -710,7 +727,7 @@ _mm_setzero_si64 (void)\n extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmpeq_pi8 (__m64 __m1, __m64 __m2)\n {\n-#ifdef _ARCH_PWR6\n+#if defined(_ARCH_PWR6) && defined(__powerpc64__)\n   __m64 res;\n   __asm__(\n       \"cmpb %0,%1,%2;\\n\"\n@@ -1084,8 +1101,13 @@ _mm_mulhi_pi16 (__m64 __m1, __m64 __m2)\n   __vector signed short c;\n   __vector signed int w0, w1;\n   __vector unsigned char xform1 = {\n+#ifdef __LITTLE_ENDIAN__\n       0x02, 0x03, 0x12, 0x13,  0x06, 0x07, 0x16, 0x17,\n       0x0A, 0x0B, 0x1A, 0x1B,  0x0E, 0x0F, 0x1E, 0x1F\n+#else\n+      0x00, 0x01, 0x10, 0x11,  0x04, 0x05, 0x14, 0x15,\n+      0x00, 0x01, 0x10, 0x11,  0x04, 0x05, 0x14, 0x15\n+#endif\n     };\n \n   a = (__vector signed short)vec_splats (__m1);"}, {"sha": "7b4d338b12a7b3bd54c6aa9263200d0947cb3d24", "filename": "gcc/config/rs6000/pmmintrin.h", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c703ed1ea6245c2e5297fb132ecf810677d4eb/gcc%2Fconfig%2Frs6000%2Fpmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c703ed1ea6245c2e5297fb132ecf810677d4eb/gcc%2Fconfig%2Frs6000%2Fpmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpmmintrin.h?ref=60c703ed1ea6245c2e5297fb132ecf810677d4eb", "patch": "@@ -75,18 +75,16 @@ extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artif\n _mm_hadd_ps (__m128 __X, __m128 __Y)\n {\n   __vector unsigned char xform2 = {\n-    #ifdef __LITTLE_ENDIAN__\n-      0x00, 0x01, 0x02, 0x03,  0x08, 0x09, 0x0A, 0x0B,  0x10, 0x11, 0x12, 0x13,  0x18, 0x19, 0x1A, 0x1B\n-    #elif __BIG_ENDIAN__\n-      0x14, 0x15, 0x16, 0x17,  0x1C, 0x1D, 0x1E, 0x1F,  0x04, 0x05, 0x06, 0x07,  0x0C, 0x0D, 0x0E, 0x0F\n-    #endif\n+      0x00, 0x01, 0x02, 0x03,\n+      0x08, 0x09, 0x0A, 0x0B,\n+      0x10, 0x11, 0x12, 0x13,\n+      0x18, 0x19, 0x1A, 0x1B\n     };\n   __vector unsigned char xform1 = {\n-    #ifdef __LITTLE_ENDIAN__\n-      0x04, 0x05, 0x06, 0x07,  0x0C, 0x0D, 0x0E, 0x0F,  0x14, 0x15, 0x16, 0x17,  0x1C, 0x1D, 0x1E, 0x1F\n-    #elif __BIG_ENDIAN__\n-      0x10, 0x11, 0x12, 0x13,  0x18, 0x19, 0x1A, 0x1B,  0x00, 0x01, 0x02, 0x03,  0x08, 0x09, 0x0A, 0x0B\n-    #endif\n+      0x04, 0x05, 0x06, 0x07,\n+      0x0C, 0x0D, 0x0E, 0x0F,\n+      0x14, 0x15, 0x16, 0x17,\n+      0x1C, 0x1D, 0x1E, 0x1F\n     };\n   return (__m128) vec_add (vec_perm ((__v4sf) __X, (__v4sf) __Y, xform2),\n \t\t\t   vec_perm ((__v4sf) __X, (__v4sf) __Y, xform1));\n@@ -96,18 +94,16 @@ extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artif\n _mm_hsub_ps (__m128 __X, __m128 __Y)\n {\n   __vector unsigned char xform2 = {\n-    #ifdef __LITTLE_ENDIAN__\n-      0x00, 0x01, 0x02, 0x03,  0x08, 0x09, 0x0A, 0x0B,  0x10, 0x11, 0x12, 0x13,  0x18, 0x19, 0x1A, 0x1B\n-    #elif __BIG_ENDIAN__\n-      0x14, 0x15, 0x16, 0x17,  0x1C, 0x1D, 0x1E, 0x1F,  0x04, 0x05, 0x06, 0x07,  0x0C, 0x0D, 0x0E, 0x0F\n-    #endif\n+      0x00, 0x01, 0x02, 0x03,\n+      0x08, 0x09, 0x0A, 0x0B,\n+      0x10, 0x11, 0x12, 0x13,\n+      0x18, 0x19, 0x1A, 0x1B\n     };\n   __vector unsigned char xform1 = {\n-    #ifdef __LITTLE_ENDIAN__\n-      0x04, 0x05, 0x06, 0x07,  0x0C, 0x0D, 0x0E, 0x0F,  0x14, 0x15, 0x16, 0x17,  0x1C, 0x1D, 0x1E, 0x1F\n-    #elif __BIG_ENDIAN__\n-      0x10, 0x11, 0x12, 0x13,  0x18, 0x19, 0x1A, 0x1B,  0x00, 0x01, 0x02, 0x03,  0x08, 0x09, 0x0A, 0x0B\n-    #endif\n+      0x04, 0x05, 0x06, 0x07,\n+      0x0C, 0x0D, 0x0E, 0x0F,\n+      0x14, 0x15, 0x16, 0x17,\n+      0x1C, 0x1D, 0x1E, 0x1F\n     };\n   return (__m128) vec_sub (vec_perm ((__v4sf) __X, (__v4sf) __Y, xform2),\n \t\t\t   vec_perm ((__v4sf) __X, (__v4sf) __Y, xform1));"}, {"sha": "9792005291f75067ee242d26114086f241590735", "filename": "gcc/config/rs6000/tmmintrin.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c703ed1ea6245c2e5297fb132ecf810677d4eb/gcc%2Fconfig%2Frs6000%2Ftmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c703ed1ea6245c2e5297fb132ecf810677d4eb/gcc%2Fconfig%2Frs6000%2Ftmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ftmmintrin.h?ref=60c703ed1ea6245c2e5297fb132ecf810677d4eb", "patch": "@@ -94,12 +94,12 @@ _mm_alignr_epi8 (__m128i __A, __m128i __B, const unsigned int __count)\n {\n   if (__builtin_constant_p (__count) && __count < 16)\n     {\n-#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+#ifdef __LITTLE_ENDIAN__\n       __A = (__m128i) vec_reve ((__v16qu) __A);\n       __B = (__m128i) vec_reve ((__v16qu) __B);\n #endif\n       __A = (__m128i) vec_sld ((__v16qu) __B, (__v16qu) __A, __count);\n-#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+#ifdef __LITTLE_ENDIAN__\n       __A = (__m128i) vec_reve ((__v16qu) __A);\n #endif\n       return __A;\n@@ -119,7 +119,7 @@ _mm_alignr_epi8 (__m128i __A, __m128i __B, const unsigned int __count)\n \t{\n \t  const __v16qu __shift =\n \t    vec_splats ((unsigned char) ((__count - 16) * 8));\n-#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+#ifdef __LITTLE_ENDIAN__\n \t  return (__m128i) vec_sro ((__v16qu) __A, __shift);\n #else\n \t  return (__m128i) vec_slo ((__v16qu) __A, __shift);\n@@ -131,7 +131,7 @@ _mm_alignr_epi8 (__m128i __A, __m128i __B, const unsigned int __count)\n       const __v16qu __shiftA =\n \tvec_splats ((unsigned char) ((16 - __count) * 8));\n       const __v16qu __shiftB = vec_splats ((unsigned char) (__count * 8));\n-#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+#ifdef __LITTLE_ENDIAN__\n       __A = (__m128i) vec_slo ((__v16qu) __A, __shiftA);\n       __B = (__m128i) vec_sro ((__v16qu) __B, __shiftB);\n #else\n@@ -149,7 +149,7 @@ _mm_alignr_pi8 (__m64 __A, __m64 __B, unsigned int __count)\n   if (__count < 16)\n     {\n       __v2du __C = { __B, __A };\n-#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+#ifdef __LITTLE_ENDIAN__\n       const __v4su __shift = { __count << 3, 0, 0, 0 };\n       __C = (__v2du) vec_sro ((__v16qu) __C, (__v16qu) __shift);\n #else"}, {"sha": "851bf91f6ba869a5d2ca70126d14105219eb9212", "filename": "gcc/config/rs6000/xmmintrin.h", "status": "modified", "additions": 49, "deletions": 36, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c703ed1ea6245c2e5297fb132ecf810677d4eb/gcc%2Fconfig%2Frs6000%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c703ed1ea6245c2e5297fb132ecf810677d4eb/gcc%2Fconfig%2Frs6000%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxmmintrin.h?ref=60c703ed1ea6245c2e5297fb132ecf810677d4eb", "patch": "@@ -907,17 +907,17 @@ _mm_cvtss_si32 (__m128 __A)\n {\n   __m64 res = 0;\n #ifdef _ARCH_PWR8\n-  __m128 vtmp;\n   double dtmp;\n   __asm__(\n-      \"xxsldwi %x1,%x3,%x3,3;\\n\"\n-      \"xscvspdp %x2,%x1;\\n\"\n+#ifdef __LITTLE_ENDIAN__\n+      \"xxsldwi %x0,%x0,%x0,3;\\n\"\n+#endif\n+      \"xscvspdp %x2,%x0;\\n\"\n       \"fctiw  %2,%2;\\n\"\n-      \"mfvsrd  %0,%x2;\\n\"\n-      : \"=r\" (res),\n-      \t\"=&wa\" (vtmp),\n+      \"mfvsrd  %1,%x2;\\n\"\n+      : \"+wa\" (__A),\n+        \"=r\" (res),\n         \"=f\" (dtmp)\n-      : \"wa\" (__A)\n       : );\n #else\n   res = __builtin_rint(__A[0]);\n@@ -940,17 +940,17 @@ _mm_cvtss_si64 (__m128 __A)\n {\n   __m64 res = 0;\n #ifdef _ARCH_PWR8\n-  __m128 vtmp;\n   double dtmp;\n   __asm__(\n-      \"xxsldwi %x1,%x3,%x3,3;\\n\"\n-      \"xscvspdp %x2,%x1;\\n\"\n+#ifdef __LITTLE_ENDIAN__\n+      \"xxsldwi %x0,%x0,%x0,3;\\n\"\n+#endif\n+      \"xscvspdp %x2,%x0;\\n\"\n       \"fctid  %2,%2;\\n\"\n-      \"mfvsrd  %0,%x2;\\n\"\n-      : \"=r\" (res),\n-        \"=&wa\" (vtmp),\n+      \"mfvsrd  %1,%x2;\\n\"\n+      : \"+wa\" (__A),\n+        \"=r\" (res),\n         \"=f\" (dtmp)\n-      : \"wa\" (__A)\n       : );\n #else\n   res = __builtin_llrint(__A[0]);\n@@ -1148,7 +1148,12 @@ _mm_cvtpu16_ps (__m64 __A)\n   __vector float vf1;\n \n   vs8 = (__vector unsigned short) (__vector unsigned long long) { __A, __A };\n-  vi4 = (__vector unsigned int) vec_vmrglh (vs8, zero);\n+  vi4 = (__vector unsigned int) vec_mergel\n+#ifdef __LITTLE_ENDIAN__\n+                                           (vs8, zero);\n+#else\n+                                           (zero, vs8);\n+#endif\n   vf1 = (__vector float) vec_ctf (vi4, 0);\n \n   return (__m128) vf1;\n@@ -1184,9 +1189,15 @@ _mm_cvtpu8_ps (__m64  __A)\n   __vector float vf1;\n \n   vc16 = (__vector unsigned char) (__vector unsigned long long) { __A, __A };\n-  vs8 = (__vector unsigned short) vec_vmrglb (vc16, zero);\n-  vi4 = (__vector unsigned int) vec_vmrghh (vs8,\n+#ifdef __LITTLE_ENDIAN__\n+  vs8 = (__vector unsigned short) vec_mergel (vc16, zero);\n+  vi4 = (__vector unsigned int) vec_mergeh (vs8,\n \t\t\t\t\t    (__vector unsigned short) zero);\n+#else\n+  vs8 = (__vector unsigned short) vec_mergel (zero, vc16);\n+  vi4 = (__vector unsigned int) vec_mergeh ((__vector unsigned short) zero,\n+                                            vs8);\n+#endif\n   vf1 = (__vector float) vec_ctf (vi4, 0);\n \n   return (__m128) vf1;\n@@ -1199,7 +1210,7 @@ _mm_cvtpi32x2_ps (__m64 __A, __m64 __B)\n   __vector signed int vi4;\n   __vector float vf4;\n \n-  vi4 = (__vector signed int) (__vector unsigned long long) { __B, __A };\n+  vi4 = (__vector signed int) (__vector unsigned long long) { __A, __B };\n   vf4 = (__vector float) vec_ctf (vi4, 0);\n   return (__m128) vf4;\n }\n@@ -1249,23 +1260,16 @@ _mm_shuffle_ps (__m128  __A, __m128  __B, int const __mask)\n     {\n #ifdef __LITTLE_ENDIAN__\n       0x03020100, 0x07060504, 0x0B0A0908, 0x0F0E0D0C\n-#elif __BIG_ENDIAN__\n-      0x0C0D0E0F, 0x08090A0B, 0x04050607, 0x00010203\n+#else\n+      0x00010203, 0x04050607, 0x08090A0B, 0x0C0D0E0F\n #endif\n     };\n   __vector unsigned int t;\n \n-#ifdef __LITTLE_ENDIAN__\n   t[0] = permute_selectors[element_selector_10];\n   t[1] = permute_selectors[element_selector_32];\n   t[2] = permute_selectors[element_selector_54] + 0x10101010;\n   t[3] = permute_selectors[element_selector_76] + 0x10101010;\n-#elif __BIG_ENDIAN__\n-  t[3] = permute_selectors[element_selector_10] + 0x10101010;\n-  t[2] = permute_selectors[element_selector_32] + 0x10101010;\n-  t[1] = permute_selectors[element_selector_54];\n-  t[0] = permute_selectors[element_selector_76];\n-#endif\n   return vec_perm ((__v4sf) __A, (__v4sf)__B, (__vector unsigned char)t);\n }\n \n@@ -1353,7 +1357,7 @@ _mm_movemask_ps (__m128  __A)\n     {\n #ifdef __LITTLE_ENDIAN__\n \t0x00204060, 0x80808080, 0x80808080, 0x80808080\n-#elif __BIG_ENDIAN__\n+#else\n       0x80808080, 0x80808080, 0x80808080, 0x00204060\n #endif\n     };\n@@ -1364,7 +1368,7 @@ _mm_movemask_ps (__m128  __A)\n \n #ifdef __LITTLE_ENDIAN__\n   return result[1];\n-#elif __BIG_ENDIAN__\n+#else\n   return result[0];\n #endif\n }\n@@ -1573,8 +1577,12 @@ _m_pminub (__m64 __A, __m64 __B)\n extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_movemask_pi8 (__m64 __A)\n {\n-  unsigned long long p = 0x0008101820283038UL; // permute control for sign bits\n-\n+  unsigned long long p =\n+#ifdef __LITTLE_ENDIAN__\n+                         0x0008101820283038UL; // permute control for sign bits\n+#else\n+                         0x3830282018100800UL; // permute control for sign bits\n+#endif\n   return __builtin_bpermd (p, __A);\n }\n \n@@ -1593,8 +1601,13 @@ _mm_mulhi_pu16 (__m64 __A, __m64 __B)\n   __vector unsigned short c;\n   __vector unsigned int w0, w1;\n   __vector unsigned char xform1 = {\n+#ifdef __LITTLE_ENDIAN__\n       0x02, 0x03, 0x12, 0x13,  0x06, 0x07, 0x16, 0x17,\n       0x0A, 0x0B, 0x1A, 0x1B,  0x0E, 0x0F, 0x1E, 0x1F\n+#else\n+      0x00, 0x01, 0x10, 0x11,  0x04, 0x05, 0x14, 0x15,\n+      0x00, 0x01, 0x10, 0x11,  0x04, 0x05, 0x14, 0x15\n+#endif\n     };\n \n   a = (__vector unsigned short)vec_splats (__A);\n@@ -1626,7 +1639,7 @@ _mm_shuffle_pi16 (__m64 __A, int const __N)\n     {\n #ifdef __LITTLE_ENDIAN__\n \t      0x0908, 0x0B0A, 0x0D0C, 0x0F0E\n-#elif __BIG_ENDIAN__\n+#else\n \t      0x0607, 0x0405, 0x0203, 0x0001\n #endif\n     };\n@@ -1638,7 +1651,7 @@ _mm_shuffle_pi16 (__m64 __A, int const __N)\n   t.as_short[1] = permute_selectors[element_selector_32];\n   t.as_short[2] = permute_selectors[element_selector_54];\n   t.as_short[3] = permute_selectors[element_selector_76];\n-#elif __BIG_ENDIAN__\n+#else\n   t.as_short[3] = permute_selectors[element_selector_10];\n   t.as_short[2] = permute_selectors[element_selector_32];\n   t.as_short[1] = permute_selectors[element_selector_54];\n@@ -1725,7 +1738,7 @@ _mm_sad_pu8 (__m64  __A, __m64  __B)\n   __vector signed int vsum;\n   const __vector unsigned int zero =\n     { 0, 0, 0, 0 };\n-  unsigned short result;\n+  __m64_union result = {0};\n \n   a = (__vector unsigned char) (__vector unsigned long long) { 0UL, __A };\n   b = (__vector unsigned char) (__vector unsigned long long) { 0UL, __B };\n@@ -1738,8 +1751,8 @@ _mm_sad_pu8 (__m64  __A, __m64  __B)\n   vsum = vec_sums (vsum, (__vector signed int) zero);\n   /* The sum is in the right most 32-bits of the vector result.\n      Transfer to a GPR and truncate to 16 bits.  */\n-  result = vsum[3];\n-  return (result);\n+  result.as_short[0] = vsum[3];\n+  return result.as_m64;\n }\n \n extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))"}]}