{"sha": "e846322c86b14ce9bac49bbf5869c9427449c507", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg0NjMyMmM4NmIxNGNlOWJhYzQ5YmJmNTg2OWM5NDI3NDQ5YzUwNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-12-13T01:00:49Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-12-13T01:00:49Z"}, "message": "testing: Add testing.MainStart function.\n\nThis patches in the Go 1.4 function, for convenience for\npeople using the Go 1.4 go tool with mainline gccgo.\n\nFrom-SVN: r218700", "tree": {"sha": "a615946a61fed21d2415d9fe5b19a6df15bddc21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a615946a61fed21d2415d9fe5b19a6df15bddc21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e846322c86b14ce9bac49bbf5869c9427449c507", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e846322c86b14ce9bac49bbf5869c9427449c507", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e846322c86b14ce9bac49bbf5869c9427449c507", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e846322c86b14ce9bac49bbf5869c9427449c507/comments", "author": null, "committer": null, "parents": [{"sha": "c31fc2f424c31a4915c81500e8da72dc751d0db5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c31fc2f424c31a4915c81500e8da72dc751d0db5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c31fc2f424c31a4915c81500e8da72dc751d0db5"}], "stats": {"total": 56, "additions": 51, "deletions": 5}, "files": [{"sha": "1b7360a177ec406589b220b8f7551f0350222d21", "filename": "libgo/go/testing/testing.go", "status": "modified", "additions": 51, "deletions": 5, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e846322c86b14ce9bac49bbf5869c9427449c507/libgo%2Fgo%2Ftesting%2Ftesting.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e846322c86b14ce9bac49bbf5869c9427449c507/libgo%2Fgo%2Ftesting%2Ftesting.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftesting%2Ftesting.go?ref=e846322c86b14ce9bac49bbf5869c9427449c507", "patch": "@@ -117,6 +117,26 @@\n // The entire test file is presented as the example when it contains a single\n // example function, at least one other function, type, variable, or constant\n // declaration, and no test or benchmark functions.\n+//\n+// Main\n+//\n+// It is sometimes necessary for a test program to do extra setup or teardown\n+// before or after testing. It is also sometimes necessary for a test to control\n+// which code runs on the main thread. To support these and other cases,\n+// if a test file contains a function:\n+//\n+//\tfunc TestMain(m *testing.M)\n+//\n+// then the generated test will call TestMain(m) instead of running the tests\n+// directly. TestMain runs in the main goroutine and can do whatever setup\n+// and teardown is necessary around a call to m.Run. It should then call\n+// os.Exit with the result of m.Run.\n+//\n+// The minimal implementation of TestMain is:\n+//\n+//\tfunc TestMain(m *testing.M) { os.Exit(m.Run()) }\n+//\n+// In effect, that is the implementation used when no TestMain is explicitly defined.\n package testing\n \n import (\n@@ -426,23 +446,49 @@ func tRunner(t *T, test *InternalTest) {\n // An internal function but exported because it is cross-package; part of the implementation\n // of the \"go test\" command.\n func Main(matchString func(pat, str string) (bool, error), tests []InternalTest, benchmarks []InternalBenchmark, examples []InternalExample) {\n+\tos.Exit(MainStart(matchString, tests, benchmarks, examples).Run())\n+}\n+\n+// M is a type passed to a TestMain function to run the actual tests.\n+type M struct {\n+\tmatchString func(pat, str string) (bool, error)\n+\ttests       []InternalTest\n+\tbenchmarks  []InternalBenchmark\n+\texamples    []InternalExample\n+}\n+\n+// MainStart is meant for use by tests generated by 'go test'.\n+// It is not meant to be called directly and is not subject to the Go 1 compatibility document.\n+// It may change signature from release to release.\n+func MainStart(matchString func(pat, str string) (bool, error), tests []InternalTest, benchmarks []InternalBenchmark, examples []InternalExample) *M {\n+\treturn &M{\n+\t\tmatchString: matchString,\n+\t\ttests:       tests,\n+\t\tbenchmarks:  benchmarks,\n+\t\texamples:    examples,\n+\t}\n+}\n+\n+// Run runs the tests. It returns an exit code to pass to os.Exit.\n+func (m *M) Run() int {\n \tflag.Parse()\n \tparseCpuList()\n \n \tbefore()\n \tstartAlarm()\n-\thaveExamples = len(examples) > 0\n-\ttestOk := RunTests(matchString, tests)\n-\texampleOk := RunExamples(matchString, examples)\n+\thaveExamples = len(m.examples) > 0\n+\ttestOk := RunTests(m.matchString, m.tests)\n+\texampleOk := RunExamples(m.matchString, m.examples)\n \tstopAlarm()\n \tif !testOk || !exampleOk {\n \t\tfmt.Println(\"FAIL\")\n \t\tafter()\n-\t\tos.Exit(1)\n+\t\treturn 1\n \t}\n \tfmt.Println(\"PASS\")\n-\tRunBenchmarks(matchString, benchmarks)\n+\tRunBenchmarks(m.matchString, m.benchmarks)\n \tafter()\n+\treturn 0\n }\n \n func (t *T) report() {"}]}