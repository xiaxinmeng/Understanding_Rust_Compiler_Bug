{"sha": "f33d7a88d069d169bbe76da8e5c52de17f68ca05", "node_id": "C_kwDOANBUbNoAKGYzM2Q3YTg4ZDA2OWQxNjliYmU3NmRhOGU1YzUyZGUxN2Y2OGNhMDU", "commit": {"author": {"name": "Arsen Arsenovi\u0107", "email": "arsen@aarsen.me", "date": "2023-02-23T10:27:11Z"}, "committer": {"name": "Gerald Pfeifer", "email": "gerald@pfeifer.com", "date": "2023-02-23T22:42:01Z"}, "message": "**/*.texi: Reorder index entries\n\nThis change is a generalization of r13-6292-gddf6fe375d9110.\n\nHistorically, makeinfo exhibited a bug, due to which a structure like:\n\n  @item foo\n  @cindex foo\n  @cindex bar\n\n... would be transformed into an item heading, with the first index\nentry on it, followed by an item body, with the second index entry in\nit.  This has often lead to index entries not linking to relevant items,\nbut rather, just below them.\n\nThis bug was exhibited in both Info and HTML documentation, and was most\nglaringly obvious in the latter.\n\nAfter a discussion with the Texinfo developers, it was decided that the\nappropriate construct for this case is:\n\n  @cindex foo\n  @cindex bar\n  @item foo\n\n... which behaves correctly in newer versions, linking all the index\nentries to the item itself.  This pattern also produces copiable\nanchors in HTML output.\n\nThis commit fixes most indices to follow the pattern above, however,\nomits relevant changes in the Ada manuals, as the algorithm described\nbelow lead to many false positives and unwanted changes in that manual.\n\nMuch like the previous commit, this change is mostly mechanical, with a\nsimple script.  I have, however, gone over the patch myself also, to see\nif there's anything that ought to be kept as-is.  Formatter:\n\n  # GPL3+\n  use v5.35;\n  use strict;\n  use warnings;\n\n  my @lineq = ();\n  my @itemq = ();\n  my @indxq = ();\n  my $lstin = 0;\n\n  while (<>)\n    {\n      push (@lineq, $_);\n      if (/^\\@[a-zA-Z0-9]{1,2}index\\W/)\n        {\n          $lstin = @lineq;\n          push (@indxq, $_);\n          next;\n        }\n      if (/^\\@itemx?\\W/)\n        {\n          $lstin = @lineq;\n          push (@itemq, $_);\n          next;\n        }\n      next if $lstin && /^\\s*(\\@c(omment)?\\W.*)?$/;\n\n      if (@indxq and @itemq)\n        {\n          print @indxq;\n          print @itemq;\n          print @lineq[$lstin..@lineq-1];\n        }\n      else\n        {\n          print @lineq;\n        }\n      @lineq = ();\n      @itemq = ();\n      @indxq = ();\n      $lstin = 0;\n    }\n\n  if (@indxq and @itemq)\n    {\n      print @indxq;\n      print @itemq;\n      print @lineq[$lstin..@lineq-1];\n    }\n  else\n    {\n      print @lineq;\n    }\n\n  # Local Variables:\n  # indent-tabs-mode: nil\n  # End:\n\ngcc/d/ChangeLog:\n\n\t* implement-d.texi: Reorder index entries around @items.\n\ngcc/ChangeLog:\n\n\t* doc/cfg.texi: Reorder index entries around @items.\n\t* doc/cpp.texi: Ditto.\n\t* doc/cppenv.texi: Ditto.\n\t* doc/cppopts.texi: Ditto.\n\t* doc/generic.texi: Ditto.\n\t* doc/install.texi: Ditto.\n\t* doc/extend.texi: Ditto.\n\t* doc/invoke.texi: Ditto.\n\t* doc/md.texi: Ditto.\n\t* doc/rtl.texi: Ditto.\n\t* doc/tm.texi.in: Ditto.\n\t* doc/trouble.texi: Ditto.\n\t* doc/tm.texi: Regenerate.\n\ngcc/fortran/ChangeLog:\n\n\t* invoke.texi: Reorder index entries around @items.\n\ngcc/go/ChangeLog:\n\n\t* gccgo.texi: Reorder index entries around @items.", "tree": {"sha": "6d399142c972278067733d030a73fb2e807af488", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d399142c972278067733d030a73fb2e807af488"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f33d7a88d069d169bbe76da8e5c52de17f68ca05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f33d7a88d069d169bbe76da8e5c52de17f68ca05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f33d7a88d069d169bbe76da8e5c52de17f68ca05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f33d7a88d069d169bbe76da8e5c52de17f68ca05/comments", "author": {"login": "ArsenArsen", "id": 7805050, "node_id": "MDQ6VXNlcjc4MDUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7805050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArsenArsen", "html_url": "https://github.com/ArsenArsen", "followers_url": "https://api.github.com/users/ArsenArsen/followers", "following_url": "https://api.github.com/users/ArsenArsen/following{/other_user}", "gists_url": "https://api.github.com/users/ArsenArsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArsenArsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArsenArsen/subscriptions", "organizations_url": "https://api.github.com/users/ArsenArsen/orgs", "repos_url": "https://api.github.com/users/ArsenArsen/repos", "events_url": "https://api.github.com/users/ArsenArsen/events{/privacy}", "received_events_url": "https://api.github.com/users/ArsenArsen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GeraldPfeifer", "id": 4573532, "node_id": "MDQ6VXNlcjQ1NzM1MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/4573532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GeraldPfeifer", "html_url": "https://github.com/GeraldPfeifer", "followers_url": "https://api.github.com/users/GeraldPfeifer/followers", "following_url": "https://api.github.com/users/GeraldPfeifer/following{/other_user}", "gists_url": "https://api.github.com/users/GeraldPfeifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/GeraldPfeifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GeraldPfeifer/subscriptions", "organizations_url": "https://api.github.com/users/GeraldPfeifer/orgs", "repos_url": "https://api.github.com/users/GeraldPfeifer/repos", "events_url": "https://api.github.com/users/GeraldPfeifer/events{/privacy}", "received_events_url": "https://api.github.com/users/GeraldPfeifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f83e76c3f998c8708fe2ddca16ae3f317c39c37a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f83e76c3f998c8708fe2ddca16ae3f317c39c37a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f83e76c3f998c8708fe2ddca16ae3f317c39c37a"}], "stats": {"total": 1403, "additions": 701, "deletions": 702}, "files": [{"sha": "89a17916a83873eed26caadf8bc1fed6e5ef19bb", "filename": "gcc/d/implement-d.texi", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Fd%2Fimplement-d.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Fd%2Fimplement-d.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fimplement-d.texi?ref=f33d7a88d069d169bbe76da8e5c52de17f68ca05", "patch": "@@ -126,11 +126,11 @@ The following attributes are supported on most targets.\n \n @table @code\n \n+@cindex @code{alloc_size} function attribute\n+@cindex @code{alloc_size} variable attribute\n @item @@(gcc.attributes.alloc_size (@var{sizeArgIdx}))\n @itemx @@(gcc.attributes.alloc_size (@var{sizeArgIdx}, @var{numArgIdx}))\n @itemx @@(gcc.attributes.alloc_size (@var{sizeArgIdx}, @var{numArgIdx}, @var{zeroBasedNumbering}))\n-@cindex @code{alloc_size} function attribute\n-@cindex @code{alloc_size} variable attribute\n \n The @code{@@alloc_size} attribute may be applied to a function - or a function\n pointer variable -  that returns a pointer and takes at least one argument of\n@@ -151,8 +151,8 @@ argument specifying the element count.\n void malloc_cb(@@alloc_size(1) void* function(size_t) ptr) @{ @}\n @end smallexample\n \n-@item @@(gcc.attributes.always_inline)\n @cindex @code{always_inline} function attribute\n+@item @@(gcc.attributes.always_inline)\n \n The @code{@@always_inline} attribute inlines the function independent of any\n restrictions that otherwise apply to inlining.  Failure to inline such a\n@@ -162,8 +162,8 @@ function is diagnosed as an error.\n @@always_inline int func();\n @end smallexample\n \n-@item @@(gcc.attributes.cold)\n @cindex @code{cold} function attribute\n+@item @@(gcc.attributes.cold)\n \n The @code{@@cold} attribute on functions is used to inform the compiler that the\n function is unlikely to be executed.  The function is optimized for size\n@@ -176,8 +176,8 @@ cold functions within code are considered to be cold too.\n @@cold int func();\n @end smallexample\n \n-@item @@(gcc.attributes.flatten)\n @cindex @code{flatten} function attribute\n+@item @@(gcc.attributes.flatten)\n \n The @code{@@flatten} attribute is used to inform the compiler that every call\n inside this function should be inlined, if possible.  Functions declared with\n@@ -187,8 +187,8 @@ attribute @code{@@noinline} and similar are not inlined.\n @@flatten int func();\n @end smallexample\n \n-@item @@(gcc.attributes.no_icf)\n @cindex @code{no_icf} function attribute\n+@item @@(gcc.attributes.no_icf)\n \n The @code{@@no_icf} attribute prevents a function from being merged with\n another semantically equivalent function.\n@@ -197,8 +197,8 @@ another semantically equivalent function.\n @@no_icf int func();\n @end smallexample\n \n-@item @@(gcc.attributes.no_sanitize (\"@var{sanitize_option}\"))\n @cindex @code{no_sanitize} function attribute\n+@item @@(gcc.attributes.no_sanitize (\"@var{sanitize_option}\"))\n \n The @code{@@no_sanitize} attribute on functions is used to inform the compiler\n that it should not do sanitization of any option mentioned in\n@@ -210,8 +210,8 @@ option can be provided.\n @@no_sanitize(\"alignment,object-size\") void func2() @{ @}\n @end smallexample\n \n-@item @@(gcc.attributes.noclone)\n @cindex @code{noclone} function attribute\n+@item @@(gcc.attributes.noclone)\n \n The @code{@@noclone} attribute prevents a function from being considered for\n cloning - a mechanism that produces specialized copies of functions and which\n@@ -221,8 +221,8 @@ is (currently) performed by interprocedural constant propagation.\n @@noclone int func();\n @end smallexample\n \n-@item @@(gcc.attributes.noinline)\n @cindex @code{noinline} function attribute\n+@item @@(gcc.attributes.noinline)\n \n The @code{@@noinline} attribute prevents a function from being considered for\n inlining.  If the function does not have side effects, there are optimizations\n@@ -234,8 +234,8 @@ the function call is live.  To keep such calls from being optimized away, put\n @@noinline int func();\n @end smallexample\n \n-@item @@(gcc.attributes.noipa)\n @cindex @code{noipa} function attribute\n+@item @@(gcc.attributes.noipa)\n \n The @code{@@noipa} attribute disables interprocedural optimizations between the\n function with this attribute and its callers, as if the body of the function is\n@@ -253,8 +253,8 @@ This attribute is supported mainly for the purpose of testing the compiler.\n @@noipa int func();\n @end smallexample\n \n-@item @@(gcc.attributes.noplt)\n @cindex @code{noplt} function attribute\n+@item @@(gcc.attributes.noplt)\n \n The @code{@@noplt} attribute is the counterpart to option @option{-fno-plt}.\n Calls to functions marked with this attribute in position-independent code do\n@@ -267,8 +267,8 @@ are marked to not use the PLT to use the GOT instead.\n @@noplt int func();\n @end smallexample\n \n-@item @@(gcc.attributes.optimize (@var{arguments}))\n @cindex @code{optimize} function attribute\n+@item @@(gcc.attributes.optimize (@var{arguments}))\n \n The @code{@@optimize} attribute is used to specify that a function is to be\n compiled with different optimization options than specified on the command\n@@ -295,8 +295,8 @@ It is not suitable in production code.\n @@optimize(\"no-finite-math-only\", 3) double fn7(double x);\n @end smallexample\n \n-@item @@(gcc.attributes.register (\"@var{registerName}\"))\n @cindex @code{register} variable attribute\n+@item @@(gcc.attributes.register (\"@var{registerName}\"))\n \n The @code{@@register} attribute specifies that a local or @code{__gshared}\n variable is to be given a register storage-class in the C99 sense of the term,\n@@ -311,8 +311,8 @@ error to take the address of a register variable.\n void func() @{ @@register(\"r10\") long r10 = 0x2a; @}\n @end smallexample\n \n-@item @@(gcc.attributes.restrict)\n @cindex @code{restrict} parameter attribute\n+@item @@(gcc.attributes.restrict)\n \n The @code{@@restrict} attribute specifies that a function parameter is to be\n restrict-qualified in the C99 sense of the term.  The parameter needs to boil\n@@ -323,9 +323,9 @@ reference, or a @code{ref} parameter.\n void func(@@restrict ref const float[16] array);\n @end smallexample\n \n-@item @@(gcc.attributes.section (\"@var{sectionName}\"))\n @cindex @code{section} function attribute\n @cindex @code{section} variable attribute\n+@item @@(gcc.attributes.section (\"@var{sectionName}\"))\n \n The @code{@@section} attribute specifies that a function or variable lives in a\n particular section.  For when you need certain particular functions to appear\n@@ -341,8 +341,8 @@ instead.\n @@section(\"stack\") ubyte[10000] stack;\n @end smallexample\n \n-@item @@(gcc.attributes.simd)\n @cindex @code{simd} function attribute\n+@item @@(gcc.attributes.simd)\n \n The @code{@@simd} attribute enables creation of one or more function versions\n that can process multiple arguments using SIMD instructions from a single\n@@ -355,8 +355,8 @@ Vector ABI document.\n @@simd double sqrt(double x);\n @end smallexample\n \n-@item @@(gcc.attributes.simd_clones (\"@var{mask}\"))\n @cindex @code{simd_clones} function attribute\n+@item @@(gcc.attributes.simd_clones (\"@var{mask}\"))\n \n The @code{@@simd_clones} attribute is the same as @code{@@simd}, but also\n includes a @var{mask} argument.  Valid masks values are @code{notinbranch} or\n@@ -367,8 +367,8 @@ clones correspondingly.\n @@simd_clones(\"notinbranch\") double atan2(double y, double x);\n @end smallexample\n \n-@item @@(gcc.attributes.symver (\"@var{arguments}\"))\n @cindex @code{symver} function attribute\n+@item @@(gcc.attributes.symver (\"@var{arguments}\"))\n \n The @code{@@symver} attribute creates a symbol version on ELF targets.\n The syntax of the string parameter is @code{\"@var{name}@@@var{nodename}\"}.\n@@ -387,8 +387,8 @@ resolve @var{name} by the linker.\n @@symver(\"foo@@VERS_1\") int foo_v1();\n @end smallexample\n \n-@item @@(gcc.attributes.target (\"@var{options}\"))\n @cindex @code{target} function attribute\n+@item @@(gcc.attributes.target (\"@var{options}\"))\n \n The @code{@@target} attribute is used to specify that a function is to be\n compiled with different target options than specified on the command line.  One\n@@ -407,8 +407,8 @@ The options supported are specific to each target.\n @@target(\"sse3\") void sse3_func();\n @end smallexample\n \n-@item @@(gcc.attributes.target_clones (\"@var{options}\"))\n @cindex @code{target_clones} function attribute\n+@item @@(gcc.attributes.target_clones (\"@var{options}\"))\n \n The @code{@@target_clones} attribute is used to specify that a function be\n cloned into multiple versions compiled with different target @var{options} than\n@@ -423,9 +423,9 @@ a function with @code{@@target_clones} attribute.\n @@target_clones(\"sse4.1,avx,default\") double func(double x);\n @end smallexample\n \n-@item @@(gcc.attributes.used)\n @cindex @code{used} function attribute\n @cindex @code{used} variable attribute\n+@item @@(gcc.attributes.used)\n \n The @code{@@used} attribute, annotated to a function or variable, means that\n code must be emitted for the function even if it appears that the function is\n@@ -436,9 +436,9 @@ only in inline assembly.\n @@used __gshared int var = 0x1000;\n @end smallexample\n \n-@item @@(gcc.attributes.visibility (\"@var{visibilityName}\"))\n @cindex @code{visibility} function attribute\n @cindex @code{visibility} variable attribute\n+@item @@(gcc.attributes.visibility (\"@var{visibilityName}\"))\n \n The @code{@@visibility} attribute affects the linkage of the declaration to\n which it is attached.  It can be applied to variables, types, and functions.\n@@ -450,9 +450,9 @@ There are four supported visibility_type values: @code{default}, @code{hidden},\n @@visibility(\"protected\") void func() @{  @}\n @end smallexample\n \n-@item @@(gcc.attributes.weak)\n @cindex @code{weak} function attribute\n @cindex @code{weak} variable attribute\n+@item @@(gcc.attributes.weak)\n \n The @code{@@weak} attribute causes a declaration of an external symbol to be\n emitted as a weak symbol rather than a global.  This is primarily useful in\n@@ -479,43 +479,43 @@ The following attributes are defined for compatibility with other compilers.\n \n @table @code\n \n+@cindex @code{allocSize} function attribute\n @item @@(gcc.attributes.allocSize (@var{sizeArgIdx}))\n @itemx @@(gcc.attributes.allocSize (@var{sizeArgIdx}, @var{numArgIdx}))\n @item @@(gcc.attributes.allocSize (@var{sizeArgIdx}))\n-@cindex @code{allocSize} function attribute\n \n These attributes are a synonym for\n @code{@@alloc_size(@var{sizeArgIdx}, @var{numArgIdx}, true)}.\n Unlike @code{@@alloc_size}, it uses 0-based index of the function arguments.\n \n-@item @@(gcc.attributes.assumeUsed)\n @cindex @code{assumeUsed} function attribute\n @cindex @code{assumeUsed} variable attribute\n+@item @@(gcc.attributes.assumeUsed)\n \n This attribute is a synonym for @code{@@used}.\n \n+@cindex @code{dynamicCompile} function attribute\n @item @@(gcc.attributes.dynamicCompile)\n @itemx @@(gcc.attributes.dynamicCompileConst)\n @itemx @@(gcc.attributes.dynamicCompileEmit)\n-@cindex @code{dynamicCompile} function attribute\n \n These attributes are accepted, but have no effect.\n \n-@item @@(gcc.attributes.fastmath)\n @cindex @code{fastmath} function attribute\n+@item @@(gcc.attributes.fastmath)\n \n This attribute is a synonym for @code{@@optimize(\"Ofast\")}.  Explicitly sets\n \"fast-math\" for a function, enabling aggressive math optimizations.\n \n-@item @@(gcc.attributes.hidden)\n @cindex @code{hidden} function attribute\n @cindex @code{hidden} variable attribute\n+@item @@(gcc.attributes.hidden)\n \n This attribute is a synonym for @code{@@visibility(\"hidden\")}.  Sets the\n visibility of a function or global variable to \"hidden\".\n \n-@item @@(gcc.attributes.naked)\n @cindex @code{naked} function attribute\n+@item @@(gcc.attributes.naked)\n \n This attribute is a synonym for @code{@@attribute(\"naked\")}.  Adds GCC's\n \"naked\" attribute to a function, disabling function prologue / epilogue\n@@ -524,14 +524,14 @@ While using extended @code{asm} or a mixture of basic @code{asm} and D code may\n appear to work, they cannot be depended upon to work reliably and are not\n supported.\n \n-@item @@(gcc.attributes.noSanitize (\"@var{sanitize_option}\"))\n @cindex @code{noSanitize} function attribute\n+@item @@(gcc.attributes.noSanitize (\"@var{sanitize_option}\"))\n \n This attribute is a synonym for @code{@@no_sanitize(\"sanitize_option\")}.\n \n \n-@item @@(gcc.attributes.optStrategy (\"@var{strategy}\"))\n @cindex @code{optStrategy} function attribute\n+@item @@(gcc.attributes.optStrategy (\"@var{strategy}\"))\n \n This attribute is a synonym for @code{@@optimize(\"O0\")} and\n @code{@@optimize(\"Os\")}.  Sets the optimization strategy for a function.  Valid"}, {"sha": "6fb9c9f48ecdf7e4296806095eb794e9e4ebe2bd", "filename": "gcc/doc/cfg.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Fdoc%2Fcfg.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Fdoc%2Fcfg.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcfg.texi?ref=f33d7a88d069d169bbe76da8e5c52de17f68ca05", "patch": "@@ -269,8 +269,8 @@ These edges are used for unconditional or conditional jumps and in\n RTL also for table jumps.  They are the easiest to manipulate as they\n may be freely redirected when the flow graph is not in SSA form.\n \n-@item fall-thru\n @findex EDGE_FALLTHRU, force_nonfallthru\n+@item fall-thru\n Fall-thru edges are present in case where the basic block may continue\n execution to the following one without branching.  These edges have\n the @code{EDGE_FALLTHRU} flag set.  Unlike other types of edges, these\n@@ -279,9 +279,9 @@ instruction stream.  The function @code{force_nonfallthru} is\n available to insert an unconditional jump in the case that redirection\n is needed.  Note that this may require creation of a new basic block.\n \n-@item exception handling\n @cindex exception handling\n @findex EDGE_ABNORMAL, EDGE_EH\n+@item exception handling\n Exception handling edges represent possible control transfers from a\n trapping instruction to an exception handler.  The definition of\n ``trapping'' varies.  In C++, only function calls can throw, but for\n@@ -310,17 +310,17 @@ but this predicate only checks for possible memory traps, as in\n dereferencing an invalid pointer location.\n \n \n-@item sibling calls\n @cindex sibling call\n @findex EDGE_ABNORMAL, EDGE_SIBCALL\n+@item sibling calls\n Sibling calls or tail calls terminate the function in a non-standard\n way and thus an edge to the exit must be present.\n @code{EDGE_SIBCALL} and @code{EDGE_ABNORMAL} are set in such case.\n These edges only exist in the RTL representation.\n \n-@item computed jumps\n @cindex computed jump\n @findex EDGE_ABNORMAL\n+@item computed jumps\n Computed jumps contain edges to all labels in the function referenced\n from the code.  All those edges have @code{EDGE_ABNORMAL} flag set.\n The edges used to represent computed jumps often cause compile time\n@@ -369,9 +369,9 @@ Be aware of that when you work on passes in that area.  There have\n been numerous examples already where the compile time for code with\n unfactored computed jumps caused some serious headaches.\n \n-@item nonlocal goto handlers\n @cindex nonlocal goto handler\n @findex EDGE_ABNORMAL, EDGE_ABNORMAL_CALL\n+@item nonlocal goto handlers\n GCC allows nested functions to return into caller using a @code{goto}\n to a label passed to as an argument to the callee.  The labels passed\n to nested functions contain special code to cleanup after function\n@@ -380,9 +380,9 @@ receivers''.  If a function contains such nonlocal goto receivers, an\n edge from the call to the label is created with the\n @code{EDGE_ABNORMAL} and @code{EDGE_ABNORMAL_CALL} flags set.\n \n-@item function entry points\n @cindex function entry point, alternate function entry point\n @findex LABEL_ALTERNATE_NAME\n+@item function entry points\n By definition, execution of function starts at basic block 0, so there\n is always an edge from the @code{ENTRY_BLOCK_PTR} to basic block 0.\n There is no @code{GIMPLE} representation for alternate entry points at"}, {"sha": "b0a2ce3ac6b6c75345fea2c9c184250d61eb7a81", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=f33d7a88d069d169bbe76da8e5c52de17f68ca05", "patch": "@@ -292,8 +292,8 @@ roughly to the first three ``phases of translation'' described in the C\n standard.\n \n @enumerate\n-@item\n @cindex line endings\n+@item\n The input file is read into memory and broken into lines.\n \n Different systems use different conventions to indicate the end of a\n@@ -312,8 +312,8 @@ of the file is considered to implicitly supply one.  The C standard says\n that this condition provokes undefined behavior, so GCC will emit a\n warning message.\n \n-@item\n @cindex trigraphs\n+@item\n @anchor{trigraphs}If trigraphs are enabled, they are replaced by their\n corresponding single characters.  By default GCC ignores trigraphs,\n but if you request a strictly conforming mode with the @option{-std}\n@@ -346,9 +346,9 @@ Trigraph:       ??(  ??)  ??<  ??>  ??=  ??/  ??'  ??!  ??-\n Replacement:      [    ]    @{    @}    #    \\    ^    |    ~\n @end smallexample\n \n-@item\n @cindex continued lines\n @cindex backslash-newline\n+@item\n Continued lines are merged into one long line.\n \n A continued line is a line which ends with a backslash, @samp{\\}.  The\n@@ -365,10 +365,10 @@ is still a continued line.  However, as this is usually the result of an\n editing mistake, and many compilers will not accept it as a continued\n line, GCC will warn you about it.\n \n-@item\n @cindex comments\n @cindex line comments\n @cindex block comments\n+@item\n All comments are replaced with single spaces.\n \n There are two kinds of comments.  @dfn{Block comments} begin with\n@@ -694,8 +694,8 @@ C preprocessing directive @samp{#include}.\n Header files serve two purposes.\n \n @itemize @bullet\n-@item\n @cindex system header files\n+@item\n System header files declare the interfaces to parts of the operating\n system.  You include them in your program to supply the definitions and\n declarations you need to invoke system calls and libraries.\n@@ -1121,8 +1121,8 @@ Header files found in directories added to the search path with the\n @option{-isystem} and @option{-idirafter} command-line options are \n treated as system headers for the purposes of diagnostics.\n \n-@item\n @findex #pragma GCC system_header\n+@item\n There is also a directive, @code{@w{#pragma GCC system_header}}, which\n tells GCC to consider the rest of the current include file a system\n header, no matter where it was found.  Code that comes before the"}, {"sha": "75feaeb9141534e8b7108c37c59370f61548f534", "filename": "gcc/doc/cppenv.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Fdoc%2Fcppenv.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Fdoc%2Fcppenv.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppenv.texi?ref=f33d7a88d069d169bbe76da8e5c52de17f68ca05", "patch": "@@ -44,8 +44,8 @@ See also @ref{Search Path}.\n @end ifset\n @c man begin ENVIRONMENT\n \n-@item DEPENDENCIES_OUTPUT\n @cindex dependencies for make as output\n+@item DEPENDENCIES_OUTPUT\n If this variable is set, its value specifies how to output\n dependencies for Make based on the non-system header files processed\n by the compiler.  System header files are ignored in the dependency\n@@ -67,8 +67,8 @@ the options @option{-MM} and @option{-MF}\n @end ifclear\n with an optional @option{-MT} switch too.\n \n-@item SUNPRO_DEPENDENCIES\n @cindex dependencies for make as output\n+@item SUNPRO_DEPENDENCIES\n This variable is the same as @env{DEPENDENCIES_OUTPUT} (see above),\n except that system header files are not ignored, so it implies\n @option{-M} rather than @option{-MM}.  However, the dependence on the"}, {"sha": "872629eeb4db519dde03e706b5667a68ce6a8d2e", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=f33d7a88d069d169bbe76da8e5c52de17f68ca05", "patch": "@@ -77,9 +77,9 @@ This option is supported on GNU/Linux targets, most other Unix derivatives,\n and also on x86 Cygwin and MinGW targets.\n \n @opindex M\n-@item -M\n @cindex @command{make}\n @cindex dependencies, @command{make}\n+@item -M\n Instead of outputting the result of preprocessing, output a rule\n suitable for @command{make} describing the dependencies of the main\n source file.  The preprocessor outputs one @command{make} rule containing\n@@ -308,15 +308,15 @@ location independent.  This option also affects\n @option{-ffile-prefix-map}.\n \n @opindex fexec-charset\n-@item -fexec-charset=@var{charset}\n @cindex character set, execution\n+@item -fexec-charset=@var{charset}\n Set the execution character set, used for string and character\n constants.  The default is UTF-8.  @var{charset} can be any encoding\n supported by the system's @code{iconv} library routine.\n \n @opindex fwide-exec-charset\n-@item -fwide-exec-charset=@var{charset}\n @cindex character set, wide execution\n+@item -fwide-exec-charset=@var{charset}\n Set the wide execution character set, used for wide string and\n character constants.  The default is one of UTF-32BE, UTF-32LE, UTF-16BE,\n or UTF-16LE, whichever corresponds to the width of @code{wchar_t} and the\n@@ -326,8 +326,8 @@ by the system's @code{iconv} library routine; however, you will have\n problems with encodings that do not fit exactly in @code{wchar_t}.\n \n @opindex finput-charset\n-@item -finput-charset=@var{charset}\n @cindex character set, input\n+@item -finput-charset=@var{charset}\n Set the input character set, used for translation from the character\n set of the input file to the source character set used by GCC@.  If the\n locale does not specify, or GCC cannot get this information from the"}, {"sha": "0e11e43536c818243b777118efe03bb1aa413cb0", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 449, "deletions": 449, "changes": 898, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=f33d7a88d069d169bbe76da8e5c52de17f68ca05"}, {"sha": "ad1270f9025ddd3a1c91c775e49c1e5c58c5a24b", "filename": "gcc/doc/generic.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Fdoc%2Fgeneric.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Fdoc%2Fgeneric.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgeneric.texi?ref=f33d7a88d069d169bbe76da8e5c52de17f68ca05", "patch": "@@ -1743,9 +1743,9 @@ represented.  Unrepresented fields will be cleared (zeroed), unless the\n CONSTRUCTOR_NO_CLEARING flag is set, in which case their value becomes\n undefined.\n \n-@item COMPOUND_LITERAL_EXPR\n @findex COMPOUND_LITERAL_EXPR_DECL_EXPR\n @findex COMPOUND_LITERAL_EXPR_DECL\n+@item COMPOUND_LITERAL_EXPR\n These nodes represent ISO C99 compound literals.  The\n @code{COMPOUND_LITERAL_EXPR_DECL_EXPR} is a @code{DECL_EXPR}\n containing an anonymous @code{VAR_DECL} for"}, {"sha": "47ea9ea462b8f0e885b0472e414b778ad3088e7f", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=f33d7a88d069d169bbe76da8e5c52de17f68ca05", "patch": "@@ -2618,18 +2618,18 @@ script provides three variables for this:\n \n @table @code\n \n-@item build_configargs\n @cindex @code{build_configargs}\n+@item build_configargs\n The contents of this variable is passed to all build @command{configure}\n scripts.\n \n-@item host_configargs\n @cindex @code{host_configargs}\n+@item host_configargs\n The contents of this variable is passed to all host @command{configure}\n scripts.\n \n-@item target_configargs\n @cindex @code{target_configargs}\n+@item target_configargs\n The contents of this variable is passed to all target @command{configure}\n scripts.\n "}, {"sha": "e1f897e8a84c7fd3d9a9efe55a84d69a5f547012", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 75, "deletions": 75, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=f33d7a88d069d169bbe76da8e5c52de17f68ca05", "patch": "@@ -2529,9 +2529,9 @@ ISO C2X.\n \n @opindex fno-builtin\n @opindex fbuiltin\n+@cindex built-in functions\n @item -fno-builtin\n @itemx -fno-builtin-@var{function}\n-@cindex built-in functions\n Don't recognize built-in functions that do not begin with\n @samp{__builtin_} as prefix.  @xref{Other Builtins,,Other built-in\n functions provided by GCC}, for details of the functions affected,\n@@ -2575,8 +2575,8 @@ third arguments.  The value of such an expression is void.  This option\n is not supported for C++.\n \n @opindex ffreestanding\n-@item -ffreestanding\n @cindex hosted environment\n+@item -ffreestanding\n \n Assert that compilation targets a freestanding environment.  This\n implies @option{-fno-builtin}.  A freestanding environment\n@@ -2631,8 +2631,8 @@ in effect for @code{inline} functions.  @xref{Common Predefined\n Macros,,,cpp,The C Preprocessor}.\n \n @opindex fhosted\n-@item -fhosted\n @cindex hosted environment\n+@item -fhosted\n \n Assert that compilation targets a hosted environment.  This implies\n @option{-fbuiltin}.  A hosted environment is one in which the\n@@ -2668,12 +2668,12 @@ Note that this option is off for all targets except for x86\n targets using ms-abi.\n \n @opindex foffload\n-@item -foffload=disable\n-@itemx -foffload=default\n-@itemx -foffload=@var{target-list}\n @cindex Offloading targets\n @cindex OpenACC offloading targets\n @cindex OpenMP offloading targets\n+@item -foffload=disable\n+@itemx -foffload=default\n+@itemx -foffload=@var{target-list}\n Specify for which OpenMP and OpenACC offload targets code should be generated.\n The default behavior, equivalent to @option{-foffload=default}, is to generate\n code for all supported offload targets.  The @option{-foffload=disable} form\n@@ -2686,11 +2686,11 @@ run the compiler with @option{-v} to show the list of configured offload targets\n under @code{OFFLOAD_TARGET_NAMES}.\n \n @opindex foffload-options\n-@item -foffload-options=@var{options}\n-@itemx -foffload-options=@var{target-triplet-list}=@var{options}\n @cindex Offloading options\n @cindex OpenACC offloading options\n @cindex OpenMP offloading options\n+@item -foffload-options=@var{options}\n+@itemx -foffload-options=@var{target-triplet-list}=@var{options}\n \n With @option{-foffload-options=@var{options}}, GCC passes the specified\n @var{options} to the compilers for all enabled offloading targets.  You can\n@@ -2708,8 +2708,8 @@ Typical command lines are\n @end smallexample\n \n @opindex fopenacc\n-@item -fopenacc\n @cindex OpenACC accelerator programming\n+@item -fopenacc\n Enable handling of OpenACC directives @code{#pragma acc} in C/C++ and\n @code{!$acc} in Fortran.  When @option{-fopenacc} is specified, the\n compiler generates accelerated code according to the OpenACC Application\n@@ -2718,16 +2718,16 @@ implies @option{-pthread}, and thus is only supported on targets that\n have support for @option{-pthread}.\n \n @opindex fopenacc-dim\n-@item -fopenacc-dim=@var{geom}\n @cindex OpenACC accelerator programming\n+@item -fopenacc-dim=@var{geom}\n Specify default compute dimensions for parallel offload regions that do\n not explicitly specify.  The @var{geom} value is a triple of\n ':'-separated sizes, in order 'gang', 'worker' and, 'vector'.  A size\n can be omitted, to use a target-specific default value.\n \n @opindex fopenmp\n-@item -fopenmp\n @cindex OpenMP parallel\n+@item -fopenmp\n Enable handling of OpenMP directives @code{#pragma omp} in C/C++,\n @code{[[omp::directive(...)]]} and @code{[[omp::sequence(...)]]} in C++ and\n @code{!$omp} in Fortran.  When @option{-fopenmp} is specified, the\n@@ -2738,9 +2738,9 @@ have support for @option{-pthread}. @option{-fopenmp} implies\n @option{-fopenmp-simd}.\n \n @opindex fopenmp-simd\n-@item -fopenmp-simd\n @cindex OpenMP SIMD\n @cindex SIMD\n+@item -fopenmp-simd\n Enable handling of OpenMP's @code{simd}, @code{declare simd},\n @code{declare reduction}, @code{assume}, @code{ordered}, @code{scan},\n @code{loop} directives and combined or composite directives with\n@@ -2749,9 +2749,9 @@ Enable handling of OpenMP's @code{simd}, @code{declare simd},\n and @code{!$omp} in Fortran.  Other OpenMP directives are ignored.\n \n @opindex fopenmp-target-simd-clone\n+@cindex OpenMP target SIMD clone\n @item -fopenmp-target-simd-clone\n @item -fopenmp-target-simd-clone=@var{device-type}\n-@cindex OpenMP target SIMD clone\n In addition to generating SIMD clones for functions marked with the\n @code{declare simd} directive, GCC also generates clones\n for functions marked with the OpenMP @code{declare target} directive\n@@ -3353,14 +3353,14 @@ of a named module remain implicitly inline, regardless.)\n @item -fno-module-lazy\n Disable lazy module importing and module mapper creation.\n \n+@vindex CXX_MODULE_MAPPER @r{environment variable}\n+@opindex fmodule-mapper\n @item -fmodule-mapper=@r{[}@var{hostname}@r{]}:@var{port}@r{[}?@var{ident}@r{]}\n @itemx -fmodule-mapper=|@var{program}@r{[}?@var{ident}@r{]} @var{args...}\n @itemx -fmodule-mapper==@var{socket}@r{[}?@var{ident}@r{]}\n @itemx -fmodule-mapper=<>@r{[}@var{inout}@r{]}@r{[}?@var{ident}@r{]}\n @itemx -fmodule-mapper=<@var{in}>@var{out}@r{[}?@var{ident}@r{]}\n @itemx -fmodule-mapper=@var{file}@r{[}?@var{ident}@r{]}\n-@vindex CXX_MODULE_MAPPER @r{environment variable}\n-@opindex fmodule-mapper\n An oracle to query for module name to filename mappings.  If\n unspecified the @env{CXX_MODULE_MAPPER} environment variable is used,\n and if that is unset, an in-process default is provided.\n@@ -4025,9 +4025,9 @@ Enabled by default with @option{-std=c++17}.\n \n @opindex Wreorder\n @opindex Wno-reorder\n-@item -Wreorder @r{(C++ and Objective-C++ only)}\n @cindex reordering, warning\n @cindex warning for reordering of member initializers\n+@item -Wreorder @r{(C++ and Objective-C++ only)}\n Warn when the order of member initializers given in the code does not\n match the order in which they must be executed.  For instance:\n \n@@ -4256,10 +4256,10 @@ less vulnerable to unintended effects and much easier to search for.\n \n @opindex Woverloaded-virtual\n @opindex Wno-overloaded-virtual\n-@item -Woverloaded-virtual @r{(C++ and Objective-C++ only)}\n-@itemx -Woverloaded-virtual=@var{n}\n @cindex overloaded virtual function, warning\n @cindex warning for overloaded virtual function\n+@item -Woverloaded-virtual @r{(C++ and Objective-C++ only)}\n+@itemx -Woverloaded-virtual=@var{n}\n Warn when a function declaration hides virtual functions from a\n base class.  For example, in:\n \n@@ -5067,10 +5067,10 @@ prefix) for physical lines that result from the process of breaking\n a message which is too long to fit on a single line.\n \n @opindex fdiagnostics-color\n-@item -fdiagnostics-color[=@var{WHEN}]\n-@itemx -fno-diagnostics-color\n @cindex highlight, color\n @vindex GCC_COLORS @r{environment variable}\n+@item -fdiagnostics-color[=@var{WHEN}]\n+@itemx -fno-diagnostics-color\n Use color in diagnostics.  @var{WHEN} is @samp{never}, @samp{always},\n or @samp{auto}.  The default depends on how the compiler has been configured,\n it can be any of the above @var{WHEN} options or also @samp{never}\n@@ -5120,86 +5120,86 @@ Setting @env{GCC_COLORS} to the empty string disables colors.\n Supported capabilities are as follows.\n \n @table @code\n-@item error=\n @vindex error GCC_COLORS @r{capability}\n+@item error=\n SGR substring for error: markers.\n \n-@item warning=\n @vindex warning GCC_COLORS @r{capability}\n+@item warning=\n SGR substring for warning: markers.\n \n-@item note=\n @vindex note GCC_COLORS @r{capability}\n+@item note=\n SGR substring for note: markers.\n \n-@item path=\n @vindex path GCC_COLORS @r{capability}\n+@item path=\n SGR substring for colorizing paths of control-flow events as printed\n via @option{-fdiagnostics-path-format=}, such as the identifiers of\n individual events and lines indicating interprocedural calls and returns.\n \n-@item range1=\n @vindex range1 GCC_COLORS @r{capability}\n+@item range1=\n SGR substring for first additional range.\n \n-@item range2=\n @vindex range2 GCC_COLORS @r{capability}\n+@item range2=\n SGR substring for second additional range.\n \n-@item locus=\n @vindex locus GCC_COLORS @r{capability}\n+@item locus=\n SGR substring for location information, @samp{file:line} or\n @samp{file:line:column} etc.\n \n-@item quote=\n @vindex quote GCC_COLORS @r{capability}\n+@item quote=\n SGR substring for information printed within quotes.\n \n-@item fnname=\n @vindex fnname GCC_COLORS @r{capability}\n+@item fnname=\n SGR substring for names of C++ functions.\n \n-@item targs=\n @vindex targs GCC_COLORS @r{capability}\n+@item targs=\n SGR substring for C++ function template parameter bindings.\n \n-@item fixit-insert=\n @vindex fixit-insert GCC_COLORS @r{capability}\n+@item fixit-insert=\n SGR substring for fix-it hints suggesting text to\n be inserted or replaced.\n \n-@item fixit-delete=\n @vindex fixit-delete GCC_COLORS @r{capability}\n+@item fixit-delete=\n SGR substring for fix-it hints suggesting text to\n be deleted.\n \n-@item diff-filename=\n @vindex diff-filename GCC_COLORS @r{capability}\n+@item diff-filename=\n SGR substring for filename headers within generated patches.\n \n-@item diff-hunk=\n @vindex diff-hunk GCC_COLORS @r{capability}\n+@item diff-hunk=\n SGR substring for the starts of hunks within generated patches.\n \n-@item diff-delete=\n @vindex diff-delete GCC_COLORS @r{capability}\n+@item diff-delete=\n SGR substring for deleted lines within generated patches.\n \n-@item diff-insert=\n @vindex diff-insert GCC_COLORS @r{capability}\n+@item diff-insert=\n SGR substring for inserted lines within generated patches.\n \n-@item type-diff=\n @vindex type-diff GCC_COLORS @r{capability}\n+@item type-diff=\n SGR substring for highlighting mismatching types within template\n arguments in the C++ frontend.\n @end table\n \n @opindex fdiagnostics-urls\n-@item -fdiagnostics-urls[=@var{WHEN}]\n @cindex urls\n @vindex GCC_URLS @r{environment variable}\n @vindex TERM_URLS @r{environment variable}\n+@item -fdiagnostics-urls[=@var{WHEN}]\n Use escape sequences to embed URLs in diagnostics.  For example, when\n @option{-fdiagnostics-show-option} emits text showing the command-line\n option controlling a diagnostic, embed a URL for documentation of that\n@@ -7564,10 +7564,10 @@ This warning is enabled by @option{-Wall} or @option{-Wextra}.\n \n @opindex Wunknown-pragmas\n @opindex Wno-unknown-pragmas\n-@item -Wunknown-pragmas\n @cindex warning for unknown pragmas\n @cindex unknown pragmas, warning\n @cindex pragmas, warning of unknown\n+@item -Wunknown-pragmas\n Warn when a @code{#pragma} directive is encountered that is not understood by \n GCC@.  If this command-line option is used, warnings are even issued\n for unknown pragmas in system header files.  This is not the case if\n@@ -8365,9 +8365,9 @@ obtaining infinities and NaNs.\n \n @opindex Wsystem-headers\n @opindex Wno-system-headers\n-@item -Wsystem-headers\n @cindex warnings from system headers\n @cindex system headers, warnings from\n+@item -Wsystem-headers\n Print warning messages for constructs found in system header files.\n Warnings from system headers are normally suppressed, on the assumption\n that they usually do not indicate real problems and would only make the\n@@ -8939,15 +8939,15 @@ When compiling C++, warn about the deprecated conversion from string\n literals to @code{char *}.  This warning is enabled by default for C++\n programs.\n \n-@item -Wclobbered\n @opindex Wclobbered\n @opindex Wno-clobbered\n+@item -Wclobbered\n Warn for variables that might be changed by @code{longjmp} or\n @code{vfork}.  This warning is also enabled by @option{-Wextra}.\n \n-@item -Wno-complain-wrong-lang\n @opindex Wcomplain-wrong-lang\n @opindex Wno-complain-wrong-lang\n+@item -Wno-complain-wrong-lang\n By default, language front ends complain when a command-line option is\n valid, but not applicable to that front end.\n This may be disabled with @option{-Wno-complain-wrong-lang},\n@@ -8964,9 +8964,9 @@ The latter front end diagnoses\n @samp{f951: Warning: command-line option '-fno-rtti' is valid for C++/D/ObjC++ but not for Fortran},\n which may be disabled with @option{-Wno-complain-wrong-lang}.\n \n-@item -Wconversion\n @opindex Wconversion\n @opindex Wno-conversion\n+@item -Wconversion\n Warn for implicit conversions that may alter a value. This includes\n conversions between real and integer, like @code{abs (x)} when\n @code{x} is @code{double}; conversions between signed and unsigned,\n@@ -9155,10 +9155,10 @@ can be disabled with the @option{-Wno-jump-misses-init} option.\n \n @opindex Wsign-compare\n @opindex Wno-sign-compare\n-@item -Wsign-compare\n @cindex warning for comparison of signed and unsigned values\n @cindex comparison of signed and unsigned values, warning\n @cindex signed and unsigned values, comparison warning\n+@item -Wsign-compare\n Warn when a comparison between signed and unsigned values could produce\n an incorrect result when the signed value is converted to unsigned.\n In C++, this warning is also enabled by @option{-Wall}.  In C, it is\n@@ -9586,10 +9586,10 @@ implementation-defined values, and should not be used in portable code.\n @opindex Wnormalized=\n @opindex Wnormalized\n @opindex Wno-normalized\n-@item -Wnormalized=@r{[}none@r{|}id@r{|}nfc@r{|}nfkc@r{]}\n @cindex NFC\n @cindex NFKC\n @cindex character set, input normalization\n+@item -Wnormalized=@r{[}none@r{|}id@r{|}nfc@r{|}nfkc@r{]}\n In ISO C and ISO C++, two identifiers are different if they are\n different sequences of characters.  However, sometimes when characters\n outside the basic ASCII character set are used, you can have two\n@@ -9667,8 +9667,8 @@ Enabled by default.\n \n @opindex Wopenacc-parallelism\n @opindex Wno-openacc-parallelism\n-@item -Wopenacc-parallelism\n @cindex OpenACC accelerator programming\n+@item -Wopenacc-parallelism\n Warn about potentially suboptimal choices related to OpenACC parallelism.\n \n @opindex Wopenmp-simd\n@@ -11033,9 +11033,9 @@ and which aren't relevant to leak analysis.\n With @option{-fno-analyzer-state-purge} this purging of state can\n be suppressed, for debugging state-handling issues.\n \n-@item -fno-analyzer-suppress-followups\n @opindex fanalyzer-suppress-followups\n @opindex fno-analyzer-suppress-followups\n+@item -fno-analyzer-suppress-followups\n This option is intended for analyzer developers.\n \n By default the analyzer will stop exploring an execution path after\n@@ -16638,13 +16638,13 @@ program may yield backtraces with different addresses due to ASLR (Address\n Space Layout Randomization), it may be desirable to turn ASLR off.  On Linux,\n this can be achieved with @samp{setarch `uname -m` -R ./prog}.\n \n-@item -fsanitize=kernel-address\n @opindex fsanitize=kernel-address\n+@item -fsanitize=kernel-address\n Enable AddressSanitizer for Linux kernel.\n See @uref{https://github.com/google/kernel-sanitizers} for more details.\n \n-@item -fsanitize=hwaddress\n @opindex fsanitize=hwaddress\n+@item -fsanitize=hwaddress\n Enable Hardware-assisted AddressSanitizer, which uses a hardware ability to\n ignore the top byte of a pointer to allow the detection of memory errors with\n a low memory overhead.\n@@ -17874,8 +17874,8 @@ option @option{-Xlinker -z -Xlinker defs}).  Only a few systems support\n this option.\n \n @opindex T\n-@item -T @var{script}\n @cindex linker script\n+@item -T @var{script}\n Use @var{script} as the linker script.  This option is supported by most\n systems using the GNU linker.  On some targets, such as bare-board\n targets without an operating system, the @option{-T} option may be required\n@@ -18272,8 +18272,8 @@ Use it to conform to a non-default application binary interface.\n \n @opindex fcommon\n @opindex fno-common\n-@item -fcommon\n @cindex tentative definitions\n+@item -fcommon\n In C code, this option controls the placement of global variables\n defined without an initializer, known as @dfn{tentative definitions}\n in the C standard.  Tentative definitions are distinct from declarations\n@@ -18413,9 +18413,9 @@ See also @option{-grecord-gcc-switches} for another\n way of storing compiler options into the object file.\n \n @opindex fpic\n-@item -fpic\n @cindex global offset table\n @cindex PIC\n+@item -fpic\n Generate position-independent code (PIC) suitable for use in a shared\n library, if supported for the target machine.  Such code accesses all\n constant addresses through a global offset table (GOT)@.  The dynamic\n@@ -25864,8 +25864,8 @@ Put small global and static data in the small data area, and generate\n special instructions to reference them.\n \n @opindex G\n-@item -G @var{num}\n @cindex smaller data references\n+@item -G @var{num}\n Put global and static objects less than or equal to @var{num} bytes\n into the small data or BSS sections instead of the normal data or BSS\n sections.  The default value of @var{num} is 8.\n@@ -28125,8 +28125,8 @@ These are the options defined for the Altera Nios II processor.\n @table @gcctabopt\n \n @opindex G\n-@item -G @var{num}\n @cindex smaller data references\n+@item -G @var{num}\n Put global and static objects less than or equal to @var{num} bytes\n into the small data or BSS sections instead of the normal data or BSS\n sections.  The default value of @var{num} is 8.\n@@ -30030,9 +30030,9 @@ end of the inline compare a call to @code{strcmp} or @code{strncmp} will\n take care of the rest of the comparison. The default is 64 bytes.\n \n @opindex G\n-@item -G @var{num}\n @cindex smaller data references (PowerPC)\n @cindex .sdata/.sdata2 references (PowerPC)\n+@item -G @var{num}\n On embedded PowerPC systems, put global and static items less than or\n equal to @var{num} bytes into the small data or BSS sections instead of\n the normal data or BSS section.  By default, @var{num} is 8.  The\n@@ -34389,18 +34389,18 @@ Issues a @var{command} to the spec file processor.  The commands that can\n appear here are:\n \n @table @code\n-@item %include <@var{file}>\n @cindex @code{%include}\n+@item %include <@var{file}>\n Search for @var{file} and insert its text at the current point in the\n specs file.\n \n-@item %include_noerr <@var{file}>\n @cindex @code{%include_noerr}\n+@item %include_noerr <@var{file}>\n Just like @samp{%include}, but do not generate an error message if the include\n file cannot be found.\n \n-@item %rename @var{old_name} @var{new_name}\n @cindex @code{%rename}\n+@item %rename @var{old_name} @var{new_name}\n Rename the spec string @var{old_name} to @var{new_name}.\n \n @end table\n@@ -35078,6 +35078,15 @@ in turn take precedence over those specified by the configuration of GCC@.\n GNU Compiler Collection (GCC) Internals}.\n \n @table @env\n+@vindex LANG\n+@vindex LC_CTYPE\n+@c @vindex LC_COLLATE\n+@vindex LC_MESSAGES\n+@c @vindex LC_MONETARY\n+@c @vindex LC_NUMERIC\n+@c @vindex LC_TIME\n+@vindex LC_ALL\n+@cindex locale\n @item LANG\n @itemx LC_CTYPE\n @c @itemx LC_COLLATE\n@@ -35086,15 +35095,6 @@ GNU Compiler Collection (GCC) Internals}.\n @c @itemx LC_NUMERIC\n @c @itemx LC_TIME\n @itemx LC_ALL\n-@findex LANG\n-@findex LC_CTYPE\n-@c @findex LC_COLLATE\n-@findex LC_MESSAGES\n-@c @findex LC_MONETARY\n-@c @findex LC_NUMERIC\n-@c @findex LC_TIME\n-@findex LC_ALL\n-@cindex locale\n These environment variables control the way that GCC uses\n localization information which allows GCC to work with different\n national conventions.  GCC inspects the locale categories\n@@ -35118,22 +35118,22 @@ and @env{LC_MESSAGES} default to the value of the @env{LANG}\n environment variable.  If none of these variables are set, GCC\n defaults to traditional C English behavior.\n \n+@vindex TMPDIR\n @item TMPDIR\n-@findex TMPDIR\n If @env{TMPDIR} is set, it specifies the directory to use for temporary\n files.  GCC uses temporary files to hold the output of one stage of\n compilation which is to be used as input to the next stage: for example,\n the output of the preprocessor, which is the input to the compiler\n proper.\n \n+@vindex GCC_COMPARE_DEBUG\n @item GCC_COMPARE_DEBUG\n-@findex GCC_COMPARE_DEBUG\n Setting @env{GCC_COMPARE_DEBUG} is nearly equivalent to passing\n @option{-fcompare-debug} to the compiler driver.  See the documentation\n of this option for more details.\n \n+@vindex GCC_EXEC_PREFIX\n @item GCC_EXEC_PREFIX\n-@findex GCC_EXEC_PREFIX\n If @env{GCC_EXEC_PREFIX} is set, it specifies a prefix to use in the\n names of the subprograms executed by the compiler.  No slash is added\n when this prefix is combined with the name of a subprogram, but you can\n@@ -35167,15 +35167,15 @@ If a standard directory begins with the configured\n @var{prefix} then the value of @var{prefix} is replaced by\n @env{GCC_EXEC_PREFIX} when looking for header files.\n \n+@vindex COMPILER_PATH\n @item COMPILER_PATH\n-@findex COMPILER_PATH\n The value of @env{COMPILER_PATH} is a colon-separated list of\n directories, much like @env{PATH}.  GCC tries the directories thus\n specified when searching for subprograms, if it cannot find the\n subprograms using @env{GCC_EXEC_PREFIX}.\n \n+@vindex LIBRARY_PATH\n @item LIBRARY_PATH\n-@findex LIBRARY_PATH\n The value of @env{LIBRARY_PATH} is a colon-separated list of\n directories, much like @env{PATH}.  When configured as a native compiler,\n GCC tries the directories thus specified when searching for special\n@@ -35184,9 +35184,9 @@ using GCC also uses these directories when searching for ordinary\n libraries for the @option{-l} option (but directories specified with\n @option{-L} come first).\n \n-@item LANG\n-@findex LANG\n+@vindex LANG\n @cindex locale definition\n+@item LANG\n This variable is used to pass locale information to the compiler.  One way in\n which this information is used is to determine the character set to be used\n when character literals, string literals and comments are parsed in C and C++.\n@@ -35206,8 +35206,8 @@ If @env{LANG} is not defined, or if it has some other value, then the\n compiler uses @code{mblen} and @code{mbtowc} as defined by the default locale to\n recognize and translate multibyte characters.\n \n+@vindex GCC_EXTRA_DIAGNOSTIC_OUTPUT\n @item GCC_EXTRA_DIAGNOSTIC_OUTPUT\n-@findex GCC_EXTRA_DIAGNOSTIC_OUTPUT\n If @env{GCC_EXTRA_DIAGNOSTIC_OUTPUT} is set to one of the following values,\n then additional text will be emitted to stderr when fix-it hints are\n emitted.  @option{-fdiagnostics-parseable-fixits} and"}, {"sha": "8e3113599fdcc6898bc6b1ceac9f89e7767ba371", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=f33d7a88d069d169bbe76da8e5c52de17f68ca05", "patch": "@@ -156,9 +156,9 @@ operands of the instruction.\n If the vector has multiple elements, the RTL template is treated as a\n @code{parallel} expression.\n \n-@item\n @cindex pattern conditions\n @cindex conditions, in patterns\n+@item\n The condition: This is a string which contains a C expression.  When the\n compiler attempts to match RTL against a pattern, the condition is\n evaluated.  If the condition evaluates to @code{true}, the match is\n@@ -2193,8 +2193,7 @@ An integer constant with exactly a single bit set.\n An integer constant with all bits set except exactly one.\n \n @item H\n-\n-@item Q\n+@itemx Q\n Any SYMBOL_REF.\n @end table\n \n@@ -5291,10 +5290,10 @@ operand 0 is the scalar result, with mode equal to the mode of the elements of\n the input vector.\n \n @cindex @code{reduc_and_scal_@var{m}} instruction pattern\n-@item @samp{reduc_and_scal_@var{m}}\n @cindex @code{reduc_ior_scal_@var{m}} instruction pattern\n-@itemx @samp{reduc_ior_scal_@var{m}}\n @cindex @code{reduc_xor_scal_@var{m}} instruction pattern\n+@item @samp{reduc_and_scal_@var{m}}\n+@itemx @samp{reduc_ior_scal_@var{m}}\n @itemx @samp{reduc_xor_scal_@var{m}}\n Compute the bitwise @code{AND}/@code{IOR}/@code{XOR} reduction of the elements\n of a vector of mode @var{m}.  Operand 1 is the vector input and operand 0\n@@ -5382,8 +5381,8 @@ usdot<signed op0, unsigned op1, signed op2, signed op3> ==\n @end smallexample\n \n @cindex @code{ssad@var{m}} instruction pattern\n-@item @samp{ssad@var{m}}\n @cindex @code{usad@var{m}} instruction pattern\n+@item @samp{ssad@var{m}}\n @item @samp{usad@var{m}}\n Compute the sum of absolute differences of two signed/unsigned elements.\n Operand 1 and operand 2 are of the same mode. Their absolute difference, which\n@@ -5392,17 +5391,17 @@ equal or wider than the mode of the absolute difference. The result is placed\n in operand 0, which is of the same mode as operand 3.\n \n @cindex @code{widen_ssum@var{m3}} instruction pattern\n-@item @samp{widen_ssum@var{m3}}\n @cindex @code{widen_usum@var{m3}} instruction pattern\n+@item @samp{widen_ssum@var{m3}}\n @itemx @samp{widen_usum@var{m3}}\n Operands 0 and 2 are of the same mode, which is wider than the mode of\n operand 1. Add operand 1 to operand 2 and place the widened result in\n operand 0. (This is used express accumulation of elements into an accumulator\n of a wider mode.)\n \n @cindex @code{smulhs@var{m3}} instruction pattern\n-@item @samp{smulhs@var{m3}}\n @cindex @code{umulhs@var{m3}} instruction pattern\n+@item @samp{smulhs@var{m3}}\n @itemx @samp{umulhs@var{m3}}\n Signed/unsigned multiply high with scale. This is equivalent to the C code:\n @smallexample\n@@ -5414,8 +5413,8 @@ where the sign of @samp{narrow} determines whether this is a signed\n or unsigned operation, and @var{N} is the size of @samp{wide} in bits.\n \n @cindex @code{smulhrs@var{m3}} instruction pattern\n-@item @samp{smulhrs@var{m3}}\n @cindex @code{umulhrs@var{m3}} instruction pattern\n+@item @samp{smulhrs@var{m3}}\n @itemx @samp{umulhrs@var{m3}}\n Signed/unsigned multiply high with round and scale. This is\n equivalent to the C code:\n@@ -5428,8 +5427,8 @@ where the sign of @samp{narrow} determines whether this is a signed\n or unsigned operation, and @var{N} is the size of @samp{wide} in bits.\n \n @cindex @code{sdiv_pow2@var{m3}} instruction pattern\n-@item @samp{sdiv_pow2@var{m3}}\n @cindex @code{sdiv_pow2@var{m3}} instruction pattern\n+@item @samp{sdiv_pow2@var{m3}}\n @itemx @samp{sdiv_pow2@var{m3}}\n Signed division by power-of-2 immediate. Equivalent to:\n @smallexample\n@@ -8213,12 +8212,12 @@ can itself be a @code{plus}.  @code{and}, @code{ior}, @code{xor},\n @code{umax} are associative when applied to integers, and sometimes to\n floating-point.\n \n-@item\n @cindex @code{neg}, canonicalization of\n @cindex @code{not}, canonicalization of\n @cindex @code{mult}, canonicalization of\n @cindex @code{plus}, canonicalization of\n @cindex @code{minus}, canonicalization of\n+@item\n For these operators, if only one operand is a @code{neg}, @code{not},\n @code{mult}, @code{plus}, or @code{minus} expression, it will be the\n first operand.\n@@ -11088,8 +11087,8 @@ values in @file{sync.md} rather than in the main @file{.md} file.\n Some enumeration names have special significance to GCC:\n \n @table @code\n-@item unspecv\n @findex unspec_volatile\n+@item unspecv\n If an enumeration called @code{unspecv} is defined, GCC will use it\n when printing out @code{unspec_volatile} expressions.  For example:\n \n@@ -11105,8 +11104,8 @@ causes GCC to print @samp{(unspec_volatile @dots{} 0)} as:\n (unspec_volatile ... UNSPECV_BLOCKAGE)\n @end smallexample\n \n-@item unspec\n @findex unspec\n+@item unspec\n If an enumeration called @code{unspec} is defined, GCC will use\n it when printing out @code{unspec} expressions.  GCC will also use\n it when printing out @code{unspec_volatile} expressions unless an"}, {"sha": "1de24943c2e4f264ba48a44195705a9198d94b5f", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=f33d7a88d069d169bbe76da8e5c52de17f68ca05", "patch": "@@ -1028,8 +1028,8 @@ the symbol has already been written.\n \n @findex volatil\n @cindex @samp{/v} in RTL dump\n-@item volatil\n @cindex volatile memory references\n+@item volatil\n In a @code{mem}, @code{asm_operands}, or @code{asm_input}\n expression, it is 1 if the memory\n reference is volatile.  Volatile memory references may not be deleted,\n@@ -2187,14 +2187,14 @@ laid out in memory order.  The memory order of bytes is defined by\n two target macros, @code{WORDS_BIG_ENDIAN} and @code{BYTES_BIG_ENDIAN}:\n \n @itemize\n-@item\n @cindex @code{WORDS_BIG_ENDIAN}, effect on @code{subreg}\n+@item\n @code{WORDS_BIG_ENDIAN}, if set to 1, says that byte number zero is\n part of the most significant word; otherwise, it is part of the least\n significant word.\n \n-@item\n @cindex @code{BYTES_BIG_ENDIAN}, effect on @code{subreg}\n+@item\n @code{BYTES_BIG_ENDIAN}, if set to 1, says that byte number zero is\n the most significant byte within a word; otherwise, it is the least\n significant byte within a word.\n@@ -2336,8 +2336,8 @@ that both performs the arithmetic and sets the condition code register.\n For examples, search for @samp{addcc} and @samp{andcc} in @file{sparc.md}.\n \n @findex pc\n-@item (pc)\n @cindex program counter\n+@item (pc)\n This represents the machine's program counter.  It has no operands and\n may not have a machine mode.  @code{(pc)} may be validly used only in\n certain specific contexts in jump instructions."}, {"sha": "09eab4131ceca7f48f40664463afe68b63d4f440", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=f33d7a88d069d169bbe76da8e5c52de17f68ca05", "patch": "@@ -4970,9 +4970,9 @@ function's arguments that this function should pop is available in\n @end deftypefn\n \n @itemize @bullet\n-@item\n @findex pretend_args_size\n @findex crtl->args.pretend_args_size\n+@item\n A region of @code{crtl->args.pretend_args_size} bytes of\n uninitialized space just underneath the first argument arriving on the\n stack.  (This may not be at the very start of the allocated stack region\n@@ -4997,8 +4997,8 @@ boundary, to contain the local variables of the function.  On some machines,\n this region and the save area may occur in the opposite order, with the\n save area closer to the top of the stack.\n \n-@item\n @cindex @code{ACCUMULATE_OUTGOING_ARGS} and stack frames\n+@item\n Optionally, when @code{ACCUMULATE_OUTGOING_ARGS} is defined, a region of\n @code{crtl->outgoing_args_size} bytes to be used for outgoing\n argument lists of the function.  @xref{Stack Arguments}."}, {"sha": "83aa3e732b16ad9a553de767686c68cab6a7d678", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=f33d7a88d069d169bbe76da8e5c52de17f68ca05", "patch": "@@ -3534,9 +3534,9 @@ This section describes the macros that output function entry\n @hook TARGET_ASM_FUNCTION_EPILOGUE\n \n @itemize @bullet\n-@item\n @findex pretend_args_size\n @findex crtl->args.pretend_args_size\n+@item\n A region of @code{crtl->args.pretend_args_size} bytes of\n uninitialized space just underneath the first argument arriving on the\n stack.  (This may not be at the very start of the allocated stack region\n@@ -3561,8 +3561,8 @@ boundary, to contain the local variables of the function.  On some machines,\n this region and the save area may occur in the opposite order, with the\n save area closer to the top of the stack.\n \n-@item\n @cindex @code{ACCUMULATE_OUTGOING_ARGS} and stack frames\n+@item\n Optionally, when @code{ACCUMULATE_OUTGOING_ARGS} is defined, a region of\n @code{crtl->outgoing_args_size} bytes to be used for outgoing\n argument lists of the function.  @xref{Stack Arguments}."}, {"sha": "155be210992568e88562afe8664dd07dfb3b947f", "filename": "gcc/doc/trouble.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Fdoc%2Ftrouble.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Fdoc%2Ftrouble.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftrouble.texi?ref=f33d7a88d069d169bbe76da8e5c52de17f68ca05", "patch": "@@ -198,8 +198,8 @@ with GCC does not produce the same floating-point formats that the\n assembler accepts.  If you have this problem, set the @env{LANG}\n environment variable to @samp{C} or @samp{En_US}.\n \n-@item\n @opindex fdollars-in-identifiers\n+@item\n Even if you specify @option{-fdollars-in-identifiers},\n you cannot successfully use @samp{$} in identifiers on the RS/6000 due\n to a restriction in the IBM assembler.  GAS supports these\n@@ -588,8 +588,8 @@ to update the corrected header files.  They can be updated using the\n @command{mkheaders} script installed in\n @file{@var{libexecdir}/gcc/@var{target}/@var{version}/install-tools/}.\n \n-@item\n @cindex floating point precision\n+@item\n On 68000 and x86 systems, for instance, you can get paradoxical results\n if you test the precise values of floating point numbers.  For example,\n you can find that a floating point value which is not a NaN is not equal\n@@ -953,8 +953,8 @@ where the return value should never be ignored, use the\n @code{warn_unused_result} function attribute (@pxref{Function\n Attributes}).\n \n-@item\n @opindex fshort-enums\n+@item\n Making @option{-fshort-enums} the default.\n \n This would cause storage layout to be incompatible with most other C\n@@ -1021,9 +1021,9 @@ to be considered in the future.\n explicitly in each bit-field whether it is signed or not.  In this way,\n they write programs which have the same meaning in both C dialects.)\n \n-@item\n @opindex ansi\n @opindex std\n+@item\n Undefining @code{__STDC__} when @option{-ansi} is not used.\n \n Currently, GCC defines @code{__STDC__} unconditionally.  This provides"}, {"sha": "5679e2f26500378c9bf469ade0494a7782320ce9", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 83, "deletions": 83, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=f33d7a88d069d169bbe76da8e5c52de17f68ca05", "patch": "@@ -214,11 +214,11 @@ accepted by the compiler:\n @table @gcctabopt\n @opindex @code{ffree-form}\n @opindex @code{ffixed-form}\n-@item -ffree-form\n-@itemx -ffixed-form\n @cindex options, Fortran dialect\n @cindex file format, free\n @cindex file format, fixed\n+@item -ffree-form\n+@itemx -ffixed-form\n Specify the layout used by the source file.  The free form layout\n was introduced in Fortran 90.  Fixed form was traditionally used in\n older Fortran programs.  When neither option is specified, the source\n@@ -326,19 +326,19 @@ Enable a blank format item at the end of a format specification i.e. nothing\n following the final comma.\n \n @opindex @code{fdollar-ok}\n-@item -fdollar-ok\n @cindex @code{$}\n @cindex symbol names\n @cindex character set\n+@item -fdollar-ok\n Allow @samp{$} as a valid non-first character in a symbol name. Symbols \n that start with @samp{$} are rejected since it is unclear which rules to\n apply to implicit typing as different vendors implement different rules.\n Using @samp{$} in @code{IMPLICIT} statements is also rejected.\n \n @opindex @code{backslash}\n-@item -fbackslash\n @cindex backslash\n @cindex escape characters\n+@item -fbackslash\n Change the interpretation of backslashes in string literals from a single\n backslash character to ``C-style'' escape characters. The following\n combinations are expanded @code{\\a}, @code{\\b}, @code{\\f}, @code{\\n},\n@@ -352,16 +352,16 @@ points. All other combinations of a character preceded by \\ are\n unexpanded.\n \n @opindex @code{fmodule-private}\n-@item -fmodule-private\n @cindex module entities\n @cindex private\n+@item -fmodule-private\n Set the default accessibility of module entities to @code{PRIVATE}.\n Use-associated entities will not be accessible unless they are explicitly\n declared as @code{PUBLIC}.\n \n @opindex @code{ffixed-line-length-}@var{n}\n-@item -ffixed-line-length-@var{n}\n @cindex file format, fixed\n+@item -ffixed-line-length-@var{n}\n Set column after which characters are ignored in typical fixed-form\n lines in the source file, and, unless @code{-fno-pad-source}, through which\n spaces are assumed (as if padded to that length) after the ends of short\n@@ -386,8 +386,8 @@ continued character constants never have implicit spaces appended\n to them to fill out the line.\n \n @opindex @code{ffree-line-length-}@var{n}\n-@item -ffree-line-length-@var{n}\n @cindex file format, free\n+@item -ffree-line-length-@var{n}\n Set column after which characters are ignored in typical free-form\n lines in the source file. The default value is 132.\n @var{n} may be @samp{none}, meaning that the entire line is meaningful.\n@@ -411,8 +411,8 @@ Enable the Cray pointer extension, which provides C-like pointer\n functionality.\n \n @opindex @code{fopenacc}\n-@item -fopenacc\n @cindex OpenACC\n+@item -fopenacc\n Enable the OpenACC extensions.  This includes OpenACC @code{!$acc}\n directives in free form and @code{c$acc}, @code{*$acc} and\n @code{!$acc} directives in fixed form, @code{!$} conditional\n@@ -421,8 +421,8 @@ compilation sentinels in free form and @code{c$}, @code{*$} and\n OpenACC runtime library to be linked in.\n \n @opindex @code{fopenmp}\n-@item -fopenmp\n @cindex OpenMP\n+@item -fopenmp\n Enable the OpenMP extensions.  This includes OpenMP @code{!$omp} directives\n in free form\n and @code{c$omp}, @code{*$omp} and @code{!$omp} directives in fixed form,\n@@ -511,13 +511,13 @@ representation of the translated Fortran code, produced by\n @opindex @code{freal-8-real-4}\n @opindex @code{freal-8-real-10}\n @opindex @code{freal-8-real-16}\n+@cindex options, real kind type promotion\n @item  -freal-4-real-8\n @itemx -freal-4-real-10\n @itemx -freal-4-real-16\n @itemx -freal-8-real-4\n @itemx -freal-8-real-10\n @itemx -freal-8-real-16\n-@cindex options, real kind type promotion\n Promote all @code{REAL(KIND=M)} entities to @code{REAL(KIND=N)} entities.\n If @code{REAL(KIND=N)} is unavailable, then an error will be issued.\n The @code{-freal-4-} flags also affect the default real kind and the\n@@ -614,10 +614,10 @@ The following options control preprocessing of Fortran code:\n @table @gcctabopt\n @opindex @code{cpp}\n @opindex @code{fpp}\n-@item -cpp\n-@itemx -nocpp\n @cindex preprocessor, enable\n @cindex preprocessor, disable\n+@item -cpp\n+@itemx -nocpp\n Enable preprocessing. The preprocessor is automatically invoked if\n the file extension is @file{.fpp}, @file{.FPP},  @file{.F}, @file{.FOR},\n @file{.FTN}, @file{.F90}, @file{.F95}, @file{.F03} or @file{.F08}. Use\n@@ -633,9 +633,9 @@ preprocessed output as well, so it might be advisable to use the\n options.\n \n @opindex @code{dM}\n-@item -dM\n @cindex preprocessor, debugging\n @cindex debugging, preprocessor\n+@item -dM\n Instead of the normal output, generate a list of @code{'#define'}\n directives for all the macros defined during the execution of the\n preprocessor, including predefined macros. This gives you a way\n@@ -647,39 +647,39 @@ Assuming you have no file @file{foo.f90}, the command\n will show all the predefined macros.\n \n @opindex @code{dD}\n-@item -dD\n @cindex preprocessor, debugging\n @cindex debugging, preprocessor\n+@item -dD\n Like @option{-dM} except in two respects: it does not include the\n predefined macros, and it outputs both the @code{#define} directives\n and the result of preprocessing. Both kinds of output go to the\n standard output file.\n \n @opindex @code{dN}\n-@item -dN\n @cindex preprocessor, debugging\n @cindex debugging, preprocessor\n+@item -dN\n Like @option{-dD}, but emit only the macro names, not their expansions.\n \n @opindex @code{dU}\n-@item -dU\n @cindex preprocessor, debugging\n @cindex debugging, preprocessor\n+@item -dU\n Like @option{dD} except that only macros that are expanded, or whose\n definedness is tested in preprocessor directives, are output; the \n output is delayed until the use or test of the macro; and @code{'#undef'}\n directives are also output for macros tested but undefined at the time.\n \n @opindex @code{dI}\n-@item -dI\n @cindex preprocessor, debugging\n @cindex debugging, preprocessor\n+@item -dI\n Output @code{'#include'} directives in addition to the result\n of preprocessing.\n \n @opindex @code{fworking-directory}\n-@item -fworking-directory\n @cindex preprocessor, working directory\n+@item -fworking-directory\n Enable generation of linemarkers in the preprocessor output that will\n let the compiler know the current working directory at the time of\n preprocessing. When this option is enabled, the preprocessor will emit,\n@@ -694,45 +694,45 @@ in the command line, this option has no effect, since no @code{#line}\n directives are emitted whatsoever.\n \n @opindex @code{idirafter @var{dir}}\n-@item -idirafter @var{dir}\n @cindex preprocessing, include path\n+@item -idirafter @var{dir}\n Search @var{dir} for include files, but do it after all directories\n specified with @option{-I} and the standard system directories have\n been exhausted. @var{dir} is treated as a system include directory.\n If dir begins with @code{=}, then the @code{=} will be replaced by\n the sysroot prefix; see @option{--sysroot} and @option{-isysroot}.\n \n @opindex @code{imultilib @var{dir}}\n-@item -imultilib @var{dir}\n @cindex preprocessing, include path\n+@item -imultilib @var{dir}\n Use @var{dir} as a subdirectory of the directory containing target-specific\n C++ headers.\n \n @opindex @code{iprefix @var{prefix}}\n-@item -iprefix @var{prefix}\n @cindex preprocessing, include path\n+@item -iprefix @var{prefix}\n Specify @var{prefix} as the prefix for subsequent @option{-iwithprefix}\n options. If the @var{prefix} represents a directory, you should include\n the final @code{'/'}.\n \n @opindex @code{isysroot @var{dir}}\n-@item -isysroot @var{dir}\n @cindex preprocessing, include path\n+@item -isysroot @var{dir}\n This option is like the @option{--sysroot} option, but applies only to\n header files. See the @option{--sysroot} option for more information.\n \n @opindex @code{iquote @var{dir}}\n-@item -iquote @var{dir}\n @cindex preprocessing, include path\n+@item -iquote @var{dir}\n Search @var{dir} only for header files requested with @code{#include \"file\"};\n they are not searched for @code{#include <file>}, before all directories\n specified by @option{-I} and before the standard system directories. If\n @var{dir} begins with @code{=}, then the @code{=} will be replaced by the\n sysroot prefix; see @option{--sysroot} and @option{-isysroot}.\n \n @opindex @code{isystem @var{dir}}\n-@item -isystem @var{dir}\n @cindex preprocessing, include path\n+@item -isystem @var{dir}\n Search @var{dir} for header files, after all directories specified by\n @option{-I} but before the standard system directories. Mark it as a\n system directory, so that it gets the same special treatment as is\n@@ -752,20 +752,20 @@ Do not predefine any system-specific or GCC-specific macros.\n The standard predefined macros remain defined.\n \n @opindex @code{A@var{predicate}=@var{answer}}\n-@item -A@var{predicate}=@var{answer}\n @cindex preprocessing, assertion\n+@item -A@var{predicate}=@var{answer}\n Make an assertion with the predicate @var{predicate} and answer @var{answer}.\n This form is preferred to the older form -A predicate(answer), which is still\n supported, because it does not use shell special characters.\n \n @opindex @code{A-@var{predicate}=@var{answer}}\n-@item -A-@var{predicate}=@var{answer}\n @cindex preprocessing, assertion\n+@item -A-@var{predicate}=@var{answer}\n Cancel an assertion with the predicate @var{predicate} and answer @var{answer}.\n \n @opindex @code{C}\n-@item -C\n @cindex preprocessing, keep comments\n+@item -C\n Do not discard comments. All comments are passed through to the output\n file, except for comments in processed directives, which are deleted\n along with the directive.\n@@ -780,8 +780,8 @@ Warning: this currently handles C-Style comments only. The preprocessor\n does not yet recognize Fortran-style comments.\n \n @opindex @code{CC}\n-@item -CC\n @cindex preprocessing, keep comments\n+@item -CC\n Do not discard comments, including during macro expansion. This is like\n @option{-C}, except that comments contained within macros are also passed\n through to the output file where the macro is expanded.\n@@ -796,13 +796,13 @@ Warning: this currently handles C- and C++-Style comments only. The\n preprocessor does not yet recognize Fortran-style comments.\n \n @opindex @code{D@var{name}}\n-@item -D@var{name}\n @cindex preprocessing, define macros\n+@item -D@var{name}\n Predefine name as a macro, with definition @code{1}.\n \n @opindex @code{D@var{name}=@var{definition}}\n-@item -D@var{name}=@var{definition}\n @cindex preprocessing, define macros\n+@item -D@var{name}=@var{definition}\n The contents of @var{definition} are tokenized and processed as if they\n appeared during translation phase three in a @code{'#define'} directive.\n In particular, the definition will be truncated by embedded newline\n@@ -829,16 +829,16 @@ activities. Each name is indented to show how deep in the @code{'#include'}\n stack it is.\n \n @opindex @code{P}\n-@item -P\n @cindex preprocessing, no linemarkers\n+@item -P\n Inhibit generation of linemarkers in the output from the preprocessor.\n This might be useful when running the preprocessor on something that\n is not C code, and will be sent to a program which might be confused\n by the linemarkers.\n \n @opindex @code{U@var{name}}\n-@item -U@var{name}\n @cindex preprocessing, undefine macros\n+@item -U@var{name}\n Cancel any previous definition of @var{name}, either built in or provided\n with a @option{-D} option.\n @end table\n@@ -875,16 +875,16 @@ by GNU Fortran:\n \n @table @gcctabopt\n @opindex @code{fmax-errors=}@var{n}\n-@item -fmax-errors=@var{n}\n @cindex errors, limiting\n+@item -fmax-errors=@var{n}\n Limits the maximum number of error messages to @var{n}, at which point\n GNU Fortran bails out rather than attempting to continue processing the\n source code.  If @var{n} is 0, there is no limit on the number of error\n messages produced.\n \n @opindex @code{fsyntax-only}\n-@item -fsyntax-only\n @cindex syntax checking\n+@item -fsyntax-only\n Check the code for syntax errors, but do not actually compile it.  This\n will generate module files for each module present in the code, but no\n other output file.\n@@ -918,9 +918,9 @@ Like @option{-pedantic}, except that errors are produced rather than\n warnings.\n \n @opindex @code{Wall}\n-@item -Wall\n @cindex all warnings\n @cindex warnings, all\n+@item -Wall\n Enables commonly used warning options pertaining to usage that\n we recommend avoiding and that we believe are easy to avoid.\n This currently includes @option{-Waliasing}, @option{-Wampersand},\n@@ -931,9 +931,9 @@ This currently includes @option{-Waliasing}, @option{-Wampersand},\n and @option{-Wundefined-do-loop}.\n \n @opindex @code{Waliasing}\n-@item -Waliasing\n @cindex aliasing\n @cindex warnings, aliasing\n+@item -Waliasing\n Warn about possible aliasing of dummy arguments. Specifically, it warns\n if the same actual argument is associated with a dummy argument with\n @code{INTENT(IN)} and a dummy argument with @code{INTENT(OUT)} in a call\n@@ -953,9 +953,9 @@ The following example will trigger the warning.\n @end smallexample\n \n @opindex @code{Wampersand}\n-@item -Wampersand\n @cindex warnings, ampersand\n @cindex @code{&}\n+@item -Wampersand\n Warn about missing ampersand in continued character constants. The\n warning is given with @option{-Wampersand}, @option{-pedantic},\n @option{-std=f95}, @option{-std=f2003}, @option{-std=f2008} and\n@@ -965,111 +965,111 @@ non-comment, non-whitespace character after the ampersand that\n initiated the continuation.\n \n @opindex @code{Warray-temporaries}\n-@item -Warray-temporaries\n @cindex warnings, array temporaries\n+@item -Warray-temporaries\n Warn about array temporaries generated by the compiler.  The information\n generated by this warning is sometimes useful in optimization, in order to\n avoid such temporaries.\n \n @opindex @code{Wc-binding-type}\n-@item -Wc-binding-type\n @cindex warning, C binding type\n+@item -Wc-binding-type\n Warn if the a variable might not be C interoperable.  In particular, warn if \n the variable has been declared using an intrinsic type with default kind\n instead of using a kind parameter defined for C interoperability in the\n intrinsic @code{ISO_C_Binding} module.  This option is implied by\n @option{-Wall}.\n \n @opindex @code{Wcharacter-truncation}\n-@item -Wcharacter-truncation\n @cindex warnings, character truncation\n+@item -Wcharacter-truncation\n Warn when a character assignment will truncate the assigned string.\n \n @opindex @code{Wline-truncation}\n-@item -Wline-truncation\n @cindex warnings, line truncation\n+@item -Wline-truncation\n Warn when a source code line will be truncated.  This option is\n implied by @option{-Wall}.  For free-form source code, the default is\n @option{-Werror=line-truncation} such that truncations are reported as\n error.\n \n @opindex @code{Wconversion}\n-@item -Wconversion\n @cindex warnings, conversion\n @cindex conversion\n+@item -Wconversion\n Warn about implicit conversions that are likely to change the value of \n the expression after conversion. Implied by @option{-Wall}.\n \n @opindex @code{Wconversion-extra}\n-@item -Wconversion-extra\n @cindex warnings, conversion\n @cindex conversion\n+@item -Wconversion-extra\n Warn about implicit conversions between different types and kinds. This\n option does @emph{not} imply @option{-Wconversion}.\n \n @opindex @code{Wextra}\n-@item -Wextra\n @cindex extra warnings\n @cindex warnings, extra\n+@item -Wextra\n Enables some warning options for usages of language features which\n may be problematic. This currently includes @option{-Wcompare-reals},\n @option{-Wunused-parameter} and @option{-Wdo-subscript}.\n \n @opindex @code{Wfrontend-loop-interchange}\n-@item -Wfrontend-loop-interchange\n @cindex warnings, loop interchange\n @cindex loop interchange, warning\n+@item -Wfrontend-loop-interchange\n Warn when using @option{-ffrontend-loop-interchange} for performing loop\n interchanges.\n \n @opindex @code{Wimplicit-interface}\n-@item -Wimplicit-interface\n @cindex warnings, implicit interface\n+@item -Wimplicit-interface\n Warn if a procedure is called without an explicit interface.\n Note this only checks that an explicit interface is present.  It does not\n check that the declared interfaces are consistent across program units.\n \n @opindex @code{Wimplicit-procedure}\n-@item -Wimplicit-procedure\n @cindex warnings, implicit procedure\n+@item -Wimplicit-procedure\n Warn if a procedure is called that has neither an explicit interface\n nor has been declared as @code{EXTERNAL}.\n \n @opindex @code{Winteger-division}\n-@item -Winteger-division\n @cindex warnings, integer division\n @cindex warnings, division of integers\n+@item -Winteger-division\n Warn if a constant integer division truncates its result.\n As an example, 3/5 evaluates to 0.\n \n @opindex @code{Wintrinsics-std}\n-@item -Wintrinsics-std\n @cindex warnings, non-standard intrinsics\n @cindex warnings, intrinsics of other standards\n+@item -Wintrinsics-std\n Warn if @command{gfortran} finds a procedure named like an intrinsic not\n available in the currently selected standard (with @option{-std}) and treats\n it as @code{EXTERNAL} procedure because of this.  @option{-fall-intrinsics} can\n be used to never trigger this behavior and always link to the intrinsic\n regardless of the selected standard.\n \n @opindex @code{Woverwrite-recursive}\n-@item -Wno-overwrite-recursive\n @cindex  warnings, overwrite recursive\n+@item -Wno-overwrite-recursive\n Do not warn when @option{-fno-automatic} is used with @option{-frecursive}. Recursion\n will be broken if the relevant local variables do not have the attribute\n @code{AUTOMATIC} explicitly declared. This option can be used to suppress the warning\n when it is known that recursion is not broken. Useful for build environments that use\n @option{-Werror}.\n \n @opindex @code{Wreal-q-constant}\n-@item -Wreal-q-constant\n @cindex warnings, @code{q} exponent-letter\n+@item -Wreal-q-constant\n Produce a warning if a real-literal-constant contains a @code{q}\n exponent-letter.\n \n @opindex @code{Wsurprising}\n-@item -Wsurprising\n @cindex warnings, suspicious code\n+@item -Wsurprising\n Produce a warning when ``suspicious'' code constructs are encountered.\n While technically legal these usually indicate that an error has been made.\n \n@@ -1100,9 +1100,9 @@ used in free-form source code, is diagnosed by default.)\n @end itemize\n \n @opindex @code{Wtabs}\n-@item -Wtabs\n @cindex warnings, tabs\n @cindex tabulators\n+@item -Wtabs\n By default, tabs are accepted as whitespace, but tabs are not members\n of the Fortran Character Set.  For continuation lines, a tab followed\n by a digit between 1 and 9 is supported.  @option{-Wtabs} will cause a\n@@ -1112,46 +1112,46 @@ active for @option{-pedantic}, @option{-std=f95}, @option{-std=f2003},\n @option{-Wall}.\n \n @opindex @code{Wundefined-do-loop}\n-@item -Wundefined-do-loop\n @cindex warnings, undefined do loop\n+@item -Wundefined-do-loop\n Warn if a DO loop with step either 1 or -1 yields an underflow or an overflow\n during iteration of an induction variable of the loop.\n This option is implied by @option{-Wall}.\n \n @opindex @code{Wunderflow}\n-@item -Wunderflow\n @cindex warnings, underflow\n @cindex underflow\n+@item -Wunderflow\n Produce a warning when numerical constant expressions are\n encountered, which yield an UNDERFLOW during compilation. Enabled by default.\n \n @opindex @code{Wintrinsic-shadow}\n-@item -Wintrinsic-shadow\n @cindex warnings, intrinsic\n @cindex intrinsic\n+@item -Wintrinsic-shadow\n Warn if a user-defined procedure or module procedure has the same name as an\n intrinsic; in this case, an explicit interface or @code{EXTERNAL} or\n @code{INTRINSIC} declaration might be needed to get calls later resolved to\n the desired intrinsic/procedure.  This option is implied by @option{-Wall}.\n \n @opindex @code{Wuse-without-only}\n-@item -Wuse-without-only\n @cindex warnings, use statements\n @cindex intrinsic\n+@item -Wuse-without-only\n Warn if a @code{USE} statement has no @code{ONLY} qualifier and \n thus implicitly imports all public entities of the used module.\n \n @opindex @code{Wunused-dummy-argument}\n-@item -Wunused-dummy-argument\n @cindex warnings, unused dummy argument\n @cindex unused dummy argument\n @cindex dummy argument, unused\n+@item -Wunused-dummy-argument\n Warn about unused dummy arguments. This option is implied by @option{-Wall}.\n \n @opindex @code{Wunused-parameter}\n-@item -Wunused-parameter\n @cindex warnings, unused parameter\n @cindex unused parameter\n+@item -Wunused-parameter\n Contrary to @command{gcc}'s meaning of @option{-Wunused-parameter},\n @command{gfortran}'s implementation of this option does not warn\n about unused dummy arguments (see @option{-Wunused-dummy-argument}),\n@@ -1160,24 +1160,24 @@ is implied by @option{-Wextra} if also @option{-Wunused} or\n @option{-Wall} is used.\n \n @opindex @code{Walign-commons}\n-@item -Walign-commons\n @cindex warnings, alignment of @code{COMMON} blocks\n @cindex alignment of @code{COMMON} blocks\n+@item -Walign-commons\n By default, @command{gfortran} warns about any occasion of variables being\n padded for proper alignment inside a @code{COMMON} block. This warning can be turned\n off via @option{-Wno-align-commons}. See also @option{-falign-commons}.\n \n @opindex @code{Wfunction-elimination}\n-@item -Wfunction-elimination\n @cindex function elimination\n @cindex warnings, function elimination\n+@item -Wfunction-elimination\n Warn if any calls to impure functions are eliminated by the optimizations\n enabled by the @option{-ffrontend-optimize} option.\n This option is implied by @option{-Wextra}.\n \n @opindex @code{Wrealloc-lhs}\n-@item -Wrealloc-lhs\n @cindex Reallocate the LHS in assignments, notification\n+@item -Wrealloc-lhs\n Warn when the compiler might insert code to for allocation or reallocation of\n an allocatable array variable of intrinsic type in intrinsic assignments.  In\n hot loops, the Fortran 2003 reallocation feature may reduce the performance.\n@@ -1224,8 +1224,8 @@ statement is actually executed, in cases like\n This option is implied by @option{-Wextra}.\n \n @opindex @code{Werror}\n-@item -Werror\n @cindex warnings, to errors\n+@item -Werror\n Turns all warnings into errors.\n @end table\n \n@@ -1337,9 +1337,9 @@ last one will be used.\n By default, a summary for all exceptions but @samp{inexact} is shown.\n \n @opindex @code{fno-backtrace}\n-@item -fno-backtrace\n @cindex backtrace\n @cindex trace\n+@item -fno-backtrace\n When a serious runtime error is encountered or a deadly signal is\n emitted (segmentation fault, illegal instruction, bus error,\n floating-point exception, and the other POSIX signals that have the\n@@ -1370,12 +1370,12 @@ Fortran source.\n \n @table @gcctabopt\n @opindex @code{I}@var{dir}\n-@item -I@var{dir}\n @cindex directory, search paths for inclusion\n @cindex inclusion, directory search paths for\n @cindex search paths, for included files\n @cindex paths, search\n @cindex module search path\n+@item -I@var{dir}\n These affect interpretation of the @code{INCLUDE} directive\n (as well as of the @code{#include} directive of the @command{cpp}\n preprocessor).\n@@ -1394,19 +1394,19 @@ gcc,Using the GNU Compiler Collection (GCC)}, for information on the\n \n @opindex @code{J}@var{dir}\n @opindex @code{M}@var{dir}\n-@item -J@var{dir}\n @cindex paths, search\n @cindex module search path\n+@item -J@var{dir}\n This option specifies where to put @file{.mod} files for compiled modules.\n It is also added to the list of directories to searched by an @code{USE}\n statement.\n \n The default is the current directory.\n \n @opindex @code{fintrinsic-modules-path} @var{dir}\n-@item -fintrinsic-modules-path @var{dir}\n @cindex paths, search\n @cindex module search path\n+@item -fintrinsic-modules-path @var{dir}\n This option specifies the location of pre-compiled intrinsic modules, if\n they are not in the default location expected by the compiler.\n @end table\n@@ -1515,9 +1515,9 @@ it.\n \n @table @gcctabopt\n @opindex @code{fno-automatic}\n-@item -fno-automatic\n @cindex @code{SAVE} statement\n @cindex statement, @code{SAVE}\n+@item -fno-automatic\n Treat each program unit (except those marked as RECURSIVE) as if the\n @code{SAVE} statement were specified for every local variable and array\n referenced in it. Does not affect common blocks. (Some Fortran compilers\n@@ -1530,11 +1530,11 @@ Local variables or arrays having an explicit @code{SAVE} attribute are\n silently ignored unless the @option{-pedantic} option is added.\n \n @opindex ff2c\n-@item -ff2c\n @cindex calling convention\n @cindex @command{f2c} calling convention\n @cindex @command{g77} calling convention\n @cindex libf2c calling convention\n+@item -ff2c\n Generate code designed to be compatible with code generated\n by @command{g77} and @command{f2c}.\n \n@@ -1564,11 +1564,11 @@ of type default @code{REAL} or @code{COMPLEX} as actual arguments, as\n the library implementations use the @option{-fno-f2c} calling conventions.\n \n @opindex @code{fno-underscoring}\n-@item -fno-underscoring\n @cindex underscore\n @cindex symbol names, underscores\n @cindex transforming symbol names\n @cindex symbol names, transforming\n+@item -fno-underscoring\n Do not transform names of entities specified in the Fortran\n source file by appending underscores to them.\n \n@@ -1633,14 +1633,14 @@ prevent accidental linking between procedures with incompatible\n interfaces.\n \n @opindex @code{fsecond-underscore}\n-@item -fsecond-underscore\n @cindex underscore\n @cindex symbol names, underscores\n @cindex transforming symbol names\n @cindex symbol names, transforming\n @cindex @command{f2c} calling convention\n @cindex @command{g77} calling convention\n @cindex libf2c calling convention\n+@item -fsecond-underscore\n By default, GNU Fortran appends an underscore to external\n names.  If this option is used GNU Fortran appends two\n underscores to names with underscores and one underscore to external names\n@@ -1658,8 +1658,8 @@ for compatibility with @command{g77} and @command{f2c}, and is implied\n by use of the @option{-ff2c} option.\n \n @opindex @code{fcoarray}\n-@item -fcoarray=@var{<keyword>}\n @cindex coarrays\n+@item -fcoarray=@var{<keyword>}\n \n @table @asis\n @item @samp{none}\n@@ -1676,7 +1676,6 @@ library needs to be linked.\n \n \n @opindex @code{fcheck}\n-@item -fcheck=@var{<keyword>}\n @cindex array, bounds checking\n @cindex bit intrinsics checking\n @cindex bounds checking\n@@ -1687,6 +1686,7 @@ library needs to be linked.\n @cindex checking subscripts\n @cindex run-time checking\n @cindex checking array temporaries\n+@item -fcheck=@var{<keyword>}\n \n Enable the generation of run-time checks; the argument shall be\n a comma-delimited list of the following keywords.  Prefixing a check with\n@@ -1836,15 +1836,15 @@ by default at optimization level @option{-Ofast} unless\n @option{-fmax-stack-var-size} is specified.\n \n @opindex @code{fpack-derived}\n-@item -fpack-derived\n @cindex structure packing\n+@item -fpack-derived\n This option tells GNU Fortran to pack derived type members as closely as\n possible.  Code compiled with this option is likely to be incompatible\n with code compiled without this option, and may execute slower.\n \n @opindex @code{frepack-arrays}\n-@item -frepack-arrays\n @cindex repacking arrays\n+@item -frepack-arrays\n In some circumstances GNU Fortran may pass assumed shape array\n sections via a descriptor describing a noncontiguous area of memory.\n This option adds code to the function prologue to repack the data into\n@@ -1986,8 +1986,8 @@ silence warnings that would have been emitted by @option{-Wuninitialized}\n for the affected local variables.\n \n @opindex @code{falign-commons}\n-@item -falign-commons\n @cindex alignment of @code{COMMON} blocks\n+@item -falign-commons\n By default, @command{gfortran} enforces proper alignment of all variables in a\n @code{COMMON} block by padding them as needed. On certain platforms this is mandatory,\n on others it increases performance. If a @code{COMMON} block is not declared with\n@@ -1998,8 +1998,8 @@ To avoid potential alignment issues in @code{COMMON} blocks, it is recommended t\n objects from largest to smallest.\n \n @opindex @code{fno-protect-parens}\n-@item -fno-protect-parens\n @cindex re-association of parenthesized expressions\n+@item -fno-protect-parens\n By default the parentheses in expression are honored for all optimization\n levels such that the compiler does not do any re-association. Using\n @option{-fno-protect-parens} allows the compiler to reorder @code{REAL} and\n@@ -2009,16 +2009,16 @@ need to be in effect. The parentheses protection is enabled by default, unless\n @option{-Ofast} is given.\n \n @opindex @code{frealloc-lhs}\n-@item -frealloc-lhs\n @cindex Reallocate the LHS in assignments\n+@item -frealloc-lhs\n An allocatable left-hand side of an intrinsic assignment is automatically\n (re)allocated if it is either unallocated or has a different shape. The\n option is enabled by default except when @option{-std=f95} is given. See\n also @option{-Wrealloc-lhs}.\n \n @opindex @code{faggressive-function-elimination}\n-@item -faggressive-function-elimination\n @cindex Elimination of functions with identical argument lists\n+@item -faggressive-function-elimination\n Functions with identical argument lists are eliminated within\n statements, regardless of whether these functions are marked\n @code{PURE} or not. For example, in\n@@ -2029,8 +2029,8 @@ there will only be a single call to @code{f}.  This option only works\n if @option{-ffrontend-optimize} is in effect.\n \n @opindex @code{frontend-optimize}\n-@item -ffrontend-optimize\n @cindex Front-end optimization\n+@item -ffrontend-optimize\n This option performs front-end optimization, based on manipulating\n parts the Fortran parse tree.  Enabled by default by any @option{-O} option\n except @option{-O0} and @option{-Og}.  Optimizations enabled by this option\n@@ -2045,8 +2045,8 @@ include:\n It can be deselected by specifying @option{-fno-frontend-optimize}.\n \n @opindex @code{frontend-loop-interchange}\n-@item -ffrontend-loop-interchange\n @cindex loop interchange, Fortran\n+@item -ffrontend-loop-interchange\n Attempt to interchange loops in the Fortran front end where\n profitable.  Enabled by default by any @option{-O} option.\n At the moment, this option only affects @code{FORALL} and\n@@ -2066,8 +2066,8 @@ shared by @command{gfortran}, @command{gcc}, and other GNU compilers.\n @table @asis\n \n @opindex @code{c-prototypes}\n-@item -fc-prototypes\n @cindex Generating C prototypes from Fortran BIND(C) enteties\n+@item -fc-prototypes\n This option will generate C prototypes from @code{BIND(C)} variable\n declarations, types and procedure interfaces and writes them to\n standard output.  @code{ENUM} is not yet supported.\n@@ -2088,8 +2088,8 @@ where the C code intended for interoperating with the Fortran code\n then  uses @code{#include \"foo.h\"}.\n \n @opindex @code{c-prototypes-external}\n-@item -fc-prototypes-external\n @cindex Generating C prototypes from external procedures\n+@item -fc-prototypes-external\n This option will generate C prototypes from external functions and\n subroutines and write them to standard output.  This may be useful for\n making sure that C bindings to Fortran code are correct.  This option"}, {"sha": "4ab1a76818fbbd91ea5d020f9f27cbacb8bb893e", "filename": "gcc/go/gccgo.texi", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Fgo%2Fgccgo.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33d7a88d069d169bbe76da8e5c52de17f68ca05/gcc%2Fgo%2Fgccgo.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgccgo.texi?ref=f33d7a88d069d169bbe76da8e5c52de17f68ca05", "patch": "@@ -152,27 +152,27 @@ program will generally cause it to misbehave or fail.\n @c man begin OPTIONS gccgo\n \n @table @gcctabopt\n-@item -I@var{dir}\n @cindex @option{-I}\n+@item -I@var{dir}\n Specify a directory to use when searching for an import package at\n compile time.\n \n-@item -L@var{dir}\n @cindex @option{-L}\n+@item -L@var{dir}\n When linking, specify a library search directory, as with\n @command{gcc}.\n \n-@item -fgo-pkgpath=@var{string}\n @cindex @option{-fgo-pkgpath}\n+@item -fgo-pkgpath=@var{string}\n Set the package path to use.  This sets the value returned by the\n PkgPath method of reflect.Type objects.  It is also used for the names\n of globally visible symbols.  The argument to this option should\n normally be the string that will be used to import this package after\n it has been installed; in other words, a pathname within the\n directories specified by the @option{-I} option.\n \n-@item -fgo-prefix=@var{string}\n @cindex @option{-fgo-prefix}\n+@item -fgo-prefix=@var{string}\n An alternative to @option{-fgo-pkgpath}.  The argument will be\n combined with the package name from the source file to produce the\n package path.  If @option{-fgo-pkgpath} is used, @option{-fgo-prefix}\n@@ -189,24 +189,24 @@ Using either @option{-fgo-pkgpath} or @option{-fgo-prefix} disables\n the special treatment of the @code{main} package and permits that\n package to be imported like any other.\n \n-@item -fgo-relative-import-path=@var{dir}\n @cindex @option{-fgo-relative-import-path}\n+@item -fgo-relative-import-path=@var{dir}\n A relative import is an import that starts with @file{./} or\n @file{../}.  If this option is used, @command{gccgo} will use\n @var{dir} as a prefix for the relative import when searching for it.\n \n-@item -frequire-return-statement\n-@itemx -fno-require-return-statement\n @cindex @option{-frequire-return-statement}\n @cindex @option{-fno-require-return-statement}\n+@item -frequire-return-statement\n+@itemx -fno-require-return-statement\n By default @command{gccgo} will warn about functions which have one or\n more return parameters but lack an explicit @code{return} statement.\n This warning may be disabled using\n @option{-fno-require-return-statement}.\n \n-@item -fgo-check-divide-zero\n @cindex @option{-fgo-check-divide-zero}\n @cindex @option{-fno-go-check-divide-zero}\n+@item -fgo-check-divide-zero\n Add explicit checks for division by zero.  In Go a division (or\n modulos) by zero causes a panic.  On Unix systems this is detected in\n the runtime by catching the @code{SIGFPE} signal.  Some processors,\n@@ -217,9 +217,9 @@ systems, this option may be used.  Or the checks may be removed via\n default, but in the future may be off by default on systems that do\n not require it.\n \n-@item -fgo-check-divide-overflow\n @cindex @option{-fgo-check-divide-overflow}\n @cindex @option{-fno-go-check-divide-overflow}\n+@item -fgo-check-divide-overflow\n Add explicit checks for division overflow.  For example, division\n overflow occurs when computing @code{INT_MIN / -1}.  In Go this should\n be wrapped, to produce @code{INT_MIN}.  Some processors, such as x86,\n@@ -229,50 +229,50 @@ may be used.  Or the checks may be removed via\n by default, but in the future may be off by default on systems that do\n not require it.\n \n-@item -fno-go-optimize-allocs\n @cindex @option{-fno-go-optimize-allocs}\n+@item -fno-go-optimize-allocs\n Disable escape analysis, which tries to allocate objects on the stack\n rather than the heap.\n \n-@item -fgo-debug-escape@var{n}\n @cindex @option{-fgo-debug-escape}\n+@item -fgo-debug-escape@var{n}\n Output escape analysis debugging information.  Larger values of\n @var{n} generate more information.\n \n-@item -fgo-debug-escape-hash=@var{n}\n @cindex @option{-fgo-debug-escape-hash}\n+@item -fgo-debug-escape-hash=@var{n}\n A hash value to debug escape analysis.  @var{n} is a binary string.\n This runs escape analysis only on functions whose names hash to values\n that match the given suffix @var{n}.  This can be used to binary\n search across functions to uncover escape analysis bugs.\n \n-@item -fgo-debug-optimization\n @cindex @option{-fgo-debug-optimization}\n @cindex @option{-fno-go-debug-optimization}\n+@item -fgo-debug-optimization\n Output optimization diagnostics.\n \n-@item -fgo-c-header=@var{file}\n @cindex @option{-fgo-c-header}\n+@item -fgo-c-header=@var{file}\n Write top-level named Go struct definitions to @var{file} as C code.\n This is used when compiling the runtime package.\n \n-@item -fgo-compiling-runtime\n @cindex @option{-fgo-compiling-runtime}\n+@item -fgo-compiling-runtime\n Apply special rules for compiling the runtime package.  Implicit\n memory allocation is forbidden.  Some additional compiler directives\n are supported.\n \n-@item -fgo-embedcfg=@var{file}\n @cindex @option{-fgo-embedcfg}\n+@item -fgo-embedcfg=@var{file}\n Identify a JSON file used to map patterns used with special\n @code{//go:embed} comments to the files named by the patterns.  The\n JSON file should have two components: @code{Patterns} maps each\n pattern to a list of file names, and @code{Files} maps each file name\n to a full path to the file.  This option is intended for use by the\n @command{go} command to implement @code{//go:embed}.\n \n-@item -g\n @cindex @option{-g for gccgo}\n+@item -g\n This is the standard @command{gcc} option (@pxref{Debugging Options, ,\n Debugging Options, gcc, Using the GNU Compiler Collection (GCC)}).  It\n is mentioned here because by default @command{gccgo} turns on"}]}