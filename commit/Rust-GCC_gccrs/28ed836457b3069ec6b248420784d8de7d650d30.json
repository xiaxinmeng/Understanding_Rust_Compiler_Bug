{"sha": "28ed836457b3069ec6b248420784d8de7d650d30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhlZDgzNjQ1N2IzMDY5ZWM2YjI0ODQyMDc4NGQ4ZGU3ZDY1MGQzMA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2015-08-01T18:37:25Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2015-08-01T18:37:25Z"}, "message": "re PR fortran/67091 ([OOP] Bad result for type-bound procedures returning pointers to the intrinsic function ASSOCIATED)\n\n2015-08-01  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/67091\n\t* trans-intrinsic.c (gfc_conv_associated): Add the pre and post\n\tblocks for the second argument to se.\n\n2015-08-01  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/67091\n\t* gfortran.dg/associated_target_6.f03: New test\n\nFrom-SVN: r226464", "tree": {"sha": "20417056bc5e8bd339a994811594c59e555236ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20417056bc5e8bd339a994811594c59e555236ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28ed836457b3069ec6b248420784d8de7d650d30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28ed836457b3069ec6b248420784d8de7d650d30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28ed836457b3069ec6b248420784d8de7d650d30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28ed836457b3069ec6b248420784d8de7d650d30/comments", "author": null, "committer": null, "parents": [{"sha": "805134b9170b4ac563189c24b35fa4dc09853569", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/805134b9170b4ac563189c24b35fa4dc09853569", "html_url": "https://github.com/Rust-GCC/gccrs/commit/805134b9170b4ac563189c24b35fa4dc09853569"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "5bb70f1c68ad9c94ebfa9427c16c949d5596bdbe", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28ed836457b3069ec6b248420784d8de7d650d30/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28ed836457b3069ec6b248420784d8de7d650d30/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=28ed836457b3069ec6b248420784d8de7d650d30", "patch": "@@ -1,3 +1,9 @@\n+2015-08-01  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/67091\n+\t* trans-intrinsic.c (gfc_conv_associated): Add the pre and post\n+\tblocks for the second argument to se.\n+\n 2015-07-27  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* parse.c (parse_oacc_structured_block): Fix logic error."}, {"sha": "1aa299be21a6a1b83f41327892c95108684b30ad", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28ed836457b3069ec6b248420784d8de7d650d30/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28ed836457b3069ec6b248420784d8de7d650d30/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=28ed836457b3069ec6b248420784d8de7d650d30", "patch": "@@ -6667,6 +6667,8 @@ gfc_conv_associated (gfc_se *se, gfc_expr *expr)\n \t\t\t\t\t\t       arg2se.expr);\n \t  gfc_add_block_to_block (&se->pre, &arg1se.pre);\n \t  gfc_add_block_to_block (&se->post, &arg1se.post);\n+\t  gfc_add_block_to_block (&se->pre, &arg2se.pre);\n+\t  gfc_add_block_to_block (&se->post, &arg2se.post);\n           tmp = fold_build2_loc (input_location, EQ_EXPR, boolean_type_node,\n \t\t\t\t arg1se.expr, arg2se.expr);\n           tmp2 = fold_build2_loc (input_location, NE_EXPR, boolean_type_node,"}, {"sha": "2bbe2a27beeae907ec3ffe51a90ff97d79a88c6d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28ed836457b3069ec6b248420784d8de7d650d30/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28ed836457b3069ec6b248420784d8de7d650d30/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=28ed836457b3069ec6b248420784d8de7d650d30", "patch": "@@ -1,3 +1,8 @@\n+2015-08-01  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/67091\n+\t* gfortran.dg/associated_target_6.f03: New test\n+\n 2015-08-01  Tom de Vries  <tom@codesourcery.com>\n \n \t* gcc.dg/autopar/reduc-2char.c (init_arrays): Mark with attribute"}, {"sha": "15f795124c35d8e16c11e323a9d1aabe575fa81c", "filename": "gcc/testsuite/gfortran.dg/associated_target_6.f03", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28ed836457b3069ec6b248420784d8de7d650d30/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_target_6.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28ed836457b3069ec6b248420784d8de7d650d30/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_target_6.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_target_6.f03?ref=28ed836457b3069ec6b248420784d8de7d650d30", "patch": "@@ -0,0 +1,49 @@\n+! { dg-do run }\n+! Tests the fix for PR67091 in which the first call to associated\n+! gave a bad result because the 'target' argument was not being\n+! correctly handled.\n+!\n+! Contributed by 'FortranFan' on clf.\n+! https://groups.google.com/forum/#!topic/comp.lang.fortran/dN_tQA1Mu-I\n+!\n+module m\n+   implicit none\n+   private\n+   type, public :: t\n+      private\n+      integer, pointer :: m_i\n+   contains\n+      private\n+      procedure, pass(this), public :: iptr => getptr\n+      procedure, pass(this), public :: setptr\n+   end type t\n+contains\n+   subroutine setptr( this, iptr )\n+      !.. Argument list\n+      class(t), intent(inout)         :: this\n+      integer, pointer, intent(inout) :: iptr\n+      this%m_i => iptr\n+      return\n+   end subroutine setptr\n+   function getptr( this ) result( iptr )\n+      !.. Argument list\n+      class(t), intent(in) :: this\n+      !.. Function result\n+      integer, pointer :: iptr\n+      iptr => this%m_i\n+   end function getptr\n+end module m\n+\n+program p\n+   use m, only : t\n+   integer, pointer :: i\n+   integer, pointer :: j\n+   type(t) :: foo\n+   !.. create i with some value\n+   allocate (i, source=42)\n+   call foo%setptr (i)\n+   if (.not.associated (i, foo%iptr())) call abort () ! Gave bad result.\n+   if (.not.associated (foo%iptr(), i)) call abort () ! Was OK.\n+   j => foo%iptr()\n+   if (.not.associated (i, j)) call abort ! Was OK.\n+end program p"}]}