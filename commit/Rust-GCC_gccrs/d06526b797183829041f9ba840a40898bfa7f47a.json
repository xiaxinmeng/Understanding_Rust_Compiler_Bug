{"sha": "d06526b797183829041f9ba840a40898bfa7f47a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA2NTI2Yjc5NzE4MzgyOTA0MWY5YmE4NDBhNDA4OThiZmE3ZjQ3YQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2005-08-17T01:55:05Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2005-08-17T01:55:05Z"}, "message": "re PR tree-optimization/23402 (error: statement makes a memory store, but has no V_MAY_DEFS nor V_MUST_DEFS)\n\n2005-08-16  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR tree-opt/23402\n        * gcc.c-torture/compile/zero-strct-3.c: New test.\n        * gcc.c-torture/compile/zero-strct-4.c: New test.\n\n2005-08-16  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR tree-opt/23402\n        * gimplify.c (zero_sized_type): New function.\n        (gimplify_modify_expr_rhs): If we have a zero sized type,\n        replace the statement with an empty statement.\n\nFrom-SVN: r103191", "tree": {"sha": "d00c8bb96337b5b35ec229a136bbb9fbfed3ba57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d00c8bb96337b5b35ec229a136bbb9fbfed3ba57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d06526b797183829041f9ba840a40898bfa7f47a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d06526b797183829041f9ba840a40898bfa7f47a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d06526b797183829041f9ba840a40898bfa7f47a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d06526b797183829041f9ba840a40898bfa7f47a/comments", "author": null, "committer": null, "parents": [{"sha": "e9e68ae334c951209dcbec40f76237d406d8f9af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9e68ae334c951209dcbec40f76237d406d8f9af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9e68ae334c951209dcbec40f76237d406d8f9af"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "4b77bfd1c3c202c4ca9d4be9079f8ef48dca3ce0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d06526b797183829041f9ba840a40898bfa7f47a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d06526b797183829041f9ba840a40898bfa7f47a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d06526b797183829041f9ba840a40898bfa7f47a", "patch": "@@ -1,3 +1,10 @@\n+2005-08-16  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR tree-opt/23402\n+\t* gimplify.c (zero_sized_type): New function.\n+\t(gimplify_modify_expr_rhs): If we have a zero sized type,\n+\treplace the statement with an empty statement.\n+\n 2005-08-16  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/crtfastmath.c (set_fast_math): Add \"=m\" for"}, {"sha": "a4ff3d23a2cd11f9d187e4d3cdf4b243b25c3382", "filename": "gcc/gimplify.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d06526b797183829041f9ba840a40898bfa7f47a/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d06526b797183829041f9ba840a40898bfa7f47a/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=d06526b797183829041f9ba840a40898bfa7f47a", "patch": "@@ -2533,6 +2533,17 @@ zero_sized_field_decl (tree fdecl)\n   return false;\n }\n \n+/* Return true if TYPE is zero sized.  */\n+   \n+static bool\n+zero_sized_type (tree type)\n+{\n+  if (AGGREGATE_TYPE_P (type) && TYPE_SIZE (type)\n+      && integer_zerop (TYPE_SIZE (type)))\n+    return true;\n+  return false;\n+}\n+\n /* A subroutine of gimplify_init_constructor.  Generate individual\n    MODIFY_EXPRs for a CONSTRUCTOR.  OBJECT is the LHS against which the\n    assignments should happen.  ELTS is the CONSTRUCTOR_ELTS of the\n@@ -2949,6 +2960,12 @@ gimplify_modify_expr_rhs (tree *expr_p, tree *from_p, tree *to_p, tree *pre_p,\n \t\t\t  tree *post_p, bool want_value)\n {\n   enum gimplify_status ret = GS_OK;\n+  tree type = TREE_TYPE (*from_p);\n+  if (zero_sized_type (type))\n+    {\n+      *expr_p = NULL_TREE;\n+      return GS_ALL_DONE;\n+    }\n \n   while (ret != GS_UNHANDLED)\n     switch (TREE_CODE (*from_p))"}, {"sha": "b7e41c6487d4865db5fc9d7ca096f059a2eac90b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d06526b797183829041f9ba840a40898bfa7f47a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d06526b797183829041f9ba840a40898bfa7f47a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d06526b797183829041f9ba840a40898bfa7f47a", "patch": "@@ -1,3 +1,9 @@\n+2005-08-16  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR tree-opt/23402\n+\t* gcc.c-torture/compile/zero-strct-3.c: New test.\n+\t* gcc.c-torture/compile/zero-strct-4.c: New test.\n+\n 2005-08-16  Steven Bosscher  <stevenb@suse.de>\n \n \tPR target/23376"}, {"sha": "31bc328d06cab51ba7a02b5324c0d865669f6d50", "filename": "gcc/testsuite/gcc.c-torture/compile/zero-strct-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d06526b797183829041f9ba840a40898bfa7f47a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fzero-strct-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d06526b797183829041f9ba840a40898bfa7f47a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fzero-strct-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fzero-strct-3.c?ref=d06526b797183829041f9ba840a40898bfa7f47a", "patch": "@@ -0,0 +1,12 @@\n+typedef struct {} spinlock_t;\n+struct sk_buff_head {\n+  int i;\n+  spinlock_t lock;\n+};\n+struct sk_buff_head audit_skb_queue;\n+void audit_init(void)\n+{\n+  struct sk_buff_head *list = &audit_skb_queue;\n+  spinlock_t a = {};\n+  audit_skb_queue.lock = a;\n+}"}, {"sha": "4a5889f80f3c424a55f1abefbee0ffe4d81f46d6", "filename": "gcc/testsuite/gcc.c-torture/compile/zero-strct-4.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d06526b797183829041f9ba840a40898bfa7f47a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fzero-strct-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d06526b797183829041f9ba840a40898bfa7f47a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fzero-strct-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fzero-strct-4.c?ref=d06526b797183829041f9ba840a40898bfa7f47a", "patch": "@@ -0,0 +1,14 @@\n+typedef struct {} raw_spinlock_t;\n+typedef struct {\n+  raw_spinlock_t raw_lock;\n+} spinlock_t;\n+struct sk_buff_head {\n+  int i;\n+  spinlock_t lock;\n+};\n+struct sk_buff_head audit_skb_queue;\n+void audit_init(void)\n+{\n+  struct sk_buff_head *list = &audit_skb_queue;\n+  audit_skb_queue.lock = (spinlock_t) { .raw_lock = { } };\n+}"}]}