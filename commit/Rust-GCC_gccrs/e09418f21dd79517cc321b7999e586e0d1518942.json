{"sha": "e09418f21dd79517cc321b7999e586e0d1518942", "node_id": "C_kwDOANBUbNoAKGUwOTQxOGYyMWRkNzk1MTdjYzMyMWI3OTk5ZTU4NmUwZDE1MTg5NDI", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-10T06:21:31Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T10:31:41Z"}, "message": "RISC-V: Add fixed-point support\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv-vector-builtins-bases.cc (class sat_op): New class.\n\t(class vnclip): Ditto.\n\t(BASE): Ditto.\n\t* config/riscv/riscv-vector-builtins-bases.h: Ditto.\n\t* config/riscv/riscv-vector-builtins-functions.def (vaadd): Ditto.\n\t(vasub): Ditto.\n\t(vaaddu): Ditto.\n\t(vasubu): Ditto.\n\t(vsmul): Ditto.\n\t(vssra): Ditto.\n\t(vssrl): Ditto.\n\t(vnclipu): Ditto.\n\t(vnclip): Ditto.\n\t* config/riscv/vector-iterators.md (su): Add instruction.\n\t(aadd): Ditto.\n\t(vaalu): Ditto.\n\t* config/riscv/vector.md (@pred_<sat_op><mode>): New pattern.\n\t(@pred_<sat_op><mode>_scalar): Ditto.\n\t(*pred_<sat_op><mode>_scalar): Ditto.\n\t(*pred_<sat_op><mode>_extended_scalar): Ditto.\n\t(@pred_narrow_clip<v_su><mode>): Ditto.\n\t(@pred_narrow_clip<v_su><mode>_scalar): Ditto.", "tree": {"sha": "35bcc2a5f58de6451c68688c7938dc876292de13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35bcc2a5f58de6451c68688c7938dc876292de13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e09418f21dd79517cc321b7999e586e0d1518942", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e09418f21dd79517cc321b7999e586e0d1518942", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e09418f21dd79517cc321b7999e586e0d1518942", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e09418f21dd79517cc321b7999e586e0d1518942/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fd0cfd87b1b9e2a12532c364d0910b9b18af35f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fd0cfd87b1b9e2a12532c364d0910b9b18af35f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fd0cfd87b1b9e2a12532c364d0910b9b18af35f"}], "stats": {"total": 359, "additions": 346, "deletions": 13}, "files": [{"sha": "6eb6dab3149f811433ac0f33e94c2a7b6b2e5838", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.cc", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09418f21dd79517cc321b7999e586e0d1518942/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09418f21dd79517cc321b7999e586e0d1518942/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc?ref=e09418f21dd79517cc321b7999e586e0d1518942", "patch": "@@ -464,6 +464,47 @@ class vmv_v : public function_base\n   }\n };\n \n+/* Implements vaadd/vasub/vsmul/vssra/vssrl.  */\n+template<int UNSPEC>\n+class sat_op : public function_base\n+{\n+public:\n+  rtx expand (function_expander &e) const override\n+  {\n+    switch (e.op_info->op)\n+      {\n+      case OP_TYPE_vx:\n+\treturn e.use_exact_insn (\n+\t  code_for_pred_scalar (UNSPEC, e.vector_mode ()));\n+      case OP_TYPE_vv:\n+\treturn e.use_exact_insn (code_for_pred (UNSPEC, e.vector_mode ()));\n+      default:\n+\tgcc_unreachable ();\n+      }\n+  }\n+};\n+\n+/* Implements vnclip/vnclipu.  */\n+template<int UNSPEC>\n+class vnclip : public function_base\n+{\n+public:\n+  rtx expand (function_expander &e) const override\n+  {\n+    switch (e.op_info->op)\n+      {\n+      case OP_TYPE_wx:\n+\treturn e.use_exact_insn (\n+\t  code_for_pred_narrow_clip_scalar (UNSPEC, e.vector_mode ()));\n+      case OP_TYPE_wv:\n+\treturn e.use_exact_insn (\n+\t  code_for_pred_narrow_clip (UNSPEC, e.vector_mode ()));\n+      default:\n+\tgcc_unreachable ();\n+      }\n+  }\n+};\n+\n static CONSTEXPR const vsetvl<false> vsetvl_obj;\n static CONSTEXPR const vsetvl<true> vsetvlmax_obj;\n static CONSTEXPR const loadstore<false, LST_UNIT_STRIDE, false> vle_obj;\n@@ -535,6 +576,15 @@ static CONSTEXPR const binop<SS_PLUS> vsadd_obj;\n static CONSTEXPR const binop<SS_MINUS> vssub_obj;\n static CONSTEXPR const binop<US_PLUS> vsaddu_obj;\n static CONSTEXPR const binop<US_MINUS> vssubu_obj;\n+static CONSTEXPR const sat_op<UNSPEC_VAADDU> vaaddu_obj;\n+static CONSTEXPR const sat_op<UNSPEC_VAADD> vaadd_obj;\n+static CONSTEXPR const sat_op<UNSPEC_VASUBU> vasubu_obj;\n+static CONSTEXPR const sat_op<UNSPEC_VASUB> vasub_obj;\n+static CONSTEXPR const sat_op<UNSPEC_VSMUL> vsmul_obj;\n+static CONSTEXPR const sat_op<UNSPEC_VSSRL> vssrl_obj;\n+static CONSTEXPR const sat_op<UNSPEC_VSSRA> vssra_obj;\n+static CONSTEXPR const vnclip<UNSPEC_VNCLIP> vnclip_obj;\n+static CONSTEXPR const vnclip<UNSPEC_VNCLIPU> vnclipu_obj;\n \n /* Declare the function base NAME, pointing it to an instance\n    of class <NAME>_obj.  */\n@@ -612,5 +662,14 @@ BASE (vsadd)\n BASE (vssub)\n BASE (vsaddu)\n BASE (vssubu)\n+BASE (vaadd)\n+BASE (vasub)\n+BASE (vaaddu)\n+BASE (vasubu)\n+BASE (vsmul)\n+BASE (vssra)\n+BASE (vssrl)\n+BASE (vnclip)\n+BASE (vnclipu)\n \n } // end namespace riscv_vector"}, {"sha": "dcc706ea8057a1693c7b4c24083569e477dbf0eb", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09418f21dd79517cc321b7999e586e0d1518942/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09418f21dd79517cc321b7999e586e0d1518942/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h?ref=e09418f21dd79517cc321b7999e586e0d1518942", "patch": "@@ -95,7 +95,17 @@ extern const function_base *const vsadd;\n extern const function_base *const vssub;\n extern const function_base *const vsaddu;\n extern const function_base *const vssubu;\n-\n+extern const function_base *const vaadd;\n+extern const function_base *const vasub;\n+extern const function_base *const vaaddu;\n+extern const function_base *const vasubu;\n+extern const function_base *const vsmul;\n+extern const function_base *const vssra;\n+extern const function_base *const vssrl;\n+extern const function_base *const vnclip;\n+extern const function_base *const vnclip;\n+extern const function_base *const vnclipu;\n+extern const function_base *const vnclipu;\n }\n \n } // end namespace riscv_vector"}, {"sha": "66fa63530f3401e1ffc9b27214496393417a5ae5", "filename": "gcc/config/riscv/riscv-vector-builtins-functions.def", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09418f21dd79517cc321b7999e586e0d1518942/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09418f21dd79517cc321b7999e586e0d1518942/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def?ref=e09418f21dd79517cc321b7999e586e0d1518942", "patch": "@@ -166,5 +166,23 @@ DEF_RVV_FUNCTION (vsadd, alu, full_preds, i_vvx_ops)\n DEF_RVV_FUNCTION (vssub, alu, full_preds, i_vvx_ops)\n DEF_RVV_FUNCTION (vsaddu, alu, full_preds, u_vvx_ops)\n DEF_RVV_FUNCTION (vssubu, alu, full_preds, u_vvx_ops)\n+DEF_RVV_FUNCTION (vaadd, alu, full_preds, i_vvv_ops)\n+DEF_RVV_FUNCTION (vasub, alu, full_preds, i_vvv_ops)\n+DEF_RVV_FUNCTION (vaaddu, alu, full_preds, u_vvv_ops)\n+DEF_RVV_FUNCTION (vasubu, alu, full_preds, u_vvv_ops)\n+DEF_RVV_FUNCTION (vsmul, alu, full_preds, full_v_i_vvv_ops)\n+DEF_RVV_FUNCTION (vssra, alu, full_preds, i_shift_vvv_ops)\n+DEF_RVV_FUNCTION (vssrl, alu, full_preds, u_shift_vvv_ops)\n+DEF_RVV_FUNCTION (vaadd, alu, full_preds, i_vvx_ops)\n+DEF_RVV_FUNCTION (vasub, alu, full_preds, i_vvx_ops)\n+DEF_RVV_FUNCTION (vaaddu, alu, full_preds, u_vvx_ops)\n+DEF_RVV_FUNCTION (vasubu, alu, full_preds, u_vvx_ops)\n+DEF_RVV_FUNCTION (vsmul, alu, full_preds, full_v_i_vvx_ops)\n+DEF_RVV_FUNCTION (vssra, alu, full_preds, i_shift_vvx_ops)\n+DEF_RVV_FUNCTION (vssrl, alu, full_preds, u_shift_vvx_ops)\n+DEF_RVV_FUNCTION (vnclipu, narrow_alu, full_preds, u_narrow_shift_vwv_ops)\n+DEF_RVV_FUNCTION (vnclip, narrow_alu, full_preds, i_narrow_shift_vwv_ops)\n+DEF_RVV_FUNCTION (vnclipu, narrow_alu, full_preds, u_narrow_shift_vwx_ops)\n+DEF_RVV_FUNCTION (vnclip, narrow_alu, full_preds, i_narrow_shift_vwx_ops)\n \n #undef DEF_RVV_FUNCTION"}, {"sha": "9087129c70a7f7cb29d89c5f339d8de2225998c1", "filename": "gcc/config/riscv/vector-iterators.md", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09418f21dd79517cc321b7999e586e0d1518942/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09418f21dd79517cc321b7999e586e0d1518942/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector-iterators.md?ref=e09418f21dd79517cc321b7999e586e0d1518942", "patch": "@@ -39,6 +39,16 @@\n   UNSPEC_VMADC\n   UNSPEC_VMSBC\n   UNSPEC_OVERFLOW\n+\n+  UNSPEC_VNCLIP\n+  UNSPEC_VNCLIPU\n+  UNSPEC_VSSRL\n+  UNSPEC_VSSRA\n+  UNSPEC_VAADDU\n+  UNSPEC_VAADD\n+  UNSPEC_VASUBU\n+  UNSPEC_VASUB\n+  UNSPEC_VSMUL\n ])\n \n (define_mode_iterator V [\n@@ -264,11 +274,31 @@\n \n (define_int_iterator VMULH [UNSPEC_VMULHS UNSPEC_VMULHU UNSPEC_VMULHSU])\n \n+(define_int_iterator VNCLIP [UNSPEC_VNCLIP UNSPEC_VNCLIPU])\n+\n+(define_int_iterator VSAT_OP [UNSPEC_VAADDU UNSPEC_VAADD\n+\t\t\t      UNSPEC_VASUBU UNSPEC_VASUB UNSPEC_VSMUL\n+\t\t\t      UNSPEC_VSSRL UNSPEC_VSSRA])\n+\n+(define_int_iterator VSAT_ARITH_OP [UNSPEC_VAADDU UNSPEC_VAADD\n+\t\t\t      \t    UNSPEC_VASUBU UNSPEC_VASUB UNSPEC_VSMUL])\n+(define_int_iterator VSAT_SHIFT_OP [UNSPEC_VSSRL UNSPEC_VSSRA])\n+\n (define_int_attr order [\n   (UNSPEC_ORDERED \"o\") (UNSPEC_UNORDERED \"u\")\n ])\n \n-(define_int_attr v_su [(UNSPEC_VMULHS \"\") (UNSPEC_VMULHU \"u\") (UNSPEC_VMULHSU \"su\")])\n+(define_int_attr v_su [(UNSPEC_VMULHS \"\") (UNSPEC_VMULHU \"u\") (UNSPEC_VMULHSU \"su\")\n+\t\t       (UNSPEC_VNCLIP \"\") (UNSPEC_VNCLIPU \"u\")])\n+(define_int_attr sat_op [(UNSPEC_VAADDU \"aaddu\") (UNSPEC_VAADD \"aadd\")\n+\t\t\t (UNSPEC_VASUBU \"asubu\") (UNSPEC_VASUB \"asub\")\n+\t\t\t (UNSPEC_VSMUL \"smul\") (UNSPEC_VSSRL \"ssrl\")\n+\t\t\t (UNSPEC_VSSRA \"ssra\")])\n+(define_int_attr sat_insn_type [(UNSPEC_VAADDU \"vaalu\") (UNSPEC_VAADD \"vaalu\")\n+\t\t\t \t(UNSPEC_VASUBU \"vaalu\") (UNSPEC_VASUB \"vaalu\")\n+\t\t\t \t(UNSPEC_VSMUL \"vsmul\") (UNSPEC_VSSRL \"vsshift\")\n+\t\t\t \t(UNSPEC_VSSRA \"vsshift\") (UNSPEC_VNCLIP \"vnclip\")\n+\t\t\t\t(UNSPEC_VNCLIPU \"vnclip\")])\n \n (define_code_iterator any_int_binop [plus minus and ior xor ashift ashiftrt lshiftrt\n   smax umax smin umin mult div udiv mod umod"}, {"sha": "0a0792b0810899b9f04d2ede8d49dd938cd70a0c", "filename": "gcc/config/riscv/vector.md", "status": "modified", "additions": 227, "deletions": 11, "changes": 238, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09418f21dd79517cc321b7999e586e0d1518942/gcc%2Fconfig%2Friscv%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09418f21dd79517cc321b7999e586e0d1518942/gcc%2Fconfig%2Friscv%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector.md?ref=e09418f21dd79517cc321b7999e586e0d1518942", "patch": "@@ -145,7 +145,8 @@\n   (cond [(eq_attr \"type\" \"vimov,vfmov,vldux,vldox,vstux,vstox,\\\n \t\t\t  vialu,vshift,vicmp,vimul,vidiv,vsalu,\\\n \t\t\t  vext,viwalu,viwmul,vicalu,vnshift,\\\n-\t\t\t  vimuladd,vimerge\")\n+\t\t\t  vimuladd,vimerge,vaalu,vsmul,vsshift,\\\n+\t\t\t  vnclip\")\n \t   (const_int INVALID_ATTRIBUTE)\n \t (eq_attr \"mode\" \"VNx1QI,VNx1BI\")\n \t   (symbol_ref \"riscv_vector::get_ratio(E_VNx1QImode)\")\n@@ -197,7 +198,7 @@\n (define_attr \"merge_op_idx\" \"\"\n \t(cond [(eq_attr \"type\" \"vlde,vimov,vfmov,vldm,vlds,vmalu,vldux,vldox,\\\n \t\t\t\tvialu,vshift,vicmp,vimul,vidiv,vsalu,vext,viwalu,\\\n-\t\t\t\tviwmul,vnshift,vimuladd\")\n+\t\t\t\tviwmul,vnshift,vimuladd,vaalu,vsmul,vsshift,vnclip\")\n \t       (const_int 2)\n \n \t       (eq_attr \"type\" \"vimerge\")\n@@ -218,7 +219,8 @@\n              (const_int 4))\n \n \t (eq_attr \"type\" \"vldux,vldox,vialu,vshift,vicmp,vimul,vidiv,vsalu,\\\n-\t\t\t  viwalu,viwmul,vnshift,vimuladd,vimerge\")\n+\t\t\t  viwalu,viwmul,vnshift,vimuladd,vimerge,vaalu,vsmul,\\\n+\t\t\t  vsshift,vnclip\")\n \t   (const_int 5)]\n   (const_int INVALID_ATTRIBUTE)))\n \n@@ -235,7 +237,8 @@\n \t     (symbol_ref \"riscv_vector::get_ta(operands[5])\"))\n \n \t (eq_attr \"type\" \"vldux,vldox,vialu,vshift,vicmp,vimul,vidiv,vsalu,\\\n-\t\t\t  viwalu,viwmul,vnshift,vimuladd,vimerge\")\n+\t\t\t  viwalu,viwmul,vnshift,vimuladd,vimerge,vaalu,vsmul,\\\n+\t\t\t  vsshift,vnclip\")\n \t   (symbol_ref \"riscv_vector::get_ta(operands[6])\")]\n \t(const_int INVALID_ATTRIBUTE)))\n \n@@ -252,7 +255,8 @@\n \t     (symbol_ref \"riscv_vector::get_ma(operands[6])\"))\n \n \t (eq_attr \"type\" \"vldux,vldox,vialu,vshift,vicmp,vimul,vidiv,vsalu,\\\n-\t\t\t  viwalu,viwmul,vnshift,vimuladd\")\n+\t\t\t  viwalu,viwmul,vnshift,vimuladd,vaalu,vsmul,vsshift,\\\n+\t\t\t  vnclip\")\n \t   (symbol_ref \"riscv_vector::get_ma(operands[7])\")]\n \t(const_int INVALID_ATTRIBUTE)))\n \n@@ -271,7 +275,8 @@\n \t     (symbol_ref \"INTVAL (operands[7])\"))\n \n \t (eq_attr \"type\" \"vldux,vldox,vialu,vshift,vicmp,vimul,vidiv,vsalu,\\\n-\t\t\t  viwalu,viwmul,vnshift,vimuladd\")\n+\t\t\t  viwalu,viwmul,vnshift,vimuladd,vaalu,vsmul,vsshift,\\\n+\t\t\t  vnclip\")\n \t   (symbol_ref \"INTVAL (operands[8])\")\n \t (eq_attr \"type\" \"vstux,vstox\")\n \t   (symbol_ref \"INTVAL (operands[5])\")]\n@@ -860,7 +865,7 @@\n       (match_operand:VI_D 1 \"vector_merge_operand\")))]\n   \"TARGET_VECTOR\"\n   {\n-    if (riscv_vector::neg_simm5_p (operands[3]))\n+    if (riscv_vector::simm5_p (operands[3]))\n       operands[3] = force_reg (<VEL>mode, operands[3]);\n     else if (!TARGET_64BIT)\n       {\n@@ -1476,7 +1481,10 @@\n \t  }\n       }\n     else\n-      operands[4] = force_reg (<VEL>mode, operands[4]);\n+      {\n+\tif (!rtx_equal_p (operands[4], const0_rtx))\n+\t  operands[4] = force_reg (<VEL>mode, operands[4]);\n+      }\n   })\n \n (define_insn \"*pred_<optab><mode>_scalar\"\n@@ -1566,7 +1574,10 @@\n \t  }\n       }\n     else\n-      operands[4] = force_reg (<VEL>mode, operands[4]);\n+      {\n+\tif (!rtx_equal_p (operands[4], const0_rtx))\n+\t  operands[4] = force_reg (<VEL>mode, operands[4]);\n+      }\n   })\n \n (define_insn \"*pred_<optab><mode>_scalar\"\n@@ -2025,7 +2036,10 @@\n \t  }\n       }\n     else\n-      operands[4] = force_reg (<VEL>mode, operands[4]);\n+      {\n+\tif (!rtx_equal_p (operands[4], const0_rtx))\n+\t  operands[4] = force_reg (<VEL>mode, operands[4]);\n+      }\n   })\n \n (define_insn \"*pred_mulh<v_su><mode>_scalar\"\n@@ -2041,7 +2055,7 @@\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (unspec:VFULLI_D\n \t    [(vec_duplicate:VFULLI_D\n-\t       (match_operand:<VEL> 4 \"register_operand\"   \" rJ, rJ\"))\n+\t       (match_operand:<VEL> 4 \"reg_or_0_operand\"   \" rJ, rJ\"))\n \t     (match_operand:VFULLI_D 3 \"register_operand\"  \" vr, vr\")] VMULH)\n \t  (match_operand:VFULLI_D 2 \"vector_merge_operand\" \"0vu,0vu\")))]\n   \"TARGET_VECTOR\"\n@@ -3183,3 +3197,205 @@\n    (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[5])\"))\n    (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[6])\"))\n    (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[7])\"))])\n+\n+;; -------------------------------------------------------------------------------\n+;; ---- Predicated fixed-point operations\n+;; -------------------------------------------------------------------------------\n+;; Includes:\n+;; - 12.2 Vector Single-Width Aaveraging Add and Subtract\n+;; - 12.3 Vector Single-Width Fractional Multiply with Rounding and Saturation\n+;; - 12.5 Vector Single-Width Scaling Shift Instructions\n+;; - 12.6 Vector Narrowing Fixed-Point Clip Instructions\n+;; -------------------------------------------------------------------------------\n+\n+(define_insn \"@pred_<sat_op><mode>\"\n+  [(set (match_operand:VI 0 \"register_operand\"           \"=vd, vr\")\n+\t(if_then_else:VI\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VI\n+\t    [(match_operand:VI 3 \"register_operand\"      \" vr, vr\")\n+\t     (match_operand:VI 4 \"register_operand\"      \" vr, vr\")] VSAT_OP)\n+\t  (match_operand:VI 2 \"vector_merge_operand\"     \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"v<sat_op>.vv\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"<sat_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+;; Handle GET_MODE_INNER (mode) = QImode, HImode, SImode.\n+(define_insn \"@pred_<sat_op><mode>_scalar\"\n+  [(set (match_operand:VI_QHS 0 \"register_operand\"       \"=vd, vr\")\n+\t(if_then_else:VI_QHS\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VI_QHS\n+\t    [(match_operand:VI_QHS 3 \"register_operand\"  \" vr, vr\")\n+\t     (match_operand:<VEL> 4 \"reg_or_0_operand\"   \" rJ, rJ\")] VSAT_ARITH_OP)\n+\t  (match_operand:VI_QHS 2 \"vector_merge_operand\" \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"v<sat_op>.vx\\t%0,%3,%z4%p1\"\n+  [(set_attr \"type\" \"<sat_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_<sat_op><mode>_scalar\"\n+  [(set (match_operand:VI 0 \"register_operand\"             \"=vd, vr\")\n+\t(if_then_else:VI\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"   \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"      \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"          \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"          \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"          \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VI\n+\t    [(match_operand:VI 3 \"register_operand\"        \" vr, vr\")\n+\t     (match_operand 4 \"pmode_reg_or_uimm5_operand\" \" rK, rK\")] VSAT_SHIFT_OP)\n+\t  (match_operand:VI 2 \"vector_merge_operand\"       \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"v<sat_op>.v%o4\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"<sat_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+;; Handle GET_MODE_INNER (mode) = DImode. We need to split them since\n+;; we need to deal with SEW = 64 in RV32 system.\n+(define_expand \"@pred_<sat_op><mode>_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\")\n+\t     (match_operand 5 \"vector_length_operand\")\n+\t     (match_operand 6 \"const_int_operand\")\n+\t     (match_operand 7 \"const_int_operand\")\n+\t     (match_operand 8 \"const_int_operand\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VI_D\n+\t    [(match_operand:VI_D 3 \"register_operand\")\n+\t     (match_operand:<VEL> 4 \"reg_or_int_operand\")] VSAT_ARITH_OP)\n+\t  (match_operand:VI_D 2 \"vector_merge_operand\")))]\n+  \"TARGET_VECTOR\"\n+  {\n+    if (!TARGET_64BIT)\n+      {\n+\trtx v = gen_reg_rtx (<MODE>mode);\n+\n+\tif (riscv_vector::simm32_p (operands[4]))\n+\t  {\n+\t    if (!rtx_equal_p (operands[4], const0_rtx))\n+\t      operands[4] = force_reg (Pmode, operands[4]);\n+\t    operands[4] = gen_rtx_SIGN_EXTEND (<VEL>mode, operands[4]);\n+\t  }\n+\telse\n+\t  {\n+\t    if (CONST_INT_P (operands[4]))\n+\t      operands[4] = force_reg (<VEL>mode, operands[4]);\n+\n+\t    riscv_vector::emit_nonvlmax_op (code_for_pred_broadcast (<MODE>mode),\n+\t\t\tv, operands[4], operands[5], <VM>mode);\n+\t    emit_insn (gen_pred_<sat_op><mode> (operands[0], operands[1],\n+\t\t\toperands[2], operands[3], v, operands[5],\n+\t\t\toperands[6], operands[7], operands[8]));\n+\t    DONE;\n+\t  }\n+      }\n+    else\n+      {\n+\tif (!rtx_equal_p (operands[4], const0_rtx))\n+\t  operands[4] = force_reg (<VEL>mode, operands[4]);\n+      }\n+  })\n+\n+(define_insn \"*pred_<sat_op><mode>_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\"         \"=vd, vr\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VI_D\n+\t    [(match_operand:VI_D 3 \"register_operand\"    \" vr, vr\")\n+\t     (match_operand:<VEL> 4 \"reg_or_0_operand\"   \" rJ, rJ\")] VSAT_ARITH_OP)\n+\t  (match_operand:VI_D 2 \"vector_merge_operand\"   \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"v<sat_op>.vx\\t%0,%3,%z4%p1\"\n+  [(set_attr \"type\" \"<sat_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*pred_<sat_op><mode>_extended_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\"            \"=vd, vr\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"    \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"       \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"           \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"           \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"           \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VI_D\n+\t    [(match_operand:VI_D 3 \"register_operand\"       \" vr, vr\")\n+\t     (sign_extend:<VEL>\n+\t       (match_operand:<VSUBEL> 4 \"reg_or_0_operand\" \" rJ, rJ\"))] VSAT_ARITH_OP)\n+\t  (match_operand:VI_D 2 \"vector_merge_operand\"      \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"v<sat_op>.vx\\t%0,%3,%z4%p1\"\n+  [(set_attr \"type\" \"<sat_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+;; CLIP\n+(define_insn \"@pred_narrow_clip<v_su><mode>\"\n+  [(set (match_operand:<V_DOUBLE_TRUNC> 0 \"register_operand\"           \"=vd, vr,  &vr, vd, vr,  &vr\")\n+\t(if_then_else:<V_DOUBLE_TRUNC>\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"               \" vm,Wc1,vmWc1, vm,Wc1,vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"                  \" rK, rK,   rK, rK, rK,   rK\")\n+\t     (match_operand 6 \"const_int_operand\"                      \"  i,  i,    i,  i,  i,    i\")\n+\t     (match_operand 7 \"const_int_operand\"                      \"  i,  i,    i,  i,  i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"                      \"  i,  i,    i,  i,  i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:<V_DOUBLE_TRUNC>\n+\t    [(match_operand:VWEXTI 3 \"register_operand\"                 \"  0,  0,   vr,  0,  0,   vr\")\n+\t     (match_operand:<V_DOUBLE_TRUNC> 4 \"vector_shift_operand\"   \" vr, vr,   vr, vk, vk,   vk\")] VNCLIP)\n+\t  (match_operand:<V_DOUBLE_TRUNC> 2 \"vector_merge_operand\"      \"0vu,0vu,  0vu,0vu,0vu,  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vnclip<v_su>.w%o4\\t%0,%3,%v4%p1\"\n+  [(set_attr \"type\" \"vnclip\")\n+   (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n+\n+(define_insn \"@pred_narrow_clip<v_su><mode>_scalar\"\n+  [(set (match_operand:<V_DOUBLE_TRUNC> 0 \"register_operand\"           \"=vd, vr,  &vr, vd, vr,  &vr\")\n+\t(if_then_else:<V_DOUBLE_TRUNC>\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"               \" vm,Wc1,vmWc1, vm,Wc1,vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"                  \" rK, rK,   rK, rK, rK,   rK\")\n+\t     (match_operand 6 \"const_int_operand\"                      \"  i,  i,    i,  i,  i,    i\")\n+\t     (match_operand 7 \"const_int_operand\"                      \"  i,  i,    i,  i,  i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"                      \"  i,  i,    i,  i,  i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:<V_DOUBLE_TRUNC>\n+\t    [(match_operand:VWEXTI 3 \"register_operand\"                \"  0,  0,   vr,  0,  0,   vr\")\n+\t     (match_operand 4 \"pmode_reg_or_uimm5_operand\"             \"  r,  r,    r,  K,  K,    K\")] VNCLIP)\n+\t  (match_operand:<V_DOUBLE_TRUNC> 2 \"vector_merge_operand\"     \"0vu,0vu,  0vu,0vu,0vu,  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vnclip<v_su>.w%o4\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vnclip\")\n+   (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])"}]}