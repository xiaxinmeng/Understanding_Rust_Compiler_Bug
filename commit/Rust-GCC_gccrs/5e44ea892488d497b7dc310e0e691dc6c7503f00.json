{"sha": "5e44ea892488d497b7dc310e0e691dc6c7503f00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU0NGVhODkyNDg4ZDQ5N2I3ZGMzMTBlMGU2OTFkYzZjNzUwM2YwMA==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-03-02T21:21:13Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-03-02T21:21:13Z"}, "message": "re PR bootstrap/49486 (Bootstrap failure)\n\n\tPR target/49486\n\t* config/sh/sh.md (negdi2): Add TARGET_SH1 condition.\n\t(absdi2): New expander.\n\t(*absdi2, *negabsdi2, negdi_cond): New insns and splits.\n\t* gcc.target/sh/pr49468-si.c: Skip unsupported test for SH64.\n\t* gcc.target/sh/pr49468-di.c: New.\n\nFrom-SVN: r184829", "tree": {"sha": "399f7971c07ad6a88b4eb2b70f60d0af368c6e76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/399f7971c07ad6a88b4eb2b70f60d0af368c6e76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e44ea892488d497b7dc310e0e691dc6c7503f00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e44ea892488d497b7dc310e0e691dc6c7503f00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e44ea892488d497b7dc310e0e691dc6c7503f00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e44ea892488d497b7dc310e0e691dc6c7503f00/comments", "author": null, "committer": null, "parents": [{"sha": "2aeaf0fb26f98ca166fb55afd952da3dc739582b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aeaf0fb26f98ca166fb55afd952da3dc739582b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aeaf0fb26f98ca166fb55afd952da3dc739582b"}], "stats": {"total": 115, "additions": 114, "deletions": 1}, "files": [{"sha": "eabe45f2dfd468c360e03eb96eac244f53df6590", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e44ea892488d497b7dc310e0e691dc6c7503f00/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e44ea892488d497b7dc310e0e691dc6c7503f00/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e44ea892488d497b7dc310e0e691dc6c7503f00", "patch": "@@ -1,3 +1,10 @@\n+2012-03-02  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/49486\n+\t* config/sh/sh.md (negdi2): Add TARGET_SH1 condition.\n+\t(absdi2): New expander.\n+\t(*absdi2, *negabsdi2, negdi_cond): New insns and splits.\n+\n 2012-03-02  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* config/sh/sync.md (atomic_exchange<mode>): New expander."}, {"sha": "56a0f3c5acf0732cadd084c9a2802c63e7d47df7", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 77, "deletions": 1, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e44ea892488d497b7dc310e0e691dc6c7503f00/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e44ea892488d497b7dc310e0e691dc6c7503f00/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=5e44ea892488d497b7dc310e0e691dc6c7503f00", "patch": "@@ -4411,7 +4411,7 @@ label:\n   [(set (match_operand:DI 0 \"arith_reg_dest\" \"\")\n \t(neg:DI (match_operand:DI 1 \"arith_reg_operand\" \"\")))\n    (clobber (reg:SI T_REG))]\n-  \"\"\n+  \"TARGET_SH1\"\n   \"\")\n \n (define_insn_and_split \"*negdi2\"\n@@ -4531,6 +4531,82 @@ label:\n   [(set_attr \"type\" \"arith\") ;; poor approximation\n    (set_attr \"length\" \"4\")])\n \n+(define_expand \"absdi2\"\n+  [(set (match_operand:DI 0 \"arith_reg_dest\" \"\")\n+\t(abs:DI (match_operand:DI 1 \"arith_reg_operand\" \"\")))\n+   (clobber (reg:SI T_REG))]\n+  \"TARGET_SH1\"\n+  \"\")\n+\n+(define_insn_and_split \"*absdi2\"\n+  [(set (match_operand:DI 0 \"arith_reg_dest\" \"=r\")\n+\t(abs:DI (match_operand:DI 1 \"arith_reg_operand\" \"r\")))]\n+  \"TARGET_SH1\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+{\n+  int high_word = (TARGET_LITTLE_ENDIAN ? 1 : 0);\n+  rtx high_src = operand_subword (operands[1], high_word, 0, DImode);\n+  emit_insn (gen_cmpgesi_t (high_src, const0_rtx));\n+  emit_insn (gen_negdi_cond (operands[0], operands[1], operands[1],\n+\t\t\t     const1_rtx));\n+  DONE;\n+})\n+\n+(define_insn_and_split \"*negabsdi2\"\n+  [(set (match_operand:DI 0 \"arith_reg_dest\" \"=r\")\n+  \t(neg:DI (abs:DI (match_operand:DI 1 \"arith_reg_operand\" \"r\"))))]\n+  \"TARGET_SH1\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+{\n+  int high_word = (TARGET_LITTLE_ENDIAN ? 1 : 0);\n+  rtx high_src = operand_subword (operands[1], high_word, 0, DImode);\n+\n+  emit_insn (gen_cmpgesi_t (high_src, const0_rtx));\n+  emit_insn (gen_negdi_cond (operands[0], operands[1], operands[1],\n+\t\t\t     const0_rtx));\n+  DONE;\n+})\n+\n+(define_insn_and_split \"negdi_cond\"\n+  [(set (match_operand:DI 0 \"arith_reg_dest\" \"=r,r\")\n+\t(if_then_else:DI (eq:SI (reg:SI T_REG)\n+\t\t\t\t(match_operand:SI 3 \"const_int_operand\" \"M,N\"))\n+\t (match_operand:DI 1 \"arith_reg_operand\" \"r,r\")\n+\t (neg:DI (match_operand:DI 2 \"arith_reg_operand\" \"1,1\"))))]\n+  \"TARGET_SH1\"\n+  \"#\"\n+  \"TARGET_SH1\"\n+  [(const_int 0)]\n+{\n+  int low_word = (TARGET_LITTLE_ENDIAN ? 0 : 1);\n+  int high_word = (TARGET_LITTLE_ENDIAN ? 1 : 0);\n+\n+  rtx low_src = operand_subword (operands[1], low_word, 0, DImode);\n+  rtx high_src = operand_subword (operands[1], high_word, 0, DImode);\n+\n+  rtx low_dst = operand_subword (operands[0], low_word, 1, DImode);\n+  rtx high_dst = operand_subword (operands[0], high_word, 1, DImode);\n+\n+  rtx skip_neg_label = gen_label_rtx ();\n+\n+  emit_insn (gen_movsi (low_dst, low_src));\n+  emit_insn (gen_movsi (high_dst, high_src));\n+\n+  emit_jump_insn (INTVAL (operands[3]) \n+\t\t  ? gen_branch_true (skip_neg_label)\n+\t\t  : gen_branch_false (skip_neg_label));\n+\n+  if (!INTVAL (operands[3]))\n+    emit_insn (gen_clrt ());\n+\n+  emit_insn (gen_negc (low_dst, low_src));\n+  emit_label_after (skip_neg_label, emit_insn (gen_negc (high_dst, high_src)));\n+  DONE;\n+})\n \f\n ;; -------------------------------------------------------------------------\n ;; Zero extension instructions"}, {"sha": "9c4fc1acc600b399868aa95ef19f6efed49a9c02", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e44ea892488d497b7dc310e0e691dc6c7503f00/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e44ea892488d497b7dc310e0e691dc6c7503f00/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5e44ea892488d497b7dc310e0e691dc6c7503f00", "patch": "@@ -1,3 +1,9 @@\n+2012-03-02  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/49486\n+\t* gcc.target/sh/pr49468-si.c: Skip unsupported test for SH64.\n+\t* gcc.target/sh/pr49468-di.c: New.\n+\n 2012-03-02  Maxim Kuvyrkov  <maxim@codesourcery.com>\n \n \t* gcc.dg/graphite/pr50561.c: Update."}, {"sha": "86fe21dbbf172e28e8fd9e71458b0c5eaaeae7f5", "filename": "gcc/testsuite/gcc.target/sh/pr49468-di.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e44ea892488d497b7dc310e0e691dc6c7503f00/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49468-di.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e44ea892488d497b7dc310e0e691dc6c7503f00/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49468-di.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49468-di.c?ref=5e44ea892488d497b7dc310e0e691dc6c7503f00", "patch": "@@ -0,0 +1,23 @@\n+/* Check that 64 bit integer abs is generated as negc instruction pairs\n+   and conditional branch instead of default branch-free code.  */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1\" } */\n+/* { dg-final { scan-assembler-times \"negc\" 4 } } */\n+\n+\n+/* Normal integer absolute value.  */\n+long long\n+abs_0 (long long i)\n+{\n+  return (i < 0) ? -i : i;\n+}\n+\n+/*  Negated integer absolute value.\n+    The generated code should be the same, except that the branch \n+    condition is inverted.  */\n+long long\n+abs_1 (long long i)\n+{\n+  return (i > 0) ? -i : i;\n+}"}, {"sha": "e581b2a1f6ea6f55c01ba346229aebe138a4d80d", "filename": "gcc/testsuite/gcc.target/sh/pr49468-si.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e44ea892488d497b7dc310e0e691dc6c7503f00/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49468-si.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e44ea892488d497b7dc310e0e691dc6c7503f00/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49468-si.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49468-si.c?ref=5e44ea892488d497b7dc310e0e691dc6c7503f00", "patch": "@@ -1,5 +1,6 @@\n /* Check that 32 bit integer abs is generated as neg instruction and\n    conditional branch instead of default branch-free code.  */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n /* { dg-do compile { target \"sh*-*-*\" } } */\n /* { dg-options \"-O1\" } */\n /* { dg-final { scan-assembler-times \"neg\" 2 } } */"}]}