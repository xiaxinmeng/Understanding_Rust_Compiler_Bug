{"sha": "0d5e0c1bf0e68323091e3f3152ad4676cd59e53d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ1ZTBjMWJmMGU2ODMyMzA5MWUzZjMxNTJhZDQ2NzZjZDU5ZTUzZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-07-04T16:26:08Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-07-04T16:26:08Z"}, "message": "re PR target/49600 (Bad SSE2 int->float split in i386.md)\n\n\tPR target/49600\n\t* config/i386/i386.md (SSE2 int->float split): Push operand 1 in\n\tgeneral register to memory for !TARGET_INTER_UNIT_MOVES.\n\nFrom-SVN: r175817", "tree": {"sha": "67973d434f0412b22def800488ed3f53fb7927de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67973d434f0412b22def800488ed3f53fb7927de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d5e0c1bf0e68323091e3f3152ad4676cd59e53d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d5e0c1bf0e68323091e3f3152ad4676cd59e53d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d5e0c1bf0e68323091e3f3152ad4676cd59e53d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d5e0c1bf0e68323091e3f3152ad4676cd59e53d/comments", "author": null, "committer": null, "parents": [{"sha": "a648cfe8b3e10819f1a88ccc6912ca1529454024", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a648cfe8b3e10819f1a88ccc6912ca1529454024", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a648cfe8b3e10819f1a88ccc6912ca1529454024"}], "stats": {"total": 105, "additions": 52, "deletions": 53}, "files": [{"sha": "230bc256eadb105df34bcfe6b2bf7dc02f032410", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 50, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d5e0c1bf0e68323091e3f3152ad4676cd59e53d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d5e0c1bf0e68323091e3f3152ad4676cd59e53d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d5e0c1bf0e68323091e3f3152ad4676cd59e53d", "patch": "@@ -1,3 +1,9 @@\n+2011-07-04  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/49600\n+\t* config/i386/i386.md (SSE2 int->float split): Push operand 1 in\n+\tgeneral register to memory for !TARGET_INTER_UNIT_MOVES.\n+\n 2011-07-04  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/44643\n@@ -8,8 +14,7 @@\n \n \t* doc/extend.texi (AVR Built-in Functions): Update documentation\n \tof __builtin_avr_fmul*.\n-\t* config/avr/avr.c (avr_init_builtins): Don't depend on\n-\tAVR_HAVE_MUL.\n+\t* config/avr/avr.c (avr_init_builtins): Don't depend on AVR_HAVE_MUL.\n \t* config/avr/avr-c.c (avr_cpu_cpp_builtins): Ditto.\n \t* config/avr/avr.md (fmul): Rename to fmul_insn.\n \t(fmuls): Rename to fmuls_insn.\n@@ -107,8 +112,7 @@\n 2011-07-01  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/49603\n-\t* tree-vect-stmts.c (vectorizable_load): Remove unnecessary\n-\tassert.\n+\t* tree-vect-stmts.c (vectorizable_load): Remove unnecessary assert.\n \n 2011-06-30  Martin Jambor  <mjambor@suse.cz>\n \n@@ -188,8 +192,7 @@\n \tPR tree-optimization/46787\n \t* tree-data-ref.c (dr_address_invariant_p): Remove.\n \t(find_data_references_in_stmt): Invariant accesses are ok now.\n-\t* tree-vect-stmts.c (vectorizable_load): Handle invariant\n-\tloads.\n+\t* tree-vect-stmts.c (vectorizable_load): Handle invariant loads.\n \t* tree-vect-data-refs.c (vect_analyze_data_ref_access): Allow\n \tinvariant loads.\n \n@@ -275,9 +278,8 @@\n \n \t* config/arm/unwind-arm.c (enum __cxa_type_match_result): New.\n \t(cxa_type_match): Correct declaration.\n-\t(__gnu_unwind_pr_common): Reconstruct\n-\tadditional indirection when __cxa_type_match returns\n-\tsucceeded_with_ptr_to_base.\n+\t(__gnu_unwind_pr_common): Reconstruct additional indirection\n+\twhen __cxa_type_match returns succeeded_with_ptr_to_base.\n \n 2011-06-29  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n@@ -293,7 +295,7 @@\n \tDetect subregs via recursive descent instead of via SUBREG_LOC.\n \n 2011-06-29  Georg-Johann Lay  <avr@gjlay.de>\n-\t\n+\n \t* config/avr/avr.c (avr_encode_section_info): Dispatch to\n \tdefault_encode_section_info.\n \n@@ -310,22 +312,21 @@\n 2011-06-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/49567\n-\t* dwarf2out.c (mem_loc_descriptor) <case ZERO_EXTEND>: Give up\n-\tfor non-MODE_INT modes instead of asserting the mode has MODE_INT\n-\tclass.\n+\t* dwarf2out.c (mem_loc_descriptor) <case ZERO_EXTEND>: Give up for\n+\tnon-MODE_INT modes instead of asserting the mode has MODE_INT class.\n \n 2011-06-29  Georg-Johann Lay  <avr@gjlay.de>\n-\t\n+\n \tPR target/34734\n-\t* config/avr/avr.c (avr_handle_progmem_attribute): Move warning \n+\t* config/avr/avr.c (avr_handle_progmem_attribute): Move warning\n \tabout uninitialized data attributed 'progmem' from here...\n \t(avr_encode_section_info): ...to this new function.\n \t(TARGET_ENCODE_SECTION_INFO): New define.\n \t(avr_section_type_flags): For data in \".progmem.data\", remove\n \tsection flag SECTION_WRITE.\n \n 2011-06-29  Georg-Johann Lay  <avr@gjlay.de>\n-\t\n+\n \t* config/avr/t-avr (LIB1ASMFUNCS): Add _mulhisi3, _umulhisi3,\n \t_xmulhisi3_exit.\n \t* config/avr/libgcc.S (_xmulhisi3_exit): New Function.\n@@ -387,13 +388,12 @@\n \t* gcc.c: Include params.h.\n \t(set_option_handlers): Also use common_handle_option and\n \ttarget_handle_option.\n-\t(main): Call global_init_params, finish_params and\n-\tinit_options_struct.\n+\t(main): Call global_init_params, finish_params and init_options_struct.\n \t* opts.c (debug_type_names): Move from toplev.c.\n \t(print_filtered_help): Access quiet_flag through opts pointer.\n-\t(common_handle_option): Return early in the driver for some\n-\toptions.  Access in_lto_p, dwarf_version and\n-\twarn_maybe_uninitialized through opts pointer.\n+\t(common_handle_option): Return early in the driver for some options.\n+\tAccess in_lto_p, dwarf_version and warn_maybe_uninitialized through\n+\topts pointer.\n \t* toplev.c (in_lto_p): Move to common.opt.\n \t(debug_type_names): Move to opts.c.\n \t* Makefile.in (OBJS): Remove opts.o.\n@@ -402,8 +402,7 @@\n \n 2011-06-28  Kai Tietz  <ktietz@redhat.com>\n \n-\t* tree-ssa-forwprop.c (simplify_bitwise_binary): Improve\n-\ttype sinking.\n+\t* tree-ssa-forwprop.c (simplify_bitwise_binary): Improve type sinking.\n \n 2011-06-28  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n \n@@ -437,8 +436,7 @@\n \t(genprogrtl): Add attr-common.\n \t* genattr.c (main): Include insn-attr-common.h.  Don't generate\n \tdefinitions of DELAY_SLOTS or INSN_SCHEDULING.\n-\t* opts.c: Include insn-attr-common.h instead of rtl.h and\n-\tinsn-attr.h.\n+\t* opts.c: Include insn-attr-common.h instead of rtl.h and insn-attr.h.\n \n 2011-06-28  Georg-Johann Lay  <avr@gjlay.de>\n \n@@ -535,9 +533,8 @@\n \n 2011-06-27  Nick Clifton  <nickc@redhat.com>\n \n-\t* config/mn10300/mn10300.md (clzsi2): Use XOR after BSCH to\n-\tconvert bit position of highest bit set into a count of the high\n-\tzero bits.\n+\t* config/mn10300/mn10300.md (clzsi2): Use XOR after BSCH to convert\n+\tbit position of highest bit set into a count of the high zero bits.\n \n 2011-06-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n@@ -559,8 +556,8 @@\n \n \t* tree-ssa-math-opts.c (do_shift_rotate): Zero bits\n \tout of type precision after operation.\n-\t(find_bswap): Take for limit value the integer auto-\n-\tpromotion into account.\n+\t(find_bswap): Take for limit value the integer auto-promotion\n+\tinto account.\n \n 2011-06-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n@@ -590,8 +587,7 @@\n \tclear some builtins on VMS.  Calls vms_patch_builtins.\n \t(ia64_asm_output_external): Remove DO_CRTL_NAME.\n \t* config/ia64/vms64.h: Do not include vms-crtl-64.h\n-\t* config.gcc (*-*-*vms*): Define extra_objs, target_gtfiles,\n-\ttm_p_file.\n+\t* config.gcc (*-*-*vms*): Define extra_objs, target_gtfiles, tm_p_file.\n \n 2011-06-27  Tristan Gingold  <gingold@adacore.com>\n \n@@ -694,8 +690,7 @@\n \n \tPR target/49335\n \t* config/arm/predicates.md (add_operator): New.\n-\t* config/arm/arm.md (\"*arith_shiftsi\"): Fix for SP reg usage\n-\tin Thumb2.\n+\t* config/arm/arm.md (\"*arith_shiftsi\"): Fix for SP reg usage in Thumb2.\n \n 2011-06-24  Andi Kleen  <ak@linux.intel.com>\n \n@@ -791,9 +786,8 @@\n \n \tPR libgomp/49490\n \t* omp-low.c (expand_omp_for_static_nochunk): Only\n-\tuse n ceil/ nthreads size for the first\n-\tn % nthreads threads in the team instead of\n-\tall threads except for the last few ones which\n+\tuse n ceil/ nthreads size for the first n % nthreads threads in the\n+\tteam instead of all threads except for the last few ones which\n \tget less work or none at all.\n \n \tPR debug/49496\n@@ -814,8 +808,7 @@\n \n 2011-06-22  Nathan Sidwell  <nathan@codesourcery.com>\n \n-\t* config/arm/arm.h (OPTION_DEFAULT_SPECS): Fix -mtls-dialect\n-\ttypo.\n+\t* config/arm/arm.h (OPTION_DEFAULT_SPECS): Fix -mtls-dialect typo.\n \t* config.gcc (arm*-*-linux*): Default to gnu tls.\n \t(arm*-*-*): Add --with-tls option.\n \t(all_defaults): Add 'tls'.\n@@ -851,7 +844,7 @@\n \t* cgraphunit.c (assemble_thunk): Use correct return type.\n \n 2011-06-22  Dmitry Plotnikov  <dplotnikov@ispras.ru>\n-\tDmitry Melnik  <dm@ispras.ru>\n+\t    Dmitry Melnik  <dm@ispras.ru>\n \n \t* config/arm/arm.c (neon_immediate_valid_for_shift): New function.\n \t(neon_output_shift_immediate): Ditto.\n@@ -897,9 +890,8 @@\n \tof base type reference as argument.\n \t(resolve_addr_in_expr): Likewise.  Fix keep computation.\n \t(convert_descriptor_to_signed): Renamed to...\n-\t(convert_descriptor_to_mode): ... this.  For wider types convert\n-\tto unsigned instead of signed, for <= DWARF2_ADDR_SIZE convert to\n-\tuntyped.\n+\t(convert_descriptor_to_mode): ... this.  For wider types convert to\n+\tunsigned instead of signed, for <= DWARF2_ADDR_SIZE convert to untyped.\n \t(typed_binop): New function.\n \t(scompare_loc_descriptor, ucompare_loc_descriptor,\n \tminmax_loc_descriptor, mem_loc_descriptor): For wider integer modes\n@@ -952,8 +944,7 @@\n \tdebug args vector from old_decl to new_decl.\n \t* ipa-prop.c (ipa_modify_call_arguments): For optimized away\n \tor modified parameters, add debug bind stmts before call\n-\tsetting DEBUG_EXPR_DECL which is remembered in debug args\n-\tvector.\n+\tsetting DEBUG_EXPR_DECL which is remembered in debug args vector.\n \t* cfgexpand.c (expand_call_stmt): Call expand_debug_expr\n \ton DECL_DEBUG_EXPRs from debug args vector.\n \t(expand_debug_source_expr): New function.\n@@ -962,9 +953,8 @@\n \t* var-tracking.c (prepare_call_arguments): Add debug args\n \tto call_arguments if any.\n \t* dwarf2out.c (dwarf_stack_op_name, size_of_loc_descr,\n-\toutput_loc_operands, output_loc_operands_raw,\n-\tresolve_addr_in_expr, compare_loc_operands): Handle\n-\tDW_OP_GNU_parameter_ref.\n+\toutput_loc_operands, output_loc_operands_raw, resolve_addr_in_expr,\n+\tcompare_loc_operands): Handle DW_OP_GNU_parameter_ref.\n \t(get_ref_die_offset, parameter_ref_descriptor): New functions.\n \t(mem_loc_descriptor): Handle DEBUG_PARAMETER_REF.\n \t(gen_subprogram_die): Handle parameters identified by\n@@ -997,7 +987,7 @@\n \tif the function has no attributes.\n \t* tree.c (is_attribute_with_length_p): Removed.\n \t(is_attribute_p): Removed.\n-\t(private_is_attribute_p): New.  \n+\t(private_is_attribute_p): New.\n \t(private_lookup_attribute): New.\n \t(lookup_attribute): Removed.\n \t(lookup_ident_attribute): New.\n@@ -1016,7 +1006,7 @@\n \tin the form 'text', not '__text__'.\n \t(private_is_attribute_p, private_lookup_attribute): New.\n \tUpdated comments.\n-\t\n+\n 2011-06-21  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* builtins.c: Add sync_ or SYNC__ to builtin names."}, {"sha": "a52941bd8569d59426a3d763a82e1aaeb0966a9c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d5e0c1bf0e68323091e3f3152ad4676cd59e53d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d5e0c1bf0e68323091e3f3152ad4676cd59e53d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=0d5e0c1bf0e68323091e3f3152ad4676cd59e53d", "patch": "@@ -5022,11 +5022,20 @@\n   if (GET_CODE (op1) == SUBREG)\n     op1 = SUBREG_REG (op1);\n \n-  if (GENERAL_REG_P (op1) && TARGET_INTER_UNIT_MOVES)\n+  if (GENERAL_REG_P (op1))\n     {\n       operands[4] = simplify_gen_subreg (V4SImode, operands[0], <MODE>mode, 0);\n-      emit_insn (gen_sse2_loadld (operands[4],\n-\t\t\t\t  CONST0_RTX (V4SImode), operands[1]));\n+      if (TARGET_INTER_UNIT_MOVES)\n+\temit_insn (gen_sse2_loadld (operands[4],\n+\t\t\t\t    CONST0_RTX (V4SImode), operands[1]));\n+      else\n+\t{\n+\t  operands[5] = ix86_force_to_memory (GET_MODE (operands[1]),\n+\t\t\t\t\t      operands[1]);\n+\t  emit_insn (gen_sse2_loadld (operands[4],\n+\t\t\t\t      CONST0_RTX (V4SImode), operands[5]));\n+\t  ix86_free_from_memory (GET_MODE (operands[1]));\n+\t}\n     }\n   /* We can ignore possible trapping value in the\n      high part of SSE register for non-trapping math. */"}]}