{"sha": "bab651ad74c5b68cbb1405fe407934d1d9f8aa77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFiNjUxYWQ3NGM1YjY4Y2JiMTQwNWZlNDA3OTM0ZDFkOWY4YWE3Nw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-12-05T19:32:59Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-12-05T19:32:59Z"}, "message": "re PR fortran/29912 ([4.1 only] Gfortran: string array functions behaving incorrectly...)\n\n2006-12-05  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/29912\n\t* trans-expr.c (gfc_trans_arrayfunc_assign): Return NULL if the\n\tlhs and rhs character lengths are not constant and equal for\n\tcharacter array valued functions.\n\n2006-12-05  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/29912\n\t* gfortran.dg/char_result_12.f90: New test.\n\nFrom-SVN: r119554", "tree": {"sha": "86e3992ce63ff1b46d60b5b210ed049b7e036c03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86e3992ce63ff1b46d60b5b210ed049b7e036c03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bab651ad74c5b68cbb1405fe407934d1d9f8aa77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bab651ad74c5b68cbb1405fe407934d1d9f8aa77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bab651ad74c5b68cbb1405fe407934d1d9f8aa77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bab651ad74c5b68cbb1405fe407934d1d9f8aa77/comments", "author": null, "committer": null, "parents": [{"sha": "66087ed002040eb81038cf79937500809590dadd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66087ed002040eb81038cf79937500809590dadd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66087ed002040eb81038cf79937500809590dadd"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "a65b4a7319600d7cf4ff3a0ab4145b47273998a2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab651ad74c5b68cbb1405fe407934d1d9f8aa77/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab651ad74c5b68cbb1405fe407934d1d9f8aa77/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=bab651ad74c5b68cbb1405fe407934d1d9f8aa77", "patch": "@@ -1,3 +1,10 @@\n+2006-12-05  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/29912\n+\t* trans-expr.c (gfc_trans_arrayfunc_assign): Return NULL if the\n+\tlhs and rhs character lengths are not constant and equal for\n+\tcharacter array valued functions.\n+\n 2006-12-04  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/29962"}, {"sha": "7c064ffd827f64976390c4a828bf1a528f7d814d", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab651ad74c5b68cbb1405fe407934d1d9f8aa77/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab651ad74c5b68cbb1405fe407934d1d9f8aa77/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=bab651ad74c5b68cbb1405fe407934d1d9f8aa77", "patch": "@@ -3382,6 +3382,23 @@ gfc_trans_arrayfunc_assign (gfc_expr * expr1, gfc_expr * expr2)\n       || expr2->symtree->n.sym->attr.allocatable)\n     return NULL;\n \n+  /* Character array functions need temporaries unless the\n+     character lengths are the same.  */\n+  if (expr2->ts.type == BT_CHARACTER && expr2->rank > 0)\n+    {\n+      if (expr1->ts.cl->length == NULL\n+\t    || expr1->ts.cl->length->expr_type != EXPR_CONSTANT)\n+\treturn NULL;\n+\n+      if (expr2->ts.cl->length == NULL\n+\t    || expr2->ts.cl->length->expr_type != EXPR_CONSTANT)\n+\treturn NULL;\n+\n+      if (mpz_cmp (expr1->ts.cl->length->value.integer,\n+\t\t     expr2->ts.cl->length->value.integer) != 0)\n+\treturn NULL;\n+    }\n+\n   /* Check that no LHS component references appear during an array\n      reference. This is needed because we do not have the means to\n      span any arbitrary stride with an array descriptor. This check"}, {"sha": "363e298502a2b124e281df4c09cc2b73fc37aa70", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab651ad74c5b68cbb1405fe407934d1d9f8aa77/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab651ad74c5b68cbb1405fe407934d1d9f8aa77/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bab651ad74c5b68cbb1405fe407934d1d9f8aa77", "patch": "@@ -1,3 +1,8 @@\n+2006-12-05  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/29912\n+\t* gfortran.dg/char_result_12.f90: New test.\n+\n 2006-12-05  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.dg/vect/vect.exp: Add support for -fno-math-errno tests."}, {"sha": "b6ddfc089ac35457fe3d78ac42f209de04169a83", "filename": "gcc/testsuite/gfortran.dg/char_result_12.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab651ad74c5b68cbb1405fe407934d1d9f8aa77/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab651ad74c5b68cbb1405fe407934d1d9f8aa77/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_12.f90?ref=bab651ad74c5b68cbb1405fe407934d1d9f8aa77", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do run }\n+! Tests the fix for PR29912, in which the call to JETTER\n+! would cause a segfault beause a temporary was not being written.\n+!\n+! COntributed by Philip Mason  <pmason@ricardo.com>\n+!\n+ program testat\n+ character(len=4)   :: ctemp(2)\n+ character(len=512) :: temper(2)\n+ !\n+ !------------------------\n+ !'This was OK.'\n+ !------------------------\n+ temper(1) = 'doncaster'\n+ temper(2) = 'uxbridge'\n+ ctemp     = temper\n+ if (any (ctemp /= [\"donc\", \"uxbr\"])) call abort ()\n+ !\n+ !------------------------\n+ !'This went a bit wrong.'\n+ !------------------------\n+ ctemp = jetter(1,2)\n+ if (any (ctemp /= [\"donc\", \"uxbr\"])) call abort ()\n+\n+ contains\n+   function jetter(id1,id2)\n+   character(len=512) :: jetter(id1:id2)\n+   jetter(id1) = 'doncaster'\n+   jetter(id2) = 'uxbridge'\n+   end function jetter\n+ end program testat"}]}