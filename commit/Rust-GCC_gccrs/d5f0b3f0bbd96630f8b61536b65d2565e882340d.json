{"sha": "d5f0b3f0bbd96630f8b61536b65d2565e882340d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVmMGIzZjBiYmQ5NjYzMGY4YjYxNTM2YjY1ZDI1NjVlODgyMzQwZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2017-11-03T00:13:06Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2017-11-03T00:13:06Z"}, "message": "re PR c++/81957 (ICE decltype)\n\n/cp\n2017-11-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/81957\n\t* pt.c (make_pack_expansion): Add tsubst_flags_t parameter.\n\t(expand_integer_pack, convert_template_argument, coerce_template_parms,\n\tgen_elem_of_pack_expansion_instantiation, tsubst_pack_expansion,\n\tunify): Adjust calls.\n\t* tree.c (cp_build_qualified_type_real): Likewise.\n\t* cp-tree.h (make_pack_expansion): Adjust declaration.\n\n/testsuite\n2017-11-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/81957\n\t* g++.dg/cpp0x/variadic-crash5.C: New.\n\nFrom-SVN: r254361", "tree": {"sha": "f22b4ba4c1fa6ffe3bfc674bd9be70ccad197c87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f22b4ba4c1fa6ffe3bfc674bd9be70ccad197c87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5f0b3f0bbd96630f8b61536b65d2565e882340d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5f0b3f0bbd96630f8b61536b65d2565e882340d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5f0b3f0bbd96630f8b61536b65d2565e882340d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5f0b3f0bbd96630f8b61536b65d2565e882340d/comments", "author": null, "committer": null, "parents": [{"sha": "718afa1acdb7bb247fe69995f3939ed26ab43a42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/718afa1acdb7bb247fe69995f3939ed26ab43a42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/718afa1acdb7bb247fe69995f3939ed26ab43a42"}], "stats": {"total": 78, "additions": 63, "deletions": 15}, "files": [{"sha": "e7ea5da008a6dbd92a772d717916f032a099b21b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5f0b3f0bbd96630f8b61536b65d2565e882340d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5f0b3f0bbd96630f8b61536b65d2565e882340d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d5f0b3f0bbd96630f8b61536b65d2565e882340d", "patch": "@@ -1,3 +1,13 @@\n+2017-11-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/81957\n+\t* pt.c (make_pack_expansion): Add tsubst_flags_t parameter.\n+\t(expand_integer_pack, convert_template_argument, coerce_template_parms,\n+\tgen_elem_of_pack_expansion_instantiation, tsubst_pack_expansion,\n+\tunify): Adjust calls.\n+\t* tree.c (cp_build_qualified_type_real): Likewise.\n+\t* cp-tree.h (make_pack_expansion): Adjust declaration.\n+\n 2017-11-02  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-tree.h (IDENTIFIER_NEWDEL_OP_P): Restore, adjust."}, {"sha": "874cbcbd2bd78ea66f99958fb6b92b74c2372cba", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5f0b3f0bbd96630f8b61536b65d2565e882340d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5f0b3f0bbd96630f8b61536b65d2565e882340d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d5f0b3f0bbd96630f8b61536b65d2565e882340d", "patch": "@@ -6482,7 +6482,7 @@ extern bool uses_parameter_packs                (tree);\n extern bool template_parameter_pack_p           (const_tree);\n extern bool function_parameter_pack_p\t\t(const_tree);\n extern bool function_parameter_expanded_from_pack_p (tree, tree);\n-extern tree make_pack_expansion                 (tree);\n+extern tree make_pack_expansion                 (tree, tsubst_flags_t = tf_warning_or_error);\n extern bool check_for_bare_parameter_packs      (tree);\n extern tree build_template_info\t\t\t(tree, tree);\n extern tree get_template_info\t\t\t(const_tree);"}, {"sha": "710333ddabaca795be672775719bf0889f221f78", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5f0b3f0bbd96630f8b61536b65d2565e882340d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5f0b3f0bbd96630f8b61536b65d2565e882340d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=d5f0b3f0bbd96630f8b61536b65d2565e882340d", "patch": "@@ -3435,7 +3435,7 @@ expand_integer_pack (tree call, tree args, tsubst_flags_t complain,\n \t  call = copy_node (call);\n \t  CALL_EXPR_ARG (call, 0) = hi;\n \t}\n-      tree ex = make_pack_expansion (call);\n+      tree ex = make_pack_expansion (call, complain);\n       tree vec = make_tree_vec (1);\n       TREE_VEC_ELT (vec, 0) = ex;\n       return vec;\n@@ -3724,7 +3724,7 @@ uses_parameter_packs (tree t)\n    EXPR_PACK_EXPANSION, TYPE_PACK_EXPANSION, or TREE_LIST,\n    respectively.  */\n tree \n-make_pack_expansion (tree arg)\n+make_pack_expansion (tree arg, tsubst_flags_t complain)\n {\n   tree result;\n   tree parameter_packs = NULL_TREE;\n@@ -3770,7 +3770,9 @@ make_pack_expansion (tree arg)\n \n       if (parameter_packs == NULL_TREE)\n         {\n-          error (\"base initializer expansion %qT contains no parameter packs\", arg);\n+\t  if (complain & tf_error)\n+\t    error (\"base initializer expansion %qT contains no parameter packs\",\n+\t\t   arg);\n           delete ppd.visited;\n           return error_mark_node;\n         }\n@@ -3834,10 +3836,13 @@ make_pack_expansion (tree arg)\n   /* Make sure we found some parameter packs.  */\n   if (parameter_packs == NULL_TREE)\n     {\n-      if (TYPE_P (arg))\n-        error (\"expansion pattern %qT contains no argument packs\", arg);\n-      else\n-        error (\"expansion pattern %qE contains no argument packs\", arg);\n+      if (complain & tf_error)\n+\t{\n+\t  if (TYPE_P (arg))\n+\t    error (\"expansion pattern %qT contains no argument packs\", arg);\n+\t  else\n+\t    error (\"expansion pattern %qE contains no argument packs\", arg);\n+\t}\n       return error_mark_node;\n     }\n   PACK_EXPANSION_PARAMETER_PACKS (result) = parameter_packs;\n@@ -7694,7 +7699,7 @@ convert_template_argument (tree parm,\n                       if (DECL_TEMPLATE_TEMPLATE_PARM_P (val))\n                         val = TREE_TYPE (val);\n \t\t      if (TREE_CODE (orig_arg) == TYPE_PACK_EXPANSION)\n-\t\t\tval = make_pack_expansion (val);\n+\t\t\tval = make_pack_expansion (val, complain);\n                     }\n \t\t}\n \t      else\n@@ -8188,7 +8193,7 @@ coerce_template_parms (tree parms,\n \t      else if (TYPE_P (conv) && !TYPE_P (pattern))\n \t\t/* Recover from missing typename.  */\n \t\tTREE_VEC_ELT (inner_args, arg_idx)\n-\t\t  = make_pack_expansion (conv);\n+\t\t  = make_pack_expansion (conv, complain);\n \n               /* We don't know how many args we have yet, just\n                  use the unconverted ones for now.  */\n@@ -11161,7 +11166,7 @@ gen_elem_of_pack_expansion_instantiation (tree pattern,\n       the Ith element resulting from the substituting is going to\n       be a pack expansion as well.  */\n   if (ith_elem_is_expansion)\n-    t = make_pack_expansion (t);\n+    t = make_pack_expansion (t, complain);\n \n   return t;\n }\n@@ -11573,7 +11578,7 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n       /* We got some full packs, but we can't substitute them in until we\n \t have values for all the packs.  So remember these until then.  */\n \n-      t = make_pack_expansion (pattern);\n+      t = make_pack_expansion (pattern, complain);\n       PACK_EXPANSION_EXTRA_ARGS (t) = args;\n       return t;\n     }\n@@ -11588,7 +11593,7 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n \t\t\t /*integral_constant_expression_p=*/false);\n       else\n \tt = tsubst (pattern, args, complain, in_decl);\n-      t = make_pack_expansion (t);\n+      t = make_pack_expansion (t, complain);\n       return t;\n     }\n \n@@ -21323,7 +21328,7 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n \t  if (REFERENCE_REF_P (arg))\n \t    arg = TREE_OPERAND (arg, 0);\n \t  if (pexp)\n-\t    arg = make_pack_expansion (arg);\n+\t    arg = make_pack_expansion (arg, complain);\n \t  return unify (tparms, targs, TREE_OPERAND (parm, 0), arg,\n \t\t\tstrict, explain_p);\n \t}"}, {"sha": "b63f2ae4c5d269a13220ce8dfae8aa0afd52dc39", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5f0b3f0bbd96630f8b61536b65d2565e882340d/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5f0b3f0bbd96630f8b61536b65d2565e882340d/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=d5f0b3f0bbd96630f8b61536b65d2565e882340d", "patch": "@@ -1208,7 +1208,7 @@ cp_build_qualified_type_real (tree type,\n       tree t = PACK_EXPANSION_PATTERN (type);\n \n       t = cp_build_qualified_type_real (t, type_quals, complain);\n-      return make_pack_expansion (t);\n+      return make_pack_expansion (t, complain);\n     }\n \n   /* A reference or method type shall not be cv-qualified."}, {"sha": "6e2abdd9e171e15c720a19d336e800c06fdcc571", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5f0b3f0bbd96630f8b61536b65d2565e882340d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5f0b3f0bbd96630f8b61536b65d2565e882340d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d5f0b3f0bbd96630f8b61536b65d2565e882340d", "patch": "@@ -1,3 +1,8 @@\n+2017-11-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/81957\n+\t* g++.dg/cpp0x/variadic-crash5.C: New.\n+\n 2017-11-02  Steve Ellcey  <sellcey@cavium.com>\n \n \tPR target/79868"}, {"sha": "6866f39975ad2793fcceab8ffa63f99a2471c5fd", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-crash5.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5f0b3f0bbd96630f8b61536b65d2565e882340d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-crash5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5f0b3f0bbd96630f8b61536b65d2565e882340d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-crash5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-crash5.C?ref=d5f0b3f0bbd96630f8b61536b65d2565e882340d", "patch": "@@ -0,0 +1,28 @@\n+// PR c++/81957\n+// { dg-do compile { target c++11 } }\n+\n+template <class T, T v>\n+struct integral_constant { };\n+\n+struct f {\n+  template<bool b, typename Int>\n+  void operator()(integral_constant<bool,b>, Int i) {\n+  }\n+};\n+\n+template<bool...Bs, typename F, typename ...T>\n+auto dispatch(F f, T...t) -> decltype(f(integral_constant<bool,Bs>()..., t...)) {\n+  return f(integral_constant<bool,Bs>()..., t...);\n+}\n+\n+template<bool...Bs, typename F, typename ...T>\n+auto dispatch(F f, bool b, T...t) -> decltype(dispatch<Bs..., true>(f, t...)) {\n+  if (b)\n+    return dispatch<Bs..., true>(f, t...);\n+  else\n+    return dispatch<Bs..., false>(f, t...);\n+}\n+\n+int main() {\n+  dispatch(f(), true, 5);\n+}"}]}