{"sha": "9057bd6af94f176dd904b476534cc42158799ae5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA1N2JkNmFmOTRmMTc2ZGQ5MDRiNDc2NTM0Y2M0MjE1ODc5OWFlNQ==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-05-24T13:04:52Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-24T13:04:52Z"}, "message": "[Ada] Fix crash on formal containers\n\nThis patch modifies several mechanisms in the compiler:\n\n1) The handling of Ghost regions now records the start of the outermost ignored\n   Ghost region which is currently in effect.\n\n2) Generation of freeze actions for an arbitrary entity now inserts the actions\n   prior to the start of the outermost ignored Ghost region when the freezing\n   takes effect within an ignored Ghost region, but the entity being frozen is\n   \"living\". This ensures that any freeze actions associated with the living\n   entity will not be eliminated from the tree once ignored Ghost code is\n   stripped away.\n\n3) The Default_Initial_Condition and Invariant procedures are not treated as\n   primitives even when they apply to tagged types. These procedures already\n   employ class-wide precondition-like semantics to handle inheritance and\n   overriding. In addition, the procedures cannot be invoked from source and\n   should not be targets of dispatching calls.\n\n2018-05-24  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* expander.adb (Expand): Update the save and restore of the Ghost\n\tregion.\n\t* exp_ch3.adb (Freeze_Type): Likewise.\n\t* exp_disp.adb (Make_DT): Likewise.\n\t* exp_util.adb (Build_DIC_Procedure_Body): Likewise.\n\t(Build_DIC_Procedure_Declaration): Likewise.\n\t(Build_Invariant_Procedure_Body): Likewise.\n\t(Build_Invariant_Procedure_Declaration): Likewise.\n\t(Make_Predicate_Call): Likewise.\n\t* freeze.adb (Add_To_Result): Insert the freeze action of a living\n\tentity prior to the start of the enclosing ignored Ghost region.\n\t(Freeze_Entity): Update the save and restore of the Ghost region.\n\t* ghost.adb (Install_Ghost_Mode): Reimplemented.\n\t(Install_Ghost_Region): New routine.\n\t(Mark_And_Set_Ghost_Assignment): Install a region rather than a mode.\n\t(Mark_And_Set_Ghost_Body): Likewise.\n\t(Mark_And_Set_Ghost_Completion): Likewise.\n\t(Mark_And_Set_Ghost_Declaration): Likewise.\n\t(Mark_And_Set_Ghost_Instantiation): Likewise.\n\t(Mark_And_Set_Ghost_Procedure_Call): Likewise.\n\t(Name_To_Ghost_Mode): New routine.\n\t(Restore_Ghost_Region): New routine.\n\t* ghost.ads (Install_Ghost_Region): New routine.\n\t(Restore_Ghost_Region): New routine.\n\t* opt.ads: Add new global variable Ignored_Ghost_Region.\n\t* rtsfind.adb (Load_RTU): Update the save and restore of the Ghost\n\tregion. Install a clean region.\n\t* sem.adb (Analyze): Likewise.\n\t(Do_Analyze): Likewise.\n\t* sem_ch3.adb (Analyze_Object_Declaration): Likewise\n\t(Derive_Progenitor_Subprograms): Use local variable Iface_Alias to\n\tcapture the ultimate alias of the current primitive.\n\t(Process_Full_View): Update the save and restore of the Ghost region.\n\tDo not inherit DIC and invariant procedures.\n\t* sem_ch5.adb (Analyze_Assignment): Update the save and restore of the\n\tGhost region.\n\t* sem_ch6.adb (Analyze_Procedure_Call): Likewise.\n\t(Analyze_Subprogram_Body_Helper): Likewise.\n\t* sem_ch7.adb (Analyze_Package_Body_Helper): Likewise.\n\t* sem_ch12.adb (Analyze_Package_Instantiation): Likewise.\n\t(Analyze_Subprogram_Instantiation): Likewise.\n\t(Instantiate_Package_Body): Likewise.\n\t(Instantiate_Subprogram_Body): Likewise.\n\t* sem_ch13.adb (Build_Predicate_Functions): Likewise.\n\t(Build_Predicate_Function_Declaration): Likewise.\n\t* sem_disp.adb\n\t(Add_Dispatching_Operation): Do not consider DIC and invariant\n\tprocedures.\n\t(Check_Dispatching_Operation): Use Add_Dispatching_Operation to collect\n\ta dispatching subprogram.\n\t(Check_Operation_From_Private_View): Likewise.\n\t(Override_Dispatching_Operation): Likewise.\n\t* sem_prag.adb (Analyze_Contract_Cases_In_Decl_Part): Update the save\n\tand restore of the Ghost region.\n\t(Analyze_Initial_Condition_In_Decl_Part): Likewise.\n\t(Analyze_Pragma): Update the save and restore of the Ghost region.\n\t(Analyze_Pre_Post_Condition_In_Decl_Part): Likewise.\n\t* sem_util.adb (Is_Suitable_Primitive): New routine.\n\t* sem_util.ads (Is_Suitable_Primitive): New routine.\n\t* sinfo.ads: Update the section of Ghost regions.\n\ngcc/testsuite/\n\n\t* gnat.dg/formal_containers.adb: New testcase.\n\nFrom-SVN: r260648", "tree": {"sha": "997a1975d4d27d3f02d7214a4d6b041148013d1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/997a1975d4d27d3f02d7214a4d6b041148013d1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9057bd6af94f176dd904b476534cc42158799ae5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9057bd6af94f176dd904b476534cc42158799ae5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9057bd6af94f176dd904b476534cc42158799ae5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9057bd6af94f176dd904b476534cc42158799ae5/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "883ccddf496f6a6d037e72b49fee66878a11b1a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/883ccddf496f6a6d037e72b49fee66878a11b1a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/883ccddf496f6a6d037e72b49fee66878a11b1a1"}], "stats": {"total": 646, "additions": 451, "deletions": 195}, "files": [{"sha": "cad2b789fec9bafd7a2f167462bf90a2714b660b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9057bd6af94f176dd904b476534cc42158799ae5", "patch": "@@ -1,3 +1,66 @@\n+2018-05-24  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* expander.adb (Expand): Update the save and restore of the Ghost\n+\tregion.\n+\t* exp_ch3.adb (Freeze_Type): Likewise.\n+\t* exp_disp.adb (Make_DT): Likewise.\n+\t* exp_util.adb (Build_DIC_Procedure_Body): Likewise.\n+\t(Build_DIC_Procedure_Declaration): Likewise.\n+\t(Build_Invariant_Procedure_Body): Likewise.\n+\t(Build_Invariant_Procedure_Declaration): Likewise.\n+\t(Make_Predicate_Call): Likewise.\n+\t* freeze.adb (Add_To_Result): Insert the freeze action of a living\n+\tentity prior to the start of the enclosing ignored Ghost region.\n+\t(Freeze_Entity): Update the save and restore of the Ghost region.\n+\t* ghost.adb (Install_Ghost_Mode): Reimplemented.\n+\t(Install_Ghost_Region): New routine.\n+\t(Mark_And_Set_Ghost_Assignment): Install a region rather than a mode.\n+\t(Mark_And_Set_Ghost_Body): Likewise.\n+\t(Mark_And_Set_Ghost_Completion): Likewise.\n+\t(Mark_And_Set_Ghost_Declaration): Likewise.\n+\t(Mark_And_Set_Ghost_Instantiation): Likewise.\n+\t(Mark_And_Set_Ghost_Procedure_Call): Likewise.\n+\t(Name_To_Ghost_Mode): New routine.\n+\t(Restore_Ghost_Region): New routine.\n+\t* ghost.ads (Install_Ghost_Region): New routine.\n+\t(Restore_Ghost_Region): New routine.\n+\t* opt.ads: Add new global variable Ignored_Ghost_Region.\n+\t* rtsfind.adb (Load_RTU): Update the save and restore of the Ghost\n+\tregion. Install a clean region.\n+\t* sem.adb (Analyze): Likewise.\n+\t(Do_Analyze): Likewise.\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Likewise\n+\t(Derive_Progenitor_Subprograms): Use local variable Iface_Alias to\n+\tcapture the ultimate alias of the current primitive.\n+\t(Process_Full_View): Update the save and restore of the Ghost region.\n+\tDo not inherit DIC and invariant procedures.\n+\t* sem_ch5.adb (Analyze_Assignment): Update the save and restore of the\n+\tGhost region.\n+\t* sem_ch6.adb (Analyze_Procedure_Call): Likewise.\n+\t(Analyze_Subprogram_Body_Helper): Likewise.\n+\t* sem_ch7.adb (Analyze_Package_Body_Helper): Likewise.\n+\t* sem_ch12.adb (Analyze_Package_Instantiation): Likewise.\n+\t(Analyze_Subprogram_Instantiation): Likewise.\n+\t(Instantiate_Package_Body): Likewise.\n+\t(Instantiate_Subprogram_Body): Likewise.\n+\t* sem_ch13.adb (Build_Predicate_Functions): Likewise.\n+\t(Build_Predicate_Function_Declaration): Likewise.\n+\t* sem_disp.adb\n+\t(Add_Dispatching_Operation): Do not consider DIC and invariant\n+\tprocedures.\n+\t(Check_Dispatching_Operation): Use Add_Dispatching_Operation to collect\n+\ta dispatching subprogram.\n+\t(Check_Operation_From_Private_View): Likewise.\n+\t(Override_Dispatching_Operation): Likewise.\n+\t* sem_prag.adb (Analyze_Contract_Cases_In_Decl_Part): Update the save\n+\tand restore of the Ghost region.\n+\t(Analyze_Initial_Condition_In_Decl_Part): Likewise.\n+\t(Analyze_Pragma): Update the save and restore of the Ghost region.\n+\t(Analyze_Pre_Post_Condition_In_Decl_Part): Likewise.\n+\t* sem_util.adb (Is_Suitable_Primitive): New routine.\n+\t* sem_util.ads (Is_Suitable_Primitive): New routine.\n+\t* sinfo.ads: Update the section of Ghost regions.\n+\n 2018-05-24  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* doc/gnat_rm/implementation_defined_pragmas.rst (Contract_Cases):"}, {"sha": "4c5d940ee6baa4517a0ec6a7178a9151307e3b8f", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=9057bd6af94f176dd904b476534cc42158799ae5", "patch": "@@ -7554,8 +7554,9 @@ package body Exp_Ch3 is\n \n       Def_Id : constant Entity_Id := Entity (N);\n \n-      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n-      --  Save the Ghost mode to restore on exit\n+      Saved_GM  : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_IGR : constant Node_Id         := Ignored_Ghost_Region;\n+      --  Save the Ghost-related attributes to restore on exit\n \n       Result : Boolean := False;\n \n@@ -7920,13 +7921,13 @@ package body Exp_Ch3 is\n          end if;\n       end if;\n \n-      Restore_Ghost_Mode (Saved_GM);\n+      Restore_Ghost_Region (Saved_GM, Saved_IGR);\n \n       return Result;\n \n    exception\n       when RE_Not_Available =>\n-         Restore_Ghost_Mode (Saved_GM);\n+         Restore_Ghost_Region (Saved_GM, Saved_IGR);\n \n          return False;\n    end Freeze_Type;"}, {"sha": "0a6364524d7d89441056088715448cd063ebfd74", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=9057bd6af94f176dd904b476534cc42158799ae5", "patch": "@@ -4516,8 +4516,9 @@ package body Exp_Disp is\n       Name_TSD          : constant Name_Id :=\n                             New_External_Name (Tname, 'B', Suffix_Index => -1);\n \n-      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n-      --  Save the Ghost mode to restore on exit\n+      Saved_GM  : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_IGR : constant Node_Id         := Ignored_Ghost_Region;\n+      --  Save the Ghost-related attributes to restore on exit\n \n       AI                 : Elmt_Id;\n       AI_Tag_Elmt        : Elmt_Id;\n@@ -6545,7 +6546,7 @@ package body Exp_Disp is\n       Register_CG_Node (Typ);\n \n    <<Leave>>\n-      Restore_Ghost_Mode (Saved_GM);\n+      Restore_Ghost_Region (Saved_GM, Saved_IGR);\n \n       return Result;\n    end Make_DT;"}, {"sha": "5ede9a68958ad87b2688d0eb4f57d7355abd4ebf", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=9057bd6af94f176dd904b476534cc42158799ae5", "patch": "@@ -1578,8 +1578,9 @@ package body Exp_Util is\n \n       Loc : constant Source_Ptr := Sloc (Typ);\n \n-      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n-      --  Save the Ghost mode to restore on exit\n+      Saved_GM  : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_IGR : constant Node_Id         := Ignored_Ghost_Region;\n+      --  Save the Ghost-related attributes to restore on exit\n \n       DIC_Prag     : Node_Id;\n       DIC_Typ      : Entity_Id;\n@@ -1814,7 +1815,7 @@ package body Exp_Util is\n       end if;\n \n    <<Leave>>\n-      Restore_Ghost_Mode (Saved_GM);\n+      Restore_Ghost_Region (Saved_GM, Saved_IGR);\n    end Build_DIC_Procedure_Body;\n \n    -------------------------------------\n@@ -1828,8 +1829,9 @@ package body Exp_Util is\n    procedure Build_DIC_Procedure_Declaration (Typ : Entity_Id) is\n       Loc : constant Source_Ptr := Sloc (Typ);\n \n-      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n-      --  Save the Ghost mode to restore on exit\n+      Saved_GM  : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_IGR : constant Node_Id         := Ignored_Ghost_Region;\n+      --  Save the Ghost-related attributes to restore on exit\n \n       DIC_Prag  : Node_Id;\n       DIC_Typ   : Entity_Id;\n@@ -2015,7 +2017,7 @@ package body Exp_Util is\n       end if;\n \n    <<Leave>>\n-      Restore_Ghost_Mode (Saved_GM);\n+      Restore_Ghost_Region (Saved_GM, Saved_IGR);\n    end Build_DIC_Procedure_Declaration;\n \n    ------------------------------------\n@@ -2945,8 +2947,9 @@ package body Exp_Util is\n \n       --  Local variables\n \n-      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n-      --  Save the Ghost mode to restore on exit\n+      Saved_GM  : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_IGR : constant Node_Id         := Ignored_Ghost_Region;\n+      --  Save the Ghost-related attributes to restore on exit\n \n       Dummy        : Entity_Id;\n       Priv_Item    : Node_Id;\n@@ -3286,7 +3289,7 @@ package body Exp_Util is\n       end if;\n \n    <<Leave>>\n-      Restore_Ghost_Mode (Saved_GM);\n+      Restore_Ghost_Region (Saved_GM, Saved_IGR);\n    end Build_Invariant_Procedure_Body;\n \n    -------------------------------------------\n@@ -3303,8 +3306,9 @@ package body Exp_Util is\n    is\n       Loc : constant Source_Ptr := Sloc (Typ);\n \n-      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n-      --  Save the Ghost mode to restore on exit\n+      Saved_GM  : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_IGR : constant Node_Id         := Ignored_Ghost_Region;\n+      --  Save the Ghost-related attributes to restore on exit\n \n       Proc_Decl : Node_Id;\n       Proc_Id   : Entity_Id;\n@@ -3519,7 +3523,7 @@ package body Exp_Util is\n       end if;\n \n    <<Leave>>\n-      Restore_Ghost_Mode (Saved_GM);\n+      Restore_Ghost_Region (Saved_GM, Saved_IGR);\n    end Build_Invariant_Procedure_Declaration;\n \n    --------------------------\n@@ -9256,8 +9260,9 @@ package body Exp_Util is\n    is\n       Loc : constant Source_Ptr := Sloc (Expr);\n \n-      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n-      --  Save the Ghost mode to restore on exit\n+      Saved_GM  : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_IGR : constant Node_Id         := Ignored_Ghost_Region;\n+      --  Save the Ghost-related attributes to restore on exit\n \n       Call    : Node_Id;\n       Func_Id : Entity_Id;\n@@ -9296,7 +9301,7 @@ package body Exp_Util is\n              Parameter_Associations => New_List (Relocate_Node (Expr)));\n       end if;\n \n-      Restore_Ghost_Mode (Saved_GM);\n+      Restore_Ghost_Region (Saved_GM, Saved_IGR);\n \n       return Call;\n    end Make_Predicate_Call;"}, {"sha": "2e552cdb8fae44adbe094c3145e88df4e4b1f860", "filename": "gcc/ada/expander.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fexpander.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fexpander.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexpander.adb?ref=9057bd6af94f176dd904b476534cc42158799ae5", "patch": "@@ -82,8 +82,9 @@ package body Expander is\n    --  Ghost mode.\n \n    procedure Expand (N : Node_Id) is\n-      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n-      --  Save the Ghost mode to restore on exit\n+      Saved_GM  : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_IGR : constant Node_Id         := Ignored_Ghost_Region;\n+      --  Save the Ghost-related attributes to restore on exit\n \n    begin\n       --  If we were analyzing a default expression (or other spec expression)\n@@ -530,7 +531,7 @@ package body Expander is\n       end if;\n \n    <<Leave>>\n-      Restore_Ghost_Mode (Saved_GM);\n+      Restore_Ghost_Region (Saved_GM, Saved_IGR);\n    end Expand;\n \n    ---------------------------"}, {"sha": "50485f1165d4bd30d487abe860b3c89eaa946afe", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=9057bd6af94f176dd904b476534cc42158799ae5", "patch": "@@ -2165,7 +2165,12 @@ package body Freeze is\n       N                 : Node_Id;\n       Do_Freeze_Profile : Boolean := True) return List_Id\n    is\n-      Loc    : constant Source_Ptr := Sloc (N);\n+      Loc : constant Source_Ptr := Sloc (N);\n+\n+      Saved_GM  : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_IGR : constant Node_Id         := Ignored_Ghost_Region;\n+      --  Save the Ghost-related attributes to restore on exit\n+\n       Atype  : Entity_Id;\n       Comp   : Entity_Id;\n       F_Node : Node_Id;\n@@ -2181,8 +2186,8 @@ package body Freeze is\n       Test_E : Entity_Id := E;\n       --  This could use a comment ???\n \n-      procedure Add_To_Result (N : Node_Id);\n-      --  N is a freezing action to be appended to the Result\n+      procedure Add_To_Result (Fnod : Node_Id);\n+      --  Add freeze action Fnod to list Result\n \n       function After_Last_Declaration return Boolean;\n       --  If Loc is a freeze_entity that appears after the last declaration\n@@ -2244,12 +2249,24 @@ package body Freeze is\n       -- Add_To_Result --\n       -------------------\n \n-      procedure Add_To_Result (N : Node_Id) is\n+      procedure Add_To_Result (Fnod : Node_Id) is\n       begin\n-         if No (Result) then\n-            Result := New_List (N);\n+         --  The Ghost mode of the enclosing context is ignored, while the\n+         --  entity being frozen is living. Insert the freezing action prior\n+         --  to the start of the enclosing ignored Ghost region. As a result\n+         --  the freezeing action will be preserved when the ignored Ghost\n+         --  context is eliminated.\n+\n+         if Saved_GM = Ignore\n+           and then Ghost_Mode /= Ignore\n+           and then Present (Ignored_Ghost_Region)\n+         then\n+            Insert_Action (Ignored_Ghost_Region, Fnod);\n+\n+         --  Otherwise add the freezing action to the result list\n+\n          else\n-            Append (N, Result);\n+            Append_New_To (Result, Fnod);\n          end if;\n       end Add_To_Result;\n \n@@ -3188,7 +3205,6 @@ package body Freeze is\n       -------------------------------\n \n       procedure Freeze_Object_Declaration (E : Entity_Id) is\n-\n          procedure Check_Large_Modular_Array (Typ : Entity_Id);\n          --  Check that the size of array type Typ can be computed without\n          --  overflow, and generates a Storage_Error otherwise. This is only\n@@ -5173,7 +5189,7 @@ package body Freeze is\n             --  Build the call\n \n             --  An imported function whose result type is anonymous access\n-            --  creates a new anonynous access type when it is relocated into\n+            --  creates a new anonymous access type when it is relocated into\n             --  the declarations of the body generated below. As a result, the\n             --  accessibility level of these two anonymous access types may not\n             --  be compatible even though they are essentially the same type.\n@@ -5231,11 +5247,6 @@ package body Freeze is\n          end if;\n       end Wrap_Imported_Subprogram;\n \n-      --  Local variables\n-\n-      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n-      --  Save the Ghost mode to restore on exit\n-\n    --  Start of processing for Freeze_Entity\n \n    begin\n@@ -6854,7 +6865,7 @@ package body Freeze is\n       end if;\n \n    <<Leave>>\n-      Restore_Ghost_Mode (Saved_GM);\n+      Restore_Ghost_Region (Saved_GM, Saved_IGR);\n \n       return Result;\n    end Freeze_Entity;"}, {"sha": "fe56691394347b9cb3c6c121a1a586756e736a3d", "filename": "gcc/ada/ghost.adb", "status": "modified", "additions": 91, "deletions": 32, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fghost.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fghost.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fghost.adb?ref=9057bd6af94f176dd904b476534cc42158799ae5", "patch": "@@ -46,6 +46,10 @@ with Table;\n \n package body Ghost is\n \n+   ---------------------\n+   -- Data strictures --\n+   ---------------------\n+\n    --  The following table contains the N_Compilation_Unit node for a unit that\n    --  is either subject to pragma Ghost with policy Ignore or contains ignored\n    --  Ghost code. The table is used in the removal of ignored Ghost code from\n@@ -60,16 +64,21 @@ package body Ghost is\n      Table_Name           => \"Ignored_Ghost_Units\");\n \n    -----------------------\n-   -- Local Subprograms --\n+   -- Local subprograms --\n    -----------------------\n \n    function Ghost_Entity (N : Node_Id) return Entity_Id;\n    --  Find the entity of a reference to a Ghost entity. Return Empty if there\n    --  is no such entity.\n \n-   procedure Install_Ghost_Mode (Mode : Name_Id);\n-   --  Install a specific Ghost mode denoted by Mode by setting global variable\n-   --  Ghost_Mode.\n+   procedure Install_Ghost_Mode (Mode : Ghost_Mode_Type);\n+   pragma Inline (Install_Ghost_Mode);\n+   --  Install Ghost mode Mode as the Ghost mode in effect\n+\n+   procedure Install_Ghost_Region (Mode : Name_Id; N : Node_Id);\n+   pragma Inline (Install_Ghost_Region);\n+   --  Install a Ghost region comprised of mode Mode and ignored region start\n+   --  node N.\n \n    function Is_Subject_To_Ghost (N : Node_Id) return Boolean;\n    --  Determine whether declaration or body N is subject to aspect or pragma\n@@ -84,6 +93,11 @@ package body Ghost is\n    --  mode Mode. Mark all formals parameters when N denotes a subprogram or a\n    --  body.\n \n+   function Name_To_Ghost_Mode (Mode : Name_Id) return Ghost_Mode_Type;\n+   pragma Inline (Name_To_Ghost_Mode);\n+   --  Convert a Ghost mode denoted by name Mode into its respective enumerated\n+   --  value.\n+\n    procedure Propagate_Ignored_Ghost_Code (N : Node_Id);\n    --  Signal all enclosing scopes that they now contain at least one ignored\n    --  Ghost node denoted by N. Add the compilation unit containing N to table\n@@ -908,21 +922,40 @@ package body Ghost is\n \n    procedure Install_Ghost_Mode (Mode : Ghost_Mode_Type) is\n    begin\n-      Ghost_Mode := Mode;\n+      Install_Ghost_Region (Mode, Empty);\n    end Install_Ghost_Mode;\n \n-   procedure Install_Ghost_Mode (Mode : Name_Id) is\n+   --------------------------\n+   -- Install_Ghost_Region --\n+   --------------------------\n+\n+   procedure Install_Ghost_Region (Mode : Ghost_Mode_Type; N : Node_Id) is\n    begin\n-      if Mode = Name_Check then\n-         Ghost_Mode := Check;\n+      --  The context is already within an ignored Ghost region. Maintain the\n+      --  start of the outermost ignored Ghost region.\n \n-      elsif Mode = Name_Ignore then\n-         Ghost_Mode := Ignore;\n+      if Present (Ignored_Ghost_Region) then\n+         null;\n+\n+      --  The current region is the outermost ignored Ghost region. Save its\n+      --  starting node.\n+\n+      elsif Present (N) and then Mode = Ignore then\n+         Ignored_Ghost_Region := N;\n \n-      elsif Mode = Name_None then\n-         Ghost_Mode := None;\n+      --  Otherwise the current region is not ignored, nothing to save\n+\n+      else\n+         Ignored_Ghost_Region := Empty;\n       end if;\n-   end Install_Ghost_Mode;\n+\n+      Ghost_Mode := Mode;\n+   end Install_Ghost_Region;\n+\n+   procedure Install_Ghost_Region (Mode : Name_Id; N : Node_Id) is\n+   begin\n+      Install_Ghost_Region (Name_To_Ghost_Mode (Mode), N);\n+   end Install_Ghost_Region;\n \n    -------------------------\n    -- Is_Ghost_Assignment --\n@@ -1162,10 +1195,10 @@ package body Ghost is\n \n       if Present (Id) then\n          if Is_Checked_Ghost_Entity (Id) then\n-            Install_Ghost_Mode (Check);\n+            Install_Ghost_Region (Check, N);\n \n          elsif Is_Ignored_Ghost_Entity (Id) then\n-            Install_Ghost_Mode (Ignore);\n+            Install_Ghost_Region (Ignore, N);\n \n             Set_Is_Ignored_Ghost_Node (N);\n             Propagate_Ignored_Ghost_Code (N);\n@@ -1222,9 +1255,9 @@ package body Ghost is\n \n       Mark_Ghost_Declaration_Or_Body (N, Policy);\n \n-      --  Install the appropriate Ghost mode\n+      --  Install the appropriate Ghost region\n \n-      Install_Ghost_Mode (Policy);\n+      Install_Ghost_Region (Policy, N);\n    end Mark_And_Set_Ghost_Body;\n \n    -----------------------------------\n@@ -1269,9 +1302,9 @@ package body Ghost is\n \n       Mark_Ghost_Declaration_Or_Body (N, Policy);\n \n-      --  Install the appropriate Ghost mode\n+      --  Install the appropriate Ghost region\n \n-      Install_Ghost_Mode (Policy);\n+      Install_Ghost_Region (Policy, N);\n    end Mark_And_Set_Ghost_Completion;\n \n    ------------------------------------\n@@ -1326,9 +1359,9 @@ package body Ghost is\n \n       Mark_Ghost_Declaration_Or_Body (N, Policy);\n \n-      --  Install the appropriate Ghost mode\n+      --  Install the appropriate Ghost region\n \n-      Install_Ghost_Mode (Policy);\n+      Install_Ghost_Region (Policy, N);\n    end Mark_And_Set_Ghost_Declaration;\n \n    --------------------------------------\n@@ -1406,11 +1439,11 @@ package body Ghost is\n \n       Mark_Ghost_Declaration_Or_Body (N, Policy);\n \n-      --  Install the appropriate Ghost mode\n+      --  Install the appropriate Ghost region\n \n-      Install_Ghost_Mode (Policy);\n+      Install_Ghost_Region (Policy, N);\n \n-      --  Check ghost actuals. Given that this routine is unconditionally\n+      --  Check Ghost actuals. Given that this routine is unconditionally\n       --  invoked with subprogram and package instantiations, this check\n       --  verifies the context of all the ghost entities passed in generic\n       --  instantiations.\n@@ -1433,10 +1466,10 @@ package body Ghost is\n \n       if Present (Id) then\n          if Is_Checked_Ghost_Entity (Id) then\n-            Install_Ghost_Mode (Check);\n+            Install_Ghost_Region (Check, N);\n \n          elsif Is_Ignored_Ghost_Entity (Id) then\n-            Install_Ghost_Mode (Ignore);\n+            Install_Ghost_Region (Ignore, N);\n \n             Set_Is_Ignored_Ghost_Node (N);\n             Propagate_Ignored_Ghost_Code (N);\n@@ -1577,6 +1610,31 @@ package body Ghost is\n       Mark_Ghost_Declaration_Or_Body (N, Policy);\n    end Mark_Ghost_Renaming;\n \n+   ------------------------\n+   -- Name_To_Ghost_Mode --\n+   ------------------------\n+\n+   function Name_To_Ghost_Mode (Mode : Name_Id) return Ghost_Mode_Type is\n+   begin\n+      if Mode = Name_Check then\n+         return Check;\n+\n+      elsif Mode = Name_Ignore then\n+         return Ignore;\n+\n+      --  Otherwise the mode must denote one of the following:\n+      --\n+      --    * Disable indicates that the Ghost policy in effect is Disable\n+      --\n+      --    * None or No_Name indicates that the associated construct is not\n+      --      subject to any Ghost annotation.\n+\n+      else\n+         pragma Assert (Nam_In (Mode, Name_Disable, Name_None, No_Name));\n+         return None;\n+      end if;\n+   end Name_To_Ghost_Mode;\n+\n    ----------------------------------\n    -- Propagate_Ignored_Ghost_Code --\n    ----------------------------------\n@@ -1742,14 +1800,15 @@ package body Ghost is\n       end loop;\n    end Remove_Ignored_Ghost_Code;\n \n-   ------------------------\n-   -- Restore_Ghost_Mode --\n-   ------------------------\n+   --------------------------\n+   -- Restore_Ghost_Region --\n+   --------------------------\n \n-   procedure Restore_Ghost_Mode (Mode : Ghost_Mode_Type) is\n+   procedure Restore_Ghost_Region (Mode : Ghost_Mode_Type; N : Node_Id) is\n    begin\n-      Ghost_Mode := Mode;\n-   end Restore_Ghost_Mode;\n+      Ghost_Mode           := Mode;\n+      Ignored_Ghost_Region := N;\n+   end Restore_Ghost_Region;\n \n    --------------------\n    -- Set_Ghost_Mode --"}, {"sha": "ef9511675907e8189b7c8031462aa4637d5b51cc", "filename": "gcc/ada/ghost.ads", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fghost.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fghost.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fghost.ads?ref=9057bd6af94f176dd904b476534cc42158799ae5", "patch": "@@ -78,9 +78,10 @@ package Ghost is\n    procedure Initialize;\n    --  Initialize internal tables\n \n-   procedure Install_Ghost_Mode (Mode : Ghost_Mode_Type);\n-   --  Set the value of global variable Ghost_Mode depending on the Ghost\n-   --  policy denoted by Mode.\n+   procedure Install_Ghost_Region (Mode : Ghost_Mode_Type; N : Node_Id);\n+   pragma Inline (Install_Ghost_Region);\n+   --  Install a Ghost region described by mode Mode and ignored region start\n+   --  node N.\n \n    function Is_Ghost_Assignment (N : Node_Id) return Boolean;\n    --  Determine whether arbitrary node N denotes an assignment statement whose\n@@ -111,7 +112,7 @@ package Ghost is\n    --    * The left hand side denotes a Ghost entity\n    --\n    --  Install the Ghost mode of the assignment statement. This routine starts\n-   --  a Ghost region and must be used in conjunction with Restore_Ghost_Mode.\n+   --  a Ghost region and must be used with routine Restore_Ghost_Region.\n \n    procedure Mark_And_Set_Ghost_Body\n      (N       : Node_Id;\n@@ -126,7 +127,7 @@ package Ghost is\n    --    * The body appears within a Ghost region\n    --\n    --  Install the Ghost mode of the body. This routine starts a Ghost region\n-   --  and must be used in conjunction with Restore_Ghost_Mode.\n+   --  and must be used with routine Restore_Ghost_Region.\n \n    procedure Mark_And_Set_Ghost_Completion\n      (N       : Node_Id;\n@@ -139,7 +140,7 @@ package Ghost is\n    --    * The completion appears within a Ghost region\n    --\n    --  Install the Ghost mode of the completion. This routine starts a Ghost\n-   --  region and must be used in conjunction with Restore_Ghost_Mode.\n+   --  region and must be used with routine Restore_Ghost_Region.\n \n    procedure Mark_And_Set_Ghost_Declaration (N : Node_Id);\n    --  Mark declaration N as Ghost when:\n@@ -152,7 +153,7 @@ package Ghost is\n    --    * The declaration appears within a Ghost region\n    --\n    --  Install the Ghost mode of the declaration. This routine starts a Ghost\n-   --  region and must be used in conjunction with Restore_Ghost_Mode.\n+   --  region and must be used with routine Restore_Ghost_Region.\n \n    procedure Mark_And_Set_Ghost_Instantiation\n      (N      : Node_Id;\n@@ -166,15 +167,15 @@ package Ghost is\n    --    * The instantiation appears within a Ghost region\n    --\n    --  Install the Ghost mode of the instantiation. This routine starts a Ghost\n-   --  region and must be used in conjunction with Restore_Ghost_Mode.\n+   --  region and must be used with routine Restore_Ghost_Region.\n \n    procedure Mark_And_Set_Ghost_Procedure_Call (N : Node_Id);\n    --  Mark procedure call N as Ghost when:\n    --\n    --    * The procedure being invoked is a Ghost entity\n    --\n    --  Install the Ghost mode of the procedure call. This routine starts a\n-   --  Ghost region and must be used in conjunction with Restore_Ghost_Mode.\n+   --  Ghost region and must be used with routine Restore_Ghost_Region.\n \n    procedure Mark_Ghost_Clause (N : Node_Id);\n    --  Mark use package, use type, or with clause N as Ghost when:\n@@ -204,14 +205,19 @@ package Ghost is\n    --  WARNING: this is a separate front end pass, care should be taken to keep\n    --  it optimized.\n \n-   procedure Restore_Ghost_Mode (Mode : Ghost_Mode_Type);\n-   --  Terminate a Ghost region by restoring the Ghost mode prior to the\n-   --  region denoted by Mode. This routine must be used in conjunction\n-   --  with Mark_And_Set_xxx routines as well as Set_Ghost_Mode.\n+   procedure Restore_Ghost_Region (Mode : Ghost_Mode_Type; N : Node_Id);\n+   pragma Inline (Restore_Ghost_Region);\n+   --  Restore a Ghost region to a previous state described by mode Mode and\n+   --  ignored region start node N. This routine must be used in conjunction\n+   --  with the following routines:\n+   --\n+   --    Install_Ghost_Region\n+   --    Mark_And_Set_xxx\n+   --    Set_Ghost_Mode\n \n    procedure Set_Ghost_Mode (N : Node_Or_Entity_Id);\n    --  Install the Ghost mode of arbitrary node N. This routine starts a Ghost\n-   --  region and must be used in conjunction with Restore_Ghost_Mode.\n+   --  region and must be used with routine Restore_Ghost_Region.\n \n    procedure Set_Is_Ghost_Entity (Id : Entity_Id);\n    --  Set the relevant Ghost attributes of entity Id depending on the current"}, {"sha": "2d57e1ca2472fcd4183c96d83b656f3f1988c88a", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=9057bd6af94f176dd904b476534cc42158799ae5", "patch": "@@ -786,7 +786,7 @@ package Opt is\n \n    Ghost_Mode : Ghost_Mode_Type := None;\n    --  GNAT\n-   --  Current Ghost mode setting\n+   --  The current Ghost mode in effect\n \n    Global_Discard_Names : Boolean := False;\n    --  GNAT, GNATBIND\n@@ -848,6 +848,12 @@ package Opt is\n    --  use of -gnateu, causing subsequent unrecognized switches to result in\n    --  a warning rather than an error.\n \n+   Ignored_Ghost_Region : Node_Id := Empty;\n+   --  GNAT\n+   --  The start of the current ignored Ghost region. This value must always\n+   --  reflect the starting node of the outermost ignored Ghost region. If a\n+   --  nested ignored Ghost region is entered, the value must remain unchanged.\n+\n    Implementation_Unit_Warnings : Boolean := True;\n    --  GNAT\n    --  Set True to active warnings for use of implementation internal units."}, {"sha": "bc3d6750e76e541ad0a60c8d5f0351c854196f55", "filename": "gcc/ada/rtsfind.adb", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Frtsfind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Frtsfind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.adb?ref=9057bd6af94f176dd904b476534cc42158799ae5", "patch": "@@ -929,9 +929,10 @@ package body Rtsfind is\n \n       --  Local variables\n \n-      Save_GM  : constant Ghost_Mode_Type := Ghost_Mode;\n-      Save_SM  : constant SPARK_Mode_Type := SPARK_Mode;\n-      Save_SMP : constant Node_Id         := SPARK_Mode_Pragma;\n+      Saved_GM  : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_IGR : constant Node_Id         := Ignored_Ghost_Region;\n+      Saved_SM  : constant SPARK_Mode_Type := SPARK_Mode;\n+      Saved_SMP : constant Node_Id         := SPARK_Mode_Pragma;\n       --  Save Ghost and SPARK mode-related data to restore on exit\n \n    --  Start of processing for Load_RTU\n@@ -945,8 +946,8 @@ package body Rtsfind is\n \n       --  Provide a clean environment for the unit\n \n-      Install_Ghost_Mode (None);\n-      Install_SPARK_Mode (None, Empty);\n+      Install_Ghost_Region (None, Empty);\n+      Install_SPARK_Mode   (None, Empty);\n \n       --  Note if secondary stack is used\n \n@@ -1049,8 +1050,8 @@ package body Rtsfind is\n          Set_Is_Potentially_Use_Visible (U.Entity, True);\n       end if;\n \n-      Restore_Ghost_Mode (Save_GM);\n-      Restore_SPARK_Mode (Save_SM, Save_SMP);\n+      Restore_Ghost_Region (Saved_GM, Saved_IGR);\n+      Restore_SPARK_Mode   (Saved_SM, Saved_SMP);\n    end Load_RTU;\n \n    --------------------"}, {"sha": "ca87496411384ea5d5f85af448e978643cbd68b1", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=9057bd6af94f176dd904b476534cc42158799ae5", "patch": "@@ -101,8 +101,9 @@ package body Sem is\n    --  Ghost mode.\n \n    procedure Analyze (N : Node_Id) is\n-      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n-      --  Save the Ghost mode to restore on exit\n+      Saved_GM  : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_IGR : constant Node_Id         := Ignored_Ghost_Region;\n+      --  Save the Ghost-related attributes to restore on exit\n \n    begin\n       Debug_A_Entry (\"analyzing  \", N);\n@@ -803,7 +804,7 @@ package body Sem is\n          Expand_SPARK_Potential_Renaming (N);\n       end if;\n \n-      Restore_Ghost_Mode (Saved_GM);\n+      Restore_Ghost_Region (Saved_GM, Saved_IGR);\n    end Analyze;\n \n    --  Version with check(s) suppressed\n@@ -1351,14 +1352,16 @@ package body Sem is\n       --  the Ghost mode.\n \n       procedure Do_Analyze is\n-         Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n+         Saved_GM  : constant Ghost_Mode_Type := Ghost_Mode;\n+         Saved_IGR : constant Node_Id         := Ignored_Ghost_Region;\n+         --  Save the Ghost-related attributes to restore on exit\n \n          --  Generally style checks are preserved across compilations, with\n          --  one exception: s-oscons.ads, which allows arbitrary long lines\n          --  unconditionally, and has no restore mechanism, because it is\n          --  intended as a lowest-level Pure package.\n \n-         Save_Max_Line : constant Int := Style_Max_Line_Length;\n+         Saved_ML : constant Int := Style_Max_Line_Length;\n \n          List : Elist_Id;\n \n@@ -1368,7 +1371,8 @@ package body Sem is\n \n          --  Set up a clean environment before analyzing\n \n-         Install_Ghost_Mode (None);\n+         Install_Ghost_Region (None, Empty);\n+\n          Outer_Generic_Scope := Empty;\n          Scope_Suppress      := Suppress_Options;\n          Scope_Stack.Table\n@@ -1389,9 +1393,9 @@ package body Sem is\n          --  Then pop entry for Standard, and pop implicit types\n \n          Pop_Scope;\n-         Restore_Scope_Stack (List);\n-         Restore_Ghost_Mode (Save_Ghost_Mode);\n-         Style_Max_Line_Length := Save_Max_Line;\n+         Restore_Scope_Stack  (List);\n+         Restore_Ghost_Region (Saved_GM, Saved_IGR);\n+         Style_Max_Line_Length := Saved_ML;\n       end Do_Analyze;\n \n       --  Local variables"}, {"sha": "c8d4df066294bd53d1af5c29aea4ee374268c8c4", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=9057bd6af94f176dd904b476534cc42158799ae5", "patch": "@@ -3909,6 +3909,7 @@ package body Sem_Ch12 is\n       Loc            : constant Source_Ptr := Sloc (N);\n \n       Saved_GM   : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_IGR  : constant Node_Id         := Ignored_Ghost_Region;\n       Saved_ISMP : constant Boolean         :=\n                      Ignore_SPARK_Mode_Pragmas_In_Instance;\n       Saved_SM   : constant SPARK_Mode_Type := SPARK_Mode;\n@@ -4736,8 +4737,8 @@ package body Sem_Ch12 is\n       end if;\n \n       Ignore_SPARK_Mode_Pragmas_In_Instance := Saved_ISMP;\n-      Restore_Ghost_Mode (Saved_GM);\n-      Restore_SPARK_Mode (Saved_SM, Saved_SMP);\n+      Restore_Ghost_Region (Saved_GM, Saved_IGR);\n+      Restore_SPARK_Mode   (Saved_SM, Saved_SMP);\n       Style_Check := Saved_Style_Check;\n \n    exception\n@@ -4751,8 +4752,8 @@ package body Sem_Ch12 is\n          end if;\n \n          Ignore_SPARK_Mode_Pragmas_In_Instance := Saved_ISMP;\n-         Restore_Ghost_Mode (Saved_GM);\n-         Restore_SPARK_Mode (Saved_SM, Saved_SMP);\n+         Restore_Ghost_Region (Saved_GM, Saved_IGR);\n+         Restore_SPARK_Mode   (Saved_SM, Saved_SMP);\n          Style_Check := Saved_Style_Check;\n    end Analyze_Package_Instantiation;\n \n@@ -5399,6 +5400,7 @@ package body Sem_Ch12 is\n       --  Local variables\n \n       Saved_GM   : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_IGR  : constant Node_Id         := Ignored_Ghost_Region;\n       Saved_ISMP : constant Boolean         :=\n                      Ignore_SPARK_Mode_Pragmas_In_Instance;\n       Saved_SM   : constant SPARK_Mode_Type := SPARK_Mode;\n@@ -5773,8 +5775,8 @@ package body Sem_Ch12 is\n       end if;\n \n       Ignore_SPARK_Mode_Pragmas_In_Instance := Saved_ISMP;\n-      Restore_Ghost_Mode (Saved_GM);\n-      Restore_SPARK_Mode (Saved_SM, Saved_SMP);\n+      Restore_Ghost_Region (Saved_GM, Saved_IGR);\n+      Restore_SPARK_Mode   (Saved_SM, Saved_SMP);\n \n    exception\n       when Instantiation_Error =>\n@@ -5787,8 +5789,8 @@ package body Sem_Ch12 is\n          end if;\n \n          Ignore_SPARK_Mode_Pragmas_In_Instance := Saved_ISMP;\n-         Restore_Ghost_Mode (Saved_GM);\n-         Restore_SPARK_Mode (Saved_SM, Saved_SMP);\n+         Restore_Ghost_Region (Saved_GM, Saved_IGR);\n+         Restore_SPARK_Mode   (Saved_SM, Saved_SMP);\n    end Analyze_Subprogram_Instantiation;\n \n    -------------------------\n@@ -11271,6 +11273,7 @@ package body Sem_Ch12 is\n       --  Local variables\n \n       Saved_GM  : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_IGR : constant Node_Id         := Ignored_Ghost_Region;\n       Saved_SM  : constant SPARK_Mode_Type := SPARK_Mode;\n       Saved_SMP : constant Node_Id         := SPARK_Mode_Pragma;\n       --  Save the Ghost and SPARK mode-related data to restore on exit\n@@ -11600,8 +11603,8 @@ package body Sem_Ch12 is\n \n    <<Leave>>\n       Ignore_SPARK_Mode_Pragmas_In_Instance := Saved_ISMP;\n-      Restore_Ghost_Mode (Saved_GM);\n-      Restore_SPARK_Mode (Saved_SM, Saved_SMP);\n+      Restore_Ghost_Region (Saved_GM, Saved_IGR);\n+      Restore_SPARK_Mode   (Saved_SM, Saved_SMP);\n       Style_Check := Saved_Style_Check;\n    end Instantiate_Package_Body;\n \n@@ -11628,6 +11631,7 @@ package body Sem_Ch12 is\n                       Defining_Unit_Name (Parent (Act_Decl));\n \n       Saved_GM   : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_IGR  : constant Node_Id         := Ignored_Ghost_Region;\n       Saved_ISMP : constant Boolean         :=\n                      Ignore_SPARK_Mode_Pragmas_In_Instance;\n       Saved_SM   : constant SPARK_Mode_Type := SPARK_Mode;\n@@ -11929,8 +11933,8 @@ package body Sem_Ch12 is\n \n    <<Leave>>\n       Ignore_SPARK_Mode_Pragmas_In_Instance := Saved_ISMP;\n-      Restore_Ghost_Mode (Saved_GM);\n-      Restore_SPARK_Mode (Saved_SM, Saved_SMP);\n+      Restore_Ghost_Region (Saved_GM, Saved_IGR);\n+      Restore_SPARK_Mode   (Saved_SM, Saved_SMP);\n       Style_Check := Saved_Style_Check;\n    end Instantiate_Subprogram_Body;\n "}, {"sha": "74bfd422fee55261b9a041485f5c3f22823f0f02", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=9057bd6af94f176dd904b476534cc42158799ae5", "patch": "@@ -8666,8 +8666,9 @@ package body Sem_Ch13 is\n \n       --  Local variables\n \n-      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n-      --  Save the Ghost mode to restore on exit\n+      Saved_GM  : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_IGR : constant Node_Id         := Ignored_Ghost_Region;\n+      --  Save the Ghost-related attributes to restore on exit\n \n    --  Start of processing for Build_Predicate_Functions\n \n@@ -9041,7 +9042,7 @@ package body Sem_Ch13 is\n          end;\n       end if;\n \n-      Restore_Ghost_Mode (Saved_GM);\n+      Restore_Ghost_Region (Saved_GM, Saved_IGR);\n    end Build_Predicate_Functions;\n \n    ------------------------------------------\n@@ -9057,8 +9058,9 @@ package body Sem_Ch13 is\n    is\n       Loc : constant Source_Ptr := Sloc (Typ);\n \n-      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n-      --  Save the Ghost mode to restore on exit\n+      Saved_GM  : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_IGR : constant Node_Id         := Ignored_Ghost_Region;\n+      --  Save the Ghost-related attributes to restore on exit\n \n       Func_Decl : Node_Id;\n       Func_Id   : Entity_Id;\n@@ -9102,7 +9104,7 @@ package body Sem_Ch13 is\n       Insert_After (Parent (Typ), Func_Decl);\n       Analyze (Func_Decl);\n \n-      Restore_Ghost_Mode (Saved_GM);\n+      Restore_Ghost_Region (Saved_GM, Saved_IGR);\n \n       return Func_Decl;\n    end Build_Predicate_Function_Declaration;"}, {"sha": "57a662aad6a1c28ba0cbb5df33742dd526c2eb5c", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 29, "deletions": 23, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=9057bd6af94f176dd904b476534cc42158799ae5", "patch": "@@ -3905,8 +3905,9 @@ package body Sem_Ch3 is\n \n       --  Local variables\n \n-      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n-      --  Save the Ghost mode to restore on exit\n+      Saved_GM  : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_IGR : constant Node_Id         := Ignored_Ghost_Region;\n+      --  Save the Ghost-related attributes to restore on exit\n \n       Related_Id : Entity_Id;\n \n@@ -4970,7 +4971,7 @@ package body Sem_Ch3 is\n          Check_No_Hidden_State (Id);\n       end if;\n \n-      Restore_Ghost_Mode (Saved_GM);\n+      Restore_Ghost_Region (Saved_GM, Saved_IGR);\n    end Analyze_Object_Declaration;\n \n    ---------------------------\n@@ -15003,15 +15004,16 @@ package body Sem_Ch3 is\n      (Parent_Type : Entity_Id;\n       Tagged_Type : Entity_Id)\n    is\n-      E          : Entity_Id;\n-      Elmt       : Elmt_Id;\n-      Iface      : Entity_Id;\n-      Iface_Elmt : Elmt_Id;\n-      Iface_Subp : Entity_Id;\n-      New_Subp   : Entity_Id := Empty;\n-      Prim_Elmt  : Elmt_Id;\n-      Subp       : Entity_Id;\n-      Typ        : Entity_Id;\n+      E           : Entity_Id;\n+      Elmt        : Elmt_Id;\n+      Iface       : Entity_Id;\n+      Iface_Alias : Entity_Id;\n+      Iface_Elmt  : Elmt_Id;\n+      Iface_Subp  : Entity_Id;\n+      New_Subp    : Entity_Id := Empty;\n+      Prim_Elmt   : Elmt_Id;\n+      Subp        : Entity_Id;\n+      Typ         : Entity_Id;\n \n    begin\n       pragma Assert (Ada_Version >= Ada_2005\n@@ -15082,7 +15084,8 @@ package body Sem_Ch3 is\n \n             Prim_Elmt := First_Elmt (Primitive_Operations (Iface));\n             while Present (Prim_Elmt) loop\n-               Iface_Subp := Node (Prim_Elmt);\n+               Iface_Subp  := Node (Prim_Elmt);\n+               Iface_Alias := Ultimate_Alias (Iface_Subp);\n \n                --  Exclude derivation of predefined primitives except those\n                --  that come from source, or are inherited from one that comes\n@@ -15093,11 +15096,12 @@ package body Sem_Ch3 is\n                --     function \"=\" (Left, Right : Iface) return Boolean;\n \n                if not Is_Predefined_Dispatching_Operation (Iface_Subp)\n-                 or else Comes_From_Source (Ultimate_Alias (Iface_Subp))\n+                 or else Comes_From_Source (Iface_Alias)\n                then\n-                  E := Find_Primitive_Covering_Interface\n-                         (Tagged_Type => Tagged_Type,\n-                          Iface_Prim  => Iface_Subp);\n+                  E :=\n+                    Find_Primitive_Covering_Interface\n+                      (Tagged_Type => Tagged_Type,\n+                       Iface_Prim  => Iface_Subp);\n \n                   --  If not found we derive a new primitive leaving its alias\n                   --  attribute referencing the interface primitive.\n@@ -20265,7 +20269,9 @@ package body Sem_Ch3 is\n \n       --  Local variables\n \n-      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_GM  : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_IGR : constant Node_Id         := Ignored_Ghost_Region;\n+      --  Save the Ghost-related attributes to restore on exit\n \n       Full_Indic  : Node_Id;\n       Full_Parent : Entity_Id;\n@@ -20749,7 +20755,6 @@ package body Sem_Ch3 is\n \n                else\n                   Full_List := Primitive_Operations (Full_T);\n-\n                   while Present (Prim_Elmt) loop\n                      Prim := Node (Prim_Elmt);\n \n@@ -20791,16 +20796,17 @@ package body Sem_Ch3 is\n                      then\n                         Check_Controlling_Formals (Full_T, Prim);\n \n-                        if not Is_Dispatching_Operation (Prim) then\n+                        if Is_Suitable_Primitive (Prim)\n+                          and then not Is_Dispatching_Operation (Prim)\n+                        then\n                            Append_Elmt (Prim, Full_List);\n-                           Set_Is_Dispatching_Operation (Prim, True);\n+                           Set_Is_Dispatching_Operation (Prim);\n                            Set_DT_Position_Value (Prim, No_Uint);\n                         end if;\n \n                      elsif Is_Dispatching_Operation (Prim)\n                        and then Disp_Typ /= Full_T\n                      then\n-\n                         --  Verify that it is not otherwise controlled by a\n                         --  formal or a return value of type T.\n \n@@ -20927,7 +20933,7 @@ package body Sem_Ch3 is\n       end if;\n \n    <<Leave>>\n-      Restore_Ghost_Mode (Saved_GM);\n+      Restore_Ghost_Region (Saved_GM, Saved_IGR);\n    end Process_Full_View;\n \n    -----------------------------------"}, {"sha": "f18fd4089f40293d9743d09ac2f4b2339bd6a36a", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=9057bd6af94f176dd904b476534cc42158799ae5", "patch": "@@ -450,8 +450,9 @@ package body Sem_Ch5 is\n       Save_Full_Analysis : Boolean := False;\n       --  Force initialization to facilitate static analysis\n \n-      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n-      --  Save the Ghost mode to restore on exit\n+      Saved_GM  : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_IGR : constant Node_Id         := Ignored_Ghost_Region;\n+      --  Save the Ghost-related attributes to restore on exit\n \n    --  Start of processing for Analyze_Assignment\n \n@@ -1197,7 +1198,7 @@ package body Sem_Ch5 is\n       Analyze_Dimension (N);\n \n    <<Leave>>\n-      Restore_Ghost_Mode (Saved_GM);\n+      Restore_Ghost_Region (Saved_GM, Saved_IGR);\n \n       --  If the right-hand side contains target names, expansion has been\n       --  disabled to prevent expansion that might move target names out of"}, {"sha": "e838e6a14dbe97a38941d578caa735536be32f2a", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=9057bd6af94f176dd904b476534cc42158799ae5", "patch": "@@ -1799,8 +1799,9 @@ package body Sem_Ch6 is\n       Loc     : constant Source_Ptr := Sloc (N);\n       P       : constant Node_Id    := Name (N);\n \n-      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n-      --  Save the Ghost mode to restore on exit\n+      Saved_GM  : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_IGR : constant Node_Id         := Ignored_Ghost_Region;\n+      --  Save the Ghost-related attributes to restore on exit\n \n       Actual : Node_Id;\n       New_N  : Node_Id;\n@@ -2043,7 +2044,7 @@ package body Sem_Ch6 is\n       end if;\n \n    <<Leave>>\n-      Restore_Ghost_Mode (Saved_GM);\n+      Restore_Ghost_Region (Saved_GM, Saved_IGR);\n    end Analyze_Procedure_Call;\n \n    ------------------------------\n@@ -3505,6 +3506,7 @@ package body Sem_Ch6 is\n       --  Local variables\n \n       Saved_GM   : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_IGR  : constant Node_Id         := Ignored_Ghost_Region;\n       Saved_ISMP : constant Boolean         :=\n                      Ignore_SPARK_Mode_Pragmas_In_Instance;\n       --  Save the Ghost and SPARK mode-related data to restore on exit\n@@ -4720,7 +4722,7 @@ package body Sem_Ch6 is\n \n    <<Leave>>\n       Ignore_SPARK_Mode_Pragmas_In_Instance := Saved_ISMP;\n-      Restore_Ghost_Mode (Saved_GM);\n+      Restore_Ghost_Region (Saved_GM, Saved_IGR);\n    end Analyze_Subprogram_Body_Helper;\n \n    ------------------------------------"}, {"sha": "866c6f9d62d1ad6a5156a521954b4d0e828df20b", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=9057bd6af94f176dd904b476534cc42158799ae5", "patch": "@@ -638,6 +638,7 @@ package body Sem_Ch7 is\n       --  Local variables\n \n       Saved_GM   : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_IGR  : constant Node_Id         := Ignored_Ghost_Region;\n       Saved_ISMP : constant Boolean         :=\n                      Ignore_SPARK_Mode_Pragmas_In_Instance;\n       --  Save the Ghost and SPARK mode-related data to restore on exit\n@@ -1045,7 +1046,7 @@ package body Sem_Ch7 is\n       end if;\n \n       Ignore_SPARK_Mode_Pragmas_In_Instance := Saved_ISMP;\n-      Restore_Ghost_Mode (Saved_GM);\n+      Restore_Ghost_Region (Saved_GM, Saved_IGR);\n    end Analyze_Package_Body_Helper;\n \n    ---------------------------------"}, {"sha": "69c2a56cec4ed9d107b180be8a2738a0b7ffb193", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=9057bd6af94f176dd904b476534cc42158799ae5", "patch": "@@ -106,7 +106,16 @@ package body Sem_Disp is\n       --  for the construction of function wrappers). The list of primitive\n       --  operations must not contain duplicates.\n \n-      Append_Unique_Elmt (New_Op, List);\n+      --  The Default_Initial_Condition and invariant procedures are not added\n+      --  to the list of primitives even when they are generated for a tagged\n+      --  type. These routines must not be targets of dispatching calls and\n+      --  therefore must not appear in the dispatch table because they already\n+      --  utilize class-wide-precondition semantics to handle inheritance and\n+      --  overriding.\n+\n+      if Is_Suitable_Primitive (New_Op) then\n+         Append_Unique_Elmt (New_Op, List);\n+      end if;\n    end Add_Dispatching_Operation;\n \n    --------------------------\n@@ -1472,7 +1481,7 @@ package body Sem_Disp is\n          --  Attach operation to list of primitives of the synchronized type\n          --  itself, for ASIS use.\n \n-         Append_Elmt (Subp, Direct_Primitive_Operations (Tagged_Type));\n+         Add_Dispatching_Operation (Tagged_Type, Subp);\n \n       --  If no old subprogram, then we add this as a dispatching operation,\n       --  but we avoid doing this if an error was posted, to prevent annoying\n@@ -1783,7 +1792,7 @@ package body Sem_Disp is\n          --  Add Old_Subp to primitive operations if not already present\n \n          if Present (Tagged_Type) and then Is_Tagged_Type (Tagged_Type) then\n-            Append_Unique_Elmt (Old_Subp, Primitive_Operations (Tagged_Type));\n+            Add_Dispatching_Operation (Tagged_Type, Old_Subp);\n \n             --  If Old_Subp isn't already marked as dispatching then this is\n             --  the case of an operation of an untagged private type fulfilled\n@@ -2541,7 +2550,7 @@ package body Sem_Disp is\n                         Find_Dispatching_Type (Alias (Prev_Op)))\n       then\n          Remove_Elmt (Primitive_Operations (Tagged_Type), Elmt);\n-         Append_Elmt (New_Op, Primitive_Operations (Tagged_Type));\n+         Add_Dispatching_Operation (Tagged_Type, New_Op);\n \n       --  The new primitive replaces the overridden entity. Required to ensure\n       --  that overriding primitive is assigned the same dispatch table slot."}, {"sha": "d75f20e56b6cbde1abfaaa7697d2b76f339d0683", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=9057bd6af94f176dd904b476534cc42158799ae5", "patch": "@@ -468,8 +468,9 @@ package body Sem_Prag is\n \n       CCases : constant Node_Id := Expression (Get_Argument (N, Spec_Id));\n \n-      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n-      --  Save the Ghost mode to restore on exit\n+      Saved_GM  : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_IGR : constant Node_Id         := Ignored_Ghost_Region;\n+      --  Save the Ghost-related attributes to restore on exit\n \n       CCase         : Node_Id;\n       Restore_Scope : Boolean := False;\n@@ -536,7 +537,7 @@ package body Sem_Prag is\n \n       Set_Is_Analyzed_Pragma (N);\n \n-      Restore_Ghost_Mode (Saved_GM);\n+      Restore_Ghost_Region (Saved_GM, Saved_IGR);\n    end Analyze_Contract_Cases_In_Decl_Part;\n \n    ----------------------------------\n@@ -2720,8 +2721,9 @@ package body Sem_Prag is\n       Pack_Id   : constant Entity_Id := Defining_Entity (Pack_Decl);\n       Expr      : constant Node_Id   := Expression (Get_Argument (N, Pack_Id));\n \n-      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n-      --  Save the Ghost mode to restore on exit\n+      Saved_GM  : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_IGR : constant Node_Id         := Ignored_Ghost_Region;\n+      --  Save the Ghost-related attributes to restore on exit\n \n    begin\n       --  Do not analyze the pragma multiple times\n@@ -2744,7 +2746,7 @@ package body Sem_Prag is\n       Preanalyze_Assert_Expression (Expr, Standard_Boolean);\n       Set_Is_Analyzed_Pragma (N);\n \n-      Restore_Ghost_Mode (Saved_GM);\n+      Restore_Ghost_Region (Saved_GM, Saved_IGR);\n    end Analyze_Initial_Condition_In_Decl_Part;\n \n    --------------------------------------\n@@ -13224,8 +13226,9 @@ package body Sem_Prag is\n          --  restore the Ghost mode.\n \n          when Pragma_Check => Check : declare\n-            Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n-            --  Save the Ghost mode to restore on exit\n+            Saved_GM  : constant Ghost_Mode_Type := Ghost_Mode;\n+            Saved_IGR : constant Node_Id         := Ignored_Ghost_Region;\n+            --  Save the Ghost-related attributes to restore on exit\n \n             Cname : Name_Id;\n             Eloc  : Source_Ptr;\n@@ -13420,7 +13423,7 @@ package body Sem_Prag is\n                In_Assertion_Expr := In_Assertion_Expr - 1;\n             end if;\n \n-            Restore_Ghost_Mode (Saved_GM);\n+            Restore_Ghost_Region (Saved_GM, Saved_IGR);\n          end Check;\n \n          --------------------------\n@@ -24968,9 +24971,11 @@ package body Sem_Prag is\n \n       --  Local variables\n \n-      Expr     : constant Node_Id := Expression (Get_Argument (N, Spec_Id));\n-      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n-      --  Save the Ghost mode to restore on exit\n+      Expr : constant Node_Id := Expression (Get_Argument (N, Spec_Id));\n+\n+      Saved_GM  : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_IGR : constant Node_Id         := Ignored_Ghost_Region;\n+      --  Save the Ghost-related attributes to restore on exit\n \n       Errors        : Nat;\n       Restore_Scope : Boolean := False;\n@@ -25069,7 +25074,7 @@ package body Sem_Prag is\n       Check_Postcondition_Use_In_Inlined_Subprogram (N, Spec_Id);\n       Set_Is_Analyzed_Pragma (N);\n \n-      Restore_Ghost_Mode (Saved_GM);\n+      Restore_Ghost_Region (Saved_GM, Saved_IGR);\n    end Analyze_Pre_Post_Condition_In_Decl_Part;\n \n    ------------------------------------------"}, {"sha": "4e12f93ecb2849ecb5e001ee77cf2f2dd898f47d", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=9057bd6af94f176dd904b476534cc42158799ae5", "patch": "@@ -17192,6 +17192,29 @@ package body Sem_Util is\n         and then Ekind (Defining_Entity (N)) /= E_Subprogram_Body;\n    end Is_Subprogram_Stub_Without_Prior_Declaration;\n \n+   ---------------------------\n+   -- Is_Suitable_Primitive --\n+   ---------------------------\n+\n+   function Is_Suitable_Primitive (Subp_Id : Entity_Id) return Boolean is\n+   begin\n+      --  The Default_Initial_Condition and invariant procedures must not be\n+      --  treated as primitive operations even when they apply to a tagged\n+      --  type. These routines must not act as targets of dispatching calls\n+      --  because they already utilize class-wide-precondition semantics to\n+      --  handle inheritance and overriding.\n+\n+      if Ekind (Subp_Id) = E_Procedure\n+        and then (Is_DIC_Procedure (Subp_Id)\n+                    or else\n+                  Is_Invariant_Procedure (Subp_Id))\n+      then\n+         return False;\n+      end if;\n+\n+      return True;\n+   end Is_Suitable_Primitive;\n+\n    --------------------------\n    -- Is_Suspension_Object --\n    --------------------------"}, {"sha": "66280f94df852bfa5f73690015ccebf30f01fb48", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=9057bd6af94f176dd904b476534cc42158799ae5", "patch": "@@ -1986,6 +1986,10 @@ package Sem_Util is\n    --  Return True if N is a subprogram stub with no prior subprogram\n    --  declaration.\n \n+   function Is_Suitable_Primitive (Subp_Id : Entity_Id) return Boolean;\n+   --  Determine whether arbitrary subprogram Subp_Id may act as a primitive of\n+   --  an arbitrary tagged type.\n+\n    function Is_Suspension_Object (Id : Entity_Id) return Boolean;\n    --  Determine whether arbitrary entity Id denotes Suspension_Object defined\n    --  in Ada.Synchronous_Task_Control."}, {"sha": "51076658fe7b1178425bfa9c1879ebc40437cd65", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 40, "deletions": 26, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=9057bd6af94f176dd904b476534cc42158799ae5", "patch": "@@ -531,75 +531,89 @@ package Sinfo is\n    --  The SPARK RM 6.9 defines two classes of constructs - Ghost entities and\n    --  Ghost statements. The intent of the feature is to treat Ghost constructs\n    --  as non-existent when Ghost assertion policy Ignore is in effect.\n-\n+   --\n    --  The corresponding nodes which map to Ghost constructs are:\n-\n+   --\n    --    Ghost entities\n    --      Declaration nodes\n    --      N_Package_Body\n    --      N_Subprogram_Body\n-\n+   --\n    --    Ghost statements\n    --      N_Assignment_Statement\n    --      N_Procedure_Call_Statement\n    --      N_Pragma\n-\n+   --\n    --  In addition, the compiler treats instantiations as Ghost entities\n-\n+   --\n    --  To achieve the removal of ignored Ghost constructs, the compiler relies\n-   --  on global variable Ghost_Mode and a mechanism called \"Ghost regions\".\n-   --  The values of the global variable are as follows:\n-\n+   --  on global variables Ghost_Mode and Ignored_Ghost_Region, which comprise\n+   --  a mechanism called \"Ghost regions\".\n+   --\n+   --  The values of Ghost_Mode are as follows:\n+   --\n    --    1. Check - All static semantics as defined in SPARK RM 6.9 are in\n    --       effect. The Ghost region has mode Check.\n-\n+   --\n    --    2. Ignore - Same as Check, ignored Ghost code is not present in ALI\n    --       files, object files, and the final executable. The Ghost region\n    --       has mode Ignore.\n-\n+   --\n    --    3. None - No Ghost region is in effect\n-\n+   --\n+   --  The value of Ignored_Ghost_Region captures the node which initiates an\n+   --  ignored Ghost region.\n+   --\n    --  A Ghost region is a compiler operating mode, similar to Check_Syntax,\n    --  however a region is much more finely grained and depends on the policy\n    --  in effect. The region starts prior to the analysis of a Ghost construct\n    --  and ends immediately after its expansion. The region is established as\n    --  follows:\n-\n+   --\n    --    1. Declarations - Prior to analysis, if the declaration is subject to\n    --       pragma Ghost.\n-\n+   --\n    --    2. Renaming declarations - Same as 1) or when the renamed entity is\n    --       Ghost.\n-\n+   --\n    --    3. Completing declarations - Same as 1) or when the declaration is\n    --       partially analyzed and the declaration completes a Ghost entity.\n-\n+   --\n    --    4. N_Package_Body, N_Subprogram_Body - Same as 1) or when the body is\n    --       partially analyzed and completes a Ghost entity.\n-\n+   --\n    --    5. N_Assignment_Statement - After the left hand side is analyzed and\n    --       references a Ghost entity.\n-\n+   --\n    --    6. N_Procedure_Call_Statement - After the name is analyzed and denotes\n    --       a Ghost procedure.\n-\n+   --\n    --    7. N_Pragma - During analysis, when the related entity is Ghost or the\n    --       pragma encloses a Ghost entity.\n-\n+   --\n    --    8. Instantiations - Save as 1) or when the instantiation is partially\n    --       analyzed and the generic template is Ghost.\n-\n-   --  Routines Mark_And_Set_Ghost_xxx and Set_Ghost_Mode install a new Ghost\n-   --  region and routine Restore_Ghost_Mode ends a Ghost region. A region may\n-   --  be reinstalled similarly to scopes for decoupled expansion such as the\n-   --  generation of dispatch tables or the creation of a predicate function.\n-\n+   --\n+   --  The following routines install a new Ghost region:\n+   --\n+   --     Install_Ghost_Region\n+   --     Mark_And_Set_Ghost_xxx\n+   --     Set_Ghost_Mode\n+   --\n+   --  The following routine ends a Ghost region:\n+   --\n+   --     Restore_Ghost_Region\n+   --\n+   --  A region may be reinstalled similarly to scopes for decoupled expansion\n+   --  such as the generation of dispatch tables or the creation of a predicate\n+   --  function.\n+   --\n    --  If the mode of a Ghost region is Ignore, any newly created nodes as well\n    --  as source entities are marked as ignored Ghost. In additon, the marking\n    --  process signals all enclosing scopes that an ignored Ghost node resides\n    --  within. The compilation unit where the node resides is also added to an\n    --  auxiliary table for post processing.\n-\n+   --\n    --  After the analysis and expansion of all compilation units takes place\n    --  as well as the instantiation of all inlined [generic] bodies, the GNAT\n    --  driver initiates a separate pass which removes all ignored Ghost nodes"}, {"sha": "8381235981c3060467d5f08cb6ec77d38efbb159", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9057bd6af94f176dd904b476534cc42158799ae5", "patch": "@@ -1,3 +1,7 @@\n+2018-05-24  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* gnat.dg/formal_containers.adb: New testcase.\n+\n 2018-05-24  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* gcc.target/i386/pr85345.c: Require ifunc support."}, {"sha": "185b946e71eb1599d1277abcd0b83b8c946da29e", "filename": "gcc/testsuite/gnat.dg/formal_containers.adb", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Ftestsuite%2Fgnat.dg%2Fformal_containers.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9057bd6af94f176dd904b476534cc42158799ae5/gcc%2Ftestsuite%2Fgnat.dg%2Fformal_containers.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fformal_containers.adb?ref=9057bd6af94f176dd904b476534cc42158799ae5", "patch": "@@ -0,0 +1,23 @@\n+--  { dg-do compile }\n+\n+with Ada.Containers.Formal_Hashed_Sets;\n+\n+procedure Formal_Containers is\n+   type T is new Integer;\n+\n+   function Eq (X : T; Y : T) return Boolean;\n+\n+   function Hash (X : T) return Ada.Containers.Hash_Type is (0);\n+\n+   package TSet is new Ada.Containers.Formal_Hashed_Sets\n+     (Element_Type        => T,\n+      Hash                => Hash,\n+      Equivalent_Elements => Eq);\n+\n+   S : Tset.Set := TSet.Empty_Set;\n+\n+   function Eq (X : T; Y : T) return Boolean is\n+   begin\n+      return TSet.Contains (S, X) or TSet.Contains (S, Y);\n+   end Eq;\n+begin null; end Formal_Containers;"}]}