{"sha": "d022d93eed072cd2cbb1585d18d77be6c27723cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAyMmQ5M2VlZDA3MmNkMmNiYjE1ODVkMThkNzdiZTZjMjc3MjNjZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-10-20T12:30:26Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-10-20T12:30:26Z"}, "message": "emit-rtl.c (set_mem_attributes): Alignment is in bits.\n\n\t* emit-rtl.c (set_mem_attributes): Alignment is in bits.\n\t(adjust_address_1, offset_address): Likewise.\n\nFrom-SVN: r46378", "tree": {"sha": "9de4b8f33f96f533e92c2928fc6a7aba2cd18b35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9de4b8f33f96f533e92c2928fc6a7aba2cd18b35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d022d93eed072cd2cbb1585d18d77be6c27723cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d022d93eed072cd2cbb1585d18d77be6c27723cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d022d93eed072cd2cbb1585d18d77be6c27723cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d022d93eed072cd2cbb1585d18d77be6c27723cf/comments", "author": null, "committer": null, "parents": [{"sha": "4f9b4029463bc07cc04b20fb0a24d7516f455d02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f9b4029463bc07cc04b20fb0a24d7516f455d02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f9b4029463bc07cc04b20fb0a24d7516f455d02"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "7e6a049abf7599668f5c75e36b3df88951460e7d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d022d93eed072cd2cbb1585d18d77be6c27723cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d022d93eed072cd2cbb1585d18d77be6c27723cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d022d93eed072cd2cbb1585d18d77be6c27723cf", "patch": "@@ -1,5 +1,8 @@\n Sat Oct 20 07:27:14 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* emit-rtl.c (set_mem_attributes): Alignment is in bits.\n+\t(adjust_address_1, offset_address): Likewise.\n+\n \t* final.c (output_asm_operand_names): New fcn, from output_asm_insn.\n \t(output_asm_insn): Call it for each line output.\n \tDon't record an operand more than once."}, {"sha": "82f37b61396c739f66f8dba1fea2191f3dece051", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d022d93eed072cd2cbb1585d18d77be6c27723cf/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d022d93eed072cd2cbb1585d18d77be6c27723cf/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=d022d93eed072cd2cbb1585d18d77be6c27723cf", "patch": "@@ -1717,7 +1717,7 @@ set_mem_attributes (ref, t, objectp)\n \n   /* If this is an INDIRECT_REF, we know its alignment.  */\n   if (TREE_CODE (t) == INDIRECT_REF)\n-    set_mem_align (ref, TYPE_ALIGN (type) / BITS_PER_UNIT);\n+    set_mem_align (ref, TYPE_ALIGN (type));\n \n   /* Now see if we can say more about whether it's an aggregate or\n      scalar.  If we already know it's an aggregate, don't bother.  */\n@@ -1752,7 +1752,7 @@ set_mem_alias_set (mem, set)\n \t\t\t\t   MEM_SIZE (mem), MEM_ALIGN (mem));\n }\n \n-/* Set the alignment of MEM to ALIGN.  */\n+/* Set the alignment of MEM to ALIGN bits.  */\n \n void\n set_mem_align (mem, align)\n@@ -1866,7 +1866,7 @@ adjust_address_1 (memref, mode, offset, validate)\n      lowest-order set bit in OFFSET, but don't change the alignment if OFFSET\n      if zero.  */\n   if (offset != 0)\n-    memalign = MIN (memalign, offset & -offset);\n+    memalign = MIN (memalign, (offset & -offset) * BITS_PER_UNIT);\n \n   MEM_ATTRS (new)\n     = get_mem_attrs (MEM_ALIAS_SET (memref), MEM_DECL (memref), memoffset,\n@@ -1896,7 +1896,8 @@ offset_address (memref, offset, pow2)\n   /* Update the alignment to reflect the offset.  Reset the offset, which\n      we don't know.  */\n   MEM_ATTRS (new) = get_mem_attrs (MEM_ALIAS_SET (memref), MEM_DECL (memref),\n-\t\t\t\t   0, 0, MIN (MEM_ALIGN (memref), pow2));\n+\t\t\t\t   0, 0, MIN (MEM_ALIGN (memref),\n+\t\t\t\t\t      pow2 * BITS_PER_UNIT));\n   return new;\n }\n   "}, {"sha": "fbf12a04b2e226cd312ce9698716ff961c781bb9", "filename": "gcc/expr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d022d93eed072cd2cbb1585d18d77be6c27723cf/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d022d93eed072cd2cbb1585d18d77be6c27723cf/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=d022d93eed072cd2cbb1585d18d77be6c27723cf", "patch": "@@ -612,7 +612,7 @@ extern rtx memory_address_noforce PARAMS ((enum machine_mode, rtx));\n /* Set the alias set of MEM to SET.  */\n extern void set_mem_alias_set PARAMS ((rtx, HOST_WIDE_INT));\n \n-/* Set the alignment of MEM to ALIGN.  */\n+/* Set the alignment of MEM to ALIGN bits.  */\n extern void set_mem_align PARAMS ((rtx, unsigned int));\n \n /* Return a memory reference like MEMREF, but with its mode changed"}, {"sha": "45b62ee3c3981a58c1ab18d4949f0e6288e22a03", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d022d93eed072cd2cbb1585d18d77be6c27723cf/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d022d93eed072cd2cbb1585d18d77be6c27723cf/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=d022d93eed072cd2cbb1585d18d77be6c27723cf", "patch": "@@ -95,7 +95,7 @@ typedef struct\n   tree decl;\t\t\t/* decl corresponding to MEM.  */\n   rtx offset;\t\t\t/* Offset from start of DECL, as CONST_INT.  */\n   rtx size;\t\t\t/* Size in bytes, as a CONST_INT.  */\n-  unsigned int align;\t\t/* Alignment of MEM in bytes.  */\n+  unsigned int align;\t\t/* Alignment of MEM in bits.  */\n } mem_attrs;\n \n /* Common union for an element of an rtx.  */\n@@ -912,7 +912,7 @@ extern unsigned int subreg_regno \tPARAMS ((rtx));\n    is always a CONST_INT.  */\n #define MEM_SIZE(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->size)\n \n-/* For a MEM rtx, the alignment in bytes.  */\n+/* For a MEM rtx, the alignment in bits.  */\n #define MEM_ALIGN(RTX) (MEM_ATTRS (RTX) == 0 ? 1 : MEM_ATTRS (RTX)->align)\n \n /* Copy the attributes that apply to memory locations from RHS to LHS.  */"}]}