{"sha": "9925f216d0f85e8ee20900162b5238333f8e567e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkyNWYyMTZkMGY4NWU4ZWUyMDkwMDE2MmI1MjM4MzMzZjhlNTY3ZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-08-29T20:17:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-08-29T20:17:02Z"}, "message": "Remove unnecessary LAMBDA_EXPR fields.\n\n\t* cp-tree.h (LAMBDA_EXPR_CLOSURE): Use TREE_TYPE.\n\t(LAMBDA_EXPR_RETURN_TYPE): Remove.\n\t(struct tree_lambda_expr): Remove closure and return_type fields.\n\t* lambda.c (build_lambda_expr): Don't set LAMBDA_EXPR_RETURN_TYPE.\n\t* pt.c (tsubst_copy_and_build): Likewise.\n\t* parser.c (cp_parser_lambda_declarator_opt): Track return type.\n\t(cp_parser_lambda_body): Adjust unspecified return type check.\n\t* ptree.c (cxx_print_lambda_node): Don't print closure or\n\treturn type.\n\nFrom-SVN: r251430", "tree": {"sha": "03c4959f775842b61df88c2ed12b2a65d36cc150", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03c4959f775842b61df88c2ed12b2a65d36cc150"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9925f216d0f85e8ee20900162b5238333f8e567e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9925f216d0f85e8ee20900162b5238333f8e567e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9925f216d0f85e8ee20900162b5238333f8e567e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9925f216d0f85e8ee20900162b5238333f8e567e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d4e573b28a74218ea9db6b00f50f5e323899e6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d4e573b28a74218ea9db6b00f50f5e323899e6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d4e573b28a74218ea9db6b00f50f5e323899e6d"}], "stats": {"total": 57, "additions": 21, "deletions": 36}, "files": [{"sha": "ef7f4292d4d551cd1cb5fb9319bdc7cb447a0f01", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9925f216d0f85e8ee20900162b5238333f8e567e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9925f216d0f85e8ee20900162b5238333f8e567e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9925f216d0f85e8ee20900162b5238333f8e567e", "patch": "@@ -1,4 +1,14 @@\n-2017-08-28  Jason Merrill  <jason@redhat.com>\n+2017-08-29  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-tree.h (LAMBDA_EXPR_CLOSURE): Use TREE_TYPE.\n+\t(LAMBDA_EXPR_RETURN_TYPE): Remove.\n+\t(struct tree_lambda_expr): Remove closure and return_type fields.\n+\t* lambda.c (build_lambda_expr): Don't set LAMBDA_EXPR_RETURN_TYPE.\n+\t* pt.c (tsubst_copy_and_build): Likewise.\n+\t* parser.c (cp_parser_lambda_declarator_opt): Track return type.\n+\t(cp_parser_lambda_body): Adjust unspecified return type check.\n+\t* ptree.c (cxx_print_lambda_node): Don't print closure or\n+\treturn type.\n \n \tPR c++/80935 - wrong C++17 error with lambda\n \t* decl.c (check_for_uninitialized_const_var): Check\n@@ -7,16 +17,12 @@\n \tis_instantiation_of_constexpr.\n \t(potential_constant_expression_1): Check var_in_maybe_constexpr_fn.\n \n-2017-08-23  Jason Merrill  <jason@redhat.com>\n-\n \t* lambda.c (build_lambda_object): Check for error_mark_node.\n \t* pt.c (make_pack_expansion): Set PACK_EXPANSION_LOCAL_P on the type\n \tpack as well.\n \t(tsubst_decl) [FUNCTION_DECL]: Set DECL_CONTEXT on the parameters.\n \t(tsubst) [TEMPLATE_PARM_INDEX]: Check for error_mark_node.\n \n-2017-08-29  Jason Merrill  <jason@redhat.com>\n-\n \tPR c++/80767 - unnecessary instantiation of generic lambda\n \t* call.c (convert_like_real): Call build_user_type_conversion_1 if\n \tcand is null."}, {"sha": "890723f20efaf71898f0831b1ffff4773e052d5f", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9925f216d0f85e8ee20900162b5238333f8e567e/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9925f216d0f85e8ee20900162b5238333f8e567e/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=9925f216d0f85e8ee20900162b5238333f8e567e", "patch": "@@ -468,8 +468,7 @@ DEFTREECODE (TRAIT_EXPR, \"trait_expr\", tcc_exceptional, 0)\n    LAMBDA_EXPR_THIS_CAPTURE goes straight to the capture of `this', if it exists.\n    LAMBDA_EXPR_PENDING_PROXIES is a vector of capture proxies which need to\n    be pushed once scope returns to the lambda.\n-   LAMBDA_EXPR_MUTABLE_P signals whether this lambda was declared mutable.\n-   LAMBDA_EXPR_RETURN_TYPE holds the return type, if it was specified.  */\n+   LAMBDA_EXPR_MUTABLE_P signals whether this lambda was declared mutable.  */\n DEFTREECODE (LAMBDA_EXPR, \"lambda_expr\", tcc_exceptional, 0)\n \n /* The declared type of an expression.  This is a C++0x extension."}, {"sha": "ad97be4c1ce813e32f86046eeac7071e5f8b1528", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9925f216d0f85e8ee20900162b5238333f8e567e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9925f216d0f85e8ee20900162b5238333f8e567e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9925f216d0f85e8ee20900162b5238333f8e567e", "patch": "@@ -1253,11 +1253,6 @@ enum cp_lambda_default_capture_mode_type {\n #define LAMBDA_EXPR_MUTABLE_P(NODE) \\\n   TREE_LANG_FLAG_1 (LAMBDA_EXPR_CHECK (NODE))\n \n-/* The return type in the expression.\n- * NULL_TREE indicates that none was specified.  */\n-#define LAMBDA_EXPR_RETURN_TYPE(NODE) \\\n-  (((struct tree_lambda_expr *)LAMBDA_EXPR_CHECK (NODE))->return_type)\n-\n /* The source location of the lambda.  */\n #define LAMBDA_EXPR_LOCATION(NODE) \\\n   (((struct tree_lambda_expr *)LAMBDA_EXPR_CHECK (NODE))->locus)\n@@ -1276,20 +1271,17 @@ enum cp_lambda_default_capture_mode_type {\n #define LAMBDA_EXPR_PENDING_PROXIES(NODE) \\\n   (((struct tree_lambda_expr *)LAMBDA_EXPR_CHECK (NODE))->pending_proxies)\n \n-/* The closure type of the lambda.  Note that the TREE_TYPE of a\n-   LAMBDA_EXPR is always NULL_TREE, because we need to instantiate the\n-   LAMBDA_EXPR in order to instantiate the type.  */\n+/* The closure type of the lambda, which is also the type of the\n+   LAMBDA_EXPR.  */\n #define LAMBDA_EXPR_CLOSURE(NODE) \\\n-  (((struct tree_lambda_expr *)LAMBDA_EXPR_CHECK (NODE))->closure)\n+  (TREE_TYPE (LAMBDA_EXPR_CHECK (NODE)))\n \n struct GTY (()) tree_lambda_expr\n {\n   struct tree_typed typed;\n   tree capture_list;\n   tree this_capture;\n-  tree return_type;\n   tree extra_scope;\n-  tree closure;\n   vec<tree, va_gc> *pending_proxies;\n   location_t locus;\n   enum cp_lambda_default_capture_mode_type default_capture_mode;"}, {"sha": "55d3415676c6c13645080f92143d06fa7a8334f3", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9925f216d0f85e8ee20900162b5238333f8e567e/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9925f216d0f85e8ee20900162b5238333f8e567e/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=9925f216d0f85e8ee20900162b5238333f8e567e", "patch": "@@ -42,7 +42,6 @@ build_lambda_expr (void)\n   LAMBDA_EXPR_CAPTURE_LIST         (lambda) = NULL_TREE;\n   LAMBDA_EXPR_THIS_CAPTURE         (lambda) = NULL_TREE;\n   LAMBDA_EXPR_PENDING_PROXIES      (lambda) = NULL;\n-  LAMBDA_EXPR_RETURN_TYPE          (lambda) = NULL_TREE;\n   LAMBDA_EXPR_MUTABLE_P            (lambda) = false;\n   return lambda;\n }"}, {"sha": "9f62b4310e720f5b9fe960cc46500c5aed26a667", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9925f216d0f85e8ee20900162b5238333f8e567e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9925f216d0f85e8ee20900162b5238333f8e567e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=9925f216d0f85e8ee20900162b5238333f8e567e", "patch": "@@ -10416,6 +10416,7 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n   tree exception_spec = NULL_TREE;\n   tree template_param_list = NULL_TREE;\n   tree tx_qual = NULL_TREE;\n+  tree return_type = NULL_TREE;\n   cp_decl_specifier_seq lambda_specs;\n   clear_decl_specs (&lambda_specs);\n \n@@ -10490,8 +10491,7 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n       if (cp_lexer_next_token_is (parser->lexer, CPP_DEREF))\n         {\n           cp_lexer_consume_token (parser->lexer);\n-          LAMBDA_EXPR_RETURN_TYPE (lambda_expr)\n-\t    = cp_parser_trailing_type_id (parser);\n+          return_type = cp_parser_trailing_type_id (parser);\n         }\n \n       /* The function parameters must be in scope all the way until after the\n@@ -10514,8 +10514,8 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n     void *p;\n \n     clear_decl_specs (&return_type_specs);\n-    if (LAMBDA_EXPR_RETURN_TYPE (lambda_expr))\n-      return_type_specs.type = LAMBDA_EXPR_RETURN_TYPE (lambda_expr);\n+    if (return_type)\n+      return_type_specs.type = return_type;\n     else\n       /* Maybe we will deduce the return type later.  */\n       return_type_specs.type = make_auto ();\n@@ -10555,7 +10555,7 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n \tDECL_ARTIFICIAL (fco) = 1;\n \t/* Give the object parameter a different name.  */\n \tDECL_NAME (DECL_ARGUMENTS (fco)) = get_identifier (\"__closure\");\n-\tif (LAMBDA_EXPR_RETURN_TYPE (lambda_expr))\n+\tif (return_type)\n \t  TYPE_HAS_LATE_RETURN_TYPE (TREE_TYPE (fco)) = 1;\n       }\n     if (template_param_list)\n@@ -10645,7 +10645,7 @@ cp_parser_lambda_body (cp_parser* parser, tree lambda_expr)\n        nor a deducible form, errors should be reported for return statements\n        in the body.  Since we used void as the placeholder return type, parsing\n        the body as usual will give such desired behavior.  */\n-    if (!LAMBDA_EXPR_RETURN_TYPE (lambda_expr)\n+    if (is_auto (TREE_TYPE (TREE_TYPE (fco)))\n         && cp_lexer_peek_nth_token (parser->lexer, 1)->keyword == RID_RETURN\n         && cp_lexer_peek_nth_token (parser->lexer, 2)->type != CPP_SEMICOLON)\n       {"}, {"sha": "e064a11c05bd1e4ddc1317a1164714102ac2c1bd", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9925f216d0f85e8ee20900162b5238333f8e567e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9925f216d0f85e8ee20900162b5238333f8e567e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9925f216d0f85e8ee20900162b5238333f8e567e", "patch": "@@ -17979,9 +17979,6 @@ tsubst_copy_and_build (tree t,\n \t   declaration of the op() for later calls to lambda_function.  */\n \tcomplete_type (type);\n \n-\tif (tree fn = lambda_function (type))\n-\t  LAMBDA_EXPR_RETURN_TYPE (r) = TREE_TYPE (TREE_TYPE (fn));\n-\n \tLAMBDA_EXPR_THIS_CAPTURE (r) = NULL_TREE;\n \n \tinsert_pending_capture_proxies ();"}, {"sha": "50c717e286e42b3cf3fd9e735bc453bba1de6671", "filename": "gcc/cp/ptree.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9925f216d0f85e8ee20900162b5238333f8e567e/gcc%2Fcp%2Fptree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9925f216d0f85e8ee20900162b5238333f8e567e/gcc%2Fcp%2Fptree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fptree.c?ref=9925f216d0f85e8ee20900162b5238333f8e567e", "patch": "@@ -204,8 +204,6 @@ cxx_print_lambda_node (FILE *file, tree node, int indent)\n   fprintf (file, \"] \");\n   print_node (file, \"capture_list\", LAMBDA_EXPR_CAPTURE_LIST (node), indent + 4);\n   print_node (file, \"this_capture\", LAMBDA_EXPR_THIS_CAPTURE (node), indent + 4);\n-  print_node (file, \"return_type\", LAMBDA_EXPR_RETURN_TYPE (node), indent + 4);\n-  print_node (file, \"closure\", LAMBDA_EXPR_CLOSURE (node), indent + 4);\n }\n \n void"}, {"sha": "fe118cd97af231b508d469d7b18cbee9e6b8e90a", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9925f216d0f85e8ee20900162b5238333f8e567e/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9925f216d0f85e8ee20900162b5238333f8e567e/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=9925f216d0f85e8ee20900162b5238333f8e567e", "patch": "@@ -9363,12 +9363,6 @@ apply_deduced_return_type (tree fco, tree return_type)\n   if (return_type == error_mark_node)\n     return;\n \n-  if (LAMBDA_FUNCTION_P (fco))\n-    {\n-      tree lambda = CLASSTYPE_LAMBDA_EXPR (current_class_type);\n-      LAMBDA_EXPR_RETURN_TYPE (lambda) = return_type;\n-    }\n-\n   if (DECL_CONV_FN_P (fco))\n     DECL_NAME (fco) = make_conv_op_name (return_type);\n "}]}