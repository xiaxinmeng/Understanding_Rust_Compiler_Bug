{"sha": "9c1303987c80cd2549ef6a9c76074c86a8f986e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMxMzAzOTg3YzgwY2QyNTQ5ZWY2YTljNzYwNzRjODZhOGY5ODZlMg==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1995-04-28T01:07:33Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1995-04-28T01:07:33Z"}, "message": "(valid_machine_attribute): Add prototype.\n\n(is_attribute_p, lookup_attribute): Likewise.\n\nFrom-SVN: r9519", "tree": {"sha": "639d460d29b67549eeaae39535c6b982320a59b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/639d460d29b67549eeaae39535c6b982320a59b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c1303987c80cd2549ef6a9c76074c86a8f986e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c1303987c80cd2549ef6a9c76074c86a8f986e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c1303987c80cd2549ef6a9c76074c86a8f986e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c1303987c80cd2549ef6a9c76074c86a8f986e2/comments", "author": null, "committer": null, "parents": [{"sha": "597bc2d49531634947cb89f4faabf7166c698efd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/597bc2d49531634947cb89f4faabf7166c698efd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/597bc2d49531634947cb89f4faabf7166c698efd"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "718ea142a36ab7632fd98fb06b9e80de0795d0b6", "filename": "gcc/tree.h", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1303987c80cd2549ef6a9c76074c86a8f986e2/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1303987c80cd2549ef6a9c76074c86a8f986e2/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=9c1303987c80cd2549ef6a9c76074c86a8f986e2", "patch": "@@ -1194,7 +1194,7 @@ extern tree array_type_nelts\t\tPROTO((tree));\n extern tree value_member\t\tPROTO((tree, tree));\n extern tree purpose_member\t\tPROTO((tree, tree));\n extern tree binfo_member\t\tPROTO((tree, tree));\n-extern int attribute_in_list\t\tPROTO((tree, tree));\n+extern int attribute_hash_list\t\tPROTO((tree));\n extern int attribute_list_equal\t\tPROTO((tree, tree));\n extern int attribute_list_contained\tPROTO((tree, tree));\n extern int tree_int_cst_equal\t\tPROTO((tree, tree));\n@@ -1217,6 +1217,20 @@ extern tree make_tree ();\n extern tree build_type_attribute_variant PROTO((tree, tree));\n extern tree build_decl_attribute_variant PROTO((tree, tree));\n \n+/* Return 1 if an attribute and its arguments are valid for a decl or type.  */\n+\n+int valid_machine_attribute\t\tPROTO((tree, tree, tree, tree));\n+\n+/* Given a tree node and a string, return non-zero if the tree node is\n+   a valid attribute name for the string.  */\n+\n+int is_attribute_p\t\t\tPROTO((char *, tree));\n+\n+/* Given an attribute name and a list of attributes, return the list element\n+   of the attribute or NULL_TREE if not found.  */\n+\n+tree lookup_attribute\t\t\tPROTO((char *, tree));\n+\n /* Given a type node TYPE, and CONSTP and VOLATILEP, return a type\n    for the same kind of data as TYPE describes.\n    Variants point to the \"main variant\" (which has neither CONST nor VOLATILE)"}]}