{"sha": "afdec9bd067cffe3242fe256e547dc5733006b2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZkZWM5YmQwNjdjZmZlMzI0MmZlMjU2ZTU0N2RjNTczMzAwNmIyYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2013-09-14T15:27:21Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-09-14T15:27:21Z"}, "message": "tree-into-ssa.c (gate_into_ssa): New.\n\n\n\t* tree-into-ssa.c (gate_into_ssa): New.\n\t(pass_data_build_ssa): Use it.\n\t* cgraph.h (expand_thunk): Update prototype.\n\t* cgraphunit.c (analyze_function): Expand thunks early.\n\t(expand_thunk): Fix DECL_CONTEXT of reust_decl;\n\tbuild proper cgraph; set in_ssa_p; clear bogus TREE_ASM_WRITTEN;\n\tset lowered flag; do not add new function.\n\t(assemble_thunks_and_aliases): Update.\n\t* tree-ssa.c (gate_init_datastructures): New gate.\n\t(pass_data_init_datastructures): Use it.\n\nFrom-SVN: r202592", "tree": {"sha": "44cbc571bf525f510cf558c4af549858eb78da92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44cbc571bf525f510cf558c4af549858eb78da92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afdec9bd067cffe3242fe256e547dc5733006b2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afdec9bd067cffe3242fe256e547dc5733006b2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afdec9bd067cffe3242fe256e547dc5733006b2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afdec9bd067cffe3242fe256e547dc5733006b2c/comments", "author": null, "committer": null, "parents": [{"sha": "7b86458e38ee3c88ca4e222c85ef6fa883267315", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b86458e38ee3c88ca4e222c85ef6fa883267315", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b86458e38ee3c88ca4e222c85ef6fa883267315"}], "stats": {"total": 104, "additions": 82, "deletions": 22}, "files": [{"sha": "08a9124770d062617e258a2d90a578ba7d8d79e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afdec9bd067cffe3242fe256e547dc5733006b2c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afdec9bd067cffe3242fe256e547dc5733006b2c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=afdec9bd067cffe3242fe256e547dc5733006b2c", "patch": "@@ -1,3 +1,16 @@\n+2013-09-14  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-into-ssa.c (gate_into_ssa): New.\n+\t(pass_data_build_ssa): Use it.\n+\t* cgraph.h (expand_thunk): Update prototype.\n+\t* cgraphunit.c (analyze_function): Expand thunks early.\n+\t(expand_thunk): Fix DECL_CONTEXT of reust_decl;\n+\tbuild proper cgraph; set in_ssa_p; clear bogus TREE_ASM_WRITTEN;\n+\tset lowered flag; do not add new function.\n+\t(assemble_thunks_and_aliases): Update.\n+\t* tree-ssa.c (gate_init_datastructures): New gate.\n+\t(pass_data_init_datastructures): Use it.\n+\n 2013-09-14  Iain Sandoe  <iain@codesourcery.com>\n \n \tPR target/58269"}, {"sha": "50e8743bbf725349a60d98469aa531f0b14d9402", "filename": "gcc/cgraph.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afdec9bd067cffe3242fe256e547dc5733006b2c/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afdec9bd067cffe3242fe256e547dc5733006b2c/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=afdec9bd067cffe3242fe256e547dc5733006b2c", "patch": "@@ -757,7 +757,7 @@ void fixup_same_cpp_alias_visibility (symtab_node, symtab_node target, tree);\n     IN_SSA is true if the gimple is in SSA.  */\n basic_block init_lowered_empty_function (tree, bool);\n void cgraph_reset_node (struct cgraph_node *);\n-void expand_thunk (struct cgraph_node *);\n+bool expand_thunk (struct cgraph_node *, bool);\n \n /* In cgraphclones.c  */\n "}, {"sha": "1644ca9eea9579b8eec35ae080cf99d434c4c962", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 46, "deletions": 19, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afdec9bd067cffe3242fe256e547dc5733006b2c/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afdec9bd067cffe3242fe256e547dc5733006b2c/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=afdec9bd067cffe3242fe256e547dc5733006b2c", "patch": "@@ -592,15 +592,21 @@ analyze_function (struct cgraph_node *node)\n   location_t saved_loc = input_location;\n   input_location = DECL_SOURCE_LOCATION (decl);\n \n-  if (node->symbol.alias)\n-    symtab_resolve_alias\n-       ((symtab_node) node, (symtab_node) cgraph_get_node (node->symbol.alias_target));\n-  else if (node->thunk.thunk_p)\n+  if (node->thunk.thunk_p)\n     {\n       cgraph_create_edge (node, cgraph_get_node (node->thunk.alias),\n-\t\t\t  NULL, 0, CGRAPH_FREQ_BASE);\n+\t\t          NULL, 0, CGRAPH_FREQ_BASE);\n+      if (!expand_thunk (node, false))\n+\t{\n+\t  node->thunk.alias = NULL;\n+\t  node->symbol.analyzed = true;\n+\t  return;\n+\t}\n       node->thunk.alias = NULL;\n     }\n+  if (node->symbol.alias)\n+    symtab_resolve_alias\n+       ((symtab_node) node, (symtab_node) cgraph_get_node (node->symbol.alias_target));\n   else if (node->dispatcher_function)\n     {\n       /* Generate the dispatcher body of multi-versioned functions.  */\n@@ -1432,10 +1438,12 @@ thunk_adjust (gimple_stmt_iterator * bsi,\n   return ret;\n }\n \n-/* Produce assembler for thunk NODE.  */\n+/* Expand thunk NODE to gimple if possible.\n+   When OUTPUT_ASM_THUNK is true, also produce assembler for\n+   thunks that are not lowered.  */\n \n-void\n-expand_thunk (struct cgraph_node *node)\n+bool\n+expand_thunk (struct cgraph_node *node, bool output_asm_thunks)\n {\n   bool this_adjusting = node->thunk.this_adjusting;\n   HOST_WIDE_INT fixed_offset = node->thunk.fixed_offset;\n@@ -1445,14 +1453,6 @@ expand_thunk (struct cgraph_node *node)\n   tree thunk_fndecl = node->symbol.decl;\n   tree a;\n \n-  if (in_lto_p)\n-    cgraph_get_body (node);\n-  a = DECL_ARGUMENTS (thunk_fndecl);\n-\n-  current_function_decl = thunk_fndecl;\n-\n-  /* Ensure thunks are emitted in their correct sections.  */\n-  resolve_unique_section (thunk_fndecl, 0, flag_function_sections);\n \n   if (this_adjusting\n       && targetm.asm_out.can_output_mi_thunk (thunk_fndecl, fixed_offset,\n@@ -1461,10 +1461,23 @@ expand_thunk (struct cgraph_node *node)\n       const char *fnname;\n       tree fn_block;\n       tree restype = TREE_TYPE (TREE_TYPE (thunk_fndecl));\n+\n+      if (!output_asm_thunks)\n+\treturn false;\n+\n+      if (in_lto_p)\n+\tcgraph_get_body (node);\n+      a = DECL_ARGUMENTS (thunk_fndecl);\n       \n+      current_function_decl = thunk_fndecl;\n+\n+      /* Ensure thunks are emitted in their correct sections.  */\n+      resolve_unique_section (thunk_fndecl, 0, flag_function_sections);\n+\n       DECL_RESULT (thunk_fndecl)\n \t= build_decl (DECL_SOURCE_LOCATION (thunk_fndecl),\n \t\t      RESULT_DECL, 0, restype);\n+      DECL_CONTEXT (DECL_RESULT (thunk_fndecl)) = thunk_fndecl;\n       fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk_fndecl));\n \n       /* The back end expects DECL_INITIAL to contain a BLOCK, so we\n@@ -1506,6 +1519,15 @@ expand_thunk (struct cgraph_node *node)\n       gimple call;\n       gimple ret;\n \n+      if (in_lto_p)\n+\tcgraph_get_body (node);\n+      a = DECL_ARGUMENTS (thunk_fndecl);\n+      \n+      current_function_decl = thunk_fndecl;\n+\n+      /* Ensure thunks are emitted in their correct sections.  */\n+      resolve_unique_section (thunk_fndecl, 0, flag_function_sections);\n+\n       DECL_IGNORED_P (thunk_fndecl) = 1;\n       bitmap_obstack_initialize (NULL);\n \n@@ -1520,6 +1542,7 @@ expand_thunk (struct cgraph_node *node)\n \t  DECL_ARTIFICIAL (resdecl) = 1;\n \t  DECL_IGNORED_P (resdecl) = 1;\n \t  DECL_RESULT (thunk_fndecl) = resdecl;\n+          DECL_CONTEXT (DECL_RESULT (thunk_fndecl)) = thunk_fndecl;\n \t}\n       else\n \tresdecl = DECL_RESULT (thunk_fndecl);\n@@ -1556,6 +1579,7 @@ expand_thunk (struct cgraph_node *node)\n         for (i = 1, arg = DECL_CHAIN (a); i < nargs; i++, arg = DECL_CHAIN (arg))\n \t  vargs.quick_push (arg);\n       call = gimple_build_call_vec (build_fold_addr_expr_loc (0, alias), vargs);\n+      node->callees->call_stmt = call;\n       vargs.release ();\n       gimple_call_set_from_thunk (call, true);\n       if (restmp)\n@@ -1624,6 +1648,9 @@ expand_thunk (struct cgraph_node *node)\n \t  remove_edge (single_succ_edge (bb));\n \t}\n \n+      cfun->gimple_df->in_ssa_p = true;\n+      /* FIXME: C++ FE should stop setting TREE_ASM_WRITTEN on thunks.  */\n+      TREE_ASM_WRITTEN (thunk_fndecl) = false;\n       delete_unreachable_blocks ();\n       update_ssa (TODO_update_ssa);\n #ifdef ENABLE_CHECKING\n@@ -1633,12 +1660,12 @@ expand_thunk (struct cgraph_node *node)\n       /* Since we want to emit the thunk, we explicitly mark its name as\n \t referenced.  */\n       node->thunk.thunk_p = false;\n-      rebuild_cgraph_edges ();\n-      cgraph_add_new_function (thunk_fndecl, true);\n+      node->lowered = true;\n       bitmap_obstack_release (NULL);\n     }\n   current_function_decl = NULL;\n   set_cfun (NULL);\n+  return true;\n }\n \n /* Assemble thunks and aliases associated to NODE.  */\n@@ -1657,7 +1684,7 @@ assemble_thunks_and_aliases (struct cgraph_node *node)\n \n \te = e->next_caller;\n \tassemble_thunks_and_aliases (thunk);\n-        expand_thunk (thunk);\n+        expand_thunk (thunk, true);\n       }\n     else\n       e = e->next_caller;"}, {"sha": "726744d500381ec36d9e92940890b858e7440506", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afdec9bd067cffe3242fe256e547dc5733006b2c/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afdec9bd067cffe3242fe256e547dc5733006b2c/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=afdec9bd067cffe3242fe256e547dc5733006b2c", "patch": "@@ -2409,6 +2409,14 @@ rewrite_into_ssa (void)\n   return 0;\n }\n \n+/* Gate for IPCP optimization.  */\n+\n+static bool\n+gate_into_ssa (void)\n+{\n+  /* Do nothing for funcions that was produced already in SSA form.  */\n+  return !(cfun->curr_properties & PROP_ssa);\n+}\n \n namespace {\n \n@@ -2417,7 +2425,7 @@ const pass_data pass_data_build_ssa =\n   GIMPLE_PASS, /* type */\n   \"ssa\", /* name */\n   OPTGROUP_NONE, /* optinfo_flags */\n-  false, /* has_gate */\n+  true, /* has_gate */\n   true, /* has_execute */\n   TV_TREE_SSA_OTHER, /* tv_id */\n   PROP_cfg, /* properties_required */\n@@ -2435,6 +2443,7 @@ class pass_build_ssa : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n+  bool gate () { return gate_into_ssa (); }\n   unsigned int execute () { return rewrite_into_ssa (); }\n \n }; // class pass_build_ssa"}, {"sha": "461bb52e821de5b427dfca112a3d31b9247ebfc8", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afdec9bd067cffe3242fe256e547dc5733006b2c/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afdec9bd067cffe3242fe256e547dc5733006b2c/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=afdec9bd067cffe3242fe256e547dc5733006b2c", "patch": "@@ -1084,18 +1084,28 @@ static unsigned int\n execute_init_datastructures (void)\n {\n   /* Allocate hash tables, arrays and other structures.  */\n+  gcc_assert (!cfun->gimple_df);\n   init_tree_ssa (cfun);\n   return 0;\n }\n \n+/* Gate for IPCP optimization.  */\n+\n+static bool\n+gate_init_datastructures (void)\n+{\n+  /* Do nothing for funcions that was produced already in SSA form.  */\n+  return !(cfun->curr_properties & PROP_ssa);\n+}\n+\n namespace {\n \n const pass_data pass_data_init_datastructures =\n {\n   GIMPLE_PASS, /* type */\n   \"*init_datastructures\", /* name */\n   OPTGROUP_NONE, /* optinfo_flags */\n-  false, /* has_gate */\n+  true, /* has_gate */\n   true, /* has_execute */\n   TV_NONE, /* tv_id */\n   PROP_cfg, /* properties_required */\n@@ -1113,6 +1123,7 @@ class pass_init_datastructures : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n+  bool gate () { return gate_init_datastructures (); }\n   unsigned int execute () { return execute_init_datastructures (); }\n \n }; // class pass_init_datastructures"}]}