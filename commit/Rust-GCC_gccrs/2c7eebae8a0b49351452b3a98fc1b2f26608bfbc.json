{"sha": "2c7eebae8a0b49351452b3a98fc1b2f26608bfbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM3ZWViYWU4YTBiNDkzNTE0NTJiM2E5OGZjMWIyZjI2NjA4YmZiYw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2011-05-03T13:08:36Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2011-05-03T13:08:36Z"}, "message": "function.c (init_function_start): Call decide_function_section.\n\n\t* function.c (init_function_start): Call decide_function_section.\n\t* varasm.c (decide_function_section): New function.\n\t(assemble_start_function): When not using\n\tflag_reorder_blocks_and_partition, don't compute in_cold_section_p\n\tor first_function_block_is_cold.\n\t* rtl.h (decide_function_section): Declare.\n\n\t* gcc.target/arm/cold-lc.c: New test.\n\nFrom-SVN: r173303", "tree": {"sha": "2d807f2a3c1c4b7e1108c8950f4b2d7408be0561", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d807f2a3c1c4b7e1108c8950f4b2d7408be0561"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c7eebae8a0b49351452b3a98fc1b2f26608bfbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c7eebae8a0b49351452b3a98fc1b2f26608bfbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c7eebae8a0b49351452b3a98fc1b2f26608bfbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c7eebae8a0b49351452b3a98fc1b2f26608bfbc/comments", "author": null, "committer": null, "parents": [{"sha": "17038fcf969aacff3fa4ebdbb9bfedda6705f612", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17038fcf969aacff3fa4ebdbb9bfedda6705f612", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17038fcf969aacff3fa4ebdbb9bfedda6705f612"}], "stats": {"total": 78, "additions": 67, "deletions": 11}, "files": [{"sha": "93b086231a13a6f09a18c070cd4a23c0a6186b17", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7eebae8a0b49351452b3a98fc1b2f26608bfbc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7eebae8a0b49351452b3a98fc1b2f26608bfbc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2c7eebae8a0b49351452b3a98fc1b2f26608bfbc", "patch": "@@ -1,3 +1,12 @@\n+2011-05-03  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* function.c (init_function_start): Call decide_function_section.\n+\t* varasm.c (decide_function_section): New function.\n+\t(assemble_start_function): When not using\n+\tflag_reorder_blocks_and_partition, don't compute in_cold_section_p\n+\tor first_function_block_is_cold.\n+\t* rtl.h (decide_function_section): Declare.\n+\n 2011-05-03  Uros Bizjak  <ubizjak@gmail.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "ab1ca9ecf52e06416f9ace41050cd0091c865ec9", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7eebae8a0b49351452b3a98fc1b2f26608bfbc/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7eebae8a0b49351452b3a98fc1b2f26608bfbc/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=2c7eebae8a0b49351452b3a98fc1b2f26608bfbc", "patch": "@@ -4515,6 +4515,7 @@ init_function_start (tree subr)\n   else\n     allocate_struct_function (subr, false);\n   prepare_function_start ();\n+  decide_function_section (subr);\n \n   /* Warn if this value is an aggregate type,\n      regardless of which calling convention we are using for it.  */"}, {"sha": "62b677ac3c06226245f8cac560860096a2c18f21", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7eebae8a0b49351452b3a98fc1b2f26608bfbc/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7eebae8a0b49351452b3a98fc1b2f26608bfbc/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=2c7eebae8a0b49351452b3a98fc1b2f26608bfbc", "patch": "@@ -1668,6 +1668,7 @@ extern rtx get_pool_constant (rtx);\n extern rtx get_pool_constant_mark (rtx, bool *);\n extern enum machine_mode get_pool_mode (const_rtx);\n extern rtx simplify_subtraction (rtx);\n+extern void decide_function_section (tree);\n \n /* In function.c  */\n extern rtx assign_stack_local (enum machine_mode, HOST_WIDE_INT, int);"}, {"sha": "c1c1fbe5e6024307d845e18473d193b9fe849818", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7eebae8a0b49351452b3a98fc1b2f26608bfbc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7eebae8a0b49351452b3a98fc1b2f26608bfbc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2c7eebae8a0b49351452b3a98fc1b2f26608bfbc", "patch": "@@ -1,3 +1,7 @@\n+2011-05-03  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* gcc.target/arm/cold-lc.c: New test.\n+\n 2011-05-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/48774"}, {"sha": "295c29fe8f0c946d679e46fe44e1ceffaf777f91", "filename": "gcc/testsuite/gcc.target/arm/cold-lc.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7eebae8a0b49351452b3a98fc1b2f26608bfbc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcold-lc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7eebae8a0b49351452b3a98fc1b2f26608bfbc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcold-lc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcold-lc.c?ref=2c7eebae8a0b49351452b3a98fc1b2f26608bfbc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mlong-calls\" } */\n+/* { dg-final { scan-assembler-not \"bl\\[^\\n\\]*dump_stack\" } } */\n+\n+extern void dump_stack (void) __attribute__ ((__cold__)) __attribute__ ((noinline));\n+struct thread_info {\n+    struct task_struct *task;\n+};\n+extern struct thread_info *current_thread_info (void);\n+\n+void dump_stack (void)\n+{\n+    unsigned long stack;\n+    show_stack ((current_thread_info ()->task), &stack);\n+}\n+\n+void die (char *str, void *fp, int nr)\n+{\n+    dump_stack ();\n+    while (1);\n+}\n+"}, {"sha": "f46c21b3bde0affad8e8f382ffabe63eed08088f", "filename": "gcc/varasm.c", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7eebae8a0b49351452b3a98fc1b2f26608bfbc/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7eebae8a0b49351452b3a98fc1b2f26608bfbc/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=2c7eebae8a0b49351452b3a98fc1b2f26608bfbc", "patch": "@@ -1512,6 +1512,33 @@ notice_global_symbol (tree decl)\n     }\n }\n \n+/* If not using flag_reorder_blocks_and_partition, decide early whether the\n+   current function goes into the cold section, so that targets can use\n+   current_function_section during RTL expansion.  DECL describes the\n+   function.  */\n+\n+void\n+decide_function_section (tree decl)\n+{\n+  first_function_block_is_cold = false;\n+\n+  if (flag_reorder_blocks_and_partition)\n+    /* We will decide in assemble_start_function.  */\n+    return;\n+\n+ if (DECL_SECTION_NAME (decl))\n+    {\n+      struct cgraph_node *node = cgraph_get_node (current_function_decl);\n+      /* Calls to function_section rely on first_function_block_is_cold\n+\t being accurate.  */\n+      first_function_block_is_cold = (node\n+\t\t\t\t      && node->frequency\n+\t\t\t\t      == NODE_FREQUENCY_UNLIKELY_EXECUTED);\n+    }\n+\n+  in_cold_section_p = first_function_block_is_cold;\n+}\n+\n /* Output assembler code for the constant pool of a function and associated\n    with defining the name of the function.  DECL describes the function.\n    NAME is the function's name.  For the constant pool, we use the current\n@@ -1524,7 +1551,6 @@ assemble_start_function (tree decl, const char *fnname)\n   char tmp_label[100];\n   bool hot_label_written = false;\n \n-  first_function_block_is_cold = false;\n   if (flag_reorder_blocks_and_partition)\n     {\n       ASM_GENERATE_INTERNAL_LABEL (tmp_label, \"LHOTB\", const_labelno);\n@@ -1559,6 +1585,8 @@ assemble_start_function (tree decl, const char *fnname)\n \n   if (flag_reorder_blocks_and_partition)\n     {\n+      first_function_block_is_cold = false;\n+\n       switch_to_section (unlikely_text_section ());\n       assemble_align (DECL_ALIGN (decl));\n       ASM_OUTPUT_LABEL (asm_out_file, crtl->subsections.cold_section_label);\n@@ -1575,18 +1603,9 @@ assemble_start_function (tree decl, const char *fnname)\n \t  hot_label_written = true;\n \t  first_function_block_is_cold = true;\n \t}\n-    }\n-  else if (DECL_SECTION_NAME (decl))\n-    {\n-      struct cgraph_node *node = cgraph_get_node (current_function_decl);\n-      /* Calls to function_section rely on first_function_block_is_cold\n-\t being accurate.  */\n-      first_function_block_is_cold = (node\n-\t\t\t\t      && node->frequency\n-\t\t\t\t      == NODE_FREQUENCY_UNLIKELY_EXECUTED);\n+      in_cold_section_p = first_function_block_is_cold;\n     }\n \n-  in_cold_section_p = first_function_block_is_cold;\n \n   /* Switch to the correct text section for the start of the function.  */\n "}]}