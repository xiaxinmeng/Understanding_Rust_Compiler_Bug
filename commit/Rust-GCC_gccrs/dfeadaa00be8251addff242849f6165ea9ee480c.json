{"sha": "dfeadaa00be8251addff242849f6165ea9ee480c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZlYWRhYTAwYmU4MjUxYWRkZmYyNDI4NDlmNjE2NWVhOWVlNDgwYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-07-10T16:45:25Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-07-10T16:45:25Z"}, "message": "re PR c++/57869 ([C++11] Casting a object pointer to a function pointer should not warn about a forbidden conversion)\n\n/c-family\n2013-07-10  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/57869\n\t* c.opt: Add Wconditionally-supported.\n\n/cp\n2013-07-10  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/57869\n\t* typeck.c (build_reinterpret_cast_1): With -Wconditionally-supported\n\twarn about casting between pointer-to-function and pointer-to-object.\n\n/gcc\n2013-07-10  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/57869\n\t* doc/invoke.texi: Document -Wconditionally-supported.\n\n/testsuite\n2013-07-10  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/57869\n\t* g++.dg/cpp0x/reinterpret_cast1.C: New.\n\t* g++.dg/warn/Wconditionally-supported-1.C: Likewise.\n\t* g++.dg/conversion/dr195.C: Update.\n\t* g++.dg/expr/cast2.C: Likewise.\n\nFrom-SVN: r200876", "tree": {"sha": "75c055db7e0b64c63a205638547a013fa6c62169", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75c055db7e0b64c63a205638547a013fa6c62169"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfeadaa00be8251addff242849f6165ea9ee480c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfeadaa00be8251addff242849f6165ea9ee480c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfeadaa00be8251addff242849f6165ea9ee480c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfeadaa00be8251addff242849f6165ea9ee480c/comments", "author": null, "committer": null, "parents": [{"sha": "87e356bada28a71fd101dce4512564ff6cb8fb15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87e356bada28a71fd101dce4512564ff6cb8fb15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87e356bada28a71fd101dce4512564ff6cb8fb15"}], "stats": {"total": 101, "additions": 83, "deletions": 18}, "files": [{"sha": "354e15cc5f6c2be173495367c21c8f5423e5001a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfeadaa00be8251addff242849f6165ea9ee480c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfeadaa00be8251addff242849f6165ea9ee480c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dfeadaa00be8251addff242849f6165ea9ee480c", "patch": "@@ -1,3 +1,8 @@\n+2013-07-10  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/57869\n+\t* doc/invoke.texi: Document -Wconditionally-supported.\n+\n 2013-07-10  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/57844"}, {"sha": "0506e55dd47b8cec87b850fde40fabf62c12be45", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfeadaa00be8251addff242849f6165ea9ee480c/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfeadaa00be8251addff242849f6165ea9ee480c/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=dfeadaa00be8251addff242849f6165ea9ee480c", "patch": "@@ -1,3 +1,8 @@\n+2013-07-10  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/57869\n+\t* c.opt: Add Wconditionally-supported.\n+\n 2013-07-04  Joern Rennecke <joern.rennecke@embecosm.com>\n \n \tPR c/57821\n@@ -17,7 +22,7 @@\n \t* c-cppbuiltin.c (c_cpp_builtins): Likewise.\n \t* c-opts.c (c_common_post_options): Likewise.\n \n-2013-06-21  Balaji V. Iyer  <balaji.v.iyer@intel.com>  \n+2013-06-21  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n \n \t* array-notation-common.c (length_mismatch_in_expr): Changed the\n \tparameter type's from a dynamic array to a vec_tree.  Also removed\n@@ -70,7 +75,7 @@\n \t(find_inv_trees): Likewise.\n \t(replace_inv_trees): Likewise.\n \t(find_correct_array_notation_type): Likewise.\n-\t\n+\n 2013-05-28  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n \n \t* c-common.c (c_define_builtins): When cilkplus is enabled, the"}, {"sha": "9690a087fd3569dc9b134d5cda944c77885bbb45", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfeadaa00be8251addff242849f6165ea9ee480c/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfeadaa00be8251addff242849f6165ea9ee480c/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=dfeadaa00be8251addff242849f6165ea9ee480c", "patch": "@@ -319,6 +319,10 @@ Wcomments\n C ObjC C++ ObjC++ Warning Alias(Wcomment)\n Synonym for -Wcomment\n \n+Wconditionally-supported\n+C++ ObjC++ Var(warn_conditionally_supported) Warning\n+Warn for conditionally-supported constructs\n+\n Wconversion\n C ObjC C++ ObjC++ Var(warn_conversion) Warning\n Warn for implicit type conversions that may change a value"}, {"sha": "3dede369473194e22a2fdc9a059b0a60377a8343", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfeadaa00be8251addff242849f6165ea9ee480c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfeadaa00be8251addff242849f6165ea9ee480c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dfeadaa00be8251addff242849f6165ea9ee480c", "patch": "@@ -1,3 +1,9 @@\n+2013-07-10  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/57869\n+\t* typeck.c (build_reinterpret_cast_1): With -Wconditionally-supported\n+\twarn about casting between pointer-to-function and pointer-to-object.\n+\n 2013-07-09  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/57402"}, {"sha": "1d504ad96d61e27c382c5e5df4de6704fa481b0b", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfeadaa00be8251addff242849f6165ea9ee480c/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfeadaa00be8251addff242849f6165ea9ee480c/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=dfeadaa00be8251addff242849f6165ea9ee480c", "patch": "@@ -6722,12 +6722,12 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n   else if ((TYPE_PTRFN_P (type) && TYPE_PTROBV_P (intype))\n \t   || (TYPE_PTRFN_P (intype) && TYPE_PTROBV_P (type)))\n     {\n-      if (pedantic && (complain & tf_warning))\n-\t/* Only issue a warning, as we have always supported this\n-\t   where possible, and it is necessary in some cases.  DR 195\n-\t   addresses this issue, but as of 2004/10/26 is still in\n-\t   drafting.  */\n-\twarning (0, \"ISO C++ forbids casting between pointer-to-function and pointer-to-object\");\n+      if (complain & tf_warning)\n+\t/* C++11 5.2.10 p8 says that \"Converting a function pointer to an\n+\t   object pointer type or vice versa is conditionally-supported.\"  */\n+\twarning (OPT_Wconditionally_supported,\n+\t\t \"casting between pointer-to-function and pointer-to-object \"\n+\t\t \"is conditionally-supported\");\n       return fold_if_not_in_template (build_nop (type, expr));\n     }\n   else if (TREE_CODE (type) == VECTOR_TYPE)"}, {"sha": "dd34233989e0fd638af35e20db7daa9bac1ef371", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfeadaa00be8251addff242849f6165ea9ee480c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfeadaa00be8251addff242849f6165ea9ee480c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=dfeadaa00be8251addff242849f6165ea9ee480c", "patch": "@@ -237,7 +237,7 @@ Objective-C and Objective-C++ Dialects}.\n -Waggressive-loop-optimizations -Warray-bounds @gol\n -Wno-attributes -Wno-builtin-macro-redefined @gol\n -Wc++-compat -Wc++11-compat -Wcast-align  -Wcast-qual  @gol\n--Wchar-subscripts -Wclobbered  -Wcomment @gol\n+-Wchar-subscripts -Wclobbered  -Wcomment -Wconditionally-supported  @gol\n -Wconversion  -Wcoverage-mismatch  -Wno-cpp  -Wno-deprecated  @gol\n -Wno-deprecated-declarations -Wdisabled-optimization  @gol\n -Wno-div-by-zero -Wdouble-promotion -Wempty-body  -Wenum-compare @gol\n@@ -4393,6 +4393,11 @@ programs.\n Warn for variables that might be changed by @samp{longjmp} or\n @samp{vfork}.  This warning is also enabled by @option{-Wextra}.\n \n+@item -Wconditionally-supported @r{(C++ and Objective-C++ only)}\n+@opindex Wconditionally-supported\n+@opindex Wno-conditionally-supported\n+Warn for conditionally-supported (C++11 [intro.defs]) constructs.\n+\n @item -Wconversion\n @opindex Wconversion\n @opindex Wno-conversion"}, {"sha": "520818f0199945481fa7125b394cfe1fbc502730", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfeadaa00be8251addff242849f6165ea9ee480c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfeadaa00be8251addff242849f6165ea9ee480c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dfeadaa00be8251addff242849f6165ea9ee480c", "patch": "@@ -1,3 +1,11 @@\n+2013-07-10  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/57869\n+\t* g++.dg/cpp0x/reinterpret_cast1.C: New.\n+\t* g++.dg/warn/Wconditionally-supported-1.C: Likewise.\n+\t* g++.dg/conversion/dr195.C: Update.\n+\t* g++.dg/expr/cast2.C: Likewise.\n+\n 2013-07-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR preprocessor/57757"}, {"sha": "cb26623e11fdb7a07e98974b8df1c4235158534a", "filename": "gcc/testsuite/g++.dg/conversion/dr195.C", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfeadaa00be8251addff242849f6165ea9ee480c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fdr195.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfeadaa00be8251addff242849f6165ea9ee480c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fdr195.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fdr195.C?ref=dfeadaa00be8251addff242849f6165ea9ee480c", "patch": "@@ -1,11 +1,12 @@\n // Copyright (C) 2004 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 20 Oct 2004 <nathan@codesourcery.com>\n \n-// DR 195 will allow conversions between function and object pointers\n-// under some circumstances. It is in drafting, so we don't implement\n-// it (yet).\n+// DR 195 was about allowing conversions between function and object\n+// pointers under some circumstances.  The issue got resolved for C++11,\n+// which, in 5.2.10 p8 says that: \"Converting a function pointer to an\n+// object pointer type or vice versa is conditionally-supported.\"\n \n-// This checks we warn when being pedantic.\n+// This checks we don't warn anymore with -pedantic.\n \n typedef void (*PF)(void);\n typedef void *PV;\n@@ -18,12 +19,12 @@ void foo ()\n   PO po;\n \n   /* the following two will almost definitly be ok with 195.  */\n-  pf = reinterpret_cast <PF>(pv); // { dg-warning \"casting between\" \"\" }\n-  pv = reinterpret_cast <PV>(pf); // { dg-warning \"casting between\" \"\" }\n+  pf = reinterpret_cast <PF>(pv);\n+  pv = reinterpret_cast <PV>(pf);\n \n   /* the following two might or might not be ok with 195.  */\n-  pf = reinterpret_cast <PF>(po); // { dg-warning \"casting between\" \"\" }\n-  po = reinterpret_cast <PO>(pf); // { dg-warning \"casting between\" \"\" }\n+  pf = reinterpret_cast <PF>(po);\n+  po = reinterpret_cast <PO>(pf);\n \n   /* These will never be ok, as they are implicit.  */\n   pv = pf; // { dg-error \"invalid conversion\" \"\" }"}, {"sha": "7c0463eac55c0c4156b184ea1eb31712436226d4", "filename": "gcc/testsuite/g++.dg/cpp0x/reinterpret_cast1.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfeadaa00be8251addff242849f6165ea9ee480c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Freinterpret_cast1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfeadaa00be8251addff242849f6165ea9ee480c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Freinterpret_cast1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Freinterpret_cast1.C?ref=dfeadaa00be8251addff242849f6165ea9ee480c", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/57869\n+// { dg-do compile { target c++11 } }\n+\n+void* po = 0;\n+void (*pf)() = reinterpret_cast<decltype(pf)>(po);\n+static_assert(sizeof(po) >= sizeof(pf), \"Conversion not supported\");"}, {"sha": "f3c18d5feec391d55aaac2998564496e9d0a7128", "filename": "gcc/testsuite/g++.dg/expr/cast2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfeadaa00be8251addff242849f6165ea9ee480c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcast2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfeadaa00be8251addff242849f6165ea9ee480c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcast2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcast2.C?ref=dfeadaa00be8251addff242849f6165ea9ee480c", "patch": "@@ -1,5 +1,5 @@\n void (*p)();\n \n void f() {\n-  (void *)p; // { dg-warning \"forbids cast\" }\n+  (void *)p;\n }"}, {"sha": "8cc5966eda823e628f339aec93c0cb04f9e16ed2", "filename": "gcc/testsuite/g++.dg/warn/Wconditionally-supported-1.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfeadaa00be8251addff242849f6165ea9ee480c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconditionally-supported-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfeadaa00be8251addff242849f6165ea9ee480c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconditionally-supported-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconditionally-supported-1.C?ref=dfeadaa00be8251addff242849f6165ea9ee480c", "patch": "@@ -0,0 +1,25 @@\n+// { dg-options \"-Wconditionally-supported\" }\n+\n+// DR 195 was about allowing conversions between function and object\n+// pointers under some circumstances.  The issue got resolved for C++11,\n+// which, in 5.2.10 p8 says that: \"Converting a function pointer to an \n+// object pointer type or vice versa is conditionally-supported.\"\n+\n+// This checks we warn with -Wconditionally-supported.\n+\n+typedef void (*PF)(void);\n+typedef void *PV;\n+typedef int *PO;\n+\n+void foo ()\n+{\n+  PF pf;\n+  PV pv;\n+  PO po;\n+\n+  pf = reinterpret_cast <PF>(pv); // { dg-warning \"conditionally-supported\" }\n+  pv = reinterpret_cast <PV>(pf); // { dg-warning \"conditionally-supported\" }\n+\n+  pf = reinterpret_cast <PF>(po); // { dg-warning \"conditionally-supported\" }\n+  po = reinterpret_cast <PO>(pf); // { dg-warning \"conditionally-supported\" }\n+}"}]}