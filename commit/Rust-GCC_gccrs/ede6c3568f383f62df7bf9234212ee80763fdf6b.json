{"sha": "ede6c3568f383f62df7bf9234212ee80763fdf6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRlNmMzNTY4ZjM4M2Y2MmRmN2JmOTIzNDIxMmVlODA3NjNmZGY2Yg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-16T00:17:05Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-16T00:17:05Z"}, "message": "Daily bump.", "tree": {"sha": "45d054ce7bd2004c8c72aae8526a219ec54f1d1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45d054ce7bd2004c8c72aae8526a219ec54f1d1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ede6c3568f383f62df7bf9234212ee80763fdf6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ede6c3568f383f62df7bf9234212ee80763fdf6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ede6c3568f383f62df7bf9234212ee80763fdf6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ede6c3568f383f62df7bf9234212ee80763fdf6b/comments", "author": null, "committer": null, "parents": [{"sha": "ec3fafa9ec7d16b9d89076efd3bac1d1af0502b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec3fafa9ec7d16b9d89076efd3bac1d1af0502b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec3fafa9ec7d16b9d89076efd3bac1d1af0502b8"}], "stats": {"total": 563, "additions": 562, "deletions": 1}, "files": [{"sha": "92423fdbbb201cd1058c0c0ea994f1659ff5218d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede6c3568f383f62df7bf9234212ee80763fdf6b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede6c3568f383f62df7bf9234212ee80763fdf6b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ede6c3568f383f62df7bf9234212ee80763fdf6b", "patch": "@@ -1,3 +1,71 @@\n+2021-06-15  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/100876\n+\t* builtins.c: (gimple_call_return_array): Account for size_t\n+\tmangling as either unsigned int or unsigned long\n+\n+2021-06-15  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* compare-elim.c (try_eliminate_compare): Run DCE to clean things\n+\tup before eliminating comparisons.\n+\n+2021-06-15  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op.cc (operator_bitwise_or::wi_fold): Make sure\n+\tnonzero|X is nonzero.\n+\t(range_op_bitwise_and_tests): Add tests for above.\n+\n+2021-06-15  Carl Love  <cel@us.ibm.com>\n+\n+\tPR target/101022\n+\t* config/rs6000/rs6000-builtin.def (VCMPEQUT): Fix the ICODE for the\n+\tenum definition.\n+\t(VRLQ, VSLQ, VSRQ, VSRAQ): Remove unused BU_P10_OVERLOAD_2\n+\tdefinitions.\n+\n+2021-06-15  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/92568\n+\t* gimplify.c (enum gimplify_defaultmap_kind): Add GDMK_SCALAR_TARGET.\n+\t(struct gimplify_omp_ctx): Extend defaultmap array by one.\n+\t(new_omp_context): Init defaultmap[GDMK_SCALAR_TARGET].\n+\t(omp_notice_variable): Update type classification for Fortran.\n+\t(gimplify_scan_omp_clauses): Update calls for new argument; handle\n+\tGDMK_SCALAR_TARGET; for Fortran, GDMK_POINTER avoid GOVD_MAP_0LEN_ARRAY.\n+\t* langhooks-def.h (lhd_omp_scalar_p): Add 'ptr_ok' argument.\n+\t* langhooks.c (lhd_omp_scalar_p): Likewise.\n+\t(LANG_HOOKS_OMP_ALLOCATABLE_P, LANG_HOOKS_OMP_SCALAR_TARGET_P): New.\n+\t(LANG_HOOKS_DECLS): Add them.\n+\t* langhooks.h (struct lang_hooks_for_decls): Add new hooks, update\n+\tomp_scalar_p pointer type to include the new bool argument.\n+\n+2021-06-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* doc/analyzer.texi\n+\t(Special Functions for Debugging the Analyzer): Add\n+\t__analyzer_dump_capacity.\n+\n+2021-06-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/101046\n+\t* expr.c (expand_expr_real_2) <case VEC_PACK_FIX_TRUNC_EXPR,\n+\tcase VEC_PACK_TRUNC_EXPR>: Clear subtarget when changing mode.\n+\n+2021-06-15  Richard Biener  <rguenther@suse.de>\n+\n+\t* cfgloopanal.c (mark_irreducible_loops): Use a dominance\n+\tcheck to identify loop latches.\n+\t* cfgloop.c (verify_loop_structure): Likewise.\n+\t* loop-init.c (apply_loop_flags): Allow marked irreducible\n+\tregions even with multiple latches.\n+\t* predict.c (rebuild_frequencies): Simplify.\n+\n+2021-06-15  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-threadupdate.c\n+\t(jump_thread_path_registry::mark_threaded_blocks): Assert we\n+\thave marked irreducible regions.\n+\n 2021-06-14  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/100876"}, {"sha": "052decd9611abb7624ec5577f18e71f2bc1118e1", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede6c3568f383f62df7bf9234212ee80763fdf6b/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede6c3568f383f62df7bf9234212ee80763fdf6b/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=ede6c3568f383f62df7bf9234212ee80763fdf6b", "patch": "@@ -1 +1 @@\n-20210615\n+20210616"}, {"sha": "31eca3fa0860818f94b24ede5f0534175a2e41f4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 276, "deletions": 0, "changes": 276, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede6c3568f383f62df7bf9234212ee80763fdf6b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede6c3568f383f62df7bf9234212ee80763fdf6b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ede6c3568f383f62df7bf9234212ee80763fdf6b", "patch": "@@ -1,3 +1,279 @@\n+2021-06-15  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_util.adb (Kill_Dead_Code): Generalize the existing\n+\thandling of if statements to handle case statements similarly.\n+\n+2021-06-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* raise.h (_gnat_builtin_longjmp): Delete.\n+\t(set_gnat_exit_status): Likewise.\n+\n+2021-06-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_util.adb (Possible_Side_Effect_In_SPARK): Handle component\n+\tdeclaration just like full type and subtype declarations.\n+\n+2021-06-15  Yannick Moy  <moy@adacore.com>\n+\n+\t* errout.adb (First_And_Last_Node): Also apply to arbitrary late\n+\tdeclarations, not only subprogram specs.\n+\n+2021-06-15  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch3.adb (Make_Class_Wide_Type): Make sure all the calls to\n+\tReinit_Field_To_Zero are for the correct Ekinds.\n+\n+2021-06-15  Bob Duff  <duff@adacore.com>\n+\n+\t* aspects.ads (No_Task_Parts): New aspect.\n+\t* snames.ads-tmpl: Add the aspect name.\n+\t* exp_ch6.adb (Might_Have_Tasks): Return False if this is a\n+\tclass-wide type whose specific type has No_Task_Parts.\n+\t* freeze.adb (Check_No_Parts_Violations): This is an adaptation\n+\tof the procedure formerly known as\n+\tCheck_No_Controlled_Parts_Violations, which now supports both\n+\tNo_Controlled_Parts and No_Task_Parts.  It takes a parameter\n+\tindicating which aspect is being checked.\n+\t(Freeze_Entity): Call Check_No_Parts_Violations for both\n+\taspects.\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): The code for\n+\tAspect_No_Controlled_Parts already works as is with\n+\tAspect_No_Task_Parts.\n+\t* libgnat/a-iteint.ads: Add No_Task_Parts aspect to the two\n+\titerator iterfaces.\n+\t* doc/gnat_rm/implementation_defined_aspects.rst: Add\n+\tdocumentation for the No_Task_Parts aspect.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2021-06-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_unst.adb (Unnest_Subprogram.Build_Table.Visit_Node): Fix\n+\thandling of scopes for subprogram calls.\n+\n+2021-06-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb: Fix typos in comments related to access types.\n+\t* sem_util.adb (Is_Access_Variable): Stronger condition.\n+\n+2021-06-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* Make-generated.in: Add rule to copy runtime files needed\n+\tduring stage1.\n+\t* raise.c: Remove obsolete symbols used during bootstrap.\n+\t* gcc-interface/Make-lang.in: Do not use libgnat sources during\n+\tstage1.\n+\t(GNAT_ADA_OBJS, GNATBIND_OBJS): Split in two parts, the common\n+\tpart and the part only used outside of stage1.\n+\t(ADA_GENERATED_FILES): Add runtime files needed during bootstrap\n+\twhen recent APIs are needed.\n+\t(ada/b_gnatb.adb): Remove prerequisite.\n+\t* gcc-interface/system.ads: Remove obsolete entries.\n+\n+2021-06-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* raise-gcc.c (__gnat_personality_seh0): Use PERSONALITY_FUNCTION.\n+\n+2021-06-15  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.adb (Is_Confirming): Separate the handling of\n+\tImplicit_Dereference, for which no pragma is generated but which\n+\tis already checked for legality in Sem_Ch13, including renamed\n+\tdiscriminants in a derived type.\n+\t(Is_Confirming, Same_Name): For expanded names, only check\n+\tmatching of selector, because prefix may correspond to original\n+\tand derived types with different names and/or scopes. Semantic\n+\tchecks on aspect expression have already verified its legality.\n+\tAdd comments regarding possible gaps in RM description of the\n+\tfeature.\n+\n+2021-06-15  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* freeze.adb (Freeze_Subprogram): Don't propagate conventions\n+\tIntrinsic or Entry to anonymous access-to-subprogram types\n+\tassociated with subprograms having those conventions. Update\n+\trelated comment.\n+\t* sem_attr.adb (Resolve_Attribute, Attribute_*Access): Remove\n+\tspecial-case warning code for cases where a called subprogram\n+\thas convention Intrinsic as well as its formal's type (the\n+\texpected type for the Access attribute), since this case can no\n+\tlonger occur.\n+\n+2021-06-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_imgv.adb (Expand_User_Defined_Enumeration_Image): Fix\n+\ttypos.\n+\n+2021-06-15  Bob Duff  <duff@adacore.com>\n+\n+\t* einfo-utils.adb (Known_Component_Size,\n+\tKnown_Static_Component_Size, Unknown_Component_Size): Use\n+\tImplementation_Base_Type instead of Base_Type.\n+\n+2021-06-15  Bob Duff  <duff@adacore.com>\n+\n+\t* gen_il-gen-gen_entities.adb (E_Loop_Parameter): Add\n+\tInterface_Name field.\n+\n+2021-06-15  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_cat.adb (Check_Non_Static_Default_Expr): Allow nonstatic\n+\texpression in predefined unit with pragma Preelaborate.\n+\n+2021-06-15  Yannick Moy  <moy@adacore.com>\n+\n+\t* doc/gnat_rm/intrinsic_subprograms.rst: More details on shift\n+\toperations for signed types. Also add the missing Import and\n+\tConvention on the example.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2021-06-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* raise-gcc.c: Include <cstdarg> instead of <stdarg.h> in C++.\n+\tInclude <stdbool.h> and unconditionally <stdlib.h> in C.\n+\n+2021-06-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.ads (Find_Overlaid_Entity): Simplify comment for\n+\tspec.\n+\t* sem_util.adb (Find_Overlaid_Entity): Remove defensive code\n+\tfrom body.\n+\n+2021-06-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* argv.c: Add include of <stdlib.h> for the runtime.\n+\t(gnat_argv): Change type to char ** and initialize to NULL.\n+\t(gnat_envp): Likewise.\n+\t* argv-lynxos178-raven-cert.c: Add include of <stdlib.h>.\n+\t(gnat_argv): Change type to char ** and initialize to NULL.\n+\t(gnat_envp): Likewise.\n+\n+2021-06-15  Bob Duff  <duff@adacore.com>\n+\n+\t* gen_il-gen.adb (Setter_Needs_Parent): Add missing\n+\tThen_Actions.  Fix self-contradictory comment.\n+\t* exp_util.adb (Insert_Actions): Minor comment improvments.\n+\n+2021-06-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_eval.adb (Eval_Logical_Op, Test_Expression_Is_Foldable):\n+\tAdd support for folding more \"and\"/\"or\" expressions.\n+\t* exp_util.adb (Side_Effect_Free): Fix handling of membership\n+\ttests.\n+\n+2021-06-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Actual): Replace repeated calls to\n+\t\"Etype (F)\" with references to \"F_Typ\", which keeps the results\n+\tof exactly that call.\n+\n+2021-06-15  Bob Duff  <duff@adacore.com>\n+\n+\t* gen_il-gen.adb (To_Bit_Offset): Use 'Base to avoid overflow in\n+\tcomputations in Last_Bit when Offset = 'Last.\n+\t(Choose_Offset): Give a better error message when we run out of\n+\tfields.  In particular, point out that\n+\tGen_IL.Internals.Bit_Offset'Last needs to be increased.\n+\n+2021-06-15  Bob Duff  <duff@adacore.com>\n+\n+\t* atree.ads, einfo-utils.ads, einfo-utils.adb, fe.h, gen_il.adb,\n+\tgen_il.ads, gen_il-gen-gen_entities.adb,\n+\tgen_il-gen-gen_nodes.adb, sem_ch12.adb, sem_ch3.adb,\n+\tsem_util.adb, sinfo-utils.ads, treepr.adb, types.ads: Clean up\n+\t??? comments and other comments.\n+\t* atree.adb: Clean up ??? comments and other comments.\n+\t(Validate_Node): Fix bug: \"Off_0 (N) < Off_L (N)\"\n+\tshould be \"Off_0 (N) <= Off_L (N)\".\n+\t* gen_il-gen.adb, gen_il-gen.ads: Clean up ???\n+\tcomments and other comments.  Add support for getter-specific\n+\tand setter-specific preconditions.  Detect the error of putting\n+\ta field in the wrong subrange.  Misc cleanup.\n+\t(Node_Field vs. Entity_Field): Clean up Nmake.  Improve\n+\tcomments.\n+\t* gen_il-utils.ads: Misc cleanup. Move...\n+\t* gen_il-internals.ads: ... here.\n+\t* gen_il-utils.adb: Misc cleanup. Move...\n+\t* gen_il-internals.adb: ... here.\n+\t* gen_il-fields.ads: Move Was_Default_Init_Box_Association,\n+\twhich was in the wrong subrange.  Add comments.  Misc cleanup.\n+\t* gen_il-types.ads: Add Named_Access_Kind.\n+\t* sinfo-cn.adb: Clean up ??? comments and other comments.\n+\tRemove redundant assertions.\n+\t* einfo.ads, sinfo.ads: Clean up ??? comments and other\n+\tcomments.  Remove all the comments indicating field offsets.\n+\tThese are obsolete now that Gen_IL computes the offsets\n+\tautomatically.\n+\n+2021-06-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* einfo.ads, errout.adb, errout.ads, exp_aggr.adb, exp_ch5.adb,\n+\texp_ch6.adb, exp_ch8.adb, exp_ch9.adb, exp_imgv.adb,\n+\texp_put_image.adb, fe.h, impunit.adb, impunit.ads,\n+\tlibgnat/a-cobove.ads, libgnat/a-convec.ads, opt.ads,\n+\tpar-ch12.adb, par-ch3.adb, par-ch4.adb, par-ch5.adb,\n+\tpar-ch6.adb, par-prag.adb, par-util.adb, scans.ads, scng.adb,\n+\tsem_aggr.adb, sem_attr.adb, sem_ch10.adb, sem_ch12.adb,\n+\tsem_ch13.adb, sem_ch3.adb, sem_ch5.adb, sem_ch6.adb,\n+\tsem_ch8.adb, sem_elab.adb, sem_eval.adb, sem_prag.adb,\n+\tsem_res.adb, sem_type.adb, sem_util.adb, sem_util.ads,\n+\tsinfo.ads, snames.ads-tmpl, sprint.adb, switch-c.adb, usage.adb,\n+\tdoc/gnat_ugn/building_executable_programs_with_gnat.rst,\n+\tdoc/gnat_rm/implementation_defined_aspects.rst,\n+\tgcc-interface/trans.c: Update all references to Ada 2020 to Ada\n+\t2022. Rename pragma Ada_2020 to Ada_2022.  Update documentation\n+\taccordingly.\n+\t* gnat_ugn.texi, gnat_rm.texi: Regenerate.\n+\n+2021-06-15  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_util.adb (Gather_Components): Factor the test that was\n+\talready being used to govern emitting a pre-Ada_2020 error\n+\tmessage into an expression function,\n+\tOK_Scope_For_Discrim_Value_Error_Messages. Call that new\n+\tfunction in two places: the point where the same test was being\n+\tperformed previously, and in governing emission of a newer\n+\tAda_2020 error message. In both cases, the out-mode parameter\n+\tGather_Components.Report_Errors is set to True even if no error\n+\tmessages are generated within Gather_Components.\n+\t* sem_util.ads: Correct a comment.\n+\n+2021-06-15  Richard Kenner  <kenner@adacore.com>\n+\n+\t* sem_ch3.adb (Array_Type_Declaration, Build_Derived_Type):\n+\tReinitialize Stored_Constraint when needed.\n+\t(Set_Modular_Size): Likewise.\n+\t* atree.adb: (Check_Vanishing_Fields): Add node id to debugging\n+\tinformation.\n+\n+2021-06-15  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_util.adb (Propagate_Invariant_Attributes): Call\n+\tSet_Has_Own_Invariants on the base type, because these are\n+\tBase_Type_Only. The problem is that the base type of a type is\n+\tindeed a base type when Set_Base_Type is called, but then the\n+\ttype is mutated into a subtype in rare cases.\n+\t* atree.ads, atree.adb (Is_Entity): Export. Correct subtype of\n+\tparameter in body.\n+\t* gen_il-gen.adb: Improve getters so that \"Pre => ...\" can refer\n+\tto the value of the field. Put Warnings (Off) on some with\n+\tclauses that are not currently used, but might be used by such\n+\tPre's.\n+\n+2021-06-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch3.adb (Access_Type_Declaration): Add comments to explain\n+\tthe ordering of Mutate_Kind and Set_Directly_Designated_Type;\n+\tremove temporary setting of Ekind to E_Access_Type for building\n+\t_master objects, since now the Ekind is already set to its final\n+\tvalue. Move repeated code into Setup_Access_Type routine and use\n+\tit so that Process_Subtype is executed before mutating the kind\n+\tof the type entity.\n+\t* gen_il-gen-gen_entities.adb (Gen_Entities): Remove\n+\tDirectly_Designated_Type from E_Void, E_Private_Record,\n+\tE_Limited_Private_Type and Incomplete_Kind; now it only belongs\n+\tto Access_Kind entities.\n+\t* sem_util.adb: Minor reformatting.\n+\n 2021-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Type>: Add PAT"}, {"sha": "b8f7a2bb314772c90d870277917bc7e915c4db66", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede6c3568f383f62df7bf9234212ee80763fdf6b/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede6c3568f383f62df7bf9234212ee80763fdf6b/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=ede6c3568f383f62df7bf9234212ee80763fdf6b", "patch": "@@ -1,3 +1,93 @@\n+2021-06-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/99212\n+\tPR analyzer/101082\n+\t* engine.cc: Include \"target.h\".\n+\t(impl_run_checkers): Log BITS_BIG_ENDIAN, BYTES_BIG_ENDIAN, and\n+\tWORDS_BIG_ENDIAN.\n+\t* region-model-manager.cc\n+\t(region_model_manager::maybe_fold_binop): Move support for masking\n+\tvia ARG0 & CST into...\n+\t(region_model_manager::maybe_undo_optimize_bit_field_compare):\n+\t...this new function.  Flatten by converting from nested\n+\tconditionals to a series of early return statements to reject\n+\tfailures.  Reject if type is not unsigned_char_type_node.\n+\tHandle BYTES_BIG_ENDIAN when determining which bits are bound\n+\tin the binding_map.\n+\t* region-model.h\n+\t(region_model_manager::maybe_undo_optimize_bit_field_compare):\n+\tNew decl.\n+\t* store.cc (bit_range::dump): New function.\n+\t* store.h (bit_range::dump): New decl.\n+\n+2021-06-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* engine.cc (exploded_node::on_stmt): Handle __analyzer_dump_capacity.\n+\t(exploded_node::on_stmt): Drop m_sm_changes from on_stmt_flags.\n+\t(state_change_requires_new_enode_p): New function...\n+\t(exploded_graph::process_node): Call it, rather than querying\n+\tflags.m_sm_changes, so that dynamic-extent differences can also\n+\ttrigger the splitting of nodes.\n+\t* exploded-graph.h (struct on_stmt_flags): Drop field m_sm_changes.\n+\t* program-state.cc (program_state::detect_leaks): Purge dead\n+\theap-allocated regions from dynamic extents.\n+\t(selftest::test_program_state_1): Fix type of \"size_in_bytes\".\n+\t(selftest::test_program_state_merging): Likewise.\n+\t* region-model-impl-calls.cc\n+\t(region_model::impl_call_analyzer_dump_capacity): New.\n+\t(region_model::impl_call_free): Remove dynamic extents from the\n+\tfreed region.\n+\t* region-model-reachability.h\n+\t(reachable_regions::begin_mutable_base_regs): New.\n+\t(reachable_regions::end_mutable_base_regs): New.\n+\t* region-model.cc: Include \"tree-object-size.h\".\n+\t(region_model::region_model): Support new field m_dynamic_extents.\n+\t(region_model::operator=): Likewise.\n+\t(region_model::operator==): Likewise.\n+\t(region_model::dump_to_pp): Dump sizes of dynamic regions.\n+\t(region_model::handle_unrecognized_call): Purge dynamic extents\n+\tfrom any regions that have escaped mutably:.\n+\t(region_model::get_capacity): New function.\n+\t(region_model::add_constraint): Unset dynamic extents when a\n+\theap-allocated region's address is NULL.\n+\t(region_model::unbind_region_and_descendents): Purge dynamic\n+\textents of unbound regions.\n+\t(region_model::can_merge_with_p): Call\n+\tm_dynamic_extents.can_merge_with_p.\n+\t(region_model::create_region_for_heap_alloc): Assert that\n+\tsize_in_bytes's type is compatible with size_type_node.  Update\n+\tfor renaming of record_dynamic_extents to set_dynamic_extents.\n+\t(region_model::create_region_for_alloca): Likewise.\n+\t(region_model::record_dynamic_extents): Rename to...\n+\t(region_model::set_dynamic_extents): ...this.  Assert that\n+\tsize_in_bytes's type is compatible with size_type_node.  Add it\n+\tto the m_dynamic_extents map.\n+\t(region_model::get_dynamic_extents): New.\n+\t(region_model::unset_dynamic_extents): New.\n+\t(selftest::test_state_merging): Fix type of \"size\".\n+\t(selftest::test_malloc_constraints): Likewise.\n+\t(selftest::test_malloc): Verify dynamic extents.\n+\t(selftest::test_alloca): Likewise.\n+\t* region-model.h (region_to_value_map::is_empty): New.\n+\t(region_model::dynamic_extents_t): New typedef.\n+\t(region_model::impl_call_analyzer_dump_capacity): New decl.\n+\t(region_model::get_dynamic_extents): New function.\n+\t(region_model::get_dynamic_extents): New decl.\n+\t(region_model::set_dynamic_extents): New decl.\n+\t(region_model::unset_dynamic_extents): New decl.\n+\t(region_model::get_capacity): New decl.\n+\t(region_model::record_dynamic_extents): Rename to set_dynamic_extents.\n+\t(region_model::m_dynamic_extents): New field.\n+\n+2021-06-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* region-model.cc (region_to_value_map::operator=): New.\n+\t(region_to_value_map::operator==): New.\n+\t(region_to_value_map::dump_to_pp): New.\n+\t(region_to_value_map::dump): New.\n+\t(region_to_value_map::can_merge_with_p): New.\n+\t* region-model.h (class region_to_value_map): New class.\n+\n 2021-06-13  Trevor Saunders  <tbsaunde@tbsaunde.org>\n \n \t* call-string.cc (call_string::call_string): Use range based for"}, {"sha": "ba218e652cc18fef2e3f3f70c9381e01fe994f4d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede6c3568f383f62df7bf9234212ee80763fdf6b/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede6c3568f383f62df7bf9234212ee80763fdf6b/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=ede6c3568f383f62df7bf9234212ee80763fdf6b", "patch": "@@ -1,3 +1,8 @@\n+2021-06-15  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* c-attribs.c (common_handle_aligned_attribute): Remove short\n+\tcircuit and dead code.\n+\n 2021-06-14  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR c++/101052"}, {"sha": "2deedba3bde494d976a0e92e9a95ff6fe9ac4e3c", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede6c3568f383f62df7bf9234212ee80763fdf6b/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede6c3568f383f62df7bf9234212ee80763fdf6b/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=ede6c3568f383f62df7bf9234212ee80763fdf6b", "patch": "@@ -1,3 +1,8 @@\n+2021-06-15  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* c-decl.c (merge_decls): Copy DECL_USER_ALIGN if DECL_ALIGN is\n+\tsimilar.\n+\n 2021-06-14  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR c/100913"}, {"sha": "3016da8c650e681805e3779e1e58b9eefdcb87e9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede6c3568f383f62df7bf9234212ee80763fdf6b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede6c3568f383f62df7bf9234212ee80763fdf6b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ede6c3568f383f62df7bf9234212ee80763fdf6b", "patch": "@@ -1,3 +1,7 @@\n+2021-06-15  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* decl.c (duplicate_decls): Likewise.\n+\n 2021-06-14  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR c/100913"}, {"sha": "3c7193323cfb9e7cddfefd8b4389e6b99b5db937", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede6c3568f383f62df7bf9234212ee80763fdf6b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede6c3568f383f62df7bf9234212ee80763fdf6b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ede6c3568f383f62df7bf9234212ee80763fdf6b", "patch": "@@ -1,3 +1,22 @@\n+2021-06-15  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/92568\n+\t* dump-parse-tree.c (show_omp_clauses): Update for defaultmap.\n+\t* f95-lang.c (LANG_HOOKS_OMP_ALLOCATABLE_P,\n+\tLANG_HOOKS_OMP_SCALAR_TARGET_P): New.\n+\t* gfortran.h (enum gfc_omp_defaultmap,\n+\tenum gfc_omp_defaultmap_category): New.\n+\t* openmp.c (gfc_match_omp_clauses): Update defaultmap matching.\n+\t* trans-decl.c (gfc_finish_decl_attrs): Set GFC_DECL_SCALAR_TARGET.\n+\t* trans-openmp.c (gfc_omp_allocatable_p, gfc_omp_scalar_target_p): New.\n+\t(gfc_omp_scalar_p): Take 'ptr_alloc_ok' argument.\n+\t(gfc_trans_omp_clauses, gfc_split_omp_clauses): Update for\n+\tdefaultmap changes.\n+\t* trans.h (gfc_omp_scalar_p): Update prototype.\n+\t(gfc_omp_allocatable_p, gfc_omp_scalar_target_p): New.\n+\t(struct lang_decl): Add scalar_target.\n+\t(GFC_DECL_SCALAR_TARGET, GFC_DECL_GET_SCALAR_TARGET): New.\n+\n 2021-06-14  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* resolve.c (resolve_variable): Remove *XCNEW used to"}, {"sha": "8b273523f1f9cb7ddba5d30e3f881d8123bd1214", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede6c3568f383f62df7bf9234212ee80763fdf6b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede6c3568f383f62df7bf9234212ee80763fdf6b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ede6c3568f383f62df7bf9234212ee80763fdf6b", "patch": "@@ -1,3 +1,49 @@\n+2021-06-15  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/92568\n+\t* gfortran.dg/gomp/pr99928-1.f90: Uncomment 'defaultmap(none)'.\n+\t* gfortran.dg/gomp/pr99928-2.f90: Uncomment 'defaultmap(none)'.\n+\t* gfortran.dg/gomp/pr99928-3.f90: Uncomment 'defaultmap(none)'.\n+\t* gfortran.dg/gomp/pr99928-4.f90: Uncomment 'defaultmap(none)'.\n+\t* gfortran.dg/gomp/pr99928-5.f90: Uncomment 'defaultmap(none)'.\n+\t* gfortran.dg/gomp/pr99928-6.f90: Uncomment 'defaultmap(none)'.\n+\t* gfortran.dg/gomp/pr99928-8.f90: Uncomment 'defaultmap(none)'.\n+\t* gfortran.dg/gomp/defaultmap-1.f90: New test.\n+\t* gfortran.dg/gomp/defaultmap-2.f90: New test.\n+\t* gfortran.dg/gomp/defaultmap-3.f90: New test.\n+\t* gfortran.dg/gomp/defaultmap-4.f90: New test.\n+\t* gfortran.dg/gomp/defaultmap-5.f90: New test.\n+\t* gfortran.dg/gomp/defaultmap-6.f90: New test.\n+\t* gfortran.dg/gomp/defaultmap-7.f90: New test.\n+\n+2021-06-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/analyzer-decls.h (__analyzer_dump_capacity): New decl.\n+\t* gcc.dg/analyzer/capacity-1.c: New test.\n+\t* gcc.dg/analyzer/capacity-2.c: New test.\n+\t* gcc.dg/analyzer/capacity-3.c: New test.\n+\n+2021-06-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/101068\n+\t* gcc.dg/analyzer/explode-2a.c: New test.\n+\n+2021-06-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/101046\n+\t* gcc.target/i386/pr101046.c: New test.\n+\n+2021-06-15  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* c-c++-common/Wattributes.c: Remove s390-specific check and add\n+\tnew tests.\n+\t* gcc.dg/Wattributes-6.c: Likewise.\n+\n+2021-06-15  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\tPR target/101020\n+\t* gcc.target/powerpc/float128-call.c: Adjust counts for be and le.\n+\n 2021-06-14  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/100876"}, {"sha": "975406a6ba5c5b4cebe19b7cc00d9bf5bcf70763", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede6c3568f383f62df7bf9234212ee80763fdf6b/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede6c3568f383f62df7bf9234212ee80763fdf6b/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=ede6c3568f383f62df7bf9234212ee80763fdf6b", "patch": "@@ -1,3 +1,8 @@\n+2021-06-15  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/92568\n+\t* testsuite/libgomp.fortran/defaultmap-8.f90: New test.\n+\n 2021-06-10  Andrew Stubbs  <ams@codesourcery.com>\n \t    Thomas Schwinge  <thomas@codesourcery.com>\n "}, {"sha": "c802dac336407e5143d3c7088c144f575bb1ed7c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede6c3568f383f62df7bf9234212ee80763fdf6b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede6c3568f383f62df7bf9234212ee80763fdf6b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ede6c3568f383f62df7bf9234212ee80763fdf6b", "patch": "@@ -1,3 +1,46 @@\n+2021-06-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/ranges_base.h (ranges::begin, ranges::end)\n+\t(ranges::cbegin, ranges::cend, ranges::rbeing, ranges::rend)\n+\t(ranges::crbegin, ranges::crend, ranges::size, ranges::ssize)\n+\t(ranges::empty, ranges::data, ranges::cdata): Make types final.\n+\tAdd deleted operator& overloads.\n+\t(ranges::advance, ranges::distance, ranges::next, ranges::prev):\n+\tLikewise.\n+\t* testsuite/std/ranges/headers/ranges/synopsis.cc: Replace\n+\till-formed & expressions with using-declarations. Add checks for\n+\tother function objects.\n+\n+2021-06-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/ranges_util.h (view_interface): Add noexcept to\n+\tempty, operator bool, data and size members.\n+\t(subrange): Add noexcept to constructors.\n+\t* include/std/ranges (single_view, ref_view): Add noexcept to\n+\tconstructors.\n+\t(views::single, views::all): Add noexcept.\n+\t* testsuite/std/ranges/adaptors/all.cc: Check noexcept.\n+\t* testsuite/std/ranges/single_view.cc: Likewise.\n+\n+2021-06-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/ranges_util.h (subrange): Add __size_type typedef\n+\tand use it to simplify declarations.\n+\t(subrange(i, s, n)): Remove assertion.\n+\t* testsuite/std/ranges/subrange/constexpr.cc: New test.\n+\n+2021-06-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/iterator_concepts.h (__cust_access::__decay_copy):\n+\tReplace with function object.\n+\t(__cust_access::__member_begin, ___cust_access::_adl_begin): Use\n+\t__decay_copy unqualified.\n+\t* include/bits/ranges_base.h (__member_end, __adl_end):\n+\tLikewise. Use __range_iter_t for type of ranges::begin.\n+\t(__member_rend): Use correct value category for rbegin argument.\n+\t(__member_data): Use __decay_copy unqualified.\n+\t(__begin_data): Use __range_iter_t for type of ranges::begin.\n+\n 2021-06-14  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/ranges_base.h (ranges::empty): Check whether"}]}