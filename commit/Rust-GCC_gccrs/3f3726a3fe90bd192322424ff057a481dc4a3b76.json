{"sha": "3f3726a3fe90bd192322424ff057a481dc4a3b76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YzNzI2YTNmZTkwYmQxOTIzMjI0MjRmZjA1N2E0ODFkYzRhM2I3Ng==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-09-05T02:26:35Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-09-05T02:26:35Z"}, "message": "pexecute.c: Updates from gcc.\n\n        * pexecute.c: Updates from gcc.  Copy in gcc has been removed.  This\n        is the canonical copy.  Define ISSPACE if !IN_GCC.\n\nFrom-SVN: r22243", "tree": {"sha": "568edbc03b8692416db25447c648b1c2d930d52c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/568edbc03b8692416db25447c648b1c2d930d52c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f3726a3fe90bd192322424ff057a481dc4a3b76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f3726a3fe90bd192322424ff057a481dc4a3b76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f3726a3fe90bd192322424ff057a481dc4a3b76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f3726a3fe90bd192322424ff057a481dc4a3b76/comments", "author": null, "committer": null, "parents": [{"sha": "2a63377ccf4c57b6fabc042164ea129258d0ea30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a63377ccf4c57b6fabc042164ea129258d0ea30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a63377ccf4c57b6fabc042164ea129258d0ea30"}], "stats": {"total": 49, "additions": 34, "deletions": 15}, "files": [{"sha": "06e474adbb75d51e21da5f1cbd0ded074478c116", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f3726a3fe90bd192322424ff057a481dc4a3b76/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f3726a3fe90bd192322424ff057a481dc4a3b76/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=3f3726a3fe90bd192322424ff057a481dc4a3b76", "patch": "@@ -1,3 +1,8 @@\n+Sat Sep  5 03:24:49 1998  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* pexecute.c: Updates from gcc.  Copy in gcc has been removed.  This\n+\tis the canonical copy.  Define ISSPACE if !IN_GCC.\n+\n Wed Aug 19 14:05:01 1998  Mumit Khan  <khan@xraylith.wisc.edu>\n \n \t* cplus-dem.c (work_stuff): Add dllimported."}, {"sha": "1b0a374aa012138e720f8587c1649f9fa708feed", "filename": "libiberty/pexecute.c", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f3726a3fe90bd192322424ff057a481dc4a3b76/libiberty%2Fpexecute.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f3726a3fe90bd192322424ff057a481dc4a3b76/libiberty%2Fpexecute.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpexecute.c?ref=3f3726a3fe90bd192322424ff057a481dc4a3b76", "patch": "@@ -1,6 +1,6 @@\n /* Utilities to execute a program in a subprocess (possibly linked by pipes\n    with other subprocesses), and wait for it.\n-   Copyright (C) 1996, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 1998 Free Software Foundation, Inc.\n \n This file is part of the libiberty library.\n Libiberty is free software; you can redistribute it and/or\n@@ -25,10 +25,12 @@ Boston, MA 02111-1307, USA.  */\n \n #ifdef IN_GCC\n #include \"config.h\"\n-#endif\n-\n+#include \"system.h\"\n+#else\n #include <stdio.h>\n #include <errno.h>\n+#define ISSPACE (x) isspace(x)\n+#endif\n \n #ifdef IN_GCC\n #include \"gansidecl.h\"\n@@ -166,7 +168,7 @@ pexecute (program, argv, this_pname, temp_base, errmsg_fmt, errmsg_arg, flags)\n       char *cp;\n       for (cp = argv[i]; *cp; cp++)\n \t{\n-\t  if (*cp == '\"' || *cp == '\\'' || *cp == '\\\\' || isspace (*cp))\n+\t  if (*cp == '\"' || *cp == '\\'' || *cp == '\\\\' || ISSPACE (*cp))\n \t    fputc ('\\\\', argfile);\n \t  fputc (*cp, argfile);\n \t}\n@@ -509,7 +511,7 @@ static int first_time = 1;\n int\n pexecute (program, argv, this_pname, temp_base, errmsg_fmt, errmsg_arg, flags)\n      const char *program;\n-     char **argv;\n+     char * const *argv;\n      const char *this_pname;\n      const char *temp_base;\n      char **errmsg_fmt, **errmsg_arg;\n@@ -538,14 +540,18 @@ pexecute (program, argv, this_pname, temp_base, errmsg_fmt, errmsg_arg, flags)\n       fputc (' ', stdout);\n       for (i=1; argv[i]; i++)\n \t{\n-\t  /* We have to quote every arg, so that when the echo is\n-\t     executed, the quotes are stripped and the original arg\n-\t     is left. */\n \t  fputc ('\\'', stdout);\n+\t  /* See if we have an argument that needs fixing.  */\n+\t  if (strchr(argv[i], '/'))\n+\t    {\n+\t      tmpname = (char *) xmalloc (256);\n+\t      mpwify_filename (argv[i], tmpname);\n+\t      argv[i] = tmpname;\n+\t    }\n \t  for (cp = argv[i]; *cp; cp++)\n \t    {\n-\t      /* Write an Option-d esc char in front of special chars.  */\n-\t      if (strchr (\"\\\"'+\", *cp))\n+\t      /* Write an Option-d escape char in front of special chars.  */\n+\t      if (strchr(\"'+\", *cp))\n \t\tfputc ('\\266', stdout);\n \t      fputc (*cp, stdout);\n \t    }\n@@ -560,15 +566,20 @@ pexecute (program, argv, this_pname, temp_base, errmsg_fmt, errmsg_arg, flags)\n \n   for (i=1; argv[i]; i++)\n     {\n+      /* See if we have an argument that needs fixing.  */\n+      if (strchr(argv[i], '/'))\n+\t{\n+\t  tmpname = (char *) xmalloc (256);\n+\t  mpwify_filename (argv[i], tmpname);\n+\t  argv[i] = tmpname;\n+\t}\n       if (strchr (argv[i], ' '))\n \tfputc ('\\'', stdout);\n       for (cp = argv[i]; *cp; cp++)\n \t{\n-\t  /* Write an Option-d esc char in front of special chars.  */\n-\t  if (strchr (\"\\\"'+\", *cp))\n-\t    {\n-\t      fputc ('\\266', stdout);\n-\t    }\n+\t  /* Write an Option-d escape char in front of special chars.  */\n+\t  if (strchr(\"'+\", *cp))\n+\t    fputc ('\\266', stdout);\n \t  fputc (*cp, stdout);\n \t}\n       if (strchr (argv[i], ' '))\n@@ -628,6 +639,9 @@ pfinish ()\n \n extern int execv ();\n extern int execvp ();\n+#ifdef IN_GCC\n+extern char * my_strerror\t\t\tPROTO ((int));\n+#endif\n \n int\n pexecute (program, argv, this_pname, temp_base, errmsg_fmt, errmsg_arg, flags)"}]}