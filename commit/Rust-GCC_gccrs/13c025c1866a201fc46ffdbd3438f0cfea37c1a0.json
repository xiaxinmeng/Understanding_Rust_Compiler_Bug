{"sha": "13c025c1866a201fc46ffdbd3438f0cfea37c1a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNjMDI1YzE4NjZhMjAxZmM0NmZmZGJkMzQzOGYwY2ZlYTM3YzFhMA==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2004-09-30T21:21:57Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2004-09-30T21:21:57Z"}, "message": "s390.c (legitimate_reload_constant_p): Remove floating point constant workaround.\n\n\t* config/s390/s390.c (legitimate_reload_constant_p): Remove\n\tfloating point constant workaround.\n\t(s390_secondary_input_reload_class): Handle PLUS reloads\n\twith too-large constant.\n\t(s390_expand_plus_operand): Likewise.\n\t* config/s390/s390.md (\"movdi\"): Do not call force_const_mem.\n\t(\"movsi\"): Likewise.  Also, remove workaround for non-general\n\toperands.\n\t(\"movdf\"): Do not call force_const_mem.\n\t(\"movsf\"): Likewise.  Merge expander with *movsf insn.\n\t(\"*movsf\"): Remove, merge with movsf expander.\n\nFrom-SVN: r88356", "tree": {"sha": "0eff45c4a951b38c07caf016add8011a61fa2659", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0eff45c4a951b38c07caf016add8011a61fa2659"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13c025c1866a201fc46ffdbd3438f0cfea37c1a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13c025c1866a201fc46ffdbd3438f0cfea37c1a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13c025c1866a201fc46ffdbd3438f0cfea37c1a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13c025c1866a201fc46ffdbd3438f0cfea37c1a0/comments", "author": null, "committer": null, "parents": [{"sha": "99b2692a099907b6f6c07c12be04bdaf270ccce1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99b2692a099907b6f6c07c12be04bdaf270ccce1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99b2692a099907b6f6c07c12be04bdaf270ccce1"}], "stats": {"total": 87, "additions": 31, "deletions": 56}, "files": [{"sha": "e8b7b17eb715e99028be152b368cce77bb3ad444", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c025c1866a201fc46ffdbd3438f0cfea37c1a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c025c1866a201fc46ffdbd3438f0cfea37c1a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13c025c1866a201fc46ffdbd3438f0cfea37c1a0", "patch": "@@ -1,3 +1,17 @@\n+2004-09-30  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390.c (legitimate_reload_constant_p): Remove\n+\tfloating point constant workaround.\n+\t(s390_secondary_input_reload_class): Handle PLUS reloads\n+\twith too-large constant.\n+\t(s390_expand_plus_operand): Likewise.\n+\t* config/s390/s390.md (\"movdi\"): Do not call force_const_mem.\n+\t(\"movsi\"): Likewise.  Also, remove workaround for non-general\n+\toperands.\n+\t(\"movdf\"): Do not call force_const_mem.\n+\t(\"movsf\"): Likewise.  Merge expander with *movsf insn.\n+\t(\"*movsf\"): Remove, merge with movsf expander.\n+\n 2004-09-30  Paul Brook  <paul@codesourcery.com>\n \n \t* config/arm/symbian.h (STARTFILE_SPEC): Remove crt*.o."}, {"sha": "bb468fe510f3a122356fdd6e19b047c3181932b3", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c025c1866a201fc46ffdbd3438f0cfea37c1a0/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c025c1866a201fc46ffdbd3438f0cfea37c1a0/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=13c025c1866a201fc46ffdbd3438f0cfea37c1a0", "patch": "@@ -2062,12 +2062,6 @@ legitimate_reload_constant_p (register rtx op)\n enum reg_class\n s390_preferred_reload_class (rtx op, enum reg_class class)\n {\n-  /* This can happen if a floating point constant is being\n-     reloaded into an integer register.  Leave well alone.  */\n-  if (GET_MODE_CLASS (GET_MODE (op)) == MODE_FLOAT\n-      && class != FP_REGS)\n-    return class;\n-\n   switch (GET_CODE (op))\n     {\n       /* Constants we cannot reload must be forced into the\n@@ -2111,7 +2105,17 @@ s390_secondary_input_reload_class (enum reg_class class ATTRIBUTE_UNUSED,\n \t\t\t\t   enum machine_mode mode, rtx in)\n {\n   if (s390_plus_operand (in, mode))\n-    return ADDR_REGS;\n+    {\n+      /* ??? Reload sometimes pushes a PLUS reload with a too-large constant.\n+\t Until reload is fixed, we need to force_const_mem while emitting the\n+\t secondary reload insn -- thus we need to make sure here that we do\n+\t have a literal pool for the current function.  */\n+      if (CONSTANT_P (XEXP (in, 1))\n+\t  && !legitimate_reload_constant_p (XEXP (in, 1)))\n+\tcurrent_function_uses_const_pool = true;\n+\n+      return ADDR_REGS;\n+    }\n \n   return NO_REGS;\n }\n@@ -2193,6 +2197,10 @@ s390_expand_plus_operand (register rtx target, register rtx src,\n \t}\n       if (true_regnum (sum2) < 1 || true_regnum (sum2) > 15)\n \t{\n+\t  /* ??? See comment in s390_secondary_input_reload_class.  */\n+\t  if (CONSTANT_P (sum2) && !legitimate_reload_constant_p (sum2))\n+\t    sum2 = force_const_mem (Pmode, sum2);\n+\n \t  emit_move_insn (scratch, sum2);\n \t  sum2 = scratch;\n \t}"}, {"sha": "9f564be6d48675bdfeaec25a11238f212a8ee0f7", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 2, "deletions": 49, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c025c1866a201fc46ffdbd3438f0cfea37c1a0/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c025c1866a201fc46ffdbd3438f0cfea37c1a0/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=13c025c1866a201fc46ffdbd3438f0cfea37c1a0", "patch": "@@ -827,14 +827,6 @@\n   /* Handle symbolic constants.  */\n   if (TARGET_64BIT && SYMBOLIC_CONST (operands[1]))\n     emit_symbolic_move (operands);\n-\n-  /* During and after reload, we need to force constants\n-     to the literal pool ourselves, if necessary.  */\n-  if ((reload_in_progress || reload_completed)\n-      && CONSTANT_P (operands[1])\n-      && (!legitimate_reload_constant_p (operands[1])\n-          || FP_REG_P (operands[0])))\n-    operands[1] = force_const_mem (DImode, operands[1]);\n })\n \n (define_insn \"*movdi_larl\"\n@@ -1011,27 +1003,6 @@\n   /* Handle symbolic constants.  */\n   if (!TARGET_64BIT && SYMBOLIC_CONST (operands[1]))\n     emit_symbolic_move (operands);\n-\n-  /* expr.c tries to load an effective address using\n-     force_reg.  This fails because we don't have a\n-     generic load_address pattern.  Convert the move\n-     to a proper arithmetic operation instead, unless\n-     it is guaranteed to be OK.  */\n-  if (GET_CODE (operands[1]) == PLUS\n-      && !legitimate_la_operand_p (operands[1]))\n-    {\n-      operands[1] = force_operand (operands[1], operands[0]);\n-      if (operands[1] == operands[0])\n-        DONE;\n-    }\n-\n-  /* During and after reload, we need to force constants\n-     to the literal pool ourselves, if necessary.  */\n-  if ((reload_in_progress || reload_completed)\n-      && CONSTANT_P (operands[1])\n-      && (!legitimate_reload_constant_p (operands[1])\n-          || FP_REG_P (operands[0])))\n-    operands[1] = force_const_mem (SImode, operands[1]);\n })\n \n (define_insn \"*movsi_larl\"\n@@ -1321,13 +1292,7 @@\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"\")\n         (match_operand:DF 1 \"general_operand\"  \"\"))]\n   \"\"\n-{\n-  /* During and after reload, we need to force constants\n-     to the literal pool ourselves, if necessary.  */\n-  if ((reload_in_progress || reload_completed)\n-      && CONSTANT_P (operands[1]))\n-    operands[1] = force_const_mem (DFmode, operands[1]);\n-})\n+  \"\")\n \n (define_insn \"*movdf_64\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,f,f,R,T,d,d,m,?Q\")\n@@ -1421,19 +1386,7 @@\n ; movsf instruction pattern(s).\n ;\n \n-(define_expand \"movsf\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"\")\n-        (match_operand:SF 1 \"general_operand\"  \"\"))]\n-  \"\"\n-{\n-  /* During and after reload, we need to force constants\n-     to the literal pool ourselves, if necessary.  */\n-  if ((reload_in_progress || reload_completed)\n-      && CONSTANT_P (operands[1]))\n-    operands[1] = force_const_mem (SFmode, operands[1]);\n-})\n-\n-(define_insn \"*movsf\"\n+(define_insn \"movsf\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f,f,f,R,T,d,d,d,R,T,?Q\")\n         (match_operand:SF 1 \"general_operand\" \"f,R,T,f,f,d,R,T,d,d,?Q\"))]\n   \"\""}]}