{"sha": "856e49c207daeb5ef0d24e43e432f6215b24ef33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU2ZTQ5YzIwN2RhZWI1ZWYwZDI0ZTQzZTQzMmY2MjE1YjI0ZWYzMw==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2004-11-28T21:02:31Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2004-11-28T21:02:31Z"}, "message": "tree-ssa-alias.c (count_calls_and_maybe_create_global_var): New.\n\n        * tree-ssa-alias.c (count_calls_and_maybe_create_global_var): New.\n        (pass_maybe_create_global_var): New.\n        * tree-pass.h (pass_maybe_create_global_var): Declare.\n        * tree-optimize.c (init_tree_optimization_passes): Link in\n        pass_maybe_create_global_var.\n\nFrom-SVN: r91425", "tree": {"sha": "4c87bd3f4add43856ea3856c9bf0b5e40e9ae69d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c87bd3f4add43856ea3856c9bf0b5e40e9ae69d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/856e49c207daeb5ef0d24e43e432f6215b24ef33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/856e49c207daeb5ef0d24e43e432f6215b24ef33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/856e49c207daeb5ef0d24e43e432f6215b24ef33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/856e49c207daeb5ef0d24e43e432f6215b24ef33/comments", "author": null, "committer": null, "parents": [{"sha": "ec017547ea4a06303394c4b08ccf0f9366c03981", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec017547ea4a06303394c4b08ccf0f9366c03981", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec017547ea4a06303394c4b08ccf0f9366c03981"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "b040c2a8b22fd37e0cb1ed16356607e2eef1ed61", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/856e49c207daeb5ef0d24e43e432f6215b24ef33/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/856e49c207daeb5ef0d24e43e432f6215b24ef33/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=856e49c207daeb5ef0d24e43e432f6215b24ef33", "patch": "@@ -1,3 +1,11 @@\n+2004-11-28  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-alias.c (count_calls_and_maybe_create_global_var): New.\n+\t(pass_maybe_create_global_var): New.\n+\t* tree-pass.h (pass_maybe_create_global_var): Declare.\n+\t* tree-optimize.c (init_tree_optimization_passes): Link in\n+\tpass_maybe_create_global_var.\n+\n 2004-11-28  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* tree-inline.c (inline_forbidden_p_1, case RECORD_TYPE): Add comment."}, {"sha": "d60bf3ff497b84845a8f6b6b979a56ad11c323cb", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/856e49c207daeb5ef0d24e43e432f6215b24ef33/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/856e49c207daeb5ef0d24e43e432f6215b24ef33/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=856e49c207daeb5ef0d24e43e432f6215b24ef33", "patch": "@@ -345,6 +345,7 @@ init_tree_optimization_passes (void)\n \n   p = &pass_all_optimizations.sub;\n   NEXT_PASS (pass_referenced_vars);\n+  NEXT_PASS (pass_maybe_create_global_var);\n   NEXT_PASS (pass_build_ssa);\n   NEXT_PASS (pass_may_alias);\n   NEXT_PASS (pass_rename_ssa_copies);"}, {"sha": "f9270476859f2729e023ec8e60d49cbf5a655926", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/856e49c207daeb5ef0d24e43e432f6215b24ef33/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/856e49c207daeb5ef0d24e43e432f6215b24ef33/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=856e49c207daeb5ef0d24e43e432f6215b24ef33", "patch": "@@ -163,5 +163,6 @@ extern struct tree_opt_pass pass_expand;\n extern struct tree_opt_pass pass_rest_of_compilation;\n extern struct tree_opt_pass pass_fre;\n extern struct tree_opt_pass pass_linear_transform;\n+extern struct tree_opt_pass pass_maybe_create_global_var;\n \n #endif /* GCC_TREE_PASS_H */"}, {"sha": "d6391db3d7cab64db2ea9f975f6d133c9046bffd", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/856e49c207daeb5ef0d24e43e432f6215b24ef33/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/856e49c207daeb5ef0d24e43e432f6215b24ef33/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=856e49c207daeb5ef0d24e43e432f6215b24ef33", "patch": "@@ -357,6 +357,62 @@ struct tree_opt_pass pass_may_alias =\n   0\t\t\t\t\t/* letter */\n };\n \n+/* Count the number of calls in the function and conditionally\n+   create GLOBAL_VAR.   This is performed before translation\n+   into SSA (and thus before alias analysis) to avoid compile time\n+   and memory utilization explosions in functions with many\n+   of calls and call clobbered variables.  */\n+\n+static void\n+count_calls_and_maybe_create_global_var (void)\n+{\n+  struct alias_info ai;\n+  basic_block bb;\n+  bool temp;\n+\n+  memset (&ai, 0, sizeof (struct alias_info));\n+\n+  /* First count the number of calls in the IL.  */\n+  FOR_EACH_BB (bb)\n+    {\n+      block_stmt_iterator si;\n+\n+      for (si = bsi_start (bb); !bsi_end_p (si); bsi_next (&si))\n+        {\n+          tree stmt = bsi_stmt (si);\n+\n+\t  if (get_call_expr_in (stmt) != NULL_TREE)\n+\t    ai.num_calls_found++;\n+\t}\n+    }\n+\n+  /* If there are no call clobbered variables, then maybe_create_global_var\n+     will always create a GLOBAL_VAR.  At this point we do not want that\n+     behavior.  So we turn on one bit in CALL_CLOBBERED_VARs, call\n+     maybe_create_global_var, then reset the bit to its original state.  */\n+  temp = bitmap_bit_p (call_clobbered_vars, 0);\n+  bitmap_set_bit (call_clobbered_vars, 0);\n+  maybe_create_global_var (&ai);\n+  if (!temp)\n+    bitmap_clear_bit (call_clobbered_vars, 0);\n+}\n+\n+struct tree_opt_pass pass_maybe_create_global_var = \n+{\n+  \"maybe_create_global_var\",\t\t/* name */\n+  NULL,\t\t\t\t\t/* gate */\n+  count_calls_and_maybe_create_global_var, /* execute */\n+  NULL,\t\t\t\t\t/* sub */\n+  NULL,\t\t\t\t\t/* next */\n+  0,\t\t\t\t\t/* static_pass_number */\n+  TV_TREE_MAY_ALIAS,\t\t\t/* tv_id */\n+  PROP_cfg,\t\t\t\t/* properties_required */\n+  0,\t\t\t\t\t/* properties_provided */\n+  0,\t\t\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t\t/* todo_flags_start */\n+  0,\t\t\t\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n+};\n \n /* Initialize the data structures used for alias analysis.  */\n "}]}