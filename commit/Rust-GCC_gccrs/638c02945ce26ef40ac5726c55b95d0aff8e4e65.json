{"sha": "638c02945ce26ef40ac5726c55b95d0aff8e4e65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM4YzAyOTQ1Y2UyNmVmNDBhYzU3MjZjNTViOTVkMGFmZjhlNGU2NQ==", "commit": {"author": {"name": "Mark Wielaard", "email": "mjw@redhat.com", "date": "2014-08-19T11:50:55Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2014-08-19T11:50:55Z"}, "message": "Emit DW_tag_restrict_type for restrict-qualified pointers.\n\ngcc/ChangeLog\n\n\tPR debug/59051\n\t* dwarf2out.c (modified_type_die): Handle TYPE_QUAL_RESTRICT.\n\ngcc/testsuite/ChangeLog\n\n\tPR debug/59051\n\t* gcc.dg/guality/restrict.c: New test.\n\nFrom-SVN: r214143", "tree": {"sha": "47fffc8c0777afdf9488f9f7de85758b71adc8ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47fffc8c0777afdf9488f9f7de85758b71adc8ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/638c02945ce26ef40ac5726c55b95d0aff8e4e65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/638c02945ce26ef40ac5726c55b95d0aff8e4e65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/638c02945ce26ef40ac5726c55b95d0aff8e4e65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/638c02945ce26ef40ac5726c55b95d0aff8e4e65/comments", "author": null, "committer": null, "parents": [{"sha": "abbb94e679ef9406325721afd77da59d69e7751d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abbb94e679ef9406325721afd77da59d69e7751d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abbb94e679ef9406325721afd77da59d69e7751d"}], "stats": {"total": 91, "additions": 83, "deletions": 8}, "files": [{"sha": "baaf05c0f3b4b894498cdf7a7afe801d242b05cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/638c02945ce26ef40ac5726c55b95d0aff8e4e65/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/638c02945ce26ef40ac5726c55b95d0aff8e4e65/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=638c02945ce26ef40ac5726c55b95d0aff8e4e65", "patch": "@@ -1,3 +1,8 @@\n+2014-07-08  Mark Wielaard  <mjw@redhat.com>\n+\n+\tPR debug/59051\n+\t* dwarf2out.c (modified_type_die): Handle TYPE_QUAL_RESTRICT.\n+\n 2014-08-19  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/61271"}, {"sha": "51e379e931e8676cef04880a08c66561fe27c60b", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/638c02945ce26ef40ac5726c55b95d0aff8e4e65/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/638c02945ce26ef40ac5726c55b95d0aff8e4e65/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=638c02945ce26ef40ac5726c55b95d0aff8e4e65", "patch": "@@ -10478,7 +10478,13 @@ modified_type_die (tree type, int cv_quals, dw_die_ref context_die)\n     return NULL;\n \n   /* Only these cv-qualifiers are currently handled.  */\n-  cv_quals &= (TYPE_QUAL_CONST | TYPE_QUAL_VOLATILE);\n+  cv_quals &= (TYPE_QUAL_CONST | TYPE_QUAL_VOLATILE | TYPE_QUAL_RESTRICT);\n+\n+  /* Don't emit DW_TAG_restrict_type for DWARFv2, since it is a type\n+     tag modifier (and not an attribute) old consumers won't be able\n+     to handle it.  */\n+  if (dwarf_version < 3)\n+    cv_quals &= ~TYPE_QUAL_RESTRICT;\n \n   /* See if we already have the appropriately qualified variant of\n      this type.  */\n@@ -10523,7 +10529,7 @@ modified_type_die (tree type, int cv_quals, dw_die_ref context_die)\n       else\n \t{\n \t  int dquals = TYPE_QUALS_NO_ADDR_SPACE (dtype);\n-\t  dquals &= (TYPE_QUAL_CONST | TYPE_QUAL_VOLATILE);\n+\t  dquals &= (TYPE_QUAL_CONST | TYPE_QUAL_VOLATILE | TYPE_QUAL_RESTRICT);\n \t  if ((dquals & ~cv_quals) != TYPE_UNQUALIFIED\n \t      || (cv_quals == dquals && DECL_ORIGINAL_TYPE (name) != type))\n \t    /* cv-unqualified version of named type.  Just use\n@@ -10537,22 +10543,33 @@ modified_type_die (tree type, int cv_quals, dw_die_ref context_die)\n   mod_scope = scope_die_for (type, context_die);\n \n   if ((cv_quals & TYPE_QUAL_CONST)\n-      /* If both const_type and volatile_type, prefer the path\n-\t which leads to a qualified type.  */\n-      && (!(cv_quals & TYPE_QUAL_VOLATILE)\n-\t  || get_qualified_type (type, TYPE_QUAL_CONST) == NULL_TREE\n-\t  || get_qualified_type (type, TYPE_QUAL_VOLATILE) != NULL_TREE))\n+      /* If there are multiple type modifiers, prefer a path which\n+\t leads to a qualified type.  */\n+      && (((cv_quals & ~TYPE_QUAL_CONST) == TYPE_UNQUALIFIED)\n+\t  || get_qualified_type (type, cv_quals) == NULL_TREE\n+\t  || (get_qualified_type (type, cv_quals & ~TYPE_QUAL_CONST)\n+\t      != NULL_TREE)))\n     {\n       mod_type_die = new_die (DW_TAG_const_type, mod_scope, type);\n       sub_die = modified_type_die (type, cv_quals & ~TYPE_QUAL_CONST,\n \t\t\t\t   context_die);\n     }\n-  else if (cv_quals & TYPE_QUAL_VOLATILE)\n+  else if ((cv_quals & TYPE_QUAL_VOLATILE)\n+\t   && (((cv_quals & ~TYPE_QUAL_VOLATILE) == TYPE_UNQUALIFIED)\n+\t       || get_qualified_type (type, cv_quals) == NULL_TREE\n+\t       || (get_qualified_type (type, cv_quals & ~TYPE_QUAL_VOLATILE)\n+\t\t   != NULL_TREE)))\n     {\n       mod_type_die = new_die (DW_TAG_volatile_type, mod_scope, type);\n       sub_die = modified_type_die (type, cv_quals & ~TYPE_QUAL_VOLATILE,\n \t\t\t\t   context_die);\n     }\n+  else if (cv_quals & TYPE_QUAL_RESTRICT)\n+    {\n+      mod_type_die = new_die (DW_TAG_restrict_type, mod_scope, type);\n+      sub_die = modified_type_die (type, cv_quals & ~TYPE_QUAL_RESTRICT,\n+\t\t\t\t   context_die);\n+    }\n   else if (code == POINTER_TYPE)\n     {\n       mod_type_die = new_die (DW_TAG_pointer_type, mod_scope, type);"}, {"sha": "7f15f53de3ec2076da857677edb0c6c20a6e6283", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/638c02945ce26ef40ac5726c55b95d0aff8e4e65/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/638c02945ce26ef40ac5726c55b95d0aff8e4e65/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=638c02945ce26ef40ac5726c55b95d0aff8e4e65", "patch": "@@ -1,3 +1,8 @@\n+2014-07-08  Mark Wielaard  <mjw@redhat.com>\n+\n+\tPR debug/59051\n+\t* gcc.dg/guality/restrict.c: New test.\n+\n 2014-07-03  Mark Wielaard  <mjw@redhat.com>\n \n \t* lib/gcc-gdb-test.exp (gdb-test): Handle type:var for gdb ptype"}, {"sha": "e31224bbc2a6860fb576883a8ff7dce1d6d4d2d1", "filename": "gcc/testsuite/gcc.dg/guality/restrict.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/638c02945ce26ef40ac5726c55b95d0aff8e4e65/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Frestrict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/638c02945ce26ef40ac5726c55b95d0aff8e4e65/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Frestrict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Frestrict.c?ref=638c02945ce26ef40ac5726c55b95d0aff8e4e65", "patch": "@@ -0,0 +1,48 @@\n+/* debuginfo tests for combinations of const, volatile, restrict pointers. */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c99 -gdwarf-3\" } */\n+\n+int *ip;\n+const int *cip;\n+int * restrict irp;\n+int * const icp;\n+const int * restrict cirp;\n+int * const restrict icrp;\n+const int * const restrict cicrp;\n+\n+int * const volatile restrict cvirp;\n+const volatile int * restrict pcvir;\n+\n+static __attribute__((noclone, noinline)) void *\n+cpy (void * restrict s1, const void * restrict s2, unsigned int n)\n+{\n+  char *t1 = s1;\n+  const char *t2 = s2;\n+  while(n-- > 0)\n+    *t1++ = *t2++;\n+  return s1;\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  void *foo = 0;\n+  if (argc > 16)\n+    foo = cpy (argv[0], argv[1], argc);\n+\n+  return foo != 0;\n+}\n+\n+/* { dg-final { gdb-test 30 \"type:ip\" \"int *\" } } */\n+/* { dg-final { gdb-test 30 \"type:cip\" \"const int *\" } } */\n+/* { dg-final { gdb-test 30 \"type:irp\" \"int * restrict\" } } */\n+/* { dg-final { gdb-test 30 \"type:icp\" \"int * const\" } } */\n+/* { dg-final { gdb-test 30 \"type:cirp\" \"const int * restrict\" } } */\n+/* { dg-final { gdb-test 30 \"type:icrp\" \"int * const restrict\" } } */\n+/* { dg-final { gdb-test 30 \"type:cicrp\" \"const int * const restrict\" } } */\n+\n+/* { dg-final { gdb-test 30 \"type:cvirp\" \"int * const volatile restrict\" } } */\n+/* { dg-final { gdb-test 30 \"type:pcvir\" \"const volatile int * restrict\" } } */\n+\n+/* { dg-final { gdb-test 30 \"type:main\" \"int (int, char **)\" } } */\n+/* { dg-final { gdb-test 30 \"type:cpy\" \"void *(void * restrict, const void * restrict, unsigned int)\" } } */"}]}