{"sha": "850a13d754497faae91afabc6958780f1d63a574", "node_id": "C_kwDOANBUbNoAKDg1MGExM2Q3NTQ0OTdmYWFlOTFhZmFiYzY5NTg3ODBmMWQ2M2E1NzQ", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-03-01T05:41:52Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-05-18T02:47:28Z"}, "message": "Expand __builtin_memcmp_eq with ptest for OImode.\n\ngcc/ChangeLog:\n\n\tPR target/104610\n\t* config/i386/i386-expand.cc (ix86_expand_branch): Use ptest\n\tfor QImode when code is EQ or NE.\n\t* config/i386/i386.md (cbranchoi4): New expander.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr104610.c: New test.", "tree": {"sha": "7dceac46b0952ff89c7a7d7f66f642d67b467de4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7dceac46b0952ff89c7a7d7f66f642d67b467de4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/850a13d754497faae91afabc6958780f1d63a574", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/850a13d754497faae91afabc6958780f1d63a574", "html_url": "https://github.com/Rust-GCC/gccrs/commit/850a13d754497faae91afabc6958780f1d63a574", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/850a13d754497faae91afabc6958780f1d63a574/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6e36f05fbb081abb068958d8900ad34b303a70b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6e36f05fbb081abb068958d8900ad34b303a70b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6e36f05fbb081abb068958d8900ad34b303a70b"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "1460bcc87a2abe52539fb269c22234033aef89da", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/850a13d754497faae91afabc6958780f1d63a574/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/850a13d754497faae91afabc6958780f1d63a574/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=850a13d754497faae91afabc6958780f1d63a574", "patch": "@@ -2267,12 +2267,20 @@ ix86_expand_branch (enum rtx_code code, rtx op0, rtx op1, rtx label)\n \n   /* Handle special case - vector comparsion with boolean result, transform\n      it using ptest instruction.  */\n-  if (GET_MODE_CLASS (mode) == MODE_VECTOR_INT)\n+  if (GET_MODE_CLASS (mode) == MODE_VECTOR_INT\n+      || mode == OImode)\n     {\n       rtx flag = gen_rtx_REG (CCZmode, FLAGS_REG);\n       machine_mode p_mode = GET_MODE_SIZE (mode) == 32 ? V4DImode : V2DImode;\n \n       gcc_assert (code == EQ || code == NE);\n+\n+      if (mode == OImode)\n+\t{\n+\t  op0 = lowpart_subreg (p_mode, force_reg (mode, op0), mode);\n+\t  op1 = lowpart_subreg (p_mode, force_reg (mode, op1), mode);\n+\t  mode = p_mode;\n+\t}\n       /* Generate XOR since we can't check that one operand is zero vector.  */\n       tmp = gen_reg_rtx (mode);\n       emit_insn (gen_rtx_SET (tmp, gen_rtx_XOR (mode, op0, op1)));"}, {"sha": "76bb56542da2334660bc484820c53da07d3983d8", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/850a13d754497faae91afabc6958780f1d63a574/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/850a13d754497faae91afabc6958780f1d63a574/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=850a13d754497faae91afabc6958780f1d63a574", "patch": "@@ -1338,6 +1338,22 @@\n   DONE;\n })\n \n+(define_expand \"cbranchoi4\"\n+  [(set (reg:CC FLAGS_REG)\n+\t(compare:CC (match_operand:OI 1 \"nonimmediate_operand\")\n+\t\t    (match_operand:OI 2 \"nonimmediate_operand\")))\n+   (set (pc) (if_then_else\n+\t       (match_operator 0 \"bt_comparison_operator\"\n+\t\t[(reg:CC FLAGS_REG) (const_int 0)])\n+\t       (label_ref (match_operand 3))\n+\t       (pc)))]\n+  \"TARGET_AVX\"\n+{\n+  ix86_expand_branch (GET_CODE (operands[0]),\n+\t\t      operands[1], operands[2], operands[3]);\n+  DONE;\n+})\n+\n (define_expand \"cstore<mode>4\"\n   [(set (reg:CC FLAGS_REG)\n \t(compare:CC (match_operand:SWIM 2 \"nonimmediate_operand\")"}, {"sha": "fe39cbe5b8a272477aa9084c1f3833fc88318f09", "filename": "gcc/testsuite/gcc.target/i386/pr104610.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/850a13d754497faae91afabc6958780f1d63a574/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104610.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/850a13d754497faae91afabc6958780f1d63a574/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104610.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104610.c?ref=850a13d754497faae91afabc6958780f1d63a574", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx -mmove-max=256 -mstore-max=256\" } */\n+/* { dg-final { scan-assembler-times {(?n)vptest.*ymm} 1 } } */\n+/* { dg-final { scan-assembler-times {sete} 1 } } */\n+/* { dg-final { scan-assembler-not {(?n)je.*L[0-9]} } } */\n+/* { dg-final { scan-assembler-not {(?n)jne.*L[0-9]} } } */\n+\n+\n+_Bool f256(char *a)\n+{\n+  char t[] = \"0123456789012345678901234567890\";\n+  return __builtin_memcmp(a, &t[0], sizeof(t)) == 0;\n+}"}]}