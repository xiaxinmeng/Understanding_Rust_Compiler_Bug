{"sha": "b9260c3d60418dd0e549bbdb69c8f696a76d5106", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkyNjBjM2Q2MDQxOGRkMGU1NDliYmRiNjljOGY2OTZhNzZkNTEwNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-09-05T07:49:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-09-05T07:49:24Z"}, "message": "s-taprop-vxworks.adb: Move with clauses outside Warnings Off now that dependent units are Preelaborate.\n\n2005-09-01  Arnaud Charlet  <charlet@adacore.com>\n\t    Jose Ruiz  <ruiz@adacore.com>\n\n\t* s-taprop-vxworks.adb:\n\tMove with clauses outside Warnings Off now that dependent units are\n\tPreelaborate.\n\t(Initialize): Call Interrupt_Managemeent.Initialize to ensure proper\n\tinitialization of this unit.\n\t(Specific): Add new procedures Initialize and Delete so that this\n\tpackage can be used for VxWorks 5.x and 6.x\n\t(ATCB_Key, ATCB_Key_Address): Moved to Specific package body to hide\n\tdifferences between VxWorks 5.x and 6.x\n\tMinor reformatting.\n\t(Timed_Delay): Remove calls to Defer/Undefer_Abort, now performed by\n\tcaller.\n\tUse only Preelaborate-compatible constructs.\n\n\t* s-tpopsp-vxworks.adb (ATBC_Key, ATCB_Key_Addr): Moved from\n\tPrimitives.Operations.\n\t(Delete, Initialize): New procedures.\n\n\t* s-osinte-vxworks.adb: Body used to handle differences between\n\tVxWorks 5.x and 6.x\n\t(kill, Set_Time_Slice, VX_FP_TASK): New functions.\n\n\t* s-osinte-vxworks.ads: Minor reformatting.\n\tAdd VxWworks 6.x specific functions (only called from VxWorks 6 files).\n\t(VX_FP_TASK): Now a function, to handle differences between VxWorks 5\n\tand 6.\n\t(Set_Time_Slice): New function, replacing kerneltimeSlice to share code\n\tbetween Vxworks 5 and 6.\n\t(taskLock, taskUnlock): Removeed, no longer used.\n\n\t* adaint.c: The wait.h header is not located in the sys directory on\n\tVxWorks when using RTPs.\n\t(__gnat_set_env_value): Use setenv instead of putenv on VxWorks when\n\tusing RTPs.\n\t(__gnat_dup): dup is available on Vxworks when using RTPs.\n\t(__gnat_dup2): dup2 is available on Vxworks when using RTPs.\n\n\t* cal.c: Use the header time.h for Vxworks 6.0 when using RTPs.\n\n\t* expect.c: The wait.h header is not located in the sys directory on\n\tVxWorks when using RTPs.\n\nFrom-SVN: r103852", "tree": {"sha": "a091e4233d93343ea43e47ffdbf8c63f0f990846", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a091e4233d93343ea43e47ffdbf8c63f0f990846"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9260c3d60418dd0e549bbdb69c8f696a76d5106", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9260c3d60418dd0e549bbdb69c8f696a76d5106", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9260c3d60418dd0e549bbdb69c8f696a76d5106", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9260c3d60418dd0e549bbdb69c8f696a76d5106/comments", "author": null, "committer": null, "parents": [{"sha": "920c9376df4cbfabe61991fe2d8857cb6be0bc19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/920c9376df4cbfabe61991fe2d8857cb6be0bc19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/920c9376df4cbfabe61991fe2d8857cb6be0bc19"}], "stats": {"total": 254, "additions": 155, "deletions": 99}, "files": [{"sha": "65fa75bb8c64f81cd61d9e33e8dd9d33e1dcd5a7", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9260c3d60418dd0e549bbdb69c8f696a76d5106/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9260c3d60418dd0e549bbdb69c8f696a76d5106/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=b9260c3d60418dd0e549bbdb69c8f696a76d5106", "patch": "@@ -89,6 +89,8 @@\n #if OLD_MINGW\n #include <sys/wait.h>\n #endif\n+#elif defined (__vxworks) && defined (__RTP__)\n+#include <wait.h>\n #else\n #include <sys/wait.h>\n #endif\n@@ -1332,6 +1334,9 @@ __gnat_set_env_value (char *name, char *value)\n       LIB$SIGNAL (status);\n   }\n \n+#elif defined (__vxworks) && defined (__RTP__)\n+  setenv (name, value, 1);\n+\n #else\n   int size = strlen (name) + strlen (value) + 2;\n   char *expression;\n@@ -1638,11 +1643,12 @@ __gnat_portable_spawn (char *args[])\n int\n __gnat_dup (int oldfd)\n {\n-#if defined (__vxworks)\n-   /* Not supported on VxWorks.  */\n-   return -1;\n+#if defined (__vxworks) && !defined (__RTP__)\n+  /* Not supported on VxWorks 5.x, but supported on VxWorks 6.0 when using\n+     RTPs. */\n+  return -1;\n #else\n-   return dup (oldfd);\n+  return dup (oldfd);\n #endif\n }\n \n@@ -1652,8 +1658,9 @@ __gnat_dup (int oldfd)\n int\n __gnat_dup2 (int oldfd, int newfd)\n {\n-#if defined (__vxworks)\n-  /* Not supported on VxWorks.  */\n+#if defined (__vxworks) && !defined (__RTP__)\n+  /* Not supported on VxWorks 5.x, but supported on VxWorks 6.0 when using\n+     RTPs.  */\n   return -1;\n #else\n   return dup2 (oldfd, newfd);"}, {"sha": "7b38e429fcc628c722bcdc702e53c0736b5cbd24", "filename": "gcc/ada/cal.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9260c3d60418dd0e549bbdb69c8f696a76d5106/gcc%2Fada%2Fcal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9260c3d60418dd0e549bbdb69c8f696a76d5106/gcc%2Fada%2Fcal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcal.c?ref=b9260c3d60418dd0e549bbdb69c8f696a76d5106", "patch": "@@ -53,7 +53,11 @@ __gnat_duration_to_timeval (long sec, long usec, void *t)\n #else\n \n #if defined (__vxworks)\n+#ifdef __RTP__\n+#include <time.h>\n+#else\n #include <sys/times.h>\n+#endif\n #else\n #include <sys/time.h>\n #endif"}, {"sha": "69a3364b6d31c0ea61dde0a621a9e025ecd9761e", "filename": "gcc/ada/expect.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9260c3d60418dd0e549bbdb69c8f696a76d5106/gcc%2Fada%2Fexpect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9260c3d60418dd0e549bbdb69c8f696a76d5106/gcc%2Fada%2Fexpect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexpect.c?ref=b9260c3d60418dd0e549bbdb69c8f696a76d5106", "patch": "@@ -49,6 +49,8 @@\n #if OLD_MINGW\n #include <sys/wait.h>\n #endif\n+#elif defined (__vxworks) && defined (__RTP__)\n+#include <wait.h>\n #else\n #include <sys/wait.h>\n #endif"}, {"sha": "cb8c969c7b0da2f9d432dc309b63bae3e8676c29", "filename": "gcc/ada/s-osinte-vxworks.adb", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9260c3d60418dd0e549bbdb69c8f696a76d5106/gcc%2Fada%2Fs-osinte-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9260c3d60418dd0e549bbdb69c8f696a76d5106/gcc%2Fada%2Fs-osinte-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-vxworks.adb?ref=b9260c3d60418dd0e549bbdb69c8f696a76d5106", "patch": "@@ -47,6 +47,28 @@ package body System.OS_Interface is\n    Low_Priority : constant := 255;\n    --  VxWorks native (default) lowest scheduling priority.\n \n+   ----------\n+   -- kill --\n+   ----------\n+\n+   function kill (pid : t_id; sig : Signal) return int is\n+      function c_kill (pid : t_id; sig : Signal) return int;\n+      pragma Import (C, c_kill, \"kill\");\n+   begin\n+      return c_kill (pid, sig);\n+   end kill;\n+\n+   --------------------\n+   -- Set_Time_Slice --\n+   --------------------\n+\n+   function Set_Time_Slice (ticks : int) return int is\n+      function kernelTimeSlice (ticks : int) return int;\n+      pragma Import (C, kernelTimeSlice, \"kernelTimeSlice\");\n+   begin\n+      return kernelTimeSlice (ticks);\n+   end Set_Time_Slice;\n+\n    -------------\n    -- sigwait --\n    -------------\n@@ -161,4 +183,13 @@ package body System.OS_Interface is\n       return int (Ticks);\n    end To_Clock_Ticks;\n \n+   ----------------\n+   -- VX_FP_TASK --\n+   ----------------\n+\n+   function VX_FP_TASK return int is\n+   begin\n+      return 16#0008#;\n+   end VX_FP_TASK;\n+\n end System.OS_Interface;"}, {"sha": "82b4bcee60403f37bb4554c0ebfe2ad52b354472", "filename": "gcc/ada/s-osinte-vxworks.ads", "status": "modified", "additions": 46, "deletions": 38, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9260c3d60418dd0e549bbdb69c8f696a76d5106/gcc%2Fada%2Fs-osinte-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9260c3d60418dd0e549bbdb69c8f696a76d5106/gcc%2Fada%2Fs-osinte-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-vxworks.ads?ref=b9260c3d60418dd0e549bbdb69c8f696a76d5106", "patch": "@@ -46,11 +46,11 @@ with System.VxWorks;\n package System.OS_Interface is\n    pragma Preelaborate;\n \n-   subtype int         is Interfaces.C.int;\n-   subtype short       is Short_Integer;\n-   type long           is new Long_Integer;\n-   type unsigned_long  is mod 2 ** long'Size;\n-   type size_t         is mod 2 ** Standard'Address_Size;\n+   subtype int        is Interfaces.C.int;\n+   subtype short      is Short_Integer;\n+   type long          is new Long_Integer;\n+   type unsigned_long is mod 2 ** long'Size;\n+   type size_t        is mod 2 ** Standard'Address_Size;\n \n    -----------\n    -- Errno --\n@@ -153,12 +153,11 @@ package System.OS_Interface is\n    subtype Thread_Id is t_id;\n \n    function kill (pid : t_id; sig : Signal) return int;\n-   pragma Import (C, kill, \"kill\");\n+   pragma Inline (kill);\n \n-   --  VxWorks doesn't have getpid; taskIdSelf is the equivalent\n-   --  routine.\n    function getpid return t_id;\n    pragma Import (C, getpid, \"taskIdSelf\");\n+   --  VxWorks doesn't have getpid; taskIdSelf is the equivalent routine.\n \n    ----------\n    -- Time --\n@@ -183,7 +182,7 @@ package System.OS_Interface is\n    pragma Inline (To_Timespec);\n \n    function To_Clock_Ticks (D : Duration) return int;\n-   --  Convert a duration value (in seconds) into clock ticks.\n+   --  Convert a duration value (in seconds) into clock ticks\n \n    function clock_gettime\n      (clock_id : clockid_t; tp : access timespec) return int;\n@@ -230,6 +229,15 @@ package System.OS_Interface is\n    function taskIsSuspended (tid : t_id) return int;\n    pragma Import (C, taskIsSuspended, \"taskIsSuspended\");\n \n+   function taskDelay (ticks : int) return int;\n+   procedure taskDelay (ticks : int);\n+   pragma Import (C, taskDelay, \"taskDelay\");\n+\n+   function sysClkRateGet return int;\n+   pragma Import (C, sysClkRateGet, \"sysClkRateGet\");\n+\n+   --  VxWorks 5.x specific functions\n+\n    function taskVarAdd\n      (tid : t_id; pVar : access System.Address) return int;\n    pragma Import (C, taskVarAdd, \"taskVarAdd\");\n@@ -249,20 +257,26 @@ package System.OS_Interface is\n       pVar : access System.Address) return int;\n    pragma Import (C, taskVarGet, \"taskVarGet\");\n \n-   function taskDelay (ticks : int) return int;\n-   procedure taskDelay (ticks : int);\n-   pragma Import (C, taskDelay, \"taskDelay\");\n+   --  VxWorks 6.x specific functions\n \n-   function sysClkRateGet return int;\n-   pragma Import (C, sysClkRateGet, \"sysClkRateGet\");\n+   function tlsKeyCreate return int;\n+   pragma Import (C, tlsKeyCreate, \"tlsKeyCreate\");\n+\n+   function tlsValueGet (key : int) return System.Address;\n+   pragma Import (C, tlsValueGet, \"tlsValueGet\");\n+\n+   function tlsValueSet (key : int; value : System.Address) return STATUS;\n+   pragma Import (C, tlsValueSet, \"tlsValueSet\");\n \n    --  Option flags for taskSpawn\n \n    VX_UNBREAKABLE    : constant := 16#0002#;\n-   VX_FP_TASK        : constant := 16#0008#;\n    VX_FP_PRIVATE_ENV : constant := 16#0080#;\n    VX_NO_STACK_FILL  : constant := 16#0100#;\n \n+   function VX_FP_TASK return int;\n+   pragma Inline (VX_FP_TASK);\n+\n    function taskSpawn\n      (name          : System.Address;  --  Pointer to task name\n       priority      : int;\n@@ -284,16 +298,18 @@ package System.OS_Interface is\n    procedure taskDelete (tid : t_id);\n    pragma Import (C, taskDelete, \"taskDelete\");\n \n-   function kernelTimeSlice (ticks : int) return int;\n-   pragma Import (C, kernelTimeSlice, \"kernelTimeSlice\");\n+   function Set_Time_Slice (ticks : int) return int;\n+   pragma Inline (Set_Time_Slice);\n+   --  Calls kernelTimeSlice under VxWorks 5.x\n+   --  Do nothing under VxWorks 6.x\n \n    function taskPriorityGet (tid : t_id; pPriority : access int) return int;\n    pragma Import (C, taskPriorityGet, \"taskPriorityGet\");\n \n    function taskPrioritySet (tid : t_id; newPriority : int) return int;\n    pragma Import (C, taskPrioritySet, \"taskPrioritySet\");\n \n-   --  Semaphore creation flags.\n+   --  Semaphore creation flags\n \n    SEM_Q_FIFO         : constant := 0;\n    SEM_Q_PRIORITY     : constant := 1;\n@@ -305,17 +321,16 @@ package System.OS_Interface is\n    SEM_EMPTY : constant := 0;\n    SEM_FULL  : constant := 1;\n \n-   --  Semaphore take (semTake) time constants.\n+   --  Semaphore take (semTake) time constants\n \n    WAIT_FOREVER : constant := -1;\n    NO_WAIT      : constant := 0;\n \n-   --  Error codes (errno).  The lower level 16 bits are the\n-   --  error code, with the upper 16 bits representing the\n-   --  module number in which the error occurred.  By convention,\n-   --  the module number is 0 for UNIX errors.  VxWorks reserves\n-   --  module numbers 1-500, with the remaining module numbers\n-   --  being available for user applications.\n+   --  Error codes (errno). The lower level 16 bits are the error code, with\n+   --  the upper 16 bits representing the module number in which the error\n+   --  occurred. By convention, the module number is 0 for UNIX errors. VxWorks\n+   --  reserves module numbers 1-500, with the remaining module numbers being\n+   --  available for user applications.\n \n    M_objLib                 : constant := 61 * 2**16;\n    --  semTake() failure with ticks = NO_WAIT\n@@ -326,39 +341,32 @@ package System.OS_Interface is\n    type SEM_ID is new System.Address;\n    --  typedef struct semaphore *SEM_ID;\n \n-   --  We use two different kinds of VxWorks semaphores: mutex\n-   --  and binary semaphores.  A null ID is returned when\n-   --  a semaphore cannot be created.\n+   --  We use two different kinds of VxWorks semaphores: mutex and binary\n+   --  semaphores. A null ID is returned when a semaphore cannot be created.\n \n    function semBCreate (options : int; initial_state : int) return SEM_ID;\n+   pragma Import (C, semBCreate, \"semBCreate\");\n    --  Create a binary semaphore. Return ID, or 0 if memory could not\n    --  be allocated.\n-   pragma Import (C, semBCreate, \"semBCreate\");\n \n    function semMCreate (options : int) return SEM_ID;\n    pragma Import (C, semMCreate, \"semMCreate\");\n \n    function semDelete (Sem : SEM_ID) return int;\n-   --  Delete a semaphore\n    pragma Import (C, semDelete, \"semDelete\");\n+   --  Delete a semaphore\n \n    function semGive (Sem : SEM_ID) return int;\n    pragma Import (C, semGive, \"semGive\");\n \n    function semTake (Sem : SEM_ID; timeout : int) return int;\n+   pragma Import (C, semTake, \"semTake\");\n    --  Attempt to take binary semaphore.  Error is returned if operation\n    --  times out\n-   pragma Import (C, semTake, \"semTake\");\n \n    function semFlush (SemID : SEM_ID) return STATUS;\n-   --  Release all threads blocked on the semaphore\n    pragma Import (C, semFlush, \"semFlush\");\n-\n-   function taskLock return int;\n-   pragma Import (C, taskLock, \"taskLock\");\n-\n-   function taskUnlock return int;\n-   pragma Import (C, taskUnlock, \"taskUnlock\");\n+   --  Release all threads blocked on the semaphore\n \n private\n    type sigset_t is new long;"}, {"sha": "2165ea7f39c1ebc4721677d9aae0f648c418b7d4", "filename": "gcc/ada/s-taprop-vxworks.adb", "status": "modified", "additions": 30, "deletions": 55, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9260c3d60418dd0e549bbdb69c8f696a76d5106/gcc%2Fada%2Fs-taprop-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9260c3d60418dd0e549bbdb69c8f696a76d5106/gcc%2Fada%2Fs-taprop-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vxworks.adb?ref=b9260c3d60418dd0e549bbdb69c8f696a76d5106", "patch": "@@ -40,6 +40,11 @@ pragma Polling (Off);\n --  Turn off polling, we do not want ATC polling to take place during\n --  tasking operations. It causes infinite loops and other problems.\n \n+with System.Tasking;\n+--  used for Ada_Task_Control_Block\n+--           Task_Id\n+--           ATCB components and types\n+\n with System.Tasking.Debug;\n --  used for Known_Tasks\n \n@@ -49,25 +54,12 @@ with System.Interrupt_Management;\n --           Signal_ID\n --           Initialize_Interrupts\n \n-with System.Soft_Links;\n---  used for Defer/Undefer_Abort\n-\n---  Note that we do not use System.Tasking.Initialization directly since\n---  this is a higher level package that we shouldn't depend on. For example\n---  when using the restricted run time, it is replaced by\n---  System.Tasking.Restricted.Stages.\n-\n with System.OS_Interface;\n --  used for various type, constant, and operations\n \n with System.Parameters;\n --  used for Size_Type\n \n-with System.Tasking;\n---  used for Ada_Task_Control_Block\n---           Task_Id\n---           ATCB components and types\n-\n with Interfaces.C;\n \n with Unchecked_Conversion;\n@@ -81,8 +73,6 @@ package body System.Task_Primitives.Operations is\n    use System.Parameters;\n    use type Interfaces.C.int;\n \n-   package SSL renames System.Soft_Links;\n-\n    subtype int is System.OS_Interface.int;\n \n    Relative : constant := 0;\n@@ -99,15 +89,6 @@ package body System.Task_Primitives.Operations is\n    --  time; it is used to execute in mutual exclusion from all other tasks.\n    --  Used mainly in Single_Lock mode, but also to protect All_Tasks_List\n \n-   ATCB_Key : aliased System.Address := System.Null_Address;\n-   --  Key used to find the Ada Task_Id associated with a thread\n-\n-   ATCB_Key_Addr : System.Address := ATCB_Key'Address;\n-   pragma Export (Ada, ATCB_Key_Addr, \"__gnat_ATCB_key_addr\");\n-   --  Exported to support the temporary AE653 task registration\n-   --  implementation. This mechanism is used to minimize impact on other\n-   --  targets.\n-\n    Environment_Task_Id : Task_Id;\n    --  A variable to hold Task_Id for the environment task\n \n@@ -125,9 +106,6 @@ package body System.Task_Primitives.Operations is\n    Dispatching_Policy : Character;\n    pragma Import (C, Dispatching_Policy, \"__gl_task_dispatching_policy\");\n \n-   FIFO_Within_Priorities : constant Boolean := Dispatching_Policy = 'F';\n-   --  Indicates whether FIFO_Within_Priorities is set\n-\n    Mutex_Protocol : Priority_Type;\n \n    Foreign_Task_Elaborated : aliased Boolean := True;\n@@ -139,6 +117,10 @@ package body System.Task_Primitives.Operations is\n \n    package Specific is\n \n+      procedure Initialize;\n+      pragma Inline (Initialize);\n+      --  Initialize task specific data\n+\n       function Is_Valid_Task return Boolean;\n       pragma Inline (Is_Valid_Task);\n       --  Does executing thread have a TCB?\n@@ -147,6 +129,10 @@ package body System.Task_Primitives.Operations is\n       pragma Inline (Set);\n       --  Set the self id for the current task\n \n+      procedure Delete;\n+      pragma Inline (Delete);\n+      --  Delete the task specific data associated with the current task\n+\n       function Self return Task_Id;\n       pragma Inline (Self);\n       --  Return a pointer to the Ada Task Control Block of the calling task\n@@ -298,15 +284,13 @@ package body System.Task_Primitives.Operations is\n \n    procedure Finalize_Lock (L : access Lock) is\n       Result : int;\n-\n    begin\n       Result := semDelete (L.Mutex);\n       pragma Assert (Result = 0);\n    end Finalize_Lock;\n \n    procedure Finalize_Lock (L : access RTS_Lock) is\n       Result : int;\n-\n    begin\n       Result := semDelete (L.Mutex);\n       pragma Assert (Result = 0);\n@@ -318,7 +302,6 @@ package body System.Task_Primitives.Operations is\n \n    procedure Write_Lock (L : access Lock; Ceiling_Violation : out Boolean) is\n       Result : int;\n-\n    begin\n       if L.Protocol = Prio_Protect\n         and then int (Self.Common.Current_Priority) > L.Prio_Ceiling\n@@ -338,7 +321,6 @@ package body System.Task_Primitives.Operations is\n       Global_Lock : Boolean := False)\n    is\n       Result : int;\n-\n    begin\n       if not Single_Lock or else Global_Lock then\n          Result := semTake (L.Mutex, WAIT_FOREVER);\n@@ -348,7 +330,6 @@ package body System.Task_Primitives.Operations is\n \n    procedure Write_Lock (T : Task_Id) is\n       Result : int;\n-\n    begin\n       if not Single_Lock then\n          Result := semTake (T.Common.LL.L.Mutex, WAIT_FOREVER);\n@@ -370,16 +351,14 @@ package body System.Task_Primitives.Operations is\n    ------------\n \n    procedure Unlock (L : access Lock) is\n-      Result  : int;\n-\n+      Result : int;\n    begin\n       Result := semGive (L.Mutex);\n       pragma Assert (Result = 0);\n    end Unlock;\n \n    procedure Unlock (L : access RTS_Lock; Global_Lock : Boolean := False) is\n       Result : int;\n-\n    begin\n       if not Single_Lock or else Global_Lock then\n          Result := semGive (L.Mutex);\n@@ -389,7 +368,6 @@ package body System.Task_Primitives.Operations is\n \n    procedure Unlock (T : Task_Id) is\n       Result : int;\n-\n    begin\n       if not Single_Lock then\n          Result := semGive (T.Common.LL.L.Mutex);\n@@ -568,9 +546,9 @@ package body System.Task_Primitives.Operations is\n    --  caller is holding no locks.\n \n    procedure Timed_Delay\n-     (Self_ID  : Task_Id;\n-      Time     : Duration;\n-      Mode     : ST.Delay_Modes)\n+     (Self_ID : Task_Id;\n+      Time    : Duration;\n+      Mode    : ST.Delay_Modes)\n    is\n       Orig     : constant Duration := Monotonic_Clock;\n       Absolute : Duration;\n@@ -580,8 +558,6 @@ package body System.Task_Primitives.Operations is\n       Aborted  : Boolean := False;\n \n    begin\n-      SSL.Abort_Defer.all;\n-\n       if Mode = Relative then\n          Absolute := Orig + Time;\n          Ticks    := To_Clock_Ticks (Time);\n@@ -654,7 +630,7 @@ package body System.Task_Primitives.Operations is\n             end if;\n \n             --  Take back the lock after having slept, to protect further\n-            --  access to Self_ID\n+            --  access to Self_ID.\n \n             if Single_Lock then\n                Result := semTake (Single_RTS_Lock.Mutex, WAIT_FOREVER);\n@@ -678,8 +654,6 @@ package body System.Task_Primitives.Operations is\n       else\n          taskDelay (0);\n       end if;\n-\n-      SSL.Abort_Undefer.all;\n    end Timed_Delay;\n \n    ---------------------\n@@ -754,7 +728,7 @@ package body System.Task_Primitives.Operations is\n           (T.Common.LL.Thread, To_VxWorks_Priority (int (Prio)));\n       pragma Assert (Result = 0);\n \n-      if FIFO_Within_Priorities then\n+      if Dispatching_Policy = 'F' then\n \n          --  Annex D requirement [RM D.2.2 par. 9]:\n \n@@ -905,15 +879,15 @@ package body System.Task_Primitives.Operations is\n       --  Ask for four extra bytes of stack space so that the ATCB pointer can\n       --  be stored below the stack limit, plus extra space for the frame of\n       --  Task_Wrapper. This is so the user gets the amount of stack requested\n-      --  exclusive of the needs\n-      --\n+      --  exclusive of the needs.\n+\n       --  We also have to allocate n more bytes for the task name storage and\n       --  enough space for the Wind Task Control Block which is around 0x778\n       --  bytes. VxWorks also seems to carve out additional space, so use 2048\n       --  as a nice round number. We might want to increment to the nearest\n       --  page size in case we ever support VxVMI.\n-      --\n-      --  XXX - we should come back and visit this so we can set the task name\n+\n+      --  ??? - we should come back and visit this so we can set the task name\n       --        to something appropriate.\n \n       Adjusted_Stack_Size := Adjusted_Stack_Size + 2048;\n@@ -990,8 +964,7 @@ package body System.Task_Primitives.Operations is\n       Free (Tmp);\n \n       if Is_Self then\n-         Result := taskVarDelete (taskIdSelf, ATCB_Key'Access);\n-         pragma Assert (Result /= ERROR);\n+         Specific.Delete;\n       end if;\n    end Finalize_TCB;\n \n@@ -1249,8 +1222,12 @@ package body System.Task_Primitives.Operations is\n \n    procedure Initialize (Environment_Task : Task_Id) is\n       Result : int;\n-\n    begin\n+      Environment_Task_Id := Environment_Task;\n+\n+      Interrupt_Management.Initialize;\n+      Specific.Initialize;\n+\n       if Locking_Policy = 'C' then\n          Mutex_Protocol := Prio_Protect;\n       elsif Locking_Policy = 'I' then\n@@ -1260,7 +1237,7 @@ package body System.Task_Primitives.Operations is\n       end if;\n \n       if Time_Slice_Val > 0 then\n-         Result := kernelTimeSlice\n+         Result := Set_Time_Slice\n            (To_Clock_Ticks\n              (Duration (Time_Slice_Val) / Duration (1_000_000.0)));\n       end if;\n@@ -1275,8 +1252,6 @@ package body System.Task_Primitives.Operations is\n          end if;\n       end loop;\n \n-      Environment_Task_Id := Environment_Task;\n-\n       --  Initialize the lock used to synchronize chain of all ATCBs\n \n       Initialize_Lock (Single_RTS_Lock'Access, RTS_Lock_Level);"}, {"sha": "e05ed7df611bed6407626c6c883a040a5bb38d39", "filename": "gcc/ada/s-tpopsp-vxworks.adb", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9260c3d60418dd0e549bbdb69c8f696a76d5106/gcc%2Fada%2Fs-tpopsp-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9260c3d60418dd0e549bbdb69c8f696a76d5106/gcc%2Fada%2Fs-tpopsp-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpopsp-vxworks.adb?ref=b9260c3d60418dd0e549bbdb69c8f696a76d5106", "patch": "@@ -38,6 +38,35 @@\n separate (System.Task_Primitives.Operations)\n package body Specific is\n \n+   ATCB_Key : aliased System.Address := System.Null_Address;\n+   --  Key used to find the Ada Task_Id associated with a thread\n+\n+   ATCB_Key_Addr : System.Address := ATCB_Key'Address;\n+   pragma Export (Ada, ATCB_Key_Addr, \"__gnat_ATCB_key_addr\");\n+   --  Exported to support the temporary AE653 task registration\n+   --  implementation. This mechanism is used to minimize impact on other\n+   --  targets.\n+\n+   ------------\n+   -- Delete --\n+   ------------\n+\n+   procedure Delete is\n+      Result : STATUS;\n+   begin\n+      Result := taskVarDelete (taskIdSelf, ATCB_Key'Access);\n+      pragma Assert (Result /= ERROR);\n+   end Delete;\n+\n+   ----------------\n+   -- Initialize --\n+   ----------------\n+\n+   procedure Initialize is\n+   begin\n+      null;\n+   end Initialize;\n+\n    -------------------\n    -- Is_Valid_Task --\n    -------------------"}]}