{"sha": "809e78cc9049087eff6602114512b3f746834c8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA5ZTc4Y2M5MDQ5MDg3ZWZmNjYwMjExNDUxMmIzZjc0NjgzNGM4ZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-09-22T15:15:59Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-09-22T15:15:59Z"}, "message": "sparc.c (TARGET_TRAMPOLINE_INIT): New.\n\n        * config/sparc/sparc.c (TARGET_TRAMPOLINE_INIT): New.\n        (sparc32_initialize_trampoline): Rename from\n        sparc_initialize_trampoline; make static; replace tramp parameter\n        with m_tramp and update memory accesses.\n        (sparc64_initialize_trampoline): Similarly.\n        (sparc_trampoline_init): New.\n        * config/sparc/sparc-protos.h: Remove trampoline decls.\n        * config/sparc/sparc.h (INITIALIZE_TRAMPOLINE): Remove.\n        * config/sparc/sparc.md (nonlocal_goto): Don't use static_chain_rtx.\n\nFrom-SVN: r152012", "tree": {"sha": "e92d06d7cd8e090a7e45d09ef29f77f58d013bfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e92d06d7cd8e090a7e45d09ef29f77f58d013bfe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/809e78cc9049087eff6602114512b3f746834c8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/809e78cc9049087eff6602114512b3f746834c8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/809e78cc9049087eff6602114512b3f746834c8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/809e78cc9049087eff6602114512b3f746834c8d/comments", "author": null, "committer": null, "parents": [{"sha": "994322ef6e022b027d31796f6ed702a24dbe8167", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/994322ef6e022b027d31796f6ed702a24dbe8167", "html_url": "https://github.com/Rust-GCC/gccrs/commit/994322ef6e022b027d31796f6ed702a24dbe8167"}], "stats": {"total": 82, "additions": 47, "deletions": 35}, "files": [{"sha": "507b309cc48bd002f5c7bc73904ed600ca2136b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/809e78cc9049087eff6602114512b3f746834c8d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/809e78cc9049087eff6602114512b3f746834c8d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=809e78cc9049087eff6602114512b3f746834c8d", "patch": "@@ -253,6 +253,16 @@\n \t* config/sh/sh.h (INITIALIZE_TRAMPOLINE): New.\n \t(TRAMPOLINE_ADJUST_ADDRESS): Move code to sh_trampoline_adjust_address.\n \n+\t* config/sparc/sparc.c (TARGET_TRAMPOLINE_INIT): New.\n+\t(sparc32_initialize_trampoline): Rename from\n+\tsparc_initialize_trampoline; make static; replace tramp parameter\n+\twith m_tramp and update memory accesses.\n+\t(sparc64_initialize_trampoline): Similarly.\n+\t(sparc_trampoline_init): New.\n+\t* config/sparc/sparc-protos.h: Remove trampoline decls.\n+\t* config/sparc/sparc.h (INITIALIZE_TRAMPOLINE): Remove.\n+\t* config/sparc/sparc.md (nonlocal_goto): Don't use static_chain_rtx.\n+\n 2009-09-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/rs6000/rs6000.c (bdesc_2arg): Fix CODE_FOR_vector_gt* codes"}, {"sha": "097b709624be246c88d45e98b7f04a29ffab8a41", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/809e78cc9049087eff6602114512b3f746834c8d/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/809e78cc9049087eff6602114512b3f746834c8d/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=809e78cc9049087eff6602114512b3f746834c8d", "patch": "@@ -61,9 +61,6 @@ extern void sparc_emit_fixunsdi (rtx [2], enum machine_mode);\n extern void emit_tfmode_binop (enum rtx_code, rtx *);\n extern void emit_tfmode_unop (enum rtx_code, rtx *);\n extern void emit_tfmode_cvt (enum rtx_code, rtx *);\n-/* This function handles all v9 scc insns */\n-extern void sparc_initialize_trampoline (rtx, rtx, rtx);\n-extern void sparc64_initialize_trampoline (rtx, rtx, rtx);\n extern bool legitimate_constant_p (rtx);\n extern bool constant_address_p (rtx);\n extern bool legitimate_pic_operand_p (rtx);"}, {"sha": "0bfde6f66326f854f98921b227305ff1a4f88822", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 37, "deletions": 21, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/809e78cc9049087eff6602114512b3f746834c8d/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/809e78cc9049087eff6602114512b3f746834c8d/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=809e78cc9049087eff6602114512b3f746834c8d", "patch": "@@ -424,6 +424,7 @@ static bool sparc_can_eliminate (const int, const int);\n #ifdef TARGET_ALTERNATE_LONG_DOUBLE_MANGLING\n static const char *sparc_mangle_type (const_tree);\n #endif\n+static void sparc_trampoline_init (rtx, tree, rtx);\n \f\n #ifdef SUBTARGET_ATTRIBUTE_TABLE\n /* Table of valid machine attributes.  */\n@@ -600,6 +601,9 @@ static bool fpu_option_set = false;\n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P sparc_legitimate_address_p\n \n+#undef TARGET_TRAMPOLINE_INIT\n+#define TARGET_TRAMPOLINE_INIT sparc_trampoline_init\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n /* Implement TARGET_HANDLE_OPTION.  */\n@@ -7404,8 +7408,8 @@ sparc_type_code (register tree type)\n \n    Emit enough FLUSH insns to synchronize the data and instruction caches.  */\n \n-void\n-sparc_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n+static void\n+sparc32_initialize_trampoline (rtx m_tramp, rtx fnaddr, rtx cxt)\n {\n   /* SPARC 32-bit trampoline:\n \n@@ -7419,50 +7423,49 @@ sparc_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n    */\n \n   emit_move_insn\n-    (gen_rtx_MEM (SImode, plus_constant (tramp, 0)),\n+    (adjust_address (m_tramp, SImode, 0),\n      expand_binop (SImode, ior_optab,\n \t\t   expand_shift (RSHIFT_EXPR, SImode, fnaddr,\n \t\t\t\t size_int (10), 0, 1),\n \t\t   GEN_INT (trunc_int_for_mode (0x03000000, SImode)),\n \t\t   NULL_RTX, 1, OPTAB_DIRECT));\n \n   emit_move_insn\n-    (gen_rtx_MEM (SImode, plus_constant (tramp, 4)),\n+    (adjust_address (m_tramp, SImode, 4),\n      expand_binop (SImode, ior_optab,\n \t\t   expand_shift (RSHIFT_EXPR, SImode, cxt,\n \t\t\t\t size_int (10), 0, 1),\n \t\t   GEN_INT (trunc_int_for_mode (0x05000000, SImode)),\n \t\t   NULL_RTX, 1, OPTAB_DIRECT));\n \n   emit_move_insn\n-    (gen_rtx_MEM (SImode, plus_constant (tramp, 8)),\n+    (adjust_address (m_tramp, SImode, 8),\n      expand_binop (SImode, ior_optab,\n \t\t   expand_and (SImode, fnaddr, GEN_INT (0x3ff), NULL_RTX),\n \t\t   GEN_INT (trunc_int_for_mode (0x81c06000, SImode)),\n \t\t   NULL_RTX, 1, OPTAB_DIRECT));\n \n   emit_move_insn\n-    (gen_rtx_MEM (SImode, plus_constant (tramp, 12)),\n+    (adjust_address (m_tramp, SImode, 12),\n      expand_binop (SImode, ior_optab,\n \t\t   expand_and (SImode, cxt, GEN_INT (0x3ff), NULL_RTX),\n \t\t   GEN_INT (trunc_int_for_mode (0x8410a000, SImode)),\n \t\t   NULL_RTX, 1, OPTAB_DIRECT));\n \n   /* On UltraSPARC a flush flushes an entire cache line.  The trampoline is\n      aligned on a 16 byte boundary so one flush clears it all.  */\n-  emit_insn (gen_flush (validize_mem (gen_rtx_MEM (SImode, tramp))));\n+  emit_insn (gen_flush (validize_mem (adjust_address (m_tramp, SImode, 0))));\n   if (sparc_cpu != PROCESSOR_ULTRASPARC\n       && sparc_cpu != PROCESSOR_ULTRASPARC3\n       && sparc_cpu != PROCESSOR_NIAGARA\n       && sparc_cpu != PROCESSOR_NIAGARA2)\n-    emit_insn (gen_flush (validize_mem (gen_rtx_MEM (SImode,\n-\t\t\t\t\t\t     plus_constant (tramp, 8)))));\n+    emit_insn (gen_flush (validize_mem (adjust_address (m_tramp, SImode, 8))));\n \n   /* Call __enable_execute_stack after writing onto the stack to make sure\n      the stack address is accessible.  */\n #ifdef ENABLE_EXECUTE_STACK\n   emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__enable_execute_stack\"),\n-                     LCT_NORMAL, VOIDmode, 1, tramp, Pmode);\n+                     LCT_NORMAL, VOIDmode, 1, XEXP (m_tramp, 0), Pmode);\n #endif\n \n }\n@@ -7471,8 +7474,8 @@ sparc_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n    values as \"immediate\" data out of the trampoline.  It's also easier since\n    we can read the PC without clobbering a register.  */\n \n-void\n-sparc64_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n+static void\n+sparc64_initialize_trampoline (rtx m_tramp, rtx fnaddr, rtx cxt)\n {\n   /* SPARC 64-bit trampoline:\n \n@@ -7483,31 +7486,44 @@ sparc64_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n \t+16 bytes data\n    */\n \n-  emit_move_insn (gen_rtx_MEM (SImode, tramp),\n+  emit_move_insn (adjust_address (m_tramp, SImode, 0),\n \t\t  GEN_INT (trunc_int_for_mode (0x83414000, SImode)));\n-  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (tramp, 4)),\n+  emit_move_insn (adjust_address (m_tramp, SImode, 4),\n \t\t  GEN_INT (trunc_int_for_mode (0xca586018, SImode)));\n-  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (tramp, 8)),\n+  emit_move_insn (adjust_address (m_tramp, SImode, 8),\n \t\t  GEN_INT (trunc_int_for_mode (0x81c14000, SImode)));\n-  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (tramp, 12)),\n+  emit_move_insn (adjust_address (m_tramp, SImode, 12),\n \t\t  GEN_INT (trunc_int_for_mode (0xca586010, SImode)));\n-  emit_move_insn (gen_rtx_MEM (DImode, plus_constant (tramp, 16)), cxt);\n-  emit_move_insn (gen_rtx_MEM (DImode, plus_constant (tramp, 24)), fnaddr);\n-  emit_insn (gen_flushdi (validize_mem (gen_rtx_MEM (DImode, tramp))));\n+  emit_move_insn (adjust_address (m_tramp, DImode, 16), cxt);\n+  emit_move_insn (adjust_address (m_tramp, DImode, 24), fnaddr);\n+  emit_insn (gen_flushdi (validize_mem (adjust_address (m_tramp, DImode, 0))));\n \n   if (sparc_cpu != PROCESSOR_ULTRASPARC\n       && sparc_cpu != PROCESSOR_ULTRASPARC3\n       && sparc_cpu != PROCESSOR_NIAGARA\n       && sparc_cpu != PROCESSOR_NIAGARA2)\n-    emit_insn (gen_flushdi (validize_mem (gen_rtx_MEM (DImode, plus_constant (tramp, 8)))));\n+    emit_insn (gen_flushdi (validize_mem (adjust_address (m_tramp, DImode, 8))));\n \n   /* Call __enable_execute_stack after writing onto the stack to make sure\n      the stack address is accessible.  */\n #ifdef ENABLE_EXECUTE_STACK\n   emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__enable_execute_stack\"),\n-                     LCT_NORMAL, VOIDmode, 1, tramp, Pmode);\n+                     LCT_NORMAL, VOIDmode, 1, XEXP (m_tramp, 0), Pmode);\n #endif\n }\n+\n+/* Worker for TARGET_TRAMPOLINE_INIT.  */\n+\n+static void\n+sparc_trampoline_init (rtx m_tramp, tree fndecl, rtx cxt)\n+{\n+  rtx fnaddr = force_reg (Pmode, XEXP (DECL_RTL (fndecl), 0));\n+  cxt = force_reg (Pmode, cxt);\n+  if (TARGET_ARCH64)\n+    sparc64_initialize_trampoline (m_tramp, fnaddr, cxt);\n+  else\n+    sparc32_initialize_trampoline (m_tramp, fnaddr, cxt);\n+}\n \f\n /* Adjust the cost of a scheduling dependency.  Return the new cost of\n    a dependency LINK or INSN on DEP_INSN.  COST is the current cost.  */"}, {"sha": "13efc690ee3dedecc8911668816c7f884b4a333b", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/809e78cc9049087eff6602114512b3f746834c8d/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/809e78cc9049087eff6602114512b3f746834c8d/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=809e78cc9049087eff6602114512b3f746834c8d", "patch": "@@ -1612,16 +1612,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define TRAMPOLINE_SIZE (TARGET_ARCH64 ? 32 : 16)\n \n #define TRAMPOLINE_ALIGNMENT 128 /* 16 bytes */\n-\n-/* Emit RTL insns to initialize the variable parts of a trampoline.\n-   FNADDR is an RTX for the address of the function's pure code.\n-   CXT is an RTX for the static chain value for the function.  */\n-\n-#define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT) \\\n-    if (TARGET_ARCH64)\t\t\t\t\t\t\\\n-      sparc64_initialize_trampoline (TRAMP, FNADDR, CXT);\t\\\n-    else\t\t\t\t\t\t\t\\\n-      sparc_initialize_trampoline (TRAMP, FNADDR, CXT)\n \f\n /* Generate RTL to flush the register windows so as to make arbitrary frames\n    available.  */"}, {"sha": "516779200a93028c4cc0295fc2309ec89dcfaecd", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/809e78cc9049087eff6602114512b3f746834c8d/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/809e78cc9049087eff6602114512b3f746834c8d/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=809e78cc9049087eff6602114512b3f746834c8d", "patch": "@@ -6397,7 +6397,6 @@\n   emit_move_insn (hard_frame_pointer_rtx, stack);\n \n   emit_use (stack_pointer_rtx);\n-  emit_use (static_chain_rtx);\n \n   /* ??? The V9-specific version was disabled in rev 1.65.  */\n   emit_jump_insn (gen_goto_handler_and_restore (labreg));"}]}