{"sha": "b5617e5f69bdd5ad7a3da9b34d1871fb2aff940a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU2MTdlNWY2OWJkZDVhZDdhM2RhOWIzNGQxODcxZmIyYWZmOTQwYQ==", "commit": {"author": {"name": "Andi Kleen", "email": "ak@linux.intel.com", "date": "2014-09-01T16:41:17Z"}, "committer": {"name": "Andi Kleen", "email": "ak@gcc.gnu.org", "date": "2014-09-01T16:41:17Z"}, "message": "Add -B support to gcc-ar/ranlib/nm\n\nTo use gcc-{ar,ranlib} for boot strap we need to add a -B option\nto the tool. Since ar has weird and unusual argument conventions\nimplement the code by hand instead of using any libraries.\n\ngcc/:\n\n2014-09-01  Andi Kleen  <ak@linux.intel.com>\n\n\t* file-find.c (add_prefix_begin): Add.\n\t(do_add_prefix): Rename from add_prefix with first argument.\n\t(add_prefix): Add new wrapper.\n\t* file-find.h (add_prefix_begin): Add.\n\t* gcc-ar.c (main): Support -B option.\n\nFrom-SVN: r214800", "tree": {"sha": "002ff8316f4430d4d2d699fc668daaa5256ff01a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/002ff8316f4430d4d2d699fc668daaa5256ff01a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5617e5f69bdd5ad7a3da9b34d1871fb2aff940a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5617e5f69bdd5ad7a3da9b34d1871fb2aff940a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5617e5f69bdd5ad7a3da9b34d1871fb2aff940a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5617e5f69bdd5ad7a3da9b34d1871fb2aff940a/comments", "author": null, "committer": null, "parents": [{"sha": "fc4f981d25a2b03e6c15303d531c272689c71187", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc4f981d25a2b03e6c15303d531c272689c71187", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc4f981d25a2b03e6c15303d531c272689c71187"}], "stats": {"total": 75, "additions": 72, "deletions": 3}, "files": [{"sha": "ce0f3bbec941e0bb8b5b627b25f8a08d4e8fc8f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5617e5f69bdd5ad7a3da9b34d1871fb2aff940a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5617e5f69bdd5ad7a3da9b34d1871fb2aff940a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5617e5f69bdd5ad7a3da9b34d1871fb2aff940a", "patch": "@@ -1,3 +1,11 @@\n+2014-09-01  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* file-find.c (add_prefix_begin): Add.\n+\t(do_add_prefix): Rename from add_prefix with first argument.\n+\t(add_prefix): Add new wrapper.\n+\t* file-find.h (add_prefix_begin): Add.\n+\t* gcc-ar.c (main): Support -B option.\n+\n 2014-09-01  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* genemit.c: Include dumpfile.h."}, {"sha": "be608b21c10390d9021ec362ed672a6da1fb32ec", "filename": "gcc/file-find.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5617e5f69bdd5ad7a3da9b34d1871fb2aff940a/gcc%2Ffile-find.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5617e5f69bdd5ad7a3da9b34d1871fb2aff940a/gcc%2Ffile-find.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffile-find.c?ref=b5617e5f69bdd5ad7a3da9b34d1871fb2aff940a", "patch": "@@ -105,15 +105,16 @@ find_a_file (struct path_prefix *pprefix, const char *name, int mode)\n   return 0;\n }\n \n-/* Add an entry for PREFIX to prefix list PPREFIX.  */\n+/* Add an entry for PREFIX to prefix list PREFIX.\n+   Add at beginning if FIRST is true.  */\n \n void\n-add_prefix (struct path_prefix *pprefix, const char *prefix)\n+do_add_prefix (struct path_prefix *pprefix, const char *prefix, bool first)\n {\n   struct prefix_list *pl, **prev;\n   int len;\n \n-  if (pprefix->plist)\n+  if (pprefix->plist && !first)\n     {\n       for (pl = pprefix->plist; pl->next; pl = pl->next)\n \t;\n@@ -138,6 +139,22 @@ add_prefix (struct path_prefix *pprefix, const char *prefix)\n   *prev = pl;\n }\n \n+/* Add an entry for PREFIX at the end of prefix list PREFIX.  */\n+\n+void\n+add_prefix (struct path_prefix *pprefix, const char *prefix)\n+{\n+  do_add_prefix (pprefix, prefix, false);\n+}\n+\n+/* Add an entry for PREFIX at the begin of prefix list PREFIX.  */\n+\n+void\n+add_prefix_begin (struct path_prefix *pprefix, const char *prefix)\n+{\n+  do_add_prefix (pprefix, prefix, true);\n+}\n+\n /* Take the value of the environment variable ENV, break it into a path, and\n    add of the entries to PPREFIX.  */\n "}, {"sha": "0754d99dc4386c884db5e70a80463d11aa0ae6e5", "filename": "gcc/file-find.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5617e5f69bdd5ad7a3da9b34d1871fb2aff940a/gcc%2Ffile-find.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5617e5f69bdd5ad7a3da9b34d1871fb2aff940a/gcc%2Ffile-find.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffile-find.h?ref=b5617e5f69bdd5ad7a3da9b34d1871fb2aff940a", "patch": "@@ -40,6 +40,7 @@ struct path_prefix\n extern void find_file_set_debug (bool);\n extern char *find_a_file (struct path_prefix *, const char *, int);\n extern void add_prefix (struct path_prefix *, const char *);\n+extern void add_prefix_begin (struct path_prefix *, const char *);\n extern void prefix_from_env (const char *, struct path_prefix *);\n extern void prefix_from_string (const char *, struct path_prefix *);\n "}, {"sha": "fdff89c643f88d90b2189ccc02ef0977b5aaae6c", "filename": "gcc/gcc-ar.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5617e5f69bdd5ad7a3da9b34d1871fb2aff940a/gcc%2Fgcc-ar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5617e5f69bdd5ad7a3da9b34d1871fb2aff940a/gcc%2Fgcc-ar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc-ar.c?ref=b5617e5f69bdd5ad7a3da9b34d1871fb2aff940a", "patch": "@@ -132,9 +132,52 @@ main (int ac, char **av)\n   const char **nargv;\n   bool is_ar = !strcmp (PERSONALITY, \"ar\");\n   int exit_code = FATAL_EXIT_CODE;\n+  int i;\n \n   setup_prefixes (av[0]);\n \n+  /* Not using getopt for now.  */\n+  for (i = 0; i < ac; i++)\n+      if (!strncmp (av[i], \"-B\", 2))\n+\t{\n+\t  const char *arg = av[i] + 2;\n+\t  const char *end;\n+\t  size_t len;\n+\n+\t  memmove (av + i, av + i + 1, sizeof (char *) * ((ac + 1) - i));\n+\t  ac--;\n+\t  if (*arg == 0)\n+\t    {\n+\t      arg = av[i];\n+\t      if (!arg)\n+\t\t{\n+\t\t  fprintf (stderr, \"Usage: gcc-ar [-B prefix] ar arguments ...\\n\");\n+\t\t  exit (EXIT_FAILURE);\n+\t\t}\n+\t      memmove (av + i, av + i + 1, sizeof (char *) * ((ac + 1) - i));\n+\t      ac--;\n+\t      i++;\n+\t    }\n+\t  /* else it's a joined argument  */\n+\n+\t  len = strlen (arg);\n+\t  if (len > 0)\n+\t\t  len--;\n+\t  end = arg + len;\n+\n+\t  /* Always add a dir separator for the prefix list.  */\n+\t  if (end > arg && !IS_DIR_SEPARATOR (*end))\n+\t    {\n+\t      static const char dir_separator_str[] = { DIR_SEPARATOR, 0 };\n+\t      arg = concat (arg, dir_separator_str, NULL);\n+\t    }\n+\n+\t  add_prefix_begin (&path, arg);\n+\t  add_prefix_begin (&target_path, arg);\n+\t  break;\n+\t}\n+\n+\n   /* Find the GCC LTO plugin */\n   plugin = find_a_file (&target_path, LTOPLUGINSONAME, R_OK);\n   if (!plugin)"}]}