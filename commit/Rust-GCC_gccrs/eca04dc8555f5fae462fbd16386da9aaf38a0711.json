{"sha": "eca04dc8555f5fae462fbd16386da9aaf38a0711", "node_id": "C_kwDOANBUbNoAKGVjYTA0ZGM4NTU1ZjVmYWU0NjJmYmQxNjM4NmRhOWFhZjM4YTA3MTE", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-22T15:02:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-04T13:12:28Z"}, "message": "tree-optimization/104658 - avoid mixing mask & non-mask vector defs\n\nWhen pattern recognition fails to sanitize all defs of a mask\nproducing operation and the respective def is external or constant\nwe end up trying to produce a VECTOR_BOOLEAN_TYPE_P constructor\nwhich in turn ends up exposing stmts like\n\n  <signed-boolean:1> _135 = _49 ? -1 : 0;\n\nwhich isn't handled well in followup SLP and generates awful code.\n\nWe do rely heavily on pattern recognition to sanitize mask vs.\ndata uses of bools but that fails here which means we also should\nfail vectorization.  That avoids ICEing because of such stmts\nand it also avoids generating weird code which makes the\nvectorization not profitable.\n\nThe following patch simply disallows external VECTOR_BOOLEAN_TYPE_P\ndefs and arranges the promote to external code to instead promote\nmask uses to extern (that's just a short-cut here).\n\nI've also looked at aarch64 and with SVE and a fixed vector length\nfor the gcc.target/i386/pr101636.c testcase.  I see similar vectorization\n(using <signed-boolean:4>) there but it's hard to decide whether the\nold, the new or no vectorization is better for this.  The code\ngenerated with traditional integer masks isn't as awkward but we\nstill get the != 0 promotion done for each scalar element which\ndoesn't look like intended - this operation should be visible upfront.\n\nThat also means some cases will now become a missed optimization\nthat needs to be fixed by bool pattern recognition.  But that can\npossibly be delayed to GCC 13.\n\n2022-02-22  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/104658\n\t* tree-vect-slp.cc (vect_slp_convert_to_external): Do not\n\tcreate VECTOR_BOOLEAN_TYPE_P extern defs.  Reset the vector\n\ttype on nodes we promote.\n\t(vectorizable_bb_reduc_epilogue): Deal with externalized\n\troot.\n\t* tree-vect-stmts.cc (vect_maybe_update_slp_op_vectype): Do\n\tnot allow VECTOR_BOOLEAN_TYPE_P extern defs.\n\n\t* gcc.target/i386/pr104658.c: New testcase.", "tree": {"sha": "a5380612d052f8a8002632489c0b6b1bd2cec57a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5380612d052f8a8002632489c0b6b1bd2cec57a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eca04dc8555f5fae462fbd16386da9aaf38a0711", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eca04dc8555f5fae462fbd16386da9aaf38a0711", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eca04dc8555f5fae462fbd16386da9aaf38a0711", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eca04dc8555f5fae462fbd16386da9aaf38a0711/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52b7b86f8c72eb19e637f1e72ffd10f39b8cb829", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52b7b86f8c72eb19e637f1e72ffd10f39b8cb829", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52b7b86f8c72eb19e637f1e72ffd10f39b8cb829"}], "stats": {"total": 127, "additions": 125, "deletions": 2}, "files": [{"sha": "2b8d02aacabe77556f5fccb5ac06c7be4caab358", "filename": "gcc/testsuite/gcc.target/i386/pr104658.c", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca04dc8555f5fae462fbd16386da9aaf38a0711/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104658.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca04dc8555f5fae462fbd16386da9aaf38a0711/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104658.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104658.c?ref=eca04dc8555f5fae462fbd16386da9aaf38a0711", "patch": "@@ -0,0 +1,113 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fgimple -ftree-slp-vectorize -mavx512f -fdump-tree-slp2\" } */\n+\n+void __GIMPLE (ssa,guessed_local(118111600))\n+bar (int * restrict a, int * restrict e,\n+     _Bool d0, _Bool d1, _Bool d2, _Bool d3, _Bool d4, _Bool d5, _Bool d6, _Bool d7)\n+{\n+  int _1;\n+  int _4;\n+  int _6;\n+  int _8;\n+  int _10;\n+  int _12;\n+  int _14;\n+  int _16;\n+  int _27;\n+  _Bool _37;\n+  _Bool _39;\n+  _Bool _41;\n+  int _43;\n+  _Bool _45;\n+  _Bool _47;\n+  _Bool _49;\n+  _Bool _53;\n+  _Bool _54;\n+  _Bool _55;\n+  int _56;\n+  _Bool _57;\n+  _Bool _58;\n+  _Bool _59;\n+  int _60;\n+  _Bool _61;\n+  _Bool _62;\n+  _Bool _63;\n+  int _64;\n+  _Bool _65;\n+  _Bool _66;\n+  _Bool _67;\n+  int _68;\n+  _Bool _69;\n+  _Bool _70;\n+  _Bool _71;\n+  int _72;\n+  _Bool _73;\n+  _Bool _74;\n+  _Bool _75;\n+  int _76;\n+\n+  __BB(2,guessed_local(118111600)):\n+  _73 = d0_2(D);\n+  _69 = d1_5(D);\n+  _65 = d2_7(D);\n+  _61 = d3_9(D);\n+  _57 = d4_11(D);\n+  _53 = d5_13(D);\n+  _41 = d6_15(D);\n+  _49 = d7_17(D);\n+  a_81 = a_22(D);\n+  e_82 = e_23(D);\n+  _1 = __MEM <int> (a_81 + _Literal (int * restrict) 32);\n+  _4 = __MEM <int> (a_81 + _Literal (int * restrict) 36);\n+  _6 = __MEM <int> (a_81);\n+  _8 = __MEM <int> (a_81 + _Literal (int * restrict) 4);\n+  _10 = __MEM <int> (a_81 + _Literal (int * restrict) 48);\n+  _12 = __MEM <int> (a_81 + _Literal (int * restrict) 52);\n+  _14 = __MEM <int> (a_81 + _Literal (int * restrict) 16);\n+  _16 = __MEM <int> (a_81 + _Literal (int * restrict) 60);\n+  _74 = _1 != 0;\n+  _75 = _73 & _74;\n+  _76 = _75 ? _1 : 0;\n+  __MEM <int> (e_82) = _76;\n+  __MEM <int> (e_82 + _Literal (int * restrict) 4) = _76;\n+  __MEM <int> (e_82 + _Literal (int * restrict) 8) = _76;\n+  __MEM <int> (e_82 + _Literal (int * restrict) 12) = _76;\n+  __MEM <int> (e_82 + _Literal (int * restrict) 16) = _76;\n+  __MEM <int> (e_82 + _Literal (int * restrict) 20) = _76;\n+  __MEM <int> (e_82 + _Literal (int * restrict) 24) = _76;\n+  __MEM <int> (e_82 + _Literal (int * restrict) 28) = _76;\n+  __MEM <int> (e_82 + _Literal (int * restrict) 32) = _76;\n+  _70 = _4 != 0;\n+  _71 = _69 & _70;\n+  _72 = _71 ? _4 : 0;\n+  __MEM <int> (e_82 + _Literal (int * restrict) 36) = _72;\n+  _66 = _6 != 0;\n+  _67 = _65 & _66;\n+  _68 = _67 ? _6 : 0;\n+  __MEM <int> (e_82 + _Literal (int * restrict) 40) = _68;\n+  _62 = _8 != 0;\n+  _63 = _61 & _62;\n+  _64 = _63 ? _8 : 0;\n+  __MEM <int> (e_82 + _Literal (int * restrict) 44) = _64;\n+  _58 = _10 != 0;\n+  _59 = _57 & _58;\n+  _60 = _59 ? _10 : 0;\n+  __MEM <int> (e_82 + _Literal (int * restrict) 48) = _60;\n+  _54 = _12 != 0;\n+  _55 = _53 & _54;\n+  _56 = _55 ? _12 : 0;\n+  __MEM <int> (e_82 + _Literal (int * restrict) 52) = _56;\n+  _39 = _14 != 0;\n+  _37 = _39 & _41;\n+  _27 = _37 ? _14 : 0;\n+  __MEM <int> (e_82 + _Literal (int * restrict) 56) = _27;\n+  _47 = _16 != 0;\n+  _45 = _47 & _49;\n+  _43 = _45 ? _16 : 0;\n+  __MEM <int> (e_82 + _Literal (int * restrict) 60) = _43;\n+  return;\n+\n+}\n+\n+/* We do not want a AVX512 mask CTOR built from converted _Bool.  */\n+/* { dg-final { scan-tree-dump-not \" = \\\\(<signed-boolean:1>\\\\) \" \"slp2\" } } */"}, {"sha": "cdfff1ab9f6e598f8ee6eb97ae48673100c39c2d", "filename": "gcc/tree-vect-slp.cc", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca04dc8555f5fae462fbd16386da9aaf38a0711/gcc%2Ftree-vect-slp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca04dc8555f5fae462fbd16386da9aaf38a0711/gcc%2Ftree-vect-slp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.cc?ref=eca04dc8555f5fae462fbd16386da9aaf38a0711", "patch": "@@ -4532,7 +4532,9 @@ vect_slp_convert_to_external (vec_info *vinfo, slp_tree node,\n   if (!is_a <bb_vec_info> (vinfo)\n       || node == SLP_INSTANCE_TREE (node_instance)\n       || !SLP_TREE_SCALAR_STMTS (node).exists ()\n-      || vect_contains_pattern_stmt_p (SLP_TREE_SCALAR_STMTS (node)))\n+      || vect_contains_pattern_stmt_p (SLP_TREE_SCALAR_STMTS (node))\n+      /* Force the mask use to be built from scalars instead.  */\n+      || VECTOR_BOOLEAN_TYPE_P (SLP_TREE_VECTYPE (node)))\n     return false;\n \n   if (dump_enabled_p ())\n@@ -4544,6 +4546,8 @@ vect_slp_convert_to_external (vec_info *vinfo, slp_tree node,\n      (need to) ignore child nodes of anything that isn't vect_internal_def.  */\n   unsigned int group_size = SLP_TREE_LANES (node);\n   SLP_TREE_DEF_TYPE (node) = vect_external_def;\n+  /* Invariants get their vector type from the uses.  */\n+  SLP_TREE_VECTYPE (node) = NULL_TREE;\n   SLP_TREE_SCALAR_OPS (node).safe_grow (group_size, true);\n   SLP_TREE_LOAD_PERMUTATION (node).release ();\n   FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (node), i, stmt_info)\n@@ -4878,7 +4882,8 @@ vectorizable_bb_reduc_epilogue (slp_instance instance,\n     reduc_code = PLUS_EXPR;\n   internal_fn reduc_fn;\n   tree vectype = SLP_TREE_VECTYPE (SLP_INSTANCE_TREE (instance));\n-  if (!reduction_fn_for_scalar_code (reduc_code, &reduc_fn)\n+  if (!vectype\n+      || !reduction_fn_for_scalar_code (reduc_code, &reduc_fn)\n       || reduc_fn == IFN_LAST\n       || !direct_internal_fn_supported_p (reduc_fn, vectype, OPTIMIZE_FOR_BOTH)\n       || !useless_type_conversion_p (TREE_TYPE (gimple_assign_lhs (stmt)),"}, {"sha": "8327e9d047ef26a52edff3fff340c10100b33028", "filename": "gcc/tree-vect-stmts.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca04dc8555f5fae462fbd16386da9aaf38a0711/gcc%2Ftree-vect-stmts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca04dc8555f5fae462fbd16386da9aaf38a0711/gcc%2Ftree-vect-stmts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.cc?ref=eca04dc8555f5fae462fbd16386da9aaf38a0711", "patch": "@@ -11891,6 +11891,11 @@ vect_maybe_update_slp_op_vectype (slp_tree op, tree vectype)\n     return true;\n   if (SLP_TREE_VECTYPE (op))\n     return types_compatible_p (SLP_TREE_VECTYPE (op), vectype);\n+  /* For external defs refuse to produce VECTOR_BOOLEAN_TYPE_P, those\n+     should be handled by patters.  Allow vect_constant_def for now.  */\n+  if (VECTOR_BOOLEAN_TYPE_P (vectype)\n+      && SLP_TREE_DEF_TYPE (op) == vect_external_def)\n+    return false;\n   SLP_TREE_VECTYPE (op) = vectype;\n   return true;\n }"}]}