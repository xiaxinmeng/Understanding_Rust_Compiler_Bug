{"sha": "c79efc4d2a3f51f42e2b120c9536a262776f2840", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc5ZWZjNGQyYTNmNTFmNDJlMmIxMjBjOTUzNmEyNjI3NzZmMjg0MA==", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "rafael.espindola@gmail.com", "date": "2006-10-23T19:47:58Z"}, "committer": {"name": "Rafael Espindola", "email": "espindola@gcc.gnu.org", "date": "2006-10-23T19:47:58Z"}, "message": "decl.c: Include langhooks.h.\n\n       * gcc/java/decl.c: Include langhooks.h.\n       (builtin_function): Remove.\n       (java_init_decl_processing): Replace calls to builtin_function\n       with add_builtin_function.\n\n       * gcc/java/Make-lang.in (jc1$(exeext)): Depend on and link with\n       attribs.o.\n       (java/decl.o): Depend on langhooks.h.\n\n       * gcc/java/java-tree.h (builtin_function): Remove.\n\n       * gcc/tree.c (local_define_builtin): Replace calls to\n       lang_hooks.builtin_function with add_builtin_function.\n\n       * gcc/objc/objc-act.c (synth_module_prologue): Replace calls to\n       builtin_function with add_builtin_function.\n       (build_next_objc_exception_stuff): Replace calls to\n       builtin_function with add_builtin_function.\n       (build_objc_exception_stuff): Replace calls to\n       builtin_function with add_builtin_function.\n\n       * gcc/objcp/objcp-decl.h (objcp_builtin_function): Remove.\n\n       * gcc/cp/decl.c (builtin_function_1): Move common code to\n       add_builtin_function.\n       (builtin_function): Rename to cxx_builtin_function.\n       Change the signature.\n\n       * gcc/cp/call.c: Include langhooks.h.\n       (build_java_interface_fn_ref):  Replace calls to\n       builtin_function with add_builtin_function.\n\n       * gcc/cp/Make-lang.in (cp/call.o): Depend on langhooks.h.\n\n       * gcc/cp/cp-objcp-common.h (LANG_HOOKS_BUILTIN_FUNCTION): Define as\n       cxx_builtin_function.\n\n       * gcc/cp/cp-tree.h (builtin_function): Rename to cxx_builtin_function.\n       Change the signature.\n\n       * gcc/c-objc-common.h (LANG_HOOKS_BUILTIN_FUNCTION): Define as\n       c_builtin_function.\n\n       * gcc/c-tree.h (builtin_function): Rename to c_builtin_function. Change\n       the signature.\n\n       * gcc/ada/utils.c (builtin_function): Rename to gnat_builtin_function.\n       Move common code to add_builtin_function.\n\n       * gcc/ada/misc.c (LANG_HOOKS_BUILTIN_FUNCTION): Define as\n       gnat_builtin_function.\n\n       * gcc/ada/gigi.h (builtin_function): Rename to gnat_builtin_function.\n       Change the signature.\n\n       * gcc/c-decl.c (builtin_function): Rename to c_builtin_function. Move\n       common code to add_builtin_function.\n\n       * gcc/fortran/Make-lang.in (f951$(exeext)): Depend on and link with\n       attribs.o.\n\n       * gcc/fortran/trans.h (builtin_function): Rename to\n       gfc_builtin_function. Change the signature.\n\n       * gcc/fortran/f95-lang.c (LANG_HOOKS_BUILTIN_FUNCTION): Define as\n       gfc_builtin_function.\n       (builtin_function): Rename to gfc_builtin_function. Move common\n       code to builtin_function.\n       (gfc_define_builtin): Replace calls to builtin_function with\n       gfc_define_builtin.\n\n       * gcc/langhooks.c (add_builtin_function): New function.\n       (lhd_builtin_function): New function.\n\n       * gcc/langhooks.h (struct lang_hooks): Change the signature of\n       builtin_function.\n       (add_builtin_function): New function.\n\n       * gcc/treelang/treetree.c (builtin_function): Remove.\n\n       * gcc/tree-ssa-loop-prefetch.c (tree_ssa_prefetch_arrays): Replace\n       calls to lang_hooks.builtin_function with add_builtin_function.\n\n       * gcc/c-common.c (decl_builtin_1): Replace calls to\n       lang_hooks.builtin_function with add_builtin_function.\n\n       * gcc/config/alpha/alpha.c (alpha_init_builtins): Replace calls to\n       lang_hooks.builtin_function with add_builtin_function.\n\n       * gcc/config/frv/frv.c (def_builtin): Replace calls to\n       lang_hooks.builtin_function with add_builtin_function.\n\n       * gcc/config/s390/s390.c (s390_init_builtins): Replace calls to\n       lang_hooks.builtin_function with add_builtin_function.\n\n       * gcc/config/sparc/sparc.c (def_builtin): Replace calls to\n       lang_hooks.builtin_function with add_builtin_function.\n\n       * gcc/config/i386/i386.c (def_builtin): Replace calls to\n       lang_hooks.builtin_function with add_builtin_function.\n       (def_builtin): Replace calls to lang_hooks.builtin_function with\n       add_builtin_function.\n\n       * gcc/config/sh/sh.c (sh_media_init_builtins): Replace calls to\n       lang_hooks.builtin_function with add_builtin_function.\n\n       * gcc/config/c4x/c4x.c (c4x_init_builtins): Replace calls to\n       lang_hooks.builtin_function with add_builtin_function.\n\n       * gcc/config/stormy16/stormy16.c (xstormy16_init_builtins):\n       Replace calls to lang_hooks.builtin_function with\n       add_builtin_function.\n\n       * gcc/config/iq2000/iq2000.c (def_builtin):\n       Replace calls to lang_hooks.builtin_function with\n       add_builtin_function.\n\n       * gcc/config/ia64/ia64.c (def_builtin): Replace calls to\n       lang_hooks.builtin_function with add_builtin_function.\n\n       * gcc/config/rs6000/rs6000.c (def_builtin): Replace calls to\n       lang_hooks.builtin_function with add_builtin_function.\n       (altivec_init_builtins): Replace calls to\n       lang_hooks.builtin_function with add_builtin_function.\n\n       * gcc/config/arm/arm.c (def_mbuiltin): Replace calls to\n       lang_hooks.builtin_function with add_builtin_function.\n       (arm_init_tls_builtins): Replace calls to\n       lang_hooks.builtin_function with add_builtin_function.\n\n       * gcc/config/mips/mips.c (mips_init_builtins): Replace calls to\n       lang_hooks.builtin_function with add_builtin_function.\n\n       * gcc/config/bfin/bfin.c (def_builtin): Replace calls to\n       lang_hooks.builtin_function with add_builtin_function.\n\n       * gcc/langhooks-def.h (lhd_builtin_function): New function.\n       (LANG_HOOKS_BUILTIN_FUNCTION): Define as lhd_builtin_function.\n\nFrom-SVN: r117981", "tree": {"sha": "db6d791ee7b718303aa5b8c1eacfff0daaa114c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db6d791ee7b718303aa5b8c1eacfff0daaa114c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c79efc4d2a3f51f42e2b120c9536a262776f2840", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c79efc4d2a3f51f42e2b120c9536a262776f2840", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c79efc4d2a3f51f42e2b120c9536a262776f2840", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c79efc4d2a3f51f42e2b120c9536a262776f2840/comments", "author": {"login": "espindola", "id": 42633, "node_id": "MDQ6VXNlcjQyNjMz", "avatar_url": "https://avatars.githubusercontent.com/u/42633?v=4", "gravatar_id": "", "url": "https://api.github.com/users/espindola", "html_url": "https://github.com/espindola", "followers_url": "https://api.github.com/users/espindola/followers", "following_url": "https://api.github.com/users/espindola/following{/other_user}", "gists_url": "https://api.github.com/users/espindola/gists{/gist_id}", "starred_url": "https://api.github.com/users/espindola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/espindola/subscriptions", "organizations_url": "https://api.github.com/users/espindola/orgs", "repos_url": "https://api.github.com/users/espindola/repos", "events_url": "https://api.github.com/users/espindola/events{/privacy}", "received_events_url": "https://api.github.com/users/espindola/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1c2fc017ede084a3cd3e638f06525bc68c0a7ccc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c2fc017ede084a3cd3e638f06525bc68c0a7ccc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c2fc017ede084a3cd3e638f06525bc68c0a7ccc"}], "stats": {"total": 961, "additions": 466, "deletions": 495}, "files": [{"sha": "30ae215ae23ac9fa34ec816c137737bb23d03593", "filename": "gcc/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -1,3 +1,59 @@\n+2006-10-23 Rafael Avila de Espindola  <rafael.espindola@gmail.com>\n+\n+\t* tree.c (local_define_builtin): Replace calls to\n+\tlang_hooks.builtin_function with add_builtin_function.\n+\t* c-objc-common.h (LANG_HOOKS_BUILTIN_FUNCTION): Define as\n+\tc_builtin_function.\n+\t* c-tree.h (builtin_function): Rename to c_builtin_function. Change\n+\tthe signature.\n+\t* c-decl.c (builtin_function): Rename to c_builtin_function. Move\n+\tcommon code to add_builtin_function.\n+\t* langhooks.c (add_builtin_function): New function.\n+\t(lhd_builtin_function): New function.\n+\t* langhooks.h (struct lang_hooks): Change the signature of\n+\tbuiltin_function.\n+\t(add_builtin_function): New function.\n+\t* tree-ssa-loop-prefetch.c (tree_ssa_prefetch_arrays): Replace\n+\tcalls to lang_hooks.builtin_function with add_builtin_function.\n+\t* c-common.c (decl_builtin_1): Replace calls to\n+\tlang_hooks.builtin_function with add_builtin_function.\n+\t* config/alpha/alpha.c (alpha_init_builtins): Replace calls to\n+\tlang_hooks.builtin_function with add_builtin_function.\n+\t* config/frv/frv.c (def_builtin): Replace calls to\n+\tlang_hooks.builtin_function with add_builtin_function.\n+\t* config/s390/s390.c (s390_init_builtins): Replace calls to\n+\tlang_hooks.builtin_function with add_builtin_function.\n+\t* config/sparc/sparc.c (def_builtin): Replace calls to\n+\tlang_hooks.builtin_function with add_builtin_function.\n+\t* config/i386/i386.c (def_builtin): Replace calls to\n+\tlang_hooks.builtin_function with add_builtin_function.\n+\t* config/sh/sh.c (sh_media_init_builtins): Replace calls to\n+\tlang_hooks.builtin_function with add_builtin_function.\n+\t* config/c4x/c4x.c (c4x_init_builtins): Replace calls to\n+\tlang_hooks.builtin_function with add_builtin_function.\n+\t* config/stormy16/stormy16.c (xstormy16_init_builtins):\n+\tReplace calls to lang_hooks.builtin_function with\n+\tadd_builtin_function.\n+\t* config/iq2000/iq2000.c (def_builtin):\n+\tReplace calls to lang_hooks.builtin_function with\n+\tadd_builtin_function.\n+\t* config/ia64/ia64.c (def_builtin): Replace calls to\n+\tlang_hooks.builtin_function with add_builtin_function.\n+\t* config/rs6000/rs6000.c (def_builtin): Replace calls to\n+\tlang_hooks.builtin_function with add_builtin_function.\n+\t(altivec_init_builtins): Replace calls to\n+\tlang_hooks.builtin_function with add_builtin_function.\n+\t* config/arm/arm.c (def_mbuiltin): Replace calls to\n+\tlang_hooks.builtin_function with add_builtin_function.\n+\t(arm_init_tls_builtins): Replace calls to\n+\tlang_hooks.builtin_function with add_builtin_function.\n+\t* config/mips/mips.c (mips_init_builtins): Replace calls to\n+\tlang_hooks.builtin_function with add_builtin_function.\n+\t* config/bfin/bfin.c (def_builtin): Replace calls to\n+\tlang_hooks.builtin_function with add_builtin_function.\n+\t* langhooks-def.h (lhd_builtin_function): New function.\n+\t(LANG_HOOKS_BUILTIN_FUNCTION): Define as lhd_builtin_function.\n+\n 2006-10-23  Jakub Jelinek  <jakub@redhat.com>\n \n \t* builtins.c (expand_builtin, maybe_emit_chk_warning): Handle"}, {"sha": "3d3aaef09c8e893bc511c1e306b4817217ff8e18", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -1,3 +1,11 @@\n+2006-10-23 Rafael Avila de Espindola  <rafael.espindola@gmail.com>\n+\t* utils.c (builtin_function): Rename to gnat_builtin_function.\n+\tMove common code to add_builtin_function.\n+\t* misc.c (LANG_HOOKS_BUILTIN_FUNCTION): Define as\n+\tgnat_builtin_function.\n+\t* gigi.h (builtin_function): Rename to gnat_builtin_function.\n+\tChange the signature.\n+\n 2006-10-16  Brooks Moses  <bmoses@stanford.edu>\n \n \t* Makefile.in: Add TEXI2PDF definition."}, {"sha": "10a701234fca77482c8283cd5ed80ca81b403524", "filename": "gcc/ada/gigi.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fada%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fada%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgigi.h?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -764,9 +764,7 @@ extern tree fill_vms_descriptor (tree expr, Entity_Id gnat_formal);\n extern bool gnat_mark_addressable (tree expr_node);\n \n /* Implementation of the builtin_function langhook.  */\n-extern tree builtin_function (const char *name, tree type, int function_code,\n-                              enum built_in_class class,\n-\t\t\t      const char *library_name, tree attrs);\n+extern tree gnat_builtin_function (tree decl);\n \n /* Search the chain of currently reachable declarations for a builtin\n    FUNCTION_DECL node corresponding to function NAME (an IDENTIFIER_NODE)."}, {"sha": "748621a1f69e28c5561284d2cd82103e6a01c71d", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -163,6 +163,8 @@ static tree gnat_type_max_size\t\t(tree);\n #define LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE gnat_signed_or_unsigned_type\n #undef  LANG_HOOKS_ATTRIBUTE_TABLE\n #define LANG_HOOKS_ATTRIBUTE_TABLE\tgnat_internal_attribute_table\n+#undef  LANG_HOOKS_BUILTIN_FUNCTION\n+#define LANG_HOOKS_BUILTIN_FUNCTION        gnat_builtin_function\n \n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n "}, {"sha": "5d4f9ede985841ccb8a66927989cd073b340a71d", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -1821,37 +1821,11 @@ gnat_gimplify_function (tree fndecl)\n     gnat_gimplify_function (cgn->decl);\n }\n \f\n-/* Return a definition for a builtin function named NAME and whose data type\n-   is TYPE.  TYPE should be a function type with argument types.\n-   FUNCTION_CODE tells later passes how to compile calls to this function.\n-   See tree.h for its possible values.\n-\n-   If LIBRARY_NAME is nonzero, use that for DECL_ASSEMBLER_NAME,\n-   the name to be called if we can't opencode the function.  If\n-   ATTRS is nonzero, use that for the function attribute list.  */\n \n tree\n-builtin_function (const char *name, tree type, int function_code,\n-                  enum built_in_class class, const char *library_name,\n-                  tree attrs)\n+gnat_builtin_function (tree decl)\n {\n-  tree decl = build_decl (FUNCTION_DECL, get_identifier (name), type);\n-\n-  DECL_EXTERNAL (decl) = 1;\n-  TREE_PUBLIC (decl) = 1;\n-  if (library_name)\n-    SET_DECL_ASSEMBLER_NAME (decl, get_identifier (library_name));\n-\n   gnat_pushdecl (decl, Empty);\n-  DECL_BUILT_IN_CLASS (decl) = class;\n-  DECL_FUNCTION_CODE (decl) = function_code;\n-\n-  /* Possibly apply some default attributes to this built-in function.  */\n-  if (attrs)\n-    decl_attributes (&decl, attrs, ATTR_FLAG_BUILT_IN);\n-  else\n-    decl_attributes (&decl, NULL_TREE, 0);\n-\n   return decl;\n }\n "}, {"sha": "e51de2d734161f63899e10d704a5491793caf074", "filename": "gcc/c-common.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -3495,14 +3495,14 @@ def_builtin_1 (enum built_in_function fncode,\n \t\t\t   strlen (\"__builtin_\")));\n \n   libname = name + strlen (\"__builtin_\");\n-  decl = lang_hooks.builtin_function (name, fntype, fncode, fnclass,\n-\t\t\t\t      (fallback_p ? libname : NULL),\n-\t\t\t\t      fnattrs);\n+  decl = add_builtin_function (name, fntype, fncode, fnclass,\n+\t\t\t       (fallback_p ? libname : NULL),\n+\t\t\t       fnattrs);\n   if (both_p\n       && !flag_no_builtin && !builtin_function_disabled_p (libname)\n       && !(nonansi_p && flag_no_nonansi_builtin))\n-    lang_hooks.builtin_function (libname, libtype, fncode, fnclass,\n-\t\t\t\t NULL, fnattrs);\n+    add_builtin_function (libname, libtype, fncode, fnclass,\n+\t\t\t  NULL, fnattrs);\n \n   built_in_decls[(int) fncode] = decl;\n   if (implicit_p)"}, {"sha": "e740fcac9172c128bc9ef1e77702739e0402aff1", "filename": "gcc/c-decl.c", "status": "modified", "additions": 5, "deletions": 26, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -2812,30 +2812,15 @@ c_make_fname_decl (tree id, int type_dep)\n   return decl;\n }\n \n-/* Return a definition for a builtin function named NAME and whose data type\n-   is TYPE.  TYPE should be a function type with argument types.\n-   FUNCTION_CODE tells later passes how to compile calls to this function.\n-   See tree.h for its possible values.\n-\n-   If LIBRARY_NAME is nonzero, use that for DECL_ASSEMBLER_NAME,\n-   the name to be called if we can't opencode the function.  If\n-   ATTRS is nonzero, use that for the function's attribute list.  */\n-\n tree\n-builtin_function (const char *name, tree type, int function_code,\n-\t\t  enum built_in_class cl, const char *library_name,\n-\t\t  tree attrs)\n+c_builtin_function (tree decl)\n {\n-  tree id = get_identifier (name);\n-  tree decl = build_decl (FUNCTION_DECL, id, type);\n-  TREE_PUBLIC (decl) = 1;\n-  DECL_EXTERNAL (decl) = 1;\n+  tree type = TREE_TYPE (decl);\n+  tree   id = DECL_NAME (decl);\n+\n+  const char *name = IDENTIFIER_POINTER (id);\n   DECL_LANG_SPECIFIC (decl) = GGC_CNEW (struct lang_decl);\n-  DECL_BUILT_IN_CLASS (decl) = cl;\n-  DECL_FUNCTION_CODE (decl) = function_code;\n   C_DECL_BUILTIN_PROTOTYPE (decl) = (TYPE_ARG_TYPES (type) != 0);\n-  if (library_name)\n-    SET_DECL_ASSEMBLER_NAME (decl, get_identifier (library_name));\n \n   /* Should never be called on a symbol with a preexisting meaning.  */\n   gcc_assert (!I_SYMBOL_BINDING (id));\n@@ -2850,12 +2835,6 @@ builtin_function (const char *name, tree type, int function_code,\n       visible_builtins = decl;\n     }\n \n-  /* Possibly apply some default attributes to this built-in function.  */\n-  if (attrs)\n-    decl_attributes (&decl, attrs, ATTR_FLAG_BUILT_IN);\n-  else\n-    decl_attributes (&decl, NULL_TREE, 0);\n-\n   return decl;\n }\n \f"}, {"sha": "f3f0867e958b23ca61214895449c50b27d802902", "filename": "gcc/c-objc-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fc-objc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fc-objc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.h?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -74,6 +74,8 @@ extern void c_initialize_diagnostics (diagnostic_context *);\n #define LANG_HOOKS_FUNCTION_MISSING_NORETURN_OK_P c_missing_noreturn_ok_p\n #undef LANG_HOOKS_DUP_LANG_SPECIFIC_DECL\n #define LANG_HOOKS_DUP_LANG_SPECIFIC_DECL c_dup_lang_specific_decl\n+#undef  LANG_HOOKS_BUILTIN_FUNCTION\n+#define LANG_HOOKS_BUILTIN_FUNCTION c_builtin_function\n \n /* Attribute hooks.  */\n #undef LANG_HOOKS_COMMON_ATTRIBUTE_TABLE"}, {"sha": "4bc4928ff1d3420eb3b5dc4528e1dc0fe5deac38", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -474,8 +474,7 @@ extern void push_parm_decl (const struct c_parm *);\n extern struct c_declarator *set_array_declarator_inner (struct c_declarator *,\n \t\t\t\t\t\t\tstruct c_declarator *,\n \t\t\t\t\t\t\tbool);\n-extern tree builtin_function (const char *, tree, int, enum built_in_class,\n-\t\t\t      const char *, tree);\n+extern tree c_builtin_function (tree);\n extern void shadow_tag (const struct c_declspecs *);\n extern void shadow_tag_warned (const struct c_declspecs *, int);\n extern tree start_enum (tree);"}, {"sha": "88fed9266f44ee8bfcf07437fdd4f0a238645762", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -6523,17 +6523,17 @@ alpha_init_builtins (void)\n   p = zero_arg_builtins;\n   for (i = 0; i < ARRAY_SIZE (zero_arg_builtins); ++i, ++p)\n     if ((target_flags & p->target_mask) == p->target_mask)\n-      lang_hooks.builtin_function (p->name, ftype, p->code, BUILT_IN_MD,\n-\t\t\t\t   NULL, attrs[p->is_const]);\n+      add_builtin_function (p->name, ftype, p->code, BUILT_IN_MD,\n+\t\t\t    NULL, attrs[p->is_const]);\n \n   ftype = build_function_type_list (dimode_integer_type_node,\n \t\t\t\t    dimode_integer_type_node, NULL_TREE);\n \n   p = one_arg_builtins;\n   for (i = 0; i < ARRAY_SIZE (one_arg_builtins); ++i, ++p)\n     if ((target_flags & p->target_mask) == p->target_mask)\n-      lang_hooks.builtin_function (p->name, ftype, p->code, BUILT_IN_MD,\n-\t\t\t\t   NULL, attrs[p->is_const]);\n+      add_builtin_function (p->name, ftype, p->code, BUILT_IN_MD,\n+\t\t\t    NULL, attrs[p->is_const]);\n \n   ftype = build_function_type_list (dimode_integer_type_node,\n \t\t\t\t    dimode_integer_type_node,\n@@ -6542,18 +6542,18 @@ alpha_init_builtins (void)\n   p = two_arg_builtins;\n   for (i = 0; i < ARRAY_SIZE (two_arg_builtins); ++i, ++p)\n     if ((target_flags & p->target_mask) == p->target_mask)\n-      lang_hooks.builtin_function (p->name, ftype, p->code, BUILT_IN_MD,\n-\t\t\t\t   NULL, attrs[p->is_const]);\n+      add_builtin_function (p->name, ftype, p->code, BUILT_IN_MD,\n+\t\t\t    NULL, attrs[p->is_const]);\n \n   ftype = build_function_type (ptr_type_node, void_list_node);\n-  lang_hooks.builtin_function (\"__builtin_thread_pointer\", ftype,\n-\t\t\t       ALPHA_BUILTIN_THREAD_POINTER, BUILT_IN_MD,\n-\t\t\t       NULL, attrs[0]);\n+  add_builtin_function (\"__builtin_thread_pointer\", ftype,\n+\t\t\tALPHA_BUILTIN_THREAD_POINTER, BUILT_IN_MD,\n+\t\t\tNULL, attrs[0]);\n \n   ftype = build_function_type_list (void_type_node, ptr_type_node, NULL_TREE);\n-  lang_hooks.builtin_function (\"__builtin_set_thread_pointer\", ftype,\n-\t\t\t       ALPHA_BUILTIN_SET_THREAD_POINTER, BUILT_IN_MD,\n-\t\t\t       NULL, attrs[0]);\n+  add_builtin_function (\"__builtin_set_thread_pointer\", ftype,\n+\t\t\tALPHA_BUILTIN_SET_THREAD_POINTER, BUILT_IN_MD,\n+\t\t\tNULL, attrs[0]);\n \n   alpha_v8qi_u = build_vector_type (unsigned_intQI_type_node, 8);\n   alpha_v8qi_s = build_vector_type (intQI_type_node, 8);"}, {"sha": "1d646c7269200d7e0331c308c9462c6b52495989", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -12060,8 +12060,8 @@ arm_debugger_arg_offset (int value, rtx addr)\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       if ((MASK) & insn_flags)\t\t\t\t\t\t\\\n-        lang_hooks.builtin_function ((NAME), (TYPE), (CODE),\t\t\\\n-\t\t\t\t     BUILT_IN_MD, NULL, NULL_TREE);\t\\\n+        add_builtin_function ((NAME), (TYPE), (CODE),\t\t\t\\\n+\t\t\t     BUILT_IN_MD, NULL, NULL_TREE);\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n@@ -12533,9 +12533,9 @@ arm_init_tls_builtins (void)\n   tree const_nothrow = tree_cons (get_identifier (\"const\"), NULL, nothrow);\n \n   ftype = build_function_type (ptr_type_node, void_list_node);\n-  lang_hooks.builtin_function (\"__builtin_thread_pointer\", ftype,\n-\t\t\t       ARM_BUILTIN_THREAD_POINTER, BUILT_IN_MD,\n-\t\t\t       NULL, const_nothrow);\n+  add_builtin_function (\"__builtin_thread_pointer\", ftype,\n+\t\t\tARM_BUILTIN_THREAD_POINTER, BUILT_IN_MD,\n+\t\t\tNULL, const_nothrow);\n }\n \n static void"}, {"sha": "fd056a2545c9321cf2ae3da28d5b6aeff6027d68", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -3915,8 +3915,8 @@ enum bfin_builtins\n \n #define def_builtin(NAME, TYPE, CODE)\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  lang_hooks.builtin_function ((NAME), (TYPE), (CODE), BUILT_IN_MD,\t\\\n-\t\t\t       NULL, NULL_TREE);\t\t\t\\\n+  add_builtin_function ((NAME), (TYPE), (CODE), BUILT_IN_MD,\t\t\\\n+\t\t       NULL, NULL_TREE);\t\t\t\t\\\n } while (0)\n \n /* Set up all builtin functions for this target.  */"}, {"sha": "6e831c73923a2f495405daece15632bec8942edc", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -4339,52 +4339,52 @@ c4x_init_builtins (void)\n {\n   tree endlink = void_list_node;\n \n-  lang_hooks.builtin_function (\"fast_ftoi\",\n-\t\t\t       build_function_type \n-\t\t\t       (integer_type_node,\n-\t\t\t\ttree_cons (NULL_TREE, double_type_node,\n-\t\t\t\t\t   endlink)),\n-\t\t\t       C4X_BUILTIN_FIX, BUILT_IN_MD, NULL, NULL_TREE);\n-  lang_hooks.builtin_function (\"ansi_ftoi\",\n-\t\t\t       build_function_type \n-\t\t\t       (integer_type_node, \n-\t\t\t\ttree_cons (NULL_TREE, double_type_node,\n-\t\t\t\t\t   endlink)),\n-\t\t\t       C4X_BUILTIN_FIX_ANSI, BUILT_IN_MD, NULL,\n-\t\t\t       NULL_TREE);\n+  add_builtin_function (\"fast_ftoi\",\n+\t\t\tbuild_function_type \n+\t\t\t(integer_type_node,\n+\t\t\t tree_cons (NULL_TREE, double_type_node,\n+\t\t\t\t    endlink)),\n+\t\t\tC4X_BUILTIN_FIX, BUILT_IN_MD, NULL, NULL_TREE);\n+  add_builtin_function (\"ansi_ftoi\",\n+\t\t\tbuild_function_type \n+\t\t\t(integer_type_node, \n+\t\t\t tree_cons (NULL_TREE, double_type_node,\n+\t\t\t\t    endlink)),\n+\t\t\tC4X_BUILTIN_FIX_ANSI, BUILT_IN_MD, NULL,\n+\t\t\tNULL_TREE);\n   if (TARGET_C3X)\n-    lang_hooks.builtin_function (\"fast_imult\",\n-\t\t\t\t build_function_type\n-\t\t\t\t (integer_type_node, \n-\t\t\t\t  tree_cons (NULL_TREE, integer_type_node,\n-\t\t\t\t\t     tree_cons (NULL_TREE,\n-\t\t\t\t\t\t\tinteger_type_node,\n-\t\t\t\t\t\t\tendlink))),\n-\t\t\t\t C4X_BUILTIN_MPYI, BUILT_IN_MD, NULL,\n-\t\t\t\t NULL_TREE);\n+    add_builtin_function (\"fast_imult\",\n+\t\t\t  build_function_type\n+\t\t\t  (integer_type_node, \n+\t\t\t   tree_cons (NULL_TREE, integer_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE,\n+\t\t\t\t\t\t integer_type_node,\n+\t\t\t\t\t\t endlink))),\n+\t\t\t  C4X_BUILTIN_MPYI, BUILT_IN_MD, NULL,\n+\t\t\t  NULL_TREE);\n   else\n     {\n-      lang_hooks.builtin_function (\"toieee\",\n-\t\t\t\t   build_function_type \n-\t\t\t\t   (double_type_node,\n-\t\t\t\t    tree_cons (NULL_TREE, double_type_node,\n-\t\t\t\t\t       endlink)),\n-\t\t\t\t   C4X_BUILTIN_TOIEEE, BUILT_IN_MD, NULL,\n-\t\t\t\t   NULL_TREE);\n-      lang_hooks.builtin_function (\"frieee\",\n-\t\t\t\t   build_function_type\n-\t\t\t\t   (double_type_node, \n-\t\t\t\t    tree_cons (NULL_TREE, double_type_node,\n-\t\t\t\t\t       endlink)),\n-\t\t\t\t   C4X_BUILTIN_FRIEEE, BUILT_IN_MD, NULL,\n-\t\t\t\t   NULL_TREE);\n-      lang_hooks.builtin_function (\"fast_invf\",\n-\t\t\t\t   build_function_type \n-\t\t\t\t   (double_type_node, \n-\t\t\t\t    tree_cons (NULL_TREE, double_type_node,\n-\t\t\t\t\t       endlink)),\n-\t\t\t\t   C4X_BUILTIN_RCPF, BUILT_IN_MD, NULL,\n-\t\t\t\t   NULL_TREE);\n+      add_builtin_function (\"toieee\",\n+\t\t\t    build_function_type \n+\t\t\t    (double_type_node,\n+\t\t\t     tree_cons (NULL_TREE, double_type_node,\n+\t\t\t\t\tendlink)),\n+\t\t\t    C4X_BUILTIN_TOIEEE, BUILT_IN_MD, NULL,\n+\t\t\t    NULL_TREE);\n+      add_builtin_function (\"frieee\",\n+\t\t\t    build_function_type\n+\t\t\t    (double_type_node, \n+\t\t\t     tree_cons (NULL_TREE, double_type_node,\n+\t\t\t\t\tendlink)),\n+\t\t\t    C4X_BUILTIN_FRIEEE, BUILT_IN_MD, NULL,\n+\t\t\t    NULL_TREE);\n+      add_builtin_function (\"fast_invf\",\n+\t\t\t    build_function_type \n+\t\t\t    (double_type_node, \n+\t\t\t     tree_cons (NULL_TREE, double_type_node,\n+\t\t\t\t\tendlink)),\n+\t\t\t    C4X_BUILTIN_RCPF, BUILT_IN_MD, NULL,\n+\t\t\t    NULL_TREE);\n     }\n }\n "}, {"sha": "d7e06137fec2773d4f3b8f9982ce27c44fbe75d8", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -8148,7 +8148,7 @@ frv_reorg (void)\n }\n \f\n #define def_builtin(name, type, code) \\\n-  lang_hooks.builtin_function ((name), (type), (code), BUILT_IN_MD, NULL, NULL)\n+  add_builtin_function ((name), (type), (code), BUILT_IN_MD, NULL, NULL)\n \n struct builtin_description\n {"}, {"sha": "d3223a405ec99602a004afb0ddb2e8e40d889b68", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -14536,8 +14536,8 @@ enum ix86_builtins\n do {\t\t\t\t\t\t\t\t\t\\\n   if ((MASK) & target_flags\t\t\t\t\t\t\\\n       && (!((MASK) & MASK_64BIT) || TARGET_64BIT))\t\t\t\\\n-    lang_hooks.builtin_function ((NAME), (TYPE), (CODE), BUILT_IN_MD,\t\\\n-\t\t\t\t NULL, NULL_TREE);\t\t\t\\\n+    add_builtin_function ((NAME), (TYPE), (CODE), BUILT_IN_MD,\t\\\n+\t\t\t NULL, NULL_TREE);\t\t\t\\\n } while (0)\n \n /* Bits for builtin_description.flag.  */"}, {"sha": "418f9a13a8e200399354be7bd018e7e3f4f71b12", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -9114,8 +9114,8 @@ ia64_init_builtins (void)\n \t\t\t\t\t       \"__float128\");\n \n #define def_builtin(name, type, code)\t\t\t\t\t\\\n-  lang_hooks.builtin_function ((name), (type), (code), BUILT_IN_MD,\t\\\n-\t\t\t       NULL, NULL_TREE)\n+  add_builtin_function ((name), (type), (code), BUILT_IN_MD,\t\\\n+\t\t       NULL, NULL_TREE)\n \n   def_builtin (\"__builtin_ia64_bsp\",\n \t       build_function_type (ptr_type_node, void_list_node),"}, {"sha": "42b7c17669394920d5810152db4d37f73636b304", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -2436,8 +2436,8 @@ iq2000_output_conditional_branch (rtx insn, rtx * operands, int two_operands_p,\n }\n \n #define def_builtin(NAME, TYPE, CODE)\t\t\t\t\t\\\n-  lang_hooks.builtin_function ((NAME), (TYPE), (CODE), BUILT_IN_MD,\t\\\n-\t\t\t       NULL, NULL_TREE)\n+  add_builtin_function ((NAME), (TYPE), (CODE), BUILT_IN_MD,\t\\\n+\t\t       NULL, NULL_TREE)\n \n static void\n iq2000_init_builtins (void)"}, {"sha": "ea5ec26f45b572306484ba0d5549cf2afd6df404", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -10603,9 +10603,9 @@ mips_init_builtins (void)\n       if (m->proc == PROCESSOR_MAX || (m->proc == mips_arch))\n \tfor (d = m->bdesc; d < &m->bdesc[m->size]; d++)\n \t  if ((d->target_flags & target_flags) == d->target_flags)\n-\t    lang_hooks.builtin_function (d->name, types[d->function_type],\n-\t\t\t\t\t d - m->bdesc + offset,\n-\t\t\t\t\t BUILT_IN_MD, NULL, NULL);\n+\t    add_builtin_function (d->name, types[d->function_type],\n+\t\t\t\t  d - m->bdesc + offset,\n+\t\t\t\t  BUILT_IN_MD, NULL, NULL);\n       offset += m->size;\n     }\n }"}, {"sha": "5d4b889e6d746f01c74e3a34b5f50f9df6edcd0b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -6053,8 +6053,8 @@ def_builtin (int mask, const char *name, tree type, int code)\n \tabort ();\n \n       rs6000_builtin_decls[code] =\n-        lang_hooks.builtin_function (name, type, code, BUILT_IN_MD,\n-\t\t\t\t     NULL, NULL_TREE);\n+        add_builtin_function (name, type, code, BUILT_IN_MD,\n+\t\t\t      NULL, NULL_TREE);\n     }\n }\n \n@@ -8578,12 +8578,12 @@ altivec_init_builtins (void)\n       /* Initialize target builtin that implements\n          targetm.vectorize.builtin_mask_for_load.  */\n \n-      decl = lang_hooks.builtin_function (\"__builtin_altivec_mask_for_load\",\n-                               v16qi_ftype_long_pcvoid,\n-                               ALTIVEC_BUILTIN_MASK_FOR_LOAD,\n-                               BUILT_IN_MD, NULL,\n-                               tree_cons (get_identifier (\"const\"),\n-                                          NULL_TREE, NULL_TREE));\n+      decl = add_builtin_function (\"__builtin_altivec_mask_for_load\",\n+\t\t\t\t   v16qi_ftype_long_pcvoid,\n+\t\t\t\t   ALTIVEC_BUILTIN_MASK_FOR_LOAD,\n+\t\t\t\t   BUILT_IN_MD, NULL,\n+\t\t\t\t   tree_cons (get_identifier (\"const\"),\n+\t\t\t\t\t      NULL_TREE, NULL_TREE));\n       /* Record the decl. Will be used by rs6000_builtin_mask_for_load.  */\n       altivec_builtin_mask_for_load = decl;\n     }"}, {"sha": "3fd36383cbb18917d1f4f0301042d3fd9766fa31", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -8169,14 +8169,14 @@ s390_init_builtins (void)\n   tree ftype;\n \n   ftype = build_function_type (ptr_type_node, void_list_node);\n-  lang_hooks.builtin_function (\"__builtin_thread_pointer\", ftype,\n-\t\t\t       S390_BUILTIN_THREAD_POINTER, BUILT_IN_MD,\n-\t\t\t       NULL, NULL_TREE);\n+  add_builtin_function (\"__builtin_thread_pointer\", ftype,\n+\t\t\tS390_BUILTIN_THREAD_POINTER, BUILT_IN_MD,\n+\t\t\tNULL, NULL_TREE);\n \n   ftype = build_function_type_list (void_type_node, ptr_type_node, NULL_TREE);\n-  lang_hooks.builtin_function (\"__builtin_set_thread_pointer\", ftype,\n-\t\t\t       S390_BUILTIN_SET_THREAD_POINTER, BUILT_IN_MD,\n-\t\t\t       NULL, NULL_TREE);\n+  add_builtin_function (\"__builtin_set_thread_pointer\", ftype,\n+\t\t\tS390_BUILTIN_SET_THREAD_POINTER, BUILT_IN_MD,\n+\t\t\tNULL, NULL_TREE);\n }\n \n /* Expand an expression EXP that calls a built-in function,"}, {"sha": "30b87480412bc30ed166a520a0a1fe77a2174bfc", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -9476,8 +9476,8 @@ sh_media_init_builtins (void)\n \t  if (signature < SH_BLTIN_NUM_SHARED_SIGNATURES)\n \t    shared[signature] = type;\n \t}\n-      lang_hooks.builtin_function (d->name, type, d - bdesc, BUILT_IN_MD,\n-\t\t\t\t   NULL, NULL_TREE);\n+      add_builtin_function (d->name, type, d - bdesc, BUILT_IN_MD,\n+\t\t\t    NULL, NULL_TREE);\n     }\n }\n "}, {"sha": "7ee5bcd39b5a9917dd7a1fb9344b17cd76614a01", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -7868,8 +7868,8 @@ sparc_init_libfuncs (void)\n }\n \f\n #define def_builtin(NAME, CODE, TYPE) \\\n-  lang_hooks.builtin_function((NAME), (TYPE), (CODE), BUILT_IN_MD, NULL, \\\n-                              NULL_TREE)\n+  add_builtin_function((NAME), (TYPE), (CODE), BUILT_IN_MD, NULL, \\\n+                       NULL_TREE)\n \n /* Implement the TARGET_INIT_BUILTINS target hook.\n    Create builtin functions for special SPARC instructions.  */"}, {"sha": "04617f577299bf0e0bbef638b96893c4c2b8faa2", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -2334,9 +2334,9 @@ xstormy16_init_builtins (void)\n \t  else\n \t    args = tree_cons (NULL_TREE, arg, args);\n \t}\n-      lang_hooks.builtin_function (s16builtins[i].name,\n-\t\t\t\t   build_function_type (ret_type, args),\n-\t\t\t\t   i, BUILT_IN_MD, NULL, NULL);\n+      add_builtin_function (s16builtins[i].name,\n+\t\t\t    build_function_type (ret_type, args),\n+\t\t\t    i, BUILT_IN_MD, NULL, NULL);\n     }\n }\n "}, {"sha": "0ea7e09219528b82049326a949d7b717965a274a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -1,3 +1,18 @@\n+2006-10-23 Rafael Avila de Espindola  <rafael.espindola@gmail.com>\n+\n+\t* decl.c (builtin_function_1): Move common code to\n+\tadd_builtin_function.\n+\t(builtin_function): Rename to cxx_builtin_function.\n+\tChange the signature.\n+\t* call.c: Include langhooks.h.\n+\t(build_java_interface_fn_ref):  Replace calls to\n+\tbuiltin_function with add_builtin_function.\n+\t* Make-lang.in (cp/call.o): Depend on langhooks.h.\n+\t* cp-objcp-common.h (LANG_HOOKS_BUILTIN_FUNCTION): Define as\n+\tcxx_builtin_function.\n+\t* cp-tree.h (builtin_function): Rename to cxx_builtin_function.\n+\tChange the signature.\n+\n 2006-10-22  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/20647"}, {"sha": "db095cea2cf20a72234e9d6d7a58ab61ddbe2d9f", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -250,7 +250,7 @@ cp/typeck.o: cp/typeck.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) $(RTL_H) $(EXPR_H) \\\n cp/class.o: cp/class.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) toplev.h $(RTL_H) \\\n   $(TARGET_H) convert.h $(CGRAPH_H) $(TREE_DUMP_H)\n cp/call.o: cp/call.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) toplev.h $(RTL_H) \\\n-  $(EXPR_H) $(DIAGNOSTIC_H) intl.h gt-cp-call.h convert.h $(TARGET_H)\n+  $(EXPR_H) $(DIAGNOSTIC_H) intl.h gt-cp-call.h convert.h $(TARGET_H) langhooks.h\n cp/friend.o: cp/friend.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) $(RTL_H) toplev.h \\\n   $(EXPR_H)\n cp/init.o: cp/init.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) $(RTL_H) $(EXPR_H) \\"}, {"sha": "79a2c4a8346fd996bb95bfef5fbaa9528f0eacf2", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -39,6 +39,7 @@ Boston, MA 02110-1301, USA.  */\n #include \"intl.h\"\n #include \"target.h\"\n #include \"convert.h\"\n+#include \"langhooks.h\"\n \n /* The various kinds of conversion.  */\n \n@@ -5065,9 +5066,9 @@ build_java_interface_fn_ref (tree fn, tree instance)\n \t\t\t\t     tree_cons (NULL_TREE, java_int_type_node,\n \t\t\t\t\t\tendlink)));\n       java_iface_lookup_fn\n-\t= builtin_function (\"_Jv_LookupInterfaceMethodIdx\",\n-\t\t\t    build_function_type (ptr_type_node, t),\n-\t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n+\t= add_builtin_function (\"_Jv_LookupInterfaceMethodIdx\",\n+\t\t\t\tbuild_function_type (ptr_type_node, t),\n+\t\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n     }\n \n   /* Look up the pointer to the runtime java.lang.Class object for `instance'."}, {"sha": "5424d77ae87554d764c78127f220cdd2581229e0", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -87,6 +87,8 @@ extern tree objcp_tsubst_copy_and_build (tree, tree, tsubst_flags_t,\n #define LANG_HOOKS_WRITE_GLOBALS lhd_do_nothing\n #undef LANG_HOOKS_COMDAT_GROUP\n #define LANG_HOOKS_COMDAT_GROUP cxx_comdat_group\n+#undef  LANG_HOOKS_BUILTIN_FUNCTION\n+#define LANG_HOOKS_BUILTIN_FUNCTION cxx_builtin_function\n \n #undef LANG_HOOKS_FUNCTION_INIT\n #define LANG_HOOKS_FUNCTION_INIT cxx_push_function_context"}, {"sha": "a8fa8a7e1fa60568042d8a5b40d93128177fb0bb", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -3942,11 +3942,7 @@ extern int nonstatic_local_decl_p\t\t(tree);\n extern tree register_dtor_fn\t\t\t(tree);\n extern tmpl_spec_kind current_tmpl_spec_kind\t(int);\n extern tree cp_fname_init\t\t\t(const char *, tree *);\n-extern tree builtin_function\t\t\t(const char *name, tree type,\n-\t\t\t\t\t\t int code,\n-\t\t\t\t\t\t enum built_in_class cl,\n-\t\t\t\t\t\t const char *libname,\n-\t\t\t\t\t\t tree attrs);\n+extern tree cxx_builtin_function\t\t(tree decl);\n extern tree check_elaborated_type_specifier\t(enum tag_types, tree, bool);\n extern void warn_extern_redeclared_static\t(tree, tree);\n extern const char *cxx_comdat_group\t\t(tree);"}, {"sha": "17b209a1f14a87ee3ef02a369c907c38b7bd0d20", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 24, "deletions": 62, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -64,10 +64,7 @@ static tree grok_reference_init (tree, tree, tree, tree *);\n static tree grokvardecl (tree, tree, const cp_decl_specifier_seq *,\n \t\t\t int, int, tree);\n static void record_unknown_type (tree, const char *);\n-static tree builtin_function_1 (const char *, tree, tree,\n-\t\t\t\tenum built_in_function code,\n-\t\t\t\tenum built_in_class cl, const char *,\n-\t\t\t\ttree);\n+static tree builtin_function_1 (tree, tree);\n static tree build_library_fn_1 (tree, enum tree_code, tree);\n static int member_function_or_else (tree, tree, enum overload_flags);\n static void bad_specifiers (tree, const char *, int, int, int, int,\n@@ -3359,90 +3356,55 @@ cp_make_fname_decl (tree id, int type_dep)\n   return decl;\n }\n \n-/* Make a definition for a builtin function named NAME in the current\n-   namespace, whose data type is TYPE and whose context is CONTEXT.\n-   TYPE should be a function type with argument types.\n+static tree\n+builtin_function_1 (tree decl, tree context)\n+{\n+  tree          id = DECL_NAME (decl);\n+  const char *name = IDENTIFIER_POINTER (id);\n \n-   CLASS and CODE tell later passes how to compile calls to this function.\n-   See tree.h for possible values.\n+  retrofit_lang_decl (decl);\n \n-   If LIBNAME is nonzero, use that for DECL_ASSEMBLER_NAME,\n-   the name to be called if we can't opencode the function.\n-   If ATTRS is nonzero, use that for the function's attribute\n-   list.  */\n+  /* All nesting of C++ functions is lexical; there is never a \"static\n+     chain\" in the sense of GNU C nested functions.  */\n+  DECL_NO_STATIC_CHAIN (decl) = 1;\n+\n+  DECL_ARTIFICIAL (decl) = 1;\n+  SET_OVERLOADED_OPERATOR_CODE (decl, ERROR_MARK);\n+  SET_DECL_LANGUAGE (decl, lang_c);\n+  /* Runtime library routines are, by definition, available in an\n+     external shared object.  */\n+  DECL_VISIBILITY (decl) = VISIBILITY_DEFAULT;\n+  DECL_VISIBILITY_SPECIFIED (decl) = 1;\n \n-static tree\n-builtin_function_1 (const char* name,\n-\t\t    tree type,\n-\t\t    tree context,\n-\t\t    enum built_in_function code,\n-\t\t    enum built_in_class class,\n-\t\t    const char* libname,\n-\t\t    tree attrs)\n-{\n-  tree decl = build_library_fn_1 (get_identifier (name), ERROR_MARK, type);\n-  DECL_BUILT_IN_CLASS (decl) = class;\n-  DECL_FUNCTION_CODE (decl) = code;\n   DECL_CONTEXT (decl) = context;\n \n   pushdecl (decl);\n \n-  /* Since `pushdecl' relies on DECL_ASSEMBLER_NAME instead of DECL_NAME,\n-     we cannot change DECL_ASSEMBLER_NAME until we have installed this\n-     function in the namespace.  */\n-  if (libname)\n-    SET_DECL_ASSEMBLER_NAME (decl, get_identifier (libname));\n-\n   /* A function in the user's namespace should have an explicit\n      declaration before it is used.  Mark the built-in function as\n      anticipated but not actually declared.  */\n   if (name[0] != '_' || name[1] != '_')\n     DECL_ANTICIPATED (decl) = 1;\n \n-  /* Possibly apply some default attributes to this built-in function.  */\n-  if (attrs)\n-    decl_attributes (&decl, attrs, ATTR_FLAG_BUILT_IN);\n-  else\n-    decl_attributes (&decl, NULL_TREE, 0);\n-\n   return decl;\n }\n \n-/* Entry point for the benefit of c_common_nodes_and_builtins.\n-\n-   Make a definition for a builtin function named NAME and whose data type\n-   is TYPE.  TYPE should be a function type with argument types.  This\n-   function places the anticipated declaration in the global namespace\n-   and additionally in the std namespace if appropriate.\n-\n-   CLASS and CODE tell later passes how to compile calls to this function.\n-   See tree.h for possible values.\n-\n-   If LIBNAME is nonzero, use that for DECL_ASSEMBLER_NAME,\n-   the name to be called if we can't opencode the function.\n-\n-   If ATTRS is nonzero, use that for the function's attribute\n-   list.  */\n-\n tree\n-builtin_function (const char* name,\n-\t\t  tree type,\n-\t\t  int code,\n-\t\t  enum built_in_class cl,\n-\t\t  const char* libname,\n-\t\t  tree attrs)\n+cxx_builtin_function (tree decl)\n {\n+  tree          id = DECL_NAME (decl);\n+  const char *name = IDENTIFIER_POINTER (id);\n+  tree       decl2 = copy_node(decl);\n   /* All builtins that don't begin with an '_' should additionally\n      go in the 'std' namespace.  */\n   if (name[0] != '_')\n     {\n       push_namespace (std_identifier);\n-      builtin_function_1 (name, type, std_node, code, cl, libname, attrs);\n+      builtin_function_1 (decl, std_node);\n       pop_namespace ();\n     }\n \n-  return builtin_function_1 (name, type, NULL_TREE, code,\n-\t\t\t     cl, libname, attrs);\n+  return builtin_function_1 (decl2, NULL_TREE);\n }\n \n /* Generate a FUNCTION_DECL with the typical flags for a runtime library"}, {"sha": "630ffe048721f6b603bd6c24c68c640495c20c2e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -1,3 +1,15 @@\n+2006-10-23 Rafael Avila de Espindola  <rafael.espindola@gmail.com>\n+\n+\t* Make-lang.in (f951$(exeext)): Depend on and link with attribs.o.\n+\t* trans.h (builtin_function): Rename to\tgfc_builtin_function.\n+\tChange the signature.\n+\t* 95-lang.c (LANG_HOOKS_BUILTIN_FUNCTION): Define as\n+\tgfc_builtin_function.\n+\t(builtin_function): Rename to gfc_builtin_function. Move common\n+\tcode to builtin_function.\n+\t(gfc_define_builtin): Replace calls to builtin_function with\n+\tgfc_define_builtin.\n+\n 2006-10-22  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR fortran/26025"}, {"sha": "f99f0be0b9c08b9b11c293936206588b3f1c4b56", "filename": "gcc/fortran/Make-lang.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Ffortran%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Ffortran%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FMake-lang.in?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -102,9 +102,9 @@ gfortran-cross$(exeext): gfortran$(exeext)\n \n # The compiler itself is called f951.\n f951$(exeext): $(F95_OBJS) \\\n-\t\t$(BACKEND) $(LIBDEPS)\n+\t\t$(BACKEND) $(LIBDEPS) attribs.o\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \\\n-\t\t$(F95_OBJS) $(BACKEND) $(LIBS)\n+\t\t$(F95_OBJS) $(BACKEND) $(LIBS) attribs.o\n \n gt-fortran-trans.h    : s-gtype; @true\n #\f"}, {"sha": "263d6eefe39aeef514ce7a65ecb714dbf1dd08e3", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 5, "deletions": 35, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -124,6 +124,7 @@ static HOST_WIDE_INT gfc_get_alias_set (tree);\n #undef LANG_HOOKS_OMP_DISREGARD_VALUE_EXPR\n #undef LANG_HOOKS_OMP_PRIVATE_DEBUG_CLAUSE\n #undef LANG_HOOKS_OMP_FIRSTPRIVATIZE_TYPE_SIZES\n+#undef LANG_HOOKS_BUILTIN_FUNCTION\n \n /* Define lang hooks.  */\n #define LANG_HOOKS_NAME                 \"GNU F95\"\n@@ -150,6 +151,7 @@ static HOST_WIDE_INT gfc_get_alias_set (tree);\n #define LANG_HOOKS_OMP_PRIVATE_DEBUG_CLAUSE\tgfc_omp_private_debug_clause\n #define LANG_HOOKS_OMP_FIRSTPRIVATIZE_TYPE_SIZES \\\n   gfc_omp_firstprivatize_type_sizes\n+#define LANG_HOOKS_BUILTIN_FUNCTION          gfc_builtin_function\n \n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n@@ -723,43 +725,11 @@ int ggc_p = 1;\n \n /* Builtin function initialization.  */\n \n-/* Return a definition for a builtin function named NAME and whose data type\n-   is TYPE.  TYPE should be a function type with argument types.\n-   FUNCTION_CODE tells later passes how to compile calls to this function.\n-   See tree.h for its possible values.\n-\n-   If LIBRARY_NAME is nonzero, use that for DECL_ASSEMBLER_NAME,\n-   the name to be called if we can't opencode the function.  If\n-   ATTRS is nonzero, use that for the function's attribute list.  */\n-\n tree\n-builtin_function (const char *name,\n-\t\t  tree type,\n-\t\t  int function_code,\n-\t\t  enum built_in_class class,\n-\t\t  const char *library_name,\n-\t\t  tree attrs)\n+gfc_builtin_function (tree decl)\n {\n-  tree decl = build_decl (FUNCTION_DECL, get_identifier (name), type);\n-  DECL_EXTERNAL (decl) = 1;\n-  TREE_PUBLIC (decl) = 1;\n-  if (library_name)\n-    SET_DECL_ASSEMBLER_NAME (decl, get_identifier (library_name));\n   make_decl_rtl (decl);\n   pushdecl (decl);\n-  DECL_BUILT_IN_CLASS (decl) = class;\n-  DECL_FUNCTION_CODE (decl) = function_code;\n-\n-  /* Possibly apply some default attributes to this built-in function.  */\n-  if (attrs)\n-    {\n-      /* FORNOW the only supported attribute is \"const\".  If others need\n-         to be supported then see the more general solution in procedure\n-         builtin_function in c-decl.c  */\n-      if (lookup_attribute ( \"const\", attrs ))\n-        TREE_READONLY (decl) = 1;\n-    }\n-\n   return decl;\n }\n \n@@ -773,8 +743,8 @@ gfc_define_builtin (const char * name,\n {\n   tree decl;\n \n-  decl = builtin_function (name, type, code, BUILT_IN_NORMAL,\n-\t\t\t   library_name, NULL_TREE);\n+  decl = add_builtin_function (name, type, code, BUILT_IN_NORMAL,\n+\t\t\t       library_name, NULL_TREE);\n   if (const_p)\n     TREE_READONLY (decl) = 1;\n "}, {"sha": "f471f093af99311e1591c9a6dcace85965df1aa7", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -446,8 +446,7 @@ void pushlevel (int);\n tree poplevel (int, int, int);\n tree getdecls (void);\n tree gfc_truthvalue_conversion (tree);\n-tree builtin_function (const char *, tree, int, enum built_in_class,\n-\t\t       const char *, tree);\n+tree gfc_builtin_function (tree);\n \n /* In trans-openmp.c */\n bool gfc_omp_privatize_by_reference (tree);"}, {"sha": "d171343cc093f1329cf08a8a48d07f80960a423c", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -1,3 +1,13 @@\n+2006-10-23 Rafael Avila de Espindola  <rafael.espindola@gmail.com>\n+\n+\t* decl.c: Include langhooks.h.\n+\t(builtin_function): Remove.\n+\t(java_init_decl_processing): Replace calls to builtin_function\n+\twith add_builtin_function.\n+\t* Make-lang.in (jc1$(exeext)): Depend on and link with attribs.o.\n+\t(java/decl.o): Depend on langhooks.h.\n+\t* java-tree.h (builtin_function): Remove.\n+\n 2006-10-10  Brooks Moses  <bmoses@stanford.edu>\n \n \t* Make-lang.in: Added \"java.pdf\", \"gcj.pdf\" target support."}, {"sha": "d054053b0f5ffbedb40d12f1d320985a44ec0a0b", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -131,10 +131,10 @@ jvspec.o-warn = -Wno-error\n java/parse-scan.o-warn = -Wno-error\n java/parse.o-warn = -Wno-error\n \n-jc1$(exeext): $(JAVA_OBJS) $(BACKEND) $(LIBDEPS)\n+jc1$(exeext): $(JAVA_OBJS) $(BACKEND) $(LIBDEPS) attribs.o\n \trm -f $@\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \\\n-\t\t$(JAVA_OBJS) $(BACKEND) $(ZLIB) $(LIBICONV) $(LIBS)\n+\t\t$(JAVA_OBJS) $(BACKEND) $(ZLIB) $(LIBICONV) $(LIBS) attribs.o\n \n gcjh$(exeext): $(GCJH_OBJS) $(LIBDEPS)\n \trm -f $@\n@@ -310,7 +310,7 @@ java/constants.o: java/constants.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h \\\n java/decl.o: java/decl.c $(CONFIG_H) $(JAVA_TREE_H) $(RTL_H) java/jcf.h \\\n   toplev.h $(FLAGS_H) $(SYSTEM_H) coretypes.h $(TM_H) $(FUNCTION_H) $(EXPR_H) \\\n   libfuncs.h except.h java/java-except.h $(GGC_H) $(REAL_H) gt-java-decl.h \\\n-  $(TARGET_H) $(CGRAPH_H)\n+  $(TARGET_H) $(CGRAPH_H) langhooks.h\n java/except.o: java/except.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h $(REAL_H) \\\n   $(RTL_H) java/javaop.h java/java-opcodes.h except.h java/java-except.h \\\n   toplev.h $(SYSTEM_H) coretypes.h $(TM_H) $(FUNCTION_H) "}, {"sha": "912f85479fa91dc94f07e21d7643cf0930e6cf9f", "filename": "gcc/java/decl.c", "status": "modified", "additions": 88, "deletions": 115, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -49,6 +49,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"target.h\"\n #include \"version.h\"\n #include \"tree-iterator.h\"\n+#include \"langhooks.h\"\n \n #if defined (DEBUG_JAVA_BINDING_LEVELS)\n extern void indent (void);\n@@ -465,34 +466,6 @@ push_promoted_type (const char *name, tree actual_type)\n   return type;\n }\n \n-/* Return a definition for a builtin function named NAME and whose data type\n-   is TYPE.  TYPE should be a function type with argument types.\n-   FUNCTION_CODE tells later passes how to compile calls to this function.\n-   See tree.h for its possible values.\n-\n-   If LIBRARY_NAME is nonzero, use that for DECL_ASSEMBLER_NAME,\n-   the name to be called if we can't opencode the function.  If\n-   ATTRS is nonzero, use that for the function's attribute list.  */\n-\n-tree\n-builtin_function (const char *name,\n-\t\t  tree type,\n-\t\t  int function_code,\n-\t\t  enum built_in_class cl,\n-\t\t  const char *library_name,\n-\t\t  tree ARG_UNUSED (attrs))\n-{\n-  tree decl = build_decl (FUNCTION_DECL, get_identifier (name), type);\n-  DECL_EXTERNAL (decl) = 1;\n-  TREE_PUBLIC (decl) = 1;\n-  if (library_name)\n-    SET_DECL_ASSEMBLER_NAME (decl, get_identifier (library_name));\n-  pushdecl (decl);\n-  DECL_BUILT_IN_CLASS (decl) = cl;\n-  DECL_FUNCTION_CODE (decl) = function_code;\n-  return decl;\n-}\n-\n /* Return tree that represents a vtable for a primitive array.  */\n static tree\n create_primitive_vtable (const char *name)\n@@ -942,104 +915,104 @@ java_init_decl_processing (void)\n   endlink = end_params_node = tree_cons (NULL_TREE, void_type_node, NULL_TREE);\n \n   t = tree_cons (NULL_TREE, class_ptr_type, endlink);\n-  alloc_object_node = builtin_function (\"_Jv_AllocObject\",\n-\t\t\t\t\tbuild_function_type (ptr_type_node, t),\n-\t\t\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n+  alloc_object_node = add_builtin_function (\"_Jv_AllocObject\",\n+\t\t\t\t\t    build_function_type (ptr_type_node, t),\n+\t\t\t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n   DECL_IS_MALLOC (alloc_object_node) = 1;\n-  alloc_no_finalizer_node = \n-    builtin_function (\"_Jv_AllocObjectNoFinalizer\",\n-\t\t      build_function_type (ptr_type_node, t),\n-\t\t      0, NOT_BUILT_IN, NULL, NULL_TREE);\n+  alloc_no_finalizer_node =\n+    add_builtin_function (\"_Jv_AllocObjectNoFinalizer\",\n+\t\t\t  build_function_type (ptr_type_node, t),\n+\t\t\t  0, NOT_BUILT_IN, NULL, NULL_TREE);\n   DECL_IS_MALLOC (alloc_no_finalizer_node) = 1;\n \n   t = tree_cons (NULL_TREE, ptr_type_node, endlink);\n-  soft_initclass_node = builtin_function (\"_Jv_InitClass\",\n-\t\t\t\t\t  build_function_type (void_type_node,\n-\t\t\t\t\t\t\t       t),\n-\t\t\t\t\t  0, NOT_BUILT_IN, NULL, NULL_TREE);\n+  soft_initclass_node = add_builtin_function (\"_Jv_InitClass\",\n+\t\t\t\t\t      build_function_type (void_type_node,\n+\t\t\t\t\t\t\t\t   t),\n+\t\t\t\t\t      0, NOT_BUILT_IN, NULL, NULL_TREE);\n   t = tree_cons (NULL_TREE, class_ptr_type,\n \t\t tree_cons (NULL_TREE, int_type_node, endlink));\n-  soft_resolvepoolentry_node \n-    = builtin_function (\"_Jv_ResolvePoolEntry\", \n-\t\t\tbuild_function_type (ptr_type_node, t),\n-\t\t\t0,NOT_BUILT_IN, NULL, NULL_TREE);\n+  soft_resolvepoolentry_node\n+    = add_builtin_function (\"_Jv_ResolvePoolEntry\",\n+\t\t\t    build_function_type (ptr_type_node, t),\n+\t\t\t    0,NOT_BUILT_IN, NULL, NULL_TREE);\n   DECL_IS_PURE (soft_resolvepoolentry_node) = 1;\n-  throw_node = builtin_function (\"_Jv_Throw\",\n-\t\t\t\t build_function_type (void_type_node, t),\n-\t\t\t\t 0, NOT_BUILT_IN, NULL, NULL_TREE);\n+  throw_node = add_builtin_function (\"_Jv_Throw\",\n+\t\t\t\t     build_function_type (void_type_node, t),\n+\t\t\t\t     0, NOT_BUILT_IN, NULL, NULL_TREE);\n   /* Mark throw_nodes as `noreturn' functions with side effects.  */\n   TREE_THIS_VOLATILE (throw_node) = 1;\n   TREE_SIDE_EFFECTS (throw_node) = 1;\n \n   t = build_function_type (void_type_node, tree_cons (NULL_TREE, ptr_type_node,\n \t\t\t\t\t\t      endlink));\n-  soft_monitorenter_node \n-    = builtin_function (\"_Jv_MonitorEnter\", t, 0, NOT_BUILT_IN,\n-\t\t\tNULL, NULL_TREE);\n-  soft_monitorexit_node \n-    = builtin_function (\"_Jv_MonitorExit\", t, 0, NOT_BUILT_IN,\n-\t\t\tNULL, NULL_TREE);\n-\n-  t = tree_cons (NULL_TREE, ptr_type_node, \n+  soft_monitorenter_node\n+    = add_builtin_function (\"_Jv_MonitorEnter\", t, 0, NOT_BUILT_IN,\n+\t\t\t    NULL, NULL_TREE);\n+  soft_monitorexit_node\n+    = add_builtin_function (\"_Jv_MonitorExit\", t, 0, NOT_BUILT_IN,\n+\t\t\t    NULL, NULL_TREE);\n+\n+  t = tree_cons (NULL_TREE, ptr_type_node,\n \t\t tree_cons (NULL_TREE, int_type_node, endlink));\n   soft_newarray_node\n-      = builtin_function (\"_Jv_NewPrimArray\",\n-\t\t\t  build_function_type (ptr_type_node, t),\n-\t\t\t  0, NOT_BUILT_IN, NULL, NULL_TREE);\n+      = add_builtin_function (\"_Jv_NewPrimArray\",\n+\t\t\t      build_function_type (ptr_type_node, t),\n+\t\t\t      0, NOT_BUILT_IN, NULL, NULL_TREE);\n   DECL_IS_MALLOC (soft_newarray_node) = 1;\n \n   t = tree_cons (NULL_TREE, int_type_node,\n \t\t tree_cons (NULL_TREE, class_ptr_type,\n \t\t\t    tree_cons (NULL_TREE, object_ptr_type_node,\n \t\t\t\t       endlink)));\n   soft_anewarray_node\n-      = builtin_function (\"_Jv_NewObjectArray\",\n-\t\t\t  build_function_type (ptr_type_node, t),\n-\t\t\t  0, NOT_BUILT_IN, NULL, NULL_TREE);\n+      = add_builtin_function (\"_Jv_NewObjectArray\",\n+\t\t\t      build_function_type (ptr_type_node, t),\n+\t\t\t      0, NOT_BUILT_IN, NULL, NULL_TREE);\n   DECL_IS_MALLOC (soft_anewarray_node) = 1;\n \n   /* There is no endlink here because _Jv_NewMultiArray is a varargs\n      function.  */\n   t = tree_cons (NULL_TREE, ptr_type_node,\n \t\t tree_cons (NULL_TREE, int_type_node, NULL_TREE));\n   soft_multianewarray_node\n-      = builtin_function (\"_Jv_NewMultiArray\",\n-\t\t\t  build_function_type (ptr_type_node, t),\n-\t\t\t  0, NOT_BUILT_IN, NULL, NULL_TREE);\n+      = add_builtin_function (\"_Jv_NewMultiArray\",\n+\t\t\t      build_function_type (ptr_type_node, t),\n+\t\t\t      0, NOT_BUILT_IN, NULL, NULL_TREE);\n   DECL_IS_MALLOC (soft_multianewarray_node) = 1;\n \n   t = build_function_type (void_type_node, \n \t\t\t   tree_cons (NULL_TREE, int_type_node, endlink));\n   soft_badarrayindex_node\n-      = builtin_function (\"_Jv_ThrowBadArrayIndex\", t, \n-\t\t\t  0, NOT_BUILT_IN, NULL, NULL_TREE);\n+      = add_builtin_function (\"_Jv_ThrowBadArrayIndex\", t,\n+\t\t\t      0, NOT_BUILT_IN, NULL, NULL_TREE);\n   /* Mark soft_badarrayindex_node as a `noreturn' function with side\n      effects.  */\n   TREE_THIS_VOLATILE (soft_badarrayindex_node) = 1;\n   TREE_SIDE_EFFECTS (soft_badarrayindex_node) = 1;\n \n   soft_nullpointer_node\n-    = builtin_function (\"_Jv_ThrowNullPointerException\",\n-\t\t\tbuild_function_type (void_type_node, endlink),\n-\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n+    = add_builtin_function (\"_Jv_ThrowNullPointerException\",\n+\t\t\t    build_function_type (void_type_node, endlink),\n+\t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n   /* Mark soft_nullpointer_node as a `noreturn' function with side\n      effects.  */\n   TREE_THIS_VOLATILE (soft_nullpointer_node) = 1;\n   TREE_SIDE_EFFECTS (soft_nullpointer_node) = 1;\n \n   soft_abstractmethod_node\n-    = builtin_function (\"_Jv_ThrowAbstractMethodError\",\n-\t\t\tbuild_function_type (void_type_node, endlink),\n-\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n+    = add_builtin_function (\"_Jv_ThrowAbstractMethodError\",\n+\t\t\t    build_function_type (void_type_node, endlink),\n+\t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n   /* Mark soft_abstractmethod_node as a `noreturn' function with side\n      effects.  */\n   TREE_THIS_VOLATILE (soft_abstractmethod_node) = 1;\n   TREE_SIDE_EFFECTS (soft_abstractmethod_node) = 1;\n \n   soft_nosuchfield_node\n-    = builtin_function (\"_Jv_ThrowNoSuchFieldError\",\n-\t\t\tbuild_function_type (void_type_node, endlink),\n-\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n+    = add_builtin_function (\"_Jv_ThrowNoSuchFieldError\",\n+\t\t\t    build_function_type (void_type_node, endlink),\n+\t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n   /* Mark soft_nosuchfield_node as a `noreturn' function with side\n      effects.  */\n   TREE_THIS_VOLATILE (soft_nosuchfield_node) = 1;\n@@ -1048,85 +1021,85 @@ java_init_decl_processing (void)\n   t = tree_cons (NULL_TREE, class_ptr_type,\n \t\t tree_cons (NULL_TREE, object_ptr_type_node, endlink));\n   soft_checkcast_node\n-    = builtin_function (\"_Jv_CheckCast\",\n-\t\t\tbuild_function_type (ptr_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n+    = add_builtin_function (\"_Jv_CheckCast\",\n+\t\t\t    build_function_type (ptr_type_node, t),\n+\t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n   t = tree_cons (NULL_TREE, object_ptr_type_node,\n \t\t tree_cons (NULL_TREE, class_ptr_type, endlink));\n   soft_instanceof_node\n-    = builtin_function (\"_Jv_IsInstanceOf\",\n-\t\t\tbuild_function_type (boolean_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n+    = add_builtin_function (\"_Jv_IsInstanceOf\",\n+\t\t\t    build_function_type (boolean_type_node, t),\n+\t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n   DECL_IS_PURE (soft_instanceof_node) = 1;\n   t = tree_cons (NULL_TREE, object_ptr_type_node,\n \t\t tree_cons (NULL_TREE, object_ptr_type_node, endlink));\n   soft_checkarraystore_node\n-    = builtin_function (\"_Jv_CheckArrayStore\",\n-\t\t\tbuild_function_type (void_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n+    = add_builtin_function (\"_Jv_CheckArrayStore\",\n+\t\t\t    build_function_type (void_type_node, t),\n+\t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n   t = tree_cons (NULL_TREE, ptr_type_node,\n \t\t tree_cons (NULL_TREE, ptr_type_node,\n \t\t\t    tree_cons (NULL_TREE, int_type_node, endlink)));\n-  soft_lookupinterfacemethod_node \n-    = builtin_function (\"_Jv_LookupInterfaceMethodIdx\",\n-\t\t\tbuild_function_type (ptr_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n+  soft_lookupinterfacemethod_node\n+    = add_builtin_function (\"_Jv_LookupInterfaceMethodIdx\",\n+\t\t\t    build_function_type (ptr_type_node, t),\n+\t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n   DECL_IS_PURE (soft_lookupinterfacemethod_node) = 1;\n   t = tree_cons (NULL_TREE, ptr_type_node,\n \t\t tree_cons (NULL_TREE, ptr_type_node,\n \t\t\t    tree_cons (NULL_TREE, ptr_type_node, endlink)));\n-  soft_lookupinterfacemethodbyname_node \n-    = builtin_function (\"_Jv_LookupInterfaceMethod\",\n-\t\t\tbuild_function_type (ptr_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n+  soft_lookupinterfacemethodbyname_node\n+    = add_builtin_function (\"_Jv_LookupInterfaceMethod\",\n+\t\t\t    build_function_type (ptr_type_node, t),\n+\t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n   t = tree_cons (NULL_TREE, object_ptr_type_node,\n \t\t tree_cons (NULL_TREE, ptr_type_node,\n \t\t\t    tree_cons (NULL_TREE, ptr_type_node, \n \t\t\t               tree_cons (NULL_TREE, int_type_node, \n \t\t\t\t                  endlink))));\n   soft_lookupjnimethod_node\n-    = builtin_function (\"_Jv_LookupJNIMethod\",\n-\t\t\tbuild_function_type (ptr_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n+    = add_builtin_function (\"_Jv_LookupJNIMethod\",\n+\t\t\t    build_function_type (ptr_type_node, t),\n+\t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n   t = tree_cons (NULL_TREE, ptr_type_node, endlink);\n   soft_getjnienvnewframe_node\n-    = builtin_function (\"_Jv_GetJNIEnvNewFrame\",\n-\t\t\tbuild_function_type (ptr_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n+    = add_builtin_function (\"_Jv_GetJNIEnvNewFrame\",\n+\t\t\t    build_function_type (ptr_type_node, t),\n+\t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n   soft_jnipopsystemframe_node\n-    = builtin_function (\"_Jv_JNI_PopSystemFrame\",\n-\t\t\tbuild_function_type (void_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n+    = add_builtin_function (\"_Jv_JNI_PopSystemFrame\",\n+\t\t\t    build_function_type (void_type_node, t),\n+\t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n \n   t = tree_cons (NULL_TREE, object_ptr_type_node, endlink);\n   soft_unwrapjni_node\n-    = builtin_function (\"_Jv_UnwrapJNIweakReference\",\n-\t\t\tbuild_function_type (object_ptr_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n+    = add_builtin_function (\"_Jv_UnwrapJNIweakReference\",\n+\t\t\t    build_function_type (object_ptr_type_node, t),\n+\t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n \n   t = tree_cons (NULL_TREE, int_type_node,\n \t\t tree_cons (NULL_TREE, int_type_node, endlink));\n   soft_idiv_node\n-    = builtin_function (\"_Jv_divI\",\n-\t\t\tbuild_function_type (int_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n+    = add_builtin_function (\"_Jv_divI\",\n+\t\t\t    build_function_type (int_type_node, t),\n+\t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n \n   soft_irem_node\n-    = builtin_function (\"_Jv_remI\",\n-\t\t\tbuild_function_type (int_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n+    = add_builtin_function (\"_Jv_remI\",\n+\t\t\t    build_function_type (int_type_node, t),\n+\t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n \n   t = tree_cons (NULL_TREE, long_type_node,\n \t\t tree_cons (NULL_TREE, long_type_node, endlink));\n   soft_ldiv_node\n-    = builtin_function (\"_Jv_divJ\",\n-\t\t\tbuild_function_type (long_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n+    = add_builtin_function (\"_Jv_divJ\",\n+\t\t\t    build_function_type (long_type_node, t),\n+\t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n \n   soft_lrem_node\n-    = builtin_function (\"_Jv_remJ\",\n-\t\t\tbuild_function_type (long_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n+    = add_builtin_function (\"_Jv_remJ\",\n+\t\t\t    build_function_type (long_type_node, t),\n+\t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n \n   /* Initialize variables for except.c.  */\n   eh_personality_libfunc = init_one_libfunc (USING_SJLJ_EXCEPTIONS"}, {"sha": "a064ab0575acc5c07a29ccc0838aafee3ae63463", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -1402,9 +1402,6 @@ extern void gen_indirect_dispatch_tables (tree type);\n extern int split_qualified_name (tree *left, tree *right, tree source);\n extern int in_same_package (tree, tree);\n \n-extern tree builtin_function (const char *, tree, int, enum built_in_class,\n-\t\t\t      const char *, tree);\n-\n #define DECL_FINAL(DECL) DECL_LANG_FLAG_3 (DECL)\n \n /* Access flags etc for a method (a FUNCTION_DECL): */"}, {"sha": "73b716a8b43990beb858c0175f30ea13b6df4927", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -71,6 +71,7 @@ extern tree lhd_expr_size (tree);\n extern size_t lhd_tree_size (enum tree_code);\n extern HOST_WIDE_INT lhd_to_target_charset (HOST_WIDE_INT);\n extern tree lhd_expr_to_decl (tree, bool *, bool *, bool *);\n+extern tree lhd_builtin_function (tree decl);\n \n /* Declarations of default tree inlining hooks.  */\n extern tree lhd_tree_inlining_walk_subtrees (tree *, int *, walk_tree_fn,\n@@ -130,7 +131,7 @@ extern void lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *,\n #define LANG_HOOKS_EXPR_SIZE\t\tlhd_expr_size\n #define LANG_HOOKS_TREE_SIZE\t\tlhd_tree_size\n #define LANG_HOOKS_TYPES_COMPATIBLE_P\tlhd_types_compatible_p\n-#define LANG_HOOKS_BUILTIN_FUNCTION\tbuiltin_function\n+#define LANG_HOOKS_BUILTIN_FUNCTION\tlhd_builtin_function\n #define LANG_HOOKS_EXPR_TO_DECL\t\tlhd_expr_to_decl\n #define LANG_HOOKS_TO_TARGET_CHARSET\tlhd_to_target_charset\n #define LANG_HOOKS_INIT_TS\t\tlhd_do_nothing"}, {"sha": "4f61d1175b1ea0dd73985358a74e2d84e4642fb5", "filename": "gcc/langhooks.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -588,3 +588,41 @@ lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *c ATTRIBUTE_UNUSED,\n \t\t\t\t   tree t ATTRIBUTE_UNUSED)\n {\n }\n+\n+tree\n+add_builtin_function (const char *name,\n+\t\t      tree type,\n+\t\t      int function_code,\n+\t\t      enum built_in_class cl,\n+\t\t      const char *library_name,\n+\t\t      tree attrs)\n+{\n+  tree   id = get_identifier (name);\n+  tree decl = build_decl (FUNCTION_DECL, id, type);\n+\n+  TREE_PUBLIC (decl)         = 1;\n+  DECL_EXTERNAL (decl)       = 1;\n+  DECL_BUILT_IN_CLASS (decl) = cl;\n+  DECL_FUNCTION_CODE (decl)  = function_code;\n+\n+  if (library_name) {\n+    tree libname = get_identifier (library_name);\n+    SET_DECL_ASSEMBLER_NAME (decl, libname);\n+  }\n+\n+  /* Possibly apply some default attributes to this built-in function.  */\n+  if (attrs)\n+    decl_attributes (&decl, attrs, ATTR_FLAG_BUILT_IN);\n+  else\n+    decl_attributes (&decl, NULL_TREE, 0);\n+\n+  return lang_hooks.builtin_function (decl);\n+\n+}\n+\n+tree\n+lhd_builtin_function (tree decl)\n+{\n+  lang_hooks.decls.pushdecl (decl);\n+  return decl;\n+}"}, {"sha": "4f789f148265820c2bab732207869a41f7153cd7", "filename": "gcc/langhooks.h", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -443,17 +443,8 @@ struct lang_hooks\n      KNOWN_TYPE carries the true type of the OBJ_TYPE_REF_OBJECT.  */\n   tree (*fold_obj_type_ref) (tree, tree);\n \n-  /* Return a definition for a builtin function named NAME and whose data type\n-     is TYPE.  TYPE should be a function type with argument types.\n-     FUNCTION_CODE tells later passes how to compile calls to this function.\n-     See tree.h for its possible values.\n-\n-     If LIBRARY_NAME is nonzero, use that for DECL_ASSEMBLER_NAME,\n-     the name to be called if we can't opencode the function.  If\n-     ATTRS is nonzero, use that for the function's attribute list.  */\n-  tree (*builtin_function) (const char *name, tree type, int function_code,\n-\t\t\t    enum built_in_class bt_class,\n-\t\t\t    const char *library_name, tree attrs);\n+  /* Do language specific processing in the builtin function DECL  */\n+  tree (*builtin_function) (tree decl);\n \n   /* Used to set up the tree_contains_structure array for a frontend. */\n   void (*init_ts) (void);\n@@ -470,5 +461,9 @@ struct lang_hooks\n \n /* Each front end provides its own.  */\n extern const struct lang_hooks lang_hooks;\n+extern tree add_builtin_function (const char *name, tree type,\n+\t\t\t\t  int function_code, enum built_in_class cl,\n+\t\t\t\t  const char *library_name,\n+\t\t\t\t  tree attrs);\n \n #endif /* GCC_LANG_HOOKS_H */"}, {"sha": "c0605d05fc600e281219b0feb1b73ae11ea95079", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -1,3 +1,12 @@\n+2006-10-23 Rafael Avila de Espindola  <rafael.espindola@gmail.com>\n+\n+\t* objc-act.c (synth_module_prologue): Replace calls to\n+\tbuiltin_function with add_builtin_function.\n+\t(build_next_objc_exception_stuff): Replace calls to\n+\tbuiltin_function with add_builtin_function.\n+\t(build_objc_exception_stuff): Replace calls to\n+\tbuiltin_function with add_builtin_function.\n+\n 2006-10-10  Brooks Moses  <bmoses@stanford.edu>\n \n \t* Make-lang.in: Added empty \"objc.pdf\" target."}, {"sha": "ab0f34ae6bae9cfe7ce9132c7a9bf98a0777ed22", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 56, "deletions": 50, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -1616,18 +1616,18 @@ synth_module_prologue (void)\n \t\t\t       tree_cons (NULL_TREE, objc_object_type,\n \t\t\t\t\t  tree_cons (NULL_TREE, objc_selector_type,\n \t\t\t\t\t\t     NULL_TREE)));\n-      umsg_decl = builtin_function (TAG_MSGSEND,\n-\t\t\t\t    type, 0, NOT_BUILT_IN,\n-\t\t\t\t    NULL, NULL_TREE);\n-      umsg_nonnil_decl = builtin_function (TAG_MSGSEND_NONNIL,\n-\t\t\t\t\t   type, 0, NOT_BUILT_IN,\n-\t\t\t\t\t   NULL, NULL_TREE);\n-      umsg_stret_decl = builtin_function (TAG_MSGSEND_STRET,\n-\t\t\t\t\t  type, 0, NOT_BUILT_IN,\n-\t\t\t\t\t  NULL, NULL_TREE);\n-      umsg_nonnil_stret_decl = builtin_function (TAG_MSGSEND_NONNIL_STRET,\n-\t\t\t\t\t\t type, 0, NOT_BUILT_IN,\n-\t\t\t\t\t\t NULL, NULL_TREE);\n+      umsg_decl = add_builtin_function (TAG_MSGSEND,\n+\t\t\t\t\ttype, 0, NOT_BUILT_IN,\n+\t\t\t\t\tNULL, NULL_TREE);\n+      umsg_nonnil_decl = add_builtin_function (TAG_MSGSEND_NONNIL,\n+\t\t\t\t\t       type, 0, NOT_BUILT_IN,\n+\t\t\t\t\t       NULL, NULL_TREE);\n+      umsg_stret_decl = add_builtin_function (TAG_MSGSEND_STRET,\n+\t\t\t\t\t      type, 0, NOT_BUILT_IN,\n+\t\t\t\t\t      NULL, NULL_TREE);\n+      umsg_nonnil_stret_decl = add_builtin_function (TAG_MSGSEND_NONNIL_STRET,\n+\t\t\t\t\t\t     type, 0, NOT_BUILT_IN,\n+\t\t\t\t\t\t     NULL, NULL_TREE);\n \n       /* These can throw, because the function that gets called can throw\n \t in Obj-C++, or could itself call something that can throw even\n@@ -1640,9 +1640,9 @@ synth_module_prologue (void)\n       /* id objc_msgSend_Fast (id, SEL, ...)\n \t   __attribute__ ((hard_coded_address (OFFS_MSGSEND_FAST))); */\n #ifdef OFFS_MSGSEND_FAST\n-      umsg_fast_decl = builtin_function (TAG_MSGSEND_FAST,\n-\t\t\t\t\t type, 0, NOT_BUILT_IN,\n-\t\t\t\t\t NULL, NULL_TREE);\n+      umsg_fast_decl = add_builtin_function (TAG_MSGSEND_FAST,\n+\t\t\t\t\t     type, 0, NOT_BUILT_IN,\n+\t\t\t\t\t     NULL, NULL_TREE);\n       TREE_NOTHROW (umsg_fast_decl) = 0;\n       DECL_ATTRIBUTES (umsg_fast_decl)\n \t= tree_cons (get_identifier (\"hard_coded_address\"),\n@@ -1660,12 +1660,12 @@ synth_module_prologue (void)\n \t\t\t       tree_cons (NULL_TREE, objc_super_type,\n \t\t\t\t\t  tree_cons (NULL_TREE, objc_selector_type,\n \t\t\t\t\t\t     NULL_TREE)));\n-      umsg_super_decl = builtin_function (TAG_MSGSENDSUPER,\n-\t\t\t\t\t  type, 0, NOT_BUILT_IN,\n-\t\t\t\t\t  NULL, NULL_TREE);\n-      umsg_super_stret_decl = builtin_function (TAG_MSGSENDSUPER_STRET,\n-\t\t\t\t\t\ttype, 0, NOT_BUILT_IN, 0,\n-\t\t\t\t\t\tNULL_TREE);\n+      umsg_super_decl = add_builtin_function (TAG_MSGSENDSUPER,\n+\t\t\t\t\t      type, 0, NOT_BUILT_IN,\n+\t\t\t\t\t      NULL, NULL_TREE);\n+      umsg_super_stret_decl = add_builtin_function (TAG_MSGSENDSUPER_STRET,\n+\t\t\t\t\t\t    type, 0, NOT_BUILT_IN, 0,\n+\t\t\t\t\t\t    NULL_TREE);\n       TREE_NOTHROW (umsg_super_decl) = 0;\n       TREE_NOTHROW (umsg_super_stret_decl) = 0;\n     }\n@@ -1687,9 +1687,9 @@ synth_module_prologue (void)\n \t\t\t       tree_cons (NULL_TREE, objc_object_type,\n \t\t\t\t\t  tree_cons (NULL_TREE, objc_selector_type,\n \t\t\t\t\t\t     OBJC_VOID_AT_END)));\n-      umsg_decl = builtin_function (TAG_MSGSEND,\n-\t\t\t\t    type, 0, NOT_BUILT_IN,\n-\t\t\t\t    NULL, NULL_TREE);\n+      umsg_decl = add_builtin_function (TAG_MSGSEND,\n+\t\t\t\t\ttype, 0, NOT_BUILT_IN,\n+\t\t\t\t\tNULL, NULL_TREE);\n       TREE_NOTHROW (umsg_decl) = 0;\n \n       /* IMP objc_msg_lookup_super (struct objc_super *, SEL); */\n@@ -1698,9 +1698,9 @@ synth_module_prologue (void)\n \t\t\t       tree_cons (NULL_TREE, objc_super_type,\n \t\t\t\t\t  tree_cons (NULL_TREE, objc_selector_type,\n \t\t\t\t\t\t     OBJC_VOID_AT_END)));\n-      umsg_super_decl = builtin_function (TAG_MSGSENDSUPER,\n-\t\t\t\t\t  type, 0, NOT_BUILT_IN,\n-\t\t\t\t\t  NULL, NULL_TREE);\n+      umsg_super_decl = add_builtin_function (TAG_MSGSENDSUPER,\n+\t\t\t\t\t      type, 0, NOT_BUILT_IN,\n+\t\t\t\t\t      NULL, NULL_TREE);\n       TREE_NOTHROW (umsg_super_decl) = 0;\n \n       /* The following GNU runtime entry point is called to initialize\n@@ -1711,9 +1711,9 @@ synth_module_prologue (void)\n \t= build_function_type (void_type_node,\n \t\t\t       tree_cons (NULL_TREE, ptr_type_node,\n \t\t\t\t\t  OBJC_VOID_AT_END));\n-      execclass_decl = builtin_function (TAG_EXECCLASS,\n-\t\t\t\t\t type, 0, NOT_BUILT_IN,\n-\t\t\t\t\t NULL, NULL_TREE);\n+      execclass_decl = add_builtin_function (TAG_EXECCLASS,\n+\t\t\t\t\t     type, 0, NOT_BUILT_IN,\n+\t\t\t\t\t     NULL, NULL_TREE);\n     }\n \n   /* id objc_getClass (const char *); */\n@@ -1724,13 +1724,13 @@ synth_module_prologue (void)\n \t\t\t\t\t      OBJC_VOID_AT_END));\n \n   objc_get_class_decl\n-    = builtin_function (TAG_GETCLASS, type, 0, NOT_BUILT_IN,\n-\t\t\tNULL, NULL_TREE);\n+    = add_builtin_function (TAG_GETCLASS, type, 0, NOT_BUILT_IN,\n+\t\t\t    NULL, NULL_TREE);\n \n   /* id objc_getMetaClass (const char *); */\n \n   objc_get_meta_class_decl\n-    = builtin_function (TAG_GETMETACLASS, type, 0, NOT_BUILT_IN, NULL, NULL_TREE);\n+    = add_builtin_function (TAG_GETMETACLASS, type, 0, NOT_BUILT_IN, NULL, NULL_TREE);\n \n   build_class_template ();\n   build_super_template ();\n@@ -3994,7 +3994,7 @@ build_next_objc_exception_stuff (void)\n      'int _setjmp(jmp_buf);' */\n   temp_type = build_function_type (integer_type_node, NULL_TREE);\n   objc_setjmp_decl\n-    = builtin_function (TAG_SETJMP, temp_type, 0, NOT_BUILT_IN, NULL, NULL_TREE);\n+    = add_builtin_function (TAG_SETJMP, temp_type, 0, NOT_BUILT_IN, NULL, NULL_TREE);\n \n   /* id objc_exception_extract(struct _objc_exception_data *); */\n   temp_type\n@@ -4003,7 +4003,8 @@ build_next_objc_exception_stuff (void)\n \t\t\t\t      build_pointer_type (objc_exception_data_template),\n \t\t\t\t      OBJC_VOID_AT_END));\n   objc_exception_extract_decl\n-    = builtin_function (TAG_EXCEPTIONEXTRACT, temp_type, 0, NOT_BUILT_IN, NULL, NULL_TREE);\n+    = add_builtin_function (TAG_EXCEPTIONEXTRACT, temp_type, 0, NOT_BUILT_IN, NULL,\n+\t\t\t    NULL_TREE);\n   /* void objc_exception_try_enter(struct _objc_exception_data *); */\n   /* void objc_exception_try_exit(struct _objc_exception_data *); */\n   temp_type\n@@ -4012,9 +4013,11 @@ build_next_objc_exception_stuff (void)\n \t\t\t\t      build_pointer_type (objc_exception_data_template),\n \t\t\t\t      OBJC_VOID_AT_END));\n   objc_exception_try_enter_decl\n-    = builtin_function (TAG_EXCEPTIONTRYENTER, temp_type, 0, NOT_BUILT_IN, NULL, NULL_TREE);\n+    = add_builtin_function (TAG_EXCEPTIONTRYENTER, temp_type, 0, NOT_BUILT_IN, NULL,\n+\t\t\t    NULL_TREE);\n   objc_exception_try_exit_decl\n-    = builtin_function (TAG_EXCEPTIONTRYEXIT, temp_type, 0, NOT_BUILT_IN, NULL, NULL_TREE);\n+    = add_builtin_function (TAG_EXCEPTIONTRYEXIT, temp_type, 0, NOT_BUILT_IN, NULL,\n+\t\t\t    NULL_TREE);\n \n   /* int objc_exception_match(id, id); */\n   temp_type\n@@ -4023,7 +4026,8 @@ build_next_objc_exception_stuff (void)\n \t\t\t\t      tree_cons (NULL_TREE, objc_object_type,\n \t\t\t\t\t\t OBJC_VOID_AT_END)));\n   objc_exception_match_decl\n-    = builtin_function (TAG_EXCEPTIONMATCH, temp_type, 0, NOT_BUILT_IN, NULL, NULL_TREE);\n+    = add_builtin_function (TAG_EXCEPTIONMATCH, temp_type, 0, NOT_BUILT_IN, NULL,\n+\t\t\t    NULL_TREE);\n \n   /* id objc_assign_ivar (id, id, unsigned int); */\n   /* id objc_assign_ivar_Fast (id, id, unsigned int)\n@@ -4037,12 +4041,12 @@ build_next_objc_exception_stuff (void)\n \t\t\t\t\t\t  unsigned_type_node,\n \t\t\t\t\t\t  OBJC_VOID_AT_END))));\n   objc_assign_ivar_decl\n-    = builtin_function (TAG_ASSIGNIVAR, temp_type, 0, NOT_BUILT_IN,\n-\t\t\tNULL, NULL_TREE);\n+    = add_builtin_function (TAG_ASSIGNIVAR, temp_type, 0, NOT_BUILT_IN,\n+\t\t\t    NULL, NULL_TREE);\n #ifdef OFFS_ASSIGNIVAR_FAST\n   objc_assign_ivar_fast_decl\n-    = builtin_function (TAG_ASSIGNIVAR_FAST, temp_type, 0,\n-\t\t\tNOT_BUILT_IN, NULL, NULL_TREE);\n+    = add_builtin_function (TAG_ASSIGNIVAR_FAST, temp_type, 0,\n+\t\t\t    NOT_BUILT_IN, NULL, NULL_TREE);\n   DECL_ATTRIBUTES (objc_assign_ivar_fast_decl)\n     = tree_cons (get_identifier (\"hard_coded_address\"),\n \t\t build_int_cst (NULL_TREE, OFFS_ASSIGNIVAR_FAST),\n@@ -4059,9 +4063,11 @@ build_next_objc_exception_stuff (void)\n \t\t    tree_cons (NULL_TREE, build_pointer_type (objc_object_type),\n \t\t\tOBJC_VOID_AT_END)));\n   objc_assign_global_decl\n-\t= builtin_function (TAG_ASSIGNGLOBAL, temp_type, 0, NOT_BUILT_IN, NULL, NULL_TREE);\n+\t= add_builtin_function (TAG_ASSIGNGLOBAL, temp_type, 0, NOT_BUILT_IN, NULL,\n+\t\t\t\tNULL_TREE);\n   objc_assign_strong_cast_decl\n-\t= builtin_function (TAG_ASSIGNSTRONGCAST, temp_type, 0, NOT_BUILT_IN, NULL, NULL_TREE);\n+\t= add_builtin_function (TAG_ASSIGNSTRONGCAST, temp_type, 0, NOT_BUILT_IN, NULL,\n+\t\t\t\tNULL_TREE);\n }\n \n static void\n@@ -4079,14 +4085,14 @@ build_objc_exception_stuff (void)\n \t\t\t\t   tree_cons (NULL_TREE, objc_object_type,\n \t\t\t\t\t      OBJC_VOID_AT_END));\n   objc_exception_throw_decl\n-    = builtin_function (TAG_EXCEPTIONTHROW, temp_type, 0, NOT_BUILT_IN, NULL,\n-\t\t\tnoreturn_list);\n+    = add_builtin_function (TAG_EXCEPTIONTHROW, temp_type, 0, NOT_BUILT_IN, NULL,\n+\t\t\t    noreturn_list);\n   objc_sync_enter_decl\n-    = builtin_function (TAG_SYNCENTER, temp_type, 0, NOT_BUILT_IN,\n-\t\t\tNULL, nothrow_list);\n+    = add_builtin_function (TAG_SYNCENTER, temp_type, 0, NOT_BUILT_IN,\n+\t\t\t    NULL, nothrow_list);\n   objc_sync_exit_decl\n-    = builtin_function (TAG_SYNCEXIT, temp_type, 0, NOT_BUILT_IN,\n-\t\t\tNULL, nothrow_list);\n+    = add_builtin_function (TAG_SYNCEXIT, temp_type, 0, NOT_BUILT_IN,\n+\t\t\t    NULL, nothrow_list);\n }\n \n /* Construct a C struct corresponding to ObjC class CLASS, with the same"}, {"sha": "86a060069e955b98636d9d75b02cc0c6c23877be", "filename": "gcc/objcp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fobjcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fobjcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2FChangeLog?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -1,3 +1,7 @@\n+2006-10-23 Rafael Avila de Espindola  <rafael.espindola@gmail.com>\n+\n+\t* objcp-decl.h (objcp_builtin_function): Remove.\n+\n 2006-10-10  Brooks Moses  <bmoses@stanford.edu>\n \n \t* Make-lang.in: Added empty \"obj-c++.pdf\" target."}, {"sha": "dd32ccca8d3f231a46551d5db145d1c6cbb45206", "filename": "gcc/objcp/objcp-decl.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fobjcp%2Fobjcp-decl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Fobjcp%2Fobjcp-decl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2Fobjcp-decl.h?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -29,8 +29,6 @@ extern void objcp_finish_function (void);\n extern tree objcp_build_function_call (tree, tree);\n extern tree objcp_xref_tag (enum tree_code, tree);\n extern int objcp_comptypes (tree, tree);\n-extern tree objcp_builtin_function (const char *, tree, int, \n-\t\t\t\t    enum built_in_class, const char *, tree);\n extern tree objcp_begin_compound_stmt (int);\n extern tree objcp_end_compound_stmt (tree, int);\n "}, {"sha": "30d7dce1f36f3f4d7bdca540287494d067053a3f", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -1034,9 +1034,9 @@ tree_ssa_prefetch_arrays (struct loops *loops)\n \t\t\t\t       tree_cons (NULL_TREE,\n \t\t\t\t\t\t  const_ptr_type_node,\n \t\t\t\t\t\t  NULL_TREE));\n-      tree decl = lang_hooks.builtin_function (\"__builtin_prefetch\", type,\n-\t\t\tBUILT_IN_PREFETCH, BUILT_IN_NORMAL,\n-\t\t\tNULL, NULL_TREE);\n+      tree decl = add_builtin_function (\"__builtin_prefetch\", type,\n+\t\t\t\t\tBUILT_IN_PREFETCH, BUILT_IN_NORMAL,\n+\t\t\t\t\tNULL, NULL_TREE);\n       DECL_IS_NOVOPS (decl) = true;\n       built_in_decls[BUILT_IN_PREFETCH] = decl;\n     }"}, {"sha": "8f869fa16ba34f64aeb4f01ea0b991d800a208f3", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -6635,8 +6635,8 @@ local_define_builtin (const char *name, tree type, enum built_in_function code,\n {\n   tree decl;\n \n-  decl = lang_hooks.builtin_function (name, type, code, BUILT_IN_NORMAL,\n-\t\t\t\t      library_name, NULL_TREE);\n+  decl = add_builtin_function (name, type, code, BUILT_IN_NORMAL,\n+\t\t\t       library_name, NULL_TREE);\n   if (ecf_flags & ECF_CONST)\n     TREE_READONLY (decl) = 1;\n   if (ecf_flags & ECF_PURE)"}, {"sha": "1b4a9415f97e63a9ccf6f8ed913baaa9843a797b", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -1,3 +1,7 @@\n+2006-10-23 Rafael Avila de Espindola  <rafael.espindola@gmail.com>\n+\n+\t* treetree.c (builtin_function): Remove.\n+\n 2006-10-10  Brooks Moses  <bmoses@stanford.edu>\n \n \t* Make-lang.in: Added \"treelang.pdf\" target support."}, {"sha": "aade17c8b9546611288ad410a82438dc8f66f846", "filename": "gcc/treelang/treetree.c", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Ftreelang%2Ftreetree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79efc4d2a3f51f42e2b120c9536a262776f2840/gcc%2Ftreelang%2Ftreetree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.c?ref=c79efc4d2a3f51f42e2b120c9536a262776f2840", "patch": "@@ -138,10 +138,6 @@ static tree pushdecl (tree decl);\n static tree* getstmtlist (void);\n \n /* Langhooks.  */\n-static tree builtin_function (const char *name, tree type, int function_code,\n-\t\t\t      enum built_in_class class,\n-\t\t\t      const char *library_name,\n-\t\t\t      tree attrs);\n extern const struct attribute_spec treelang_attribute_table[];\n static tree getdecls (void);\n static int global_bindings_p (void);\n@@ -1224,41 +1220,6 @@ const struct attribute_spec treelang_attribute_table[] =\n   { NULL, 0, 0, false, false, false, NULL },\n };\n \n-/* Return a definition for a builtin function named NAME and whose data type\n-   is TYPE.  TYPE should be a function type with argument types.\n-   FUNCTION_CODE tells later passes how to compile calls to this function.\n-   See tree.h for its possible values.\n-\n-   If LIBRARY_NAME is nonzero, use that for DECL_ASSEMBLER_NAME,\n-   the name to be called if we can't opencode the function.  If\n-   ATTRS is nonzero, use that for the function's attribute list.\n-\n-   copied from gcc/c-decl.c\n-*/\n-\n-static tree\n-builtin_function (const char *name, tree type, int function_code,\n-\t\t  enum built_in_class class, const char *library_name,\n-\t\t  tree attrs)\n-{\n-  tree decl = build_decl (FUNCTION_DECL, get_identifier (name), type);\n-  DECL_EXTERNAL (decl) = 1;\n-  TREE_PUBLIC (decl) = 1;\n-  if (library_name)\n-    SET_DECL_ASSEMBLER_NAME (decl, get_identifier (library_name));\n-  pushdecl (decl);\n-  DECL_BUILT_IN_CLASS (decl) = class;\n-  DECL_FUNCTION_CODE (decl) = function_code;\n-\n-  /* Possibly apply some default attributes to this built-in function.  */\n-  if (attrs)\n-    decl_attributes (&decl, attrs, ATTR_FLAG_BUILT_IN);\n-  else\n-    decl_attributes (&decl, NULL_TREE, 0);\n-\n-  return decl;\n-}\n-\n /* Treelang expand function langhook.  */\n \n static void"}]}