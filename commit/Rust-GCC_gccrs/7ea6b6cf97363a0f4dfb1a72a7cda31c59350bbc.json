{"sha": "7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VhNmI2Y2Y5NzM2M2EwZjRkZmIxYTcyYTdjZGEzMWM1OTM1MGJiYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-06-11T12:29:53Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-06-11T12:29:53Z"}, "message": "invoke.texi (Wsuggest-attribute): Document.\n\n\t* doc/invoke.texi (Wsuggest-attribute): Document.\n\t(Wmissing-noreturn): Remove.\n\t* ipa-pure-const.c (warn_function_noreturn): New function.\n\t* opts.c (decode_options): Set warn_suggest_attribute_noreturn on\n\twarn_missing_noreturn.\n\t* common.opt (Wsuggest-attribute=noreturn): New.\n\t* tree-flow.h (warn_function_noreturn): Declare.\n\t* tree-cfg.c (execute_warn_function_noreturn): Use\n\twarn_function_noreturn.\n\t(gate_warn_function_noreturn): New.\n\t(pass_warn_function_noreturn): Update.\n\nFrom-SVN: r160606", "tree": {"sha": "b9d5e6003412755a9b91c08dbafc60f251457051", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9d5e6003412755a9b91c08dbafc60f251457051"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc/comments", "author": null, "committer": null, "parents": [{"sha": "2ee3cb3591bfa67a216efe877ddcfca65851bbc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ee3cb3591bfa67a216efe877ddcfca65851bbc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ee3cb3591bfa67a216efe877ddcfca65851bbc8"}], "stats": {"total": 120, "additions": 82, "deletions": 38}, "files": [{"sha": "59f69396a6e443f7ac8c948062c2b3e5392ba9f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc", "patch": "@@ -1,3 +1,17 @@\n+2010-06-11  Jan Hubicka  <jh@suse.cz>\n+\n+\t* doc/invoke.texi (Wsuggest-attribute): Document.\n+\t(Wmissing-noreturn): Remove.\n+\t* ipa-pure-const.c (warn_function_noreturn): New function.\n+\t* opts.c (decode_options): Set warn_suggest_attribute_noreturn on\n+\twarn_missing_noreturn.\n+\t* common.opt (Wsuggest-attribute=noreturn): New.\n+\t* tree-flow.h (warn_function_noreturn): Declare.\n+\t* tree-cfg.c (execute_warn_function_noreturn): Use\n+\twarn_function_noreturn.\n+\t(gate_warn_function_noreturn): New.\n+\t(pass_warn_function_noreturn): Update.\n+\n 2010-06-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* c-typeck.c (handle_warn_cast_qual): Add loc"}, {"sha": "f001e026fc940f87b802274f4170bda308fdfbb5", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc", "patch": "@@ -192,6 +192,10 @@ Wsuggest-attribute=pure\n Common Var(warn_suggest_attribute_pure) Warning\n Warn about functions which might be candidates for __attribute__((pure))\n \n+Wsuggest-attribute=noreturn\n+Common Var(warn_suggest_attribute_noreturn) Warning\n+Warn about functions which might be candidates for __attribute__((noreturn))\n+\n Wswitch\n Common Var(warn_switch) Warning\n Warn about enumerated switches, with no default, missing a case"}, {"sha": "3519ead1c5996e2a3865b259ede09da9f715027b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc", "patch": "@@ -248,7 +248,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wlogical-op -Wlong-long @gol\n -Wmain  -Wmissing-braces  -Wmissing-field-initializers @gol\n -Wmissing-format-attribute  -Wmissing-include-dirs @gol\n--Wmissing-noreturn  -Wno-mudflap @gol\n+-Wno-mudflap @gol\n -Wno-multichar  -Wnonnull  -Wno-overflow @gol\n -Woverlength-strings  -Wpacked  -Wpacked-bitfield-compat  -Wpadded @gol\n -Wparentheses  -Wpedantic-ms-format -Wno-pedantic-ms-format @gol\n@@ -3667,16 +3667,17 @@ attributes currently supported are listed below.\n @opindex Wno-suggest-attribute=pure\n @opindex Wsuggest-attribute=const\n @opindex Wno-suggest-attribute=const\n+@opindex Wsuggest-attribute=noreturn\n+@opindex Wno-suggest-attribute=noreturn\n \n Warn about functions which might be candidates for attributes\n-@code{pure} or @code{const}.  The compiler only warns for functions\n-visible in other compilation units or if it cannot prove that the\n-function returns normally. A function returns normally if it doesn't\n-contain an infinite loop nor returns abnormally by throwing, calling\n-@code{abort()} or trapping.  This analysis requires option\n-@option{-fipa-pure-const}, which is enabled by default at @option{-O}\n-and higher.  Higher optimization levels improve the accuracy of the\n-analysis.\n+@code{pure}, @code{const} or @code{noreturn}.  The compiler only warns for\n+functions visible in other compilation units or (in the case of @code{pure} and\n+@code{const}) if it cannot prove that the function returns normally. A function\n+returns normally if it doesn't contain an infinite loop nor returns abnormally\n+by throwing, calling @code{abort()} or trapping.  This analysis requires option\n+@option{-fipa-pure-const}, which is enabled by default at @option{-O} and\n+higher.  Higher optimization levels improve the accuracy of the analysis.\n @end table\n \n @item -Warray-bounds\n@@ -4153,16 +4154,6 @@ struct s x = @{ .f = 3, .g = 4 @};\n This warning is included in @option{-Wextra}.  To get other @option{-Wextra}\n warnings without this one, use @samp{-Wextra -Wno-missing-field-initializers}.\n \n-@item -Wmissing-noreturn\n-@opindex Wmissing-noreturn\n-@opindex Wno-missing-noreturn\n-Warn about functions which might be candidates for attribute @code{noreturn}.\n-Note these are only possible candidates, not absolute ones.  Care should\n-be taken to manually verify functions actually do not ever return before\n-adding the @code{noreturn} attribute, otherwise subtle code generation\n-bugs could be introduced.  You will not get a warning for @code{main} in\n-hosted C environments.\n-\n @item -Wmissing-format-attribute\n @opindex Wmissing-format-attribute\n @opindex Wno-missing-format-attribute"}, {"sha": "da8d442107b932b85d36888257efdb7188859519", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc", "patch": "@@ -177,6 +177,16 @@ warn_function_const (tree decl, bool known_finite)\n     = suggest_attribute (OPT_Wsuggest_attribute_const, decl,\n \t\t\t known_finite, warned_about, \"const\");\n }\n+\n+void\n+warn_function_noreturn (tree decl)\n+{\n+  static struct pointer_set_t *warned_about;\n+  if (!lang_hooks.missing_noreturn_ok_p (decl))\n+    warned_about \n+      = suggest_attribute (OPT_Wsuggest_attribute_noreturn, decl,\n+\t\t\t   true, warned_about, \"noreturn\");\n+}\n /* Init the function state.  */\n \n static void\n@@ -1514,11 +1524,7 @@ local_pure_const (void)\n   if (!skip && !TREE_THIS_VOLATILE (current_function_decl)\n       && EDGE_COUNT (EXIT_BLOCK_PTR->preds) == 0)\n     {\n-      if (warn_missing_noreturn\n-\t  && !lang_hooks.missing_noreturn_ok_p (cfun->decl))\n-\twarning_at (DECL_SOURCE_LOCATION (cfun->decl), OPT_Wmissing_noreturn,\n-\t\t    \"function might be possible candidate \"\n-\t\t    \"for attribute %<noreturn%>\");\n+      warn_function_noreturn (cfun->decl);\n       if (dump_file)\n         fprintf (dump_file, \"Function found to be noreturn: %s\\n\",\n \t         lang_hooks.decl_printable_name (current_function_decl, 2));"}, {"sha": "e304ce5c94be151564b3dfc31668023399ab7ae3", "filename": "gcc/opts.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc", "patch": "@@ -1062,6 +1062,11 @@ decode_options (unsigned int argc, const char **argv)\n \t       \"is disabled.\");\n       flag_toplevel_reorder = 0;\n     }\n+\n+  /* -Wmissing-noreturn is alias for -Wsuggest-attribute=noreturn.  */\n+  if (warn_missing_noreturn)\n+    warn_suggest_attribute_noreturn = true;\n+    \n   /* Unless the user has asked for section anchors, we disable toplevel\n      reordering at -O0 to disable transformations that might be surprising\n      to end users and to get -fno-toplevel-reorder tested.  */"}, {"sha": "372d59518ea7ac306a1248d78e86e30c69003def", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc", "patch": "@@ -1,3 +1,8 @@\n+2010-06-11  Jan Hubicka  <jh@suse.cz>\n+\n+\t* testsuite/gcc.dg/noreturn-7.c: Update.\n+\t* testsuite/gcc.dg/noreturn-4.c: Update.\n+\n 2010-06-10  Dodji Seketeli  <dodji@redhat.com>\n \n \tFix MIPS bootstrap"}, {"sha": "6fe144754d05ef9b20d086e9518d061450f7d6cb", "filename": "gcc/testsuite/gcc.dg/noreturn-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-4.c?ref=7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc", "patch": "@@ -4,7 +4,7 @@\n extern void exit (int) __attribute__ ((__noreturn__));\n \n int\n-main (void) /* { dg-warning \"function might be possible candidate for attribute 'noreturn'\" \"warn for main\" } */\n+main (void) /* { dg-warning \"function might be candidate for attribute 'noreturn'\" \"warn for main\" } */\n {\n   exit (0);\n }"}, {"sha": "fd2be2d56c0f29e86620df2dc43943eae5650f01", "filename": "gcc/testsuite/gcc.dg/noreturn-7.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-7.c?ref=7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc", "patch": "@@ -13,7 +13,7 @@ void _exit(int status) __attribute__ ((__noreturn__));\n \n int z = 0;\n \n-void g() /* { dg-warning \"possible candidate\" } */\n+void g() /* { dg-warning \"might be candidate\" } */\n {\n   if (++z > 10)\n     _exit(0);\n@@ -27,14 +27,14 @@ void f()\n   f();\n }             /* { dg-bogus \"does return\" } */\n \n-int h() /* { dg-warning \"possible candidate\" } */\n+int h() /* { dg-warning \"might be candidate\" } */\n {\n   if (++z > 10)\n     _exit(0);\n   return h();\n }             /* { dg-bogus \"end of non-void function\" } */\n \n-int k() /* { dg-warning \"possible candidate\" } */\n+int k() /* { dg-warning \"might be candidate\" } */\n {\n   if (++z > 10)\n     _exit(0);"}, {"sha": "406479416aee45e8d4ff257d06dfbb37bfa6b912", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc", "patch": "@@ -7256,22 +7256,24 @@ struct gimple_opt_pass pass_warn_function_return =\n static unsigned int\n execute_warn_function_noreturn (void)\n {\n-  if (warn_missing_noreturn\n-      && !TREE_THIS_VOLATILE (cfun->decl)\n-      && EDGE_COUNT (EXIT_BLOCK_PTR->preds) == 0\n-      && !lang_hooks.missing_noreturn_ok_p (cfun->decl))\n-    warning_at (DECL_SOURCE_LOCATION (cfun->decl), OPT_Wmissing_noreturn,\n-\t\t\"function might be possible candidate \"\n-\t\t\"for attribute %<noreturn%>\");\n+  if (!TREE_THIS_VOLATILE (current_function_decl)\n+      && EDGE_COUNT (EXIT_BLOCK_PTR->preds) == 0)\n+    warn_function_noreturn (current_function_decl);\n   return 0;\n }\n \n+static bool\n+gate_warn_function_noreturn (void)\n+{\n+  return warn_suggest_attribute_noreturn;\n+}\n+\n struct gimple_opt_pass pass_warn_function_noreturn =\n {\n  {\n   GIMPLE_PASS,\n   \"*warn_function_noreturn\",\t\t/* name */\n-  NULL,\t\t\t\t\t/* gate */\n+  gate_warn_function_noreturn,\t\t/* gate */\n   execute_warn_function_noreturn,\t/* execute */\n   NULL,\t\t\t\t\t/* sub */\n   NULL,\t\t\t\t\t/* next */"}, {"sha": "8dec8c764319e90d5cd8ab35acb1c1eeba22677a", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc", "patch": "@@ -568,9 +568,23 @@ fixup_noreturn_call (gimple stmt)\n           imm_use_iterator iter;\n \t  gimple use_stmt;\n \n+\t  /* All statements using the OP are unreachable or PHI\n+\t     statements where the edge correspoing to OP use is unreachable.\n+\t     We need to remove all normal statements so fixup_cfg will not\n+\t     try to update them and keep all PHIs but remove use of the SSA\n+\t     name or verifier will complain.  */\n           FOR_EACH_IMM_USE_STMT (use_stmt, iter, op)\n-\t    FOR_EACH_IMM_USE_ON_STMT (use_p, iter)\n-\t      SET_USE (use_p, error_mark_node);\n+\t    {\n+\t      if (gimple_code (use_stmt) == GIMPLE_PHI)\n+\t\tFOR_EACH_IMM_USE_ON_STMT (use_p, iter)\n+\t\t  SET_USE (use_p, error_mark_node);\n+\t      else\n+\t\t{\n+\t\t  gimple_stmt_iterator gsi = gsi_for_stmt (use_stmt);\n+\t\t  gsi_remove (&gsi, true);\n+\t\t}\n+\t    }\n+\t  release_ssa_name (op);\n \t}\n       update_stmt (stmt);\n       changed = true;"}, {"sha": "1830ffa874e9294f1c743d1d54858d88b6cb8973", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=7ea6b6cf97363a0f4dfb1a72a7cda31c59350bbc", "patch": "@@ -872,6 +872,9 @@ unsigned int execute_free_datastructures (void);\n unsigned int execute_fixup_cfg (void);\n bool fixup_noreturn_call (gimple stmt);\n \n+/* In ipa-pure-const.c  */\n+void warn_function_noreturn (tree);\n+\n #include \"tree-flow-inline.h\"\n \n void swap_tree_operands (gimple, tree *, tree *);"}]}