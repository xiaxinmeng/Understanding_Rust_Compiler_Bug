{"sha": "716c0ba6bf36efd36fff564f42f1b121720cc611", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE2YzBiYTZiZjM2ZWZkMzZmZmY1NjRmNDJmMWIxMjE3MjBjYzYxMQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-04-29T18:13:44Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-04-29T18:13:44Z"}, "message": "re PR c/64610 (No -Wbool-compare warning on \"(0 != a) >= 0\")\n\n\tPR c/64610\n\t* c-common.c (maybe_warn_bool_compare): Warn when comparing a boolean\n\twith 0/1.\n\n\t* c-c++-common/Wbool-compare-1.c (fn1): Remove a few lines.\n\t* c-c++-common/Wbool-compare-2.c: New test.\n\nFrom-SVN: r222587", "tree": {"sha": "d5c027f5f606e767bd8f9c756a29ad3c77ae1274", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5c027f5f606e767bd8f9c756a29ad3c77ae1274"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/716c0ba6bf36efd36fff564f42f1b121720cc611", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/716c0ba6bf36efd36fff564f42f1b121720cc611", "html_url": "https://github.com/Rust-GCC/gccrs/commit/716c0ba6bf36efd36fff564f42f1b121720cc611", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/716c0ba6bf36efd36fff564f42f1b121720cc611/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d28ad5d4c5454c0a2ca24d6dcbbc9b2da5c0aaf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d28ad5d4c5454c0a2ca24d6dcbbc9b2da5c0aaf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d28ad5d4c5454c0a2ca24d6dcbbc9b2da5c0aaf2"}], "stats": {"total": 133, "additions": 126, "deletions": 7}, "files": [{"sha": "44e21f3dde61b7a7938ee84322fb94d064bc52a5", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/716c0ba6bf36efd36fff564f42f1b121720cc611/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/716c0ba6bf36efd36fff564f42f1b121720cc611/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=716c0ba6bf36efd36fff564f42f1b121720cc611", "patch": "@@ -1,3 +1,9 @@\n+2015-04-29  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/64610\n+\t* c-common.c (maybe_warn_bool_compare): Warn when comparing a boolean\n+\twith 0/1.\n+\n 2015-04-29  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-common.h (omp_clause_mask): Unconditionally define as a class."}, {"sha": "eecbe41d4f6fbb2b34db527c4b4610f5c7b833c3", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/716c0ba6bf36efd36fff564f42f1b121720cc611/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/716c0ba6bf36efd36fff564f42f1b121720cc611/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=716c0ba6bf36efd36fff564f42f1b121720cc611", "patch": "@@ -11910,8 +11910,8 @@ maybe_warn_bool_compare (location_t loc, enum tree_code code, tree op0,\n \n   if (!integer_zerop (cst) && !integer_onep (cst))\n     {\n-      int sign = (TREE_CODE (op0) == INTEGER_CST)\n-\t\t ? tree_int_cst_sgn (cst) : -tree_int_cst_sgn (cst);\n+      int sign = (TREE_CODE (op0) == INTEGER_CST\n+\t\t ? tree_int_cst_sgn (cst) : -tree_int_cst_sgn (cst));\n       if (code == EQ_EXPR\n \t  || ((code == GT_EXPR || code == GE_EXPR) && sign < 0)\n \t  || ((code == LT_EXPR || code == LE_EXPR) && sign > 0))\n@@ -11921,6 +11921,18 @@ maybe_warn_bool_compare (location_t loc, enum tree_code code, tree op0,\n \twarning_at (loc, OPT_Wbool_compare, \"comparison of constant %qE \"\n \t\t    \"with boolean expression is always true\", cst);\n     }\n+  else if (integer_zerop (cst) || integer_onep (cst))\n+    {\n+      /* Do some magic to get the right diagnostics.  */\n+      bool flag = TREE_CODE (op0) == INTEGER_CST;\n+      flag = integer_zerop (cst) ? flag : !flag;\n+      if ((code == GE_EXPR && !flag) || (code == LE_EXPR && flag))\n+\twarning_at (loc, OPT_Wbool_compare, \"comparison of constant %qE \"\n+\t\t    \"with boolean expression is always true\", cst);\n+      else if ((code == LT_EXPR && !flag) || (code == GT_EXPR && flag))\n+\twarning_at (loc, OPT_Wbool_compare, \"comparison of constant %qE \"\n+\t\t    \"with boolean expression is always false\", cst);\n+    }\n }\n \n /* The C and C++ parsers both use vectors to hold function arguments."}, {"sha": "7ff95665c48ea4aa92a8e095cf16323a05bfe9a7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/716c0ba6bf36efd36fff564f42f1b121720cc611/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/716c0ba6bf36efd36fff564f42f1b121720cc611/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=716c0ba6bf36efd36fff564f42f1b121720cc611", "patch": "@@ -1,3 +1,9 @@\n+2015-04-29  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/64610\n+\t* c-c++-common/Wbool-compare-1.c (fn1): Remove a few lines.\n+\t* c-c++-common/Wbool-compare-2.c: New test.\n+\n 2015-04-29  Alan Lawrence  <alan.lawrence@arm.com>\n \n \tPR target/65770"}, {"sha": "2f435f651e682cb9dbc0e7c9cc22863ed2ea3208", "filename": "gcc/testsuite/c-c++-common/Wbool-compare-1.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/716c0ba6bf36efd36fff564f42f1b121720cc611/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbool-compare-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/716c0ba6bf36efd36fff564f42f1b121720cc611/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbool-compare-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbool-compare-1.c?ref=716c0ba6bf36efd36fff564f42f1b121720cc611", "patch": "@@ -72,15 +72,10 @@ fn1 (bool b)\n   r = b == true;\n   r = b != true;\n \n-  /* Some of these don't make much sense, but we don't warn.  */\n-  r = b < false;\n-  r = b >= false;\n   r = b <= false;\n   r = b > false;\n   r = b < true;\n   r = b >= true;\n-  r = b <= true;\n-  r = b > true;\n }\n \n void"}, {"sha": "633032229fa40c7197d8ed1278a84942294d8fc1", "filename": "gcc/testsuite/c-c++-common/Wbool-compare-2.c", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/716c0ba6bf36efd36fff564f42f1b121720cc611/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbool-compare-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/716c0ba6bf36efd36fff564f42f1b121720cc611/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbool-compare-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbool-compare-2.c?ref=716c0ba6bf36efd36fff564f42f1b121720cc611", "patch": "@@ -0,0 +1,100 @@\n+/* PR c/64610 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wbool-compare\" } */\n+\n+#ifndef __cplusplus\n+# define bool _Bool\n+# define true 1\n+# define false 0\n+#endif\n+\n+extern bool foo (void);\n+\n+enum { A, B };\n+\n+int\n+fn1 (bool b)\n+{\n+  int r = 0;\n+\n+  r += b >= 0; /* { dg-warning \"with boolean expression is always true\" } */\n+  r += b > 0;\n+  r += b < 0; /* { dg-warning \"with boolean expression is always false\" } */\n+  r += b <= 0;\n+\n+  r += b >= 1;\n+  r += b > 1; /* { dg-warning \"with boolean expression is always false\" } */\n+  r += b < 1;\n+  r += b <= 1; /* { dg-warning \"with boolean expression is always true\" } */\n+\n+  r += foo () >= 0; /* { dg-warning \"with boolean expression is always true\" } */\n+  r += foo () > 0;\n+  r += foo () < 0; /* { dg-warning \"with boolean expression is always false\" } */\n+  r += foo () <= 0;\n+\n+  r += foo () >= 1;\n+  r += foo () > 1; /* { dg-warning \"with boolean expression is always false\" } */\n+  r += foo () < 1;\n+  r += foo () <= 1; /* { dg-warning \"with boolean expression is always true\" } */\n+\n+  r += b >= A; /* { dg-warning \"with boolean expression is always true\" } */\n+  r += b > A;\n+  r += b < A; /* { dg-warning \"with boolean expression is always false\" } */\n+  r += b <= A;\n+\n+  r += b >= B;\n+  r += b > B; /* { dg-warning \"with boolean expression is always false\" } */\n+  r += b < B;\n+  r += b <= B; /* { dg-warning \"with boolean expression is always true\" } */\n+\n+  /* Swap LHS and RHS.  */\n+  r += 0 >= b;\n+  r += 0 > b; /* { dg-warning \"with boolean expression is always false\" } */\n+  r += 0 < b;\n+  r += 0 <= b; /* { dg-warning \"with boolean expression is always true\" } */\n+\n+  r += 1 >= b; /* { dg-warning \"with boolean expression is always true\" } */\n+  r += 1 > b;\n+  r += 1 < b; /* { dg-warning \"with boolean expression is always false\" } */\n+  r += 1 <= b;\n+\n+  r += 0 >= foo ();\n+  r += 0 > foo (); /* { dg-warning \"with boolean expression is always false\" } */\n+  r += 0 < foo ();\n+  r += 0 <= foo (); /* { dg-warning \"with boolean expression is always true\" } */\n+\n+  r += 1 >= foo (); /* { dg-warning \"with boolean expression is always true\" } */\n+  r += 1 > foo ();\n+  r += 1 < foo (); /* { dg-warning \"with boolean expression is always false\" } */\n+  r += 1 <= foo ();\n+\n+  r += A >= b;\n+  r += A > b; /* { dg-warning \"with boolean expression is always false\" } */\n+  r += A < b;\n+  r += A <= b; /* { dg-warning \"with boolean expression is always true\" } */\n+\n+  r += B >= b; /* { dg-warning \"with boolean expression is always true\" } */\n+  r += B > b;\n+  r += B < b; /* { dg-warning \"with boolean expression is always false\" } */\n+  r += B <= b;\n+\n+  return r;\n+}\n+\n+int\n+fn2 (int i, int j)\n+{\n+  int r = 0;\n+\n+  r += (i == j) >= 0; /* { dg-warning \"with boolean expression is always true\" } */\n+  r += (i == j) > 0;\n+  r += (i == j) < 0; /* { dg-warning \"with boolean expression is always false\" } */\n+  r += (i == j) <= 0;\n+\n+  r += (i == j) >= 1;\n+  r += (i == j) > 1; /* { dg-warning \"with boolean expression is always false\" } */\n+  r += (i == j) < 1;\n+  r += (i == j) <= 1; /* { dg-warning \"with boolean expression is always true\" } */\n+\n+  return r;\n+}"}]}