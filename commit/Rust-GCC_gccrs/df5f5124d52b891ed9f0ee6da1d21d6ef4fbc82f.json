{"sha": "df5f5124d52b891ed9f0ee6da1d21d6ef4fbc82f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY1ZjUxMjRkNTJiODkxZWQ5ZjBlZTZkYTFkMjFkNmVmNGZiYzgyZg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-10-05T23:22:04Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-10-05T23:22:04Z"}, "message": "(sched_analyze_2): Make volatile asms depend on all\npseudo registers.\n\nFrom-SVN: r5621", "tree": {"sha": "551127c5c736e073b2526982560a9af56214bc1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/551127c5c736e073b2526982560a9af56214bc1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df5f5124d52b891ed9f0ee6da1d21d6ef4fbc82f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df5f5124d52b891ed9f0ee6da1d21d6ef4fbc82f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df5f5124d52b891ed9f0ee6da1d21d6ef4fbc82f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df5f5124d52b891ed9f0ee6da1d21d6ef4fbc82f/comments", "author": null, "committer": null, "parents": [{"sha": "67c8d7deb23a770b7aca61dd995c98f465c1ba0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67c8d7deb23a770b7aca61dd995c98f465c1ba0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67c8d7deb23a770b7aca61dd995c98f465c1ba0b"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "ac0b7a576fd2dd7e9188aca975c474680d9f8ce0", "filename": "gcc/sched.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df5f5124d52b891ed9f0ee6da1d21d6ef4fbc82f/gcc%2Fsched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df5f5124d52b891ed9f0ee6da1d21d6ef4fbc82f/gcc%2Fsched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched.c?ref=df5f5124d52b891ed9f0ee6da1d21d6ef4fbc82f", "patch": "@@ -1940,11 +1940,16 @@ sched_analyze_2 (x, insn)\n \trtx u;\n \n \t/* Traditional and volatile asm instructions must be considered to use\n-\t   and clobber all hard registers and all of memory.  So must\n-\t   TRAP_IF and UNSPEC_VOLATILE operations.  */\n+\t   and clobber all hard registers, all pseudo-registers and all of\n+\t   memory.  So must TRAP_IF and UNSPEC_VOLATILE operations.\n+\n+\t   Consider for instance a volatile asm that changes the fpu rounding\n+\t   mode.  An insn should not be moved across this even if it only uses\n+\t   pseudo-regs because it might give an incorrectly rounded result.  */\n \tif (code != ASM_OPERANDS || MEM_VOLATILE_P (x))\n \t  {\n-\t    for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n+\t    int max_reg = max_reg_num ();\n+\t    for (i = 0; i < max_reg; i++)\n \t      {\n \t\tfor (u = reg_last_uses[i]; u; u = XEXP (u, 1))\n \t\t  add_dependence (insn, XEXP (u, 0), REG_DEP_ANTI);"}]}