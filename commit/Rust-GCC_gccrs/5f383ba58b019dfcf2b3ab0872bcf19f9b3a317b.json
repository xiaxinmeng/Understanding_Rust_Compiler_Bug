{"sha": "5f383ba58b019dfcf2b3ab0872bcf19f9b3a317b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYzODNiYTU4YjAxOWRmY2YyYjNhYjA4NzJiY2YxOWY5YjNhMzE3Yg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-01-06T20:19:31Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-01-06T20:19:31Z"}, "message": "CollationElementIterator.java: Reformated.\n\n2004-01-06  Michael Koch  <konqueror@gmx.de>\n\n\t* java/text/CollationElementIterator.java: Reformated.\n\t(CollationElementIterator): Changed order of arguments.\n\t* java/text/RuleBasedCollator.java\n\t(RuleBasedCollator): Merged class documentation.\n\t(CollationElement): Added documentation.\n\t(compare): Reformated, renamed arguments.\n\t(equals): Likewise.\n\t(getCollationElementIterator): Likewise.\n\t(getCollationKey): Likewise.\n\nFrom-SVN: r75484", "tree": {"sha": "d3a7374affb37e8d07f91069a4b743b8079e0e0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3a7374affb37e8d07f91069a4b743b8079e0e0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f383ba58b019dfcf2b3ab0872bcf19f9b3a317b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f383ba58b019dfcf2b3ab0872bcf19f9b3a317b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f383ba58b019dfcf2b3ab0872bcf19f9b3a317b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f383ba58b019dfcf2b3ab0872bcf19f9b3a317b/comments", "author": null, "committer": null, "parents": [{"sha": "64d961b859f8a477a4c2c81624cf44db0f2daefe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64d961b859f8a477a4c2c81624cf44db0f2daefe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64d961b859f8a477a4c2c81624cf44db0f2daefe"}], "stats": {"total": 100, "additions": 62, "deletions": 38}, "files": [{"sha": "3750a46c8e1440fcf19f812f80204af5d32a892e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f383ba58b019dfcf2b3ab0872bcf19f9b3a317b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f383ba58b019dfcf2b3ab0872bcf19f9b3a317b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=5f383ba58b019dfcf2b3ab0872bcf19f9b3a317b", "patch": "@@ -1,3 +1,15 @@\n+2004-01-06  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/text/CollationElementIterator.java: Reformated.\n+\t(CollationElementIterator): Changed order of arguments.\n+\t* java/text/RuleBasedCollator.java\n+\t(RuleBasedCollator): Merged class documentation.\n+\t(CollationElement): Added documentation.\n+\t(compare): Reformated, renamed arguments.\n+\t(equals): Likewise.\n+\t(getCollationElementIterator): Likewise.\n+\t(getCollationKey): Likewise.\n+\n 2004-01-06  Graydon Hoare  <graydon@redhat.com>\n \n \t* javax/swing/JLayeredPane.java: Fix semantics, add javadocs."}, {"sha": "bcb4f6b89c2174d778464fe9b2c2a496d08da20c", "filename": "libjava/java/text/CollationElementIterator.java", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f383ba58b019dfcf2b3ab0872bcf19f9b3a317b/libjava%2Fjava%2Ftext%2FCollationElementIterator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f383ba58b019dfcf2b3ab0872bcf19f9b3a317b/libjava%2Fjava%2Ftext%2FCollationElementIterator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FCollationElementIterator.java?ref=5f383ba58b019dfcf2b3ab0872bcf19f9b3a317b", "patch": "@@ -53,6 +53,7 @@\n  *\n  * @author Aaron M. Renn <arenn@urbanophile.com>\n  * @author Tom Tromey <tromey@cygnus.com>\n+ * @author Guilhem Lavaux <guilhem.lavaux@free.fr>\n  */\n public final class CollationElementIterator\n {\n@@ -89,15 +90,17 @@\n    * @param collator The <code>RuleBasedCollation</code> used for calculating collation values\n    * @param text The <code>String</code> to iterate over.\n    */\n-  CollationElementIterator (String text, RuleBasedCollator collator)\n+  CollationElementIterator(RuleBasedCollator collator, String text)\n   {\n-    setText (text);\n     this.collator = collator;\n+    \n+    setText (text);    \n   }\n \n   /**\n-   * This method returns the collation ordering value of the next character\n-   * in the string.  This method will return <code>NULLORDER</code> if the\n+   * This method returns the collation ordering value of the next character sequence\n+   * in the string (it may be an extended character following collation rules).\n+   * This method will return <code>NULLORDER</code> if the\n    * end of the string was reached.\n    *\n    * @return The collation ordering value.\n@@ -118,7 +121,7 @@ public int next()\n    *\n    * @return The primary order value of the specified collation value.  This is the high 16 bits.\n    */\n-  public static final int primaryOrder (int order)\n+  public static final int primaryOrder(int order)\n   {\n     // From the JDK 1.2 spec.\n     return order >>> 16;\n@@ -141,7 +144,7 @@ public void reset()\n    *\n    * @return The secondary order value of the specified collation value.  This is the bits 8-15.\n    */\n-  public static final short secondaryOrder (int order)\n+  public static final short secondaryOrder(int order)\n   {\n     // From the JDK 1.2 spec.\n     return (short) ((order >>> 8) & 255);\n@@ -155,7 +158,7 @@ public static final short secondaryOrder (int order)\n    *\n    * @return The tertiary order value of the specified collation value.  This is the low eight bits.\n    */\n-  public static final short tertiaryOrder (int order)\n+  public static final short tertiaryOrder(int order)\n   {\n     // From the JDK 1.2 spec.\n     return (short) (order & 255);\n@@ -169,7 +172,7 @@ public static final short tertiaryOrder (int order)\n    *\n    * @since 1.2\n    */\n-  public void setText (String text)\n+  public void setText(String text)\n   {\n     this.text = text;\n     this.index = 0;\n@@ -189,6 +192,4 @@ public int getOffset()\n   {\n     return index;\n   }\n-\n-} // class CollationElementIterator\n-\n+}"}, {"sha": "82df0d6919bf1824978f72fd7cc8f0f09e918aca", "filename": "libjava/java/text/RuleBasedCollator.java", "status": "modified", "additions": 38, "deletions": 27, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f383ba58b019dfcf2b3ab0872bcf19f9b3a317b/libjava%2Fjava%2Ftext%2FRuleBasedCollator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f383ba58b019dfcf2b3ab0872bcf19f9b3a317b/libjava%2Fjava%2Ftext%2FRuleBasedCollator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FRuleBasedCollator.java?ref=5f383ba58b019dfcf2b3ab0872bcf19f9b3a317b", "patch": "@@ -35,7 +35,6 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n-\n package java.text;\n \n import java.util.Enumeration;\n@@ -62,7 +61,10 @@\n  * <li> Reset: '&amp;' : <text>\n  * </ul>\n  * The modifier character indicates that accents sort backward as is the\n- * case with French.  The relational operators specify how the text \n+ * case with French.  The modifier applies to all rules <b>after</b>\n+ * the modifier but before the next primary sequence. If placed at the end\n+ * of the sequence if applies to all unknown accented character.\n+ * The relational operators specify how the text \n  * argument relates to the previous term.  The relation characters have\n  * the following meanings:\n  * <ul>\n@@ -113,6 +115,9 @@\n  * anywhere in the previous rule string segment so the rule following the\n  * reset rule cannot be inserted.\n  * <p>\n+ * \"&lt; a &amp; A @ &lt; e &amp; E &lt; f&amp; F\" - This sequence is equivalent to the following\n+ * \"&lt; a &amp; A &lt; E &amp; e &lt; f &amp; F\".\n+ * <p>\n  * For a description of the various comparison strength types, see the\n  * documentation for the <code>Collator</code> class.\n  * <p>\n@@ -134,11 +139,14 @@\n  *\n  * @author Aaron M. Renn <arenn@urbanophile.com>\n  * @author Tom Tromey <tromey@cygnus.com>\n- * @date March 25, 1999\n+ * @author Guilhem Lavaux <guilhem@kaffe.org>\n  */\n-\n public class RuleBasedCollator extends Collator\n {\n+  /**\n+   * This class describes what rank has a character (or a sequence of characters) \n+   * in the lexicographic order. Each element in a rule has a collation element.\n+   */\n   final class CollationElement\n   {\n     String key;\n@@ -178,7 +186,7 @@ public class RuleBasedCollator extends Collator\n    *\n    * @exception ParseException If the rule string contains syntax errors.\n    */\n-  public RuleBasedCollator (String rules) throws ParseException\n+  public RuleBasedCollator(String rules) throws ParseException\n   {\n     if (rules.equals (\"\"))\n       throw new ParseException (\"empty rule set\", 0);\n@@ -409,20 +417,20 @@ static final int next (CollationElementIterator iter, int strength)\n    * the second.  The value depends not only on the collation rules in\n    * effect, but also the strength and decomposition settings of this object.\n    *\n-   * @param s1 The first <code>String</code> to compare.\n-   * @param s2 A second <code>String</code> to compare to the first.\n+   * @param source The first <code>String</code> to compare.\n+   * @param target A second <code>String</code> to compare to the first.\n    *\n-   * @return A negative integer if s1 &lt; s2, a positive integer\n-   * if s1 &gt; s2, or 0 if s1 == s2.\n+   * @return A negative integer if source &lt; target, a positive integer\n+   * if source &gt; target, or 0 if source == target.\n    */\n-  public int compare (String source, String target)\n+  public int compare(String source, String target)\n   {\n     CollationElementIterator cs, ct;\n \n-    cs = new CollationElementIterator (source, this);\n-    ct = new CollationElementIterator (target, this);\n+    cs = new CollationElementIterator(this, source);\n+    ct = new CollationElementIterator(this, target);\n \n-    while (true)\n+    for(;;)\n       {\n \tint os = next (cs, strength);\n \tint ot = next (ct, strength);\n@@ -455,9 +463,10 @@ else if (ot == CollationElementIterator.NULLORDER)\n    *\n    * @param obj The <code>Object</code> to compare against this object.\n    *\n-   * @return <code>true</code> if the specified object is equal to this object, <code>false</code> otherwise.\n+   * @return <code>true</code> if the specified object is equal to this object,\n+   * <code>false</code> otherwise.\n    */\n-  public boolean equals (Object obj)\n+  public boolean equals(Object obj)\n   {\n     if (! (obj instanceof RuleBasedCollator) || ! super.equals(obj))\n       return false;\n@@ -473,37 +482,39 @@ public boolean equals (Object obj)\n    * for the specified <code>String</code> under the collation rules for this\n    * object.\n    *\n-   * @param str The <code>String</code> to return the <code>CollationElementIterator</code> instance for.\n+   * @param source The <code>String</code> to return the\n+   * <code>CollationElementIterator</code> instance for.\n    *\n-   * @return A <code>CollationElementIterator</code> for the specified <code>String</code>.\n+   * @return A <code>CollationElementIterator</code> for the specified\n+   * <code>String</code>.\n    */\n-  public CollationElementIterator getCollationElementIterator (String source)\n+  public CollationElementIterator getCollationElementIterator(String source)\n   {\n     StringBuffer expand = new StringBuffer (source.length());\n     int max = source.length();\n     for (int i = 0; i < max; ++i)\n       decomposeCharacter (source.charAt(i), expand);\n-    return new CollationElementIterator (expand.toString(), this);\n+    return new CollationElementIterator(this, expand.toString());\n   }\n \n   /**\n    * This method returns an instance of <code>CollationElementIterator</code>\n    * for the <code>String</code> represented by the specified\n    * <code>CharacterIterator</code>.\n    *\n-   * @param ci The <code>CharacterIterator</code> with the desired <code>String</code>.\n+   * @param source The <code>CharacterIterator</code> with the desired <code>String</code>.\n    *\n    * @return A <code>CollationElementIterator</code> for the specified <code>String</code>.\n    */\n-  public CollationElementIterator getCollationElementIterator (CharacterIterator source)\n+  public CollationElementIterator getCollationElementIterator(CharacterIterator source)\n   {\n-    StringBuffer expand = new StringBuffer ();\n+    StringBuffer expand = new StringBuffer();\n     for (char c = source.first ();\n \t c != CharacterIterator.DONE;\n \t c = source.next ())\n       decomposeCharacter (c, expand);\n \n-    return new CollationElementIterator (expand.toString(), this);\n+    return new CollationElementIterator(this, expand.toString());\n   }\n \n   /**\n@@ -513,14 +524,14 @@ public CollationElementIterator getCollationElementIterator (CharacterIterator s\n    * provide speed benefits if multiple comparisons are performed, such\n    * as during a sort.\n    *\n-   * @param str The <code>String</code> to create a <code>CollationKey</code> for.\n+   * @param source The <code>String</code> to create a <code>CollationKey</code> for.\n    *\n    * @return A <code>CollationKey</code> for the specified <code>String</code>.\n    */\n-  public CollationKey getCollationKey (String source)\n+  public CollationKey getCollationKey(String source)\n   {\n-    return new CollationKey (getCollationElementIterator (source), source,\n-\t\t\t     strength);\n+    return new CollationKey(getCollationElementIterator(source), source,\n+\t\t\t    strength);\n   }\n \n   /**"}]}