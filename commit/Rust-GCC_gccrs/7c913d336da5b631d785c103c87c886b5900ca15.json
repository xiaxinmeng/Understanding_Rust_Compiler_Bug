{"sha": "7c913d336da5b631d785c103c87c886b5900ca15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M5MTNkMzM2ZGE1YjYzMWQ3ODVjMTAzYzg3Yzg4NmI1OTAwY2ExNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@casey.cygnus.com", "date": "2000-01-07T07:06:59Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-01-07T07:06:59Z"}, "message": "decl2.c (comdat_linkage): Don't set DECL_DEFER_OUTPUT.\n\n        * decl2.c (comdat_linkage): Don't set DECL_DEFER_OUTPUT.\n        * pt.c (instantiate_decl): Defer comdat templates that might not be\n        needed.\n\n        * cp-tree.h (DECL_NEEDED_P): Also true if !DECL_COMDAT.\n        * decl2.c (finish_vtable_vardecl): Don't check !DECL_COMDAT.\n        (finish_file): Likewise.\n\nFrom-SVN: r31269", "tree": {"sha": "21bd1600c0b15e5dc17d6a1436a5c328b0b4dc60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21bd1600c0b15e5dc17d6a1436a5c328b0b4dc60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c913d336da5b631d785c103c87c886b5900ca15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c913d336da5b631d785c103c87c886b5900ca15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c913d336da5b631d785c103c87c886b5900ca15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c913d336da5b631d785c103c87c886b5900ca15/comments", "author": null, "committer": null, "parents": [{"sha": "ea5d313a8e0b4e1e8e354f1a22ed60099214279d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea5d313a8e0b4e1e8e354f1a22ed60099214279d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea5d313a8e0b4e1e8e354f1a22ed60099214279d"}], "stats": {"total": 67, "additions": 47, "deletions": 20}, "files": [{"sha": "377be4783a13796b1fafd1defdb80b20f98000a4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c913d336da5b631d785c103c87c886b5900ca15/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c913d336da5b631d785c103c87c886b5900ca15/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7c913d336da5b631d785c103c87c886b5900ca15", "patch": "@@ -1,5 +1,15 @@\n 2000-01-06  Jason Merrill  <jason@casey.cygnus.com>\n \n+\t* decl2.c (comdat_linkage): Don't set DECL_DEFER_OUTPUT.\n+\t* pt.c (instantiate_decl): Defer comdat templates that might not be\n+\tneeded.\n+\t\n+\t* cp-tree.h (DECL_NEEDED_P): Also true if !DECL_COMDAT.\n+\t* decl2.c (finish_vtable_vardecl): Don't check !DECL_COMDAT.\n+\t(finish_file): Likewise.\n+\n+\t* decl2.c (import_export_class): Undo 12/14 change.\n+\n \t* error.c (dump_decl): operator new, not operatornew.\n \n \t* class.c (field_decl_cmp): A nontype is \"greater\" than a type."}, {"sha": "801298d6fca872a5d619ca5639b1b5f48d27b143", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c913d336da5b631d785c103c87c886b5900ca15/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c913d336da5b631d785c103c87c886b5900ca15/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7c913d336da5b631d785c103c87c886b5900ca15", "patch": "@@ -2677,8 +2677,9 @@ extern int flag_new_for_scope;\n    the symbol has been referenced in the generated code.  If, however,\n    we are not generating code, then it is also true when a symbol has\n    just been used somewhere, even if it's not really needed.  */\n-#define DECL_NEEDED_P(DECL)\t\t\t\t \t\\\n-  ((TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME ((DECL)))) \t\\\n+#define DECL_NEEDED_P(DECL)\t\t\t\t\t\\\n+  (! DECL_COMDAT (DECL)\t\t\t\t\t\t\\\n+   || (TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME ((DECL))))\t\\\n    || (flag_syntax_only && TREE_USED ((DECL))))\n \n /* An un-parsed default argument looks like an identifier.  */"}, {"sha": "cd2c80440c92eea45b43a63c741891581cc20638", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c913d336da5b631d785c103c87c886b5900ca15/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c913d336da5b631d785c103c87c886b5900ca15/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=7c913d336da5b631d785c103c87c886b5900ca15", "patch": "@@ -2347,9 +2347,6 @@ comdat_linkage (decl)\n \n   if (DECL_LANG_SPECIFIC (decl))\n     DECL_COMDAT (decl) = 1;\n-\n-  if (TREE_CODE (decl) == FUNCTION_DECL)\n-    DECL_DEFER_OUTPUT (decl) = 1;\n }\n \n /* For win32 we also want to put explicit instantiations in\n@@ -2464,10 +2461,9 @@ import_export_class (ctype)\n #ifdef VALID_MACHINE_TYPE_ATTRIBUTE\n   /* FIXME this should really use some sort of target-independent macro.  */\n   if (lookup_attribute (\"dllimport\", TYPE_ATTRIBUTES (ctype)))\n-    /* Use -2 so we survive the MULTIPLE_SYMBOL_SPACES check below.  */\n-    import_export = -2;\n+    import_export = -1;\n   else if (lookup_attribute (\"dllexport\", TYPE_ATTRIBUTES (ctype)))\n-    import_export = 2;\n+    import_export = 1;\n #endif\n \n   /* If we got -fno-implicit-templates, we import template classes that\n@@ -2548,8 +2544,7 @@ finish_vtable_vardecl (t, data)\n   import_export_vtable (vars, ctype, 1);\n \n   if (! DECL_EXTERNAL (vars)\n-      && (DECL_INTERFACE_KNOWN (vars) \n-\t  || DECL_NEEDED_P (vars)\n+      && (DECL_NEEDED_P (vars)\n \t  || (hack_decl_function_context (vars) && TREE_USED (vars)))\n       && ! TREE_ASM_WRITTEN (vars))\n     {\n@@ -3525,15 +3520,15 @@ finish_file ()\n       \n \t  if (DECL_NOT_REALLY_EXTERN (decl)\n \t      && DECL_INITIAL (decl)\n-\t      && (DECL_NEEDED_P (decl) || !DECL_COMDAT (decl)))\n+\t      && DECL_NEEDED_P (decl))\n \t    DECL_EXTERNAL (decl) = 0;\n \n \t  /* If we're going to need to write this function out, and\n \t     there's already a body for it, create RTL for it now.\n \t     (There might be no body if this is a method we haven't\n \t     gotten around to synthesizing yet.)  */\n \t  if (!DECL_EXTERNAL (decl)\n-\t      && (DECL_NEEDED_P (decl) || !DECL_COMDAT (decl))\n+\t      && DECL_NEEDED_P (decl)\n \t      && DECL_SAVED_TREE (decl)\n \t      && !DECL_SAVED_INSNS (decl)\n \t      && !TREE_ASM_WRITTEN (decl))"}, {"sha": "4ccb986660b149ad77e3cb37b8cce5ae5d463355", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c913d336da5b631d785c103c87c886b5900ca15/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c913d336da5b631d785c103c87c886b5900ca15/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7c913d336da5b631d785c103c87c886b5900ca15", "patch": "@@ -9385,6 +9385,7 @@ instantiate_decl (d)\n   int pattern_defined;\n   int line = lineno;\n   char *file = input_filename;\n+  tree old_fn = current_function_decl;\n \n   /* This function should only be used to instantiate templates for\n      functions and static member variables.  */\n@@ -9510,14 +9511,15 @@ instantiate_decl (d)\n       && DECL_INITIAL (d) == NULL_TREE\n       && DECL_INITIAL (code_pattern) != NULL_TREE)\n     /* We need to set up DECL_INITIAL regardless of pattern_defined if\n-\t the variable is a static const initialized in the class body.  */;\n-  else if (! pattern_defined\n-\t   || (! (TREE_CODE (d) == FUNCTION_DECL && DECL_INLINE (d) && nested)\n-\t       && ! at_eof))\n-    {\n-      /* Defer all templates except inline functions used in another\n-         function.  We restore the source position here because it's used\n-         by add_pending_template.  */\n+       the variable is a static const initialized in the class body.  */;\n+  else if (pattern_defined && nested\n+\t   && TREE_CODE (d) == FUNCTION_DECL && DECL_INLINE (d))\n+    /* An inline function used in another function; instantiate it now so\n+       we can inline it.  */;\n+  else if (! pattern_defined || ! at_eof)\n+    {\n+      /* Defer all other templates.  We restore the source position\n+         here because it's used by add_pending_template.  */\n       lineno = line;\n       input_filename = file;\n \n@@ -9537,6 +9539,25 @@ instantiate_decl (d)\n       goto out;\n     }\n \n+  /* If this instantiation is COMDAT, we don't know whether or not we\n+     will really need to write it out.  If we can't be sure, mark it\n+     DECL_DEFER_OUTPUT.  NOTE: This increases memory consumption,\n+     since we keep some instantiations in memory rather than write\n+     them out immediately and forget them.  A better approach would be\n+     to wait until we know we need them to do the instantiation, but\n+     that would break templates with static locals, because we\n+     generate the functions to destroy statics before we determine\n+     which functions are needed.  A better solution would be to\n+     generate the ctor and dtor functions as we go.  */\n+\n+  if (TREE_CODE (d) == FUNCTION_DECL\n+      && DECL_COMDAT (d)\n+      && ! DECL_NEEDED_P (d)\n+      /* If the function that caused us to be instantiated is needed, we\n+\t will be needed, too.  */\n+      && (! nested || ! DECL_NEEDED_P (old_fn)))\n+    DECL_DEFER_OUTPUT (d) = 1;\n+\n   /* We're now committed to instantiating this template.  Mark it as\n      instantiated so that recursive calls to instantiate_decl do not\n      try to instantiate it again.  */"}]}