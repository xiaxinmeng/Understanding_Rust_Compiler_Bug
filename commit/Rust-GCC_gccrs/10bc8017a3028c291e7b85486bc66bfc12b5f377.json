{"sha": "10bc8017a3028c291e7b85486bc66bfc12b5f377", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBiYzgwMTdhMzAyOGMyOTFlN2I4NTQ4NmJjNjZiZmMxMmI1ZjM3Nw==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2017-05-25T08:39:37Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2017-05-25T08:39:37Z"}, "message": "Move \"(A & C) == D is false when D & ~C != 0\" to match.pd\n\n2017-05-25  Marc Glisse  <marc.glisse@inria.fr>\n\n\t* fold-const.c (fold_binary_loc) [(A & C) == D]: Remove transformation.\n\t* match.pd (X == C): Rewrite it here.\n\t(with_possible_nonzero_bits, with_possible_nonzero_bits2,\n\twith_certain_nonzero_bits2): New predicates.\n\t* tree-ssanames.c (get_nonzero_bits): Handle INTEGER_CST.\n\nFrom-SVN: r248447", "tree": {"sha": "0ae39800f5225d93ec8ee7ce60769570b69186da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ae39800f5225d93ec8ee7ce60769570b69186da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10bc8017a3028c291e7b85486bc66bfc12b5f377", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10bc8017a3028c291e7b85486bc66bfc12b5f377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10bc8017a3028c291e7b85486bc66bfc12b5f377", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10bc8017a3028c291e7b85486bc66bfc12b5f377/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d112b94ac4c8038056cf035dd8d550c9dc74b8e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d112b94ac4c8038056cf035dd8d550c9dc74b8e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d112b94ac4c8038056cf035dd8d550c9dc74b8e2"}], "stats": {"total": 58, "additions": 39, "deletions": 19}, "files": [{"sha": "5445bd5fd1fd0d1bf9b47333ef008dfe997445f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10bc8017a3028c291e7b85486bc66bfc12b5f377/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10bc8017a3028c291e7b85486bc66bfc12b5f377/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10bc8017a3028c291e7b85486bc66bfc12b5f377", "patch": "@@ -1,3 +1,11 @@\n+2017-05-25  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* fold-const.c (fold_binary_loc) [(A & C) == D]: Remove transformation.\n+\t* match.pd (X == C): Rewrite it here.\n+\t(with_possible_nonzero_bits, with_possible_nonzero_bits2,\n+\twith_certain_nonzero_bits2): New predicates.\n+\t* tree-ssanames.c (get_nonzero_bits): Handle INTEGER_CST.\n+\n 2017-05-24  Nathan Sidwell  <nathan@acm.org>\n \n \t* lto-streamer-in.c (lto_input_data_block): Adjust T const cast to"}, {"sha": "efc0b1080593ccb13ae5564f736d99fe64ef30af", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10bc8017a3028c291e7b85486bc66bfc12b5f377/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10bc8017a3028c291e7b85486bc66bfc12b5f377/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=10bc8017a3028c291e7b85486bc66bfc12b5f377", "patch": "@@ -10636,24 +10636,6 @@ fold_binary_loc (location_t loc,\n \t    }\n \t}\n \n-      /* If we have (A & C) == D where D & ~C != 0, convert this into 0.\n-\t Similarly for NE_EXPR.  */\n-      if (TREE_CODE (arg0) == BIT_AND_EXPR\n-\t  && TREE_CODE (arg1) == INTEGER_CST\n-\t  && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST)\n-\t{\n-\t  tree notc = fold_build1_loc (loc, BIT_NOT_EXPR,\n-\t\t\t\t   TREE_TYPE (TREE_OPERAND (arg0, 1)),\n-\t\t\t\t   TREE_OPERAND (arg0, 1));\n-\t  tree dandnotc\n-\t    = fold_build2_loc (loc, BIT_AND_EXPR, TREE_TYPE (arg0),\n-\t\t\t       fold_convert_loc (loc, TREE_TYPE (arg0), arg1),\n-\t\t\t       notc);\n-\t  tree rslt = code == EQ_EXPR ? integer_zero_node : integer_one_node;\n-\t  if (integer_nonzerop (dandnotc))\n-\t    return omit_one_operand_loc (loc, type, rslt, arg0);\n-\t}\n-\n       /* If this is a comparison of a field, we may be able to simplify it.  */\n       if ((TREE_CODE (arg0) == COMPONENT_REF\n \t   || TREE_CODE (arg0) == BIT_FIELD_REF)"}, {"sha": "618b2ec3da83c6a9a2bcbc91710825144482b8c3", "filename": "gcc/match.pd", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10bc8017a3028c291e7b85486bc66bfc12b5f377/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10bc8017a3028c291e7b85486bc66bfc12b5f377/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=10bc8017a3028c291e7b85486bc66bfc12b5f377", "patch": "@@ -1097,6 +1097,33 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (if (TREE_INT_CST_LOW (@1) & 1)\n    { constant_boolean_node (cmp == NE_EXPR, type); })))\n \n+/* Arguments on which one can call get_nonzero_bits to get the bits\n+   possibly set.  */\n+(match with_possible_nonzero_bits\n+ INTEGER_CST@0)\n+(match with_possible_nonzero_bits\n+ SSA_NAME@0\n+ (if (INTEGRAL_TYPE_P (TREE_TYPE (@0)) || POINTER_TYPE_P (TREE_TYPE (@0)))))\n+/* Slightly extended version, do not make it recursive to keep it cheap.  */\n+(match (with_possible_nonzero_bits2 @0)\n+ with_possible_nonzero_bits@0)\n+(match (with_possible_nonzero_bits2 @0)\n+ (bit_and:c with_possible_nonzero_bits@0 @2))\n+\n+/* Same for bits that are known to be set, but we do not have\n+   an equivalent to get_nonzero_bits yet.  */\n+(match (with_certain_nonzero_bits2 @0)\n+ INTEGER_CST@0)\n+(match (with_certain_nonzero_bits2 @0)\n+ (bit_ior @1 INTEGER_CST@0))\n+\n+/* X == C (or X & Z == Y | C) is impossible if ~nonzero(X) & C != 0.  */\n+(for cmp (eq ne)\n+ (simplify\n+  (cmp:c (with_possible_nonzero_bits2 @0) (with_certain_nonzero_bits2 @1))\n+  (if ((~get_nonzero_bits (@0) & @1) != 0)\n+   { constant_boolean_node (cmp == NE_EXPR, type); })))\n+\n /* ((X inner_op C0) outer_op C1)\n    With X being a tree where value_range has reasoned certain bits to always be\n    zero throughout its computed value range,"}, {"sha": "e83dd469846b61c8b8e9e6d7556935545f368a21", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10bc8017a3028c291e7b85486bc66bfc12b5f377/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10bc8017a3028c291e7b85486bc66bfc12b5f377/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=10bc8017a3028c291e7b85486bc66bfc12b5f377", "patch": "@@ -427,11 +427,14 @@ set_nonzero_bits (tree name, const wide_int_ref &mask)\n }\n \n /* Return a widest_int with potentially non-zero bits in SSA_NAME\n-   NAME, or -1 if unknown.  */\n+   NAME, the constant for INTEGER_CST, or -1 if unknown.  */\n \n wide_int\n get_nonzero_bits (const_tree name)\n {\n+  if (TREE_CODE (name) == INTEGER_CST)\n+    return name;\n+\n   unsigned int precision = TYPE_PRECISION (TREE_TYPE (name));\n   if (POINTER_TYPE_P (TREE_TYPE (name)))\n     {"}]}