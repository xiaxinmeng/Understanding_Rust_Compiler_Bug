{"sha": "401fcd3b8fd7158703263fd4de33a23faa7a2738", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAxZmNkM2I4ZmQ3MTU4NzAzMjYzZmQ0ZGUzM2EyM2ZhYTdhMjczOA==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2010-08-27T06:50:03Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2010-08-27T06:50:03Z"}, "message": "re PR fortran/43217 (Output of Hollerith constants which are not a multiple of 4 bytes)\n\n2010-08-27  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR fortran/43217\n\t* primary.c (match_hollerith_constant): Calculate padding needed to\n\tfill default integer and allocate string for that size.  Set pad bytes\n\tto ' '.\n\t* gfortran.h: Add hollerith pad value to type spec union.\n\t* data.c (create_character_initializer): Fix spelling of function name.\n\tUse hollerith pad value to calculate length.\n\t* arith.c (hollerith2representation); Use hollerith pad value to\n\tcalculate length.\n\nFrom-SVN: r163581", "tree": {"sha": "b23e60e3b6c1de5d17cec4f6a741db7d30a1e5bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b23e60e3b6c1de5d17cec4f6a741db7d30a1e5bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/401fcd3b8fd7158703263fd4de33a23faa7a2738", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/401fcd3b8fd7158703263fd4de33a23faa7a2738", "html_url": "https://github.com/Rust-GCC/gccrs/commit/401fcd3b8fd7158703263fd4de33a23faa7a2738", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/401fcd3b8fd7158703263fd4de33a23faa7a2738/comments", "author": null, "committer": null, "parents": [{"sha": "9f8f1def9dd5d303a437397c5e1aaa60aef468d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f8f1def9dd5d303a437397c5e1aaa60aef468d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f8f1def9dd5d303a437397c5e1aaa60aef468d9"}], "stats": {"total": 39, "additions": 30, "deletions": 9}, "files": [{"sha": "f28030f936ebf4cb259f42b807454dc38729af79", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/401fcd3b8fd7158703263fd4de33a23faa7a2738/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/401fcd3b8fd7158703263fd4de33a23faa7a2738/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=401fcd3b8fd7158703263fd4de33a23faa7a2738", "patch": "@@ -1,3 +1,15 @@\n+2010-08-27  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR fortran/43217\n+\t* primary.c (match_hollerith_constant): Calculate padding needed to\n+\tfill default integer and allocate string for that size.  Set pad bytes\n+\tto ' '.\n+\t* gfortran.h: Add hollerith pad value to type spec union.\n+\t* data.c (create_character_initializer): Fix spelling of function name.\n+\tUse hollerith pad value to calculate length.\n+\t* arith.c (hollerith2representation); Use hollerith pad value to\n+\tcalculate length.\n+\n 2010-08-26  Daniel Kraft  <d@domob.eu>\n \n \tPR fortran/38936"}, {"sha": "2a9ea7501036e0e9a3f1052bc887119b8fb275d6", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/401fcd3b8fd7158703263fd4de33a23faa7a2738/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/401fcd3b8fd7158703263fd4de33a23faa7a2738/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=401fcd3b8fd7158703263fd4de33a23faa7a2738", "patch": "@@ -2260,7 +2260,7 @@ hollerith2representation (gfc_expr *result, gfc_expr *src)\n {\n   int src_len, result_len;\n \n-  src_len = src->representation.length;\n+  src_len = src->representation.length - src->ts.u.pad;\n   result_len = gfc_target_expr_size (result);\n \n   if (src_len > result_len)"}, {"sha": "b1cfd6ec75b082c3270d4596022ad74b02fdf3af", "filename": "gcc/fortran/data.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/401fcd3b8fd7158703263fd4de33a23faa7a2738/gcc%2Ffortran%2Fdata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/401fcd3b8fd7158703263fd4de33a23faa7a2738/gcc%2Ffortran%2Fdata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdata.c?ref=401fcd3b8fd7158703263fd4de33a23faa7a2738", "patch": "@@ -100,8 +100,8 @@ find_con_by_component (gfc_component *com, gfc_constructor_base base)\n    according to normal assignment rules.  */\n \n static gfc_expr *\n-create_character_intializer (gfc_expr *init, gfc_typespec *ts,\n-\t\t\t     gfc_ref *ref, gfc_expr *rvalue)\n+create_character_initializer (gfc_expr *init, gfc_typespec *ts,\n+\t\t\t      gfc_ref *ref, gfc_expr *rvalue)\n {\n   int len, start, end;\n   gfc_char_t *dest;\n@@ -149,7 +149,7 @@ create_character_intializer (gfc_expr *init, gfc_typespec *ts,\n \n   /* Copy the initial value.  */\n   if (rvalue->ts.type == BT_HOLLERITH)\n-    len = rvalue->representation.length;\n+    len = rvalue->representation.length - rvalue->ts.u.pad;\n   else\n     len = rvalue->value.character.length;\n \n@@ -342,7 +342,7 @@ gfc_assign_data_value (gfc_expr *lvalue, gfc_expr *rvalue, mpz_t index)\n     {\n       if (lvalue->ts.u.cl->length == NULL && !(ref && ref->u.ss.length != NULL))\n \treturn FAILURE;\n-      expr = create_character_intializer (init, last_ts, ref, rvalue);\n+      expr = create_character_initializer (init, last_ts, ref, rvalue);\n     }\n   else\n     {"}, {"sha": "c84c63387a21343338c4785f71475fc938a2809e", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/401fcd3b8fd7158703263fd4de33a23faa7a2738/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/401fcd3b8fd7158703263fd4de33a23faa7a2738/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=401fcd3b8fd7158703263fd4de33a23faa7a2738", "patch": "@@ -880,6 +880,7 @@ typedef struct\n   {\n     struct gfc_symbol *derived;\t/* For derived types only.  */\n     gfc_charlen *cl;\t\t/* For character types only.  */\n+    int pad;\t\t\t/* For hollerith types only.  */\n   }\n   u;\n "}, {"sha": "b07632d951cb4c9ade0f950e1f696ec51587bf3d", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/401fcd3b8fd7158703263fd4de33a23faa7a2738/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/401fcd3b8fd7158703263fd4de33a23faa7a2738/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=401fcd3b8fd7158703263fd4de33a23faa7a2738", "patch": "@@ -242,7 +242,7 @@ match_hollerith_constant (gfc_expr **result)\n   locus old_loc;\n   gfc_expr *e = NULL;\n   const char *msg;\n-  int num;\n+  int num, pad;\n   int i;  \n \n   old_loc = gfc_current_locus;\n@@ -279,7 +279,10 @@ match_hollerith_constant (gfc_expr **result)\n \t  e = gfc_get_constant_expr (BT_HOLLERITH, gfc_default_character_kind,\n \t\t\t\t     &gfc_current_locus);\n \n-\t  e->representation.string = XCNEWVEC (char, num + 1);\n+\t  /* Calculate padding needed to fit default integer memory.  */\n+\t  pad = gfc_default_integer_kind - (num % gfc_default_integer_kind);\n+\n+\t  e->representation.string = XCNEWVEC (char, num + pad + 1);\n \n \t  for (i = 0; i < num; i++)\n \t    {\n@@ -294,8 +297,13 @@ match_hollerith_constant (gfc_expr **result)\n \t      e->representation.string[i] = (unsigned char) c;\n \t    }\n \n-\t  e->representation.string[num] = '\\0';\n-\t  e->representation.length = num;\n+\t  /* Now pad with blanks and end with a null char.  */\n+\t  for (i = 0; i < pad; i++)\n+\t    e->representation.string[num + i] = ' ';\n+\n+\t  e->representation.string[num + i] = '\\0';\n+\t  e->representation.length = num + pad;\n+\t  e->ts.u.pad = pad;\n \n \t  *result = e;\n \t  return MATCH_YES;"}]}