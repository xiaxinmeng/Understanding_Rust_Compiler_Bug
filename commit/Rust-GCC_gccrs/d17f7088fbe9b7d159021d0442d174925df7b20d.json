{"sha": "d17f7088fbe9b7d159021d0442d174925df7b20d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE3ZjcwODhmYmU5YjdkMTU5MDIxZDA0NDJkMTc0OTI1ZGY3YjIwZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-10-21T17:01:05Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-21T17:01:05Z"}, "message": "LWG2720 implement filesystem::perms::symlink_nofollow\n\n\t* include/experimental/bits/fs_fwd.h (perms::resolve_symlinks):\n\tReplace with symlink_nofollow (LWG 2720).\n\t* src/filesystem/ops.cc (permissions(const path&, perms, error_code&)):\n\tHandle symlink_nofollow.\n\t* testsuite/experimental/filesystem/operations/create_symlink.cc: New\n\ttest.\n\t* testsuite/experimental/filesystem/operations/permissions.cc: Test\n\toverload taking error_code.\n\nFrom-SVN: r241418", "tree": {"sha": "8368472a50257c8a6a58991fb43b970d547507cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8368472a50257c8a6a58991fb43b970d547507cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d17f7088fbe9b7d159021d0442d174925df7b20d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d17f7088fbe9b7d159021d0442d174925df7b20d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d17f7088fbe9b7d159021d0442d174925df7b20d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d17f7088fbe9b7d159021d0442d174925df7b20d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2be921271333c81ec9fcf71ba49110bf23971d09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2be921271333c81ec9fcf71ba49110bf23971d09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2be921271333c81ec9fcf71ba49110bf23971d09"}], "stats": {"total": 198, "additions": 192, "deletions": 6}, "files": [{"sha": "fd79decb4d8ac30d0491274d47557d095854a40a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d17f7088fbe9b7d159021d0442d174925df7b20d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d17f7088fbe9b7d159021d0442d174925df7b20d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d17f7088fbe9b7d159021d0442d174925df7b20d", "patch": "@@ -1,5 +1,14 @@\n 2016-10-21  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/experimental/bits/fs_fwd.h (perms::resolve_symlinks):\n+\tReplace with symlink_nofollow (LWG 2720).\n+\t* src/filesystem/ops.cc (permissions(const path&, perms, error_code&)):\n+\tHandle symlink_nofollow.\n+\t* testsuite/experimental/filesystem/operations/create_symlink.cc: New\n+\ttest.\n+\t* testsuite/experimental/filesystem/operations/permissions.cc: Test\n+\toverload taking error_code.\n+\n \t* include/experimental/bits/fs_ops.h\n \t(exists(const path&, error_code&)): Clear error if status is known\n \t(LWG 2725)."}, {"sha": "fb8521a800190920e48aeba16df98c67bf29adaa", "filename": "libstdc++-v3/include/experimental/bits/fs_fwd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d17f7088fbe9b7d159021d0442d174925df7b20d/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_fwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d17f7088fbe9b7d159021d0442d174925df7b20d/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_fwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_fwd.h?ref=d17f7088fbe9b7d159021d0442d174925df7b20d", "patch": "@@ -162,7 +162,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       unknown\t\t=  0xFFFF,\n       add_perms\t\t= 0x10000,\n       remove_perms\t= 0x20000,\n-      resolve_symlinks\t= 0x40000\n+      symlink_nofollow\t= 0x40000\n   };\n \n   constexpr perms"}, {"sha": "68343a938249bb9a3acca59f296ede76d2fd955b", "filename": "libstdc++-v3/src/filesystem/ops.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d17f7088fbe9b7d159021d0442d174925df7b20d/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d17f7088fbe9b7d159021d0442d174925df7b20d/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc?ref=d17f7088fbe9b7d159021d0442d174925df7b20d", "patch": "@@ -1101,6 +1101,7 @@ void fs::permissions(const path& p, perms prms, error_code& ec) noexcept\n {\n   const bool add = is_set(prms, perms::add_perms);\n   const bool remove = is_set(prms, perms::remove_perms);\n+  const bool nofollow = is_set(prms, perms::symlink_nofollow);\n   if (add && remove)\n     {\n       ec = std::make_error_code(std::errc::invalid_argument);\n@@ -1111,7 +1112,7 @@ void fs::permissions(const path& p, perms prms, error_code& ec) noexcept\n \n   if (add || remove)\n     {\n-      auto st = status(p, ec);\n+      auto st = nofollow ? symlink_status(p, ec) : status(p, ec);\n       if (ec)\n \treturn;\n       auto curr = st.permissions();\n@@ -1122,9 +1123,12 @@ void fs::permissions(const path& p, perms prms, error_code& ec) noexcept\n     }\n \n #if _GLIBCXX_USE_FCHMODAT\n-  if (::fchmodat(AT_FDCWD, p.c_str(), static_cast<mode_t>(prms), 0))\n+  const int flag = nofollow ? AT_SYMLINK_NOFOLLOW : 0;\n+  if (::fchmodat(AT_FDCWD, p.c_str(), static_cast<mode_t>(prms), flag))\n #else\n-  if (::chmod(p.c_str(), static_cast<mode_t>(prms)))\n+  if (nofollow)\n+    ec = std::make_error_code(std::errc::operation_not_supported);\n+  else if (::chmod(p.c_str(), static_cast<mode_t>(prms)))\n #endif\n     ec.assign(errno, std::generic_category());\n   else"}, {"sha": "7297259d8c0e33a351f6c3d63c60c561723f6b90", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/create_symlink.cc", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d17f7088fbe9b7d159021d0442d174925df7b20d/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcreate_symlink.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d17f7088fbe9b7d159021d0442d174925df7b20d/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcreate_symlink.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcreate_symlink.cc?ref=d17f7088fbe9b7d159021d0442d174925df7b20d", "patch": "@@ -0,0 +1,93 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-lstdc++fs\" }\n+// { dg-do run { target c++11 } }\n+// { dg-require-filesystem-ts \"\" }\n+\n+#include <experimental/filesystem>\n+#include <testsuite_hooks.h>\n+#include <testsuite_fs.h>\n+\n+namespace fs = std::experimental::filesystem;\n+\n+void\n+test01()\n+{\n+  std::error_code ec, ec2;\n+  __gnu_test::scoped_file f;\n+  auto tgt = f.path;\n+\n+  // Test empty path.\n+  fs::path p;\n+  create_symlink(tgt, p, ec );\n+  VERIFY( ec );\n+  try\n+  {\n+    create_symlink(tgt, p);\n+  }\n+  catch (const std::experimental::filesystem::filesystem_error& ex)\n+  {\n+    ec2 = ex.code();\n+    VERIFY( ex.path1() == tgt );\n+    VERIFY( ex.path2() == p );\n+  }\n+  VERIFY( ec2 == ec );\n+}\n+\n+void\n+test02()\n+{\n+  std::error_code ec, ec2;\n+  __gnu_test::scoped_file f;\n+  auto tgt = f.path;\n+\n+  // Test non-existent path\n+  auto p = __gnu_test::nonexistent_path();\n+  VERIFY( !exists(p) );\n+\n+  create_symlink(tgt, p, ec); // create the symlink once\n+  VERIFY( !ec );\n+  VERIFY( exists(p) );\n+  VERIFY( is_symlink(p) );\n+  remove(p);\n+  create_symlink(tgt, p); // create the symlink again\n+  VERIFY( exists(p) );\n+  VERIFY( is_symlink(p) );\n+\n+  create_symlink(tgt, p, ec); // Try to create existing symlink\n+  VERIFY( ec );\n+  try\n+  {\n+    create_symlink(tgt, p);\n+  }\n+  catch (const std::experimental::filesystem::filesystem_error& ex)\n+  {\n+    ec2 = ex.code();\n+    VERIFY( ex.path1() == tgt );\n+    VERIFY( ex.path2() == p );\n+  }\n+  VERIFY( ec2 == ec );\n+\n+  remove(p);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "839cfefa8827bf400e288d5c6e299710822b3dfc", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/permissions.cc", "status": "modified", "additions": 82, "deletions": 2, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d17f7088fbe9b7d159021d0442d174925df7b20d/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fpermissions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d17f7088fbe9b7d159021d0442d174925df7b20d/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fpermissions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fpermissions.cc?ref=d17f7088fbe9b7d159021d0442d174925df7b20d", "patch": "@@ -22,7 +22,6 @@\n // 15.26 Permissions [fs.op.permissions]\n \n #include <experimental/filesystem>\n-#include <fstream>\n #include <testsuite_fs.h>\n #include <testsuite_hooks.h>\n \n@@ -32,14 +31,92 @@ test01()\n   using perms = std::experimental::filesystem::perms;\n \n   auto p = __gnu_test::nonexistent_path();\n-  std::ofstream{p.native()};\n+\n+  __gnu_test::scoped_file f(p);\n   VERIFY( exists(p) );\n   permissions(p, perms::owner_all);\n   VERIFY( status(p).permissions() == perms::owner_all );\n   permissions(p, perms::group_read | perms::add_perms);\n   VERIFY( status(p).permissions() == (perms::owner_all | perms::group_read) );\n   permissions(p, perms::group_read | perms::remove_perms);\n   VERIFY( status(p).permissions() == perms::owner_all );\n+}\n+\n+void\n+test02()\n+{\n+  using perms = std::experimental::filesystem::perms;\n+\n+  auto p = __gnu_test::nonexistent_path();\n+\n+  std::error_code ec;\n+  permissions(p, perms::owner_all, ec);\n+  VERIFY( ec );\n+\n+  __gnu_test::scoped_file f(p);\n+  VERIFY( exists(p) );\n+\n+  ec = std::make_error_code(std::errc::invalid_argument);\n+  permissions(p, perms::owner_all, ec);\n+  VERIFY( !ec );\n+  VERIFY( status(p).permissions() == perms::owner_all );\n+  permissions(p, perms::group_read | perms::add_perms, ec);\n+  VERIFY( !ec );\n+  VERIFY( status(p).permissions() == (perms::owner_all | perms::group_read) );\n+  permissions(p, perms::group_read | perms::remove_perms, ec);\n+  VERIFY( !ec );\n+  VERIFY( status(p).permissions() == perms::owner_all );\n+}\n+\n+void\n+test03()\n+{\n+  using perms = std::experimental::filesystem::perms;\n+\n+  __gnu_test::scoped_file f;\n+  VERIFY( exists(f.path) );\n+\n+  auto p = __gnu_test::nonexistent_path();\n+  create_symlink(f.path, p);\n+\n+  std::error_code ec, ec2;\n+  permissions(p, perms::owner_all | perms::symlink_nofollow, ec);\n+  try\n+  {\n+    permissions(p, perms::owner_all | perms::symlink_nofollow);\n+  }\n+  catch (const std::experimental::filesystem::filesystem_error& ex)\n+  {\n+    ec2 = ex.code();\n+    VERIFY( ex.path1() == p );\n+  }\n+  // Both calls should succeed, or both should fail with same error:\n+  VERIFY( ec == ec2 );\n+\n+  remove(p);\n+}\n+\n+void\n+test04()\n+{\n+  using perms = std::experimental::filesystem::perms;\n+\n+  auto p = __gnu_test::nonexistent_path();\n+  create_symlink(__gnu_test::nonexistent_path(), p);\n+\n+  std::error_code ec, ec2;\n+  permissions(p, perms::owner_all, ec);\n+  VERIFY( ec );\n+  try\n+  {\n+    permissions(p, perms::owner_all);\n+  }\n+  catch (const std::experimental::filesystem::filesystem_error& ex)\n+  {\n+    ec2 = ex.code();\n+    VERIFY( ex.path1() == p );\n+  }\n+  VERIFY( ec == ec2 );\n \n   remove(p);\n }\n@@ -48,4 +125,7 @@ int\n main()\n {\n   test01();\n+  test02();\n+  test03();\n+  test04();\n }"}]}