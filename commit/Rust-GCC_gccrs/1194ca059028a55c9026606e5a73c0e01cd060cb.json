{"sha": "1194ca059028a55c9026606e5a73c0e01cd060cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE5NGNhMDU5MDI4YTU1YzkwMjY2MDZlNWE3M2MwZTAxY2QwNjBjYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-10-19T22:34:17Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-10-19T22:34:17Z"}, "message": "i386.c (classify_argument): Pass MMX arguments in memory\n\n\t* i386.c (classify_argument): Pass MMX arguments in memory\n\t(ix86_expand_builtin): Expand proper address mode for cflush.\n\t* i386.md (movdqa): Fix typo.\n\t(sse2_cflush): Accept DImode addresses.\n\n\t* xmmintrin.h (_mm_sqrt_sd): Accept two arguments.\n\t(_mm_max_sd): Fix pasto.\n\t(_mm_storeh_pd, _mm_storel_pd): Fix.\n\n\t* i386.c (bdesc_comi): Fix to match specification.\n\t(ix86_expand_sse_comi): Emit the comparison properly.\n\t* i386.md (sse_comi, sse2_comi, sse_ucomi, sse2_ucomi):\n\tDo not use comparison operator.\n\t(vnmaskcmp): Fix template.\n\n\t* xmmintrin.h (_mm_cvtps_pi16): Fix.\n\nFrom-SVN: r58321", "tree": {"sha": "53bb2bf8487e0e204337aba70d193af71e5cdde7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53bb2bf8487e0e204337aba70d193af71e5cdde7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1194ca059028a55c9026606e5a73c0e01cd060cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1194ca059028a55c9026606e5a73c0e01cd060cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1194ca059028a55c9026606e5a73c0e01cd060cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1194ca059028a55c9026606e5a73c0e01cd060cb/comments", "author": null, "committer": null, "parents": [{"sha": "0d8b229b8ec256eb18183d63bd7739483936c8cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d8b229b8ec256eb18183d63bd7739483936c8cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d8b229b8ec256eb18183d63bd7739483936c8cd"}], "stats": {"total": 169, "additions": 96, "deletions": 73}, "files": [{"sha": "a73f5dae512f3c039072d63c2cbf33f75e8f8229", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1194ca059028a55c9026606e5a73c0e01cd060cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1194ca059028a55c9026606e5a73c0e01cd060cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1194ca059028a55c9026606e5a73c0e01cd060cb", "patch": "@@ -1,3 +1,22 @@\n+Sun Oct 20 00:31:31 CEST 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.c (classify_argument): Pass MMX arguments in memory\n+\t(ix86_expand_builtin): Expand proper address mode for cflush.\n+\t* i386.md (movdqa): Fix typo.\n+\t(sse2_cflush): Accept DImode addresses.\n+\n+\t* xmmintrin.h (_mm_sqrt_sd): Accept two arguments.\n+\t(_mm_max_sd): Fix pasto.\n+\t(_mm_storeh_pd, _mm_storel_pd): Fix.\n+\n+\t* i386.c (bdesc_comi): Fix to match specification.\n+\t(ix86_expand_sse_comi): Emit the comparison properly.\n+\t* i386.md (sse_comi, sse2_comi, sse_ucomi, sse2_ucomi):\n+\tDo not use comparison operator.\n+\t(vnmaskcmp): Fix template.\n+\n+\t* xmmintrin.h (_mm_cvtps_pi16): Fix.\n+\n 2002-10-19  Sebastian Pop  <s.pop@laposte.net>\n \n \t* dependence.c : Removed."}, {"sha": "11602573dd4fbdacc3ce5659473e1ebf2044064a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 29, "deletions": 31, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1194ca059028a55c9026606e5a73c0e01cd060cb/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1194ca059028a55c9026606e5a73c0e01cd060cb/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1194ca059028a55c9026606e5a73c0e01cd060cb", "patch": "@@ -1922,8 +1922,7 @@ classify_argument (mode, type, classes, bit_offset)\n     case V2SImode:\n     case V4HImode:\n     case V8QImode:\n-      classes[0] = X86_64_SSE_CLASS;\n-      return 1;\n+      return 0;\n     case BLKmode:\n     case VOIDmode:\n       return 0;\n@@ -11755,30 +11754,30 @@ struct builtin_description\n \n static const struct builtin_description bdesc_comi[] =\n {\n-  { MASK_SSE1, CODE_FOR_sse_comi, \"__builtin_ia32_comieq\", IX86_BUILTIN_COMIEQSS, EQ, 0 },\n-  { MASK_SSE1, CODE_FOR_sse_comi, \"__builtin_ia32_comilt\", IX86_BUILTIN_COMILTSS, LT, 0 },\n-  { MASK_SSE1, CODE_FOR_sse_comi, \"__builtin_ia32_comile\", IX86_BUILTIN_COMILESS, LE, 0 },\n-  { MASK_SSE1, CODE_FOR_sse_comi, \"__builtin_ia32_comigt\", IX86_BUILTIN_COMIGTSS, LT, 1 },\n-  { MASK_SSE1, CODE_FOR_sse_comi, \"__builtin_ia32_comige\", IX86_BUILTIN_COMIGESS, LE, 1 },\n-  { MASK_SSE1, CODE_FOR_sse_comi, \"__builtin_ia32_comineq\", IX86_BUILTIN_COMINEQSS, NE, 0 },\n-  { MASK_SSE1, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomieq\", IX86_BUILTIN_UCOMIEQSS, EQ, 0 },\n-  { MASK_SSE1, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomilt\", IX86_BUILTIN_UCOMILTSS, LT, 0 },\n-  { MASK_SSE1, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomile\", IX86_BUILTIN_UCOMILESS, LE, 0 },\n-  { MASK_SSE1, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomigt\", IX86_BUILTIN_UCOMIGTSS, LT, 1 },\n-  { MASK_SSE1, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomige\", IX86_BUILTIN_UCOMIGESS, LE, 1 },\n-  { MASK_SSE1, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomineq\", IX86_BUILTIN_UCOMINEQSS, NE, 0 },\n-  { MASK_SSE2, CODE_FOR_sse2_comi, \"__builtin_ia32_comisdeq\", IX86_BUILTIN_COMIEQSD, EQ, 0 },\n-  { MASK_SSE2, CODE_FOR_sse2_comi, \"__builtin_ia32_comisdlt\", IX86_BUILTIN_COMILTSD, LT, 0 },\n-  { MASK_SSE2, CODE_FOR_sse2_comi, \"__builtin_ia32_comisdle\", IX86_BUILTIN_COMILESD, LE, 0 },\n-  { MASK_SSE2, CODE_FOR_sse2_comi, \"__builtin_ia32_comisdgt\", IX86_BUILTIN_COMIGTSD, LT, 1 },\n-  { MASK_SSE2, CODE_FOR_sse2_comi, \"__builtin_ia32_comisdge\", IX86_BUILTIN_COMIGESD, LE, 1 },\n-  { MASK_SSE2, CODE_FOR_sse2_comi, \"__builtin_ia32_comisdneq\", IX86_BUILTIN_COMINEQSD, NE, 0 },\n-  { MASK_SSE2, CODE_FOR_sse2_ucomi, \"__builtin_ia32_ucomisdeq\", IX86_BUILTIN_UCOMIEQSD, EQ, 0 },\n-  { MASK_SSE2, CODE_FOR_sse2_ucomi, \"__builtin_ia32_ucomisdlt\", IX86_BUILTIN_UCOMILTSD, LT, 0 },\n-  { MASK_SSE2, CODE_FOR_sse2_ucomi, \"__builtin_ia32_ucomisdle\", IX86_BUILTIN_UCOMILESD, LE, 0 },\n-  { MASK_SSE2, CODE_FOR_sse2_ucomi, \"__builtin_ia32_ucomisdgt\", IX86_BUILTIN_UCOMIGTSD, LT, 1 },\n-  { MASK_SSE2, CODE_FOR_sse2_ucomi, \"__builtin_ia32_ucomisdge\", IX86_BUILTIN_UCOMIGESD, LE, 1 },\n-  { MASK_SSE2, CODE_FOR_sse2_ucomi, \"__builtin_ia32_ucomisdneq\", IX86_BUILTIN_UCOMINEQSD, NE, 0 },\n+  { MASK_SSE1, CODE_FOR_sse_comi, \"__builtin_ia32_comieq\", IX86_BUILTIN_COMIEQSS, UNEQ, 0 },\n+  { MASK_SSE1, CODE_FOR_sse_comi, \"__builtin_ia32_comilt\", IX86_BUILTIN_COMILTSS, UNLT, 0 },\n+  { MASK_SSE1, CODE_FOR_sse_comi, \"__builtin_ia32_comile\", IX86_BUILTIN_COMILESS, UNLE, 0 },\n+  { MASK_SSE1, CODE_FOR_sse_comi, \"__builtin_ia32_comigt\", IX86_BUILTIN_COMIGTSS, GT, 0 },\n+  { MASK_SSE1, CODE_FOR_sse_comi, \"__builtin_ia32_comige\", IX86_BUILTIN_COMIGESS, GE, 0 },\n+  { MASK_SSE1, CODE_FOR_sse_comi, \"__builtin_ia32_comineq\", IX86_BUILTIN_COMINEQSS, LTGT, 0 },\n+  { MASK_SSE1, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomieq\", IX86_BUILTIN_UCOMIEQSS, UNEQ, 0 },\n+  { MASK_SSE1, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomilt\", IX86_BUILTIN_UCOMILTSS, UNLT, 0 },\n+  { MASK_SSE1, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomile\", IX86_BUILTIN_UCOMILESS, UNLE, 0 },\n+  { MASK_SSE1, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomigt\", IX86_BUILTIN_UCOMIGTSS, GT, 0 },\n+  { MASK_SSE1, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomige\", IX86_BUILTIN_UCOMIGESS, GE, 0 },\n+  { MASK_SSE1, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomineq\", IX86_BUILTIN_UCOMINEQSS, LTGT, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_comi, \"__builtin_ia32_comisdeq\", IX86_BUILTIN_COMIEQSD, UNEQ, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_comi, \"__builtin_ia32_comisdlt\", IX86_BUILTIN_COMILTSD, UNLT, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_comi, \"__builtin_ia32_comisdle\", IX86_BUILTIN_COMILESD, UNLE, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_comi, \"__builtin_ia32_comisdgt\", IX86_BUILTIN_COMIGTSD, GT, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_comi, \"__builtin_ia32_comisdge\", IX86_BUILTIN_COMIGESD, GE, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_comi, \"__builtin_ia32_comisdneq\", IX86_BUILTIN_COMINEQSD, LTGT, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_ucomi, \"__builtin_ia32_ucomisdeq\", IX86_BUILTIN_UCOMIEQSD, UNEQ, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_ucomi, \"__builtin_ia32_ucomisdlt\", IX86_BUILTIN_UCOMILTSD, UNLT, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_ucomi, \"__builtin_ia32_ucomisdle\", IX86_BUILTIN_UCOMILESD, UNLE, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_ucomi, \"__builtin_ia32_ucomisdgt\", IX86_BUILTIN_UCOMIGTSD, GT, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_ucomi, \"__builtin_ia32_ucomisdge\", IX86_BUILTIN_UCOMIGESD, GE, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_ucomi, \"__builtin_ia32_ucomisdneq\", IX86_BUILTIN_UCOMINEQSD, LTGT, 0 },\n };\n \n static const struct builtin_description bdesc_2arg[] =\n@@ -12881,14 +12880,14 @@ ix86_expand_sse_comi (d, arglist, target)\n     op1 = copy_to_mode_reg (mode1, op1);\n \n   op2 = gen_rtx_fmt_ee (comparison, mode0, op0, op1);\n-  pat = GEN_FCN (d->icode) (op0, op1, op2);\n+  pat = GEN_FCN (d->icode) (op0, op1);\n   if (! pat)\n     return 0;\n   emit_insn (pat);\n   emit_insn (gen_rtx_SET (VOIDmode,\n \t\t\t  gen_rtx_STRICT_LOW_PART (VOIDmode, target),\n \t\t\t  gen_rtx_fmt_ee (comparison, QImode,\n-\t\t\t\t\t  gen_rtx_REG (CCmode, FLAGS_REG),\n+\t\t\t\t\t  SET_DEST (pat),\n \t\t\t\t\t  const0_rtx)));\n \n   return SUBREG_REG (target);\n@@ -13349,9 +13348,8 @@ ix86_expand_builtin (exp, target, subtarget, mode, ignore)\n \targ0 = TREE_VALUE (arglist);\n \top0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n \ticode = CODE_FOR_sse2_clflush;\n-\tmode0 = insn_data[icode].operand[0].mode;\n-\tif (! (*insn_data[icode].operand[0].predicate) (op0, mode0))\n-\t    op0 = copy_to_mode_reg (mode0, op0);\n+\tif (! (*insn_data[icode].operand[0].predicate) (op0, Pmode))\n+\t    op0 = copy_to_mode_reg (Pmode, op0);\n \n \temit_insn (gen_sse2_clflush (op0));\n \treturn 0;"}, {"sha": "6825149b1e6f6c68b0619cef01bd425b85afd074", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 38, "deletions": 32, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1194ca059028a55c9026606e5a73c0e01cd060cb/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1194ca059028a55c9026606e5a73c0e01cd060cb/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1194ca059028a55c9026606e5a73c0e01cd060cb", "patch": "@@ -17828,7 +17828,7 @@\n \t(match_operand:V2DI 1 \"nonimmediate_operand\" \"xm,x\"))]\n   \"TARGET_SSE\"\n   ;; @@@ let's try to use movaps here.\n-  \"movdga\\t{%1, %0|%0, %1}\"\n+  \"movdqa\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"mode\" \"V4SF\")])\n \n@@ -18883,27 +18883,25 @@\n \n (define_insn \"sse_comi\"\n   [(set (reg:CCFP 17)\n-        (match_operator:CCFP 2 \"sse_comparison_operator\"\n-\t\t\t[(vec_select:SF\n-\t\t\t  (match_operand:V4SF 0 \"register_operand\" \"x\")\n-\t\t\t  (parallel [(const_int 0)]))\n-\t\t\t (vec_select:SF\n-\t\t\t  (match_operand:V4SF 1 \"register_operand\" \"x\")\n-\t\t\t  (parallel [(const_int 0)]))]))]\n+        (compare:CCFP (vec_select:SF\n+\t\t       (match_operand:V4SF 0 \"register_operand\" \"x\")\n+\t\t       (parallel [(const_int 0)]))\n+\t\t      (vec_select:SF\n+\t\t       (match_operand:V4SF 1 \"register_operand\" \"x\")\n+\t\t       (parallel [(const_int 0)]))))]\n   \"TARGET_SSE\"\n   \"comiss\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecmp\")\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"sse_ucomi\"\n   [(set (reg:CCFPU 17)\n-\t(match_operator:CCFPU 2 \"sse_comparison_operator\"\n-\t\t\t[(vec_select:SF\n-\t\t\t  (match_operand:V4SF 0 \"register_operand\" \"x\")\n-\t\t\t  (parallel [(const_int 0)]))\n-\t\t\t (vec_select:SF\n-\t\t\t  (match_operand:V4SF 1 \"register_operand\" \"x\")\n-\t\t\t  (parallel [(const_int 0)]))]))]\n+\t(compare:CCFPU (vec_select:SF\n+\t\t\t(match_operand:V4SF 0 \"register_operand\" \"x\")\n+\t\t\t(parallel [(const_int 0)]))\n+\t\t       (vec_select:SF\n+\t\t\t(match_operand:V4SF 1 \"register_operand\" \"x\")\n+\t\t\t(parallel [(const_int 0)]))))]\n   \"TARGET_SSE\"\n   \"ucomiss\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecmp\")\n@@ -20409,7 +20407,12 @@\n \t\t\t      [(match_operand:V2DF 1 \"register_operand\" \"0\")\n \t\t\t       (match_operand:V2DF 2 \"nonimmediate_operand\" \"x\")])))]\n   \"TARGET_SSE2\"\n-  \"cmpn%D3pd\\t{%2, %0|%0, %2}\"\n+{\n+  if (GET_CODE (operands[3]) == UNORDERED)\n+    return \"cmpordps\\t{%2, %0|%0, %2}\";\n+  else\n+    return \"cmpn%D3pd\\t{%2, %0|%0, %2}\";\n+}\n   [(set_attr \"type\" \"ssecmp\")\n    (set_attr \"mode\" \"V2DF\")])\n \n@@ -20436,33 +20439,36 @@\n \t (subreg:V2DI (match_dup 1) 0)\n \t (const_int 1)))]\n   \"TARGET_SSE2\"\n-  \"cmp%D3sd\\t{%2, %0|%0, %2}\"\n+{\n+  if (GET_CODE (operands[3]) == UNORDERED)\n+    return \"cmpordsd\\t{%2, %0|%0, %2}\";\n+  else\n+    return \"cmpn%D3sd\\t{%2, %0|%0, %2}\";\n+}\n   [(set_attr \"type\" \"ssecmp\")\n    (set_attr \"mode\" \"DF\")])\n \n (define_insn \"sse2_comi\"\n   [(set (reg:CCFP 17)\n-        (match_operator:CCFP 2 \"sse_comparison_operator\"\n-\t\t\t[(vec_select:DF\n-\t\t\t  (match_operand:V2DF 0 \"register_operand\" \"x\")\n-\t\t\t  (parallel [(const_int 0)]))\n-\t\t\t (vec_select:DF\n-\t\t\t  (match_operand:V2DF 1 \"register_operand\" \"x\")\n-\t\t\t  (parallel [(const_int 0)]))]))]\n+        (compare:CCFP (vec_select:DF\n+\t\t       (match_operand:V2DF 0 \"register_operand\" \"x\")\n+\t\t       (parallel [(const_int 0)]))\n+\t\t      (vec_select:DF\n+\t\t       (match_operand:V2DF 1 \"register_operand\" \"x\")\n+\t\t       (parallel [(const_int 0)]))))]\n   \"TARGET_SSE2\"\n   \"comisd\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecmp\")\n    (set_attr \"mode\" \"DF\")])\n \n (define_insn \"sse2_ucomi\"\n   [(set (reg:CCFPU 17)\n-\t(match_operator:CCFPU 2 \"sse_comparison_operator\"\n-\t\t\t[(vec_select:DF\n-\t\t\t  (match_operand:V2DF 0 \"register_operand\" \"x\")\n-\t\t\t  (parallel [(const_int 0)]))\n-\t\t\t (vec_select:DF\n-\t\t\t  (match_operand:V2DF 1 \"register_operand\" \"x\")\n-\t\t\t  (parallel [(const_int 0)]))]))]\n+\t(compare:CCFPU (vec_select:DF\n+\t\t\t (match_operand:V2DF 0 \"register_operand\" \"x\")\n+\t\t\t (parallel [(const_int 0)]))\n+\t\t\t(vec_select:DF\n+\t\t\t (match_operand:V2DF 1 \"register_operand\" \"x\")\n+\t\t\t (parallel [(const_int 0)]))))]\n   \"TARGET_SSE2\"\n   \"ucomisd\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecmp\")\n@@ -21630,7 +21636,7 @@\n    (set_attr \"mode\" \"V2DF\")])\n \n (define_insn \"sse2_clflush\"\n-  [(unspec_volatile [(match_operand:SI 0 \"address_operand\" \"p\")]\n+  [(unspec_volatile [(match_operand 0 \"address_operand\" \"p\")]\n \t\t    UNSPECV_CLFLUSH)]\n   \"TARGET_SSE2\"\n   \"clflush %0\""}, {"sha": "42278b7d2e56c5d4fe66d7c3d02d3b6666ddf893", "filename": "gcc/config/i386/xmmintrin.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1194ca059028a55c9026606e5a73c0e01cd060cb/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1194ca059028a55c9026606e5a73c0e01cd060cb/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxmmintrin.h?ref=1194ca059028a55c9026606e5a73c0e01cd060cb", "patch": "@@ -606,7 +606,7 @@ _mm_cvtps_pi16(__m128 __A)\n   __v4sf __losf = __builtin_ia32_movhlps (__hisf, __hisf);\n   __v2si __hisi = __builtin_ia32_cvtps2pi (__hisf);\n   __v2si __losi = __builtin_ia32_cvtps2pi (__losf);\n-  return (__m64) __builtin_ia32_packssdw (__losi, __hisi);\n+  return (__m64) __builtin_ia32_packssdw (__hisi, __losi);\n }\n \n /* Convert the four SPFP values in A to four signed 8-bit integers.  */\n@@ -1293,10 +1293,12 @@ _mm_sqrt_pd (__m128d __A)\n   return (__m128d)__builtin_ia32_sqrtpd ((__v2df)__A);\n }\n \n+/* Return pair {sqrt (A[0), B[1]}.  */\n static __inline __m128d\n-_mm_sqrt_sd (__m128d __A)\n+_mm_sqrt_sd (__m128d __A, __m128d __B)\n {\n-  return (__m128d)__builtin_ia32_sqrtsd ((__v2df)__A);\n+  __v2df __tmp = __builtin_ia32_movsd ((__v2df)__A, (__v2df)__B);\n+  return (__m128d)__builtin_ia32_sqrtsd ((__v2df)__tmp);\n }\n \n static __inline __m128d\n@@ -1320,7 +1322,7 @@ _mm_max_pd (__m128d __A, __m128d __B)\n static __inline __m128d\n _mm_max_sd (__m128d __A, __m128d __B)\n {\n-  return (__m128d)__builtin_ia32_minsd ((__v2df)__A, (__v2df)__B);\n+  return (__m128d)__builtin_ia32_maxsd ((__v2df)__A, (__v2df)__B);\n }\n \n static __inline __m128d\n@@ -1696,10 +1698,9 @@ _mm_loadh_pd (__m128d __A, double *__B)\n }\n \n static __inline void\n-_mm_storeh_pd (__m128d *__A, double __B)\n+_mm_storeh_pd (double *__A, __m128d __B)\n {\n-  __v2df __tmp = __builtin_ia32_loadsd (&__B);\n-  __builtin_ia32_storehpd ((__v2si *)__A, __tmp);\n+  __builtin_ia32_storehpd ((__v2si *)__A, (__v2df)__B);\n }\n \n static __inline __m128d\n@@ -1709,10 +1710,9 @@ _mm_loadl_pd (__m128d __A, double *__B)\n }\n \n static __inline void\n-_mm_storel_pd (__m128d *__A, double __B)\n+_mm_storel_pd (double *__A, __m128d __B)\n {\n-  __v2df __tmp = __builtin_ia32_loadsd (&__B);\n-  __builtin_ia32_storelpd ((__v2si *)__A, __tmp);\n+  __builtin_ia32_storelpd ((__v2si *)__A, (__v2df)__B);\n }\n \n static __inline int"}]}