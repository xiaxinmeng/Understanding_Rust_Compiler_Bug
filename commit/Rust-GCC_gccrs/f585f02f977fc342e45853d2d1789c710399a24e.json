{"sha": "f585f02f977fc342e45853d2d1789c710399a24e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU4NWYwMmY5NzdmYzM0MmU0NTg1M2QyZDE3ODljNzEwMzk5YTI0ZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-01-08T18:48:31Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-01-08T18:48:31Z"}, "message": "re PR c++/59614 (Explostion in compile time of heavily templated code)\n\n\tPR c++/59614\n\t* class.c (abi_tag_data): Add tags field.\n\t(check_abi_tags): Initialize it.\n\t(find_abi_tags_r): Support collecting missing tags.\n\t(mark_type_abi_tags): Don't look at template args.\n\t(inherit_targ_abi_tags): New.\n\t(check_bases_and_members): Use it.\n\t* cp-tree.h (ABI_TAG_IMPLICIT): New.\n\t* mangle.c (write_abi_tags): Check it.\n\nFrom-SVN: r206439", "tree": {"sha": "f8c9ab5b0d7fb73bddb92a211736419393866ea9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8c9ab5b0d7fb73bddb92a211736419393866ea9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f585f02f977fc342e45853d2d1789c710399a24e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f585f02f977fc342e45853d2d1789c710399a24e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f585f02f977fc342e45853d2d1789c710399a24e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f585f02f977fc342e45853d2d1789c710399a24e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c6de66659813cd840c2e1f5fe9698ba857618627", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6de66659813cd840c2e1f5fe9698ba857618627", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6de66659813cd840c2e1f5fe9698ba857618627"}], "stats": {"total": 103, "additions": 83, "deletions": 20}, "files": [{"sha": "b6ee8754c6fee8a76e61edd39d2f0e5591fe9727", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f585f02f977fc342e45853d2d1789c710399a24e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f585f02f977fc342e45853d2d1789c710399a24e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f585f02f977fc342e45853d2d1789c710399a24e", "patch": "@@ -1,3 +1,15 @@\n+2014-01-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/59614\n+\t* class.c (abi_tag_data): Add tags field.\n+\t(check_abi_tags): Initialize it.\n+\t(find_abi_tags_r): Support collecting missing tags.\n+\t(mark_type_abi_tags): Don't look at template args.\n+\t(inherit_targ_abi_tags): New.\n+\t(check_bases_and_members): Use it.\n+\t* cp-tree.h (ABI_TAG_IMPLICIT): New.\n+\t* mangle.c (write_abi_tags): Check it.\n+\n 2014-01-07  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/58856"}, {"sha": "0c3ce47bc756be930d768cdc2d8b5b423285fde7", "filename": "gcc/cp/class.c", "status": "modified", "additions": 62, "deletions": 19, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f585f02f977fc342e45853d2d1789c710399a24e/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f585f02f977fc342e45853d2d1789c710399a24e/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=f585f02f977fc342e45853d2d1789c710399a24e", "patch": "@@ -1340,14 +1340,20 @@ struct abi_tag_data\n {\n   tree t;\n   tree subob;\n+  // error_mark_node to get diagnostics; otherwise collect missing tags here\n+  tree tags;\n };\n \n static tree\n-find_abi_tags_r (tree *tp, int */*walk_subtrees*/, void *data)\n+find_abi_tags_r (tree *tp, int *walk_subtrees, void *data)\n {\n   if (!OVERLOAD_TYPE_P (*tp))\n     return NULL_TREE;\n \n+  /* walk_tree shouldn't be walking into any subtrees of a RECORD_TYPE\n+     anyway, but let's make sure of it.  */\n+  *walk_subtrees = false;\n+\n   if (tree attributes = lookup_attribute (\"abi_tag\", TYPE_ATTRIBUTES (*tp)))\n     {\n       struct abi_tag_data *p = static_cast<struct abi_tag_data*>(data);\n@@ -1358,7 +1364,20 @@ find_abi_tags_r (tree *tp, int */*walk_subtrees*/, void *data)\n \t  tree id = get_identifier (TREE_STRING_POINTER (tag));\n \t  if (!IDENTIFIER_MARKED (id))\n \t    {\n-\t      if (TYPE_P (p->subob))\n+\t      if (p->tags != error_mark_node)\n+\t\t{\n+\t\t  /* We're collecting tags from template arguments.  */\n+\t\t  tree str = build_string (IDENTIFIER_LENGTH (id),\n+\t\t\t\t\t   IDENTIFIER_POINTER (id));\n+\t\t  p->tags = tree_cons (NULL_TREE, str, p->tags);\n+\t\t  ABI_TAG_IMPLICIT (p->tags) = true;\n+\n+\t\t  /* Don't inherit this tag multiple times.  */\n+\t\t  IDENTIFIER_MARKED (id) = true;\n+\t\t}\n+\n+\t      /* Otherwise we're diagnosing missing tags.  */\n+\t      else if (TYPE_P (p->subob))\n \t\t{\n \t\t  warning (OPT_Wabi_tag, \"%qT does not have the %E abi tag \"\n \t\t\t   \"that base %qT has\", p->t, tag, p->subob);\n@@ -1397,22 +1416,6 @@ mark_type_abi_tags (tree t, bool val)\n \t  IDENTIFIER_MARKED (id) = val;\n \t}\n     }\n-\n-  /* Also mark ABI tags from template arguments.  */\n-  if (CLASSTYPE_TEMPLATE_INFO (t))\n-    {\n-      tree args = CLASSTYPE_TI_ARGS (t);\n-      for (int i = 0; i < TMPL_ARGS_DEPTH (args); ++i)\n-\t{\n-\t  tree level = TMPL_ARGS_LEVEL (args, i+1);\n-\t  for (int j = 0; j < TREE_VEC_LENGTH (level); ++j)\n-\t    {\n-\t      tree arg = TREE_VEC_ELT (level, j);\n-\t      if (CLASS_TYPE_P (arg))\n-\t\tmark_type_abi_tags (arg, val);\n-\t    }\n-\t}\n-    }\n }\n \n /* Check that class T has all the abi tags that subobject SUBOB has, or\n@@ -1424,13 +1427,50 @@ check_abi_tags (tree t, tree subob)\n   mark_type_abi_tags (t, true);\n \n   tree subtype = TYPE_P (subob) ? subob : TREE_TYPE (subob);\n-  struct abi_tag_data data = { t, subob };\n+  struct abi_tag_data data = { t, subob, error_mark_node };\n \n   cp_walk_tree_without_duplicates (&subtype, find_abi_tags_r, &data);\n \n   mark_type_abi_tags (t, false);\n }\n \n+void\n+inherit_targ_abi_tags (tree t)\n+{\n+  if (CLASSTYPE_TEMPLATE_INFO (t) == NULL_TREE)\n+    return;\n+\n+  mark_type_abi_tags (t, true);\n+\n+  tree args = CLASSTYPE_TI_ARGS (t);\n+  struct abi_tag_data data = { t, NULL_TREE, NULL_TREE };\n+  for (int i = 0; i < TMPL_ARGS_DEPTH (args); ++i)\n+    {\n+      tree level = TMPL_ARGS_LEVEL (args, i+1);\n+      for (int j = 0; j < TREE_VEC_LENGTH (level); ++j)\n+\t{\n+\t  tree arg = TREE_VEC_ELT (level, j);\n+\t  data.subob = arg;\n+\t  cp_walk_tree_without_duplicates (&arg, find_abi_tags_r, &data);\n+\t}\n+    }\n+\n+  // If we found some tags on our template arguments, add them to our\n+  // abi_tag attribute.\n+  if (data.tags)\n+    {\n+      tree attr = lookup_attribute (\"abi_tag\", TYPE_ATTRIBUTES (t));\n+      if (attr)\n+\tTREE_VALUE (attr) = chainon (data.tags, TREE_VALUE (attr));\n+      else\n+\tTYPE_ATTRIBUTES (t)\n+\t  = tree_cons (get_identifier (\"abi_tag\"), data.tags,\n+\t\t       TYPE_ATTRIBUTES (t));\n+    }\n+\n+  mark_type_abi_tags (t, false);\n+}\n+\n /* Run through the base classes of T, updating CANT_HAVE_CONST_CTOR_P,\n    and NO_CONST_ASN_REF_P.  Also set flag bits in T based on\n    properties of the bases.  */\n@@ -5431,6 +5471,9 @@ check_bases_and_members (tree t)\n   bool saved_nontrivial_dtor;\n   tree fn;\n \n+  /* Pick up any abi_tags from our template arguments before checking.  */\n+  inherit_targ_abi_tags (t);\n+\n   /* By default, we use const reference arguments and generate default\n      constructors.  */\n   cant_have_const_ctor = 0;"}, {"sha": "96af562f245e7022df0a9b1263513bce96cc6334", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f585f02f977fc342e45853d2d1789c710399a24e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f585f02f977fc342e45853d2d1789c710399a24e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f585f02f977fc342e45853d2d1789c710399a24e", "patch": "@@ -65,6 +65,7 @@ c-common.h, not after.\n       TARGET_EXPR_IMPLICIT_P (in TARGET_EXPR)\n       TEMPLATE_PARM_PARAMETER_PACK (in TEMPLATE_PARM_INDEX)\n       ATTR_IS_DEPENDENT (in the TREE_LIST for an attribute)\n+      ABI_TAG_IMPLICIT (in the TREE_LIST for the argument of abi_tag)\n       CONSTRUCTOR_IS_DIRECT_INIT (in CONSTRUCTOR)\n       LAMBDA_EXPR_CAPTURES_THIS_P (in LAMBDA_EXPR)\n       DECLTYPE_FOR_LAMBDA_CAPTURE (in DECLTYPE_TYPE)\n@@ -2589,6 +2590,10 @@ struct GTY((variable_size)) lang_decl {\n    must be applied at instantiation time.  */\n #define ATTR_IS_DEPENDENT(NODE) TREE_LANG_FLAG_0 (TREE_LIST_CHECK (NODE))\n \n+/* In a TREE_LIST in the argument of attribute abi_tag, indicates that the tag\n+   was inherited from a template parameter, not explicitly indicated.  */\n+#define ABI_TAG_IMPLICIT(NODE) TREE_LANG_FLAG_0 (TREE_LIST_CHECK (NODE))\n+\n extern tree decl_shadowed_for_var_lookup (tree);\n extern void decl_shadowed_for_var_insert (tree, tree);\n "}, {"sha": "be3c698f4b619d0da8dec667db339510fbc9f3e7", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f585f02f977fc342e45853d2d1789c710399a24e/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f585f02f977fc342e45853d2d1789c710399a24e/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=f585f02f977fc342e45853d2d1789c710399a24e", "patch": "@@ -1338,6 +1338,8 @@ write_abi_tags (tree tags)\n \n   for (tree t = tags; t; t = TREE_CHAIN (t))\n     {\n+      if (ABI_TAG_IMPLICIT (t))\n+\tcontinue;\n       tree str = TREE_VALUE (t);\n       vec_safe_push (vec, str);\n     }"}, {"sha": "95e367ef935fef0eaa39a14b3828d8e582648e5b", "filename": "gcc/testsuite/g++.dg/abi/abi-tag5.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f585f02f977fc342e45853d2d1789c710399a24e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f585f02f977fc342e45853d2d1789c710399a24e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag5.C?ref=f585f02f977fc342e45853d2d1789c710399a24e", "patch": "@@ -1,6 +1,7 @@\n // { dg-options -Wabi-tag }\n+// { dg-final { scan-assembler \"_Z1f1BI1AB3fooE\" } }\n \n struct __attribute__ ((abi_tag (\"foo\"))) A { };\n template <class T> struct B: T { };\n \n-B<A> b;\n+void f(B<A>) {}"}]}