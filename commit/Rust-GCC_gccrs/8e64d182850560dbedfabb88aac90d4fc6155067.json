{"sha": "8e64d182850560dbedfabb88aac90d4fc6155067", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU2NGQxODI4NTA1NjBkYmVkZmFiYjg4YWFjOTBkNGZjNjE1NTA2Nw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-06-23T01:26:49Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-07-14T20:02:39Z"}, "message": "c++: Make convert_like complain about bad ck_ref_bind again [PR95789]\n\nconvert_like issues errors about bad_p conversions at the beginning\nof the function, but in the ck_ref_bind case, it only issues them\nafter we've called convert_like on the next conversion.\n\nThis doesn't work as expected since r10-7096 because when we see\na conversion from/to class type in a template, we return early, thereby\nmissing the error, and a bad_p conversion goes by undetected.  That\nmade the attached test to compile even though it should not.\n\nI had thought that I could just move the ck_ref_bind/bad_p errors\nabove to the rest of them, but that regressed diagnostics because\nexpr then wasn't converted yet by the nested convert_like_real call.\n\nSo, for bad_p conversions, do the normal processing, but still return\nthe IMPLICIT_CONV_EXPR to avoid introducing trees that the template\nprocessing can't handle well.  This I achieved by adding a wrapper\nfunction.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95789\n\tPR c++/96104\n\tPR c++/96179\n\t* call.c (convert_like_real_1): Renamed from convert_like_real.\n\t(convert_like_real): New wrapper for convert_like_real_1.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/95789\n\tPR c++/96104\n\tPR c++/96179\n\t* g++.dg/conversion/ref4.C: New test.\n\t* g++.dg/conversion/ref5.C: New test.\n\t* g++.dg/conversion/ref6.C: New test.", "tree": {"sha": "a468074edc704d74694205b893742e8dcf6dcd09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a468074edc704d74694205b893742e8dcf6dcd09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e64d182850560dbedfabb88aac90d4fc6155067", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e64d182850560dbedfabb88aac90d4fc6155067", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e64d182850560dbedfabb88aac90d4fc6155067", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e64d182850560dbedfabb88aac90d4fc6155067/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c78f438fafdc2f4b2fc3a4d385f814378e3d3f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c78f438fafdc2f4b2fc3a4d385f814378e3d3f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c78f438fafdc2f4b2fc3a4d385f814378e3d3f5"}], "stats": {"total": 114, "additions": 98, "deletions": 16}, "files": [{"sha": "6d5d5e801a54c3842181fb5360815e4612ee57ac", "filename": "gcc/cp/call.c", "status": "modified", "additions": 38, "deletions": 16, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e64d182850560dbedfabb88aac90d4fc6155067/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e64d182850560dbedfabb88aac90d4fc6155067/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=8e64d182850560dbedfabb88aac90d4fc6155067", "patch": "@@ -171,6 +171,8 @@ static tree build_over_call (struct z_candidate *, int, tsubst_flags_t);\n \t\t     /*c_cast_p=*/false, (COMPLAIN))\n static tree convert_like_real (conversion *, tree, tree, int, bool,\n \t\t\t       bool, tsubst_flags_t);\n+static tree convert_like_real_1 (conversion *, tree, tree, int, bool,\n+\t\t\t\t bool, tsubst_flags_t);\n static void op_error (const op_location_t &, enum tree_code, enum tree_code,\n \t\t      tree, tree, tree, bool);\n static struct z_candidate *build_user_type_conversion_1 (tree, tree, int,\n@@ -7281,6 +7283,39 @@ maybe_warn_array_conv (location_t loc, conversion *c, tree expr)\n \t     \"are only available with %<-std=c++20%> or %<-std=gnu++20%>\");\n }\n \n+/* Wrapper for convert_like_real_1 that handles creating IMPLICIT_CONV_EXPR.  */\n+\n+static tree\n+convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n+\t\t   bool issue_conversion_warnings,\n+\t\t   bool c_cast_p, tsubst_flags_t complain)\n+{\n+  /* Creating &TARGET_EXPR<> in a template breaks when substituting,\n+     and creating a CALL_EXPR in a template breaks in finish_call_expr\n+     so use an IMPLICIT_CONV_EXPR for this conversion.  We would have\n+     created such codes e.g. when calling a user-defined conversion\n+     function.  */\n+  tree conv_expr = NULL_TREE;\n+  if (processing_template_decl\n+      && convs->kind != ck_identity\n+      && (CLASS_TYPE_P (convs->type) || CLASS_TYPE_P (TREE_TYPE (expr))))\n+    {\n+      conv_expr = build1 (IMPLICIT_CONV_EXPR, convs->type, expr);\n+      if (convs->kind != ck_ref_bind)\n+\tconv_expr = convert_from_reference (conv_expr);\n+      if (!convs->bad_p)\n+\treturn conv_expr;\n+      /* Do the normal processing to give the bad_p errors.  But we still\n+\t need to return the IMPLICIT_CONV_EXPR, unless we're returning\n+\t error_mark_node.  */\n+    }\n+  expr = convert_like_real_1 (convs, expr, fn, argnum,\n+\t\t\t      issue_conversion_warnings, c_cast_p, complain);\n+  if (expr == error_mark_node)\n+    return error_mark_node;\n+  return conv_expr ? conv_expr : expr;\n+}\n+\n /* Perform the conversions in CONVS on the expression EXPR.  FN and\n    ARGNUM are used for diagnostics.  ARGNUM is zero based, -1\n    indicates the `this' argument of a method.  INNER is nonzero when\n@@ -7292,9 +7327,9 @@ maybe_warn_array_conv (location_t loc, conversion *c, tree expr)\n    conversions to inaccessible bases are permitted.  */\n \n static tree\n-convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n-\t\t   bool issue_conversion_warnings,\n-\t\t   bool c_cast_p, tsubst_flags_t complain)\n+convert_like_real_1 (conversion *convs, tree expr, tree fn, int argnum,\n+\t\t     bool issue_conversion_warnings,\n+\t\t     bool c_cast_p, tsubst_flags_t complain)\n {\n   tree totype = convs->type;\n   diagnostic_t diag_kind;\n@@ -7395,19 +7430,6 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n   if (issue_conversion_warnings && (complain & tf_warning))\n     conversion_null_warnings (totype, expr, fn, argnum);\n \n-  /* Creating &TARGET_EXPR<> in a template breaks when substituting,\n-     and creating a CALL_EXPR in a template breaks in finish_call_expr\n-     so use an IMPLICIT_CONV_EXPR for this conversion.  We would have\n-     created such codes e.g. when calling a user-defined conversion\n-     function.  */\n-  if (processing_template_decl\n-      && convs->kind != ck_identity\n-      && (CLASS_TYPE_P (totype) || CLASS_TYPE_P (TREE_TYPE (expr))))\n-    {\n-      expr = build1 (IMPLICIT_CONV_EXPR, totype, expr);\n-      return convs->kind == ck_ref_bind ? expr : convert_from_reference (expr);\n-    }\n-\n   switch (convs->kind)\n     {\n     case ck_user:"}, {"sha": "464a4cf6c0f17d36aedb771800d0328d2d3aefe9", "filename": "gcc/testsuite/g++.dg/conversion/ref4.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e64d182850560dbedfabb88aac90d4fc6155067/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fref4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e64d182850560dbedfabb88aac90d4fc6155067/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fref4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fref4.C?ref=8e64d182850560dbedfabb88aac90d4fc6155067", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/95789\n+// { dg-do compile { target c++11 } }\n+\n+struct B {\n+    int n;\n+};\n+\n+template <typename T>\n+struct A {\n+    B& get() const { return f; } // { dg-error \"binding reference\" }\n+\n+    B f;\n+};\n+\n+int main() {\n+    A<int> a;\n+    a.f = {};\n+\n+    a.get().n = 10;\n+    if (a.f.n != 0)\n+      __builtin_abort();\n+}"}, {"sha": "0042acd0670764c8ef66a62b54d7cfc4322fa93d", "filename": "gcc/testsuite/g++.dg/conversion/ref5.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e64d182850560dbedfabb88aac90d4fc6155067/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fref5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e64d182850560dbedfabb88aac90d4fc6155067/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fref5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fref5.C?ref=8e64d182850560dbedfabb88aac90d4fc6155067", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/96104\n+\n+template <typename T> void fn(T &);\n+class E {};\n+struct F {\n+  template <typename T> void mfn(T t) { t, fn(E()); } // { dg-error \"cannot bind non-const lvalue reference\" }\n+};\n+int\n+main()\n+{\n+  E e;\n+  F f;\n+  f.mfn(e);\n+}"}, {"sha": "fc87199053c46a87980d77407eaf2d48094b1f4e", "filename": "gcc/testsuite/g++.dg/conversion/ref6.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e64d182850560dbedfabb88aac90d4fc6155067/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fref6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e64d182850560dbedfabb88aac90d4fc6155067/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fref6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fref6.C?ref=8e64d182850560dbedfabb88aac90d4fc6155067", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/96179\n+// { dg-do compile { target c++11 } }\n+\n+template<typename T> struct vector\n+{\n+  void push_back(T) { }\n+};\n+\n+struct dummy{\n+        int a;\n+};\n+\n+void Modify_Dummy(dummy &d){\n+        d.a=1;\n+}\n+\n+template <bool bla=true> void Templated_Function(){\n+        vector<dummy> A;\n+        A.push_back(Modify_Dummy(dummy{0})); // { dg-error \"cannot bind non-const lvalue reference\" }\n+}\n+\n+int main(){\n+        Templated_Function();\n+}"}]}