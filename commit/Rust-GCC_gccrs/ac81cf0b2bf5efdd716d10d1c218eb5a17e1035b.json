{"sha": "ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM4MWNmMGIyYmY1ZWZkZDcxNmQxMGQxYzIxOGViNWExN2UxMDM1Yg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-06-22T15:29:21Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-06-22T15:29:21Z"}, "message": "libcpp: Tweak to missing #include source location\n\nThis patch tweaks the error message location for missing header files.\n\nPreviously these read:\n\ntest.c:1:17: fatal error: 404.h: No such file or directory\n #include \"404.h\"\n                 ^\ncompilation terminated.\n\nWith this patch, the pertinent string is underlined:\n\ntest.c:1:10: fatal error: 404.h: No such file or directory\n #include \"404.h\"\n          ^~~~~~~\ncompilation terminated.\n\ngcc/testsuite/ChangeLog:\n\t* c-c++-common/missing-header-1.c: New test case.\n\t* c-c++-common/missing-header-2.c: New test case.\n\t* c-c++-common/missing-header-3.c: New test case.\n\t* c-c++-common/missing-header-4.c: New test case.\n\nlibcpp/ChangeLog:\n\t* directives.c (do_include_common): Pass on \"location\" to\n\t_cpp_stack_include.\n\t* errors.c (cpp_diagnostic): Reimplement in terms of...\n\t(cpp_diagnostic_at): New function.\n\t(cpp_error_at): New function.\n\t(cpp_errno_filename): Add \"loc\" param and use it by using\n\tcpp_error_at rather than cpp_error.\n\t* files.c (find_file_in_dir): Add \"loc\" param and pass it to\n\topen_file_failed.\n\t(_cpp_find_file): Add \"loc\" param.  Use it to convert calls to\n\tcpp_error to cpp_error_at, and pass it to find_file_in_dir and\n\topen_file_failed.\n\t(read_file_guts): Add \"loc\" param.  Use it to convert calls to\n\tcpp_error to cpp_error_at.  Pass it to cpp_errno_filename.\n\t(read_file): Add \"loc\" param.  Pass it to open_file_failed and\n\tread_file_guts.\n\t(should_stack_file): Add \"loc\" param.  Pass it to read_file.\n\t(_cpp_stack_file): Add \"loc\" param.  Pass it to should_stack_file.\n\t(_cpp_stack_include): Add \"loc\" param.  Pass it to\n\t_cpp_find_file and _cpp_stack_file.\n\t(open_file_failed): Add \"loc\" param.  Pass it to\n\tcpp_errno_filename.\n\t(_cpp_fake_include): Add 0 as a source_location in call to\n\t_cpp_find_file.\n\t(_cpp_compare_file_date): Likewise.\n\t(cpp_push_include): Likewise for call to _cpp_stack_include.\n\t(cpp_push_default_include): Likewise.\n\t(_cpp_save_file_entries): Likewise for call to open_file_failed.\n\t(_cpp_has_header): Likewise for call to _cpp_find_file.\n\t* include/cpplib.h (cpp_errno_filename): Add source_location\n\tparam.\n\t(cpp_error_at): New declaration.\n\t* init.c (cpp_read_main_file): Add 0 as a source_location in calls\n\tto _cpp_find_file and _cpp_stack_file.\n\t* internal.h (_cpp_find_file): Add source_location param.\n\t(_cpp_stack_file): Likewise.\n\t(_cpp_stack_include): Likewise.\n\nFrom-SVN: r237715", "tree": {"sha": "895845f1cef79ed1f8c6a341ccf3973a27e22944", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/895845f1cef79ed1f8c6a341ccf3973a27e22944"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1a4f11c88ae761d4c618e540e07e4e32e85850d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a4f11c88ae761d4c618e540e07e4e32e85850d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a4f11c88ae761d4c618e540e07e4e32e85850d1"}], "stats": {"total": 259, "additions": 200, "deletions": 59}, "files": [{"sha": "9c5402232a85f684f6206dd12d649744763f8ae6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b", "patch": "@@ -1,3 +1,10 @@\n+2016-06-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-c++-common/missing-header-1.c: New test case.\n+\t* c-c++-common/missing-header-2.c: New test case.\n+\t* c-c++-common/missing-header-3.c: New test case.\n+\t* c-c++-common/missing-header-4.c: New test case.\n+\n 2016-06-22  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/70339"}, {"sha": "30e92ad323df9338c524d3ce9028a6a0d44be891", "filename": "gcc/testsuite/c-c++-common/missing-header-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fmissing-header-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fmissing-header-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fmissing-header-1.c?ref=ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-options \"-fdiagnostics-show-caret\" } */\n+#include \"this-file-does-not-exist.h\" /* { dg-error \"10: this-file-does-not-exist.h: No such file or directory\" } */\n+\n+/* { dg-begin-multiline-output \"\" }\n+ #include \"this-file-does-not-exist.h\"\n+          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+compilation terminated.\n+   { dg-end-multiline-output \"\" } */"}, {"sha": "a634703f39a52e055fc8c4da44e6dd29fe910b2a", "filename": "gcc/testsuite/c-c++-common/missing-header-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fmissing-header-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fmissing-header-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fmissing-header-2.c?ref=ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-options \"-fdiagnostics-show-caret\" } */\n+#include <this-file-does-not-exist.h> /* { dg-error \"10: this-file-does-not-exist.h: No such file or directory\" } */\n+\n+/* { dg-begin-multiline-output \"\" }\n+ #include <this-file-does-not-exist.h>\n+          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+compilation terminated.\n+   { dg-end-multiline-output \"\" } */"}, {"sha": "4147367e166deb4e04f7000ce39b927d59e78e24", "filename": "gcc/testsuite/c-c++-common/missing-header-3.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fmissing-header-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fmissing-header-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fmissing-header-3.c?ref=ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-options \"-fdiagnostics-show-caret -Wno-deprecated\" } */\n+#import <this-file-does-not-exist.h> /* { dg-error \"9: this-file-does-not-exist.h: No such file or directory\" } */\n+\n+/* { dg-begin-multiline-output \"\" }\n+ #import <this-file-does-not-exist.h>\n+         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+compilation terminated.\n+   { dg-end-multiline-output \"\" } */"}, {"sha": "d528d0dfc7231c09620a4fa260884679ec26ed1b", "filename": "gcc/testsuite/c-c++-common/missing-header-4.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fmissing-header-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fmissing-header-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fmissing-header-4.c?ref=ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-options \"-fdiagnostics-show-caret -Wno-deprecated\" } */\n+#import \"this-file-does-not-exist.h\" /* { dg-error \"9: this-file-does-not-exist.h: No such file or directory\" } */\n+\n+/* { dg-begin-multiline-output \"\" }\n+ #import \"this-file-does-not-exist.h\"\n+         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+compilation terminated.\n+   { dg-end-multiline-output \"\" } */"}, {"sha": "7695a4259119ccd532c62cf0ecbc08662ca6fbae", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b", "patch": "@@ -1,3 +1,43 @@\n+2016-06-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* directives.c (do_include_common): Pass on \"location\" to\n+\t_cpp_stack_include.\n+\t* errors.c (cpp_diagnostic): Reimplement in terms of...\n+\t(cpp_diagnostic_at): New function.\n+\t(cpp_error_at): New function.\n+\t(cpp_errno_filename): Add \"loc\" param and use it by using\n+\tcpp_error_at rather than cpp_error.\n+\t* files.c (find_file_in_dir): Add \"loc\" param and pass it to\n+\topen_file_failed.\n+\t(_cpp_find_file): Add \"loc\" param.  Use it to convert calls to\n+\tcpp_error to cpp_error_at, and pass it to find_file_in_dir and\n+\topen_file_failed.\n+\t(read_file_guts): Add \"loc\" param.  Use it to convert calls to\n+\tcpp_error to cpp_error_at.  Pass it to cpp_errno_filename.\n+\t(read_file): Add \"loc\" param.  Pass it to open_file_failed and\n+\tread_file_guts.\n+\t(should_stack_file): Add \"loc\" param.  Pass it to read_file.\n+\t(_cpp_stack_file): Add \"loc\" param.  Pass it to should_stack_file.\n+\t(_cpp_stack_include): Add \"loc\" param.  Pass it to\n+\t_cpp_find_file and _cpp_stack_file.\n+\t(open_file_failed): Add \"loc\" param.  Pass it to\n+\tcpp_errno_filename.\n+\t(_cpp_fake_include): Add 0 as a source_location in call to\n+\t_cpp_find_file.\n+\t(_cpp_compare_file_date): Likewise.\n+\t(cpp_push_include): Likewise for call to _cpp_stack_include.\n+\t(cpp_push_default_include): Likewise.\n+\t(_cpp_save_file_entries): Likewise for call to open_file_failed.\n+\t(_cpp_has_header): Likewise for call to _cpp_find_file.\n+\t* include/cpplib.h (cpp_errno_filename): Add source_location\n+\tparam.\n+\t(cpp_error_at): New declaration.\n+\t* init.c (cpp_read_main_file): Add 0 as a source_location in calls\n+\tto _cpp_find_file and _cpp_stack_file.\n+\t* internal.h (_cpp_find_file): Add source_location param.\n+\t(_cpp_stack_file): Likewise.\n+\t(_cpp_stack_include): Likewise.\n+\n 2016-06-22  David Malcolm  <dmalcolm@redhat.com>\n \n \t* include/line-map.h (fixit_hint::get_start_loc): New pure virtual"}, {"sha": "772b835804bd997c3c7ea457bf3e9b5c379740bc", "filename": "libcpp/directives.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b", "patch": "@@ -818,7 +818,7 @@ do_include_common (cpp_reader *pfile, enum include_type type)\n \t\t\t   pfile->directive->name, fname, angle_brackets,\n \t\t\t   buf);\n \n-      _cpp_stack_include (pfile, fname, angle_brackets, type);\n+      _cpp_stack_include (pfile, fname, angle_brackets, type, location);\n     }\n \n   XDELETEVEC (fname);"}, {"sha": "f7d411226eeec215c4f685ca1aa0dbbcfc2cb882", "filename": "libcpp/errors.c", "status": "modified", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b/libcpp%2Ferrors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b/libcpp%2Ferrors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ferrors.c?ref=ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b", "patch": "@@ -27,6 +27,24 @@ along with this program; see the file COPYING3.  If not see\n #include \"cpplib.h\"\n #include \"internal.h\"\n \n+/* Print a diagnostic at the given location.  */\n+\n+ATTRIBUTE_FPTR_PRINTF(5,0)\n+static bool\n+cpp_diagnostic_at (cpp_reader * pfile, int level, int reason,\n+\t\t   source_location src_loc,\n+\t\t   const char *msgid, va_list *ap)\n+{\n+  bool ret;\n+\n+  if (!pfile->cb.error)\n+    abort ();\n+  rich_location richloc (pfile->line_table, src_loc);\n+  ret = pfile->cb.error (pfile, level, reason, &richloc, _(msgid), ap);\n+\n+  return ret;\n+}\n+\n /* Print a diagnostic at the location of the previously lexed token.  */\n \n ATTRIBUTE_FPTR_PRINTF(4,0)\n@@ -35,7 +53,6 @@ cpp_diagnostic (cpp_reader * pfile, int level, int reason,\n                 const char *msgid, va_list *ap)\n {\n   source_location src_loc;\n-  bool ret;\n \n   if (CPP_OPTION (pfile, traditional))\n     {\n@@ -54,13 +71,7 @@ cpp_diagnostic (cpp_reader * pfile, int level, int reason,\n     {\n       src_loc = pfile->cur_token[-1].src_loc;\n     }\n-\n-  if (!pfile->cb.error)\n-    abort ();\n-  rich_location richloc (pfile->line_table, src_loc);\n-  ret = pfile->cb.error (pfile, level, reason, &richloc, _(msgid), ap);\n-\n-  return ret;\n+  return cpp_diagnostic_at (pfile, level, reason, src_loc, msgid, ap);\n }\n \n /* Print a warning or error, depending on the value of LEVEL.  */\n@@ -225,6 +236,25 @@ cpp_warning_with_line_syshdr (cpp_reader *pfile, int reason,\n   return ret;\n }\n \n+/* As cpp_error, but use SRC_LOC as the location of the error, without\n+   a column override.  */\n+\n+bool\n+cpp_error_at (cpp_reader * pfile, int level, source_location src_loc,\n+\t      const char *msgid, ...)\n+{\n+  va_list ap;\n+  bool ret;\n+\n+  va_start (ap, msgid);\n+\n+  ret = cpp_diagnostic_at (pfile, level, CPP_W_NONE, src_loc,\n+\t\t\t   msgid, &ap);\n+\n+  va_end (ap);\n+  return ret;\n+}\n+\n /* Print a warning or error, depending on the value of LEVEL.  Include\n    information from errno.  */\n \n@@ -239,10 +269,12 @@ cpp_errno (cpp_reader *pfile, int level, const char *msgid)\n    that is not localized, but \"\" is replaced with localized \"stdout\".  */\n \n bool\n-cpp_errno_filename (cpp_reader *pfile, int level, const char *filename)\n+cpp_errno_filename (cpp_reader *pfile, int level, const char *filename,\n+\t\t    source_location loc)\n {\n   if (filename[0] == '\\0')\n     filename = _(\"stdout\");\n \n-  return cpp_error (pfile, level, \"%s: %s\", filename, xstrerror (errno));\n+  return cpp_error_at (pfile, level, loc, \"%s: %s\", filename,\n+\t\t       xstrerror (errno));\n }"}, {"sha": "c8bb637fb58c3700c60ee67c1e629315e3d98f1c", "filename": "libcpp/files.c", "status": "modified", "additions": 63, "deletions": 42, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b", "patch": "@@ -171,14 +171,18 @@ static bool open_file (_cpp_file *file);\n static bool pch_open_file (cpp_reader *pfile, _cpp_file *file,\n \t\t\t   bool *invalid_pch);\n static bool find_file_in_dir (cpp_reader *pfile, _cpp_file *file,\n-\t\t\t      bool *invalid_pch);\n-static bool read_file_guts (cpp_reader *pfile, _cpp_file *file);\n-static bool read_file (cpp_reader *pfile, _cpp_file *file);\n-static bool should_stack_file (cpp_reader *, _cpp_file *file, bool import);\n+\t\t\t      bool *invalid_pch, source_location loc);\n+static bool read_file_guts (cpp_reader *pfile, _cpp_file *file,\n+\t\t\t    source_location loc);\n+static bool read_file (cpp_reader *pfile, _cpp_file *file,\n+\t\t       source_location loc);\n+static bool should_stack_file (cpp_reader *, _cpp_file *file, bool import,\n+\t\t\t       source_location loc);\n static struct cpp_dir *search_path_head (cpp_reader *, const char *fname,\n \t\t\t\t int angle_brackets, enum include_type);\n static const char *dir_name_of_file (_cpp_file *file);\n-static void open_file_failed (cpp_reader *pfile, _cpp_file *file, int);\n+static void open_file_failed (cpp_reader *pfile, _cpp_file *file, int,\n+\t\t\t      source_location);\n static struct cpp_file_hash_entry *search_cache (struct cpp_file_hash_entry *head,\n \t\t\t\t\t     const cpp_dir *start_dir);\n static _cpp_file *make_cpp_file (cpp_reader *, cpp_dir *, const char *fname);\n@@ -368,10 +372,12 @@ maybe_shorter_path (const char * file)\n /* Try to open the path FILE->name appended to FILE->dir.  This is\n    where remap and PCH intercept the file lookup process.  Return true\n    if the file was found, whether or not the open was successful.\n-   Set *INVALID_PCH to true if a PCH file is found but wasn't valid.  */\n+   Set *INVALID_PCH to true if a PCH file is found but wasn't valid.\n+   Use LOC when emitting any diagnostics.  */\n \n static bool\n-find_file_in_dir (cpp_reader *pfile, _cpp_file *file, bool *invalid_pch)\n+find_file_in_dir (cpp_reader *pfile, _cpp_file *file, bool *invalid_pch,\n+\t\t  source_location loc)\n {\n   char *path;\n \n@@ -424,7 +430,7 @@ find_file_in_dir (cpp_reader *pfile, _cpp_file *file, bool *invalid_pch)\n \n       if (file->err_no != ENOENT)\n \t{\n-\t  open_file_failed (pfile, file, 0);\n+\t  open_file_failed (pfile, file, 0, loc);\n \t  return true;\n \t}\n \n@@ -495,10 +501,13 @@ _cpp_find_failed (_cpp_file *file)\n    If IMPLICIT_PREINCLUDE then it is OK for the file to be missing.\n    If present, it is OK for a precompiled header to be included after\n    it.\n-*/\n+\n+   Use LOC as the location for any errors.  */\n+\n _cpp_file *\n _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir,\n-\t\tbool fake, int angle_brackets, bool implicit_preinclude)\n+\t\tbool fake, int angle_brackets, bool implicit_preinclude,\n+\t\tsource_location loc)\n {\n   struct cpp_file_hash_entry *entry;\n   void **hash_slot;\n@@ -510,7 +519,7 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir,\n \n   /* Ensure we get no confusion between cached files and directories.  */\n   if (start_dir == NULL)\n-    cpp_error (pfile, CPP_DL_ICE, \"NULL directory in find_file\");\n+    cpp_error_at (pfile, CPP_DL_ICE, loc, \"NULL directory in find_file\");\n \n   hash_slot\n     = htab_find_slot_with_hash (pfile->file_hash, fname,\n@@ -530,7 +539,7 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir,\n   /* Try each path in the include chain.  */\n   for (; !fake ;)\n     {\n-      if (find_file_in_dir (pfile, file, &invalid_pch))\n+      if (find_file_in_dir (pfile, file, &invalid_pch, loc))\n \tbreak;\n \n       file->dir = file->dir->next;\n@@ -579,7 +588,7 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir,\n \t      return NULL;\n \t    }\n \t  else\n-\t    open_file_failed (pfile, file, angle_brackets);\n+\t    open_file_failed (pfile, file, angle_brackets, loc);\n \t  break;\n \t}\n \n@@ -658,17 +667,20 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir,\n    except for plain files and block devices, since there is no\n    reliable portable way of doing this.\n \n+   Use LOC for any diagnostics.\n+\n    FIXME: Flush file cache and try again if we run out of memory.  */\n static bool\n-read_file_guts (cpp_reader *pfile, _cpp_file *file)\n+read_file_guts (cpp_reader *pfile, _cpp_file *file, source_location loc)\n {\n   ssize_t size, total, count;\n   uchar *buf;\n   bool regular;\n \n   if (S_ISBLK (file->st.st_mode))\n     {\n-      cpp_error (pfile, CPP_DL_ERROR, \"%s is a block device\", file->path);\n+      cpp_error_at (pfile, CPP_DL_ERROR, loc,\n+\t\t    \"%s is a block device\", file->path);\n       return false;\n     }\n \n@@ -685,7 +697,8 @@ read_file_guts (cpp_reader *pfile, _cpp_file *file)\n \t does not bite us.  */\n       if (file->st.st_size > INTTYPE_MAXIMUM (ssize_t))\n \t{\n-\t  cpp_error (pfile, CPP_DL_ERROR, \"%s is too large\", file->path);\n+\t  cpp_error_at (pfile, CPP_DL_ERROR, loc,\n+\t\t\t\"%s is too large\", file->path);\n \t  return false;\n \t}\n \n@@ -718,13 +731,13 @@ read_file_guts (cpp_reader *pfile, _cpp_file *file)\n \n   if (count < 0)\n     {\n-      cpp_errno_filename (pfile, CPP_DL_ERROR, file->path);\n+      cpp_errno_filename (pfile, CPP_DL_ERROR, file->path, loc);\n       free (buf);\n       return false;\n     }\n \n   if (regular && total != size && STAT_SIZE_RELIABLE (file->st))\n-    cpp_error (pfile, CPP_DL_WARNING,\n+    cpp_error_at (pfile, CPP_DL_WARNING, loc,\n \t       \"%s is shorter than expected\", file->path);\n \n   file->buffer = _cpp_convert_input (pfile,\n@@ -739,9 +752,10 @@ read_file_guts (cpp_reader *pfile, _cpp_file *file)\n \n /* Convenience wrapper around read_file_guts that opens the file if\n    necessary and closes the file descriptor after reading.  FILE must\n-   have been passed through find_file() at some stage.  */\n+   have been passed through find_file() at some stage.  Use LOC for\n+   any diagnostics.  */\n static bool\n-read_file (cpp_reader *pfile, _cpp_file *file)\n+read_file (cpp_reader *pfile, _cpp_file *file, source_location loc)\n {\n   /* If we already have its contents in memory, succeed immediately.  */\n   if (file->buffer_valid)\n@@ -753,21 +767,23 @@ read_file (cpp_reader *pfile, _cpp_file *file)\n \n   if (file->fd == -1 && !open_file (file))\n     {\n-      open_file_failed (pfile, file, 0);\n+      open_file_failed (pfile, file, 0, loc);\n       return false;\n     }\n \n-  file->dont_read = !read_file_guts (pfile, file);\n+  file->dont_read = !read_file_guts (pfile, file, loc);\n   close (file->fd);\n   file->fd = -1;\n \n   return !file->dont_read;\n }\n \n /* Returns TRUE if FILE's contents have been successfully placed in\n-   FILE->buffer and the file should be stacked, otherwise false.  */\n+   FILE->buffer and the file should be stacked, otherwise false.\n+   Use LOC for any diagnostics.  */\n static bool\n-should_stack_file (cpp_reader *pfile, _cpp_file *file, bool import)\n+should_stack_file (cpp_reader *pfile, _cpp_file *file, bool import,\n+\t\t   source_location loc)\n {\n   _cpp_file *f;\n \n@@ -802,7 +818,7 @@ should_stack_file (cpp_reader *pfile, _cpp_file *file, bool import)\n       return false;\n     }\n \n-  if (!read_file (pfile, file))\n+  if (!read_file (pfile, file, loc))\n     return false;\n \n   /* Check the file against the PCH file.  This is done before\n@@ -849,7 +865,7 @@ should_stack_file (cpp_reader *pfile, _cpp_file *file, bool import)\n \t    /* The file is not stacked anymore.  We can reuse it.  */\n \t    ref_file = f;\n \n-\t  same_file_p = read_file (pfile, ref_file)\n+\t  same_file_p = read_file (pfile, ref_file, loc)\n \t\t\t/* Size might have changed in read_file().  */\n \t\t\t&& ref_file->st.st_size == file->st.st_size\n \t\t\t&& !memcmp (ref_file->buffer,\n@@ -873,14 +889,15 @@ should_stack_file (cpp_reader *pfile, _cpp_file *file, bool import)\n /* Place the file referenced by FILE into a new buffer on the buffer\n    stack if possible.  IMPORT is true if this stacking attempt is\n    because of a #import directive.  Returns true if a buffer is\n-   stacked.  */\n+   stacked.  Use LOC for any diagnostics.  */\n bool\n-_cpp_stack_file (cpp_reader *pfile, _cpp_file *file, bool import)\n+_cpp_stack_file (cpp_reader *pfile, _cpp_file *file, bool import,\n+\t\t source_location loc)\n {\n   cpp_buffer *buffer;\n   int sysp;\n \n-  if (!should_stack_file (pfile, file, import))\n+  if (!should_stack_file (pfile, file, import, loc))\n       return false;\n \n   if (pfile->buffer == NULL || file->dir == NULL)\n@@ -990,7 +1007,7 @@ dir_name_of_file (_cpp_file *file)\n    Returns true if a buffer was stacked.  */\n bool\n _cpp_stack_include (cpp_reader *pfile, const char *fname, int angle_brackets,\n-\t\t    enum include_type type)\n+\t\t    enum include_type type, source_location loc)\n {\n   struct cpp_dir *dir;\n   _cpp_file *file;\n@@ -1013,7 +1030,7 @@ _cpp_stack_include (cpp_reader *pfile, const char *fname, int angle_brackets,\n     return false;\n \n   file = _cpp_find_file (pfile, fname, dir, false, angle_brackets,\n-\t\t\t type == IT_DEFAULT);\n+\t\t\t type == IT_DEFAULT, loc);\n   if (type == IT_DEFAULT && file == NULL)\n     return false;\n \n@@ -1029,7 +1046,7 @@ _cpp_stack_include (cpp_reader *pfile, const char *fname, int angle_brackets,\n       && type != IT_CMDLINE && type != IT_DEFAULT)\n     pfile->line_table->highest_location--;\n \n-  stacked = _cpp_stack_file (pfile, file, type == IT_IMPORT);\n+  stacked = _cpp_stack_file (pfile, file, type == IT_IMPORT, loc);\n \n   if (!stacked)\n     /* _cpp_stack_file didn't stack the file, so let's rollback the\n@@ -1041,7 +1058,8 @@ _cpp_stack_include (cpp_reader *pfile, const char *fname, int angle_brackets,\n \n /* Could not open FILE.  The complication is dependency output.  */\n static void\n-open_file_failed (cpp_reader *pfile, _cpp_file *file, int angle_brackets)\n+open_file_failed (cpp_reader *pfile, _cpp_file *file, int angle_brackets,\n+\t\t  source_location loc)\n {\n   int sysp = pfile->line_table->highest_line > 1 && pfile->buffer ? pfile->buffer->sysp : 0;\n   bool print_dep = CPP_OPTION (pfile, deps.style) > (angle_brackets || !!sysp);\n@@ -1057,7 +1075,8 @@ open_file_failed (cpp_reader *pfile, _cpp_file *file, int angle_brackets)\n          being used, we must also flag an error.  */\n       if (CPP_OPTION (pfile, deps.need_preprocessor_output))\n \tcpp_errno_filename (pfile, CPP_DL_FATAL,\n-\t\t\t    file->path ? file->path : file->name);\n+\t\t\t    file->path ? file->path : file->name,\n+\t\t\t    loc);\n     }\n   else\n     {\n@@ -1072,10 +1091,12 @@ open_file_failed (cpp_reader *pfile, _cpp_file *file, int angle_brackets)\n           || print_dep\n           || CPP_OPTION (pfile, deps.need_preprocessor_output))\n \tcpp_errno_filename (pfile, CPP_DL_FATAL,\n-\t\t\t    file->path ? file->path : file->name);\n+\t\t\t    file->path ? file->path : file->name,\n+\t\t\t    loc);\n       else\n \tcpp_errno_filename (pfile, CPP_DL_WARNING,\n-\t\t\t    file->path ? file->path : file->name);\n+\t\t\t    file->path ? file->path : file->name,\n+\t\t\t    loc);\n     }\n }\n \n@@ -1323,7 +1344,7 @@ cpp_clear_file_cache (cpp_reader *pfile)\n void\n _cpp_fake_include (cpp_reader *pfile, const char *fname)\n {\n-  _cpp_find_file (pfile, fname, pfile->buffer->file->dir, true, 0, false);\n+  _cpp_find_file (pfile, fname, pfile->buffer->file->dir, true, 0, false, 0);\n }\n \n /* Not everyone who wants to set system-header-ness on a buffer can\n@@ -1441,7 +1462,7 @@ _cpp_compare_file_date (cpp_reader *pfile, const char *fname,\n   if (!dir)\n     return -1;\n \n-  file = _cpp_find_file (pfile, fname, dir, false, angle_brackets, false);\n+  file = _cpp_find_file (pfile, fname, dir, false, angle_brackets, false, 0);\n   if (file->err_no)\n     return -1;\n \n@@ -1459,7 +1480,7 @@ _cpp_compare_file_date (cpp_reader *pfile, const char *fname,\n bool\n cpp_push_include (cpp_reader *pfile, const char *fname)\n {\n-  return _cpp_stack_include (pfile, fname, false, IT_CMDLINE);\n+  return _cpp_stack_include (pfile, fname, false, IT_CMDLINE, 0);\n }\n \n /* Pushes the given file, implicitly included at the start of a\n@@ -1468,7 +1489,7 @@ cpp_push_include (cpp_reader *pfile, const char *fname)\n bool\n cpp_push_default_include (cpp_reader *pfile, const char *fname)\n {\n-  return _cpp_stack_include (pfile, fname, true, IT_DEFAULT);\n+  return _cpp_stack_include (pfile, fname, true, IT_DEFAULT, 0);\n }\n \n /* Do appropriate cleanup when a file INC's buffer is popped off the\n@@ -1853,7 +1874,7 @@ _cpp_save_file_entries (cpp_reader *pfile, FILE *fp)\n \n \t  if (!open_file (f))\n \t    {\n-\t      open_file_failed (pfile, f, 0);\n+\t      open_file_failed (pfile, f, 0, 0);\n \t      free (result);\n \t      return false;\n \t    }\n@@ -1980,7 +2001,7 @@ _cpp_has_header (cpp_reader *pfile, const char *fname, int angle_brackets,\n   cpp_dir *start_dir = search_path_head (pfile, fname, angle_brackets, type);\n   _cpp_file *file = _cpp_find_file (pfile, fname, start_dir,\n \t\t\t\t    /*fake=*/false, angle_brackets,\n-\t\t\t\t    /*implicit_preinclude=*/false);\n+\t\t\t\t    /*implicit_preinclude=*/false, 0);\n   return file->err_no != ENOENT;\n }\n "}, {"sha": "543f3b971531becd46755014c6481474cf687ae8", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b", "patch": "@@ -992,7 +992,8 @@ extern bool cpp_warning_syshdr (cpp_reader *, int, const char *msgid, ...)\n extern bool cpp_errno (cpp_reader *, int, const char *msgid);\n /* Similarly, but with \"FILENAME: \" instead of \"MSGID: \", where\n    the filename is not localized.  */\n-extern bool cpp_errno_filename (cpp_reader *, int, const char *filename);\n+extern bool cpp_errno_filename (cpp_reader *, int, const char *filename,\n+\t\t\t\tsource_location loc);\n \n /* Same as cpp_error, except additionally specifies a position as a\n    (translation unit) physical line and physical column.  If the line is\n@@ -1010,6 +1011,10 @@ extern bool cpp_warning_with_line_syshdr (cpp_reader *, int, source_location,\n                                           unsigned, const char *msgid, ...)\n   ATTRIBUTE_PRINTF_5;\n \n+extern bool cpp_error_at (cpp_reader * pfile, int level,\n+\t\t\t  source_location src_loc, const char *msgid, ...)\n+  ATTRIBUTE_PRINTF_4;\n+\n /* In lex.c */\n extern int cpp_ideq (const cpp_token *, const char *);\n extern void cpp_output_line (cpp_reader *, FILE *);"}, {"sha": "2df8cfb73c3093618bf213a8a3faab5ae54b3038", "filename": "libcpp/init.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b", "patch": "@@ -616,6 +616,8 @@ cpp_post_options (cpp_reader *pfile)\n const char *\n cpp_read_main_file (cpp_reader *pfile, const char *fname)\n {\n+  const source_location loc = 0;\n+\n   if (CPP_OPTION (pfile, deps.style) != DEPS_NONE)\n     {\n       if (!pfile->deps)\n@@ -626,11 +628,12 @@ cpp_read_main_file (cpp_reader *pfile, const char *fname)\n     }\n \n   pfile->main_file\n-    = _cpp_find_file (pfile, fname, &pfile->no_search_path, false, 0, false);\n+    = _cpp_find_file (pfile, fname, &pfile->no_search_path, false, 0, false,\n+\t\t      loc);\n   if (_cpp_find_failed (pfile->main_file))\n     return NULL;\n \n-  _cpp_stack_file (pfile, pfile->main_file, false);\n+  _cpp_stack_file (pfile, pfile->main_file, false, loc);\n \n   /* For foo.i, read the original filename foo.c now, for the benefit\n      of the front ends.  */"}, {"sha": "ca2b4988cf6f71e64f2c6dca506a82bba20dc4b0", "filename": "libcpp/internal.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=ac81cf0b2bf5efdd716d10d1c218eb5a17e1035b", "patch": "@@ -645,13 +645,14 @@ extern void _cpp_destroy_hashtable (cpp_reader *);\n /* In files.c */\n typedef struct _cpp_file _cpp_file;\n extern _cpp_file *_cpp_find_file (cpp_reader *, const char *, cpp_dir *,\n-\t\t\t\t  bool, int, bool);\n+\t\t\t\t  bool, int, bool, source_location);\n extern bool _cpp_find_failed (_cpp_file *);\n extern void _cpp_mark_file_once_only (cpp_reader *, struct _cpp_file *);\n extern void _cpp_fake_include (cpp_reader *, const char *);\n-extern bool _cpp_stack_file (cpp_reader *, _cpp_file*, bool);\n+extern bool _cpp_stack_file (cpp_reader *, _cpp_file*, bool,\n+\t\t\t     source_location);\n extern bool _cpp_stack_include (cpp_reader *, const char *, int,\n-\t\t\t\tenum include_type);\n+\t\t\t\tenum include_type, source_location);\n extern int _cpp_compare_file_date (cpp_reader *, const char *, int);\n extern void _cpp_report_missing_guards (cpp_reader *);\n extern void _cpp_init_files (cpp_reader *);"}]}