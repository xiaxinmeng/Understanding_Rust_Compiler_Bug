{"sha": "07c0b5604acc658ba193b2b5f0c592ade689e8e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdjMGI1NjA0YWNjNjU4YmExOTNiMmI1ZjBjNTkyYWRlNjg5ZThlNA==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-03-11T13:18:08Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-03-11T13:18:08Z"}, "message": "re PR target/51244 ([SH] Inefficient conditional branch and code around T bit)\n\n\tPR target/51244\n\t* config/sh/sh.md (movnegt): Expand into respective insns immediately.\n\tUse movrt_negc instead of negc pattern for non-SH2A.\n\t(*movnegt): Remove.\n\t(*movrt_negc, *negnegt, *movtt, *movt_qi): New insns and splits.\n\n\tPR target/51244\n\t* gcc.target/sh/pr51244-1.c: Fix thinkos.\n\nFrom-SVN: r185192", "tree": {"sha": "56ef3c7d27a282bc4adfe5a73ccf5a4006a346c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56ef3c7d27a282bc4adfe5a73ccf5a4006a346c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07c0b5604acc658ba193b2b5f0c592ade689e8e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07c0b5604acc658ba193b2b5f0c592ade689e8e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07c0b5604acc658ba193b2b5f0c592ade689e8e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07c0b5604acc658ba193b2b5f0c592ade689e8e4/comments", "author": null, "committer": null, "parents": [{"sha": "9237e39d541a9eed92f0487d681ba9d6bdefa7ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9237e39d541a9eed92f0487d681ba9d6bdefa7ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9237e39d541a9eed92f0487d681ba9d6bdefa7ee"}], "stats": {"total": 116, "additions": 90, "deletions": 26}, "files": [{"sha": "faafd809487cfde25769022b40be6150096d6543", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c0b5604acc658ba193b2b5f0c592ade689e8e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c0b5604acc658ba193b2b5f0c592ade689e8e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07c0b5604acc658ba193b2b5f0c592ade689e8e4", "patch": "@@ -1,3 +1,11 @@\n+2012-03-11  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/51244\n+\t* config/sh/sh.md (movnegt): Expand into respective insns immediately.\n+\tUse movrt_negc instead of negc pattern for non-SH2A.\n+\t(*movnegt): Remove.\n+\t(*movrt_negc, *negnegt, *movtt, *movt_qi): New insns and splits.\n+\n 2012-03-10  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (ix86_decompose_address): Disallow fs:(reg)"}, {"sha": "528a120b17c9e628adb86cc3a2c191fdbafaa2e2", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 71, "deletions": 20, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c0b5604acc658ba193b2b5f0c592ade689e8e4/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c0b5604acc658ba193b2b5f0c592ade689e8e4/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=07c0b5604acc658ba193b2b5f0c592ade689e8e4", "patch": "@@ -9679,37 +9679,88 @@ mov.l\\\\t1f,r0\\\\n\\\\\n ;; If the constant -1 can be CSE-ed or lifted out of a loop it effectively\n ;; becomes a one instruction operation.  Moreover, care must be taken that\n ;; the insn can still be combined with inverted compare and branch code\n-;; around it.\n-;; The expander will reserve the constant -1, the insn makes the whole thing\n-;; combinable, the splitter finally emits the insn if it was not combined \n-;; away.\n-;; Notice that when using the negc variant the T bit also gets inverted.\n+;; around it.  On the other hand, if a function returns the complement of\n+;; a previous comparison result in the T bit, the xor #1,r0 approach might\n+;; lead to better code.\n \n (define_expand \"movnegt\"\n-  [(set (match_dup 1) (const_int -1))\n-   (parallel [(set (match_operand:SI 0 \"arith_reg_dest\" \"\")\n-\t\t   (xor:SI (reg:SI T_REG) (const_int 1)))\n-   (use (match_dup 1))])]\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"\")\n+\t(xor:SI (reg:SI T_REG) (const_int 1)))]\n   \"\"\n {\n-  operands[1] = gen_reg_rtx (SImode);\n+  if (TARGET_SH2A)\n+    emit_insn (gen_movrt (operands[0]));\n+  else\n+    {\n+      rtx val = force_reg (SImode, gen_int_mode (-1, SImode));\n+      emit_insn (gen_movrt_negc (operands[0], val));\n+    }\n+  DONE;\n })\n \n-(define_insn_and_split \"*movnegt\"\n+(define_insn \"movrt_negc\"\n   [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n \t(xor:SI (reg:SI T_REG) (const_int 1)))\n+   (set (reg:SI T_REG) (const_int 1))\n    (use (match_operand:SI 1 \"arith_reg_operand\" \"r\"))]\n   \"TARGET_SH1\"\n+  \"negc\t%1,%0\"\n+  [(set_attr \"type\" \"arith\")])\n+\n+;; The *negnegt patterns help the combine pass to figure out how to fold \n+;; an explicit double T bit negation.\n+(define_insn_and_split \"*negnegt\"\n+  [(set (reg:SI T_REG)\n+\t(eq:SI (subreg:QI (xor:SI (reg:SI T_REG) (const_int 1)) 3)\n+        (const_int 0)))]\n+  \"! TARGET_LITTLE_ENDIAN\"\n   \"#\"\n-  \"&& 1\"\n-  [(const_int 0)]\n-{\n-  if (TARGET_SH2A)\n-    emit_insn (gen_movrt (operands[0]));\n-  else\n-    emit_insn (gen_negc (operands[0], operands[1]));\n-  DONE;\n-}\n+  \"\"\n+  [(const_int 0)])\n+\n+(define_insn_and_split \"*negnegt\"\n+  [(set (reg:SI T_REG)\n+\t(eq:SI (subreg:QI (xor:SI (reg:SI T_REG) (const_int 1)) 0)\n+        (const_int 0)))]\n+  \"TARGET_LITTLE_ENDIAN\"\n+  \"#\"\n+  \"\"\n+  [(const_int 0)])\n+\n+;; The *movtt patterns improve code at -O1.\n+(define_insn_and_split \"*movtt\"\n+  [(set (reg:SI T_REG)\n+\t(eq:SI (zero_extend:SI (subreg:QI (reg:SI T_REG) 3))\n+        (const_int 1)))]\n+  \"! TARGET_LITTLE_ENDIAN\"\n+  \"#\"\n+  \"\"\n+  [(const_int 0)])\n+\n+(define_insn_and_split \"*movtt\"\n+  [(set (reg:SI T_REG)\n+\t(eq:SI (zero_extend:SI (subreg:QI (reg:SI T_REG) 0))\n+        (const_int 1)))]\n+  \"TARGET_LITTLE_ENDIAN\"\n+  \"#\"\n+  \"\"\n+  [(const_int 0)])\n+\n+;; The *movt_qi patterns help the combine pass convert a movrt_negc pattern\n+;; into a movt Rn, xor #1 Rn pattern.  This can happen when e.g. a function\n+;; returns the inverted T bit value.\n+(define_insn \"*movt_qi\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n+\t(zero_extend:SI (subreg:QI (reg:SI T_REG) 3)))]\n+  \"! TARGET_LITTLE_ENDIAN\"\n+  \"movt\t%0\"\n+  [(set_attr \"type\" \"arith\")])\n+\n+(define_insn \"*movt_qi\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n+\t(zero_extend:SI (subreg:QI (reg:SI T_REG) 0)))]\n+  \"TARGET_LITTLE_ENDIAN\"\n+  \"movt\t%0\"\n   [(set_attr \"type\" \"arith\")])\n \n (define_expand \"cstoresf4\""}, {"sha": "a9a31200b0304bfbd7d4b9734738fde0ae01be6d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c0b5604acc658ba193b2b5f0c592ade689e8e4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c0b5604acc658ba193b2b5f0c592ade689e8e4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=07c0b5604acc658ba193b2b5f0c592ade689e8e4", "patch": "@@ -1,3 +1,8 @@\n+2012-03-11  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/51244\n+\t* gcc.target/sh/pr51244-1.c: Fix thinkos.\n+\n 2012-03-10  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR target/52450"}, {"sha": "34e1b0233266705c04e19945baa8ecf463819c45", "filename": "gcc/testsuite/gcc.target/sh/pr51244-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c0b5604acc658ba193b2b5f0c592ade689e8e4/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c0b5604acc658ba193b2b5f0c592ade689e8e4/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-1.c?ref=07c0b5604acc658ba193b2b5f0c592ade689e8e4", "patch": "@@ -13,20 +13,20 @@ testfunc_00 (int a, int b, int c, int d)\n }\n \n int\n-testfunc_01 (int a, char* p, int b, int c)\n+testfunc_01 (int a, int b, int c, int d)\n {\n-  return (a == b && a == c) ? b : c;\n+  return (a == b || a == d) ? b : c;\n }\n \n int\n-testfunc_02 (int a, char* p, int b, int c)\n+testfunc_02 (int a, int b, int c, int d)\n {\n-  return (a == b && a == c) ? b : c;\n+  return (a == b && a == d) ? b : c;\n }\n \n int\n-testfunc_03 (int a, char* p, int b, int c)\n+testfunc_03 (int a, int b, int c, int d)\n {\n-  return (a != b && a != c) ? b : c;\n+  return (a != b && a != d) ? b : c;\n }\n "}]}