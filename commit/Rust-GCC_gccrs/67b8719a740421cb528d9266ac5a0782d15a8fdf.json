{"sha": "67b8719a740421cb528d9266ac5a0782d15a8fdf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdiODcxOWE3NDA0MjFjYjUyOGQ5MjY2YWM1YTA3ODJkMTVhOGZkZg==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-02-14T06:31:20Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-02-14T06:31:20Z"}, "message": "cppfiles.c (read_and_prescan): When emitting deferred newlines...\n\n2000-02-13   Neil Booth  <NeilB@earthling.net>\n\n\t* cppfiles.c (read_and_prescan): When emitting deferred\n\tnewlines, test speccase[] again instead\tof checking each\n\tpossible whitespace character in turn.  When we encounter \\r,\n\tlook behind for \\n first, then ahead.\n\nFrom-SVN: r31963", "tree": {"sha": "6aac817dd3ae37c2f473a8346e2224e721a5a4bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6aac817dd3ae37c2f473a8346e2224e721a5a4bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67b8719a740421cb528d9266ac5a0782d15a8fdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67b8719a740421cb528d9266ac5a0782d15a8fdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67b8719a740421cb528d9266ac5a0782d15a8fdf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67b8719a740421cb528d9266ac5a0782d15a8fdf/comments", "author": null, "committer": null, "parents": [{"sha": "4eadede7c1f74d804d54f1f5d4257d53c91fe6c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eadede7c1f74d804d54f1f5d4257d53c91fe6c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4eadede7c1f74d804d54f1f5d4257d53c91fe6c1"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "21b8fc43275ac654cfa3b8707f1a715b2689eeab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b8719a740421cb528d9266ac5a0782d15a8fdf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b8719a740421cb528d9266ac5a0782d15a8fdf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67b8719a740421cb528d9266ac5a0782d15a8fdf", "patch": "@@ -1,3 +1,10 @@\n+2000-02-13   Neil Booth  <NeilB@earthling.net>\n+\n+\t* cppfiles.c (read_and_prescan): When emitting deferred\n+\tnewlines, test speccase[] again instead\tof checking each\n+\tpossible whitespace character in turn.  When we encounter \\r,\n+\tlook behind for \\n first, then ahead.\n+\n 2000-02-13  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* cse.c (cse_altered): New internal flag."}, {"sha": "592cb6b9201a395442d23eb2944a61dbcd986740", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b8719a740421cb528d9266ac5a0782d15a8fdf/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b8719a740421cb528d9266ac5a0782d15a8fdf/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=67b8719a740421cb528d9266ac5a0782d15a8fdf", "patch": "@@ -904,8 +904,9 @@ read_and_prescan (pfile, fp, desc, len)\n \t      memcpy (op, ip, span);\n \t      op += span;\n \t      ip += span;\n-\t      if (*ip == '\\n' || *ip == '\\t'\n-\t\t  || *ip == ' ' || *ip == ' ')\n+\t      /* If ip[0] is SPECCASE_EMPTY, we have hit white space.\n+\t\t Dump out the remaining deferred \\-newlines.  */\n+\t      if (speccase[ip[0]] == SPECCASE_EMPTY)\n \t\twhile (deferred_newlines)\n \t\t  deferred_newlines--, *op++ = '\\r';\n \t      span = 0;\n@@ -924,15 +925,15 @@ read_and_prescan (pfile, fp, desc, len)\n \t      goto read_next;\n \n \t    case SPECCASE_CR:  /* \\r */\n-\t      if (*ip == '\\n')\n+\t      if (ip[-2] == '\\n')\n+\t\tcontinue;\n+\t      else if (*ip == '\\n')\n \t\tip++;\n \t      else if (*ip == '\\0')\n \t\t{\n \t\t  *--ibase = '\\r';\n \t\t  goto read_next;\n \t\t}\n-\t      else if (ip[-2] == '\\n')\n-\t\tcontinue;\n \t      *op++ = '\\n';\n \t      break;\n "}]}