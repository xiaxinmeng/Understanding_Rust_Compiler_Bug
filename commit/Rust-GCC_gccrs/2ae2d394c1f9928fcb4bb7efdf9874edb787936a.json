{"sha": "2ae2d394c1f9928fcb4bb7efdf9874edb787936a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFlMmQzOTRjMWY5OTI4ZmNiNGJiN2VmZGY5ODc0ZWRiNzg3OTM2YQ==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2016-12-29T19:19:59Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2016-12-29T19:19:59Z"}, "message": "Implement LWG 2842, in_place_t check for optional::optional(U&&) should decay U.\n\nImplement LWG 2842, in_place_t check for optional::optional(U&&)\nshould decay U.\n* include/std/optional (_Optional_base(in_place_t, _Args&&...)):\nConstrain.\n(_Optional_base(in_place_t, initializer_list<_Up>, _Args&&...)):\nTurn the int-pack constraint hack into a saner bool.\n(_Optional_base<_Tp, false>::_Optional_base(in_place_t, _Args&&...)):\nConstrain.\n(_Optional_base<_Tp, false>::_Optional_base(in_place_t,\ninitializer_list<_Up>, _Args&&...)):\nTurn the int-pack constraint hack into a saner bool.\n(optional(_Up&&)): Constrain against in_place_t.\n(optional(in_place_t, _Args&&...)): Constrain.\n(constexpr optional(in_place_t, initializer_list<_Up>, _Args&&...)):\nTurn the int-pack constraint hack into a saner bool.\n* testsuite/20_util/optional/cons/value_neg.cc: Add a test for\na type that is constructible from in_place.\n\nFrom-SVN: r243966", "tree": {"sha": "5f999260165757bb14be4c311ec15e229091ee47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f999260165757bb14be4c311ec15e229091ee47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ae2d394c1f9928fcb4bb7efdf9874edb787936a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ae2d394c1f9928fcb4bb7efdf9874edb787936a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ae2d394c1f9928fcb4bb7efdf9874edb787936a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ae2d394c1f9928fcb4bb7efdf9874edb787936a/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3d17b5e71df5bae6d5fe34319058473aa6678d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3d17b5e71df5bae6d5fe34319058473aa6678d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3d17b5e71df5bae6d5fe34319058473aa6678d4"}], "stats": {"total": 57, "additions": 42, "deletions": 15}, "files": [{"sha": "34ca95a846eac5f56bcebc4e5a2e5efa23d4a1d5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ae2d394c1f9928fcb4bb7efdf9874edb787936a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ae2d394c1f9928fcb4bb7efdf9874edb787936a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2ae2d394c1f9928fcb4bb7efdf9874edb787936a", "patch": "@@ -1,3 +1,23 @@\n+2016-12-29  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement LWG 2842, in_place_t check for optional::optional(U&&)\n+\tshould decay U.\n+\t* include/std/optional (_Optional_base(in_place_t, _Args&&...)):\n+\tConstrain.\n+\t(_Optional_base(in_place_t, initializer_list<_Up>, _Args&&...)):\n+\tTurn the int-pack constraint hack into a saner bool.\n+\t(_Optional_base<_Tp, false>::_Optional_base(in_place_t, _Args&&...)):\n+\tConstrain.\n+\t(_Optional_base<_Tp, false>::_Optional_base(in_place_t,\n+\tinitializer_list<_Up>, _Args&&...)):\n+\tTurn the int-pack constraint hack into a saner bool.\n+\t(optional(_Up&&)): Constrain against in_place_t.\n+\t(optional(in_place_t, _Args&&...)): Constrain.\n+\t(constexpr optional(in_place_t, initializer_list<_Up>, _Args&&...)):\n+\tTurn the int-pack constraint hack into a saner bool.\n+\t* testsuite/20_util/optional/cons/value_neg.cc: Add a test for\n+\ta type that is constructible from in_place.\n+\n 2016-12-24  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/ext/random.tcc: Fix usage of _OutputIteratorConcept."}, {"sha": "73bc2b42bf3d7eac603d4142923f9ba6185ef415", "filename": "libstdc++-v3/include/std/optional", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ae2d394c1f9928fcb4bb7efdf9874edb787936a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ae2d394c1f9928fcb4bb7efdf9874edb787936a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional?ref=2ae2d394c1f9928fcb4bb7efdf9874edb787936a", "patch": "@@ -128,15 +128,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _Optional_base{} { }\n \n       // Constructors for engaged optionals.\n-      template<typename... _Args>\n+      template<typename... _Args,\n+\t       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>\n         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)\n         : _M_payload(std::forward<_Args>(__args)...), _M_engaged(true) { }\n \n       template<typename _Up, typename... _Args,\n-               enable_if_t<is_constructible<_Tp,\n-                                            initializer_list<_Up>&,\n-                                            _Args&&...>::value,\n-                           int>...>\n+               enable_if_t<is_constructible_v<_Tp,\n+\t\t\t\t\t      initializer_list<_Up>&,\n+\t\t\t\t\t      _Args&&...>, bool> = false>\n         constexpr explicit _Optional_base(in_place_t,\n                                           initializer_list<_Up> __il,\n                                           _Args&&... __args)\n@@ -264,15 +264,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr _Optional_base(nullopt_t) noexcept\n       : _Optional_base{} { }\n \n-      template<typename... _Args>\n+      template<typename... _Args,\n+\t       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>\n         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)\n         : _M_payload(std::forward<_Args>(__args)...), _M_engaged(true) { }\n \n       template<typename _Up, typename... _Args,\n-               enable_if_t<is_constructible<_Tp,\n-                                            initializer_list<_Up>&,\n-                                            _Args&&...>::value,\n-\t\t\t   int>...>\n+               enable_if_t<is_constructible_v<_Tp,\n+\t\t\t\t\t      initializer_list<_Up>&,\n+\t\t\t\t\t      _Args&&...>, bool> = false>\n         constexpr explicit _Optional_base(in_place_t,\n                                           initializer_list<_Up> __il,\n                                           _Args&&... __args)\n@@ -432,6 +432,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template <typename _Up = _Tp,\n                 enable_if_t<__and_<\n \t\t\t      __not_<is_same<optional<_Tp>, decay_t<_Up>>>,\n+\t\t\t      __not_<is_same<in_place_t, decay_t<_Up>>>,\n \t\t\t      is_constructible<_Tp, _Up&&>,\n \t\t\t      is_convertible<_Up&&, _Tp>\n \t\t\t      >::value, bool> = true>\n@@ -441,6 +442,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template <typename _Up = _Tp,\n                 enable_if_t<__and_<\n \t\t\t      __not_<is_same<optional<_Tp>, decay_t<_Up>>>,\n+\t\t\t      __not_<is_same<in_place_t, decay_t<_Up>>>,\n \t\t\t      is_constructible<_Tp, _Up&&>,\n \t\t\t      __not_<is_convertible<_Up&&, _Tp>>\n \t\t\t      >::value, bool> = false>\n@@ -499,15 +501,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  emplace(std::move(*__t));\n       }\n \n-      template<typename... _Args>\n+      template<typename... _Args,\n+\t       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>\n       explicit constexpr optional(in_place_t, _Args&&... __args)\n         : _Base(std::in_place, std::forward<_Args>(__args)...) { }\n \n       template<typename _Up, typename... _Args,\n-               enable_if_t<is_constructible<_Tp,\n-                                            initializer_list<_Up>&,\n-                                            _Args&&...>::value,\n-                           int>...>\n+               enable_if_t<is_constructible_v<_Tp,\n+\t\t\t\t\t      initializer_list<_Up>&,\n+\t\t\t\t\t      _Args&&...>, bool> = false>\n       explicit constexpr optional(in_place_t,\n \t\t\t\t  initializer_list<_Up> __il,\n \t\t\t\t  _Args&&... __args)"}, {"sha": "6a2827ec46133fd16ae7739eb8ca415cd70dc4b4", "filename": "libstdc++-v3/testsuite/20_util/optional/cons/value_neg.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ae2d394c1f9928fcb4bb7efdf9874edb787936a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fcons%2Fvalue_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ae2d394c1f9928fcb4bb7efdf9874edb787936a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fcons%2Fvalue_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fcons%2Fvalue_neg.cc?ref=2ae2d394c1f9928fcb4bb7efdf9874edb787936a", "patch": "@@ -35,5 +35,10 @@ int main()\n     std::optional<X> ox2 = 42; // { dg-error \"conversion\" }\n     std::optional<std::unique_ptr<int>> oup{new int};\n     std::optional<std::unique_ptr<int>> oup2 = new int;  // { dg-error \"conversion\" }\n+    struct U { explicit U(std::in_place_t); };\n+    std::optional<U> ou(std::in_place); // { dg-error \"no matching\" }\n+    // { dg-error \"no type\" \"\" { target { *-*-* } } 438 }\n+    // { dg-error \"no type\" \"\" { target { *-*-* } } 448 }\n+    // { dg-error \"no type\" \"\" { target { *-*-* } } 505 }\n   }\n }"}]}