{"sha": "89a79e9629f0713df2c893133084563b5082e8e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODlhNzllOTYyOWYwNzEzZGYyYzg5MzEzMzA4NDU2M2I1MDgyZThlOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-07-29T07:48:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-07-29T07:48:10Z"}, "message": "gimple-fold.c (has_use_on_stmt): New function.\n\n2015-07-29  Richard Biener  <rguenther@suse.de>\n\n\t* gimple-fold.c (has_use_on_stmt): New function.\n\t(replace_stmt_with_simplification): Use it to allow\n\tabnormals originally referenced in the stmt.\n\t(fold_stmt_1): Canonicalize operand order.\n\nFrom-SVN: r226339", "tree": {"sha": "30f84f7ebfcbe5a923d5cdd4e03e8e2e2fc83e84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30f84f7ebfcbe5a923d5cdd4e03e8e2e2fc83e84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89a79e9629f0713df2c893133084563b5082e8e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89a79e9629f0713df2c893133084563b5082e8e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89a79e9629f0713df2c893133084563b5082e8e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89a79e9629f0713df2c893133084563b5082e8e8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "97d8f80175e83ea6b1057710b02aaecc53988c46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97d8f80175e83ea6b1057710b02aaecc53988c46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97d8f80175e83ea6b1057710b02aaecc53988c46"}], "stats": {"total": 72, "additions": 67, "deletions": 5}, "files": [{"sha": "e3ed02b100716cfecc024ba3162efdb73d9cf720", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a79e9629f0713df2c893133084563b5082e8e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a79e9629f0713df2c893133084563b5082e8e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89a79e9629f0713df2c893133084563b5082e8e8", "patch": "@@ -1,3 +1,10 @@\n+2015-07-29  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-fold.c (has_use_on_stmt): New function.\n+\t(replace_stmt_with_simplification): Use it to allow\n+\tabnormals originally referenced in the stmt.\n+\t(fold_stmt_1): Canonicalize operand order.\n+\n 2015-07-28  David Sherwood  <david.sherwood@arm.com>\n \n \t* config/arm/arm.c (neon_element_bits, neon_valid_immediate): Call"}, {"sha": "68a4a9f5f45e8120a4095b33c79b96b50f5e1517", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 60, "deletions": 5, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a79e9629f0713df2c893133084563b5082e8e8/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a79e9629f0713df2c893133084563b5082e8e8/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=89a79e9629f0713df2c893133084563b5082e8e8", "patch": "@@ -3307,6 +3307,19 @@ gimple_fold_call (gimple_stmt_iterator *gsi, bool inplace)\n }\n \n \n+/* Return true whether NAME has a use on STMT.  */\n+\n+static bool\n+has_use_on_stmt (tree name, gimple stmt)\n+{\n+  imm_use_iterator iter;\n+  use_operand_p use_p;\n+  FOR_EACH_IMM_USE_FAST (use_p, iter, name)\n+    if (USE_STMT (use_p) == stmt)\n+      return true;\n+  return false;\n+}\n+\n /* Worker for fold_stmt_1 dispatch to pattern based folding with\n    gimple_simplify.\n \n@@ -3322,15 +3335,20 @@ replace_stmt_with_simplification (gimple_stmt_iterator *gsi,\n   gimple stmt = gsi_stmt (*gsi);\n \n   /* Play safe and do not allow abnormals to be mentioned in\n-     newly created statements.  See also maybe_push_res_to_seq.  */\n+     newly created statements.  See also maybe_push_res_to_seq.\n+     As an exception allow such uses if there was a use of the\n+     same SSA name on the old stmt.  */\n   if ((TREE_CODE (ops[0]) == SSA_NAME\n-       && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (ops[0]))\n+       && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (ops[0])\n+       && !has_use_on_stmt (ops[0], stmt))\n       || (ops[1]\n \t  && TREE_CODE (ops[1]) == SSA_NAME\n-\t  && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (ops[1]))\n+\t  && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (ops[1])\n+\t  && !has_use_on_stmt (ops[1], stmt))\n       || (ops[2]\n \t  && TREE_CODE (ops[2]) == SSA_NAME\n-\t  && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (ops[2])))\n+\t  && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (ops[2])\n+\t  && !has_use_on_stmt (ops[2], stmt)))\n     return false;\n \n   if (gcond *cond_stmt = dyn_cast <gcond *> (stmt))\n@@ -3531,7 +3549,8 @@ fold_stmt_1 (gimple_stmt_iterator *gsi, bool inplace, tree (*valueize) (tree))\n      after propagation.\n      ???  This shouldn't be done in generic folding but in the\n      propagation helpers which also know whether an address was\n-     propagated.  */\n+     propagated.\n+     Also canonicalize operand order.  */\n   switch (gimple_code (stmt))\n     {\n     case GIMPLE_ASSIGN:\n@@ -3547,6 +3566,27 @@ fold_stmt_1 (gimple_stmt_iterator *gsi, bool inplace, tree (*valueize) (tree))\n \t      && maybe_canonicalize_mem_ref_addr (lhs))\n \t    changed = true;\n \t}\n+      else\n+\t{\n+\t  /* Canonicalize operand order.  */\n+\t  enum tree_code code = gimple_assign_rhs_code (stmt);\n+\t  if (TREE_CODE_CLASS (code) == tcc_comparison\n+\t      || commutative_tree_code (code)\n+\t      || commutative_ternary_tree_code (code))\n+\t    {\n+\t      tree rhs1 = gimple_assign_rhs1 (stmt);\n+\t      tree rhs2 = gimple_assign_rhs2 (stmt);\n+\t      if (tree_swap_operands_p (rhs1, rhs2, false))\n+\t\t{\n+\t\t  gimple_assign_set_rhs1 (stmt, rhs2);\n+\t\t  gimple_assign_set_rhs2 (stmt, rhs1);\n+\t\t  if (TREE_CODE_CLASS (code) == tcc_comparison)\n+\t\t    gimple_assign_set_rhs_code (stmt,\n+\t\t\t\t\t\tswap_tree_comparison (code));\n+\t\t  changed = true;\n+\t\t}\n+\t    }\n+\t}\n       break;\n     case GIMPLE_CALL:\n       {\n@@ -3597,6 +3637,21 @@ fold_stmt_1 (gimple_stmt_iterator *gsi, bool inplace, tree (*valueize) (tree))\n \t    changed = true;\n \t}\n       break;\n+    case GIMPLE_COND:\n+      {\n+\t/* Canonicalize operand order.  */\n+\ttree lhs = gimple_cond_lhs (stmt);\n+\ttree rhs = gimple_cond_rhs (stmt);\n+\tif (tree_swap_operands_p (lhs, rhs, false))\n+\t  {\n+\t    gcond *gc = as_a <gcond *> (stmt);\n+\t    gimple_cond_set_lhs (gc, rhs);\n+\t    gimple_cond_set_rhs (gc, lhs);\n+\t    gimple_cond_set_code (gc,\n+\t\t\t\t  swap_tree_comparison (gimple_cond_code (gc)));\n+\t    changed = true;\n+\t  }\n+      }\n     default:;\n     }\n "}]}