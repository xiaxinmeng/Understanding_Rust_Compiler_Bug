{"sha": "818b11b942756b6af4e2dd01e2893e224076d40c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE4YjExYjk0Mjc1NmI2YWY0ZTJkZDAxZTI4OTNlMjI0MDc2ZDQwYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-12-27T11:52:16Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-12-27T11:52:16Z"}, "message": "(subst, comparison cases): Expand any compound operation that is an operand...\n\n(subst, comparison cases): Expand any compound operation that is an\noperand; rerun subst on simplified result in one new case.\n\nFrom-SVN: r2922", "tree": {"sha": "427a97eebe48afa2f8c4e8369bce19e50ff1b38a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/427a97eebe48afa2f8c4e8369bce19e50ff1b38a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/818b11b942756b6af4e2dd01e2893e224076d40c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/818b11b942756b6af4e2dd01e2893e224076d40c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/818b11b942756b6af4e2dd01e2893e224076d40c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/818b11b942756b6af4e2dd01e2893e224076d40c/comments", "author": null, "committer": null, "parents": [{"sha": "3b94d087e81d9b39a0944a325825d49b557f3423", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b94d087e81d9b39a0944a325825d49b557f3423", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b94d087e81d9b39a0944a325825d49b557f3423"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "db80ef293774060d6059162edea5673260bb8fc7", "filename": "gcc/combine.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818b11b942756b6af4e2dd01e2893e224076d40c/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818b11b942756b6af4e2dd01e2893e224076d40c/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=818b11b942756b6af4e2dd01e2893e224076d40c", "patch": "@@ -3370,17 +3370,27 @@ subst (x, from, to, in_dest, unique_copy)\n \t  /* If STORE_FLAG_VALUE is 1, we can convert (ne x 0) to simply X\n \t     if only the low-order bit is significant in X (such as when\n \t     X is a ZERO_EXTRACT of one bit.  Similarly, we can convert\n-\t     EQ to (xor X 1).  */\n+\t     EQ to (xor X 1).  Remove any ZERO_EXTRACT we made when thinking\n+\t     this was a comparison.  It may now be simpler to use, e.g., an\n+\t     AND.  If a ZERO_EXTRACT is indeed appropriate, it will\n+\t     be placed back by the call to make_compound_operation in the\n+\t     SET case.  */\n \t  if (new_code == NE && GET_MODE_CLASS (mode) == MODE_INT\n \t      && op1 == const0_rtx\n \t      && significant_bits (op0, GET_MODE (op0)) == 1)\n-\t    return gen_lowpart_for_combine (mode, op0);\n+\t    return gen_lowpart_for_combine (mode,\n+\t\t\t\t\t    expand_compound_operation (op0));\n \t  else if (new_code == EQ && GET_MODE_CLASS (mode) == MODE_INT\n \t\t   && op1 == const0_rtx\n \t\t   && significant_bits (op0, GET_MODE (op0)) == 1)\n-\t    return gen_rtx_combine (XOR, mode,\n-\t\t\t\t    gen_lowpart_for_combine (mode, op0),\n-\t\t\t\t    const1_rtx);\n+\t    {\n+\t      op0 = expand_compound_operation (op0);\n+\n+\t      x = gen_rtx_combine (XOR, mode,\n+\t\t\t\t   gen_lowpart_for_combine (mode, op0),\n+\t\t\t\t   const1_rtx);\n+\t      goto restart;\n+\t    }\n #endif\n \n #if STORE_FLAG_VALUE == -1\n@@ -3392,6 +3402,7 @@ subst (x, from, to, in_dest, unique_copy)\n \t      && op1 == const0_rtx\n \t      && significant_bits (op0, GET_MODE (op0)) == 1)\n \t    {\n+\t      op0 = expand_compound_operation (op0);\n \t      x = gen_rtx_combine (NEG, mode,\n \t\t\t\t   gen_lowpart_for_combine (mode, op0));\n \t      goto restart;\n@@ -3411,7 +3422,8 @@ subst (x, from, to, in_dest, unique_copy)\n \t      && mode == GET_MODE (op0)\n \t      && (i = exact_log2 (significant_bits (op0, GET_MODE (op0)))) >= 0)\n \t    {\n-\t      x = simplify_shift_const (NULL_RTX, ASHIFT, mode, op0,\n+\t      x = simplify_shift_const (NULL_RTX, ASHIFT, mode,\n+\t\t\t\t\texpand_compound_operation (op0),\n \t\t\t\t\tGET_MODE_BITSIZE (mode) - 1 - i);\n \t      if (GET_CODE (x) == AND && XEXP (x, 1) == const_true_rtx)\n \t\treturn XEXP (x, 0);"}]}