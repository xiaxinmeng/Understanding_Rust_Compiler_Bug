{"sha": "1e77bcbc7a2fcbfb0579b239afb31997bc510c9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU3N2JjYmM3YTJmY2JmYjA1NzliMjM5YWZiMzE5OTdiYzUxMGM5ZA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-03-02T08:57:07Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-10T06:59:31Z"}, "message": "AVX512FP16: Add testcase for vcmpph/vcmpsh/vcomish/vucomish.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-helper.h\n\t(check_results_mask): New check_function.\n\t* gcc.target/i386/avx512fp16-vcmpph-1a.c: New test.\n\t* gcc.target/i386/avx512fp16-vcmpph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcmpsh-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcmpsh-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcomish-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcomish-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcomish-1c.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcmpph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vcmpph-1b.c: Ditto.", "tree": {"sha": "eb49aea3c48a6fd7a5e19bc8d37e857eca526eb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb49aea3c48a6fd7a5e19bc8d37e857eca526eb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e77bcbc7a2fcbfb0579b239afb31997bc510c9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e77bcbc7a2fcbfb0579b239afb31997bc510c9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e77bcbc7a2fcbfb0579b239afb31997bc510c9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e77bcbc7a2fcbfb0579b239afb31997bc510c9d/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f200733fe863c7ed4d33ab3fda16471d5d69981", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f200733fe863c7ed4d33ab3fda16471d5d69981", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f200733fe863c7ed4d33ab3fda16471d5d69981"}], "stats": {"total": 408, "additions": 408, "deletions": 0}, "files": [{"sha": "5d3539bf31248858ba3cafa1ae1717d3546ecd1b", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-helper.h", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e77bcbc7a2fcbfb0579b239afb31997bc510c9d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-helper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e77bcbc7a2fcbfb0579b239afb31997bc510c9d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-helper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-helper.h?ref=1e77bcbc7a2fcbfb0579b239afb31997bc510c9d", "patch": "@@ -107,6 +107,10 @@ display_ps(const void *p, const char *banner, int n_elems)\n   check_results ((void*)res, (void*)exp, size,\\\n \t\t NAME_OF(intrin))\n \n+#define CHECK_RESULT_MASK(res, exp, size, intrin) \\\n+  check_results_mask ((__mmask32)res, (__mmask32)exp, size,\\\n+\t\t NAME_OF(intrin))\n+\n /* To evaluate whether result match _Float16 precision,\n    only the last bit of real/emulate result could be\n    different.  */\n@@ -136,6 +140,18 @@ check_results(void *got, void *exp, int n_elems, char *banner)\n     }\n }\n \n+void NOINLINE\n+check_results_mask(__mmask32 got, __mmask32 exp, int n_elems, char *banner)\n+{\n+  if (got != exp) {\n+#ifdef DEBUG\n+      printf(\"ERROR: %s failed : got mask %x != exp mask %x\\n\",\n+\t     banner ? banner : \"\", got, exp);\n+#endif\n+      n_errs++;\n+  }\n+}\n+\n /* Functions for src/dest initialization */\n void NOINLINE\n init_src()\n@@ -156,6 +172,27 @@ init_src()\n     src2 = pack_twops_2ph(v3, v4);\n }\n \n+void NOINLINE\n+init_src_nanf()\n+{\n+  V512 v1, v2, v3, v4;\n+  int i;\n+\n+  for (i = 0; i < 16; i++) {\n+    v1.f32[i] = i + 1 + 0.5;\n+    v2.f32[i] = i + 17 + 0.5;\n+    v3.f32[i] = i * 2 + 2 + 0.5;\n+    v4.f32[i] = i * 2 + 34 + 0.5;\n+\n+    src3.u32[i] = (i + 1) * 10;\n+  }\n+\n+  v1.f32[0] = __builtin_nanf(\"\");\n+  src1 = pack_twops_2ph(v1, v2);\n+  src2 = pack_twops_2ph(v3, v4);\n+}\n+\n+\n void NOINLINE\n init_dest(V512 * res, V512 * exp)\n {"}, {"sha": "6425c4644c1938a4a7e98a79bfa933e26e391539", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcmpph-1a.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e77bcbc7a2fcbfb0579b239afb31997bc510c9d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcmpph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e77bcbc7a2fcbfb0579b239afb31997bc510c9d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcmpph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcmpph-1a.c?ref=1e77bcbc7a2fcbfb0579b239afb31997bc510c9d", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcmpph\\[ \\\\t\\]+\\\\\\$1\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%k\\[0-9\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcmpph\\[ \\\\t\\]+\\\\\\$2\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%k\\[0-9\\]\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcmpph\\[ \\\\t\\]+\\\\\\$3\\[^\\n\\r]*\\{sae\\}\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%k\\[0-9\\]\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcmpph\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$4\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%k\\[0-9\\]\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __mmask32 res, res1, res2;\n+volatile __m512h x1, x2;\n+volatile __mmask32 m32;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_cmp_ph_mask (x1, x2, 1);\n+  res1 = _mm512_mask_cmp_ph_mask (m32, x1, x2, 2);\n+  res = _mm512_cmp_round_ph_mask (x1, x2, 3, 8);\n+  res1 = _mm512_mask_cmp_round_ph_mask (m32, x1, x2, 4, 4);\n+}"}, {"sha": "ec5eccfccb7f4e98fbb3613f024f3eab5ea12e81", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcmpph-1b.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e77bcbc7a2fcbfb0579b239afb31997bc510c9d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcmpph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e77bcbc7a2fcbfb0579b239afb31997bc510c9d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcmpph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcmpph-1b.c?ref=1e77bcbc7a2fcbfb0579b239afb31997bc510c9d", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+__mmask32 NOINLINE\n+EMULATE(cmp_ph) (V512 op1, V512 op2,\n+\t       __mmask32 k, int predicate)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i, j;\n+  __mmask16 mr1 = 0, mr2 = 0;\n+  __mmask16 m1, m2;\n+  __mmask32 mr = 0;\n+\n+  m1 = k & 0xffff;\n+  m2 = (k >> 16) & 0xffff;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+  unpack_ph_2twops(op2, &v3, &v4);\n+\n+  for (i = 0; i < 16; i++) {\n+      if (((1 << i) & m1) != 0) {\n+\t  j = v1.f32[i] == v3.f32[i] ? 1 : 0;\n+\t  mr1 = mr1 | (j << i);\n+      }\n+\n+      if (((1 << i) & m2) != 0) {\n+\t  j = v2.f32[i] == v4.f32[i] ? 1 : 0;\n+\t  mr2 = mr2 | (j << i);\n+      }\n+  }\n+\n+  mr = mr1 | (mr2 << 16);\n+  return mr;\n+}\n+\n+void\n+TEST (void)\n+{\n+  __mmask32 res, exp;\n+\n+  init_src();\n+\n+  exp = EMULATE(cmp_ph) (src1, src2,  NET_MASK, 0);\n+  res = INTRINSIC (_cmp_ph_mask) (HF(src1), HF(src2), 0);\n+  CHECK_RESULT_MASK (res, exp, N_ELEMS, _cmp_ph_mask);\n+\n+  exp = EMULATE(cmp_ph) (src1, src2,  MASK_VALUE, 0); \n+  res = INTRINSIC (_mask_cmp_ph_mask) (MASK_VALUE, HF(src1), HF(src2), 0);\n+  CHECK_RESULT_MASK (res, exp, N_ELEMS, _mask_cmp_ph_mask);\n+\n+#if AVX512F_LEN == 512\n+  exp = EMULATE(cmp_ph) (src1, src2,  NET_MASK, 0); \n+  res = INTRINSIC (_cmp_round_ph_mask) (HF(src1), HF(src2), 0, 8);\n+  CHECK_RESULT_MASK (res, exp, N_ELEMS, _cmp_round_ph_mask);\n+\n+  exp = EMULATE(cmp_ph) (src1, src2,  MASK_VALUE, 0);\n+  res = INTRINSIC (_mask_cmp_round_ph_mask) (MASK_VALUE, HF(src1), HF(src2), 0, 8);\n+  CHECK_RESULT_MASK (res, exp, N_ELEMS, _mask_cmp_round_ph_mask);\n+#endif\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "5cce097d66156ccd8392dc80069b67ca4c0bba29", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcmpsh-1a.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e77bcbc7a2fcbfb0579b239afb31997bc510c9d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcmpsh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e77bcbc7a2fcbfb0579b239afb31997bc510c9d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcmpsh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcmpsh-1a.c?ref=1e77bcbc7a2fcbfb0579b239afb31997bc510c9d", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcmpsh\\[ \\\\t\\]+\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%k\\[0-9\\]\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcmpsh\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$4\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%k\\[0-9\\]\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcmpsh\\[ \\\\t\\]+\\\\\\$3\\[^\\n\\r]*\\{sae\\}\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%k\\[0-9\\]\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcmpsh\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$4\\[^\\n\\r]*\\{sae\\}\\[^\\n\\r\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%k\\[0-9\\]\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __mmask8 res, res1, res2;\n+volatile __m128h x1, x2;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm_cmp_sh_mask (x1, x2, 3);\n+  res = _mm_mask_cmp_sh_mask (m8, x1, x2, 4);\n+  res = _mm_cmp_round_sh_mask (x1, x2, 3, 8);\n+  res1 = _mm_mask_cmp_round_sh_mask (m8, x1, x2, 4, 8);\n+}"}, {"sha": "9deae52b41d72e30f3bab08ad6c2a7f112f38fc8", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcmpsh-1b.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e77bcbc7a2fcbfb0579b239afb31997bc510c9d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcmpsh-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e77bcbc7a2fcbfb0579b239afb31997bc510c9d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcmpsh-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcmpsh-1b.c?ref=1e77bcbc7a2fcbfb0579b239afb31997bc510c9d", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 8\n+\n+__mmask8 NOINLINE\n+emulate_cmp_sh(V512 op1, V512 op2,\n+\t       __mmask8 k, int predicate)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  __mmask8 mr = 0;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+  unpack_ph_2twops(op2, &v3, &v4);\n+\n+  if ((k&1) || !k)\n+    mr = v1.f32[0] == v3.f32[0] ? 1 : 0;\n+\n+  return mr;\n+}\n+\n+void\n+test_512 (void)\n+{\n+  __mmask8 res, exp;\n+\n+  init_src();\n+\n+  exp = emulate_cmp_sh(src1, src2,  0x1, 0);\n+  res = _mm_cmp_round_sh_mask(src1.xmmh[0], src2.xmmh[0], 0, 8);\n+  check_results_mask(res, exp, 1, \"_mm_cmp_round_sh_mask\");\n+\n+  exp = emulate_cmp_sh(src1, src2,  0x1, 0);\n+  res = _mm_mask_cmp_round_sh_mask(0x1, src1.xmmh[0], src2.xmmh[0], 0, 8);\n+  check_results_mask(res, exp, 1, \"_mm_mask_cmp_round_sh_mask\");\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "b87ffd9b80f401dc5cae3fd0f5b0666116003f77", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcomish-1a.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e77bcbc7a2fcbfb0579b239afb31997bc510c9d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcomish-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e77bcbc7a2fcbfb0579b239afb31997bc510c9d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcomish-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcomish-1a.c?ref=1e77bcbc7a2fcbfb0579b239afb31997bc510c9d", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcmpsh\\[ \\\\t\\]+\\\\\\$3\\[^\\n\\r]*\\{sae\\}\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%k\\[0-9\\]\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcmpsh\\[ \\\\t\\]+\\\\\\$7\\[^\\n\\r0-9]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%k\\[0-9\\]\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcmpsh\\[ \\\\t\\]+\\\\\\$16\\[^\\n\\r0-9]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%k\\[0-9\\]\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcmpsh\\[ \\\\t\\]+\\\\\\$1\\[^\\n\\r0-9]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%k\\[0-9\\]\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcmpsh\\[ \\\\t\\]+\\\\\\$2\\[^\\n\\r0-9]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%k\\[0-9\\]\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcmpsh\\[ \\\\t\\]+\\\\\\$14\\[^\\n\\r0-9]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%k\\[0-9\\]\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcmpsh\\[ \\\\t\\]+\\\\\\$13\\[^\\n\\r0-9]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%k\\[0-9\\]\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcmpsh\\[ \\\\t\\]+\\\\\\$20\\[^\\n\\r0-9]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%k\\[0-9\\]\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcmpsh\\[ \\\\t\\]+\\\\\\$0\\[^\\n\\r0-9]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%k\\[0-9\\]\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcmpsh\\[ \\\\t\\]+\\\\\\$17\\[^\\n\\r0-9]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%k\\[0-9\\]\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcmpsh\\[ \\\\t\\]+\\\\\\$18\\[^\\n\\r0-9]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%k\\[0-9\\]\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcmpsh\\[ \\\\t\\]+\\\\\\$30\\[^\\n\\r0-9]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%k\\[0-9\\]\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcmpsh\\[ \\\\t\\]+\\\\\\$29\\[^\\n\\r0-9]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%k\\[0-9\\]\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcmpsh\\[ \\\\t\\]+\\\\\\$4\\[^\\n\\r0-9]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%k\\[0-9\\]\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h x, y;\n+volatile int res;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm_comi_round_sh (x, y, 3, 8);\n+  res = _mm_comi_sh (x, y, 7);\n+  res = _mm_comieq_sh (x, y);\n+  res = _mm_comilt_sh (x, y);\n+  res = _mm_comile_sh (x, y);\n+  res = _mm_comigt_sh (x, y);\n+  res = _mm_comige_sh (x, y);\n+  res = _mm_comineq_sh (x, y);\n+  res = _mm_ucomieq_sh (x, y);\n+  res = _mm_ucomilt_sh (x, y);\n+  res = _mm_ucomile_sh (x, y);\n+  res = _mm_ucomigt_sh (x, y);\n+  res = _mm_ucomige_sh (x, y);\n+  res = _mm_ucomineq_sh (x, y);\n+}\n+"}, {"sha": "8c398003cb9ce1e51c98f5003833b4265061bafe", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcomish-1b.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e77bcbc7a2fcbfb0579b239afb31997bc510c9d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcomish-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e77bcbc7a2fcbfb0579b239afb31997bc510c9d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcomish-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcomish-1b.c?ref=1e77bcbc7a2fcbfb0579b239afb31997bc510c9d", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+  dst_ref = 0;\t\t\t\t\t\t\\\n+  dst_ref = ((int) rel) | dst_ref;\t\t\t\\\n+  dst = _mm_comi_round_sh(src1.xmmh[0], src2.xmmh[0], imm,    \\\n+\t\t\t  _MM_FROUND_NO_EXC);\t\t\\\n+  if (dst_ref != dst) abort();\t\t\t\t\\\n+\n+void\n+test_512 (void)\n+{\n+  V512 v1,v2,v3,v4;\n+  float s1,s2;\n+  int res,exp,dst;\n+  __mmask8 dst_ref;\n+\n+  init_src();\n+  unpack_ph_2twops(src1, &v1, &v2);\n+  unpack_ph_2twops(src2, &v3, &v4);\n+  s1 = v1.f32[0];\n+  s2 = v3.f32[0];\n+\n+  CMP(_CMP_EQ_OQ, !isunordered(s1, s2) && s1 == s2);\n+  CMP(_CMP_LT_OS, !isunordered(s1, s2) && s1 < s2);\n+  CMP(_CMP_LE_OS, !isunordered(s1, s2) && s1 <= s2);\n+  CMP(_CMP_UNORD_Q, isunordered(s1, s2));\n+  CMP(_CMP_NEQ_UQ, isunordered(s1, s2) || s1 != s2);\n+  CMP(_CMP_NLT_US, isunordered(s1, s2) || s1 >= s2);\n+  CMP(_CMP_NLE_US, isunordered(s1, s2) || s1 > s2);\n+  CMP(_CMP_ORD_Q, !isunordered(s1, s2));\n+\n+  CMP(_CMP_EQ_UQ, isunordered(s1, s2) || s1 == s2);\n+  CMP(_CMP_NGE_US, isunordered(s1, s2) || s1 < s2);\n+  CMP(_CMP_NGT_US, isunordered(s1, s2) || s1 <= s2);\n+\n+  CMP(_CMP_FALSE_OQ, 0);\n+  CMP(_CMP_NEQ_OQ, !isunordered(s1, s2) && s1 != s2);\n+  CMP(_CMP_GE_OS, !isunordered(s1, s2) && s1 >= s2);\n+  CMP(_CMP_GT_OS, !isunordered(s1, s2) && s1 > s2);\n+  CMP(_CMP_TRUE_UQ, 1);\n+\n+  CMP(_CMP_EQ_OS, !isunordered(s1, s2) && s1 == s2);\n+  CMP(_CMP_LT_OQ, !isunordered(s1, s2) && s1 < s2);\n+  CMP(_CMP_LE_OQ, !isunordered(s1, s2) && s1 <= s2);\n+  CMP(_CMP_UNORD_S, isunordered(s1, s2));\n+  CMP(_CMP_NEQ_US, isunordered(s1, s2) || s1 != s2);\n+  CMP(_CMP_NLT_UQ, isunordered(s1, s2) || s1 >= s2);\n+  CMP(_CMP_NLE_UQ, isunordered(s1, s2) || s1 > s2);\n+  CMP(_CMP_ORD_S, !isunordered(s1, s2));\n+  CMP(_CMP_EQ_US, isunordered(s1, s2) || s1 == s2);\n+  CMP(_CMP_NGE_UQ, isunordered(s1, s2) || s1 < s2);\n+  CMP(_CMP_NGT_UQ, isunordered(s1, s2) || s1 <= s2);\n+  CMP(_CMP_FALSE_OS, 0);\n+  CMP(_CMP_NEQ_OS, !isunordered(s1, s2) && s1 != s2);\n+  CMP(_CMP_GE_OQ, !isunordered(s1, s2) && s1 >= s2);\n+  CMP(_CMP_GT_OQ, !isunordered(s1, s2) && s1 > s2);\n+  CMP(_CMP_TRUE_US, 1);\n+}\n+"}, {"sha": "77366a8a30ebabf22a0acaf71c2686bd533e75f6", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcomish-1c.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e77bcbc7a2fcbfb0579b239afb31997bc510c9d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcomish-1c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e77bcbc7a2fcbfb0579b239afb31997bc510c9d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcomish-1c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcomish-1c.c?ref=1e77bcbc7a2fcbfb0579b239afb31997bc510c9d", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+  dst_ref = 0;\t\t\t\t\t\t\\\n+  dst_ref = ((int) rel) | dst_ref;\t\t\t\\\n+  dst = _mm_comi_round_sh(src1.xmmh[0], src2.xmmh[0], imm,    \\\n+\t\t\t  _MM_FROUND_NO_EXC);\t\t\\\n+  if (dst_ref != dst) abort();\t\t\t\t\\\n+\n+void\n+test_512 (void)\n+{\n+  V512 v1,v2,v3,v4;\n+  float s1,s2;\n+  int res,exp,dst;\n+  __mmask8 dst_ref;\n+\n+  init_src_nanf();\n+  unpack_ph_2twops(src1, &v1, &v2);\n+  unpack_ph_2twops(src2, &v3, &v4);\n+  s1 = v1.f32[0];\n+  s2 = v3.f32[0];\n+\n+  CMP(_CMP_EQ_OQ, !isunordered(s1, s2) && s1 == s2);\n+  CMP(_CMP_LT_OS, !isunordered(s1, s2) && s1 < s2);\n+  CMP(_CMP_LE_OS, !isunordered(s1, s2) && s1 <= s2);\n+  CMP(_CMP_UNORD_Q, isunordered(s1, s2));\n+  CMP(_CMP_NEQ_UQ, isunordered(s1, s2) || s1 != s2);\n+  CMP(_CMP_NLT_US, isunordered(s1, s2) || s1 >= s2);\n+  CMP(_CMP_NLE_US, isunordered(s1, s2) || s1 > s2);\n+  CMP(_CMP_ORD_Q, !isunordered(s1, s2));\n+\n+  CMP(_CMP_EQ_UQ, isunordered(s1, s2) || s1 == s2);\n+  CMP(_CMP_NGE_US, isunordered(s1, s2) || s1 < s2);\n+  CMP(_CMP_NGT_US, isunordered(s1, s2) || s1 <= s2);\n+\n+  CMP(_CMP_FALSE_OQ, 0);\n+  CMP(_CMP_NEQ_OQ, !isunordered(s1, s2) && s1 != s2);\n+  CMP(_CMP_GE_OS, !isunordered(s1, s2) && s1 >= s2);\n+  CMP(_CMP_GT_OS, !isunordered(s1, s2) && s1 > s2);\n+  CMP(_CMP_TRUE_UQ, 1);\n+\n+  CMP(_CMP_EQ_OS, !isunordered(s1, s2) && s1 == s2);\n+  CMP(_CMP_LT_OQ, !isunordered(s1, s2) && s1 < s2);\n+  CMP(_CMP_LE_OQ, !isunordered(s1, s2) && s1 <= s2);\n+  CMP(_CMP_UNORD_S, isunordered(s1, s2));\n+  CMP(_CMP_NEQ_US, isunordered(s1, s2) || s1 != s2);\n+  CMP(_CMP_NLT_UQ, isunordered(s1, s2) || s1 >= s2);\n+  CMP(_CMP_NLE_UQ, isunordered(s1, s2) || s1 > s2);\n+  CMP(_CMP_ORD_S, !isunordered(s1, s2));\n+  CMP(_CMP_EQ_US, isunordered(s1, s2) || s1 == s2);\n+  CMP(_CMP_NGE_UQ, isunordered(s1, s2) || s1 < s2);\n+  CMP(_CMP_NGT_UQ, isunordered(s1, s2) || s1 <= s2);\n+  CMP(_CMP_FALSE_OS, 0);\n+  CMP(_CMP_NEQ_OS, !isunordered(s1, s2) && s1 != s2);\n+  CMP(_CMP_GE_OQ, !isunordered(s1, s2) && s1 >= s2);\n+  CMP(_CMP_GT_OQ, !isunordered(s1, s2) && s1 > s2);\n+  CMP(_CMP_TRUE_US, 1);\n+}\n+"}, {"sha": "31da2b235f2a878b76cc29f778e9fdc06e9057ac", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcmpph-1a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e77bcbc7a2fcbfb0579b239afb31997bc510c9d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcmpph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e77bcbc7a2fcbfb0579b239afb31997bc510c9d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcmpph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcmpph-1a.c?ref=1e77bcbc7a2fcbfb0579b239afb31997bc510c9d", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcmpph\\[ \\\\t\\]+\\\\\\$1\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%k\\[0-9\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcmpph\\[ \\\\t\\]+\\\\\\$2\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%k\\[0-9\\]\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcmpph\\[ \\\\t\\]+\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%k\\[0-9\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcmpph\\[ \\\\t\\]+\\\\\\$4\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%k\\[0-9\\]\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __mmask16 res;\n+volatile __mmask8 res1;\n+volatile __m256h x1, x2;\n+volatile __m128h x3, x4;\n+volatile __mmask16 m16;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm256_cmp_ph_mask (x1, x2, 1);\n+  res = _mm256_mask_cmp_ph_mask (m16, x1, x2, 2);\n+  res1 = _mm_cmp_ph_mask (x3, x4, 3);\n+  res1 = _mm_mask_cmp_ph_mask (m8, x3, x4, 4);\n+}"}, {"sha": "c201a9258bfd44a65e806413dadf281db5eb0fd0", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vcmpph-1b.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e77bcbc7a2fcbfb0579b239afb31997bc510c9d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcmpph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e77bcbc7a2fcbfb0579b239afb31997bc510c9d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcmpph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vcmpph-1b.c?ref=1e77bcbc7a2fcbfb0579b239afb31997bc510c9d", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define DEBUG\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcmpph-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vcmpph-1b.c\"\n+"}]}