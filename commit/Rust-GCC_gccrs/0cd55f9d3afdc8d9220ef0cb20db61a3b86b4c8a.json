{"sha": "0cd55f9d3afdc8d9220ef0cb20db61a3b86b4c8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNkNTVmOWQzYWZkYzhkOTIyMGVmMGNiMjBkYjYxYTNiODZiNGM4YQ==", "commit": {"author": {"name": "AndreaCorallo", "email": "andrea.corallo@arm.com", "date": "2020-03-07T17:39:30Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2020-03-23T18:00:26Z"}, "message": "libgccjit: handle long literals in playback::context::new_string_literal\n\ngcc/jit/ChangeLog\n2020-03-23  Andrea Corallo  <andrea.corallo@arm.com>\n\n\t* jit-playback.h\n\t(gcc::jit::playback::context m_recording_ctxt): Remove\n\tm_char_array_type_node field.\n\t* jit-playback.c\n\t(playback::context::context) Remove m_char_array_type_node from member\n\tinitializer list.\n\t(playback::context::new_string_literal) Fix logic to handle string\n\tlength > 200.\n\ngcc/testsuite/ChangeLog\n2020-03-23  Andrea Corallo  <andrea.corallo@arm.com>\n\n\t* jit.dg/all-non-failing-tests.h: Add test-long-string-literal.c.\n\t* jit.dg/test-long-string-literal.c: New testcase.", "tree": {"sha": "93b5fadec679f920b0ab51460907d73dcd699687", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93b5fadec679f920b0ab51460907d73dcd699687"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cd55f9d3afdc8d9220ef0cb20db61a3b86b4c8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cd55f9d3afdc8d9220ef0cb20db61a3b86b4c8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cd55f9d3afdc8d9220ef0cb20db61a3b86b4c8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cd55f9d3afdc8d9220ef0cb20db61a3b86b4c8a/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "962406639c0ca9f0d948c843ad2a1ca5b17806da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/962406639c0ca9f0d948c843ad2a1ca5b17806da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/962406639c0ca9f0d948c843ad2a1ca5b17806da"}], "stats": {"total": 97, "additions": 88, "deletions": 9}, "files": [{"sha": "5d39b7bebc2158ef8615d576692cef9db0b6be27", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd55f9d3afdc8d9220ef0cb20db61a3b86b4c8a/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd55f9d3afdc8d9220ef0cb20db61a3b86b4c8a/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=0cd55f9d3afdc8d9220ef0cb20db61a3b86b4c8a", "patch": "@@ -1,3 +1,14 @@\n+2020-03-23  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* jit-playback.h\n+\t(gcc::jit::playback::context m_recording_ctxt): Remove\n+\tm_char_array_type_node field.\n+\t* jit-playback.c\n+\t(playback::context::context) Remove m_char_array_type_node from member\n+\tinitializer list.\n+\t(playback::context::new_string_literal) Fix logic to handle string\n+\tlength > 200.\n+\n 2020-01-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tUpdate copyright years."}, {"sha": "d2c8bb4c154d6e96644cf0505facc7026c720995", "filename": "gcc/jit/jit-playback.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd55f9d3afdc8d9220ef0cb20db61a3b86b4c8a/gcc%2Fjit%2Fjit-playback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd55f9d3afdc8d9220ef0cb20db61a3b86b4c8a/gcc%2Fjit%2Fjit-playback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.c?ref=0cd55f9d3afdc8d9220ef0cb20db61a3b86b4c8a", "patch": "@@ -88,7 +88,6 @@ playback::context::context (recording::context *ctxt)\n   : log_user (ctxt->get_logger ()),\n     m_recording_ctxt (ctxt),\n     m_tempdir (NULL),\n-    m_char_array_type_node (NULL),\n     m_const_char_ptr (NULL)\n {\n   JIT_LOG_SCOPE (get_logger ());\n@@ -670,9 +669,14 @@ playback::rvalue *\n playback::context::\n new_string_literal (const char *value)\n {\n-  tree t_str = build_string (strlen (value), value);\n-  gcc_assert (m_char_array_type_node);\n-  TREE_TYPE (t_str) = m_char_array_type_node;\n+  /* Compare with c-family/c-common.c: fix_string_type.  */\n+  size_t len = strlen (value);\n+  tree i_type = build_index_type (size_int (len));\n+  tree a_type = build_array_type (char_type_node, i_type);\n+  /* build_string len parameter must include NUL terminator when\n+     building C strings.  */\n+  tree t_str = build_string (len + 1, value);\n+  TREE_TYPE (t_str) = a_type;\n \n   /* Convert to (const char*), loosely based on\n      c/c-typeck.c: array_to_pointer_conversion,\n@@ -2701,10 +2705,6 @@ playback::context::\n replay ()\n {\n   JIT_LOG_SCOPE (get_logger ());\n-  /* Adapted from c-common.c:c_common_nodes_and_builtins.  */\n-  tree array_domain_type = build_index_type (size_int (200));\n-  m_char_array_type_node\n-    = build_array_type (char_type_node, array_domain_type);\n \n   m_const_char_ptr\n     = build_pointer_type (build_qualified_type (char_type_node,"}, {"sha": "074434a9f6b2637e290ed3425f28649602faa0b3", "filename": "gcc/jit/jit-playback.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd55f9d3afdc8d9220ef0cb20db61a3b86b4c8a/gcc%2Fjit%2Fjit-playback.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd55f9d3afdc8d9220ef0cb20db61a3b86b4c8a/gcc%2Fjit%2Fjit-playback.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.h?ref=0cd55f9d3afdc8d9220ef0cb20db61a3b86b4c8a", "patch": "@@ -322,7 +322,6 @@ class context : public log_user\n \n   auto_vec<function *> m_functions;\n   auto_vec<tree> m_globals;\n-  tree m_char_array_type_node;\n   tree m_const_char_ptr;\n \n   /* Source location handling.  */"}, {"sha": "6b4c0e24ba57d0da9237d80dea7292e02af75ecf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd55f9d3afdc8d9220ef0cb20db61a3b86b4c8a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd55f9d3afdc8d9220ef0cb20db61a3b86b4c8a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0cd55f9d3afdc8d9220ef0cb20db61a3b86b4c8a", "patch": "@@ -1,3 +1,8 @@\n+2020-03-23  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* jit.dg/all-non-failing-tests.h: Add test-long-string-literal.c.\n+\t* jit.dg/test-long-string-literal.c: New testcase.\n+\n 2020-03-23  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* gcc.target/arm/mve/intrinsics/mve_fp_fpu1.c: Remove dg-do."}, {"sha": "b2acc74ae9504dcfbf02a3f5ca10bebd615ca104", "filename": "gcc/testsuite/jit.dg/all-non-failing-tests.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd55f9d3afdc8d9220ef0cb20db61a3b86b4c8a/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd55f9d3afdc8d9220ef0cb20db61a3b86b4c8a/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h?ref=0cd55f9d3afdc8d9220ef0cb20db61a3b86b4c8a", "patch": "@@ -178,6 +178,13 @@\n #undef create_code\n #undef verify_code\n \n+/* test-long-string-literal.c */\n+#define create_code create_code_long_string_literal\n+#define verify_code verify_code_long_string_literal\n+#include \"test-long-string-literal.c\"\n+#undef create_code\n+#undef verify_code\n+\n /* test-quadratic.c */\n #define create_code create_code_quadratic\n #define verify_code verify_code_quadratic\n@@ -342,6 +349,9 @@ const struct testcase testcases[] = {\n   {\"long_names\",\n    create_code_long_names,\n    verify_code_long_names},\n+  {\"long_string_literal\",\n+   create_code_long_string_literal,\n+   verify_code_long_string_literal},\n   {\"quadratic\",\n    create_code_quadratic,\n    verify_code_quadratic},"}, {"sha": "6caaa781c0b97f05488c29be4649b6887224db28", "filename": "gcc/testsuite/jit.dg/test-long-string-literal.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd55f9d3afdc8d9220ef0cb20db61a3b86b4c8a/gcc%2Ftestsuite%2Fjit.dg%2Ftest-long-string-literal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd55f9d3afdc8d9220ef0cb20db61a3b86b4c8a/gcc%2Ftestsuite%2Fjit.dg%2Ftest-long-string-literal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-long-string-literal.c?ref=0cd55f9d3afdc8d9220ef0cb20db61a3b86b4c8a", "patch": "@@ -0,0 +1,54 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <string.h>\n+#include <assert.h>\n+\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+const char very_long_string[] =\n+  \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"\n+  \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"\n+  \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"\n+  \"abcabcabcabcabcabcabcabcabcabca\";\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  /* Build the test_fn.  */\n+  gcc_jit_function *f =\n+    gcc_jit_context_new_function (\n+      ctxt, NULL,\n+      GCC_JIT_FUNCTION_EXPORTED,\n+      gcc_jit_context_get_type(ctxt,\n+\t\t\t       GCC_JIT_TYPE_CONST_CHAR_PTR),\n+\t\t\t\t\"test_long_string_literal\",\n+\t\t\t\t0, NULL, 0);\n+  gcc_jit_block *blk =\n+    gcc_jit_function_new_block (f, \"init_block\");\n+\n+  /* very_long_string is longer than 200 characters to specifically\n+     check that the previous limitation no longer apply.  */\n+\n+  assert (sizeof (very_long_string) > 200);\n+  gcc_jit_rvalue *res =\n+    gcc_jit_context_new_string_literal (ctxt, very_long_string);\n+\n+  gcc_jit_block_end_with_return (blk, NULL, res);\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  typedef const char *(*fn_type) (void);\n+  CHECK_NON_NULL (result);\n+  fn_type test_long_string_literal =\n+    (fn_type)gcc_jit_result_get_code (result, \"test_long_string_literal\");\n+  CHECK_NON_NULL (test_long_string_literal);\n+\n+  /* Call the JIT-generated function.  */\n+  const char *str = test_long_string_literal ();\n+  CHECK_NON_NULL (str);\n+  CHECK_VALUE (strcmp (str, very_long_string), 0);\n+}"}]}