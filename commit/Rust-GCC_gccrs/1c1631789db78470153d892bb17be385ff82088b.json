{"sha": "1c1631789db78470153d892bb17be385ff82088b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMxNjMxNzg5ZGI3ODQ3MDE1M2Q4OTJiYjE3YmUzODVmZjgyMDg4Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-12-21T13:45:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-12-21T13:45:42Z"}, "message": "[multiple changes]\n\n2011-12-21  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause): Do not\n\tignore representation attributes in Alfa mode, since formal\n\tverification backend does not depend on actual physical\n\trepresentation, but code may still refer to attribute values.\n\n2011-12-21  Yannick Moy  <moy@adacore.com>\n\n\t* par-ch13.adb (P_Aspect_Specifications): Recognize the cases\n\twhere a comma between two aspects is missing, or erroneously\n\treplaced by a semicolon, issue an error and proceed with next\n\taspect.\n\t* par.adb, sinfo.ads: Fix typos.\n\n2011-12-21  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util.adb (Mark_Coextensions): A coextension for an\n\tobject that is part of the expression in a return statement,\n\tor part of the return object in an extended return statement,\n\tmust be allocated dynamically.\n\nFrom-SVN: r182585", "tree": {"sha": "fd2ad08f774a128f3ed7555a2449a56fca998016", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd2ad08f774a128f3ed7555a2449a56fca998016"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c1631789db78470153d892bb17be385ff82088b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c1631789db78470153d892bb17be385ff82088b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c1631789db78470153d892bb17be385ff82088b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c1631789db78470153d892bb17be385ff82088b/comments", "author": null, "committer": null, "parents": [{"sha": "5ebfaacfb5ffb9c3dcc0ea80f1f51aff94e34cad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ebfaacfb5ffb9c3dcc0ea80f1f51aff94e34cad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ebfaacfb5ffb9c3dcc0ea80f1f51aff94e34cad"}], "stats": {"total": 149, "additions": 124, "deletions": 25}, "files": [{"sha": "be29ee2e8a14c1e8141b1487245bd1a1fda51ac2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c1631789db78470153d892bb17be385ff82088b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c1631789db78470153d892bb17be385ff82088b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1c1631789db78470153d892bb17be385ff82088b", "patch": "@@ -1,3 +1,25 @@\n+2011-12-21  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause): Do not\n+\tignore representation attributes in Alfa mode, since formal\n+\tverification backend does not depend on actual physical\n+\trepresentation, but code may still refer to attribute values.\n+\n+2011-12-21  Yannick Moy  <moy@adacore.com>\n+\n+\t* par-ch13.adb (P_Aspect_Specifications): Recognize the cases\n+\twhere a comma between two aspects is missing, or erroneously\n+\treplaced by a semicolon, issue an error and proceed with next\n+\taspect.\n+\t* par.adb, sinfo.ads: Fix typos.\n+\n+2011-12-21  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.adb (Mark_Coextensions): A coextension for an\n+\tobject that is part of the expression in a return statement,\n+\tor part of the return object in an extended return statement,\n+\tmust be allocated dynamically.\n+\n 2011-12-21  Matthew Heaney  <heaney@adacore.com>\n \n \t* a-crbtgk.adb (Generic_Conditional_Insert): Fixed incorrect comment."}, {"sha": "82e96cee34728a85e3b0107acf2314aaef8a8e1e", "filename": "gcc/ada/par-ch13.adb", "status": "modified", "additions": 68, "deletions": 8, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c1631789db78470153d892bb17be385ff82088b/gcc%2Fada%2Fpar-ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c1631789db78470153d892bb17be385ff82088b/gcc%2Fada%2Fpar-ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch13.adb?ref=1c1631789db78470153d892bb17be385ff82088b", "patch": "@@ -376,7 +376,7 @@ package body Ch13 is\n    --------------------------------\n \n    --  ASPECT_SPECIFICATION ::=\n-   --    with ASPECT_MARK [=> ASPECT_DEFINITION] {.\n+   --    with ASPECT_MARK [=> ASPECT_DEFINITION] {,\n    --         ASPECT_MARK [=> ASPECT_DEFINITION] }\n \n    --  ASPECT_MARK ::= aspect_IDENTIFIER['Class]\n@@ -411,7 +411,7 @@ package body Ch13 is\n       Ptr := Token_Ptr;\n       Scan; -- past WITH\n \n-      --  Here we have an aspect specification to scan, note that we don;t\n+      --  Here we have an aspect specification to scan, note that we don't\n       --  set the flag till later, because it may turn out that we have no\n       --  valid aspects in the list.\n \n@@ -547,16 +547,76 @@ package body Ch13 is\n \n             if Token = Tok_Comma then\n                Scan; -- past comma\n+               goto Continue;\n \n-            --  Must be terminator character\n+            --  Recognize the case where a comma is missing between two\n+            --  aspects, issue an error and proceed with next aspect.\n \n-            else\n-               if Semicolon then\n-                  T_Semicolon;\n-               end if;\n+            elsif Token = Tok_Identifier\n+              and then Get_Aspect_Id (Token_Name) /= No_Aspect\n+            then\n+               declare\n+                  Scan_State : Saved_Scan_State;\n+\n+               begin\n+                  Save_Scan_State (Scan_State);\n+                  Scan; -- past identifier\n+\n+                  if Token = Tok_Arrow then\n+                     Restore_Scan_State (Scan_State);\n+                     Error_Msg_AP -- CODEFIX\n+                       (\"|missing \"\",\"\"\");\n+                     goto Continue;\n \n-               exit;\n+                  else\n+                     Restore_Scan_State (Scan_State);\n+                  end if;\n+               end;\n+\n+            --  Recognize the case where a semicolon was mistyped for a comma\n+            --  between two aspects, issue an error and proceed with next\n+            --  aspect.\n+\n+            elsif Token = Tok_Semicolon then\n+               declare\n+                  Scan_State : Saved_Scan_State;\n+\n+               begin\n+                  Save_Scan_State (Scan_State);\n+                  Scan; -- past semicolon\n+\n+                  if Token = Tok_Identifier\n+                    and then Get_Aspect_Id (Token_Name) /= No_Aspect\n+                  then\n+                     Scan; -- past identifier\n+\n+                     if Token = Tok_Arrow then\n+                        Restore_Scan_State (Scan_State);\n+                        Error_Msg_SC -- CODEFIX\n+                          (\"|\"\";\"\" should be \"\",\"\"\");\n+                        Scan; -- past semicolon\n+                        goto Continue;\n+\n+                     else\n+                        Restore_Scan_State (Scan_State);\n+                     end if;\n+\n+                  else\n+                     Restore_Scan_State (Scan_State);\n+                  end if;\n+               end;\n+            end if;\n+\n+            --  Must be terminator character\n+\n+            if Semicolon then\n+               T_Semicolon;\n             end if;\n+\n+            exit;\n+\n+         <<Continue>>\n+            null;\n          end if;\n       end loop;\n "}, {"sha": "3f9d541ef7f6e96fd7ec88cdd35315b72d0c4d9f", "filename": "gcc/ada/par.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c1631789db78470153d892bb17be385ff82088b/gcc%2Fada%2Fpar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c1631789db78470153d892bb17be385ff82088b/gcc%2Fada%2Fpar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.adb?ref=1c1631789db78470153d892bb17be385ff82088b", "patch": "@@ -884,7 +884,7 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n       --  argument is False, the scan pointer is left pointing past the aspects\n       --  and the caller must check for a proper terminator.\n       --\n-      --  P_Aspect_Specification is called with the current token pointing to\n+      --  P_Aspect_Specifications is called with the current token pointing to\n       --  either a WITH keyword starting an aspect specification, or an\n       --  instance of the terminator token. In the former case, the aspect\n       --  specifications are scanned out including the terminator token if it"}, {"sha": "e6b016dcfba067411796dc7c714a1d0986312727", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c1631789db78470153d892bb17be385ff82088b/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c1631789db78470153d892bb17be385ff82088b/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=1c1631789db78470153d892bb17be385ff82088b", "patch": "@@ -2126,10 +2126,9 @@ package body Sem_Ch13 is\n          end case;\n       end if;\n \n-      --  Process Ignore_Rep_Clauses option (we also ignore rep clauses in\n-      --  Alfa mode, since they are not relevant in this context).\n+      --  Process Ignore_Rep_Clauses option\n \n-      if Ignore_Rep_Clauses or Alfa_Mode then\n+      if Ignore_Rep_Clauses then\n          case Id is\n \n             --  The following should be ignored. They do not affect legality\n@@ -2149,11 +2148,7 @@ package body Sem_Ch13 is\n                Rewrite (N, Make_Null_Statement (Sloc (N)));\n                return;\n \n-            --  We do not want too ignore 'Small in CodePeer_Mode or Alfa_Mode,\n-            --  since it has an impact on the exact computations performed.\n-\n-            --  Perhaps 'Small should also not be ignored by\n-            --  Ignore_Rep_Clauses ???\n+            --  Perhaps 'Small should not be ignored by Ignore_Rep_Clauses ???\n \n             when Attribute_Small =>\n                if Ignore_Rep_Clauses then"}, {"sha": "10284616a4976f879cdd1040a26e6f325dfa574f", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c1631789db78470153d892bb17be385ff82088b/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c1631789db78470153d892bb17be385ff82088b/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=1c1631789db78470153d892bb17be385ff82088b", "patch": "@@ -9331,7 +9331,6 @@ package body Sem_Util is\n               and then Nkind (Expression (Expression (N))) = N_Op_Concat\n             then\n                Set_Is_Dynamic_Coextension (N);\n-\n             else\n                Set_Is_Static_Coextension (N);\n             end if;\n@@ -9346,12 +9345,33 @@ package body Sem_Util is\n \n    begin\n       case Nkind (Context_Nod) is\n-         when N_Assignment_Statement    |\n-              N_Simple_Return_Statement =>\n+\n+         --  Comment here ???\n+\n+         when N_Assignment_Statement    =>\n             Is_Dynamic := Nkind (Expression (Context_Nod)) = N_Allocator;\n \n+         --  An allocator that is a component of a returned aggregate\n+         --  must be dynamic.\n+\n+         when N_Simple_Return_Statement =>\n+            declare\n+               Expr : constant Node_Id := Expression (Context_Nod);\n+            begin\n+               Is_Dynamic :=\n+                 Nkind (Expr) = N_Allocator\n+                   or else\n+                     (Nkind (Expr) = N_Qualified_Expression\n+                       and then Nkind (Expression (Expr)) = N_Aggregate);\n+            end;\n+\n+         --  An alloctor within an object declaration in an extended return\n+         --  statement is of necessity dynamic.\n+\n          when N_Object_Declaration =>\n-            Is_Dynamic := Nkind (Root_Nod) = N_Allocator;\n+            Is_Dynamic := Nkind (Root_Nod) = N_Allocator\n+              or else\n+                Nkind (Parent (Context_Nod)) = N_Extended_Return_Statement;\n \n          --  This routine should not be called for constructs which may not\n          --  contain coextensions.\n@@ -9371,9 +9391,9 @@ package body Sem_Util is\n       Formal : Entity_Id;\n \n    begin\n-      if Ada_Version >= Ada_2005\n-        and then Present (First_Formal (E))\n-      then\n+      --  Ada 2005 or later, and formals present\n+\n+      if Ada_Version >= Ada_2005 and then Present (First_Formal (E)) then\n          Formal := Next_Formal (First_Formal (E));\n          while Present (Formal) loop\n             if No (Default_Value (Formal)) then\n@@ -9385,6 +9405,8 @@ package body Sem_Util is\n \n          return True;\n \n+      --  Ada 83/95 or no formals\n+\n       else\n          return False;\n       end if;"}, {"sha": "ce4a31c8af9dfbc9871d4431605e62cc8a5b3298", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c1631789db78470153d892bb17be385ff82088b/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c1631789db78470153d892bb17be385ff82088b/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=1c1631789db78470153d892bb17be385ff82088b", "patch": "@@ -6571,7 +6571,7 @@ package Sinfo is\n       --  We modify the RM grammar here, the RM grammar is:\n \n       --     ASPECT_SPECIFICATION ::=\n-      --       with ASPECT_MARK [=> ASPECT_DEFINITION] {.\n+      --       with ASPECT_MARK [=> ASPECT_DEFINITION] {,\n       --            ASPECT_MARK [=> ASPECT_DEFINITION] }\n \n       --     ASPECT_MARK ::= aspect_IDENTIFIER['Class]"}]}