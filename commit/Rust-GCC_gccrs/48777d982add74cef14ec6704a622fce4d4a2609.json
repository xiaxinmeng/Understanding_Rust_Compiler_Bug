{"sha": "48777d982add74cef14ec6704a622fce4d4a2609", "node_id": "C_kwDOANBUbNoAKDQ4Nzc3ZDk4MmFkZDc0Y2VmMTRlYzY3MDRhNjIyZmNlNGQ0YTI2MDk", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-03-08T23:26:14Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-03-08T23:27:45Z"}, "message": "Fortran: Fix gfc_conv_gfc_desc_to_cfi_desc with NULL [PR104126]\n\n\tPR fortran/104126\ngcc/fortran/ChangeLog:\n\n\t* trans-expr.cc (gfc_conv_gfc_desc_to_cfi_desc): Handle NULL\n\twithout MOLD.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/null_actual_2.f90: New test.", "tree": {"sha": "00b4f1bbe6ee378ffda50cf566e7e79701a593db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00b4f1bbe6ee378ffda50cf566e7e79701a593db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48777d982add74cef14ec6704a622fce4d4a2609", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48777d982add74cef14ec6704a622fce4d4a2609", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48777d982add74cef14ec6704a622fce4d4a2609", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48777d982add74cef14ec6704a622fce4d4a2609/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3093f8a18e7a9c5a9bba976d58a2f91033e7f35a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3093f8a18e7a9c5a9bba976d58a2f91033e7f35a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3093f8a18e7a9c5a9bba976d58a2f91033e7f35a"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "06713f24f953652ce332528aef24441b7c659da5", "filename": "gcc/fortran/trans-expr.cc", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48777d982add74cef14ec6704a622fce4d4a2609/gcc%2Ffortran%2Ftrans-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48777d982add74cef14ec6704a622fce4d4a2609/gcc%2Ffortran%2Ftrans-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.cc?ref=48777d982add74cef14ec6704a622fce4d4a2609", "patch": "@@ -5610,8 +5610,11 @@ gfc_conv_gfc_desc_to_cfi_desc (gfc_se *parmse, gfc_expr *e, gfc_symbol *fsym)\n     itype = (e->ts.u.derived->intmod_sym_id == ISOCBINDING_FUNPTR\n \t     ? CFI_type_cfunptr : CFI_type_cptr);\n   else\n-    switch (e->ts.type)\n-      {\n+    {\n+      if (e->expr_type == EXPR_NULL && e->ts.type == BT_UNKNOWN)\n+\te->ts = fsym->ts;\n+      switch (e->ts.type)\n+\t{\n \tcase BT_INTEGER:\n \tcase BT_LOGICAL:\n \tcase BT_REAL:\n@@ -5649,7 +5652,8 @@ gfc_conv_gfc_desc_to_cfi_desc (gfc_se *parmse, gfc_expr *e, gfc_symbol *fsym)\n \tcase BT_UNKNOWN:\n \t  // FIXME: Really unreachable? Or reachable for type(*) ? If so, CFI_type_other?\n \t  gcc_unreachable ();\n-      }\n+\t}\n+    }\n \n   tmp = gfc_get_cfi_desc_type (cfi);\n   gfc_add_modify (&block, tmp,\n@@ -5702,7 +5706,8 @@ gfc_conv_gfc_desc_to_cfi_desc (gfc_se *parmse, gfc_expr *e, gfc_symbol *fsym)\n   gfc_init_block (&block2);\n \n   /* Set elem_len, which may be only known at run time. */\n-  if (e->ts.type == BT_CHARACTER)\n+  if (e->ts.type == BT_CHARACTER\n+      && (e->expr_type != EXPR_NULL || gfc_strlen != NULL_TREE))\n     {\n       gcc_assert (gfc_strlen);\n       tmp = gfc_strlen;"}, {"sha": "de481f01295cad5b86f7eb7de44334a126acb452", "filename": "gcc/testsuite/gfortran.dg/null_actual_2.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48777d982add74cef14ec6704a622fce4d4a2609/gcc%2Ftestsuite%2Fgfortran.dg%2Fnull_actual_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48777d982add74cef14ec6704a622fce4d4a2609/gcc%2Ftestsuite%2Fgfortran.dg%2Fnull_actual_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnull_actual_2.f90?ref=48777d982add74cef14ec6704a622fce4d4a2609", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do compile }\n+!\n+! PR fortran/104126\n+!\n+! Contributed by G. Steinmetz \n+!\n+program p\n+   use iso_c_binding, only: c_char\n+   character(len=:,kind=c_char), pointer :: d\n+   call s(null(d))\n+   call s(null())\n+contains\n+   subroutine s(x) bind(c)\n+      character(len=:, kind=c_char), pointer, intent(in) :: x\n+   end\n+end"}]}