{"sha": "e8b141b593cea20857b5041b4c4f1139e7c67712", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThiMTQxYjU5M2NlYTIwODU3YjUwNDFiNGM0ZjExMzllN2M2NzcxMg==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2011-09-25T21:28:51Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2011-09-25T21:28:51Z"}, "message": "Add support for floating-point fused multiply-add on Sparc.\n\n\t* configure.ac: Add feature check to make sure the assembler\n\tsupports the FMAF, HPC, and VIS 3.0 instructions found on\n\tNiagara-3 and later cpus.\n\t* configure: Rebuild.\n\t* config.in: Likewise.\n\t* config/sparc/sparc.opt: New option '-mfmaf'.\n\t* config/sparc/sparc.md: Add float fused multiply-add patterns.\n\t* config/sparc/sparc.h (AS_NIAGARA3_FLAG): New macro.\n\t(ASM_CPU64_DEFAULT_SPEC, ASM_CPU_SPEC): Use it, as needed.\n\t* config/sparc/sol2.h (ASM_CPU32_DEFAULT_SPEC,\n\tASM_CPU64_DEFAULT_SPEC, ASM_CPU_SPEC): Likewise.\n\t* config/sparc/sparc.c (sparc_option_override): Turn MASK_FMAF on\n\tby default for Niagara-3 and later.  Turn it off if TARGET_FPU is\n\tdisabled.\n\t(sparc_rtx_costs): Handle 'FMA'.\n\t* doc/invoke.texi: Document -mfmaf.\n\nFrom-SVN: r179174", "tree": {"sha": "bed5b88ace72ee9f25edf67d046c725807af7b3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bed5b88ace72ee9f25edf67d046c725807af7b3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8b141b593cea20857b5041b4c4f1139e7c67712", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8b141b593cea20857b5041b4c4f1139e7c67712", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8b141b593cea20857b5041b4c4f1139e7c67712", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8b141b593cea20857b5041b4c4f1139e7c67712/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7cbcf85bf976f8eaeb2beee113b1ea60bdb39f99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cbcf85bf976f8eaeb2beee113b1ea60bdb39f99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cbcf85bf976f8eaeb2beee113b1ea60bdb39f99"}], "stats": {"total": 216, "additions": 197, "deletions": 19}, "files": [{"sha": "848cb32573db7e383f410fb40ca34044744a29f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8b141b593cea20857b5041b4c4f1139e7c67712/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8b141b593cea20857b5041b4c4f1139e7c67712/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e8b141b593cea20857b5041b4c4f1139e7c67712", "patch": "@@ -14,6 +14,23 @@\n \t(movdf_insn_sp32_v9): Likewise.\n \t(movdf_insn_sp64): Likewise.\n \n+\t* configure.ac: Add feature check to make sure the assembler\n+\tsupports the FMAF, HPC, and VIS 3.0 instructions found on\n+\tNiagara-3 and later cpus.\n+\t* configure: Rebuild.\n+\t* config.in: Likewise.\n+\t* config/sparc/sparc.opt: New option '-mfmaf'.\n+\t* config/sparc/sparc.md: Add float fused multiply-add patterns.\n+\t* config/sparc/sparc.h (AS_NIAGARA3_FLAG): New macro.\n+\t(ASM_CPU64_DEFAULT_SPEC, ASM_CPU_SPEC): Use it, as needed.\n+\t* config/sparc/sol2.h (ASM_CPU32_DEFAULT_SPEC,\n+\tASM_CPU64_DEFAULT_SPEC, ASM_CPU_SPEC): Likewise.\n+\t* config/sparc/sparc.c (sparc_option_override): Turn MASK_FMAF on\n+\tby default for Niagara-3 and later.  Turn it off if TARGET_FPU is\n+\tdisabled.\n+\t(sparc_rtx_costs): Handle 'FMA'.\n+\t* doc/invoke.texi: Document -mfmaf.\n+\n 2011-09-25  Jakub Jelinek  <jakub@redhat.com>\n \n \t* tree-ssa-structalias.c (intra_create_variable_infos): Treat"}, {"sha": "d9b9805a2a99a8fa7f4f69c6da1c0f747ba94ee1", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8b141b593cea20857b5041b4c4f1139e7c67712/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8b141b593cea20857b5041b4c4f1139e7c67712/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=e8b141b593cea20857b5041b4c4f1139e7c67712", "patch": "@@ -266,6 +266,12 @@\n #endif\n \n \n+/* Define if your assembler supports FMAF, HPC, and VIS 3.0 instructions. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_FMAF_HPC_VIS3\n+#endif\n+\n+\n /* Define if your assembler supports fprnd. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_FPRND\n@@ -1047,12 +1053,6 @@\n #endif\n \n \n-/* Define if _Unwind_GetIPInfo is available. */\n-#ifndef USED_FOR_TARGET\n-#undef HAVE_GETIPINFO\n-#endif\n-\n-\n /* Define to 1 if you have the `getrlimit' function. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_GETRLIMIT"}, {"sha": "fea60d0543b2add4c49254697a9c8a67c89a4cb9", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8b141b593cea20857b5041b4c4f1139e7c67712/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8b141b593cea20857b5041b4c4f1139e7c67712/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=e8b141b593cea20857b5041b4c4f1139e7c67712", "patch": "@@ -125,9 +125,9 @@ along with GCC; see the file COPYING3.  If not see\n #undef CPP_CPU64_DEFAULT_SPEC\n #define CPP_CPU64_DEFAULT_SPEC \"\"\n #undef ASM_CPU32_DEFAULT_SPEC\n-#define ASM_CPU32_DEFAULT_SPEC \"-xarch=v8plusb\"\n+#define ASM_CPU32_DEFAULT_SPEC \"-xarch=v8plus\" AS_NIAGARA3_FLAG\n #undef ASM_CPU64_DEFAULT_SPEC\n-#define ASM_CPU64_DEFAULT_SPEC AS_SPARC64_FLAG \"b\"\n+#define ASM_CPU64_DEFAULT_SPEC AS_SPARC64_FLAG AS_NIAGARA3_FLAG\n #undef ASM_CPU_DEFAULT_SPEC\n #define ASM_CPU_DEFAULT_SPEC ASM_CPU32_DEFAULT_SPEC\n #endif\n@@ -240,8 +240,8 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n %{mcpu=ultrasparc3:\" DEF_ARCH32_SPEC(\"-xarch=v8plusb\") DEF_ARCH64_SPEC(AS_SPARC64_FLAG \"b\") \"} \\\n %{mcpu=niagara:\" DEF_ARCH32_SPEC(\"-xarch=v8plusb\") DEF_ARCH64_SPEC(AS_SPARC64_FLAG \"b\") \"} \\\n %{mcpu=niagara2:\" DEF_ARCH32_SPEC(\"-xarch=v8plusb\") DEF_ARCH64_SPEC(AS_SPARC64_FLAG \"b\") \"} \\\n-%{mcpu=niagara3:\" DEF_ARCH32_SPEC(\"-xarch=v8plusb\") DEF_ARCH64_SPEC(AS_SPARC64_FLAG \"b\") \"} \\\n-%{mcpu=niagara4:\" DEF_ARCH32_SPEC(\"-xarch=v8plusb\") DEF_ARCH64_SPEC(AS_SPARC64_FLAG \"b\") \"} \\\n+%{mcpu=niagara3:\" DEF_ARCH32_SPEC(\"-xarch=v8plus\" AS_NIAGARA3_FLAG) DEF_ARCH64_SPEC(AS_SPARC64_FLAG AS_NIAGARA3_FLAG) \"} \\\n+%{mcpu=niagara4:\" DEF_ARCH32_SPEC(\"-xarch=v8plus\" AS_NIAGARA3_FLAG) DEF_ARCH64_SPEC(AS_SPARC64_FLAG AS_NIAGARA3_FLAG) \"} \\\n %{!mcpu=niagara4:%{!mcpu=niagara3:%{!mcpu=niagara2:%{!mcpu=niagara:%{!mcpu=ultrasparc3:%{!mcpu=ultrasparc:%{!mcpu=v9:%{mcpu*:\" DEF_ARCH32_SPEC(\"-xarch=v8\") DEF_ARCH64_SPEC(AS_SPARC64_FLAG) \"}}}}}}}} \\\n %{!mcpu*:%(asm_cpu_default)} \\\n \""}, {"sha": "8193d1cf4889772ce1c97f35ce76b16834b5f03a", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8b141b593cea20857b5041b4c4f1139e7c67712/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8b141b593cea20857b5041b4c4f1139e7c67712/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=e8b141b593cea20857b5041b4c4f1139e7c67712", "patch": "@@ -776,9 +776,9 @@ sparc_option_override (void)\n     /* UltraSPARC T2 */\n     { MASK_ISA, MASK_V9},\n     /* UltraSPARC T3 */\n-    { MASK_ISA, MASK_V9},\n+    { MASK_ISA, MASK_V9 | MASK_FMAF},\n     /* UltraSPARC T4 */\n-    { MASK_ISA, MASK_V9},\n+    { MASK_ISA, MASK_V9 | MASK_FMAF},\n   };\n   const struct cpu_table *cpu;\n   unsigned int i;\n@@ -857,9 +857,9 @@ sparc_option_override (void)\n   if (target_flags_explicit & MASK_FPU)\n     target_flags = (target_flags & ~MASK_FPU) | fpu;\n \n-  /* Don't allow -mvis if FPU is disabled.  */\n+  /* Don't allow -mvis or -mfmaf if FPU is disabled.  */\n   if (! TARGET_FPU)\n-    target_flags &= ~MASK_VIS;\n+    target_flags &= ~(MASK_VIS | MASK_FMAF);\n \n   /* -mvis assumes UltraSPARC+, so we are sure v9 instructions\n      are available.\n@@ -9646,6 +9646,25 @@ sparc_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n \t*total = COSTS_N_INSNS (1);\n       return false;\n \n+    case FMA:\n+      {\n+\trtx sub;\n+\n+\tgcc_assert (float_mode_p);\n+\t*total = sparc_costs->float_mul;\n+\n+\tsub = XEXP (x, 0);\n+\tif (GET_CODE (sub) == NEG)\n+\t  sub = XEXP (sub, 0);\n+\t*total += rtx_cost (sub, FMA, 0, speed);\n+\n+\tsub = XEXP (x, 2);\n+\tif (GET_CODE (sub) == NEG)\n+\t  sub = XEXP (sub, 0);\n+\t*total += rtx_cost (sub, FMA, 2, speed);\n+\treturn true;\n+      }\n+\n     case MULT:\n       if (float_mode_p)\n \t*total = sparc_costs->float_mul;"}, {"sha": "ad1e0eff4356b6de1b715a7aed5a910511dc702e", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8b141b593cea20857b5041b4c4f1139e7c67712/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8b141b593cea20857b5041b4c4f1139e7c67712/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=e8b141b593cea20857b5041b4c4f1139e7c67712", "patch": "@@ -287,11 +287,11 @@ extern enum cmodel sparc_cmodel;\n #endif\n #if TARGET_CPU_DEFAULT == TARGET_CPU_niagara3\n #define CPP_CPU64_DEFAULT_SPEC \"-D__sparc_v9__\"\n-#define ASM_CPU64_DEFAULT_SPEC \"-Av9b\"\n+#define ASM_CPU64_DEFAULT_SPEC \"-Av9\" AS_NIAGARA3_FLAG\n #endif\n #if TARGET_CPU_DEFAULT == TARGET_CPU_niagara4\n #define CPP_CPU64_DEFAULT_SPEC \"-D__sparc_v9__\"\n-#define ASM_CPU64_DEFAULT_SPEC \"-Av9b\"\n+#define ASM_CPU64_DEFAULT_SPEC \"-Av9\" AS_NIAGARA3_FLAG\n #endif\n \n #else\n@@ -431,8 +431,8 @@ extern enum cmodel sparc_cmodel;\n %{mcpu=ultrasparc3:%{!mv8plus:-Av9b}} \\\n %{mcpu=niagara:%{!mv8plus:-Av9b}} \\\n %{mcpu=niagara2:%{!mv8plus:-Av9b}} \\\n-%{mcpu=niagara3:%{!mv8plus:-Av9b}} \\\n-%{mcpu=niagara4:%{!mv8plus:-Av9b}} \\\n+%{mcpu=niagara3:%{!mv8plus:-Av9\" AS_NIAGARA3_FLAG \"}} \\\n+%{mcpu=niagara4:%{!mv8plus:-Av9\" AS_NIAGARA3_FLAG \"}} \\\n %{!mcpu*:%(asm_cpu_default)} \\\n \"\n \n@@ -1882,6 +1882,14 @@ extern int sparc_indent_opcode;\n #define TARGET_SUN_TLS TARGET_TLS\n #define TARGET_GNU_TLS 0\n \n+#ifndef HAVE_AS_FMAF_HPC_VIS3\n+#define AS_NIAGARA3_FLAG \"b\"\n+#undef TARGET_FMAF\n+#define TARGET_FMAF 0\n+#else\n+#define AS_NIAGARA3_FLAG \"d\"\n+#endif\n+\n /* The number of Pmode words for the setjmp buffer.  */\n #define JMP_BUF_SIZE 12\n "}, {"sha": "3f7a93b6b7508ac9776d7596a86854abe79fc952", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8b141b593cea20857b5041b4c4f1139e7c67712/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8b141b593cea20857b5041b4c4f1139e7c67712/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=e8b141b593cea20857b5041b4c4f1139e7c67712", "patch": "@@ -5451,6 +5451,78 @@\n   \"fmuls\\t%1, %2, %0\"\n   [(set_attr \"type\" \"fpmul\")])\n \n+(define_insn \"fmadf4\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n+        (fma:DF (match_operand:DF 1 \"register_operand\" \"e\")\n+\t\t(match_operand:DF 2 \"register_operand\" \"e\")\n+\t\t(match_operand:DF 3 \"register_operand\" \"e\")))]\n+  \"TARGET_FMAF\"\n+  \"fmaddd\\t%1, %2, %3, %0\"\n+  [(set_attr \"type\" \"fpmul\")])\n+\n+(define_insn \"fmsdf4\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n+        (fma:DF (match_operand:DF 1 \"register_operand\" \"e\")\n+\t\t(match_operand:DF 2 \"register_operand\" \"e\")\n+\t\t(neg:DF (match_operand:DF 3 \"register_operand\" \"e\"))))]\n+  \"TARGET_FMAF\"\n+  \"fmsubd\\t%1, %2, %3, %0\"\n+  [(set_attr \"type\" \"fpmul\")])\n+\n+(define_insn \"*nfmadf4\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n+        (neg:DF (fma:DF (match_operand:DF 1 \"register_operand\" \"e\")\n+\t\t\t(match_operand:DF 2 \"register_operand\" \"e\")\n+\t\t\t(match_operand:DF 3 \"register_operand\" \"e\"))))]\n+  \"TARGET_FMAF\"\n+  \"fnmaddd\\t%1, %2, %3, %0\"\n+  [(set_attr \"type\" \"fpmul\")])\n+\n+(define_insn \"*nfmsdf4\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n+        (neg:DF (fma:DF (match_operand:DF 1 \"register_operand\" \"e\")\n+\t\t\t(match_operand:DF 2 \"register_operand\" \"e\")\n+\t\t\t(neg:DF (match_operand:DF 3 \"register_operand\" \"e\")))))]\n+  \"TARGET_FMAF\"\n+  \"fnmsubd\\t%1, %2, %3, %0\"\n+  [(set_attr \"type\" \"fpmul\")])\n+\n+(define_insn \"fmasf4\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+        (fma:SF (match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t(match_operand:SF 2 \"register_operand\" \"f\")\n+\t\t(match_operand:SF 3 \"register_operand\" \"f\")))]\n+  \"TARGET_FMAF\"\n+  \"fmadds\\t%1, %2, %3, %0\"\n+  [(set_attr \"type\" \"fpmul\")])\n+\n+(define_insn \"fmssf4\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+        (fma:SF (match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t(match_operand:SF 2 \"register_operand\" \"f\")\n+\t\t(neg:SF (match_operand:SF 3 \"register_operand\" \"f\"))))]\n+  \"TARGET_FMAF\"\n+  \"fmsubs\\t%1, %2, %3, %0\"\n+  [(set_attr \"type\" \"fpmul\")])\n+\n+(define_insn \"*nfmasf4\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+        (neg:SF (fma:SF (match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t\t(match_operand:SF 2 \"register_operand\" \"f\")\n+\t\t\t(match_operand:SF 3 \"register_operand\" \"f\"))))]\n+  \"TARGET_FMAF\"\n+  \"fnmadds\\t%1, %2, %3, %0\"\n+  [(set_attr \"type\" \"fpmul\")])\n+\n+(define_insn \"*nfmssf4\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+        (neg:SF (fma:SF (match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t\t(match_operand:SF 2 \"register_operand\" \"f\")\n+\t\t\t(neg:SF (match_operand:SF 3 \"register_operand\" \"f\")))))]\n+  \"TARGET_FMAF\"\n+  \"fnmsubs\\t%1, %2, %3, %0\"\n+  [(set_attr \"type\" \"fpmul\")])\n+\n (define_insn \"*muldf3_extend\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n \t(mult:DF (float_extend:DF (match_operand:SF 1 \"register_operand\" \"f\"))"}, {"sha": "6be6a7590d0439357ce0e2c8b92b6b1b067f51ae", "filename": "gcc/config/sparc/sparc.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8b141b593cea20857b5041b4c4f1139e7c67712/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8b141b593cea20857b5041b4c4f1139e7c67712/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.opt?ref=e8b141b593cea20857b5041b4c4f1139e7c67712", "patch": "@@ -61,6 +61,10 @@ mvis\n Target Report Mask(VIS)\n Use UltraSPARC Visual Instruction Set extensions\n \n+mfmaf\n+Target Report Mask(FMAF)\n+Use UltraSPARC Fused Multiply-Add extensions\n+\n mptr64\n Target Report RejectNegative Mask(PTR64)\n Pointers are 64-bit"}, {"sha": "c1838813ed97f6ee19dd566328395c371483a24f", "filename": "gcc/configure", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8b141b593cea20857b5041b4c4f1139e7c67712/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8b141b593cea20857b5041b4c4f1139e7c67712/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=e8b141b593cea20857b5041b4c4f1139e7c67712", "patch": "@@ -24042,6 +24042,42 @@ if test $gcc_cv_as_sparc_offsetable_lo10 = yes; then\n \n $as_echo \"#define HAVE_AS_OFFSETABLE_LO10 1\" >>confdefs.h\n \n+fi\n+\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for FMAF, HPC, and VIS 3.0 instructions\" >&5\n+$as_echo_n \"checking assembler for FMAF, HPC, and VIS 3.0 instructions... \" >&6; }\n+if test \"${gcc_cv_as_sparc_fmaf+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_sparc_fmaf=no\n+  if test x$gcc_cv_as != x; then\n+    $as_echo '.text\n+       .align 4\n+       fmaddd %f0, %f2, %f4, %f6\n+       addxccc %g1, %g2, %g3\n+       fsrl32 %f2, %f4, %f8\n+       fnaddd %f10, %f12, %f14' > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags -xarch=v9d -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_sparc_fmaf=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_sparc_fmaf\" >&5\n+$as_echo \"$gcc_cv_as_sparc_fmaf\" >&6; }\n+if test $gcc_cv_as_sparc_fmaf = yes; then\n+\n+$as_echo \"#define HAVE_AS_FMAF_HPC_VIS3 1\" >>confdefs.h\n+\n fi\n     ;;\n "}, {"sha": "8069e6ac5595d27f6da3a03fa3b68c74c6ac976c", "filename": "gcc/configure.ac", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8b141b593cea20857b5041b4c4f1139e7c67712/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8b141b593cea20857b5041b4c4f1139e7c67712/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=e8b141b593cea20857b5041b4c4f1139e7c67712", "patch": "@@ -3478,6 +3478,18 @@ foo:\n        fi],\n        [AC_DEFINE(HAVE_AS_OFFSETABLE_LO10, 1,\n \t         [Define if your assembler supports offsetable %lo().])])\n+\n+    gcc_GAS_CHECK_FEATURE([FMAF, HPC, and VIS 3.0 instructions],\n+      gcc_cv_as_sparc_fmaf,,\n+      [-xarch=v9d],\n+      [.text\n+       .align 4\n+       fmaddd %f0, %f2, %f4, %f6\n+       addxccc %g1, %g2, %g3\n+       fsrl32 %f2, %f4, %f8\n+       fnaddd %f10, %f12, %f14],,\n+      [AC_DEFINE(HAVE_AS_FMAF_HPC_VIS3, 1,\n+                [Define if your assembler supports FMAF, HPC, and VIS 3.0 instructions.])])\n     ;;\n \n changequote(,)dnl"}, {"sha": "1f04612c7aa9536b626dd83d791b370f72fa51a4", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8b141b593cea20857b5041b4c4f1139e7c67712/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8b141b593cea20857b5041b4c4f1139e7c67712/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e8b141b593cea20857b5041b4c4f1139e7c67712", "patch": "@@ -879,7 +879,8 @@ See RS/6000 and PowerPC Options.\n -mlittle-endian @gol\n -mstack-bias  -mno-stack-bias @gol\n -munaligned-doubles  -mno-unaligned-doubles @gol\n--mv8plus  -mno-v8plus  -mvis  -mno-vis}\n+-mv8plus  -mno-v8plus  -mvis  -mno-vis @gol\n+-mfmaf -mno-fmaf}\n \n @emph{SPU Options}\n @gccoptlist{-mwarn-reloc -merror-reloc @gol\n@@ -17397,6 +17398,15 @@ mode for all SPARC-V9 processors.\n @opindex mno-vis\n With @option{-mvis}, GCC generates code that takes advantage of the UltraSPARC\n Visual Instruction Set extensions.  The default is @option{-mno-vis}.\n+\n+@item -mfmaf\n+@itemx -mno-fmaf\n+@opindex mfmaf\n+@opindex mno-fmaf\n+With @option{-mfmaf}, GCC generates code that takes advantage of the UltraSPARC\n+Fused Multiply-Add Floating-point extensions.  The default is @option{-mfmaf}\n+when targetting a cpu that supports such instructions, such as Niagara-3 and\n+later.\n @end table\n \n These @samp{-m} options are supported in addition to the above"}]}