{"sha": "a138d52a9b33aa09ed0a535c38f54e56dfb37bd1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTEzOGQ1MmE5YjMzYWEwOWVkMGE1MzVjMzhmNTRlNTZkZmIzN2JkMQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-03-28T12:43:06Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-03-28T12:43:06Z"}, "message": "Add _GLIBCXX_RELEASE macro to \"Using\" section of manual\n\n\t* doc/xml/manual/abi.xml: Add xml:id anchor.\n\t* doc/xml/manual/using.xml (manual.intro.using.macros): Document\n\t_GLIBCXX_RELEASE. Link to new anchor for __GLIBCXX__ notes.\n\t(concurrency.io.structure): Add markup.\n\t* doc/html/*: Regenerate.\n\nFrom-SVN: r246532", "tree": {"sha": "b019aa51f9314acf4c29357c1f3f60094278a9e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b019aa51f9314acf4c29357c1f3f60094278a9e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a138d52a9b33aa09ed0a535c38f54e56dfb37bd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a138d52a9b33aa09ed0a535c38f54e56dfb37bd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a138d52a9b33aa09ed0a535c38f54e56dfb37bd1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a138d52a9b33aa09ed0a535c38f54e56dfb37bd1/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5ad24334348a54a8378366613d71a095386e5da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5ad24334348a54a8378366613d71a095386e5da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5ad24334348a54a8378366613d71a095386e5da"}], "stats": {"total": 86, "additions": 61, "deletions": 25}, "files": [{"sha": "cc7c3fb93de5fc02bc9c0a95ae064553264f23ca", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a138d52a9b33aa09ed0a535c38f54e56dfb37bd1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a138d52a9b33aa09ed0a535c38f54e56dfb37bd1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a138d52a9b33aa09ed0a535c38f54e56dfb37bd1", "patch": "@@ -1,5 +1,11 @@\n 2017-03-28  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* doc/xml/manual/abi.xml: Add xml:id anchor.\n+\t* doc/xml/manual/using.xml (manual.intro.using.macros): Document\n+\t_GLIBCXX_RELEASE. Link to new anchor for __GLIBCXX__ notes.\n+\t(concurrency.io.structure): Add markup.\n+\t* doc/html/*: Regenerate.\n+\n \tPR libstdc++/80229\n \t* include/bits/shared_ptr_base.h\n \t(__shared_ptr::_M_enable_shared_from_this_with): Change parameters to"}, {"sha": "47425aabc229b4a2558f23d376048be0368e13d0", "filename": "libstdc++-v3/doc/html/manual/abi.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a138d52a9b33aa09ed0a535c38f54e56dfb37bd1/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fabi.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a138d52a9b33aa09ed0a535c38f54e56dfb37bd1/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fabi.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fabi.html?ref=a138d52a9b33aa09ed0a535c38f54e56dfb37bd1", "patch": "@@ -145,7 +145,7 @@\n     <code class=\"code\">-fabi-version</code>.\n     </p><p>\n     It is versioned as follows:\n-    </p><div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\"><p>GCC 3.0: (Error, not versioned) </p></li><li class=\"listitem\"><p>GCC 3.1: (Error, not versioned) </p></li><li class=\"listitem\"><p>GCC 3.2: <code class=\"code\">-fabi-version=1</code></p></li><li class=\"listitem\"><p>GCC 3.3: <code class=\"code\">-fabi-version=1</code></p></li><li class=\"listitem\"><p>GCC 3.4, GCC 4.x: <code class=\"code\">-fabi-version=2</code> <span class=\"emphasis\"><em>(Incompatible with previous)</em></span></p></li><li class=\"listitem\"><p>GCC 5 and higher: <code class=\"code\">-fabi-version=0</code> <span class=\"emphasis\"><em>(See GCC manual for meaning)</em></span></p></li></ul></div><p></p></li><li class=\"listitem\"><p>Incremental bumping of a library pre-defined macro. For releases\n+    </p><div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\"><p>GCC 3.0: (Error, not versioned) </p></li><li class=\"listitem\"><p>GCC 3.1: (Error, not versioned) </p></li><li class=\"listitem\"><p>GCC 3.2: <code class=\"code\">-fabi-version=1</code></p></li><li class=\"listitem\"><p>GCC 3.3: <code class=\"code\">-fabi-version=1</code></p></li><li class=\"listitem\"><p>GCC 3.4, GCC 4.x: <code class=\"code\">-fabi-version=2</code> <span class=\"emphasis\"><em>(Incompatible with previous)</em></span></p></li><li class=\"listitem\"><p>GCC 5 and higher: <code class=\"code\">-fabi-version=0</code> <span class=\"emphasis\"><em>(See GCC manual for meaning)</em></span></p></li></ul></div><p></p></li><li class=\"listitem\"><p><a id=\"abi.versioning.__GLIBCXX__\"></a>Incremental bumping of a library pre-defined macro. For releases\n     before 3.4.0, the macro is <span class=\"symbol\">__GLIBCPP__</span>. For later\n     releases, it's <span class=\"symbol\">__GLIBCXX__</span>. (The libstdc++ project\n     generously changed from CPP to CXX throughout its source to allow the"}, {"sha": "2b8d951ce4de230b653b01954b21e154ab08ec43", "filename": "libstdc++-v3/doc/html/manual/using_concurrency.html", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a138d52a9b33aa09ed0a535c38f54e56dfb37bd1/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing_concurrency.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a138d52a9b33aa09ed0a535c38f54e56dfb37bd1/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing_concurrency.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing_concurrency.html?ref=a138d52a9b33aa09ed0a535c38f54e56dfb37bd1", "patch": "@@ -180,10 +180,11 @@\n       implementations of the C library with varying tradeoffs of threadsafety\n       and efficiency.  You, the programmer, are always required to take care\n       with multiple threads.\n-   </p><p>(As an example, the POSIX standard requires that C stdio FILE*\n-       operations are atomic.  POSIX-conforming C libraries (e.g, on Solaris\n-       and GNU/Linux) have an internal mutex to serialize operations on\n-       FILE*s.  However, you still need to not do stupid things like calling\n+   </p><p>(As an example, the POSIX standard requires that C stdio\n+       <code class=\"code\">FILE*</code> operations are atomic.  POSIX-conforming C libraries\n+       (e.g, on Solaris and GNU/Linux) have an internal mutex to serialize\n+       operations on <code class=\"code\">FILE*</code>s.\n+       However, you still need to not do stupid things like calling\n        <code class=\"code\">fclose(fs)</code> in one thread followed by an access of\n        <code class=\"code\">fs</code> in another.)\n    </p><p>So, if your platform's C library is threadsafe, then your"}, {"sha": "f5a8a223a8b4c349bdd096a5eefaaa10592d998e", "filename": "libstdc++-v3/doc/html/manual/using_macros.html", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a138d52a9b33aa09ed0a535c38f54e56dfb37bd1/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing_macros.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a138d52a9b33aa09ed0a535c38f54e56dfb37bd1/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing_macros.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing_macros.html?ref=a138d52a9b33aa09ed0a535c38f54e56dfb37bd1", "patch": "@@ -17,13 +17,24 @@\n       features, or provide versioning information for the API.  Only\n       those macros listed below are offered for consideration by the\n       general public.\n-   </p><p>Below is the macro which users may check for library version\n-      information. </p><div class=\"variablelist\"><dl class=\"variablelist\"><dt><span class=\"term\"><code class=\"code\">__GLIBCXX__</code></span></dt><dd><p>The current version of\n-    libstdc++ in compressed ISO date format, as an unsigned\n-    long. For details on the value of this particular macro for a\n-    particular release, please consult the <a class=\"link\" href=\"abi.html\" title=\"ABI Policy and Guidelines\">\n-    ABI Policy and Guidelines</a> appendix.\n-    </p></dd></dl></div><p>Below are the macros which users may change with #define/#undef or\n+   </p><p>Below are the macros which users may check for library version\n+      information. </p><div class=\"variablelist\"><dl class=\"variablelist\"><dt><span class=\"term\"><code class=\"code\">_GLIBCXX_RELEASE</code></span></dt><dd><p>The major release number for libstdc++.  This macro is defined\n+        to the GCC major version that the libstdc++ headers belong to,\n+        as an integer constant.\n+        When compiling with GCC it has the same value as GCC's pre-defined\n+        macro <span class=\"symbol\">__GNUC__</span>.\n+        This macro can be used when libstdc++ is used with a non-GNU\n+        compiler where <span class=\"symbol\">__GNUC__</span> is not defined, or has a\n+        different value that doesn't correspond to the libstdc++ version.\n+        This macro first appeared in the GCC 7.1 release and is not defined\n+        for GCC 6.x or older releases.\n+      </p></dd><dt><span class=\"term\"><code class=\"code\">__GLIBCXX__</code></span></dt><dd><p>The revision date of the libstdc++ source code,\n+        in compressed ISO date format, as an unsigned\n+        long. For notes about using this macro and details on the value of\n+        this macro for a particular release, please consult the\n+        <a class=\"link\" href=\"abi.html#abi.versioning.__GLIBCXX__\">ABI History</a>\n+        appendix.\n+        </p></dd></dl></div><p>Below are the macros which users may change with #define/#undef or\n       with -D/-U compiler flags.  The default state of the symbol is\n       listed.</p><p><span class=\"quote\">\u201c<span class=\"quote\">Configurable</span>\u201d</span> (or <span class=\"quote\">\u201c<span class=\"quote\">Not configurable</span>\u201d</span>) means\n       that the symbol is initially chosen (or not) based on"}, {"sha": "e79bf8cf8b1760c8f3292a7629edb46236f3de90", "filename": "libstdc++-v3/doc/xml/manual/abi.xml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a138d52a9b33aa09ed0a535c38f54e56dfb37bd1/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fabi.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a138d52a9b33aa09ed0a535c38f54e56dfb37bd1/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fabi.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fabi.xml?ref=a138d52a9b33aa09ed0a535c38f54e56dfb37bd1", "patch": "@@ -383,7 +383,7 @@ compatible.\n     <para/>\n     </listitem>\n \n-   <listitem>\n+   <listitem xml:id=\"abi.versioning.__GLIBCXX__\">\n     <para>Incremental bumping of a library pre-defined macro. For releases\n     before 3.4.0, the macro is <symbol>__GLIBCPP__</symbol>. For later\n     releases, it's <symbol>__GLIBCXX__</symbol>. (The libstdc++ project"}, {"sha": "5c0e1b9f8c101e9d981767bbe03ea9e65e9e238c", "filename": "libstdc++-v3/doc/xml/manual/using.xml", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a138d52a9b33aa09ed0a535c38f54e56dfb37bd1/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a138d52a9b33aa09ed0a535c38f54e56dfb37bd1/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml?ref=a138d52a9b33aa09ed0a535c38f54e56dfb37bd1", "patch": "@@ -829,20 +829,37 @@ g++ -Winvalid-pch -I. -include stdc++.h -H -g -O2 hello.cc -o test.exe\n       general public.\n    </para>\n \n-   <para>Below is the macro which users may check for library version\n+   <para>Below are the macros which users may check for library version\n       information. </para>\n \n     <variablelist>\n+    <varlistentry>\n+      <term><code>_GLIBCXX_RELEASE</code></term>\n+      <listitem>\n+\t<para>The major release number for libstdc++.  This macro is defined\n+        to the GCC major version that the libstdc++ headers belong to,\n+        as an integer constant.\n+        When compiling with GCC it has the same value as GCC's pre-defined\n+        macro <symbol>__GNUC__</symbol>.\n+        This macro can be used when libstdc++ is used with a non-GNU\n+        compiler where <symbol>__GNUC__</symbol> is not defined, or has a\n+        different value that doesn't correspond to the libstdc++ version.\n+        This macro first appeared in the GCC 7.1 release and is not defined\n+        for GCC 6.x or older releases.\n+      </para>\n+      </listitem>\n+    </varlistentry>\n     <varlistentry>\n       <term><code>__GLIBCXX__</code></term>\n       <listitem>\n-\t<para>The current version of\n-    libstdc++ in compressed ISO date format, as an unsigned\n-    long. For details on the value of this particular macro for a\n-    particular release, please consult the <link linkend=\"appendix.porting.abi\">\n-    ABI Policy and Guidelines</link> appendix.\n-    </para>\n-    </listitem>\n+\t<para>The revision date of the libstdc++ source code,\n+        in compressed ISO date format, as an unsigned\n+        long. For notes about using this macro and details on the value of\n+        this macro for a particular release, please consult the\n+        <link linkend=\"abi.versioning.__GLIBCXX__\">ABI History</link>\n+        appendix.\n+        </para>\n+      </listitem>\n     </varlistentry>\n     </variablelist>\n \n@@ -1669,10 +1686,11 @@ gcc version 4.1.2 20070925 (Red Hat 4.1.2-33)\n       and efficiency.  You, the programmer, are always required to take care\n       with multiple threads.\n    </para>\n-   <para>(As an example, the POSIX standard requires that C stdio FILE*\n-       operations are atomic.  POSIX-conforming C libraries (e.g, on Solaris\n-       and GNU/Linux) have an internal mutex to serialize operations on\n-       FILE*s.  However, you still need to not do stupid things like calling\n+   <para>(As an example, the POSIX standard requires that C stdio\n+       <code>FILE*</code> operations are atomic.  POSIX-conforming C libraries\n+       (e.g, on Solaris and GNU/Linux) have an internal mutex to serialize\n+       operations on <code>FILE*</code>s.\n+       However, you still need to not do stupid things like calling\n        <code>fclose(fs)</code> in one thread followed by an access of\n        <code>fs</code> in another.)\n    </para>"}]}