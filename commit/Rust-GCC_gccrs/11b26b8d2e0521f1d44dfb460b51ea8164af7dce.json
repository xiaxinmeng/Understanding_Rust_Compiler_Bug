{"sha": "11b26b8d2e0521f1d44dfb460b51ea8164af7dce", "node_id": "C_kwDOANBUbNoAKDExYjI2YjhkMmUwNTIxZjFkNDRkZmI0NjBiNTFlYTgxNjRhZjdkY2U", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-10T15:49:31Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-11T13:12:48Z"}, "message": "Check sorting of MAINTAINERS.\n\ncontrib/ChangeLog:\n\n\t* check-MAINTAINERS.py: New file.", "tree": {"sha": "242ff05cc7f71d3277bc5fe3e36b8776307c534b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/242ff05cc7f71d3277bc5fe3e36b8776307c534b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11b26b8d2e0521f1d44dfb460b51ea8164af7dce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11b26b8d2e0521f1d44dfb460b51ea8164af7dce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11b26b8d2e0521f1d44dfb460b51ea8164af7dce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11b26b8d2e0521f1d44dfb460b51ea8164af7dce/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a923fa6d3b0424cb0eb50de49877515e802c4cb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a923fa6d3b0424cb0eb50de49877515e802c4cb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a923fa6d3b0424cb0eb50de49877515e802c4cb0"}], "stats": {"total": 113, "additions": 113, "deletions": 0}, "files": [{"sha": "ca7bb29128252c238ae03ade32f9b7cdefdc833b", "filename": "contrib/check-MAINTAINERS.py", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b26b8d2e0521f1d44dfb460b51ea8164af7dce/contrib%2Fcheck-MAINTAINERS.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b26b8d2e0521f1d44dfb460b51ea8164af7dce/contrib%2Fcheck-MAINTAINERS.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fcheck-MAINTAINERS.py?ref=11b26b8d2e0521f1d44dfb460b51ea8164af7dce", "patch": "@@ -0,0 +1,113 @@\n+#!/usr/bin/env python3\n+\n+# Copyright (C) 2022 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING.  If not, write to\n+# the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+# Boston, MA 02110-1301, USA.\n+\n+# Check that names in the file are sorted\n+# alphabetically by surname.\n+\n+import locale\n+import sys\n+from difflib import ndiff\n+from itertools import dropwhile, takewhile\n+\n+import unidecode\n+\n+locale.setlocale(locale.LC_ALL, 'en_US.utf8')\n+\n+exit_code = 0\n+\n+if len(sys.argv) != 2:\n+    print('Usage: ./check-MAINTAINERS.py path-to/MAINTAINERS')\n+    sys.exit(1)\n+\n+\n+def sort_by_surname(line):\n+    name = line.split('\\t')[0]\n+    parts = name.split()\n+    surname = parts[-1]\n+\n+    # Special-case some names\n+    if name == 'Stefan Schulze Frielinghaus':\n+        surname = parts[1]\n+    elif name == 'Kris Van Hees':\n+        surname = parts[1]\n+    elif surname == \"d'Humieres\":\n+        surname = 'Humieres'\n+\n+    # Remove accents\n+    return (unidecode.unidecode(surname), line)\n+\n+\n+def has_tab(line):\n+    return '\\t' in line\n+\n+\n+def is_empty(line):\n+    return line\n+\n+\n+def check_group(name, lines):\n+    global exit_code\n+\n+    for line in lines:\n+        if line.startswith(' '):\n+            print(f'Line should not start with space: \"{line}\"')\n+            exit_code = 2\n+\n+    lines = [line + '\\n' for line in lines]\n+    sorted_lines = sorted(lines, key=sort_by_surname)\n+    if lines != sorted_lines:\n+        exit_code = 1\n+        diff = ndiff(lines, sorted_lines)\n+        print(f'Wrong order for {name}:\\n')\n+        print(''.join(diff))\n+    else:\n+        print(f'{name} are fine!')\n+\n+\n+lines = open('MAINTAINERS').read().splitlines()\n+\n+needle = 'Global Reviewers'\n+lines = list(dropwhile(lambda x: x.strip() != needle, lines))\n+lines = lines[2:]\n+\n+chunk = list(takewhile(is_empty, lines))\n+check_group(needle, chunk)\n+\n+needle = 'Write After Approval'\n+lines = list(dropwhile(lambda x: needle not in x, lines))\n+lines = lines[2:]\n+\n+chunk = list(takewhile(is_empty, lines))\n+check_group(needle, chunk)\n+\n+needle = 'Bug database only accounts'\n+lines = list(dropwhile(lambda x: needle not in x, lines))\n+lines = lines[2:]\n+\n+chunk = list(takewhile(is_empty, lines))\n+check_group(needle, chunk)\n+\n+needle = 'Contributing under the DCO'\n+lines = list(dropwhile(lambda x: needle not in x, lines))[1:]\n+lines = list(dropwhile(lambda x: not has_tab(x), lines))\n+check_group(needle, lines)\n+\n+sys.exit(exit_code)"}]}