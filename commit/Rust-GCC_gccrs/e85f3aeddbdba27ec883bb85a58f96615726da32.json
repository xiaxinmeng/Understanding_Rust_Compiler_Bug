{"sha": "e85f3aeddbdba27ec883bb85a58f96615726da32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg1ZjNhZWRkYmRiYTI3ZWM4ODNiYjg1YTU4Zjk2NjE1NzI2ZGEzMg==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-05-10T16:39:04Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-05-10T16:39:04Z"}, "message": "arm: remove error in CPP_SPEC when float-abi soft and hard are used together\n\narm.h has had this error message since 1997, and was never updated to\ntake softfp into account. Anyway, it seems it was useful long ago, but\nit is no longer needed since option parsing has been improved:\n-mfloat-abi is handled via arm.opt and updates the var_float_abi\nvariable. So, the last instance of -mfloat-abi= on the command line\nwins.\n\nThis patch just removes this error message, thus enabling many more\ntests to pass on arm-eabi:\n\n* with -mcpu=cortex-a7/-mfloat-abi=soft/-march=armv7ve+simd (2 more passes)\ngcc.target/arm/pr52375.c\ng++.target/arm/pr99593.C (test for excess errors)\n\n* with -mthumb/-mfloat-abi=soft/-march=armv6s-m (115 more passes in C, 90 more in C++)\ngcc.target/arm/armv8_1m-fp16-move-1.c (test for excess errors)\ngcc.target/arm/armv8_1m-fp32-move-1.c (test for excess errors)\ngcc.target/arm/armv8_1m-fp64-move-1.c (test for excess errors)\ngcc.target/arm/armv8_2-fp16-move-1.c (test for excess errors)\ngcc.target/arm/cortex-m55-nodsp-flag-hard.c (test for excess errors)\ngcc.target/arm/cortex-m55-nofp-flag-hard.c (test for excess errors)\ngcc.target/arm/cortex-m55-nomve-flag-hard.c (test for excess errors)\ngcc.target/arm/cortex-m55-nomve.fp-flag-hard.c (test for excess errors)\ng++.target/arm/no_unique_address_1.C\ng++.target/arm/no_unique_address_2.C\n\n* with -mthumb/-mfloat-abi=soft/-march=armv7-m (153 more passes in C, 90 more in C++)\ngcc.dg/pr59418.c (test for excess errors)\ngcc.target/arm/armv8_1m-fp16-move-1.c (test for excess errors)\ngcc.target/arm/armv8_1m-fp32-move-1.c (test for excess errors)\ngcc.target/arm/armv8_1m-fp64-move-1.c (test for excess errors)\ngcc.target/arm/armv8_2-fp16-move-1.c (test for excess errors)\ngcc.target/arm/bfloat16_scalar_2_1.c (test for excess errors)\ngcc.target/arm/bfloat16_scalar_3_1.c (test for excess errors)\ngcc.target/arm/cortex-m55-nodsp-flag-hard.c (test for excess errors)\ngcc.target/arm/cortex-m55-nofp-flag-hard.c (test for excess errors)\ngcc.target/arm/cortex-m55-nomve-flag-hard.c (test for excess errors)\ngcc.target/arm/cortex-m55-nomve.fp-flag-hard.c (test for excess errors)\ngcc.target/arm/pr52375.c (test for excess errors)\ngcc.target/arm/simd/vld1_bf16_1.c (test for excess errors)\ngcc.target/arm/simd/vldn_lane_bf16_1.c (test for excess errors)\ngcc.target/arm/simd/vst1_bf16_1.c (test for excess errors)\ngcc.target/arm/simd/vstn_lane_bf16_1.c (test for excess errors)\ng++.target/arm/no_unique_address_1.C\ng++.target/arm/no_unique_address_2.C\n\n* with -mthumb/-mfloat-abi=hard/-march=armv7e-m+fp (65 more passes)\ngcc.target/arm/atomic-comp-swap-release-acquire-3.c (test for excess errors)\ngcc.target/arm/atomic-comp-swap-release-acquire-3.c scan-assembler-not dmb\ngcc.target/arm/atomic-comp-swap-release-acquire-3.c scan-assembler-times ldaex 4\ngcc.target/arm/atomic-comp-swap-release-acquire-3.c scan-assembler-times stlex 4\ngcc.target/arm/atomic-op-acq_rel-3.c (test for excess errors)\ngcc.target/arm/atomic-op-acq_rel-3.c scan-assembler-not dmb\ngcc.target/arm/atomic-op-acq_rel-3.c scan-assembler-times ldaex\\tr[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-acq_rel-3.c scan-assembler-times stlex\\t...?, r[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-acquire-3.c (test for excess errors)\ngcc.target/arm/atomic-op-acquire-3.c scan-assembler-not dmb\ngcc.target/arm/atomic-op-acquire-3.c scan-assembler-times ldaex\\tr[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-acquire-3.c scan-assembler-times strex\\t...?, r[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-char-3.c (test for excess errors)\ngcc.target/arm/atomic-op-char-3.c scan-assembler-not dmb\ngcc.target/arm/atomic-op-char-3.c scan-assembler-times ldrexb\\tr[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-char-3.c scan-assembler-times strexb\\t...?, r[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-consume-3.c (test for excess errors)\ngcc.target/arm/atomic-op-consume-3.c scan-assembler-not dmb\ngcc.target/arm/atomic-op-consume-3.c scan-assembler-times ldaex\\tr[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-consume-3.c scan-assembler-times strex\\t...?, r[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-int-3.c (test for excess errors)\ngcc.target/arm/atomic-op-int-3.c scan-assembler-not dmb\ngcc.target/arm/atomic-op-int-3.c scan-assembler-times ldrex\\tr[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-int-3.c scan-assembler-times strex\\t...?, r[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-relaxed-3.c (test for excess errors)\ngcc.target/arm/atomic-op-relaxed-3.c scan-assembler-not dmb\ngcc.target/arm/atomic-op-relaxed-3.c scan-assembler-times ldrex\\tr[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-relaxed-3.c scan-assembler-times strex\\t...?, r[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-release-3.c (test for excess errors)\ngcc.target/arm/atomic-op-release-3.c scan-assembler-not dmb\ngcc.target/arm/atomic-op-release-3.c scan-assembler-times ldrex\\tr[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-release-3.c scan-assembler-times stlex\\t...?, r[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-seq_cst-3.c (test for excess errors)\ngcc.target/arm/atomic-op-seq_cst-3.c scan-assembler-not dmb\ngcc.target/arm/atomic-op-seq_cst-3.c scan-assembler-times ldaex\\tr[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-seq_cst-3.c scan-assembler-times stlex\\t...?, r[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-short-3.c (test for excess errors)\ngcc.target/arm/atomic-op-short-3.c scan-assembler-not dmb\ngcc.target/arm/atomic-op-short-3.c scan-assembler-times ldrexh\\tr[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-short-3.c scan-assembler-times strexh\\t...?, r[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/builtin-bswap-2.c (test for excess errors)\ngcc.target/arm/builtin-bswap-2.c scan-assembler-not orr[ \\t]\ngcc.target/arm/builtin-bswap-2.c scan-assembler-times rev16\\\\t 2\ngcc.target/arm/builtin-bswap-2.c scan-assembler-times rev\\\\t 4\ngcc.target/arm/builtin-bswap-2.c scan-assembler-times revsh\\\\t 2\ngcc.target/arm/builtin-bswap16-2.c (test for excess errors)\ngcc.target/arm/builtin-bswap16-2.c scan-assembler-not orr[ \\t]\ngcc.target/arm/pr89190.c (test for excess errors)\ngcc.target/arm/pr95646.c (test for excess errors)\ngcc.target/arm/pr95646.c check-function-bodies __acle_se_bar\ngcc.target/arm/pr95646.c scan-assembler-not mov\\tr9, r0\n\n* with -mthumb/-mfloat-abi=hard/-march=armv8-m.main+fp+dsp (870 more passes)\ngcc.target/arm/atomic-comp-swap-release-acquire-3.c (test for excess errors)\ngcc.target/arm/atomic-comp-swap-release-acquire-3.c scan-assembler-not dmb\ngcc.target/arm/atomic-comp-swap-release-acquire-3.c scan-assembler-times ldaex 4\ngcc.target/arm/atomic-comp-swap-release-acquire-3.c scan-assembler-times stlex 4\ngcc.target/arm/atomic-op-acq_rel-3.c (test for excess errors)\ngcc.target/arm/atomic-op-acq_rel-3.c scan-assembler-not dmb\ngcc.target/arm/atomic-op-acq_rel-3.c scan-assembler-times ldaex\\tr[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-acq_rel-3.c scan-assembler-times stlex\\t...?, r[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-acquire-3.c (test for excess errors)\ngcc.target/arm/atomic-op-acquire-3.c scan-assembler-not dmb\ngcc.target/arm/atomic-op-acquire-3.c scan-assembler-times ldaex\\tr[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-acquire-3.c scan-assembler-times strex\\t...?, r[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-char-3.c (test for excess errors)\ngcc.target/arm/atomic-op-char-3.c scan-assembler-not dmb\ngcc.target/arm/atomic-op-char-3.c scan-assembler-times ldrexb\\tr[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-char-3.c scan-assembler-times strexb\\t...?, r[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-consume-3.c (test for excess errors)\ngcc.target/arm/atomic-op-consume-3.c scan-assembler-not dmb\ngcc.target/arm/atomic-op-consume-3.c scan-assembler-times ldaex\\tr[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-consume-3.c scan-assembler-times strex\\t...?, r[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-int-3.c (test for excess errors)\ngcc.target/arm/atomic-op-int-3.c scan-assembler-not dmb\ngcc.target/arm/atomic-op-int-3.c scan-assembler-times ldrex\\tr[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-int-3.c scan-assembler-times strex\\t...?, r[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-relaxed-3.c (test for excess errors)\ngcc.target/arm/atomic-op-relaxed-3.c scan-assembler-not dmb\ngcc.target/arm/atomic-op-relaxed-3.c scan-assembler-times ldrex\\tr[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-relaxed-3.c scan-assembler-times strex\\t...?, r[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-release-3.c (test for excess errors)\ngcc.target/arm/atomic-op-release-3.c scan-assembler-not dmb\ngcc.target/arm/atomic-op-release-3.c scan-assembler-times ldrex\\tr[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-release-3.c scan-assembler-times stlex\\t...?, r[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-seq_cst-3.c (test for excess errors)\ngcc.target/arm/atomic-op-seq_cst-3.c scan-assembler-not dmb\ngcc.target/arm/atomic-op-seq_cst-3.c scan-assembler-times ldaex\\tr[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-seq_cst-3.c scan-assembler-times stlex\\t...?, r[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-short-3.c (test for excess errors)\ngcc.target/arm/atomic-op-short-3.c scan-assembler-not dmb\ngcc.target/arm/atomic-op-short-3.c scan-assembler-times ldrexh\\tr[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/atomic-op-short-3.c scan-assembler-times strexh\\t...?, r[0-9]+, \\\\[r[0-9]+\\\\] 6\ngcc.target/arm/builtin-bswap-2.c (test for excess errors)\ngcc.target/arm/builtin-bswap-2.c scan-assembler-not orr[ \\t]\ngcc.target/arm/builtin-bswap-2.c scan-assembler-times rev16\\\\t 2\ngcc.target/arm/builtin-bswap-2.c scan-assembler-times rev\\\\t 4\ngcc.target/arm/builtin-bswap-2.c scan-assembler-times revsh\\\\t 2\ngcc.target/arm/builtin-bswap16-2.c (test for excess errors)\ngcc.target/arm/builtin-bswap16-2.c scan-assembler-not orr[ \\t]\ngcc.target/arm/pr89190.c (test for excess errors)\ngcc.target/arm/pr95646.c (test for excess errors)\ngcc.target/arm/pr95646.c check-function-bodies __acle_se_bar\ngcc.target/arm/pr95646.c scan-assembler-not mov\\tr9, r0\n\nand all cmse tests\n\n2021-05-10  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\t* config/arm/arm.h (CPP_SPEC): Remove error message about\n\t-mfloat-abi.", "tree": {"sha": "0a76f248a583c29a16411dc7ee43a75b56ec2755", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a76f248a583c29a16411dc7ee43a75b56ec2755"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e85f3aeddbdba27ec883bb85a58f96615726da32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e85f3aeddbdba27ec883bb85a58f96615726da32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e85f3aeddbdba27ec883bb85a58f96615726da32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e85f3aeddbdba27ec883bb85a58f96615726da32/comments", "author": null, "committer": null, "parents": [{"sha": "a4a3cdd04308ce45c4bee32401fc8121cb561807", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4a3cdd04308ce45c4bee32401fc8121cb561807", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4a3cdd04308ce45c4bee32401fc8121cb561807"}], "stats": {"total": 2, "additions": 0, "deletions": 2}, "files": [{"sha": "e430e4d50edd5f36e20f5c4d698a4066efefec1f", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e85f3aeddbdba27ec883bb85a58f96615726da32/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e85f3aeddbdba27ec883bb85a58f96615726da32/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=e85f3aeddbdba27ec883bb85a58f96615726da32", "patch": "@@ -90,8 +90,6 @@ extern tree arm_bf16_ptr_type_node;\n \f\n #undef  CPP_SPEC\n #define CPP_SPEC \"%(subtarget_cpp_spec)\t\t\t\t\t\\\n-%{mfloat-abi=soft:%{mfloat-abi=hard:\t\t\t\t\t\\\n-\t%e-mfloat-abi=soft and -mfloat-abi=hard may not be used together}} \\\n %{mbig-endian:%{mlittle-endian:\t\t\t\t\t\t\\\n \t%e-mbig-endian and -mlittle-endian may not be used together}}\"\n "}]}