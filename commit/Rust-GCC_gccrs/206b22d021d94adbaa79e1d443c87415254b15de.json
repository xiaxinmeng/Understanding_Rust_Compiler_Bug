{"sha": "206b22d021d94adbaa79e1d443c87415254b15de", "node_id": "C_kwDOANBUbNoAKDIwNmIyMmQwMjFkOTRhZGJhYTc5ZTFkNDQzYzg3NDE1MjU0YjE1ZGU", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-10-15T14:34:34Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-11-18T09:06:41Z"}, "message": "Remove MAY_HAVE_DEBUG_MARKER_STMTS and MAY_HAVE_DEBUG_BIND_STMTS.\n\nThe macros correspond 1:1 to an option flags and make it harder\nto find all usages of the flags.\n\ngcc/c-family/ChangeLog:\n\n\t* c-gimplify.c (genericize_c_loop): Use option directly.\n\ngcc/c/ChangeLog:\n\n\t* c-parser.c (add_debug_begin_stmt): Use option directly.\n\ngcc/ChangeLog:\n\n\t* cfgexpand.c (pass_expand::execute): Use option directly.\n\t* function.c (allocate_struct_function): Likewise.\n\t* gimple-low.c (lower_function_body): Likewise.\n\t(lower_stmt): Likewise.\n\t* gimple-ssa-backprop.c (backprop::prepare_change): Likewise.\n\t* ipa-param-manipulation.c (ipa_param_adjustments::modify_call): Likewise.\n\t* ipa-split.c (split_function): Likewise.\n\t* lto-streamer-in.c (input_function): Likewise.\n\t* sese.c (sese_insert_phis_for_liveouts): Likewise.\n\t* ssa-iterators.h (num_imm_uses): Likewise.\n\t* tree-cfg.c (make_blocks): Likewise.\n\t(gimple_merge_blocks): Likewise.\n\t* tree-inline.c (tree_function_versioning): Likewise.\n\t* tree-loop-distribution.c (generate_loops_for_partition): Likewise.\n\t* tree-sra.c (analyze_access_subtree): Likewise.\n\t* tree-ssa-dce.c (remove_dead_stmt): Likewise.\n\t* tree-ssa-loop-ivopts.c (remove_unused_ivs): Likewise.\n\t* tree-ssa-phiopt.c (spaceship_replacement): Likewise.\n\t* tree-ssa-reassoc.c (reassoc_remove_stmt): Likewise.\n\t* tree-ssa-tail-merge.c (tail_merge_optimize): Likewise.\n\t* tree-ssa-threadedge.c (propagate_threaded_block_debug_into): Likewise.\n\t* tree-ssa.c (gimple_replace_ssa_lhs): Likewise.\n\t(target_for_debug_bind): Likewise.\n\t(insert_debug_temp_for_var_def): Likewise.\n\t(insert_debug_temps_for_defs): Likewise.\n\t(reset_debug_uses): Likewise.\n\t* tree-ssanames.c (release_ssa_name_fn): Likewise.\n\t* tree-vect-loop-manip.c (adjust_vec_debug_stmts): Likewise.\n\t(adjust_debug_stmts): Likewise.\n\t(adjust_phi_and_debug_stmts): Likewise.\n\t(vect_do_peeling): Likewise.\n\t* tree-vect-loop.c (vect_transform_loop_stmt): Likewise.\n\t(vect_transform_loop): Likewise.\n\t* tree.h (MAY_HAVE_DEBUG_MARKER_STMTS): Remove\n\t(MAY_HAVE_DEBUG_BIND_STMTS): Remove.\n\t(MAY_HAVE_DEBUG_STMTS): Use options directly.\n\ngcc/cp/ChangeLog:\n\n\t* parser.c (add_debug_begin_stmt): Use option directly.", "tree": {"sha": "3bb76cc4bdc1d2d3d8bd3fe21018a0f24679032f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bb76cc4bdc1d2d3d8bd3fe21018a0f24679032f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/206b22d021d94adbaa79e1d443c87415254b15de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/206b22d021d94adbaa79e1d443c87415254b15de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/206b22d021d94adbaa79e1d443c87415254b15de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/206b22d021d94adbaa79e1d443c87415254b15de/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e28afbb90f8eca31d0a658e92e2007eb0db2a964", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e28afbb90f8eca31d0a658e92e2007eb0db2a964", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e28afbb90f8eca31d0a658e92e2007eb0db2a964"}], "stats": {"total": 87, "additions": 41, "deletions": 46}, "files": [{"sha": "d9cf051a680738d401d74725462314292c78cb1c", "filename": "gcc/c-family/c-gimplify.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Fc-family%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Fc-family%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-gimplify.c?ref=206b22d021d94adbaa79e1d443c87415254b15de", "patch": "@@ -295,7 +295,7 @@ genericize_c_loop (tree *stmt_p, location_t start_locus, tree cond, tree body,\n   finish_bc_block (&stmt_list, bc_continue, clab);\n   if (incr)\n     {\n-      if (MAY_HAVE_DEBUG_MARKER_STMTS && incr_locus != UNKNOWN_LOCATION)\n+      if (debug_nonbind_markers_p && incr_locus != UNKNOWN_LOCATION)\n \t{\n \t  tree d = build0 (DEBUG_BEGIN_STMT, void_type_node);\n \t  SET_EXPR_LOCATION (d, expr_loc_or_loc (incr, start_locus));\n@@ -305,7 +305,7 @@ genericize_c_loop (tree *stmt_p, location_t start_locus, tree cond, tree body,\n     }\n   append_to_statement_list (entry, &stmt_list);\n \n-  if (MAY_HAVE_DEBUG_MARKER_STMTS && cond_locus != UNKNOWN_LOCATION)\n+  if (debug_nonbind_markers_p && cond_locus != UNKNOWN_LOCATION)\n     {\n       tree d = build0 (DEBUG_BEGIN_STMT, void_type_node);\n       SET_EXPR_LOCATION (d, cond_locus);"}, {"sha": "40c46ec9682eedd2a3dc365625cfc025b0624e31", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=206b22d021d94adbaa79e1d443c87415254b15de", "patch": "@@ -1791,7 +1791,7 @@ static void\n add_debug_begin_stmt (location_t loc)\n {\n   /* Don't add DEBUG_BEGIN_STMTs outside of functions, see PR84721.  */\n-  if (!MAY_HAVE_DEBUG_MARKER_STMTS || !building_stmt_list_p ())\n+  if (!debug_nonbind_markers_p || !building_stmt_list_p ())\n     return;\n \n   tree stmt = build0 (DEBUG_BEGIN_STMT, void_type_node);"}, {"sha": "4e6f776250fc453df451ece1cbeb3f305b39d954", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=206b22d021d94adbaa79e1d443c87415254b15de", "patch": "@@ -6587,7 +6587,7 @@ pass_expand::execute (function *fun)\n   timevar_pop (TV_OUT_OF_SSA);\n   SA.partition_to_pseudo = XCNEWVEC (rtx, SA.map->num_partitions);\n \n-  if (MAY_HAVE_DEBUG_BIND_STMTS && flag_tree_ter)\n+  if (flag_var_tracking_assignments && flag_tree_ter)\n     {\n       gimple_stmt_iterator gsi;\n       FOR_EACH_BB_FN (bb, cfun)"}, {"sha": "154b40e9aed7e286cf9bae51a97983a2069511c3", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=206b22d021d94adbaa79e1d443c87415254b15de", "patch": "@@ -11684,7 +11684,7 @@ cp_parser_lambda_body (cp_parser* parser, tree lambda_expr)\n static void\n add_debug_begin_stmt (location_t loc)\n {\n-  if (!MAY_HAVE_DEBUG_MARKER_STMTS)\n+  if (!debug_nonbind_markers_p)\n     return;\n   if (DECL_DECLARED_CONCEPT_P (current_function_decl))\n     /* A concept is never expanded normally.  */"}, {"sha": "1bebe8aaee8ecbfdac6ff0a3ef798af3c96d8fda", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=206b22d021d94adbaa79e1d443c87415254b15de", "patch": "@@ -4872,7 +4872,7 @@ allocate_struct_function (tree fndecl, bool abstract_p)\n      disabled.  The markers make little sense without the variable\n      binding annotations among them.  */\n   cfun->debug_nonbind_markers = lang_hooks.emits_begin_stmt\n-    && MAY_HAVE_DEBUG_MARKER_STMTS;\n+    && debug_nonbind_markers_p;\n }\n \n /* This is like allocate_struct_function, but pushes a new cfun for FNDECL"}, {"sha": "7d9b3df2ffbd61272cf14f41b5c9ff75ef6fc32b", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=206b22d021d94adbaa79e1d443c87415254b15de", "patch": "@@ -114,7 +114,7 @@ lower_function_body (void)\n   /* If we had begin stmt markers from e.g. PCH, but this compilation\n      doesn't want them, lower_stmt will have cleaned them up; we can\n      now clear the flag that indicates we had them.  */\n-  if (!MAY_HAVE_DEBUG_MARKER_STMTS && cfun->debug_nonbind_markers)\n+  if (!debug_nonbind_markers_p && cfun->debug_nonbind_markers)\n     {\n       /* This counter needs not be exact, but before lowering it will\n \t most certainly be.  */\n@@ -316,7 +316,7 @@ lower_stmt (gimple_stmt_iterator *gsi, struct lower_data *data)\n       /* Propagate fallthruness.  */\n       /* If the function (e.g. from PCH) had debug stmts, but they're\n \t disabled for this compilation, remove them.  */\n-      if (!MAY_HAVE_DEBUG_MARKER_STMTS)\n+      if (!debug_nonbind_markers_p)\n \tgsi_remove (gsi, true);\n       else\n \tgsi_next (gsi);"}, {"sha": "3705c106fcc802c112e21d9f78dd50aec624bfc7", "filename": "gcc/gimple-ssa-backprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Fgimple-ssa-backprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Fgimple-ssa-backprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-backprop.c?ref=206b22d021d94adbaa79e1d443c87415254b15de", "patch": "@@ -737,7 +737,7 @@ strip_sign_op (tree rhs)\n void\n backprop::prepare_change (tree var)\n {\n-  if (MAY_HAVE_DEBUG_BIND_STMTS)\n+  if (flag_var_tracking_assignments)\n     insert_debug_temp_for_var_def (NULL, var);\n   reset_flow_sensitive_info (var);\n }"}, {"sha": "ba897bb96f24a012b095738f5af936eefee5365a", "filename": "gcc/ipa-param-manipulation.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Fipa-param-manipulation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Fipa-param-manipulation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-param-manipulation.c?ref=206b22d021d94adbaa79e1d443c87415254b15de", "patch": "@@ -832,7 +832,7 @@ ipa_param_adjustments::modify_call (cgraph_edge *cs,\n      vector to say for debug info that if parameter parm had been passed,\n      it would have value parm_Y(D).  */\n   tree old_decl = gimple_call_fndecl (stmt);\n-  if (MAY_HAVE_DEBUG_BIND_STMTS && old_decl && callee_decl)\n+  if (flag_var_tracking_assignments && old_decl && callee_decl)\n     {\n       vec<tree, va_gc> **debug_args = NULL;\n       unsigned i = 0;"}, {"sha": "65377678557249649b63acb6730c5c51c1edd86f", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=206b22d021d94adbaa79e1d443c87415254b15de", "patch": "@@ -1465,7 +1465,7 @@ split_function (basic_block return_bb, class split_point *split_point,\n     {\n       vec<tree, va_gc> **debug_args = NULL;\n       unsigned i = 0, len = 0;\n-      if (MAY_HAVE_DEBUG_BIND_STMTS)\n+      if (flag_var_tracking_assignments)\n \t{\n \t  debug_args = decl_debug_args_lookup (node->decl);\n \t  if (debug_args)\n@@ -1479,11 +1479,11 @@ split_function (basic_block return_bb, class split_point *split_point,\n \t    gimple *def_temp;\n \n \t    /* This needs to be done even without\n-\t       MAY_HAVE_DEBUG_BIND_STMTS, otherwise if it didn't exist\n+\t       flag_var_tracking_assignments, otherwise if it didn't exist\n \t       before, we'd end up with different SSA_NAME_VERSIONs\n \t       between -g and -g0.  */\n \t    arg = get_or_create_ssa_default_def (cfun, parm);\n-\t    if (!MAY_HAVE_DEBUG_BIND_STMTS || debug_args == NULL)\n+\t    if (!flag_var_tracking_assignments || debug_args == NULL)\n \t      continue;\n \n \t    while (i < len && (**debug_args)[i] != DECL_ORIGIN (parm))"}, {"sha": "4165892d46628e320b40ead753299b9ac31b8b2b", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=206b22d021d94adbaa79e1d443c87415254b15de", "patch": "@@ -1454,8 +1454,8 @@ input_function (tree fn_decl, class data_in *data_in,\n \t    {\n \t      if (is_gimple_debug (stmt)\n \t\t  && (gimple_debug_nonbind_marker_p (stmt)\n-\t\t      ? !MAY_HAVE_DEBUG_MARKER_STMTS\n-\t\t      : !MAY_HAVE_DEBUG_BIND_STMTS))\n+\t\t      ? !debug_nonbind_markers_p\n+\t\t      : !flag_var_tracking_assignments))\n \t\tremove = true;\n \t      /* In case the linemap overflows locations can be dropped\n \t\t to zero.  Thus do not keep nonsensical inline entry markers"}, {"sha": "5ddbb0b9532e1c92b7576dbfd652fe26ae276ce2", "filename": "gcc/sese.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=206b22d021d94adbaa79e1d443c87415254b15de", "patch": "@@ -205,7 +205,7 @@ void\n sese_insert_phis_for_liveouts (sese_info_p region, basic_block bb,\n \t\t\t       edge false_e, edge true_e)\n {\n-  if (MAY_HAVE_DEBUG_BIND_STMTS)\n+  if (flag_var_tracking_assignments)\n     sese_reset_debug_liveouts (region);\n \n   unsigned i;"}, {"sha": "3e26ce051bf3138286d55263ada4d609d84ad7a2", "filename": "gcc/ssa-iterators.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Fssa-iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Fssa-iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa-iterators.h?ref=206b22d021d94adbaa79e1d443c87415254b15de", "patch": "@@ -456,7 +456,7 @@ num_imm_uses (const_tree var)\n   const ssa_use_operand_t *ptr;\n   unsigned int num = 0;\n \n-  if (!MAY_HAVE_DEBUG_BIND_STMTS)\n+  if (!flag_var_tracking_assignments)\n     {\n       for (ptr = start->next; ptr != start; ptr = ptr->next)\n \tif (USE_STMT (ptr))"}, {"sha": "cde606e1a40eff4f92b6eb5bb8d6632123bfa48a", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=206b22d021d94adbaa79e1d443c87415254b15de", "patch": "@@ -614,7 +614,7 @@ make_blocks (gimple_seq seq)\n      latest (earliest we find) label, and moving debug stmts that are\n      not separated from it by nondebug nonlabel stmts after the\n      label.  */\n-  if (MAY_HAVE_DEBUG_MARKER_STMTS)\n+  if (debug_nonbind_markers_p)\n     {\n       gimple_stmt_iterator label = gsi_none ();\n \n@@ -2139,7 +2139,7 @@ gimple_merge_blocks (basic_block a, basic_block b)\n \t\tgsi_insert_before (&dest_gsi, stmt, GSI_NEW_STMT);\n \t    }\n \t  /* Other user labels keep around in a form of a debug stmt.  */\n-\t  else if (!DECL_ARTIFICIAL (label) && MAY_HAVE_DEBUG_BIND_STMTS)\n+\t  else if (!DECL_ARTIFICIAL (label) && flag_var_tracking_assignments)\n \t    {\n \t      gimple *dbg = gimple_build_debug_bind (label,\n \t\t\t\t\t\t     integer_zero_node,"}, {"sha": "a483b9b8fb2a887104fdc2bd7943f0f808354edc", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=206b22d021d94adbaa79e1d443c87415254b15de", "patch": "@@ -6432,7 +6432,7 @@ tree_function_versioning (tree old_decl, tree new_decl,\n \t}\n     }\n \n-  if (param_body_adjs && MAY_HAVE_DEBUG_BIND_STMTS)\n+  if (param_body_adjs && flag_var_tracking_assignments)\n     {\n       vec<tree, va_gc> **debug_args = NULL;\n       unsigned int len = 0;"}, {"sha": "1f2d0329b5eb54579d8595bdb4f2ebd072d12813", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=206b22d021d94adbaa79e1d443c87415254b15de", "patch": "@@ -1000,7 +1000,7 @@ generate_loops_for_partition (class loop *loop, partition *partition,\n   /* Remove stmts not in the PARTITION bitmap.  */\n   bbs = get_loop_body_in_dom_order (loop);\n \n-  if (MAY_HAVE_DEBUG_BIND_STMTS)\n+  if (flag_var_tracking_assignments)\n     for (i = 0; i < loop->num_nodes; i++)\n       {\n \tbasic_block bb = bbs[i];"}, {"sha": "10acd5e137b373c603f9c227436dc5333041343e", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=206b22d021d94adbaa79e1d443c87415254b15de", "patch": "@@ -2588,7 +2588,7 @@ analyze_access_subtree (struct access *root, struct access *parent,\n \t  gcc_checking_assert (!root->grp_scalar_read\n \t\t\t       && !root->grp_assignment_read);\n \t  sth_created = true;\n-\t  if (MAY_HAVE_DEBUG_BIND_STMTS)\n+\t  if (flag_var_tracking_assignments)\n \t    {\n \t      root->grp_to_be_debug_replaced = 1;\n \t      root->replacement_decl = create_access_replacement (root);"}, {"sha": "27aa74fd29875a43e97ea5801e80c945b0d8ac45", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=206b22d021d94adbaa79e1d443c87415254b15de", "patch": "@@ -1143,7 +1143,7 @@ remove_dead_stmt (gimple_stmt_iterator *i, basic_block bb,\n \n   /* If this is a store into a variable that is being optimized away,\n      add a debug bind stmt if possible.  */\n-  if (MAY_HAVE_DEBUG_BIND_STMTS\n+  if (flag_var_tracking_assignments\n       && gimple_assign_single_p (stmt)\n       && is_gimple_val (gimple_assign_rhs1 (stmt)))\n     {"}, {"sha": "2dad54d90ad44faeaaa67cdc49cf06f95d9bd365", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=206b22d021d94adbaa79e1d443c87415254b15de", "patch": "@@ -7670,7 +7670,7 @@ remove_unused_ivs (struct ivopts_data *data, bitmap toremove)\n \n \t  tree def = info->iv->ssa_name;\n \n-\t  if (MAY_HAVE_DEBUG_BIND_STMTS && SSA_NAME_DEF_STMT (def))\n+\t  if (flag_var_tracking_assignments && SSA_NAME_DEF_STMT (def))\n \t    {\n \t      imm_use_iterator imm_iter;\n \t      use_operand_p use_p;"}, {"sha": "f043168408950f966dd3839ceefde3a5f704d52f", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=206b22d021d94adbaa79e1d443c87415254b15de", "patch": "@@ -2403,7 +2403,7 @@ spaceship_replacement (basic_block cond_bb, basic_block middle_bb,\n     }\n   update_stmt (use_stmt);\n \n-  if (MAY_HAVE_DEBUG_BIND_STMTS)\n+  if (flag_var_tracking_assignments)\n     {\n       use_operand_p use_p;\n       imm_use_iterator iter;"}, {"sha": "5c748ad83b4ad93f1b64ab793c5b37acca955a10", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=206b22d021d94adbaa79e1d443c87415254b15de", "patch": "@@ -233,7 +233,7 @@ reassoc_remove_stmt (gimple_stmt_iterator *gsi)\n {\n   gimple *stmt = gsi_stmt (*gsi);\n \n-  if (!MAY_HAVE_DEBUG_BIND_STMTS || gimple_code (stmt) == GIMPLE_PHI)\n+  if (!flag_var_tracking_assignments || gimple_code (stmt) == GIMPLE_PHI)\n     return gsi_remove (gsi, true);\n \n   gimple_stmt_iterator prev = *gsi;"}, {"sha": "5487679e01dc4383d797cef0301593baa3459b77", "filename": "gcc/tree-ssa-tail-merge.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ftree-ssa-tail-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ftree-ssa-tail-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-tail-merge.c?ref=206b22d021d94adbaa79e1d443c87415254b15de", "patch": "@@ -1796,7 +1796,7 @@ tail_merge_optimize (unsigned int todo)\n \n   if (nr_bbs_removed_total > 0)\n     {\n-      if (MAY_HAVE_DEBUG_BIND_STMTS)\n+      if (flag_var_tracking_assignments)\n \t{\n \t  calculate_dominance_info (CDI_DOMINATORS);\n \t  update_debug_stmts ();"}, {"sha": "813137ec6da009dbc91ec27ec42349935cf5c592", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=206b22d021d94adbaa79e1d443c87415254b15de", "patch": "@@ -645,7 +645,7 @@ jump_threader::simplify_control_stmt_condition_1\n void\n propagate_threaded_block_debug_into (basic_block dest, basic_block src)\n {\n-  if (!MAY_HAVE_DEBUG_BIND_STMTS)\n+  if (!flag_var_tracking_assignments)\n     return;\n \n   if (!single_pred_p (dest))"}, {"sha": "ab5e91526e156dbfd08f3c1f486d4d0554561e42", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=206b22d021d94adbaa79e1d443c87415254b15de", "patch": "@@ -220,7 +220,7 @@ flush_pending_stmts (edge e)\n void\n gimple_replace_ssa_lhs (gimple *stmt, tree nlhs)\n {\n-  if (MAY_HAVE_DEBUG_BIND_STMTS)\n+  if (flag_var_tracking_assignments)\n     {\n       tree lhs = gimple_get_lhs (stmt);\n \n@@ -242,7 +242,7 @@ gimple_replace_ssa_lhs (gimple *stmt, tree nlhs)\n tree\n target_for_debug_bind (tree var)\n {\n-  if (!MAY_HAVE_DEBUG_BIND_STMTS)\n+  if (!flag_var_tracking_assignments)\n     return NULL_TREE;\n \n   if (TREE_CODE (var) == SSA_NAME)\n@@ -307,7 +307,7 @@ insert_debug_temp_for_var_def (gimple_stmt_iterator *gsi, tree var)\n   int usecount = 0;\n   tree value = NULL;\n \n-  if (!MAY_HAVE_DEBUG_BIND_STMTS)\n+  if (!flag_var_tracking_assignments)\n     return;\n \n   /* If this name has already been registered for replacement, do nothing\n@@ -499,7 +499,7 @@ insert_debug_temps_for_defs (gimple_stmt_iterator *gsi)\n   ssa_op_iter op_iter;\n   def_operand_p def_p;\n \n-  if (!MAY_HAVE_DEBUG_BIND_STMTS)\n+  if (!flag_var_tracking_assignments)\n     return;\n \n   stmt = gsi_stmt (*gsi);\n@@ -525,7 +525,7 @@ reset_debug_uses (gimple *stmt)\n   imm_use_iterator imm_iter;\n   gimple *use_stmt;\n \n-  if (!MAY_HAVE_DEBUG_BIND_STMTS)\n+  if (!flag_var_tracking_assignments)\n     return;\n \n   FOR_EACH_PHI_OR_STMT_DEF (def_p, stmt, op_iter, SSA_OP_DEF)"}, {"sha": "eceb51a08ac8655b4c39865675861b14de2815ec", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=206b22d021d94adbaa79e1d443c87415254b15de", "patch": "@@ -560,7 +560,7 @@ release_ssa_name_fn (struct function *fn, tree var)\n       int saved_ssa_name_version = SSA_NAME_VERSION (var);\n       use_operand_p imm = &(SSA_NAME_IMM_USE_NODE (var));\n \n-      if (MAY_HAVE_DEBUG_BIND_STMTS)\n+      if (flag_var_tracking_assignments)\n \tinsert_debug_temp_for_var_def (NULL, var);\n \n       if (flag_checking)"}, {"sha": "6d132553b06339f6bcfde1a0b4eb0fb56b6b34dc", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=206b22d021d94adbaa79e1d443c87415254b15de", "patch": "@@ -201,7 +201,7 @@ adjust_debug_stmts_now (adjust_info *ai)\n static void\n adjust_vec_debug_stmts (void)\n {\n-  if (!MAY_HAVE_DEBUG_BIND_STMTS)\n+  if (!flag_var_tracking_assignments)\n     return;\n \n   gcc_assert (adjust_vec.exists ());\n@@ -223,7 +223,7 @@ adjust_debug_stmts (tree from, tree to, basic_block bb)\n {\n   adjust_info ai;\n \n-  if (MAY_HAVE_DEBUG_BIND_STMTS\n+  if (flag_var_tracking_assignments\n       && TREE_CODE (from) == SSA_NAME\n       && ! SSA_NAME_IS_DEFAULT_DEF (from)\n       && ! virtual_operand_p (from))\n@@ -251,7 +251,7 @@ adjust_phi_and_debug_stmts (gimple *update_phi, edge e, tree new_def)\n \n   SET_PHI_ARG_DEF (update_phi, e->dest_idx, new_def);\n \n-  if (MAY_HAVE_DEBUG_BIND_STMTS)\n+  if (flag_var_tracking_assignments)\n     adjust_debug_stmts (orig_def, PHI_RESULT (update_phi),\n \t\t\tgimple_bb (update_phi));\n }\n@@ -2696,7 +2696,7 @@ vect_do_peeling (loop_vec_info loop_vinfo, tree niters, tree nitersm1,\n       vop_to_rename = create_lcssa_for_virtual_phi (orig_loop);\n     }\n \n-  if (MAY_HAVE_DEBUG_BIND_STMTS)\n+  if (flag_var_tracking_assignments)\n     {\n       gcc_assert (!adjust_vec.exists ());\n       adjust_vec.create (32);"}, {"sha": "f305d545c9a610729c03c3ab9b2f5af78f348d9c", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=206b22d021d94adbaa79e1d443c87415254b15de", "patch": "@@ -9228,7 +9228,7 @@ vect_transform_loop_stmt (loop_vec_info loop_vinfo, stmt_vec_info stmt_info,\n     dump_printf_loc (MSG_NOTE, vect_location,\n \t\t     \"------>vectorizing statement: %G\", stmt_info->stmt);\n \n-  if (MAY_HAVE_DEBUG_BIND_STMTS && !STMT_VINFO_LIVE_P (stmt_info))\n+  if (flag_var_tracking_assignments && !STMT_VINFO_LIVE_P (stmt_info))\n     vect_loop_kill_debug_uses (loop, stmt_info);\n \n   if (!STMT_VINFO_RELEVANT_P (stmt_info)\n@@ -9602,7 +9602,7 @@ vect_transform_loop (loop_vec_info loop_vinfo, gimple *loop_vectorized_call)\n \t  if (!stmt_info)\n \t    continue;\n \n-\t  if (MAY_HAVE_DEBUG_BIND_STMTS && !STMT_VINFO_LIVE_P (stmt_info))\n+\t  if (flag_var_tracking_assignments && !STMT_VINFO_LIVE_P (stmt_info))\n \t    vect_loop_kill_debug_uses (loop, stmt_info);\n \n \t  if (!STMT_VINFO_RELEVANT_P (stmt_info)"}, {"sha": "76d96c3dc765e63e5c867b0a85fd98ad57c5d89a", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206b22d021d94adbaa79e1d443c87415254b15de/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=206b22d021d94adbaa79e1d443c87415254b15de", "patch": "@@ -1174,14 +1174,9 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n #define VL_EXP_OPERAND_LENGTH(NODE) \\\n   ((int)TREE_INT_CST_LOW (VL_EXP_CHECK (NODE)->exp.operands[0]))\n \n-/* Nonzero if gimple_debug_nonbind_marker_p() may possibly hold.  */\n-#define MAY_HAVE_DEBUG_MARKER_STMTS debug_nonbind_markers_p\n-/* Nonzero if gimple_debug_bind_p() (and thus\n-   gimple_debug_source_bind_p()) may possibly hold.  */\n-#define MAY_HAVE_DEBUG_BIND_STMTS flag_var_tracking_assignments\n /* Nonzero if is_gimple_debug() may possibly hold.  */\n #define MAY_HAVE_DEBUG_STMTS\t\t\t\t\t\\\n-  (MAY_HAVE_DEBUG_MARKER_STMTS || MAY_HAVE_DEBUG_BIND_STMTS)\n+  (debug_nonbind_markers_p || flag_var_tracking_assignments)\n \n /* In a LOOP_EXPR node.  */\n #define LOOP_EXPR_BODY(NODE) TREE_OPERAND_CHECK_CODE (NODE, LOOP_EXPR, 0)"}]}