{"sha": "4c33516338cccd40cea01a9830477ac055cc0c86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMzMzUxNjMzOGNjY2Q0MGNlYTAxYTk4MzA0NzdhYzA1NWNjMGM4Ng==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-03-07T08:46:52Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-03-07T08:46:52Z"}, "message": "trans.c (statement_node_p): New predicate.\n\n\t* gcc-interface/trans.c (statement_node_p): New predicate.\n\t(gnat_to_gnu): Invoke it to detect statement nodes.  In ASIS mode, do\n\tnot return dummy results for expressions attached to packed array\n\timplementation types.\n\nFrom-SVN: r234020", "tree": {"sha": "b5d2b6eca817657c04843eba1fd5cd1cb1a9af92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5d2b6eca817657c04843eba1fd5cd1cb1a9af92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c33516338cccd40cea01a9830477ac055cc0c86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c33516338cccd40cea01a9830477ac055cc0c86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c33516338cccd40cea01a9830477ac055cc0c86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c33516338cccd40cea01a9830477ac055cc0c86/comments", "author": null, "committer": null, "parents": [{"sha": "1878be32235c6f9c52a5368b18650b215dbdd508", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1878be32235c6f9c52a5368b18650b215dbdd508", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1878be32235c6f9c52a5368b18650b215dbdd508"}], "stats": {"total": 58, "additions": 46, "deletions": 12}, "files": [{"sha": "8e0637666c22ccbe4c84a17601c6a9202220bc48", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c33516338cccd40cea01a9830477ac055cc0c86/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c33516338cccd40cea01a9830477ac055cc0c86/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4c33516338cccd40cea01a9830477ac055cc0c86", "patch": "@@ -1,3 +1,10 @@\n+2016-03-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (statement_node_p): New predicate.\n+\t(gnat_to_gnu): Invoke it to detect statement nodes.  In ASIS mode, do\n+\tnot return dummy results for expressions attached to packed array\n+\timplementation types.\n+\n 2016-03-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Variable>: Always mark"}, {"sha": "357d26f8d5d0533fc0e2fc4544df6c4303de0ba2", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 39, "deletions": 12, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c33516338cccd40cea01a9830477ac055cc0c86/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c33516338cccd40cea01a9830477ac055cc0c86/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=4c33516338cccd40cea01a9830477ac055cc0c86", "patch": "@@ -5715,6 +5715,28 @@ unchecked_conversion_nop (Node_Id gnat_node)\n   return false;\n }\n \n+/* Return true if GNAT_NODE represents a statement.  */\n+\n+static bool\n+statement_node_p (Node_Id gnat_node)\n+{\n+  const Node_Kind kind = Nkind (gnat_node);\n+\n+  if (kind == N_Label)\n+    return true;\n+\n+  if (IN (kind, N_Statement_Other_Than_Procedure_Call))\n+    return true;\n+\n+  if (kind == N_Procedure_Call_Statement)\n+    return true;\n+\n+  if (IN (kind, N_Raise_xxx_Error) && Ekind (Etype (gnat_node)) == E_Void)\n+    return true;\n+\n+  return false;\n+}\n+\n /* This function is the driver of the GNAT to GCC tree transformation process.\n    It is the entry point of the tree transformer.  GNAT_NODE is the root of\n    some GNAT tree.  Return the root of the corresponding GCC tree.  If this\n@@ -5738,29 +5760,33 @@ gnat_to_gnu (Node_Id gnat_node)\n   error_gnat_node = gnat_node;\n   Sloc_to_locus (Sloc (gnat_node), &input_location);\n \n-  /* If this node is a statement and we are only annotating types, return an\n-     empty statement list.  */\n-  if (type_annotate_only && IN (kind, N_Statement_Other_Than_Procedure_Call))\n+  /* If we are only annotating types and this node is a statement, return\n+     an empty statement list.  */\n+  if (type_annotate_only && statement_node_p (gnat_node))\n     return alloc_stmt_list ();\n \n-  /* If this node is a non-static subexpression and we are only annotating\n-     types, make this into a NULL_EXPR.  */\n+  /* If we are only annotating types and this node is a subexpression, return\n+     a NULL_EXPR, but filter out nodes appearing in the expressions attached\n+     to packed array implementation types.  */\n   if (type_annotate_only\n       && IN (kind, N_Subexpr)\n+      && !(((IN (kind, N_Op) && kind != N_Op_Expon)\n+\t    || kind == N_Type_Conversion)\n+\t   && Is_Integer_Type (Etype (gnat_node)))\n+      && !(kind == N_Attribute_Reference\n+\t   && Get_Attribute_Id (Attribute_Name (gnat_node)) == Attr_Length\n+\t   && Ekind (Etype (Prefix (gnat_node))) == E_Array_Subtype\n+\t   && !Is_Constr_Subt_For_U_Nominal (Etype (Prefix (gnat_node))))\n       && kind != N_Expanded_Name\n       && kind != N_Identifier\n       && !Compile_Time_Known_Value (gnat_node))\n     return build1 (NULL_EXPR, get_unpadded_type (Etype (gnat_node)),\n \t\t   build_call_raise (CE_Range_Check_Failed, gnat_node,\n \t\t\t\t     N_Raise_Constraint_Error));\n \n-  if ((IN (kind, N_Statement_Other_Than_Procedure_Call)\n-       && kind != N_Null_Statement)\n-      || kind == N_Procedure_Call_Statement\n-      || kind == N_Label\n-      || kind == N_Implicit_Label_Declaration\n+  if ((statement_node_p (gnat_node) && kind != N_Null_Statement)\n       || kind == N_Handled_Sequence_Of_Statements\n-      || (IN (kind, N_Raise_xxx_Error) && Ekind (Etype (gnat_node)) == E_Void))\n+      || kind == N_Implicit_Label_Declaration)\n     {\n       tree current_elab_proc = get_elaboration_procedure ();\n \n@@ -5780,7 +5806,8 @@ gnat_to_gnu (Node_Id gnat_node)\n \t spurious errors on dummy (empty) sequences created by the front-end\n \t for package bodies in some cases.  */\n       if (current_function_decl == current_elab_proc\n-\t  && kind != N_Handled_Sequence_Of_Statements)\n+\t  && kind != N_Handled_Sequence_Of_Statements\n+\t  && kind != N_Implicit_Label_Declaration)\n \tCheck_Elaboration_Code_Allowed (gnat_node);\n     }\n "}]}