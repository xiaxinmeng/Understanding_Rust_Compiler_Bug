{"sha": "4af63337bebe68e3010849286d45a0341dbb1081", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFmNjMzMzdiZWJlNjhlMzAxMDg0OTI4NmQ0NWEwMzQxZGJiMTA4MQ==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2008-02-22T06:21:47Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2008-02-22T06:21:47Z"}, "message": "re PR fortran/34907 (valgrind error indication from testsuite trans-types.c: gfc_typenode_for_spec)\n\n2008-02-20  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR fortran/34907\n\t* iresolve.c (resolve_mask_arg): Add gfc_clear_ts to initialize\n\tstructure.\n\t(gfc_resolve_aint): Likewise.\n\t(gfc_resolve_anint): Likewise.\n\t(gfc_resolve_besn): Likewise.\n\t(gfc_resolve_cshift): Likewise.\n\t(gfc_resolve_ctime): Likewise.\n\t(gfc_resolve_eoshift): Likewise.\n\t(gfc_resolve_index_func): Likewise.\n\t(gfc_resolve_isatty): Likewise.\n\t(gfc_resolve_malloc): Likewise.\n\t(gfc_resolve_rrspacing): Likewise.\n\t(gfc_resolve_scale): Likewise.\n\t(gfc_resolve_set_exponent): Likewise.\n\t(gfc_resolve_spacing): Likewise.\n\t(gfc_resolve_spacing): Likewise.\n\t(gfc_resolve_fgetc): Likewise.\n\t(gfc_resolve_fputc): Likewise.\n\t(gfc_resolve_ftell): Likewise.\n\t(gfc_resolve_ttynam): Likewise.\n\t(gfc_resolve_alarm_sub): Likewise.\n\t(gfc_resolve_mvbits): Likewise.\n\t(gfc_resolve_getarg): Likewise.\n\t(gfc_resolve_signal_sub): Likewise.\n\t(gfc_resolve_exit): Likewise.\n\t(gfc_resolve_flush): Likewise.\n\t(gfc_resolve_free): Likewise.\n\t(gfc_resolve_ctime_sub): Likewise.\n\t(gfc_resolve_fgetc_sub): Likewise.\n\t(gfc_resolve_fputc_sub): Likewise.\n\t(gfc_resolve_fseek_sub): Likewise.\n\t(gfc_resolve_ftell_sub): Likewise.\n\t(gfc_resolve_ttynam_sub): Likewise.\n\nFrom-SVN: r132541", "tree": {"sha": "514a347242a631486c3d851e10d4ad82e1c7e797", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/514a347242a631486c3d851e10d4ad82e1c7e797"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4af63337bebe68e3010849286d45a0341dbb1081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4af63337bebe68e3010849286d45a0341dbb1081", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4af63337bebe68e3010849286d45a0341dbb1081", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4af63337bebe68e3010849286d45a0341dbb1081/comments", "author": null, "committer": null, "parents": [{"sha": "ae3115664af05ea853e101ea812148a12c5ed96b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae3115664af05ea853e101ea812148a12c5ed96b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae3115664af05ea853e101ea812148a12c5ed96b"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "0273000265fe6c9ed57457ca0e8ee50491bb3274", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af63337bebe68e3010849286d45a0341dbb1081/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af63337bebe68e3010849286d45a0341dbb1081/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4af63337bebe68e3010849286d45a0341dbb1081", "patch": "@@ -1,3 +1,40 @@\n+2008-02-20  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR fortran/34907\n+\t* iresolve.c (resolve_mask_arg): Add gfc_clear_ts to initialize\n+\tstructure.\n+\t(gfc_resolve_aint): Likewise.\n+\t(gfc_resolve_anint): Likewise.\n+\t(gfc_resolve_besn): Likewise.\n+\t(gfc_resolve_cshift): Likewise.\n+\t(gfc_resolve_ctime): Likewise.\n+\t(gfc_resolve_eoshift): Likewise.\n+\t(gfc_resolve_index_func): Likewise.\n+\t(gfc_resolve_isatty): Likewise.\n+\t(gfc_resolve_malloc): Likewise.\n+\t(gfc_resolve_rrspacing): Likewise.\n+\t(gfc_resolve_scale): Likewise.\n+\t(gfc_resolve_set_exponent): Likewise.\n+\t(gfc_resolve_spacing): Likewise.\n+\t(gfc_resolve_spacing): Likewise.\n+\t(gfc_resolve_fgetc): Likewise.\n+\t(gfc_resolve_fputc): Likewise.\n+\t(gfc_resolve_ftell): Likewise.\n+\t(gfc_resolve_ttynam): Likewise.\n+\t(gfc_resolve_alarm_sub): Likewise.\n+\t(gfc_resolve_mvbits): Likewise.\n+\t(gfc_resolve_getarg): Likewise.\n+\t(gfc_resolve_signal_sub): Likewise.\n+\t(gfc_resolve_exit): Likewise.\n+\t(gfc_resolve_flush): Likewise.\n+\t(gfc_resolve_free): Likewise.\n+\t(gfc_resolve_ctime_sub): Likewise.\n+\t(gfc_resolve_fgetc_sub): Likewise.\n+\t(gfc_resolve_fputc_sub): Likewise.\n+\t(gfc_resolve_fseek_sub): Likewise.\n+\t(gfc_resolve_ftell_sub): Likewise.\n+\t(gfc_resolve_ttynam_sub): Likewise.\n+\n 2008-02-22  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* gfc-internals.texi: Fix typos and markup nits."}, {"sha": "a72d740a36f33ce1f258e52e0c462421ae0ce5e2", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af63337bebe68e3010849286d45a0341dbb1081/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af63337bebe68e3010849286d45a0341dbb1081/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=4af63337bebe68e3010849286d45a0341dbb1081", "patch": "@@ -89,6 +89,7 @@ resolve_mask_arg (gfc_expr *mask)\n {\n \n   gfc_typespec ts;\n+  gfc_clear_ts (&ts);\n \n   if (mask->rank == 0)\n     {\n@@ -220,6 +221,7 @@ void\n gfc_resolve_aint (gfc_expr *f, gfc_expr *a, gfc_expr *kind)\n {\n   gfc_typespec ts;\n+  gfc_clear_ts (&ts);\n   \n   f->ts.type = a->ts.type;\n   f->ts.kind = (kind == NULL) ? a->ts.kind : mpz_get_si (kind->value.integer);\n@@ -266,6 +268,7 @@ void\n gfc_resolve_anint (gfc_expr *f, gfc_expr *a, gfc_expr *kind)\n {\n   gfc_typespec ts;\n+  gfc_clear_ts (&ts);\n   \n   f->ts.type = a->ts.type;\n   f->ts.kind = (kind == NULL) ? a->ts.kind : mpz_get_si (kind->value.integer);\n@@ -360,6 +363,7 @@ void\n gfc_resolve_besn (gfc_expr *f, gfc_expr *n, gfc_expr *x)\n {\n   gfc_typespec ts;\n+  gfc_clear_ts (&ts);\n   \n   f->ts = x->ts;\n   if (n->ts.kind != gfc_c_int_kind)\n@@ -585,6 +589,7 @@ gfc_resolve_cshift (gfc_expr *f, gfc_expr *array, gfc_expr *shift,\n   if (shift->ts.kind < m)\n     {\n       gfc_typespec ts;\n+      gfc_clear_ts (&ts);\n       ts.type = BT_INTEGER;\n       ts.kind = m;\n       gfc_convert_type_warn (shift, &ts, 2, 0);\n@@ -616,6 +621,7 @@ void\n gfc_resolve_ctime (gfc_expr *f, gfc_expr *time)\n {\n   gfc_typespec ts;\n+  gfc_clear_ts (&ts);\n   \n   f->ts.type = BT_CHARACTER;\n   f->ts.kind = gfc_default_character_kind;\n@@ -723,6 +729,7 @@ gfc_resolve_eoshift (gfc_expr *f, gfc_expr *array, gfc_expr *shift,\n   if (shift->ts.kind < m)\n     {\n       gfc_typespec ts;\n+      gfc_clear_ts (&ts);\n       ts.type = BT_INTEGER;\n       ts.kind = m;\n       gfc_convert_type_warn (shift, &ts, 2, 0);\n@@ -1000,6 +1007,7 @@ gfc_resolve_index_func (gfc_expr *f, gfc_expr *str,\n \t\t\tgfc_expr *kind)\n {\n   gfc_typespec ts;\n+  gfc_clear_ts (&ts);\n \n   f->ts.type = BT_INTEGER;\n   if (kind)\n@@ -1070,6 +1078,7 @@ void\n gfc_resolve_isatty (gfc_expr *f, gfc_expr *u)\n {\n   gfc_typespec ts;\n+  gfc_clear_ts (&ts);\n   \n   f->ts.type = BT_LOGICAL;\n   f->ts.kind = gfc_default_integer_kind;\n@@ -1251,6 +1260,7 @@ gfc_resolve_malloc (gfc_expr *f, gfc_expr *size)\n   if (size->ts.kind < gfc_index_integer_kind)\n     {\n       gfc_typespec ts;\n+      gfc_clear_ts (&ts);\n \n       ts.type = BT_INTEGER;\n       ts.kind = gfc_index_integer_kind;\n@@ -1859,6 +1869,7 @@ gfc_resolve_rrspacing (gfc_expr *f, gfc_expr *x)\n   if (prec->expr->ts.kind != gfc_c_int_kind)\n     {\n       gfc_typespec ts;\n+      gfc_clear_ts (&ts);\n       ts.type = BT_INTEGER;\n       ts.kind = gfc_c_int_kind;\n       gfc_convert_type (prec->expr, &ts, 2);\n@@ -1877,6 +1888,7 @@ gfc_resolve_scale (gfc_expr *f, gfc_expr *x, gfc_expr *i)\n   if (i->ts.kind != gfc_c_int_kind)\n     {\n       gfc_typespec ts;\n+      gfc_clear_ts (&ts);\n       ts.type = BT_INTEGER;\n       ts.kind = gfc_c_int_kind;\n       gfc_convert_type_warn (i, &ts, 2, 0);\n@@ -1919,6 +1931,7 @@ gfc_resolve_set_exponent (gfc_expr *f, gfc_expr *x, gfc_expr *i)\n   if (i->ts.kind != gfc_c_int_kind)\n     {\n       gfc_typespec ts;\n+      gfc_clear_ts (&ts);\n       ts.type = BT_INTEGER;\n       ts.kind = gfc_c_int_kind;\n       gfc_convert_type_warn (i, &ts, 2, 0);\n@@ -2033,6 +2046,7 @@ gfc_resolve_spacing (gfc_expr *f, gfc_expr *x)\n   if (emin_1->expr->ts.kind != gfc_c_int_kind)\n     {\n       gfc_typespec ts;\n+      gfc_clear_ts (&ts);\n       ts.type = BT_INTEGER;\n       ts.kind = gfc_c_int_kind;\n       gfc_convert_type (emin_1->expr, &ts, 2);\n@@ -2047,6 +2061,7 @@ gfc_resolve_spacing (gfc_expr *f, gfc_expr *x)\n   if (prec->expr->ts.kind != gfc_c_int_kind)\n     {\n       gfc_typespec ts;\n+      gfc_clear_ts (&ts);\n       ts.type = BT_INTEGER;\n       ts.kind = gfc_c_int_kind;\n       gfc_convert_type (prec->expr, &ts, 2);\n@@ -2146,6 +2161,7 @@ void\n gfc_resolve_fgetc (gfc_expr *f, gfc_expr *u, gfc_expr *c ATTRIBUTE_UNUSED)\n {\n   gfc_typespec ts;\n+  gfc_clear_ts (&ts);\n \n   f->ts.type = BT_INTEGER;\n   f->ts.kind = gfc_c_int_kind;\n@@ -2175,6 +2191,7 @@ void\n gfc_resolve_fputc (gfc_expr *f, gfc_expr *u, gfc_expr *c ATTRIBUTE_UNUSED)\n {\n   gfc_typespec ts;\n+  gfc_clear_ts (&ts);\n \n   f->ts.type = BT_INTEGER;\n   f->ts.kind = gfc_c_int_kind;\n@@ -2204,6 +2221,7 @@ void\n gfc_resolve_ftell (gfc_expr *f, gfc_expr *u)\n {\n   gfc_typespec ts;\n+  gfc_clear_ts (&ts);\n \n   f->ts.type = BT_INTEGER;\n   f->ts.kind = gfc_index_integer_kind;\n@@ -2451,6 +2469,7 @@ void\n gfc_resolve_ttynam (gfc_expr *f, gfc_expr *unit)\n {\n   gfc_typespec ts;\n+  gfc_clear_ts (&ts);\n   \n   f->ts.type = BT_CHARACTER;\n   f->ts.kind = gfc_default_character_kind;\n@@ -2526,6 +2545,7 @@ gfc_resolve_alarm_sub (gfc_code *c)\n   const char *name;\n   gfc_expr *seconds, *handler, *status;\n   gfc_typespec ts;\n+  gfc_clear_ts (&ts);\n \n   seconds = c->ext.actual->expr;\n   handler = c->ext.actual->next->expr;\n@@ -2567,6 +2587,7 @@ gfc_resolve_mvbits (gfc_code *c)\n {\n   const char *name;\n   gfc_typespec ts;\n+  gfc_clear_ts (&ts);\n \n   /* FROMPOS, LEN and TOPOS are restricted to small values.  As such,\n      they will be converted so that they fit into a C int.  */\n@@ -2780,6 +2801,7 @@ gfc_resolve_getarg (gfc_code *c)\n   if (c->ext.actual->expr->ts.kind != gfc_default_integer_kind)\n     {\n       gfc_typespec ts;\n+      gfc_clear_ts (&ts);\n \n       ts.type = BT_INTEGER;\n       ts.kind = gfc_default_integer_kind;\n@@ -2855,6 +2877,7 @@ gfc_resolve_signal_sub (gfc_code *c)\n   const char *name;\n   gfc_expr *number, *handler, *status;\n   gfc_typespec ts;\n+  gfc_clear_ts (&ts);\n \n   number = c->ext.actual->expr;\n   handler = c->ext.actual->next->expr;\n@@ -2922,6 +2945,7 @@ gfc_resolve_exit (gfc_code *c)\n   const char *name;\n   gfc_typespec ts;\n   gfc_expr *n;\n+  gfc_clear_ts (&ts);\n \n   /* The STATUS argument has to be of default kind.  If it is not,\n      we convert it.  */\n@@ -2944,6 +2968,7 @@ gfc_resolve_flush (gfc_code *c)\n   const char *name;\n   gfc_typespec ts;\n   gfc_expr *n;\n+  gfc_clear_ts (&ts);\n \n   ts.type = BT_INTEGER;\n   ts.kind = gfc_default_integer_kind;\n@@ -2961,6 +2986,7 @@ gfc_resolve_free (gfc_code *c)\n {\n   gfc_typespec ts;\n   gfc_expr *n;\n+  gfc_clear_ts (&ts);\n \n   ts.type = BT_INTEGER;\n   ts.kind = gfc_index_integer_kind;\n@@ -2976,6 +3002,7 @@ void\n gfc_resolve_ctime_sub (gfc_code *c)\n {\n   gfc_typespec ts;\n+  gfc_clear_ts (&ts);\n   \n   /* ctime TIME argument is a INTEGER(KIND=8), says the doc */\n   if (c->ext.actual->expr->ts.kind != 8)\n@@ -3076,6 +3103,7 @@ gfc_resolve_fgetc_sub (gfc_code *c)\n   const char *name;\n   gfc_typespec ts;\n   gfc_expr *u, *st;\n+  gfc_clear_ts (&ts);\n \n   u = c->ext.actual->expr;\n   st = c->ext.actual->next->next->expr;\n@@ -3120,6 +3148,7 @@ gfc_resolve_fputc_sub (gfc_code *c)\n   const char *name;\n   gfc_typespec ts;\n   gfc_expr *u, *st;\n+  gfc_clear_ts (&ts);\n \n   u = c->ext.actual->expr;\n   st = c->ext.actual->next->next->expr;\n@@ -3166,6 +3195,7 @@ gfc_resolve_fseek_sub (gfc_code *c)\n   gfc_expr *whence;\n   gfc_expr *status;\n   gfc_typespec ts;\n+  gfc_clear_ts (&ts);\n \n   unit   = c->ext.actual->expr;\n   offset = c->ext.actual->next->expr;\n@@ -3209,6 +3239,7 @@ gfc_resolve_ftell_sub (gfc_code *c)\n   gfc_expr *unit;\n   gfc_expr *offset;\n   gfc_typespec ts;\n+  gfc_clear_ts (&ts);\n \n   unit = c->ext.actual->expr;\n   offset = c->ext.actual->next->expr;\n@@ -3231,6 +3262,7 @@ void\n gfc_resolve_ttynam_sub (gfc_code *c)\n {\n   gfc_typespec ts;\n+  gfc_clear_ts (&ts);\n   \n   if (c->ext.actual->expr->ts.kind != gfc_c_int_kind)\n     {"}]}