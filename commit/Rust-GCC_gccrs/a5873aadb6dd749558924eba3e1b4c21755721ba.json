{"sha": "a5873aadb6dd749558924eba3e1b4c21755721ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU4NzNhYWRiNmRkNzQ5NTU4OTI0ZWJhM2UxYjRjMjE3NTU3MjFiYQ==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-02-25T02:42:13Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-17T08:04:29Z"}, "message": "AVX512FP16: Add intrinsics for casting between vector float16 and vector float32/float64/integer.\n\ngcc/ChangeLog:\n\n\t* config/i386/avx512fp16intrin.h (_mm_undefined_ph):\n\tNew intrinsic.\n\t(_mm256_undefined_ph): Likewise.\n\t(_mm512_undefined_ph): Likewise.\n\t(_mm_cvtsh_h): Likewise.\n\t(_mm256_cvtsh_h): Likewise.\n\t(_mm512_cvtsh_h): Likewise.\n\t(_mm512_castph_ps): Likewise.\n\t(_mm512_castph_pd): Likewise.\n\t(_mm512_castph_si512): Likewise.\n\t(_mm512_castph512_ph128): Likewise.\n\t(_mm512_castph512_ph256): Likewise.\n\t(_mm512_castph128_ph512): Likewise.\n\t(_mm512_castph256_ph512): Likewise.\n\t(_mm512_zextph128_ph512): Likewise.\n\t(_mm512_zextph256_ph512): Likewise.\n\t(_mm512_castps_ph): Likewise.\n\t(_mm512_castpd_ph): Likewise.\n\t(_mm512_castsi512_ph): Likewise.\n\t* config/i386/avx512fp16vlintrin.h (_mm_castph_ps):\n\tNew intrinsic.\n\t(_mm256_castph_ps): Likewise.\n\t(_mm_castph_pd): Likewise.\n\t(_mm256_castph_pd): Likewise.\n\t(_mm_castph_si128): Likewise.\n\t(_mm256_castph_si256): Likewise.\n\t(_mm_castps_ph): Likewise.\n\t(_mm256_castps_ph): Likewise.\n\t(_mm_castpd_ph): Likewise.\n\t(_mm256_castpd_ph): Likewise.\n\t(_mm_castsi128_ph): Likewise.\n\t(_mm256_castsi256_ph): Likewise.\n\t(_mm256_castph256_ph128): Likewise.\n\t(_mm256_castph128_ph256): Likewise.\n\t(_mm256_zextph128_ph256): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-typecast-1.c: New test.\n\t* gcc.target/i386/avx512fp16-typecast-2.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-typecast-1.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-typecast-2.c: Ditto.", "tree": {"sha": "751cac997be70046d5706b6032a68d08e929b862", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/751cac997be70046d5706b6032a68d08e929b862"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5873aadb6dd749558924eba3e1b4c21755721ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5873aadb6dd749558924eba3e1b4c21755721ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5873aadb6dd749558924eba3e1b4c21755721ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5873aadb6dd749558924eba3e1b4c21755721ba/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a"}], "stats": {"total": 449, "additions": 449, "deletions": 0}, "files": [{"sha": "a5041ed36970d341347780ec492fa4fc71c1b108", "filename": "gcc/config/i386/avx512fp16intrin.h", "status": "modified", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5873aadb6dd749558924eba3e1b4c21755721ba/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5873aadb6dd749558924eba3e1b4c21755721ba/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h?ref=a5873aadb6dd749558924eba3e1b4c21755721ba", "patch": "@@ -192,6 +192,159 @@ _mm512_setzero_ph (void)\n   return _mm512_set1_ph (0.0f);\n }\n \n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_undefined_ph (void)\n+{\n+  __m128h __Y = __Y;\n+  return __Y;\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_undefined_ph (void)\n+{\n+  __m256h __Y = __Y;\n+  return __Y;\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_undefined_ph (void)\n+{\n+  __m512h __Y = __Y;\n+  return __Y;\n+}\n+\n+extern __inline _Float16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtsh_h (__m128h __A)\n+{\n+  return __A[0];\n+}\n+\n+extern __inline _Float16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvtsh_h (__m256h __A)\n+{\n+  return __A[0];\n+}\n+\n+extern __inline _Float16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvtsh_h (__m512h __A)\n+{\n+  return __A[0];\n+}\n+\n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_castph_ps (__m512h __a)\n+{\n+  return (__m512) __a;\n+}\n+\n+extern __inline __m512d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_castph_pd (__m512h __a)\n+{\n+  return (__m512d) __a;\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_castph_si512 (__m512h __a)\n+{\n+  return (__m512i) __a;\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_castph512_ph128 (__m512h __A)\n+{\n+  union\n+  {\n+    __m128h a[4];\n+    __m512h v;\n+  } u = { .v = __A };\n+  return u.a[0];\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_castph512_ph256 (__m512h __A)\n+{\n+  union\n+  {\n+    __m256h a[2];\n+    __m512h v;\n+  } u = { .v = __A };\n+  return u.a[0];\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_castph128_ph512 (__m128h __A)\n+{\n+  union\n+  {\n+    __m128h a[4];\n+    __m512h v;\n+  } u;\n+  u.a[0] = __A;\n+  return u.v;\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_castph256_ph512 (__m256h __A)\n+{\n+  union\n+  {\n+    __m256h a[2];\n+    __m512h v;\n+  } u;\n+  u.a[0] = __A;\n+  return u.v;\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_zextph128_ph512 (__m128h __A)\n+{\n+  return (__m512h) _mm512_insertf32x4 (_mm512_setzero_ps (),\n+\t\t\t\t       (__m128) __A, 0);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_zextph256_ph512 (__m256h __A)\n+{\n+  return (__m512h) _mm512_insertf64x4 (_mm512_setzero_pd (),\n+\t\t\t\t       (__m256d) __A, 0);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_castps_ph (__m512 __a)\n+{\n+  return (__m512h) __a;\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_castpd_ph (__m512d __a)\n+{\n+  return (__m512h) __a;\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_castsi512_ph (__m512i __a)\n+{\n+  return (__m512h) __a;\n+}\n+\n /* Create a vector with element 0 as F and the rest zero.  */\n extern __inline __m128h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))"}, {"sha": "59906d2175d6212357882cad907068f29e98b637", "filename": "gcc/config/i386/avx512fp16vlintrin.h", "status": "modified", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5873aadb6dd749558924eba3e1b4c21755721ba/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5873aadb6dd749558924eba3e1b4c21755721ba/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h?ref=a5873aadb6dd749558924eba3e1b4c21755721ba", "patch": "@@ -34,6 +34,123 @@\n #define __DISABLE_AVX512FP16VL__\n #endif /* __AVX512FP16VL__ */\n \n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_castph_ps (__m128h __a)\n+{\n+  return (__m128) __a;\n+}\n+\n+extern __inline __m256\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_castph_ps (__m256h __a)\n+{\n+  return (__m256) __a;\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_castph_pd (__m128h __a)\n+{\n+  return (__m128d) __a;\n+}\n+\n+extern __inline __m256d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_castph_pd (__m256h __a)\n+{\n+  return (__m256d) __a;\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_castph_si128 (__m128h __a)\n+{\n+  return (__m128i) __a;\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_castph_si256 (__m256h __a)\n+{\n+  return (__m256i) __a;\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_castps_ph (__m128 __a)\n+{\n+  return (__m128h) __a;\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_castps_ph (__m256 __a)\n+{\n+  return (__m256h) __a;\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_castpd_ph (__m128d __a)\n+{\n+  return (__m128h) __a;\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_castpd_ph (__m256d __a)\n+{\n+  return (__m256h) __a;\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_castsi128_ph (__m128i __a)\n+{\n+  return (__m128h) __a;\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_castsi256_ph (__m256i __a)\n+{\n+  return (__m256h) __a;\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_castph256_ph128 (__m256h __A)\n+{\n+  union\n+  {\n+    __m128h a[2];\n+    __m256h v;\n+  } u = { .v = __A };\n+  return u.a[0];\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_castph128_ph256 (__m128h __A)\n+{\n+  union\n+  {\n+    __m128h a[2];\n+    __m256h v;\n+  } u;\n+  u.a[0] = __A;\n+  return u.v;\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_zextph128_ph256 (__m128h __A)\n+{\n+  return (__m256h) _mm256_insertf128_ps (_mm256_setzero_ps (),\n+\t\t\t\t\t (__m128) __A, 0);\n+}\n+\n /* Intrinsics v[add,sub,mul,div]ph.  */\n extern __inline __m128h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))"}, {"sha": "cf0cc7443c08e10b5a0230ac2f83e14b75ff9c25", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-typecast-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5873aadb6dd749558924eba3e1b4c21755721ba/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-typecast-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5873aadb6dd749558924eba3e1b4c21755721ba/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-typecast-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-typecast-1.c?ref=a5873aadb6dd749558924eba3e1b4c21755721ba", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+\n+  res.ymmh[0] = _mm512_castph512_ph256 (src1.zmmh);\n+  check_results (&res, &src1, 16, \"_mm512_castph512_ph256\");\n+\n+  res.xmmh[0] = _mm512_castph512_ph128 (src1.zmmh);\n+  check_results (&res, &src1, 8, \"_mm512_castph512_ph128\");\n+\n+  res.zmmh = _mm512_castph256_ph512 (src1.ymmh[0]);\n+  check_results (&res, &src1, 16, \"_mm512_castph256_ph512\");\n+\n+  res.zmmh = _mm512_castph128_ph512 (src1.xmmh[0]);\n+  check_results (&res, &src1, 8, \"_mm512_castph128_ph512\");\n+\n+  res.zmm = _mm512_castph_ps (src1.zmmh);\n+  check_results (&res, &src1, 32, \"_mm512_castph_ps\");\n+\n+  res.zmmd = _mm512_castph_pd (src1.zmmh);\n+  check_results (&res, &src1, 32, \"_mm512_castph_pd\");\n+\n+  res.zmmi = _mm512_castph_si512 (src1.zmmh);\n+  check_results (&res, &src1, 32, \"_mm512_castph_si512\");\n+\n+  res.zmmh = _mm512_castps_ph (src1.zmm);\n+  check_results (&res, &src1, 32, \"_mm512_castps_ph\");\n+\n+  res.zmmh = _mm512_castpd_ph (src1.zmmd);\n+  check_results (&res, &src1, 32, \"_mm512_castpd_ph\");\n+\n+  res.zmmh = _mm512_castsi512_ph (src1.zmmi);\n+  check_results (&res, &src1, 32, \"_mm512_castsi512_ph\");\n+\n+  if (n_errs != 0)\n+    abort ();\n+}"}, {"sha": "a29f1dbd76a9b52b95a357647f07764249b2b43f", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-typecast-2.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5873aadb6dd749558924eba3e1b4c21755721ba/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-typecast-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5873aadb6dd749558924eba3e1b4c21755721ba/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-typecast-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-typecast-2.c?ref=a5873aadb6dd749558924eba3e1b4c21755721ba", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512f-check.h\"\n+\n+extern int memcmp (const void *, const void *, __SIZE_TYPE__);\n+\n+void\n+do_test (void)\n+{\n+  union512i_d zero;\n+  union512h ad;\n+  union256h b,bd;\n+  union128h c;\n+\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      b.a[i] = 65.43f + i;\n+      zero.a[i] = 0;\n+    }\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      c.a[i] = 32.01f + i;\n+    }\n+\n+  ad.x = _mm512_zextph256_ph512 (b.x);\n+  if (memcmp (ad.a, b.a, 32)\n+      || memcmp (&ad.a[16], &zero.a, 32))\n+    abort ();\n+\n+  ad.x = _mm512_zextph128_ph512 (c.x);\n+  if (memcmp (ad.a, c.a, 16)\n+      || memcmp (&ad.a[8], &zero.a, 48))\n+    abort ();\n+   \n+}"}, {"sha": "3621bb52f08c43c709d1d150c3190687aab3a7c2", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-typecast-1.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5873aadb6dd749558924eba3e1b4c21755721ba/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-typecast-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5873aadb6dd749558924eba3e1b4c21755721ba/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-typecast-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-typecast-1.c?ref=a5873aadb6dd749558924eba3e1b4c21755721ba", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  res.xmm[0] = _mm_castph_ps (src1.xmmh[0]);\n+  check_results (&res, &src1, 8, \"_mm_castph_ps\");\n+\n+  res.xmmd[0] = _mm_castph_pd (src1.xmmh[0]);\n+  check_results (&res, &src1, 8, \"_mm_castph_pd\");\n+\n+  res.xmmi[0] = _mm_castph_si128 (src1.xmmh[0]);\n+  check_results (&res, &src1, 8, \"_mm_castph_si128\");\n+\n+  res.xmmh[0] = _mm_castps_ph (src1.xmm[0]);\n+  check_results (&res, &src1, 8, \"_mm_castps_ph\");\n+\n+  res.xmmh[0] = _mm_castpd_ph (src1.xmmd[0]);\n+  check_results (&res, &src1, 8, \"_mm_castpd_ph\");\n+\n+  res.xmmh[0] = _mm_castsi128_ph (src1.xmmi[0]);\n+  check_results (&res, &src1, 8, \"_mm_castsi128_ph\");\n+\n+  res.ymm[0] = _mm256_castph_ps (src1.ymmh[0]);\n+  check_results (&res, &src1, 16, \"_mm256_castph_ps\");\n+\n+  res.ymmd[0] = _mm256_castph_pd (src1.ymmh[0]);\n+  check_results (&res, &src1, 16, \"_mm256_castph_pd\");\n+\n+  res.ymmi[0] = _mm256_castph_si256 (src1.ymmh[0]);\n+  check_results (&res, &src1, 16, \"_mm256_castph_si256\");\n+\n+  res.ymmh[0] = _mm256_castps_ph (src1.ymm[0]);\n+  check_results (&res, &src1, 16, \"_mm256_castps_ph\");\n+\n+  res.ymmh[0] = _mm256_castpd_ph (src1.ymmd[0]);\n+  check_results (&res, &src1, 16, \"_mm256_castpd_ph\");\n+\n+  res.ymmh[0] = _mm256_castsi256_ph (src1.ymmi[0]);\n+  check_results (&res, &src1, 16, \"_mm256_castsi256_ph\");\n+\n+  res.xmmh[0] = _mm256_castph256_ph128 (src1.ymmh[0]);\n+  check_results (&res, &src1, 8, \"_mm256_castph256_ph128\");\n+\n+  res.ymmh[0] = _mm256_castph128_ph256 (src1.xmmh[0]);\n+  check_results (&res, &src1, 8, \"_mm256_castph128_ph256\");\n+  \n+  if (n_errs != 0)\n+    abort ();\n+}"}, {"sha": "dce387f1fab1613ff66a6c0dc0c6ade4e1febcc3", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-typecast-2.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5873aadb6dd749558924eba3e1b4c21755721ba/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-typecast-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5873aadb6dd749558924eba3e1b4c21755721ba/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-typecast-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-typecast-2.c?ref=a5873aadb6dd749558924eba3e1b4c21755721ba", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512f-check.h\"\n+\n+extern int memcmp (const void *, const void *, __SIZE_TYPE__);\n+\n+void\n+do_test (void)\n+{\n+  union512i_d zero;\n+  union512h ad;\n+  union256h b,bd;\n+  union128h c;\n+\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      b.a[i] = 65.43f + i;\n+      zero.a[i] = 0;\n+    }\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      c.a[i] = 32.01f + i;\n+    }\n+   \n+  bd.x = _mm256_zextph128_ph256 (c.x);\n+  if (memcmp (bd.a, c.a, 16)\n+      || memcmp (&bd.a[8], &zero.a, 16))\n+    abort ();\n+}"}]}