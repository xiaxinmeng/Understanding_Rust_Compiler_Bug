{"sha": "56dea35f948f84bff37051141893e1d237c3d0f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZkZWEzNWY5NDhmODRiZmYzNzA1MTE0MTg5M2UxZDIzN2MzZDBmOQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-12-01T17:52:03Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-12-01T17:52:03Z"}, "message": "Move gcc_jit_result implementation to a new files jit-result.{h|c}\n\ngcc/jit/ChangeLog:\n\t* Make-lang.in (jit_OBJS): Add jit/jit-result.o.\n\t* jit-playback.c: Include new header jit-result.h.\n\t(gcc::jit::result::result): Move to new file jit-result.c.\n\t(gcc::jit::result::~result): Likewise.\n\t(gcc::jit::playback::result): Likewise.\n\t* jit-recording.h (class gcc::jit::result): Move to new\n\theader jit-result.h.\n\t* jit-result.c: New file, to contain...\n\t(gcc::jit::result::result): Move here from jit-playback.c,\n\tremoving erroneous \"playback\" namespace from comment.\n\t(gcc::jit::result::~result): Likewise.\n\t(gcc::jit::playback::result): Likewise.\n\t* jit-result.h: New file, to contain...\n\t(class gcc::jit::result): Move from jit-recording.h.\n\t* libgccjit.c: Include jit-result.h.\n\t(gcc_jit_result_get_code): Update comment to reflect move\n\tof implementation.\n\t(gcc_jit_result_release): Likewise.\n\nFrom-SVN: r218236", "tree": {"sha": "e01e97dd200d920f68a44c0ffbf55499ae2b1fe5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e01e97dd200d920f68a44c0ffbf55499ae2b1fe5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56dea35f948f84bff37051141893e1d237c3d0f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56dea35f948f84bff37051141893e1d237c3d0f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56dea35f948f84bff37051141893e1d237c3d0f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56dea35f948f84bff37051141893e1d237c3d0f9/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "52b9468f1575b87e490cc3fdcff4c51f25fb49c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52b9468f1575b87e490cc3fdcff4c51f25fb49c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52b9468f1575b87e490cc3fdcff4c51f25fb49c1"}], "stats": {"total": 206, "additions": 146, "deletions": 60}, "files": [{"sha": "455ba59d81c935c79639b7f7fa2429b7e5240511", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56dea35f948f84bff37051141893e1d237c3d0f9/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56dea35f948f84bff37051141893e1d237c3d0f9/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=56dea35f948f84bff37051141893e1d237c3d0f9", "patch": "@@ -1,3 +1,24 @@\n+2014-12-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* Make-lang.in (jit_OBJS): Add jit/jit-result.o.\n+\t* jit-playback.c: Include new header jit-result.h.\n+\t(gcc::jit::result::result): Move to new file jit-result.c.\n+\t(gcc::jit::result::~result): Likewise.\n+\t(gcc::jit::playback::result): Likewise.\n+\t* jit-recording.h (class gcc::jit::result): Move to new\n+\theader jit-result.h.\n+\t* jit-result.c: New file, to contain...\n+\t(gcc::jit::result::result): Move here from jit-playback.c,\n+\tremoving erroneous \"playback\" namespace from comment.\n+\t(gcc::jit::result::~result): Likewise.\n+\t(gcc::jit::playback::result): Likewise.\n+\t* jit-result.h: New file, to contain...\n+\t(class gcc::jit::result): Move from jit-recording.h.\n+\t* libgccjit.c: Include jit-result.h.\n+\t(gcc_jit_result_get_code): Update comment to reflect move\n+\tof implementation.\n+\t(gcc_jit_result_release): Likewise.\n+\n 2014-12-01  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/63854"}, {"sha": "e88fd0038653aeb444aa3571ca216b906536acda", "filename": "gcc/jit/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56dea35f948f84bff37051141893e1d237c3d0f9/gcc%2Fjit%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56dea35f948f84bff37051141893e1d237c3d0f9/gcc%2Fjit%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FMake-lang.in?ref=56dea35f948f84bff37051141893e1d237c3d0f9", "patch": "@@ -64,6 +64,7 @@ jit_OBJS = attribs.o \\\n \tjit/libgccjit.o \\\n \tjit/jit-recording.o \\\n \tjit/jit-playback.o \\\n+\tjit/jit-result.o \\\n \tjit/jit-builtins.o\n \n # Use strict warnings for this front end."}, {"sha": "cd124eb1b849ecc2964da52c6fe8219a92e45332", "filename": "gcc/jit/jit-playback.c", "status": "modified", "additions": 1, "deletions": 42, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56dea35f948f84bff37051141893e1d237c3d0f9/gcc%2Fjit%2Fjit-playback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56dea35f948f84bff37051141893e1d237c3d0f9/gcc%2Fjit%2Fjit-playback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.c?ref=56dea35f948f84bff37051141893e1d237c3d0f9", "patch": "@@ -49,6 +49,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"jit-common.h\"\n #include \"jit-playback.h\"\n+#include \"jit-result.h\"\n \n \n /* gcc::jit::playback::context::build_cast uses the convert.h API,\n@@ -1951,48 +1952,6 @@ add_error_va (location *loc, const char *fmt, va_list ap)\n \t\t\t\t  fmt, ap);\n }\n \n-/* Constructor for gcc::jit::playback::result.  */\n-\n-result::\n-result(void *dso_handle)\n-  : m_dso_handle(dso_handle)\n-{\n-}\n-\n-/* gcc::jit::playback::result's destructor.\n-\n-   Called implicitly by gcc_jit_result_release.  */\n-\n-result::~result()\n-{\n-  dlclose (m_dso_handle);\n-}\n-\n-/* Attempt to locate the given function by name within the\n-   playback::result, using dlsym.\n-\n-   Implements the post-error-checking part of\n-   gcc_jit_result_get_code.  */\n-\n-void *\n-result::\n-get_code (const char *funcname)\n-{\n-  void *code;\n-  const char *error;\n-\n-  /* Clear any existing error.  */\n-  dlerror ();\n-\n-  code = dlsym (m_dso_handle, funcname);\n-\n-  if ((error = dlerror()) != NULL)  {\n-    fprintf(stderr, \"%s\\n\", error);\n-  }\n-\n-  return code;\n-}\n-\n /* Dealing with the linemap API.  */\n \n /* Construct a playback::location for a recording::location, if it"}, {"sha": "1b0ef915522e17f841aafa08c322bb68a32befe5", "filename": "gcc/jit/jit-recording.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56dea35f948f84bff37051141893e1d237c3d0f9/gcc%2Fjit%2Fjit-recording.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56dea35f948f84bff37051141893e1d237c3d0f9/gcc%2Fjit%2Fjit-recording.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.h?ref=56dea35f948f84bff37051141893e1d237c3d0f9", "patch": "@@ -1576,21 +1576,6 @@ class return_ : public statement\n \n } // namespace gcc::jit::recording\n \n-/* The result of JIT-compilation.  */\n-class result\n-{\n-public:\n-  result(void *dso_handle);\n-\n-  virtual ~result();\n-\n-  void *\n-  get_code (const char *funcname);\n-\n-private:\n-  void *m_dso_handle;\n-};\n-\n } // namespace gcc::jit\n \n } // namespace gcc"}, {"sha": "9e1e6d85b7018295a659c9df89e9ea014621473d", "filename": "gcc/jit/jit-result.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56dea35f948f84bff37051141893e1d237c3d0f9/gcc%2Fjit%2Fjit-result.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56dea35f948f84bff37051141893e1d237c3d0f9/gcc%2Fjit%2Fjit-result.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-result.c?ref=56dea35f948f84bff37051141893e1d237c3d0f9", "patch": "@@ -0,0 +1,73 @@\n+/* Internals of libgccjit: implementation of gcc_jit_result\n+   Copyright (C) 2013-2014 Free Software Foundation, Inc.\n+   Contributed by David Malcolm <dmalcolm@redhat.com>.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"jit-result.h\"\n+\n+namespace gcc {\n+namespace jit {\n+\n+/* Constructor for gcc::jit::result.  */\n+\n+result::\n+result(void *dso_handle)\n+  : m_dso_handle(dso_handle)\n+{\n+}\n+\n+/* gcc::jit::result's destructor.\n+\n+   Called implicitly by gcc_jit_result_release.  */\n+\n+result::~result()\n+{\n+  dlclose (m_dso_handle);\n+}\n+\n+/* Attempt to locate the given function by name within the\n+   playback::result, using dlsym.\n+\n+   Implements the post-error-checking part of\n+   gcc_jit_result_get_code.  */\n+\n+void *\n+result::\n+get_code (const char *funcname)\n+{\n+  void *code;\n+  const char *error;\n+\n+  /* Clear any existing error.  */\n+  dlerror ();\n+\n+  code = dlsym (m_dso_handle, funcname);\n+\n+  if ((error = dlerror()) != NULL)  {\n+    fprintf(stderr, \"%s\\n\", error);\n+  }\n+\n+  return code;\n+}\n+\n+} // namespace gcc::jit\n+\n+} // namespace gcc"}, {"sha": "60d6930d05821f8098af945e1f5e31e16061e57e", "filename": "gcc/jit/jit-result.h", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56dea35f948f84bff37051141893e1d237c3d0f9/gcc%2Fjit%2Fjit-result.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56dea35f948f84bff37051141893e1d237c3d0f9/gcc%2Fjit%2Fjit-result.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-result.h?ref=56dea35f948f84bff37051141893e1d237c3d0f9", "patch": "@@ -0,0 +1,47 @@\n+/* Internals of libgccjit: implementation of gcc_jit_result\n+   Copyright (C) 2013-2014 Free Software Foundation, Inc.\n+   Contributed by David Malcolm <dmalcolm@redhat.com>.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef JIT_RESULT_H\n+#define JIT_RESULT_H\n+\n+namespace gcc {\n+\n+namespace jit {\n+\n+/* The result of JIT-compilation.  */\n+class result\n+{\n+public:\n+  result(void *dso_handle);\n+\n+  virtual ~result();\n+\n+  void *\n+  get_code (const char *funcname);\n+\n+private:\n+  void *m_dso_handle;\n+};\n+\n+} // namespace gcc::jit\n+\n+} // namespace gcc\n+\n+#endif /* JIT_RESULT_H */"}, {"sha": "42769e8c8b6529b56f1b102241ecb65d07ddb700", "filename": "gcc/jit/libgccjit.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56dea35f948f84bff37051141893e1d237c3d0f9/gcc%2Fjit%2Flibgccjit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56dea35f948f84bff37051141893e1d237c3d0f9/gcc%2Fjit%2Flibgccjit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.c?ref=56dea35f948f84bff37051141893e1d237c3d0f9", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"libgccjit.h\"\n #include \"jit-common.h\"\n #include \"jit-recording.h\"\n+#include \"jit-result.h\"\n \n /* The opaque types used by the public API are actually subclasses\n    of the gcc::jit::recording classes.  */\n@@ -2047,8 +2048,7 @@ gcc_jit_context_get_first_error (gcc_jit_context *ctxt)\n /* Public entrypoint.  See description in libgccjit.h.\n \n    After error-checking, the real work is done by the\n-   gcc::jit::playback::result::get_code method in\n-   jit-playback.c.  */\n+   gcc::jit::result::get_code method in jit-result.c.  */\n \n void *\n gcc_jit_result_get_code (gcc_jit_result *result,\n@@ -2063,7 +2063,7 @@ gcc_jit_result_get_code (gcc_jit_result *result,\n /* Public entrypoint.  See description in libgccjit.h.\n \n    After error-checking, this is essentially a wrapper around the\n-   destructor for gcc::jit::playback::result in jit-playback.c.  */\n+   destructor for gcc::jit::result in jit-result.c.  */\n \n void\n gcc_jit_result_release (gcc_jit_result *result)"}]}