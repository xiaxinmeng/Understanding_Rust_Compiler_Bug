{"sha": "cec24319c61d616dc10f918187a72a9622180821", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VjMjQzMTljNjFkNjE2ZGMxMGY5MTgxODdhNzJhOTYyMjE4MDgyMQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-02-26T05:39:01Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-02-26T05:39:01Z"}, "message": "re PR c++/9683 (bug in initialization chains for static const variables from template classes)\n\n\tPR c++/9683\n\t* decl2.c (prune_vars_needing_no_initialization): Do not throw\n\taway initializations for DECL_EXTERNAL VAR_DECLs.\n\t(finish_file): Adjust accordingly.\n\t* pt.c (instantiate_decl): Do not defer VAR_DECLs.\n\n\tPR c++/9683\n\t* g++.dg/template/static3.C: New test.\n\nFrom-SVN: r63455", "tree": {"sha": "c5c90ab38ff9bf5549a387a267d1e8f572227552", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5c90ab38ff9bf5549a387a267d1e8f572227552"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cec24319c61d616dc10f918187a72a9622180821", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cec24319c61d616dc10f918187a72a9622180821", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cec24319c61d616dc10f918187a72a9622180821", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cec24319c61d616dc10f918187a72a9622180821/comments", "author": null, "committer": null, "parents": [{"sha": "38a843911d49becd4f01c6b8badebe19fb25682a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38a843911d49becd4f01c6b8badebe19fb25682a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38a843911d49becd4f01c6b8badebe19fb25682a"}], "stats": {"total": 83, "additions": 68, "deletions": 15}, "files": [{"sha": "caa078c36493fcdfbcca7b8cb0a8a43138b704d3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cec24319c61d616dc10f918187a72a9622180821/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cec24319c61d616dc10f918187a72a9622180821/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cec24319c61d616dc10f918187a72a9622180821", "patch": "@@ -1,3 +1,11 @@\n+2003-02-25  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/9683\n+\t* decl2.c (prune_vars_needing_no_initialization): Do not throw\n+\taway initializations for DECL_EXTERNAL VAR_DECLs.\n+\t(finish_file): Adjust accordingly.\n+\t* pt.c (instantiate_decl): Do not defer VAR_DECLs.\n+\n 2003-02-24 Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n       * decl.c (add_binding): Time TV_NAME_LOOKUP."}, {"sha": "52170daff2fa57051089e3c55b3c96468129f6fd", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cec24319c61d616dc10f918187a72a9622180821/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cec24319c61d616dc10f918187a72a9622180821/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=cec24319c61d616dc10f918187a72a9622180821", "patch": "@@ -84,7 +84,7 @@ static void finish_static_initialization_or_destruction (tree);\n static void generate_ctor_or_dtor_function (bool, int);\n static int generate_ctor_and_dtor_functions_for_priority (splay_tree_node,\n                                                           void *);\n-static tree prune_vars_needing_no_initialization (tree);\n+static tree prune_vars_needing_no_initialization (tree *);\n static void write_out_vars (tree);\n static void import_export_class (tree);\n static tree get_guard_bits (tree);\n@@ -2400,39 +2400,49 @@ do_static_destruction (tree decl)\n    i.e., the first variable should be initialized first.  */\n \n static tree\n-prune_vars_needing_no_initialization (tree vars)\n+prune_vars_needing_no_initialization (tree *vars)\n {\n-  tree var;\n-  tree result;\n+  tree *var = vars;\n+  tree result = NULL_TREE;\n \n-  for (var = vars, result = NULL_TREE;\n-       var;\n-       var = TREE_CHAIN (var))\n+  while (*var)\n     {\n-      tree decl = TREE_VALUE (var);\n-      tree init = TREE_PURPOSE (var);\n+      tree t = *var;\n+      tree decl = TREE_VALUE (t);\n+      tree init = TREE_PURPOSE (t);\n \n       /* Deal gracefully with error.  */\n       if (decl == error_mark_node)\n-\tcontinue;\n+\t{\n+\t  var = &TREE_CHAIN (t);\n+\t  continue;\n+\t}\n \n       /* The only things that can be initialized are variables.  */\n       my_friendly_assert (TREE_CODE (decl) == VAR_DECL, 19990420);\n \n       /* If this object is not defined, we don't need to do anything\n \t here.  */\n       if (DECL_EXTERNAL (decl))\n-\tcontinue;\n+\t{\n+\t  var = &TREE_CHAIN (t);\n+\t  continue;\n+\t}\n \n       /* Also, if the initializer already contains errors, we can bail\n \t out now.  */\n       if (init && TREE_CODE (init) == TREE_LIST \n \t  && value_member (error_mark_node, init))\n-\tcontinue;\n+\t{\n+\t  var = &TREE_CHAIN (t);\n+\t  continue;\n+\t}\n \n       /* This variable is going to need initialization and/or\n \t finalization, so we add it to the list.  */\n-      result = tree_cons (init, decl, result);\n+      *var = TREE_CHAIN (t);\n+      TREE_CHAIN (t) = result;\n+      result = t;\n     }\n \n   return result;\n@@ -2625,8 +2635,7 @@ finish_file ()\n \t aggregates added during the initialization of these will be\n \t initialized in the correct order when we next come around the\n \t loop.  */\n-      vars = prune_vars_needing_no_initialization (static_aggregates);\n-      static_aggregates = NULL_TREE;\n+      vars = prune_vars_needing_no_initialization (&static_aggregates);\n \n       if (vars)\n \t{"}, {"sha": "9336d96c09d37ecdb90f7ce8b16f16d8f5bdc89a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cec24319c61d616dc10f918187a72a9622180821/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cec24319c61d616dc10f918187a72a9622180821/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=cec24319c61d616dc10f918187a72a9622180821", "patch": "@@ -10647,6 +10647,14 @@ instantiate_decl (d, defer_ok)\n   my_friendly_assert (TREE_CODE (d) == FUNCTION_DECL\n \t\t      || TREE_CODE (d) == VAR_DECL, 0);\n \n+  /* Variables are never deferred; if instantiation is required, they\n+     are instantiated right away.  That allows for better code in the\n+     case that an expression refers to the value of the variable --\n+     if the variable has a constant value the referring expression can\n+     take advantage of that fact.  */\n+  if (TREE_CODE (d) == VAR_DECL)\n+    defer_ok = 0;\n+\n   /* Don't instantiate cloned functions.  Instead, instantiate the\n      functions they cloned.  */\n   if (TREE_CODE (d) == FUNCTION_DECL && DECL_CLONED_FUNCTION_P (d))"}, {"sha": "12fce54444dbbc9da9fcb7b508bc1a3e15093c6a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cec24319c61d616dc10f918187a72a9622180821/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cec24319c61d616dc10f918187a72a9622180821/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cec24319c61d616dc10f918187a72a9622180821", "patch": "@@ -1,5 +1,8 @@\n 2003-02-25  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/9683\n+\t* g++.dg/template/static3.C: New test.\n+\n \tPR c++/9829\n \t* g++.dg/parse/namespace6.C: New test.\n \t"}, {"sha": "65cf2c9e7b2149dfa24331b7c8ca92af113f4053", "filename": "gcc/testsuite/g++.dg/template/static3.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cec24319c61d616dc10f918187a72a9622180821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cec24319c61d616dc10f918187a72a9622180821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic3.C?ref=cec24319c61d616dc10f918187a72a9622180821", "patch": "@@ -0,0 +1,25 @@\n+template <class data> class foo\n+{\n+    public:\n+\tstatic const int a;\n+\tstatic const int b;\n+\tstatic const int c;\n+\tstatic const int d;\n+};\n+\n+template <class data> const int foo<data>::a = 1;\n+template <class data> const int foo<data>::b = a;\n+template <class data> const int foo<data>::c = b;\n+template <class data> const int foo<data>::d = c;\n+\n+typedef foo<int> fooInt;\n+\n+int main( void )\n+{\n+    fooInt *f;\n+\n+    f = new fooInt();\n+\n+    if (f->c != 1 || f->d != 1)\n+      return 1;\n+}"}]}