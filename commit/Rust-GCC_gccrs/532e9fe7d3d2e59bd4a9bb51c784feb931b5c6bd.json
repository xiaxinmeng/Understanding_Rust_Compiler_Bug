{"sha": "532e9fe7d3d2e59bd4a9bb51c784feb931b5c6bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTMyZTlmZTdkM2QyZTU5YmQ0YTliYjUxYzc4NGZlYjkzMWI1YzZiZA==", "commit": {"author": {"name": "Kyle Galloway", "email": "kgallowa@redhat.com", "date": "2007-02-21T18:09:24Z"}, "committer": {"name": "Kyle Galloway", "email": "kgallowa@gcc.gnu.org", "date": "2007-02-21T18:09:24Z"}, "message": "jvmti.cc (_Jv_JVMTI_GetArgumentsSize): New function.\n\n2007-02-21  Kyle Galloway  <kgallowa@redhat.com>\n\n\t* jvmti.cc (_Jv_JVMTI_GetArgumentsSize): New function.\n\t* testsuite/libjava.jvmti/interp/getargssize.java: New test.\n\t* testsuite/libjava.jvmti/interp/getargssize.h: Ditto.\n\t* testsuite/libjava.jvmti/interp/getargssize.jar: Ditto.\n\t* testsuite/libjava.jvmti/interp/getargssize.out: Ditto.\n\t* testsuite/libjava.jvmti/interp/natgetargssize.cc: Ditto.\n\nFrom-SVN: r122201", "tree": {"sha": "4a03be322beab612524a3afa2a9533604dd18c36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a03be322beab612524a3afa2a9533604dd18c36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/532e9fe7d3d2e59bd4a9bb51c784feb931b5c6bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/532e9fe7d3d2e59bd4a9bb51c784feb931b5c6bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/532e9fe7d3d2e59bd4a9bb51c784feb931b5c6bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/532e9fe7d3d2e59bd4a9bb51c784feb931b5c6bd/comments", "author": null, "committer": null, "parents": [{"sha": "21af5cdfe26153b6bc6f388776d8530b5c2f5524", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21af5cdfe26153b6bc6f388776d8530b5c2f5524", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21af5cdfe26153b6bc6f388776d8530b5c2f5524"}], "stats": {"total": 168, "additions": 167, "deletions": 1}, "files": [{"sha": "c3ff95a2c542024f700c7a8bb6f3b91849e84361", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9fe7d3d2e59bd4a9bb51c784feb931b5c6bd/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9fe7d3d2e59bd4a9bb51c784feb931b5c6bd/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=532e9fe7d3d2e59bd4a9bb51c784feb931b5c6bd", "patch": "@@ -1,3 +1,12 @@\n+2007-02-21  Kyle Galloway  <kgallowa@redhat.com>\n+\n+\t* jvmti.cc (_Jv_JVMTI_GetArgumentsSize): New function.\n+\t* testsuite/libjava.jvmti/interp/getargssize.java: New test.\n+\t* testsuite/libjava.jvmti/interp/getargssize.h: Ditto.\n+\t* testsuite/libjava.jvmti/interp/getargssize.jar: Ditto.\n+\t* testsuite/libjava.jvmti/interp/getargssize.out: Ditto.\n+\t* testsuite/libjava.jvmti/interp/natgetargssize.cc: Ditto.\n+\n 2007-02-21  Gary Benson  <gbenson@redhat.com>\n \n \t* java/util/GregorianCalendar.java: Removed."}, {"sha": "faa7401c1ce98bc01029bfc05221194c83b9d722", "filename": "libjava/jvmti.cc", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9fe7d3d2e59bd4a9bb51c784feb931b5c6bd/libjava%2Fjvmti.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9fe7d3d2e59bd4a9bb51c784feb931b5c6bd/libjava%2Fjvmti.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjvmti.cc?ref=532e9fe7d3d2e59bd4a9bb51c784feb931b5c6bd", "patch": "@@ -1085,6 +1085,45 @@ _Jv_JVMTI_GetMaxLocals (jvmtiEnv *env, jmethodID method, jint *max_locals)\n   return JVMTI_ERROR_NONE;\n }\n \n+static jvmtiError JNICALL\n+_Jv_JVMTI_GetArgumentsSize (jvmtiEnv *env, jmethodID method, jint *size)\n+{\n+  REQUIRE_PHASE (env, JVMTI_PHASE_START | JVMTI_PHASE_LIVE);\n+  NULL_CHECK (size);\n+  \n+  CHECK_FOR_NATIVE_METHOD (method);\n+  \n+  jvmtiError jerr;\n+  char *sig;\n+  jint num_slots = 0;\n+  \n+  jerr = env->GetMethodName (method, NULL, &sig, NULL);\n+  if (jerr != JVMTI_ERROR_NONE)\n+    return jerr;\n+  \n+  // If the method is non-static add a slot for the \"this\" pointer.\n+  if ((method->accflags & java::lang::reflect::Modifier::STATIC) == 0)\n+    num_slots++;\n+  \n+  for (int i = 0; sig[i] != ')'; i++)\n+    {\n+      if (sig[i] == 'Z' || sig[i] == 'B' || sig[i] == 'C' || sig[i] == 'S'\n+          || sig[i] == 'I' || sig[i] == 'F')\n+        num_slots++;\n+      else if (sig[i] == 'J' || sig[i] == 'D')\n+        num_slots+=2;\n+      else if (sig[i] == 'L')\n+        {\n+          num_slots++;\n+          while (sig[i] != ';')\n+            i++;\n+        }\n+    }\n+  \n+  *size = num_slots;\n+  return JVMTI_ERROR_NONE;\n+}\n+\n static jvmtiError JNICALL\n _Jv_JVMTI_GetMethodDeclaringClass (MAYBE_UNUSED jvmtiEnv *env,\n \t\t\t\t   jmethodID method,\n@@ -2011,7 +2050,7 @@ struct _Jv_jvmtiEnv _Jv_JVMTI_Interface =\n   _Jv_JVMTI_GetMethodModifiers,\t// GetMethodModifers\n   RESERVED,\t\t\t// reserved67\n   _Jv_JVMTI_GetMaxLocals,\t\t// GetMaxLocals\n-  UNIMPLEMENTED,\t\t// GetArgumentsSize\n+  _Jv_JVMTI_GetArgumentsSize,\t\t// GetArgumentsSize\n   _Jv_JVMTI_GetLineNumberTable,\t// GetLineNumberTable\n   UNIMPLEMENTED,\t\t// GetMethodLocation\n   _Jv_JVMTI_GetLocalVariableTable,\t\t// GetLocalVariableTable"}, {"sha": "e1e1767616f81eaf69d366cbaad75feadda3395e", "filename": "libjava/testsuite/libjava.jvmti/interp/getargssize.h", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9fe7d3d2e59bd4a9bb51c784feb931b5c6bd/libjava%2Ftestsuite%2Flibjava.jvmti%2Finterp%2Fgetargssize.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9fe7d3d2e59bd4a9bb51c784feb931b5c6bd/libjava%2Ftestsuite%2Flibjava.jvmti%2Finterp%2Fgetargssize.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jvmti%2Finterp%2Fgetargssize.h?ref=532e9fe7d3d2e59bd4a9bb51c784feb931b5c6bd", "patch": "@@ -0,0 +1,19 @@\n+/* DO NOT EDIT THIS FILE - it is machine generated */\n+\n+#ifndef __getargssize__\n+#define __getargssize__\n+\n+#include <jni.h>\n+\n+#ifdef __cplusplus\n+extern \"C\"\n+{\n+#endif\n+\n+JNIEXPORT jint JNICALL Java_getargssize_do_1getargssize_1tests (JNIEnv *env, jclass);\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#endif /* __getargssize__ */"}, {"sha": "4b92216fcd156c708a31398bcfc7c528d50b0aa3", "filename": "libjava/testsuite/libjava.jvmti/interp/getargssize.jar", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9fe7d3d2e59bd4a9bb51c784feb931b5c6bd/libjava%2Ftestsuite%2Flibjava.jvmti%2Finterp%2Fgetargssize.jar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9fe7d3d2e59bd4a9bb51c784feb931b5c6bd/libjava%2Ftestsuite%2Flibjava.jvmti%2Finterp%2Fgetargssize.jar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jvmti%2Finterp%2Fgetargssize.jar?ref=532e9fe7d3d2e59bd4a9bb51c784feb931b5c6bd"}, {"sha": "f5a2f25ca71decf99afd72c8617d07002c8e4548", "filename": "libjava/testsuite/libjava.jvmti/interp/getargssize.java", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9fe7d3d2e59bd4a9bb51c784feb931b5c6bd/libjava%2Ftestsuite%2Flibjava.jvmti%2Finterp%2Fgetargssize.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9fe7d3d2e59bd4a9bb51c784feb931b5c6bd/libjava%2Ftestsuite%2Flibjava.jvmti%2Finterp%2Fgetargssize.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jvmti%2Finterp%2Fgetargssize.java?ref=532e9fe7d3d2e59bd4a9bb51c784feb931b5c6bd", "patch": "@@ -0,0 +1,36 @@\n+public class getargssize\n+{\n+  static\n+    {\n+      System.loadLibrary(\"natgetargssize\");\n+    }\n+\n+  public int aMethod (float fone, int ione)\n+  {\n+    return 0;\n+  }\n+  \n+  public long bMethod (long lone, double done, int ione)\n+  {\n+    return 0;\n+  }\n+  \n+  public static boolean cMethod ()\n+  {\n+    return false;\n+  }\n+  \n+  public static Object dMethod (Object op)\n+  {\n+    return op;\n+  }\n+\n+  public static native int do_getargssize_tests ();\n+\n+  public static void main (String[] args)\n+  {\n+    System.out.println (\"JVMTI getargssize Interpreted Test\");\n+\n+    do_getargssize_tests ();\n+  }\n+}"}, {"sha": "cd9106623d7cd3f8aaf19a114f9e35875aeb233a", "filename": "libjava/testsuite/libjava.jvmti/interp/getargssize.out", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9fe7d3d2e59bd4a9bb51c784feb931b5c6bd/libjava%2Ftestsuite%2Flibjava.jvmti%2Finterp%2Fgetargssize.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9fe7d3d2e59bd4a9bb51c784feb931b5c6bd/libjava%2Ftestsuite%2Flibjava.jvmti%2Finterp%2Fgetargssize.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jvmti%2Finterp%2Fgetargssize.out?ref=532e9fe7d3d2e59bd4a9bb51c784feb931b5c6bd", "patch": "@@ -0,0 +1,5 @@\n+JVMTI getargssize Interpreted Test\n+Method 0 requires 3 slots for its arguments\n+Method 1 requires 6 slots for its arguments\n+Method 2 requires 0 slots for its arguments\n+Method 3 requires 1 slots for its arguments"}, {"sha": "326b5a68c576135dd263cd4ab14442558c2ee6ea", "filename": "libjava/testsuite/libjava.jvmti/interp/natgetargssize.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9fe7d3d2e59bd4a9bb51c784feb931b5c6bd/libjava%2Ftestsuite%2Flibjava.jvmti%2Finterp%2Fnatgetargssize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9fe7d3d2e59bd4a9bb51c784feb931b5c6bd/libjava%2Ftestsuite%2Flibjava.jvmti%2Finterp%2Fnatgetargssize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jvmti%2Finterp%2Fnatgetargssize.cc?ref=532e9fe7d3d2e59bd4a9bb51c784feb931b5c6bd", "patch": "@@ -0,0 +1,58 @@\n+#include <jni.h>\n+\n+#include <jvmti.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+#include \"getargssize.h\"\n+\n+JNIEXPORT jint JNICALL Java_getargssize_do_1getargssize_1tests\n+(JNIEnv *env, jclass klass)\n+{\n+  JavaVM *vm;\n+  jint err = env->GetJavaVM (&vm);\n+  if (err < 0)\n+    {\n+      fprintf (stderr, \"error getting VM\\n\");\n+      exit (1);\n+    }\n+\n+  jvmtiEnv *jvmti = NULL;\n+  vm->GetEnv ((void **) &jvmti, JVMTI_VERSION_1_0);\n+\n+  if (jvmti == NULL)\n+    {\n+      fprintf (stderr, \"error getting jvmti environment\\n\");\n+      exit (1);\n+    }\n+  \n+  jint args_size;\n+\n+  jvmtiError jerr;\n+  \n+  jmethodID meth_ids[4];\n+  \n+  meth_ids[0] = env->GetMethodID (klass, \"aMethod\", \"(FI)I\");\n+  meth_ids[1] = env->GetMethodID (klass, \"bMethod\", \"(JDI)J\");\n+  meth_ids[2] = env->GetStaticMethodID (klass, \"cMethod\", \"()Z\");\n+  meth_ids[3] = env->GetStaticMethodID (klass, \"dMethod\", \n+                                     \"(Ljava/lang/Object;)Ljava/lang/Object;\");\n+  for (int i = 0; i < 4; i++)\n+    {\n+      jerr = jvmti->GetArgumentsSize (meth_ids[i], &args_size);\n+      if (jerr != JVMTI_ERROR_NONE)\n+        {\n+          char *error_name;\n+          jvmti->GetErrorName (jerr, &error_name);\n+          fprintf (stderr, \"JVMTI Error: %s\\n\", error_name);\n+          jvmti->Deallocate (reinterpret_cast<unsigned char *> (error_name));\n+        }\n+      else\n+        {\n+          printf (\"Method %d requires %d slots for its arguments\\n\", i,\n+                  args_size);\n+        }\n+    }\n+    \n+    return 0;\n+}"}]}