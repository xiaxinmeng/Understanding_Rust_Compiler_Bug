{"sha": "386f7caea73f0d35ed0f7a8ae6e5d52740ab801e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg2ZjdjYWVhNzNmMGQzNWVkMGY3YThhZTZlNWQ1Mjc0MGFiODAxZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-02-11T10:04:14Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-02-11T10:04:14Z"}, "message": "re PR target/61925 (internal error when using vectorization on CPU without SSE)\n\n\tPR target/61925\n\t* config/i386/i386.c (ix86_reset_to_default_globals): Removed.\n\t(ix86_reset_previous_fndecl): Restore it here, unconditionally.\n\t(ix86_set_current_function): Rewritten.\n\t(ix86_add_new_builtins): Temporarily clear current_target_pragma\n\twhen creating builtin fndecls.\n\n\t* gcc.target/i386/pr61925-1.c: New test.\n\t* gcc.target/i386/pr61925-2.c: New test.\n\t* gcc.target/i386/pr61925-3.c: New test.\n\nFrom-SVN: r220609", "tree": {"sha": "df43c9a80fa953617317fcbe69e34f692d123c57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df43c9a80fa953617317fcbe69e34f692d123c57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/386f7caea73f0d35ed0f7a8ae6e5d52740ab801e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/386f7caea73f0d35ed0f7a8ae6e5d52740ab801e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/386f7caea73f0d35ed0f7a8ae6e5d52740ab801e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/386f7caea73f0d35ed0f7a8ae6e5d52740ab801e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4bd019b8d50600807d95aadeb451b2e68162745f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bd019b8d50600807d95aadeb451b2e68162745f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bd019b8d50600807d95aadeb451b2e68162745f"}], "stats": {"total": 175, "additions": 127, "deletions": 48}, "files": [{"sha": "be0365d1f17abf9431ef9d0e1aa03a0013b30804", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386f7caea73f0d35ed0f7a8ae6e5d52740ab801e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386f7caea73f0d35ed0f7a8ae6e5d52740ab801e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=386f7caea73f0d35ed0f7a8ae6e5d52740ab801e", "patch": "@@ -1,3 +1,12 @@\n+2015-02-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/61925\n+\t* config/i386/i386.c (ix86_reset_to_default_globals): Removed.\n+\t(ix86_reset_previous_fndecl): Restore it here, unconditionally.\n+\t(ix86_set_current_function): Rewritten.\n+\t(ix86_add_new_builtins): Temporarily clear current_target_pragma\n+\twhen creating builtin fndecls.\n+\n 2015-02-10  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/65005"}, {"sha": "71a5b2202ebffdf8c7e74949e6e8b023721e4d80", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 42, "deletions": 48, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386f7caea73f0d35ed0f7a8ae6e5d52740ab801e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386f7caea73f0d35ed0f7a8ae6e5d52740ab801e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=386f7caea73f0d35ed0f7a8ae6e5d52740ab801e", "patch": "@@ -5070,35 +5070,20 @@ ix86_can_inline_p (tree caller, tree callee)\n /* Remember the last target of ix86_set_current_function.  */\n static GTY(()) tree ix86_previous_fndecl;\n \n-/* Set target globals to default.  */\n+/* Set targets globals to the default (or current #pragma GCC target\n+   if active).  Invalidate ix86_previous_fndecl cache.  */\n \n-static void\n-ix86_reset_to_default_globals (void)\n-{\n-  tree old_tree = (ix86_previous_fndecl\n-\t\t   ? DECL_FUNCTION_SPECIFIC_TARGET (ix86_previous_fndecl)\n-\t\t   : NULL_TREE);\n-\n-  if (old_tree)\n-    {\n-      tree new_tree = target_option_current_node;\n-      cl_target_option_restore (&global_options,\n-\t\t\t\tTREE_TARGET_OPTION (new_tree));\n-      if (TREE_TARGET_GLOBALS (new_tree))\n-\trestore_target_globals (TREE_TARGET_GLOBALS (new_tree));\n-      else if (new_tree == target_option_default_node)\n-\trestore_target_globals (&default_target_globals);\n-      else\n-\tTREE_TARGET_GLOBALS (new_tree)\n-\t  = save_target_globals_default_opts ();\n-    }\n-}\n-\n-/* Invalidate ix86_previous_fndecl cache.  */\n void\n ix86_reset_previous_fndecl (void)\n {\n-  ix86_reset_to_default_globals ();\n+  tree new_tree = target_option_current_node;\n+  cl_target_option_restore (&global_options, TREE_TARGET_OPTION (new_tree));\n+  if (TREE_TARGET_GLOBALS (new_tree))\n+    restore_target_globals (TREE_TARGET_GLOBALS (new_tree));\n+  else if (new_tree == target_option_default_node)\n+    restore_target_globals (&default_target_globals);\n+  else\n+    TREE_TARGET_GLOBALS (new_tree) = save_target_globals_default_opts ();\n   ix86_previous_fndecl = NULL_TREE;\n }\n \n@@ -5111,34 +5096,39 @@ ix86_set_current_function (tree fndecl)\n   /* Only change the context if the function changes.  This hook is called\n      several times in the course of compiling a function, and we don't want to\n      slow things down too much or call target_reinit when it isn't safe.  */\n-  if (fndecl && fndecl != ix86_previous_fndecl)\n-    {\n-      tree old_tree = (ix86_previous_fndecl\n-\t\t       ? DECL_FUNCTION_SPECIFIC_TARGET (ix86_previous_fndecl)\n-\t\t       : NULL_TREE);\n+  if (fndecl == ix86_previous_fndecl)\n+    return;\n \n-      tree new_tree = (fndecl\n-\t\t       ? DECL_FUNCTION_SPECIFIC_TARGET (fndecl)\n-\t\t       : NULL_TREE);\n+  tree old_tree;\n+  if (ix86_previous_fndecl == NULL_TREE)\n+    old_tree = target_option_current_node;\n+  else if (DECL_FUNCTION_SPECIFIC_TARGET (ix86_previous_fndecl))\n+    old_tree = DECL_FUNCTION_SPECIFIC_TARGET (ix86_previous_fndecl);\n+  else\n+    old_tree = target_option_default_node;\n \n-      if (old_tree == new_tree)\n-\t;\n+  if (fndecl == NULL_TREE)\n+    {\n+      if (old_tree != target_option_current_node)\n+\tix86_reset_previous_fndecl ();\n+      return;\n+    }\n \n-      else if (new_tree && new_tree != target_option_default_node)\n-\t{\n-\t  cl_target_option_restore (&global_options,\n-\t\t\t\t    TREE_TARGET_OPTION (new_tree));\n-\t  if (TREE_TARGET_GLOBALS (new_tree))\n-\t    restore_target_globals (TREE_TARGET_GLOBALS (new_tree));\n-\t  else\n-\t    TREE_TARGET_GLOBALS (new_tree)\n-\t      = save_target_globals_default_opts ();\n-\t}\n+  tree new_tree = DECL_FUNCTION_SPECIFIC_TARGET (fndecl);\n+  if (new_tree == NULL_TREE)\n+    new_tree = target_option_default_node;\n \n-      else if (old_tree && old_tree != target_option_default_node)\n-\tix86_reset_to_default_globals ();\n-      ix86_previous_fndecl = fndecl;\n+  if (old_tree != new_tree)\n+    {\n+      cl_target_option_restore (&global_options, TREE_TARGET_OPTION (new_tree));\n+      if (TREE_TARGET_GLOBALS (new_tree))\n+\trestore_target_globals (TREE_TARGET_GLOBALS (new_tree));\n+      else if (new_tree == target_option_default_node)\n+\trestore_target_globals (&default_target_globals);\n+      else\n+\tTREE_TARGET_GLOBALS (new_tree) = save_target_globals_default_opts ();\n     }\n+  ix86_previous_fndecl = fndecl;\n }\n \n \f\n@@ -30607,6 +30597,8 @@ static void\n ix86_add_new_builtins (HOST_WIDE_INT isa)\n {\n   int i;\n+  tree saved_current_target_pragma = current_target_pragma;\n+  current_target_pragma = NULL_TREE;\n \n   for (i = 0; i < (int)IX86_BUILTIN_MAX; i++)\n     {\n@@ -30633,6 +30625,8 @@ ix86_add_new_builtins (HOST_WIDE_INT isa)\n \t    TREE_NOTHROW (decl) = 1;\n \t}\n     }\n+\n+  current_target_pragma = saved_current_target_pragma;\n }\n \n /* Bits for builtin_description.flag.  */"}, {"sha": "1abf3f960f36f4d6d1244a286d296e1f278afc4f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386f7caea73f0d35ed0f7a8ae6e5d52740ab801e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386f7caea73f0d35ed0f7a8ae6e5d52740ab801e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=386f7caea73f0d35ed0f7a8ae6e5d52740ab801e", "patch": "@@ -1,3 +1,10 @@\n+2015-02-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/61925\n+\t* gcc.target/i386/pr61925-1.c: New test.\n+\t* gcc.target/i386/pr61925-2.c: New test.\n+\t* gcc.target/i386/pr61925-3.c: New test.\n+\n 2015-02-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/65004"}, {"sha": "066aae3faafead695c89ff52091a2b1b58062b43", "filename": "gcc/testsuite/gcc.target/i386/pr61925-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386f7caea73f0d35ed0f7a8ae6e5d52740ab801e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61925-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386f7caea73f0d35ed0f7a8ae6e5d52740ab801e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61925-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61925-1.c?ref=386f7caea73f0d35ed0f7a8ae6e5d52740ab801e", "patch": "@@ -0,0 +1,21 @@\n+/* PR target/61925 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -w\" } */\n+/* { dg-additional-options \"-march=i386 -mno-sse\" { target ia32 } } */\n+\n+#pragma GCC push_options\n+#pragma GCC target(\"sse\")\n+typedef float __m128 __attribute__ ((__vector_size__ (16), __may_alias__));\n+typedef long long __m128i __attribute__ ((__vector_size__ (16), __may_alias__));\n+__m128i\n+bar (__m128 __A)\n+{\n+}\n+\n+#pragma GCC pop_options\n+\n+__attribute__ ((vector_size (16))) int\n+foo (__attribute__ ((vector_size (16))) int a, __attribute__ ((vector_size (16))) int b)\n+{\n+  return a + b;\n+}"}, {"sha": "9c96f140127cbfa19b87f14a583b94162807d17f", "filename": "gcc/testsuite/gcc.target/i386/pr61925-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386f7caea73f0d35ed0f7a8ae6e5d52740ab801e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61925-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386f7caea73f0d35ed0f7a8ae6e5d52740ab801e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61925-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61925-2.c?ref=386f7caea73f0d35ed0f7a8ae6e5d52740ab801e", "patch": "@@ -0,0 +1,21 @@\n+/* PR target/61925 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -w\" } */\n+/* { dg-additional-options \"-march=i386 -mno-sse\" { target ia32 } } */\n+\n+#pragma GCC push_options\n+#pragma GCC target(\"sse\")\n+typedef float __m128 __attribute__ ((__vector_size__ (16), __may_alias__));\n+extern __inline __m128 __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+foo (void)\n+{\n+}\n+\n+#pragma GCC target(\"sse2\")\n+#pragma GCC pop_options\n+\n+__attribute__ ((vector_size (16))) int\n+bar (__attribute__ ((vector_size (16))) int a, __attribute__ ((vector_size (16))) int b)\n+{\n+  return a + b;\n+}"}, {"sha": "0c4bdf45b3bd2160684861ce0600b52de3d97ff6", "filename": "gcc/testsuite/gcc.target/i386/pr61925-3.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386f7caea73f0d35ed0f7a8ae6e5d52740ab801e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61925-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386f7caea73f0d35ed0f7a8ae6e5d52740ab801e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61925-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61925-3.c?ref=386f7caea73f0d35ed0f7a8ae6e5d52740ab801e", "patch": "@@ -0,0 +1,27 @@\n+/* PR target/61925 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -w\" } */\n+/* { dg-additional-options \"-march=i386 -mno-sse\" { target ia32 } } */\n+\n+#pragma GCC push_options\n+#pragma GCC target(\"sse\")\n+typedef float __m128 __attribute__ ((__vector_size__ (16), __may_alias__));\n+\n+void\n+foo (void)\n+{\n+}\n+\n+__attribute__((target (\"avx\"))) void\n+bar (void)\n+{\n+}\n+\n+#pragma GCC target(\"sse2\")\n+#pragma GCC pop_options\n+\n+__attribute__ ((vector_size (16))) int\n+baz (__attribute__ ((vector_size (16))) int a, __attribute__ ((vector_size (16))) int b)\n+{\n+  return a + b;\n+}"}]}