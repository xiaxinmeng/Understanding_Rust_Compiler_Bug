{"sha": "f645da0e4ab9438dfd0c047c710c7ec6a7d6d8f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY0NWRhMGU0YWI5NDM4ZGZkMGMwNDdjNzEwYzdlYzZhN2Q2ZDhmMw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-01-21T19:04:55Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-01-21T19:04:55Z"}, "message": "c++: Fix excessive instantiation inside decltype [PR71879]\n\nHere after resolving the address of a template-id inside decltype, we\nend up instantiating the chosen specialization (from the call to\nmark_used in resolve_nondeduced_context), even though only its type is\nneeded.\n\nThis patch sets cp_unevaluated_operand throughout finish_decltype_type,\nso that in particular it's set during the call to\nresolve_nondeduced_context within.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/71879\n\t* semantics.c (finish_decltype_type): Set up a cp_unevaluated\n\tsentinel at the start of the function.  Remove a now-redundant\n\tmanual adjustment of cp_unevaluated_operand.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/71879\n\t* g++.dg/cpp0x/decltype-71879.C: New test.", "tree": {"sha": "74874eda6f57c92625bff229fec34338a408c563", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74874eda6f57c92625bff229fec34338a408c563"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f645da0e4ab9438dfd0c047c710c7ec6a7d6d8f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f645da0e4ab9438dfd0c047c710c7ec6a7d6d8f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f645da0e4ab9438dfd0c047c710c7ec6a7d6d8f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f645da0e4ab9438dfd0c047c710c7ec6a7d6d8f3/comments", "author": null, "committer": null, "parents": [{"sha": "7944753fad501194eb8a828d6b74270e79d14a4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7944753fad501194eb8a828d6b74270e79d14a4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7944753fad501194eb8a828d6b74270e79d14a4d"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "067095276afdd3c9220cd000f62598efacfcded4", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f645da0e4ab9438dfd0c047c710c7ec6a7d6d8f3/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f645da0e4ab9438dfd0c047c710c7ec6a7d6d8f3/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=f645da0e4ab9438dfd0c047c710c7ec6a7d6d8f3", "patch": "@@ -10080,6 +10080,9 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p,\n       return error_mark_node;\n     }\n \n+  /* decltype is an unevaluated context.  */\n+  cp_unevaluated u;\n+\n   /* Depending on the resolution of DR 1172, we may later need to distinguish\n      instantiation-dependent but not type-dependent expressions so that, say,\n      A<decltype(sizeof(T))>::U doesn't require 'typename'.  */\n@@ -10095,9 +10098,7 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p,\n     }\n   else if (processing_template_decl)\n     {\n-      ++cp_unevaluated_operand;\n       expr = instantiate_non_dependent_expr_sfinae (expr, complain);\n-      --cp_unevaluated_operand;\n       if (expr == error_mark_node)\n \treturn error_mark_node;\n     }"}, {"sha": "9da4d40ca7082836e3b7dc15c7f98d4347d0572b", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype-71879.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f645da0e4ab9438dfd0c047c710c7ec6a7d6d8f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-71879.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f645da0e4ab9438dfd0c047c710c7ec6a7d6d8f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-71879.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-71879.C?ref=f645da0e4ab9438dfd0c047c710c7ec6a7d6d8f3", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/71879\n+// { dg-do compile { target c++11 } }\n+\n+template <class T> void f(T x) { x.fail(); }\n+using R = decltype(&f<int>);"}]}