{"sha": "b04fe972e31570bfb09ae398576c1c79847a9f28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA0ZmU5NzJlMzE1NzBiZmIwOWFlMzk4NTc2YzFjNzk4NDdhOWYyOA==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2019-07-04T08:05:36Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-04T08:05:36Z"}, "message": "[Ada] Better error messages for ownership errors in SPARK\n\nWhen SPARK code does not follow the ownership rules of SPARK RM 3.10,\nthe error message now points to a location explaining why the object has\na more restricted permission than the expected one.\n\nThere is no impact on compilation.\n\n2019-07-04  Yannick Moy  <moy@adacore.com>\n\ngcc/ada/\n\n\t* sem_spark.adb (Explanation, Get_Expl): New functions to get\n\tthe explanation for a permission mismatch.\n\t(Perm_Error, Perm_Mismatch, Perm_Error_Loop_Exit): Take\n\texplanation into account for issuing a more precise error\n\tmessage.\n\t(Set_Perm_Prefixes, Set_Perm_Extensions,\n\tSet_Perm_Extensions_Move): Pass suitable argument for the\n\texplanation node.\n\nFrom-SVN: r273050", "tree": {"sha": "3c006f8ab5f75e8cae48cfa092228d32de5f529f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c006f8ab5f75e8cae48cfa092228d32de5f529f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b04fe972e31570bfb09ae398576c1c79847a9f28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b04fe972e31570bfb09ae398576c1c79847a9f28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b04fe972e31570bfb09ae398576c1c79847a9f28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b04fe972e31570bfb09ae398576c1c79847a9f28/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4ff5aa0c05b3a42a454d76275cf7e1f17cbb7412", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ff5aa0c05b3a42a454d76275cf7e1f17cbb7412", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ff5aa0c05b3a42a454d76275cf7e1f17cbb7412"}], "stats": {"total": 258, "additions": 196, "deletions": 62}, "files": [{"sha": "127c24346c64fb018860d295ef0169d385940567", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04fe972e31570bfb09ae398576c1c79847a9f28/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04fe972e31570bfb09ae398576c1c79847a9f28/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b04fe972e31570bfb09ae398576c1c79847a9f28", "patch": "@@ -1,3 +1,14 @@\n+2019-07-04  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_spark.adb (Explanation, Get_Expl): New functions to get\n+\tthe explanation for a permission mismatch.\n+\t(Perm_Error, Perm_Mismatch, Perm_Error_Loop_Exit): Take\n+\texplanation into account for issuing a more precise error\n+\tmessage.\n+\t(Set_Perm_Prefixes, Set_Perm_Extensions,\n+\tSet_Perm_Extensions_Move): Pass suitable argument for the\n+\texplanation node.\n+\n 2019-07-04  Arnaud Charlet  <charlet@adacore.com>\n \n \t* exp_aggr.adb (In_Place_Assign_OK): Moved to top level and add"}, {"sha": "82ddb161b8e98f3a54ad85c9294aba757de397f0", "filename": "gcc/ada/sem_spark.adb", "status": "modified", "additions": 185, "deletions": 62, "changes": 247, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04fe972e31570bfb09ae398576c1c79847a9f28/gcc%2Fada%2Fsem_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04fe972e31570bfb09ae398576c1c79847a9f28/gcc%2Fada%2Fsem_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_spark.adb?ref=b04fe972e31570bfb09ae398576c1c79847a9f28", "patch": "@@ -137,6 +137,9 @@ package body Sem_SPARK is\n          --  corresponds to both \"observing\" and \"owning\" types in SPARK RM\n          --  3.10. To be used when moving the path.\n \n+         Explanation : Node_Id;\n+         --  Node that can be used in an explanation for a permission mismatch\n+\n          case Kind is\n             --  An entire object is either a leaf (an object which cannot be\n             --  extended further in a path) or a subtree in folded form (which\n@@ -217,6 +220,7 @@ package body Sem_SPARK is\n \n       function Children_Permission (T : Perm_Tree_Access) return Perm_Kind;\n       function Component (T : Perm_Tree_Access) return Perm_Tree_Maps.Instance;\n+      function Explanation (T : Perm_Tree_Access) return Node_Id;\n       function Get_All (T : Perm_Tree_Access) return Perm_Tree_Access;\n       function Get_Elem (T : Perm_Tree_Access) return Perm_Tree_Access;\n       function Is_Node_Deep (T : Perm_Tree_Access) return Boolean;\n@@ -257,6 +261,7 @@ package body Sem_SPARK is\n         (N              : Node_Id;\n          Exp_Perm       : Perm_Kind;\n          Act_Perm       : Perm_Kind;\n+         Expl           : Node_Id;\n          Forbidden_Perm : Boolean := False);\n       --  Issues a continuation error message about a mismatch between a\n       --  desired permission Exp_Perm and a permission obtained Act_Perm. N\n@@ -428,6 +433,15 @@ package body Sem_SPARK is\n          Free_Perm_Tree_Dealloc (PT);\n       end Free_Tree;\n \n+      -----------------\n+      -- Explanation --\n+      -----------------\n+\n+      function Explanation (T : Perm_Tree_Access) return Node_Id is\n+      begin\n+         return T.all.Tree.Explanation;\n+      end Explanation;\n+\n       -------------\n       -- Get_All --\n       -------------\n@@ -503,22 +517,34 @@ package body Sem_SPARK is\n         (N              : Node_Id;\n          Exp_Perm       : Perm_Kind;\n          Act_Perm       : Perm_Kind;\n+         Expl           : Node_Id;\n          Forbidden_Perm : Boolean := False)\n       is\n       begin\n+         Error_Msg_Sloc := Sloc (Expl);\n+\n          if Forbidden_Perm then\n-            if Exp_Perm = Act_Perm then\n-               Error_Msg_N (\"\\got forbidden state `\"\n-                            & Perm_Kind'Image (Exp_Perm), N);\n+            if Exp_Perm = No_Access then\n+               Error_Msg_N (\"\\object was moved #\", N);\n             else\n-               Error_Msg_N (\"\\forbidden state `\"\n-                            & Perm_Kind'Image (Exp_Perm) & \"`, got `\"\n-                            & Perm_Kind'Image (Act_Perm) & \"`\", N);\n+               raise Program_Error;\n             end if;\n          else\n-            Error_Msg_N (\"\\expected state `\"\n-                         & Perm_Kind'Image (Exp_Perm) & \"` at least, got `\"\n-                         & Perm_Kind'Image (Act_Perm) & \"`\", N);\n+            case Exp_Perm is\n+               when Write_Perm =>\n+                  if Act_Perm = Read_Only then\n+                     Error_Msg_N\n+                       (\"\\object was declared as not writeable #\", N);\n+                  else\n+                     Error_Msg_N (\"\\object was moved #\", N);\n+                  end if;\n+\n+               when Read_Only =>\n+                  Error_Msg_N (\"\\object was moved #\", N);\n+\n+               when No_Access =>\n+                  raise Program_Error;\n+            end case;\n          end if;\n       end Perm_Mismatch;\n \n@@ -575,8 +601,11 @@ package body Sem_SPARK is\n \n    type Perm_Or_Tree (R : Result_Kind) is record\n       case R is\n-         when Folded   => Found_Permission : Perm_Kind;\n-         when Unfolded => Tree_Access      : Perm_Tree_Access;\n+         when Folded   =>\n+            Found_Permission : Perm_Kind;\n+            Explanation      : Node_Id;\n+         when Unfolded =>\n+            Tree_Access      : Perm_Tree_Access;\n       end case;\n    end record;\n \n@@ -650,6 +679,10 @@ package body Sem_SPARK is\n    --  Check that type Typ is either not deep, or that it is an observing or\n    --  owning type according to SPARK RM 3.10\n \n+   function Get_Expl (N : Node_Or_Entity_Id) return Node_Id;\n+   --  The function that takes a name as input and returns an explanation node\n+   --  for the permission associated with it.\n+\n    function Get_Observed_Or_Borrowed_Expr (Expr : Node_Id) return Node_Id;\n    pragma Precondition (Is_Path_Expression (Expr));\n    --  Return the expression being borrowed/observed when borrowing or\n@@ -732,6 +765,7 @@ package body Sem_SPARK is\n      (N              : Node_Id;\n       Perm           : Perm_Kind;\n       Found_Perm     : Perm_Kind;\n+      Expl           : Node_Id;\n       Forbidden_Perm : Boolean := False);\n    --  A procedure that is called when the permissions found contradict the\n    --  rules established by the RM. This function is called with the node and\n@@ -742,7 +776,8 @@ package body Sem_SPARK is\n      (E          : Entity_Id;\n       Subp       : Entity_Id;\n       Perm       : Perm_Kind;\n-      Found_Perm : Perm_Kind);\n+      Found_Perm : Perm_Kind;\n+      Expl       : Node_Id);\n    --  A procedure that is called when the permissions found contradict the\n    --  rules established by the RM at the end of subprograms. This function is\n    --  called with the node, the node of the returning function, and the\n@@ -772,20 +807,27 @@ package body Sem_SPARK is\n    --  subprogram indeed have Read_Write permission at the end of the\n    --  subprogram execution.\n \n-   procedure Set_Perm_Extensions (T : Perm_Tree_Access; P : Perm_Kind);\n+   procedure Set_Perm_Extensions\n+     (T    : Perm_Tree_Access;\n+      P    : Perm_Kind;\n+      Expl : Node_Id);\n    --  This procedure takes an access to a permission tree and modifies the\n    --  tree so that any strict extensions of the given tree become of the\n    --  access specified by parameter P.\n \n-   procedure Set_Perm_Extensions_Move (T : Perm_Tree_Access; E : Entity_Id);\n+   procedure Set_Perm_Extensions_Move\n+     (T    : Perm_Tree_Access;\n+      E    : Entity_Id;\n+      Expl : Node_Id);\n    --  Set permissions to\n    --    No for any extension with more .all\n    --    W for any deep extension with same number of .all\n    --    RW for any shallow extension with same number of .all\n \n    function Set_Perm_Prefixes\n      (N    : Node_Id;\n-      Perm : Perm_Kind_Option) return Perm_Tree_Access;\n+      Perm : Perm_Kind_Option;\n+      Expl : Node_Id) return Perm_Tree_Access;\n    pragma Precondition (Is_Path_Expression (N));\n    --  This function modifies the permissions of a given node in the permission\n    --  environment as well as all the prefixes of the path, to the new\n@@ -817,7 +859,8 @@ package body Sem_SPARK is\n       Typ        : Entity_Id;\n       Kind       : Formal_Kind;\n       Subp       : Entity_Id;\n-      Global_Var : Boolean);\n+      Global_Var : Boolean;\n+      Expl       : Node_Id);\n    --  Auxiliary procedure to Setup_Parameters and Setup_Globals\n \n    procedure Setup_Parameters (Subp : Entity_Id);\n@@ -1106,6 +1149,7 @@ package body Sem_SPARK is\n \n             if Perm = No_Access then\n                Perm_Error (Expr, No_Access, No_Access,\n+                           Expl => Get_Expl (Expr),\n                            Forbidden_Perm => True);\n                return;\n             end if;\n@@ -1114,6 +1158,7 @@ package body Sem_SPARK is\n \n             if Perm = No_Access then\n                Perm_Error (Expr, No_Access, No_Access,\n+                           Expl => Get_Expl (Expr_Root),\n                            Forbidden_Perm => True);\n                return;\n             end if;\n@@ -1133,7 +1178,7 @@ package body Sem_SPARK is\n             Perm := Get_Perm (Expr);\n \n             if Perm /= Read_Write then\n-               Perm_Error (Expr, Read_Write, Perm);\n+               Perm_Error (Expr, Read_Write, Perm, Expl => Get_Expl (Expr));\n                return;\n             end if;\n \n@@ -1331,6 +1376,7 @@ package body Sem_SPARK is\n                       (Tree =>\n                          (Kind                => Entire_Object,\n                           Is_Node_Deep        => True,\n+                          Explanation         => Decl,\n                           Permission          => Read_Write,\n                           Children_Permission => Read_Write));\n                begin\n@@ -1819,7 +1865,8 @@ package body Sem_SPARK is\n         (E          : Entity_Id;\n          Loop_Id    : Node_Id;\n          Perm       : Perm_Kind;\n-         Found_Perm : Perm_Kind);\n+         Found_Perm : Perm_Kind;\n+         Expl       : Node_Id);\n       --  A procedure that is called when the permissions found contradict\n       --  the rules established by the RM at the exit of loops. This function\n       --  is called with the entity, the node of the enclosing loop, the\n@@ -1889,14 +1936,15 @@ package body Sem_SPARK is\n          begin\n             if not (Permission (Tree) >= Perm) then\n                Perm_Error_Loop_Exit\n-                 (E, Stmt, Permission (Tree), Perm);\n+                 (E, Stmt, Permission (Tree), Perm, Explanation (Tree));\n             end if;\n \n             case Kind (Tree) is\n                when Entire_Object =>\n                   if not (Children_Permission (Tree) >= Perm) then\n                      Perm_Error_Loop_Exit\n-                       (E, Stmt, Children_Permission (Tree), Perm);\n+                       (E, Stmt, Children_Permission (Tree), Perm,\n+                        Explanation (Tree));\n \n                   end if;\n \n@@ -1934,14 +1982,15 @@ package body Sem_SPARK is\n          begin\n             if not (Perm >= Permission (Tree)) then\n                Perm_Error_Loop_Exit\n-                 (E, Stmt, Permission (Tree), Perm);\n+                 (E, Stmt, Permission (Tree), Perm, Explanation (Tree));\n             end if;\n \n             case Kind (Tree) is\n                when Entire_Object =>\n                   if not (Perm >= Children_Permission (Tree)) then\n                      Perm_Error_Loop_Exit\n-                       (E, Stmt, Children_Permission (Tree), Perm);\n+                       (E, Stmt, Children_Permission (Tree), Perm,\n+                        Explanation (Tree));\n                   end if;\n \n                when Reference =>\n@@ -1974,7 +2023,8 @@ package body Sem_SPARK is\n               (E          => E,\n                Loop_Id    => Stmt,\n                Perm       => Permission (New_Tree),\n-               Found_Perm => Permission (Orig_Tree));\n+               Found_Perm => Permission (Orig_Tree),\n+               Expl       => Explanation (New_Tree));\n          end if;\n \n          case Kind (New_Tree) is\n@@ -1994,7 +2044,8 @@ package body Sem_SPARK is\n                      Perm_Error_Loop_Exit\n                        (E, Stmt,\n                         Children_Permission (New_Tree),\n-                        Children_Permission (Orig_Tree));\n+                        Children_Permission (Orig_Tree),\n+                        Explanation (New_Tree));\n                   end if;\n \n                when Reference =>\n@@ -2101,14 +2152,16 @@ package body Sem_SPARK is\n         (E          : Entity_Id;\n          Loop_Id    : Node_Id;\n          Perm       : Perm_Kind;\n-         Found_Perm : Perm_Kind)\n+         Found_Perm : Perm_Kind;\n+         Expl       : Node_Id)\n       is\n       begin\n          Error_Msg_Node_2 := Loop_Id;\n          Error_Msg_N (\"insufficient permission for & when exiting loop &\", E);\n          Perm_Mismatch (Exp_Perm => Perm,\n                         Act_Perm => Found_Perm,\n-                        N        => Loop_Id);\n+                        N        => Loop_Id,\n+                        Expl     => Expl);\n       end Perm_Error_Loop_Exit;\n \n       --  Local variables\n@@ -2836,7 +2889,7 @@ package body Sem_SPARK is\n                Perm := Get_Perm (Obj);\n \n                if Perm /= Read_Write then\n-                  Perm_Error (Decl, Read_Write, Perm);\n+                  Perm_Error (Decl, Read_Write, Perm, Expl => Get_Expl (Obj));\n                end if;\n \n                if Ekind_In (Subp, E_Procedure, E_Entry)\n@@ -3044,6 +3097,51 @@ package body Sem_SPARK is\n       end case;\n    end Check_Type;\n \n+   --------------\n+   -- Get_Expl --\n+   --------------\n+\n+   function Get_Expl (N : Node_Or_Entity_Id) return Node_Id is\n+   begin\n+      --  Special case for the object declared in an extended return statement\n+\n+      if Nkind (N) = N_Defining_Identifier then\n+         declare\n+            C : constant Perm_Tree_Access :=\n+              Get (Current_Perm_Env, Unique_Entity (N));\n+         begin\n+            pragma Assert (C /= null);\n+            return Explanation (C);\n+         end;\n+\n+      --  The expression is a call to a traversal function\n+\n+      elsif Is_Traversal_Function_Call (N) then\n+         return N;\n+\n+      --  The expression is directly rooted in an object\n+\n+      elsif Present (Get_Root_Object (N, Through_Traversal => False)) then\n+         declare\n+            Tree_Or_Perm : constant Perm_Or_Tree := Get_Perm_Or_Tree (N);\n+         begin\n+            case Tree_Or_Perm.R is\n+               when Folded =>\n+                  return Tree_Or_Perm.Explanation;\n+\n+               when Unfolded =>\n+                  pragma Assert (Tree_Or_Perm.Tree_Access /= null);\n+                  return Explanation (Tree_Or_Perm.Tree_Access);\n+            end case;\n+         end;\n+\n+      --  The expression is a function call, an allocation, or null\n+\n+      else\n+         return N;\n+      end if;\n+   end Get_Expl;\n+\n    -----------------------------------\n    -- Get_Observed_Or_Borrowed_Expr --\n    -----------------------------------\n@@ -3159,7 +3257,9 @@ package body Sem_SPARK is\n                         when Entire_Object =>\n                            return (R                => Folded,\n                                    Found_Permission =>\n-                                      Children_Permission (C.Tree_Access));\n+                                      Children_Permission (C.Tree_Access),\n+                                   Explanation      =>\n+                                      Explanation (C.Tree_Access));\n \n                         when Reference =>\n                            pragma Assert (Nkind (N) = N_Explicit_Dereference);\n@@ -3208,7 +3308,7 @@ package body Sem_SPARK is\n \n    function Get_Perm_Tree (N : Node_Id) return Perm_Tree_Access is\n    begin\n-      return Set_Perm_Prefixes (N, None);\n+      return Set_Perm_Prefixes (N, None, Empty);\n    end Get_Perm_Tree;\n \n    ---------------------\n@@ -3912,6 +4012,7 @@ package body Sem_SPARK is\n      (N              : Node_Id;\n       Perm           : Perm_Kind;\n       Found_Perm     : Perm_Kind;\n+      Expl           : Node_Id;\n       Forbidden_Perm : Boolean := False)\n    is\n       procedure Set_Root_Object\n@@ -3975,7 +4076,7 @@ package body Sem_SPARK is\n          Error_Msg_NE (\"insufficient permission for &\", N, Root);\n       end if;\n \n-      Perm_Mismatch (N, Perm, Found_Perm, Forbidden_Perm);\n+      Perm_Mismatch (N, Perm, Found_Perm, Expl, Forbidden_Perm);\n    end Perm_Error;\n \n    -------------------------------\n@@ -3986,13 +4087,14 @@ package body Sem_SPARK is\n      (E          : Entity_Id;\n       Subp       : Entity_Id;\n       Perm       : Perm_Kind;\n-      Found_Perm : Perm_Kind)\n+      Found_Perm : Perm_Kind;\n+      Expl       : Node_Id)\n    is\n    begin\n       Error_Msg_Node_2 := Subp;\n       Error_Msg_NE (\"insufficient permission for & when returning from &\",\n                     Subp, E);\n-      Perm_Mismatch (Subp, Perm, Found_Perm);\n+      Perm_Mismatch (Subp, Perm, Found_Perm, Expl);\n    end Perm_Error_Subprogram_End;\n \n    ------------------\n@@ -4035,7 +4137,7 @@ package body Sem_SPARK is\n \n                if Is_Prefix_Or_Almost (Pref => Borrowed, Expr => Expr) then\n                   Error_Msg_Sloc := Sloc (Borrowed);\n-                  Error_Msg_N (\"expression was borrowed #\", Expr);\n+                  Error_Msg_N (\"object was borrowed #\", Expr);\n                end if;\n \n                Key := Get_Next_Key (Current_Borrowers);\n@@ -4071,7 +4173,7 @@ package body Sem_SPARK is\n \n                if Is_Prefix_Or_Almost (Pref => Observed, Expr => Expr) then\n                   Error_Msg_Sloc := Sloc (Observed);\n-                  Error_Msg_N (\"expression was observed #\", Expr);\n+                  Error_Msg_N (\"object was observed #\", Expr);\n                end if;\n \n                Key := Get_Next_Key (Current_Observers);\n@@ -4134,7 +4236,7 @@ package body Sem_SPARK is\n             --  Check path is readable\n \n             if Perm not in Read_Perm then\n-               Perm_Error (Expr, Read_Only, Perm);\n+               Perm_Error (Expr, Read_Only, Perm, Expl => Get_Expl (Expr));\n                return;\n             end if;\n \n@@ -4158,7 +4260,7 @@ package body Sem_SPARK is\n \n             if not Is_Deep (Expr_Type) then\n                if Perm not in Read_Perm then\n-                  Perm_Error (Expr, Read_Only, Perm);\n+                  Perm_Error (Expr, Read_Only, Perm, Expl => Get_Expl (Expr));\n                end if;\n                return;\n             end if;\n@@ -4167,7 +4269,7 @@ package body Sem_SPARK is\n             --  the source object (if any) shall be Unrestricted.\n \n             if Perm /= Read_Write then\n-               Perm_Error (Expr, Read_Write, Perm);\n+               Perm_Error (Expr, Read_Write, Perm, Expl => Get_Expl (Expr));\n                return;\n             end if;\n \n@@ -4182,7 +4284,7 @@ package body Sem_SPARK is\n             --  For assignment, check W permission\n \n             if Perm not in Write_Perm then\n-               Perm_Error (Expr, Write_Only, Perm);\n+               Perm_Error (Expr, Write_Only, Perm, Expl => Get_Expl (Expr));\n                return;\n             end if;\n \n@@ -4201,7 +4303,7 @@ package body Sem_SPARK is\n             --  For borrowing, check RW permission\n \n             if Perm /= Read_Write then\n-               Perm_Error (Expr, Read_Write, Perm);\n+               Perm_Error (Expr, Read_Write, Perm, Expl => Get_Expl (Expr));\n                return;\n             end if;\n \n@@ -4220,7 +4322,7 @@ package body Sem_SPARK is\n             --  For borrowing, check R permission\n \n             if Perm not in Read_Perm then\n-               Perm_Error (Expr, Read_Only, Perm);\n+               Perm_Error (Expr, Read_Only, Perm, Expl => Get_Expl (Expr));\n                return;\n             end if;\n       end case;\n@@ -4259,10 +4361,10 @@ package body Sem_SPARK is\n             if Present (Get_Root_Object (Expr)) then\n                declare\n                   Tree : constant Perm_Tree_Access :=\n-                    Set_Perm_Prefixes (Expr, Write_Only);\n+                    Set_Perm_Prefixes (Expr, Write_Only, Expl => Expr);\n                begin\n                   pragma Assert (Tree /= null);\n-                  Set_Perm_Extensions_Move (Tree, Etype (Expr));\n+                  Set_Perm_Extensions_Move (Tree, Etype (Expr), Expl => Expr);\n                end;\n             end if;\n \n@@ -4283,7 +4385,7 @@ package body Sem_SPARK is\n                Tree : constant Perm_Tree_Access := Get_Perm_Tree (Expr);\n             begin\n                Tree.all.Tree.Permission := Read_Write;\n-               Set_Perm_Extensions (Tree, Read_Write);\n+               Set_Perm_Extensions (Tree, Read_Write, Expl => Expr);\n \n                --  Normalize the permission tree\n \n@@ -4390,7 +4492,8 @@ package body Sem_SPARK is\n               (E          => Id,\n                Subp       => Subp,\n                Perm       => Read_Write,\n-               Found_Perm => Permission (Tree));\n+               Found_Perm => Permission (Tree),\n+               Expl       => Explanation (Tree));\n          end if;\n       end;\n    end Return_Parameter_Or_Global;\n@@ -4418,7 +4521,10 @@ package body Sem_SPARK is\n    -- Set_Perm_Extensions --\n    -------------------------\n \n-   procedure Set_Perm_Extensions (T : Perm_Tree_Access; P : Perm_Kind) is\n+   procedure Set_Perm_Extensions\n+     (T    : Perm_Tree_Access;\n+      P    : Perm_Kind;\n+      Expl : Node_Id) is\n \n       procedure Free_Perm_Tree_Children (T : Perm_Tree_Access);\n       --  Free the permission tree of children if any, prio to replacing T\n@@ -4462,6 +4568,7 @@ package body Sem_SPARK is\n       Free_Perm_Tree_Children (T);\n       T.all.Tree := Perm_Tree'(Kind                => Entire_Object,\n                                Is_Node_Deep        => Is_Node_Deep (T),\n+                               Explanation         => Expl,\n                                Permission          => Permission (T),\n                                Children_Permission => P);\n    end Set_Perm_Extensions;\n@@ -4471,14 +4578,15 @@ package body Sem_SPARK is\n    ------------------------------\n \n    procedure Set_Perm_Extensions_Move\n-     (T : Perm_Tree_Access;\n-      E : Entity_Id)\n+     (T    : Perm_Tree_Access;\n+      E    : Entity_Id;\n+      Expl : Node_Id)\n    is\n    begin\n       --  Shallow extensions are set to RW\n \n       if not Is_Node_Deep (T) then\n-         Set_Perm_Extensions (T, Read_Write);\n+         Set_Perm_Extensions (T, Read_Write, Expl => Expl);\n          return;\n       end if;\n \n@@ -4502,12 +4610,14 @@ package body Sem_SPARK is\n                          (Tree =>\n                             (Kind                => Entire_Object,\n                              Is_Node_Deep        => Is_Node_Deep (T),\n+                             Explanation         => Expl,\n                              Permission          => Read_Write,\n                              Children_Permission => Read_Write));\n                   begin\n-                     Set_Perm_Extensions_Move (C, Component_Type (E));\n+                     Set_Perm_Extensions_Move (C, Component_Type (E), Expl);\n                      T.all.Tree := (Kind         => Array_Component,\n                                     Is_Node_Deep => Is_Node_Deep (T),\n+                                    Explanation  => Expl,\n                                     Permission   => Write_Only,\n                                     Get_Elem     => C);\n                   end;\n@@ -4525,31 +4635,33 @@ package body Sem_SPARK is\n                           (Tree =>\n                              (Kind                => Entire_Object,\n                               Is_Node_Deep        => Is_Deep (Etype (Comp)),\n+                              Explanation         => Expl,\n                               Permission          => Read_Write,\n                               Children_Permission => Read_Write));\n-                        Set_Perm_Extensions_Move (C, Etype (Comp));\n+                        Set_Perm_Extensions_Move (C, Etype (Comp), Expl);\n                         Perm_Tree_Maps.Set (Hashtbl, Comp, C);\n                         Next_Component_Or_Discriminant (Comp);\n                      end loop;\n \n                      T.all.Tree :=\n                        (Kind             => Record_Component,\n                         Is_Node_Deep     => Is_Node_Deep (T),\n+                        Explanation      => Expl,\n                         Permission       => Write_Only,\n                         Component        => Hashtbl);\n                   end;\n \n                --  Otherwise, extensions are set to NO\n \n                when others =>\n-                  Set_Perm_Extensions (T, No_Access);\n+                  Set_Perm_Extensions (T, No_Access, Expl);\n             end case;\n \n          when Reference =>\n-            Set_Perm_Extensions (T, No_Access);\n+            Set_Perm_Extensions (T, No_Access, Expl);\n \n          when Array_Component =>\n-            Set_Perm_Extensions_Move (Get_Elem (T), Component_Type (E));\n+            Set_Perm_Extensions_Move (Get_Elem (T), Component_Type (E), Expl);\n \n          when Record_Component =>\n             declare\n@@ -4561,7 +4673,7 @@ package body Sem_SPARK is\n                while Present (Comp) loop\n                   C := Perm_Tree_Maps.Get (Component (T), Comp);\n                   pragma Assert (C /= null);\n-                  Set_Perm_Extensions_Move (C, Etype (Comp));\n+                  Set_Perm_Extensions_Move (C, Etype (Comp), Expl);\n                   Next_Component_Or_Discriminant (Comp);\n                end loop;\n             end;\n@@ -4574,7 +4686,8 @@ package body Sem_SPARK is\n \n    function Set_Perm_Prefixes\n      (N    : Node_Id;\n-      Perm : Perm_Kind_Option) return Perm_Tree_Access\n+      Perm : Perm_Kind_Option;\n+      Expl : Node_Id) return Perm_Tree_Access\n    is\n    begin\n       case Nkind (N) is\n@@ -4602,7 +4715,7 @@ package body Sem_SPARK is\n          when N_Explicit_Dereference =>\n             declare\n                C : constant Perm_Tree_Access :=\n-                 Set_Perm_Prefixes (Prefix (N), Perm);\n+                 Set_Perm_Prefixes (Prefix (N), Perm, Expl);\n                pragma Assert (C /= null);\n                pragma Assert (Kind (C) = Entire_Object\n                               or else Kind (C) = Reference);\n@@ -4635,6 +4748,7 @@ package body Sem_SPARK is\n                          (Tree =>\n                             (Kind                => Entire_Object,\n                              Is_Node_Deep        => Is_Deep (Etype (N)),\n+                             Explanation         => Expl,\n                              Permission          => Child_P,\n                              Children_Permission => Child_P));\n                   begin\n@@ -4644,6 +4758,7 @@ package body Sem_SPARK is\n \n                      C.all.Tree := (Kind         => Reference,\n                                     Is_Node_Deep => Is_Node_Deep (C),\n+                                    Explanation  => Expl,\n                                     Permission   => Permission (C),\n                                     Get_All      => D);\n                      return D;\n@@ -4654,7 +4769,7 @@ package body Sem_SPARK is\n          when N_Selected_Component =>\n             declare\n                C : constant Perm_Tree_Access :=\n-                 Set_Perm_Prefixes (Prefix (N), Perm);\n+                 Set_Perm_Prefixes (Prefix (N), Perm, Expl);\n                pragma Assert (C /= null);\n                pragma Assert (Kind (C) = Entire_Object\n                               or else Kind (C) = Record_Component);\n@@ -4708,6 +4823,7 @@ package body Sem_SPARK is\n                           (Tree =>\n                              (Kind                => Entire_Object,\n                               Is_Node_Deep        => Is_Deep (Etype (Comp)),\n+                              Explanation         => Expl,\n                               Permission          => P,\n                               Children_Permission => Child_P));\n                         Perm_Tree_Maps.Set (Hashtbl, Comp, D);\n@@ -4723,6 +4839,7 @@ package body Sem_SPARK is\n \n                      C.all.Tree := (Kind         => Record_Component,\n                                     Is_Node_Deep => Is_Node_Deep (C),\n+                                    Explanation  => Expl,\n                                     Permission   => Permission (C),\n                                     Component    => Hashtbl);\n                      return D_This;\n@@ -4735,7 +4852,7 @@ package body Sem_SPARK is\n          =>\n             declare\n                C : constant Perm_Tree_Access :=\n-                 Set_Perm_Prefixes (Prefix (N), Perm);\n+                 Set_Perm_Prefixes (Prefix (N), Perm, Expl);\n                pragma Assert (C /= null);\n                pragma Assert (Kind (C) = Entire_Object\n                               or else Kind (C) = Array_Component);\n@@ -4768,6 +4885,7 @@ package body Sem_SPARK is\n                          (Tree =>\n                             (Kind                => Entire_Object,\n                              Is_Node_Deep        => Is_Node_Deep (C),\n+                             Explanation         => Expl,\n                              Permission          => Child_P,\n                              Children_Permission => Child_P));\n                   begin\n@@ -4777,6 +4895,7 @@ package body Sem_SPARK is\n \n                      C.all.Tree := (Kind         => Array_Component,\n                                     Is_Node_Deep => Is_Node_Deep (C),\n+                                    Explanation  => Expl,\n                                     Permission   => Permission (C),\n                                     Get_Elem     => D);\n                      return D;\n@@ -4788,7 +4907,7 @@ package body Sem_SPARK is\n             | N_Type_Conversion\n             | N_Unchecked_Type_Conversion\n          =>\n-            return Set_Perm_Prefixes (Expression (N), Perm);\n+            return Set_Perm_Prefixes (Expression (N), Perm, Expl);\n \n          when others =>\n             raise Program_Error;\n@@ -4893,7 +5012,8 @@ package body Sem_SPARK is\n             Typ        => Typ,\n             Kind       => Kind,\n             Subp       => Subp,\n-            Global_Var => Global_Var);\n+            Global_Var => Global_Var,\n+            Expl       => Expr);\n       end Setup_Global;\n \n       procedure Setup_Globals_Inst is new Handle_Globals (Setup_Global);\n@@ -4913,7 +5033,8 @@ package body Sem_SPARK is\n       Typ        : Entity_Id;\n       Kind       : Formal_Kind;\n       Subp       : Entity_Id;\n-      Global_Var : Boolean)\n+      Global_Var : Boolean;\n+      Expl       : Node_Id)\n    is\n       Perm : Perm_Kind_Option;\n \n@@ -4989,6 +5110,7 @@ package body Sem_SPARK is\n                 (Tree =>\n                    (Kind                => Entire_Object,\n                     Is_Node_Deep        => Is_Deep (Etype (Id)),\n+                    Explanation         => Expl,\n                     Permission          => Perm,\n                     Children_Permission => Perm));\n          begin\n@@ -5011,7 +5133,8 @@ package body Sem_SPARK is\n             Typ        => Underlying_Type (Etype (Formal)),\n             Kind       => Ekind (Formal),\n             Subp       => Subp,\n-            Global_Var => False);\n+            Global_Var => False,\n+            Expl       => Formal);\n          Next_Formal (Formal);\n       end loop;\n    end Setup_Parameters;"}]}