{"sha": "1026172832d7175b52ee0ddf5ef17d7f5b803e2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAyNjE3MjgzMmQ3MTc1YjUyZWUwZGRmNWVmMTdkN2Y1YjgwM2UyZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-06-08T21:35:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-06-08T21:35:02Z"}, "message": "re PR c++/49107 ([C++0x][4.7 Regression] incomplete type regression with std::pair)\n\n\tPR c++/49107\n\t* cp-tree.def (DEFERRED_NOEXCEPT): New.\n\t* cp-tree.h (struct tree_deferred_noexcept): New.\n\t(DEFERRED_NOEXCEPT_PATTERN, DEFERRED_NOEXCEPT_ARGS): New.\n\t(DEFERRED_NOEXCEPT_SPEC_P): New.\n\t(enum cp_tree_node_structure_enum): Add TS_CP_DEFERRED_NOEXCEPT.\n\t(union lang_tree_node): Add tree_deferred_noexcept.\n\t(maybe_instantiate_noexcept): Declare.\n\t* cp-objcp-common.c (cp_tree_size): Handle DEFERRED_NOEXCEPT.\n\t* error.c (dump_exception_spec): Likewise.\n\t* cxx-pretty-print.c (pp_cxx_exception_specification): Likewise.\n\t* ptree.c (cxx_print_xnode): Likewise.\n\t* tree.c (cp_tree_equal): Likewise.\n\t* decl.c (cp_tree_node_structure): Likewise.\n\t(duplicate_decls): Call maybe_instantiate_noexcept.\n\t* except.c (build_noexcept_spec): Handle DEFERRED_NOEXCEPT.\n\t(nothrow_spec_p, type_noexcept_p, type_throw_all_p): Check\n\tDEFERRED_NOEXCEPT_SPEC_P.\n\t* typeck2.c (merge_exception_specifiers): Likewise.\n\t* decl2.c (mark_used): Call maybe_instantiate_noexcept.\n\t* method.c (process_subob_fn, defaulted_late_check): Likewise.\n\t* pt.c (tsubst_exception_specification): Add defer_ok parm.\n\tBuild DEFERRED_NOEXCEPT.\n\t(maybe_instantiate_noexcept): New.\n\t(tsubst, regenerate_decl_from_template, instantiate_decl): Adjust.\n\t* search.c (check_final_overrider): Call maybe_instantiate_noexcept.\n\nFrom-SVN: r174820", "tree": {"sha": "ee6f3f833ee964ac09575df2a56cdaf0ded1d159", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee6f3f833ee964ac09575df2a56cdaf0ded1d159"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1026172832d7175b52ee0ddf5ef17d7f5b803e2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1026172832d7175b52ee0ddf5ef17d7f5b803e2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1026172832d7175b52ee0ddf5ef17d7f5b803e2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "535fb6eb200870e582a7f4abf2ea929cfc7e24c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/535fb6eb200870e582a7f4abf2ea929cfc7e24c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/535fb6eb200870e582a7f4abf2ea929cfc7e24c6"}], "stats": {"total": 273, "additions": 253, "deletions": 20}, "files": [{"sha": "2ffefaf15bab4fcac6179695c4a64d345221670e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1026172832d7175b52ee0ddf5ef17d7f5b803e2e", "patch": "@@ -1,5 +1,32 @@\n 2011-06-08  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/49107\n+\t* cp-tree.def (DEFERRED_NOEXCEPT): New.\n+\t* cp-tree.h (struct tree_deferred_noexcept): New.\n+\t(DEFERRED_NOEXCEPT_PATTERN, DEFERRED_NOEXCEPT_ARGS): New.\n+\t(DEFERRED_NOEXCEPT_SPEC_P): New.\n+\t(enum cp_tree_node_structure_enum): Add TS_CP_DEFERRED_NOEXCEPT.\n+\t(union lang_tree_node): Add tree_deferred_noexcept.\n+\t(maybe_instantiate_noexcept): Declare.\n+\t* cp-objcp-common.c (cp_tree_size): Handle DEFERRED_NOEXCEPT.\n+\t* error.c (dump_exception_spec): Likewise.\n+\t* cxx-pretty-print.c (pp_cxx_exception_specification): Likewise.\n+\t* ptree.c (cxx_print_xnode): Likewise.\n+\t* tree.c (cp_tree_equal): Likewise.\n+\t* decl.c (cp_tree_node_structure): Likewise.\n+\t(duplicate_decls): Call maybe_instantiate_noexcept.\n+\t* except.c (build_noexcept_spec): Handle DEFERRED_NOEXCEPT.\n+\t(nothrow_spec_p, type_noexcept_p, type_throw_all_p): Check\n+\tDEFERRED_NOEXCEPT_SPEC_P.\n+\t* typeck2.c (merge_exception_specifiers): Likewise.\n+\t* decl2.c (mark_used): Call maybe_instantiate_noexcept.\n+\t* method.c (process_subob_fn, defaulted_late_check): Likewise.\n+\t* pt.c (tsubst_exception_specification): Add defer_ok parm.\n+\tBuild DEFERRED_NOEXCEPT.\n+\t(maybe_instantiate_noexcept): New.\n+\t(tsubst, regenerate_decl_from_template, instantiate_decl): Adjust.\n+\t* search.c (check_final_overrider): Call maybe_instantiate_noexcept.\n+\n \t* semantics.c (potential_constant_expression_1): Handle destructor\n \tcall.\n "}, {"sha": "1866b81f802fd8cb3e47a560f1d2ede912fb5684", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=1026172832d7175b52ee0ddf5ef17d7f5b803e2e", "patch": "@@ -79,6 +79,7 @@ cp_tree_size (enum tree_code code)\n     case BASELINK:\t\treturn sizeof (struct tree_baselink);\n     case TEMPLATE_PARM_INDEX:\treturn sizeof (template_parm_index);\n     case DEFAULT_ARG:\t\treturn sizeof (struct tree_default_arg);\n+    case DEFERRED_NOEXCEPT:\treturn sizeof (struct tree_deferred_noexcept);\n     case OVERLOAD:\t\treturn sizeof (struct tree_overload);\n     case STATIC_ASSERT:         return sizeof (struct tree_static_assert);\n     case TYPE_ARGUMENT_PACK:"}, {"sha": "ce1141735a7ff25b8fe06584c8e9b7d12537e08b", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=1026172832d7175b52ee0ddf5ef17d7f5b803e2e", "patch": "@@ -214,6 +214,11 @@ DEFTREECODE (USING_STMT, \"using_directive\", tcc_statement, 1)\n    parsing had occurred.  */\n DEFTREECODE (DEFAULT_ARG, \"default_arg\", tcc_exceptional, 0)\n \n+/* An uninstantiated noexcept-specification.  DEFERRED_NOEXCEPT_PATTERN is\n+   the pattern from the template, and DEFERRED_NOEXCEPT_ARGS are the\n+   template arguments to substitute into the pattern when needed.  */\n+DEFTREECODE (DEFERRED_NOEXCEPT, \"deferred_noexcept\", tcc_exceptional, 0)\n+\n /* A template-id, like foo<int>.  The first operand is the template.\n    The second is NULL if there are no explicit arguments, or a\n    TREE_VEC of arguments.  The template will be a FUNCTION_DECL,"}, {"sha": "ce2af0044be5aeffba48c17b9c51b50ec5447217", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1026172832d7175b52ee0ddf5ef17d7f5b803e2e", "patch": "@@ -507,6 +507,22 @@ struct GTY (()) tree_default_arg {\n   VEC(tree,gc) *instantiations;\n };\n \n+\n+#define DEFERRED_NOEXCEPT_PATTERN(NODE) \\\n+  (((struct tree_deferred_noexcept *)DEFERRED_NOEXCEPT_CHECK (NODE))->pattern)\n+#define DEFERRED_NOEXCEPT_ARGS(NODE) \\\n+  (((struct tree_deferred_noexcept *)DEFERRED_NOEXCEPT_CHECK (NODE))->args)\n+#define DEFERRED_NOEXCEPT_SPEC_P(NODE)\t\t\t\t\\\n+  ((NODE) && (TREE_PURPOSE (NODE))\t\t\t\t\\\n+   && TREE_CODE (TREE_PURPOSE (NODE)) == DEFERRED_NOEXCEPT)\n+\n+struct GTY (()) tree_deferred_noexcept {\n+  struct tree_base base;\n+  tree pattern;\n+  tree args;\n+};\n+\n+\n /* The condition associated with the static assertion.  This must be\n    an integral constant expression.  */\n #define STATIC_ASSERT_CONDITION(NODE) \\\n@@ -693,6 +709,7 @@ enum cp_tree_node_structure_enum {\n   TS_CP_BASELINK,\n   TS_CP_WRAPPER,\n   TS_CP_DEFAULT_ARG,\n+  TS_CP_DEFERRED_NOEXCEPT,\n   TS_CP_STATIC_ASSERT,\n   TS_CP_ARGUMENT_PACK_SELECT,\n   TS_CP_TRAIT_EXPR,\n@@ -711,6 +728,7 @@ union GTY((desc (\"cp_tree_node_structure (&%h)\"),\n   struct tree_overload GTY ((tag (\"TS_CP_OVERLOAD\"))) overload;\n   struct tree_baselink GTY ((tag (\"TS_CP_BASELINK\"))) baselink;\n   struct tree_default_arg GTY ((tag (\"TS_CP_DEFAULT_ARG\"))) default_arg;\n+  struct tree_deferred_noexcept GTY ((tag (\"TS_CP_DEFERRED_NOEXCEPT\"))) deferred_noexcept;\n   struct lang_identifier GTY ((tag (\"TS_CP_IDENTIFIER\"))) identifier;\n   struct tree_static_assert GTY ((tag (\"TS_CP_STATIC_ASSERT\"))) \n     static_assertion;\n@@ -5130,6 +5148,7 @@ extern int more_specialized_fn\t\t\t(tree, tree, int);\n extern void do_decl_instantiation\t\t(tree, tree);\n extern void do_type_instantiation\t\t(tree, tree, tsubst_flags_t);\n extern bool always_instantiate_p\t\t(tree);\n+extern void maybe_instantiate_noexcept\t\t(tree);\n extern tree instantiate_decl\t\t\t(tree, int, bool);\n extern int comp_template_parms\t\t\t(const_tree, const_tree);\n extern bool uses_parameter_packs                (tree);"}, {"sha": "c5f1ac02cad75daa42fa740774d679574f383bf0", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=1026172832d7175b52ee0ddf5ef17d7f5b803e2e", "patch": "@@ -1446,7 +1446,10 @@ pp_cxx_exception_specification (cxx_pretty_printer *pp, tree t)\n       pp_cxx_ws_string (pp, \"noexcept\");\n       pp_cxx_whitespace (pp);\n       pp_cxx_left_paren (pp);\n-      pp_cxx_expression (pp, TREE_PURPOSE (ex_spec));\n+      if (DEFERRED_NOEXCEPT_SPEC_P (ex_spec))\n+\tpp_cxx_ws_string (pp, \"<uninstantiated>\");\n+      else\n+\tpp_cxx_expression (pp, TREE_PURPOSE (ex_spec));\n       pp_cxx_right_paren (pp);\n       return;\n     }"}, {"sha": "d7da39081541b47702c6e12bf330b8ca807be50d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1026172832d7175b52ee0ddf5ef17d7f5b803e2e", "patch": "@@ -1784,6 +1784,9 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n       tree oldtype = TREE_TYPE (olddecl);\n       tree newtype;\n \n+      if (TREE_CODE (newdecl) == FUNCTION_DECL)\n+\tmaybe_instantiate_noexcept (olddecl);\n+\n       /* Merge the data types specified in the two decls.  */\n       newtype = merge_types (TREE_TYPE (newdecl), TREE_TYPE (olddecl));\n \n@@ -13665,6 +13668,7 @@ cp_tree_node_structure (union lang_tree_node * t)\n   switch (TREE_CODE (&t->generic))\n     {\n     case DEFAULT_ARG:\t\treturn TS_CP_DEFAULT_ARG;\n+    case DEFERRED_NOEXCEPT:\treturn TS_CP_DEFERRED_NOEXCEPT;\n     case IDENTIFIER_NODE:\treturn TS_CP_IDENTIFIER;\n     case OVERLOAD:\t\treturn TS_CP_OVERLOAD;\n     case TEMPLATE_PARM_INDEX:\treturn TS_CP_TPI;"}, {"sha": "a0512cdcab21f92d896b3363d114b21482f5612f", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=1026172832d7175b52ee0ddf5ef17d7f5b803e2e", "patch": "@@ -4228,6 +4228,9 @@ mark_used (tree decl)\n       return;\n     }\n \n+  if (TREE_CODE (decl) == FUNCTION_DECL)\n+    maybe_instantiate_noexcept (decl);\n+\n   /* Normally, we can wait until instantiation-time to synthesize DECL.\n      However, if DECL is a static data member initialized with a constant\n      or a constexpr function, we need it right now because a reference to"}, {"sha": "96796c206d9f70c78302a64dcc6d70d2be6e9b2a", "filename": "gcc/cp/error.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=1026172832d7175b52ee0ddf5ef17d7f5b803e2e", "patch": "@@ -1438,7 +1438,10 @@ dump_exception_spec (tree t, int flags)\n       pp_cxx_ws_string (cxx_pp, \"noexcept\");\n       pp_cxx_whitespace (cxx_pp);\n       pp_cxx_left_paren (cxx_pp);\n-      dump_expr (TREE_PURPOSE (t), flags);\n+      if (DEFERRED_NOEXCEPT_SPEC_P (t))\n+\tpp_cxx_ws_string (cxx_pp, \"<uninstantiated>\");\n+      else\n+\tdump_expr (TREE_PURPOSE (t), flags);\n       pp_cxx_right_paren (cxx_pp);\n     }\n   else if (t)"}, {"sha": "3399652241f4985a7854edb8bc2dac33a49839c1", "filename": "gcc/cp/except.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=1026172832d7175b52ee0ddf5ef17d7f5b803e2e", "patch": "@@ -1160,6 +1160,7 @@ finish_noexcept_expr (tree expr, tsubst_flags_t complain)\n bool\n nothrow_spec_p (const_tree spec)\n {\n+  gcc_assert (!DEFERRED_NOEXCEPT_SPEC_P (spec));\n   if (spec == NULL_TREE\n       || TREE_VALUE (spec) != NULL_TREE\n       || spec == noexcept_false_spec)\n@@ -1180,6 +1181,7 @@ bool\n type_noexcept_p (const_tree type)\n {\n   tree spec = TYPE_RAISES_EXCEPTIONS (type);\n+  gcc_assert (!DEFERRED_NOEXCEPT_SPEC_P (spec));\n   if (flag_nothrow_opt)\n     return nothrow_spec_p (spec);\n   else\n@@ -1193,6 +1195,7 @@ bool\n type_throw_all_p (const_tree type)\n {\n   tree spec = TYPE_RAISES_EXCEPTIONS (type);\n+  gcc_assert (!DEFERRED_NOEXCEPT_SPEC_P (spec));\n   return spec == NULL_TREE || spec == noexcept_false_spec;\n }\n \n@@ -1204,7 +1207,7 @@ build_noexcept_spec (tree expr, int complain)\n {\n   /* This isn't part of the signature, so don't bother trying to evaluate\n      it until instantiation.  */\n-  if (!processing_template_decl)\n+  if (!processing_template_decl && TREE_CODE (expr) != DEFERRED_NOEXCEPT)\n     {\n       expr = perform_implicit_conversion_flags (boolean_type_node, expr,\n \t\t\t\t\t\tcomplain,\n@@ -1219,7 +1222,8 @@ build_noexcept_spec (tree expr, int complain)\n     return error_mark_node;\n   else\n     {\n-      gcc_assert (processing_template_decl || expr == error_mark_node);\n+      gcc_assert (processing_template_decl || expr == error_mark_node\n+\t\t  || TREE_CODE (expr) == DEFERRED_NOEXCEPT);\n       return build_tree_list (expr, NULL_TREE);\n     }\n }"}, {"sha": "918870056db9d6df9724680f26f96de218118601", "filename": "gcc/cp/method.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=1026172832d7175b52ee0ddf5ef17d7f5b803e2e", "patch": "@@ -923,7 +923,9 @@ process_subob_fn (tree fn, bool move_p, tree *spec_p, bool *trivial_p,\n \n   if (spec_p)\n     {\n-      tree raises = TYPE_RAISES_EXCEPTIONS (TREE_TYPE (fn));\n+      tree raises;\n+      maybe_instantiate_noexcept (fn);\n+      raises = TYPE_RAISES_EXCEPTIONS (TREE_TYPE (fn));\n       *spec_p = merge_exception_specifiers (*spec_p, raises);\n     }\n \n@@ -1558,7 +1560,9 @@ defaulted_late_check (tree fn)\n      it had been implicitly declared.  */\n   if (DECL_DEFAULTED_IN_CLASS_P (fn))\n     {\n-      tree eh_spec = TYPE_RAISES_EXCEPTIONS (TREE_TYPE (implicit_fn));\n+      tree eh_spec;\n+      maybe_instantiate_noexcept (fn);\n+      eh_spec = TYPE_RAISES_EXCEPTIONS (TREE_TYPE (implicit_fn));\n       if (TYPE_RAISES_EXCEPTIONS (TREE_TYPE (fn))\n \t  && !comp_except_specs (TYPE_RAISES_EXCEPTIONS (TREE_TYPE (fn)),\n \t\t\t\t eh_spec, ce_normal))"}, {"sha": "51d590ea566e1f6832f5ae06ea6da68ffd774a3b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 76, "deletions": 7, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1026172832d7175b52ee0ddf5ef17d7f5b803e2e", "patch": "@@ -10342,7 +10342,8 @@ static tree\n tsubst_exception_specification (tree fntype,\n \t\t\t\ttree args,\n \t\t\t\ttsubst_flags_t complain,\n-\t\t\t\ttree in_decl)\n+\t\t\t\ttree in_decl,\n+\t\t\t\tbool defer_ok)\n {\n   tree specs;\n   tree new_specs;\n@@ -10352,9 +10353,33 @@ tsubst_exception_specification (tree fntype,\n   if (specs && TREE_PURPOSE (specs))\n     {\n       /* A noexcept-specifier.  */\n-      new_specs = tsubst_copy_and_build\n-\t(TREE_PURPOSE (specs), args, complain, in_decl, /*function_p=*/false,\n-\t /*integral_constant_expression_p=*/true);\n+      tree expr = TREE_PURPOSE (specs);\n+      if (expr == boolean_true_node || expr == boolean_false_node)\n+\tnew_specs = expr;\n+      else if (defer_ok)\n+\t{\n+\t  /* Defer instantiation of noexcept-specifiers to avoid\n+\t     excessive instantiations (c++/49107).  */\n+\t  new_specs = make_node (DEFERRED_NOEXCEPT);\n+\t  if (DEFERRED_NOEXCEPT_SPEC_P (specs))\n+\t    {\n+\t      /* We already partially instantiated this member template,\n+\t\t so combine the new args with the old.  */\n+\t      DEFERRED_NOEXCEPT_PATTERN (new_specs)\n+\t\t= DEFERRED_NOEXCEPT_PATTERN (expr);\n+\t      DEFERRED_NOEXCEPT_ARGS (new_specs)\n+\t\t= add_to_template_args (DEFERRED_NOEXCEPT_ARGS (expr), args);\n+\t    }\n+\t  else\n+\t    {\n+\t      DEFERRED_NOEXCEPT_PATTERN (new_specs) = expr;\n+\t      DEFERRED_NOEXCEPT_ARGS (new_specs) = args;\n+\t    }\n+\t}\n+      else\n+\tnew_specs = tsubst_copy_and_build\n+\t  (expr, args, complain, in_decl, /*function_p=*/false,\n+\t   /*integral_constant_expression_p=*/true);\n       new_specs = build_noexcept_spec (new_specs, complain);\n     }\n   else if (specs)\n@@ -10879,7 +10904,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \n \t/* Substitute the exception specification.  */\n \tspecs = tsubst_exception_specification (t, args, complain,\n-\t\t\t\t\t\tin_decl);\n+\t\t\t\t\t\tin_decl, /*defer_ok*/true);\n \tif (specs == error_mark_node)\n \t  return error_mark_node;\n \tif (specs)\n@@ -17159,7 +17184,8 @@ regenerate_decl_from_template (tree decl, tree tmpl)\n \targs = get_innermost_template_args (args, parms_depth);\n \n       specs = tsubst_exception_specification (TREE_TYPE (code_pattern),\n-\t\t\t\t\t      args, tf_error, NULL_TREE);\n+\t\t\t\t\t      args, tf_error, NULL_TREE,\n+\t\t\t\t\t      /*defer_ok*/false);\n       if (specs)\n \tTREE_TYPE (decl) = build_exception_variant (TREE_TYPE (decl),\n \t\t\t\t\t\t    specs);\n@@ -17324,6 +17350,46 @@ always_instantiate_p (tree decl)\n \t      && decl_maybe_constant_var_p (decl)));\n }\n \n+/* If FN has a noexcept-specifier that hasn't been instantiated yet,\n+   instantiate it now, modifying TREE_TYPE (fn).  */\n+\n+void\n+maybe_instantiate_noexcept (tree fn)\n+{\n+  tree fntype = TREE_TYPE (fn);\n+  tree spec = TYPE_RAISES_EXCEPTIONS (fntype);\n+  tree noex = NULL_TREE;\n+  location_t saved_loc = input_location;\n+  tree clone;\n+\n+  if (!DEFERRED_NOEXCEPT_SPEC_P (spec))\n+    return;\n+  noex = TREE_PURPOSE (spec);\n+\n+  push_tinst_level (fn);\n+  push_access_scope (fn);\n+  input_location = DECL_SOURCE_LOCATION (fn);\n+  noex = tsubst_copy_and_build (DEFERRED_NOEXCEPT_PATTERN (noex),\n+\t\t\t\tDEFERRED_NOEXCEPT_ARGS (noex),\n+\t\t\t\ttf_warning_or_error, fn, /*function_p=*/false,\n+\t\t\t\t/*integral_constant_expression_p=*/true);\n+  input_location = saved_loc;\n+  pop_access_scope (fn);\n+  pop_tinst_level ();\n+  spec = build_noexcept_spec (noex, tf_warning_or_error);\n+  if (spec == error_mark_node)\n+    spec = noexcept_false_spec;\n+  TREE_TYPE (fn) = build_exception_variant (fntype, spec);\n+\n+  FOR_EACH_CLONE (clone, fn)\n+    {\n+      if (TREE_TYPE (clone) == fntype)\n+\tTREE_TYPE (clone) = TREE_TYPE (fn);\n+      else\n+\tTREE_TYPE (clone) = build_exception_variant (TREE_TYPE (clone), spec);\n+    }\n+}\n+\n /* Produce the definition of D, a _DECL generated from a template.  If\n    DEFER_OK is nonzero, then we don't have to actually do the\n    instantiation now; we just have to do it sometime.  Normally it is\n@@ -17460,6 +17526,9 @@ instantiate_decl (tree d, int defer_ok,\n       SET_DECL_IMPLICIT_INSTANTIATION (d);\n     }\n \n+  if (TREE_CODE (d) == FUNCTION_DECL)\n+    maybe_instantiate_noexcept (d);\n+\n   /* Recheck the substitutions to obtain any warning messages\n      about ignoring cv qualifiers.  Don't do this for artificial decls,\n      as it breaks the context-sensitive substitution for lambda op(). */\n@@ -17477,7 +17546,7 @@ instantiate_decl (tree d, int defer_ok,\n \t{\n \t  tsubst (DECL_ARGUMENTS (gen), gen_args, tf_warning_or_error, d);\n           tsubst_exception_specification (type, gen_args, tf_warning_or_error,\n-                                          d);\n+                                          d, /*defer_ok*/true);\n \t  /* Don't simply tsubst the function type, as that will give\n \t     duplicate warnings about poor parameter qualifications.\n \t     The function arguments are the same as the decl_arguments"}, {"sha": "fb05e13604506414f3928b25c60c34e2588e5bdd", "filename": "gcc/cp/ptree.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Fcp%2Fptree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Fcp%2Fptree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fptree.c?ref=1026172832d7175b52ee0ddf5ef17d7f5b803e2e", "patch": "@@ -227,6 +227,10 @@ cxx_print_xnode (FILE *file, tree node, int indent)\n       indent_to (file, indent + 3);\n       fprintf (file, \"index %d\", ARGUMENT_PACK_SELECT_INDEX (node));\n       break;\n+    case DEFERRED_NOEXCEPT:\n+      print_node (file, \"pattern\", DEFERRED_NOEXCEPT_PATTERN (node), indent+4);\n+      print_node (file, \"args\", DEFERRED_NOEXCEPT_ARGS (node), indent+4);\n+      break;\n     default:\n       break;\n     }"}, {"sha": "97f593cfb392fcd2210c345676c6d32704d49291", "filename": "gcc/cp/search.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=1026172832d7175b52ee0ddf5ef17d7f5b803e2e", "patch": "@@ -1803,8 +1803,8 @@ check_final_overrider (tree overrider, tree basefn)\n   tree base_type = TREE_TYPE (basefn);\n   tree over_return = TREE_TYPE (over_type);\n   tree base_return = TREE_TYPE (base_type);\n-  tree over_throw = TYPE_RAISES_EXCEPTIONS (over_type);\n-  tree base_throw = TYPE_RAISES_EXCEPTIONS (base_type);\n+  tree over_throw, base_throw;\n+\n   int fail = 0;\n \n   if (DECL_INVALID_OVERRIDER_P (overrider))\n@@ -1888,6 +1888,11 @@ check_final_overrider (tree overrider, tree basefn)\n     }\n \n   /* Check throw specifier is at least as strict.  */\n+  maybe_instantiate_noexcept (basefn);\n+  maybe_instantiate_noexcept (overrider);\n+  base_throw = TYPE_RAISES_EXCEPTIONS (TREE_TYPE (basefn));\n+  over_throw = TYPE_RAISES_EXCEPTIONS (TREE_TYPE (overrider));\n+\n   if (!comp_except_specs (base_throw, over_throw, ce_derived))\n     {\n       error (\"looser throw specifier for %q+#F\", overrider);"}, {"sha": "5b988e9e0a1c7eee6af02e6c08e7149468e41f29", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=1026172832d7175b52ee0ddf5ef17d7f5b803e2e", "patch": "@@ -2340,6 +2340,13 @@ cp_tree_equal (tree t1, tree t2)\n       /* Now compare operands as usual.  */\n       break;\n \n+    case DEFERRED_NOEXCEPT:\n+      return (cp_tree_equal (DEFERRED_NOEXCEPT_PATTERN (t1),\n+\t\t\t     DEFERRED_NOEXCEPT_PATTERN (t2))\n+\t      && comp_template_args (DEFERRED_NOEXCEPT_ARGS (t1),\n+\t\t\t\t     DEFERRED_NOEXCEPT_ARGS (t2)));\n+      break;\n+\n     default:\n       break;\n     }"}, {"sha": "f291393d9c8b9b3adeeaf65aae2c41a872436592", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=1026172832d7175b52ee0ddf5ef17d7f5b803e2e", "patch": "@@ -1769,10 +1769,15 @@ merge_exception_specifiers (tree list, tree add)\n     return list;\n   else if (!add || add == noexcept_false_spec)\n     return add;\n+\n+  /* We need to instantiate deferred noexcept before we get here.  */\n+  gcc_assert (!DEFERRED_NOEXCEPT_SPEC_P (list)\n+\t      && !DEFERRED_NOEXCEPT_SPEC_P (add));\n+\n   /* For merging noexcept(true) and throw(), take the more recent one (LIST).\n      Any other noexcept-spec should only be merged with an equivalent one.\n      So the !TREE_VALUE code below is correct for all cases.  */\n-  else if (!TREE_VALUE (add))\n+  if (!TREE_VALUE (add))\n     return list;\n   else if (!TREE_VALUE (list))\n     return add;"}, {"sha": "465d22a3d596f6ca2537911efca1b8d6d7edd54a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1026172832d7175b52ee0ddf5ef17d7f5b803e2e", "patch": "@@ -1,3 +1,9 @@\n+2011-06-08  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/noexcept11.C: New.\n+\t* g++.dg/cpp0x/noexcept12.C: New.\n+\t* g++.dg/cpp0x/sfinae11.C: Adjust.\n+\n 2011-06-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR testsuite/49323"}, {"sha": "b7c64a6ef06aa40232c701d9fde6e541ed873192", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept11.C", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept11.C?ref=1026172832d7175b52ee0ddf5ef17d7f5b803e2e", "patch": "@@ -0,0 +1,53 @@\n+// PR c++/49107\n+// { dg-options -std=c++0x }\n+\n+template<typename _Tp>\n+_Tp declval() noexcept;\n+\n+template<typename _Tp , typename = decltype(_Tp(declval<_Tp&&>()))>\n+struct trait\n+{\n+  static const bool value=true;\n+};\n+\n+template<class _T2>\n+struct pair\n+{\n+  _T2 second;\n+  void swap(pair& __p)\n+    noexcept(trait<_T2>::value);\n+};\n+\n+template < class R_ >\n+struct Main\n+{\n+  Main() {}\n+  Main(const typename R_::Sub1T& r) ;\n+  Main(const typename R_::Sub2T& l) ;\n+};\n+\n+template < class R_ >\n+class Sub1\n+{\n+  typedef pair<typename R_::MainT> Rep;\n+  Rep base;\n+};\n+\n+template < class R_ >\n+struct Sub2\n+{\n+  typedef pair<typename R_::MainT> Rep;\n+  Rep base;\n+};\n+\n+struct Kernel\n+{\n+  typedef Main<Kernel> MainT;\n+  typedef Sub1<Kernel> Sub1T;\n+  typedef Sub2<Kernel> Sub2T;\n+};\n+\n+Main<Kernel> f()\n+{\n+  return Main<Kernel> ();\n+}"}, {"sha": "1fd1b032f4cdace35b2a4fb204eda83c5cd2c93a", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept12.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept12.C?ref=1026172832d7175b52ee0ddf5ef17d7f5b803e2e", "patch": "@@ -0,0 +1,11 @@\n+// Test that we handle merging with deferred noexcept.\n+// { dg-options -std=c++0x }\n+\n+template <class U>\n+struct O\n+{\n+  template <class T>\n+  void f() noexcept(noexcept(T()));\n+};\n+\n+template<> template<> void O<int>::f<int>() noexcept { }"}, {"sha": "117b08bb623dec3bc150449f5c3006648e6e2782", "filename": "gcc/testsuite/g++.dg/cpp0x/sfinae11.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1026172832d7175b52ee0ddf5ef17d7f5b803e2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae11.C?ref=1026172832d7175b52ee0ddf5ef17d7f5b803e2e", "patch": "@@ -6,7 +6,7 @@ template<class T>\n T&& declval() noexcept;\n \n template< class T >\n-inline void f1( T& x ) noexcept( noexcept( declval<T&>().foo() ) )\n+inline void f1( T& x ) noexcept( noexcept( declval<T&>().foo() ) ) // { dg-error \"Z\" }\n {\n   x.foo();\n }\n@@ -21,7 +21,7 @@ inline void f2( T& x ) noexcept( Noexcept )\n \n // a common and trivial mistake\n template< class T >\n-inline void f3( T& x ) noexcept( declval<T&>().foo() )\n+inline void f3( T& x ) noexcept( declval<T&>().foo() ) // { dg-error \"Z\" }\n {\n   x.foo();\n }\n@@ -50,7 +50,7 @@ int main()\n   static_assert(  noexcept( f2(y) ), \"OK.\" );\n   // static_assert(  noexcept( f3(y) ), \"shall be ill-formed(OK).\" );\n \n-  static_assert(  noexcept( f1(z) ), \"shall be ill-formed.\" ); // { dg-error \"no match\" }\n+  noexcept( f1(z) );\t\t// { dg-message \"required\" }\n   static_assert(  noexcept( f2(z) ), \"shall be ill-formed.\" ); // { dg-error \"no match\" }\n-  static_assert( !noexcept( f3(z) ), \"shall be ill-formed.\" ); // { dg-error \"no match\" }\n+  noexcept( f3(z) );\t\t// { dg-message \"required\" }\n }"}]}