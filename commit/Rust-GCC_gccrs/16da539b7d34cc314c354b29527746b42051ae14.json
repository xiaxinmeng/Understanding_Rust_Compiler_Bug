{"sha": "16da539b7d34cc314c354b29527746b42051ae14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZkYTUzOWI3ZDM0Y2MzMTRjMzU0YjI5NTI3NzQ2YjQyMDUxYWUxNA==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2003-06-09T14:54:08Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2003-06-09T14:54:08Z"}, "message": "acinclude.m4: Move all AM_CONDITIONAL calls out.\n\n2003-06-09  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* acinclude.m4:  Move all AM_CONDITIONAL calls out.\n\t(GLIBCPP_CONFIGURE):  Set defaults for variables used in AM_CONDITIONAL\n\tstatements.\n\t* configure.in:  Centralize AM_CONDITIONALs so that they are always\n\trun.  Make use of GLIBCPP_IS_CROSS_COMPILING.\n\t* aclocal.m4, configure:  Regenerated.\n\nFrom-SVN: r67663", "tree": {"sha": "b0528c1cf7bf63f9ca2c6098a52a345bf4217e73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0528c1cf7bf63f9ca2c6098a52a345bf4217e73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16da539b7d34cc314c354b29527746b42051ae14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16da539b7d34cc314c354b29527746b42051ae14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16da539b7d34cc314c354b29527746b42051ae14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16da539b7d34cc314c354b29527746b42051ae14/comments", "author": null, "committer": null, "parents": [{"sha": "36f04556d6bf6b8c272065bab473e354e8540ca9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36f04556d6bf6b8c272065bab473e354e8540ca9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36f04556d6bf6b8c272065bab473e354e8540ca9"}], "stats": {"total": 2777, "additions": 1352, "deletions": 1425}, "files": [{"sha": "4cd34f6b8ccfb9a6cef4318246466c91fb16fc26", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16da539b7d34cc314c354b29527746b42051ae14/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16da539b7d34cc314c354b29527746b42051ae14/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=16da539b7d34cc314c354b29527746b42051ae14", "patch": "@@ -1,3 +1,12 @@\n+2003-06-09  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* acinclude.m4:  Move all AM_CONDITIONAL calls out.\n+\t(GLIBCPP_CONFIGURE):  Set defaults for variables used in AM_CONDITIONAL\n+\tstatements.\n+\t* configure.in:  Centralize AM_CONDITIONALs so that they are always\n+\trun.  Make use of GLIBCPP_IS_CROSS_COMPILING.\n+\t* aclocal.m4, configure:  Regenerated.\n+\n 2003-06-09  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* docs/html/ext/howto.html ('LWG Issues'):  Add issue 235."}, {"sha": "cf9413a2f31aa18a71e93d7f485c76f6c89d7cf7", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16da539b7d34cc314c354b29527746b42051ae14/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16da539b7d34cc314c354b29527746b42051ae14/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=16da539b7d34cc314c354b29527746b42051ae14", "patch": "@@ -202,6 +202,18 @@ AC_DEFUN(GLIBCPP_CONFIGURE, [\n     *) glibcpp_flagbasedir='[$](top_builddir)/'[$]{glibcpp_basedir} ;;\n   esac\n \n+  # Set up safe default values for all subsequent AM_CONDITIONAL tests.\n+  need_libmath=no\n+  enable_wchar_t=no\n+  #enable_debug=no\n+  #need_libio=no\n+  #need_wlibio=no\n+  #glibcpp_pch_comp=no\n+  #enable_cheaders=c\n+  #c_compatibility=no\n+  enable_abi_check=no\n+  #enable_symvers=no\n+\n   # Find platform-specific directories containing configuration info.  In\n   # addition to possibly modifying the same flags, it also sets up symlinks.\n   GLIBCPP_CHECK_HOST\n@@ -849,7 +861,9 @@ dnl Define USE_COMPLEX_LONG_DOUBLE etc if \"copysignl\" is found.\n dnl\n dnl GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n-  dnl Check for complex versions of math functions of platform.\n+  dnl Check for complex versions of math functions of platform.  This will\n+  dnl always pass if libm is available, and fail if it isn't.  If it is\n+  dnl available, we assume we'll need it later, so add it to LIBS.\n   AC_CHECK_LIB(m, main)\n   AC_REPLACE_MATHFUNCS(nan copysignf)\n \n@@ -869,7 +883,6 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n     need_libmath=yes\n   fi\n   AC_SUBST(LIBMATHOBJS)\n-  AM_CONDITIONAL(GLIBCPP_BUILD_LIBMATH,  test \"$need_libmath\" = yes)\n ])\n \n \n@@ -896,7 +909,6 @@ dnl\n dnl GLIBCPP_CHECK_WCHAR_T_SUPPORT\n AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n   dnl Wide characters disabled by default.\n-  enable_wchar_t=no\n \n   dnl Test wchar.h for mbstate_t, which is needed for char_traits and\n   dnl others even if wchar_t support is not on.\n@@ -995,7 +1007,6 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n   fi\n   AC_MSG_CHECKING([for enabled wchar_t specializations])\n   AC_MSG_RESULT($enable_wchar_t)\t\n-  AM_CONDITIONAL(GLIBCPP_TEST_WCHAR_T, test \"$enable_wchar_t\" = yes)\t\n ])\n \n \n@@ -2132,15 +2143,11 @@ AC_DEFUN(GLIBCPP_CONFIGURE_TESTSUITE, [\n   baseline_file=\"${glibcpp_srcdir}/config/abi/${abi_baseline_triplet}/baseline_symbols.txt\"\n   AC_SUBST(baseline_file)\n \n+  dnl XXX move to configure.host?\n   case \"$target\" in\n     *-*-cygwin* ) enable_abi_check=no ;;\n     * ) enable_abi_check=yes ;;\n   esac\n-\n-  # Don't do ABI checking unless native.\n-  AM_CONDITIONAL(GLIBCPP_BUILD_ABI_CHECK,\n-                 test x\"$build\" = x\"$host\" && test -z \"$with_cross_host\" \\\n-\t\t && test \"$enable_abi_check\" = yes )\n ])\n \n "}, {"sha": "9671ead695f6df471209e8fad23b7b4acc176adc", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16da539b7d34cc314c354b29527746b42051ae14/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16da539b7d34cc314c354b29527746b42051ae14/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=16da539b7d34cc314c354b29527746b42051ae14", "patch": "@@ -214,6 +214,18 @@ AC_DEFUN(GLIBCPP_CONFIGURE, [\n     *) glibcpp_flagbasedir='[$](top_builddir)/'[$]{glibcpp_basedir} ;;\n   esac\n \n+  # Set up safe default values for all subsequent AM_CONDITIONAL tests.\n+  need_libmath=no\n+  enable_wchar_t=no\n+  #enable_debug=no\n+  #need_libio=no\n+  #need_wlibio=no\n+  #glibcpp_pch_comp=no\n+  #enable_cheaders=c\n+  #c_compatibility=no\n+  enable_abi_check=no\n+  #enable_symvers=no\n+\n   # Find platform-specific directories containing configuration info.  In\n   # addition to possibly modifying the same flags, it also sets up symlinks.\n   GLIBCPP_CHECK_HOST\n@@ -861,7 +873,9 @@ dnl Define USE_COMPLEX_LONG_DOUBLE etc if \"copysignl\" is found.\n dnl\n dnl GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n-  dnl Check for complex versions of math functions of platform.\n+  dnl Check for complex versions of math functions of platform.  This will\n+  dnl always pass if libm is available, and fail if it isn't.  If it is\n+  dnl available, we assume we'll need it later, so add it to LIBS.\n   AC_CHECK_LIB(m, main)\n   AC_REPLACE_MATHFUNCS(nan copysignf)\n \n@@ -881,7 +895,6 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n     need_libmath=yes\n   fi\n   AC_SUBST(LIBMATHOBJS)\n-  AM_CONDITIONAL(GLIBCPP_BUILD_LIBMATH,  test \"$need_libmath\" = yes)\n ])\n \n \n@@ -908,7 +921,6 @@ dnl\n dnl GLIBCPP_CHECK_WCHAR_T_SUPPORT\n AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n   dnl Wide characters disabled by default.\n-  enable_wchar_t=no\n \n   dnl Test wchar.h for mbstate_t, which is needed for char_traits and\n   dnl others even if wchar_t support is not on.\n@@ -1007,7 +1019,6 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n   fi\n   AC_MSG_CHECKING([for enabled wchar_t specializations])\n   AC_MSG_RESULT($enable_wchar_t)\t\n-  AM_CONDITIONAL(GLIBCPP_TEST_WCHAR_T, test \"$enable_wchar_t\" = yes)\t\n ])\n \n \n@@ -2144,15 +2155,11 @@ AC_DEFUN(GLIBCPP_CONFIGURE_TESTSUITE, [\n   baseline_file=\"${glibcpp_srcdir}/config/abi/${abi_baseline_triplet}/baseline_symbols.txt\"\n   AC_SUBST(baseline_file)\n \n+  dnl XXX move to configure.host?\n   case \"$target\" in\n     *-*-cygwin* ) enable_abi_check=no ;;\n     * ) enable_abi_check=yes ;;\n   esac\n-\n-  # Don't do ABI checking unless native.\n-  AM_CONDITIONAL(GLIBCPP_BUILD_ABI_CHECK,\n-                 test x\"$build\" = x\"$host\" && test -z \"$with_cross_host\" \\\n-\t\t && test \"$enable_abi_check\" = yes )\n ])\n \n "}, {"sha": "fb13010affa8c309cdb595263becd31f6046889c", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1299, "deletions": 1403, "changes": 2702, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16da539b7d34cc314c354b29527746b42051ae14/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16da539b7d34cc314c354b29527746b42051ae14/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=16da539b7d34cc314c354b29527746b42051ae14"}, {"sha": "116527362660c9aa1890c5e8369b89c127d91d3e", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16da539b7d34cc314c354b29527746b42051ae14/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16da539b7d34cc314c354b29527746b42051ae14/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=16da539b7d34cc314c354b29527746b42051ae14", "patch": "@@ -81,7 +81,7 @@ fi\n if test x\"$build\" != x\"$host\"; then\n \n   # We are being configured with some form of cross compiler.\n-  GLIBCPP_IS_CROSS_COMPILING=1\n+  GLIBCPP_IS_CROSS_COMPILING=true\n \n   # This lets us hard-code the functionality we know we'll have in the cross\n   # target environment.  \"Let\" is a sugar-coated word placed on an especially\n@@ -401,7 +401,7 @@ else\n   # We are being configured natively. We can do more elaborate tests\n   # that include AC_TRY_COMPILE now, as the linker is assumed to be\n   # working.\n-  GLIBCPP_IS_CROSS_COMPILING=0\n+  GLIBCPP_IS_CROSS_COMPILING=false\n   CANADIAN=no\n \n   # Check for available headers.\n@@ -447,9 +447,17 @@ ATOMICITY_INC_SRCDIR=config/${ATOMICITYH}\n AC_SUBST(OS_INC_SRCDIR)\n AC_SUBST(ATOMICITY_INC_SRCDIR)\n \n-# Set up cross-compile flags\n-AC_SUBST(GLIBCPP_IS_CROSS_COMPILING)  dnl Unused so far.\n+# Set up cross-compile flags and all AM_CONDITIONALs.\n+AC_SUBST(GLIBCPP_IS_CROSS_COMPILING)\n AM_CONDITIONAL(CANADIAN, test \"$CANADIAN\" = yes)\n+dnl from GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT:\n+AM_CONDITIONAL(GLIBCPP_BUILD_LIBMATH,  test \"$need_libmath\" = yes)\n+dnl from GLIBCPP_CHECK_WCHAR_T_SUPPORT:\n+AM_CONDITIONAL(GLIBCPP_TEST_WCHAR_T, test \"$enable_wchar_t\" = yes)\t\n+dnl from GLIBCPP_CONFIGURE_TESTSUITE:\n+# Don't do ABI checking unless native.\n+AM_CONDITIONAL(GLIBCPP_BUILD_ABI_CHECK,\n+               ${GLIBCPP_IS_CROSS_COMPILING} && test \"$enable_abi_check\" = yes )\n  \n AC_CACHE_SAVE\n "}]}