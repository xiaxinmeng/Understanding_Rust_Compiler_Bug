{"sha": "f8ff69ea9a57722ddf980ea9834682c2137ea8db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhmZjY5ZWE5YTU3NzIyZGRmOTgwZWE5ODM0NjgyYzIxMzdlYThkYg==", "commit": {"author": {"name": "Lee Millward", "email": "lee.millward@gmail.com", "date": "2007-08-02T17:50:55Z"}, "committer": {"name": "Lee Millward", "email": "lmillward@gcc.gnu.org", "date": "2007-08-02T17:50:55Z"}, "message": "re PR c++/30849 (ICE with invalid asm statement)\n\n\tPR c++/30849\n\tPR c++/30850\n\tPR c++/30851\n\t* parser.c (cp_parser_asm_definition): Detect and discard asm\n\tstatements with invalid inputs or outputs.\n        (cp_parser_asm_operand_list): Return error mark node if any\n        of the operands are invalid. Adjust documentation.\n\n\tPR c++/30849\n\t* g++.dg/parse/asm1.C: New test.\n\n\tPR c++/30850\n\t* g++.dg/parse/asm2.C: Likewise.\n\n\tPR c++/30851\n\t* g++.dg/parse/asm3.C: Likewise.\n\nFrom-SVN: r127167", "tree": {"sha": "82375a521dcc73acb141e68c2640f8efff29abdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82375a521dcc73acb141e68c2640f8efff29abdb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8ff69ea9a57722ddf980ea9834682c2137ea8db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8ff69ea9a57722ddf980ea9834682c2137ea8db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8ff69ea9a57722ddf980ea9834682c2137ea8db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8ff69ea9a57722ddf980ea9834682c2137ea8db/comments", "author": {"login": "lee-m", "id": 1028098, "node_id": "MDQ6VXNlcjEwMjgwOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1028098?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lee-m", "html_url": "https://github.com/lee-m", "followers_url": "https://api.github.com/users/lee-m/followers", "following_url": "https://api.github.com/users/lee-m/following{/other_user}", "gists_url": "https://api.github.com/users/lee-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/lee-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lee-m/subscriptions", "organizations_url": "https://api.github.com/users/lee-m/orgs", "repos_url": "https://api.github.com/users/lee-m/repos", "events_url": "https://api.github.com/users/lee-m/events{/privacy}", "received_events_url": "https://api.github.com/users/lee-m/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ee0c1fb57b65ecef76c0fb14c9d05c4fbec2980", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ee0c1fb57b65ecef76c0fb14c9d05c4fbec2980", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ee0c1fb57b65ecef76c0fb14c9d05c4fbec2980"}], "stats": {"total": 86, "additions": 72, "deletions": 14}, "files": [{"sha": "26edb7dfdcff71309c4693f16497f359c5df6ca6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ff69ea9a57722ddf980ea9834682c2137ea8db/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ff69ea9a57722ddf980ea9834682c2137ea8db/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f8ff69ea9a57722ddf980ea9834682c2137ea8db", "patch": "@@ -1,3 +1,14 @@\n+\n+2007-08-02  Lee Millward  <lee.millward@gmail.com>\n+\n+\tPR c++/30849\n+\tPR c++/30850\n+\tPR c++/30851\n+\t* parser.c (cp_parser_asm_definition): Detect and discard asm\n+\tstatements with invalid inputs or outputs.\n+        (cp_parser_asm_operand_list): Return error mark node if any\n+        of the operands are invalid. Adjust documentation.\n+\t\n 2007-08-02  Nick Clifton  <nickc@redhat.com>\n \n \t* typeck.c: Change copyright header to refer to version 3 of the"}, {"sha": "530ddbae8a2a7985287d86bc07c7669d58f2d0e5", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 32, "deletions": 14, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ff69ea9a57722ddf980ea9834682c2137ea8db/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ff69ea9a57722ddf980ea9834682c2137ea8db/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=f8ff69ea9a57722ddf980ea9834682c2137ea8db", "patch": "@@ -11755,6 +11755,8 @@ cp_parser_asm_definition (cp_parser* parser)\n   tree asm_stmt;\n   bool volatile_p = false;\n   bool extended_p = false;\n+  bool invalid_inputs_p = false;\n+  bool invalid_outputs_p = false;\n \n   /* Look for the `asm' keyword.  */\n   cp_parser_require_keyword (parser, RID_ASM, \"`asm'\");\n@@ -11808,6 +11810,9 @@ cp_parser_asm_definition (cp_parser* parser)\n \t      && cp_lexer_next_token_is_not (parser->lexer,\n \t\t\t\t\t     CPP_CLOSE_PAREN))\n \t    outputs = cp_parser_asm_operand_list (parser);\n+\n+\t    if (outputs == error_mark_node)\n+\t      invalid_outputs_p = true;\n \t}\n       /* If the next token is `::', there are no outputs, and the\n \t next token is the beginning of the inputs.  */\n@@ -11827,6 +11832,9 @@ cp_parser_asm_definition (cp_parser* parser)\n \t      && cp_lexer_next_token_is_not (parser->lexer,\n \t\t\t\t\t     CPP_CLOSE_PAREN))\n \t    inputs = cp_parser_asm_operand_list (parser);\n+\n+\t    if (inputs == error_mark_node)\n+\t      invalid_inputs_p = true;\n \t}\n       else if (cp_lexer_next_token_is (parser->lexer, CPP_SCOPE))\n \t/* The clobbers are coming next.  */\n@@ -11850,23 +11858,26 @@ cp_parser_asm_definition (cp_parser* parser)\n \t\t\t\t\t   /*consume_paren=*/true);\n   cp_parser_require (parser, CPP_SEMICOLON, \"`;'\");\n \n-  /* Create the ASM_EXPR.  */\n-  if (parser->in_function_body)\n+  if (!invalid_inputs_p && !invalid_outputs_p)\n     {\n-      asm_stmt = finish_asm_stmt (volatile_p, string, outputs,\n-\t\t\t\t  inputs, clobbers);\n-      /* If the extended syntax was not used, mark the ASM_EXPR.  */\n-      if (!extended_p)\n+      /* Create the ASM_EXPR.  */\n+      if (parser->in_function_body)\n \t{\n-\t  tree temp = asm_stmt;\n-\t  if (TREE_CODE (temp) == CLEANUP_POINT_EXPR)\n-\t    temp = TREE_OPERAND (temp, 0);\n+\t  asm_stmt = finish_asm_stmt (volatile_p, string, outputs,\n+\t\t\t\t      inputs, clobbers);\n+\t  /* If the extended syntax was not used, mark the ASM_EXPR.  */\n+\t  if (!extended_p)\n+\t    {\n+\t      tree temp = asm_stmt;\n+\t      if (TREE_CODE (temp) == CLEANUP_POINT_EXPR)\n+\t\ttemp = TREE_OPERAND (temp, 0);\n \n-\t  ASM_INPUT_P (temp) = 1;\n+\t      ASM_INPUT_P (temp) = 1;\n+\t    }\n \t}\n+      else\n+\tcgraph_add_asm_node (string);\n     }\n-  else\n-    cgraph_add_asm_node (string);\n }\n \n /* Declarators [gram.dcl.decl] */\n@@ -15645,12 +15656,14 @@ cp_parser_asm_specification_opt (cp_parser* parser)\n    each node is the expression.  The TREE_PURPOSE is itself a\n    TREE_LIST whose TREE_PURPOSE is a STRING_CST for the bracketed\n    string-literal (or NULL_TREE if not present) and whose TREE_VALUE\n-   is a STRING_CST for the string literal before the parenthesis.  */\n+   is a STRING_CST for the string literal before the parenthesis. Returns\n+   ERROR_MARK_NODE if any of the operands are invalid.  */\n \n static tree\n cp_parser_asm_operand_list (cp_parser* parser)\n {\n   tree asm_operands = NULL_TREE;\n+  bool invalid_operands = false;\n \n   while (true)\n     {\n@@ -15682,6 +15695,11 @@ cp_parser_asm_operand_list (cp_parser* parser)\n       /* Look for the `)'.  */\n       cp_parser_require (parser, CPP_CLOSE_PAREN, \"`)'\");\n \n+      if (name == error_mark_node \n+\t  || string_literal == error_mark_node \n+\t  || expression == error_mark_node)\n+        invalid_operands = true;\n+\n       /* Add this operand to the list.  */\n       asm_operands = tree_cons (build_tree_list (name, string_literal),\n \t\t\t\texpression,\n@@ -15694,7 +15712,7 @@ cp_parser_asm_operand_list (cp_parser* parser)\n       cp_lexer_consume_token (parser->lexer);\n     }\n \n-  return nreverse (asm_operands);\n+  return invalid_operands ? error_mark_node : nreverse (asm_operands);\n }\n \n /* Parse an asm-clobber-list."}, {"sha": "07d751b5d7ae1f23a796243a92f6fa443e91c4f6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ff69ea9a57722ddf980ea9834682c2137ea8db/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ff69ea9a57722ddf980ea9834682c2137ea8db/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f8ff69ea9a57722ddf980ea9834682c2137ea8db", "patch": "@@ -1,3 +1,14 @@\n+2007-08-02  Lee Millward  <lee.millward@gmail.com>\n+\n+\tPR c++/30849\n+\t* g++.dg/parse/asm1.C: New test.\n+\n+\tPR c++/30850\n+\t* g++.dg/parse/asm2.C: Likewise.\n+\n+\tPR c++/30851\n+\t* g++.dg/parse/asm3.C: Likewise.\n+\t\n 2007-08-02  Rask Ingemann Lambertsen  <rask@sygehus.dk>\n \n \t* gcc.dg/tree-ssa/gen-vect-2.c: Use \"char\" for vector elements if"}, {"sha": "009ffbd3ad3534982a95a36a1506df0d03b5abb3", "filename": "gcc/testsuite/g++.dg/parse/asm1.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ff69ea9a57722ddf980ea9834682c2137ea8db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fasm1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ff69ea9a57722ddf980ea9834682c2137ea8db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fasm1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fasm1.C?ref=f8ff69ea9a57722ddf980ea9834682c2137ea8db", "patch": "@@ -0,0 +1,6 @@\n+//PR c++/30849\n+\n+void foo()\n+{\n+  asm(\"\" : 0);  // { dg-error \"numeric constant|token\" }\n+}"}, {"sha": "09924c9c7c31a9656f3b5592cf8b9ebbf78e4a7a", "filename": "gcc/testsuite/g++.dg/parse/asm2.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ff69ea9a57722ddf980ea9834682c2137ea8db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fasm2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ff69ea9a57722ddf980ea9834682c2137ea8db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fasm2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fasm2.C?ref=f8ff69ea9a57722ddf980ea9834682c2137ea8db", "patch": "@@ -0,0 +1,6 @@\n+//PR c++/30850\n+\n+void foo()\n+{\n+  asm(\"\" :: 0);  // { dg-error \"numeric constant|token\" }\n+}"}, {"sha": "91f19e48cd5a180c49c7622daefbc39942377b32", "filename": "gcc/testsuite/g++.dg/parse/asm3.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ff69ea9a57722ddf980ea9834682c2137ea8db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fasm3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ff69ea9a57722ddf980ea9834682c2137ea8db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fasm3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fasm3.C?ref=f8ff69ea9a57722ddf980ea9834682c2137ea8db", "patch": "@@ -0,0 +1,6 @@\n+//PR c++/30851\n+\n+void foo()\n+{\n+  asm (\"%[x]\" : [0](x));  // { dg-error \"numeric constant|token\" }\n+}"}]}