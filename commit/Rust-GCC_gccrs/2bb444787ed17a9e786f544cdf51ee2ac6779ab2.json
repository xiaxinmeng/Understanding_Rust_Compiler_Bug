{"sha": "2bb444787ed17a9e786f544cdf51ee2ac6779ab2", "node_id": "C_kwDOANBUbNoAKDJiYjQ0NDc4N2VkMTdhOWU3ODZmNTQ0Y2RmNTFlZTJhYzY3NzlhYjI", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2023-01-31T15:03:43Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2023-01-31T15:03:43Z"}, "message": "vect: Fix single def-use cycle for ifn reductions [PR108608]\n\nThe patch that added support for fmin/fmax reductions didn't\nhandle single def-use cycles.  In some ways, this seems like\ngoing out of our way to make things slower, but that's a\ndiscussion for another day.\n\ngcc/\n\tPR tree-optimization/108608\n\t* tree-vect-loop.cc (vect_transform_reduction): Handle single\n\tdef-use cycles that involve function calls rather than tree codes.\n\ngcc/testsuite/\n\tPR tree-optimization/108608\n\t* gcc.dg/vect/pr108608.c: New test.\n\t* gcc.target/aarch64/sve/pr108608-1.c: Likewise.", "tree": {"sha": "e9b76790b11f31c7f0dd90671451c7f585d75688", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9b76790b11f31c7f0dd90671451c7f585d75688"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bb444787ed17a9e786f544cdf51ee2ac6779ab2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bb444787ed17a9e786f544cdf51ee2ac6779ab2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bb444787ed17a9e786f544cdf51ee2ac6779ab2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bb444787ed17a9e786f544cdf51ee2ac6779ab2/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1626ec53e8c1b9c245572417d380e3ed84990cff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1626ec53e8c1b9c245572417d380e3ed84990cff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1626ec53e8c1b9c245572417d380e3ed84990cff"}], "stats": {"total": 55, "additions": 46, "deletions": 9}, "files": [{"sha": "e968141ba03639ab86ccf77e5e9ad5dd56a66e0d", "filename": "gcc/testsuite/gcc.dg/vect/pr108608.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bb444787ed17a9e786f544cdf51ee2ac6779ab2/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr108608.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bb444787ed17a9e786f544cdf51ee2ac6779ab2/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr108608.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr108608.c?ref=2bb444787ed17a9e786f544cdf51ee2ac6779ab2", "patch": "@@ -0,0 +1,24 @@\n+#include \"tree-vect.h\"\n+\n+double __attribute__((noipa))\n+foo (double m, float *ptr)\n+{\n+  for (int i = 0; i < 256; i++)\n+    m = __builtin_fmax (m, ptr[i]);\n+  return m;\n+}\n+\n+int\n+main (void)\n+{\n+  check_vect ();\n+  float ptr[256];\n+  for (int j = 0; j < 16; ++j)\n+    {\n+      for (int i = 0; i < 256; ++i)\n+\tptr[i] = i == 128 + j ? 2 + j : i == 161 ? 1 : 0;\n+      if (foo (0, ptr) != 2 + j)\n+\t__builtin_abort ();\n+    }\n+  return 0;\n+}"}, {"sha": "0a7d485e047d7faa96d166e5950b0cbbae317273", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr108608-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bb444787ed17a9e786f544cdf51ee2ac6779ab2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr108608-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bb444787ed17a9e786f544cdf51ee2ac6779ab2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr108608-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr108608-1.c?ref=2bb444787ed17a9e786f544cdf51ee2ac6779ab2", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-options \"-O3\" } */\n+\n+double __attribute__((noipa))\n+foo (double m, float *ptr)\n+{\n+  for (int i = 0; i < 256; i++)\n+    m = __builtin_fmax (m, ptr[i]);\n+  return m;\n+}"}, {"sha": "f03af1efd0f48f2039cf06d89a9c77212706beda", "filename": "gcc/tree-vect-loop.cc", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bb444787ed17a9e786f544cdf51ee2ac6779ab2/gcc%2Ftree-vect-loop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bb444787ed17a9e786f544cdf51ee2ac6779ab2/gcc%2Ftree-vect-loop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.cc?ref=2bb444787ed17a9e786f544cdf51ee2ac6779ab2", "patch": "@@ -7755,8 +7755,6 @@ vect_transform_reduction (loop_vec_info loop_vinfo,\n   gimple_match_op op;\n   if (!gimple_extract_op (stmt_info->stmt, &op))\n     gcc_unreachable ();\n-  gcc_assert (op.code.is_tree_code ());\n-  auto code = tree_code (op.code);\n \n   /* All uses but the last are expected to be defined in the loop.\n      The last use is the reduction variable.  In case of nested cycle this\n@@ -7778,7 +7776,8 @@ vect_transform_reduction (loop_vec_info loop_vinfo,\n       vec_num = 1;\n     }\n \n-  internal_fn cond_fn = get_conditional_internal_fn (code);\n+  code_helper code = canonicalize_code (op.code, op.type);\n+  internal_fn cond_fn = get_conditional_internal_fn (code, op.type);\n   vec_loop_masks *masks = &LOOP_VINFO_MASKS (loop_vinfo);\n   bool mask_by_cond_expr = use_mask_by_cond_expr_p (code, cond_fn, vectype_in);\n \n@@ -7802,9 +7801,10 @@ vect_transform_reduction (loop_vec_info loop_vinfo,\n   if (reduction_type == FOLD_LEFT_REDUCTION)\n     {\n       internal_fn reduc_fn = STMT_VINFO_REDUC_FN (reduc_info);\n+      gcc_assert (code.is_tree_code ());\n       return vectorize_fold_left_reduction\n-\t  (loop_vinfo, stmt_info, gsi, vec_stmt, slp_node, reduc_def_phi, code,\n-\t   reduc_fn, op.ops, vectype_in, reduc_index, masks);\n+\t  (loop_vinfo, stmt_info, gsi, vec_stmt, slp_node, reduc_def_phi,\n+\t   tree_code (code), reduc_fn, op.ops, vectype_in, reduc_index, masks);\n     }\n \n   bool single_defuse_cycle = STMT_VINFO_FORCE_SINGLE_CYCLE (reduc_info);\n@@ -7814,7 +7814,7 @@ vect_transform_reduction (loop_vec_info loop_vinfo,\n \t      || code == SAD_EXPR);\n \n   /* Create the destination vector  */\n-  tree scalar_dest = gimple_assign_lhs (stmt_info->stmt);\n+  tree scalar_dest = gimple_get_lhs (stmt_info->stmt);\n   tree vec_dest = vect_create_destination_var (scalar_dest, vectype_out);\n \n   vect_get_vec_defs (loop_vinfo, stmt_info, slp_node, ncopies,\n@@ -7849,7 +7849,7 @@ vect_transform_reduction (loop_vec_info loop_vinfo,\n \t  /* Make sure that the reduction accumulator is vop[0].  */\n \t  if (reduc_index == 1)\n \t    {\n-\t      gcc_assert (commutative_tree_code (code));\n+\t      gcc_assert (commutative_binary_op_p (code, op.type));\n \t      std::swap (vop[0], vop[1]);\n \t    }\n \t  tree mask = vect_get_loop_mask (gsi, masks, vec_num * ncopies,\n@@ -7877,11 +7877,15 @@ vect_transform_reduction (loop_vec_info loop_vinfo,\n \t  if (emulated_mixed_dot_prod)\n \t    new_stmt = vect_emulate_mixed_dot_prod (loop_vinfo, stmt_info, gsi,\n \t\t\t\t\t\t    vec_dest, vop);\n+\t  else if (code.is_internal_fn ())\n+\t    new_stmt = gimple_build_call_internal (internal_fn (code),\n+\t\t\t\t\t\t   op.num_ops,\n+\t\t\t\t\t\t   vop[0], vop[1], vop[2]);\n \t  else\n-\t    new_stmt = gimple_build_assign (vec_dest, code,\n+\t    new_stmt = gimple_build_assign (vec_dest, tree_code (op.code),\n \t\t\t\t\t    vop[0], vop[1], vop[2]);\n \t  new_temp = make_ssa_name (vec_dest, new_stmt);\n-\t  gimple_assign_set_lhs (new_stmt, new_temp);\n+\t  gimple_set_lhs (new_stmt, new_temp);\n \t  vect_finish_stmt_generation (loop_vinfo, stmt_info, new_stmt, gsi);\n \t}\n "}]}