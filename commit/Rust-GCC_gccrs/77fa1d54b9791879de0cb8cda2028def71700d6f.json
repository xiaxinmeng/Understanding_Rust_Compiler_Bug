{"sha": "77fa1d54b9791879de0cb8cda2028def71700d6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdmYTFkNTRiOTc5MTg3OWRlMGNiOGNkYTIwMjhkZWY3MTcwMGQ2Zg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-04-26T13:02:55Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-04-26T13:02:55Z"}, "message": "predicates.md (ext_QIreg_operand): Remove extra mode check.\n\n\t* config/i386/predicates.md (ext_QIreg_operand): Remove extra\n\tmode check.\n\t(ext_QIreg_nomode_operands): Remove.\n\t* config/i386/i386.md (*anddi_1): Use ext_QIreg_operand.\n\t(*andsi_1): Ditto.\n\t(*andhi_1): Ditto.\n\nFrom-SVN: r172965", "tree": {"sha": "1f8e45af9511360e87d063a68f5565c15d9cd0e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f8e45af9511360e87d063a68f5565c15d9cd0e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77fa1d54b9791879de0cb8cda2028def71700d6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77fa1d54b9791879de0cb8cda2028def71700d6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77fa1d54b9791879de0cb8cda2028def71700d6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77fa1d54b9791879de0cb8cda2028def71700d6f/comments", "author": null, "committer": null, "parents": [{"sha": "e6e26e59a357e5e6d5a6d19e2c8142bbe8af86cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6e26e59a357e5e6d5a6d19e2c8142bbe8af86cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6e26e59a357e5e6d5a6d19e2c8142bbe8af86cd"}], "stats": {"total": 102, "additions": 55, "deletions": 47}, "files": [{"sha": "4d2bd987d29ec15be237aa1ea5d21325b7868661", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 28, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77fa1d54b9791879de0cb8cda2028def71700d6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77fa1d54b9791879de0cb8cda2028def71700d6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77fa1d54b9791879de0cb8cda2028def71700d6f", "patch": "@@ -1,3 +1,12 @@\n+2011-04-26  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/predicates.md (ext_QIreg_operand): Remove extra\n+\tmode check.\n+\t(ext_QIreg_nomode_operands): Remove.\n+\t* config/i386/i386.md (*anddi_1): Use ext_QIreg_operand.\n+\t(*andsi_1): Ditto.\n+\t(*andhi_1): Ditto.\n+\n 2011-04-26  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* config/arm/arm.c (arm_gen_constant): Remove can_negate_initial.\n@@ -12,14 +21,12 @@\n \tPR middle-end/48694\n \t* tree.h (OEP_CONSTANT_ADDRESS_OF): New operand_equal_flag.\n \t* fold-const.c (operand_equal_p): For TREE_CONSTANT ADDR_EXPRs\n-\tcompare the operands with OEP_CONSTANT_ADDRESS_OF.  Treat\n-\ttrees with TREE_SIDE_EFFECTS equal when OEP_CONSTANT_ADDRESS_OF\n-\tis set.\n+\tcompare the operands with OEP_CONSTANT_ADDRESS_OF.  Treat trees\n+\twith TREE_SIDE_EFFECTS equal when OEP_CONSTANT_ADDRESS_OF is set.\n \n 2011-04-25  Paolo Carlini  <paolo.carlini@oracle.com>\n \n-\t* c-family/c-common.c (struct c_common_resword): Add\n-\t__underlying_type.\n+\t* c-family/c-common.c (struct c_common_resword): Add __underlying_type.\n \t* c-family/c-common.h (enum rid): Add RID_UNDERLYING_TYPE.\n         * doc/extend.texi: Document __underlying_type.\n \n@@ -51,9 +58,9 @@\n \n \t* ipa-prop.c (ipa_propagate_indirect_call_infos): Remove obsolette\n \tWPA hack.\n-\t* ipa-prop.h (ipa_get_param, ipa_is_param_used, ipa_param_cannot_devirtualize_p,\n-\tipa_param_types_vec_empty, ipa_get_ith_jump_func, ipa_get_lattice):\n-\tFortify array bounds.\n+\t* ipa-prop.h (ipa_get_param, ipa_is_param_used,\n+\tipa_param_cannot_devirtualize_p, ipa_param_types_vec_empty,\n+\tipa_get_ith_jump_func, ipa_get_lattice): Fortify array bounds.\n \t* ipa-inline-analysis.c (add_clause): Fix clause ordering.\n \t(and_predicates, or_predicates, predicates_equal_p, evaulate_predicate):\n \tSanity check predicate length.\n@@ -92,40 +99,43 @@\n 2011-04-22  Jan Hubicka  <jh@suse.cz>\n \n \t* gengtype.c (open_base_files): Add ipa-inline.h include.\n-\t* ipa-cp.c (ipcp_get_lattice, ipcp_lattice_from_jfunc): Move to ipa-prop.c\n-\tupdate all uses.\n+\t* ipa-cp.c (ipcp_get_lattice, ipcp_lattice_from_jfunc): Move to\n+\tipa-prop.c; update all uses.\n \t* ipa-prop.c: (ipa_get_lattice, ipa_lattice_from_jfunc): ... here.\n-\t* ipa-inline-transform.c (inline_call): Use inline_merge_summary to merge\n-\tsummary of inlined function into former caller.\n+\t* ipa-inline-transform.c (inline_call): Use inline_merge_summary to\n+\tmerge summary of inlined function into former caller.\n \t* ipa-inline.c (max_benefit): Remove.\n \t(edge_badness): Compensate for removal of benefits.\n-\t(update_caller_keys): Use reset_node_growth_cache/reset_edge_growth_cache.\n+\t(update_caller_keys): Use\n+\treset_node_growth_cache/reset_edge_growth_cache.\n \t(update_callee_keys): Likewise.\n \t(update_all_callee_keys): Likewise.\n-\t(inline_small_functions): Do not collect max_benefit; do not\n-\treset stimated_growth; call free_growth_caches and initialize_growth_caches.\n-\t* ipa-inline.h (struct condition, type clause_t, struct predicate, struct\n-\tsize_time_entry): New structures.\n+\t(inline_small_functions): Do not collect max_benefit; do not reset\n+\testimated_growth; call free_growth_caches and initialize_growth_caches.\n+\t* ipa-inline.h (struct condition, type clause_t, struct predicate,\n+\tstruct size_time_entry): New structures.\n \t(INLINE_SIZE_SCALE, INLINE_TIME_SCALE, MAX_CLAUSES): New constants.\n-\t(inline_summary): Remove size_inlining_benefit, time_inlining_benefit and\n-\testimated_growth.\n+\t(inline_summary): Remove size_inlining_benefit, time_inlining_benefit\n+\tand estimated_growth.\n \t(edge_growth_cache_entry): New structure.\n \t(node_growth_cache, edge_growth_cache): New global vars.\n \t(estimate_growth): Turn into inline.\n \t(inline_merge_summary, do_estimate_edge_growth, do_estimate_edge_time,\n \tinitialize_growth_caches, free_growth_caches): Declare.\n \t(estimate_edge_growth): Rewrite.\n \t(estimate_edge_time): Implement as inline cache lookup.\n-\t(reset_node_growth_cache, reset_edge_growth_cache): New inline functions.\n+\t(reset_node_growth_cache, reset_edge_growth_cache): New inline\n+\tfunctions.\n \t(MAX_TIME): Reduce to allow multiplicatoin by INLINE_SIZE_SCALE.\n \t(NUM_CONDITIONS): New constant.\n \t(predicate_conditions): New enum.\n \t(IS_NOT_CONSTANT): New constant.\n \t(edge_removal_hook_holder): New var.\n \t(node_growth_cache, edge_growth_cache): New global vars.\n-\t(true_predicate, single_cond_predicate, false_predicate, not_inlined_predicate,\n-\tadd_condition, add_clause, and_predicates, or_predicates, predicates_equal_p,\n-\tevaulate_predicate, dump_condition, dump_clause, dump_predicate, account_size_time,\n+\t(true_predicate, single_cond_predicate, false_predicate,\n+\tnot_inlined_predicate, add_condition, add_clause, and_predicates,\n+\tor_predicates, predicates_equal_p, evaulate_predicate, dump_condition,\n+\tdump_clause, dump_predicate, account_size_time,\n \tevaulate_conditions_for_edge): New functions.\n \t(inline_summary_alloc): Move to heap.\n \t(inline_node_removal_hook): Clear condition and entry vectors.\n@@ -152,14 +162,16 @@\n \t(inline_write_summary): Write all the new data.\n \t* ipa-prop.c (ipa_get_param_decl_index): Export.\n \t(ipa_lattice_from_jfunc): Move here from ipa-cp.c\n-\t* ipa-prop.h (ipa_get_param_decl_index, ipa_lattice_from_jfunc): Declare.\n-\t(ipa_get_lattice): Move hre from ipa-cp.c\n+\t* ipa-prop.h (ipa_get_param_decl_index, ipa_lattice_from_jfunc):\n+\tDeclare.\n+\t(ipa_get_lattice): Move here from ipa-cp.c\n \t* Makefile.in (GTFILES): Add ipa-inline.h and ipa-inline-analysis.c\n \t* params.def (PARAM_EARLY_INLINING_INSNS): Set to 11.\n \t* cgraph.h (cgraph_clone_inlined_nodes, compute_inline_parameters,\n \tcgraph_edge_inlinable_p): Remove.\n \t* cgraphunit.c: Include ipainline.h\n-\t(cgraph_process_new_functions): Update call of compute_inline_parameters.\n+\t(cgraph_process_new_functions): Update call of\n+\tcompute_inline_parameters.\n \n 2011-04-22  Richard Guenther  <rguenther@suse.de>\n \n@@ -276,8 +288,7 @@\n 2011-04-21  Dimitrios Apostolou  <jimis@gmx.net>\n \t    Jeff Law  <law@redhat.com>\n \n-\t* gengtype-state.c (read_a_state_token): Fix argument to\n-\tobstack_free.\n+\t* gengtype-state.c (read_a_state_token): Fix argument to obstack_free.\n \t* gengtype.c (matching_file_name_substitute): Likewise.\n \n 2011-04-21  Richard Guenther  <rguenther@suse.de>"}, {"sha": "e66d650251c69010c976d5758def4203e203323a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77fa1d54b9791879de0cb8cda2028def71700d6f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77fa1d54b9791879de0cb8cda2028def71700d6f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=77fa1d54b9791879de0cb8cda2028def71700d6f", "patch": "@@ -7932,7 +7932,7 @@\n      (if_then_else\n        (and (eq_attr \"type\" \"imovx\")\n \t    (and (ne (symbol_ref \"INTVAL (operands[2]) == 0xff\") (const_int 0))\n-\t\t (match_operand 1 \"ext_QIreg_nomode_operand\" \"\")))\n+\t\t (match_operand 1 \"ext_QIreg_operand\" \"\")))\n        (const_string \"1\")\n        (const_string \"*\")))\n    (set_attr \"mode\" \"SI,DI,DI,SI\")])\n@@ -7976,7 +7976,7 @@\n      (if_then_else\n        (and (eq_attr \"type\" \"imovx\")\n \t    (and (ne (symbol_ref \"INTVAL (operands[2]) == 0xff\") (const_int 0))\n-\t\t (match_operand 1 \"ext_QIreg_nomode_operand\" \"\")))\n+\t\t (match_operand 1 \"ext_QIreg_operand\" \"\")))\n        (const_string \"1\")\n        (const_string \"*\")))\n    (set_attr \"length_immediate\" \"*,*,0\")\n@@ -8019,7 +8019,7 @@\n    (set (attr \"prefix_rex\")\n      (if_then_else\n        (and (eq_attr \"type\" \"imovx\")\n-\t    (match_operand 1 \"ext_QIreg_nomode_operand\" \"\"))\n+\t    (match_operand 1 \"ext_QIreg_operand\" \"\"))\n        (const_string \"1\")\n        (const_string \"*\")))\n    (set_attr \"mode\" \"HI,HI,SI\")])"}, {"sha": "b8b6bf615be16a3e5b0797c57b356addcc67f403", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77fa1d54b9791879de0cb8cda2028def71700d6f/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77fa1d54b9791879de0cb8cda2028def71700d6f/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=77fa1d54b9791879de0cb8cda2028def71700d6f", "patch": "@@ -86,15 +86,8 @@\n ;; %[abcd][hl].\n (define_predicate \"ext_QIreg_operand\"\n   (and (match_code \"reg\")\n-       (match_test \"TARGET_64BIT\n-\t\t    && GET_MODE (op) == QImode\n-\t\t    && REGNO (op) > BX_REG\")))\n-\n-;; Similarly, but don't check mode of the operand.\n-(define_predicate \"ext_QIreg_nomode_operand\"\n-  (and (match_code \"reg\")\n-       (match_test \"TARGET_64BIT\n-\t\t    && REGNO (op) > BX_REG\")))\n+       (match_test \"TARGET_64BIT\")\n+       (match_test \"REGNO (op) > BX_REG\")))\n \n ;; Return true if op is not xmm0 register.\n (define_predicate \"reg_not_xmm0_operand\"\n@@ -391,7 +384,8 @@\n \n ;; Return true if OP is nonmemory operand acceptable by movabs patterns.\n (define_predicate \"x86_64_movabs_operand\"\n-  (if_then_else (match_test \"!TARGET_64BIT || !flag_pic\")\n+  (if_then_else (not (and (match_test \"TARGET_64BIT\")\n+\t\t\t  (match_test \"flag_pic\")))\n     (match_operand 0 \"nonmemory_operand\")\n     (ior (match_operand 0 \"register_operand\")\n \t (and (match_operand 0 \"const_double_operand\")\n@@ -483,7 +477,7 @@\n ;; scripts means that we can't be sure of that in general, so assume\n ;; that @GOTOFF is never valid on VxWorks.\n (define_predicate \"gotoff_operand\"\n-  (and (match_test \"!TARGET_VXWORKS_RTP\")\n+  (and (not (match_test \"TARGET_VXWORKS_RTP\"))\n        (match_operand 0 \"local_symbolic_operand\")))\n \n ;; Test for various thread-local symbols.\n@@ -611,7 +605,8 @@\n ;; Match 0 or 1.\n (define_predicate \"const_0_to_1_operand\"\n   (and (match_code \"const_int\")\n-       (match_test \"op == const0_rtx || op == const1_rtx\")))\n+       (ior (match_test \"op == const0_rtx\")\n+\t    (match_test \"op == const1_rtx\"))))\n \n ;; Match 0 to 3.\n (define_predicate \"const_0_to_3_operand\"\n@@ -696,7 +691,8 @@\n ;; Match exactly one bit in 2-bit mask.\n (define_predicate \"const_pow2_1_to_2_operand\"\n   (and (match_code \"const_int\")\n-       (match_test \"INTVAL (op) == 1 || INTVAL (op) == 2\")))\n+       (ior (match_test \"op == const1_rtx\")\n+\t    (match_test \"op == const2_rtx\"))))\n \n ;; Match exactly one bit in 4-bit mask.\n (define_predicate \"const_pow2_1_to_8_operand\"\n@@ -737,7 +733,8 @@\n (define_predicate \"reg_or_pm1_operand\"\n   (ior (match_operand 0 \"register_operand\")\n        (and (match_code \"const_int\")\n-\t    (match_test \"op == const1_rtx || op == constm1_rtx\"))))\n+\t    (ior (match_test \"op == const1_rtx\")\n+\t\t (match_test \"op == constm1_rtx\")))))\n \n ;; True if OP is acceptable as operand of DImode shift expander.\n (define_predicate \"shiftdi_operand\"\n@@ -984,8 +981,8 @@\n \n (define_predicate \"sse_comparison_operator\"\n   (ior (match_code \"eq,ne,lt,le,unordered,unge,ungt,ordered\")\n-       (and (match_code \"ge,gt,uneq,unle,unlt,ltgt\")\n-\t    (match_test \"TARGET_AVX\"))))\n+       (and (match_test \"TARGET_AVX\")\n+\t    (match_code \"ge,gt,uneq,unle,unlt,ltgt\"))))\n \n (define_predicate \"ix86_comparison_int_operator\"\n   (match_code \"ne,eq,ge,gt,le,lt\"))"}]}