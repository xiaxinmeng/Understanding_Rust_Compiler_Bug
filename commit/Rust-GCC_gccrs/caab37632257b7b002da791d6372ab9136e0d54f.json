{"sha": "caab37632257b7b002da791d6372ab9136e0d54f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FhYjM3NjMyMjU3YjdiMDAyZGE3OTFkNjM3MmFiOTEzNmUwZDU0Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-09-26T13:58:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-09-26T13:58:11Z"}, "message": "re PR middle-end/35691 (Missed (a == 0) && (b == 0) into (a|(typeof(a)(b)) == 0 when the types don't match)\n\n\tPR middle-end/35691\n\t* tree-ssa-reassoc.c (update_range_test): Dump r->exp each time\n\tif it is different SSA_NAME.\n\t(optimize_range_tests_cmp_bitwise): New function.\n\t(optimize_range_tests): Call it.\n\n\t* gcc.dg/pr35691-5.c: New test.\n\t* gcc.dg/pr35691-6.c: New test.\n\nFrom-SVN: r253201", "tree": {"sha": "1a330899c3f451ef600431b3536b3ee28f914a59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a330899c3f451ef600431b3536b3ee28f914a59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/caab37632257b7b002da791d6372ab9136e0d54f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caab37632257b7b002da791d6372ab9136e0d54f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caab37632257b7b002da791d6372ab9136e0d54f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caab37632257b7b002da791d6372ab9136e0d54f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "18b10d78d4344427e269e20f07117029daa52a97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18b10d78d4344427e269e20f07117029daa52a97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18b10d78d4344427e269e20f07117029daa52a97"}], "stats": {"total": 352, "additions": 351, "deletions": 1}, "files": [{"sha": "71d8a309f62bcbc65aa12460eb3df749f392e378", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caab37632257b7b002da791d6372ab9136e0d54f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caab37632257b7b002da791d6372ab9136e0d54f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=caab37632257b7b002da791d6372ab9136e0d54f", "patch": "@@ -1,3 +1,11 @@\n+2017-09-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/35691\n+\t* tree-ssa-reassoc.c (update_range_test): Dump r->exp each time\n+\tif it is different SSA_NAME.\n+\t(optimize_range_tests_cmp_bitwise): New function.\n+\t(optimize_range_tests): Call it.\n+\n 2017-09-26  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/82321"}, {"sha": "77ac3d1fa0ff42ad0762a1d9d0c53e4a562ba095", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caab37632257b7b002da791d6372ab9136e0d54f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caab37632257b7b002da791d6372ab9136e0d54f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=caab37632257b7b002da791d6372ab9136e0d54f", "patch": "@@ -1,3 +1,9 @@\n+2017-09-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/35691\n+\t* gcc.dg/pr35691-5.c: New test.\n+\t* gcc.dg/pr35691-6.c: New test.\n+\n 2017-09-26  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/82321"}, {"sha": "1cde0283b5d1826a6a9b1d194e72ae5b3e2bb5b2", "filename": "gcc/testsuite/gcc.dg/pr35691-5.c", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caab37632257b7b002da791d6372ab9136e0d54f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35691-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caab37632257b7b002da791d6372ab9136e0d54f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35691-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35691-5.c?ref=caab37632257b7b002da791d6372ab9136e0d54f", "patch": "@@ -0,0 +1,125 @@\n+/* PR middle-end/35691 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-reassoc1-details\" } */\n+\n+/* { dg-final { scan-tree-dump-times \"Optimizing range tests \\[xyz]1_\\[0-9]*\\\\(D\\\\) \\\\+\\\\\\[0, 0\\\\\\] and \\[xyz]1_\\[0-9]*\\\\(D\\\\) \\\\+\\\\\\[0, 0\\\\\\] and \\[xyz]1_\\[0-9]*\\\\(D\\\\) \\\\+\\\\\\[0, 0\\\\\\]\\[\\n\\r]\" 1 \"reassoc1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Optimizing range tests \\[ghi]1_\\[0-9]*\\\\(D\\\\) \\\\+\\\\\\[0, 0\\\\\\] and \\[ghi]1_\\[0-9]*\\\\(D\\\\) \\\\+\\\\\\[0, 0\\\\\\] and \\[ghi]1_\\[0-9]*\\\\(D\\\\) \\\\+\\\\\\[0, 0\\\\\\]\\[\\n\\r]\" 1 \"reassoc1\" } } */\n+\n+int\n+f1 (int x1, unsigned int y1, int z1, _Bool d, _Bool e, _Bool f, long long g1, unsigned long long h1, long long i1)\n+{\n+  int a = x1 == 0;\n+  int b = y1 == 0;\n+  int c = z1 == 0;\n+  int j = g1 == 0;\n+  int k = h1 == 0;\n+  int l = i1 == 0;\n+  return a && d && j && b && e && l && f && c && k;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Optimizing range tests \\[xyz]2_\\[0-9]*\\\\(D\\\\) \\\\+\\\\\\[0, 0\\\\\\] and \\[xyz]2_\\[0-9]*\\\\(D\\\\) \\\\+\\\\\\[0, 0\\\\\\] and \\[xyz]2_\\[0-9]*\\\\(D\\\\) \\\\+\\\\\\[0, 0\\\\\\]\\[\\n\\r]\" 1 \"reassoc1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Optimizing range tests \\[ghi]2_\\[0-9]*\\\\(D\\\\) \\\\+\\\\\\[\\[1-9-]\\[0-9]*, \\[1-9-]\\[0-9]*\\\\\\] and \\[ghi]2_\\[0-9]*\\\\(D\\\\) \\\\+\\\\\\[\\[1-9-]\\[0-9]*, \\[1-9-]\\[0-9]*\\\\\\] and \\[ghi]2_\\[0-9]*\\\\(D\\\\) \\\\+\\\\\\[\\[1-9-]\\[0-9]*, \\[1-9-]\\[0-9]*\\\\\\]\\[\\n\\r]\" 1 \"reassoc1\" } } */\n+\n+int\n+f2 (int x2, int y2, unsigned int z2, _Bool d, _Bool e, _Bool f, long long g2, unsigned long long h2, long long i2)\n+{\n+  int a = x2 == 0;\n+  int b = y2 == 0;\n+  int c = z2 == 0;\n+  int j = g2 == -1LL;\n+  int k = h2 == -1ULL;\n+  int l = i2 == -1LL;\n+  return !a || d || !l || !b || !k || e || f || !c || !j;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Optimizing range tests \\[xyz]3_\\[0-9]*\\\\(D\\\\) \\\\+\\\\\\[\\[1-9-]\\[0-9]*, \\[1-9-]\\[0-9]*\\\\\\] and \\[xyz]3_\\[0-9]*\\\\(D\\\\) \\\\+\\\\\\[\\[1-9-]\\[0-9]*, \\[1-9-]\\[0-9]*\\\\\\] and \\[xyz]3_\\[0-9]*\\\\(D\\\\) \\\\+\\\\\\[\\[1-9-]\\[0-9]*, \\[1-9-]\\[0-9]*\\\\\\]\\[\\n\\r]\" 1 \"reassoc1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Optimizing range tests \\[ghi]3_\\[0-9]*\\\\(D\\\\) \\\\+\\\\\\[\\[1-9-]\\[0-9]*, \\[1-9-]\\[0-9]*\\\\\\] and \\[ghi]3_\\[0-9]*\\\\(D\\\\) \\\\+\\\\\\[\\[1-9-]\\[0-9]*, \\[1-9-]\\[0-9]*\\\\\\] and \\[ghi]3_\\[0-9]*\\\\(D\\\\) \\\\+\\\\\\[\\[1-9-]\\[0-9]*, \\[1-9-]\\[0-9]*\\\\\\]\\[\\n\\r]\" 1 \"reassoc1\" } } */\n+\n+int\n+f3 (unsigned int x3, int y3, int z3, _Bool d, _Bool e, _Bool f, signed char g3, unsigned char h3, signed char i3)\n+{\n+  int a = x3 == -1U;\n+  int b = y3 == -1;\n+  int c = z3 == -1;\n+  int j = g3 == -1;\n+  int k = h3 == (unsigned char) -1U;\n+  int l = i3 == -1;\n+  return a && d && j && b && k && e && f && c && l;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Optimizing range tests \\[xyz]4_\\[0-9]*\\\\(D\\\\) \\\\+\\\\\\[\\[1-9-]\\[0-9]*, \\[1-9-]\\[0-9]*\\\\\\] and \\[xyz]4_\\[0-9]*\\\\(D\\\\) \\\\+\\\\\\[\\[1-9-]\\[0-9]*, \\[1-9-]\\[0-9]*\\\\\\] and \\[xyz]4_\\[0-9]*\\\\(D\\\\) \\\\+\\\\\\[\\[1-9-]\\[0-9]*, \\[1-9-]\\[0-9]*\\\\\\]\\[\\n\\r]\" 1 \"reassoc1\" } } */\n+\n+int\n+f4 (int x4, unsigned int y4, unsigned int z4, _Bool d, _Bool e, _Bool f)\n+{\n+  int a = x4 == -1U;\n+  int b = y4 == -1U;\n+  int c = z4 == -1;\n+  return !a || d || !b || e || f || !c;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Optimizing range tests \\[xyz]5_\\[0-9]*\\\\(D\\\\) \\\\+\\\\\\[0, 0\\\\\\] and \\[xyz]5_\\[0-9]*\\\\(D\\\\) \\\\+\\\\\\[0, 0\\\\\\] and \\[xyz]5_\\[0-9]*\\\\(D\\\\) \\\\+\\\\\\[0, 0\\\\\\]\\[\\n\\r]\" 1 \"reassoc1\" } } */\n+\n+int\n+f5 (int x5, int y5, int z5, _Bool d, _Bool e, _Bool f)\n+{\n+  int a = x5 == 0;\n+  int b = y5 != 0;\n+  int c = z5 != 0;\n+  return a && d && !b && e && f && !c;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Optimizing range tests \\[xyz]6_\\[0-9]*\\\\(D\\\\) \\\\+\\\\\\[0, 0\\\\\\] and \\[xyz]6_\\[0-9]*\\\\(D\\\\) \\\\+\\\\\\[0, 0\\\\\\] and \\[xyz]6_\\[0-9]*\\\\(D\\\\) \\\\+\\\\\\[0, 0\\\\\\]\\[\\n\\r]\" 1 \"reassoc1\" } } */\n+\n+int\n+f6 (unsigned int x6, unsigned int y6, unsigned int z6, _Bool d, _Bool e, _Bool f)\n+{\n+  int a = x6 == 0;\n+  int b = y6 != 0;\n+  int c = z6 != 0;\n+  return !a || d || b || e || f || c;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Optimizing range tests \\[xy]7_\\[0-9]*\\\\(D\\\\) \\\\+\\\\\\[\\[1-9-]\\[0-9]*, \\[1-9-]\\[0-9]*\\\\\\] and \\[xy]7_\\[0-9]*\\\\(D\\\\) \\\\+\\\\\\[\\[1-9-]\\[0-9]*, \\[1-9-]\\[0-9]*\\\\\\]\\[\\n\\r]\" 1 \"reassoc1\" } } */\n+\n+int\n+f7 (int x7, int y7, int z7, _Bool d, _Bool e, _Bool f)\n+{\n+  int a = x7 == -1;\n+  int b = y7 != -1;\n+  int c = z7 == -1;\n+  return a && d && !b && e && f && !c;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Optimizing range tests \\[xy]8_\\[0-9]*\\\\(D\\\\) \\\\+\\\\\\[\\[1-9-]\\[0-9]*, \\[1-9-]\\[0-9]*\\\\\\] and \\[xy]8_\\[0-9]*\\\\(D\\\\) \\\\+\\\\\\[\\[1-9-]\\[0-9]*, \\[1-9-]\\[0-9]*\\\\\\]\\[\\n\\r]\" 1 \"reassoc1\" } } */\n+\n+int\n+f8 (unsigned int x8, unsigned int y8, unsigned int z8, _Bool d, _Bool e, _Bool f)\n+{\n+  int a = x8 == -1;\n+  int b = y8 != -1;\n+  int c = z8 == -1;\n+  return !a || d || b || e || f || c;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"Optimizing range tests \\[xyz]9_\\[0-9]*\\\\(D\\\\)\" \"reassoc1\" } } */\n+\n+int\n+f9 (int x9, int y9, int z9, _Bool d, _Bool e, _Bool f)\n+{\n+  int a = x9 == -1;\n+  int b = y9 == -1;\n+  int c = z9 == -1;\n+  return a || d || b || e || f || c;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"Optimizing range tests \\[xyz]0_\\[0-9]*\\\\(D\\\\)\" \"reassoc1\" } } */\n+\n+int\n+f0 (int x0, int y0, int z0, _Bool d, _Bool e, _Bool f)\n+{\n+  int a = x0 != 0;\n+  int b = y0 != 0;\n+  int c = z0 != 0;\n+  return a && d && b && e && f && c;\n+}"}, {"sha": "b45bbb8a2ad10667c3f59902dd36d71bd9af2704", "filename": "gcc/testsuite/gcc.dg/pr35691-6.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caab37632257b7b002da791d6372ab9136e0d54f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35691-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caab37632257b7b002da791d6372ab9136e0d54f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35691-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35691-6.c?ref=caab37632257b7b002da791d6372ab9136e0d54f", "patch": "@@ -0,0 +1,72 @@\n+/* PR middle-end/35691 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+__attribute__((noinline, noclone)) int\n+foo (int *p, unsigned long long *q)\n+{\n+  int p0 = p[0], p10 = p[10], p12 = p[12], p32 = p[32], p77 = p[77], p85 = p[85], p86 = p[86], p97 = p[97], p98 = p[98];\n+  unsigned long long q0 = q[0], q10 = q[10], q12 = q[12], q32 = q[32], q77 = q[77], q85 = q[85], q86 = q[86], q97 = q[97], q98 = q[98];\n+  return p0 == 0 && q0 == -1 && p10 == 0 && q10 == -1 && p12 == 0 && q12 == -1\n+\t && p32 == 0 && q32 == -1 && p77 == 0 && q77 == -1 && p85 == 0 && q85 == -1\n+\t && p86 == 0 && q86 == -1 && p97 == 0 && q97 == -1 && p98 == 0 && q98 == -1;\n+}\n+\n+__attribute__((noinline, noclone)) int\n+bar (int *p, unsigned long long *q)\n+{\n+  int p0 = p[0], p10 = p[10], p12 = p[12], p32 = p[32], p77 = p[77], p85 = p[85], p86 = p[86], p97 = p[97], p98 = p[98];\n+  unsigned long long q0 = q[0], q10 = q[10], q12 = q[12], q32 = q[32], q77 = q[77], q85 = q[85], q86 = q[86], q97 = q[97], q98 = q[98];\n+  return p0 != 0 | q0 != -1 | p10 != 0 | q10 != -1 | p12 != 0 | q12 != -1\n+\t | p32 != 0 | q32 != -1 | p77 != 0 | q77 != -1 | p85 != 0 | q85 != -1\n+\t | p86 != 0 | q86 != -1 | p97 != 0 | q97 != -1 | p98 != 0 | q98 != -1;\n+}\n+\n+int p[100];\n+unsigned long long q[100];\n+\n+int\n+main ()\n+{\n+  int i;\n+  for (i = 0; i < 100; i++)\n+    {\n+      p[i] = 0;\n+      q[i] = -1;\n+    }\n+  asm volatile (\"\" : : \"g\" (p), \"g\" (q) : \"memory\");\n+  if (foo (p, q) != 1 || bar (p, q) != 0)\n+    __builtin_abort ();\n+  for (i = 0; i < 100; i++)\n+    {\n+      int f1, b1, f2, b2;\n+      p[i] = 1;\n+      f1 = foo (p, q);\n+      b1 = bar (p, q);\n+      p[i] = 0;\n+      q[i] = 0;\n+      f2 = foo (p, q);\n+      b2 = bar (p, q);\n+      q[i] = -1;\n+      switch (i)\n+\t{\n+\tcase 0:\n+\tcase 10:\n+\tcase 12:\n+\tcase 32:\n+\tcase 77:\n+\tcase 85:\n+\tcase 86:\n+\tcase 97:\n+\tcase 98:\n+\t  if (f1 != 0 || b1 != 1 || f2 != 0 || b2 != 1)\n+\t    __builtin_abort ();\n+\t  break;\n+\tdefault:\n+\t  if (f1 != 1 || b1 != 0 || f2 != 1 || b2 != 0)\n+\t    __builtin_abort ();\n+\t  break;\n+\t}\n+    }\n+  return 0;\n+}"}, {"sha": "b2d0f57e644927c98085751ac9791ee66e8630d5", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 140, "deletions": 1, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caab37632257b7b002da791d6372ab9136e0d54f/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caab37632257b7b002da791d6372ab9136e0d54f/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=caab37632257b7b002da791d6372ab9136e0d54f", "patch": "@@ -2379,7 +2379,16 @@ update_range_test (struct range_entry *range, struct range_entry *otherrange,\n \t    r = otherrange + i;\n \t  else\n \t    r = otherrangep[i];\n-\t  fprintf (dump_file, \" and %c[\", r->in_p ? '+' : '-');\n+\t  if (r->exp\n+\t      && r->exp != range->exp\n+\t      && TREE_CODE (r->exp) == SSA_NAME)\n+\t    {\n+\t      fprintf (dump_file, \" and \");\n+\t      print_generic_expr (dump_file, r->exp);\n+\t    }\n+\t  else\n+\t    fprintf (dump_file, \" and\");\n+\t  fprintf (dump_file, \" %c[\", r->in_p ? '+' : '-');\n \t  print_generic_expr (dump_file, r->low);\n \t  fprintf (dump_file, \", \");\n \t  print_generic_expr (dump_file, r->high);\n@@ -2880,6 +2889,134 @@ optimize_range_tests_to_bit_test (enum tree_code opcode, int first, int length,\n   return any_changes;\n }\n \n+/* Optimize x != 0 && y != 0 && z != 0 into (x | y | z) != 0\n+   and similarly x != -1 && y != -1 && y != -1 into (x & y & z) != -1.  */\n+\n+static bool\n+optimize_range_tests_cmp_bitwise (enum tree_code opcode, int first, int length,\n+\t\t\t\t  vec<operand_entry *> *ops,\n+\t\t\t\t  struct range_entry *ranges)\n+{\n+  int i;\n+  unsigned int b;\n+  bool any_changes = false;\n+  auto_vec<int, 128> buckets;\n+  auto_vec<int, 32> chains;\n+  auto_vec<struct range_entry *, 32> candidates;\n+\n+  for (i = first; i < length; i++)\n+    {\n+      if (ranges[i].exp == NULL_TREE\n+\t  || TREE_CODE (ranges[i].exp) != SSA_NAME\n+\t  || !ranges[i].in_p\n+\t  || TYPE_PRECISION (TREE_TYPE (ranges[i].exp)) <= 1\n+\t  || TREE_CODE (TREE_TYPE (ranges[i].exp)) == BOOLEAN_TYPE\n+\t  || ranges[i].low == NULL_TREE\n+\t  || ranges[i].low != ranges[i].high)\n+\tcontinue;\n+\n+      bool zero_p = integer_zerop (ranges[i].low);\n+      if (!zero_p && !integer_all_onesp (ranges[i].low))\n+\tcontinue;\n+\n+      b = TYPE_PRECISION (TREE_TYPE (ranges[i].exp)) * 2 + !zero_p;\n+      if (buckets.length () <= b)\n+\tbuckets.safe_grow_cleared (b + 1);\n+      if (chains.length () <= (unsigned) i)\n+\tchains.safe_grow (i + 1);\n+      chains[i] = buckets[b];\n+      buckets[b] = i + 1;\n+    }\n+\n+  FOR_EACH_VEC_ELT (buckets, b, i)\n+    if (i && chains[i - 1])\n+      {\n+\tint j, k = i;\n+\tfor (j = chains[i - 1]; j; j = chains[j - 1])\n+\t  {\n+\t    gimple *gk = SSA_NAME_DEF_STMT (ranges[k - 1].exp);\n+\t    gimple *gj = SSA_NAME_DEF_STMT (ranges[j - 1].exp);\n+\t    if (reassoc_stmt_dominates_stmt_p (gk, gj))\n+\t      k = j;\n+\t  }\n+\ttree type1 = TREE_TYPE (ranges[k - 1].exp);\n+\ttree type2 = NULL_TREE;\n+\tbool strict_overflow_p = false;\n+\tcandidates.truncate (0);\n+\tfor (j = i; j; j = chains[j - 1])\n+\t  {\n+\t    tree type = TREE_TYPE (ranges[j - 1].exp);\n+\t    strict_overflow_p |= ranges[j - 1].strict_overflow_p;\n+\t    if (j == k\n+\t\t|| useless_type_conversion_p (type1, type))\n+\t      ;\n+\t    else if (type2 == NULL_TREE\n+\t\t     || useless_type_conversion_p (type2, type))\n+\t      {\n+\t\tif (type2 == NULL_TREE)\n+\t\t  type2 = type;\n+\t\tcandidates.safe_push (&ranges[j - 1]);\n+\t      }\n+\t  }\n+\tunsigned l = candidates.length ();\n+\tfor (j = i; j; j = chains[j - 1])\n+\t  {\n+\t    tree type = TREE_TYPE (ranges[j - 1].exp);\n+\t    if (j == k)\n+\t      continue;\n+\t    if (useless_type_conversion_p (type1, type))\n+\t      ;\n+\t    else if (type2 == NULL_TREE\n+\t\t     || useless_type_conversion_p (type2, type))\n+\t      continue;\n+\t    candidates.safe_push (&ranges[j - 1]);\n+\t  }\n+\tgimple_seq seq = NULL;\n+\ttree op = NULL_TREE;\n+\tunsigned int id;\n+\tstruct range_entry *r;\n+\tcandidates.safe_push (&ranges[k - 1]);\n+\tFOR_EACH_VEC_ELT (candidates, id, r)\n+\t  {\n+\t    gimple *g;\n+\t    if (id == 0)\n+\t      {\n+\t\top = r->exp;\n+\t\tcontinue;\n+\t      }\n+\t    if (id == l)\n+\t      {\n+\t\tg = gimple_build_assign (make_ssa_name (type1), NOP_EXPR, op);\n+\t\tgimple_seq_add_stmt_without_update (&seq, g);\n+\t\top = gimple_assign_lhs (g);\n+\t      }\n+\t    tree type = TREE_TYPE (r->exp);\n+\t    tree exp = r->exp;\n+\t    if (id >= l && !useless_type_conversion_p (type1, type))\n+\t      {\n+\t\tg = gimple_build_assign (make_ssa_name (type1), NOP_EXPR, exp);\n+\t\tgimple_seq_add_stmt_without_update (&seq, g);\n+\t\texp = gimple_assign_lhs (g);\n+\t      }\n+\t    g = gimple_build_assign (make_ssa_name (id >= l ? type1 : type2),\n+\t\t\t\t     (b & 1) ? BIT_AND_EXPR : BIT_IOR_EXPR,\n+\t\t\t\t     op, exp);\n+\t    gimple_seq_add_stmt_without_update (&seq, g);\n+\t    op = gimple_assign_lhs (g);\n+\t  }\n+\tcandidates.pop ();\n+\tif (update_range_test (&ranges[k - 1], NULL, candidates.address (),\n+\t\t\t       candidates.length (), opcode, ops, op,\n+\t\t\t       seq, true, ranges[k - 1].low,\n+\t\t\t       ranges[k - 1].low, strict_overflow_p))\n+\t  any_changes = true;\n+\telse\n+\t  gimple_seq_discard (seq);\n+      }\n+\n+  return any_changes;\n+}\n+\n /* Attempt to optimize for signed a and b where b is known to be >= 0:\n    a >= 0 && a < b into (unsigned) a < (unsigned) b\n    a >= 0 && a <= b into (unsigned) a <= (unsigned) b  */\n@@ -3202,6 +3339,8 @@ optimize_range_tests (enum tree_code opcode,\n   if (lshift_cheap_p (optimize_function_for_speed_p (cfun)))\n     any_changes |= optimize_range_tests_to_bit_test (opcode, first, length,\n \t\t\t\t\t\t     ops, ranges);\n+  any_changes |= optimize_range_tests_cmp_bitwise (opcode, first, length,\n+\t\t\t\t\t\t   ops, ranges);\n   any_changes |= optimize_range_tests_var_bound (opcode, first, length, ops,\n \t\t\t\t\t\t ranges);\n "}]}