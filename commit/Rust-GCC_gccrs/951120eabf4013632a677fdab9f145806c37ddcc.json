{"sha": "951120eabf4013632a677fdab9f145806c37ddcc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTUxMTIwZWFiZjQwMTM2MzJhNjc3ZmRhYjlmMTQ1ODA2YzM3ZGRjYw==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2004-07-15T01:07:53Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-07-15T01:07:53Z"}, "message": "dwarf2out.c (dwarf2out_begin_prologue): Rename IA64_UNWIND_INFO to TARGET_UNWIND_INFO.\n\n\t* dwarf2out.c (dwarf2out_begin_prologue): Rename IA64_UNWIND_INFO\n\tto TARGET_UNWIND_INFO.\n\t* except.c (output_function_exception_table): Ditto.\n\t* except.h: Ditto.\n\t* opts.c (decode_options): Ditto.\n\t* passes.c (rest_of_handle_final): Ditto.\n\t* final.c (final_start_function): Ditto.\n\t(final_scan_insn, final_scan_insn): Replace IA64_UNWIND_EMIT with\n\ttarget hook.\n\t* targhooks.h (default_unwind_emit): Declare.\n\t* targhooks.c (default_unwind_emit): New function.\n\t* target-def.h: Define and use TARGET_UNWIND_EMIT.\n\t* target.h (struct gcc_target): Add unwind_emit.\n\t* config/ia64/ia64.c (TARGET_UNWIND_EMIT): Define.\n\t* config/ia64/ia64.h: Rename IA64_UNWIND_INFO to TARGET_UNWIND_INFO.\n\tRemove IA64_UNWIND_EMIT.\n\t* doc/tm.texi: Document TARGET_UNWIND_EMIT and TARGET_UNWIND_INFO.\n\nFrom-SVN: r84734", "tree": {"sha": "e24df3cf9d27a024b85f7ea213204bbe313c63a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e24df3cf9d27a024b85f7ea213204bbe313c63a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/951120eabf4013632a677fdab9f145806c37ddcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/951120eabf4013632a677fdab9f145806c37ddcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/951120eabf4013632a677fdab9f145806c37ddcc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/951120eabf4013632a677fdab9f145806c37ddcc/comments", "author": null, "committer": null, "parents": [{"sha": "b845ed9ff8113d47c2a38dda58f234e35c89508e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b845ed9ff8113d47c2a38dda58f234e35c89508e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b845ed9ff8113d47c2a38dda58f234e35c89508e"}], "stats": {"total": 98, "additions": 78, "deletions": 20}, "files": [{"sha": "badfc8c32f438fb3f11e4489db4860d2e72305b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/951120eabf4013632a677fdab9f145806c37ddcc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/951120eabf4013632a677fdab9f145806c37ddcc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=951120eabf4013632a677fdab9f145806c37ddcc", "patch": "@@ -1,3 +1,23 @@\n+2004-07-15  Paul Brook  <paul@codesourcery.com>\n+\n+\t* dwarf2out.c (dwarf2out_begin_prologue): Rename IA64_UNWIND_INFO\n+\tto TARGET_UNWIND_INFO.\n+\t* except.c (output_function_exception_table): Ditto.\n+\t* except.h: Ditto.\n+\t* opts.c (decode_options): Ditto.\n+\t* passes.c (rest_of_handle_final): Ditto.\n+\t* final.c (final_start_function): Ditto.\n+\t(final_scan_insn, final_scan_insn): Replace IA64_UNWIND_EMIT with\n+\ttarget hook.\n+\t* targhooks.h (default_unwind_emit): Declare.\n+\t* targhooks.c (default_unwind_emit): New function.\n+\t* target-def.h: Define and use TARGET_UNWIND_EMIT.\n+\t* target.h (struct gcc_target): Add unwind_emit.\n+\t* config/ia64/ia64.c (TARGET_UNWIND_EMIT): Define.\n+\t* config/ia64/ia64.h: Rename IA64_UNWIND_INFO to TARGET_UNWIND_INFO.\n+\tRemove IA64_UNWIND_EMIT.\n+\t* doc/tm.texi: Document TARGET_UNWIND_EMIT and TARGET_UNWIND_INFO.\n+\n 2004-07-14  Richard Henderson  <rth@redhat.com>\n \n \t* print-tree.c (print_node): Handle SSA_NAME."}, {"sha": "85ac56b1d7f7ca3f6fb33cd5d05a9a428ab94216", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/951120eabf4013632a677fdab9f145806c37ddcc/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/951120eabf4013632a677fdab9f145806c37ddcc/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=951120eabf4013632a677fdab9f145806c37ddcc", "patch": "@@ -416,6 +416,9 @@ static const struct attribute_spec ia64_attribute_table[] =\n #undef TARGET_GIMPLIFY_VA_ARG_EXPR\n #define TARGET_GIMPLIFY_VA_ARG_EXPR ia64_gimplify_va_arg\n \n+#undef TARGET_UNWIND_EMIT\n+#define TARGET_UNWIND_EMIT process_for_unwind_directive\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Return 1 if OP is a valid operand for the MEM of a CALL insn.  */"}, {"sha": "a0ff48065946b06a62ef56268f18732094f79b8a", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/951120eabf4013632a677fdab9f145806c37ddcc/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/951120eabf4013632a677fdab9f145806c37ddcc/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=951120eabf4013632a677fdab9f145806c37ddcc", "patch": "@@ -2265,8 +2265,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n extern int ia64_final_schedule;\n \n-#define IA64_UNWIND_INFO\t1\n-#define IA64_UNWIND_EMIT(f,i)\tprocess_for_unwind_directive (f,i)\n+#define TARGET_UNWIND_INFO\t1\n \n #define EH_RETURN_DATA_REGNO(N) ((N) < 4 ? (N) + 15 : INVALID_REGNUM)\n "}, {"sha": "dad9e9a8a500829d23f7e222350ba9334c3e67d8", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/951120eabf4013632a677fdab9f145806c37ddcc/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/951120eabf4013632a677fdab9f145806c37ddcc/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=951120eabf4013632a677fdab9f145806c37ddcc", "patch": "@@ -7503,6 +7503,11 @@ true if this is a placeholder label for an omitted FDE.\n The default is that FDEs are not given nonlocal labels.\n @end deftypefn\n \n+@deftypefn {Taget Hook} void TARGET_UNWIND_EMIT (FILE * @var{stream}, rtx @var{insn})\n+This target hook emits and assembly directives required to unwind the\n+given instruction.  This is only used when TARGET_UNWIND_INFO is set.\n+@end deftypefn\n+\n @node Exception Region Output\n @subsection Assembler Commands for Exception Regions\n \n@@ -7552,6 +7557,11 @@ If this macro is defined to anything, the DWARF 2 unwinder will be used\n instead of inline unwinders and @code{__unwind_function} in the non-@code{setjmp} case.\n @end defmac\n \n+@defmac TARGET_UNWIND_INFO\n+Define this macro if your target has ABI specified unwind tables.  Usually\n+these will be output by @code{TARGET_UNWIND_EMIT}.\n+@end defmac\n+\n @defmac MUST_USE_SJLJ_EXCEPTIONS\n This macro need only be defined if @code{DWARF2_UNWIND_INFO} is\n runtime-variable.  In that case, @file{except.h} cannot correctly"}, {"sha": "a3014ccc01a3f63b6eb20622ea4686c6cf698f1a", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/951120eabf4013632a677fdab9f145806c37ddcc/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/951120eabf4013632a677fdab9f145806c37ddcc/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=951120eabf4013632a677fdab9f145806c37ddcc", "patch": "@@ -2360,7 +2360,7 @@ dwarf2out_begin_prologue (unsigned int line ATTRIBUTE_UNUSED,\n \n   current_function_func_begin_label = 0;\n \n-#ifdef IA64_UNWIND_INFO\n+#ifdef TARGET_UNWIND_INFO\n   /* ??? current_function_func_begin_label is also used by except.c\n      for call-site information.  We must emit this label if it might\n      be used.  */\n@@ -2379,7 +2379,7 @@ dwarf2out_begin_prologue (unsigned int line ATTRIBUTE_UNUSED,\n \t\t\t  current_function_funcdef_no);\n   current_function_func_begin_label = get_identifier (label);\n \n-#ifdef IA64_UNWIND_INFO\n+#ifdef TARGET_UNWIND_INFO\n   /* We can elide the fde allocation if we're not emitting debug info.  */\n   if (! dwarf2out_do_frame ())\n     return;"}, {"sha": "e5d32f999aa45a57936885895b9a848a67797396", "filename": "gcc/except.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/951120eabf4013632a677fdab9f145806c37ddcc/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/951120eabf4013632a677fdab9f145806c37ddcc/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=951120eabf4013632a677fdab9f145806c37ddcc", "patch": "@@ -3598,7 +3598,8 @@ output_function_exception_table (void)\n   if (! cfun->uses_eh_lsda)\n     return;\n \n-#ifdef IA64_UNWIND_INFO\n+#ifdef TARGET_UNWIND_INFO\n+  /* TODO: Move this into target file.  */\n   fputs (\"\\t.personality\\t\", asm_out_file);\n   output_addr_const (asm_out_file, eh_personality_libfunc);\n   fputs (\"\\n\\t.handlerdata\\n\", asm_out_file);"}, {"sha": "58461483cafdbe2fdc84979e5e47be30fb3541ff", "filename": "gcc/except.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/951120eabf4013632a677fdab9f145806c37ddcc/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/951120eabf4013632a677fdab9f145806c37ddcc/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=951120eabf4013632a677fdab9f145806c37ddcc", "patch": "@@ -130,7 +130,7 @@ extern tree (*lang_eh_runtime_type) (tree);\n \n #ifndef MUST_USE_SJLJ_EXCEPTIONS\n # if !(defined (EH_RETURN_DATA_REGNO)\t\t\t\\\n-       && (defined (IA64_UNWIND_INFO)\t\t\t\\\n+       && (defined (TARGET_UNWIND_INFO)\t\t\t\\\n \t   || (DWARF2_UNWIND_INFO\t\t\t\\\n \t       && (defined (EH_RETURN_HANDLER_RTX)\t\\\n \t\t   || defined (HAVE_eh_return)))))\n@@ -152,8 +152,8 @@ extern tree (*lang_eh_runtime_type) (tree);\n #  if !defined(EH_RETURN_HANDLER_RTX) && !defined(HAVE_eh_return)\n     #error \"EH_RETURN_HANDLER_RTX or eh_return required\"\n #  endif\n-#  if !defined(DWARF2_UNWIND_INFO) && !defined(IA64_UNWIND_INFO)\n-    #error \"{DWARF2,IA64}_UNWIND_INFO required\"\n+#  if !defined(DWARF2_UNWIND_INFO) && !defined(TARGET_UNWIND_INFO)\n+    #error \"{DWARF2,TARGET}_UNWIND_INFO required\"\n #  endif\n # endif\n #else"}, {"sha": "fccb8464526736669485637e16da48d8bc32f1dc", "filename": "gcc/final.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/951120eabf4013632a677fdab9f145806c37ddcc/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/951120eabf4013632a677fdab9f145806c37ddcc/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=951120eabf4013632a677fdab9f145806c37ddcc", "patch": "@@ -1347,7 +1347,7 @@ final_start_function (rtx first ATTRIBUTE_UNUSED, FILE *file,\n \n   (*debug_hooks->begin_prologue) (last_linenum, last_filename);\n \n-#if defined (DWARF2_UNWIND_INFO) || defined (IA64_UNWIND_INFO)\n+#if defined (DWARF2_UNWIND_INFO) || defined (TARGET_UNWIND_INFO)\n   if (write_symbols != DWARF2_DEBUG && write_symbols != VMS_AND_DWARF2_DEBUG)\n     dwarf2out_begin_prologue (0, NULL);\n #endif\n@@ -1732,9 +1732,10 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t      && !scan_ahead_for_unlikely_executed_note (insn))\n \t    text_section ();\n \n-#ifdef IA64_UNWIND_INFO\n-\t  IA64_UNWIND_EMIT (asm_out_file, insn);\n+#ifdef TARGET_UNWIND_INFO\n+\t  targetm.asm_out.unwind_emit (asm_out_file, insn);\n #endif\n+\n \t  if (flag_debug_asm)\n \t    fprintf (asm_out_file, \"\\t%s basic block %d\\n\",\n \t\t     ASM_COMMENT_START, NOTE_BASIC_BLOCK (insn)->index);\n@@ -2525,11 +2526,14 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \tif (prescan > 0)\n \t  break;\n \n-#ifdef IA64_UNWIND_INFO\n-\tIA64_UNWIND_EMIT (asm_out_file, insn);\n+#ifdef TARGET_UNWIND_INFO\n+\t/* ??? This will put the directives in the wrong place if\n+\t   get_insn_template outputs assembly directly.  However calling it\n+\t   before get_insn_template breaks if the insns is split.  */\n+\ttargetm.asm_out.unwind_emit (asm_out_file, insn);\n #endif\n-\t/* Output assembler code from the template.  */\n \n+\t/* Output assembler code from the template.  */\n \toutput_asm_insn (template, recog_data.operand);\n \n \t/* If necessary, report the effect that the instruction has on"}, {"sha": "cb9b5f9360323cb02fb3606ccb2bee3f53726271", "filename": "gcc/opts.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/951120eabf4013632a677fdab9f145806c37ddcc/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/951120eabf4013632a677fdab9f145806c37ddcc/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=951120eabf4013632a677fdab9f145806c37ddcc", "patch": "@@ -578,10 +578,10 @@ decode_options (unsigned int argc, const char **argv)\n   target_flags = 0;\n   set_target_switch (\"\");\n \n-  /* Unwind tables are always present in an ABI-conformant IA-64\n-     object file, so the default should be ON.  */\n-#ifdef IA64_UNWIND_INFO\n-  flag_unwind_tables = IA64_UNWIND_INFO;\n+  /* Unwind tables are always present when a target has ABI-specified unwind\n+     tables, so the default should be ON.  */\n+#ifdef TARGET_UNWIND_INFO\n+  flag_unwind_tables = TARGET_UNWIND_INFO;\n #endif\n \n #ifdef OPTIMIZATION_OPTIONS"}, {"sha": "60b4c08d20256bde62d561e41484d6012882b8a0", "filename": "gcc/passes.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/951120eabf4013632a677fdab9f145806c37ddcc/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/951120eabf4013632a677fdab9f145806c37ddcc/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=951120eabf4013632a677fdab9f145806c37ddcc", "patch": "@@ -457,15 +457,15 @@ rest_of_handle_final (void)\n     final (get_insns (), asm_out_file, optimize, 0);\n     final_end_function ();\n \n-#ifdef IA64_UNWIND_INFO\n+#ifdef TARGET_UNWIND_INFO\n     /* ??? The IA-64 \".handlerdata\" directive must be issued before\n        the \".endp\" directive that closes the procedure descriptor.  */\n     output_function_exception_table ();\n #endif\n \n     assemble_end_function (current_function_decl, fnname);\n \n-#ifndef IA64_UNWIND_INFO\n+#ifndef TARGET_UNWIND_INFO\n     /* Otherwise, it feels unclean to switch sections in the middle.  */\n     output_function_exception_table ();\n #endif"}, {"sha": "4cf40b5b8c61688ca28a0a1a606a10aed9a273ca", "filename": "gcc/target-def.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/951120eabf4013632a677fdab9f145806c37ddcc/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/951120eabf4013632a677fdab9f145806c37ddcc/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=951120eabf4013632a677fdab9f145806c37ddcc", "patch": "@@ -62,6 +62,10 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_ASM_EMIT_UNWIND_LABEL default_emit_unwind_label\n #endif\n \n+#ifndef TARGET_UNWIND_EMIT\n+#define TARGET_UNWIND_EMIT default_unwind_emit\n+#endif\n+\n #ifndef TARGET_ASM_INTERNAL_LABEL\n #define TARGET_ASM_INTERNAL_LABEL default_internal_label\n #endif\n@@ -195,6 +199,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \t\t\tTARGET_ASM_INTEGER,\t\t\t\\\n \t\t\tTARGET_ASM_GLOBALIZE_LABEL,\t\t\\\n                         TARGET_ASM_EMIT_UNWIND_LABEL,           \\\n+\t\t\tTARGET_UNWIND_EMIT,\t\t\t\\\n \t\t\tTARGET_ASM_INTERNAL_LABEL,\t\t\\\n \t\t\tTARGET_ASM_ASSEMBLE_VISIBILITY,\t\t\\\n \t\t\tTARGET_ASM_FUNCTION_PROLOGUE,\t\t\\"}, {"sha": "2a304a02dbe9152209f782bfb696cabef5394a3f", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/951120eabf4013632a677fdab9f145806c37ddcc/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/951120eabf4013632a677fdab9f145806c37ddcc/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=951120eabf4013632a677fdab9f145806c37ddcc", "patch": "@@ -85,6 +85,9 @@ struct gcc_target\n        this is only a placeholder for an omitted FDE.  */\n     void (* unwind_label) (FILE *, tree, int, int);\n \n+    /* Emit any directives required to unwind this instruction.  */\n+    void (* unwind_emit) (FILE *, rtx);\n+\n     /* Output an internal label.  */\n     void (* internal_label) (FILE *, const char *, unsigned long);\n "}, {"sha": "3eff2fd4f503a0ba8685a271be4d8e8de96cfebf", "filename": "gcc/targhooks.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/951120eabf4013632a677fdab9f145806c37ddcc/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/951120eabf4013632a677fdab9f145806c37ddcc/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=951120eabf4013632a677fdab9f145806c37ddcc", "patch": "@@ -190,3 +190,14 @@ hook_pass_by_reference_must_pass_in_stack (CUMULATIVE_ARGS *c ATTRIBUTE_UNUSED,\n {\n   return targetm.calls.must_pass_in_stack (mode, type);\n }\n+\n+\n+/* Emit any directives required to unwind this instruction.  */\n+\n+void\n+default_unwind_emit (FILE * stream ATTRIBUTE_UNUSED,\n+\t\t     rtx insn ATTRIBUTE_UNUSED)\n+{\n+  /* Should never happen.  */\n+  abort ();\n+}"}, {"sha": "5fa6a5532362fffbcd42c90a9bf4eba084f2fb9a", "filename": "gcc/targhooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/951120eabf4013632a677fdab9f145806c37ddcc/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/951120eabf4013632a677fdab9f145806c37ddcc/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=951120eabf4013632a677fdab9f145806c37ddcc", "patch": "@@ -39,3 +39,5 @@ extern bool hook_pass_by_reference_false\n   (CUMULATIVE_ARGS *, enum machine_mode mode, tree, bool);\n extern bool hook_pass_by_reference_must_pass_in_stack\n   (CUMULATIVE_ARGS *, enum machine_mode mode, tree, bool);\n+\n+extern void default_unwind_emit (FILE *, rtx);"}]}