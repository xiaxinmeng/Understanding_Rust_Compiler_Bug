{"sha": "49bf49bb6174734879adcba7fb340c1c8f5dd253", "node_id": "C_kwDOANBUbNoAKDQ5YmY0OWJiNjE3NDczNDg3OWFkY2JhN2ZiMzQwYzFjOGY1ZGQyNTM", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-12-12T07:56:41Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-12-12T08:50:29Z"}, "message": "Revert parts of ADDR_EXPR/CONSTRUCTOR treatment change in match.pd\n\nThis reverts the part that substitutes from the definition of an\nSSA name to the capture, thus ADDR_EXPR@0 eventually yielding\n&y_1->a[i_2] instead of _3.  That's because I didn't think of\nhow to deal with substituting @0 in the result pattern.  So\nthe following re-instantiates the SSA def CONSTRUCTOR handling\nand in the ADDR_EXPR helpers used by match.pd handles SSA names\ndefined to ADDR_EXPRs transparently.\n\n\t* genmatch.cc (dt_simplify::gen): Revert last change.\n\t* match.pd: Revert simplification of CONSTUCTOR leaf handling.\n\t(&x cmp SSA_NAME): Handle ADDR_EXPR in SSA defs.\n\t* fold-const.cc (split_address_to_core_and_offset): Handle\n\tADDR_EXPRs in SSA defs.\n\t(address_compare): Likewise.", "tree": {"sha": "190d2ed74771c42335ffcadd58ede29f64f030ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/190d2ed74771c42335ffcadd58ede29f64f030ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49bf49bb6174734879adcba7fb340c1c8f5dd253", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49bf49bb6174734879adcba7fb340c1c8f5dd253", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49bf49bb6174734879adcba7fb340c1c8f5dd253", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49bf49bb6174734879adcba7fb340c1c8f5dd253/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dc5d6b1e7ec8822f5bd78761962ca2c85d4a2b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dc5d6b1e7ec8822f5bd78761962ca2c85d4a2b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dc5d6b1e7ec8822f5bd78761962ca2c85d4a2b4"}], "stats": {"total": 51, "additions": 28, "deletions": 23}, "files": [{"sha": "e4c43fbe8cb46604b912e623217aacf0c8bbb685", "filename": "gcc/fold-const.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49bf49bb6174734879adcba7fb340c1c8f5dd253/gcc%2Ffold-const.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49bf49bb6174734879adcba7fb340c1c8f5dd253/gcc%2Ffold-const.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.cc?ref=49bf49bb6174734879adcba7fb340c1c8f5dd253", "patch": "@@ -16344,6 +16344,11 @@ split_address_to_core_and_offset (tree exp,\n   poly_int64 bitsize;\n   location_t loc = EXPR_LOCATION (exp);\n \n+  if (TREE_CODE (exp) == SSA_NAME)\n+    if (gassign *def = dyn_cast <gassign *> (SSA_NAME_DEF_STMT (exp)))\n+      if (gimple_assign_rhs_code (def) == ADDR_EXPR)\n+\texp = gimple_assign_rhs1 (def);\n+\n   if (TREE_CODE (exp) == ADDR_EXPR)\n     {\n       core = get_inner_reference (TREE_OPERAND (exp, 0), &bitsize, pbitpos,\n@@ -16628,6 +16633,10 @@ address_compare (tree_code code, tree type, tree op0, tree op1,\n \t\t tree &base0, tree &base1, poly_int64 &off0, poly_int64 &off1,\n \t\t bool generic)\n {\n+  if (TREE_CODE (op0) == SSA_NAME)\n+    op0 = gimple_assign_rhs1 (SSA_NAME_DEF_STMT (op0));\n+  if (TREE_CODE (op1) == SSA_NAME)\n+    op1 = gimple_assign_rhs1 (SSA_NAME_DEF_STMT (op1));\n   gcc_checking_assert (TREE_CODE (op0) == ADDR_EXPR);\n   gcc_checking_assert (TREE_CODE (op1) == ADDR_EXPR);\n   base0 = get_addr_base_and_unit_offset (TREE_OPERAND (op0, 0), &off0);"}, {"sha": "b56c17711e05d25e6ad38aa42e43e823bba20818", "filename": "gcc/genmatch.cc", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49bf49bb6174734879adcba7fb340c1c8f5dd253/gcc%2Fgenmatch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49bf49bb6174734879adcba7fb340c1c8f5dd253/gcc%2Fgenmatch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.cc?ref=49bf49bb6174734879adcba7fb340c1c8f5dd253", "patch": "@@ -3607,26 +3607,14 @@ dt_simplify::gen (FILE *f, int indent, bool gimple, int depth ATTRIBUTE_UNUSED)\n   if (s->capture_max >= 0)\n     {\n       char opname[20];\n-      fprintf_indent (f, indent, \"tree captures[%u] ATTRIBUTE_UNUSED = {\",\n-\t\t      s->capture_max + 1);\n+      fprintf_indent (f, indent, \"tree captures[%u] ATTRIBUTE_UNUSED = { %s\",\n+\t\t      s->capture_max + 1, indexes[0]->get_name (opname));\n \n-      for (int i = 0; i <= s->capture_max; ++i)\n+      for (int i = 1; i <= s->capture_max; ++i)\n \t{\n \t  if (!indexes[i])\n \t    break;\n-\t  const char *opstr = indexes[i]->get_name (opname);\n-\t  expr *e = dyn_cast <expr *> (indexes[i]->op);\n-\t  fputs (i == 0 ? \" \" : \", \", f);\n-\t  if (e && gimple\n-\t      /* Transparently handle picking up CONSTRUCTOR and ADDR_EXPR\n-\t\t leafs if they appear in a separate definition.  */\n-\t      && (*e->operation == CONSTRUCTOR\n-\t\t  || *e->operation == ADDR_EXPR))\n-\t    fprintf (f, \"(TREE_CODE (%s) == SSA_NAME \"\n-\t\t     \"? gimple_assign_rhs1 (SSA_NAME_DEF_STMT (%s)) : %s)\",\n-\t\t     opstr, opstr, opstr);\n-\t  else\n-\t    fprintf (f, \"%s\", opstr);\n+\t  fprintf (f, \", %s\", indexes[i]->get_name (opname));\n \t}\n       fprintf (f, \" };\\n\");\n     }"}, {"sha": "fdba5833beb8f0029a2b11cae0ac4d85e4118f85", "filename": "gcc/match.pd", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49bf49bb6174734879adcba7fb340c1c8f5dd253/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49bf49bb6174734879adcba7fb340c1c8f5dd253/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=49bf49bb6174734879adcba7fb340c1c8f5dd253", "patch": "@@ -3936,7 +3936,8 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n (simplify\n   (view_convert CONSTRUCTOR@0)\n   (with\n-   { tree ctor = @0; }\n+   { tree ctor = (TREE_CODE (@0) == SSA_NAME\n+\t\t  ? gimple_assign_rhs1 (SSA_NAME_DEF_STMT (@0)) : @0); }\n    (switch\n     (if (CONSTRUCTOR_NELTS (ctor) == 0)\n      { build_zero_cst (type); })\n@@ -5735,19 +5736,23 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   /* SSA names are canonicalized to 2nd place.  */\n   (cmp addr@0 SSA_NAME@1)\n   (with\n-   { poly_int64 off; tree base; }\n+   {\n+     poly_int64 off; tree base;\n+     tree addr = (TREE_CODE (@0) == SSA_NAME\n+\t\t  ? gimple_assign_rhs1 (SSA_NAME_DEF_STMT (@0)) : @0);\n+   }\n    /* A local variable can never be pointed to by\n       the default SSA name of an incoming parameter.  */\n    (if (SSA_NAME_IS_DEFAULT_DEF (@1)\n \t&& TREE_CODE (SSA_NAME_VAR (@1)) == PARM_DECL\n-\t&& (base = get_base_address (TREE_OPERAND (@0, 0)))\n+\t&& (base = get_base_address (TREE_OPERAND (addr, 0)))\n \t&& TREE_CODE (base) == VAR_DECL\n \t&& auto_var_in_fn_p (base, current_function_decl))\n     (if (cmp == NE_EXPR)\n      { constant_boolean_node (true, type); }\n      { constant_boolean_node (false, type); })\n     /* If the address is based on @1 decide using the offset.  */\n-    (if ((base = get_addr_base_and_unit_offset (TREE_OPERAND (@0, 0), &off))\n+    (if ((base = get_addr_base_and_unit_offset (TREE_OPERAND (addr, 0), &off))\n \t && TREE_CODE (base) == MEM_REF\n \t && TREE_OPERAND (base, 0) == @1)\n      (with { off += mem_ref_offset (base).force_shwi (); }\n@@ -7302,7 +7307,8 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t\t  == tree_to_uhwi (TYPE_SIZE (TREE_TYPE (TREE_TYPE (@0))))))))\n   (with\n    {\n-     tree ctor = @0;\n+     tree ctor = (TREE_CODE (@0) == SSA_NAME\n+\t\t  ? gimple_assign_rhs1 (SSA_NAME_DEF_STMT (@0)) : @0);\n      tree eltype = TREE_TYPE (TREE_TYPE (ctor));\n      unsigned HOST_WIDE_INT width = tree_to_uhwi (TYPE_SIZE (eltype));\n      unsigned HOST_WIDE_INT n = tree_to_uhwi (@1);\n@@ -7950,7 +7956,8 @@ and,\n /* Fold reduction of a single nonzero element constructor.  */\n (for reduc (IFN_REDUC_PLUS IFN_REDUC_IOR IFN_REDUC_XOR)\n   (simplify (reduc (CONSTRUCTOR@0))\n-    (with { tree ctor = @0;\n+    (with { tree ctor = (TREE_CODE (@0) == SSA_NAME\n+\t\t\t ? gimple_assign_rhs1 (SSA_NAME_DEF_STMT (@0)) : @0);\n \t    tree elt = ctor_single_nonzero_element (ctor); }\n       (if (elt\n \t   && !HONOR_SNANS (type)\n@@ -8169,7 +8176,8 @@ and,\n \n (match vec_same_elem_p\n  CONSTRUCTOR@0\n- (if (uniform_vector_p (@0))))\n+ (if (TREE_CODE (@0) == SSA_NAME\n+      && uniform_vector_p (gimple_assign_rhs1 (SSA_NAME_DEF_STMT (@0))))))\n \n (match vec_same_elem_p\n  @0"}]}