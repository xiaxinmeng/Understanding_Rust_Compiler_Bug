{"sha": "94852c8ec4eef2ad17846c714e469ea000127dec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ4NTJjOGVjNGVlZjJhZDE3ODQ2YzcxNGU0NjllYTAwMDEyN2RlYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-11-10T10:14:02Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-11-10T10:14:02Z"}, "message": "re PR tree-optimization/68240 (compilation hangs on valid code at -O1 and above on x86_64-linux-gnu)\n\n2015-11-10  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/68240\n\t* tree-ssa-sccvn.c (cond_stmts_equal_p): Handle commutative compares\n\tproperly.\n\t(visit_phi): For PHIs with just a single executable edge\n\ttake its value directly.\n\t(expressions_equal_p): Handle VN_TOP properly.\n\n\t* gcc.dg/torture/pr68240.c: New testcase.\n\nFrom-SVN: r230095", "tree": {"sha": "2f3eeb73d87f9579075107f54e3e02459357ff78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f3eeb73d87f9579075107f54e3e02459357ff78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94852c8ec4eef2ad17846c714e469ea000127dec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94852c8ec4eef2ad17846c714e469ea000127dec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94852c8ec4eef2ad17846c714e469ea000127dec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94852c8ec4eef2ad17846c714e469ea000127dec/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ef785d9f193c035350a2f01223ccd87391226323", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef785d9f193c035350a2f01223ccd87391226323", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef785d9f193c035350a2f01223ccd87391226323"}], "stats": {"total": 54, "additions": 46, "deletions": 8}, "files": [{"sha": "3bc856546c657fbde5c9ec2170f6ed9db4e855c9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94852c8ec4eef2ad17846c714e469ea000127dec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94852c8ec4eef2ad17846c714e469ea000127dec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=94852c8ec4eef2ad17846c714e469ea000127dec", "patch": "@@ -1,3 +1,12 @@\n+2015-11-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/68240\n+\t* tree-ssa-sccvn.c (cond_stmts_equal_p): Handle commutative compares\n+\tproperly.\n+\t(visit_phi): For PHIs with just a single executable edge\n+\ttake its value directly.\n+\t(expressions_equal_p): Handle VN_TOP properly.\n+\n 2015-11-10  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-data-refs.c (vect_slp_analyze_node_dependences):"}, {"sha": "f2a7d3f6f96514c8bc4195a01318ac5be26df83d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94852c8ec4eef2ad17846c714e469ea000127dec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94852c8ec4eef2ad17846c714e469ea000127dec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=94852c8ec4eef2ad17846c714e469ea000127dec", "patch": "@@ -1,3 +1,8 @@\n+2015-11-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/68240\n+\t* gcc.dg/torture/pr68240.c: New testcase.\n+\n 2015-11-10  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/56118"}, {"sha": "b6d97902300ceb1ae96bd9039b5216091deee26f", "filename": "gcc/testsuite/gcc.dg/torture/pr68240.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94852c8ec4eef2ad17846c714e469ea000127dec/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr68240.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94852c8ec4eef2ad17846c714e469ea000127dec/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr68240.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr68240.c?ref=94852c8ec4eef2ad17846c714e469ea000127dec", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+\n+int a, b, f;\n+\n+void\n+fn1 ()\n+{\n+  int c = 1, d, e = 1;\n+  a = 1; \n+  for (; f;)\n+    b = (c && (d = (e && a)));\n+}"}, {"sha": "2ac382842d3610a6686413c050e26331690eabca", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94852c8ec4eef2ad17846c714e469ea000127dec/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94852c8ec4eef2ad17846c714e469ea000127dec/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=94852c8ec4eef2ad17846c714e469ea000127dec", "patch": "@@ -2760,11 +2760,15 @@ cond_stmts_equal_p (gcond *cond1, gcond *cond2, bool *inverted_p)\n   else\n     return false;\n \n-  if (! expressions_equal_p (vn_valueize (lhs1), vn_valueize (lhs2))\n-      || ! expressions_equal_p (vn_valueize (rhs1), vn_valueize (rhs2)))\n-    return false;\n-\n-  return true;\n+  lhs1 = vn_valueize (lhs1);\n+  rhs1 = vn_valueize (rhs1);\n+  lhs2 = vn_valueize (lhs2);\n+  rhs2 = vn_valueize (rhs2);\n+  return ((expressions_equal_p (lhs1, lhs2)\n+\t   && expressions_equal_p (rhs1, rhs2))\n+\t  || (commutative_tree_code (code1)\n+\t      && expressions_equal_p (lhs1, rhs2)\n+\t      && expressions_equal_p (rhs1, lhs2)));\n }\n \n /* Compare two phi entries for equality, ignoring VN_TOP arguments.  */\n@@ -3379,6 +3383,7 @@ visit_phi (gimple *phi)\n   tree result;\n   tree sameval = VN_TOP;\n   bool allsame = true;\n+  unsigned n_executable = 0;\n \n   /* TODO: We could check for this in init_sccvn, and replace this\n      with a gcc_assert.  */\n@@ -3394,6 +3399,7 @@ visit_phi (gimple *phi)\n       {\n \ttree def = PHI_ARG_DEF_FROM_EDGE (phi, e);\n \n+\t++n_executable;\n \tif (TREE_CODE (def) == SSA_NAME)\n \t  def = SSA_VAL (def);\n \tif (def == VN_TOP)\n@@ -3408,9 +3414,11 @@ visit_phi (gimple *phi)\n       }\n   \n   /* If none of the edges was executable or all incoming values are\n-     undefined keep the value-number at VN_TOP.  */\n-  if (sameval == VN_TOP)\n-    return set_ssa_val_to (PHI_RESULT (phi), VN_TOP);\n+     undefined keep the value-number at VN_TOP.  If only a single edge\n+     is exectuable use its value.  */\n+  if (sameval == VN_TOP\n+      || n_executable == 1)\n+    return set_ssa_val_to (PHI_RESULT (phi), sameval);\n \n   /* First see if it is equivalent to a phi node in this block.  We prefer\n      this as it allows IV elimination - see PRs 66502 and 67167.  */\n@@ -4610,6 +4618,10 @@ expressions_equal_p (tree e1, tree e2)\n   if (e1 == e2)\n     return true;\n \n+  /* If either one is VN_TOP consider them equal.  */\n+  if (e1 == VN_TOP || e2 == VN_TOP)\n+    return true;\n+\n   /* If only one of them is null, they cannot be equal.  */\n   if (!e1 || !e2)\n     return false;"}]}