{"sha": "07c60b8e33c614a6cdd9fe3de7f409319b6a239a", "node_id": "C_kwDOANBUbNoAKDA3YzYwYjhlMzNjNjE0YTZjZGQ5ZmUzZGU3ZjQwOTMxOWI2YTIzOWE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-04T09:37:48Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-11T22:49:48Z"}, "message": "fortran, libgfortran: -mabi=ieeelongdouble I/O\n\nThe following patch adds the compiler and library side of -mabi=ieeelongdouble\nI/O support.\n\n2022-01-04  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/fortran/\n\t* trans-io.c (transfer_namelist_element): Use gfc_type_abi_kind,\n\tformatting fixes.\n\t(transfer_expr): Use gfc_type_abi_kind, use *REAL128* APIs even\n\tfor abi_kind == 17.\nlibgfortran/\n\t* libgfortran.h (__acoshieee128, __acosieee128, __asinhieee128,\n\t__asinieee128, __atan2ieee128, __atanhieee128, __atanieee128,\n\t__coshieee128, __cosieee128, __erfieee128, __expieee128,\n\t__fabsieee128, __jnieee128, __log10ieee128, __logieee128,\n\t__powieee128, __sinhieee128, __sinieee128, __sqrtieee128,\n\t__tanhieee128, __tanieee128, __ynieee128): Formatting fixes.\n\t(__strtoieee128, __snprintfieee128): Declare.\n\t* io/io.h (default_width_for_float, default_precision_for_float):\n\tHandle kind == 17.\n\t* io/size_from_kind.c (size_from_real_kind, size_from_complex_kind):\n\tLikewise.\n\t* io/read.c (set_integer, si_max, convert_real, convert_infnan,\n\tread_f): Likewise.\n\t* io/write.c (extract_uint, size_from_kind, set_fnode_default):\n\tLikewise.\n\t* io/write_float.def (DTOA2Q, FDTOA2Q): Define for HAVE_GFC_REAL_17.\n\t(determine_en_precision, get_float_string): Handle kind == 17.\n\t* io/transfer128.c: Use also for HAVE_GFC_REAL_17, but don't drag in\n\tlibquadmath if POWER_IEEE128.\n\t* Makefile.am (comma, PREPROCESS): New variables.\n\t(gfortran.ver): New goal.\n\t(version_arg, version_dep): Use gfortran.ver instead of\n\t$(srcdir)/gfortran.map.\n\t(gfortran.map-sun): Depend on and use gfortran.ver instead of\n\t$(srcdir)/gfortran.map.\n\t(BUILT_SOURCES): Add $(version_dep).\n\t* Makefile.in: Regenerated.\n\t* gfortran.map (GFORTRAN_8): Don't export\n\t_gfortran_transfer_complex128, _gfortran_transfer_complex128_write,\n\t_gfortran_transfer_real128 and _gfortran_transfer_real128_write if\n\tHAVE_GFC_REAL_17 is defined.\n\t(GFORTRAN_12): Export those here instead.", "tree": {"sha": "67f8ad50f7a5163e2ff5f9c1b1936decc874e1e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67f8ad50f7a5163e2ff5f9c1b1936decc874e1e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07c60b8e33c614a6cdd9fe3de7f409319b6a239a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07c60b8e33c614a6cdd9fe3de7f409319b6a239a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07c60b8e33c614a6cdd9fe3de7f409319b6a239a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07c60b8e33c614a6cdd9fe3de7f409319b6a239a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bff4226f5a01da2f93d4e096a1c9317a553438a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bff4226f5a01da2f93d4e096a1c9317a553438a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bff4226f5a01da2f93d4e096a1c9317a553438a3"}], "stats": {"total": 268, "additions": 207, "deletions": 61}, "files": [{"sha": "2730b47501b811bf3b30e177c7b8614dff343653", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c60b8e33c614a6cdd9fe3de7f409319b6a239a/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c60b8e33c614a6cdd9fe3de7f409319b6a239a/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=07c60b8e33c614a6cdd9fe3de7f409319b6a239a", "patch": "@@ -1765,18 +1765,17 @@ transfer_namelist_element (stmtblock_t * block, const char * var_name,\n   else\n     tmp = build_int_cst (gfc_charlen_type_node, 0);\n \n+  int abi_kind = gfc_type_abi_kind (ts);\n   if (dtio_proc == null_pointer_node)\n-    tmp = build_call_expr_loc (input_location,\n-\t\t\t   iocall[IOCALL_SET_NML_VAL], 6,\n-\t\t\t   dt_parm_addr, addr_expr, string,\n-\t\t\t   build_int_cst (gfc_int4_type_node, ts->kind),\n-\t\t\t   tmp, dtype);\n+    tmp = build_call_expr_loc (input_location, iocall[IOCALL_SET_NML_VAL], 6,\n+\t\t\t       dt_parm_addr, addr_expr, string,\n+\t\t\t       build_int_cst (gfc_int4_type_node, abi_kind),\n+\t\t\t       tmp, dtype);\n   else\n-    tmp = build_call_expr_loc (input_location,\n-\t\t\t   iocall[IOCALL_SET_NML_DTIO_VAL], 8,\n-\t\t\t   dt_parm_addr, addr_expr, string,\n-\t\t\t   build_int_cst (gfc_int4_type_node, ts->kind),\n-\t\t\t   tmp, dtype, dtio_proc, vtable);\n+    tmp = build_call_expr_loc (input_location, iocall[IOCALL_SET_NML_DTIO_VAL],\n+\t\t\t       8, dt_parm_addr, addr_expr, string,\n+\t\t\t       build_int_cst (gfc_int4_type_node, abi_kind),\n+\t\t\t       tmp, dtype, dtio_proc, vtable);\n   gfc_add_expr_to_block (block, tmp);\n \n   /* If the object is an array, transfer rank times:\n@@ -2298,7 +2297,7 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr,\n       ts->kind = gfc_index_integer_kind;\n     }\n \n-  kind = ts->kind;\n+  kind = gfc_type_abi_kind (ts);\n   function = NULL;\n   arg2 = NULL;\n   arg3 = NULL;\n@@ -2318,14 +2317,14 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr,\n       arg2 = build_int_cst (integer_type_node, kind);\n       if (last_dt == READ)\n \t{\n-\t  if (gfc_real16_is_float128 && ts->kind == 16)\n+\t  if ((gfc_real16_is_float128 && kind == 16) || kind == 17)\n \t    function = iocall[IOCALL_X_REAL128];\n \t  else\n \t    function = iocall[IOCALL_X_REAL];\n \t}\n       else\n \t{\n-\t  if (gfc_real16_is_float128 && ts->kind == 16)\n+\t  if ((gfc_real16_is_float128 && kind == 16) || kind == 17)\n \t    function = iocall[IOCALL_X_REAL128_WRITE];\n \t  else\n \t    function = iocall[IOCALL_X_REAL_WRITE];\n@@ -2337,14 +2336,14 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr,\n       arg2 = build_int_cst (integer_type_node, kind);\n       if (last_dt == READ)\n \t{\n-\t  if (gfc_real16_is_float128 && ts->kind == 16)\n+\t  if ((gfc_real16_is_float128 && kind == 16) || kind == 17)\n \t    function = iocall[IOCALL_X_COMPLEX128];\n \t  else\n \t    function = iocall[IOCALL_X_COMPLEX];\n \t}\n       else\n \t{\n-\t  if (gfc_real16_is_float128 && ts->kind == 16)\n+\t  if ((gfc_real16_is_float128 && kind == 16) || kind == 17)\n \t    function = iocall[IOCALL_X_COMPLEX128_WRITE];\n \t  else\n \t    function = iocall[IOCALL_X_COMPLEX_WRITE];"}, {"sha": "9fb12ba3d7f14a16b9f99479e7fc0c5e57ea6ad2", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c60b8e33c614a6cdd9fe3de7f409319b6a239a/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c60b8e33c614a6cdd9fe3de7f409319b6a239a/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=07c60b8e33c614a6cdd9fe3de7f409319b6a239a", "patch": "@@ -8,18 +8,26 @@ gcc_version := $(shell @get_gcc_base_ver@ $(top_srcdir)/../gcc/BASE-VER)\n \n ## Symbol versioning (copied from libssp).\n if LIBGFOR_USE_SYMVER\n+# -Wc is only a libtool option.\n+comma = ,\n+PREPROCESS = $(subst -Wc$(comma), , $(COMPILE)) -E\n+\n+gfortran.ver: $(srcdir)/gfortran.map kinds.inc\n+\t$(EGREP) -v '#(#| |$$)' $< | \\\n+\t  $(PREPROCESS) -P -include config.h -include kinds.inc - > $@ || (rm -f $@ ; exit 1)\n+\n if LIBGFOR_USE_SYMVER_GNU\n-version_arg = -Wl,--version-script=$(srcdir)/gfortran.map\n-version_dep = $(srcdir)/gfortran.map\n+version_arg = -Wl,--version-script=gfortran.ver\n+version_dep = gfortran.ver\n endif\n if LIBGFOR_USE_SYMVER_SUN\n-version_arg = -Wl,-M,gfortran.map-sun\n-version_dep = gfortran.map-sun\n-gfortran.map-sun : $(srcdir)/gfortran.map \\\n+version_arg = -Wl,-M,gfortran.ver-sun\n+version_dep = gfortran.ver-sun gfortran.ver\n+gfortran.map-sun : gfortran.ver \\\n \t\t$(top_srcdir)/../contrib/make_sunver.pl \\\n \t\t$(libgfortran_la_OBJECTS) $(libgfortran_la_LIBADD)\n \tperl $(top_srcdir)/../contrib/make_sunver.pl \\\n-\t  $(srcdir)/gfortran.map \\\n+\t  gfortran.ver \\\n \t  $(libgfortran_la_OBJECTS:%.lo=.libs/%.o) \\\n \t `echo $(libgfortran_la_LIBADD) | \\\n \t    sed 's,/\\([^/.]*\\)\\.la,/.libs/\\1.a,g'` \\\n@@ -1110,7 +1118,7 @@ ieee_arithmetic.mod: ieee_arithmetic.lo\n \t:\n \n BUILT_SOURCES=$(gfor_built_src) $(gfor_built_specific_src) \\\n-\t$(gfor_built_specific2_src) $(gfor_misc_specifics)\n+\t$(gfor_built_specific2_src) $(gfor_misc_specifics) $(version_dep)\n \n prereq_SRC = $(gfor_src) $(gfor_built_src) $(gfor_io_src) \\\n \t$(gfor_helper_src) $(gfor_ieee_src) $(gfor_io_headers) $(gfor_specific_src)"}, {"sha": "da0ad684d21fec87c00b0a61c06d660120892ea7", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c60b8e33c614a6cdd9fe3de7f409319b6a239a/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c60b8e33c614a6cdd9fe3de7f409319b6a239a/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=07c60b8e33c614a6cdd9fe3de7f409319b6a239a", "patch": "@@ -738,12 +738,16 @@ top_builddir = @top_builddir@\n top_srcdir = @top_srcdir@\n ACLOCAL_AMFLAGS = -I .. -I ../config\n gcc_version := $(shell @get_gcc_base_ver@ $(top_srcdir)/../gcc/BASE-VER)\n+\n+# -Wc is only a libtool option.\n+@LIBGFOR_USE_SYMVER_TRUE@comma = ,\n+@LIBGFOR_USE_SYMVER_TRUE@PREPROCESS = $(subst -Wc$(comma), , $(COMPILE)) -E\n @LIBGFOR_USE_SYMVER_FALSE@version_arg = \n-@LIBGFOR_USE_SYMVER_GNU_TRUE@@LIBGFOR_USE_SYMVER_TRUE@version_arg = -Wl,--version-script=$(srcdir)/gfortran.map\n-@LIBGFOR_USE_SYMVER_SUN_TRUE@@LIBGFOR_USE_SYMVER_TRUE@version_arg = -Wl,-M,gfortran.map-sun\n+@LIBGFOR_USE_SYMVER_GNU_TRUE@@LIBGFOR_USE_SYMVER_TRUE@version_arg = -Wl,--version-script=gfortran.ver\n+@LIBGFOR_USE_SYMVER_SUN_TRUE@@LIBGFOR_USE_SYMVER_TRUE@version_arg = -Wl,-M,gfortran.ver-sun\n @LIBGFOR_USE_SYMVER_FALSE@version_dep = \n-@LIBGFOR_USE_SYMVER_GNU_TRUE@@LIBGFOR_USE_SYMVER_TRUE@version_dep = $(srcdir)/gfortran.map\n-@LIBGFOR_USE_SYMVER_SUN_TRUE@@LIBGFOR_USE_SYMVER_TRUE@version_dep = gfortran.map-sun\n+@LIBGFOR_USE_SYMVER_GNU_TRUE@@LIBGFOR_USE_SYMVER_TRUE@version_dep = gfortran.ver\n+@LIBGFOR_USE_SYMVER_SUN_TRUE@@LIBGFOR_USE_SYMVER_TRUE@version_dep = gfortran.ver-sun gfortran.ver\n gfor_c_HEADERS = ISO_Fortran_binding.h\n gfor_cdir = $(libdir)/gcc/$(target_alias)/$(gcc_version)/include\n LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS)) \\\n@@ -1648,7 +1652,7 @@ intrinsics/random_init.f90\n \n BUILT_SOURCES = $(gfor_built_src) $(gfor_built_specific_src) \\\n \t$(gfor_built_specific2_src) $(gfor_misc_specifics) \\\n-\t$(am__append_7)\n+\t$(version_dep) $(am__append_7)\n prereq_SRC = $(gfor_src) $(gfor_built_src) $(gfor_io_src) \\\n \t$(gfor_helper_src) $(gfor_ieee_src) $(gfor_io_headers) $(gfor_specific_src)\n \n@@ -7607,11 +7611,15 @@ uninstall-am: uninstall-cafexeclibLTLIBRARIES uninstall-gfor_cHEADERS \\\n \n .PRECIOUS: Makefile\n \n-@LIBGFOR_USE_SYMVER_SUN_TRUE@@LIBGFOR_USE_SYMVER_TRUE@gfortran.map-sun : $(srcdir)/gfortran.map \\\n+\n+@LIBGFOR_USE_SYMVER_TRUE@gfortran.ver: $(srcdir)/gfortran.map kinds.inc\n+@LIBGFOR_USE_SYMVER_TRUE@\t$(EGREP) -v '#(#| |$$)' $< | \\\n+@LIBGFOR_USE_SYMVER_TRUE@\t  $(PREPROCESS) -P -include config.h -include kinds.inc - > $@ || (rm -f $@ ; exit 1)\n+@LIBGFOR_USE_SYMVER_SUN_TRUE@@LIBGFOR_USE_SYMVER_TRUE@gfortran.map-sun : gfortran.ver \\\n @LIBGFOR_USE_SYMVER_SUN_TRUE@@LIBGFOR_USE_SYMVER_TRUE@\t\t$(top_srcdir)/../contrib/make_sunver.pl \\\n @LIBGFOR_USE_SYMVER_SUN_TRUE@@LIBGFOR_USE_SYMVER_TRUE@\t\t$(libgfortran_la_OBJECTS) $(libgfortran_la_LIBADD)\n @LIBGFOR_USE_SYMVER_SUN_TRUE@@LIBGFOR_USE_SYMVER_TRUE@\tperl $(top_srcdir)/../contrib/make_sunver.pl \\\n-@LIBGFOR_USE_SYMVER_SUN_TRUE@@LIBGFOR_USE_SYMVER_TRUE@\t  $(srcdir)/gfortran.map \\\n+@LIBGFOR_USE_SYMVER_SUN_TRUE@@LIBGFOR_USE_SYMVER_TRUE@\t  gfortran.ver \\\n @LIBGFOR_USE_SYMVER_SUN_TRUE@@LIBGFOR_USE_SYMVER_TRUE@\t  $(libgfortran_la_OBJECTS:%.lo=.libs/%.o) \\\n @LIBGFOR_USE_SYMVER_SUN_TRUE@@LIBGFOR_USE_SYMVER_TRUE@\t `echo $(libgfortran_la_LIBADD) | \\\n @LIBGFOR_USE_SYMVER_SUN_TRUE@@LIBGFOR_USE_SYMVER_TRUE@\t    sed 's,/\\([^/.]*\\)\\.la,/.libs/\\1.a,g'` \\"}, {"sha": "e0e795c3d489f8111c6dbff49c1ba54a6e8adc36", "filename": "libgfortran/gfortran.map", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c60b8e33c614a6cdd9fe3de7f409319b6a239a/libgfortran%2Fgfortran.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c60b8e33c614a6cdd9fe3de7f409319b6a239a/libgfortran%2Fgfortran.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgfortran.map?ref=07c60b8e33c614a6cdd9fe3de7f409319b6a239a", "patch": "@@ -1295,17 +1295,21 @@ GFORTRAN_8 {\n     _gfortran_transfer_character_wide;\n     _gfortran_transfer_character_wide_write;\n     _gfortran_transfer_character_write;\n+#ifndef HAVE_GFC_REAL_17\n     _gfortran_transfer_complex128;\n     _gfortran_transfer_complex128_write;\n+#endif\n     _gfortran_transfer_complex;\n     _gfortran_transfer_complex_write;\n     _gfortran_transfer_derived;\n     _gfortran_transfer_integer;\n     _gfortran_transfer_integer_write;\n     _gfortran_transfer_logical;\n     _gfortran_transfer_logical_write;\n+#ifndef HAVE_GFC_REAL_17\n     _gfortran_transfer_real128;\n     _gfortran_transfer_real128_write;\n+#endif\n     _gfortran_transfer_real;\n     _gfortran_transfer_real_write;\n     _gfortran_ttynam;\n@@ -1748,4 +1752,10 @@ GFORTRAN_12 {\n   _gfortran_sproduct_c17;\n   _gfortran_ssum_c17;\n   _gfortran_sum_c17;\n+#ifdef HAVE_GFC_REAL_17\n+  _gfortran_transfer_complex128;\n+  _gfortran_transfer_complex128_write;\n+  _gfortran_transfer_real128;\n+  _gfortran_transfer_real128_write;\n+#endif\n } GFORTRAN_10.2;"}, {"sha": "23f63d4593c97c479f0796ba717f8b2f949145af", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c60b8e33c614a6cdd9fe3de7f409319b6a239a/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c60b8e33c614a6cdd9fe3de7f409319b6a239a/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=07c60b8e33c614a6cdd9fe3de7f409319b6a239a", "patch": "@@ -1063,7 +1063,8 @@ default_width_for_float (int kind)\n     {\n     case 4:  return 15;\n     case 8:  return 25;\n-    case 16: return 42;\n+    case 16:\n+    case 17: return 42;\n     default: return  0;\n     }\n }\n@@ -1075,7 +1076,8 @@ default_precision_for_float (int kind)\n     {\n     case 4:  return 7;\n     case 8:  return 16;\n-    case 16: return 33;\n+    case 16:\n+    case 17: return 33;\n     default: return 0;\n     }\n }"}, {"sha": "49d7983a037ed55898d057898bb61a099ea8dba7", "filename": "libgfortran/io/read.c", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c60b8e33c614a6cdd9fe3de7f409319b6a239a/libgfortran%2Fio%2Fread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c60b8e33c614a6cdd9fe3de7f409319b6a239a/libgfortran%2Fio%2Fread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fread.c?ref=07c60b8e33c614a6cdd9fe3de7f409319b6a239a", "patch": "@@ -46,6 +46,14 @@ set_integer (void *dest, GFC_INTEGER_LARGEST value, int length)\n   switch (length)\n     {\n #ifdef HAVE_GFC_INTEGER_16\n+#ifdef HAVE_GFC_REAL_17\n+    case 17:\n+      {\n+\tGFC_INTEGER_16 tmp = value;\n+\tmemcpy (dest, (void *) &tmp, 16);\n+      }\n+      break;\n+#endif\n /* length=10 comes about for kind=10 real/complex BOZ, cf. PR41711. */\n     case 10:\n     case 16:\n@@ -95,7 +103,14 @@ si_max (int length)\n #endif\n \n   switch (length)\n-      {\n+    {\n+#if defined HAVE_GFC_REAL_17\n+    case 17:\n+      value = 1;\n+      for (int n = 1; n < 4 * 16; n++)\n+\tvalue = (value << 2) + 3;\n+      return value;\n+#endif\n #if defined HAVE_GFC_REAL_16 || defined HAVE_GFC_REAL_10\n     case 16:\n     case 10:\n@@ -178,6 +193,15 @@ convert_real (st_parameter_dt *dtp, void *dest, const char *buffer, int length)\n       *((GFC_REAL_16*) dest) = gfc_strtold (buffer, &endptr);\n       break;\n # endif\n+#endif\n+\n+#if defined(HAVE_GFC_REAL_17)\n+    case 17:\n+# if defined(POWER_IEEE128)\n+      *((GFC_REAL_17*) dest) = __strtoieee128 (buffer, &endptr);\n+# else\n+      *((GFC_REAL_17*) dest) = __qmath_(strtoflt128) (buffer, &endptr);\n+# endif\n #endif\n \n     default:\n@@ -259,6 +283,15 @@ convert_infnan (st_parameter_dt *dtp, void *dest, const char *buffer,\n # endif\n #endif\n \n+#if defined(HAVE_GFC_REAL_17)\n+    case 17:\n+      if (is_inf)\n+\t*((GFC_REAL_17*) dest) = plus ? __builtin_infl () : -__builtin_infl ();\n+      else\n+\t*((GFC_REAL_17*) dest) = plus ? __builtin_nanl (\"\") : -__builtin_nanl (\"\");\n+      break;\n+#endif\n+\n     default:\n       internal_error (&dtp->common, \"Unsupported real kind during IO\");\n     }\n@@ -1224,6 +1257,12 @@ read_f (st_parameter_dt *dtp, const fnode *f, char *dest, int length)\n \tbreak;\n #endif\n \n+#ifdef HAVE_GFC_REAL_17\n+      case 17:\n+\t*((GFC_REAL_17 *) dest) = 0.0;\n+\tbreak;\n+#endif\n+\n       default:\n \tinternal_error (&dtp->common, \"Unsupported real kind during IO\");\n     }"}, {"sha": "f09e3409de43cb8a1406a46538bbb3b866ba16af", "filename": "libgfortran/io/size_from_kind.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c60b8e33c614a6cdd9fe3de7f409319b6a239a/libgfortran%2Fio%2Fsize_from_kind.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c60b8e33c614a6cdd9fe3de7f409319b6a239a/libgfortran%2Fio%2Fsize_from_kind.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fsize_from_kind.c?ref=07c60b8e33c614a6cdd9fe3de7f409319b6a239a", "patch": "@@ -48,6 +48,10 @@ size_from_real_kind (int kind)\n #ifdef HAVE_GFC_REAL_16\n     case 16:\n       return sizeof (GFC_REAL_16);\n+#endif\n+#ifdef HAVE_GFC_REAL_17\n+    case 17:\n+      return sizeof (GFC_REAL_17);\n #endif\n     default:\n       return kind;\n@@ -75,6 +79,10 @@ size_from_complex_kind (int kind)\n #ifdef HAVE_GFC_COMPLEX_16\n     case 16:\n       return sizeof (GFC_COMPLEX_16);\n+#endif\n+#ifdef HAVE_GFC_COMPLEX_17\n+    case 17:\n+      return sizeof (GFC_COMPLEX_17);\n #endif\n     default:\n       return 2 * kind;"}, {"sha": "7372ad7b7be009087428c192ab73f94c5ff181a1", "filename": "libgfortran/io/transfer128.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c60b8e33c614a6cdd9fe3de7f409319b6a239a/libgfortran%2Fio%2Ftransfer128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c60b8e33c614a6cdd9fe3de7f409319b6a239a/libgfortran%2Fio%2Ftransfer128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer128.c?ref=07c60b8e33c614a6cdd9fe3de7f409319b6a239a", "patch": "@@ -28,7 +28,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"io.h\"\n \n \n-#if defined(GFC_REAL_16_IS_FLOAT128)\n+#if defined(GFC_REAL_16_IS_FLOAT128) || defined(HAVE_GFC_REAL_17)\n \n /* The prototypes for the called procedures in transfer.c.  */\n \n@@ -65,8 +65,10 @@ export_proto(transfer_complex128_write);\n    write_float; the pointer assignment with USED attribute make sure\n    that there is a non-weakref dependence if the quadmath functions\n    are used. That avoids segfault when libquadmath is statically linked.  */\n+# if !defined(HAVE_GFC_REAL_17) || !defined(POWER_IEEE128)\n static void __attribute__((used)) *tmp1 = strtoflt128;\n static void __attribute__((used)) *tmp2 = quadmath_snprintf;\n+# endif\n \n void\n transfer_real128 (st_parameter_dt *dtp, void *p, int kind)"}, {"sha": "5e025a108b3f3bd30530122be6fcf6d613c8d782", "filename": "libgfortran/io/write.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c60b8e33c614a6cdd9fe3de7f409319b6a239a/libgfortran%2Fio%2Fwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c60b8e33c614a6cdd9fe3de7f409319b6a239a/libgfortran%2Fio%2Fwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite.c?ref=07c60b8e33c614a6cdd9fe3de7f409319b6a239a", "patch": "@@ -648,6 +648,15 @@ extract_uint (const void *p, int len)\n \ti = (GFC_UINTEGER_16) tmp;\n       }\n       break;\n+# ifdef HAVE_GFC_REAL_17\n+    case 17:\n+      {\n+\tGFC_INTEGER_16 tmp = 0;\n+\tmemcpy ((void *) &tmp, p, 16);\n+\ti = (GFC_UINTEGER_16) tmp;\n+      }\n+      break;\n+# endif\n #endif\n     default:\n       internal_error (NULL, \"bad integer kind\");\n@@ -1543,6 +1552,9 @@ size_from_kind (st_parameter_dt *dtp, const fnode *f, int kind)\n \t  size = 4932 + 3;\n \t  break;\n \tcase 16:\n+#ifdef HAVE_GFC_REAL_17\n+\tcase 17:\n+#endif\n \t  size = 4932 + 3;\n \t  break;\n \tdefault:\n@@ -1699,6 +1711,13 @@ set_fnode_default (st_parameter_dt *dtp, fnode *f, int length)\n       f->u.real.e = 4;\n #endif\n       break;\n+#ifdef HAVE_GFC_REAL_17\n+    case 17:\n+      f->u.real.w = 45;\n+      f->u.real.d = 36;\n+      f->u.real.e = 4;\n+      break;\n+#endif\n     default:\n       internal_error (&dtp->common, \"bad real kind\");\n       break;"}, {"sha": "5dadf7bf7665dce1bfec358fb6f51177ceb24b16", "filename": "libgfortran/io/write_float.def", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c60b8e33c614a6cdd9fe3de7f409319b6a239a/libgfortran%2Fio%2Fwrite_float.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c60b8e33c614a6cdd9fe3de7f409319b6a239a/libgfortran%2Fio%2Fwrite_float.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite_float.def?ref=07c60b8e33c614a6cdd9fe3de7f409319b6a239a", "patch": "@@ -834,8 +834,16 @@ snprintf (buffer, size, \"%+-#.*e\", (prec), (val))\n snprintf (buffer, size, \"%+-#.*Le\", (prec), (val))\n \n \n-#if defined(GFC_REAL_16_IS_FLOAT128)\n-#define DTOA2Q(prec,val) \\\n+#if defined(HAVE_GFC_REAL_17)\n+# if defined(POWER_IEEE128)\n+#  define DTOA2Q(prec,val) \\\n+__snprintfieee128 (buffer, size, \"%+-#.*Le\", (prec), (val))\n+# else\n+#  define DTOA2Q(prec,val) \\\n+quadmath_snprintf (buffer, size, \"%+-#.*Qe\", (prec), (val))\n+# endif\n+#elif defined(GFC_REAL_16_IS_FLOAT128)\n+# define DTOA2Q(prec,val) \\\n quadmath_snprintf (buffer, size, \"%+-#.*Qe\", (prec), (val))\n #endif\n \n@@ -849,10 +857,17 @@ snprintf (buffer, size, \"%+-#.*f\", (prec), (val))\n snprintf (buffer, size, \"%+-#.*Lf\", (prec), (val))\n \n \n-#if defined(GFC_REAL_16_IS_FLOAT128)\n-#define FDTOA2Q(prec,val) \\\n-quadmath_snprintf (buffer, size, \"%+-#.*Qf\", \\\n-\t\t\t     (prec), (val))\n+#if defined(HAVE_GFC_REAL_17)\n+# if defined(POWER_IEEE128)\n+#  define FDTOA2Q(prec,val) \\\n+__snprintfieee128 (buffer, size, \"%+-#.*Lf\", (prec), (val))\n+# else\n+# define FDTOA2Q(prec,val) \\\n+quadmath_snprintf (buffer, size, \"%+-#.*Qf\", (prec), (val))\n+# endif\n+#elif defined(GFC_REAL_16_IS_FLOAT128)\n+# define FDTOA2Q(prec,val) \\\n+quadmath_snprintf (buffer, size, \"%+-#.*Qf\", (prec), (val))\n #endif\n \n \n@@ -925,6 +940,11 @@ determine_en_precision (st_parameter_dt *dtp, const fnode *f,\n # endif\n       break;\n #endif\n+#ifdef HAVE_GFC_REAL_17\n+    case 17:\n+      EN_PREC(16,Q)\n+#endif\n+      break;\n     default:\n       internal_error (NULL, \"bad real kind\");\n     }\n@@ -1127,6 +1147,11 @@ get_float_string (st_parameter_dt *dtp, const fnode *f, const char *source,\n       FORMAT_FLOAT(16,L)\n # endif\n       break;\n+#endif\n+#ifdef HAVE_GFC_REAL_17\n+    case 17:\n+      FORMAT_FLOAT(16,Q)\n+      break;\n #endif\n     default:\n       internal_error (NULL, \"bad real kind\");"}, {"sha": "f4fd8aec078570abc5c2e2da0e276e0245af1959", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 48, "deletions": 22, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c60b8e33c614a6cdd9fe3de7f409319b6a239a/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c60b8e33c614a6cdd9fe3de7f409319b6a239a/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=07c60b8e33c614a6cdd9fe3de7f409319b6a239a", "patch": "@@ -1948,28 +1948,54 @@ internal_proto(cshift1_16_c17);\n \n /* Prototypes for the POWER __ieee128 functions.  */\n #ifdef POWER_IEEE128\n-extern __float128 __acoshieee128 (__float128) __attribute__ ((__nothrow__, __leaf__));\n-extern __float128 __acosieee128 (__float128) __attribute__ ((__nothrow__, __leaf__));\n-extern __float128 __asinhieee128 (__float128) __attribute__ ((__nothrow__, __leaf__));\n-extern __float128 __asinieee128 (__float128) __attribute__ ((__nothrow__, __leaf__));\n-extern __float128 __atan2ieee128 (__float128) __attribute__ ((__nothrow__, __leaf__));\n-extern __float128 __atanhieee128 (__float128) __attribute__ ((__nothrow__, __leaf__));\n-extern __float128 __atanieee128 (__float128) __attribute__ ((__nothrow__, __leaf__));\n-extern __float128 __coshieee128 (__float128) __attribute__ ((__nothrow__, __leaf__));\n-extern __float128 __cosieee128 (__float128) __attribute__ ((__nothrow__, __leaf__));\n-extern __float128 __erfieee128 (__float128) __attribute__ ((__nothrow__, __leaf__));\n-extern __float128 __expieee128 (__float128) __attribute__ ((__nothrow__, __leaf__));\n-extern __float128 __fabsieee128 (__float128) __attribute__ ((__nothrow__, __leaf__));\n-extern __float128 __jnieee128 (int, __float128) __attribute__ ((__nothrow__, __leaf__));\n-extern __float128 __log10ieee128 (__float128) __attribute__ ((__nothrow__, __leaf__));\n-extern __float128 __logieee128 (__float128) __attribute__ ((__nothrow__, __leaf__));\n-extern __float128 __powieee128 (__float128) __attribute__ ((__nothrow__, __leaf__));\n-extern __float128 __sinhieee128 (__float128) __attribute__ ((__nothrow__, __leaf__));\n-extern __float128 __sinieee128 (__float128) __attribute__ ((__nothrow__, __leaf__));\n-extern __float128 __sqrtieee128 (__float128) __attribute__ ((__nothrow__, __leaf__));\n-extern __float128 __tanhieee128 (__float128) __attribute__ ((__nothrow__, __leaf__));\n-extern __float128 __tanieee128 (__float128) __attribute__ ((__nothrow__, __leaf__));\n-extern __float128 __ynieee128 (int , __float128) __attribute__ ((__nothrow__, __leaf__));\n+extern __float128 __acoshieee128 (__float128)\n+  __attribute__ ((__nothrow__, __leaf__));\n+extern __float128 __acosieee128 (__float128)\n+  __attribute__ ((__nothrow__, __leaf__));\n+extern __float128 __asinhieee128 (__float128)\n+  __attribute__ ((__nothrow__, __leaf__));\n+extern __float128 __asinieee128 (__float128)\n+  __attribute__ ((__nothrow__, __leaf__));\n+extern __float128 __atan2ieee128 (__float128)\n+  __attribute__ ((__nothrow__, __leaf__));\n+extern __float128 __atanhieee128 (__float128)\n+  __attribute__ ((__nothrow__, __leaf__));\n+extern __float128 __atanieee128 (__float128)\n+  __attribute__ ((__nothrow__, __leaf__));\n+extern __float128 __coshieee128 (__float128)\n+  __attribute__ ((__nothrow__, __leaf__));\n+extern __float128 __cosieee128 (__float128)\n+  __attribute__ ((__nothrow__, __leaf__));\n+extern __float128 __erfieee128 (__float128)\n+  __attribute__ ((__nothrow__, __leaf__));\n+extern __float128 __expieee128 (__float128)\n+  __attribute__ ((__nothrow__, __leaf__));\n+extern __float128 __fabsieee128 (__float128)\n+  __attribute__ ((__nothrow__, __leaf__));\n+extern __float128 __jnieee128 (int, __float128)\n+  __attribute__ ((__nothrow__, __leaf__));\n+extern __float128 __log10ieee128 (__float128)\n+  __attribute__ ((__nothrow__, __leaf__));\n+extern __float128 __logieee128 (__float128)\n+  __attribute__ ((__nothrow__, __leaf__));\n+extern __float128 __powieee128 (__float128)\n+  __attribute__ ((__nothrow__, __leaf__));\n+extern __float128 __sinhieee128 (__float128)\n+  __attribute__ ((__nothrow__, __leaf__));\n+extern __float128 __sinieee128 (__float128)\n+  __attribute__ ((__nothrow__, __leaf__));\n+extern __float128 __sqrtieee128 (__float128)\n+  __attribute__ ((__nothrow__, __leaf__));\n+extern __float128 __tanhieee128 (__float128)\n+  __attribute__ ((__nothrow__, __leaf__));\n+extern __float128 __tanieee128 (__float128)\n+  __attribute__ ((__nothrow__, __leaf__));\n+extern __float128 __ynieee128 (int , __float128)\n+  __attribute__ ((__nothrow__, __leaf__));\n+extern __float128 __strtoieee128 (const char *, char **)\n+  __attribute__ ((__nothrow__, __leaf__));\n+extern int __snprintfieee128 (char *, size_t, const char *, ...)\n+  __attribute__ ((__nothrow__));\n \n #endif\n "}]}