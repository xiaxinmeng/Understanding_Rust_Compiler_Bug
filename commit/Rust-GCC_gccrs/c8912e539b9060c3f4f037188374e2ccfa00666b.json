{"sha": "c8912e539b9060c3f4f037188374e2ccfa00666b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg5MTJlNTM5YjkwNjBjM2Y0ZjAzNzE4ODM3NGUyY2NmYTAwNjY2Yg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-05-28T08:41:27Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2014-05-28T08:41:27Z"}, "message": "rtl.h (set_for_reg_notes): Declare.\n\n2014-05-26  Richard Sandiford  <rdsandiford@googlemail.com>\n            Olivier Hainque  <hainque@adacore.com>\n\n        * rtl.h (set_for_reg_notes): Declare.\n        * emit-rtl.c (set_for_reg_notes): New function.\n        (set_unique_reg_note): Use it.\n        * optabs.c (add_equal_note): Likewise\n\n\nCo-Authored-By: Olivier Hainque <hainque@adacore.com>\n\nFrom-SVN: r210998", "tree": {"sha": "cd95c321218af68818300b397eeb1456a6d823cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd95c321218af68818300b397eeb1456a6d823cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8912e539b9060c3f4f037188374e2ccfa00666b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8912e539b9060c3f4f037188374e2ccfa00666b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8912e539b9060c3f4f037188374e2ccfa00666b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8912e539b9060c3f4f037188374e2ccfa00666b/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9c6ab05f6a3f85c8d911e327677b83828daec840", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6ab05f6a3f85c8d911e327677b83828daec840", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c6ab05f6a3f85c8d911e327677b83828daec840"}], "stats": {"total": 85, "additions": 60, "deletions": 25}, "files": [{"sha": "ba82dd58b84592071f582131fa99c7d352023413", "filename": "ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8912e539b9060c3f4f037188374e2ccfa00666b/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8912e539b9060c3f4f037188374e2ccfa00666b/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=c8912e539b9060c3f4f037188374e2ccfa00666b", "patch": "@@ -1,3 +1,11 @@\n+2014-05-26  Richard Sandiford  <rdsandiford@googlemail.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* rtl.h (set_for_reg_notes): Declare.\n+\t* emit-rtl.c (set_for_reg_notes): New function.\n+\t(set_unique_reg_note): Use it.\n+\t* optabs.c (add_equal_note): Likewise\n+\n 2014-05-22  Maxim Kuvyrkov  <maxim.kuvyrkov@linaro.org>\n \n \t* MAINTAINERS: Update my affiliation/email."}, {"sha": "3bf2ff7213690a553bc82e6b8862090db8220f96", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 50, "deletions": 24, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8912e539b9060c3f4f037188374e2ccfa00666b/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8912e539b9060c3f4f037188374e2ccfa00666b/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=c8912e539b9060c3f4f037188374e2ccfa00666b", "patch": "@@ -5086,6 +5086,45 @@ gen_use (rtx x)\n   return seq;\n }\n \n+/* Notes like REG_EQUAL and REG_EQUIV refer to a set in an instruction.\n+   Return the set in INSN that such notes describe, or NULL if the notes\n+   have no meaning for INSN.  */\n+\n+rtx\n+set_for_reg_notes (rtx insn)\n+{\n+  rtx pat, reg;\n+\n+  if (!INSN_P (insn))\n+    return NULL_RTX;\n+\n+  pat = PATTERN (insn);\n+  if (GET_CODE (pat) == PARALLEL)\n+    {\n+      /* We do not use single_set because that ignores SETs of unused\n+\t registers.  REG_EQUAL and REG_EQUIV notes really do require the\n+\t PARALLEL to have a single SET.  */\n+      if (multiple_sets (insn))\n+\treturn NULL_RTX;\n+      pat = XVECEXP (pat, 0, 0);\n+    }\n+\n+  if (GET_CODE (pat) != SET)\n+    return NULL_RTX;\n+\n+  reg = SET_DEST (pat);\n+\n+  /* Notes apply to the contents of a STRICT_LOW_PART.  */\n+  if (GET_CODE (reg) == STRICT_LOW_PART)\n+    reg = XEXP (reg, 0);\n+\n+  /* Check that we have a register.  */\n+  if (!(REG_P (reg) || GET_CODE (reg) == SUBREG))\n+    return NULL_RTX;\n+\n+  return pat;\n+}\n+\n /* Place a note of KIND on insn INSN with DATUM as the datum. If a\n    note of this type already exists, remove it first.  */\n \n@@ -5098,39 +5137,26 @@ set_unique_reg_note (rtx insn, enum reg_note kind, rtx datum)\n     {\n     case REG_EQUAL:\n     case REG_EQUIV:\n-      /* Don't add REG_EQUAL/REG_EQUIV notes if the insn\n-\t has multiple sets (some callers assume single_set\n-\t means the insn only has one set, when in fact it\n-\t means the insn only has one * useful * set).  */\n-      if (GET_CODE (PATTERN (insn)) == PARALLEL && multiple_sets (insn))\n-\t{\n-\t  gcc_assert (!note);\n-\t  return NULL_RTX;\n-\t}\n+      if (!set_for_reg_notes (insn))\n+\treturn NULL_RTX;\n \n       /* Don't add ASM_OPERAND REG_EQUAL/REG_EQUIV notes.\n \t It serves no useful purpose and breaks eliminate_regs.  */\n       if (GET_CODE (datum) == ASM_OPERANDS)\n \treturn NULL_RTX;\n-\n-      if (note)\n-\t{\n-\t  XEXP (note, 0) = datum;\n-\t  df_notes_rescan (insn);\n-\t  return note;\n-\t}\n       break;\n \n     default:\n-      if (note)\n-\t{\n-\t  XEXP (note, 0) = datum;\n-\t  return note;\n-\t}\n       break;\n     }\n \n-  add_reg_note (insn, kind, datum);\n+  if (note)\n+    XEXP (note, 0) = datum;\n+  else\n+    {\n+      add_reg_note (insn, kind, datum);\n+      note = REG_NOTES (insn);\n+    }\n \n   switch (kind)\n     {\n@@ -5142,14 +5168,14 @@ set_unique_reg_note (rtx insn, enum reg_note kind, rtx datum)\n       break;\n     }\n \n-  return REG_NOTES (insn);\n+  return note;\n }\n \n /* Like set_unique_reg_note, but don't do anything unless INSN sets DST.  */\n rtx\n set_dst_reg_note (rtx insn, enum reg_note kind, rtx datum, rtx dst)\n {\n-  rtx set = single_set (insn);\n+  rtx set = set_for_reg_notes (insn);\n \n   if (set && SET_DEST (set) == dst)\n     return set_unique_reg_note (insn, kind, datum);"}, {"sha": "ca1c1945c37e8dfb3b719c1490874f03c1cbc9ea", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8912e539b9060c3f4f037188374e2ccfa00666b/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8912e539b9060c3f4f037188374e2ccfa00666b/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=c8912e539b9060c3f4f037188374e2ccfa00666b", "patch": "@@ -228,7 +228,7 @@ add_equal_note (rtx insns, rtx target, enum rtx_code code, rtx op0, rtx op1)\n       return 0;\n     }\n \n-  set = single_set (last_insn);\n+  set = set_for_reg_notes (last_insn);\n   if (set == NULL_RTX)\n     return 1;\n "}, {"sha": "02ce4248d9c344a22a2a71a3083726aa6829defa", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8912e539b9060c3f4f037188374e2ccfa00666b/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8912e539b9060c3f4f037188374e2ccfa00666b/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=c8912e539b9060c3f4f037188374e2ccfa00666b", "patch": "@@ -2197,6 +2197,7 @@ extern enum machine_mode choose_hard_reg_mode (unsigned int, unsigned int,\n \t\t\t\t\t       bool);\n \n /* In emit-rtl.c  */\n+extern rtx set_for_reg_notes (rtx);\n extern rtx set_unique_reg_note (rtx, enum reg_note, rtx);\n extern rtx set_dst_reg_note (rtx, enum reg_note, rtx, rtx);\n extern void set_insn_deleted (rtx);"}]}