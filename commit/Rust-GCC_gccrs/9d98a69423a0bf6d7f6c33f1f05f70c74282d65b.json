{"sha": "9d98a69423a0bf6d7f6c33f1f05f70c74282d65b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ5OGE2OTQyM2EwYmY2ZDdmNmMzM2YxZjA1ZjcwYzc0MjgyZDY1Yg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2000-07-28T02:17:26Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2000-07-28T02:17:26Z"}, "message": "Makefile.in (INSN_ATTR_H): New macro.\n\n* Makefile.in (INSN_ATTR_H): New macro.  Replace all dependencies\non insn-attr.h with it.\n* genattr.c: Generate `#include \"insn-addr.h\"' if HAVE_ATTR_length.\n* insn-addr.h: New header.\n(insn_addresses_): Renamed from insn_addresses.\n(INSN_ADDRESSES_DEFN, INSN_ADDRESSES, INSN_ADDRESSES_ALLOC,\nINSN_ADDRESSES_FREE, INSN_ADDRESSES_SET_P, INSN_ADDRESSES_SIZE,\nINSN_ADDRESSES_NEW): New macros.\n* genattrtab.c (write_test_expr): Use new macros.\n* final.c (insn_addresses, init_insn_lengths): Likewise.\n(align_fuzz, shorten_branches): Likewise.\n(final): Likewise.  Do not reject new insns if their addresses\nhave been added to INSN_ADDRESSES.\n* config/arm/arm.c, config/avr/avr.c: Use new macros.\n* config/h8300/h8300.c, config/i370/i370.c: Likewise.\n* config/m88k/m88k.c, config/pa/pa.c, config/pa/pa.md: Likewise.\n* config/sparc/sparc.c, config/sparc/sparc.md: Likewise.\n* config/sh/sh.c: Likewise.\n(output_branchy_insn): Use INSN_ADDRESSES_NEW.\n\nFrom-SVN: r35307", "tree": {"sha": "ef8a8d9eb4fda8faa814cb484ce4a1e01ef25372", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef8a8d9eb4fda8faa814cb484ce4a1e01ef25372"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/comments", "author": null, "committer": null, "parents": [{"sha": "b87487b66a26b2db805a02e59b25bffb9438fb14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b87487b66a26b2db805a02e59b25bffb9438fb14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b87487b66a26b2db805a02e59b25bffb9438fb14"}], "stats": {"total": 290, "additions": 181, "deletions": 109}, "files": [{"sha": "f8e2ea55c9ad799acddde45d36752b6d98672d63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d98a69423a0bf6d7f6c33f1f05f70c74282d65b", "patch": "@@ -1,5 +1,25 @@\n 2000-07-27  Alexandre Oliva  <aoliva@redhat.com>\n \n+\t* Makefile.in (INSN_ATTR_H): New macro.  Replace all dependencies\n+\ton insn-attr.h with it.\n+\t* genattr.c: Generate `#include \"insn-addr.h\"' if HAVE_ATTR_length.\n+\t* insn-addr.h: New header.\n+\t(insn_addresses_): Renamed from insn_addresses.\n+\t(INSN_ADDRESSES_DEFN, INSN_ADDRESSES, INSN_ADDRESSES_ALLOC,\n+\tINSN_ADDRESSES_FREE, INSN_ADDRESSES_SET_P, INSN_ADDRESSES_SIZE,\n+\tINSN_ADDRESSES_NEW): New macros.\n+\t* genattrtab.c (write_test_expr): Use new macros.\n+\t* final.c (insn_addresses, init_insn_lengths): Likewise.\n+\t(align_fuzz, shorten_branches): Likewise.\n+\t(final): Likewise.  Do not reject new insns if their addresses\n+\thave been added to INSN_ADDRESSES.\n+\t* config/arm/arm.c, config/avr/avr.c: Use new macros.\n+\t* config/h8300/h8300.c, config/i370/i370.c: Likewise.\n+\t* config/m88k/m88k.c, config/pa/pa.c, config/pa/pa.md: Likewise.\n+\t* config/sparc/sparc.c, config/sparc/sparc.md: Likewise.\n+\t* config/sh/sh.c: Likewise.\n+\t(output_branchy_insn): Use INSN_ADDRESSES_NEW.\n+\n \t* Makefile.in (bootstrap): Move -BstageN/ back to the beginning.\n \n 2000-07-27  Andrew Cagney  <cagney@b1.cygnus.com>"}, {"sha": "85e33d62fa02a6a1a2115c6e44e645a457375d28", "filename": "gcc/Makefile.in", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=9d98a69423a0bf6d7f6c33f1f05f70c74282d65b", "patch": "@@ -777,6 +777,7 @@ LOOP_H = loop.h varray.h bitmap.h\n GCC_H = gcc.h version.h\n GGC_H = ggc.h varray.h\n TIMEVAR_H = timevar.h timevar.def\n+INSN_ATTR_H = insn-attr.h $(srcdir)/insn-addr.h $(srcdir)/varray.h\n #\f\n # Language makefile fragments.\n \n@@ -1238,9 +1239,9 @@ fold-const.o : fold-const.c $(CONFIG_H) system.h $(TREE_H) flags.h toplev.h \\\n    $(RTL_H) ggc.h\n diagnostic.o : diagnostic.c diagnostic.h \\\n    $(CONFIG_H) system.h $(TREE_H) $(RTL_H) tm_p.h flags.h \\\n-   $(GGC_H) input.h insn-attr.h insn-codes.h insn-config.h toplev.h intl.h \n+   $(GGC_H) input.h $(INSN_ATTR_H) insn-codes.h insn-config.h toplev.h intl.h \n toplev.o : toplev.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) function.h \\\n-   flags.h input.h insn-attr.h xcoffout.h defaults.h output.h diagnostic.h \\\n+   flags.h input.h $(INSN_ATTR_H) xcoffout.h defaults.h output.h diagnostic.h \\\n    insn-codes.h insn-config.h intl.h $(RECOG_H) Makefile toplev.h dwarfout.h \\\n    dwarf2out.h sdbout.h dbxout.h $(EXPR_H) hard-reg-set.h $(BASIC_BLOCK_H) \\\n    graph.h loop.h  except.h regs.h $(TIMEVAR_H) $(lang_options_files)\n@@ -1310,7 +1311,7 @@ integrate.o : integrate.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n    intl.h function.h output.h $(RECOG_H) except.h toplev.h $(LOOP_H)\n jump.o : jump.c $(CONFIG_H) system.h $(RTL_H) flags.h hard-reg-set.h $(REGS_H) \\\n    insn-config.h insn-flags.h $(RECOG_H) $(EXPR_H) real.h except.h function.h \\\n-   toplev.h insn-attr.h\n+   toplev.h $(INSN_ATTR_H)\n \n simplify-rtx.o : simplify-rtx.c $(CONFIG_H) system.h $(RTL_H) $(REGS_H) \\\n    hard-reg-set.h flags.h real.h insn-config.h $(RECOG_H) $(EXPR_H) toplev.h \\\n@@ -1324,9 +1325,9 @@ sibcall.o : sibcall.c $(CONFIG_H) system.h $(RTL_H) $(REGS_H) function.h \\\n    hard-reg-set.h flags.h insn-config.h $(RECOG_H) $(BASIC_BLOCK_H)\n resource.o : resource.c $(CONFIG_H) $(RTL_H) hard-reg-set.h system.h \\\n    $(BASIC_BLOCK_H) $(REGS_H) flags.h output.h resource.h function.h toplev.h \\\n-   insn-attr.h except.h\n+   $(INSN_ATTR_H) except.h\n lcm.o : lcm.c $(CONFIG_H) system.h $(RTL_H) $(REGS_H) hard-reg-set.h flags.h \\\n-   real.h insn-config.h insn-attr.h $(RECOG_H) $(EXPR_H) $(BASIC_BLOCK_H)\n+   real.h insn-config.h $(INSN_ATTR_H) $(RECOG_H) $(EXPR_H) $(BASIC_BLOCK_H)\n ssa.o : ssa.c $(CONFIG_H) system.h $(RTL_H) $(REGS_H) $(BASIC_BLOCK_H) \\\n    output.h insn-config.h\n conflict.o : conflict.c $(CONFIG_H) system.h $(OBSTACK_H) $(HASHTAB_H) \\\n@@ -1344,14 +1345,14 @@ flow.o : flow.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h insn-config.h \\\n    $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h toplev.h $(RECOG_H) \\\n    insn-flags.h function.h except.h $(EXPR_H)\n combine.o : combine.c $(CONFIG_H) system.h $(RTL_H) flags.h function.h \\\n-   insn-config.h insn-flags.h insn-codes.h insn-attr.h $(REGS_H) $(EXPR_H) \\\n+   insn-config.h insn-flags.h insn-codes.h $(INSN_ATTR_H) $(REGS_H) $(EXPR_H) \\\n    $(BASIC_BLOCK_H) $(RECOG_H) real.h hard-reg-set.h toplev.h\n regclass.o : regclass.c $(CONFIG_H) system.h $(RTL_H) hard-reg-set.h flags.h \\\n    $(BASIC_BLOCK_H) $(REGS_H) insn-config.h $(RECOG_H) reload.h real.h \\\n    toplev.h function.h output.h $(GGC_H)\n local-alloc.o : local-alloc.c $(CONFIG_H) system.h $(RTL_H) flags.h \\\n    $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h insn-config.h $(RECOG_H) \\\n-   output.h function.h insn-attr.h toplev.h\n+   output.h function.h $(INSN_ATTR_H) toplev.h\n bitmap.o : bitmap.c $(CONFIG_H) system.h $(RTL_H) flags.h $(BASIC_BLOCK_H) \\\n    $(REGS_H)\n global.o : global.c $(CONFIG_H) system.h $(RTL_H) flags.h reload.h function.h \\\n@@ -1367,7 +1368,7 @@ caller-save.o : caller-save.c $(CONFIG_H) system.h $(RTL_H) flags.h \\\n    $(REGS_H) hard-reg-set.h insn-config.h $(BASIC_BLOCK_H) function.h \\\n    $(RECOG_H) reload.h $(EXPR_H) toplev.h\n reorg.o : reorg.c $(CONFIG_H) system.h $(RTL_H) conditions.h hard-reg-set.h \\\n-   $(BASIC_BLOCK_H) $(REGS_H) insn-config.h insn-attr.h insn-flags.h \\\n+   $(BASIC_BLOCK_H) $(REGS_H) insn-config.h $(INSN_ATTR_H) insn-flags.h \\\n    $(RECOG_H) function.h flags.h output.h $(EXPR_H) toplev.h\n alias.o : alias.c $(CONFIG_H) system.h $(RTL_H) flags.h hard-reg-set.h \\\n    $(REGS_H) toplev.h output.h $(EXPR_H) insn-flags.h $(GGC_H) function.h \\\n@@ -1377,14 +1378,14 @@ regmove.o : regmove.c $(CONFIG_H) system.h $(RTL_H) insn-config.h \\\n    $(EXPR_H) insn-flags.h $(BASIC_BLOCK_H) toplev.h\n haifa-sched.o : haifa-sched.c $(CONFIG_H) system.h $(RTL_H) \\\n    $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h flags.h insn-config.h function.h \\\n-   insn-attr.h toplev.h $(RECOG_H) except.h\n+   $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h\n final.o : final.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h intl.h \\\n-   $(REGS_H) $(RECOG_H) conditions.h insn-config.h insn-attr.h function.h \\\n+   $(REGS_H) $(RECOG_H) conditions.h insn-config.h $(INSN_ATTR_H) function.h \\\n    real.h output.h hard-reg-set.h insn-flags.h insn-codes.h gstab.h except.h \\\n    xcoffout.h defaults.h toplev.h reload.h dwarfout.h dwarf2out.h sdbout.h \\\n    dbxout.h $(BASIC_BLOCK_H)\n recog.o : recog.c $(CONFIG_H) system.h $(RTL_H) function.h $(BASIC_BLOCK_H) \\\n-   $(REGS_H) $(RECOG_H) hard-reg-set.h flags.h insn-config.h insn-attr.h \\\n+   $(REGS_H) $(RECOG_H) hard-reg-set.h flags.h insn-config.h $(INSN_ATTR_H) \\\n    insn-flags.h insn-codes.h real.h toplev.h output.h\n reg-stack.o : reg-stack.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) $(RECOG_H) \\\n    $(REGS_H) hard-reg-set.h flags.h insn-config.h insn-flags.h toplev.h \\\n@@ -1405,7 +1406,7 @@ ifcvt.o : ifcvt.c $(CONFIG_H) system.h $(RTL_H) $(REGS_H) \\\n    output.h\n $(out_object_file): $(out_file) $(CONFIG_H) $(TREE_H) $(GGC_H) \\\n    $(RTL_H) $(REGS_H) hard-reg-set.h real.h insn-config.h conditions.h \\\n-   insn-flags.h output.h insn-attr.h insn-codes.h system.h toplev.h function.h\n+   insn-flags.h output.h $(INSN_ATTR_H) insn-codes.h system.h toplev.h function.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(out_file)\n \n # Build auxiliary files that support ecoff format.\n@@ -1528,7 +1529,7 @@ s-peep : $(md_file) genpeep $(srcdir)/move-if-change\n \ttouch s-peep\n \n insn-attrtab.o : insn-attrtab.c $(CONFIG_H) $(RTL_H) $(REGS_H) real.h \\\n-    output.h insn-attr.h insn-config.h system.h toplev.h $(RECOG_H)\n+    output.h $(INSN_ATTR_H) insn-config.h system.h toplev.h $(RECOG_H)\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-attrtab.c\n \n insn-attr.h: s-attr ; @true\n@@ -1544,7 +1545,7 @@ s-attrtab : $(md_file) genattrtab $(srcdir)/move-if-change\n \ttouch s-attrtab\n \n insn-output.o : insn-output.c $(CONFIG_H) $(RTL_H) $(GGC_H) $(REGS_H) real.h \\\n-    conditions.h hard-reg-set.h insn-config.h insn-flags.h insn-attr.h \\\n+    conditions.h hard-reg-set.h insn-config.h insn-flags.h $(INSN_ATTR_H) \\\n     output.h $(RECOG_H) function.h insn-codes.h system.h toplev.h flags.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-output.c\n "}, {"sha": "5d83e4b0175d3cf1507192f874e77deec68e5760", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=9d98a69423a0bf6d7f6c33f1f05f70c74282d65b", "patch": "@@ -8570,10 +8570,9 @@ void\n thumb_final_prescan_insn (insn)\n      rtx insn;\n {\n-  extern int * insn_addresses;\n-\n   if (flag_print_asm_name)\n-    asm_fprintf (asm_out_file, \"%@ 0x%04x\\n\", insn_addresses[INSN_UID (insn)]);\n+    asm_fprintf (asm_out_file, \"%@ 0x%04x\\n\",\n+\t\t INSN_ADDRESSES (INSN_UID (insn)));\n }\n \n int"}, {"sha": "14ea8a9847a390d8414d376b2602bddf82a68e85", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=9d98a69423a0bf6d7f6c33f1f05f70c74282d65b", "patch": "@@ -605,8 +605,8 @@ function_epilogue (FILE *file, int size)\n   signal_func_p = signal_function_p (current_function_decl);\n   leaf_func_p = leaf_function_p ();\n   main_p = ! strcmp (\"main\", current_function_name);\n-  function_size = (insn_addresses[INSN_UID (get_last_insn ())]\n-\t\t   - insn_addresses[INSN_UID (get_insns ())]);\n+  function_size = (INSN_ADDRESSES (INSN_UID (get_last_insn ()))\n+\t\t   - INSN_ADDRESSES (INSN_UID (get_insns ())));\n   live_seq = sequent_regs_live ();\n   minimize = (TARGET_CALL_PROLOGUES\n \t      && !interrupt_func_p && !signal_func_p && live_seq);\n@@ -1089,9 +1089,9 @@ avr_jump_mode (x,insn)\n      rtx x;                     /* jump operand */\n      rtx insn;                  /* jump insn */\n {\n-  int dest_addr = insn_addresses[INSN_UID (GET_MODE (x) == LABEL_REF\n-                                           ? XEXP (x, 0) : x)];\n-  int cur_addr = insn_addresses[INSN_UID (insn)];\n+  int dest_addr = INSN_ADDRESSES (INSN_UID (GET_MODE (x) == LABEL_REF\n+\t\t\t\t\t    ? XEXP (x, 0) : x));\n+  int cur_addr = INSN_ADDRESSES (INSN_UID (insn));\n   int jump_distance = cur_addr - dest_addr;\n   \n   if (-63 <= jump_distance && jump_distance <= 62)\n@@ -1212,11 +1212,12 @@ final_prescan_insn (insn, operand, num_operands)\n \n   if (TARGET_INSN_SIZE_DUMP || TARGET_ALL_DEBUG)\n     {\n-      fprintf (asm_out_file, \"/*DEBUG: 0x%x\\t\\t%d\\t%d */\\n\", insn_addresses[uid],\n-               insn_addresses[uid] - last_insn_address,\n-\t       rtx_cost (PATTERN (insn),INSN));\n+      fprintf (asm_out_file, \"/*DEBUG: 0x%x\\t\\t%d\\t%d */\\n\",\n+\t       INSN_ADDRESSES (uid),\n+               INSN_ADDRESSES (uid) - last_insn_address,\n+\t       rtx_cost (PATTERN (insn), INSN));\n     }\n-  last_insn_address = insn_addresses[uid];\n+  last_insn_address = INSN_ADDRESSES (uid);\n \n   if (TARGET_RTL_DUMP)\n     {\n@@ -3999,8 +4000,8 @@ jump_over_one_insn_p (insn, dest)\n   int uid = INSN_UID (GET_CODE (dest) == LABEL_REF\n \t\t      ? XEXP (dest, 0)\n \t\t      : dest);\n-  int jump_addr = insn_addresses[INSN_UID (insn)];\n-  int dest_addr = insn_addresses[uid];\n+  int jump_addr = INSN_ADDRESSES (INSN_UID (insn));\n+  int dest_addr = INSN_ADDRESSES (uid);\n   return dest_addr - jump_addr == 2;\n }\n "}, {"sha": "5c404eb1f986e6599e65c1d8e4646f7d4e92fab3", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=9d98a69423a0bf6d7f6c33f1f05f70c74282d65b", "patch": "@@ -1534,9 +1534,9 @@ final_prescan_insn (insn, operand, num_operands)\n \n   if (TARGET_ADDRESSES)\n     {\n-      fprintf (asm_out_file, \"; 0x%x %d\\n\", insn_addresses[uid],\n-\t       insn_addresses[uid] - last_insn_address);\n-      last_insn_address = insn_addresses[uid];\n+      fprintf (asm_out_file, \"; 0x%x %d\\n\", INSN_ADDRESSES (uid),\n+\t       INSN_ADDRESSES (uid) - last_insn_address);\n+      last_insn_address = INSN_ADDRESSES (uid);\n     }\n }\n "}, {"sha": "2aa7d31ee25a84a8de4f4e07c3af3954dffac23d", "filename": "gcc/config/i370/i370.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2Fconfig%2Fi370%2Fi370.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2Fconfig%2Fi370%2Fi370.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.c?ref=9d98a69423a0bf6d7f6c33f1f05f70c74282d65b", "patch": "@@ -328,7 +328,7 @@ i370_branch_dest (branch)\n     dest = XEXP (dest, 1);\n   dest = XEXP (dest, 0);\n   dest_uid = INSN_UID (dest);\n-  dest_addr =  insn_addresses[dest_uid];\n+  dest_addr = INSN_ADDRESSES (dest_uid);\n \n   /* next, record the address of this insn as the true addr of first ref */\n   {\n@@ -349,7 +349,7 @@ i370_branch_length (insn)\n      rtx insn;\n {\n   int here, there;\n-  here = insn_addresses[INSN_UID (insn)];\n+  here = INSN_ADDRESSES (INSN_UID (insn));\n   there = i370_branch_dest (insn);\n   return (there - here);\n }\n@@ -407,13 +407,13 @@ i370_label_scan ()\n \n    for (insn = get_insns(); insn; insn = NEXT_INSN(insn))\n      {\n-       int here = insn_addresses[INSN_UID (insn)];\n+       int here = INSN_ADDRESSES (INSN_UID (insn));\n        enum rtx_code code = GET_CODE(insn);\n \n        /* ??? adjust for tables embedded in the .text section that\n         * the compiler didn't take into account */\n        here += tablejump_offset;\n-       insn_addresses[INSN_UID (insn)] = here;\n+       INSN_ADDRESSES (INSN_UID (insn)) = here;\n \n        /* check to see if this insn is a label ... */\n        if (CODE_LABEL == code)"}, {"sha": "ab79bf015feb46357374c6261a874d49f0747aa7", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=9d98a69423a0bf6d7f6c33f1f05f70c74282d65b", "patch": "@@ -853,8 +853,8 @@ output_call (operands, addr)\n \t  rtx low, high;\n \t  const char *last;\n \t  rtx dest = XEXP (SET_SRC (PATTERN (jump)), 0);\n-\t  int delta = 4 * (insn_addresses[INSN_UID (dest)]\n-\t\t\t   - insn_addresses[INSN_UID (seq_insn)]\n+\t  int delta = 4 * (INSN_ADDRESSES (INSN_UID (dest))\n+\t\t\t   - INSN_ADDRESSES (INSN_UID (seq_insn))\n \t\t\t   - 2);\n #if (MONITOR_GCC & 0x2) /* How often do long branches happen?  */\n \t  if ((unsigned) (delta + 0x8000) >= 0x10000)\n@@ -1039,8 +1039,8 @@ mostly_false_jump (jump_insn, condition)\n     insnj = NEXT_INSN (PREV_INSN (XVECEXP (final_sequence, 0, 0)));\n   else\n     insnj = jump_insn;\n-  if (insn_addresses[INSN_UID (insnj)]\n-      > insn_addresses[INSN_UID (target_label)])\n+  if (INSN_ADDRESSES (INSN_UID (insnj))\n+      > INSN_ADDRESSES (INSN_UID (target_label)))\n     return 0;\n \n   /* EQ tests are usually false and NE tests are usually true.  Also,"}, {"sha": "8cdd43e115da4a0f238584737efc4d3e46e26966", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=9d98a69423a0bf6d7f6c33f1f05f70c74282d65b", "patch": "@@ -2910,11 +2910,11 @@ output_function_prologue (file, size)\n      we don't need to accumulate the total number of code bytes.  */\n   if (TARGET_GAS && ! TARGET_PORTABLE_RUNTIME)\n     total_code_bytes = 0;\n-  else if (insn_addresses)\n+  else if (INSN_ADDRESSES_SET_P ())\n     {\n       unsigned int old_total = total_code_bytes;\n \n-      total_code_bytes += insn_addresses[INSN_UID (get_last_insn())];\n+      total_code_bytes += INSN_ADDRESSES (INSN_UID (get_last_insn()));\n       total_code_bytes += FUNCTION_BOUNDARY / BITS_PER_UNIT;\n \n       /* Be prepared to handle overflows.  */\n@@ -4887,9 +4887,9 @@ output_cbranch (operands, nullify, length, negated, insn)\n \t   taken and untaken branches.  */\n \telse if (dbr_sequence_length () == 0\n \t\t && ! forward_branch_p (insn)\n-\t\t && insn_addresses\n-\t\t && VAL_14_BITS_P (insn_addresses[INSN_UID (JUMP_LABEL (insn))]\n-\t\t\t\t    - insn_addresses[INSN_UID (insn)] - 8))\n+\t\t && INSN_ADDRESSES_SET_P ()\n+\t\t && VAL_14_BITS_P (INSN_ADDRESSES (INSN_UID (JUMP_LABEL (insn)))\n+\t\t\t\t    - INSN_ADDRESSES (INSN_UID (insn)) - 8))\n \t  {\n \t    strcpy (buf, \"{com%I2b,|cmp%I2b,}\");\n \t    if (GET_MODE (operands[1]) == DImode)\n@@ -5104,9 +5104,9 @@ output_bb (operands, nullify, length, negated, insn, which)\n \t   taken and untaken branches.  */\n \telse if (dbr_sequence_length () == 0\n \t\t && ! forward_branch_p (insn)\n-\t\t && insn_addresses\n-\t\t && VAL_14_BITS_P (insn_addresses[INSN_UID (JUMP_LABEL (insn))]\n-\t\t\t\t    - insn_addresses[INSN_UID (insn)] - 8))\n+\t\t && INSN_ADDRESSES_SET_P ()\n+\t\t && VAL_14_BITS_P (INSN_ADDRESSES (INSN_UID (JUMP_LABEL (insn)))\n+\t\t\t\t    - INSN_ADDRESSES (INSN_UID (insn)) - 8))\n \t  {\n \t    strcpy (buf, \"bb,\");\n \t    if (GET_MODE (operands[0]) == DImode)\n@@ -5252,9 +5252,9 @@ output_bvb (operands, nullify, length, negated, insn, which)\n \t   taken and untaken branches.  */\n \telse if (dbr_sequence_length () == 0\n \t\t && ! forward_branch_p (insn)\n-\t\t && insn_addresses\n-\t\t && VAL_14_BITS_P (insn_addresses[INSN_UID (JUMP_LABEL (insn))]\n-\t\t\t\t    - insn_addresses[INSN_UID (insn)] - 8))\n+\t\t && INSN_ADDRESSES_SET_P ()\n+\t\t && VAL_14_BITS_P (INSN_ADDRESSES (INSN_UID (JUMP_LABEL (insn)))\n+\t\t\t\t    - INSN_ADDRESSES (INSN_UID (insn)) - 8))\n \t  {\n \t    strcpy (buf, \"{bvb,|bb,}\");\n \t    if (GET_MODE (operands[0]) == DImode)\n@@ -5361,9 +5361,9 @@ output_dbra (operands, insn, which_alternative)\n \t     taken and untaken branches.  */\n \t  else if (dbr_sequence_length () == 0\n \t\t   && ! forward_branch_p (insn)\n-\t\t   && insn_addresses\n-\t\t   && VAL_14_BITS_P (insn_addresses[INSN_UID (JUMP_LABEL (insn))]\n-\t\t\t\t      - insn_addresses[INSN_UID (insn)] - 8))\n+\t\t   && INSN_ADDRESSES_SET_P ()\n+\t\t   && VAL_14_BITS_P (INSN_ADDRESSES (INSN_UID (JUMP_LABEL (insn)))\n+\t\t\t\t      - INSN_ADDRESSES (INSN_UID (insn)) - 8))\n \t      return \"addib,%C2 %1,%0,%3%#\";\n \n \t  /* Handle normal cases.  */\n@@ -5469,9 +5469,9 @@ output_movb (operands, insn, which_alternative, reverse_comparison)\n \t     taken and untaken branches.  */\n \t  else if (dbr_sequence_length () == 0\n \t\t   && ! forward_branch_p (insn)\n-\t\t   && insn_addresses\n-\t\t   && VAL_14_BITS_P (insn_addresses[INSN_UID (JUMP_LABEL (insn))]\n-\t\t\t\t      - insn_addresses[INSN_UID (insn)] - 8))\n+\t\t   && INSN_ADDRESSES_SET_P ()\n+\t\t   && VAL_14_BITS_P (INSN_ADDRESSES (INSN_UID (JUMP_LABEL (insn)))\n+\t\t\t\t      - INSN_ADDRESSES (INSN_UID (insn)) - 8))\n \t    return \"movb,%C2 %1,%0,%3%#\";\n \t  /* Handle normal cases.  */\n \t  if (nullify)\n@@ -5644,8 +5644,8 @@ output_millicode_call (insn, call_dest)\n   /* Use the containing sequence insn's address.  */\n   seq_insn = NEXT_INSN (PREV_INSN (XVECEXP (final_sequence, 0, 0)));\n \n-  distance = insn_addresses[INSN_UID (JUMP_LABEL (NEXT_INSN (insn)))]\n-\t       - insn_addresses[INSN_UID (seq_insn)] - 8;\n+  distance = INSN_ADDRESSES (INSN_UID (JUMP_LABEL (NEXT_INSN (insn))))\n+\t       - INSN_ADDRESSES (INSN_UID (seq_insn)) - 8;\n \n   /* If the branch was too far away, emit a normal call followed\n      by a nop, followed by the unconditional branch.\n@@ -5917,8 +5917,8 @@ output_call (insn, call_dest, sibcall)\n   /* Use the containing sequence insn's address.  */\n   seq_insn = NEXT_INSN (PREV_INSN (XVECEXP (final_sequence, 0, 0)));\n \n-  distance = insn_addresses[INSN_UID (JUMP_LABEL (NEXT_INSN (insn)))]\n-\t       - insn_addresses[INSN_UID (seq_insn)] - 8;\n+  distance = INSN_ADDRESSES (INSN_UID (JUMP_LABEL (NEXT_INSN (insn))))\n+\t       - INSN_ADDRESSES (INSN_UID (seq_insn)) - 8;\n \n   /* If the branch was too far away, emit a normal call followed\n      by a nop, followed by the unconditional branch."}, {"sha": "547d4212113c5c851dd1a4657d96d0249a0d8d41", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=9d98a69423a0bf6d7f6c33f1f05f70c74282d65b", "patch": "@@ -2205,9 +2205,9 @@\n   /* If we're trying to load the address of a label that happens to be\n      close, then we can use a shorter sequence.  */\n   if (GET_CODE (operands[1]) == LABEL_REF\n-      && insn_addresses\n-      && abs (insn_addresses[INSN_UID (XEXP (operands[1], 0))]\n-\t        - insn_addresses[INSN_UID (insn)]) < 8100)\n+      && INSN_ADDRESSES_SET_P ()\n+      && abs (INSN_ADDRESSES (INSN_UID (XEXP (operands[1], 0)))\n+\t        - INSN_ADDRESSES (INSN_UID (insn))) < 8100)\n     {\n       /* Prefixing with R% here is wrong, it extracts just 11 bits and is\n \t always non-negative.  */"}, {"sha": "c6103de292ee043d9ad12eb8c4c0440f22ab93bd", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=9d98a69423a0bf6d7f6c33f1f05f70c74282d65b", "patch": "@@ -73,10 +73,6 @@ int pragma_nosave_low_regs;\n    sh_expand_prologue.  */\n int current_function_anonymous_args;\n \n-/* Global variables from toplev.c and final.c that are used within, but\n-   not declared in any header file.  */\n-extern int *insn_addresses;\n-\n /* Global variables for machine-dependent things. */\n \n /* Which cpu are we scheduling for.  */\n@@ -696,7 +692,7 @@ output_far_jump (insn, op)\n   struct { rtx lab, reg, op; } this;\n   const char *jump;\n   int far;\n-  int offset = branch_dest (insn) - insn_addresses[INSN_UID (insn)];\n+  int offset = branch_dest (insn) - INSN_ADDRESSES (INSN_UID (insn));\n \n   this.lab = gen_label_rtx ();\n \n@@ -818,12 +814,15 @@ output_branchy_insn (code, template, insn, operands)\n \t  /* Following branch not taken */\n \t  operands[9] = gen_label_rtx ();\n \t  emit_label_after (operands[9], next_insn);\n+\t  INSN_ADDRESSES_NEW (operands[9],\n+\t\t\t      INSN_ADDRESSES (INSN_UID (next_insn))\n+\t\t\t      + get_attr_length (next_insn));\n \t  return template;\n \t}\n       else\n \t{\n \t  int offset = (branch_dest (next_insn)\n-\t\t\t- insn_addresses[INSN_UID (next_insn)] + 4);\n+\t\t\t- INSN_ADDRESSES (INSN_UID (next_insn)) + 4);\n \t  if (offset >= -252 && offset <= 258)\n \t    {\n \t      if (GET_CODE (src) == IF_THEN_ELSE)\n@@ -836,6 +835,9 @@ output_branchy_insn (code, template, insn, operands)\n     }\n   operands[9] = gen_label_rtx ();\n   emit_label_after (operands[9], insn);\n+  INSN_ADDRESSES_NEW (operands[9],\n+\t\t      INSN_ADDRESSES (INSN_UID (insn))\n+\t\t      + get_attr_length (insn));\n   return template;\n }\n \n@@ -2502,7 +2504,7 @@ gen_block_redirect (jump, addr, need_block)\n   dest = XEXP (SET_SRC (PATTERN (jump)), 0);\n   /* If the branch is out of range, try to find a scratch register for it.  */\n   if (optimize\n-      && (insn_addresses[INSN_UID (dest)] - addr + 4092U > 4092 + 4098))\n+      && (INSN_ADDRESSES (INSN_UID (dest)) - addr + 4092U > 4092 + 4098))\n     {\n       rtx scan;\n       /* Don't look for the stack pointer as a scratch register,\n@@ -2578,8 +2580,9 @@ gen_block_redirect (jump, addr, need_block)\n \t{\n \t  dest = JUMP_LABEL (next);\n \t  if (dest\n-\t      && insn_addresses[INSN_UID (dest)] - addr + 4092U > 4092 + 4098)\n-\t    gen_block_redirect (next, insn_addresses[INSN_UID (next)], -1);\n+\t      && (INSN_ADDRESSES (INSN_UID (dest)) - addr + 4092U\n+\t\t  > 4092 + 4098))\n+\t    gen_block_redirect (next, INSN_ADDRESSES (INSN_UID (next)), -1);\n \t}\n     }\n \n@@ -3231,7 +3234,7 @@ machine_dependent_reorg (first)\n     }\n \n   mdep_reorg_phase = SH_SHORTEN_BRANCHES1;\n-  insn_addresses = 0;\n+  INSN_ADDRESSES_FREE ();\n   split_branches (first);\n \n   /* The INSN_REFERENCES_ARE_DELAYED in sh.h is problematic because it\n@@ -3330,7 +3333,7 @@ split_branches (first)\n \t      {\n \t\trtx src = SET_SRC (PATTERN (insn));\n \t\trtx olabel = XEXP (XEXP (src, 1), 0);\n-\t\tint addr = insn_addresses[INSN_UID (insn)];\n+\t\tint addr = INSN_ADDRESSES (INSN_UID (insn));\n \t\trtx label = 0;\n \t\tint dest_uid = get_dest_uid (olabel, max_uid);\n \t\tstruct far_branch *bp = uid_branch[dest_uid];\n@@ -3409,11 +3412,12 @@ split_branches (first)\n \t\t\t    == JUMP_INSN))\n \t\t    && GET_CODE (PATTERN (beyond)) == SET\n \t\t    && recog_memoized (beyond) == CODE_FOR_jump\n-\t\t    && ((insn_addresses[INSN_UID (XEXP (SET_SRC (PATTERN (beyond)), 0))]\n-\t\t\t - insn_addresses[INSN_UID (insn)] + 252U)\n+\t\t    && ((INSN_ADDRESSES\n+\t\t\t (INSN_UID (XEXP (SET_SRC (PATTERN (beyond)), 0)))\n+\t\t\t - INSN_ADDRESSES (INSN_UID (insn)) + 252U)\n \t\t\t> 252 + 258 + 2))\n \t\t  gen_block_redirect (beyond,\n-\t\t\t\t      insn_addresses[INSN_UID (beyond)], 1);\n+\t\t\t\t      INSN_ADDRESSES (INSN_UID (beyond)), 1);\n \t      }\n     \n \t    next = next_active_insn (insn);\n@@ -3422,14 +3426,15 @@ split_branches (first)\n \t\t || GET_CODE (next = next_active_insn (next)) == JUMP_INSN)\n \t\t&& GET_CODE (PATTERN (next)) == SET\n \t\t&& recog_memoized (next) == CODE_FOR_jump\n-\t\t&& ((insn_addresses[INSN_UID (XEXP (SET_SRC (PATTERN (next)), 0))]\n-\t\t     - insn_addresses[INSN_UID (insn)] + 252U)\n+\t\t&& ((INSN_ADDRESSES\n+\t\t     (INSN_UID (XEXP (SET_SRC (PATTERN (next)), 0)))\n+\t\t     - INSN_ADDRESSES (INSN_UID (insn)) + 252U)\n \t\t    > 252 + 258 + 2))\n-\t      gen_block_redirect (next, insn_addresses[INSN_UID (next)], 1);\n+\t      gen_block_redirect (next, INSN_ADDRESSES (INSN_UID (next)), 1);\n \t  }\n \telse if (type == TYPE_JUMP || type == TYPE_RETURN)\n \t  {\n-\t    int addr = insn_addresses[INSN_UID (insn)];\n+\t    int addr = INSN_ADDRESSES (INSN_UID (insn));\n \t    rtx far_label = 0;\n \t    int dest_uid = 0;\n \t    struct far_branch *bp;\n@@ -3524,7 +3529,7 @@ final_prescan_insn (insn, opvec, noperands)\n      int noperands ATTRIBUTE_UNUSED;\n {\n   if (TARGET_DUMPISIZE)\n-    fprintf (asm_out_file, \"\\n! at %04x\\n\", insn_addresses[INSN_UID (insn)]);\n+    fprintf (asm_out_file, \"\\n! at %04x\\n\", INSN_ADDRESSES (INSN_UID (insn)));\n \n   if (TARGET_RELAX)\n     {\n@@ -4792,7 +4797,7 @@ branch_dest (branch)\n     dest = XEXP (dest, 1);\n   dest = XEXP (dest, 0);\n   dest_uid = INSN_UID (dest);\n-  return insn_addresses[dest_uid];\n+  return INSN_ADDRESSES (dest_uid);\n }\n \f\n /* Return non-zero if REG is not used after INSN."}, {"sha": "f6a354dfab2e6562bd23846815aa3d2d7f353f83", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=9d98a69423a0bf6d7f6c33f1f05f70c74282d65b", "patch": "@@ -2625,7 +2625,7 @@ int\n short_branch (uid1, uid2)\n      int uid1, uid2;\n {\n-  int delta = insn_addresses[uid1] - insn_addresses[uid2];\n+  int delta = INSN_ADDRESSES (uid1) - INSN_ADDRESSES (uid2);\n \n   /* Leave a few words of \"slop\".  */\n   if (delta >= -1023 && delta <= 1022)"}, {"sha": "8fb4b941d4ee20e92f7198d822c62949688f6fca", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=9d98a69423a0bf6d7f6c33f1f05f70c74282d65b", "patch": "@@ -8415,8 +8415,8 @@\n      instead.  */\n \n   if (! TARGET_V9 && flag_delayed_branch\n-      && (insn_addresses[INSN_UID (operands[0])]\n-\t  == insn_addresses[INSN_UID (insn)]))\n+      && (INSN_ADDRESSES (INSN_UID (operands[0]))\n+\t  == INSN_ADDRESSES (INSN_UID (insn))))\n     return \\\"b\\\\t%l0%#\\\";\n   else\n     return TARGET_V9 ? \\\"ba,pt%*\\\\t%%xcc, %l0%(\\\" : \\\"b%*\\\\t%l0%(\\\";"}, {"sha": "1fc72c9402b86b202dbe679e277b34d58ad07b23", "filename": "gcc/final.c", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=9d98a69423a0bf6d7f6c33f1f05f70c74282d65b", "patch": "@@ -612,7 +612,10 @@ dbr_sequence_length ()\n    `insn_current_length'.  */\n \n static short *insn_lengths;\n-int *insn_addresses;\n+\n+#ifdef HAVE_ATTR_length\n+varray_type insn_addresses_;\n+#endif\n \n /* Max uid for which the above arrays are valid.  */\n static int insn_lengths_max_uid;\n@@ -665,11 +668,9 @@ init_insn_lengths ()\n       insn_lengths = 0;\n       insn_lengths_max_uid = 0;\n     }\n-  if (insn_addresses)\n-    {\n-      free (insn_addresses);\n-      insn_addresses = 0;\n-    }\n+#ifdef HAVE_ATTR_length\n+  INSN_ADDRESSES_FREE ();\n+#endif\n   if (uid_align)\n     {\n       free (uid_align);\n@@ -889,7 +890,7 @@ align_fuzz (start, end, known_align_log, growth)\n       int align_addr, new_align;\n \n       uid = INSN_UID (align_label);\n-      align_addr = insn_addresses[uid] - insn_lengths[uid];\n+      align_addr = INSN_ADDRESSES (uid) - insn_lengths[uid];\n       if (uid_shuid[uid] > end_shuid)\n \tbreak;\n       known_align_log = LABEL_TO_ALIGNMENT (align_label);\n@@ -1135,7 +1136,7 @@ shorten_branches (first)\n   insn_lengths_max_uid = max_uid;\n   /* Syntax errors can lead to labels being outside of the main insn stream.\n      Initialize insn_addresses, so that we get reproducible results.  */\n-  insn_addresses = (int *) xcalloc (max_uid, sizeof (int));\n+  INSN_ADDRESSES_ALLOC (max_uid);\n \n   varying_length = (char *) xcalloc (max_uid, sizeof (char));\n \n@@ -1242,7 +1243,7 @@ shorten_branches (first)\n \t    }\n \t}\n \n-      insn_addresses[uid] = insn_current_address;\n+      INSN_ADDRESSES (uid) = insn_current_address;\n       \n       if (GET_CODE (insn) == NOTE || GET_CODE (insn) == BARRIER\n \t  || GET_CODE (insn) == CODE_LABEL)\n@@ -1298,8 +1299,8 @@ shorten_branches (first)\n \t\t  if ((varying_length[inner_uid]\n \t\t       = insn_variable_length_p (inner_insn)) != 0)\n \t\t    varying_length[uid] = 1;\n-\t\t  insn_addresses[inner_uid] = (insn_current_address +\n-\t\t\t\t\t       insn_lengths[uid]);\n+\t\t  INSN_ADDRESSES (inner_uid) = (insn_current_address\n+\t\t\t\t\t\t+ insn_lengths[uid]);\n \t\t}\n \t      else\n \t\tvarying_length[inner_uid] = 0;\n@@ -1353,16 +1354,16 @@ shorten_branches (first)\n \t\t}\n \t      else\n \t\tinsn_lengths[uid] = 0;\n-\t      insn_addresses[uid] = insn_current_address;\n+\t      INSN_ADDRESSES (uid) = insn_current_address;\n \t      continue;\n \t    }\n \n \t  length_align = INSN_LENGTH_ALIGNMENT (insn);\n \t  if (length_align < insn_current_align)\n \t    insn_current_align = length_align;\n \n-\t  insn_last_address = insn_addresses[uid];\n-\t  insn_addresses[uid] = insn_current_address;\n+\t  insn_last_address = INSN_ADDRESSES (uid);\n+\t  INSN_ADDRESSES (uid) = insn_current_address;\n \n #ifdef CASE_VECTOR_SHORTEN_MODE\n \t  if (optimize && GET_CODE (insn) == JUMP_INSN\n@@ -1374,9 +1375,9 @@ shorten_branches (first)\n \t      rtx min_lab = XEXP (XEXP (body, 2), 0);\n \t      rtx max_lab = XEXP (XEXP (body, 3), 0);\n \t      addr_diff_vec_flags flags = ADDR_DIFF_VEC_FLAGS (body);\n-\t      int rel_addr = insn_addresses[INSN_UID (rel_lab)];\n-\t      int min_addr = insn_addresses[INSN_UID (min_lab)];\n-\t      int max_addr = insn_addresses[INSN_UID (max_lab)];\n+\t      int rel_addr = INSN_ADDRESSES (INSN_UID (rel_lab));\n+\t      int min_addr = INSN_ADDRESSES (INSN_UID (min_lab));\n+\t      int max_addr = INSN_ADDRESSES (INSN_UID (max_lab));\n \t      rtx prev;\n \t      int rel_align = 0;\n \n@@ -1491,7 +1492,7 @@ shorten_branches (first)\n \t\t  int inner_uid = INSN_UID (inner_insn);\n \t\t  int inner_length;\n \n-\t\t  insn_addresses[inner_uid] = insn_current_address;\n+\t\t  INSN_ADDRESSES (inner_uid) = insn_current_address;\n \n \t\t  /* insn_current_length returns 0 for insns with a\n \t\t     non-varying length.  */\n@@ -2018,7 +2019,7 @@ final (first, file, optimize, prescan)\n   for (insn = NEXT_INSN (first); insn;)\n     {\n #ifdef HAVE_ATTR_length\n-      if (INSN_UID (insn) >= insn_lengths_max_uid)\n+      if (INSN_UID (insn) >= INSN_ADDRESSES_SIZE ())\n \t{\n #ifdef STACK_REGS\n \t  /* Irritatingly, the reg-stack pass is creating new instructions\n@@ -2032,7 +2033,7 @@ final (first, file, optimize, prescan)\n #endif\n \t}\n       else\n-\tinsn_current_address = insn_addresses[INSN_UID (insn)];\n+\tinsn_current_address = INSN_ADDRESSES (INSN_UID (insn));\n #endif /* HAVE_ATTR_length */\n \n       insn = final_scan_insn (insn, file, optimize, prescan, 0);"}, {"sha": "770379a53d52318402d6878f7cd40b41fc6aef5b", "filename": "gcc/genattr.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=9d98a69423a0bf6d7f6c33f1f05f70c74282d65b", "patch": "@@ -126,8 +126,7 @@ gen_attr (attr)\n       printf (\"extern int insn_default_length PARAMS ((rtx));\\n\");\n       printf (\"extern int insn_variable_length_p PARAMS ((rtx));\\n\");\n       printf (\"extern int insn_current_length PARAMS ((rtx));\\n\\n\");\n-      printf (\"extern int *insn_addresses;\\n\");\n-      printf (\"extern int insn_current_address;\\n\\n\");\n+      printf (\"#include \\\"insn-addr.h\\\"\\n\\n\");\n     }\n }\n "}, {"sha": "153c2786734a3f3f57dc500cbcde8c69c8c82ead", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=9d98a69423a0bf6d7f6c33f1f05f70c74282d65b", "patch": "@@ -4662,7 +4662,7 @@ write_test_expr (exp, flags)\n \n     /* The address of the branch target.  */\n     case MATCH_DUP:\n-      printf (\"insn_addresses[INSN_UID (GET_CODE (operands[%d]) == LABEL_REF ? XEXP (operands[%d], 0) : operands[%d])]\",\n+      printf (\"INSN_ADDRESSES (INSN_UID (GET_CODE (operands[%d]) == LABEL_REF ? XEXP (operands[%d], 0) : operands[%d]))\",\n \t      XINT (exp, 0), XINT (exp, 0), XINT (exp, 0));\n       break;\n "}, {"sha": "4ae59f7fddbea17cc95e01ca20d89d8a38aaad90", "filename": "gcc/insn-addr.h", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2Finsn-addr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d98a69423a0bf6d7f6c33f1f05f70c74282d65b/gcc%2Finsn-addr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finsn-addr.h?ref=9d98a69423a0bf6d7f6c33f1f05f70c74282d65b", "patch": "@@ -0,0 +1,46 @@\n+/* Macros to support INSN_ADDRESSES\n+   Copyright (C) 2000 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#ifndef _INSN_ADDR_H\n+#define _INSN_ADDR_H 1\n+\n+#include \"varray.h\"\n+\n+extern varray_type insn_addresses_;\n+extern int insn_current_address;\n+\n+#define INSN_ADDRESSES_DEFN() varray_type insn_addresses_\n+#define INSN_ADDRESSES(id) VARRAY_INT (insn_addresses_, (id))\n+#define INSN_ADDRESSES_ALLOC(size) \\\n+  VARRAY_INT_INIT (insn_addresses_, (size), \"insn_addresses\")\n+#define INSN_ADDRESSES_FREE() VARRAY_FREE (insn_addresses_)\n+#define INSN_ADDRESSES_SET_P() (insn_addresses_ != 0)\n+#define INSN_ADDRESSES_SIZE() VARRAY_SIZE (insn_addresses_)\n+#define INSN_ADDRESSES_NEW(insn,addr) do {\t\t\t\t\\\n+  int insn_uid__ = INSN_UID ((insn)), insn_addr__ = (addr);\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  if (INSN_ADDRESSES_SET_P()) {\t\t\t\t\t\t\\\n+    if (INSN_ADDRESSES_SIZE() <= insn_uid__)\t\t\t\t\\\n+      insn_addresses_ = VARRAY_GROW (insn_addresses_, insn_uid__ + 1);\t\\\n+    INSN_ADDRESSES (insn_uid__) = insn_addr__;\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+} while (0)\n+\n+#endif /* _INSN_ADDR_H */"}]}