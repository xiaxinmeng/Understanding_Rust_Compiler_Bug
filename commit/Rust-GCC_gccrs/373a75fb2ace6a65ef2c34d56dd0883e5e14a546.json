{"sha": "373a75fb2ace6a65ef2c34d56dd0883e5e14a546", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzczYTc1ZmIyYWNlNmE2NWVmMmMzNGQ1NmRkMDg4M2U1ZTE0YTU0Ng==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-01-06T20:34:41Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-01-06T20:34:41Z"}, "message": "Remove noexcept from function template that can throw\n\n\tPR libstdc++/69092\n\t* include/bits/basic_string.h (basic_string::_S_copy_chars<_Iterator>):\n\tRemove _GLIBCXX_NOEXCEPT.\n\ttestsuite/21_strings/basic_string/cons/char/69092.cc: New.\n\nFrom-SVN: r232112", "tree": {"sha": "7a10c9c6502b7d432fab1972238bfc38d38f3e48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a10c9c6502b7d432fab1972238bfc38d38f3e48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/373a75fb2ace6a65ef2c34d56dd0883e5e14a546", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/373a75fb2ace6a65ef2c34d56dd0883e5e14a546", "html_url": "https://github.com/Rust-GCC/gccrs/commit/373a75fb2ace6a65ef2c34d56dd0883e5e14a546", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/373a75fb2ace6a65ef2c34d56dd0883e5e14a546/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5027395ec641081ed33dd2c4b8204aba7053782c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5027395ec641081ed33dd2c4b8204aba7053782c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5027395ec641081ed33dd2c4b8204aba7053782c"}], "stats": {"total": 65, "additions": 63, "deletions": 2}, "files": [{"sha": "6c5b6418f35eaf43f9e48c721d1ebc041547f683", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373a75fb2ace6a65ef2c34d56dd0883e5e14a546/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373a75fb2ace6a65ef2c34d56dd0883e5e14a546/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=373a75fb2ace6a65ef2c34d56dd0883e5e14a546", "patch": "@@ -1,5 +1,10 @@\n 2016-01-06  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/69092\n+\t* include/bits/basic_string.h (basic_string::_S_copy_chars<_Iterator>):\n+\tRemove _GLIBCXX_NOEXCEPT.\n+\ttestsuite/21_strings/basic_string/cons/char/69092.cc: New.\n+\n \t* include/Makefile.am: Adjust.\n \t* include/Makefile.in: Regenerate.\n \t* include/bits/mutex.h: Rename to bits/std_mutex.h."}, {"sha": "e7460bbed213614821ce5b687637acc0789d24b9", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373a75fb2ace6a65ef2c34d56dd0883e5e14a546/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373a75fb2ace6a65ef2c34d56dd0883e5e14a546/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=373a75fb2ace6a65ef2c34d56dd0883e5e14a546", "patch": "@@ -323,7 +323,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       template<class _Iterator>\n         static void\n         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)\n-\t_GLIBCXX_NOEXCEPT\n         {\n \t  for (; __k1 != __k2; ++__k1, (void)++__p)\n \t    traits_type::assign(*__p, *__k1); // These types are off.\n@@ -2901,7 +2900,6 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       template<class _Iterator>\n         static void\n         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)\n-\t_GLIBCXX_NOEXCEPT\n         {\n \t  for (; __k1 != __k2; ++__k1, (void)++__p)\n \t    traits_type::assign(*__p, *__k1); // These types are off."}, {"sha": "483708b948a0a7b33b2c2e72e731590d4f4e2215", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/69092.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373a75fb2ace6a65ef2c34d56dd0883e5e14a546/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F69092.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373a75fb2ace6a65ef2c34d56dd0883e5e14a546/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F69092.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F69092.cc?ref=373a75fb2ace6a65ef2c34d56dd0883e5e14a546", "patch": "@@ -0,0 +1,58 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+// PR libstdc++/69092\n+\n+#include <string>\n+#include <iterator>\n+\n+struct hate_T_iterator : std::iterator<std::forward_iterator_tag, char> {\n+    explicit hate_T_iterator(char* p) : p(p) {}\n+    char* p;\n+\n+    hate_T_iterator& operator++() { ++p; return *this; }\n+\n+    hate_T_iterator operator++(int)\n+    {\n+      hate_T_iterator r = *this;\n+      ++*this; return r;\n+    }\n+\n+    char& operator*() const\n+    {\n+      if (*p == 'T')\n+        throw 1;\n+      return *p;\n+    }\n+\n+    char* operator->() const { return p; }\n+\n+    bool operator== (hate_T_iterator other) const { return p == other.p;}\n+    bool operator!= (hate_T_iterator other) const { return p != other.p;}\n+};\n+\n+int main()\n+{\n+  char test_str[4] = \"ATA\";\n+  try {\n+    std::string s(hate_T_iterator(test_str), hate_T_iterator(test_str+3));\n+  }\n+  catch(int) {\n+  }\n+}"}]}