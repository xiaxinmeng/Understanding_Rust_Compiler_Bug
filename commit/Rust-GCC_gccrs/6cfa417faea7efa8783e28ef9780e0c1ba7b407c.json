{"sha": "6cfa417faea7efa8783e28ef9780e0c1ba7b407c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNmYTQxN2ZhZWE3ZWZhODc4M2UyOGVmOTc4MGUwYzFiYTdiNDA3Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-03-05T22:31:50Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-03-05T22:31:50Z"}, "message": "re PR debug/56510 (More var-tracking scalability problems)\n\n\tPR debug/56510\n\t* cfgexpand.c (expand_debug_parm_decl): Call copy_rtx on incoming.\n\t(avoid_complex_debug_insns): New function.\n\t(expand_debug_locations): Call it.\n\n\t* gcc.dg/pr56510.c: New test.\n\nFrom-SVN: r196479", "tree": {"sha": "fb5a02b9adf8e5158141f1007b4c472fddc868fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb5a02b9adf8e5158141f1007b4c472fddc868fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cfa417faea7efa8783e28ef9780e0c1ba7b407c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cfa417faea7efa8783e28ef9780e0c1ba7b407c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cfa417faea7efa8783e28ef9780e0c1ba7b407c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cfa417faea7efa8783e28ef9780e0c1ba7b407c/comments", "author": null, "committer": null, "parents": [{"sha": "7ead14d420b671bbc3e3eff8976fa80b09a7766b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ead14d420b671bbc3e3eff8976fa80b09a7766b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ead14d420b671bbc3e3eff8976fa80b09a7766b"}], "stats": {"total": 125, "additions": 118, "deletions": 7}, "files": [{"sha": "ee1d9fcaf553595b2675b606091e228690cb71aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cfa417faea7efa8783e28ef9780e0c1ba7b407c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cfa417faea7efa8783e28ef9780e0c1ba7b407c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6cfa417faea7efa8783e28ef9780e0c1ba7b407c", "patch": "@@ -1,8 +1,19 @@\n-2013-03-05  David Holsgrove <david.holsgrove@xilinx.com>\n+2013-03-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/56510\n+\t* cfgexpand.c (expand_debug_parm_decl): Call copy_rtx on incoming.\n+\t(avoid_complex_debug_insns): New function.\n+\t(expand_debug_locations): Call it.\n+\n+\tPR rtl-optimization/56484\n+\t* ifcvt.c (noce_process_if_block): If else_bb is NULL, avoid extending\n+\tlifetimes of hard registers on small register class machines.\n+\n+2013-03-05  David Holsgrove  <david.holsgrove@xilinx.com>\n \n-\t*  config/microblaze/microblaze-protos.h: Rename\n+\t* config/microblaze/microblaze-protos.h: Rename\n \tmicroblaze_is_interrupt_handler to microblaze_is_interrupt_variant.\n-\t*  config/microblaze/microblaze.c (microblaze_attribute_table): Add\n+\t* config/microblaze/microblaze.c (microblaze_attribute_table): Add\n \tfast_interrupt.\n \t(microblaze_fast_interrupt_function_p): New function.\n \t(microblaze_is_interrupt_handler): Rename to\n@@ -12,8 +23,8 @@\n \t(compute_frame_size): Likewise.\n \t(microblaze_function_prologue): Add FAST_INTERRUPT_NAME.\n \t(microblaze_globalize_label): Likewise.\n-\t*  config/microblaze/microblaze.h: Define FAST_INTERRUPT_NAME.\n-\t*  config/microblaze/microblaze.md: Use wrapper\n+\t* config/microblaze/microblaze.h: Define FAST_INTERRUPT_NAME.\n+\t* config/microblaze/microblaze.md: Use wrapper\n \tmicroblaze_is_interrupt_variant.\n \n 2013-03-05  Kai Tietz  <ktietz@redhat.com>"}, {"sha": "5acc42d73f544d2c95174c2941220a913b3fbc5e", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 57, "deletions": 2, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cfa417faea7efa8783e28ef9780e0c1ba7b407c/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cfa417faea7efa8783e28ef9780e0c1ba7b407c/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=6cfa417faea7efa8783e28ef9780e0c1ba7b407c", "patch": "@@ -2622,6 +2622,8 @@ expand_debug_parm_decl (tree decl)\n \t      reg = gen_raw_REG (GET_MODE (reg), OUTGOING_REGNO (REGNO (reg)));\n \t      incoming = replace_equiv_address_nv (incoming, reg);\n \t    }\n+\t  else\n+\t    incoming = copy_rtx (incoming);\n \t}\n #endif\n \n@@ -2637,7 +2639,7 @@ expand_debug_parm_decl (tree decl)\n \t  || (GET_CODE (XEXP (incoming, 0)) == PLUS\n \t      && XEXP (XEXP (incoming, 0), 0) == virtual_incoming_args_rtx\n \t      && CONST_INT_P (XEXP (XEXP (incoming, 0), 1)))))\n-    return incoming;\n+    return copy_rtx (incoming);\n \n   return NULL_RTX;\n }\n@@ -3704,6 +3706,56 @@ expand_debug_source_expr (tree exp)\n   return op0;\n }\n \n+/* Ensure INSN_VAR_LOCATION_LOC (insn) doesn't have unbound complexity.\n+   Allow 4 levels of rtl nesting for most rtl codes, and if we see anything\n+   deeper than that, create DEBUG_EXPRs and emit DEBUG_INSNs before INSN.  */\n+\n+static void\n+avoid_complex_debug_insns (rtx insn, rtx *exp_p, int depth)\n+{\n+  rtx exp = *exp_p;\n+\n+  if (exp == NULL_RTX)\n+    return;\n+\n+  if ((OBJECT_P (exp) && !MEM_P (exp)) || GET_CODE (exp) == CLOBBER)\n+    return;\n+\n+  if (depth == 4)\n+    {\n+      /* Create DEBUG_EXPR (and DEBUG_EXPR_DECL).  */\n+      rtx dval = make_debug_expr_from_rtl (exp);\n+\n+      /* Emit a debug bind insn before INSN.  */\n+      rtx bind = gen_rtx_VAR_LOCATION (GET_MODE (exp),\n+\t\t\t\t       DEBUG_EXPR_TREE_DECL (dval), exp,\n+\t\t\t\t       VAR_INIT_STATUS_INITIALIZED);\n+\n+      emit_debug_insn_before (bind, insn);\n+      *exp_p = dval;\n+      return;\n+    }\n+\n+  const char *format_ptr = GET_RTX_FORMAT (GET_CODE (exp));\n+  int i, j;\n+  for (i = 0; i < GET_RTX_LENGTH (GET_CODE (exp)); i++)\n+    switch (*format_ptr++)\n+      {\n+      case 'e':\n+\tavoid_complex_debug_insns (insn, &XEXP (exp, i), depth + 1);\n+\tbreak;\n+\n+      case 'E':\n+      case 'V':\n+\tfor (j = 0; j < XVECLEN (exp, i); j++)\n+\t  avoid_complex_debug_insns (insn, &XVECEXP (exp, i, j), depth + 1);\n+\tbreak;\n+\n+      default:\n+\tbreak;\n+      }\n+}\n+\n /* Expand the _LOCs in debug insns.  We run this after expanding all\n    regular insns, so that any variables referenced in the function\n    will have their DECL_RTLs set.  */\n@@ -3724,7 +3776,7 @@ expand_debug_locations (void)\n     if (DEBUG_INSN_P (insn))\n       {\n \ttree value = (tree)INSN_VAR_LOCATION_LOC (insn);\n-\trtx val;\n+\trtx val, prev_insn, insn2;\n \tenum machine_mode mode;\n \n \tif (value == NULL_TREE)\n@@ -3753,6 +3805,9 @@ expand_debug_locations (void)\n \t  }\n \n \tINSN_VAR_LOCATION_LOC (insn) = val;\n+\tprev_insn = PREV_INSN (insn);\n+\tfor (insn2 = insn; insn2 != prev_insn; insn2 = PREV_INSN (insn2))\n+\t  avoid_complex_debug_insns (insn2, &INSN_VAR_LOCATION_LOC (insn2), 0);\n       }\n \n   flag_strict_aliasing = save_strict_alias;"}, {"sha": "57df6fc2f3f4884b1dd934570b6ed78d2d5a33e9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cfa417faea7efa8783e28ef9780e0c1ba7b407c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cfa417faea7efa8783e28ef9780e0c1ba7b407c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6cfa417faea7efa8783e28ef9780e0c1ba7b407c", "patch": "@@ -1,3 +1,11 @@\n+2013-03-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/56510\n+\t* gcc.dg/pr56510.c: New test.\n+\n+\tPR rtl-optimization/56484\n+\t* gcc.c-torture/compile/pr56484.c: New test.\n+\n 2013-03-05  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/56530"}, {"sha": "1f8e21a57bfc8bc669bc6580a3a98c424bb3b002", "filename": "gcc/testsuite/gcc.dg/pr56510.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cfa417faea7efa8783e28ef9780e0c1ba7b407c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56510.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cfa417faea7efa8783e28ef9780e0c1ba7b407c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56510.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56510.c?ref=6cfa417faea7efa8783e28ef9780e0c1ba7b407c", "patch": "@@ -0,0 +1,37 @@\n+/* PR debug/56510 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g\" } */\n+\n+struct S { unsigned long s1; void **s2[0]; };\n+void **a, **b, **c, **d, **e, **f;\n+\n+static void **\n+baz (long x, long y)\n+{\n+  void **s = f;\n+  *f = (void **) (y << 8 | (x & 0xff));\n+  f += y + 1;\n+  return s;\n+}\n+\n+void bar (void);\n+void\n+foo (void)\n+{\n+  void **g = b[4];\n+  a = b[2];\n+  b = b[1];\n+  g[2] = e;\n+  void **h\n+    = ((void **************************)\n+       a)[1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][66];\n+  void **i = ((struct S *) h)->s2[4];\n+  d = baz (4, 3);\n+  d[1] = b;\n+  d[2] = a;\n+  d[3] = bar;\n+  b = d;\n+  g[1] = i[2];\n+  a = g;\n+  ((void (*) (void)) (i[1])) ();\n+}"}]}