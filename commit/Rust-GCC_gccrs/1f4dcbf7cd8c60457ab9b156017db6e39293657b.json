{"sha": "1f4dcbf7cd8c60457ab9b156017db6e39293657b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY0ZGNiZjdjZDhjNjA0NTdhYjliMTU2MDE3ZGI2ZTM5MjkzNjU3Yg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-02-14T14:10:19Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-02-14T14:10:19Z"}, "message": "LWG 2537 fix priority_queue constructors to establish invariant\n\nThis change is safe to make now (in stage 4), because the constructors\nare currently incorrect and unusable (unless the supplied container\nalready contains a heap, in which case the new make_heap calls are\nredundant but harmless).\n\n\t* doc/xml/manual/intro.xml: Document LWG 2537 status.\n\t* include/bits/stl_queue.h\n\t(priority_queue(const Compare&, const Container&, const Alloc&))\n\t(priority_queue(const Compare&, Container&&, const Alloc&)): Call\n\tmake_heap.\n\t* testsuite/23_containers/priority_queue/dr2537.cc: New test.\n\nFrom-SVN: r268878", "tree": {"sha": "6ac02bd086b09b0ffa91eed3f4b04f100fb52ea1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ac02bd086b09b0ffa91eed3f4b04f100fb52ea1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f4dcbf7cd8c60457ab9b156017db6e39293657b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f4dcbf7cd8c60457ab9b156017db6e39293657b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f4dcbf7cd8c60457ab9b156017db6e39293657b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f4dcbf7cd8c60457ab9b156017db6e39293657b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1138a19dfe5029e6ead3bb26bb344bddce9f24f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1138a19dfe5029e6ead3bb26bb344bddce9f24f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1138a19dfe5029e6ead3bb26bb344bddce9f24f0"}], "stats": {"total": 73, "additions": 71, "deletions": 2}, "files": [{"sha": "8186974196ef8ade83aea4f76a489bbfb077fe72", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f4dcbf7cd8c60457ab9b156017db6e39293657b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f4dcbf7cd8c60457ab9b156017db6e39293657b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1f4dcbf7cd8c60457ab9b156017db6e39293657b", "patch": "@@ -1,5 +1,12 @@\n 2019-02-14  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* doc/xml/manual/intro.xml: Document LWG 2537 status.\n+\t* include/bits/stl_queue.h\n+\t(priority_queue(const Compare&, const Container&, const Alloc&))\n+\t(priority_queue(const Compare&, Container&&, const Alloc&)): Call\n+\tmake_heap.\n+\t* testsuite/23_containers/priority_queue/dr2537.cc: New test.\n+\n \t* doc/xml/manual/intro.xml: Document LWG 2566 status.\n \t* include/bits/stl_queue.h (queue, priority_queue): Add static\n \tassertions to enforce LWG 2566 requirement on value_type."}, {"sha": "656e32b00aa6c13d271d96818a0d9a22b3e3789b", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f4dcbf7cd8c60457ab9b156017db6e39293657b/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f4dcbf7cd8c60457ab9b156017db6e39293657b/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=1f4dcbf7cd8c60457ab9b156017db6e39293657b", "patch": "@@ -1127,6 +1127,14 @@ requirements of the license of GCC.\n     <listitem><para>Add static assertions to enforce the requirement.\n     </para></listitem></varlistentry>\n \n+    <varlistentry xml:id=\"manual.bugs.dr2566\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2566\">2566</link>:\n+       <emphasis>Constructors for <code>priority_queue</code> taking allocators\n+\t should call <code>make_heap</code>\n+       </emphasis>\n+    </term>\n+    <listitem><para>Call <code>make_heap</code>.\n+    </para></listitem></varlistentry>\n+\n     <varlistentry xml:id=\"manual.bugs.dr2583\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2583\">2583</link>:\n        <emphasis>There is no way to supply an allocator for <code>basic_string(str, pos)</code>\n        </emphasis>"}, {"sha": "dd1d5d9727a25397f20a63984d43dae6f81374d7", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f4dcbf7cd8c60457ab9b156017db6e39293657b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f4dcbf7cd8c60457ab9b156017db6e39293657b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=1f4dcbf7cd8c60457ab9b156017db6e39293657b", "patch": "@@ -520,14 +520,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tpriority_queue(const _Compare& __x, const _Alloc& __a)\n \t: c(__a), comp(__x) { }\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2537. Constructors [...] taking allocators should call make_heap\n       template<typename _Alloc, typename _Requires = _Uses<_Alloc>>\n \tpriority_queue(const _Compare& __x, const _Sequence& __c,\n \t\t       const _Alloc& __a)\n-\t: c(__c, __a), comp(__x) { }\n+\t: c(__c, __a), comp(__x)\n+\t{ std::make_heap(c.begin(), c.end(), comp); }\n \n       template<typename _Alloc, typename _Requires = _Uses<_Alloc>>\n \tpriority_queue(const _Compare& __x, _Sequence&& __c, const _Alloc& __a)\n-\t: c(std::move(__c), __a), comp(__x) { }\n+\t: c(std::move(__c), __a), comp(__x)\n+\t{ std::make_heap(c.begin(), c.end(), comp); }\n \n       template<typename _Alloc, typename _Requires = _Uses<_Alloc>>\n \tpriority_queue(const priority_queue& __q, const _Alloc& __a)"}, {"sha": "ecb51780ee541e586b5bfd69a4d1b432f10a3a5f", "filename": "libstdc++-v3/testsuite/23_containers/priority_queue/dr2537.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f4dcbf7cd8c60457ab9b156017db6e39293657b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Fdr2537.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f4dcbf7cd8c60457ab9b156017db6e39293657b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Fdr2537.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Fdr2537.cc?ref=1f4dcbf7cd8c60457ab9b156017db6e39293657b", "patch": "@@ -0,0 +1,50 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <queue>\n+#include <testsuite_hooks.h>\n+\n+struct Q : std::priority_queue<int>\n+{\n+  using priority_queue::priority_queue;\n+\n+  bool is_heap() const\n+  { return std::is_heap(c.begin(), c.end()); }\n+};\n+\n+void\n+test01()\n+{\n+  const Q::value_compare cmp;\n+  const Q::container_type c{ 2, 3, 5, 7, 11, 13, 17, 19, 23 };\n+  const Q::container_type::allocator_type a;\n+\n+  Q q1(cmp, c, a);\n+  VERIFY( q1.is_heap() );\n+\n+  auto c2 = c;\n+  Q q2(cmp, std::move(c2), a);\n+  VERIFY( q2.is_heap() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}