{"sha": "5db9e89323cd0a0be16a94f2f984121531ea7772", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRiOWU4OTMyM2NkMGEwYmUxNmE5NGYyZjk4NDEyMTUzMWVhNzc3Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-23T18:44:58Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-23T18:44:58Z"}, "message": "c: Fix up cfun->function_end_locus on invalid function bodies [PR94239]\n\nUnfortunately the patch broke\n+FAIL: gcc.dg/pr20245-1.c (internal compiler error)\n+FAIL: gcc.dg/pr20245-1.c (test for excess errors)\n+FAIL: gcc.dg/pr28419.c (internal compiler error)\n+FAIL: gcc.dg/pr28419.c (test for excess errors)\non some targets (and under valgrind on the rest of them).\n\nThose functions don't have the opening { and so c_parser_compound_statement\nreturned error_mark_node before initializing *endlocp.\nSo, either we can initialize it in that case too:\n--- gcc/c/c-parser.c    2020-03-20 22:09:39.659411721 +0100\n+++ gcc/c/c-parser.c    2020-03-21 09:36:44.455705261 +0100\n@@ -5611,6 +5611,8 @@ c_parser_compound_statement (c_parser *p\n         if we have just prepared to enter a function body.  */\n       stmt = c_begin_compound_stmt (true);\n       c_end_compound_stmt (brace_loc, stmt, true);\n+      if (endlocp)\n+       *endlocp = brace_loc;\n       return error_mark_node;\n     }\n   stmt = c_begin_compound_stmt (true);\nor perhaps simpler initialize it to the function_start_locus at the\nbeginning and have those functions without { have function_start_locus ==\nfunction_end_locus like the __GIMPLE functions (where propagating the\nclosing } seemed too difficult).\n\n2020-03-23  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR gcov-profile/94029\n\tPR c/94239\n\t* c-parser.c (c_parser_declaration_or_fndef): Initialize endloc to\n\tthe function_start_locus location.  Don't do that afterwards for the\n\t__GIMPLE body parsing.", "tree": {"sha": "603b2a61862bfae11abe8ff4100ed9f4be64497a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/603b2a61862bfae11abe8ff4100ed9f4be64497a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5db9e89323cd0a0be16a94f2f984121531ea7772", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5db9e89323cd0a0be16a94f2f984121531ea7772", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5db9e89323cd0a0be16a94f2f984121531ea7772", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5db9e89323cd0a0be16a94f2f984121531ea7772/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d326e9586b405adf7da766b54aa4dbd382d98c2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d326e9586b405adf7da766b54aa4dbd382d98c2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d326e9586b405adf7da766b54aa4dbd382d98c2a"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "a3350c2b9d18fb20fef294db53d9fde3e36eafcb", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db9e89323cd0a0be16a94f2f984121531ea7772/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db9e89323cd0a0be16a94f2f984121531ea7772/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=5db9e89323cd0a0be16a94f2f984121531ea7772", "patch": "@@ -1,3 +1,11 @@\n+2020-03-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR gcov-profile/94029\n+\tPR c/94239\n+\t* c-parser.c (c_parser_declaration_or_fndef): Initialize endloc to\n+\tthe function_start_locus location.  Don't do that afterwards for the\n+\t__GIMPLE body parsing.\n+\n 2020-03-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR gcov-profile/94029"}, {"sha": "aeeac8c5f21b16d7f9fd284fbe3e77de829639e7", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db9e89323cd0a0be16a94f2f984121531ea7772/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db9e89323cd0a0be16a94f2f984121531ea7772/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=5db9e89323cd0a0be16a94f2f984121531ea7772", "patch": "@@ -2469,9 +2469,10 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n \t\t\t\t   omp_declare_simd_clauses);\n       if (oacc_routine_data)\n \tc_finish_oacc_routine (oacc_routine_data, current_function_decl, true);\n+      location_t startloc = c_parser_peek_token (parser)->location;\n       DECL_STRUCT_FUNCTION (current_function_decl)->function_start_locus\n-\t= c_parser_peek_token (parser)->location;\n-      location_t endloc;\n+\t= startloc;\n+      location_t endloc = startloc;\n \n       /* If the definition was marked with __RTL, use the RTL parser now,\n \t consuming the function body.  */\n@@ -2499,8 +2500,6 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n \t\t\t\t      specs->declspec_il,\n \t\t\t\t      specs->entry_bb_count);\n \t  in_late_binary_op = saved;\n-\t  struct function *fun = DECL_STRUCT_FUNCTION (current_function_decl);\n-\t  endloc = fun->function_start_locus;\n \t}\n       else\n \tfnbody = c_parser_compound_statement (parser, &endloc);"}]}