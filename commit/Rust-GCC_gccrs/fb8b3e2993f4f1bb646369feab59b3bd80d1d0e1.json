{"sha": "fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI4YjNlMjk5M2Y0ZjFiYjY0NjM2OWZlYWI1OWIzYmQ4MGQxZDBlMQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-04-24T15:17:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-04-24T15:17:53Z"}, "message": "Fix basic_string_view typedefs and enforce preconditions\n\nThe basic_string_view::pointer and basic_string_view::reference typedefs\nare supposed to refer to the non-const value type.\n\nIn previous standards having traits_type::char_type different to\nvalue_type was simply undefined, but in the C++2a draft it's ill-formed,\nas changed by P1148R0. For std::basic_string and iostreams we might\nwant to only enforce this conditionally for __cplusplus > 201703L but\nfor std::basic_string_view we don't have backwards compatibility\nconcerns. Also add assertions to verify the _CharT argument is a\n\"char-like\" type (non-array, trivial, standard layout type).\n\nAlso remove the non-standard basic_string_view::_M_check and\nbasic_string_view::_M_limit member functions, replacing them with\nnon-member functions that will still exist even if basic_string_view is\nspecialized by the program.\n\n\t* include/experimental/string_view (basic_string_view::pointer)\n\t(basic_string_view::reference): Fix to refer to non-const value_type.\n\t* include/bits/basic_string.h (basic_string): Use __sv_check and\n\t__sv_limit instead of basic_string_view::_M_check and\n\tbasic_string_view::_M_limit.\n\t* include/std/string_view (__sv_check, __sv_limit): New\n\thelper functions to replace basic_string_view::_M_check and\n\tbasic_string_view::_M_limit.\n\t(basic_string_view): Add static assertions to enforce ill-formed\n\trequirement for traits_type::char_type from P1148R0, and to enforce\n\trequired properties of char-like types.\n\t(basic_string_view::pointer, basic_string_view::reference): Fix to\n\trefer to non-const value_type.\n\t(basic_string_view::operator[], basic_string_view::at)\n\t(basic_string_view::front, basic_string_view::back)\n\t(basic_string_view::data): Use const_reference and const_pointer\n\ttypedefs for return types.\n\t(basic_string_view::_M_check, basic_string_view::_M_limit): Remove.\n\t(hash<wstring_view>): Fix argument_type typedef.\n\t* testsuite/21_strings/basic_string_view/modifiers/remove_prefix/\n\tchar/1.cc: Fix expected return type of basic_string_view::data().\n\t* testsuite/21_strings/basic_string_view/modifiers/remove_prefix/\n\twchar_t/1.cc: Likewise.\n\t* testsuite/21_strings/basic_string_view/modifiers/remove_suffix/\n\tchar/1.cc: Likewise.\n\t* testsuite/21_strings/basic_string_view/modifiers/remove_suffix/\n\twchar_t/1.cc: Likewise.\n\t* testsuite/21_strings/basic_string_view/requirements/traits_neg.cc:\n\tNew test.\n\t* testsuite/21_strings/basic_string_view/requirements/typedefs.cc:\n\tCheck reference and pointer typedefs.\n\t* testsuite/experimental/string_view/requirements/typedefs.cc:\n\tLikewise.\n\t* testsuite/experimental/string_view/modifiers/remove_prefix/char/1.cc:\n\tFix expected return type of basic_string_view::data().\n\t* testsuite/experimental/string_view/modifiers/remove_prefix/wchar_t/\n\t1.cc: Likewise.\n\t* testsuite/experimental/string_view/modifiers/remove_suffix/char/1.cc:\n\tLikewise.\n\t* testsuite/experimental/string_view/modifiers/remove_suffix/wchar_t/\n\t1.cc: Likewise.\n\nFrom-SVN: r270548", "tree": {"sha": "b45764ac1c617df739544c0de1c0fa03ef7e73dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b45764ac1c617df739544c0de1c0fa03ef7e73dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92750002ef200965cb33aa5af68676b540564758", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92750002ef200965cb33aa5af68676b540564758", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92750002ef200965cb33aa5af68676b540564758"}], "stats": {"total": 314, "additions": 213, "deletions": 101}, "files": [{"sha": "5e8a09a66364ba090106bc7f32c1b180ccd47db5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1", "patch": "@@ -1,5 +1,47 @@\n 2019-04-24  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/experimental/string_view (basic_string_view::pointer)\n+\t(basic_string_view::reference): Fix to refer to non-const value_type.\n+\t* include/bits/basic_string.h (basic_string): Use __sv_check and\n+\t__sv_limit instead of basic_string_view::_M_check and\n+\tbasic_string_view::_M_limit.\n+\t* include/std/string_view (__sv_check, __sv_limit): New\n+\thelper functions to replace basic_string_view::_M_check and\n+\tbasic_string_view::_M_limit.\n+\t(basic_string_view): Add static assertions to enforce ill-formed\n+\trequirement for traits_type::char_type from P1148R0, and to enforce\n+\trequired properties of char-like types.\n+\t(basic_string_view::pointer, basic_string_view::reference): Fix to\n+\trefer to non-const value_type.\n+\t(basic_string_view::operator[], basic_string_view::at)\n+\t(basic_string_view::front, basic_string_view::back)\n+\t(basic_string_view::data): Use const_reference and const_pointer\n+\ttypedefs for return types.\n+\t(basic_string_view::_M_check, basic_string_view::_M_limit): Remove.\n+\t(hash<wstring_view>): Fix argument_type typedef.\n+\t* testsuite/21_strings/basic_string_view/modifiers/remove_prefix/\n+\tchar/1.cc: Fix expected return type of basic_string_view::data().\n+\t* testsuite/21_strings/basic_string_view/modifiers/remove_prefix/\n+\twchar_t/1.cc: Likewise.\n+\t* testsuite/21_strings/basic_string_view/modifiers/remove_suffix/\n+\tchar/1.cc: Likewise.\n+\t* testsuite/21_strings/basic_string_view/modifiers/remove_suffix/\n+\twchar_t/1.cc: Likewise.\n+\t* testsuite/21_strings/basic_string_view/requirements/traits_neg.cc:\n+\tNew test.\n+\t* testsuite/21_strings/basic_string_view/requirements/typedefs.cc:\n+\tCheck reference and pointer typedefs.\n+\t* testsuite/experimental/string_view/requirements/typedefs.cc:\n+\tLikewise.\n+\t* testsuite/experimental/string_view/modifiers/remove_prefix/char/1.cc:\n+\tFix expected return type of basic_string_view::data().\n+\t* testsuite/experimental/string_view/modifiers/remove_prefix/wchar_t/\n+\t1.cc: Likewise.\n+\t* testsuite/experimental/string_view/modifiers/remove_suffix/char/1.cc:\n+\tLikewise.\n+\t* testsuite/experimental/string_view/modifiers/remove_suffix/wchar_t/\n+\t1.cc: Likewise.\n+\n \tPR libstdc++/90220\n \t* include/std/any (__any_caster): Use remove_cv_t instead of decay_t.\n \tAvoid a runtime check for types that can never be stored in std::any."}, {"sha": "40ef8758a5103d552a6dfbd045fe6b39236c216a", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1", "patch": "@@ -1336,8 +1336,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t{\n \t  __sv_type __sv = __svt;\n \t  return _M_append(__sv.data()\n-\t\t\t   + __sv._M_check(__pos, \"basic_string::append\"),\n-\t\t\t   __sv._M_limit(__pos, __n));\n+\t      + std::__sv_check(__sv.size(), __pos, \"basic_string::append\"),\n+\t      std::__sv_limit(__sv.size(), __pos, __n));\n \t}\n #endif // C++17\n \n@@ -1507,9 +1507,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \tassign(const _Tp& __svt, size_type __pos, size_type __n = npos)\n \t{\n \t  __sv_type __sv = __svt;\n-\t  return _M_replace(size_type(0), this->size(), __sv.data()\n-\t\t\t    + __sv._M_check(__pos, \"basic_string::assign\"),\n-\t\t\t    __sv._M_limit(__pos, __n));\n+\t  return _M_replace(size_type(0), this->size(),\n+\t      __sv.data()\n+\t      + std::__sv_check(__sv.size(), __pos, \"basic_string::assign\"),\n+\t      std::__sv_limit(__sv.size(), __pos, __n));\n \t}\n #endif // C++17\n \n@@ -1780,9 +1781,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t       size_type __pos2, size_type __n = npos)\n \t{\n \t  __sv_type __sv = __svt;\n-\t  return this->replace(__pos1, size_type(0), __sv.data()\n-\t\t\t       + __sv._M_check(__pos2, \"basic_string::insert\"),\n-\t\t\t       __sv._M_limit(__pos2, __n));\n+\t  return this->replace(__pos1, size_type(0),\n+\t      __sv.data()\n+\t      + std::__sv_check(__sv.size(), __pos2, \"basic_string::insert\"),\n+\t      std::__sv_limit(__sv.size(), __pos2, __n));\n \t}\n #endif // C++17\n \n@@ -2212,9 +2214,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t\tsize_type __pos2, size_type __n2 = npos)\n \t{\n \t  __sv_type __sv = __svt;\n-\t  return this->replace(__pos1, __n1, __sv.data()\n-\t\t\t       + __sv._M_check(__pos2, \"basic_string::replace\"),\n-\t\t\t       __sv._M_limit(__pos2, __n2));\n+\t  return this->replace(__pos1, __n1,\n+\t      __sv.data()\n+\t      + std::__sv_check(__sv.size(), __pos2, \"basic_string::replace\"),\n+\t      std::__sv_limit(__sv.size(), __pos2, __n2));\n \t}\n \n       /**\n@@ -4303,8 +4306,8 @@ _GLIBCXX_END_NAMESPACE_CXX11\n \t{\n \t  __sv_type __sv = __svt;\n \t  return append(__sv.data()\n-\t\t\t+ __sv._M_check(__pos, \"basic_string::append\"),\n-\t\t\t__sv._M_limit(__pos, __n));\n+\t      + std::__sv_check(__sv.size(), __pos, \"basic_string::append\"),\n+\t      std::__sv_limit(__sv.size(), __pos, __n));\n \t}\n #endif // C++17\n \n@@ -4460,8 +4463,8 @@ _GLIBCXX_END_NAMESPACE_CXX11\n \t{\n \t  __sv_type __sv = __svt;\n \t  return assign(__sv.data()\n-\t\t\t+ __sv._M_check(__pos, \"basic_string::assign\"),\n-\t\t\t__sv._M_limit(__pos, __n));\n+\t      + std::__sv_check(__sv.size(), __pos, \"basic_string::assign\"),\n+\t      std::__sv_limit(__sv.size(), __pos, __n));\n \t}\n #endif // C++17\n \n@@ -4671,8 +4674,8 @@ _GLIBCXX_END_NAMESPACE_CXX11\n \t{\n \t  __sv_type __sv = __svt;\n \t  return this->replace(__pos1, size_type(0), __sv.data()\n-\t\t\t       + __sv._M_check(__pos2, \"basic_string::insert\"),\n-\t\t\t       __sv._M_limit(__pos2, __n));\n+\t      + std::__sv_check(__sv.size(), __pos2, \"basic_string::insert\"),\n+\t      std::__sv_limit(__sv.size(), __pos2, __n));\n \t}\n #endif // C++17\n \n@@ -5062,8 +5065,9 @@ _GLIBCXX_END_NAMESPACE_CXX11\n \t{\n \t  __sv_type __sv = __svt;\n \t  return this->replace(__pos1, __n1,\n-\t      __sv.data() + __sv._M_check(__pos2, \"basic_string::replace\"),\n-\t      __sv._M_limit(__pos2, __n2));\n+\t      __sv.data()\n+\t      + std::__sv_check(__sv.size(), __pos2, \"basic_string::replace\"),\n+\t      std::__sv_limit(__sv.size(), __pos2, __n2));\n \t}\n \n       /**"}, {"sha": "9e810dec8445c32c31df23df797594201343090e", "filename": "libstdc++-v3/include/experimental/string_view", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view?ref=fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1", "patch": "@@ -78,9 +78,9 @@ inline namespace fundamentals_v1\n       // types\n       using traits_type = _Traits;\n       using value_type = _CharT;\n-      using pointer = const _CharT*;\n+      using pointer = _CharT*;\n       using const_pointer = const _CharT*;\n-      using reference = const _CharT&;\n+      using reference = _CharT&;\n       using const_reference = const _CharT&;\n       using const_iterator = const _CharT*;\n       using iterator = const_iterator;"}, {"sha": "42822cc41abbd1c7fc54b3bd47bba46703aba796", "filename": "libstdc++-v3/include/std/string_view", "status": "modified", "additions": 75, "deletions": 68, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view?ref=fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1", "patch": "@@ -49,6 +49,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #define __cpp_lib_string_view 201603\n \n+  // Helper for basic_string and basic_string_view members.\n+  constexpr size_t\n+  __sv_check(size_t __size, size_t __pos, const char* __s)\n+  {\n+    if (__pos > __size)\n+      __throw_out_of_range_fmt(__N(\"%s: __pos (which is %zu) > __size \"\n+\t\t\t\t   \"(which is %zu)\"), __s, __pos, __size);\n+    return __pos;\n+  }\n+\n+  // Helper for basic_string members.\n+  // NB: __sv_limit doesn't check for a bad __pos value.\n+  constexpr size_t\n+  __sv_limit(size_t __size, size_t __pos, size_t __off) noexcept\n+  {\n+   const bool __testoff =  __off < __size - __pos;\n+   return __testoff ? __off : __size - __pos;\n+  }\n+\n   /**\n    *  @class basic_string_view <string_view>\n    *  @brief  A non-owning reference to a string.\n@@ -70,24 +89,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _CharT, typename _Traits = std::char_traits<_CharT>>\n     class basic_string_view\n     {\n+      static_assert(!is_array_v<_CharT>);\n+      static_assert(is_trivial_v<_CharT> && is_standard_layout_v<_CharT>);\n+      static_assert(is_same_v<_CharT, typename _Traits::char_type>);\n+\n     public:\n \n       // types\n-      using traits_type = _Traits;\n-      using value_type = _CharT;\n-      using pointer = const _CharT*;\n-      using const_pointer = const _CharT*;\n-      using reference = const _CharT&;\n-      using const_reference = const _CharT&;\n-      using const_iterator = const _CharT*;\n-      using iterator = const_iterator;\n+      using traits_type\t\t= _Traits;\n+      using value_type\t\t= _CharT;\n+      using pointer\t\t= value_type*;\n+      using const_pointer\t= const value_type*;\n+      using reference\t\t= value_type&;\n+      using const_reference\t= const value_type&;\n+      using const_iterator\t= const value_type*;\n+      using iterator\t\t= const_iterator;\n       using const_reverse_iterator = std::reverse_iterator<const_iterator>;\n-      using reverse_iterator = const_reverse_iterator;\n-      using size_type = size_t;\n-      using difference_type = ptrdiff_t;\n+      using reverse_iterator\t= const_reverse_iterator;\n+      using size_type\t\t= size_t;\n+      using difference_type\t= ptrdiff_t;\n       static constexpr size_type npos = size_type(-1);\n \n-      // [string.view.cons], construct/copy\n+      // [string.view.cons], construction and assignment\n \n       constexpr\n       basic_string_view() noexcept\n@@ -110,7 +133,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr basic_string_view&\n       operator=(const basic_string_view&) noexcept = default;\n \n-      // [string.view.iterators], iterators\n+      // [string.view.iterators], iterator support\n \n       constexpr const_iterator\n       begin() const noexcept\n@@ -167,15 +190,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // [string.view.access], element access\n \n-      constexpr const _CharT&\n+      constexpr const_reference\n       operator[](size_type __pos) const noexcept\n       {\n \t// TODO: Assert to restore in a way compatible with the constexpr.\n \t// __glibcxx_assert(__pos < this->_M_len);\n \treturn *(this->_M_str + __pos);\n       }\n \n-      constexpr const _CharT&\n+      constexpr const_reference\n       at(size_type __pos) const\n       {\n \tif (__pos >= _M_len)\n@@ -185,23 +208,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *(this->_M_str + __pos);\n       }\n \n-      constexpr const _CharT&\n+      constexpr const_reference\n       front() const noexcept\n       {\n \t// TODO: Assert to restore in a way compatible with the constexpr.\n \t// __glibcxx_assert(this->_M_len > 0);\n \treturn *this->_M_str;\n       }\n \n-      constexpr const _CharT&\n+      constexpr const_reference\n       back() const noexcept\n       {\n \t// TODO: Assert to restore in a way compatible with the constexpr.\n \t// __glibcxx_assert(this->_M_len > 0);\n \treturn *(this->_M_str + this->_M_len - 1);\n       }\n \n-      constexpr const _CharT*\n+      constexpr const_pointer\n       data() const noexcept\n       { return this->_M_str; }\n \n@@ -233,7 +256,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       copy(_CharT* __str, size_type __n, size_type __pos = 0) const\n       {\n \t__glibcxx_requires_string_len(__str, __n);\n-\t__pos = _M_check(__pos, \"basic_string_view::copy\");\n+\t__pos = std::__sv_check(size(), __pos, \"basic_string_view::copy\");\n \tconst size_type __rlen = std::min(__n, _M_len - __pos);\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 2777. basic_string_view::copy should use char_traits::copy\n@@ -244,7 +267,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr basic_string_view\n       substr(size_type __pos = 0, size_type __n = npos) const noexcept(false)\n       {\n-\t__pos = _M_check(__pos, \"basic_string_view::substr\");\n+\t__pos = std::__sv_check(size(), __pos, \"basic_string_view::substr\");\n \tconst size_type __rlen = std::min(__n, _M_len - __pos);\n \treturn basic_string_view{_M_str + __pos, __rlen};\n       }\n@@ -286,6 +309,37 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   .compare(basic_string_view(__str, __n2));\n       }\n \n+#if __cplusplus > 201703L\n+      constexpr bool\n+      starts_with(basic_string_view __x) const noexcept\n+      { return this->substr(0, __x.size()) == __x; }\n+\n+      constexpr bool\n+      starts_with(_CharT __x) const noexcept\n+      { return !this->empty() && traits_type::eq(this->front(), __x); }\n+\n+      constexpr bool\n+      starts_with(const _CharT* __x) const noexcept\n+      { return this->starts_with(basic_string_view(__x)); }\n+\n+      constexpr bool\n+      ends_with(basic_string_view __x) const noexcept\n+      {\n+\treturn this->size() >= __x.size()\n+\t    && this->compare(this->size() - __x.size(), npos, __x) == 0;\n+      }\n+\n+      constexpr bool\n+      ends_with(_CharT __x) const noexcept\n+      { return !this->empty() && traits_type::eq(this->back(), __x); }\n+\n+      constexpr bool\n+      ends_with(const _CharT* __x) const noexcept\n+      { return this->ends_with(basic_string_view(__x)); }\n+#endif // C++20\n+\n+      // [string.view.find], searching\n+\n       constexpr size_type\n       find(basic_string_view __str, size_type __pos = 0) const noexcept\n       { return this->find(__str._M_str, __pos, __str._M_len); }\n@@ -386,53 +440,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t      traits_type::length(__str));\n       }\n \n-#if __cplusplus > 201703L\n-      constexpr bool\n-      starts_with(basic_string_view __x) const noexcept\n-      { return this->substr(0, __x.size()) == __x; }\n-\n-      constexpr bool\n-      starts_with(_CharT __x) const noexcept\n-      { return !this->empty() && traits_type::eq(this->front(), __x); }\n-\n-      constexpr bool\n-      starts_with(const _CharT* __x) const noexcept\n-      { return this->starts_with(basic_string_view(__x)); }\n-\n-      constexpr bool\n-      ends_with(basic_string_view __x) const noexcept\n-      {\n-\treturn this->size() >= __x.size()\n-\t    && this->compare(this->size() - __x.size(), npos, __x) == 0;\n-      }\n-\n-      constexpr bool\n-      ends_with(_CharT __x) const noexcept\n-      { return !this->empty() && traits_type::eq(this->back(), __x); }\n-\n-      constexpr bool\n-      ends_with(const _CharT* __x) const noexcept\n-      { return this->ends_with(basic_string_view(__x)); }\n-#endif // C++20\n-\n-      constexpr size_type\n-      _M_check(size_type __pos, const char* __s) const noexcept(false)\n-      {\n-\tif (__pos > this->size())\n-\t  __throw_out_of_range_fmt(__N(\"%s: __pos (which is %zu) > \"\n-\t\t\t\t       \"this->size() (which is %zu)\"),\n-\t\t\t\t   __s, __pos, this->size());\n-\treturn __pos;\n-      }\n-\n-      // NB: _M_limit doesn't check for a bad __pos value.\n-      constexpr size_type\n-      _M_limit(size_type __pos, size_type __off) const noexcept\n-      {\n-\tconst bool __testoff =  __off < this->size() - __pos;\n-\treturn __testoff ? __off : this->size() - __pos;\n-      }\n-      \n     private:\n \n       static constexpr int\n@@ -610,7 +617,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n     struct hash<wstring_view>\n-    : public __hash_base<size_t, wstring>\n+    : public __hash_base<size_t, wstring_view>\n     {\n       size_t\n       operator()(const wstring_view& __s) const noexcept"}, {"sha": "944260652bf11f5415cd6b139d9e930a469a98e2", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/modifiers/remove_prefix/char/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fmodifiers%2Fremove_prefix%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fmodifiers%2Fremove_prefix%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fmodifiers%2Fremove_prefix%2Fchar%2F1.cc?ref=fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1", "patch": "@@ -26,7 +26,7 @@ test01()\n   using std::string_view;\n \n   string_view str0{\"olympus mons\"};\n-  string_view::pointer p = str0.data();\n+  string_view::const_pointer p = str0.data();\n   str0.remove_prefix(4);\n   VERIFY( str0.data() == p + 4);\n   VERIFY( str0.length() == 8 );\n@@ -39,7 +39,7 @@ test02()\n   using std::string_view;\n \n   string_view str0{\"olympus mons\"};\n-  string_view::pointer p = str0.data();\n+  string_view::const_pointer p = str0.data();\n   str0.remove_prefix(4);\n   if ( str0.data() != p + 4)\n     return false;"}, {"sha": "c8ad5528b31d5fe79ab76f89eb69311cc22cd462", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/modifiers/remove_prefix/wchar_t/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fmodifiers%2Fremove_prefix%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fmodifiers%2Fremove_prefix%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fmodifiers%2Fremove_prefix%2Fwchar_t%2F1.cc?ref=fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1", "patch": "@@ -26,7 +26,7 @@ test01()\n   using std::wstring_view;\n \n   wstring_view str0{L\"olympus mons\"};\n-  wstring_view::pointer p = str0.data();\n+  wstring_view::const_pointer p = str0.data();\n   str0.remove_prefix(4);\n   VERIFY( str0.data() == p + 4);\n   VERIFY( str0.length() == 8 );\n@@ -39,7 +39,7 @@ test02()\n   using std::wstring_view;\n \n   wstring_view str0{L\"olympus mons\"};\n-  wstring_view::pointer p = str0.data();\n+  wstring_view::const_pointer p = str0.data();\n   str0.remove_prefix(4);\n   if ( str0.data() != p + 4)\n     return false;"}, {"sha": "d4d5d7dd06d75cacaed612118dc1b13c86c46f19", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/modifiers/remove_suffix/char/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fmodifiers%2Fremove_suffix%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fmodifiers%2Fremove_suffix%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fmodifiers%2Fremove_suffix%2Fchar%2F1.cc?ref=fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1", "patch": "@@ -26,7 +26,7 @@ test01()\n   using std::string_view;\n \n   string_view str0{\"olympus mons\"};\n-  string_view::pointer p = str0.data();\n+  string_view::const_pointer p = str0.data();\n   str0.remove_suffix(2);\n   VERIFY( str0.data() == p);\n   VERIFY( str0.length() == 10 );\n@@ -39,7 +39,7 @@ test02()\n   using std::string_view;\n \n   string_view str0{\"olympus mons\"};\n-  string_view::pointer p = str0.data();\n+  string_view::const_pointer p = str0.data();\n   str0.remove_suffix(2);\n   if ( str0.data() != p)\n     return false;"}, {"sha": "deccc25284062539b6c815cf465775639d9d680a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/modifiers/remove_suffix/wchar_t/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fmodifiers%2Fremove_suffix%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fmodifiers%2Fremove_suffix%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fmodifiers%2Fremove_suffix%2Fwchar_t%2F1.cc?ref=fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1", "patch": "@@ -26,7 +26,7 @@ test01()\n   using std::wstring_view;\n \n   wstring_view str0{L\"olympus mons\"};\n-  wstring_view::pointer p = str0.data();\n+  wstring_view::const_pointer p = str0.data();\n   str0.remove_suffix(2);\n   VERIFY( str0.data() == p);\n   VERIFY( str0.length() == 10 );\n@@ -39,7 +39,7 @@ test02()\n   using std::wstring_view;\n \n   wstring_view str0{L\"olympus mons\"};\n-  wstring_view::pointer p = str0.data();\n+  wstring_view::const_pointer p = str0.data();\n   str0.remove_suffix(2);\n   if ( str0.data() != p)\n     return false;"}, {"sha": "93ea80854f4932c4494a070a31134dfaf129eca2", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/requirements/traits_neg.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frequirements%2Ftraits_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frequirements%2Ftraits_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frequirements%2Ftraits_neg.cc?ref=fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1", "patch": "@@ -0,0 +1,37 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <string_view>\n+\n+// C++98 21.1 [lib.char.traits] p3\n+// C++03 21.1 [lib.char.traits] p3\n+// C++11 21.2 [char.traits] p3\n+// C++14 21.2 [char.traits] p3\n+// C++17 24.2 [char.traits] p3\n+// \"Traits::char_type shall be the same as CharT.\"\n+// C++17 24.4.2 [string.view.template] p1\n+// \"the type traits::char_type shall name the same type as charT\"\n+// C++2a 21.2 [char.traits] p3 (post-P1148R0)\n+// \"If X::char_type is not the same type as C, the program is ill-formed.\"\n+\n+std::basic_string_view<char, std::char_traits<char16_t>> s1; // { dg-error \"here\" }\n+std::basic_string_view<char32_t, std::char_traits<char>> s2; // { dg-error \"here\" }\n+\n+// { dg-prune-output \"static assertion failed\" }"}, {"sha": "b11ef57280096ef1a145da23b9d300d111b6171f", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/requirements/typedefs.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frequirements%2Ftypedefs.cc?ref=fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1", "patch": "@@ -45,3 +45,12 @@ __gnu_test::basic_types<std::wstring_view> t2b;\n __gnu_test::reversible_types<std::wstring_view> t2r;\n typedef typename std::wstring_view::traits_type traits_type2;\n #endif\n+\n+static_assert(std::is_same<std::string_view::pointer, char*>(),\n+    \"pointer should be value_type*\");\n+static_assert(std::is_same<std::string_view::const_pointer, const char*>(),\n+    \"const_pointer should be const value_type*\");\n+static_assert(std::is_same<std::string_view::reference, char&>(),\n+    \"reference should be value_type&\");\n+static_assert(std::is_same<std::string_view::const_reference, const char&>(),\n+    \"const_reference should be const value_type&\");"}, {"sha": "8a7b6b8767902f3f11988d3b919b6d9674c7aa3e", "filename": "libstdc++-v3/testsuite/experimental/string_view/modifiers/remove_prefix/char/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fmodifiers%2Fremove_prefix%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fmodifiers%2Fremove_prefix%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fmodifiers%2Fremove_prefix%2Fchar%2F1.cc?ref=fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1", "patch": "@@ -26,7 +26,7 @@ test01()\n   using namespace std::experimental;\n \n   string_view str0{\"olympus mons\"};\n-  string_view::pointer p = str0.data();\n+  string_view::const_pointer p = str0.data();\n   str0.remove_prefix(4);\n   VERIFY( str0.data() == p + 4);\n   VERIFY( str0.length() == 8 );"}, {"sha": "153349f2a9f3b47fb159c464accc58d085ecb197", "filename": "libstdc++-v3/testsuite/experimental/string_view/modifiers/remove_prefix/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fmodifiers%2Fremove_prefix%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fmodifiers%2Fremove_prefix%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fmodifiers%2Fremove_prefix%2Fwchar_t%2F1.cc?ref=fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1", "patch": "@@ -26,7 +26,7 @@ test01()\n   using namespace std::experimental;\n \n   wstring_view str0{L\"olympus mons\"};\n-  wstring_view::pointer p = str0.data();\n+  wstring_view::const_pointer p = str0.data();\n   str0.remove_prefix(4);\n   VERIFY( str0.data() == p + 4);\n   VERIFY( str0.length() == 8 );"}, {"sha": "612a62c045b507a357a556f8fa6d8a128160b57a", "filename": "libstdc++-v3/testsuite/experimental/string_view/modifiers/remove_suffix/char/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fmodifiers%2Fremove_suffix%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fmodifiers%2Fremove_suffix%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fmodifiers%2Fremove_suffix%2Fchar%2F1.cc?ref=fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1", "patch": "@@ -26,7 +26,7 @@ test01()\n   using namespace std::experimental;\n \n   string_view str0{\"olympus mons\"};\n-  string_view::pointer p = str0.data();\n+  string_view::const_pointer p = str0.data();\n   str0.remove_suffix(2);\n   VERIFY( str0.data() == p);\n   VERIFY( str0.length() == 10 );"}, {"sha": "b1114d1799bc0f3d9a0a2f91eb8e47fe1bda5ee3", "filename": "libstdc++-v3/testsuite/experimental/string_view/modifiers/remove_suffix/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fmodifiers%2Fremove_suffix%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fmodifiers%2Fremove_suffix%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fmodifiers%2Fremove_suffix%2Fwchar_t%2F1.cc?ref=fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1", "patch": "@@ -26,7 +26,7 @@ test01()\n   using namespace std::experimental;\n \n   wstring_view str0{L\"olympus mons\"};\n-  wstring_view::pointer p = str0.data();\n+  wstring_view::const_pointer p = str0.data();\n   str0.remove_suffix(2);\n   VERIFY( str0.data() == p);\n   VERIFY( str0.length() == 10 );"}, {"sha": "38e20e1625c25fb1880ac7a0e89f258176dadd39", "filename": "libstdc++-v3/testsuite/experimental/string_view/requirements/typedefs.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frequirements%2Ftypedefs.cc?ref=fb8b3e2993f4f1bb646369feab59b3bd80d1d0e1", "patch": "@@ -43,3 +43,16 @@ __gnu_test::basic_types<std::experimental::wstring_view> t2b;\n __gnu_test::reversible_types<std::experimental::wstring_view> t2r;\n typedef typename std::experimental::wstring_view::traits_type traits_type2;\n #endif\n+\n+static_assert(\n+    std::is_same<std::experimental::string_view::pointer, char*>(),\n+    \"pointer should be value_type*\");\n+static_assert(\n+    std::is_same<std::experimental::string_view::const_pointer, const char*>(),\n+    \"const_pointer should be const value_type*\");\n+static_assert(\n+    std::is_same<std::experimental::string_view::reference, char&>(),\n+    \"reference should be value_type&\");\n+static_assert(\n+    std::is_same<std::experimental::string_view::const_reference, const char&>(),\n+    \"const_reference should be const value_type&\");"}]}