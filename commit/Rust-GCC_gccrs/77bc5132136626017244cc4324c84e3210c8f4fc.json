{"sha": "77bc5132136626017244cc4324c84e3210c8f4fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdiYzUxMzIxMzY2MjYwMTcyNDRjYzQzMjRjODRlMzIxMGM4ZjRmYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-11-23T09:02:28Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-11-23T09:02:28Z"}, "message": "re PR sanitizer/55435 ([asan] implement an attribute to disable asan instrumentation for a particular function)\n\n\tPR sanitizer/55435\n\t* c-common.c (handle_no_address_safety_analysis_attribute): New\n\tfunction.\n\t(c_common_attribute_table): Add no_address_safety_analysis.\n\n\t* asan.c (gate_asan): Don't instrument functions with\n\tno_address_safety_analysis attribute.\n\t(gate_asan_O0): Use !optimize && gate_asan ().\n\t* doc/extend.texi (no_address_safety_analysis): Document new\n\tfunction attribute.\n\n\t* c-c++-common/asan/attrib-1.c: New test.\n\nFrom-SVN: r193748", "tree": {"sha": "5b2104a30f7e40b8672e50934d6b8b9c1f75ec85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b2104a30f7e40b8672e50934d6b8b9c1f75ec85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77bc5132136626017244cc4324c84e3210c8f4fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77bc5132136626017244cc4324c84e3210c8f4fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77bc5132136626017244cc4324c84e3210c8f4fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77bc5132136626017244cc4324c84e3210c8f4fc/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b131b583978ceadbe54325be3a09710a48481df2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b131b583978ceadbe54325be3a09710a48481df2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b131b583978ceadbe54325be3a09710a48481df2"}], "stats": {"total": 98, "additions": 92, "deletions": 6}, "files": [{"sha": "6a146e0279fdb1b6573add7755020b2b862460e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77bc5132136626017244cc4324c84e3210c8f4fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77bc5132136626017244cc4324c84e3210c8f4fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77bc5132136626017244cc4324c84e3210c8f4fc", "patch": "@@ -1,3 +1,12 @@\n+2012-11-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/55435\n+\t* asan.c (gate_asan): Don't instrument functions with\n+\tno_address_safety_analysis attribute.\n+\t(gate_asan_O0): Use !optimize && gate_asan ().\n+\t* doc/extend.texi (no_address_safety_analysis): Document new\n+\tfunction attribute.\n+\n 2012-11-22  Teresa Johnson  <tejohnson@google.com>\n \t    Jan Hubicka  <jh@suse.cz>\n "}, {"sha": "26c4178a9f073d2a69a019d7fac60f39e5b75feb", "filename": "gcc/asan.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77bc5132136626017244cc4324c84e3210c8f4fc/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77bc5132136626017244cc4324c84e3210c8f4fc/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=77bc5132136626017244cc4324c84e3210c8f4fc", "patch": "@@ -1587,7 +1587,9 @@ asan_instrument (void)\n static bool\n gate_asan (void)\n {\n-  return flag_asan != 0;\n+  return flag_asan != 0\n+\t  && !lookup_attribute (\"no_address_safety_analysis\",\n+\t\t\t\tDECL_ATTRIBUTES (current_function_decl));\n }\n \n struct gimple_opt_pass pass_asan =\n@@ -1614,7 +1616,7 @@ struct gimple_opt_pass pass_asan =\n static bool\n gate_asan_O0 (void)\n {\n-  return flag_asan != 0 && !optimize;\n+  return !optimize && gate_asan ();\n }\n \n struct gimple_opt_pass pass_asan_O0 ="}, {"sha": "ce794a2927322f9d1ca523b071bffef1678cc77d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77bc5132136626017244cc4324c84e3210c8f4fc/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77bc5132136626017244cc4324c84e3210c8f4fc/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=77bc5132136626017244cc4324c84e3210c8f4fc", "patch": "@@ -1,3 +1,10 @@\n+2012-11-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/55435\n+\t* c-common.c (handle_no_address_safety_analysis_attribute): New\n+\tfunction.\n+\t(c_common_attribute_table): Add no_address_safety_analysis.\n+\n 2012-11-16  Simon Baldwin  <simonb@google.com>\n \n \t* c.opt: Add f[no-]canonical-system-headers."}, {"sha": "0c9cccd3146a8cd2eb357f855fd0112f119fbc89", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77bc5132136626017244cc4324c84e3210c8f4fc/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77bc5132136626017244cc4324c84e3210c8f4fc/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=77bc5132136626017244cc4324c84e3210c8f4fc", "patch": "@@ -309,6 +309,8 @@ static tree handle_common_attribute (tree *, tree, tree, int, bool *);\n static tree handle_noreturn_attribute (tree *, tree, tree, int, bool *);\n static tree handle_hot_attribute (tree *, tree, tree, int, bool *);\n static tree handle_cold_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_no_address_safety_analysis_attribute (tree *, tree, tree,\n+\t\t\t\t\t\t\t int, bool *);\n static tree handle_noinline_attribute (tree *, tree, tree, int, bool *);\n static tree handle_noclone_attribute (tree *, tree, tree, int, bool *);\n static tree handle_leaf_attribute (tree *, tree, tree, int, bool *);\n@@ -711,6 +713,10 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_cold_attribute, false },\n   { \"hot\",                    0, 0, true,  false, false,\n \t\t\t      handle_hot_attribute, false },\n+  { \"no_address_safety_analysis\",\n+\t\t\t      0, 0, true, false, false,\n+\t\t\t      handle_no_address_safety_analysis_attribute,\n+\t\t\t      false },\n   { \"warning\",\t\t      1, 1, true,  false, false,\n \t\t\t      handle_error_attribute, false },\n   { \"error\",\t\t      1, 1, true,  false, false,\n@@ -6482,6 +6488,22 @@ handle_cold_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n   return NULL_TREE;\n }\n \n+/* Handle a \"no_address_safety_analysis\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_no_address_safety_analysis_attribute (tree *node, tree name, tree, int,\n+\t\t\t\t\t     bool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) != FUNCTION_DECL)\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Handle a \"noinline\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "f34f0f955e94a415bf17de620274ca4acfd38045", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77bc5132136626017244cc4324c84e3210c8f4fc/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77bc5132136626017244cc4324c84e3210c8f4fc/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=77bc5132136626017244cc4324c84e3210c8f4fc", "patch": "@@ -2130,10 +2130,11 @@ attributes are currently defined for functions on all targets:\n @code{weak}, @code{malloc}, @code{alias}, @code{ifunc},\n @code{warn_unused_result}, @code{nonnull}, @code{gnu_inline},\n @code{externally_visible}, @code{hot}, @code{cold}, @code{artificial},\n-@code{error} and @code{warning}.  Several other attributes are defined\n-for functions on particular target systems.  Other attributes,\n-including @code{section} are supported for variables declarations\n-(@pxref{Variable Attributes}) and for types (@pxref{Type Attributes}).\n+@code{no_address_safety_analysis}, @code{error} and @code{warning}.\n+Several other attributes are defined for functions on particular\n+target systems.  Other attributes, including @code{section} are\n+supported for variables declarations (@pxref{Variable Attributes})\n+and for types (@pxref{Type Attributes}).\n \n GCC plugins may provide their own attributes.\n \n@@ -3416,6 +3417,12 @@ with computed goto or @code{asm goto}.\n The @code{cold} attribute on labels is not implemented in GCC versions\n earlier than 4.8.\n \n+@item no_address_safety_analysis\n+@cindex @code{no_address_safety_analysis} function attribute\n+The @code{no_address_safety_analysis} attribute on functions is used\n+to inform the compiler that it should not instrument memory accesses\n+in the function when compiling with the @option{-fsanitize=address} option.\n+\n @item regparm (@var{number})\n @cindex @code{regparm} attribute\n @cindex functions that are passed arguments in registers on the 386"}, {"sha": "e3214b1380cac2dead07772711a2846d24c2ea1c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77bc5132136626017244cc4324c84e3210c8f4fc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77bc5132136626017244cc4324c84e3210c8f4fc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77bc5132136626017244cc4324c84e3210c8f4fc", "patch": "@@ -1,3 +1,8 @@\n+2012-11-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/55435\n+\t* c-c++-common/asan/attrib-1.c: New test.\n+\n 2012-11-22  Ian Bolton  <ian.bolton@arm.com>\n \n \t* gcc.target/aarch64/builtin-bswap-1.c: New test."}, {"sha": "e633bb6181a2f4e57883083d412eb875a953f178", "filename": "gcc/testsuite/c-c++-common/asan/attrib-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77bc5132136626017244cc4324c84e3210c8f4fc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fattrib-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77bc5132136626017244cc4324c84e3210c8f4fc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fattrib-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fattrib-1.c?ref=77bc5132136626017244cc4324c84e3210c8f4fc", "patch": "@@ -0,0 +1,34 @@\n+/* PR sanitizer/55435 */\n+/* { dg-do compile } */\n+\n+__attribute__((no_address_safety_analysis)) int\n+f1 (int *p, int *q)\n+{\n+  *p = 42;\n+  return *q;\n+}\n+\n+void f2 (char *);\n+void f2 (char *) __attribute__((no_address_safety_analysis));\n+void f2 (char *) __attribute__((no_address_safety_analysis));\n+void f2 (char *);\n+\n+void\n+f2 (char *p)\n+{\n+  *p = 42;\n+}\n+\n+void f3 (short *);\n+__typeof (f3) f3  __attribute__((__no_address_safety_analysis__));\n+\n+void\n+f3 (short *p)\n+{\n+  *p = 42;\n+}\n+\n+int v __attribute__((no_address_safety_analysis)); /* { dg-warning \"attribute ignored\" } */\n+\n+/* { dg-final { scan-assembler-not \"__asan_report_store\" } } */\n+/* { dg-final { scan-assembler-not \"__asan_report_load\" } } */"}]}