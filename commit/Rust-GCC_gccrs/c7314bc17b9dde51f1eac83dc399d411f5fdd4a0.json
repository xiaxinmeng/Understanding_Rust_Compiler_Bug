{"sha": "c7314bc17b9dde51f1eac83dc399d411f5fdd4a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzczMTRiYzE3YjlkZGU1MWYxZWFjODNkYzM5OWQ0MTFmNWZkZDRhMA==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2017-05-09T14:19:35Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2017-05-09T14:19:35Z"}, "message": "[ARC]Fast interrupts support.\n\nWhen a processor enters a fast interrupts handler, and duplicate\nregister banks are configured, the processor saves the user context by\nsaving the registers in the main register bank to these additional\nregisters in the duplicate register bank.  In this fast interrupt\ncontext, when you specify the rgf_banked_regs option,the compiler does\nnot save the registers duplicated in the additional register bank are\nnot saved.\n\ngcc/\n2017-05-09  Claudiu Zissulescu  <claziss@synopsys.com>\n\t    Andrew Burgess  <andrew.burgess@embecosm.com>\n\n\t* config/arc/arc.c (ARC_AUTOBLINK_IRQ_P): Consider fast interrupts\n\tcase also.\n\t(ARC_AUTOFP_IRQ_P): Likewise.\n\t(ARC_AUTO_IRQ_P): Likewise.\n\t(rgf_banked_register_count): New variable.\n\t(parse_mrgf_banked_regs_option): New function.\n\t(arc_override_options): Handle rgf_banked_regs option.\n\t(arc_handle_interrupt_attribute): Add firq option.\n\t(arc_compute_function_type): Return fast irq type when required.\n\t(arc_must_save_register): Handle fast interrupts.\n\t(arc_expand_prologue): Do not emit dwarf info for fast interrupts.\n\t(arc_return_address_regs): Update.\n\t* config/arc/arc.h (arc_return_address_regs): Update.\n\t(arc_function_type): Add fast interrupt type.\n\t(ARC_INTERRUPT_P): Update.\n\t(RC_FAST_INTERRUPT_P): Define.\n\t* config/arc/arc.md (simple_return): Update for fast interrupts.\n\t(p_return_i): Likewise.\n\t* config/arc/arc.opt (mrgf-banked-regs): New option.\n\t* doc/invoke.texi (mrgf-banked-regs): Document.\n\ntestsuite/\n2017-05-09  Claudiu Zissulescu  <claziss@synopsys.com>\n\t    Andrew Burgess  <andrew.burgess@embecosm.com>\n\n\t* gcc.target/arc/firq-1.c: New file.\n\t* gcc.target/arc/firq-2.c: Likewise.\n\t* gcc.target/arc/firq-3.c: Likewise.\n\t* gcc.target/arc/firq-4.c: Likewise.\n\t* gcc.target/arc/firq-5.c: Likewise.\n\t* gcc.target/arc/firq-6.c: Likewise.\n\nCo-Authored-By: Andrew Burgess <andrew.burgess@embecosm.com>\n\nFrom-SVN: r247796", "tree": {"sha": "936ddafec5b9117a5b74e1054e23cab049a0bc25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/936ddafec5b9117a5b74e1054e23cab049a0bc25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4145318390da5670b2e571593ccfe7779863b93c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4145318390da5670b2e571593ccfe7779863b93c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4145318390da5670b2e571593ccfe7779863b93c"}], "stats": {"total": 341, "additions": 311, "deletions": 30}, "files": [{"sha": "d8eb87e7b1795db8af02b4bc4b0b32190d17d51c", "filename": "ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=c7314bc17b9dde51f1eac83dc399d411f5fdd4a0", "patch": "@@ -1,3 +1,27 @@\n+2017-05-09  Claudiu Zissulescu  <claziss@synopsys.com>\n+\t    Andrew Burgess <andrew.burgess@embecosm.com>\n+\n+\t* config/arc/arc.c (ARC_AUTOBLINK_IRQ_P): Consider fast interrupts\n+\tcase.\n+\t(ARC_AUTOFP_IRQ_P): Likewise.\n+\t(ARC_AUTO_IRQ_P): Likewise.\n+\t(rgf_banked_register_count): New variable.\n+\t(parse_mrgf_banked_regs_option): New function.\n+\t(arc_override_options): Handle rgf_banked_regs option.\n+\t(arc_handle_interrupt_attribute): Add firq option.\n+\t(arc_compute_function_type): Return fast irq type when required.\n+\t(arc_must_save_register): Handle fast interrupts.\n+\t(arc_expand_prologue): Do not emit dwarf info for fast interrupts.\n+\t(arc_return_address_regs): Update.\n+\t* config/arc/arc.h (arc_return_address_regs): Update.\n+\t(arc_function_type): Add fast interrupt type.\n+\t(ARC_INTERRUPT_P): Update.\n+\t(RC_FAST_INTERRUPT_P): Define.\n+\t* config/arc/arc.md (simple_return): Update for fast interrupts.\n+\t(p_return_i): Likewise.\n+\t* config/arc/arc.opt (mrgf-banked-regs): New option.\n+\t* doc/invoke.texi (mrgf-banked-regs): Document.\n+\n 2017-05-09  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.c (irq_ctrl_saved): New variable."}, {"sha": "46ad31e52e07de62f160e9ddc0d6bb0e5fd645f7", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 85, "deletions": 21, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=c7314bc17b9dde51f1eac83dc399d411f5fdd4a0", "patch": "@@ -125,16 +125,25 @@ typedef struct irq_ctrl_saved_t\n static irq_ctrl_saved_t irq_ctrl_saved;\n \n #define ARC_AUTOBLINK_IRQ_P(FNTYPE)\t\t\t\t\\\n-  (ARC_INTERRUPT_P (FNTYPE) && irq_ctrl_saved.irq_save_blink)\n-\n-#define ARC_AUTOFP_IRQ_P(FNTYPE)\t\t\t\t\t\\\n-  (ARC_INTERRUPT_P (FNTYPE) && (irq_ctrl_saved.irq_save_last_reg > 26))\n-\n-#define ARC_AUTO_IRQ_P(FNTYPE)\t\t\t\t\\\n-  (ARC_INTERRUPT_P (FNTYPE)\t\t\t\t\\\n-   && (irq_ctrl_saved.irq_save_blink\t\t\t\\\n+  ((ARC_INTERRUPT_P (FNTYPE)\t\t\t\t\t\\\n+    && irq_ctrl_saved.irq_save_blink)\t\t\t\t\\\n+   || (ARC_FAST_INTERRUPT_P (FNTYPE)\t\t\t\t\\\n+       && rgf_banked_register_count > 8))\n+\n+#define ARC_AUTOFP_IRQ_P(FNTYPE)\t\t\t\t\\\n+  ((ARC_INTERRUPT_P (FNTYPE)\t\t\t\t\t\\\n+    && (irq_ctrl_saved.irq_save_last_reg > 26))\t\t\t\\\n+  || (ARC_FAST_INTERRUPT_P (FNTYPE)\t\t\t\t\\\n+      && rgf_banked_register_count > 8))\n+\n+#define ARC_AUTO_IRQ_P(FNTYPE)\t\t\t\t\t\\\n+  (ARC_INTERRUPT_P (FNTYPE) && !ARC_FAST_INTERRUPT_P (FNTYPE)\t\\\n+   && (irq_ctrl_saved.irq_save_blink\t\t\t\t\\\n        || (irq_ctrl_saved.irq_save_last_reg >= 0)))\n \n+/* Number of registers in second bank for FIRQ support.  */\n+static int rgf_banked_register_count;\n+\n #define arc_ccfsm_current cfun->machine->ccfsm_current\n \n #define ARC_CCFSM_BRANCH_DELETED_P(STATE) \\\n@@ -924,6 +933,27 @@ irq_range (const char *cstr)\n   irq_ctrl_saved.irq_save_lpcount  = (lpcount == 60);\n }\n \n+/* Parse -mrgf-banked-regs=NUM option string.  Valid values for NUM are 4,\n+   8, 16, or 32.  */\n+\n+static void\n+parse_mrgf_banked_regs_option (const char *arg)\n+{\n+  long int val;\n+  char *end_ptr;\n+\n+  errno = 0;\n+  val = strtol (arg, &end_ptr, 10);\n+  if (errno != 0 || *arg == '\\0' || *end_ptr != '\\0'\n+      || (val != 0 && val != 4 && val != 8 && val != 16 && val != 32))\n+    {\n+      error (\"invalid number in -mrgf-banked-regs=%s \"\n+\t     \"valid values are 0, 4, 8, 16, or 32\", arg);\n+      return;\n+    }\n+  rgf_banked_register_count = (int) val;\n+}\n+\n /* Check ARC options, generate derived target attributes.  */\n \n static void\n@@ -966,6 +996,8 @@ arc_override_options (void)\n   irq_ctrl_saved.irq_save_blink    = false;\n   irq_ctrl_saved.irq_save_lpcount  = false;\n \n+  rgf_banked_register_count = 0;\n+\n   /* Handle the deferred options.  */\n   if (vopt)\n     FOR_EACH_VEC_ELT (*vopt, i, opt)\n@@ -979,6 +1011,13 @@ arc_override_options (void)\n \t      warning (0, \"option -mirq-ctrl-saved valid only for ARC v2 processors\");\n \t    break;\n \n+\t  case OPT_mrgf_banked_regs_:\n+\t    if (TARGET_V2)\n+\t      parse_mrgf_banked_regs_option (opt->arg);\n+\t    else\n+\t      warning (0, \"option -mrgf-banked-regs valid only for ARC v2 processors\");\n+\t    break;\n+\n \t  default:\n \t    gcc_unreachable();\n \t  }\n@@ -1787,20 +1826,21 @@ arc_handle_interrupt_attribute (tree *, tree name, tree args, int,\n \t       name);\n       *no_add_attrs = true;\n     }\n-  else if (strcmp (TREE_STRING_POINTER (value), \"ilink1\")\n-\t   && strcmp (TREE_STRING_POINTER (value), \"ilink2\")\n-\t   && !TARGET_V2)\n+  else if (!TARGET_V2\n+\t   && strcmp (TREE_STRING_POINTER (value), \"ilink1\")\n+\t   && strcmp (TREE_STRING_POINTER (value), \"ilink2\"))\n     {\n       warning (OPT_Wattributes,\n \t       \"argument of %qE attribute is not \\\"ilink1\\\" or \\\"ilink2\\\"\",\n \t       name);\n       *no_add_attrs = true;\n     }\n   else if (TARGET_V2\n-\t   && strcmp (TREE_STRING_POINTER (value), \"ilink\"))\n+\t   && strcmp (TREE_STRING_POINTER (value), \"ilink\")\n+\t   && strcmp (TREE_STRING_POINTER (value), \"firq\"))\n     {\n       warning (OPT_Wattributes,\n-\t       \"argument of %qE attribute is not \\\"ilink\\\"\",\n+\t       \"argument of %qE attribute is not \\\"ilink\\\" or \\\"firq\\\"\",\n \t       name);\n       *no_add_attrs = true;\n     }\n@@ -2360,6 +2400,8 @@ arc_compute_function_type (struct function *fun)\n \t    fn_type = ARC_FUNCTION_ILINK1;\n \t  else if (!strcmp (TREE_STRING_POINTER (value), \"ilink2\"))\n \t    fn_type = ARC_FUNCTION_ILINK2;\n+\t  else if (!strcmp (TREE_STRING_POINTER (value), \"firq\"))\n+\t    fn_type = ARC_FUNCTION_FIRQ;\n \t  else\n \t    gcc_unreachable ();\n \t  break;\n@@ -2386,15 +2428,38 @@ arc_must_save_register (int regno, struct function *func)\n {\n   enum arc_function_type fn_type = arc_compute_function_type (func);\n   bool irq_auto_save_p = ((irq_ctrl_saved.irq_save_last_reg >= regno)\n-\t\t\t  && ARC_INTERRUPT_P (fn_type));\n+\t\t\t  && ARC_AUTO_IRQ_P (fn_type));\n+  bool firq_auto_save_p = ARC_FAST_INTERRUPT_P (fn_type);\n+\n+  switch (rgf_banked_register_count)\n+    {\n+    case 4:\n+      firq_auto_save_p &= (regno < 4);\n+      break;\n+    case 8:\n+      firq_auto_save_p &= ((regno < 4) || ((regno > 11) && (regno < 16)));\n+      break;\n+    case 16:\n+      firq_auto_save_p &= ((regno < 4) || ((regno > 9) && (regno < 16))\n+\t\t\t   || ((regno > 25) && (regno < 29))\n+\t\t\t   || ((regno > 29) && (regno < 32)));\n+      break;\n+    case 32:\n+      firq_auto_save_p &= (regno != 29) && (regno < 32);\n+      break;\n+    default:\n+      firq_auto_save_p = false;\n+      break;\n+    }\n \n   if ((regno) != RETURN_ADDR_REGNUM\n       && (regno) != FRAME_POINTER_REGNUM\n       && df_regs_ever_live_p (regno)\n       && (!call_used_regs[regno]\n \t  || ARC_INTERRUPT_P (fn_type))\n       /* Do not emit code for auto saved regs.  */\n-      && !irq_auto_save_p)\n+      && !irq_auto_save_p\n+      && !firq_auto_save_p)\n     return true;\n \n   if (flag_pic && crtl->uses_pic_offset_table\n@@ -2723,11 +2788,6 @@ arc_save_restore (rtx base_reg,\n     }\n } /* arc_save_restore */\n \n-\n-int arc_return_address_regs[4]\n-  = {0, RETURN_ADDR_REGNUM, ILINK1_REGNUM, ILINK2_REGNUM};\n-\n-\n /* Build dwarf information when the context is saved via AUX_IRQ_CTRL\n    mechanism.  */\n \n@@ -2841,7 +2901,8 @@ arc_expand_prologue (void)\n \n   /* IRQ using automatic save mechanism will save the register before\n      anything we do.  */\n-  if (ARC_AUTO_IRQ_P (fn_type))\n+  if (ARC_AUTO_IRQ_P (fn_type)\n+      && !ARC_FAST_INTERRUPT_P (fn_type))\n     {\n       arc_dwarf_emit_irq_save_regs ();\n     }\n@@ -9700,6 +9761,9 @@ arc_can_follow_jump (const rtx_insn *follower, const rtx_insn *followee)\n   return true;\n }\n \n+int arc_return_address_regs[5] =\n+  {0, RETURN_ADDR_REGNUM, ILINK1_REGNUM, ILINK2_REGNUM, ILINK1_REGNUM};\n+\n /* Implement EPILOGUE__USES.\n    Return true if REGNO should be added to the deemed uses of the epilogue.\n "}, {"sha": "52f121f71d83f5f8ee4490346a2d8d86c14e6a55", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=c7314bc17b9dde51f1eac83dc399d411f5fdd4a0", "patch": "@@ -1364,7 +1364,7 @@ do { \\\n \n /* To translate the return value of arc_function_type into a register number\n    to jump through for function return.  */\n-extern int arc_return_address_regs[4];\n+extern int arc_return_address_regs[5];\n \n /* Debugging information.  */\n \n@@ -1501,10 +1501,15 @@ enum arc_function_type {\n   ARC_FUNCTION_UNKNOWN, ARC_FUNCTION_NORMAL,\n   /* These are interrupt handlers.  The name corresponds to the register\n      name that contains the return address.  */\n-  ARC_FUNCTION_ILINK1, ARC_FUNCTION_ILINK2\n+  ARC_FUNCTION_ILINK1, ARC_FUNCTION_ILINK2,\n+  /* Fast interrupt is only available on ARCv2 processors.  */\n+  ARC_FUNCTION_FIRQ\n };\n-#define ARC_INTERRUPT_P(TYPE) \\\n-((TYPE) == ARC_FUNCTION_ILINK1 || (TYPE) == ARC_FUNCTION_ILINK2)\n+#define ARC_INTERRUPT_P(TYPE)\t\t\t\t\t\t\\\n+  (((TYPE) == ARC_FUNCTION_ILINK1) || ((TYPE) == ARC_FUNCTION_ILINK2)\t\\\n+   || ((TYPE) == ARC_FUNCTION_FIRQ))\n+\n+#define ARC_FAST_INTERRUPT_P(TYPE) ((TYPE) == ARC_FUNCTION_FIRQ)\n \n /* Compute the type of a function from its DECL.  Needed for EPILOGUE_USES.  */\n struct function;"}, {"sha": "5c3766c4604679bb26b35c8b731f6f81899913b0", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=c7314bc17b9dde51f1eac83dc399d411f5fdd4a0", "patch": "@@ -4740,8 +4740,8 @@\n     = gen_rtx_REG (Pmode,\n \t\t   arc_return_address_regs[arc_compute_function_type (cfun)]);\n \n-  if (arc_compute_function_type (cfun) == ARC_FUNCTION_ILINK1\n-      && TARGET_V2)\n+  if (TARGET_V2\n+      && ARC_INTERRUPT_P (arc_compute_function_type (cfun)))\n   {\n     return \\\"rtie\\\";\n   }\n@@ -4751,8 +4751,7 @@\n   return \\\"\\\";\n }\n   [(set (attr \"type\")\n-\t(cond [(and (eq (symbol_ref \"arc_compute_function_type (cfun)\")\n-\t\t\t(symbol_ref \"ARC_FUNCTION_ILINK1\"))\n+\t(cond [(and (match_test \"ARC_INTERRUPT_P (arc_compute_function_type (cfun))\")\n \t\t    (match_test \"TARGET_V2\"))\n \t       (const_string \"brcc_no_delay_slot\")]\n \t      (const_string \"return\")))\n@@ -4782,7 +4781,7 @@\n \t\t      (simple_return) (pc)))]\n   \"reload_completed\n    && !(TARGET_V2\n-     && arc_compute_function_type (cfun) == ARC_FUNCTION_ILINK1)\"\n+     && ARC_INTERRUPT_P (arc_compute_function_type (cfun)))\"\n {\n   rtx xop[2];\n   xop[0] = operands[0];"}, {"sha": "f01a2ff0e58d9d83dc8c6b69eb92304f18dd3a0f", "filename": "gcc/config/arc/arc.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0/gcc%2Fconfig%2Farc%2Farc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0/gcc%2Fconfig%2Farc%2Farc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.opt?ref=c7314bc17b9dde51f1eac83dc399d411f5fdd4a0", "patch": "@@ -490,3 +490,7 @@ Enable unaligned word and halfword accesses to packed data.\n mirq-ctrl-saved=\n Target RejectNegative Joined Var(arc_deferred_options) Defer\n Specifies the registers that the processor saves on an interrupt entry and exit.\n+\n+mrgf-banked-regs=\n+Target RejectNegative Joined Var(arc_deferred_options) Defer\n+Specifies the number of registers replicated in second register bank on entry to fast interrupt."}, {"sha": "5360255a67c1a3a61f2c12e9d04446585fc525c2", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c7314bc17b9dde51f1eac83dc399d411f5fdd4a0", "patch": "@@ -607,6 +607,7 @@ Objective-C and Objective-C++ Dialects}.\n -mcrc  -mdsp-packa  -mdvbf  -mlock  -mmac-d16  -mmac-24  -mrtsc  -mswape @gol\n -mtelephony  -mxy  -misize  -mannotate-align  -marclinux  -marclinux_prof @gol\n -mlong-calls  -mmedium-calls  -msdata -mirq-ctrl-saved @gol\n+-mrgf-banked-regs @gol\n -mvolatile-cache  -mtp-regno=@var{regno} @gol\n -malign-call  -mauto-modify-reg  -mbbit-peephole  -mno-brcc @gol\n -mcase-vector-pcrel  -mcompact-casesi  -mno-cond-exec  -mearly-cbranchsi @gol\n@@ -14556,6 +14557,15 @@ always starts with @code{r0}, the upper limit is @code{fp} register.\n @var{blink} and @var{lp_count} are optional.  This option is only\n valid for ARC EM and ARC HS cores.\n \n+@item -mrgf-banked-regs=@var{number}\n+@opindex mrgf-banked-regs\n+Specifies the number of registers replicated in second register bank\n+on entry to fast interrupt.  Fast interrupts are interrupts with the\n+highest priority level P0.  These interrupts save only PC and STATUS32\n+registers to avoid memory transactions during interrupt entry and exit\n+sequences.  Use this option when you are using fast interrupts in an\n+ARC V2 family processor.  Permitted values are 4, 8, 16, and 32.\n+\n @end table\n \n The following options are passed through to the assembler, and also"}, {"sha": "36d4d1dd9585f63a7ee465ceae6f8f9934be62b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c7314bc17b9dde51f1eac83dc399d411f5fdd4a0", "patch": "@@ -1,3 +1,13 @@\n+2017-05-09  Claudiu Zissulescu  <claziss@synopsys.com>\n+\t    Andrew Burgess <andrew.burgess@embecosm.com>\n+\n+\t* gcc.target/arc/firq-1.c: New file.\n+\t* gcc.target/arc/firq-2.c: Likewise.\n+\t* gcc.target/arc/firq-3.c: Likewise.\n+\t* gcc.target/arc/firq-4.c: Likewise.\n+\t* gcc.target/arc/firq-5.c: Likewise.\n+\t* gcc.target/arc/firq-6.c: Likewise.\n+\n 2017-05-09  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* gcc.target/arc/interrupt-5.c: Newfile."}, {"sha": "87f408793dc9fbfefe5c756580ade194b3e58418", "filename": "gcc/testsuite/gcc.target/arc/firq-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ffirq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ffirq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ffirq-1.c?ref=c7314bc17b9dde51f1eac83dc399d411f5fdd4a0", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target archs }*/\n+/* { dg-options \"-O0 -mll64 -mirq-ctrl-saved=r0-r9\" } */\n+\n+/* Check that on archs the 'firq' interrupt function type is\n+   available, these are the fast interrupts.  For fast interrupts,\n+   despite the use of 'irq-ctrl-saved', no registers are automatically\n+   saved on entry to the function, and so, in the following register\n+   r0 to r9 should all be saved to the stack.\n+\n+   We also take the opportunity to check the use of the 'rtie'\n+   instruction at the end of the interrupt function.  */\n+\n+void __attribute__ ((interrupt(\"firq\")))\n+handler1 (void)\n+{\n+  asm (\"\"\n+       :\n+       :\n+       : \"r0\", \"r1\", \"r2\", \"r3\", \"r4\",\n+\t \"r5\", \"r6\", \"r7\", \"r8\", \"r9\");\n+}\n+/* { dg-final { scan-assembler-times \"r2,\\\\\\[sp,\\[0-9\\]+\\\\\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"r4,\\\\\\[sp,\\[0-9\\]+\\\\\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"r6,\\\\\\[sp,\\[0-9\\]+\\\\\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"r8,\\\\\\[sp,\\[0-9\\]+\\\\\\]\" 2 } } */\n+/* { dg-final { scan-assembler \"rtie\" } } */"}, {"sha": "dc7dafca11a3c72d64710aed2abe50922c8588d9", "filename": "gcc/testsuite/gcc.target/arc/firq-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ffirq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ffirq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ffirq-2.c?ref=c7314bc17b9dde51f1eac83dc399d411f5fdd4a0", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target archs }*/\n+/* { dg-options \"-O0 -mll64 -mirq-ctrl-saved=r0-r9 -mrgf-banked-regs=4\" } */\n+\n+/* Check that on archs the 'firq' interrupt function type is\n+   available, these are the fast interrupts.  For fast interrupts,\n+   despite the use of 'irq-ctrl-saved', no registers are automatically\n+   saved on stack on entry to the function.  However, the cpu save via\n+   bank switch R0-R3.\n+\n+   We also take the opportunity to check the use of the 'rtie' instruction\n+   at the end of the interrupt function.  */\n+\n+void __attribute__ ((interrupt(\"firq\")))\n+handler1 (void)\n+{\n+  asm (\"\"\n+       :\n+       :\n+       : \"r0\", \"r1\", \"r2\", \"r3\", \"r4\",\n+         \"r5\", \"r6\", \"r7\", \"r8\", \"r9\");\n+}\n+/* { dg-final { scan-assembler-not \"r0,\\\\\\[sp\" } } */\n+/* { dg-final { scan-assembler-not \"push.*r0\" } } */\n+/* { dg-final { scan-assembler-not \"r1,\\\\\\[sp\" } } */\n+/* { dg-final { scan-assembler-not \"r2,\\\\\\[sp\" } } */\n+/* { dg-final { scan-assembler-not \"r3,\\\\\\[sp\" } } */\n+/* { dg-final { scan-assembler \"st.*r4,\\\\\\[sp\" } } */\n+/* { dg-final { scan-assembler \"st.*r6,\\\\\\[sp,\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"st.*r8,\\\\\\[sp,\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"rtie\" } } */"}, {"sha": "a1d604d8ef750c022c4a4242ddb43b70d95fce1d", "filename": "gcc/testsuite/gcc.target/arc/firq-3.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ffirq-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ffirq-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ffirq-3.c?ref=c7314bc17b9dde51f1eac83dc399d411f5fdd4a0", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target archs }*/\n+/* { dg-options \"-O2 -mll64 -mrgf-banked-regs=8\" } */\n+\n+/* Check if R4 to R11 and R16-R27 are correctly saved on stack.  */\n+\n+void __attribute__ ((interrupt(\"firq\")))\n+handler1 (void)\n+{\n+  asm volatile (\"\"\n+\t\t:\n+\t\t:\n+\t\t: \"r0\", \"r1\", \"r2\", \"r3\", \"r4\",\n+\t\t  \"r5\", \"r6\", \"r7\", \"r8\", \"r9\",\n+\t\t  \"r10\", \"r11\", \"r12\", \"r13\", \"r14\",\n+\t\t  \"r15\", \"r16\", \"r17\", \"r18\", \"r19\",\n+\t\t  \"r20\", \"r21\", \"r22\", \"r23\", \"r24\",\n+\t\t  \"r25\", \"fp\");\n+}\n+/* { dg-final { scan-assembler-not \"r0,\\\\\\[sp\" } } */\n+/* { dg-final { scan-assembler-not \"push.*r0\" } } */\n+/* { dg-final { scan-assembler-not \"r1,\\\\\\[sp\" } } */\n+/* { dg-final { scan-assembler-not \"r2,\\\\\\[sp\" } } */\n+/* { dg-final { scan-assembler-not \"r3,\\\\\\[sp\" } } */\n+/* { dg-final { scan-assembler-not \"r12,\\\\\\[sp\" } } */\n+/* { dg-final { scan-assembler-not \"r13,\\\\\\[sp\" } } */\n+/* { dg-final { scan-assembler-not \"r14,\\\\\\[sp\" } } */\n+/* { dg-final { scan-assembler-not \"r15,\\\\\\[sp\" } } */\n+\n+/* { dg-final { scan-assembler-times \"r4,\\\\\\[sp\" 2 } } */\n+/* { dg-final { scan-assembler-times \"r6,\\\\\\[sp,\\[0-9\\]+\\\\\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"r8,\\\\\\[sp,\\[0-9\\]+\\\\\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"r10,\\\\\\[sp,\\[0-9\\]+\\\\\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"r16,\\\\\\[sp,\\[0-9\\]+\\\\\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"r18,\\\\\\[sp,\\[0-9\\]+\\\\\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"r20,\\\\\\[sp,\\[0-9\\]+\\\\\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"r24,\\\\\\[sp,\\[0-9\\]+\\\\\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fp,\\\\\\[sp,\" 2 } } */\n+\n+/* { dg-final { scan-assembler \"rtie\" } } */"}, {"sha": "03d3746a500dda9f9e82fe6728d995b6aea6e6cd", "filename": "gcc/testsuite/gcc.target/arc/firq-4.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ffirq-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ffirq-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ffirq-4.c?ref=c7314bc17b9dde51f1eac83dc399d411f5fdd4a0", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target archs }*/\n+/* { dg-options \"-O2 -mll64 -mrgf-banked-regs=16\" } */\n+\n+/* Check if R4-R9 and R16-R25 are correctly saved on stack.  */\n+\n+void __attribute__ ((interrupt(\"firq\")))\n+handler1 (void)\n+{\n+  asm volatile (\"\"\n+\t\t:\n+\t\t:\n+\t\t: \"r0\", \"r1\", \"r2\", \"r3\", \"r4\",\n+\t\t  \"r5\", \"r6\", \"r7\", \"r8\", \"r9\",\n+\t\t  \"r10\", \"r11\", \"r12\", \"r13\", \"r14\",\n+\t\t  \"r15\", \"r16\", \"r17\", \"r18\", \"r19\",\n+\t\t  \"r20\", \"r21\", \"r22\", \"r23\", \"r24\",\n+\t\t  \"r25\", \"fp\");\n+}\n+/* { dg-final { scan-assembler-times \"r4,\\\\\\[sp\" 2 } } */\n+/* { dg-final { scan-assembler-times \"r6,\\\\\\[sp,\\[0-9\\]+\\\\\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"r8,\\\\\\[sp,\\[0-9\\]+\\\\\\]\" 2 } } */\n+\n+/* { dg-final { scan-assembler-times \"r16,\\\\\\[sp,\\[0-9\\]+\\\\\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"r18,\\\\\\[sp,\\[0-9\\]+\\\\\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"r20,\\\\\\[sp,\\[0-9\\]+\\\\\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"r24,\\\\\\[sp,\\[0-9\\]+\\\\\\]\" 2 } } */\n+\n+/* { dg-final { scan-assembler-not \"fp,\\\\\\[sp\" } } */\n+/* { dg-final { scan-assembler-not \"push.*fp\" } } */\n+/* { dg-final { scan-assembler \"mov_s.*fp,sp\" } } */"}, {"sha": "29f17a3f0ccc995004223e0b0866b8baf435869c", "filename": "gcc/testsuite/gcc.target/arc/firq-5.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ffirq-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ffirq-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ffirq-5.c?ref=c7314bc17b9dde51f1eac83dc399d411f5fdd4a0", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target archs }*/\n+/* { dg-options \"-O2 -mrgf-banked-regs=16\" } */\n+\n+/* Check if blink is pushed on the stack or not.   */\n+\n+extern void bar (void);\n+\n+void __attribute__ ((interrupt(\"firq\")))\n+handler1 (void)\n+{\n+  bar ();\n+}\n+/* { dg-final { scan-assembler-not \"push.*blink\" } } */\n+/* { dg-final { scan-assembler-not \"pop.*blink\" } } */"}, {"sha": "9421200d630475bd24de38f2428dc04b5f70d009", "filename": "gcc/testsuite/gcc.target/arc/firq-6.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ffirq-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ffirq-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ffirq-6.c?ref=c7314bc17b9dde51f1eac83dc399d411f5fdd4a0", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target archs }*/\n+/* { dg-options \"-O2 -mll64 -mrgf-banked-regs=32\" } */\n+\n+/* Check if we have any register saved on stack.  */\n+\n+void __attribute__ ((interrupt(\"firq\")))\n+handler1 (void)\n+{\n+  asm volatile (\"\"\n+\t\t:\n+\t\t:\n+\t\t: \"r0\", \"r1\", \"r2\", \"r3\", \"r4\",\n+\t\t  \"r5\", \"r6\", \"r7\", \"r8\", \"r9\",\n+\t\t  \"r10\", \"r11\", \"r12\", \"r13\", \"r14\",\n+\t\t  \"r15\", \"r16\", \"r17\", \"r18\", \"r19\",\n+\t\t  \"r20\", \"r21\", \"r22\", \"r23\", \"r24\",\n+\t\t  \"r25\", \"fp\");\n+}\n+/* { dg-final { scan-assembler-not \"(s|l)(t|d)d.*r\\[0-9\\]+,\\\\\\[sp,\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"mov_s.*fp,sp\" } } */"}]}