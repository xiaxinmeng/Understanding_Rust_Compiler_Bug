{"sha": "312ce0f488a8e335547c5a2ee51b6f78d677da89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzEyY2UwZjQ4OGE4ZTMzNTU0N2M1YTJlZTUxYjZmNzhkNjc3ZGE4OQ==", "commit": {"author": {"name": "Matthias Klose", "email": "doko@ubuntu.com", "date": "2007-07-28T20:23:58Z"}, "committer": {"name": "Matthias Klose", "email": "doko@gcc.gnu.org", "date": "2007-07-28T20:23:58Z"}, "message": "jvmti.h: Remove.\n\n2007-07-28  Matthias Klose  <doko@ubuntu.com>\n\n        * classpath/jvmti.h: Remove.\n\nFrom-SVN: r127024", "tree": {"sha": "6b7ea4417182e7eb2455aa77097667a78addf8a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b7ea4417182e7eb2455aa77097667a78addf8a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/312ce0f488a8e335547c5a2ee51b6f78d677da89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/312ce0f488a8e335547c5a2ee51b6f78d677da89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/312ce0f488a8e335547c5a2ee51b6f78d677da89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/312ce0f488a8e335547c5a2ee51b6f78d677da89/comments", "author": {"login": "doko42", "id": 11258518, "node_id": "MDQ6VXNlcjExMjU4NTE4", "avatar_url": "https://avatars.githubusercontent.com/u/11258518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doko42", "html_url": "https://github.com/doko42", "followers_url": "https://api.github.com/users/doko42/followers", "following_url": "https://api.github.com/users/doko42/following{/other_user}", "gists_url": "https://api.github.com/users/doko42/gists{/gist_id}", "starred_url": "https://api.github.com/users/doko42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doko42/subscriptions", "organizations_url": "https://api.github.com/users/doko42/orgs", "repos_url": "https://api.github.com/users/doko42/repos", "events_url": "https://api.github.com/users/doko42/events{/privacy}", "received_events_url": "https://api.github.com/users/doko42/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bea780bbada557c986a563b8ab96678d6bc2beae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bea780bbada557c986a563b8ab96678d6bc2beae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bea780bbada557c986a563b8ab96678d6bc2beae"}], "stats": {"total": 1823, "additions": 4, "deletions": 1819}, "files": [{"sha": "389599be880d14012428d261b180bf5c7ddca964", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/312ce0f488a8e335547c5a2ee51b6f78d677da89/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/312ce0f488a8e335547c5a2ee51b6f78d677da89/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=312ce0f488a8e335547c5a2ee51b6f78d677da89", "patch": "@@ -1,3 +1,7 @@\n+2007-07-28  Matthias Klose  <doko@ubuntu.com>\n+\n+\t* classpath/jvmti.h: Remove.\n+\n 2007-07-27  Tom Tromey  <tromey@redhat.com>\n \n \t* Rebuild .class files with new ecj."}, {"sha": "b26f7932e54a8589c7fa841ce5352ad3d7b0b41f", "filename": "libjava/classpath/jvmti.h", "status": "removed", "additions": 0, "deletions": 1819, "changes": 1819, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea780bbada557c986a563b8ab96678d6bc2beae/libjava%2Fclasspath%2Fjvmti.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea780bbada557c986a563b8ab96678d6bc2beae/libjava%2Fclasspath%2Fjvmti.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjvmti.h?ref=bea780bbada557c986a563b8ab96678d6bc2beae", "patch": "@@ -1,1819 +0,0 @@\n-/* jvmti.h - Java Virtual Machine Tool Interface\n-   Copyright (C) 2006  Free Software Foundation\n-\n-This file is part of GNU Classpath.\n-\n-GNU Classpath is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU Classpath is distributed in the hope that it will be useful, but\n-WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU Classpath; see the file COPYING.  If not, write to the\n-Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n-02110-1301 USA.\n-\n-Linking this library statically or dynamically with other modules is\n-making a combined work based on this library.  Thus, the terms and\n-conditions of the GNU General Public License cover the whole\n-combination.\n-\n-As a special exception, the copyright holders of this library give you\n-permission to link this library with independent modules to produce an\n-executable, regardless of the license terms of these independent\n-modules, and to copy and distribute the resulting executable under\n-terms of your choice, provided that you also meet, for each linked\n-independent module, the terms and conditions of the license of that\n-module.  An independent module is a module which is not derived from\n-or based on this library.  If you modify this library, you may extend\n-this exception to your version of the library, but you are not\n-obligated to do so.  If you do not wish to do so, delete this\n-exception statement from your version. */\n-\n-\n-/* Note: this file must be compilable by the C compiler (for now,\n-   assuming GNU C is ok).  This means you must never use `//'\n-   comments, and all C++-specific code must be conditional on\n-   __cplusplus.  */\n-\n-#ifndef _CLASSPATH_JVMTI_H\n-#define _CLASSPATH_JVMTI_H\n-#include <jni.h>\n-\n-#include \"jvmti_md.h\"\n-\n-/* The VM might define JVMTI base types */\n-#ifndef _CLASSPATH_VM_JVMTI_TYPES_DEFINED\n-\n-typedef jobject jthread;\n-typedef jobject jthreadGroup;\n-typedef jlong jlocation;\n-typedef struct _Jv_rawMonitorID *jrawMonitorID;\n-\n-#endif /* !_CLASSPATH_VM_JVMTI_TYPES_DEFINED */\n-\n-/* JVMTI Version */\n-#define JVMTI_VERSION_1_0 0x30010000\n-#define JVMTI_VERSION (JVMTI_VERSION_1_0 + 38)  /* Spec version is 1.0.38 */\n-\n-#ifdef __cplusplus\n-extern \"C\"\n-{\n-#endif\n-\n-/* These functions might be defined in libraries which we load; the\n-   JVMTI implementation calls them at the appropriate times.  */\n-extern JNIEXPORT jint JNICALL Agent_OnLoad (JavaVM *vm, char *options,\n-\t\t\t\t\t    void *reserved);\n-extern JNIEXPORT void JNICALL Agent_OnUnload (JavaVM *vm);\n-\n-#ifdef __cplusplus\n-}\n-#endif\n-\n-/* Forward declarations */\n-typedef struct _jvmtiAddrLocationMap jvmtiAddrLocationMap;\n-#ifdef __cplusplus\n-typedef struct _Jv_JVMTIEnv jvmtiEnv;\n-#else\n-typedef const struct _Jv_jvmtiEnv *jvmtiEnv;\n-#endif\n-\n-/*\n- * Error constants\n- */\n-\n-typedef enum\n-{\n-  /* Universal Errors */\n-  JVMTI_ERROR_NONE = 0,\n-  JVMTI_ERROR_NULL_POINTER = 100,\n-  JVMTI_ERROR_OUT_OF_MEMORY = 110,\n-  JVMTI_ERROR_ACCESS_DENIED = 111,\n-  JVMTI_ERROR_WRONG_PHASE = 112,\n-  JVMTI_ERROR_INTERNAL = 113,\n-  JVMTI_ERROR_UNATTACHED_THREAD = 115,\n-  JVMTI_ERROR_INVALID_ENVIRONMENT = 116,\n-\n-  /* Function-specific Required Errors */\n-  JVMTI_ERROR_INVALID_PRIORITY = 12,\n-  JVMTI_ERROR_THREAD_NOT_SUSPENDED = 13,\n-  JVMTI_ERROR_THREAD_SUSPENDED = 14,\n-  JVMTI_ERROR_THREAD_NOT_ALIVE = 15,\n-  JVMTI_ERROR_CLASS_NOT_PREPARED = 22,\n-  JVMTI_ERROR_NO_MORE_FRAMES = 31,\n-  JVMTI_ERROR_OPAQUE_FRAME = 32,\n-  JVMTI_ERROR_DUPLICATE = 40,\n-  JVMTI_ERROR_NOT_FOUND = 41,\n-  JVMTI_ERROR_NOT_MONITOR_OWNER = 51,\n-  JVMTI_ERROR_INTERRUPT = 52,\n-  JVMTI_ERROR_UNMODIFIABLE_CLASS = 79,\n-  JVMTI_ERROR_NOT_AVAILABLE = 98,\n-  JVMTI_ERROR_ABSENT_INFORMATION = 101,\n-  JVMTI_ERROR_INVALID_EVENT_TYPE = 102,\n-  JVMTI_ERROR_NATIVE_METHOD = 104,\n-\n-  /* Function-specific Agent Errors */\n-  JVMTI_ERROR_INVALID_THREAD = 10,\n-  JVMTI_ERROR_INVALID_THREAD_GROUP = 11,\n-  JVMTI_ERROR_INVALID_OBJECT = 20,\n-  JVMTI_ERROR_INVALID_CLASS = 21,\n-  JVMTI_ERROR_INVALID_METHODID = 23,\n-  JVMTI_ERROR_INVALID_LOCATION = 24,\n-  JVMTI_ERROR_INVALID_FIELDID = 25,\n-  JVMTI_ERROR_TYPE_MISMATCH = 34,\n-  JVMTI_ERROR_INVALID_SLOT = 35,\n-  JVMTI_ERROR_INVALID_MONITOR = 50,\n-  JVMTI_ERROR_INVALID_CLASS_FORMAT = 60,\n-  JVMTI_ERROR_CIRCULAR_CLASS_DEFINITION = 61,\n-  JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_ADDED = 63,\n-  JVMTI_ERROR_UNSUPPORTED_REDEFINITION_SCHEMA_CHANGED = 64,\n-  JVMTI_ERROR_INVALID_TYPESTATE = 65,\n-  JVMTI_ERROR_FAILS_VERIFICATION = 62,\n-  JVMTI_ERROR_UNSUPPORTED_REDEFINITION_HIERARCHY_CHANGED = 66,\n-  JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_DELETED = 67,\n-  JVMTI_ERROR_UNSUPPORTED_VERSION = 68,\n-  JVMTI_ERROR_NAMES_DONT_MATCH = 69,\n-  JVMTI_ERROR_UNSUPPORTED_REDEFINITION_CLASS_MODIFIERS_CHANGED = 70,\n-  JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_MODIFIERS_CHANGED = 71,\n-  JVMTI_ERROR_MUST_POSSESS_CAPABILITY = 99,\n-  JVMTI_ERROR_ILLEGAL_ARGUMENT = 103\n-} jvmtiError;\n-\n-/*\n- * Enumeration Definitions\n- */\n-\n-typedef enum\n-{\n-  JVMTI_DISABLE = 0,\n-  JVMTI_ENABLE = 1\n-} jvmtiEventMode;\n-\n-typedef enum\n-{\n-  JVMTI_HEAP_OBJECT_TAGGED = 1,\n-  JVMTI_HEAP_OBJECT_UNTAGGED = 2,\n-  JVMTI_HEAP_OBJECT_EITHER = 3\n-} jvmtiHeapObjectFilter;\n-\n-typedef enum\n-{\n-  JVMTI_HEAP_ROOT_JNI_GLOBAL = 1,\n-  JVMTI_HEAP_ROOT_SYSTEM_CLASS = 2,\n-  JVMTI_HEAP_ROOT_MONITOR = 3,\n-  JVMTI_HEAP_ROOT_STACK_LOCAL = 4,\n-  JVMTI_HEAP_ROOT_JNI_LOCAL = 5,\n-  JVMTI_HEAP_ROOT_THREAD = 6,\n-  JVMTI_HEAP_ROOT_OTHER = 7\n-} jvmtiHeapRootKind;\n-\n-typedef enum\n-{\n-  JVMTI_ITERATION_ABORT = 0,\n-  JVMTI_ITERATION_CONTINUE = 1,\n-  JVMTI_ITERATION_IGNORE = 2\n-} jvmtiIterationControl;\n-\n-typedef enum\n-{\n-  JVMTI_JLOCATION_OTHER = 0,\n-  JVMTI_JLOCATION_JVMBCI = 1,\n-  JVMTI_JLOCATION_MACHINEPC = 2\n-} jvmtiJlocationFormat;\n-\n-typedef enum\n-{\n-  JVMTI_REFERENCE_CLASS = 1,\n-  JVMTI_REFERENCE_FIELD = 2,\n-  JVMTI_REFERENCE_ARRAY_ELEMENT = 3,\n-  JVMTI_REFERENCE_CLASS_LOADER = 4,\n-  JVMTI_REFERENCE_SIGNERS = 5,\n-  JVMTI_REFERENCE_PROTECTION_DOMAIN = 6,\n-  JVMTI_REFERENCE_INTERFACE = 7,\n-  JVMTI_REFERENCE_STATIC_FIELD = 8,\n-  JVMTI_REFERENCE_CONSTANT_POOL = 9\n-} jvmtiObjectReferenceKind;\n-\n-typedef enum\n-{\n-  JVMTI_KIND_IN = 91,\n-  JVMTI_KIND_IN_PTR = 92,\n-  JVMTI_KIND_IN_BUF = 93,\n-  JVMTI_KIND_ALLOC_BUF = 94,\n-  JVMTI_KIND_ALLOC_ALLOC_BUF = 95,\n-  JVMTI_KIND_OUT = 96,\n-  JVMTI_KIND_OUT_BUF = 97\n-} jvmtiParamKind;\n-\n-typedef enum\n-{\n-  JVMTI_TYPE_JBYTE = 101,\n-  JVMTI_TYPE_JCHAR = 102,\n-  JVMTI_TYPE_JSHORT = 103,\n-  JVMTI_TYPE_JINT = 104,\n-  JVMTI_TYPE_JLONG = 105,\n-  JVMTI_TYPE_JFLOAT = 106,\n-  JVMTI_TYPE_JDOUBLE = 107,\n-  JVMTI_TYPE_JBOOLEAN = 108,\n-  JVMTI_TYPE_JOBJECT = 109,\n-  JVMTI_TYPE_JTHREAD = 110,\n-  JVMTI_TYPE_JCLASS = 111,\n-  JVMTI_TYPE_JVALUE = 112,\n-  JVMTI_TYPE_JFIELDID = 113,\n-  JVMTI_TYPE_JMETHODID = 114,\n-  JVMTI_TYPE_CCHAR = 115,\n-  JVMTI_TYPE_CVOID = 116,\n-  JVMTI_TYPE_JNIENV = 117\n-} jvmtiParamTypes;\n-\n-typedef enum\n-{\n-  JVMTI_PHASE_ONLOAD = 1,\n-  JVMTI_PHASE_PRIMORDIAL = 2,\n-  JVMTI_PHASE_LIVE = 4,\n-  JVMTI_PHASE_START = 6,\n-  JVMTI_PHASE_DEAD = 8\n-} jvmtiPhase;\n-\n-typedef enum\n-{\n-  JVMTI_TIMER_USER_CPU = 30,\n-  JVMTI_TIMER_TOTAL_CPU = 31,\n-  JVMTI_TIMER_ELAPSED = 32\n-} jvmtiTimerKind;\n-\n-typedef enum\n-{\n-  JVMTI_VERBOSE_OTHER = 0,\n-  JVMTI_VERBOSE_GC = 1,\n-  JVMTI_VERBOSE_CLASS = 2,\n-  JVMTI_VERBOSE_JNI = 4\n-} jvmtiVerboseFlag;\n-\n-/* Version information */\n-#define JVMTI_VERSION_INTERFACE_JNI 0x00000000\n-#define JVMTI_VERSION_INTERFACE_JVMTI 0x30000000\n-#define JVMTI_VERSION_MASK_INTERFACE_TYPE 0x70000000\n-#define JVMTI_VERSION_MASK_MAJOR 0x0FFF0000\n-#define JVMTI_VERSION_MASK_MINOR 0x0000FF00\n-#define JVMTI_VERSION_MASK_MICRO 0x000000FF\n-#define JVMTI_VERSION_SHIFT_MAJOR 16\n-#define JVMTI_VERSION_SHIFT_MINOR 8\n-#define JVMTI_VERSION_SHIFT_MICRO 0\n-\n-/*\n- * Events and event callbacks\n- */\n-\n-typedef enum\n-{\n-  JVMTI_EVENT_VM_INIT = 50,\n-  JVMTI_EVENT_VM_DEATH = 51,\n-  JVMTI_EVENT_THREAD_START = 52,\n-  JVMTI_EVENT_THREAD_END = 53,\n-  JVMTI_EVENT_CLASS_FILE_LOAD_HOOK = 54,\n-  JVMTI_EVENT_CLASS_LOAD = 55,\n-  JVMTI_EVENT_CLASS_PREPARE = 56,\n-  JVMTI_EVENT_VM_START = 57,\n-  JVMTI_EVENT_EXCEPTION = 58,\n-  JVMTI_EVENT_EXCEPTION_CATCH = 59,\n-  JVMTI_EVENT_SINGLE_STEP =  60,\n-  JVMTI_EVENT_FRAME_POP = 61,\n-  JVMTI_EVENT_BREAKPOINT = 62,\n-  JVMTI_EVENT_FIELD_ACCESS = 63,\n-  JVMTI_EVENT_FIELD_MODIFICATION = 64,\n-  JVMTI_EVENT_METHOD_ENTRY = 65,\n-  JVMTI_EVENT_METHOD_EXIT = 66,\n-  JVMTI_EVENT_NATIVE_METHOD_BIND = 67,\n-  JVMTI_EVENT_COMPILED_METHOD_LOAD = 68,\n-  JVMTI_EVENT_COMPILED_METHOD_UNLOAD = 69,\n-  JVMTI_EVENT_DYNAMIC_CODE_GENERATED = 70,\n-  JVMTI_EVENT_DATA_DUMP_REQUEST = 71,\n-  JVMTI_EVENT_MONITOR_WAIT = 73,\n-  JVMTI_EVENT_MONITOR_WAITED = 74,\n-  JVMTI_EVENT_MONITOR_CONTENDED_ENTER = 75,\n-  JVMTI_EVENT_MONITOR_CONTENDED_ENTERED = 76,\n-  JVMTI_EVENT_GARBAGE_COLLECTION_START = 81,\n-  JVMTI_EVENT_GARBAGE_COLLECTION_FINISH = 82,\n-  JVMTI_EVENT_OBJECT_FREE = 83,\n-  JVMTI_EVENT_VM_OBJECT_ALLOC = 84\n-} jvmtiEvent;\n-\n-typedef void *jvmtiEventReserved;\n-\n-typedef void (JNICALL *jvmtiEventSingleStep)\n-  (jvmtiEnv *jvmti_env, JNIEnv *jni_env, jthread thread, jmethodID method,\n-   jlocation location);\n-\n-typedef void (JNICALL *jvmtiEventBreakpoint)\n-  (jvmtiEnv *jvmti_env, JNIEnv *jni_env, jthread thread, jmethodID method,\n-   jlocation location);\n-\n-typedef void (JNICALL *jvmtiEventFieldAccess)\n-  (jvmtiEnv *jvmti_env, JNIEnv *jni_env, jthread thread, jmethodID method,\n-   jlocation location, jclass field_klass, jobject object, jfieldID field);\n-\n-typedef void (JNICALL *jvmtiEventFieldModification)\n-  (jvmtiEnv *jvmti_env, JNIEnv *jni_env, jthread thread, jmethodID method,\n-   jlocation location, jclass field_klass, jobject object, jfieldID field,\n-   char signature_type, jvalue new_value);\n-\n-typedef void (JNICALL *jvmtiEventFramePop)\n-  (jvmtiEnv *jvmti_env, JNIEnv *jni_env, jthread thread, jmethodID method,\n-   jboolean was_popped_by_exception);\n-\n-typedef void (JNICALL *jvmtiEventMethodEntry)\n-  (jvmtiEnv *jvmti_env, JNIEnv *jni_env, jthread thread, jmethodID method);\n-\n-typedef void (JNICALL *jvmtiEventMethodExit)\n-  (jvmtiEnv *jvmti_env, JNIEnv *jni_env, jthread thread, jmethodID method,\n-   jboolean was_popped_by_exception, jvalue return_value);\n-\n-typedef void (JNICALL *jvmtiEventNativeMethodBind)\n-  (jvmtiEnv *jvmti_env, JNIEnv *jni_env, jthread thread, jmethodID method,\n-   void *address, void **new_address_ptr);\n-\n-typedef void (JNICALL *jvmtiEventException)\n-  (jvmtiEnv *jvmti_env, JNIEnv *jni_env, jthread thread, jmethodID method,\n-   jlocation location, jobject exception, jmethodID catch_method,\n-   jlocation catch_location);\n-\n-typedef void (JNICALL *jvmtiEventExceptionCatch)\n-  (jvmtiEnv *jvmti_env, JNIEnv *jni_env, jthread thread, jmethodID method,\n-   jlocation location, jobject exception);\n-\n-typedef void (JNICALL *jvmtiEventThreadStart)\n-  (jvmtiEnv *jvmti_env, JNIEnv *jni_env, jthread thread);\n-\n-typedef void (JNICALL *jvmtiEventThreadEnd)\n-  (jvmtiEnv *jvmti_env, JNIEnv *jni_env, jthread thread);\n-\n-typedef void (JNICALL *jvmtiEventClassLoad)\n-  (jvmtiEnv *jvmti_env, JNIEnv *jni_env, jthread thread, jclass klass);\n-\n-typedef void (JNICALL *jvmtiEventClassPrepare)\n-  (jvmtiEnv *jvmti_env, JNIEnv *jni_env, jthread thraed, jclass klass);\n-\n-typedef void (JNICALL *jvmtiEventClassFileLoadHook)\n-  (jvmtiEnv *jvmti_env, JNIEnv *jni_env, jclass class_being_redefined,\n-   jobject loader, const char *name, jobject protection_domain,\n-   jint class_data_len, const unsigned char *class_data,\n-   jint *new_class_data_len, unsigned char **new_class_data);\n-\n-typedef void (JNICALL *jvmtiEventVMStart)\n-  (jvmtiEnv *jvmti_env, JNIEnv *jni_env);\n-\n-typedef void (JNICALL *jvmtiEventVMInit)\n-  (jvmtiEnv *jvmti_env, JNIEnv *jni_env, jthread thread);\n-\n-typedef void (JNICALL *jvmtiEventVMDeath)\n-  (jvmtiEnv *jvmti_env, JNIEnv *jni_env);\n-\n-typedef void (JNICALL *jvmtiEventCompiledMethodLoad)\n-  (jvmtiEnv *jvmti_env, jmethodID method, jint code_size,\n-   const void *code_addr, jint map_length, const jvmtiAddrLocationMap *map,\n-   const void *compile_info);\n-\n-typedef void (JNICALL *jvmtiEventCompiledMethodUnload)\n-  (jvmtiEnv *jvmti_env, jmethodID method, const void *code_addr);\n-\n-typedef void (JNICALL *jvmtiEventDynamicCodeGenerated)\n-  (jvmtiEnv *jvmti_env, const char *name, const void *address, jint length);\n-\n-typedef void (JNICALL *jvmtiEventDataDumpRequest)\n-  (jvmtiEnv *jvmti_env);\n-\n-typedef void (JNICALL *jvmtiEventMonitorContendedEnter)\n-  (jvmtiEnv *jvmti_env, JNIEnv *jni_env, jthread thread, jobject object);\n-\n-typedef void (JNICALL *jvmtiEventMonitorContendedEntered)\n-  (jvmtiEnv *jvmti_env, JNIEnv *jni_env, jthread thread, jobject object);\n-\n-typedef void (JNICALL *jvmtiEventMonitorWait)\n-  (jvmtiEnv *jvmti_env, JNIEnv *jni_env, jthread thread, jobject object,\n-   jlong timeout);\n-\n-typedef void (JNICALL *jvmtiEventMonitorWaited)\n-  (jvmtiEnv *jvmti_env, JNIEnv *jni_env, jthread thread, jobject object,\n-   jboolean timed_out);\n-\n-typedef void (JNICALL *jvmtiEventVMObjectAlloc)\n-  (jvmtiEnv *jvmti_env, JNIEnv *jni_env, jthread thread, jobject object,\n-   jclass object_klass, jlong size);\n-\n-typedef void (JNICALL *jvmtiEventObjectFree)\n-  (jvmtiEnv *jvmti_env, jlong tag);\n-\n-typedef void (JNICALL *jvmtiEventGarbageCollectionStart)\n-  (jvmtiEnv *jvmti_env);\n-\n-typedef void (JNICALL *jvmtiEventGarbageCollectionFinish)\n-  (jvmtiEnv *jvmti_env);\n-\n-typedef struct\n-{\n-  jvmtiEventVMInit VMInit;\n-  jvmtiEventVMDeath VMDeath;\n-  jvmtiEventThreadStart ThreadStart;\n-  jvmtiEventThreadEnd ThreadEnd;\n-  jvmtiEventClassFileLoadHook ClassFileLoadHook;\n-  jvmtiEventClassLoad ClassLoad;\n-  jvmtiEventClassPrepare ClassPrepare;\n-  jvmtiEventVMStart VMStart;\n-  jvmtiEventException Exception;\n-  jvmtiEventExceptionCatch ExceptionCatch;\n-  jvmtiEventSingleStep SingleStep;\n-  jvmtiEventFramePop FramePop;\n-  jvmtiEventBreakpoint Breakpoint;\n-  jvmtiEventFieldAccess FieldAccess;\n-  jvmtiEventFieldModification FieldModification;\n-  jvmtiEventMethodEntry MethodEntry;\n-  jvmtiEventMethodExit MethodExit;\n-  jvmtiEventNativeMethodBind NativeMethodBind;\n-  jvmtiEventCompiledMethodLoad CompiledMethodLoad;\n-  jvmtiEventCompiledMethodUnload CompiledMethodUnload;\n-  jvmtiEventDynamicCodeGenerated DynamicCodeGenerated;\n-  jvmtiEventDataDumpRequest DataDumpRequest;\n-  jvmtiEventReserved reserved72;\n-  jvmtiEventMonitorWait MonitorWait;\n-  jvmtiEventMonitorWaited MonitorWaited;\n-  jvmtiEventMonitorContendedEnter MonitorContendedEnter;\n-  jvmtiEventMonitorContendedEntered MonitorContendedEntered;\n-  jvmtiEventReserved reserved77;\n-  jvmtiEventReserved reserved78;\n-  jvmtiEventReserved reserved79;\n-  jvmtiEventReserved reserved80;\n-  jvmtiEventGarbageCollectionStart GarbageCollectionStart;\n-  jvmtiEventGarbageCollectionFinish GarbageCollectionFinish;\n-  jvmtiEventObjectFree ObjectFree;\n-  jvmtiEventVMObjectAlloc VMObjectAlloc;\n-} jvmtiEventCallbacks;\n-\n-/*\n- * Function and Structure Type Definitions\n- */\n-\n-struct _jvmtiAddrLocationMap\n-{\n-  const void *start_address;\n-  jlocation location;\n-};\n-\n-typedef struct\n-{\n-  unsigned int can_tag_objects : 1;\n-  unsigned int can_generate_field_modification_events : 1;\n-  unsigned int can_generate_field_access_events : 1;\n-  unsigned int can_get_bytecodes : 1;\n-  unsigned int can_get_synthetic_attribute : 1;\n-  unsigned int can_get_owned_monitor_info : 1;\n-  unsigned int can_get_current_contended_monitor : 1;\n-  unsigned int can_get_monitor_info : 1;\n-  unsigned int can_pop_frame : 1;\n-  unsigned int can_redefine_classes : 1;\n-  unsigned int can_signal_thread : 1;\n-  unsigned int can_get_source_file_name : 1;\n-  unsigned int can_get_line_numbers : 1;\n-  unsigned int can_get_source_debug_extension : 1;\n-  unsigned int can_access_local_variables : 1;\n-  unsigned int can_maintain_original_method_order : 1;\n-  unsigned int can_generate_single_step_events : 1;\n-  unsigned int can_generate_exception_events : 1;\n-  unsigned int can_generate_frame_pop_events : 1;\n-  unsigned int can_generate_breakpoint_events : 1;\n-  unsigned int can_suspend : 1;\n-  unsigned int can_redefine_any_class : 1;\n-  unsigned int can_get_current_thread_cpu_time : 1;\n-  unsigned int can_get_thread_cpu_time : 1;\n-  unsigned int can_generate_method_entry_events : 1;\n-  unsigned int can_generate_method_exit_events : 1;\n-  unsigned int can_generate_all_class_hook_events : 1;\n-  unsigned int can_generate_compiled_method_load_events : 1;\n-  unsigned int can_generate_monitor_events : 1;\n-  unsigned int can_generate_vm_object_alloc_events : 1;\n-  unsigned int can_generate_native_method_bind_events : 1;\n-  unsigned int can_generate_garbage_collection_events : 1;\n-  unsigned int can_generate_object_free_events : 1;\n-  unsigned int : 15;\n-  unsigned int : 16;\n-  unsigned int : 16;\n-  unsigned int : 16;\n-  unsigned int : 16;\n-  unsigned int : 16;\n-} jvmtiCapabilities;\n-\n-typedef struct\n-{\n-  jclass klass;\n-  jint class_byte_count;\n-  const unsigned char *class_bytes;\n-} jvmtiClassDefinition;\n-\n-typedef struct\n-{\n-  char *name;\n-  jvmtiParamKind kind;\n-  jvmtiParamTypes base_type;\n-  jboolean null_ok;\n-} jvmtiParamInfo;\n-\n-typedef struct\n-{\n-  jint extension_event_index;\n-  char *id;\n-  char *short_description;\n-  jint param_count;\n-  jvmtiParamInfo* params;\n-} jvmtiExtensionEventInfo;\n-\n-typedef jvmtiError (JNICALL *jvmtiExtensionFunction)\n-  (jvmtiEnv *jvmti_enf, ...);\n-\n-typedef struct\n-{\n-  jvmtiExtensionFunction func;\n-  char *id;\n-  char *short_description;\n-  jint param_count;\n-  jvmtiParamInfo *params;\n-  jint error_count;\n-  jvmtiError *errors;\n-} jvmtiExtensionFunctionInfo;\n-\n-typedef struct\n-{\n-  jmethodID method;\n-  jlocation location;\n-} jvmtiFrameInfo;\n-\n-typedef struct\n-{\n-  jlocation start_location;\n-  jint line_number;\n-} jvmtiLineNumberEntry;\n-\n-typedef struct\n-{\n-  jlocation start_location;\n-  jint length;\n-  char *name;\n-  char *signature;\n-  char *generic_signature;\n-  jint slot;\n-} jvmtiLocalVariableEntry;\n-\n-typedef struct\n-{\n-  jthread owner;\n-  jint entry_count;\n-  jint waiter_count;\n-  jthread *waiters;\n-  jint notify_waiter_count;\n-  jthread *notify_waiters;\n-} jvmtiMonitorUsage;\n-\n-typedef struct\n-{\n-  jthread thread;\n-  jint state;\n-  jvmtiFrameInfo *frame_buffer;\n-  jint frame_count;\n-} jvmtiStackInfo;\n-\n-typedef struct\n-{\n-  jthreadGroup parent;\n-  char *name;\n-  jint max_priority;\n-  jboolean is_daemon;\n-} jvmtiThreadGroupInfo;\n-\n-typedef struct\n-{\n-  char *name;\n-  jint priority;\n-  jboolean is_daemon;\n-  jthreadGroup thread_group;\n-  jobject context_class_loader;\n-} jvmtiThreadInfo;\n-\n-typedef struct\n-{\n-  jlong max_value;\n-  jboolean may_skip_forward;\n-  jboolean may_skip_backward;\n-  jvmtiTimerKind kind;\n-  jlong reserved1;\n-  jlong reserved2;\n-} jvmtiTimerInfo;\n-\n-typedef void (JNICALL *jvmtiExtensionEvent)\n-  (jvmtiEnv *jvmti_env, ...);\n-\n-typedef jvmtiIterationControl (JNICALL *jvmtiHeapObjectCallback)\n-  (jlong class_tag, jlong size, jlong *tag_ptr, void *user_data);\n-\n-typedef jvmtiIterationControl (JNICALL *jvmtiHeapRootCallback)\n-  (jvmtiHeapRootKind root_kind, jlong class_tag, jlong size, jlong *tag_ptr,\n-   void *user_data);\n-\n-typedef jvmtiIterationControl (JNICALL *jvmtiObjectReferenceCallback)\n-  (jvmtiObjectReferenceKind reference_kind, jlong class_tag, jlong size,\n-   jlong *tag_ptr, jlong referrer_tag, jint referrer_index, void *user_data);\n-\n-typedef jvmtiIterationControl (JNICALL *jvmtiStackReferenceCallback)\n-  (jvmtiHeapRootKind root_kind, jlong class_tag, jlong size, jlong *tag_ptr,\n-   jlong thread_tag, jint depth, jmethodID method, jint slot, void *user_data);\n-\n-typedef void (JNICALL *jvmtiStartFunction)\n-  (jvmtiEnv *env, JNIEnv *jni_env, void *arg);\n-\n-/*\n- * JVM Tool Interface Base Types\n- */\n-typedef struct JNINativeInterface jniNativeInterface;\n-\n-struct _Jv_jvmtiEnv\n-{\n-  void *reserved1;\n-\n-  jvmtiError (JNICALL *SetEventNotificationMode) (jvmtiEnv *env,\n-\t\t\t\t\t\t  jvmtiEventMode mode,\n-\t\t\t\t\t\t  jvmtiEvent event_type,\n-\t\t\t\t\t\t  jthread event_thread, ...);\n-  void *reserved3;\n-\n-  jvmtiError (JNICALL *GetAllThreads) (jvmtiEnv *env,\n-\t\t\t\t       jint *threads_count_ptr,\n-\t\t\t\t       jthread **threads_ptr);\n-\n-  jvmtiError (JNICALL *SuspendThread) (jvmtiEnv *env,\n-\t\t\t\t       jthread thread);\n-\n-  jvmtiError (JNICALL *ResumeThread) (jvmtiEnv *env,\n-\t\t\t\t      jthread thread);\n-\n-  jvmtiError (JNICALL *StopThread) (jvmtiEnv *env,\n-\t\t\t\t    jthread thread,\n-                                    jobject exception);\n-\n-  jvmtiError (JNICALL *InterruptThread) (jvmtiEnv *env,\n-\t\t\t\t\t jthread thread);\n-\n-  jvmtiError (JNICALL *GetThreadInfo) (jvmtiEnv *env,\n-\t\t\t\t       jthread thread,\n-\t\t\t\t       jvmtiThreadInfo *info_ptr);\n-\n-  jvmtiError (JNICALL *GetOwnedMonitorInfo) (jvmtiEnv *env,\n-\t\t\t\t\t     jthread thread,\n-\t\t\t\t\t     jint *owned_monitor_count_ptr,\n-\t\t\t\t\t     jobject **owned_monitors_ptr);\n-\n-  jvmtiError (JNICALL *GetCurrentContendedMonitor) (jvmtiEnv *env,\n-\t\t\t\t\t\t    jthread thread,\n-\t\t\t\t\t\t    jobject *monitor_ptr);\n-\n-  jvmtiError (JNICALL *RunAgentThread) (jvmtiEnv *env,\n-\t\t\t\t\tjthread thread,\n-\t\t\t\t\tjvmtiStartFunction proc,\n-\t\t\t\t\tconst void *arg,\n-\t\t\t\t\tjint priority);\n-\n-  jvmtiError (JNICALL *GetTopThreadGroups) (jvmtiEnv *env,\n-\t\t\t\t\t    jint *group_count_ptr,\n-\t\t\t\t\t    jthreadGroup **groups_ptr);\n-\n-  jvmtiError (JNICALL *GetThreadGroupInfo) (jvmtiEnv *env,\n-\t\t\t\t\t    jthreadGroup group,\n-\t\t\t\t\t    jvmtiThreadGroupInfo *info_ptr);\n-\n-  jvmtiError (JNICALL *GetThreadGroupChildren) (jvmtiEnv *env,\n-\t\t\t\t\t\tjthreadGroup group,\n-\t\t\t\t\t\tjint *thread_count_ptr,\n-\t\t\t\t\t\tjthread **threads_ptr,\n-\t\t\t\t\t\tjint *group_count_ptr,\n-\t\t\t\t\t\tjthreadGroup **groups_ptr);\n-  jvmtiError (JNICALL *GetFrameCount) (jvmtiEnv *env,\n-\t\t\t\t       jthread thread,\n-\t\t\t\t       jint *count_ptr);\n-\n-  jvmtiError (JNICALL *GetThreadState) (jvmtiEnv *env,\n-\t\t\t\t\tjthread thread,\n-\t\t\t\t\tjint *thread_state_ptr);\n-\n-  void *reserved18;\n-\n-  jvmtiError (JNICALL *GetFrameLocation) (jvmtiEnv *env,\n-\t\t\t\t\t  jthread thread,\n-\t\t\t\t\t  jint depth,\n-\t\t\t\t\t  jmethodID *method_ptr,\n-\t\t\t\t\t  jlocation *location_ptr);\n-\n-  jvmtiError (JNICALL *NotifyPopFrame) (jvmtiEnv *env,\n-\t\t\t\t\tjthread thread,\n-\t\t\t\t\tjint depth);\n-\n-  jvmtiError (JNICALL *GetLocalObject) (jvmtiEnv *env,\n-\t\t\t\t\tjthread thread,\n-\t\t\t\t\tjint depth,\n-\t\t\t\t\tjint slot,\n-\t\t\t\t\tjobject *value_ptr);\n-\n-  jvmtiError (JNICALL *GetLocalInt) (jvmtiEnv *env,\n-\t\t\t\t     jthread thread,\n-\t\t\t\t     jint depth,\n-\t\t\t\t     jint slot,\n-\t\t\t\t     jint *value_ptr);\n-\n-  jvmtiError (JNICALL *GetLocalLong) (jvmtiEnv *env,\n-\t\t\t\t      jthread thread,\n-\t\t\t\t      jint depth,\n-\t\t\t\t      jint slot,\n-\t\t\t\t      jlong *value_ptr);\n-\n-  jvmtiError (JNICALL *GetLocalFloat) (jvmtiEnv *env,\n-\t\t\t\t       jthread thread,\n-\t\t\t\t       jint depth,\n-\t\t\t\t       jint slot,\n-\t\t\t\t       jfloat *value_ptr);\n-\n-  jvmtiError (JNICALL *GetLocalDouble) (jvmtiEnv *env,\n-\t\t\t\t\tjthread thread,\n-\t\t\t\t\tjint depth,\n-\t\t\t\t\tjint slot,\n-\t\t\t\t\tjdouble *value_ptr);\n-\n-  jvmtiError (JNICALL *SetLocalObject) (jvmtiEnv *env,\n-\t\t\t\t\tjthread thread,\n-\t\t\t\t\tjint depth,\n-\t\t\t\t\tjint slot,\n-\t\t\t\t\tjobject value);\n-\n-  jvmtiError (JNICALL *SetLocalInt) (jvmtiEnv *env,\n-\t\t\t\t     jthread thread,\n-\t\t\t\t     jint depth,\n-\t\t\t\t     jint slot,\n-\t\t\t\t     jint value);\n-\n-  jvmtiError (JNICALL *SetLocalLong) (jvmtiEnv *env,\n-\t\t\t\t      jthread thread,\n-\t\t\t\t      jint depth,\n-\t\t\t\t      jint slot,\n-\t\t\t\t      jlong value);\n-\n-  jvmtiError (JNICALL *SetLocalFloat) (jvmtiEnv *env,\n-\t\t\t\t       jthread thread,\n-\t\t\t\t       jint depth,\n-\t\t\t\t       jint slot,\n-\t\t\t\t       jfloat value);\n-\n-  jvmtiError (JNICALL *SetLocalDouble) (jvmtiEnv *env,\n-\t\t\t\t\tjthread thread,\n-\t\t\t\t\tjint depth,\n-\t\t\t\t\tjint slot,\n-\t\t\t\t\tjdouble value);\n-\n-  jvmtiError (JNICALL *CreateRawMonitor) (jvmtiEnv *env,\n-\t\t\t\t\t  const char *name,\n-\t\t\t\t\t  jrawMonitorID *monitor_ptr);\n-\n-  jvmtiError (JNICALL *DestroyRawMonitor) (jvmtiEnv *env,\n-\t\t\t\t\t   jrawMonitorID monitor);\n-\n-  jvmtiError (JNICALL *RawMonitorEnter) (jvmtiEnv *env,\n-\t\t\t\t\t jrawMonitorID monitor);\n-\n-  jvmtiError (JNICALL *RawMonitorExit) (jvmtiEnv *env,\n-\t\t\t\t\tjrawMonitorID monitor);\n-\n-  jvmtiError (JNICALL *RawMonitorWait) (jvmtiEnv *env,\n-\t\t\t\t\tjrawMonitorID monitor,\n-                                        jlong millis);\n-\n-  jvmtiError (JNICALL *RawMonitorNotify) (jvmtiEnv *env,\n-\t\t\t\t\t  jrawMonitorID monitor);\n-\n-  jvmtiError (JNICALL *RawMonitorNotifyAll) (jvmtiEnv *env,\n-\t\t\t\t\t     jrawMonitorID monitor);\n-\n-  jvmtiError (JNICALL *SetBreakpoint) (jvmtiEnv *env,\n-\t\t\t\t       jmethodID method,\n-\t\t\t\t       jlocation location);\n-\n-  jvmtiError (JNICALL *ClearBreakpoint) (jvmtiEnv *env,\n-\t\t\t\t\t jmethodID method,\n-\t\t\t\t\t jlocation location);\n-\n-  void *reserved40;\n-\n-  jvmtiError (JNICALL *SetFieldAccessWatch) (jvmtiEnv *env,\n-\t\t\t\t\t     jclass klass,\n-\t\t\t\t\t     jfieldID field);\n-\n-  jvmtiError (JNICALL *ClearFieldAccessWatch) (jvmtiEnv *env,\n-\t\t\t\t\t       jclass klass,\n-\t\t\t\t\t       jfieldID field);\n-\n-  jvmtiError (JNICALL *SetFieldModificationWatch) (jvmtiEnv *env,\n-\t\t\t\t\t\t   jclass klass,\n-\t\t\t\t\t\t   jfieldID field);\n-\n-  jvmtiError (JNICALL *ClearFieldModificationWatch) (jvmtiEnv *env,\n-\t\t\t\t\t\t     jclass klass,\n-\t\t\t\t\t\t     jfieldID field);\n-\n-  void *reserved45;\n-\n-  jvmtiError (JNICALL *Allocate) (jvmtiEnv *env,\n-\t\t\t\t  jlong size,\n-\t\t\t\t  unsigned char **mem_ptr);\n-\n-  jvmtiError (JNICALL *Deallocate) (jvmtiEnv *env,\n-\t\t\t\t    unsigned char *mem);\n-\n-  jvmtiError (JNICALL *GetClassSignature) (jvmtiEnv *env,\n-\t\t\t\t\t   jclass klass,\n-\t\t\t\t\t   char **signature_ptr,\n-\t\t\t\t\t   char **generic_ptr);\n-\n-  jvmtiError (JNICALL *GetClassStatus) (jvmtiEnv *env,\n-\t\t\t\t\tjclass klass,\n-\t\t\t\t\tjint *status_ptr);\n-\n-  jvmtiError (JNICALL *GetSourceFileName) (jvmtiEnv *env,\n-\t\t\t\t\t   jclass klass,\n-\t\t\t\t\t   char **source_name_ptr);\n-\n-  jvmtiError (JNICALL *GetClassModifiers) (jvmtiEnv *env,\n-\t\t\t\t\t   jclass klass,\n-\t\t\t\t\t   jint *modifiers_ptr);\n-\n-  jvmtiError (JNICALL *GetClassMethods) (jvmtiEnv *env,\n-\t\t\t\t\t jclass klass,\n-\t\t\t\t\t jint *method_count_ptr,\n-\t\t\t\t\t jmethodID **methods_ptr);\n-\n-  jvmtiError (JNICALL *GetClassFields) (jvmtiEnv *env,\n-\t\t\t\t\tjclass klass,\n-\t\t\t\t\tjint *field_count_ptr,\n-\t\t\t\t\tjfieldID **fields_ptr);\n-\n-  jvmtiError (JNICALL *GetImplementedInterfaces) (jvmtiEnv *env,\n-\t\t\t\t\t\t  jclass klass,\n-\t\t\t\t\t\t  jint *interface_count_ptr,\n-\t\t\t\t\t\t  jclass **interfaces_ptr);\n-\n-  jvmtiError (JNICALL *IsInterface) (jvmtiEnv *env,\n-\t\t\t\t     jclass klass,\n-\t\t\t\t     jboolean *is_interface_ptr);\n-\n-  jvmtiError (JNICALL *IsArrayClass) (jvmtiEnv *env,\n-\t\t\t\t      jclass klass,\n-\t\t\t\t      jboolean *is_array_class_ptr);\n-\n-  jvmtiError (JNICALL *GetClassLoader) (jvmtiEnv *env,\n-\t\t\t\t\tjclass klass,\n-\t\t\t\t\tjobject *classloader_ptr);\n-\n-  jvmtiError (JNICALL *GetObjectHashCode) (jvmtiEnv *env,\n-\t\t\t\t\t   jobject object,\n-\t\t\t\t\t   jint *hash_code_ptr);\n-\n-  jvmtiError (JNICALL *GetObjectMonitorUsage) (jvmtiEnv *env,\n-\t\t\t\t\t       jobject object,\n-\t\t\t\t\t       jvmtiMonitorUsage *info_ptr);\n-\n-  jvmtiError (JNICALL *GetFieldName) (jvmtiEnv *env,\n-\t\t\t\t      jclass klass,\n-\t\t\t\t      jfieldID field,\n-\t\t\t\t      char **name_ptr,\n-\t\t\t\t      char **signature_ptr,\n-\t\t\t\t      char **generic_ptr);\n-\n-  jvmtiError (JNICALL *GetFieldDeclaringClass) (jvmtiEnv *env,\n-\t\t\t\t\t\tjclass klass,\n-\t\t\t\t\t\tjfieldID field,\n-\t\t\t\t\t\tjclass *declaring_class_ptr);\n-\n-  jvmtiError (JNICALL *GetFieldModifiers) (jvmtiEnv *env,\n-\t\t\t\t\t   jclass klass,\n-\t\t\t\t\t   jfieldID field,\n-\t\t\t\t\t   jint *modifiers_ptr);\n-\n-  jvmtiError (JNICALL *IsFieldSynthetic) (jvmtiEnv *env,\n-\t\t\t\t\t  jclass klass,\n-\t\t\t\t\t  jfieldID field,\n-\t\t\t\t\t  jboolean *is_synthetic_ptr);\n-\n-  jvmtiError (JNICALL *GetMethodName) (jvmtiEnv *env,\n-\t\t\t\t       jmethodID method,\n-\t\t\t\t       char **name_ptr,\n-\t\t\t\t       char **signature_ptr,\n-\t\t\t\t       char **generic_ptr);\n-\n-  jvmtiError (JNICALL *GetMethodDeclaringClass) (jvmtiEnv *env,\n-\t\t\t\t\t\t jmethodID method,\n-\t\t\t\t\t\t jclass *declaring_class_ptr);\n-\n-\n-  jvmtiError (JNICALL *GetMethodModifiers) (jvmtiEnv *env,\n-\t\t\t\t\t    jmethodID method,\n-\t\t\t\t\t    jint *modifiers_ptr);\n-\n-  void *reserved67;\n-\n-  jvmtiError (JNICALL *GetMaxLocals) (jvmtiEnv *env,\n-\t\t\t\t      jmethodID method,\n-\t\t\t\t      jint *max_ptr);\n-\n-  jvmtiError (JNICALL *GetArgumentsSize) (jvmtiEnv *env,\n-\t\t\t\t\t  jmethodID method,\n-\t\t\t\t\t  jint *size_ptr);\n-\n-  jvmtiError (JNICALL *GetLineNumberTable) (jvmtiEnv *env,\n-\t\t\t\t\t    jmethodID method,\n-\t\t\t\t\t    jint *entry_count_ptr,\n-\t\t\t\t\t    jvmtiLineNumberEntry **table_ptr);\n-\n-  jvmtiError (JNICALL *GetMethodLocation) (jvmtiEnv *env,\n-\t\t\t\t\t   jmethodID method,\n-\t\t\t\t\t   jlocation *start_location_ptr,\n-\t\t\t\t\t   jlocation *end_location_ptr);\n-\n-  jvmtiError (JNICALL *GetLocalVariableTable) (jvmtiEnv *env,\n-\t\t\t\t\t       jmethodID method,\n-\t\t\t\t\t       jint *entry_count_ptr,\n-\t\t\t\t\t       jvmtiLocalVariableEntry **table_ptr);\n-\n-  void *reserved73;\n-\n-  void *reserved74;\n-\n-  jvmtiError (JNICALL *GetBytecodes) (jvmtiEnv *env,\n-\t\t\t\t      jmethodID method,\n-\t\t\t\t      jint *bytecode_count_ptr,\n-\t\t\t\t      unsigned char **bytecodes_ptr);\n-\n-  jvmtiError (JNICALL *IsMethodNative) (jvmtiEnv *env,\n-\t\t\t\t\tjmethodID method,\n-\t\t\t\t\tjboolean *is_native_ptr);\n-\n-  jvmtiError (JNICALL *IsMethodSynthetic) (jvmtiEnv *env,\n-\t\t\t\t\t   jmethodID method,\n-\t\t\t\t\t   jboolean *is_synthetic_ptr);\n-\n-  jvmtiError (JNICALL *GetLoadedClasses) (jvmtiEnv *env,\n-\t\t\t\t\t  jint *class_count_ptr,\n-\t\t\t\t\t  jclass **classes_ptr);\n-\n-  jvmtiError (JNICALL *GetClassLoaderClasses) (jvmtiEnv *env,\n-\t\t\t\t\t       jobject initiating_loader,\n-\t\t\t\t\t       jint *class_count_ptr,\n-\t\t\t\t\t       jclass **classes_ptr);\n-\n-  jvmtiError (JNICALL *PopFrame) (jvmtiEnv *env,\n-\t\t\t\t  jthread thread);\n-\n-  void *reserved81;\n-\n-  void *reserved82;\n-\n-  void *reserved83;\n-\n-  void *reserved84;\n-\n-  void *reserved85;\n-\n-  void *reserved86;\n-\n-  jvmtiError (JNICALL *RedefineClasses) (jvmtiEnv *env,\n-\t\t\t\t\t jint class_count,\n-\t\t\t\t\t const jvmtiClassDefinition* class_definitions);\n-\n-  jvmtiError (JNICALL *GetVersionNumber) (jvmtiEnv *env,\n-\t\t\t\t\t  jint *version_ptr);\n-\n-  jvmtiError (JNICALL *GetCapabilities) (jvmtiEnv *env,\n-\t\t\t\t\t jvmtiCapabilities *capabilities_ptr);\n-\n-  jvmtiError (JNICALL *GetSourceDebugExtension) (jvmtiEnv *env,\n-\t\t\t\t\t\t jclass klass,\n-\t\t\t\t\t\t char **source_debug_extension_ptr);\n-\n-  jvmtiError (JNICALL *IsMethodObsolete) (jvmtiEnv *env,\n-\t\t\t\t\t  jmethodID method,\n-\t\t\t\t\t  jboolean *is_obsolete_ptr);\n-\n-  jvmtiError (JNICALL *SuspendThreadList) (jvmtiEnv *env,\n-\t\t\t\t\t   jint request_count,\n-\t\t\t\t\t   const jthread *request_list,\n-\t\t\t\t\t   jvmtiError *results);\n-\n-  jvmtiError (JNICALL *ResumeThreadList) (jvmtiEnv *env,\n-\t\t\t\t\t  jint request_count,\n-\t\t\t\t\t  const jthread *request_list,\n-\t\t\t\t\t  jvmtiError *results);\n-\n-  void *reserved94;\n-\n-  void *reserved95;\n-\n-  void *reserved96;\n-\n-  void *reserved97;\n-\n-  void *reserved98;\n-\n-  void *reserved99;\n-\n-  jvmtiError (JNICALL *GetAllStackTraces) (jvmtiEnv *env,\n-\t\t\t\t\t   jint max_frame_count,\n-\t\t\t\t\t   jvmtiStackInfo **stack_info_ptr,\n-\t\t\t\t\t   jint *thread_count_ptr);\n-\n-  jvmtiError (JNICALL *GetThreadListStackTraces) (jvmtiEnv *env,\n-\t\t\t\t\t\t  jint thread_count,\n-\t\t\t\t\t\t  const jthread *thread_list,\n-\t\t\t\t\t\t  jint max_frame_count,\n-\t\t\t\t\t\t  jvmtiStackInfo **stack_info_ptr);\n-\n-  jvmtiError (JNICALL *GetThreadLocalStorage) (jvmtiEnv *env,\n-\t\t\t\t\t       jthread thread,\n-\t\t\t\t\t       void **data_ptr);\n-\n-  jvmtiError (JNICALL *SetThreadLocalStorage) (jvmtiEnv *env,\n-\t\t\t\t\t       jthread thread,\n-\t\t\t\t\t       const void *data);\n-\n-  jvmtiError (JNICALL *GetStackTrace) (jvmtiEnv *env,\n-\t\t\t\t       jthread thread,\n-\t\t\t\t       jint start_depth,\n-\t\t\t\t       jint max_frame_count,\n-\t\t\t\t       jvmtiFrameInfo *frame_buffer,\n-\t\t\t\t       jint *count_ptr);\n-\n-  void *reserved105;\n-\n-  jvmtiError (JNICALL *GetTag) (jvmtiEnv *env,\n-\t\t\t\tjobject object,\n-\t\t\t\tjlong *tag_ptr);\n-\n-  jvmtiError (JNICALL *SetTag) (jvmtiEnv *env,\n-\t\t\t\tjobject object,\n-\t\t\t\tjlong tag);\n-\n-  jvmtiError (JNICALL *ForceGarbageCollection) (jvmtiEnv *env);\n-\n-  jvmtiError (JNICALL *IterateOverObjectsReachableFromObject) (jvmtiEnv *env,\n-\t\t\t\t\t\t\t       jobject object,\n-\t\t\t\t\t\t\t       jvmtiObjectReferenceCallback object_reference_callback,\n-\t\t\t\t\t\t\t       void *user_data);\n-\n-  jvmtiError (JNICALL *IterateOverReachableObjects) (jvmtiEnv *env,\n-\t\t\t\t\t\t     jvmtiHeapRootCallback heap_root_callback,\n-\t\t\t\t\t\t     jvmtiStackReferenceCallback stack_ref_callback,\n-\t\t\t\t\t\t     jvmtiObjectReferenceCallback object_ref_callback,\n-\t\t\t\t\t\t     void *user_data);\n-\n-  jvmtiError (JNICALL *IterateOverHeap) (jvmtiEnv *env,\n-\t\t\t\t\t jvmtiHeapObjectFilter object_filter,\n-\t\t\t\t\t jvmtiHeapObjectCallback heap_object_callback,\n-\t\t\t\t\t void *user_data);\n-\n-  jvmtiError (JNICALL *IterateOverInstanceOfClass) (jvmtiEnv *env,\n-\t\t\t\t\t\t    jclass klass,\n-\t\t\t\t\t\t    jvmtiHeapObjectFilter object_filter,\n-\t\t\t\t\t\t    jvmtiHeapObjectCallback heap_object_callback,\n-\t\t\t\t\t\t    void *user_data);\n-\n-  void *reserved113;\n-\n-  jvmtiError (JNICALL *GetObjectsWithTags) (jvmtiEnv *env,\n-\t\t\t\t\t    jint tag_count,\n-\t\t\t\t\t    const jlong *tags,\n-\t\t\t\t\t    jint *count_ptr,\n-\t\t\t\t\t    jobject **object_result_ptr,\n-\t\t\t\t\t    jlong **tag_result_ptr);\n-\n-  void *reserved115;\n-\n-  void *reserved116;\n-\n-  void *reserved117;\n-\n-  void *reserved118;\n-\n-  void *reserved119;\n-\n-  jvmtiError (JNICALL *SetJNIFunctionTable) (jvmtiEnv *env,\n-\t\t\t\t\t     const jniNativeInterface *function_table);\n-\n-  jvmtiError (JNICALL *GetJNIFunctionTable) (jvmtiEnv *env,\n-\t\t\t\t\t     jniNativeInterface **function_table_ptr);\n-\n-  jvmtiError (JNICALL *SetEventCallbacks) (jvmtiEnv *env,\n-\t\t\t\t\t   const jvmtiEventCallbacks *callbacks,\n-\t\t\t\t\t   jint size_of_callbacks);\n-\n-  jvmtiError (JNICALL *GenerateEvents) (jvmtiEnv *env,\n-\t\t\t\t\tjvmtiEvent event_type);\n-\n-  jvmtiError (JNICALL *GetExtensionFunctions) (jvmtiEnv *env,\n-\t\t\t\t\t       jint *extension_count_ptr,\n-\t\t\t\t\t       jvmtiExtensionFunctionInfo **extensions);\n-\n-  jvmtiError (JNICALL *GetExtensionEvents) (jvmtiEnv *env,\n-\t\t\t\t\t    jint *extension_count_ptr,\n-\t\t\t\t\t    jvmtiExtensionEventInfo **extensions);\n-\n-  jvmtiError (JNICALL *SetExtensionEventCallback) (jvmtiEnv *env,\n-\t\t\t\t\t\t   jint extension_event_index,\n-\t\t\t\t\t\t   jvmtiExtensionEvent callback);\n-\n-  jvmtiError (JNICALL *DisposeEnvironment) (jvmtiEnv *env);\n-\n-  jvmtiError (JNICALL *GetErrorName) (jvmtiEnv *env,\n-\t\t\t\t      jvmtiError error,\n-\t\t\t\t      char **name_ptr);\n-\n-  jvmtiError (JNICALL *GetJLocationFormat) (jvmtiEnv *env,\n-\t\t\t\t\t    jvmtiJlocationFormat *format_ptr);\n-\n-  jvmtiError (JNICALL *GetSystemProperties) (jvmtiEnv *env,\n-\t\t\t\t\t     jint *count_ptr,\n-\t\t\t\t\t     char ***property_ptr);\n-\n-  jvmtiError (JNICALL *GetSystemProperty) (jvmtiEnv *env,\n-\t\t\t\t\t   const char *property,\n-\t\t\t\t\t   char **value_ptr);\n-\n-  jvmtiError (JNICALL *SetSystemProperty) (jvmtiEnv *env,\n-\t\t\t\t\t   const char *property,\n-\t\t\t\t\t   const char *value);\n-\n-  jvmtiError (JNICALL *GetPhase) (jvmtiEnv *env,\n-\t\t\t\t  jvmtiPhase *phase_ptr);\n-\n-  jvmtiError (JNICALL *GetCurrentThreadCpuTimerInfo) (jvmtiEnv *env,\n-\t\t\t\t\t\t      jvmtiTimerInfo *info_ptr);\n-\n-  jvmtiError (JNICALL *GetCurrentThreadCpuTime) (jvmtiEnv *env,\n-\t\t\t\t\t\t jlong *nanos_ptr);\n-\n-  jvmtiError (JNICALL *GetThreadCpuTimerInfo) (jvmtiEnv *env,\n-\t\t\t\t\t       jvmtiTimerInfo *info_ptr);\n-\n-  jvmtiError (JNICALL *GetThreadCpuTime) (jvmtiEnv *env,\n-\t\t\t\t\t  jthread thread,\n-\t\t\t\t\t  jlong *nanos_ptr);\n-\n-  jvmtiError (JNICALL *GetTimerInfo) (jvmtiEnv *env,\n-\t\t\t\t      jvmtiTimerInfo *info_ptr);\n-\n-  jvmtiError (JNICALL *GetTime) (jvmtiEnv *env,\n-\t\t\t\t jlong *nanos_ptr);\n-\n-  jvmtiError (JNICALL *GetPotentialCapabilities) (jvmtiEnv *env,\n-\t\t\t\t\t\t  jvmtiCapabilities *capabilities_ptr);\n-\n-  void *reserved141;\n-\n-  jvmtiError (JNICALL *AddCapabilities) (jvmtiEnv *env,\n-\t\t\t\t\t const jvmtiCapabilities *capabilities_ptr);\n-\n-  jvmtiError (JNICALL *RelinquishCapabilities) (jvmtiEnv *env,\n-\t\t\t\t\t\tconst jvmtiCapabilities *capabilities_ptr);\n-\n-  jvmtiError (JNICALL *GetAvailableProcessors) (jvmtiEnv *env,\n-\t\t\t\t\t\tjint *processor_count_ptr);\n-\n-  void *reserved145;\n-\n-  void *reserved146;\n-\n-  jvmtiError (JNICALL *GetEnvironmentLocalStorage) (jvmtiEnv *env,\n-\t\t\t\t\t\t    void **data_ptr);\n-\n-  jvmtiError (JNICALL *SetEnvironmentLocalStorage) (jvmtiEnv *env,\n-\t\t\t\t\t\t    const void *data);\n-\n-  jvmtiError (JNICALL *AddToBootstrapClassLoaderSearch) (jvmtiEnv *env,\n-\t\t\t\t\t\t\t const char *segment);\n-\n-  jvmtiError (JNICALL *SetVerboseFlag) (jvmtiEnv *env,\n-\t\t\t\t\tjvmtiVerboseFlag flag,\n-\t\t\t\t\tjboolean value);\n-\n-  void *reserved151;\n-\n-  void *reserved152;\n-\n-  void *reserved153;\n-\n-  jvmtiError (JNICALL *GetObjectSize) (jvmtiEnv *env,\n-\t\t\t\t       jobject object,\n-\t\t\t\t       jlong *size_ptr);\n-};\n-\n-#ifdef __cplusplus\n-class _Jv_JVMTIEnv\n-{\n- public:\n-  /* Method table */\n-  struct _Jv_jvmtiEnv *p;\n-\n-#ifdef _CLASSPATH_JVMTIENV_CONTENTS\n-  _CLASSPATH_JVMTIENV_CONTENTS\n-#endif\n-\n-  jvmtiError SetEventNotificationMode (jvmtiEventMode mode,\n-\t\t\t\t       jvmtiEvent event_type,\n-\t\t\t\t       jthread event_thread, ...)\n-  {\n-    va_list args;\n-    va_start (args, event_thread);\n-    jvmtiError result = p->SetEventNotificationMode (this, mode, event_type,\n-\t\t\t\t\t\t     event_thread, args);\n-    va_end (args);\n-    return result;\n-  }\n-\n-  jvmtiError GetAllThreads (jint *threads_count_ptr, jthread **threads_ptr)\n-  { return p->GetAllThreads (this, threads_count_ptr, threads_ptr); }\n-\n-  jvmtiError SuspendThread (jthread thread)\n-  { return p->SuspendThread (this, thread); }\n-\n-  jvmtiError ResumeThread (jthread thread)\n-  { return p->ResumeThread (this, thread); }\n-\n-  jvmtiError StopThread (jthread thread, jobject exception)\n-  { return p->StopThread (this, thread, exception); }\n-\n-  jvmtiError InterruptThread (jthread thread)\n-  { return p->InterruptThread (this, thread); }\n-\n-  jvmtiError GetThreadInfo (jthread thread, jvmtiThreadInfo *info_ptr)\n-  { return p->GetThreadInfo (this, thread, info_ptr); }\n-\n-  jvmtiError GetOwnedMonitorInfo (jthread thread,\n-\t\t\t\t  jint *owned_monitor_count_ptr,\n-\t\t\t\t  jobject **owned_monitors_ptr)\n-  { \n-    return p->GetOwnedMonitorInfo (this, thread, owned_monitor_count_ptr,\n-\t\t\t\t   owned_monitors_ptr);\n-  }\n-\n-  jvmtiError GetCurrentContendedMonitor (jthread thread, jobject *monitor_ptr)\n-  { return p->GetCurrentContendedMonitor (this, thread, monitor_ptr); }\n-\n-  jvmtiError RunAgentThread (jthread thread, jvmtiStartFunction proc,\n-\t\t\t     const void *arg, jint priority)\n-  { return p->RunAgentThread (this, thread, proc, arg, priority); }\n-\n-  jvmtiError GetTopThreadGroups (jint *group_count_ptr, \n-\t\t\t\t jthreadGroup **groups_ptr)\n-  { return p->GetTopThreadGroups (this, group_count_ptr, groups_ptr); }\n-\n-  jvmtiError GetThreadGroupInfo (jthreadGroup group, \n-\t\t\t\t jvmtiThreadGroupInfo *info_ptr)\n-  { return p->GetThreadGroupInfo (this, group, info_ptr); }\n-\n-  jvmtiError GetThreadGroupChildren (jthreadGroup group,\n-\t\t\t\t     jint *thread_count_ptr,\n-\t\t\t\t     jthread **threads_ptr,\n-\t\t\t\t     jint *group_count_ptr,\n-\t\t\t\t     jthreadGroup **groups_ptr)\n-  {\n-    return p->GetThreadGroupChildren (this, group, thread_count_ptr,\n-\t\t\t\t      threads_ptr, group_count_ptr,\n-\t\t\t\t      groups_ptr);\n-  }\n-\n-  jvmtiError GetFrameCount (jthread thread, jint *count_ptr)\n-  { return p->GetFrameCount (this, thread, count_ptr); }\n-\n-  jvmtiError GetThreadState (jthread thread, jint *thread_state_ptr)\n-  { return p->GetThreadState (this, thread, thread_state_ptr); }\n-\n-  jvmtiError GetFrameLocation (jthread thread, jint depth,\n-\t\t\t       jmethodID *method_ptr, jlocation *location_ptr)\n-  {\n-    return p->GetFrameLocation (this, thread, depth, method_ptr,\n-\t\t\t\tlocation_ptr);\n-  }\n-\n-  jvmtiError NotifyPopFrame (jthread thread, jint depth)\n-  { return p->NotifyPopFrame (this, thread, depth); }\n-\n-  jvmtiError GetLocalObject (jthread thread, jint depth, jint slot,\n-\t\t\t     jobject *value_ptr)\n-  { return p->GetLocalObject (this, thread, depth, slot, value_ptr); }\n-\n-  jvmtiError GetLocalInt (jthread thread, jint depth, jint slot,\n-\t\t\t  jint *value_ptr)\n-  { return p->GetLocalInt (this, thread, depth, slot, value_ptr); }\n-\n-  jvmtiError GetLocalLong (jthread thread, jint depth, jint slot,\n-\t\t\t   jlong *value_ptr)\n-  { return p->GetLocalLong (this, thread, depth, slot, value_ptr); }\n-\n-  jvmtiError GetLocalFloat (jthread thread, jint depth, jint slot,\n-\t\t\t    jfloat *value_ptr)\n-  { return p->GetLocalFloat (this, thread, depth, slot, value_ptr); }\n-\n-  jvmtiError GetLocalDouble (jthread thread, jint depth, jint slot,\n-\t\t\t     jdouble *value_ptr)\n-  { return p->GetLocalDouble (this, thread, depth, slot, value_ptr); }\n-\n-  jvmtiError SetLocalObject (jthread thread, jint depth, jint slot,\n-\t\t\t     jobject value)\n-  { return p->SetLocalObject (this, thread, depth, slot, value); }\n-\n-  jvmtiError SetLocalInt (jthread thread, jint depth, jint slot,\n-\t\t\t  jint value)\n-  { return p->SetLocalInt (this, thread, depth, slot, value); }\n-\n-  jvmtiError SetLocalLong (jthread thread, jint depth, jint slot, \n-\t\t\t   jlong value)\n-  { return p->SetLocalLong (this, thread, depth, slot, value); }\n-\n-  jvmtiError SetLocalFloat (jthread thread, jint depth, jint slot,\n-\t\t\t    jfloat value)\n-  { return p->SetLocalFloat (this, thread, depth, slot, value); }\n-\n-  jvmtiError SetLocalDouble (jthread thread, jint depth, jint slot,\n-\t\t\t     jdouble value)\n-  { return p->SetLocalDouble (this, thread, depth, slot, value); }\n-\n-  jvmtiError CreateRawMonitor (const char *name, jrawMonitorID *monitor_ptr)\n-  { return p->CreateRawMonitor (this, name, monitor_ptr); }\n-\n-  jvmtiError DestroyRawMonitor (jrawMonitorID monitor)\n-  { return p->DestroyRawMonitor (this, monitor); }\n-\n-  jvmtiError RawMonitorEnter (jrawMonitorID monitor)\n-  { return p->RawMonitorEnter (this, monitor); }\n-\n-  jvmtiError RawMonitorExit (jrawMonitorID monitor)\n-  { return p->RawMonitorExit (this, monitor); }\n-\n-  jvmtiError RawMonitorWait (jrawMonitorID monitor, jlong millis)\n-  { return p->RawMonitorWait (this, monitor, millis); }\n-\n-  jvmtiError RawMonitorNotify (jrawMonitorID monitor)\n-  { return p->RawMonitorNotify (this, monitor); }\n-\n-  jvmtiError RawMonitorNotifyAll (jrawMonitorID monitor)\n-  { return p->RawMonitorNotifyAll (this, monitor); }\n-\n-  jvmtiError SetBreakpoint (jmethodID method, jlocation location)\n-  { return p->SetBreakpoint (this, method, location); }\n-\n-  jvmtiError ClearBreakpoint (jmethodID method, jlocation location)\n-  { return p->ClearBreakpoint (this, method, location); }\n-\n-  jvmtiError SetFieldAccessWatch (jclass klass, jfieldID field)\n-  { return p->SetFieldAccessWatch (this, klass, field); }\n-\n-  jvmtiError ClearFieldAccessWatch (jclass klass, jfieldID field)\n-  { return p->ClearFieldAccessWatch (this, klass, field); }\n-\n-  jvmtiError SetFieldModificationWatch (jclass klass, jfieldID field)\n-  { return p->SetFieldModificationWatch (this, klass, field); }\n-\n-  jvmtiError ClearFieldModificationWatch (jclass klass, jfieldID field)\n-  { return p->ClearFieldModificationWatch (this, klass, field); }\n-\n-  jvmtiError Allocate (jlong size, unsigned char **mem_ptr)\n-  { return p->Allocate (this, size, mem_ptr); }\n-\n-  jvmtiError Deallocate (unsigned char *mem)\n-  { return p->Deallocate (this, mem); }\n-\n-  jvmtiError GetClassSignature (jclass klass, char **signature_ptr,\n-\t\t\t\tchar **generic_ptr)\n-  { return p->GetClassSignature (this, klass, signature_ptr, generic_ptr); }\n-\n-  jvmtiError GetClassStatus (jclass klass, jint *status_ptr)\n-  { return p->GetClassStatus (this, klass, status_ptr); }\n-\n-  jvmtiError GetSourceFileName (jclass klass, char **source_name_ptr)\n-  { return p->GetSourceFileName (this, klass, source_name_ptr); }\n-\n-  jvmtiError GetClassModifiers (jclass klass, jint *modifiers_ptr)\n-  { return p->GetClassModifiers (this, klass, modifiers_ptr); }\n-\n-  jvmtiError GetClassMethods (jclass klass, jint *method_count_ptr,\n-\t\t\t      jmethodID **methods_ptr)\n-  { return p->GetClassMethods (this, klass, method_count_ptr, methods_ptr); }\n-\n-  jvmtiError GetClassFields (jclass klass, jint *field_count_ptr,\n-\t\t\t     jfieldID **fields_ptr)\n-  { return p->GetClassFields (this, klass, field_count_ptr, fields_ptr); }\n-\n-  jvmtiError GetImplementedInterfaces (jclass klass,\n-\t\t\t\t       jint *interface_count_ptr,\n-\t\t\t\t       jclass **interfaces_ptr)\n-  {\n-    return p->GetImplementedInterfaces (this, klass, interface_count_ptr,\n-\t\t\t\t\tinterfaces_ptr);\n-  }\n- \n-  jvmtiError IsInterface (jclass klass, jboolean *is_interface_ptr)\n-  { return p->IsInterface (this, klass, is_interface_ptr); }\n-\n-  jvmtiError IsArrayClass (jclass klass, jboolean *is_array_class_ptr)\n-  { return p->IsArrayClass (this, klass, is_array_class_ptr); }\n-\n-  jvmtiError GetClassLoader (jclass klass, jobject *classloader_ptr)\n-  { return p->GetClassLoader (this, klass, classloader_ptr); }\n-\n-  jvmtiError GetObjectHashCode (jobject object, jint *hash_code_ptr)\n-  { return p->GetObjectHashCode (this, object, hash_code_ptr); }\n-\n-  jvmtiError GetObjectMonitorUsage (jobject object,\n-\t\t\t\t    jvmtiMonitorUsage *info_ptr)\n-  { return p->GetObjectMonitorUsage (this, object, info_ptr); }\n-\n-  jvmtiError GetFieldName (jclass klass, jfieldID field, char **name_ptr,\n-\t\t\t   char **signature_ptr, char **generic_ptr)\n-  {\n-    return p->GetFieldName (this, klass, field, name_ptr,\n-\t\t\t    signature_ptr, generic_ptr);\n-  }\n-\n-  jvmtiError GetFieldDeclaringClass (jclass klass, jfieldID field,\n-\t\t\t\t     jclass *declaring_class_ptr)\n-  {\n-    return p->GetFieldDeclaringClass (this, klass, field,\n-\t\t\t\t      declaring_class_ptr);\n-  }\n-\n-  jvmtiError GetFieldModifiers (jclass klass, jfieldID field,\n-\t\t\t\tjint *modifiers_ptr)\n-  { return p->GetFieldModifiers (this, klass, field, modifiers_ptr); }\n-\n-  jvmtiError IsFieldSynthetic (jclass klass, jfieldID field,\n-\t\t\t       jboolean *is_synthetic_ptr)\n-  { return p->IsFieldSynthetic (this, klass, field, is_synthetic_ptr); }\n-\n-  jvmtiError GetMethodName (jmethodID method, char **name_ptr,\n-\t\t\t    char **signature_ptr, char **generic_ptr)\n-  {\n-    return p->GetMethodName (this, method, name_ptr, signature_ptr,\n-\t\t\t     generic_ptr);\n-  }\n-\n-  jvmtiError GetMethodDeclaringClass (jmethodID method,\n-\t\t\t\t      jclass *declaring_class_ptr)\n-  { return p->GetMethodDeclaringClass (this, method, declaring_class_ptr); }\n-\n-\n-  jvmtiError GetMethodModifiers (jmethodID method, jint *modifiers_ptr)\n-  { return p->GetMethodModifiers (this, method, modifiers_ptr); }\n-\n-  jvmtiError GetMaxLocals (jmethodID method, jint *max_ptr)\n-  { return p->GetMaxLocals (this, method, max_ptr); }\n-\n-  jvmtiError GetArgumentsSize (jmethodID method, jint *size_ptr)\n-  { return p->GetArgumentsSize (this, method, size_ptr); }\n-\n-  jvmtiError GetLineNumberTable (jmethodID method, jint *entry_count_ptr,\n-\t\t\t\t jvmtiLineNumberEntry **table_ptr)\n-  { return p->GetLineNumberTable (this, method, entry_count_ptr, table_ptr); }\n-\n-  jvmtiError GetMethodLocation (jmethodID method,\n-\t\t\t\tjlocation *start_location_ptr,\n-\t\t\t\tjlocation *end_location_ptr)\n-  {\n-    return p->GetMethodLocation (this, method, start_location_ptr,\n-\t\t\t\t end_location_ptr);\n-  }\n-\n-  jvmtiError GetLocalVariableTable (jmethodID method, jint *entry_count_ptr,\n-\t\t\t\t    jvmtiLocalVariableEntry **table_ptr)\n-  {\n-    return p->GetLocalVariableTable (this, method, entry_count_ptr,\n-\t\t\t\t     table_ptr);\n-  }\n-\n-  jvmtiError GetBytecodes (jmethodID method, jint *bytecode_count_ptr,\n-\t\t\t   unsigned char **bytecodes_ptr)\n-  {\n-    return p->GetBytecodes (this, method, bytecode_count_ptr,\n-\t\t\t    bytecodes_ptr);\n-  }\n-\n-  jvmtiError IsMethodNative (jmethodID method, jboolean *is_native_ptr)\n-  { return p->IsMethodNative (this, method, is_native_ptr); }\n-\n-  jvmtiError IsMethodSynthetic (jmethodID method, jboolean *is_synthetic_ptr)\n-  { return p->IsMethodSynthetic (this, method, is_synthetic_ptr); }\n-\n-  jvmtiError GetLoadedClasses (jint *class_count_ptr, jclass **classes_ptr)\n-  { return p->GetLoadedClasses (this, class_count_ptr, classes_ptr); }\n-\n-  jvmtiError GetClassLoaderClasses (jobject initiating_loader,\n-\t\t\t\t    jint *class_count_ptr,\n-\t\t\t\t    jclass **classes_ptr)\n-  {\n-    return p->GetClassLoaderClasses (this, initiating_loader,\n-\t\t\t\t     class_count_ptr, classes_ptr);\n-  }\n-\n-  jvmtiError PopFrame (jthread thread)\n-  { return p->PopFrame (this, thread); }\n-\n-  jvmtiError RedefineClasses (jint class_count,\n-\t\t\t      const jvmtiClassDefinition* class_definitions)\n-  { return p->RedefineClasses (this, class_count, class_definitions); }\n-\n-  jvmtiError GetVersionNumber (jint *version_ptr)\n-  { return p->GetVersionNumber (this, version_ptr); }\n-\n-  jvmtiError GetCapabilities (jvmtiCapabilities *capabilities_ptr)\n-  { return p->GetCapabilities (this, capabilities_ptr); }\n-\n-  jvmtiError GetSourceDebugExtension (jclass klass,\n-\t\t\t\t      char **source_debug_extension_ptr)\n-  {\n-    return p->GetSourceDebugExtension (this, klass,\n-\t\t\t\t       source_debug_extension_ptr);\n-  }\n-\n-  jvmtiError IsMethodObsolete (jmethodID method, jboolean *is_obsolete_ptr)\n-  { return p->IsMethodObsolete (this, method, is_obsolete_ptr); }\n-\n-\n-  jvmtiError SuspendThreadList (jint request_count,\n-\t\t\t\tconst jthread *request_list,\n-\t\t\t\tjvmtiError *results)\n-  { return p->SuspendThreadList (this, request_count, request_list, results); }\n-\n-  jvmtiError ResumeThreadList (jint request_count,\n-\t\t\t       const jthread *request_list,\n-\t\t\t       jvmtiError *results)\n-  { return p->ResumeThreadList (this, request_count, request_list, results); }\n-\n-  jvmtiError GetAllStackTraces (jint max_frame_count,\n-\t\t\t\tjvmtiStackInfo **stack_info_ptr,\n-\t\t\t\tjint *thread_count_ptr)\n-  {\n-    return p->GetAllStackTraces (this, max_frame_count, stack_info_ptr,\n-\t\t\t\t thread_count_ptr);\n-  }\n-\n-  jvmtiError GetThreadListStackTraces (jint thread_count,\n-\t\t\t\t       const jthread *thread_list,\n-\t\t\t\t       jint max_frame_count,\n-\t\t\t\t       jvmtiStackInfo **stack_info_ptr)\n-  {\n-    return p->GetThreadListStackTraces (this, thread_count, thread_list,\n-\t\t\t\t\tmax_frame_count, stack_info_ptr);\n-  }\n-\n-  jvmtiError GetThreadLocalStorage (jthread thread, void **data_ptr)\n-  { return p->GetThreadLocalStorage (this, thread, data_ptr); }\n-\n-  jvmtiError SetThreadLocalStorage (jthread thread, const void *data)\n-  { return p->SetThreadLocalStorage (this, thread, data); }\n-\n-  jvmtiError GetStackTrace (jthread thread, jint start_depth,\n-\t\t\t    jint max_frame_count,\n-\t\t\t    jvmtiFrameInfo *frame_buffer, jint *count_ptr)\n-  {\n-    return p->GetStackTrace (this, thread, start_depth, max_frame_count,\n-\t\t\t     frame_buffer, count_ptr);\n-  }\n-\n-  jvmtiError GetTag (jobject object, jlong *tag_ptr)\n-  { return p->GetTag (this, object, tag_ptr); }\n-\n-  jvmtiError SetTag (jobject object, jlong tag)\n-  { return p->SetTag (this, object, tag); }\n-\n-  jvmtiError ForceGarbageCollection (void)\n-  { return p->ForceGarbageCollection (this); }\n-\n-  jvmtiError IterateOverObjectsReachableFromObject (jobject object,\n-\t\t\t\t\t\t    jvmtiObjectReferenceCallback object_reference_callback,\n-\t\t\t\t\t\t    void *user_data)\n-  {\n-    return p->IterateOverObjectsReachableFromObject (this, object,\n-\t\t\t\t\t\t     object_reference_callback,\n-\t\t\t\t\t\t     user_data);\n-  }\n-\n-  jvmtiError IterateOverReachableObjects (jvmtiHeapRootCallback heap_root_callback,\n-\t\t\t\t\t  jvmtiStackReferenceCallback stack_ref_callback,\n-\t\t\t\t\t  jvmtiObjectReferenceCallback object_ref_callback,\n-\t\t\t\t\t  void *user_data)\n-  {\n-    return p->IterateOverReachableObjects (this, heap_root_callback,\n-\t\t\t\t\t   stack_ref_callback,\n-\t\t\t\t\t   object_ref_callback,\n-\t\t\t\t\t   user_data);\n-  }\n-\n-  jvmtiError IterateOverHeap (jvmtiHeapObjectFilter object_filter,\n-\t\t\t      jvmtiHeapObjectCallback heap_object_callback,\n-\t\t\t      void *user_data)\n-  {\n-    return p->IterateOverHeap (this, object_filter, heap_object_callback,\n-\t\t\t       user_data);\n-  }\n-\n-  jvmtiError IterateOverInstanceOfClass (jclass klass,\n-\t\t\t\t\t jvmtiHeapObjectFilter object_filter,\n-\t\t\t\t\t jvmtiHeapObjectCallback heap_object_callback,\n-\t\t\t\t\t void *user_data)\n-  {\n-    return p->IterateOverInstanceOfClass (this, klass, object_filter,\n-\t\t\t\t\t  heap_object_callback, user_data);\n-  }\n-\n-  jvmtiError GetObjectsWithTags (jint tag_count, const jlong *tags,\n-\t\t\t\t jint *count_ptr, jobject **object_result_ptr,\n-\t\t\t\t jlong **tag_result_ptr)\n-  {\n-    return p->GetObjectsWithTags (this, tag_count, tags, count_ptr,\n-\t\t\t\t  object_result_ptr, tag_result_ptr);\n-  }\n-\n-  jvmtiError SetJNIFunctionTable (const jniNativeInterface *function_table)\n-  { return p->SetJNIFunctionTable (this, function_table); }\n-\n-  jvmtiError GetJNIFunctionTable (jniNativeInterface **function_table_ptr)\n-  { return p->GetJNIFunctionTable (this, function_table_ptr); }\n-\n-  jvmtiError SetEventCallbacks (const jvmtiEventCallbacks *callbacks,\n-\t\t\t\tjint size_of_callbacks)\n-  { return p->SetEventCallbacks (this, callbacks, size_of_callbacks); }\n-\n-  jvmtiError GenerateEvents (jvmtiEvent event_type)\n-  { return p->GenerateEvents (this, event_type); }\n-\n-  jvmtiError GetExtensionFunctions (jint *extension_count_ptr,\n-\t\t\t\t    jvmtiExtensionFunctionInfo **extensions)\n-  { return p->GetExtensionFunctions (this, extension_count_ptr, extensions); }\n-\n-  jvmtiError GetExtensionEvents (jint *extension_count_ptr,\n-\t\t\t\t jvmtiExtensionEventInfo **extensions)\n-  { return p->GetExtensionEvents (this, extension_count_ptr, extensions); }\n-\n-  jvmtiError SetExtensionEventCallback (jint extension_event_index,\n-\t\t\t\t\tjvmtiExtensionEvent callback)\n-  {\n-    return p->SetExtensionEventCallback (this, extension_event_index,\n-\t\t\t\t\t callback);\n-  }\n-\n-  jvmtiError DisposeEnvironment (void)\n-  { return p->DisposeEnvironment (this); }\n-\n-  jvmtiError GetErrorName (jvmtiError error, char **name_ptr)\n-  { return p->GetErrorName (this, error, name_ptr); }\n-\n-  jvmtiError GetJLocationFormat (jvmtiJlocationFormat *format_ptr)\n-  { return p->GetJLocationFormat (this, format_ptr); }\n-\n-  jvmtiError GetSystemProperties (jint *count_ptr, char ***property_ptr)\n-  { return p->GetSystemProperties (this, count_ptr, property_ptr); }\n-\n-  jvmtiError GetSystemProperty (const char *property, char **value_ptr)\n-  { return p->GetSystemProperty (this, property, value_ptr); }\n-\n-  jvmtiError SetSystemProperty (const char *property, const char *value)\n-  { return p->SetSystemProperty (this, property, value); }\n-\n-  jvmtiError GetPhase (jvmtiPhase *phase_ptr)\n-  { return p->GetPhase (this, phase_ptr); }\n-\n-  jvmtiError GetCurrentThreadCpuTimerInfo (jvmtiTimerInfo *info_ptr)\n-  { return p->GetCurrentThreadCpuTimerInfo (this, info_ptr); }\n-\n-  jvmtiError GetCurrentThreadCpuTime (jlong *nanos_ptr)\n-  { return p->GetCurrentThreadCpuTime (this, nanos_ptr); }\n-\n-  jvmtiError GetThreadCpuTimerInfo (jvmtiTimerInfo *info_ptr)\n-  { return p->GetThreadCpuTimerInfo (this, info_ptr); }\n-\n-  jvmtiError GetThreadCpuTime (jthread thread, jlong *nanos_ptr)\n-  { return p->GetThreadCpuTime (this, thread, nanos_ptr); }\n-\n-  jvmtiError GetTimerInfo (jvmtiTimerInfo *info_ptr)\n-  { return p->GetTimerInfo (this, info_ptr); }\n-\n-  jvmtiError GetTime (jlong *nanos_ptr)\n-  {return p->GetTime (this, nanos_ptr); }\n-\n-  jvmtiError GetPotentialCapabilities (jvmtiCapabilities *capabilities_ptr)\n-  { return p->GetPotentialCapabilities (this, capabilities_ptr); }\n-\n-  jvmtiError AddCapabilities (const jvmtiCapabilities *capabilities_ptr)\n-  { return p->AddCapabilities (this, capabilities_ptr); }\n-\n-  jvmtiError RelinquishCapabilities (const jvmtiCapabilities *capabilities_ptr)\n-  { return p->RelinquishCapabilities (this, capabilities_ptr); }\n-\n-  jvmtiError GetAvailableProcessors (jint *processor_count_ptr)\n-  { return p->GetAvailableProcessors (this, processor_count_ptr); }\n-\n-  jvmtiError GetEnvironmentLocalStorage (void **data_ptr)\n-  { return p->GetEnvironmentLocalStorage (this, data_ptr); }\n-\n-  jvmtiError SetEnvironmentLocalStorage (const void *data)\n-  { return p->SetEnvironmentLocalStorage (this, data); }\n-\n-  jvmtiError AddToBootstrapClassLoaderSearch (const char *segment)\n-  { return p->AddToBootstrapClassLoaderSearch (this, segment); }\n-\n-  jvmtiError SetVerboseFlag (jvmtiVerboseFlag flag, jboolean value)\n-  { return p->SetVerboseFlag (this, flag, value); }\n-\n-  jvmtiError GetObjectSize (jobject object, jlong *size_ptr)\n-  { return p->GetObjectSize (this, object, size_ptr); }\n-};\n-#endif /* __cplusplus */\n-\n-/*\n- * Miscellaneous flags, constants, etc\n- */\n-\n-/* Class status flags */\n-#define JVMTI_CLASS_STATUS_VERIFIED 1\n-#define JVMTI_CLASS_STATUS_PREPARED 2\n-#define JVMTI_CLASS_STATUS_INITIALIZED 4\n-#define JVMTI_CLASS_STATUS_ERROR 8\n-#define JVMTI_CLASS_STATUS_ARRAY 16\n-#define JVMTI_CLASS_STATUS_PRIMITIVE 32\n-\n-/* Thread state flags */\n-#define JVMTI_THREAD_STATE_ALIVE 0x0001\n-#define JVMTI_THREAD_STATE_TERMINATED 0x0002\n-#define JVMTI_THREAD_STATE_RUNNABLE 0x0004\n-#define JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER 0x0400\n-#define JVMTI_THREAD_STATE_WAITING 0x0080\n-#define JVMTI_THREAD_STATE_WAITING_INDEFINITELY 0x0010\n-#define JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT 0x0020\n-#define JVMTI_THREAD_STATE_SLEEPING 0x0040\n-#define JVMTI_THREAD_STATE_IN_OBJECT_WAIT 0x0100\n-#define JVMTI_THREAD_STATE_PARKED 0x0200\n-#define JVMTI_THREAD_STATE_SUSPENDED 0x100000\n-#define JVMTI_THREAD_STATE_INTERRUPTED 0x200000\n-#define JVMTI_THREAD_STATE_IN_NATIVE 0x400000\n-#define JVMTI_THREAD_STATE_VENDOR_1 0x10000000\n-#define JVMTI_THREAD_STATE_VENDOR_2 0x20000000\n-#define JVMTI_THREAD_STATE_VENDOR_3 0x40000000\n-\n-/* java.lang.Thread.State conversion masks */\n-#define JVMTI_JAVA_LANG_THREAD_STATE_MASK\t\t\\\n-  (JVMTI_THREAD_STATE_TERMINATED\t\t\t\\\n-   | JVMTI_THREAD_STATE_ALIVE\t\t\t\t\\\n-   | JVMTI_THREAD_STATE_RUNNABLE\t\t\t\\\n-   | JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER\t\\\n-   | JVMTI_THREAD_STATE_WAITING\t\t\t\t\\\n-   | JVMTI_THREAD_STATE_WAITING_INDEFINITELY\t\t\\\n-   | JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT)\n-#define JVMTI_JAVA_LANG_THREAD_STATE_NEW 0\n-#define JVMTI_JAVA_LANG_THREAD_STATE_TERMINATED JVMTI_THREAD_STATE_TERMINATED\n-#define JVMTI_JAVA_LANG_THREAD_STATE_RUNNABLE \\\n-  (JVMTI_THREAD_STATE_ALIVE\t\t      \\\n-   | JVMTI_THREAD_STATE_RUNNABLE)\n-#define JVMTI_JAVA_LANG_THREAD_STATE_BLOCKED\t\\\n-  (JVMTI_THREAD_STATE_ALIVE\t\t\t\\\n-   | JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER)\n-#define JVMTI_JAVA_LANG_THREAD_STATE_WAITING\t\\\n-  (JVMTI_THREAD_STATE_ALIVE\t\t\t\\\n-   | JVMTI_THREAD_STATE_WAITING\t\t\t\\\n-   | JVMTI_THREAD_STATE_WAITING_INDEFINITELY)\n-#define JVMTI_JAVA_LANG_THREAD_STATE_TIMED_WAITING \\\n-  (JVMTI_THREAD_STATE_ALIVE\t\t\t   \\\n-   | JVMTI_THREAD_STATE_WAITING\t\t\t   \\\n-   | JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT)\n-\n-/* Thread priorities */\n-#define JVMTI_THREAD_MIN_PRIORITY 1\n-#define JVMTI_THREAD_NORM_PRIORITY 5\n-#define JVMTI_THREAD_MAX_PRIORITY 10\n-\n-/* Keep c-font-lock-extra-types in order: JNI followed by JVMTI,\n-   all in alphabetical order */\n-/* Local Variables: */\n-/* c-font-lock-extra-types: (\"\\\\sw+_t\"\n-   \"JNIEnv\" \"JNINativeMethod\" \"JavaVM\" \"JavaVMOption\" \"jarray\"\n-   \"jboolean\" \"jbooleanArray\" \"jbyte\" \"jbyteArray\" \"jchar\"  \"jcharArray\"\n-   \"jclass\" \"jdouble\" \"jdoubleArray\" \"jfieldID\" \"jfloat\" \"jfloatArray\"\n-   \"jint\" \"jintArray\" \"jlong\" \"jlongArray\" \"jmethodID\" \"jobject\" \"jstring\" \"jthrowable\"\n-   \"jvalue\" \"jweak\"\n-   \"jvmtiEnv\" \"jvmtiError\"\n-   \"jthread\" \"jthreadGroup\" \"jlocation\" \"jrawMonitorID\") */\n-/* End: */\n-#endif /* !_CLASSPATH_JVMTI_H */"}]}