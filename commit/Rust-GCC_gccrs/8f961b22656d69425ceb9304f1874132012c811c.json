{"sha": "8f961b22656d69425ceb9304f1874132012c811c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY5NjFiMjI2NTZkNjk0MjVjZWI5MzA0ZjE4NzQxMzIwMTJjODExYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2012-01-11T18:58:30Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2012-01-11T18:58:30Z"}, "message": "gcov.c (STRING_SIZE): Remove.\n\n\t* gcov.c (STRING_SIZE): Remove.\n\t(generate_results): Erase annotations for source files with no\n\tcoverage information.\n\t(read_line): New.\n\t(output_lines): Use it.\n\nFrom-SVN: r183105", "tree": {"sha": "192ff47d589a0a7a301a81e60ea26b9e867a2846", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/192ff47d589a0a7a301a81e60ea26b9e867a2846"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f961b22656d69425ceb9304f1874132012c811c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f961b22656d69425ceb9304f1874132012c811c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f961b22656d69425ceb9304f1874132012c811c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f961b22656d69425ceb9304f1874132012c811c/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3ad065efe1afb5f3fdb60be75416ca9af94b67b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ad065efe1afb5f3fdb60be75416ca9af94b67b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ad065efe1afb5f3fdb60be75416ca9af94b67b0"}], "stats": {"total": 123, "additions": 77, "deletions": 46}, "files": [{"sha": "28624d1546457157592e77b77b92cff4ce025ca8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f961b22656d69425ceb9304f1874132012c811c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f961b22656d69425ceb9304f1874132012c811c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f961b22656d69425ceb9304f1874132012c811c", "patch": "@@ -1,3 +1,11 @@\n+2012-01-11  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* gcov.c (STRING_SIZE): Remove.\n+\t(generate_results): Erase annotations for source files with no\n+\tcoverage information.\n+\t(read_line): New.\n+\t(output_lines): Use it.\n+\n 2012-01-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gimple.h (gimplify_body): Remove first argument."}, {"sha": "97071115be5e606dccaecf9d0f65f19324404f8c", "filename": "gcc/gcov.c", "status": "modified", "additions": 69, "deletions": 46, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f961b22656d69425ceb9304f1874132012c811c/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f961b22656d69425ceb9304f1874132012c811c/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=8f961b22656d69425ceb9304f1874132012c811c", "patch": "@@ -64,8 +64,6 @@ along with Gcov; see the file COPYING3.  If not see\n \n /* This is the size of the buffer used to read in source file lines.  */\n \n-#define STRING_SIZE 200\n-\n struct function_info;\n struct block_info;\n struct source_info;\n@@ -708,24 +706,33 @@ generate_results (const char *file_name)\n       function_summary (&src->coverage, \"File\");\n       total_lines += src->coverage.lines;\n       total_executed += src->coverage.lines_executed;\n-      if (flag_gcov_file && src->coverage.lines)\n+      if (flag_gcov_file)\n \t{\n \t  char *gcov_file_name\n \t    = make_gcov_file_name (file_name, src->coverage.name);\n-\t  FILE *gcov_file = fopen (gcov_file_name, \"w\");\n \n-\t  if (gcov_file)\n+\t  if (src->coverage.lines)\n \t    {\n-\t      fnotice (stdout, \"Creating '%s'\\n\", gcov_file_name);\n-\t      output_lines (gcov_file, src);\n-\t      if (ferror (gcov_file))\n+\t      FILE *gcov_file = fopen (gcov_file_name, \"w\");\n+\n+\t      if (gcov_file)\n+\t\t{\n+\t\t  fnotice (stdout, \"Creating '%s'\\n\", gcov_file_name);\n+\t\t  output_lines (gcov_file, src);\n+\t\t  if (ferror (gcov_file))\n \t\t    fnotice (stderr, \"Error writing output file '%s'\\n\",\n \t\t\t     gcov_file_name);\n-\t      fclose (gcov_file);\n+\t\t  fclose (gcov_file);\n+\t\t}\n+\t      else\n+\t\tfnotice (stderr, \"Could not open output file '%s'\\n\",\n+\t\t\t gcov_file_name);\n \t    }\n \t  else\n-\t    fnotice (stderr, \"Could not open output file '%s'\\n\",\n-\t\t     gcov_file_name);\n+\t    {\n+\t      unlink (gcov_file_name);\n+\t      fnotice (stdout, \"Removing '%s'\\n\", gcov_file_name);\n+\t    }\n \t  free (gcov_file_name);\n \t}\n       fnotice (stdout, \"\\n\");\n@@ -2188,6 +2195,44 @@ output_branch_count (FILE *gcov_file, int ix, const arc_t *arc)\n \n }\n \n+static const char *\n+read_line (FILE *file)\n+{\n+  static char *string;\n+  static size_t string_len;\n+  size_t pos = 0;\n+  char *ptr;\n+\n+  if (!string_len)\n+    {\n+      string_len = 200;\n+      string = XNEWVEC (char, string_len);\n+    }\n+\n+  while ((ptr = fgets (string + pos, string_len - pos, file)))\n+    {\n+      size_t len = strlen (string + pos);\n+\n+      if (string[pos + len - 1] == '\\n')\n+\t{\n+\t  string[pos + len - 1] = 0;\n+\t  return string;\n+\t}\n+      pos += len;\n+      ptr = XNEWVEC (char, string_len * 2);\n+      if (ptr)\n+\t{\n+\t  memcpy (ptr, string, pos);\n+\t  string = ptr;\n+\t  string_len += 2;\n+\t}\n+      else\n+\tpos = 0;\n+    }\n+      \n+  return pos ? string : NULL;\n+}\n+\n /* Read in the source file one line at a time, and output that line to\n    the gcov file preceded by its execution count and other\n    information.  */\n@@ -2198,8 +2243,7 @@ output_lines (FILE *gcov_file, const source_t *src)\n   FILE *source_file;\n   unsigned line_num;\t/* current line number.  */\n   const line_t *line;           /* current line info ptr.  */\n-  char string[STRING_SIZE];     /* line buffer.  */\n-  char const *retval = \"\";\t/* status of source file reading.  */\n+  const char *retval = \"\";\t/* status of source file reading.  */\n   function_t *fn = NULL;\n \n   fprintf (gcov_file, \"%9s:%5d:Source:%s\\n\", \"-\", 0, src->coverage.name);\n@@ -2246,31 +2290,20 @@ output_lines (FILE *gcov_file, const source_t *src)\n \t  fprintf (gcov_file, \"\\n\");\n \t}\n \n+      if (retval)\n+\tretval = read_line (source_file);\n+\n       /* For lines which don't exist in the .bb file, print '-' before\n \t the source line.  For lines which exist but were never\n-\t executed, print '#####' before the source line.  Otherwise,\n-\t print the execution count before the source line.  There are\n-\t 16 spaces of indentation added before the source line so that\n-\t tabs won't be messed up.  */\n-      fprintf (gcov_file, \"%9s:%5u:\",\n+\t executed, print '#####' or '=====' before the source line.\n+\t Otherwise, print the execution count before the source line.\n+\t There are 16 spaces of indentation added before the source\n+\t line so that tabs won't be messed up.  */\n+      fprintf (gcov_file, \"%9s:%5u:%s\\n\",\n \t       !line->exists ? \"-\" : line->count\n \t       ? format_gcov (line->count, 0, -1)\n-\t       : line->unexceptional ? \"#####\" : \"=====\", line_num);\n-\n-      if (retval)\n-\t{\n-\t  /* Copy source line.  */\n-\t  do\n-\t    {\n-\t      retval = fgets (string, STRING_SIZE, source_file);\n-\t      if (!retval)\n-\t\tbreak;\n-\t      fputs (retval, gcov_file);\n-\t    }\n-\t  while (!retval[0] || retval[strlen (retval) - 1] != '\\n');\n-\t}\n-      if (!retval)\n-\tfputs (\"/*EOF*/\\n\", gcov_file);\n+\t       : line->unexceptional ? \"#####\" : \"=====\", line_num,\n+\t       retval ? retval : \"/*EOF*/\");\n \n       if (flag_all_blocks)\n \t{\n@@ -2306,18 +2339,8 @@ output_lines (FILE *gcov_file, const source_t *src)\n      last line of code.  */\n   if (retval)\n     {\n-      for (; (retval = fgets (string, STRING_SIZE, source_file)); line_num++)\n-\t{\n-\t  fprintf (gcov_file, \"%9s:%5u:%s\", \"-\", line_num, retval);\n-\n-\t  while (!retval[0] || retval[strlen (retval) - 1] != '\\n')\n-\t    {\n-\t      retval = fgets (string, STRING_SIZE, source_file);\n-\t      if (!retval)\n-\t\tbreak;\n-\t      fputs (retval, gcov_file);\n-\t    }\n-\t}\n+      for (; (retval = read_line (source_file)); line_num++)\n+\tfprintf (gcov_file, \"%9s:%5u:%s\\n\", \"-\", line_num, retval);\n     }\n \n   if (source_file)"}]}