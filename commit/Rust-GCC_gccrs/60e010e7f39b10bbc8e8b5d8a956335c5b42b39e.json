{"sha": "60e010e7f39b10bbc8e8b5d8a956335c5b42b39e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBlMDEwZTdmMzliMTBiYmM4ZThiNWQ4YTk1NjMzNWM1YjQyYjM5ZQ==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2020-05-03T22:45:37Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-06T11:34:51Z"}, "message": "[Ada] Wording problems with predicates (AI12-0099)\n\ngcc/ada/\n\n\t* sem_aux.adb: Add a with clause for Nlists.\n\t(Nearest_Ancestor): Test for the case of concurrent\n\ttypes (testing for both Is_Concurrent_Type and\n\tIs_Concurrent_Record_Type), and return the first ancestor in the\n\tInterfaces list if present (otherwise will return Empty if no\n\tinterfaces).\n\t* sem_ch13.adb (Build_Predicate_Functions): Add a ??? comment\n\tabout missing handling for adding predicates when they can be\n\tinherited from multiple progenitors.", "tree": {"sha": "36a3a6a06a9fbe2e26705538550a0532a1953752", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36a3a6a06a9fbe2e26705538550a0532a1953752"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60e010e7f39b10bbc8e8b5d8a956335c5b42b39e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60e010e7f39b10bbc8e8b5d8a956335c5b42b39e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60e010e7f39b10bbc8e8b5d8a956335c5b42b39e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60e010e7f39b10bbc8e8b5d8a956335c5b42b39e/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37e43fe13e163799618f5e2eb8f84cdcfa4e4f3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37e43fe13e163799618f5e2eb8f84cdcfa4e4f3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37e43fe13e163799618f5e2eb8f84cdcfa4e4f3b"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "77f212c2c157141087c6961574d66abecb7024dc", "filename": "gcc/ada/sem_aux.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60e010e7f39b10bbc8e8b5d8a956335c5b42b39e/gcc%2Fada%2Fsem_aux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60e010e7f39b10bbc8e8b5d8a956335c5b42b39e/gcc%2Fada%2Fsem_aux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.adb?ref=60e010e7f39b10bbc8e8b5d8a956335c5b42b39e", "patch": "@@ -32,6 +32,7 @@\n \n with Atree;  use Atree;\n with Einfo;  use Einfo;\n+with Nlists; use Nlists;\n with Snames; use Snames;\n with Stand;  use Stand;\n with Uintp;  use Uintp;\n@@ -1375,6 +1376,18 @@ package body Sem_Aux is\n             end if;\n          end;\n \n+      --  If this is a concurrent declaration with a nonempty interface list,\n+      --  get the first progenitor. Account for case of a record type created\n+      --  for a concurrent type (which is the only case that seems to occur\n+      --  in practice).\n+\n+      elsif Nkind (D) = N_Full_Type_Declaration\n+        and then (Is_Concurrent_Type (Defining_Identifier (D))\n+                   or else Is_Concurrent_Record_Type (Defining_Identifier (D)))\n+        and then Is_Non_Empty_List (Interface_List (Type_Definition (D)))\n+      then\n+         return Entity (First (Interface_List (Type_Definition (D))));\n+\n       --  If derived type and private type, get the full view to find who we\n       --  are derived from.\n "}, {"sha": "c6a26146868665b70e412bfef10ef5d3e7af6964", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60e010e7f39b10bbc8e8b5d8a956335c5b42b39e/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60e010e7f39b10bbc8e8b5d8a956335c5b42b39e/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=60e010e7f39b10bbc8e8b5d8a956335c5b42b39e", "patch": "@@ -9584,6 +9584,9 @@ package body Sem_Ch13 is\n       --  Add predicates for ancestor if present. These must come before the\n       --  ones for the current type, as required by AI12-0071-1.\n \n+      --  Looks like predicates aren't added for case of inheriting from\n+      --  multiple progenitors???\n+\n       declare\n          Atyp : Entity_Id;\n       begin"}]}