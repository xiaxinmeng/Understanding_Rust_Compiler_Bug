{"sha": "49276efb07ef18098c0f72970acf523a1fc31eb8", "node_id": "C_kwDOANBUbNoAKDQ5Mjc2ZWZiMDdlZjE4MDk4YzBmNzI5NzBhY2Y1MjNhMWZjMzFlYjg", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-06-24T09:54:08Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-06-30T14:48:18Z"}, "message": "ast: Keep ConstGenericArg as default value for ConstGenericParam", "tree": {"sha": "280ad30fe8ef571ebd5be9b5001a96af3f5338cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/280ad30fe8ef571ebd5be9b5001a96af3f5338cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49276efb07ef18098c0f72970acf523a1fc31eb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49276efb07ef18098c0f72970acf523a1fc31eb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49276efb07ef18098c0f72970acf523a1fc31eb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49276efb07ef18098c0f72970acf523a1fc31eb8/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81abc8623cb75fa18315c65e94c5965ec36fdb54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81abc8623cb75fa18315c65e94c5965ec36fdb54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81abc8623cb75fa18315c65e94c5965ec36fdb54"}], "stats": {"total": 164, "additions": 87, "deletions": 77}, "files": [{"sha": "d98a7cfeedb5e9277756e1a4a5d03dc7e2a114ea", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49276efb07ef18098c0f72970acf523a1fc31eb8/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49276efb07ef18098c0f72970acf523a1fc31eb8/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=49276efb07ef18098c0f72970acf523a1fc31eb8", "patch": "@@ -2365,8 +2365,8 @@ ConstGenericParam::as_string () const\n   std::string str (\"ConstGenericParam: \");\n   str += \"const \" + name + \": \" + type->as_string ();\n \n-  if (default_value)\n-    str += \" = \" + default_value->as_string ();\n+  if (has_default_value ())\n+    str += \" = \" + get_default_value ().as_string ();\n \n   return str;\n }"}, {"sha": "461a2460f8f5f5566c2c87d89250930d9e027717", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49276efb07ef18098c0f72970acf523a1fc31eb8/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49276efb07ef18098c0f72970acf523a1fc31eb8/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=49276efb07ef18098c0f72970acf523a1fc31eb8", "patch": "@@ -1344,75 +1344,6 @@ class LifetimeParam : public GenericParam\n   }\n };\n \n-/**\n- * Representation of const generic parameters\n- */\n-class ConstGenericParam : public GenericParam\n-{\n-  /* Name of the parameter */\n-  Identifier name;\n-\n-  /* Mandatory type of the const parameter - a null pointer is an error */\n-  std::unique_ptr<AST::Type> type;\n-\n-  /**\n-   * Default value for the const generic parameter - nullptr indicates a lack\n-   * of default value, not an error, as these errors are reported during\n-   * parsing.\n-   */\n-  std::unique_ptr<AST::Expr> default_value;\n-\n-  Attribute outer_attr;\n-  Location locus;\n-\n-public:\n-  ConstGenericParam (Identifier name, std::unique_ptr<AST::Type> type,\n-\t\t     std::unique_ptr<AST::Expr> default_value,\n-\t\t     Attribute outer_attr, Location locus)\n-    : name (name), type (std::move (type)),\n-      default_value (std::move (default_value)), outer_attr (outer_attr),\n-      locus (locus)\n-  {}\n-\n-  ConstGenericParam (const ConstGenericParam &other)\n-    : GenericParam (), name (other.name), type (other.type->clone_type ()),\n-      outer_attr (other.outer_attr), locus (other.locus)\n-  {\n-    if (other.default_value)\n-      default_value = other.default_value->clone_expr ();\n-  }\n-\n-  bool has_type () { return type != nullptr; }\n-  bool has_default_value () { return default_value != nullptr; }\n-\n-  const Identifier &get_name () const { return name; }\n-\n-  std::unique_ptr<AST::Type> &get_type ()\n-  {\n-    rust_assert (has_type ());\n-\n-    return type;\n-  }\n-\n-  std::unique_ptr<AST::Expr> &get_default_value () { return default_value; }\n-\n-  std::string as_string () const override;\n-\n-  void accept_vis (ASTVisitor &vis) override;\n-\n-  Location get_locus () const override final { return locus; }\n-\n-  Kind get_kind () const override final { return Kind::Const; }\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  ConstGenericParam *clone_generic_param_impl () const override\n-  {\n-    return new ConstGenericParam (*this);\n-  }\n-};\n-\n // A macro item AST node - abstract base class\n class MacroItem : public Item\n {"}, {"sha": "36f1c0478cb2ff724593596125876aa650c782e2", "filename": "gcc/rust/ast/rust-path.h", "status": "modified", "additions": 76, "deletions": 1, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49276efb07ef18098c0f72970acf523a1fc31eb8/gcc%2Frust%2Fast%2Frust-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49276efb07ef18098c0f72970acf523a1fc31eb8/gcc%2Frust%2Fast%2Frust-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-path.h?ref=49276efb07ef18098c0f72970acf523a1fc31eb8", "patch": "@@ -191,7 +191,12 @@ class ConstGenericArg\n \n   Kind get_kind () const { return kind; }\n \n-  std::unique_ptr<AST::Expr> &get_expression () { return expression; }\n+  const std::unique_ptr<AST::Expr> &get_expression () const\n+  {\n+    rust_assert (kind == Kind::Clear);\n+\n+    return expression;\n+  }\n \n   std::string as_string () const\n   {\n@@ -241,6 +246,76 @@ class ConstGenericArg\n   Location locus;\n };\n \n+/**\n+ * Representation of const generic parameters\n+ */\n+class ConstGenericParam : public GenericParam\n+{\n+  /* Name of the parameter */\n+  Identifier name;\n+\n+  /* Mandatory type of the const parameter - a null pointer is an error */\n+  std::unique_ptr<AST::Type> type;\n+\n+  /**\n+   * Default value for the const generic parameter\n+   */\n+  ConstGenericArg default_value;\n+\n+  Attribute outer_attr;\n+  Location locus;\n+\n+public:\n+  ConstGenericParam (Identifier name, std::unique_ptr<AST::Type> type,\n+\t\t     ConstGenericArg default_value, Attribute outer_attr,\n+\t\t     Location locus)\n+    : name (name), type (std::move (type)),\n+      default_value (std::move (default_value)), outer_attr (outer_attr),\n+      locus (locus)\n+  {}\n+\n+  ConstGenericParam (const ConstGenericParam &other)\n+    : GenericParam (), name (other.name), type (other.type->clone_type ()),\n+      default_value (other.default_value), outer_attr (other.outer_attr),\n+      locus (other.locus)\n+  {}\n+\n+  bool has_type () const { return type != nullptr; }\n+  bool has_default_value () const { return !default_value.is_error (); }\n+\n+  const Identifier &get_name () const { return name; }\n+\n+  std::unique_ptr<AST::Type> &get_type ()\n+  {\n+    rust_assert (has_type ());\n+\n+    return type;\n+  }\n+\n+  const ConstGenericArg &get_default_value () const\n+  {\n+    rust_assert (has_default_value ());\n+\n+    return default_value;\n+  }\n+\n+  std::string as_string () const override;\n+\n+  void accept_vis (ASTVisitor &vis) override;\n+\n+  Location get_locus () const override final { return locus; }\n+\n+  Kind get_kind () const override final { return Kind::Const; }\n+\n+protected:\n+  /* Use covariance to implement clone function as returning this object rather\n+   * than base */\n+  ConstGenericParam *clone_generic_param_impl () const override\n+  {\n+    return new ConstGenericParam (*this);\n+  }\n+};\n+\n // Generic arguments allowed in each path expression segment - inline?\n struct GenericArgs\n {"}, {"sha": "2bcf0ee23c4a8e07e79f905d625104295f2a3efc", "filename": "gcc/rust/hir/rust-ast-lower-type.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49276efb07ef18098c0f72970acf523a1fc31eb8/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49276efb07ef18098c0f72970acf523a1fc31eb8/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h?ref=49276efb07ef18098c0f72970acf523a1fc31eb8", "patch": "@@ -376,10 +376,14 @@ class ASTLowerGenericParam : public ASTLoweringBase\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n     auto type = ASTLoweringType::translate (param.get_type ().get ());\n-    auto default_expr\n-      = param.has_default_value ()\n-\t  ? ASTLoweringExpr::translate (param.get_default_value ().get ())\n-\t  : nullptr;\n+    // FIXME: Arthur: Remove the second guard once we disambiguate in the\n+    // resolveer\n+    HIR::Expr *default_expr = nullptr;\n+    if (param.has_default_value ()\n+\t&& param.get_default_value ().get_kind ()\n+\t     == AST::ConstGenericArg::Kind::Clear)\n+      default_expr = ASTLoweringExpr::translate (\n+\tparam.get_default_value ().get_expression ().get ());\n \n     translated\n       = new HIR::ConstGenericParam (param.get_name (),"}, {"sha": "6a1a3a586931aa4ed1523f2c43228ce8fad9f138", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49276efb07ef18098c0f72970acf523a1fc31eb8/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49276efb07ef18098c0f72970acf523a1fc31eb8/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=49276efb07ef18098c0f72970acf523a1fc31eb8", "patch": "@@ -2901,7 +2901,7 @@ Parser<ManagedTokenSource>::parse_generic_param (EndTokenPred is_end_token)\n \n \tparam = std::unique_ptr<AST::ConstGenericParam> (\n \t  new AST::ConstGenericParam (name_token->get_str (), std::move (type),\n-\t\t\t\t      nullptr, std::move (outer_attrs),\n+\t\t\t\t      default_expr, std::move (outer_attrs),\n \t\t\t\t      token->get_locus ()));\n \n \tbreak;"}]}