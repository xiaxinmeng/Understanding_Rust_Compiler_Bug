{"sha": "7792bd8a9001f514e3b05d2c6d9e0813e8ef7d8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc5MmJkOGE5MDAxZjUxNGUzYjA1ZDJjNmQ5ZTA4MTNlOGVmN2Q4ZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-03-12T19:29:38Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-03-12T19:29:38Z"}, "message": "re PR c++/52299 (GCC warns on compile time division by zero erroneously)\n\n/cp\n2012-03-12  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/52299\n\t* pt.c (tsubst_copy_and_build, case COND_EXPR): Avoid bogus\n\tdivision by zero warnings.\n\n/testsuite\n2012-03-12  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/52299\n\t* g++.dg/warn/Wdiv-by-zero-bogus.C: New.\n\nFrom-SVN: r185264", "tree": {"sha": "4ee764061107dc0a9f733319c450c3d19c7e9dfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ee764061107dc0a9f733319c450c3d19c7e9dfa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7792bd8a9001f514e3b05d2c6d9e0813e8ef7d8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7792bd8a9001f514e3b05d2c6d9e0813e8ef7d8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7792bd8a9001f514e3b05d2c6d9e0813e8ef7d8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7792bd8a9001f514e3b05d2c6d9e0813e8ef7d8e/comments", "author": null, "committer": null, "parents": [{"sha": "a029a1543541b5231e2b7eba3ef1b30046234d36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a029a1543541b5231e2b7eba3ef1b30046234d36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a029a1543541b5231e2b7eba3ef1b30046234d36"}], "stats": {"total": 77, "additions": 71, "deletions": 6}, "files": [{"sha": "1a3ac83ac77ab7d0c5b3833cf3a5cdb33de311d7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7792bd8a9001f514e3b05d2c6d9e0813e8ef7d8e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7792bd8a9001f514e3b05d2c6d9e0813e8ef7d8e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7792bd8a9001f514e3b05d2c6d9e0813e8ef7d8e", "patch": "@@ -1,3 +1,9 @@\n+2012-03-12  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/52299\n+\t* pt.c (tsubst_copy_and_build, case COND_EXPR): Avoid bogus\n+\tdivision by zero warnings.\n+\n 2012-03-08  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* typeck.c (build_array_ref, cp_build_addr_expr_1, convert_ptrmem,"}, {"sha": "54d540d0f52be37dacb4ab8bb052b36a51f8093a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7792bd8a9001f514e3b05d2c6d9e0813e8ef7d8e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7792bd8a9001f514e3b05d2c6d9e0813e8ef7d8e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7792bd8a9001f514e3b05d2c6d9e0813e8ef7d8e", "patch": "@@ -13943,11 +13943,35 @@ tsubst_copy_and_build (tree t,\n       }\n \n     case COND_EXPR:\n-      return build_x_conditional_expr\n-\t(RECUR (TREE_OPERAND (t, 0)),\n-\t RECUR (TREE_OPERAND (t, 1)),\n-\t RECUR (TREE_OPERAND (t, 2)),\n-         complain);\n+      {\n+\ttree cond = RECUR (TREE_OPERAND (t, 0));\n+\ttree exp1, exp2;\n+\n+\tif (TREE_CODE (cond) == INTEGER_CST)\n+\t  {\n+\t    if (integer_zerop (cond))\n+\t      {\n+\t\t++c_inhibit_evaluation_warnings;\n+\t\texp1 = RECUR (TREE_OPERAND (t, 1));\n+\t\t--c_inhibit_evaluation_warnings;\n+\t\texp2 = RECUR (TREE_OPERAND (t, 2));\n+\t      }\n+\t    else\n+\t      {\n+\t\texp1 = RECUR (TREE_OPERAND (t, 1));\n+\t\t++c_inhibit_evaluation_warnings;\n+\t\texp2 = RECUR (TREE_OPERAND (t, 2));\n+\t\t--c_inhibit_evaluation_warnings;\n+\t      }\n+\t  }\n+\telse\n+\t  {\n+\t    exp1 = RECUR (TREE_OPERAND (t, 1));\n+\t    exp2 = RECUR (TREE_OPERAND (t, 2));\n+\t  }\n+\n+\treturn build_x_conditional_expr (cond, exp1, exp2, complain);\n+      }\n \n     case PSEUDO_DTOR_EXPR:\n       return finish_pseudo_destructor_expr"}, {"sha": "90b1197435978707195ebec215b894a812e495b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7792bd8a9001f514e3b05d2c6d9e0813e8ef7d8e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7792bd8a9001f514e3b05d2c6d9e0813e8ef7d8e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7792bd8a9001f514e3b05d2c6d9e0813e8ef7d8e", "patch": "@@ -1,3 +1,8 @@\n+2012-03-12  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/52299\n+\t* g++.dg/warn/Wdiv-by-zero-bogus.C: New.\n+\n 2012-03-12  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR tree-optimization/46728\n@@ -18,7 +23,7 @@\n \t* gcc.target/avr/torture/addr-space-0.h: New test.\n \t* gcc.target/avr/torture/addr-space-1.h: New test.\n \t* gcc.target/avr/torture/addr-space-x.h: New test.\n-\t\n+\n 2012-03-12  Andrew Pinski  <apinski@cavium.com>\n \n \t* gcc.dg/tree-ssa/phi-opt-7.c: New testcase."}, {"sha": "2157df30cbf4f8ad0d49c423f1da1877715c7ab0", "filename": "gcc/testsuite/g++.dg/warn/Wdiv-by-zero-bogus.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7792bd8a9001f514e3b05d2c6d9e0813e8ef7d8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdiv-by-zero-bogus.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7792bd8a9001f514e3b05d2c6d9e0813e8ef7d8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdiv-by-zero-bogus.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdiv-by-zero-bogus.C?ref=7792bd8a9001f514e3b05d2c6d9e0813e8ef7d8e", "patch": "@@ -0,0 +1,30 @@\n+// PR c++/52299\n+\n+template<unsigned x>\n+struct test0 {\n+  static const unsigned a_\n+  = x ? 10 / x : 10;\n+};\n+\n+template<unsigned x>\n+struct test1 {\n+  static const unsigned a_\n+  = !x ? 10 : 10 / x;\n+};\n+\n+template<bool x>\n+struct test2 {\n+  static const unsigned a_\n+  = x ? 10 / x : 10;\n+};\n+\n+template<bool x>\n+struct test3 {\n+  static const unsigned a_\n+  = !x ? 10 : 10 / x;\n+};\n+\n+unsigned i0 = test0<0>::a_;\n+unsigned i1 = test1<0>::a_;\n+unsigned i2 = test2<false>::a_;\n+unsigned i3 = test3<false>::a_;"}]}