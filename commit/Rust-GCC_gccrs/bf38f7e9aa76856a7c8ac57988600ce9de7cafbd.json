{"sha": "bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYzOGY3ZTlhYTc2ODU2YTdjOGFjNTc5ODg2MDBjZTlkZTdjYWZiZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-06-10T12:20:30Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-06-10T12:20:30Z"}, "message": "tree.def (OMP_SCAN): New tree code.\n\n\t* tree.def (OMP_SCAN): New tree code.\n\t* tree-core.h (enum omp_clause_code): Add OMP_CLAUSE_INCLUSIVE and\n\tOMP_CLAUSE_EXCLUSIVE.\n\t* tree.h (OMP_CLAUSES): Use OMP_SCAN instead of OMP_TASKGROUP.\n\t(OMP_SCAN_BODY, OMP_SCAN_CLAUSES): Define.\n\t* tree.c (omp_clause_num_ops, omp_clause_code_name): Add entries for\n\tOMP_CLAUSE_{IN,EX}CLUSIVE.\n\t(walk_tree_1): Handle OMP_CLAUSE_{IN,EX}CLUSIVE.\n\t* tree-nested.c (convert_nonlocal_reference_stmt,\n\tconvert_local_reference_stmt, convert_gimple_call): Handle\n\tGIMPLE_OMP_SCAN.\n\t* tree-pretty-print.c (dump_omp_clause): Handle\n\tOMP_CLAUSE_{IN,EX}CLUSIVE.\n\t(dump_generic_node): Handle OMP_SCAN.\n\t* gimple.def (GIMPLE_OMP_SCAN): New gimple code.\n\t* gimple.h (gomp_scan): New type.\n\t(is_a_helper <gomp_scan *>::test,\n\tis_a_helper <const gomp_scan *>::test): New templates.\n\t(gimple_build_omp_scan): Declare.\n\t(gimple_omp_scan_clauses, gimple_omp_scan_clauses_ptr,\n\tgimple_omp_scan_set_clauses): New inline functions.\n\t(CASE_GIMPLE_OMP): Add case GIMPLE_OMP_SCAN:.\n\t* gimple.c (gimple_build_omp_scan): New function.\n\t(gimple_copy): Handle GIMPLE_OMP_SCAN.\n\t* gimple-walk.c (walk_gimple_op, walk_gimple_stmt): Likewise.\n\t* gimple-pretty-print.c (dump_gimple_omp_block): Don't handle\n\tGIMPLE_OMP_TASKGROUP.\n\t(dump_gimple_omp_scan): New function.\n\t(pp_gimple_stmt_1): Handle GIMPLE_OMP_SCAN.\n\t* gimple-low.c (lower_stmt): Handle GIMPLE_OMP_SCAN.\n\t* tree-inline.c (remap_gimple_stmt, estimate_num_insns): Likewise.\n\t* gimplify.c (enum gimplify_omp_var_data): Add GOVD_REDUCTION_INSCAN.\n\t(is_gimple_stmt): Handle OMP_SCAN.\n\t(gimplify_scan_omp_clauses): Reject inscan reductions on constructs\n\tother than OMP_FOR or OMP_SIMD.  Handle OMP_CLAUSE_{IN,EX}CLUSIVE.\n\t(gimplify_adjust_omp_clauses): Diagnose inscan reductions not\n\tmentioned in nested #pragma omp scan.  Handle\n\tOMP_CLAUSE_{IN,EX}CLUSIVE.\n\t(gimplify_expr): Handle OMP_SCAN.\n\t* omp-low.c (check_omp_nesting_restrictions): For parent context,\n\tlook through GIMPLE_OMP_SCAN context.  Allow #pragma omp scan in\n\tsimd constructs.\n\t(scan_omp_1_stmt, lower_omp_1, diagnose_sb_1, diagnose_sb_2): Handle\n\tGIMPLE_OMP_SCAN.\nc-family/\n\t* c-pragma.h (enum pragma_kind): Add PRAGMA_OMP_SCAN.\n\t* c-pragma.c (omp_pragmas_simd): Add #pragma omp scan.\n\t* c-omp.c (c_omp_split_clauses): Diagnose inscan reductions on\n\tcombined/composite constructs where it is not allowed.  Copy over\n\tOMP_CLAUSE_REDUCTION_INSCAN.\nc/\n\t* c-parser.c (c_parser_pragma): Reject PRAGMA_OMP_SCAN.\n\t(c_parser_omp_clause_reduction): Don't sorry_at on inscan reductions.\n\t(c_parser_omp_scan_loop_body): New function.\n\t(c_parser_omp_for_loop): Call c_parser_omp_scan_loop_body if there are\n\tinscan reduction clauses.\n\t* c-typeck.c (c_finish_omp_clauses): Reject mixing inscan with\n\tnon-inscan reductions on the same construct, or inscan reductions with\n\tordered or schedule clauses, or inscan array reductions.\ncp/\n\t* parser.c (cp_parser_omp_clause_reduction): Don't sorry_at on inscan\n\treductions.\n\t(cp_parser_omp_scan_loop_body): New function.\n\t(cp_parser_omp_for_loop): Call cp_parser_omp_scan_loop_body if there\n\tare inscan reduction clauses.\n\t(cp_parser_pragma): Reject PRAGMA_OMP_SCAN.\n\t* semantics.c (finish_omp_clauses): Reject mixing inscan with\n\tnon-inscan reductions on the same construct, or inscan reductions with\n\tordered or schedule clauses, or inscan array reductions.\n\t* pt.c (tsubst_omp_clauses): Handle OMP_CLAUSE_{IN,EX}CLUSIVE.\n\t(tsubst_expr): Handle OMP_SCAN.\ntestsuite/\n\t* c-c++-common/gomp/scan-1.c: New test.\n\t* c-c++-common/gomp/scan-2.c: New test.\n\t* c-c++-common/gomp/scan-3.c: New test.\n\t* c-c++-common/gomp/scan-4.c: New test.\n\nFrom-SVN: r272117", "tree": {"sha": "9e298ccc80525cad1ce63b382a393a876b5071aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e298ccc80525cad1ce63b382a393a876b5071aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/comments", "author": null, "committer": null, "parents": [{"sha": "07ca30a0d76c970bbf59a4bce04be41fa297d213", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07ca30a0d76c970bbf59a4bce04be41fa297d213", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07ca30a0d76c970bbf59a4bce04be41fa297d213"}], "stats": {"total": 987, "additions": 957, "deletions": 30}, "files": [{"sha": "d5181995757dac6b31208a0fff88f27ba645df43", "filename": "gcc/ChangeLog", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -1,8 +1,55 @@\n+2019-06-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree.def (OMP_SCAN): New tree code.\n+\t* tree-core.h (enum omp_clause_code): Add OMP_CLAUSE_INCLUSIVE and\n+\tOMP_CLAUSE_EXCLUSIVE.\n+\t* tree.h (OMP_CLAUSES): Use OMP_SCAN instead of OMP_TASKGROUP.\n+\t(OMP_SCAN_BODY, OMP_SCAN_CLAUSES): Define.\n+\t* tree.c (omp_clause_num_ops, omp_clause_code_name): Add entries for\n+\tOMP_CLAUSE_{IN,EX}CLUSIVE.\n+\t(walk_tree_1): Handle OMP_CLAUSE_{IN,EX}CLUSIVE.\n+\t* tree-nested.c (convert_nonlocal_reference_stmt,\n+\tconvert_local_reference_stmt, convert_gimple_call): Handle\n+\tGIMPLE_OMP_SCAN.\n+\t* tree-pretty-print.c (dump_omp_clause): Handle\n+\tOMP_CLAUSE_{IN,EX}CLUSIVE.\n+\t(dump_generic_node): Handle OMP_SCAN.\n+\t* gimple.def (GIMPLE_OMP_SCAN): New gimple code.\n+\t* gimple.h (gomp_scan): New type.\n+\t(is_a_helper <gomp_scan *>::test,\n+\tis_a_helper <const gomp_scan *>::test): New templates.\n+\t(gimple_build_omp_scan): Declare.\n+\t(gimple_omp_scan_clauses, gimple_omp_scan_clauses_ptr,\n+\tgimple_omp_scan_set_clauses): New inline functions.\n+\t(CASE_GIMPLE_OMP): Add case GIMPLE_OMP_SCAN:.\n+\t* gimple.c (gimple_build_omp_scan): New function.\n+\t(gimple_copy): Handle GIMPLE_OMP_SCAN.\n+\t* gimple-walk.c (walk_gimple_op, walk_gimple_stmt): Likewise.\n+\t* gimple-pretty-print.c (dump_gimple_omp_block): Don't handle\n+\tGIMPLE_OMP_TASKGROUP.\n+\t(dump_gimple_omp_scan): New function.\n+\t(pp_gimple_stmt_1): Handle GIMPLE_OMP_SCAN.\n+\t* gimple-low.c (lower_stmt): Handle GIMPLE_OMP_SCAN.\n+\t* tree-inline.c (remap_gimple_stmt, estimate_num_insns): Likewise.\n+\t* gimplify.c (enum gimplify_omp_var_data): Add GOVD_REDUCTION_INSCAN.\n+\t(is_gimple_stmt): Handle OMP_SCAN.\n+\t(gimplify_scan_omp_clauses): Reject inscan reductions on constructs\n+\tother than OMP_FOR or OMP_SIMD.  Handle OMP_CLAUSE_{IN,EX}CLUSIVE.\n+\t(gimplify_adjust_omp_clauses): Diagnose inscan reductions not\n+\tmentioned in nested #pragma omp scan.  Handle\n+\tOMP_CLAUSE_{IN,EX}CLUSIVE.\n+\t(gimplify_expr): Handle OMP_SCAN.\n+\t* omp-low.c (check_omp_nesting_restrictions): For parent context,\n+\tlook through GIMPLE_OMP_SCAN context.  Allow #pragma omp scan in\n+\tsimd constructs.\n+\t(scan_omp_1_stmt, lower_omp_1, diagnose_sb_1, diagnose_sb_2): Handle\n+\tGIMPLE_OMP_SCAN.\n+\n 2019-06-10  Martin Liska  <mliska@suse.cz>\n \n \t* ipa-cp.c (ignore_edge_p): New function.\n \t(build_toporder_info): Use it.\n-\t* ipa-inline.c (ignore_edge_p): New function/\n+\t* ipa-inline.c (ignore_edge_p): New function.\n \t(inline_small_functions): Use it.\n \t* ipa-pure-const.c (ignore_edge_for_nothrow):\n \tVerify opt_for_fn for caller and callee."}, {"sha": "589e4a12932faaa63aaa9b23a49d2fb1c7e5917a", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -1,3 +1,11 @@\n+2019-06-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-pragma.h (enum pragma_kind): Add PRAGMA_OMP_SCAN.\n+\t* c-pragma.c (omp_pragmas_simd): Add #pragma omp scan.\n+\t* c-omp.c (c_omp_split_clauses): Diagnose inscan reductions on\n+\tcombined/composite constructs where it is not allowed.  Copy over\n+\tOMP_CLAUSE_REDUCTION_INSCAN.\n+\n 2019-06-05  Martin Sebor  <msebor@redhat.com>\n \n \t* c-attribs.c (handle_mode_attribute): Adjust quoting and hyphenation."}, {"sha": "96b2e45ae7a94c1751cfeb44439f1c090a9795e2", "filename": "gcc/c-family/c-omp.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fc-family%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fc-family%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.c?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -1659,6 +1659,18 @@ c_omp_split_clauses (location_t loc, enum tree_code code,\n \t\t  OMP_CLAUSE_REDUCTION_TASK (clauses) = 0;\n \t\t}\n \t    }\n+\t  if (OMP_CLAUSE_REDUCTION_INSCAN (clauses)\n+\t      && ((mask & ((OMP_CLAUSE_MASK_1\n+\t\t\t    << PRAGMA_OMP_CLAUSE_DIST_SCHEDULE)\n+\t\t\t   | (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_MAP)))\n+\t\t  != 0))\n+\t    {\n+\t      error_at (OMP_CLAUSE_LOCATION (clauses),\n+\t\t\t\"%<inscan%> %<reduction%> clause on construct other \"\n+\t\t\t\"than %<for%>, %<simd%>, %<for simd%>, \"\n+\t\t\t\"%<parallel for%>, %<parallel for simd%>\");\n+\t      OMP_CLAUSE_REDUCTION_INSCAN (clauses) = 0;\n+\t    }\n \t  if ((mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_SCHEDULE)) != 0)\n \t    {\n \t      if (code == OMP_SIMD)\n@@ -1672,6 +1684,8 @@ c_omp_split_clauses (location_t loc, enum tree_code code,\n \t\t    = OMP_CLAUSE_REDUCTION_PLACEHOLDER (clauses);\n \t\t  OMP_CLAUSE_REDUCTION_DECL_PLACEHOLDER (c)\n \t\t    = OMP_CLAUSE_REDUCTION_DECL_PLACEHOLDER (clauses);\n+\t\t  OMP_CLAUSE_REDUCTION_INSCAN (c)\n+\t\t    = OMP_CLAUSE_REDUCTION_INSCAN (clauses);\n \t\t  OMP_CLAUSE_CHAIN (c) = cclauses[C_OMP_CLAUSE_SPLIT_SIMD];\n \t\t  cclauses[C_OMP_CLAUSE_SPLIT_SIMD] = c;\n \t\t}\n@@ -1687,6 +1701,8 @@ c_omp_split_clauses (location_t loc, enum tree_code code,\n \t\t    = OMP_CLAUSE_REDUCTION_PLACEHOLDER (clauses);\n \t\t  OMP_CLAUSE_REDUCTION_DECL_PLACEHOLDER (c)\n \t\t    = OMP_CLAUSE_REDUCTION_DECL_PLACEHOLDER (clauses);\n+\t\t  OMP_CLAUSE_REDUCTION_INSCAN (c)\n+\t\t    = OMP_CLAUSE_REDUCTION_INSCAN (clauses);\n \t\t  OMP_CLAUSE_CHAIN (c) = cclauses[C_OMP_CLAUSE_SPLIT_TEAMS];\n \t\t  cclauses[C_OMP_CLAUSE_SPLIT_TEAMS] = c;\n \t\t  s = C_OMP_CLAUSE_SPLIT_PARALLEL;\n@@ -1717,6 +1733,8 @@ c_omp_split_clauses (location_t loc, enum tree_code code,\n \t\t    = OMP_CLAUSE_REDUCTION_PLACEHOLDER (clauses);\n \t\t  OMP_CLAUSE_REDUCTION_DECL_PLACEHOLDER (c)\n \t\t    = OMP_CLAUSE_REDUCTION_DECL_PLACEHOLDER (clauses);\n+\t\t  OMP_CLAUSE_REDUCTION_INSCAN (c)\n+\t\t    = OMP_CLAUSE_REDUCTION_INSCAN (clauses);\n \t\t  OMP_CLAUSE_CHAIN (c) = cclauses[C_OMP_CLAUSE_SPLIT_TASKLOOP];\n \t\t  cclauses[C_OMP_CLAUSE_SPLIT_TASKLOOP] = c;\n \t\t}"}, {"sha": "9af713d1b43f337fe3475fb3097842c3083abe11", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -1320,6 +1320,7 @@ static const struct omp_pragma_def omp_pragmas_simd[] = {\n   { \"for\", PRAGMA_OMP_FOR },\n   { \"ordered\", PRAGMA_OMP_ORDERED },\n   { \"parallel\", PRAGMA_OMP_PARALLEL },\n+  { \"scan\", PRAGMA_OMP_SCAN },\n   { \"simd\", PRAGMA_OMP_SIMD },\n   { \"target\", PRAGMA_OMP_TARGET },\n   { \"taskloop\", PRAGMA_OMP_TASKLOOP },"}, {"sha": "ed6503686202cde3687a15897e6315ff3ad2be04", "filename": "gcc/c-family/c-pragma.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fc-family%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fc-family%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.h?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -56,6 +56,7 @@ enum pragma_kind {\n   PRAGMA_OMP_ORDERED,\n   PRAGMA_OMP_PARALLEL,\n   PRAGMA_OMP_REQUIRES,\n+  PRAGMA_OMP_SCAN,\n   PRAGMA_OMP_SECTION,\n   PRAGMA_OMP_SECTIONS,\n   PRAGMA_OMP_SIMD,"}, {"sha": "103634eff73925ceeb8205e4dd9bc86975d0eba3", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -1,3 +1,14 @@\n+2019-06-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.c (c_parser_pragma): Reject PRAGMA_OMP_SCAN.\n+\t(c_parser_omp_clause_reduction): Don't sorry_at on inscan reductions.\n+\t(c_parser_omp_scan_loop_body): New function.\n+\t(c_parser_omp_for_loop): Call c_parser_omp_scan_loop_body if there are\n+\tinscan reduction clauses.\n+\t* c-typeck.c (c_finish_omp_clauses): Reject mixing inscan with\n+\tnon-inscan reductions on the same construct, or inscan reductions with\n+\tordered or schedule clauses, or inscan array reductions.\n+\n 2019-06-05  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/90737"}, {"sha": "df1a304227696f6186d40c3af6f44589e8b7465d", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 81, "deletions": 6, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -11494,6 +11494,13 @@ c_parser_pragma (c_parser *parser, enum pragma_context context, bool *if_p)\n       c_parser_omp_end_declare_target (parser);\n       return false;\n \n+    case PRAGMA_OMP_SCAN:\n+      error_at (c_parser_peek_token (parser)->location,\n+\t\t\"%<#pragma omp scan%> may only be used in \"\n+\t\t\"a loop construct with %<inscan%> %<reduction%> clause\");\n+      c_parser_skip_until_found (parser, CPP_PRAGMA_EOL, NULL);\n+      return false;\n+\n     case PRAGMA_OMP_SECTION:\n       error_at (c_parser_peek_token (parser)->location,\n \t\t\"%<#pragma omp section%> may only be used in \"\n@@ -13558,11 +13565,7 @@ c_parser_omp_clause_reduction (c_parser *parser, enum omp_clause_code kind,\n \t      if (strcmp (p, \"task\") == 0)\n \t\ttask = true;\n \t      else if (strcmp (p, \"inscan\") == 0)\n-\t\t{\n-\t\t  inscan = true;\n-\t\t  sorry (\"%<inscan%> modifier on %<reduction%> clause \"\n-\t\t\t \"not supported yet\");\n-\t\t}\n+\t\tinscan = true;\n \t      if (task || inscan)\n \t\t{\n \t\t  c_parser_consume_token (parser);\n@@ -16738,6 +16741,71 @@ c_parser_omp_flush (c_parser *parser)\n   c_finish_omp_flush (loc, mo);\n }\n \n+/* OpenMP 5.0:\n+\n+   scan-loop-body:\n+     { structured-block scan-directive structured-block }  */\n+\n+static void\n+c_parser_omp_scan_loop_body (c_parser *parser, bool open_brace_parsed)\n+{\n+  tree substmt;\n+  location_t loc;\n+  tree clauses = NULL_TREE;\n+\n+  loc = c_parser_peek_token (parser)->location;\n+  if (!open_brace_parsed\n+      && !c_parser_require (parser, CPP_OPEN_BRACE, \"expected %<{%>\"))\n+    {\n+      /* Avoid skipping until the end of the block.  */\n+      parser->error = false;\n+      return;\n+    }\n+\n+  substmt = c_parser_omp_structured_block (parser, NULL);\n+  substmt = build2 (OMP_SCAN, void_type_node, substmt, NULL_TREE);\n+  SET_EXPR_LOCATION (substmt, loc);\n+  add_stmt (substmt);\n+\n+  loc = c_parser_peek_token (parser)->location;\n+  if (c_parser_peek_token (parser)->pragma_kind == PRAGMA_OMP_SCAN)\n+    {\n+      enum omp_clause_code clause = OMP_CLAUSE_ERROR;\n+\n+      c_parser_consume_pragma (parser);\n+\n+      if (c_parser_next_token_is (parser, CPP_NAME))\n+\t{\n+\t  const char *p\n+\t    = IDENTIFIER_POINTER (c_parser_peek_token (parser)->value);\n+\t  if (strcmp (p, \"inclusive\") == 0)\n+\t    clause = OMP_CLAUSE_INCLUSIVE;\n+\t  else if (strcmp (p, \"exclusive\") == 0)\n+\t    clause = OMP_CLAUSE_EXCLUSIVE;\n+\t}\n+      if (clause != OMP_CLAUSE_ERROR)\n+\t{\n+\t  c_parser_consume_token (parser);\n+\t  clauses = c_parser_omp_var_list_parens (parser, clause, NULL_TREE);\n+\t}\n+      else\n+\tc_parser_error (parser, \"expected %<inclusive%> or \"\n+\t\t\t\t\"%<exclusive%> clause\");\n+      c_parser_skip_to_pragma_eol (parser);\n+    }\n+  else\n+    error (\"expected %<#pragma omp scan%>\");\n+\n+  clauses = c_finish_omp_clauses (clauses, C_ORT_OMP);\n+  substmt = c_parser_omp_structured_block (parser, NULL);\n+  substmt = build2 (OMP_SCAN, void_type_node, substmt, clauses);\n+  SET_EXPR_LOCATION (substmt, loc);\n+  add_stmt (substmt);\n+\n+  c_parser_skip_until_found (parser, CPP_CLOSE_BRACE,\n+\t\t\t     \"expected %<}%>\");\n+}\n+\n /* Parse the restricted form of loop statements allowed by OpenACC and OpenMP.\n    The real trick here is to determine the loop control variable early\n    so that we can push a new decl if necessary to make it private.\n@@ -16756,6 +16824,7 @@ c_parser_omp_for_loop (location_t loc, c_parser *parser, enum tree_code code,\n   int i, collapse = 1, ordered = 0, count, nbraces = 0;\n   location_t for_loc;\n   bool tiling = false;\n+  bool inscan = false;\n   vec<tree, va_gc> *for_block = make_tree_vector ();\n \n   for (cl = clauses; cl; cl = OMP_CLAUSE_CHAIN (cl))\n@@ -16772,6 +16841,10 @@ c_parser_omp_for_loop (location_t loc, c_parser *parser, enum tree_code code,\n \tordered_cl = cl;\n \tordered = tree_to_shwi (OMP_CLAUSE_ORDERED_EXPR (cl));\n       }\n+    else if (OMP_CLAUSE_CODE (cl) == OMP_CLAUSE_REDUCTION\n+\t     && OMP_CLAUSE_REDUCTION_INSCAN (cl)\n+\t     && (code == OMP_SIMD || code == OMP_FOR))\n+      inscan = true;\n \n   if (ordered && ordered < collapse)\n     {\n@@ -16992,7 +17065,9 @@ c_parser_omp_for_loop (location_t loc, c_parser *parser, enum tree_code code,\n   c_cont_label = NULL_TREE;\n   body = push_stmt_list ();\n \n-  if (open_brace_parsed)\n+  if (inscan)\n+    c_parser_omp_scan_loop_body (parser, open_brace_parsed);\n+  else if (open_brace_parsed)\n     {\n       location_t here = c_parser_peek_token (parser)->location;\n       stmt = c_begin_compound_stmt (true);"}, {"sha": "6abfd101f3016119b0d0904138fe604ba34f8dea", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 59, "deletions": 6, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -13661,13 +13661,15 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n   bool copyprivate_seen = false;\n   bool linear_variable_step_check = false;\n   tree *nowait_clause = NULL;\n-  bool ordered_seen = false;\n+  tree ordered_clause = NULL_TREE;\n   tree schedule_clause = NULL_TREE;\n   bool oacc_async = false;\n   tree last_iterators = NULL_TREE;\n   bool last_iterators_remove = false;\n   tree *nogroup_seen = NULL;\n-  bool reduction_seen = false;\n+  /* 1 if normal/task reduction has been seen, -1 if inscan reduction\n+     has been seen, -2 if mixed inscan/normal reduction diagnosed.  */\n+  int reduction_seen = 0;\n \n   bitmap_obstack_initialize (NULL);\n   bitmap_initialize (&generic_head, &bitmap_default_obstack);\n@@ -13706,7 +13708,17 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t  goto check_dup_generic;\n \n \tcase OMP_CLAUSE_REDUCTION:\n-\t  reduction_seen = true;\n+\t  if (reduction_seen == 0)\n+\t    reduction_seen = OMP_CLAUSE_REDUCTION_INSCAN (c) ? -1 : 1;\n+\t  else if (reduction_seen != -2\n+\t\t   && reduction_seen != (OMP_CLAUSE_REDUCTION_INSCAN (c)\n+\t\t\t\t\t ? -1 : 1))\n+\t    {\n+\t      error_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t\"%<inscan%> and non-%<inscan%> %<reduction%> clauses \"\n+\t\t\t\"on the same construct\");\n+\t      reduction_seen = -2;\n+\t    }\n \t  /* FALLTHRU */\n \tcase OMP_CLAUSE_IN_REDUCTION:\n \tcase OMP_CLAUSE_TASK_REDUCTION:\n@@ -13721,6 +13733,15 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t}\n \n \t      t = OMP_CLAUSE_DECL (c);\n+\t      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_REDUCTION\n+\t\t  && OMP_CLAUSE_REDUCTION_INSCAN (c))\n+\t\t{\n+\t\t  error_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t    \"%<inscan%> %<reduction%> clause with array \"\n+\t\t\t    \"section\");\n+\t\t  remove = true;\n+\t\t  break;\n+\t\t}\n \t    }\n \t  t = require_complete_type (OMP_CLAUSE_LOCATION (c), t);\n \t  if (t == error_mark_node)\n@@ -14661,7 +14682,7 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t  continue;\n \n \tcase OMP_CLAUSE_ORDERED:\n-\t  ordered_seen = true;\n+\t  ordered_clause = c;\n \t  pc = &OMP_CLAUSE_CHAIN (c);\n \t  continue;\n \n@@ -14688,6 +14709,20 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t  pc = &OMP_CLAUSE_CHAIN (c);\n \t  continue;\n \n+\tcase OMP_CLAUSE_INCLUSIVE:\n+\tcase OMP_CLAUSE_EXCLUSIVE:\n+\t  need_complete = true;\n+\t  need_implicitly_determined = true;\n+\t  t = OMP_CLAUSE_DECL (c);\n+\t  if (!VAR_P (t) && TREE_CODE (t) != PARM_DECL)\n+\t    {\n+\t      error_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t\"%qE is not a variable in clause %qs\", t,\n+\t\t\tomp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n+\t      remove = true;\n+\t    }\n+\t  break;\n+\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n@@ -14760,7 +14795,7 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t= OMP_CLAUSE_SAFELEN_EXPR (safelen);\n     }\n \n-  if (ordered_seen\n+  if (ordered_clause\n       && schedule_clause\n       && (OMP_CLAUSE_SCHEDULE_KIND (schedule_clause)\n \t  & OMP_CLAUSE_SCHEDULE_NONMONOTONIC))\n@@ -14774,7 +14809,23 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t   & ~OMP_CLAUSE_SCHEDULE_NONMONOTONIC);\n     }\n \n-  if (linear_variable_step_check)\n+  if (reduction_seen < 0 && ordered_clause)\n+    {\n+      error_at (OMP_CLAUSE_LOCATION (ordered_clause),\n+\t\t\"%qs clause specified together with %<inscan%> \"\n+\t\t\"%<reduction%> clause\", \"ordered\");\n+      reduction_seen = -2;\n+    }\n+\n+  if (reduction_seen < 0 && schedule_clause)\n+    {\n+      error_at (OMP_CLAUSE_LOCATION (schedule_clause),\n+\t\t\"%qs clause specified together with %<inscan%> \"\n+\t\t\"%<reduction%> clause\", \"schedule\");\n+      reduction_seen = -2;\n+    }\n+\n+  if (linear_variable_step_check || reduction_seen == -2)\n     for (pc = &clauses, c = clauses; c ; c = *pc)\n       {\n \tbool remove = false;\n@@ -14789,6 +14840,8 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t      OMP_CLAUSE_LINEAR_STEP (c));\n \t    remove = true;\n \t  }\n+\telse if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_REDUCTION)\n+\t  OMP_CLAUSE_REDUCTION_INSCAN (c) = 0;\n \n \tif (remove)\n \t  *pc = OMP_CLAUSE_CHAIN (c);"}, {"sha": "188752c5ed7d600e95d41da39fb116f0892ef949", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -1,3 +1,17 @@\n+2019-06-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.c (cp_parser_omp_clause_reduction): Don't sorry_at on inscan\n+\treductions.\n+\t(cp_parser_omp_scan_loop_body): New function.\n+\t(cp_parser_omp_for_loop): Call cp_parser_omp_scan_loop_body if there\n+\tare inscan reduction clauses.\n+\t(cp_parser_pragma): Reject PRAGMA_OMP_SCAN.\n+\t* semantics.c (finish_omp_clauses): Reject mixing inscan with\n+\tnon-inscan reductions on the same construct, or inscan reductions with\n+\tordered or schedule clauses, or inscan array reductions.\n+\t* pt.c (tsubst_omp_clauses): Handle OMP_CLAUSE_{IN,EX}CLUSIVE.\n+\t(tsubst_expr): Handle OMP_SCAN.\n+\n 2019-06-07  Jason Merrill  <jason@redhat.com>\n \n \t* constexpr.c (cxx_eval_constant_expression): Call"}, {"sha": "e699fbc6b2564ce111a08d7d011b7250c24f53b4", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 73, "deletions": 6, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -33773,11 +33773,7 @@ cp_parser_omp_clause_reduction (cp_parser *parser, enum omp_clause_code kind,\n \t  if (strcmp (p, \"task\") == 0)\n \t    task = true;\n \t  else if (strcmp (p, \"inscan\") == 0)\n-\t    {\n-\t      inscan = true;\n-\t      sorry (\"%<inscan%> modifier on %<reduction%> clause \"\n-\t\t     \"not supported yet\");\n-\t    }\n+\t    inscan = true;\n \t  if (task || inscan)\n \t    {\n \t      cp_lexer_consume_token (parser->lexer);\n@@ -36820,6 +36816,63 @@ cp_finish_omp_range_for (tree orig, tree begin)\n     cp_finish_decomp (decl, decomp_first_name, decomp_cnt);\n }\n \n+/* OpenMP 5.0:\n+\n+   scan-loop-body:\n+     { structured-block scan-directive structured-block }  */\n+\n+static void\n+cp_parser_omp_scan_loop_body (cp_parser *parser)\n+{\n+  tree substmt, clauses = NULL_TREE;\n+\n+  matching_braces braces;\n+  if (!braces.require_open (parser))\n+    return;\n+\n+  substmt = cp_parser_omp_structured_block (parser, NULL);\n+  substmt = build2 (OMP_SCAN, void_type_node, substmt, NULL_TREE);\n+  add_stmt (substmt);\n+\n+  cp_token *tok = cp_lexer_peek_token (parser->lexer);\n+  if (cp_parser_pragma_kind (tok) == PRAGMA_OMP_SCAN)\n+    {\n+      enum omp_clause_code clause = OMP_CLAUSE_ERROR;\n+\n+      cp_lexer_consume_token (parser->lexer);\n+\n+      if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))\n+\t{\n+\t  tree id = cp_lexer_peek_token (parser->lexer)->u.value;\n+\t  const char *p = IDENTIFIER_POINTER (id);\n+\t  if (strcmp (p, \"inclusive\") == 0)\n+\t    clause = OMP_CLAUSE_INCLUSIVE;\n+\t  else if (strcmp (p, \"exclusive\") == 0)\n+\t    clause = OMP_CLAUSE_EXCLUSIVE;\n+\t}\n+      if (clause != OMP_CLAUSE_ERROR)\n+\t{\n+\t  cp_lexer_consume_token (parser->lexer);\n+\t  clauses = cp_parser_omp_var_list (parser, clause, NULL_TREE);\n+\t}\n+      else\n+\tcp_parser_error (parser, \"expected %<inclusive%> or \"\n+\t\t\t\t \"%<exclusive%> clause\");\n+\n+      cp_parser_require_pragma_eol (parser, tok);\n+    }\n+  else\n+    error (\"expected %<#pragma omp scan%>\");\n+\n+  clauses = finish_omp_clauses (clauses, C_ORT_OMP);\n+  substmt = cp_parser_omp_structured_block (parser, NULL);\n+  substmt = build2_loc (tok->location, OMP_SCAN, void_type_node, substmt,\n+\t\t\tclauses);\n+  add_stmt (substmt);\n+\n+  braces.require_close (parser);\n+}\n+\n /* Parse the restricted form of the for statement allowed by OpenMP.  */\n \n static tree\n@@ -36836,6 +36889,7 @@ cp_parser_omp_for_loop (cp_parser *parser, enum tree_code code, tree clauses,\n   releasing_vec for_block;\n   auto_vec<tree, 4> orig_inits;\n   bool tiling = false;\n+  bool inscan = false;\n \n   for (cl = clauses; cl; cl = OMP_CLAUSE_CHAIN (cl))\n     if (OMP_CLAUSE_CODE (cl) == OMP_CLAUSE_COLLAPSE)\n@@ -36851,6 +36905,10 @@ cp_parser_omp_for_loop (cp_parser *parser, enum tree_code code, tree clauses,\n \tordered_cl = cl;\n \tordered = tree_to_shwi (OMP_CLAUSE_ORDERED_EXPR (cl));\n       }\n+    else if (OMP_CLAUSE_CODE (cl) == OMP_CLAUSE_REDUCTION\n+\t     && OMP_CLAUSE_REDUCTION_INSCAN (cl)\n+\t     && (code == OMP_SIMD || code == OMP_FOR))\n+      inscan = true;\n \n   if (ordered && ordered < collapse)\n     {\n@@ -37179,7 +37237,10 @@ cp_parser_omp_for_loop (cp_parser *parser, enum tree_code code, tree clauses,\n     }\n   else\n     body = push_stmt_list ();\n-  cp_parser_statement (parser, NULL_TREE, false, if_p);\n+  if (inscan)\n+    cp_parser_omp_scan_loop_body (parser);\n+  else\n+    cp_parser_statement (parser, NULL_TREE, false, if_p);\n   if (orig_declv)\n     body = finish_omp_structured_block (body);\n   else\n@@ -41044,6 +41105,12 @@ cp_parser_pragma (cp_parser *parser, enum pragma_context context, bool *if_p)\n       cp_parser_omp_end_declare_target (parser, pragma_tok);\n       return false;\n \n+    case PRAGMA_OMP_SCAN:\n+      error_at (pragma_tok->location,\n+\t\t\"%<#pragma omp scan%> may only be used in \"\n+\t\t\"a loop construct with %<inscan%> %<reduction%> clause\");\n+      break;\n+\n     case PRAGMA_OMP_SECTION:\n       error_at (pragma_tok->location, \n \t\t\"%<#pragma omp section%> may only be used in \""}, {"sha": "ebaab27f09c148ae1458e9ce41cc327448583508", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -16323,6 +16323,8 @@ tsubst_omp_clauses (tree clauses, enum c_omp_region_type ort,\n \tcase OMP_CLAUSE_NONTEMPORAL:\n \tcase OMP_CLAUSE_USE_DEVICE_PTR:\n \tcase OMP_CLAUSE_IS_DEVICE_PTR:\n+\tcase OMP_CLAUSE_INCLUSIVE:\n+\tcase OMP_CLAUSE_EXCLUSIVE:\n \t  OMP_CLAUSE_DECL (nc)\n \t    = tsubst_omp_clause_decl (OMP_CLAUSE_DECL (oc), args, complain,\n \t\t\t\t      in_decl, iterator_cache);\n@@ -16443,6 +16445,8 @@ tsubst_omp_clauses (tree clauses, enum c_omp_region_type ort,\n \t  case OMP_CLAUSE_TASK_REDUCTION:\n \t  case OMP_CLAUSE_USE_DEVICE_PTR:\n \t  case OMP_CLAUSE_IS_DEVICE_PTR:\n+\t  case OMP_CLAUSE_INCLUSIVE:\n+\t  case OMP_CLAUSE_EXCLUSIVE:\n \t    /* tsubst_expr on SCOPE_REF results in returning\n \t       finish_non_static_data_member result.  Undo that here.  */\n \t    if (TREE_CODE (OMP_CLAUSE_DECL (oc)) == SCOPE_REF\n@@ -17639,6 +17643,7 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n     case OMP_TEAMS:\n     case OMP_CRITICAL:\n     case OMP_TASKGROUP:\n+    case OMP_SCAN:\n       r = push_omp_privatization_clauses (TREE_CODE (t) == OMP_TEAMS\n \t\t\t\t\t  && OMP_TEAMS_COMBINED (t));\n       tmp = tsubst_omp_clauses (OMP_CLAUSES (t), C_ORT_OMP, args, complain,"}, {"sha": "8e354a2990cb2137b45d15426abdaa334f1d7d4d", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 77, "deletions": 2, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -6126,10 +6126,13 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n   bool branch_seen = false;\n   bool copyprivate_seen = false;\n   bool ordered_seen = false;\n+  bool schedule_seen = false;\n   bool oacc_async = false;\n   tree last_iterators = NULL_TREE;\n   bool last_iterators_remove = false;\n-  bool reduction_seen = false;\n+  /* 1 if normal/task reduction has been seen, -1 if inscan reduction\n+     has been seen, -2 if mixed inscan/normal reduction diagnosed.  */\n+  int reduction_seen = 0;\n \n   bitmap_obstack_initialize (NULL);\n   bitmap_initialize (&generic_head, &bitmap_default_obstack);\n@@ -6164,7 +6167,17 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t  field_ok = ((ort & C_ORT_OMP_DECLARE_SIMD) == C_ORT_OMP);\n \t  goto check_dup_generic;\n \tcase OMP_CLAUSE_REDUCTION:\n-\t  reduction_seen = true;\n+\t  if (reduction_seen == 0)\n+\t    reduction_seen = OMP_CLAUSE_REDUCTION_INSCAN (c) ? -1 : 1;\n+\t  else if (reduction_seen != -2\n+\t\t   && reduction_seen != (OMP_CLAUSE_REDUCTION_INSCAN (c)\n+\t\t\t\t\t ? -1 : 1))\n+\t    {\n+\t      error_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t\"%<inscan%> and non-%<inscan%> %<reduction%> clauses \"\n+\t\t\t\"on the same construct\");\n+\t      reduction_seen = -2;\n+\t    }\n \t  /* FALLTHRU */\n \tcase OMP_CLAUSE_IN_REDUCTION:\n \tcase OMP_CLAUSE_TASK_REDUCTION:\n@@ -6177,6 +6190,15 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t  remove = true;\n \t\t  break;\n \t\t}\n+\t      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_REDUCTION\n+\t\t  && OMP_CLAUSE_REDUCTION_INSCAN (c))\n+\t\t{\n+\t\t  error_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t    \"%<inscan%> %<reduction%> clause with array \"\n+\t\t\t    \"section\");\n+\t\t  remove = true;\n+\t\t  break;\n+\t\t}\n \t      if (TREE_CODE (t) == TREE_LIST)\n \t\t{\n \t\t  while (TREE_CODE (t) == TREE_LIST)\n@@ -6684,6 +6706,8 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t}\n \t      OMP_CLAUSE_SCHEDULE_CHUNK_EXPR (c) = t;\n \t    }\n+\t  if (!remove)\n+\t    schedule_seen = true;\n \t  break;\n \n \tcase OMP_CLAUSE_SIMDLEN:\n@@ -7583,6 +7607,37 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t  branch_seen = true;\n \t  break;\n \n+\tcase OMP_CLAUSE_INCLUSIVE:\n+\tcase OMP_CLAUSE_EXCLUSIVE:\n+\t  t = omp_clause_decl_field (OMP_CLAUSE_DECL (c));\n+\t  if (!t)\n+\t    t = OMP_CLAUSE_DECL (c);\n+\t  if (t == current_class_ptr)\n+\t    {\n+\t      error_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t\"%<this%> allowed in OpenMP only in %<declare simd%>\"\n+\t\t\t\" clauses\");\n+\t      remove = true;\n+\t      break;\n+\t    }\n+\t  if (!VAR_P (t)\n+\t      && TREE_CODE (t) != PARM_DECL\n+\t      && TREE_CODE (t) != FIELD_DECL)\n+\t    {\n+\t      if (processing_template_decl && TREE_CODE (t) != OVERLOAD)\n+\t\tbreak;\n+\t      if (DECL_P (t))\n+\t\terror_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t  \"%qD is not a variable in clause %qs\", t,\n+\t\t\t  omp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n+\t      else\n+\t\terror_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t  \"%qE is not a variable in clause %qs\", t,\n+\t\t\t  omp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n+\t      remove = true;\n+\t    }\n+\t  break;\n+\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n@@ -7593,6 +7648,9 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \tpc = &OMP_CLAUSE_CHAIN (c);\n     }\n \n+  if (reduction_seen < 0 && (ordered_seen || schedule_seen))\n+    reduction_seen = -2;\n+\n   for (pc = &clauses, c = clauses; c ; c = *pc)\n     {\n       enum omp_clause_code c_kind = OMP_CLAUSE_CODE (c);\n@@ -7628,8 +7686,14 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t  need_implicitly_determined = true;\n \t  break;\n \tcase OMP_CLAUSE_REDUCTION:\n+\t  if (reduction_seen == -2)\n+\t    OMP_CLAUSE_REDUCTION_INSCAN (c) = 0;\n+\t  need_implicitly_determined = true;\n+\t  break;\n \tcase OMP_CLAUSE_IN_REDUCTION:\n \tcase OMP_CLAUSE_TASK_REDUCTION:\n+\tcase OMP_CLAUSE_INCLUSIVE:\n+\tcase OMP_CLAUSE_EXCLUSIVE:\n \t  need_implicitly_determined = true;\n \t  break;\n \tcase OMP_CLAUSE_LINEAR:\n@@ -7680,6 +7744,10 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t  (OMP_CLAUSE_SCHEDULE_KIND (c)\n \t\t   & ~OMP_CLAUSE_SCHEDULE_NONMONOTONIC);\n \t    }\n+\t  if (reduction_seen == -2)\n+\t    error_at (OMP_CLAUSE_LOCATION (c),\n+\t\t      \"%qs clause specified together with %<inscan%> \"\n+\t\t      \"%<reduction%> clause\", \"schedule\");\n \t  pc = &OMP_CLAUSE_CHAIN (c);\n \t  continue;\n \tcase OMP_CLAUSE_NOGROUP:\n@@ -7693,6 +7761,13 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t    }\n \t  pc = &OMP_CLAUSE_CHAIN (c);\n \t  continue;\n+\tcase OMP_CLAUSE_ORDERED:\n+\t  if (reduction_seen == -2)\n+\t    error_at (OMP_CLAUSE_LOCATION (c),\n+\t\t      \"%qs clause specified together with %<inscan%> \"\n+\t\t      \"%<reduction%> clause\", \"ordered\");\n+\t  pc = &OMP_CLAUSE_CHAIN (c);\n+\t  continue;\n \tcase OMP_CLAUSE_NOWAIT:\n \t  if (copyprivate_seen)\n \t    {"}, {"sha": "961b7f42c5be6c6282cdeffe8595c75d920f759e", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -336,6 +336,7 @@ lower_stmt (gimple_stmt_iterator *gsi, struct lower_data *data)\n     case GIMPLE_OMP_MASTER:\n     case GIMPLE_OMP_TASKGROUP:\n     case GIMPLE_OMP_ORDERED:\n+    case GIMPLE_OMP_SCAN:\n     case GIMPLE_OMP_CRITICAL:\n     case GIMPLE_OMP_RETURN:\n     case GIMPLE_OMP_ATOMIC_LOAD:"}, {"sha": "0ccbd6c6352793a9179b70c03dfaf010546759be", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -1799,9 +1799,6 @@ dump_gimple_omp_block (pretty_printer *buffer, gimple *gs, int spc,\n \tcase GIMPLE_OMP_MASTER:\n \t  pp_string (buffer, \"#pragma omp master\");\n \t  break;\n-\tcase GIMPLE_OMP_TASKGROUP:\n-\t  pp_string (buffer, \"#pragma omp taskgroup\");\n-\t  break;\n \tcase GIMPLE_OMP_SECTION:\n \t  pp_string (buffer, \"#pragma omp section\");\n \t  break;\n@@ -1880,6 +1877,34 @@ dump_gimple_omp_ordered (pretty_printer *buffer, gomp_ordered *gs,\n     }\n }\n \n+/* Dump a GIMPLE_OMP_SCAN tuple on the pretty_printer BUFFER.  */\n+\n+static void\n+dump_gimple_omp_scan (pretty_printer *buffer, gomp_scan *gs,\n+\t\t      int spc, dump_flags_t flags)\n+{\n+  if (flags & TDF_RAW)\n+    dump_gimple_fmt (buffer, spc, flags, \"%G <%+BODY <%S> >\", gs,\n+\t\t     gimple_omp_body (gs));\n+  else\n+    {\n+      if (gimple_omp_scan_clauses (gs))\n+\t{\n+\t  pp_string (buffer, \"#pragma omp scan\");\n+\t  dump_omp_clauses (buffer, gimple_omp_scan_clauses (gs), spc, flags);\n+\t}\n+      if (!gimple_seq_empty_p (gimple_omp_body (gs)))\n+\t{\n+\t  newline_and_indent (buffer, spc + 2);\n+\t  pp_left_brace (buffer);\n+\t  pp_newline (buffer);\n+\t  dump_gimple_seq (buffer, gimple_omp_body (gs), spc + 4, flags);\n+\t  newline_and_indent (buffer, spc + 2);\n+\t  pp_right_brace (buffer);\n+\t}\n+    }\n+}\n+\n /* Dump a GIMPLE_OMP_RETURN tuple on the pretty_printer BUFFER.  */\n \n static void\n@@ -2652,6 +2677,11 @@ pp_gimple_stmt_1 (pretty_printer *buffer, gimple *gs, int spc,\n \t\t\t       flags);\n       break;\n \n+    case GIMPLE_OMP_SCAN:\n+      dump_gimple_omp_scan (buffer, as_a <gomp_scan *> (gs), spc,\n+\t\t\t    flags);\n+      break;\n+\n     case GIMPLE_OMP_CRITICAL:\n       dump_gimple_omp_critical (buffer, as_a <gomp_critical *> (gs), spc,\n \t\t\t\tflags);"}, {"sha": "2b8f1e0b5c8c7850c0efa792c12f4b295453e8e4", "filename": "gcc/gimple-walk.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fgimple-walk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fgimple-walk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-walk.c?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -336,6 +336,16 @@ walk_gimple_op (gimple *stmt, walk_tree_fn callback_op,\n       }\n       break;\n \n+    case GIMPLE_OMP_SCAN:\n+      {\n+\tgomp_scan *scan_stmt = as_a <gomp_scan *> (stmt);\n+\tret = walk_tree (gimple_omp_scan_clauses_ptr (scan_stmt),\n+\t\t\t callback_op, wi, pset);\n+\tif (ret)\n+\t  return ret;\n+      }\n+      break;\n+\n     case GIMPLE_OMP_FOR:\n       ret = walk_tree (gimple_omp_for_clauses_ptr (stmt), callback_op, wi,\n \t\t       pset);\n@@ -650,6 +660,7 @@ walk_gimple_stmt (gimple_stmt_iterator *gsi, walk_stmt_fn callback_stmt,\n     case GIMPLE_OMP_MASTER:\n     case GIMPLE_OMP_TASKGROUP:\n     case GIMPLE_OMP_ORDERED:\n+    case GIMPLE_OMP_SCAN:\n     case GIMPLE_OMP_SECTION:\n     case GIMPLE_OMP_PARALLEL:\n     case GIMPLE_OMP_TASK:"}, {"sha": "63c8d5e85ae36fa72e402e614ad198fed12f134b", "filename": "gcc/gimple.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -1108,6 +1108,25 @@ gimple_build_omp_return (bool wait_p)\n }\n \n \n+/* Build a GIMPLE_OMP_SCAN statement.\n+\n+   BODY is the sequence of statements to be executed by the scan\n+   construct.\n+   CLAUSES are any of the construct's clauses.  */\n+\n+gomp_scan *\n+gimple_build_omp_scan (gimple_seq body, tree clauses)\n+{\n+  gomp_scan *p\n+    = as_a <gomp_scan *> (gimple_alloc (GIMPLE_OMP_SCAN, 0));\n+  gimple_omp_scan_set_clauses (p, clauses);\n+  if (body)\n+    gimple_omp_set_body (p, body);\n+\n+  return p;\n+}\n+\n+\n /* Build a GIMPLE_OMP_SECTIONS statement.\n \n    BODY is a sequence of section statements.\n@@ -1943,6 +1962,12 @@ gimple_copy (gimple *stmt)\n \t  gimple_omp_ordered_set_clauses (as_a <gomp_ordered *> (copy), t);\n \t  goto copy_omp_body;\n \n+\tcase GIMPLE_OMP_SCAN:\n+\t  t = gimple_omp_scan_clauses (as_a <gomp_scan *> (stmt));\n+\t  t = unshare_expr (t);\n+\t  gimple_omp_scan_set_clauses (as_a <gomp_scan *> (copy), t);\n+\t  goto copy_omp_body;\n+\n \tcase GIMPLE_OMP_TASKGROUP:\n \t  t = unshare_expr (gimple_omp_taskgroup_clauses (stmt));\n \t  gimple_omp_taskgroup_set_clauses (copy, t);"}, {"sha": "dd64419e8eb6fc00f11f6433010eb848a5337570", "filename": "gcc/gimple.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fgimple.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fgimple.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.def?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -331,6 +331,11 @@ DEFGSCODE(GIMPLE_OMP_TASK, \"gimple_omp_task\", GSS_OMP_TASK)\n /* OMP_RETURN marks the end of an OpenMP directive.  */\n DEFGSCODE(GIMPLE_OMP_RETURN, \"gimple_omp_return\", GSS_OMP_ATOMIC_STORE_LAYOUT)\n \n+/* GIMPLE_OMP_SCAN <BODY, CLAUSES> represents #pragma omp scan\n+   BODY is the sequence of statements inside the single section.\n+   CLAUSES is an OMP_CLAUSE chain holding the associated clauses.  */\n+DEFGSCODE(GIMPLE_OMP_SCAN, \"gimple_omp_scan\", GSS_OMP_SINGLE_LAYOUT)\n+\n /* OMP_SECTION <BODY> represents #pragma omp section.\n    BODY is the sequence of statements in the section body.  */\n DEFGSCODE(GIMPLE_OMP_SECTION, \"gimple_omp_section\", GSS_OMP)"}, {"sha": "47070e7f4099aedf5159c7a26fb1da5021916eb3", "filename": "gcc/gimple.h", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -741,7 +741,8 @@ struct GTY((tag(\"GSS_OMP_CONTINUE\")))\n   tree control_use;\n };\n \n-/* GIMPLE_OMP_SINGLE, GIMPLE_OMP_ORDERED, GIMPLE_OMP_TASKGROUP.  */\n+/* GIMPLE_OMP_SINGLE, GIMPLE_OMP_ORDERED, GIMPLE_OMP_TASKGROUP,\n+   GIMPLE_OMP_SCAN.  */\n \n struct GTY((tag(\"GSS_OMP_SINGLE_LAYOUT\")))\n   gimple_statement_omp_single_layout : public gimple_statement_omp\n@@ -773,6 +774,13 @@ struct GTY((tag(\"GSS_OMP_SINGLE_LAYOUT\")))\n \t stmt->code == GIMPLE_OMP_ORDERED.  */\n };\n \n+struct GTY((tag(\"GSS_OMP_SINGLE_LAYOUT\")))\n+  gomp_scan : public gimple_statement_omp_single_layout\n+{\n+    /* No extra fields; adds invariant:\n+\t stmt->code == GIMPLE_OMP_SCAN.  */\n+};\n+\n \n /* GIMPLE_OMP_ATOMIC_LOAD.\n    Note: This is based on gimple, not g_s_omp, because g_s_omp\n@@ -1112,6 +1120,14 @@ is_a_helper <gomp_ordered *>::test (gimple *gs)\n   return gs->code == GIMPLE_OMP_ORDERED;\n }\n \n+template <>\n+template <>\n+inline bool\n+is_a_helper <gomp_scan *>::test (gimple *gs)\n+{\n+  return gs->code == GIMPLE_OMP_SCAN;\n+}\n+\n template <>\n template <>\n inline bool\n@@ -1330,6 +1346,14 @@ is_a_helper <const gomp_ordered *>::test (const gimple *gs)\n   return gs->code == GIMPLE_OMP_ORDERED;\n }\n \n+template <>\n+template <>\n+inline bool\n+is_a_helper <const gomp_scan *>::test (const gimple *gs)\n+{\n+  return gs->code == GIMPLE_OMP_SCAN;\n+}\n+\n template <>\n template <>\n inline bool\n@@ -1475,6 +1499,7 @@ gimple *gimple_build_omp_taskgroup (gimple_seq, tree);\n gomp_continue *gimple_build_omp_continue (tree, tree);\n gomp_ordered *gimple_build_omp_ordered (gimple_seq, tree);\n gimple *gimple_build_omp_return (bool);\n+gomp_scan *gimple_build_omp_scan (gimple_seq, tree);\n gomp_sections *gimple_build_omp_sections (gimple_seq, tree);\n gimple *gimple_build_omp_sections_switch (void);\n gomp_single *gimple_build_omp_single (gimple_seq, tree);\n@@ -4946,6 +4971,35 @@ gimple_omp_ordered_set_clauses (gomp_ordered *ord_stmt, tree clauses)\n }\n \n \n+/* Return the clauses associated with OMP_SCAN statement SCAN_STMT.  */\n+\n+static inline tree\n+gimple_omp_scan_clauses (const gomp_scan *scan_stmt)\n+{\n+  return scan_stmt->clauses;\n+}\n+\n+\n+/* Return a pointer to the clauses associated with OMP scan statement\n+   ORD_STMT.  */\n+\n+static inline tree *\n+gimple_omp_scan_clauses_ptr (gomp_scan *scan_stmt)\n+{\n+  return &scan_stmt->clauses;\n+}\n+\n+\n+/* Set CLAUSES to be the clauses associated with OMP scan statement\n+   ORD_STMT.  */\n+\n+static inline void\n+gimple_omp_scan_set_clauses (gomp_scan *scan_stmt, tree clauses)\n+{\n+  scan_stmt->clauses = clauses;\n+}\n+\n+\n /* Return the clauses associated with OMP_TASKGROUP statement GS.  */\n \n static inline tree\n@@ -6379,6 +6433,7 @@ gimple_return_set_retval (greturn *gs, tree retval)\n     case GIMPLE_OMP_TASKGROUP:\t\t\t\\\n     case GIMPLE_OMP_ORDERED:\t\t\t\\\n     case GIMPLE_OMP_CRITICAL:\t\t\t\\\n+    case GIMPLE_OMP_SCAN:\t\t\t\\\n     case GIMPLE_OMP_RETURN:\t\t\t\\\n     case GIMPLE_OMP_ATOMIC_LOAD:\t\t\\\n     case GIMPLE_OMP_ATOMIC_STORE:\t\t\\"}, {"sha": "3b4fdc7a5099d6e33981c81a985d3370458af142", "filename": "gcc/gimplify.c", "status": "modified", "additions": 107, "deletions": 2, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -118,6 +118,9 @@ enum gimplify_omp_var_data\n \n   GOVD_CONDTEMP = 0x1000000,\n \n+  /* Flag for GOVD_REDUCTION: inscan seen in {in,ex}clusive clause.  */\n+  GOVD_REDUCTION_INSCAN = 0x2000000,\n+\n   GOVD_DATA_SHARE_CLASS = (GOVD_SHARED | GOVD_PRIVATE | GOVD_FIRSTPRIVATE\n \t\t\t   | GOVD_LASTPRIVATE | GOVD_REDUCTION | GOVD_LINEAR\n \t\t\t   | GOVD_LOCAL)\n@@ -5492,6 +5495,7 @@ is_gimple_stmt (tree t)\n     case OMP_SIMD:\n     case OMP_DISTRIBUTE:\n     case OACC_LOOP:\n+    case OMP_SCAN:\n     case OMP_SECTIONS:\n     case OMP_SECTION:\n     case OMP_SINGLE:\n@@ -8119,13 +8123,13 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t      case OMP_DISTRIBUTE:\n \t\terror_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t  \"conditional %<lastprivate%> clause on \"\n-\t\t\t  \"%<distribute%> construct\");\n+\t\t\t  \"%qs construct\", \"distribute\");\n \t\tOMP_CLAUSE_LASTPRIVATE_CONDITIONAL (c) = 0;\n \t\tbreak;\n \t      case OMP_TASKLOOP:\n \t\terror_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t  \"conditional %<lastprivate%> clause on \"\n-\t\t\t  \"%<taskloop%> construct\");\n+\t\t\t  \"%qs construct\", \"taskloop\");\n \t\tOMP_CLAUSE_LASTPRIVATE_CONDITIONAL (c) = 0;\n \t\tbreak;\n \t      default:\n@@ -8242,6 +8246,36 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t\t  OMP_CLAUSE_REDUCTION_TASK (c) = 0;\n \t\t}\n \t    }\n+\t  if (OMP_CLAUSE_REDUCTION_INSCAN (c))\n+\t    switch (code)\n+\t      {\n+\t      case OMP_SECTIONS:\n+\t\terror_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t  \"%<inscan%> %<reduction%> clause on \"\n+\t\t\t  \"%qs construct\", \"sections\");\n+\t\tOMP_CLAUSE_REDUCTION_INSCAN (c) = 0;\n+\t\tbreak;\n+\t      case OMP_PARALLEL:\n+\t\terror_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t  \"%<inscan%> %<reduction%> clause on \"\n+\t\t\t  \"%qs construct\", \"parallel\");\n+\t\tOMP_CLAUSE_REDUCTION_INSCAN (c) = 0;\n+\t\tbreak;\n+\t      case OMP_TEAMS:\n+\t\terror_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t  \"%<inscan%> %<reduction%> clause on \"\n+\t\t\t  \"%qs construct\", \"teams\");\n+\t\tOMP_CLAUSE_REDUCTION_INSCAN (c) = 0;\n+\t\tbreak;\n+\t      case OMP_TASKLOOP:\n+\t\terror_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t  \"%<inscan%> %<reduction%> clause on \"\n+\t\t\t  \"%qs construct\", \"taskloop\");\n+\t\tOMP_CLAUSE_REDUCTION_INSCAN (c) = 0;\n+\t\tbreak;\n+\t      default:\n+\t\tbreak;\n+\t      }\n \t  /* FALLTHRU */\n \tcase OMP_CLAUSE_IN_REDUCTION:\n \tcase OMP_CLAUSE_TASK_REDUCTION:\n@@ -9290,6 +9324,36 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t  ctx->default_kind = OMP_CLAUSE_DEFAULT_KIND (c);\n \t  break;\n \n+\tcase OMP_CLAUSE_INCLUSIVE:\n+\tcase OMP_CLAUSE_EXCLUSIVE:\n+\t  decl = OMP_CLAUSE_DECL (c);\n+\t  {\n+\t    splay_tree_node n = splay_tree_lookup (outer_ctx->variables,\n+\t\t\t\t\t\t   (splay_tree_key) decl);\n+\t    if (n == NULL || (n->value & GOVD_REDUCTION) == 0)\n+\t      {\n+\t\terror_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t  \"%qD specified in %qs clause but not in %<inscan%> \"\n+\t\t\t  \"%<reduction%> clause on the containing construct\",\n+\t\t\t  decl, omp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n+\t\tremove = true;\n+\t      }\n+\t    else\n+\t      {\n+\t\tn->value |= GOVD_REDUCTION_INSCAN;\n+\t\tif (outer_ctx->region_type == ORT_SIMD\n+\t\t    && outer_ctx->outer_context\n+\t\t    && outer_ctx->outer_context->region_type == ORT_WORKSHARE)\n+\t\t  {\n+\t\t    n = splay_tree_lookup (outer_ctx->outer_context->variables,\n+\t\t\t\t\t   (splay_tree_key) decl);\n+\t\t    if (n && (n->value & GOVD_REDUCTION) != 0)\n+\t\t      n->value |= GOVD_REDUCTION_INSCAN;\n+\t\t  }\n+\t      }\n+\t  }\n+\t  break;\n+\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n@@ -9683,7 +9747,9 @@ gimplify_adjust_omp_clauses (gimple_seq *pre_p, gimple_seq body, tree *list_p,\n \t\t\t     enum tree_code code)\n {\n   struct gimplify_omp_ctx *ctx = gimplify_omp_ctxp;\n+  tree *orig_list_p = list_p;\n   tree c, decl;\n+  bool has_inscan_reductions = false;\n \n   if (body)\n     {\n@@ -10024,6 +10090,21 @@ gimplify_adjust_omp_clauses (gimple_seq *pre_p, gimple_seq body, tree *list_p,\n \t  break;\n \n \tcase OMP_CLAUSE_REDUCTION:\n+\t  if (OMP_CLAUSE_REDUCTION_INSCAN (c))\n+\t    {\n+\t      decl = OMP_CLAUSE_DECL (c);\n+\t      n = splay_tree_lookup (ctx->variables, (splay_tree_key) decl);\n+\t      if ((n->value & GOVD_REDUCTION_INSCAN) == 0)\n+\t\t{\n+\t\t  remove = true;\n+\t\t  error_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t    \"%qD specified in %<inscan%> %<reduction%> clause \"\n+\t\t\t    \"but not in %<scan%> directive clause\", decl);\n+\t\t  break;\n+\t\t}\n+\t      has_inscan_reductions = true;\n+\t    }\n+\t  /* FALLTHRU */\n \tcase OMP_CLAUSE_IN_REDUCTION:\n \tcase OMP_CLAUSE_TASK_REDUCTION:\n \t  decl = OMP_CLAUSE_DECL (c);\n@@ -10105,6 +10186,8 @@ gimplify_adjust_omp_clauses (gimple_seq *pre_p, gimple_seq body, tree *list_p,\n \tcase OMP_CLAUSE_TILE:\n \tcase OMP_CLAUSE_IF_PRESENT:\n \tcase OMP_CLAUSE_FINALIZE:\n+\tcase OMP_CLAUSE_INCLUSIVE:\n+\tcase OMP_CLAUSE_EXCLUSIVE:\n \t  break;\n \n \tdefault:\n@@ -10123,6 +10206,18 @@ gimplify_adjust_omp_clauses (gimple_seq *pre_p, gimple_seq body, tree *list_p,\n   data.pre_p = pre_p;\n   splay_tree_foreach (ctx->variables, gimplify_adjust_omp_clauses_1, &data);\n \n+  if (has_inscan_reductions)\n+    for (c = *orig_list_p; c; c = OMP_CLAUSE_CHAIN (c))\n+      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_LINEAR\n+\t  && !OMP_CLAUSE_LINEAR_NO_COPYIN (c))\n+\t{\n+\t  error_at (OMP_CLAUSE_LOCATION (c),\n+\t\t    \"%<inscan%> %<reduction%> clause used together with \"\n+\t\t    \"%<linear%> clause for a variable other than loop \"\n+\t\t    \"iterator\");\n+\t  break;\n+\t}\n+\n   gimplify_omp_ctxp = ctx->outer_context;\n   delete_omp_context (ctx);\n }\n@@ -13124,6 +13219,7 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \tcase OMP_MASTER:\n \tcase OMP_ORDERED:\n \tcase OMP_CRITICAL:\n+\tcase OMP_SCAN:\n \t  {\n \t    gimple_seq body = NULL;\n \t    gimple *g;\n@@ -13150,6 +13246,14 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t\t    \t\t\t       OMP_CRITICAL_NAME (*expr_p),\n \t\t    \t\t\t       OMP_CRITICAL_CLAUSES (*expr_p));\n \t\tbreak;\n+\t      case OMP_SCAN:\n+\t\tgimplify_scan_omp_clauses (&OMP_SCAN_CLAUSES (*expr_p),\n+\t\t\t\t\t   pre_p, ORT_WORKSHARE, OMP_SCAN);\n+\t\tgimplify_adjust_omp_clauses (pre_p, body,\n+\t\t\t\t\t     &OMP_SCAN_CLAUSES (*expr_p),\n+\t\t\t\t\t     OMP_SCAN);\n+\t\tg = gimple_build_omp_scan (body, OMP_SCAN_CLAUSES (*expr_p));\n+\t\tbreak;\n \t      default:\n \t\tgcc_unreachable ();\n \t      }\n@@ -13514,6 +13618,7 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t\t  && code != OMP_TASKGROUP\n \t\t  && code != OMP_ORDERED\n \t\t  && code != OMP_PARALLEL\n+\t\t  && code != OMP_SCAN\n \t\t  && code != OMP_SECTIONS\n \t\t  && code != OMP_SECTION\n \t\t  && code != OMP_SINGLE);"}, {"sha": "962eadae02f1d408ee5e5fdd386b8290022dacbc", "filename": "gcc/omp-low.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -2574,6 +2574,10 @@ check_omp_nesting_restrictions (gimple *stmt, omp_context *ctx)\n \n   if (ctx != NULL)\n     {\n+      if (gimple_code (ctx->stmt) == GIMPLE_OMP_SCAN\n+\t  && ctx->outer\n+\t  && gimple_code (ctx->outer->stmt) == GIMPLE_OMP_FOR)\n+\tctx = ctx->outer;\n       if (gimple_code (ctx->stmt) == GIMPLE_OMP_FOR\n \t  && gimple_omp_for_kind (ctx->stmt) & GF_OMP_FOR_SIMD)\n \t{\n@@ -2600,7 +2604,8 @@ check_omp_nesting_restrictions (gimple *stmt, omp_context *ctx)\n \t\t}\n \t    }\n \t  else if (gimple_code (stmt) == GIMPLE_OMP_ATOMIC_LOAD\n-\t\t   || gimple_code (stmt) == GIMPLE_OMP_ATOMIC_STORE)\n+\t\t   || gimple_code (stmt) == GIMPLE_OMP_ATOMIC_STORE\n+\t\t   || gimple_code (stmt) == GIMPLE_OMP_SCAN)\n \t    return true;\n \t  error_at (gimple_location (stmt),\n \t\t    \"OpenMP constructs other than %<#pragma omp ordered simd%>\"\n@@ -3328,6 +3333,7 @@ scan_omp_1_stmt (gimple_stmt_iterator *gsi, bool *handled_ops_p,\n     case GIMPLE_OMP_MASTER:\n     case GIMPLE_OMP_ORDERED:\n     case GIMPLE_OMP_CRITICAL:\n+    case GIMPLE_OMP_SCAN:\n     case GIMPLE_OMP_GRID_BODY:\n       ctx = new_omp_context (stmt, ctx);\n       scan_omp (gimple_omp_body_ptr (stmt), ctx);\n@@ -10834,6 +10840,15 @@ lower_omp_1 (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n       gcc_assert (ctx);\n       lower_omp_ordered (gsi_p, ctx);\n       break;\n+    case GIMPLE_OMP_SCAN:\n+      ctx = maybe_lookup_ctx (stmt);\n+      gcc_assert (ctx);\n+      gsi_insert_seq_after (gsi_p, gimple_omp_body (stmt), GSI_SAME_STMT);\n+      if (gimple_omp_scan_clauses (as_a <gomp_scan *> (stmt)))\n+\tsorry_at (gimple_location (stmt),\n+\t\t  \"%<#pragma omp scan%> not supported yet\");\n+      gsi_replace (gsi_p, gimple_build_nop (), true);\n+      break;\n     case GIMPLE_OMP_CRITICAL:\n       ctx = maybe_lookup_ctx (stmt);\n       gcc_assert (ctx);\n@@ -10925,6 +10940,7 @@ lower_omp_1 (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t      || gimple_code (up->stmt) == GIMPLE_OMP_CRITICAL\n \t      || gimple_code (up->stmt) == GIMPLE_OMP_TASKGROUP\n \t      || gimple_code (up->stmt) == GIMPLE_OMP_SECTION\n+\t      || gimple_code (up->stmt) == GIMPLE_OMP_SCAN\n \t      || (gimple_code (up->stmt) == GIMPLE_OMP_TARGET\n \t\t  && (gimple_omp_target_kind (up->stmt)\n \t\t      == GF_OMP_TARGET_KIND_DATA)))\n@@ -11195,6 +11211,7 @@ diagnose_sb_1 (gimple_stmt_iterator *gsi_p, bool *handled_ops_p,\n     case GIMPLE_OMP_SECTION:\n     case GIMPLE_OMP_MASTER:\n     case GIMPLE_OMP_ORDERED:\n+    case GIMPLE_OMP_SCAN:\n     case GIMPLE_OMP_CRITICAL:\n     case GIMPLE_OMP_TARGET:\n     case GIMPLE_OMP_TEAMS:\n@@ -11255,6 +11272,7 @@ diagnose_sb_2 (gimple_stmt_iterator *gsi_p, bool *handled_ops_p,\n     case GIMPLE_OMP_SECTION:\n     case GIMPLE_OMP_MASTER:\n     case GIMPLE_OMP_ORDERED:\n+    case GIMPLE_OMP_SCAN:\n     case GIMPLE_OMP_CRITICAL:\n     case GIMPLE_OMP_TARGET:\n     case GIMPLE_OMP_TEAMS:"}, {"sha": "191fec2f7b029f2d22a4a2a6e965641e26a6db0c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -1,3 +1,10 @@\n+2019-06-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/scan-1.c: New test.\n+\t* c-c++-common/gomp/scan-2.c: New test.\n+\t* c-c++-common/gomp/scan-3.c: New test.\n+\t* c-c++-common/gomp/scan-4.c: New test.\n+\n 2019-06-10  Martin Liska  <mliska@suse.cz>\n \n \t* gcc.dg/no_profile_instrument_function-attr-1.c: Fix"}, {"sha": "17804e34ba9983834cad8aa16bc720094c8b6eeb", "filename": "gcc/testsuite/c-c++-common/gomp/scan-1.c", "status": "added", "additions": 209, "deletions": 0, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fscan-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fscan-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fscan-1.c?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -0,0 +1,209 @@\n+int a, b;\n+\n+void\n+f1 (void)\n+{\n+  #pragma omp scan inclusive (a)\t/* { dg-error \"'#pragma omp scan' may only be used in a loop construct with 'inscan' 'reduction' clause\" } */\n+  #pragma omp scan exclusive (b)\t/* { dg-error \"'#pragma omp scan' may only be used in a loop construct with 'inscan' 'reduction' clause\" } */\n+}\n+\n+void\n+f2 (int *c, int *d, int *e, int *f)\n+{\n+  int i, l = 1;\n+  #pragma omp for reduction (inscan, +: a) reduction (+: b)\t/* { dg-error \"'inscan' and non-'inscan' 'reduction' clauses on the same construct\" } */\n+  for (i = 0; i < 64; i++)\n+    {\n+      { b++; a += c[i]; }\n+      #pragma omp scan inclusive (a)\t\t\t\t/* { dg-error \"\" } */\n+      d[i] = a;\n+    }\n+  #pragma omp for reduction (+: a) reduction (inscan, +: b)\t/* { dg-error \"'inscan' and non-'inscan' 'reduction' clauses on the same construct\" } */\n+  for (i = 0; i < 64; i++)\n+    {\n+      { a++; b += c[i]; }\n+      #pragma omp scan inclusive (b)\t\t\t\t/* { dg-error \"\" } */\n+      d[i] = b;\n+    }\n+  #pragma omp for reduction (inscan, +: e[:2])\t\t\t/* { dg-error \"'inscan' 'reduction' clause with array section\" } */\n+  for (i = 0; i < 64; ++i)\n+    {\n+      { e[0] += c[i]; e[1] += c[i]; }\n+      #pragma omp scan inclusive (a, e[:2])\t\t\t/* { dg-error \"\" } */\n+      { d[i] = e[0]; f[i] = e[1]; }\n+    }\n+  #pragma omp for reduction (inscan, +: a) ordered\t\t/* { dg-error \"'ordered' clause specified together with 'inscan' 'reduction' clause\" } */\n+  for (i = 0; i < 64; i++)\n+    {\n+      a += c[i];\n+      #pragma omp scan inclusive (a)\t\t\t\t/* { dg-error \"\" } */\n+      d[i] = a;\n+    }\n+  #pragma omp for reduction (inscan, +: a) ordered(1)\t\t/* { dg-error \"'ordered' clause specified together with 'inscan' 'reduction' clause\" } */\n+  for (i = 0; i < 64; i++)\n+    {\n+      a += c[i];\n+      #pragma omp scan inclusive (a)\t\t\t\t/* { dg-error \"\" } */\n+      d[i] = a;\n+    }\n+  #pragma omp for reduction (inscan, +: a) schedule(static)\t/* { dg-error \"'schedule' clause specified together with 'inscan' 'reduction' clause\" } */\n+  for (i = 0; i < 64; i++)\n+    {\n+      a += c[i];\n+      #pragma omp scan inclusive (a)\t\t\t\t/* { dg-error \"\" } */\n+      d[i] = a;\n+    }\n+  #pragma omp for reduction (inscan, +: a) schedule(static, 2)\t/* { dg-error \"'schedule' clause specified together with 'inscan' 'reduction' clause\" } */\n+  for (i = 0; i < 64; i++)\n+    {\n+      a += c[i];\n+      #pragma omp scan inclusive (a)\t\t\t\t/* { dg-error \"\" } */\n+      d[i] = a;\n+    }\n+  #pragma omp for reduction (inscan, +: a) schedule(nonmonotonic: dynamic, 2)\t/* { dg-error \"'schedule' clause specified together with 'inscan' 'reduction' clause\" } */\n+  for (i = 0; i < 64; i++)\n+    {\n+      a += c[i];\n+      #pragma omp scan inclusive (a)\t\t\t\t/* { dg-error \"\" } */\n+      d[i] = a;\n+    }\n+  #pragma omp for reduction (inscan, +: a) linear (l)\t\t/* { dg-error \"'inscan' 'reduction' clause used together with 'linear' clause for a variable other than loop iterator\" } */\n+  for (i = 0; i < 64; i++)\n+    {\n+      { a += c[i]; ++l; }\n+      #pragma omp scan inclusive (a)\n+      d[i] = a;\n+    }\n+}\n+\n+void\n+f3 (int *c, int *d)\n+{\n+  int i;\n+  #pragma omp teams reduction (inscan, +: a)\t/* { dg-error \"'inscan' 'reduction' clause on 'teams' construct\" } */\n+  ;\n+  #pragma omp parallel reduction (inscan, +: a)\t/* { dg-error \"'inscan' 'reduction' clause on 'parallel' construct\" } */\n+  ;\n+  #pragma omp sections reduction (inscan, +: a)\t/* { dg-error \"'inscan' 'reduction' clause on 'sections' construct\" } */\n+  {\n+    #pragma omp section\n+    ;\n+  }\n+  #pragma omp target parallel for reduction (inscan, +: a) map (c[:64], d[:64])\t/* { dg-error \"'inscan' 'reduction' clause on construct other than 'for', 'simd', 'for simd', 'parallel for', 'parallel for simd'\" } */\n+  for (i = 0; i < 64; i++)\n+    {\n+      d[i] = a;\n+      #pragma omp scan exclusive (a)\t/* { dg-error \"\" } */\n+      a += c[i];\n+    }\n+  #pragma omp teams\n+  {\n+  #pragma omp distribute parallel for reduction (inscan, +: a)\t/* { dg-error \"'inscan' 'reduction' clause on construct other than 'for', 'simd', 'for simd', 'parallel for', 'parallel for simd'\" } */\n+  for (i = 0; i < 64; i++)\n+    {\n+      d[i] = a;\n+      #pragma omp scan exclusive (a)\t/* { dg-error \"\" } */\n+      a += c[i];\n+    }\n+  #pragma omp distribute parallel for simd reduction (inscan, +: a)\t/* { dg-error \"'inscan' 'reduction' clause on construct other than 'for', 'simd', 'for simd', 'parallel for', 'parallel for simd'\" } */\n+  for (i = 0; i < 64; i++)\n+    {\n+      d[i] = a;\n+      #pragma omp scan exclusive (a)\t/* { dg-error \"\" } */\n+      a += c[i];\n+    }\n+  }\n+}\n+\n+void\n+f4 (int *c, int *d)\n+{\n+  int i;\n+  #pragma omp taskloop reduction (inscan, +: a)\t/* { dg-error \"'inscan' 'reduction' clause on 'taskloop' construct\" } */\n+  for (i = 0; i < 64; i++)\n+    {\n+      d[i] = a;\n+      #pragma omp scan exclusive (a)\t/* { dg-error \"\" } */\n+      a += c[i];\n+    }\n+}\n+\n+void\n+f5 (int *c, int *d)\n+{\n+  int i;\n+  #pragma omp simd reduction (inscan, +: a)\n+  for (i = 0; i < 64; i++)\n+    {\n+      d[i] = a;\n+      #pragma omp scan exclusive (a, b)\t/* { dg-error \"'b' specified in 'exclusive' clause but not in 'inscan' 'reduction' clause on the containing construct\" } */\n+      a += c[i];\n+    }\n+}\n+\n+void\n+f6 (int *c, int *d)\n+{\n+  int i;\n+  #pragma omp simd reduction (inscan, +: a, b)\t/* { dg-error \"'b' specified in 'inscan' 'reduction' clause but not in 'scan' directive clause\" } */\n+  for (i = 0; i < 64; i++)\n+    {\n+      d[i] = a;\n+      #pragma omp scan exclusive (a)\n+      a += c[i];\n+    }\n+}\n+\n+void\n+f7 (void)\n+{\n+  int i;\n+  #pragma omp simd reduction (inscan, +: a)\n+  for (i = 0; i < 64; i++)\n+    {\n+      if (i == 23)\t/* { dg-error \"invalid exit from OpenMP structured block\" \"\" { target c++ } .+1 } */\n+\tcontinue;\t/* { dg-error \"invalid branch to/from OpenMP structured block\" \"\" { target c } } */\n+      else if (i == 27)\n+\tgoto l1;\t/* { dg-error \"invalid branch to/from OpenMP structured block\" } */\n+      #pragma omp scan exclusive (a)\n+      {\n+\tl1: a = 0;\t/* { dg-error \"jump to label 'l1'\" \"\" { target c++ } } */\n+\tif (i == 33)\t/* { dg-error \"invalid exit from OpenMP structured block\" \"\" { target c++ } .+1 } */\n+\t  continue;\t/* { dg-error \"invalid branch to/from OpenMP structured block\" \"\" { target c } } */\n+      }\n+  }\n+}\n+\n+void\n+f8 (int *c, int *d, int *e, int *f)\n+{\n+  int i;\n+  #pragma omp for reduction (inscan, +: a, b)\t\t/* { dg-error \"'b' specified in 'inscan' 'reduction' clause but not in 'scan' directive clause\" } */\n+  for (i = 0; i < 64; i++)\n+    {\n+      { a += c[i]; b += d[i]; }\n+      #pragma omp scan inclusive (a) inclusive (b)\t/* { dg-error \"expected end of line before 'inclusive'\" } */\n+      { e[i] = a; f[i] = b; }\n+    }\n+  #pragma omp for reduction (inscan, +: a, b)\t\t/* { dg-error \"'.' specified in 'inscan' 'reduction' clause but not in 'scan' directive clause\" } */\n+  for (i = 0; i < 64; i++)\n+    {\n+      { a += c[i]; b += d[i]; }\n+      #pragma omp scan\t\t\t\t\t/* { dg-error \"expected 'inclusive' or 'exclusive' clause before end of line\" } */\n+      { e[i] = a; f[i] = b; }\n+    }\n+}\n+\n+void\n+f9 (void)\n+{\n+  int i;\n+  #pragma omp simd reduction (inscan, +: a)\n+  for (i = 0; i < 64; i++)\n+    {\n+      if (i == 23)\t/* { dg-error \"invalid exit from OpenMP structured block\" \"\" { target c++ } .+1 } */\n+\tbreak;\t\t/* { dg-error \"break statement used with OpenMP for loop\" \"\" { target c } } */\n+      #pragma omp scan exclusive (a)\n+      a++;\n+    }\n+}"}, {"sha": "14b74a5b87fb6debf854fcf33776ed116b88e2e4", "filename": "gcc/testsuite/c-c++-common/gomp/scan-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fscan-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fscan-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fscan-2.c?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -0,0 +1,14 @@\n+int a, b;\n+\n+void\n+f1 (int *c, int *d)\n+{\n+  int i;\n+  #pragma omp simd reduction (inscan, +: a)\n+  for (i = 0; i < 64; i++)\n+    {\n+      d[i] = a;\n+      #pragma omp scan exclusive (a)\t\t/* { dg-message \"sorry, unimplemented: '#pragma omp scan' not supported yet\" } */\n+      a += c[i];\n+    }\n+}"}, {"sha": "4865e08ea2c9095b70ed2eb21ecee9fcbd086b8d", "filename": "gcc/testsuite/c-c++-common/gomp/scan-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fscan-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fscan-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fscan-3.c?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -0,0 +1,14 @@\n+int a, b;\n+\n+void\n+f1 (int *c, int *d)\n+{\n+  int i;\n+  #pragma omp for reduction (inscan, +: a)\n+  for (i = 0; i < 64; i++)\n+    {\n+      d[i] = a;\n+      #pragma omp scan inclusive (a)\t\t/* { dg-message \"sorry, unimplemented: '#pragma omp scan' not supported yet\" } */\n+      a += c[i];\n+    }\n+}"}, {"sha": "32d400657866c94f132ded68d81b0eaf46063ef5", "filename": "gcc/testsuite/c-c++-common/gomp/scan-4.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fscan-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fscan-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fscan-4.c?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -0,0 +1,14 @@\n+int a, b;\n+\n+void\n+f1 (int *c, int *d)\n+{\n+  int i;\n+  #pragma omp for simd reduction (inscan, +: a)\n+  for (i = 0; i < 64; i++)\n+    {\n+      d[i] = a;\n+      #pragma omp scan exclusive (a)\t\t/* { dg-message \"sorry, unimplemented: '#pragma omp scan' not supported yet\" } */\n+      a += c[i];\n+    }\n+}"}, {"sha": "977b768128ed0870ddc8041c220cda2f11fe4327", "filename": "gcc/tree-core.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -306,13 +306,19 @@ enum omp_clause_code {\n      OpenMP clause: map ({alloc:,to:,from:,tofrom:,}variable-list).  */\n   OMP_CLAUSE_MAP,\n \n-  /* OpenACC clause: use_device (variable_list).\n+  /* OpenACC clause: use_device (variable-list).\n      OpenMP clause: use_device_ptr (variable-list).  */\n   OMP_CLAUSE_USE_DEVICE_PTR,\n \n   /* OpenMP clause: is_device_ptr (variable-list).  */\n   OMP_CLAUSE_IS_DEVICE_PTR,\n \n+  /* OpenMP clause: inclusive (variable-list).  */\n+  OMP_CLAUSE_INCLUSIVE,\n+\n+  /* OpenMP clause: exclusive (variable-list).  */\n+  OMP_CLAUSE_EXCLUSIVE,\n+\n   /* Internal structure to hold OpenACC cache directive's variable-list.\n      #pragma acc cache (variable-list).  */\n   OMP_CLAUSE__CACHE_,"}, {"sha": "52f45a73b1d71e7a5ac63dd6f1f60e7f9c96cc70", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -1638,6 +1638,12 @@ remap_gimple_stmt (gimple *stmt, copy_body_data *id)\n \t\t    gimple_omp_ordered_clauses (as_a <gomp_ordered *> (stmt)));\n \t  break;\n \n+\tcase GIMPLE_OMP_SCAN:\n+\t  s1 = remap_gimple_seq (gimple_omp_body (stmt), id);\n+\t  copy = gimple_build_omp_scan\n+\t\t   (s1, gimple_omp_scan_clauses (as_a <gomp_scan *> (stmt)));\n+\t  break;\n+\n \tcase GIMPLE_OMP_SECTION:\n \t  s1 = remap_gimple_seq (gimple_omp_body (stmt), id);\n \t  copy = gimple_build_omp_section (s1);\n@@ -4365,6 +4371,7 @@ estimate_num_insns (gimple *stmt, eni_weights *weights)\n     case GIMPLE_OMP_MASTER:\n     case GIMPLE_OMP_TASKGROUP:\n     case GIMPLE_OMP_ORDERED:\n+    case GIMPLE_OMP_SCAN:\n     case GIMPLE_OMP_SECTION:\n     case GIMPLE_OMP_SECTIONS:\n     case GIMPLE_OMP_SINGLE:"}, {"sha": "22aa64237563c7aafde19f4d2f7119f4d012753a", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -1619,6 +1619,7 @@ convert_nonlocal_reference_stmt (gimple_stmt_iterator *gsi, bool *handled_ops_p,\n     case GIMPLE_OMP_SECTION:\n     case GIMPLE_OMP_MASTER:\n     case GIMPLE_OMP_ORDERED:\n+    case GIMPLE_OMP_SCAN:\n       walk_body (convert_nonlocal_reference_stmt, convert_nonlocal_reference_op,\n \t         info, gimple_omp_body_ptr (stmt));\n       break;\n@@ -2322,6 +2323,7 @@ convert_local_reference_stmt (gimple_stmt_iterator *gsi, bool *handled_ops_p,\n     case GIMPLE_OMP_SECTION:\n     case GIMPLE_OMP_MASTER:\n     case GIMPLE_OMP_ORDERED:\n+    case GIMPLE_OMP_SCAN:\n       walk_body (convert_local_reference_stmt, convert_local_reference_op,\n \t\t info, gimple_omp_body_ptr (stmt));\n       break;\n@@ -2831,6 +2833,7 @@ convert_gimple_call (gimple_stmt_iterator *gsi, bool *handled_ops_p,\n     case GIMPLE_OMP_MASTER:\n     case GIMPLE_OMP_TASKGROUP:\n     case GIMPLE_OMP_ORDERED:\n+    case GIMPLE_OMP_SCAN:\n     case GIMPLE_OMP_CRITICAL:\n       walk_body (convert_gimple_call, NULL, info, gimple_omp_body_ptr (stmt));\n       break;"}, {"sha": "1e6c96813bbb59d82b77513aa32ec8ec149c6fb1", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -467,6 +467,12 @@ dump_omp_clause (pretty_printer *pp, tree clause, int spc, dump_flags_t flags)\n     case OMP_CLAUSE_IS_DEVICE_PTR:\n       name = \"is_device_ptr\";\n       goto print_remap;\n+    case OMP_CLAUSE_INCLUSIVE:\n+      name = \"inclusive\";\n+      goto print_remap;\n+    case OMP_CLAUSE_EXCLUSIVE:\n+      name = \"exclusive\";\n+      goto print_remap;\n     case OMP_CLAUSE__LOOPTEMP_:\n       name = \"_looptemp_\";\n       goto print_remap;\n@@ -3308,6 +3314,14 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, dump_flags_t flags,\n       pp_string (pp, \"#pragma omp section\");\n       goto dump_omp_body;\n \n+    case OMP_SCAN:\n+      if (OMP_SCAN_CLAUSES (node))\n+\t{\n+\t  pp_string (pp, \"#pragma omp scan\");\n+\t  dump_omp_clauses (pp, OMP_SCAN_CLAUSES (node), spc, flags);\n+\t}\n+      goto dump_omp_body;\n+\n     case OMP_MASTER:\n       pp_string (pp, \"#pragma omp master\");\n       goto dump_omp_body;"}, {"sha": "5d955535accd8f3681dac9dc35747c7ad0fe2cb9", "filename": "gcc/tree.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -300,6 +300,8 @@ unsigned const char omp_clause_num_ops[] =\n   2, /* OMP_CLAUSE_MAP  */\n   1, /* OMP_CLAUSE_USE_DEVICE_PTR  */\n   1, /* OMP_CLAUSE_IS_DEVICE_PTR  */\n+  1, /* OMP_CLAUSE_INCLUSIVE  */\n+  1, /* OMP_CLAUSE_EXCLUSIVE  */\n   2, /* OMP_CLAUSE__CACHE_  */\n   2, /* OMP_CLAUSE_GANG  */\n   1, /* OMP_CLAUSE_ASYNC  */\n@@ -378,6 +380,8 @@ const char * const omp_clause_code_name[] =\n   \"map\",\n   \"use_device_ptr\",\n   \"is_device_ptr\",\n+  \"inclusive\",\n+  \"exclusive\",\n   \"_cache_\",\n   \"gang\",\n   \"async\",\n@@ -12295,6 +12299,8 @@ walk_tree_1 (tree *tp, walk_tree_fn func, void *data,\n \tcase OMP_CLAUSE_LINK:\n \tcase OMP_CLAUSE_USE_DEVICE_PTR:\n \tcase OMP_CLAUSE_IS_DEVICE_PTR:\n+\tcase OMP_CLAUSE_INCLUSIVE:\n+\tcase OMP_CLAUSE_EXCLUSIVE:\n \tcase OMP_CLAUSE__LOOPTEMP_:\n \tcase OMP_CLAUSE__REDUCTEMP_:\n \tcase OMP_CLAUSE__CONDTEMP_:"}, {"sha": "10a14fc23b0c19a6ef4e405c230fa68850bdf596", "filename": "gcc/tree.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -1191,6 +1191,11 @@ DEFTREECODE (OMP_SINGLE, \"omp_single\", tcc_statement, 2)\n    Operand 1: OMP_SINGLE_CLAUSES: List of clauses.  */\n DEFTREECODE (OMP_TASKGROUP, \"omp_taskgroup\", tcc_statement, 2)\n \n+/* OpenMP - #pragma omp scan\n+   Operand 0: OMP_SCAN_BODY: Scan body.\n+   Operand 1: OMP_SCAN_CLAUSES: List of clauses.  */\n+DEFTREECODE (OMP_SCAN, \"omp_scan\", tcc_statement, 2)\n+\n /* OpenMP - #pragma omp section\n    Operand 0: OMP_SECTION_BODY: Section body.  */\n DEFTREECODE (OMP_SECTION, \"omp_section\", tcc_statement, 1)"}, {"sha": "d45a391428e55e1588957c54190049d280ff8053", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf38f7e9aa76856a7c8ac57988600ce9de7cafbd/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=bf38f7e9aa76856a7c8ac57988600ce9de7cafbd", "patch": "@@ -1344,7 +1344,7 @@ class auto_suppress_location_wrappers\n #define OMP_BODY(NODE) \\\n   TREE_OPERAND (TREE_RANGE_CHECK (NODE, OACC_PARALLEL, OMP_MASTER), 0)\n #define OMP_CLAUSES(NODE) \\\n-  TREE_OPERAND (TREE_RANGE_CHECK (NODE, OACC_PARALLEL, OMP_TASKGROUP), 1)\n+  TREE_OPERAND (TREE_RANGE_CHECK (NODE, OACC_PARALLEL, OMP_SCAN), 1)\n \n /* Generic accessors for OMP nodes that keep clauses as operand 0.  */\n #define OMP_STANDALONE_CLAUSES(NODE) \\\n@@ -1435,6 +1435,9 @@ class auto_suppress_location_wrappers\n #define OMP_TARGET_EXIT_DATA_CLAUSES(NODE)\\\n   TREE_OPERAND (OMP_TARGET_EXIT_DATA_CHECK (NODE), 0)\n \n+#define OMP_SCAN_BODY(NODE)\tTREE_OPERAND (OMP_SCAN_CHECK (NODE), 0)\n+#define OMP_SCAN_CLAUSES(NODE)\tTREE_OPERAND (OMP_SCAN_CHECK (NODE), 1)\n+\n #define OMP_CLAUSE_SIZE(NODE)\t\t\t\t\t\t\\\n   OMP_CLAUSE_OPERAND (OMP_CLAUSE_RANGE_CHECK (OMP_CLAUSE_CHECK (NODE),\t\\\n \t\t\t\t\t      OMP_CLAUSE_FROM,\t\t\\"}]}