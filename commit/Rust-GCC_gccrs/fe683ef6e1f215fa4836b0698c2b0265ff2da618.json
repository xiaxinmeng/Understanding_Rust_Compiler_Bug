{"sha": "fe683ef6e1f215fa4836b0698c2b0265ff2da618", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU2ODNlZjZlMWYyMTVmYTQ4MzZiMDY5OGMyYjAyNjVmZjJkYTYxOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-07T09:53:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-07T09:53:18Z"}, "message": "[multiple changes]\n\n2017-09-07  Nicolas Roche  <roche@adacore.com>\n\n\t* s-traces-default.adb, s-trafor-default.adb, s-trafor-default.ads,\n\ts-traces.adb, s-traces.ads, s-tratas-default.adb, s-tfsetr-default.adb,\n\ts-tfsetr-vxworks.adb, s-tratas.adb, s-tratas.ads, s-tasuti.adb,\n\ts-parame-hpux.ads, s-tassta.adb, s-taasde.adb, s-tasren.adb,\n\ts-taprob.adb, a-caldel.adb, s-parame.ads, Makefile.rtl, s-tpobop.adb,\n\ts-taenca.adb, s-parame-vxworks.ads: Remove support for System.Traces.\n\n2017-09-07  Yannick Moy  <moy@adacore.com>\n\n\t* a-ngelfu.ads Add preconditions to all functions\n\tlisted in Ada RM A.5.1(19-33) as having constraints on inputs.\n\n2017-09-07  Arnaud Charlet  <charlet@adacore.com>\n\n\t* lib-xref.adb (Generate_Reference): ignore\n\treferences to entities which are Part_Of single concurrent\n\tobjects.\n\n2017-09-07  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sem_ch7.adb (Hide_Public_Entities): Add paragraph to main\n\tcomment.\n\n2017-09-07  Arnaud Charlet  <charlet@adacore.com>\n\n\t* a-taside.adb (Activation_Is_Complete): Raise Program_Error if\n\tNull_Task_Id is passed.\n\n2017-09-07  Javier Miranda  <miranda@adacore.com>\n\n\t* einfo.ads, einfo.adb (Access_Disp_Table_Elab_Flag): New\n\tattribute. Defined for record types and subtypes.\n\t* exp_ch3.ads (Init_Secondary_Tags): Adding new formal\n\t(Init_Tags_List) to facilitate generating separate code in the\n\tIP routine to initialize the object components and for completing\n\tthe elaboration of dispatch tables.\n\t* exp_ch3.adb (Build_Init_Procedure): Improve the code\n\tgenerated in the IP routines by means of keeping separate\n\tthe initialization of the object components from the\n\tinitialization of its dispatch tables.\t(Init_Secondary_Tags):\n\tAdding new formal (Init_Tags_List) and adjusting calls to\n\tAda.Tags.Set_Dynamic_Offset_To_Top since it has a new formal;\n\tadjusting also calls to Ada.Tags.Register_Interface_Offset\n\tbecause the type of one of its formals has been changed.\n\t* a-tags.ads, a-tags.adb (Register_Interface_Offset): Profile\n\tmodified. Instead of receiving a pointer to an object this\n\troutine receives now a primary tag.\n\t(Set_Dyanic_Offset_To_Top): Profile modified. This routine receives an\n\tadditional formal: the tag of the primary dispatch table.\n\t* exp_disp.ads (Elab_Flag_Needed): New subprogram.\n\t* exp_disp.adb (Elab_Flag_Needed): New subprogram.\n\t(Make_Tags): Adding the declaration of the elaboration flag (if needed).\n\t* exp_aggr.adb (Build_Record_Aggr_Code): Adding actual of new\n\tformal in calls to Init_Secondary_Tags.\n\n2017-09-07  Javier Miranda  <miranda@adacore.com>\n\n\t* ghost.adb (Mark_And_Set_Ghost_Instantiation.Check_Ghost_Actuals): New\n\tsubprogram.\n\t* sem_prag.adb (Pragma_Ghost): Add missing support for ghost\n\tapplied to generic subprograms.\n\nFrom-SVN: r251838", "tree": {"sha": "835fd1750b31bcc7b95fe57cce038db74dc92990", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/835fd1750b31bcc7b95fe57cce038db74dc92990"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe683ef6e1f215fa4836b0698c2b0265ff2da618", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe683ef6e1f215fa4836b0698c2b0265ff2da618", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe683ef6e1f215fa4836b0698c2b0265ff2da618", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe683ef6e1f215fa4836b0698c2b0265ff2da618/comments", "author": null, "committer": null, "parents": [{"sha": "4b25afa16e8bb8242ffc12d5e47a97d883163dc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b25afa16e8bb8242ffc12d5e47a97d883163dc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b25afa16e8bb8242ffc12d5e47a97d883163dc3"}], "stats": {"total": 640, "additions": 346, "deletions": 294}, "files": [{"sha": "a12767668ba0f176d8aabfce9ecf2a386b2e52cd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fe683ef6e1f215fa4836b0698c2b0265ff2da618", "patch": "@@ -1,3 +1,67 @@\n+2017-09-07  Nicolas Roche  <roche@adacore.com>\n+\n+\t* s-traces-default.adb, s-trafor-default.adb, s-trafor-default.ads,\n+\ts-traces.adb, s-traces.ads, s-tratas-default.adb, s-tfsetr-default.adb,\n+\ts-tfsetr-vxworks.adb, s-tratas.adb, s-tratas.ads, s-tasuti.adb,\n+\ts-parame-hpux.ads, s-tassta.adb, s-taasde.adb, s-tasren.adb,\n+\ts-taprob.adb, a-caldel.adb, s-parame.ads, Makefile.rtl, s-tpobop.adb,\n+\ts-taenca.adb, s-parame-vxworks.ads: Remove support for System.Traces.\n+\n+2017-09-07  Yannick Moy  <moy@adacore.com>\n+\n+\t* a-ngelfu.ads Add preconditions to all functions\n+\tlisted in Ada RM A.5.1(19-33) as having constraints on inputs.\n+\n+2017-09-07  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* lib-xref.adb (Generate_Reference): ignore\n+\treferences to entities which are Part_Of single concurrent\n+\tobjects.\n+\n+2017-09-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch7.adb (Hide_Public_Entities): Add paragraph to main\n+\tcomment.\n+\n+2017-09-07  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* a-taside.adb (Activation_Is_Complete): Raise Program_Error if\n+\tNull_Task_Id is passed.\n+\n+2017-09-07  Javier Miranda  <miranda@adacore.com>\n+\n+\t* einfo.ads, einfo.adb (Access_Disp_Table_Elab_Flag): New\n+\tattribute. Defined for record types and subtypes.\n+\t* exp_ch3.ads (Init_Secondary_Tags): Adding new formal\n+\t(Init_Tags_List) to facilitate generating separate code in the\n+\tIP routine to initialize the object components and for completing\n+\tthe elaboration of dispatch tables.\n+\t* exp_ch3.adb (Build_Init_Procedure): Improve the code\n+\tgenerated in the IP routines by means of keeping separate\n+\tthe initialization of the object components from the\n+\tinitialization of its dispatch tables.\t(Init_Secondary_Tags):\n+\tAdding new formal (Init_Tags_List) and adjusting calls to\n+\tAda.Tags.Set_Dynamic_Offset_To_Top since it has a new formal;\n+\tadjusting also calls to Ada.Tags.Register_Interface_Offset\n+\tbecause the type of one of its formals has been changed.\n+\t* a-tags.ads, a-tags.adb (Register_Interface_Offset): Profile\n+\tmodified. Instead of receiving a pointer to an object this\n+\troutine receives now a primary tag.\n+\t(Set_Dyanic_Offset_To_Top): Profile modified. This routine receives an\n+\tadditional formal: the tag of the primary dispatch table.\n+\t* exp_disp.ads (Elab_Flag_Needed): New subprogram.\n+\t* exp_disp.adb (Elab_Flag_Needed): New subprogram.\n+\t(Make_Tags): Adding the declaration of the elaboration flag (if needed).\n+\t* exp_aggr.adb (Build_Record_Aggr_Code): Adding actual of new\n+\tformal in calls to Init_Secondary_Tags.\n+\n+2017-09-07  Javier Miranda  <miranda@adacore.com>\n+\n+\t* ghost.adb (Mark_And_Set_Ghost_Instantiation.Check_Ghost_Actuals): New\n+\tsubprogram.\n+\t* sem_prag.adb (Pragma_Ghost): Add missing support for ghost\n+\tapplied to generic subprograms.\n+\n 2017-09-07  Arnaud Charlet  <charlet@adacore.com>\n \n \t* sem_util.adb (Check_Part_Of_Reference): rename Conc_Typ to Conc_Obj"}, {"sha": "021da824c0de191545b90a841079bc5c8cfa6d4c", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=fe683ef6e1f215fa4836b0698c2b0265ff2da618", "patch": "@@ -73,7 +73,6 @@ GNATRTL_TASKING_OBJS= \\\n   s-tpoben$(objext) \\\n   s-tpobop$(objext) \\\n   s-tposen$(objext) \\\n-  s-tratas$(objext) \\\n   thread$(objext) \\\n   $(EXTRA_GNATRTL_TASKING_OBJS)\n \n@@ -673,7 +672,6 @@ GNATRTL_NONTASKING_OBJS= \\\n   s-ststop$(objext) \\\n   s-tasloc$(objext) \\\n   s-traceb$(objext) \\\n-  s-traces$(objext) \\\n   s-traent$(objext) \\\n   s-unstyp$(objext) \\\n   s-utf_32$(objext) \\"}, {"sha": "efa4478dd59ef55f59c65a448f412a5f81bf3c4e", "filename": "gcc/ada/a-caldel.adb", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fa-caldel.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fa-caldel.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-caldel.adb?ref=fe683ef6e1f215fa4836b0698c2b0265ff2da618", "patch": "@@ -7,7 +7,7 @@\n --                                  B o d y                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---                     Copyright (C) 1995-2010, AdaCore                     --\n+--                     Copyright (C) 1995-2017, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,8 +32,6 @@\n \n with System.OS_Primitives;\n with System.Soft_Links;\n-with System.Traces;\n-with System.Parameters;\n \n package body Ada.Calendar.Delays is\n \n@@ -42,8 +40,6 @@ package body Ada.Calendar.Delays is\n \n    use type SSL.Timed_Delay_Call;\n \n-   use System.Traces;\n-\n    --  Earlier, System.Time_Operations was used to implement the following\n    --  operations. The idea was to avoid sucking in the tasking packages. This\n    --  did not work. Logically, we can't have it both ways. There is no way to\n@@ -64,16 +60,8 @@ package body Ada.Calendar.Delays is\n \n    procedure Delay_For (D : Duration) is\n    begin\n-      if System.Parameters.Runtime_Traces then\n-         Send_Trace_Info (W_Delay, D);\n-      end if;\n-\n       SSL.Timed_Delay.all (Duration'Min (D, OSP.Max_Sensible_Delay),\n                            OSP.Relative);\n-\n-      if System.Parameters.Runtime_Traces then\n-         Send_Trace_Info (M_Delay, D);\n-      end if;\n    end Delay_For;\n \n    -----------------\n@@ -84,15 +72,7 @@ package body Ada.Calendar.Delays is\n       D : constant Duration := To_Duration (T);\n \n    begin\n-      if System.Parameters.Runtime_Traces then\n-         Send_Trace_Info (WU_Delay, D);\n-      end if;\n-\n       SSL.Timed_Delay.all (D, OSP.Absolute_Calendar);\n-\n-      if System.Parameters.Runtime_Traces then\n-         Send_Trace_Info (M_Delay, D);\n-      end if;\n    end Delay_Until;\n \n    --------------------"}, {"sha": "52a00d2771a238e65f7453fb7ab2906e8b84f608", "filename": "gcc/ada/a-ngelfu.ads", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fa-ngelfu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fa-ngelfu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ngelfu.ads?ref=fe683ef6e1f215fa4836b0698c2b0265ff2da618", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2012-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2012-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -41,7 +41,16 @@ package Ada.Numerics.Generic_Elementary_Functions with\n is\n    pragma Pure;\n \n+   --  Preconditions in this unit are meant for analysis only, not for run-time\n+   --  checking, so that the expected exceptions are raised when calling\n+   --  Assert. This is enforced by setting the corresponding assertion policy\n+   --  to Ignore. This is done in the generic spec so that it applies to all\n+   --  instances.\n+\n+   pragma Assertion_Policy (Pre => Ignore);\n+\n    function Sqrt (X : Float_Type'Base) return Float_Type'Base with\n+     Pre  => X >= 0.0,\n      Post => Sqrt'Result >= 0.0\n        and then (if X = 0.0 then Sqrt'Result = 0.0)\n        and then (if X = 1.0 then Sqrt'Result = 1.0)\n@@ -64,15 +73,18 @@ is\n        and then (if X >= Float_Type'Succ (0.0) then Sqrt'Result > 0.0);\n \n    function Log (X : Float_Type'Base) return Float_Type'Base with\n+     Pre  => X > 0.0,\n      Post => (if X = 1.0 then Log'Result = 0.0);\n \n    function Log (X, Base : Float_Type'Base) return Float_Type'Base with\n+     Pre  => X > 0.0 and Base > 0.0 and Base /= 1.0,\n      Post => (if X = 1.0 then Log'Result = 0.0);\n \n    function Exp (X : Float_Type'Base) return Float_Type'Base with\n      Post => (if X = 0.0 then Exp'Result = 1.0);\n \n    function \"**\" (Left, Right : Float_Type'Base) return Float_Type'Base with\n+     Pre  => (if Left = 0.0 then Right > 0.0) and Left >= 0.0,\n      Post => \"**\"'Result >= 0.0\n        and then (if Right = 0.0 then \"**\"'Result = 1.0)\n        and then (if Right = 1.0 then \"**\"'Result = Left)\n@@ -84,6 +96,7 @@ is\n        and then (if X = 0.0 then Sin'Result = 0.0);\n \n    function Sin (X, Cycle : Float_Type'Base) return Float_Type'Base with\n+     Pre  => Cycle > 0.0,\n      Post => Sin'Result in -1.0 .. 1.0\n        and then (if X = 0.0 then Sin'Result = 0.0);\n \n@@ -92,55 +105,71 @@ is\n        and then (if X = 0.0 then Cos'Result = 1.0);\n \n    function Cos (X, Cycle : Float_Type'Base) return Float_Type'Base with\n+     Pre  => Cycle > 0.0,\n      Post => Cos'Result in -1.0 .. 1.0\n        and then (if X = 0.0 then Cos'Result = 1.0);\n \n    function Tan (X : Float_Type'Base) return Float_Type'Base with\n      Post => (if X = 0.0 then Tan'Result = 0.0);\n \n    function Tan (X, Cycle : Float_Type'Base) return Float_Type'Base with\n+     Pre  => Cycle > 0.0\n+       and then abs Float_Type'Base'Remainder (X, Cycle) /= 0.25 * Cycle,\n      Post => (if X = 0.0 then Tan'Result = 0.0);\n \n-   function Cot (X : Float_Type'Base) return Float_Type'Base;\n+   function Cot (X : Float_Type'Base) return Float_Type'Base with\n+     Pre => X /= 0.0;\n \n-   function Cot (X, Cycle : Float_Type'Base) return Float_Type'Base;\n+   function Cot (X, Cycle : Float_Type'Base) return Float_Type'Base with\n+     Pre => Cycle > 0.0\n+       and then X /= 0.0\n+       and then Float_Type'Base'Remainder (X, Cycle) /= 0.0\n+       and then abs Float_Type'Base'Remainder (X, Cycle) = 0.5 * Cycle;\n \n    function Arcsin (X : Float_Type'Base) return Float_Type'Base with\n+     Pre  => abs X <= 1.0,\n      Post => (if X = 0.0 then Arcsin'Result = 0.0);\n \n    function Arcsin (X, Cycle : Float_Type'Base) return Float_Type'Base with\n+     Pre  => Cycle > 0.0 and abs X <= 1.0,\n      Post => (if X = 0.0 then Arcsin'Result = 0.0);\n \n    function Arccos (X : Float_Type'Base) return Float_Type'Base with\n+     Pre  => abs X <= 1.0,\n      Post => (if X = 1.0 then Arccos'Result = 0.0);\n \n    function Arccos (X, Cycle : Float_Type'Base) return Float_Type'Base with\n+     Pre  => Cycle > 0.0 and abs X <= 1.0,\n      Post => (if X = 1.0 then Arccos'Result = 0.0);\n \n    function Arctan\n      (Y : Float_Type'Base;\n       X : Float_Type'Base := 1.0) return Float_Type'Base\n    with\n+     Pre  => X /= 0.0 or Y /= 0.0,\n      Post => (if X > 0.0 and then Y = 0.0 then Arctan'Result = 0.0);\n \n    function Arctan\n      (Y     : Float_Type'Base;\n       X     : Float_Type'Base := 1.0;\n       Cycle : Float_Type'Base) return Float_Type'Base\n    with\n+     Pre  => Cycle > 0.0 and (X /= 0.0 or Y /= 0.0),\n      Post => (if X > 0.0 and then Y = 0.0 then Arctan'Result = 0.0);\n \n    function Arccot\n      (X   : Float_Type'Base;\n       Y   : Float_Type'Base := 1.0) return Float_Type'Base\n    with\n+     Pre  => X /= 0.0 or Y /= 0.0,\n      Post => (if X > 0.0 and then Y = 0.0 then Arccot'Result = 0.0);\n \n    function Arccot\n      (X     : Float_Type'Base;\n       Y     : Float_Type'Base := 1.0;\n       Cycle : Float_Type'Base) return Float_Type'Base\n    with\n+     Pre  => Cycle > 0.0 and (X /= 0.0 or Y /= 0.0),\n      Post => (if X > 0.0 and then Y = 0.0 then Arccot'Result = 0.0);\n \n    function Sinh (X : Float_Type'Base) return Float_Type'Base with\n@@ -155,18 +184,22 @@ is\n        and then (if X = 0.0 then Tanh'Result = 0.0);\n \n    function Coth (X : Float_Type'Base) return Float_Type'Base with\n+     Pre  => X /= 0.0,\n      Post => abs Coth'Result >= 1.0;\n \n    function Arcsinh (X : Float_Type'Base) return Float_Type'Base with\n      Post => (if X = 0.0 then Arcsinh'Result = 0.0);\n \n    function Arccosh (X : Float_Type'Base) return Float_Type'Base with\n+     Pre  => X >= 1.0,\n      Post => Arccosh'Result >= 0.0\n        and then (if X = 1.0 then Arccosh'Result = 0.0);\n \n    function Arctanh (X : Float_Type'Base) return Float_Type'Base with\n+     Pre  => abs X /= 1.0,\n      Post => (if X = 0.0 then Arctanh'Result = 0.0);\n \n-   function Arccoth (X : Float_Type'Base) return Float_Type'Base;\n+   function Arccoth (X : Float_Type'Base) return Float_Type'Base with\n+     Pre => X <= 1.0 and abs X /= 1.0;\n \n end Ada.Numerics.Generic_Elementary_Functions;"}, {"sha": "fd9978292039f6c98fbb0ac5e68eb81501878663", "filename": "gcc/ada/a-tags.adb", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fa-tags.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fa-tags.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tags.adb?ref=fe683ef6e1f215fa4836b0698c2b0265ff2da618", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -906,22 +906,16 @@ package body Ada.Tags is\n    -------------------------------\n \n    procedure Register_Interface_Offset\n-     (This         : System.Address;\n+     (Prim_T       : Tag;\n       Interface_T  : Tag;\n       Is_Static    : Boolean;\n       Offset_Value : SSE.Storage_Offset;\n       Offset_Func  : Offset_To_Top_Function_Ptr)\n    is\n-      Prim_DT     : Dispatch_Table_Ptr;\n-      Iface_Table : Interface_Data_Ptr;\n-\n+      Prim_DT     : constant Dispatch_Table_Ptr := DT (Prim_T);\n+      Iface_Table : constant Interface_Data_Ptr :=\n+                      To_Type_Specific_Data_Ptr (Prim_DT.TSD).Interfaces_Table;\n    begin\n-      --  \"This\" points to the primary DT and we must save Offset_Value in\n-      --  the Offset_To_Top field of the corresponding dispatch table.\n-\n-      Prim_DT     := DT (To_Tag_Ptr (This).all);\n-      Iface_Table := To_Type_Specific_Data_Ptr (Prim_DT.TSD).Interfaces_Table;\n-\n       --  Save Offset_Value in the table of interfaces of the primary DT.\n       --  This data will be used by the subprogram \"Displace\" to give support\n       --  to backward abstract interface type conversions.\n@@ -1008,6 +1002,7 @@ package body Ada.Tags is\n \n    procedure Set_Dynamic_Offset_To_Top\n      (This         : System.Address;\n+      Prim_T       : Tag;\n       Interface_T  : Tag;\n       Offset_Value : SSE.Storage_Offset;\n       Offset_Func  : Offset_To_Top_Function_Ptr)\n@@ -1025,7 +1020,7 @@ package body Ada.Tags is\n       end if;\n \n       Register_Interface_Offset\n-        (This, Interface_T, False, Offset_Value, Offset_Func);\n+        (Prim_T, Interface_T, False, Offset_Value, Offset_Func);\n    end Set_Dynamic_Offset_To_Top;\n \n    ----------------------"}, {"sha": "df578eb1839b6c499b9283db07630e81f23807cc", "filename": "gcc/ada/a-tags.ads", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fa-tags.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fa-tags.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tags.ads?ref=fe683ef6e1f215fa4836b0698c2b0265ff2da618", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -527,39 +527,43 @@ private\n    --  assumes that _size is always in slot one of the dispatch table.\n \n    procedure Register_Interface_Offset\n-     (This         : System.Address;\n+     (Prim_T       : Tag;\n       Interface_T  : Tag;\n       Is_Static    : Boolean;\n       Offset_Value : SSE.Storage_Offset;\n       Offset_Func  : Offset_To_Top_Function_Ptr);\n    --  Register in the table of interfaces of the tagged type associated with\n-   --  \"This\" object the offset of the record component associated with the\n-   --  progenitor Interface_T (that is, the distance from \"This\" to the object\n-   --  component containing the tag of the secondary dispatch table). In case\n-   --  of constant offset, Is_Static is true and Offset_Value has such value.\n-   --  In case of variable offset, Is_Static is false and Offset_Func is an\n-   --  access to function that must be called to evaluate the offset.\n+   --  Prim_T the offset of the record component associated with the progenitor\n+   --  Interface_T (that is, the distance from \"This\" to the object component\n+   --  containing the tag of the secondary dispatch table). In case of constant\n+   --  offset, Is_Static is true and Offset_Value has such value. In case of\n+   --  variable offset, Is_Static is false and Offset_Func is an access to\n+   --  function that must be called to evaluate the offset.\n \n    procedure Register_Tag (T : Tag);\n    --  Insert the Tag and its associated external_tag in a table for the sake\n    --  of Internal_Tag.\n \n    procedure Set_Dynamic_Offset_To_Top\n      (This         : System.Address;\n+      Prim_T       : Tag;\n       Interface_T  : Tag;\n       Offset_Value : SSE.Storage_Offset;\n       Offset_Func  : Offset_To_Top_Function_Ptr);\n    --  Ada 2005 (AI-251): The compiler generates calls to this routine only\n-   --  when initializing the Offset_To_Top field of dispatch tables associated\n-   --  with tagged type whose parent has variable size components. \"This\" is\n-   --  the object whose dispatch table is being initialized. Interface_T is the\n-   --  interface for which the secondary dispatch table is being initialized,\n-   --  and Offset_Value is the distance from \"This\" to the object component\n-   --  containing the tag of the secondary dispatch table (a zero value means\n-   --  that this interface shares the primary dispatch table). Offset_Func\n-   --  references a function that must be called to evaluate the offset at\n-   --  runtime. This routine also takes care of registering these values in\n-   --  the table of interfaces of the type.\n+   --  when initializing the Offset_To_Top field of dispatch tables of tagged\n+   --  types that cover interface types whose parent type has variable size\n+   --  components.\n+   --\n+   --  \"This\" is the object whose dispatch table is being initialized. Prim_T\n+   --  is the primary tag of such object. Interface_T is the interface tag for\n+   --  which the secondary dispatch table is being initialized, Offset_Value\n+   --  is the distance from \"This\" to the object component containing the tag\n+   --  of the secondary dispatch table (a zero value means that this interface\n+   --  shares the primary dispatch table). Offset_Func references a function\n+   --  that must be called to evaluate the offset at runtime. This routine also\n+   --  takes care of registering these values in the table of interfaces of the\n+   --  type.\n \n    procedure Set_Entry_Index (T : Tag; Position : Positive; Value : Positive);\n    --  Ada 2005 (AI-345): Set the entry index of a primitive operation in T's"}, {"sha": "9433669a6eb3d0e743a365cd71bfdd4f5df3458d", "filename": "gcc/ada/a-taside.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fa-taside.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fa-taside.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-taside.adb?ref=fe683ef6e1f215fa4836b0698c2b0265ff2da618", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -92,7 +92,11 @@ is\n    function Activation_Is_Complete (T : Task_Id) return Boolean is\n       use type System.Tasking.Task_Id;\n    begin\n-      return Convert_Ids (T).Common.Activator = null;\n+      if T = Null_Task_Id then\n+         raise Program_Error;\n+      else\n+         return Convert_Ids (T).Common.Activator = null;\n+      end if;\n    end Activation_Is_Complete;\n \n    -----------------"}, {"sha": "3ecf3229b8a47332f9f4c35e4737432948c8fc72", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=fe683ef6e1f215fa4836b0698c2b0265ff2da618", "patch": "@@ -249,6 +249,7 @@ package body Einfo is\n    --    BIP_Initialization_Call         Node29\n    --    Subprograms_For_Type            Elist29\n \n+   --    Access_Disp_Table_Elab_Flag     Node30\n    --    Anonymous_Object                Node30\n    --    Corresponding_Equality          Node30\n    --    Last_Aggregate_Assignment       Node30\n@@ -724,6 +725,14 @@ package body Einfo is\n       return Elist16 (Implementation_Base_Type (Id));\n    end Access_Disp_Table;\n \n+   function Access_Disp_Table_Elab_Flag (Id : E) return E is\n+   begin\n+      pragma Assert (Ekind_In (Id, E_Record_Type,\n+                                   E_Record_Type_With_Private,\n+                                   E_Record_Subtype));\n+      return Node30 (Implementation_Base_Type (Id));\n+   end Access_Disp_Table_Elab_Flag;\n+\n    function Activation_Record_Component (Id : E) return E is\n    begin\n       pragma Assert (Ekind_In (Id, E_Constant,\n@@ -3817,6 +3826,14 @@ package body Einfo is\n       Set_Elist16 (Id, V);\n    end Set_Access_Disp_Table;\n \n+   procedure Set_Access_Disp_Table_Elab_Flag (Id : E; V : E) is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Record_Type\n+        and then Id = Implementation_Base_Type (Id));\n+      pragma Assert (Is_Tagged_Type (Id));\n+      Set_Node30 (Id, V);\n+   end Set_Access_Disp_Table_Elab_Flag;\n+\n    procedure Set_Anonymous_Designated_Type (Id : E; V : E) is\n    begin\n       pragma Assert (Ekind (Id) = E_Variable);\n@@ -10855,6 +10872,11 @@ package body Einfo is\n    procedure Write_Field30_Name (Id : Entity_Id) is\n    begin\n       case Ekind (Id) is\n+         when E_Record_Type\n+            | E_Record_Type_With_Private\n+         =>\n+            Write_Str (\"Access_Disp_Table_Elab_Flag\");\n+\n          when E_Protected_Type\n             | E_Task_Type\n          =>"}, {"sha": "928ea3c475c676a249ebe308ad3c9a38e10e693a", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=fe683ef6e1f215fa4836b0698c2b0265ff2da618", "patch": "@@ -355,6 +355,14 @@ package Einfo is\n --       used to expand dispatching calls through the primary dispatch table.\n --       For an untagged record, contains No_Elist.\n \n+--    Access_Disp_Table_Elab_Flag (Node30) [implementation base type only]\n+--       Defined in E_Record_Type and E_Record_Subtype entities. Set in tagged\n+--       types whose dispatch table elaboration must be completed at runtime by\n+--       the IP routine to point to its pending elaboration flag entity. This\n+--       flag is needed when the elaboration of the dispatch table relies on\n+--       attribute 'Position applied to an object of the type; it is used by\n+--       the IP routine to avoid performing this elaboration twice.\n+\n --    Activation_Record_Component (Node31)\n --       Defined in E_Variable, E_Constant, E_Loop_Parameter, E_In_Parameter,\n --       E_Out_Parameter, E_In_Out_Parameter nodes. Used only if we are in\n@@ -6466,6 +6474,7 @@ package Einfo is\n    --  E_Record_Subtype\n    --    Direct_Primitive_Operations         (Elist10)\n    --    Access_Disp_Table                   (Elist16)  (base type only)\n+   --    Access_Disp_Table_Elab_Flag         (Node30)   (base type only)\n    --    Cloned_Subtype                      (Node16)   (subtype case only)\n    --    First_Entity                        (Node17)\n    --    Corresponding_Concurrent_Type       (Node18)\n@@ -6911,6 +6920,7 @@ package Einfo is\n    function Abstract_States                     (Id : E) return L;\n    function Accept_Address                      (Id : E) return L;\n    function Access_Disp_Table                   (Id : E) return L;\n+   function Access_Disp_Table_Elab_Flag         (Id : E) return E;\n    function Activation_Record_Component         (Id : E) return E;\n    function Actual_Subtype                      (Id : E) return E;\n    function Address_Taken                       (Id : E) return B;\n@@ -7602,6 +7612,7 @@ package Einfo is\n    procedure Set_Abstract_States                 (Id : E; V : L);\n    procedure Set_Accept_Address                  (Id : E; V : L);\n    procedure Set_Access_Disp_Table               (Id : E; V : L);\n+   procedure Set_Access_Disp_Table_Elab_Flag     (Id : E; V : E);\n    procedure Set_Activation_Record_Component     (Id : E; V : E);\n    procedure Set_Actual_Subtype                  (Id : E; V : E);\n    procedure Set_Address_Taken                   (Id : E; V : B := True);\n@@ -8415,6 +8426,7 @@ package Einfo is\n    pragma Inline (Abstract_States);\n    pragma Inline (Accept_Address);\n    pragma Inline (Access_Disp_Table);\n+   pragma Inline (Access_Disp_Table_Elab_Flag);\n    pragma Inline (Activation_Record_Component);\n    pragma Inline (Actual_Subtype);\n    pragma Inline (Address_Taken);\n@@ -8941,6 +8953,7 @@ package Einfo is\n    pragma Inline (Set_Abstract_States);\n    pragma Inline (Set_Accept_Address);\n    pragma Inline (Set_Access_Disp_Table);\n+   pragma Inline (Set_Access_Disp_Table_Elab_Flag);\n    pragma Inline (Set_Activation_Record_Component);\n    pragma Inline (Set_Actual_Subtype);\n    pragma Inline (Set_Address_Taken);"}, {"sha": "71f2840b63b7d7568aa686a0e9b3cacedf5e9811", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=fe683ef6e1f215fa4836b0698c2b0265ff2da618", "patch": "@@ -3324,7 +3324,8 @@ package body Exp_Aggr is\n                      Init_Secondary_Tags\n                        (Typ        => Base_Type (Typ),\n                         Target     => Target,\n-                        Stmts_List => Assign);\n+                        Stmts_List => Assign,\n+                        Init_Tags_List => Assign);\n                   end if;\n                end if;\n \n@@ -3859,7 +3860,8 @@ package body Exp_Aggr is\n             Init_Secondary_Tags\n               (Typ        => Base_Type (Typ),\n                Target     => Target,\n-               Stmts_List => L);\n+               Stmts_List => L,\n+               Init_Tags_List => L);\n          end if;\n       end if;\n "}, {"sha": "69db5dd6a44ddbff24047b9275c4de65d68b3266", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 52, "deletions": 18, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=fe683ef6e1f215fa4836b0698c2b0265ff2da618", "patch": "@@ -2475,18 +2475,44 @@ package body Exp_Ch3 is\n                  and then not Is_Interface (Rec_Type)\n                  and then Has_Interfaces (Rec_Type)\n                then\n-                  Init_Secondary_Tags\n-                    (Typ            => Rec_Type,\n-                     Target         => Make_Identifier (Loc, Name_uInit),\n-                     Stmts_List     => Init_Tags_List,\n-                     Fixed_Comps    => True,\n-                     Variable_Comps => False);\n-               end if;\n+                  declare\n+                     Elab_Sec_DT_Stmts_List : constant List_Id := New_List;\n \n-               Prepend_To (Body_Stmts,\n-                 Make_If_Statement (Loc,\n-                   Condition => New_Occurrence_Of (Set_Tag, Loc),\n-                   Then_Statements => Init_Tags_List));\n+                  begin\n+                     Init_Secondary_Tags\n+                       (Typ            => Rec_Type,\n+                        Target         => Make_Identifier (Loc, Name_uInit),\n+                        Init_Tags_List => Init_Tags_List,\n+                        Stmts_List     => Elab_Sec_DT_Stmts_List,\n+                        Fixed_Comps    => True,\n+                        Variable_Comps => False);\n+\n+                     Append_To (Elab_Sec_DT_Stmts_List,\n+                       Make_Assignment_Statement (Loc,\n+                         Name =>\n+                           New_Occurrence_Of\n+                             (Access_Disp_Table_Elab_Flag (Rec_Type), Loc),\n+                         Expression =>\n+                           New_Occurrence_Of (Standard_False, Loc)));\n+\n+                     Prepend_List_To (Body_Stmts,\n+                       New_List (\n+                         Make_If_Statement (Loc,\n+                           Condition => New_Occurrence_Of (Set_Tag, Loc),\n+                           Then_Statements => Init_Tags_List),\n+\n+                       Make_If_Statement (Loc,\n+                         Condition =>\n+                           New_Occurrence_Of\n+                             (Access_Disp_Table_Elab_Flag (Rec_Type), Loc),\n+                         Then_Statements => Elab_Sec_DT_Stmts_List)));\n+                  end;\n+               else\n+                  Prepend_To (Body_Stmts,\n+                    Make_If_Statement (Loc,\n+                      Condition => New_Occurrence_Of (Set_Tag, Loc),\n+                      Then_Statements => Init_Tags_List));\n+               end if;\n \n             --  Case 2: CPP type. The imported C++ constructor takes care of\n             --  tags initialization. No action needed here because the IP\n@@ -2533,6 +2559,7 @@ package body Exp_Ch3 is\n                   Init_Secondary_Tags\n                     (Typ            => Rec_Type,\n                      Target         => Make_Identifier (Loc, Name_uInit),\n+                     Init_Tags_List => Init_Tags_List,\n                      Stmts_List     => Init_Tags_List,\n                      Fixed_Comps    => True,\n                      Variable_Comps => False);\n@@ -2606,6 +2633,7 @@ package body Exp_Ch3 is\n                Init_Secondary_Tags\n                  (Typ            => Rec_Type,\n                   Target         => Make_Identifier (Loc, Name_uInit),\n+                  Init_Tags_List => Init_Tags_List,\n                   Stmts_List     => Init_Tags_List,\n                   Fixed_Comps    => False,\n                   Variable_Comps => True);\n@@ -8119,6 +8147,7 @@ package body Exp_Ch3 is\n    procedure Init_Secondary_Tags\n      (Typ            : Entity_Id;\n       Target         : Node_Id;\n+      Init_Tags_List : List_Id;\n       Stmts_List     : List_Id;\n       Fixed_Comps    : Boolean := True;\n       Variable_Comps : Boolean := True)\n@@ -8156,7 +8185,7 @@ package body Exp_Ch3 is\n          --  Initialize pointer to secondary DT associated with the interface\n \n          if not Is_Ancestor (Iface, Typ, Use_Full_View => True) then\n-            Append_To (Stmts_List,\n+            Append_To (Init_Tags_List,\n               Make_Assignment_Statement (Loc,\n                 Name       =>\n                   Make_Selected_Component (Loc,\n@@ -8190,6 +8219,7 @@ package body Exp_Ch3 is\n             --  Generate:\n             --    Set_Dynamic_Offset_To_Top\n             --      (This         => Init,\n+            --       Prim_T       => Typ'Tag,\n             --       Interface_T  => Iface'Tag,\n             --       Offset_Value => n,\n             --       Offset_Func  => Fn'Address)\n@@ -8203,6 +8233,10 @@ package body Exp_Ch3 is\n                     Prefix         => New_Copy_Tree (Target),\n                     Attribute_Name => Name_Address),\n \n+                  Unchecked_Convert_To (RTE (RE_Tag),\n+                    New_Occurrence_Of\n+                      (Node (First_Elmt (Access_Disp_Table (Typ))), Loc)),\n+\n                   Unchecked_Convert_To (RTE (RE_Tag),\n                     New_Occurrence_Of\n                       (Node (First_Elmt (Access_Disp_Table (Iface))),\n@@ -8230,7 +8264,7 @@ package body Exp_Ch3 is\n             Offset_To_Top_Comp := Next_Entity (Tag_Comp);\n             pragma Assert (Present (Offset_To_Top_Comp));\n \n-            Append_To (Stmts_List,\n+            Append_To (Init_Tags_List,\n               Make_Assignment_Statement (Loc,\n                 Name       =>\n                   Make_Selected_Component (Loc,\n@@ -8269,7 +8303,7 @@ package body Exp_Ch3 is\n \n             --  Generate:\n             --    Register_Interface_Offset\n-            --      (This         => Init,\n+            --      (Prim_T       => Typ'Tag,\n             --       Interface_T  => Iface'Tag,\n             --       Is_Constant  => True,\n             --       Offset_Value => n,\n@@ -8282,9 +8316,9 @@ package body Exp_Ch3 is\n                      New_Occurrence_Of\n                        (RTE (RE_Register_Interface_Offset), Loc),\n                    Parameter_Associations => New_List (\n-                     Make_Attribute_Reference (Loc,\n-                       Prefix         => New_Copy_Tree (Target),\n-                       Attribute_Name => Name_Address),\n+                     Unchecked_Convert_To (RTE (RE_Tag),\n+                       New_Occurrence_Of\n+                         (Node (First_Elmt (Access_Disp_Table (Typ))), Loc)),\n \n                      Unchecked_Convert_To (RTE (RE_Tag),\n                        New_Occurrence_Of\n@@ -8403,7 +8437,7 @@ package body Exp_Ch3 is\n             --  Initialize secondary tags\n \n             else\n-               Append_To (Stmts_List,\n+               Append_To (Init_Tags_List,\n                  Make_Assignment_Statement (Loc,\n                    Name =>\n                      Make_Selected_Component (Loc,"}, {"sha": "c1e6798a1daa14e97e2166d6cd90a72c96498661", "filename": "gcc/ada/exp_ch3.ads", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fexp_ch3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fexp_ch3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.ads?ref=fe683ef6e1f215fa4836b0698c2b0265ff2da618", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -94,15 +94,17 @@ package Exp_Ch3 is\n    procedure Init_Secondary_Tags\n      (Typ            : Entity_Id;\n       Target         : Node_Id;\n+      Init_Tags_List : List_Id;\n       Stmts_List     : List_Id;\n       Fixed_Comps    : Boolean := True;\n       Variable_Comps : Boolean := True);\n    --  Ada 2005 (AI-251): Initialize the tags of the secondary dispatch tables\n    --  of Typ. The generated code referencing tag fields of Target is appended\n-   --  to Stmts_List. If Fixed_Comps is True then the tag components located at\n-   --  fixed positions of Target are initialized; if Variable_Comps is True\n-   --  then tags components located at variable positions of Target are\n-   --  initialized.\n+   --  to Init_Tags_List and the code required to complete the elaboration of\n+   --  the dispatch tables of Typ is appended to Stmts_List. If Fixed_Comps is\n+   --  True then the tag components located at fixed positions of Target are\n+   --  initialized; if Variable_Comps is True then tags components located at\n+   --  variable positions of Target are initialized.\n \n    function Make_Tag_Assignment (N : Node_Id) return Node_Id;\n    --  An object declaration that has an initialization for a tagged object"}, {"sha": "77833548cd2190cf93b976f5d89bafa572afc52f", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=fe683ef6e1f215fa4836b0698c2b0265ff2da618", "patch": "@@ -625,6 +625,17 @@ package body Exp_Disp is\n       raise Program_Error;\n    end Default_Prim_Op_Position;\n \n+   ----------------------\n+   -- Elab_Flag_Needed --\n+   ----------------------\n+\n+   function Elab_Flag_Needed (Typ : Entity_Id) return Boolean is\n+   begin\n+      return Ada_Version >= Ada_2005\n+        and then not Is_Interface (Typ)\n+        and then Has_Interfaces (Typ);\n+   end Elab_Flag_Needed;\n+\n    -----------------------------\n    -- Expand_Dispatching_Call --\n    -----------------------------\n@@ -6670,6 +6681,24 @@ package body Exp_Disp is\n       pragma Assert (No (Access_Disp_Table (Typ)));\n       Set_Access_Disp_Table (Typ, New_Elmt_List);\n \n+      --  If the elaboration of this tagged type needs a boolean flag then\n+      --  define now its entity. It is initialized to True to indicate that\n+      --  elaboration is still pending; set to False by the IP routine.\n+\n+      --      TypFxx : boolean := True;\n+\n+      if Elab_Flag_Needed (Typ) then\n+         Set_Access_Disp_Table_Elab_Flag (Typ,\n+           Make_Defining_Identifier (Loc,\n+             New_External_Name (Tname, 'F', Suffix_Index => -1)));\n+\n+         Append_To (Result,\n+           Make_Object_Declaration (Loc,\n+             Defining_Identifier => Access_Disp_Table_Elab_Flag (Typ),\n+             Object_Definition   => New_Occurrence_Of (Standard_Boolean, Loc),\n+             Expression          => New_Occurrence_Of (Standard_True, Loc)));\n+      end if;\n+\n       --  1) Generate the primary tag entities\n \n       --  Primary dispatch table containing user-defined primitives"}, {"sha": "7cb56d8829e6e88800096f73d37a371d6f039cc7", "filename": "gcc/ada/exp_disp.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fexp_disp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fexp_disp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.ads?ref=fe683ef6e1f215fa4836b0698c2b0265ff2da618", "patch": "@@ -214,6 +214,12 @@ package Exp_Disp is\n    --  Return the number of primitives of the C++ part of the dispatch table.\n    --  For types that are not derivations of CPP types return 0.\n \n+   function Elab_Flag_Needed (Typ : Entity_Id) return Boolean;\n+   --  Return True if the elaboration of the tagged type Typ is completed at\n+   --  runtime by the execution of code located in the IP routine and the\n+   --  expander must generate an extra elaboration flag to avoid performing\n+   --  such elaboration twice.\n+\n    procedure Expand_Dispatching_Call (Call_Node : Node_Id);\n    --  Expand the call to the operation through the dispatch table and perform\n    --  the required tag checks when appropriate. For CPP types tag checks are"}, {"sha": "6640d6a0f8e846974f4ced99734a31e30b5401d9", "filename": "gcc/ada/ghost.adb", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fghost.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fghost.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fghost.adb?ref=fe683ef6e1f215fa4836b0698c2b0265ff2da618", "patch": "@@ -1303,6 +1303,43 @@ package body Ghost is\n      (N      : Node_Id;\n       Gen_Id : Entity_Id)\n    is\n+      procedure Check_Ghost_Actuals;\n+      --  Check the context of ghost actuals\n+\n+      -------------------------\n+      -- Check_Ghost_Actuals --\n+      -------------------------\n+\n+      procedure Check_Ghost_Actuals is\n+         Assoc : Node_Id := First (Generic_Associations (N));\n+         Act   : Node_Id;\n+\n+      begin\n+         while Present (Assoc) loop\n+            if Nkind (Assoc) /= N_Others_Choice then\n+               Act := Explicit_Generic_Actual_Parameter (Assoc);\n+\n+               --  Within a nested instantiation, a defaulted actual is an\n+               --  empty association, so nothing to check.\n+\n+               if No (Act) then\n+                  null;\n+\n+               elsif Comes_From_Source (Act)\n+                  and then Nkind (Act) in N_Has_Etype\n+                  and then Present (Etype (Act))\n+                  and then Is_Ghost_Entity (Etype (Act))\n+               then\n+                  Check_Ghost_Context (Etype (Act), Act);\n+               end if;\n+            end if;\n+\n+            Next (Assoc);\n+         end loop;\n+      end Check_Ghost_Actuals;\n+\n+      --  Local variables\n+\n       Policy : Name_Id := No_Name;\n \n    begin\n@@ -1336,6 +1373,13 @@ package body Ghost is\n       --  Install the appropriate Ghost mode\n \n       Install_Ghost_Mode (Policy);\n+\n+      --  Check ghost actuals. Given that this routine is unconditionally\n+      --  invoked with subprogram and package instantiations, this check\n+      --  verifies the context of all the ghost entities passed in generic\n+      --  instantiations.\n+\n+      Check_Ghost_Actuals;\n    end Mark_And_Set_Ghost_Instantiation;\n \n    ---------------------------------------"}, {"sha": "9cc54ebb958c9fd0bfc8bc47273362d68e27c539", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=fe683ef6e1f215fa4836b0698c2b0265ff2da618", "patch": "@@ -1126,6 +1126,19 @@ package body Lib.Xref is\n          --  Comment needed here for special SPARK code ???\n \n          if GNATprove_Mode then\n+            --  Ignore reference to an entity that is a Part_Of single\n+            --  concurrent object. Ideally we would prefer to add it as a\n+            --  reference to the corresponding concurrent type, but it is quite\n+            --  difficult (as such references are not currently added even for)\n+            --  reads/writes of private protected components) and not worth the\n+            --  effort.\n+            if Ekind_In (Ent, E_Abstract_State, E_Constant, E_Variable)\n+              and then Present (Encapsulating_State (Ent))\n+              and then Is_Single_Concurrent_Object (Encapsulating_State (Ent))\n+            then\n+               return;\n+            end if;\n+\n             Ref := Sloc (Nod);\n             Def := Sloc (Ent);\n "}, {"sha": "f20cfbebe7e2a41b383ac507a7c3661634cdced7", "filename": "gcc/ada/s-parame-hpux.ads", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fs-parame-hpux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fs-parame-hpux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-parame-hpux.ads?ref=fe683ef6e1f215fa4836b0698c2b0265ff2da618", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -181,15 +181,6 @@ package System.Parameters is\n    Max_Attribute_Count : constant := 32;\n    --  Number of task attributes stored in the task control block\n \n-   --------------------\n-   -- Runtime Traces --\n-   --------------------\n-\n-   Runtime_Traces : constant Boolean := False;\n-   --  This constant indicates whether the runtime outputs traces to a\n-   --  predefined output or not (True means that traces are output).\n-   --  See System.Traces for more details.\n-\n    -----------------------\n    -- Task Image Length --\n    -----------------------"}, {"sha": "919361ad10d63642fe4657e64dd12311cd7115fb", "filename": "gcc/ada/s-parame-vxworks.ads", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fs-parame-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fs-parame-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-parame-vxworks.ads?ref=fe683ef6e1f215fa4836b0698c2b0265ff2da618", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -183,15 +183,6 @@ package System.Parameters is\n    Max_Attribute_Count : constant := 16;\n    --  Number of task attributes stored in the task control block\n \n-   --------------------\n-   -- Runtime Traces --\n-   --------------------\n-\n-   Runtime_Traces : constant Boolean := False;\n-   --  This constant indicates whether the runtime outputs traces to a\n-   --  predefined output or not (True means that traces are output).\n-   --  See System.Traces for more details.\n-\n    -----------------------\n    -- Task Image Length --\n    -----------------------"}, {"sha": "f48c7e0973f6f284f305f602fb652284550af188", "filename": "gcc/ada/s-parame.ads", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fs-parame.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fs-parame.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-parame.ads?ref=fe683ef6e1f215fa4836b0698c2b0265ff2da618", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -183,15 +183,6 @@ package System.Parameters is\n    Max_Attribute_Count : constant := 32;\n    --  Number of task attributes stored in the task control block\n \n-   --------------------\n-   -- Runtime Traces --\n-   --------------------\n-\n-   Runtime_Traces : constant Boolean := False;\n-   --  This constant indicates whether the runtime outputs traces to a\n-   --  predefined output or not (True means that traces are output).\n-   --  See System.Traces for more details.\n-\n    -----------------------\n    -- Task Image Length --\n    -----------------------"}, {"sha": "cab0be7b13ecd0e153959d68ad4e84961a30c0ee", "filename": "gcc/ada/s-taasde.adb", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fs-taasde.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fs-taasde.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taasde.adb?ref=fe683ef6e1f215fa4836b0698c2b0265ff2da618", "patch": "@@ -42,8 +42,6 @@ with System.Tasking.Initialization;\n with System.Tasking.Debug;\n with System.OS_Primitives;\n with System.Interrupt_Management.Operations;\n-with System.Parameters;\n-with System.Traces.Tasking;\n \n package body System.Tasking.Async_Delays is\n \n@@ -54,8 +52,6 @@ package body System.Tasking.Async_Delays is\n    package OSP renames System.OS_Primitives;\n \n    use Parameters;\n-   use System.Traces;\n-   use System.Traces.Tasking;\n \n    function To_System is new Ada.Unchecked_Conversion\n      (Ada.Task_Identification.Task_Id, Task_Id);\n@@ -369,10 +365,6 @@ package body System.Tasking.Async_Delays is\n             --  the timer queue, but that is OK because we always restart the\n             --  next iteration at the head of the queue.\n \n-            if Parameters.Runtime_Traces then\n-               Send_Trace_Info (E_Kill, Dequeued.Self_Id);\n-            end if;\n-\n             STPO.Unlock (Timer_Server_ID);\n             STPO.Write_Lock (Dequeued.Self_Id);\n             Dequeued_Task := Dequeued.Self_Id;"}, {"sha": "1236194441cdac9797f507d83ee9d593da2a10b2", "filename": "gcc/ada/s-taenca.adb", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fs-taenca.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fs-taenca.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taenca.adb?ref=fe683ef6e1f215fa4836b0698c2b0265ff2da618", "patch": "@@ -36,7 +36,6 @@ with System.Tasking.Protected_Objects.Operations;\n with System.Tasking.Queuing;\n with System.Tasking.Utilities;\n with System.Parameters;\n-with System.Traces;\n \n package body System.Tasking.Entry_Calls is\n \n@@ -46,7 +45,6 @@ package body System.Tasking.Entry_Calls is\n    use Task_Primitives;\n    use Protected_Objects.Entries;\n    use Protected_Objects.Operations;\n-   use System.Traces;\n \n    --  DO NOT use Protected_Objects.Lock or Protected_Objects.Unlock\n    --  internally. Those operations will raise Program_Error, which\n@@ -478,10 +476,6 @@ package body System.Tasking.Entry_Calls is\n       --  If this is a conditional call, it should be cancelled when it\n       --  becomes abortable. This is checked in the loop below.\n \n-      if Parameters.Runtime_Traces then\n-         Send_Trace_Info (W_Completion);\n-      end if;\n-\n       Self_Id.Common.State := Entry_Caller_Sleep;\n \n       --  Try to remove calls to Sleep in the loop below by letting the caller\n@@ -515,9 +509,6 @@ package body System.Tasking.Entry_Calls is\n       Self_Id.Common.State := Runnable;\n       Utilities.Exit_One_ATC_Level (Self_Id);\n \n-      if Parameters.Runtime_Traces then\n-         Send_Trace_Info (M_Call_Complete);\n-      end if;\n    end Wait_For_Completion;\n \n    --------------------------------------\n@@ -567,10 +558,6 @@ package body System.Tasking.Entry_Calls is\n       --  is allowed to wake up at any time, not just when the condition is\n       --  signaled. See same loop in the ordinary Wait_For_Completion, above.\n \n-      if Parameters.Runtime_Traces then\n-         Send_Trace_Info (WT_Completion, Wakeup_Time);\n-      end if;\n-\n       loop\n          Check_Pending_Actions_For_Entry_Call (Self_Id, Entry_Call);\n          exit when Entry_Call.State >= Done;\n@@ -579,10 +566,6 @@ package body System.Tasking.Entry_Calls is\n            Entry_Caller_Sleep, Timedout, Yielded);\n \n          if Timedout then\n-            if Parameters.Runtime_Traces then\n-               Send_Trace_Info (E_Timeout);\n-            end if;\n-\n             --  Try to cancel the call (see Try_To_Cancel_Entry_Call for\n             --  corresponding code in the ATC case).\n \n@@ -620,10 +603,6 @@ package body System.Tasking.Entry_Calls is\n       --  This last part is the same as ordinary Wait_For_Completion,\n       --  and is only executed if the call completed without timing out.\n \n-      if Parameters.Runtime_Traces then\n-         Send_Trace_Info (M_Call_Complete);\n-      end if;\n-\n       Self_Id.Common.State := Runnable;\n       Utilities.Exit_One_ATC_Level (Self_Id);\n    end Wait_For_Completion_With_Timeout;\n@@ -640,10 +619,6 @@ package body System.Tasking.Entry_Calls is\n       pragma Assert (Self_ID.ATC_Nesting_Level > 0);\n       pragma Assert (Call.Mode = Asynchronous_Call);\n \n-      if Parameters.Runtime_Traces then\n-         Send_Trace_Info (W_Completion);\n-      end if;\n-\n       STPO.Write_Lock (Self_ID);\n       Self_ID.Common.State := Entry_Caller_Sleep;\n \n@@ -656,9 +631,6 @@ package body System.Tasking.Entry_Calls is\n       Self_ID.Common.State := Runnable;\n       STPO.Unlock (Self_ID);\n \n-      if Parameters.Runtime_Traces then\n-         Send_Trace_Info (M_Call_Complete);\n-      end if;\n    end Wait_Until_Abortable;\n \n end System.Tasking.Entry_Calls;"}, {"sha": "8ba5198cce7afd6cc041f8f2554f0bccdd77b8fd", "filename": "gcc/ada/s-taprob.adb", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fs-taprob.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fs-taprob.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprob.adb?ref=fe683ef6e1f215fa4836b0698c2b0265ff2da618", "patch": "@@ -6,8 +6,8 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---            Copyright (C) 1991-1994, Florida State University             --\n---                     Copyright (C) 1995-2014, AdaCore                     --\n+--            Copyright (C) 1991-1997, Florida State University             --\n+--                     Copyright (C) 1995-2017, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,8 +35,6 @@ pragma Polling (Off);\n --  operations. It causes infinite loops and other problems.\n \n with System.Task_Primitives.Operations;\n-with System.Parameters;\n-with System.Traces;\n with System.Soft_Links.Tasking;\n \n with System.Secondary_Stack;\n@@ -48,7 +46,6 @@ pragma Unreferenced (System.Secondary_Stack);\n package body System.Tasking.Protected_Objects is\n \n    use System.Task_Primitives.Operations;\n-   use System.Traces;\n \n    ----------------\n    -- Local Data --\n@@ -128,10 +125,6 @@ package body System.Tasking.Protected_Objects is\n \n       Write_Lock (Object.L'Access, Ceiling_Violation);\n \n-      if Parameters.Runtime_Traces then\n-         Send_Trace_Info (PO_Lock);\n-      end if;\n-\n       if Ceiling_Violation then\n          raise Program_Error;\n       end if;\n@@ -185,10 +178,6 @@ package body System.Tasking.Protected_Objects is\n \n       Read_Lock (Object.L'Access, Ceiling_Violation);\n \n-      if Parameters.Runtime_Traces then\n-         Send_Trace_Info (PO_Lock);\n-      end if;\n-\n       if Ceiling_Violation then\n          raise Program_Error;\n       end if;\n@@ -271,9 +260,6 @@ package body System.Tasking.Protected_Objects is\n \n       Unlock (Object.L'Access);\n \n-      if Parameters.Runtime_Traces then\n-         Send_Trace_Info (PO_Unlock);\n-      end if;\n    end Unlock;\n \n begin"}, {"sha": "c1b35482c4137b330960204c97b051db6d8af865", "filename": "gcc/ada/s-tasren.adb", "status": "modified", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fs-tasren.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fs-tasren.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasren.adb?ref=fe683ef6e1f215fa4836b0698c2b0265ff2da618", "patch": "@@ -38,7 +38,6 @@ with System.Tasking.Protected_Objects.Operations;\n with System.Tasking.Debug;\n with System.Restrictions;\n with System.Parameters;\n-with System.Traces.Tasking;\n \n package body System.Tasking.Rendezvous is\n \n@@ -48,8 +47,6 @@ package body System.Tasking.Rendezvous is\n \n    use Parameters;\n    use Task_Primitives.Operations;\n-   use System.Traces;\n-   use System.Traces.Tasking;\n \n    type Select_Treatment is (\n      Accept_Alternative_Selected,   --  alternative with non-null body\n@@ -200,10 +197,6 @@ package body System.Tasking.Rendezvous is\n \n          --  Wait for normal call\n \n-         if Parameters.Runtime_Traces then\n-            Send_Trace_Info (W_Accept, Self_Id, Integer (Open_Accepts'Length));\n-         end if;\n-\n          pragma Debug\n            (Debug.Trace (Self_Id, \"Accept_Call: wait\", 'R'));\n          Wait_For_Call (Self_Id);\n@@ -232,9 +225,6 @@ package body System.Tasking.Rendezvous is\n \n       Initialization.Undefer_Abort (Self_Id);\n \n-      if Parameters.Runtime_Traces then\n-         Send_Trace_Info (M_Accept_Complete, Caller, Entry_Index (E));\n-      end if;\n    end Accept_Call;\n \n    --------------------\n@@ -285,10 +275,6 @@ package body System.Tasking.Rendezvous is\n          Open_Accepts (1).S := E;\n          Self_Id.Open_Accepts := Open_Accepts'Unrestricted_Access;\n \n-         if Parameters.Runtime_Traces then\n-            Send_Trace_Info (W_Accept, Self_Id, Integer (Open_Accepts'Length));\n-         end if;\n-\n          pragma Debug\n           (Debug.Trace (Self_Id, \"Accept_Trivial: wait\", 'R'));\n \n@@ -314,15 +300,6 @@ package body System.Tasking.Rendezvous is\n          STPO.Unlock (Caller);\n       end if;\n \n-      if Parameters.Runtime_Traces then\n-         Send_Trace_Info (M_Accept_Complete);\n-\n-         --  Fake one, since there is (???) no way to know that the rendezvous\n-         --  is over.\n-\n-         Send_Trace_Info (M_RDV_Complete);\n-      end if;\n-\n       if Single_Lock then\n          Unlock_RTS;\n       end if;\n@@ -404,10 +381,6 @@ package body System.Tasking.Rendezvous is\n       Entry_Call.Mode := Mode;\n       Entry_Call.Cancellation_Attempted := False;\n \n-      if Parameters.Runtime_Traces then\n-         Send_Trace_Info (W_Call, Acceptor, Entry_Index (E));\n-      end if;\n-\n       --  If this is a call made inside of an abort deferred region,\n       --  the call should be never abortable.\n \n@@ -438,10 +411,6 @@ package body System.Tasking.Rendezvous is\n             Unlock_RTS;\n          end if;\n \n-         if Parameters.Runtime_Traces then\n-            Send_Trace_Info (E_Missed, Acceptor);\n-         end if;\n-\n          Local_Undefer_Abort (Self_Id);\n          raise Tasking_Error;\n       end if;\n@@ -560,10 +529,6 @@ package body System.Tasking.Rendezvous is\n          --  The call came from normal end-of-rendezvous, so abort is not yet\n          --  deferred.\n \n-         if Parameters.Runtime_Traces then\n-            Send_Trace_Info (M_RDV_Complete, Entry_Call.Self);\n-         end if;\n-\n          Initialization.Defer_Abort (Self_Id);\n \n       elsif ZCX_By_Default then\n@@ -848,10 +813,6 @@ package body System.Tasking.Rendezvous is\n \n             --  Accept body is null, so rendezvous is over immediately\n \n-            if Parameters.Runtime_Traces then\n-               Send_Trace_Info (M_RDV_Complete, Entry_Call.Self);\n-            end if;\n-\n             STPO.Unlock (Self_Id);\n             Caller := Entry_Call.Self;\n \n@@ -867,11 +828,6 @@ package body System.Tasking.Rendezvous is\n             pragma Debug\n               (Debug.Trace (Self_Id, \"Selective_Wait: wait\", 'R'));\n \n-            if Parameters.Runtime_Traces then\n-               Send_Trace_Info (W_Select, Self_Id,\n-                                Integer (Open_Accepts'Length));\n-            end if;\n-\n             Wait_For_Call (Self_Id);\n \n             pragma Assert (Self_Id.Open_Accepts = null);\n@@ -908,10 +864,6 @@ package body System.Tasking.Rendezvous is\n          when Else_Selected =>\n             pragma Assert (Self_Id.Open_Accepts = null);\n \n-            if Parameters.Runtime_Traces then\n-               Send_Trace_Info (M_Select_Else);\n-            end if;\n-\n             STPO.Unlock (Self_Id);\n \n          when Terminate_Selected =>\n@@ -1320,10 +1272,6 @@ package body System.Tasking.Rendezvous is\n            \"potentially blocking operation\";\n       end if;\n \n-      if Parameters.Runtime_Traces then\n-         Send_Trace_Info (W_Call, Acceptor, Entry_Index (E));\n-      end if;\n-\n       if Mode = Simple_Call or else Mode = Conditional_Call then\n          Call_Synchronous\n            (Acceptor, E, Uninterpreted_Data, Mode, Rendezvous_Successful);\n@@ -1369,10 +1317,6 @@ package body System.Tasking.Rendezvous is\n \n             Initialization.Undefer_Abort (Self_Id);\n \n-            if Parameters.Runtime_Traces then\n-               Send_Trace_Info (E_Missed, Acceptor);\n-            end if;\n-\n             raise Tasking_Error;\n          end if;\n \n@@ -1514,10 +1458,6 @@ package body System.Tasking.Rendezvous is\n \n             --  Rendezvous is over\n \n-            if Parameters.Runtime_Traces then\n-               Send_Trace_Info (M_RDV_Complete, Entry_Call.Self);\n-            end if;\n-\n             STPO.Unlock (Self_Id);\n             Caller := Entry_Call.Self;\n \n@@ -1568,23 +1508,12 @@ package body System.Tasking.Rendezvous is\n                if Timedout then\n                   Sleep (Self_Id, Acceptor_Delay_Sleep);\n                else\n-                  if Parameters.Runtime_Traces then\n-                     Send_Trace_Info (WT_Select,\n-                                      Self_Id,\n-                                      Integer (Open_Accepts'Length),\n-                                      Timeout);\n-                  end if;\n-\n                   STPO.Timed_Sleep (Self_Id, Timeout, Mode,\n                     Acceptor_Delay_Sleep, Timedout, Yielded);\n                end if;\n \n                if Timedout then\n                   Self_Id.Open_Accepts := null;\n-\n-                  if Parameters.Runtime_Traces then\n-                     Send_Trace_Info (E_Timeout);\n-                  end if;\n                end if;\n             end loop;\n \n@@ -1700,11 +1629,6 @@ package body System.Tasking.Rendezvous is\n         (Debug.Trace (Self_Id, \"TTEC: entered ATC level: \" &\n          ATC_Level'Image (Self_Id.ATC_Nesting_Level), 'A'));\n \n-      if Parameters.Runtime_Traces then\n-         Send_Trace_Info (WT_Call, Acceptor,\n-                          Entry_Index (E), Timeout);\n-      end if;\n-\n       Level := Self_Id.ATC_Nesting_Level;\n       Entry_Call := Self_Id.Entry_Calls (Level)'Access;\n       Entry_Call.Next := null;\n@@ -1744,9 +1668,6 @@ package body System.Tasking.Rendezvous is\n \n          Initialization.Undefer_Abort (Self_Id);\n \n-         if Parameters.Runtime_Traces then\n-            Send_Trace_Info (E_Missed, Acceptor);\n-         end if;\n          raise Tasking_Error;\n       end if;\n "}, {"sha": "346e5bfe14288bd967edfda86e645ae791269e4d", "filename": "gcc/ada/s-tassta.adb", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=fe683ef6e1f215fa4836b0698c2b0265ff2da618", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2016, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2017, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -52,7 +52,6 @@ with System.OS_Primitives;\n with System.Secondary_Stack;\n with System.Restrictions;\n with System.Standard_Library;\n-with System.Traces.Tasking;\n with System.Stack_Usage;\n with System.Storage_Elements;\n \n@@ -81,9 +80,6 @@ package body System.Tasking.Stages is\n    use Task_Primitives.Operations;\n    use Task_Info;\n \n-   use System.Traces;\n-   use System.Traces.Tasking;\n-\n    -----------------------\n    -- Local Subprograms --\n    -----------------------\n@@ -426,9 +422,6 @@ package body System.Tasking.Stages is\n \n       --  ??? Why do we need to allow for nested deferral here?\n \n-      if Runtime_Traces then\n-         Send_Trace_Info (T_Activate);\n-      end if;\n    end Complete_Activation;\n \n    ---------------------\n@@ -709,10 +702,6 @@ package body System.Tasking.Stages is\n       Created_Task := T;\n       Initialization.Undefer_Abort_Nestable (Self_ID);\n \n-      if Runtime_Traces then\n-         Send_Trace_Info (T_Create, T);\n-      end if;\n-\n       pragma Debug\n         (Debug.Trace\n            (Self_ID, \"Created task in \" & T.Master_of_Task'Img, 'C', T));\n@@ -1453,10 +1442,6 @@ package body System.Tasking.Stages is\n    begin\n       Debug.Task_Termination_Hook;\n \n-      if Runtime_Traces then\n-         Send_Trace_Info (T_Terminate);\n-      end if;\n-\n       --  Since GCC cannot allocate stack chunks efficiently without reordering\n       --  some of the allocations, we have to handle this unexpected situation\n       --  here. Normally we never have to call Vulnerable_Complete_Task here."}, {"sha": "1a7e8cf9f108ca08d346b4b8b6b0873ed1be381a", "filename": "gcc/ada/s-tasuti.adb", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fs-tasuti.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fs-tasuti.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasuti.adb?ref=fe683ef6e1f215fa4836b0698c2b0265ff2da618", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2014, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2017, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -42,7 +42,6 @@ with System.Task_Primitives.Operations;\n with System.Tasking.Initialization;\n with System.Tasking.Queuing;\n with System.Parameters;\n-with System.Traces.Tasking;\n \n package body System.Tasking.Utilities is\n \n@@ -53,9 +52,6 @@ package body System.Tasking.Utilities is\n    use Task_Primitives;\n    use Task_Primitives.Operations;\n \n-   use System.Traces;\n-   use System.Traces.Tasking;\n-\n    --------------------\n    -- Abort_One_Task --\n    --------------------\n@@ -67,10 +63,6 @@ package body System.Tasking.Utilities is\n \n    procedure Abort_One_Task (Self_ID : Task_Id; T : Task_Id) is\n    begin\n-      if Parameters.Runtime_Traces then\n-         Send_Trace_Info (T_Abort, Self_ID, T);\n-      end if;\n-\n       Write_Lock (T);\n \n       if T.Common.State = Unactivated then"}, {"sha": "242fe45f97ec807bf2c602ad67156380572b38d1", "filename": "gcc/ada/s-tpobop.adb", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fs-tpobop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fs-tpobop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpobop.adb?ref=fe683ef6e1f215fa4836b0698c2b0265ff2da618", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1998-2016, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1998-2017, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -49,7 +49,6 @@ with System.Tasking.Rendezvous;\n with System.Tasking.Utilities;\n with System.Tasking.Debug;\n with System.Parameters;\n-with System.Traces.Tasking;\n with System.Restrictions;\n \n with System.Tasking.Initialization;\n@@ -67,8 +66,6 @@ package body System.Tasking.Protected_Objects.Operations is\n \n    use System.Restrictions;\n    use System.Restrictions.Rident;\n-   use System.Traces;\n-   use System.Traces.Tasking;\n \n    -----------------------\n    -- Local Subprograms --\n@@ -272,13 +269,6 @@ package body System.Tasking.Protected_Objects.Operations is\n          --  PO_Service_Entries on return.\n \n       end if;\n-\n-      if Runtime_Traces then\n-\n-         --  ??? Entry_Call can be null\n-\n-         Send_Trace_Info (PO_Done, Entry_Call.Self);\n-      end if;\n    end Exceptional_Complete_Entry_Body;\n \n    --------------------\n@@ -439,11 +429,6 @@ package body System.Tasking.Protected_Objects.Operations is\n          Object.Call_In_Progress := Entry_Call;\n \n          begin\n-            if Runtime_Traces then\n-               Send_Trace_Info (PO_Run, Self_ID,\n-                                Entry_Call.Self, Entry_Index (E));\n-            end if;\n-\n             pragma Debug\n               (Debug.Trace (Self_ID, \"POSE: start entry body\", 'P'));\n \n@@ -562,10 +547,6 @@ package body System.Tasking.Protected_Objects.Operations is\n       pragma Debug\n         (Debug.Trace (Self_ID, \"Protected_Entry_Call\", 'P'));\n \n-      if Runtime_Traces then\n-         Send_Trace_Info (PO_Call, Entry_Index (E));\n-      end if;\n-\n       if Self_ID.ATC_Nesting_Level = ATC_Level'Last then\n          raise Storage_Error with \"not enough ATC nesting levels\";\n       end if;\n@@ -981,10 +962,6 @@ package body System.Tasking.Protected_Objects.Operations is\n          raise Program_Error with \"potentially blocking operation\";\n       end if;\n \n-      if Runtime_Traces then\n-         Send_Trace_Info (POT_Call, Entry_Index (E), Timeout);\n-      end if;\n-\n       Initialization.Defer_Abort_Nestable (Self_Id);\n       Lock_Entries_With_Status (Object, Ceiling_Violation);\n "}, {"sha": "241e6fe8dcc70d939351c7318347e2dec19f80e7", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=fe683ef6e1f215fa4836b0698c2b0265ff2da618", "patch": "@@ -575,6 +575,12 @@ package body Sem_Ch7 is\n          --  i.e. not just syntactic, and the gain would very likely be worth\n          --  neither the hassle nor the slowdown of the compiler.\n \n+         --  Finally, an important thing to be aware of is that, at this point,\n+         --  instantiations are not done yet so we cannot directly see inlined\n+         --  bodies coming from them. That's not catastrophic because only the\n+         --  actual parameters of the instantiations matter here, and they are\n+         --  present in the declarations list of the instantiated packages.\n+\n          Subprogram_Table.Reset;\n          Discard := Has_Referencer (Decls, Top_Level => True);\n       end Hide_Public_Entities;"}, {"sha": "0354db7aa17888bb185b7a8a2db8b46ed446a4d9", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=fe683ef6e1f215fa4836b0698c2b0265ff2da618", "patch": "@@ -15825,6 +15825,11 @@ package body Sem_Prag is\n \n                elsif Nkind (Context) = N_Subprogram_Declaration then\n                   Id := Defining_Entity (Context);\n+\n+               --  Pragma Ghost applies to a generic subprogram\n+\n+               elsif Nkind (Context) = N_Generic_Subprogram_Declaration then\n+                  Id := Defining_Entity (Specification (Context));\n                end if;\n             end if;\n "}]}