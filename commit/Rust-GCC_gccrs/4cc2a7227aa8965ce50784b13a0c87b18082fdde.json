{"sha": "4cc2a7227aa8965ce50784b13a0c87b18082fdde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNjMmE3MjI3YWE4OTY1Y2U1MDc4NGIxM2EwYzg3YjE4MDgyZmRkZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2010-09-07T16:12:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-07T16:12:09Z"}, "message": "cp-tree.h (build_enumerator): Add new location_t parameter.\n\n\t* cp-tree.h (build_enumerator): Add new location_t parameter.\n\t(build_lang_decl_loc): New function.\n\t* decl.c (build_enumerator): New parameter loc. Use it when calling\n\tbuild_decl. Replace build_lang_decl with build_lang_decl_loc.\n\t* pt.c (tsubst_enum): Adjust call to build_enumerator.\n\t* parser.c (cp_parser_enumerator_definition): Ditto.\n\t* lex.c (build_lang_decl_loc): New function.\n\nFrom-SVN: r163959", "tree": {"sha": "ba8a4e18517bf42370b70903afcb2f8ee1cd056c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba8a4e18517bf42370b70903afcb2f8ee1cd056c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cc2a7227aa8965ce50784b13a0c87b18082fdde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cc2a7227aa8965ce50784b13a0c87b18082fdde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cc2a7227aa8965ce50784b13a0c87b18082fdde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cc2a7227aa8965ce50784b13a0c87b18082fdde/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "86e033e21a4f61128173b4b1f4dedf07616068d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86e033e21a4f61128173b4b1f4dedf07616068d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86e033e21a4f61128173b4b1f4dedf07616068d7"}], "stats": {"total": 50, "additions": 40, "deletions": 10}, "files": [{"sha": "d4171b0fc0286b6f84c7a8be32c60f0bec088d69", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc2a7227aa8965ce50784b13a0c87b18082fdde/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc2a7227aa8965ce50784b13a0c87b18082fdde/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4cc2a7227aa8965ce50784b13a0c87b18082fdde", "patch": "@@ -1,3 +1,13 @@\n+2010-09-07  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* cp-tree.h (build_enumerator): Add new location_t parameter.\n+\t(build_lang_decl_loc): New function.\n+\t* decl.c (build_enumerator): New parameter loc. Use it when calling\n+\tbuild_decl. Replace build_lang_decl with build_lang_decl_loc.\n+\t* pt.c (tsubst_enum): Adjust call to build_enumerator.\n+\t* parser.c (cp_parser_enumerator_definition): Ditto.\n+\t* lex.c (build_lang_decl_loc): New function.\n+\n 2010-09-06  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/45200"}, {"sha": "cb3b55f484f0d685e9c6bdec725c331350267533", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc2a7227aa8965ce50784b13a0c87b18082fdde/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc2a7227aa8965ce50784b13a0c87b18082fdde/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4cc2a7227aa8965ce50784b13a0c87b18082fdde", "patch": "@@ -4771,7 +4771,7 @@ extern tree xref_tag_from_type\t\t\t(tree, tree, tag_scope);\n extern bool xref_basetypes\t\t\t(tree, tree);\n extern tree start_enum\t\t\t\t(tree, tree, bool);\n extern void finish_enum\t\t\t\t(tree);\n-extern void build_enumerator\t\t\t(tree, tree, tree);\n+extern void build_enumerator\t\t\t(tree, tree, tree, location_t);\n extern tree lookup_enumerator\t\t\t(tree, tree);\n extern void start_preparsed_function\t\t(tree, tree, int);\n extern int start_function\t\t\t(cp_decl_specifier_seq *, const cp_declarator *, tree);\n@@ -4943,6 +4943,7 @@ extern void yyungetc\t\t\t\t(int, int);\n extern tree unqualified_name_lookup_error\t(tree);\n extern tree unqualified_fn_lookup_error\t\t(tree);\n extern tree build_lang_decl\t\t\t(enum tree_code, tree, tree);\n+extern tree build_lang_decl_loc\t\t\t(location_t, enum tree_code, tree, tree);\n extern void retrofit_lang_decl\t\t\t(tree);\n extern tree copy_decl\t\t\t\t(tree);\n extern tree copy_type\t\t\t\t(tree);"}, {"sha": "ad4a0973d9d52afddb67b8b41695f66725b3f06f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc2a7227aa8965ce50784b13a0c87b18082fdde/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc2a7227aa8965ce50784b13a0c87b18082fdde/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4cc2a7227aa8965ce50784b13a0c87b18082fdde", "patch": "@@ -11627,10 +11627,11 @@ finish_enum (tree enumtype)\n \n /* Build and install a CONST_DECL for an enumeration constant of the\n    enumeration type ENUMTYPE whose NAME and VALUE (if any) are provided.\n+   LOC is the location of NAME.\n    Assignment of sequential values by default is handled here.  */\n \n void\n-build_enumerator (tree name, tree value, tree enumtype)\n+build_enumerator (tree name, tree value, tree enumtype, location_t loc)\n {\n   tree decl;\n   tree context;\n@@ -11745,12 +11746,12 @@ build_enumerator (tree name, tree value, tree enumtype)\n   if (context && context == current_class_type)\n     /* This enum declaration is local to the class.  We need the full\n        lang_decl so that we can record DECL_CLASS_CONTEXT, for example.  */\n-    decl = build_lang_decl (CONST_DECL, name, type);\n+    decl = build_lang_decl_loc (loc, CONST_DECL, name, type);\n   else\n     /* It's a global enum, or it's local to a function.  (Note local to\n-      a function could mean local to a class method.  */\n-    decl = build_decl (input_location, CONST_DECL, name, type);\n-\n+       a function could mean local to a class method.  */\n+    decl = build_decl (loc, CONST_DECL, name, type);\n+  \n   DECL_CONTEXT (decl) = FROB_CONTEXT (context);\n   TREE_CONSTANT (decl) = 1;\n   TREE_READONLY (decl) = 1;"}, {"sha": "0488149c39062c2cf646911fc9f43935d446879f", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc2a7227aa8965ce50784b13a0c87b18082fdde/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc2a7227aa8965ce50784b13a0c87b18082fdde/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=4cc2a7227aa8965ce50784b13a0c87b18082fdde", "patch": "@@ -507,13 +507,25 @@ unqualified_fn_lookup_error (tree name)\n   return unqualified_name_lookup_error (name);\n }\n \n+/* Wrapper around build_lang_decl_loc(). Should gradually move to\n+   build_lang_decl_loc() and then rename build_lang_decl_loc() back to\n+   build_lang_decl().  */\n+\n tree\n build_lang_decl (enum tree_code code, tree name, tree type)\n+{\n+  return build_lang_decl_loc (input_location, code, name, type);\n+}\n+\n+/* Build a decl from CODE, NAME, TYPE declared at LOC, and then add\n+   DECL_LANG_SPECIFIC info to the result.  */\n+\n+tree\n+build_lang_decl_loc (location_t loc, enum tree_code code, tree name, tree type)\n {\n   tree t;\n \n-  t = build_decl (input_location,\n-\t\t  code, name, type);\n+  t = build_decl (loc, code, name, type);\n   retrofit_lang_decl (t);\n \n   return t;"}, {"sha": "8faf21d8850dbe648568cebd6c57b74171a1e40d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc2a7227aa8965ce50784b13a0c87b18082fdde/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc2a7227aa8965ce50784b13a0c87b18082fdde/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=4cc2a7227aa8965ce50784b13a0c87b18082fdde", "patch": "@@ -13135,6 +13135,11 @@ cp_parser_enumerator_definition (cp_parser* parser, tree type)\n {\n   tree identifier;\n   tree value;\n+  location_t loc;\n+\n+  /* Save the input location because we are interested in the location\n+     of the identifier and not the location of the explicit value.  */\n+  loc = cp_lexer_peek_token (parser->lexer)->location;\n \n   /* Look for the identifier.  */\n   identifier = cp_parser_identifier (parser);\n@@ -13160,7 +13165,7 @@ cp_parser_enumerator_definition (cp_parser* parser, tree type)\n     value = error_mark_node;\n \n   /* Create the enumerator.  */\n-  build_enumerator (identifier, value, type);\n+  build_enumerator (identifier, value, type, loc);\n }\n \n /* Parse a namespace-name."}, {"sha": "75a9d1b25a41e34d02a252b6e276433ae59cd731", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc2a7227aa8965ce50784b13a0c87b18082fdde/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc2a7227aa8965ce50784b13a0c87b18082fdde/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4cc2a7227aa8965ce50784b13a0c87b18082fdde", "patch": "@@ -17294,7 +17294,8 @@ tsubst_enum (tree tag, tree newtag, tree args)\n       set_current_access_from_decl (decl);\n \n       /* Actually build the enumerator itself.  */\n-      build_enumerator (DECL_NAME (decl), value, newtag);\n+      build_enumerator\n+\t(DECL_NAME (decl), value, newtag, DECL_SOURCE_LOCATION (decl));\n     }\n \n   finish_enum (newtag);"}]}