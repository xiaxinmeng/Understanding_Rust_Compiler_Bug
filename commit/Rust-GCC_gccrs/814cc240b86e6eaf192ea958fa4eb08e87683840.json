{"sha": "814cc240b86e6eaf192ea958fa4eb08e87683840", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE0Y2MyNDBiODZlNmVhZjE5MmVhOTU4ZmE0ZWIwOGU4NzY4Mzg0MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-27T12:26:50Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-27T12:26:50Z"}, "message": "[multiple changes]\n\n2016-04-27  Arnaud Charlet  <charlet@adacore.com>\n\n\t* s-rident.ads: Make No_Implicit_Loops non partition wide.\n\n2016-04-27  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sem_ch11.adb (Analyze_Handled_Statements): check useless\n\tassignments also in entries and task bodies, not only in\n\tprocedures and declaration blocks.\n\t* sem_ch5.adb (Analyze_Block_Statement): check useless\n\tassignements in declaration blocks as part of processing their\n\thandled statement sequence, just like it was done for procedures\n\tand now is also done for entries and task bodies.\n\t* sem_warn.adb (Warn_On_Useless_Assignment): detect boundries\n\tof entries and task bodies just like of procedures.\n\n2016-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_util.adb (Is_Volatile_Function): Recognize\n\ta function declared within a protected type as well as the\n\tprotected/unprotected version of a function.\n\nFrom-SVN: r235491", "tree": {"sha": "dcad9d68ef254b3e6a08b7ef6c8ea405ae9f3418", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcad9d68ef254b3e6a08b7ef6c8ea405ae9f3418"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/814cc240b86e6eaf192ea958fa4eb08e87683840", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/814cc240b86e6eaf192ea958fa4eb08e87683840", "html_url": "https://github.com/Rust-GCC/gccrs/commit/814cc240b86e6eaf192ea958fa4eb08e87683840", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/814cc240b86e6eaf192ea958fa4eb08e87683840/comments", "author": null, "committer": null, "parents": [{"sha": "24d2fbbeacb37a9a07ae7b038ce331630141aa10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24d2fbbeacb37a9a07ae7b038ce331630141aa10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24d2fbbeacb37a9a07ae7b038ce331630141aa10"}], "stats": {"total": 84, "additions": 52, "deletions": 32}, "files": [{"sha": "b04b513777c74c1cbd4da43c57f3d69943cabc36", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814cc240b86e6eaf192ea958fa4eb08e87683840/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814cc240b86e6eaf192ea958fa4eb08e87683840/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=814cc240b86e6eaf192ea958fa4eb08e87683840", "patch": "@@ -1,3 +1,25 @@\n+2016-04-27  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* s-rident.ads: Make No_Implicit_Loops non partition wide.\n+\n+2016-04-27  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch11.adb (Analyze_Handled_Statements): check useless\n+\tassignments also in entries and task bodies, not only in\n+\tprocedures and declaration blocks.\n+\t* sem_ch5.adb (Analyze_Block_Statement): check useless\n+\tassignements in declaration blocks as part of processing their\n+\thandled statement sequence, just like it was done for procedures\n+\tand now is also done for entries and task bodies.\n+\t* sem_warn.adb (Warn_On_Useless_Assignment): detect boundries\n+\tof entries and task bodies just like of procedures.\n+\n+2016-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_util.adb (Is_Volatile_Function): Recognize\n+\ta function declared within a protected type as well as the\n+\tprotected/unprotected version of a function.\n+\n 2016-04-27  Bob Duff  <duff@adacore.com>\n \n \t* exp_ch3.adb (Expand_N_Object_Declaration): Rewrite an object"}, {"sha": "4f36b460b6a281bde6e22758824b02a163b8eac3", "filename": "gcc/ada/s-rident.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814cc240b86e6eaf192ea958fa4eb08e87683840/gcc%2Fada%2Fs-rident.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814cc240b86e6eaf192ea958fa4eb08e87683840/gcc%2Fada%2Fs-rident.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-rident.ads?ref=814cc240b86e6eaf192ea958fa4eb08e87683840", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -121,7 +121,6 @@ package System.Rident is\n       No_Implicit_Heap_Allocations,              -- (RM D.8(8), H.4(3))\n       No_Implicit_Task_Allocations,              -- GNAT\n       No_Implicit_Protected_Object_Allocations,  -- GNAT\n-      No_Implicit_Loops,                         -- GNAT\n       No_Initialize_Scalars,                     -- GNAT\n       No_Local_Allocators,                       -- (RM H.4(8))\n       No_Local_Timing_Events,                    -- (RM D.7(10.2/2))\n@@ -179,6 +178,7 @@ package System.Rident is\n       No_Implementation_Restrictions,            -- GNAT\n       No_Implementation_Units,                   -- Ada 2012 AI-242\n       No_Implicit_Aliasing,                      -- GNAT\n+      No_Implicit_Loops,                         -- GNAT\n       No_Elaboration_Code,                       -- GNAT\n       No_Obsolescent_Features,                   -- Ada 2005 AI-368\n       No_Wide_Characters,                        -- GNAT"}, {"sha": "381972d1fb4e72a024ba42ae510ed0943d597418", "filename": "gcc/ada/sem_ch11.adb", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814cc240b86e6eaf192ea958fa4eb08e87683840/gcc%2Fada%2Fsem_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814cc240b86e6eaf192ea958fa4eb08e87683840/gcc%2Fada%2Fsem_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch11.adb?ref=814cc240b86e6eaf192ea958fa4eb08e87683840", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -417,14 +417,15 @@ package body Sem_Ch11 is\n \n       Analyze_Statements (Statements (N));\n \n-      --  If the current scope is a subprogram, then this is the right place to\n-      --  check for hanging useless assignments from the statement sequence of\n-      --  the subprogram body. Skip this in the body of a postcondition,\n-      --  since in that case there are no source references, and we need to\n-      --  preserve deferred references from the enclosing scope.\n+      --  If the current scope is a subprogram, entry or task body or declare\n+      --  block then this is the right place to check for hanging useless\n+      --  assignments from the statement sequence. Skip this in the body of a\n+      --  postcondition, since in that case there are no source references, and\n+      --  we need to preserve deferred references from the enclosing scope.\n \n-      if Is_Subprogram (Current_Scope)\n-         and then Chars (Current_Scope) /= Name_uPostconditions\n+      if ((Is_Subprogram (Current_Scope) or else Is_Entry (Current_Scope))\n+           and then Chars (Current_Scope) /= Name_uPostconditions)\n+         or else Ekind_In (Current_Scope, E_Block, E_Task_Type)\n       then\n          Warn_On_Useless_Assignments (Current_Scope);\n       end if;"}, {"sha": "5dcdf445c8120fb7fe7eaea9bdbc7a0da8b20d74", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814cc240b86e6eaf192ea958fa4eb08e87683840/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814cc240b86e6eaf192ea958fa4eb08e87683840/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=814cc240b86e6eaf192ea958fa4eb08e87683840", "patch": "@@ -1062,7 +1062,6 @@ package body Sem_Ch5 is\n          end if;\n \n          Check_References (Ent);\n-         Warn_On_Useless_Assignments (Ent);\n          End_Scope;\n \n          if Unblocked_Exit_Count = 0 then"}, {"sha": "46baf0bc8820cfad368575bb0f41bc50aa84ff57", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814cc240b86e6eaf192ea958fa4eb08e87683840/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814cc240b86e6eaf192ea958fa4eb08e87683840/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=814cc240b86e6eaf192ea958fa4eb08e87683840", "patch": "@@ -13377,14 +13377,14 @@ package body Sem_Util is\n \n             return\n               Pref = Obj_Ref\n-              and then Present (Etype (Pref))\n-              and then Is_Protected_Type (Etype (Pref))\n-              and then Is_Entity_Name (Subp)\n-              and then Present (Entity (Subp))\n-              and then Ekind_In (Entity (Subp), E_Entry,\n-                                 E_Entry_Family,\n-                                 E_Function,\n-                                 E_Procedure);\n+                and then Present (Etype (Pref))\n+                and then Is_Protected_Type (Etype (Pref))\n+                and then Is_Entity_Name (Subp)\n+                and then Present (Entity (Subp))\n+                and then Ekind_In (Entity (Subp), E_Entry,\n+                                                  E_Entry_Family,\n+                                                  E_Function,\n+                                                  E_Procedure);\n          else\n             return False;\n          end if;\n@@ -14954,17 +14954,11 @@ package body Sem_Util is\n \n    function Is_Volatile_Function (Func_Id : Entity_Id) return Boolean is\n    begin\n-      --  The caller must ensure that Func_Id denotes a function\n-\n       pragma Assert (Ekind_In (Func_Id, E_Function, E_Generic_Function));\n \n-      --  A protected function is automatically volatile\n+      --  A function declared within a protected type is volatile\n \n-      if Is_Primitive (Func_Id)\n-        and then Present (First_Formal (Func_Id))\n-        and then Is_Protected_Type (Etype (First_Formal (Func_Id)))\n-        and then Etype (First_Formal (Func_Id)) = Scope (Func_Id)\n-      then\n+      if Is_Protected_Type (Scope (Func_Id)) then\n          return True;\n \n       --  An instance of Ada.Unchecked_Conversion is a volatile function if"}, {"sha": "c8bf23a6ec6f0c7ce870e1bdea83a1aa41ade12d", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/814cc240b86e6eaf192ea958fa4eb08e87683840/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/814cc240b86e6eaf192ea958fa4eb08e87683840/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=814cc240b86e6eaf192ea958fa4eb08e87683840", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1999-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -4297,8 +4297,10 @@ package body Sem_Warn is\n \n             --  When we hit a package/subprogram body, issue warning and exit\n \n-            elsif Nkind (P) = N_Subprogram_Body\n-              or else Nkind (P) = N_Package_Body\n+            elsif Nkind_In (P, N_Entry_Body,\n+                               N_Package_Body,\n+                               N_Subprogram_Body,\n+                               N_Task_Body)\n             then\n                --  Case of assigned value never referenced\n \n@@ -4376,8 +4378,10 @@ package body Sem_Warn is\n                   --  not generate the warning, since the variable in question\n                   --  may be accessed after an exception in the outer block.\n \n-                  if Nkind (Parent (P)) /= N_Subprogram_Body\n-                    and then Nkind (Parent (P)) /= N_Package_Body\n+                  if not Nkind_In (Parent (P), N_Entry_Body,\n+                                               N_Package_Body,\n+                                               N_Subprogram_Body,\n+                                               N_Task_Body)\n                   then\n                      Set_Last_Assignment (Ent, Empty);\n                      return;"}]}