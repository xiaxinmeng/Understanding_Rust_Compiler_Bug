{"sha": "ef9af12d24108340f9eafa572a5c3aebfff6df88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY5YWYxMmQyNDEwODM0MGY5ZWFmYTU3MmE1YzNhZWJmZmY2ZGY4OA==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-07-21T13:16:55Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-07-21T17:50:30Z"}, "message": "rs6000: Write output to the builtins init file, part 1 of 3\n\n2021-07-21  Bill Schmidt  <wschmidt@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/rs6000-gen-builtins.c (write_fntype): New\n\tcallback function.\n\t(write_fntype_init): New stub function.\n\t(write_init_bif_table): Likewise.\n\t(write_init_ovld_table): New function.\n\t(write_init_file): Implement.", "tree": {"sha": "f42e6ff1f2127493b704233ce6595166dd1b944a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f42e6ff1f2127493b704233ce6595166dd1b944a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef9af12d24108340f9eafa572a5c3aebfff6df88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef9af12d24108340f9eafa572a5c3aebfff6df88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef9af12d24108340f9eafa572a5c3aebfff6df88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef9af12d24108340f9eafa572a5c3aebfff6df88/comments", "author": null, "committer": null, "parents": [{"sha": "89c0330163f94043b65a0be4d8b29b2f695efc8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89c0330163f94043b65a0be4d8b29b2f695efc8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89c0330163f94043b65a0be4d8b29b2f695efc8a"}], "stats": {"total": 164, "additions": 164, "deletions": 0}, "files": [{"sha": "dd24369e11874bc645d4cfd6bf96424d1e49722f", "filename": "gcc/config/rs6000/rs6000-gen-builtins.c", "status": "modified", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9af12d24108340f9eafa572a5c3aebfff6df88/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9af12d24108340f9eafa572a5c3aebfff6df88/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c?ref=ef9af12d24108340f9eafa572a5c3aebfff6df88", "patch": "@@ -2213,6 +2213,18 @@ write_extern_fntype (char *str)\n   fprintf (header_file, \"extern GTY(()) tree %s;\\n\", str);\n }\n \n+void\n+write_fntype (char *str)\n+{\n+  fprintf (init_file, \"tree %s;\\n\", str);\n+}\n+\n+/* Write an initializer for a function type identified by STR.  */\n+void\n+write_fntype_init (char *str)\n+{\n+}\n+\n /* Write everything to the header file (rs6000-builtins.h).  Return\n    1 if successful, 0 otherwise.  */\n static int\n@@ -2234,11 +2246,163 @@ write_header_file (void)\n   return 1;\n }\n \n+/* Write code to initialize the built-in function table.  */\n+static void\n+write_init_bif_table (void)\n+{\n+}\n+\n+/* Write code to initialize the overload table.  */\n+static void\n+write_init_ovld_table (void)\n+{\n+  fprintf (init_file, \"  int base = RS6000_OVLD_NONE;\\n\\n\");\n+  fprintf (init_file,\n+\t   \"  /* The fndecl for an overload is arbitrarily the first one\\n\"\n+\t   \"     for the overload.  We sort out the real types when\\n\"\n+\t   \"     processing the overload in the gcc front end.  */\\n\");\n+\n+  for (int i = 0; i <= curr_ovld; i++)\n+    {\n+      fprintf (init_file,\n+\t       \"  rs6000_instance_info[RS6000_INST_%s].fntype\"\n+\t       \"\\n    = %s;\\n\",\n+\t       ovlds[i].ovld_id_name, ovlds[i].fndecl);\n+\n+      if (i == 0 || ovlds[i].stanza != ovlds[i-1].stanza)\n+\t{\n+\t  ovld_stanza *stanza = &ovld_stanzas[ovlds[i].stanza];\n+\t  fprintf (init_file, \"\\n\");\n+\n+\t  /* Check whether we have a \"tf\" token in this string, representing\n+\t     a float128_type_node.  It's possible that float128_type_node is\n+\t     undefined (occurs for -maltivec -mno-vsx, for example), so we\n+\t     must guard against that.  */\n+\t  int tf_found = strstr (ovlds[i].fndecl, \"tf\") != NULL;\n+\n+\t  /* Similarly, look for decimal float tokens.  */\n+\t  int dfp_found = (strstr (ovlds[i].fndecl, \"sd\") != NULL\n+\t\t\t   || strstr (ovlds[i].fndecl, \"dd\") != NULL\n+\t\t\t   || strstr (ovlds[i].fndecl, \"td\") != NULL);\n+\n+\t  fprintf (init_file,\n+\t\t   \"  if (new_builtins_are_live)\\n\");\n+\t  fprintf (init_file, \"    {\\n\");\n+\n+\t  if (tf_found)\n+\t    {\n+\t      fprintf (init_file, \"      if (float128_type_node)\\n\");\n+\t      fprintf (init_file, \"        {\\n\");\n+\t    }\n+\t  else if (dfp_found)\n+\t    {\n+\t      fprintf (init_file, \"      if (dfloat64_type_node)\\n\");\n+\t      fprintf (init_file, \"        {\\n\");\n+\t    }\n+\n+\t  fprintf (init_file,\n+\t\t   \"      rs6000_builtin_decls_x[(int)RS6000_OVLD_%s] = t\\n\",\n+\t\t   stanza->stanza_id);\n+\t  fprintf (init_file,\n+\t\t   \"        = add_builtin_function (\\\"%s\\\",\\n\",\n+\t\t   stanza->intern_name);\n+\t  fprintf (init_file,\n+\t\t   \"                                %s,\\n\",\n+\t\t   ovlds[i].fndecl);\n+\t  fprintf (init_file,\n+\t\t   \"                                (int)RS6000_OVLD_%s,\"\n+\t\t   \" BUILT_IN_MD,\\n\",\n+\t\t   stanza->stanza_id);\n+\t  fprintf (init_file,\n+\t\t   \"                                NULL, NULL_TREE);\\n\");\n+\n+\t  if (tf_found || dfp_found)\n+\t    fprintf (init_file, \"        }\\n\");\n+\n+\t  fprintf (init_file, \"    }\\n\\n\");\n+\n+\t  fprintf (init_file,\n+\t\t   \"  rs6000_overload_info[RS6000_OVLD_%s - base]\"\n+\t\t   \".first_instance\\n\",\n+\t\t   stanza->stanza_id);\n+\t  fprintf (init_file,\n+\t\t   \"    = &rs6000_instance_info[RS6000_INST_%s];\\n\\n\",\n+\t\t   ovlds[i].ovld_id_name);\n+\t}\n+    }\n+}\n+\n /* Write everything to the initialization file (rs6000-builtins.c).\n    Return 1 if successful, 0 otherwise.  */\n static int\n write_init_file (void)\n {\n+  write_autogenerated_header (init_file);\n+\n+  fprintf (init_file, \"#include \\\"config.h\\\"\\n\");\n+  fprintf (init_file, \"#include \\\"system.h\\\"\\n\");\n+  fprintf (init_file, \"#include \\\"coretypes.h\\\"\\n\");\n+  fprintf (init_file, \"#include \\\"backend.h\\\"\\n\");\n+  fprintf (init_file, \"#include \\\"rtl.h\\\"\\n\");\n+  fprintf (init_file, \"#include \\\"tree.h\\\"\\n\");\n+  fprintf (init_file, \"#include \\\"langhooks.h\\\"\\n\");\n+  fprintf (init_file, \"#include \\\"insn-codes.h\\\"\\n\");\n+  fprintf (init_file, \"#include \\\"rs6000-builtins.h\\\"\\n\");\n+  fprintf (init_file, \"\\n\");\n+\n+  fprintf (init_file, \"int new_builtins_are_live = 0;\\n\\n\");\n+\n+  fprintf (init_file, \"tree rs6000_builtin_decls_x[RS6000_OVLD_MAX];\\n\\n\");\n+\n+  rbt_inorder_callback (&fntype_rbt, fntype_rbt.rbt_root, write_fntype);\n+  fprintf (init_file, \"\\n\");\n+\n+  fprintf (init_file, \"void\\n\");\n+  fprintf (init_file, \"rs6000_autoinit_builtins ()\\n\");\n+  fprintf (init_file, \"{\\n\");\n+  fprintf (init_file, \"  tree t;\\n\");\n+  rbt_inorder_callback (&fntype_rbt, fntype_rbt.rbt_root, write_fntype_init);\n+  fprintf (init_file, \"\\n\");\n+\n+  fprintf (init_file,\n+\t   \"  rs6000_builtin_decls_x[RS6000_BIF_NONE] = NULL_TREE;\\n\");\n+  fprintf (init_file,\n+\t   \"  rs6000_builtin_decls_x[RS6000_BIF_MAX] = NULL_TREE;\\n\");\n+  fprintf (init_file,\n+\t   \"  rs6000_builtin_decls_x[RS6000_OVLD_NONE] = NULL_TREE;\\n\\n\");\n+\n+  write_init_bif_table ();\n+  write_init_ovld_table ();\n+\n+  fprintf (init_file, \"}\\n\\n\");\n+\n+  fprintf (init_file,\n+\t   \"void gt_ggc_mx (bifdata *bd)\\n\");\n+  fprintf (init_file,\n+\t   \"{\\n  gt_ggc_mx (bd->fntype);\\n}\\n\\n\");\n+  fprintf (init_file,\n+\t   \"void gt_pch_nx (bifdata *bd)\\n\");\n+  fprintf (init_file,\n+\t   \"{\\n  gt_pch_nx (bd->fntype);\\n}\\n\\n\");\n+  fprintf (init_file,\n+\t   \"void gt_pch_nx (bifdata *bd, gt_pointer_operator op, \"\n+\t   \"void *cookie)\\n\");\n+  fprintf (init_file,\n+\t   \"{\\n  op(&(bd->fntype), cookie);\\n}\\n\\n\");\n+  fprintf (init_file,\n+\t   \"void gt_ggc_mx (ovlddata *od)\\n\");\n+  fprintf (init_file,\n+\t   \"{\\n  gt_ggc_mx (od->fntype);\\n}\\n\\n\");\n+  fprintf (init_file,\n+\t   \"void gt_pch_nx (ovlddata *od)\\n\");\n+  fprintf (init_file,\n+\t   \"{\\n  gt_pch_nx (od->fntype);\\n}\\n\\n\");\n+  fprintf (init_file,\n+\t   \"void gt_pch_nx (ovlddata *od, gt_pointer_operator op, \"\n+\t   \"void *cookie)\\n\");\n+  fprintf (init_file,\n+\t   \"{\\n  op(&(od->fntype), cookie);\\n}\\n\");\n+\n   return 1;\n }\n "}]}