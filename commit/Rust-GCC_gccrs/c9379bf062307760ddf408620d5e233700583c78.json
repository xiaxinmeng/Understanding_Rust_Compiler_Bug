{"sha": "c9379bf062307760ddf408620d5e233700583c78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkzNzliZjA2MjMwNzc2MGRkZjQwODYyMGQ1ZTIzMzcwMDU4M2M3OA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-04-23T11:56:37Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-04-23T11:56:37Z"}, "message": "re PR fortran/25099 (Conformance of arguments to ELEMENTAL subroutines)\n\n2006-04-23  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/25099\n\t* resolve.c (resolve_call): Check conformity of elemental\n\tsubroutine actual arguments.\n\n2006-04-23  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/25099\n\t* gfortran.dg/elemental_subroutine_4.f90: New test.\n\t* gfortran.dg/assumed_size_refs_1.f90: Add error to non-conforming\n\tcall sub (m, x).\n\nFrom-SVN: r113194", "tree": {"sha": "c661259a0ba7d90009650c4ba358c303a57575ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c661259a0ba7d90009650c4ba358c303a57575ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9379bf062307760ddf408620d5e233700583c78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9379bf062307760ddf408620d5e233700583c78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9379bf062307760ddf408620d5e233700583c78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9379bf062307760ddf408620d5e233700583c78/comments", "author": null, "committer": null, "parents": [{"sha": "db03587b6c2a9b2f3b8c5c9da7e40000f752c621", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db03587b6c2a9b2f3b8c5c9da7e40000f752c621", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db03587b6c2a9b2f3b8c5c9da7e40000f752c621"}], "stats": {"total": 78, "additions": 72, "deletions": 6}, "files": [{"sha": "b64b6c792be136fb6b886785483121be521dcd38", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9379bf062307760ddf408620d5e233700583c78/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9379bf062307760ddf408620d5e233700583c78/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c9379bf062307760ddf408620d5e233700583c78", "patch": "@@ -1,3 +1,9 @@\n+2006-04-23  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/25099\n+\t* resolve.c (resolve_call): Check conformity of elemental\n+\tsubroutine actual arguments.\n+\n 2006-04-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/26769"}, {"sha": "1e57adda605d17e1747bc4e5b7bc37b49ffc70b2", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9379bf062307760ddf408620d5e233700583c78/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9379bf062307760ddf408620d5e233700583c78/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=c9379bf062307760ddf408620d5e233700583c78", "patch": "@@ -1657,18 +1657,33 @@ resolve_call (gfc_code * c)\n \tgfc_internal_error (\"resolve_subroutine(): bad function type\");\n       }\n \n+  /* Some checks of elemental subroutines.  */\n   if (c->ext.actual != NULL\n       && c->symtree->n.sym->attr.elemental)\n     {\n       gfc_actual_arglist * a;\n-      /* Being elemental, the last upper bound of an assumed size array\n-\t argument must be present.  */\n+      gfc_expr * e;\n+      e = NULL;\n+\n       for (a = c->ext.actual; a; a = a->next)\n \t{\n-\t  if (a->expr != NULL\n-\t\t&& a->expr->rank > 0\n-\t\t&& resolve_assumed_size_actual (a->expr))\n+\t  if (a->expr == NULL || a->expr->rank == 0)\n+\t    continue;\n+\n+\t /* The last upper bound of an assumed size array argument must\n+\t    be present.  */\n+\t  if (resolve_assumed_size_actual (a->expr))\n \t    return FAILURE;\n+\n+\t  /* Array actual arguments must conform.  */\n+\t  if (e != NULL)\n+\t    {\n+\t      if (gfc_check_conformance (\"elemental subroutine\", a->expr, e)\n+\t\t\t== FAILURE)\n+\t\treturn FAILURE;\n+\t    }\n+\t  else\n+\t    e = a->expr;\n \t}\n     }\n "}, {"sha": "7a3fb0077a03a6acc5eb6998243f0b89bb00700f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9379bf062307760ddf408620d5e233700583c78/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9379bf062307760ddf408620d5e233700583c78/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c9379bf062307760ddf408620d5e233700583c78", "patch": "@@ -1,3 +1,10 @@\n+2006-04-23  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/25099\n+\t* gfortran.dg/elemental_subroutine_4.f90: New test.\n+\t* gfortran.dg/assumed_size_refs_1.f90: Add error to non-conforming\n+\tcall sub (m, x).\n+\n 2006-04-22  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* gcc.c-torture/compile/20060421-1.c: New testcase."}, {"sha": "1590ec5c697c7b2393b01be56907d60b2170837e", "filename": "gcc/testsuite/gfortran.dg/assumed_size_refs_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9379bf062307760ddf408620d5e233700583c78/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_size_refs_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9379bf062307760ddf408620d5e233700583c78/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_size_refs_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_size_refs_1.f90?ref=c9379bf062307760ddf408620d5e233700583c78", "patch": "@@ -35,7 +35,7 @@ subroutine foo(m)\n     x = fcn (m)                ! { dg-error \"upper bound in the last dimension\" }\n     m(:, 1:2) = fcn (q)\n     call sub (m, x)            ! { dg-error \"upper bound in the last dimension\" }\n-    call sub (m(1:2, 1:2), x)\n+    call sub (m(1:2, 1:2), x)  ! { dg-error \"Incompatible ranks in elemental subroutine\" }\n     print *, p\n \n     call DHSEQR(x)"}, {"sha": "1a3446264cf42b30d465d88d5be28a3da7225613", "filename": "gcc/testsuite/gfortran.dg/elemental_subroutine_4.f90", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9379bf062307760ddf408620d5e233700583c78/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_subroutine_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9379bf062307760ddf408620d5e233700583c78/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_subroutine_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_subroutine_4.f90?ref=c9379bf062307760ddf408620d5e233700583c78", "patch": "@@ -0,0 +1,38 @@\n+! { dg-do compile }\n+! Test the fix for PR25099, in which conformance checking was not being\n+! done for elemental subroutines and therefore for interface assignments.\n+!\n+! Contributed by Joost VandeVondele  <jv244@cam.ac.uk>\n+!\n+module elem_assign\n+   implicit none\n+   type mytype\n+      integer x\n+   end type mytype\n+   interface assignment(=)\n+      module procedure myassign\n+   end interface assignment(=)\n+   contains\n+      elemental subroutine myassign(x,y)\n+         type(mytype), intent(out) :: x\n+         type(mytype), intent(in) :: y\n+         x%x = y%x\n+      end subroutine myassign\n+end module elem_assign\n+\n+   use elem_assign\n+   integer :: I(2,2),J(2)\n+   type (mytype) :: w(2,2), x(4), y(5), z(4)\n+! The original PR\n+   CALL S(I,J) ! { dg-error \"Incompatible ranks in elemental subroutine\" }\n+! Check interface assignments\n+   x = w       ! { dg-error \"Incompatible ranks in elemental subroutine\" }\n+   x = y       ! { dg-error \"different shape for elemental subroutine\" }\n+   x = z\n+CONTAINS\n+   ELEMENTAL SUBROUTINE S(I,J)\n+     INTEGER, INTENT(IN) :: I,J\n+   END SUBROUTINE S\n+END\n+\n+! { dg-final { cleanup-modules \"elem_assign\" } }"}]}