{"sha": "aa7da51a8c95366b781d0ce5e6cb046ef0aa899f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE3ZGE1MWE4Yzk1MzY2Yjc4MWQwY2U1ZTZjYjA0NmVmMGFhODk5Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-11-21T09:25:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-11-21T09:25:51Z"}, "message": "re PR target/63764 (ICE: in verify_ssa, at tree-ssa.c:939)\n\n\tPR target/63764\nc-family/\n\t* c-common.h (convert_vector_to_pointer_for_subscript): Change\n\treturn type to bool.\n\t* c-common.c: Include gimple-expr.c.\n\t(convert_vector_to_pointer_for_subscript): Change return type to\n\tbool.  If *vecp is not lvalue_p and has VECTOR_TYPE, return true\n\tand copy it into a TARGET_EXPR and use that instead of *vecp\n\tdirectly.\nc/\n\t* c-typeck.c (build_array_ref): Adjust\n\tconvert_vector_to_pointer_for_subscript caller.  If it returns true,\n\tcall non_lvalue_loc on the result.\ncp/\n\t* typeck.c (cp_build_array_ref): Adjust\n\tconvert_vector_to_pointer_for_subscript caller.  If it returns true,\n\tcall non_lvalue_loc on the result.\ntestsuite/\n\t* c-c++-common/pr63764-1.c: New test.\n\t* c-c++-common/pr63764-2.c: New test.\n\nFrom-SVN: r217909", "tree": {"sha": "c648ac0560be23d2a39d095a04c8de340e96f4bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c648ac0560be23d2a39d095a04c8de340e96f4bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa7da51a8c95366b781d0ce5e6cb046ef0aa899f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa7da51a8c95366b781d0ce5e6cb046ef0aa899f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa7da51a8c95366b781d0ce5e6cb046ef0aa899f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa7da51a8c95366b781d0ce5e6cb046ef0aa899f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0daaf8aa4d32fee71136021003bca60cc350a04e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0daaf8aa4d32fee71136021003bca60cc350a04e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0daaf8aa4d32fee71136021003bca60cc350a04e"}], "stats": {"total": 143, "additions": 133, "deletions": 10}, "files": [{"sha": "c9003ec66bda31d75a2126d14ff224662f9460ad", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa7da51a8c95366b781d0ce5e6cb046ef0aa899f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa7da51a8c95366b781d0ce5e6cb046ef0aa899f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=aa7da51a8c95366b781d0ce5e6cb046ef0aa899f", "patch": "@@ -1,3 +1,14 @@\n+2014-11-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/63764\n+\t* c-common.h (convert_vector_to_pointer_for_subscript): Change\n+\treturn type to bool.\n+\t* c-common.c: Include gimple-expr.c.\n+\t(convert_vector_to_pointer_for_subscript): Change return type to\n+\tbool.  If *vecp is not lvalue_p and has VECTOR_TYPE, return true\n+\tand copy it into a TARGET_EXPR and use that instead of *vecp\n+\tdirectly.\n+\n 2014-11-19  David Malcolm  <dmalcolm@redhat.com>\n \n \tMerger of git branch \"gimple-classes-v2-option-3\"."}, {"sha": "bff8c2a5a9dc42393412a3264f86c6b4d8e02973", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa7da51a8c95366b781d0ce5e6cb046ef0aa899f/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa7da51a8c95366b781d0ce5e6cb046ef0aa899f/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=aa7da51a8c95366b781d0ce5e6cb046ef0aa899f", "patch": "@@ -60,6 +60,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target-def.h\"\n #include \"gimplify.h\"\n #include \"wide-int-print.h\"\n+#include \"gimple-expr.h\"\n \n cpp_reader *parse_in;\t\t/* Declared in c-pragma.h.  */\n \n@@ -12030,22 +12031,47 @@ build_userdef_literal (tree suffix_id, tree value,\n }\n \n /* For vector[index], convert the vector to a\n-   pointer of the underlying type.  */\n-void\n+   pointer of the underlying type.  Return true if the resulting\n+   ARRAY_REF should not be an lvalue.  */\n+\n+bool\n convert_vector_to_pointer_for_subscript (location_t loc,\n-\t\t\t\t\t tree* vecp, tree index)\n+\t\t\t\t\t tree *vecp, tree index)\n {\n+  bool ret = false;\n   if (TREE_CODE (TREE_TYPE (*vecp)) == VECTOR_TYPE)\n     {\n       tree type = TREE_TYPE (*vecp);\n       tree type1;\n \n+      ret = !lvalue_p (*vecp);\n       if (TREE_CODE (index) == INTEGER_CST)\n         if (!tree_fits_uhwi_p (index)\n             || tree_to_uhwi (index) >= TYPE_VECTOR_SUBPARTS (type))\n           warning_at (loc, OPT_Warray_bounds, \"index value is out of bound\");\n \n-      c_common_mark_addressable_vec (*vecp);\n+      if (ret)\n+\t{\n+\t  tree tmp = create_tmp_var_raw (type, NULL);\n+\t  DECL_SOURCE_LOCATION (tmp) = loc;\n+\t  *vecp = c_save_expr (*vecp);\n+\t  if (TREE_CODE (*vecp) == C_MAYBE_CONST_EXPR)\n+\t    {\n+\t      bool non_const = C_MAYBE_CONST_EXPR_NON_CONST (*vecp);\n+\t      *vecp = C_MAYBE_CONST_EXPR_EXPR (*vecp);\n+\t      *vecp\n+\t\t= c_wrap_maybe_const (build4 (TARGET_EXPR, type, tmp,\n+\t\t\t\t\t      *vecp, NULL_TREE, NULL_TREE),\n+\t\t\t\t      non_const);\n+\t    }\n+\t  else\n+\t    *vecp = build4 (TARGET_EXPR, type, tmp, *vecp,\n+\t\t\t    NULL_TREE, NULL_TREE);\n+\t  SET_EXPR_LOCATION (*vecp, loc);\n+\t  c_common_mark_addressable_vec (tmp);\n+\t}\n+      else\n+\tc_common_mark_addressable_vec (*vecp);\n       type = build_qualified_type (TREE_TYPE (type), TYPE_QUALS (type));\n       type1 = build_pointer_type (TREE_TYPE (*vecp));\n       bool ref_all = TYPE_REF_CAN_ALIAS_ALL (type1);\n@@ -12065,6 +12091,7 @@ convert_vector_to_pointer_for_subscript (location_t loc,\n       *vecp = build1 (ADDR_EXPR, type1, *vecp);\n       *vecp = convert (type, *vecp);\n     }\n+  return ret;\n }\n \n /* Determine which of the operands, if any, is a scalar that needs to be"}, {"sha": "658cef0427d4d154c8def4ec8e691b6d322fe826", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa7da51a8c95366b781d0ce5e6cb046ef0aa899f/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa7da51a8c95366b781d0ce5e6cb046ef0aa899f/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=aa7da51a8c95366b781d0ce5e6cb046ef0aa899f", "patch": "@@ -1310,7 +1310,7 @@ extern tree build_userdef_literal (tree suffix_id, tree value,\n \t\t\t\t   enum overflow_type overflow,\n \t\t\t\t   tree num_string);\n \n-extern void convert_vector_to_pointer_for_subscript (location_t, tree*, tree);\n+extern bool convert_vector_to_pointer_for_subscript (location_t, tree *, tree);\n \n /* Possibe cases of scalar_to_vector conversion.  */\n enum stv_conv {"}, {"sha": "79d41830ee161c914d891173693c3fa27278bebc", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa7da51a8c95366b781d0ce5e6cb046ef0aa899f/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa7da51a8c95366b781d0ce5e6cb046ef0aa899f/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=aa7da51a8c95366b781d0ce5e6cb046ef0aa899f", "patch": "@@ -1,3 +1,10 @@\n+2014-11-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/63764\n+\t* c-typeck.c (build_array_ref): Adjust\n+\tconvert_vector_to_pointer_for_subscript caller.  If it returns true,\n+\tcall non_lvalue_loc on the result.\n+\n 2014-11-11  Richard Biener  <rguenther@suse.de>\n \n \t* c-decl.c (c_init_decl_processing): Do not set pedantic_lvalues"}, {"sha": "67efb465a2440120d43a0b82fa25b7c94b408878", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa7da51a8c95366b781d0ce5e6cb046ef0aa899f/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa7da51a8c95366b781d0ce5e6cb046ef0aa899f/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=aa7da51a8c95366b781d0ce5e6cb046ef0aa899f", "patch": "@@ -2495,7 +2495,8 @@ build_array_ref (location_t loc, tree array, tree index)\n \n   gcc_assert (TREE_CODE (TREE_TYPE (index)) == INTEGER_TYPE);\n \n-  convert_vector_to_pointer_for_subscript (loc, &array, index);\n+  bool non_lvalue\n+    = convert_vector_to_pointer_for_subscript (loc, &array, index);\n \n   if (TREE_CODE (TREE_TYPE (array)) == ARRAY_TYPE)\n     {\n@@ -2557,6 +2558,8 @@ build_array_ref (location_t loc, tree array, tree index)\n \t    | TREE_THIS_VOLATILE (array));\n       ret = require_complete_type (rval);\n       protected_set_expr_location (ret, loc);\n+      if (non_lvalue)\n+\tret = non_lvalue_loc (loc, ret);\n       return ret;\n     }\n   else\n@@ -2569,9 +2572,12 @@ build_array_ref (location_t loc, tree array, tree index)\n       gcc_assert (TREE_CODE (TREE_TYPE (ar)) == POINTER_TYPE);\n       gcc_assert (TREE_CODE (TREE_TYPE (TREE_TYPE (ar))) != FUNCTION_TYPE);\n \n-      return build_indirect_ref\n-\t(loc, build_binary_op (loc, PLUS_EXPR, ar, index, 0),\n-\t RO_ARRAY_INDEXING);\n+      ret = build_indirect_ref (loc, build_binary_op (loc, PLUS_EXPR, ar,\n+\t\t\t\t\t\t      index, 0),\n+\t\t\t\tRO_ARRAY_INDEXING);\n+      if (non_lvalue)\n+\tret = non_lvalue_loc (loc, ret);\n+      return ret;\n     }\n }\n \f"}, {"sha": "033ce7b74992d3921ee6d1d42995f2030aa85ff1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa7da51a8c95366b781d0ce5e6cb046ef0aa899f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa7da51a8c95366b781d0ce5e6cb046ef0aa899f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=aa7da51a8c95366b781d0ce5e6cb046ef0aa899f", "patch": "@@ -1,3 +1,10 @@\n+2014-11-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/63764\n+\t* typeck.c (cp_build_array_ref): Adjust\n+\tconvert_vector_to_pointer_for_subscript caller.  If it returns true,\n+\tcall non_lvalue_loc on the result.\n+\n 2014-11-20  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/63658"}, {"sha": "e100d70b1f2d7353a4e8292f162566edd85279cb", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa7da51a8c95366b781d0ce5e6cb046ef0aa899f/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa7da51a8c95366b781d0ce5e6cb046ef0aa899f/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=aa7da51a8c95366b781d0ce5e6cb046ef0aa899f", "patch": "@@ -3072,7 +3072,8 @@ cp_build_array_ref (location_t loc, tree array, tree idx,\n       break;\n     }\n \n-  convert_vector_to_pointer_for_subscript (loc, &array, idx);\n+  bool non_lvalue\n+    = convert_vector_to_pointer_for_subscript (loc, &array, idx);\n \n   if (TREE_CODE (TREE_TYPE (array)) == ARRAY_TYPE)\n     {\n@@ -3155,6 +3156,8 @@ cp_build_array_ref (location_t loc, tree array, tree idx,\n       ret = require_complete_type_sfinae (fold_if_not_in_template (rval),\n \t\t\t\t\t  complain);\n       protected_set_expr_location (ret, loc);\n+      if (non_lvalue)\n+\tret = non_lvalue_loc (loc, ret);\n       return ret;\n     }\n \n@@ -3194,6 +3197,8 @@ cp_build_array_ref (location_t loc, tree array, tree idx,\n                                  RO_ARRAY_INDEXING,\n                                  complain);\n     protected_set_expr_location (ret, loc);\n+    if (non_lvalue)\n+      ret = non_lvalue_loc (loc, ret);\n     return ret;\n   }\n }"}, {"sha": "034f4d941745f59b76d19f10651fc062be10a1c7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa7da51a8c95366b781d0ce5e6cb046ef0aa899f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa7da51a8c95366b781d0ce5e6cb046ef0aa899f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aa7da51a8c95366b781d0ce5e6cb046ef0aa899f", "patch": "@@ -1,5 +1,9 @@\n 2014-11-21  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/63764\n+\t* c-c++-common/pr63764-1.c: New test.\n+\t* c-c++-common/pr63764-2.c: New test.\n+\n \tPR target/63910\n \t* gcc.target/i386/pr63910.c: New test.\n "}, {"sha": "a858747c7d871cdacd04e56cca2142af78ceb0ea", "filename": "gcc/testsuite/c-c++-common/pr63764-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa7da51a8c95366b781d0ce5e6cb046ef0aa899f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr63764-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa7da51a8c95366b781d0ce5e6cb046ef0aa899f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr63764-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr63764-1.c?ref=aa7da51a8c95366b781d0ce5e6cb046ef0aa899f", "patch": "@@ -0,0 +1,21 @@\n+/* PR target/63764 */\n+/* { dg-do compile } */\n+\n+#define A __attribute__((vector_size (4 * sizeof (float))))\n+typedef float V A;\n+\n+void\n+fn1 (V *x)\n+{\n+  V a = *x;\n+  ((V) a)[0] = 0;\t/* { dg-error \"lvalue required as left operand of assignment\" } */\n+  *x = a;\n+}\n+\n+void\n+fn2 (V *x)\n+{\n+  float A a = *x;\n+  ((float A) a)[0] = 0;\t/* { dg-error \"lvalue required as left operand of assignment\" } */\n+  *x = a;\n+}"}, {"sha": "6bbf6611e6c0e5bad764a884ea786166f5308cfe", "filename": "gcc/testsuite/c-c++-common/pr63764-2.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa7da51a8c95366b781d0ce5e6cb046ef0aa899f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr63764-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa7da51a8c95366b781d0ce5e6cb046ef0aa899f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr63764-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr63764-2.c?ref=aa7da51a8c95366b781d0ce5e6cb046ef0aa899f", "patch": "@@ -0,0 +1,35 @@\n+/* PR target/63764 */\n+/* { dg-do compile } */\n+\n+#define A __attribute__((vector_size (4 * sizeof (float))))\n+typedef float V A;\n+\n+float\n+fn1 (V *x)\n+{\n+  V a = *x;\n+  return ((V) a)[0];\n+}\n+\n+float\n+fn2 (V *x)\n+{\n+  float A a = *x;\n+  return ((float A) a)[0];\n+}\n+\n+void\n+fn3 (V *x)\n+{\n+  V a = *x;\n+  a[0] = 0;\n+  *x = a;\n+}\n+\n+void\n+fn4 (V *x)\n+{\n+  float A a = *x;\n+  a[0] = 0;\n+  *x = a;\n+}"}]}