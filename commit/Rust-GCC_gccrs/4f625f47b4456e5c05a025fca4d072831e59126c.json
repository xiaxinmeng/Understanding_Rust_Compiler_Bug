{"sha": "4f625f47b4456e5c05a025fca4d072831e59126c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY2MjVmNDdiNDQ1NmU1YzA1YTAyNWZjYTRkMDcyODMxZTU5MTI2Yw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-10T00:16:30Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-10T00:16:30Z"}, "message": "Daily bump.", "tree": {"sha": "71aa05def7b9df2cbab0f569fa1bf492129dc14c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71aa05def7b9df2cbab0f569fa1bf492129dc14c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f625f47b4456e5c05a025fca4d072831e59126c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f625f47b4456e5c05a025fca4d072831e59126c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f625f47b4456e5c05a025fca4d072831e59126c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f625f47b4456e5c05a025fca4d072831e59126c/comments", "author": null, "committer": null, "parents": [{"sha": "53cb324cb4f9475d4eabcd9f5a858c5edaacc0cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53cb324cb4f9475d4eabcd9f5a858c5edaacc0cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53cb324cb4f9475d4eabcd9f5a858c5edaacc0cf"}], "stats": {"total": 513, "additions": 512, "deletions": 1}, "files": [{"sha": "fe95b63bacfb1467dc5a22e00c54e4654df86821", "filename": "gcc/ChangeLog", "status": "modified", "additions": 299, "deletions": 0, "changes": 299, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f625f47b4456e5c05a025fca4d072831e59126c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f625f47b4456e5c05a025fca4d072831e59126c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f625f47b4456e5c05a025fca4d072831e59126c", "patch": "@@ -1,3 +1,302 @@\n+2021-06-09  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/100925\n+\t* match.pd (a ? CST1 : CST2): Limit transformations\n+\tthat would produce a negative to integeral types only.\n+\tChange !POINTER_TYPE_P to INTEGRAL_TYPE_P also.\n+\n+2021-06-09  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\tRevert:\n+\t2021-06-09  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* doc/tm.texi: Correctly update.\n+\n+2021-06-09  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* doc/tm.texi: Correctly update.\n+\n+2021-06-09  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR other/100735\n+\t* doc/tm.texi.in (Trampolines): Add a missing blank line.\n+\n+2021-06-09  Paul Eggert  <eggert@cs.ucla.edu>\n+\n+\tPR other/100735\n+\t* doc/invoke.texi (Code Gen Options); Document that -fno-trampolines\n+\tand -ftrampolines work only with Ada.\n+\t* doc/tm.texi.in (Trampolines): Likewise.\n+\t* doc/tm.texi: Regenerated.\n+\n+2021-06-09  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/altivec.h (vec_signextll, vec_signexti, vec_signextq):\n+\tAdd define for new builtins.\n+\t* config/rs6000/altivec.md(altivec_vreveti2): Add define_expand.\n+\t* config/rs6000/rs6000-builtin.def (VSIGNEXTI, VSIGNEXTLL):  Add\n+\toverloaded builtin definitions.\n+\t(VSIGNEXTSB2W, VSIGNEXTSH2W, VSIGNEXTSB2D, VSIGNEXTSH2D,VSIGNEXTSW2D,\n+\tVSIGNEXTSD2Q):\tAdd builtin expansions.\n+\t(SIGNEXT): Add P10 overload definition.\n+\t* config/rs6000/rs6000-call.c (P9V_BUILTIN_VEC_VSIGNEXTI, P9V_BUILTIN_VEC_VSIGNEXTLL,\n+\tP10_BUILTIN_VEC_SIGNEXT): Add overloaded argument definitions.\n+\t* config/rs6000/vsx.md (vsx_sign_extend_v2di_v1ti): Add define_insn.\n+\t(vsignextend_v2di_v1ti, vsignextend_qi_<mode>, vsignextend_hi_<mode>,\n+\tvsignextend_si_v2di)[VIlong]: Add define_expand.\n+\tMake define_insn vsx_sign_extend_si_v2di visible.\n+\t* doc/extend.texi:  Add documentation for the vec_signexti,\n+\tvec_signextll builtins and vec_signextq.\n+\n+2021-06-09  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (__fixkfti, __fixunskfti, __floattikf,\n+\t__floatuntikf): Names changed to __fixkfti_sw, __fixunskfti_sw,\n+\t__floattikf_sw, __floatuntikf_sw respectively.\n+\t* config/rs6000/rs6000.md (floatti<mode>2, floatunsti<mode>2,\n+\tfix_trunc<mode>ti2, fixuns_trunc<mode>ti2): Add\n+\tdefine_insn for mode IEEE 128.\n+\n+2021-06-09  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/altivec.md (altivec_vslq, altivec_vsrq):\n+\tRename to altivec_vslq_<mode>, altivec_vsrq_<mode>, mode VEC_TI.\n+\t* config/rs6000/vector.md (VEC_TI): Was named VSX_TI in vsx.md.\n+\t(vashlv1ti3): Change to vashl<mode>3, mode VEC_TI.\n+\t(vlshrv1ti3): Change to vlshr<mode>3, mode VEC_TI.\n+\t* config/rs6000/vsx.md (VSX_TI): Remove define_mode_iterator. Update\n+\tuses of VSX_TI to VEC_TI.\n+\n+2021-06-09  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/dfp.md (floattitd2, fixtdti2): New define_insns.\n+\n+2021-06-09  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/altivec.h (vec_dive, vec_mod): Add define for new\n+\tbuiltins.\n+\t* config/rs6000/altivec.md (UNSPEC_VMULEUD, UNSPEC_VMULESD,\n+\tUNSPEC_VMULOUD, UNSPEC_VMULOSD): New unspecs.\n+\t(altivec_eqv1ti, altivec_gtv1ti, altivec_gtuv1ti, altivec_vmuleud,\n+\taltivec_vmuloud, altivec_vmulesd, altivec_vmulosd, altivec_vrlq,\n+\taltivec_vrlqmi, altivec_vrlqmi_inst, altivec_vrlqnm,\n+\taltivec_vrlqnm_inst, altivec_vslq, altivec_vsrq, altivec_vsraq,\n+\taltivec_vcmpequt_p, altivec_vcmpgtst_p, altivec_vcmpgtut_p): New\n+\tdefine_insn.\n+\t(vec_widen_umult_even_v2di, vec_widen_smult_even_v2di,\n+\tvec_widen_umult_odd_v2di, vec_widen_smult_odd_v2di, altivec_vrlqmi,\n+\taltivec_vrlqnm): New define_expands.\n+\t* config/rs6000/rs6000-builtin.def (VCMPEQUT_P, VCMPGTST_P,\n+\tVCMPGTUT_P): Add macro expansions.\n+\t(BU_P10V_AV_P): Add builtin predicate definition.\n+\t(VCMPGTUT, VCMPGTST, VCMPEQUT, CMPNET, CMPGE_1TI,\n+\tCMPGE_U1TI, CMPLE_1TI, CMPLE_U1TI, VNOR_V1TI_UNS, VNOR_V1TI, VCMPNET_P,\n+\tVCMPAET_P, VMULEUD, VMULESD, VMULOUD, VMULOSD, VRLQ,\n+\tVSLQ, VSRQ, VSRAQ, VRLQNM, DIV_V1TI, UDIV_V1TI, DIVES_V1TI, DIVEU_V1TI,\n+\tMODS_V1TI, MODU_V1TI, VRLQMI): New macro expansions.\n+\t(VRLQ, VSLQ, VSRQ, VSRAQ, DIVE, MOD): New overload expansions.\n+\t* config/rs6000/rs6000-call.c (P10_BUILTIN_VCMPEQUT,\n+\tP10V_BUILTIN_CMPGE_1TI, P10V_BUILTIN_CMPGE_U1TI,\n+\tP10V_BUILTIN_VCMPGTUT, P10V_BUILTIN_VCMPGTST,\n+\tP10V_BUILTIN_CMPLE_1TI, P10V_BUILTIN_VCMPLE_U1TI,\n+\tP10V_BUILTIN_DIV_V1TI, P10V_BUILTIN_UDIV_V1TI,\n+\tP10V_BUILTIN_VMULESD, P10V_BUILTIN_VMULEUD,\n+\tP10V_BUILTIN_VMULOSD, P10V_BUILTIN_VMULOUD,\n+\tP10V_BUILTIN_VNOR_V1TI, P10V_BUILTIN_VNOR_V1TI_UNS,\n+\tP10V_BUILTIN_VRLQ, P10V_BUILTIN_VRLQMI,\n+\tP10V_BUILTIN_VRLQNM, P10V_BUILTIN_VSLQ,\n+\tP10V_BUILTIN_VSRQ, P10V_BUILTIN_VSRAQ,\n+\tP10V_BUILTIN_VCMPGTUT_P, P10V_BUILTIN_VCMPGTST_P,\n+\tP10V_BUILTIN_VCMPEQUT_P, P10V_BUILTIN_VCMPGTUT_P,\n+\tP10V_BUILTIN_VCMPGTST_P, P10V_BUILTIN_CMPNET,\n+\tP10V_BUILTIN_VCMPNET_P, P10V_BUILTIN_VCMPAET_P,\n+\tP10V_BUILTIN_DIVES_V1TI, P10V_BUILTIN_MODS_V1TI,\n+\tP10V_BUILTIN_MODU_V1TI):\n+\tNew overloaded definitions.\n+\t(rs6000_gimple_fold_builtin) [P10V_BUILTIN_VCMPEQUT,\n+\tP10V_BUILTIN_CMPNET, P10V_BUILTIN_CMPGE_1TI,\n+\tP10V_BUILTIN_CMPGE_U1TI, P10V_BUILTIN_VCMPGTUT,\n+\tP10V_BUILTIN_VCMPGTST, P10V_BUILTIN_CMPLE_1TI,\n+\tP10V_BUILTIN_CMPLE_U1TI]: New case statements.\n+\t(rs6000_init_builtins) [bool_V1TI_type_node, int_ftype_int_v1ti_v1ti]:\n+\tNew assignments.\n+\t(altivec_init_builtins): New E_V1TImode case statement.\n+\t(builtin_function_type)[P10_BUILTIN_128BIT_VMULEUD,\n+\tP10_BUILTIN_128BIT_VMULOUD, P10_BUILTIN_128BIT_DIVEU_V1TI,\n+\tP10_BUILTIN_128BIT_MODU_V1TI, P10_BUILTIN_CMPGE_U1TI,\n+\tP10_BUILTIN_VCMPGTUT, P10_BUILTIN_VCMPEQUT]: New case statements.\n+\t* config/rs6000/rs6000.c (rs6000_handle_altivec_attribute) [E_TImode,\n+\tE_V1TImode]: New case statements.\n+\t* config/rs6000/rs6000.h (rs6000_builtin_type_index): New enum\n+\tvalue RS6000_BTI_bool_V1TI.\n+\t* config/rs6000/vector.md (vector_gtv1ti,vector_nltv1ti,\n+\tvector_gtuv1ti, vector_nltuv1ti, vector_ngtv1ti, vector_ngtuv1ti,\n+\tvector_eq_v1ti_p, vector_ne_v1ti_p, vector_ae_v1ti_p,\n+\tvector_gt_v1ti_p, vector_gtu_v1ti_p, vrotlv1ti3, vashlv1ti3,\n+\tvlshrv1ti3, vashrv1ti3): New define_expands.\n+\t* config/rs6000/vsx.md (UNSPEC_VSX_DIVSQ, UNSPEC_VSX_DIVUQ,\n+\tUNSPEC_VSX_DIVESQ, UNSPEC_VSX_DIVEUQ, UNSPEC_VSX_MODSQ,\n+\tUNSPEC_VSX_MODUQ): New unspecs.\n+\t(mulv2di3, vsx_div_v1ti, vsx_udiv_v1ti, vsx_dives_v1ti,\n+\tvsx_diveu_v1ti,\tvsx_mods_v1ti, vsx_modu_v1ti, xxswapd_v1ti): New\n+\tdefine_insns.\n+\t(vcmpnet): New define_expand.\n+\t* doc/extend.texi: Add documentation for the new builtins vec_rl,\n+\tvec_rlmi, vec_rlnm, vec_sl, vec_sr, vec_sra, vec_mule, vec_mulo,\n+\tvec_div, vec_dive, vec_mod, vec_cmpeq, vec_cmpne, vec_cmpgt, vec_cmplt,\n+\tvec_cmpge, vec_cmple, vec_all_eq, vec_all_ne, vec_all_gt, vec_all_lt,\n+\tvec_all_ge, vec_all_le, vec_any_eq, vec_any_ne, vec_any_gt, vec_any_lt,\n+\tvec_any_ge, vec_any_le.\n+\n+2021-06-09  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/altivec.md (altivec_vrl<VI_char>mi): Fix\n+\tbug in argument generation.\n+\n+2021-06-09  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/arm/iterators.md (<supf>): Remove VCLZQ_U, VCLZQ_S.\n+\t(VCLZQ): Remove.\n+\t* config/arm/mve.md (mve_vclzq_<supf><mode>): Add '@' prefix,\n+\tremove <supf> iterator.\n+\t(mve_vclzq_u<mode>): New.\n+\t* config/arm/neon.md (clz<mode>2): Rename to neon_vclz<mode>.\n+\t(neon_vclz<mode): Move to ...\n+\t* config/arm/unspecs.md (VCLZQ_U, VCLZQ_S): Remove.\n+\t* config/arm/vec-common.md: ... here. Add support for MVE.\n+\n+2021-06-09  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/arm/mve.md (mve_vhaddq_<supf><mode>): Prefix with '@'.\n+\t(@mve_vrhaddq_<supf><mode): Likewise.\n+\t* config/arm/neon.md (neon_v<r>hadd<sup><mode>): Likewise.\n+\t* config/arm/vec-common.md (avg<mode>3_floor, uavg<mode>3_floor)\n+\t(avg<mode>3_ceil\", uavg<mode>3_ceil): New patterns.\n+\n+2021-06-09  imba-tjd  <109224573@qq.com>\n+\n+\t* doc/invoke.texi: Fix typo.\n+\n+2021-06-09  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR middle-end/53267\n+\t* fold-const-call.c (fold_const_call_sss) [CASE_CFN_FMOD]:\n+\tSupport evaluation of fmod/fmodf/fmodl at compile-time.\n+\n+2021-06-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/100981\n+\t* tree-vect-loop.c (vect_create_epilog_for_reduction): Use\n+\tgimple_get_lhs to also handle calls.\n+\t* tree-vect-slp-patterns.c (complex_pattern::build): Transfer\n+\treduction info.\n+\n+2021-06-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97832\n+\t* tree-vectorizer.h (_slp_tree::failed): New.\n+\t* tree-vect-slp.c (_slp_tree::_slp_tree): Initialize\n+\tfailed member.\n+\t(_slp_tree::~_slp_tree): Free failed.\n+\t(vect_build_slp_tree): Retain failed nodes and record\n+\tmatches in them, copying that back out when running\n+\tinto a cached fail.  Dump start and end of discovery.\n+\t(dt_sort_cmp): New.\n+\t(vect_build_slp_tree_2): Handle associatable chains\n+\ttogether doing more aggressive operand swapping.\n+\n+2021-06-09  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/100896\n+\t* config.gcc (gcc_cv_initfini_array): Set to yes for Linux and\n+\tGNU targets.\n+\t* doc/install.texi: Require glibc 2.1 and binutils 2.12 for\n+\tLinux and GNU targets.\n+\n+2021-06-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-stmts.c (vect_is_simple_use): Always get dt\n+\tfrom the stmt.\n+\n+2021-06-09  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.md (loop_end): Change it to\n+\tdefine_insn_and_split.\n+\n+2021-06-09  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.md (maddhisi4): Use VMAC2H instruction.\n+\t(machi): New pattern.\n+\t(umaddhisi4): Use VMAC2HU instruction.\n+\t(umachi): New pattern.\n+\n+2021-06-09  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc-protos.h (arc_split_move_p): New prototype.\n+\t* config/arc/arc.c (arc_split_move_p): New function.\n+\t(arc_split_move): Clean up.\n+\t* config/arc/arc.md (movdi_insn): Clean up, use arc_split_move_p.\n+\t(movdf_insn): Likewise.\n+\t* config/arc/simdext.md (mov<VWH>_insn): Likewise.\n+\n+2021-06-09  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100936\n+\t* config/i386/i386.c (print_operand_address_as): Rename \"no_rip\"\n+\targument to \"raw\".  Do not emit segment overrides when \"raw\" is true.\n+\n+2021-06-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/gcov.texi: Create a proper JSON files.\n+\t* doc/invoke.texi: Remove dots in order to make it a valid\n+\tJSON object.\n+\n+2021-06-09  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-p8swap.c (pattern_is_rotate64): New.\n+\t(insn_is_load_p): Use pattern_is_rotate64.\n+\t(insn_is_swap_p): Likewise.\n+\t(quad_aligned_load_p): Likewise.\n+\t(const_load_sequence_p): Likewise.\n+\t(replace_swapped_aligned_load): Likewise.\n+\t(recombine_lvx_pattern): Likewise.\n+\t(recombine_stvx_pattern): Likewise.\n+\n+2021-06-09  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-gori.cc (gori_compute::outgoing_edge_range_p): Use a\n+\tfur_stmt source record.\n+\t* gimple-range.cc (fur_source::get_operand): Generic range query.\n+\t(fur_source::get_phi_operand): New.\n+\t(fur_source::register_dependency): New.\n+\t(fur_source::query): New.\n+\t(class fur_edge): New.  Edge source for operands.\n+\t(fur_edge::fur_edge): New.\n+\t(fur_edge::get_operand): New.\n+\t(fur_edge::get_phi_operand): New.\n+\t(fur_edge::query): New.\n+\t(fur_stmt::fur_stmt): New.\n+\t(fur_stmt::get_operand): New.\n+\t(fur_stmt::get_phi_operand): New.\n+\t(fur_stmt::query): New.\n+\t(class fur_depend): New.  Statement source and process dependencies.\n+\t(fur_depend::fur_depend): New.\n+\t(fur_depend::register_dependency): New.\n+\t(class fur_list): New.  List source for operands.\n+\t(fur_list::fur_list): New.\n+\t(fur_list::get_operand): New.\n+\t(fur_list::get_phi_operand): New.\n+\t(fold_range): New.  Instantiate appropriate fur_source class and fold.\n+\t(fold_using_range::range_of_range_op): Use new API.\n+\t(fold_using_range::range_of_address): Ditto.\n+\t(fold_using_range::range_of_phi): Ditto.\n+\t(imple_ranger::fold_range_internal): Use fur_depend class.\n+\t(fold_using_range::range_of_ssa_name_with_loop_info): Use new API.\n+\t* gimple-range.h (class fur_source): Now a base class.\n+\t(class fur_stmt): New.\n+\t(fold_range): New prototypes.\n+\t(fur_source::fur_source): Delete.\n+\n 2021-06-08  Andrew Pinski  <apinski@marvell.com>\n \n \tPR tree-optimization/25290"}, {"sha": "04de83c25ef84db02e6c9c1d331f6b040d50db31", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f625f47b4456e5c05a025fca4d072831e59126c/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f625f47b4456e5c05a025fca4d072831e59126c/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=4f625f47b4456e5c05a025fca4d072831e59126c", "patch": "@@ -1 +1 @@\n-20210609\n+20210610"}, {"sha": "f2061ac5c3db51576e49f00ae70e606e27201c39", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f625f47b4456e5c05a025fca4d072831e59126c/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f625f47b4456e5c05a025fca4d072831e59126c/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=4f625f47b4456e5c05a025fca4d072831e59126c", "patch": "@@ -1,3 +1,18 @@\n+2021-06-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* region-model.cc (region_model::get_lvalue_1): Make const.\n+\t(region_model::get_lvalue): Likewise.\n+\t(region_model::get_rvalue_1): Likewise.\n+\t(region_model::get_rvalue): Likewise.\n+\t(region_model::deref_rvalue): Likewise.\n+\t(region_model::get_rvalue_for_bits): Likewise.\n+\t* region-model.h (region_model::get_lvalue): Likewise.\n+\t(region_model::get_rvalue): Likewise.\n+\t(region_model::deref_rvalue): Likewise.\n+\t(region_model::get_rvalue_for_bits): Likewise.\n+\t(region_model::get_lvalue_1): Likewise.\n+\t(region_model::get_rvalue_1): Likewise.\n+\n 2021-06-08  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/99212"}, {"sha": "460ced3db5aa47dfaf002749bf417feae2e745cc", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f625f47b4456e5c05a025fca4d072831e59126c/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f625f47b4456e5c05a025fca4d072831e59126c/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=4f625f47b4456e5c05a025fca4d072831e59126c", "patch": "@@ -1,3 +1,9 @@\n+2021-06-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100879\n+\t* c-warn.c (warn_for_sign_compare): Remove C++ enum mismatch\n+\twarning.\n+\n 2021-06-07  Martin Liska  <mliska@suse.cz>\n \n \t* c-target.def: Split long lines and replace them"}, {"sha": "1b653f67d4f2d999fd27b9f9d6c62366ee095cba", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f625f47b4456e5c05a025fca4d072831e59126c/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f625f47b4456e5c05a025fca4d072831e59126c/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=4f625f47b4456e5c05a025fca4d072831e59126c", "patch": "@@ -1,3 +1,13 @@\n+2021-06-09  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/100964\n+\t* dmd/MERGE: Merge upstream dmd 4a4e46a6f.\n+\n+2021-06-09  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/100935\n+\t* dmd/MERGE: Merge upstream dmd f3fdeb578.\n+\n 2021-06-04  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/100882"}, {"sha": "242c680a322a9ba6a34fd590a1ed74afc8d6acc1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f625f47b4456e5c05a025fca4d072831e59126c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f625f47b4456e5c05a025fca4d072831e59126c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4f625f47b4456e5c05a025fca4d072831e59126c", "patch": "@@ -1,3 +1,12 @@\n+2021-06-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* intrinsic.texi: Add missing @headitem to tables with a header.\n+\n+2021-06-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/100965\n+\t* trans-openmp.c (gfc_omp_finish_clause): Gimplify OMP_CLAUSE_SIZE.\n+\n 2021-06-08  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR middle-end/99928"}, {"sha": "9e31d686e1cb3b63b2141f86e5394aa1794ecdf5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f625f47b4456e5c05a025fca4d072831e59126c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f625f47b4456e5c05a025fca4d072831e59126c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4f625f47b4456e5c05a025fca4d072831e59126c", "patch": "@@ -1,3 +1,103 @@\n+2021-06-09  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* g++.dg/torture/pr100925.C: New test.\n+\n+2021-06-09  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/int_128bit-runnable.c (extsd2q): Update expected\n+\tcount.\n+\tAdd tests for vec_signextq.\n+\t* gcc.target/powerpc/p9-sign_extend-runnable.c:  New test case.\n+\n+2021-06-09  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/fp128_conversions.c: New file.\n+\t* gcc.target/powerpc/int_128bit-runnable.c(vextsd2q,\n+\tvcmpuq, vcmpsq, vcmpequq, vcmpequq., vcmpgtsq, vcmpgtsq.\n+\tvcmpgtuq, vcmpgtuq.): Update scan-assembler-times.\n+\t(ppc_native_128bit): Remove dg-require-effective-target.\n+\n+2021-06-09  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/int_128bit-runnable.c: Add shift_right, shift_left\n+\ttests.\n+\n+2021-06-09  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/int_128bit-runnable.c: Add 128-bit DFP\n+\tconversion tests.\n+\n+2021-06-09  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/int_128bit-runnable.c: New test file.\n+\n+2021-06-09  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/check-builtin-vec_rlnm-runnable.c:\n+\tNew runnable test case.\n+\t* gcc.target/powerpc/vec-rlmi-rlnm.c: Update scan assembler times\n+\tfor xxlor instruction.\n+\n+2021-06-09  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/simd/mve-vclz.c: New test.\n+\n+2021-06-09  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/simd/mve-vhadd-1.c: New test.\n+\t* gcc.target/arm/simd/mve-vhadd-2.c: New test.\n+\t* gcc.target/arm/simd/neon-vhadd-1.c: New test.\n+\t* gcc.target/arm/simd/neon-vhadd-2.c: New test.\n+\n+2021-06-09  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.dg/builtins-70.c: New test.\n+\n+2021-06-09  Aaron Sawdey  <acsawdey@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/fusion-p10-2logical.c: Update fused insn\n+\tcounts to test 32 and 64 bit separately.\n+\t* gcc.target/powerpc/fusion-p10-addadd.c: Update fused insn\n+\tcounts to test 32 and 64 bit separately.\n+\t* gcc.target/powerpc/fusion-p10-ldcmpi.c: Update fused insn\n+\tcounts to test 32 and 64 bit separately.\n+\t* gcc.target/powerpc/fusion-p10-logadd.c: Update fused insn\n+\tcounts to test 32 and 64 bit separately.\n+\n+2021-06-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/100981\n+\t* gfortran.dg/vect/pr100981-1.f90: New testcase.\n+\n+2021-06-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97832\n+\t* gcc.dg/vect/pr97832-1.c: New testcase.\n+\t* gcc.dg/vect/pr97832-2.c: Likewise.\n+\t* gcc.dg/vect/pr97832-3.c: Likewise.\n+\t* g++.dg/vect/slp-pr98855.cc: XFAIL.\n+\t* gcc.dg/vect/slp-50.c: New file.\n+\n+2021-06-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/100965\n+\t* gfortran.dg/gomp/pr100965.f90: New test.\n+\n+2021-06-09  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100936\n+\t* gcc.target/i386/pr100936.c: New test.\n+\n+2021-06-09  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/float128-call.c: Adjust.\n+\t* gcc.target/powerpc/pr100085.c: New test.\n+\n+2021-06-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100879\n+\t* g++.dg/diagnostic/enum3.C: New test.\n+\n 2021-06-08  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/100065"}, {"sha": "53b66f86cd017ee1bede67330ec4ef4c393d2b9c", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f625f47b4456e5c05a025fca4d072831e59126c/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f625f47b4456e5c05a025fca4d072831e59126c/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=4f625f47b4456e5c05a025fca4d072831e59126c", "patch": "@@ -1,3 +1,43 @@\n+2021-06-09  Carl Love  <cel@us.ibm.com>\n+\n+\t* config.host: Add if test and set for\n+\tlibgcc_cv_powerpc_3_1_float128_hw.\n+\t* config/rs6000/fixkfti.c: Renamed to fixkfti-sw.c.\n+\tChange calls of __fixkfti to __fixkfti_sw.\n+\t* config/rs6000/fixunskfti.c: Renamed to fixunskfti-sw.c.\n+\tChange calls of __fixunskfti to __fixunskfti_sw.\n+\t* config/rs6000/float128-p10.c (__floattikf_hw,\n+\t__floatuntikf_hw, __fixkfti_hw, __fixunskfti_hw): New file.\n+\t* config/rs6000/float128-ifunc.c (SW_OR_HW_ISA3_1): New macro.\n+\t(__floattikf_resolve, __floatuntikf_resolve, __fixkfti_resolve,\n+\t__fixunskfti_resolve): Add resolve functions.\n+\t(__floattikf, __floatuntikf, __fixkfti, __fixunskfti): New functions.\n+\t* config/rs6000/float128-sed (floattitf, __floatuntitf,\n+\t__fixtfti, __fixunstfti): Add editor commands to change names.\n+\t* config/rs6000/float128-sed-hw (__floattitf,\n+\t__floatuntitf, __fixtfti, __fixunstfti): Add editor commands to\n+\tchange names.\n+\t* config/rs6000/floattikf.c: Renamed to floattikf-sw.c.\n+\t* config/rs6000/floatuntikf.c: Renamed to floatuntikf-sw.c.\n+\t* config/rs6000/quad-float128.h (__floattikf_sw,\n+\t__floatuntikf_sw, __fixkfti_sw, __fixunskfti_sw, __floattikf_hw,\n+\t__floatuntikf_hw, __fixkfti_hw, __fixunskfti_hw, __floattikf,\n+\t__floatuntikf, __fixkfti, __fixunskfti): New extern declarations.\n+\t* config/rs6000/t-float128 (floattikf, floatuntikf,\n+\tfixkfti, fixunskfti): Remove file names from fp128_ppc_funcs.\n+\t(floattikf-sw, floatuntikf-sw, fixkfti-sw, fixunskfti-sw): Add\n+\tfile names to fp128_ppc_funcs.\n+\t* config/rs6000/t-float128-hw(fp128_3_1_hw_funcs,\n+\tfp128_3_1_hw_src, fp128_3_1_hw_static_obj, fp128_3_1_hw_shared_obj,\n+\tfp128_3_1_hw_obj): Add variables for ISA 3.1 support.\n+\t* config/rs6000/t-float128-p10-hw: New file.\n+\t* configure: Update script for isa 3.1 128-bit float support.\n+\t* configure.ac: Add check for 128-bit float hardware support.\n+\t* config/rs6000/fixkfti-sw.c: New file.\n+\t* config/rs6000/fixunskfti-sw.c: New file.\n+\t* config/rs6000/floattikf-sw.c: New file.\n+\t* config/rs6000/floatuntikf-sw.c: New file.\n+\n 2021-05-13  Dimitar Dimitrov  <dimitar@dinux.eu>\n \n \t* config/pru/mpyll.S (__pruabi_mpyll): Place into own section."}, {"sha": "255c1604e68906f110ea6a24b48f60c2a183eaad", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f625f47b4456e5c05a025fca4d072831e59126c/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f625f47b4456e5c05a025fca4d072831e59126c/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=4f625f47b4456e5c05a025fca4d072831e59126c", "patch": "@@ -1,3 +1,13 @@\n+2021-06-09  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* testsuite/lib/libgomp.exp (libgomp_init): Don't add -march=i486\n+\tif atomic compare-and-swap is supported on 'int'.\n+\n+2021-06-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/100981\n+\t* testsuite/libgomp.fortran/pr100981-2.f90: New testcase.\n+\n 2021-06-08  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* plugin/plugin-gcn.c (gcn_exec): Force 'num_workers (1)'"}, {"sha": "583ca4ddb506d676620a15af8a2dc0aad7ed815c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f625f47b4456e5c05a025fca4d072831e59126c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f625f47b4456e5c05a025fca4d072831e59126c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4f625f47b4456e5c05a025fca4d072831e59126c", "patch": "@@ -1,3 +1,25 @@\n+2021-06-09  Thomas Rodgers  <rodgert@appliantology.com>\n+\n+\t* testsuite/29_atomics/atomic_ref/wait_notify.cc: Guard\n+\ttest logic with constexpr check for is_always_lock_free.\n+\n+2021-06-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/100982\n+\t* include/std/optional (optional::operator=(const optional<U>&)):\n+\tFix value category used in is_assignable check.\n+\t* testsuite/20_util/optional/assignment/100982.cc: New test.\n+\n+2021-06-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/allocator.h (allocator::is_always_equal): Deprecate.\n+\t* include/bits/iterator_concepts.h (indirectly_readable_traits):\n+\tAdd LWG issue number to comment.\n+\t* include/std/memory_resource (polymorphic_allocator::release):\n+\tDeprecate.\n+\t* testsuite/20_util/allocator/requirements/typedefs.cc: Add\n+\tdg-warning for deprecation. Also check std::allocator<void>.\n+\n 2021-06-08  Thomas Rodgers  <rodgert@appliantology.com>\n \n \tPR libstdc++/100889"}]}