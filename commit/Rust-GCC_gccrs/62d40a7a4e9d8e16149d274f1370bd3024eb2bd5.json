{"sha": "62d40a7a4e9d8e16149d274f1370bd3024eb2bd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJkNDBhN2E0ZTlkOGUxNjE0OWQyNzRmMTM3MGJkMzAyNGViMmJkNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-05-02T08:49:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-05-02T08:49:55Z"}, "message": "[multiple changes]\n\n2017-05-02  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* atree.h (Flag290): Add missing terminating parenthesis.\n\t* einfo.adb (Is_Class_Wide_Clone): Use Flag290.\n\t(Set_Is_Class_Wide_Clone): Likewise.\n\t* einfo.ads (Is_Class_Wide_Clone): Likewise.\n\n2017-05-02  Gary Dismukes  <dismukes@adacore.com>\n\n\t* checks.ads (Null_Exclusion_Static_Checks): Add Boolean\n\tparameter Array_Comp to indicate the case of an array object\n\twith null-excluding components.\n\t* checks.adb (Null_Exclusion_Static_Checks):\n\tCall Compile_Time_Constraint_Error instead of\n\tApply_Compile_Time_Constraint_Error in the component case. Also\n\tcall that when Array_Comp is True, with an appropriate warning for\n\tthe array component case. Only create an explicit initialization\n\tby null in the case of an object of a null-excluding access type\n\t(and no longer do that in the component case).\n\t* sem_ch3.adb (Check_Component): Add a Boolean parameter\n\tArray_Comp defaulted to False.\tPass Empty for the Comp\n\tactual when calling Null_Exclusion_Static_Checks in the case\n\twhere Comp_Decl matches Object_Decl, because we don't have a\n\tcomponent in that case. In the case of an object or component\n\tof an array type, pass True for Array_Comp on the recursive call\n\tto Check_Component.\n\nFrom-SVN: r247474", "tree": {"sha": "40cf95a701fe611bafde52966581fddd6a101dfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40cf95a701fe611bafde52966581fddd6a101dfc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62d40a7a4e9d8e16149d274f1370bd3024eb2bd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62d40a7a4e9d8e16149d274f1370bd3024eb2bd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62d40a7a4e9d8e16149d274f1370bd3024eb2bd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62d40a7a4e9d8e16149d274f1370bd3024eb2bd5/comments", "author": null, "committer": null, "parents": [{"sha": "d86fb53f2099c77d14ce59f2dda30bcfeb1df328", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d86fb53f2099c77d14ce59f2dda30bcfeb1df328", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d86fb53f2099c77d14ce59f2dda30bcfeb1df328"}], "stats": {"total": 123, "additions": 89, "deletions": 34}, "files": [{"sha": "499d6968b94c365c312fef14b34e4c39ef5dad9b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d40a7a4e9d8e16149d274f1370bd3024eb2bd5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d40a7a4e9d8e16149d274f1370bd3024eb2bd5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=62d40a7a4e9d8e16149d274f1370bd3024eb2bd5", "patch": "@@ -1,3 +1,30 @@\n+2017-05-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* atree.h (Flag290): Add missing terminating parenthesis.\n+\t* einfo.adb (Is_Class_Wide_Clone): Use Flag290.\n+\t(Set_Is_Class_Wide_Clone): Likewise.\n+\t* einfo.ads (Is_Class_Wide_Clone): Likewise.\n+\n+2017-05-02  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* checks.ads (Null_Exclusion_Static_Checks): Add Boolean\n+\tparameter Array_Comp to indicate the case of an array object\n+\twith null-excluding components.\n+\t* checks.adb (Null_Exclusion_Static_Checks):\n+\tCall Compile_Time_Constraint_Error instead of\n+\tApply_Compile_Time_Constraint_Error in the component case. Also\n+\tcall that when Array_Comp is True, with an appropriate warning for\n+\tthe array component case. Only create an explicit initialization\n+\tby null in the case of an object of a null-excluding access type\n+\t(and no longer do that in the component case).\n+\t* sem_ch3.adb (Check_Component): Add a Boolean parameter\n+\tArray_Comp defaulted to False.\tPass Empty for the Comp\n+\tactual when calling Null_Exclusion_Static_Checks in the case\n+\twhere Comp_Decl matches Object_Decl, because we don't have a\n+\tcomponent in that case. In the case of an object or component\n+\tof an array type, pass True for Array_Comp on the recursive call\n+\tto Check_Component.\n+\n 2017-05-02  Bob Duff  <duff@adacore.com>\n \n \t* s-taprop-linux.adb (Prio_To_Linux_Prio): New function to correctly"}, {"sha": "7a388832c951bc940d3daccc613e292db3c0d2a0", "filename": "gcc/ada/atree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d40a7a4e9d8e16149d274f1370bd3024eb2bd5/gcc%2Fada%2Fatree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d40a7a4e9d8e16149d274f1370bd3024eb2bd5/gcc%2Fada%2Fatree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.h?ref=62d40a7a4e9d8e16149d274f1370bd3024eb2bd5", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *          Copyright (C) 1992-2016, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2017, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -869,7 +869,7 @@ extern Node_Id Current_Error_Node;\n #define Flag287(N)     (Nodes_Ptr[(N) - First_Node_Id + 5].U.K.in_list)\n #define Flag288(N)     (Nodes_Ptr[(N) - First_Node_Id + 5].U.K.has_aspects)\n #define Flag289(N)     (Nodes_Ptr[(N) - First_Node_Id + 5].U.K.rewrite_ins)\n-#define Flag290(N)     (Nodes_Ptr[(N) - First_Node_Id + 5].U.K.analyzed\n+#define Flag290(N)     (Nodes_Ptr[(N) - First_Node_Id + 5].U.K.analyzed)\n #define Flag291(N)     (Nodes_Ptr[(N) - First_Node_Id + 5].U.K.c_f_s)\n #define Flag292(N)     (Nodes_Ptr[(N) - First_Node_Id + 5].U.K.error_posted)\n #define Flag293(N)     (Nodes_Ptr[(N) - First_Node_Id + 5].U.K.flag4)"}, {"sha": "d4a3aa4ee46ff7d554128ea67765b6535a34a27f", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d40a7a4e9d8e16149d274f1370bd3024eb2bd5/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d40a7a4e9d8e16149d274f1370bd3024eb2bd5/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=62d40a7a4e9d8e16149d274f1370bd3024eb2bd5", "patch": "@@ -4043,8 +4043,9 @@ package body Checks is\n    ----------------------------------\n \n    procedure Null_Exclusion_Static_Checks\n-     (N    : Node_Id;\n-      Comp : Node_Id := Empty)\n+     (N          : Node_Id;\n+      Comp       : Node_Id := Empty;\n+      Array_Comp : Boolean := False)\n    is\n       Error_Node : Node_Id;\n       Expr       : Node_Id;\n@@ -4120,13 +4121,6 @@ package body Checks is\n         and then not Constant_Present (N)\n         and then not No_Initialization (N)\n       then\n-         --  Add an expression that assigns null. This node is needed by\n-         --  Apply_Compile_Time_Constraint_Error, which will replace this with\n-         --  a Constraint_Error node.\n-\n-         Set_Expression (N, Make_Null (Sloc (N)));\n-         Set_Etype (Expression (N), Etype (Defining_Identifier (N)));\n-\n          if Present (Comp) then\n \n             --  Specialize the warning message to indicate that we are dealing\n@@ -4136,14 +4130,36 @@ package body Checks is\n             Error_Msg_Name_1 := Chars (Defining_Identifier (Comp));\n             Error_Msg_Name_2 := Chars (Defining_Identifier (N));\n \n-            Apply_Compile_Time_Constraint_Error\n-              (N      => Expression (N),\n-               Msg    =>\n-                 \"(Ada 2005) null-excluding component % of object % must be \"\n-                 & \"initialized??\",\n-               Reason => CE_Null_Not_Allowed);\n+            Discard_Node\n+              (Compile_Time_Constraint_Error\n+                 (N      => N,\n+                  Msg    =>\n+                    \"(Ada 2005) null-excluding component % of object % must \"\n+                    & \"be initialized??\",\n+                  Ent => Defining_Identifier (Comp)));\n+\n+         --  This is a case of an array with null-excluding components, so\n+         --  indicate that in the warning.\n+\n+         elsif Array_Comp then\n+            Discard_Node\n+              (Compile_Time_Constraint_Error\n+                 (N      => N,\n+                  Msg    =>\n+                    \"(Ada 2005) null-excluding array components must \"\n+                    & \"be initialized??\",\n+                  Ent => Defining_Identifier (N)));\n+\n+         --  Normal case of object of a null-excluding access type\n \n          else\n+            --  Add an expression that assigns null. This node is needed by\n+            --  Apply_Compile_Time_Constraint_Error, which will replace this\n+            --  with a Constraint_Error node.\n+\n+            Set_Expression (N, Make_Null (Sloc (N)));\n+            Set_Etype (Expression (N), Etype (Defining_Identifier (N)));\n+\n             Apply_Compile_Time_Constraint_Error\n               (N      => Expression (N),\n                Msg    =>"}, {"sha": "159cdbaee5e785536f3042cf183ea4bc4001b69f", "filename": "gcc/ada/checks.ads", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d40a7a4e9d8e16149d274f1370bd3024eb2bd5/gcc%2Fada%2Fchecks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d40a7a4e9d8e16149d274f1370bd3024eb2bd5/gcc%2Fada%2Fchecks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.ads?ref=62d40a7a4e9d8e16149d274f1370bd3024eb2bd5", "patch": "@@ -916,13 +916,17 @@ package Checks is\n    --  see the warning in the body of Sem_Ch3.Process_Range_Expr_In_Decl.\n \n    procedure Null_Exclusion_Static_Checks\n-     (N    : Node_Id;\n-      Comp : Node_Id := Empty);\n-   --  Ada 2005 (AI-231): Check bad usages of the null-exclusion issue\n+     (N          : Node_Id;\n+      Comp       : Node_Id := Empty;\n+      Array_Comp : Boolean := False);\n+   --  Ada 2005 (AI-231): Test for and warn on null-excluding objects or\n+   --  components that will raise an exception due to initialization by null.\n    --\n    --  When a value for Comp is supplied (as in the case of an uninitialized\n    --  null-excluding component within a composite object), a reported warning\n    --  will indicate the offending component instead of the object itself.\n+   --  Array_Comp being True indicates an array object with null-excluding\n+   --  components, and any reported warning will indicate that.\n \n    procedure Remove_Checks (Expr : Node_Id);\n    --  Remove all checks from Expr except those that are only executed"}, {"sha": "76ab625ff435b39523fc831a382babddf756655c", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d40a7a4e9d8e16149d274f1370bd3024eb2bd5/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d40a7a4e9d8e16149d274f1370bd3024eb2bd5/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=62d40a7a4e9d8e16149d274f1370bd3024eb2bd5", "patch": "@@ -603,8 +603,7 @@ package body Einfo is\n    --    Rewritten_For_C                 Flag287\n    --    Predicates_Ignored              Flag288\n    --    Has_Timing_Event                Flag289\n-\n-   --    (unused)                        Flag290  --  ??? flag breaks einfo.h\n+   --    Is_Class_Wide_Clone             Flag290\n \n    --    Has_Inherited_Invariants        Flag291\n    --    Is_Partial_Invariant_Procedure  Flag292\n@@ -615,10 +614,10 @@ package body Einfo is\n    --    Is_Entry_Wrapper                Flag297\n    --    Is_Underlying_Full_View         Flag298\n    --    Body_Needed_For_Inlining        Flag299\n-\n    --    Has_Private_Extension           Flag300\n+\n    --    Ignore_SPARK_Mode_Pragmas       Flag301\n-   --    Is_Class_Wide_Clone             Flag302\n+   --    (unused)                        Flag302\n    --    (unused)                        Flag303\n    --    (unused)                        Flag304\n    --    (unused)                        Flag305\n@@ -2134,7 +2133,7 @@ package body Einfo is\n \n    function Is_Class_Wide_Clone (Id : E) return B is\n    begin\n-      return Flag302 (Id);\n+      return Flag290 (Id);\n    end Is_Class_Wide_Clone;\n \n    function Is_Class_Wide_Equivalent_Type (Id : E) return B is\n@@ -5258,7 +5257,7 @@ package body Einfo is\n \n    procedure Set_Is_Class_Wide_Clone (Id : E; V : B := True) is\n    begin\n-      Set_Flag302 (Id, V);\n+      Set_Flag290 (Id, V);\n    end Set_Is_Class_Wide_Clone;\n \n    procedure Set_Is_Class_Wide_Equivalent_Type (Id : E; V : B := True) is"}, {"sha": "f2b9d932887db745eaaa71a24ce979a6d76dfb4b", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d40a7a4e9d8e16149d274f1370bd3024eb2bd5/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d40a7a4e9d8e16149d274f1370bd3024eb2bd5/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=62d40a7a4e9d8e16149d274f1370bd3024eb2bd5", "patch": "@@ -2356,7 +2356,7 @@ package Einfo is\n --       Defined in all entities. Set only for defining entities of program\n --       units that are child units (but False for subunits).\n \n---    Is_Class_Wide_Clone (Flag302)\n+--    Is_Class_Wide_Clone (Flag290)\n --       Defined on subprogram entities. Set for subprograms built in order\n --       to implement properly the inheritance of class-wide pre- or post-\n --       conditions when the condition contains calls to other primitives"}, {"sha": "f55e7d4f8fec6be2c844f0c376440ade9e6ce066", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d40a7a4e9d8e16149d274f1370bd3024eb2bd5/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d40a7a4e9d8e16149d274f1370bd3024eb2bd5/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=62d40a7a4e9d8e16149d274f1370bd3024eb2bd5", "patch": "@@ -3648,7 +3648,9 @@ package body Sem_Ch3 is\n          then\n             Comp := First_Component (Obj_Type);\n             while Present (Comp) loop\n-               if Known_Static_Esize (Etype (Comp)) then\n+               if Known_Static_Esize (Etype (Comp))\n+                 or else Size_Known_At_Compile_Time (Etype (Comp))\n+               then\n                   null;\n \n                elsif not Discriminated_Size (Comp)\n@@ -3674,8 +3676,9 @@ package body Sem_Ch3 is\n          Obj_Decl : Node_Id)\n       is\n          procedure Check_Component\n-           (Comp_Typ  : Entity_Id;\n-            Comp_Decl : Node_Id := Empty);\n+           (Comp_Typ   : Entity_Id;\n+            Comp_Decl  : Node_Id := Empty;\n+            Array_Comp : Boolean := False);\n          --  Apply a compile-time null-exclusion check on a component denoted\n          --  by its declaration Comp_Decl and type Comp_Typ, and all of its\n          --  subcomponents (if any).\n@@ -3686,7 +3689,8 @@ package body Sem_Ch3 is\n \n          procedure Check_Component\n            (Comp_Typ  : Entity_Id;\n-            Comp_Decl : Node_Id := Empty)\n+            Comp_Decl : Node_Id := Empty;\n+            Array_Comp : Boolean := False)\n          is\n             Comp : Entity_Id;\n             T    : Entity_Id;\n@@ -3715,7 +3719,12 @@ package body Sem_Ch3 is\n             if Is_Access_Type (T)\n               and then Can_Never_Be_Null (T)\n             then\n-               Null_Exclusion_Static_Checks (Obj_Decl, Comp_Decl);\n+               if Comp_Decl = Obj_Decl then\n+                  Null_Exclusion_Static_Checks (Obj_Decl, Empty, Array_Comp);\n+               else\n+                  Null_Exclusion_Static_Checks\n+                    (Obj_Decl, Comp_Decl, Array_Comp);\n+               end if;\n \n             --  Check array components\n \n@@ -3724,10 +3733,10 @@ package body Sem_Ch3 is\n                --  There is no suitable component when the object is of an\n                --  array type. However, a namable component may appear at some\n                --  point during the recursive inspection, but not at the top\n-               --  level.\n+               --  level. At the top level just indicate array component case.\n \n                if Comp_Decl = Obj_Decl then\n-                  Check_Component (Component_Type (T));\n+                  Check_Component (Component_Type (T), Array_Comp => True);\n                else\n                   Check_Component (Component_Type (T), Comp_Decl);\n                end if;"}]}