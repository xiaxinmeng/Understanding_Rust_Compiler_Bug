{"sha": "bf7edb60c8fb5aada12dd870c029aaac488a042b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY3ZWRiNjBjOGZiNWFhZGExMmRkODcwYzAyOWFhYWM0ODhhMDQyYg==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-01-03T04:44:07Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-01-03T04:44:07Z"}, "message": "re PR libstdc++/2054 (g++-3 rejects legal code, accepted by g++-2.95.2 (functors))\n\n2002-01-02  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* include/bits/stl_algo.h (upper_bound, equal_range, binary_search):\n\tChange concept checks, as with lower_bound and PR 2054.\n\t* testsuite/ext/concept_checks.cc:  Expand test to include those.\n\nFrom-SVN: r48492", "tree": {"sha": "da9057dde231eaa595ac3365351b362c50471279", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da9057dde231eaa595ac3365351b362c50471279"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf7edb60c8fb5aada12dd870c029aaac488a042b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf7edb60c8fb5aada12dd870c029aaac488a042b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf7edb60c8fb5aada12dd870c029aaac488a042b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf7edb60c8fb5aada12dd870c029aaac488a042b/comments", "author": null, "committer": null, "parents": [{"sha": "0a379b7a079daa280d6f03d839ce636758055a29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a379b7a079daa280d6f03d839ce636758055a29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a379b7a079daa280d6f03d839ce636758055a29"}], "stats": {"total": 39, "additions": 30, "deletions": 9}, "files": [{"sha": "cf7f6bd8d173b7e1f297e703cdd746249cc41e7d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf7edb60c8fb5aada12dd870c029aaac488a042b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf7edb60c8fb5aada12dd870c029aaac488a042b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bf7edb60c8fb5aada12dd870c029aaac488a042b", "patch": "@@ -1,3 +1,9 @@\n+2002-01-02  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* include/bits/stl_algo.h (upper_bound, equal_range, binary_search):\n+\tChange concept checks, as with lower_bound and PR 2054.\n+\t* testsuite/ext/concept_checks.cc:  Expand test to include those.\n+\n 2002-01-02  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* include/bits/boost_concept_check.h:  Import some changes from"}, {"sha": "e8e9845f822bbe983cb469557d5a48f0f96fb81e", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf7edb60c8fb5aada12dd870c029aaac488a042b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf7edb60c8fb5aada12dd870c029aaac488a042b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=bf7edb60c8fb5aada12dd870c029aaac488a042b", "patch": "@@ -1,6 +1,6 @@\n // Algorithm implimentation -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -1949,6 +1949,10 @@ __result, __binary_pred, _IterType());\n       typedef typename iterator_traits<_ForwardIter>::difference_type _DistanceType;\n     \n       // concept requirements\n+      // Note that these are slightly stricter than those of the 4-argument\n+      // version, defined next.  The difference is in the strictness of the\n+      // comparison operations... so for looser checking, define your own\n+      // comparison function, as was intended.\n       __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_SameTypeConcept<_Tp, _ValueType>)\n       __glibcpp_function_requires(_LessThanComparableConcept<_Tp>)\n@@ -2011,6 +2015,7 @@ __result, __binary_pred, _IterType());\n       typedef typename iterator_traits<_ForwardIter>::difference_type _DistanceType;\n       \n       // concept requirements\n+      // See comments on lower_bound.\n       __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_SameTypeConcept<_Tp, _ValueType>)\n       __glibcpp_function_requires(_LessThanComparableConcept<_Tp>)\n@@ -2044,8 +2049,7 @@ __result, __binary_pred, _IterType());\n       \n       // concept requirements\n       __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n-      __glibcpp_function_requires(_SameTypeConcept<_Tp, _ValueType>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare, _Tp, _Tp>)\n+      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare, _Tp, _ValueType>)\n     \n       _DistanceType __len = distance(__first, __last);\n       _DistanceType __half;\n@@ -2074,6 +2078,7 @@ __result, __binary_pred, _IterType());\n       typedef typename iterator_traits<_ForwardIter>::difference_type _DistanceType;\n       \n       // concept requirements\n+      // See comments on lower_bound.\n       __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_SameTypeConcept<_Tp, _ValueType>)\n       __glibcpp_function_requires(_LessThanComparableConcept<_Tp>)\n@@ -2113,8 +2118,8 @@ __result, __binary_pred, _IterType());\n       \n       // concept requirements\n       __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n-      __glibcpp_function_requires(_SameTypeConcept<_Tp, _ValueType>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare, _Tp, _Tp>)\n+      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare, _ValueType, _Tp>)\n+      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare, _Tp, _ValueType>)\n     \n       _DistanceType __len = distance(__first, __last);\n       _DistanceType __half;\n@@ -2147,6 +2152,7 @@ __result, __binary_pred, _IterType());\n                   const _Tp& __val)\n     {\n       // concept requirements\n+      // See comments on lower_bound.\n       __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_SameTypeConcept<_Tp,\n \t\ttypename iterator_traits<_ForwardIter>::value_type>)\n@@ -2163,9 +2169,10 @@ __result, __binary_pred, _IterType());\n     {\n       // concept requirements\n       __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n-      __glibcpp_function_requires(_SameTypeConcept<_Tp,\n+      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n+\t\ttypename iterator_traits<_ForwardIter>::value_type, _Tp>)\n+      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare, _Tp,\n \t\ttypename iterator_traits<_ForwardIter>::value_type>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare, _Tp, _Tp>)\n \n       _ForwardIter __i = lower_bound(__first, __last, __val, __comp);\n       return __i != __last && !__comp(__val, *__i);"}, {"sha": "8109985d1ca31580efbcf7922e1d5de867c6897a", "filename": "libstdc++-v3/testsuite/ext/concept_checks.cc", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf7edb60c8fb5aada12dd870c029aaac488a042b/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fconcept_checks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf7edb60c8fb5aada12dd870c029aaac488a042b/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fconcept_checks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fconcept_checks.cc?ref=bf7edb60c8fb5aada12dd870c029aaac488a042b", "patch": "@@ -1,6 +1,6 @@\n // 2001-12-28  Phil Edwards  <pme@gcc.gnu.org>\n //\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,7 +30,7 @@\n using namespace std;\n \n \n-// PR libstdc++/2054\n+// PR libstdc++/2054 and follow-up discussion\n struct indirectCompare\n {\n   indirectCompare(const vector<string>& v) : V(v) {}\n@@ -45,6 +45,11 @@ struct indirectCompare\n        return V[x] < a;\n   }\n \n+  bool operator()( const string& a, int x) const\n+  {\n+       return V[x] < a;\n+  }\n+\n   const vector<string>& V;\n };\n \n@@ -66,6 +71,9 @@ test2054( )\n   string SearchTerm;\n \n   lower_bound(Index.begin(), Index.end(), SearchTerm, aComparison);\n+  upper_bound(Index.begin(), Index.end(), SearchTerm, aComparison);\n+  equal_range(Index.begin(), Index.end(), SearchTerm, aComparison);\n+  binary_search(Index.begin(), Index.end(), SearchTerm, aComparison);\n }\n \n int main()"}]}