{"sha": "8ca61ad148ffedaae1914741c78dfd13962aab92", "node_id": "C_kwDOANBUbNoAKDhjYTYxYWQxNDhmZmVkYWFlMTkxNDc0MWM3OGRmZDEzOTYyYWFiOTI", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-03-19T00:16:22Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-03-19T00:16:22Z"}, "message": "Daily bump.", "tree": {"sha": "f415edddc67812f0bdf932b6956f05015fbb6288", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f415edddc67812f0bdf932b6956f05015fbb6288"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ca61ad148ffedaae1914741c78dfd13962aab92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ca61ad148ffedaae1914741c78dfd13962aab92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ca61ad148ffedaae1914741c78dfd13962aab92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ca61ad148ffedaae1914741c78dfd13962aab92/comments", "author": null, "committer": null, "parents": [{"sha": "faacafd2306ad7ece721a79dedbb6e44e0d65bdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faacafd2306ad7ece721a79dedbb6e44e0d65bdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faacafd2306ad7ece721a79dedbb6e44e0d65bdb"}], "stats": {"total": 369, "additions": 368, "deletions": 1}, "files": [{"sha": "18338cd4977704e466de5f37cef667c0d65b10f6", "filename": "c++tools/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca61ad148ffedaae1914741c78dfd13962aab92/c%2B%2Btools%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca61ad148ffedaae1914741c78dfd13962aab92/c%2B%2Btools%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/c%2B%2Btools%2FChangeLog?ref=8ca61ad148ffedaae1914741c78dfd13962aab92", "patch": "@@ -1,3 +1,7 @@\n+2022-03-18  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* server.cc (accept_from): Use \"1\" as the dummy port number.\n+\n 2021-10-26  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* resolver.cc (module_resolver::read_tuple_file): Use unique_ptr"}, {"sha": "400943946cb31835b44fb995e61bdd7628e7465d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca61ad148ffedaae1914741c78dfd13962aab92/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca61ad148ffedaae1914741c78dfd13962aab92/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ca61ad148ffedaae1914741c78dfd13962aab92", "patch": "@@ -1,3 +1,50 @@\n+2022-03-18  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/104961\n+\t* lra-assigns.cc (find_reload_regno_insns): Process reload pseudo clobber.\n+\n+2022-03-18  Jason Merrill  <jason@redhat.com>\n+\n+\t* tree.h (IDENTIFIER_LENGTH): Add comment.\n+\n+2022-03-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/99578\n+\tPR middle-end/100680\n+\tPR tree-optimization/100834\n+\t* params.opt (--param=min-pagesize=): New parameter.\n+\t* pointer-query.cc\n+\t(compute_objsize_r) <case ARRAY_REF>: Formatting fix.\n+\t(compute_objsize_r) <case INTEGER_CST>: Use maximum object size instead\n+\tof zero for pointer constants equal or larger than min-pagesize.\n+\n+2022-03-18  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gimplify.cc (gimplify_omp_for): Set location using 'input_location'.\n+\tSet gfor location only when dealing with a OMP_TASKLOOP.\n+\n+2022-03-18  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gimplify.cc (gimplify_omp_for): Set taskloop location.\n+\n+2022-03-18  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/104952\n+\t* omp-low.cc (lower_rec_input_clauses): Make sure GOMP_SIMT_XCHG_BFLY\n+\tis executed unconditionally.\n+\n+2022-03-18  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/104974\n+\t* config/i386/i386.md (*movhi_internal): Set attr type from HI\n+\tto HF for alternative 12 under TARGET_AVX512FP16.\n+\n+2022-03-18  Cui,Lili  <lili.cui@intel.com>\n+\n+\tPR target/104963\n+\t* config/i386/i386.h (PTA_SAPPHIRERAPIDS): change it to base on ICX.\n+\t* doc/invoke.texi: Update documents for Intel sapphirerapids.\n+\n 2022-03-17  Roger Sayle  <roger@nextmovesoftware.com>\n \n \tPR target/86722"}, {"sha": "b3f465bb5e708acf3c580bf263696c5377a839f8", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca61ad148ffedaae1914741c78dfd13962aab92/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca61ad148ffedaae1914741c78dfd13962aab92/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=8ca61ad148ffedaae1914741c78dfd13962aab92", "patch": "@@ -1 +1 @@\n-20220318\n+20220319"}, {"sha": "4630bcf84b6e128476b9f3220a71ef0d7177b731", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca61ad148ffedaae1914741c78dfd13962aab92/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca61ad148ffedaae1914741c78dfd13962aab92/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=8ca61ad148ffedaae1914741c78dfd13962aab92", "patch": "@@ -1,3 +1,92 @@\n+2022-03-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/104943\n+\tPR analyzer/104954\n+\tPR analyzer/103533\n+\t* analyzer.h (class state_purge_per_decl): New forward decl.\n+\t* engine.cc (impl_run_checkers): Pass region_model_manager to\n+\tstate_purge_map ctor.\n+\t* program-point.cc (function_point::final_stmt_p): New.\n+\t(function_point::get_next): New.\n+\t* program-point.h (function_point::final_stmt_p): New decl.\n+\t(function_point::get_next): New decl.\n+\t* program-state.cc (program_state::prune_for_point): Generalize to\n+\tpurge local decls as well as SSA names.\n+\t(program_state::can_purge_base_region_p): New.\n+\t* program-state.h (program_state::can_purge_base_region_p): New\n+\tdecl.\n+\t* region-model.cc (struct append_ssa_names_cb_data): Rename to...\n+\t(struct append_regions_cb_data): ...this.\n+\t(region_model::get_ssa_name_regions_for_current_frame): Rename\n+\tto...\n+\t(region_model::get_regions_for_current_frame): ...this, updating\n+\tfor other renamings.\n+\t(region_model::append_ssa_names_cb): Rename to...\n+\t(region_model::append_regions_cb): ...this, and drop the requirement\n+\tthat the subregion be a SSA name.\n+\t* region-model.h (struct append_ssa_names_cb_data): Rename decl\n+\tto...\n+\t(struct append_regions_cb_data): ...this.\n+\t(region_model::get_ssa_name_regions_for_current_frame): Rename\n+\tdecl to...\n+\t(region_model::get_regions_for_current_frame): ...this.\n+\t(region_model::append_ssa_names_cb): Rename decl to...\n+\t(region_model::append_regions_cb): ...this.\n+\t* state-purge.cc: Include \"tristate.h\", \"selftest.h\",\n+\t\"analyzer/store.h\", \"analyzer/region-model.h\", and\n+\t\"gimple-walk.h\".\n+\t(get_candidate_for_purging): New.\n+\t(class gimple_op_visitor): New.\n+\t(my_load_cb): New.\n+\t(my_store_cb): New.\n+\t(my_addr_cb): New.\n+\t(state_purge_map::state_purge_map): Add \"mgr\" param.  Update for\n+\trenamings.  Find uses of local variables.\n+\t(state_purge_map::~state_purge_map): Update for renaming of m_map\n+\tto m_ssa_map.  Clean up m_decl_map.\n+\t(state_purge_map::get_or_create_data_for_decl): New.\n+\t(state_purge_per_ssa_name::state_purge_per_ssa_name): Update for\n+\tinheriting from state_purge_per_tree.\n+\t(state_purge_per_ssa_name::add_to_worklist): Likewise.\n+\t(state_purge_per_decl::state_purge_per_decl): New.\n+\t(state_purge_per_decl::add_needed_at): New.\n+\t(state_purge_per_decl::add_pointed_to_at): New.\n+\t(state_purge_per_decl::process_worklists): New.\n+\t(state_purge_per_decl::add_to_worklist): New.\n+\t(same_binding_p): New.\n+\t(fully_overwrites_p): New.\n+\t(state_purge_per_decl::process_point_backwards): New.\n+\t(state_purge_per_decl::process_point_forwards): New.\n+\t(state_purge_per_decl::needed_at_point_p): New.\n+\t(state_purge_annotator::print_needed): Generalize to print local\n+\tdecls as well as SSA names.\n+\t* state-purge.h (class state_purge_map): Update leading comment.\n+\t(state_purge_map::map_t): Rename to...\n+\t(state_purge_map::ssa_map_t): ...this.\n+\t(state_purge_map::iterator): Rename to...\n+\t(state_purge_map::ssa_iterator): ...this.\n+\t(state_purge_map::decl_map_t): New typedef.\n+\t(state_purge_map::decl_iterator): New typedef.\n+\t(state_purge_map::state_purge_map): Add \"mgr\" param.\n+\t(state_purge_map::get_data_for_ssa_name): Update for renaming.\n+\t(state_purge_map::get_any_data_for_decl): New.\n+\t(state_purge_map::get_or_create_data_for_decl): New decl.\n+\t(state_purge_map::begin): Rename to...\n+\t(state_purge_map::begin_ssas): ...this.\n+\t(state_purge_map::end): Rename to...\n+\t(state_purge_map::end_ssa): ...this.\n+\t(state_purge_map::begin_decls): New.\n+\t(state_purge_map::end_decls): New.\n+\t(state_purge_map::m_map): Rename to...\n+\t(state_purge_map::m_ssa_map): ...this.\n+\t(state_purge_map::m_decl_map): New field.\n+\t(class state_purge_per_tree): New class.\n+\t(class state_purge_per_ssa_name): Inherit from state_purge_per_tree.\n+\t(state_purge_per_ssa_name::get_function): Move to base class.\n+\t(state_purge_per_ssa_name::point_set_t): Likewise.\n+\t(state_purge_per_ssa_name::m_fun): Likewise.\n+\t(class state_purge_per_decl): New.\n+\n 2022-03-17  David Malcolm  <dmalcolm@redhat.com>\n \n \t* state-purge.cc (state_purge_annotator::add_node_annotations):"}, {"sha": "dea2eb78518be0307b182d47d9e4b959fbdeab7e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca61ad148ffedaae1914741c78dfd13962aab92/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca61ad148ffedaae1914741c78dfd13962aab92/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8ca61ad148ffedaae1914741c78dfd13962aab92", "patch": "@@ -1,3 +1,39 @@\n+2022-03-18  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/92918\n+\tPR c++/104476\n+\t* class.cc (add_method): Avoid adding the same used function twice.\n+\t(handle_using_decl): Don't add_method.\n+\t(finish_struct): Don't using op= if we have one already.\n+\t(maybe_push_used_methods): New.\n+\t* semantics.cc (finish_member_declaration): Call it.\n+\t* name-lookup.cc (diagnose_name_conflict): No longer static.\n+\t(push_class_level_binding): Revert 92918 patch, limit\n+\tto dependent using.\n+\t* cp-tree.h: Adjust.\n+\n+2022-03-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/104568\n+\t* init.cc (build_new_constexpr_heap_type): Remove FULL_SIZE\n+\targument and its handling, instead add ITYPE2 argument.  Only\n+\tsupport COOKIE_SIZE != NULL.\n+\t(build_new_1): If size is 0, change it to 0 * outer_nelts if\n+\touter_nelts is non-NULL.  Pass type rather than elt_type to\n+\tmaybe_wrap_new_for_constexpr.\n+\t* constexpr.cc (build_new_constexpr_heap_type): New function.\n+\t(cxx_eval_constant_expression) <case CONVERT_EXPR>:\n+\tIf elt_size is zero sized type, try to recover outer_nelts from\n+\tthe size argument to operator new/new[] and pass that as\n+\targ_size to build_new_constexpr_heap_type.  Pass ctx,\n+\tnon_constant_p and overflow_p to that call too.\n+\n+2022-03-18  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/104008\n+\t* tree.cc (strip_typedefs): Don't strip an alias template when\n+\tdoing so would result in losing a parameter pack.\n+\n 2022-03-16  Patrick Palka  <ppalka@redhat.com>\n \n \t* search.cc (lookup_member): Simplify by handling all values"}, {"sha": "782589f4ef1ee7532c6f2a6d145ea3969a51b2a5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca61ad148ffedaae1914741c78dfd13962aab92/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca61ad148ffedaae1914741c78dfd13962aab92/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8ca61ad148ffedaae1914741c78dfd13962aab92", "patch": "@@ -1,3 +1,15 @@\n+2022-03-18  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/103039\n+\t* trans-openmp.cc (gfc_omp_clause_copy_ctor, gfc_omp_clause_dtor):\n+\tOnly privatize pointer for associate names.\n+\n+2022-03-18  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/103039\n+\t* openmp.cc (resolve_omp_clauses): Improve associate-name diagnostic\n+\tfor select type/rank.\n+\n 2022-03-11  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* trans-openmp.cc (gfc_trans_omp_clauses, gfc_omp_finish_clause):"}, {"sha": "71b55500b7e5226a880d1de66d069a69251c9eb6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca61ad148ffedaae1914741c78dfd13962aab92/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca61ad148ffedaae1914741c78dfd13962aab92/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ca61ad148ffedaae1914741c78dfd13962aab92", "patch": "@@ -1,3 +1,84 @@\n+2022-03-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/104943\n+\tPR analyzer/104954\n+\tPR analyzer/103533\n+\t* gcc.dg/analyzer/torture/boxed-ptr-1.c: Update expected number\n+\tof exploded nodes to reflect improvements in state purging.\n+\n+2022-03-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/104943\n+\t* gcc.dg/analyzer/boxed-malloc-1-29.c: New test.\n+\t* gcc.dg/analyzer/boxed-malloc-1.c: New test.\n+\t* gcc.dg/analyzer/taint-alloc-5.c: New test.\n+\t* gcc.dg/analyzer/torture/boxed-int-1.c: New test.\n+\t* gcc.dg/analyzer/torture/boxed-ptr-1.c: New test.\n+\n+2022-03-18  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/104961\n+\t* gcc.target/i386/pr104961.c: New.\n+\n+2022-03-18  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/92918\n+\tPR c++/104476\n+\t* g++.dg/cpp0x/pr85070.C: Remove expected error.\n+\t* g++.dg/lookup/using66a.C: New test.\n+\t* g++.dg/lookup/using67.C: New test.\n+\n+2022-03-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/99578\n+\tPR middle-end/100680\n+\tPR tree-optimization/100834\n+\t* gcc.dg/tree-ssa/pr99578-1.c: New test.\n+\t* gcc.dg/pr99578-1.c: New test.\n+\t* gcc.dg/pr99578-2.c: New test.\n+\t* gcc.dg/pr99578-3.c: New test.\n+\t* gcc.dg/pr100680.c: New test.\n+\t* gcc.dg/pr100834.c: New test.\n+\n+2022-03-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/104568\n+\t* g++.dg/cpp2a/constexpr-new22.C: New test.\n+\n+2022-03-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* g++.dg/torture/pr104601.C: Include <vector>.\n+\n+2022-03-18  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/104008\n+\t* g++.dg/cpp0x/variadic-alias3.C: New test.\n+\t* g++.dg/cpp0x/variadic-alias4.C: New test.\n+\n+2022-03-18  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* g++.dg/modules/bad-mapper-1.C: Make dg- expressions that match the\n+\tdiagnostics output by earlier Darwin too.\n+\n+2022-03-18  Tom de Vries  <tdevries@suse.de>\n+\n+\t* c-c++-common/gomp/pr104968.c: New test.\n+\n+2022-03-18  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/103039\n+\t* gfortran.dg/gomp/associate1.f90: Update dg-error.\n+\t* gfortran.dg/gomp/associate2.f90: New test.\n+\n+2022-03-18  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr104974.c: New test.\n+\n+2022-03-18  Cui,Lili  <lili.cui@intel.com>\n+\n+\tPR target/104963\n+\t* gcc.target/i386/pr104963.c: New test case.\n+\n 2022-03-17  Roger Sayle  <roger@nextmovesoftware.com>\n \n \tPR target/86722"}, {"sha": "4688eedba4c8222f943dd6cbda714266a5ab0655", "filename": "libcody/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca61ad148ffedaae1914741c78dfd13962aab92/libcody%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca61ad148ffedaae1914741c78dfd13962aab92/libcody%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcody%2FChangeLog?ref=8ca61ad148ffedaae1914741c78dfd13962aab92", "patch": "@@ -1,3 +1,8 @@\n+2022-03-18  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* netclient.cc (OpenInet6): Do not provide a dummy port number\n+\tin the getaddrinfo() call.\n+\n 2021-11-01  Martin Liska  <mliska@suse.cz>\n \n \tPR other/102657"}, {"sha": "fed9b55ee30444bc771cdf261ccdede055a456d1", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca61ad148ffedaae1914741c78dfd13962aab92/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca61ad148ffedaae1914741c78dfd13962aab92/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=8ca61ad148ffedaae1914741c78dfd13962aab92", "patch": "@@ -1,3 +1,19 @@\n+2022-03-18  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/103039\n+\t* testsuite/libgomp.fortran/associate4.f90: New test.\n+\n+2022-03-18  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/104952\n+\t* testsuite/libgomp.c/pr104952-1.c: New test.\n+\t* testsuite/libgomp.c/pr104952-2.c: New test.\n+\n+2022-03-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/linux/affinity.c (gomp_affinity_init_numa_domains): Move seen\n+\tvariable next to pl variable.\n+\n 2022-03-17  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* testsuite/libgomp.oacc-c-c++-common/acc_prof-kernels-1.c:"}, {"sha": "8628a80f77be2df0137a1b35fc059df56328ef79", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca61ad148ffedaae1914741c78dfd13962aab92/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca61ad148ffedaae1914741c78dfd13962aab92/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8ca61ad148ffedaae1914741c78dfd13962aab92", "patch": "@@ -1,3 +1,80 @@\n+2022-03-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/104242\n+\t* include/std/any (any(T&&)): Revert change to constraints.\n+\t* testsuite/20_util/any/cons/104242.cc: New test.\n+\n+2022-03-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/92546\n+\t* include/pstl/glue_algorithm_defs.h: Replace <functional> with\n+\t<bits/stl_pair.h>.\n+\t* include/pstl/utils.h: Replace <iterator> with <type_traits>.\n+\t(__pstl::__internal::__except_handler): Use std::__terminate\n+\tinstead of std::terminate.\n+\t* src/c++17/fs_path.cc: Include <array>.\n+\t* testsuite/25_algorithms/adjacent_find/constexpr.cc: Include\n+\t<functional>.\n+\t* testsuite/25_algorithms/binary_search/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/clamp/constrained.cc: Likewise.\n+\t* testsuite/25_algorithms/equal/constrained.cc: Likewise.\n+\t* testsuite/25_algorithms/for_each/constrained.cc: Likewise.\n+\t* testsuite/25_algorithms/includes/constrained.cc: Likewise.\n+\t* testsuite/25_algorithms/is_heap/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/is_heap_until/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/is_permutation/constrained.cc: Include\n+\t<iterator>.\n+\t* testsuite/25_algorithms/is_sorted/constexpr.cc: Include\n+\t<functional>.\n+\t* testsuite/25_algorithms/is_sorted_until/constexpr.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/lexicographical_compare/constexpr.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/lexicographical_compare/constrained.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/lexicographical_compare_three_way/1.cc:\n+\tInclude <array>.\n+\t* testsuite/25_algorithms/lower_bound/constexpr.cc: Include\n+\t<functional>.\n+\t* testsuite/25_algorithms/max/constrained.cc: Likewise.\n+\t* testsuite/25_algorithms/max_element/constrained.cc: Likewise.\n+\t* testsuite/25_algorithms/min/constrained.cc: Likewise.\n+\t* testsuite/25_algorithms/min_element/constrained.cc: Likewise.\n+\t* testsuite/25_algorithms/minmax_element/constrained.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/mismatch/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/move/93872.cc: Likewise.\n+\t* testsuite/25_algorithms/move_backward/93872.cc: Include\n+\t<iterator>.\n+\t* testsuite/25_algorithms/nth_element/constexpr.cc: Include\n+\t<functional>.\n+\t* testsuite/25_algorithms/partial_sort/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/partial_sort_copy/constexpr.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/search/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/search_n/constrained.cc: Likewise.\n+\t* testsuite/25_algorithms/set_difference/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/set_difference/constrained.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/set_intersection/constexpr.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/set_intersection/constrained.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/set_symmetric_difference/constexpr.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/set_union/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/set_union/constrained.cc: Likewise.\n+\t* testsuite/25_algorithms/sort/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/sort_heap/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/transform/constrained.cc: Likewise.\n+\t* testsuite/25_algorithms/unique/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/unique/constrained.cc: Likewise.\n+\t* testsuite/25_algorithms/unique_copy/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/upper_bound/constexpr.cc: Likewise.\n+\t* testsuite/std/ranges/adaptors/elements.cc: Include <vector>.\n+\t* testsuite/std/ranges/adaptors/lazy_split.cc: Likewise.\n+\t* testsuite/std/ranges/adaptors/split.cc: Likewise.\n+\n 2022-03-17  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/92546"}]}