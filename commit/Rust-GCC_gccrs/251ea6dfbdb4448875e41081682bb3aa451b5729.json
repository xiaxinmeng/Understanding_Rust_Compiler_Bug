{"sha": "251ea6dfbdb4448875e41081682bb3aa451b5729", "node_id": "C_kwDOANBUbNoAKDI1MWVhNmRmYmRiNDQ0ODg3NWU0MTA4MTY4MmJiM2FhNDUxYjU3Mjk", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-03-11T17:57:12Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-03-11T17:57:12Z"}, "message": "PR tree-optimization/98335: New peephole2 xorl;movb -> movzbl\n\nThis patch is the backend piece of my proposed fix to PR tree-opt/98335,\nto allow C++ partial struct initialization to be as efficient/optimized\nas full struct initialization.\n\nWith the middle-end patch just posted to gcc-patches, the test case\nin the PR compiles on x86_64-pc-linux-gnu with -O2 to:\n\n        xorl    %eax, %eax\n        movb    c(%rip), %al\n        ret\n\nwith this additional peephole2 (actually four peephole2s):\n\n        movzbl  c(%rip), %eax\n        ret\n\n2022-03-11  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR tree-optimization/98335\n\t* config/i386/i386.md (peephole2): Eliminate redundant insv.\n\tCombine movl followed by movb.  Transform xorl followed by\n\ta suitable movb or movw into the equivalent movz[bw]l.\n\ngcc/testsuite/ChangeLog\n\tPR tree-optimization/98335\n\t* g++.target/i386/pr98335.C: New test case.\n\t* gcc.target/i386/pr98335.c: New test case.", "tree": {"sha": "1297567f040ce10d1d026251a788f7abf62e896f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1297567f040ce10d1d026251a788f7abf62e896f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/251ea6dfbdb4448875e41081682bb3aa451b5729", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/251ea6dfbdb4448875e41081682bb3aa451b5729", "html_url": "https://github.com/Rust-GCC/gccrs/commit/251ea6dfbdb4448875e41081682bb3aa451b5729", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/251ea6dfbdb4448875e41081682bb3aa451b5729/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5288df751f9ecd11898dec5f2a7b6b03267f79e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5288df751f9ecd11898dec5f2a7b6b03267f79e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5288df751f9ecd11898dec5f2a7b6b03267f79e"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "c8fbf605e4161edc57c6eb6ea007de84f6166145", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251ea6dfbdb4448875e41081682bb3aa451b5729/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251ea6dfbdb4448875e41081682bb3aa451b5729/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=251ea6dfbdb4448875e41081682bb3aa451b5729", "patch": "@@ -3180,6 +3180,38 @@\n \t\t\t     (const_int 8))\n \t   (subreg:SWI248 (match_dup 1) 0))])\n \n+;; Eliminate redundant insv, e.g. xorl %eax,%eax; movb $0, %ah\n+(define_peephole2\n+  [(parallel [(set (match_operand:SWI48 0 \"general_reg_operand\")\n+\t\t   (const_int 0))\n+\t      (clobber (reg:CC FLAGS_REG))])\n+   (set (zero_extract:SWI248 (match_operand:SWI248 1 \"general_reg_operand\")\n+\t\t\t     (const_int 8)\n+\t\t\t     (const_int 8))\n+\t(const_int 0))]\n+  \"REGNO (operands[0]) == REGNO (operands[1])\"\n+  [(parallel [(set (match_operand:SWI48 0 \"general_reg_operand\")\n+\t\t   (const_int 0))\n+\t      (clobber (reg:CC FLAGS_REG))])])\n+\n+;; Combine movl followed by movb.\n+(define_peephole2\n+  [(set (match_operand:SWI48 0 \"general_reg_operand\")\n+\t(match_operand:SWI48 1 \"const_int_operand\"))\n+   (set (zero_extract:SWI248 (match_operand:SWI248 2 \"general_reg_operand\")\n+\t\t\t     (const_int 8)\n+\t\t\t     (const_int 8))\n+\t(match_operand:SWI248 3 \"const_int_operand\"))]\n+  \"REGNO (operands[0]) == REGNO (operands[2])\"\n+  [(set (match_operand:SWI48 0 \"general_reg_operand\")\n+\t(match_dup 4))]\n+{\n+  HOST_WIDE_INT tmp = INTVAL (operands[1]) & ~(HOST_WIDE_INT)0xff00;\n+  tmp |= (INTVAL (operands[3]) & 0xff) << 8;\n+  operands[4] = gen_int_mode (tmp, <SWI48:MODE>mode);\n+})\n+\n+\n (define_code_iterator any_extract [sign_extract zero_extract])\n \n (define_insn \"*insvqi_2\"\n@@ -4276,6 +4308,24 @@\n   [(set_attr \"isa\" \"*,avx512dq,avx512dq\")\n    (set_attr \"type\" \"imovx,mskmov,mskmov\")\n    (set_attr \"mode\" \"SI,QI,QI\")])\n+\n+;; Transform xorl; mov[bw] (set strict_low_part) into movz[bw]l.\n+(define_peephole2\n+  [(parallel [(set (match_operand:SWI48 0 \"general_reg_operand\")\n+\t\t   (const_int 0))\n+\t      (clobber (reg:CC FLAGS_REG))])\n+   (set (strict_low_part (match_operand:SWI12 1 \"general_reg_operand\"))\n+\t(match_operand:SWI12 2 \"nonimmediate_operand\"))]\n+  \"REGNO (operands[0]) == REGNO (operands[1])\"\n+  [(set (match_dup 0) (zero_extend:SWI48 (match_dup 2)))])\n+\n+;; Likewise, but preserving FLAGS_REG.\n+(define_peephole2\n+  [(set (match_operand:SWI48 0 \"general_reg_operand\") (const_int 0))\n+   (set (strict_low_part (match_operand:SWI12 1 \"general_reg_operand\"))\n+\t(match_operand:SWI12 2 \"nonimmediate_operand\"))]\n+  \"REGNO (operands[0]) == REGNO (operands[1])\"\n+  [(set (match_dup 0) (zero_extend:SWI48 (match_dup 2)))])\n \f\n ;; Sign extension instructions\n "}, {"sha": "2581b83ab6a119e77da46e953b1ad1de17bbedcf", "filename": "gcc/testsuite/g++.target/i386/pr98335.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251ea6dfbdb4448875e41081682bb3aa451b5729/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr98335.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251ea6dfbdb4448875e41081682bb3aa451b5729/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr98335.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr98335.C?ref=251ea6dfbdb4448875e41081682bb3aa451b5729", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2\" } */\n+\n+struct Data {\n+  char a;\n+  int b;\n+};\n+\n+char c;\n+\n+Data val(int idx) {\n+  return { c };  // { dg-warning \"extended initializer\" \"c++ 98\"  { target { c++98_only } } }\n+}\n+\n+/* { dg-final { scan-assembler \"movzbl\" } } */\n+/* { dg-final { scan-assembler-not \"xorl\" } } */\n+/* { dg-final { scan-assembler-not \"movb\" } } */\n+"}, {"sha": "7fa7ad70dce4e10e928cb86d0ac0989716e8f547", "filename": "gcc/testsuite/gcc.target/i386/pr98335.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251ea6dfbdb4448875e41081682bb3aa451b5729/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98335.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251ea6dfbdb4448875e41081682bb3aa451b5729/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98335.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98335.c?ref=251ea6dfbdb4448875e41081682bb3aa451b5729", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+union Data { char a; short b; };\n+\n+char c;\n+\n+void val(void) {\n+  __asm__ __volatile__ (\"\" : : \"r\" ((union Data) { c } )); } \n+\n+/* { dg-final { scan-assembler \"movzbl\" } } */\n+/* { dg-final { scan-assembler-not \"xorl\" } } */\n+/* { dg-final { scan-assembler-not \"movb\" } } */"}]}