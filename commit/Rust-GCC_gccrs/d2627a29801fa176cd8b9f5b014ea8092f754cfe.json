{"sha": "d2627a29801fa176cd8b9f5b014ea8092f754cfe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI2MjdhMjk4MDFmYTE3NmNkOGI5ZjViMDE0ZWE4MDkyZjc1NGNmZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-11-23T14:23:13Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-11-23T14:23:13Z"}, "message": "wrapped_locale.cc: Require additional locale name.\n\n\t* testsuite/22_locale/collate/hash/char/wrapped_locale.cc: Require\n\tadditional locale name.\n\t* testsuite/22_locale/collate/hash/char/wrapped_env.cc: Ditto.\n\nFrom-SVN: r167078", "tree": {"sha": "d1d4c0f364c82441e13b92f2bedca8535e7f59ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1d4c0f364c82441e13b92f2bedca8535e7f59ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2627a29801fa176cd8b9f5b014ea8092f754cfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2627a29801fa176cd8b9f5b014ea8092f754cfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2627a29801fa176cd8b9f5b014ea8092f754cfe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2627a29801fa176cd8b9f5b014ea8092f754cfe/comments", "author": null, "committer": null, "parents": [{"sha": "9f1718b0079a80c91367475744d4f47d77f65720", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f1718b0079a80c91367475744d4f47d77f65720", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f1718b0079a80c91367475744d4f47d77f65720"}], "stats": {"total": 289, "additions": 150, "deletions": 139}, "files": [{"sha": "5dc04d37bbb866604b1214cbe252fb64ec8e1831", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 145, "deletions": 139, "changes": 284, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2627a29801fa176cd8b9f5b014ea8092f754cfe/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2627a29801fa176cd8b9f5b014ea8092f754cfe/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d2627a29801fa176cd8b9f5b014ea8092f754cfe", "patch": "@@ -1,3 +1,9 @@\n+2010-11-23  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* testsuite/22_locale/collate/hash/char/wrapped_locale.cc: Require\n+\tadditional locale name.\n+\t* testsuite/22_locale/collate/hash/char/wrapped_env.cc: Ditto.\n+\n 2010-11-18  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR libstdc++/46455\n@@ -94,42 +100,42 @@\n \n \tPR libstdc++/44436 (partial)\n \tPR libstdc++/46148\n-        * include/bits/stl_tree.h (_Rb_tree<>::_M_insert_, _M_insert_lower,\n+\t* include/bits/stl_tree.h (_Rb_tree<>::_M_insert_, _M_insert_lower,\n \t_M_insert_equal_lower, _M_insert_unique, _M_insert_equal,\n \t_M_insert_unique_, _M_insert_equal_): Templatize in C++0x mode,\n \tuse _GLIBCXX_FORWARD throughout.\n-        * include/bits/stl_map.h (map<>::insert(_Pair&&),\n+\t* include/bits/stl_map.h (map<>::insert(_Pair&&),\n \tinsert(const_iterator, _Pair&&), operator[](key_type&&): Add.\n-        * include/bits/stl_set.h (set<>::insert(value_type&&),\n+\t* include/bits/stl_set.h (set<>::insert(value_type&&),\n \tinsert(const_iterator, value_type&&)): Likewise.\n-        * include/bits/stl_multimap.h (multimap<>::insert(_Pair&&),\n+\t* include/bits/stl_multimap.h (multimap<>::insert(_Pair&&),\n \tinsert(const_iterator, _Pair&&)): Likewise.\n-        * include/bits/stl_multiset.h (multiset<>::insert(value_type&&),\n+\t* include/bits/stl_multiset.h (multiset<>::insert(value_type&&),\n \tinsert(const_iterator, value_type&&)): Likewise.\n \t* include/debug/set.h: Adjust.\n-        * include/debug/multiset.h: Likewise.\n-        * include/debug/map.h: Likewise.\n-        * include/debug/multimap.h: Likewise.\n-        * include/profile/set.h: Likewise.\n-        * include/profile/multiset.h: Likewise.\n-        * include/profile/map.h: Likewise.\n-        * include/profile/multimap.h: Likewise.\n-        * testsuite/23_containers/multimap/modifiers/insert/1.cc: New.\n-        * testsuite/23_containers/multimap/modifiers/insert/2.cc: Likewise.\n-        * testsuite/23_containers/multimap/modifiers/insert/3.cc: Likewise.\n-        * testsuite/23_containers/multimap/modifiers/insert/4.cc: Likewise.\n-        * testsuite/23_containers/set/modifiers/insert/2.cc: Likewise.\n-        * testsuite/23_containers/set/modifiers/insert/3.cc: Likewise.\n-        * testsuite/23_containers/multiset/modifiers/insert/3.cc: Likewise.\n-        * testsuite/23_containers/multiset/modifiers/insert/4.cc: Likewise.\n-        * testsuite/23_containers/map/modifiers/insert/2.cc: Likewise.\n-        * testsuite/23_containers/map/modifiers/insert/3.cc: Likewise.\n-        * testsuite/23_containers/map/modifiers/insert/4.cc: Likewise.\n-        * testsuite/23_containers/map/modifiers/insert/5.cc: Likewise.\n-        * testsuite/23_containers/map/element_access/2.cc: Likewise.\n-        * testsuite/23_containers/map/element_access/46148.cc: Likewise.\n-\n-        * include/bits/hashtable.h: Trivial naming changes.\n+\t* include/debug/multiset.h: Likewise.\n+\t* include/debug/map.h: Likewise.\n+\t* include/debug/multimap.h: Likewise.\n+\t* include/profile/set.h: Likewise.\n+\t* include/profile/multiset.h: Likewise.\n+\t* include/profile/map.h: Likewise.\n+\t* include/profile/multimap.h: Likewise.\n+\t* testsuite/23_containers/multimap/modifiers/insert/1.cc: New.\n+\t* testsuite/23_containers/multimap/modifiers/insert/2.cc: Likewise.\n+\t* testsuite/23_containers/multimap/modifiers/insert/3.cc: Likewise.\n+\t* testsuite/23_containers/multimap/modifiers/insert/4.cc: Likewise.\n+\t* testsuite/23_containers/set/modifiers/insert/2.cc: Likewise.\n+\t* testsuite/23_containers/set/modifiers/insert/3.cc: Likewise.\n+\t* testsuite/23_containers/multiset/modifiers/insert/3.cc: Likewise.\n+\t* testsuite/23_containers/multiset/modifiers/insert/4.cc: Likewise.\n+\t* testsuite/23_containers/map/modifiers/insert/2.cc: Likewise.\n+\t* testsuite/23_containers/map/modifiers/insert/3.cc: Likewise.\n+\t* testsuite/23_containers/map/modifiers/insert/4.cc: Likewise.\n+\t* testsuite/23_containers/map/modifiers/insert/5.cc: Likewise.\n+\t* testsuite/23_containers/map/element_access/2.cc: Likewise.\n+\t* testsuite/23_containers/map/element_access/46148.cc: Likewise.\n+\n+\t* include/bits/hashtable.h: Trivial naming changes.\n \n 2010-11-10  Paolo Carlini  <paolo.carlini@oracle.com>\n \n@@ -145,10 +151,10 @@\n \tline number.\n \n 2010-11-09  Fran\u00e7ois Dumont  <francois.cppdevs@free.fr>\n-            Johannes Singler  <singler@kit.edu>\n+\t    Johannes Singler  <singler@kit.edu>\n \n-        * include/parallel/algobase.h (equal):  Call parallel variant\n-        for applicable overloads.\n+\t* include/parallel/algobase.h (equal):  Call parallel variant\n+\tfor applicable overloads.\n \n 2010-11-09  Paolo Carlini  <paolo.carlini@oracle.com>\n \n@@ -180,8 +186,8 @@\n \n 2010-11-08  Benjamin Kosnik  <bkoz@redhat.com>\n \n-        * include/std/complex (operator==, !=): Mark constexpr.\n-        * testsuite/26_numerics/complex/comparison_operators/constexpr.cc: New.\n+\t* include/std/complex (operator==, !=): Mark constexpr.\n+\t* testsuite/26_numerics/complex/comparison_operators/constexpr.cc: New.\n \n 2010-11-08  Paolo Carlini  <paolo.carlini@oracle.com>\n \n@@ -1839,89 +1845,89 @@\n \n 2010-08-29  Fran\u00e7ois Dumont  <francois.cppdevs@free.fr>\n \n-        * include/bits/stl_algobase.h (_Iter_base):  Move...\n-        * include/bits/stl_iterator_base_types.h: ...here.\n-        * include/debug/functions.h (__check_valid_range, __check_string,\n+\t* include/bits/stl_algobase.h (_Iter_base):  Move...\n+\t* include/bits/stl_iterator_base_types.h: ...here.\n+\t* include/debug/functions.h (__check_valid_range, __check_string,\n \t__check_sorted): Fix to not depend on _GLIBCXX_DEBUG; include\n \tformatter.h and use formatting macros for a consistent debug result.\n-        * include/debug/formatter.h (__check_singular): Declare; do not\n+\t* include/debug/formatter.h (__check_singular): Declare; do not\n \tinclude debug.h.\n-        * include/debug/debug.h: Do not include formatter.h.\n-        * include/debug/safe_iterator.h (_Safe_iterator::_Base_Iterator)\n-        rename to iterator_type.\n+\t* include/debug/debug.h: Do not include formatter.h.\n+\t* include/debug/safe_iterator.h (_Safe_iterator::_Base_Iterator)\n+\trename to iterator_type.\n \t(__gnu_debug::__base): Add.\n-        * include/debug/set.h: Use everywhere __gnu_debug::__base once\n+\t* include/debug/set.h: Use everywhere __gnu_debug::__base once\n \titerator range valided.\n-        * include/debug/unordered_map: Likewise.\n-        * include/debug/multiset.h: Likewise.\n-        * include/debug/vector: Likewise.\n-        * include/debug/unordered_set: Likewise.\n-        * include/debug/deque: Likewise.\n-        * include/debug/map.h: Likewise.\n-        * include/debug/string: Likewise.\n-        * include/debug/list: Likewise.\n-        * include/debug/multimap.h: Likewise.\n-        * testsuite/23_containers/util/debug/assign_neg.h: New test cases on\n-        debug checks performed on container assign operation.\n-        * testsuite/23_containers/util/debug/construct_neg.h: New test cases\n-        on debug checks on constructors.\n-        * testsuite/23_containers/util/debug/insert_neg.h: New test cases on\n-        debug checks performed on container insert operations.\n-        * testsuite/23_containers/unordered_map/debug/cont_traits.h,\n-        debug_cont_traits.h, construct1_neg.cc, construct2_neg.cc,\n-        construct3_neg.cc, construct4_neg.cc, insert1_neg.cc, insert2_neg.cc,\n-        insert3_neg.cc, insert4_neg.cc: New.\n-        * testsuite/23_containers/multimap/debug/cont_traits.h,\n-        debug_cont_traits.h, construct1_neg.cc, construct2_neg.cc,\n-        construct3_neg.cc, construct4_neg.cc, insert1_neg.cc, insert2_neg.cc,\n-        insert3_neg.cc, insert4_neg.cc: Likewise.\n-        * testsuite/23_containers/set/debug/cont_traits.h,\n-        debug_cont_traits.h, construct1_neg.cc, construct2_neg.cc,\n-        construct3_neg.cc, construct4_neg.cc, insert1_neg.cc, insert2_neg.cc,\n-        insert3_neg.cc, insert4_neg.cc: Likewise.\n-        * testsuite/23_containers/unordered_multimap/debug/cont_traits.h,\n-        debug_cont_traits.h, construct1_neg.cc, construct2_neg.cc,\n-        construct3_neg.cc, construct4_neg.cc, insert1_neg.cc, insert2_neg.cc,\n-        insert3_neg.cc, insert4_neg.cc: Likewise.\n-        * testsuite/23_containers/unordered_set/debug/cont_traits.h,\n-        debug_cont_traits.h, construct1_neg.cc, construct2_neg.cc,\n-        construct3_neg.cc, construct4_neg.cc, insert1_neg.cc, insert2_neg.cc,\n-        insert3_neg.cc, insert4_neg.cc: Likewise.\n-        * testsuite/23_containers/multiset/debug/cont_traits.h,\n-        debug_cont_traits.h, construct1_neg.cc, construct2_neg.cc,\n-        construct3_neg.cc, construct4_neg.cc, insert1_neg.cc, insert2_neg.cc,\n-        insert3_neg.cc, insert4_neg.cc: Likewise.\n-        * testsuite/23_containers/unordered_multiset/debug/cont_traits.h,\n-        debug_cont_traits.h, construct1_neg.cc, construct2_neg.cc,\n-        construct3_neg.cc, construct4_neg.cc, insert1_neg.cc, insert2_neg.cc,\n-        insert3_neg.cc, insert4_neg.cc: Likewise.\n-        * testsuite/23_containers/map/debug/cont_traits.h,\n-        debug_cont_traits.h, construct1_neg.cc, construct2_neg.cc,\n-        construct3_neg.cc, construct4_neg.cc, insert1_neg.cc, insert2_neg.cc,\n-        insert3_neg.cc, insert4_neg.cc: Likewise.\n-        * testsuite/23_containers/vector/debug/cont_traits.h,\n-        debug_cont_traits.h, assign1_neg.cc, assign2_neg.cc, assign3_neg.cc,\n-        assign4_neg.cc, construct1_neg.cc, construct2_neg.cc,\n-        construct3_neg.cc, construct4_neg.cc, insert1_neg.cc, insert2_neg.cc,\n-        insert3_neg.cc, insert4_neg.cc: Likewise.\n-        * testsuite/23_containers/deque/debug/cont_traits.h,\n-        debug_cont_traits.h, assign1_neg.cc, assign2_neg.cc, assign3_neg.cc,\n-        assign4_neg.cc, construct1_neg.cc, construct2_neg.cc,\n-        construct3_neg.cc, construct4_neg.cc, insert1_neg.cc, insert2_neg.cc,\n-        insert3_neg.cc, insert4_neg.cc: Likewise.\n+\t* include/debug/unordered_map: Likewise.\n+\t* include/debug/multiset.h: Likewise.\n+\t* include/debug/vector: Likewise.\n+\t* include/debug/unordered_set: Likewise.\n+\t* include/debug/deque: Likewise.\n+\t* include/debug/map.h: Likewise.\n+\t* include/debug/string: Likewise.\n+\t* include/debug/list: Likewise.\n+\t* include/debug/multimap.h: Likewise.\n+\t* testsuite/23_containers/util/debug/assign_neg.h: New test cases on\n+\tdebug checks performed on container assign operation.\n+\t* testsuite/23_containers/util/debug/construct_neg.h: New test cases\n+\ton debug checks on constructors.\n+\t* testsuite/23_containers/util/debug/insert_neg.h: New test cases on\n+\tdebug checks performed on container insert operations.\n+\t* testsuite/23_containers/unordered_map/debug/cont_traits.h,\n+\tdebug_cont_traits.h, construct1_neg.cc, construct2_neg.cc,\n+\tconstruct3_neg.cc, construct4_neg.cc, insert1_neg.cc, insert2_neg.cc,\n+\tinsert3_neg.cc, insert4_neg.cc: New.\n+\t* testsuite/23_containers/multimap/debug/cont_traits.h,\n+\tdebug_cont_traits.h, construct1_neg.cc, construct2_neg.cc,\n+\tconstruct3_neg.cc, construct4_neg.cc, insert1_neg.cc, insert2_neg.cc,\n+\tinsert3_neg.cc, insert4_neg.cc: Likewise.\n+\t* testsuite/23_containers/set/debug/cont_traits.h,\n+\tdebug_cont_traits.h, construct1_neg.cc, construct2_neg.cc,\n+\tconstruct3_neg.cc, construct4_neg.cc, insert1_neg.cc, insert2_neg.cc,\n+\tinsert3_neg.cc, insert4_neg.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multimap/debug/cont_traits.h,\n+\tdebug_cont_traits.h, construct1_neg.cc, construct2_neg.cc,\n+\tconstruct3_neg.cc, construct4_neg.cc, insert1_neg.cc, insert2_neg.cc,\n+\tinsert3_neg.cc, insert4_neg.cc: Likewise.\n+\t* testsuite/23_containers/unordered_set/debug/cont_traits.h,\n+\tdebug_cont_traits.h, construct1_neg.cc, construct2_neg.cc,\n+\tconstruct3_neg.cc, construct4_neg.cc, insert1_neg.cc, insert2_neg.cc,\n+\tinsert3_neg.cc, insert4_neg.cc: Likewise.\n+\t* testsuite/23_containers/multiset/debug/cont_traits.h,\n+\tdebug_cont_traits.h, construct1_neg.cc, construct2_neg.cc,\n+\tconstruct3_neg.cc, construct4_neg.cc, insert1_neg.cc, insert2_neg.cc,\n+\tinsert3_neg.cc, insert4_neg.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multiset/debug/cont_traits.h,\n+\tdebug_cont_traits.h, construct1_neg.cc, construct2_neg.cc,\n+\tconstruct3_neg.cc, construct4_neg.cc, insert1_neg.cc, insert2_neg.cc,\n+\tinsert3_neg.cc, insert4_neg.cc: Likewise.\n+\t* testsuite/23_containers/map/debug/cont_traits.h,\n+\tdebug_cont_traits.h, construct1_neg.cc, construct2_neg.cc,\n+\tconstruct3_neg.cc, construct4_neg.cc, insert1_neg.cc, insert2_neg.cc,\n+\tinsert3_neg.cc, insert4_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/debug/cont_traits.h,\n+\tdebug_cont_traits.h, assign1_neg.cc, assign2_neg.cc, assign3_neg.cc,\n+\tassign4_neg.cc, construct1_neg.cc, construct2_neg.cc,\n+\tconstruct3_neg.cc, construct4_neg.cc, insert1_neg.cc, insert2_neg.cc,\n+\tinsert3_neg.cc, insert4_neg.cc: Likewise.\n+\t* testsuite/23_containers/deque/debug/cont_traits.h,\n+\tdebug_cont_traits.h, assign1_neg.cc, assign2_neg.cc, assign3_neg.cc,\n+\tassign4_neg.cc, construct1_neg.cc, construct2_neg.cc,\n+\tconstruct3_neg.cc, construct4_neg.cc, insert1_neg.cc, insert2_neg.cc,\n+\tinsert3_neg.cc, insert4_neg.cc: Likewise.\n \t* testsuite/23_containers/list/debug/cont_traits.h,\n-        debug_cont_traits.h, assign1_neg.cc, assign2_neg.cc, assign3_neg.cc,\n-        assign4_neg.cc, construct1_neg.cc, construct2_neg.cc,\n-        construct3_neg.cc, construct4_neg.cc, insert1_neg.cc, insert2_neg.cc,\n-        insert3_neg.cc, insert4_neg.cc: Likewise.\n-        * testsuite/performance/23_containers/range_construct/\n+\tdebug_cont_traits.h, assign1_neg.cc, assign2_neg.cc, assign3_neg.cc,\n+\tassign4_neg.cc, construct1_neg.cc, construct2_neg.cc,\n+\tconstruct3_neg.cc, construct4_neg.cc, insert1_neg.cc, insert2_neg.cc,\n+\tinsert3_neg.cc, insert4_neg.cc: Likewise.\n+\t* testsuite/performance/23_containers/range_construct/\n \tlist_construct1.cc: New, validate performance impact of the patch\n \ton the debug mode.\n-        * testsuite/performance/23_containers/range_construct/\n+\t* testsuite/performance/23_containers/range_construct/\n \tlist_construct2.cc: Likewise.\n-        * testsuite/performance/23_containers/range_construct/\n+\t* testsuite/performance/23_containers/range_construct/\n \tvector_construct.cc: Likewise.\n-        * testsuite/performance/23_containers/range_construct/\n+\t* testsuite/performance/23_containers/range_construct/\n \tdeque_construct.cc: Likewise.\n \n 2010-08-26  Benjamin Kosnik  <bkoz@redhat.com>\n@@ -3217,18 +3223,18 @@\n \n 2010-06-08  Johannes Singler  <singler@kit.edu>\n \n-        * include/parallel/find.h\n-        (__find_template(.., growing_blocks_tag)): Make block size\n-        proportional to current position.\n-        * include/parallel/settings.h (_Settings): Introduce new tuning\n-        parameter find_scale_factor to the end of the struct, defaults to\n-        0.01f.\n+\t* include/parallel/find.h\n+\t(__find_template(.., growing_blocks_tag)): Make block size\n+\tproportional to current position.\n+\t* include/parallel/settings.h (_Settings): Introduce new tuning\n+\tparameter find_scale_factor to the end of the struct, defaults to\n+\t0.01f.\n \n 2010-06-08  Johannes Singler  <singler@kit.edu>\n \n-        * include/parallel/partial_sum.h\n-        (__parallel_partial_sum_linear):\n-        Correctly calculate part lengths for partial_sum_dilation!=1.\n+\t* include/parallel/partial_sum.h\n+\t(__parallel_partial_sum_linear):\n+\tCorrectly calculate part lengths for partial_sum_dilation!=1.\n \n 2010-06-07  Paolo Carlini  <paolo.carlini@oracle.com>\n \n@@ -3458,7 +3464,7 @@\n \t* doc/xml/manual/status_cxx200x.xml: Update.\n \n 2010-06-05  Magnus Fromreide  <magfr@lysator.liu.se>\n-            Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\t    Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/std/functional (function): Add nullptr_t support.\n \t* include/bits/shared_ptr.h (shared_ptr): Likewise.\n@@ -3509,7 +3515,7 @@\n 2010-06-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/c++config (std::size_t, std::ptrdiff_t,\n-        std::nullptr_t): Provide typedefs.\n+\tstd::nullptr_t): Provide typedefs.\n \t* include/c_std/cstddef: Don't provide std::size_t and\n \tstd::ptrdiff_t here.\n \t* include/c_global/cstddef: Likewise.\n@@ -4289,11 +4295,11 @@\n \n 2010-04-22  Johannes Singler  <singler@kit.edu>\n \n-        * include/parallel/partition.h (__parallel_partition):\n-        Improve scalability by:\n-        -introducing new variables __leftold, __rightold, __dist, thus\n-        -getting rid of omp lock by using atomic operations\n-        -getting rid of two omp barriers\n+\t* include/parallel/partition.h (__parallel_partition):\n+\tImprove scalability by:\n+\t-introducing new variables __leftold, __rightold, __dist, thus\n+\t-getting rid of omp lock by using atomic operations\n+\t-getting rid of two omp barriers\n \n 2010-04-22  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n@@ -4343,10 +4349,10 @@\n \n 2010-03-30  Johannes Singler  <singler@kit.edu>\n \n-        * include/parallel/random_shuffle.h\n-        (__parallel_random_shuffle_drs) : Take as many threads as\n-        possible, i. e. favor parallelism over cache efficiency.\n-        Use own PRNG also for the 1 thread case.\n+\t* include/parallel/random_shuffle.h\n+\t(__parallel_random_shuffle_drs) : Take as many threads as\n+\tpossible, i. e. favor parallelism over cache efficiency.\n+\tUse own PRNG also for the 1 thread case.\n \n 2010-03-30  Paolo Carlini  <paolo.carlini@oracle.com>\n \n@@ -4413,14 +4419,14 @@\n \n 2010-03-22  Johannes Singler  <singler@kit.edu>\n \n-        * include/parallel/numeric (inner_product, partial_sum):\n-        Precede subsequent call with _GLIBCXX_STD_P:: to avoid ambiguity\n-        between __gnu_parallel:: and std::\n-        * include/parallel/algobase.h (equal): Likewise.\n-        * include/parallel/algo.h (find_first_of, search_n, merge, nth_element,\n-        partial_sort, max_element, min_element): Likewise.\n-        * include/parallel/partial_sum.h (__parallel_partial_sum_linear):\n-        Qualify accumulate call with __gnu_parallel::.\n+\t* include/parallel/numeric (inner_product, partial_sum):\n+\tPrecede subsequent call with _GLIBCXX_STD_P:: to avoid ambiguity\n+\tbetween __gnu_parallel:: and std::\n+\t* include/parallel/algobase.h (equal): Likewise.\n+\t* include/parallel/algo.h (find_first_of, search_n, merge, nth_element,\n+\tpartial_sort, max_element, min_element): Likewise.\n+\t* include/parallel/partial_sum.h (__parallel_partial_sum_linear):\n+\tQualify accumulate call with __gnu_parallel::.\n \n 2010-03-22  Paolo Carlini  <paolo.carlini@oracle.com>\n \n@@ -4940,8 +4946,8 @@\n \n 2010-02-28  Paolo Carlini  <paolo.carlini@oracle.com>\n \n-       * src/hash-long-double-aux.cc (hash<long double>::\n-       operator()(long double)): Hash both -0 and +0 to 0.\n+\t* src/hash-long-double-aux.cc (hash<long double>::\n+\toperator()(long double)): Hash both -0 and +0 to 0.\n \n 2010-02-25  Ed Smith-Rowland  <3dw4rd@verizon.net>\n \n@@ -5088,9 +5094,9 @@\n \n 2010-02-22  Fran\u00e7ois Dumont  <francois.cppdevs@free.fr>\n \n-       * doc/xml/manual/profile_mode.xml: Minor updates and fixes.\n-       * doc/xml/manual/debug_mode.xml: Likewise.\n-       * doc/xml/manual/test.xml: Likewise.\n+\t* doc/xml/manual/profile_mode.xml: Minor updates and fixes.\n+\t* doc/xml/manual/debug_mode.xml: Likewise.\n+\t* doc/xml/manual/test.xml: Likewise.\n \n 2010-02-22  Paolo Carlini  <paolo.carlini@oracle.com>\n "}, {"sha": "7aa6cf6895971b763072de0ad2725098c41e0aca", "filename": "libstdc++-v3/testsuite/22_locale/collate/hash/char/wrapped_env.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2627a29801fa176cd8b9f5b014ea8092f754cfe/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fchar%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2627a29801fa176cd8b9f5b014ea8092f754cfe/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fchar%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fchar%2Fwrapped_env.cc?ref=d2627a29801fa176cd8b9f5b014ea8092f754cfe", "patch": "@@ -1,3 +1,5 @@\n+// { dg-require-namedlocale \"en_US\" }\n+// { dg-require-namedlocale \"fr_FR\" }\n // { dg-require-namedlocale \"de_DE\" }\n \n // 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>"}, {"sha": "8fba98f54ae37af3f2c6f956493232c8de120dd7", "filename": "libstdc++-v3/testsuite/22_locale/collate/hash/char/wrapped_locale.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2627a29801fa176cd8b9f5b014ea8092f754cfe/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fchar%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2627a29801fa176cd8b9f5b014ea8092f754cfe/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fchar%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fchar%2Fwrapped_locale.cc?ref=d2627a29801fa176cd8b9f5b014ea8092f754cfe", "patch": "@@ -1,3 +1,6 @@\n+// { dg-require-namedlocale \"en_US\" }\n+// { dg-require-namedlocale \"fr_FR\" }\n+// { dg-require-namedlocale \"de_DE\" }\n // { dg-require-namedlocale \"ja_JP.eucjp\" }\n \n // 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>"}]}