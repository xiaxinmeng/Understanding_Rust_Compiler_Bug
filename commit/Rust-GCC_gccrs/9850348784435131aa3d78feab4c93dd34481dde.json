{"sha": "9850348784435131aa3d78feab4c93dd34481dde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg1MDM0ODc4NDQzNTEzMWFhM2Q3OGZlYWI0YzkzZGQzNDQ4MWRkZQ==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@arm.com", "date": "2017-06-28T22:09:50Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2017-06-28T22:09:50Z"}, "message": "[AArch64] Do not increase data alignment at -Os and with -fconserve-stack.\n\nWe unnecessarily align data to 8 byte alignments even when -Os is\nspecified. This brings the logic in the AArch64 backend more in line\nwith the ARM backend and helps gain some image size in a few\nplaces. Caught by an internal report on the size of rodata sections\nbeing high with aarch64 gcc.\n\n* config/aarch64/aarch64.h (AARCH64_EXPAND_ALIGNMENT): New.\n  (DATA_ALIGNMENT): Update to use AARCH64_EXPAND_ALIGNMENT.\n  (LOCAL_ALIGNMENT): Update to use AARCH64_EXPAND_ALIGNMENT.\n\nBootstrapped and regression tested on aarch64-none-linux-gnu with no\nregressions.\n\nFrom-SVN: r249764", "tree": {"sha": "c91935c2c3cdffd5f92f33b925a84e7a8e2bba5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c91935c2c3cdffd5f92f33b925a84e7a8e2bba5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9850348784435131aa3d78feab4c93dd34481dde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9850348784435131aa3d78feab4c93dd34481dde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9850348784435131aa3d78feab4c93dd34481dde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9850348784435131aa3d78feab4c93dd34481dde/comments", "author": null, "committer": null, "parents": [{"sha": "cffc4a68d759fdca588cdf9ece998862b76141e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cffc4a68d759fdca588cdf9ece998862b76141e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cffc4a68d759fdca588cdf9ece998862b76141e6"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "5211806db14504a566e2812a4a4e53e1f83f3400", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9850348784435131aa3d78feab4c93dd34481dde/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9850348784435131aa3d78feab4c93dd34481dde/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9850348784435131aa3d78feab4c93dd34481dde", "patch": "@@ -1,3 +1,9 @@\n+2017-06-28  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+\t* config/aarch64/aarch64.h (AARCH64_EXPAND_ALIGNMENT): New.\n+\t(DATA_ALIGNMENT): Update to use AARCH64_EXPAND_ALIGNMENT.\n+\t(LOCAL_ALIGNMENT): Update to use AARCH64_EXPAND_ALIGNMENT.\n+\n 2017-06-28  Sebastian Peryt  <sebastian.peryt@intel.com>\n \n \t* config/i386/avx512vlintrin.h (_mm256_permutexvar_epi64)"}, {"sha": "106cf3a56662d7f6466e2e29a42cc957b65ecf2a", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9850348784435131aa3d78feab4c93dd34481dde/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9850348784435131aa3d78feab4c93dd34481dde/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=9850348784435131aa3d78feab4c93dd34481dde", "patch": "@@ -98,14 +98,24 @@\n     && (ALIGN) < BITS_PER_WORD)\t\t\t\\\n    ? BITS_PER_WORD : ALIGN)\n \n-#define DATA_ALIGNMENT(EXP, ALIGN)\t\t\\\n-  ((((ALIGN) < BITS_PER_WORD)\t\t\t\\\n-    && (TREE_CODE (EXP) == ARRAY_TYPE\t\t\\\n-\t|| TREE_CODE (EXP) == UNION_TYPE\t\\\n-\t|| TREE_CODE (EXP) == RECORD_TYPE))\t\\\n-   ? BITS_PER_WORD : (ALIGN))\n-\n-#define LOCAL_ALIGNMENT(EXP, ALIGN) DATA_ALIGNMENT(EXP, ALIGN)\n+/* Align definitions of arrays, unions and structures so that\n+   initializations and copies can be made more efficient.  This is not\n+   ABI-changing, so it only affects places where we can see the\n+   definition.  Increasing the alignment tends to introduce padding,\n+   so don't do this when optimizing for size/conserving stack space.  */\n+#define AARCH64_EXPAND_ALIGNMENT(COND, EXP, ALIGN)\t\t\t\\\n+  (((COND) && ((ALIGN) < BITS_PER_WORD)\t\t\t\t\t\\\n+    && (TREE_CODE (EXP) == ARRAY_TYPE\t\t\t\t\t\\\n+\t|| TREE_CODE (EXP) == UNION_TYPE\t\t\t\t\\\n+\t|| TREE_CODE (EXP) == RECORD_TYPE)) ? BITS_PER_WORD : (ALIGN))\n+\n+/* Align global data.  */\n+#define DATA_ALIGNMENT(EXP, ALIGN)\t\t\t\\\n+  AARCH64_EXPAND_ALIGNMENT (!optimize_size, EXP, ALIGN)\n+\n+/* Similarly, make sure that objects on the stack are sensibly aligned.  */\n+#define LOCAL_ALIGNMENT(EXP, ALIGN)\t\t\t\t\\\n+  AARCH64_EXPAND_ALIGNMENT (!flag_conserve_stack, EXP, ALIGN)\n \n #define STRUCTURE_SIZE_BOUNDARY\t\t8\n "}]}