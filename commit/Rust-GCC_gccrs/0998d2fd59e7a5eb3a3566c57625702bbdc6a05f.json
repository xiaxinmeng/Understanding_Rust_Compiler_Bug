{"sha": "0998d2fd59e7a5eb3a3566c57625702bbdc6a05f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk5OGQyZmQ1OWU3YTVlYjNhMzU2NmM1NzYyNTcwMmJiZGM2YTA1Zg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-10-23T20:41:26Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-10-23T20:41:26Z"}, "message": "Implement P1286R2, Contra CWG1778\n\nThe C++11 requirement that an explicit exception-specification on a\ndefaulted function match the implicit one was found to be problematic for\nstd::atomic.  This paper, adopted in February, simply removes that\nrequirement: if an explicitly defaulted function has a different\nexception-specification, that now works just like a user-written function:\neither it isn't noexcept when it could be, or it is noexcept and will call\nterminate if an exception is thrown.\n\n\t* method.c (defaulted_late_check): Don't check explicit\n\texception-specification on defaulted function.\n\t(after_nsdmi_defaulted_late_checks): Remove.\n\t* parser.h (struct cp_unparsed_functions_entry): Remove classes.\n\t* parser.c (unparsed_classes): Remove.\n\t(push_unparsed_function_queues, cp_parser_class_specifier_1):\n\tAdjust.\n\nFrom-SVN: r277351", "tree": {"sha": "18bcab37dfecdae810feb52e18f4461f970f4fbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18bcab37dfecdae810feb52e18f4461f970f4fbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0998d2fd59e7a5eb3a3566c57625702bbdc6a05f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0998d2fd59e7a5eb3a3566c57625702bbdc6a05f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0998d2fd59e7a5eb3a3566c57625702bbdc6a05f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0998d2fd59e7a5eb3a3566c57625702bbdc6a05f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cbb28ef1534b13373bc38533c9e05035fe84894b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbb28ef1534b13373bc38533c9e05035fe84894b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbb28ef1534b13373bc38533c9e05035fe84894b"}], "stats": {"total": 119, "additions": 32, "deletions": 87}, "files": [{"sha": "f587f15ddd7a0c824f66de80e3bec46bbf612ba0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0998d2fd59e7a5eb3a3566c57625702bbdc6a05f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0998d2fd59e7a5eb3a3566c57625702bbdc6a05f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0998d2fd59e7a5eb3a3566c57625702bbdc6a05f", "patch": "@@ -1,3 +1,14 @@\n+2019-10-23  Jason Merrill  <jason@redhat.com>\n+\n+\tImplement P1286R2, Contra CWG1778\n+\t* method.c (defaulted_late_check): Don't check explicit\n+\texception-specification on defaulted function.\n+\t(after_nsdmi_defaulted_late_checks): Remove.\n+\t* parser.h (struct cp_unparsed_functions_entry): Remove classes.\n+\t* parser.c (unparsed_classes): Remove.\n+\t(push_unparsed_function_queues, cp_parser_class_specifier_1):\n+\tAdjust.\n+\n 2019-10-23  Jakub Jelinek  <jakub@redhat.com>\n \n \t* constexpr.c (cxx_eval_constant_expression) <case CLEANUP_STMT>:"}, {"sha": "b613e5df871bb79ec5ce9badf366d261dff1156a", "filename": "gcc/cp/method.c", "status": "modified", "additions": 6, "deletions": 63, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0998d2fd59e7a5eb3a3566c57625702bbdc6a05f/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0998d2fd59e7a5eb3a3566c57625702bbdc6a05f/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=0998d2fd59e7a5eb3a3566c57625702bbdc6a05f", "patch": "@@ -2204,40 +2204,12 @@ defaulted_late_check (tree fn)\n       return;\n     }\n \n-  /* 8.4.2/2: An explicitly-defaulted function (...) may have an explicit\n-     exception-specification only if it is compatible (15.4) with the \n-     exception-specification on the implicit declaration.  If a function\n-     is explicitly defaulted on its first declaration, (...) it is\n-     implicitly considered to have the same exception-specification as if\n-     it had been implicitly declared.  */\n-  maybe_instantiate_noexcept (fn);\n-  tree fn_spec = TYPE_RAISES_EXCEPTIONS (TREE_TYPE (fn));\n-  if (!fn_spec)\n-    {\n-      if (DECL_DEFAULTED_IN_CLASS_P (fn))\n-\tTREE_TYPE (fn) = build_exception_variant (TREE_TYPE (fn), eh_spec);\n-    }\n-  else if (UNEVALUATED_NOEXCEPT_SPEC_P (fn_spec))\n-    /* Equivalent to the implicit spec.  */;\n-  else if (DECL_DEFAULTED_IN_CLASS_P (fn)\n-\t   && !CLASSTYPE_TEMPLATE_INSTANTIATION (ctx))\n-    /* We can't compare an explicit exception-specification on a\n-       constructor defaulted in the class body to the implicit\n-       exception-specification until after we've parsed any NSDMI; see\n-       after_nsdmi_defaulted_late_checks.  */;\n-  else\n-    {\n-      tree eh_spec = get_defaulted_eh_spec (fn);\n-      if (!comp_except_specs (fn_spec, eh_spec, ce_normal))\n-\t{\n-\t  if (DECL_DEFAULTED_IN_CLASS_P (fn))\n-\t    DECL_DELETED_FN (fn) = true;\n-\t  else\n-\t    error (\"function %q+D defaulted on its redeclaration \"\n-\t\t   \"with an exception-specification that differs from \"\n-\t\t   \"the implicit exception-specification %qX\", fn, eh_spec);\n-\t}\n-    }\n+  /* If a function is explicitly defaulted on its first declaration without an\n+     exception-specification, it is implicitly considered to have the same\n+     exception-specification as if it had been implicitly declared.  */\n+  if (!TYPE_RAISES_EXCEPTIONS (TREE_TYPE (fn))\n+      && DECL_DEFAULTED_IN_CLASS_P (fn))\n+    TREE_TYPE (fn) = build_exception_variant (TREE_TYPE (fn), eh_spec);\n \n   if (DECL_DEFAULTED_IN_CLASS_P (fn)\n       && DECL_DECLARED_CONSTEXPR_P (implicit_fn))\n@@ -2264,35 +2236,6 @@ defaulted_late_check (tree fn)\n     }\n }\n \n-/* OK, we've parsed the NSDMI for class T, now we can check any explicit\n-   exception-specifications on functions defaulted in the class body.  */\n-\n-void\n-after_nsdmi_defaulted_late_checks (tree t)\n-{\n-  if (uses_template_parms (t))\n-    return;\n-  if (t == error_mark_node)\n-    return;\n-  for (tree fn = TYPE_FIELDS (t); fn; fn = DECL_CHAIN (fn))\n-    if (!DECL_ARTIFICIAL (fn)\n-\t&& DECL_DECLARES_FUNCTION_P (fn)\n-\t&& DECL_DEFAULTED_IN_CLASS_P (fn))\n-      {\n-\ttree fn_spec = TYPE_RAISES_EXCEPTIONS (TREE_TYPE (fn));\n-\tif (UNEVALUATED_NOEXCEPT_SPEC_P (fn_spec))\n-\t  continue;\n-\n-\ttree eh_spec = get_defaulted_eh_spec (fn);\n-\tif (eh_spec == error_mark_node)\n-\t  continue;\n-\n-\tif (!comp_except_specs (TYPE_RAISES_EXCEPTIONS (TREE_TYPE (fn)),\n-\t\t\t\teh_spec, ce_normal))\n-\t  DECL_DELETED_FN (fn) = true;\n-      }\n-}\n-\n /* Returns true iff FN can be explicitly defaulted, and gives any\n    errors if defaulting FN is ill-formed.  */\n "}, {"sha": "3857fe47d6781ae6865a48dd385d11042051b5fc", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0998d2fd59e7a5eb3a3566c57625702bbdc6a05f/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0998d2fd59e7a5eb3a3566c57625702bbdc6a05f/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=0998d2fd59e7a5eb3a3566c57625702bbdc6a05f", "patch": "@@ -2005,16 +2005,13 @@ cp_parser_context_new (cp_parser_context* next)\n   parser->unparsed_queues->last ().funs_with_definitions\n #define unparsed_nsdmis \\\n   parser->unparsed_queues->last ().nsdmis\n-#define unparsed_classes \\\n-  parser->unparsed_queues->last ().classes\n #define unparsed_noexcepts \\\n   parser->unparsed_queues->last ().noexcepts\n \n static void\n push_unparsed_function_queues (cp_parser *parser)\n {\n-  cp_unparsed_functions_entry e = { NULL, make_tree_vector (), NULL, NULL,\n-\t\t\t\t    NULL };\n+  cp_unparsed_functions_entry e = { NULL, make_tree_vector (), NULL, NULL };\n   vec_safe_push (parser->unparsed_queues, e);\n }\n \n@@ -23754,7 +23751,6 @@ cp_parser_class_specifier_1 (cp_parser* parser)\n \t     error recovery (c++/71169, c++/71832).  */\n \t  vec_safe_truncate (unparsed_funs_with_default_args, 0);\n \t  vec_safe_truncate (unparsed_nsdmis, 0);\n-\t  vec_safe_truncate (unparsed_classes, 0);\n \t  vec_safe_truncate (unparsed_funs_with_definitions, 0);\n \t}\n \n@@ -23809,12 +23805,6 @@ cp_parser_class_specifier_1 (cp_parser* parser)\n       if (pushed_scope)\n \tpop_scope (pushed_scope);\n \n-      /* Now do some post-NSDMI bookkeeping.  */\n-      FOR_EACH_VEC_SAFE_ELT (unparsed_classes, ix, class_type)\n-\tafter_nsdmi_defaulted_late_checks (class_type);\n-      vec_safe_truncate (unparsed_classes, 0);\n-      after_nsdmi_defaulted_late_checks (type);\n-\n       /* If there are noexcept-specifiers that have not yet been processed,\n \t take care of them now.  */\n       class_type = NULL_TREE;\n@@ -23885,8 +23875,6 @@ cp_parser_class_specifier_1 (cp_parser* parser)\n \t  cp_parser_late_parsing_for_member (parser, decl);\n       vec_safe_truncate (unparsed_funs_with_definitions, 0);\n     }\n-  else\n-    vec_safe_push (unparsed_classes, type);\n \n   /* Put back any saved access checks.  */\n   pop_deferring_access_checks ();"}, {"sha": "200498281b57720ea00633fbd54538212f3b03e4", "filename": "gcc/cp/parser.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0998d2fd59e7a5eb3a3566c57625702bbdc6a05f/gcc%2Fcp%2Fparser.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0998d2fd59e7a5eb3a3566c57625702bbdc6a05f/gcc%2Fcp%2Fparser.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.h?ref=0998d2fd59e7a5eb3a3566c57625702bbdc6a05f", "patch": "@@ -163,10 +163,6 @@ struct GTY(()) cp_unparsed_functions_entry {\n      FIELD_DECLs appear in this list in declaration order.  */\n   vec<tree, va_gc> *nsdmis;\n \n-  /* Nested classes go in this vector, so that we can do some final\n-     processing after parsing any NSDMIs.  */\n-  vec<tree, va_gc> *classes;\n-\n   /* Functions with noexcept-specifiers that require post-processing.  */\n   vec<tree, va_gc> *noexcepts;\n };"}, {"sha": "8db937fc0bf211c7678c370f6952cfaaddf1095b", "filename": "gcc/testsuite/g++.dg/DRs/dr1778.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0998d2fd59e7a5eb3a3566c57625702bbdc6a05f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr1778.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0998d2fd59e7a5eb3a3566c57625702bbdc6a05f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr1778.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr1778.C?ref=0998d2fd59e7a5eb3a3566c57625702bbdc6a05f", "patch": "@@ -0,0 +1,7 @@\n+// P1286R2: Contra CWG1778\n+// { dg-do compile { target c++11 } }\n+\n+struct T { T(); T(T &&) noexcept(false); };\n+struct U { T t; U(); U(U &&) noexcept = default; };\n+U u1;\n+U u2 = static_cast<U&&>(u1);      // OK, calls std::terminate if T::T(T&&) throws"}, {"sha": "23848633c3cc22f0569ac195524db1af25cfbbe8", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted23.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0998d2fd59e7a5eb3a3566c57625702bbdc6a05f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0998d2fd59e7a5eb3a3566c57625702bbdc6a05f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted23.C?ref=0998d2fd59e7a5eb3a3566c57625702bbdc6a05f", "patch": "@@ -10,10 +10,10 @@ A a;\n \n struct B\n {\n-  B() throw (int) = default; // { dg-message \"exception-specification\" \"\" { target { ! c++17 } } }\n+  B() throw (int) = default;\n };\t\t\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++17 } .-1 }\n \t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++17 } } .-2 }\n-B b;\t\t\t\t// { dg-error \"deleted\" \"\" { target { ! c++17 } } }\n+B b;\n \n struct C\n {"}, {"sha": "1fe7818ec677f2d54cbce787bed7cfce0f4b215f", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted43.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0998d2fd59e7a5eb3a3566c57625702bbdc6a05f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted43.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0998d2fd59e7a5eb3a3566c57625702bbdc6a05f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted43.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted43.C?ref=0998d2fd59e7a5eb3a3566c57625702bbdc6a05f", "patch": "@@ -17,8 +17,8 @@ struct A\n   T t;\n };\n \n-A::A() noexcept = default;   // { dg-error \"defaulted\" }\n-A::~A() noexcept = default;  // { dg-error \"defaulted\" }\n+A::A() noexcept = default;\n+A::~A() noexcept = default;\n \n struct U\n {\n@@ -51,10 +51,10 @@ V v;\n \n struct C\n {\n-  C() noexcept = default;\t// { dg-message \"exception-specification\" }\n-  ~C() noexcept = default;\t// { dg-message \"exception-specification\" }\n+  C() noexcept = default;\n+  ~C() noexcept = default;\n \n   V v;\n };\n \n-C c;\t\t\t\t// { dg-error \"deleted\" }\n+C c;"}]}