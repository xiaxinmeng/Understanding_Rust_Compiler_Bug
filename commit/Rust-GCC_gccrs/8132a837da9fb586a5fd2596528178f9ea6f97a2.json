{"sha": "8132a837da9fb586a5fd2596528178f9ea6f97a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODEzMmE4MzdkYTlmYjU4NmE1ZmQyNTk2NTI4MTc4ZjllYTZmOTdhMg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2010-03-18T20:07:13Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2010-03-18T20:07:13Z"}, "message": "re PR middle-end/42450 (another GCC 4.5 ICE on C++ templated code)\n\n2010-03-18  Martin Jambor  <mjambor@suse.cz>\n\n\tPR middle-end/42450\n\t* cgraph.h (cgraph_redirect_edge_call_stmt_to_callee): Declare.\n\t* cgraphunit.c (cgraph_materialize_all_clones): Update calls in\n\tall non-clones.  Moved call redirection...\n\t(cgraph_redirect_edge_call_stmt_to_callee): ...to this new\n\tfunction.\n\t(cgraph_materialize_all_clones): Dispose of all\n\tcombined_args_to_skip bitmaps.\n\t(verify_cgraph_node): Do not check for edges pointing to wrong\n\tnodes in inline clones.\n\t* tree-inline.c (copy_bb): Call\n\tcgraph_redirect_edge_call_stmt_to_callee.\n\t* ipa.c (cgraph_remove_unreachable_nodes): Call\n\tcgraph_node_remove_callees even when there are used clones.\n\n\t* testsuite/g++.dg/torture/pr42450.C: New test.\n\nFrom-SVN: r157546", "tree": {"sha": "b3c65fe0aa2410f77c557a506bd3f0cf02737f6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3c65fe0aa2410f77c557a506bd3f0cf02737f6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8132a837da9fb586a5fd2596528178f9ea6f97a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8132a837da9fb586a5fd2596528178f9ea6f97a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8132a837da9fb586a5fd2596528178f9ea6f97a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8132a837da9fb586a5fd2596528178f9ea6f97a2/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7893d7acfe277b4d46f5b4f012f7f76971c33b63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7893d7acfe277b4d46f5b4f012f7f76971c33b63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7893d7acfe277b4d46f5b4f012f7f76971c33b63"}], "stats": {"total": 262, "additions": 203, "deletions": 59}, "files": [{"sha": "9b5211c1f3b908a89cd0777253fcb2d0d8d8eb85", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8132a837da9fb586a5fd2596528178f9ea6f97a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8132a837da9fb586a5fd2596528178f9ea6f97a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8132a837da9fb586a5fd2596528178f9ea6f97a2", "patch": "@@ -1,3 +1,20 @@\n+2010-03-18  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR middle-end/42450\n+\t* cgraph.h (cgraph_redirect_edge_call_stmt_to_callee): Declare.\n+\t* cgraphunit.c (cgraph_materialize_all_clones): Update calls in\n+\tall non-clones.  Moved call redirection...\n+\t(cgraph_redirect_edge_call_stmt_to_callee): ...to this new\n+\tfunction.\n+\t(cgraph_materialize_all_clones): Dispose of all\n+\tcombined_args_to_skip bitmaps.\n+\t(verify_cgraph_node): Do not check for edges pointing to wrong\n+\tnodes in inline clones.\n+\t* tree-inline.c (copy_bb): Call\n+\tcgraph_redirect_edge_call_stmt_to_callee.\n+\t* ipa.c (cgraph_remove_unreachable_nodes): Call\n+\tcgraph_node_remove_callees even when there are used clones.\n+\n 2010-03-18  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/libgcc-glibc.ver: Make GCC_4.5.0 inherit GCC_4.4.0."}, {"sha": "4f0c333a3f40409e6e4e000b02b72aad336c8a9a", "filename": "gcc/cgraph.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8132a837da9fb586a5fd2596528178f9ea6f97a2/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8132a837da9fb586a5fd2596528178f9ea6f97a2/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=8132a837da9fb586a5fd2596528178f9ea6f97a2", "patch": "@@ -534,7 +534,7 @@ void cgraph_remove_edge_duplication_hook (struct cgraph_2edge_hook_list *);\n struct cgraph_2node_hook_list *cgraph_add_node_duplication_hook (cgraph_2node_hook, void *);\n void cgraph_remove_node_duplication_hook (struct cgraph_2node_hook_list *);\n void cgraph_materialize_all_clones (void);\n-\n+gimple cgraph_redirect_edge_call_stmt_to_callee (struct cgraph_edge *);\n /* In cgraphbuild.c  */\n unsigned int rebuild_cgraph_edges (void);\n void reset_inline_failed (struct cgraph_node *);"}, {"sha": "c41477bede36288447b002d0dade3a92e1df70ff", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 66, "deletions": 57, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8132a837da9fb586a5fd2596528178f9ea6f97a2/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8132a837da9fb586a5fd2596528178f9ea6f97a2/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=8132a837da9fb586a5fd2596528178f9ea6f97a2", "patch": "@@ -751,8 +751,9 @@ verify_cgraph_node (struct cgraph_node *node)\n \t\t\t    debug_tree (e->callee->decl);\n \t\t\t    error_found = true;\n \t\t\t  }\n-\t\t\telse if (!clone_of_p (cgraph_node (decl), e->callee)\n-\t\t\t         && !e->callee->global.inlined_to)\n+\t\t\telse if (!node->global.inlined_to\n+\t\t\t\t && !e->callee->global.inlined_to\n+\t\t\t\t && !clone_of_p (cgraph_node (decl), e->callee))\n \t\t\t  {\n \t\t\t    error (\"edge points to wrong declaration:\");\n \t\t\t    debug_tree (e->callee->decl);\n@@ -2222,11 +2223,60 @@ cgraph_materialize_clone (struct cgraph_node *node)\n   bitmap_obstack_release (NULL);\n }\n \n+/* If necessary, change the function declaration in the call statement\n+   associated with E so that it corresponds to the edge callee.  */\n+\n+gimple\n+cgraph_redirect_edge_call_stmt_to_callee (struct cgraph_edge *e)\n+{\n+  tree decl = gimple_call_fndecl (e->call_stmt);\n+  gimple new_stmt;\n+  gimple_stmt_iterator gsi;\n+\n+  if (!decl || decl == e->callee->decl\n+      /* Don't update call from same body alias to the real function.  */\n+      || cgraph_get_node (decl) == cgraph_get_node (e->callee->decl))\n+    return e->call_stmt;\n+\n+  if (cgraph_dump_file)\n+    {\n+      fprintf (cgraph_dump_file, \"updating call of %s/%i -> %s/%i: \",\n+\t       cgraph_node_name (e->caller), e->caller->uid,\n+\t       cgraph_node_name (e->callee), e->callee->uid);\n+      print_gimple_stmt (cgraph_dump_file, e->call_stmt, 0, dump_flags);\n+    }\n+\n+  if (e->callee->clone.combined_args_to_skip)\n+    new_stmt = gimple_call_copy_skip_args (e->call_stmt,\n+\t\t\t\t       e->callee->clone.combined_args_to_skip);\n+  else\n+    new_stmt = e->call_stmt;\n+  if (gimple_vdef (new_stmt)\n+      && TREE_CODE (gimple_vdef (new_stmt)) == SSA_NAME)\n+    SSA_NAME_DEF_STMT (gimple_vdef (new_stmt)) = new_stmt;\n+  gimple_call_set_fndecl (new_stmt, e->callee->decl);\n+\n+  gsi = gsi_for_stmt (e->call_stmt);\n+  gsi_replace (&gsi, new_stmt, true);\n+\n+  /* Update EH information too, just in case.  */\n+  maybe_clean_or_replace_eh_stmt (e->call_stmt, new_stmt);\n+\n+  cgraph_set_call_stmt_including_clones (e->caller, e->call_stmt, new_stmt);\n+\n+  if (cgraph_dump_file)\n+    {\n+      fprintf (cgraph_dump_file, \"  updated to:\");\n+      print_gimple_stmt (cgraph_dump_file, e->call_stmt, 0, dump_flags);\n+    }\n+  return new_stmt;\n+}\n+\n /* Once all functions from compilation unit are in memory, produce all clones\n-   and update all calls.\n-   We might also do this on demand if we don't want to bring all functions to\n-   memory prior compilation, but current WHOPR implementation does that and it is\n-   is bit easier to keep everything right in this order.  */\n+   and update all calls.  We might also do this on demand if we don't want to\n+   bring all functions to memory prior compilation, but current WHOPR\n+   implementation does that and it is is bit easier to keep everything right in\n+   this order.  */\n void\n cgraph_materialize_all_clones (void)\n {\n@@ -2302,69 +2352,28 @@ cgraph_materialize_all_clones (void)\n   if (cgraph_dump_file)\n     fprintf (cgraph_dump_file, \"Updating call sites\\n\");\n   for (node = cgraph_nodes; node; node = node->next)\n-    if (node->analyzed && gimple_has_body_p (node->decl)\n-        && (!node->clone_of || node->clone_of->decl != node->decl))\n+    if (node->analyzed && !node->clone_of\n+\t&& gimple_has_body_p (node->decl))\n       {\n         struct cgraph_edge *e;\n \n \tcurrent_function_decl = node->decl;\n         push_cfun (DECL_STRUCT_FUNCTION (node->decl));\n \tfor (e = node->callees; e; e = e->next_callee)\n-\t  {\n-\t    tree decl = gimple_call_fndecl (e->call_stmt);\n-\t    /* When function gets inlined, indirect inlining might've invented\n-\t       new edge for orginally indirect stmt.  Since we are not\n-\t       preserving clones in the original form, we must not update here\n-\t       since other inline clones don't need to contain call to the same\n-\t       call.  Inliner will do the substitution for us later.  */\n-\t    if (decl && decl != e->callee->decl)\n-\t      {\n-\t\tgimple new_stmt;\n-\t\tgimple_stmt_iterator gsi;\n-\n-\t\tif (cgraph_get_node (decl) == cgraph_get_node (e->callee->decl))\n-\t\t  /* Don't update call from same body alias to the real function.  */\n-\t\t  continue;\n-\n-\t\tif (cgraph_dump_file)\n-\t\t  {\n-\t\t    fprintf (cgraph_dump_file, \"updating call of %s in %s:\",\n-\t\t             cgraph_node_name (node),\n-\t\t\t     cgraph_node_name (e->callee));\n-      \t\t    print_gimple_stmt (cgraph_dump_file, e->call_stmt, 0, dump_flags);\n-\t\t  }\n-\n-\t\tif (e->callee->clone.combined_args_to_skip)\n-\t\t  new_stmt = gimple_call_copy_skip_args (e->call_stmt,\n-\t\t\t\t\t\t\t e->callee->clone.combined_args_to_skip);\n-\t\telse\n-\t\t  new_stmt = e->call_stmt;\n-\t\tif (gimple_vdef (new_stmt)\n-\t\t    && TREE_CODE (gimple_vdef (new_stmt)) == SSA_NAME)\n-\t\t  SSA_NAME_DEF_STMT (gimple_vdef (new_stmt)) = new_stmt;\n-                gimple_call_set_fndecl (new_stmt, e->callee->decl);\n-\n-\t\tgsi = gsi_for_stmt (e->call_stmt);\n-\t\tgsi_replace (&gsi, new_stmt, true);\n-\n-\t\t/* Update EH information too, just in case.  */\n-\t\tmaybe_clean_or_replace_eh_stmt (e->call_stmt, new_stmt);\n-\n-\t\tcgraph_set_call_stmt_including_clones (node, e->call_stmt, new_stmt);\n-\n-\t\tif (cgraph_dump_file)\n-\t\t  {\n-\t\t    fprintf (cgraph_dump_file, \"  updated to:\");\n-      \t\t    print_gimple_stmt (cgraph_dump_file, e->call_stmt, 0, dump_flags);\n-\t\t  }\n-\t      }\n-\t  }\n+\t  cgraph_redirect_edge_call_stmt_to_callee (e);\n \tpop_cfun ();\n \tcurrent_function_decl = NULL;\n #ifdef ENABLE_CHECKING\n         verify_cgraph_node (node);\n #endif\n       }\n+  if (cgraph_dump_file)\n+    fprintf (cgraph_dump_file, \"Materialization Call site updates done.\\n\");\n+  /* All changes to parameters have been performed.  In order not to\n+     incorrectly repeat them, we simply dispose of the bitmaps that drive the\n+     changes. */\n+  for (node = cgraph_nodes; node; node = node->next)\n+    node->clone.combined_args_to_skip = NULL;\n #ifdef ENABLE_CHECKING\n   verify_cgraph ();\n #endif"}, {"sha": "c789a29372d9c16de6e093c37c26191a92ae822a", "filename": "gcc/ipa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8132a837da9fb586a5fd2596528178f9ea6f97a2/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8132a837da9fb586a5fd2596528178f9ea6f97a2/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=8132a837da9fb586a5fd2596528178f9ea6f97a2", "patch": "@@ -262,10 +262,10 @@ cgraph_remove_unreachable_nodes (bool before_inlining_p, FILE *file)\n \t\t  if (!clone)\n \t\t    {\n \t\t      cgraph_release_function_body (node);\n-\t\t      cgraph_node_remove_callees (node);\n \t\t      node->analyzed = false;\n \t\t      node->local.inlinable = false;\n \t\t    }\n+\t\t  cgraph_node_remove_callees (node);\n \t\t  if (node->prev_sibling_clone)\n \t\t    node->prev_sibling_clone->next_sibling_clone = node->next_sibling_clone;\n \t\t  else if (node->clone_of)"}, {"sha": "8d678f9d8ad8bd5484b5b78eb150ca5709c20a3c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8132a837da9fb586a5fd2596528178f9ea6f97a2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8132a837da9fb586a5fd2596528178f9ea6f97a2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8132a837da9fb586a5fd2596528178f9ea6f97a2", "patch": "@@ -1,3 +1,8 @@\n+2010-03-18  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR middle-end/42450\n+\t* g++.dg/torture/pr42450.C: New test.\n+\n 2010-03-18  Michael Matz  <matz@suse.de>\n \n \tPR middle-end/43419"}, {"sha": "f630fa2b7e28a04806fe7c9ca2cebab284f34bf5", "filename": "gcc/testsuite/g++.dg/torture/pr42450.C", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8132a837da9fb586a5fd2596528178f9ea6f97a2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr42450.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8132a837da9fb586a5fd2596528178f9ea6f97a2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr42450.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr42450.C?ref=8132a837da9fb586a5fd2596528178f9ea6f97a2", "patch": "@@ -0,0 +1,112 @@\n+/* { dg-do compile } */\n+\n+template < typename > class basic_stringstream;\n+\n+struct basic_string {\n+  basic_string();\n+};\n+\n+struct ios_base {\n+  virtual ~ios_base();\n+};\n+\n+class ostream:ios_base {};\n+class istream:virtual ios_base {};\n+\n+template < typename > struct basic_iostream:public istream, ostream {\n+  ~basic_iostream () {}\n+};\n+extern template class basic_iostream < char >;\n+\n+template < typename > struct basic_stringstream:public basic_iostream < char > {\n+    basic_string _M_stringbuf;\n+    ~basic_stringstream () {}\n+};\n+extern template class basic_stringstream < char >;\n+\n+template < typename > struct AnyMatrixBase;\n+template < typename, int _Rows, int _Cols, int = _Rows, int = _Cols > class Matrix;\n+template < typename > class CwiseNullaryOp;\n+\n+template < typename Derived > struct MatrixBase:public AnyMatrixBase < Derived > {\n+  typedef CwiseNullaryOp < Derived > ConstantReturnType;\n+  ConstantReturnType Constant ();\n+  template < typename > Derived cast ();\n+  static CwiseNullaryOp < Derived > Random (int);\n+};\n+\n+template < typename Derived > struct AnyMatrixBase {\n+  Derived derived () {}\n+  Derived & derived () const {}\n+};\n+\n+template < typename, int > struct ei_matrix_storage {};\n+\n+template < typename _Scalar, int, int, int _MaxRows, int _MaxCols > struct Matrix:MatrixBase < Matrix < _Scalar, _MaxRows, _MaxCols > > {\n+  typedef MatrixBase < Matrix > Base;\n+  ei_matrix_storage < int, _MaxCols > m_storage;\n+  Matrix operator= (const Matrix other) {\n+    _resize_to_match (other);\n+    lazyAssign (other.derived ());\n+  }\n+  template < typename OtherDerived > Matrix lazyAssign (MatrixBase < OtherDerived > other) {\n+    _resize_to_match (other);\n+    return Base (other.derived ());\n+  }\n+  Matrix ();\n+  template < typename OtherDerived > Matrix (const MatrixBase < OtherDerived > &other) {\n+    *this = other;\n+  }\n+  template < typename OtherDerived > void _resize_to_match (const MatrixBase < OtherDerived > &) {\n+    throw 1;\n+  }\n+};\n+\n+template < typename MatrixType > class CwiseNullaryOp:\n+public MatrixBase < CwiseNullaryOp < MatrixType > > {};\n+\n+int f()\n+{\n+  bool align_cols;\n+  if (align_cols) {\n+    basic_stringstream<char> sstr;\n+    f();\n+  }\n+}\n+\n+template < typename > struct AutoDiffScalar;\n+template < typename Functor > struct AutoDiffJacobian:Functor {\n+  AutoDiffJacobian (Functor);\n+  typedef typename Functor::InputType InputType;\n+  typedef typename Functor::ValueType ValueType;\n+  typedef Matrix < int, Functor::InputsAtCompileTime, 1 > DerivativeType;\n+  typedef AutoDiffScalar < DerivativeType > ActiveScalar;\n+  typedef Matrix < ActiveScalar, Functor::InputsAtCompileTime, 1 > ActiveInput;\n+  void operator () (InputType x, ValueType *) {\n+    ActiveInput ax = x.template cast < ActiveScalar > ();\n+  }\n+};\n+\n+template < int NX, int NY > struct TestFunc1 {\n+  enum  {\n+    InputsAtCompileTime = NX\n+  };\n+  typedef Matrix < float, NX, 1 > InputType;\n+  typedef Matrix < float, NY, 1 > ValueType;\n+  typedef Matrix < float, NY, NX > JacobianType;\n+  int inputs ();\n+};\n+\n+template < typename Func > void forward_jacobian (Func f) {\n+  typename Func::InputType x = Func::InputType::Random (f.inputs ());\n+  typename Func::ValueType y;\n+  typename Func::JacobianType jref = jref.Constant ();\n+  AutoDiffJacobian < Func > autoj (f);\n+  autoj (x, &y);\n+}\n+\n+void test_autodiff_scalar ()\n+{\n+  forward_jacobian (TestFunc1 < 2, 2 > ());\n+  forward_jacobian (TestFunc1 < 3, 2 > ());\n+}"}, {"sha": "e0928b9fe0302ed2d6c4a5982643833db46fdc07", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8132a837da9fb586a5fd2596528178f9ea6f97a2/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8132a837da9fb586a5fd2596528178f9ea6f97a2/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=8132a837da9fb586a5fd2596528178f9ea6f97a2", "patch": "@@ -1650,6 +1650,7 @@ copy_bb (copy_body_data *id, basic_block bb, int frequency_scale,\n \t\t\t\t   bb->frequency,\n \t\t\t\t   copy_basic_block->frequency);\n \t\t\t}\n+\t\t      stmt = cgraph_redirect_edge_call_stmt_to_callee (edge);\n \t\t    }\n \t\t  break;\n "}]}