{"sha": "7304c6cfe91d479beeb49167441faa26226cf8cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMwNGM2Y2ZlOTFkNDc5YmVlYjQ5MTY3NDQxZmFhMjYyMjZjZjhjZg==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2003-11-12T15:24:42Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2003-11-12T15:24:42Z"}, "message": "re PR java/11533 (Inlining drops static initialization of inner class)\n\n2003-11-12  Andrew Haley  <aph@redhat.com>\n\n        PR java/11533\n        * lang.c (merge_init_test_initialization): Clear DECL_INITIAL for\n        init_test_decls being inlined.\n\n        PR java/12890:\n        * parse.y (do_resolve_class): Check return value from\n        breakdown_qualified().\n\nFrom-SVN: r73494", "tree": {"sha": "f18ec01257339870bfe0454f85747078700d4dc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f18ec01257339870bfe0454f85747078700d4dc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7304c6cfe91d479beeb49167441faa26226cf8cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7304c6cfe91d479beeb49167441faa26226cf8cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7304c6cfe91d479beeb49167441faa26226cf8cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7304c6cfe91d479beeb49167441faa26226cf8cf/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "88f08cca2804fb07fda114bf414ce0e4c18be6d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88f08cca2804fb07fda114bf414ce0e4c18be6d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88f08cca2804fb07fda114bf414ce0e4c18be6d3"}], "stats": {"total": 48, "additions": 39, "deletions": 9}, "files": [{"sha": "303e71cd259485d3e06f38943cee519866bb4224", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7304c6cfe91d479beeb49167441faa26226cf8cf/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7304c6cfe91d479beeb49167441faa26226cf8cf/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=7304c6cfe91d479beeb49167441faa26226cf8cf", "patch": "@@ -1,3 +1,13 @@\n+2003-11-12  Andrew Haley  <aph@redhat.com>\n+\n+\tPR java/11533\n+\t* lang.c (merge_init_test_initialization): Clear DECL_INITIAL for\n+\tinit_test_decls being inlined.\n+\n+\tPR java/12890:\n+\t* parse.y (do_resolve_class): Check return value from\n+\tbreakdown_qualified().\n+\n 2003-11-11  Tom Tromey  <tromey@redhat.com>\n \n \tPR java/12915:"}, {"sha": "a649a4ad0f9ea7c59dd37bfb16bc3bc284c02f33", "filename": "gcc/java/lang.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7304c6cfe91d479beeb49167441faa26226cf8cf/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7304c6cfe91d479beeb49167441faa26226cf8cf/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=7304c6cfe91d479beeb49167441faa26226cf8cf", "patch": "@@ -926,6 +926,24 @@ merge_init_test_initialization (void **entry, void *x)\n   if (!*init_test_decl)\n     *init_test_decl = (tree)n->value;\n \n+  /* This fixes a weird case.  \n+\n+  The front end assumes that once we have called a method that\n+  initializes some class, we can assume the class is initialized.  It\n+  does this by setting the DECL_INITIAL of the init_test_decl for that\n+  class, and no initializations are emitted for that class.\n+  \n+  However, what if the method that is suppoed to do the initialization\n+  is itself inlined in the caller?  When expanding the called method\n+  we'll assume that the class initalization has already been done,\n+  because the DECL_INITIAL of the init_test_decl is set.\n+  \n+  To fix this we remove the DECL_INITIAL (in the caller scope) of all\n+  the init_test_decls corresponding to classes initialized by the\n+  inlined method.  This makes the caller no longer assume that the\n+  method being inlined does any class initializations.  */\n+  DECL_INITIAL (*init_test_decl) = NULL;\n+\n   return true;\n }\n "}, {"sha": "c1b70ddc51d8ae0197d89d0fa7ebaa7efd7a060d", "filename": "gcc/java/parse.y", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7304c6cfe91d479beeb49167441faa26226cf8cf/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7304c6cfe91d479beeb49167441faa26226cf8cf/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=7304c6cfe91d479beeb49167441faa26226cf8cf", "patch": "@@ -5718,14 +5718,16 @@ do_resolve_class (tree enclosing, tree class_type, tree decl, tree cl)\n \t class and then treat Id as a member type.  If we can't find Q\n \t as a class then we fall through.  */\n       tree q, left, left_type, right;\n-      breakdown_qualified (&left, &right, TYPE_NAME (class_type));\n-      BUILD_PTR_FROM_NAME (left_type, left);\n-      q = do_resolve_class (enclosing, left_type, decl, cl);\n-      if (q)\n+      if (breakdown_qualified (&left, &right, TYPE_NAME (class_type)) == 0)\n \t{\n-\t  enclosing = q;\n-\t  saved_enclosing_type = TREE_TYPE (q);\n-\t  BUILD_PTR_FROM_NAME (class_type, right);\n+\t  BUILD_PTR_FROM_NAME (left_type, left);\n+\t  q = do_resolve_class (enclosing, left_type, decl, cl);\n+\t  if (q)\n+\t    {\n+\t      enclosing = q;\n+\t      saved_enclosing_type = TREE_TYPE (q);\n+\t      BUILD_PTR_FROM_NAME (class_type, right);\n+\t    }\n \t}\n     }\n \n@@ -16218,8 +16220,8 @@ attach_init_test_initialization_flags (void **entry, void *ptr)\n   return true;\n }\n \n-/* This function is called for each classes that is known definitely\n-   assigned when a given static method was called. This function\n+/* This function is called for each class that is known definitely\n+   initialized when a given static method was called. This function\n    augments a compound expression (INFO) storing all assignment to\n    initialized static class flags if a flag already existed, otherwise\n    a new one is created.  */"}]}