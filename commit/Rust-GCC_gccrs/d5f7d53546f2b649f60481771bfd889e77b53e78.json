{"sha": "d5f7d53546f2b649f60481771bfd889e77b53e78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVmN2Q1MzU0NmYyYjY0OWY2MDQ4MTc3MWJmZDg4OWU3N2I1M2U3OA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2013-12-09T14:54:00Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2013-12-09T14:54:00Z"}, "message": "re PR rtl-optimization/54300 (regcprop incorrectly looks through parallel register swap operation)\n\n\tPR rtl-optimization/54300\n\ngcc/\n\n\tPR rtl-optimization/54300\n\t* regcprop.c (copyprop_hardreg_forward_1): Ensure any unused\n\toutputs in a single-set are killed from the value chains.\n\ngcc/testsuite:\n\n\tPR rtl-optimization/54300\n\t* gcc.target/arm/pr54300.C: New test.\n\nFrom-SVN: r205807", "tree": {"sha": "107e2ff12362536156d2c89ffbd2cf389777b7e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/107e2ff12362536156d2c89ffbd2cf389777b7e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5f7d53546f2b649f60481771bfd889e77b53e78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5f7d53546f2b649f60481771bfd889e77b53e78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5f7d53546f2b649f60481771bfd889e77b53e78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5f7d53546f2b649f60481771bfd889e77b53e78/comments", "author": null, "committer": null, "parents": [{"sha": "e52f6c68f9efea7eb793d168d249cd8ccd86d79f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e52f6c68f9efea7eb793d168d249cd8ccd86d79f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e52f6c68f9efea7eb793d168d249cd8ccd86d79f"}], "stats": {"total": 61, "additions": 48, "deletions": 13}, "files": [{"sha": "ba39e4b0d3634baa87e526f367b532f893b9d15d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5f7d53546f2b649f60481771bfd889e77b53e78/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5f7d53546f2b649f60481771bfd889e77b53e78/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d5f7d53546f2b649f60481771bfd889e77b53e78", "patch": "@@ -1,3 +1,8 @@\n+2013-12-09  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.c (mem_ok_for_ldrd_strd): Rename first argument as MEM.  Do\n+\tmore address validation checks.\n+\n 2013-12-09  Marek Polacek  <polacek@redhat.com>\n \n \tPR sanitizer/59415"}, {"sha": "bed24376d1b8d679457738e1cf1cf2a9ba1976b2", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5f7d53546f2b649f60481771bfd889e77b53e78/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5f7d53546f2b649f60481771bfd889e77b53e78/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=d5f7d53546f2b649f60481771bfd889e77b53e78", "patch": "@@ -15285,28 +15285,37 @@ operands_ok_ldrd_strd (rtx rt, rtx rt2, rtx rn, HOST_WIDE_INT offset,\n }\n \n /* Helper for gen_operands_ldrd_strd.  Returns true iff the memory\n-   operand ADDR is an immediate offset from the base register and is\n-   not volatile, in which case it sets BASE and OFFSET\n-   accordingly.  */\n-bool\n-mem_ok_for_ldrd_strd (rtx addr, rtx *base, rtx *offset)\n+   operand MEM's address contains an immediate offset from the base\n+   register and has no side effects, in which case it sets BASE and\n+   OFFSET accordingly.  */\n+static bool\n+mem_ok_for_ldrd_strd (rtx mem, rtx *base, rtx *offset)\n {\n+  rtx addr;\n+\n+  gcc_assert (base != NULL && offset != NULL);\n+\n   /* TODO: Handle more general memory operand patterns, such as\n      PRE_DEC and PRE_INC.  */\n \n-  /* Convert a subreg of mem into mem itself.  */\n-  if (GET_CODE (addr) == SUBREG)\n-    addr = alter_subreg (&addr, true);\n-\n-  gcc_assert (MEM_P (addr));\n+  if (side_effects_p (mem))\n+    return false;\n \n-  /* Don't modify volatile memory accesses.  */\n-  if (MEM_VOLATILE_P (addr))\n+  /* Can't deal with subregs.  */\n+  if (GET_CODE (mem) == SUBREG)\n     return false;\n \n+  gcc_assert (MEM_P (mem));\n+\n   *offset = const0_rtx;\n \n-  addr = XEXP (addr, 0);\n+  addr = XEXP (mem, 0);\n+\n+  /* If addr isn't valid for DImode, then we can't handle it.  */\n+  if (!arm_legitimate_address_p (DImode, addr,\n+\t\t\t\t reload_in_progress || reload_completed))\n+    return false;\n+\n   if (REG_P (addr))\n     {\n       *base = addr;"}, {"sha": "0f8a9e28a72911e61b89b515a33b50ed5408ddc0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5f7d53546f2b649f60481771bfd889e77b53e78/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5f7d53546f2b649f60481771bfd889e77b53e78/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d5f7d53546f2b649f60481771bfd889e77b53e78", "patch": "@@ -1,3 +1,7 @@\n+2013-12-09  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* gcc.target/arm/ldrd-strd-offset.c: New.\n+\n 2013-12-09  Martin Jambor  <mjambor@suse.cz>\n \n \t* gcc.c-torture/compile/pr39834.c: Remove optimization level option."}, {"sha": "a128a0a0e4b299b3d2a256c3166fd2ee8a882542", "filename": "gcc/testsuite/gcc.target/arm/ldrd-strd-offset.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5f7d53546f2b649f60481771bfd889e77b53e78/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fldrd-strd-offset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5f7d53546f2b649f60481771bfd889e77b53e78/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fldrd-strd-offset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fldrd-strd-offset.c?ref=d5f7d53546f2b649f60481771bfd889e77b53e78", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef struct\n+{\n+  int x;\n+  int i, j;\n+} off_struct;\n+\n+int foo (char *str, int *a, int b, int c)\n+{\n+  off_struct *p = (off_struct *)(str + 3);\n+  b = p->i;\n+  c = p->j;\n+  *a = b + c;\n+  return 0;\n+}"}]}