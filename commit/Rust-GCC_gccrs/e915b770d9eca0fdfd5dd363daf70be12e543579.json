{"sha": "e915b770d9eca0fdfd5dd363daf70be12e543579", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkxNWI3NzBkOWVjYTBmZGZkNWRkMzYzZGFmNzBiZTEyZTU0MzU3OQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-02-25T20:40:21Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-02-25T20:40:21Z"}, "message": "Makefile.in (cppmain.o, [...]): Don't depend on machmode.h.\n\n        * Makefile.in (cppmain.o, cpplib.o, cpphash.o, cppalloc.o,\n        cpperror.o, cppexp.o, cppfiles.o, cppinit.o, fix-header.o,\n        scan-decls.o): Don't depend on machmode.h.\n        * cppexp.c: Don't define CHAR_BIT or HOST_BITS_PER_WIDE_INT anymore.\n        Replace all instances of HOST_WIDE_INT with HOST_WIDEST_INT.\n        * cppfiles.c: Likewise.\n        * cpplib.c: Likewise.\n        * cpplib.h: Likewise.  Also don't include machmode.h anymore.\n\nFrom-SVN: r25446", "tree": {"sha": "f93654398f80da81daa76ad8b689f48c4ebb6328", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f93654398f80da81daa76ad8b689f48c4ebb6328"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e915b770d9eca0fdfd5dd363daf70be12e543579", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e915b770d9eca0fdfd5dd363daf70be12e543579", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e915b770d9eca0fdfd5dd363daf70be12e543579", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e915b770d9eca0fdfd5dd363daf70be12e543579/comments", "author": null, "committer": null, "parents": [{"sha": "056cd572516e35aff4f58939bfcd27e9bdb54d6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/056cd572516e35aff4f58939bfcd27e9bdb54d6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/056cd572516e35aff4f58939bfcd27e9bdb54d6b"}], "stats": {"total": 104, "additions": 52, "deletions": 52}, "files": [{"sha": "0acea81b04407efea0a1245ee017e5d878e0dc99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e915b770d9eca0fdfd5dd363daf70be12e543579/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e915b770d9eca0fdfd5dd363daf70be12e543579/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e915b770d9eca0fdfd5dd363daf70be12e543579", "patch": "@@ -1,3 +1,18 @@\n+Thu Feb 25 23:33:06 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (cppmain.o, cpplib.o, cpphash.o, cppalloc.o,\n+ \tcpperror.o, cppexp.o, cppfiles.o, cppinit.o, fix-header.o,\n+ \tscan-decls.o): Don't depend on machmode.h.\n+\t\n+        * cppexp.c: Don't define CHAR_BIT or HOST_BITS_PER_WIDE_INT anymore.\n+  \tReplace all instances of HOST_WIDE_INT with HOST_WIDEST_INT.\n+\t\n+\t* cppfiles.c: Likewise.\n+\n+ \t* cpplib.c: Likewise.\n+\t \n+ \t* cpplib.h: Likewise.  Also don't include machmode.h anymore.\n+\n Thu Feb 25 18:46:26 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* gcc.c (default_compilers): Define __FAST_MATH__ when appropriate."}, {"sha": "9d9d3639f8faf9d3d904e0ca530b8b3d1379db7a", "filename": "gcc/Makefile.in", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e915b770d9eca0fdfd5dd363daf70be12e543579/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e915b770d9eca0fdfd5dd363daf70be12e543579/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=e915b770d9eca0fdfd5dd363daf70be12e543579", "patch": "@@ -1968,17 +1968,17 @@ cppmain$(exeext): cppmain.o libcpp.a $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o cppmain$(exeext) cppmain.o \\\n \tlibcpp.a $(LIBS)\n \n-cppmain.o: cppmain.c $(CONFIG_H) cpplib.h intl.h machmode.h system.h\n+cppmain.o: cppmain.c $(CONFIG_H) cpplib.h intl.h system.h\n \n cppulp.o:  cppulp.c  $(CONFIG_H) system.h output.h\n-cpplib.o:  cpplib.c  $(CONFIG_H) cpplib.h intl.h machmode.h system.h cpphash.h\n-cpphash.o: cpphash.c $(CONFIG_H) cpplib.h intl.h machmode.h system.h cpphash.h\n-cppalloc.o: cppalloc.c $(CONFIG_H) cpplib.h intl.h machmode.h system.h\n-cpperror.o: cpperror.c $(CONFIG_H) cpplib.h intl.h machmode.h system.h\n-cppexp.o:   cppexp.c   $(CONFIG_H) cpplib.h intl.h machmode.h system.h\n-cppfiles.o: cppfiles.c $(CONFIG_H) cpplib.h intl.h machmode.h system.h\n-\n-cppinit.o:  cppalloc.c $(CONFIG_H) cpplib.h intl.h machmode.h system.h \\\n+cpplib.o:  cpplib.c  $(CONFIG_H) cpplib.h intl.h system.h cpphash.h\n+cpphash.o: cpphash.c $(CONFIG_H) cpplib.h intl.h system.h cpphash.h\n+cppalloc.o: cppalloc.c $(CONFIG_H) cpplib.h intl.h system.h\n+cpperror.o: cpperror.c $(CONFIG_H) cpplib.h intl.h system.h\n+cppexp.o:   cppexp.c   $(CONFIG_H) cpplib.h intl.h system.h\n+cppfiles.o: cppfiles.c $(CONFIG_H) cpplib.h intl.h system.h\n+\n+cppinit.o:  cppalloc.c $(CONFIG_H) cpplib.h intl.h system.h \\\n \t\tcpphash.h prefix.h output.h Makefile\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t  -DGCC_INCLUDE_DIR=\\\"$(libsubdir)/include\\\" \\\n@@ -2193,10 +2193,10 @@ fix-header: fix-header.o scan-decls.o scan.o xsys-protos.h $(HOST_LIBDEPS) \\\n \t   scan-decls.o scan.o libcpp.a $(HOST_LIBS)\n \n fix-header.o: fix-header.c $(srcdir)/../include/obstack.h scan.h \\\n-\txsys-protos.h $(build_xm_file) system.h cpplib.h machmode.h cpphash.h\n+\txsys-protos.h $(build_xm_file) system.h cpplib.h cpphash.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/fix-header.c\n \n-scan-decls.o: scan-decls.c scan.h cpplib.h machmode.h $(build_xm_file) system.h\n+scan-decls.o: scan-decls.c scan.h cpplib.h $(build_xm_file) system.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/scan-decls.c\n \n # stmp-fixproto depends on this, not on fix-header directly."}, {"sha": "36e134bb55b2a9a86e242047a4c571c65ef09477", "filename": "gcc/cppexp.c", "status": "modified", "additions": 17, "deletions": 25, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e915b770d9eca0fdfd5dd363daf70be12e543579/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e915b770d9eca0fdfd5dd363daf70be12e543579/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=e915b770d9eca0fdfd5dd363daf70be12e543579", "patch": "@@ -64,13 +64,13 @@ Written by Per Bothner 1994.  */\n #define MAX_WCHAR_TYPE_SIZE WCHAR_TYPE_SIZE\n #endif\n \n-#define MAX_CHAR_TYPE_MASK (MAX_CHAR_TYPE_SIZE < HOST_BITS_PER_WIDE_INT \\\n-\t\t\t    ? (~ (~ (HOST_WIDE_INT) 0 << MAX_CHAR_TYPE_SIZE)) \\\n-\t\t\t    : ~ (HOST_WIDE_INT) 0)\n+#define MAX_CHAR_TYPE_MASK (MAX_CHAR_TYPE_SIZE < HOST_BITS_PER_WIDEST_INT \\\n+\t\t\t    ? (~ (~ (HOST_WIDEST_INT) 0 << MAX_CHAR_TYPE_SIZE)) \\\n+\t\t\t    : ~ (HOST_WIDEST_INT) 0)\n \n-#define MAX_WCHAR_TYPE_MASK (MAX_WCHAR_TYPE_SIZE < HOST_BITS_PER_WIDE_INT \\\n-\t\t\t     ? ~ (~ (HOST_WIDE_INT) 0 << MAX_WCHAR_TYPE_SIZE) \\\n-\t\t\t     : ~ (HOST_WIDE_INT) 0)\n+#define MAX_WCHAR_TYPE_MASK (MAX_WCHAR_TYPE_SIZE < HOST_BITS_PER_WIDEST_INT \\\n+\t\t\t     ? ~ (~ (HOST_WIDEST_INT) 0 << MAX_WCHAR_TYPE_SIZE) \\\n+\t\t\t     : ~ (HOST_WIDEST_INT) 0)\n \n /* Yield nonzero if adding two numbers with A's and B's signs can yield a\n    number with SUM's sign, where A, B, and SUM are all C integers.  */\n@@ -101,22 +101,14 @@ static long right_shift PARAMS ((cpp_reader *, long, int, unsigned long));\n #define SKIP_OPERAND 8\n /*#define UNSIGNEDP 16*/\n \n-#ifndef CHAR_BIT\n-#define CHAR_BIT 8\n-#endif\n-\n-#ifndef HOST_BITS_PER_WIDE_INT\n-#define HOST_BITS_PER_WIDE_INT (CHAR_BIT * sizeof (HOST_WIDE_INT))\n-#endif\n-\n #define SKIP_WHITE_SPACE(p) do { while (is_hor_space[*p]) p++; } while (0)\n \n struct operation {\n     short op;\n     char rprio; /* Priority of op (relative to it right operand).  */\n     char flags;\n     char unsignedp;    /* true if value should be treated as unsigned */\n-    HOST_WIDE_INT value;        /* The value logically \"right\" of op.  */\n+    HOST_WIDEST_INT value;        /* The value logically \"right\" of op.  */\n };\n \n /* Parse and convert an integer for #if.  Accepts decimal, hex, or octal\n@@ -131,7 +123,7 @@ parse_number (pfile, start, end)\n   struct operation op;\n   U_CHAR *p = start;\n   int c;\n-  unsigned HOST_WIDE_INT n = 0, nd, MAX_over_base;\n+  unsigned HOST_WIDEST_INT n = 0, nd, MAX_over_base;\n   int base = 10;\n   int overflow = 0;\n   int digit, largest_digit = 0;\n@@ -154,8 +146,8 @@ parse_number (pfile, start, end)\n     }\n \n   /* Some buggy compilers (e.g. MPW C) seem to need both casts.  */\n-  MAX_over_base = (((unsigned HOST_WIDE_INT) -1)\n-\t\t   / ((unsigned HOST_WIDE_INT) base));\n+  MAX_over_base = (((unsigned HOST_WIDEST_INT) -1)\n+\t\t   / ((unsigned HOST_WIDEST_INT) base));\n \n   while (p < end)\n     {\n@@ -229,7 +221,7 @@ parse_number (pfile, start, end)\n     cpp_pedwarn (pfile, \"integer constant out of range\");\n \n   /* If too big to be signed, consider it unsigned.  */\n-  else if ((HOST_WIDE_INT) n < 0 && ! op.unsignedp)\n+  else if ((HOST_WIDEST_INT) n < 0 && ! op.unsignedp)\n     {\n       if (base == 10)\n \tcpp_warning (pfile,\n@@ -255,7 +247,7 @@ parse_charconst (pfile, start, end)\n      U_CHAR *end;\n {\n   struct operation op;\n-  HOST_WIDE_INT result = 0;\n+  HOST_WIDEST_INT result = 0;\n   int num_chars = 0;\n   int num_bits;\n   unsigned int width = MAX_CHAR_TYPE_SIZE, mask = MAX_CHAR_TYPE_MASK;\n@@ -521,11 +513,11 @@ cpp_lex (pfile, skip_evaluation)\n    If \\ is followed by 000, we return 0 and leave the string pointer\n    after the zeros.  A value of 0 does not mean end of string.  */\n \n-HOST_WIDE_INT\n+HOST_WIDEST_INT\n cpp_parse_escape (pfile, string_ptr, result_mask)\n      cpp_reader *pfile;\n      char **string_ptr;\n-     HOST_WIDE_INT result_mask;\n+     HOST_WIDEST_INT result_mask;\n {\n   register int c = *(*string_ptr)++;\n   switch (c)\n@@ -564,7 +556,7 @@ cpp_parse_escape (pfile, string_ptr, result_mask)\n     case '6':\n     case '7':\n       {\n-\tregister HOST_WIDE_INT i = c - '0';\n+\tregister HOST_WIDEST_INT i = c - '0';\n \tregister int count = 0;\n \twhile (++count < 3)\n \t  {\n@@ -586,7 +578,7 @@ cpp_parse_escape (pfile, string_ptr, result_mask)\n       }\n     case 'x':\n       {\n-\tregister unsigned HOST_WIDE_INT i = 0, overflow = 0;\n+\tregister unsigned HOST_WIDEST_INT i = 0, overflow = 0;\n \tregister int digits_found = 0, digit;\n \tfor (;;)\n \t  {\n@@ -692,7 +684,7 @@ right_shift (pfile, a, unsignedp, b)\n /* Parse and evaluate a C expression, reading from PFILE.\n    Returns the value of the expression.  */\n \n-HOST_WIDE_INT\n+HOST_WIDEST_INT\n cpp_parse_expr (pfile)\n      cpp_reader *pfile;\n {"}, {"sha": "88a1e4d5c1f50306ad22d60ed6bb9be31b583ecc", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e915b770d9eca0fdfd5dd363daf70be12e543579/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e915b770d9eca0fdfd5dd363daf70be12e543579/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=e915b770d9eca0fdfd5dd363daf70be12e543579", "patch": "@@ -705,8 +705,8 @@ finclude (pfile, fd, ihash)\n          a single source file bigger than 4GB needs to rethink\n \t their coding style.)  */\n       st_size = (size_t) st.st_size;\n-      if ((unsigned HOST_WIDE_INT) st_size\n-\t  != (unsigned HOST_WIDE_INT) st.st_size)\n+      if ((unsigned HOST_WIDEST_INT) st_size\n+\t  != (unsigned HOST_WIDEST_INT) st.st_size)\n \t{\n \t  cpp_error (pfile, \"file `%s' is too large\", ihash->name);\n \t  goto fail;"}, {"sha": "a46d5c7f2fe475ed10b246cb431306ab52bf193b", "filename": "gcc/cpplib.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e915b770d9eca0fdfd5dd363daf70be12e543579/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e915b770d9eca0fdfd5dd363daf70be12e543579/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=e915b770d9eca0fdfd5dd363daf70be12e543579", "patch": "@@ -55,7 +55,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n static char *my_strerror\t\tPROTO ((int));\n static void validate_else\t\tPROTO ((cpp_reader *, char *));\n-static HOST_WIDE_INT eval_if_expression\tPROTO ((cpp_reader *));\n+static HOST_WIDEST_INT eval_if_expression\tPROTO ((cpp_reader *));\n \n static void conditional_skip\t\tPROTO ((cpp_reader *, int,\n \t\t\t\t\t\tenum node_type, U_CHAR *));\n@@ -64,7 +64,7 @@ static int parse_name                   PARAMS ((cpp_reader *, int));\n \n /* External declarations.  */\n \n-extern HOST_WIDE_INT cpp_parse_expr PARAMS ((cpp_reader *));\n+extern HOST_WIDEST_INT cpp_parse_expr PARAMS ((cpp_reader *));\n \n /* `struct directive' defines one #-directive, including how to handle it.  */\n \n@@ -1595,7 +1595,7 @@ do_if (pfile, keyword)\n      cpp_reader *pfile;\n      struct directive *keyword ATTRIBUTE_UNUSED;\n {\n-  HOST_WIDE_INT value = eval_if_expression (pfile);\n+  HOST_WIDEST_INT value = eval_if_expression (pfile);\n   conditional_skip (pfile, value == 0, T_IF, NULL_PTR);\n   return 0;\n }\n@@ -1631,7 +1631,7 @@ do_elif (pfile, keyword)\n   if (pfile->if_stack->if_succeeded)\n     skip_if_group (pfile);\n   else {\n-    HOST_WIDE_INT value = eval_if_expression (pfile);\n+    HOST_WIDEST_INT value = eval_if_expression (pfile);\n     if (value == 0)\n       skip_if_group (pfile);\n     else {\n@@ -1647,11 +1647,11 @@ do_elif (pfile, keyword)\n  * then parse the result as a C expression and return the value as an int.\n  */\n \n-static HOST_WIDE_INT\n+static HOST_WIDEST_INT\n eval_if_expression (pfile)\n      cpp_reader *pfile;\n {\n-  HOST_WIDE_INT value;\n+  HOST_WIDEST_INT value;\n   long old_written = CPP_WRITTEN (pfile);\n \n   pfile->pcp_inside_if = 1;"}, {"sha": "895aa8755210a645f184db57fdc5abd592f17602", "filename": "gcc/cpplib.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e915b770d9eca0fdfd5dd363daf70be12e543579/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e915b770d9eca0fdfd5dd363daf70be12e543579/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=e915b770d9eca0fdfd5dd363daf70be12e543579", "patch": "@@ -666,13 +666,6 @@ struct if_stack {\n };\n typedef struct if_stack IF_STACK_FRAME;\n \n-/* Find the largest host integer type and set its size and type.\n-   Watch out: on some crazy hosts `long' is shorter than `int'.  */\n-\n-#ifndef HOST_WIDE_INT\n-#include \"machmode.h\"\n-#endif\n-\n extern void cpp_buf_line_and_col PARAMS((cpp_buffer *, long *, long *));\n extern cpp_buffer* cpp_file_buffer PARAMS((cpp_reader *));\n extern void cpp_define PARAMS ((cpp_reader *, unsigned char *));\n@@ -699,7 +692,7 @@ extern void cpp_perror_with_name PROTO ((cpp_reader *, const char *));\n extern void v_cpp_message PROTO ((cpp_reader *, int, const char *, va_list));\n \n extern void cpp_grow_buffer PARAMS ((cpp_reader *, long));\n-extern HOST_WIDE_INT cpp_parse_escape PARAMS ((cpp_reader *, char **, HOST_WIDE_INT));\n+extern HOST_WIDEST_INT cpp_parse_escape PARAMS ((cpp_reader *, char **, HOST_WIDEST_INT));\n extern cpp_buffer *cpp_push_buffer PARAMS ((cpp_reader *,\n \t\t\t\t\t    unsigned char *, long));\n extern cpp_buffer *cpp_pop_buffer PARAMS ((cpp_reader *));"}]}