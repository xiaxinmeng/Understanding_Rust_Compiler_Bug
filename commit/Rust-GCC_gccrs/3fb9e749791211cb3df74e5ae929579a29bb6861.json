{"sha": "3fb9e749791211cb3df74e5ae929579a29bb6861", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZiOWU3NDk3OTEyMTFjYjNkZjc0ZTVhZTkyOTU3OWEyOWJiNjg2MQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-05-07T21:11:47Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-05-07T21:11:47Z"}, "message": "h8300.h (OK_FOR_U): (const (plus (symbol_ref) (const_int))) is a valid U operand if...\n\n        * h8300/h8300.h (OK_FOR_U): (const (plus (symbol_ref) (const_int)))\n        is a valid U operand if SYMBOL_REF_FLAG is set on the\n        SYMBOL_REF.\n        * h8300/h8300.md (memory btst patterns): New patterns.\n\nFrom-SVN: r11954", "tree": {"sha": "3c0182c8718b2bd3906b636fd0e89a11f464680f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c0182c8718b2bd3906b636fd0e89a11f464680f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fb9e749791211cb3df74e5ae929579a29bb6861", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fb9e749791211cb3df74e5ae929579a29bb6861", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fb9e749791211cb3df74e5ae929579a29bb6861", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fb9e749791211cb3df74e5ae929579a29bb6861/comments", "author": null, "committer": null, "parents": [{"sha": "fabdc32d072ff720c1afb2ef673060b50dcf8755", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fabdc32d072ff720c1afb2ef673060b50dcf8755", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fabdc32d072ff720c1afb2ef673060b50dcf8755"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "069797f7fe191d841d2867c7e7152a964d253d2c", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fb9e749791211cb3df74e5ae929579a29bb6861/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fb9e749791211cb3df74e5ae929579a29bb6861/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=3fb9e749791211cb3df74e5ae929579a29bb6861", "patch": "@@ -791,7 +791,12 @@ struct rtx_def *function_arg();\n    || (GET_CODE (OP) == MEM && GET_CODE (XEXP (OP, 0)) == REG \\\n        && REG_OK_FOR_BASE_P (XEXP (OP, 0)))  \\\n    || (GET_CODE (OP) == MEM && GET_CODE (XEXP (OP, 0)) == SYMBOL_REF \\\n-       && SYMBOL_REF_FLAG (XEXP (OP, 0))))\n+       && SYMBOL_REF_FLAG (XEXP (OP, 0))) \\\n+   || (GET_CODE (OP) == MEM && GET_CODE (XEXP (OP, 0)) == CONST \\\n+       && GET_CODE (XEXP (XEXP (OP, 0), 0)) == PLUS \\\n+       && GET_CODE (XEXP (XEXP (XEXP (OP, 0), 0), 0)) == SYMBOL_REF \\\n+       && SYMBOL_REF_FLAG (XEXP (XEXP (XEXP (OP, 0), 0), 0)) \\\n+       && GET_CODE (XEXP (XEXP (XEXP (OP, 0), 0), 1)) == CONST_INT))\n  \n #define EXTRA_CONSTRAINT(OP, C) \\\n  ((C) == 'U' ? OK_FOR_U (OP) : 0)"}, {"sha": "059a91fe2a82dd8cc52bcd8e574e19a59b689f21", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fb9e749791211cb3df74e5ae929579a29bb6861/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fb9e749791211cb3df74e5ae929579a29bb6861/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=3fb9e749791211cb3df74e5ae929579a29bb6861", "patch": "@@ -452,6 +452,33 @@\n ;; TEST INSTRUCTIONS\n ;; ----------------------------------------------------------------------\n \n+(define_insn \"\"\n+  [(set (cc0) (zero_extract:QI (match_operand:QI 0 \"memory_operand\" \"U\")\n+\t\t\t       (const_int 1)\n+\t\t\t       (match_operand:QI 1 \"const_int_operand\" \"n\")))]\n+  \"\"\n+  \"btst\t%Z1,%R0\"\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"cc\" \"set_zn_c0\")])\n+\n+(define_insn \"\"\n+  [(set (cc0) (zero_extract:HI (match_operand:QI 0 \"memory_operand\" \"U\")\n+\t\t\t       (const_int 1)\n+\t\t\t       (match_operand:QI 1 \"const_int_operand\" \"n\")))]\n+  \"\"\n+  \"btst\t%Z1,%Y0\"\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"cc\" \"set_zn_c0\")])\n+\n+(define_insn \"\"\n+  [(set (cc0) (zero_extract:SI (match_operand:QI 0 \"memory_operand\" \"U\")\n+\t\t\t       (const_int 1)\n+\t\t\t       (match_operand:QI 1 \"const_int_operand\" \"n\")))]\n+  \"\"\n+  \"btst\t%Z1,%Y0\"\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"cc\" \"set_zn_c0\")])\n+\n (define_insn \"\"\n   [(set (cc0) (zero_extract:QI (match_operand:HI 0 \"register_operand\" \"r\")\n \t\t\t       (const_int 1)"}]}