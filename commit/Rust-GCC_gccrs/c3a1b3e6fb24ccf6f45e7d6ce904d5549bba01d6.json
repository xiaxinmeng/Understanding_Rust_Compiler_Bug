{"sha": "c3a1b3e6fb24ccf6f45e7d6ce904d5549bba01d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNhMWIzZTZmYjI0Y2NmNmY0NWU3ZDZjZTkwNGQ1NTQ5YmJhMDFkNg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-12-06T02:42:30Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-12-07T17:44:18Z"}, "message": "compiler: type of string index expression is byte\n\nTo make this work from the do_type method, add \"byte\" and \"rune\" to\nthe list of known integer types, and look them up that way rather than\nvia gogo->lookup_global.\n\nFor golang/go#8745\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/275653", "tree": {"sha": "2676c757088d56745e0de9668d6f99c55c6c9e1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2676c757088d56745e0de9668d6f99c55c6c9e1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3a1b3e6fb24ccf6f45e7d6ce904d5549bba01d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3a1b3e6fb24ccf6f45e7d6ce904d5549bba01d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3a1b3e6fb24ccf6f45e7d6ce904d5549bba01d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3a1b3e6fb24ccf6f45e7d6ce904d5549bba01d6/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7482d5a3acb7a8a5564f5cddc4f9d2ebbaea75e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7482d5a3acb7a8a5564f5cddc4f9d2ebbaea75e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7482d5a3acb7a8a5564f5cddc4f9d2ebbaea75e4"}], "stats": {"total": 78, "additions": 53, "deletions": 25}, "files": [{"sha": "711353d2550d6d590e6300065e3e4e804d304be0", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a1b3e6fb24ccf6f45e7d6ce904d5549bba01d6/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a1b3e6fb24ccf6f45e7d6ce904d5549bba01d6/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=c3a1b3e6fb24ccf6f45e7d6ce904d5549bba01d6", "patch": "@@ -1,4 +1,4 @@\n-2184750d74d37580486e90df1284c07fdee91670\n+81687fccc568a088fee8f627ddde599e17c648c2\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "6d484d9a33995e1de0a6ba4a4452995b19410dad", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a1b3e6fb24ccf6f45e7d6ce904d5549bba01d6/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a1b3e6fb24ccf6f45e7d6ce904d5549bba01d6/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=c3a1b3e6fb24ccf6f45e7d6ce904d5549bba01d6", "patch": "@@ -13468,7 +13468,7 @@ Type*\n String_index_expression::do_type()\n {\n   if (this->end_ == NULL)\n-    return Type::lookup_integer_type(\"uint8\");\n+    return Type::lookup_integer_type(\"byte\");\n   else\n     return this->string_->type();\n }\n@@ -14021,7 +14021,7 @@ Field_reference_expression::do_lower(Gogo* gogo, Named_object* function,\n \n   Expression* length_expr = Expression::make_integer_ul(s.length(), NULL, loc);\n \n-  Type* byte_type = gogo->lookup_global(\"byte\")->type_value();\n+  Type* byte_type = Type::lookup_integer_type(\"byte\");\n   Array_type* array_type = Type::make_array_type(byte_type, length_expr);\n   array_type->set_is_array_incomparable();\n "}, {"sha": "e31a038dbd3ebb60d1e861d0d92bec2e1b38c0aa", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a1b3e6fb24ccf6f45e7d6ce904d5549bba01d6/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a1b3e6fb24ccf6f45e7d6ce904d5549bba01d6/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=c3a1b3e6fb24ccf6f45e7d6ce904d5549bba01d6", "patch": "@@ -117,17 +117,11 @@ Gogo::Gogo(Backend* backend, Linemap* linemap, int, int pointer_size)\n \n   // \"byte\" is an alias for \"uint8\".\n   uint8_type->integer_type()->set_is_byte();\n-  Named_object* byte_type = Named_object::make_type(\"byte\", NULL, uint8_type,\n-\t\t\t\t\t\t    loc);\n-  byte_type->type_value()->set_is_alias();\n-  this->add_named_type(byte_type->type_value());\n+  this->add_named_type(Type::make_integer_type_alias(\"byte\", uint8_type));\n \n   // \"rune\" is an alias for \"int32\".\n   int32_type->integer_type()->set_is_rune();\n-  Named_object* rune_type = Named_object::make_type(\"rune\", NULL, int32_type,\n-\t\t\t\t\t\t    loc);\n-  rune_type->type_value()->set_is_alias();\n-  this->add_named_type(rune_type->type_value());\n+  this->add_named_type(Type::make_integer_type_alias(\"rune\", int32_type));\n \n   this->add_named_type(Type::make_named_bool_type());\n \n@@ -765,7 +759,7 @@ Gogo::register_gc_vars(const std::vector<Named_object*>& var_gc,\n \n   Type* pvt = Type::make_pointer_type(Type::make_void_type());\n   Type* uintptr_type = Type::lookup_integer_type(\"uintptr\");\n-  Type* byte_type = this->lookup_global(\"byte\")->type_value();\n+  Type* byte_type = Type::lookup_integer_type(\"byte\");\n   Type* pointer_byte_type = Type::make_pointer_type(byte_type);\n   Struct_type* root_type =\n     Type::make_builtin_struct_type(4,"}, {"sha": "af82f36bc434c02f8dce48342b68db6cdb8781a4", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a1b3e6fb24ccf6f45e7d6ce904d5549bba01d6/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a1b3e6fb24ccf6f45e7d6ce904d5549bba01d6/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=c3a1b3e6fb24ccf6f45e7d6ce904d5549bba01d6", "patch": "@@ -6341,7 +6341,7 @@ For_range_statement::do_lower(Gogo* gogo, Named_object*, Block* enclosing,\n   else if (range_type->is_string_type())\n     {\n       index_type = Type::lookup_integer_type(\"int\");\n-      value_type = gogo->lookup_global(\"rune\")->type_value();\n+      value_type = Type::lookup_integer_type(\"rune\");\n     }\n   else if (range_type->map_type() != NULL)\n     {\n@@ -6812,7 +6812,7 @@ For_range_statement::lower_range_string(Gogo* gogo,\n     rune_type = value_temp->type();\n   else\n     {\n-      rune_type = gogo->lookup_global(\"rune\")->type_value();\n+      rune_type = Type::lookup_integer_type(\"rune\");\n       value_temp = Statement::make_temporary(rune_type, NULL, loc);\n       init->add_statement(value_temp);\n     }"}, {"sha": "d2741f6db58c0c890548cd23056efdae5aaaa967", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a1b3e6fb24ccf6f45e7d6ce904d5549bba01d6/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a1b3e6fb24ccf6f45e7d6ce904d5549bba01d6/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=c3a1b3e6fb24ccf6f45e7d6ce904d5549bba01d6", "patch": "@@ -2764,7 +2764,7 @@ class Ptrmask\n   symname() const;\n \n   Expression*\n-  constructor(Gogo* gogo) const;\n+  constructor() const;\n \n  private:\n   void\n@@ -2959,10 +2959,10 @@ Ptrmask::symname() const\n // initialize the runtime ptrmask value.\n \n Expression*\n-Ptrmask::constructor(Gogo* gogo) const\n+Ptrmask::constructor() const\n {\n   Location bloc = Linemap::predeclared_location();\n-  Type* byte_type = gogo->lookup_global(\"byte\")->type_value();\n+  Type* byte_type = Type::lookup_integer_type(\"byte\");\n   Expression* len = Expression::make_integer_ul(this->bits_.size(), NULL,\n \t\t\t\t\t\tbloc);\n   Array_type* at = Type::make_array_type(byte_type, len);\n@@ -3007,7 +3007,7 @@ Type::gc_ptrmask_var(Gogo* gogo, int64_t ptrsize, int64_t ptrdata)\n       return ins.first->second;\n     }\n \n-  Expression* val = ptrmask.constructor(gogo);\n+  Expression* val = ptrmask.constructor();\n   Translate_context context(gogo, NULL, NULL, NULL);\n   context.set_is_const();\n   Bexpression* bval = val->get_backend(&context);\n@@ -3046,7 +3046,7 @@ class GCProg\n   end();\n \n   Expression*\n-  constructor(Gogo* gogo) const;\n+  constructor() const;\n \n  private:\n   void\n@@ -3357,7 +3357,7 @@ GCProg::end()\n // Return an Expression for the bytes in a GC program.\n \n Expression*\n-GCProg::constructor(Gogo* gogo) const\n+GCProg::constructor() const\n {\n   Location bloc = Linemap::predeclared_location();\n \n@@ -3367,7 +3367,7 @@ GCProg::constructor(Gogo* gogo) const\n \n   Type* uint32_type = Type::lookup_integer_type(\"uint32\");\n \n-  Type* byte_type = gogo->lookup_global(\"byte\")->type_value();\n+  Type* byte_type = Type::lookup_integer_type(\"byte\");\n   Expression* len = Expression::make_integer_ul(this->bytes_.size(), NULL,\n \t\t\t\t\t\tbloc);\n   Array_type* at = Type::make_array_type(byte_type, len);\n@@ -3414,7 +3414,7 @@ Type::gcprog_constructor(Gogo* gogo, int64_t ptrsize, int64_t ptrdata)\n \n   go_assert(offset >= ptrdata && offset <= type_size);\n \n-  return prog.constructor(gogo);\n+  return prog.constructor();\n }\n \n // Return a composite literal for the uncommon type information for\n@@ -4141,6 +4141,23 @@ Integer_type::create_abstract_character_type()\n   return abstract_type;\n }\n \n+// Create an alias to an integer type.  This is used for byte and rune.\n+\n+Named_type*\n+Integer_type::create_integer_type_alias(const char* name,\n+\t\t\t\t\tNamed_type* real_type)\n+{\n+  std::string sname(name);\n+  Named_object* no = Named_object::make_type(sname, NULL, real_type,\n+\t\t\t\t\t     Linemap::predeclared_location());\n+  Named_type* nt = no->type_value();\n+  nt->set_is_alias();\n+  std::pair<Named_integer_types::iterator, bool> ins =\n+    Integer_type::named_integer_types.insert(std::make_pair(sname, nt));\n+  go_assert(ins.second);\n+  return nt;\n+}\n+\n // Integer type compatibility.\n \n bool\n@@ -4218,6 +4235,14 @@ Type::make_abstract_character_type()\n   return Integer_type::create_abstract_character_type();\n }\n \n+// Make an integer type alias.\n+\n+Named_type*\n+Type::make_integer_type_alias(const char* name, Named_type* real_type)\n+{\n+  return Integer_type::create_integer_type_alias(name, real_type);\n+}\n+\n // Look up an integer type.\n \n Named_type*\n@@ -4466,7 +4491,7 @@ String_type::do_get_backend(Gogo* gogo)\n     {\n       std::vector<Backend::Btyped_identifier> fields(2);\n \n-      Type* b = gogo->lookup_global(\"byte\")->type_value();\n+      Type* b = Type::lookup_integer_type(\"byte\");\n       Type* pb = Type::make_pointer_type(b);\n \n       // We aren't going to get back to this field to finish the"}, {"sha": "b7dd391d321ccccc3264e3b895aab15d88033aa7", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a1b3e6fb24ccf6f45e7d6ce904d5549bba01d6/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a1b3e6fb24ccf6f45e7d6ce904d5549bba01d6/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=c3a1b3e6fb24ccf6f45e7d6ce904d5549bba01d6", "patch": "@@ -462,6 +462,10 @@ class Type\n   make_integer_type(const char* name, bool is_unsigned, int bits,\n \t\t    int runtime_type_kind);\n \n+  // Make a named integer type alias.  This is used for byte and rune.\n+  static Named_type*\n+  make_integer_type_alias(const char* name, Named_type* real_type);\n+\n   // Look up a named integer type.\n   static Named_type*\n   lookup_integer_type(const char* name);\n@@ -1743,6 +1747,10 @@ class Integer_type : public Type\n   static Integer_type*\n   create_abstract_character_type();\n \n+  // Create an alias to an integer type.\n+  static Named_type*\n+  create_integer_type_alias(const char* name, Named_type* real_type);\n+\n   // Whether this is an abstract integer type.\n   bool\n   is_abstract() const"}, {"sha": "ac1f0a1eff999c7f6de9fe19e9b2fd33b82f9aff", "filename": "gcc/go/gofrontend/wb.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a1b3e6fb24ccf6f45e7d6ce904d5549bba01d6/gcc%2Fgo%2Fgofrontend%2Fwb.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a1b3e6fb24ccf6f45e7d6ce904d5549bba01d6/gcc%2Fgo%2Fgofrontend%2Fwb.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fwb.cc?ref=c3a1b3e6fb24ccf6f45e7d6ce904d5549bba01d6", "patch": "@@ -683,8 +683,9 @@ Gogo::write_barrier_variable()\n       Location bloc = Linemap::predeclared_location();\n \n       Type* bool_type = Type::lookup_bool_type();\n-      Array_type* pad_type = Type::make_array_type(this->lookup_global(\"byte\")->type_value(),\n-\t\t\t\t\t\t   Expression::make_integer_ul(3, NULL, bloc));\n+      Array_type* pad_type =\n+\tType::make_array_type(Type::lookup_integer_type(\"byte\"),\n+\t\t\t      Expression::make_integer_ul(3, NULL, bloc));\n       Type* uint64_type = Type::lookup_integer_type(\"uint64\");\n       Type* wb_type = Type::make_builtin_struct_type(5,\n \t\t\t\t\t\t     \"enabled\", bool_type,"}]}