{"sha": "bfc07071e825852049b5d957aaf55d24c22ba37d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZjMDcwNzFlODI1ODUyMDQ5YjVkOTU3YWFmNTVkMjRjMjJiYTM3ZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-14T09:34:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-14T09:34:49Z"}, "message": "[multiple changes]\n\n2010-06-14  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_res.adb: Minor reformatting\n\n2010-06-14  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem.adb: New version of unit traversal.\n\n\t* sem_elab.adb (Check_Internal_Call): Do not place a call appearing\n\twithin a generic unit in the table of delayed calls.\n\nFrom-SVN: r160718", "tree": {"sha": "256269bf710d322f23b5a67d6c31fbaed31d4c9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/256269bf710d322f23b5a67d6c31fbaed31d4c9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfc07071e825852049b5d957aaf55d24c22ba37d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfc07071e825852049b5d957aaf55d24c22ba37d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfc07071e825852049b5d957aaf55d24c22ba37d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfc07071e825852049b5d957aaf55d24c22ba37d/comments", "author": null, "committer": null, "parents": [{"sha": "eb23d93aceeebe41ff382a331e70b5f865d43251", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb23d93aceeebe41ff382a331e70b5f865d43251", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb23d93aceeebe41ff382a331e70b5f865d43251"}], "stats": {"total": 297, "additions": 186, "deletions": 111}, "files": [{"sha": "85fd581b6876559f6d10afb4225b7f789ec3bfa7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfc07071e825852049b5d957aaf55d24c22ba37d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfc07071e825852049b5d957aaf55d24c22ba37d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bfc07071e825852049b5d957aaf55d24c22ba37d", "patch": "@@ -1,3 +1,14 @@\n+2010-06-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_res.adb: Minor reformatting\n+\n+2010-06-14  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem.adb: New version of unit traversal.\n+\n+\t* sem_elab.adb (Check_Internal_Call): Do not place a call appearing\n+\twithin a generic unit in the table of delayed calls.\n+\n 2010-06-14  Robert Dewar  <dewar@adacore.com>\n \n \t* gnatcmd.adb, sem_util.adb, exp_ch3.adb: Minor reformatting"}, {"sha": "2dd4c3a13d1ce0c661958704e32d3df8096ecfda", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 168, "deletions": 110, "changes": 278, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfc07071e825852049b5d957aaf55d24c22ba37d/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfc07071e825852049b5d957aaf55d24c22ba37d/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=bfc07071e825852049b5d957aaf55d24c22ba37d", "patch": "@@ -1517,6 +1517,9 @@ package body Sem is\n    procedure Walk_Library_Items is\n       type Unit_Number_Set is array (Main_Unit .. Last_Unit) of Boolean;\n       pragma Pack (Unit_Number_Set);\n+\n+      Main_CU : constant Node_Id := Cunit (Main_Unit);\n+\n       Seen, Done : Unit_Number_Set := (others => False);\n       --  Seen (X) is True after we have seen unit X in the walk. This is used\n       --  to prevent processing the same unit more than once. Done (X) is True\n@@ -1537,6 +1540,17 @@ package body Sem is\n       --  this unit. If it's an instance body, do the spec first. If it is\n       --  an instance spec, do the body last.\n \n+      procedure Do_Withed_Unit (Withed_Unit : Node_Id);\n+      --  Apply Do_Unit_And_Dependents to a unit in a context clause.\n+\n+      procedure Process_Bodies_In_Context (Comp : Node_Id);\n+      --  The main unit and its spec may depend on bodies that contain generics\n+      --  that are instantiated in them. Iterate through the corresponding\n+      --  contexts before processing main (spec/body) itself, to process bodies\n+      --  that may be present, together with their  context. The spec of main\n+      --  is processed wherever it appears in the list of units, while the body\n+      --  is processed as the last unit in the list.\n+\n       ---------------\n       -- Do_Action --\n       ---------------\n@@ -1565,8 +1579,8 @@ package body Sem is\n \n             when N_Package_Body  =>\n \n-               --  Package bodies are processed immediately after the\n-               --  corresponding spec.\n+               --  Package bodies are processed separately if the main\n+               --  unit depends on them.\n \n                null;\n \n@@ -1622,6 +1636,7 @@ package body Sem is\n                               (Unit (Withed_Unit),\n                                  N_Generic_Package_Declaration,\n                                  N_Package_Body,\n+                                 N_Package_Renaming_Declaration,\n                                  N_Subprogram_Body)\n                      then\n                         Write_Unit_Name\n@@ -1647,12 +1662,14 @@ package body Sem is\n                   Write_Unit_Info (Unit_Num, Item, Withs => True);\n                end if;\n \n-               --  Main unit should come last (except in the case where we\n+               --  Main unit should come last, except in the case where we\n                --  skipped System_Aux_Id, in which case we missed the things it\n-               --  depends on).\n+               --  depends on, and in the case of parent bodies if present.\n \n                pragma Assert\n-                 (not Done (Main_Unit) or else Present (System_Aux_Id));\n+                 (not Done (Main_Unit)\n+                  or else Present (System_Aux_Id)\n+                  or else Nkind (Item) = N_Package_Body);\n \n                --  We shouldn't do the same thing twice\n \n@@ -1677,6 +1694,15 @@ package body Sem is\n          Action (Item);\n       end Do_Action;\n \n+      --------------------\n+      -- Do_Withed_Unit --\n+      --------------------\n+\n+      procedure Do_Withed_Unit (Withed_Unit : Node_Id) is\n+      begin\n+         Do_Unit_And_Dependents (Withed_Unit, Unit (Withed_Unit));\n+      end Do_Withed_Unit;\n+\n       ----------------------------\n       -- Do_Unit_And_Dependents --\n       ----------------------------\n@@ -1685,26 +1711,6 @@ package body Sem is\n          Unit_Num : constant Unit_Number_Type :=\n                       Get_Cunit_Unit_Number (CU);\n \n-         procedure Do_Withed_Unit (Withed_Unit : Node_Id);\n-         --  Pass the buck to Do_Unit_And_Dependents\n-\n-         --------------------\n-         -- Do_Withed_Unit --\n-         --------------------\n-\n-         procedure Do_Withed_Unit (Withed_Unit : Node_Id) is\n-            Save_Do_Main : constant Boolean := Do_Main;\n-\n-         begin\n-            --  Do not process the main unit if coming from a with_clause,\n-            --  as would happen with a parent body that has a child spec\n-            --  in its context.\n-\n-            Do_Main := False;\n-            Do_Unit_And_Dependents (Withed_Unit, Unit (Withed_Unit));\n-            Do_Main := Save_Do_Main;\n-         end Do_Withed_Unit;\n-\n          procedure Do_Withed_Units is new Walk_Withs (Do_Withed_Unit);\n \n       --  Start of processing for Do_Unit_And_Dependents\n@@ -1716,103 +1722,111 @@ package body Sem is\n \n             Do_Withed_Units (CU, Include_Limited => False);\n \n-            --  Process the unit if it is a spec. If it is the main unit,\n-            --  process it only if we have done all other units.\n+            --  Process the unit if it is a spec or the the main unit, if\n+            --  it has no previous spec or we have done all other units.\n \n             if not Nkind_In (Item, N_Package_Body, N_Subprogram_Body)\n               or else Acts_As_Spec (CU)\n             then\n-               if CU = Cunit (Main_Unit) and then not Do_Main then\n+\n+               if CU = Cunit (Main_Unit)\n+                   and then not Do_Main\n+               then\n                   Seen (Unit_Num) := False;\n \n                else\n                   Seen (Unit_Num) := True;\n+\n+                  if CU = Library_Unit (Main_CU) then\n+                     Process_Bodies_In_Context (CU);\n+                  end if;\n+\n                   Do_Action (CU, Item);\n                   Done (Unit_Num) := True;\n                end if;\n             end if;\n          end if;\n+      end Do_Unit_And_Dependents;\n \n-         --  Process bodies. The spec, if present, has been processed already.\n-         --  A body appears if it is the main, or the body of a spec that is\n-         --  in the context of the main unit, and that is instantiated, or else\n-         --  contains a generic that is instantiated, or a subprogram that is\n-         --  or a subprogram that is inlined in the main unit.\n-\n-         --  We exclude bodies that may appear in a circular dependency list,\n-         --  where spec A depends on spec B and body of B depends on spec A.\n-         --  This is not an elaboration issue, but body B must be excluded\n-         --  from the processing.\n+      -------------------------------\n+      -- Process_Bodies_In_Context --\n+      -------------------------------\n \n-         declare\n-            Body_Unit :  Node_Id := Empty;\n-            Body_Num  : Unit_Number_Type;\n+      procedure Process_Bodies_In_Context (Comp : Node_Id) is\n+         Body_CU : Node_Id;\n+         Body_U  : Unit_Number_Type;\n+         Clause  : Node_Id;\n+         Spec    : Node_Id;\n \n-            function Circular_Dependence (B : Node_Id) return Boolean;\n-            --  Check whether this body depends on a spec that is pending,\n-            --  that is to say has been seen but not processed yet.\n+         procedure Do_Withed_Units is new Walk_Withs (Do_Withed_Unit);\n \n-            -------------------------\n-            -- Circular_Dependence --\n-            -------------------------\n+         function Depends_On_Main (CU : Node_Id) return Boolean;\n+         --  The body of a unit that is withed by the spec of the main\n+         --  unit may in turn have a with_clause on that spec. In that\n+         --  case do not traverse the body, to prevent loops.\n \n-            function Circular_Dependence (B : Node_Id) return Boolean is\n-               Item : Node_Id;\n-               UN   : Unit_Number_Type;\n+         ---------------------\n+         -- Depends_On_Main --\n+         ---------------------\n \n-            begin\n-               Item := First (Context_Items (B));\n-               while Present (Item) loop\n-                  if Nkind (Item) = N_With_Clause then\n-                     UN := Get_Cunit_Unit_Number (Library_Unit (Item));\n+         function Depends_On_Main (CU : Node_Id) return Boolean is\n+            CL : Node_Id;\n \n-                     if Seen (UN)\n-                       and then not Done (UN)\n-                     then\n-                        return True;\n-                     end if;\n-                  end if;\n+         begin\n+            CL := First (Context_Items (CU));\n \n-                  Next (Item);\n-               end loop;\n+            --  Problem does not arise with main subprograms.\n \n+            if Nkind (Unit (Main_CU)) /= N_Package_Body then\n                return False;\n-            end Circular_Dependence;\n+            end if;\n \n-         begin\n-            if Nkind (Item) = N_Package_Declaration then\n-               Body_Unit := Library_Unit (CU);\n+            while Present (CL) loop\n+               if Nkind (CL) = N_With_Clause\n+                 and then Library_Unit (CL) = Library_Unit (Main_CU)\n+               then\n+                  return True;\n+               end if;\n \n-            elsif Nkind_In (Item, N_Package_Body, N_Subprogram_Body) then\n-               Body_Unit := CU;\n-            end if;\n+               Next (CL);\n+            end loop;\n \n-            if Present (Body_Unit)\n+            return False;\n+         end Depends_On_Main;\n \n-              --  Since specs and bodies are not done at the same time,\n-              --  guard against listing a body more than once. Bodies are\n-              --  only processed when the main unit is being processed,\n-              --  after all other units in the list. The DEC extension\n-              --  to System is excluded because of circularities.\n+      --  Start of processing for Process_Bodies_In_Context\n \n-              and then not Seen (Get_Cunit_Unit_Number (Body_Unit))\n-              and then\n-                (No (System_Aux_Id)\n-                   or else Unit_Num /= Get_Source_Unit (System_Aux_Id))\n-              and then not Circular_Dependence (Body_Unit)\n-              and then Do_Main\n-            then\n-               Body_Num := Get_Cunit_Unit_Number (Body_Unit);\n-               Seen (Body_Num) := True;\n-               Do_Action (Body_Unit, Unit (Body_Unit));\n-               Done (Body_Num) := True;\n+      begin\n+         Clause := First (Context_Items (Comp));\n+         while Present (Clause) loop\n+            if Nkind (Clause) = N_With_Clause then\n+               Spec := Library_Unit (Clause);\n+               Body_CU := Library_Unit (Spec);\n+\n+               if Present (Body_CU)\n+                 and then Body_CU /= Cunit (Main_Unit)\n+                 and then Nkind (Unit (Body_CU)) /= N_Subprogram_Body\n+               then\n+                  Body_U := Get_Cunit_Unit_Number (Body_CU);\n+\n+                  if not Seen (Body_U)\n+                    and then not Depends_On_Main (Body_CU)\n+                  then\n+                     Seen (Body_U) := True;\n+                     Do_Withed_Units (Body_CU, Include_Limited => False);\n+                     Do_Action (Body_CU, Unit (Body_CU));\n+                     Done (Body_U) := True;\n+                  end if;\n+               end if;\n             end if;\n-         end;\n-      end Do_Unit_And_Dependents;\n+\n+            Next (Clause);\n+         end loop;\n+      end Process_Bodies_In_Context;\n \n       --  Local Declarations\n \n-      Cur : Elmt_Id;\n+      Cur     : Elmt_Id;\n \n    --  Start of processing for Walk_Library_Items\n \n@@ -1848,7 +1862,7 @@ package body Sem is\n          end;\n       end loop;\n \n-      --  Now traverse compilation units in order\n+      --  Now traverse compilation units (specs) in order\n \n       Cur := First_Elmt (Comp_Unit_List);\n       while Present (Cur) loop\n@@ -1861,15 +1875,37 @@ package body Sem is\n \n             case Nkind (N) is\n \n-               --  If it's a body, ignore it. Bodies appear in the list only\n-               --  because of inlining/instantiations, and they are processed\n-               --  immediately after the corresponding specs. The main unit is\n-               --  processed separately after all other units.\n+               --  If it is a subprogram body, process it if it has no\n+               --  separate spec.\n+\n+               --  If it's a package body, ignore it, unless it is a body\n+               --  created for an instance that is the main unit. In the\n+               --  case of subprograms, the body is the wrapper package. In\n+               --  case of a package, the original file carries the body,\n+               --  and the spec appears as a later entry in the units list.\n+\n+               --  Otherwise Bodies appear in the list only because of\n+               --  inlining/instantiations, and they are processed only\n+               --  if relevant to the main unit. The main unit itself\n+               --  is processed separately after all other specs.\n \n-               when N_Package_Body | N_Subprogram_Body =>\n-                  null;\n+               when N_Subprogram_Body =>\n+                  if Acts_As_Spec (N) then\n+                     Do_Unit_And_Dependents (CU, N);\n+                  end if;\n+\n+               when N_Package_Body =>\n+                  if CU = Main_CU\n+                    and then Nkind (Original_Node (Unit (Main_CU))) in\n+                                                  N_Generic_Instantiation\n+                    and then Present (Library_Unit (Main_CU))\n+                  then\n+                     Do_Unit_And_Dependents\n+                       (Library_Unit (Main_CU),\n+                        Unit (Library_Unit (Main_CU)));\n+                  end if;\n \n-               --  It's a spec, so just do it\n+               --  It's a spec, process it, and the units it depends on.\n \n                when others =>\n                   Do_Unit_And_Dependents (CU, N);\n@@ -1879,26 +1915,48 @@ package body Sem is\n          Next_Elmt (Cur);\n       end loop;\n \n+      --  Now process package bodies on which main depends, followed by\n+      --  bodies of parents, if present, and finally main itself.\n+\n       if not Done (Main_Unit) then\n          Do_Main := True;\n \n          declare\n-            Main_CU : constant Node_Id := Cunit (Main_Unit);\n+            Parent_CU : Node_Id;\n+            Body_CU   : Node_Id;\n+            Body_U    : Unit_Number_Type;\n+            Child     : Entity_Id;\n \n          begin\n-            --  If the main unit is an instantiation, the body appears before\n-            --  the instance spec, which is added later to the unit list. Do\n-            --  the spec if present, body will follow.\n+            Process_Bodies_In_Context (Main_CU);\n+\n+            --  If the main unit is a child unit, parent bodies may be present\n+            --  because they export instances or inlined subprograms. Check for\n+            --  presence of these, which are not present in context clauses.\n+\n+            if Is_Child_Unit (Cunit_Entity (Main_Unit)) then\n+               Child := Cunit_Entity (Main_Unit);\n+\n+               while Is_Child_Unit (Child) loop\n+                  Parent_CU :=\n+                    Cunit (Get_Cunit_Entity_Unit_Number (Scope (Child)));\n+                  Body_CU := Library_Unit (Parent_CU);\n+\n+                  if Present (Body_CU)\n+                    and then not Seen (Get_Cunit_Unit_Number (Body_CU))\n+                  then\n+                     Body_U := Get_Cunit_Unit_Number (Body_CU);\n+                     Seen (Body_U) := True;\n+                     Do_Action (Body_CU, Unit (Body_CU));\n+                     Done (Body_U) := True;\n+                  end if;\n \n-            if Nkind (Original_Node (Unit (Main_CU)))\n-                 in N_Generic_Instantiation\n-              and then Present (Library_Unit (Main_CU))\n-            then\n-               Do_Unit_And_Dependents\n-                 (Library_Unit (Main_CU), Unit (Library_Unit (Main_CU)));\n-            else\n-               Do_Unit_And_Dependents (Main_CU, Unit (Main_CU));\n+                  Child := Scope (Child);\n+               end loop;\n             end if;\n+\n+            Do_Action (Main_CU, Unit (Main_CU));\n+            Done (Main_Unit) := True;\n          end;\n       end if;\n "}, {"sha": "c0d91152a591fb64edd9e17a94cf86ba21a7eb29", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfc07071e825852049b5d957aaf55d24c22ba37d/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfc07071e825852049b5d957aaf55d24c22ba37d/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=bfc07071e825852049b5d957aaf55d24c22ba37d", "patch": "@@ -1891,6 +1891,11 @@ package body Sem_Elab is\n \n       elsif In_Task_Activation then\n          return;\n+\n+         --  Nothing to do if call is within a generic unit.\n+\n+      elsif Inside_A_Generic then\n+         return;\n       end if;\n \n       --  Delay this call if we are still delaying calls"}, {"sha": "9a0a0acf365ad43c5417707fb7c50897b07b0161", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfc07071e825852049b5d957aaf55d24c22ba37d/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfc07071e825852049b5d957aaf55d24c22ba37d/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=bfc07071e825852049b5d957aaf55d24c22ba37d", "patch": "@@ -1753,13 +1753,14 @@ package body Sem_Res is\n          then\n             Error_Msg_NE (\"ambiguous call to&\", Arg, Name (Arg));\n \n+            --  Could use comments on what is going on here ???\n+\n             Get_First_Interp (Name (Arg), I, It);\n             while Present (It.Nam) loop\n                Error_Msg_Sloc := Sloc (It.Nam);\n \n                if Nkind (Parent (It.Nam)) = N_Full_Type_Declaration then\n                   Error_Msg_N (\"interpretation (inherited) #!\", Arg);\n-\n                else\n                   Error_Msg_N (\"interpretation #!\", Arg);\n                end if;"}]}