{"sha": "3b84d61f446425ee51e583b1cf1540b7a5fe636e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I4NGQ2MWY0NDY0MjVlZTUxZTU4M2IxY2YxNTQwYjdhNWZlNjM2ZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-04-20T19:58:23Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-04-20T19:58:23Z"}, "message": "re PR target/48678 (unable to find a register to spill in class \u2018GENERAL_REGS\u2019)\n\n\tPR target/48678\n\t* config/i386/i386.md (insv): Change operand 0 constraint to\n\t\"register_operand\".  Change operand 1 and 2 constraint to\n\t\"const_int_operand\".  Expand to pinsr{b,w,d,q} * when appropriate.\n\t* config/i386/sse.md (sse4_1_pinsrb): Export.\n\t(sse2_pinsrw): Ditto.\n\t(sse4_1_pinsrd): Ditto.\n\t(sse4_1_pinsrq): Ditto.\n\t* config/i386/i386-protos.h (ix86_expand_pinsr): Add prototype.\n\t* config/i386/i386.c (ix86_expand_pinsr): New.\n\ntestsuite/ChangeLog:\n\n\tPR target/48678\n\t* gcc.target/i386/sse2-pinsrw.c: New test.\n\t* gcc.target/i386/avx-vpinsrw.c: Ditto.\n\t* gcc.target/i386/sse4_1-insvqi.c: Ditto.\n\t* gcc.target/i386/sse2-insvhi.c: Ditto.\n\t* gcc.target/i386/sse4_1-insvsi.c: Ditto.\n\t* gcc.target/i386/sse4_1-insvdi.c: Ditto.\n\nFrom-SVN: r172792", "tree": {"sha": "46d79f57ef007919fad0f34cd4bd91fc42100728", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46d79f57ef007919fad0f34cd4bd91fc42100728"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b84d61f446425ee51e583b1cf1540b7a5fe636e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b84d61f446425ee51e583b1cf1540b7a5fe636e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b84d61f446425ee51e583b1cf1540b7a5fe636e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b84d61f446425ee51e583b1cf1540b7a5fe636e/comments", "author": null, "committer": null, "parents": [{"sha": "8efcbecad561cde32bdefe8d08f096e6284ef928", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8efcbecad561cde32bdefe8d08f096e6284ef928", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8efcbecad561cde32bdefe8d08f096e6284ef928"}], "stats": {"total": 441, "additions": 429, "deletions": 12}, "files": [{"sha": "cc9014cde346add9a308af7a3bef151496a3e008", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b84d61f446425ee51e583b1cf1540b7a5fe636e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b84d61f446425ee51e583b1cf1540b7a5fe636e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b84d61f446425ee51e583b1cf1540b7a5fe636e", "patch": "@@ -1,3 +1,16 @@\n+2011-04-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/48678\n+\t* config/i386/i386.md (insv): Change operand 0 constraint to\n+\t\"register_operand\".  Change operand 1 and 2 constraint to\n+\t\"const_int_operand\".  Expand to pinsr{b,w,d,q} * when appropriate.\n+\t* config/i386/sse.md (sse4_1_pinsrb): Export.\n+\t(sse2_pinsrw): Ditto.\n+\t(sse4_1_pinsrd): Ditto.\n+\t(sse4_1_pinsrq): Ditto.\n+\t* config/i386/i386-protos.h (ix86_expand_pinsr): Add prototype.\n+\t* config/i386/i386.c (ix86_expand_pinsr): New.\n+\n 2011-04-20  Easwaran Raman  <eraman@google.com>\n \n \t* cfgexpand.c (add_alias_set_conflicts): Add conflicts with a variable\n@@ -72,8 +85,7 @@\n 2011-04-20  Kai Tietz  <ktietz@redhat.com>\n \n \t* fold-const.c (fold_binary_loc): Add handling for\n-\t(X & ~Y) | (~X & Y) and (X && !Y) | (!X && Y) optimization\n-\tto (X ^ Y).\n+\t(X & ~Y) | (~X & Y) and (X && !Y) | (!X && Y) optimization to (X ^ Y).\n \n 2011-04-20  Andrew Stubbs  <ams@codesourcery.com>\n \n@@ -246,11 +258,10 @@\n 2011-04-19  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* doc/install.texi (Configuration, --enable-threads): Remove mach.\n-\tAdd lynx, mipssde.\n-\tSort table.\n+\tAdd lynx, mipssde.  Sort table.\n \n 2011-04-19  Xinliang David Li  <davidxl@google.com>\n-\t\n+\n \t* ipa-cp.c (ipcp_update_profiling): Assert that scale_completement is\n \tnot negative.\n "}, {"sha": "d434d75879424e52eeb9e9844352eb97042f4775", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b84d61f446425ee51e583b1cf1540b7a5fe636e/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b84d61f446425ee51e583b1cf1540b7a5fe636e/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=3b84d61f446425ee51e583b1cf1540b7a5fe636e", "patch": "@@ -203,6 +203,7 @@ extern void ix86_expand_vector_extract (bool, rtx, rtx, int);\n extern void ix86_expand_reduc_v4sf (rtx (*)(rtx, rtx, rtx), rtx, rtx);\n \n extern void ix86_expand_vec_extract_even_odd (rtx, rtx, rtx, unsigned);\n+extern bool ix86_expand_pinsr (rtx *);\n \n /* In i386-c.c  */\n extern void ix86_target_macros (void);"}, {"sha": "7cb7c2db017244522607e80f069e9315243362ee", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b84d61f446425ee51e583b1cf1540b7a5fe636e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b84d61f446425ee51e583b1cf1540b7a5fe636e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3b84d61f446425ee51e583b1cf1540b7a5fe636e", "patch": "@@ -34105,6 +34105,88 @@ ix86_expand_vec_extract_even_odd (rtx targ, rtx op0, rtx op1, unsigned odd)\n   /* ... or we use the special-case patterns.  */\n   expand_vec_perm_even_odd_1 (&d, odd);\n }\n+\n+/* Expand an insert into a vector register through pinsr insn.\n+   Return true if successful.  */\n+\n+bool\n+ix86_expand_pinsr (rtx *operands)\n+{\n+  rtx dst = operands[0];\n+  rtx src = operands[3];\n+\n+  unsigned int size = INTVAL (operands[1]);\n+  unsigned int pos = INTVAL (operands[2]);\n+\n+  if (GET_CODE (dst) == SUBREG)\n+    {\n+      pos += SUBREG_BYTE (dst) * BITS_PER_UNIT;\n+      dst = SUBREG_REG (dst);\n+    }\n+\n+  if (GET_CODE (src) == SUBREG)\n+    src = SUBREG_REG (src);\n+\n+  switch (GET_MODE (dst))\n+    {\n+    case V16QImode:\n+    case V8HImode:\n+    case V4SImode:\n+    case V2DImode:\n+      {\n+\tenum machine_mode srcmode, dstmode;\n+\trtx (*pinsr)(rtx, rtx, rtx, rtx);\n+\n+\tsrcmode = mode_for_size (size, MODE_INT, 0);\n+\n+\tswitch (srcmode)\n+\t  {\n+\t  case QImode:\n+\t    if (!TARGET_SSE4_1)\n+\t      return false;\n+\t    dstmode = V16QImode;\n+\t    pinsr = gen_sse4_1_pinsrb;\n+\t    break;\n+\n+\t  case HImode:\n+\t    if (!TARGET_SSE2)\n+\t      return false;\n+\t    dstmode = V8HImode;\n+\t    pinsr = gen_sse2_pinsrw;\n+\t    break;\n+\n+\t  case SImode:\n+\t    if (!TARGET_SSE4_1)\n+\t      return false;\n+\t    dstmode = V4SImode;\n+\t    pinsr = gen_sse4_1_pinsrd;\n+\t    break;\n+\n+\t  case DImode:\n+\t    gcc_assert (TARGET_64BIT);\n+\t    if (!TARGET_SSE4_1)\n+\t      return false;\n+\t    dstmode = V2DImode;\n+\t    pinsr = gen_sse4_1_pinsrq;\n+\t    break;\n+\n+\t  default:\n+\t    return false;\n+\t  }\n+\n+\tdst = gen_lowpart (dstmode, dst);\n+\tsrc = gen_lowpart (srcmode, src);\n+\n+\tpos /= size;\n+\n+\temit_insn (pinsr (dst, dst, src, GEN_INT (1 << pos)));\n+\treturn true;\n+      }\n+\n+    default:\n+      return false;\n+    }\n+}\n \f\n /* This function returns the calling abi specific va_list type node.\n    It returns  the FNDECL specific va_list type.  */"}, {"sha": "a6956b8a31659fff785aa3df6106ed1f8c4d0088", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b84d61f446425ee51e583b1cf1540b7a5fe636e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b84d61f446425ee51e583b1cf1540b7a5fe636e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3b84d61f446425ee51e583b1cf1540b7a5fe636e", "patch": "@@ -10393,14 +10393,17 @@\n })\n \n (define_expand \"insv\"\n-  [(set (zero_extract (match_operand 0 \"ext_register_operand\" \"\")\n-\t\t      (match_operand 1 \"const8_operand\" \"\")\n-\t\t      (match_operand 2 \"const8_operand\" \"\"))\n+  [(set (zero_extract (match_operand 0 \"register_operand\" \"\")\n+\t\t      (match_operand 1 \"const_int_operand\" \"\")\n+\t\t      (match_operand 2 \"const_int_operand\" \"\"))\n         (match_operand 3 \"register_operand\" \"\"))]\n   \"\"\n {\n   rtx (*gen_mov_insv_1) (rtx, rtx);\n \n+  if (ix86_expand_pinsr (operands))\n+    DONE;\n+\n   /* Handle insertions to %ah et al.  */\n   if (INTVAL (operands[1]) != 8 || INTVAL (operands[2]) != 8)\n     FAIL;"}, {"sha": "498f9b904015c8c49dc9ff02c58b1b424692d67b", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b84d61f446425ee51e583b1cf1540b7a5fe636e/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b84d61f446425ee51e583b1cf1540b7a5fe636e/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=3b84d61f446425ee51e583b1cf1540b7a5fe636e", "patch": "@@ -6051,7 +6051,7 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"*sse4_1_pinsrb\"\n+(define_insn \"sse4_1_pinsrb\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=x,x,x,x\")\n \t(vec_merge:V16QI\n \t  (vec_duplicate:V16QI\n@@ -6083,7 +6083,7 @@\n    (set_attr \"prefix\" \"orig,orig,vex,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"*sse2_pinsrw\"\n+(define_insn \"sse2_pinsrw\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x,x,x,x\")\n \t(vec_merge:V8HI\n \t  (vec_duplicate:V8HI\n@@ -6117,7 +6117,7 @@\n    (set_attr \"mode\" \"TI\")])\n \n ;; It must come before sse2_loadld since it is preferred.\n-(define_insn \"*sse4_1_pinsrd\"\n+(define_insn \"sse4_1_pinsrd\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x\")\n \t(vec_merge:V4SI\n \t  (vec_duplicate:V4SI\n@@ -6145,7 +6145,7 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"*sse4_1_pinsrq\"\n+(define_insn \"sse4_1_pinsrq\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x\")\n \t(vec_merge:V2DI\n \t  (vec_duplicate:V2DI"}, {"sha": "becce40e7f51ba52fcce30b52399baff25b07137", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b84d61f446425ee51e583b1cf1540b7a5fe636e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b84d61f446425ee51e583b1cf1540b7a5fe636e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3b84d61f446425ee51e583b1cf1540b7a5fe636e", "patch": "@@ -1,3 +1,13 @@\n+2011-04-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/48678\n+\t* gcc.target/i386/sse2-pinsrw.c: New test.\n+\t* gcc.target/i386/avx-vpinsrw.c: Ditto.\n+\t* gcc.target/i386/sse4_1-insvqi.c: Ditto.\n+\t* gcc.target/i386/sse2-insvhi.c: Ditto.\n+\t* gcc.target/i386/sse4_1-insvsi.c: Ditto.\n+\t* gcc.target/i386/sse4_1-insvdi.c: Ditto.\n+\n 2011-04-20  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/template/const4.C: New."}, {"sha": "5e1a7cb91c922346a9cc6901690978147a59960e", "filename": "gcc/testsuite/gcc.target/i386/avx-vpinsrw-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b84d61f446425ee51e583b1cf1540b7a5fe636e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpinsrw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b84d61f446425ee51e583b1cf1540b7a5fe636e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpinsrw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpinsrw-1.c?ref=3b84d61f446425ee51e583b1cf1540b7a5fe636e", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-pinsrw.c\""}, {"sha": "03a287042f1294cff90bfe055f41b966d54d8543", "filename": "gcc/testsuite/gcc.target/i386/sse2-insvhi.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b84d61f446425ee51e583b1cf1540b7a5fe636e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-insvhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b84d61f446425ee51e583b1cf1540b7a5fe636e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-insvhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-insvhi.c?ref=3b84d61f446425ee51e583b1cf1540b7a5fe636e", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse2 } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse2_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <emmintrin.h>\n+#include <string.h>\n+\n+typedef short T __attribute__((may_alias));\n+struct S { __m128i d; };\n+\n+__m128i\n+__attribute__((noinline))\n+foo (__m128i y, short x)\n+{\n+  struct S s;\n+\n+  s.d = y;\n+  ((T *) &s.d)[1] = x;\n+  return s.d;\n+}\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned int i[4];\n+      unsigned short s[8];\n+    } res, val, tmp;\n+  unsigned short ins[4] = { 3, 4, 5, 6 };\n+\n+  val.i[0] = 0x35251505;\n+  val.i[1] = 0x75655545;\n+  val.i[2] = 0xB5A59585;\n+  val.i[3] = 0xF5E5D5C5;\n+\n+  res.x = foo (val.x, ins[3]);\n+\n+  tmp.x = val.x;\n+  tmp.s[1] = ins[3];\n+  if (memcmp (&tmp, &res, sizeof (tmp)))\n+    abort ();\n+}"}, {"sha": "16167437c6dca5fecd90f1bfa95e1ab834cec239", "filename": "gcc/testsuite/gcc.target/i386/sse2-pinsrw.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b84d61f446425ee51e583b1cf1540b7a5fe636e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-pinsrw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b84d61f446425ee51e583b1cf1540b7a5fe636e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-pinsrw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-pinsrw.c?ref=3b84d61f446425ee51e583b1cf1540b7a5fe636e", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse2 } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse2_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <emmintrin.h>\n+#include <string.h>\n+\n+#define msk0 0x00\n+#define msk1 0x01\n+#define msk2 0x02\n+#define msk3 0x03\n+#define msk4 0x04\n+#define msk5 0x05\n+#define msk6 0x06\n+#define msk7 0x07\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned int i[4];\n+      unsigned short s[8];\n+    } res [8], val, tmp;\n+  int masks[8];\n+  unsigned short ins[4] = { 3, 4, 5, 6 };\n+  int i;\n+\n+  val.i[0] = 0x35251505;\n+  val.i[1] = 0x75655545;\n+  val.i[2] = 0xB5A59585;\n+  val.i[3] = 0xF5E5D5C5;\n+\n+  /* Check pinsrw imm8, r32, xmm.  */\n+  res[0].x = _mm_insert_epi16 (val.x, ins[0], msk0);\n+  res[1].x = _mm_insert_epi16 (val.x, ins[0], msk1);\n+  res[2].x = _mm_insert_epi16 (val.x, ins[0], msk2);\n+  res[3].x = _mm_insert_epi16 (val.x, ins[0], msk3);\n+  res[4].x = _mm_insert_epi16 (val.x, ins[0], msk4);\n+  res[5].x = _mm_insert_epi16 (val.x, ins[0], msk5);\n+  res[6].x = _mm_insert_epi16 (val.x, ins[0], msk6);\n+  res[7].x = _mm_insert_epi16 (val.x, ins[0], msk7);\n+\n+  masks[0] = msk0;\n+  masks[1] = msk1;\n+  masks[2] = msk2;\n+  masks[3] = msk3;\n+  masks[4] = msk4;\n+  masks[5] = msk5;\n+  masks[6] = msk6;\n+  masks[7] = msk7;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      tmp.x = val.x;\n+      tmp.s[masks[i]] = ins[0];\n+      if (memcmp (&tmp, &res[i], sizeof (tmp)))\n+\tabort ();\n+    }\n+    \n+  /* Check pinsrw imm8, m16, xmm.  */\n+  for (i = 0; i < 8; i++)\n+    {\n+      res[i].x = _mm_insert_epi16 (val.x, ins[i % 2], msk0);\n+      masks[i] = msk0;\n+    }\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      tmp.x = val.x;\n+      tmp.s[masks[i]] = ins[i % 2];\n+      if (memcmp (&tmp, &res[i], sizeof (tmp)))\n+\tabort ();\n+    }\n+}"}, {"sha": "da090ba1582554798c1721479e7c126d515ec8ab", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-insvdi.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b84d61f446425ee51e583b1cf1540b7a5fe636e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-insvdi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b84d61f446425ee51e583b1cf1540b7a5fe636e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-insvdi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-insvdi.c?ref=3b84d61f446425ee51e583b1cf1540b7a5fe636e", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+#include <string.h>\n+\n+typedef long T __attribute__((may_alias));\n+struct S { __m128i d; };\n+\n+__m128i\n+__attribute__((noinline))\n+foo (__m128i y, long x)\n+{\n+  struct S s;\n+\n+  s.d = y;\n+  ((T *) &s.d)[1] = x;\n+  return s.d;\n+}\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned int i[4];\n+      unsigned long l[2];\n+    } res, val, tmp;\n+  unsigned long ins[4] = { 3, 4, 5, 6 };\n+\n+  val.i[0] = 0x35251505;\n+  val.i[1] = 0x75655545;\n+  val.i[2] = 0xB5A59585;\n+  val.i[3] = 0xF5E5D5C5;\n+\n+  res.x = foo (val.x, ins[3]);\n+\n+  tmp.x = val.x;\n+  tmp.l[1] = ins[3];\n+  if (memcmp (&tmp, &res, sizeof (tmp)))\n+    abort ();\n+}"}, {"sha": "784201e2d94f9d548f87caea762d1de0339d9d8a", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-insvqi.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b84d61f446425ee51e583b1cf1540b7a5fe636e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-insvqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b84d61f446425ee51e583b1cf1540b7a5fe636e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-insvqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-insvqi.c?ref=3b84d61f446425ee51e583b1cf1540b7a5fe636e", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+#include <string.h>\n+\n+typedef char T __attribute__((may_alias));\n+struct S { __m128i d; };\n+\n+__m128i\n+__attribute__((noinline))\n+foo (__m128i y, char x)\n+{\n+  struct S s;\n+\n+  s.d = y;\n+  ((T *) &s.d)[1] = x;\n+  return s.d;\n+}\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned int i[4];\n+      unsigned char c[16];\n+    } res, val, tmp;\n+  unsigned char ins[4] = { 3, 4, 5, 6 };\n+\n+  val.i[0] = 0x35251505;\n+  val.i[1] = 0x75655545;\n+  val.i[2] = 0xB5A59585;\n+  val.i[3] = 0xF5E5D5C5;\n+\n+  res.x = foo (val.x, ins[3]);\n+\n+  tmp.x = val.x;\n+  tmp.c[1] = ins[3];\n+  if (memcmp (&tmp, &res, sizeof (tmp)))\n+    abort ();\n+}"}, {"sha": "569b8f269c25098e39f5f570cc97043c6e7589e0", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-insvsi.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b84d61f446425ee51e583b1cf1540b7a5fe636e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-insvsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b84d61f446425ee51e583b1cf1540b7a5fe636e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-insvsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-insvsi.c?ref=3b84d61f446425ee51e583b1cf1540b7a5fe636e", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+#include <string.h>\n+\n+typedef int T __attribute__((may_alias));\n+struct S { __m128i d; };\n+\n+__m128i\n+__attribute__((noinline))\n+foo (__m128i y, int x)\n+{\n+  struct S s;\n+\n+  s.d = y;\n+  ((T *) &s.d)[1] = x;\n+  return s.d;\n+}\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned int i[4];\n+    } res, val, tmp;\n+  unsigned int ins[4] = { 3, 4, 5, 6 };\n+\n+  val.i[0] = 0x35251505;\n+  val.i[1] = 0x75655545;\n+  val.i[2] = 0xB5A59585;\n+  val.i[3] = 0xF5E5D5C5;\n+\n+  res.x = foo (val.x, ins[3]);\n+\n+  tmp.x = val.x;\n+  tmp.i[1] = ins[3];\n+  if (memcmp (&tmp, &res, sizeof (tmp)))\n+    abort ();\n+}"}]}