{"sha": "c859cda6073365c35159f9beeff323f431d4e475", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg1OWNkYTYwNzMzNjVjMzUxNTlmOWJlZWZmMzIzZjQzMWQ0ZTQ3NQ==", "commit": {"author": {"name": "Dale Johannesen", "email": "dalej@apple.com", "date": "2001-12-07T22:17:02Z"}, "committer": {"name": "Dale Johannesen", "email": "dalej@gcc.gnu.org", "date": "2001-12-07T22:17:02Z"}, "message": "darwin.h: Set MAX_LONG_TYPE_SIZE to 32.\n\n        * config/rs6000/darwin.h: Set MAX_LONG_TYPE_SIZE to 32.\n        * config/rs6000/rs6000.c (rs6000_emit_move): In Darwin-\n        specific codegen, eliminate a register copy.\n        (print_operand_address): Add support for Darwin's lo16(constant)\n        syntax.\n        (rs6000_machopic_legitimize_pic_address): Fix darwin-specific\n        generation of addresses within very large data objects.\n        (s8bit_cint_operand):  New.\n        * config/rs6000/rs6000.md: Remove \"iu\" reference for 750/7400.\n        Move \"mtjmpr\" to correct functional unit for 750/7400/7450.\n        Add imul2 and imul3 insn types for multiplication by 16- and\n        8-bit constants.\n        Change tablejump patterns to strongly discourage using LR\n        rather than CTR.\n        Add %lo16 patterns for Darwin loads and stores.\n\nFrom-SVN: r47775", "tree": {"sha": "891a39a30d88789638a6ff1c9f944a4342acd868", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/891a39a30d88789638a6ff1c9f944a4342acd868"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c859cda6073365c35159f9beeff323f431d4e475", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c859cda6073365c35159f9beeff323f431d4e475", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c859cda6073365c35159f9beeff323f431d4e475", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c859cda6073365c35159f9beeff323f431d4e475/comments", "author": null, "committer": null, "parents": [{"sha": "6246471c45860b5dacf85c14c6098c1d12d00662", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6246471c45860b5dacf85c14c6098c1d12d00662", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6246471c45860b5dacf85c14c6098c1d12d00662"}], "stats": {"total": 196, "additions": 165, "deletions": 31}, "files": [{"sha": "dab0a3d936329b7ca33f80294691bf8cbcf9fc83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c859cda6073365c35159f9beeff323f431d4e475/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c859cda6073365c35159f9beeff323f431d4e475/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c859cda6073365c35159f9beeff323f431d4e475", "patch": "@@ -1,3 +1,21 @@\n+2001-12-07  Dale Johannesen  <dalej@apple.com>\n+\n+        * config/rs6000/darwin.h: Set MAX_LONG_TYPE_SIZE to 32.\n+        * config/rs6000/rs6000.c (rs6000_emit_move): In Darwin-\n+        specific codegen, eliminate a register copy.\n+        (print_operand_address): Add support for Darwin's lo16(constant) \n+\tsyntax.\n+        (rs6000_machopic_legitimize_pic_address): Fix darwin-specific \n+        generation of addresses within very large data objects.\n+        (s8bit_cint_operand):  New.\n+        * config/rs6000/rs6000.md: Remove \"iu\" reference for 750/7400.\n+        Move \"mtjmpr\" to correct functional unit for 750/7400/7450.\n+        Add imul2 and imul3 insn types for multiplication by 16- and \n+\t8-bit constants.\n+        Change tablejump patterns to strongly discourage using LR \n+\trather than CTR.\n+\tAdd %lo16 patterns for Darwin loads and stores.\n+\n 2001-12-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* alpha.md: Use (HOST_WIDE_INT)1<<63 in lieu of 0x8000000000000000."}, {"sha": "768954507405d4808d69a56a648d51aad9beada6", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c859cda6073365c35159f9beeff323f431d4e475/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c859cda6073365c35159f9beeff323f431d4e475/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=c859cda6073365c35159f9beeff323f431d4e475", "patch": "@@ -219,3 +219,8 @@ Boston, MA 02111-1307, USA.  */\n /* XXX: Darwin supports neither .quad, or .llong, but it also doesn't\n    support 64 bit powerpc either, so this just keeps things happy.  */\n #define DOUBLE_INT_ASM_OP \"\\t.quad\\t\"\n+\n+/* Get HOST_WIDE_INT and CONST_INT to be 32 bits, for compile time\n+   space/speed.  */\n+#undef MAX_LONG_TYPE_SIZE\n+#define MAX_LONG_TYPE_SIZE 32"}, {"sha": "129122199b479ec8d0c52d0e34fc5368309abf07", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c859cda6073365c35159f9beeff323f431d4e475/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c859cda6073365c35159f9beeff323f431d4e475/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c859cda6073365c35159f9beeff323f431d4e475", "patch": "@@ -675,6 +675,18 @@ xer_operand (op, mode)\n   return 0;\n }\n \n+/* Return 1 if OP is a signed 8-bit constant.  Int multiplication\n+   by such constants completes more quickly. */\n+\n+int\n+s8bit_cint_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+{\n+  return ( GET_CODE (op) == CONST_INT\n+\t  && (INTVAL (op) >= -128 && INTVAL (op) <= 127));\n+}\n+\n /* Return 1 if OP is a constant that can fit in a D field.  */\n \n int\n@@ -2082,20 +2094,18 @@ rs6000_emit_move (dest, source, mode)\n \t  if (GET_CODE (operands[1]) != LABEL_REF)\n \t    emit_insn (gen_rtx_USE (VOIDmode, operands[1]));\n \n+#if TARGET_MACHO\n \t  /* Darwin uses a special PIC legitimizer.  */\n \t  if (DEFAULT_ABI == ABI_DARWIN && flag_pic)\n \t    {\n-#if TARGET_MACHO\n-\t      rtx temp_reg = ((reload_in_progress || reload_completed)\n-\t\t\t      ? operands[0] : NULL);\n-\n \t      operands[1] =\n \t\trs6000_machopic_legitimize_pic_address (operands[1], mode,\n-\t\t\t\t\t\t\ttemp_reg);\n-#endif\n-\t      emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+\t\t\t\t\t\t\toperands[0]);\n+\t      if (operands[0] != operands[1])\n+\t\temit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n \t      return;\n \t    }\n+#endif\n \n \t  /* If we are to limit the number of things we put in the TOC and\n \t     this is a symbol plus a constant we can add in one insn,\n@@ -5898,6 +5908,15 @@ print_operand_address (file, x)\n       output_addr_const (file, XEXP (x, 1));\n       fprintf (file, \"@l(%s)\", reg_names[ REGNO (XEXP (x, 0)) ]);\n     }\n+#endif\n+#if TARGET_MACHO\n+  else if (GET_CODE (x) == LO_SUM && GET_CODE (XEXP (x, 0)) == REG\n+           && CONSTANT_P (XEXP (x, 1)))\n+    {\n+      fprintf (file, \"lo16(\");\n+      output_addr_const (file, XEXP (x, 1));\n+      fprintf (file, \")(%s)\", reg_names[ REGNO (XEXP (x, 0)) ]);\n+    }\n #endif\n   else if (LEGITIMATE_CONSTANT_POOL_ADDRESS_P (x))\n     {\n@@ -10209,7 +10228,7 @@ machopic_output_stub (file, symb, stub)\n    position-independent addresses go into a reg.  This is REG if non\n    zero, otherwise we allocate register(s) as necessary.  */\n \n-#define SMALL_INT(X) ((unsigned) (INTVAL(X) + 0x4000) < 0x8000)\n+#define SMALL_INT(X) ((unsigned) (INTVAL(X) + 0x8000) < 0x10000)\n \n rtx\n rs6000_machopic_legitimize_pic_address (orig, mode, reg)\n@@ -10247,7 +10266,10 @@ rs6000_machopic_legitimize_pic_address (orig, mode, reg)\n \t  else if (! reload_in_progress && ! reload_completed)\n \t    offset = force_reg (Pmode, offset);\n \t  else\n-\t    abort ();\n+\t    {\n+ \t      rtx mem = force_const_mem (Pmode, orig);\n+\t      return machopic_legitimize_pic_address (mem, Pmode, reg);\n+\t    }\n \t}\n       return gen_rtx (PLUS, Pmode, base, offset);\n     }"}, {"sha": "0a0d998c8396bd4e44768bfc00ec072e078c5162", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 111, "deletions": 22, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c859cda6073365c35159f9beeff323f431d4e475/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c859cda6073365c35159f9beeff323f431d4e475/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=c859cda6073365c35159f9beeff323f431d4e475", "patch": "@@ -37,7 +37,7 @@\n \f\n ;; Define an insn type attribute.  This is used in function unit delay\n ;; computations.\n-(define_attr \"type\" \"integer,load,store,fpload,fpstore,vecload,vecstore,imul,lmul,idiv,ldiv,branch,compare,cr_logical,delayed_compare,fpcompare,mtjmpr,fp,dmul,sdiv,ddiv,ssqrt,dsqrt,jmpreg,vecsimple,veccomplex,veccmp,vecperm,vecfloat,altivec\"\n+(define_attr \"type\" \"integer,load,store,fpload,fpstore,vecload,vecstore,imul,imul2,imul3,lmul,idiv,ldiv,branch,compare,cr_logical,delayed_compare,fpcompare,mtjmpr,fp,dmul,sdiv,ddiv,ssqrt,dsqrt,jmpreg,vecsimple,veccomplex,veccmp,vecperm,vecfloat,altivec\"\n   (const_string \"integer\"))\n \n ;; Length (in bytes).\n@@ -156,17 +156,17 @@\n   1 1)\n \n (define_function_unit \"iu\" 1 0\n-  (and (eq_attr \"type\" \"imul\")\n+  (and (eq_attr \"type\" \"imul,imul2,imul3\")\n        (eq_attr \"cpu\" \"ppc403\"))\n   4 4)\n \n (define_function_unit \"iu\" 1 0\n-  (and (eq_attr \"type\" \"imul\")\n+  (and (eq_attr \"type\" \"imul,imul2,imul3\")\n        (eq_attr \"cpu\" \"rios1,ppc601,ppc603\"))\n   5 5)\n \n (define_function_unit \"iu\" 1 0\n-  (and (eq_attr \"type\" \"imul\")\n+  (and (eq_attr \"type\" \"imul,imul2,imul3\")\n        (eq_attr \"cpu\" \"rs64a\"))\n   20 14)\n \n@@ -216,7 +216,7 @@\n   1 1)\n \n (define_function_unit \"iu2\" 2 0\n-  (and (eq_attr \"type\" \"imul\")\n+  (and (eq_attr \"type\" \"imul,imul2,imul3\")\n        (eq_attr \"cpu\" \"rios2\"))\n   2 2)\n \n@@ -226,7 +226,7 @@\n   13 13)\n \n (define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"imul\")\n+  (and (eq_attr \"type\" \"imul,imul2,imul3\")\n        (eq_attr \"cpu\" \"rios2\"))\n   2 2)\n \n@@ -238,7 +238,7 @@\n ; MPCCORE has separate IMUL/IDIV unit for multicycle instructions\n ; Divide latency varies greatly from 2-11, use 6 as average\n (define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"imul\")\n+  (and (eq_attr \"type\" \"imul,imul2,imul3\")\n        (eq_attr \"cpu\" \"mpccore\"))\n   2 1)\n \n@@ -256,12 +256,12 @@\n   1 1)\n \n (define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"imul\")\n+  (and (eq_attr \"type\" \"imul,imul2,imul3\")\n        (eq_attr \"cpu\" \"ppc604\"))\n   4 2)\n \n (define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"imul\")\n+  (and (eq_attr \"type\" \"imul,imul2,imul3\")\n        (eq_attr \"cpu\" \"ppc620,ppc630\"))\n   5 3)\n \n@@ -271,7 +271,7 @@\n   5 3)\n \n (define_function_unit \"imuldiv\" 1 0\n-  (and (eq_attr \"type\" \"imul\")\n+  (and (eq_attr \"type\" \"imul,imul2,imul3\")\n        (eq_attr \"cpu\" \"ppc604e\"))\n   2 1)\n \n@@ -311,6 +311,11 @@\n        (eq_attr \"cpu\" \"ppc7450\"))\n   4 4)\n \n+(define_function_unit \"imuldiv\" 1 0\n+  (and (eq_attr \"type\" \"imul2,imul3\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  3 1)\n+\n (define_function_unit \"imuldiv\" 1 0\n   (and (eq_attr \"type\" \"idiv\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n@@ -376,6 +381,16 @@\n        (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n   4 4)\n \n+(define_function_unit \"iu2\" 2 0\n+  (and (eq_attr \"type\" \"imul2\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  3 2)\n+\n+(define_function_unit \"iu2\" 2 0\n+  (and (eq_attr \"type\" \"imul3\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  2 1)\n+\n (define_function_unit \"iu2\" 2 0\n   (and (eq_attr \"type\" \"idiv\")\n        (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n@@ -386,6 +401,16 @@\n        (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n   4 4)\n \n+(define_function_unit \"imuldiv\" 1 0\n+  (and (eq_attr \"type\" \"imul2\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  3 2)\n+\n+(define_function_unit \"imuldiv\" 1 0\n+  (and (eq_attr \"type\" \"imul3\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  2 1)\n+\n (define_function_unit \"imuldiv\" 1 0\n   (and (eq_attr \"type\" \"idiv\")\n        (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n@@ -419,11 +444,6 @@\n \n ; some extra cycles added by TARGET_SCHED_ADJUST_COST between compare\n ; and a following branch, to reduce mispredicts\n-(define_function_unit \"iu\" 1 0\n-  (and (eq_attr \"type\" \"compare,delayed_compare\")\n-       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n-  1 1)\n-\n (define_function_unit \"iu3\" 3 0\n   (and (eq_attr \"type\" \"compare,delayed_compare\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n@@ -483,9 +503,19 @@\n \n (define_function_unit \"bpu\" 1 0\n   (and (eq_attr \"type\" \"mtjmpr\")\n-       (eq_attr \"cpu\" \"mpccore,ppc403,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750,ppc7400,ppc7450\"))\n+       (eq_attr \"cpu\" \"mpccore,ppc403,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630\"))\n   4 1)\n \n+(define_function_unit \"sru\" 1 0\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  2 2)\n+\n+(define_function_unit \"imuldiv\" 1 0\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  2 2)\n+\n (define_function_unit \"bpu\" 1 0\n   (and (eq_attr \"type\" \"cr_logical\")\n        (eq_attr \"cpu\" \"rios1,rios2,ppc604\"))\n@@ -2180,7 +2210,12 @@\n   \"@\n    {muls|mullw} %0,%1,%2\n    {muli|mulli} %0,%1,%2\"\n-   [(set_attr \"type\" \"imul\")])\n+   [(set (attr \"type\") \n+      (cond [(match_operand:SI 2 \"s8bit_cint_operand\" \"\")\n+\t\t(const_string \"imul3\")\n+             (match_operand:SI 2 \"short_cint_operand\" \"\") \n+\t\t(const_string \"imul2\")]\n+\t(const_string \"imul\")))])\n \n (define_insn \"mulsi3_no_mq\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n@@ -2190,7 +2225,12 @@\n   \"@\n    {muls|mullw} %0,%1,%2\n    {muli|mulli} %0,%1,%2\"\n-   [(set_attr \"type\" \"imul\")])\n+   [(set (attr \"type\") \n+      (cond [(match_operand:SI 2 \"s8bit_cint_operand\" \"\")\n+\t\t(const_string \"imul3\")\n+             (match_operand:SI 2 \"short_cint_operand\" \"\") \n+\t\t(const_string \"imul2\")]\n+\t(const_string \"imul\")))])\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n@@ -7490,6 +7530,51 @@\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n+(define_insn \"movsi_low_st\"\n+  [(set (mem:SI (lo_sum:SI (match_operand:SI 1 \"register_operand\" \"b\")\n+                           (match_operand 2 \"\" \"\")))\n+\t(match_operand:SI 0 \"gpc_reg_operand\" \"r\"))]\n+  \"TARGET_MACHO && ! TARGET_64BIT\"\n+  \"{st|stw} %0,lo16(%2)(%1)\"\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"movdf_low\"\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n+        (mem:DF (lo_sum:SI (match_operand:SI 1 \"register_operand\" \"b\")\n+                           (match_operand 2 \"\" \"\"))))]\n+  \"TARGET_MACHO && TARGET_HARD_FLOAT && ! TARGET_64BIT\"\n+  \"lfd %0,lo16(%2)(%1)\"\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"movdf_low_st\"\n+  [(set (mem:DF (lo_sum:SI (match_operand:SI 1 \"register_operand\" \"b\")\n+                           (match_operand 2 \"\" \"\")))\n+\t(match_operand:DF 0 \"gpc_reg_operand\" \"f\"))]\n+  \"TARGET_MACHO && TARGET_HARD_FLOAT && ! TARGET_64BIT\"\n+  \"stfd %0,lo16(%2)(%1)\"\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"movsf_low\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n+        (mem:SF (lo_sum:SI (match_operand:SI 1 \"register_operand\" \"b\")\n+                           (match_operand 2 \"\" \"\"))))]\n+  \"TARGET_MACHO && TARGET_HARD_FLOAT && ! TARGET_64BIT\"\n+  \"lfs %0,lo16(%2)(%1)\"\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"movsf_low_st\"\n+  [(set (mem:SF (lo_sum:SI (match_operand:SI 1 \"register_operand\" \"b\")\n+                           (match_operand 2 \"\" \"\")))\n+\t(match_operand:SF 0 \"gpc_reg_operand\" \"f\"))]\n+  \"TARGET_MACHO && TARGET_HARD_FLOAT && ! TARGET_64BIT\"\n+  \"stfs %0,lo16(%2)(%1)\"\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"length\" \"4\")])\n+\n (define_insn \"*movsi_internal1\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,m,r,r,r,r,r,*q,*c*l,*h\")\n \t(match_operand:SI 1 \"input_operand\" \"r,U,m,r,I,L,n,R,*h,r,r,0\"))]\n@@ -12921,18 +13006,22 @@\n \n (define_insn \"\"\n   [(set (pc)\n-\t(match_operand:SI 0 \"register_operand\" \"cl\"))\n+\t(match_operand:SI 0 \"register_operand\" \"c,*l\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"TARGET_32BIT\"\n-  \"b%T0\"\n+  \"@\n+   bctr\n+   {br|blr}\"\n   [(set_attr \"type\" \"jmpreg\")])\n \n (define_insn \"\"\n   [(set (pc)\n-\t(match_operand:DI 0 \"register_operand\" \"cl\"))\n+\t(match_operand:DI 0 \"register_operand\" \"c,*l\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"TARGET_64BIT\"\n-  \"b%T0\"\n+  \"@\n+   bctr\n+   blr\"\n   [(set_attr \"type\" \"jmpreg\")])\n \n (define_insn \"nop\""}]}