{"sha": "05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVkZmQwOWMwY2YxMWUyZTE5ZDdlN2JmZWE3M2NkODBkOTU1MTlkZA==", "commit": {"author": {"name": "Warren Levy", "email": "warrenl@cygnus.com", "date": "1999-06-23T12:24:59Z"}, "committer": {"name": "Warren Levy", "email": "warrenl@gcc.gnu.org", "date": "1999-06-23T12:24:59Z"}, "message": "DatagramSocketImpl.java (localPort): Fixed typo to match JDK.\n\n\t* java/net/DatagramSocketImpl.java (localPort): Fixed typo to match JDK.\n\t* java/net/natPlainDatagramSocketImpl.cc (bind): ditto.\n\t* java/text/ChoiceFormat.java (nextDouble(double, boolean)): Method\n\tis not final per JDK.\n\t* java/util/PropertyResourceBundle.java (handleGetObject): Method is\n\tpublic per JDK.\n\t* java/util/zip/DataFormatException.java: Class extends Exception.\n\t* java/util/zip/Deflater.java (finalize): Method is protected per JDK.\n\t* java/util/zip/ZipEntry.java: Class implements ZipConstants.\n\t* java/util/zip/ZipInputStream.java: ditto.\n\t(closeEntry): Changed method name to match JDK spec.\n\nFrom-SVN: r27717", "tree": {"sha": "63572a78b1578e45f69eed92afa99ff6ff7b88de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63572a78b1578e45f69eed92afa99ff6ff7b88de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd/comments", "author": null, "committer": null, "parents": [{"sha": "25e1e0492709ed1525edff83eea559b5f27570ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25e1e0492709ed1525edff83eea559b5f27570ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25e1e0492709ed1525edff83eea559b5f27570ec"}], "stats": {"total": 38, "additions": 26, "deletions": 12}, "files": [{"sha": "1581108c23937a8bd268f3954f0c54bf312be2f4", "filename": "libjava/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd", "patch": "@@ -1,3 +1,17 @@\n+1999-06-23  Warren Levy  <warrenl@cygnus.com>\n+\n+\t* java/net/DatagramSocketImpl.java (localPort): Fixed typo to match JDK.\n+\t* java/net/natPlainDatagramSocketImpl.cc (bind): ditto.\n+\t* java/text/ChoiceFormat.java (nextDouble(double, boolean)): Method\n+\tis not final per JDK.\n+\t* java/util/PropertyResourceBundle.java (handleGetObject): Method is\n+\tpublic per JDK.\n+\t* java/util/zip/DataFormatException.java: Class extends Exception.\n+\t* java/util/zip/Deflater.java (finalize): Method is protected per JDK.\n+\t* java/util/zip/ZipEntry.java: Class implements ZipConstants.\n+\t* java/util/zip/ZipInputStream.java: ditto.\n+\t(closeEntry): Changed method name to match JDK spec.\n+\n 1999-06-21  Tom Tromey  <tromey@cygnus.com>\n \n \t* java/lang/ieeefp.h (__IEEE_LITTLE_ENDIAN): Define for alpha."}, {"sha": "da4c2cef8203961a261160da39eb6aa0d6d5b060", "filename": "libjava/java/net/DatagramSocketImpl.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd/libjava%2Fjava%2Fnet%2FDatagramSocketImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd/libjava%2Fjava%2Fnet%2FDatagramSocketImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramSocketImpl.java?ref=05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd", "patch": "@@ -25,7 +25,7 @@\n \n public abstract class DatagramSocketImpl implements SocketOptions\n {\n-  protected int localport;\n+  protected int localPort;\n   protected FileDescriptor fd;\n \n   public DatagramSocketImpl()\n@@ -57,6 +57,6 @@ protected FileDescriptor getFileDescriptor()\n \n   protected int getLocalPort()\n   {\n-    return localport;\n+    return localPort;\n   }\n }"}, {"sha": "68259509f10522a1e33df0c4b61d7a1945459916", "filename": "libjava/java/net/natPlainDatagramSocketImpl.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc?ref=05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd", "patch": "@@ -113,9 +113,9 @@ java::net::PlainDatagramSocketImpl::bind (jint lport,\n     {\n       socklen_t addrlen = sizeof(u);\n       if (lport != 0)\n-        localport = lport;\n+        localPort = lport;\n       else if (::getsockname (fnum, (sockaddr*) &u, &addrlen) == 0)\n-        localport = ntohs (u.address.sin_port);\n+        localPort = ntohs (u.address.sin_port);\n       else\n         goto error;\n       return;"}, {"sha": "bd0ccabd6570db4747e9666d1ebe1b210b43e43d", "filename": "libjava/java/text/ChoiceFormat.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd/libjava%2Fjava%2Ftext%2FChoiceFormat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd/libjava%2Fjava%2Ftext%2FChoiceFormat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FChoiceFormat.java?ref=05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd", "patch": "@@ -182,7 +182,7 @@ public static final double nextDouble (double d)\n       return nextDouble (d, true);\n     }\n \n-  public static final double nextDouble (double d, boolean next)\n+  public static double nextDouble (double d, boolean next)\n     {\n       if (Double.isInfinite(d) || Double.isNaN(d))\n \treturn d;"}, {"sha": "a1f99002265a7986e7cf55ab21f7ee33cfc088e4", "filename": "libjava/java/util/PropertyResourceBundle.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd/libjava%2Fjava%2Futil%2FPropertyResourceBundle.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd/libjava%2Fjava%2Futil%2FPropertyResourceBundle.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FPropertyResourceBundle.java?ref=05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd", "patch": "@@ -40,7 +40,7 @@ public Enumeration getKeys()\n                                      parent.getKeys ());\n     }\n \n-  protected Object handleGetObject (String key)\n+  public Object handleGetObject (String key)\n     {\n       return properties.getProperty(key);\n     }"}, {"sha": "9e67b753650282c44d2e7619f073d27021ae8b75", "filename": "libjava/java/util/zip/DataFormatException.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd/libjava%2Fjava%2Futil%2Fzip%2FDataFormatException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd/libjava%2Fjava%2Futil%2Fzip%2FDataFormatException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FDataFormatException.java?ref=05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd", "patch": "@@ -19,7 +19,7 @@\n  * Believed complete and correct.\n  */\n \n-public class DataFormatException extends java.io.IOException\n+public class DataFormatException extends Exception\n {\n   public DataFormatException ()\n   {"}, {"sha": "202b2203de1d41067bc946b12f3fad6265cbdd6c", "filename": "libjava/java/util/zip/Deflater.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd/libjava%2Fjava%2Futil%2Fzip%2FDeflater.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd/libjava%2Fjava%2Futil%2Fzip%2FDeflater.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FDeflater.java?ref=05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd", "patch": "@@ -63,7 +63,7 @@ public Deflater (int lvl, boolean noHeader)\n \n   public native void end ();\n \n-  public void finalize ()\n+  protected void finalize ()\n   {\n     end ();\n   }"}, {"sha": "9bd3c41a9ab09b100cc07e06519ec6a655f4a4ee", "filename": "libjava/java/util/zip/ZipEntry.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd/libjava%2Fjava%2Futil%2Fzip%2FZipEntry.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd/libjava%2Fjava%2Futil%2Fzip%2FZipEntry.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FZipEntry.java?ref=05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd", "patch": "@@ -19,7 +19,7 @@\n  * Status:  Believed complete and correct.\n  */\n \n-public class ZipEntry\n+public class ZipEntry implements ZipConstants\n {\n   // These values were determined using a simple test program.\n   public static final int STORED = 0;"}, {"sha": "41b092d8133a1363e6509650914924095b9fe662", "filename": "libjava/java/util/zip/ZipInputStream.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd/libjava%2Fjava%2Futil%2Fzip%2FZipInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd/libjava%2Fjava%2Futil%2Fzip%2FZipInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FZipInputStream.java?ref=05dfd09c0cf11e2e19d7e7bfea73cd80d95519dd", "patch": "@@ -26,7 +26,7 @@\n // we probably should.  FIXME.\n    \n \n-public class ZipInputStream extends InflaterInputStream\n+public class ZipInputStream extends InflaterInputStream implements ZipConstants\n {\n   public ZipInputStream (InputStream in)\n   {\n@@ -36,7 +36,7 @@ public ZipInputStream (InputStream in)\n   public ZipEntry getNextEntry () throws IOException\n   {\n     if (current != null)\n-      closeZipEntry();\n+      closeEntry();\n     if (in.read() != 'P'\n \t|| in.read() != 'K')\n       return null;\n@@ -184,7 +184,7 @@ private int read4 () throws IOException\n       + ((byte1 & 0xFF) << 8) + (byte0 & 0xFF);\n   }\n \n-  public void closeZipEntry ()  throws IOException\n+  public void closeEntry ()  throws IOException\n   {\n     if (current != null)\n       {"}]}