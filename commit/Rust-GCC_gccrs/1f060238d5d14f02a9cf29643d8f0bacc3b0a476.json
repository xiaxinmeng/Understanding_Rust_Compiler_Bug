{"sha": "1f060238d5d14f02a9cf29643d8f0bacc3b0a476", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYwNjAyMzhkNWQxNGYwMmE5Y2YyOTY0M2Q4ZjBiYWNjM2IwYTQ3Ng==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-09-21T07:28:42Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-09-21T07:28:42Z"}, "message": "re PR tree-optimization/86990 (wrong code at -O2 on x86_64-linux-gnu in 64-bit mode)\n\n\tPR tree-optimization/86990\n\t* gimple-ssa-store-merging.c (imm_store_chain_info:coalesce_immediate):\n\tCheck that the entire merged store group is made of constants only for\n\toverlapping stores.\n\nFrom-SVN: r264458", "tree": {"sha": "89bccf1aa984378287812717b6320925e633e4b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89bccf1aa984378287812717b6320925e633e4b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f060238d5d14f02a9cf29643d8f0bacc3b0a476", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f060238d5d14f02a9cf29643d8f0bacc3b0a476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f060238d5d14f02a9cf29643d8f0bacc3b0a476", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f060238d5d14f02a9cf29643d8f0bacc3b0a476/comments", "author": null, "committer": null, "parents": [{"sha": "74f310185901571eeec5bc9e7042b993e4c5536f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74f310185901571eeec5bc9e7042b993e4c5536f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74f310185901571eeec5bc9e7042b993e4c5536f"}], "stats": {"total": 189, "additions": 185, "deletions": 4}, "files": [{"sha": "d71a70b3398a2f724b3cfe5189e8ba363d429a09", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f060238d5d14f02a9cf29643d8f0bacc3b0a476/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f060238d5d14f02a9cf29643d8f0bacc3b0a476/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f060238d5d14f02a9cf29643d8f0bacc3b0a476", "patch": "@@ -1,3 +1,10 @@\n+2018-09-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR tree-optimization/86990\n+\t* gimple-ssa-store-merging.c (imm_store_chain_info:coalesce_immediate):\n+\tCheck that the entire merged store group is made of constants only for\n+\toverlapping stores.\n+\n 2018-09-20  Allan Sandfeld Jensen  <allan.jensen@qt.io>\n \n \t* gcc.c (LINK_COMMAND_SPEC): Handle -r like -nostdlib."}, {"sha": "85dd5bcceadf6b69002cb7d84b7bb58224f68de1", "filename": "gcc/gimple-ssa-store-merging.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f060238d5d14f02a9cf29643d8f0bacc3b0a476/gcc%2Fgimple-ssa-store-merging.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f060238d5d14f02a9cf29643d8f0bacc3b0a476/gcc%2Fgimple-ssa-store-merging.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-store-merging.c?ref=1f060238d5d14f02a9cf29643d8f0bacc3b0a476", "patch": "@@ -2701,16 +2701,25 @@ imm_store_chain_info::coalesce_immediate_stores ()\n \t\t    merged_store->start + merged_store->width - 1))\n \t{\n \t  /* Only allow overlapping stores of constants.  */\n-\t  if (info->rhs_code == INTEGER_CST\n-\t      && merged_store->stores[0]->rhs_code == INTEGER_CST)\n+\t  if (info->rhs_code == INTEGER_CST)\n \t    {\n+\t      bool only_constants = true;\n+\t      store_immediate_info *infoj;\n+\t      unsigned int j;\n+\t      FOR_EACH_VEC_ELT (merged_store->stores, j, infoj)\n+\t\tif (infoj->rhs_code != INTEGER_CST)\n+\t\t  {\n+\t\t    only_constants = false;\n+\t\t    break;\n+\t\t  }\n \t      unsigned int last_order\n \t\t= MAX (merged_store->last_order, info->order);\n \t      unsigned HOST_WIDE_INT end\n \t\t= MAX (merged_store->start + merged_store->width,\n \t\t       info->bitpos + info->bitsize);\n-\t      if (check_no_overlap (m_store_info, i, INTEGER_CST,\n-\t\t\t\t    last_order, end))\n+\t      if (only_constants\n+\t\t  && check_no_overlap (m_store_info, i, INTEGER_CST,\n+\t\t\t\t       last_order, end))\n \t\t{\n \t\t  /* check_no_overlap call above made sure there are no\n \t\t     overlapping stores with non-INTEGER_CST rhs_code"}, {"sha": "c68e2c61871c33fe47ab404425ae7a0d3f54643f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f060238d5d14f02a9cf29643d8f0bacc3b0a476/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f060238d5d14f02a9cf29643d8f0bacc3b0a476/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1f060238d5d14f02a9cf29643d8f0bacc3b0a476", "patch": "@@ -1,3 +1,7 @@\n+2018-09-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.c-torture/execute/20180921-1.c: New test.\n+\n 2018-09-20  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/87109 - wrong ctor with maybe-rvalue semantics."}, {"sha": "50d4faa1ac3b349067b390d77eb31214a97b4a5e", "filename": "gcc/testsuite/gcc.c-torture/execute/20180921-1.c", "status": "added", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f060238d5d14f02a9cf29643d8f0bacc3b0a476/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20180921-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f060238d5d14f02a9cf29643d8f0bacc3b0a476/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20180921-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20180921-1.c?ref=1f060238d5d14f02a9cf29643d8f0bacc3b0a476", "patch": "@@ -0,0 +1,161 @@\n+/* PR tree-optimization/86990 */\n+/* Testcase by Zhendong Su <su@cs.ucdavis.edu> */\n+\n+const char *ss;\n+\n+int __attribute__((noipa)) dummy (const char *s, ...)\n+{\n+  ss = s;\n+}\n+\n+int i[6];\n+static int j, v, e, f, h = 5, k, l, n, o, p, q, r, s, u, w, x, y, z, aa, ab, ac,\n+                       ad, ae, af, ag = 8, ah, ai, aj, ak, al;\n+char c;\n+struct a {\n+  unsigned b;\n+  int c : 9;\n+  int d;\n+} static g = {9, 5};\n+static short m[1], t = 95, am;\n+int an, ao, ap;\n+void aq(int ar) {\n+  j = j & 5 ^ i[j ^ v & 5];\n+  j = j & 5 ^ i[(j ^ v) & 5];\n+  j = j & 4095 ^ (j ^ v) & 5;\n+}\n+void as(int ar) {\n+  if (n)\n+    s = 0;\n+}\n+static unsigned at() {\n+  int au[] = {2080555007, 0};\n+  for (; al; al--) {\n+    if (r)\n+      --x;\n+    if (g.d)\n+      l++;\n+    dummy(\"\", j);\n+    if (u)\n+      ae = n = au[al];\n+  }\n+  r = 0;\n+  return 0;\n+}\n+int aw(int ar) {\n+  int ax[] = {9, 5, 5, 9, 5}, ay = 3;\n+  struct a az = {1, 3};\n+av:\n+  an = (as((at(), ax)[2]), ax[4]);\n+  {\n+    int ba[] = {5, 5, 9, 8, 1, 0, 5, 5, 9, 8, 1, 0,\n+                5, 5, 9, 8, 1, 0, 5, 5, 9, 8, 1};\n+    int a[] = {8, 2, 8, 2, 8, 2, 8};\n+    int b[] = {1027239, 8, 1, 7, 9, 2, 9, 4, 4, 2, 8, 1, 0, 4, 4, 2,\n+               4,       4, 2, 9, 2, 9, 8, 1, 7, 9, 2, 9, 4, 4, 2};\n+    if (z) {\n+      struct a bc;\n+    bb:\n+      for (; e; e++)\n+        for (; q;)\n+          return ax[e];\n+      if (bc.c < g.d <= a[7])\n+        aa--;\n+    }\n+    {\n+      struct a bd = {5};\n+      int d[20] = {1, 9, 7, 7, 8, 4, 4, 4, 4, 8, 1, 9, 7, 7, 8, 4, 4, 4, 4};\n+      c = h | r % g.c ^ x;\n+      dummy(\"\", g);\n+      am -= t | x;\n+      if (h)\n+        while (1) {\n+          if (a[o]) {\n+            struct a be;\n+            if (ar) {\n+              struct a bf = {908, 5, 3};\n+              int bg[3], bh = k, bj = ag | ae, bk = aj + 3, bl = u << e;\n+              if (f)\n+                if (ac)\n+                  ak = w;\n+              ag = -(ag & t);\n+              af = ag ^ af;\n+              if (8 < af)\n+                break;\n+              if (bj)\n+                goto bi;\n+              if (s)\n+                dummy(\"\", 6);\n+              be.d = k;\n+              w = f - bh;\n+              dummy(\"\", be);\n+              if (w)\n+                goto bb;\n+              ao = r - aa && g.b;\n+              if (y)\n+                k++;\n+              goto av;\n+            bi:\n+              if (aa)\n+                continue;\n+              if (f)\n+                if (k)\n+                  dummy(\"\", g);\n+              aj = ac + k ^ g.c;\n+              g.c = bk;\n+              ah = 0;\n+              for (; ah < 3; ah++)\n+                if (s)\n+                  bg[ah] = 8;\n+              if (!ay)\n+                dummy(\"\", ai);\n+              u = bl;\n+              g = bf;\n+            } else\n+              for (;; o += a[ap])\n+                ;\n+            int bm[] = {0};\n+            for (; p; p++)\n+              c = ad;\n+            ad = l;\n+            if (bd.c) {\n+              dummy(\" \");\n+              goto bi;\n+            }\n+          }\n+          int bn[] = {5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5,\n+                      2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2,\n+                      2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2};\n+          struct a a[] = {3440025416, 2, 8, 4, 2, 8, 4, 4, 2, 8, 4};\n+          struct a b = {3075920};\n+          if (f) {\n+            aq(m[am + e]);\n+            dummy(\"\", j);\n+            dummy(\"\", e);\n+            ab--;\n+          }\n+          if (ax[4]) {\n+            if (l)\n+              goto av;\n+            ++f;\n+          } else\n+            ay = az.c && a;\n+          for (; ac; ac++)\n+            m[f] = 0;\n+        }\n+      h = 9;\n+      for (; y; y = 1)\n+        if (f)\n+          goto av;\n+    }\n+  }\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  aw(1);\n+  if (g.c!= 5)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}