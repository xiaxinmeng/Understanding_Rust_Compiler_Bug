{"sha": "a213ab38560f0b95ec318b2a4795e66cc0518848", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIxM2FiMzg1NjBmMGI5NWVjMzE4YjJhNDc5NWU2NmNjMDUxODg0OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-12-02T08:51:49Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-12-02T08:51:49Z"}, "message": "re PR tree-optimization/92712 (Performance regression with assumed values)\n\n\tPR tree-optimization/92712\n\t* match.pd ((A * B) +- A -> (B +- 1) * A,\n\tA +- (A * B) -> (1 +- B) * A): Allow optimizing signed integers\n\teven when we don't know anything about range of A, but do know\n\tsomething about range of B and the simplification won't introduce\n\tnew UB.\n\n\t* gcc.dg/tree-ssa/pr92712-1.c: New test.\n\t* gcc.dg/tree-ssa/pr92712-2.c: New test.\n\t* gcc.dg/tree-ssa/pr92712-3.c: New test.\n\t* gfortran.dg/loop_versioning_1.f90: Adjust expected number of\n\tlikely to be innermost dimension messages.\n\t* gfortran.dg/loop_versioning_10.f90: Likewise.\n\t* gfortran.dg/loop_versioning_6.f90: Likewise.\n\nFrom-SVN: r278894", "tree": {"sha": "39451dd44a61601d97dcf6462ceede232af61ca9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39451dd44a61601d97dcf6462ceede232af61ca9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a213ab38560f0b95ec318b2a4795e66cc0518848", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a213ab38560f0b95ec318b2a4795e66cc0518848", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a213ab38560f0b95ec318b2a4795e66cc0518848", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a213ab38560f0b95ec318b2a4795e66cc0518848/comments", "author": null, "committer": null, "parents": [{"sha": "9b14fc3326e087975653b1af8ac54114041cde51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b14fc3326e087975653b1af8ac54114041cde51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b14fc3326e087975653b1af8ac54114041cde51"}], "stats": {"total": 189, "additions": 179, "deletions": 10}, "files": [{"sha": "9b3242115540412484060c829b6aea84bce33775", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a213ab38560f0b95ec318b2a4795e66cc0518848/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a213ab38560f0b95ec318b2a4795e66cc0518848/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a213ab38560f0b95ec318b2a4795e66cc0518848", "patch": "@@ -1,4 +1,13 @@\n-2019-12-02  Feng Xue <fxue@os.amperecomputing.com>\n+2019-12-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/92712\n+\t* match.pd ((A * B) +- A -> (B +- 1) * A,\n+\tA +- (A * B) -> (1 +- B) * A): Allow optimizing signed integers\n+\teven when we don't know anything about range of A, but do know\n+\tsomething about range of B and the simplification won't introduce\n+\tnew UB.\n+\n+2019-12-02  Feng Xue  <fxue@os.amperecomputing.com>\n \n \tPR ipa/92133\n \t* doc/invoke.texi (ipa-cp-max-recursive-depth): Document new option.\n@@ -4543,7 +4552,7 @@\n \t(lto_free_file_name_hash): New function.\n \t* lto-streamer.h (lto_free_file_name_hash): New.\n \n-2019-11-07  Feng Xue <fxue@os.amperecomputing.com>\n+2019-11-07  Feng Xue  <fxue@os.amperecomputing.com>\n \n \tPR tree-optimization/89134\n \t* doc/invoke.texi (min-loop-cond-split-prob): Document new --params."}, {"sha": "14f6a9d5078dcda4c244a14580f0293987f046cc", "filename": "gcc/match.pd", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a213ab38560f0b95ec318b2a4795e66cc0518848/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a213ab38560f0b95ec318b2a4795e66cc0518848/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=a213ab38560f0b95ec318b2a4795e66cc0518848", "patch": "@@ -2480,18 +2480,42 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n     (plusminus @0 (mult:c@3 @0 @2))\n     (if ((!ANY_INTEGRAL_TYPE_P (type)\n \t  || TYPE_OVERFLOW_WRAPS (type)\n+\t  /* For @0 + @0*@2 this transformation would introduce UB\n+\t     (where there was none before) for @0 in [-1,0] and @2 max.\n+\t     For @0 - @0*@2 this transformation would introduce UB\n+\t     for @0 0 and @2 in [min,min+1] or @0 -1 and @2 min+1.  */\n \t  || (INTEGRAL_TYPE_P (type)\n-\t      && tree_expr_nonzero_p (@0)\n-\t      && expr_not_equal_to (@0, wi::minus_one (TYPE_PRECISION (type)))))\n+\t      && ((tree_expr_nonzero_p (@0)\n+\t\t   && expr_not_equal_to (@0,\n+\t\t\t\twi::minus_one (TYPE_PRECISION (type))))\n+\t\t  || (plusminus == PLUS_EXPR\n+\t\t      ? expr_not_equal_to (@2,\n+\t\t\t    wi::max_value (TYPE_PRECISION (type), SIGNED))\n+\t\t      /* Let's ignore the @0 -1 and @2 min case.  */\n+\t\t      : (expr_not_equal_to (@2,\n+\t\t\t    wi::min_value (TYPE_PRECISION (type), SIGNED))\n+\t\t\t && expr_not_equal_to (@2,\n+\t\t\t\twi::min_value (TYPE_PRECISION (type), SIGNED)\n+\t\t\t\t+ 1))))))\n \t && single_use (@3))\n      (mult (plusminus { build_one_cst (type); } @2) @0)))\n    (simplify\n     (plusminus (mult:c@3 @0 @2) @0)\n     (if ((!ANY_INTEGRAL_TYPE_P (type)\n \t  || TYPE_OVERFLOW_WRAPS (type)\n+\t  /* For @0*@2 + @0 this transformation would introduce UB\n+\t     (where there was none before) for @0 in [-1,0] and @2 max.\n+\t     For @0*@2 - @0 this transformation would introduce UB\n+\t     for @0 0 and @2 min.  */\n \t  || (INTEGRAL_TYPE_P (type)\n-\t      && tree_expr_nonzero_p (@0)\n-\t      && expr_not_equal_to (@0, wi::minus_one (TYPE_PRECISION (type)))))\n+\t      && ((tree_expr_nonzero_p (@0)\n+\t\t   && (plusminus == MINUS_EXPR\n+\t\t       || expr_not_equal_to (@0,\n+\t\t\t\twi::minus_one (TYPE_PRECISION (type)))))\n+\t\t  || expr_not_equal_to (@2,\n+\t\t\t(plusminus == PLUS_EXPR\n+\t\t\t ? wi::max_value (TYPE_PRECISION (type), SIGNED)\n+\t\t\t : wi::min_value (TYPE_PRECISION (type), SIGNED))))))\n \t && single_use (@3))\n      (mult (plusminus @2 { build_one_cst (type); }) @0))))))\n "}, {"sha": "12abe735bbf855ace983d383e07afedb7d342e7b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a213ab38560f0b95ec318b2a4795e66cc0518848/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a213ab38560f0b95ec318b2a4795e66cc0518848/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a213ab38560f0b95ec318b2a4795e66cc0518848", "patch": "@@ -1,3 +1,14 @@\n+2019-12-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/92712\n+\t* gcc.dg/tree-ssa/pr92712-1.c: New test.\n+\t* gcc.dg/tree-ssa/pr92712-2.c: New test.\n+\t* gcc.dg/tree-ssa/pr92712-3.c: New test.\n+\t* gfortran.dg/loop_versioning_1.f90: Adjust expected number of\n+\tlikely to be innermost dimension messages.\n+\t* gfortran.dg/loop_versioning_10.f90: Likewise.\n+\t* gfortran.dg/loop_versioning_6.f90: Likewise.\n+\n 2019-12-02  Feng Xue  <fxue@os.amperecomputing.com>\n \n \tPR ipa/92133"}, {"sha": "c19ff5cf29c6d52b40bf6df6668b00491b58e99a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr92712-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a213ab38560f0b95ec318b2a4795e66cc0518848/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr92712-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a213ab38560f0b95ec318b2a4795e66cc0518848/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr92712-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr92712-1.c?ref=a213ab38560f0b95ec318b2a4795e66cc0518848", "patch": "@@ -0,0 +1,21 @@\n+/* PR tree-optimization/92712 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump \" = \\[tv]_\\[0-9]*\\\\\\(D\\\\\\) \\\\* \\[tv]_\\[0-9]*\\\\\\(D\\\\\\);\" \"optimized\" } } */\n+\n+static int\n+foo (int t, int v)\n+{\n+  int i, x = 0;\n+  for (int i = 0; i < t; ++i)\n+    x += v;\n+  return x;\n+}\n+\n+int\n+bar (int t, int v)\n+{\n+  if (t < 0)\n+    __builtin_unreachable ();\n+  return foo (t, v);\n+}"}, {"sha": "2710ff36cc1bca10a2c9bcab83c55611b19be8e9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr92712-2.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a213ab38560f0b95ec318b2a4795e66cc0518848/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr92712-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a213ab38560f0b95ec318b2a4795e66cc0518848/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr92712-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr92712-2.c?ref=a213ab38560f0b95ec318b2a4795e66cc0518848", "patch": "@@ -0,0 +1,66 @@\n+/* PR tree-optimization/92712 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-ipa-icf -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \" = \\[tv]_\\[0-9]*\\\\\\(D\\\\\\) \\\\* \\[tv]_\\[0-9]*\\\\\\(D\\\\\\);\" 7 \"optimized\" } } */\n+\n+int\n+f1 (int t, int v)\n+{\n+  int a = t - 1;\n+  int b = a * v;\n+  return b + v;\n+}\n+\n+int\n+f2 (int t, int v)\n+{\n+  int a = t - 1;\n+  int b = a * v;\n+  return v + b;\n+}\n+\n+int\n+f3 (int t, int v)\n+{\n+  int a = t + 1;\n+  int b = a * v;\n+  return b - v;\n+}\n+\n+int\n+f4 (int t, int v)\n+{\n+  int a = 1 - t;\n+  int b = a * v;\n+  return v - b;\n+}\n+\n+int\n+f5 (int t, int v)\n+{\n+  if (v == 0 || v == -1)\n+    __builtin_unreachable ();\n+  int a = t - 1U;\n+  int b = a * v;\n+  return b + v;\n+}\n+\n+int\n+f6 (int t, int v)\n+{\n+  if (v == 0 || v == -1)\n+    __builtin_unreachable ();\n+  int a = t - 1U;\n+  int b = a * v;\n+  return v + b;\n+}\n+\n+int\n+f7 (int t, int v)\n+{\n+  if (v == 0)\n+    __builtin_unreachable ();\n+  int a = t + 1U;\n+  int b = a * v;\n+  return b - v;\n+}"}, {"sha": "27749a125a7827b4eabf6db98d31526d33f320fe", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr92712-3.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a213ab38560f0b95ec318b2a4795e66cc0518848/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr92712-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a213ab38560f0b95ec318b2a4795e66cc0518848/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr92712-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr92712-3.c?ref=a213ab38560f0b95ec318b2a4795e66cc0518848", "patch": "@@ -0,0 +1,36 @@\n+/* PR tree-optimization/92712 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-ipa-icf -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-not \" = \\[tv]_\\[0-9]*\\\\\\(D\\\\\\) \\\\* \\[tv]_\\[0-9]*\\\\\\(D\\\\\\);\" \"optimized\" } } */\n+\n+int\n+f1 (int t, int v)\n+{\n+  int a = t - 1U;\n+  int b = a * v;\n+  return b + v;\n+}\n+\n+int\n+f2 (int t, int v)\n+{\n+  int a = t - 1U;\n+  int b = a * v;\n+  return v + b;\n+}\n+\n+int\n+f3 (int t, int v)\n+{\n+  int a = t + 1U;\n+  int b = a * v;\n+  return b - v;\n+}\n+\n+int\n+f4 (int t, int v)\n+{\n+  int a = 1U - t;\n+  int b = a * v;\n+  return v - b;\n+}"}, {"sha": "e80f8920d00c72feeca0b36e8e97691a57c35852", "filename": "gcc/testsuite/gfortran.dg/loop_versioning_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a213ab38560f0b95ec318b2a4795e66cc0518848/gcc%2Ftestsuite%2Fgfortran.dg%2Floop_versioning_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a213ab38560f0b95ec318b2a4795e66cc0518848/gcc%2Ftestsuite%2Fgfortran.dg%2Floop_versioning_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Floop_versioning_1.f90?ref=a213ab38560f0b95ec318b2a4795e66cc0518848", "patch": "@@ -23,6 +23,6 @@ subroutine f3(x, limit, step)\n   end do\n end subroutine f3\n \n-! { dg-final { scan-tree-dump-times {likely to be the innermost dimension} 2 \"lversion\" } }\n+! { dg-final { scan-tree-dump-times {likely to be the innermost dimension} 1 \"lversion\" } }\n ! { dg-final { scan-tree-dump-times {want to version containing loop} 3 \"lversion\" } }\n ! { dg-final { scan-tree-dump-times {versioned this loop} 3 \"lversion\" } }"}, {"sha": "3d921d6c993ab92e442357d30ed71c9e7ec574b3", "filename": "gcc/testsuite/gfortran.dg/loop_versioning_10.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a213ab38560f0b95ec318b2a4795e66cc0518848/gcc%2Ftestsuite%2Fgfortran.dg%2Floop_versioning_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a213ab38560f0b95ec318b2a4795e66cc0518848/gcc%2Ftestsuite%2Fgfortran.dg%2Floop_versioning_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Floop_versioning_10.f90?ref=a213ab38560f0b95ec318b2a4795e66cc0518848", "patch": "@@ -26,6 +26,6 @@ subroutine f4(x, i)\n   end do\n end subroutine f4\n \n-! { dg-final { scan-tree-dump-times {likely to be the innermost dimension} 6 \"lversion\" } }\n+! { dg-final { scan-tree-dump-times {likely to be the innermost dimension} 4 \"lversion\" } }\n ! { dg-final { scan-tree-dump-times {want to version} 4 \"lversion\" } }\n ! { dg-final { scan-tree-dump-times {versioned} 4 \"lversion\" } }"}, {"sha": "163d225cb4905d808e41b1a7492246e4afa1b0ab", "filename": "gcc/testsuite/gfortran.dg/loop_versioning_6.f90", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a213ab38560f0b95ec318b2a4795e66cc0518848/gcc%2Ftestsuite%2Fgfortran.dg%2Floop_versioning_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a213ab38560f0b95ec318b2a4795e66cc0518848/gcc%2Ftestsuite%2Fgfortran.dg%2Floop_versioning_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Floop_versioning_6.f90?ref=a213ab38560f0b95ec318b2a4795e66cc0518848", "patch": "@@ -89,5 +89,7 @@ subroutine f9(x, limit, step)\n   end do\n end subroutine f9\n \n-! { dg-final { scan-tree-dump-times {want to version containing loop} 9 \"lversion\" } }\n-! { dg-final { scan-tree-dump-times {versioned this loop} 9 \"lversion\" } }\n+! { dg-final { scan-tree-dump-times {want to version containing loop} 9 \"lversion\" { target lp64 } } }\n+! { dg-final { scan-tree-dump-times {versioned this loop} 9 \"lversion\" { target lp64 } } }\n+! { dg-final { scan-tree-dump-times {want to version containing loop} 8 \"lversion\" { target { ! lp64 } } } }\n+! { dg-final { scan-tree-dump-times {versioned this loop} 8 \"lversion\" { target { ! lp64 } } } }"}]}