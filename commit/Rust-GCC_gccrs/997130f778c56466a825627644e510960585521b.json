{"sha": "997130f778c56466a825627644e510960585521b", "node_id": "C_kwDOANBUbNoAKDk5NzEzMGY3NzhjNTY0NjZhODI1NjI3NjQ0ZTUxMDk2MDU4NTUyMWI", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-10-26T07:28:09Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-01-07T22:02:44Z"}, "message": "target: [PR102941] Fix inline-asm flags with non-REG_P output\n\nSo the problem here is that arm_md_asm_adjust would\njust create a set directly to the output memory which is wrong.\nIt needs to output to a temp register first and then do a\nmove.\n\nOK? Bootstrapped and tested on aarch64-linux-gnu with no regressions.\nI have no way to test on arm even though this touches common code.\n\n\tPR target/102941\n\ngcc/ChangeLog:\n\n\t* config/arm/aarch-common.c (arm_md_asm_adjust):\n\tUse a temp if !REG_P.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/asm-flag-7.c: New test.\n\t* gcc.target/arm/asm-flag-7.c: New test.", "tree": {"sha": "4a959c3e8275b9c20937e24d0f277143c0f025fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a959c3e8275b9c20937e24d0f277143c0f025fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/997130f778c56466a825627644e510960585521b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/997130f778c56466a825627644e510960585521b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/997130f778c56466a825627644e510960585521b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/997130f778c56466a825627644e510960585521b/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42ae7ebfb2665f8565c8d6c04f6214785a6765ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42ae7ebfb2665f8565c8d6c04f6214785a6765ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42ae7ebfb2665f8565c8d6c04f6214785a6765ce"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "04a53d750935e2de8847fb02f8f64101f28e5ede", "filename": "gcc/config/arm/aarch-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997130f778c56466a825627644e510960585521b/gcc%2Fconfig%2Farm%2Faarch-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997130f778c56466a825627644e510960585521b/gcc%2Fconfig%2Farm%2Faarch-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-common.c?ref=997130f778c56466a825627644e510960585521b", "patch": "@@ -641,7 +641,7 @@ arm_md_asm_adjust (vec<rtx> &outputs, vec<rtx> & /*inputs*/,\n       rtx x = gen_rtx_REG (mode, CC_REGNUM);\n       x = gen_rtx_fmt_ee (code, word_mode, x, const0_rtx);\n \n-      if (dest_mode == word_mode)\n+      if (dest_mode == word_mode && REG_P (dest))\n \temit_insn (gen_rtx_SET (dest, x));\n       else\n \t{"}, {"sha": "6c31b854b0b359ce4ed6d4ab0087f190870b9d8c", "filename": "gcc/testsuite/gcc.target/aarch64/asm-flag-7.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997130f778c56466a825627644e510960585521b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasm-flag-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997130f778c56466a825627644e510960585521b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasm-flag-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasm-flag-7.c?ref=997130f778c56466a825627644e510960585521b", "patch": "@@ -0,0 +1,22 @@\n+/* Test that \"=@cc*\" works with MEM_P RTX  */\n+/* PR target/102941 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+#ifndef __GCC_ASM_FLAG_OUTPUTS__\n+#error \"missing preprocessor define\"\n+#endif\n+int test_cmpu_x;\n+\n+void f(long *);\n+long\n+test_cmpu_y() {\n+  long le;\n+  f(&le);\n+  __asm__(\"cmp %\"\n+          \"[x], %\"\n+          \"[y]\"\n+          : \"=@ccls\"(le)\n+          : [x] \"\"(test_cmpu_x), [y] \"\"(test_cmpu_y));\n+    return le;\n+}"}, {"sha": "ac11da0a3a8795eb74e52ca32a68482b08d7ae08", "filename": "gcc/testsuite/gcc.target/arm/asm-flag-7.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997130f778c56466a825627644e510960585521b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fasm-flag-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997130f778c56466a825627644e510960585521b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fasm-flag-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fasm-flag-7.c?ref=997130f778c56466a825627644e510960585521b", "patch": "@@ -0,0 +1,23 @@\n+/* Test that \"=@cc*\" works with MEM_P RTX  */\n+/* PR target/102941 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+/* { dg-skip-if \"\" { arm_thumb1 } } */\n+\n+#ifndef __GCC_ASM_FLAG_OUTPUTS__\n+#error \"missing preprocessor define\"\n+#endif\n+int test_cmpu_x;\n+\n+void f(long *);\n+long\n+test_cmpu_y() {\n+  long le;\n+  f(&le);\n+  __asm__(\"cmp %\"\n+          \"[x], %\"\n+          \"[y]\"\n+          : \"=@ccls\"(le)\n+          : [x] \"\"(test_cmpu_x), [y] \"\"(test_cmpu_y));\n+    return le;\n+}"}]}