{"sha": "8cadeff16d7cde70baac185d8516d7f8f2a7ae36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNhZGVmZjE2ZDdjZGU3MGJhYWMxODVkODUxNmQ3ZjhmMmE3YWUzNg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-01-15T17:44:37Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-01-15T17:44:37Z"}, "message": "c-semantics.c (genrtl_while_stmt): Improve initial RTL generation when loop condition is known true, i.e.\n\n\n\t* c-semantics.c (genrtl_while_stmt):  Improve initial RTL generation\n\twhen loop condition is known true, i.e.  \"while (1) { ... }\".\n\t(genrtl_for_stmt): Similarly for \"for\" statements.\n\nFrom-SVN: r61338", "tree": {"sha": "14006c67570f18b885e7bad79e770d76cd577a4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14006c67570f18b885e7bad79e770d76cd577a4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cadeff16d7cde70baac185d8516d7f8f2a7ae36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cadeff16d7cde70baac185d8516d7f8f2a7ae36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cadeff16d7cde70baac185d8516d7f8f2a7ae36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cadeff16d7cde70baac185d8516d7f8f2a7ae36/comments", "author": null, "committer": null, "parents": [{"sha": "03cd8aba32349dbbf5f2ccb9bddadd2bccaefd1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03cd8aba32349dbbf5f2ccb9bddadd2bccaefd1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03cd8aba32349dbbf5f2ccb9bddadd2bccaefd1b"}], "stats": {"total": 36, "additions": 24, "deletions": 12}, "files": [{"sha": "06387e8aaac74c55c07b9b1f525e6bab902381b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cadeff16d7cde70baac185d8516d7f8f2a7ae36/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cadeff16d7cde70baac185d8516d7f8f2a7ae36/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8cadeff16d7cde70baac185d8516d7f8f2a7ae36", "patch": "@@ -1,3 +1,9 @@\n+2003-01-15  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* c-semantics.c (genrtl_while_stmt):  Improve initial RTL generation\n+\twhen loop condition is known true, i.e.  \"while (1) { ... }\".\n+\t(genrtl_for_stmt): Similarly for \"for\" statements.\n+\n 2003-01-15  Roger Sayle  <roger@eyesopen.com>\n \n \t* real.c (real_sqrt): Return a bool result indicating whether"}, {"sha": "e19e73e47e88ddc4acfd3ab3e8693fbce799aaca", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cadeff16d7cde70baac185d8516d7f8f2a7ae36/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cadeff16d7cde70baac185d8516d7f8f2a7ae36/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=8cadeff16d7cde70baac185d8516d7f8f2a7ae36", "patch": "@@ -1,7 +1,7 @@\n /* This file contains the definitions and documentation for the common\n    tree codes used in the GNU C and C++ compilers (see c-common.def\n    for the standard codes).  \n-   Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n    Written by Benjamin Chelf (chelf@codesourcery.com).\n \n This file is part of GCC.\n@@ -424,16 +424,20 @@ void\n genrtl_while_stmt (t)\n      tree t;\n {\n-  tree cond;\n+  tree cond = WHILE_COND (t);\n+\n   emit_nop ();\n   emit_line_note (input_filename, lineno);\n   expand_start_loop (1); \n   genrtl_do_pushlevel ();\n \n-  cond = expand_cond (WHILE_COND (t));\n-  emit_line_note (input_filename, lineno);\n-  expand_exit_loop_top_cond (0, cond);\n-  genrtl_do_pushlevel ();\n+  if (cond && !integer_nonzerop (cond))\n+    {\n+      cond = expand_cond (cond);\n+      emit_line_note (input_filename, lineno);\n+      expand_exit_loop_top_cond (0, cond);\n+      genrtl_do_pushlevel ();\n+    }\n   \n   expand_stmt (WHILE_BODY (t));\n \n@@ -522,7 +526,7 @@ void\n genrtl_for_stmt (t)\n      tree t;\n {\n-  tree cond;\n+  tree cond = FOR_COND (t);\n   const char *saved_filename;\n   int saved_lineno;\n \n@@ -539,20 +543,22 @@ genrtl_for_stmt (t)\n   else\n     expand_start_loop (1);\n   genrtl_do_pushlevel ();\n-  cond = expand_cond (FOR_COND (t));\n \n   /* Save the filename and line number so that we expand the FOR_EXPR\n      we can reset them back to the saved values.  */\n   saved_filename = input_filename;\n   saved_lineno = lineno;\n \n   /* Expand the condition.  */\n-  emit_line_note (input_filename, lineno);\n-  if (cond)\n-    expand_exit_loop_top_cond (0, cond);\n+  if (cond && !integer_nonzerop (cond))\n+    {\n+      cond = expand_cond (cond);\n+      emit_line_note (input_filename, lineno);\n+      expand_exit_loop_top_cond (0, cond);\n+      genrtl_do_pushlevel ();\n+    }\n \n   /* Expand the body.  */\n-  genrtl_do_pushlevel ();\n   expand_stmt (FOR_BODY (t));\n \n   /* Expand the increment expression.  */"}]}