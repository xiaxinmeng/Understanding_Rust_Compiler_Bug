{"sha": "f7a06a988e73a9a0208af4f714ae40fb19d7e1ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdhMDZhOTg4ZTczYTlhMDIwOGFmNGY3MTRhZTQwZmIxOWQ3ZTFhZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-04-23T14:38:16Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-04-23T14:38:16Z"}, "message": "tree-vect-loop-manip.c (slpeel_add_loop_guard): Gimplify the condition using is_gimple_condexpr and avoid the not necessary...\n\n2012-04-23  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-vect-loop-manip.c (slpeel_add_loop_guard): Gimplify\n\tthe condition using is_gimple_condexpr and avoid the not necessary\n\tboolification.\n\t(set_prologue_iterations): Likewise.\n\t(vect_loop_versioning): Likewise.\n\nFrom-SVN: r186710", "tree": {"sha": "1da03108f44cb1b2f9ea810fe093306a780377ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1da03108f44cb1b2f9ea810fe093306a780377ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7a06a988e73a9a0208af4f714ae40fb19d7e1ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7a06a988e73a9a0208af4f714ae40fb19d7e1ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7a06a988e73a9a0208af4f714ae40fb19d7e1ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7a06a988e73a9a0208af4f714ae40fb19d7e1ae/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c6f9b038be55acdc36911affcb116a60dd1181da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6f9b038be55acdc36911affcb116a60dd1181da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6f9b038be55acdc36911affcb116a60dd1181da"}], "stats": {"total": 53, "additions": 25, "deletions": 28}, "files": [{"sha": "0128a289ec7b75983c83fd3715d8625bc16f4361", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a06a988e73a9a0208af4f714ae40fb19d7e1ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a06a988e73a9a0208af4f714ae40fb19d7e1ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7a06a988e73a9a0208af4f714ae40fb19d7e1ae", "patch": "@@ -1,3 +1,11 @@\n+2012-04-23  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-vect-loop-manip.c (slpeel_add_loop_guard): Gimplify\n+\tthe condition using is_gimple_condexpr and avoid the not necessary\n+\tboolification.\n+\t(set_prologue_iterations): Likewise.\n+\t(vect_loop_versioning): Likewise.\n+\n 2012-04-23  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/53070"}, {"sha": "32f57fe993af74f0b1f694f3e9d4db247d1a8803", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 17, "deletions": 28, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a06a988e73a9a0208af4f714ae40fb19d7e1ae/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a06a988e73a9a0208af4f714ae40fb19d7e1ae/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=f7a06a988e73a9a0208af4f714ae40fb19d7e1ae", "patch": "@@ -943,12 +943,11 @@ slpeel_add_loop_guard (basic_block guard_bb, tree cond,\n   enter_e->flags |= EDGE_FALSE_VALUE;\n   gsi = gsi_last_bb (guard_bb);\n \n-  cond = force_gimple_operand (cond, &gimplify_stmt_list, true, NULL_TREE);\n+  cond = force_gimple_operand_1 (cond, &gimplify_stmt_list, is_gimple_condexpr,\n+\t\t\t\t NULL_TREE);\n   if (gimplify_stmt_list)\n     gimple_seq_add_seq (&cond_expr_stmt_list, gimplify_stmt_list);\n-  cond_stmt = gimple_build_cond (NE_EXPR,\n-\t\t\t\t cond, build_int_cst (TREE_TYPE (cond), 0),\n-\t\t\t\t NULL_TREE, NULL_TREE);\n+  cond_stmt = gimple_build_cond_from_tree (cond, NULL_TREE, NULL_TREE);\n   if (cond_expr_stmt_list)\n     gsi_insert_seq_after (&gsi, cond_expr_stmt_list, GSI_NEW_STMT);\n \n@@ -1048,7 +1047,7 @@ set_prologue_iterations (basic_block bb_before_first_loop,\n   gimple newphi;\n   edge e_true, e_false, e_fallthru;\n   gimple cond_stmt;\n-  gimple_seq gimplify_stmt_list = NULL, stmts = NULL;\n+  gimple_seq stmts = NULL;\n   tree cost_pre_condition = NULL_TREE;\n   tree scalar_loop_iters =\n     unshare_expr (LOOP_VINFO_NITERS_UNCHANGED (loop_vec_info_for_loop (loop)));\n@@ -1070,21 +1069,15 @@ set_prologue_iterations (basic_block bb_before_first_loop,\n \n   e_fallthru = EDGE_SUCC (then_bb, 0);\n \n+  gsi = gsi_last_bb (cond_bb);\n   cost_pre_condition =\n     fold_build2 (LE_EXPR, boolean_type_node, scalar_loop_iters,\n \t         build_int_cst (TREE_TYPE (scalar_loop_iters), th));\n   cost_pre_condition =\n-    force_gimple_operand (cost_pre_condition, &gimplify_stmt_list,\n-\t\t\t  true, NULL_TREE);\n-  cond_stmt = gimple_build_cond (NE_EXPR, cost_pre_condition,\n-\t\t\t\t build_int_cst (TREE_TYPE (cost_pre_condition),\n-\t\t\t\t\t\t0), NULL_TREE, NULL_TREE);\n-\n-  gsi = gsi_last_bb (cond_bb);\n-  if (gimplify_stmt_list)\n-    gsi_insert_seq_after (&gsi, gimplify_stmt_list, GSI_NEW_STMT);\n-\n-  gsi = gsi_last_bb (cond_bb);\n+    force_gimple_operand_gsi_1 (&gsi, cost_pre_condition, is_gimple_condexpr,\n+\t\t\t\tNULL_TREE, false, GSI_CONTINUE_LINKING);\n+  cond_stmt = gimple_build_cond_from_tree (cost_pre_condition,\n+\t\t\t\t\t   NULL_TREE, NULL_TREE);\n   gsi_insert_after (&gsi, cond_stmt, GSI_NEW_STMT);\n \n   var = create_tmp_var (TREE_TYPE (scalar_loop_iters),\n@@ -2571,25 +2564,21 @@ vect_loop_versioning (loop_vec_info loop_vinfo, bool do_versioning,\n   th = conservative_cost_threshold (loop_vinfo,\n \t\t\t\t    min_profitable_iters);\n \n-  *cond_expr =\n-    fold_build2 (GT_EXPR, boolean_type_node, scalar_loop_iters,\n- \t         build_int_cst (TREE_TYPE (scalar_loop_iters), th));\n-\n-  *cond_expr = force_gimple_operand (*cond_expr, cond_expr_stmt_list,\n-\t\t\t\t     false, NULL_TREE);\n+  *cond_expr = fold_build2 (GT_EXPR, boolean_type_node, scalar_loop_iters,\n+\t\t\t    build_int_cst (TREE_TYPE (scalar_loop_iters), th));\n+  *cond_expr = force_gimple_operand_1 (*cond_expr, cond_expr_stmt_list,\n+\t\t\t\t       is_gimple_condexpr, NULL_TREE);\n \n   if (LOOP_REQUIRES_VERSIONING_FOR_ALIGNMENT (loop_vinfo))\n-      vect_create_cond_for_align_checks (loop_vinfo, cond_expr,\n-\t\t\t\t\t cond_expr_stmt_list);\n+    vect_create_cond_for_align_checks (loop_vinfo, cond_expr,\n+\t\t\t\t       cond_expr_stmt_list);\n \n   if (LOOP_REQUIRES_VERSIONING_FOR_ALIAS (loop_vinfo))\n     vect_create_cond_for_alias_checks (loop_vinfo, cond_expr,\n \t\t\t\t       cond_expr_stmt_list);\n \n-  *cond_expr =\n-    fold_build2 (NE_EXPR, boolean_type_node, *cond_expr, integer_zero_node);\n-  *cond_expr =\n-    force_gimple_operand (*cond_expr, &gimplify_stmt_list, true, NULL_TREE);\n+  *cond_expr = force_gimple_operand_1 (*cond_expr, &gimplify_stmt_list,\n+\t\t\t\t       is_gimple_condexpr, NULL_TREE);\n   gimple_seq_add_seq (cond_expr_stmt_list, gimplify_stmt_list);\n \n   /* If we only needed the extra conditions and a new loop copy"}]}