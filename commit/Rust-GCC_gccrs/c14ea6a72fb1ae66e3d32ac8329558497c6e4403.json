{"sha": "c14ea6a72fb1ae66e3d32ac8329558497c6e4403", "node_id": "C_kwDOANBUbNoAKGMxNGVhNmE3MmZiMWFlNjZlM2QzMmFjODMyOTU1ODQ5N2M2ZTQ0MDM", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-01-19T13:04:42Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-03-04T13:20:59Z"}, "message": "Catch 'GIMPLE_DEBUG' misbehavior in OpenACC 'kernels' decomposition [PR100400, PR103836, PR104061]\n\nActually fixing it is a separate task, but it seems prudent to at least catch\nit, and document via a few test cases.\n\n\tgcc/\n\tPR middle-end/100400\n\tPR middle-end/103836\n\tPR middle-end/104061\n\t* omp-oacc-kernels-decompose.cc (decompose_kernels_region_body):\n\tCatch 'GIMPLE_DEBUG'.\n\tgcc/testsuite/\n\tPR middle-end/100400\n\tPR middle-end/103836\n\tPR middle-end/104061\n\t* c-c++-common/goacc/kernels-decompose-pr100400-1-1.c: New.\n\t* c-c++-common/goacc/kernels-decompose-pr100400-1-2.c: New.\n\t* c-c++-common/goacc/kernels-decompose-pr100400-1-3.c: New.\n\t* c-c++-common/goacc/kernels-decompose-pr100400-1-4.c: New.\n\t* c-c++-common/goacc/kernels-decompose-pr103836-1-1.c: New.\n\t* c-c++-common/goacc/kernels-decompose-pr103836-1-2.c: New.\n\t* c-c++-common/goacc/kernels-decompose-pr103836-1-3.c: New.\n\t* c-c++-common/goacc/kernels-decompose-pr103836-1-4.c: New.\n\t* c-c++-common/goacc/kernels-decompose-pr104061-1-1.c: New.\n\t* c-c++-common/goacc/kernels-decompose-pr104061-1-2.c: New.\n\t* c-c++-common/goacc/kernels-decompose-pr104061-1-3.c: New.\n\t* c-c++-common/goacc/kernels-decompose-pr104061-1-4.c: New.", "tree": {"sha": "4b59a832da02f59d19875c9f4c398b5aea169c77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b59a832da02f59d19875c9f4c398b5aea169c77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c14ea6a72fb1ae66e3d32ac8329558497c6e4403", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c14ea6a72fb1ae66e3d32ac8329558497c6e4403", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c14ea6a72fb1ae66e3d32ac8329558497c6e4403", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c14ea6a72fb1ae66e3d32ac8329558497c6e4403/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e085900fa10e28b684d656b66557d181247a1a48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e085900fa10e28b684d656b66557d181247a1a48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e085900fa10e28b684d656b66557d181247a1a48"}], "stats": {"total": 427, "additions": 427, "deletions": 0}, "files": [{"sha": "98eafdbe3a11626698d8e15ab779a3f21452b4ec", "filename": "gcc/omp-oacc-kernels-decompose.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14ea6a72fb1ae66e3d32ac8329558497c6e4403/gcc%2Fomp-oacc-kernels-decompose.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14ea6a72fb1ae66e3d32ac8329558497c6e4403/gcc%2Fomp-oacc-kernels-decompose.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-oacc-kernels-decompose.cc?ref=c14ea6a72fb1ae66e3d32ac8329558497c6e4403", "patch": "@@ -1255,6 +1255,16 @@ decompose_kernels_region_body (gimple *kernels_region, tree kernels_clauses)\n       gsi_next (&gsi_n);\n \n       gimple *stmt = gsi_stmt (gsi);\n+      if (gimple_code (stmt) == GIMPLE_DEBUG)\n+\t{\n+\t  if (flag_compare_debug_opt || flag_compare_debug)\n+\t    /* Let the usual '-fcompare-debug' analysis bail out, as\n+\t       necessary.  */\n+\t    ;\n+\t  else\n+\t    sorry_at (loc, \"%qs not yet supported\",\n+\t\t      gimple_code_name[gimple_code (stmt)]);\n+\t}\n       gimple *omp_for = top_level_omp_for_in_stmt (stmt);\n       bool is_unconditional_oacc_for_loop = false;\n       if (omp_for != NULL)"}, {"sha": "b1b094f9d4f77e790b7f79a8a4df4af7fde089b0", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr100400-1-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14ea6a72fb1ae66e3d32ac8329558497c6e4403/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr100400-1-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14ea6a72fb1ae66e3d32ac8329558497c6e4403/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr100400-1-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr100400-1-1.c?ref=c14ea6a72fb1ae66e3d32ac8329558497c6e4403", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-additional-options \"--param openacc-kernels=decompose\" } */\n+\n+/* { dg-additional-options \"-g0\" } */\n+/* { dg-additional-options \"-O1\" } */\n+\n+/* { dg-additional-options \"-fopt-info-all-omp\" } */\n+\n+/* { dg-additional-options \"--param=openacc-privatization=noisy\" } */\n+\n+int *p;\n+\n+void\n+foo (void)\n+{\n+#pragma acc kernels /* { dg-line l_compute1 } */\n+  /* { dg-note {variable 'c' declared in block is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_compute1 } */\n+  /* { dg-note {variable 'c\\.0' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute1 } */\n+  {\n+    int c;\n+\n+    /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n+    p = &c;\n+\n+    /* { dg-note {parallelized loop nest in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n+#pragma acc loop independent /* { dg-line l_loop_c1 } */\n+    /* { dg-note {variable 'c\\.0' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_c1 } */\n+    /* { dg-note {variable 'c' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop_c1 }\n+       { dg-note {variable 'c' ought to be adjusted for OpenACC privatization level: 'vector'} {} { target *-*-* } l_loop_c1 } */\n+    /* { dg-optimized {assigned OpenACC gang vector loop parallelism} {} { target *-*-* } l_loop_c1 } */\n+    for (c = 0; c < 1; ++c)\n+      ;\n+  }\n+}"}, {"sha": "0bc4844560a95d58c4ca0c8749f2df7b2e93f08a", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr100400-1-2.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14ea6a72fb1ae66e3d32ac8329558497c6e4403/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr100400-1-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14ea6a72fb1ae66e3d32ac8329558497c6e4403/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr100400-1-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr100400-1-2.c?ref=c14ea6a72fb1ae66e3d32ac8329558497c6e4403", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-additional-options \"--param openacc-kernels=decompose\" } */\n+\n+/* { dg-additional-options \"-fchecking\" }\n+   { dg-ice TODO { c++ } }\n+   { dg-prune-output \"during GIMPLE pass: omp_oacc_kernels_decompose\" } */\n+\n+/* { dg-additional-options \"-g\" } */\n+/* { dg-additional-options \"-O1\" } so that we may get some 'GIMPLE_DEBUG's.  */\n+\n+/* { dg-additional-options \"-fopt-info-all-omp\" } */\n+\n+/* { dg-additional-options \"--param=openacc-privatization=noisy\" } */\n+\n+int *p;\n+\n+void\n+foo (void)\n+{\n+  /* { dg-bogus {sorry, unimplemented: 'gimple_debug' not yet supported} TODO { xfail *-*-* } .+1 } */\n+#pragma acc kernels /* { dg-line l_compute1 } */\n+  /* { dg-note {variable 'c' declared in block is candidate for adjusting OpenACC privatization level} {} { xfail *-*-* } l_compute1 } */\n+  /* { dg-note {variable 'c\\.0' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { xfail *-*-* } l_compute1 } */\n+  {\n+    /* { dg-bogus {note: beginning 'gang-single' part in OpenACC 'kernels' region} {w/ debug} { xfail c++ } .-1 }\n+       { dg-bogus {note: beginning 'gang-single' part in OpenACC 'kernels' region} {w/ debug} { xfail c } .+1 } */\n+    int c;\n+\n+    /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { xfail *-*-* } .+1 } */\n+    p = &c;\n+\n+    /* { dg-note {parallelized loop nest in OpenACC 'kernels' region} {} { xfail c++ } .+1 } */\n+#pragma acc loop independent /* { dg-line l_loop_c1 } */\n+    /* { dg-note {variable 'c\\.0' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { xfail *-*-* } l_loop_c1 } */\n+    /* { dg-note {variable 'c' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { xfail *-*-* } l_loop_c1 }\n+       { dg-note {variable 'c' ought to be adjusted for OpenACC privatization level: 'vector'} {} { xfail *-*-* } l_loop_c1 } */\n+    /* { dg-optimized {assigned OpenACC gang vector loop parallelism} {} { xfail *-*-* } l_loop_c1 } */\n+    for (c = 0; c < 1; ++c)\n+      ;\n+  }\n+}"}, {"sha": "6c2cbf883053680c523568cadbdd8f6d6758dcd4", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr100400-1-3.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14ea6a72fb1ae66e3d32ac8329558497c6e4403/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr100400-1-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14ea6a72fb1ae66e3d32ac8329558497c6e4403/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr100400-1-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr100400-1-3.c?ref=c14ea6a72fb1ae66e3d32ac8329558497c6e4403", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-additional-options \"--param openacc-kernels=decompose\" } */\n+\n+/* { dg-additional-options \"-fchecking\" }\n+   { dg-ice TODO { c++ } }\n+   { dg-prune-output \"during GIMPLE pass: omp_oacc_kernels_decompose\" } */\n+\n+/* { dg-additional-options \"-fcompare-debug\" } -- w/o debug compiled first.\n+   { dg-bogus {error: during '-fcompare-debug' recompilation} TODO { xfail c++ } 0 }\n+   { dg-bogus {error: [^\\n\\r]+: '-fcompare-debug' failure \\(length\\)} TODO { xfail c++ } 0 } */\n+/* { dg-additional-options \"-O1\" } so that we may get some 'GIMPLE_DEBUG's.  */\n+\n+/* { dg-additional-options \"-fopt-info-all-omp\" } */\n+\n+/* { dg-additional-options \"--param=openacc-privatization=noisy\" } */\n+\n+int *p;\n+\n+void\n+foo (void)\n+{\n+  /* { dg-bogus {sorry, unimplemented: 'gimple_debug' not yet supported} {} { target *-*-* } .+1 } suppressed via '-fcompare-debug'.  */\n+#pragma acc kernels /* { dg-line l_compute1 } */\n+  /* { dg-note {variable 'c' declared in block is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_compute1 } */\n+  /* { dg-note {variable 'c\\.0' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute1 } */\n+  {\n+    /* { dg-bogus {note: beginning 'gang-single' part in OpenACC 'kernels' region} {w/ debug} { xfail c++ } .-1 }\n+       { dg-bogus {note: beginning 'gang-single' part in OpenACC 'kernels' region} {w/ debug} { xfail c } .+1 } */\n+    int c;\n+\n+    /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n+    p = &c;\n+\n+    /* { dg-note {parallelized loop nest in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n+#pragma acc loop independent /* { dg-line l_loop_c1 } */\n+    /* { dg-note {variable 'c\\.0' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_c1 } */\n+    /* { dg-note {variable 'c' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop_c1 }\n+       { dg-note {variable 'c' ought to be adjusted for OpenACC privatization level: 'vector'} {} { target *-*-* } l_loop_c1 } */\n+    /* { dg-optimized {assigned OpenACC gang vector loop parallelism} {} { target *-*-* } l_loop_c1 } */\n+    for (c = 0; c < 1; ++c)\n+      ;\n+  }\n+}"}, {"sha": "fc66a3e7febd121961bfdd6e7090c2d23f810580", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr100400-1-4.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14ea6a72fb1ae66e3d32ac8329558497c6e4403/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr100400-1-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14ea6a72fb1ae66e3d32ac8329558497c6e4403/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr100400-1-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr100400-1-4.c?ref=c14ea6a72fb1ae66e3d32ac8329558497c6e4403", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-additional-options \"--param openacc-kernels=decompose\" } */\n+\n+/* { dg-additional-options \"-fchecking\" }\n+   { dg-ice TODO { c++ } }\n+   { dg-prune-output \"during GIMPLE pass: omp_oacc_kernels_decompose\" } */\n+\n+/* { dg-additional-options \"-g -fcompare-debug\" } -- w/ debug compiled first.  */\n+/* { dg-additional-options \"-O1\" } so that we may get some 'GIMPLE_DEBUG's.  */\n+\n+/* { dg-additional-options \"-fopt-info-all-omp\" } */\n+\n+/* { dg-additional-options \"--param=openacc-privatization=noisy\" } */\n+\n+int *p;\n+\n+void\n+foo (void)\n+{\n+  /* { dg-bogus {sorry, unimplemented: 'gimple_debug' not yet supported} {} { target *-*-* } .+1 } suppressed via '-fcompare-debug'.  */\n+#pragma acc kernels /* { dg-line l_compute1 } */\n+  /* { dg-note {variable 'c' declared in block is candidate for adjusting OpenACC privatization level} {} { xfail c++ } l_compute1 } */\n+  /* { dg-note {variable 'c\\.0' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { xfail c++ } l_compute1 } */\n+  {\n+    /* { dg-bogus {note: beginning 'gang-single' part in OpenACC 'kernels' region} {w/ debug} { xfail c++ } .-1 }\n+       { dg-bogus {note: beginning 'gang-single' part in OpenACC 'kernels' region} {w/ debug} { xfail c } .+1 } */\n+    int c;\n+\n+    /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { xfail c++ } .+1 } */\n+    p = &c;\n+\n+    /* { dg-note {parallelized loop nest in OpenACC 'kernels' region} {} { xfail c++ } .+1 } */\n+#pragma acc loop independent /* { dg-line l_loop_c1 } */\n+    /* { dg-note {variable 'c\\.0' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { xfail c++ } l_loop_c1 } */\n+    /* { dg-note {variable 'c' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { xfail c++ } l_loop_c1 }\n+       { dg-note {variable 'c' ought to be adjusted for OpenACC privatization level: 'vector'} {} { xfail c++ } l_loop_c1 } */\n+    /* { dg-optimized {assigned OpenACC gang vector loop parallelism} {} { xfail c++ } l_loop_c1 } */\n+    for (c = 0; c < 1; ++c)\n+      ;\n+  }\n+}"}, {"sha": "253e4d6e2ee63d6f881a16fcc864eaec64521db3", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr103836-1-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14ea6a72fb1ae66e3d32ac8329558497c6e4403/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr103836-1-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14ea6a72fb1ae66e3d32ac8329558497c6e4403/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr103836-1-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr103836-1-1.c?ref=c14ea6a72fb1ae66e3d32ac8329558497c6e4403", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-additional-options \"--param openacc-kernels=decompose\" } */\n+\n+/* { dg-additional-options \"-g0\" } */\n+/* { dg-additional-options \"-O1\" } */\n+\n+/* { dg-additional-options \"-fopt-info-all-omp\" } */\n+\n+/* { dg-additional-options \"--param=openacc-privatization=noisy\" } */\n+\n+extern int i;\n+\n+void\n+f_acc_kernels (void)\n+{\n+#pragma acc kernels /* { dg-line l_compute1 } */\n+  /* { dg-note {variable 'i\\.0' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute1 } */\n+  {\n+    /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } .+1 } */\n+#pragma acc loop /* { dg-line l_loop_i1 } */\n+    /* { dg-note {variable 'i\\.0' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i1 } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i1 } */\n+    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_i1 } */\n+    for (i = 0; i < 2; ++i)\n+      ;\n+  }\n+}"}, {"sha": "83690b6d1abc82de4a745f4edcf7684a09dea755", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr103836-1-2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14ea6a72fb1ae66e3d32ac8329558497c6e4403/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr103836-1-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14ea6a72fb1ae66e3d32ac8329558497c6e4403/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr103836-1-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr103836-1-2.c?ref=c14ea6a72fb1ae66e3d32ac8329558497c6e4403", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-additional-options \"--param openacc-kernels=decompose\" } */\n+\n+/* { dg-additional-options \"-g\" } */\n+/* { dg-additional-options \"-O1\" } so that we may get some 'GIMPLE_DEBUG's.  */\n+\n+/* { dg-additional-options \"-fopt-info-all-omp\" } */\n+\n+/* { dg-additional-options \"--param=openacc-privatization=noisy\" } */\n+\n+extern int i;\n+\n+void\n+f_acc_kernels (void)\n+{\n+  /* { dg-bogus {sorry, unimplemented: 'gimple_debug' not yet supported} TODO { xfail c++ } .+1 } */\n+#pragma acc kernels /* { dg-line l_compute1 } */\n+  /* { dg-note {variable 'i\\.0' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { xfail c++ } l_compute1 } */\n+  {\n+    /* { dg-bogus {note: beginning 'gang-single' part in OpenACC 'kernels' region} {w/ debug} { xfail c++ } .-1 } */\n+\n+    /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } .+1 } */\n+#pragma acc loop /* { dg-line l_loop_i1 } */\n+    /* { dg-note {variable 'i\\.0' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { xfail c++ } l_loop_i1 } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { xfail c++ } l_loop_i1 } */\n+    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { xfail c++ } l_loop_i1 } */\n+    for (i = 0; i < 2; ++i)\n+      ;\n+  }\n+}"}, {"sha": "35892a01d642fe1218b7999f4d3bfb55b67bcd26", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr103836-1-3.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14ea6a72fb1ae66e3d32ac8329558497c6e4403/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr103836-1-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14ea6a72fb1ae66e3d32ac8329558497c6e4403/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr103836-1-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr103836-1-3.c?ref=c14ea6a72fb1ae66e3d32ac8329558497c6e4403", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-additional-options \"--param openacc-kernels=decompose\" } */\n+\n+/* { dg-additional-options \"-fcompare-debug\" } -- w/o debug compiled first.\n+   { dg-bogus {error: [^\\n\\r]+: '-fcompare-debug' failure \\(length\\)} TODO { xfail c++ } 0 } */\n+/* { dg-additional-options \"-O1\" } so that we may get some 'GIMPLE_DEBUG's.  */\n+\n+/* { dg-additional-options \"-fopt-info-all-omp\" } */\n+\n+/* { dg-additional-options \"--param=openacc-privatization=noisy\" } */\n+\n+extern int i;\n+\n+void\n+f_acc_kernels (void)\n+{\n+  /* { dg-bogus {sorry, unimplemented: 'gimple_debug' not yet supported} {} { target *-*-* } .+1 } */\n+#pragma acc kernels /* { dg-line l_compute1 } */\n+  /* { dg-note {variable 'i\\.0' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute1 } */\n+  {\n+    /* { dg-bogus {note: beginning 'gang-single' part in OpenACC 'kernels' region} {w/ debug} { xfail c++ } .-1 } */\n+\n+    /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } .+1 } */\n+#pragma acc loop /* { dg-line l_loop_i1 } */\n+    /* { dg-note {variable 'i\\.0' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i1 } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i1 } */\n+    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_i1 } */\n+    for (i = 0; i < 2; ++i)\n+      ;\n+  }\n+}"}, {"sha": "549ad5dc29169b96d8be37e1fd2464c4fd8231ac", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr103836-1-4.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14ea6a72fb1ae66e3d32ac8329558497c6e4403/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr103836-1-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14ea6a72fb1ae66e3d32ac8329558497c6e4403/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr103836-1-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr103836-1-4.c?ref=c14ea6a72fb1ae66e3d32ac8329558497c6e4403", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-additional-options \"--param openacc-kernels=decompose\" } */\n+\n+/* { dg-additional-options \"-g -fcompare-debug\" } -- w/ debug compiled first.\n+   { dg-bogus {error: [^\\n\\r]+: '-fcompare-debug' failure \\(length\\)} TODO { xfail c++ } 0 } */\n+/* { dg-additional-options \"-O1\" } so that we may get some 'GIMPLE_DEBUG's.  */\n+\n+/* { dg-additional-options \"-fopt-info-all-omp\" } */\n+\n+/* { dg-additional-options \"--param=openacc-privatization=noisy\" } */\n+\n+extern int i;\n+\n+void\n+f_acc_kernels (void)\n+{\n+  /* { dg-bogus {sorry, unimplemented: 'gimple_debug' not yet supported} {} { target *-*-* } .+1 } */\n+#pragma acc kernels /* { dg-line l_compute1 } */\n+  /* { dg-note {variable 'i\\.0' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute1 } */\n+  {\n+    /* { dg-bogus {note: beginning 'gang-single' part in OpenACC 'kernels' region} {w/ debug} { xfail c++ } .-1 } */\n+\n+    /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } .+1 } */\n+#pragma acc loop /* { dg-line l_loop_i1 } */\n+    /* { dg-note {variable 'i\\.0' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i1 } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i1 } */\n+    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_i1 } */\n+    for (i = 0; i < 2; ++i)\n+      ;\n+  }\n+}"}, {"sha": "35ae81f11a2c29365b4ef5e2cc4aba802e507e28", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr104061-1-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14ea6a72fb1ae66e3d32ac8329558497c6e4403/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14ea6a72fb1ae66e3d32ac8329558497c6e4403/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-1.c?ref=c14ea6a72fb1ae66e3d32ac8329558497c6e4403", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-additional-options \"--param openacc-kernels=decompose\" } */\n+\n+/* { dg-additional-options \"-g0\" } */\n+/* { dg-additional-options \"-O1\" } */\n+\n+/* { dg-additional-options \"-fopt-info-all-omp\" } */\n+\n+/* { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   Prune a few: uninteresting, and potentially varying depending on GCC configuration (data types):\n+   { dg-prune-output {note: variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} } */\n+\n+int arr_0;\n+\n+void\n+foo (void)\n+{\n+#pragma acc kernels /* { dg-line l_compute1 } */\n+  /* { dg-note {variable 'arr_0\\.0' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute1 } */\n+  {\n+    int k;\n+\n+    /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } .+1 } */\n+#pragma acc loop /* { dg-line l_loop_k1 } */\n+    /* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_k1 } */\n+    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_k1 } */\n+    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_k1 } */\n+    for (k = 0; k < 2; k++)\n+      arr_0 += k;\n+  }\n+}"}, {"sha": "ea58ea4c1610eb48bf942f231e08fa6d4f76901d", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr104061-1-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14ea6a72fb1ae66e3d32ac8329558497c6e4403/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14ea6a72fb1ae66e3d32ac8329558497c6e4403/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-2.c?ref=c14ea6a72fb1ae66e3d32ac8329558497c6e4403", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-additional-options \"--param openacc-kernels=decompose\" } */\n+\n+/* { dg-additional-options \"-g\" } */\n+/* { dg-additional-options \"-O1\" } so that we may get some 'GIMPLE_DEBUG's.  */\n+\n+/* { dg-additional-options \"-fopt-info-all-omp\" } */\n+\n+/* { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   Prune a few: uninteresting, and potentially varying depending on GCC configuration (data types):\n+   { dg-prune-output {note: variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} } */\n+\n+int arr_0;\n+\n+void\n+foo (void)\n+{\n+  /* { dg-bogus {sorry, unimplemented: 'gimple_debug' not yet supported} TODO { xfail *-*-* } .+1 } */\n+#pragma acc kernels /* { dg-line l_compute1 } */\n+  /* { dg-note {variable 'arr_0\\.0' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { xfail *-*-* } l_compute1 } */\n+  {\n+    /* { dg-bogus {note: beginning 'gang-single' part in OpenACC 'kernels' region} {w/ debug} { xfail c++ } .-1 }\n+       { dg-bogus {note: beginning 'gang-single' part in OpenACC 'kernels' region} {w/ debug} { xfail c } .+1 } */\n+    int k;\n+\n+    /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } .+1 } */\n+#pragma acc loop /* { dg-line l_loop_k1 } */\n+    /* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { xfail *-*-* } l_loop_k1 } */\n+    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { xfail *-*-* } l_loop_k1 } */\n+    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { xfail *-*-* } l_loop_k1 } */\n+    for (k = 0; k < 2; k++)\n+      arr_0 += k;\n+  }\n+}"}, {"sha": "ee3fcc7c39a5e86db086008a1520052c797352a3", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr104061-1-3.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14ea6a72fb1ae66e3d32ac8329558497c6e4403/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14ea6a72fb1ae66e3d32ac8329558497c6e4403/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-3.c?ref=c14ea6a72fb1ae66e3d32ac8329558497c6e4403", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-additional-options \"--param openacc-kernels=decompose\" } */\n+\n+/* { dg-additional-options \"-fchecking\" }\n+   { dg-ice TODO }\n+   { dg-prune-output {D\\.[0-9]+ = arr_0\\.0 \\+ k;} }\n+   { dg-prune-output {during GIMPLE pass: lower} } */\n+\n+/* { dg-additional-options \"-fcompare-debug\" } -- w/o debug compiled first.\n+   { dg-bogus {error: during '-fcompare-debug' recompilation} TODO { xfail *-*-* } 0 }\n+   { dg-bogus {error: [^\\n\\r]+: '-fcompare-debug' failure \\(length\\)} TODO { xfail *-*-* } 0 } */\n+/* { dg-additional-options \"-O1\" } so that we may get some 'GIMPLE_DEBUG's.  */\n+\n+/* { dg-additional-options \"-fopt-info-all-omp\" } */\n+\n+/* { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   Prune a few: uninteresting, and potentially varying depending on GCC configuration (data types):\n+   { dg-prune-output {note: variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} } */\n+\n+int arr_0;\n+\n+void\n+foo (void)\n+{\n+  /* { dg-bogus {sorry, unimplemented: 'gimple_debug' not yet supported} {} { target *-*-* } .+1 } suppressed via '-fcompare-debug'.  */\n+#pragma acc kernels /* { dg-line l_compute1 } */\n+  /* { dg-bogus {note: variable 'k' declared in block is candidate for adjusting OpenACC privatization level} {w/ debug} { xfail *-*-* } l_compute1 } */\n+  /* { dg-note {variable 'arr_0\\.0' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute1 } */\n+  {\n+    /* { dg-bogus {note: beginning 'gang-single' part in OpenACC 'kernels' region} {w/ debug} { xfail c++ } .-1 }\n+       { dg-bogus {note: beginning 'gang-single' part in OpenACC 'kernels' region} {w/ debug} { xfail c } .+1 } */\n+    int k;\n+\n+    /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } .+1 } */\n+#pragma acc loop /* { dg-line l_loop_k1 } */\n+    /* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_k1 } */\n+    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_k1 } */\n+    /* { dg-bogus {note: variable 'k' in 'private' clause is candidate for adjusting OpenACC privatization level} {w/ debug} { xfail *-*-* } l_loop_k1 } */\n+    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_k1 } */\n+    for (k = 0; k < 2; k++)\n+      arr_0 += k;\n+      /* { dg-bogus {error: invalid operands in binary operation} {w/ debug} { xfail *-*-* } .-1 } */\n+  }\n+}"}, {"sha": "c140e61e3b5ab538bca2adffd0bb9ddec08fbdc2", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr104061-1-4.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14ea6a72fb1ae66e3d32ac8329558497c6e4403/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14ea6a72fb1ae66e3d32ac8329558497c6e4403/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-4.c?ref=c14ea6a72fb1ae66e3d32ac8329558497c6e4403", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-additional-options \"--param openacc-kernels=decompose\" } */\n+\n+/* { dg-additional-options \"-fchecking\" }\n+   { dg-ice TODO }\n+   { dg-prune-output {D\\.[0-9]+ = arr_0\\.0 \\+ k;} }\n+   { dg-prune-output {during GIMPLE pass: lower} } */\n+\n+/* { dg-additional-options \"-g -fcompare-debug\" } -- w/ debug compiled first.  */\n+/* { dg-additional-options \"-O1\" } so that we may get some 'GIMPLE_DEBUG's.  */\n+\n+/* { dg-additional-options \"-fopt-info-all-omp\" } */\n+\n+/* { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   Prune a few: uninteresting, and potentially varying depending on GCC configuration (data types):\n+   { dg-prune-output {note: variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} } */\n+\n+int arr_0;\n+\n+void\n+foo (void)\n+{\n+  /* { dg-bogus {sorry, unimplemented: 'gimple_debug' not yet supported} {} { target *-*-* } .+1 } suppressed via '-fcompare-debug'.  */\n+#pragma acc kernels /* { dg-line l_compute1 } */\n+  /* { dg-bogus {note: variable 'k' declared in block is candidate for adjusting OpenACC privatization level} {w/ debug} { xfail *-*-* } l_compute1 } */\n+  /* { dg-note {variable 'arr_0\\.0' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute1 } */\n+  {\n+    /* { dg-bogus {note: beginning 'gang-single' part in OpenACC 'kernels' region} {w/ debug} { xfail c++ } .-1 }\n+       { dg-bogus {note: beginning 'gang-single' part in OpenACC 'kernels' region} {w/ debug} { xfail c } .+1 } */\n+    int k;\n+\n+    /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } .+1 } */\n+#pragma acc loop /* { dg-line l_loop_k1 } */\n+    /* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { xfail *-*-* } l_loop_k1 } */\n+    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { xfail *-*-* } l_loop_k1 } */\n+    /* { dg-bogus {note: variable 'k' in 'private' clause is candidate for adjusting OpenACC privatization level} {w/ debug} { xfail *-*-* } l_loop_k1 } */\n+    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { xfail *-*-* } l_loop_k1 } */\n+    for (k = 0; k < 2; k++)\n+      arr_0 += k;\n+      /* { dg-bogus {error: invalid operands in binary operation} {w/ debug} { xfail *-*-* } .-1 } */\n+  }\n+}"}]}