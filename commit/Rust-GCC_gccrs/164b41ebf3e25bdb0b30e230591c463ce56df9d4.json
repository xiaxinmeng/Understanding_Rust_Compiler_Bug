{"sha": "164b41ebf3e25bdb0b30e230591c463ce56df9d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY0YjQxZWJmM2UyNWJkYjBiMzBlMjMwNTkxYzQ2M2NlNTZkZjlkNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-10-12T11:20:25Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-12T11:20:25Z"}, "message": "Do not copy std:call_once arguments (LWG 2442)\n\n\t* doc/xml/manual/intro.xml: Document LWG 2442 status.\n\t* include/std/mutex [_GLIBCXX_HAVE_TLS] (__once_call_impl): Remove.\n\t[_GLIBCXX_HAVE_TLS] (_Once_call): Declare primary template and define\n\tpartial specialization to unpack args and forward to std::invoke.\n\t(call_once) [_GLIBCXX_HAVE_TLS]: Use forward_as_tuple and _Once_call\n\tinstead of __bind_simple and __once_call_impl.\n\t(call_once) [!_GLIBCXX_HAVE_TLS]: Use __invoke instead of\n\t__bind_simple.\n\t* testsuite/30_threads/call_once/dr2442.cc: New test.\n\nFrom-SVN: r241031", "tree": {"sha": "3216774db7ccc7f7708ef860c8e890d4286a89aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3216774db7ccc7f7708ef860c8e890d4286a89aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/164b41ebf3e25bdb0b30e230591c463ce56df9d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/164b41ebf3e25bdb0b30e230591c463ce56df9d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/164b41ebf3e25bdb0b30e230591c463ce56df9d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/164b41ebf3e25bdb0b30e230591c463ce56df9d4/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a15ebbcde01c0d6b941f24fcb70cc1412a033b6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a15ebbcde01c0d6b941f24fcb70cc1412a033b6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a15ebbcde01c0d6b941f24fcb70cc1412a033b6d"}], "stats": {"total": 99, "additions": 87, "deletions": 12}, "files": [{"sha": "6dfe2637fe25de3f46ad10b452b19ac97626712e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/164b41ebf3e25bdb0b30e230591c463ce56df9d4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/164b41ebf3e25bdb0b30e230591c463ce56df9d4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=164b41ebf3e25bdb0b30e230591c463ce56df9d4", "patch": "@@ -1,3 +1,15 @@\n+2016-10-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/intro.xml: Document LWG 2442 status.\n+\t* include/std/mutex [_GLIBCXX_HAVE_TLS] (__once_call_impl): Remove.\n+\t[_GLIBCXX_HAVE_TLS] (_Once_call): Declare primary template and define\n+\tpartial specialization to unpack args and forward to std::invoke.\n+\t(call_once) [_GLIBCXX_HAVE_TLS]: Use forward_as_tuple and _Once_call\n+\tinstead of __bind_simple and __once_call_impl.\n+\t(call_once) [!_GLIBCXX_HAVE_TLS]: Use __invoke instead of\n+\t__bind_simple.\n+\t* testsuite/30_threads/call_once/dr2442.cc: New test.\n+\n 2016-10-11  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/stl_list.h (assign(initializer_list<value_type>)): Call"}, {"sha": "528b1920cdafb8eb85a206857bbadd6e1e71455c", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/164b41ebf3e25bdb0b30e230591c463ce56df9d4/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/164b41ebf3e25bdb0b30e230591c463ce56df9d4/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=164b41ebf3e25bdb0b30e230591c463ce56df9d4", "patch": "@@ -1043,6 +1043,13 @@ requirements of the license of GCC.\n     <listitem><para>Define the typedefs.\n     </para></listitem></varlistentry>\n \n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2442\">2442</link>:\n+       <emphasis><code>call_once()</code> shouldn't <code>DECAY_COPY()</code></emphasis>\n+    </term>\n+    <listitem><para>Remove indirection through call wrapper that made copies\n+    of arguments and forward arguments straight to <code>std::invoke</code>.\n+    </para></listitem></varlistentry>\n+\n     <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2454\">2454</link>:\n        <emphasis>Add <code>raw_storage_iterator::base()</code> member\n        </emphasis>"}, {"sha": "4c6f0366f1c878f052f380dd8798a965f9eadec1", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/164b41ebf3e25bdb0b30e230591c463ce56df9d4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/164b41ebf3e25bdb0b30e230591c463ce56df9d4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=164b41ebf3e25bdb0b30e230591c463ce56df9d4", "patch": "@@ -580,12 +580,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   extern __thread void* __once_callable;\n   extern __thread void (*__once_call)();\n \n-  template<typename _Callable>\n-    inline void\n-    __once_call_impl()\n+  template<typename _Tuple, typename _IndexSeq\n+\t   = typename _Build_index_tuple<tuple_size<_Tuple>::value>::__type>\n+    struct _Once_call;\n+\n+  template<typename _Tuple, size_t... _Ind>\n+    struct _Once_call<_Tuple, _Index_tuple<_Ind...>>\n     {\n-      (*(_Callable*)__once_callable)();\n-    }\n+      static void\n+      _S_call()\n+      {\n+\tauto& __f_args = *static_cast<_Tuple*>(__once_callable);\n+\tstd::__invoke(std::get<_Ind>(std::move(__f_args))...);\n+      }\n+    };\n #else\n   extern function<void()> __once_functor;\n \n@@ -603,16 +611,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     void\n     call_once(once_flag& __once, _Callable&& __f, _Args&&... __args)\n     {\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2442. call_once() shouldn't DECAY_COPY()\n #ifdef _GLIBCXX_HAVE_TLS\n-      auto __bound_functor = std::__bind_simple(std::forward<_Callable>(__f),\n-          std::forward<_Args>(__args)...);\n-      __once_callable = std::__addressof(__bound_functor);\n-      __once_call = &__once_call_impl<decltype(__bound_functor)>;\n+      auto __f_args = std::forward_as_tuple(\n+\t  std::forward<_Callable>(__f), std::forward<_Args>(__args)...);\n+      __once_callable = std::__addressof(__f_args);\n+      __once_call = _Once_call<decltype(__f_args)>::_S_call;\n #else\n       unique_lock<mutex> __functor_lock(__get_once_mutex());\n-      auto __callable = std::__bind_simple(std::forward<_Callable>(__f),\n-          std::forward<_Args>(__args)...);\n-      __once_functor = [&]() { __callable(); };\n+      __once_functor = [&] {\n+\t  std::__invoke(std::forward<_Callable>(__f),\n+\t\t\tstd::forward<_Args>(__args)...);\n+      };\n       __set_once_functor_lock_ptr(&__functor_lock);\n #endif\n "}, {"sha": "5b6668798dc5aa5fa082deaa36639bb4a5ba9177", "filename": "libstdc++-v3/testsuite/30_threads/call_once/dr2442.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/164b41ebf3e25bdb0b30e230591c463ce56df9d4/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcall_once%2Fdr2442.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/164b41ebf3e25bdb0b30e230591c463ce56df9d4/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcall_once%2Fdr2442.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcall_once%2Fdr2442.cc?ref=164b41ebf3e25bdb0b30e230591c463ce56df9d4", "patch": "@@ -0,0 +1,45 @@\n+// { dg-do run { target *-*-freebsd* *-*-dragonfly* *-*-netbsd* *-*-linux* *-*-gnu* *-*-solaris* *-*-cygwin *-*-rtems* *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \"-pthread\" { target *-*-freebsd* *-*-dragonfly* *-*-netbsd* *-*-linux* *-*-gnu* *-*-solaris* powerpc-ibm-aix* } }\n+// { dg-require-effective-target c++11 }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <mutex>\n+#include <testsuite_hooks.h>\n+\n+void f(int& a, int&& b) { a = 1; b = 2; }\n+\n+void\n+test01()\n+{\n+  // LWG 2442. call_once() shouldn't DECAY_COPY()\n+  std::once_flag once;\n+  int i = 0;\n+  int j = 0;\n+  call_once(once, f, i, std::move(j));\n+  VERIFY( i == 1 );\n+  VERIFY( j == 2 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}