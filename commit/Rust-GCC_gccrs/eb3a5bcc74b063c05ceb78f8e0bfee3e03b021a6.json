{"sha": "eb3a5bcc74b063c05ceb78f8e0bfee3e03b021a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIzYTViY2M3NGIwNjNjMDVjZWI3OGY4ZTBiZmVlM2UwM2IwMjFhNg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-08-16T18:02:43Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-08-16T18:02:43Z"}, "message": "Move class temp_source_file from input.c to selftest.c/h\n\ngcc/ChangeLog:\n\t* input.c (class selftest::temp_source_file): Move to\n\tselftest.h.\n\t(selftest::temp_source_file::temp_source_file): Move to\n\tselftest.c.\n\t(selftest::temp_source_file::~temp_source_file): Likewise.\n\t* selftest.c (selftest::temp_source_file::temp_source_file): Move\n\there from input.c.\n\t(selftest::temp_source_file::~temp_source_file): Likewise.\n\t* selftest.h (class selftest::temp_source_file): Move here from\n\tinput.c\n\nFrom-SVN: r239509", "tree": {"sha": "b7b9c8817db01180af43f706c9d64db290fb525c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7b9c8817db01180af43f706c9d64db290fb525c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb3a5bcc74b063c05ceb78f8e0bfee3e03b021a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb3a5bcc74b063c05ceb78f8e0bfee3e03b021a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb3a5bcc74b063c05ceb78f8e0bfee3e03b021a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb3a5bcc74b063c05ceb78f8e0bfee3e03b021a6/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7841800f7a5fec82615b74f8ed9beb48f0e152ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7841800f7a5fec82615b74f8ed9beb48f0e152ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7841800f7a5fec82615b74f8ed9beb48f0e152ef"}], "stats": {"total": 97, "additions": 55, "deletions": 42}, "files": [{"sha": "dab437d3906352c1b8ec4d610d2d0b9fd6866db2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb3a5bcc74b063c05ceb78f8e0bfee3e03b021a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb3a5bcc74b063c05ceb78f8e0bfee3e03b021a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb3a5bcc74b063c05ceb78f8e0bfee3e03b021a6", "patch": "@@ -1,3 +1,16 @@\n+2016-08-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* input.c (class selftest::temp_source_file): Move to\n+\tselftest.h.\n+\t(selftest::temp_source_file::temp_source_file): Move to\n+\tselftest.c.\n+\t(selftest::temp_source_file::~temp_source_file): Likewise.\n+\t* selftest.c (selftest::temp_source_file::temp_source_file): Move\n+\there from input.c.\n+\t(selftest::temp_source_file::~temp_source_file): Likewise.\n+\t* selftest.h (class selftest::temp_source_file): Move here from\n+\tinput.c\n+\n 2016-08-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/71910"}, {"sha": "0c5f817e83a52cbd8c3f812f6dc4d8773b6d1a2d", "filename": "gcc/input.c", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb3a5bcc74b063c05ceb78f8e0bfee3e03b021a6/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb3a5bcc74b063c05ceb78f8e0bfee3e03b021a6/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=eb3a5bcc74b063c05ceb78f8e0bfee3e03b021a6", "patch": "@@ -1472,48 +1472,6 @@ namespace selftest {\n \n /* Selftests of location handling.  */\n \n-/* A class for writing out a temporary sourcefile for use in selftests\n-   of input handling.  */\n-\n-class temp_source_file\n-{\n- public:\n-  temp_source_file (const location &loc, const char *suffix,\n-\t\t    const char *content);\n-  ~temp_source_file ();\n-\n-  const char *get_filename () const { return m_filename; }\n-\n- private:\n-  char *m_filename;\n-};\n-\n-/* Constructor.  Create a tempfile using SUFFIX, and write CONTENT to\n-   it.  Abort if anything goes wrong, using LOC as the effective\n-   location in the problem report.  */\n-\n-temp_source_file::temp_source_file (const location &loc, const char *suffix,\n-\t\t\t\t    const char *content)\n-{\n-  m_filename = make_temp_file (suffix);\n-  ASSERT_NE (m_filename, NULL);\n-\n-  FILE *out = fopen (m_filename, \"w\");\n-  if (!out)\n-    ::selftest::fail_formatted (loc, \"unable to open tempfile: %s\",\n-\t\t\t\tm_filename);\n-  fprintf (out, \"%s\", content);\n-  fclose (out);\n-}\n-\n-/* Destructor.  Delete the tempfile.  */\n-\n-temp_source_file::~temp_source_file ()\n-{\n-  unlink (m_filename);\n-  free (m_filename);\n-}\n-\n /* Helper function for verifying location data: when location_t\n    values are > LINE_MAP_MAX_LOCATION_WITH_COLS, they are treated\n    as having column 0.  */"}, {"sha": "0a7192efe460b41c6de30c8096e803093eca8432", "filename": "gcc/selftest.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb3a5bcc74b063c05ceb78f8e0bfee3e03b021a6/gcc%2Fselftest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb3a5bcc74b063c05ceb78f8e0bfee3e03b021a6/gcc%2Fselftest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest.c?ref=eb3a5bcc74b063c05ceb78f8e0bfee3e03b021a6", "patch": "@@ -87,6 +87,32 @@ selftest::assert_streq (const location &loc,\n \t desc_expected, desc_actual, val_expected, val_actual);\n }\n \n+/* Constructor.  Create a tempfile using SUFFIX, and write CONTENT to\n+   it.  Abort if anything goes wrong, using LOC as the effective\n+   location in the problem report.  */\n+\n+selftest::temp_source_file::temp_source_file (const location &loc,\n+\t\t\t\t\t      const char *suffix,\n+\t\t\t\t\t      const char *content)\n+{\n+  m_filename = make_temp_file (suffix);\n+  ASSERT_NE (m_filename, NULL);\n+\n+  FILE *out = fopen (m_filename, \"w\");\n+  if (!out)\n+    ::selftest::fail_formatted (loc, \"unable to open tempfile: %s\",\n+\t\t\t\tm_filename);\n+  fprintf (out, \"%s\", content);\n+  fclose (out);\n+}\n+\n+/* Destructor.  Delete the tempfile.  */\n+\n+selftest::temp_source_file::~temp_source_file ()\n+{\n+  unlink (m_filename);\n+  free (m_filename);\n+}\n \n /* Selftests for the selftest system itself.  */\n "}, {"sha": "72de61f620e8227ba8220bd395d5fcc33e0ba663", "filename": "gcc/selftest.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb3a5bcc74b063c05ceb78f8e0bfee3e03b021a6/gcc%2Fselftest.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb3a5bcc74b063c05ceb78f8e0bfee3e03b021a6/gcc%2Fselftest.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest.h?ref=eb3a5bcc74b063c05ceb78f8e0bfee3e03b021a6", "patch": "@@ -69,6 +69,22 @@ extern void assert_streq (const location &loc,\n \t\t\t  const char *desc_expected, const char *desc_actual,\n \t\t\t  const char *val_expected, const char *val_actual);\n \n+/* A class for writing out a temporary sourcefile for use in selftests\n+   of input handling.  */\n+\n+class temp_source_file\n+{\n+ public:\n+  temp_source_file (const location &loc, const char *suffix,\n+\t\t    const char *content);\n+  ~temp_source_file ();\n+\n+  const char *get_filename () const { return m_filename; }\n+\n+ private:\n+  char *m_filename;\n+};\n+\n /* Declarations for specific families of tests (by source file), in\n    alphabetical order.  */\n extern void bitmap_c_tests ();"}]}