{"sha": "08cddb03ae279dcab585a53833729e00e13e8645", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhjZGRiMDNhZTI3OWRjYWI1ODVhNTM4MzM3MjllMDBlMTNlODY0NQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-03-10T17:31:14Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-03-10T17:31:14Z"}, "message": "* pa.md (add reg and large int): New define_splits for the combiner.\n\nFrom-SVN: r3695", "tree": {"sha": "23f04eaae8062e156ea7e0d1ba889b950dc78feb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23f04eaae8062e156ea7e0d1ba889b950dc78feb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08cddb03ae279dcab585a53833729e00e13e8645", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08cddb03ae279dcab585a53833729e00e13e8645", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08cddb03ae279dcab585a53833729e00e13e8645", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08cddb03ae279dcab585a53833729e00e13e8645/comments", "author": null, "committer": null, "parents": [{"sha": "d39079455511dc88645e70e8fb05a3cd8eea6bff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d39079455511dc88645e70e8fb05a3cd8eea6bff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d39079455511dc88645e70e8fb05a3cd8eea6bff"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "a2b6595b933d48e3559b5dc3401644ac2bc8a37b", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08cddb03ae279dcab585a53833729e00e13e8645/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08cddb03ae279dcab585a53833729e00e13e8645/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=08cddb03ae279dcab585a53833729e00e13e8645", "patch": "@@ -1681,6 +1681,62 @@\n   \"\"\n   \"uaddcm %2,%1,%0\")\n \n+;; define_splits to optimize cases of adding a constant integer\n+;; to a register when the constant does not fit in 14 bits.  */\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(plus:SI (match_operand:SI 1 \"register_operand\" \"\")\n+\t\t (match_operand:SI 2 \"const_int_operand\" \"\")))\n+   (clobber (match_operand:SI 4 \"register_operand\" \"\"))]\n+  \"! cint_ok_for_move (INTVAL (operands[2])) \n+   && VAL_14_BITS_P (INTVAL (operands[2]) / 2)\"\n+  [(set (match_dup 4) (plus:SI (match_dup 1) (match_dup 2)))\n+   (set (match_dup 0) (plus:SI (match_dup 4) (match_dup 3)))]\n+  \"\n+{\n+  int val = INTVAL (operands[2]);\n+  int low = (val < 0) ? -0x2000 : 0x1fff;\n+  int rest = val - low;\n+\n+  operands[2] = GEN_INT (rest);\n+  operands[3] = GEN_INT (low);\n+}\")\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(plus:SI (match_operand:SI 1 \"register_operand\" \"\")\n+\t\t (match_operand:SI 2 \"const_int_operand\" \"\")))\n+   (clobber (match_operand:SI 4 \"register_operand\" \"\"))]\n+  \"! cint_ok_for_move (INTVAL (operands[2]))\"\n+  [(set (match_dup 4) (match_dup 2))\n+   (set (match_dup 0) (plus:SI (mult:SI (match_dup 4) (match_dup 3))\n+\t\t\t       (match_dup 1)))]\n+  \"\n+{\n+  int intval = INTVAL (operands[2]);\n+\n+  /* Try diving the constant by 2, then 4, and finally 8 to see\n+     if we can get a constant which can be loaded into a register\n+     in a single instruction (cint_ok_for_move).  */\n+  if (intval % 2 == 0 && cint_ok_for_move (intval / 2))\n+    {\n+      operands[2] = GEN_INT (INTVAL (operands[2]) / 2);\n+      operands[3] = GEN_INT (2);\n+    }\n+  else if (intval % 4 == 0 && cint_ok_for_move (intval / 4))\n+    {\n+      operands[2] = GEN_INT (INTVAL (operands[2]) / 4);\n+      operands[3] = GEN_INT (4);\n+    }\n+  else if (intval % 8 == 0 && cint_ok_for_move (intval / 8))\n+    {\n+      operands[2] = GEN_INT (INTVAL (operands[2]) / 8);\n+      operands[3] = GEN_INT (8);\n+    }\n+  else \n+    FAIL;\n+}\")\n+\n (define_insn \"addsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(plus:SI (match_operand:SI 1 \"register_operand\" \"%r,r\")"}]}