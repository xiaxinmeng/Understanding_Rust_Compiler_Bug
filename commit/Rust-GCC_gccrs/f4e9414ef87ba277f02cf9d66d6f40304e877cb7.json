{"sha": "f4e9414ef87ba277f02cf9d66d6f40304e877cb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRlOTQxNGVmODdiYTI3N2YwMmNmOWQ2NmQ2ZjQwMzA0ZTg3N2NiNw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2006-01-26T18:50:37Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2006-01-26T18:50:37Z"}, "message": "re PR c/25892 (-Wpointer-sign creates problems for Emacs)\n\ngcc/ChangeLog:\nPR c/25892\n* c.opt (Wpointer-sign): Init to -1.\n* c-opts.c (c_common_handle_option): Set to 1 on OPT_Wall and\nOPT_pedantic, to 0 otherwise.\n* doc/invoke.texi: Update.\ngcc/testsuite/ChangeLog:\nPR c/25892\n* gcc.dg/Wpointer-sign.c: New.\n* gcc.dg/Wpointer-sign-Wall.c: New.\n* gcc.dg/Wpointer-sign-Wall-no.c: New.\n* gcc.dg/Wpointer-sign-pedantic.c: New.\n* gcc.dg/Wpointer-sign-pedantic-no.c: New.\n* gcc.dg/conv-2.c: Use -Wpointer-sign.\n\nFrom-SVN: r110265", "tree": {"sha": "5f651bd0ed5cebb8605697501f8758fbcf305fb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f651bd0ed5cebb8605697501f8758fbcf305fb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4e9414ef87ba277f02cf9d66d6f40304e877cb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e9414ef87ba277f02cf9d66d6f40304e877cb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4e9414ef87ba277f02cf9d66d6f40304e877cb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e9414ef87ba277f02cf9d66d6f40304e877cb7/comments", "author": null, "committer": null, "parents": [{"sha": "e046a30ab14ee10d1d4e0cbc179199c754192270", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e046a30ab14ee10d1d4e0cbc179199c754192270", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e046a30ab14ee10d1d4e0cbc179199c754192270"}], "stats": {"total": 93, "additions": 86, "deletions": 7}, "files": [{"sha": "e4902859f3b6e73f32fd63fd3499b5a4ec889e90", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e9414ef87ba277f02cf9d66d6f40304e877cb7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e9414ef87ba277f02cf9d66d6f40304e877cb7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f4e9414ef87ba277f02cf9d66d6f40304e877cb7", "patch": "@@ -1,3 +1,11 @@\n+2006-01-26  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR c/25892\n+\t* c.opt (Wpointer-sign): Init to -1.\n+\t* c-opts.c (c_common_handle_option): Set to 1 on OPT_Wall and\n+\tOPT_pedantic, to 0 otherwise.\n+\t* doc/invoke.texi: Update.\n+\n 2006-01-26  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* config/i386/i386.md (extendsfdf2, extendsfxf2, extenddfxf2): Emit"}, {"sha": "d2df8605ae2422ae76d823579aecaa7135a98142", "filename": "gcc/c-opts.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e9414ef87ba277f02cf9d66d6f40304e877cb7/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e9414ef87ba277f02cf9d66d6f40304e877cb7/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=f4e9414ef87ba277f02cf9d66d6f40304e877cb7", "patch": "@@ -417,6 +417,9 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       cpp_opts->warn_comments = value;\n       cpp_opts->warn_num_sign_change = value;\n       cpp_opts->warn_multichar = value;\t/* Was C++ only.  */\n+\n+      if (warn_pointer_sign == -1)\n+\twarn_pointer_sign = 1;\n       break;\n \n     case OPT_Wcomment:\n@@ -888,6 +891,8 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n     case OPT_pedantic:\n       cpp_opts->pedantic = 1;\n       cpp_opts->warn_endif_labels = 1;\n+      if (warn_pointer_sign == -1)\n+\twarn_pointer_sign = 1;\n       break;\n \n     case OPT_print_objc_runtime_info:\n@@ -1008,6 +1013,11 @@ c_common_post_options (const char **pfilename)\n   if (warn_missing_field_initializers == -1)\n     warn_missing_field_initializers = extra_warnings;\n \n+  /* -Wpointer_sign is disabled by default, but it is enabled if any\n+     of -Wall or -pedantic are given.  */\n+  if (warn_pointer_sign == -1)\n+    warn_pointer_sign = 0;\n+\n   /* Special format checking options don't work without -Wformat; warn if\n      they are used.  */\n   if (!warn_format)"}, {"sha": "44a47ed7cbeb07ad1d824807c117d6eb708e8139", "filename": "gcc/c.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e9414ef87ba277f02cf9d66d6f40304e877cb7/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e9414ef87ba277f02cf9d66d6f40304e877cb7/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=f4e9414ef87ba277f02cf9d66d6f40304e877cb7", "patch": "@@ -420,7 +420,7 @@ C ObjC C++ ObjC++\n Give strings the type \\\"array of char\\\"\n \n Wpointer-sign\n-C ObjC Var(warn_pointer_sign) Init(1)\n+C ObjC Var(warn_pointer_sign) Init(-1)\n Warn when a pointer differs in signedness in an assignment\n \n ansi"}, {"sha": "8c48d425560fd70f9cb516b3a0fe0e17d86b6c97", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e9414ef87ba277f02cf9d66d6f40304e877cb7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e9414ef87ba277f02cf9d66d6f40304e877cb7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=f4e9414ef87ba277f02cf9d66d6f40304e877cb7", "patch": "@@ -256,7 +256,7 @@ Objective-C and Objective-C++ Dialects}.\n @gccoptlist{-Wbad-function-cast  -Wmissing-declarations @gol\n -Wmissing-prototypes  -Wnested-externs  -Wold-style-definition @gol\n -Wstrict-prototypes  -Wtraditional @gol\n--Wdeclaration-after-statement -Wno-pointer-sign}\n+-Wdeclaration-after-statement -Wpointer-sign}\n \n @item Debugging Options\n @xref{Debugging Options,,Options for Debugging Your Program or GCC}.\n@@ -3402,11 +3402,13 @@ effectively.  Often, the problem is that your code is too big or too\n complex; GCC will refuse to optimize programs when the optimization\n itself is likely to take inordinate amounts of time.\n \n-@item -Wno-pointer-sign\n+@item -Wpointer-sign\n+@opindex Wpointer-sign\n @opindex Wno-pointer-sign\n-Don't warn for pointer argument passing or assignment with different signedness.\n-Only useful in the negative form since this warning is enabled by default.\n-This option is only supported for C and Objective-C@.\n+Warn for pointer argument passing or assignment with different signedness.\n+This option is only supported for C and Objective-C@.  It is implied by\n+@option{-Wall} and by @option{-pedantic}, which can be disabled with\n+@option{-Wno-pointer-sign}.\n \n @item -Werror\n @opindex Werror"}, {"sha": "7b2477a1216bf63044e7f0ae71fff60bb19099d6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e9414ef87ba277f02cf9d66d6f40304e877cb7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e9414ef87ba277f02cf9d66d6f40304e877cb7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f4e9414ef87ba277f02cf9d66d6f40304e877cb7", "patch": "@@ -1,3 +1,13 @@\n+2006-01-26  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR c/25892\n+\t* gcc.dg/Wpointer-sign.c: New.\n+\t* gcc.dg/Wpointer-sign-Wall.c: New.\n+\t* gcc.dg/Wpointer-sign-Wall-no.c: New.\n+\t* gcc.dg/Wpointer-sign-pedantic.c: New.\n+\t* gcc.dg/Wpointer-sign-pedantic-no.c: New.\n+\t* gcc.dg/conv-2.c: Use -Wpointer-sign.\n+\n 2006-01-26  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR C/25861"}, {"sha": "23df20721c8e11d9240481f6d6cf094e3bac4b97", "filename": "gcc/testsuite/gcc.dg/Wpointer-sign-Wall-no.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e9414ef87ba277f02cf9d66d6f40304e877cb7/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-sign-Wall-no.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e9414ef87ba277f02cf9d66d6f40304e877cb7/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-sign-Wall-no.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-sign-Wall-no.c?ref=f4e9414ef87ba277f02cf9d66d6f40304e877cb7", "patch": "@@ -0,0 +1,9 @@\n+/* This is from PR c/25892.  See Wpointer-sign.c for more details.  */\n+\n+/* { dg-options \"-Wno-pointer-sign -Wall\" } */\n+\n+void foo(unsigned long* ulp);\n+\n+void bar(long* lp) {\n+  foo(lp);\n+}"}, {"sha": "e72d37a18ce5648598dd39af9cd1ac3e1d106d9f", "filename": "gcc/testsuite/gcc.dg/Wpointer-sign-Wall.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e9414ef87ba277f02cf9d66d6f40304e877cb7/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-sign-Wall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e9414ef87ba277f02cf9d66d6f40304e877cb7/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-sign-Wall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-sign-Wall.c?ref=f4e9414ef87ba277f02cf9d66d6f40304e877cb7", "patch": "@@ -0,0 +1,9 @@\n+/* This is from PR c/25892.  See Wpointer-sign.c for more details.  */\n+\n+/* { dg-options \"-Wall\" } */\n+\n+void foo(unsigned long* ulp);\n+\n+void bar(long* lp) {\n+  foo(lp); /* { dg-warning \"differ in signedness\" } */\n+}"}, {"sha": "d4f597fe79e9a7203b40565a0b8a63cb719d1588", "filename": "gcc/testsuite/gcc.dg/Wpointer-sign-pedantic-no.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e9414ef87ba277f02cf9d66d6f40304e877cb7/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-sign-pedantic-no.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e9414ef87ba277f02cf9d66d6f40304e877cb7/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-sign-pedantic-no.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-sign-pedantic-no.c?ref=f4e9414ef87ba277f02cf9d66d6f40304e877cb7", "patch": "@@ -0,0 +1,9 @@\n+/* This is from PR c/25892.  See Wpointer-sign.c for more details.  */\n+\n+/* { dg-options \"-Wno-pointer-sign -pedantic\" } */\n+\n+void foo(unsigned long* ulp);\n+\n+void bar(long* lp) {\n+  foo(lp);\n+}"}, {"sha": "25e25209e524d98220ae5a9f1e03ee434ddf1aa9", "filename": "gcc/testsuite/gcc.dg/Wpointer-sign-pedantic.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e9414ef87ba277f02cf9d66d6f40304e877cb7/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-sign-pedantic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e9414ef87ba277f02cf9d66d6f40304e877cb7/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-sign-pedantic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-sign-pedantic.c?ref=f4e9414ef87ba277f02cf9d66d6f40304e877cb7", "patch": "@@ -0,0 +1,9 @@\n+/* This is from PR c/25892.  See Wpointer-sign.c for more details.  */\n+\n+/* { dg-options \"-pedantic\" } */\n+\n+void foo(unsigned long* ulp);\n+\n+void bar(long* lp) {\n+  foo(lp); /* { dg-warning \"differ in signedness\" } */\n+}"}, {"sha": "74cdbe4bc9f3d6fc852dfef18ee26bb0ae02ce83", "filename": "gcc/testsuite/gcc.dg/Wpointer-sign.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e9414ef87ba277f02cf9d66d6f40304e877cb7/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-sign.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e9414ef87ba277f02cf9d66d6f40304e877cb7/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-sign.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-sign.c?ref=f4e9414ef87ba277f02cf9d66d6f40304e877cb7", "patch": "@@ -0,0 +1,13 @@\n+/* This is from PR c/25892.  The SC promised RMS that -Wpointer-sign\n+   would be off by default in GCC 4.1 to avoid inconvenient warnings\n+   while compiling GNU Emacs.  It should be enabled with -Wall and/or\n+   -pedantic, though.  Make sure it's off by default in this test (so\n+   use dg-options \"\" to avoid passing -pedantic-errors).  */\n+\n+/* { dg-options \"\" } */\n+\n+void foo(unsigned long* ulp);\n+\n+void bar(long* lp) {\n+  foo(lp);\n+}"}, {"sha": "ac95584e3a6a09ce6426406fa86ae84542258a9f", "filename": "gcc/testsuite/gcc.dg/conv-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e9414ef87ba277f02cf9d66d6f40304e877cb7/gcc%2Ftestsuite%2Fgcc.dg%2Fconv-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e9414ef87ba277f02cf9d66d6f40304e877cb7/gcc%2Ftestsuite%2Fgcc.dg%2Fconv-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fconv-2.c?ref=f4e9414ef87ba277f02cf9d66d6f40304e877cb7", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"\" } */\n+/* { dg-options \"-Wpointer-sign\" } */\n \n void f1(long *);\n void f2(unsigned long *);"}]}