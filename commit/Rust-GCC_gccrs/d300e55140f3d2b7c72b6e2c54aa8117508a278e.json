{"sha": "d300e55140f3d2b7c72b6e2c54aa8117508a278e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMwMGU1NTE0MGYzZDJiN2M3MmI2ZTJjNTRhYTgxMTc1MDhhMjc4ZQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "1997-12-21T15:24:48Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-12-21T15:24:48Z"}, "message": "c-pragma.c (handle_pragma_token): Generate warning messages about unknown pragmas if warn_unknown_pragmas is set.\n\n        * c-pragma.c (handle_pragma_token): Generate warning messages\n        about unknown pragmas if warn_unknown_pragmas is set.\n        * c-decl.c (c_decode_option): Parse -Wunknown-pragmas command\n        line option to set variable: warn_unknown_pragmas.\n\nFrom-SVN: r17168", "tree": {"sha": "0b8fadd5175f1003cd62fe44249ac0f84a09d3d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b8fadd5175f1003cd62fe44249ac0f84a09d3d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d300e55140f3d2b7c72b6e2c54aa8117508a278e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d300e55140f3d2b7c72b6e2c54aa8117508a278e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d300e55140f3d2b7c72b6e2c54aa8117508a278e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d300e55140f3d2b7c72b6e2c54aa8117508a278e/comments", "author": null, "committer": null, "parents": [{"sha": "f9fc59e8c7d867eed481ec74433c8e582f95ce39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9fc59e8c7d867eed481ec74433c8e582f95ce39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9fc59e8c7d867eed481ec74433c8e582f95ce39"}], "stats": {"total": 55, "additions": 51, "deletions": 4}, "files": [{"sha": "6655c7aca585a10d1c854af7252d6f9a37501b2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d300e55140f3d2b7c72b6e2c54aa8117508a278e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d300e55140f3d2b7c72b6e2c54aa8117508a278e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d300e55140f3d2b7c72b6e2c54aa8117508a278e", "patch": "@@ -1,3 +1,11 @@\n+Sun Dec 21 16:13:55 1997  Nick Clifton  <nickc@cygnus.com\n+\n+\t* c-pragma.c (handle_pragma_token): Generate warning messages\n+\tabout unknown pragmas if warn_unknown_pragmas is set.\n+\n+\t* c-decl.c (c_decode_option): Parse -Wunknown-pragmas command\n+\tline option to set variable: warn_unknown_pragmas.\n+\n Sun Dec 21 15:51:10 1997  Manfred Hollstein  <manfred@lts.sel.alcatel.de>\n \n \t* m68k/mot3300.h (ASM_BYTE_OP): Don't include '\\t' in the"}, {"sha": "0bc292a51950f308e7d5fe02edf73d049cd7c70f", "filename": "gcc/c-decl.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d300e55140f3d2b7c72b6e2c54aa8117508a278e/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d300e55140f3d2b7c72b6e2c54aa8117508a278e/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=d300e55140f3d2b7c72b6e2c54aa8117508a278e", "patch": "@@ -558,6 +558,10 @@ int warn_missing_braces;\n \n int warn_main;\n \n+/* Warn about #pragma directives that are not recognised.  */\n+\n+int warn_unknown_pragmas = 0; /* Tri state variable.  */  \n+\n /* Warn about comparison of signed and unsigned values.\n    If -1, neither -Wsign-compare nor -Wno-sign-compare has been specified.  */\n \n@@ -763,6 +767,12 @@ c_decode_option (p)\n     warn_sign_compare = 1;\n   else if (!strcmp (p, \"-Wno-sign-compare\"))\n     warn_sign_compare = 0;\n+  else if (!strcmp (p, \"-Wunknown-pragmas\"))\n+    /* Set to greater than 1, so that even unknown pragmas in system\n+       headers will be warned about.  */\n+    warn_unknown_pragmas = 2;\n+  else if (!strcmp (p, \"-Wno-unknown-pragmas\"))\n+    warn_unknown_pragmas = 0;\n   else if (!strcmp (p, \"-Wall\"))\n     {\n       /* We save the value of warn_uninitialized, since if they put\n@@ -782,6 +792,8 @@ c_decode_option (p)\n       /* We set this to 2 here, but 1 in -Wmain, so -ffreestanding can turn\n \t it off only if it's not explicit.  */\n       warn_main = 2;\n+      /* Only warn about unknown pragmas that are not in system headers.  */\n+      warn_unknown_pragmas = 1;\n     }\n   else\n     return 0;"}, {"sha": "87e060ebfdcc23d87352c79b14b4a5342e83a4b2", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d300e55140f3d2b7c72b6e2c54aa8117508a278e/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d300e55140f3d2b7c72b6e2c54aa8117508a278e/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=d300e55140f3d2b7c72b6e2c54aa8117508a278e", "patch": "@@ -1,5 +1,5 @@\n /* Handle #pragma, system V.4 style.  Supports #pragma weak and #pragma pack.\n-   Copyright (C) 1992 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -18,8 +18,8 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-#include <stdio.h>\n #include \"config.h\"\n+#include <stdio.h>\n #include \"tree.h\"\n #include \"except.h\"\n #include \"function.h\"\n@@ -65,7 +65,7 @@ handle_pragma_token (string, token)\n \t  if (HANDLE_PRAGMA_WEAK)\n \t    handle_pragma_weak (state, name, value);\n \n-#endif /* HANDLE_PRAMA_WEAK */\n+#endif /* HANDLE_PRAGMA_WEAK */\n \t}\n \n       type = state = ps_start;\n@@ -82,7 +82,16 @@ handle_pragma_token (string, token)\n \t  else if (strcmp (IDENTIFIER_POINTER (token), \"weak\") == 0)\n \t    type = state = ps_weak;\n \t  else\n-\t    type = state = ps_done;\n+\t    {\n+\t      type = state = ps_done;\n+\n+\t      /* Issue a warning message if we have been asked to do so.\n+\t\t Ignoring unknown pragmas in system header file unless          \n+\t\t an explcit -Wunknown-pragmas has been given. */                \n+\t      if (warn_unknown_pragmas > 1\n+\t\t  || (warn_unknown_pragmas && ! in_system_header))\n+\t\twarning (\"ignoring pragma: %s\", string);\n+\t    }\n \t}\n       else\n \ttype = state = ps_done;"}, {"sha": "43c88c94e18dbb002f98c3ce5cdd6d78c4211adc", "filename": "gcc/flags.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d300e55140f3d2b7c72b6e2c54aa8117508a278e/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d300e55140f3d2b7c72b6e2c54aa8117508a278e/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=d300e55140f3d2b7c72b6e2c54aa8117508a278e", "patch": "@@ -83,6 +83,14 @@ extern int warn_inline;\n \n extern int warn_uninitialized;\n \n+/* Zero if unknown pragmas are ignored\n+   One if the compiler should warn about an unknown pragma not in\n+   a system include file.\n+   Greater than one if the compiler should warn for all unknown\n+   pragmas.  */\n+\n+extern int warn_unknown_pragmas;\n+\n /* Nonzero means warn about all declarations which shadow others.   */\n \n extern int warn_shadow;"}, {"sha": "d1f8756c4177cd16f5453c090e2506d2a01440d0", "filename": "gcc/invoke.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d300e55140f3d2b7c72b6e2c54aa8117508a278e/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d300e55140f3d2b7c72b6e2c54aa8117508a278e/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=d300e55140f3d2b7c72b6e2c54aa8117508a278e", "patch": "@@ -126,6 +126,7 @@ in the following sections.\n -Wsign-compare  -Wstrict-prototypes  -Wswitch  -Wsynth\n -Wtemplate-debugging  -Wtraditional  -Wtrigraphs\n -Wundef  -Wuninitialized  -Wunused  -Wwrite-strings\n+-Wunknown-pragmas\n @end smallexample\n \n @item Debugging Options\n@@ -1400,6 +1401,15 @@ members.\n When using templates in a C++ program, warn if debugging is not yet\n fully available (C++ only).\n \n+@item -Wunknown-pragmas\n+@cindex warning for unknown pragmas\n+@cindex unknown pragmas, warning\n+@cindex pragmas, warning of unknown\n+Warn when a #pragma directive is encountered which is not understood by\n+GCC.  If this command line option is used, warnings will even be issued\n+for unknown pragmas in system header files.  This is not the case if\n+the warnings were only enabled by the @samp{-Wall} command line option.\n+\n @item -Wall\n All of the above @samp{-W} options combined.  This enables all the\n warnings about constructions that some users consider questionable, and"}]}