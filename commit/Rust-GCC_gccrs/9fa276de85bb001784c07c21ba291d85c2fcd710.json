{"sha": "9fa276de85bb001784c07c21ba291d85c2fcd710", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZhMjc2ZGU4NWJiMDAxNzg0YzA3YzIxYmEyOTFkODVjMmZjZDcxMA==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@verizon.net", "date": "2005-07-09T23:40:31Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2005-07-09T23:40:31Z"}, "message": "PR libfortran/21875 (FM111.f)\n\n2005-07-09  Jerry DeLisle  <jvdelisle@verizon.net>\n\n    PR libfortran/21875  (FM111.f)\n    * io/read.c (next_char): Return a ' ' character when BLANK_ZERO or\n    BLANK_NULL are active.\n    (read_decimal): Interpret ' ' character correctly for BZ or BN.\n    (read_radix): Interpret ' ' character correctly for BZ or BN.\n    (read_f): Interpret ' ' character correctly for BZ or BN.\n    * gfortran.dg/test (fmt_read_bz_bn.f90): New test case.\n\nFrom-SVN: r101837", "tree": {"sha": "503ede726a28e4a251771117cb4154ae761a6fb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/503ede726a28e4a251771117cb4154ae761a6fb1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fa276de85bb001784c07c21ba291d85c2fcd710", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa276de85bb001784c07c21ba291d85c2fcd710", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fa276de85bb001784c07c21ba291d85c2fcd710", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa276de85bb001784c07c21ba291d85c2fcd710/comments", "author": null, "committer": null, "parents": [{"sha": "f685a2e68d5f87b7eb3b9e7119c7abb9e4304672", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f685a2e68d5f87b7eb3b9e7119c7abb9e4304672", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f685a2e68d5f87b7eb3b9e7119c7abb9e4304672"}], "stats": {"total": 101, "additions": 82, "deletions": 19}, "files": [{"sha": "0f2ec64b7644936cff8bad230c3bca1255c7da76", "filename": "gcc/testsuite/gfortran.dg/fmt_read_bz_bn.f90", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa276de85bb001784c07c21ba291d85c2fcd710/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_read_bz_bn.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa276de85bb001784c07c21ba291d85c2fcd710/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_read_bz_bn.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_read_bz_bn.f90?ref=9fa276de85bb001784c07c21ba291d85c2fcd710", "patch": "@@ -0,0 +1,32 @@\n+! { dg-do run }\n+! Test various uses of BZ and BN format specifiers.\n+! Portions inspired by NIST F77 testsuite FM711.f\n+! Contributed by jvdelisle@verizon.net\n+program test_bn\n+        \n+integer I1(2,2), I2(2,2,2)\n+real A1(5)\n+character*80 :: IDATA1=\"111 2 2 3 3. 3E-1  44 5 5 6 . 67 . 78 8. 8E-1\"\n+character*80 :: IDATA2=\"2345 1 34512 45123 51234 2345 1 34512 45123 5\"\n+character*80 :: ODATA=\"\"\n+character*80 :: CORRECT1=\" 1110 2020 .30303E-07   44   55   6.6 70.07 .888E+01\"\n+character*80 :: CORRECT2=\"23450 10345. 12.45 1235 1234 2345  1345. 12.45 1235\"\n+\n+READ(IDATA1, 10) I1(1,2), IVI, A1(3), JVI, KVI, A1(2), AVS, A1(1)\n+10 FORMAT (BZ,(2I4, E10.1, BN, 2I4, F5.2, BZ, F5.2, BN, E10.1))\n+\n+WRITE(ODATA, 20) I1(1,2), IVI, A1(3), JVI, KVI, A1(2), AVS, A1(1)\n+20 FORMAT (2I5, 1X, E10.5, BN, 2I5, F6.1, BZ, F6.2, BN, 1X, E8.3, I5)\n+\n+if (ODATA /= CORRECT1) call abort\n+ODATA=\"\"\n+\n+READ(IDATA2, 30) I2(1,2,1), A1(3), AVS, IVI, I1(1,1), JVI, BVS, A1(2), I2(1,1,1)\n+30 FORMAT (BZ, (I5, F5.0, BN, F5.2, 2I5, I5, F5.0, BN, F5.2, I5))\n+\n+WRITE(ODATA, 40) I2(1,2,1), A1(3), AVS, IVI, I1(1,1), JVI, BVS, A1(2), I2(1,1,1)\n+40 FORMAT (I5, F7.0, BZ, 1X, F5.2, 2(1X,I4),I5, F7.0, BZ, 1X, F5.2, 1X, I4)\n+\n+if (ODATA /= CORRECT2) call abort\n+\n+end program test_bn"}, {"sha": "8457da4a5fe4ed69005691a803b9e23233ef6e11", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa276de85bb001784c07c21ba291d85c2fcd710/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa276de85bb001784c07c21ba291d85c2fcd710/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=9fa276de85bb001784c07c21ba291d85c2fcd710", "patch": "@@ -1,3 +1,14 @@\n+\n+2005-07-09  Jerry DeLisle  <jvdelisle@verizon.net>\n+\n+\tPR libfortran/21875  (FM111.f)\n+\t* io/read.c (next_char): Return a ' ' character when BLANK_ZERO or \n+\tBLANK_NULL are active.\n+\t(read_decimal): Interpret ' ' character correctly for BZ or BN.\n+\t(read_radix): Interpret ' ' character correctly for BZ or BN.\n+\t(read_f): Interpret ' ' character correctly for BZ or BN.\n+\t* gfortran.dg/test (fmt_read_bz_bn.f90): New test case.\n+\n 2005-07-09  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \t    Thomas Koenig  <Thomas.Koenig@online.de>\n "}, {"sha": "101652ca8dcdfce0bcd48697dbc89be3766d699f", "filename": "libgfortran/io/read.c", "status": "modified", "additions": 39, "deletions": 19, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa276de85bb001784c07c21ba291d85c2fcd710/libgfortran%2Fio%2Fread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa276de85bb001784c07c21ba291d85c2fcd710/libgfortran%2Fio%2Fread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fread.c?ref=9fa276de85bb001784c07c21ba291d85c2fcd710", "patch": "@@ -266,8 +266,8 @@ next_char (char **p, int *w)\n \n   if (c != ' ')\n     return c;\n-  if (g.blank_status == BLANK_ZERO)\n-    return '0';\n+  if (g.blank_status != BLANK_UNSPECIFIED)\n+    return ' ';  /* return a blank to signal a null */ \n \n   /* At this point, the rest of the field has to be trailing blanks */\n \n@@ -336,7 +336,13 @@ read_decimal (fnode * f, char *dest, int length)\n       c = next_char (&p, &w);\n       if (c == '\\0')\n \tbreak;\n-\n+\t\n+      if (c == ' ')\n+        {\n+          if (g.blank_status == BLANK_NULL) continue;\n+          if (g.blank_status == BLANK_ZERO) c = '0';\n+        }\n+        \n       if (c < '0' || c > '9')\n \tgoto bad;\n \n@@ -424,6 +430,11 @@ read_radix (fnode * f, char *dest, int length, int radix)\n       c = next_char (&p, &w);\n       if (c == '\\0')\n \tbreak;\n+      if (c == ' ')\n+        {\n+          if (g.blank_status == BLANK_NULL) continue;\n+          if (g.blank_status == BLANK_ZERO) c = '0';\n+        }\n \n       switch (radix)\n \t{\n@@ -680,19 +691,22 @@ read_f (fnode * f, char *dest, int length)\n   p++;\n   w--;\n \n-  while (w > 0 && isdigit (*p))\n-    {\n-      exponent = 10 * exponent + *p - '0';\n-      p++;\n-      w--;\n-    }\n-\n-  /* Only allow trailing blanks */\n-\n   while (w > 0)\n     {\n-      if (*p != ' ')\n-\tgoto bad_float;\n+      if (*p == ' ')\n+        {\n+          if (g.blank_status == BLANK_ZERO) *p = '0';\n+          if (g.blank_status == BLANK_NULL)\n+            {\n+              p++;\n+              w--;\n+              continue;\n+            }\n+        }\n+      if (!isdigit (*p))\n+        goto bad_float;\n+        \n+      exponent = 10 * exponent + *p - '0';\n       p++;\n       w--;\n     }\n@@ -732,16 +746,22 @@ read_f (fnode * f, char *dest, int length)\n     buffer = get_mem (i);\n \n   /* Reformat the string into a temporary buffer.  As we're using atof it's\n-     easiest to just leave the dcimal point in place.  */\n+     easiest to just leave the decimal point in place.  */\n   p = buffer;\n   if (val_sign < 0)\n     *(p++) = '-';\n   for (; ndigits > 0; ndigits--)\n     {\n-      if (*digits == ' ' && g.blank_status == BLANK_ZERO)\n-\t*p = '0';\n-      else\n-\t*p = *digits;\n+      if (*digits == ' ')\n+        {\n+          if (g.blank_status == BLANK_ZERO) *digits = '0';\n+          if (g.blank_status == BLANK_NULL)\n+            {\n+              digits++;\n+              continue;\n+            } \n+        }\n+      *p = *digits;\n       p++;\n       digits++;\n     }"}]}