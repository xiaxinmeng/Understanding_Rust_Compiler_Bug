{"sha": "a72b7a455c144b29609c8ecf4dff12dc9040cf2c", "node_id": "C_kwDOANBUbNoAKGE3MmI3YTQ1NWMxNDRiMjk2MDljOGVjZjRkZmYxMmRjOTA0MGNmMmM", "commit": {"author": {"name": "konglin1", "email": "lingling.kong@intel.com", "date": "2021-11-10T07:31:04Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-11-18T02:58:38Z"}, "message": "i386: add alias for f*mul_*ch intrinsics\n\ngcc/ChangeLog:\n\n\t* config/i386/avx512fp16intrin.h (_mm512_mul_pch): Add alias for _mm512_fmul_pch.\n\t(_mm512_mask_mul_pch): Likewise.\n\t(_mm512_maskz_mul_pch): Likewise.\n\t(_mm512_mul_round_pch): Likewise.\n\t(_mm512_mask_mul_round_pch): Likewise.\n\t(_mm512_maskz_mul_round_pch): Likewise.\n\t(_mm512_cmul_pch): Likewise.\n\t(_mm512_mask_cmul_pch): Likewise.\n\t(_mm512_maskz_cmul_pch): Likewise.\n\t(_mm512_cmul_round_pch): Likewise.\n\t(_mm512_mask_cmul_round_pch): Likewise.\n\t(_mm512_maskz_cmul_round_pch): Likewise.\n\t(_mm_mul_sch): Likewise.\n\t(_mm_mask_mul_sch): Likewise.\n\t(_mm_maskz_mul_sch): Likewise.\n\t(_mm_mul_round_sch): Likewise.\n\t(_mm_mask_mul_round_sch): Likewise.\n\t(_mm_maskz_mul_round_sch): Likewise.\n\t(_mm_cmul_sch): Likewise.\n\t(_mm_mask_cmul_sch): Likewise.\n\t(_mm_maskz_cmul_sch): Likewise.\n\t(_mm_cmul_round_sch): Likewise.\n\t(_mm_mask_cmul_round_sch): Likewise.\n\t(_mm_maskz_cmul_round_sch): Likewise.\n\t* config/i386/avx512fp16vlintrin.h (_mm_mul_pch): Likewise.\n\t(_mm_mask_mul_pch): Likewise.\n\t(_mm_maskz_mul_pch): Likewise.\n\t(_mm256_mul_pch): Likewise.\n\t(_mm256_mask_mul_pch): Likewise.\n\t(_mm256_maskz_mul_pch): Likewise.\n\t(_mm_cmul_pch): Likewise.\n\t(_mm_mask_cmul_pch): Likewise.\n\t(_mm_maskz_cmul_pch): Likewise.\n\t(_mm256_cmul_pch): Likewise.\n\t(_mm256_mask_cmul_pch): Likewise.\n\t(_mm256_maskz_cmul_pch): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-vfcmulcph-1a.c: Add new test for alias.\n\t* gcc.target/i386/avx512fp16-vfcmulcsh-1a.c: Likewise.\n\t* gcc.target/i386/avx512fp16-vfmulcph-1a.c: Likewise.\n\t* gcc.target/i386/avx512fp16-vfmulcsh-1a.c: Likewise.\n\t* gcc.target/i386/avx512fp16vl-vfcmulcph-1a.c: Likewise.\n\t* gcc.target/i386/avx512fp16vl-vfmulcph-1a.c: Likewise.", "tree": {"sha": "d69a8eb36338701c5fb2428d1b8e4ca5e0b0102b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d69a8eb36338701c5fb2428d1b8e4ca5e0b0102b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a72b7a455c144b29609c8ecf4dff12dc9040cf2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a72b7a455c144b29609c8ecf4dff12dc9040cf2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a72b7a455c144b29609c8ecf4dff12dc9040cf2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a72b7a455c144b29609c8ecf4dff12dc9040cf2c/comments", "author": {"login": "konglingling7", "id": 86399175, "node_id": "MDQ6VXNlcjg2Mzk5MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/86399175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konglingling7", "html_url": "https://github.com/konglingling7", "followers_url": "https://api.github.com/users/konglingling7/followers", "following_url": "https://api.github.com/users/konglingling7/following{/other_user}", "gists_url": "https://api.github.com/users/konglingling7/gists{/gist_id}", "starred_url": "https://api.github.com/users/konglingling7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konglingling7/subscriptions", "organizations_url": "https://api.github.com/users/konglingling7/orgs", "repos_url": "https://api.github.com/users/konglingling7/repos", "events_url": "https://api.github.com/users/konglingling7/events{/privacy}", "received_events_url": "https://api.github.com/users/konglingling7/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "280d2838c112f02cb24dd34a69edf112e84cfe12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/280d2838c112f02cb24dd34a69edf112e84cfe12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/280d2838c112f02cb24dd34a69edf112e84cfe12"}], "stats": {"total": 172, "additions": 136, "deletions": 36}, "files": [{"sha": "fe73e69389775ed91ecbfcfc5efbf522e3bb20b9", "filename": "gcc/config/i386/avx512fp16intrin.h", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a72b7a455c144b29609c8ecf4dff12dc9040cf2c/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a72b7a455c144b29609c8ecf4dff12dc9040cf2c/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h?ref=a72b7a455c144b29609c8ecf4dff12dc9040cf2c", "patch": "@@ -7162,6 +7162,45 @@ _mm512_set1_pch (_Float16 _Complex __A)\n   return (__m512h) _mm512_set1_ps (u.b);\n }\n \n+// intrinsics below are alias for f*mul_*ch\n+#define _mm512_mul_pch(A, B) _mm512_fmul_pch ((A), (B))\n+#define _mm512_mask_mul_pch(W, U, A, B)\t\t\t\t      \\\n+  _mm512_mask_fmul_pch ((W), (U), (A), (B))\n+#define _mm512_maskz_mul_pch(U, A, B) _mm512_maskz_fmul_pch ((U), (A), (B))\n+#define _mm512_mul_round_pch(A, B, R) _mm512_fmul_round_pch ((A), (B), (R))\n+#define _mm512_mask_mul_round_pch(W, U, A, B, R)\t\t      \\\n+  _mm512_mask_fmul_round_pch ((W), (U), (A), (B), (R))\n+#define _mm512_maskz_mul_round_pch(U, A, B, R)\t\t\t      \\\n+  _mm512_maskz_fmul_round_pch ((U), (A), (B), (R))\n+\n+#define _mm512_cmul_pch(A, B) _mm512_fcmul_pch ((A), (B))\n+#define _mm512_mask_cmul_pch(W, U, A, B)\t\t\t      \\\n+  _mm512_mask_fcmul_pch ((W), (U), (A), (B))\n+#define _mm512_maskz_cmul_pch(U, A, B) _mm512_maskz_fcmul_pch ((U), (A), (B))\n+#define _mm512_cmul_round_pch(A, B, R) _mm512_fcmul_round_pch ((A), (B), (R))\n+#define _mm512_mask_cmul_round_pch(W, U, A, B, R)\t\t      \\\n+  _mm512_mask_fcmul_round_pch ((W), (U), (A), (B), (R))\n+#define _mm512_maskz_cmul_round_pch(U, A, B, R)\t\t\t      \\\n+  _mm512_maskz_fcmul_round_pch ((U), (A), (B), (R))\n+\n+#define _mm_mul_sch(A, B) _mm_fmul_sch ((A), (B))\n+#define _mm_mask_mul_sch(W, U, A, B) _mm_mask_fmul_sch ((W), (U), (A), (B))\n+#define _mm_maskz_mul_sch(U, A, B) _mm_maskz_fmul_sch ((U), (A), (B))\n+#define _mm_mul_round_sch(A, B, R) _mm_fmul_round_sch ((A), (B), (R))\n+#define _mm_mask_mul_round_sch(W, U, A, B, R)\t\t\t      \\\n+  _mm_mask_fmul_round_sch ((W), (U), (A), (B), (R))\n+#define _mm_maskz_mul_round_sch(U, A, B, R)\t\t\t      \\\n+  _mm_maskz_fmul_round_sch ((U), (A), (B), (R))\n+\n+#define _mm_cmul_sch(A, B) _mm_fcmul_sch ((A), (B))\n+#define _mm_mask_cmul_sch(W, U, A, B) _mm_mask_fcmul_sch ((W), (U), (A), (B))\n+#define _mm_maskz_cmul_sch(U, A, B) _mm_maskz_fcmul_sch ((U), (A), (B))\n+#define _mm_cmul_round_sch(A, B, R) _mm_fcmul_round_sch ((A), (B), (R))\n+#define _mm_mask_cmul_round_sch(W, U, A, B, R)\t\t\t      \\\n+  _mm_mask_fcmul_round_sch ((W), (U), (A), (B), (R))\n+#define _mm_maskz_cmul_round_sch(U, A, B, R)\t\t\t      \\\n+  _mm_maskz_fcmul_round_sch ((U), (A), (B), (R))\n+\n #ifdef __DISABLE_AVX512FP16__\n #undef __DISABLE_AVX512FP16__\n #pragma GCC pop_options"}, {"sha": "fb6f69216315e26991f27fbe370a18f61f72d68d", "filename": "gcc/config/i386/avx512fp16vlintrin.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a72b7a455c144b29609c8ecf4dff12dc9040cf2c/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a72b7a455c144b29609c8ecf4dff12dc9040cf2c/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h?ref=a72b7a455c144b29609c8ecf4dff12dc9040cf2c", "patch": "@@ -3337,6 +3337,23 @@ _mm_set1_pch (_Float16 _Complex __A)\n   return (__m128h) _mm_set1_ps (u.b);\n }\n \n+// intrinsics below are alias for f*mul_*ch\n+#define _mm_mul_pch(A, B) _mm_fmul_pch ((A), (B))\n+#define _mm_mask_mul_pch(W, U, A, B) _mm_mask_fmul_pch ((W), (U), (A), (B))\n+#define _mm_maskz_mul_pch(U, A, B) _mm_maskz_fmul_pch ((U), (A), (B))\n+#define _mm256_mul_pch(A, B) _mm256_fmul_pch ((A), (B))\n+#define _mm256_mask_mul_pch(W, U, A, B)\t\t\t\t      \\\n+  _mm256_mask_fmul_pch ((W), (U), (A), (B))\n+#define _mm256_maskz_mul_pch(U, A, B) _mm256_maskz_fmul_pch ((U), (A), (B))\n+\n+#define _mm_cmul_pch(A, B) _mm_fcmul_pch ((A), (B))\n+#define _mm_mask_cmul_pch(W, U, A, B) _mm_mask_fcmul_pch ((W), (U), (A), (B))\n+#define _mm_maskz_cmul_pch(U, A, B) _mm_maskz_fcmul_pch ((U), (A), (B))\n+#define _mm256_cmul_pch(A, B) _mm256_fcmul_pch ((A), (B))\n+#define _mm256_mask_cmul_pch(W, U, A, B)\t\t\t      \\\n+   _mm256_mask_fcmul_pch ((W), (U), (A), (B))\n+#define _mm256_maskz_cmul_pch(U, A, B) _mm256_maskz_fcmul_pch((U), (A), (B))\n+\n #ifdef __DISABLE_AVX512FP16VL__\n #undef __DISABLE_AVX512FP16VL__\n #pragma GCC pop_options"}, {"sha": "e228393b5f0711f31e50413948129b1015646d80", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfcmulcph-1a.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a72b7a455c144b29609c8ecf4dff12dc9040cf2c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmulcph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a72b7a455c144b29609c8ecf4dff12dc9040cf2c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmulcph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmulcph-1a.c?ref=a72b7a455c144b29609c8ecf4dff12dc9040cf2c", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512fp16 -O2\" } */\n-/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n \n #include <immintrin.h>\n \n@@ -22,4 +22,11 @@ avx512f_test (void)\n   res = _mm512_fcmul_round_pch (x1, x2, 8);\n   res1 = _mm512_mask_fcmul_round_pch (res1, m16, x1, x2, 8);\n   res2 = _mm512_maskz_fcmul_round_pch (m16, x1, x2, 11);\n+  \n+  res = _mm512_cmul_pch (x1, x2);\n+  res1 = _mm512_mask_cmul_pch (res1, m16, x1, x2);\n+  res2 = _mm512_maskz_cmul_pch (m16, x1, x2);\n+  res = _mm512_cmul_round_pch (x1, x2, 8);\n+  res1 = _mm512_mask_cmul_round_pch (res1, m16, x1, x2, 8);\n+  res2 = _mm512_maskz_cmul_round_pch (m16, x1, x2, 11);\n }"}, {"sha": "92f58c5ae94cd335a70195645c77a9ea221c93f5", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfcmulcsh-1a.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a72b7a455c144b29609c8ecf4dff12dc9040cf2c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmulcsh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a72b7a455c144b29609c8ecf4dff12dc9040cf2c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmulcsh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmulcsh-1a.c?ref=a72b7a455c144b29609c8ecf4dff12dc9040cf2c", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512fp16 -O2\" } */\n-/* { dg-final { scan-assembler-times \"vfcmulcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfcmulcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfcmulcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfcmulcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfcmulcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfcmulcsh\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcsh\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n \n #include <immintrin.h>\n \n@@ -22,4 +22,11 @@ avx512f_test (void)\n   res = _mm_fcmul_round_sch (x1, x2, 8);\n   res1 = _mm_mask_fcmul_round_sch (res1, m8, x1, x2, 8);\n   res2 = _mm_maskz_fcmul_round_sch (m8, x1, x2, 11);\n+  \n+  res = _mm_cmul_sch (x1, x2);\n+  res1 = _mm_mask_cmul_sch (res1, m8, x1, x2);\n+  res2 = _mm_maskz_cmul_sch (m8, x1, x2);\n+  res = _mm_cmul_round_sch (x1, x2, 8);\n+  res1 = _mm_mask_cmul_round_sch (res1, m8, x1, x2, 8);\n+  res2 = _mm_maskz_cmul_round_sch (m8, x1, x2, 11);\n }"}, {"sha": "4135cd25070c5b7054734e0f43b49be910b9853e", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfmulcph-1a.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a72b7a455c144b29609c8ecf4dff12dc9040cf2c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmulcph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a72b7a455c144b29609c8ecf4dff12dc9040cf2c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmulcph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmulcph-1a.c?ref=a72b7a455c144b29609c8ecf4dff12dc9040cf2c", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512fp16 -O2\" } */\n-/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n \n #include <immintrin.h>\n \n@@ -22,4 +22,11 @@ avx512f_test (void)\n   res = _mm512_fmul_round_pch (x1, x2, 8);\n   res1 = _mm512_mask_fmul_round_pch (res1, m16, x1, x2, 8);\n   res2 = _mm512_maskz_fmul_round_pch (m16, x1, x2, 11);\n+  \n+  res = _mm512_mul_pch (x1, x2);\n+  res1 = _mm512_mask_mul_pch (res1, m16, x1, x2);\n+  res2 = _mm512_maskz_mul_pch (m16, x1, x2);\n+  res = _mm512_mul_round_pch (x1, x2, 8);\n+  res1 = _mm512_mask_mul_round_pch (res1, m16, x1, x2, 8);\n+  res2 = _mm512_maskz_mul_round_pch (m16, x1, x2, 11);\n }"}, {"sha": "cdca385e0f1aad537d3df6c6fd592b8de74c80f5", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfmulcsh-1a.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a72b7a455c144b29609c8ecf4dff12dc9040cf2c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmulcsh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a72b7a455c144b29609c8ecf4dff12dc9040cf2c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmulcsh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmulcsh-1a.c?ref=a72b7a455c144b29609c8ecf4dff12dc9040cf2c", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512fp16 -O2\" } */\n-/* { dg-final { scan-assembler-times \"vfmulcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfmulcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfmulcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfmulcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfmulcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfmulcsh\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcsh\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n \n #include <immintrin.h>\n \n@@ -22,4 +22,11 @@ avx512f_test (void)\n   res = _mm_fmul_round_sch (x1, x2, 8);\n   res1 = _mm_mask_fmul_round_sch (res1, m8, x1, x2, 8);\n   res2 = _mm_maskz_fmul_round_sch (m8, x1, x2, 11);\n+  \n+  res = _mm_mul_sch (x1, x2);\n+  res1 = _mm_mask_mul_sch (res1, m8, x1, x2);\n+  res2 = _mm_maskz_mul_sch (m8, x1, x2);\n+  res = _mm_mul_round_sch (x1, x2, 8);\n+  res1 = _mm_mask_mul_round_sch (res1, m8, x1, x2, 8);\n+  res2 = _mm_maskz_mul_round_sch (m8, x1, x2, 11);\n }"}, {"sha": "370f9ee76decade5420241d17d9e588b4effb615", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vfcmulcph-1a.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a72b7a455c144b29609c8ecf4dff12dc9040cf2c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfcmulcph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a72b7a455c144b29609c8ecf4dff12dc9040cf2c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfcmulcph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfcmulcph-1a.c?ref=a72b7a455c144b29609c8ecf4dff12dc9040cf2c", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -mavx512fp16 -mavx512vl -O2\" } */\n-/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n \n #include <immintrin.h>\n \n@@ -25,4 +25,12 @@ avx512f_test (void)\n   res2 = _mm_fcmul_pch (x4, x5);\n   res2 = _mm_mask_fcmul_pch (res2, m8, x4, x5);\n   res2 = _mm_maskz_fcmul_pch (m8, x4, x5);\n+  \n+  res1 = _mm256_cmul_pch (x1, x2);\n+  res1 = _mm256_mask_cmul_pch (res1, m8, x1, x2);\n+  res1 = _mm256_maskz_cmul_pch (m8, x1, x2);\n+\n+  res2 = _mm_cmul_pch (x4, x5);\n+  res2 = _mm_mask_cmul_pch (res2, m8, x4, x5);\n+  res2 = _mm_maskz_cmul_pch (m8, x4, x5);\n }"}, {"sha": "dce9088b748dae05d7282c314e26dc403dd1c8d7", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vfmulcph-1a.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a72b7a455c144b29609c8ecf4dff12dc9040cf2c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfmulcph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a72b7a455c144b29609c8ecf4dff12dc9040cf2c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfmulcph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vfmulcph-1a.c?ref=a72b7a455c144b29609c8ecf4dff12dc9040cf2c", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -mavx512fp16 -mavx512vl -O2\" } */\n-/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n \n #include <immintrin.h>\n \n@@ -25,4 +25,12 @@ avx512f_test (void)\n   res2 = _mm_fmul_pch (x4, x5);\n   res2 = _mm_mask_fmul_pch (res2, m8, x4, x5);\n   res2 = _mm_maskz_fmul_pch (m8, x4, x5);\n+  \n+  res1 = _mm256_mul_pch (x1, x2);\n+  res1 = _mm256_mask_mul_pch (res1, m8, x1, x2);\n+  res1 = _mm256_maskz_mul_pch (m8, x1, x2);\n+\n+  res2 = _mm_mul_pch (x4, x5);\n+  res2 = _mm_mask_mul_pch (res2, m8, x4, x5);\n+  res2 = _mm_maskz_mul_pch (m8, x4, x5);\n }"}]}