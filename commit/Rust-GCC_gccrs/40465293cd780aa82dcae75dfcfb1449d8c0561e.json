{"sha": "40465293cd780aa82dcae75dfcfb1449d8c0561e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA0NjUyOTNjZDc4MGFhODJkY2FlNzVkZmNmYjE0NDlkOGMwNTYxZQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-03-03T23:37:49Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-03-17T23:26:25Z"}, "message": "c++: ICE with real-to-int conversion in template [PR97973]\n\nIn this test we are building a call in a template, but since neither\nthe function nor any of its arguments are dependent, we go down the\nnormal path in finish_call_expr.  convert_arguments sees that we're\nbinding a reference to int to double and therein convert_to_integer\ncreates a FIX_TRUNC_EXPR.  Later, we call check_function_arguments\nwhich folds the arguments, and, in a template, fold_for_warn calls\nfold_non_dependent_expr.  But tsubst_copy_and_build should not see\na FIX_TRUNC_EXPR (see the patch discussed in\n<https://gcc.gnu.org/pipermail/gcc-patches/2018-March/496183.html>)\nor we crash.\n\nSo let's not create a FIX_TRUNC_EXPR in a template in the first place\nand instead use IMPLICIT_CONV_EXPR.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/97973\n\t* call.c (conv_unsafe_in_template_p): New.\n\t(convert_like): Use it.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/97973\n\t* g++.dg/conversion/real-to-int1.C: New test.", "tree": {"sha": "afe709bf81a04c581dad3b8c99bc3617bf8a93df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afe709bf81a04c581dad3b8c99bc3617bf8a93df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40465293cd780aa82dcae75dfcfb1449d8c0561e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40465293cd780aa82dcae75dfcfb1449d8c0561e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40465293cd780aa82dcae75dfcfb1449d8c0561e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40465293cd780aa82dcae75dfcfb1449d8c0561e/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be246ac2d26e1cb072f205bf97d5eac150220f3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be246ac2d26e1cb072f205bf97d5eac150220f3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be246ac2d26e1cb072f205bf97d5eac150220f3f"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "390b8aa4325f1013140c6a3bbf2420382fcad702", "filename": "gcc/cp/call.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40465293cd780aa82dcae75dfcfb1449d8c0561e/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40465293cd780aa82dcae75dfcfb1449d8c0561e/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=40465293cd780aa82dcae75dfcfb1449d8c0561e", "patch": "@@ -8048,6 +8048,27 @@ convert_like_internal (conversion *convs, tree expr, tree fn, int argnum,\n   return expr;\n }\n \n+/* Return true if converting FROM to TO is unsafe in a template.  */\n+\n+static bool\n+conv_unsafe_in_template_p (tree to, tree from)\n+{\n+  /* Converting classes involves TARGET_EXPR.  */\n+  if (CLASS_TYPE_P (to) || CLASS_TYPE_P (from))\n+    return true;\n+\n+  /* Converting real to integer produces FIX_TRUNC_EXPR which tsubst\n+     doesn't handle.  */\n+  if (SCALAR_FLOAT_TYPE_P (from) && INTEGRAL_OR_ENUMERATION_TYPE_P (to))\n+    return true;\n+\n+  /* Converting integer to real isn't a trivial conversion, either.  */\n+  if (INTEGRAL_OR_ENUMERATION_TYPE_P (from) && SCALAR_FLOAT_TYPE_P (to))\n+    return true;\n+\n+  return false;\n+}\n+\n /* Wrapper for convert_like_internal that handles creating\n    IMPLICIT_CONV_EXPR.  */\n \n@@ -8064,7 +8085,7 @@ convert_like (conversion *convs, tree expr, tree fn, int argnum,\n   tree conv_expr = NULL_TREE;\n   if (processing_template_decl\n       && convs->kind != ck_identity\n-      && (CLASS_TYPE_P (convs->type) || CLASS_TYPE_P (TREE_TYPE (expr))))\n+      && conv_unsafe_in_template_p (convs->type, TREE_TYPE (expr)))\n     {\n       conv_expr = build1 (IMPLICIT_CONV_EXPR, convs->type, expr);\n       if (convs->kind != ck_ref_bind)"}, {"sha": "f7b990b3f4b87258e53253202cae14d4984066b3", "filename": "gcc/testsuite/g++.dg/conversion/real-to-int1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40465293cd780aa82dcae75dfcfb1449d8c0561e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Freal-to-int1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40465293cd780aa82dcae75dfcfb1449d8c0561e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Freal-to-int1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Freal-to-int1.C?ref=40465293cd780aa82dcae75dfcfb1449d8c0561e", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/97973\n+\n+void (*foo[1])(const int &);\n+void (*foo2[1])(const double &);\n+\n+template<typename>\n+void f ()\n+{\n+  (foo[0])(1.1);\n+  (foo2[0])(1);\n+}\n+\n+void\n+g ()\n+{\n+  f<char> ();\n+}"}]}