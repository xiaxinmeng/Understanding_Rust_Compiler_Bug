{"sha": "60f66f34a669f4f15c2fc178d95f12b081f83005", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBmNjZmMzRhNjY5ZjRmMTVjMmZjMTc4ZDk1ZjEyYjA4MWY4MzAwNQ==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2019-10-10T15:25:18Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-10-10T15:25:18Z"}, "message": "[Ada] Various minor typo fixes\n\n2019-10-10  Gary Dismukes  <dismukes@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch4.adb, sem_cat.adb, sem_ch12.adb, sem_ch3.adb,\n\tsem_ch6.adb, sem_prag.adb, sem_util.adb, sem_util.ads: Minor\n\ttypo fixes.\n\nFrom-SVN: r276832", "tree": {"sha": "6f3441a0093fbf174539e4ca4fe91795c0d56bd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f3441a0093fbf174539e4ca4fe91795c0d56bd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60f66f34a669f4f15c2fc178d95f12b081f83005", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60f66f34a669f4f15c2fc178d95f12b081f83005", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60f66f34a669f4f15c2fc178d95f12b081f83005", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60f66f34a669f4f15c2fc178d95f12b081f83005/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4e866f08452aee2747a93f416ff1eb7b86d9f32e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e866f08452aee2747a93f416ff1eb7b86d9f32e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e866f08452aee2747a93f416ff1eb7b86d9f32e"}], "stats": {"total": 43, "additions": 22, "deletions": 21}, "files": [{"sha": "adc61c44011cd4e0e44ef636c89bd41b41f1ba5d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60f66f34a669f4f15c2fc178d95f12b081f83005/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60f66f34a669f4f15c2fc178d95f12b081f83005/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=60f66f34a669f4f15c2fc178d95f12b081f83005", "patch": "@@ -1,4 +1,5 @@\n-2019-10-10  Ed Schonberg  <schonberg@adacore.com>\n+2019-10-10  Gary Dismukes  <dismukes@adacore.com>\n \n-\t* sem_warn.adb (Warn_On_Useless_Assignment): Do not warn if the\n-\tsecond assignment is at the same source position as the first.\n\\ No newline at end of file\n+\t* exp_ch4.adb, sem_cat.adb, sem_ch12.adb, sem_ch3.adb,\n+\tsem_ch6.adb, sem_prag.adb, sem_util.adb, sem_util.ads: Minor\n+\ttypo fixes.\n\\ No newline at end of file"}, {"sha": "158dcb59cc5d632d2c6793270d192d66929235ba", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60f66f34a669f4f15c2fc178d95f12b081f83005/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60f66f34a669f4f15c2fc178d95f12b081f83005/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=60f66f34a669f4f15c2fc178d95f12b081f83005", "patch": "@@ -9577,9 +9577,9 @@ package body Exp_Ch4 is\n       Typ : constant Entity_Id := Etype (Left_Opnd (N));\n \n    begin\n-      --  Case of elementary type with standard operator.  But if\n-      --  unnesting, handle elementary types whose Equivalent_Types are\n-      --  records because there may be padding or undefined fields.\n+      --  Case of elementary type with standard operator. But if unnesting,\n+      --  handle elementary types whose Equivalent_Types are records because\n+      --  there may be padding or undefined fields.\n \n       if Is_Elementary_Type (Typ)\n         and then Sloc (Entity (N)) = Standard_Location"}, {"sha": "833df88b146f3bd0d4021246f47c13a9d4d57557", "filename": "gcc/ada/sem_cat.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60f66f34a669f4f15c2fc178d95f12b081f83005/gcc%2Fada%2Fsem_cat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60f66f34a669f4f15c2fc178d95f12b081f83005/gcc%2Fada%2Fsem_cat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.adb?ref=60f66f34a669f4f15c2fc178d95f12b081f83005", "patch": "@@ -721,11 +721,11 @@ package body Sem_Cat is\n       --  The purpose is to set categorization flags before analyzing the\n       --  unit itself, so as to diagnose violations of categorization as\n       --  we process each declaration, even though the pragma appears after\n-      --  the unit. This processing is only needsd if compilation unit\n-      --  pragmas are present.\n-      --  Note: this code may be incorrect in the unlikely case a child\n-      --  genericc unit is instantiated as a child of its (non-generic)\n-      --  parent, so that generic and insstance are siblings,\n+      --  the unit. This processing is only needed if compilation unit pragmas\n+      --  are present.\n+      --  Note: This code may be incorrect in the unlikely case a child generic\n+      --  unit is instantiated as a child of its (nongeneric) parent, so that\n+      --  generic and instance are siblings.\n \n       if Nkind (P) /= N_Compilation_Unit\n          or else No (First (Pragmas_After (Aux_Decls_Node (P))))"}, {"sha": "8c3559f98df91494ee694ac47d6098e838b06a53", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60f66f34a669f4f15c2fc178d95f12b081f83005/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60f66f34a669f4f15c2fc178d95f12b081f83005/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=60f66f34a669f4f15c2fc178d95f12b081f83005", "patch": "@@ -2927,7 +2927,7 @@ package body Sem_Ch12 is\n       Set_Inner_Instances (Formal, New_Elmt_List);\n \n       --  It is unclear that any aspects can apply to a formal package\n-      --  declaration, given that they look like a hidden comformance\n+      --  declaration, given that they look like a hidden conformance\n       --  requirement on the corresponding actual. However, Abstract_State\n       --  must be treated specially because it generates declarations that\n       --  must appear before other declarations in the specification and"}, {"sha": "b12f69b994c8205d4ec0b780e0a40031ddad096a", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60f66f34a669f4f15c2fc178d95f12b081f83005/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60f66f34a669f4f15c2fc178d95f12b081f83005/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=60f66f34a669f4f15c2fc178d95f12b081f83005", "patch": "@@ -13456,8 +13456,8 @@ package body Sem_Ch3 is\n             --  After expansion of discriminated task types, the value\n             --  of the discriminant may be converted to a run-time type\n             --  for restricted run-times. Propagate the value of the\n-            --  discriminant ss well, so that e.g. the secondary stack\n-            --  component has a static constraint. Necessry for LLVM.\n+            --  discriminant as well, so that e.g. the secondary stack\n+            --  component has a static constraint. Necessary for LLVM.\n \n             elsif Nkind (Expr) = N_Type_Conversion\n               and then Is_Discriminant (Expression (Expr))"}, {"sha": "5af3b7b7e196c997c05f25bc3b564b90f970616a", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60f66f34a669f4f15c2fc178d95f12b081f83005/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60f66f34a669f4f15c2fc178d95f12b081f83005/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=60f66f34a669f4f15c2fc178d95f12b081f83005", "patch": "@@ -4262,11 +4262,11 @@ package body Sem_Ch6 is\n       --  object can then be used instead of the formal in case it is used\n       --  in an actual to a call to a nested subprogram.\n \n-      --  This method is used to suppliment our \"small integer model\" for\n-      --  accessibility check generation (for more information see\n+      --  This method is used to supplement our \"small integer model\" for\n+      --  accessibility-check generation (for more information see\n       --  Dynamic_Accessibility_Level).\n \n-      --  Because we allow accesibility values greater than our expected value\n+      --  Because we allow accessibility values greater than our expected value\n       --  passing along the same extra accessibility formal as an actual\n       --  to a nested subprogram becomes a problem because high values mean\n       --  different things to the callee even though they are the same to the"}, {"sha": "7b36f8e3923de5f4ca6ee35ab36acd391f761d2e", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60f66f34a669f4f15c2fc178d95f12b081f83005/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60f66f34a669f4f15c2fc178d95f12b081f83005/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=60f66f34a669f4f15c2fc178d95f12b081f83005", "patch": "@@ -13093,7 +13093,7 @@ package body Sem_Prag is\n             --  Infer the type to use for a string literal or a concatentation\n             --  of operands whose types can be inferred. For such expressions,\n             --  returns the \"narrowest\" of the three predefined string types\n-            --  that can represent the characters occuring in the expression.\n+            --  that can represent the characters occurring in the expression.\n             --  For other expressions, returns Empty.\n \n             function Preferred_String_Type (Expr : Node_Id) return Entity_Id is"}, {"sha": "9ca80aafda738ac3b9e132d68c47d21a6be139fc", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60f66f34a669f4f15c2fc178d95f12b081f83005/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60f66f34a669f4f15c2fc178d95f12b081f83005/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=60f66f34a669f4f15c2fc178d95f12b081f83005", "patch": "@@ -9071,8 +9071,8 @@ package body Sem_Util is\n             --  components are being gathered for an aggregate, in which case\n             --  the caller must check Report_Errors.\n             --\n-            --  In Ada2020 the above rules are relaxed. A non-static governing\n-            --  discriminant is ok as long as it has a static subtype and\n+            --  In Ada 2020 the above rules are relaxed. A nonstatic governing\n+            --  discriminant is OK as long as it has a static subtype and\n             --  every value of that subtype (and there must be at least one)\n             --  selects the same variant.\n "}, {"sha": "7df81405632c7048573c3c00f213e180fad43b10", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60f66f34a669f4f15c2fc178d95f12b081f83005/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60f66f34a669f4f15c2fc178d95f12b081f83005/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=60f66f34a669f4f15c2fc178d95f12b081f83005", "patch": "@@ -2991,7 +2991,7 @@ package Sem_Util is\n       function Choice_List_Intervals (Discrete_Choices : List_Id)\n                                      return Discrete_Interval_List;\n       --  Given a discrete choice list, returns the (unique) interval\n-      --  list representing the chosen values..\n+      --  list representing the chosen values.\n \n       function Is_Subset (Subset, Of_Set : Discrete_Interval_List)\n         return Boolean;"}]}