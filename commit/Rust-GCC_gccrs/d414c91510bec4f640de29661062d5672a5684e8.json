{"sha": "d414c91510bec4f640de29661062d5672a5684e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQxNGM5MTUxMGJlYzRmNjQwZGUyOTY2MTA2MmQ1NjcyYTU2ODRlOA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-04-22T13:42:04Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-04-22T13:56:51Z"}, "message": "testsuite: [arm] Add arm_softfp_ok and arm_hard_ok effective targets.\n\nFor arm-linux-gnueabi* targets, a toolchain cannot support the\nfloat-abi opposite to the one it has been configured for: since glibc\ndoes not support such multilibs, we end up lacking gnu/stubs-*.h when\nincluding stdint.h for instance.\n\nThis patch introduces two new effective targets to detect whether we\ncan compile tests with -mfloat-abi=softfp or -mfloat-abi=hard.\n\nThis enables to make such tests unsupported rather than fail.\n\n2020-04-22  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/testsuite/\n\t* lib/target-supports.exp (arm_softfp_ok): New effective target.\n\t(arm_hard_ok): Likewise.\n\n\tgcc/\n\t* doc/sourcebuild.texi (arm_softfp_ok, arm_hard_ok): Document.", "tree": {"sha": "90f14632fbdcfa3f4189849cfad6c4dffa764169", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90f14632fbdcfa3f4189849cfad6c4dffa764169"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d414c91510bec4f640de29661062d5672a5684e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d414c91510bec4f640de29661062d5672a5684e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d414c91510bec4f640de29661062d5672a5684e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d414c91510bec4f640de29661062d5672a5684e8/comments", "author": null, "committer": null, "parents": [{"sha": "a87e0cba839bb4a2daca34896a0760258027b38e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a87e0cba839bb4a2daca34896a0760258027b38e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a87e0cba839bb4a2daca34896a0760258027b38e"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "961048adb2abde94ef0c9259b03ba546ce90fc5a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d414c91510bec4f640de29661062d5672a5684e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d414c91510bec4f640de29661062d5672a5684e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d414c91510bec4f640de29661062d5672a5684e8", "patch": "@@ -1,3 +1,7 @@\n+2020-04-22  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* doc/sourcebuild.texi (arm_softfp_ok, arm_hard_ok): Document.\n+\n 2020-04-22  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n             Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>"}, {"sha": "b69612024be0082b15243ae52dbbbbda3a9dd3d7", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d414c91510bec4f640de29661062d5672a5684e8/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d414c91510bec4f640de29661062d5672a5684e8/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=d414c91510bec4f640de29661062d5672a5684e8", "patch": "@@ -1971,6 +1971,14 @@ ARM Target supports options suitable for accessing the Q-bit manipulation\n intrinsics from @code{arm_acle.h}.\n Some multilibs may be incompatible with these options.\n \n+@item arm_softfp_ok\n+@anchor{arm_softfp_ok}\n+ARM target supports the @code{-mfloat-abi=softfp} option.\n+\n+@item arm_hard_ok\n+@anchor{arm_hard_ok}\n+ARM target supports the @code{-mfloat-abi=hard} option.\n+\n @end table\n \n @subsubsection AArch64-specific attributes"}, {"sha": "9c3a03cb73f565b04f39f3810a68905356dd753c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d414c91510bec4f640de29661062d5672a5684e8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d414c91510bec4f640de29661062d5672a5684e8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d414c91510bec4f640de29661062d5672a5684e8", "patch": "@@ -1,3 +1,8 @@\n+2020-04-22  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+        * lib/target-supports.exp (arm_softfp_ok): New effective target.\n+        (arm_hard_ok): Likewise.\n+\n 2020-04-22  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/94709"}, {"sha": "307a67ed66c6abcf2795f19347cb50b5a020f1ae", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d414c91510bec4f640de29661062d5672a5684e8/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d414c91510bec4f640de29661062d5672a5684e8/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=d414c91510bec4f640de29661062d5672a5684e8", "patch": "@@ -4739,6 +4739,26 @@ proc check_effective_target_default_branch_protection { } {\n     return [check_configured_with \"enable-standard-branch-protection\"]\n }\n \n+# Return 1 if this is an ARM target supporting -mfloat-abi=softfp.\n+\n+proc check_effective_target_arm_softfp_ok { } {\n+    return [check_no_compiler_messages arm_softfp_ok object {\n+\t#include <stdint.h>\n+\tint dummy;\n+\tint main (void) { return 0; }\n+\t} \"-mfloat-abi=softfp\"]\n+}\n+\n+# Return 1 if this is an ARM target supporting -mfloat-abi=hard.\n+\n+proc check_effective_target_arm_hard_ok { } {\n+    return [check_no_compiler_messages arm_hard_ok object {\n+\t#include <stdint.h>\n+\tint dummy;\n+\tint main (void) { return 0; }\n+\t} \"-mfloat-abi=hard\"]\n+}\n+\n # Return 1 if the target supports ARMv8.1-M MVE with floating point\n # instructions, 0 otherwise.  The test is valid for ARM.\n # Record the command line options needed."}]}