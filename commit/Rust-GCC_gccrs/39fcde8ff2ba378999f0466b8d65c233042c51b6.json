{"sha": "39fcde8ff2ba378999f0466b8d65c233042c51b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlmY2RlOGZmMmJhMzc4OTk5ZjA0NjZiOGQ2NWMyMzMwNDJjNTFiNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-04-07T09:47:43Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-04-07T09:47:43Z"}, "message": "fold-const.c (fold): New case.\n\n\t* fold-const.c (fold) <ARRAY_REF>: New case.  Try to fold constant\n\treference in constructor with non self-referential type.\n\nada/\n\t* utils2.c (build_binary_op): Fold ARRAY_REF and ARRAY_RANGE_REF too.\n\nFrom-SVN: r133977", "tree": {"sha": "5f52e504245f353cbf4c7ab73aff6c9c36257959", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f52e504245f353cbf4c7ab73aff6c9c36257959"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39fcde8ff2ba378999f0466b8d65c233042c51b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39fcde8ff2ba378999f0466b8d65c233042c51b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39fcde8ff2ba378999f0466b8d65c233042c51b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39fcde8ff2ba378999f0466b8d65c233042c51b6/comments", "author": null, "committer": null, "parents": [{"sha": "9dd9bf80a87fdd119261f5efb8a9ceceffb12963", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dd9bf80a87fdd119261f5efb8a9ceceffb12963", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dd9bf80a87fdd119261f5efb8a9ceceffb12963"}], "stats": {"total": 116, "additions": 114, "deletions": 2}, "files": [{"sha": "b4e1c51dabb40b2689b9add8618b659c2be4191f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39fcde8ff2ba378999f0466b8d65c233042c51b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39fcde8ff2ba378999f0466b8d65c233042c51b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39fcde8ff2ba378999f0466b8d65c233042c51b6", "patch": "@@ -1,3 +1,8 @@\n+2008-04-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* fold-const.c (fold) <ARRAY_REF>: New case.  Try to fold constant\n+\treference in constructor with non self-referential type.\n+\n 2008-04-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tRemoval of Return with Depressed Stack Pointer support"}, {"sha": "826cd0dfa9987dd8e0d8c1fcfb717e929a6359d4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39fcde8ff2ba378999f0466b8d65c233042c51b6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39fcde8ff2ba378999f0466b8d65c233042c51b6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=39fcde8ff2ba378999f0466b8d65c233042c51b6", "patch": "@@ -1,3 +1,7 @@\n+2008-04-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* utils2.c (build_binary_op): Fold ARRAY_REF and ARRAY_RANGE_REF too.\n+\n 2008-04-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gigi.h (create_subprog_type): Remove returns_with_dsp parameter."}, {"sha": "8eddde2fb3737c66cce9190448b0f72359626097", "filename": "gcc/ada/utils2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39fcde8ff2ba378999f0466b8d65c233042c51b6/gcc%2Fada%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39fcde8ff2ba378999f0466b8d65c233042c51b6/gcc%2Fada%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils2.c?ref=39fcde8ff2ba378999f0466b8d65c233042c51b6", "patch": "@@ -1017,8 +1017,8 @@ build_binary_op (enum tree_code op_code, tree result_type,\n   else if (TREE_CODE (right_operand) == NULL_EXPR)\n     return build1 (NULL_EXPR, operation_type, TREE_OPERAND (right_operand, 0));\n   else if (op_code == ARRAY_REF || op_code == ARRAY_RANGE_REF)\n-    result = build4 (op_code, operation_type, left_operand,\n-\t\t     right_operand, NULL_TREE, NULL_TREE);\n+    result = fold (build4 (op_code, operation_type, left_operand,\n+\t\t\t   right_operand, NULL_TREE, NULL_TREE));\n   else\n     result\n       = fold_build2 (op_code, operation_type, left_operand, right_operand);"}, {"sha": "5a101f27451359f5f172d483cf761fa7d9e77db2", "filename": "gcc/fold-const.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39fcde8ff2ba378999f0466b8d65c233042c51b6/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39fcde8ff2ba378999f0466b8d65c233042c51b6/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=39fcde8ff2ba378999f0466b8d65c233042c51b6", "patch": "@@ -13086,6 +13086,45 @@ fold (tree expr)\n \n   switch (code)\n     {\n+    case ARRAY_REF:\n+      {\n+\ttree op0 = TREE_OPERAND (t, 0);\n+\ttree op1 = TREE_OPERAND (t, 1);\n+\n+\tif (TREE_CODE (op1) == INTEGER_CST\n+\t    && TREE_CODE (op0) == CONSTRUCTOR\n+\t    && ! type_contains_placeholder_p (TREE_TYPE (op0)))\n+\t  {\n+\t    VEC(constructor_elt,gc) *elts = CONSTRUCTOR_ELTS (op0);\n+\t    unsigned HOST_WIDE_INT end = VEC_length (constructor_elt, elts);\n+\t    unsigned HOST_WIDE_INT begin = 0;\n+\n+\t    /* Find a matching index by means of a binary search.  */\n+\t    while (begin != end)\n+\t      {\n+\t\tunsigned HOST_WIDE_INT middle = (begin + end) / 2;\n+\t\ttree index = VEC_index (constructor_elt, elts, middle)->index;\n+\n+\t\tif (TREE_CODE (index) == INTEGER_CST\n+\t\t    && tree_int_cst_lt (index, op1))\n+\t\t  begin = middle + 1;\n+\t\telse if (TREE_CODE (index) == INTEGER_CST\n+\t\t\t && tree_int_cst_lt (op1, index))\n+\t\t  end = middle;\n+\t\telse if (TREE_CODE (index) == RANGE_EXPR\n+\t\t\t && tree_int_cst_lt (TREE_OPERAND (index, 1), op1))\n+\t\t  begin = middle + 1;\n+\t\telse if (TREE_CODE (index) == RANGE_EXPR\n+\t\t\t && tree_int_cst_lt (op1, TREE_OPERAND (index, 0)))\n+\t\t  end = middle;\n+\t\telse\n+\t\t  return VEC_index (constructor_elt, elts, middle)->value;\n+\t      }\n+\t  }\n+\n+\treturn t;\n+      }\n+\n     case CONST_DECL:\n       return fold (DECL_INITIAL (t));\n "}, {"sha": "d4e38e8dae53f97a15af2aa60162812658194d84", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39fcde8ff2ba378999f0466b8d65c233042c51b6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39fcde8ff2ba378999f0466b8d65c233042c51b6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=39fcde8ff2ba378999f0466b8d65c233042c51b6", "patch": "@@ -1,3 +1,8 @@\n+2008-04-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/array4.adb: New test.\n+\t* gnat.dg/specs/static_initializer2.ads: Likewise.\n+\n 2008-04-06  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/35400"}, {"sha": "048698a54e1d4131ce70b96cbf1a378ce87fca16", "filename": "gcc/testsuite/gnat.dg/array4.adb", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39fcde8ff2ba378999f0466b8d65c233042c51b6/gcc%2Ftestsuite%2Fgnat.dg%2Farray4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39fcde8ff2ba378999f0466b8d65c233042c51b6/gcc%2Ftestsuite%2Fgnat.dg%2Farray4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Farray4.adb?ref=39fcde8ff2ba378999f0466b8d65c233042c51b6", "patch": "@@ -0,0 +1,37 @@\n+-- { dg-do run }\n+\n+procedure Array4 is\n+\n+   type A is array (1..5) of Integer;\n+   f : constant A := (1, 2, 3, 4, 5);\n+\n+   i1 : integer renames f(1);\n+   i2 : integer renames f(2);\n+   i3 : integer renames f(3);\n+   i4 : integer renames f(4);\n+   i5 : integer renames f(5);\n+\n+   procedure Link_Failure;\n+   pragma Import (C, Link_Failure);\n+\n+begin\n+  if i1 /= 1 then\n+    Link_Failure;\n+  end if;\n+\n+  if i2 /= 2 then\n+    Link_Failure;\n+  end if;\n+\n+  if i3 /= 3 then\n+    Link_Failure;\n+  end if;\n+\n+  if i4 /= 4 then\n+    Link_Failure;\n+  end if;\n+\n+  if i5 /= 5 then\n+    Link_Failure;\n+  end if;\n+end;"}, {"sha": "3b27f26bde724515e0aa5f6068025a814d04a079", "filename": "gcc/testsuite/gnat.dg/specs/static_initializer2.ads", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39fcde8ff2ba378999f0466b8d65c233042c51b6/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fstatic_initializer2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39fcde8ff2ba378999f0466b8d65c233042c51b6/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fstatic_initializer2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fstatic_initializer2.ads?ref=39fcde8ff2ba378999f0466b8d65c233042c51b6", "patch": "@@ -0,0 +1,22 @@\n+-- { dg-do compile }\n+\n+package Static_Initializer2 is\n+\n+   type A is array (1..5) of Integer;\n+   f : constant A := (1, 2, 3, 4, 5);\n+\n+   i1 : integer renames f(1);\n+   i2 : integer renames f(2);\n+   i3 : integer renames f(3);\n+   i4 : integer renames f(4);\n+   i5 : integer renames f(5);\n+\n+   b1 : boolean := i1 = 1;\n+   b2 : boolean := i2 = 2;\n+   b3 : boolean := i3 = 3;\n+   b4 : boolean := i4 = 4;\n+   b5 : boolean := i5 = 5;\n+\n+end Static_Initializer2;\n+\n+-- { dg-final { scan-assembler-not \"elabs\" } }"}]}