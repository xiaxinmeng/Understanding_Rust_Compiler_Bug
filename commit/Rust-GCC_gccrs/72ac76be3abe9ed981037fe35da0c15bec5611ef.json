{"sha": "72ac76be3abe9ed981037fe35da0c15bec5611ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJhYzc2YmUzYWJlOWVkOTgxMDM3ZmUzNWRhMGMxNWJlYzU2MTFlZg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-06-15T07:51:35Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-06-15T07:51:35Z"}, "message": "alpha.md: Follow spelling conventions.\n\n\t* config/alpha/alpha.md: Follow spelling conventions.\n\t* config/arm/arm.c: Likewise.\n\t* config/arm/arm.h: Likewise.\n\t* config/arm/arm.md: Likewise.\n\t* config/arm/crtn.asm: Likewise.\n\t* config/m32r/m32r.c: Likewise.\n\t* config/m32r/m32r.md: Likewise.\n\t* config/rs6000/rs6000.c: Likewise.\n\nFrom-SVN: r67970", "tree": {"sha": "22486dea77187502b3161fcd8a2792a06a09a3af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22486dea77187502b3161fcd8a2792a06a09a3af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72ac76be3abe9ed981037fe35da0c15bec5611ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72ac76be3abe9ed981037fe35da0c15bec5611ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72ac76be3abe9ed981037fe35da0c15bec5611ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72ac76be3abe9ed981037fe35da0c15bec5611ef/comments", "author": null, "committer": null, "parents": [{"sha": "a2855205a5085bb86367761d459eb29f5a0fc792", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2855205a5085bb86367761d459eb29f5a0fc792", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2855205a5085bb86367761d459eb29f5a0fc792"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "8bd85fa99d63770574f2e16a4e1d8e3b5ebed083", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ac76be3abe9ed981037fe35da0c15bec5611ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ac76be3abe9ed981037fe35da0c15bec5611ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72ac76be3abe9ed981037fe35da0c15bec5611ef", "patch": "@@ -1,3 +1,14 @@\n+2003-06-15  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/alpha/alpha.md: Follow spelling conventions.\n+\t* config/arm/arm.c: Likewise.\n+\t* config/arm/arm.h: Likewise.\n+\t* config/arm/arm.md: Likewise.\n+\t* config/arm/crtn.asm: Likewise.\n+\t* config/m32r/m32r.c: Likewise.\n+\t* config/m32r/m32r.md: Likewise.\n+\t* config/rs6000/rs6000.c: Likewise.\n+\n 2003-06-15  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/alpha.c (alpha_output_mi_thunk_osf): Call"}, {"sha": "9ddeb9e7df1539d79e7adbffe140689266e4b96f", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ac76be3abe9ed981037fe35da0c15bec5611ef/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ac76be3abe9ed981037fe35da0c15bec5611ef/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=72ac76be3abe9ed981037fe35da0c15bec5611ef", "patch": "@@ -5273,7 +5273,7 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n \n ;; Split the load of an address into a four-insn sequence on Unicos/Mk.\n ;; Always generate a REG_EQUAL note for the last instruction to facilitate\n-;; optimisations. If the symbolic operand is a label_ref, generate REG_LABEL\n+;; optimizations. If the symbolic operand is a label_ref, generate REG_LABEL\n ;; notes and update LABEL_NUSES because this is not done automatically.\n ;; Labels may be incorrectly deleted if we don't do this.\n ;;"}, {"sha": "cd2b149ea3fb8f02464eb832760f88674f56b175", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ac76be3abe9ed981037fe35da0c15bec5611ef/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ac76be3abe9ed981037fe35da0c15bec5611ef/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=72ac76be3abe9ed981037fe35da0c15bec5611ef", "patch": "@@ -5642,7 +5642,7 @@ arm_reload_in_hi (rtx *operands)\n \t\t\t\t\t\t\t 0))));\n }\n \n-/* Handle storing a half-word to memory during reload by synthesising as two\n+/* Handle storing a half-word to memory during reload by synthesizing as two\n    byte stores.  Take care not to clobber the input values until after we\n    have moved them somewhere safe.  This code assumes that if the DImode\n    scratch in operands[2] overlaps either the input value or output address\n@@ -7740,7 +7740,7 @@ arm_compute_save_reg_mask (void)\n      it.  If we are pushing other registers onto the stack however, we\n      can save an instruction in the epilogue by pushing the link register\n      now and then popping it back into the PC.  This incurs extra memory\n-     accesses though, so we only do it when optimising for size, and only\n+     accesses though, so we only do it when optimizing for size, and only\n      if we know that we will not need a fancy return sequence.  */\n   if (regs_ever_live [LR_REGNUM]\n \t  || (save_reg_mask"}, {"sha": "c923e01f2c8e3eb846fb5cff08629f37f390ce24", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ac76be3abe9ed981037fe35da0c15bec5611ef/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ac76be3abe9ed981037fe35da0c15bec5611ef/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=72ac76be3abe9ed981037fe35da0c15bec5611ef", "patch": "@@ -2345,7 +2345,7 @@ extern int making_const_table;\n #endif\n \f\n /* Only perform branch elimination (by making instructions conditional) if\n-   we're optimising.  Otherwise it's of no use anyway.  */\n+   we're optimizing.  Otherwise it's of no use anyway.  */\n #define FINAL_PRESCAN_INSN(INSN, OPVEC, NOPERANDS)\t\\\n   if (TARGET_ARM && optimize)\t\t\t\t\\\n     arm_final_prescan_insn (INSN);\t\t\t\\"}, {"sha": "d03c193aba9c7c1df0858d56dfc7e8508be7c02d", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ac76be3abe9ed981037fe35da0c15bec5611ef/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ac76be3abe9ed981037fe35da0c15bec5611ef/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=72ac76be3abe9ed981037fe35da0c15bec5611ef", "patch": "@@ -509,7 +509,7 @@\n   \"\n )\n \n-; If there is a scratch available, this will be faster than synthesising the\n+; If there is a scratch available, this will be faster than synthesizing the\n ; addition.\n (define_peephole2\n   [(match_scratch:SI 3 \"r\")"}, {"sha": "9ad75e3f2aabb9ca122d8569cb59a7cfee694098", "filename": "gcc/config/arm/crtn.asm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ac76be3abe9ed981037fe35da0c15bec5611ef/gcc%2Fconfig%2Farm%2Fcrtn.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ac76be3abe9ed981037fe35da0c15bec5611ef/gcc%2Fconfig%2Farm%2Fcrtn.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcrtn.asm?ref=72ac76be3abe9ed981037fe35da0c15bec5611ef", "patch": "@@ -39,7 +39,7 @@\n \t# in crti.asm.  If you change this macro you must also change\n \t# that macro match.\n \t#\n-\t# Note - we do not try any fancy optimisations of the return\n+\t# Note - we do not try any fancy optimizations of the return\n \t# sequences here, it is just not worth it.  Instead keep things\n \t# simple.  Restore all the save resgisters, including the link\n \t# register and then perform the correct function return instruction."}, {"sha": "55b7cf71d80b9c6295c7d690ecb338b2d3aad807", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ac76be3abe9ed981037fe35da0c15bec5611ef/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ac76be3abe9ed981037fe35da0c15bec5611ef/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=72ac76be3abe9ed981037fe35da0c15bec5611ef", "patch": "@@ -1002,7 +1002,7 @@ large_insn_p (op, mode)\n   return get_attr_length (op) != 2;\n }\n \n-/* Return non-zero if TYPE must be passed or returned in memory.\n+/* Return nonzero if TYPE must be passed or returned in memory.\n    The m32r treats both directions the same so we handle both directions\n    in this function.  */\n "}, {"sha": "7dad4e0f8f585285211503c52edbc70dae90adfb", "filename": "gcc/config/m32r/m32r.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ac76be3abe9ed981037fe35da0c15bec5611ef/gcc%2Fconfig%2Fm32r%2Fm32r.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ac76be3abe9ed981037fe35da0c15bec5611ef/gcc%2Fconfig%2Fm32r%2Fm32r.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.md?ref=72ac76be3abe9ed981037fe35da0c15bec5611ef", "patch": "@@ -2540,7 +2540,7 @@\n ;; Simialr code is produced for the subtract expression.  With this\n ;; peephole the redundant move is eliminated.\n ;;\n-;; This optimisation only works if PRESERVE_DEATH_INFO_REGNO_P is\n+;; This optimization only works if PRESERVE_DEATH_INFO_REGNO_P is\n ;; defined in m32r.h\n \n (define_peephole"}, {"sha": "8bd2a0cb78bc849d6b1777f9f0df00f00c282b7e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ac76be3abe9ed981037fe35da0c15bec5611ef/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ac76be3abe9ed981037fe35da0c15bec5611ef/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=72ac76be3abe9ed981037fe35da0c15bec5611ef", "patch": "@@ -1534,7 +1534,7 @@ easy_fp_constant (op, mode)\n     abort ();\n }\n \n-/* Return non zero if all elements of a vector have the same value.  */\n+/* Return nonzero if all elements of a vector have the same value.  */\n \n static int\n easy_vector_same (op, mode)"}]}