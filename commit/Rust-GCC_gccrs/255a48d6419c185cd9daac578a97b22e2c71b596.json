{"sha": "255a48d6419c185cd9daac578a97b22e2c71b596", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU1YTQ4ZDY0MTljMTg1Y2Q5ZGFhYzU3OGE5N2IyMmUyYzcxYjU5Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-05-31T20:36:26Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-05-31T20:36:26Z"}, "message": "* constexpr.c (cxx_eval_indirect_ref): Try folding first.\n\nFrom-SVN: r223902", "tree": {"sha": "d2930a0386034be26192a26f7221648d0aeef4a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2930a0386034be26192a26f7221648d0aeef4a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/255a48d6419c185cd9daac578a97b22e2c71b596", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/255a48d6419c185cd9daac578a97b22e2c71b596", "html_url": "https://github.com/Rust-GCC/gccrs/commit/255a48d6419c185cd9daac578a97b22e2c71b596", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/255a48d6419c185cd9daac578a97b22e2c71b596/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6ad6af49da1d0e069cb828fa2a8b846b326caada", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ad6af49da1d0e069cb828fa2a8b846b326caada", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ad6af49da1d0e069cb828fa2a8b846b326caada"}], "stats": {"total": 75, "additions": 41, "deletions": 34}, "files": [{"sha": "467449c5fbd314562c7a3f5fc2ae03c767742210", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255a48d6419c185cd9daac578a97b22e2c71b596/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255a48d6419c185cd9daac578a97b22e2c71b596/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=255a48d6419c185cd9daac578a97b22e2c71b596", "patch": "@@ -1,5 +1,7 @@\n 2015-05-31  Jason Merrill  <jason@redhat.com>\n \n+\t* constexpr.c (cxx_eval_indirect_ref): Try folding first.\n+\n \tPR c++/66320\n \t* constexpr.c (cxx_eval_constant_expression): Treat a placeholder\n \twith the wrong type as non-constant."}, {"sha": "ff5489fe029c9d69f3a623fc1395f9430f24b0ad", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 39, "deletions": 34, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255a48d6419c185cd9daac578a97b22e2c71b596/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255a48d6419c185cd9daac578a97b22e2c71b596/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=255a48d6419c185cd9daac578a97b22e2c71b596", "patch": "@@ -2427,42 +2427,55 @@ cxx_eval_indirect_ref (const constexpr_ctx *ctx, tree t,\n \t\t       bool *non_constant_p, bool *overflow_p)\n {\n   tree orig_op0 = TREE_OPERAND (t, 0);\n-  tree op0 = cxx_eval_constant_expression (ctx, orig_op0,\n-\t\t\t\t\t   /*lval*/false, non_constant_p,\n-\t\t\t\t\t   overflow_p);\n   bool empty_base = false;\n-  tree r;\n-\n-  /* Don't VERIFY_CONSTANT here.  */\n-  if (*non_constant_p)\n-    return t;\n-\n-  r = cxx_fold_indirect_ref (EXPR_LOCATION (t), TREE_TYPE (t), op0,\n-\t\t\t     &empty_base);\n \n-  if (r)\n-    r = cxx_eval_constant_expression (ctx, r,\n-\t\t\t\t      lval, non_constant_p, overflow_p);\n-  else\n+  /* First try to simplify it directly.  */\n+  tree r = cxx_fold_indirect_ref (EXPR_LOCATION (t), TREE_TYPE (t), orig_op0,\n+\t\t\t\t  &empty_base);\n+  if (!r)\n     {\n-      tree sub = op0;\n-      STRIP_NOPS (sub);\n-      if (TREE_CODE (sub) == ADDR_EXPR)\n+      /* If that didn't work, evaluate the operand first.  */\n+      tree op0 = cxx_eval_constant_expression (ctx, orig_op0,\n+\t\t\t\t\t       /*lval*/false, non_constant_p,\n+\t\t\t\t\t       overflow_p);\n+      /* Don't VERIFY_CONSTANT here.  */\n+      if (*non_constant_p)\n+\treturn t;\n+\n+      r = cxx_fold_indirect_ref (EXPR_LOCATION (t), TREE_TYPE (t), op0,\n+\t\t\t\t &empty_base);\n+      if (r == NULL_TREE)\n \t{\n \t  /* We couldn't fold to a constant value.  Make sure it's not\n \t     something we should have been able to fold.  */\n-\t  gcc_assert (!same_type_ignoring_top_level_qualifiers_p\n-\t\t      (TREE_TYPE (TREE_TYPE (sub)), TREE_TYPE (t)));\n-\t  /* DR 1188 says we don't have to deal with this.  */\n-\t  if (!ctx->quiet)\n-\t    error (\"accessing value of %qE through a %qT glvalue in a \"\n-\t\t   \"constant expression\", build_fold_indirect_ref (sub),\n-\t\t   TREE_TYPE (t));\n-\t  *non_constant_p = true;\n+\t  tree sub = op0;\n+\t  STRIP_NOPS (sub);\n+\t  if (TREE_CODE (sub) == ADDR_EXPR)\n+\t    {\n+\t      gcc_assert (!same_type_ignoring_top_level_qualifiers_p\n+\t\t\t  (TREE_TYPE (TREE_TYPE (sub)), TREE_TYPE (t)));\n+\t      /* DR 1188 says we don't have to deal with this.  */\n+\t      if (!ctx->quiet)\n+\t\terror (\"accessing value of %qE through a %qT glvalue in a \"\n+\t\t       \"constant expression\", build_fold_indirect_ref (sub),\n+\t\t       TREE_TYPE (t));\n+\t      *non_constant_p = true;\n+\t      return t;\n+\t    }\n+\n+\t  if (lval && op0 != orig_op0)\n+\t    return build1 (INDIRECT_REF, TREE_TYPE (t), op0);\n+\t  if (!lval)\n+\t    VERIFY_CONSTANT (t);\n \t  return t;\n \t}\n     }\n \n+  r = cxx_eval_constant_expression (ctx, r,\n+\t\t\t\t    lval, non_constant_p, overflow_p);\n+  if (*non_constant_p)\n+    return t;\n+\n   /* If we're pulling out the value of an empty base, make sure\n      that the whole object is constant and then return an empty\n      CONSTRUCTOR.  */\n@@ -2473,14 +2486,6 @@ cxx_eval_indirect_ref (const constexpr_ctx *ctx, tree t,\n       TREE_CONSTANT (r) = true;\n     }\n \n-  if (r == NULL_TREE)\n-    {\n-      if (lval && op0 != orig_op0)\n-\treturn build1 (INDIRECT_REF, TREE_TYPE (t), op0);\n-      if (!lval)\n-\tVERIFY_CONSTANT (t);\n-      return t;\n-    }\n   return r;\n }\n "}]}