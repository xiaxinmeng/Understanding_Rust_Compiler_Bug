{"sha": "f8977166135de09fe36a3b57cc11daa67587604e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg5NzcxNjYxMzVkZTA5ZmUzNmEzYjU3Y2MxMWRhYTY3NTg3NjA0ZQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-08-24T02:04:48Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-08-24T02:04:48Z"}, "message": "Tweak -Os costs for scalar-to-vector pass.\n\nBack in June I briefly mentioned in one of my gcc-patches posts that\na change that should have always reduced code size, would mysteriously\noccasionally result in slightly larger code (according to CSiBE):\nhttps://gcc.gnu.org/pipermail/gcc-patches/2021-June/573233.html\n\nInvestigating further, the cause turns out to be that x86_64's\nscalar-to-vector (stv) pass is relying on poor estimates of the size\ncosts/benefits.  This patch tweaks the backend's compute_convert_gain\nmethod to provide slightly more accurate values when compiling with\n-Os. Compilation without -Os is (should be) unaffected.  And for\ncompleteness, I'll mention that the stv pass is a net win for code\nsize so it's much better to improve its heuristics than simply gate\nthe pass on !optimize_for_size.\n\nThe net effect of this change is to save 1399 bytes on the CSiBE\ncode size benchmark when compiling with -Os.\n\n2021-08-24  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Richard Biener  <rguenther@suse.de>\n\ngcc/ChangeLog\n\t* config/i386/i386-features.c (compute_convert_gain): Provide\n\tmore accurate values for CONST_INT, when optimizing for size.\n\t* config/i386/i386.c (COSTS_N_BYTES): Move definition from here...\n\t* config/i386/i386.h (COSTS_N_BYTES): to here.", "tree": {"sha": "38b0be70e64dfa796cacd5e4a469513785d38647", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38b0be70e64dfa796cacd5e4a469513785d38647"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8977166135de09fe36a3b57cc11daa67587604e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8977166135de09fe36a3b57cc11daa67587604e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8977166135de09fe36a3b57cc11daa67587604e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8977166135de09fe36a3b57cc11daa67587604e/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78fa5112b4c2dcd94b78ee79baddebbf14d6ad98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78fa5112b4c2dcd94b78ee79baddebbf14d6ad98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78fa5112b4c2dcd94b78ee79baddebbf14d6ad98"}], "stats": {"total": 45, "additions": 38, "deletions": 7}, "files": [{"sha": "5a99ea7c0465f74163936762e719074531ab0171", "filename": "gcc/config/i386/i386-features.c", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8977166135de09fe36a3b57cc11daa67587604e/gcc%2Fconfig%2Fi386%2Fi386-features.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8977166135de09fe36a3b57cc11daa67587604e/gcc%2Fconfig%2Fi386%2Fi386-features.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.c?ref=f8977166135de09fe36a3b57cc11daa67587604e", "patch": "@@ -610,12 +610,40 @@ general_scalar_chain::compute_convert_gain ()\n \n \t  case CONST_INT:\n \t    if (REG_P (dst))\n-\t      /* DImode can be immediate for TARGET_64BIT and SImode always.  */\n-\t      igain += m * COSTS_N_INSNS (1);\n+\t      {\n+\t\tif (optimize_insn_for_size_p ())\n+\t\t  {\n+\t\t    /* xor (2 bytes) vs. xorps (3 bytes).  */\n+\t\t    if (src == const0_rtx)\n+\t\t      igain -= COSTS_N_BYTES (1);\n+\t\t    /* movdi_internal vs. movv2di_internal.  */\n+\t\t    /* => mov (5 bytes) vs. movaps (7 bytes).  */\n+\t\t    else if (x86_64_immediate_operand (src, SImode))\n+\t\t      igain -= COSTS_N_BYTES (2);\n+\t\t    else\n+\t\t      /* ??? Larger immediate constants are placed in the\n+\t\t\t constant pool, where the size benefit/impact of\n+\t\t\t STV conversion is affected by whether and how\n+\t\t\t often each constant pool entry is shared/reused.\n+\t\t\t The value below is empirically derived from the\n+\t\t\t CSiBE benchmark (and the optimal value may drift\n+\t\t\t over time).  */\n+\t\t      igain += COSTS_N_BYTES (0);\n+\t\t  }\n+\t\telse\n+\t\t  {\n+\t\t    /* DImode can be immediate for TARGET_64BIT\n+\t\t       and SImode always.  */\n+\t\t    igain += m * COSTS_N_INSNS (1);\n+\t\t    igain -= vector_const_cost (src);\n+\t\t  }\n+\t      }\n \t    else if (MEM_P (dst))\n-\t      igain += (m * ix86_cost->int_store[2]\n-\t\t\t- ix86_cost->sse_store[sse_cost_idx]);\n-\t    igain -= vector_const_cost (src);\n+\t      {\n+\t\tigain += (m * ix86_cost->int_store[2]\n+\t\t\t  - ix86_cost->sse_store[sse_cost_idx]);\n+\t\tigain -= vector_const_cost (src);\n+\t      }\n \t    break;\n \n \t  default:"}, {"sha": "5bff131f6d9e908cfbe6c4314bc57bdf3108d650", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8977166135de09fe36a3b57cc11daa67587604e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8977166135de09fe36a3b57cc11daa67587604e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f8977166135de09fe36a3b57cc11daa67587604e", "patch": "@@ -19982,8 +19982,6 @@ ix86_division_cost (const struct processor_costs *cost,\n     return cost->divide[MODE_INDEX (mode)];\n }\n \n-#define COSTS_N_BYTES(N) ((N) * 2)\n-\n /* Return cost of shift in MODE.\n    If CONSTANT_OP1 is true, the op1 value is known and set in OP1_VAL.\n    AND_IN_OP1 specify in op1 is result of and and SHIFT_AND_TRUNCATE"}, {"sha": "11ac8d01100394d6cfcf387420dbed2987dc8ab7", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8977166135de09fe36a3b57cc11daa67587604e/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8977166135de09fe36a3b57cc11daa67587604e/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=f8977166135de09fe36a3b57cc11daa67587604e", "patch": "@@ -88,6 +88,11 @@ struct stringop_algs\n   } size [MAX_STRINGOP_ALGS];\n };\n \n+/* Analog of COSTS_N_INSNS when optimizing for size.  */\n+#ifndef COSTS_N_BYTES\n+#define COSTS_N_BYTES(N) ((N) * 2)\n+#endif\n+\n /* Define the specific costs for a given cpu.  NB: hard_register is used\n    by TARGET_REGISTER_MOVE_COST and TARGET_MEMORY_MOVE_COST to compute\n    hard register move costs by register allocator.  Relative costs of"}]}