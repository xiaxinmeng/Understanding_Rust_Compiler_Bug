{"sha": "e6007a27bdcfa46128c25db1471c2565392dba80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTYwMDdhMjdiZGNmYTQ2MTI4YzI1ZGIxNDcxYzI1NjUzOTJkYmE4MA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2016-04-21T09:08:08Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2016-04-21T09:08:08Z"}, "message": "ipa-inline.c (can_inline_edge_p): Pass caller info to ultiimate_alias_target.\n\n\n\t* ipa-inline.c (can_inline_edge_p): Pass caller info to\n\tultiimate_alias_target.\n\t(update_callee_keys): Likewise.\n\t(lookup_recursive_calls): Likewise.\n\t(speculation_useful_p): Likewise.\n\nFrom-SVN: r235319", "tree": {"sha": "2e52f5a9248b3cd9cae070ab471084c3c15de0f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e52f5a9248b3cd9cae070ab471084c3c15de0f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6007a27bdcfa46128c25db1471c2565392dba80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6007a27bdcfa46128c25db1471c2565392dba80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6007a27bdcfa46128c25db1471c2565392dba80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6007a27bdcfa46128c25db1471c2565392dba80/comments", "author": null, "committer": null, "parents": [{"sha": "a2b056a364e622aac29160bb21fe637d5f6c9519", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2b056a364e622aac29160bb21fe637d5f6c9519", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2b056a364e622aac29160bb21fe637d5f6c9519"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "d2a345cf7f5be57d2a613fdcd90e90aeb5ac5dfb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6007a27bdcfa46128c25db1471c2565392dba80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6007a27bdcfa46128c25db1471c2565392dba80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6007a27bdcfa46128c25db1471c2565392dba80", "patch": "@@ -1,3 +1,11 @@\n+2016-04-20  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-inline.c (can_inline_edge_p): Pass caller info to\n+\tultiimate_alias_target.\n+\t(update_callee_keys): Likewise.\n+\t(lookup_recursive_calls): Likewise.\n+\t(speculation_useful_p): Likewise.\n+\n 2016-04-20  Jan Hubicka  <jh@suse.cz>\n \n \tPR ipa/70018"}, {"sha": "b855fc7f07cfb0854574a2934f3914d01e6729f3", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6007a27bdcfa46128c25db1471c2565392dba80/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6007a27bdcfa46128c25db1471c2565392dba80/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=e6007a27bdcfa46128c25db1471c2565392dba80", "patch": "@@ -313,9 +313,9 @@ can_inline_edge_p (struct cgraph_edge *e, bool report,\n \n   bool inlinable = true;\n   enum availability avail;\n-  cgraph_node *callee = e->callee->ultimate_alias_target (&avail);\n   cgraph_node *caller = e->caller->global.inlined_to\n \t\t        ? e->caller->global.inlined_to : e->caller;\n+  cgraph_node *callee = e->callee->ultimate_alias_target (&avail, caller);\n   tree caller_tree = DECL_FUNCTION_SPECIFIC_OPTIMIZATION (caller->decl);\n   tree callee_tree\n     = callee ? DECL_FUNCTION_SPECIFIC_OPTIMIZATION (callee->decl) : NULL;\n@@ -1382,7 +1382,7 @@ update_callee_keys (edge_heap_t *heap, struct cgraph_node *node,\n \t   growth chould have just increased and consequentely badness metric\n            don't need updating.  */\n \tif (e->inline_failed\n-\t    && (callee = e->callee->ultimate_alias_target (&avail))\n+\t    && (callee = e->callee->ultimate_alias_target (&avail, e->caller))\n \t    && inline_summaries->get (callee)->inlinable\n \t    && avail >= AVAIL_AVAILABLE\n \t    && !bitmap_bit_p (updated_nodes, callee->uid))\n@@ -1425,7 +1425,7 @@ lookup_recursive_calls (struct cgraph_node *node, struct cgraph_node *where,\n \n   for (e = where->callees; e; e = e->next_callee)\n     if (e->callee == node\n-\t|| (e->callee->ultimate_alias_target (&avail) == node\n+\t|| (e->callee->ultimate_alias_target (&avail, e->caller) == node\n \t    && avail > AVAIL_INTERPOSABLE))\n       {\n \t/* When profile feedback is available, prioritize by expected number\n@@ -1624,7 +1624,8 @@ bool\n speculation_useful_p (struct cgraph_edge *e, bool anticipate_inlining)\n {\n   enum availability avail;\n-  struct cgraph_node *target = e->callee->ultimate_alias_target (&avail);\n+  struct cgraph_node *target = e->callee->ultimate_alias_target (&avail,\n+\t\t\t\t\t\t\t\t e->caller);\n   struct cgraph_edge *direct, *indirect;\n   struct ipa_ref *ref;\n "}]}