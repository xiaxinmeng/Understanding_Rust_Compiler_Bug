{"sha": "8bea7f7c10c6157c58f3f9e197a14b0964b1bce7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJlYTdmN2MxMGM2MTU3YzU4ZjNmOWUxOTdhMTRiMDk2NGIxYmNlNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-03-17T10:43:19Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-03-17T10:43:19Z"}, "message": "alpha.opt: New file.\n\n        * config/alpha/alpha.opt: New file.\n        * config/alpha/alpha.c (alpha_tune): New.  Rename all existing uses\n        of alpha_cpu.\n        (alpha_cpu_string, alpha_tune_string, alpha_tp_string,\n        alpha_fprm_string, alpha_fptm_string): Make static.\n        (alpha_tls_size_string): Remove.\n        (alpha_handle_option): New.\n        (override_options): Update for alpha_cpu/alpha_tune split.\n        (alpha_file_start): Likewise.\n        (TARGET_DEFAULT_TARGET_FLAGS): New.\n        (TARGET_HANDLE_OPTION): New.\n        * config/alpha/alpha.h (alpha_tune): Declare.\n        (MASK_FP, MASK_FPREGS, TARGET_FPREGS, MASK_GAS, TARGET_GAS,\n        MASK_IEEE_CONFORMANT, TARGET_IEEE_CONFORMANT, MASK_IEEE, TARGET_IEEE,\n        MASK_IEEE_WITH_INEXACT, TARGET_IEEE_WITH_INEXACT, MASK_BUILD_CONSTANTS,\n        TARGET_BUILD_CONSTANTS, MASK_FLOAT_VAX, TARGET_FLOAT_VAX, MASK_BWX,\n        TARGET_BWX, MASK_MAX, TARGET_MAX, MASK_FIX, TARGET_FIX, MASK_CIX,\n        TARGET_CIX, MASK_EXPLICIT_RELOCS, TARGET_EXPLICIT_RELOCS,\n        MASK_SMALL_DATA, TARGET_SMALL_DATA, MASK_TLS_KERNEL, TARGET_TLS_KERNEL,\n        MASK_SMALL_TEXT, TARGET_SMALL_TEXT, MASK_LONG_DOUBLE_128,\n        TARGET_LONG_DOUBLE_128, MASK_CPU_EV5, TARGET_CPU_EV5, MASK_CPU_EV6,\n        TARGET_CPU_EV6, MASK_SUPPORT_ARCH): Remove.\n        (TARGET_SWITCHES, TARGET_OPTIONS): Remove.\n        (TARGET_DEFAULT): Remove MASK_FP.\n        (TARGET_FP): Redefined based on TARGET_SOFT_FP.\n        (TARGET_SUPPORT_ARCH): Default on if HAVE_AS_EXPLICIT_RELOCS.\n        (alpha_cpu_string, alpha_tune_string, alpha_fprm_string,\n        alpha_fptm_string, alpha_tp_string, alpha_mlat_string,\n        alpha_tls_size_string): Remove.\n        * config/alpha/alpha.md (prefetch): Use alpha_cpu.\n        (attribute tune): Rename from attribute cpu.\n        * config/alpha/ev4.md: Update to match.\n        * config/alpha/ev5.md, config/alpha/ev6.md: Likewise.\n        * config/alpha/freebsd.h (TARGET_DEFAULT): Remove MASK_FP.\n        * config/alpha/linux.h (TARGET_DEFAULT): Likewise.\n        * config/alpha/netbsd.h (TARGET_DEFAULT): Likewise.\n        * config/alpha/osf5.h (TARGET_DEFAULT): Likewise.\n        * config/alpha/vms.h (TARGET_DEFAULT): Likewise.\n\nFrom-SVN: r96602", "tree": {"sha": "d2cc06b4d23443a1dfafdd339f49fe3b78d0eab2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2cc06b4d23443a1dfafdd339f49fe3b78d0eab2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bea7f7c10c6157c58f3f9e197a14b0964b1bce7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bea7f7c10c6157c58f3f9e197a14b0964b1bce7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bea7f7c10c6157c58f3f9e197a14b0964b1bce7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bea7f7c10c6157c58f3f9e197a14b0964b1bce7/comments", "author": null, "committer": null, "parents": [{"sha": "68e11b42afd5319521eaddf015c2d35aeb1d8c8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e11b42afd5319521eaddf015c2d35aeb1d8c8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68e11b42afd5319521eaddf015c2d35aeb1d8c8d"}], "stats": {"total": 646, "additions": 345, "deletions": 301}, "files": [{"sha": "65a661676784b24401cff8e093c3ed06bac831ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bea7f7c10c6157c58f3f9e197a14b0964b1bce7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bea7f7c10c6157c58f3f9e197a14b0964b1bce7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8bea7f7c10c6157c58f3f9e197a14b0964b1bce7", "patch": "@@ -1,3 +1,44 @@\n+2005-03-17  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.opt: New file.\n+\t* config/alpha/alpha.c (alpha_tune): New.  Rename all existing uses\n+\tof alpha_cpu.\n+\t(alpha_cpu_string, alpha_tune_string, alpha_tp_string, \n+\talpha_fprm_string, alpha_fptm_string): Make static.\n+\t(alpha_tls_size_string): Remove.\n+\t(alpha_handle_option): New.\n+\t(override_options): Update for alpha_cpu/alpha_tune split.\n+\t(alpha_file_start): Likewise.\n+\t(TARGET_DEFAULT_TARGET_FLAGS): New.\n+\t(TARGET_HANDLE_OPTION): New.\n+\t* config/alpha/alpha.h (alpha_tune): Declare.\n+\t(MASK_FP, MASK_FPREGS, TARGET_FPREGS, MASK_GAS, TARGET_GAS, \n+\tMASK_IEEE_CONFORMANT, TARGET_IEEE_CONFORMANT, MASK_IEEE, TARGET_IEEE,\n+\tMASK_IEEE_WITH_INEXACT, TARGET_IEEE_WITH_INEXACT, MASK_BUILD_CONSTANTS,\n+\tTARGET_BUILD_CONSTANTS, MASK_FLOAT_VAX, TARGET_FLOAT_VAX, MASK_BWX,\n+\tTARGET_BWX, MASK_MAX, TARGET_MAX, MASK_FIX, TARGET_FIX, MASK_CIX,\n+\tTARGET_CIX, MASK_EXPLICIT_RELOCS, TARGET_EXPLICIT_RELOCS,\n+\tMASK_SMALL_DATA, TARGET_SMALL_DATA, MASK_TLS_KERNEL, TARGET_TLS_KERNEL,\n+\tMASK_SMALL_TEXT, TARGET_SMALL_TEXT, MASK_LONG_DOUBLE_128,\n+\tTARGET_LONG_DOUBLE_128, MASK_CPU_EV5, TARGET_CPU_EV5, MASK_CPU_EV6,\n+\tTARGET_CPU_EV6, MASK_SUPPORT_ARCH): Remove.\n+\t(TARGET_SWITCHES, TARGET_OPTIONS): Remove.\n+\t(TARGET_DEFAULT): Remove MASK_FP.\n+\t(TARGET_FP): Redefined based on TARGET_SOFT_FP.\n+\t(TARGET_SUPPORT_ARCH): Default on if HAVE_AS_EXPLICIT_RELOCS.\n+\t(alpha_cpu_string, alpha_tune_string, alpha_fprm_string,\n+\talpha_fptm_string, alpha_tp_string, alpha_mlat_string,\n+\talpha_tls_size_string): Remove.\n+\t* config/alpha/alpha.md (prefetch): Use alpha_cpu.\n+\t(attribute tune): Rename from attribute cpu.\n+\t* config/alpha/ev4.md: Update to match.\n+\t* config/alpha/ev5.md, config/alpha/ev6.md: Likewise.\n+\t* config/alpha/freebsd.h (TARGET_DEFAULT): Remove MASK_FP.\n+\t* config/alpha/linux.h (TARGET_DEFAULT): Likewise.\n+\t* config/alpha/netbsd.h (TARGET_DEFAULT): Likewise.\n+\t* config/alpha/osf5.h (TARGET_DEFAULT): Likewise.\n+\t* config/alpha/vms.h (TARGET_DEFAULT): Likewise.\n+\n 2005-03-16  James E. Wilson  <wilson@specifixinc.com>\n \n \t* config/ia64/ia64.c (issue_nops_and_insn): Check first_insn attribute,"}, {"sha": "102f568e2a4fbf653aecfd7c36dfde428afdff36", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 114, "deletions": 58, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bea7f7c10c6157c58f3f9e197a14b0964b1bce7/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bea7f7c10c6157c58f3f9e197a14b0964b1bce7/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=8bea7f7c10c6157c58f3f9e197a14b0964b1bce7", "patch": "@@ -55,8 +55,11 @@ Boston, MA 02111-1307, USA.  */\n #include \"tree-gimple.h\"\n \n /* Specify which cpu to schedule for.  */\n+enum processor_type alpha_tune;\n \n+/* Which cpu we're generating code for.  */\n enum processor_type alpha_cpu;\n+\n static const char * const alpha_cpu_name[] =\n {\n   \"ev4\", \"ev5\", \"ev6\"\n@@ -80,13 +83,12 @@ int alpha_tls_size = 32;\n \n /* Strings decoded into the above options.  */\n \n-const char *alpha_cpu_string;\t/* -mcpu= */\n-const char *alpha_tune_string;\t/* -mtune= */\n-const char *alpha_tp_string;\t/* -mtrap-precision=[p|s|i] */\n-const char *alpha_fprm_string;\t/* -mfp-rounding-mode=[n|m|c|d] */\n-const char *alpha_fptm_string;\t/* -mfp-trap-mode=[n|u|su|sui] */\n-const char *alpha_mlat_string;\t/* -mmemory-latency= */\n-const char *alpha_tls_size_string; /* -mtls-size=[16|32|64] */\n+static const char *alpha_cpu_string;\t/* -mcpu= */\n+static const char *alpha_tune_string;\t/* -mtune= */\n+static const char *alpha_tp_string;\t/* -mtrap-precision=[p|s|i] */\n+static const char *alpha_fprm_string;\t/* -mfp-rounding-mode=[n|m|c|d] */\n+static const char *alpha_fptm_string;\t/* -mfp-trap-mode=[n|u|su|sui] */\n+static const char *alpha_mlat_string;\t/* -mmemory-latency= */\n \n /* Save information from a \"cmpxx\" operation until the branch or scc is\n    emitted.  */\n@@ -218,36 +220,91 @@ static void unicosmk_gen_dsib (unsigned long *);\n static void unicosmk_output_ssib (FILE *, const char *);\n static int unicosmk_need_dex (rtx);\n \f\n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+static bool\n+alpha_handle_option (size_t code, const char *arg, int value)\n+{\n+  switch (code)\n+    {\n+    case OPT_mfp_regs:\n+      if (value == 0)\n+\ttarget_flags |= MASK_SOFT_FP;\n+      break;\n+\n+    case OPT_mieee:\n+    case OPT_mieee_with_inexact:\n+      target_flags |= MASK_IEEE_CONFORMANT;\n+      break;\n+\n+    case OPT_mcpu_:\n+      alpha_cpu_string = arg;\n+      break;\n+\n+    case OPT_mtune_:\n+      alpha_tune_string = arg;\n+      break;\n+\n+    case OPT_mfp_rounding_mode_:\n+      alpha_fprm_string = arg;\n+      break;\n+\n+    case OPT_mfp_trap_mode_:\n+      alpha_fptm_string = arg;\n+      break;\n+\n+    case OPT_mtrap_precision_:\n+      alpha_tp_string = arg;\n+      break;\n+\n+    case OPT_mmemory_latency_:\n+      alpha_mlat_string = arg;\n+      break;\n+\n+    case OPT_mtls_size_:\n+      if (strcmp (arg, \"16\") == 0)\n+\talpha_tls_size = 16;\n+      else if (strcmp (arg, \"32\") == 0)\n+\talpha_tls_size = 32;\n+      else if (strcmp (arg, \"64\") == 0)\n+\talpha_tls_size = 64;\n+      else\n+\terror (\"bad value %qs for -mtls-size switch\", arg);\n+      break;\n+    }\n+\n+  return true;\n+}\n+\n /* Parse target option strings.  */\n \n void\n override_options (void)\n {\n-  int i;\n   static const struct cpu_table {\n     const char *const name;\n     const enum processor_type processor;\n     const int flags;\n   } cpu_table[] = {\n-#define EV5_MASK (MASK_CPU_EV5)\n-#define EV6_MASK (MASK_CPU_EV6|MASK_BWX|MASK_MAX|MASK_FIX)\n     { \"ev4\",\tPROCESSOR_EV4, 0 },\n     { \"ev45\",\tPROCESSOR_EV4, 0 },\n     { \"21064\",\tPROCESSOR_EV4, 0 },\n-    { \"ev5\",\tPROCESSOR_EV5, EV5_MASK },\n-    { \"21164\",\tPROCESSOR_EV5, EV5_MASK },\n-    { \"ev56\",\tPROCESSOR_EV5, EV5_MASK|MASK_BWX },\n-    { \"21164a\",\tPROCESSOR_EV5, EV5_MASK|MASK_BWX },\n-    { \"pca56\",\tPROCESSOR_EV5, EV5_MASK|MASK_BWX|MASK_MAX },\n-    { \"21164PC\",PROCESSOR_EV5, EV5_MASK|MASK_BWX|MASK_MAX },\n-    { \"21164pc\",PROCESSOR_EV5, EV5_MASK|MASK_BWX|MASK_MAX },\n-    { \"ev6\",\tPROCESSOR_EV6, EV6_MASK },\n-    { \"21264\",\tPROCESSOR_EV6, EV6_MASK },\n-    { \"ev67\",\tPROCESSOR_EV6, EV6_MASK|MASK_CIX },\n-    { \"21264a\",\tPROCESSOR_EV6, EV6_MASK|MASK_CIX },\n+    { \"ev5\",\tPROCESSOR_EV5, 0 },\n+    { \"21164\",\tPROCESSOR_EV5, 0 },\n+    { \"ev56\",\tPROCESSOR_EV5, MASK_BWX },\n+    { \"21164a\",\tPROCESSOR_EV5, MASK_BWX },\n+    { \"pca56\",\tPROCESSOR_EV5, MASK_BWX|MASK_MAX },\n+    { \"21164PC\",PROCESSOR_EV5, MASK_BWX|MASK_MAX },\n+    { \"21164pc\",PROCESSOR_EV5, MASK_BWX|MASK_MAX },\n+    { \"ev6\",\tPROCESSOR_EV6, MASK_BWX|MASK_MAX|MASK_FIX },\n+    { \"21264\",\tPROCESSOR_EV6, MASK_BWX|MASK_MAX|MASK_FIX },\n+    { \"ev67\",\tPROCESSOR_EV6, MASK_BWX|MASK_MAX|MASK_FIX|MASK_CIX },\n+    { \"21264a\",\tPROCESSOR_EV6, MASK_BWX|MASK_MAX|MASK_FIX|MASK_CIX },\n     { 0, 0, 0 }\n   };\n \n+  int i;\n+\n   /* Unicos/Mk doesn't have shared libraries.  */\n   if (TARGET_ABI_UNICOSMK && flag_pic)\n     {\n@@ -335,30 +392,13 @@ override_options (void)\n \terror (\"bad value %qs for -mfp-trap-mode switch\", alpha_fptm_string);\n     }\n \n-  if (alpha_tls_size_string)\n-    {\n-      if (strcmp (alpha_tls_size_string, \"16\") == 0)\n-\talpha_tls_size = 16;\n-      else if (strcmp (alpha_tls_size_string, \"32\") == 0)\n-\talpha_tls_size = 32;\n-      else if (strcmp (alpha_tls_size_string, \"64\") == 0)\n-\talpha_tls_size = 64;\n-      else\n-\terror (\"bad value %qs for -mtls-size switch\", alpha_tls_size_string);\n-    }\n-\n-  alpha_cpu\n-    = TARGET_CPU_DEFAULT & MASK_CPU_EV6 ? PROCESSOR_EV6\n-      : (TARGET_CPU_DEFAULT & MASK_CPU_EV5 ? PROCESSOR_EV5 : PROCESSOR_EV4);\n-\n   if (alpha_cpu_string)\n     {\n       for (i = 0; cpu_table [i].name; i++)\n \tif (! strcmp (alpha_cpu_string, cpu_table [i].name))\n \t  {\n-\t    alpha_cpu = cpu_table [i].processor;\n-\t    target_flags &= ~ (MASK_BWX | MASK_MAX | MASK_FIX | MASK_CIX\n-\t\t\t       | MASK_CPU_EV5 | MASK_CPU_EV6);\n+\t    alpha_tune = alpha_cpu = cpu_table [i].processor;\n+\t    target_flags &= ~ (MASK_BWX | MASK_MAX | MASK_FIX | MASK_CIX);\n \t    target_flags |= cpu_table [i].flags;\n \t    break;\n \t  }\n@@ -371,7 +411,7 @@ override_options (void)\n       for (i = 0; cpu_table [i].name; i++)\n \tif (! strcmp (alpha_tune_string, cpu_table [i].name))\n \t  {\n-\t    alpha_cpu = cpu_table [i].processor;\n+\t    alpha_tune = cpu_table [i].processor;\n \t    break;\n \t  }\n       if (! cpu_table [i].name)\n@@ -387,13 +427,13 @@ override_options (void)\n     }\n \n   if ((alpha_fptm == ALPHA_FPTM_SU || alpha_fptm == ALPHA_FPTM_SUI)\n-      && alpha_tp != ALPHA_TP_INSN && ! TARGET_CPU_EV6)\n+      && alpha_tp != ALPHA_TP_INSN && alpha_cpu != PROCESSOR_EV6)\n     {\n       warning (\"fp software completion requires -mtrap-precision=i\");\n       alpha_tp = ALPHA_TP_INSN;\n     }\n \n-  if (TARGET_CPU_EV6)\n+  if (alpha_cpu == PROCESSOR_EV6)\n     {\n       /* Except for EV6 pass 1 (not released), we always have precise\n \t arithmetic traps.  Which means we can do software completion\n@@ -440,14 +480,14 @@ override_options (void)\n \t};\n \n \tlat = alpha_mlat_string[1] - '0';\n-\tif (lat <= 0 || lat > 3 || cache_latency[alpha_cpu][lat-1] == -1)\n+\tif (lat <= 0 || lat > 3 || cache_latency[alpha_tune][lat-1] == -1)\n \t  {\n \t    warning (\"L%d cache latency unknown for %s\",\n-\t\t     lat, alpha_cpu_name[alpha_cpu]);\n+\t\t     lat, alpha_cpu_name[alpha_tune]);\n \t    lat = 3;\n \t  }\n \telse\n-\t  lat = cache_latency[alpha_cpu][lat-1];\n+\t  lat = cache_latency[alpha_tune][lat-1];\n       }\n     else if (! strcmp (alpha_mlat_string, \"main\"))\n       {\n@@ -1339,7 +1379,7 @@ alpha_rtx_costs (rtx x, int code, int outer_code, int *total)\n   if (optimize_size)\n     cost_data = &alpha_rtx_cost_size;\n   else\n-    cost_data = &alpha_rtx_cost_data[alpha_cpu];\n+    cost_data = &alpha_rtx_cost_data[alpha_tune];\n \n   switch (code)\n     {\n@@ -2909,7 +2949,7 @@ alpha_split_conditional_move (enum rtx_code code, rtx dest, rtx cond,\n       /* On EV6, we've got enough shifters to make non-arithmetic shifts\n \t viable over a longer latency cmove.  On EV5, the E0 slot is a\n \t scarce resource, and on EV4 shift has the same latency as a cmove.  */\n-      && (diff <= 8 || alpha_cpu == PROCESSOR_EV6))\n+      && (diff <= 8 || alpha_tune == PROCESSOR_EV6))\n     {\n       tmp = gen_rtx_fmt_ee (code, DImode, cond, const0_rtx);\n       emit_insn (gen_rtx_SET (VOIDmode, copy_rtx (subtarget), tmp));\n@@ -4465,7 +4505,7 @@ alpha_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n static int\n alpha_issue_rate (void)\n {\n-  return (alpha_cpu == PROCESSOR_EV4 ? 2 : 4);\n+  return (alpha_tune == PROCESSOR_EV4 ? 2 : 4);\n }\n \n /* How many alternative schedules to try.  This should be as wide as the\n@@ -4479,7 +4519,7 @@ alpha_issue_rate (void)\n static int\n alpha_multipass_dfa_lookahead (void)\n {\n-  return (alpha_cpu == PROCESSOR_EV6 ? 4 : 2);\n+  return (alpha_tune == PROCESSOR_EV6 ? 4 : 2);\n }\n \f\n /* Machine-specific function data.  */\n@@ -8774,9 +8814,9 @@ alpha_reorg (void)\n       && alpha_tp != ALPHA_TP_INSN\n       && flag_schedule_insns_after_reload)\n     {\n-      if (alpha_cpu == PROCESSOR_EV4)\n+      if (alpha_tune == PROCESSOR_EV4)\n \talpha_align_insns (8, alphaev4_next_group, alphaev4_next_nop);\n-      else if (alpha_cpu == PROCESSOR_EV5)\n+      else if (alpha_tune == PROCESSOR_EV5)\n \talpha_align_insns (16, alphaev5_next_group, alphaev5_next_nop);\n     }\n }\n@@ -8809,12 +8849,22 @@ alpha_file_start (void)\n   if (TARGET_EXPLICIT_RELOCS)\n     fputs (\"\\t.set nomacro\\n\", asm_out_file);\n   if (TARGET_SUPPORT_ARCH | TARGET_BWX | TARGET_MAX | TARGET_FIX | TARGET_CIX)\n-    fprintf (asm_out_file,\n-\t     \"\\t.arch %s\\n\",\n-\t     TARGET_CPU_EV6 ? \"ev6\"\n-\t     : (TARGET_CPU_EV5\n-\t\t? (TARGET_MAX ? \"pca56\" : TARGET_BWX ? \"ev56\" : \"ev5\")\n-\t\t: \"ev4\"));\n+    {\n+      const char *arch;\n+\n+      if (alpha_cpu == PROCESSOR_EV6 || TARGET_FIX || TARGET_CIX)\n+\tarch = \"ev6\";\n+      else if (TARGET_MAX)\n+\tarch = \"pca56\";\n+      else if (TARGET_BWX)\n+\tarch = \"ev56\";\n+      else if (alpha_cpu == PROCESSOR_EV5)\n+\tarch = \"ev5\";\n+      else\n+\tarch = \"ev4\";\n+\n+      fprintf (asm_out_file, \"\\t.arch %s\\n\", arch);\n+    }\n }\n #endif\n \n@@ -10150,6 +10200,12 @@ alpha_init_libfuncs (void)\n #undef TARGET_RELAXED_ORDERING\n #define TARGET_RELAXED_ORDERING true\n \n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS \\\n+  (TARGET_DEFAULT | TARGET_CPU_DEFAULT | TARGET_DEFAULT_EXPLICIT_RELOCS)\n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION alpha_handle_option\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n \f"}, {"sha": "780cf4af20d48cec5b6b8dd121d8ebc9c0e30ad6", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 10, "deletions": 177, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bea7f7c10c6157c58f3f9e197a14b0964b1bce7/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bea7f7c10c6157c58f3f9e197a14b0964b1bce7/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=8bea7f7c10c6157c58f3f9e197a14b0964b1bce7", "patch": "@@ -48,12 +48,12 @@ Boston, MA 02111-1307, USA.  */\n \t    builtin_define (\"__alpha_max__\");\t\t\\\n \t    builtin_assert (\"cpu=max\");\t\t\t\\\n \t  }\t\t\t\t\t\t\\\n-\tif (TARGET_CPU_EV6)\t\t\t\t\\\n+\tif (alpha_cpu == PROCESSOR_EV6)\t\t\t\\\n \t  {\t\t\t\t\t\t\\\n \t    builtin_define (\"__alpha_ev6__\");\t\t\\\n \t    builtin_assert (\"cpu=ev6\");\t\t\t\\\n \t  }\t\t\t\t\t\t\\\n-\telse if (TARGET_CPU_EV5)\t\t\t\\\n+\telse if (alpha_cpu == PROCESSOR_EV5)\t\t\\\n \t  {\t\t\t\t\t\t\\\n \t    builtin_define (\"__alpha_ev5__\");\t\t\\\n \t    builtin_assert (\"cpu=ev5\");\t\t\t\\\n@@ -122,6 +122,7 @@ enum processor_type\n };\n \n extern enum processor_type alpha_cpu;\n+extern enum processor_type alpha_tune;\n \n enum alpha_trap_precision\n {\n@@ -153,102 +154,8 @@ extern enum alpha_fp_rounding_mode alpha_fprm;\n extern enum alpha_fp_trap_mode alpha_fptm;\n extern int alpha_tls_size;\n \n-/* This means that floating-point support exists in the target implementation\n-   of the Alpha architecture.  This is usually the default.  */\n-#define MASK_FP\t\t(1 << 0)\n-#define TARGET_FP\t(target_flags & MASK_FP)\n-\n-/* This means that floating-point registers are allowed to be used.  Note\n-   that Alpha implementations without FP operations are required to\n-   provide the FP registers.  */\n-\n-#define MASK_FPREGS\t(1 << 1)\n-#define TARGET_FPREGS\t(target_flags & MASK_FPREGS)\n-\n-/* This means that gas is used to process the assembler file.  */\n-\n-#define MASK_GAS\t(1 << 2)\n-#define TARGET_GAS\t(target_flags & MASK_GAS)\n-\n-/* This means that we should mark procedures as IEEE conformant.  */\n-\n-#define MASK_IEEE_CONFORMANT (1 << 3)\n-#define TARGET_IEEE_CONFORMANT\t(target_flags & MASK_IEEE_CONFORMANT)\n-\n-/* This means we should be IEEE-compliant except for inexact.  */\n-\n-#define MASK_IEEE\t(1 << 4)\n-#define TARGET_IEEE\t(target_flags & MASK_IEEE)\n-\n-/* This means we should be fully IEEE-compliant.  */\n-\n-#define MASK_IEEE_WITH_INEXACT (1 << 5)\n-#define TARGET_IEEE_WITH_INEXACT (target_flags & MASK_IEEE_WITH_INEXACT)\n-\n-/* This means we must construct all constants rather than emitting\n-   them as literal data.  */\n-\n-#define MASK_BUILD_CONSTANTS (1 << 6)\n-#define TARGET_BUILD_CONSTANTS (target_flags & MASK_BUILD_CONSTANTS)\n-\n-/* This means we handle floating points in VAX F- (float)\n-   or G- (double) Format.  */\n-\n-#define MASK_FLOAT_VAX\t(1 << 7)\n-#define TARGET_FLOAT_VAX (target_flags & MASK_FLOAT_VAX)\n-\n-/* This means that the processor has byte and half word loads and stores\n-   (the BWX extension).  */\n-\n-#define MASK_BWX\t(1 << 8)\n-#define TARGET_BWX\t(target_flags & MASK_BWX)\n-\n-/* This means that the processor has the MAX extension.  */\n-#define MASK_MAX\t(1 << 9)\n-#define TARGET_MAX\t(target_flags & MASK_MAX)\n-\n-/* This means that the processor has the FIX extension.  */\n-#define MASK_FIX\t(1 << 10)\n-#define TARGET_FIX\t(target_flags & MASK_FIX)\n-\n-/* This means that the processor has the CIX extension.  */\n-#define MASK_CIX\t(1 << 11)\n-#define TARGET_CIX\t(target_flags & MASK_CIX)\n-\n-/* This means use !literal style explicit relocations.  */\n-#define MASK_EXPLICIT_RELOCS (1 << 12)\n-#define TARGET_EXPLICIT_RELOCS (target_flags & MASK_EXPLICIT_RELOCS)\n-\n-/* This means use 16-bit relocations to .sdata/.sbss.  */\n-#define MASK_SMALL_DATA (1 << 13)\n-#define TARGET_SMALL_DATA (target_flags & MASK_SMALL_DATA)\n-\n-/* This means emit thread pointer loads for kernel not user.  */\n-#define MASK_TLS_KERNEL\t(1 << 14)\n-#define TARGET_TLS_KERNEL (target_flags & MASK_TLS_KERNEL)\n-\n-/* This means use direct branches to local functions.  */\n-#define MASK_SMALL_TEXT (1 << 15)\n-#define TARGET_SMALL_TEXT (target_flags & MASK_SMALL_TEXT)\n-\n-/* This means use IEEE quad-format for long double.  Assumes the\n-   presence of the GEM support library routines.  */\n-#define MASK_LONG_DOUBLE_128 (1 << 16)\n-#define TARGET_LONG_DOUBLE_128 (target_flags & MASK_LONG_DOUBLE_128)\n-\n-/* This means that the processor is an EV5, EV56, or PCA56.\n-   Unlike alpha_cpu this is not affected by -mtune= setting.  */\n-#define MASK_CPU_EV5\t(1 << 28)\n-#define TARGET_CPU_EV5\t(target_flags & MASK_CPU_EV5)\n-\n-/* Likewise for EV6.  */\n-#define MASK_CPU_EV6\t(1 << 29)\n-#define TARGET_CPU_EV6\t(target_flags & MASK_CPU_EV6)\n-\n-/* This means we support the .arch directive in the assembler.  Only\n-   defined in TARGET_CPU_DEFAULT.  */\n-#define MASK_SUPPORT_ARCH (1 << 30)\n-#define TARGET_SUPPORT_ARCH\t(target_flags & MASK_SUPPORT_ARCH)\n+/* Invert the easy way to make options work.  */\n+#define TARGET_FP\t(!TARGET_SOFT_FP)\n \n /* These are for target os support and cannot be changed at runtime.  */\n #define TARGET_ABI_WINDOWS_NT 0\n@@ -283,60 +190,7 @@ extern int alpha_tls_size;\n #define HAVE_AS_TLS 0\n #endif\n \n-/* Macro to define tables used to set the flags.\n-   This is a list in braces of pairs in braces,\n-   each pair being { \"NAME\", VALUE }\n-   where VALUE is the bits to set or minus the bits to clear.\n-   An empty string NAME is used to identify the default VALUE.  */\n-\n-#define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n-  { {\"no-soft-float\", MASK_FP, N_(\"Use hardware fp\")},\t\t\t\\\n-    {\"soft-float\", - MASK_FP, N_(\"Do not use hardware fp\")},\t\t\\\n-    {\"fp-regs\", MASK_FPREGS, N_(\"Use fp registers\")},\t\t\t\\\n-    {\"no-fp-regs\", - (MASK_FP|MASK_FPREGS),\t\t\t\t\\\n-     N_(\"Do not use fp registers\")},\t\t\t\t\t\\\n-    {\"alpha-as\", -MASK_GAS, N_(\"Do not assume GAS\")},\t\t\t\\\n-    {\"gas\", MASK_GAS, N_(\"Assume GAS\")},\t\t\t\t\\\n-    {\"ieee-conformant\", MASK_IEEE_CONFORMANT,\t\t\t\t\\\n-     N_(\"Request IEEE-conformant math library routines (OSF/1)\")},\t\\\n-    {\"ieee\", MASK_IEEE|MASK_IEEE_CONFORMANT,\t\t\t\t\\\n-     N_(\"Emit IEEE-conformant code, without inexact exceptions\")},\t\\\n-    {\"ieee-with-inexact\", MASK_IEEE_WITH_INEXACT|MASK_IEEE_CONFORMANT,\t\\\n-     N_(\"Emit IEEE-conformant code, with inexact exceptions\")},\t\t\\\n-    {\"build-constants\", MASK_BUILD_CONSTANTS,\t\t\t\t\\\n-     N_(\"Do not emit complex integer constants to read-only memory\")},\t\\\n-    {\"float-vax\", MASK_FLOAT_VAX, N_(\"Use VAX fp\")},\t\t\t\\\n-    {\"float-ieee\", -MASK_FLOAT_VAX, N_(\"Do not use VAX fp\")},\t\t\\\n-    {\"bwx\", MASK_BWX, N_(\"Emit code for the byte/word ISA extension\")},\t\\\n-    {\"no-bwx\", -MASK_BWX, \"\"},\t\t\t\t\t\t\\\n-    {\"max\", MASK_MAX,\t\t\t\t\t\t\t\\\n-     N_(\"Emit code for the motion video ISA extension\")},\t\t\\\n-    {\"no-max\", -MASK_MAX, \"\"},\t\t\t\t\t\t\\\n-    {\"fix\", MASK_FIX,\t\t\t\t\t\t\t\\\n-     N_(\"Emit code for the fp move and sqrt ISA extension\")}, \t\t\\\n-    {\"no-fix\", -MASK_FIX, \"\"},\t\t\t\t\t\t\\\n-    {\"cix\", MASK_CIX, N_(\"Emit code for the counting ISA extension\")},\t\\\n-    {\"no-cix\", -MASK_CIX, \"\"},\t\t\t\t\t\t\\\n-    {\"explicit-relocs\", MASK_EXPLICIT_RELOCS,\t\t\t\t\\\n-     N_(\"Emit code using explicit relocation directives\")},\t\t\\\n-    {\"no-explicit-relocs\", -MASK_EXPLICIT_RELOCS, \"\"},\t\t\t\\\n-    {\"small-data\", MASK_SMALL_DATA,\t\t\t\t\t\\\n-     N_(\"Emit 16-bit relocations to the small data areas\")},\t\t\\\n-    {\"large-data\", -MASK_SMALL_DATA,\t\t\t\t\t\\\n-     N_(\"Emit 32-bit relocations to the small data areas\")},\t\t\\\n-    {\"small-text\", MASK_SMALL_TEXT,\t\t\t\t\t\\\n-     N_(\"Emit direct branches to local functions\")},\t\t\t\\\n-    {\"large-text\", -MASK_SMALL_TEXT, \"\"},\t\t\t\t\\\n-    {\"tls-kernel\", MASK_TLS_KERNEL,\t\t\t\t\t\\\n-     N_(\"Emit rdval instead of rduniq for thread pointer\")},\t\t\\\n-    {\"long-double-128\", MASK_LONG_DOUBLE_128,\t\t\t\t\\\n-     N_(\"Use 128-bit long double\")},\t\t\t\t\t\\\n-    {\"long-double-64\", -MASK_LONG_DOUBLE_128,\t\t\t\t\\\n-     N_(\"Use 64-bit long double\")},\t\t\t\t\t\\\n-    {\"\", TARGET_DEFAULT | TARGET_CPU_DEFAULT\t\t\t\t\\\n-\t | TARGET_DEFAULT_EXPLICIT_RELOCS, \"\"} }\n-\n-#define TARGET_DEFAULT MASK_FP|MASK_FPREGS\n+#define TARGET_DEFAULT MASK_FPREGS\n \n #ifndef TARGET_CPU_DEFAULT\n #define TARGET_CPU_DEFAULT 0\n@@ -345,36 +199,15 @@ extern int alpha_tls_size;\n #ifndef TARGET_DEFAULT_EXPLICIT_RELOCS\n #ifdef HAVE_AS_EXPLICIT_RELOCS\n #define TARGET_DEFAULT_EXPLICIT_RELOCS MASK_EXPLICIT_RELOCS\n+#define TARGET_SUPPORT_ARCH 1\n #else\n #define TARGET_DEFAULT_EXPLICIT_RELOCS 0\n #endif\n #endif\n \n-extern const char *alpha_cpu_string;\t/* For -mcpu= */\n-extern const char *alpha_tune_string;\t/* For -mtune= */\n-extern const char *alpha_fprm_string;\t/* For -mfp-rounding-mode=[n|m|c|d] */\n-extern const char *alpha_fptm_string;\t/* For -mfp-trap-mode=[n|u|su|sui]  */\n-extern const char *alpha_tp_string;\t/* For -mtrap-precision=[p|f|i] */\n-extern const char *alpha_mlat_string;\t/* For -mmemory-latency= */\n-extern const char *alpha_tls_size_string; /* For -mtls-size= */\n-\n-#define TARGET_OPTIONS\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\\\n-  {\"cpu=\",\t\t&alpha_cpu_string,\t\t\\\n-   N_(\"Use features of and schedule given CPU\"), 0},\t\\\n-  {\"tune=\",\t\t&alpha_tune_string,\t\t\\\n-   N_(\"Schedule given CPU\"), 0},\t\t\t\\\n-  {\"fp-rounding-mode=\",\t&alpha_fprm_string,\t\t\\\n-   N_(\"Control the generated fp rounding mode\"), 0},\t\\\n-  {\"fp-trap-mode=\",\t&alpha_fptm_string,\t\t\\\n-   N_(\"Control the IEEE trap mode\"), 0},\t\t\\\n-  {\"trap-precision=\",\t&alpha_tp_string,\t\t\\\n-   N_(\"Control the precision given to fp exceptions\"), 0},\t\\\n-  {\"memory-latency=\",\t&alpha_mlat_string,\t\t\\\n-   N_(\"Tune expected memory latency\"), 0},\t\t\\\n-  {\"tls-size=\",\t\t&alpha_tls_size_string,\t\t\\\n-   N_(\"Specify bit size of immediate TLS offsets\"), 0},\t\\\n-}\n+#ifndef TARGET_SUPPORT_ARCH\n+#define TARGET_SUPPORT_ARCH 0\n+#endif\n \n /* Support for a compile-time default CPU, et cetera.  The rules are:\n    --with-cpu is ignored if -mcpu is specified."}, {"sha": "208161ba9b75de35562cec49fd6ebe58bcbd1f7c", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bea7f7c10c6157c58f3f9e197a14b0964b1bce7/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bea7f7c10c6157c58f3f9e197a14b0964b1bce7/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=8bea7f7c10c6157c58f3f9e197a14b0964b1bce7", "patch": "@@ -87,8 +87,8 @@\n ;; Processor type -- this attribute must exactly match the processor_type\n ;; enumeration in alpha.h.\n \n-(define_attr \"cpu\" \"ev4,ev5,ev6\"\n-  (const (symbol_ref \"alpha_cpu\")))\n+(define_attr \"tune\" \"ev4,ev5,ev6\"\n+  (const (symbol_ref \"alpha_tune\")))\n \n ;; Define an insn type attribute.  This is used in function unit delay\n ;; computations, among other purposes.  For the most part, we use the names\n@@ -6982,7 +6982,7 @@\n   [(prefetch (match_operand:DI 0 \"address_operand\" \"p\")\n \t     (match_operand:DI 1 \"const_int_operand\" \"n\")\n \t     (match_operand:DI 2 \"const_int_operand\" \"n\"))]\n-  \"TARGET_FIXUP_EV5_PREFETCH || TARGET_CPU_EV6\"\n+  \"TARGET_FIXUP_EV5_PREFETCH || alpha_cpu == PROCESSOR_EV6\"\n {\n   /* Interpret \"no temporal locality\" as this data should be evicted once\n      it is used.  The \"evict next\" alternatives load the data into the cache"}, {"sha": "1d2a2e58ef0175a7c082fa7a04ebeefa136f5fab", "filename": "gcc/config/alpha/alpha.opt", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bea7f7c10c6157c58f3f9e197a14b0964b1bce7/gcc%2Fconfig%2Falpha%2Falpha.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bea7f7c10c6157c58f3f9e197a14b0964b1bce7/gcc%2Fconfig%2Falpha%2Falpha.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.opt?ref=8bea7f7c10c6157c58f3f9e197a14b0964b1bce7", "patch": "@@ -0,0 +1,114 @@\n+msoft-float\n+Target Report Mask(SOFT_FP)\n+Do not use hardware fp\n+\n+mfp-regs\n+Target Report Mask(FPREGS)\n+Use fp registers\n+\n+mgas\n+Target RejectNegative Mask(GAS)\n+Assume GAS\n+\n+malpha-as\n+Target RejectNegative InverseMask(GAS)\n+Do not assume GAS\n+\n+mieee-conformant\n+Target RejectNegative Mask(IEEE_CONFORMANT)\n+Request IEEE-conformant math library routines (OSF/1)\n+\n+mieee\n+Target Report RejectNegative Mask(IEEE)\n+Emit IEEE-conformant code, without inexact exceptions\n+\n+mieee-with-inexact\n+Target Report RejectNegative Mask(IEEE_WITH_INEXACT)\n+\n+mbuild-constants\n+Target Report Mask(BUILD_CONSTANTS)\n+Do not emit complex integer constants to read-only memory\n+\n+mfloat-vax\n+Target Report RejectNegative Mask(FLOAT_VAX)\n+Use VAX fp\n+\n+mfloat-ieee\n+Target Report RejectNegative InverseMask(FLOAT_VAX)\n+Do not use VAX fp\n+\n+mbwx\n+Target Report Mask(BWX)\n+Emit code for the byte/word ISA extension\n+\n+mmax\n+Target Report Mask(MAX)\n+Emit code for the motion video ISA extension\n+\n+mfix\n+Target Report Mask(FIX)\n+Emit code for the fp move and sqrt ISA extension\n+\n+mcix\n+Target Report Mask(CIX)\n+Emit code for the counting ISA extension\n+\n+mexplicit-relocs\n+Target Report Mask(EXPLICIT_RELOCS)\n+Emit code using explicit relocation directives\n+\n+msmall-data\n+Target Report RejectNegative Mask(SMALL_DATA)\n+Emit 16-bit relocations to the small data areas\n+\n+mlarge-data\n+Target Report RejectNegative InverseMask(SMALL_DATA)\n+Emit 32-bit relocations to the small data areas\n+\n+msmall-text\n+Target Report RejectNegative Mask(SMALL_TEXT)\n+Emit direct branches to local functions\n+\n+mlarge-text\n+Target Report RejectNegative InverseMask(SMALL_TEXT)\n+Emit indirect branches to local functions\n+\n+mtls-kernel\n+Target Report Mask(TLS_KERNEL)\n+Emit rdval instead of rduniq for thread pointer\n+\n+mlong-double-128\n+Target Report RejectNegative Mask(LONG_DOUBLE_128)\n+Use 128-bit long double\n+\n+mlong-double-64\n+Target Report RejectNegative InverseMask(LONG_DOUBLE_128)\n+Use 64-bit long double\n+\n+mcpu=\n+Target RejectNegative Joined\n+Use features of and schedule given CPU\n+\n+mtune=\n+Target RejectNegative Joined\n+Schedule given CPU\n+\n+mfp-rounding-mode=\n+Target RejectNegative Joined\n+Control the generated fp rounding mode\n+\n+mfp-trap-mode=\n+Target RejectNegative Joined\n+Control the IEEE trap mode\n+\n+mtrap-precision=\n+Target RejectNegative Joined\n+Control the precision given to fp exceptions\n+\n+mmemory-latency=\n+Target RejectNegative Joined\n+Tune expected memory latency\n+\n+mtls-size=\n+Target RejectNegative Joined\n+Specify bit size of immediate TLS offsets"}, {"sha": "08fb9cda31a6386b395398095e663d922f6cb062", "filename": "gcc/config/alpha/ev4.md", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bea7f7c10c6157c58f3f9e197a14b0964b1bce7/gcc%2Fconfig%2Falpha%2Fev4.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bea7f7c10c6157c58f3f9e197a14b0964b1bce7/gcc%2Fconfig%2Falpha%2Fev4.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fev4.md?ref=8bea7f7c10c6157c58f3f9e197a14b0964b1bce7", "patch": "@@ -31,49 +31,49 @@\n \n ; Assume type \"multi\" single issues.\n (define_insn_reservation \"ev4_multi\" 1\n-  (and (eq_attr \"cpu\" \"ev4\")\n+  (and (eq_attr \"tune\" \"ev4\")\n        (eq_attr \"type\" \"multi\"))\n   \"ev4_ib0+ev4_ib1\")\n \n ; Loads from L0 completes in three cycles.  adjust_cost still factors\n ; in user-specified memory latency, so return 1 here.\n (define_insn_reservation \"ev4_ld\" 1\n-  (and (eq_attr \"cpu\" \"ev4\")\n+  (and (eq_attr \"tune\" \"ev4\")\n        (eq_attr \"type\" \"ild,fld,ldsym\"))\n   \"ev4_ib01+ev4_abox\")\n \n ; Stores can issue before the data (but not address) is ready.\n (define_insn_reservation \"ev4_ist\" 1\n-  (and (eq_attr \"cpu\" \"ev4\")\n+  (and (eq_attr \"tune\" \"ev4\")\n        (eq_attr \"type\" \"ist\"))\n   \"ev4_ib1+ev4_abox\")\n \n (define_insn_reservation \"ev4_fst\" 1\n-  (and (eq_attr \"cpu\" \"ev4\")\n+  (and (eq_attr \"tune\" \"ev4\")\n        (eq_attr \"type\" \"fst\"))\n   \"ev4_ib0+ev4_abox\")\n \n ; Branches have no delay cost, but do tie up the unit for two cycles.\n (define_insn_reservation \"ev4_ibr\" 2\n-  (and (eq_attr \"cpu\" \"ev4\")\n+  (and (eq_attr \"tune\" \"ev4\")\n        (eq_attr \"type\" \"ibr,jsr\"))\n   \"ev4_ib1+ev4_bbox,ev4_bbox\")\n \n (define_insn_reservation \"ev4_callpal\" 2\n-  (and (eq_attr \"cpu\" \"ev4\")\n+  (and (eq_attr \"tune\" \"ev4\")\n        (eq_attr \"type\" \"callpal\"))\n   \"ev4_ib1+ev4_bbox,ev4_bbox\")\n \n (define_insn_reservation \"ev4_fbr\" 2\n-  (and (eq_attr \"cpu\" \"ev4\")\n+  (and (eq_attr \"tune\" \"ev4\")\n        (eq_attr \"type\" \"fbr\"))\n   \"ev4_ib0+ev4_bbox,ev4_bbox\")\n \n ; Arithmetic insns are normally have their results available after\n ; two cycles.  There are a number of exceptions.\n \n (define_insn_reservation \"ev4_iaddlog\" 2\n-  (and (eq_attr \"cpu\" \"ev4\")\n+  (and (eq_attr \"tune\" \"ev4\")\n        (eq_attr \"type\" \"iadd,ilog\"))\n   \"ev4_ib0+ev4_ebox\")\n \n@@ -82,12 +82,12 @@\n   \"ev4_ibr,ev4_iaddlog,ev4_shiftcm,ev4_icmp,ev4_imulsi,ev4_imuldi\")\n \n (define_insn_reservation \"ev4_shiftcm\" 2\n-  (and (eq_attr \"cpu\" \"ev4\")\n+  (and (eq_attr \"tune\" \"ev4\")\n        (eq_attr \"type\" \"shift,icmov\"))\n   \"ev4_ib0+ev4_ebox\")\n \n (define_insn_reservation \"ev4_icmp\" 2\n-  (and (eq_attr \"cpu\" \"ev4\")\n+  (and (eq_attr \"tune\" \"ev4\")\n        (eq_attr \"type\" \"icmp\"))\n   \"ev4_ib0+ev4_ebox\")\n \n@@ -102,15 +102,15 @@\n ; be issued exactly three cycles before an integer multiply completes\".\n \n (define_insn_reservation \"ev4_imulsi\" 21\n-  (and (eq_attr \"cpu\" \"ev4\")\n+  (and (eq_attr \"tune\" \"ev4\")\n        (and (eq_attr \"type\" \"imul\")\n \t    (eq_attr \"opsize\" \"si\")))\n   \"ev4_ib0+ev4_imul,ev4_imul*18,ev4_ebox\")\n \n (define_bypass 20 \"ev4_imulsi\" \"ev4_ist\" \"store_data_bypass_p\")\n \n (define_insn_reservation \"ev4_imuldi\" 23\n-  (and (eq_attr \"cpu\" \"ev4\")\n+  (and (eq_attr \"tune\" \"ev4\")\n        (and (eq_attr \"type\" \"imul\")\n \t    (eq_attr \"opsize\" \"!si\")))\n   \"ev4_ib0+ev4_imul,ev4_imul*20,ev4_ebox\")\n@@ -119,7 +119,7 @@\n \n ; Most FP insns have a 6 cycle latency, but with a 4 cycle bypass back in.\n (define_insn_reservation \"ev4_fpop\" 6\n-  (and (eq_attr \"cpu\" \"ev4\")\n+  (and (eq_attr \"tune\" \"ev4\")\n        (eq_attr \"type\" \"fadd,fmul,fcpys,fcmov\"))\n   \"ev4_ib1+ev4_fbox\")\n \n@@ -129,19 +129,19 @@\n ; issued exactly five or exactly six cycles before an fdiv insn completes\".\n \n (define_insn_reservation \"ev4_fdivsf\" 34\n-  (and (eq_attr \"cpu\" \"ev4\")\n+  (and (eq_attr \"tune\" \"ev4\")\n        (and (eq_attr \"type\" \"fdiv\")\n \t    (eq_attr \"opsize\" \"si\")))\n   \"ev4_ib1+ev4_fdiv,ev4_fdiv*28,ev4_fdiv+ev4_fbox,ev4_fbox\")\n \n (define_insn_reservation \"ev4_fdivdf\" 63\n-  (and (eq_attr \"cpu\" \"ev4\")\n+  (and (eq_attr \"tune\" \"ev4\")\n        (and (eq_attr \"type\" \"fdiv\")\n \t    (eq_attr \"opsize\" \"di\")))\n   \"ev4_ib1+ev4_fdiv,ev4_fdiv*57,ev4_fdiv+ev4_fbox,ev4_fbox\")\n \n ; Traps don't consume or produce data.\n (define_insn_reservation \"ev4_misc\" 1\n-  (and (eq_attr \"cpu\" \"ev4\")\n+  (and (eq_attr \"tune\" \"ev4\")\n        (eq_attr \"type\" \"misc\"))\n   \"ev4_ib1\")"}, {"sha": "ec7bf4b9ca19847cb4495387ecfc85c5197061eb", "filename": "gcc/config/alpha/ev5.md", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bea7f7c10c6157c58f3f9e197a14b0964b1bce7/gcc%2Fconfig%2Falpha%2Fev5.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bea7f7c10c6157c58f3f9e197a14b0964b1bce7/gcc%2Fconfig%2Falpha%2Fev5.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fev5.md?ref=8bea7f7c10c6157c58f3f9e197a14b0964b1bce7", "patch": "@@ -30,7 +30,7 @@\n \n ; Assume type \"multi\" single issues.\n (define_insn_reservation \"ev5_multi\" 1\n-  (and (eq_attr \"cpu\" \"ev5\")\n+  (and (eq_attr \"tune\" \"ev5\")\n        (eq_attr \"type\" \"multi\"))\n   \"ev5_e0+ev5_e1+ev5_fa+ev5_fm\")\n \n@@ -42,55 +42,55 @@\n (exclusion_set \"ev5_l0,ev5_l1\" \"ev5_st\")\n \n (define_insn_reservation \"ev5_st\" 1\n-  (and (eq_attr \"cpu\" \"ev5\")\n+  (and (eq_attr \"tune\" \"ev5\")\n        (eq_attr \"type\" \"ist,fst\"))\n   \"ev5_e0+ev5_st\")\n \n ; Loads from L0 complete in two cycles.  adjust_cost still factors\n ; in user-specified memory latency, so return 1 here.\n (define_insn_reservation \"ev5_ld\" 1\n-  (and (eq_attr \"cpu\" \"ev5\")\n+  (and (eq_attr \"tune\" \"ev5\")\n        (eq_attr \"type\" \"ild,fld,ldsym\"))\n   \"ev5_e01+ev5_ld\")\n \n ; Integer branches slot only to E1.\n (define_insn_reservation \"ev5_ibr\" 1\n-  (and (eq_attr \"cpu\" \"ev5\")\n+  (and (eq_attr \"tune\" \"ev5\")\n        (eq_attr \"type\" \"ibr\"))\n   \"ev5_e1\")\n \n (define_insn_reservation \"ev5_callpal\" 1\n-  (and (eq_attr \"cpu\" \"ev5\")\n+  (and (eq_attr \"tune\" \"ev5\")\n        (eq_attr \"type\" \"callpal\"))\n   \"ev5_e1\")\n \n (define_insn_reservation \"ev5_jsr\" 1\n-  (and (eq_attr \"cpu\" \"ev5\")\n+  (and (eq_attr \"tune\" \"ev5\")\n        (eq_attr \"type\" \"jsr\"))\n   \"ev5_e1\")\n \n (define_insn_reservation \"ev5_shift\" 1\n-  (and (eq_attr \"cpu\" \"ev5\")\n+  (and (eq_attr \"tune\" \"ev5\")\n        (eq_attr \"type\" \"shift\"))\n   \"ev5_e0\")\n \n (define_insn_reservation \"ev5_mvi\" 2\n-  (and (eq_attr \"cpu\" \"ev5\")\n+  (and (eq_attr \"tune\" \"ev5\")\n        (eq_attr \"type\" \"mvi\"))\n   \"ev5_e0\")\n \n (define_insn_reservation \"ev5_cmov\" 2\n-  (and (eq_attr \"cpu\" \"ev5\")\n+  (and (eq_attr \"tune\" \"ev5\")\n        (eq_attr \"type\" \"icmov\"))\n   \"ev5_e01\")\n \n (define_insn_reservation \"ev5_iadd\" 1\n-  (and (eq_attr \"cpu\" \"ev5\")\n+  (and (eq_attr \"tune\" \"ev5\")\n        (eq_attr \"type\" \"iadd\"))\n   \"ev5_e01\")\n \n (define_insn_reservation \"ev5_ilogcmp\" 1\n-  (and (eq_attr \"cpu\" \"ev5\")\n+  (and (eq_attr \"tune\" \"ev5\")\n        (eq_attr \"type\" \"ilog,icmp\"))\n   \"ev5_e01\")\n \n@@ -101,19 +101,19 @@\n ; to E0 exactly two cycles before an integer multiply completes\".\n \n (define_insn_reservation \"ev5_imull\" 8\n-  (and (eq_attr \"cpu\" \"ev5\")\n+  (and (eq_attr \"tune\" \"ev5\")\n        (and (eq_attr \"type\" \"imul\")\n \t    (eq_attr \"opsize\" \"si\")))\n   \"ev5_e0+ev5_imul,ev5_imul*3,nothing,ev5_e0\")\n \n (define_insn_reservation \"ev5_imulq\" 12\n-  (and (eq_attr \"cpu\" \"ev5\")\n+  (and (eq_attr \"tune\" \"ev5\")\n        (and (eq_attr \"type\" \"imul\")\n \t    (eq_attr \"opsize\" \"di\")))\n   \"ev5_e0+ev5_imul,ev5_imul*7,nothing,ev5_e0\")\n \n (define_insn_reservation \"ev5_imulh\" 14\n-  (and (eq_attr \"cpu\" \"ev5\")\n+  (and (eq_attr \"tune\" \"ev5\")\n        (and (eq_attr \"type\" \"imul\")\n \t    (eq_attr \"opsize\" \"udi\")))\n   \"ev5_e0+ev5_imul,ev5_imul*7,nothing*3,ev5_e0\")\n@@ -139,22 +139,22 @@\n ; Similarly for the FPU we have two asymmetric units.\n \n (define_insn_reservation \"ev5_fadd\" 4\n-  (and (eq_attr \"cpu\" \"ev5\")\n+  (and (eq_attr \"tune\" \"ev5\")\n        (eq_attr \"type\" \"fadd,fcmov\"))\n   \"ev5_fa\")\n \n (define_insn_reservation \"ev5_fbr\" 1\n-  (and (eq_attr \"cpu\" \"ev5\")\n+  (and (eq_attr \"tune\" \"ev5\")\n        (eq_attr \"type\" \"fbr\"))\n   \"ev5_fa\")\n \n (define_insn_reservation \"ev5_fcpys\" 4\n-  (and (eq_attr \"cpu\" \"ev5\")\n+  (and (eq_attr \"tune\" \"ev5\")\n        (eq_attr \"type\" \"fcpys\"))\n   \"ev5_fam\")\n \n (define_insn_reservation \"ev5_fmul\" 4\n-  (and (eq_attr \"cpu\" \"ev5\")\n+  (and (eq_attr \"tune\" \"ev5\")\n        (eq_attr \"type\" \"fmul\"))\n   \"ev5_fm\")\n \n@@ -170,21 +170,21 @@\n ; the other, i.e. ev5_fcpys.\n \n (define_insn_reservation \"ev5_fdivsf\" 15\n-  (and (eq_attr \"cpu\" \"ev5\")\n+  (and (eq_attr \"tune\" \"ev5\")\n        (and (eq_attr \"type\" \"fdiv\")\n \t    (eq_attr \"opsize\" \"si\")))\n   ; \"ev5_fa+ev5_fdiv,ev5_fdiv*9,ev5_fa+ev5_fdiv,ev5_fdiv*4\"\n   \"ev5_fa+ev5_fdiv,ev5_fdiv*14\")\n \n (define_insn_reservation \"ev5_fdivdf\" 22\n-  (and (eq_attr \"cpu\" \"ev5\")\n+  (and (eq_attr \"tune\" \"ev5\")\n        (and (eq_attr \"type\" \"fdiv\")\n \t    (eq_attr \"opsize\" \"di\")))\n   ; \"ev5_fa+ev5_fdiv,ev5_fdiv*17,ev5_fa+ev5_fdiv,ev5_fdiv*4\"\n   \"ev5_fa+ev5_fdiv,ev5_fdiv*21\")\n \n ; Traps don't consume or produce data; rpcc is latency 2 if we ever add it.\n (define_insn_reservation \"ev5_misc\" 2\n-  (and (eq_attr \"cpu\" \"ev5\")\n+  (and (eq_attr \"tune\" \"ev5\")\n        (eq_attr \"type\" \"misc\"))\n   \"ev5_e0\")"}, {"sha": "9b63dd46f51d0d92e4c77b87d99ea883cc247ec7", "filename": "gcc/config/alpha/ev6.md", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bea7f7c10c6157c58f3f9e197a14b0964b1bce7/gcc%2Fconfig%2Falpha%2Fev6.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bea7f7c10c6157c58f3f9e197a14b0964b1bce7/gcc%2Fconfig%2Falpha%2Fev6.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fev6.md?ref=8bea7f7c10c6157c58f3f9e197a14b0964b1bce7", "patch": "@@ -45,26 +45,26 @@\n \n ; Assume type \"multi\" single issues.\n (define_insn_reservation \"ev6_multi\" 1\n-  (and (eq_attr \"cpu\" \"ev6\")\n+  (and (eq_attr \"tune\" \"ev6\")\n        (eq_attr \"type\" \"multi\"))\n   \"ev6_u0+ev6_u1+ev6_l0+ev6_l1+ev6_fa+ev6_fm+ev6_fst0+ev6_fst1\")\n \n ; Integer loads take at least 3 clocks, and only issue to lower units.\n ; adjust_cost still factors in user-specified memory latency, so return 1 here.\n (define_insn_reservation \"ev6_ild\" 1\n-  (and (eq_attr \"cpu\" \"ev6\")\n+  (and (eq_attr \"tune\" \"ev6\")\n        (eq_attr \"type\" \"ild,ldsym\"))\n   \"ev6_l\")\n \n (define_insn_reservation \"ev6_ist\" 1\n-  (and (eq_attr \"cpu\" \"ev6\")\n+  (and (eq_attr \"tune\" \"ev6\")\n        (eq_attr \"type\" \"ist\"))\n   \"ev6_l\")\n \n ; FP loads take at least 4 clocks.  adjust_cost still factors\n ; in user-specified memory latency, so return 2 here.\n (define_insn_reservation \"ev6_fld\" 2\n-  (and (eq_attr \"cpu\" \"ev6\")\n+  (and (eq_attr \"tune\" \"ev6\")\n        (eq_attr \"type\" \"fld\"))\n   \"ev6_l\")\n \n@@ -75,99 +75,99 @@\n ; file and the insn retired.\n \n (define_insn_reservation \"ev6_fst\" 3\n-  (and (eq_attr \"cpu\" \"ev6\")\n+  (and (eq_attr \"tune\" \"ev6\")\n        (eq_attr \"type\" \"fst\"))\n   \"ev6_fst,nothing,ev6_l\")\n \n ; Arithmetic goes anywhere.\n (define_insn_reservation \"ev6_arith\" 1\n-  (and (eq_attr \"cpu\" \"ev6\")\n+  (and (eq_attr \"tune\" \"ev6\")\n        (eq_attr \"type\" \"iadd,ilog,icmp\"))\n   \"ev6_ebox\")\n \n ; Motion video insns also issue only to U0, and take three ticks.\n (define_insn_reservation \"ev6_mvi\" 3\n-  (and (eq_attr \"cpu\" \"ev6\")\n+  (and (eq_attr \"tune\" \"ev6\")\n        (eq_attr \"type\" \"mvi\"))\n   \"ev6_u0\")\n \n ; Shifts issue to upper units.\n (define_insn_reservation \"ev6_shift\" 1\n-  (and (eq_attr \"cpu\" \"ev6\")\n+  (and (eq_attr \"tune\" \"ev6\")\n        (eq_attr \"type\" \"shift\"))\n   \"ev6_u\")\n \n ; Multiplies issue only to U1, and all take 7 ticks.\n (define_insn_reservation \"ev6_imul\" 7\n-  (and (eq_attr \"cpu\" \"ev6\")\n+  (and (eq_attr \"tune\" \"ev6\")\n        (eq_attr \"type\" \"imul\"))\n   \"ev6_u1\")\n \n ; Conditional moves decompose into two independent primitives, each taking\n ; one cycle.  Since ev6 is out-of-order, we can't see anything but two cycles.\n (define_insn_reservation \"ev6_icmov\" 2\n-  (and (eq_attr \"cpu\" \"ev6\")\n+  (and (eq_attr \"tune\" \"ev6\")\n        (eq_attr \"type\" \"icmov\"))\n   \"ev6_ebox,ev6_ebox\")\n \n ; Integer branches issue to upper units\n (define_insn_reservation \"ev6_ibr\" 1\n-  (and (eq_attr \"cpu\" \"ev6\")\n+  (and (eq_attr \"tune\" \"ev6\")\n        (eq_attr \"type\" \"ibr,callpal\"))\n   \"ev6_u\")\n \n ; Calls only issue to L0.\n (define_insn_reservation \"ev6_jsr\" 1\n-  (and (eq_attr \"cpu\" \"ev6\")\n+  (and (eq_attr \"tune\" \"ev6\")\n        (eq_attr \"type\" \"jsr\"))\n   \"ev6_l0\")\n \n ; Ftoi/itof only issue to lower pipes.\n (define_insn_reservation \"ev6_itof\" 3\n-  (and (eq_attr \"cpu\" \"ev6\")\n+  (and (eq_attr \"tune\" \"ev6\")\n        (eq_attr \"type\" \"itof\"))\n   \"ev6_l\")\n \n (define_insn_reservation \"ev6_ftoi\" 3\n-  (and (eq_attr \"cpu\" \"ev6\")\n+  (and (eq_attr \"tune\" \"ev6\")\n        (eq_attr \"type\" \"ftoi\"))\n   \"ev6_fst,nothing,ev6_l\")\n \n (define_insn_reservation \"ev6_fmul\" 4\n-  (and (eq_attr \"cpu\" \"ev6\")\n+  (and (eq_attr \"tune\" \"ev6\")\n        (eq_attr \"type\" \"fmul\"))\n   \"ev6_fm\")\n \n (define_insn_reservation \"ev6_fadd\" 4\n-  (and (eq_attr \"cpu\" \"ev6\")\n+  (and (eq_attr \"tune\" \"ev6\")\n        (eq_attr \"type\" \"fadd,fcpys,fbr\"))\n   \"ev6_fa\")\n \n (define_insn_reservation \"ev6_fcmov\" 8\n-  (and (eq_attr \"cpu\" \"ev6\")\n+  (and (eq_attr \"tune\" \"ev6\")\n        (eq_attr \"type\" \"fcmov\"))\n   \"ev6_fa,nothing*3,ev6_fa\")\n \n (define_insn_reservation \"ev6_fdivsf\" 12\n-  (and (eq_attr \"cpu\" \"ev6\")\n+  (and (eq_attr \"tune\" \"ev6\")\n        (and (eq_attr \"type\" \"fdiv\")\n \t    (eq_attr \"opsize\" \"si\")))\n   \"ev6_fa*9\")\n \n (define_insn_reservation \"ev6_fdivdf\" 15\n-  (and (eq_attr \"cpu\" \"ev6\")\n+  (and (eq_attr \"tune\" \"ev6\")\n        (and (eq_attr \"type\" \"fdiv\")\n \t    (eq_attr \"opsize\" \"di\")))\n   \"ev6_fa*12\")\n \n (define_insn_reservation \"ev6_sqrtsf\" 18\n-  (and (eq_attr \"cpu\" \"ev6\")\n+  (and (eq_attr \"tune\" \"ev6\")\n        (and (eq_attr \"type\" \"fsqrt\")\n \t    (eq_attr \"opsize\" \"si\")))\n   \"ev6_fa*15\")\n \n (define_insn_reservation \"ev6_sqrtdf\" 33\n-  (and (eq_attr \"cpu\" \"ev6\")\n+  (and (eq_attr \"tune\" \"ev6\")\n        (and (eq_attr \"type\" \"fsqrt\")\n \t    (eq_attr \"opsize\" \"di\")))\n   \"ev6_fa*30\")"}, {"sha": "86aec3648fa26068d8e34e739d8b84ebd41a23ea", "filename": "gcc/config/alpha/freebsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bea7f7c10c6157c58f3f9e197a14b0964b1bce7/gcc%2Fconfig%2Falpha%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bea7f7c10c6157c58f3f9e197a14b0964b1bce7/gcc%2Fconfig%2Falpha%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Ffreebsd.h?ref=8bea7f7c10c6157c58f3f9e197a14b0964b1bce7", "patch": "@@ -75,7 +75,7 @@ Boston, MA 02111-1307, USA.  */\n #define TARGET_ELF\t1\n \n #undef  TARGET_DEFAULT\n-#define TARGET_DEFAULT\t(MASK_FP | MASK_FPREGS | MASK_GAS)\n+#define TARGET_DEFAULT\t(MASK_FPREGS | MASK_GAS)\n \n #undef HAS_INIT_SECTION\n "}, {"sha": "401406728ba737f8201b5c59dcbe5cb9a83c2af0", "filename": "gcc/config/alpha/linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bea7f7c10c6157c58f3f9e197a14b0964b1bce7/gcc%2Fconfig%2Falpha%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bea7f7c10c6157c58f3f9e197a14b0964b1bce7/gcc%2Fconfig%2Falpha%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Flinux.h?ref=8bea7f7c10c6157c58f3f9e197a14b0964b1bce7", "patch": "@@ -22,7 +22,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_FP | MASK_FPREGS | MASK_GAS)\n+#define TARGET_DEFAULT (MASK_FPREGS | MASK_GAS)\n \n #define TARGET_OS_CPP_BUILTINS()\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\\"}, {"sha": "338f818b3326c32ae5abd88b2550b8769b83e341", "filename": "gcc/config/alpha/netbsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bea7f7c10c6157c58f3f9e197a14b0964b1bce7/gcc%2Fconfig%2Falpha%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bea7f7c10c6157c58f3f9e197a14b0964b1bce7/gcc%2Fconfig%2Falpha%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fnetbsd.h?ref=8bea7f7c10c6157c58f3f9e197a14b0964b1bce7", "patch": "@@ -20,7 +20,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_FP | MASK_FPREGS | MASK_GAS)\n+#define TARGET_DEFAULT (MASK_FPREGS | MASK_GAS)\n \n #define TARGET_OS_CPP_BUILTINS()\t\t\\\n     do {\t\t\t\t\t\\"}, {"sha": "5da75988af0e517e83bbc847cb2a320768b65201", "filename": "gcc/config/alpha/osf5.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bea7f7c10c6157c58f3f9e197a14b0964b1bce7/gcc%2Fconfig%2Falpha%2Fosf5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bea7f7c10c6157c58f3f9e197a14b0964b1bce7/gcc%2Fconfig%2Falpha%2Fosf5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fosf5.h?ref=8bea7f7c10c6157c58f3f9e197a14b0964b1bce7", "patch": "@@ -20,7 +20,7 @@\n \n /* Tru64 5.1 uses IEEE QUAD format.  */\n #undef TARGET_DEFAULT\n-#define TARGET_DEFAULT\tMASK_FP | MASK_FPREGS | MASK_LONG_DOUBLE_128\n+#define TARGET_DEFAULT\t(MASK_FPREGS | MASK_LONG_DOUBLE_128)\n \n /* In Tru64 UNIX V5.1, Compaq introduced a new assembler\n    (/usr/lib/cmplrs/cc/adu) which currently (versions between 3.04.29 and"}, {"sha": "0e9a6987da3f31b9e33bd36558d687a0f207e0ac", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bea7f7c10c6157c58f3f9e197a14b0964b1bce7/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bea7f7c10c6157c58f3f9e197a14b0964b1bce7/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=8bea7f7c10c6157c58f3f9e197a14b0964b1bce7", "patch": "@@ -42,7 +42,7 @@ Boston, MA 02111-1307, USA.  */\n     } while (0)\n \n #undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_FP|MASK_FPREGS|MASK_GAS)\n+#define TARGET_DEFAULT (MASK_FPREGS|MASK_GAS)\n #undef TARGET_ABI_OPEN_VMS\n #define TARGET_ABI_OPEN_VMS 1\n "}]}