{"sha": "6e609e0010c76d708097cbcf1c67fded6010a0e0", "node_id": "C_kwDOANBUbNoAKDZlNjA5ZTAwMTBjNzZkNzA4MDk3Y2JjZjFjNjdmZGVkNjAxMGEwZTA", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-13T07:54:58Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-13T07:55:13Z"}, "message": "Revert \"tree-optimization/104912 - ensure cost model is checked first\"\n\nThis reverts commit ac8340ee4d1e65f3fd41c547b16895875f4aefa7.", "tree": {"sha": "4fb33b608ab599f5c529900b4770fd6030aa3960", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fb33b608ab599f5c529900b4770fd6030aa3960"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e609e0010c76d708097cbcf1c67fded6010a0e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e609e0010c76d708097cbcf1c67fded6010a0e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e609e0010c76d708097cbcf1c67fded6010a0e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e609e0010c76d708097cbcf1c67fded6010a0e0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac8340ee4d1e65f3fd41c547b16895875f4aefa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac8340ee4d1e65f3fd41c547b16895875f4aefa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac8340ee4d1e65f3fd41c547b16895875f4aefa7"}], "stats": {"total": 60, "additions": 3, "deletions": 57}, "files": [{"sha": "63fb6f669a075fd229d80e89d50952d5a7524923", "filename": "gcc/tree-vect-loop-manip.cc", "status": "modified", "additions": 3, "deletions": 57, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e609e0010c76d708097cbcf1c67fded6010a0e0/gcc%2Ftree-vect-loop-manip.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e609e0010c76d708097cbcf1c67fded6010a0e0/gcc%2Ftree-vect-loop-manip.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.cc?ref=6e609e0010c76d708097cbcf1c67fded6010a0e0", "patch": "@@ -3445,34 +3445,13 @@ vect_loop_versioning (loop_vec_info loop_vinfo,\n \tcond_expr = expr;\n     }\n \n-  tree cost_name = NULL_TREE;\n-  profile_probability prob2 = profile_probability::uninitialized ();\n-  if (cond_expr\n-      && !integer_truep (cond_expr)\n-      && (version_niter\n-\t  || version_align\n-\t  || version_alias\n-\t  || version_simd_if_cond))\n-    {\n-      cost_name = cond_expr = force_gimple_operand_1 (unshare_expr (cond_expr),\n-\t\t\t\t\t\t      &cond_expr_stmt_list,\n-\t\t\t\t\t\t      is_gimple_val, NULL_TREE);\n-      /* Split prob () into two so that the overall probability of passing\n-\t both the cost-model and versioning checks is the orig prob.  */\n-      prob2 = prob.split (prob);\n-    }\n-\n   if (version_niter)\n     vect_create_cond_for_niters_checks (loop_vinfo, &cond_expr);\n \n   if (cond_expr)\n-    {\n-      gimple_seq tem = NULL;\n-      cond_expr = force_gimple_operand_1 (unshare_expr (cond_expr),\n-\t\t\t\t\t  &tem,\n-\t\t\t\t\t  is_gimple_condexpr, NULL_TREE);\n-      gimple_seq_add_seq (&cond_expr_stmt_list, tem);\n-    }\n+    cond_expr = force_gimple_operand_1 (unshare_expr (cond_expr),\n+\t\t\t\t\t&cond_expr_stmt_list,\n+\t\t\t\t\tis_gimple_condexpr, NULL_TREE);\n \n   if (version_align)\n     vect_create_cond_for_align_checks (loop_vinfo, &cond_expr,\n@@ -3676,39 +3655,6 @@ vect_loop_versioning (loop_vec_info loop_vinfo,\n       update_ssa (TODO_update_ssa);\n     }\n \n-  /* Split the cost model check off to a separate BB.  Costing assumes\n-     this is the only thing we perform when we enter the scalar loop\n-     from a failed cost decision.  */\n-  if (cost_name && TREE_CODE (cost_name) == SSA_NAME)\n-    {\n-      gimple *def = SSA_NAME_DEF_STMT (cost_name);\n-      /* All uses of the cost check are 'true' after the check we\n-\t are going to insert.  */\n-      replace_uses_by (cost_name, boolean_true_node);\n-      /* And we're going to build the new single use of it.  */\n-      gcond *cond = gimple_build_cond (NE_EXPR, cost_name, boolean_false_node,\n-\t\t\t\t       NULL_TREE, NULL_TREE);\n-      edge e = split_block (gimple_bb (def), def);\n-      gimple_stmt_iterator gsi = gsi_for_stmt (def);\n-      gsi_insert_after (&gsi, cond, GSI_NEW_STMT);\n-      edge true_e, false_e;\n-      extract_true_false_edges_from_block (e->dest, &true_e, &false_e);\n-      e->flags &= ~EDGE_FALLTHRU;\n-      e->flags |= EDGE_TRUE_VALUE;\n-      edge e2 = make_edge (e->src, false_e->dest, EDGE_FALSE_VALUE);\n-      e->probability = prob2;\n-      e2->probability = prob2.invert ();\n-      set_immediate_dominator (CDI_DOMINATORS, false_e->dest, e->src);\n-      auto_vec<basic_block, 3> adj;\n-      for (basic_block son = first_dom_son (CDI_DOMINATORS, e->dest);\n-\t   son;\n-\t   son = next_dom_son (CDI_DOMINATORS, son))\n-\tif (EDGE_COUNT (son->preds) > 1)\n-\t  adj.safe_push (son);\n-      for (auto son : adj)\n-\tset_immediate_dominator (CDI_DOMINATORS, son, e->src);\n-    }\n-\n   if (version_niter)\n     {\n       /* The versioned loop could be infinite, we need to clear existing"}]}