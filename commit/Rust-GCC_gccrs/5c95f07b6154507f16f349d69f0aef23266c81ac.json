{"sha": "5c95f07b6154507f16f349d69f0aef23266c81ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM5NWYwN2I2MTU0NTA3ZjE2ZjM0OWQ2OWYwYWVmMjMyNjZjODFhYw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-02-05T15:28:31Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-02-05T15:28:31Z"}, "message": "tree-ssa-ccp.c (get_symbol_constant_value): Strip all conversions.\n\n2010-02-05  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-ccp.c (get_symbol_constant_value): Strip all\n\tconversions.\n\t(fold_const_aggregate_ref): Likewise.\n\t(ccp_fold_stmt): Substitute loads.\n\t(maybe_fold_reference): Verify types before substituting.\n\tUnshare properly.\n\t(fold_gimple_assign): Unshare properly.\n\t(fold_stmt_1): Insert conversion if necessary before replacing\n\tthe RHS.\n\n\t* gcc.dg/tree-ssa/ssa-ccp-28.c: New testcase.\n\nFrom-SVN: r156519", "tree": {"sha": "229795994b4de581bb95aae0ad647146d6c5a116", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/229795994b4de581bb95aae0ad647146d6c5a116"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c95f07b6154507f16f349d69f0aef23266c81ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c95f07b6154507f16f349d69f0aef23266c81ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c95f07b6154507f16f349d69f0aef23266c81ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c95f07b6154507f16f349d69f0aef23266c81ac/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "64aa00b1710aaf321a6487e1bb4e8a2e25b4aae9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64aa00b1710aaf321a6487e1bb4e8a2e25b4aae9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64aa00b1710aaf321a6487e1bb4e8a2e25b4aae9"}], "stats": {"total": 84, "additions": 77, "deletions": 7}, "files": [{"sha": "1fe28e52da57c80a319434ba8e4e3a2f74b29462", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c95f07b6154507f16f349d69f0aef23266c81ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c95f07b6154507f16f349d69f0aef23266c81ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c95f07b6154507f16f349d69f0aef23266c81ac", "patch": "@@ -1,3 +1,15 @@\n+2010-02-05  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-ccp.c (get_symbol_constant_value): Strip all\n+\tconversions.\n+\t(fold_const_aggregate_ref): Likewise.\n+\t(ccp_fold_stmt): Substitute loads.\n+\t(maybe_fold_reference): Verify types before substituting.\n+\tUnshare properly.\n+\t(fold_gimple_assign): Unshare properly.\n+\t(fold_stmt_1): Insert conversion if necessary before replacing\n+\tthe RHS.\n+\n 2010-02-05  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/rs6000/rs6000.c (rs6000_override_options): Invert check"}, {"sha": "bc91d5828e3e10de6fcf6a85169efca4f5c01a8b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c95f07b6154507f16f349d69f0aef23266c81ac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c95f07b6154507f16f349d69f0aef23266c81ac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5c95f07b6154507f16f349d69f0aef23266c81ac", "patch": "@@ -1,3 +1,7 @@\n+2010-02-05  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/ssa-ccp-28.c: New testcase.\n+\n 2010-02-05  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/42915"}, {"sha": "f5dbe70b3d0953ad9a1a570a2e2ac6255eb36427", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ccp-28.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c95f07b6154507f16f349d69f0aef23266c81ac/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c95f07b6154507f16f349d69f0aef23266c81ac/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-28.c?ref=5c95f07b6154507f16f349d69f0aef23266c81ac", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O -fdump-tree-ccp1\" } */\n+\n+extern void abort (void);\n+\n+static int g[1];\n+\n+static int * const p = &g[0];\n+static int * const q = &g[0];\n+\n+int main(void)\n+{\n+  g[0] = 1;\n+  *p = 0;\n+  *p = *q;\n+  if (g[0] != 0)\n+    abort ();\n+  return 0;\n+}\n+\n+/* We should have replaced all loads from p and q with the constant\n+   initial value.  */\n+\n+/* { dg-final { scan-tree-dump-times \"= p;\" 0 \"ccp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"= q;\" 0 \"ccp1\" } } */\n+/* { dg-final { cleanup-tree-dump \"ccp1\" } } */"}, {"sha": "a4869d287acdee78863377d3487a9fd3203eb6fe", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c95f07b6154507f16f349d69f0aef23266c81ac/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c95f07b6154507f16f349d69f0aef23266c81ac/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=5c95f07b6154507f16f349d69f0aef23266c81ac", "patch": "@@ -283,7 +283,7 @@ get_symbol_constant_value (tree sym)\n       tree val = DECL_INITIAL (sym);\n       if (val)\n \t{\n-\t  STRIP_USELESS_TYPE_CONVERSION (val);\n+\t  STRIP_NOPS (val);\n \t  if (is_gimple_min_invariant (val))\n \t    {\n \t      if (TREE_CODE (val) == ADDR_EXPR)\n@@ -1297,7 +1297,7 @@ fold_const_aggregate_ref (tree t)\n       FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (ctor), cnt, cfield, cval)\n \tif (tree_int_cst_equal (cfield, idx))\n \t  {\n-\t    STRIP_USELESS_TYPE_CONVERSION (cval);\n+\t    STRIP_NOPS (cval);\n \t    if (TREE_CODE (cval) == ADDR_EXPR)\n \t      {\n \t\ttree base = get_base_address (TREE_OPERAND (cval, 0));\n@@ -1346,7 +1346,7 @@ fold_const_aggregate_ref (tree t)\n \t    /* FIXME: Handle bit-fields.  */\n \t    && ! DECL_BIT_FIELD (cfield))\n \t  {\n-\t    STRIP_USELESS_TYPE_CONVERSION (cval);\n+\t    STRIP_NOPS (cval);\n \t    if (TREE_CODE (cval) == ADDR_EXPR)\n \t      {\n \t\ttree base = get_base_address (TREE_OPERAND (cval, 0));\n@@ -1552,6 +1552,28 @@ ccp_fold_stmt (gimple_stmt_iterator *gsi)\n \treturn changed;\n       }\n \n+    case GIMPLE_ASSIGN:\n+      {\n+\ttree lhs = gimple_assign_lhs (stmt);\n+\tprop_value_t *val;\n+\n+\t/* If we have a load that turned out to be constant replace it\n+\t   as we cannot propagate into all uses in all cases.  */\n+\tif (gimple_assign_single_p (stmt)\n+\t    && TREE_CODE (lhs) == SSA_NAME\n+\t    && (val = get_value (lhs))\n+\t    && val->lattice_val == CONSTANT)\n+\t  {\n+\t    tree rhs = unshare_expr (val->value);\n+\t    if (!useless_type_conversion_p (TREE_TYPE (lhs), TREE_TYPE (rhs)))\n+\t      rhs = fold_convert (TREE_TYPE (lhs), rhs);\n+\t    gimple_assign_set_rhs_from_tree (gsi, rhs);\n+\t    return true;\n+\t  }\n+\n+\treturn false;\n+      }\n+\n     default:\n       return false;\n     }\n@@ -2412,9 +2434,10 @@ maybe_fold_reference (tree expr, bool is_lhs)\n \t   && DECL_P (*t))\n     {\n       tree tem = get_symbol_constant_value (*t);\n-      if (tem)\n+      if (tem\n+\t  && useless_type_conversion_p (TREE_TYPE (*t), TREE_TYPE (tem)))\n \t{\n-\t  *t = tem;\n+\t  *t = unshare_expr (tem);\n \t  tem = maybe_fold_reference (expr, is_lhs);\n \t  if (tem)\n \t    return tem;\n@@ -2824,7 +2847,7 @@ fold_gimple_assign (gimple_stmt_iterator *si)\n \t  }\n \n \telse if (DECL_P (rhs))\n-\t  return get_symbol_constant_value (rhs);\n+\t  return unshare_expr (get_symbol_constant_value (rhs));\n \n         /* If we couldn't fold the RHS, hand over to the generic\n            fold routines.  */\n@@ -3035,7 +3058,12 @@ fold_stmt_1 (gimple_stmt_iterator *gsi, bool inplace)\n       {\n \tunsigned old_num_ops = gimple_num_ops (stmt);\n \ttree new_rhs = fold_gimple_assign (gsi);\n-\tif (new_rhs != NULL_TREE\n+\ttree lhs = gimple_assign_lhs (stmt);\n+\tif (new_rhs\n+\t    && !useless_type_conversion_p (TREE_TYPE (lhs),\n+\t\t\t\t\t   TREE_TYPE (new_rhs)))\n+\t  new_rhs = fold_convert (TREE_TYPE (lhs), new_rhs);\n+\tif (new_rhs\n \t    && (!inplace\n \t\t|| get_gimple_rhs_num_ops (TREE_CODE (new_rhs)) < old_num_ops))\n \t  {"}]}