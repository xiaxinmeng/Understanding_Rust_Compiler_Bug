{"sha": "8e6a59feebbfbedc620983ca9a568efebf016a48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU2YTU5ZmVlYmJmYmVkYzYyMDk4M2NhOWE1NjhlZmViZjAxNmE0OA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1999-01-07T11:29:38Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-01-07T11:29:38Z"}, "message": "calls.c (store_unaligned_arguments_into_pseudos): Use xmalloc to allocate memory that will live beyond this function.\n\n        * calls.c (store_unaligned_arguments_into_pseudos): Use xmalloc to\n        allocate memory that will live beyond this function.\n        (expand_call): Free it here.\n\nFrom-SVN: r24561", "tree": {"sha": "7c5f130f91ec25adc7b64b5a91dd19084554401c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c5f130f91ec25adc7b64b5a91dd19084554401c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e6a59feebbfbedc620983ca9a568efebf016a48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e6a59feebbfbedc620983ca9a568efebf016a48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e6a59feebbfbedc620983ca9a568efebf016a48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e6a59feebbfbedc620983ca9a568efebf016a48/comments", "author": null, "committer": null, "parents": [{"sha": "5e1db167b77b3f96157c18fc3c879c28b329f911", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e1db167b77b3f96157c18fc3c879c28b329f911", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e1db167b77b3f96157c18fc3c879c28b329f911"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "a71ab6e5595bf98789209a609e012e0d4d74ebb0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6a59feebbfbedc620983ca9a568efebf016a48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6a59feebbfbedc620983ca9a568efebf016a48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e6a59feebbfbedc620983ca9a568efebf016a48", "patch": "@@ -1,3 +1,9 @@\n+Thu Jan  7 11:26:17 1999  Mark Mitchell  <mark@markmitchell.com>\n+\n+\t* calls.c (store_unaligned_arguments_into_pseudos): Use xmalloc to\n+\tallocate memory that will live beyond this function.\n+\t(expand_call): Free it here.\n+\n Thu Jan  7 03:08:17 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* sparc.h (PREFERRED_RELOAD_CLASS): Select GENERAL_REGS for "}, {"sha": "b41158e1356c1a53de9764e68e9867ca328958c6", "filename": "gcc/calls.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6a59feebbfbedc620983ca9a568efebf016a48/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6a59feebbfbedc620983ca9a568efebf016a48/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=8e6a59feebbfbedc620983ca9a568efebf016a48", "patch": "@@ -753,7 +753,12 @@ restore_fixed_argument_area (save_area, argblock, high_to_save, low_to_save)\n /* If any elements in ARGS refer to parameters that are to be passed in\n    registers, but not in memory, and whose alignment does not permit a\n    direct copy into registers.  Copy the values into a group of pseudos\n-   which we will later copy into the appropriate hard registers.  */\n+   which we will later copy into the appropriate hard registers. \n+\n+   Pseudos for each unaligned argument will be stored into the array\n+   args[argnum].aligned_regs.  The caller is responsible for deallocating\n+   the aligned_regs array if it is nonzero.  */\n+\n static void\n store_unaligned_arguments_into_pseudos (args, num_actuals)\n      struct arg_data *args;\n@@ -774,8 +779,8 @@ store_unaligned_arguments_into_pseudos (args, num_actuals)\n \t  = args[i].partial ? args[i].partial\n \t    : (bytes + (UNITS_PER_WORD - 1)) / UNITS_PER_WORD;\n \n-\targs[i].aligned_regs = (rtx *) alloca (sizeof (rtx)\n-\t\t\t\t\t       * args[i].n_aligned_regs);\n+\targs[i].aligned_regs = (rtx *) xmalloc (sizeof (rtx)\n+\t\t\t\t\t\t* args[i].n_aligned_regs);\n \n \t/* Structures smaller than a word are aligned to the least\n \t   significant byte (to the right).  On a BYTES_BIG_ENDIAN machine,\n@@ -2298,6 +2303,11 @@ expand_call (exp, target, ignore)\n \n   pop_temp_slots ();\n \n+  /* Free up storage we no longer need.  */\n+  for (i = 0; i < num_actuals; ++i)\n+    if (args[i].aligned_regs)\n+      free (args[i].aligned_regs);\n+\n   return target;\n }\n \f"}]}