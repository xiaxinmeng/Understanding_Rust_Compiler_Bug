{"sha": "b6b9af2f11afd64410c07dcdfc8e760e7c56ded7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZiOWFmMmYxMWFmZDY0NDEwYzA3ZGNkZmM4ZTc2MGU3YzU2ZGVkNw==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2013-04-11T14:22:54Z"}, "committer": {"name": "Julian Brown", "email": "jules@gcc.gnu.org", "date": "2013-04-11T14:22:54Z"}, "message": "libgcc/\n\t* config/arm/linux-atomic.c (SUBWORD_SYNC_OP, SUBWORD_VAL_CAS)\n\t(SUBWORD_TEST_AND_SET): Use signed char/short types instead of\n\tunsigned char/unsigned short.\n\t(__sync_val_compare_and_swap_{1,2}): Handle signed argument.\n\nFrom-SVN: r197806", "tree": {"sha": "1972f5690519e6c9a85128a35af43374510145f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1972f5690519e6c9a85128a35af43374510145f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6b9af2f11afd64410c07dcdfc8e760e7c56ded7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6b9af2f11afd64410c07dcdfc8e760e7c56ded7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6b9af2f11afd64410c07dcdfc8e760e7c56ded7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6b9af2f11afd64410c07dcdfc8e760e7c56ded7/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1d42c1ec472cf4d6604d1848cf6220d158ca0bdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d42c1ec472cf4d6604d1848cf6220d158ca0bdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d42c1ec472cf4d6604d1848cf6220d158ca0bdf"}], "stats": {"total": 71, "additions": 39, "deletions": 32}, "files": [{"sha": "ef4c8ce95f11fb0993fe29d4ab12319b8b20d91d", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b9af2f11afd64410c07dcdfc8e760e7c56ded7/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b9af2f11afd64410c07dcdfc8e760e7c56ded7/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=b6b9af2f11afd64410c07dcdfc8e760e7c56ded7", "patch": "@@ -1,3 +1,10 @@\n+2013-04-10  Julian Brown  <julian@codesourcery.com>\n+\n+\t* config/arm/linux-atomic.c (SUBWORD_SYNC_OP, SUBWORD_VAL_CAS)\n+\t(SUBWORD_TEST_AND_SET): Use signed char/short types instead of\n+\tunsigned char/unsigned short.\n+\t(__sync_val_compare_and_swap_{1,2}): Handle signed argument.\n+\n 2013-04-06  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR other/55274"}, {"sha": "d601c4ebf2a67931f4f2892048da5b49b255baa2", "filename": "libgcc/config/arm/linux-atomic.c", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b9af2f11afd64410c07dcdfc8e760e7c56ded7/libgcc%2Fconfig%2Farm%2Flinux-atomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b9af2f11afd64410c07dcdfc8e760e7c56ded7/libgcc%2Fconfig%2Farm%2Flinux-atomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Flinux-atomic.c?ref=b6b9af2f11afd64410c07dcdfc8e760e7c56ded7", "patch": "@@ -97,19 +97,19 @@ FETCH_AND_OP_WORD (nand, ~, &)\n     return (RETURN & mask) >> shift;\t\t\t\t\t\\\n   }\n \n-SUBWORD_SYNC_OP (add,   , +, unsigned short, 2, oldval)\n-SUBWORD_SYNC_OP (sub,   , -, unsigned short, 2, oldval)\n-SUBWORD_SYNC_OP (or,    , |, unsigned short, 2, oldval)\n-SUBWORD_SYNC_OP (and,   , &, unsigned short, 2, oldval)\n-SUBWORD_SYNC_OP (xor,   , ^, unsigned short, 2, oldval)\n-SUBWORD_SYNC_OP (nand, ~, &, unsigned short, 2, oldval)\n-\n-SUBWORD_SYNC_OP (add,   , +, unsigned char, 1, oldval)\n-SUBWORD_SYNC_OP (sub,   , -, unsigned char, 1, oldval)\n-SUBWORD_SYNC_OP (or,    , |, unsigned char, 1, oldval)\n-SUBWORD_SYNC_OP (and,   , &, unsigned char, 1, oldval)\n-SUBWORD_SYNC_OP (xor,   , ^, unsigned char, 1, oldval)\n-SUBWORD_SYNC_OP (nand, ~, &, unsigned char, 1, oldval)\n+SUBWORD_SYNC_OP (add,   , +, short, 2, oldval)\n+SUBWORD_SYNC_OP (sub,   , -, short, 2, oldval)\n+SUBWORD_SYNC_OP (or,    , |, short, 2, oldval)\n+SUBWORD_SYNC_OP (and,   , &, short, 2, oldval)\n+SUBWORD_SYNC_OP (xor,   , ^, short, 2, oldval)\n+SUBWORD_SYNC_OP (nand, ~, &, short, 2, oldval)\n+\n+SUBWORD_SYNC_OP (add,   , +, signed char, 1, oldval)\n+SUBWORD_SYNC_OP (sub,   , -, signed char, 1, oldval)\n+SUBWORD_SYNC_OP (or,    , |, signed char, 1, oldval)\n+SUBWORD_SYNC_OP (and,   , &, signed char, 1, oldval)\n+SUBWORD_SYNC_OP (xor,   , ^, signed char, 1, oldval)\n+SUBWORD_SYNC_OP (nand, ~, &, signed char, 1, oldval)\n \n #define OP_AND_FETCH_WORD(OP, PFX_OP, INF_OP)\t\t\t\t\\\n   int HIDDEN\t\t\t\t\t\t\t\t\\\n@@ -132,19 +132,19 @@ OP_AND_FETCH_WORD (and,   , &)\n OP_AND_FETCH_WORD (xor,   , ^)\n OP_AND_FETCH_WORD (nand, ~, &)\n \n-SUBWORD_SYNC_OP (add,   , +, unsigned short, 2, newval)\n-SUBWORD_SYNC_OP (sub,   , -, unsigned short, 2, newval)\n-SUBWORD_SYNC_OP (or,    , |, unsigned short, 2, newval)\n-SUBWORD_SYNC_OP (and,   , &, unsigned short, 2, newval)\n-SUBWORD_SYNC_OP (xor,   , ^, unsigned short, 2, newval)\n-SUBWORD_SYNC_OP (nand, ~, &, unsigned short, 2, newval)\n+SUBWORD_SYNC_OP (add,   , +, short, 2, newval)\n+SUBWORD_SYNC_OP (sub,   , -, short, 2, newval)\n+SUBWORD_SYNC_OP (or,    , |, short, 2, newval)\n+SUBWORD_SYNC_OP (and,   , &, short, 2, newval)\n+SUBWORD_SYNC_OP (xor,   , ^, short, 2, newval)\n+SUBWORD_SYNC_OP (nand, ~, &, short, 2, newval)\n \n-SUBWORD_SYNC_OP (add,   , +, unsigned char, 1, newval)\n-SUBWORD_SYNC_OP (sub,   , -, unsigned char, 1, newval)\n-SUBWORD_SYNC_OP (or,    , |, unsigned char, 1, newval)\n-SUBWORD_SYNC_OP (and,   , &, unsigned char, 1, newval)\n-SUBWORD_SYNC_OP (xor,   , ^, unsigned char, 1, newval)\n-SUBWORD_SYNC_OP (nand, ~, &, unsigned char, 1, newval)\n+SUBWORD_SYNC_OP (add,   , +, signed char, 1, newval)\n+SUBWORD_SYNC_OP (sub,   , -, signed char, 1, newval)\n+SUBWORD_SYNC_OP (or,    , |, signed char, 1, newval)\n+SUBWORD_SYNC_OP (and,   , &, signed char, 1, newval)\n+SUBWORD_SYNC_OP (xor,   , ^, signed char, 1, newval)\n+SUBWORD_SYNC_OP (nand, ~, &, signed char, 1, newval)\n \n int HIDDEN\n __sync_val_compare_and_swap_4 (int *ptr, int oldval, int newval)\n@@ -181,7 +181,7 @@ __sync_val_compare_and_swap_4 (int *ptr, int oldval, int newval)\n \tactual_oldval = *wordptr;\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \tif (__builtin_expect (((actual_oldval & mask) >> shift) !=      \\\n-                              (unsigned int) oldval, 0))                \\\n+                              ((unsigned int) oldval & MASK_##WIDTH), 0)) \\\n           return (actual_oldval & mask) >> shift;\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \tactual_newval = (actual_oldval & ~mask)\t\t\t\t\\\n@@ -195,8 +195,8 @@ __sync_val_compare_and_swap_4 (int *ptr, int oldval, int newval)\n       }\t\t\t\t\t\t\t\t\t\\\n   }\n \n-SUBWORD_VAL_CAS (unsigned short, 2)\n-SUBWORD_VAL_CAS (unsigned char,  1)\n+SUBWORD_VAL_CAS (short,       2)\n+SUBWORD_VAL_CAS (signed char, 1)\n \n typedef unsigned char bool;\n \n@@ -217,8 +217,8 @@ __sync_bool_compare_and_swap_4 (int *ptr, int oldval, int newval)\n     return (oldval == actual_oldval);\t\t\t\t\t\\\n   }\n \n-SUBWORD_BOOL_CAS (unsigned short, 2)\n-SUBWORD_BOOL_CAS (unsigned char,  1)\n+SUBWORD_BOOL_CAS (short,       2)\n+SUBWORD_BOOL_CAS (signed char, 1)\n \n void HIDDEN\n __sync_synchronize (void)\n@@ -260,8 +260,8 @@ __sync_lock_test_and_set_4 (int *ptr, int val)\n     return (oldval & mask) >> shift;\t\t\t\t\t\\\n   }\n \n-SUBWORD_TEST_AND_SET (unsigned short, 2)\n-SUBWORD_TEST_AND_SET (unsigned char,  1)\n+SUBWORD_TEST_AND_SET (short,       2)\n+SUBWORD_TEST_AND_SET (signed char, 1)\n \n #define SYNC_LOCK_RELEASE(TYPE, WIDTH)\t\t\t\t\t\\\n   void HIDDEN\t\t\t\t\t\t\t\t\\"}]}