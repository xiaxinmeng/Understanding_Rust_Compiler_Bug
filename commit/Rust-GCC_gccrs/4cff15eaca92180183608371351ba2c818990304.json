{"sha": "4cff15eaca92180183608371351ba2c818990304", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNmZjE1ZWFjYTkyMTgwMTgzNjA4MzcxMzUxYmEyYzgxODk5MDMwNA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-02-05T01:46:07Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-02-05T01:46:07Z"}, "message": "compiler: give error for non-int arguments to make\n    \n    This implements a requirement of the language spec.\n    \n    While we're here fix the value returned by the type method of a\n    builtin call expression to make, although this doesn't seem to make\n    any difference anywhere since we lower this to a runtime call before\n    the determine_types pass anyhow.\n    \n    There is already a test for this error in the master repository:\n    test/fixedbugs/issue16949.go. It just hasn't made it into the gccgo\n    testsuite yet.\n    \n    Fixes golang/go#16949\n    \n    Reviewed-on: https://go-review.googlesource.com/91697\n\nFrom-SVN: r257376", "tree": {"sha": "21ff74b0c1fdd336b5e4670a87171eb39befb6c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21ff74b0c1fdd336b5e4670a87171eb39befb6c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cff15eaca92180183608371351ba2c818990304", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cff15eaca92180183608371351ba2c818990304", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cff15eaca92180183608371351ba2c818990304", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cff15eaca92180183608371351ba2c818990304/comments", "author": null, "committer": null, "parents": [{"sha": "91cb7f7804da1e4974e1e3589822e10910eeae20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91cb7f7804da1e4974e1e3589822e10910eeae20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91cb7f7804da1e4974e1e3589822e10910eeae20"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "edfec3911d9a5cde6f272905efde3f230261e6e9", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cff15eaca92180183608371351ba2c818990304/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cff15eaca92180183608371351ba2c818990304/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=4cff15eaca92180183608371351ba2c818990304", "patch": "@@ -1,4 +1,4 @@\n-0c8c4fca4b52bc2323561a432436af5343e0f7b4\n+312af623f48633989e9eb6e559ede84a23998ece\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "715f6255d48283d9d3634ca1334fc3cf9f171ac2", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cff15eaca92180183608371351ba2c818990304/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cff15eaca92180183608371351ba2c818990304/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=4cff15eaca92180183608371351ba2c818990304", "patch": "@@ -7497,6 +7497,11 @@ Builtin_call_expression::lower_make(Statement_inserter* inserter)\n     {\n       len_arg = *parg;\n       len_arg->determine_type(&int_context);\n+      if (len_arg->type()->integer_type() == NULL)\n+\t{\n+\t  go_error_at(len_arg->location(), \"non-integer len argument in make\");\n+\t  return Expression::make_error(this->location());\n+\t}\n       if (!this->check_int_value(len_arg, true, &len_small))\n \treturn Expression::make_error(this->location());\n       ++parg;\n@@ -7512,6 +7517,11 @@ Builtin_call_expression::lower_make(Statement_inserter* inserter)\n     {\n       cap_arg = *parg;\n       cap_arg->determine_type(&int_context);\n+      if (cap_arg->type()->integer_type() == NULL)\n+\t{\n+\t  go_error_at(cap_arg->location(), \"non-integer cap argument in make\");\n+\t  return Expression::make_error(this->location());\n+\t}\n       if (!this->check_int_value(cap_arg, false, &cap_small))\n \treturn Expression::make_error(this->location());\n \n@@ -8306,14 +8316,21 @@ Builtin_call_expression::do_type()\n       return Type::make_error_type();\n \n     case BUILTIN_NEW:\n-    case BUILTIN_MAKE:\n       {\n \tconst Expression_list* args = this->args();\n \tif (args == NULL || args->empty())\n \t  return Type::make_error_type();\n \treturn Type::make_pointer_type(args->front()->type());\n       }\n \n+    case BUILTIN_MAKE:\n+      {\n+\tconst Expression_list* args = this->args();\n+\tif (args == NULL || args->empty())\n+\t  return Type::make_error_type();\n+\treturn args->front()->type();\n+      }\n+\n     case BUILTIN_CAP:\n     case BUILTIN_COPY:\n     case BUILTIN_LEN:"}]}