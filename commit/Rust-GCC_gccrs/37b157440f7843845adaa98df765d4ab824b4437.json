{"sha": "37b157440f7843845adaa98df765d4ab824b4437", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdiMTU3NDQwZjc4NDM4NDVhZGFhOThkZjc2NWQ0YWI4MjRiNDQzNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-01-10T19:59:23Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-01-10T19:59:23Z"}, "message": "alpha.c (alpha_free_machine_status): New.\n\n        * config/alpha/alpha.c (alpha_free_machine_status): New.\n        (override_options): Install it.\n        (alpha_mark_machine_status): Verify machine non-null.\n        * config/i386/i386.c (ix86_free_machine_status): New.\n        (override_options): Install it.\n        (ix86_init_machine_status): Use xcalloc.\n        (ix86_mark_machine_status): Verify machine non-null.\n        * config/ia64/ia64.c (ia64_free_machine_status): New.\n        (ia64_override_options): Install it.\n        (ia64_mark_machine_status): Verify machine non-null.\n\nFrom-SVN: r38877", "tree": {"sha": "866764cee5bb07c4742008d17150682ad4f8983a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/866764cee5bb07c4742008d17150682ad4f8983a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37b157440f7843845adaa98df765d4ab824b4437", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37b157440f7843845adaa98df765d4ab824b4437", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37b157440f7843845adaa98df765d4ab824b4437", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37b157440f7843845adaa98df765d4ab824b4437/comments", "author": null, "committer": null, "parents": [{"sha": "31d95fc6e6a7b9a020e6cc4ab2aa737a515e41b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31d95fc6e6a7b9a020e6cc4ab2aa737a515e41b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31d95fc6e6a7b9a020e6cc4ab2aa737a515e41b1"}], "stats": {"total": 78, "additions": 63, "deletions": 15}, "files": [{"sha": "049a3f72b802418fcae3ab27a92193bb3b839a7e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b157440f7843845adaa98df765d4ab824b4437/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b157440f7843845adaa98df765d4ab824b4437/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37b157440f7843845adaa98df765d4ab824b4437", "patch": "@@ -1,3 +1,16 @@\n+2001-01-10  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.c (alpha_free_machine_status): New.\n+\t(override_options): Install it.\n+\t(alpha_mark_machine_status): Verify machine non-null.\n+\t* config/i386/i386.c (ix86_free_machine_status): New.\n+\t(override_options): Install it.\n+\t(ix86_init_machine_status): Use xcalloc.\n+\t(ix86_mark_machine_status): Verify machine non-null.\n+\t* config/ia64/ia64.c (ia64_free_machine_status): New.\n+\t(ia64_override_options): Install it.\n+\t(ia64_mark_machine_status): Verify machine non-null.\n+\n Wed Jan 10 11:34:39 2001  Jeffrey A Law  (law@cygnus.com)\n \n \t* function.c (instantiate_virtual_regs): Instantiate virtual"}, {"sha": "a4fe8883b17e6c278f9fe81a470fa80f34cfeb49", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b157440f7843845adaa98df765d4ab824b4437/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b157440f7843845adaa98df765d4ab824b4437/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=37b157440f7843845adaa98df765d4ab824b4437", "patch": "@@ -119,6 +119,8 @@ static void alpha_init_machine_status\n   PARAMS ((struct function *p));\n static void alpha_mark_machine_status\n   PARAMS ((struct function *p));\n+static void alpha_free_machine_status\n+  PARAMS ((struct function *p));\n static int alpha_ra_ever_killed\n   PARAMS ((void));\n static rtx set_frame_related_p\n@@ -347,6 +349,7 @@ override_options ()\n   /* Set up function hooks.  */\n   init_machine_status = alpha_init_machine_status;\n   mark_machine_status = alpha_mark_machine_status;\n+  free_machine_status = alpha_free_machine_status;\n }\n \f\n /* Returns 1 if VALUE is a mask that contains full bytes of zero or ones.  */\n@@ -3660,8 +3663,19 @@ alpha_mark_machine_status (p)\n {\n   struct machine_function *machine = p->machine;\n \n-  ggc_mark_rtx (machine->eh_epilogue_sp_ofs);\n-  ggc_mark_rtx (machine->ra_rtx);\n+  if (machine)\n+    {\n+      ggc_mark_rtx (machine->eh_epilogue_sp_ofs);\n+      ggc_mark_rtx (machine->ra_rtx);\n+    }\n+}\n+\n+static void\n+alpha_free_machine_status (p)\n+     struct function *p;\n+{\n+  free (p->machine);\n+  p->machine = NULL;\n }\n \n /* Start the ball rolling with RETURN_ADDR_RTX.  */"}, {"sha": "217426bcfc9d88c5656b60c02e9aeb89cd5b5125", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b157440f7843845adaa98df765d4ab824b4437/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b157440f7843845adaa98df765d4ab824b4437/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=37b157440f7843845adaa98df765d4ab824b4437", "patch": "@@ -404,6 +404,7 @@ static rtx * ix86_pent_find_pair PARAMS ((rtx *, rtx *, enum attr_pent_pair,\n \t\t\t\t\t rtx));\n static void ix86_init_machine_status PARAMS ((struct function *));\n static void ix86_mark_machine_status PARAMS ((struct function *));\n+static void ix86_free_machine_status PARAMS ((struct function *));\n static int ix86_split_to_parts PARAMS ((rtx, rtx *, enum machine_mode));\n static int ix86_safe_length_prefix PARAMS ((rtx));\n static HOST_WIDE_INT ix86_compute_frame_size PARAMS((HOST_WIDE_INT,\n@@ -536,6 +537,7 @@ override_options ()\n   /* Arrange to set up i386_stack_locals for all functions.  */\n   init_machine_status = ix86_init_machine_status;\n   mark_machine_status = ix86_mark_machine_status;\n+  free_machine_status = ix86_free_machine_status;\n \n   /* Validate registers in register allocation order.  */\n   if (ix86_reg_alloc_order)\n@@ -6336,29 +6338,34 @@ static void\n ix86_init_machine_status (p)\n      struct function *p;\n {\n-  enum machine_mode mode;\n-  int n;\n-  p->machine\n-    = (struct machine_function *) xmalloc (sizeof (struct machine_function));\n-\n-  for (mode = VOIDmode; (int) mode < (int) MAX_MACHINE_MODE;\n-       mode = (enum machine_mode) ((int) mode + 1))\n-    for (n = 0; n < MAX_386_STACK_LOCALS; n++)\n-      ix86_stack_locals[(int) mode][n] = NULL_RTX;\n+  p->machine = (struct machine_function *)\n+    xcalloc (1, sizeof (struct machine_function));\n }\n \n /* Mark machine specific bits of P for GC.  */\n static void\n ix86_mark_machine_status (p)\n      struct function *p;\n {\n+  struct machine_function *machine = p->machine;\n   enum machine_mode mode;\n   int n;\n \n+  if (! machine)\n+    return;\n+\n   for (mode = VOIDmode; (int) mode < (int) MAX_MACHINE_MODE;\n        mode = (enum machine_mode) ((int) mode + 1))\n     for (n = 0; n < MAX_386_STACK_LOCALS; n++)\n-      ggc_mark_rtx (p->machine->stack_locals[(int) mode][n]);\n+      ggc_mark_rtx (machine->stack_locals[(int) mode][n]);\n+}\n+\n+static void\n+ix86_free_machine_status (p)\n+     struct function *p;\n+{\n+  free (p->machine);\n+  p->machine = NULL;\n }\n \n /* Return a MEM corresponding to a stack slot with mode MODE."}, {"sha": "14948b0dab159e88c4e08e953c26339497ff4a56", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b157440f7843845adaa98df765d4ab824b4437/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b157440f7843845adaa98df765d4ab824b4437/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=37b157440f7843845adaa98df765d4ab824b4437", "patch": "@@ -115,6 +115,7 @@ static void fix_range PARAMS ((const char *));\n static void ia64_add_gc_roots PARAMS ((void));\n static void ia64_init_machine_status PARAMS ((struct function *));\n static void ia64_mark_machine_status PARAMS ((struct function *));\n+static void ia64_free_machine_status PARAMS ((struct function *));\n static void emit_insn_group_barriers PARAMS ((FILE *, rtx));\n static void emit_all_insn_group_barriers PARAMS ((FILE *, rtx));\n static void emit_predicate_relation_info PARAMS ((void));\n@@ -3663,11 +3664,23 @@ static void\n ia64_mark_machine_status (p)\n      struct function *p;\n {\n-  ggc_mark_rtx (p->machine->ia64_eh_epilogue_sp);\n-  ggc_mark_rtx (p->machine->ia64_eh_epilogue_bsp);\n-  ggc_mark_rtx (p->machine->ia64_gp_save);\n+  struct machine_function *machine = p->machine;\n+\n+  if (machine)\n+    {\n+      ggc_mark_rtx (machine->ia64_eh_epilogue_sp);\n+      ggc_mark_rtx (machine->ia64_eh_epilogue_bsp);\n+      ggc_mark_rtx (machine->ia64_gp_save);\n+    }\n }\n \n+static void\n+ia64_free_machine_status (p)\n+     struct function *p;\n+{\n+  free (p->machine);\n+  p->machine = NULL;\n+}\n \n /* Handle TARGET_OPTIONS switches.  */\n \n@@ -3690,6 +3703,7 @@ ia64_override_options ()\n \n   init_machine_status = ia64_init_machine_status;\n   mark_machine_status = ia64_mark_machine_status;\n+  free_machine_status = ia64_free_machine_status;\n \n   ia64_add_gc_roots ();\n }"}]}