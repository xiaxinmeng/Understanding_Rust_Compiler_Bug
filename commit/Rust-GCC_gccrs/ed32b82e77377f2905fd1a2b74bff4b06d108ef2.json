{"sha": "ed32b82e77377f2905fd1a2b74bff4b06d108ef2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQzMmI4MmU3NzM3N2YyOTA1ZmQxYTJiNzRiZmY0YjA2ZDEwOGVmMg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2011-09-02T07:19:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-02T07:19:46Z"}, "message": "sem_attr.adb: (Analyze_Attribute, case 'Range): when expanding X'range (N) into X'First (N) ..\n\n2011-09-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_attr.adb: (Analyze_Attribute, case 'Range): when expanding\n\tX'range (N) into X'First (N) ..  X'Last (N), do not share the\n\tdimension indicator N, if present. Even though it is a static\n\tconstant, its source location may be modified when printing\n\texpanded code under -gnatDL, and node sharing will lead to chaos\n\tin Sprint on large files, by generating a sloc value that does\n\tnot correspond to any source file.\n\nFrom-SVN: r178437", "tree": {"sha": "246908214390338ab86c11ccf753d0d7ed9c7292", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/246908214390338ab86c11ccf753d0d7ed9c7292"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed32b82e77377f2905fd1a2b74bff4b06d108ef2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed32b82e77377f2905fd1a2b74bff4b06d108ef2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed32b82e77377f2905fd1a2b74bff4b06d108ef2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed32b82e77377f2905fd1a2b74bff4b06d108ef2/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f7bb41af65aa53933814ec82474497876d396b33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7bb41af65aa53933814ec82474497876d396b33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7bb41af65aa53933814ec82474497876d396b33"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "885cbad07ce9057805ada410017d5b9130a6bab0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed32b82e77377f2905fd1a2b74bff4b06d108ef2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed32b82e77377f2905fd1a2b74bff4b06d108ef2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ed32b82e77377f2905fd1a2b74bff4b06d108ef2", "patch": "@@ -1,3 +1,13 @@\n+2011-09-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb: (Analyze_Attribute, case 'Range): when expanding\n+\tX'range (N) into X'First (N) ..  X'Last (N), do not share the\n+\tdimension indicator N, if present. Even though it is a static\n+\tconstant, its source location may be modified when printing\n+\texpanded code under -gnatDL, and node sharing will lead to chaos\n+\tin Sprint on large files, by generating a sloc value that does\n+\tnot correspond to any source file.\n+\n 2011-09-02  Bob Duff  <duff@adacore.com>\n \n \t* einfo.adb: (Has_Xref_Entry): Do not call"}, {"sha": "69963e44501771b95ed724699a0d8b7a200f80b4", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed32b82e77377f2905fd1a2b74bff4b06d108ef2/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed32b82e77377f2905fd1a2b74bff4b06d108ef2/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=ed32b82e77377f2905fd1a2b74bff4b06d108ef2", "patch": "@@ -8871,6 +8871,7 @@ package body Sem_Attr is\n             declare\n                LB   : Node_Id;\n                HB   : Node_Id;\n+               Dims : List_Id;\n \n             begin\n                if not Is_Entity_Name (P)\n@@ -8879,18 +8880,30 @@ package body Sem_Attr is\n                   Resolve (P);\n                end if;\n \n+               Dims := Expressions (N);\n+\n                HB :=\n                  Make_Attribute_Reference (Loc,\n                    Prefix         =>\n                      Duplicate_Subexpr (P, Name_Req => True),\n                    Attribute_Name => Name_Last,\n-                   Expressions    => Expressions (N));\n+                   Expressions    => Dims);\n \n                LB :=\n                  Make_Attribute_Reference (Loc,\n-                   Prefix         => P,\n+                   Prefix          => P,\n                    Attribute_Name => Name_First,\n-                   Expressions    => Expressions (N));\n+                   Expressions => (Dims));\n+\n+               --  Do not share the dimension indicator, if present. Even\n+               --  though it is a static constant, its source location\n+               --  may be modified when printing expanded code and node\n+               --  sharing will lead to chaos in Sprint.\n+\n+               if Present (Dims) then\n+                  Set_Expressions (LB,\n+                    New_List (New_Copy_Tree (First (Dims))));\n+               end if;\n \n                --  If the original was marked as Must_Not_Freeze (see code\n                --  in Sem_Ch3.Make_Index), then make sure the rewriting"}]}