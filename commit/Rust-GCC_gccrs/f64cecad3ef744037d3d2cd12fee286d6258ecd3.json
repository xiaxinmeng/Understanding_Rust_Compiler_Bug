{"sha": "f64cecad3ef744037d3d2cd12fee286d6258ecd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY0Y2VjYWQzZWY3NDQwMzdkM2QyY2QxMmZlZTI4NmQ2MjU4ZWNkMw==", "commit": {"author": {"name": "John F. Carr", "email": "jfc@mit.edu", "date": "1998-02-11T00:25:43Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-02-11T00:25:43Z"}, "message": "i386.c, [...]: Change gen_rtx (X, ...) to gen_rtx_X (...).\n\n        * i386.c, i386.h, i386.md: Change gen_rtx (X, ...) to gen_rtx_X (...).\n        Use GEN_INT instead of gen_rtx (CONST_INT). Make printf arguments\n        and format string match.\n\nFrom-SVN: r17840", "tree": {"sha": "bc127044d24a49a0495f5d74b39a08301aa88478", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc127044d24a49a0495f5d74b39a08301aa88478"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f64cecad3ef744037d3d2cd12fee286d6258ecd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f64cecad3ef744037d3d2cd12fee286d6258ecd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f64cecad3ef744037d3d2cd12fee286d6258ecd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f64cecad3ef744037d3d2cd12fee286d6258ecd3/comments", "author": {"login": "VoxSciurorum", "id": 60116679, "node_id": "MDQ6VXNlcjYwMTE2Njc5", "avatar_url": "https://avatars.githubusercontent.com/u/60116679?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VoxSciurorum", "html_url": "https://github.com/VoxSciurorum", "followers_url": "https://api.github.com/users/VoxSciurorum/followers", "following_url": "https://api.github.com/users/VoxSciurorum/following{/other_user}", "gists_url": "https://api.github.com/users/VoxSciurorum/gists{/gist_id}", "starred_url": "https://api.github.com/users/VoxSciurorum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VoxSciurorum/subscriptions", "organizations_url": "https://api.github.com/users/VoxSciurorum/orgs", "repos_url": "https://api.github.com/users/VoxSciurorum/repos", "events_url": "https://api.github.com/users/VoxSciurorum/events{/privacy}", "received_events_url": "https://api.github.com/users/VoxSciurorum/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0200b5ed0ac6d2285f2d473c6cf4f069819f135b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0200b5ed0ac6d2285f2d473c6cf4f069819f135b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0200b5ed0ac6d2285f2d473c6cf4f069819f135b"}], "stats": {"total": 240, "additions": 119, "deletions": 121}, "files": [{"sha": "46aeee892d9a4ca93a9b110210d5f97413e8e745", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64cecad3ef744037d3d2cd12fee286d6258ecd3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64cecad3ef744037d3d2cd12fee286d6258ecd3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f64cecad3ef744037d3d2cd12fee286d6258ecd3", "patch": "@@ -1,3 +1,9 @@\n+Wed Feb 11 01:23:03 1998  John F. Carr  <jfc@mit.edu>\n+\n+\t* i386.c, i386.h, i386.md: Change gen_rtx (X, ...) to gen_rtx_X (...).\n+\tUse GEN_INT instead of gen_rtx (CONST_INT). Make printf arguments\n+\tand format string match.\n+\n Wed Feb 11 01:17:39 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* flow.c (life_analysis): Do not conside the stack pointer live at"}, {"sha": "71e6a5ae9eb14b6105970af666b185d51d6f9a3f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 42, "deletions": 41, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64cecad3ef744037d3d2cd12fee286d6258ecd3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64cecad3ef744037d3d2cd12fee286d6258ecd3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f64cecad3ef744037d3d2cd12fee286d6258ecd3", "patch": "@@ -100,7 +100,7 @@ struct processor_costs pentiumpro_cost = {\n \n struct processor_costs *ix86_cost = &pentium_cost;\n \n-#define AT_BP(mode) (gen_rtx (MEM, (mode), frame_pointer_rtx))\n+#define AT_BP(mode) (gen_rtx_MEM ((mode), frame_pointer_rtx))\n \n extern FILE *asm_out_file;\n extern char *strcat ();\n@@ -762,7 +762,7 @@ function_arg (cum, mode, type, named)\n     case HImode:\n     case QImode:\n       if (words <= cum->nregs)\n-\tret = gen_rtx (REG, mode, cum->regno);\n+\tret = gen_rtx_REG (mode, cum->regno);\n       break;\n     }\n \n@@ -832,11 +832,11 @@ output_op_from_reg (src, template)\n \n       if (size > 2 * UNITS_PER_WORD)\n \t{\n-\t  high = gen_rtx (REG, SImode, REGNO (src) + 2);\n+\t  high = gen_rtx_REG (SImode, REGNO (src) + 2);\n \t  output_asm_insn (AS1 (push%L0,%0), &high);\n \t}\n \n-      high = gen_rtx (REG, SImode, REGNO (src) + 1);\n+      high = gen_rtx_REG (SImode, REGNO (src) + 1);\n       output_asm_insn (AS1 (push%L0,%0), &high);\n     }\n \n@@ -906,7 +906,7 @@ output_to_reg (dest, dies, scratch_mem)\n \n   if (size > UNITS_PER_WORD)\n     {\n-      dest = gen_rtx (REG, SImode, REGNO (dest) + 1);\n+      dest = gen_rtx_REG (SImode, REGNO (dest) + 1);\n       if (! scratch_mem)\n \toutput_asm_insn (AS1 (pop%L0,%0), &dest);\n       else\n@@ -918,7 +918,7 @@ output_to_reg (dest, dies, scratch_mem)\n \n       if (size > 2 * UNITS_PER_WORD)\n \t{\n-\t  dest = gen_rtx (REG, SImode, REGNO (dest) + 1);\n+\t  dest = gen_rtx_REG (SImode, REGNO (dest) + 1);\n \t  if (! scratch_mem)\n \t    output_asm_insn (AS1 (pop%L0,%0), &dest);\n \t  else\n@@ -1072,11 +1072,11 @@ output_move_double (operands)\n       operands[0] = XEXP (XEXP (operands[0], 0), 0);\n       asm_add (-size, operands[0]);\n       if (GET_MODE (operands[1]) == XFmode)\n-        operands[0] = gen_rtx (MEM, XFmode, operands[0]);\n+        operands[0] = gen_rtx_MEM (XFmode, operands[0]);\n       else if (GET_MODE (operands[0]) == DFmode)\n-        operands[0] = gen_rtx (MEM, DFmode, operands[0]);\n+        operands[0] = gen_rtx_MEM (DFmode, operands[0]);\n       else\n-        operands[0] = gen_rtx (MEM, DImode, operands[0]);\n+        operands[0] = gen_rtx_MEM (DImode, operands[0]);\n       optype0 = OFFSOP;\n     }\n \n@@ -1086,11 +1086,11 @@ output_move_double (operands)\n       operands[1] = XEXP (XEXP (operands[1], 0), 0);\n       asm_add (-size, operands[1]);\n       if (GET_MODE (operands[1]) == XFmode)\n-        operands[1] = gen_rtx (MEM, XFmode, operands[1]);\n+        operands[1] = gen_rtx_MEM (XFmode, operands[1]);\n       else if (GET_MODE (operands[1]) == DFmode)\n-        operands[1] = gen_rtx (MEM, DFmode, operands[1]);\n+        operands[1] = gen_rtx_MEM (DFmode, operands[1]);\n       else\n-        operands[1] = gen_rtx (MEM, DImode, operands[1]);\n+        operands[1] = gen_rtx_MEM (DImode, operands[1]);\n       optype1 = OFFSOP;\n     }\n \n@@ -1116,8 +1116,8 @@ output_move_double (operands)\n     {\n       if (optype0 == REGOP)\n \t{\n-\t  middlehalf[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n-\t  latehalf[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 2);\n+\t  middlehalf[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n+\t  latehalf[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 2);\n \t}\n       else if (optype0 == OFFSOP)\n \t{\n@@ -1132,8 +1132,8 @@ output_move_double (operands)\n     \n       if (optype1 == REGOP)\n \t{\n-          middlehalf[1] = gen_rtx (REG, SImode, REGNO (operands[1]) + 1);\n-          latehalf[1] = gen_rtx (REG, SImode, REGNO (operands[1]) + 2);\n+          middlehalf[1] = gen_rtx_REG (SImode, REGNO (operands[1]) + 1);\n+          latehalf[1] = gen_rtx_REG (SImode, REGNO (operands[1]) + 2);\n \t}\n       else if (optype1 == OFFSOP)\n \t{\n@@ -1168,14 +1168,14 @@ output_move_double (operands)\n       /* Size is not 12. */\n \n       if (optype0 == REGOP)\n-\tlatehalf[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+\tlatehalf[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n       else if (optype0 == OFFSOP)\n \tlatehalf[0] = adj_offsettable_operand (operands[0], 4);\n       else\n \tlatehalf[0] = operands[0];\n \n       if (optype1 == REGOP)\n-\tlatehalf[1] = gen_rtx (REG, SImode, REGNO (operands[1]) + 1);\n+\tlatehalf[1] = gen_rtx_REG (SImode, REGNO (operands[1]) + 1);\n       else if (optype1 == OFFSOP)\n \tlatehalf[1] = adj_offsettable_operand (operands[1], 4);\n       else if (optype1 == CNSTOP)\n@@ -1213,13 +1213,13 @@ output_move_double (operands)\n \t  output_asm_insn (AS2 (lea%L0,%a1,%0), xops);\n \t  if (GET_MODE (operands[1]) == XFmode)\n \t    {\n-\t      operands[1] = gen_rtx (MEM, XFmode, latehalf[0]);\n+\t      operands[1] = gen_rtx_MEM (XFmode, latehalf[0]);\n \t      middlehalf[1] = adj_offsettable_operand (operands[1], size-8);\n \t      latehalf[1] = adj_offsettable_operand (operands[1], size-4);\n \t    }\n \t  else\n \t    {\n-\t      operands[1] = gen_rtx (MEM, DImode, latehalf[0]);\n+\t      operands[1] = gen_rtx_MEM (DImode, latehalf[0]);\n \t      latehalf[1] = adj_offsettable_operand (operands[1], size-4);\n \t    }\n \t}\n@@ -1946,7 +1946,7 @@ load_pic_register (do_rtl)\n \t  LABEL_NAME (pic_label_rtx) = pic_label_name;\n \t}\n \n-      xops[1] = gen_rtx (MEM, QImode,\n+      xops[1] = gen_rtx_MEM (QImode,\n \t\t\t gen_rtx (SYMBOL_REF, Pmode,\n \t\t\t\t  LABEL_NAME (pic_label_rtx)));\n \n@@ -2018,7 +2018,7 @@ ix86_prologue (do_rtl)\n       if (do_rtl)\n \t{\n \t  insn = emit_insn (gen_rtx (SET, VOIDmode,\n-\t\t\t\t     gen_rtx (MEM, SImode,\n+\t\t\t\t     gen_rtx_MEM (SImode,\n \t\t\t\t\t      gen_rtx (PRE_DEC, SImode,\n \t\t\t\t\t\t       stack_pointer_rtx)),\n \t\t\t\t     frame_pointer_rtx));\n@@ -2078,13 +2078,13 @@ ix86_prologue (do_rtl)\n     }\n   else \n     {\n-      xops[3] = gen_rtx (REG, SImode, 0);\n+      xops[3] = gen_rtx_REG (SImode, 0);\n       if (do_rtl)\n       emit_move_insn (xops[3], xops[2]);\n       else\n \toutput_asm_insn (AS2 (mov%L0,%2,%3), xops);\n \n-      xops[3] = gen_rtx (MEM, FUNCTION_MODE,\n+      xops[3] = gen_rtx_MEM (FUNCTION_MODE,\n \t\t\t gen_rtx (SYMBOL_REF, Pmode, \"_alloca\"));\n \n       if (do_rtl)\n@@ -2108,11 +2108,11 @@ ix86_prologue (do_rtl)\n     if ((regs_ever_live[regno] && ! call_used_regs[regno])\n \t|| (regno == PIC_OFFSET_TABLE_REGNUM && pic_reg_used))\n       {\n-\txops[0] = gen_rtx (REG, SImode, regno);\n+\txops[0] = gen_rtx_REG (SImode, regno);\n \tif (do_rtl)\n \t  {\n \t    insn = emit_insn (gen_rtx (SET, VOIDmode,\n-\t\t\t\t       gen_rtx (MEM, SImode,\n+\t\t\t\t       gen_rtx_MEM (SImode,\n \t\t\t\t\t\tgen_rtx (PRE_DEC, SImode,\n \t\t\t\t\t\t\t stack_pointer_rtx)),\n \t\t\t\t       xops[0]));\n@@ -2269,7 +2269,7 @@ ix86_epilogue (do_rtl)\n \tif ((regs_ever_live[regno] && ! call_used_regs[regno])\n \t    || (regno == PIC_OFFSET_TABLE_REGNUM && pic_reg_used))\n \t  {\n-\t    xops[0] = gen_rtx (REG, SImode, regno);\n+\t    xops[0] = gen_rtx_REG (SImode, regno);\n \n \t    if (do_rtl)\n \t      emit_insn (gen_pop (xops[0]));\n@@ -2283,7 +2283,7 @@ ix86_epilogue (do_rtl)\n       if ((regs_ever_live[regno] && ! call_used_regs[regno])\n \t  || (regno == PIC_OFFSET_TABLE_REGNUM && pic_reg_used))\n \t{\n-\t  xops[0] = gen_rtx (REG, SImode, regno);\n+\t  xops[0] = gen_rtx_REG (SImode, regno);\n \t  xops[1] = adj_offsettable_operand (AT_BP (Pmode), offset);\n \n \t  if (do_rtl)\n@@ -2353,7 +2353,7 @@ ix86_epilogue (do_rtl)\n       if (current_function_pops_args >= 32768)\n \t{\n \t  /* ??? Which register to use here? */\n-\t  xops[0] = gen_rtx (REG, SImode, 2);\n+\t  xops[0] = gen_rtx_REG (SImode, 2);\n \n \t  if (do_rtl)\n \t    {\n@@ -2678,7 +2678,7 @@ legitimize_pic_address (orig, reg)\n \t      || GET_CODE (addr) == LABEL_REF)\n \t    new = gen_rtx (PLUS, Pmode, pic_offset_table_rtx, orig);\n \t  else\n-\t    new = gen_rtx (MEM, Pmode,\n+\t    new = gen_rtx_MEM (Pmode,\n \t\t\t   gen_rtx (PLUS, Pmode, pic_offset_table_rtx, orig));\n \n \t  emit_move_insn (reg, new);\n@@ -2973,7 +2973,7 @@ output_pic_addr_const (file, x, code)\n       break;\n \n     case CONST_INT:\n-      fprintf (file, \"%d\", INTVAL (x));\n+      fprintf (file, HOST_WIDE_INT_PRINT_DEC, INTVAL (x));\n       break;\n \n     case CONST:\n@@ -2987,10 +2987,11 @@ output_pic_addr_const (file, x, code)\n \t{\n \t  /* We can use %d if the number is <32 bits and positive.  */\n \t  if (CONST_DOUBLE_HIGH (x) || CONST_DOUBLE_LOW (x) < 0)\n-\t    fprintf (file, \"0x%x%08x\",\n-\t\t     CONST_DOUBLE_HIGH (x), CONST_DOUBLE_LOW (x));\n+\t    fprintf (file, \"0x%lx%08lx\",\n+\t\t     (unsigned long) CONST_DOUBLE_HIGH (x),\n+\t\t     (unsigned long) CONST_DOUBLE_LOW (x));\n \t  else\n-\t    fprintf (file, \"%d\", CONST_DOUBLE_LOW (x));\n+\t    fprintf (file, HOST_WIDE_INT_PRINT_DEC, CONST_DOUBLE_LOW (x));\n \t}\n       else\n \t/* We can't handle floating point constants;\n@@ -3509,7 +3510,7 @@ print_operand_address (file, addr)\n       if (GET_CODE (addr) == CONST_INT\n \t  && INTVAL (addr) < 0x8000\n \t  && INTVAL (addr) >= -0x8000)\n-\tfprintf (file, \"%d\", INTVAL (addr));\n+\tfprintf (file, \"%d\", (int) INTVAL (addr));\n       else\n \t{\n \t  if (flag_pic)\n@@ -3671,8 +3672,8 @@ split_di (operands, num, lo_half, hi_half)\n     {\n       if (GET_CODE (operands[num]) == REG)\n \t{\n-\t  lo_half[num] = gen_rtx (REG, SImode, REGNO (operands[num]));\n-\t  hi_half[num] = gen_rtx (REG, SImode, REGNO (operands[num]) + 1);\n+\t  lo_half[num] = gen_rtx_REG (SImode, REGNO (operands[num]));\n+\t  hi_half[num] = gen_rtx_REG (SImode, REGNO (operands[num]) + 1);\n \t}\n       else if (CONSTANT_P (operands[num]))\n \tsplit_double (operands[num], &lo_half[num], &hi_half[num]);\n@@ -4040,7 +4041,7 @@ output_fp_cc0_set (insn)\n   rtx next;\n   enum rtx_code code;\n \n-  xops[0] = gen_rtx (REG, HImode, 0);\n+  xops[0] = gen_rtx_REG (HImode, 0);\n   output_asm_insn (AS1 (fnsts%W0,%0), xops);\n \n   if (! TARGET_IEEE_FP)\n@@ -4099,7 +4100,7 @@ output_fp_cc0_set (insn)\n   else\n     abort ();\n \n-  xops[0] = gen_rtx (REG, QImode, 0);\n+  xops[0] = gen_rtx_REG (QImode, 0);\n \n   switch (code)\n     {\n@@ -4920,7 +4921,7 @@ output_strlen_unroll (operands)\n \t  output_asm_insn (AS1 (je,%l8), xops);\n         }\n \n-      xops[13] = gen_rtx (MEM, QImode, xops[0]);\n+      xops[13] = gen_rtx_MEM (QImode, xops[0]);\n \n       /* Now compare the bytes; compare with the high part of a q-reg\n \t gives shorter code. */\n@@ -4976,7 +4977,7 @@ output_strlen_unroll (operands)\n        speed up.  */\n   ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\", CODE_LABEL_NUMBER (xops[8]));\n \n-  xops[13] = gen_rtx (MEM, SImode, xops[0]);\n+  xops[13] = gen_rtx_MEM (SImode, xops[0]);\n   output_asm_insn (AS2 (mov%L1,%13,%1), xops);\n \n   if (QI_REG_P (xops[1]))"}, {"sha": "94692a0120be21a86d16aeaba2139c37baabbd52", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 27, "deletions": 36, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64cecad3ef744037d3d2cd12fee286d6258ecd3/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64cecad3ef744037d3d2cd12fee286d6258ecd3/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=f64cecad3ef744037d3d2cd12fee286d6258ecd3", "patch": "@@ -951,14 +951,14 @@ enum reg_class\n    If the precise function being called is known, FUNC is its FUNCTION_DECL;\n    otherwise, FUNC is 0.  */\n #define FUNCTION_VALUE(VALTYPE, FUNC)  \\\n-   gen_rtx (REG, TYPE_MODE (VALTYPE), \\\n+   gen_rtx_REG (TYPE_MODE (VALTYPE), \\\n \t    VALUE_REGNO (TYPE_MODE (VALTYPE)))\n \n /* Define how to find the value returned by a library function\n    assuming the value has mode MODE.  */\n \n #define LIBCALL_VALUE(MODE) \\\n-  gen_rtx (REG, MODE, VALUE_REGNO (MODE))\n+  gen_rtx_REG (MODE, VALUE_REGNO (MODE))\n \n /* Define the size of the result block used for communication between\n    untyped_call and untyped_return.  The block contains a DImode value\n@@ -1151,9 +1151,9 @@ do\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     ASM_GENERATE_INTERNAL_LABEL (block_table, \"LPBX\", 0);\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-    xops[1] = gen_rtx (SYMBOL_REF, VOIDmode, block_table);\t\t\\\n+    xops[1] = gen_rtx_SYMBOL_REF (VOIDmode, block_table);\t\t\\\n     xops[5] = stack_pointer_rtx;\t\t\t\t\t\\\n-    xops[7] = gen_rtx (REG, Pmode, 0);\t/* eax */\t\t\t\\\n+    xops[7] = gen_rtx_REG (Pmode, 0);\t/* eax */\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     CONSTANT_POOL_ADDRESS_P (xops[1]) = TRUE;\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n@@ -1163,7 +1163,7 @@ do\t\t\t\t\t\t\t\t\t\\\n       case 2:\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n         xops[2] = GEN_INT ((BLOCK_OR_LABEL));\t\t\t\t\\\n-        xops[3] = gen_rtx (MEM, Pmode, gen_rtx (SYMBOL_REF, VOIDmode, \"__bb_init_trace_func\")); \\\n+        xops[3] = gen_rtx_MEM (Pmode, gen_rtx_SYMBOL_REF (VOIDmode, \"__bb_init_trace_func\")); \\\n         xops[6] = GEN_INT (8);\t\t\t\t\t\t\\\n     \t\t\t\t\t\t\t\t\t\\\n         output_asm_insn (AS1(push%L2,%2), xops);\t\t\t\\\n@@ -1185,9 +1185,9 @@ do\t\t\t\t\t\t\t\t\t\\\n         ASM_GENERATE_INTERNAL_LABEL (false_label, \"LPBZ\", num_func);\t\\\n     \t\t\t\t\t\t\t\t\t\\\n         xops[0] = const0_rtx;\t\t\t\t\t\t\\\n-        xops[2] = gen_rtx (MEM, Pmode, gen_rtx (SYMBOL_REF, VOIDmode, false_label)); \\\n-        xops[3] = gen_rtx (MEM, Pmode, gen_rtx (SYMBOL_REF, VOIDmode, \"__bb_init_func\")); \\\n-        xops[4] = gen_rtx (MEM, Pmode, xops[1]);\t\t\t\\\n+        xops[2] = gen_rtx_MEM (Pmode, gen_rtx_SYMBOL_REF (VOIDmode, false_label)); \\\n+        xops[3] = gen_rtx_MEM (Pmode, gen_rtx_SYMBOL_REF (VOIDmode, \"__bb_init_func\")); \\\n+        xops[4] = gen_rtx_MEM (Pmode, xops[1]);\t\t\t\\\n         xops[6] = GEN_INT (4);\t\t\t\t\t\t\\\n     \t\t\t\t\t\t\t\t\t\\\n         CONSTANT_POOL_ADDRESS_P (xops[2]) = TRUE;\t\t\t\\\n@@ -1293,21 +1293,21 @@ do\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n         ASM_GENERATE_INTERNAL_LABEL (block_table, \"LPBX\", 0);\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-\txops[1] = gen_rtx (SYMBOL_REF, VOIDmode, block_table);\t\t\\\n+\txops[1] = gen_rtx_SYMBOL_REF (VOIDmode, block_table);\t\t\\\n         xops[2] = GEN_INT ((BLOCKNO));\t\t\t\t\t\\\n-        xops[3] = gen_rtx (MEM, Pmode, gen_rtx (SYMBOL_REF, VOIDmode, \"__bb_trace_func\")); \\\n-        xops[4] = gen_rtx (SYMBOL_REF, VOIDmode, \"__bb\");\t\t\\\n+        xops[3] = gen_rtx_MEM (Pmode, gen_rtx_SYMBOL_REF (VOIDmode, \"__bb_trace_func\")); \\\n+        xops[4] = gen_rtx_SYMBOL_REF (VOIDmode, \"__bb\");\t\t\\\n \txops[5] = plus_constant (xops[4], 4);\t\t\t\t\\\n-\txops[0] = gen_rtx (MEM, SImode, xops[4]);\t\t\t\\\n-\txops[6] = gen_rtx (MEM, SImode, xops[5]);\t\t\t\\\n+\txops[0] = gen_rtx_MEM (SImode, xops[4]);\t\t\t\\\n+\txops[6] = gen_rtx_MEM (SImode, xops[5]);\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \tCONSTANT_POOL_ADDRESS_P (xops[1]) = TRUE;\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \tfprintf(FILE, \"\\tpushf\\n\");\t\t\t\t\t\\\n         output_asm_insn (AS2(mov%L0,%2,%0), xops);\t\t\t\\\n \tif (flag_pic)\t\t\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\t\\\n-            xops[7] = gen_rtx (REG, Pmode, 0);\t/* eax */\t\t\\\n+            xops[7] = gen_rtx_REG (Pmode, 0);\t/* eax */\t\t\\\n             output_asm_insn (AS1(push%L7,%7), xops);\t\t\t\\\n             output_asm_insn (AS2(lea%L7,%a1,%7), xops);\t\t\t\\\n             output_asm_insn (AS2(mov%L6,%7,%6), xops);\t\t\t\\\n@@ -1323,16 +1323,16 @@ do\t\t\t\t\t\t\t\t\t\\\n       default:\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n         ASM_GENERATE_INTERNAL_LABEL (counts, \"LPBX\", 2);\t\t\\\n-        cnt_rtx = gen_rtx (SYMBOL_REF, VOIDmode, counts);\t\t\\\n+        cnt_rtx = gen_rtx_SYMBOL_REF (VOIDmode, counts);\t\t\\\n         SYMBOL_REF_FLAG (cnt_rtx) = TRUE;\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n         if (BLOCKNO)\t\t\t\t\t\t\t\\\n           cnt_rtx = plus_constant (cnt_rtx, (BLOCKNO)*4);\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n         if (flag_pic)\t\t\t\t\t\t\t\\\n-          cnt_rtx = gen_rtx (PLUS, Pmode, pic_offset_table_rtx, cnt_rtx);\t\\\n+          cnt_rtx = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, cnt_rtx);\t\\\n \t\t\t\t\t\t\t\t\t\\\n-        xops[0] = gen_rtx (MEM, SImode, cnt_rtx);\t\t\t\\\n+        xops[0] = gen_rtx_MEM (SImode, cnt_rtx);\t\t\t\\\n         output_asm_insn (AS1(inc%L0,%0), xops);\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n         break;\t\t\t\t\t\t\t\t\\\n@@ -1368,7 +1368,7 @@ do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     rtx xops[1];\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-    xops[0] = gen_rtx (MEM, Pmode, gen_rtx (SYMBOL_REF, VOIDmode, \"__bb_trace_ret\")); \\\n+    xops[0] = gen_rtx_MEM (Pmode, gen_rtx_SYMBOL_REF (VOIDmode, \"__bb_trace_ret\")); \\\n \t\t\t\t\t\t\t\t\t\\\n     output_asm_insn (AS1(call,%P0), xops);\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n@@ -1476,8 +1476,8 @@ do {\t\t\t\t\t\t\\\n \n #define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  emit_move_insn (gen_rtx (MEM, SImode, plus_constant (TRAMP, 1)), CXT); \\\n-  emit_move_insn (gen_rtx (MEM, SImode, plus_constant (TRAMP, 6)), FNADDR); \\\n+  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (TRAMP, 1)), CXT); \\\n+  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (TRAMP, 6)), FNADDR); \\\n }\n \f\n /* Definitions for register eliminations.\n@@ -2372,13 +2372,13 @@ number as al, and ax.\n \n /* Before the prologue, RA is at 0(%esp).  */\n #define INCOMING_RETURN_ADDR_RTX \\\n-  gen_rtx (MEM, VOIDmode, gen_rtx (REG, VOIDmode, STACK_POINTER_REGNUM))\n+  gen_rtx_MEM (VOIDmode, gen_rtx_REG (VOIDmode, STACK_POINTER_REGNUM))\n \n /* After the prologue, RA is at -4(AP) in the current frame.  */\n #define RETURN_ADDR_RTX(COUNT, FRAME)\t\t\t\t\t\\\n   ((COUNT) == 0\t\t\t\t\t\t\t\t\\\n-   ? gen_rtx (MEM, Pmode, gen_rtx (PLUS, Pmode, arg_pointer_rtx, GEN_INT(-4)))\\\n-   : gen_rtx (MEM, Pmode, gen_rtx (PLUS, Pmode, (FRAME), GEN_INT(4))))\n+   ? gen_rtx_MEM (Pmode, gen_rtx_PLUS (Pmode, arg_pointer_rtx, GEN_INT(-4)))\\\n+   : gen_rtx_MEM (Pmode, gen_rtx_PLUS (Pmode, (FRAME), GEN_INT(4))))\n \n /* PC is dbx register 8; let's use that column for RA. */\n #define DWARF_FRAME_RETURN_COLUMN \t8\n@@ -2397,10 +2397,7 @@ number as al, and ax.\n #define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\t\t\\\n do { long l[2];\t\t\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_DOUBLE (VALUE, l);\t\t\t\t\\\n-     if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n-       fprintf (FILE, \"%s 0x%x,0x%x\\n\", ASM_LONG, l[0], l[1]);\t\t\\\n-     else\t\t\t\t\t\t\t\t\\\n-       fprintf (FILE, \"%s 0x%lx,0x%lx\\n\", ASM_LONG, l[0], l[1]);\t\\\n+     fprintf (FILE, \"%s 0x%lx,0x%lx\\n\", ASM_LONG, l[0], l[1]);\t\t\\\n    } while (0)\n \n /* This is how to output a `long double' extended real constant. */\n@@ -2409,21 +2406,15 @@ do { long l[2];\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)  \t\t\\\n do { long l[3];\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_LONG_DOUBLE (VALUE, l);\t\\\n-     if (sizeof (int) == sizeof (long))\t\t\t\\\n-       fprintf (FILE, \"%s 0x%x,0x%x,0x%x\\n\", ASM_LONG, l[0], l[1], l[2]); \\\n-     else\t\t\t\t\t\t\\\n-       fprintf (FILE, \"%s 0x%lx,0x%lx,0x%lx\\n\", ASM_LONG, l[0], l[1], l[2]); \\\n+     fprintf (FILE, \"%s 0x%lx,0x%lx,0x%lx\\n\", ASM_LONG, l[0], l[1], l[2]); \\\n    } while (0)\n \n /* This is how to output an assembler line defining a `float' constant.  */\n \n #define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\\\n do { long l;\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\t\\\n-     if (sizeof (int) == sizeof (long))\t\t\t\\\n-       fprintf ((FILE), \"%s 0x%x\\n\", ASM_LONG, l);\t\\\n-     else\t\t\t\t\t\t\\\n-       fprintf ((FILE), \"%s 0x%lx\\n\", ASM_LONG, l);\t\\\n+     fprintf ((FILE), \"%s 0x%lx\\n\", ASM_LONG, l);\t\\\n    } while (0)\n \n /* Store in OUTPUT a string (made with alloca) containing\n@@ -2631,7 +2622,7 @@ extern char *qi_high_reg_name[];\n \n #define ASM_OPERAND_LETTER '#'\n #define RET return \"\"\n-#define AT_SP(mode) (gen_rtx (MEM, (mode), stack_pointer_rtx))\n+#define AT_SP(mode) (gen_rtx_MEM ((mode), stack_pointer_rtx))\n \f\n /* Helper macros to expand a binary/unary operator if needed */\n #define IX86_EXPAND_BINARY_OPERATOR(OP, MODE, OPERANDS)\t\t\t\\"}, {"sha": "1f175255406097d513e91878484c6a08c45cc4c4", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64cecad3ef744037d3d2cd12fee286d6258ecd3/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64cecad3ef744037d3d2cd12fee286d6258ecd3/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f64cecad3ef744037d3d2cd12fee286d6258ecd3", "patch": "@@ -1068,7 +1068,7 @@\n   \"\"\n   \"*\n {\n-  operands[1] = gen_rtx (REG, HImode, REGNO (operands[1]));\n+  operands[1] = gen_rtx_REG (HImode, REGNO (operands[1]));\n   return AS1 (push%W0,%1);\n }\")\n \n@@ -1214,13 +1214,13 @@\n       if (flag_pic)\n \tcurrent_function_uses_pic_offset_table = 1;\n \n-      insn = emit_insn (gen_rtx (SET, SFmode, operands[0], fp_const));\n+      insn = emit_insn (gen_rtx_SET (SFmode, operands[0], fp_const));\n       note = find_reg_note (insn, REG_EQUAL, NULL_RTX);\n \n       if (note)\n \tXEXP (note, 0) = operands[1];\n       else\n-\tREG_NOTES (insn) = gen_rtx (EXPR_LIST, REG_EQUAL, operands[1], REG_NOTES (insn));\n+\tREG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUAL, operands[1], REG_NOTES (insn));\n     }\n }\")\n \n@@ -1409,13 +1409,13 @@\n       if (flag_pic)\n \tcurrent_function_uses_pic_offset_table = 1;\n \n-      insn = emit_insn (gen_rtx (SET, DFmode, operands[0], fp_const));\n+      insn = emit_insn (gen_rtx_SET (DFmode, operands[0], fp_const));\n       note = find_reg_note (insn, REG_EQUAL, NULL_RTX);\n \n       if (note)\n \tXEXP (note, 0) = operands[1];\n       else\n-\tREG_NOTES (insn) = gen_rtx (EXPR_LIST, REG_EQUAL, operands[1], REG_NOTES (insn));\n+\tREG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUAL, operands[1], REG_NOTES (insn));\n     }\n }\")\n \n@@ -1596,13 +1596,13 @@\n       if (flag_pic)\n \tcurrent_function_uses_pic_offset_table = 1;\n \n-      insn = emit_insn (gen_rtx (SET, XFmode, operands[0], fp_const));\n+      insn = emit_insn (gen_rtx_SET (XFmode, operands[0], fp_const));\n       note = find_reg_note (insn, REG_EQUAL, NULL_RTX);\n \n       if (note)\n \tXEXP (note, 0) = operands[1];\n       else\n-\tREG_NOTES (insn) = gen_rtx (EXPR_LIST, REG_EQUAL, operands[1], REG_NOTES (insn));\n+\tREG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUAL, operands[1], REG_NOTES (insn));\n     }\n }\")\n \n@@ -1807,7 +1807,7 @@\n   if (TARGET_ZERO_EXTEND_WITH_AND)\n     {\n       xops[0] = operands[0];\n-      xops[1] = gen_rtx (CONST_INT, VOIDmode, 0xffff);\n+      xops[1] = GEN_INT (0xffff);\n       if (i386_aligned_p (operands[1]))\n \toutput_asm_insn (AS2 (mov%L0,%k1,%k0),operands);\n       else\n@@ -1831,7 +1831,7 @@\n        (const_int 0))\n   (set (strict_low_part (match_dup 2))\n        (match_dup 1))]\n- \"operands[2] = gen_rtx (REG, HImode, true_regnum (operands[0]));\")\n+ \"operands[2] = gen_rtx_REG (HImode, true_regnum (operands[0]));\")\n \n \n (define_split\n@@ -1843,7 +1843,7 @@\n   (set (match_dup 0)\n        (and:SI (match_dup 0)\n \t       (const_int 65535)))]\n-  \"operands[2] = gen_rtx (REG, HImode, true_regnum (operands[0]));\")\n+  \"operands[2] = gen_rtx_REG (HImode, true_regnum (operands[0]));\")\n \n (define_insn \"zero_extendqihi2\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=q,&q,?r\")\n@@ -1872,7 +1872,7 @@\n       else\n \t{\n \t  xops[0] = operands[0];\n-\t  xops[1] = gen_rtx (CONST_INT, VOIDmode, 0xff);\n+\t  xops[1] = GEN_INT (0xff);\n \t  output_asm_insn (AS2 (mov%B0,%1,%b0),operands);\n \t  output_asm_insn (AS2 (and%L0,%1,%k0), xops);\n \t}\n@@ -1895,7 +1895,7 @@\n        (const_int 0))\n   (set (strict_low_part (match_dup 2))\n        (match_dup 1))]\n- \"operands[2] = gen_rtx (REG, QImode, REGNO (operands[0]));\")\n+ \"operands[2] = gen_rtx_REG (QImode, REGNO (operands[0]));\")\n \n \n (define_split\n@@ -1908,7 +1908,7 @@\n   (set (match_dup 0)\n        (and:HI (match_dup 0)\n \t       (const_int 255)))]\n- \"operands[2] = gen_rtx (REG, QImode, REGNO (operands[0]));\")\n+ \"operands[2] = gen_rtx_REG (QImode, REGNO (operands[0]));\")\n \n (define_split\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n@@ -1924,7 +1924,7 @@\n   if (GET_CODE (operands[0]) != REG || GET_CODE (operands[1]) != REG\n       || REGNO (operands[0]) == REGNO (operands[1]))\n     FAIL;\n-  operands[2] = gen_rtx (REG, HImode, REGNO (operands[1]));\")\n+  operands[2] = gen_rtx_REG (HImode, REGNO (operands[1]));\")\n \n (define_insn \"zero_extendqisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=q,&q,?r\")\n@@ -1953,7 +1953,7 @@\n       else\n \t{\n \t  xops[0] = operands[0];\n-\t  xops[1] = gen_rtx (CONST_INT, VOIDmode, 0xff);\n+\t  xops[1] = GEN_INT (0xff);\n \t  output_asm_insn (AS2 (mov%B0,%1,%b0), operands);\n \t  output_asm_insn (AS2 (and%L0,%1,%k0), xops);\n \t}\n@@ -1963,8 +1963,8 @@\n   if (TARGET_ZERO_EXTEND_WITH_AND && GET_CODE (operands[1]) == REG)\n     {\n       xops[0] = operands[0];\n-      xops[1] = gen_rtx (CONST_INT, VOIDmode, 0xff);\n-      operands[1] = gen_rtx (REG, SImode, REGNO (operands[1]));\n+      xops[1] = GEN_INT (0xff);\n+      operands[1] = gen_rtx_REG (SImode, REGNO (operands[1]));\n       output_asm_insn (AS2 (mov%L0,%1,%0), operands);\n       output_asm_insn (AS2 (and%L0,%1,%k0), xops);\n       RET;\n@@ -1986,7 +1986,7 @@\n        (const_int 0))\n   (set (strict_low_part (match_dup 2))\n        (match_dup 1))]\n- \"operands[2] = gen_rtx (REG, QImode, REGNO (operands[0]));\")\n+ \"operands[2] = gen_rtx_REG (QImode, REGNO (operands[0]));\")\n \n \n (define_split\n@@ -1999,7 +1999,7 @@\n   (set (match_dup 0)\n        (and:SI (match_dup 0)\n \t       (const_int 255)))]\n- \"operands[2] = gen_rtx (REG, QImode, REGNO (operands[0]));\")\n+ \"operands[2] = gen_rtx_REG (QImode, REGNO (operands[0]));\")\n \n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n@@ -2011,7 +2011,7 @@\n   (set (match_dup 0)\n        (and:SI (match_dup 0)\n \t       (const_int 255)))]\n- \"operands[2] = gen_rtx (REG, SImode, true_regnum (operands[1]));\")\n+ \"operands[2] = gen_rtx_REG (SImode, true_regnum (operands[1]));\")\n \n (define_insn \"zero_extendsidi2\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,?r,?m\")\n@@ -2024,7 +2024,7 @@\n   if (REG_P (operands[0]) && REG_P (operands[1])\n       && REGNO (operands[0]) == REGNO (operands[1]))\n     {\n-      operands[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+      operands[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n       return AS2 (xor%L0,%0,%0);\n     }\n \n@@ -2061,7 +2061,7 @@\n #endif\n     }\n \n-  operands[1] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+  operands[1] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   output_asm_insn (AS2 (mov%L0,%0,%1), operands);\n \n   operands[0] = GEN_INT (31);\n@@ -3180,7 +3180,7 @@\n ;  xops[0] = operands[0];\n ;  xops[1] = operands[1];\n ;  xops[2] = operands[2];\n-;  xops[3] = gen_rtx (MEM, SImode, stack_pointer_rtx);\n+;  xops[3] = gen_rtx_MEM (SImode, stack_pointer_rtx);\n ;  output_asm_insn (\\\"push%z1 %1\\\", xops);\n ;  output_asm_insn (AS2 (add%z3,%2,%3), xops);\n ;  RET;\n@@ -4595,8 +4595,8 @@ byte_xor_operation:\n \t      output_asm_insn (AS2 (mov%L0,%1,%0), operands);\n \t      operands[1] = operands[0];\n \t    }\n-          operands[1] = gen_rtx (MULT, SImode, operands[1],\n-\t\t\t\t GEN_INT (1 << INTVAL (operands[2])));\n+          operands[1] = gen_rtx_MULT (SImode, operands[1],\n+\t\t\t\t      GEN_INT (1 << INTVAL (operands[2])));\n \t  return AS2 (lea%L0,%a1,%0);\n \t}\n     }\n@@ -5056,7 +5056,7 @@ byte_xor_operation:\n     }\n   else\n     {\n-      operands[0] = gen_rtx (REG, SImode, REGNO (operands[0]));\n+      operands[0] = gen_rtx_REG (SImode, REGNO (operands[0]));\n       if (INTVAL (operands[2]))\n \toutput_asm_insn (AS2 (ror%L0,%2,%0), operands);\n       output_asm_insn (AS3 (shrd%L0,%1,%3,%0), operands);\n@@ -5489,7 +5489,7 @@ byte_xor_operation:\n   else\n   if (cc_prev_status.flags & CC_TEST_AX)\n     {\n-      operands[1] = gen_rtx (REG, SImode, 0);\n+      operands[1] = gen_rtx_REG (SImode, 0);\n       operands[2] = GEN_INT (0x4000);\n       output_asm_insn (AS2 (testl,%2,%1), operands);\n       return AS1 (jne,%l0);\n@@ -5529,7 +5529,7 @@ byte_xor_operation:\n   else\n   if (cc_prev_status.flags & CC_TEST_AX)\n     {\n-      operands[1] = gen_rtx (REG, SImode, 0);\n+      operands[1] = gen_rtx_REG (SImode, 0);\n       operands[2] = GEN_INT (0x4000);\n       output_asm_insn (AS2 (testl,%2,%1), operands);\n       return AS1 (je,%l0);\n@@ -5563,7 +5563,7 @@ byte_xor_operation:\n \n   if (cc_prev_status.flags & CC_TEST_AX)\n     {\n-      operands[1] = gen_rtx (REG, SImode, 0);\n+      operands[1] = gen_rtx_REG (SImode, 0);\n       operands[2] = GEN_INT (0x4100);\n       output_asm_insn (AS2 (testl,%2,%1), operands);\n       return AS1 (je,%l0);\n@@ -5615,7 +5615,7 @@ byte_xor_operation:\n \n   if (cc_prev_status.flags & CC_TEST_AX)\n     {\n-      operands[1] = gen_rtx (REG, SImode, 0);\n+      operands[1] = gen_rtx_REG (SImode, 0);\n       operands[2] = GEN_INT (0x100);\n       output_asm_insn (AS2 (testl,%2,%1), operands);\n       return AS1 (jne,%l0);\n@@ -5666,7 +5666,7 @@ byte_xor_operation:\n     return AS1 (je,%l0);\n   if (cc_prev_status.flags & CC_TEST_AX)\n     {\n-      operands[1] = gen_rtx (REG, SImode, 0);\n+      operands[1] = gen_rtx_REG (SImode, 0);\n       operands[2] = GEN_INT (0x100);\n       output_asm_insn (AS2 (testl,%2,%1), operands);\n       return AS1 (je,%l0);\n@@ -5717,7 +5717,7 @@ byte_xor_operation:\n     return AS1 (jb,%l0);\n   if (cc_prev_status.flags & CC_TEST_AX)\n     {\n-      operands[1] = gen_rtx (REG, SImode, 0);\n+      operands[1] = gen_rtx_REG (SImode, 0);\n       operands[2] = GEN_INT (0x4100);\n       output_asm_insn (AS2 (testl,%2,%1), operands);\n       return AS1 (jne,%l0);\n@@ -5761,7 +5761,7 @@ byte_xor_operation:\n   else\n   if (cc_prev_status.flags & CC_TEST_AX)\n     {\n-      operands[1] = gen_rtx (REG, SImode, 0);\n+      operands[1] = gen_rtx_REG (SImode, 0);\n       operands[2] = GEN_INT (0x4000);\n       output_asm_insn (AS2 (testl,%2,%1), operands);\n       return AS1 (je,%l0);\n@@ -5783,7 +5783,7 @@ byte_xor_operation:\n   else\n   if (cc_prev_status.flags & CC_TEST_AX)\n     {\n-      operands[1] = gen_rtx (REG, SImode, 0);\n+      operands[1] = gen_rtx_REG (SImode, 0);\n       operands[2] = GEN_INT (0x4000);\n       output_asm_insn (AS2 (testl,%2,%1), operands);\n       return AS1 (jne,%l0);\n@@ -5805,7 +5805,7 @@ byte_xor_operation:\n     return AS1 (jne,%l0);\n   if (cc_prev_status.flags & CC_TEST_AX)\n     {\n-      operands[1] = gen_rtx (REG, SImode, 0);\n+      operands[1] = gen_rtx_REG (SImode, 0);\n       operands[2] = GEN_INT (0x4100);\n       output_asm_insn (AS2 (testl,%2,%1), operands);\n       return AS1 (jne,%l0);\n@@ -5836,7 +5836,7 @@ byte_xor_operation:\n     return AS1 (jne,%l0);\n   if (cc_prev_status.flags & CC_TEST_AX)\n     {\n-      operands[1] = gen_rtx (REG, SImode, 0);\n+      operands[1] = gen_rtx_REG (SImode, 0);\n       operands[2] = GEN_INT (0x100);\n       output_asm_insn (AS2 (testl,%2,%1), operands);\n       return AS1 (je,%l0);\n@@ -5868,7 +5868,7 @@ byte_xor_operation:\n     return AS1 (jne,%l0);\n   if (cc_prev_status.flags & CC_TEST_AX)\n     {\n-      operands[1] = gen_rtx (REG, SImode, 0);\n+      operands[1] = gen_rtx_REG (SImode, 0);\n       operands[2] = GEN_INT (0x100);\n       output_asm_insn (AS2 (testl,%2,%1), operands);\n       return AS1 (jne,%l0);\n@@ -5900,7 +5900,7 @@ byte_xor_operation:\n \n   if (cc_prev_status.flags & CC_TEST_AX)\n     {\n-      operands[1] = gen_rtx (REG, SImode, 0);\n+      operands[1] = gen_rtx_REG (SImode, 0);\n       operands[2] = GEN_INT (0x4100);\n       output_asm_insn (AS2 (testl,%2,%1), operands);\n       return AS1 (je,%l0);\n@@ -6446,8 +6446,8 @@ byte_xor_operation:\n      value.  */\n \n   emit_call_insn (TARGET_80387\n-                  ? gen_call_value (gen_rtx (REG, XCmode, FIRST_FLOAT_REG),\n-\t\t                  operands[0], const0_rtx)\n+                  ? gen_call_value (gen_rtx_REG (XCmode, FIRST_FLOAT_REG),\n+\t\t\t\t    operands[0], const0_rtx)\n                   : gen_call (operands[0], const0_rtx));\n \n   for (i = 0; i < XVECLEN (operands[2], 0); i++)\n@@ -6710,7 +6710,7 @@ byte_xor_operation:\n   operands[3] = gen_reg_rtx (SImode);\n   operands[5] = addr0;\n \n-  operands[0] = gen_rtx (MEM, BLKmode, addr0);\n+  operands[0] = gen_rtx_MEM (BLKmode, addr0);\n }\")\n \n ;; It might seem that operand 0 could use predicate register_operand.\n@@ -6776,8 +6776,8 @@ byte_xor_operation:\n   operands[5] = addr1;\n   operands[6] = addr2;\n \n-  operands[1] = gen_rtx (MEM, BLKmode, addr1);\n-  operands[2] = gen_rtx (MEM, BLKmode, addr2);\n+  operands[1] = gen_rtx_MEM (BLKmode, addr1);\n+  operands[2] = gen_rtx_MEM (BLKmode, addr2);\n \n }\")\n \n@@ -6841,7 +6841,7 @@ byte_xor_operation:\n \n   cc_status.flags |= CC_NOT_SIGNED;\n \n-  xops[0] = gen_rtx (REG, QImode, 0);\n+  xops[0] = gen_rtx_REG (QImode, 0);\n   xops[1] = CONST0_RTX (QImode);\n \n   output_asm_insn (\\\"cld\\\", operands);"}]}