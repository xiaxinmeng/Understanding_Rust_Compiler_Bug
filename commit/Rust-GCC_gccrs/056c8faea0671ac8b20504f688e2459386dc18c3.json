{"sha": "056c8faea0671ac8b20504f688e2459386dc18c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU2YzhmYWVhMDY3MWFjOGIyMDUwNGY2ODhlMjQ1OTM4NmRjMThjMw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-06-11T15:56:41Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-06-11T15:56:41Z"}, "message": "builtins.c (get_memory_rtx): Accept byte-addressable bitfields.\n\n\t* builtins.c (get_memory_rtx): Accept byte-addressable bitfields.\n\tUse DECL_SIZE_UNIT to retrieve the size of the field.\n\n\nCo-Authored-By: Olivier Hainque <hainque@adacore.com>\n\nFrom-SVN: r136673", "tree": {"sha": "7f4fdceccc7546f3261363ae2dab1aa312a764f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f4fdceccc7546f3261363ae2dab1aa312a764f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/056c8faea0671ac8b20504f688e2459386dc18c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/056c8faea0671ac8b20504f688e2459386dc18c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/056c8faea0671ac8b20504f688e2459386dc18c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/056c8faea0671ac8b20504f688e2459386dc18c3/comments", "author": null, "committer": null, "parents": [{"sha": "2023be161a9a1ec80e84c8fe231b38a4020b629f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2023be161a9a1ec80e84c8fe231b38a4020b629f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2023be161a9a1ec80e84c8fe231b38a4020b629f"}], "stats": {"total": 80, "additions": 75, "deletions": 5}, "files": [{"sha": "78ee5bd64567d39524627fc1dd183812ece80af6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056c8faea0671ac8b20504f688e2459386dc18c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056c8faea0671ac8b20504f688e2459386dc18c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=056c8faea0671ac8b20504f688e2459386dc18c3", "patch": "@@ -1,3 +1,9 @@\n+2008-06-11  Eric Botcazou  <ebotcazou@adacore.com>\n+            Olivier Hainque  <hainque@adacore.com>\n+\n+\t* builtins.c (get_memory_rtx): Accept byte-addressable bitfields.\n+\tUse DECL_SIZE_UNIT to retrieve the size of the field.\n+\n 2008-06-11  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/arm/arm.c (arm_init_neon_builtins): Move initialization"}, {"sha": "edc5d5f07f3e65152588ebb2c668f80c9ca014f8", "filename": "gcc/builtins.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056c8faea0671ac8b20504f688e2459386dc18c3/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056c8faea0671ac8b20504f688e2459386dc18c3/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=056c8faea0671ac8b20504f688e2459386dc18c3", "patch": "@@ -1114,16 +1114,22 @@ get_memory_rtx (tree exp, tree len)\n \t  while (TREE_CODE (inner) == COMPONENT_REF)\n \t    {\n \t      tree field = TREE_OPERAND (inner, 1);\n-\t      gcc_assert (! DECL_BIT_FIELD (field));\n \t      gcc_assert (TREE_CODE (mem_expr) == COMPONENT_REF);\n \t      gcc_assert (field == TREE_OPERAND (mem_expr, 1));\n \n+\t      /* Bitfields are generally not byte-addressable.  */\n+\t      gcc_assert (!DECL_BIT_FIELD (field)\n+\t\t\t  || ((tree_low_cst (DECL_FIELD_BIT_OFFSET (field), 1)\n+\t\t\t       % BITS_PER_UNIT) == 0\n+\t\t\t      && host_integerp (DECL_SIZE (field), 0)\n+\t\t\t      && (TREE_INT_CST_LOW (DECL_SIZE (field))\n+\t\t\t\t  % BITS_PER_UNIT) == 0));\n+\n \t      if (length >= 0\n-\t\t  && TYPE_SIZE_UNIT (TREE_TYPE (inner))\n-\t\t  && host_integerp (TYPE_SIZE_UNIT (TREE_TYPE (inner)), 0))\n+\t\t  && host_integerp (DECL_SIZE_UNIT (field), 0))\n \t\t{\n \t\t  HOST_WIDE_INT size\n-\t\t    = tree_low_cst (TYPE_SIZE_UNIT (TREE_TYPE (inner)), 0);\n+\t\t    = TREE_INT_CST_LOW (DECL_SIZE_UNIT (field));\n \t\t  /* If we can prove the memory starting at XEXP (mem, 0)\n \t\t     and ending at XEXP (mem, 0) + LENGTH will fit into\n \t\t     this field, we can keep that COMPONENT_REF in MEM_EXPR.  */\n@@ -1135,7 +1141,7 @@ get_memory_rtx (tree exp, tree len)\n \n \t      if (offset >= 0\n \t\t  && host_integerp (DECL_FIELD_OFFSET (field), 0))\n-\t\toffset += tree_low_cst (DECL_FIELD_OFFSET (field), 0)\n+\t\toffset += TREE_INT_CST_LOW (DECL_FIELD_OFFSET (field))\n \t\t\t  + tree_low_cst (DECL_FIELD_BIT_OFFSET (field), 1)\n \t\t\t    / BITS_PER_UNIT;\n \t      else"}, {"sha": "08bd74ca62411c7c14008e4e87b9c41ba3b3937a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056c8faea0671ac8b20504f688e2459386dc18c3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056c8faea0671ac8b20504f688e2459386dc18c3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=056c8faea0671ac8b20504f688e2459386dc18c3", "patch": "@@ -1,3 +1,7 @@\n+2008-06-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/varsize_copy.ad[sb]: New test.\n+\n 2008-06-10  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/bt-mask-1.c: New test."}, {"sha": "4fa0ff8622e7885e50d93add2da85697b9c81d7a", "filename": "gcc/testsuite/gnat.dg/varsize_copy.adb", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056c8faea0671ac8b20504f688e2459386dc18c3/gcc%2Ftestsuite%2Fgnat.dg%2Fvarsize_copy.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056c8faea0671ac8b20504f688e2459386dc18c3/gcc%2Ftestsuite%2Fgnat.dg%2Fvarsize_copy.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fvarsize_copy.adb?ref=056c8faea0671ac8b20504f688e2459386dc18c3", "patch": "@@ -0,0 +1,24 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O -gnatws\" }\n+\n+package body Varsize_Copy is\n+\n+   type Key_Mapping_Type is record\n+      Page : Page_Type;\n+      B    : Boolean;\n+   end record;\n+\n+   type Key_Mapping_Array is array (Key_Type) of Key_Mapping_Type;\n+\n+   type Set is record\n+      Key_Mappings : Key_Mapping_Array;\n+   end record;\n+\n+   S : Set;\n+\n+   function F (Key : Key_Type) return Page_Type is\n+   begin\n+      return S.Key_Mappings (Key).Page;\n+   end;\n+\n+end Varsize_Copy;"}, {"sha": "9a088a9ffdfe5b8f0b1ac4225b31e278942e57d8", "filename": "gcc/testsuite/gnat.dg/varsize_copy.ads", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056c8faea0671ac8b20504f688e2459386dc18c3/gcc%2Ftestsuite%2Fgnat.dg%2Fvarsize_copy.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056c8faea0671ac8b20504f688e2459386dc18c3/gcc%2Ftestsuite%2Fgnat.dg%2Fvarsize_copy.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fvarsize_copy.ads?ref=056c8faea0671ac8b20504f688e2459386dc18c3", "patch": "@@ -0,0 +1,30 @@\n+package Varsize_Copy is\n+\n+   type Key_Type is\n+      (Nul, Cntrl, Stx, Etx, Eot, Enq, Ack, Spad, Clr, Dc_1, Dc_2, Dc_3, Dc_4);\n+\n+   for Key_Type use\n+      (Nul   => 0,\n+       Cntrl => 1,\n+       Stx   => 2,\n+       Etx   => 3,\n+       Eot   => 4,\n+       Enq   => 5,\n+       Ack   => 6,\n+       Spad  => 7,\n+       Clr   => 8,\n+       Dc_1  => 17,\n+       Dc_2  => 18,\n+       Dc_3  => 19,\n+       Dc_4  => 20);\n+\n+   type Page_Type(D : Boolean := False) is record\n+      case D is\n+         when True => I : Integer;\n+         when False => null;\n+      end case;\n+   end record;\n+\n+   function F (Key : Key_Type) return Page_Type;\n+\n+end Varsize_Copy;"}]}