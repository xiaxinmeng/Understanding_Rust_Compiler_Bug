{"sha": "0fa1f9b76227e5f3bb22a40a356727f0c4841179", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZhMWY5Yjc2MjI3ZTVmM2JiMjJhNDBhMzU2NzI3ZjBjNDg0MTE3OQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2011-04-12T10:02:31Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2011-04-12T10:02:31Z"}, "message": "class.c (cp_fold_obj_type_ref): Call cgraph_get_node instead of cgraph_get_create_node.\n\n2011-04-12  Martin Jambor  <mjambor@suse.cz>\n\ngcc/cp/\n\t* class.c (cp_fold_obj_type_ref): Call cgraph_get_node instead of\n\tcgraph_get_create_node.\n\t* decl2.c (cp_write_global_declarations): Call cgraph_get_node\n\tinstead of cgraph_get_create_node.\n\t* method.c (make_alias_for_thunk): Call cgraph_get_node\n\tinstead of cgraph_get_create_node, assert it returns non-NULL.\n\t(use_thunk): Likewise.\n\t* optimize.c (maybe_clone_body): Call cgraph_same_body_alias only\n\twhen flag_syntax_only is not set.  Call cgraph_get_node instead of\n\tcgraph_get_create_node.\n\t(maybe_clone_body): Call cgraph_get_node instead of\n\tcgraph_get_create_node.\n\nFrom-SVN: r172308", "tree": {"sha": "25e81ab2df18f59f5d53a1d312e2195c9155fce8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25e81ab2df18f59f5d53a1d312e2195c9155fce8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fa1f9b76227e5f3bb22a40a356727f0c4841179", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fa1f9b76227e5f3bb22a40a356727f0c4841179", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fa1f9b76227e5f3bb22a40a356727f0c4841179", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fa1f9b76227e5f3bb22a40a356727f0c4841179/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a358e188450fe839855b1b10e3f0410bf8e54929", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a358e188450fe839855b1b10e3f0410bf8e54929", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a358e188450fe839855b1b10e3f0410bf8e54929"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "f6dbddce6eea79cce15cf09d9efd408a87af7ce0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa1f9b76227e5f3bb22a40a356727f0c4841179/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa1f9b76227e5f3bb22a40a356727f0c4841179/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0fa1f9b76227e5f3bb22a40a356727f0c4841179", "patch": "@@ -1,3 +1,18 @@\n+2011-04-12  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* class.c (cp_fold_obj_type_ref): Call cgraph_get_node instead of\n+\tcgraph_get_create_node.\n+\t* decl2.c (cp_write_global_declarations): Call cgraph_get_node\n+\tinstead of cgraph_get_create_node.\n+\t* method.c (make_alias_for_thunk): Call cgraph_get_node\n+\tinstead of cgraph_get_create_node, assert it returns non-NULL.\n+\t(use_thunk): Likewise.\n+\t* optimize.c (maybe_clone_body): Call cgraph_same_body_alias only\n+\twhen flag_syntax_only is not set.  Call cgraph_get_node instead of\n+\tcgraph_get_create_node.\n+\t(maybe_clone_body): Call cgraph_get_node instead of\n+\tcgraph_get_create_node.\n+\n 2011-04-12  Martin Jambor  <mjambor@suse.cz>\n \n \t* class.c (cp_fold_obj_type_ref): Call cgraph_get_create_node"}, {"sha": "b6aebaeba22f980f5545d930003a65087b9236a6", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa1f9b76227e5f3bb22a40a356727f0c4841179/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa1f9b76227e5f3bb22a40a356727f0c4841179/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=0fa1f9b76227e5f3bb22a40a356727f0c4841179", "patch": "@@ -8401,7 +8401,7 @@ cp_fold_obj_type_ref (tree ref, tree known_type)\n \t\t\t\t  DECL_VINDEX (fndecl)));\n #endif\n \n-  cgraph_get_create_node (fndecl)->local.vtable_method = true;\n+  cgraph_get_node (fndecl)->local.vtable_method = true;\n \n   return build_address (fndecl);\n }"}, {"sha": "5b6f6edf3afc5193ea51556a95a54df22895cb3e", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa1f9b76227e5f3bb22a40a356727f0c4841179/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa1f9b76227e5f3bb22a40a356727f0c4841179/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=0fa1f9b76227e5f3bb22a40a356727f0c4841179", "patch": "@@ -3893,7 +3893,7 @@ cp_write_global_declarations (void)\n \t  if (!DECL_EXTERNAL (decl)\n \t      && decl_needed_p (decl)\n \t      && !TREE_ASM_WRITTEN (decl)\n-\t      && !cgraph_get_create_node (decl)->local.finalized)\n+\t      && !cgraph_get_node (decl)->local.finalized)\n \t    {\n \t      /* We will output the function; no longer consider it in this\n \t\t loop.  */"}, {"sha": "6b268067cc028ea0c00e04cd85b21efdf452f555", "filename": "gcc/cp/method.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa1f9b76227e5f3bb22a40a356727f0c4841179/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa1f9b76227e5f3bb22a40a356727f0c4841179/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=0fa1f9b76227e5f3bb22a40a356727f0c4841179", "patch": "@@ -259,9 +259,10 @@ make_alias_for_thunk (tree function)\n \n   if (!flag_syntax_only)\n     {\n-      struct cgraph_node *aliasn;\n-      aliasn = cgraph_same_body_alias (cgraph_get_create_node (function),\n-\t\t\t\t       alias, function);\n+      struct cgraph_node *funcn, *aliasn;\n+      funcn = cgraph_get_node (function);\n+      gcc_checking_assert (funcn);\n+      aliasn = cgraph_same_body_alias (funcn, alias, function);\n       DECL_ASSEMBLER_NAME (function);\n       gcc_assert (aliasn != NULL);\n     }\n@@ -280,6 +281,7 @@ use_thunk (tree thunk_fndecl, bool emit_p)\n   tree virtual_offset;\n   HOST_WIDE_INT fixed_offset, virtual_value;\n   bool this_adjusting = DECL_THIS_THUNK_P (thunk_fndecl);\n+  struct cgraph_node *funcn;\n \n   /* We should have called finish_thunk to give it a name.  */\n   gcc_assert (DECL_NAME (thunk_fndecl));\n@@ -379,7 +381,9 @@ use_thunk (tree thunk_fndecl, bool emit_p)\n   a = nreverse (t);\n   DECL_ARGUMENTS (thunk_fndecl) = a;\n   TREE_ASM_WRITTEN (thunk_fndecl) = 1;\n-  cgraph_add_thunk (cgraph_get_create_node (function), thunk_fndecl, function,\n+  funcn = cgraph_get_node (function);\n+  gcc_checking_assert (funcn);\n+  cgraph_add_thunk (funcn, thunk_fndecl, function,\n \t\t    this_adjusting, fixed_offset, virtual_value,\n \t\t    virtual_offset, alias);\n "}, {"sha": "87302dc933d7f71645ffd7d774fdb676a85a0ca3", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa1f9b76227e5f3bb22a40a356727f0c4841179/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa1f9b76227e5f3bb22a40a356727f0c4841179/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=0fa1f9b76227e5f3bb22a40a356727f0c4841179", "patch": "@@ -309,8 +309,9 @@ maybe_clone_body (tree fn)\n \t  && (!DECL_ONE_ONLY (fns[0])\n \t      || (HAVE_COMDAT_GROUP\n \t\t  && DECL_WEAK (fns[0])))\n-\t  && cgraph_same_body_alias (cgraph_get_create_node (fns[0]), clone,\n-\t\t\t\t     fns[0]))\n+\t  && (flag_syntax_only\n+\t      || cgraph_same_body_alias (cgraph_get_node (fns[0]), clone,\n+\t\t\t\t\t fns[0])))\n \t{\n \t  alias = true;\n \t  if (DECL_ONE_ONLY (fns[0]))\n@@ -424,8 +425,8 @@ maybe_clone_body (tree fn)\n \t  /* If *[CD][12]* dtors go into the *[CD]5* comdat group and dtor is\n \t     virtual, it goes into the same comdat group as well.  */\n \t  DECL_COMDAT_GROUP (fns[2]) = comdat_group;\n-\t  base_dtor_node = cgraph_get_create_node (fns[0]);\n-\t  deleting_dtor_node = cgraph_get_create_node (fns[2]);\n+\t  base_dtor_node = cgraph_get_node (fns[0]);\n+\t  deleting_dtor_node = cgraph_get_node (fns[2]);\n \t  gcc_assert (base_dtor_node->same_comdat_group == NULL);\n \t  gcc_assert (deleting_dtor_node->same_comdat_group == NULL);\n \t  base_dtor_node->same_comdat_group = deleting_dtor_node;"}]}