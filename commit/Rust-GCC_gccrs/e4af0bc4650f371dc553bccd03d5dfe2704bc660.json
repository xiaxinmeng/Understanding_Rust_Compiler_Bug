{"sha": "e4af0bc4650f371dc553bccd03d5dfe2704bc660", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRhZjBiYzQ2NTBmMzcxZGM1NTNiY2NkMDNkNWRmZTI3MDRiYzY2MA==", "commit": {"author": {"name": "Ilya Enkovich", "email": "enkovich.gnu@gmail.com", "date": "2015-11-13T11:45:25Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2015-11-13T11:45:25Z"}, "message": "tree-vect-loop.c (vect_determine_vectorization_factor): Check mix of boolean and integer vectors in a single statement.\n\ngcc/\n\n\t* tree-vect-loop.c (vect_determine_vectorization_factor): Check\n\tmix of boolean and integer vectors in a single statement.\n\t* tree-vect-slp.c (vect_mask_constant_operand_p): New.\n\t(vect_get_constant_vectors): Use vect_mask_constant_operand_p to\n\tdetermine constant type.\n\t* tree-vect-stmts.c (vectorizable_comparison): Provide vectype\n\tfor loop invariants.\n\ngcc/testsuite/\n\n\t* g++.dg/vect/simd-bool-comparison-1.cc: New test.\n\t* g++.dg/vect/simd-bool-comparison-2.cc: New test.\n\nFrom-SVN: r230309", "tree": {"sha": "ad5f4cf9d3ab2efb6a3c4da48f6a2d31e1790633", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad5f4cf9d3ab2efb6a3c4da48f6a2d31e1790633"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4af0bc4650f371dc553bccd03d5dfe2704bc660", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4af0bc4650f371dc553bccd03d5dfe2704bc660", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4af0bc4650f371dc553bccd03d5dfe2704bc660", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4af0bc4650f371dc553bccd03d5dfe2704bc660/comments", "author": null, "committer": null, "parents": [{"sha": "f7259dd4be3a6edba6035e2d7c580ee11ed16800", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7259dd4be3a6edba6035e2d7c580ee11ed16800", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7259dd4be3a6edba6035e2d7c580ee11ed16800"}], "stats": {"total": 139, "additions": 135, "deletions": 4}, "files": [{"sha": "a7517f9bcaaabbaf118d688f3458b9bd2ea7c2d7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4af0bc4650f371dc553bccd03d5dfe2704bc660/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4af0bc4650f371dc553bccd03d5dfe2704bc660/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4af0bc4650f371dc553bccd03d5dfe2704bc660", "patch": "@@ -1,3 +1,13 @@\n+2015-11-13  Ilya Enkovich  <enkovich.gnu@gmail.com>\n+\n+\t* tree-vect-loop.c (vect_determine_vectorization_factor): Check\n+\tmix of boolean and integer vectors in a single statement.\n+\t* tree-vect-slp.c (vect_mask_constant_operand_p): New.\n+\t(vect_get_constant_vectors): Use vect_mask_constant_operand_p to\n+\tdetermine constant type.\n+\t* tree-vect-stmts.c (vectorizable_comparison): Provide vectype\n+\tfor loop invariants.\n+\n 2015-11-13  Alan Hayward <alan.hayward@arm.com>\n \n \tPR tree-optimization/66558"}, {"sha": "ca626846f16c5eac65489891a01038b0c3f7d7e6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4af0bc4650f371dc553bccd03d5dfe2704bc660/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4af0bc4650f371dc553bccd03d5dfe2704bc660/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e4af0bc4650f371dc553bccd03d5dfe2704bc660", "patch": "@@ -1,3 +1,8 @@\n+2015-11-13  Ilya Enkovich  <enkovich.gnu@gmail.com>\n+\n+\t* g++.dg/vect/simd-bool-comparison-1.cc: New test.\n+\t* g++.dg/vect/simd-bool-comparison-2.cc: New test.\n+\n 2015-11-13  Dominique d'Humieres <dominiq@lps.ens.fr>\n \n \tPR fortran/47266"}, {"sha": "a08362f4591e396c03d9a1942f1eedfc8b1efd8a", "filename": "gcc/testsuite/g++.dg/vect/simd-bool-comparison-1.cc", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4af0bc4650f371dc553bccd03d5dfe2704bc660/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fsimd-bool-comparison-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4af0bc4650f371dc553bccd03d5dfe2704bc660/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fsimd-bool-comparison-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fsimd-bool-comparison-1.cc?ref=e4af0bc4650f371dc553bccd03d5dfe2704bc660", "patch": "@@ -0,0 +1,21 @@\n+// { dg-do compile }\n+// { dg-additional-options \"-mavx512bw -mavx512dq\" { target { i?86-*-* x86_64-*-* } } }\n+\n+#define N 1024\n+\n+double a[N];\n+bool b[N];\n+bool c;\n+\n+void test ()\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    if (b[i] != c)\n+      a[i] = 0.0;\n+    else\n+      a[i] = 1.0;\n+}\n+\n+// { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { i?86-*-* x86_64-*-* } } } }"}, {"sha": "4accf56b2007f0006be6f26119327d30ce428e43", "filename": "gcc/testsuite/g++.dg/vect/simd-bool-comparison-2.cc", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4af0bc4650f371dc553bccd03d5dfe2704bc660/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fsimd-bool-comparison-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4af0bc4650f371dc553bccd03d5dfe2704bc660/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fsimd-bool-comparison-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fsimd-bool-comparison-2.cc?ref=e4af0bc4650f371dc553bccd03d5dfe2704bc660", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do compile }\n+// { dg-additional-options \"-mavx512bw -mavx512dq\" { target { i?86-*-* x86_64-*-* } } }\n+\n+#define N 1024\n+\n+double a[N];\n+bool b[N];\n+char c[N];\n+\n+void test ()\n+{\n+  int i;\n+\n+  #pragma omp simd\n+  for (i = 0; i < N; i++)\n+    if ((c[i] > 0) && b[i])\n+      a[i] = 0.0;\n+    else\n+      a[i] = 1.0;\n+}"}, {"sha": "80937eceb9cab8ccda646a062f29a90877250856", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4af0bc4650f371dc553bccd03d5dfe2704bc660/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4af0bc4650f371dc553bccd03d5dfe2704bc660/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=e4af0bc4650f371dc553bccd03d5dfe2704bc660", "patch": "@@ -649,7 +649,32 @@ vect_determine_vectorization_factor (loop_vec_info loop_vinfo)\n \t\t    }\n \t\t  return false;\n \t\t}\n+\t      else if (VECTOR_BOOLEAN_TYPE_P (mask_type)\n+\t\t       != VECTOR_BOOLEAN_TYPE_P (vectype))\n+\t\t{\n+\t\t  if (dump_enabled_p ())\n+\t\t    {\n+\t\t      dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t\t       \"not vectorized: mixed mask and \"\n+\t\t\t\t       \"nonmask vector types in statement, \");\n+\t\t      dump_generic_expr (MSG_MISSED_OPTIMIZATION, TDF_SLIM,\n+\t\t\t\t\t mask_type);\n+\t\t      dump_printf (MSG_MISSED_OPTIMIZATION, \" and \");\n+\t\t      dump_generic_expr (MSG_MISSED_OPTIMIZATION, TDF_SLIM,\n+\t\t\t\t\t vectype);\n+\t\t      dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n+\t\t    }\n+\t\t  return false;\n+\t\t}\n \t    }\n+\n+\t  /* We may compare boolean value loaded as vector of integers.\n+\t     Fix mask_type in such case.  */\n+\t  if (mask_type\n+\t      && !VECTOR_BOOLEAN_TYPE_P (mask_type)\n+\t      && gimple_code (stmt) == GIMPLE_ASSIGN\n+\t      && TREE_CODE_CLASS (gimple_assign_rhs_code (stmt)) == tcc_comparison)\n+\t    mask_type = build_same_sized_truth_vector_type (mask_type);\n \t}\n \n       /* No mask_type should mean loop invariant predicate."}, {"sha": "bf6d1d8011ff51df9d828d83f568e4528a529396", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 52, "deletions": 2, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4af0bc4650f371dc553bccd03d5dfe2704bc660/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4af0bc4650f371dc553bccd03d5dfe2704bc660/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=e4af0bc4650f371dc553bccd03d5dfe2704bc660", "patch": "@@ -2573,6 +2573,57 @@ vect_slp_bb (basic_block bb)\n }\n \n \n+/* Return 1 if vector type of boolean constant which is OPNUM\n+   operand in statement STMT is a boolean vector.  */\n+\n+static bool\n+vect_mask_constant_operand_p (gimple *stmt, int opnum)\n+{\n+  stmt_vec_info stmt_vinfo = vinfo_for_stmt (stmt);\n+  enum tree_code code = gimple_expr_code (stmt);\n+  tree op, vectype;\n+  gimple *def_stmt;\n+  enum vect_def_type dt;\n+\n+  /* For comparison and COND_EXPR type is chosen depending\n+     on the other comparison operand.  */\n+  if (TREE_CODE_CLASS (code) == tcc_comparison)\n+    {\n+      if (opnum)\n+\top = gimple_assign_rhs1 (stmt);\n+      else\n+\top = gimple_assign_rhs2 (stmt);\n+\n+      if (!vect_is_simple_use (op, stmt_vinfo->vinfo, &def_stmt,\n+\t\t\t       &dt, &vectype))\n+\tgcc_unreachable ();\n+\n+      return !vectype || VECTOR_BOOLEAN_TYPE_P (vectype);\n+    }\n+\n+  if (code == COND_EXPR)\n+    {\n+      tree cond = gimple_assign_rhs1 (stmt);\n+\n+      if (TREE_CODE (cond) == SSA_NAME)\n+\treturn false;\n+\n+      if (opnum)\n+\top = TREE_OPERAND (cond, 1);\n+      else\n+\top = TREE_OPERAND (cond, 0);\n+\n+      if (!vect_is_simple_use (op, stmt_vinfo->vinfo, &def_stmt,\n+\t\t\t       &dt, &vectype))\n+\tgcc_unreachable ();\n+\n+      return !vectype || VECTOR_BOOLEAN_TYPE_P (vectype);\n+    }\n+\n+  return VECTOR_BOOLEAN_TYPE_P (STMT_VINFO_VECTYPE (stmt_vinfo));\n+}\n+\n+\n /* For constant and loop invariant defs of SLP_NODE this function returns\n    (vector) defs (VEC_OPRNDS) that will be used in the vectorized stmts.\n    OP_NUM determines if we gather defs for operand 0 or operand 1 of the RHS of\n@@ -2609,8 +2660,7 @@ vect_get_constant_vectors (tree op, slp_tree slp_node,\n \n   /* Check if vector type is a boolean vector.  */\n   if (TREE_CODE (TREE_TYPE (op)) == BOOLEAN_TYPE\n-      && (VECTOR_BOOLEAN_TYPE_P (STMT_VINFO_VECTYPE (stmt_vinfo))\n-\t  || (code == COND_EXPR && op_num < 2)))\n+      && vect_mask_constant_operand_p (stmt, op_num))\n     vector_type\n       = build_same_sized_truth_vector_type (STMT_VINFO_VECTYPE (stmt_vinfo));\n   else"}, {"sha": "f7eee9116d0982ac11f1a5eadd7d2ccb95708941", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4af0bc4650f371dc553bccd03d5dfe2704bc660/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4af0bc4650f371dc553bccd03d5dfe2704bc660/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=e4af0bc4650f371dc553bccd03d5dfe2704bc660", "patch": "@@ -7645,8 +7645,8 @@ vectorizable_comparison (gimple *stmt, gimple_stmt_iterator *gsi,\n \t    }\n \t  else\n \t    {\n-\t      vec_rhs1 = vect_get_vec_def_for_operand (rhs1, stmt, NULL);\n-\t      vec_rhs2 = vect_get_vec_def_for_operand (rhs2, stmt, NULL);\n+\t      vec_rhs1 = vect_get_vec_def_for_operand (rhs1, stmt, vectype);\n+\t      vec_rhs2 = vect_get_vec_def_for_operand (rhs2, stmt, vectype);\n \t    }\n \t}\n       else"}]}