{"sha": "e92d30482ecfa8b870e09648544af9ad54e60ccd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkyZDMwNDgyZWNmYThiODcwZTA5NjQ4NTQ0YWY5YWQ1NGU2MGNjZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-08T22:18:08Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-08T22:18:08Z"}, "message": "(fold, case GT_EXPR): Simplify X < (1 << Y) into X >> Y == 0.\n\nFrom-SVN: r6999", "tree": {"sha": "1a8b7d3e467624056daa3e30865e7e8bd6380057", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a8b7d3e467624056daa3e30865e7e8bd6380057"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e92d30482ecfa8b870e09648544af9ad54e60ccd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e92d30482ecfa8b870e09648544af9ad54e60ccd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e92d30482ecfa8b870e09648544af9ad54e60ccd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e92d30482ecfa8b870e09648544af9ad54e60ccd/comments", "author": null, "committer": null, "parents": [{"sha": "69887ad921a264512d90b5087087476d2deead17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69887ad921a264512d90b5087087476d2deead17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69887ad921a264512d90b5087087476d2deead17"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "4cfd2a93767cfd1bd6c41ef0c91e6d936e1ed8cb", "filename": "gcc/fold-const.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e92d30482ecfa8b870e09648544af9ad54e60ccd/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e92d30482ecfa8b870e09648544af9ad54e60ccd/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e92d30482ecfa8b870e09648544af9ad54e60ccd", "patch": "@@ -4517,6 +4517,30 @@ fold (expr)\n \treturn build (code == EQ_EXPR ? NE_EXPR : EQ_EXPR, type,\n \t\t      arg0, integer_zero_node);\n \n+      /* If X is unsigned, convert X < (1 << Y) into X >> Y == 0\n+\t and similarly for <= into !=.  */\n+      if ((code == LT_EXPR || code == GE_EXPR)\n+\t  && TREE_UNSIGNED (TREE_TYPE (arg0))\n+\t  && TREE_CODE (arg1) == LSHIFT_EXPR\n+\t  && integer_onep (TREE_OPERAND (arg1, 0)))\n+\treturn build (code == LT_EXPR ? EQ_EXPR : NE_EXPR, type, \n+\t\t      build (RSHIFT_EXPR, TREE_TYPE (arg0), arg0,\n+\t\t\t     TREE_OPERAND (arg1, 1)),\n+\t\t      convert (TREE_TYPE (arg0), integer_zero_node));\n+\n+      else if ((code == LT_EXPR || code == GE_EXPR)\n+\t       && TREE_UNSIGNED (TREE_TYPE (arg0))\n+\t       && (TREE_CODE (arg1) == NOP_EXPR\n+\t\t   || TREE_CODE (arg1) == CONVERT_EXPR)\n+\t       && TREE_CODE (TREE_OPERAND (arg1, 0)) == LSHIFT_EXPR\n+\t       && integer_onep (TREE_OPERAND (TREE_OPERAND (arg1, 0), 0)))\n+\treturn\n+\t  build (code == LT_EXPR ? EQ_EXPR : NE_EXPR, type,\n+\t\t convert (TREE_TYPE (arg0),\n+\t\t\t  build (RSHIFT_EXPR, TREE_TYPE (arg0), arg0,\n+\t\t\t\t TREE_OPERAND (TREE_OPERAND (arg1, 0), 1))),\n+\t\t convert (TREE_TYPE (arg0), integer_zero_node));\n+\n       /* Simplify comparison of something with itself.  (For IEEE\n \t floating-point, we can only do some of these simplifications.)  */\n       if (operand_equal_p (arg0, arg1, 0))"}]}