{"sha": "1c4b5a795ad772b0d80d18757593808044b14e90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM0YjVhNzk1YWQ3NzJiMGQ4MGQxODc1NzU5MzgwODA0NGIxNGU5MA==", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2020-05-13T17:38:35Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-07T09:26:58Z"}, "message": "[Ada] Simplify statically known Max_Size_In_Storage_Elements attribute in more cases\n\ngcc/ada/\n\n\t* sem_attr.adb (Eval_Attribute): Generalize static evaluation of\n\tSize attribute references to also handle\n\tMax_Size_In_Storage_Elements references.", "tree": {"sha": "c52d861646b30eadea9c30d169d76127e9de4d37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c52d861646b30eadea9c30d169d76127e9de4d37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c4b5a795ad772b0d80d18757593808044b14e90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c4b5a795ad772b0d80d18757593808044b14e90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c4b5a795ad772b0d80d18757593808044b14e90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c4b5a795ad772b0d80d18757593808044b14e90/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "865ec5b024b21e3fe3fa764068f44ca315a7af63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/865ec5b024b21e3fe3fa764068f44ca315a7af63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/865ec5b024b21e3fe3fa764068f44ca315a7af63"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "0d1f9c59e88f5906186c59e34fa33f21bfe06960", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4b5a795ad772b0d80d18757593808044b14e90/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4b5a795ad772b0d80d18757593808044b14e90/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=1c4b5a795ad772b0d80d18757593808044b14e90", "patch": "@@ -8127,14 +8127,24 @@ package body Sem_Attr is\n       --  for a size from an attribute definition clause). At this stage, this\n       --  can happen only for types (e.g. record types) for which the size is\n       --  always non-static. We exclude generic types from consideration (since\n-      --  they have bogus sizes set within templates).\n+      --  they have bogus sizes set within templates). We can also fold\n+      --  Max_Size_In_Storage_Elements in the same cases.\n \n-      elsif Id = Attribute_Size\n+      elsif (Id = Attribute_Size or\n+             Id = Attribute_Max_Size_In_Storage_Elements)\n         and then Is_Type (P_Entity)\n         and then (not Is_Generic_Type (P_Entity))\n         and then Known_Static_RM_Size (P_Entity)\n       then\n-         Compile_Time_Known_Attribute (N, RM_Size (P_Entity));\n+         declare\n+            Attr_Value : Uint := RM_Size (P_Entity);\n+         begin\n+            if Id = Attribute_Max_Size_In_Storage_Elements then\n+               Attr_Value := (Attr_Value + System_Storage_Unit - 1)\n+                             / System_Storage_Unit;\n+            end if;\n+            Compile_Time_Known_Attribute (N, Attr_Value);\n+         end;\n          return;\n \n       --  We can fold 'Alignment applied to a type if the alignment is known"}]}