{"sha": "47f42744f6e10ad41db926d739306e6f237fd3ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdmNDI3NDRmNmUxMGFkNDFkYjkyNmQ3MzkzMDZlNmYyMzdmZDNhYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-16T11:44:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-16T11:44:23Z"}, "message": "aarch64: Fix up 2 other combine opt regressions vs. GCC8 [PR100075]\n\nThe testcase used to be compiled at -O2 by GCC8 and earlier to:\nf1:\n        neg     w1, w0, asr 16\n        and     w1, w1, 65535\n        orr     w0, w1, w0, lsl 16\n        ret\nf2:\n        neg     w1, w0\n        extr    w0, w1, w0, 16\n        ret\nbut since GCC9 (r9-3594 for f1 and r9-6926 for f2) we compile it into:\nf1:\n        mov     w1, w0\n        sbfx    x0, x1, 16, 16\n        neg     w0, w0\n        bfi     w0, w1, 16, 16\n        ret\nf2:\n        neg     w1, w0\n        sbfx    x0, x0, 16, 16\n        bfi     w0, w1, 16, 16\n        ret\ninstead, i.e. one insn longer each.  With this patch we get:\nf1:\n        mov     w1, w0\n        neg     w0, w1, asr 16\n        bfi     w0, w1, 16, 16\n        ret\nf2:\n        neg     w1, w0\n        extr    w0, w1, w0, 16\n        ret\ni.e. identical f2 and same number of insns as in GCC8 in f1.\nThe combiner unfortunately doesn't try splitters when doing 2 -> 1\ncombination, so it can't be implemented as combine splitters, but\nit could be implemented as define_insn_and_split if desirable.\n\n2021-04-16  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/100075\n\t* config/aarch64/aarch64.md (*neg_asr_si2_extr, *extrsi5_insn_di): New\n\tdefine_insn patterns.\n\n\t* gcc.target/aarch64/pr100075.c: New test.", "tree": {"sha": "7be1205e234f2b3a3ce70d2a2973e6a64a23cee0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7be1205e234f2b3a3ce70d2a2973e6a64a23cee0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47f42744f6e10ad41db926d739306e6f237fd3ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47f42744f6e10ad41db926d739306e6f237fd3ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47f42744f6e10ad41db926d739306e6f237fd3ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47f42744f6e10ad41db926d739306e6f237fd3ac/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49e651990a6966936a0273138dd56ac394e57b16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49e651990a6966936a0273138dd56ac394e57b16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49e651990a6966936a0273138dd56ac394e57b16"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "abfd84526745d029ad4953eabad6dd17b159a218", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f42744f6e10ad41db926d739306e6f237fd3ac/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f42744f6e10ad41db926d739306e6f237fd3ac/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=47f42744f6e10ad41db926d739306e6f237fd3ac", "patch": "@@ -3572,6 +3572,18 @@\n   [(set_attr \"autodetect_type\" \"alu_shift_<shift>_op2\")]\n )\n \n+(define_insn \"*neg_asr_si2_extr\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(neg:SI (match_operator:SI 4 \"subreg_lowpart_operator\"\n+\t\t  [(sign_extract:DI\n+\t\t     (match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t     (match_operand 3 \"aarch64_simd_shift_imm_offset_si\" \"n\")\n+\t\t     (match_operand 2 \"aarch64_simd_shift_imm_offset_si\" \"n\"))])))]\n+  \"INTVAL (operands[2]) + INTVAL (operands[3]) == 32\"\n+  \"neg\\\\t%w0, %w1, asr %2\"\n+  [(set_attr \"autodetect_type\" \"alu_shift_asr_op2\")]\n+)\n+\n (define_insn \"mul<mode>3\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(mult:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n@@ -5383,6 +5395,22 @@\n   [(set_attr \"type\" \"rotate_imm\")]\n )\n \n+(define_insn \"*extrsi5_insn_di\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(ior:SI (ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t   (match_operand 3 \"const_int_operand\" \"n\"))\n+\t\t(match_operator:SI 6 \"subreg_lowpart_operator\"\n+\t\t  [(zero_extract:DI\n+\t\t     (match_operand:DI 2 \"register_operand\" \"r\")\n+\t\t     (match_operand 5 \"const_int_operand\" \"n\")\n+\t\t     (match_operand 4 \"const_int_operand\" \"n\"))])))]\n+  \"UINTVAL (operands[3]) < 32\n+   && UINTVAL (operands[3]) + UINTVAL (operands[4]) == 32\n+   && INTVAL (operands[3]) == INTVAL (operands[5])\"\n+  \"extr\\\\t%w0, %w1, %w2, %4\"\n+  [(set_attr \"type\" \"rotate_imm\")]\n+)\n+\n (define_insn \"*ror<mode>3_insn\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(rotate:GPI (match_operand:GPI 1 \"register_operand\" \"r\")"}, {"sha": "6bdaa2f6407bbd04b16b43afe41d1a164707d364", "filename": "gcc/testsuite/gcc.target/aarch64/pr100075.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f42744f6e10ad41db926d739306e6f237fd3ac/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr100075.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f42744f6e10ad41db926d739306e6f237fd3ac/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr100075.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr100075.c?ref=47f42744f6e10ad41db926d739306e6f237fd3ac", "patch": "@@ -0,0 +1,20 @@\n+/* PR target/100075 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not {\\tsbfx\\tx[0-9]+, x[0-9]+, 16, 16} } } */\n+/* { dg-final { scan-assembler {\\tneg\\tw[0-9]+, w[0-9]+, asr 16} } } */\n+/* { dg-final { scan-assembler {\\textr\\tw[0-9]+, w[0-9]+, w[0-9]+, 16} } } */\n+\n+struct S { short x, y; };\n+\n+struct S\n+f1 (struct S p)\n+{\n+  return (struct S) { -p.y, p.x };\n+}\n+\n+struct S\n+f2 (struct S p)\n+{\n+  return (struct S) { p.y, -p.x };\n+}"}]}