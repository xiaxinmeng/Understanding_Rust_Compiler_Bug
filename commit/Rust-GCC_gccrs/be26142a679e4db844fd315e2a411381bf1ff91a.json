{"sha": "be26142a679e4db844fd315e2a411381bf1ff91a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUyNjE0MmE2NzllNGRiODQ0ZmQzMTVlMmE0MTEzODFiZjFmZjkxYQ==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@vnet.ibm.com", "date": "2011-11-01T18:53:46Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@gcc.gnu.org", "date": "2011-11-01T18:53:46Z"}, "message": "config.gcc (powerpc*-*-linux*): Add powerpc*-*-linux*ppc476* variant.\n\n\t* config.gcc (powerpc*-*-linux*): Add powerpc*-*-linux*ppc476* variant.\n\t* config/rs6000/476.h: New file.\n\t* config/rs6000/476.opt: Likewise.\n\t* config/rs6000/rs6000.h (TARGET_LINK_STACK): New define.\n\t(SET_TARGET_LINK_STACK): Likewise.\n\t(TARGET_ASM_CODE_END): Define.\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Enable\n\tTARGET_LINK_STACK for -mtune=476 and -mtune=476fp.\n\t(rs6000_legitimize_tls_address): Emit the link stack preserving GOT\n\tcode if TARGET_LINK_STACK.\n\t(rs6000_emit_load_toc_table): Likewise.\n\t(output_function_profiler): Likewise\n\t(macho_branch_islands): Likewise\n\t(machopic_output_stub): Likewise\n\t(get_ppc476_thunk_name): New function.\n\t(rs6000_code_end): Likewise.\n\t* config/rs6000/rs6000.md (load_toc_v4_PIC_1, load_toc_v4_PIC_1b):\n\tConvert to a define_expand.\n\t(load_toc_v4_PIC_1_normal): New define_insn.\n\t(load_toc_v4_PIC_1_476): Likewise.\n\t(load_toc_v4_PIC_1b_normal): Likewise.\n\t(load_toc_v4_PIC_1b_476): Likewise.\n\nFrom-SVN: r180741", "tree": {"sha": "ed4e4ad3bd20919312f5cf0177e09e2b36fec9fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed4e4ad3bd20919312f5cf0177e09e2b36fec9fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be26142a679e4db844fd315e2a411381bf1ff91a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be26142a679e4db844fd315e2a411381bf1ff91a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be26142a679e4db844fd315e2a411381bf1ff91a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be26142a679e4db844fd315e2a411381bf1ff91a/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f1f59bc72456d213ef80a7f5688ffeb2af2dc020", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1f59bc72456d213ef80a7f5688ffeb2af2dc020", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1f59bc72456d213ef80a7f5688ffeb2af2dc020"}], "stats": {"total": 303, "additions": 286, "deletions": 17}, "files": [{"sha": "fd29e51553da200504c6c3ebfa958a58a7900485", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be26142a679e4db844fd315e2a411381bf1ff91a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be26142a679e4db844fd315e2a411381bf1ff91a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be26142a679e4db844fd315e2a411381bf1ff91a", "patch": "@@ -1,3 +1,28 @@\n+2011-11-01  Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\t* config.gcc (powerpc*-*-linux*): Add powerpc*-*-linux*ppc476* variant.\n+\t* config/rs6000/476.h: New file.\n+\t* config/rs6000/476.opt: Likewise.\n+\t* config/rs6000/rs6000.h (TARGET_LINK_STACK): New define.\n+\t(SET_TARGET_LINK_STACK): Likewise.\n+\t(TARGET_ASM_CODE_END): Define.\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Enable\n+\tTARGET_LINK_STACK for -mtune=476 and -mtune=476fp.\n+\t(rs6000_legitimize_tls_address): Emit the link stack preserving GOT\n+\tcode if TARGET_LINK_STACK.\n+\t(rs6000_emit_load_toc_table): Likewise.\n+\t(output_function_profiler): Likewise\n+\t(macho_branch_islands): Likewise\n+\t(machopic_output_stub): Likewise\n+\t(get_ppc476_thunk_name): New function.\n+\t(rs6000_code_end): Likewise.\n+\t* config/rs6000/rs6000.md (load_toc_v4_PIC_1, load_toc_v4_PIC_1b):\n+\tConvert to a define_expand.\n+\t(load_toc_v4_PIC_1_normal): New define_insn.\n+\t(load_toc_v4_PIC_1_476): Likewise.\n+\t(load_toc_v4_PIC_1b_normal): Likewise.\n+\t(load_toc_v4_PIC_1b_476): Likewise.\n+\n 2011-11-01  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/50910"}, {"sha": "2cb8b36589117d44aa18295e6b1f3332bf8ce2e2", "filename": "gcc/config.gcc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be26142a679e4db844fd315e2a411381bf1ff91a/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be26142a679e4db844fd315e2a411381bf1ff91a/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=be26142a679e4db844fd315e2a411381bf1ff91a", "patch": "@@ -2145,6 +2145,9 @@ powerpc-*-linux* | powerpc64-*-linux*)\n \tesac\n \ttmake_file=\"${tmake_file} t-slibgcc-libgcc\"\n \tcase ${target} in\n+\t    powerpc*-*-linux*ppc476*)\n+\t\ttm_file=\"${tm_file} rs6000/476.h\"\n+\t\textra_options=\"${extra_options} rs6000/476.opt\" ;;\n \t    powerpc*-*-linux*altivec*)\n \t\ttm_file=\"${tm_file} rs6000/linuxaltivec.h\" ;;\n \t    powerpc*-*-linux*spe*)"}, {"sha": "70ee7bd7406f1e5dedb80d9fdd52ab455ffdb233", "filename": "gcc/config/rs6000/476.h", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be26142a679e4db844fd315e2a411381bf1ff91a/gcc%2Fconfig%2Frs6000%2F476.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be26142a679e4db844fd315e2a411381bf1ff91a/gcc%2Fconfig%2Frs6000%2F476.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F476.h?ref=be26142a679e4db844fd315e2a411381bf1ff91a", "patch": "@@ -0,0 +1,32 @@\n+/* Enable IBM PowerPC 476 support.\n+   Copyright (C) 2011 Free Software Foundation, Inc.\n+   Contributed by Peter Bergner (bergner@vnet.ibm.com)\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#undef TARGET_LINK_STACK\n+#define TARGET_LINK_STACK (rs6000_link_stack)\n+\n+#undef SET_TARGET_LINK_STACK\n+#define SET_TARGET_LINK_STACK(X) do { TARGET_LINK_STACK = (X); } while (0)\n+\n+#undef TARGET_ASM_CODE_END\n+#define TARGET_ASM_CODE_END rs6000_code_end"}, {"sha": "c987fc6c662af213a4aa7595bc0347a5b143e116", "filename": "gcc/config/rs6000/476.opt", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be26142a679e4db844fd315e2a411381bf1ff91a/gcc%2Fconfig%2Frs6000%2F476.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be26142a679e4db844fd315e2a411381bf1ff91a/gcc%2Fconfig%2Frs6000%2F476.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F476.opt?ref=be26142a679e4db844fd315e2a411381bf1ff91a", "patch": "@@ -0,0 +1,24 @@\n+; IBM PowerPC 476 options.\n+;\n+; Copyright (C) 2011 Free Software Foundation, Inc.\n+; Contributed by Peter Bergner (bergner@vnet.ibm.com)\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+mpreserve-link-stack\n+Target Var(rs6000_link_stack) Init(-1) Save\n+Preserve the PowerPC 476's link stack by matching up a blr with the bcl/bl insns used for GOT accesses"}, {"sha": "23d2d2aa3893688e22bf413a55a43a9725e6f543", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be26142a679e4db844fd315e2a411381bf1ff91a/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be26142a679e4db844fd315e2a411381bf1ff91a/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=be26142a679e4db844fd315e2a411381bf1ff91a", "patch": "@@ -173,6 +173,7 @@ extern void rs6000_emit_eh_reg_restore (rtx, rtx);\n extern const char * output_isel (rtx *);\n extern void rs6000_call_indirect_aix (rtx, rtx, rtx);\n extern void rs6000_aix_asm_output_dwarf_table_ref (char *);\n+extern void get_ppc476_thunk_name (char name[32]);\n \n /* Declare functions in rs6000-c.c */\n "}, {"sha": "5b4607a5659dbbaebd85f42beffb79815a079377", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 135, "deletions": 13, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be26142a679e4db844fd315e2a411381bf1ff91a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be26142a679e4db844fd315e2a411381bf1ff91a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=be26142a679e4db844fd315e2a411381bf1ff91a", "patch": "@@ -1613,7 +1613,6 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #undef TARGET_LEGITIMATE_CONSTANT_P\n #define TARGET_LEGITIMATE_CONSTANT_P rs6000_legitimate_constant_p\n \n-struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n \n /* Simplifications for entries below.  */\n@@ -3239,6 +3238,11 @@ rs6000_option_override_internal (bool global_init_p)\n     target_option_default_node = target_option_current_node\n       = build_target_option_node ();\n \n+  /* If not explicitly specified via option, decide whether to generate the\n+     extra blr's required to preserve the link stack on some cpus (eg, 476).  */\n+  if (TARGET_LINK_STACK == -1)\n+    SET_TARGET_LINK_STACK (rs6000_cpu == PROCESSOR_PPC476 && flag_pic);\n+\n   return ret;\n }\n \n@@ -5868,6 +5872,8 @@ rs6000_legitimize_tls_address (rtx addr, enum tls_model model)\n \t\t  lab = gen_label_rtx ();\n \t\t  emit_insn (gen_load_toc_v4_PIC_1b (gsym, lab));\n \t\t  emit_move_insn (tmp1, gen_rtx_REG (Pmode, LR_REGNO));\n+\t\t  if (TARGET_LINK_STACK)\n+\t\t    emit_insn (gen_addsi3 (tmp1, tmp1, GEN_INT (4)));\n \t\t  emit_move_insn (tmp2, mem);\n \t\t  last = emit_insn (gen_addsi3 (got, tmp1, tmp2));\n \t\t  set_unique_reg_note (last, REG_EQUAL, gsym);\n@@ -18866,6 +18872,8 @@ rs6000_emit_load_toc_table (int fromprolog)\n \t  lab = gen_label_rtx ();\n \t  emit_insn (gen_load_toc_v4_PIC_1b (tocsym, lab));\n \t  emit_move_insn (dest, gen_rtx_REG (Pmode, LR_REGNO));\n+\t  if (TARGET_LINK_STACK)\n+\t    emit_insn (gen_addsi3 (dest, dest, GEN_INT (4)));\n \t  emit_move_insn (temp0, gen_rtx_MEM (Pmode, dest));\n \t}\n       emit_insn (gen_addsi3 (dest, temp0, dest));\n@@ -22526,7 +22534,15 @@ output_function_profiler (FILE *file, int labelno)\n \t}\n       else if (TARGET_SECURE_PLT && flag_pic)\n \t{\n-\t  asm_fprintf (file, \"\\tbcl 20,31,1f\\n1:\\n\\t{st|stw} %s,4(%s)\\n\",\n+\t  if (TARGET_LINK_STACK)\n+\t    {\n+\t      char name[32];\n+\t      get_ppc476_thunk_name (name);\n+\t      asm_fprintf (file, \"\\tbl %s\\n\", name);\n+\t    }\n+\t  else\n+\t    asm_fprintf (file, \"\\tbcl 20,31,1f\\n1:\\n\");\n+\t  asm_fprintf (file, \"\\t{st|stw} %s,4(%s)\\n\",\n \t\t       reg_names[0], reg_names[1]);\n \t  asm_fprintf (file, \"\\tmflr %s\\n\", reg_names[12]);\n \t  asm_fprintf (file, \"\\t{cau|addis} %s,%s,\",\n@@ -22551,10 +22567,24 @@ output_function_profiler (FILE *file, int labelno)\n \t  asm_fprintf (file, \"\\t{st|stw} %s,4(%s)\\n\",\n \t\t       reg_names[0], reg_names[1]);\n \t  /* Now, we need to get the address of the label.  */\n-\t  fputs (\"\\tbcl 20,31,1f\\n\\t.long \", file);\n-\t  assemble_name (file, buf);\n-\t  fputs (\"-.\\n1:\", file);\n-\t  asm_fprintf (file, \"\\tmflr %s\\n\", reg_names[11]);\n+\t  if (TARGET_LINK_STACK)\n+\t    {\n+\t      char name[32];\n+\t      get_ppc476_thunk_name (name);\n+\t      asm_fprintf (file, \"\\tbl %s\\n\\tb 1f\\n\\t.long \", name);\n+\t      assemble_name (file, buf);\n+\t      fputs (\"-.\\n1:\", file);\n+\t      asm_fprintf (file, \"\\tmflr %s\\n\", reg_names[11]);\n+\t      asm_fprintf (file, \"\\taddi %s,%s,4\\n\",\n+\t\t\t   reg_names[11], reg_names[11]);\n+\t    }\n+\t  else\n+\t    {\n+\t      fputs (\"\\tbcl 20,31,1f\\n\\t.long \", file);\n+\t      assemble_name (file, buf);\n+\t      fputs (\"-.\\n1:\", file);\n+\t      asm_fprintf (file, \"\\tmflr %s\\n\", reg_names[11]);\n+\t    }\n \t  asm_fprintf (file, \"\\t{l|lwz} %s,0(%s)\\n\",\n \t\t       reg_names[0], reg_names[11]);\n \t  asm_fprintf (file, \"\\t{cax|add} %s,%s,%s\\n\",\n@@ -25037,11 +25067,24 @@ macho_branch_islands (void)\n #endif /* DBX_DEBUGGING_INFO || XCOFF_DEBUGGING_INFO */\n       if (flag_pic)\n \t{\n-\t  strcat (tmp_buf, \":\\n\\tmflr r0\\n\\tbcl 20,31,\");\n-\t  strcat (tmp_buf, label);\n-\t  strcat (tmp_buf, \"_pic\\n\");\n-\t  strcat (tmp_buf, label);\n-\t  strcat (tmp_buf, \"_pic:\\n\\tmflr r11\\n\");\n+\t  if (TARGET_LINK_STACK)\n+\t    {\n+\t      char name[32];\n+\t      get_ppc64_thunk_name (name);\n+\t      strcat (tmp_buf, \":\\n\\tmflr r0\\n\\tbl \");\n+\t      strcat (tmp_buf, name);\n+\t      strcat (tmp_buf, \"\\n\");\n+\t      strcat (tmp_buf, label);\n+\t      strcat (tmp_buf, \"_pic:\\n\\tmflr r11\\n\");\n+\t    }\n+\t  else\n+\t    {\n+\t      strcat (tmp_buf, \":\\n\\tmflr r0\\n\\tbcl 20,31,\");\n+\t      strcat (tmp_buf, label);\n+\t      strcat (tmp_buf, \"_pic\\n\");\n+\t      strcat (tmp_buf, label);\n+\t      strcat (tmp_buf, \"_pic:\\n\\tmflr r11\\n\");\n+\t    }\n \n \t  strcat (tmp_buf, \"\\taddis r11,r11,ha16(\");\n \t  strcat (tmp_buf, name_buf);\n@@ -25187,8 +25230,18 @@ machopic_output_stub (FILE *file, const char *symb, const char *stub)\n       sprintf (local_label_0, \"\\\"L%011d$spb\\\"\", label);\n \n       fprintf (file, \"\\tmflr r0\\n\");\n-      fprintf (file, \"\\tbcl 20,31,%s\\n\", local_label_0);\n-      fprintf (file, \"%s:\\n\\tmflr r11\\n\", local_label_0);\n+      if (TARGET_LINK_STACK)\n+\t{\n+\t  char name[32];\n+\t  get_ppc476_thunk_name (name);\n+\t  fprintf (file, \"\\tbl %s\\n\", name);\n+\t  fprintf (file, \"%s:\\n\\tmflr r11\\n\", local_label_0);\n+\t}\n+      else\n+\t{\n+\t  fprintf (file, \"\\tbcl 20,31,%s\\n\", local_label_0);\n+\t  fprintf (file, \"%s:\\n\\tmflr r11\\n\", local_label_0);\n+\t}\n       fprintf (file, \"\\taddis r11,r11,ha16(%s-%s)\\n\",\n \t       lazy_ptr_name, local_label_0);\n       fprintf (file, \"\\tmtlr r0\\n\");\n@@ -27895,4 +27948,73 @@ rs6000_save_toc_in_prologue_p (void)\n   return (cfun && cfun->machine && cfun->machine->save_toc_in_prologue);\n }\n \n+/* Fills in the label name that should be used for a 476 link stack thunk.  */\n+\n+void\n+get_ppc476_thunk_name (char name[32])\n+{\n+  gcc_assert (TARGET_LINK_STACK);\n+\n+  if (HAVE_GAS_HIDDEN)\n+    sprintf (name, \"__ppc476.get_thunk\");\n+  else\n+    ASM_GENERATE_INTERNAL_LABEL (name, \"LPPC476_\", 0);\n+}\n+\n+/* This function emits the simple thunk routine that is used to preserve\n+   the link stack on the 476 cpu.  */\n+\n+static void\n+rs6000_code_end (void)\n+{\n+  char name[32];\n+  tree decl;\n+\n+  if (!TARGET_LINK_STACK)\n+    return;\n+\n+  get_ppc476_thunk_name (name);\n+\n+  decl = build_decl (BUILTINS_LOCATION, FUNCTION_DECL, get_identifier (name),\n+\t\t     build_function_type_list (void_type_node, NULL_TREE));\n+  DECL_RESULT (decl) = build_decl (BUILTINS_LOCATION, RESULT_DECL,\n+\t\t\t\t   NULL_TREE, void_type_node);\n+  TREE_PUBLIC (decl) = 1;\n+  TREE_STATIC (decl) = 1;\n+\n+  if (HAVE_GAS_HIDDEN)\n+    {\n+      DECL_COMDAT_GROUP (decl) = DECL_ASSEMBLER_NAME (decl);\n+      targetm.asm_out.unique_section (decl, 0);\n+      switch_to_section (get_named_section (decl, NULL, 0));\n+      DECL_WEAK (decl) = 1;\n+      ASM_WEAKEN_DECL (asm_out_file, decl, name, 0);\n+      targetm.asm_out.globalize_label (asm_out_file, name);\n+      targetm.asm_out.assemble_visibility (decl, VISIBILITY_HIDDEN);\n+      ASM_DECLARE_FUNCTION_NAME (asm_out_file, name, decl);\n+    }\n+  else\n+    {\n+      switch_to_section (text_section);\n+      ASM_OUTPUT_LABEL (asm_out_file, name);\n+    }\n+\n+  DECL_INITIAL (decl) = make_node (BLOCK);\n+  current_function_decl = decl;\n+  init_function_start (decl);\n+  first_function_block_is_cold = false;\n+  /* Make sure unwind info is emitted for the thunk if needed.  */\n+  final_start_function (emit_barrier (), asm_out_file, 1);\n+\n+  fputs (\"\\tblr\\n\", asm_out_file);\n+\n+  final_end_function ();\n+  init_insn_lengths ();\n+  free_after_compilation (cfun);\n+  set_cfun (NULL);\n+  current_function_decl = NULL;\n+}\n+\n+struct gcc_target targetm = TARGET_INITIALIZER;\n+\n #include \"gt-rs6000.h\""}, {"sha": "d0cfabb84494dce4f0532a7e1c3e43d10dd770ec", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be26142a679e4db844fd315e2a411381bf1ff91a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be26142a679e4db844fd315e2a411381bf1ff91a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=be26142a679e4db844fd315e2a411381bf1ff91a", "patch": "@@ -313,6 +313,14 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define HAVE_AS_TLS 0\n #endif\n \n+#ifndef TARGET_LINK_STACK\n+#define TARGET_LINK_STACK 0\n+#endif\n+\n+#ifndef SET_TARGET_LINK_STACK\n+#define SET_TARGET_LINK_STACK(X) do { } while (0)\n+#endif\n+\n /* Return 1 for a symbol ref for a thread-local storage symbol.  */\n #define RS6000_SYMBOL_REF_TLS_P(RTX) \\\n   (GET_CODE (RTX) == SYMBOL_REF && SYMBOL_REF_TLS_MODEL (RTX) != 0)"}, {"sha": "331aa79aac0c57c641602c912984322d3bec9c86", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 58, "deletions": 4, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be26142a679e4db844fd315e2a411381bf1ff91a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be26142a679e4db844fd315e2a411381bf1ff91a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=be26142a679e4db844fd315e2a411381bf1ff91a", "patch": "@@ -12087,27 +12087,81 @@\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"4\")])\n \n-(define_insn \"load_toc_v4_PIC_1\"\n+(define_expand \"load_toc_v4_PIC_1\"\n+  [(parallel [(set (reg:SI LR_REGNO)\n+\t\t   (match_operand:SI 0 \"immediate_operand\" \"s\"))\n+\t      (use (unspec [(match_dup 0)] UNSPEC_TOC))])]\n+  \"TARGET_ELF && DEFAULT_ABI != ABI_AIX\n+   && (flag_pic == 2 || (flag_pic && TARGET_SECURE_PLT))\"\n+  \"\")\n+\n+(define_insn \"load_toc_v4_PIC_1_normal\"\n   [(set (reg:SI LR_REGNO)\n \t(match_operand:SI 0 \"immediate_operand\" \"s\"))\n    (use (unspec [(match_dup 0)] UNSPEC_TOC))]\n-  \"TARGET_ELF && DEFAULT_ABI != ABI_AIX\n+  \"!TARGET_LINK_STACK && TARGET_ELF && DEFAULT_ABI != ABI_AIX\n    && (flag_pic == 2 || (flag_pic && TARGET_SECURE_PLT))\"\n   \"bcl 20,31,%0\\\\n%0:\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"4\")])\n \n-(define_insn \"load_toc_v4_PIC_1b\"\n+(define_insn \"load_toc_v4_PIC_1_476\"\n+  [(set (reg:SI LR_REGNO)\n+\t(match_operand:SI 0 \"immediate_operand\" \"s\"))\n+   (use (unspec [(match_dup 0)] UNSPEC_TOC))]\n+  \"TARGET_LINK_STACK && TARGET_ELF && DEFAULT_ABI != ABI_AIX\n+   && (flag_pic == 2 || (flag_pic && TARGET_SECURE_PLT))\"\n+  \"*\n+{\n+  char name[32];\n+  static char templ[32];\n+\n+  get_ppc476_thunk_name (name);\n+  sprintf (templ, \\\"bl %s\\\\n%%0:\\\", name);\n+  return templ;\n+}\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_expand \"load_toc_v4_PIC_1b\"\n+  [(parallel [(set (reg:SI LR_REGNO)\n+\t\t   (unspec:SI [(match_operand:SI 0 \"immediate_operand\" \"s\")\n+\t\t\t       (label_ref (match_operand 1 \"\" \"\"))]\n+\t\t           UNSPEC_TOCPTR))\n+\t      (match_dup 1)])]\n+  \"TARGET_ELF && DEFAULT_ABI != ABI_AIX && flag_pic == 2\"\n+  \"\")\n+\n+(define_insn \"load_toc_v4_PIC_1b_normal\"\n   [(set (reg:SI LR_REGNO)\n \t(unspec:SI [(match_operand:SI 0 \"immediate_operand\" \"s\")\n \t\t    (label_ref (match_operand 1 \"\" \"\"))]\n \t\tUNSPEC_TOCPTR))\n    (match_dup 1)]\n-  \"TARGET_ELF && DEFAULT_ABI != ABI_AIX && flag_pic == 2\"\n+  \"!TARGET_LINK_STACK && TARGET_ELF && DEFAULT_ABI != ABI_AIX && flag_pic == 2\"\n   \"bcl 20,31,$+8\\;.long %0-$\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"8\")])\n \n+(define_insn \"load_toc_v4_PIC_1b_476\"\n+  [(set (reg:SI LR_REGNO)\n+\t(unspec:SI [(match_operand:SI 0 \"immediate_operand\" \"s\")\n+\t\t    (label_ref (match_operand 1 \"\" \"\"))]\n+\t\tUNSPEC_TOCPTR))\n+   (match_dup 1)]\n+  \"TARGET_LINK_STACK && TARGET_ELF && DEFAULT_ABI != ABI_AIX && flag_pic == 2\"\n+  \"*\n+{\n+  char name[32];\n+  static char templ[32];\n+\n+  get_ppc476_thunk_name (name);\n+  sprintf (templ, \\\"bl %s\\\\n\\\\tb $+8\\\\n\\\\t.long %%0-$\\\", name);\n+  return templ;\n+}\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"16\")])\n+\n (define_insn \"load_toc_v4_PIC_2\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(mem:SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")"}]}