{"sha": "f5a76aea0ddbb87fe8b4f64a283951d7e687b84c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVhNzZhZWEwZGRiYjg3ZmU4YjRmNjRhMjgzOTUxZDdlNjg3Yjg0Yw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-06-07T17:53:03Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-06-07T17:53:03Z"}, "message": "gimple-low.c (struct lower_data): Add the_return_label and one_return_stmt.\n\n        * gimple-low.c (struct lower_data): Add the_return_label and\n        one_return_stmt.\n        (lower_function_body): Initialize and use them.\n        (lower_return_expr): New.\n        (lower_stmt): Call it.\n        * gimplify.c (gimplify_return_expr): Force the argument to be either\n        null or a result_decl.\n        * tree-gimple.c: Update gimple grammer to match.\n        * tree-ssa-copyrename.c (copy_rename_partition_coalesce): Deny\n        coalescing of result_decls.\ntestsuite/\n        * gcc.dg/tree-ssa/20030728-1.c: Fixup return value to not match\n        if temporaries.\n\nFrom-SVN: r82701", "tree": {"sha": "ae09b8f6224714650658af6382e87de0bae03de0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae09b8f6224714650658af6382e87de0bae03de0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5a76aea0ddbb87fe8b4f64a283951d7e687b84c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5a76aea0ddbb87fe8b4f64a283951d7e687b84c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5a76aea0ddbb87fe8b4f64a283951d7e687b84c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5a76aea0ddbb87fe8b4f64a283951d7e687b84c/comments", "author": null, "committer": null, "parents": [{"sha": "8cd0b81e9e372e8d7ff510d59e74e1a74616d773", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cd0b81e9e372e8d7ff510d59e74e1a74616d773", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cd0b81e9e372e8d7ff510d59e74e1a74616d773"}], "stats": {"total": 121, "additions": 68, "deletions": 53}, "files": [{"sha": "e42f1ccb11119a28ec8584d002f237cd5f819aec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a76aea0ddbb87fe8b4f64a283951d7e687b84c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a76aea0ddbb87fe8b4f64a283951d7e687b84c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5a76aea0ddbb87fe8b4f64a283951d7e687b84c", "patch": "@@ -1,3 +1,16 @@\n+2004-06-07  Richard Henderson  <rth@redhat.com>\n+\n+\t* gimple-low.c (struct lower_data): Add the_return_label and\n+\tone_return_stmt.\n+\t(lower_function_body): Initialize and use them.\n+\t(lower_return_expr): New.\n+\t(lower_stmt): Call it.\n+\t* gimplify.c (gimplify_return_expr): Force the argument to be either\n+\tnull or a result_decl.\n+\t* tree-gimple.c: Update gimple grammer to match.\n+\t* tree-ssa-copyrename.c (copy_rename_partition_coalesce): Deny\n+\tcoalescing of result_decls.\n+\n 2004-06-07  Richard Henderson  <rth@redhat.com>\n \n \tPR rtl-opt/15193"}, {"sha": "458980f898f0424608d509f5d508c3e51cf3407f", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a76aea0ddbb87fe8b4f64a283951d7e687b84c/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a76aea0ddbb87fe8b4f64a283951d7e687b84c/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=f5a76aea0ddbb87fe8b4f64a283951d7e687b84c", "patch": "@@ -46,11 +46,16 @@ struct lower_data\n {\n   /* Block the current statement belongs to.  */\n   tree block;\n+\n+  /* Label that unifies the return statements.  */\n+  tree the_return_label;\n+  tree one_return_stmt;\n };\n \n static void lower_stmt (tree_stmt_iterator *, struct lower_data *);\n static void lower_bind_expr (tree_stmt_iterator *, struct lower_data *);\n static void lower_cond_expr (tree_stmt_iterator *, struct lower_data *);\n+static void lower_return_expr (tree_stmt_iterator *, struct lower_data *);\n static bool expand_var_p (tree);\n \n /* Lowers the body of current_function_decl.  */\n@@ -71,11 +76,25 @@ lower_function_body (void)\n   BLOCK_CHAIN (data.block) = NULL_TREE;\n   TREE_ASM_WRITTEN (data.block) = 1;\n \n+  data.the_return_label = NULL_TREE;\n+  data.one_return_stmt = NULL_TREE;\n+\n   *body_p = alloc_stmt_list ();\n   i = tsi_start (*body_p);\n   tsi_link_after (&i, bind, TSI_NEW_STMT);\n   lower_bind_expr (&i, &data);\n \n+  /* If we lowered any return statements, emit the representative at the\n+     end of the function.  */\n+  if (data.one_return_stmt)\n+    {\n+      tree t;\n+      t = build (LABEL_EXPR, void_type_node, data.the_return_label);\n+      i = tsi_last (*body_p);\n+      tsi_link_after (&i, t, TSI_CONTINUE_LINKING);\n+      tsi_link_after (&i, data.one_return_stmt, TSI_CONTINUE_LINKING);\n+    }\n+\n   if (data.block != DECL_INITIAL (current_function_decl))\n     abort ();\n   BLOCK_SUBBLOCKS (data.block)\n@@ -136,6 +155,9 @@ lower_stmt (tree_stmt_iterator *tsi, struct lower_data *data)\n     case COND_EXPR:\n       lower_cond_expr (tsi, data);\n       return;\n+    case RETURN_EXPR:\n+      lower_return_expr (tsi, data);\n+      return;\n \n     case TRY_FINALLY_EXPR:\n     case TRY_CATCH_EXPR:\n@@ -151,7 +173,6 @@ lower_stmt (tree_stmt_iterator *tsi, struct lower_data *data)\n       \n     case NOP_EXPR:\n     case ASM_EXPR:\n-    case RETURN_EXPR:\n     case MODIFY_EXPR:\n     case CALL_EXPR:\n     case GOTO_EXPR:\n@@ -367,6 +388,22 @@ lower_cond_expr (tree_stmt_iterator *tsi, struct lower_data *data)\n \n   tsi_next (tsi);\n }\n+\n+static void\n+lower_return_expr (tree_stmt_iterator *tsi, struct lower_data *data)\n+{\n+  tree stmt, label = data->the_return_label;\n+\n+  if (!label)\n+    {\n+      data->the_return_label = label = create_artificial_label ();\n+      data->one_return_stmt = tsi_stmt (*tsi);\n+    }\n+\n+  stmt = build (GOTO_EXPR, void_type_node, label);\n+  tsi_link_before (tsi, stmt, TSI_SAME_STMT);\n+  tsi_delink (tsi);\n+}\n \f\n \n /* Record the variables in VARS.  */\n@@ -468,5 +505,3 @@ struct tree_opt_pass pass_remove_useless_vars =\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func\t\t\t/* todo_flags_finish */\n };\n-\n-"}, {"sha": "8ec6e0d19d66dd0ed73fae464c91a75cc1bdefde", "filename": "gcc/gimplify.c", "status": "modified", "additions": 3, "deletions": 46, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a76aea0ddbb87fe8b4f64a283951d7e687b84c/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a76aea0ddbb87fe8b4f64a283951d7e687b84c/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=f5a76aea0ddbb87fe8b4f64a283951d7e687b84c", "patch": "@@ -899,54 +899,11 @@ gimplify_return_expr (tree stmt, tree *pre_p)\n \n   /* We need to pass the full MODIFY_EXPR down so that special handling\n      can replace it with something else.  */\n-  gimplify_stmt (&ret_expr);\n+  gimplify_stmt (&TREE_OPERAND (stmt, 0));\n+  append_to_statement_list (TREE_OPERAND (stmt, 0), pre_p);\n \n-  if (result == NULL_TREE)\n-    TREE_OPERAND (stmt, 0) = NULL_TREE;\n-  else if (ret_expr == TREE_OPERAND (stmt, 0))\n-    /* It was already GIMPLE.  */\n-    return GS_ALL_DONE;\n-  else\n-    {\n-      /* If there's still a MODIFY_EXPR of the RESULT_DECL after\n-\t gimplification, find it so we can put it in the RETURN_EXPR.  */\n-      tree ret = NULL_TREE;\n-\n-      if (TREE_CODE (ret_expr) == STATEMENT_LIST)\n-\t{\n-\t  tree_stmt_iterator si;\n-\t  for (si = tsi_start (ret_expr); !tsi_end_p (si); tsi_next (&si))\n-\t    {\n-\t      tree sub = tsi_stmt (si);\n-\t      if (TREE_CODE (sub) == MODIFY_EXPR\n-\t\t  && TREE_OPERAND (sub, 0) == result)\n-\t\t{\n-\t\t  ret = sub;\n-\t\t  if (tsi_one_before_end_p (si))\n-\t\t    tsi_delink (&si);\n-\t\t  else\n-\t\t    {\n-\t\t      /* If there were posteffects after the MODIFY_EXPR,\n-\t\t\t we need a temporary.  */\n-\t\t      tree tmp = create_tmp_var (TREE_TYPE (result), \"retval\");\n-\t\t      TREE_OPERAND (ret, 0) = tmp;\n-\t\t      ret = build (MODIFY_EXPR, TREE_TYPE (result),\n-\t\t\t\t   result, tmp);\n-\t\t    }\n-\t\t  break;\n-\t\t}\n-\t    }\n-\t}\n-\n-      if (ret)\n-\tTREE_OPERAND (stmt, 0) = ret;\n-      else\n-\t/* The return value must be set up some other way.  Just tell\n-\t   expand_return that we're returning the RESULT_DECL.  */\n-\tTREE_OPERAND (stmt, 0) = result;\n-    }\n+  TREE_OPERAND (stmt, 0) = result;\n \n-  append_to_statement_list (ret_expr, pre_p);\n   return GS_ALL_DONE;\n }\n "}, {"sha": "8063bac70f159dc31c9ee48aea27bc3bbc7ca87d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a76aea0ddbb87fe8b4f64a283951d7e687b84c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a76aea0ddbb87fe8b4f64a283951d7e687b84c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f5a76aea0ddbb87fe8b4f64a283951d7e687b84c", "patch": "@@ -1,3 +1,8 @@\n+2004-06-07  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/20030728-1.c: Fixup return value to not match\n+\tif temporaries.\n+\n 2004-06-07  David Edelsohn  <edelsohn@gnu.org>\n \n \t* g++.dg/eh/elide1.C: Remove XFAIL."}, {"sha": "04d5a51aca61f3a76aca4bd734f41ef1f8331a91", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030728-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a76aea0ddbb87fe8b4f64a283951d7e687b84c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030728-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a76aea0ddbb87fe8b4f64a283951d7e687b84c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030728-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030728-1.c?ref=f5a76aea0ddbb87fe8b4f64a283951d7e687b84c", "patch": "@@ -35,7 +35,7 @@ objects_must_conflict_p (t1, t2)\n \n   if ((t1->common.code == ARRAY_TYPE) != (t2\n                                           && t2->common.code == ARRAY_TYPE))\n-    return 0;\n+    return 11;\n \n \n   return foo (t2 ? get_alias_set (t2) : 0);"}, {"sha": "4643ac652f4eba6b4206d2e5448b1a2200cf0c0a", "filename": "gcc/tree-gimple.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a76aea0ddbb87fe8b4f64a283951d7e687b84c/gcc%2Ftree-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a76aea0ddbb87fe8b4f64a283951d7e687b84c/gcc%2Ftree-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-gimple.c?ref=f5a76aea0ddbb87fe8b4f64a283951d7e687b84c", "patch": "@@ -79,9 +79,7 @@ Boston, MA 02111-1307, USA.  */\n        GOTO_EXPR\n          op0 -> LABEL_DECL | '*' ID\n      | RETURN_EXPR\n-         op0 -> modify-stmt | NULL_TREE\n-\t (maybe -> RESULT_DECL | NULL_TREE? seems like some of expand_return\n-\t  depends on getting a MODIFY_EXPR.)\n+         op0 -> RESULT_DECL | NULL_TREE\n      | THROW_EXPR?  do we need/want such a thing for opts, perhaps\n          to generate an ERT_THROW region?  I think so.\n \t Hmm...this would only work at the GIMPLE level, where we know that"}, {"sha": "369c02fbd97606b80af96f70f2a6b2f3eea31812", "filename": "gcc/tree-ssa-copyrename.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a76aea0ddbb87fe8b4f64a283951d7e687b84c/gcc%2Ftree-ssa-copyrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a76aea0ddbb87fe8b4f64a283951d7e687b84c/gcc%2Ftree-ssa-copyrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copyrename.c?ref=f5a76aea0ddbb87fe8b4f64a283951d7e687b84c", "patch": "@@ -187,6 +187,13 @@ copy_rename_partition_coalesce (var_map map, tree var1, tree var2, FILE *debug)\n       return;\n     }\n \n+  if ((TREE_CODE (root1) == RESULT_DECL) != (TREE_CODE (root2) == RESULT_DECL))\n+    {\n+      if (debug)\n+        fprintf (debug, \" : One root a RESULT_DECL. No coalesce.\\n\");\n+      return;\n+    }\n+\n   gimp1 = is_gimple_tmp_var (root1);\n   gimp2 = is_gimple_tmp_var (root2);\n "}]}