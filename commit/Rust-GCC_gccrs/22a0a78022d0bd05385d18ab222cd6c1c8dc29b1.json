{"sha": "22a0a78022d0bd05385d18ab222cd6c1c8dc29b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJhMGE3ODAyMmQwYmQwNTM4NWQxOGFiMjIyY2Q2YzFjOGRjMjliMQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-06-22T04:41:10Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-06-22T04:41:10Z"}, "message": "re PR fortran/40443 (Elemental procedure in genericl interface incorrectly selected in preference to specific procedure)\n\n2009-06-22  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/40443\n\t* interface.c (gfc_search_interface): Hold back a match to an\n\telementary procedure until all other possibilities are\n\texhausted.\n\n2009-06-22  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/40443\n\t* gfortran.dg/generic_18.f90: New test.\n\nFrom-SVN: r148776", "tree": {"sha": "7ff210851d617b7d8ed2f460bd8845f78a174649", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ff210851d617b7d8ed2f460bd8845f78a174649"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22a0a78022d0bd05385d18ab222cd6c1c8dc29b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22a0a78022d0bd05385d18ab222cd6c1c8dc29b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22a0a78022d0bd05385d18ab222cd6c1c8dc29b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22a0a78022d0bd05385d18ab222cd6c1c8dc29b1/comments", "author": null, "committer": null, "parents": [{"sha": "0e6640d89daa5b3e1515d84823af83f9ecb40209", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e6640d89daa5b3e1515d84823af83f9ecb40209", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e6640d89daa5b3e1515d84823af83f9ecb40209"}], "stats": {"total": 68, "additions": 66, "deletions": 2}, "files": [{"sha": "53cc95fe76ee6139fce13ac36169644ad8eb894d", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22a0a78022d0bd05385d18ab222cd6c1c8dc29b1/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22a0a78022d0bd05385d18ab222cd6c1c8dc29b1/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=22a0a78022d0bd05385d18ab222cd6c1c8dc29b1", "patch": "@@ -2425,6 +2425,7 @@ gfc_symbol *\n gfc_search_interface (gfc_interface *intr, int sub_flag,\n \t\t      gfc_actual_arglist **ap)\n {\n+  gfc_symbol *elem_sym = NULL;\n   for (; intr; intr = intr->next)\n     {\n       if (sub_flag && intr->sym->attr.function)\n@@ -2433,10 +2434,19 @@ gfc_search_interface (gfc_interface *intr, int sub_flag,\n \tcontinue;\n \n       if (gfc_arglist_matches_symbol (ap, intr->sym))\n-\treturn intr->sym;\n+\t{\n+\t  /* Satisfy 12.4.4.1 such that an elemental match has lower\n+\t     weight than a non-elemental match.  */ \n+\t  if (intr->sym->attr.elemental)\n+\t    {\n+\t      elem_sym = intr->sym;\n+\t      continue;\n+\t    }\n+\t  return intr->sym;\n+\t}\n     }\n \n-  return NULL;\n+  return elem_sym ? elem_sym : NULL;\n }\n \n "}, {"sha": "1e23838d712976b66435f8cec8974148776a3f49", "filename": "gcc/testsuite/gfortran.dg/generic_18.f90", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22a0a78022d0bd05385d18ab222cd6c1c8dc29b1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_18.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22a0a78022d0bd05385d18ab222cd6c1c8dc29b1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_18.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_18.f90?ref=22a0a78022d0bd05385d18ab222cd6c1c8dc29b1", "patch": "@@ -0,0 +1,54 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! Test the fix for PR40443 in which the final call to the generic\n+! 'SpecElem' was resolved to the elemental rather than the specific\n+! procedure, which is required by the second part of 12.4.4.1.\n+!\n+! Contributed by Ian Harvey <ian_harvey@bigpond.com>\n+!\n+MODULE SomeOptions\n+  IMPLICIT NONE  \n+  INTERFACE ElemSpec\n+    MODULE PROCEDURE ElemProc\n+    MODULE PROCEDURE SpecProc\n+  END INTERFACE ElemSpec  \n+  INTERFACE SpecElem\n+    MODULE PROCEDURE SpecProc\n+    MODULE PROCEDURE ElemProc\n+  END INTERFACE SpecElem\n+CONTAINS\n+  ELEMENTAL SUBROUTINE ElemProc(a)  \n+    CHARACTER, INTENT(OUT) :: a\n+    !****\n+    a = 'E'            \n+  END SUBROUTINE ElemProc\n+\n+  SUBROUTINE SpecProc(a)  \n+    CHARACTER, INTENT(OUT) :: a(:)\n+    !****    \n+    a = 'S'    \n+  END SUBROUTINE SpecProc\n+END MODULE SomeOptions\n+\n+PROGRAM MakeAChoice\n+  USE SomeOptions  \n+  IMPLICIT NONE\n+  CHARACTER scalar, array(2)    \n+  !****\n+  CALL ElemSpec(scalar) ! Should choose the elemental (and does)\n+  WRITE (*, 100) scalar\n+  CALL ElemSpec(array)  ! Should choose the specific (and does)\n+  WRITE (*, 100) array\n+  !----\n+  CALL SpecElem(scalar) ! Should choose the elemental (and does)\n+  WRITE (*, 100) scalar\n+  CALL SpecElem(array)  ! Should choose the specific (but didn't)\n+  WRITE (*, 100) array  \n+  !----\n+  100 FORMAT(A,:,', ',A)\n+END PROGRAM MakeAChoice\n+! { dg-final { scan-tree-dump-times \"specproc\" 3 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"elemproc\" 3 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }\n+! { dg-final { cleanup-modules \"SomeOptions\" } }"}]}