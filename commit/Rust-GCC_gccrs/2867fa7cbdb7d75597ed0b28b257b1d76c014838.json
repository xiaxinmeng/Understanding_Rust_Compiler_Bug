{"sha": "2867fa7cbdb7d75597ed0b28b257b1d76c014838", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg2N2ZhN2NiZGI3ZDc1NTk3ZWQwYjI4YjI1N2IxZDc2YzAxNDgzOA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-07-08T00:13:02Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-07-08T00:13:02Z"}, "message": "Dump NOTE_INSN_CFI notes.\n\n        * dwarf2out.c (output_cfi_directive): Export.  Add FILE parameter.\n        Handle some opcodes specially for debugging.\n        * print-rtl.c: Include dwarf2out.h\n        (print_rtx): Handle NOTE_INSN_CFI.\n        * Makefile.in (print-rtl.o): Update.\n\nFrom-SVN: r176020", "tree": {"sha": "0056030cf44469f5fbaa6a33544b15d4d682bd59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0056030cf44469f5fbaa6a33544b15d4d682bd59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2867fa7cbdb7d75597ed0b28b257b1d76c014838", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2867fa7cbdb7d75597ed0b28b257b1d76c014838", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2867fa7cbdb7d75597ed0b28b257b1d76c014838", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2867fa7cbdb7d75597ed0b28b257b1d76c014838/comments", "author": null, "committer": null, "parents": [{"sha": "7644b3c7f08daeec085f4dc2ba180dab5bc29d28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7644b3c7f08daeec085f4dc2ba180dab5bc29d28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7644b3c7f08daeec085f4dc2ba180dab5bc29d28"}], "stats": {"total": 100, "additions": 71, "deletions": 29}, "files": [{"sha": "f8097eafc2e3a7ee525798376713095ef32ff70b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2867fa7cbdb7d75597ed0b28b257b1d76c014838/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2867fa7cbdb7d75597ed0b28b257b1d76c014838/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2867fa7cbdb7d75597ed0b28b257b1d76c014838", "patch": "@@ -1,3 +1,11 @@\n+2011-07-07  Richard Henderson  <rth@redhat.com>\n+\n+\t* dwarf2out.c (output_cfi_directive): Export.  Add FILE parameter.\n+\tHandle some opcodes specially for debugging.\n+\t* print-rtl.c: Include dwarf2out.h\n+\t(print_rtx): Handle NOTE_INSN_CFI.\n+\t* Makefile.in (print-rtl.o): Update.\n+\n 2011-07-07  Richard Henderson  <rth@redhat.com>\n \n \t* tree-pass.h (pass_dwarf2_frame): Declare."}, {"sha": "0f4a73e7dba85184d4906faad89a8129f41ee9a6", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2867fa7cbdb7d75597ed0b28b257b1d76c014838/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2867fa7cbdb7d75597ed0b28b257b1d76c014838/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=2867fa7cbdb7d75597ed0b28b257b1d76c014838", "patch": "@@ -2923,7 +2923,8 @@ rtl.o : rtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n \n print-rtl.o : print-rtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n     $(RTL_H) $(TREE_H) hard-reg-set.h $(BASIC_BLOCK_H) $(FLAGS_H) \\\n-    $(BCONFIG_H) $(DIAGNOSTIC_H) cselib.h $(TREE_PASS_H) tree-pretty-print.h\n+    $(BCONFIG_H) $(DIAGNOSTIC_H) cselib.h $(TREE_PASS_H) tree-pretty-print.h \\\n+    dwarf2out.h\n rtlanal.o : rtlanal.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) toplev.h $(DIAGNOSTIC_CORE_H) \\\n    $(RTL_H) hard-reg-set.h $(TM_P_H) insn-config.h $(RECOG_H) \\\n    $(FLAGS_H) $(REGS_H) output.h $(TARGET_H) $(FUNCTION_H) $(TREE_H) \\"}, {"sha": "44035d31de6be0e76e4d966ec7831de5bba254e2", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 50, "deletions": 28, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2867fa7cbdb7d75597ed0b28b257b1d76c014838/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2867fa7cbdb7d75597ed0b28b257b1d76c014838/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=2867fa7cbdb7d75597ed0b28b257b1d76c014838", "patch": "@@ -822,8 +822,8 @@ output_cfi (dw_cfi_ref cfi, dw_fde_ref fde, int for_eh)\n \n /* Similar, but do it via assembler directives instead.  */\n \n-static void\n-output_cfi_directive (dw_cfi_ref cfi)\n+void\n+output_cfi_directive (FILE *f, dw_cfi_ref cfi)\n {\n   unsigned long r, r2;\n \n@@ -837,83 +837,105 @@ output_cfi_directive (dw_cfi_ref cfi)\n     case DW_CFA_set_loc:\n       /* Should only be created by add_fde_cfi in a code path not\n \t followed when emitting via directives.  The assembler is\n-\t going to take care of this for us.  */\n-      gcc_unreachable ();\n+\t going to take care of this for us.  But this routines is\n+\t also used for debugging dumps, so print something.  */\n+      gcc_assert (f != asm_out_file);\n+      fprintf (f, \"\\t.cfi_advance_loc\\n\");\n+      break;\n \n     case DW_CFA_offset:\n     case DW_CFA_offset_extended:\n     case DW_CFA_offset_extended_sf:\n       r = DWARF2_FRAME_REG_OUT (cfi->dw_cfi_oprnd1.dw_cfi_reg_num, 1);\n-      fprintf (asm_out_file, \"\\t.cfi_offset %lu, \"HOST_WIDE_INT_PRINT_DEC\"\\n\",\n+      fprintf (f, \"\\t.cfi_offset %lu, \"HOST_WIDE_INT_PRINT_DEC\"\\n\",\n \t       r, cfi->dw_cfi_oprnd2.dw_cfi_offset);\n       break;\n \n     case DW_CFA_restore:\n     case DW_CFA_restore_extended:\n       r = DWARF2_FRAME_REG_OUT (cfi->dw_cfi_oprnd1.dw_cfi_reg_num, 1);\n-      fprintf (asm_out_file, \"\\t.cfi_restore %lu\\n\", r);\n+      fprintf (f, \"\\t.cfi_restore %lu\\n\", r);\n       break;\n \n     case DW_CFA_undefined:\n       r = DWARF2_FRAME_REG_OUT (cfi->dw_cfi_oprnd1.dw_cfi_reg_num, 1);\n-      fprintf (asm_out_file, \"\\t.cfi_undefined %lu\\n\", r);\n+      fprintf (f, \"\\t.cfi_undefined %lu\\n\", r);\n       break;\n \n     case DW_CFA_same_value:\n       r = DWARF2_FRAME_REG_OUT (cfi->dw_cfi_oprnd1.dw_cfi_reg_num, 1);\n-      fprintf (asm_out_file, \"\\t.cfi_same_value %lu\\n\", r);\n+      fprintf (f, \"\\t.cfi_same_value %lu\\n\", r);\n       break;\n \n     case DW_CFA_def_cfa:\n     case DW_CFA_def_cfa_sf:\n       r = DWARF2_FRAME_REG_OUT (cfi->dw_cfi_oprnd1.dw_cfi_reg_num, 1);\n-      fprintf (asm_out_file, \"\\t.cfi_def_cfa %lu, \"HOST_WIDE_INT_PRINT_DEC\"\\n\",\n+      fprintf (f, \"\\t.cfi_def_cfa %lu, \"HOST_WIDE_INT_PRINT_DEC\"\\n\",\n \t       r, cfi->dw_cfi_oprnd2.dw_cfi_offset);\n       break;\n \n     case DW_CFA_def_cfa_register:\n       r = DWARF2_FRAME_REG_OUT (cfi->dw_cfi_oprnd1.dw_cfi_reg_num, 1);\n-      fprintf (asm_out_file, \"\\t.cfi_def_cfa_register %lu\\n\", r);\n+      fprintf (f, \"\\t.cfi_def_cfa_register %lu\\n\", r);\n       break;\n \n     case DW_CFA_register:\n       r = DWARF2_FRAME_REG_OUT (cfi->dw_cfi_oprnd1.dw_cfi_reg_num, 1);\n       r2 = DWARF2_FRAME_REG_OUT (cfi->dw_cfi_oprnd2.dw_cfi_reg_num, 1);\n-      fprintf (asm_out_file, \"\\t.cfi_register %lu, %lu\\n\", r, r2);\n+      fprintf (f, \"\\t.cfi_register %lu, %lu\\n\", r, r2);\n       break;\n \n     case DW_CFA_def_cfa_offset:\n     case DW_CFA_def_cfa_offset_sf:\n-      fprintf (asm_out_file, \"\\t.cfi_def_cfa_offset \"\n+      fprintf (f, \"\\t.cfi_def_cfa_offset \"\n \t       HOST_WIDE_INT_PRINT_DEC\"\\n\",\n \t       cfi->dw_cfi_oprnd1.dw_cfi_offset);\n       break;\n \n     case DW_CFA_remember_state:\n-      fprintf (asm_out_file, \"\\t.cfi_remember_state\\n\");\n+      fprintf (f, \"\\t.cfi_remember_state\\n\");\n       break;\n     case DW_CFA_restore_state:\n-      fprintf (asm_out_file, \"\\t.cfi_restore_state\\n\");\n+      fprintf (f, \"\\t.cfi_restore_state\\n\");\n       break;\n \n     case DW_CFA_GNU_args_size:\n-      fprintf (asm_out_file, \"\\t.cfi_escape %#x,\", DW_CFA_GNU_args_size);\n-      dw2_asm_output_data_uleb128_raw (cfi->dw_cfi_oprnd1.dw_cfi_offset);\n-      if (flag_debug_asm)\n-\tfprintf (asm_out_file, \"\\t%s args_size \"HOST_WIDE_INT_PRINT_DEC,\n-\t\t ASM_COMMENT_START, cfi->dw_cfi_oprnd1.dw_cfi_offset);\n-      fputc ('\\n', asm_out_file);\n+      if (f == asm_out_file)\n+\t{\n+\t  fprintf (f, \"\\t.cfi_escape %#x,\", DW_CFA_GNU_args_size);\n+\t  dw2_asm_output_data_uleb128_raw (cfi->dw_cfi_oprnd1.dw_cfi_offset);\n+\t  if (flag_debug_asm)\n+\t    fprintf (f, \"\\t%s args_size \"HOST_WIDE_INT_PRINT_DEC,\n+\t\t     ASM_COMMENT_START, cfi->dw_cfi_oprnd1.dw_cfi_offset);\n+\t  fputc ('\\n', f);\n+\t}\n+      else\n+\t{\n+\t  fprintf (f, \"\\t.cfi_GNU_args_size \"HOST_WIDE_INT_PRINT_DEC \"\\n\",\n+\t\t   cfi->dw_cfi_oprnd1.dw_cfi_offset);\n+\t}\n       break;\n \n     case DW_CFA_GNU_window_save:\n-      fprintf (asm_out_file, \"\\t.cfi_window_save\\n\");\n+      fprintf (f, \"\\t.cfi_window_save\\n\");\n       break;\n \n     case DW_CFA_def_cfa_expression:\n+      if (f != asm_out_file)\n+\t{\n+\t  fprintf (f, \"\\t.cfi_def_cfa_expression ...\\n\");\n+\t  break;\n+\t}\n+      /* FALLTHRU */\n     case DW_CFA_expression:\n-      fprintf (asm_out_file, \"\\t.cfi_escape %#x,\", cfi->dw_cfi_opc);\n+      if (f != asm_out_file)\n+\t{\n+\t  fprintf (f, \"\\t.cfi_cfa_expression ...\\n\");\n+\t  break;\n+\t}\n+      fprintf (f, \"\\t.cfi_escape %#x,\", cfi->dw_cfi_opc);\n       output_cfa_loc_raw (cfi);\n-      fputc ('\\n', asm_out_file);\n+      fputc ('\\n', f);\n       break;\n \n     default:\n@@ -925,7 +947,7 @@ void\n dwarf2out_emit_cfi (dw_cfi_ref cfi)\n {\n   if (dwarf2out_do_cfi_asm ())\n-    output_cfi_directive (cfi);\n+    output_cfi_directive (asm_out_file, cfi);\n }\n \n /* Output CFIs from VEC, up to index UPTO, to bring current FDE to the\n@@ -1032,7 +1054,7 @@ output_cfis (cfi_vec vec, int upto, bool do_cfi_asm,\n \t\t  && cfi2->dw_cfi_opc != DW_CFA_restore_extended)\n \t\t{\n \t\t  if (do_cfi_asm)\n-\t\t    output_cfi_directive (cfi2);\n+\t\t    output_cfi_directive (asm_out_file, cfi2);\n \t\t  else\n \t\t    output_cfi (cfi2, fde, for_eh);\n \t\t}\n@@ -1066,7 +1088,7 @@ output_cfis (cfi_vec vec, int upto, bool do_cfi_asm,\n \t  if (cfi_cfa)\n \t    {\n \t      if (do_cfi_asm)\n-\t\toutput_cfi_directive (cfi_cfa);\n+\t\toutput_cfi_directive (asm_out_file, cfi_cfa);\n \t      else\n \t\toutput_cfi (cfi_cfa, fde, for_eh);\n \t    }\n@@ -1076,7 +1098,7 @@ output_cfis (cfi_vec vec, int upto, bool do_cfi_asm,\n \t      && cfi_args_size->dw_cfi_oprnd1.dw_cfi_offset)\n \t    {\n \t      if (do_cfi_asm)\n-\t\toutput_cfi_directive (cfi_args_size);\n+\t\toutput_cfi_directive (asm_out_file, cfi_args_size);\n \t      else\n \t\toutput_cfi (cfi_args_size, fde, for_eh);\n \t    }\n@@ -1087,7 +1109,7 @@ output_cfis (cfi_vec vec, int upto, bool do_cfi_asm,\n \t      return;\n \t    }\n \t  else if (do_cfi_asm)\n-\t    output_cfi_directive (cfi);\n+\t    output_cfi_directive (asm_out_file, cfi);\n \t  else\n \t    output_cfi (cfi, fde, for_eh);\n \t  break;"}, {"sha": "19bae4aaa3be461c46e0fd41f24995a736ce110a", "filename": "gcc/dwarf2out.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2867fa7cbdb7d75597ed0b28b257b1d76c014838/gcc%2Fdwarf2out.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2867fa7cbdb7d75597ed0b28b257b1d76c014838/gcc%2Fdwarf2out.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.h?ref=2867fa7cbdb7d75597ed0b28b257b1d76c014838", "patch": "@@ -241,6 +241,8 @@ extern enum dw_cfi_oprnd_type dw_cfi_oprnd1_desc\n extern enum dw_cfi_oprnd_type dw_cfi_oprnd2_desc\n   (enum dwarf_call_frame_info cfi);\n \n+extern void output_cfi_directive (FILE *f, struct dw_cfi_struct *cfi);\n+\n extern void dwarf2out_decl (tree);\n extern void dwarf2out_emit_cfi (dw_cfi_ref cfi);\n "}, {"sha": "d7fd73bb90c206a122bf1881a310f1ace1a36f91", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2867fa7cbdb7d75597ed0b28b257b1d76c014838/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2867fa7cbdb7d75597ed0b28b257b1d76c014838/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=2867fa7cbdb7d75597ed0b28b257b1d76c014838", "patch": "@@ -43,6 +43,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pretty-print.h\"\n #include \"cselib.h\"\n #include \"tree-pass.h\"\n+#include \"dwarf2out.h\"\n #endif\n \n static FILE *outfile;\n@@ -309,6 +310,14 @@ print_rtx (const_rtx in_rtx)\n #endif\n \t\tbreak;\n \n+\t      case NOTE_INSN_CFI:\n+#ifndef GENERATOR_FILE\n+\t\tfputc ('\\n', outfile);\n+\t\toutput_cfi_directive (outfile, NOTE_CFI (in_rtx));\n+\t\tfputc ('\\t', outfile);\n+#endif\n+\t\tbreak;\n+\n \t      default:\n \t\tbreak;\n \t      }"}]}