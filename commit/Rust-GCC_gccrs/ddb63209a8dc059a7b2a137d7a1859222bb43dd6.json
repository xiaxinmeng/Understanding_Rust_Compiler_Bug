{"sha": "ddb63209a8dc059a7b2a137d7a1859222bb43dd6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRiNjMyMDlhOGRjMDU5YTdiMmExMzdkN2ExODU5MjIyYmI0M2RkNg==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2015-06-05T14:44:26Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-06-05T14:44:26Z"}, "message": "Add __is_nothrow_swappable and take it into use.\n\n2015-06-04  Ville Voutilainen  <ville.voutilainen@gmail.com>\n\n\tAdd __is_nothrow_swappable and take it into use.\n\t* include/bits/algorithmfwd.h (swap): Only declare for C++98 mode.\n\t* include/bits/move.h (swap): Add constraints in C++11 and later.\n\t* include/bits/stl_pair.h (swap): Use __is_nothrow_swappable\n\tfor the free swap function for pair.\n\t* include/bits/stl_queue.h (swap): Use __is_nothrow_swappable\n\tfor the free swap functions for queue and priority_queue.\n\t* include/bits/stl_stack.h (swap): Use __is_nothrow_swappable\n\tfor the free swap function for stack.\n\t* include/debug/array (swap): Use __is_nothrow_swappable\n\tfor the free swap function for array.\n\t* include/profile/array (swap): Likewise.\n\t* include/std/array (swap): Likewise.\n\t* include/std/tuple (_Tuple_impl::_M_swap): Use __is_nothrow_swappable.\n\t* include/std/type_traits (__is_swappable_impl::__is_swappable,\n\t__is_nothrow_swappable_impl, __is_nothrow_swappable): New.\n\t* testsuite/20_util/is_nothrow_swappable/requirements/\n\texplicit_instantiation.cc: New.\n\t* testsuite/20_util/is_nothrow_swappable/requirements/typedefs.cc:\n\tNew.\n\t* testsuite/20_util/is_nothrow_swappable/value.cc: New.\n\nFrom-SVN: r224153", "tree": {"sha": "3ceea62da88739a862bf476777be8b79b37f00a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ceea62da88739a862bf476777be8b79b37f00a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddb63209a8dc059a7b2a137d7a1859222bb43dd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddb63209a8dc059a7b2a137d7a1859222bb43dd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddb63209a8dc059a7b2a137d7a1859222bb43dd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddb63209a8dc059a7b2a137d7a1859222bb43dd6/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac59f9beec4e2f44bd3c04eb8f4fb9432feaea40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac59f9beec4e2f44bd3c04eb8f4fb9432feaea40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac59f9beec4e2f44bd3c04eb8f4fb9432feaea40"}], "stats": {"total": 263, "additions": 234, "deletions": 29}, "files": [{"sha": "4efd866729df5d192cdbc34553d6f38a91b7ed4a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb63209a8dc059a7b2a137d7a1859222bb43dd6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb63209a8dc059a7b2a137d7a1859222bb43dd6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ddb63209a8dc059a7b2a137d7a1859222bb43dd6", "patch": "@@ -1,3 +1,27 @@\n+2015-06-04  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tAdd __is_nothrow_swappable and take it into use.\n+\t* include/bits/algorithmfwd.h (swap): Only declare for C++98 mode.\n+\t* include/bits/move.h (swap): Add constraints in C++11 and later.\n+\t* include/bits/stl_pair.h (swap): Use __is_nothrow_swappable\n+\tfor the free swap function for pair.\n+\t* include/bits/stl_queue.h (swap): Use __is_nothrow_swappable\n+\tfor the free swap functions for queue and priority_queue.\n+\t* include/bits/stl_stack.h (swap): Use __is_nothrow_swappable\n+\tfor the free swap function for stack.\n+\t* include/debug/array (swap): Use __is_nothrow_swappable\n+\tfor the free swap function for array.\n+\t* include/profile/array (swap): Likewise.\n+\t* include/std/array (swap): Likewise.\n+\t* include/std/tuple (_Tuple_impl::_M_swap): Use __is_nothrow_swappable.\n+\t* include/std/type_traits (__is_swappable_impl::__is_swappable,\n+\t__is_nothrow_swappable_impl, __is_nothrow_swappable): New.\n+\t* testsuite/20_util/is_nothrow_swappable/requirements/\n+\texplicit_instantiation.cc: New.\n+\t* testsuite/20_util/is_nothrow_swappable/requirements/typedefs.cc:\n+\tNew.\n+\t* testsuite/20_util/is_nothrow_swappable/value.cc: New.\n+\n 2015-06-03  Fran\u00e7ois Dumont  fdumont@gcc.gnu.org>\n \n \t* testsuite/23_containers/list/61347.cc: Add dg-require-normal-mode."}, {"sha": "c972f33c0f357f7188245f2e5d46105d31e626fb", "filename": "libstdc++-v3/include/bits/algorithmfwd.h", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb63209a8dc059a7b2a137d7a1859222bb43dd6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb63209a8dc059a7b2a137d7a1859222bb43dd6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h?ref=ddb63209a8dc059a7b2a137d7a1859222bb43dd6", "patch": "@@ -566,22 +566,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _BIter \n     stable_partition(_BIter, _BIter, _Predicate);\n \n-  template<typename _Tp> \n-    void \n-    swap(_Tp&, _Tp&)\n-#if __cplusplus >= 201103L\n-    noexcept(__and_<is_nothrow_move_constructible<_Tp>,\n-\t            is_nothrow_move_assignable<_Tp>>::value)\n-#endif\n-    ;\n+#if __cplusplus < 201103L\n+  // For C++11 swap() is declared in <type_traits>.\n \n   template<typename _Tp, size_t _Nm>\n-    void\n-    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])\n-#if __cplusplus >= 201103L\n-    noexcept(noexcept(swap(*__a, *__b)))\n+    inline void\n+    swap(_Tp& __a, _Tp& __b);\n+\n+  template<typename _Tp, size_t _Nm>\n+    inline void\n+    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm]);\n #endif\n-    ;\n \n   template<typename _FIter1, typename _FIter2>\n     _FIter2 "}, {"sha": "88c4f7b3e5c814d8a82f182d9b2d36c781d98d89", "filename": "libstdc++-v3/include/bits/move.h", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb63209a8dc059a7b2a137d7a1859222bb43dd6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb63209a8dc059a7b2a137d7a1859222bb43dd6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h?ref=ddb63209a8dc059a7b2a137d7a1859222bb43dd6", "patch": "@@ -172,11 +172,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @return   Nothing.\n   */\n   template<typename _Tp>\n-    inline void\n-    swap(_Tp& __a, _Tp& __b)\n+    inline\n #if __cplusplus >= 201103L\n+    typename enable_if<__and_<is_move_constructible<_Tp>,\n+\t\t\t      is_move_assignable<_Tp>>::value>::type\n+    swap(_Tp& __a, _Tp& __b)\n     noexcept(__and_<is_nothrow_move_constructible<_Tp>,\n \t            is_nothrow_move_assignable<_Tp>>::value)\n+#else\n+    void\n+    swap(_Tp& __a, _Tp& __b)\n #endif\n     {\n       // concept requirements\n@@ -191,10 +196,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // DR 809. std::swap should be overloaded for array types.\n   /// Swap the contents of two arrays.\n   template<typename _Tp, size_t _Nm>\n-    inline void\n-    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])\n+    inline\n #if __cplusplus >= 201103L\n+    typename enable_if<__is_swappable_impl::__is_swappable<_Tp>::value>::type\n+    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])\n     noexcept(noexcept(swap(*__a, *__b)))\n+#else\n+    void\n+    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])\n #endif\n     {\n       for (size_t __n = 0; __n < _Nm; ++__n)"}, {"sha": "490b00565a0560f9f15f86bb706fa8f3800ee026", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb63209a8dc059a7b2a137d7a1859222bb43dd6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb63209a8dc059a7b2a137d7a1859222bb43dd6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=ddb63209a8dc059a7b2a137d7a1859222bb43dd6", "patch": "@@ -192,8 +192,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       void\n       swap(pair& __p)\n-      noexcept(noexcept(swap(first, __p.first))\n-\t       && noexcept(swap(second, __p.second)))\n+      noexcept(__is_nothrow_swappable<_T1>::value\n+               && __is_nothrow_swappable<_T2>::value)\n       {\n \tusing std::swap;\n \tswap(first, __p.first);"}, {"sha": "5f8e6fb9ab18c4e11bd9bb7e79283df65f1e1856", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb63209a8dc059a7b2a137d7a1859222bb43dd6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb63209a8dc059a7b2a137d7a1859222bb43dd6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=ddb63209a8dc059a7b2a137d7a1859222bb43dd6", "patch": "@@ -247,7 +247,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201103L\n       void\n       swap(queue& __q)\n-      noexcept(noexcept(swap(c, __q.c)))\n+      noexcept(__is_nothrow_swappable<_Tp>::value)\n       {\n \tusing std::swap;\n \tswap(c, __q.c);\n@@ -541,7 +541,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201103L\n       void\n       swap(priority_queue& __pq)\n-      noexcept(noexcept(swap(c, __pq.c)) && noexcept(swap(comp, __pq.comp)))\n+      noexcept(__is_nothrow_swappable<_Tp>::value\n+               && __is_nothrow_swappable<_Compare>::value)\n       {\n \tusing std::swap;\n \tswap(c, __pq.c);"}, {"sha": "0ed212e4307e562312bffc0db6dfcf43708c0c04", "filename": "libstdc++-v3/include/bits/stl_stack.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb63209a8dc059a7b2a137d7a1859222bb43dd6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb63209a8dc059a7b2a137d7a1859222bb43dd6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h?ref=ddb63209a8dc059a7b2a137d7a1859222bb43dd6", "patch": "@@ -221,7 +221,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201103L\n       void\n       swap(stack& __s)\n-      noexcept(noexcept(swap(c, __s.c)))\n+      noexcept(__is_nothrow_swappable<_Tp>::value)\n       {\n \tusing std::swap;\n \tswap(c, __s.c);"}, {"sha": "34e6281da5a5c5a342295d125830291af8d59664", "filename": "libstdc++-v3/include/debug/array", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb63209a8dc059a7b2a137d7a1859222bb43dd6/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb63209a8dc059a7b2a137d7a1859222bb43dd6/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray?ref=ddb63209a8dc059a7b2a137d7a1859222bb43dd6", "patch": "@@ -84,7 +84,7 @@ namespace __debug\n \n       void\n       swap(array& __other)\n-      noexcept(noexcept(swap(std::declval<_Tp&>(), std::declval<_Tp&>())))\n+      noexcept(__is_nothrow_swappable<_Tp>::value)\n       { std::swap_ranges(begin(), end(), __other.begin()); }\n \n       // Iterators."}, {"sha": "434ca968d8452a92a747d46733f5b0d687a25410", "filename": "libstdc++-v3/include/profile/array", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb63209a8dc059a7b2a137d7a1859222bb43dd6/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb63209a8dc059a7b2a137d7a1859222bb43dd6/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Farray?ref=ddb63209a8dc059a7b2a137d7a1859222bb43dd6", "patch": "@@ -63,7 +63,7 @@ namespace __profile\n \n       void\n       swap(array& __other)\n-      noexcept(noexcept(swap(std::declval<_Tp&>(), std::declval<_Tp&>())))\n+      noexcept(__is_nothrow_swappable<_Tp>::value)\n       { std::swap_ranges(begin(), end(), __other.begin()); }\n \n       // Iterators."}, {"sha": "40fbd46c5590b91b1c49a713f130b2abdf98ebe7", "filename": "libstdc++-v3/include/std/array", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb63209a8dc059a7b2a137d7a1859222bb43dd6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb63209a8dc059a7b2a137d7a1859222bb43dd6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=ddb63209a8dc059a7b2a137d7a1859222bb43dd6", "patch": "@@ -113,7 +113,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       void\n       swap(array& __other)\n-      noexcept(noexcept(swap(std::declval<_Tp&>(), std::declval<_Tp&>())))\n+      noexcept(__is_nothrow_swappable<_Tp>::value)\n       { std::swap_ranges(begin(), end(), __other.begin()); }\n \n       // Iterators."}, {"sha": "ccea02b4ffd4667b607a31785591e6c52d0a415e", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb63209a8dc059a7b2a137d7a1859222bb43dd6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb63209a8dc059a7b2a137d7a1859222bb43dd6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=ddb63209a8dc059a7b2a137d7a1859222bb43dd6", "patch": "@@ -324,9 +324,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     protected:\n       void\n       _M_swap(_Tuple_impl& __in)\n-      noexcept(noexcept(swap(std::declval<_Head&>(),\n-\t\t\t     std::declval<_Head&>()))\n-\t       && noexcept(_M_tail(__in)._M_swap(_M_tail(__in))))\n+      noexcept(__is_nothrow_swappable<_Head>::value\n+               && noexcept(_M_tail(__in)._M_swap(_M_tail(__in))))\n       {\n \tusing std::swap;\n \tswap(_M_head(*this), _M_head(__in));\n@@ -451,7 +450,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     protected:\n       void\n       _M_swap(_Tuple_impl& __in)\n-      noexcept(noexcept(swap(std::declval<_Head&>(), std::declval<_Head&>())))\n+      noexcept(__is_nothrow_swappable<_Head>::value)\n       {\n \tusing std::swap;\n \tswap(_M_head(*this), _M_head(__in));"}, {"sha": "2eae61bb8f43e41e4a78d63e9137a216c089ce43", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb63209a8dc059a7b2a137d7a1859222bb43dd6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb63209a8dc059a7b2a137d7a1859222bb43dd6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=ddb63209a8dc059a7b2a137d7a1859222bb43dd6", "patch": "@@ -2427,6 +2427,52 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : true_type\t\t\t\t\t\t\t\t\\\n     { };\n \n+\n+   namespace __is_swappable_impl {\n+     template <typename _Tp, typename=void>\n+     struct __is_swappable : public false_type\n+     { };\n+   }\n+\n+  template<typename _Tp>\n+    inline\n+    typename enable_if<__and_<is_move_constructible<_Tp>,\n+\t\t\t      is_move_assignable<_Tp>>::value>::type\n+    swap(_Tp&, _Tp&)\n+    noexcept(__and_<is_nothrow_move_constructible<_Tp>,\n+\t            is_nothrow_move_assignable<_Tp>>::value);\n+\n+  template<typename _Tp, size_t _Nm>\n+    inline\n+    typename enable_if<__is_swappable_impl::__is_swappable<_Tp>::value>::type\n+    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])\n+    noexcept(noexcept(swap(*__a, *__b)));\n+\n+  namespace __is_swappable_impl {\n+    using std::swap;\n+\n+    template <typename _Tp>\n+    struct __is_swappable<_Tp, __void_t<decltype(swap(declval<_Tp&>(),\n+                                                      declval<_Tp&>()))>>\n+    : public true_type\n+    { };\n+  }\n+\n+  template <bool, typename _Tp>\n+    struct __is_nothrow_swappable_impl\n+    : public __bool_constant<noexcept(swap(declval<_Tp&>(), declval<_Tp&>()))>\n+    { };\n+\n+  template <typename _Tp>\n+    struct __is_nothrow_swappable_impl<false, _Tp> : public false_type\n+    { };\n+\n+  template <typename _Tp>\n+    struct __is_nothrow_swappable\n+    : public __is_nothrow_swappable_impl<\n+               __is_swappable_impl::__is_swappable<_Tp>::value, _Tp>\n+    { };\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "93fa94b5ea0e841b778baf819534f2b265d248da", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_swappable/requirements/explicit_instantiation.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb63209a8dc059a7b2a137d7a1859222bb43dd6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb63209a8dc059a7b2a137d7a1859222bb43dd6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Frequirements%2Fexplicit_instantiation.cc?ref=ddb63209a8dc059a7b2a137d7a1859222bb43dd6", "patch": "@@ -0,0 +1,27 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct std::__is_nothrow_swappable<test_type>;\n+}"}, {"sha": "2372349b7dc57b5f5958862ba609187ed9bd5e5b", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_swappable/requirements/typedefs.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb63209a8dc059a7b2a137d7a1859222bb43dd6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb63209a8dc059a7b2a137d7a1859222bb43dd6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Frequirements%2Ftypedefs.cc?ref=ddb63209a8dc059a7b2a137d7a1859222bb43dd6", "patch": "@@ -0,0 +1,32 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::__is_nothrow_swappable<int>          test_type;\n+  typedef test_type::value_type                     value_type;\n+  typedef test_type::type                           type;\n+  typedef test_type::type::value_type               type_value_type;\n+  typedef test_type::type::type                     type_type;\n+}"}, {"sha": "bc778b5bd7f4617b754033f980eef608adbf047a", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_swappable/value.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb63209a8dc059a7b2a137d7a1859222bb43dd6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb63209a8dc059a7b2a137d7a1859222bb43dd6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Fvalue.cc?ref=ddb63209a8dc059a7b2a137d7a1859222bb43dd6", "patch": "@@ -0,0 +1,72 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_tr1.h>\n+#include <utility>\n+#include <array>\n+#include <tuple>\n+#include <queue>\n+#include <stack>\n+\n+namespace funny {\n+  struct F {};\n+  void swap(F&, F&) = delete;\n+}\n+void test01()\n+{\n+  using std::__is_nothrow_swappable;\n+  using std::__is_swappable_impl::__is_swappable;\n+  using namespace __gnu_test;\n+  // Positive tests.\n+  static_assert(test_property<__is_swappable, int>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable, int>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable, int[1]>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+\t\tstd::pair<int, int>>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+\t\tstd::tuple<int>>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+\t\tstd::array<int, 1>>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+\t\tstd::queue<int>>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+\t\tstd::priority_queue<int>>(true), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+\t\tstd::stack<int>>(true), \"\");\n+  // Negative tests.\n+  static_assert(test_property<__is_swappable, construct::DelCopy>(false), \"\");\n+  static_assert(test_property<__is_swappable, funny::F>(false), \"\");\n+  static_assert(test_property<__is_swappable, funny::F[1]>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+\t\tThrowCopyConsClass>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+\t\tstd::pair<ThrowCopyConsClass, ThrowCopyConsClass>>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+\t\tstd::tuple<ThrowCopyConsClass>>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+\t\tstd::array<ThrowCopyConsClass, 1>>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+\t\tstd::queue<ThrowCopyConsClass>>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+\t\tstd::priority_queue<ThrowCopyConsClass>>(false), \"\");\n+  static_assert(test_property<__is_nothrow_swappable,\n+\t\tstd::stack<ThrowCopyConsClass>>(false), \"\");\n+}"}]}