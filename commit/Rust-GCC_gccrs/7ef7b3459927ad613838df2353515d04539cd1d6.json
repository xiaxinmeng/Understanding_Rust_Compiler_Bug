{"sha": "7ef7b3459927ad613838df2353515d04539cd1d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VmN2IzNDU5OTI3YWQ2MTM4MzhkZjIzNTM1MTVkMDQ1MzljZDFkNg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-11-02T10:00:09Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-11-02T10:00:09Z"}, "message": "bitmap.h (bitmap_and, [...]): Produce void.\n\n\t* bitmap.h (bitmap_and, bitmap_and_into, bitmap_and_compl,\n\tbitmap_and_compl_into, bitmap_ior, bitmap_iot_into,\n\tbitmap_ior_compl, bitmap_xor, bitmap_xor_into): Produce void.\n\t(bitmap_ior_and_compl_into): Produce bool.\n\t(bitmap_union_of_diff): Rename to ...\n\t(bitmap_ior_and_compl): ... here. Produce bool.\n\t* bitmap.c (bitmap_ior_and_compl_into): Return bool. Use\n\tbitmap_operation directly.\n\t(bitmap_union_of_diff): Rename to ...\n\t(bitmap_ior_and_compl): ... here. Return bool, use\n\tbitmap_operation directly.\n\t* df.c (df_rd_transfer_function): Use bitmap_ior_and_compl.\n\t(df_ru_transfer_function, df_lr_transfer_function): Likewise.\n\t* global.c (modify_bb_reg_pav): Likewise.\n\nFrom-SVN: r89982", "tree": {"sha": "200acd184e06dc1da5eab8d2d822871df1c7ea0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/200acd184e06dc1da5eab8d2d822871df1c7ea0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ef7b3459927ad613838df2353515d04539cd1d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ef7b3459927ad613838df2353515d04539cd1d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ef7b3459927ad613838df2353515d04539cd1d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ef7b3459927ad613838df2353515d04539cd1d6/comments", "author": null, "committer": null, "parents": [{"sha": "55994078b6bc51ae62bd4117c6c335b94336137b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55994078b6bc51ae62bd4117c6c335b94336137b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55994078b6bc51ae62bd4117c6c335b94336137b"}], "stats": {"total": 60, "additions": 38, "deletions": 22}, "files": [{"sha": "b85d34c9589a8b6684935a29b60b2f46beae0a34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ef7b3459927ad613838df2353515d04539cd1d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ef7b3459927ad613838df2353515d04539cd1d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ef7b3459927ad613838df2353515d04539cd1d6", "patch": "@@ -1,5 +1,20 @@\n 2004-11-02  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\t* bitmap.h (bitmap_and, bitmap_and_into, bitmap_and_compl,\n+\tbitmap_and_compl_into, bitmap_ior, bitmap_iot_into,\n+\tbitmap_ior_compl, bitmap_xor, bitmap_xor_into): Produce void.\n+\t(bitmap_ior_and_compl_into): Produce bool.\n+\t(bitmap_union_of_diff): Rename to ...\n+\t(bitmap_ior_and_compl): ... here. Produce bool.\n+\t* bitmap.c (bitmap_ior_and_compl_into): Return bool. Use\n+\tbitmap_operation directly.\n+\t(bitmap_union_of_diff): Rename to ...\n+\t(bitmap_ior_and_compl): ... here. Return bool, use\n+\tbitmap_operation directly.\n+\t* df.c (df_rd_transfer_function): Use bitmap_ior_and_compl.\n+\t(df_ru_transfer_function, df_lr_transfer_function): Likewise.\n+\t* global.c (modify_bb_reg_pav): Likewise.\n+\n \t* bitmap.h (bitmap_equal_p): Return bool.\n \t(bitmap_intersect_p, bitmap_intersect_compl_p): Declare.\n \t* bitmap.c (bitmap_equal_p): Return bool. Compare directly."}, {"sha": "57939ff4a339001b3e850f5b584515489ce5387b", "filename": "gcc/bitmap.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ef7b3459927ad613838df2353515d04539cd1d6/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ef7b3459927ad613838df2353515d04539cd1d6/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=7ef7b3459927ad613838df2353515d04539cd1d6", "patch": "@@ -743,10 +743,9 @@ bitmap_intersect_compl_p (bitmap a, bitmap b)\n }\n \n \f\n-/* Or into bitmap TO bitmap FROM1 and'ed with the complement of\n-   bitmap FROM2.  */\n+/* Produce TO |= FROM1 & ~FROM2.  Return true, if TO changed.  */\n \n-int\n+bool\n bitmap_ior_and_compl_into (bitmap to, bitmap from1, bitmap from2)\n {\n   bitmap_head tmp;\n@@ -756,13 +755,15 @@ bitmap_ior_and_compl_into (bitmap to, bitmap from1, bitmap from2)\n   tmp.using_obstack = 0;\n \n   bitmap_and_compl (&tmp, from1, from2);\n-  changed = bitmap_ior_into (to, &tmp);\n+  changed = bitmap_operation (to, to, &tmp, BITMAP_IOR);\n   bitmap_clear (&tmp);\n   return changed;\n }\n \n-int\n-bitmap_union_of_diff (bitmap dst, bitmap a, bitmap b, bitmap c)\n+/* Produce DST = A | (B & ~C).  Return true if DST != A.  */\n+\n+bool\n+bitmap_ior_and_compl (bitmap dst, bitmap a, bitmap b, bitmap c)\n {\n   bitmap_head tmp;\n   int changed;\n@@ -771,7 +772,7 @@ bitmap_union_of_diff (bitmap dst, bitmap a, bitmap b, bitmap c)\n   tmp.using_obstack = 0;\n \n   bitmap_and_compl (&tmp, b, c);\n-  changed = bitmap_ior (dst, &tmp, a);\n+  changed = bitmap_operation (dst, a, &tmp, BITMAP_IOR);\n   bitmap_clear (&tmp);\n \n   return changed;"}, {"sha": "f20773b6b51ad117b350374bcb13fc5a0375ed3a", "filename": "gcc/bitmap.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ef7b3459927ad613838df2353515d04539cd1d6/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ef7b3459927ad613838df2353515d04539cd1d6/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=7ef7b3459927ad613838df2353515d04539cd1d6", "patch": "@@ -100,19 +100,20 @@ extern bool bitmap_intersect_compl_p (bitmap, bitmap);\n /* Perform an operation on two bitmaps, yielding a third.  */\n extern int bitmap_operation (bitmap, bitmap, bitmap, enum bitmap_bits);\n \n-#define bitmap_and(DST,A,B) bitmap_operation (DST,A,B,BITMAP_AND)\n-#define bitmap_and_into(DST_SRC,B) bitmap_operation (DST_SRC,DST_SRC,B,BITMAP_AND)\n-#define bitmap_and_compl(DST,A,B) bitmap_operation (DST,A,B,BITMAP_AND_COMPL)\n-#define bitmap_and_compl_into(DST_SRC,B) bitmap_operation (DST_SRC,DST_SRC,B,BITMAP_AND_COMPL)\n-#define bitmap_ior(DST,A,B) bitmap_operation (DST,A,B,BITMAP_IOR)\n-#define bitmap_ior_into(DST_SRC,B) bitmap_operation (DST_SRC,DST_SRC,B,BITMAP_IOR)\n-#define bitmap_ior_compl(DST,A,B) bitmap_operation (DST,A,B,BITMAP_IOR_COMPL)\n-#define bitmap_xor(DST,A,B) bitmap_operation (DST,A,B,BITMAP_XOR)\n-#define bitmap_xor_into(DST_SRC,B) bitmap_operation (DST_SRC,DST_SRC,B,BITMAP_XOR)\n+#define bitmap_and(DST,A,B) (void)bitmap_operation (DST,A,B,BITMAP_AND)\n+#define bitmap_and_into(DST_SRC,B) (void)bitmap_operation (DST_SRC,DST_SRC,B,BITMAP_AND)\n+#define bitmap_and_compl(DST,A,B) (void)bitmap_operation (DST,A,B,BITMAP_AND_COMPL)\n+#define bitmap_and_compl_into(DST_SRC,B) (void)bitmap_operation (DST_SRC,DST_SRC,B,BITMAP_AND_COMPL)\n+#define bitmap_ior(DST,A,B) (void)bitmap_operation (DST,A,B,BITMAP_IOR)\n+#define bitmap_ior_into(DST_SRC,B) (void)bitmap_operation (DST_SRC,DST_SRC,B,BITMAP_IOR)\n+#define bitmap_ior_compl(DST,A,B) (void)bitmap_operation (DST,A,Br,BITMAP_IOR_COMPL)\n+#define bitmap_xor(DST,A,B) (void)bitmap_operation (DST,A,B,BITMAP_XOR)\n+#define bitmap_xor_into(DST_SRC,B) (void)bitmap_operation (DST_SRC,DST_SRC,B,BITMAP_XOR)\n \n /* `or' into one bitmap the `and' of a second bitmap witih the complement\n    of a third. Return nonzero if the bitmap changes. */\n-extern int bitmap_ior_and_compl_into (bitmap, bitmap, bitmap);\n+extern bool bitmap_ior_and_compl_into (bitmap, bitmap, bitmap);\n+extern bool bitmap_ior_and_compl (bitmap, bitmap, bitmap, bitmap);\n \n /* Clear a single register in a register set.  */\n extern void bitmap_clear_bit (bitmap, int);\n@@ -142,7 +143,6 @@ extern void bitmap_release_memory (void);\n #define bitmap_zero(a) bitmap_clear (a)\n #define bitmap_a_or_b(a,b,c) bitmap_operation (a, b, c, BITMAP_IOR)\n #define bitmap_a_and_b(a,b,c) bitmap_operation (a, b, c, BITMAP_AND)\n-extern int bitmap_union_of_diff (bitmap, bitmap, bitmap, bitmap);\n extern int bitmap_first_set_bit (bitmap);\n extern int bitmap_last_set_bit (bitmap);\n "}, {"sha": "e479b965ad09f4121fcb77237bfec0338cb7ac61", "filename": "gcc/df.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ef7b3459927ad613838df2353515d04539cd1d6/gcc%2Fdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ef7b3459927ad613838df2353515d04539cd1d6/gcc%2Fdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.c?ref=7ef7b3459927ad613838df2353515d04539cd1d6", "patch": "@@ -1588,7 +1588,7 @@ df_rd_transfer_function (int bb ATTRIBUTE_UNUSED, int *changed, void *in,\n \t\t\t void *out, void *gen, void *kill,\n \t\t\t void *data ATTRIBUTE_UNUSED)\n {\n-  *changed = bitmap_union_of_diff (out, gen, in, kill);\n+  *changed = bitmap_ior_and_compl (out, gen, in, kill);\n }\n \n \n@@ -1597,7 +1597,7 @@ df_ru_transfer_function (int bb ATTRIBUTE_UNUSED, int *changed, void *in,\n \t\t\t void *out, void *gen, void *kill,\n \t\t\t void *data ATTRIBUTE_UNUSED)\n {\n-  *changed = bitmap_union_of_diff (in, gen, out, kill);\n+  *changed = bitmap_ior_and_compl (in, gen, out, kill);\n }\n \n \n@@ -1606,7 +1606,7 @@ df_lr_transfer_function (int bb ATTRIBUTE_UNUSED, int *changed, void *in,\n \t\t\t void *out, void *use, void *def,\n \t\t\t void *data ATTRIBUTE_UNUSED)\n {\n-  *changed = bitmap_union_of_diff (in, use, out, def);\n+  *changed = bitmap_ior_and_compl (in, use, out, def);\n }\n \n "}, {"sha": "05dbb62cc4e621168e171ad7f497c4122b8ebbc9", "filename": "gcc/global.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ef7b3459927ad613838df2353515d04539cd1d6/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ef7b3459927ad613838df2353515d04539cd1d6/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=7ef7b3459927ad613838df2353515d04539cd1d6", "patch": "@@ -2307,7 +2307,7 @@ modify_bb_reg_pav (basic_block bb, basic_block pred, bool changed_p)\n   bb_pavout = bb_info->pavout;\n   if (pred->index != ENTRY_BLOCK)\n     bitmap_a_or_b (bb_pavin, bb_pavin, BB_INFO (pred)->pavout);\n-  changed_p |= bitmap_union_of_diff (bb_pavout, bb_info->avloc,\n+  changed_p |= bitmap_ior_and_compl (bb_pavout, bb_info->avloc,\n \t\t\t\t     bb_pavin, bb_info->killed);\n   return changed_p;\n }"}]}