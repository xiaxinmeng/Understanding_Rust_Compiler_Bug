{"sha": "eb99f777b117a9f9007d88f0a45ea62fcf4b22b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI5OWY3NzdiMTE3YTlmOTAwN2Q4OGYwYTQ1ZWE2MmZjZjRiMjJiNQ==", "commit": {"author": {"name": "Neil Vachharajani", "email": "nvachhar@google.com", "date": "2009-09-18T18:39:43Z"}, "committer": {"name": "Neil Vachharajani", "email": "nvachhar@gcc.gnu.org", "date": "2009-09-18T18:39:43Z"}, "message": "value-prof.c (interesting_stringop_to_profile_p): Added output argument to indicate which parameter is the size parameter.\n\n2009-09-18  Neil Vachharajani  <nvachhar@google.com>\n\n\t    * value-prof.c (interesting_stringop_to_profile_p): Added output\n\t    argument to indicate which parameter is the size parameter.\n\t    * value-prof.c (gimple_stringop_fixed_value): Use\n\t    INTERESTING_STRINGOP_TO_PROFILE_P to find size argument.\n\t    * value-prof.c (gimple_stringops_transform): Update call sites to\n\t    INTERESTING_STRINGOP_TO_PROFILE_P to reflect parameter change.\n\t    * testsuite/gcc.dg/tree-prof/val-prof-7.c: Added test case.\n\nFrom-SVN: r151864", "tree": {"sha": "39d0456d275590dc01f2d0f2848dcd8a0614b050", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39d0456d275590dc01f2d0f2848dcd8a0614b050"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb99f777b117a9f9007d88f0a45ea62fcf4b22b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb99f777b117a9f9007d88f0a45ea62fcf4b22b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb99f777b117a9f9007d88f0a45ea62fcf4b22b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb99f777b117a9f9007d88f0a45ea62fcf4b22b5/comments", "author": null, "committer": null, "parents": [{"sha": "5eb8c44fc892725861f2cdce643d7776d6991e4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eb8c44fc892725861f2cdce643d7776d6991e4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5eb8c44fc892725861f2cdce643d7776d6991e4a"}], "stats": {"total": 72, "additions": 58, "deletions": 14}, "files": [{"sha": "a3602abb810308fb74269a7cb21ccf0d3387a21c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb99f777b117a9f9007d88f0a45ea62fcf4b22b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb99f777b117a9f9007d88f0a45ea62fcf4b22b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb99f777b117a9f9007d88f0a45ea62fcf4b22b5", "patch": "@@ -1,3 +1,13 @@\n+2009-09-18  Neil Vachharajani  <nvachhar@google.com>\n+\n+\t* value-prof.c (interesting_stringop_to_profile_p): Added output\n+\targument to indicate which parameter is the size parameter.\n+\t* value-prof.c (gimple_stringop_fixed_value): Use\n+\tINTERESTING_STRINGOP_TO_PROFILE_P to find size argument.\n+\t* value-prof.c (gimple_stringops_transform): Update call sites to\n+\tINTERESTING_STRINGOP_TO_PROFILE_P to reflect parameter change.\n+\t* testsuite/gcc.dg/tree-prof/val-prof-7.c: Added test case.\n+\n 2009-09-18  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/38288"}, {"sha": "bb79c19d1f4e0d7892496992a0f564352a61f746", "filename": "gcc/testsuite/gcc.dg/tree-prof/val-prof-7.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb99f777b117a9f9007d88f0a45ea62fcf4b22b5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb99f777b117a9f9007d88f0a45ea62fcf4b22b5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-7.c?ref=eb99f777b117a9f9007d88f0a45ea62fcf4b22b5", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-options \"-O2 -fdump-tree-tree_profile -mtune=core2\" } */\n+/* { dg-skip-if \"\" { ! { i?86-*-* x86_64-*-* } } { \"*\" } { \"\" } } */\n+\n+#include <strings.h>\n+\n+int foo(int len)\n+{\n+  char array[1000];\n+  bzero(array, len);\n+  return 0;\n+}\n+\n+int main() {\n+  int i;\n+  for (i = 0; i < 1000; i++)\n+    {\n+      if (i > 990)\n+\tfoo(16);\n+      else\n+\tfoo(8);\n+    }\n+  return 0;\n+}\n+\n+/* { dg-final-use { scan-tree-dump \"Single value 8 stringop transformation on bzero\" \"tree_profile\"} } */\n+/* { dg-final-use { cleanup-tree-dump \"tree_profile\" } } */"}, {"sha": "12f1ecc5962b7e9c9c006c507031edd3c9af95cf", "filename": "gcc/value-prof.c", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb99f777b117a9f9007d88f0a45ea62fcf4b22b5/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb99f777b117a9f9007d88f0a45ea62fcf4b22b5/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=eb99f777b117a9f9007d88f0a45ea62fcf4b22b5", "patch": "@@ -1241,9 +1241,12 @@ gimple_ic_transform (gimple stmt)\n   return true;\n }\n \n-/* Return true if the stringop CALL with FNDECL shall be profiled.  */\n+/* Return true if the stringop CALL with FNDECL shall be profiled.\n+   SIZE_ARG be set to the argument index for the size of the string\n+   operation.\n+*/\n static bool\n-interesting_stringop_to_profile_p (tree fndecl, gimple call)\n+interesting_stringop_to_profile_p (tree fndecl, gimple call, int *size_arg)\n {\n   enum built_in_function fcode = DECL_FUNCTION_CODE (fndecl);\n \n@@ -1255,12 +1258,15 @@ interesting_stringop_to_profile_p (tree fndecl, gimple call)\n     {\n      case BUILT_IN_MEMCPY:\n      case BUILT_IN_MEMPCPY:\n+       *size_arg = 2;\n        return validate_gimple_arglist (call, POINTER_TYPE, POINTER_TYPE,\n \t\t\t\t       INTEGER_TYPE, VOID_TYPE);\n      case BUILT_IN_MEMSET:\n+       *size_arg = 2;\n        return validate_gimple_arglist (call, POINTER_TYPE, INTEGER_TYPE,\n \t\t\t\t      INTEGER_TYPE, VOID_TYPE);\n      case BUILT_IN_BZERO:\n+       *size_arg = 1;\n        return validate_gimple_arglist (call, POINTER_TYPE, INTEGER_TYPE,\n \t\t\t\t       VOID_TYPE);\n      default:\n@@ -1285,11 +1291,17 @@ gimple_stringop_fixed_value (gimple vcall_stmt, tree icall_size, int prob,\n   basic_block cond_bb, icall_bb, vcall_bb, join_bb;\n   edge e_ci, e_cv, e_iv, e_ij, e_vj;\n   gimple_stmt_iterator gsi;\n+  tree fndecl;\n+  int size_arg;\n+\n+  fndecl = gimple_call_fndecl (vcall_stmt);\n+  if (!interesting_stringop_to_profile_p (fndecl, vcall_stmt, &size_arg))\n+    gcc_unreachable();\n \n   cond_bb = gimple_bb (vcall_stmt);\n   gsi = gsi_for_stmt (vcall_stmt);\n \n-  vcall_size = gimple_call_arg (vcall_stmt, 2);\n+  vcall_size = gimple_call_arg (vcall_stmt, size_arg);\n   optype = TREE_TYPE (vcall_size);\n \n   tmpv = create_tmp_var (optype, \"PROF\");\n@@ -1304,7 +1316,7 @@ gimple_stringop_fixed_value (gimple vcall_stmt, tree icall_size, int prob,\n   gsi_insert_before (&gsi, cond_stmt, GSI_SAME_STMT);\n \n   icall_stmt = gimple_copy (vcall_stmt);\n-  gimple_call_set_arg (icall_stmt, 2, icall_size);\n+  gimple_call_set_arg (icall_stmt, size_arg, icall_size);\n   gsi_insert_before (&gsi, icall_stmt, GSI_SAME_STMT);\n \n   /* Fix CFG. */\n@@ -1359,20 +1371,18 @@ gimple_stringops_transform (gimple_stmt_iterator *gsi)\n   unsigned int dest_align, src_align;\n   gcov_type prob;\n   tree tree_val;\n+  int size_arg;\n \n   if (gimple_code (stmt) != GIMPLE_CALL)\n     return false;\n   fndecl = gimple_call_fndecl (stmt);\n   if (!fndecl)\n     return false;\n   fcode = DECL_FUNCTION_CODE (fndecl);\n-  if (!interesting_stringop_to_profile_p (fndecl, stmt))\n+  if (!interesting_stringop_to_profile_p (fndecl, stmt, &size_arg))\n     return false;\n \n-  if (fcode == BUILT_IN_BZERO)\n-    blck_size = gimple_call_arg (stmt, 1);\n-  else\n-    blck_size = gimple_call_arg (stmt, 2);\n+  blck_size = gimple_call_arg (stmt, size_arg);\n   if (TREE_CODE (blck_size) == INTEGER_CST)\n     return false;\n \n@@ -1583,6 +1593,7 @@ gimple_stringops_values_to_profile (gimple stmt, histogram_values *values)\n   tree blck_size;\n   tree dest;\n   enum built_in_function fcode;\n+  int size_arg;\n \n   if (gimple_code (stmt) != GIMPLE_CALL)\n     return;\n@@ -1591,14 +1602,11 @@ gimple_stringops_values_to_profile (gimple stmt, histogram_values *values)\n     return;\n   fcode = DECL_FUNCTION_CODE (fndecl);\n \n-  if (!interesting_stringop_to_profile_p (fndecl, stmt))\n+  if (!interesting_stringop_to_profile_p (fndecl, stmt, &size_arg))\n     return;\n \n   dest = gimple_call_arg (stmt, 0);\n-  if (fcode == BUILT_IN_BZERO)\n-    blck_size = gimple_call_arg (stmt, 1);\n-  else\n-    blck_size = gimple_call_arg (stmt, 2);\n+  blck_size = gimple_call_arg (stmt, size_arg);\n \n   if (TREE_CODE (blck_size) != INTEGER_CST)\n     {"}]}