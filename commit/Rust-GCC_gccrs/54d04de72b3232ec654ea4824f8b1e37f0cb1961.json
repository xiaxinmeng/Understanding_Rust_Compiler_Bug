{"sha": "54d04de72b3232ec654ea4824f8b1e37f0cb1961", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRkMDRkZTcyYjMyMzJlYzY1NGVhNDgyNGY4YjFlMzdmMGNiMTk2MQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-12-05T00:22:13Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-12-05T00:22:13Z"}, "message": "compiler: Check for negative or inverted arguments to make.\n\nFrom-SVN: r194173", "tree": {"sha": "cbe1685ae7bb4bcb0b4607d751bd180d8c95a87b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbe1685ae7bb4bcb0b4607d751bd180d8c95a87b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54d04de72b3232ec654ea4824f8b1e37f0cb1961", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54d04de72b3232ec654ea4824f8b1e37f0cb1961", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54d04de72b3232ec654ea4824f8b1e37f0cb1961", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54d04de72b3232ec654ea4824f8b1e37f0cb1961/comments", "author": null, "committer": null, "parents": [{"sha": "e9bfc6060b11515bd9a9d1134d9691f34fd7c62c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9bfc6060b11515bd9a9d1134d9691f34fd7c62c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9bfc6060b11515bd9a9d1134d9691f34fd7c62c"}], "stats": {"total": 64, "additions": 45, "deletions": 19}, "files": [{"sha": "3734d9b0b235eb1e9d1f782366a0f5542f3d7850", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 43, "deletions": 18, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d04de72b3232ec654ea4824f8b1e37f0cb1961/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d04de72b3232ec654ea4824f8b1e37f0cb1961/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=54d04de72b3232ec654ea4824f8b1e37f0cb1961", "patch": "@@ -6623,7 +6623,7 @@ class Builtin_call_expression : public Call_expression\n   lower_make();\n \n   bool\n-  check_int_value(Expression*);\n+  check_int_value(Expression*, bool is_length);\n \n   // A pointer back to the general IR structure.  This avoids a global\n   // variable, or passing it around everywhere.\n@@ -6897,11 +6897,8 @@ Builtin_call_expression::lower_make()\n   else\n     {\n       len_arg = *parg;\n-      if (!this->check_int_value(len_arg))\n-\t{\n-\t  this->report_error(_(\"bad size for make\"));\n-\t  return Expression::make_error(this->location());\n-\t}\n+      if (!this->check_int_value(len_arg, true))\n+\treturn Expression::make_error(this->location());\n       if (len_arg->type()->integer_type() != NULL\n \t  && len_arg->type()->integer_type()->bits() > uintptr_bits)\n \thave_big_args = true;\n@@ -6912,11 +6909,23 @@ Builtin_call_expression::lower_make()\n   if (is_slice && parg != args->end())\n     {\n       cap_arg = *parg;\n-      if (!this->check_int_value(cap_arg))\n-\t{\n-\t  this->report_error(_(\"bad capacity when making slice\"));\n+      if (!this->check_int_value(cap_arg, false))\n+\treturn Expression::make_error(this->location());\n+\n+      Numeric_constant nclen;\n+      Numeric_constant nccap;\n+      unsigned long vlen;\n+      unsigned long vcap;\n+      if (len_arg->numeric_constant_value(&nclen)\n+\t  && cap_arg->numeric_constant_value(&nccap)\n+\t  && nclen.to_unsigned_long(&vlen) == Numeric_constant::NC_UL_VALID\n+\t  && nccap.to_unsigned_long(&vcap) == Numeric_constant::NC_UL_VALID\n+\t  && vlen > vcap)\n+\t{\n+\t  this->report_error(_(\"len larger than cap\"));\n \t  return Expression::make_error(this->location());\n \t}\n+\n       if (cap_arg->type()->integer_type() != NULL\n \t  && cap_arg->type()->integer_type()->bits() > uintptr_bits)\n \thave_big_args = true;\n@@ -6973,20 +6982,36 @@ Builtin_call_expression::lower_make()\n // function.\n \n bool\n-Builtin_call_expression::check_int_value(Expression* e)\n+Builtin_call_expression::check_int_value(Expression* e, bool is_length)\n {\n-  if (e->type()->integer_type() != NULL)\n-    return true;\n-\n-  // Check for a floating point constant with integer value.\n   Numeric_constant nc;\n-  mpz_t ival;\n-  if (e->numeric_constant_value(&nc) && nc.to_int(&ival))\n+  if (e->numeric_constant_value(&nc))\n     {\n-      mpz_clear(ival);\n-      return true;\n+      unsigned long v;\n+      switch (nc.to_unsigned_long(&v))\n+\t{\n+\tcase Numeric_constant::NC_UL_VALID:\n+\t  return true;\n+\tcase Numeric_constant::NC_UL_NOTINT:\n+\t  error_at(e->location(), \"non-integer %s argument to make\",\n+\t\t   is_length ? \"len\" : \"cap\");\n+\t  return false;\n+\tcase Numeric_constant::NC_UL_NEGATIVE:\n+\t  error_at(e->location(), \"negative %s argument to make\",\n+\t\t   is_length ? \"len\" : \"cap\");\n+\t  return false;\n+\tcase Numeric_constant::NC_UL_BIG:\n+\t  // We don't want to give a compile-time error for a 64-bit\n+\t  // value on a 32-bit target.\n+\t  return true;\n+\t}\n     }\n \n+  if (e->type()->integer_type() != NULL)\n+    return true;\n+\n+  error_at(e->location(), \"non-integer %s argument to make\",\n+\t   is_length ? \"len\" : \"cap\");\n   return false;\n }\n "}, {"sha": "aabb912b91379afd18583352d389b018cb0460e2", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug273.go", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d04de72b3232ec654ea4824f8b1e37f0cb1961/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug273.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d04de72b3232ec654ea4824f8b1e37f0cb1961/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug273.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug273.go?ref=54d04de72b3232ec654ea4824f8b1e37f0cb1961", "patch": "@@ -11,6 +11,7 @@ package main\n var bug = false\n \n var minus1 = -1\n+var five = 5\n var big int64 = 10 | 1<<32\n \n type block [1<<19]byte\n@@ -40,7 +41,7 @@ func badcap() {\n }\n \n func badcap1() {\n-\tg1 = make([]block, 10, 5)\n+\tg1 = make([]block, 10, five)\n }\n \n func bigcap() {"}]}