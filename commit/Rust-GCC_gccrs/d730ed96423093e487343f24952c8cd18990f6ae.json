{"sha": "d730ed96423093e487343f24952c8cd18990f6ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDczMGVkOTY0MjMwOTNlNDg3MzQzZjI0OTUyYzhjZDE4OTkwZjZhZQ==", "commit": {"author": {"name": "Dave Love", "email": "fx@gcc.gnu.org", "date": "1998-07-25T04:33:22Z"}, "committer": {"name": "Dave Love", "email": "fx@gcc.gnu.org", "date": "1998-07-25T04:33:22Z"}, "message": "New test.\n\nFrom-SVN: r21371", "tree": {"sha": "4520933f2d9dfb1f4a2e7caaf8c7e5fdeea84b5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4520933f2d9dfb1f4a2e7caaf8c7e5fdeea84b5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d730ed96423093e487343f24952c8cd18990f6ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d730ed96423093e487343f24952c8cd18990f6ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d730ed96423093e487343f24952c8cd18990f6ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d730ed96423093e487343f24952c8cd18990f6ae/comments", "author": null, "committer": null, "parents": [{"sha": "b8b1a3c1fc085961a6f9f1ef64501e5c380ff9de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8b1a3c1fc085961a6f9f1ef64501e5c380ff9de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8b1a3c1fc085961a6f9f1ef64501e5c380ff9de"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "d85d33709599796be7a13151f73eeb303a57e6f2", "filename": "gcc/testsuite/g77.f-torture/execute/io0.f", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d730ed96423093e487343f24952c8cd18990f6ae/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fio0.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d730ed96423093e487343f24952c8cd18990f6ae/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fio0.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fio0.f?ref=d730ed96423093e487343f24952c8cd18990f6ae", "patch": "@@ -0,0 +1,38 @@\n+*     Preliminary tests for a few things in the i/o library.\n+*     Thrown together by Dave Love not from specific bug reports --\n+*     other ideas welcome.\n+\n+      character *(*) fmt\n+      parameter (fmt='(1x,i3,f5.1)')\n+*     Scratch file makes sure we can use one and avoids dealing with\n+*     explicit i/o in the testsuite.\n+      open(90, status='scratch') ! try a biggish unit number\n+      write(90, '()')           ! extra record for interest\n+*     Formatted i/o can go wild (endless loop AFAIR) if we're wrongly\n+*     assuming an ANSI sprintf.\n+      write(90, fmt) 123, 123.0\n+      backspace 90              ! backspace problems reported on DOSish systems\n+      read(90, fmt) i, r\n+      endfile 90\n+      if (i/=123 .or. nint(r)/=123) call abort\n+      rewind 90                 ! make sure we can rewind too\n+      read(90, '()')\n+      read(90, fmt) i, r\n+      if (i/=123 .or. nint(r)/=123) call abort\n+      close(90)\n+*     Make sure we can do unformatted i/o OK.  This might be\n+*     problematic on DOS-like systems if we've done an fopen in text\n+*     mode, not binary.     \n+      open(90, status='scratch', access='direct', form='unformatted',\n+     +     recl=8)\n+      write(90, rec=1) 123, 123.0\n+      read(90, rec=1) i, r\n+      if (i/=123 .or. nint(r)/=123) call abort\n+      close(90)\n+      open(90, status='scratch', form='unformatted')\n+      write(90) 123, 123.0\n+      backspace 90\n+      read(90) i, r\n+      if (i/=123 .or. nint(r)/=123) call abort\n+      close(90)\n+      end"}]}