{"sha": "5289e80852bb30d7e6afd90ea77ad1ed66d30bc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI4OWU4MDg1MmJiMzBkN2U2YWZkOTBlYTc3YWQxZWQ2NmQzMGJjNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-08-18T15:02:10Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-08-18T15:02:10Z"}, "message": "re PR libstdc++/37147 (New failures: 20_util/ratio/comparisons/comp2.cc et al)\n\n2008-08-18  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/37147\n\t* acinclude.m4 ([GLIBCXX_CHECK_C99_TR1]): Tighten checks on stdint.h,\n\tcheck the macros too.\n\t* configure: Regenerate.\n\nFrom-SVN: r139200", "tree": {"sha": "051e8f97b5a966c8e67bde7e25019298bbd8fa70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/051e8f97b5a966c8e67bde7e25019298bbd8fa70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5289e80852bb30d7e6afd90ea77ad1ed66d30bc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5289e80852bb30d7e6afd90ea77ad1ed66d30bc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5289e80852bb30d7e6afd90ea77ad1ed66d30bc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5289e80852bb30d7e6afd90ea77ad1ed66d30bc7/comments", "author": null, "committer": null, "parents": [{"sha": "3b7abfdae7e8e03e26f6b8066336d388eac17277", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b7abfdae7e8e03e26f6b8066336d388eac17277", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b7abfdae7e8e03e26f6b8066336d388eac17277"}], "stats": {"total": 131, "additions": 127, "deletions": 4}, "files": [{"sha": "4afb75de21e3e532eaed65c242ba254afc0dff75", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5289e80852bb30d7e6afd90ea77ad1ed66d30bc7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5289e80852bb30d7e6afd90ea77ad1ed66d30bc7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5289e80852bb30d7e6afd90ea77ad1ed66d30bc7", "patch": "@@ -1,3 +1,10 @@\n+2008-08-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/37147\n+\t* acinclude.m4 ([GLIBCXX_CHECK_C99_TR1]): Tighten checks on stdint.h,\n+\tcheck the macros too.\n+\t* configure: Regenerate.\n+\n 2008-08-17  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* acinclude.m4 ([AC_LC_MESSAGES]): Use AC_TRY_COMPILE instead of"}, {"sha": "66eb9dd103c84ad49f5384faa8dacb9b1c29b169", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 61, "deletions": 3, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5289e80852bb30d7e6afd90ea77ad1ed66d30bc7/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5289e80852bb30d7e6afd90ea77ad1ed66d30bc7/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=5289e80852bb30d7e6afd90ea77ad1ed66d30bc7", "patch": "@@ -1274,35 +1274,93 @@ AC_DEFUN([GLIBCXX_CHECK_C99_TR1], [\n   # Check for the existence of <stdint.h> types.\n   AC_MSG_CHECKING([for ISO C99 support to TR1 in <stdint.h>])\n   AC_CACHE_VAL(glibcxx_cv_c99_stdint_tr1, [\n-  AC_TRY_COMPILE([#include <stdint.h>],\n+  AC_TRY_COMPILE([#define __STDC_LIMIT_MACROS\n+                  #define __STDC_CONSTANT_MACROS\n+                  #include <stdint.h>],\n \t         [typedef int8_t          my_int8_t;\n+\t\t  my_int8_t               i8 = INT8_MIN;\n+\t\t  i8 = INT8_MAX;\n \t          typedef int16_t         my_int16_t;\n+\t\t  my_int16_t              i16 = INT16_MIN;\n+\t\t  i16 = INT16_MAX;\n \t          typedef int32_t         my_int32_t;\n+\t\t  my_int32_t              i32 = INT32_MIN;\n+\t\t  i32 = INT32_MAX;\n \t          typedef int64_t         my_int64_t;\n+\t\t  my_int64_t              i64 = INT64_MIN;\n+\t\t  i64 = INT64_MAX;\n \t          typedef int_fast8_t     my_int_fast8_t;\n+\t\t  my_int_fast8_t          if8 = INT_FAST8_MIN;\n+\t\t  if8 = INT_FAST8_MAX;\n \t          typedef int_fast16_t    my_int_fast16_t;\n+\t\t  my_int_fast16_t         if16 = INT_FAST16_MIN;\n+\t\t  if16 = INT_FAST16_MAX;\n \t          typedef int_fast32_t    my_int_fast32_t;\n-\t          typedef int_fast64_t    my_int_fast64_t;\t\n+\t\t  my_int_fast32_t         if32 = INT_FAST32_MIN;\n+\t\t  if32 = INT_FAST32_MAX;\n+\t          typedef int_fast64_t    my_int_fast64_t;\n+\t\t  my_int_fast64_t         if64 = INT_FAST64_MIN;\n+\t\t  if64 = INT_FAST64_MAX;\n \t          typedef int_least8_t    my_int_least8_t;\n+\t\t  my_int_least8_t         il8 = INT_LEAST8_MIN;\n+\t\t  il8 = INT_LEAST8_MAX;\n \t          typedef int_least16_t   my_int_least16_t;\n+\t\t  my_int_least16_t        il16 = INT_LEAST16_MIN;\n+\t\t  il16 = INT_LEAST16_MAX;\n \t          typedef int_least32_t   my_int_least32_t;\n+\t\t  my_int_least32_t        il32 = INT_LEAST32_MIN;\n+\t\t  il32 = INT_LEAST32_MAX;\n \t          typedef int_least64_t   my_int_least64_t;\n+\t\t  my_int_least64_t        il64 = INT_LEAST64_MIN;\n+\t\t  il64 = INT_LEAST64_MAX;\n \t\t  typedef intmax_t        my_intmax_t;\n+\t\t  my_intmax_t             im = INTMAX_MAX;\n+\t\t  im = INTMAX_MIN;\n \t\t  typedef intptr_t        my_intptr_t;\n+\t\t  my_intptr_t             ip = INTPTR_MAX;\n+\t\t  ip = INTPTR_MIN;\n \t          typedef uint8_t         my_uint8_t;\n+\t\t  my_uint8_t              ui8 = UINT8_MAX;\n+\t\t  ui8 = UINT8_MAX;\n \t          typedef uint16_t        my_uint16_t;\n+\t\t  my_uint16_t             ui16 = UINT16_MAX;\n+\t\t  ui16 = UINT16_MAX;\n \t          typedef uint32_t        my_uint32_t;\n+\t\t  my_uint32_t             ui32 = UINT32_MAX;\n+\t\t  ui32 = UINT32_MAX;\n \t          typedef uint64_t        my_uint64_t;\n+\t\t  my_uint64_t             ui64 = UINT64_MAX;\n+\t\t  ui64 = UINT64_MAX;\n \t          typedef uint_fast8_t    my_uint_fast8_t;\n+\t\t  my_uint_fast8_t         uif8 = UINT_FAST8_MAX;\n+\t\t  uif8 = UINT_FAST8_MAX;\n \t          typedef uint_fast16_t   my_uint_fast16_t;\n+\t\t  my_uint_fast16_t        uif16 = UINT_FAST16_MAX;\n+\t\t  uif16 = UINT_FAST16_MAX;\n \t          typedef uint_fast32_t   my_uint_fast32_t;\n-\t          typedef uint_fast64_t   my_uint_fast64_t;\t\n+\t\t  my_uint_fast32_t        uif32 = UINT_FAST32_MAX;\n+\t\t  uif32 = UINT_FAST32_MAX;\n+\t          typedef uint_fast64_t   my_uint_fast64_t;\n+\t\t  my_uint_fast64_t        uif64 = UINT_FAST64_MAX;\n+\t\t  uif64 = UINT_FAST64_MAX;\n \t          typedef uint_least8_t   my_uint_least8_t;\n+\t\t  my_uint_least8_t        uil8 = UINT_LEAST8_MAX;\n+\t\t  uil8 = UINT_LEAST8_MAX;\n \t          typedef uint_least16_t  my_uint_least16_t;\n+\t\t  my_uint_least16_t       uil16 = UINT_LEAST16_MAX;\n+\t\t  uil16 = UINT_LEAST16_MAX;\n \t          typedef uint_least32_t  my_uint_least32_t;\n+\t\t  my_uint_least32_t       uil32 = UINT_LEAST32_MAX;\n+\t\t  uil32 = UINT_LEAST32_MAX;\n \t          typedef uint_least64_t  my_uint_least64_t;\n+\t\t  my_uint_least64_t       uil64 = UINT_LEAST64_MAX;\n+\t\t  uil64 = UINT_LEAST64_MAX;\n \t\t  typedef uintmax_t       my_uintmax_t;\n+\t\t  my_uintmax_t            uim = UINTMAX_MAX;\n+\t\t  uim = UINTMAX_MAX;\n \t\t  typedef uintptr_t       my_uintptr_t;\n+\t\t  my_uintptr_t            uip = UINTPTR_MAX;\n+\t\t  uip = UINTPTR_MAX;\n \t\t ],[glibcxx_cv_c99_stdint_tr1=yes],\n \t\t   [glibcxx_cv_c99_stdint_tr1=no])\n   ])"}, {"sha": "d9d257ef5ef73305f07e9a2c61e5bfdaa2ad0240", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5289e80852bb30d7e6afd90ea77ad1ed66d30bc7/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5289e80852bb30d7e6afd90ea77ad1ed66d30bc7/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=5289e80852bb30d7e6afd90ea77ad1ed66d30bc7", "patch": "@@ -20038,38 +20038,96 @@ _ACEOF\n cat confdefs.h >>conftest.$ac_ext\n cat >>conftest.$ac_ext <<_ACEOF\n /* end confdefs.h.  */\n-#include <stdint.h>\n+#define __STDC_LIMIT_MACROS\n+                  #define __STDC_CONSTANT_MACROS\n+                  #include <stdint.h>\n int\n main ()\n {\n typedef int8_t          my_int8_t;\n+\t\t  my_int8_t               i8 = INT8_MIN;\n+\t\t  i8 = INT8_MAX;\n \t          typedef int16_t         my_int16_t;\n+\t\t  my_int16_t              i16 = INT16_MIN;\n+\t\t  i16 = INT16_MAX;\n \t          typedef int32_t         my_int32_t;\n+\t\t  my_int32_t              i32 = INT32_MIN;\n+\t\t  i32 = INT32_MAX;\n \t          typedef int64_t         my_int64_t;\n+\t\t  my_int64_t              i64 = INT64_MIN;\n+\t\t  i64 = INT64_MAX;\n \t          typedef int_fast8_t     my_int_fast8_t;\n+\t\t  my_int_fast8_t          if8 = INT_FAST8_MIN;\n+\t\t  if8 = INT_FAST8_MAX;\n \t          typedef int_fast16_t    my_int_fast16_t;\n+\t\t  my_int_fast16_t         if16 = INT_FAST16_MIN;\n+\t\t  if16 = INT_FAST16_MAX;\n \t          typedef int_fast32_t    my_int_fast32_t;\n+\t\t  my_int_fast32_t         if32 = INT_FAST32_MIN;\n+\t\t  if32 = INT_FAST32_MAX;\n \t          typedef int_fast64_t    my_int_fast64_t;\n+\t\t  my_int_fast64_t         if64 = INT_FAST64_MIN;\n+\t\t  if64 = INT_FAST64_MAX;\n \t          typedef int_least8_t    my_int_least8_t;\n+\t\t  my_int_least8_t         il8 = INT_LEAST8_MIN;\n+\t\t  il8 = INT_LEAST8_MAX;\n \t          typedef int_least16_t   my_int_least16_t;\n+\t\t  my_int_least16_t        il16 = INT_LEAST16_MIN;\n+\t\t  il16 = INT_LEAST16_MAX;\n \t          typedef int_least32_t   my_int_least32_t;\n+\t\t  my_int_least32_t        il32 = INT_LEAST32_MIN;\n+\t\t  il32 = INT_LEAST32_MAX;\n \t          typedef int_least64_t   my_int_least64_t;\n+\t\t  my_int_least64_t        il64 = INT_LEAST64_MIN;\n+\t\t  il64 = INT_LEAST64_MAX;\n \t\t  typedef intmax_t        my_intmax_t;\n+\t\t  my_intmax_t             im = INTMAX_MAX;\n+\t\t  im = INTMAX_MIN;\n \t\t  typedef intptr_t        my_intptr_t;\n+\t\t  my_intptr_t             ip = INTPTR_MAX;\n+\t\t  ip = INTPTR_MIN;\n \t          typedef uint8_t         my_uint8_t;\n+\t\t  my_uint8_t              ui8 = UINT8_MAX;\n+\t\t  ui8 = UINT8_MAX;\n \t          typedef uint16_t        my_uint16_t;\n+\t\t  my_uint16_t             ui16 = UINT16_MAX;\n+\t\t  ui16 = UINT16_MAX;\n \t          typedef uint32_t        my_uint32_t;\n+\t\t  my_uint32_t             ui32 = UINT32_MAX;\n+\t\t  ui32 = UINT32_MAX;\n \t          typedef uint64_t        my_uint64_t;\n+\t\t  my_uint64_t             ui64 = UINT64_MAX;\n+\t\t  ui64 = UINT64_MAX;\n \t          typedef uint_fast8_t    my_uint_fast8_t;\n+\t\t  my_uint_fast8_t         uif8 = UINT_FAST8_MAX;\n+\t\t  uif8 = UINT_FAST8_MAX;\n \t          typedef uint_fast16_t   my_uint_fast16_t;\n+\t\t  my_uint_fast16_t        uif16 = UINT_FAST16_MAX;\n+\t\t  uif16 = UINT_FAST16_MAX;\n \t          typedef uint_fast32_t   my_uint_fast32_t;\n+\t\t  my_uint_fast32_t        uif32 = UINT_FAST32_MAX;\n+\t\t  uif32 = UINT_FAST32_MAX;\n \t          typedef uint_fast64_t   my_uint_fast64_t;\n+\t\t  my_uint_fast64_t        uif64 = UINT_FAST64_MAX;\n+\t\t  uif64 = UINT_FAST64_MAX;\n \t          typedef uint_least8_t   my_uint_least8_t;\n+\t\t  my_uint_least8_t        uil8 = UINT_LEAST8_MAX;\n+\t\t  uil8 = UINT_LEAST8_MAX;\n \t          typedef uint_least16_t  my_uint_least16_t;\n+\t\t  my_uint_least16_t       uil16 = UINT_LEAST16_MAX;\n+\t\t  uil16 = UINT_LEAST16_MAX;\n \t          typedef uint_least32_t  my_uint_least32_t;\n+\t\t  my_uint_least32_t       uil32 = UINT_LEAST32_MAX;\n+\t\t  uil32 = UINT_LEAST32_MAX;\n \t          typedef uint_least64_t  my_uint_least64_t;\n+\t\t  my_uint_least64_t       uil64 = UINT_LEAST64_MAX;\n+\t\t  uil64 = UINT_LEAST64_MAX;\n \t\t  typedef uintmax_t       my_uintmax_t;\n+\t\t  my_uintmax_t            uim = UINTMAX_MAX;\n+\t\t  uim = UINTMAX_MAX;\n \t\t  typedef uintptr_t       my_uintptr_t;\n+\t\t  my_uintptr_t            uip = UINTPTR_MAX;\n+\t\t  uip = UINTPTR_MAX;\n \n   ;\n   return 0;"}]}