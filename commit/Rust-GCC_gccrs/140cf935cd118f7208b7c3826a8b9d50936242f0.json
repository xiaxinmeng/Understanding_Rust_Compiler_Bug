{"sha": "140cf935cd118f7208b7c3826a8b9d50936242f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQwY2Y5MzVjZDExOGY3MjA4YjdjMzgyNmE4YjlkNTA5MzYyNDJmMA==", "commit": {"author": {"name": "Andrew Luo", "email": "andrewluotechnologies@outlook.com", "date": "2020-08-06T18:35:43Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-06T18:49:07Z"}, "message": "libstdc++: Implement P0966 std::string::reserve should not shrink\n\nRemove ability for reserve(n) to reduce a string's capacity. Add a new\nreserve() overload that makes a shrink-to-fit request, and make\nshrink_to_fit() use that.\n\nlibstdc++-v3/ChangeLog:\n\n2020-07-30  Andrew Luo  <andrewluotechnologies@outlook.com>\n\t    Jonathan Wakely  <jwakely@redhat.com>\n\n\t* config/abi/pre/gnu.ver (GLIBCXX_3.4): Use less greedy\n\tpatterns for basic_string members.\n\t(GLIBCXX_3.4.29): Export new basic_string::reserve symbols.\n\t* doc/xml/manual/status_cxx2020.xml: Update P0966 status.\n\t* include/bits/basic_string.h (shrink_to_fit()): Call reserve().\n\t(reserve(size_type)): Remove default argument.\n\t(reserve()): Declare new overload.\n\t[!_GLIBCXX_USE_CXX11_ABI] (shrink_to_fit, reserve): Likewise.\n\t* include/bits/basic_string.tcc (reserve(size_type)): Remove\n\tsupport for shrinking capacity.\n\t(reserve()): Perform shrink-to-fit operation.\n\t[!_GLIBCXX_USE_CXX11_ABI] (reserve): Likewise.\n\t* testsuite/21_strings/basic_string/capacity/1.cc: Adjust to\n\treflect new behavior.\n\t* testsuite/21_strings/basic_string/capacity/char/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/capacity/char/18654.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/capacity/char/2.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/capacity/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/capacity/wchar_t/18654.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/capacity/wchar_t/2.cc:\n\tLikewise.", "tree": {"sha": "65f67d2de44231a18d83ebdb1fffa3eff6602d86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65f67d2de44231a18d83ebdb1fffa3eff6602d86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/140cf935cd118f7208b7c3826a8b9d50936242f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/140cf935cd118f7208b7c3826a8b9d50936242f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/140cf935cd118f7208b7c3826a8b9d50936242f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/140cf935cd118f7208b7c3826a8b9d50936242f0/comments", "author": {"login": "andrewluotechnologies", "id": 44252973, "node_id": "MDQ6VXNlcjQ0MjUyOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/44252973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewluotechnologies", "html_url": "https://github.com/andrewluotechnologies", "followers_url": "https://api.github.com/users/andrewluotechnologies/followers", "following_url": "https://api.github.com/users/andrewluotechnologies/following{/other_user}", "gists_url": "https://api.github.com/users/andrewluotechnologies/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewluotechnologies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewluotechnologies/subscriptions", "organizations_url": "https://api.github.com/users/andrewluotechnologies/orgs", "repos_url": "https://api.github.com/users/andrewluotechnologies/repos", "events_url": "https://api.github.com/users/andrewluotechnologies/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewluotechnologies/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e39f563c0cd25401f689c2093cb8c13692156ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e39f563c0cd25401f689c2093cb8c13692156ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e39f563c0cd25401f689c2093cb8c13692156ef"}], "stats": {"total": 261, "additions": 182, "deletions": 79}, "files": [{"sha": "b582f53e36397ec626f9943da8c42c6c59897afa", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/140cf935cd118f7208b7c3826a8b9d50936242f0/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/140cf935cd118f7208b7c3826a8b9d50936242f0/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=140cf935cd118f7208b7c3826a8b9d50936242f0", "patch": "@@ -223,7 +223,10 @@ GLIBCXX_3.4 {\n     _ZNSs6assignE[PRcjmvy]*;\n     _ZNSs6insertE[PRcjmvy]*;\n     _ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEE[PRcjmvy]*;\n-    _ZNSs[67][j-z]*E[PRcjmvy]*;\n+    _ZNSs6rbeginEv;\n+    _ZNSs6resizeE[jmy]*;\n+    _ZNSs7replaceE[jmy]*;\n+    _ZNSs7reserveE[jmy];\n     _ZNSs7[a-z]*EES2_[NPRjmy]*;\n     _ZNSs7[a-z]*EES2_S[12]*;\n     _ZNSs12_Alloc_hiderC*;\n@@ -290,7 +293,10 @@ GLIBCXX_3.4 {\n     _ZNSbIwSt11char_traitsIwESaIwEE6assignE[PRwjmvy]*;\n     _ZNSbIwSt11char_traitsIwESaIwEE6insertE[PRwjmvy]*;\n     _ZNSbIwSt11char_traitsIwESaIwEE6insertEN9__gnu_cxx17__normal_iteratorIPwS2_EE[PRwjmvy]*;\n-    _ZNSbIwSt11char_traitsIwESaIwEE[67][j-z]*E[PRwjmvy]*;\n+    _ZNSbIwSt11char_traitsIwESaIwEE6rbeginEv;\n+    _ZNSbIwSt11char_traitsIwESaIwEE7replaceEmm[PRm]*;\n+    _ZNSbIwSt11char_traitsIwESaIwEE6resizeEm*;\n+    _ZNSbIwSt11char_traitsIwESaIwEE7reserveEm;\n     _ZNSbIwSt11char_traitsIwESaIwEE7[a-z]*EES6_[NPRjmy]*;\n     _ZNSbIwSt11char_traitsIwESaIwEE7[a-z]*EES6_S[56]*;\n     _ZNSbIwSt11char_traitsIwESaIwEE12_Alloc_hiderC*;\n@@ -1740,7 +1746,7 @@ GLIBCXX_3.4.21 {\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE6rbegin*;\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE6resize*;\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE7replace*;\n-    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE7reserve*;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE7reserveE[jmy];\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE8pop_back*;\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE9push_back*;\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE[7-9]_[MS]_*;\n@@ -2309,6 +2315,11 @@ GLIBCXX_3.4.29 {\n     # std::__istream_extract(wistream&, wchar_t*, streamsize)\n     _ZSt17__istream_extractIwSt11char_traitsIwEEvRSt13basic_istreamIT_T0_EPS3_[ilx];\n \n+    # basic_string::reserve()\n+    _ZNSs7reserveEv;\n+    _ZNSbIwSt11char_traitsIwESaIwEE7reserveEv;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE7reserveEv;\n+\n } GLIBCXX_3.4.28;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "b9ad03c720ff2783ef09b6f241ee877a5319ddfc", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2020.xml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/140cf935cd118f7208b7c3826a8b9d50936242f0/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2020.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/140cf935cd118f7208b7c3826a8b9d50936242f0/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2020.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2020.xml?ref=140cf935cd118f7208b7c3826a8b9d50936242f0", "patch": "@@ -635,13 +635,12 @@ or any notes about the implementation.\n     </row>\n \n     <row>\n-      <?dbhtml bgcolor=\"#C8B0B0\" ?>\n       <entry>  <code>string::reserve</code> Should Not Shrink </entry>\n       <entry>\n         <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0966r1.html\">\n         P0966R1 </link>\n       </entry>\n-      <entry align=\"center\"> </entry>\n+      <entry align=\"center\"> 11 </entry>\n       <entry />\n     </row>\n "}, {"sha": "e34b5c1fca3814642ebfac40475aae954cd2acfc", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/140cf935cd118f7208b7c3826a8b9d50936242f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/140cf935cd118f7208b7c3826a8b9d50936242f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=140cf935cd118f7208b7c3826a8b9d50936242f0", "patch": "@@ -940,20 +940,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       { this->resize(__n, _CharT()); }\n \n #if __cplusplus >= 201103L\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n       ///  A non-binding request to reduce capacity() to size().\n       void\n       shrink_to_fit() noexcept\n-      {\n-#if __cpp_exceptions\n-\tif (capacity() > size())\n-\t  {\n-\t    try\n-\t      { reserve(0); }\n-\t    catch(...)\n-\t      { }\n-\t  }\n-#endif\n-      }\n+      { reserve(); }\n+#pragma GCC diagnostic pop\n #endif\n \n       /**\n@@ -985,7 +978,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  data.\n        */\n       void\n-      reserve(size_type __res_arg = 0);\n+      reserve(size_type __res_arg);\n+\n+      /**\n+       *  Equivalent to shrink_to_fit().\n+       */\n+#if __cplusplus > 201703L\n+      [[deprecated(\"use shrink_to_fit() instead\")]]\n+#endif\n+      void\n+      reserve();\n \n       /**\n        *  Erases the string, making it empty.\n@@ -3942,20 +3944,13 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       { this->resize(__n, _CharT()); }\n \n #if __cplusplus >= 201103L\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n       ///  A non-binding request to reduce capacity() to size().\n       void\n-      shrink_to_fit() _GLIBCXX_NOEXCEPT\n-      {\n-#if __cpp_exceptions\n-\tif (capacity() > size())\n-\t  {\n-\t    try\n-\t      { reserve(0); }\n-\t    catch(...)\n-\t      { }\n-\t  }\n-#endif\n-      }\n+      shrink_to_fit() noexcept\n+      { reserve(); }\n+#pragma GCC diagnostic pop\n #endif\n \n       /**\n@@ -3984,7 +3979,14 @@ _GLIBCXX_END_NAMESPACE_CXX11\n        *  data.\n        */\n       void\n-      reserve(size_type __res_arg = 0);\n+      reserve(size_type __res_arg);\n+\n+      /// Equivalent to shrink_to_fit().\n+#if __cplusplus > 201703L\n+      [[deprecated(\"use shrink_to_fit() instead\")]]\n+#endif\n+      void\n+      reserve();\n \n       /**\n        *  Erases the string, making it empty."}, {"sha": "a64b63a37fbb6d41ec2fa57f654292cc19d8323d", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 86, "deletions": 33, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/140cf935cd118f7208b7c3826a8b9d50936242f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/140cf935cd118f7208b7c3826a8b9d50936242f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=140cf935cd118f7208b7c3826a8b9d50936242f0", "patch": "@@ -280,29 +280,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     basic_string<_CharT, _Traits, _Alloc>::\n     reserve(size_type __res)\n     {\n-      // Make sure we don't shrink below the current size.\n-      if (__res < length())\n-\t__res = length();\n-\n       const size_type __capacity = capacity();\n-      if (__res != __capacity)\n-\t{\n-\t  if (__res > __capacity\n-\t      || __res > size_type(_S_local_capacity))\n-\t    {\n-\t      pointer __tmp = _M_create(__res, __capacity);\n-\t      this->_S_copy(__tmp, _M_data(), length() + 1);\n-\t      _M_dispose();\n-\t      _M_data(__tmp);\n-\t      _M_capacity(__res);\n-\t    }\n-\t  else if (!_M_is_local())\n-\t    {\n-\t      this->_S_copy(_M_local_data(), _M_data(), length() + 1);\n-\t      _M_destroy(__capacity);\n-\t      _M_data(_M_local_data());\n-\t    }\n-\t}\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2968. Inconsistencies between basic_string reserve and\n+      // vector/unordered_map/unordered_set reserve functions\n+      // P0966 reserve should not shrink\n+      if (__res <= __capacity)\n+\treturn;\n+\n+      pointer __tmp = _M_create(__res, __capacity);\n+      this->_S_copy(__tmp, _M_data(), length() + 1);\n+      _M_dispose();\n+      _M_data(__tmp);\n+      _M_capacity(__res);\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n@@ -342,6 +332,41 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_set_length(length() - __n);\n     }\n \n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    void\n+    basic_string<_CharT, _Traits, _Alloc>::\n+    reserve()\n+    {\n+      if (_M_is_local())\n+\treturn;\n+\n+      const size_type __length = length();\n+      const size_type __capacity = _M_allocated_capacity;\n+\n+      if (__length <= size_type(_S_local_capacity))\n+\t{\n+\t  this->_S_copy(_M_local_data(), _M_data(), __length + 1);\n+\t  _M_destroy(__capacity);\n+\t  _M_data(_M_local_data());\n+\t}\n+#if __cpp_exceptions\n+      else if (__length < __capacity)\n+\ttry\n+\t  {\n+\t    pointer __tmp\n+\t      = _Alloc_traits::allocate(_M_get_allocator(), __length + 1);\n+\t    this->_S_copy(__tmp, _M_data(), __length + 1);\n+\t    _M_dispose();\n+\t    _M_data(__tmp);\n+\t    _M_capacity(__length);\n+\t  }\n+\tcatch (const __cxxabiv1::__forced_unwind&)\n+\t  { throw; }\n+\tcatch (...)\n+\t  { /* swallow the exception */ }\n+#endif\n+    }\n+\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     void\n     basic_string<_CharT, _Traits, _Alloc>::\n@@ -953,16 +978,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     basic_string<_CharT, _Traits, _Alloc>::\n     reserve(size_type __res)\n     {\n-      if (__res != this->capacity() || _M_rep()->_M_is_shared())\n-        {\n-\t  // Make sure we don't shrink below the current size\n-\t  if (__res < this->size())\n-\t    __res = this->size();\n-\t  const allocator_type __a = get_allocator();\n-\t  _CharT* __tmp = _M_rep()->_M_clone(__a, __res - this->size());\n-\t  _M_rep()->_M_dispose(__a);\n-\t  _M_data(__tmp);\n-        }\n+      const size_type __capacity = capacity();\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2968. Inconsistencies between basic_string reserve and\n+      // vector/unordered_map/unordered_set reserve functions\n+      // P0966 reserve should not shrink\n+      if (__res <= __capacity)\n+\t{\n+\t  if (!_M_rep()->_M_is_shared())\n+\t    return;\n+\n+\t  // unshare, but keep same capacity\n+\t  __res = __capacity;\n+\t}\n+\n+      const allocator_type __a = get_allocator();\n+      _CharT* __tmp = _M_rep()->_M_clone(__a, __res - this->size());\n+      _M_rep()->_M_dispose(__a);\n+      _M_data(__tmp);\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n@@ -1006,7 +1040,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // The standard places no restriction on allocating more memory\n       // than is strictly needed within this layer at the moment or as\n-      // requested by an explicit application call to reserve().\n+      // requested by an explicit application call to reserve(n).\n \n       // Many malloc implementations perform quite poorly when an\n       // application attempts to allocate memory in a stepwise fashion\n@@ -1140,6 +1174,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return *this;\n     }\n \n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    void\n+    basic_string<_CharT, _Traits, _Alloc>::\n+    reserve()\n+    {\n+      if (length() < capacity() || _M_rep()->_M_is_shared())\n+\ttry\n+\t  {\n+\t    const allocator_type __a = get_allocator();\n+\t    _CharT* __tmp = _M_rep()->_M_clone(__a);\n+\t    _M_rep()->_M_dispose(__a);\n+\t    _M_data(__tmp);\n+\t  }\n+\tcatch (const __cxxabiv1::__forced_unwind&)\n+\t  { throw; }\n+\tcatch (...)\n+\t  { /* swallow the exception */ }\n+    }\n+\n     template<typename _CharT, typename _Traits, typename _Alloc>\n     typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::"}, {"sha": "a60f2d62da8e0a8c8c679a97f6224c3a9f6cfcf2", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/1.cc", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/140cf935cd118f7208b7c3826a8b9d50936242f0/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/140cf935cd118f7208b7c3826a8b9d50936242f0/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2F1.cc?ref=140cf935cd118f7208b7c3826a8b9d50936242f0", "patch": "@@ -136,13 +136,19 @@ void test01()\n   sz04 = str02.capacity();\n   VERIFY( sz04 >= sz03 );\n   VERIFY( sz04 >= 100 );\n+#if __cplusplus <= 201703L\n   str02.reserve();\n-  sz03 = str02.capacity();\n-#if _GLIBCXX_USE_CXX11_ABI\n-  VERIFY( sz03 < 100);\n #else\n-  VERIFY( sz03 == 0 );\n+  str02.shrink_to_fit(); // reserve is deprecated in C++20\n #endif\n+  sz03 = str02.capacity();\n+  VERIFY( sz03 < sz04 );\n+\n+  // P0966: reserve should not shrink\n+  str02.reserve(100);\n+  sz03 = str02.capacity();\n+  str02.reserve(sz03 - 1);\n+  VERIFY( str02.capacity() == sz03 );\n \n   sz03 = str02.size() + 5;\n   str02.resize(sz03);"}, {"sha": "cde253e114244070c1acee72b364b5f0d806ce96", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/char/1.cc", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/140cf935cd118f7208b7c3826a8b9d50936242f0/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/140cf935cd118f7208b7c3826a8b9d50936242f0/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F1.cc?ref=140cf935cd118f7208b7c3826a8b9d50936242f0", "patch": "@@ -33,13 +33,19 @@ void test01()\n   size_type_s sz02 = str01.capacity();\n   VERIFY( sz02 >= sz01 );\n   VERIFY( sz02 >= 100 );\n+#if __cplusplus <= 201703L\n   str01.reserve();\n-  sz01 = str01.capacity();\n-#if _GLIBCXX_USE_CXX11_ABI\n-  VERIFY( sz01 < 100);\n #else\n-  VERIFY( sz01 == 0 );\n+  str01.shrink_to_fit(); // reserve is deprecated in C++20\n #endif\n+  sz01 = str01.capacity();\n+  VERIFY( sz01 < sz02 );\n+\n+  // P0966: reserve should not shrink\n+  str01.reserve(100);\n+  sz01 = str01.capacity();\n+  str01.reserve(sz01 - 1);\n+  VERIFY( str01.capacity() == sz01 );\n \n   sz01 = str01.size() + 5;\n   str01.resize(sz01);"}, {"sha": "13f65f57133f1f9bd2b09534a11710a7413fd97a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/char/18654.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/140cf935cd118f7208b7c3826a8b9d50936242f0/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F18654.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/140cf935cd118f7208b7c3826a8b9d50936242f0/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F18654.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F18654.cc?ref=140cf935cd118f7208b7c3826a8b9d50936242f0", "patch": "@@ -47,11 +47,17 @@ void test01()\n     {\n       string str(i, 'x');\n       str.reserve(3 * i);\n+      const size_type cap = str.capacity();\n+      VERIFY( cap >= 3 * i );\n \n       str.reserve(2 * i);\n-      VERIFY( str.capacity() == 2 * i );\n+      VERIFY( str.capacity() == cap );\n \n+#if __cplusplus <= 201703L\n       str.reserve();\n+#else\n+      str.shrink_to_fit(); // reserve is deprecated in C++20\n+#endif\n       VERIFY( str.capacity() == i );\n     }\n }"}, {"sha": "1e87dde6d2e95a55703d6a852168b3532d78962a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/char/2.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/140cf935cd118f7208b7c3826a8b9d50936242f0/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/140cf935cd118f7208b7c3826a8b9d50936242f0/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F2.cc?ref=140cf935cd118f7208b7c3826a8b9d50936242f0", "patch": "@@ -29,7 +29,11 @@ void test02()\n   std::string str01 = \"twelve chars\";\n   // str01 becomes shared\n   std::string str02 = str01;\n-  str01.reserve(1);\n+#if __cplusplus <= 201703L\n+  str01.reserve();\n+#else\n+  str01.shrink_to_fit(); // reserve is deprecated in C++20\n+#endif\n   VERIFY( str01.capacity() >= 12 );\n }\n "}, {"sha": "fa1584cc13432323e37c4f42f7cb528848214326", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/wchar_t/1.cc", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/140cf935cd118f7208b7c3826a8b9d50936242f0/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/140cf935cd118f7208b7c3826a8b9d50936242f0/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F1.cc?ref=140cf935cd118f7208b7c3826a8b9d50936242f0", "patch": "@@ -33,13 +33,19 @@ void test01()\n   size_type_s sz02 = str01.capacity();\n   VERIFY( sz02 >= sz01 );\n   VERIFY( sz02 >= 100 );\n+#if __cplusplus <= 201703L\n   str01.reserve();\n-  sz01 = str01.capacity();\n-#if _GLIBCXX_USE_CXX11_ABI\n-  VERIFY( sz01 < 100);\n #else\n-  VERIFY( sz01 == 0 );\n+  str01.shrink_to_fit(); // reserve is deprecated in C++20\n #endif\n+  sz01 = str01.capacity();\n+  VERIFY( sz01 < sz02 );\n+\n+  // P0966: reserve should not shrink\n+  str01.reserve(100);\n+  sz01 = str01.capacity();\n+  str01.reserve(sz01 - 1);\n+  VERIFY( str01.capacity() == sz01 );\n \n   sz01 = str01.size() + 5;\n   str01.resize(sz01);"}, {"sha": "fcdcd6abb14c70d08e657d120e6415e09c9e655e", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/wchar_t/18654.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/140cf935cd118f7208b7c3826a8b9d50936242f0/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F18654.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/140cf935cd118f7208b7c3826a8b9d50936242f0/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F18654.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F18654.cc?ref=140cf935cd118f7208b7c3826a8b9d50936242f0", "patch": "@@ -47,11 +47,17 @@ void test01()\n     {\n       wstring str(i, L'x');\n       str.reserve(3 * i);\n+      const size_type cap = str.capacity();\n+      VERIFY( cap >= 3 * i );\n \n       str.reserve(2 * i);\n-      VERIFY( str.capacity() == 2 * i );\n+      VERIFY( str.capacity() == cap );\n \n+#if __cplusplus <= 201703L\n       str.reserve();\n+#else\n+      str.shrink_to_fit(); // reserve is deprecated in C++20\n+#endif\n       VERIFY( str.capacity() == i );\n     }\n }"}, {"sha": "1ec140e61bfcfe41d275d85c4f52785bf100dbf0", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/wchar_t/2.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/140cf935cd118f7208b7c3826a8b9d50936242f0/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/140cf935cd118f7208b7c3826a8b9d50936242f0/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F2.cc?ref=140cf935cd118f7208b7c3826a8b9d50936242f0", "patch": "@@ -29,7 +29,11 @@ void test02()\n   std::wstring str01 = L\"twelve chars\";\n   // str01 becomes shared\n   std::wstring str02 = str01;\n-  str01.reserve(1);\n+#if __cplusplus <= 201703L\n+  str01.reserve();\n+#else\n+  str01.shrink_to_fit(); // reserve is deprecated in C++20\n+#endif\n   VERIFY( str01.capacity() == 12 );\n }\n "}]}