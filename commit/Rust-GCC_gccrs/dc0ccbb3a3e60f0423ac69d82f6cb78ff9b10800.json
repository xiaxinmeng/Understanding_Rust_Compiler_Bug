{"sha": "dc0ccbb3a3e60f0423ac69d82f6cb78ff9b10800", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGMwY2NiYjNhM2U2MGYwNDIzYWM2OWQ4MmY2Y2I3OGZmOWIxMDgwMA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2015-09-30T17:43:26Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-09-30T17:43:26Z"}, "message": "[PATCH] Update SSA_NAME manager to use two lists\n\n\t* gimple-ssa.h (gimple_df): Add free_ssanames_queue field.\n\t* passes.c: Include tree-ssanames.h.\n\t(execute_function_todo): Flush the pending free SSA_NAMEs after\n\teliminating unreachable basic blocks.\n\t* tree-ssanames.c (FREE_SSANAMES_QUEUE): new.\n\t(init_ssanames): Initialize FREE_SSANAMES_QUEUE.\n\t(fini_ssanames): Finalize FREE_SSANAMES_QUEUE.\n\t(flush_ssanames_freelist): New function.\n\t(release_ssaname_fn): Put released names on the queue.\n\t(pass_release_ssa_names::execute): Call flush_ssanames_freelist.\n\t* tree-ssanames.h (flush_ssanames_freelist): Declare.\n\nFrom-SVN: r228302", "tree": {"sha": "9dece98ef18534e0b8a0d3a25a64b43857c34914", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dece98ef18534e0b8a0d3a25a64b43857c34914"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc0ccbb3a3e60f0423ac69d82f6cb78ff9b10800", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc0ccbb3a3e60f0423ac69d82f6cb78ff9b10800", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc0ccbb3a3e60f0423ac69d82f6cb78ff9b10800", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc0ccbb3a3e60f0423ac69d82f6cb78ff9b10800/comments", "author": null, "committer": null, "parents": [{"sha": "0fe78d19df60f6131586feb556c1e92bb3c03961", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fe78d19df60f6131586feb556c1e92bb3c03961", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fe78d19df60f6131586feb556c1e92bb3c03961"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "dd723b825abc04b66c2985927eb18e1b5e23146d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc0ccbb3a3e60f0423ac69d82f6cb78ff9b10800/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc0ccbb3a3e60f0423ac69d82f6cb78ff9b10800/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc0ccbb3a3e60f0423ac69d82f6cb78ff9b10800", "patch": "@@ -1,3 +1,17 @@\n+2015-09-30  Bernd Schmidt  <bernds@redhat.com>\n+\n+\t* gimple-ssa.h (gimple_df): Add free_ssanames_queue field.\n+\t* passes.c: Include tree-ssanames.h.\n+\t(execute_function_todo): Flush the pending free SSA_NAMEs after\n+\teliminating unreachable basic blocks.\n+\t* tree-ssanames.c (FREE_SSANAMES_QUEUE): new.\n+\t(init_ssanames): Initialize FREE_SSANAMES_QUEUE.\n+\t(fini_ssanames): Finalize FREE_SSANAMES_QUEUE.\n+\t(flush_ssanames_freelist): New function.\n+\t(release_ssaname_fn): Put released names on the queue.\n+\t(pass_release_ssa_names::execute): Call flush_ssanames_freelist.\n+\t* tree-ssanames.h (flush_ssanames_freelist): Declare.\n+\n 2015-09-30  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* config/i386/intelmic-mkoffload.c (main): Parse \"-v\" flag."}, {"sha": "39551dac418a154b120df300a16e0fd81bf91e7a", "filename": "gcc/gimple-ssa.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc0ccbb3a3e60f0423ac69d82f6cb78ff9b10800/gcc%2Fgimple-ssa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc0ccbb3a3e60f0423ac69d82f6cb78ff9b10800/gcc%2Fgimple-ssa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa.h?ref=dc0ccbb3a3e60f0423ac69d82f6cb78ff9b10800", "patch": "@@ -90,6 +90,9 @@ struct GTY(()) gimple_df {\n   /* Free list of SSA_NAMEs.  */\n   vec<tree, va_gc> *free_ssanames;\n \n+  /* Queue of SSA_NAMEs to be freed at the next opportunity.  */\n+  vec<tree, va_gc> *free_ssanames_queue;\n+\n   /* Hashtable holding definition for symbol.  If this field is not NULL, it\n      means that the first reference to this variable in the function is a\n      USE or a VUSE.  In those cases, the SSA renamer creates an SSA name"}, {"sha": "5b41102e04f126b19f276ec1267cc28c607ca1be", "filename": "gcc/passes.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc0ccbb3a3e60f0423ac69d82f6cb78ff9b10800/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc0ccbb3a3e60f0423ac69d82f6cb78ff9b10800/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=dc0ccbb3a3e60f0423ac69d82f6cb78ff9b10800", "patch": "@@ -84,6 +84,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgrtl.h\"\n #include \"tree-ssa-live.h\"  /* For remove_unused_locals.  */\n #include \"tree-cfgcleanup.h\"\n+#include \"tree-ssanames.h\"\n \n using namespace gcc;\n \n@@ -1913,6 +1914,14 @@ execute_function_todo (function *fn, void *data)\n     {\n       cleanup_tree_cfg ();\n \n+      /* Once unreachable nodes have been removed from the CFG,\n+\t there can't be any lingering references to released\n+\t SSA_NAMES (because there is no more unreachable code).\n+\n+\t Thus, now is the time to flush the SSA_NAMEs freelist.  */\n+      if (fn->gimple_df)\n+\tflush_ssaname_freelist ();\n+\n       /* When cleanup_tree_cfg merges consecutive blocks, it may\n \t perform some simplistic propagation when removing single\n \t valued PHI nodes.  This propagation may, in turn, cause the"}, {"sha": "64e23790ae3cab278eb69e5838848ca9f66b816a", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc0ccbb3a3e60f0423ac69d82f6cb78ff9b10800/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc0ccbb3a3e60f0423ac69d82f6cb78ff9b10800/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=dc0ccbb3a3e60f0423ac69d82f6cb78ff9b10800", "patch": "@@ -70,6 +70,7 @@ unsigned int ssa_name_nodes_reused;\n unsigned int ssa_name_nodes_created;\n \n #define FREE_SSANAMES(fun) (fun)->gimple_df->free_ssanames\n+#define FREE_SSANAMES_QUEUE(fun) (fun)->gimple_df->free_ssanames_queue\n \n \n /* Initialize management of SSA_NAMEs to default SIZE.  If SIZE is\n@@ -92,6 +93,7 @@ init_ssanames (struct function *fn, int size)\n      least 50 elements reserved in it.  */\n   SSANAMES (fn)->quick_push (NULL_TREE);\n   FREE_SSANAMES (fn) = NULL;\n+  FREE_SSANAMES_QUEUE (fn) = NULL;\n \n   fn->gimple_df->ssa_renaming_needed = 0;\n   fn->gimple_df->rename_vops = 0;\n@@ -104,6 +106,7 @@ fini_ssanames (void)\n {\n   vec_free (SSANAMES (cfun));\n   vec_free (FREE_SSANAMES (cfun));\n+  vec_free (FREE_SSANAMES_QUEUE (cfun));\n }\n \n /* Dump some simple statistics regarding the re-use of SSA_NAME nodes.  */\n@@ -115,6 +118,22 @@ ssanames_print_statistics (void)\n   fprintf (stderr, \"SSA_NAME nodes reused: %u\\n\", ssa_name_nodes_reused);\n }\n \n+/* Move all SSA_NAMEs from FREE_SSA_NAMES_QUEUE to FREE_SSA_NAMES.\n+\n+   We do not, but should have a mode to verify the state of the SSA_NAMEs\n+   lists.  In particular at this point every name must be in the IL,\n+   on the free list or in the queue.  Anything else is an error.  */\n+\n+void\n+flush_ssaname_freelist (void)\n+{\n+  while (!vec_safe_is_empty (FREE_SSANAMES_QUEUE (cfun)))\n+    {\n+      tree t = FREE_SSANAMES_QUEUE (cfun)->pop ();\n+      vec_safe_push (FREE_SSANAMES (cfun), t);\n+    }\n+}\n+\n /* Return an SSA_NAME node for variable VAR defined in statement STMT\n    in function FN.  STMT may be an empty statement for artificial\n    references (e.g., default definitions created when a variable is\n@@ -349,8 +368,8 @@ release_ssa_name_fn (struct function *fn, tree var)\n       /* Note this SSA_NAME is now in the first list.  */\n       SSA_NAME_IN_FREE_LIST (var) = 1;\n \n-      /* And finally put it on the free list.  */\n-      vec_safe_push (FREE_SSANAMES (fn), var);\n+      /* And finally queue it so that it will be put on the free list.  */\n+      vec_safe_push (FREE_SSANAMES_QUEUE (fn), var);\n     }\n }\n \n@@ -631,6 +650,7 @@ unsigned int\n pass_release_ssa_names::execute (function *fun)\n {\n   unsigned i, j;\n+  flush_ssaname_freelist ();\n   int n = vec_safe_length (FREE_SSANAMES (fun));\n \n   /* Now release the freelist.  */"}, {"sha": "a915d8f1c517755de1e1a859a3cc38e215a033f2", "filename": "gcc/tree-ssanames.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc0ccbb3a3e60f0423ac69d82f6cb78ff9b10800/gcc%2Ftree-ssanames.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc0ccbb3a3e60f0423ac69d82f6cb78ff9b10800/gcc%2Ftree-ssanames.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.h?ref=dc0ccbb3a3e60f0423ac69d82f6cb78ff9b10800", "patch": "@@ -98,6 +98,7 @@ extern void reset_flow_sensitive_info (tree);\n extern void reset_flow_sensitive_info_in_bb (basic_block);\n extern void release_defs (gimple *);\n extern void replace_ssa_name_symbol (tree, tree);\n+extern void flush_ssaname_freelist (void);\n \n \n /* Return an SSA_NAME node for variable VAR defined in statement STMT"}]}