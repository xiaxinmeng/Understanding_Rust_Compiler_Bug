{"sha": "e26053d191e085a945f8da9bda69321a68048dc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI2MDUzZDE5MWUwODVhOTQ1ZjhkYTliZGE2OTMyMWE2ODA0OGRjNw==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2002-08-08T11:24:01Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2002-08-08T11:24:01Z"}, "message": "oops - minor formatting tidy ups to previous delta\n\nFrom-SVN: r56129", "tree": {"sha": "1ef4d737d669bb00bfaf6a5f6871668020a6e263", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ef4d737d669bb00bfaf6a5f6871668020a6e263"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e26053d191e085a945f8da9bda69321a68048dc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e26053d191e085a945f8da9bda69321a68048dc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e26053d191e085a945f8da9bda69321a68048dc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e26053d191e085a945f8da9bda69321a68048dc7/comments", "author": null, "committer": null, "parents": [{"sha": "aeaf4d25a8a6a06c8dd8735e0a9b3608acc10d3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeaf4d25a8a6a06c8dd8735e0a9b3608acc10d3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeaf4d25a8a6a06c8dd8735e0a9b3608acc10d3f"}], "stats": {"total": 26, "additions": 11, "deletions": 15}, "files": [{"sha": "eb0481d2fe8aea5f2487544237cb736f937ff80a", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26053d191e085a945f8da9bda69321a68048dc7/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26053d191e085a945f8da9bda69321a68048dc7/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=e26053d191e085a945f8da9bda69321a68048dc7", "patch": "@@ -363,7 +363,7 @@ static const struct processors all_cores[] =\n   {\"arm10tdmi\",\t                         FL_MODE32 | FL_FAST_MULT | FL_ARCH4 | FL_THUMB | FL_LDSCHED             | FL_ARCH5 },\n   {\"arm1020t\",\t                         FL_MODE32 | FL_FAST_MULT | FL_ARCH4 | FL_THUMB | FL_LDSCHED             | FL_ARCH5 },\n   {\"xscale\",                             FL_MODE32 | FL_FAST_MULT | FL_ARCH4 | FL_THUMB | FL_LDSCHED | FL_STRONG | FL_ARCH5 | FL_ARCH5E | FL_XSCALE },\n-  \n+\n   {NULL, 0}\n };\n \n@@ -578,7 +578,7 @@ arm_override_options ()\n      architecture has been selected.  */\n   if (tune_flags == 0)\n     tune_flags = insn_flags;\n-  \n+\n   /* Make sure that the processor choice does not conflict with any of the\n      other command line choices.  */\n   if (TARGET_APCS_32 && !(insn_flags & FL_MODE32))\n@@ -722,7 +722,7 @@ arm_override_options ()\n   if (arm_pic_register_string != NULL)\n     {\n       int pic_register = decode_reg_name (arm_pic_register_string);\n-      \n+\n       if (!flag_pic)\n \twarning (\"-mpic-register= is useless without -fpic\");\n \n@@ -7187,7 +7187,7 @@ output_return_instruction (operand, really_return, reverse)\n   int reg;\n   unsigned long live_regs_mask;\n   unsigned long func_type;\n-  \n+\n   func_type = arm_current_func_type ();\n \n   if (IS_NAKED (func_type))\n@@ -7328,7 +7328,7 @@ output_return_instruction (operand, really_return, reverse)\n \t  really_return = 0;\n \t}\n     }\n-  \n+\n   if (really_return)\n     {\n       switch ((int) ARM_FUNC_TYPE (func_type))\n@@ -8632,7 +8632,7 @@ arm_assemble_integer (x, size, aligned_p)\n       if (NEED_GOT_RELOC && flag_pic && making_const_table &&\n \t  (GET_CODE (x) == SYMBOL_REF || GET_CODE (x) == LABEL_REF))\n \t{\n-\t  if (GET_CODE (x) == SYMBOL_REF \n+\t  if (GET_CODE (x) == SYMBOL_REF\n \t      && (CONSTANT_POOL_ADDRESS_P (x)\n \t\t  || ENCODED_SHORT_CALL_ATTR_P (XSTR (x, 0))))\n \t    fputs (\"(GOTOFF)\", asm_out_file);\n@@ -9362,7 +9362,7 @@ arm_expand_builtin (exp, target, subtarget, mode, ignore)\n       emit_insn (pat);\n       return target;\n     }\n-  \n+\n   /* @@@ Should really do something sensible here.  */\n   return NULL_RTX;\n }\n@@ -10414,10 +10414,8 @@ thumb_output_function_prologue (f, size)\n     thumb_pushpop (f, live_regs_mask, 1);\n \n   for (regno = 8; regno < 13; regno++)\n-    {\n-      if (THUMB_REG_PUSHED_P (regno))\n-\thigh_regs_pushed++;\n-    }\n+    if (THUMB_REG_PUSHED_P (regno))\n+      high_regs_pushed++;\n \n   if (high_regs_pushed)\n     {\n@@ -10426,10 +10424,8 @@ thumb_output_function_prologue (f, size)\n       int next_hi_reg;\n \n       for (next_hi_reg = 12; next_hi_reg > LAST_LO_REGNUM; next_hi_reg--)\n-\t{\n-\t  if (THUMB_REG_PUSHED_P (next_hi_reg))\n-\t    break;\n-\t}\n+\tif (THUMB_REG_PUSHED_P (next_hi_reg))\n+\t  break;\n \n       pushable_regs = mask;\n "}]}