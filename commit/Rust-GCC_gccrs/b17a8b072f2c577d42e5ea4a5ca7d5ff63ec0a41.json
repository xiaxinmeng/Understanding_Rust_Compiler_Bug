{"sha": "b17a8b072f2c577d42e5ea4a5ca7d5ff63ec0a41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE3YThiMDcyZjJjNTc3ZDQyZTVlYTRhNWNhN2Q1ZmY2M2VjMGE0MQ==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2014-03-07T08:46:13Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2014-03-07T08:46:13Z"}, "message": "The error_mark_node is not an OpenMP mappable type.\n\n\tgcc/\n\t* langhooks.c (lhd_omp_mappable_type): The error_mark_node is not\n\tan OpenMP mappable type.\n\tgcc/c/\n\t* c-decl.c (c_decl_attributes): Use\n\tlang_hooks.types.omp_mappable_type.\n\t* c-typeck.c (c_finish_omp_clauses): Likewise.\n\tgcc/testsuite/\n\t* c-c++-common/gomp/map-1.c: Extend.\n\nFrom-SVN: r208394", "tree": {"sha": "7d413f5734b66913e2660f80e881b95d7e0499ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d413f5734b66913e2660f80e881b95d7e0499ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b17a8b072f2c577d42e5ea4a5ca7d5ff63ec0a41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b17a8b072f2c577d42e5ea4a5ca7d5ff63ec0a41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b17a8b072f2c577d42e5ea4a5ca7d5ff63ec0a41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b17a8b072f2c577d42e5ea4a5ca7d5ff63ec0a41/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c5604b48f91fa510171faf5a6e9d4138799186f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5604b48f91fa510171faf5a6e9d4138799186f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5604b48f91fa510171faf5a6e9d4138799186f1"}], "stats": {"total": 39, "additions": 31, "deletions": 8}, "files": [{"sha": "177cda85570279e68cc5fa8c71c291aeaaa87036", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17a8b072f2c577d42e5ea4a5ca7d5ff63ec0a41/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17a8b072f2c577d42e5ea4a5ca7d5ff63ec0a41/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b17a8b072f2c577d42e5ea4a5ca7d5ff63ec0a41", "patch": "@@ -1,3 +1,8 @@\n+2014-03-07  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* langhooks.c (lhd_omp_mappable_type): The error_mark_node is not\n+\tan OpenMP mappable type.\n+\n 2014-03-06  Matthias Klose  <doko@ubuntu.com>\n \n \t* Makefile.in (s-mlib): Only pass MULTIARCH_DIRNAME if"}, {"sha": "9d854a7feb695fdb9fd49cfcc6723d453a084a27", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17a8b072f2c577d42e5ea4a5ca7d5ff63ec0a41/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17a8b072f2c577d42e5ea4a5ca7d5ff63ec0a41/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=b17a8b072f2c577d42e5ea4a5ca7d5ff63ec0a41", "patch": "@@ -1,3 +1,9 @@\n+2014-03-07  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-decl.c (c_decl_attributes): Use\n+\tlang_hooks.types.omp_mappable_type.\n+\t* c-typeck.c (c_finish_omp_clauses): Likewise.\n+\n 2014-03-06  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/60197"}, {"sha": "2c41bf2ce92c8574f61bd41be913778bdeec4167", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17a8b072f2c577d42e5ea4a5ca7d5ff63ec0a41/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17a8b072f2c577d42e5ea4a5ca7d5ff63ec0a41/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=b17a8b072f2c577d42e5ea4a5ca7d5ff63ec0a41", "patch": "@@ -4024,7 +4024,7 @@ c_decl_attributes (tree *node, tree attributes, int flags)\n \terror (\"%q+D in block scope inside of declare target directive\",\n \t       *node);\n       else if (TREE_CODE (*node) == VAR_DECL\n-\t       && !COMPLETE_TYPE_P (TREE_TYPE (*node)))\n+\t       && !lang_hooks.types.omp_mappable_type (TREE_TYPE (*node)))\n \terror (\"%q+D in declare target directive does not have mappable type\",\n \t       *node);\n       else"}, {"sha": "524a59f12e274ab6a76fabd82a93519cec5bab5d", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17a8b072f2c577d42e5ea4a5ca7d5ff63ec0a41/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17a8b072f2c577d42e5ea4a5ca7d5ff63ec0a41/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=b17a8b072f2c577d42e5ea4a5ca7d5ff63ec0a41", "patch": "@@ -12032,7 +12032,7 @@ c_finish_omp_clauses (tree clauses)\n \t      else\n \t\t{\n \t\t  t = OMP_CLAUSE_DECL (c);\n-\t\t  if (!COMPLETE_TYPE_P (TREE_TYPE (t)))\n+\t\t  if (!lang_hooks.types.omp_mappable_type (TREE_TYPE (t)))\n \t\t    {\n \t\t      error_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t\t\"array section does not have mappable type \"\n@@ -12061,9 +12061,9 @@ c_finish_omp_clauses (tree clauses)\n \t    }\n \t  else if (!c_mark_addressable (t))\n \t    remove = true;\n-\t  else if (!COMPLETE_TYPE_P (TREE_TYPE (t))\n-\t\t   && !(OMP_CLAUSE_CODE (c) == OMP_CLAUSE_MAP\n-\t\t\t&& OMP_CLAUSE_MAP_KIND (c) == OMP_CLAUSE_MAP_POINTER))\n+\t  else if (!(OMP_CLAUSE_CODE (c) == OMP_CLAUSE_MAP\n+\t\t     && OMP_CLAUSE_MAP_KIND (c) == OMP_CLAUSE_MAP_POINTER)\n+\t\t   && !lang_hooks.types.omp_mappable_type (TREE_TYPE (t)))\n \t    {\n \t      error_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t\"%qD does not have a mappable type in %qs clause\", t,"}, {"sha": "d00ebd8a08c75ef350c31ca902f15f76949e425b", "filename": "gcc/langhooks.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17a8b072f2c577d42e5ea4a5ca7d5ff63ec0a41/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17a8b072f2c577d42e5ea4a5ca7d5ff63ec0a41/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=b17a8b072f2c577d42e5ea4a5ca7d5ff63ec0a41", "patch": "@@ -524,13 +524,15 @@ lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *c ATTRIBUTE_UNUSED,\n {\n }\n \n-/* Return true if TYPE is an OpenMP mappable type.  By default return true\n-   if type is complete.  */\n+/* Return true if TYPE is an OpenMP mappable type.  */\n \n bool\n lhd_omp_mappable_type (tree type)\n {\n-  return COMPLETE_TYPE_P (type);\n+  /* Mappable type has to be complete.  */\n+  if (type == error_mark_node || !COMPLETE_TYPE_P (type))\n+    return false;\n+  return true;\n }\n \n /* Common function for add_builtin_function and"}, {"sha": "642abab5f2a4b8d3f828ac22481c183651ed1e37", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17a8b072f2c577d42e5ea4a5ca7d5ff63ec0a41/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17a8b072f2c577d42e5ea4a5ca7d5ff63ec0a41/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b17a8b072f2c577d42e5ea4a5ca7d5ff63ec0a41", "patch": "@@ -1,3 +1,7 @@\n+2014-03-07  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-c++-common/gomp/map-1.c: Extend.\n+\n 2014-03-06  Paul Thomas  <pault@gcc.gnu.org>\n \t    Janus Weil  <janus@gcc.gnu.org>\n "}, {"sha": "5dad7d6a9aa9edfed1138e00255014886398831f", "filename": "gcc/testsuite/c-c++-common/gomp/map-1.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17a8b072f2c577d42e5ea4a5ca7d5ff63ec0a41/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fmap-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17a8b072f2c577d42e5ea4a5ca7d5ff63ec0a41/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fmap-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fmap-1.c?ref=b17a8b072f2c577d42e5ea4a5ca7d5ff63ec0a41", "patch": "@@ -8,6 +8,8 @@ int k[10], l[10], m[10], n[10], o;\n int *p;\n int **q;\n int r[4][4][4][4][4];\n+extern struct s s1;\n+extern struct s s2[1]; /* { dg-error \"array type has incomplete element type\" \"\" { target c } } */\n int t[10];\n #pragma omp threadprivate (t)\n #pragma omp declare target\n@@ -32,6 +34,10 @@ foo (int g[3][10], int h[4][8], int i[2][10], int j[][9],\n     ;\n   #pragma omp target map(to: o[2:5]) /* { dg-error \"does not have pointer or array type\" } */\n     ;\n+  #pragma omp target map(alloc: s1) /* { dg-error \"'s1' does not have a mappable type in 'map' clause\" } */\n+    ;\n+  #pragma omp target map(alloc: s2) /* { dg-error \"'s2' does not have a mappable type in 'map' clause\" } */\n+    ;\n   #pragma omp target map(to: a[:][:]) /* { dg-error \"array type length expression must be specified\" } */\n     bar (&a[0][0]); /* { dg-error \"referenced in target region does not have a mappable type\" } */\n   #pragma omp target map(tofrom: b[-1:]) /* { dg-error \"negative low bound in array section\" } */"}]}