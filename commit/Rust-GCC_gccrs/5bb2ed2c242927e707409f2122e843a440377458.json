{"sha": "5bb2ed2c242927e707409f2122e843a440377458", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJiMmVkMmMyNDI5MjdlNzA3NDA5ZjIxMjJlODQzYTQ0MDM3NzQ1OA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-03-01T04:07:36Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-03-01T04:07:36Z"}, "message": "re PR debug/14328 (gcc3.2.2 generates incorrect debugging enum values)\n\n\tPR debug/14328\n\t* dwarf2out.c (gen_enumeration_type_die): Output all enumeration\n\tconstants as signed values.\n\nFrom-SVN: r78690", "tree": {"sha": "0dc664d7c48ac7ac3e537bacd71c16fdf9d499e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dc664d7c48ac7ac3e537bacd71c16fdf9d499e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bb2ed2c242927e707409f2122e843a440377458", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bb2ed2c242927e707409f2122e843a440377458", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bb2ed2c242927e707409f2122e843a440377458", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bb2ed2c242927e707409f2122e843a440377458/comments", "author": null, "committer": null, "parents": [{"sha": "719f407a02770137469db0b997f8630fd7fda187", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/719f407a02770137469db0b997f8630fd7fda187", "html_url": "https://github.com/Rust-GCC/gccrs/commit/719f407a02770137469db0b997f8630fd7fda187"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "a13eb92103ba006877d88489a173345f46a81b98", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bb2ed2c242927e707409f2122e843a440377458/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bb2ed2c242927e707409f2122e843a440377458/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5bb2ed2c242927e707409f2122e843a440377458", "patch": "@@ -1,5 +1,9 @@\n 2004-02-29  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR debug/14328\n+\t* dwarf2out.c (gen_enumeration_type_die): Output all enumeration\n+\tconstants as signed values.\n+\n \tPR middle-end/13448\n \t* c-tree.h (readonly_warning): Rename to ...\n \t(readonly_error): ... this."}, {"sha": "599b6c9c6435108e30a9f35293e11b5d5fd61d17", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bb2ed2c242927e707409f2122e843a440377458/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bb2ed2c242927e707409f2122e843a440377458/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=5bb2ed2c242927e707409f2122e843a440377458", "patch": "@@ -10691,20 +10691,20 @@ gen_enumeration_type_die (tree type, dw_die_ref context_die)\n \t   link != NULL; link = TREE_CHAIN (link))\n \t{\n \t  dw_die_ref enum_die = new_die (DW_TAG_enumerator, type_die, link);\n+\t  tree value = TREE_VALUE (link);\n \n \t  add_name_attribute (enum_die,\n \t\t\t      IDENTIFIER_POINTER (TREE_PURPOSE (link)));\n \n-\t  if (host_integerp (TREE_VALUE (link), \n-\t\t\t     TREE_UNSIGNED (TREE_TYPE (TREE_VALUE (link)))))\n-\t    {\n-\t      if (tree_int_cst_sgn (TREE_VALUE (link)) < 0)\n-\t\tadd_AT_int (enum_die, DW_AT_const_value,\n-\t\t\t    tree_low_cst (TREE_VALUE (link), 0));\n-\t      else\n-\t\tadd_AT_unsigned (enum_die, DW_AT_const_value,\n-\t\t\t\t tree_low_cst (TREE_VALUE (link), 1));\n-\t    }\n+\t  if (host_integerp (value, TREE_UNSIGNED (TREE_TYPE (value))))\n+\t    /* DWARF2 does not provide a way of indicating whether or\n+\t       not enumeration constants are signed or unsigned.  GDB\n+\t       always assumes the values are signed, so we output all\n+\t       values as if they were signed.  That means that\n+\t       enumeration constants with very large unsigned values\n+\t       will appear to have negative values in the debugger.  */\n+\t    add_AT_int (enum_die, DW_AT_const_value,\n+\t\t\ttree_low_cst (value, tree_int_cst_sgn (value) > 0));\n \t}\n     }\n   else"}]}