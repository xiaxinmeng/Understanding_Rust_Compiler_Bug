{"sha": "081f5e7e66fa8116bb1aeff9a154fbc788ca81f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgxZjVlN2U2NmZhODExNmJiMWFlZmY5YTE1NGZiYzc4OGNhODFmNg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-03-18T07:18:06Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-03-18T07:18:06Z"}, "message": "Fix more warnings...\n\n        * c-lang.c (finish_file): Wrap variable `void_list_node' with macro\n        test !ASM_OUTPUT_CONSTRUCTOR || !ASM_OUTPUT_DESTRUCTOR.\n        * calls.c (emit_call_1): Wrap variable `already_popped' with macro\n        test !ACCUMULATE_OUTGOING_ARGS.\n        * collect2.c (write_c_file_glob): Wrap function definition in\n        macro test !LD_INIT_SWITCH.\n        * combine.c (try_combine): Wrap variables `cc_use' and\n        `compare_mode' in macro test EXTRA_CC_MODES.\n        * cpplib.c (do_ident): Remove unused variable `len'.\n        (skip_if_group): Remove unused variables `at_beg_of_line' and\n        `after_ident'.\n        (cpp_get_token): Remove unused variable `dummy'.\n        * dbxout.c (scope_labelno): Move static variable definition inside\n        the one function scope where it is used.\n        (dbxout_function_end): Wrap prototype and definition in\n        macro test !NO_DBX_FUNCTION_END.\n        * dwarf2out.c (add_subscript_info): Wrap variable `dimension_number'\n        in macro test !MIPS_DEBUGGING_INFO.\n        * expr.c (expand_builtin_setjmp): Move declaration of variable `i'\n        into the scope where it is used.  Wrap empty else-statement body\n        in braces.\n        * fix-header.c: Fix typo in comment.\n        (inf_skip_spaces): Cast results of INF_UNGET to (void).\n        (check_protection, main): Likewise.\n        * flow.c (find_basic_blocks_1): Remove dangling comment text.\n        * function.c (contains): Wrap prototype and definition in macro\n        test HAVE_prologue || HAVE_epilogue.\n        (fixup_var_refs_1): Remove unused variable `width'.\n        * gen-protos.c (main): Remove unused variable `optr'.\n        * haifa-sched.c (debug_control_flow): Remove unused variable `j'.\n        * libgcc2.c (__udiv_w_sdiv): Provide dummy return value of 0.\n        (__sjpopnthrow): Remove unused variable `jmpbuf'.\n        (__throw): Remove unused variable `val'.\n        * protoize.c: Check for a previously existing definition before\n        defining *_OK macros.\n        * scan-decls.c (scan_decls): Remove unused variable `old_written'.\n\nFrom-SVN: r18654", "tree": {"sha": "b006a2ceb24b3ae540a176142149eeeb7cec4bae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b006a2ceb24b3ae540a176142149eeeb7cec4bae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/comments", "author": null, "committer": null, "parents": [{"sha": "83566abf9f4fd5d398c4622e9f40b747e92fa668", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83566abf9f4fd5d398c4622e9f40b747e92fa668", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83566abf9f4fd5d398c4622e9f40b747e92fa668"}], "stats": {"total": 127, "additions": 96, "deletions": 31}, "files": [{"sha": "8b70fb71be37a4d60d9aa4b4a468fb81fd6ebacf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=081f5e7e66fa8116bb1aeff9a154fbc788ca81f6", "patch": "@@ -1,3 +1,57 @@\n+Wed Mar 18 09:56:26 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c-lang.c (finish_file): Wrap variable `void_list_node' with macro\n+\ttest !ASM_OUTPUT_CONSTRUCTOR || !ASM_OUTPUT_DESTRUCTOR.\n+\n+\t* calls.c (emit_call_1): Wrap variable `already_popped' with macro\n+\ttest !ACCUMULATE_OUTGOING_ARGS. \n+\n+\t* collect2.c (write_c_file_glob): Wrap function definition in\n+\tmacro test !LD_INIT_SWITCH.\n+\n+\t* combine.c (try_combine): Wrap variables `cc_use' and\n+\t`compare_mode' in macro test EXTRA_CC_MODES.\n+\n+\t* cpplib.c (do_ident): Remove unused variable `len'.\n+\t(skip_if_group): Remove unused variables `at_beg_of_line' and\n+\t`after_ident'.\n+\t(cpp_get_token): Remove unused variable `dummy'.\n+\n+\t* dbxout.c (scope_labelno): Move static variable definition inside\n+\tthe one function scope where it is used.\n+\t(dbxout_function_end): Wrap prototype and definition in\n+\tmacro test !NO_DBX_FUNCTION_END.\n+\n+\t* dwarf2out.c (add_subscript_info): Wrap variable `dimension_number'\n+\tin macro test !MIPS_DEBUGGING_INFO.\n+\n+\t* expr.c (expand_builtin_setjmp): Move declaration of variable `i'\n+\tinto the scope where it is used.  Wrap empty else-statement body\n+\tin braces.\n+\n+\t* fix-header.c: Fix typo in comment.\n+\t(inf_skip_spaces): Cast results of INF_UNGET to (void).\n+\t(check_protection, main): Likewise.\n+\n+\t* flow.c (find_basic_blocks_1): Remove dangling comment text.\n+\n+\t* function.c (contains): Wrap prototype and definition in macro\n+\ttest HAVE_prologue || HAVE_epilogue.\n+\t(fixup_var_refs_1): Remove unused variable `width'.\n+\n+\t* gen-protos.c (main): Remove unused variable `optr'.\n+\n+\t* haifa-sched.c (debug_control_flow): Remove unused variable `j'.\n+\n+\t* libgcc2.c (__udiv_w_sdiv): Provide dummy return value of 0.\n+\t(__sjpopnthrow): Remove unused variable `jmpbuf'.\n+\t(__throw): Remove unused variable `val'.\n+\n+\t* protoize.c: Check for a previously existing definition before\n+\tdefining *_OK macros. \n+\n+\t* scan-decls.c (scan_decls): Remove unused variable `old_written'.\n+\n Tue Mar 17 00:45:48 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* vax.h (ADDR_VEC_ALIGN): Define."}, {"sha": "19d742ab134e26341c5f2b98210d80d385c3860f", "filename": "gcc/c-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=081f5e7e66fa8116bb1aeff9a154fbc788ca81f6", "patch": "@@ -143,7 +143,9 @@ finish_file ()\n   extern tree static_dtors;\n #endif\n   extern tree build_function_call                 PROTO((tree, tree));\n+#if !defined(ASM_OUTPUT_CONSTRUCTOR) || !defined(ASM_OUTPUT_DESTRUCTOR)\n   tree void_list_node = build_tree_list (NULL_TREE, void_type_node);\n+#endif\n #ifndef ASM_OUTPUT_CONSTRUCTOR\n   if (static_ctors)\n     {"}, {"sha": "86dc28bcba63ad4a0211f22e2009aebf8ea39da3", "filename": "gcc/calls.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=081f5e7e66fa8116bb1aeff9a154fbc788ca81f6", "patch": "@@ -358,7 +358,9 @@ emit_call_1 (funexp, fndecl, funtype, stack_size, struct_value_size,\n   rtx stack_size_rtx = GEN_INT (stack_size);\n   rtx struct_value_size_rtx = GEN_INT (struct_value_size);\n   rtx call_insn;\n+#ifndef ACCUMULATE_OUTGOING_ARGS\n   int already_popped = 0;\n+#endif\n \n   /* Ensure address is valid.  SYMBOL_REF is already valid, so no need,\n      and we don't want to load it into a register as an optimization,"}, {"sha": "89feaa4c185727860eb5f9676ca546b390964e85", "filename": "gcc/collect2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=081f5e7e66fa8116bb1aeff9a154fbc788ca81f6", "patch": "@@ -2045,6 +2045,7 @@ write_c_file_stat (stream, name)\n \n /* Write the constructor/destructor tables.  */\n \n+#ifndef LD_INIT_SWITCH\n static void\n write_c_file_glob (stream, name)\n      FILE *stream;\n@@ -2108,6 +2109,7 @@ write_c_file_glob (stream, name)\n   fprintf (stream, \"extern entry_pt %s;\\n\", NAME__MAIN);\n   fprintf (stream, \"entry_pt *__main_reference = %s;\\n\\n\", NAME__MAIN);\n }\n+#endif /* ! LD_INIT_SWITCH */\n \n static void\n write_c_file (stream, name)"}, {"sha": "6404787db2ea693b37f20aac9022a0c4f253b31f", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=081f5e7e66fa8116bb1aeff9a154fbc788ca81f6", "patch": "@@ -1662,8 +1662,10 @@ try_combine (i3, i2, i1)\n       && XEXP (SET_SRC (PATTERN (i3)), 1) == const0_rtx\n       && rtx_equal_p (XEXP (SET_SRC (PATTERN (i3)), 0), i2dest))\n     {\n+#ifdef EXTRA_CC_MODES\n       rtx *cc_use;\n       enum machine_mode compare_mode;\n+#endif\n \n       newpat = PATTERN (i3);\n       SUBST (XEXP (SET_SRC (newpat), 0), i2src);"}, {"sha": "aff4054fda714efdaac99278e58c1f0eef792b3d", "filename": "gcc/cpplib.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=081f5e7e66fa8116bb1aeff9a154fbc788ca81f6", "patch": "@@ -1,5 +1,5 @@\n /* CPP Library.\n-   Copyright (C) 1986, 87, 89, 92-6, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1986, 87, 89, 92-7, 1998 Free Software Foundation, Inc.\n    Contributed by Per Bothner, 1994-95.\n    Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n@@ -3969,7 +3969,6 @@ do_ident (pfile, keyword, buf, limit)\n      U_CHAR *buf, *limit;\n {\n /*  long old_written = CPP_WRITTEN (pfile);*/\n-  int len;\n \n   /* Allow #ident in system headers, since that's not user's fault.  */\n   if (CPP_PEDANTIC (pfile) && !CPP_BUFFER (pfile)->system_header_p)\n@@ -4289,14 +4288,13 @@ skip_if_group (pfile, any)\n      int any;\n {\n   int c;\n-  int at_beg_of_line = 1;\n   struct directive *kt;\n   IF_STACK_FRAME *save_if_stack = pfile->if_stack; /* don't pop past here */\n #if 0\n   U_CHAR *beg_of_line = bp;\n #endif\n   register int ident_length;\n-  U_CHAR *ident, *after_ident;\n+  U_CHAR *ident;\n   struct parse_marker line_start_mark;\n \n   parse_set_mark (&line_start_mark, pfile);\n@@ -4655,7 +4653,6 @@ cpp_get_token (pfile)\n \t  if (opts->put_out_comments)\n \t    {\n \t      cpp_buffer *pbuf = CPP_BUFFER (pfile);\n-\t      long dummy;\n \t      U_CHAR *start = pbuf->buf + start_mark.position;\n \t      int len = pbuf->cur - start;\n \t      CPP_RESERVE(pfile, 1 + len);"}, {"sha": "1c760b20e8eaa1bdb8b32e18cc46bbdf8ef4f31c", "filename": "gcc/dbxout.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=081f5e7e66fa8116bb1aeff9a154fbc788ca81f6", "patch": "@@ -1,5 +1,5 @@\n /* Output dbx-format symbol table information from GNU compiler.\n-   Copyright (C) 1987, 88, 92-96, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 92-97, 1998 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -162,8 +162,6 @@ static int have_used_extensions = 0;\n \n static int source_label_number = 1;\n \n-static int scope_labelno = 0;\n-\n char *getpwd ();\n \n /* Typical USG systems don't have stab.h, and they also have\n@@ -333,7 +331,9 @@ void dbxout_types ();\n void dbxout_args ();\n void dbxout_symbol ();\n \n+#ifndef NO_DBX_FUNCTION_END\n static void dbxout_function_end\t\tPROTO((void));\n+#endif\n static void dbxout_typedefs\t\tPROTO((tree));\n static void dbxout_type_index\t\tPROTO((tree));\n static void dbxout_continue\t\tPROTO((void));\n@@ -352,9 +352,11 @@ static void dbxout_finish_symbol\tPROTO((tree));\n static void dbxout_block\t\tPROTO((tree, int, tree));\n static void dbxout_really_begin_function PROTO((tree));\n \f\n+#ifndef NO_DBX_FUNCTION_END\n static void\n dbxout_function_end ()\n {\n+  static int scope_labelno = 0;\n   char lscope_label_name[100];\n   /* Convert Ltext into the appropriate format for local labels in case\n      the system doesn't insert underscores in front of user generated\n@@ -371,6 +373,7 @@ dbxout_function_end ()\n   assemble_name (asmfile, XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0));\n   fprintf (asmfile, \"\\n\");\n }\n+#endif /* ! NO_DBX_FUNCTION_END */\n \n /* At the beginning of compilation, start writing the symbol table.\n    Initialize `typevec' and output the standard data types of C.  */"}, {"sha": "d46aa3a98eac47493a3e467b08e9c6d8e60afe70", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=081f5e7e66fa8116bb1aeff9a154fbc788ca81f6", "patch": "@@ -1,5 +1,5 @@\n /* Output Dwarf2 format symbol table information from the GNU C compiler.\n-   Copyright (C) 1992, 1993, 1995, 1996, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 1993, 95-97, 1998 Free Software Foundation, Inc.\n    Contributed by Gary Funck (gary@intrepid.com).\n    Derived from DWARF 1 implementation of Ron Guilmette (rfg@monkeys.com).\n    Extensively modified by Jason Merrill (jason@cygnus.com).\n@@ -7205,7 +7205,9 @@ add_subscript_info (type_die, type)\n      register dw_die_ref type_die;\n      register tree type;\n {\n+#ifndef MIPS_DEBUGGING_INFO\n   register unsigned dimension_number;\n+#endif\n   register tree lower, upper;\n   register dw_die_ref subrange_die;\n "}, {"sha": "8edc49ea338ffe8e10f32b3f69a1ba0bfc9ebaa6", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=081f5e7e66fa8116bb1aeff9a154fbc788ca81f6", "patch": "@@ -7624,7 +7624,6 @@ expand_builtin_setjmp (buf_addr, target, first_label, next_label)\n   rtx lab1 = gen_label_rtx ();\n   enum machine_mode sa_mode = Pmode, value_mode;\n   rtx stack_save;\n-  int i;\n \n   value_mode = TYPE_MODE (integer_type_node);\n \n@@ -7696,6 +7695,7 @@ expand_builtin_setjmp (buf_addr, target, first_label, next_label)\n   if (fixed_regs[ARG_POINTER_REGNUM])\n     {\n #ifdef ELIMINABLE_REGS\n+      int i;\n       static struct elims {int from, to;} elim_regs[] = ELIMINABLE_REGS;\n \n       for (i = 0; i < sizeof elim_regs / sizeof elim_regs[0]; i++)\n@@ -7729,7 +7729,9 @@ expand_builtin_setjmp (buf_addr, target, first_label, next_label)\n       emit_insn (gen_nonlocal_goto_receiver ());\n     else\n #endif\n-      ; /* Nothing */\n+      {\n+\t; /* Nothing */\n+      }\n \n   /* Set TARGET, and branch to the next-time-through label.  */\n   emit_move_insn (target, gen_lowpart (GET_MODE (target), static_chain_rtx));"}, {"sha": "53105ba1a16eff21e10d21f16c58f395585f07db", "filename": "gcc/fix-header.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=081f5e7e66fa8116bb1aeff9a154fbc788ca81f6", "patch": "@@ -1,5 +1,5 @@\n /* fix-header.c - Make C header file suitable for C++.\n-   Copyright (C) 1993, 1994, 1995, 1996, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 94-97, 1998 Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -26,7 +26,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n    an argument list), and it is a \"standard\" function listed in\n    the file sys-protos.h (and with a non-empty argument list), then\n    the declaration is converted to a complete prototype by replacing\n-   the empty parameter list with the argument lust from sys-protos.h.\n+   the empty parameter list with the argument list from sys-protos.h.\n \n    * The program can be given a list of (names of) required standard\n    functions (such as fclose for stdio.h).  If a required function\n@@ -898,7 +898,7 @@ inf_skip_spaces (c)\n \t  c = INF_GET ();\n \t  if (c != '*')\n \t    {\n-\t      INF_UNGET (c);\n+\t      (void) INF_UNGET (c);\n \t      return '/';\n \t    }\n \t  c = INF_GET ();\n@@ -999,7 +999,7 @@ check_protection (ifndef_line, endif_line)\n     return 0;\n   protect_name = xstrdup (buf.base);\n \n-  INF_UNGET (c);\n+  (void) INF_UNGET (c);\n   c = inf_read_upto (&buf, '\\n');\n   if (c == EOF)\n     return 0;\n@@ -1268,7 +1268,7 @@ main (argc, argv)\n \t  if (isalpha (c) || c == '_')\n \t    {\n \t      c = inf_scan_ident (&buf, c);\n-\t      INF_UNGET (c);\n+\t      (void) INF_UNGET (c);\n \t      fputs (buf.base, outf);\n \t      fn = lookup_std_proto (buf.base, strlen (buf.base));\n \t      /* We only want to edit the declaration matching the one\n@@ -1289,7 +1289,7 @@ main (argc, argv)\n \t\t      else\n \t\t\t{\n \t\t\t  putc ('(', outf);\n-\t\t\t  INF_UNGET (c);\n+\t\t\t  (void) INF_UNGET (c);\n \t\t\t}\n \t\t    }\n \t\t  else"}, {"sha": "54ec3136f23657e71798242bbb277cf575443212", "filename": "gcc/flow.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=081f5e7e66fa8116bb1aeff9a154fbc788ca81f6", "patch": "@@ -1,5 +1,5 @@\n /* Data flow analysis for GNU compiler.\n-   Copyright (C) 1987, 88, 92-96, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 92-97, 1998 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -676,10 +676,6 @@ find_basic_blocks_1 (f, nonlocal_label_list, live_reachable_p)\n \t    && LABEL_REFS (basic_block_head[i]) == basic_block_head[i])\n \t  abort ();\n \n-      /* Now delete the code for any basic blocks that can't be reached.\n-\t They can occur because jump_optimize does not recognize\n-\n-\n       /* Now delete the code for any basic blocks that can't be reached.\n \t They can occur because jump_optimize does not recognize\n \t unreachable loops as unreachable.  */"}, {"sha": "19a1c20bd81995854f6f7ba824f28258e843f317", "filename": "gcc/function.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=081f5e7e66fa8116bb1aeff9a154fbc788ca81f6", "patch": "@@ -427,7 +427,9 @@ static rtx round_trampoline_addr PROTO((rtx));\n static tree blocks_nreverse\tPROTO((tree));\n static int all_blocks\t\tPROTO((tree, tree *));\n static int *record_insns\tPROTO((rtx));\n+#if defined (HAVE_prologue) || defined (HAVE_epilogue)\n static int contains\t\tPROTO((rtx, int *));\n+#endif /* HAVE_prologue || HAVE_epilogue */\n static void put_addressof_into_stack PROTO((rtx));\n static void purge_addressof_1\tPROTO((rtx *, rtx, int));\n \f\n@@ -2057,7 +2059,6 @@ fixup_var_refs_1 (var, promoted_mode, loc, insn, replacements)\n \t\tenum machine_mode wanted_mode\n \t\t  = insn_operand_mode[(int) CODE_FOR_insv][0];\n \t\tenum machine_mode is_mode = GET_MODE (tem);\n-\t\tint width = INTVAL (XEXP (outerdest, 1));\n \t\tint pos = INTVAL (XEXP (outerdest, 2));\n \n \t\t/* If we have a narrower mode, we can do something.  */\n@@ -5873,6 +5874,7 @@ record_insns (insns)\n \n /* Determine how many INSN_UIDs in VEC are part of INSN.  */\n \n+#if defined (HAVE_prologue) || defined (HAVE_epilogue)\n static int\n contains (insn, vec)\n      rtx insn;\n@@ -5898,6 +5900,7 @@ contains (insn, vec)\n     }\n   return 0;\n }\n+#endif /* HAVE_prologue || HAVE_epilogue */\n \n /* Generate the prologue and epilogue RTL if the machine supports it.  Thread\n    this into place with notes indicating where the prologue ends and where"}, {"sha": "b922ce8cffe822cd374e7bc83ae60f10e19059bd", "filename": "gcc/gen-protos.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Fgen-protos.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Fgen-protos.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgen-protos.c?ref=081f5e7e66fa8116bb1aeff9a154fbc788ca81f6", "patch": "@@ -1,5 +1,5 @@\n /* gen-protos.c - massages a list of prototypes, for use by fixproto.\n-   Copyright (C) 1993, 1994, 1995, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 94-96, 1998 Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -147,7 +147,6 @@ main (argc, argv)\n   FILE *outf = stdout;\n   int i;\n   sstring linebuf;\n-  char **optr;\n   struct fn_decl fn_decl;\n \n   i = strlen (argv[0]);"}, {"sha": "3863e20ac6f1a13549561a1b55bdd3b68a730ca7", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=081f5e7e66fa8116bb1aeff9a154fbc788ca81f6", "patch": "@@ -1198,7 +1198,7 @@ debug_control_flow ()\n static int\n build_control_flow ()\n {\n-  int i, j;\n+  int i;\n   int_list_ptr *s_preds;\n   int_list_ptr *s_succs;\n   int_list_ptr succ;"}, {"sha": "6ccc1187f0ac307875906bb918b6f7de6edf3d29", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=081f5e7e66fa8116bb1aeff9a154fbc788ca81f6", "patch": "@@ -392,7 +392,9 @@ __udiv_w_sdiv (USItype *rp, USItype a1, USItype a0, USItype d)\n /* If sdiv_qrnnd doesn't exist, define dummy __udiv_w_sdiv.  */\n USItype\n __udiv_w_sdiv (USItype *rp, USItype a1, USItype a0, USItype d)\n-{}\n+{\n+  return 0;\n+}\n #endif\n #endif\n \f\n@@ -3291,7 +3293,6 @@ __sjpopnthrow ()\n {\n   struct eh_context *eh = (*get_eh_context) ();\n   void ***dhc = &eh->dynamic_handler_chain;\n-  void *jmpbuf;\n   void (*func)(void *, int);\n   void *arg;\n   void ***cleanup;\n@@ -3598,7 +3599,6 @@ __throw ()\n   else\n     {\n       int i;\n-      void *val;\n \n       /* Unwind all the frames between this one and the handler by copying\n \t their saved register values into our register save slots.  */"}, {"sha": "98f3e33d0d2144663d90aa153cce5ad6c4c3fdff", "filename": "gcc/protoize.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=081f5e7e66fa8116bb1aeff9a154fbc788ca81f6", "patch": "@@ -167,10 +167,12 @@ typedef char * const_pointer_type;\n \n #else /* !defined(POSIX) */\n \n+#ifndef F_OK\n #define R_OK    4       /* Test for Read permission */\n #define W_OK    2       /* Test for Write permission */\n #define X_OK    1       /* Test for eXecute permission */\n #define F_OK    0       /* Test for existence of File */\n+#endif\n \n #ifndef O_RDONLY\n #define O_RDONLY        0"}, {"sha": "4246eeada2b4fc09252ce9e5cc79e44f76b7c3b7", "filename": "gcc/scan-decls.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Fscan-decls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081f5e7e66fa8116bb1aeff9a154fbc788ca81f6/gcc%2Fscan-decls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fscan-decls.c?ref=081f5e7e66fa8116bb1aeff9a154fbc788ca81f6", "patch": "@@ -1,5 +1,5 @@\n /* scan-decls.c - Extracts declarations from cpp output.\n-   Copyright (C) 1993, 1995, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1995, 1997, 1998 Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -82,7 +82,6 @@ scan_decls (pfile, argc, argv)\n {\n   int saw_extern, saw_inline;\n   int start_written;\n-  int old_written;\n   /* If declarator_start is non-zero, it marks the start of the current\n      declarator.  If it is zero, we are either still parsing the\n      decl-specs, or prev_id_start marks the start of the declarator.  */"}]}