{"sha": "e19c6389966216af5925d2917a206cedc40540e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE5YzYzODk5NjYyMTZhZjU5MjVkMjkxN2EyMDZjZWRjNDA1NDBlOA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-04-19T11:51:02Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-04-19T17:27:41Z"}, "message": "libphobos: Merge upstream druntime 89f870b7, phobos e6907ff3e\n\nPhobos changes:\n\n - Synchronize C bindings with the latest port fixes in upstream\n   druntime.\n\n - Add Config.stderrPassThrough to std.process (PR98494).\n\nReviewed-on: https://github.com/dlang/druntime/pull/3448\n\t     https://github.com/dlang/phobos/pull/7984\n\nlibphobos/ChangeLog:\n\n\tPR d/98494\n\t* libdruntime/MERGE: Merge upstream druntime 89f870b7.\n\t* src/MERGE: Merge upstream phobos e6907ff3e.", "tree": {"sha": "4b26ca122518e979bddb2ba0db66a46d5718379a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b26ca122518e979bddb2ba0db66a46d5718379a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e19c6389966216af5925d2917a206cedc40540e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e19c6389966216af5925d2917a206cedc40540e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e19c6389966216af5925d2917a206cedc40540e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e19c6389966216af5925d2917a206cedc40540e8/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eae7549b8a350b92435be904efed195bd190bae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eae7549b8a350b92435be904efed195bd190bae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eae7549b8a350b92435be904efed195bd190bae"}], "stats": {"total": 729, "additions": 520, "deletions": 209}, "files": [{"sha": "25cbb955ba28691fbe2e6eafb01d362273727ab3", "filename": "libphobos/libdruntime/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMERGE?ref=e19c6389966216af5925d2917a206cedc40540e8", "patch": "@@ -1,4 +1,4 @@\n-1134b71039881464e9bf021836d82796b3a1fcfc\n+89f870b76710a4cfa96f711bb5b14a7439c5c2a7\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/druntime repository."}, {"sha": "44bb7077b59540e047dcd8673e6a36b13692abf9", "filename": "libphobos/libdruntime/core/stdc/config.d", "status": "modified", "additions": 15, "deletions": 24, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fconfig.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fconfig.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fconfig.d?ref=e19c6389966216af5925d2917a206cedc40540e8", "patch": "@@ -186,7 +186,18 @@ else version (Posix)\n   }\n }\n \n-version (CRuntime_Microsoft)\n+version (GNU)\n+    alias c_long_double = real;\n+else version (LDC)\n+    alias c_long_double = real; // 64-bit real for MSVC targets\n+else version (SDC)\n+{\n+    version (X86)\n+        alias c_long_double = real;\n+    else version (X86_64)\n+        alias c_long_double = real;\n+}\n+else version (CRuntime_Microsoft)\n {\n     /* long double is 64 bits, not 80 bits, but is mangled differently\n      * than double. To distinguish double from long double, create a wrapper to represent\n@@ -222,17 +233,6 @@ else version (DigitalMars)\n             alias real c_long_double;\n     }\n }\n-else version (GNU)\n-    alias real c_long_double;\n-else version (LDC)\n-    alias real c_long_double;\n-else version (SDC)\n-{\n-    version (X86)\n-        alias real c_long_double;\n-    else version (X86_64)\n-        alias real c_long_double;\n-}\n \n static assert(is(c_long_double), \"c_long_double needs to be declared for this platform/architecture.\");\n \n@@ -257,18 +257,9 @@ private struct _Complex(T)\n     T im;\n }\n \n-version (Posix)\n-{\n-    align(float.alignof)  enum __c_complex_float : _Complex!float;\n-    align(double.alignof) enum __c_complex_double : _Complex!double;\n-    align(real.alignof)   enum __c_complex_real : _Complex!real;\n-}\n-else\n-{\n-    align(float.sizeof * 2)  enum __c_complex_float : _Complex!float;\n-    align(double.sizeof * 2) enum __c_complex_double : _Complex!double;\n-    align(real.alignof)      enum __c_complex_real : _Complex!real;\n-}\n+enum __c_complex_float  : _Complex!float;\n+enum __c_complex_double : _Complex!double;\n+enum __c_complex_real   : _Complex!c_long_double;\n \n alias c_complex_float = __c_complex_float;\n alias c_complex_double = __c_complex_double;"}, {"sha": "2de6e57957575e46f18072a692800fd627d52349", "filename": "libphobos/libdruntime/core/stdc/math.d", "status": "modified", "additions": 149, "deletions": 146, "changes": 295, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fmath.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fmath.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fmath.d?ref=e19c6389966216af5925d2917a206cedc40540e8", "patch": "@@ -424,92 +424,177 @@ else version (CRuntime_Microsoft) // fully supported since MSVCRT 12 (VS 2013) o\n     pure int _fpclass(double x);\n   }\n \n+  version (MinGW)\n+  {\n     enum\n     {\n         ///\n-        FP_SUBNORMAL = -2,\n+        FP_NAN = 0x0100,\n         ///\n-        FP_NORMAL    = -1,\n+        FP_NORMAL = 0x0400,\n         ///\n-        FP_ZERO      =  0,\n+        FP_INFINITE = FP_NAN | FP_NORMAL,\n         ///\n-        FP_INFINITE  =  1,\n+        FP_ZERO = 0x0400,\n         ///\n-        FP_NAN       =  2,\n+        FP_SUBNORMAL = FP_NORMAL | FP_ZERO\n     }\n \n-  extern(D)\n-  {\n-    //int fpclassify(real-floating x);\n-    ///\n-    extern(C) pragma(mangle, \"_fdclass\") pure int fpclassify(float x);\n-    ///\n-    extern(C) pragma(mangle, \"_dclass\")  pure int fpclassify(double x);\n-    ///\n-    pure int fpclassify()(real x)\n-    {\n-        static if (real.sizeof == double.sizeof)\n-            return fpclassify(cast(double) x);\n-        else\n-            static assert(false, \"fpclassify(real) not supported by MS C runtime\");\n-    }\n+    pure int __fpclassifyf(float x);\n+    pure int __fpclassify(double x);\n+    pure int __fpclassifyl(real x);\n \n-    //int isfinite(real-floating x);\n-    ///\n-    pure int isfinite()(float x)     { return fpclassify(x) <= 0; }\n-    ///\n-    pure int isfinite()(double x)    { return fpclassify(x) <= 0; }\n-    ///\n-    pure int isfinite()(real x)      { return fpclassify(x) <= 0; }\n+    pure int __isnanf(float x);\n+    pure int __isnan(double x);\n+    pure int __isnanl(real x);\n \n-    //int isinf(real-floating x);\n-    ///\n-    pure int isinf()(float x)        { return fpclassify(x) == FP_INFINITE; }\n-    ///\n-    pure int isinf()(double x)       { return fpclassify(x) == FP_INFINITE; }\n-    ///\n-    pure int isinf()(real x)         { return fpclassify(x) == FP_INFINITE; }\n+    pure int __signbitf(float x);\n+    pure int __signbit(double x);\n+    pure int __signbitl(real x);\n \n-    //int isnan(real-floating x);\n-    version (none) // requires MSVCRT 12+ (VS 2013)\n+    extern (D)\n     {\n+        //int fpclassify(real-floating x);\n+        ///\n+        extern(C) pragma(mangle, \"__fpclassifyf\") pure int fpclassify(float x);\n+        ///\n+        extern(C) pragma(mangle, \"__fpclassify\")  pure int fpclassify(double x);\n+        ///\n+        extern(C) pragma(mangle, real.sizeof == double.sizeof ? \"__fpclassify\" : \"__fpclassifyl\")\n+            pure int fpclassify(real x);\n+\n+        //int isfinite(real-floating x);\n+        ///\n+        pure int isfinite(float x)       { return (fpclassify(x) & FP_NORMAL) == 0; }\n         ///\n-        pure int isnan(float x)      { return fpclassify(x) == FP_NAN; }\n+        pure int isfinite(double x)      { return (fpclassify(x) & FP_NORMAL) == 0; }\n         ///\n-        pure int isnan(double x)     { return fpclassify(x) == FP_NAN; }\n+        pure int isfinite(real x)        { return (fpclassify(x) & FP_NORMAL) == 0; }\n+\n+        //int isinf(real-floating x);\n+        ///\n+        pure int isinf(float x)          { return fpclassify(x) == FP_INFINITE; }\n+        ///\n+        pure int isinf(double x)         { return fpclassify(x) == FP_INFINITE; }\n+        ///\n+        pure int isinf(real x)           { return fpclassify(x) == FP_INFINITE; }\n+\n+        //int isnan(real-floating x);\n         ///\n-        pure int isnan(real x)       { return fpclassify(x) == FP_NAN; }\n+        extern(C) pragma(mangle, \"__isnanf\") pure int isnan(float x);\n+        ///\n+        extern(C) pragma(mangle, \"__isnan\")  pure int isnan(double x);\n+        ///\n+        extern(C) pragma(mangle, real.sizeof == double.sizeof ? \"__isnan\" : \"__isnanl\")\n+            pure int isnan(real x);\n+\n+        //int isnormal(real-floating x);\n+        ///\n+        int isnormal(float x)       { return fpclassify(x) == FP_NORMAL; }\n+        ///\n+        int isnormal(double x)      { return fpclassify(x) == FP_NORMAL; }\n+        ///\n+        int isnormal(real x)        { return fpclassify(x) == FP_NORMAL; }\n+\n+        //int signbit(real-floating x);\n+        ///\n+        extern(C) pragma(mangle, \"__signbitf\") pure int signbit(float x);\n+        ///\n+        extern(C) pragma(mangle, \"__signbit\")  pure int signbit(double x);\n+        ///\n+        extern(C) pragma(mangle, real.sizeof == double.sizeof ? \"__signbit\" : \"__signbitl\")\n+            int signbit(real x);\n     }\n-    else // for backward compatibility with older runtimes\n+  }\n+  else\n+  {\n+    enum\n     {\n         ///\n-        pure int isnan(float x)      { version (Win64) return _isnanf(x); else return _isnan(cast(double) x); }\n+        FP_SUBNORMAL = -2,\n+        ///\n+        FP_NORMAL    = -1,\n         ///\n-        extern(C) pragma(mangle, \"_isnan\") pure int isnan(double x);\n+        FP_ZERO      =  0,\n         ///\n-        pure int isnan(real x)       { return _isnan(cast(double) x); }\n+        FP_INFINITE  =  1,\n+        ///\n+        FP_NAN       =  2,\n     }\n \n-    //int isnormal(real-floating x);\n-    ///\n-    pure int isnormal()(float x)     { return fpclassify(x) == FP_NORMAL; }\n-    ///\n-    pure int isnormal()(double x)    { return fpclassify(x) == FP_NORMAL; }\n-    ///\n-    pure int isnormal()(real x)      { return fpclassify(x) == FP_NORMAL; }\n-\n-    //int signbit(real-floating x);\n-    ///\n-    extern(C) pragma(mangle, \"_fdsign\") pure int signbit(float x);\n-    ///\n-    extern(C) pragma(mangle, \"_dsign\")  pure int signbit(double x);\n-    ///\n-    pure int signbit()(real x)\n+    extern(D)\n     {\n-        static if (real.sizeof == double.sizeof)\n-            return signbit(cast(double) x);\n-        else\n-            return (cast(short*)&(x))[4] & 0x8000;\n+        //int fpclassify(real-floating x);\n+        ///\n+        extern(C) pragma(mangle, \"_fdclass\") pure int fpclassify(float x);\n+        ///\n+        extern(C) pragma(mangle, \"_dclass\")  pure int fpclassify(double x);\n+        ///\n+        pure int fpclassify()(real x)\n+        {\n+            static if (real.sizeof == double.sizeof)\n+                return fpclassify(cast(double) x);\n+            else\n+                static assert(false, \"fpclassify(real) not supported by MS C runtime\");\n+        }\n+\n+        //int isfinite(real-floating x);\n+        ///\n+        pure int isfinite()(float x)     { return fpclassify(x) <= 0; }\n+        ///\n+        pure int isfinite()(double x)    { return fpclassify(x) <= 0; }\n+        ///\n+        pure int isfinite()(real x)      { return fpclassify(x) <= 0; }\n+\n+        //int isinf(real-floating x);\n+        ///\n+        pure int isinf()(float x)        { return fpclassify(x) == FP_INFINITE; }\n+        ///\n+        pure int isinf()(double x)       { return fpclassify(x) == FP_INFINITE; }\n+        ///\n+        pure int isinf()(real x)         { return fpclassify(x) == FP_INFINITE; }\n+\n+        //int isnan(real-floating x);\n+        version (none) // requires MSVCRT 12+ (VS 2013)\n+        {\n+            ///\n+            pure int isnan(float x)      { return fpclassify(x) == FP_NAN; }\n+            ///\n+            pure int isnan(double x)     { return fpclassify(x) == FP_NAN; }\n+            ///\n+            pure int isnan(real x)       { return fpclassify(x) == FP_NAN; }\n+        }\n+        else // for backward compatibility with older runtimes\n+        {\n+            ///\n+            pure int isnan(float x)      { version (Win64) return _isnanf(x); else return _isnan(cast(double) x); }\n+            ///\n+            extern(C) pragma(mangle, \"_isnan\") pure int isnan(double x);\n+            ///\n+            pure int isnan(real x)       { return _isnan(cast(double) x); }\n+        }\n+\n+        //int isnormal(real-floating x);\n+        ///\n+        pure int isnormal()(float x)     { return fpclassify(x) == FP_NORMAL; }\n+        ///\n+        pure int isnormal()(double x)    { return fpclassify(x) == FP_NORMAL; }\n+        ///\n+        pure int isnormal()(real x)      { return fpclassify(x) == FP_NORMAL; }\n+\n+        //int signbit(real-floating x);\n+        ///\n+        extern(C) pragma(mangle, \"_fdsign\") pure int signbit(float x);\n+        ///\n+        extern(C) pragma(mangle, \"_dsign\")  pure int signbit(double x);\n+        ///\n+        pure int signbit()(real x)\n+        {\n+            static if (real.sizeof == double.sizeof)\n+                return signbit(cast(double) x);\n+            else\n+                return (cast(short*)&(x))[4] & 0x8000;\n+        }\n     }\n   }\n }\n@@ -835,88 +920,6 @@ else version (CRuntime_UClibc)\n     int signbit(real x);\n   }\n }\n-else version (MinGW)\n-{\n-    enum\n-    {\n-        ///\n-        FP_NAN = 0x0100,\n-        ///\n-        FP_NORMAL = 0x0400,\n-        ///\n-        FP_INFINITE = FP_NAN | FP_NORMAL,\n-        ///\n-        FP_ZERO = 0x0400,\n-        ///\n-        FP_SUBNORMAL = FP_NORMAL | FP_ZERO\n-    }\n-\n-    pure int __fpclassifyf(float x);\n-    pure int __fpclassify(double x);\n-    pure int __fpclassifyl(real x);\n-\n-    pure int __isnanf(float x);\n-    pure int __isnan(double x);\n-    pure int __isnanl(real x);\n-\n-    pure int __signbitf(float x);\n-    pure int __signbit(double x);\n-    pure int __signbitl(real x);\n-\n-  extern (D)\n-  {\n-    //int fpclassify(real-floating x);\n-      ///\n-    extern(C) pragma(mangle, \"__fpclassifyf\") pure int fpclassify(float x);\n-    ///\n-    extern(C) pragma(mangle, \"__fpclassify\")  pure int fpclassify(double x);\n-    ///\n-    extern(C) pragma(mangle, real.sizeof == double.sizeof ? \"__fpclassify\" : \"__fpclassifyl\")\n-    pure int fpclassify(real x);\n-\n-    //int isfinite(real-floating x);\n-    ///\n-    pure int isfinite(float x)       { return (fpclassify(x) & FP_NORMAL) == 0; }\n-    ///\n-    pure int isfinite(double x)      { return (fpclassify(x) & FP_NORMAL) == 0; }\n-    ///\n-    pure int isfinite(real x)        { return (fpclassify(x) & FP_NORMAL) == 0; }\n-\n-    //int isinf(real-floating x);\n-    ///\n-    pure int isinf(float x)          { return fpclassify(x) == FP_INFINITE; }\n-    ///\n-    pure int isinf(double x)         { return fpclassify(x) == FP_INFINITE; }\n-    ///\n-    pure int isinf(real x)           { return fpclassify(x) == FP_INFINITE; }\n-\n-    //int isnan(real-floating x);\n-    ///\n-    extern(C) pragma(mangle, \"__isnanf\") pure int isnan(float x);\n-    ///\n-    extern(C) pragma(mangle, \"__isnan\")  pure int isnan(double x);\n-    ///\n-    extern(C) pragma(mangle, real.sizeof == double.sizeof ? \"__isnan\" : \"__isnanl\")\n-    pure int isnan(real x);\n-\n-    //int isnormal(real-floating x);\n-    ///\n-    int isnormal(float x)       { return fpclassify(x) == FP_NORMAL; }\n-    ///\n-    int isnormal(double x)      { return fpclassify(x) == FP_NORMAL; }\n-    ///\n-    int isnormal(real x)        { return fpclassify(x) == FP_NORMAL; }\n-\n-    //int signbit(real-floating x);\n-    ///\n-    extern(C) pragma(mangle, \"__signbitf\") pure int signbit(float x);\n-    ///\n-    extern(C) pragma(mangle, \"__signbit\")  pure int signbit(double x);\n-    ///\n-    extern(C) pragma(mangle, real.sizeof == double.sizeof ? \"__signbit\" : \"__signbitl\")\n-    int signbit(real x);\n-  }\n-}\n else version (Darwin)\n {\n     enum\n@@ -1166,7 +1169,7 @@ else version (OpenBSD)\n         FP_FAST_FMAL = 1,\n     }\n \n-    pure int __fpclassifyd(double);\n+    pure int __fpclassify(double);\n     pure int __fpclassifyf(float);\n     pure int __fpclassifyl(real);\n     pure int __isfinitef(float);\n@@ -1188,7 +1191,7 @@ else version (OpenBSD)\n       ///\n     extern(C) pragma(mangle, \"__fpclassifyf\") pure int fpclassify(float x);\n     ///\n-    extern(C) pragma(mangle, \"__fpclassifyd\") pure int fpclassify(double x);\n+    extern(C) pragma(mangle, \"__fpclassify\") pure int fpclassify(double x);\n     ///\n     extern(C) pragma(mangle, \"__fpclassifyl\") pure int fpclassify(real x);\n "}, {"sha": "c76b922a3eb918362504a0bed4cce401d86d8000", "filename": "libphobos/libdruntime/core/stdc/stdio.d", "status": "modified", "additions": 75, "deletions": 7, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdio.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdio.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdio.d?ref=e19c6389966216af5925d2917a206cedc40540e8", "patch": "@@ -1347,7 +1347,7 @@ version (CRuntime_DigitalMars)\n     ///\n     pure int  fileno()(FILE* stream)   { return stream._file; }\n   }\n-  ///\n+    ///\n     pragma(printf)\n     int   _snprintf(scope char* s, size_t n, scope const char* fmt, scope const ...);\n     ///\n@@ -1358,6 +1358,26 @@ version (CRuntime_DigitalMars)\n     int   _vsnprintf(scope char* s, size_t n, scope const char* format, va_list arg);\n     ///\n     alias _vsnprintf vsnprintf;\n+\n+    //\n+    // Digital Mars under-the-hood C I/O functions. Uses _iobuf* for the\n+    // unshared version of FILE*, usable when the FILE is locked.\n+    //\n+\n+    ///\n+    int _fputc_nlock(int c, _iobuf* fp);\n+    ///\n+    int _fputwc_nlock(int c, _iobuf* fp);\n+    ///\n+    int _fgetc_nlock(_iobuf* fp);\n+    ///\n+    int _fgetwc_nlock(_iobuf* fp);\n+    ///\n+    int __fp_lock(FILE* fp);\n+    ///\n+    void __fp_unlock(FILE* fp);\n+    ///\n+    int setmode(int fd, int mode);\n }\n else version (CRuntime_Microsoft)\n {\n@@ -1410,16 +1430,31 @@ else version (CRuntime_Microsoft)\n     int  vsnprintf(scope char* s, size_t n, scope const char* format, va_list arg);\n   }\n \n+    //\n+    // Microsoft under-the-hood C I/O functions. Uses _iobuf* for the unshared\n+    // version of FILE*, usable when the FILE is locked.\n+    //\n+    import core.stdc.stddef : wchar_t;\n+    import core.stdc.wchar_ : wint_t;\n+\n     ///\n-    int _fputc_nolock(int c, FILE *fp);\n+    int _fputc_nolock(int c, _iobuf* fp);\n     ///\n-    int _fgetc_nolock(FILE *fp);\n-\n+    int _fgetc_nolock(_iobuf* fp);\n     ///\n-    int _lock_file(FILE *fp);\n+    wint_t _fputwc_nolock(wchar_t c, _iobuf* fp);\n     ///\n-    int _unlock_file(FILE *fp);\n-\n+    wint_t _fgetwc_nolock(_iobuf* fp);\n+    ///\n+    void _lock_file(FILE* fp);\n+    ///\n+    void _unlock_file(FILE* fp);\n+    ///\n+    int _setmode(int fd, int mode);\n+    ///\n+    int _fseeki64(FILE* stream, long offset, int origin);\n+    ///\n+    long _ftelli64(FILE* stream);\n     ///\n     intptr_t _get_osfhandle(int fd);\n     ///\n@@ -1448,6 +1483,23 @@ else version (CRuntime_Glibc)\n     ///\n     pragma(printf)\n     int  vsnprintf(scope char* s, size_t n, scope const char* format, va_list arg);\n+\n+    //\n+    // Gnu under-the-hood C I/O functions. Uses _iobuf* for the unshared\n+    // version of FILE*, usable when the FILE is locked.\n+    // See http://gnu.org/software/libc/manual/html_node/I_002fO-on-Streams.html\n+    //\n+    import core.stdc.wchar_ : wint_t;\n+    import core.stdc.stddef : wchar_t;\n+\n+    ///\n+    int fputc_unlocked(int c, _iobuf* stream);\n+    ///\n+    int fgetc_unlocked(_iobuf* stream);\n+    ///\n+    wint_t fputwc_unlocked(wchar_t wc, _iobuf* stream);\n+    ///\n+    wint_t fgetwc_unlocked(_iobuf* stream);\n }\n else version (Darwin)\n {\n@@ -1907,6 +1959,22 @@ version (Windows)\n         O_TEXT = _O_TEXT, ///\n         _O_BINARY = 0x8000, ///\n         O_BINARY = _O_BINARY, ///\n+        _O_WTEXT = 0x10000, ///\n+        _O_U16TEXT = 0x20000, ///\n+        _O_U8TEXT = 0x40000, ///\n+        _O_ACCMODE = (_O_RDONLY|_O_WRONLY|_O_RDWR), ///\n+        O_ACCMODE = _O_ACCMODE, ///\n+        _O_RAW = _O_BINARY, ///\n+        O_RAW = _O_BINARY, ///\n+        _O_NOINHERIT = 0x0080, ///\n+        O_NOINHERIT = _O_NOINHERIT, ///\n+        _O_TEMPORARY = 0x0040, ///\n+        O_TEMPORARY = _O_TEMPORARY, ///\n+        _O_SHORT_LIVED = 0x1000, ///\n+        _O_SEQUENTIAL = 0x0020, ///\n+        O_SEQUENTIAL = _O_SEQUENTIAL, ///\n+        _O_RANDOM = 0x0010, ///\n+        O_RANDOM = _O_RANDOM, ///\n     }\n \n     enum"}, {"sha": "35e81a254142968e30b3ecc40265593f13eaa09d", "filename": "libphobos/libdruntime/core/stdc/stdlib.d", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdlib.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdlib.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdlib.d?ref=e19c6389966216af5925d2917a206cedc40540e8", "patch": "@@ -121,19 +121,22 @@ ulong   strtoull(scope inout(char)* nptr, scope inout(char)** endptr, int base);\n \n version (CRuntime_Microsoft)\n {\n-    // strtold exists starting from VS2013, so we give it D linkage to avoid link errors\n-    ///\n-    extern (D) real strtold(scope inout(char)* nptr, inout(char)** endptr)\n-    {   // Fake it 'till we make it\n-        return strtod(nptr, endptr);\n+    version (MinGW)\n+    {\n+        ///\n+        real __mingw_strtold(scope inout(char)* nptr, scope inout(char)** endptr);\n+        ///\n+        alias __mingw_strtold strtold;\n+    }\n+    else\n+    {\n+        // strtold exists starting from VS2013, so we give it D linkage to avoid link errors\n+        ///\n+        extern (D) real strtold(scope inout(char)* nptr, inout(char)** endptr)\n+        {   // Fake it 'till we make it\n+            return strtod(nptr, endptr);\n+        }\n     }\n-}\n-else version (MinGW)\n-{\n-    ///\n-    real __mingw_strtold(scope inout(char)* nptr, scope inout(char)** endptr);\n-    ///\n-    alias __mingw_strtold strtold;\n }\n else\n {"}, {"sha": "2d1a198543fa0f6a66e2cdb8000ebb4e429c2488", "filename": "libphobos/libdruntime/core/stdc/tgmath.d", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ftgmath.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ftgmath.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ftgmath.d?ref=e19c6389966216af5925d2917a206cedc40540e8", "patch": "@@ -1285,6 +1285,13 @@ else\n     alias core.stdc.math.fabs          fabs;\n     version (CRuntime_Microsoft)\n     {\n+        version (MinGW)\n+        {\n+            ///\n+            alias core.stdc.math.fabsf     fabs;\n+            ///\n+            alias core.stdc.math.fabsl     fabs;\n+        }\n     }\n     else\n     {"}, {"sha": "d455d1b83038a8a7bd726f847bcb1298ddd60074", "filename": "libphobos/libdruntime/core/sys/darwin/mach/thread_act.d", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fmach%2Fthread_act.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fmach%2Fthread_act.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fmach%2Fthread_act.d?ref=e19c6389966216af5925d2917a206cedc40540e8", "patch": "@@ -38,6 +38,10 @@ version (AArch64)\n     version = AnyARM;\n version (ARM)\n     version = AnyARM;\n+version (PPC)\n+    version = AnyPPC;\n+version (PPC64)\n+    version = AnyPPC;\n \n version (i386)\n {\n@@ -235,3 +239,65 @@ else version (AnyARM)\n     kern_return_t thread_resume(thread_act_t);\n     kern_return_t thread_get_state(thread_act_t, thread_state_flavor_t, thread_state_t*, mach_msg_type_number_t*);\n }\n+else version (AnyPPC)\n+{\n+    alias thread_act_t = mach_port_t;\n+    alias thread_state_t = void;\n+    alias thread_state_flavor_t = int;\n+    alias mach_msg_type_number_t = natural_t;\n+\n+    enum\n+    {\n+        PPC_THREAD_STATE = 1,\n+        PPC_FLOAT_STATE = 2,\n+        PPC_EXCEPTION_STATE = 3,\n+        PPC_VECTOR_STATE = 4,\n+        PPC_THREAD_STATE64 = 5,\n+        PPC_EXCEPTION_STATE64 = 6,\n+        THREAD_STATE_NONE = 7\n+    }\n+\n+    struct ppc_thread_state_t\n+    {\n+        uint srr0;   /// Instruction address register (PC)\n+        uint srr1;   /// Machine state register (supervisor)\n+        uint[32] r;  /// General purpose register r0-r31\n+        uint cr;     /// Condition register\n+        uint xer;    /// User's integer exception register\n+        uint lr;     /// Link register\n+        uint ctr;    /// Count register\n+        uint mq;     /// MQ register (601 only)\n+        uint vrsave; /// Vector save register\n+    }\n+\n+    alias ppc_thread_state32_t = ppc_thread_state_t;\n+\n+    struct ppc_thread_state64_t\n+    {\n+        ulong srr0;   /// Instruction address register (PC)\n+        ulong srr1;   /// Machine state register (supervisor)\n+        ulong[32] r;  /// General purpose register r0-r31\n+        uint cr;      /// Condition register\n+        uint pad0;\n+        ulong xer;    /// User's integer exception register\n+        ulong lr;     /// Link register\n+        ulong ctr;    /// Count register\n+        uint vrsave;  /// Vector save register\n+        uint pad1;\n+    }\n+\n+    enum : mach_msg_type_number_t\n+    {\n+        PPC_THREAD_STATE_COUNT = cast(mach_msg_type_number_t) (ppc_thread_state_t.sizeof / uint.sizeof),\n+        PPC_THREAD_STATE32_COUNT = cast(mach_msg_type_number_t) (ppc_thread_state32_t.sizeof / uint.sizeof),\n+        PPC_THREAD_STATE64_COUNT = cast(mach_msg_type_number_t) (ppc_thread_state64_t.sizeof / uint.sizeof),\n+    }\n+\n+    alias MACHINE_THREAD_STATE = PPC_THREAD_STATE;\n+    alias MACHINE_THREAD_STATE_COUNT = PPC_THREAD_STATE_COUNT;\n+\n+    mach_port_t   mach_thread_self();\n+    kern_return_t thread_suspend(thread_act_t);\n+    kern_return_t thread_resume(thread_act_t);\n+    kern_return_t thread_get_state(thread_act_t, thread_state_flavor_t, thread_state_t*, mach_msg_type_number_t*);\n+}"}, {"sha": "55fc79268e23b5f1cc9bbe6e70eb6aba9fc90b8c", "filename": "libphobos/libdruntime/core/sys/openbsd/sys/link_elf.d", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Flink_elf.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Flink_elf.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Flink_elf.d?ref=e19c6389966216af5925d2917a206cedc40540e8", "patch": "@@ -63,3 +63,8 @@ private alias int function(dl_phdr_info*, size_t, void *) @nogc dl_iterate_phdr_\n \n int dl_iterate_phdr(dl_iterate_phdr_cb __callback, void*__data);\n int dl_iterate_phdr(dl_iterate_phdr_cb_ngc __callback, void*__data) @nogc;\n+\n+int _rtld_addr_phdr(const void*, dl_phdr_info*) @nogc\n+{\n+    return 0;\n+}"}, {"sha": "41b52da7c64fea5c90564cedf278191517fc766c", "filename": "libphobos/libdruntime/core/sys/posix/stdio.d", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstdio.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstdio.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstdio.d?ref=e19c6389966216af5925d2917a206cedc40540e8", "patch": "@@ -516,6 +516,46 @@ version (CRuntime_Glibc)\n     int    putc_unlocked(int, FILE*);\n     int    putchar_unlocked(int);\n }\n+else version (CRuntime_Musl)\n+{\n+    void   flockfile(FILE*);\n+    int    ftrylockfile(FILE*);\n+    void   funlockfile(FILE*);\n+    int    getc_unlocked(FILE*);\n+    int    getchar_unlocked();\n+    int    putc_unlocked(int, FILE*);\n+    int    putchar_unlocked(int);\n+}\n+else version (Darwin)\n+{\n+    void   flockfile(FILE*);\n+    int    ftrylockfile(FILE*);\n+    void   funlockfile(FILE*);\n+    int    getc_unlocked(FILE*);\n+    int    getchar_unlocked();\n+    int    putc_unlocked(int, FILE*);\n+    int    putchar_unlocked(int);\n+}\n+else version (FreeBSD)\n+{\n+    void   flockfile(FILE*);\n+    int    ftrylockfile(FILE*);\n+    void   funlockfile(FILE*);\n+    int    getc_unlocked(FILE*);\n+    int    getchar_unlocked();\n+    int    putc_unlocked(int, FILE*);\n+    int    putchar_unlocked(int);\n+}\n+else version (NetBSD)\n+{\n+    void   flockfile(FILE*);\n+    int    ftrylockfile(FILE*);\n+    void   funlockfile(FILE*);\n+    int    getc_unlocked(FILE*);\n+    int    getchar_unlocked();\n+    int    putc_unlocked(int, FILE*);\n+    int    putchar_unlocked(int);\n+}\n else version (OpenBSD)\n {\n     void   flockfile(FILE*);\n@@ -526,6 +566,16 @@ else version (OpenBSD)\n     int    putc_unlocked(int, FILE*);\n     int    putchar_unlocked(int);\n }\n+else version (DragonFlyBSD)\n+{\n+    void   flockfile(FILE*);\n+    int    ftrylockfile(FILE*);\n+    void   funlockfile(FILE*);\n+    int    getc_unlocked(FILE*);\n+    int    getchar_unlocked();\n+    int    putc_unlocked(int, FILE*);\n+    int    putchar_unlocked(int);\n+}\n else version (Solaris)\n {\n     void   flockfile(FILE*);"}, {"sha": "6935dd94f958706454333ba0a5ac40f7ce8123d0", "filename": "libphobos/libdruntime/core/sys/windows/com.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcom.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcom.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcom.d?ref=e19c6389966216af5925d2917a206cedc40540e8", "patch": "@@ -57,12 +57,12 @@ alias COINIT_SPEED_OVER_MEMORY   = COINIT.COINIT_SPEED_OVER_MEMORY;\n \n public import core.sys.windows.uuid;\n \n-extern (System)\n+extern (Windows)\n {\n \n class ComObject : IUnknown\n {\n-extern (System):\n+extern (Windows):\n     HRESULT QueryInterface(const(IID)* riid, void** ppv)\n     {\n         if (*riid == IID_IUnknown)"}, {"sha": "9848fb99115ba9e5ab1629199d84e10a61bd3a12", "filename": "libphobos/libdruntime/core/sys/windows/dbghelp.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdbghelp.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdbghelp.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdbghelp.d?ref=e19c6389966216af5925d2917a206cedc40540e8", "patch": "@@ -18,7 +18,7 @@ import core.sys.windows.windef;\n \n public import core.sys.windows.dbghelp_types;\n \n-extern(System)\n+extern(Windows)\n {\n     alias BOOL         function(HANDLE hProcess, DWORD64 lpBaseAddress, PVOID lpBuffer, DWORD nSize, LPDWORD lpNumberOfBytesRead) ReadProcessMemoryProc64;\n     alias PVOID        function(HANDLE hProcess, DWORD64 AddrBase) FunctionTableAccessProc64;"}, {"sha": "cc2422bcaa001cfe22768289c2b6108808068e5f", "filename": "libphobos/libdruntime/core/sys/windows/dll.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdll.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdll.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdll.d?ref=e19c6389966216af5925d2917a206cedc40540e8", "patch": "@@ -414,7 +414,7 @@ int dll_getRefCount( HINSTANCE hInstance ) nothrow @nogc\n     {\n         version (GNU_InlineAsm)\n         {\n-            asm pure nothrow @nogc { \"movq %%gs:0x60, %0;\" : \"=r\" peb; }\n+            asm pure nothrow @nogc { \"movq %%gs:0x60, %0;\" : \"=r\" (peb); }\n         }\n         else\n         {\n@@ -431,7 +431,7 @@ int dll_getRefCount( HINSTANCE hInstance ) nothrow @nogc\n     {\n         version (GNU_InlineAsm)\n         {\n-            asm pure nothrow @nogc { \"movl %%fs:0x30, %0;\" : \"=r\" peb; }\n+            asm pure nothrow @nogc { \"movl %%fs:0x30, %0;\" : \"=r\" (peb); }\n         }\n         else\n         {"}, {"sha": "34fda656c8c8a259a1e5c3160632084bac730f26", "filename": "libphobos/libdruntime/core/sys/windows/threadaux.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fthreadaux.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fthreadaux.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fthreadaux.d?ref=e19c6389966216af5925d2917a206cedc40540e8", "patch": "@@ -172,7 +172,7 @@ struct thread_aux\n             version (GNU_InlineAsm)\n             {\n                 void** teb;\n-                asm pure nothrow @nogc { \"movl %%fs:0x18, %0;\" : \"=r\" teb; }\n+                asm pure nothrow @nogc { \"movl %%fs:0x18, %0;\" : \"=r\" (teb); }\n                 return teb;\n             }\n             else\n@@ -190,7 +190,7 @@ struct thread_aux\n             version (GNU_InlineAsm)\n             {\n                 void** teb;\n-                asm pure nothrow @nogc { \"movq %%gs:0x30, %0;\" : \"=r\" teb; }\n+                asm pure nothrow @nogc { \"movq %%gs:0x30, %0;\" : \"=r\" (teb); }\n                 return teb;\n             }\n             else"}, {"sha": "f4c04ce73581d2ed3589d82eaf71076534f1159c", "filename": "libphobos/libdruntime/core/thread/fiber.d", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2Fcore%2Fthread%2Ffiber.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2Fcore%2Fthread%2Ffiber.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fthread%2Ffiber.d?ref=e19c6389966216af5925d2917a206cedc40540e8", "patch": "@@ -82,6 +82,8 @@ private\n \n             version (MinGW)\n                 version = GNU_AsmX86_Windows;\n+            else version (OSX)\n+                version = AsmX86_Posix;\n             else version (Posix)\n                 version = AsmX86_Posix;\n         }\n@@ -105,21 +107,35 @@ private\n \n             version (MinGW)\n                 version = GNU_AsmX86_64_Windows;\n+            else version (OSX)\n+                version = AsmX86_64_Posix;\n             else version (Posix)\n                 version = AsmX86_64_Posix;\n         }\n     }\n     else version (PPC)\n     {\n-        version (Posix)\n+        version (OSX)\n+        {\n+            version = AsmPPC_Darwin;\n+            version = AsmExternal;\n+            version = AlignFiberStackTo16Byte;\n+        }\n+        else version (Posix)\n         {\n             version = AsmPPC_Posix;\n             version = AsmExternal;\n         }\n     }\n     else version (PPC64)\n     {\n-        version (Posix)\n+        version (OSX)\n+        {\n+            version = AsmPPC_Darwin;\n+            version = AsmExternal;\n+            version = AlignFiberStackTo16Byte;\n+        }\n+        else version (Posix)\n         {\n             version = AlignFiberStackTo16Byte;\n         }\n@@ -1347,6 +1363,28 @@ private:\n \n             assert( (cast(size_t) pstack & 0x0f) == 0 );\n         }\n+        else version (AsmPPC_Darwin)\n+        {\n+            version (StackGrowsDown) {}\n+            else static assert(false, \"PowerPC Darwin only supports decrementing stacks\");\n+\n+            uint wsize = size_t.sizeof;\n+\n+            // linkage + regs + FPRs + VRs\n+            uint space = 8 * wsize + 20 * wsize + 18 * 8 + 12 * 16;\n+            (cast(ubyte*)pstack - space)[0 .. space] = 0;\n+\n+            pstack -= wsize * 6;\n+            *cast(size_t*)pstack = cast(size_t) &fiber_entryPoint; // LR\n+            pstack -= wsize * 22;\n+\n+            // On Darwin PPC64 pthread self is in R13 (which is reserved).\n+            // At present, it is not safe to migrate fibers between threads, but if that\n+            // changes, then updating the value of R13 will also need to be handled.\n+            version (PPC64)\n+              *cast(size_t*)(pstack + wsize) = cast(size_t) Thread.getThis().m_addr;\n+            assert( (cast(size_t) pstack & 0x0f) == 0 );\n+        }\n         else version (AsmMIPS_O32_Posix)\n         {\n             version (StackGrowsDown) {}"}, {"sha": "31764e696910a89644825e0b37aa58dd1634d580", "filename": "libphobos/libdruntime/core/thread/osthread.d", "status": "modified", "additions": 39, "deletions": 5, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fosthread.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fosthread.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fosthread.d?ref=e19c6389966216af5925d2917a206cedc40540e8", "patch": "@@ -349,7 +349,8 @@ class Thread : ThreadBase\n         }\n         else version (Posix)\n         {\n-            pthread_detach( m_addr );\n+            if (m_addr != m_addr.init)\n+                pthread_detach( m_addr );\n             m_addr = m_addr.init;\n         }\n         version (Darwin)\n@@ -420,6 +421,17 @@ class Thread : ThreadBase\n         {\n             uint[16]        m_reg; // r0-r15\n         }\n+        else version (PPC)\n+        {\n+            // Make the assumption that we only care about non-fp and non-vr regs.\n+            // ??? : it seems plausible that a valid address can be copied into a VR.\n+            uint[32]        m_reg; // r0-31\n+        }\n+        else version (PPC64)\n+        {\n+            // As above.\n+            ulong[32]       m_reg; // r0-31\n+        }\n         else\n         {\n             static assert(false, \"Architecture not supported.\" );\n@@ -578,7 +590,7 @@ class Thread : ThreadBase\n     {\n         version (Windows)\n         {\n-            if ( WaitForSingleObject( m_hndl, INFINITE ) != WAIT_OBJECT_0 )\n+            if ( m_addr != m_addr.init && WaitForSingleObject( m_hndl, INFINITE ) != WAIT_OBJECT_0 )\n                 throw new ThreadException( \"Unable to join thread\" );\n             // NOTE: m_addr must be cleared before m_hndl is closed to avoid\n             //       a race condition with isRunning. The operation is done\n@@ -589,7 +601,7 @@ class Thread : ThreadBase\n         }\n         else version (Posix)\n         {\n-            if ( pthread_join( m_addr, null ) != 0 )\n+            if ( m_addr != m_addr.init && pthread_join( m_addr, null ) != 0 )\n                 throw new ThreadException( \"Unable to join thread\" );\n             // NOTE: pthread_join acts as a substitute for pthread_detach,\n             //       which is normally called by the dtor.  Setting m_addr\n@@ -1629,9 +1641,9 @@ package extern(D) void* getStackBottom() nothrow @nogc\n             void *bottom;\n \n             version (X86)\n-                asm pure nothrow @nogc { \"movl %%fs:4, %0;\" : \"=r\" bottom; }\n+                asm pure nothrow @nogc { \"movl %%fs:4, %0;\" : \"=r\" (bottom); }\n             else version (X86_64)\n-                asm pure nothrow @nogc { \"movq %%gs:8, %0;\" : \"=r\" bottom; }\n+                asm pure nothrow @nogc { \"movq %%gs:8, %0;\" : \"=r\" (bottom); }\n             else\n                 static assert(false, \"Platform not supported.\");\n \n@@ -1880,6 +1892,28 @@ private extern (D) bool suspend( Thread t ) nothrow @nogc\n             t.m_reg[14] = state.lr;\n             t.m_reg[15] = state.pc;\n         }\n+        else version (PPC)\n+        {\n+            ppc_thread_state_t state = void;\n+            mach_msg_type_number_t count = PPC_THREAD_STATE_COUNT;\n+\n+            if (thread_get_state(t.m_tmach, PPC_THREAD_STATE, &state, &count) != KERN_SUCCESS)\n+                onThreadError(\"Unable to load thread state\");\n+            if (!t.m_lock)\n+                t.m_curr.tstack = cast(void*) state.r[1];\n+            t.m_reg[] = state.r[];\n+        }\n+        else version (PPC64)\n+        {\n+            ppc_thread_state64_t state = void;\n+            mach_msg_type_number_t count = PPC_THREAD_STATE64_COUNT;\n+\n+            if (thread_get_state(t.m_tmach, PPC_THREAD_STATE64, &state, &count) != KERN_SUCCESS)\n+                onThreadError(\"Unable to load thread state\");\n+            if (!t.m_lock)\n+                t.m_curr.tstack = cast(void*) state.r[1];\n+            t.m_reg[] = state.r[];\n+        }\n         else\n         {\n             static assert(false, \"Architecture not supported.\" );"}, {"sha": "0a8de10e17b816f5c53a509ec40d10a8f950b138", "filename": "libphobos/libdruntime/core/thread/threadbase.d", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fthreadbase.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fthreadbase.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fthreadbase.d?ref=e19c6389966216af5925d2917a206cedc40540e8", "patch": "@@ -10,6 +10,9 @@\n  * Source:    $(DRUNTIMESRC core/thread/osthread.d)\n  */\n \n+/* NOTE: This file has been patched from the original DMD distribution to\n+ * work with the GDC compiler.\n+ */\n module core.thread.threadbase;\n \n import core.thread.context;"}, {"sha": "6f9740404ef44b6eae0ae12eec0f9f414aba785d", "filename": "libphobos/src/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Fsrc%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Fsrc%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2FMERGE?ref=e19c6389966216af5925d2917a206cedc40540e8", "patch": "@@ -1,4 +1,4 @@\n-f89dc217a680fa1a83f2999fea04b7c562f705ee\n+e6907ff3e28d3c43469c46df4a0426726ecb8631\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/phobos repository."}, {"sha": "9cbeca8e9a89fbbb40b05fc064dbceeb8fd37ebf", "filename": "libphobos/src/std/process.d", "status": "modified", "additions": 47, "deletions": 4, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Fsrc%2Fstd%2Fprocess.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e19c6389966216af5925d2917a206cedc40540e8/libphobos%2Fsrc%2Fstd%2Fprocess.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fprocess.d?ref=e19c6389966216af5925d2917a206cedc40540e8", "patch": "@@ -1358,7 +1358,8 @@ version (Windows)\n \n \n /**\n-Flags that control the behaviour of $(LREF spawnProcess) and\n+Flags that control the behaviour of process creation functions in this\n+module. Most flags only apply to $(LREF spawnProcess) and\n $(LREF spawnShell).\n \n Use bitwise OR to combine flags.\n@@ -1433,6 +1434,21 @@ enum Config\n     Calling $(LREF wait) or $(LREF kill) with the resulting $(D Pid) is invalid.\n     */\n     detached = 64,\n+\n+    /**\n+    By default, the $(LREF execute) and $(LREF executeShell) functions\n+    will capture child processes' both stdout and stderr. This can be\n+    undesirable if the standard output is to be processed or otherwise\n+    used by the invoking program, as `execute`'s result would then\n+    contain a mix of output and warning/error messages.\n+\n+    Specify this flag when calling `execute` or `executeShell` to\n+    cause invoked processes' stderr stream to be sent to $(REF stderr,\n+    std,stdio), and only capture and return standard output.\n+\n+    This flag has no effect on $(LREF spawnProcess) or $(LREF spawnShell).\n+    */\n+    stderrPassThrough = 128,\n }\n \n \n@@ -2487,7 +2503,11 @@ private auto executeImpl(alias pipeFunc, Cmd, ExtraPipeFuncArgs...)(\n     import std.array : appender;\n     import std.typecons : Tuple;\n \n-    auto p = pipeFunc(commandLine, Redirect.stdout | Redirect.stderrToStdout,\n+    auto redirect = (config & Config.stderrPassThrough)\n+        ? Redirect.stdout\n+        : Redirect.stdout | Redirect.stderrToStdout;\n+\n+    auto p = pipeFunc(commandLine, redirect,\n                       env, config, workDir, extraArgs);\n \n     auto a = appender!(ubyte[])();\n@@ -2551,6 +2571,30 @@ private auto executeImpl(alias pipeFunc, Cmd, ExtraPipeFuncArgs...)(\n     assert(r3.output.empty);\n }\n \n+@system unittest\n+{\n+    // Temporarily disable output to stderr so as to not spam the build log.\n+    import std.stdio : stderr;\n+    import std.typecons : Tuple;\n+    import std.file : readText;\n+    import std.traits : ReturnType;\n+\n+    ReturnType!executeShell r;\n+    auto tmpname = uniqueTempPath;\n+    auto t = stderr;\n+    // Open a new scope to minimize code ran with stderr redirected.\n+    {\n+        stderr.open(tmpname, \"w\");\n+        scope(exit) stderr = t;\n+        r = executeShell(\"echo D rox>&2\", null, Config.stderrPassThrough);\n+    }\n+    assert(r.status == 0);\n+    assert(r.output.empty);\n+    auto witness = readText(tmpname);\n+    import std.ascii : newline;\n+    assert(witness == \"D rox\" ~ newline, \"'\" ~ witness ~ \"'\");\n+}\n+\n @safe unittest\n {\n     import std.typecons : Tuple;\n@@ -2750,8 +2794,7 @@ private struct TestScript\n     string path;\n }\n \n-version (unittest)\n-private string uniqueTempPath() @safe\n+package(std) string uniqueTempPath() @safe\n {\n     import std.file : tempDir;\n     import std.path : buildPath;"}]}