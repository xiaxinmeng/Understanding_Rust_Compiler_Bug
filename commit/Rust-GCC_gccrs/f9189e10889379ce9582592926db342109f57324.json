{"sha": "f9189e10889379ce9582592926db342109f57324", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkxODllMTA4ODkzNzljZTk1ODI1OTI5MjZkYjM0MjEwOWY1NzMyNA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-09-10T13:53:31Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-09-10T16:37:37Z"}, "message": "c++: TINFO_VAR_DECLARED_CONSTINIT -> DECL_DECLARED_CONSTINIT_P\n\nWe need to record whether template function-scopestatic decls are\nconstinit.  That's currently held on the var's TEMPLATE_INFO data.\nBut I want to get rid of such decl's template header as they're not\nreally templates, and they're never instantiated separately from their\ncontaining function's definition.  (Just like auto vars, which don't\nget them for instance).\n\nThis patch moves the flag into a spare decl_lang_flag.\n\n\tgcc/cp/\n\t* cp-tree.h (TINFO_VAR_DECLARED_CONSTINIT): Replace with ...\n\t(DECL_DECLARED_CONSTINIT_P): ... this.\n\t* decl.c (start_decl): No need to retrofit_lang_decl for constinit\n\tflag.\n\t(cp_finish_decl): Use DECL_DECLARED_CONSTINIT_P.\n\t* pt.c (tsubst_decl): No need to handle constinit flag\n\tpropagation.\n\t(tsubst_expr): Or here.", "tree": {"sha": "4f7af5a880796e212dedee96f7b2c4ba6e1831ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f7af5a880796e212dedee96f7b2c4ba6e1831ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9189e10889379ce9582592926db342109f57324", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9189e10889379ce9582592926db342109f57324", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9189e10889379ce9582592926db342109f57324", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9189e10889379ce9582592926db342109f57324/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c68cf348a28a6bea253d9911e3b94eaeba64acd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c68cf348a28a6bea253d9911e3b94eaeba64acd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c68cf348a28a6bea253d9911e3b94eaeba64acd"}], "stats": {"total": 39, "additions": 11, "deletions": 28}, "files": [{"sha": "b166475b5f151156a0114a5c6abcb78fbbaabc68", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9189e10889379ce9582592926db342109f57324/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9189e10889379ce9582592926db342109f57324/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f9189e10889379ce9582592926db342109f57324", "patch": "@@ -464,7 +464,6 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n       SWITCH_STMT_NO_BREAK_P (in SWITCH_STMT)\n       LAMBDA_EXPR_CAPTURE_OPTIMIZED (in LAMBDA_EXPR)\n       IMPLICIT_CONV_EXPR_BRACED_INIT (in IMPLICIT_CONV_EXPR)\n-      TINFO_VAR_DECLARED_CONSTINIT (in TEMPLATE_INFO)\n       CALL_FROM_NEW_OR_DELETE_P (in CALL_EXPR)\n    3: IMPLICIT_RVALUE_P (in NON_LVALUE_EXPR or STATIC_CAST_EXPR)\n       ICS_BAD_FLAG (in _CONV)\n@@ -534,6 +533,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n       TYPE_DECL_ALIAS_P (in TYPE_DECL)\n    7: DECL_THUNK_P (in a member FUNCTION_DECL)\n       DECL_NORMAL_CAPTURE_P (in FIELD_DECL)\n+      DECL_DECLARED_CONSTINIT_P (in VAR_DECL)\n    8: DECL_DECLARED_CONSTEXPR_P (in VAR_DECL, FUNCTION_DECL)\n \n    Usage of language-independent fields in a language-dependent manner:\n@@ -1462,11 +1462,6 @@ struct GTY (()) tree_lambda_expr\n #define TINFO_USED_TEMPLATE_ID(NODE) \\\n   (TREE_LANG_FLAG_1 (TEMPLATE_INFO_CHECK (NODE)))\n \n-/* Non-zero if this variable template specialization was declared with the\n-   `constinit' specifier.  */\n-#define TINFO_VAR_DECLARED_CONSTINIT(NODE) \\\n-  (TREE_LANG_FLAG_2 (TEMPLATE_INFO_CHECK (NODE)))\n-\n /* The representation of a deferred access check.  */\n \n struct GTY(()) deferred_access_check {\n@@ -3224,6 +3219,10 @@ struct GTY(()) lang_decl {\n #define DECL_EXTERN_C_FUNCTION_P(NODE) \\\n   (DECL_NON_THUNK_FUNCTION_P (NODE) && DECL_EXTERN_C_P (NODE))\n \n+/* Non-zero if this variable is declared `constinit' specifier.  */\n+#define DECL_DECLARED_CONSTINIT_P(NODE)\t\t\\\n+  (DECL_LANG_FLAG_7 (VAR_DECL_CHECK (NODE)))\n+\n /* True if DECL is declared 'constexpr'.  */\n #define DECL_DECLARED_CONSTEXPR_P(DECL) \\\n   DECL_LANG_FLAG_8 (VAR_OR_FUNCTION_DECL_CHECK (STRIP_TEMPLATE (DECL)))"}, {"sha": "f1b7fbaa75baf27463de5630aad731018cba3085", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9189e10889379ce9582592926db342109f57324/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9189e10889379ce9582592926db342109f57324/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f9189e10889379ce9582592926db342109f57324", "patch": "@@ -5422,14 +5422,8 @@ start_decl (const cp_declarator *declarator,\n     decl = maybe_push_decl (decl);\n \n   if (processing_template_decl)\n-    {\n-      /* Make sure that for a `constinit' decl push_template_decl creates\n-\t a DECL_TEMPLATE_INFO info for us, so that cp_finish_decl can then set\n-\t TINFO_VAR_DECLARED_CONSTINIT.  */\n-      if (decl_spec_seq_has_spec_p (declspecs, ds_constinit))\n-\tretrofit_lang_decl (decl);\n-      decl = push_template_decl (decl);\n-    }\n+    decl = push_template_decl (decl);\n+\n   if (decl == error_mark_node)\n     return error_mark_node;\n \n@@ -7683,7 +7677,7 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \n       /* Handle `constinit' on variable templates.  */\n       if (flags & LOOKUP_CONSTINIT)\n-\tTINFO_VAR_DECLARED_CONSTINIT (DECL_TEMPLATE_INFO (decl)) = true;\n+\tDECL_DECLARED_CONSTINIT_P (decl) = true;\n \n       /* Generally, initializers in templates are expanded when the\n \t template is instantiated.  But, if DECL is a variable constant"}, {"sha": "30c6735dede3f374b44fba552d926c10b14b2224", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9189e10889379ce9582592926db342109f57324/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9189e10889379ce9582592926db342109f57324/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f9189e10889379ce9582592926db342109f57324", "patch": "@@ -14746,10 +14746,6 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \n \t    DECL_TEMPLATE_INFO (r) = build_template_info (tmpl, argvec);\n \t    SET_DECL_IMPLICIT_INSTANTIATION (r);\n-\t    /* Remember whether we require constant initialization of\n-\t       a non-constant template variable.  */\n-\t    TINFO_VAR_DECLARED_CONSTINIT (DECL_TEMPLATE_INFO (r))\n-\t      = TINFO_VAR_DECLARED_CONSTINIT (DECL_TEMPLATE_INFO (t));\n \t    if (!error_operand_p (r) || (complain & tf_error))\n \t      register_specialization (r, gen_tmpl, argvec, false, hash);\n \t  }\n@@ -18039,13 +18035,6 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \telse\n \t  {\n \t    init = DECL_INITIAL (decl);\n-\t    /* The following tsubst call will clear the DECL_TEMPLATE_INFO\n-\t       for local variables, so save if DECL was declared constinit.  */\n-\t    const bool constinit_p\n-\t      = (VAR_P (decl)\n-\t\t && DECL_LANG_SPECIFIC (decl)\n-\t\t && DECL_TEMPLATE_INFO (decl)\n-\t\t && TINFO_VAR_DECLARED_CONSTINIT (DECL_TEMPLATE_INFO (decl)));\n \t    decl = tsubst (decl, args, complain, in_decl);\n \t    if (decl != error_mark_node)\n \t      {\n@@ -18114,6 +18103,8 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \t\t       now.  */\n \t\t    predeclare_vla (decl);\n \n+\t\t    bool constinit_p\n+\t\t      = VAR_P (decl) && DECL_DECLARED_CONSTINIT_P (decl);\n \t\t    cp_finish_decl (decl, init, const_init, NULL_TREE,\n \t\t\t\t    constinit_p ? LOOKUP_CONSTINIT : 0);\n \n@@ -25767,8 +25758,7 @@ instantiate_decl (tree d, bool defer_ok, bool expl_inst_class_mem_p)\n         push_nested_class (DECL_CONTEXT (d));\n \n       const_init = DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (code_pattern);\n-      int flags = (TINFO_VAR_DECLARED_CONSTINIT (DECL_TEMPLATE_INFO (d))\n-\t\t   ? LOOKUP_CONSTINIT : 0);\n+      int flags = (DECL_DECLARED_CONSTINIT_P (d) ? LOOKUP_CONSTINIT : 0);\n       cp_finish_decl (d, init, const_init, NULL_TREE, flags);\n \n       if (enter_context)"}]}