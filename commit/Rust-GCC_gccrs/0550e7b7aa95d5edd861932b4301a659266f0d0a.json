{"sha": "0550e7b7aa95d5edd861932b4301a659266f0d0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU1MGU3YjdhYTk1ZDVlZGQ4NjE5MzJiNDMwMWE2NTkyNjZmMGQwYQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2006-12-20T09:12:55Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2006-12-20T09:12:55Z"}, "message": "cgraph.c: Update overall comment; fix vertical spacing.\n\n\t* cgraph.c: Update overall comment; fix vertical spacing.\n\t* ipa-inline.c (cgraph_decide_inlining): Remove now redundant check.\n\nFrom-SVN: r120071", "tree": {"sha": "0e45b8b4b49ce6e5845c5262d545083a5facf2b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e45b8b4b49ce6e5845c5262d545083a5facf2b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0550e7b7aa95d5edd861932b4301a659266f0d0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0550e7b7aa95d5edd861932b4301a659266f0d0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0550e7b7aa95d5edd861932b4301a659266f0d0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0550e7b7aa95d5edd861932b4301a659266f0d0a/comments", "author": null, "committer": null, "parents": [{"sha": "68e56cc4a27bff0dab7f2fc3bcf8353583771f98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e56cc4a27bff0dab7f2fc3bcf8353583771f98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68e56cc4a27bff0dab7f2fc3bcf8353583771f98"}], "stats": {"total": 92, "additions": 40, "deletions": 52}, "files": [{"sha": "6cf1a80e8b2834bab64bc1a48e1a0d08417c7726", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0550e7b7aa95d5edd861932b4301a659266f0d0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0550e7b7aa95d5edd861932b4301a659266f0d0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0550e7b7aa95d5edd861932b4301a659266f0d0a", "patch": "@@ -1,4 +1,9 @@\n-2006-12-19  Jan Hubicka  <jh@suse.cz>\n+2006-12-20  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraph.c: Update overall comment; fix vertical spacing.\n+\t* ipa-inline.c (cgraph_decide_inlining): Remove now redundant check.\n+\n+2006-12-20  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.h (FOR_EACH_STATIC_VARIABLE, FOR_EACH_STATIC_INITIALIZER): New\n \tmacros."}, {"sha": "d35b4db5a569ba5b3104a8c8a76ac19e00fcd5e4", "filename": "gcc/cgraph.c", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0550e7b7aa95d5edd861932b4301a659266f0d0a/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0550e7b7aa95d5edd861932b4301a659266f0d0a/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=0550e7b7aa95d5edd861932b4301a659266f0d0a", "patch": "@@ -28,19 +28,11 @@ The callgraph:\n     sharing.\n \n     The call-graph consist of nodes and edges represented via linked lists.\n-    Each function (external or not) corresponds to the unique node (in\n-    contrast to tree DECL nodes where we can have multiple nodes for each\n-    function).\n+    Each function (external or not) corresponds to the unique node.\n \n     The mapping from declarations to call-graph nodes is done using hash table\n-    based on DECL_ASSEMBLER_NAME, so it is essential for assembler name to\n-    not change once the declaration is inserted into the call-graph.\n-    The call-graph nodes are created lazily using cgraph_node function when\n-    called for unknown declaration.\n-\n-    When built, there is one edge for each direct call.  It is possible that\n-    the reference will be later optimized out.  The call-graph is built\n-    conservatively in order to make conservative data flow analysis possible.\n+    based on DECL_UID.  The call-graph nodes are created lazily using\n+    cgraph_node function when called for unknown declaration.\n \n     The callgraph at the moment does not represent indirect calls or calls\n     from other compilation unit.  Flag NEEDED is set for each node that may\n@@ -156,6 +148,7 @@ eq_node (const void *p1, const void *p2)\n }\n \n /* Allocate new callgraph node and insert it into basic data structures.  */\n+\n static struct cgraph_node *\n cgraph_create_node (void)\n {\n@@ -175,6 +168,7 @@ cgraph_create_node (void)\n }\n \n /* Return cgraph node assigned to DECL.  Create new one when needed.  */\n+\n struct cgraph_node *\n cgraph_node (tree decl)\n {\n@@ -295,6 +289,7 @@ cgraph_edge (struct cgraph_node *node, tree call_stmt)\n }\n \n /* Change call_smtt of edge E to NEW_STMT.  */\n+\n void\n cgraph_set_call_stmt (struct cgraph_edge *e, tree new_stmt)\n {"}, {"sha": "ec2438411c930cf77cea04a17f34ca129c5f92eb", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 28, "deletions": 40, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0550e7b7aa95d5edd861932b4301a659266f0d0a/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0550e7b7aa95d5edd861932b4301a659266f0d0a/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=0550e7b7aa95d5edd861932b4301a659266f0d0a", "patch": "@@ -1041,48 +1041,36 @@ cgraph_decide_inlining (void)\n \t      && node->local.inlinable && node->callers->inline_failed\n \t      && !DECL_EXTERNAL (node->decl) && !DECL_COMDAT (node->decl))\n \t    {\n-\t      bool ok = true;\n-\t      struct cgraph_node *node1;\n-\n-\t      /* Verify that we won't duplicate the caller.  */\n-\t      for (node1 = node->callers->caller;\n-\t\t   node1->callers && !node1->callers->inline_failed\n-\t\t   && ok; node1 = node1->callers->caller)\n-\t\tif (node1->callers->next_caller || node1->needed)\n-\t\t  ok = false;\n-\t      if (ok)\n+\t      if (dump_file)\n+\t\t{\n+\t\t  fprintf (dump_file,\n+\t\t\t   \"\\nConsidering %s %i insns.\\n\",\n+\t\t\t   cgraph_node_name (node), node->global.insns);\n+\t\t  fprintf (dump_file,\n+\t\t\t   \" Called once from %s %i insns.\\n\",\n+\t\t\t   cgraph_node_name (node->callers->caller),\n+\t\t\t   node->callers->caller->global.insns);\n+\t\t}\n+\n+\t      old_insns = overall_insns;\n+\n+\t      if (cgraph_check_inline_limits (node->callers->caller, node,\n+\t\t\t\t\t      NULL, false))\n+\t\t{\n+\t\t  cgraph_mark_inline (node->callers);\n+\t\t  if (dump_file)\n+\t\t    fprintf (dump_file,\n+\t\t\t     \" Inlined into %s which now has %i insns\"\n+\t\t\t     \" for a net change of %+i insns.\\n\",\n+\t\t\t     cgraph_node_name (node->callers->caller),\n+\t\t\t     node->callers->caller->global.insns,\n+\t\t\t     overall_insns - old_insns);\n+\t\t}\n+\t      else\n \t\t{\n \t\t  if (dump_file)\n-\t\t    {\n-\t\t      fprintf (dump_file,\n-\t\t\t       \"\\nConsidering %s %i insns.\\n\",\n-\t\t\t       cgraph_node_name (node), node->global.insns);\n-\t\t      fprintf (dump_file,\n-\t\t\t       \" Called once from %s %i insns.\\n\",\n-\t\t\t       cgraph_node_name (node->callers->caller),\n-\t\t\t       node->callers->caller->global.insns);\n-\t\t    }\n-\n-\t\t  old_insns = overall_insns;\n-\n-\t\t  if (cgraph_check_inline_limits (node->callers->caller, node,\n-\t\t\t\t\t  \t  NULL, false))\n-\t\t    {\n-\t\t      cgraph_mark_inline (node->callers);\n-\t\t      if (dump_file)\n-\t\t\tfprintf (dump_file,\n-\t\t\t\t \" Inlined into %s which now has %i insns\"\n-\t\t\t\t \" for a net change of %+i insns.\\n\",\n-\t\t\t\t cgraph_node_name (node->callers->caller),\n-\t\t\t\t node->callers->caller->global.insns,\n-\t\t\t\t overall_insns - old_insns);\n-\t\t    }\n-\t\t  else\n-\t\t    {\n-\t\t      if (dump_file)\n-\t\t\tfprintf (dump_file,\n-\t\t\t\t \" Inline limit reached, not inlined.\\n\");\n-\t\t    }\n+\t\t    fprintf (dump_file,\n+\t\t\t     \" Inline limit reached, not inlined.\\n\");\n \t\t}\n \t    }\n \t}"}]}