{"sha": "476242fa5ceaa91393562814471c385ebfdd41f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc2MjQyZmE1Y2VhYTkxMzkzNTYyODE0NDcxYzM4NWViZmRkNDFmMw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-07-19T18:53:05Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-07-19T23:47:40Z"}, "message": "compiler: avoid aliases in receiver types\n\nIf a package declares a method on an alias type, the alias would be\nused in the export data.  This would then trigger a compiler\nassertion on import: we should not be adding methods to aliases.\n\nFix the problem by ensuring that receiver types do not use alias types.\nThis seems preferable to consistently avoiding aliases in export data,\nas aliases can cross packages.  And it's painful to try to patch this\nwhile writing the export data, as at that point all the types are known.\n\nTest case is https://golang.org/cl/335172.\n\nFixes golang/go#47131\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/335729", "tree": {"sha": "3e54922e73dc77862f32e9e786318a65b7801af3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e54922e73dc77862f32e9e786318a65b7801af3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/476242fa5ceaa91393562814471c385ebfdd41f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/476242fa5ceaa91393562814471c385ebfdd41f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/476242fa5ceaa91393562814471c385ebfdd41f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/476242fa5ceaa91393562814471c385ebfdd41f3/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e2fa18262660d7753f10f84cc49d85fac1c8798", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e2fa18262660d7753f10f84cc49d85fac1c8798", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e2fa18262660d7753f10f84cc49d85fac1c8798"}], "stats": {"total": 101, "additions": 100, "deletions": 1}, "files": [{"sha": "5323e186eab42f6224af50452f0adc41df508017", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476242fa5ceaa91393562814471c385ebfdd41f3/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476242fa5ceaa91393562814471c385ebfdd41f3/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=476242fa5ceaa91393562814471c385ebfdd41f3", "patch": "@@ -1,4 +1,4 @@\n-adcf10890833026437a94da54934ce50c0018309\n+920549b6382a2623538d31001271941f0e9e5a51\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "95b76bd317c35ce740231dcd705b6c147296c204", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476242fa5ceaa91393562814471c385ebfdd41f3/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476242fa5ceaa91393562814471c385ebfdd41f3/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=476242fa5ceaa91393562814471c385ebfdd41f3", "patch": "@@ -5763,6 +5763,26 @@ Function::check_labels() const\n     }\n }\n \n+// Set the receiver type.  This is used to remove aliases.\n+\n+void\n+Function::set_receiver_type(Type* rtype)\n+{\n+  Function_type* oft = this->type_;\n+  Typed_identifier* rec = new Typed_identifier(oft->receiver()->name(),\n+\t\t\t\t\t       rtype,\n+\t\t\t\t\t       oft->receiver()->location());\n+  Typed_identifier_list* parameters = NULL;\n+  if (oft->parameters() != NULL)\n+    parameters = oft->parameters()->copy();\n+  Typed_identifier_list* results = NULL;\n+  if (oft->results() != NULL)\n+    results = oft->results()->copy();\n+  Function_type* nft = Type::make_function_type(rec, parameters, results,\n+\t\t\t\t\t\toft->location());\n+  this->type_ = nft;\n+}\n+\n // Swap one function with another.  This is used when building the\n // thunk we use to call a function which calls recover.  It may not\n // work for any other case.\n@@ -7285,6 +7305,26 @@ Function_declaration::set_nointerface()\n   this->pragmas_ |= GOPRAGMA_NOINTERFACE;\n }\n \n+// Set the receiver type.  This is used to remove aliases.\n+\n+void\n+Function_declaration::set_receiver_type(Type* rtype)\n+{\n+  Function_type* oft = this->fntype_;\n+  Typed_identifier* rec = new Typed_identifier(oft->receiver()->name(),\n+\t\t\t\t\t       rtype,\n+\t\t\t\t\t       oft->receiver()->location());\n+  Typed_identifier_list* parameters = NULL;\n+  if (oft->parameters() != NULL)\n+    parameters = oft->parameters()->copy();\n+  Typed_identifier_list* results = NULL;\n+  if (oft->results() != NULL)\n+    results = oft->results()->copy();\n+  Function_type* nft = Type::make_function_type(rec, parameters, results,\n+\t\t\t\t\t\toft->location());\n+  this->fntype_ = nft;\n+}\n+\n // Import an inlinable function.  This is used for an inlinable\n // function whose body is recorded in the export data.  Parse the\n // export data into a Block and create a regular function using that"}, {"sha": "c49bc92b3e073a95e4f6eac7b137dfac42a43b96", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476242fa5ceaa91393562814471c385ebfdd41f3/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476242fa5ceaa91393562814471c385ebfdd41f3/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=476242fa5ceaa91393562814471c385ebfdd41f3", "patch": "@@ -1724,6 +1724,10 @@ class Function\n   set_is_referenced_by_inline()\n   { this->is_referenced_by_inline_ = true; }\n \n+  // Set the receiver type.  This is used to remove aliases.\n+  void\n+  set_receiver_type(Type* rtype);\n+\n   // Swap with another function.  Used only for the thunk which calls\n   // recover.\n   void\n@@ -1990,6 +1994,10 @@ class Function_declaration\n   set_is_on_inlinable_list()\n   { this->is_on_inlinable_list_ = true; }\n \n+  // Set the receiver type.  This is used to remove aliases.\n+  void\n+  set_receiver_type(Type* rtype);\n+\n   // Import the function body, creating a function.\n   void\n   import_function_body(Gogo*, Named_object*);"}, {"sha": "ab7166b8b1ba4dbede9e3cd2cffe977e05b81318", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476242fa5ceaa91393562814471c385ebfdd41f3/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476242fa5ceaa91393562814471c385ebfdd41f3/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=476242fa5ceaa91393562814471c385ebfdd41f3", "patch": "@@ -10416,6 +10416,57 @@ Named_type::finalize_methods(Gogo* gogo)\n       return;\n     }\n \n+  // Remove any aliases in the local method receiver types.\n+  Bindings* methods = this->local_methods_;\n+  if (methods != NULL)\n+    {\n+      for (Bindings::const_declarations_iterator p =\n+\t     methods->begin_declarations();\n+\t   p != methods->end_declarations();\n+\t   ++p)\n+\t{\n+\t  Named_object* no = p->second;\n+\t  Function_type* fntype;\n+\t  if (no->is_function())\n+\t    fntype = no->func_value()->type();\n+\t  else if (no->is_function_declaration())\n+\t    fntype = no->func_declaration_value()->type();\n+\t  else\n+\t    {\n+\t      go_assert(saw_errors());\n+\t      continue;\n+\t    }\n+\n+\t  Type* rtype = fntype->receiver()->type();\n+\t  bool is_pointer = false;\n+\t  Type* pt = rtype->points_to();\n+\t  if (pt != NULL)\n+\t    {\n+\t      rtype = pt;\n+\t      is_pointer = true;\n+\t    }\n+\t  if (rtype->named_type() != this)\n+\t    {\n+\t      if (rtype->unalias() != this)\n+\t\t{\n+\t\t  go_assert(saw_errors());\n+\t\t  continue;\n+\t\t}\n+\n+\t      rtype = this;\n+\t      if (is_pointer)\n+\t\trtype = Type::make_pointer_type(rtype);\n+\n+\t      if (no->is_function())\n+\t\tno->func_value()->set_receiver_type(rtype);\n+\t      else if (no->is_function_declaration())\n+\t\tno->func_declaration_value()->set_receiver_type(rtype);\n+\t      else\n+\t\tgo_unreachable();\n+\t    }\n+\t}\n+    }\n+\n   Type::finalize_methods(gogo, this, this->location_, &this->all_methods_);\n }\n "}]}