{"sha": "1dcfe404fbae7f4054c10b3757567fe6f69fecbb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRjZmU0MDRmYmFlN2Y0MDU0YzEwYjM3NTc1NjdmZTZmNjlmZWNiYg==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2010-04-14T18:32:51Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2010-04-14T18:32:51Z"}, "message": "intrinsic.texi: Add the missing specific name of intrinsic procedure where the specific name is...\n\n2010-04-14  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\t* fortran/intrinsic.texi: Add the missing specific name of intrinsic\n\tprocedure where the specific name is identical to the generic name.\n\tFix inconsistent or mismatch in the argument names in intrinsic\n\tprocedure descriptions.  Add the SCALAR allocatable description to\n\tALLOCATED.\n\nFrom-SVN: r158352", "tree": {"sha": "3e0f3b36e5acfbba82d778b0f5a4655b781d7dbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e0f3b36e5acfbba82d778b0f5a4655b781d7dbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1dcfe404fbae7f4054c10b3757567fe6f69fecbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dcfe404fbae7f4054c10b3757567fe6f69fecbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dcfe404fbae7f4054c10b3757567fe6f69fecbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dcfe404fbae7f4054c10b3757567fe6f69fecbb/comments", "author": null, "committer": null, "parents": [{"sha": "88f33b96bacb1f39b43f2003b0c2de300871d5fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88f33b96bacb1f39b43f2003b0c2de300871d5fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88f33b96bacb1f39b43f2003b0c2de300871d5fd"}], "stats": {"total": 207, "additions": 147, "deletions": 60}, "files": [{"sha": "d8456e827e944ce631205b0cc06f2ae104b4ddf8", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 147, "deletions": 60, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dcfe404fbae7f4054c10b3757567fe6f69fecbb/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dcfe404fbae7f4054c10b3757567fe6f69fecbb/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=1dcfe404fbae7f4054c10b3757567fe6f69fecbb", "patch": "@@ -404,11 +404,12 @@ end program test_abs\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument            @tab Return type       @tab Standard\n-@item @code{CABS(A)}  @tab @code{COMPLEX(4) Z} @tab @code{REAL(4)}    @tab Fortran 77 and later\n-@item @code{DABS(A)}  @tab @code{REAL(8)    X} @tab @code{REAL(8)}    @tab Fortran 77 and later\n-@item @code{IABS(A)}  @tab @code{INTEGER(4) I} @tab @code{INTEGER(4)} @tab Fortran 77 and later\n-@item @code{ZABS(A)}  @tab @code{COMPLEX(8) Z} @tab @code{COMPLEX(8)} @tab GNU extension\n-@item @code{CDABS(A)} @tab @code{COMPLEX(8) Z} @tab @code{COMPLEX(8)} @tab GNU extension\n+@item @code{ABS(A)}   @tab @code{REAL(4) A}    @tab @code{REAL(4)}    @tab Fortran 77 and later\n+@item @code{CABS(A)}  @tab @code{COMPLEX(4) A} @tab @code{REAL(4)}    @tab Fortran 77 and later\n+@item @code{DABS(A)}  @tab @code{REAL(8) A}    @tab @code{REAL(8)}    @tab Fortran 77 and later\n+@item @code{IABS(A)}  @tab @code{INTEGER(4) A} @tab @code{INTEGER(4)} @tab Fortran 77 and later\n+@item @code{ZABS(A)}  @tab @code{COMPLEX(8) A} @tab @code{COMPLEX(8)} @tab GNU extension\n+@item @code{CDABS(A)} @tab @code{COMPLEX(8) A} @tab @code{COMPLEX(8)} @tab GNU extension\n @end multitable\n @end table\n \n@@ -565,8 +566,9 @@ end program test_acos\n \n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n-@item Name            @tab Argument          @tab Return type       @tab Standard\n-@item @code{DACOS(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab Fortran 77 and later\n+@item Name            @tab Argument         @tab Return type     @tab Standard\n+@item @code{ACOS(X)}  @tab @code{REAL(4) X} @tab @code{REAL(4)}  @tab Fortran 77 and later\n+@item @code{DACOS(X)} @tab @code{REAL(8) X} @tab @code{REAL(8)}  @tab Fortran 77 and later\n @end multitable\n \n @item @emph{See also}:\n@@ -765,10 +767,11 @@ end program test_aimag\n \n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n-@item Name            @tab Argument            @tab Return type       @tab Standard\n-@item @code{DIMAG(Z)} @tab @code{COMPLEX(8) Z} @tab @code{REAL(8)}    @tab GNU extension\n-@item @code{IMAG(Z)}  @tab @code{COMPLEX Z} @tab @code{REAL}    @tab GNU extension\n-@item @code{IMAGPART(Z)} @tab @code{COMPLEX Z} @tab @code{REAL} @tab GNU extension\n+@item Name               @tab Argument            @tab Return type     @tab Standard\n+@item @code{AIMAG(Z)}    @tab @code{COMPLEX Z}    @tab @code{REAL}     @tab GNU extension\n+@item @code{DIMAG(Z)}    @tab @code{COMPLEX(8) Z} @tab @code{REAL(8)}  @tab GNU extension\n+@item @code{IMAG(Z)}     @tab @code{COMPLEX Z}    @tab @code{REAL}     @tab GNU extension\n+@item @code{IMAGPART(Z)} @tab @code{COMPLEX Z}    @tab @code{REAL}     @tab GNU extension\n @end multitable\n @end table\n \n@@ -825,7 +828,8 @@ end program test_aint\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name           @tab Argument         @tab Return type      @tab Standard\n-@item @code{DINT(X)} @tab @code{REAL(8) X} @tab @code{REAL(8)}   @tab Fortran 77 and later\n+@item @code{AINT(A)} @tab @code{REAL(4) A} @tab @code{REAL(4)}   @tab Fortran 77 and later\n+@item @code{DINT(A)} @tab @code{REAL(8) A} @tab @code{REAL(8)}   @tab Fortran 77 and later\n @end multitable\n @end table\n \n@@ -956,26 +960,29 @@ end program test_all\n \n @table @asis\n @item @emph{Description}:\n-@code{ALLOCATED(ARRAY)} checks the status of whether @var{X} is allocated.\n+@code{ALLOCATED(ARRAY)} and @code{ALLOCATED(SCALAR)} check the allocation\n+status of @var{ARRAY} and @var{SCALAR}, respectively.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 95 and later.  Note, the @code{SCALAR=} keyword and allocatable\n+scalar entities are available in Fortran 2003 and later.\n \n @item @emph{Class}:\n Inquiry function\n \n @item @emph{Syntax}:\n-@code{RESULT = ALLOCATED(ARRAY)}\n+@code{RESULT = ALLOCATED(ARRAY)} or @code{RESULT = ALLOCATED(SCALAR)} \n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n @item @var{ARRAY}    @tab The argument shall be an @code{ALLOCATABLE} array.\n+@item @var{SCALAR}   @tab The argument shall be an @code{ALLOCATABLE} scalar.\n @end multitable\n \n @item @emph{Return value}:\n The return value is a scalar @code{LOGICAL} with the default logical\n-kind type parameter.  If @var{ARRAY} is allocated, @code{ALLOCATED(ARRAY)}\n-is @code{.TRUE.}; otherwise, it returns @code{.FALSE.} \n+kind type parameter.  If the argument is allocated, then the result is\n+@code{.TRUE.}; otherwise, it returns @code{.FALSE.} \n \n @item @emph{Example}:\n @smallexample\n@@ -1092,6 +1099,7 @@ end program test_anint\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument         @tab Return type      @tab Standard\n+@item @code{AINT(A)}  @tab @code{REAL(4) A} @tab @code{REAL(4)}   @tab Fortran 77 and later\n @item @code{DNINT(A)} @tab @code{REAL(8) A} @tab @code{REAL(8)}   @tab Fortran 77 and later\n @end multitable\n @end table\n@@ -1207,6 +1215,7 @@ end program test_asin\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n+@item @code{ASIN(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab Fortran 77 and later\n @item @code{DASIN(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab Fortran 77 and later\n @end multitable\n \n@@ -1393,6 +1402,7 @@ end program test_atan\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n+@item @code{ATAN(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab Fortran 77 and later\n @item @code{DATAN(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab Fortran 77 and later\n @end multitable\n \n@@ -1452,8 +1462,9 @@ end program test_atan2\n \n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n-@item Name            @tab Argument          @tab Return type    @tab Standard\n-@item @code{DATAN2(X, Y)} @tab @code{REAL(8) X}, @code{REAL(8) Y} @tab @code{REAL(8)} @tab Fortran 77 and later\n+@item Name                @tab Argument            @tab Return type    @tab Standard\n+@item @code{ATAN2(X, Y)}  @tab @code{REAL(4) X, Y} @tab @code{REAL(4)} @tab Fortran 77 and later\n+@item @code{DATAN2(X, Y)} @tab @code{REAL(8) X, Y} @tab @code{REAL(8)} @tab Fortran 77 and later\n @end multitable\n @end table\n \n@@ -1603,8 +1614,8 @@ end program test_besj1\n \n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n-@item Name            @tab Argument          @tab Return type       @tab Standard\n-@item @code{DBESJ1(X)}@tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab GNU extension\n+@item Name             @tab Argument          @tab Return type       @tab Standard\n+@item @code{DBESJ1(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab GNU extension\n @end multitable\n @end table\n \n@@ -1804,7 +1815,7 @@ end program test_besyn\n @multitable @columnfractions .20 .20 .20 .25\n @item Name               @tab Argument            @tab Return type     @tab Standard\n @item @code{DBESYN(N,X)} @tab @code{INTEGER N} @tab @code{REAL(8)}  @tab GNU extension\n-@item                    @tab @code{REAL(8)    X} @tab                 @tab \n+@item                    @tab @code{REAL(8) X} @tab                 @tab \n @end multitable\n @end table\n \n@@ -2292,6 +2303,12 @@ program test_char\n end program test_char\n @end smallexample\n \n+@item @emph{Specific names}:\n+@multitable @columnfractions .20 .20 .20 .25\n+@item Name           @tab Argument         @tab Return type             @tab Standard\n+@item @code{CHAR(I)} @tab @code{INTEGER I} @tab @code{CHARACTER(LEN=1)} @tab F77 and later\n+@end multitable\n+\n @item @emph{Note}:\n See @ref{ICHAR} for a discussion of converting between numerical values\n and formatted string representations.\n@@ -2615,8 +2632,9 @@ end program test_conjg\n \n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n-@item Name             @tab Argument             @tab Return type          @tab Standard\n-@item @code{DCONJG(Z)} @tab @code{COMPLEX(8) Z}  @tab @code{COMPLEX(8)}    @tab GNU extension\n+@item Name             @tab Argument             @tab Return type       @tab Standard\n+@item @code{CONJG(Z)}  @tab @code{COMPLEX Z}     @tab @code{COMPLEX}    @tab GNU extension\n+@item @code{DCONJG(Z)} @tab @code{COMPLEX(8) Z}  @tab @code{COMPLEX(8)} @tab GNU extension\n @end multitable\n @end table\n \n@@ -2667,6 +2685,7 @@ end program test_cos\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument            @tab Return type       @tab Standard\n+@item @code{COS(X)}  n@tab @code{REAL(4) X}    @tab @code{REAL(4)}    @tab Fortran 77 and later\n @item @code{DCOS(X)}  @tab @code{REAL(8) X}    @tab @code{REAL(8)}    @tab Fortran 77 and later\n @item @code{CCOS(X)}  @tab @code{COMPLEX(4) X} @tab @code{COMPLEX(4)} @tab Fortran 77 and later\n @item @code{ZCOS(X)}  @tab @code{COMPLEX(8) X} @tab @code{COMPLEX(8)} @tab GNU extension\n@@ -2723,6 +2742,7 @@ end program test_cosh\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n+@item @code{COSH(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab Fortran 77 and later\n @item @code{DCOSH(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab Fortran 77 and later\n @end multitable\n \n@@ -3264,9 +3284,10 @@ end program test_dim\n \n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n-@item Name             @tab Argument              @tab Return type       @tab Standard\n-@item @code{IDIM(X,Y)} @tab @code{INTEGER(4) X,Y} @tab @code{INTEGER(4)} @tab Fortran 77 and later\n-@item @code{DDIM(X,Y)} @tab @code{REAL(8) X,Y}    @tab @code{REAL(8)}    @tab Fortran 77 and later\n+@item Name             @tab Argument               @tab Return type       @tab Standard\n+@item @code{DIM(X,Y)}  @tab @code{REAL(4) X, Y}    @tab @code{REAL(4)}    @tab Fortran 77 and later\n+@item @code{IDIM(X,Y)} @tab @code{INTEGER(4) X, Y} @tab @code{INTEGER(4)} @tab Fortran 77 and later\n+@item @code{DDIM(X,Y)} @tab @code{REAL(8) X, Y}    @tab @code{REAL(8)}    @tab Fortran 77 and later\n @end multitable\n @end table\n \n@@ -3363,8 +3384,14 @@ program test_dprod\n     print *, d\n end program test_dprod\n @end smallexample\n-@end table\n \n+@item @emph{Specific names}:\n+@multitable @columnfractions .20 .20 .20 .25\n+@item Name              @tab Argument               @tab Return type       @tab Standard\n+@item @code{DPROD(X,Y)} @tab @code{REAL(4) X, Y}    @tab @code{REAL(4)}    @tab Fortran 77 and later\n+@end multitable\n+\n+@end table\n \n \n @node DREAL\n@@ -3892,6 +3919,7 @@ end program test_exp\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument             @tab Return type         @tab Standard\n+@item @code{EXP(X)}   @tab @code{REAL(4) X}     @tab @code{REAL(4)}      @tab Fortran 77 and later\n @item @code{DEXP(X)}  @tab @code{REAL(8) X}     @tab @code{REAL(8)}      @tab Fortran 77 and later\n @item @code{CEXP(X)}  @tab @code{COMPLEX(4) X}  @tab @code{COMPLEX(4)}   @tab Fortran 77 and later\n @item @code{ZEXP(X)}  @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)}   @tab GNU extension\n@@ -5701,6 +5729,12 @@ program test_ichar\n end program test_ichar\n @end smallexample\n \n+@item @emph{Specific names}:\n+@multitable @columnfractions .20 .20 .20 .25\n+@item Name             @tab Argument             @tab Return type       @tab Standard\n+@item @code{ICHAR(C)}  @tab @code{CHARACTER C}   @tab @code{INTEGER(4)}    @tab Fortran 77 and later\n+@end multitable\n+\n @item @emph{Note}:\n No intrinsic exists to convert between a numeric value and a formatted\n character string representation -- for instance, given the\n@@ -5886,6 +5920,12 @@ expression indicating the kind parameter of the result.\n The return value is of type @code{INTEGER} and of kind @var{KIND}. If\n @var{KIND} is absent, the return value is of default integer kind.\n \n+@item @emph{Specific names}:\n+@multitable @columnfractions .20 .20 .20 .25\n+@item Name                            @tab Argument           @tab Return type       @tab Standard\n+@item @code{INDEX(STRING, SUBSTRING)} @tab @code{CHARACTER}   @tab @code{INTEGER(4)} @tab Fortran 77 and later\n+@end multitable\n+\n @item @emph{See also}:\n @ref{SCAN}, @ref{VERIFY}\n @end table\n@@ -5947,15 +5987,15 @@ end program\n \n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n-@item Name             @tab Argument            @tab Return type       @tab Standard\n-@item @code{IFIX(A)}   @tab @code{REAL(4) A}    @tab @code{INTEGER}    @tab Fortran 77 and later\n-@item @code{IDINT(A)}  @tab @code{REAL(8) A}    @tab @code{INTEGER}    @tab Fortran 77 and later\n+@item Name            @tab Argument          @tab Return type       @tab Standard\n+@item @code{INT(A)}   @tab @code{REAL(4) A}  @tab @code{INTEGER}    @tab Fortran 77 and later\n+@item @code{IFIX(A)}  @tab @code{REAL(4) A}  @tab @code{INTEGER}    @tab Fortran 77 and later\n+@item @code{IDINT(A)} @tab @code{REAL(8) A}  @tab @code{INTEGER}    @tab Fortran 77 and later\n @end multitable\n \n @end table\n \n \n-\n @node INT2\n @section @code{INT2} --- Convert to 16-bit integer type\n @fnindex INT2\n@@ -6700,6 +6740,14 @@ expression indicating the kind parameter of the result.\n The return value is of type @code{INTEGER} and of kind @var{KIND}. If\n @var{KIND} is absent, the return value is of default integer kind.\n \n+\n+@item @emph{Specific names}:\n+@multitable @columnfractions .20 .20 .20 .25\n+@item Name               @tab Argument          @tab Return type       @tab Standard\n+@item @code{LEN(STRING)} @tab @code{CHARACTER}  @tab @code{INTEGER}    @tab Fortran 77 and later\n+@end multitable\n+\n+\n @item @emph{See also}:\n @ref{LEN_TRIM}, @ref{ADJUSTL}, @ref{ADJUSTR}\n @end table\n@@ -6782,6 +6830,12 @@ Elemental function\n Returns @code{.TRUE.} if @code{STRING_A >= STRING_B}, and @code{.FALSE.}\n otherwise, based on the ASCII ordering.\n \n+@item @emph{Specific names}:\n+@multitable @columnfractions .20 .20 .20 .25\n+@item Name                           @tab Argument          @tab Return type       @tab Standard\n+@item @code{LGE(STRING_A, STRING_B)} @tab @code{CHARACTER}  @tab @code{LOGICAL}    @tab Fortran 77 and later\n+@end multitable\n+\n @item @emph{See also}:\n @ref{LGT}, @ref{LLE}, @ref{LLT}\n @end table\n@@ -6828,6 +6882,12 @@ Elemental function\n Returns @code{.TRUE.} if @code{STRING_A > STRING_B}, and @code{.FALSE.}\n otherwise, based on the ASCII ordering.\n \n+@item @emph{Specific names}:\n+@multitable @columnfractions .20 .20 .20 .25\n+@item Name                           @tab Argument          @tab Return type       @tab Standard\n+@item @code{LGT(STRING_A, STRING_B)} @tab @code{CHARACTER}  @tab @code{LOGICAL}    @tab Fortran 77 and later\n+@end multitable\n+\n @item @emph{See also}:\n @ref{LGE}, @ref{LLE}, @ref{LLT}\n @end table\n@@ -6917,6 +6977,12 @@ Elemental function\n Returns @code{.TRUE.} if @code{STRING_A <= STRING_B}, and @code{.FALSE.}\n otherwise, based on the ASCII ordering.\n \n+@item @emph{Specific names}:\n+@multitable @columnfractions .20 .20 .20 .25\n+@item Name                           @tab Argument          @tab Return type       @tab Standard\n+@item @code{LLE(STRING_A, STRING_B)} @tab @code{CHARACTER}  @tab @code{LOGICAL}    @tab Fortran 77 and later\n+@end multitable\n+\n @item @emph{See also}:\n @ref{LGE}, @ref{LGT}, @ref{LLT}\n @end table\n@@ -6963,6 +7029,12 @@ Elemental function\n Returns @code{.TRUE.} if @code{STRING_A < STRING_B}, and @code{.FALSE.}\n otherwise, based on the ASCII ordering.\n \n+@item @emph{Specific names}:\n+@multitable @columnfractions .20 .20 .20 .25\n+@item Name                           @tab Argument          @tab Return type       @tab Standard\n+@item @code{LLT(STRING_A, STRING_B)} @tab @code{CHARACTER}  @tab @code{LOGICAL}    @tab Fortran 77 and later\n+@end multitable\n+\n @item @emph{See also}:\n @ref{LGE}, @ref{LGT}, @ref{LLE}\n @end table\n@@ -7556,12 +7628,12 @@ and has the same type and kind as the first argument.\n \n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n-@item Name             @tab Argument            @tab Return type         @tab Standard\n-@item @code{MAX0(I)}   @tab @code{INTEGER(4) I} @tab @code{INTEGER(4)}   @tab Fortran 77 and later\n-@item @code{AMAX0(I)}  @tab @code{INTEGER(4) I} @tab @code{REAL(MAX(X))} @tab Fortran 77 and later\n-@item @code{MAX1(X)}   @tab @code{REAL X}    @tab @code{INT(MAX(X))}  @tab Fortran 77 and later\n-@item @code{AMAX1(X)}  @tab @code{REAL(4)    X} @tab @code{REAL(4)}      @tab Fortran 77 and later\n-@item @code{DMAX1(X)}  @tab @code{REAL(8)    X} @tab @code{REAL(8)}      @tab Fortran 77 and later\n+@item Name             @tab Argument             @tab Return type         @tab Standard\n+@item @code{MAX0(A1)}  @tab @code{INTEGER(4) A1} @tab @code{INTEGER(4)}   @tab Fortran 77 and later\n+@item @code{AMAX0(A1)} @tab @code{INTEGER(4) A1} @tab @code{REAL(MAX(X))} @tab Fortran 77 and later\n+@item @code{MAX1(A1)}  @tab @code{REAL A1}       @tab @code{INT(MAX(X))}  @tab Fortran 77 and later\n+@item @code{AMAX1(A1)} @tab @code{REAL(4) A1}    @tab @code{REAL(4)}      @tab Fortran 77 and later\n+@item @code{DMAX1(A1)} @tab @code{REAL(8) A1}    @tab @code{REAL(8)}      @tab Fortran 77 and later\n @end multitable\n \n @item @emph{See also}:\n@@ -7876,12 +7948,12 @@ and has the same type and kind as the first argument.\n \n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n-@item Name             @tab Argument            @tab Return type         @tab Standard\n-@item @code{MIN0(I)}   @tab @code{INTEGER(4) I} @tab @code{INTEGER(4)}   @tab Fortran 77 and later\n-@item @code{AMIN0(I)}  @tab @code{INTEGER(4) I} @tab @code{REAL(MIN(X))} @tab Fortran 77 and later\n-@item @code{MIN1(X)}   @tab @code{REAL X}    @tab @code{INT(MIN(X))}  @tab Fortran 77 and later\n-@item @code{AMIN1(X)}  @tab @code{REAL(4)    X} @tab @code{REAL(4)}      @tab Fortran 77 and later\n-@item @code{DMIN1(X)}  @tab @code{REAL(8)    X} @tab @code{REAL(8)}      @tab Fortran 77 and later\n+@item Name              @tab Argument             @tab Return type        @tab Standard\n+@item @code{MIN0(A1)}   @tab @code{INTEGER(4) A1} @tab @code{INTEGER(4)}  @tab Fortran 77 and later\n+@item @code{AMIN0(A1)}  @tab @code{INTEGER(4) A1} @tab @code{REAL(4)}     @tab Fortran 77 and later\n+@item @code{MIN1(A1)}   @tab @code{REAL A1}       @tab @code{INTEGER(4)}  @tab Fortran 77 and later\n+@item @code{AMIN1(A1)}  @tab @code{REAL(4) A1}    @tab @code{REAL(4)}     @tab Fortran 77 and later\n+@item @code{DMIN1(A1)}  @tab @code{REAL(8) A1}    @tab @code{REAL(8)}     @tab Fortran 77 and later\n @end multitable\n \n @item @emph{See also}:\n@@ -8091,9 +8163,10 @@ end program test_mod\n \n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n-@item Name             @tab Arguments      @tab Return type    @tab Standard\n-@item @code{AMOD(A,P)} @tab @code{REAL(4)} @tab @code{REAL(4)} @tab Fortran 95 and later\n-@item @code{DMOD(A,P)} @tab @code{REAL(8)} @tab @code{REAL(8)} @tab Fortran 95 and later\n+@item Name             @tab Arguments          @tab Return type    @tab Standard\n+@item @code{MOD(A,P)}  @tab @code{INTEGER A,P} @tab @code{INTEGER} @tab Fortran 95 and later\n+@item @code{AMOD(A,P)} @tab @code{REAL(4) A,P} @tab @code{REAL(4)} @tab Fortran 95 and later\n+@item @code{DMOD(A,P)} @tab @code{REAL(8) A,P} @tab @code{REAL(8)} @tab Fortran 95 and later\n @end multitable\n @end table\n \n@@ -8370,9 +8443,10 @@ end program test_nint\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .25 .25 .25\n-@item Name             @tab Argument         @tab Standard\n-@item @code{IDNINT(X)} @tab @code{REAL(8)}   @tab Fortran 95 and later\n+@multitable @columnfractions .20 .20 .20 .25\n+@item Name             @tab Argument           @tab Return Type     @tab Standard\n+@item @code{NINT(A)}   @tab @code{REAL(4) A}   @tab  @code{INTEGER} @tab Fortran 95 and later\n+@item @code{IDNINT(A)} @tab @code{REAL(8) A}   @tab  @code{INTEGER} @tab Fortran 95 and later\n @end multitable\n \n @item @emph{See also}:\n@@ -9134,6 +9208,13 @@ program test_real\n end program test_real\n @end smallexample\n \n+@item @emph{Specific names}:\n+@multitable @columnfractions .20 .20 .20 .25\n+@item Name           @tab Argument           @tab Return type     @tab Standard\n+@item @code{REAL(A)} @tab @code{INTEGER(4)}  @tab @code{REAL(4)}  @tab Fortran 77 and later\n+@end multitable\n+\n+\n @item @emph{See also}:\n @ref{DBLE}, @ref{DFLOAT}, @ref{FLOAT}\n \n@@ -9831,9 +9912,10 @@ end program test_sign\n \n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n-@item Name              @tab Arguments      @tab Return type    @tab Standard\n-@item @code{ISIGN(A,P)} @tab @code{INTEGER(4)} @tab @code{INTEGER(4)} @tab f95, gnu\n-@item @code{DSIGN(A,P)} @tab @code{REAL(8)} @tab @code{REAL(8)} @tab f95, gnu\n+@item Name              @tab Arguments              @tab Return type       @tab Standard\n+@item @code{SIGN(A,B)}  @tab @code{REAL(4) A, B}    @tab @code{REAL(4)}    @tab f77, gnu\n+@item @code{ISIGN(A,B)} @tab @code{INTEGER(4) A, B} @tab @code{INTEGER(4)} @tab f77, gnu\n+@item @code{DSIGN(A,B)} @tab @code{REAL(8) A, B}    @tab @code{REAL(8)}    @tab f77, gnu\n @end multitable\n @end table\n \n@@ -9939,11 +10021,12 @@ end program test_sin\n \n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n-@item Name            @tab Argument          @tab Return type       @tab Standard\n-@item @code{DSIN(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab f95, gnu\n-@item @code{CSIN(X)}  @tab @code{COMPLEX(4) X}  @tab @code{COMPLEX(4)}    @tab f95, gnu\n-@item @code{ZSIN(X)}  @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)}    @tab f95, gnu\n-@item @code{CDSIN(X)} @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)}    @tab f95, gnu\n+@item Name            @tab Argument             @tab Return type       @tab Standard\n+@item @code{SIN(X)}   @tab @code{REAL(4) X}     @tab @code{REAL(4)}    @tab f77, gnu\n+@item @code{DSIN(X)}  @tab @code{REAL(8) X}     @tab @code{REAL(8)}    @tab f95, gnu\n+@item @code{CSIN(X)}  @tab @code{COMPLEX(4) X}  @tab @code{COMPLEX(4)} @tab f95, gnu\n+@item @code{ZSIN(X)}  @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)} @tab f95, gnu\n+@item @code{CDSIN(X)} @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)} @tab f95, gnu\n @end multitable\n \n @item @emph{See also}:\n@@ -9992,6 +10075,7 @@ end program test_sinh\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n+@item @code{SINH(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab Fortran 95 and later\n @item @code{DSINH(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab Fortran 95 and later\n @end multitable\n \n@@ -10305,6 +10389,7 @@ end program test_sqrt\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name             @tab Argument             @tab Return type          @tab Standard\n+@item @code{SQRT(X)}   @tab @code{REAL(4) X}     @tab @code{REAL(4)}       @tab Fortran 95 and later\n @item @code{DSQRT(X)}  @tab @code{REAL(8) X}     @tab @code{REAL(8)}       @tab Fortran 95 and later\n @item @code{CSQRT(X)}  @tab @code{COMPLEX(4) X}  @tab @code{COMPLEX(4)}    @tab Fortran 95 and later\n @item @code{ZSQRT(X)}  @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)}    @tab GNU extension\n@@ -10679,8 +10764,9 @@ end program test_tan\n \n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n-@item Name            @tab Argument          @tab Return type       @tab Standard\n-@item @code{DTAN(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab Fortran 95 and later\n+@item Name            @tab Argument          @tab Return type     @tab Standard\n+@item @code{TAN(X)}   @tab @code{REAL(4) X}  @tab @code{REAL(4)}  @tab Fortran 95 and later\n+@item @code{DTAN(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}  @tab Fortran 95 and later\n @end multitable\n \n @item @emph{See also}:\n@@ -10732,6 +10818,7 @@ end program test_tanh\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n+@item @code{TANH(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab Fortran 95 and later\n @item @code{DTANH(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab Fortran 95 and later\n @end multitable\n "}]}