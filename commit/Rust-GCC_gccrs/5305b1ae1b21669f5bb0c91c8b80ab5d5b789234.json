{"sha": "5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTMwNWIxYWUxYjIxNjY5ZjViYjBjOTFjOGI4MGFiNWQ1Yjc4OTIzNA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2005-04-07T04:16:26Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2005-04-07T04:16:26Z"}, "message": "test.html: Update.\n\n\n2005-04-06  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* docs/html/test.html: Update.\n\t* testsuite/printnow.c: Remove.\n\t* scripts/check_survey.in: Remove.\n\n\t* testsuite/abi_check.cc: To...\n\t* testuite/testsuite_abi_check.cc: ...here.\n\t* testsuite/libstdc++-abi/abi.exp: Change abi_check.cc to\n\ttestsuite_abi_check.cc.\n\n\t* testsuite/testsuite_hooks.h: Move character related bits to...\n\t* testsuite/testsuite_character.h: ...here.\n\t* testsuite/testsuite_character.cc: ... and here.\n\t* testsuite/21_strings/basic_string/inserters_extractors/pod/\n\t10081-in.cc: Use testsuite_character.h.\n\t* testsuite/21_strings/basic_string/inserters_extractors/pod/\n\t10081-out.cc: Same.\n\t* testsuite/22_locale/numpunct/members/pod/1.cc: Same.\n\t* testsuite/22_locale/numpunct/members/pod/2.cc: Same.\n\t* testsuite/27_io/basic_filebuf/2.cc: Same.\n\t* testsuite/27_io/basic_fstream/2.cc: Same.\n\t* testsuite/27_io/basic_istream/2.cc: Same.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/pod/\n\t3983-1.cc: Same.\n\t* testsuite/27_io/basic_istream/extractors_character/char/\n\t9826.cc: Same.\n\t* testsuite/27_io/basic_istream/extractors_character/pod/\n\t3983-2.cc: Same.\n\t* testsuite/27_io/basic_istream/extractors_other/pod/3983-3.cc: Same.\n\t* testsuite/27_io/basic_istream/sentry/pod/1.cc: Same.\n\t* testsuite/27_io/basic_ostream/2.cc: Same.\n\t* testsuite/27_io/basic_ostream/sentry/pod/1.cc: Same.\n\t* testsuite/27_io/basic_streambuf/2.cc: Same.\n\t* testsuite/27_io/basic_stringbuf/2.cc: Same.\n\t* testsuite/27_io/basic_stringbuf/4.cc: Same.\n\t* testsuite/27_io/basic_stringstream/2.cc: Same.\n\t* testsuite/27_io/fpos/1.cc: Same.\n\t* testsuite/ext/mt_allocator/tune-1.cc: Same.\n\t* testsuite/ext/mt_allocator/tune-2.cc: Same.\n\t* testsuite/ext/stdio_filebuf/char/1.cc: Same.\n\t* testsuite/lib/libstdc++.exp (v3-build_support): Add\n\ttestsuite_character.cc.\n\t* testsuite/Makefile.am (libv3test_a_SOURCES): Add\n\ttestsuite_character.cc.\n\t* testsuite/Makefile.in: Regenerate.\n\n\t* configure.ac: Remove use of check_survey.\n\t* configure: Regenerate.\n\t* testsuite/Makefile.am: Remove check-script and\n\tcheck-script-install rules.\n\t* testsuite/Makefile.in: Regenerate.\n\nFrom-SVN: r97772", "tree": {"sha": "0a8b72f68f7541959d5d1339c96727feefd86e9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a8b72f68f7541959d5d1339c96727feefd86e9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/comments", "author": null, "committer": null, "parents": [{"sha": "2d6106a3ef8091bafc082cf6f00a5b69eb2fd1b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d6106a3ef8091bafc082cf6f00a5b69eb2fd1b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d6106a3ef8091bafc082cf6f00a5b69eb2fd1b5"}], "stats": {"total": 5734, "additions": 1581, "deletions": 4153}, "files": [{"sha": "b6f8fb5de5f3d2df4af64abf95203bedf4b57798", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,3 +1,56 @@\n+2005-04-06  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* docs/html/test.html: Update.\n+\t* testsuite/printnow.c: Remove.\n+\t* scripts/check_survey.in: Remove.\n+\n+\t* testsuite/abi_check.cc: To...\n+\t* testuite/testsuite_abi_check.cc: ...here.\n+\t* testsuite/libstdc++-abi/abi.exp: Change abi_check.cc to\n+\ttestsuite_abi_check.cc.\n+\n+\t* testsuite/testsuite_hooks.h: Move character related bits to...\n+\t* testsuite/testsuite_character.h: ...here.\n+\t* testsuite/testsuite_character.cc: ... and here.\n+\t* testsuite/21_strings/basic_string/inserters_extractors/pod/\n+\t10081-in.cc: Use testsuite_character.h.\n+\t* testsuite/21_strings/basic_string/inserters_extractors/pod/\n+\t10081-out.cc: Same.\n+\t* testsuite/22_locale/numpunct/members/pod/1.cc: Same.\n+\t* testsuite/22_locale/numpunct/members/pod/2.cc: Same.\n+\t* testsuite/27_io/basic_filebuf/2.cc: Same.\n+\t* testsuite/27_io/basic_fstream/2.cc: Same.\n+\t* testsuite/27_io/basic_istream/2.cc: Same.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/pod/\n+\t3983-1.cc: Same.\n+\t* testsuite/27_io/basic_istream/extractors_character/char/\n+\t9826.cc: Same.\n+\t* testsuite/27_io/basic_istream/extractors_character/pod/\n+\t3983-2.cc: Same.\n+\t* testsuite/27_io/basic_istream/extractors_other/pod/3983-3.cc: Same.\n+\t* testsuite/27_io/basic_istream/sentry/pod/1.cc: Same.\n+\t* testsuite/27_io/basic_ostream/2.cc: Same.\n+\t* testsuite/27_io/basic_ostream/sentry/pod/1.cc: Same.\n+\t* testsuite/27_io/basic_streambuf/2.cc: Same.\n+\t* testsuite/27_io/basic_stringbuf/2.cc: Same.\n+\t* testsuite/27_io/basic_stringbuf/4.cc: Same.\n+\t* testsuite/27_io/basic_stringstream/2.cc: Same.\n+\t* testsuite/27_io/fpos/1.cc: Same.\n+\t* testsuite/ext/mt_allocator/tune-1.cc: Same.\n+\t* testsuite/ext/mt_allocator/tune-2.cc: Same.\n+\t* testsuite/ext/stdio_filebuf/char/1.cc: Same.\t\n+\t* testsuite/lib/libstdc++.exp (v3-build_support): Add\n+\ttestsuite_character.cc.\n+\t* testsuite/Makefile.am (libv3test_a_SOURCES): Add\n+\ttestsuite_character.cc.\n+\t* testsuite/Makefile.in: Regenerate.\n+\t\t\n+\t* configure.ac: Remove use of check_survey.\n+\t* configure: Regenerate.\n+\t* testsuite/Makefile.am: Remove check-script and\n+\tcheck-script-install rules.\n+\t* testsuite/Makefile.in: Regenerate.\n+\n 2005-04-06  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/cpu/s390/atomicity.h (__exchange_and_add): Add \"memory\""}, {"sha": "db940b58b11b9aa2263817042e8fcb544df44a37", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated by automake 1.9.3 from Makefile.am.\n+# Makefile.in generated by automake 1.9.2 from Makefile.am.\n # @configure_input@\n \n # Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n@@ -42,20 +42,18 @@ DIST_COMMON = README $(am__configure_deps) $(srcdir)/../config.guess \\\n \t$(srcdir)/../mkinstalldirs $(srcdir)/Makefile.am \\\n \t$(srcdir)/Makefile.in $(srcdir)/config.h.in \\\n \t$(top_srcdir)/configure $(top_srcdir)/fragment.am \\\n-\t$(top_srcdir)/scripts/check_survey.in \\\n \t$(top_srcdir)/scripts/testsuite_flags.in ChangeLog acconfig.h\n subdir = .\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n-am__aclocal_m4_deps = $(top_srcdir)/../config/no-executables.m4 \\\n-\t$(top_srcdir)/../libtool.m4 $(top_srcdir)/crossconfig.m4 \\\n-\t$(top_srcdir)/linkage.m4 $(top_srcdir)/acinclude.m4 \\\n-\t$(top_srcdir)/configure.ac\n+am__aclocal_m4_deps = $(top_srcdir)/../libtool.m4 \\\n+\t$(top_srcdir)/crossconfig.m4 $(top_srcdir)/linkage.m4 \\\n+\t$(top_srcdir)/acinclude.m4 $(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\\n  configure.lineno configure.status.lineno\n CONFIG_HEADER = config.h\n-CONFIG_CLEAN_FILES = scripts/check_survey scripts/testsuite_flags\n+CONFIG_CLEAN_FILES = scripts/testsuite_flags\n depcomp =\n am__depfiles_maybe =\n SOURCES =\n@@ -377,8 +375,6 @@ $(srcdir)/config.h.in: @MAINTAINER_MODE_TRUE@ $(am__configure_deps) $(top_srcdir\n \n distclean-hdr:\n \t-rm -f config.h stamp-h1\n-scripts/check_survey: $(top_builddir)/config.status $(top_srcdir)/scripts/check_survey.in\n-\tcd $(top_builddir) && $(SHELL) ./config.status $@\n scripts/testsuite_flags: $(top_builddir)/config.status $(top_srcdir)/scripts/testsuite_flags.in\n \tcd $(top_builddir) && $(SHELL) ./config.status $@\n \n@@ -503,7 +499,7 @@ distclean-tags:\n distdir: $(DISTFILES)\n \t$(am__remove_distdir)\n \tmkdir $(distdir)\n-\t$(mkdir_p) $(distdir)/.. $(distdir)/../config $(distdir)/scripts\n+\t$(mkdir_p) $(distdir)/.. $(distdir)/scripts\n \t@srcdirstrip=`echo \"$(srcdir)\" | sed 's|.|.|g'`; \\\n \ttopsrcdirstrip=`echo \"$(top_srcdir)\" | sed 's|.|.|g'`; \\\n \tlist='$(DISTFILES)'; for file in $$list; do \\"}, {"sha": "1fbf27875a6edcc2fef38638c6284625829ce36a", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,4 +1,4 @@\n-# generated automatically by aclocal 1.9.3 -*- Autoconf -*-\n+# generated automatically by aclocal 1.9.2 -*- Autoconf -*-\n \n # Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n # Free Software Foundation, Inc.\n@@ -40,7 +40,7 @@ AC_DEFUN([AM_AUTOMAKE_VERSION], [am__api_version=\"1.9\"])\n # Call AM_AUTOMAKE_VERSION so it can be traced.\n # This function is AC_REQUIREd by AC_INIT_AUTOMAKE.\n AC_DEFUN([AM_SET_CURRENT_AUTOMAKE_VERSION],\n-\t [AM_AUTOMAKE_VERSION([1.9.3])])\n+\t [AM_AUTOMAKE_VERSION([1.9.2])])\n \n # AM_AUX_DIR_EXPAND\n \n@@ -817,7 +817,6 @@ AC_SUBST([am__tar])\n AC_SUBST([am__untar])\n ]) # _AM_PROG_TAR\n \n-m4_include([../config/no-executables.m4])\n m4_include([../libtool.m4])\n m4_include([crossconfig.m4])\n m4_include([linkage.m4])"}, {"sha": "5a394511e85f7b7ffb48d3668ed38514142fb391", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 957, "deletions": 3167, "changes": 4124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234"}, {"sha": "5df65c570bef0e949415140d3f665637aefd2f1b", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -311,7 +311,6 @@ AC_CONFIG_FILES( \\\n   Makefile \\\n   AC_FOREACH([DIR], glibcxx_SUBDIRS, [DIR/Makefile ])\n   )\n-AC_CONFIG_FILES([scripts/check_survey],[chmod +x scripts/check_survey])\n AC_CONFIG_FILES([scripts/testsuite_flags],[chmod +x scripts/testsuite_flags])\n \n dnl These commands are run at the end of config.status:"}, {"sha": "947a277b62ca30f78d38213058659891db77389d", "filename": "libstdc++-v3/docs/html/test.html", "status": "modified", "additions": 137, "deletions": 107, "changes": 244, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ftest.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ftest.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ftest.html?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -45,13 +45,16 @@ <h2>Contents</h2>\n \n <h2><a name=\"org\">Testsuite organization and naming conventions</a></h2>\n    <p>\n-      The directory <em>libsrcdir/testsuite</em> contains the test\n-      files, test harness, and utility information for verifying the\n-      correctness of C++ library on a given host. It includes the\n-      following directories, each named after a specific chapter of\n-      the C++ standard, and each containing test files or\n-      subdirectories of test files that test for that particular part\n-      of the standard.\n+      The directory <em>libsrcdir/testsuite</em> contains the\n+      individual test cases organized in sub-directories corresponding\n+      to chapters of the C++ standard (detailed below), the dejagnu\n+      test harness support files, and sources to various testsuite\n+      utilities that are packaged in a separate testing library.\n+   </p>\n+\n+   <p> All test cases for functionality required by the runtime\n+   components of the C++ standard (ISO 14882) are files within the\n+   following directories.\n    </p>\n \n    <pre>\n@@ -72,6 +75,7 @@ <h2><a name=\"org\">Testsuite organization and naming conventions</a></h2>\n    </p>\n \n    <pre>\n+tr1\t\t  Tests for components as described by the Technical Report on Standard Library Extensions (TR1).\n backward\t  Tests for backwards compatibility and deprecated features.\n demangle\t  Tests for __cxa_demangle, the IA 64 C++ ABI demangler\n ext\t\t  Tests for extensions.\n@@ -93,12 +97,12 @@ <h2><a name=\"org\">Testsuite organization and naming conventions</a></h2>\n \n    <p>\n       Within a directory that includes test files, there may be\n-      additional subdirectories, or files: this particular point is in\n-      flux. Originally, test cases were appended to one file that\n-      represented a particular section of the chapter under test, and\n-      was named accordingly. For instance, to test items related to\n-      <code> 21.3.6.1 - basic_string::find [lib.string::find]</code>\n-      in the standard, the following was used:\n+      additional subdirectories, or files.  Originally, test cases\n+      were appended to one file that represented a particular section\n+      of the chapter under test, and was named accordingly. For\n+      instance, to test items related to <code> 21.3.6.1 -\n+      basic_string::find [lib.string::find]</code> in the standard,\n+      the following was used:\n    </p>\n    <pre>\n 21_strings/find.cc\n@@ -109,10 +113,10 @@ <h2><a name=\"org\">Testsuite organization and naming conventions</a></h2>\n       functionality (like wide characters or named locales) became\n       frustrating, leading to aggressive pruning of test cases on some\n       platforms that covered up implementation errors. Now, the test\n-      suite is converging on a policy of one file, one test case,\n-      which solves the above issues and gives finer grained results\n-      and more manageable error debugging. As an example, the test case\n-      quoted above becomes:\n+      suite has a policy of one file, one test case, which solves the\n+      above issues and gives finer grained results and more manageable\n+      error debugging. As an example, the test case quoted above\n+      becomes:\n    </p>\n    <pre>\n 21_strings/basic_string/find/char/1.cc\n@@ -125,10 +129,7 @@ <h2><a name=\"org\">Testsuite organization and naming conventions</a></h2>\n \n    <p>\n       All new tests should be written with the policy of one test\n-      case, one file in mind. At some point the entire testsuite will\n-      be converted: the current status is that the 21_string,\n-      22_locale, 23_containers, 27_io, and demangle directories have all been\n-      transitioned.\n+      case, one file in mind. \n    </p>\n \n    <p>\n@@ -184,6 +185,15 @@ <h2><a name=\"org\">Testsuite organization and naming conventions</a></h2>\n       be run.\n    </p>\n </li>\n+<li>\n+   <em>thread</em>\n+   <p>\n+      This can either be a directory name or part of a longer file\n+      name, and indicates that this file, or the files within this\n+      directory are testing situations where multiple threads are\n+      being used.\n+   </p>\n+</li>\n <li>\n    <em>performance</em>\n    <p>\n@@ -197,15 +207,15 @@ <h2><a name=\"org\">Testsuite organization and naming conventions</a></h2>\n </ul>\n \n <hr />\n-<h2><a name=\"util\">Utilities: abicheck and libv3test</a></h2>\n+<h2><a name=\"util\">Utilities: abi_check and libv3test</a></h2>\n   <p>\n    The testsuite directory also contains some files that implement\n    functionality that is intended to make writing test cases easier,\n    or to avoid duplication, or to provide error checking in a way that\n    is consistent across platforms and test harnesses. A stand-alone\n    executable, called <em>abi_check</em>, and a static library called\n-   <em>libv3test</em> are constructed during the build. Both of these\n-   items are not installed, and only used during testing.\n+   <em>libv3test</em> are constructed. Both of these items are not\n+   installed, and only used during testing.\n   </p>\n \n   <p>\n@@ -214,24 +224,38 @@ <h2><a name=\"util\">Utilities: abicheck and libv3test</a></h2>\n \n   <ul>\n      <li>\n-       <em>abi_check.cc</em>\n+       <em>testsuite_abi.h</em>,\n+       <em>testsuite_abi.cc</em>,\n+       <em>testsuite_abi_check.cc</em>\n        <p>\n         Creates the executable <em>abi_check</em>.\n         Used to check correctness of symbol versioning, visibility of\n         exported symbols, and compatibility on symbols in the shared\n         library, for hosts that support this feature. More information\n-        can be found in the ABI documentation <a href=\"abi.txt\"> here</a>\n+        can be found in the ABI documentation <a href=\"abi.html\"> here</a>\n        </p>\n      </li>\n      <li>\n-       <em>testsuite_allocator.h and </em>\n+       <em>testsuite_allocator.h</em>,\n        <em>testsuite_allocator.cc</em>\n        <p>\n-        Specialized allocators that keep track of construction and destruction\n+        Contains specialized allocators that keep track of construction\n+        and destruction. Also, support for overriding global new and\n+        delete operators, including verification that new and delete\n+        are called during execution, and that allocation over max_size\n+        fails.\n        </p>\n      </li>\n      <li>\n-       <em>testsuite_hooks.h and </em>\n+       <em>testsuite_character.h</em>\n+       <p>\n+        Contains <code>std::char_traits</code> and\n+        <code>std::codecvt</code> specializations for a user-defined\n+        POD.\n+       </p>\n+     </li>\n+     <li>\n+       <em>testsuite_hooks.h</em>,\n        <em>testsuite_hooks.cc</em>\n        <p>\n        A large number of utilities, including:\n@@ -243,15 +267,30 @@ <h2><a name=\"util\">Utilities: abicheck and libv3test</a></h2>\n          <li>run_tests_wrapped_locale</li>\n          <li>run_tests_wrapped_env</li>\n          <li>try_named_locale</li>\n+         <li>try_mkfifo</li>\n+         <li>func_callback</li>\n          <li>counter</li>\n+         <li>copy_tracker</li>\n          <li>copy_constructor</li>\n          <li>assignment_operator</li>\n          <li>destructor</li>\n-         <li>copy_tracker</li>\n          <li>pod_char, pod_int and associated char_traits specializations</li>\n        </ul>\n        <p></p>\n      </li>\n+     <li>\n+       <em>testsuite_io.h</em>\n+       <p>\n+       Error, exception, and constraint checking for\n+       <code>std::streambuf, std::basic_stringbuf, std::basic_filebuf</code>.\n+       </p>\n+     </li>\n+     <li>\n+       <em>testsuite_iterators.h</em>\n+       <p>\n+       Wrappers for various iterators.\n+       </p>\n+     </li>\n      <li>\n        <em>testsuite_performance.h</em>\n        <p>\n@@ -265,13 +304,6 @@ <h2><a name=\"util\">Utilities: abicheck and libv3test</a></h2>\n       </ul>\n        <p></p> \n      </li>\n-     <li>\n-       <em>printnow.c</em>\n-       <p>\n-        A cross-platform timer for use in one of the older harnesses\n-        to determine compilation and link time.\n-       </p>\n-     </li>\n   </ul>\n \n <hr />\n@@ -407,9 +439,11 @@ <h2><a name=\"new\">How to write a new test case</a></h2>\n <hr />\n <h2><a name=\"check\">Options for running the tests</a></h2>\n \n-   <p> There are several ways to run the testsuite. There are two\n-   harnesses, one using dejagnu and one using bash. In addition, there\n-   is a special rule for checking the ABI of the shared library.\n+   <p> There are several options for running tests, including testing\n+   the regression tests, testing a subset of the regression tests,\n+   testing the performance tests, testing just compilation, testing\n+   installed tools, etc. In addition, there is a special rule for\n+   checking the exported symbols of the shared library.\n    </p>\n \n    <p>You can check the status of the build without installing it\n@@ -421,48 +455,15 @@ <h2><a name=\"check\">Options for running the tests</a></h2>\n    <p>in the <em>gccbuilddir</em> directory.</p>\n \n    <p>\n-      These commands are equivalent and will create a 'testsuite'\n-      directory underneath <em>libbuilddir</em> containing the results\n-      of the tests. Two results files will be generated: <em>\n-      libstdc++-v3.sum</em>, which is a PASS/FAIL summary for each\n+      These commands are functionally equivalent and will create a\n+      'testsuite' directory underneath <em>libbuilddir</em> containing\n+      the results of the tests. Two results files will be generated:\n+      <em> libstdc++.sum</em>, which is a PASS/FAIL summary for each\n       test, and <em>libstdc++.log</em> which is a log of the exact\n       command line passed to the compiler, the compiler output, and\n-      the executable output (if any). In addition, four files are\n-      generated that determine what test files are run. These files\n-      are:\n+      the executable output (if any).\n    </p>\n \n-   <ul>\n-     <li>\n-     <em>testsuite_files </em>\n-     <p> This is a list of all the test cases that will be run. Each\n-      test case is on a separate line, given with an absolute path\n-      from the <em>libsrcdir/testsuite</em> directory.\n-     </p>\n-     </li>\n-\n-     <li>\n-     <em>testsuite_files_interactive </em>\n-     <p> This is a list of all the interactive test cases, using the\n-     same format as the file list above. These tests are not run by default.\n-     </p>\n-     </li>\n-\n-     <li>\n-     <em>testsuite_files_performance</em>\n-     <p> This is a list of all the performance test cases, using the\n-     same format as the file list above. These tests are not run by default.\n-     </p>\n-     </li>\n-\n-     <li>\n-     <em>testsuite_wchar_t </em>\n-     <p> This file indicates that the host system can run the wchar_t\n-     tests, and corresponds to the macro definition <code>\n-     _GLIBCXX_USE_WCHAR_T</code> in the file c++config.h.\n-     </p>\n-     </li>\n-    </ul>\n \n <p>\n To debug the dejagnu test harness during runs, try invoking with a\n@@ -477,10 +478,18 @@ <h2><a name=\"check\">Options for running the tests</a></h2>\n make check-target-libstdc++-v3 RUNTESTFLAGS=\"-v -v\"\n </pre>\n \n+<p> To run a subset of the library tests, try using a command like the\n+following from the <em>libbuilddir/testsuite</em> directory:\n+</p>\n+<pre>\n+runtest --tool libstdc++ normal.exp=\"`find $srcdir/17_intro -name *.cc`\"\n+</pre>\n+\n \n+<p>\n There are two ways to run on a simulator: set up DEJAGNU to point to a\n specially crafted site.exp, or pass down --target_board flags.\n-\n+</p>\n Example flags to pass down for various embedded builds are as follows:\n <pre>\n --target=powerpc-eabism (libgloss/sim)\n@@ -500,47 +509,68 @@ <h2><a name=\"check\">Options for running the tests</a></h2>\n make check-target-libstdc++-v3 RUNTESTFLAGS='--target_board \\\"unix{-mabi=32,,-mabi=64}\\\"'\n </pre>\n  \n-  <p> To run a subset of the library tests, simply edit the generated\n-  file, <em>testsuite_files </em>, to include only the files that are\n-  desired instead of all available test cases.\n-  </p>\n \n    <p> In addition, there are some testing options that are mostly of\n    interest to library maintainers and system integrators. As such,\n-   these tests may not work on all cpu and host combinations, and must\n+   these tests may not work on all cpu and host combinations, and may need to\n    be executed in the <em>libbuilddir/testsuite</em> directory.  These options\n    include, but are not necessarily limited to, the following:\n    </p>\n \n-   <p>\n-   The library can also be tested using a bash script, instead of\n-   the default dejagnu test harness.\n-   </p> \n    <pre>\n-   make check-script</pre>\n-   <p>\n-      These commands use the generated test_file lists as above, but\n-      run all the tests using both shared and static linking, and in\n-      addition provide some additional diffing of expected output\n-      files for the input/output tests. (This added diff may or may\n-      not be useful or necessary at the moment.) In addition, these\n-      tests provide size information for all the generated test cases,\n-      so that size data for new compiler or linker features can be\n-      collected. At one time timing information was attempted, so that\n-      compile speeds, link speeds, etc. could be measured, however at\n-      the moment all timing information is currently disabled.\n-   </p>\n+   make testsuite_files</pre>\n+  <p>\n+    Five files are generated that determine what test files\n+    are run. These files are:\n+  </p>\n+   <ul>\n+     <li>\n+     <em>testsuite_files </em>\n+     <p> This is a list of all the test cases that will be run. Each\n+      test case is on a separate line, given with an absolute path\n+      from the <em>libsrcdir/testsuite</em> directory.\n+     </p>\n+     </li>\n \n-   <pre>\n-   make check-script-install</pre>\n-   <p> As directly above, but tests an installed library, not the\n-      library and compiler in the build tree.\n-   </p>\n+     <li>\n+     <em>testsuite_files_interactive </em>\n+     <p> This is a list of all the interactive test cases, using the\n+     same format as the file list above. These tests are not run by default.\n+     </p>\n+     </li>\n+\n+     <li>\n+     <em>testsuite_files_performance</em>\n+     <p> This is a list of all the performance test cases, using the\n+     same format as the file list above. These tests are not run by default.\n+     </p>\n+     </li>\n+\n+     <li>\n+     <em>testsuite_thread</em>\n+     <p> This file indicates that the host system can run tests which\n+     incolved multiple threads.\n+     </p>\n+     </li>\n+\n+     <li>\n+     <em>testsuite_wchar_t</em>\n+     <p> This file indicates that the host system can run the wchar_t\n+     tests, and corresponds to the macro definition <code>\n+     _GLIBCXX_USE_WCHAR_T</code> in the file c++config.h.\n+     </p>\n+     </li>\n+    </ul>\n \n    <pre>\n    make check-abi</pre>\n    <p>The library ABI can be tested. This involves testing the shared\n-   library against an ABI-defining previous version. </p>\n+   library against an ABI-defining previous version of symbol exports. </p>\n+\n+  <pre>\n+   make check-compile</pre>\n+   <p>This rule compiles, but does not link or execute, the\n+   <em>testsuite_files</em> test cases and displays the output on stdout.</p>\n \n    <pre>\n    make check-performance</pre>"}, {"sha": "522b8f2d8490ffc5da6f62ae26239f99c6c84ee8", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated by automake 1.9.3 from Makefile.am.\n+# Makefile.in generated by automake 1.9.2 from Makefile.am.\n # @configure_input@\n \n # Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n@@ -40,10 +40,9 @@ DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \\\n \t$(top_srcdir)/fragment.am\n subdir = include\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n-am__aclocal_m4_deps = $(top_srcdir)/../config/no-executables.m4 \\\n-\t$(top_srcdir)/../libtool.m4 $(top_srcdir)/crossconfig.m4 \\\n-\t$(top_srcdir)/linkage.m4 $(top_srcdir)/acinclude.m4 \\\n-\t$(top_srcdir)/configure.ac\n+am__aclocal_m4_deps = $(top_srcdir)/../libtool.m4 \\\n+\t$(top_srcdir)/crossconfig.m4 $(top_srcdir)/linkage.m4 \\\n+\t$(top_srcdir)/acinclude.m4 $(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n CONFIG_HEADER = $(top_builddir)/config.h"}, {"sha": "2052d23e510e77169546c5cd501897a554edc62b", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated by automake 1.9.3 from Makefile.am.\n+# Makefile.in generated by automake 1.9.2 from Makefile.am.\n # @configure_input@\n \n # Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n@@ -42,10 +42,9 @@ target_triplet = @target@\n subdir = libmath\n DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n-am__aclocal_m4_deps = $(top_srcdir)/../config/no-executables.m4 \\\n-\t$(top_srcdir)/../libtool.m4 $(top_srcdir)/crossconfig.m4 \\\n-\t$(top_srcdir)/linkage.m4 $(top_srcdir)/acinclude.m4 \\\n-\t$(top_srcdir)/configure.ac\n+am__aclocal_m4_deps = $(top_srcdir)/../libtool.m4 \\\n+\t$(top_srcdir)/crossconfig.m4 $(top_srcdir)/linkage.m4 \\\n+\t$(top_srcdir)/acinclude.m4 $(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n CONFIG_HEADER = $(top_builddir)/config.h"}, {"sha": "53b4083866e8cd5c2c63111d98f865ff53013721", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated by automake 1.9.3 from Makefile.am.\n+# Makefile.in generated by automake 1.9.2 from Makefile.am.\n # @configure_input@\n \n # Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n@@ -44,10 +44,9 @@ DIST_COMMON = $(glibcxxinstall_HEADERS) $(srcdir)/Makefile.am \\\n \t$(srcdir)/Makefile.in $(top_srcdir)/fragment.am\n subdir = libsupc++\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n-am__aclocal_m4_deps = $(top_srcdir)/../config/no-executables.m4 \\\n-\t$(top_srcdir)/../libtool.m4 $(top_srcdir)/crossconfig.m4 \\\n-\t$(top_srcdir)/linkage.m4 $(top_srcdir)/acinclude.m4 \\\n-\t$(top_srcdir)/configure.ac\n+am__aclocal_m4_deps = $(top_srcdir)/../libtool.m4 \\\n+\t$(top_srcdir)/crossconfig.m4 $(top_srcdir)/linkage.m4 \\\n+\t$(top_srcdir)/acinclude.m4 $(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n CONFIG_HEADER = $(top_builddir)/config.h"}, {"sha": "ecd4c8b44af60952159f0285c1b074fe417c3fa4", "filename": "libstdc++-v3/po/Makefile.in", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated by automake 1.9.3 from Makefile.am.\n+# Makefile.in generated by automake 1.9.2 from Makefile.am.\n # @configure_input@\n \n # Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n@@ -40,10 +40,9 @@ DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \\\n \t$(top_srcdir)/fragment.am\n subdir = po\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n-am__aclocal_m4_deps = $(top_srcdir)/../config/no-executables.m4 \\\n-\t$(top_srcdir)/../libtool.m4 $(top_srcdir)/crossconfig.m4 \\\n-\t$(top_srcdir)/linkage.m4 $(top_srcdir)/acinclude.m4 \\\n-\t$(top_srcdir)/configure.ac\n+am__aclocal_m4_deps = $(top_srcdir)/../libtool.m4 \\\n+\t$(top_srcdir)/crossconfig.m4 $(top_srcdir)/linkage.m4 \\\n+\t$(top_srcdir)/acinclude.m4 $(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n CONFIG_HEADER = $(top_builddir)/config.h"}, {"sha": "217356639fc080df6c068c323614378d3139c5a8", "filename": "libstdc++-v3/scripts/check_survey.in", "status": "removed", "additions": 0, "deletions": 449, "changes": 449, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d6106a3ef8091bafc082cf6f00a5b69eb2fd1b5/libstdc%2B%2B-v3%2Fscripts%2Fcheck_survey.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d6106a3ef8091bafc082cf6f00a5b69eb2fd1b5/libstdc%2B%2B-v3%2Fscripts%2Fcheck_survey.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fscripts%2Fcheck_survey.in?ref=2d6106a3ef8091bafc082cf6f00a5b69eb2fd1b5", "patch": "@@ -1,449 +0,0 @@\n-#!/usr/bin/env bash\n-\n-# Script to do automated testing and data collection for various test\n-# files, so that we don't have to do this by hand on every test file.\n-# It attempts to collect some diagnostic info about size and speed that\n-# should be useful in the future as the library gets tuned for size\n-# and speed.  In addition, it tests static and shared linkage, iff each\n-# has been enabled.\n-\n-# Invocation \n-# check_survey [01] \n-\n-# 1: variables\n-#\n-# WHICH determines if you are\n-# (0) testing the build binary and headers, or\n-# (1) testing the installed binary and headers, or\n-WHICH=$1\n-if [ \"$WHICH\"x = 0x ]; then\n-  echo \"running check_survey\"\n-  echo \"$0: testing the build directory\"\n-elif [ \"$WHICH\"x = 1x ]; then\n-  echo \"running check_survey\"\n-  echo \"$0: testing the install directory\"\n-else\n-  echo 'Usage: check_survey 0    /* test the build directory    */'\n-  echo '       check_survey 1    /* test the install directory  */'\n-  exit 1;\n-fi\n-\n-# Now that we've successfully translated the numerical option into\n-# a symbolic one, we can safely ignore it.\n-shift\n-\n-# This has been true all along.  Found out about it the hard way...\n-case $BASH_VERSION in\n-    1*)  echo 'You need bash 2.x to run check_survey.  Exiting.'; exit 1 ;;\n-    *)   ;;   # ??\n-esac\n-\n-BUILD_DIR=@glibcxx_builddir@\n-SRC_DIR=@glibcxx_srcdir@\n-PREFIX_DIR=@glibcxx_prefixdir@\n-if [ \"$WHICH\"x = 0x ]; then\n-  CXX=`$BUILD_DIR/scripts/testsuite_flags --build-cxx`\n-  INCLUDES=`$BUILD_DIR/scripts/testsuite_flags --build-includes`\n-else\n-  CXX=`$BUILD_DIR/scripts/testsuite_flags --install-cxx`\n-  INCLUDES=`$BUILD_DIR/scripts/testsuite_flags --install-includes`\n-fi\n-CXXFLAGS=`$BUILD_DIR/scripts/testsuite_flags --cxxflags`\n-LIBTOOL=\"$BUILD_DIR/libtool\"\n-LTEXE=\"$LIBTOOL --mode=execute\"\n-LTCXX=\"$CXX $CXXFLAGS $INCLUDES\"\n-\n-# specific libtool flag(s) to use shared libraries, if any\n-SH_FLAG=\"-Wl,--rpath -Wl,$BUILD_DIR/../../gcc -Wl,--rpath -Wl,$BUILD_DIR/src/.libs\"\n-\n-# specific libtool flag(s) to use static libraries, if any\n-ST_FLAG=\"-static\"\n-\n-# Set up the testing directory, which should be in a directory called\n-# \"testsuite\" in the root level of the build directory.\n-TEST_DIR=\"$BUILD_DIR/testsuite\"\n-# help libtool keep quiet\n-if [ ! -d ${TEST_DIR}/.libs ]; then\n-    mkdir $TEST_DIR/.libs    \n-fi\n-\n-# the name of the file that will collect and hold all this useful data:\n-RESULTS_FILE=\"$TEST_DIR/$(date +%Y%m%d)-check_survey.txt\"\n-\n-# the name of the log file that will append compiler diagnostics:\n-LOG_FILE=\"$TEST_DIR/$(date +%Y%m%d)-check_survey_log.txt\"\n-\n-#\n-# 2: clean, make files, append general test info\n-#\n-\n-# Remove old executables.\n-rm -rf \"$TEST_DIR\"/*exe\n-rm -rf \"$TEST_DIR\"/compile.out\n-\n-# Remove old core files (which now get left in cwd, not $TEST_DIR).\n-rm -rf ./*core*\n-\n-if [ -f $RESULTS_FILE ]; then\n-    rm $RESULTS_FILE\n-fi\n-if [ -f $LOG_FILE ]; then\n-    rm $LOG_FILE\n-fi\n-\n-# the names of the specific test files to be run\n-TESTS_FILE=\"$TEST_DIR/$(date +%Y%m%d)-check_survey_files.txt\"\n-\n-# Make a list of the files we're going to run, or use an old one if it exists.\n-if [ ! -f \"$TESTS_FILE\" ]; then\n-  if [ -f \"$TEST_DIR/testsuite_files\" ]; then\n-      cp $TEST_DIR/testsuite_files $TESTS_FILE\n-  else\n-    echo \"making file $TESTS_FILE\"\n-    for LONG_NAME in $SRC_DIR/testsuite/*/*.cc\n-    do\n-        DIR_NAME=$(dirname $LONG_NAME)\n-        SHORT_NAME=\"`basename $DIR_NAME`/`basename $LONG_NAME`\"\n-        echo \"$SHORT_NAME\" >> $TESTS_FILE\n-    done\n-  fi\n-fi\n-\n-# Nasty solution to replace GNU date(1)'s %s time_t output function.\n-TIMER_COMMAND=$TEST_DIR/printnow.exe\n-if [ ! -x \"$TIMER_COMMAND\" ]; then\n-    echo \"making utility $TIMER_COMMAND\"\n-    gcc -o \"$TIMER_COMMAND\" \"$SRC_DIR/testsuite/printnow.c\"\n-    strip \"$TIMER_COMMAND\"\n-fi\n-\n-# Copy over the data files for filebufs\n-cp $SRC_DIR/testsuite/27_io/*.txt $TEST_DIR\n-cp $SRC_DIR/testsuite/27_io/*.tst $TEST_DIR\n-chmod u+w $TEST_DIR/*.txt\n-chmod u+w $TEST_DIR/*.tst\n-\n-# Emit useful info about compiler and platform\n-echo \"host: $(uname -mrsv)\" >> $RESULTS_FILE\n-echo \"compiler: $($CXX -v 2>&1)\" >> $RESULTS_FILE\n-echo \"compiler flags: $CXXFLAGS\" >> $RESULTS_FILE\n-echo \"date: $(date +%Y%m%d)\" >> $RESULTS_FILE\n-echo \"\" >> $RESULTS_FILE\n-\n-explanation='+: pass, -b: build failure, -r: run failure, x: disabled'\n-printf \"%s\\n     %s\\n\"  'p == pass/fail execution test'  \"$explanation\"  \\\n-       >> $RESULTS_FILE\n-echo \"ctime == time to compile and link\" >> $RESULTS_FILE\n-echo \"etime == time for executable to run\" >> $RESULTS_FILE\n-echo \"text == size of the executable text section\" >> $RESULTS_FILE\n-echo \"data == size of the executable data section\" >> $RESULTS_FILE\n-echo \"total == size of the executable\" >> $RESULTS_FILE\n-echo \"\" >> $RESULTS_FILE\n-\n-echo \"p\" | awk '{printf(\"%s \", $1)}' >> $RESULTS_FILE\n-echo \"ctime\" \"etime\" | awk '{printf(\"%s\\t%s\\t\", $1, $2)}' >> $RESULTS_FILE\n-echo \"text\" \"data\" | awk '{printf(\"%s\\t%s\\t\", $1, $2)}' >> $RESULTS_FILE\n-echo \"total\" \"name\" | awk '{printf(\"%s\\t%s\\t\", $1, $2)}' >> $RESULTS_FILE\n-echo \"\" >> $RESULTS_FILE\n-\n-# Counters.  These could be members of an array, but they'd all have to\n-# become individuals anyhow if we ever change this script to super-portable sh.\n-shared_pass=0\n-shared_fail=0\n-static_pass=0\n-static_fail=0\n-\n-\n-#\n-# 2.5:  support functions\n-#\n-\n-# Figure out how to extract size information from binaries.  We take\n-# the text of the value we want as an argument, and leave the size in\n-# the appropriate variable.\n-#\n-# We discover what kind of size(1) we are using *once* and build a shell\n-# function named 'size_command' to wrap it.  (The \"function\" keyword is\n-# redundant here, but helps me read it, so there.)  Previously we were\n-# re-discovering the size(1) arguments three times for each test; sloooow.\n-#\n-# It is VERY IMPORTANT not to compare these numbers across platforms.\n-# Different size(1)'s extract section information differently.  For\n-# example, using the native Sun size(1) and GNU size(1) built for Suns\n-# on the exact same binary will give very different numbers, due to all\n-# the variance in command-line options and arbitrary names of ELF sections.\n-#\n-# and suddenly we go to 2-space indentations...\n-setup_size_command()\n-{\n-  if size --version 2> /dev/null | grep -c GNU > /dev/null;\n-  then    # Then we're using a GNU size(1) built for this platform.\n-    # We lose .rodata and .data1 and who knows what else... kludge.\n-    function size_command()\n-    {\n-      case $1 in\n-        TEXT)  TEXT=$(size -B $EXENAME | tail -1 | awk '{print $1}')  ;;\n-        DATA)  DATA=$(size -B $EXENAME | tail -1 | awk '{print $2}')  ;;\n-        SIZE)  SIZE=$(size -B $EXENAME | tail -1 | awk '{print $4}')  ;;\n-      esac\n-    }\n-  else\n-    # Not using GNU size; check for platform.  These numbers seem to match\n-    # up to text/data/total, although their meanings seem to be different.\n-    # THIS TABLE IS SORTED.  KEEP IT THAT WAY.\n-    case @host_os@ in\n-      *aix*)\n-        function size_command()\n-        {\n-          case $1 in\n-            TEXT)  TEXT=$(size -X32_64 $EXENAME | awk '{print $2}')  ;;\n-            DATA)  DATA=$(size -X32_64 $EXENAME | awk '{print $4}')  ;;\n-            SIZE)  SIZE=$(size -X32_64 $EXENAME | awk '{print $12}')  ;;\n-          esac\n-        }\n-        ;;\n-      *hpux*)\n-        function size_command()\n-        {\n-          case $1 in\n-            TEXT)  TEXT=$(size  $EXENAME | awk '{print $1}')  ;;\n-            DATA)  DATA=$(size  $EXENAME | awk '{print $3}')  ;;\n-            SIZE)  SIZE=$(size  $EXENAME | awk '{print $7}')  ;;\n-          esac\n-        }\n-        ;;\n-      *irix*)\n-        function size_command()\n-        {\n-          case $1 in\n-            TEXT)  TEXT=$(size -4 $EXENAME | awk '{print $1}')  ;;\n-            DATA)  DATA=$(size -4 $EXENAME | awk '{print $3}')  ;;\n-            SIZE)  SIZE=$(size -4 $EXENAME | awk '{print $7}')  ;;\n-          esac\n-        }\n-        ;;\n-      *solaris*)\n-        function size_command()\n-        {\n-          case $1 in\n-            TEXT)  TEXT=$(size $EXENAME | awk '{print $1}')  ;;\n-            DATA)  DATA=$(size $EXENAME | awk '{print $3}')  ;;\n-            SIZE)  SIZE=$(size $EXENAME | awk '{print $7}')  ;;\n-          esac\n-        }\n-        ;;\n-      *)\n-        echo ' * Warning!  Skipping section sizes!' 1>&2\n-        function size_command()\n-        {\n-        case $1 in\n-          TEXT)  TEXT=0 ;;\n-          DATA)  DATA=0 ;;\n-          SIZE)  SIZE=0 ;;\n-        esac\n-        }\n-        ;;\n-    esac\n-  fi\n-}\n-\n-# Test for file output\n-test_for_output()\n-{\n-    # This checks for emitted output files, which is useful when\n-    # testing file-related output.  The rules for this working are as\n-    # follows: the emitted file must have the \".txt\" extension, and be\n-    # based on the actual *.cc file's name.  For example, 27/filbuf.cc\n-    # currently outputs files named 27/filebuf-2.txt and 27/filebuf-3.txt.\n-    # Also, the first emitted file must be in the form $NAME-1.txt.\n-    # The control file must follow the same constraints, but have a\n-    # \".tst\" extension.  Thus, you have 27/filebuf-2.tst, etc.\n-\n-    # NAME contains the source name, like 27/filebuf.cc\n-    # From that NAME, we want to generate some possible names, using\n-    # ls on MATCH, a pattern description generated with sed.\n-\n-    # this is the name of the resulting diff file, if any\n-    DIFF_FILE=\"`echo $TEST_NAME | sed 's/cc$/diff/'`\"\n-    # construct wildcard names, ie for $NAME=filebuf.cc, makes \"filebuf*.tst\"\n-    DATA_FILES=\"`echo $TEST_NAME | sed 's/\\.cc/\\*\\.tst/g'`\"\n-    # make sure there is at least one, then go\n-    ST_E=\"`echo $TEST_NAME | sed 's/\\.cc/\\-1\\.tst/g'`\"\n-    if [ -f $ST_E ]; then\n-        # list of actual files that match the wildcard above, ie\n-        # \"filebuf-1.tst\"\n-        ST_MATCH_LIST=\"`ls $DATA_FILES`\"\n-        for i in $ST_MATCH_LIST; do\n-            # ST_OUT_FILE is generated in the build directory.\n-            PRE_NAME2=\"$TEST_DIR/`basename $i`\"\n-            ST_OUT_FILE=\"`echo $PRE_NAME2 | sed 's/tst$/txt/'`\"\n-            diff $ST_OUT_FILE $i > $DIFF_FILE\n-            if [ -s $DIFF_FILE ]; then\n-                RESULT=\"-r\"\n-            else\n-                RESULT=\"+\"\n-            fi\n-            rm $DIFF_FILE\n-        done\n-    else\n-        # the file does no output, and didn't abnormally\n-        # terminate, so assume passed.\n-        RESULT=\"+\"\n-    fi\n-}\n-    \n-\n-#\n-# 3: compile, link, execute, time\n-#\n-# Abstract out the common code for compiling, linking, executing and printing.\n-test_file()\n-{\n-    # NB: S_FLAG has to be last argument because it may be null, and\n-    # error checking hasn't been invented yet.\n-    NAME=$1\n-    EXENAME=$2\n-    S_FLAG=$3\n-\n-    SRC_NAME=\"$SRC_DIR/testsuite/$1\"\n-    TEST_NAME=\"$TEST_DIR/`basename $NAME`\"\n-\n-    # This would be deliciously easy if GNU date's %s were always around.\n-    # There are three ways to do this:  1) use the builtin 'time' like we\n-    # do later; then getting compiler errors into LOG_FILE is a nightmare.\n-    # 2) Grab the output of a formatted date(1) and do the math; harder\n-    # and harder as we try compiling at, say, top of the hour; we would\n-    # eventually have to calculate time_t anyhow.  Or 3) just grab two\n-    # time_t's (no more overhead than grabbing two date(1)'s).\n-    our_libs=\"-L$TEST_DIR -lv3test\"\n-    compiler_invocation=\"$LTCXX $S_FLAG $SRC_NAME -o $EXENAME $our_libs\"\n-    echo $compiler_invocation >> compile.out 2>&1\n-    COMP_TIME_START=$($TIMER_COMMAND)\n-    $compiler_invocation >> compile.out 2>&1\n-    COMP_TIME_END=$($TIMER_COMMAND)\n-\n-    if [ $COMP_TIME_START -lt $COMP_TIME_END ]; then\n-        C_TIME=$[ $COMP_TIME_END - $COMP_TIME_START ]\n-    else\n-        C_TIME=\"0\"\n-    fi\n-\n-    if [ -f $EXENAME ]; then\n-#        rm compile.out\n-        size_command TEXT\n-        size_command DATA\n-        size_command SIZE\n-\n-        # Actually run the executable and time it.  Note that output\n-        # printed by the executable will be lost and cannot be redirected,\n-        # because we need to capture the output of 'time'.  Bummer.\n-        TIMEFORMAT='timemark %R'\n-        E_TIME_TEXT=\"$(exec 2>&1; time $LTEXE $EXENAME)\"\n-        E_ABNORMAL_TERMINATION=$?\n- \n-        if [ \"$E_ABNORMAL_TERMINATION\" -ne 0 ]; then\n-            RESULT='-r'\n-\t    E_TIME=\"0\"\n-            rm -f ./*core\n-            # sometimes you want to save all core files for review:\n-            #mv ./core $EXENAME.core\n-            # sometimes the OS allows you to name core files yourself:\n-            #mv ./*core $EXENAME.core\n-            #mv ./core* $EXENAME.core\n-        else\n-            test_for_output\n-\t    # XXX This doesn't always result in a number.\n-\t    # E_TIME=\"$(echo $E_TIME_TEXT | awk '{print $2}')\"\n-\t    E_TIME=\"0\"\n-        fi\n-\n-        # sometimes you want to save all failing exe files for review:\n-        if [ \"$RESULT\" = '+' ]; then\n-            rm \"$EXENAME\"\n-        fi\n-    else\n-        # the file did not compile/link.\n-        printf \"\\n\" >> $LOG_FILE\n-        `cat compile.out >> $LOG_FILE` \n-        rm compile.out\n-        RESULT=\"-b\"\n-        TEXT=\"0\"\n-        DATA=\"0\"\n-        SIZE=\"0\"\n-    fi\n-\n-    # update the counters\n-    if test \"$RESULT\" = \"+\" ; then\n-        if test x\"$S_FLAG\" = x\"$ST_FLAG\"; then\n-            static_pass=`expr $static_pass + 1`\n-        else\n-            shared_pass=`expr $shared_pass + 1`\n-        fi\n-    else\n-        if test x\"$S_FLAG\" = x\"$ST_FLAG\"; then\n-            static_fail=`expr $static_fail + 1`\n-        else\n-            shared_fail=`expr $shared_fail + 1`\n-        fi\n-    fi\n-\n-    printf \"%s\\t\" \"$RESULT\"\n-    printf \"%-2s %d\\t%.3f\\t%s\\t%s\\t%s\\t%s %s\\n\"   \\\n-        \"$RESULT\" $C_TIME $E_TIME $TEXT $DATA $SIZE $NAME >> $RESULTS_FILE\n-}\n-\n-setup_size_command\n-echo \"\"\n-echo \"Detailed test results in .${RESULTS_FILE/$BUILD_DIR}\"\n-echo $explanation\n-echo \"------------------------------------------------------------------------\"\n-printf \"static\\tshared\\ttest\\n\"\n-echo \"------------------------------------------------------------------------\"\n-\n-TEST_TIME_START=$($TIMER_COMMAND)\n-for NAME in `cat $TESTS_FILE`\n-do\n-    PRE_NAME=\"$TEST_DIR/`basename $NAME`\"\n-    ST_NAME=\"`echo $PRE_NAME | sed 's/cc$/st-exe/'`\"\n-    SH_NAME=\"`echo $PRE_NAME | sed 's/cc$/sh-exe/'`\"\n-\n-    if test @enable_static@ = yes; then\n-        test_file $NAME $ST_NAME \"$ST_FLAG\"\n-    else\n-        printf \"x\\t\"\n-        printf \"static skipped\\n\" >> $RESULTS_FILE\n-    fi\n-    if test @enable_shared@ = yes; then\n-        test_file $NAME $SH_NAME \"$SH_FLAG\"\n-    else\n-        printf \"x\\t\"\n-        printf \"shared skipped\\n\" >> $RESULTS_FILE\n-    fi\n-    printf \"%s\\n\" \"$NAME\"\n-\n-    echo \"\" >> $RESULTS_FILE\n-done\n-TEST_TIME_END=$($TIMER_COMMAND)\n-\n-\n-#\n-# 4: summary\n-#\n-# grep can count faster than we can...\n-total_failures=`expr ${shared_fail} + ${static_fail}`\n-total_successes=`expr ${shared_pass} + ${static_pass}`\n-resultstext=\"pass/fail results:  ${static_pass}/${static_fail} static + ${shared_pass}/${shared_fail} shared = ${total_successes}/${total_failures} total\"\n-if [ $total_failures -eq 0 ]; then\n-    resultstext=\"${resultstext}, WIN WIN\"\n-fi\n-sed -e \"/^date:/a\\\\\n-$resultstext\" $RESULTS_FILE > ${RESULTS_FILE}.tmp\n-mv ${RESULTS_FILE}.tmp $RESULTS_FILE\n-\n-if [ $TEST_TIME_START -lt $TEST_TIME_END ]; then\n-    TEST_TIME=$[ $TEST_TIME_END - $TEST_TIME_START ]\n-    echo \"testrun == $TEST_TIME seconds\"\n-    echo \"testrun == $TEST_TIME seconds\" >> $RESULTS_FILE\n-fi\n-\n-exit 0"}, {"sha": "726b234ee4be631a6e4214d6975176e04b671631", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated by automake 1.9.3 from Makefile.am.\n+# Makefile.in generated by automake 1.9.2 from Makefile.am.\n # @configure_input@\n \n # Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n@@ -42,10 +42,9 @@ DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \\\n \t$(top_srcdir)/fragment.am\n subdir = src\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n-am__aclocal_m4_deps = $(top_srcdir)/../config/no-executables.m4 \\\n-\t$(top_srcdir)/../libtool.m4 $(top_srcdir)/crossconfig.m4 \\\n-\t$(top_srcdir)/linkage.m4 $(top_srcdir)/acinclude.m4 \\\n-\t$(top_srcdir)/configure.ac\n+am__aclocal_m4_deps = $(top_srcdir)/../libtool.m4 \\\n+\t$(top_srcdir)/crossconfig.m4 $(top_srcdir)/linkage.m4 \\\n+\t$(top_srcdir)/acinclude.m4 $(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n CONFIG_HEADER = $(top_builddir)/config.h"}, {"sha": "69ab1e9b46249910bfcab750d0b2484043662fd9", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/pod/10081-in.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fpod%2F10081-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fpod%2F10081-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fpod%2F10081-in.cc?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,6 +32,7 @@\n #include <sstream>\n #include <locale>\n #include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n \n void test01()\n {"}, {"sha": "35ee3609e6a2bc05d66a692ebbb9a5939f6aebe9", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/pod/10081-out.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fpod%2F10081-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fpod%2F10081-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fpod%2F10081-out.cc?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,6 +32,7 @@\n #include <sstream>\n #include <locale>\n #include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n \n void test01()\n {"}, {"sha": "1410b959fe95aca1412eb0b9ca3eef934ce80aef", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/members/pod/1.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fpod%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fpod%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fpod%2F1.cc?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,6 +1,6 @@\n // 2003-07-09  Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,9 +22,8 @@\n #include <sstream>\n #include <ostream>\n #include <stdexcept>\n-#include <ext/pod_char_traits.h>\n #include <testsuite_hooks.h>\n-\n+#include <testsuite_character.h>\n \n // Check for numpunct and ctype dependencies. Make sure that numpunct\n // can be created without ctype."}, {"sha": "d0d380cd2d4aad0ef0d88e8db30cf71b62772739", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/members/pod/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fpod%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fpod%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fpod%2F2.cc?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,6 +1,6 @@\n // 2003-07-09  Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,8 +22,8 @@\n #include <sstream>\n #include <ostream>\n #include <stdexcept>\n-#include <ext/pod_char_traits.h>\n #include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n \n // Check for numpunct and ctype dependencies. Make sure that numpunct\n // can be created without ctype."}, {"sha": "06dfd3ff3df01fa4fa4cdd3e4a00468dd5c668dd", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2F2.cc?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,6 +1,6 @@\n // 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -24,6 +24,7 @@\n \n #include <fstream>\n #include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n \n // { dg-do compile }\n "}, {"sha": "b4710c8f8859badbd0ce745d55a2904d7f005370", "filename": "libstdc++-v3/testsuite/27_io/basic_fstream/2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2F2.cc?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,6 +1,6 @@\n // 2002-07-25 Benjamin Kosnik <bkoz@redhat.com>\n \n-// Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,6 +32,7 @@\n \n #include <fstream>\n #include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n \n // { dg-do compile }\n "}, {"sha": "a35ed0be374d4c97e603041ac1774e2b8ea3bdf6", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2F2.cc?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,6 +1,6 @@\n // 1999-09-20 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -33,6 +33,7 @@\n \n #include <istream>\n #include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n \n // { dg-do compile }\n "}, {"sha": "b0a34028a9282cd672d4c5f7baa3ebe4c8ebdfd0", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/pod/3983-1.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fpod%2F3983-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fpod%2F3983-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fpod%2F3983-1.cc?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,6 +1,6 @@\n // 2001-06-05 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,6 +32,7 @@\n #include <sstream>\n #include <typeinfo>\n #include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n \n // libstdc++/3983\n // Sentry uses locale info, so have to try one formatted input/output."}, {"sha": "8628c1cd2118d849084bc4782606f2a639bf9a92", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/char/9826.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F9826.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F9826.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F9826.cc?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,6 +1,6 @@\n // 2002-07-25 Benjamin Kosnik <bkoz@redhat.com>\n \n-// Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,6 +32,7 @@\n \n #include <sstream>\n #include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n \n // { dg-do compile }\n "}, {"sha": "749cba8bd8177430ee50f4179944fe936b323e54", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/pod/3983-2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fpod%2F3983-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fpod%2F3983-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fpod%2F3983-2.cc?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,6 +1,6 @@\n // 2001-06-05 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,6 +32,7 @@\n #include <sstream>\n #include <typeinfo>\n #include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n \n // libstdc++/3983\n // Sentry uses locale info, so have to try one formatted input/output."}, {"sha": "0f23cf16a23010d8ffd3af1408e1eb0458b18c13", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/pod/3983-3.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fpod%2F3983-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fpod%2F3983-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fpod%2F3983-3.cc?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,6 +1,6 @@\n // 2001-06-05 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,6 +32,7 @@\n #include <sstream>\n #include <typeinfo>\n #include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n \n // libstdc++/3983\n // Sentry uses locale info, so have to try one formatted input/output."}, {"sha": "603d61d635bc7c9f7ed6d76d198426fd38d89719", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/sentry/pod/1.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fpod%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fpod%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fpod%2F1.cc?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,6 +1,6 @@\n // 1999-10-14 bkoz\n \n-// Copyright (C) 1999, 2001, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2001, 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,6 +33,7 @@\n #include <sstream>\n #include <ext/pod_char_traits.h>\n #include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n \n void test01()\n {"}, {"sha": "a75de6b8f9843655f8a19a34e40b88f79d109392", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2F2.cc?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,6 +1,6 @@\n // 1999-09-20 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -33,6 +33,7 @@\n \n #include <ostream>\n #include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n \n // { dg-do compile }\n "}, {"sha": "d83293fe9665e849b79e2ce42658ae2e53e0e43f", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/sentry/pod/1.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fsentry%2Fpod%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fsentry%2Fpod%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fsentry%2Fpod%2F1.cc?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,6 +1,6 @@\n // 1999-10-14 bkoz\n \n-// Copyright (C) 1999, 2001, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2001, 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,6 +33,7 @@\n #include <sstream>\n #include <ext/pod_char_traits.h>\n #include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n \n void test01()\n {"}, {"sha": "de2930f166b752791076a901659be79d53d761d4", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2F2.cc?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,6 +1,6 @@\n // 2002-07-25 Benjamin Kosnik <bkoz@redhat.com>\n \n-// Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,6 +32,7 @@\n \n #include <streambuf>\n #include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n \n // { dg-do compile }\n "}, {"sha": "c61449943c3319216abbadac805b62fe50819c8e", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2F2.cc?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,6 +1,6 @@\n // 1999-01-17 bkoz test functionality of basic_filebuf for char_type == char\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -24,6 +24,7 @@\n \n #include <sstream>\n #include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n \n // { dg-do compile }\n "}, {"sha": "a7c41b9e02c45f57127d6d42e06f08f03c195afa", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/4.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2F4.cc?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,6 +1,6 @@\n // 2003-04-07 bkoz\n \n-// Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -24,6 +24,7 @@\n #include <sstream>\n #include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n+#include <testsuite_character.h>\n \n // { dg-do compile }\n "}, {"sha": "b4696156480d3ec34bec638881fc776e02b52977", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2F2.cc?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,6 +1,6 @@\n // 2002-07-25 Benjamin Kosnik <bkoz@redhat.com>\n \n-// Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,6 +32,7 @@\n \n #include <sstream>\n #include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n \n // { dg-do compile }\n "}, {"sha": "f96a1bb0b0ebf6dc5550d5688189ad505c3877d2", "filename": "libstdc++-v3/testsuite/27_io/fpos/1.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F1.cc?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003, 2004\n+// Copyright (C) 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -22,6 +22,7 @@\n \n #include <ios>\n #include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n \n // { dg-do compile }\n "}, {"sha": "fa013b6774abe348fd4872873d264355debd0837", "filename": "libstdc++-v3/testsuite/Makefile.am", "status": "modified", "additions": 17, "deletions": 29, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,6 +1,6 @@\n ## Makefile for the testsuite subdirectory of the GNU C++ Standard library.\n ##\n-## Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+## Copyright (C) 2001, 2002, 2003, 2005 Free Software Foundation, Inc.\n ##\n ## This file is part of the libstdc++ version 3 distribution.\n ## Process this file with automake to produce Makefile.in.\n@@ -48,6 +48,7 @@ noinst_LIBRARIES = libv3test.a\n libv3test_a_SOURCES = \\\n \ttestsuite_abi.cc \\\n \ttestsuite_allocator.cc \\\n+\ttestsuite_character.cc \\\n \ttestsuite_hooks.cc \n \n all-local: stamp_wchar stamp_thread\n@@ -75,6 +76,10 @@ lists_of_files = \\\n    testsuite_files_interactive \\\n    testsuite_files_performance\n \n+# This rule generates all of the testsuite_files* lists at once.\n+${lists_of_files}:\n+\t${glibcxx_srcdir}/scripts/create_testsuite_files \\\n+\t  ${glibcxx_srcdir}/testsuite `${PWD_COMMAND}`\n \n # We need more things in site.exp, but automake completely controls the\n # creation of that file; there's no way to append to it without messing up\n@@ -103,6 +108,7 @@ site.exp: Makefile\n \t@test ! -f site.exp || mv site.exp site.bak\n \t@mv site.tmp site.exp\n \n+\n baseline_file = ${baseline_dir}/baseline_symbols.txt\n extract_symvers = $(glibcxx_srcdir)/scripts/extract_symvers\n \n@@ -133,20 +139,14 @@ else\n check-abi:\n endif\n \n-\n-# These two special 'check-script' rules use the bash script\n-# 'check_survey' to do testing. This script is not as portable as the\n-# dejagnu test harness, and is thus off by default. It does produce\n-# interesting output however, including various performance analysis\n-# items like compile time, execution time, and binary size.\n-survey_script = ${glibcxx_builddir}/scripts/check_survey\n-check-script: ${survey_script}\n-\t-@(chmod + ${survey_script}; \\\n-\t  ${survey_script} 0)\n-\n-check-script-install: ${survey_script}\n-\t-@(chmod + ${survey_script}; \\\n-\t  ${survey_script} 0)\n+# Runs the testsuite, but in compile only mode.\n+# Can be used to test sources with non-GNU FE's at various warning\n+# levels and for checking compile time across releases.\n+# See script.\n+compile_script=${glibcxx_srcdir}/scripts/check_compile\n+check-compile: testsuite_files ${compile_script}\n+\t-@(chmod + ${compile_script}; \\\n+\t  ${compile_script} ${glibcxx_srcdir} ${glibcxx_builddir})\n \n \n # Runs the testsuite/performance tests.\n@@ -158,21 +158,9 @@ check-performance: testsuite_files_performance ${performance_script}\n \t-@(chmod + ${performance_script}; \\\n \t  ${performance_script} ${glibcxx_srcdir} ${glibcxx_builddir})\n \n-# Runs the testsuite, but in compile only mode, and times it.\n-# See script.\n-compile_script=${glibcxx_srcdir}/scripts/check_compile\n-check-compile: testsuite_files ${compile_script}\n-\t-@(chmod + ${compile_script}; \\\n-\t  ${compile_script} ${glibcxx_srcdir} ${glibcxx_builddir})\n-\n-# This rule generates all of the testsuite_files* lists at once.\n-${lists_of_files}:\n-\t${glibcxx_srcdir}/scripts/create_testsuite_files \\\n-\t  ${glibcxx_srcdir}/testsuite `${PWD_COMMAND}`\n-\n \n-.PHONY: baseline_symbols new-abi-baseline check-abi check-abi-verbose \\\n-check-script check-script-install check-performance\n+.PHONY: baseline_symbols new-abi-baseline \\\n+\tcheck-abi check-compile check-performance\n \n # By adding these files here, automake will remove them for 'make clean'\n CLEANFILES = *.txt *.tst *.exe core* filebuf_* tmp* ostream_* *.log *.sum \\"}, {"sha": "9884f9e1b7ea88653de62faaf84f5fa387c33d03", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 22, "deletions": 33, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated by automake 1.9.3 from Makefile.am.\n+# Makefile.in generated by automake 1.9.2 from Makefile.am.\n # @configure_input@\n \n # Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n@@ -43,10 +43,9 @@ DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \\\n \t$(top_srcdir)/fragment.am\n subdir = testsuite\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n-am__aclocal_m4_deps = $(top_srcdir)/../config/no-executables.m4 \\\n-\t$(top_srcdir)/../libtool.m4 $(top_srcdir)/crossconfig.m4 \\\n-\t$(top_srcdir)/linkage.m4 $(top_srcdir)/acinclude.m4 \\\n-\t$(top_srcdir)/configure.ac\n+am__aclocal_m4_deps = $(top_srcdir)/../libtool.m4 \\\n+\t$(top_srcdir)/crossconfig.m4 $(top_srcdir)/linkage.m4 \\\n+\t$(top_srcdir)/acinclude.m4 $(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n CONFIG_HEADER = $(top_builddir)/config.h\n@@ -56,7 +55,8 @@ ARFLAGS = cru\n libv3test_a_AR = $(AR) $(ARFLAGS)\n libv3test_a_LIBADD =\n am_libv3test_a_OBJECTS = testsuite_abi.$(OBJEXT) \\\n-\ttestsuite_allocator.$(OBJEXT) testsuite_hooks.$(OBJEXT)\n+\ttestsuite_allocator.$(OBJEXT) testsuite_character.$(OBJEXT) \\\n+\ttestsuite_hooks.$(OBJEXT)\n libv3test_a_OBJECTS = $(am_libv3test_a_OBJECTS)\n DEFAULT_INCLUDES = \n depcomp =\n@@ -280,6 +280,7 @@ noinst_LIBRARIES = libv3test.a\n libv3test_a_SOURCES = \\\n \ttestsuite_abi.cc \\\n \ttestsuite_allocator.cc \\\n+\ttestsuite_character.cc \\\n \ttestsuite_hooks.cc \n \n \n@@ -293,23 +294,18 @@ lists_of_files = \\\n baseline_file = ${baseline_dir}/baseline_symbols.txt\n extract_symvers = $(glibcxx_srcdir)/scripts/extract_symvers\n \n-# These two special 'check-script' rules use the bash script\n-# 'check_survey' to do testing. This script is not as portable as the\n-# dejagnu test harness, and is thus off by default. It does produce\n-# interesting output however, including various performance analysis\n-# items like compile time, execution time, and binary size.\n-survey_script = ${glibcxx_builddir}/scripts/check_survey\n+# Runs the testsuite, but in compile only mode.\n+# Can be used to test sources with non-GNU FE's at various warning\n+# levels and for checking compile time across releases.\n+# See script.\n+compile_script = ${glibcxx_srcdir}/scripts/check_compile\n \n # Runs the testsuite/performance tests.\n # Some of these tests create large (~75MB) files, allocate huge\n # ammounts of memory, or otherwise tie up machine resources. Thus,\n # running this is off by default.\n performance_script = ${glibcxx_srcdir}/scripts/check_performance\n \n-# Runs the testsuite, but in compile only mode, and times it.\n-# See script.\n-compile_script = ${glibcxx_srcdir}/scripts/check_compile\n-\n # By adding these files here, automake will remove them for 'make clean'\n CLEANFILES = *.txt *.tst *.exe core* filebuf_* tmp* ostream_* *.log *.sum \\\n \t     testsuite_* site.exp abi_check baseline_symbols *TEST*\n@@ -577,6 +573,11 @@ all-local: stamp_wchar stamp_thread\n @GLIBCXX_TEST_THREAD_TRUE@\ttouch testsuite_thread\n @GLIBCXX_TEST_THREAD_FALSE@stamp_thread:\n \n+# This rule generates all of the testsuite_files* lists at once.\n+${lists_of_files}:\n+\t${glibcxx_srcdir}/scripts/create_testsuite_files \\\n+\t  ${glibcxx_srcdir}/testsuite `${PWD_COMMAND}`\n+\n # We need more things in site.exp, but automake completely controls the\n # creation of that file; there's no way to append to it without messing up\n # the dependancy chains.  So we overrule automake.  This rule is exactly\n@@ -627,27 +628,15 @@ new-abi-baseline:\n @GLIBCXX_TEST_ABI_TRUE@check-abi: baseline_symbols site.exp\n @GLIBCXX_TEST_ABI_TRUE@\t-@runtest --tool libstdc++ abi.exp\n @GLIBCXX_TEST_ABI_FALSE@check-abi:\n-check-script: ${survey_script}\n-\t-@(chmod + ${survey_script}; \\\n-\t  ${survey_script} 0)\n-\n-check-script-install: ${survey_script}\n-\t-@(chmod + ${survey_script}; \\\n-\t  ${survey_script} 0)\n-check-performance: testsuite_files_performance ${performance_script}\n-\t-@(chmod + ${performance_script}; \\\n-\t  ${performance_script} ${glibcxx_srcdir} ${glibcxx_builddir})\n check-compile: testsuite_files ${compile_script}\n \t-@(chmod + ${compile_script}; \\\n \t  ${compile_script} ${glibcxx_srcdir} ${glibcxx_builddir})\n+check-performance: testsuite_files_performance ${performance_script}\n+\t-@(chmod + ${performance_script}; \\\n+\t  ${performance_script} ${glibcxx_srcdir} ${glibcxx_builddir})\n \n-# This rule generates all of the testsuite_files* lists at once.\n-${lists_of_files}:\n-\t${glibcxx_srcdir}/scripts/create_testsuite_files \\\n-\t  ${glibcxx_srcdir}/testsuite `${PWD_COMMAND}`\n-\n-.PHONY: baseline_symbols new-abi-baseline check-abi check-abi-verbose \\\n-check-script check-script-install check-performance\n+.PHONY: baseline_symbols new-abi-baseline \\\n+\tcheck-abi check-compile check-performance\n # Tell versions [3.59,3.63) of GNU make to not export all variables.\n # Otherwise a system limit (for SysV at least) may be exceeded.\n .NOEXPORT:"}, {"sha": "b899cbd5b73cde88f2940a192ea56a7339a116e1", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/tune-1.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-1.cc?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,6 +1,6 @@\n // 2004-08-25 Benjamin Kosnik <bkoz@redhat.com>\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,9 +18,10 @@\n // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n // USA.\n \n-#include <testsuite_hooks.h>\n #include <memory>\n #include <ext/mt_allocator.h>\n+#include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n \n // Tune characteristics. \n // __common_pool_policy"}, {"sha": "19f30f25577ee66762ccea0e5055c1e7f74e2866", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/tune-2.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-2.cc?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,6 +1,6 @@\n // 2004-08-25 Benjamin Kosnik <bkoz@redhat.com>\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,9 +18,10 @@\n // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n // USA.\n \n-#include <testsuite_hooks.h>\n #include <memory>\n #include <ext/mt_allocator.h>\n+#include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n \n // Tune characteristics. \n // __per_type_pool_policy"}, {"sha": "60d3c660520625af122a5e138f2cebc75f9dbb8a", "filename": "libstdc++-v3/testsuite/ext/stdio_filebuf/char/1.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_filebuf%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_filebuf%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_filebuf%2Fchar%2F1.cc?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,6 +1,6 @@\n // 2003-02-11  Paolo Carlini  <pcarlini@unitus.it>\n \n-// Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,6 +22,7 @@\n \n #include <ext/stdio_filebuf.h>\n #include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n \n // { dg-do compile }\n "}, {"sha": "dc4c11df8e39473d961bdef13cec7f474efe8f05", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -86,7 +86,8 @@ proc libstdc++_init { testfile } {\n     global ld_library_path\n     global target_triplet\n \n-    # We set LC_ALL and LANG to C so that we get the same error messages as expected.\n+    # We set LC_ALL and LANG to C so that we get the same error\n+    # messages as expected.\n     setenv LC_ALL C\n     setenv LANG C\n \n@@ -295,6 +296,10 @@ proc v3_target_compile { source dest type options } {\n     return [target_compile $source $dest $type $options]\n }\n \n+\n+# XXX Fix me.\n+# This is a complete hack: why do we build libv3test.a and then not use it?\n+# This duplicates all the make logic. Boo: pick one way to do it, not two.\n # Build the support objects linked in with the libstdc++ tests.  In\n # addition, set v3-wchar_t, v3-threads, and v3-test_objs\n # appropriately.\n@@ -327,7 +332,7 @@ proc v3-build_support {} {\n \n     # Build the support objects.\n     set source_files \\\n-\t[list testsuite_abi.cc testsuite_allocator.cc testsuite_hooks.cc]\n+\t[list testsuite_abi.cc testsuite_allocator.cc testsuite_character.cc testsuite_hooks.cc]\n     foreach f $source_files {\n \tset object_file [file rootname $f].o\n \t# Compile with \"-w\" so that warnings issued by the compiler"}, {"sha": "f226e0aaf775061e889ed31fd22aefe2899719a7", "filename": "libstdc++-v3/testsuite/libstdc++-abi/abi.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-abi%2Fabi.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-abi%2Fabi.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-abi%2Fabi.exp?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -30,9 +30,9 @@ remote_exec \"build\" \"$srcdir/../scripts/extract_symvers\" \\\n v3-build_support\n \n # Build the abi_check program.\n-if { [v3_target_compile \"$srcdir/abi_check.cc\" \"abi_check\" \\\n+if { [v3_target_compile \"$srcdir/testsuite_abi_check.cc\" \"abi_check\" \\\n       \"executable\" [list \"additional_flags=-w\"]] != \"\" } {\n-    error \"could not compile abi_check.cc\"\n+    error \"could not compile testsuite_abi_check.cc\"\n }\n \n remote_download \"target\" $baseline_file \"baseline_symbols.txt\""}, {"sha": "457605f3a5186f82598af157410c45e3afbe6268", "filename": "libstdc++-v3/testsuite/printnow.c", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d6106a3ef8091bafc082cf6f00a5b69eb2fd1b5/libstdc%2B%2B-v3%2Ftestsuite%2Fprintnow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d6106a3ef8091bafc082cf6f00a5b69eb2fd1b5/libstdc%2B%2B-v3%2Ftestsuite%2Fprintnow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fprintnow.c?ref=2d6106a3ef8091bafc082cf6f00a5b69eb2fd1b5", "patch": "@@ -1,13 +0,0 @@\n-/* Prints the current time_t to stdout.  Equivalent to the\n- * nonstandard %s format option to GNU date(1).\n-*/\n-\n-#include <sys/types.h>\n-#include <stdio.h>\n-#include <time.h>\n-\n-int main ()\n-{\n-    printf (\"%lu\\n\", time(NULL));\n-    exit(0);\n-}"}, {"sha": "028db89c93e9d35298166a7f39fb747f89a04b01", "filename": "libstdc++-v3/testsuite/testsuite_abi_check.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_abi_check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_abi_check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_abi_check.cc?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "previous_filename": "libstdc++-v3/testsuite/abi_check.cc"}, {"sha": "76f24cb038b31dc63af3304dc49d753fa97c3707", "filename": "libstdc++-v3/testsuite/testsuite_character.cc", "status": "added", "additions": 187, "deletions": 0, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_character.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_character.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_character.cc?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -0,0 +1,187 @@\n+// -*- C++ -*-\n+\n+// Utility subroutines for the C++ library testsuite. \n+//\n+// Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <testsuite_character.h>\n+\n+namespace std\n+{\n+  locale::id\n+  codecvt<__gnu_test::character, char, __gnu_test::conversion_state>::id;\n+\n+  // Member specializations for the existing facet classes.  \n+  // NB: This isn't especially portable. Perhaps a better way would be\n+  // to just specialize all of numpunct and ctype.\n+  using __gnu_test::int_type;\n+  using __gnu_test::value_type;\n+  using __gnu_test::pod_type;\n+\n+  template<>\n+    bool \n+    ctype<pod_type>::\n+    do_is(mask, char_type) const { return true; }\n+\n+  template<>\n+    const pod_type*\n+    ctype<pod_type>::\n+    do_is(const char_type* __lo, const char_type*, mask*) const\n+    { return __lo; }\n+\n+  template<>\n+    const pod_type*\n+    ctype<pod_type>::\n+    do_scan_is(mask, const char_type* __lo, const char_type*) const\n+    { return __lo; }\n+\n+  template<>\n+    const pod_type*\n+    ctype<pod_type>::\n+    do_scan_not(mask, const char_type* __lo, const char_type*) const\n+    { return __lo; }\n+\n+  template<>\n+    pod_type \n+    ctype<pod_type>::\n+    do_toupper(char_type __c) const\n+    { return __c; }\n+\n+  template<>\n+    const pod_type*\n+    ctype<pod_type>::\n+    do_toupper(char_type*, const char_type* __hi) const\n+    { return __hi; }\n+\n+  template<>\n+    pod_type \n+    ctype<pod_type>::\n+    do_tolower(char_type __c) const\n+    { return __c; }\n+\n+  template<>\n+    const pod_type*\n+    ctype<pod_type>::\n+    do_tolower(char_type*, const char_type* __hi) const\n+    { return __hi; }\n+\n+  template<>\n+    pod_type\n+    ctype<pod_type>::\n+    do_widen(char __c) const\n+    { \n+      char_type ret = { value_type(__c) };\n+      return ret;\n+    }\n+\n+  template<>\n+    const char*\n+    ctype<pod_type>::\n+    do_widen(const char* __lo, const char* __hi, char_type* __dest) const\n+    {\n+      while (__lo < __hi)\n+\t{\n+\t  *__dest = this->do_widen(*__lo);\n+\t  ++__lo;\n+\t  ++__dest;\n+\t}\n+      return __hi;\n+    }\n+\n+  template<>\n+    char\n+    ctype<pod_type>::\n+    do_narrow(char_type __wc, char) const\n+    { return static_cast<char>(__wc.value); }\n+\n+  template<>\n+    const pod_type*\n+    ctype<pod_type>::\n+    do_narrow(const pod_type* __lo, const pod_type* __hi, \n+\t      char, char* __dest) const\n+    {\n+      while (__lo < __hi)\n+\t{\n+\t  *__dest = this->do_narrow(*__lo, char());\n+\t  ++__lo;\n+\t  ++__dest;\n+\t}\n+      return __hi;\n+    }\n+\n+  template<>\n+    ctype<pod_type>::~ctype() { }\n+\n+  template<>\n+    void\n+    numpunct<pod_type>::_M_initialize_numpunct(__c_locale)\n+    {\n+      if (!_M_data)\n+\t_M_data = new __numpunct_cache<pod_type>;\n+\n+      _M_data->_M_grouping = \"\";\n+      _M_data->_M_use_grouping = false;\n+\n+      _M_data->_M_decimal_point.value =  value_type('.');\n+      _M_data->_M_thousands_sep.value = value_type(',');\n+      \n+      for (size_t i = 0; i < __num_base::_S_oend; ++i)\n+\t{\n+\t  value_type v = __num_base::_S_atoms_out[i];\n+\t  _M_data->_M_atoms_out[i].value = v;\n+\t}\n+      _M_data->_M_atoms_out[__num_base::_S_oend] = pod_type();\n+      \n+      for (size_t j = 0; j < __num_base::_S_iend; ++j)\n+\t_M_data->_M_atoms_in[j].value = value_type(__num_base::_S_atoms_in[j]);\n+      _M_data->_M_atoms_in[__num_base::_S_iend] = pod_type();\n+\n+      // \"true\"\n+      pod_type* __truename = new pod_type[4 + 1];\n+      __truename[0].value = value_type('t');\n+      __truename[1].value = value_type('r');\n+      __truename[2].value = value_type('u');\n+      __truename[3].value = value_type('e');\n+      __truename[4] = pod_type();\n+      _M_data->_M_truename = __truename;\n+\n+      // \"false\"\n+      pod_type* __falsename = new pod_type[5 + 1];\n+      __falsename[0].value = value_type('f');\n+      __falsename[1].value = value_type('a');\n+      __falsename[2].value = value_type('l');\n+      __falsename[3].value = value_type('s');\n+      __falsename[4].value = value_type('e');\n+      __falsename[5] = pod_type();\n+      _M_data->_M_falsename = __falsename;\n+    }\n+\n+  template<>\n+    numpunct<pod_type>::~numpunct()\n+    { delete _M_data; }\n+} // namespace std"}, {"sha": "dff10989e5e76e360b41ce59b8ac9feaf022cf44", "filename": "libstdc++-v3/testsuite/testsuite_character.h", "status": "modified", "additions": 124, "deletions": 6, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_character.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_character.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_character.h?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,8 +1,9 @@\n // -*- C++ -*-\n+\n // Testing character type and state type with char_traits and codecvt\n // specializations for the C++ library testsuite.\n //\n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,9 +33,10 @@\n #ifndef _GLIBCXX_TESTSUITE_CHARACTER_H\n #define _GLIBCXX_TESTSUITE_CHARACTER_H\n \n+#include <climits>\n #include <string> // for char_traits\n #include <locale> // for codecvt\n-#include <climits>\n+#include <ext/pod_char_traits.h>\n \n namespace __gnu_test\n {  \n@@ -60,12 +62,37 @@ namespace __gnu_test\n   {\n     unsigned int state;\n   };\n+\n+  // Test data types.\n+  struct pod_char\n+  {\n+    unsigned char c;\n+  };\n+\n+  inline bool\n+  operator==(const pod_char& lhs, const pod_char& rhs)\n+  { return lhs.c == rhs.c; }\n+  \n+  struct pod_int\n+  {\n+    int i;\n+  };\n+  \n+  struct state\n+  {\n+    unsigned long l;\n+    unsigned long l2;\n+  };\n+\n+  typedef unsigned short\t\t\t\tvalue_type;\n+  typedef unsigned int\t\t\t\t\tint_type;\n+  typedef __gnu_cxx::character<value_type, int_type>\tpod_type;\n }; // namespace __gnu_test\n \n namespace std\n {\n-  // char_traits specialization. Meets the additional requirements for\n-  // basic_filebuf.\n+  // A std::char_traits specialization. Meets the additional\n+  // requirements for basic_filebuf.\n   template<>\n     struct char_traits<__gnu_test::character>\n     {\n@@ -411,8 +438,99 @@ namespace std\n       { return 11; }\n     };\n \n-  locale::id\n-  codecvt<__gnu_test::character, char, __gnu_test::conversion_state>::id;\n+\n+  // A std::char_traits specialization with POD types for char_type,\n+  // int_type, and state_type.\n+  template<>\n+    struct char_traits<__gnu_test::pod_char>\n+    {\n+      typedef __gnu_test::pod_char\tchar_type;\n+      typedef __gnu_test::pod_int  \tint_type;\n+      typedef __gnu_test::state   \tstate_type;\n+      typedef fpos<state_type> \t\tpos_type;\n+      typedef streamoff \t\toff_type;\n+      \n+      static void \n+      assign(char_type& c1, const char_type& c2)\n+      { c1.c = c2.c; }\n+\n+      static bool \n+      eq(const char_type& c1, const char_type& c2)\n+      { return c1.c == c2.c; }\n+\n+      static bool \n+      lt(const char_type& c1, const char_type& c2)\n+      { return c1.c < c2.c; }\n+\n+      static int \n+      compare(const char_type* s1, const char_type* s2, size_t n)\n+      { return memcmp(s1, s2, n); }\n+\n+      static size_t\n+      length(const char_type* s)\n+      { return strlen(reinterpret_cast<const char*>(s)); }\n+\n+      static const char_type* \n+      find(const char_type* s, size_t n, const char_type& a)\n+      { return static_cast<const char_type*>(memchr(s, a.c, n)); }\n+\n+      static char_type* \n+      move(char_type* s1, const char_type* s2, size_t n)\n+      {\n+\tmemmove(s1, s2, n);\n+\treturn s1;\n+      }\n+\n+      static char_type* \n+      copy(char_type* s1, const char_type* s2, size_t n)\n+      {\n+\tmemcpy(s1, s2, n);\n+\treturn s1;\n+      }\n+\n+      static char_type* \n+      assign(char_type* s, size_t n, char_type a)\n+      {\n+\tmemset(s, a.c, n);\n+\treturn s;\n+      }\n+\n+      static char_type \n+      to_char_type(const int_type& c)\n+      {\n+\tchar_type ret;\n+\tret.c = static_cast<unsigned char>(c.i);\n+\treturn ret;\n+      }\n+\n+      static int_type \n+      to_int_type(const char_type& c)\n+      {\n+\tint_type ret;\n+\tret.i = c.c;\n+\treturn ret;\n+      }\n+\n+      static bool \n+      eq_int_type(const int_type& c1, const int_type& c2)\n+      { return c1.i == c2.i; }\n+\n+      static int_type \n+      eof()\n+      {\n+\tint_type n;\n+\tn.i = -10;\n+\treturn n;\n+      }\n+\n+      static int_type \n+      not_eof(const int_type& c)\n+      {\n+\tif (eq_int_type(c, eof()))\n+\t  return int_type();\n+\treturn c;\n+      }\n+    };\n } // namespace std\n \n #endif // _GLIBCXX_TESTSUITE_CHARACTER_H"}, {"sha": "e8618fb71df01ea43749076cb7c2a9a931bf843e", "filename": "libstdc++-v3/testsuite/testsuite_hooks.cc", "status": "modified", "additions": 1, "deletions": 152, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.cc?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -1,4 +1,5 @@\n // -*- C++ -*-\n+\n // Utility subroutines for the C++ library testsuite. \n //\n // Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n@@ -332,155 +333,3 @@ namespace __gnu_test\n #endif    \n   }\n }; // namespace __gnu_test\n-\n-namespace std\n-{\n-  // Member specializations for the existing facet classes.  \n-  // NB: This isn't especially portable. Perhaps a better way would be\n-  // to just specialize all of numpunct and ctype.\n-  using __gnu_test::int_type;\n-  using __gnu_test::value_type;\n-  using __gnu_test::pod_type;\n-\n-  template<>\n-    bool \n-    ctype<pod_type>::\n-    do_is(mask, char_type) const { return true; }\n-\n-  template<>\n-    const pod_type*\n-    ctype<pod_type>::\n-    do_is(const char_type* __lo, const char_type*, mask*) const\n-    { return __lo; }\n-\n-  template<>\n-    const pod_type*\n-    ctype<pod_type>::\n-    do_scan_is(mask, const char_type* __lo, const char_type*) const\n-    { return __lo; }\n-\n-  template<>\n-    const pod_type*\n-    ctype<pod_type>::\n-    do_scan_not(mask, const char_type* __lo, const char_type*) const\n-    { return __lo; }\n-\n-  template<>\n-    pod_type \n-    ctype<pod_type>::\n-    do_toupper(char_type __c) const\n-    { return __c; }\n-\n-  template<>\n-    const pod_type*\n-    ctype<pod_type>::\n-    do_toupper(char_type*, const char_type* __hi) const\n-    { return __hi; }\n-\n-  template<>\n-    pod_type \n-    ctype<pod_type>::\n-    do_tolower(char_type __c) const\n-    { return __c; }\n-\n-  template<>\n-    const pod_type*\n-    ctype<pod_type>::\n-    do_tolower(char_type*, const char_type* __hi) const\n-    { return __hi; }\n-\n-  template<>\n-    pod_type\n-    ctype<pod_type>::\n-    do_widen(char __c) const\n-    { \n-      char_type ret = { value_type(__c) };\n-      return ret;\n-    }\n-\n-  template<>\n-    const char*\n-    ctype<pod_type>::\n-    do_widen(const char* __lo, const char* __hi, char_type* __dest) const\n-    {\n-      while (__lo < __hi)\n-\t{\n-\t  *__dest = this->do_widen(*__lo);\n-\t  ++__lo;\n-\t  ++__dest;\n-\t}\n-      return __hi;\n-    }\n-\n-  template<>\n-    char\n-    ctype<pod_type>::\n-    do_narrow(char_type __wc, char) const\n-    { return static_cast<char>(__wc.value); }\n-\n-  template<>\n-    const pod_type*\n-    ctype<pod_type>::\n-    do_narrow(const pod_type* __lo, const pod_type* __hi, \n-\t      char, char* __dest) const\n-    {\n-      while (__lo < __hi)\n-\t{\n-\t  *__dest = this->do_narrow(*__lo, char());\n-\t  ++__lo;\n-\t  ++__dest;\n-\t}\n-      return __hi;\n-    }\n-\n-  template<>\n-    ctype<pod_type>::~ctype() { }\n-\n-  template<>\n-    void\n-    numpunct<pod_type>::_M_initialize_numpunct(__c_locale)\n-    {\n-      if (!_M_data)\n-\t_M_data = new __numpunct_cache<pod_type>;\n-\n-      _M_data->_M_grouping = \"\";\n-      _M_data->_M_use_grouping = false;\n-\n-      _M_data->_M_decimal_point.value =  value_type('.');\n-      _M_data->_M_thousands_sep.value = value_type(',');\n-      \n-      for (size_t i = 0; i < __num_base::_S_oend; ++i)\n-\t{\n-\t  value_type v = __num_base::_S_atoms_out[i];\n-\t  _M_data->_M_atoms_out[i].value = v;\n-\t}\n-      _M_data->_M_atoms_out[__num_base::_S_oend] = pod_type();\n-      \n-      for (size_t j = 0; j < __num_base::_S_iend; ++j)\n-\t_M_data->_M_atoms_in[j].value = value_type(__num_base::_S_atoms_in[j]);\n-      _M_data->_M_atoms_in[__num_base::_S_iend] = pod_type();\n-\n-      // \"true\"\n-      pod_type* __truename = new pod_type[4 + 1];\n-      __truename[0].value = value_type('t');\n-      __truename[1].value = value_type('r');\n-      __truename[2].value = value_type('u');\n-      __truename[3].value = value_type('e');\n-      __truename[4] = pod_type();\n-      _M_data->_M_truename = __truename;\n-\n-      // \"false\"\n-      pod_type* __falsename = new pod_type[5 + 1];\n-      __falsename[0].value = value_type('f');\n-      __falsename[1].value = value_type('a');\n-      __falsename[2].value = value_type('l');\n-      __falsename[3].value = value_type('s');\n-      __falsename[4].value = value_type('e');\n-      __falsename[5] = pod_type();\n-      _M_data->_M_falsename = __falsename;\n-    }\n-\n-  template<>\n-    numpunct<pod_type>::~numpunct()\n-    { delete _M_data; }\n-} // namespace std"}, {"sha": "635ee1cce4a60a42342523313b7a9094610fdb96", "filename": "libstdc++-v3/testsuite/testsuite_hooks.h", "status": "modified", "additions": 0, "deletions": 127, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5305b1ae1b21669f5bb0c91c8b80ab5d5b789234/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h?ref=5305b1ae1b21669f5bb0c91c8b80ab5d5b789234", "patch": "@@ -52,9 +52,6 @@\n // 4)  copy_tracker, from Stephen M. Webb <stephen@bregmasoft.com>.\n //   A class with nontrivial ctor/dtor that provides the ability to track the\n //   number of copy ctors and dtors, and will throw on demand during copy.\n-//\n-// 5) pod_char, pod_int, , abstract character classes and\n-//   char_traits specializations for testing instantiations.\n \n #ifndef _GLIBCXX_TESTSUITE_HOOKS_H\n #define _GLIBCXX_TESTSUITE_HOOKS_H\n@@ -63,7 +60,6 @@\n #include <bits/functexcept.h>\n #include <cstddef>\n #include <locale>\n-#include <ext/pod_char_traits.h>\n #ifdef _GLIBCXX_HAVE_SYS_STAT_H\n #include <sys/stat.h>\n #endif\n@@ -171,31 +167,6 @@ namespace __gnu_test\n   int\n   try_mkfifo (const char* filename, mode_t mode);\n \n-  // Test data types.\n-  struct pod_char\n-  {\n-    unsigned char c;\n-  };\n-\n-  inline bool\n-  operator==(const pod_char& lhs, const pod_char& rhs)\n-  { return lhs.c == rhs.c; }\n-  \n-  struct pod_int\n-  {\n-    int i;\n-  };\n-  \n-  struct state\n-  {\n-    unsigned long l;\n-    unsigned long l2;\n-  };\n-\n-  typedef unsigned short\t\t\t\tvalue_type;\n-  typedef unsigned int\t\t\t\t\tint_type;\n-  typedef __gnu_cxx::character<value_type, int_type>\tpod_type;\n-\n \n   // Counting.\n   struct counter\n@@ -407,103 +378,5 @@ namespace __gnu_test\n   };\n } // namespace __gnu_test\n \n-namespace std\n-{\n-  template<class _CharT>\n-    struct char_traits;\n-\n-  // char_traits specialization\n-  template<>\n-    struct char_traits<__gnu_test::pod_char>\n-    {\n-      typedef __gnu_test::pod_char\tchar_type;\n-      typedef __gnu_test::pod_int  \tint_type;\n-      typedef __gnu_test::state   \tstate_type;\n-      typedef fpos<state_type> \t\tpos_type;\n-      typedef streamoff \t\toff_type;\n-      \n-      static void \n-      assign(char_type& c1, const char_type& c2)\n-      { c1.c = c2.c; }\n-\n-      static bool \n-      eq(const char_type& c1, const char_type& c2)\n-      { return c1.c == c2.c; }\n-\n-      static bool \n-      lt(const char_type& c1, const char_type& c2)\n-      { return c1.c < c2.c; }\n-\n-      static int \n-      compare(const char_type* s1, const char_type* s2, size_t n)\n-      { return memcmp(s1, s2, n); }\n-\n-      static size_t\n-      length(const char_type* s)\n-      { return strlen(reinterpret_cast<const char*>(s)); }\n-\n-      static const char_type* \n-      find(const char_type* s, size_t n, const char_type& a)\n-      { return static_cast<const char_type*>(memchr(s, a.c, n)); }\n-\n-      static char_type* \n-      move(char_type* s1, const char_type* s2, size_t n)\n-      {\n-\tmemmove(s1, s2, n);\n-\treturn s1;\n-      }\n-\n-      static char_type* \n-      copy(char_type* s1, const char_type* s2, size_t n)\n-      {\n-\tmemcpy(s1, s2, n);\n-\treturn s1;\n-      }\n-\n-      static char_type* \n-      assign(char_type* s, size_t n, char_type a)\n-      {\n-\tmemset(s, a.c, n);\n-\treturn s;\n-      }\n-\n-      static char_type \n-      to_char_type(const int_type& c)\n-      {\n-\tchar_type ret;\n-\tret.c = static_cast<unsigned char>(c.i);\n-\treturn ret;\n-      }\n-\n-      static int_type \n-      to_int_type(const char_type& c)\n-      {\n-\tint_type ret;\n-\tret.i = c.c;\n-\treturn ret;\n-      }\n-\n-      static bool \n-      eq_int_type(const int_type& c1, const int_type& c2)\n-      { return c1.i == c2.i; }\n-\n-      static int_type \n-      eof()\n-      {\n-\tint_type n;\n-\tn.i = -10;\n-\treturn n;\n-      }\n-\n-      static int_type \n-      not_eof(const int_type& c)\n-      {\n-\tif (eq_int_type(c, eof()))\n-\t  return int_type();\n-\treturn c;\n-      }\n-    };\n-} // namespace std\n-\n #endif // _GLIBCXX_TESTSUITE_HOOKS_H\n "}]}