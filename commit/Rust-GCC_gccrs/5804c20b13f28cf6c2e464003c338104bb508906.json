{"sha": "5804c20b13f28cf6c2e464003c338104bb508906", "node_id": "C_kwDOANBUbNoAKDU4MDRjMjBiMTNmMjhjZjZjMmU0NjQwMDNjMzM4MTA0YmI1MDg5MDY", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-14T23:18:20Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-17T02:46:35Z"}, "message": "RISC-V: Move saturating add/subtract md pattern location [NFC]\n\ngcc/ChangeLog:\n\n\t* config/riscv/vector.md (@pred_<optab><mode>): Rearrange.\n\t(@pred_<optab><mode>_scalar): Ditto.\n\t(*pred_<optab><mode>_scalar): Ditto.\n\t(*pred_<optab><mode>_extended_scalar): Ditto.", "tree": {"sha": "603a1c15e7a45bd320a316d5c0d0d33a5bccd893", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/603a1c15e7a45bd320a316d5c0d0d33a5bccd893"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5804c20b13f28cf6c2e464003c338104bb508906", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5804c20b13f28cf6c2e464003c338104bb508906", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5804c20b13f28cf6c2e464003c338104bb508906", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5804c20b13f28cf6c2e464003c338104bb508906/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b6d44f459d28ab17d42967ce1c0490397e30e40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b6d44f459d28ab17d42967ce1c0490397e30e40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b6d44f459d28ab17d42967ce1c0490397e30e40"}], "stats": {"total": 490, "additions": 245, "deletions": 245}, "files": [{"sha": "6c02cf3d56850d1d1270d32111ccfd271c53f835", "filename": "gcc/config/riscv/vector.md", "status": "modified", "additions": 245, "deletions": 245, "changes": 490, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5804c20b13f28cf6c2e464003c338104bb508906/gcc%2Fconfig%2Friscv%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5804c20b13f28cf6c2e464003c338104bb508906/gcc%2Fconfig%2Friscv%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector.md?ref=5804c20b13f28cf6c2e464003c338104bb508906", "patch": "@@ -1336,7 +1336,6 @@\n ;; - 11.9 Vector Integer Min/Max Instructions\n ;; - 11.10 Vector Single-Width Integer Multiply Instructions\n ;; - 11.11 Vector Integer Divide Instructions\n-;; - 12.1 Vector Single-Width Saturating Add and Subtract\n ;; -------------------------------------------------------------------------------\n \n (define_insn \"@pred_<optab><mode>\"\n@@ -1728,248 +1727,6 @@\n   [(set_attr \"type\" \"vialu\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-;; Saturating Add and Subtract\n-(define_insn \"@pred_<optab><mode>\"\n-  [(set (match_operand:VI 0 \"register_operand\"                   \"=vd, vr, vd, vr\")\n-\t(if_then_else:VI\n-\t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"         \" vm,Wc1, vm,Wc1\")\n-\t     (match_operand 5 \"vector_length_operand\"            \" rK, rK, rK, rK\")\n-\t     (match_operand 6 \"const_int_operand\"                \"  i,  i,  i,  i\")\n-\t     (match_operand 7 \"const_int_operand\"                \"  i,  i,  i,  i\")\n-\t     (match_operand 8 \"const_int_operand\"                \"  i,  i,  i,  i\")\n-\t     (reg:SI VL_REGNUM)\n-\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (any_sat_int_binop:VI\n-\t    (match_operand:VI 3 \"<binop_rhs1_predicate>\"         \" vr, vr, vr, vr\")\n-\t    (match_operand:VI 4 \"<binop_rhs2_predicate>\" \"<binop_rhs2_constraint>\"))\n-\t  (match_operand:VI 2 \"vector_merge_operand\"             \"0vu,0vu,0vu,0vu\")))]\n-  \"TARGET_VECTOR\"\n-  \"@\n-   v<insn>.vv\\t%0,%3,%4%p1\n-   v<insn>.vv\\t%0,%3,%4%p1\n-   v<binop_vi_variant_insn>\\t%0,<binop_vi_variant_op>%p1\n-   v<binop_vi_variant_insn>\\t%0,<binop_vi_variant_op>%p1\"\n-  [(set_attr \"type\" \"<int_binop_insn_type>\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-;; Handle GET_MODE_INNER (mode) = QImode, HImode, SImode.\n-(define_insn \"@pred_<optab><mode>_scalar\"\n-  [(set (match_operand:VI_QHS 0 \"register_operand\"       \"=vd, vr\")\n-\t(if_then_else:VI_QHS\n-\t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n-\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK\")\n-\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n-\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n-\t     (match_operand 8 \"const_int_operand\"        \"  i,  i\")\n-\t     (reg:SI VL_REGNUM)\n-\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (sat_int_plus_binop:VI_QHS\n-\t    (vec_duplicate:VI_QHS\n-\t      (match_operand:<VEL> 4 \"register_operand\"  \"  r,  r\"))\n-\t    (match_operand:VI_QHS 3 \"register_operand\"   \" vr, vr\"))\n-\t  (match_operand:VI_QHS 2 \"vector_merge_operand\" \"0vu,0vu\")))]\n-  \"TARGET_VECTOR\"\n-  \"v<insn>.vx\\t%0,%3,%4%p1\"\n-  [(set_attr \"type\" \"<int_binop_insn_type>\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"@pred_<optab><mode>_scalar\"\n-  [(set (match_operand:VI_QHS 0 \"register_operand\"       \"=vd, vr\")\n-\t(if_then_else:VI_QHS\n-\t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n-\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK\")\n-\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n-\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n-\t     (match_operand 8 \"const_int_operand\"        \"  i,  i\")\n-\t     (reg:SI VL_REGNUM)\n-\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (sat_int_minus_binop:VI_QHS\n-\t    (match_operand:VI_QHS 3 \"register_operand\"   \" vr, vr\")\n-\t    (vec_duplicate:VI_QHS\n-\t      (match_operand:<VEL> 4 \"register_operand\"  \"  r,  r\")))\n-\t  (match_operand:VI_QHS 2 \"vector_merge_operand\" \"0vu,0vu\")))]\n-  \"TARGET_VECTOR\"\n-  \"v<insn>.vx\\t%0,%3,%4%p1\"\n-  [(set_attr \"type\" \"<int_binop_insn_type>\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_expand \"@pred_<optab><mode>_scalar\"\n-  [(set (match_operand:VI_D 0 \"register_operand\")\n-\t(if_then_else:VI_D\n-\t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\")\n-\t     (match_operand 5 \"vector_length_operand\")\n-\t     (match_operand 6 \"const_int_operand\")\n-\t     (match_operand 7 \"const_int_operand\")\n-\t     (match_operand 8 \"const_int_operand\")\n-\t     (reg:SI VL_REGNUM)\n-\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (sat_int_plus_binop:VI_D\n-\t    (vec_duplicate:VI_D\n-\t      (match_operand:<VEL> 4 \"reg_or_int_operand\"))\n-\t    (match_operand:VI_D 3 \"register_operand\"))\n-\t  (match_operand:VI_D 2 \"vector_merge_operand\")))]\n-  \"TARGET_VECTOR\"\n-  {\n-    if (riscv_vector::has_vi_variant_p (<CODE>, operands[4]))\n-      operands[4] = force_reg (<VEL>mode, operands[4]);\n-    else if (!TARGET_64BIT)\n-      {\n-\trtx v = gen_reg_rtx (<MODE>mode);\n-\n-\tif (immediate_operand (operands[4], Pmode))\n-\t  operands[4] = gen_rtx_SIGN_EXTEND (<VEL>mode,\n-\t\tforce_reg (Pmode, operands[4]));\n-\telse\n-\t  {\n-\t    if (CONST_INT_P (operands[4]))\n-\t      operands[4] = force_reg (<VEL>mode, operands[4]);\n-\n-\t    riscv_vector::emit_nonvlmax_op (code_for_pred_broadcast (<MODE>mode),\n-\t\t\tv, operands[4], operands[5], <VM>mode);\n-\t    emit_insn (gen_pred_<optab><mode> (operands[0], operands[1],\n-\t\t\toperands[2], operands[3], v, operands[5],\n-\t\t\toperands[6], operands[7], operands[8]));\n-\t    DONE;\n-\t  }\n-      }\n-    else\n-      operands[4] = force_reg (<VEL>mode, operands[4]);\n-  })\n-\n-(define_insn \"*pred_<optab><mode>_scalar\"\n-  [(set (match_operand:VI_D 0 \"register_operand\"         \"=vd, vr\")\n-\t(if_then_else:VI_D\n-\t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n-\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK\")\n-\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n-\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n-\t     (match_operand 8 \"const_int_operand\"        \"  i,  i\")\n-\t     (reg:SI VL_REGNUM)\n-\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (sat_int_plus_binop:VI_D\n-\t    (vec_duplicate:VI_D\n-\t      (match_operand:<VEL> 4 \"register_operand\"  \"  r,  r\"))\n-\t    (match_operand:VI_D 3 \"register_operand\"     \" vr, vr\"))\n-\t  (match_operand:VI_D 2 \"vector_merge_operand\"   \"0vu,0vu\")))]\n-  \"TARGET_VECTOR\"\n-  \"v<insn>.vx\\t%0,%3,%4%p1\"\n-  [(set_attr \"type\" \"<int_binop_insn_type>\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"*pred_<optab><mode>_extended_scalar\"\n-  [(set (match_operand:VI_D 0 \"register_operand\"             \"=vd, vr\")\n-\t(if_then_else:VI_D\n-\t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"     \" vm,Wc1\")\n-\t     (match_operand 5 \"vector_length_operand\"        \" rK, rK\")\n-\t     (match_operand 6 \"const_int_operand\"            \"  i,  i\")\n-\t     (match_operand 7 \"const_int_operand\"            \"  i,  i\")\n-\t     (match_operand 8 \"const_int_operand\"            \"  i,  i\")\n-\t     (reg:SI VL_REGNUM)\n-\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (sat_int_plus_binop:VI_D\n-\t    (vec_duplicate:VI_D\n-\t      (sign_extend:<VEL>\n-\t        (match_operand:<VSUBEL> 4 \"register_operand\" \"  r,  r\")))\n-\t    (match_operand:VI_D 3 \"register_operand\"         \" vr, vr\"))\n-\t  (match_operand:VI_D 2 \"vector_merge_operand\"       \"0vu,0vu\")))]\n-  \"TARGET_VECTOR\"\n-  \"v<insn>.vx\\t%0,%3,%4%p1\"\n-  [(set_attr \"type\" \"<int_binop_insn_type>\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_expand \"@pred_<optab><mode>_scalar\"\n-  [(set (match_operand:VI_D 0 \"register_operand\")\n-\t(if_then_else:VI_D\n-\t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\")\n-\t     (match_operand 5 \"vector_length_operand\")\n-\t     (match_operand 6 \"const_int_operand\")\n-\t     (match_operand 7 \"const_int_operand\")\n-\t     (match_operand 8 \"const_int_operand\")\n-\t     (reg:SI VL_REGNUM)\n-\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (sat_int_minus_binop:VI_D\n-\t    (match_operand:VI_D 3 \"register_operand\")\n-\t    (vec_duplicate:VI_D\n-\t      (match_operand:<VEL> 4 \"reg_or_int_operand\")))\n-\t  (match_operand:VI_D 2 \"vector_merge_operand\")))]\n-  \"TARGET_VECTOR\"\n-  {\n-    if (riscv_vector::has_vi_variant_p (<CODE>, operands[4]))\n-      operands[4] = force_reg (<VEL>mode, operands[4]);\n-    else if (!TARGET_64BIT)\n-      {\n-\trtx v = gen_reg_rtx (<MODE>mode);\n-\n-\tif (immediate_operand (operands[4], Pmode))\n-\t  operands[4] = gen_rtx_SIGN_EXTEND (<VEL>mode,\n-\t\tforce_reg (Pmode, operands[4]));\n-\telse\n-\t  {\n-\t    if (CONST_INT_P (operands[4]))\n-\t      operands[4] = force_reg (<VEL>mode, operands[4]);\n-\n-\t    riscv_vector::emit_nonvlmax_op (code_for_pred_broadcast (<MODE>mode),\n-\t\t\tv, operands[4], operands[5], <VM>mode);\n-\t    emit_insn (gen_pred_<optab><mode> (operands[0], operands[1],\n-\t\t\toperands[2], operands[3], v, operands[5],\n-\t\t\toperands[6], operands[7], operands[8]));\n-\t    DONE;\n-\t  }\n-      }\n-    else\n-      operands[4] = force_reg (<VEL>mode, operands[4]);\n-  })\n-\n-(define_insn \"*pred_<optab><mode>_scalar\"\n-  [(set (match_operand:VI_D 0 \"register_operand\"         \"=vd, vr\")\n-\t(if_then_else:VI_D\n-\t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n-\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK\")\n-\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n-\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n-\t     (match_operand 8 \"const_int_operand\"        \"  i,  i\")\n-\t     (reg:SI VL_REGNUM)\n-\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (sat_int_minus_binop:VI_D\n-\t    (match_operand:VI_D 3 \"register_operand\"     \" vr, vr\")\n-\t    (vec_duplicate:VI_D\n-\t      (match_operand:<VEL> 4 \"register_operand\"  \"  r,  r\")))\n-\t  (match_operand:VI_D 2 \"vector_merge_operand\"   \"0vu,0vu\")))]\n-  \"TARGET_VECTOR\"\n-  \"v<insn>.vx\\t%0,%3,%4%p1\"\n-  [(set_attr \"type\" \"<int_binop_insn_type>\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"*pred_<optab><mode>_extended_scalar\"\n-  [(set (match_operand:VI_D 0 \"register_operand\"             \"=vd, vr\")\n-\t(if_then_else:VI_D\n-\t  (unspec:<VM>\n-\t    [(match_operand:<VM> 1 \"vector_mask_operand\"     \" vm,Wc1\")\n-\t     (match_operand 5 \"vector_length_operand\"        \" rK, rK\")\n-\t     (match_operand 6 \"const_int_operand\"            \"  i,  i\")\n-\t     (match_operand 7 \"const_int_operand\"            \"  i,  i\")\n-\t     (match_operand 8 \"const_int_operand\"            \"  i,  i\")\n-\t     (reg:SI VL_REGNUM)\n-\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n-\t  (sat_int_minus_binop:VI_D\n-\t    (match_operand:VI_D 3 \"register_operand\"         \" vr, vr\")\n-\t    (vec_duplicate:VI_D\n-\t      (sign_extend:<VEL>\n-\t        (match_operand:<VSUBEL> 4 \"register_operand\" \"  r,  r\"))))\n-\t  (match_operand:VI_D 2 \"vector_merge_operand\"       \"0vu,0vu\")))]\n-  \"TARGET_VECTOR\"\n-  \"v<insn>.vx\\t%0,%3,%4%p1\"\n-  [(set_attr \"type\" \"<int_binop_insn_type>\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n ;; Multiply High instructions.\n (define_insn \"@pred_mulh<v_su><mode>\"\n   [(set (match_operand:VFULLI 0 \"register_operand\"       \"=vd, vr\")\n@@ -3220,12 +2977,255 @@\n ;; ---- Predicated fixed-point operations\n ;; -------------------------------------------------------------------------------\n ;; Includes:\n+;; - 12.1 Vector Single-Width Saturating Add and Subtract\n ;; - 12.2 Vector Single-Width Aaveraging Add and Subtract\n ;; - 12.3 Vector Single-Width Fractional Multiply with Rounding and Saturation\n-;; - 12.5 Vector Single-Width Scaling Shift Instructions\n-;; - 12.6 Vector Narrowing Fixed-Point Clip Instructions\n+;; - 12.4 Vector Single-Width Scaling Shift Instructions\n+;; - 12.5 Vector Narrowing Fixed-Point Clip Instructions\n ;; -------------------------------------------------------------------------------\n \n+;; Saturating Add and Subtract\n+(define_insn \"@pred_<optab><mode>\"\n+  [(set (match_operand:VI 0 \"register_operand\"                   \"=vd, vr, vd, vr\")\n+\t(if_then_else:VI\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"         \" vm,Wc1, vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"            \" rK, rK, rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"                \"  i,  i,  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"                \"  i,  i,  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"                \"  i,  i,  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (any_sat_int_binop:VI\n+\t    (match_operand:VI 3 \"<binop_rhs1_predicate>\"         \" vr, vr, vr, vr\")\n+\t    (match_operand:VI 4 \"<binop_rhs2_predicate>\" \"<binop_rhs2_constraint>\"))\n+\t  (match_operand:VI 2 \"vector_merge_operand\"             \"0vu,0vu,0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"@\n+   v<insn>.vv\\t%0,%3,%4%p1\n+   v<insn>.vv\\t%0,%3,%4%p1\n+   v<binop_vi_variant_insn>\\t%0,<binop_vi_variant_op>%p1\n+   v<binop_vi_variant_insn>\\t%0,<binop_vi_variant_op>%p1\"\n+  [(set_attr \"type\" \"<int_binop_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+;; Handle GET_MODE_INNER (mode) = QImode, HImode, SImode.\n+(define_insn \"@pred_<optab><mode>_scalar\"\n+  [(set (match_operand:VI_QHS 0 \"register_operand\"       \"=vd, vr\")\n+\t(if_then_else:VI_QHS\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (sat_int_plus_binop:VI_QHS\n+\t    (vec_duplicate:VI_QHS\n+\t      (match_operand:<VEL> 4 \"register_operand\"  \"  r,  r\"))\n+\t    (match_operand:VI_QHS 3 \"register_operand\"   \" vr, vr\"))\n+\t  (match_operand:VI_QHS 2 \"vector_merge_operand\" \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"v<insn>.vx\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"<int_binop_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_<optab><mode>_scalar\"\n+  [(set (match_operand:VI_QHS 0 \"register_operand\"       \"=vd, vr\")\n+\t(if_then_else:VI_QHS\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (sat_int_minus_binop:VI_QHS\n+\t    (match_operand:VI_QHS 3 \"register_operand\"   \" vr, vr\")\n+\t    (vec_duplicate:VI_QHS\n+\t      (match_operand:<VEL> 4 \"register_operand\"  \"  r,  r\")))\n+\t  (match_operand:VI_QHS 2 \"vector_merge_operand\" \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"v<insn>.vx\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"<int_binop_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_expand \"@pred_<optab><mode>_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\")\n+\t     (match_operand 5 \"vector_length_operand\")\n+\t     (match_operand 6 \"const_int_operand\")\n+\t     (match_operand 7 \"const_int_operand\")\n+\t     (match_operand 8 \"const_int_operand\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (sat_int_plus_binop:VI_D\n+\t    (vec_duplicate:VI_D\n+\t      (match_operand:<VEL> 4 \"reg_or_int_operand\"))\n+\t    (match_operand:VI_D 3 \"register_operand\"))\n+\t  (match_operand:VI_D 2 \"vector_merge_operand\")))]\n+  \"TARGET_VECTOR\"\n+  {\n+    if (riscv_vector::has_vi_variant_p (<CODE>, operands[4]))\n+      operands[4] = force_reg (<VEL>mode, operands[4]);\n+    else if (!TARGET_64BIT)\n+      {\n+\trtx v = gen_reg_rtx (<MODE>mode);\n+\n+\tif (immediate_operand (operands[4], Pmode))\n+\t  operands[4] = gen_rtx_SIGN_EXTEND (<VEL>mode,\n+\t\tforce_reg (Pmode, operands[4]));\n+\telse\n+\t  {\n+\t    if (CONST_INT_P (operands[4]))\n+\t      operands[4] = force_reg (<VEL>mode, operands[4]);\n+\n+\t    riscv_vector::emit_nonvlmax_op (code_for_pred_broadcast (<MODE>mode),\n+\t\t\tv, operands[4], operands[5], <VM>mode);\n+\t    emit_insn (gen_pred_<optab><mode> (operands[0], operands[1],\n+\t\t\toperands[2], operands[3], v, operands[5],\n+\t\t\toperands[6], operands[7], operands[8]));\n+\t    DONE;\n+\t  }\n+      }\n+    else\n+      operands[4] = force_reg (<VEL>mode, operands[4]);\n+  })\n+\n+(define_insn \"*pred_<optab><mode>_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\"         \"=vd, vr\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (sat_int_plus_binop:VI_D\n+\t    (vec_duplicate:VI_D\n+\t      (match_operand:<VEL> 4 \"register_operand\"  \"  r,  r\"))\n+\t    (match_operand:VI_D 3 \"register_operand\"     \" vr, vr\"))\n+\t  (match_operand:VI_D 2 \"vector_merge_operand\"   \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"v<insn>.vx\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"<int_binop_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*pred_<optab><mode>_extended_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\"             \"=vd, vr\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"     \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"        \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"            \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"            \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"            \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (sat_int_plus_binop:VI_D\n+\t    (vec_duplicate:VI_D\n+\t      (sign_extend:<VEL>\n+\t        (match_operand:<VSUBEL> 4 \"register_operand\" \"  r,  r\")))\n+\t    (match_operand:VI_D 3 \"register_operand\"         \" vr, vr\"))\n+\t  (match_operand:VI_D 2 \"vector_merge_operand\"       \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"v<insn>.vx\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"<int_binop_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_expand \"@pred_<optab><mode>_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\")\n+\t     (match_operand 5 \"vector_length_operand\")\n+\t     (match_operand 6 \"const_int_operand\")\n+\t     (match_operand 7 \"const_int_operand\")\n+\t     (match_operand 8 \"const_int_operand\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (sat_int_minus_binop:VI_D\n+\t    (match_operand:VI_D 3 \"register_operand\")\n+\t    (vec_duplicate:VI_D\n+\t      (match_operand:<VEL> 4 \"reg_or_int_operand\")))\n+\t  (match_operand:VI_D 2 \"vector_merge_operand\")))]\n+  \"TARGET_VECTOR\"\n+  {\n+    if (riscv_vector::has_vi_variant_p (<CODE>, operands[4]))\n+      operands[4] = force_reg (<VEL>mode, operands[4]);\n+    else if (!TARGET_64BIT)\n+      {\n+\trtx v = gen_reg_rtx (<MODE>mode);\n+\n+\tif (immediate_operand (operands[4], Pmode))\n+\t  operands[4] = gen_rtx_SIGN_EXTEND (<VEL>mode,\n+\t\tforce_reg (Pmode, operands[4]));\n+\telse\n+\t  {\n+\t    if (CONST_INT_P (operands[4]))\n+\t      operands[4] = force_reg (<VEL>mode, operands[4]);\n+\n+\t    riscv_vector::emit_nonvlmax_op (code_for_pred_broadcast (<MODE>mode),\n+\t\t\tv, operands[4], operands[5], <VM>mode);\n+\t    emit_insn (gen_pred_<optab><mode> (operands[0], operands[1],\n+\t\t\toperands[2], operands[3], v, operands[5],\n+\t\t\toperands[6], operands[7], operands[8]));\n+\t    DONE;\n+\t  }\n+      }\n+    else\n+      operands[4] = force_reg (<VEL>mode, operands[4]);\n+  })\n+\n+(define_insn \"*pred_<optab><mode>_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\"         \"=vd, vr\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (sat_int_minus_binop:VI_D\n+\t    (match_operand:VI_D 3 \"register_operand\"     \" vr, vr\")\n+\t    (vec_duplicate:VI_D\n+\t      (match_operand:<VEL> 4 \"register_operand\"  \"  r,  r\")))\n+\t  (match_operand:VI_D 2 \"vector_merge_operand\"   \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"v<insn>.vx\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"<int_binop_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*pred_<optab><mode>_extended_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\"             \"=vd, vr\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"     \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"        \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"            \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"            \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"            \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (sat_int_minus_binop:VI_D\n+\t    (match_operand:VI_D 3 \"register_operand\"         \" vr, vr\")\n+\t    (vec_duplicate:VI_D\n+\t      (sign_extend:<VEL>\n+\t        (match_operand:<VSUBEL> 4 \"register_operand\" \"  r,  r\"))))\n+\t  (match_operand:VI_D 2 \"vector_merge_operand\"       \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"v<insn>.vx\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"<int_binop_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"@pred_<sat_op><mode>\"\n   [(set (match_operand:VI 0 \"register_operand\"           \"=vd, vr\")\n \t(if_then_else:VI"}]}