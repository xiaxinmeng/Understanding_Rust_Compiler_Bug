{"sha": "fb18c0c9fe26a77541dd63ca351832194969bef9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIxOGMwYzlmZTI2YTc3NTQxZGQ2M2NhMzUxODMyMTk0OTY5YmVmOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-06-28T06:21:13Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-06-28T06:21:13Z"}, "message": "tree-inline.c (remap_gimple_stmt): Force input_location on the new statement if id->reset_location is true.\n\n\t* tree-inline.c (remap_gimple_stmt): Force input_location on the new\n\tstatement if id->reset_location is true.\n\t(copy_edges_for_bb): Do not set goto_locus on the new edges if\n\tid->reset_location is true.\n\t(copy_phis_for_bb): Force input_location on the arguments if\n\tid->reset_location is true.\n\t(expand_call_inline): Set id->reset_location if DECL_IGNORED_P\n\tis set on the function to be inlined.\n\t* tree-inline.h (struct copy_body_data): Move remapping_type_depth and\n\tprevent_decl_creation_for_types fields up and add reset_location field.\n\nFrom-SVN: r262207", "tree": {"sha": "48aa3b3611869946b4547113caed9fe78e209832", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48aa3b3611869946b4547113caed9fe78e209832"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb18c0c9fe26a77541dd63ca351832194969bef9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb18c0c9fe26a77541dd63ca351832194969bef9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb18c0c9fe26a77541dd63ca351832194969bef9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb18c0c9fe26a77541dd63ca351832194969bef9/comments", "author": null, "committer": null, "parents": [{"sha": "09e1386fd0c6de42272edc9bb0a4b7c2e193b7a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09e1386fd0c6de42272edc9bb0a4b7c2e193b7a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09e1386fd0c6de42272edc9bb0a4b7c2e193b7a7"}], "stats": {"total": 78, "additions": 66, "deletions": 12}, "files": [{"sha": "91ccb225b315d6f937573e50a0eb7dbe9a4866e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb18c0c9fe26a77541dd63ca351832194969bef9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb18c0c9fe26a77541dd63ca351832194969bef9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb18c0c9fe26a77541dd63ca351832194969bef9", "patch": "@@ -1,3 +1,16 @@\n+2018-06-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-inline.c (remap_gimple_stmt): Force input_location on the new\n+\tstatement if id->reset_location is true.\n+\t(copy_edges_for_bb): Do not set goto_locus on the new edges if\n+\tid->reset_location is true.\n+\t(copy_phis_for_bb): Force input_location on the arguments if\n+\tid->reset_location is true.\n+\t(expand_call_inline): Set id->reset_location if DECL_IGNORED_P\n+\tis set on the function to be inlined.\n+\t* tree-inline.h (struct copy_body_data): Move remapping_type_depth and\n+\tprevent_decl_creation_for_types fields up and add reset_location field.\n+\n 2018-06-27  Stephan Bergmann  <sbergman@redhat.com>\n \n \t* doc/invoke.texi (Debugging Options): Add -gsplit-dwarf."}, {"sha": "1350260009487131b967489ab1ce03edfd2dcce7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb18c0c9fe26a77541dd63ca351832194969bef9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb18c0c9fe26a77541dd63ca351832194969bef9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fb18c0c9fe26a77541dd63ca351832194969bef9", "patch": "@@ -1,12 +1,14 @@\n+2018-06-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/debug15.adb: New test.\n+\n 2018-06-27  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/86329\n \t* g++.dg/lookup/pr86329.C: New test.\n \n 2018-06-27  Carl Love  <cel@us.ibm.com>\n \n-Add test case that was supposed to be added in commit 255556 on 2017-12-11.\n-\n \t* gcc.target/vsx-vector-abss.c: New file to test vec_abss.\n \n 2018-06-27 Tamar Christina  <tamar.christina@arm.com>"}, {"sha": "75470e3c319751e0f7924367532217d788cdcf2d", "filename": "gcc/testsuite/gnat.dg/debug15.adb", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb18c0c9fe26a77541dd63ca351832194969bef9/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug15.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb18c0c9fe26a77541dd63ca351832194969bef9/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug15.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug15.adb?ref=fb18c0c9fe26a77541dd63ca351832194969bef9", "patch": "@@ -0,0 +1,23 @@\n+-- { dg-do compile }\n+-- { dg-options \"-g1\" }\n+\n+procedure Debug15 is\n+\n+   type Shape is abstract tagged record\n+      S : Integer;\n+   end record;\n+\n+   type Rectangle is new Shape with record\n+      R : Integer;\n+   end record;\n+\n+   X : Integer;\n+\n+   R: Rectangle := (1, 2);\n+   S: Shape'Class := R;\n+\n+begin\n+   X := 12;\n+end;\n+\n+-- { dg-final { scan-assembler-not \"loc 2\" } }"}, {"sha": "427ef959740b10d8aebfc33976a7266008fbb0da", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb18c0c9fe26a77541dd63ca351832194969bef9/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb18c0c9fe26a77541dd63ca351832194969bef9/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=fb18c0c9fe26a77541dd63ca351832194969bef9", "patch": "@@ -1630,6 +1630,8 @@ remap_gimple_stmt (gimple *stmt, copy_body_data *id)\n \t    = gimple_build_debug_bind (gimple_debug_bind_get_var (stmt),\n \t\t\t\t       gimple_debug_bind_get_value (stmt),\n \t\t\t\t       stmt);\n+\t  if (id->reset_location)\n+\t    gimple_set_location (copy, input_location);\n \t  id->debug_stmts.safe_push (copy);\n \t  gimple_seq_add_stmt (&stmts, copy);\n \t  return stmts;\n@@ -1640,6 +1642,8 @@ remap_gimple_stmt (gimple *stmt, copy_body_data *id)\n \t                   (gimple_debug_source_bind_get_var (stmt),\n \t\t\t    gimple_debug_source_bind_get_value (stmt),\n \t\t\t    stmt);\n+\t  if (id->reset_location)\n+\t    gimple_set_location (copy, input_location);\n \t  id->debug_stmts.safe_push (copy);\n \t  gimple_seq_add_stmt (&stmts, copy);\n \t  return stmts;\n@@ -1653,6 +1657,8 @@ remap_gimple_stmt (gimple *stmt, copy_body_data *id)\n \t    return stmts;\n \n \t  gdebug *copy = as_a <gdebug *> (gimple_copy (stmt));\n+\t  if (id->reset_location)\n+\t    gimple_set_location (copy, input_location);\n \t  id->debug_stmts.safe_push (copy);\n \t  gimple_seq_add_stmt (&stmts, copy);\n \t  return stmts;\n@@ -1751,6 +1757,9 @@ remap_gimple_stmt (gimple *stmt, copy_body_data *id)\n       gimple_set_block (copy, *n);\n     }\n \n+  if (id->reset_location)\n+    gimple_set_location (copy, input_location);\n+\n   /* Debug statements ought to be rebuilt and not copied.  */\n   gcc_checking_assert (!is_gimple_debug (copy));\n \n@@ -2178,7 +2187,8 @@ copy_edges_for_bb (basic_block bb, profile_count num, profile_count den,\n \tnew_edge\n \t  = make_edge (new_bb, (basic_block) old_edge->dest->aux, flags);\n \tnew_edge->probability = old_edge->probability;\n-\tnew_edge->goto_locus = remap_location (locus, id);\n+\tif (!id->reset_location)\n+\t  new_edge->goto_locus = remap_location (locus, id);\n       }\n \n   if (bb->index == ENTRY_BLOCK || bb->index == EXIT_BLOCK)\n@@ -2375,7 +2385,10 @@ copy_phis_for_bb (basic_block bb, copy_body_data *id)\n \t\t      inserted = true;\n \t\t    }\n \t\t  locus = gimple_phi_arg_location_from_edge (phi, old_edge);\n-\t\t  locus = remap_location (locus, id);\n+\t\t  if (id->reset_location)\n+\t\t    locus = input_location;\n+\t\t  else\n+\t\t    locus = remap_location (locus, id);\n \t\t  add_phi_arg (new_phi, new_arg, new_edge, locus);\n \t\t}\n \t    }\n@@ -4499,8 +4512,7 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n       prepend_lexical_block (gimple_block (stmt), id->block);\n     }\n \n-  /* Local declarations will be replaced by their equivalents in this\n-     map.  */\n+  /* Local declarations will be replaced by their equivalents in this map.  */\n   st = id->decl_map;\n   id->decl_map = new hash_map<tree, tree>;\n   dst = id->debug_map;\n@@ -4509,6 +4521,7 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n   /* Record the function we are about to inline.  */\n   id->src_fn = fn;\n   id->src_cfun = DECL_STRUCT_FUNCTION (fn);\n+  id->reset_location = DECL_IGNORED_P (fn);\n   id->call_stmt = call_stmt;\n \n   /* When inlining into an OpenMP SIMD-on-SIMT loop, arrange for new automatic"}, {"sha": "29caab7115476f6edb509a54743cf4cfa4f0c8a6", "filename": "gcc/tree-inline.h", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb18c0c9fe26a77541dd63ca351832194969bef9/gcc%2Ftree-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb18c0c9fe26a77541dd63ca351832194969bef9/gcc%2Ftree-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.h?ref=fb18c0c9fe26a77541dd63ca351832194969bef9", "patch": "@@ -80,6 +80,9 @@ struct copy_body_data\n      is not.  */\n   gcall *call_stmt;\n \n+  /* > 0 if we are remapping a type currently.  */\n+  int remapping_type_depth;\n+\n   /* Exception landing pad the inlined call lies in.  */\n   int eh_lp_nr;\n \n@@ -110,11 +113,14 @@ struct copy_body_data\n   /* True if this statement will need to be regimplified.  */\n   bool regimplify;\n \n-  /* True if trees should not be unshared.  */\n+  /* True if trees may not be unshared.  */\n   bool do_not_unshare;\n \n-  /* > 0 if we are remapping a type currently.  */\n-  int remapping_type_depth;\n+  /* True if new declarations may not be created during type remapping.  */\n+  bool prevent_decl_creation_for_types;\n+\n+  /* True if the location information will need to be reset.  */\n+  bool reset_location;\n \n   /* A function to be called when duplicating BLOCK nodes.  */\n   void (*transform_lang_insert_block) (tree);\n@@ -145,9 +151,6 @@ struct copy_body_data\n   /* A list of addressable local variables remapped into the caller\n      when inlining a call within an OpenMP SIMD-on-SIMT loop.  */\n   vec<tree> *dst_simt_vars;\n-\n-  /* Do not create new declarations when within type remapping.  */\n-  bool prevent_decl_creation_for_types;\n };\n \n /* Weights of constructions for estimate_num_insns.  */"}]}