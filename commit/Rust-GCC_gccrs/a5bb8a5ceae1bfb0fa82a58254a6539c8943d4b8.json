{"sha": "a5bb8a5ceae1bfb0fa82a58254a6539c8943d4b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTViYjhhNWNlYWUxYmZiMGZhODJhNTgyNTRhNjUzOWM4OTQzZDRiOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-11-23T10:52:25Z"}, "committer": {"name": "Prathamesh Kulkarni", "email": "prathamesh3492@gcc.gnu.org", "date": "2016-11-23T10:52:25Z"}, "message": "re PR tree-optimization/78154 (memcpy et al can be assumed to return non-null)\n\n2016-11-23  Richard Biener  <rguenther@suse.de>\n\t    Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.rog>\n\n\tPR tree-optimization/78154\n\t* tree-vrp.c (gimple_stmt_nonzero_warnv_p): Return true if function\n\treturns it's argument and the argument is nonnull.\n\t* builtin-attrs.def: Define ATTR_RETURNS_NONNULL,\n\tATT_RETNONNULL_NOTHROW_LEAF.\n\t* builtins.def (BUILT_IN_MEMPCPY): Change attribute to\n\tATTR_RETNONNULL_NOTHROW_LEAF.\n\t(BUILT_IN_STPCPY): Likewise.\n\t(BUILT_IN_STPNCPY): Likewise.\n\t(BUILT_IN_MEMPCPY_CHK): Likewise.\n\t(BUILT_IN_STPCPY_CHK): Likewise.\n\t(BUILT_IN_STPNCPY_CHK): Likewise.\n\t(BUILT_IN_STRCAT): Change attribute to ATTR_RET1_NOTHROW_NONNULL_LEAF.\n\t(BUILT_IN_STRNCAT): Likewise.\n\t(BUILT_IN_STRNCPY): Likewise.\n\t(BUILT_IN_MEMSET_CHK): Likewise.\n\t(BUILT_IN_STRCAT_CHK): Likewise.\n\t(BUILT_IN_STRCPY_CHK): Likewise.\n\t(BUILT_IN_STRNCAT_CHK): Likewise.\n\t(BUILT_IN_STRNCPY_CHK): Likewise.\n\ntestsuite/\n\t* gcc.dg/tree-ssa/pr78154.c: New test.\n\nCo-Authored-By: Prathamesh Kulkarni <prathamesh.kulkarni@linaro.org>\n\nFrom-SVN: r242745", "tree": {"sha": "5a77749307568d49ccaaa49d8f07d74ede803967", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a77749307568d49ccaaa49d8f07d74ede803967"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5bb8a5ceae1bfb0fa82a58254a6539c8943d4b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5bb8a5ceae1bfb0fa82a58254a6539c8943d4b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5bb8a5ceae1bfb0fa82a58254a6539c8943d4b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5bb8a5ceae1bfb0fa82a58254a6539c8943d4b8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e36c1cfe080b1f8150e28eb45ef8e190df1dd6ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e36c1cfe080b1f8150e28eb45ef8e190df1dd6ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e36c1cfe080b1f8150e28eb45ef8e190df1dd6ef"}], "stats": {"total": 120, "additions": 106, "deletions": 14}, "files": [{"sha": "7c7ff4c61bef2ee387a38a9aed3dade08f729182", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5bb8a5ceae1bfb0fa82a58254a6539c8943d4b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5bb8a5ceae1bfb0fa82a58254a6539c8943d4b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5bb8a5ceae1bfb0fa82a58254a6539c8943d4b8", "patch": "@@ -1,3 +1,27 @@\n+2016-11-23  Richard Biener  <rguenther@suse.de>\n+\t    Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.rog>\n+\n+\tPR tree-optimization/78154\n+\t* tree-vrp.c (gimple_stmt_nonzero_warnv_p): Return true if function\n+\treturns it's argument and the argument is nonnull.\n+\t* builtin-attrs.def: Define ATTR_RETURNS_NONNULL,\n+\tATT_RETNONNULL_NOTHROW_LEAF.\n+\t* builtins.def (BUILT_IN_MEMPCPY): Change attribute to\n+\tATTR_RETNONNULL_NOTHROW_LEAF.\n+\t(BUILT_IN_STPCPY): Likewise.\n+\t(BUILT_IN_STPNCPY): Likewise.\n+\t(BUILT_IN_MEMPCPY_CHK): Likewise.\n+\t(BUILT_IN_STPCPY_CHK): Likewise.\n+\t(BUILT_IN_STPNCPY_CHK): Likewise.\n+\t(BUILT_IN_STRCAT): Change attribute to ATTR_RET1_NOTHROW_NONNULL_LEAF.\n+\t(BUILT_IN_STRNCAT): Likewise.\n+\t(BUILT_IN_STRNCPY): Likewise.\n+\t(BUILT_IN_MEMSET_CHK): Likewise.\n+\t(BUILT_IN_STRCAT_CHK): Likewise.\n+\t(BUILT_IN_STRCPY_CHK): Likewise.\n+\t(BUILT_IN_STRNCAT_CHK): Likewise.\n+\t(BUILT_IN_STRNCPY_CHK): Likewise.\n+\n 2016-11-23  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n \n \t* fold-const.c (tree_expr_nonzero_p) : Make non-static."}, {"sha": "88c9bd1f495a865435794f0bc4bb27bede6d6f86", "filename": "gcc/builtin-attrs.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5bb8a5ceae1bfb0fa82a58254a6539c8943d4b8/gcc%2Fbuiltin-attrs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5bb8a5ceae1bfb0fa82a58254a6539c8943d4b8/gcc%2Fbuiltin-attrs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-attrs.def?ref=a5bb8a5ceae1bfb0fa82a58254a6539c8943d4b8", "patch": "@@ -108,6 +108,7 @@ DEF_ATTR_IDENT (ATTR_TYPEGENERIC, \"type generic\")\n DEF_ATTR_IDENT (ATTR_TM_REGPARM, \"*tm regparm\")\n DEF_ATTR_IDENT (ATTR_TM_TMPURE, \"transaction_pure\")\n DEF_ATTR_IDENT (ATTR_RETURNS_TWICE, \"returns_twice\")\n+DEF_ATTR_IDENT (ATTR_RETURNS_NONNULL, \"returns_nonnull\")\n \n DEF_ATTR_TREE_LIST (ATTR_NOVOPS_LIST, ATTR_NOVOPS, ATTR_NULL, ATTR_NULL)\n \n@@ -197,6 +198,10 @@ DEF_ATTR_TREE_LIST (ATTR_CONST_NOTHROW_NONNULL, ATTR_CONST, ATTR_NULL, \\\n    and which return their first argument.  */\n DEF_ATTR_TREE_LIST (ATTR_RET1_NOTHROW_NONNULL_LEAF, ATTR_FNSPEC, ATTR_LIST_STR1, \\\n \t\t\tATTR_NOTHROW_NONNULL_LEAF)\n+/* Nothrow leaf functions whose pointer parameter(s) are all nonnull,\n+   and return value is also nonnull.  */\n+DEF_ATTR_TREE_LIST (ATTR_RETNONNULL_NOTHROW_LEAF, ATTR_RETURNS_NONNULL, ATTR_NULL, \\\n+\t\t\tATTR_NOTHROW_NONNULL_LEAF)\n /* Nothrow const leaf functions whose pointer parameter(s) are all nonnull.  */\n DEF_ATTR_TREE_LIST (ATTR_CONST_NOTHROW_NONNULL_LEAF, ATTR_CONST, ATTR_NULL, \\\n \t\t\tATTR_NOTHROW_NONNULL_LEAF)"}, {"sha": "151836a797f04b0c28b5d2a0f0b4510639c27f86", "filename": "gcc/builtins.def", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5bb8a5ceae1bfb0fa82a58254a6539c8943d4b8/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5bb8a5ceae1bfb0fa82a58254a6539c8943d4b8/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=a5bb8a5ceae1bfb0fa82a58254a6539c8943d4b8", "patch": "@@ -646,13 +646,13 @@ DEF_LIB_BUILTIN        (BUILT_IN_MEMCHR, \"memchr\", BT_FN_PTR_CONST_PTR_INT_SIZE,\n DEF_LIB_BUILTIN        (BUILT_IN_MEMCMP, \"memcmp\", BT_FN_INT_CONST_PTR_CONST_PTR_SIZE, ATTR_PURE_NOTHROW_NONNULL_LEAF)\n DEF_LIB_BUILTIN_CHKP   (BUILT_IN_MEMCPY, \"memcpy\", BT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n DEF_LIB_BUILTIN_CHKP   (BUILT_IN_MEMMOVE, \"memmove\", BT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n-DEF_EXT_LIB_BUILTIN_CHKP (BUILT_IN_MEMPCPY, \"mempcpy\", BT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_NOTHROW_NONNULL_LEAF)\n+DEF_EXT_LIB_BUILTIN_CHKP (BUILT_IN_MEMPCPY, \"mempcpy\", BT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_RETNONNULL_NOTHROW_LEAF)\n DEF_LIB_BUILTIN_CHKP   (BUILT_IN_MEMSET, \"memset\", BT_FN_PTR_PTR_INT_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_RINDEX, \"rindex\", BT_FN_STRING_CONST_STRING_INT, ATTR_PURE_NOTHROW_NONNULL_LEAF)\n-DEF_EXT_LIB_BUILTIN_CHKP (BUILT_IN_STPCPY, \"stpcpy\", BT_FN_STRING_STRING_CONST_STRING, ATTR_NOTHROW_NONNULL_LEAF)\n-DEF_EXT_LIB_BUILTIN    (BUILT_IN_STPNCPY, \"stpncpy\", BT_FN_STRING_STRING_CONST_STRING_SIZE, ATTR_NOTHROW_NONNULL_LEAF)\n+DEF_EXT_LIB_BUILTIN_CHKP (BUILT_IN_STPCPY, \"stpcpy\", BT_FN_STRING_STRING_CONST_STRING, ATTR_RETNONNULL_NOTHROW_LEAF)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_STPNCPY, \"stpncpy\", BT_FN_STRING_STRING_CONST_STRING_SIZE, ATTR_RETNONNULL_NOTHROW_LEAF)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_STRCASECMP, \"strcasecmp\", BT_FN_INT_CONST_STRING_CONST_STRING, ATTR_PURE_NOTHROW_NONNULL_LEAF)\n-DEF_LIB_BUILTIN_CHKP   (BUILT_IN_STRCAT, \"strcat\", BT_FN_STRING_STRING_CONST_STRING, ATTR_NOTHROW_NONNULL_LEAF)\n+DEF_LIB_BUILTIN_CHKP   (BUILT_IN_STRCAT, \"strcat\", BT_FN_STRING_STRING_CONST_STRING, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n DEF_LIB_BUILTIN_CHKP   (BUILT_IN_STRCHR, \"strchr\", BT_FN_STRING_CONST_STRING_INT, ATTR_PURE_NOTHROW_NONNULL_LEAF)\n DEF_LIB_BUILTIN        (BUILT_IN_STRCMP, \"strcmp\", BT_FN_INT_CONST_STRING_CONST_STRING, ATTR_PURE_NOTHROW_NONNULL_LEAF)\n DEF_LIB_BUILTIN_CHKP   (BUILT_IN_STRCPY, \"strcpy\", BT_FN_STRING_STRING_CONST_STRING, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n@@ -661,9 +661,9 @@ DEF_EXT_LIB_BUILTIN    (BUILT_IN_STRDUP, \"strdup\", BT_FN_STRING_CONST_STRING, AT\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_STRNDUP, \"strndup\", BT_FN_STRING_CONST_STRING_SIZE, ATTR_MALLOC_NOTHROW_NONNULL_LEAF)\n DEF_LIB_BUILTIN_CHKP   (BUILT_IN_STRLEN, \"strlen\", BT_FN_SIZE_CONST_STRING, ATTR_PURE_NOTHROW_NONNULL_LEAF)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_STRNCASECMP, \"strncasecmp\", BT_FN_INT_CONST_STRING_CONST_STRING_SIZE, ATTR_PURE_NOTHROW_NONNULL_LEAF)\n-DEF_LIB_BUILTIN        (BUILT_IN_STRNCAT, \"strncat\", BT_FN_STRING_STRING_CONST_STRING_SIZE, ATTR_NOTHROW_NONNULL_LEAF)\n+DEF_LIB_BUILTIN        (BUILT_IN_STRNCAT, \"strncat\", BT_FN_STRING_STRING_CONST_STRING_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n DEF_LIB_BUILTIN        (BUILT_IN_STRNCMP, \"strncmp\", BT_FN_INT_CONST_STRING_CONST_STRING_SIZE, ATTR_PURE_NOTHROW_NONNULL_LEAF)\n-DEF_LIB_BUILTIN        (BUILT_IN_STRNCPY, \"strncpy\", BT_FN_STRING_STRING_CONST_STRING_SIZE, ATTR_NOTHROW_NONNULL_LEAF)\n+DEF_LIB_BUILTIN        (BUILT_IN_STRNCPY, \"strncpy\", BT_FN_STRING_STRING_CONST_STRING_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n DEF_LIB_BUILTIN        (BUILT_IN_STRPBRK, \"strpbrk\", BT_FN_STRING_CONST_STRING_CONST_STRING, ATTR_PURE_NOTHROW_NONNULL_LEAF)\n DEF_LIB_BUILTIN        (BUILT_IN_STRRCHR, \"strrchr\", BT_FN_STRING_CONST_STRING_INT, ATTR_PURE_NOTHROW_NONNULL_LEAF)\n DEF_LIB_BUILTIN        (BUILT_IN_STRSPN, \"strspn\", BT_FN_SIZE_CONST_STRING_CONST_STRING, ATTR_PURE_NOTHROW_NONNULL_LEAF)\n@@ -904,14 +904,14 @@ DEF_BUILTIN_STUB (BUILT_IN_MEMCMP_EQ, \"__builtin_memcmp_eq\")\n DEF_GCC_BUILTIN\t       (BUILT_IN_OBJECT_SIZE, \"object_size\", BT_FN_SIZE_CONST_PTR_INT, ATTR_PURE_NOTHROW_LEAF_LIST)\n DEF_EXT_LIB_BUILTIN_CHKP (BUILT_IN_MEMCPY_CHK, \"__memcpy_chk\", BT_FN_PTR_PTR_CONST_PTR_SIZE_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n DEF_EXT_LIB_BUILTIN_CHKP (BUILT_IN_MEMMOVE_CHK, \"__memmove_chk\", BT_FN_PTR_PTR_CONST_PTR_SIZE_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n-DEF_EXT_LIB_BUILTIN_CHKP (BUILT_IN_MEMPCPY_CHK, \"__mempcpy_chk\", BT_FN_PTR_PTR_CONST_PTR_SIZE_SIZE, ATTR_NOTHROW_NONNULL_LEAF)\n-DEF_EXT_LIB_BUILTIN_CHKP (BUILT_IN_MEMSET_CHK, \"__memset_chk\", BT_FN_PTR_PTR_INT_SIZE_SIZE, ATTR_NOTHROW_NONNULL_LEAF)\n-DEF_EXT_LIB_BUILTIN_CHKP (BUILT_IN_STPCPY_CHK, \"__stpcpy_chk\", BT_FN_STRING_STRING_CONST_STRING_SIZE, ATTR_NOTHROW_NONNULL_LEAF)\n-DEF_EXT_LIB_BUILTIN    (BUILT_IN_STPNCPY_CHK, \"__stpncpy_chk\", BT_FN_STRING_STRING_CONST_STRING_SIZE_SIZE, ATTR_NOTHROW_NONNULL_LEAF)\n-DEF_EXT_LIB_BUILTIN_CHKP (BUILT_IN_STRCAT_CHK, \"__strcat_chk\", BT_FN_STRING_STRING_CONST_STRING_SIZE, ATTR_NOTHROW_NONNULL_LEAF)\n-DEF_EXT_LIB_BUILTIN_CHKP (BUILT_IN_STRCPY_CHK, \"__strcpy_chk\", BT_FN_STRING_STRING_CONST_STRING_SIZE, ATTR_NOTHROW_NONNULL_LEAF)\n-DEF_EXT_LIB_BUILTIN    (BUILT_IN_STRNCAT_CHK, \"__strncat_chk\", BT_FN_STRING_STRING_CONST_STRING_SIZE_SIZE, ATTR_NOTHROW_NONNULL_LEAF)\n-DEF_EXT_LIB_BUILTIN    (BUILT_IN_STRNCPY_CHK, \"__strncpy_chk\", BT_FN_STRING_STRING_CONST_STRING_SIZE_SIZE, ATTR_NOTHROW_NONNULL_LEAF)\n+DEF_EXT_LIB_BUILTIN_CHKP (BUILT_IN_MEMPCPY_CHK, \"__mempcpy_chk\", BT_FN_PTR_PTR_CONST_PTR_SIZE_SIZE, ATTR_RETNONNULL_NOTHROW_LEAF)\n+DEF_EXT_LIB_BUILTIN_CHKP (BUILT_IN_MEMSET_CHK, \"__memset_chk\", BT_FN_PTR_PTR_INT_SIZE_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n+DEF_EXT_LIB_BUILTIN_CHKP (BUILT_IN_STPCPY_CHK, \"__stpcpy_chk\", BT_FN_STRING_STRING_CONST_STRING_SIZE, ATTR_RETNONNULL_NOTHROW_LEAF)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_STPNCPY_CHK, \"__stpncpy_chk\", BT_FN_STRING_STRING_CONST_STRING_SIZE_SIZE, ATTR_RETNONNULL_NOTHROW_LEAF)\n+DEF_EXT_LIB_BUILTIN_CHKP (BUILT_IN_STRCAT_CHK, \"__strcat_chk\", BT_FN_STRING_STRING_CONST_STRING_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n+DEF_EXT_LIB_BUILTIN_CHKP (BUILT_IN_STRCPY_CHK, \"__strcpy_chk\", BT_FN_STRING_STRING_CONST_STRING_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_STRNCAT_CHK, \"__strncat_chk\", BT_FN_STRING_STRING_CONST_STRING_SIZE_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_STRNCPY_CHK, \"__strncpy_chk\", BT_FN_STRING_STRING_CONST_STRING_SIZE_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_SNPRINTF_CHK, \"__snprintf_chk\", BT_FN_INT_STRING_SIZE_INT_SIZE_CONST_STRING_VAR, ATTR_FORMAT_PRINTF_NOTHROW_5_6)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_SPRINTF_CHK, \"__sprintf_chk\", BT_FN_INT_STRING_INT_SIZE_CONST_STRING_VAR, ATTR_FORMAT_PRINTF_NOTHROW_4_5)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_VSNPRINTF_CHK, \"__vsnprintf_chk\", BT_FN_INT_STRING_SIZE_INT_SIZE_CONST_STRING_VALIST_ARG, ATTR_FORMAT_PRINTF_NOTHROW_5_0)"}, {"sha": "bb502baf72db54ffa40e85b613eb0f06af65a9a7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5bb8a5ceae1bfb0fa82a58254a6539c8943d4b8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5bb8a5ceae1bfb0fa82a58254a6539c8943d4b8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a5bb8a5ceae1bfb0fa82a58254a6539c8943d4b8", "patch": "@@ -1,3 +1,9 @@\n+2016-11-23  Richard Biener  <rguenther@suse.de>\n+\t    Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.rog>\n+\n+\t    PR tree-optimization/78154\n+\t    * gcc.dg/tree-ssa/pr78154.c: New test.\n+\n 2016-11-23  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n \n \t* gcc.dg/pr31096.c: New testcase."}, {"sha": "d908a39dcd6c91fee36895c521ece7e4bfa93620", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr78154.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5bb8a5ceae1bfb0fa82a58254a6539c8943d4b8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr78154.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5bb8a5ceae1bfb0fa82a58254a6539c8943d4b8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr78154.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr78154.c?ref=a5bb8a5ceae1bfb0fa82a58254a6539c8943d4b8", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-evrp-slim\" } */\n+\n+void f(void *d, const void *s, __SIZE_TYPE__ n)\n+{\n+  void *t1 = __builtin_memcpy (d, s, n);\n+  if (t1 == 0)\n+    __builtin_abort ();\n+\n+  void *t2 = __builtin_memmove (d, s, n);\n+  if (t2 == 0)\n+    __builtin_abort ();\n+\n+  void *t3 = __builtin_memset (d, 0, n);\n+  if (t3 == 0)\n+    __builtin_abort ();\n+\n+  void *t4 = __builtin_strcpy (d, s);\n+  if (t4 == 0)\n+    __builtin_abort ();\n+\n+  void *t5 = __builtin_strncpy (d, s, n);\n+  if (t5 == 0)\n+    __builtin_abort ();\n+\n+  void *t6 = __builtin_strcat (d, s);\n+  if (t6 == 0)\n+    __builtin_abort ();\n+\n+  void *t7 = __builtin_strncat (d, s, n);\n+  if (t7 == 0)\n+    __builtin_abort ();\n+\n+  void *t8 = __builtin_stpcpy (d, s);\n+  if (t8 == 0)\n+    __builtin_abort ();\n+\n+  void *t9 = __builtin_stpncpy (d, s, n);\n+  if (t9 == 0)\n+    __builtin_abort ();\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"__builtin_abort\" \"evrp\" } } */"}, {"sha": "5bd4418eea321cf4cedf910574f795775b4c7fb5", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5bb8a5ceae1bfb0fa82a58254a6539c8943d4b8/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5bb8a5ceae1bfb0fa82a58254a6539c8943d4b8/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=a5bb8a5ceae1bfb0fa82a58254a6539c8943d4b8", "patch": "@@ -1097,6 +1097,20 @@ gimple_stmt_nonzero_warnv_p (gimple *stmt, bool *strict_overflow_p)\n \t    lookup_attribute (\"returns_nonnull\",\n \t\t\t      TYPE_ATTRIBUTES (gimple_call_fntype (stmt))))\n \t  return true;\n+\n+\tgcall *call_stmt = as_a<gcall *> (stmt);\n+\tunsigned rf = gimple_call_return_flags (call_stmt);\n+\tif (rf & ERF_RETURNS_ARG)\n+\t  {\n+\t    unsigned argnum = rf & ERF_RETURN_ARG_MASK;\n+\t    if (argnum < gimple_call_num_args (call_stmt))\n+\t      {\n+\t\ttree arg = gimple_call_arg (call_stmt, argnum);\n+\t\tif (SSA_VAR_P (arg)\n+\t\t    && infer_nonnull_range_by_attribute (stmt, arg))\n+\t\t  return true;\n+\t      }\n+\t  }\n \treturn gimple_alloca_call_p (stmt);\n       }\n     default:"}]}