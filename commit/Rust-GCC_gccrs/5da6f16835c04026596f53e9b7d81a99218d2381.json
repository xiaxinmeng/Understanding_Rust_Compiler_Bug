{"sha": "5da6f16835c04026596f53e9b7d81a99218d2381", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRhNmYxNjgzNWMwNDAyNjU5NmY1M2U5YjdkODFhOTkyMThkMjM4MQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-03-18T17:56:12Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-03-18T17:56:12Z"}, "message": "alias.c (record_set): Detect the case where a register is assigned a new value that has the same base...\n\n\t* alias.c (record_set): Detect the case where a register is assigned\n\ta new value that has the same base term as the old one.\n\nFrom-SVN: r79629", "tree": {"sha": "05697b0ec31bd950a670489cf27f0b3075ee6055", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05697b0ec31bd950a670489cf27f0b3075ee6055"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5da6f16835c04026596f53e9b7d81a99218d2381", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5da6f16835c04026596f53e9b7d81a99218d2381", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5da6f16835c04026596f53e9b7d81a99218d2381", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5da6f16835c04026596f53e9b7d81a99218d2381/comments", "author": null, "committer": null, "parents": [{"sha": "acc63e4c3d942fc6669ee990f0c43b15c41c0592", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acc63e4c3d942fc6669ee990f0c43b15c41c0592", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acc63e4c3d942fc6669ee990f0c43b15c41c0592"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "60791f0fcac57c29f1ac4ad96021f24f1ba54c07", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5da6f16835c04026596f53e9b7d81a99218d2381/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5da6f16835c04026596f53e9b7d81a99218d2381/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5da6f16835c04026596f53e9b7d81a99218d2381", "patch": "@@ -1,3 +1,8 @@\n+2004-03-18  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* alias.c (record_set): Detect the case where a register is assigned\n+\ta new value that has the same base term as the old one.\n+\n 2004-03-18  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \t* doloop.c: Removed."}, {"sha": "58ec82d8b86257ca7742fe4a36e9b0d18d113018", "filename": "gcc/alias.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5da6f16835c04026596f53e9b7d81a99218d2381/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5da6f16835c04026596f53e9b7d81a99218d2381/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=5da6f16835c04026596f53e9b7d81a99218d2381", "patch": "@@ -993,13 +993,24 @@ record_set (rtx dest, rtx set, void *data ATTRIBUTE_UNUSED)\n       return;\n     }\n \n-  /* This is not the first set.  If the new value is not related to the\n-     old value, forget the base value. Note that the following code is\n-     not detected:\n-     extern int x, y;  int *p = &x; p += (&y-&x);\n+  /* If this is not the first set of REGNO, see whether the new value\n+     is related to the old one.  There are two cases of interest:\n+\n+\t(1) The register might be assigned an entirely new value\n+\t    that has the same base term as the original set.\n+\n+\t(2) The set might be a simple self-modification that\n+\t    cannot change REGNO's base value.\n+\n+     If neither case holds, reject the original base value as invalid.\n+     Note that the following situation is not detected:\n+\n+         extern int x, y;  int *p = &x; p += (&y-&x);\n+\n      ANSI C does not allow computing the difference of addresses\n      of distinct top level objects.  */\n-  if (new_reg_base_value[regno])\n+  if (new_reg_base_value[regno] != 0\n+      && find_base_value (src) != new_reg_base_value[regno])\n     switch (GET_CODE (src))\n       {\n       case LO_SUM:"}]}