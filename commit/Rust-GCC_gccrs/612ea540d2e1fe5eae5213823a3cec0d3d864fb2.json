{"sha": "612ea540d2e1fe5eae5213823a3cec0d3d864fb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjEyZWE1NDBkMmUxZmU1ZWFlNTIxMzgyM2EzY2VjMGQzZDg2NGZiMg==", "commit": {"author": {"name": "Charles Baylis", "email": "charles.baylis@linaro.org", "date": "2017-11-23T18:39:44Z"}, "committer": {"name": "Charles Baylis", "email": "cbaylis@gcc.gnu.org", "date": "2017-11-23T18:39:44Z"}, "message": "This patch adds support for modelling the varying costs of different addressing modes.\n\nThis patch adds support for modelling the varying costs of\ndifferent addressing modes. The generic cost table treats\nall addressing modes as having equal cost.\n\ngcc/ChangeLog:\n\n2017-11-23  Charles Baylis  <charles.baylis@linaro.org>\n\n        * config/arm/arm-protos.h (enum arm_addr_mode_op): New.\n        (struct addr_mode_cost_table): New.\n        (struct tune_params): Add field addr_mode_costs.\n        * config/arm/arm.c (generic_addr_mode_costs): New.\n        (arm_slowmul_tune): Initialise addr_mode_costs field.\n        (arm_fastmul_tune): Likewise.\n        (arm_strongarm_tune): Likewise.\n        (arm_xscale_tune): Likewise.\n        (arm_9e_tune): Likewise.\n        (arm_marvell_pj4_tune): Likewise.\n        (arm_v6t2_tune): Likewise.\n        (arm_cortex_tune): Likewise.\n        (arm_cortex_a8_tune): Likewise.\n        (arm_cortex_a7_tune): Likewise.\n        (arm_cortex_a15_tune): Likewise.\n        (arm_cortex_a35_tune): Likewise.\n        (arm_cortex_a53_tune): Likewise.\n        (arm_cortex_a57_tune): Likewise.\n        (arm_exynosm1_tune): Likewise.\n        (arm_xgene1_tune): Likewise.\n        (arm_cortex_a5_tune): Likewise.\n        (arm_cortex_a9_tune): Likewise.\n        (arm_cortex_a12_tune): Likewise.\n        (arm_cortex_a73_tune): Likewise.\n        (arm_v7m_tune): Likewise.\n        (arm_cortex_m7_tune): Likewise.\n        (arm_v6m_tune): Likewise.\n        (arm_fa726te_tune): Likewise.\n        (arm_mem_costs): Use table lookup to calculate cost of addressing\n        mode.\n\nFrom-SVN: r255112", "tree": {"sha": "ad8fa0927c168943bc1a0b1511a9876f64081d04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad8fa0927c168943bc1a0b1511a9876f64081d04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/612ea540d2e1fe5eae5213823a3cec0d3d864fb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/612ea540d2e1fe5eae5213823a3cec0d3d864fb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/612ea540d2e1fe5eae5213823a3cec0d3d864fb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/612ea540d2e1fe5eae5213823a3cec0d3d864fb2/comments", "author": null, "committer": null, "parents": [{"sha": "c138eb5ce4f675fe9bdca939b6c43545d0f75691", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c138eb5ce4f675fe9bdca939b6c43545d0f75691", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c138eb5ce4f675fe9bdca939b6c43545d0f75691"}], "stats": {"total": 134, "additions": 134, "deletions": 0}, "files": [{"sha": "704d4e22c932723da43a66441c9872080eb93ca6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/612ea540d2e1fe5eae5213823a3cec0d3d864fb2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/612ea540d2e1fe5eae5213823a3cec0d3d864fb2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=612ea540d2e1fe5eae5213823a3cec0d3d864fb2", "patch": "@@ -1,3 +1,36 @@\n+2017-11-23  Charles Baylis  <charles.baylis@linaro.org>\n+\n+\t* config/arm/arm-protos.h (enum arm_addr_mode_op): New.\n+\t(struct addr_mode_cost_table): New.\n+\t(struct tune_params): Add field addr_mode_costs.\n+\t* config/arm/arm.c (generic_addr_mode_costs): New.\n+\t(arm_slowmul_tune): Initialise addr_mode_costs field.\n+\t(arm_fastmul_tune): Likewise.\n+\t(arm_strongarm_tune): Likewise.\n+\t(arm_xscale_tune): Likewise.\n+\t(arm_9e_tune): Likewise.\n+\t(arm_marvell_pj4_tune): Likewise.\n+\t(arm_v6t2_tune): Likewise.\n+\t(arm_cortex_tune): Likewise.\n+\t(arm_cortex_a8_tune): Likewise.\n+\t(arm_cortex_a7_tune): Likewise.\n+\t(arm_cortex_a15_tune): Likewise.\n+\t(arm_cortex_a35_tune): Likewise.\n+\t(arm_cortex_a53_tune): Likewise.\n+\t(arm_cortex_a57_tune): Likewise.\n+\t(arm_exynosm1_tune): Likewise.\n+\t(arm_xgene1_tune): Likewise.\n+\t(arm_cortex_a5_tune): Likewise.\n+\t(arm_cortex_a9_tune): Likewise.\n+\t(arm_cortex_a12_tune): Likewise.\n+\t(arm_cortex_a73_tune): Likewise.\n+\t(arm_v7m_tune): Likewise.\n+\t(arm_cortex_m7_tune): Likewise.\n+\t(arm_v6m_tune): Likewise.\n+\t(arm_fa726te_tune): Likewise.\n+\t(arm_mem_costs): Use table lookup to calculate cost of addressing\n+\tmode.\n+\n 2017-11-23  Charles Baylis  <charles.baylis@linaro.org>\n \n \t* config/arm/arm.c (arm_mem_costs): New function."}, {"sha": "0c977429c122cabc555569a56edea806853c100b", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/612ea540d2e1fe5eae5213823a3cec0d3d864fb2/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/612ea540d2e1fe5eae5213823a3cec0d3d864fb2/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=612ea540d2e1fe5eae5213823a3cec0d3d864fb2", "patch": "@@ -263,12 +263,32 @@ struct cpu_vec_costs {\n \n struct cpu_cost_table;\n \n+/* Addressing mode operations.  Used to index tables in struct\n+   addr_mode_cost_table.  */\n+enum arm_addr_mode_op\n+{\n+   AMO_DEFAULT,\n+   AMO_NO_WB,\t/* Offset with no writeback.  */\n+   AMO_WB,\t/* Offset with writeback.  */\n+   AMO_MAX\t/* For array size.  */\n+};\n+\n+/* Table of additional costs in units of COSTS_N_INSNS() when using\n+   addressing modes for each access type.  */\n+struct addr_mode_cost_table\n+{\n+   const int integer[AMO_MAX];\n+   const int fp[AMO_MAX];\n+   const int vector[AMO_MAX];\n+};\n+\n /* Dump function ARM_PRINT_TUNE_INFO should be updated whenever this\n    structure is modified.  */\n \n struct tune_params\n {\n   const struct cpu_cost_table *insn_extra_cost;\n+  const struct addr_mode_cost_table *addr_mode_costs;\n   bool (*sched_adjust_cost) (rtx_insn *, int, rtx_insn *, int *);\n   int (*branch_cost) (bool, bool);\n   /* Vectorizer costs.  */"}, {"sha": "64dc8cd684380fbd35c7ff8c1592e8c5dede2657", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/612ea540d2e1fe5eae5213823a3cec0d3d864fb2/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/612ea540d2e1fe5eae5213823a3cec0d3d864fb2/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=612ea540d2e1fe5eae5213823a3cec0d3d864fb2", "patch": "@@ -1763,9 +1763,32 @@ const struct cpu_cost_table v7m_extra_costs =\n   }\n };\n \n+const struct addr_mode_cost_table generic_addr_mode_costs =\n+{\n+  /* int.  */\n+  {\n+    COSTS_N_INSNS (0),\t/* AMO_DEFAULT.  */\n+    COSTS_N_INSNS (0),\t/* AMO_NO_WB.  */\n+    COSTS_N_INSNS (0)\t/* AMO_WB.  */\n+  },\n+  /* float.  */\n+  {\n+    COSTS_N_INSNS (0),\t/* AMO_DEFAULT.  */\n+    COSTS_N_INSNS (0),\t/* AMO_NO_WB.  */\n+    COSTS_N_INSNS (0)\t/* AMO_WB.  */\n+  },\n+  /* vector.  */\n+  {\n+    COSTS_N_INSNS (0),\t/* AMO_DEFAULT.  */\n+    COSTS_N_INSNS (0),\t/* AMO_NO_WB.  */\n+    COSTS_N_INSNS (0)\t/* AMO_WB.  */\n+  }\n+};\n+\n const struct tune_params arm_slowmul_tune =\n {\n   &generic_extra_costs,\t\t\t/* Insn extra costs.  */\n+  &generic_addr_mode_costs,\t\t/* Addressing mode costs.  */\n   NULL,\t\t\t\t\t/* Sched adj cost.  */\n   arm_default_branch_cost,\n   &arm_default_vec_cost,\n@@ -1788,6 +1811,7 @@ const struct tune_params arm_slowmul_tune =\n const struct tune_params arm_fastmul_tune =\n {\n   &generic_extra_costs,\t\t\t/* Insn extra costs.  */\n+  &generic_addr_mode_costs,\t\t/* Addressing mode costs.  */\n   NULL,\t\t\t\t\t/* Sched adj cost.  */\n   arm_default_branch_cost,\n   &arm_default_vec_cost,\n@@ -1813,6 +1837,7 @@ const struct tune_params arm_fastmul_tune =\n const struct tune_params arm_strongarm_tune =\n {\n   &generic_extra_costs,\t\t\t/* Insn extra costs.  */\n+  &generic_addr_mode_costs,\t\t/* Addressing mode costs.  */\n   NULL,\t\t\t\t\t/* Sched adj cost.  */\n   arm_default_branch_cost,\n   &arm_default_vec_cost,\n@@ -1835,6 +1860,7 @@ const struct tune_params arm_strongarm_tune =\n const struct tune_params arm_xscale_tune =\n {\n   &generic_extra_costs,\t\t\t/* Insn extra costs.  */\n+  &generic_addr_mode_costs,\t\t/* Addressing mode costs.  */\n   xscale_sched_adjust_cost,\n   arm_default_branch_cost,\n   &arm_default_vec_cost,\n@@ -1857,6 +1883,7 @@ const struct tune_params arm_xscale_tune =\n const struct tune_params arm_9e_tune =\n {\n   &generic_extra_costs,\t\t\t/* Insn extra costs.  */\n+  &generic_addr_mode_costs,\t\t/* Addressing mode costs.  */\n   NULL,\t\t\t\t\t/* Sched adj cost.  */\n   arm_default_branch_cost,\n   &arm_default_vec_cost,\n@@ -1879,6 +1906,7 @@ const struct tune_params arm_9e_tune =\n const struct tune_params arm_marvell_pj4_tune =\n {\n   &generic_extra_costs,\t\t\t/* Insn extra costs.  */\n+  &generic_addr_mode_costs,\t\t/* Addressing mode costs.  */\n   NULL,\t\t\t\t\t/* Sched adj cost.  */\n   arm_default_branch_cost,\n   &arm_default_vec_cost,\n@@ -1901,6 +1929,7 @@ const struct tune_params arm_marvell_pj4_tune =\n const struct tune_params arm_v6t2_tune =\n {\n   &generic_extra_costs,\t\t\t/* Insn extra costs.  */\n+  &generic_addr_mode_costs,\t\t/* Addressing mode costs.  */\n   NULL,\t\t\t\t\t/* Sched adj cost.  */\n   arm_default_branch_cost,\n   &arm_default_vec_cost,\n@@ -1925,6 +1954,7 @@ const struct tune_params arm_v6t2_tune =\n const struct tune_params arm_cortex_tune =\n {\n   &generic_extra_costs,\n+  &generic_addr_mode_costs,\t\t/* Addressing mode costs.  */\n   NULL,\t\t\t\t\t/* Sched adj cost.  */\n   arm_default_branch_cost,\n   &arm_default_vec_cost,\n@@ -1947,6 +1977,7 @@ const struct tune_params arm_cortex_tune =\n const struct tune_params arm_cortex_a8_tune =\n {\n   &cortexa8_extra_costs,\n+  &generic_addr_mode_costs,\t\t/* Addressing mode costs.  */\n   NULL,\t\t\t\t\t/* Sched adj cost.  */\n   arm_default_branch_cost,\n   &arm_default_vec_cost,\n@@ -1969,6 +2000,7 @@ const struct tune_params arm_cortex_a8_tune =\n const struct tune_params arm_cortex_a7_tune =\n {\n   &cortexa7_extra_costs,\n+  &generic_addr_mode_costs,\t\t/* Addressing mode costs.  */\n   NULL,\t\t\t\t\t/* Sched adj cost.  */\n   arm_default_branch_cost,\n   &arm_default_vec_cost,\n@@ -1991,6 +2023,7 @@ const struct tune_params arm_cortex_a7_tune =\n const struct tune_params arm_cortex_a15_tune =\n {\n   &cortexa15_extra_costs,\n+  &generic_addr_mode_costs,\t\t/* Addressing mode costs.  */\n   NULL,\t\t\t\t\t/* Sched adj cost.  */\n   arm_default_branch_cost,\n   &arm_default_vec_cost,\n@@ -2013,6 +2046,7 @@ const struct tune_params arm_cortex_a15_tune =\n const struct tune_params arm_cortex_a35_tune =\n {\n   &cortexa53_extra_costs,\n+  &generic_addr_mode_costs,\t\t/* Addressing mode costs.  */\n   NULL,\t\t\t\t\t/* Sched adj cost.  */\n   arm_default_branch_cost,\n   &arm_default_vec_cost,\n@@ -2035,6 +2069,7 @@ const struct tune_params arm_cortex_a35_tune =\n const struct tune_params arm_cortex_a53_tune =\n {\n   &cortexa53_extra_costs,\n+  &generic_addr_mode_costs,\t\t/* Addressing mode costs.  */\n   NULL,\t\t\t\t\t/* Sched adj cost.  */\n   arm_default_branch_cost,\n   &arm_default_vec_cost,\n@@ -2057,6 +2092,7 @@ const struct tune_params arm_cortex_a53_tune =\n const struct tune_params arm_cortex_a57_tune =\n {\n   &cortexa57_extra_costs,\n+  &generic_addr_mode_costs,\t\t/* addressing mode costs */\n   NULL,\t\t\t\t\t/* Sched adj cost.  */\n   arm_default_branch_cost,\n   &arm_default_vec_cost,\n@@ -2079,6 +2115,7 @@ const struct tune_params arm_cortex_a57_tune =\n const struct tune_params arm_exynosm1_tune =\n {\n   &exynosm1_extra_costs,\n+  &generic_addr_mode_costs,\t\t\t/* Addressing mode costs.  */\n   NULL,\t\t\t\t\t\t/* Sched adj cost.  */\n   arm_default_branch_cost,\n   &arm_default_vec_cost,\n@@ -2101,6 +2138,7 @@ const struct tune_params arm_exynosm1_tune =\n const struct tune_params arm_xgene1_tune =\n {\n   &xgene1_extra_costs,\n+  &generic_addr_mode_costs,\t\t/* Addressing mode costs.  */\n   NULL,\t\t\t\t\t/* Sched adj cost.  */\n   arm_default_branch_cost,\n   &arm_default_vec_cost,\n@@ -2126,6 +2164,7 @@ const struct tune_params arm_xgene1_tune =\n const struct tune_params arm_cortex_a5_tune =\n {\n   &cortexa5_extra_costs,\n+  &generic_addr_mode_costs,\t\t/* Addressing mode costs.  */\n   NULL,\t\t\t\t\t/* Sched adj cost.  */\n   arm_cortex_a5_branch_cost,\n   &arm_default_vec_cost,\n@@ -2148,6 +2187,7 @@ const struct tune_params arm_cortex_a5_tune =\n const struct tune_params arm_cortex_a9_tune =\n {\n   &cortexa9_extra_costs,\n+  &generic_addr_mode_costs,\t\t/* Addressing mode costs.  */\n   cortex_a9_sched_adjust_cost,\n   arm_default_branch_cost,\n   &arm_default_vec_cost,\n@@ -2170,6 +2210,7 @@ const struct tune_params arm_cortex_a9_tune =\n const struct tune_params arm_cortex_a12_tune =\n {\n   &cortexa12_extra_costs,\n+  &generic_addr_mode_costs,\t\t/* Addressing mode costs.  */\n   NULL,\t\t\t\t\t/* Sched adj cost.  */\n   arm_default_branch_cost,\n   &arm_default_vec_cost,                        /* Vectorizer costs.  */\n@@ -2192,6 +2233,7 @@ const struct tune_params arm_cortex_a12_tune =\n const struct tune_params arm_cortex_a73_tune =\n {\n   &cortexa57_extra_costs,\n+  &generic_addr_mode_costs,\t\t\t/* Addressing mode costs.  */\n   NULL,\t\t\t\t\t\t/* Sched adj cost.  */\n   arm_default_branch_cost,\n   &arm_default_vec_cost,\t\t\t/* Vectorizer costs.  */\n@@ -2221,6 +2263,7 @@ const struct tune_params arm_cortex_a73_tune =\n const struct tune_params arm_v7m_tune =\n {\n   &v7m_extra_costs,\n+  &generic_addr_mode_costs,\t\t/* Addressing mode costs.  */\n   NULL,\t\t\t\t\t/* Sched adj cost.  */\n   arm_cortex_m_branch_cost,\n   &arm_default_vec_cost,\n@@ -2245,6 +2288,7 @@ const struct tune_params arm_v7m_tune =\n const struct tune_params arm_cortex_m7_tune =\n {\n   &v7m_extra_costs,\n+  &generic_addr_mode_costs,\t\t/* Addressing mode costs.  */\n   NULL,\t\t\t\t\t/* Sched adj cost.  */\n   arm_cortex_m7_branch_cost,\n   &arm_default_vec_cost,\n@@ -2270,6 +2314,7 @@ const struct tune_params arm_cortex_m7_tune =\n const struct tune_params arm_v6m_tune =\n {\n   &generic_extra_costs,\t\t\t/* Insn extra costs.  */\n+  &generic_addr_mode_costs,\t\t/* Addressing mode costs.  */\n   NULL,\t\t\t\t\t/* Sched adj cost.  */\n   arm_default_branch_cost,\n   &arm_default_vec_cost,                        /* Vectorizer costs.  */\n@@ -2292,6 +2337,7 @@ const struct tune_params arm_v6m_tune =\n const struct tune_params arm_fa726te_tune =\n {\n   &generic_extra_costs,\t\t\t\t/* Insn extra costs.  */\n+  &generic_addr_mode_costs,\t\t\t/* Addressing mode costs.  */\n   fa726te_sched_adjust_cost,\n   arm_default_branch_cost,\n   &arm_default_vec_cost,\n@@ -9261,6 +9307,41 @@ arm_mem_costs (rtx x, const struct cpu_cost_table *extra_cost,\n        below.  See arm.md:calculate_pic_address.  */\n     *cost += COSTS_N_INSNS (1);\n \n+  /* Calculate cost of the addressing mode.  */\n+  if (speed_p)\n+    {\n+      arm_addr_mode_op op_type;\n+      switch (GET_CODE (XEXP (x, 0)))\n+\t{\n+\tdefault:\n+\tcase REG:\n+\t  op_type = AMO_DEFAULT;\n+\t  break;\n+\tcase MINUS:\n+\t  /* MINUS does not appear in RTL, but the architecture supports it,\n+\t     so handle this case defensively.  */\n+\t  /* fall through */\n+\tcase PLUS:\n+\t  op_type = AMO_NO_WB;\n+\t  break;\n+\tcase PRE_INC:\n+\tcase PRE_DEC:\n+\tcase POST_INC:\n+\tcase POST_DEC:\n+\tcase PRE_MODIFY:\n+\tcase POST_MODIFY:\n+\t  op_type = AMO_WB;\n+\t  break;\n+\t}\n+\n+      if (VECTOR_MODE_P (mode))\n+\t  *cost += current_tune->addr_mode_costs->vector[op_type];\n+      else if (FLOAT_MODE_P (mode))\n+\t  *cost += current_tune->addr_mode_costs->fp[op_type];\n+      else\n+\t  *cost += current_tune->addr_mode_costs->integer[op_type];\n+    }\n+\n   /* Calculate cost of memory access.  */\n   if (speed_p)\n     {"}]}