{"sha": "cb9998216d76ccc62b45fcf01b3a0928a026f7ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I5OTk4MjE2ZDc2Y2NjNjJiNDVmY2YwMWIzYTA5MjhhMDI2ZjdlZA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-02-09T15:28:03Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-02-10T18:10:57Z"}, "message": "Fix parse of LoopExpr as part of a normal expression\n\nFor example this fixes the form of: let x = loop { ... };\n\nFixes #219", "tree": {"sha": "6a2531a63f9b768273d137b5e309a406b59565e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a2531a63f9b768273d137b5e309a406b59565e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb9998216d76ccc62b45fcf01b3a0928a026f7ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb9998216d76ccc62b45fcf01b3a0928a026f7ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb9998216d76ccc62b45fcf01b3a0928a026f7ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb9998216d76ccc62b45fcf01b3a0928a026f7ed/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9355fb29fc756807a775f9e8f71124071676c8e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9355fb29fc756807a775f9e8f71124071676c8e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9355fb29fc756807a775f9e8f71124071676c8e4"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "d3913045429b77806cbc4999ea55ed037d864ca1", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb9998216d76ccc62b45fcf01b3a0928a026f7ed/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb9998216d76ccc62b45fcf01b3a0928a026f7ed/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=cb9998216d76ccc62b45fcf01b3a0928a026f7ed", "patch": "@@ -7827,14 +7827,30 @@ Parser<ManagedTokenSource>::parse_if_let_expr (\n template <typename ManagedTokenSource>\n std::unique_ptr<AST::LoopExpr>\n Parser<ManagedTokenSource>::parse_loop_expr (\n-  std::vector<AST::Attribute> outer_attrs, AST::LoopLabel label)\n+  std::vector<AST::Attribute> outer_attrs, AST::LoopLabel label,\n+  bool pratt_parse)\n {\n   Location locus = Linemap::unknown_location ();\n-  if (label.is_error ())\n-    locus = lexer.peek_token ()->get_locus ();\n+  if (!pratt_parse)\n+    {\n+      if (label.is_error ())\n+\tlocus = lexer.peek_token ()->get_locus ();\n+      else\n+\tlocus = label.get_locus ();\n+\n+      if (!skip_token (LOOP))\n+\t{\n+\t  skip_after_end_block ();\n+\t  return nullptr;\n+\t}\n+    }\n   else\n-    locus = label.get_locus ();\n-  skip_token (LOOP);\n+    {\n+      if (label.is_error ())\n+\tlocus = lexer.peek_token ()->get_locus () - 1;\n+      else\n+\tlocus = label.get_locus ();\n+    }\n \n   // parse loop body, which is required\n   std::unique_ptr<AST::BlockExpr> loop_body = parse_block_expr ();\n@@ -12435,6 +12451,9 @@ Parser<ManagedTokenSource>::null_denotation (\n \t  // if expr\n \t  return parse_if_expr (std::move (outer_attrs), true);\n \t}\n+    case LOOP:\n+      return parse_loop_expr (std::move (outer_attrs), AST::LoopLabel::error (),\n+\t\t\t      true);\n     case MATCH_TOK:\n       // also an expression with block\n       return parse_match_expr (std::move (outer_attrs), true);"}, {"sha": "873b55e9c2ef96ad3a6cb1b8d619e8bdec573759", "filename": "gcc/rust/parse/rust-parse.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb9998216d76ccc62b45fcf01b3a0928a026f7ed/gcc%2Frust%2Fparse%2Frust-parse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb9998216d76ccc62b45fcf01b3a0928a026f7ed/gcc%2Frust%2Fparse%2Frust-parse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse.h?ref=cb9998216d76ccc62b45fcf01b3a0928a026f7ed", "patch": "@@ -500,10 +500,9 @@ template <typename ManagedTokenSource> class Parser\n   parse_if_let_expr (std::vector<AST::Attribute> outer_attrs\n \t\t     = std::vector<AST::Attribute> (),\n \t\t     bool pratt_parse = false);\n-  std::unique_ptr<AST::LoopExpr>\n-  parse_loop_expr (std::vector<AST::Attribute> outer_attrs\n-\t\t   = std::vector<AST::Attribute> (),\n-\t\t   AST::LoopLabel label = AST::LoopLabel::error ());\n+  std::unique_ptr<AST::LoopExpr> parse_loop_expr (\n+    std::vector<AST::Attribute> outer_attrs = std::vector<AST::Attribute> (),\n+    AST::LoopLabel label = AST::LoopLabel::error (), bool pratt_parse = false);\n   std::unique_ptr<AST::WhileLoopExpr>\n   parse_while_loop_expr (std::vector<AST::Attribute> outer_attrs\n \t\t\t = std::vector<AST::Attribute> (),"}]}