{"sha": "2bbec6d92d3c0fbba419fbc42e3153c27e9425ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJiZWM2ZDkyZDNjMGZiYmE0MTlmYmM0MmUzMTUzYzI3ZTk0MjVmZg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2006-03-13T16:32:34Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2006-03-13T16:32:34Z"}, "message": "tree-vrp.c (stmt_interesting_for_vrp): Some statements with virtual operands are interesting.\n\n\n\t* tree-vrp.c (stmt_interesting_for_vrp): Some statements with\n\tvirtual operands are interesting.\n\t(vrp_visit_stmt): Corresponding changes.\n\n\t* gcc.dg/tree-ssa/20030807-2.c: No longer expected to fail.\n\nFrom-SVN: r112011", "tree": {"sha": "8368c4845123c9fa781a8a6464317eacd7412780", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8368c4845123c9fa781a8a6464317eacd7412780"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bbec6d92d3c0fbba419fbc42e3153c27e9425ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bbec6d92d3c0fbba419fbc42e3153c27e9425ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bbec6d92d3c0fbba419fbc42e3153c27e9425ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bbec6d92d3c0fbba419fbc42e3153c27e9425ff/comments", "author": null, "committer": null, "parents": [{"sha": "96c30d2afccff71991a17f7c9c14e7b2c99dc7de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96c30d2afccff71991a17f7c9c14e7b2c99dc7de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96c30d2afccff71991a17f7c9c14e7b2c99dc7de"}], "stats": {"total": 39, "additions": 34, "deletions": 5}, "files": [{"sha": "abdc2855ac0d405a3e62888998efa51f94fa24ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bbec6d92d3c0fbba419fbc42e3153c27e9425ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bbec6d92d3c0fbba419fbc42e3153c27e9425ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2bbec6d92d3c0fbba419fbc42e3153c27e9425ff", "patch": "@@ -1,3 +1,9 @@\n+2006-03-13  Jeff Law  <law@redhat.com>\n+\n+\t* tree-vrp.c (stmt_interesting_for_vrp): Some statements with\n+\tvirtual operands are interesting.\n+\t(vrp_visit_stmt): Corresponding changes.\n+\n 2006-03-13  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* config/bfin/lib1funcs.asm (___umodsi3): Use stack to save contents"}, {"sha": "e998c9d1b0b89690335a9068043a949ca24cb56f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bbec6d92d3c0fbba419fbc42e3153c27e9425ff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bbec6d92d3c0fbba419fbc42e3153c27e9425ff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2bbec6d92d3c0fbba419fbc42e3153c27e9425ff", "patch": "@@ -1,3 +1,7 @@\n+2006-03-13  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/20030807-2.c: No longer expected to fail.\n+\n 2006-03-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.dg/switch-9.c: New test."}, {"sha": "29e793e36225f597aed0a36b4cc2ad0d82b430a4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030807-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bbec6d92d3c0fbba419fbc42e3153c27e9425ff/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030807-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bbec6d92d3c0fbba419fbc42e3153c27e9425ff/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030807-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030807-2.c?ref=2bbec6d92d3c0fbba419fbc42e3153c27e9425ff", "patch": "@@ -24,5 +24,5 @@ foo(int n)\n \n                                                                                \n /* There should be no IF conditionals.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 0 \"dom3\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"if \" 0 \"dom3\" } } */\n /* { dg-final { cleanup-tree-dump \"dom3\" } } */"}, {"sha": "278347d4d9fb79906c2cd7132c12c53fc8cb9c51", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bbec6d92d3c0fbba419fbc42e3153c27e9425ff/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bbec6d92d3c0fbba419fbc42e3153c27e9425ff/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=2bbec6d92d3c0fbba419fbc42e3153c27e9425ff", "patch": "@@ -3266,11 +3266,19 @@ stmt_interesting_for_vrp (tree stmt)\n   else if (TREE_CODE (stmt) == MODIFY_EXPR)\n     {\n       tree lhs = TREE_OPERAND (stmt, 0);\n+      tree rhs = TREE_OPERAND (stmt, 1);\n \n+      /* In general, assignments with virtual operands are not useful\n+\t for deriving ranges, with the obvious exception of calls to\n+\t builtin functions.  */\n       if (TREE_CODE (lhs) == SSA_NAME\n \t  && (INTEGRAL_TYPE_P (TREE_TYPE (lhs))\n \t      || POINTER_TYPE_P (TREE_TYPE (lhs)))\n-\t  && ZERO_SSA_OPERANDS (stmt, SSA_OP_ALL_VIRTUALS))\n+\t  && ((TREE_CODE (rhs) == CALL_EXPR\n+\t       && TREE_CODE (TREE_OPERAND (rhs, 0)) == ADDR_EXPR\n+\t       && DECL_P (TREE_OPERAND (TREE_OPERAND (rhs, 0), 0))\n+\t       && DECL_IS_BUILTIN (TREE_OPERAND (TREE_OPERAND (rhs, 0), 0)))\n+\t      || ZERO_SSA_OPERANDS (stmt, SSA_OP_ALL_VIRTUALS)))\n \treturn true;\n     }\n   else if (TREE_CODE (stmt) == COND_EXPR || TREE_CODE (stmt) == SWITCH_EXPR)\n@@ -3739,9 +3747,20 @@ vrp_visit_stmt (tree stmt, edge *taken_edge_p, tree *output_p)\n     }\n \n   ann = stmt_ann (stmt);\n-  if (TREE_CODE (stmt) == MODIFY_EXPR\n-      && ZERO_SSA_OPERANDS (stmt, SSA_OP_ALL_VIRTUALS))\n-    return vrp_visit_assignment (stmt, output_p);\n+  if (TREE_CODE (stmt) == MODIFY_EXPR)\n+    {\n+      tree rhs = TREE_OPERAND (stmt, 1);\n+\n+      /* In general, assignments with virtual operands are not useful\n+\t for deriving ranges, with the obvious exception of calls to\n+\t builtin functions.  */\n+      if ((TREE_CODE (rhs) == CALL_EXPR\n+\t   && TREE_CODE (TREE_OPERAND (rhs, 0)) == ADDR_EXPR\n+\t   && DECL_P (TREE_OPERAND (TREE_OPERAND (rhs, 0), 0))\n+\t   && DECL_IS_BUILTIN (TREE_OPERAND (TREE_OPERAND (rhs, 0), 0)))\n+\t  || ZERO_SSA_OPERANDS (stmt, SSA_OP_ALL_VIRTUALS))\n+\treturn vrp_visit_assignment (stmt, output_p);\n+    }\n   else if (TREE_CODE (stmt) == COND_EXPR || TREE_CODE (stmt) == SWITCH_EXPR)\n     return vrp_visit_cond_stmt (stmt, taken_edge_p);\n "}]}