{"sha": "346114b54da37792ec1759a1e76626eb4d3a5594", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ2MTE0YjU0ZGEzNzc5MmVjMTc1OWExZTc2NjI2ZWI0ZDNhNTU5NA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-03-02T19:04:58Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-03-02T19:04:58Z"}, "message": "substring-locations.h (format_warning_va): Formatting fix for ATTRIBUTE_GCC_DIAG.\n\n\t* substring-locations.h (format_warning_va): Formatting fix for\n\tATTRIBUTE_GCC_DIAG.\n\t(format_warning_at_substring): Fix up ATTRIBUTE_GCC_DIAG second\n\targument.\n\t(format_warning_n_va, format_warning_at_substring_n): New prototypes.\n\t* substring-locations.c: Include intl.h.\n\t(format_warning_va): Turned into small wrapper around\n\tformat_warning_n_va, renamed to ...\n\t(format_warning_n_va): ... this, add N and PLURAL_GMSGID arguments,\n\trename GMSGID to SINGULAR_GMSGID, if SINGULAR_GMSGID != PLURAL_GMSGID,\n\tuse ngettext.\n\t(format_warning_at_substring_n): New function.\n\t* gimple-ssa-sprintf.c: Remove GCC diagnostic ignored pragma.\n\t(fmtwarn): Add ATTRIBUTE_GCC_DIAG.  Turn into a copy of\n\tformat_warning_at_substring with just a shorter name instead of\n\tconst function pointer.\n\t(fmtwarn_n): New function.\n\t(maybe_warn, format_directive, parse_directive): Use fmtwarn_n where\n\tappropriate, get rid of all the fmtstr temporaries, move conditionals\n\twith G_() wrapped string literals directly into fmtwarn arguments,\n\tcast dir.len to (int), formatting fixes.\n\nFrom-SVN: r258154", "tree": {"sha": "9e9f74834008088fe0782398fb88b476022001a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e9f74834008088fe0782398fb88b476022001a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/346114b54da37792ec1759a1e76626eb4d3a5594", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/346114b54da37792ec1759a1e76626eb4d3a5594", "html_url": "https://github.com/Rust-GCC/gccrs/commit/346114b54da37792ec1759a1e76626eb4d3a5594", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/346114b54da37792ec1759a1e76626eb4d3a5594/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "892870f9f3ae0fc4486e372c3db0a83b739ca572", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/892870f9f3ae0fc4486e372c3db0a83b739ca572", "html_url": "https://github.com/Rust-GCC/gccrs/commit/892870f9f3ae0fc4486e372c3db0a83b739ca572"}], "stats": {"total": 605, "additions": 345, "deletions": 260}, "files": [{"sha": "a05934316e8b47448db3b8b13785769cfb083013", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/346114b54da37792ec1759a1e76626eb4d3a5594/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/346114b54da37792ec1759a1e76626eb4d3a5594/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=346114b54da37792ec1759a1e76626eb4d3a5594", "patch": "@@ -1,3 +1,27 @@\n+2018-03-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* substring-locations.h (format_warning_va): Formatting fix for\n+\tATTRIBUTE_GCC_DIAG.\n+\t(format_warning_at_substring): Fix up ATTRIBUTE_GCC_DIAG second\n+\targument.\n+\t(format_warning_n_va, format_warning_at_substring_n): New prototypes.\n+\t* substring-locations.c: Include intl.h.\n+\t(format_warning_va): Turned into small wrapper around\n+\tformat_warning_n_va, renamed to ...\n+\t(format_warning_n_va): ... this, add N and PLURAL_GMSGID arguments,\n+\trename GMSGID to SINGULAR_GMSGID, if SINGULAR_GMSGID != PLURAL_GMSGID,\n+\tuse ngettext.\n+\t(format_warning_at_substring_n): New function.\n+\t* gimple-ssa-sprintf.c: Remove GCC diagnostic ignored pragma.\n+\t(fmtwarn): Add ATTRIBUTE_GCC_DIAG.  Turn into a copy of\n+\tformat_warning_at_substring with just a shorter name instead of\n+\tconst function pointer.\n+\t(fmtwarn_n): New function.\n+\t(maybe_warn, format_directive, parse_directive): Use fmtwarn_n where\n+\tappropriate, get rid of all the fmtstr temporaries, move conditionals\n+\twith G_() wrapped string literals directly into fmtwarn arguments,\n+\tcast dir.len to (int), formatting fixes.\n+\n 2018-03-02  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* doc/invoke.texi: Remove \"Cilk Plus\" references."}, {"sha": "4ec58605ce835796aaa98256ba9f3d950d0acacc", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 241, "deletions": 250, "changes": 491, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/346114b54da37792ec1759a1e76626eb4d3a5594/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/346114b54da37792ec1759a1e76626eb4d3a5594/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=346114b54da37792ec1759a1e76626eb4d3a5594", "patch": "@@ -589,18 +589,40 @@ get_format_string (tree format, location_t *ploc)\n   return fmtstr;\n }\n \n-/* The format_warning_at_substring function is not used here in a way\n-   that makes using attribute format viable.  Suppress the warning.  */\n+/* For convenience and brevity, shorter named entrypoints of\n+   format_warning_at_substring and format_warning_at_substring_n.\n+   These have to be functions with the attribute so that exgettext\n+   works properly.  */\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wsuggest-attribute=format\"\n+static bool\n+ATTRIBUTE_GCC_DIAG (5, 6)\n+fmtwarn (const substring_loc &fmt_loc, location_t param_loc,\n+\t const char *corrected_substring, int opt, const char *gmsgid, ...)\n+{\n+  va_list ap;\n+  va_start (ap, gmsgid);\n+  bool warned = format_warning_va (fmt_loc, param_loc, corrected_substring,\n+\t\t\t\t   opt, gmsgid, &ap);\n+  va_end (ap);\n \n-/* For convenience and brevity.  */\n+  return warned;\n+}\n \n static bool\n-  (* const fmtwarn) (const substring_loc &, location_t,\n-\t\t     const char *, int, const char *, ...)\n-  = format_warning_at_substring;\n+ATTRIBUTE_GCC_DIAG (6, 8) ATTRIBUTE_GCC_DIAG (7, 8)\n+fmtwarn_n (const substring_loc &fmt_loc, location_t param_loc,\n+\t   const char *corrected_substring, int opt, unsigned HOST_WIDE_INT n,\n+\t   const char *singular_gmsgid, const char *plural_gmsgid, ...)\n+{\n+  va_list ap;\n+  va_start (ap, plural_gmsgid);\n+  bool warned = format_warning_n_va (fmt_loc, param_loc, corrected_substring,\n+\t\t\t\t     opt, n, singular_gmsgid, plural_gmsgid,\n+\t\t\t\t     &ap);\n+  va_end (ap);\n+\n+  return warned;\n+}\n \n /* Format length modifiers.  */\n \n@@ -2489,113 +2511,105 @@ maybe_warn (substring_loc &dirloc, location_t argloc,\n \t  /* This is the terminating nul.  */\n \t  gcc_assert (res.min == 1 && res.min == res.max);\n \n-\t  const char *fmtstr\n-\t    = (info.bounded\n-\t       ? (maybe\n-\t\t  ? G_(\"%qE output may be truncated before the last format \"\n-\t\t       \"character\")\n-\t\t  : G_(\"%qE output truncated before the last format character\"))\n-\t       : (maybe\n-\t\t  ? G_(\"%qE may write a terminating nul past the end \"\n-\t\t       \"of the destination\")\n-\t\t  : G_(\"%qE writing a terminating nul past the end \"\n-\t\t       \"of the destination\")));\n-\n \t  return fmtwarn (dirloc, UNKNOWN_LOCATION, NULL, info.warnopt (),\n-\t\t\t  fmtstr, info.func);\n+\t\t\t  info.bounded\n+\t\t\t  ? (maybe\n+\t\t\t     ? G_(\"%qE output may be truncated before the \"\n+\t\t\t\t  \"last format character\")\n+\t\t\t     : G_(\"%qE output truncated before the last \"\n+\t\t\t\t  \"format character\"))\n+\t\t\t  : (maybe\n+\t\t\t     ? G_(\"%qE may write a terminating nul past the \"\n+\t\t\t\t  \"end of the destination\")\n+\t\t\t     : G_(\"%qE writing a terminating nul past the \"\n+\t\t\t\t  \"end of the destination\")),\n+\t\t\t  info.func);\n \t}\n \n       if (res.min == res.max)\n \t{\n-\t  const char* fmtstr\n-\t    = (res.min == 1\n-\t       ? (info.bounded\n-\t\t  ? (maybe\n-\t\t     ? G_(\"%<%.*s%> directive output may be truncated writing \"\n-\t\t\t  \"%wu byte into a region of size %wu\")\n-\t\t     : G_(\"%<%.*s%> directive output truncated writing \"\n-\t\t\t  \"%wu byte into a region of size %wu\"))\n-\t\t  : G_(\"%<%.*s%> directive writing %wu byte \"\n-\t\t       \"into a region of size %wu\"))\n-\t       : (info.bounded\n-\t\t  ? (maybe\n-\t\t     ? G_(\"%<%.*s%> directive output may be truncated writing \"\n-\t\t\t  \"%wu bytes into a region of size %wu\")\n-\t\t     : G_(\"%<%.*s%> directive output truncated writing \"\n-\t\t\t  \"%wu bytes into a region of size %wu\"))\n-\t\t  : G_(\"%<%.*s%> directive writing %wu bytes \"\n-\t\t       \"into a region of size %wu\")));\n-\t  return fmtwarn (dirloc, argloc, NULL,\n-\t\t\t  info.warnopt (), fmtstr, dir.len,\n-\t\t\t  target_to_host (hostdir, sizeof hostdir, dir.beg),\n-\t\t\t  res.min, navail);\n+\t  const char *d = target_to_host (hostdir, sizeof hostdir, dir.beg);\n+\t  if (!info.bounded)\n+\t    return fmtwarn_n (dirloc, argloc, NULL, info.warnopt (), res.min,\n+\t\t\t      \"%<%.*s%> directive writing %wu byte into a \"\n+\t\t\t      \"region of size %wu\",\n+\t\t\t      \"%<%.*s%> directive writing %wu bytes into a \"\n+\t\t\t      \"region of size %wu\",\n+\t\t\t      (int) dir.len, d, res.min, navail);\n+\t  else if (maybe)\n+\t    return fmtwarn_n (dirloc, argloc, NULL, info.warnopt (), res.min,\n+\t\t\t      \"%<%.*s%> directive output may be truncated \"\n+\t\t\t      \"writing %wu byte into a region of size %wu\",\n+\t\t\t      \"%<%.*s%> directive output may be truncated \"\n+\t\t\t      \"writing %wu bytes into a region of size %wu\",\n+\t\t\t      (int) dir.len, d, res.min, navail);\n+\t  else\n+\t    return fmtwarn_n (dirloc, argloc, NULL, info.warnopt (), res.min,\n+\t\t\t      \"%<%.*s%> directive output truncated writing \"\n+\t\t\t      \"%wu byte into a region of size %wu\",\n+\t\t\t      \"%<%.*s%> directive output truncated writing \"\n+\t\t\t      \"%wu bytes into a region of size %wu\",\n+\t\t\t      (int) dir.len, d, res.min, navail);\n \t}\n-\n       if (res.min == 0 && res.max < maxbytes)\n-\t{\n-\t  const char* fmtstr\n-\t    = (info.bounded\n-\t       ? (maybe\n-\t\t  ? G_(\"%<%.*s%> directive output may be truncated writing \"\n-\t\t       \"up to %wu bytes into a region of size %wu\")\n-\t\t  : G_(\"%<%.*s%> directive output truncated writing \"\n-\t\t       \"up to %wu bytes into a region of size %wu\"))\n-\t       : G_(\"%<%.*s%> directive writing up to %wu bytes \"\n-\t\t    \"into a region of size %wu\"));\n-\t  return fmtwarn (dirloc, argloc, NULL,\n-\t\t\t  info.warnopt (), fmtstr, dir.len,\n-\t\t\t  target_to_host (hostdir, sizeof hostdir, dir.beg),\n-\t\t\t  res.max, navail);\n-\t}\n+\treturn fmtwarn (dirloc, argloc, NULL,\n+\t\t\tinfo.warnopt (),\n+\t\t\tinfo.bounded\n+\t\t\t? (maybe\n+\t\t\t   ? G_(\"%<%.*s%> directive output may be truncated \"\n+\t\t\t\t\"writing up to %wu bytes into a region of \"\n+\t\t\t\t\"size %wu\")\n+\t\t\t   : G_(\"%<%.*s%> directive output truncated writing \"\n+\t\t\t\t\"up to %wu bytes into a region of size %wu\"))\n+\t\t\t: G_(\"%<%.*s%> directive writing up to %wu bytes \"\n+\t\t\t     \"into a region of size %wu\"), (int) dir.len,\n+\t\t\ttarget_to_host (hostdir, sizeof hostdir, dir.beg),\n+\t\t\tres.max, navail);\n \n       if (res.min == 0 && maxbytes <= res.max)\n-\t{\n-\t  /* This is a special case to avoid issuing the potentially\n-\t     confusing warning:\n-\t       writing 0 or more bytes into a region of size 0.  */\n-\t  const char* fmtstr\n-\t    = (info.bounded\n-\t       ? (maybe\n-\t\t  ? G_(\"%<%.*s%> directive output may be truncated writing \"\n-\t\t       \"likely %wu or more bytes into a region of size %wu\")\n-\t\t  : G_(\"%<%.*s%> directive output truncated writing \"\n-\t\t       \"likely %wu or more bytes into a region of size %wu\"))\n-\t       : G_(\"%<%.*s%> directive writing likely %wu or more bytes \"\n-\t\t    \"into a region of size %wu\"));\n-\t  return fmtwarn (dirloc, argloc, NULL,\n-\t\t\t  info.warnopt (), fmtstr, dir.len,\n-\t\t\t  target_to_host (hostdir, sizeof hostdir, dir.beg),\n-\t\t\t  res.likely, navail);\n-\t}\n+\t/* This is a special case to avoid issuing the potentially\n+\t   confusing warning:\n+\t     writing 0 or more bytes into a region of size 0.  */\n+\treturn fmtwarn (dirloc, argloc, NULL, info.warnopt (),\n+\t\t\tinfo.bounded\n+\t\t\t? (maybe\n+\t\t\t   ? G_(\"%<%.*s%> directive output may be truncated \"\n+\t\t\t\t\"writing likely %wu or more bytes into a \"\n+\t\t\t\t\"region of size %wu\")\n+\t\t\t   : G_(\"%<%.*s%> directive output truncated writing \"\n+\t\t\t\t\"likely %wu or more bytes into a region of \"\n+\t\t\t\t\"size %wu\"))\n+\t\t\t: G_(\"%<%.*s%> directive writing likely %wu or more \"\n+\t\t\t     \"bytes into a region of size %wu\"), (int) dir.len,\n+\t\t\ttarget_to_host (hostdir, sizeof hostdir, dir.beg),\n+\t\t\tres.likely, navail);\n \n       if (res.max < maxbytes)\n-\t{\n-\t  const char* fmtstr\n-\t    = (info.bounded\n-\t       ? (maybe\n-\t\t  ? G_(\"%<%.*s%> directive output may be truncated writing \"\n-\t\t       \"between %wu and %wu bytes into a region of size %wu\")\n-\t\t  : G_(\"%<%.*s%> directive output truncated writing \"\n-\t\t       \"between %wu and %wu bytes into a region of size %wu\"))\n-\t       : G_(\"%<%.*s%> directive writing between %wu and \"\n-\t\t    \"%wu bytes into a region of size %wu\"));\n-\t  return fmtwarn (dirloc, argloc, NULL,\n-\t\t\t  info.warnopt (), fmtstr, dir.len,\n-\t\t\t  target_to_host (hostdir, sizeof hostdir, dir.beg),\n-\t\t\t  res.min, res.max, navail);\n-\t}\n-\n-      const char* fmtstr\n-\t= (info.bounded\n-\t   ? (maybe\n-\t      ? G_(\"%<%.*s%> directive output may be truncated writing \"\n-\t\t   \"%wu or more bytes into a region of size %wu\")\n-\t      : G_(\"%<%.*s%> directive output truncated writing \"\n-\t\t   \"%wu or more bytes into a region of size %wu\"))\n-\t   : G_(\"%<%.*s%> directive writing %wu or more bytes \"\n-\t\t\"into a region of size %wu\"));\n-      return fmtwarn (dirloc, argloc, NULL,\n-\t\t      info.warnopt (), fmtstr, dir.len,\n+\treturn fmtwarn (dirloc, argloc, NULL, info.warnopt (),\n+\t\t\tinfo.bounded\n+\t\t\t? (maybe\n+\t\t\t   ? G_(\"%<%.*s%> directive output may be truncated \"\n+\t\t\t\t\"writing between %wu and %wu bytes into a \"\n+\t\t\t\t\"region of size %wu\")\n+\t\t\t   : G_(\"%<%.*s%> directive output truncated \"\n+\t\t\t\t\"writing between %wu and %wu bytes into a \"\n+\t\t\t\t\"region of size %wu\"))\n+\t\t\t: G_(\"%<%.*s%> directive writing between %wu and \"\n+\t\t\t     \"%wu bytes into a region of size %wu\"),\n+\t\t\t(int) dir.len,\n+\t\t\ttarget_to_host (hostdir, sizeof hostdir, dir.beg),\n+\t\t\tres.min, res.max, navail);\n+\n+      return fmtwarn (dirloc, argloc, NULL, info.warnopt (),\n+\t\t      info.bounded\n+\t\t      ? (maybe\n+\t\t\t ? G_(\"%<%.*s%> directive output may be truncated \"\n+\t\t\t      \"writing %wu or more bytes into a region of \"\n+\t\t\t      \"size %wu\")\n+\t\t\t : G_(\"%<%.*s%> directive output truncated writing \"\n+\t\t\t      \"%wu or more bytes into a region of size %wu\"))\n+\t\t      : G_(\"%<%.*s%> directive writing %wu or more bytes \"\n+\t\t\t   \"into a region of size %wu\"), (int) dir.len,\n \t\t      target_to_host (hostdir, sizeof hostdir, dir.beg),\n \t\t      res.min, navail);\n     }\n@@ -2617,122 +2631,111 @@ maybe_warn (substring_loc &dirloc, location_t argloc,\n     {\n       gcc_assert (res.min == 1 && res.min == res.max);\n \n-      const char *fmtstr\n-\t= (info.bounded\n-\t   ? (maybe\n-\t      ? G_(\"%qE output may be truncated before the last format \"\n-\t\t   \"character\")\n-\t      : G_(\"%qE output truncated before the last format character\"))\n-\t   : (maybe\n-\t      ? G_(\"%qE may write a terminating nul past the end \"\n-\t\t   \"of the destination\")\n-\t      : G_(\"%qE writing a terminating nul past the end \"\n-\t\t   \"of the destination\")));\n-\n-      return fmtwarn (dirloc, UNKNOWN_LOCATION, NULL, info.warnopt (), fmtstr,\n-\t\t      info.func);\n+      return fmtwarn (dirloc, UNKNOWN_LOCATION, NULL, info.warnopt (),\n+\t\t      info.bounded\n+\t\t      ? (maybe\n+\t\t\t ? G_(\"%qE output may be truncated before the last \"\n+\t\t\t      \"format character\")\n+\t\t\t : G_(\"%qE output truncated before the last format \"\n+\t\t\t      \"character\"))\n+\t\t      : (maybe\n+\t\t\t ? G_(\"%qE may write a terminating nul past the end \"\n+\t\t\t      \"of the destination\")\n+\t\t\t : G_(\"%qE writing a terminating nul past the end \"\n+\t\t\t      \"of the destination\")), info.func);\n     }\n \n   if (res.min == res.max)\n     {\n-      const char* fmtstr\n-\t= (res.min == 1\n-\t   ? (info.bounded\n-\t      ? (maybe\n-\t\t ? G_(\"%<%.*s%> directive output may be truncated writing \"\n-\t\t      \"%wu byte into a region of size between %wu and %wu\")\n-\t\t : G_(\"%<%.*s%> directive output truncated writing \"\n-\t\t      \"%wu byte into a region of size between %wu and %wu\"))\n-\t      : G_(\"%<%.*s%> directive writing %wu byte \"\n-\t\t   \"into a region of size between %wu and %wu\"))\n-\t   : (info.bounded\n-\t      ? (maybe\n-\t\t ? G_(\"%<%.*s%> directive output may be truncated writing \"\n-\t\t      \"%wu bytes into a region of size between %wu and %wu\")\n-\t\t : G_(\"%<%.*s%> directive output truncated writing \"\n-\t\t      \"%wu bytes into a region of size between %wu and %wu\"))\n-\t      : G_(\"%<%.*s%> directive writing %wu bytes \"\n-\t\t   \"into a region of size between %wu and %wu\")));\n-\n-      return fmtwarn (dirloc, argloc, NULL,\n-\t\t      info.warnopt (), fmtstr, dir.len,\n-\t\t      target_to_host (hostdir, sizeof hostdir, dir.beg),\n-\t\t      res.min, avail_range.min, avail_range.max);\n+      const char *d = target_to_host (hostdir, sizeof hostdir, dir.beg);\n+      if (!info.bounded)\n+\treturn fmtwarn_n (dirloc, argloc, NULL, info.warnopt (), res.min,\n+\t\t\t  \"%<%.*s%> directive writing %wu byte into a region \"\n+\t\t\t  \"of size between %wu and %wu\",\n+\t\t\t  \"%<%.*s%> directive writing %wu bytes into a region \"\n+\t\t\t  \"of size between %wu and %wu\", (int) dir.len, d,\n+\t\t\t  res.min, avail_range.min, avail_range.max);\n+      else if (maybe)\n+\treturn fmtwarn_n (dirloc, argloc, NULL, info.warnopt (), res.min,\n+\t\t\t  \"%<%.*s%> directive output may be truncated writing \"\n+\t\t\t  \"%wu byte into a region of size between %wu and %wu\",\n+\t\t\t  \"%<%.*s%> directive output may be truncated writing \"\n+\t\t\t  \"%wu bytes into a region of size between %wu and \"\n+\t\t\t  \"%wu\", (int) dir.len, d, res.min, avail_range.min,\n+\t\t\t  avail_range.max);\n+      else\n+\treturn fmtwarn_n (dirloc, argloc, NULL, info.warnopt (), res.min,\n+\t\t\t  \"%<%.*s%> directive output truncated writing %wu \"\n+\t\t\t  \"byte into a region of size between %wu and %wu\",\n+\t\t\t  \"%<%.*s%> directive output truncated writing %wu \"\n+\t\t\t  \"bytes into a region of size between %wu and %wu\",\n+\t\t\t  (int) dir.len, d, res.min, avail_range.min,\n+\t\t\t  avail_range.max);\n     }\n \n   if (res.min == 0 && res.max < maxbytes)\n-    {\n-      const char* fmtstr\n-\t= (info.bounded\n-\t   ? (maybe\n-\t      ? G_(\"%<%.*s%> directive output may be truncated writing \"\n-\t\t   \"up to %wu bytes into a region of size between \"\n-\t\t   \"%wu and %wu\")\n-\t      : G_(\"%<%.*s%> directive output truncated writing \"\n-\t\t   \"up to %wu bytes into a region of size between \"\n-\t\t   \"%wu and %wu\"))\n-\t   : G_(\"%<%.*s%> directive writing up to %wu bytes \"\n-\t\t\"into a region of size between %wu and %wu\"));\n-      return fmtwarn (dirloc, argloc, NULL,\n-\t\t      info.warnopt (), fmtstr, dir.len,\n-\t\t      target_to_host (hostdir, sizeof hostdir, dir.beg),\n-\t\t      res.max, avail_range.min, avail_range.max);\n-    }\n+    return fmtwarn (dirloc, argloc, NULL, info.warnopt (),\n+\t\t    info.bounded\n+\t\t    ? (maybe\n+\t\t       ? G_(\"%<%.*s%> directive output may be truncated \"\n+\t\t\t    \"writing up to %wu bytes into a region of size \"\n+\t\t\t    \"between %wu and %wu\")\n+\t\t       : G_(\"%<%.*s%> directive output truncated writing \"\n+\t\t\t    \"up to %wu bytes into a region of size between \"\n+\t\t\t    \"%wu and %wu\"))\n+\t\t    : G_(\"%<%.*s%> directive writing up to %wu bytes \"\n+\t\t\t \"into a region of size between %wu and %wu\"),\n+\t\t    (int) dir.len,\n+\t\t    target_to_host (hostdir, sizeof hostdir, dir.beg),\n+\t\t    res.max, avail_range.min, avail_range.max);\n \n   if (res.min == 0 && maxbytes <= res.max)\n-    {\n-      /* This is a special case to avoid issuing the potentially confusing\n-\t warning:\n-\t   writing 0 or more bytes into a region of size between 0 and N.  */\n-      const char* fmtstr\n-\t= (info.bounded\n-\t   ? (maybe\n-\t      ? G_(\"%<%.*s%> directive output may be truncated writing \"\n-\t\t   \"likely %wu or more bytes into a region of size between \"\n-\t\t   \"%wu and %wu\")\n-\t      : G_(\"%<%.*s%> directive output truncated writing likely \"\n-\t\t   \"%wu or more bytes into a region of size between \"\n-\t\t   \"%wu and %wu\"))\n-\t   : G_(\"%<%.*s%> directive writing likely %wu or more bytes \"\n-\t\t\"into a region of size between %wu and %wu\"));\n-      return fmtwarn (dirloc, argloc, NULL,\n-\t\t      info.warnopt (), fmtstr, dir.len,\n-\t\t      target_to_host (hostdir, sizeof hostdir, dir.beg),\n-\t\t      res.likely, avail_range.min, avail_range.max);\n-    }\n+    /* This is a special case to avoid issuing the potentially confusing\n+       warning:\n+\t writing 0 or more bytes into a region of size between 0 and N.  */\n+    return fmtwarn (dirloc, argloc, NULL, info.warnopt (),\n+\t\t    info.bounded\n+\t\t    ? (maybe\n+\t\t       ? G_(\"%<%.*s%> directive output may be truncated \"\n+\t\t\t    \"writing likely %wu or more bytes into a region \"\n+\t\t\t    \"of size between %wu and %wu\")\n+\t\t       : G_(\"%<%.*s%> directive output truncated writing \"\n+\t\t\t    \"likely %wu or more bytes into a region of size \"\n+\t\t\t    \"between %wu and %wu\"))\n+\t\t    : G_(\"%<%.*s%> directive writing likely %wu or more bytes \"\n+\t\t\t \"into a region of size between %wu and %wu\"),\n+\t\t    (int) dir.len,\n+\t\t    target_to_host (hostdir, sizeof hostdir, dir.beg),\n+\t\t    res.likely, avail_range.min, avail_range.max);\n \n   if (res.max < maxbytes)\n-    {\n-      const char* fmtstr\n-\t= (info.bounded\n-\t   ? (maybe\n-\t      ? G_(\"%<%.*s%> directive output may be truncated writing \"\n-\t\t   \"between %wu and %wu bytes into a region of size \"\n-\t\t   \"between %wu and %wu\")\n-\t      : G_(\"%<%.*s%> directive output truncated writing \"\n-\t\t   \"between %wu and %wu bytes into a region of size \"\n-\t\t   \"between %wu and %wu\"))\n-\t   : G_(\"%<%.*s%> directive writing between %wu and \"\n-\t\t\"%wu bytes into a region of size between %wu and %wu\"));\n-      return fmtwarn (dirloc, argloc, NULL,\n-\t\t      info.warnopt (), fmtstr, dir.len,\n-\t\t      target_to_host (hostdir, sizeof hostdir, dir.beg),\n-\t\t      res.min, res.max, avail_range.min, avail_range.max);\n-    }\n-\n-  const char* fmtstr\n-    = (info.bounded\n-       ? (maybe\n-\t  ? G_(\"%<%.*s%> directive output may be truncated writing \"\n-\t       \"%wu or more bytes into a region of size between \"\n-\t       \"%wu and %wu\")\n-\t  : G_(\"%<%.*s%> directive output truncated writing \"\n-\t       \"%wu or more bytes into a region of size between \"\n-\t       \"%wu and %wu\"))\n-       : G_(\"%<%.*s%> directive writing %wu or more bytes \"\n-\t    \"into a region of size between %wu and %wu\"));\n-  return fmtwarn (dirloc, argloc, NULL,\n-\t\t  info.warnopt (), fmtstr, dir.len,\n+    return fmtwarn (dirloc, argloc, NULL, info.warnopt (),\n+\t\t    info.bounded\n+\t\t    ? (maybe\n+\t\t       ? G_(\"%<%.*s%> directive output may be truncated \"\n+\t\t\t    \"writing between %wu and %wu bytes into a region \"\n+\t\t\t    \"of size between %wu and %wu\")\n+\t\t       : G_(\"%<%.*s%> directive output truncated writing \"\n+\t\t\t    \"between %wu and %wu bytes into a region of size \"\n+\t\t\t    \"between %wu and %wu\"))\n+\t\t    : G_(\"%<%.*s%> directive writing between %wu and \"\n+\t\t\t \"%wu bytes into a region of size between %wu and \"\n+\t\t\t \"%wu\"), (int) dir.len,\n+\t\t    target_to_host (hostdir, sizeof hostdir, dir.beg),\n+\t\t    res.min, res.max, avail_range.min, avail_range.max);\n+\n+  return fmtwarn (dirloc, argloc, NULL, info.warnopt (),\n+\t\t  info.bounded\n+\t\t  ? (maybe\n+\t\t     ? G_(\"%<%.*s%> directive output may be truncated writing \"\n+\t\t\t  \"%wu or more bytes into a region of size between \"\n+\t\t\t  \"%wu and %wu\")\n+\t\t     : G_(\"%<%.*s%> directive output truncated writing \"\n+\t\t\t  \"%wu or more bytes into a region of size between \"\n+\t\t\t  \"%wu and %wu\"))\n+\t\t  : G_(\"%<%.*s%> directive writing %wu or more bytes \"\n+\t\t       \"into a region of size between %wu and %wu\"),\n+\t\t  (int) dir.len,\n \t\t  target_to_host (hostdir, sizeof hostdir, dir.beg),\n \t\t  res.min, avail_range.min, avail_range.max);\n }\n@@ -2883,27 +2886,22 @@ format_directive (const sprintf_dom_walker::call_info &info,\n \t (like Glibc does under some conditions).  */\n \n       if (fmtres.range.min == fmtres.range.max)\n-\twarned = fmtwarn (dirloc, argloc, NULL,\n-\t\t\t  info.warnopt (),\n+\twarned = fmtwarn (dirloc, argloc, NULL, info.warnopt (),\n \t\t\t  \"%<%.*s%> directive output of %wu bytes exceeds \"\n-\t\t\t  \"minimum required size of 4095\",\n-\t\t\t  dirlen,\n+\t\t\t  \"minimum required size of 4095\", dirlen,\n \t\t\t  target_to_host (hostdir, sizeof hostdir, dir.beg),\n \t\t\t  fmtres.range.min);\n       else\n-\t{\n-\t  const char *fmtstr\n-\t    = (minunder4k\n-\t       ? G_(\"%<%.*s%> directive output between %wu and %wu \"\n-\t\t    \"bytes may exceed minimum required size of 4095\")\n-\t       : G_(\"%<%.*s%> directive output between %wu and %wu \"\n-\t\t    \"bytes exceeds minimum required size of 4095\"));\n-\n-\t  warned = fmtwarn (dirloc, argloc, NULL,\n-\t\t\t    info.warnopt (), fmtstr, dirlen,\n-\t\t\t    target_to_host (hostdir, sizeof hostdir, dir.beg),\n-\t\t\t    fmtres.range.min, fmtres.range.max);\n-\t}\n+\twarned = fmtwarn (dirloc, argloc, NULL, info.warnopt (),\n+\t\t\t  minunder4k\n+\t\t\t  ? G_(\"%<%.*s%> directive output between %wu and %wu \"\n+\t\t\t       \"bytes may exceed minimum required size of \"\n+\t\t\t       \"4095\")\n+\t\t\t  : G_(\"%<%.*s%> directive output between %wu and %wu \"\n+\t\t\t       \"bytes exceeds minimum required size of 4095\"),\n+\t\t\t  dirlen,\n+\t\t\t  target_to_host (hostdir, sizeof hostdir, dir.beg),\n+\t\t\t  fmtres.range.min, fmtres.range.max);\n     }\n \n   /* Has the likely and maximum directive output exceeded INT_MAX?  */\n@@ -2929,29 +2927,24 @@ format_directive (const sprintf_dom_walker::call_info &info,\n       if (fmtres.range.min == fmtres.range.max)\n \twarned = fmtwarn (dirloc, argloc, NULL, info.warnopt (),\n \t\t\t  \"%<%.*s%> directive output of %wu bytes causes \"\n-\t\t\t  \"result to exceed %<INT_MAX%>\",\n-\t\t\t  dirlen,\n+\t\t\t  \"result to exceed %<INT_MAX%>\", dirlen,\n \t\t\t  target_to_host (hostdir, sizeof hostdir, dir.beg),\n \t\t\t  fmtres.range.min);\n       else\n-\t{\n-\t  const char *fmtstr\n-\t    = (fmtres.range.min > target_int_max ()\n-\t       ? G_ (\"%<%.*s%> directive output between %wu and %wu \"\n-\t\t     \"bytes causes result to exceed %<INT_MAX%>\")\n-\t       : G_ (\"%<%.*s%> directive output between %wu and %wu \"\n-\t\t     \"bytes may cause result to exceed %<INT_MAX%>\"));\n-\t  warned = fmtwarn (dirloc, argloc, NULL,\n-\t\t\t    info.warnopt (), fmtstr, dirlen,\n-\t\t\t    target_to_host (hostdir, sizeof hostdir, dir.beg),\n-\t\t\t    fmtres.range.min, fmtres.range.max);\n-\t}\n+\twarned = fmtwarn (dirloc, argloc, NULL, info.warnopt (),\n+\t\t\t  fmtres.range.min > target_int_max ()\n+\t\t\t  ? G_ (\"%<%.*s%> directive output between %wu and \"\n+\t\t\t\t\"%wu bytes causes result to exceed \"\n+\t\t\t\t\"%<INT_MAX%>\")\n+\t\t\t  : G_ (\"%<%.*s%> directive output between %wu and \"\n+\t\t\t\t\"%wu bytes may cause result to exceed \"\n+\t\t\t\t\"%<INT_MAX%>\"), dirlen,\n+\t\t\t  target_to_host (hostdir, sizeof hostdir, dir.beg),\n+\t\t\t  fmtres.range.min, fmtres.range.max);\n     }\n \n   if (warned && fmtres.range.min < fmtres.range.likely\n       && fmtres.range.likely < fmtres.range.max)\n-    /* Some languages have special plural rules even for large values,\n-       but it is periodic with period of 10, 100, 1000 etc.  */\n     inform_n (info.fmtloc, fmtres.range.likely,\n \t      \"assuming directive output of %wu byte\",\n \t      \"assuming directive output of %wu bytes\",\n@@ -3022,8 +3015,6 @@ format_directive (const sprintf_dom_walker::call_info &info,\n   return true;\n }\n \n-#pragma GCC diagnostic pop\n-\n /* Parse a format directive in function call described by INFO starting\n    at STR and populate DIR structure.  Bump up *ARGNO by the number of\n    arguments extracted for the directive.  Return the length of\n@@ -3373,9 +3364,9 @@ parse_directive (sprintf_dom_walker::call_info &info,\n \t  substring_loc dirloc (info.fmtloc, TREE_TYPE (info.format),\n \t\t\t\tcaret, begin, end);\n \n-\t  fmtwarn (dirloc, UNKNOWN_LOCATION, NULL,\n-\t\t   info.warnopt (), \"%<%.*s%> directive width out of range\",\n-\t\t   dir.len, target_to_host (hostdir, sizeof hostdir, dir.beg));\n+\t  fmtwarn (dirloc, UNKNOWN_LOCATION, NULL, info.warnopt (),\n+\t\t   \"%<%.*s%> directive width out of range\", (int) dir.len,\n+\t\t   target_to_host (hostdir, sizeof hostdir, dir.beg));\n \t}\n \n       dir.set_width (width);\n@@ -3407,9 +3398,9 @@ parse_directive (sprintf_dom_walker::call_info &info,\n \t  substring_loc dirloc (info.fmtloc, TREE_TYPE (info.format),\n \t\t\t\tcaret, begin, end);\n \n-\t  fmtwarn (dirloc, UNKNOWN_LOCATION, NULL,\n-\t\t   info.warnopt (), \"%<%.*s%> directive precision out of range\",\n-\t\t   dir.len, target_to_host (hostdir, sizeof hostdir, dir.beg));\n+\t  fmtwarn (dirloc, UNKNOWN_LOCATION, NULL, info.warnopt (),\n+\t\t   \"%<%.*s%> directive precision out of range\", (int) dir.len,\n+\t\t   target_to_host (hostdir, sizeof hostdir, dir.beg));\n \t}\n \n       dir.set_precision (precision);"}, {"sha": "2d7f0c15133738feeb22827636ce86b2ba3b13f5", "filename": "gcc/substring-locations.c", "status": "modified", "additions": 62, "deletions": 8, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/346114b54da37792ec1759a1e76626eb4d3a5594/gcc%2Fsubstring-locations.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/346114b54da37792ec1759a1e76626eb4d3a5594/gcc%2Fsubstring-locations.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsubstring-locations.c?ref=346114b54da37792ec1759a1e76626eb4d3a5594", "patch": "@@ -20,14 +20,17 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n+#include \"intl.h\"\n #include \"diagnostic.h\"\n #include \"cpplib.h\"\n #include \"tree.h\"\n #include \"langhooks.h\"\n #include \"substring-locations.h\"\n \n-/* Emit a warning governed by option OPT, using GMSGID as the format\n-   string and AP as its arguments.\n+/* Emit a warning governed by option OPT, using SINGULAR_GMSGID as the\n+   format string (or if PLURAL_GMSGID is different from SINGULAR_GMSGID,\n+   using SINGULAR_GMSGID, PLURAL_GMSGID and N as arguments to ngettext)\n+   and AP as its arguments.\n \n    Attempt to obtain precise location information within a string\n    literal from FMT_LOC.\n@@ -97,12 +100,13 @@ along with GCC; see the file COPYING3.  If not see\n \n    Return true if a warning was emitted, false otherwise.  */\n \n-ATTRIBUTE_GCC_DIAG (5,0)\n bool\n-format_warning_va (const substring_loc &fmt_loc,\n-\t\t   location_t param_loc,\n-\t\t   const char *corrected_substring,\n-\t\t   int opt, const char *gmsgid, va_list *ap)\n+format_warning_n_va (const substring_loc &fmt_loc,\n+\t\t     location_t param_loc,\n+\t\t     const char *corrected_substring,\n+\t\t     int opt, unsigned HOST_WIDE_INT n,\n+\t\t     const char *singular_gmsgid,\n+\t\t     const char *plural_gmsgid, va_list *ap)\n {\n   bool substring_within_range = false;\n   location_t primary_loc;\n@@ -143,7 +147,25 @@ format_warning_va (const substring_loc &fmt_loc,\n     richloc.add_fixit_replace (fmt_substring_range, corrected_substring);\n \n   diagnostic_info diagnostic;\n-  diagnostic_set_info (&diagnostic, gmsgid, ap, &richloc, DK_WARNING);\n+  if (singular_gmsgid != plural_gmsgid)\n+    {\n+      unsigned long gtn;\n+\n+      if (sizeof n <= sizeof gtn)\n+\tgtn = n;\n+      else\n+\t/* Use the largest number ngettext can handle, otherwise\n+\t   preserve the six least significant decimal digits for\n+\t   languages where the plural form depends on them.  */\n+\tgtn = n <= ULONG_MAX ? n : n % 1000000LU + 1000000LU;\n+\n+      const char *text = ngettext (singular_gmsgid, plural_gmsgid, gtn);\n+      diagnostic_set_info_translated (&diagnostic, text, ap, &richloc,\n+\t\t\t\t      DK_WARNING);\n+    }\n+  else\n+    diagnostic_set_info (&diagnostic, singular_gmsgid, ap, &richloc,\n+\t\t\t DK_WARNING);\n   diagnostic.option_index = opt;\n   bool warned = diagnostic_report_diagnostic (global_dc, &diagnostic);\n \n@@ -162,6 +184,18 @@ format_warning_va (const substring_loc &fmt_loc,\n   return warned;\n }\n \n+/* Singular-only version of the above.  */\n+\n+bool\n+format_warning_va (const substring_loc &fmt_loc,\n+\t\t   location_t param_loc,\n+\t\t   const char *corrected_substring,\n+\t\t   int opt, const char *gmsgid, va_list *ap)\n+{\n+  return format_warning_n_va (fmt_loc, param_loc, corrected_substring, opt,\n+\t\t\t      0, gmsgid, gmsgid, ap);\n+}\n+\n /* Variadic call to format_warning_va.  */\n \n bool\n@@ -179,6 +213,26 @@ format_warning_at_substring (const substring_loc &fmt_loc,\n   return warned;\n }\n \n+/* Variadic call to format_warning_n_va.  */\n+\n+bool\n+format_warning_at_substring_n (const substring_loc &fmt_loc,\n+\t\t\t       location_t param_loc,\n+\t\t\t       const char *corrected_substring,\n+\t\t\t       int opt, unsigned HOST_WIDE_INT n,\n+\t\t\t       const char *singular_gmsgid,\n+\t\t\t       const char *plural_gmsgid, ...)\n+{\n+  va_list ap;\n+  va_start (ap, plural_gmsgid);\n+  bool warned = format_warning_n_va (fmt_loc, param_loc, corrected_substring,\n+\t\t\t\t     opt, n, singular_gmsgid, plural_gmsgid,\n+\t\t\t\t     &ap);\n+  va_end (ap);\n+\n+  return warned;\n+}\n+\n /* Attempt to determine the source location of the substring.\n    If successful, return NULL and write the source location to *OUT_LOC.\n    Otherwise return an error message.  Error messages are intended"}, {"sha": "fca6fd333c4e7aca626cd5f5bec4abcd1e5116d5", "filename": "gcc/substring-locations.h", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/346114b54da37792ec1759a1e76626eb4d3a5594/gcc%2Fsubstring-locations.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/346114b54da37792ec1759a1e76626eb4d3a5594/gcc%2Fsubstring-locations.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsubstring-locations.h?ref=346114b54da37792ec1759a1e76626eb4d3a5594", "patch": "@@ -80,13 +80,29 @@ extern bool format_warning_va (const substring_loc &fmt_loc,\n \t\t\t       location_t param_loc,\n \t\t\t       const char *corrected_substring,\n \t\t\t       int opt, const char *gmsgid, va_list *ap)\n-  ATTRIBUTE_GCC_DIAG (5,0);\n+  ATTRIBUTE_GCC_DIAG (5, 0);\n+\n+extern bool format_warning_n_va (const substring_loc &fmt_loc,\n+\t\t\t\t location_t param_loc,\n+\t\t\t\t const char *corrected_substring,\n+\t\t\t\t int opt, unsigned HOST_WIDE_INT n,\n+\t\t\t\t const char *singular_gmsgid,\n+\t\t\t\t const char *plural_gmsgid, va_list *ap)\n+  ATTRIBUTE_GCC_DIAG (6, 0) ATTRIBUTE_GCC_DIAG (7, 0);\n \n extern bool format_warning_at_substring (const substring_loc &fmt_loc,\n \t\t\t\t\t location_t param_loc,\n \t\t\t\t\t const char *corrected_substring,\n \t\t\t\t\t int opt, const char *gmsgid, ...)\n-  ATTRIBUTE_GCC_DIAG (5,0);\n+  ATTRIBUTE_GCC_DIAG (5, 6);\n+\n+extern bool format_warning_at_substring_n (const substring_loc &fmt_loc,\n+\t\t\t\t\t   location_t param_loc,\n+\t\t\t\t\t   const char *corrected_substring,\n+\t\t\t\t\t   int opt, unsigned HOST_WIDE_INT n,\n+\t\t\t\t\t   const char *singular_gmsgid,\n+\t\t\t\t\t   const char *plural_gmsgid, ...)\n+  ATTRIBUTE_GCC_DIAG (6, 8) ATTRIBUTE_GCC_DIAG (7, 8);\n \n /* Implementation detail, for use when implementing\n    LANG_HOOKS_GET_SUBSTRING_LOCATION.  */"}]}