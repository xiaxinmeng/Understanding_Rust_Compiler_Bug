{"sha": "783b7a595b751a9ce47c7659a264c1ad1baa558c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgzYjdhNTk1Yjc1MWE5Y2U0N2M3NjU5YTI2NGMxYWQxYmFhNTU4Yw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2003-07-11T22:23:13Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-07-11T22:23:13Z"}, "message": "verify.exp: New file.\n\n\t* libjava.verify/verify.exp: New file.\n\t* libjava.verify/README.verify: New file.\n\nFrom-SVN: r69253", "tree": {"sha": "49362cdc534853e639889ba366b4a073c3c6cb00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49362cdc534853e639889ba366b4a073c3c6cb00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/783b7a595b751a9ce47c7659a264c1ad1baa558c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/783b7a595b751a9ce47c7659a264c1ad1baa558c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/783b7a595b751a9ce47c7659a264c1ad1baa558c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/783b7a595b751a9ce47c7659a264c1ad1baa558c/comments", "author": null, "committer": null, "parents": [{"sha": "fc0e6222b16f2523c2f037db596995dc4bc00479", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc0e6222b16f2523c2f037db596995dc4bc00479", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc0e6222b16f2523c2f037db596995dc4bc00479"}], "stats": {"total": 96, "additions": 96, "deletions": 0}, "files": [{"sha": "def930069b065e65e29d1dda1887166309f4ca6f", "filename": "libjava/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/783b7a595b751a9ce47c7659a264c1ad1baa558c/libjava%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/783b7a595b751a9ce47c7659a264c1ad1baa558c/libjava%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2FChangeLog?ref=783b7a595b751a9ce47c7659a264c1ad1baa558c", "patch": "@@ -1,3 +1,8 @@\n+2003-07-10  Tom Tromey  <tromey@redhat.com>\n+\n+\t* libjava.verify/verify.exp: New file.\n+\t* libjava.verify/README.verify: New file.\n+\n 2003-07-09  Jeff Sturm  <jsturm@one-point.com>\n \n \t* libjava.lang/SyncTest.java (run): Cache .class value."}, {"sha": "d28cdf82ca339f916675654d987ca11253dcc098", "filename": "libjava/testsuite/libjava.verify/README.verify", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/783b7a595b751a9ce47c7659a264c1ad1baa558c/libjava%2Ftestsuite%2Flibjava.verify%2FREADME.verify", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/783b7a595b751a9ce47c7659a264c1ad1baa558c/libjava%2Ftestsuite%2Flibjava.verify%2FREADME.verify", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.verify%2FREADME.verify?ref=783b7a595b751a9ce47c7659a264c1ad1baa558c", "patch": "@@ -0,0 +1,10 @@\n+The verifier tests come from Mauve.\n+See http://sources.redhat.com/mauve\n+\n+You want the \"verify\" module in the Mauve cvs repository.\n+\n+In Mauve, only the sources are checked in.  However, these need\n+jasmin to be compiled to bytecode.  Since jasmin would require either\n+another VM or gcj itself to already be working and installed (just to\n+compile it), we've chose to precompile all the .j files to .class\n+files and then import the result."}, {"sha": "90747780c597ecdb6d4628c085208aa2878306a7", "filename": "libjava/testsuite/libjava.verify/verify.exp", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/783b7a595b751a9ce47c7659a264c1ad1baa558c/libjava%2Ftestsuite%2Flibjava.verify%2Fverify.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/783b7a595b751a9ce47c7659a264c1ad1baa558c/libjava%2Ftestsuite%2Flibjava.verify%2Fverify.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.verify%2Fverify.exp?ref=783b7a595b751a9ce47c7659a264c1ad1baa558c", "patch": "@@ -0,0 +1,81 @@\n+# Tests for class verifier.\n+\n+global gcj_verify_xfail\n+set gcj_verify_xfail(\"gij verify of call.fail.Static\") 1\n+set gcj_verify_xfail(\"gij verify of simple.fail.dupfield\") 1\n+set gcj_verify_xfail(\"gij verify of simple.fail.dupinterface\") 1\n+set gcj_verify_xfail(\"gij verify of simple.fail.dupmethod\") 1\n+set gcj_verify_xfail(\"gij verify of subr.fail.jsr10\") 1\n+set gcj_verify_xfail(\"gij verify of subr.fail.jsr8\") 1\n+\n+\n+proc gcj_verify_list_tests {srcdir} {\n+  set result {}\n+  set here [pwd]\n+  cd $srcdir\n+  foreach item [lsort [glob -nocomplain */*/*.class]] {\n+    lappend result [file rootname $item]\n+  }\n+  cd $here\n+  return $result\n+}\n+\n+proc gcj_verify_test_gij {gij srcdir test shouldfail} {\n+  global gcj_verify_xfail\n+\n+  set testname \"gij verify of $test\"\n+  verbose \"invoking gij $test  - shouldfail=$shouldfail\"\n+  set result [libjava_load $gij [list --cp $srcdir $test] \"\"]\n+  set status [lindex $result 0]\n+  set output [lindex $result 1]\n+\n+  if {$shouldfail} {\n+    # We match the few exceptions that are allowed.  This may need\n+    # updating from time to time.  We do this rather than check the\n+    # exit status because we want to catch the case where gij dies in\n+    # some inappropriate way.\n+    if {[string match *VerifyError* $output]\n+\t|| [string match *AbstractMethodError* $output]\n+\t|| [string match *IncompatibleClassChangeError* $output]} {\n+      set cmd pass\n+    } else {\n+      set cmd fail\n+    }\n+    if {[info exists gcj_verify_xfail($testname)]} {\n+      setup_xfail *-*-*\n+    }\n+  } else {\n+    if {$status == \"pass\"} {\n+      set cmd pass\n+    } else {\n+      set cmd fail\n+    }\n+  }\n+  $cmd $testname\n+}\n+\n+proc gcj_verify_run {} {\n+  global INTERPRETER srcdir\n+\n+  set gij [libjava_find_gij] \n+  set interpret 1\n+  # libjava_find_gij will return `gij' if it couldn't find the\n+  # program; in this case we want to skip the test.\n+  if {$INTERPRETER != \"yes\" || $gij == \"gij\"} {\n+    set interpret 0\n+  }\n+\n+  set testsdir $srcdir/libjava.verify/verify\n+  foreach test [gcj_verify_list_tests $testsdir] {\n+    set shouldfail [string match */fail/* $test]\n+\n+    if {$interpret} {\n+      regsub -all -- / $test . gijname\n+      gcj_verify_test_gij $gij $testsdir $gijname $shouldfail\n+    }\n+\n+    # FIXME: run gcj --syntax-only here.\n+  }\n+}\n+\n+gcj_verify_run"}]}