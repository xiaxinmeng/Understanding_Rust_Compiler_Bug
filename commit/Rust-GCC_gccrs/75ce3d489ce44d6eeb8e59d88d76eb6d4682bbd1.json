{"sha": "75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVjZTNkNDg5Y2U0NGQ2ZWViOGU1OWQ4OGQ3NmViNmQ0NjgyYmJkMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-11-26T22:31:12Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-11-26T22:31:12Z"}, "message": "c-lex.c (pragma_lex): Rename from c_lex.\n\n        * c-lex.c (pragma_lex): Rename from c_lex.\n        * c-pch.c: Update for pragma_lex rename.\n        * c-pragma.c, c-pragma.h, config/ia64/ia64-c.c: Likewise.\n        * config/m32c/m32c-pragma.c, config/darwin-c.c: Likewise.\n        * config/rs6000/rs6000-c.c, config/c4x/c4x-c.c: Likewise.\n        * config/sol2-c.c, config/v850/v850-c.c: Likewise.\n        * doc/tm.texi: Likewise.\ncp/\n        * lex.c: Update for pragma_lex rename.\n        * parser.c: Likewise.\n\nFrom-SVN: r107544", "tree": {"sha": "5703faf1ece630500fe3307d28bde4060c47e721", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5703faf1ece630500fe3307d28bde4060c47e721"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/comments", "author": null, "committer": null, "parents": [{"sha": "37d3243dadc9c18a234d04716873b717efa93ae8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37d3243dadc9c18a234d04716873b717efa93ae8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37d3243dadc9c18a234d04716873b717efa93ae8"}], "stats": {"total": 181, "additions": 98, "deletions": 83}, "files": [{"sha": "0ee870db5a20ae5300f0453af103591f90a23be7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1", "patch": "@@ -1,3 +1,13 @@\n+2005-11-26  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-lex.c (pragma_lex): Rename from c_lex.\n+\t* c-pch.c: Update for pragma_lex rename.\n+\t* c-pragma.c, c-pragma.h, config/ia64/ia64-c.c: Likewise.\n+\t* config/m32c/m32c-pragma.c, config/darwin-c.c: Likewise.\n+\t* config/rs6000/rs6000-c.c, config/c4x/c4x-c.c: Likewise.\n+\t* config/sol2-c.c, config/v850/v850-c.c: Likewise.\n+\t* doc/tm.texi: Likewise.\n+\n 2005-11-26  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR middle-end/23669"}, {"sha": "4ceb6e49a4f3bea50e3a0a0ddd5433a501bdbc73", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1", "patch": "@@ -486,7 +486,7 @@ c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags)\n }\n \n enum cpp_ttype\n-c_lex (tree *value)\n+pragma_lex (tree *value)\n {\n   location_t loc;\n   return c_lex_with_flags (value, &loc, NULL);"}, {"sha": "dd7e5e7940aebdd3cb8fb42671f06c3a61b2592d", "filename": "gcc/c-pch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2Fc-pch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2Fc-pch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pch.c?ref=75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1", "patch": "@@ -447,7 +447,7 @@ c_common_pch_pragma (cpp_reader *pfile)\n   const char *name;\n   int fd;\n \n-  if (c_lex (&name_t) != CPP_STRING)\n+  if (pragma_lex (&name_t) != CPP_STRING)\n     {\n       error (\"malformed #pragma GCC pch_preprocess, ignored\");\n       return;"}, {"sha": "be762f20af25786b3e5e03bd25ca505cf06ea7fc", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1", "patch": "@@ -147,10 +147,10 @@ handle_pragma_pack (cpp_reader * ARG_UNUSED (dummy))\n   enum cpp_ttype token;\n   enum { set, push, pop } action;\n \n-  if (c_lex (&x) != CPP_OPEN_PAREN)\n+  if (pragma_lex (&x) != CPP_OPEN_PAREN)\n     GCC_BAD (\"missing %<(%> after %<#pragma pack%> - ignored\");\n \n-  token = c_lex (&x);\n+  token = pragma_lex (&x);\n   if (token == CPP_CLOSE_PAREN)\n     {\n       action = set;\n@@ -160,7 +160,7 @@ handle_pragma_pack (cpp_reader * ARG_UNUSED (dummy))\n     {\n       align = TREE_INT_CST_LOW (x);\n       action = set;\n-      if (c_lex (&x) != CPP_CLOSE_PAREN)\n+      if (pragma_lex (&x) != CPP_CLOSE_PAREN)\n \tGCC_BAD (\"malformed %<#pragma pack%> - ignored\");\n     }\n   else if (token == CPP_NAME)\n@@ -179,9 +179,9 @@ handle_pragma_pack (cpp_reader * ARG_UNUSED (dummy))\n       else\n \tGCC_BAD2 (\"unknown action %qs for %<#pragma pack%> - ignored\", op);\n \n-      while ((token = c_lex (&x)) == CPP_COMMA)\n+      while ((token = pragma_lex (&x)) == CPP_COMMA)\n \t{\n-\t  token = c_lex (&x);\n+\t  token = pragma_lex (&x);\n \t  if (token == CPP_NAME && id == 0)\n \t    {\n \t      id = x;\n@@ -203,7 +203,7 @@ handle_pragma_pack (cpp_reader * ARG_UNUSED (dummy))\n   else\n     GCC_BAD (\"malformed %<#pragma pack%> - ignored\");\n \n-  if (c_lex (&x) != CPP_EOF)\n+  if (pragma_lex (&x) != CPP_EOF)\n     warning (OPT_Wpragmas, \"junk at end of %<#pragma pack%>\");\n \n   if (flag_pack_struct)\n@@ -333,14 +333,14 @@ handle_pragma_weak (cpp_reader * ARG_UNUSED (dummy))\n \n   value = 0;\n \n-  if (c_lex (&name) != CPP_NAME)\n+  if (pragma_lex (&name) != CPP_NAME)\n     GCC_BAD (\"malformed #pragma weak, ignored\");\n-  t = c_lex (&x);\n+  t = pragma_lex (&x);\n   if (t == CPP_EQ)\n     {\n-      if (c_lex (&value) != CPP_NAME)\n+      if (pragma_lex (&value) != CPP_NAME)\n \tGCC_BAD (\"malformed #pragma weak, ignored\");\n-      t = c_lex (&x);\n+      t = pragma_lex (&x);\n     }\n   if (t != CPP_EOF)\n     warning (OPT_Wpragmas, \"junk at end of #pragma weak\");\n@@ -410,11 +410,11 @@ handle_pragma_redefine_extname (cpp_reader * ARG_UNUSED (dummy))\n   tree oldname, newname, decl, x;\n   enum cpp_ttype t;\n \n-  if (c_lex (&oldname) != CPP_NAME)\n+  if (pragma_lex (&oldname) != CPP_NAME)\n     GCC_BAD (\"malformed #pragma redefine_extname, ignored\");\n-  if (c_lex (&newname) != CPP_NAME)\n+  if (pragma_lex (&newname) != CPP_NAME)\n     GCC_BAD (\"malformed #pragma redefine_extname, ignored\");\n-  t = c_lex (&x);\n+  t = pragma_lex (&x);\n   if (t != CPP_EOF)\n     warning (OPT_Wpragmas, \"junk at end of #pragma redefine_extname\");\n \n@@ -480,9 +480,9 @@ handle_pragma_extern_prefix (cpp_reader * ARG_UNUSED (dummy))\n   tree prefix, x;\n   enum cpp_ttype t;\n \n-  if (c_lex (&prefix) != CPP_STRING)\n+  if (pragma_lex (&prefix) != CPP_STRING)\n     GCC_BAD (\"malformed #pragma extern_prefix, ignored\");\n-  t = c_lex (&x);\n+  t = pragma_lex (&x);\n   if (t != CPP_EOF)\n     warning (OPT_Wpragmas, \"junk at end of #pragma extern_prefix\");\n \n@@ -603,7 +603,7 @@ handle_pragma_visibility (cpp_reader *dummy ATTRIBUTE_UNUSED)\n   enum { bad, push, pop } action = bad;\n   static VEC (visibility, heap) *visstack;\n  \n-  token = c_lex (&x);\n+  token = pragma_lex (&x);\n   if (token == CPP_NAME)\n     {\n       const char *op = IDENTIFIER_POINTER (x);\n@@ -631,9 +631,9 @@ handle_pragma_visibility (cpp_reader *dummy ATTRIBUTE_UNUSED)\n         }\n       else\n         {\n-          if (c_lex (&x) != CPP_OPEN_PAREN)\n+          if (pragma_lex (&x) != CPP_OPEN_PAREN)\n             GCC_BAD (\"missing %<(%> after %<#pragma GCC visibility push%> - ignored\");\n-          token = c_lex (&x);\n+          token = pragma_lex (&x);\n           if (token != CPP_NAME)\n             {\n               GCC_BAD (\"malformed #pragma GCC visibility push\");\n@@ -657,11 +657,11 @@ handle_pragma_visibility (cpp_reader *dummy ATTRIBUTE_UNUSED)\n                 }\n               visibility_options.inpragma = 1;\n             }\n-          if (c_lex (&x) != CPP_CLOSE_PAREN)\n+          if (pragma_lex (&x) != CPP_CLOSE_PAREN)\n             GCC_BAD (\"missing %<(%> after %<#pragma GCC visibility push%> - ignored\");\n         }\n     }\n-  if (c_lex (&x) != CPP_EOF)\n+  if (pragma_lex (&x) != CPP_EOF)\n     warning (OPT_Wpragmas, \"junk at end of %<#pragma GCC visibility%>\");\n }\n "}, {"sha": "057aca6ecdebba5cb34fd12e3e8cffcc88a61e63", "filename": "gcc/c-pragma.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.h?ref=75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1", "patch": "@@ -64,7 +64,7 @@ extern void maybe_apply_pending_pragma_weaks (void);\n extern tree maybe_apply_renaming_pragma (tree, tree);\n extern void add_to_renaming_pragma_list (tree, tree);\n \n-extern enum cpp_ttype c_lex (tree *);\n+extern enum cpp_ttype pragma_lex (tree *);\n extern enum cpp_ttype c_lex_with_flags (tree *, location_t *, unsigned char *);\n \n /* If 1, then lex strings into the execution character set.  "}, {"sha": "d0de53ae020997f709bac244dedb0ec83ff3f36c", "filename": "gcc/config/c4x/c4x-c.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2Fconfig%2Fc4x%2Fc4x-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2Fconfig%2Fc4x%2Fc4x-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x-c.c?ref=75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1", "patch": "@@ -68,25 +68,25 @@ c4x_parse_pragma (name, func, sect)\n {\n   tree f, s, x;\n \n-  if (c_lex (&x) != CPP_OPEN_PAREN)\n+  if (pragma_lex (&x) != CPP_OPEN_PAREN)\n     BAD (\"missing '(' after '#pragma %s' - ignored\", name);\n \n-  if (c_lex (&f) != CPP_NAME)\n+  if (pragma_lex (&f) != CPP_NAME)\n     BAD (\"missing function name in '#pragma %s' - ignored\", name);\n \n   if (sect)\n     {\n-      if (c_lex (&x) != CPP_COMMA)\n+      if (pragma_lex (&x) != CPP_COMMA)\n \tBAD (\"malformed '#pragma %s' - ignored\", name);\n-      if (c_lex (&s) != CPP_STRING)\n+      if (pragma_lex (&s) != CPP_STRING)\n \tBAD (\"missing section name in '#pragma %s' - ignored\", name);\n       *sect = s;\n     }\n \n-  if (c_lex (&x) != CPP_CLOSE_PAREN)\n+  if (pragma_lex (&x) != CPP_CLOSE_PAREN)\n     BAD (\"missing ')' for '#pragma %s' - ignored\", name);\n \n-  if (c_lex (&x) != CPP_EOF)\n+  if (pragma_lex (&x) != CPP_EOF)\n     warning (OPT_Wpragmas, \"junk at end of '#pragma %s'\", name);\n \n   *func = f;"}, {"sha": "36b03c40fb4fcad26d57e956e1e8413612004fa0", "filename": "gcc/config/darwin-c.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2Fconfig%2Fdarwin-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2Fconfig%2Fdarwin-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-c.c?ref=75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1", "patch": "@@ -102,17 +102,17 @@ darwin_pragma_options (cpp_reader *pfile ATTRIBUTE_UNUSED)\n   const char *arg;\n   tree t, x;\n \n-  if (c_lex (&t) != CPP_NAME)\n+  if (pragma_lex (&t) != CPP_NAME)\n     BAD (\"malformed '#pragma options', ignoring\");\n   arg = IDENTIFIER_POINTER (t);\n   if (strcmp (arg, \"align\"))\n     BAD (\"malformed '#pragma options', ignoring\");\n-  if (c_lex (&t) != CPP_EQ)\n+  if (pragma_lex (&t) != CPP_EQ)\n     BAD (\"malformed '#pragma options', ignoring\");\n-  if (c_lex (&t) != CPP_NAME)\n+  if (pragma_lex (&t) != CPP_NAME)\n     BAD (\"malformed '#pragma options', ignoring\");\n \n-  if (c_lex (&x) != CPP_EOF)\n+  if (pragma_lex (&x) != CPP_EOF)\n     warning (0, \"junk at end of '#pragma options'\");\n \n   arg = IDENTIFIER_POINTER (t);\n@@ -134,19 +134,19 @@ darwin_pragma_unused (cpp_reader *pfile ATTRIBUTE_UNUSED)\n   tree decl, x;\n   int tok;\n \n-  if (c_lex (&x) != CPP_OPEN_PAREN)\n+  if (pragma_lex (&x) != CPP_OPEN_PAREN)\n     BAD (\"missing '(' after '#pragma unused', ignoring\");\n \n   while (1)\n     {\n-      tok = c_lex (&decl);\n+      tok = pragma_lex (&decl);\n       if (tok == CPP_NAME && decl)\n \t{\n \t  tree local = lookup_name (decl);\n \t  if (local && (TREE_CODE (local) == PARM_DECL\n \t\t\t|| TREE_CODE (local) == VAR_DECL))\n \t    TREE_USED (local) = 1;\n-\t  tok = c_lex (&x);\n+\t  tok = pragma_lex (&x);\n \t  if (tok != CPP_COMMA)\n \t    break;\n \t}\n@@ -155,7 +155,7 @@ darwin_pragma_unused (cpp_reader *pfile ATTRIBUTE_UNUSED)\n   if (tok != CPP_CLOSE_PAREN)\n     BAD (\"missing ')' after '#pragma unused', ignoring\");\n \n-  if (c_lex (&x) != CPP_EOF)\n+  if (pragma_lex (&x) != CPP_EOF)\n     warning (0, \"junk at end of '#pragma unused'\");\n }\n "}, {"sha": "9bb2a8007552c053051079f94f748a157e9e9a8f", "filename": "gcc/config/ia64/ia64-c.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2Fconfig%2Fia64%2Fia64-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2Fconfig%2Fia64%2Fia64-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-c.c?ref=75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1", "patch": "@@ -40,13 +40,13 @@ ia64_hpux_handle_builtin_pragma (cpp_reader *pfile ATTRIBUTE_UNUSED)\n   enum cpp_ttype type;\n   tree x;\n \n-  type = c_lex (&x);\n+  type = pragma_lex (&x);\n   while (type == CPP_NAME)\n     {\n       ia64_hpux_add_pragma_builtin (x);\n-      type = c_lex (&x);\n+      type = pragma_lex (&x);\n       if (type == CPP_COMMA)\n-\ttype = c_lex (&x);\n+\ttype = pragma_lex (&x);\n     }\n   if (type != CPP_EOF)\n     warning (OPT_Wpragmas, \"malformed #pragma builtin\");"}, {"sha": "b468388e275d5e4d62e76ce3f3d1c6ef1f54c38b", "filename": "gcc/config/m32c/m32c-pragma.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2Fconfig%2Fm32c%2Fm32c-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2Fconfig%2Fm32c%2Fm32c-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c-pragma.c?ref=75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1", "patch": "@@ -52,14 +52,14 @@ m32c_pragma_memregs (cpp_reader * reader ATTRIBUTE_UNUSED)\n   HOST_WIDE_INT i;\n   static char new_number[3];\n \n-  type = c_lex (&val);\n+  type = pragma_lex (&val);\n   if (type == CPP_NUMBER)\n     {\n       if (host_integerp (val, 1))\n \t{\n \t  i = tree_low_cst (val, 1);\n \n-\t  type = c_lex (&val);\n+\t  type = pragma_lex (&val);\n \t  if (type != CPP_EOF)\n \t    warning (0, \"junk at end of #pragma GCC memregs [0..16]\");\n "}, {"sha": "67416c20e62351d2dc911e5756f022cdbfc798ec", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1", "patch": "@@ -62,17 +62,17 @@ rs6000_pragma_longcall (cpp_reader *pfile ATTRIBUTE_UNUSED)\n   /* If we get here, generic code has already scanned the directive\n      leader and the word \"longcall\".  */\n \n-  if (c_lex (&x) != CPP_OPEN_PAREN)\n+  if (pragma_lex (&x) != CPP_OPEN_PAREN)\n     SYNTAX_ERROR (\"missing open paren\");\n-  if (c_lex (&n) != CPP_NUMBER)\n+  if (pragma_lex (&n) != CPP_NUMBER)\n     SYNTAX_ERROR (\"missing number\");\n-  if (c_lex (&x) != CPP_CLOSE_PAREN)\n+  if (pragma_lex (&x) != CPP_CLOSE_PAREN)\n     SYNTAX_ERROR (\"missing close paren\");\n \n   if (n != integer_zero_node && n != integer_one_node)\n     SYNTAX_ERROR (\"number must be 0 or 1\");\n \n-  if (c_lex (&x) != CPP_EOF)\n+  if (pragma_lex (&x) != CPP_EOF)\n     warning (OPT_Wpragmas, \"junk at end of #pragma longcall\");\n \n   rs6000_default_long_calls = (n == integer_one_node);"}, {"sha": "173583be26bc9df3752f5e46b65eaccb64aa5f35", "filename": "gcc/config/sol2-c.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2Fconfig%2Fsol2-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2Fconfig%2Fsol2-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2-c.c?ref=75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1", "patch": "@@ -88,8 +88,8 @@ solaris_pragma_align (cpp_reader *pfile ATTRIBUTE_UNUSED)\n   enum cpp_ttype ttype;\n   HOST_WIDE_INT low;\n \n-  if (c_lex (&x) != CPP_NUMBER\n-      || c_lex (&t) != CPP_OPEN_PAREN)\n+  if (pragma_lex (&x) != CPP_NUMBER\n+      || pragma_lex (&t) != CPP_OPEN_PAREN)\n     {\n       warning (0, \"malformed %<#pragma align%>, ignoring\");\n       return;\n@@ -104,7 +104,7 @@ solaris_pragma_align (cpp_reader *pfile ATTRIBUTE_UNUSED)\n       return;\n     }\n \n-  ttype = c_lex (&t);\n+  ttype = pragma_lex (&t);\n   if (ttype != CPP_NAME)\n     {\n       warning (0, \"malformed %<#pragma align%>, ignoring\");\n@@ -121,10 +121,10 @@ solaris_pragma_align (cpp_reader *pfile ATTRIBUTE_UNUSED)\n \tsolaris_pending_aligns = tree_cons (t, build_tree_list (NULL, x),\n \t\t\t\t\t    solaris_pending_aligns);\n \n-      ttype = c_lex (&t);\n+      ttype = pragma_lex (&t);\n       if (ttype == CPP_COMMA)\n \t{\n-\t  ttype = c_lex (&t);\n+\t  ttype = pragma_lex (&t);\n \t  if (ttype != CPP_NAME)\n \t    {\n \t      warning (0, \"malformed %<#pragma align%>\");\n@@ -133,7 +133,7 @@ solaris_pragma_align (cpp_reader *pfile ATTRIBUTE_UNUSED)\n \t}\n       else if (ttype == CPP_CLOSE_PAREN)\n \t{\n-\t  if (c_lex (&t) != CPP_EOF)\n+\t  if (pragma_lex (&t) != CPP_EOF)\n \t    warning (0, \"junk at end of %<#pragma align%>\");\n \t  return;\n \t}\n@@ -153,13 +153,13 @@ solaris_pragma_init (cpp_reader *pfile ATTRIBUTE_UNUSED)\n   tree t;\n   enum cpp_ttype ttype;\n \n-  if (c_lex (&t) != CPP_OPEN_PAREN)\n+  if (pragma_lex (&t) != CPP_OPEN_PAREN)\n     {\n       warning (0, \"malformed %<#pragma init%>, ignoring\");\n       return;\n     }\n \n-  ttype = c_lex (&t);\n+  ttype = pragma_lex (&t);\n   if (ttype != CPP_NAME)\n     {\n       warning (0, \"malformed %<#pragma init%>, ignoring\");\n@@ -179,10 +179,10 @@ solaris_pragma_init (cpp_reader *pfile ATTRIBUTE_UNUSED)\n       else\n \tsolaris_pending_inits = tree_cons (t, NULL, solaris_pending_inits);\n \n-      ttype = c_lex (&t);\n+      ttype = pragma_lex (&t);\n       if (ttype == CPP_COMMA)\n \t{\n-\t  ttype = c_lex (&t);\n+\t  ttype = pragma_lex (&t);\n \t  if (ttype != CPP_NAME)\n \t    {\n \t      warning (0, \"malformed %<#pragma init%>\");\n@@ -191,7 +191,7 @@ solaris_pragma_init (cpp_reader *pfile ATTRIBUTE_UNUSED)\n \t}\n       else if (ttype == CPP_CLOSE_PAREN)\n \t{\n-\t  if (c_lex (&t) != CPP_EOF)\n+\t  if (pragma_lex (&t) != CPP_EOF)\n \t    warning (0, \"junk at end of %<#pragma init%>\");\n \t  return;\n \t}\n@@ -211,13 +211,13 @@ solaris_pragma_fini (cpp_reader *pfile ATTRIBUTE_UNUSED)\n   tree t;\n   enum cpp_ttype ttype;\n \n-  if (c_lex (&t) != CPP_OPEN_PAREN)\n+  if (pragma_lex (&t) != CPP_OPEN_PAREN)\n     {\n       warning (0, \"malformed %<#pragma fini%>, ignoring\");\n       return;\n     }\n \n-  ttype = c_lex (&t);\n+  ttype = pragma_lex (&t);\n   if (ttype != CPP_NAME)\n     {\n       warning (0, \"malformed %<#pragma fini%>, ignoring\");\n@@ -237,10 +237,10 @@ solaris_pragma_fini (cpp_reader *pfile ATTRIBUTE_UNUSED)\n       else\n \tsolaris_pending_finis = tree_cons (t, NULL, solaris_pending_finis);\n \n-      ttype = c_lex (&t);\n+      ttype = pragma_lex (&t);\n       if (ttype == CPP_COMMA)\n \t{\n-\t  ttype = c_lex (&t);\n+\t  ttype = pragma_lex (&t);\n \t  if (ttype != CPP_NAME)\n \t    {\n \t      warning (0, \"malformed %<#pragma fini%>\");\n@@ -249,7 +249,7 @@ solaris_pragma_fini (cpp_reader *pfile ATTRIBUTE_UNUSED)\n \t}\n       else if (ttype == CPP_CLOSE_PAREN)\n \t{\n-\t  if (c_lex (&t) != CPP_EOF)\n+\t  if (pragma_lex (&t) != CPP_EOF)\n \t    warning (0, \"junk at end of %<#pragma fini%>\");\n \t  return;\n \t}"}, {"sha": "0dbeb2eb55018d350d07b169116aab25d03d8428", "filename": "gcc/config/v850/v850-c.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2Fconfig%2Fv850%2Fv850-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2Fconfig%2Fv850%2Fv850-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850-c.c?ref=75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1", "patch": "@@ -125,7 +125,7 @@ ghs_pragma_section (cpp_reader * pfile ATTRIBUTE_UNUSED)\n       const char *sect, *alias;\n       enum GHS_section_kind kind;\n       \n-      type = c_lex (&x);\n+      type = pragma_lex (&x);\n       \n       if (type == CPP_EOF && !repeat)\n \tgoto reset;\n@@ -135,14 +135,14 @@ ghs_pragma_section (cpp_reader * pfile ATTRIBUTE_UNUSED)\n \tgoto bad;\n       repeat = 0;\n       \n-      if (c_lex (&x) != CPP_EQ)\n+      if (pragma_lex (&x) != CPP_EQ)\n \tgoto bad;\n-      if (c_lex (&x) != CPP_NAME)\n+      if (pragma_lex (&x) != CPP_NAME)\n \tgoto bad;\n       \n       alias = IDENTIFIER_POINTER (x);\n       \n-      type = c_lex (&x);\n+      type = pragma_lex (&x);\n       if (type == CPP_COMMA)\n \trepeat = 1;\n       else if (type != CPP_EOF)\n@@ -196,7 +196,7 @@ ghs_pragma_interrupt (cpp_reader * pfile ATTRIBUTE_UNUSED)\n {\n   tree x;\n   \n-  if (c_lex (&x) != CPP_EOF)\n+  if (pragma_lex (&x) != CPP_EOF)\n     warning (OPT_Wpragmas, \"junk at end of #pragma ghs interrupt\");\n   \n   mark_current_function_as_interrupt ();\n@@ -207,7 +207,7 @@ ghs_pragma_starttda (cpp_reader * pfile ATTRIBUTE_UNUSED)\n {\n   tree x;\n   \n-  if (c_lex (&x) != CPP_EOF)\n+  if (pragma_lex (&x) != CPP_EOF)\n     warning (OPT_Wpragmas, \"junk at end of #pragma ghs starttda\");\n   \n   push_data_area (DATA_AREA_TDA);\n@@ -218,7 +218,7 @@ ghs_pragma_startsda (cpp_reader * pfile ATTRIBUTE_UNUSED)\n {\n   tree x;\n   \n-  if (c_lex (&x) != CPP_EOF)\n+  if (pragma_lex (&x) != CPP_EOF)\n     warning (OPT_Wpragmas, \"junk at end of #pragma ghs startsda\");\n   \n   push_data_area (DATA_AREA_SDA);\n@@ -229,7 +229,7 @@ ghs_pragma_startzda (cpp_reader * pfile ATTRIBUTE_UNUSED)\n {\n   tree x;\n   \n-  if (c_lex (&x) != CPP_EOF)\n+  if (pragma_lex (&x) != CPP_EOF)\n     warning (OPT_Wpragmas, \"junk at end of #pragma ghs startzda\");\n   \n   push_data_area (DATA_AREA_ZDA);\n@@ -240,7 +240,7 @@ ghs_pragma_endtda (cpp_reader * pfile ATTRIBUTE_UNUSED)\n {\n   tree x;\n   \n-  if (c_lex (&x) != CPP_EOF)\n+  if (pragma_lex (&x) != CPP_EOF)\n     warning (OPT_Wpragmas, \"junk at end of #pragma ghs endtda\");\n   \n   pop_data_area (DATA_AREA_TDA);\n@@ -251,7 +251,7 @@ ghs_pragma_endsda (cpp_reader * pfile ATTRIBUTE_UNUSED)\n {\n   tree x;\n   \n-  if (c_lex (&x) != CPP_EOF)\n+  if (pragma_lex (&x) != CPP_EOF)\n     warning (OPT_Wpragmas, \"junk at end of #pragma ghs endsda\");\n   \n   pop_data_area (DATA_AREA_SDA);\n@@ -262,7 +262,7 @@ ghs_pragma_endzda (cpp_reader * pfile ATTRIBUTE_UNUSED)\n {\n   tree x;\n   \n-  if (c_lex (&x) != CPP_EOF)\n+  if (pragma_lex (&x) != CPP_EOF)\n     warning (OPT_Wpragmas, \"junk at end of #pragma ghs endzda\");\n   \n   pop_data_area (DATA_AREA_ZDA);"}, {"sha": "b6936aa1e3cbc8950afd7706a8d3ff955baa261f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1", "patch": "@@ -1,3 +1,8 @@\n+2005-11-26  Richard Henderson  <rth@redhat.com>\n+\n+\t* lex.c: Update for pragma_lex rename.\n+\t* parser.c: Likewise.\n+\n 2005-11-25  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/9278"}, {"sha": "4ed1077bd3733cb1fed89098085e9f6964a6adb2", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1", "patch": "@@ -460,11 +460,11 @@ parse_strconst_pragma (const char* name, int opt)\n   tree result, x;\n   enum cpp_ttype t;\n \n-  t = c_lex (&x);\n+  t = pragma_lex (&x);\n   if (t == CPP_STRING)\n     {\n       result = x;\n-      if (c_lex (&x) != CPP_EOF)\n+      if (pragma_lex (&x) != CPP_EOF)\n \twarning (0, \"junk at end of #pragma %s\", name);\n       return result;\n     }\n@@ -583,7 +583,7 @@ static void\n handle_pragma_java_exceptions (cpp_reader* dfile ATTRIBUTE_UNUSED )\n {\n   tree x;\n-  if (c_lex (&x) != CPP_EOF)\n+  if (pragma_lex (&x) != CPP_EOF)\n     warning (0, \"junk at end of #pragma GCC java_exceptions\");\n \n   choose_personality_routine (lang_java);"}, {"sha": "0ea0f93602eff22674f3efd159fc9ea234481808", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1", "patch": "@@ -254,7 +254,7 @@ cp_lexer_new_main (void)\n   /* Tell cpplib we want CPP_PRAGMA tokens.  */\n   cpp_get_options (parse_in)->defer_pragmas = true;\n \n-  /* Tell c_lex not to merge string constants.  */\n+  /* Tell pragma_lex not to merge string constants.  */\n   c_lex_return_raw_strings = true;\n \n   c_common_no_more_pch ();\n@@ -297,8 +297,8 @@ cp_lexer_new_main (void)\n   lexer->next_token = lexer->buffer_length ? buffer : (cp_token *)&eof_token;\n \n   /* Pragma processing (via cpp_handle_deferred_pragma) may result in\n-     direct calls to c_lex.  Those callers all expect c_lex to do\n-     string constant concatenation.  */\n+     direct calls to pragma_lex.  Those callers all expect pragma_lex\n+     to do string constant concatenation.  */\n   c_lex_return_raw_strings = false;\n \n   /* Subsequent preprocessor diagnostics should use compiler"}, {"sha": "35bd5c3c2b0f2ddbba619c152aa0837bc53257c6", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=75ce3d489ce44d6eeb8e59d88d76eb6d4682bbd1", "patch": "@@ -9160,7 +9160,7 @@ pragma of the form\n @code{NULL} to put the pragma in the global namespace.  The callback\n routine receives @var{pfile} as its first argument, which can be passed\n on to cpplib's functions if necessary.  You can lex tokens after the\n-@var{name} by calling @code{c_lex}.  Tokens that are not read by the\n+@var{name} by calling @code{pragma_lex}.  Tokens that are not read by the\n callback will be silently ignored.  The end of the line is indicated by\n a token of type @code{CPP_EOF}.  Macro expansion occurs on the\n arguments of pragmas registered with\n@@ -9170,15 +9170,15 @@ pragmas registered with @code{c_register_pragma}.\n For an example use of this routine, see @file{c4x.h} and the callback\n routines defined in @file{c4x-c.c}.\n \n-Note that the use of @code{c_lex} is specific to the C and C++\n+Note that the use of @code{pragma_lex} is specific to the C and C++\n compilers.  It will not work in the Java or Fortran compilers, or any\n-other language compilers for that matter.  Thus if @code{c_lex} is going\n+other language compilers for that matter.  Thus if @code{pragma_lex} is going\n to be called from target-specific code, it must only be done so when\n building the C and C++ compilers.  This can be done by defining the\n variables @code{c_target_objs} and @code{cxx_target_objs} in the\n target entry in the @file{config.gcc} file.  These variables should name\n the target-specific, language-specific object file which contains the\n-code that uses @code{c_lex}.  Note it will also be necessary to add a\n+code that uses @code{pragma_lex}.  Note it will also be necessary to add a\n rule to the makefile fragment pointed to by @code{tmake_file} that shows\n how to build this object file.\n @end deftypefun"}]}