{"sha": "9c09f152d90089509bcc4b5b8094fbbb1707fbc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMwOWYxNTJkOTAwODk1MDliY2M0YjViODA5NGZiYmIxNzA3ZmJjMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-05-23T12:25:41Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-05-23T12:25:41Z"}, "message": "tree-dfa.c (add_referenced_var_1): Do not add global vars.\n\n2012-05-23  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-dfa.c (add_referenced_var_1): Do not add global vars.\n\t* tree-ssa-live.c (mark_all_vars_used_1): Handle global vars\n\tvia the global_unused_vars bitmap.\n\t(remove_unused_locals): Handle global vars in local-decls via\n\ta global_unused_vars bitmap instead of the used flag in the\n\tvar annotation.  Simplify global variable handling and removal.\n\n\t* gcc.dg/torture/pr39074-2.c: Adjust.\n\t* gcc.dg/torture/pr39074.c: Likewise.\n\t* gcc.dg/torture/pta-structcopy-1.c: Likewise.\n\t* gcc.dg/tree-ssa/alias-19.c: Likewise.\n\nFrom-SVN: r187800", "tree": {"sha": "ba5ec63e854787f6350620ade1d6adb1b183582e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba5ec63e854787f6350620ade1d6adb1b183582e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c09f152d90089509bcc4b5b8094fbbb1707fbc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c09f152d90089509bcc4b5b8094fbbb1707fbc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c09f152d90089509bcc4b5b8094fbbb1707fbc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c09f152d90089509bcc4b5b8094fbbb1707fbc1/comments", "author": null, "committer": null, "parents": [{"sha": "aa19cf8778bf9457935bc6cd15a96cf8dfd7fe60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa19cf8778bf9457935bc6cd15a96cf8dfd7fe60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa19cf8778bf9457935bc6cd15a96cf8dfd7fe60"}], "stats": {"total": 142, "additions": 74, "deletions": 68}, "files": [{"sha": "112f31873cc44c50c111ad166e1f2598dcd171d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c09f152d90089509bcc4b5b8094fbbb1707fbc1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c09f152d90089509bcc4b5b8094fbbb1707fbc1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c09f152d90089509bcc4b5b8094fbbb1707fbc1", "patch": "@@ -1,8 +1,17 @@\n+2012-05-23  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-dfa.c (add_referenced_var_1): Do not add global vars.\n+\t* tree-ssa-live.c (mark_all_vars_used_1): Handle global vars\n+\tvia the global_unused_vars bitmap.\n+\t(remove_unused_locals): Handle global vars in local-decls via\n+\ta global_unused_vars bitmap instead of the used flag in the\n+\tvar annotation.  Simplify global variable handling and removal.\n+\n 2012-05-22  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/53426\n-\t* tree-ssa-structalias.c (create_variable_info_for): Skip constructors from\n-\tother partitions.\n+\t* tree-ssa-structalias.c (create_variable_info_for): Skip constructors\n+\tfrom other partitions.\n \n 2012-05-22  Jan Hubicka  <jh@suse.cz>\n "}, {"sha": "4934bd2e4fe97c3c48a50da6c6efac15940f5ec8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c09f152d90089509bcc4b5b8094fbbb1707fbc1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c09f152d90089509bcc4b5b8094fbbb1707fbc1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9c09f152d90089509bcc4b5b8094fbbb1707fbc1", "patch": "@@ -1,3 +1,10 @@\n+2012-05-23  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/torture/pr39074-2.c: Adjust.\n+\t* gcc.dg/torture/pr39074.c: Likewise.\n+\t* gcc.dg/torture/pta-structcopy-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/alias-19.c: Likewise.\n+\n 2012-05-22  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/53161"}, {"sha": "d18930a4d6e1610788f5226cf4300a8e6988350a", "filename": "gcc/testsuite/gcc.dg/torture/pr39074-2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c09f152d90089509bcc4b5b8094fbbb1707fbc1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr39074-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c09f152d90089509bcc4b5b8094fbbb1707fbc1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr39074-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr39074-2.c?ref=9c09f152d90089509bcc4b5b8094fbbb1707fbc1", "patch": "@@ -30,5 +30,6 @@ int main()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump \"y.._., points-to vars: { i }\" \"alias\" } } */\n+/* { dg-final { scan-tree-dump \"y.._. = { i }\" \"alias\" } } */\n+/* { dg-final { scan-tree-dump \"y.._., points-to vars: { D..... }\" \"alias\" } } */\n /* { dg-final { cleanup-tree-dump \"alias\" } } */"}, {"sha": "5d46f3120d1fddcd5a53db7cebfe5eef5e5241f0", "filename": "gcc/testsuite/gcc.dg/torture/pr39074.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c09f152d90089509bcc4b5b8094fbbb1707fbc1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr39074.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c09f152d90089509bcc4b5b8094fbbb1707fbc1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr39074.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr39074.c?ref=9c09f152d90089509bcc4b5b8094fbbb1707fbc1", "patch": "@@ -29,5 +29,6 @@ int main()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump \"y.._., points-to vars: { i }\" \"alias\" } } */\n+/* { dg-final { scan-tree-dump \"y.._. = { i }\" \"alias\" } } */\n+/* { dg-final { scan-tree-dump \"y.._., points-to vars: { D..... }\" \"alias\" } } */\n /* { dg-final { cleanup-tree-dump \"alias\" } } */"}, {"sha": "4846dd69879ae821d9dcf3c643273726054d50d9", "filename": "gcc/testsuite/gcc.dg/torture/pta-structcopy-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c09f152d90089509bcc4b5b8094fbbb1707fbc1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpta-structcopy-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c09f152d90089509bcc4b5b8094fbbb1707fbc1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpta-structcopy-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpta-structcopy-1.c?ref=9c09f152d90089509bcc4b5b8094fbbb1707fbc1", "patch": "@@ -31,5 +31,6 @@ int main()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump \"points-to vars: { i }\" \"ealias\" } } */\n+/* { dg-final { scan-tree-dump \"y.* = { i }\" \"ealias\" } } */\n+/* { dg-final { scan-tree-dump \"y.*, points-to vars: { D..... }\" \"ealias\" } } */\n /* { dg-final { cleanup-tree-dump \"ealias\" } } */"}, {"sha": "63a4eee0fe6917cb3440932cc67681e36e1ac4cc", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias-19.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c09f152d90089509bcc4b5b8094fbbb1707fbc1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c09f152d90089509bcc4b5b8094fbbb1707fbc1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-19.c?ref=9c09f152d90089509bcc4b5b8094fbbb1707fbc1", "patch": "@@ -26,5 +26,5 @@ int main()\n }\n \n /* { dg-final { scan-tree-dump \"q_. = { a b }\" \"alias\" } } */\n-/* { dg-final { scan-tree-dump \"q_., points-to vars: { a b }\" \"alias\" } } */\n+/* { dg-final { scan-tree-dump \"q_., points-to vars: { D..... b }\" \"alias\" } } */\n /* { dg-final { cleanup-tree-dump \"alias\" } } */"}, {"sha": "e9db01d8b82d5e5fcdb9b90d80640c5064a6f723", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c09f152d90089509bcc4b5b8094fbbb1707fbc1/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c09f152d90089509bcc4b5b8094fbbb1707fbc1/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=9c09f152d90089509bcc4b5b8094fbbb1707fbc1", "patch": "@@ -581,6 +581,11 @@ add_referenced_var_1 (tree var, struct function *fn)\n \t\t       || TREE_CODE (var) == PARM_DECL\n \t\t       || TREE_CODE (var) == RESULT_DECL);\n \n+  if (!(TREE_CODE (var) == VAR_DECL\n+\t&& VAR_DECL_IS_VIRTUAL_OPERAND (var))\n+      && is_global_var (var))\n+    return false;\n+\n   if (!*DECL_VAR_ANN_PTR (var))\n     create_var_ann (var);\n "}, {"sha": "397be1d421fe7b4b5a567e6c99e7f86e970653ed", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 44, "deletions": 62, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c09f152d90089509bcc4b5b8094fbbb1707fbc1/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c09f152d90089509bcc4b5b8094fbbb1707fbc1/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=9c09f152d90089509bcc4b5b8094fbbb1707fbc1", "patch": "@@ -348,6 +348,7 @@ static inline void mark_all_vars_used (tree *, void *data);\n static tree\n mark_all_vars_used_1 (tree *tp, int *walk_subtrees, void *data)\n {\n+  bitmap global_unused_vars = (bitmap)data;\n   tree t = *tp;\n   enum tree_code_class c = TREE_CODE_CLASS (TREE_CODE (t));\n   tree b;\n@@ -374,15 +375,20 @@ mark_all_vars_used_1 (tree *tp, int *walk_subtrees, void *data)\n      eliminated as unused.  */\n   if (TREE_CODE (t) == VAR_DECL)\n     {\n-      if (data != NULL && bitmap_clear_bit ((bitmap) data, DECL_UID (t))\n-\t  && DECL_CONTEXT (t) == current_function_decl)\n-\tmark_all_vars_used (&DECL_INITIAL (t), data);\n-      if (var_ann (t) != NULL)\n+      /* Global vars do not have a var-annotation so their use is tracked\n+         with the global_unused_vars bitmap.  Also walk their initializer\n+\t when they are first recognized as used.  */\n+      if (is_global_var (t))\n+\t{\n+\t  if (bitmap_clear_bit (global_unused_vars, DECL_UID (t)))\n+\t    mark_all_vars_used (&DECL_INITIAL (t), data);\n+\t}\n+      else\n \tset_is_used (t);\n     }\n   /* remove_unused_scope_block_p requires information about labels\n      which are not DECL_IGNORED_P to tell if they might be used in the IL.  */\n-  if (TREE_CODE (t) == LABEL_DECL)\n+  else if (TREE_CODE (t) == LABEL_DECL)\n     /* Although the TREE_USED values that the frontend uses would be\n        acceptable (albeit slightly over-conservative) for our purposes,\n        init_vars_expansion clears TREE_USED for LABEL_DECLs too, so we\n@@ -689,7 +695,7 @@ remove_unused_locals (void)\n   tree var, t;\n   referenced_var_iterator rvi;\n   bitmap global_unused_vars = NULL;\n-  unsigned srcidx, dstidx, num;\n+  unsigned srcidx, dstidx, num, ix;\n   bool have_local_clobbers = false;\n \n   /* Removing declarations from lexical blocks when not optimizing is\n@@ -706,6 +712,13 @@ remove_unused_locals (void)\n   FOR_EACH_REFERENCED_VAR (cfun, t, rvi)\n     clear_is_used (t);\n \n+  /* Assume all globals in local decls are unused.  */\n+  global_unused_vars = BITMAP_ALLOC (NULL);\n+  FOR_EACH_LOCAL_DECL (cfun, ix, var)\n+    if (TREE_CODE (var) == VAR_DECL\n+\t&& is_global_var (var))\n+      bitmap_set_bit (global_unused_vars, DECL_UID (var));\n+\n   /* Walk the CFG marking all referenced symbols.  */\n   FOR_EACH_BB (bb)\n     {\n@@ -733,7 +746,8 @@ remove_unused_locals (void)\n \t    TREE_USED (b) = true;\n \n \t  for (i = 0; i < gimple_num_ops (stmt); i++)\n-\t    mark_all_vars_used (gimple_op_ptr (gsi_stmt (gsi), i), NULL);\n+\t    mark_all_vars_used (gimple_op_ptr (gsi_stmt (gsi), i),\n+\t\t\t\tglobal_unused_vars);\n \t}\n \n       for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n@@ -743,17 +757,16 @@ remove_unused_locals (void)\n \t  tree def;\n \t  gimple phi = gsi_stmt (gsi);\n \n-\t  /* No point processing globals.  */\n-\t  if (is_global_var (SSA_NAME_VAR (gimple_phi_result (phi))))\n+\t  if (!is_gimple_reg (gimple_phi_result (phi)))\n \t    continue;\n \n \t  def = gimple_phi_result (phi);\n-\t  mark_all_vars_used (&def, NULL);\n+\t  mark_all_vars_used (&def, global_unused_vars);\n \n           FOR_EACH_PHI_ARG (arg_p, phi, i, SSA_OP_ALL_USES)\n             {\n \t      tree arg = USE_FROM_PTR (arg_p);\n-\t      mark_all_vars_used (&arg, NULL);\n+\t      mark_all_vars_used (&arg, global_unused_vars);\n             }\n         }\n \n@@ -783,7 +796,10 @@ remove_unused_locals (void)\n \t\tlhs = get_base_address (lhs);\n \t\tif (TREE_CODE (lhs) == SSA_NAME)\n \t\t  lhs = SSA_NAME_VAR (lhs);\n-\t\tif (DECL_P (lhs) && (!var_ann (lhs) || !is_used_p (lhs)))\n+\t\tif (TREE_CODE (lhs) == VAR_DECL\n+\t\t    && ((is_global_var (lhs)\n+\t\t\t && bitmap_bit_p (global_unused_vars, DECL_UID (lhs)))\n+\t\t\t|| (!is_global_var (lhs) && !is_used_p (lhs))))\n \t\t  {\n \t\t    unlink_stmt_vdef (stmt);\n \t\t    gsi_remove (&gsi, true);\n@@ -799,27 +815,30 @@ remove_unused_locals (void)\n \n   cfun->has_local_explicit_reg_vars = false;\n \n-  /* Remove unmarked local vars from local_decls.  */\n+  /* Remove unmarked local and global vars from local_decls\n+     and referenced vars.  */\n   num = VEC_length (tree, cfun->local_decls);\n   for (srcidx = 0, dstidx = 0; srcidx < num; srcidx++)\n     {\n       var = VEC_index (tree, cfun->local_decls, srcidx);\n-      if (TREE_CODE (var) != FUNCTION_DECL\n-\t  && (!var_ann (var)\n-\t      || !is_used_p (var)))\n+      if (TREE_CODE (var) == VAR_DECL)\n \t{\n \t  if (is_global_var (var))\n \t    {\n-\t      if (global_unused_vars == NULL)\n-\t\tglobal_unused_vars = BITMAP_ALLOC (NULL);\n-\t      bitmap_set_bit (global_unused_vars, DECL_UID (var));\n+\t      if (bitmap_bit_p (global_unused_vars, DECL_UID (var)))\n+\t\tcontinue;\n+\t    }\n+\t  else if (var_ann (var) == NULL\n+\t\t   || !is_used_p (var))\n+\t    {\n+\t      if (var_ann (var))\n+\t\tremove_referenced_var (var);\n+\t      continue;\n \t    }\n-\t  else\n-\t    continue;\n \t}\n-      else if (TREE_CODE (var) == VAR_DECL\n-\t       && DECL_HARD_REGISTER (var)\n-\t       && !is_global_var (var))\n+      if (TREE_CODE (var) == VAR_DECL\n+\t  && DECL_HARD_REGISTER (var)\n+\t  && !is_global_var (var))\n \tcfun->has_local_explicit_reg_vars = true;\n \n       if (srcidx != dstidx)\n@@ -828,45 +847,8 @@ remove_unused_locals (void)\n     }\n   if (dstidx != num)\n     VEC_truncate (tree, cfun->local_decls, dstidx);\n+  BITMAP_FREE (global_unused_vars);\n \n-  /* Remove unmarked global vars from local_decls.  */\n-  if (global_unused_vars != NULL)\n-    {\n-      tree var;\n-      unsigned ix;\n-      FOR_EACH_LOCAL_DECL (cfun, ix, var)\n-\tif (TREE_CODE (var) == VAR_DECL\n-\t    && is_global_var (var)\n-\t    && var_ann (var) != NULL\n-\t    && is_used_p (var)\n-\t    && DECL_CONTEXT (var) == current_function_decl)\n-\t  mark_all_vars_used (&DECL_INITIAL (var), global_unused_vars);\n-\n-      num = VEC_length (tree, cfun->local_decls);\n-      for (srcidx = 0, dstidx = 0; srcidx < num; srcidx++)\n-\t{\n-\t  var = VEC_index (tree, cfun->local_decls, srcidx);\n-\t  if (TREE_CODE (var) == VAR_DECL\n-\t      && is_global_var (var)\n-\t      && bitmap_bit_p (global_unused_vars, DECL_UID (var)))\n-\t    continue;\n-\n-\t  if (srcidx != dstidx)\n-\t    VEC_replace (tree, cfun->local_decls, dstidx, var);\n-\t  dstidx++;\n-\t}\n-      if (dstidx != num)\n-\tVEC_truncate (tree, cfun->local_decls, dstidx);\n-      BITMAP_FREE (global_unused_vars);\n-    }\n-\n-  /* Remove unused variables from REFERENCED_VARs.  */\n-  FOR_EACH_REFERENCED_VAR (cfun, t, rvi)\n-    if (!is_global_var (t)\n-\t&& TREE_CODE (t) != PARM_DECL\n-\t&& TREE_CODE (t) != RESULT_DECL\n-\t&& !is_used_p (t))\n-      remove_referenced_var (t);\n   remove_unused_scope_block_p (DECL_INITIAL (current_function_decl));\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {"}]}