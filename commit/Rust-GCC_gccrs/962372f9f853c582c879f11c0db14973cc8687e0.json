{"sha": "962372f9f853c582c879f11c0db14973cc8687e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYyMzcyZjlmODUzYzU4MmM4NzlmMTFjMGRiMTQ5NzNjYzg2ODdlMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-05-14T09:11:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-05-14T09:11:15Z"}, "message": "re PR tree-optimization/88828 (Inefficient update of the first element of vector registers)\n\n2019-05-14  Richard Biener  <rguenther@suse.de>\n\tH.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR tree-optimization/88828\n\t* tree-ssa-forwprop.c (simplify_vector_constructor): Handle\n\tpermuting in a single non-constant element not extracted\n\tfrom a vector.\n\n\t* gcc.target/i386/pr88828-1.c: New test.\n\t* gcc.target/i386/pr88828-1a.c: Likewise.\n\t* gcc.target/i386/pr88828-1b.c: Likewise.\n\t* gcc.target/i386/pr88828-1c.c: Likewise.\n\t* gcc.target/i386/pr88828-4a.c: Likewise.\n\t* gcc.target/i386/pr88828-4b.c: Likewise.\n\t* gcc.target/i386/pr88828-5a.c: Likewise.\n\t* gcc.target/i386/pr88828-5b.c: Likewise.\n\t* gcc.target/i386/pr88828-7.c: Likewise.\n\t* gcc.target/i386/pr88828-7a.c: Likewise.\n\t* gcc.target/i386/pr88828-7b.c: Likewise.\n\t* gcc.target/i386/pr88828-8.c: Likewise.\n\t* gcc.target/i386/pr88828-8a.c: Likewise.\n\t* gcc.target/i386/pr88828-8b.c: Likewise.\n\t* gcc.target/i386/pr88828-9.c: Likewise.\n\t* gcc.target/i386/pr88828-9a.c: Likewise.\n\t* gcc.target/i386/pr88828-9b.c: Likewise.\n\nCo-Authored-By: H.J. Lu <hongjiu.lu@intel.com>\n\nFrom-SVN: r271153", "tree": {"sha": "ef30e0b7d85731711c60f9e78a158ffb7d2b1c4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef30e0b7d85731711c60f9e78a158ffb7d2b1c4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/962372f9f853c582c879f11c0db14973cc8687e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/962372f9f853c582c879f11c0db14973cc8687e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/962372f9f853c582c879f11c0db14973cc8687e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/962372f9f853c582c879f11c0db14973cc8687e0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a52cf5cf278e4a9e58bfa2bb67a93244766a122f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a52cf5cf278e4a9e58bfa2bb67a93244766a122f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a52cf5cf278e4a9e58bfa2bb67a93244766a122f"}], "stats": {"total": 569, "additions": 534, "deletions": 35}, "files": [{"sha": "1af0304076aa410813a50da4036c5532c05d3a12", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=962372f9f853c582c879f11c0db14973cc8687e0", "patch": "@@ -1,3 +1,11 @@\n+2019-05-14  Richard Biener  <rguenther@suse.de>\n+\tH.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR tree-optimization/88828\n+\t* tree-ssa-forwprop.c (simplify_vector_constructor): Handle\n+\tpermuting in a single non-constant element not extracted\n+\tfrom a vector.\n+\n 2019-05-14  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com\\>\n \n \t* internal-fn.def (SIGNBIT): New."}, {"sha": "eebebfa9697647d0f8625afb826328974537b0c0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=962372f9f853c582c879f11c0db14973cc8687e0", "patch": "@@ -1,3 +1,25 @@\n+2019-05-14  Richard Biener  <rguenther@suse.de>\n+\tH.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR tree-optimization/88828\n+\t* gcc.target/i386/pr88828-1.c: New test.\n+\t* gcc.target/i386/pr88828-1a.c: Likewise.\n+\t* gcc.target/i386/pr88828-1b.c: Likewise.\n+\t* gcc.target/i386/pr88828-1c.c: Likewise.\n+\t* gcc.target/i386/pr88828-4a.c: Likewise.\n+\t* gcc.target/i386/pr88828-4b.c: Likewise.\n+\t* gcc.target/i386/pr88828-5a.c: Likewise.\n+\t* gcc.target/i386/pr88828-5b.c: Likewise.\n+\t* gcc.target/i386/pr88828-7.c: Likewise.\n+\t* gcc.target/i386/pr88828-7a.c: Likewise.\n+\t* gcc.target/i386/pr88828-7b.c: Likewise.\n+\t* gcc.target/i386/pr88828-8.c: Likewise.\n+\t* gcc.target/i386/pr88828-8a.c: Likewise.\n+\t* gcc.target/i386/pr88828-8b.c: Likewise.\n+\t* gcc.target/i386/pr88828-9.c: Likewise.\n+\t* gcc.target/i386/pr88828-9a.c: Likewise.\n+\t* gcc.target/i386/pr88828-9b.c: Likewise.\n+\n 2019-05-14  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com\\>\n \n \t* gcc.target/aarch64/signbitv4sf.c: New test."}, {"sha": "a15d1fea3f518ee7932060fe3d32391110f2e695", "filename": "gcc/testsuite/gcc.target/i386/pr88828-1.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-1.c?ref=962372f9f853c582c879f11c0db14973cc8687e0", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run { target sse2_runtime } } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#include \"pr88828-1a.c\"\n+#include \"pr88828-1b.c\"\n+#include \"pr88828-1c.c\"\n+\n+extern void abort ();\n+\n+void\n+do_check (__v4sf y, float f[4], float z)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    if (i == 0)\n+      {\n+\tif (y[i] != z)\n+\t  abort ();\n+      }\n+    else\n+      {\n+\tif (y[i] != f[i])\n+\t  abort ();\n+      }\n+}\n+\n+int\n+main (void)\n+{\n+  float f[4] = { -11, 2, 55553, -4 };\n+  float z = 134567;\n+  __v4sf x = { f[0], f[1], f[2], f[3] };\n+  __v4sf y;\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    if (x[i] != f[i])\n+      abort ();\n+\n+  y = foo1 (x, z);\n+  do_check (y, f, z);\n+  y = foo2 (x, z);\n+  do_check (y, f, z);\n+  y = foo3 (x, z);\n+  do_check (y, f, z);\n+\n+  return 0;\n+}"}, {"sha": "d37b24c6661b5bac0af034517dcdcfeac099d989", "filename": "gcc/testsuite/gcc.target/i386/pr88828-1a.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-1a.c?ref=962372f9f853c582c879f11c0db14973cc8687e0", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse -mno-sse4\" } */\n+/* { dg-final { scan-assembler \"movss\" } } */\n+/* { dg-final { scan-assembler-not \"movaps\" } } */\n+/* { dg-final { scan-assembler-not \"movlhps\" } } */\n+/* { dg-final { scan-assembler-not \"unpcklps\" } } */\n+/* { dg-final { scan-assembler-not \"shufps\" } } */\n+\n+typedef float __v4sf __attribute__ ((__vector_size__ (16)));\n+\n+__attribute__((noinline, noclone))\n+__v4sf\n+foo1 (__v4sf x, float f)\n+{\n+  __v4sf y = { f, x[1], x[2], x[3] };\n+  return y;\n+}"}, {"sha": "af4aced65f895556387c110696567b74f1ff9ab9", "filename": "gcc/testsuite/gcc.target/i386/pr88828-1b.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-1b.c?ref=962372f9f853c582c879f11c0db14973cc8687e0", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse -mno-sse4\" } */\n+/* { dg-final { scan-assembler \"movss\" } } */\n+/* { dg-final { scan-assembler-not \"movaps\" } } */\n+/* { dg-final { scan-assembler-not \"movlhps\" } } */\n+/* { dg-final { scan-assembler-not \"unpcklps\" } } */\n+/* { dg-final { scan-assembler-not \"shufps\" } } */\n+\n+typedef float __v4sf __attribute__ ((__vector_size__ (16)));\n+\n+static __v4sf\n+vector_init (float f0,float f1, float f2,float f3)\n+{\n+  __v4sf y = { f0, f1, f2, f3 };\n+   return y;\n+}\n+\n+__attribute__((noinline, noclone))\n+__v4sf\n+foo2 (__v4sf x, float f)\n+{\n+  return vector_init (f, x[1], x[2], x[3]) ;\n+}"}, {"sha": "a117f3ec7b1ef72687d35d6f66b4a88ad16180cb", "filename": "gcc/testsuite/gcc.target/i386/pr88828-1c.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-1c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-1c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-1c.c?ref=962372f9f853c582c879f11c0db14973cc8687e0", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse -mno-sse4\" } */\n+/* { dg-final { scan-assembler \"movss\" } } */\n+/* { dg-final { scan-assembler-not \"movaps\" } } */\n+/* { dg-final { scan-assembler-not \"movlhps\" } } */\n+/* { dg-final { scan-assembler-not \"unpcklps\" } } */\n+/* { dg-final { scan-assembler-not \"shufps\" } } */\n+\n+typedef float __v4sf __attribute__ ((__vector_size__ (16)));\n+\n+__attribute__((noinline, noclone))\n+__v4sf\n+foo3 (__v4sf x, float f)\n+{\n+  __v4sf y = x;\n+  y[0] = f;\n+  return y;\n+}"}, {"sha": "64043b9855f054428f34c3b906adc8d5df102c06", "filename": "gcc/testsuite/gcc.target/i386/pr88828-4a.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-4a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-4a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-4a.c?ref=962372f9f853c582c879f11c0db14973cc8687e0", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse -mno-sse4\" } */\n+/* { dg-final { scan-assembler \"movss\" } } */\n+/* { dg-final { scan-assembler-times \"shufps\" 1 } } */\n+/* { dg-final { scan-assembler-not \"movaps\" } } */\n+/* { dg-final { scan-assembler-not \"movlhps\" } } */\n+/* { dg-final { scan-assembler-not \"unpcklps\" } } */\n+\n+typedef float __v4sf __attribute__ ((__vector_size__ (16)));\n+\n+__attribute__((noinline, noclone))\n+__v4sf\n+foo (__v4sf x, float f)\n+{\n+  __v4sf y = { x[0], x[2], x[3], x[1] };\n+  y[0] = f;\n+  return y;\n+}"}, {"sha": "ad8d2b985d4f523e7c600128ede6a83bad929985", "filename": "gcc/testsuite/gcc.target/i386/pr88828-4b.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-4b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-4b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-4b.c?ref=962372f9f853c582c879f11c0db14973cc8687e0", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx\" } */\n+/* { dg-final { scan-assembler-times \"vpermilps\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovss\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"vpinsrd\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-not \"vmovss\" { target ia32 } } } */\n+/* { dg-final { scan-assembler-not \"vshufps\" } } */\n+/* { dg-final { scan-assembler-not \"vmovaps\" } } */\n+/* { dg-final { scan-assembler-not \"vmovlhps\" } } */\n+/* { dg-final { scan-assembler-not \"vunpcklps\" } } */\n+\n+typedef float __v4sf __attribute__ ((__vector_size__ (16)));\n+\n+__attribute__((noinline, noclone))\n+__v4sf\n+foo (__v4sf x, float f)\n+{\n+  __v4sf y = { x[0], x[2], x[3], x[1] };\n+  y[0] = f;\n+  return y;\n+}"}, {"sha": "5e908faef5c381e347c2107993bf238aaaacd7a9", "filename": "gcc/testsuite/gcc.target/i386/pr88828-5a.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-5a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-5a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-5a.c?ref=962372f9f853c582c879f11c0db14973cc8687e0", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse -mno-sse4\" } */\n+/* { dg-final { scan-assembler \"movss\" } } */\n+/* { dg-final { scan-assembler-times \"shufps\" 2 } } */\n+/* { dg-final { scan-assembler-times \"movaps\" 1 } } */\n+/* { dg-final { scan-assembler-not \"movlhps\" } } */\n+/* { dg-final { scan-assembler-not \"unpcklps\" } } */\n+\n+typedef float __v4sf __attribute__ ((__vector_size__ (16)));\n+\n+__attribute__((noinline, noclone))\n+__v4sf\n+foo (__v4sf x, float f)\n+{\n+  __v4sf y = { x[0], x[2], x[3], x[0] };\n+  y[3] = f;\n+  return y;\n+}"}, {"sha": "988a48823e645590d2c801f5264fdb292bbdb0e6", "filename": "gcc/testsuite/gcc.target/i386/pr88828-5b.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-5b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-5b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-5b.c?ref=962372f9f853c582c879f11c0db14973cc8687e0", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx\" } */\n+/* { dg-final { scan-assembler-times \"vpermilps\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vinsertps\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vshufps\" } } */\n+/* { dg-final { scan-assembler-not \"vmovss\" } } */\n+/* { dg-final { scan-assembler-not \"vmovaps\" } } */\n+/* { dg-final { scan-assembler-not \"vmovlhps\" } } */\n+/* { dg-final { scan-assembler-not \"vunpcklps\" } } */\n+\n+typedef float __v4sf __attribute__ ((__vector_size__ (16)));\n+\n+__attribute__((noinline, noclone))\n+__v4sf\n+foo (__v4sf x, float f)\n+{\n+  __v4sf y = { x[0], x[2], x[3], x[0] };\n+  y[3] = f;\n+  return y;\n+}"}, {"sha": "4302c26647888cf4a8ef6e5b42e5e0c318e3b284", "filename": "gcc/testsuite/gcc.target/i386/pr88828-7.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-7.c?ref=962372f9f853c582c879f11c0db14973cc8687e0", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run { target sse2_runtime } } */\n+/* { dg-options \"-O2 -msse2 -fexcess-precision=standard\" } */\n+\n+#include \"pr88828-7a.c\"\n+#include \"pr88828-7b.c\"\n+\n+extern void abort ();\n+\n+float\n+bar (float x, float y)\n+{\n+  return x / y - y * x;\n+}\n+\n+void\n+do_check (__v4sf x, float f1[4], float f2[4])\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    if (i == 0)\n+      {\n+\tif (x[i] != bar (f1[i], f2[i]))\n+\t  abort ();\n+      }\n+    else\n+      {\n+\tif (x[i] != f1[i])\n+\t  abort ();\n+      }\n+}\n+\n+int\n+main (void)\n+{\n+  float f1[4] = { -11, 2, 55553, -4 };\n+  float f2[4] = { 111, 3.3, -55.553, 4.8 };\n+  __v4sf x = { f1[0], f1[1], f1[2], f1[3] };\n+  __v4sf y = { f2[0], f2[1], f2[2], f2[3] };\n+  __v4sf z;\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    if (x[i] != f1[i] || y[i] != f2[i] )\n+      abort ();\n+\n+  z = foo1 (x, y);\n+  do_check (z, f1, f2);\n+  x = foo2 (x, y);\n+  do_check (z, f1, f2);\n+\n+  return 0;\n+}"}, {"sha": "f1ae57422d97e5f5ce2a3a63fabbafd7f3ae6b7f", "filename": "gcc/testsuite/gcc.target/i386/pr88828-7a.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-7a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-7a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-7a.c?ref=962372f9f853c582c879f11c0db14973cc8687e0", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse -mno-sse4\" } */\n+/* { dg-final { scan-assembler-not \"movlhps\" } } */\n+/* { dg-final { scan-assembler-not \"unpckhps\" } } */\n+/* { dg-final { scan-assembler-not \"unpcklps\" } } */\n+/* { dg-final { scan-assembler-not \"shufps\" } } */\n+\n+typedef float __v4sf __attribute__ ((__vector_size__ (16)));\n+extern float bar (float, float);\n+\n+__v4sf\n+foo1 (__v4sf x, __v4sf y)\n+{\n+  __v4sf z = { bar (x[0], y[0]), x[1], x[2], x[3] };\n+  return z;\n+}"}, {"sha": "c027c56948dfe6ddd5d62cd7bf4c1a7617a8aa80", "filename": "gcc/testsuite/gcc.target/i386/pr88828-7b.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-7b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-7b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-7b.c?ref=962372f9f853c582c879f11c0db14973cc8687e0", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse -mno-sse4\" } */\n+/* { dg-final { scan-assembler-not \"movlhps\" } } */\n+/* { dg-final { scan-assembler-not \"unpckhps\" } } */\n+/* { dg-final { scan-assembler-not \"unpcklps\" } } */\n+/* { dg-final { scan-assembler-not \"shufps\" } } */\n+\n+typedef float __v4sf __attribute__ ((__vector_size__ (16)));\n+extern float bar (float, float);\n+\n+static __v4sf\n+vector_init (float f0,float f1, float f2,float f3)\n+{\n+  __v4sf y = { f0, f1, f2, f3 };\n+   return y;\n+}\n+\n+__v4sf\n+foo2 (__v4sf x, __v4sf y)\n+{\n+  return vector_init (bar (x[0], y[0]), x[1], x[2], x[3]) ;\n+}"}, {"sha": "3b8eabd225f6742dc2d2969c28eb9ff34ee69ce7", "filename": "gcc/testsuite/gcc.target/i386/pr88828-8.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-8.c?ref=962372f9f853c582c879f11c0db14973cc8687e0", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run { target sse2_runtime } } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#include \"pr88828-8a.c\"\n+#include \"pr88828-8b.c\"\n+\n+extern void abort ();\n+\n+void\n+do_check (__v4sf y, float f[4], float z)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    if (i == 0)\n+      {\n+\tif (y[i] != z)\n+\t  abort ();\n+      }\n+    else\n+      {\n+\tif (y[i] != f[i])\n+\t  abort ();\n+      }\n+}\n+\n+int\n+main (void)\n+{\n+  float f[4] = { -11, 2, 55553, -4 };\n+  float z = 11.4;\n+  __v4sf x = { f[0], f[1], f[2], f[3] };\n+  __v4sf y;\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    if (x[i] != f[i])\n+      abort ();\n+\n+  y = foo1 (x);\n+  do_check (y, f, z);\n+  y = foo2 (x);\n+  do_check (y, f, z);\n+\n+  return 0;\n+}"}, {"sha": "5d383dfd081d96b72886a728291e3b5a6e7d6d44", "filename": "gcc/testsuite/gcc.target/i386/pr88828-8a.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-8a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-8a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-8a.c?ref=962372f9f853c582c879f11c0db14973cc8687e0", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse -mno-sse4\" } */\n+/* { dg-final { scan-assembler-not \"movlhps\" } } */\n+/* { dg-final { scan-assembler-not \"unpckhps\" } } */\n+/* { dg-final { scan-assembler-not \"unpcklps\" } } */\n+/* { dg-final { scan-assembler-not \"shufps\" } } */\n+\n+typedef float __v4sf __attribute__ ((__vector_size__ (16)));\n+\n+__v4sf\n+foo1 (__v4sf x)\n+{\n+  __v4sf z = { 11.4, x[1], x[2], x[3] };\n+  return z;\n+}"}, {"sha": "5ffbc9c3103c6b47b2855424beaed31c71e7ec32", "filename": "gcc/testsuite/gcc.target/i386/pr88828-8b.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-8b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-8b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-8b.c?ref=962372f9f853c582c879f11c0db14973cc8687e0", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse -mno-sse4\" } */\n+/* { dg-final { scan-assembler-not \"movlhps\" } } */\n+/* { dg-final { scan-assembler-not \"unpckhps\" } } */\n+/* { dg-final { scan-assembler-not \"unpcklps\" } } */\n+/* { dg-final { scan-assembler-not \"shufps\" } } */\n+\n+typedef float __v4sf __attribute__ ((__vector_size__ (16)));\n+\n+static __v4sf\n+vector_init (float f0,float f1, float f2,float f3)\n+{\n+  __v4sf y = { f0, f1, f2, f3 };\n+   return y;\n+}\n+\n+__v4sf\n+foo2 (__v4sf x)\n+{\n+  return vector_init (11.4, x[1], x[2], x[3]) ;\n+}"}, {"sha": "c33907b4a6f13f561a1e20cd44ebf61fd3dd012b", "filename": "gcc/testsuite/gcc.target/i386/pr88828-9.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-9.c?ref=962372f9f853c582c879f11c0db14973cc8687e0", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run { target sse2_runtime } } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#include \"pr88828-9a.c\"\n+#include \"pr88828-9b.c\"\n+\n+extern void abort ();\n+\n+void\n+do_check (__v4sf y, float f[4], float z)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    if (i == 0)\n+      {\n+\tif (y[i] != z)\n+\t  abort ();\n+      }\n+    else\n+      {\n+\tif (y[i] != f[i])\n+\t  abort ();\n+      }\n+}\n+\n+int\n+main (void)\n+{\n+  float f[4] = { -11, 2, 55553, -4 };\n+  float z = 11.4;\n+  __m128 x = (__m128) (__v4sf) { f[0], f[1], f[2], f[3] };\n+  __m128 y;\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    if (x[i] != f[i])\n+      abort ();\n+\n+  y = foo1 (x);\n+  do_check (y, f, z);\n+  y = foo2 (x);\n+  do_check (y, f, z);\n+\n+  return 0;\n+}"}, {"sha": "7f83065773262acc08f2e0008dc1f43b2f1c7f87", "filename": "gcc/testsuite/gcc.target/i386/pr88828-9a.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-9a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-9a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-9a.c?ref=962372f9f853c582c879f11c0db14973cc8687e0", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse -mno-sse4\" } */\n+/* { dg-final { scan-assembler-not \"movlhps\" } } */\n+/* { dg-final { scan-assembler-not \"unpckhps\" } } */\n+/* { dg-final { scan-assembler-not \"unpcklps\" } } */\n+/* { dg-final { scan-assembler-not \"shufps\" } } */\n+\n+typedef float __v4sf __attribute__ ((__vector_size__ (16)));\n+typedef float __m128 __attribute__ ((__vector_size__ (16), __may_alias__));\n+\n+__m128\n+foo1 (__m128 x)\n+{\n+  __v4sf z = { 11.4, ((__v4sf) x)[1], ((__v4sf) x)[2], ((__v4sf) x) [3] };\n+  return (__m128) z;\n+}"}, {"sha": "6588ad15a9b46f2d079f45b4fe449287656ca734", "filename": "gcc/testsuite/gcc.target/i386/pr88828-9b.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-9b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-9b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88828-9b.c?ref=962372f9f853c582c879f11c0db14973cc8687e0", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse -mno-sse4\" } */\n+/* { dg-final { scan-assembler-not \"movlhps\" } } */\n+/* { dg-final { scan-assembler-not \"unpckhps\" } } */\n+/* { dg-final { scan-assembler-not \"unpcklps\" } } */\n+/* { dg-final { scan-assembler-not \"shufps\" } } */\n+\n+typedef float __v4sf __attribute__ ((__vector_size__ (16)));\n+typedef float __m128 __attribute__ ((__vector_size__ (16), __may_alias__));\n+\n+static __m128\n+vector_init (float f0,float f1, float f2,float f3)\n+{\n+  __v4sf y = { f0, f1, f2, f3 };\n+   return (__m128) y;\n+}\n+\n+__m128\n+foo2 (__m128 x)\n+{\n+  return vector_init (11.4, ((__v4sf) x)[1], ((__v4sf) x)[2],\n+\t\t      ((__v4sf) x) [3]);\n+}"}, {"sha": "b6b21f86f13ffc2146b7faf37b221cd09b866a6c", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 62, "deletions": 35, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962372f9f853c582c879f11c0db14973cc8687e0/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=962372f9f853c582c879f11c0db14973cc8687e0", "patch": "@@ -2065,71 +2065,87 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n   conv_code = ERROR_MARK;\n   maybe_ident = true;\n   tree one_constant = NULL_TREE;\n+  tree one_nonconstant = NULL_TREE;\n   auto_vec<tree> constants;\n   constants.safe_grow_cleared (nelts);\n   FOR_EACH_VEC_SAFE_ELT (CONSTRUCTOR_ELTS (op), i, elt)\n     {\n       tree ref, op1;\n+      unsigned int elem;\n \n       if (i >= nelts)\n \treturn false;\n \n+      /* Look for elements extracted and possibly converted from\n+         another vector.  */\n       op1 = get_bit_field_ref_def (elt->value, conv_code);\n-      if (op1)\n+      if (op1\n+\t  && TREE_CODE ((ref = TREE_OPERAND (op1, 0))) == SSA_NAME\n+\t  && VECTOR_TYPE_P (TREE_TYPE (ref))\n+\t  && useless_type_conversion_p (TREE_TYPE (op1),\n+\t\t\t\t\tTREE_TYPE (TREE_TYPE (ref)))\n+\t  && known_eq (bit_field_size (op1), elem_size)\n+\t  && constant_multiple_p (bit_field_offset (op1),\n+\t\t\t\t  elem_size, &elem))\n \t{\n-\t  ref = TREE_OPERAND (op1, 0);\n \t  unsigned int j;\n \t  for (j = 0; j < 2; ++j)\n \t    {\n \t      if (!orig[j])\n \t\t{\n-\t\t  if (TREE_CODE (ref) != SSA_NAME)\n-\t\t    return false;\n-\t\t  if (! VECTOR_TYPE_P (TREE_TYPE (ref))\n-\t\t      || ! useless_type_conversion_p (TREE_TYPE (op1),\n-\t\t\t\t\t\t      TREE_TYPE (TREE_TYPE (ref))))\n-\t\t    return false;\n-\t\t  if (j && !useless_type_conversion_p (TREE_TYPE (orig[0]),\n-\t\t\t\t\t\t       TREE_TYPE (ref)))\n-\t\t    return false;\n-\t\t  orig[j] = ref;\n-\t\t  break;\n+\t\t  if (j == 0\n+\t\t      || useless_type_conversion_p (TREE_TYPE (orig[0]),\n+\t\t\t\t\t\t    TREE_TYPE (ref)))\n+\t\t    break;\n \t\t}\n \t      else if (ref == orig[j])\n \t\tbreak;\n \t    }\n-\t  if (j == 2)\n-\t    return false;\n-\n-\t  unsigned int elt;\n-\t  if (maybe_ne (bit_field_size (op1), elem_size)\n-\t      || !constant_multiple_p (bit_field_offset (op1), elem_size, &elt))\n-\t    return false;\n-\t  if (j)\n-\t    elt += nelts;\n-\t  if (elt != i)\n-\t    maybe_ident = false;\n-\t  sel.quick_push (elt);\n+\t  /* Found a suitable vector element.  */\n+\t  if (j <= 2)\n+\t    {\n+\t      orig[j] = ref;\n+\t      if (j)\n+\t\telem += nelts;\n+\t      if (elem != i)\n+\t\tmaybe_ident = false;\n+\t      sel.quick_push (elem);\n+\t      continue;\n+\t    }\n+\t  /* Else fallthru.  */\n \t}\n-      else if (CONSTANT_CLASS_P (elt->value))\n+      /* Handle elements not extracted from a vector.\n+          1. constants by permuting with constant vector\n+\t  2. a unique non-constant element by permuting with a splat vector  */\n+      if (orig[1]\n+\t  && orig[1] != error_mark_node)\n+\treturn false;\n+      orig[1] = error_mark_node;\n+      if (CONSTANT_CLASS_P (elt->value))\n \t{\n-\t  if (orig[1]\n-\t      && orig[1] != error_mark_node)\n+\t  if (one_nonconstant)\n \t    return false;\n-\t  orig[1] = error_mark_node;\n \t  if (!one_constant)\n \t    one_constant = elt->value;\n \t  constants[i] = elt->value;\n-\t  sel.quick_push (i + nelts);\n-\t  maybe_ident = false;\n \t}\n       else\n-\treturn false;\n+\t{\n+\t  if (one_constant)\n+\t    return false;\n+\t  if (!one_nonconstant)\n+\t    one_nonconstant = elt->value;\n+\t  else if (!operand_equal_p (one_nonconstant, elt->value, 0))\n+\t    return false;\n+\t}\n+      sel.quick_push (i + nelts);\n+      maybe_ident = false;\n     }\n   if (i < nelts)\n     return false;\n \n-  if (! VECTOR_TYPE_P (TREE_TYPE (orig[0]))\n+  if (! orig[0]\n+      || ! VECTOR_TYPE_P (TREE_TYPE (orig[0]))\n       || maybe_ne (TYPE_VECTOR_SUBPARTS (type),\n \t\t   TYPE_VECTOR_SUBPARTS (TREE_TYPE (orig[0]))))\n     return false;\n@@ -2165,9 +2181,19 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n \t\t       GET_MODE_SIZE (TYPE_MODE (type))))\n \treturn false;\n       op2 = vec_perm_indices_to_tree (mask_type, indices);\n+      bool convert_orig0 = false;\n       if (!orig[1])\n \torig[1] = orig[0];\n-      if (orig[1] == error_mark_node)\n+      else if (orig[1] == error_mark_node\n+\t       && one_nonconstant)\n+\t{\n+\t  gimple_seq seq = NULL;\n+\t  orig[1] = gimple_build_vector_from_val (&seq, UNKNOWN_LOCATION,\n+\t\t\t\t\t\t  type, one_nonconstant);\n+\t  gsi_insert_seq_before (gsi, seq, GSI_SAME_STMT);\n+\t  convert_orig0 = true;\n+\t}\n+      else if (orig[1] == error_mark_node)\n \t{\n \t  tree_vector_builder vec (type, nelts, 1);\n \t  for (unsigned i = 0; i < nelts; ++i)\n@@ -2177,11 +2203,12 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n \t      /* ??? Push a don't-care value.  */\n \t      vec.quick_push (one_constant);\n \t  orig[1] = vec.build ();\n+\t  convert_orig0 = true;\n \t}\n       if (conv_code == ERROR_MARK)\n \tgimple_assign_set_rhs_with_ops (gsi, VEC_PERM_EXPR, orig[0],\n \t\t\t\t\torig[1], op2);\n-      else if (TREE_CODE (orig[1]) == VECTOR_CST)\n+      else if (convert_orig0)\n \t{\n \t  gimple *conv\n \t    = gimple_build_assign (make_ssa_name (type), conv_code, orig[0]);"}]}