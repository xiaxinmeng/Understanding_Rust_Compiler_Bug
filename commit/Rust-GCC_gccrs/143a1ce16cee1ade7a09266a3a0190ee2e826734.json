{"sha": "143a1ce16cee1ade7a09266a3a0190ee2e826734", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQzYTFjZTE2Y2VlMWFkZTdhMDkyNjZhM2EwMTkwZWUyZTgyNjczNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2012-04-29T22:59:37Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2012-04-29T22:59:37Z"}, "message": "functional (function::function(F)): LWG 2132: Disable constructor if argument isn't callable.\n\n\t* include/std/functional (function::function(F)): LWG 2132: Disable\n\tconstructor if argument isn't callable.\n\t* testsuite/20_util/function/cons/callable.cc: New.\n\nFrom-SVN: r186947", "tree": {"sha": "92006d8b36b05e749a69e1cb31e178739d20de8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92006d8b36b05e749a69e1cb31e178739d20de8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/143a1ce16cee1ade7a09266a3a0190ee2e826734", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/143a1ce16cee1ade7a09266a3a0190ee2e826734", "html_url": "https://github.com/Rust-GCC/gccrs/commit/143a1ce16cee1ade7a09266a3a0190ee2e826734", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/143a1ce16cee1ade7a09266a3a0190ee2e826734/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "112448b4489ec5a631f22a3c28b814fcaf9fa92f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/112448b4489ec5a631f22a3c28b814fcaf9fa92f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/112448b4489ec5a631f22a3c28b814fcaf9fa92f"}], "stats": {"total": 97, "additions": 83, "deletions": 14}, "files": [{"sha": "53d94d5e13db7dadf0e9faeb224a3f3316f9818d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/143a1ce16cee1ade7a09266a3a0190ee2e826734/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/143a1ce16cee1ade7a09266a3a0190ee2e826734/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=143a1ce16cee1ade7a09266a3a0190ee2e826734", "patch": "@@ -1,3 +1,9 @@\n+2012-04-29  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/std/functional (function::function(F)): LWG 2132: Disable\n+\tconstructor if argument isn't callable.\n+\t* testsuite/20_util/function/cons/callable.cc: New.\n+\n 2012-04-29  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR libstdc++/22200"}, {"sha": "0edb4f1ad3373030b906790eea406101ea1ec44e", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/143a1ce16cee1ade7a09266a3a0190ee2e826734/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/143a1ce16cee1ade7a09266a3a0190ee2e826734/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=143a1ce16cee1ade7a09266a3a0190ee2e826734", "patch": "@@ -1856,7 +1856,7 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n       {\n \ttypedef _Function_base::_Base_manager<_Functor*> _Base;\n \n-    public:\n+      public:\n \tstatic bool\n \t_M_manager(_Any_data& __dest, const _Any_data& __source,\n \t\t   _Manager_operation __op)\n@@ -1994,7 +1994,7 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n       typedef _Simple_type_wrapper<_Functor> _Wrapper;\n       typedef _Function_base::_Base_manager<_Wrapper> _Base;\n \n-     public:\n+    public:\n       static bool\n       _M_manager(_Any_data& __dest, const _Any_data& __source,\n \t\t _Manager_operation __op)\n@@ -2038,7 +2038,23 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n     {\n       typedef _Res _Signature_type(_ArgTypes...);\n \n-      struct _Useless { };\n+      template<typename _Functor>\n+\tusing _Invoke = decltype(__callable_functor(std::declval<_Functor&>())\n+\t\t\t\t (std::declval<_ArgTypes>()...) );\n+\n+      template<typename _CallRes, typename _Res1>\n+\tstruct _CheckResult\n+\t: is_convertible<_CallRes, _Res1> { };\n+\n+      template<typename _CallRes>\n+\tstruct _CheckResult<_CallRes, void>\n+\t: true_type { };\n+\n+      template<typename _Functor>\n+\tusing _Callable = _CheckResult<_Invoke<_Functor>, _Res>;\n+\n+      template<typename _Cond, typename _Tp>\n+\tusing _Requires = typename enable_if<_Cond::value, _Tp>::type;\n \n     public:\n       typedef _Res result_type;\n@@ -2099,11 +2115,9 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n        *  If @a __f is a non-NULL function pointer or an object of type @c\n        *  reference_wrapper<F>, this function will not throw.\n        */\n-      template<typename _Functor>\n-\tfunction(_Functor __f,\n-\t\t typename enable_if<\n-\t\t\t   !is_integral<_Functor>::value, _Useless>::type\n-\t\t   = _Useless());\n+      template<typename _Functor,\n+\t       typename = _Requires<_Callable<_Functor>, void>>\n+\tfunction(_Functor);\n \n       /**\n        *  @brief %Function assignment operator.\n@@ -2178,7 +2192,7 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n        *  reference_wrapper<F>, this function will not throw.\n        */\n       template<typename _Functor>\n-\ttypename enable_if<!is_integral<_Functor>::value, function&>::type\n+\t_Requires<_Callable<_Functor>, function&>\n \toperator=(_Functor&& __f)\n \t{\n \t  function(std::forward<_Functor>(__f)).swap(*this);\n@@ -2187,7 +2201,7 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n \n       /// @overload\n       template<typename _Functor>\n-\ttypename enable_if<!is_integral<_Functor>::value, function&>::type\n+\tfunction&\n \toperator=(reference_wrapper<_Functor> __f) noexcept\n \t{\n \t  function(__f).swap(*this);\n@@ -2294,11 +2308,9 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n     }\n \n   template<typename _Res, typename... _ArgTypes>\n-    template<typename _Functor>\n+    template<typename _Functor, typename>\n       function<_Res(_ArgTypes...)>::\n-      function(_Functor __f,\n-\t       typename enable_if<\n-\t\t\t!is_integral<_Functor>::value, _Useless>::type)\n+      function(_Functor __f)\n       : _Function_base()\n       {\n \ttypedef _Function_handler<_Signature_type, _Functor> _My_handler;"}, {"sha": "209c4041925f235adcf68751e0b38ed484c57b0c", "filename": "libstdc++-v3/testsuite/20_util/function/cons/callable.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/143a1ce16cee1ade7a09266a3a0190ee2e826734/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2Fcons%2Fcallable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/143a1ce16cee1ade7a09266a3a0190ee2e826734/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2Fcons%2Fcallable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2Fcons%2Fcallable.cc?ref=143a1ce16cee1ade7a09266a3a0190ee2e826734", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+void* f(std::function<void()>) { return nullptr; }\n+int f(std::function<void(int)>) { return 1; }\n+\n+void test01()\n+{\n+  void* p __attribute__((unused));\n+  int i __attribute__((unused));\n+\n+  p = f([] { });\n+  i = f([] (int) { });\n+}\n+\n+void g(std::function<void()>) { }\n+void h(std::function<int(int)>) { }\n+\n+void test02()\n+{\n+  g([] { return \"ignored\"; });\n+  h([] (char c) { return c; });\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+\n+  return 0;\n+}"}]}