{"sha": "29105cea6a1c86b7fcaa96cb78a6d948b32564be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkxMDVjZWE2YTFjODZiN2ZjYWE5NmNiNzhhNmQ5NDhiMzI1NjRiZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2000-04-10T11:51:53Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-04-10T11:51:53Z"}, "message": "expmed.c (init_expmed): Don't free objects we make.\n\n\t* expmed.c (init_expmed): Don't free objects we make.\n\t* emit-rtl.c (gen_rtx_CONST_INT, init_emit_once): Minor cleanups.\n\nFrom-SVN: r33057", "tree": {"sha": "281a0004acf40b6d9b37c62c3a00afcb7ea17725", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/281a0004acf40b6d9b37c62c3a00afcb7ea17725"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29105cea6a1c86b7fcaa96cb78a6d948b32564be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29105cea6a1c86b7fcaa96cb78a6d948b32564be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29105cea6a1c86b7fcaa96cb78a6d948b32564be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29105cea6a1c86b7fcaa96cb78a6d948b32564be/comments", "author": null, "committer": null, "parents": [{"sha": "7156dead87434b51b11f4c804bb0e75d4e55812f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7156dead87434b51b11f4c804bb0e75d4e55812f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7156dead87434b51b11f4c804bb0e75d4e55812f"}], "stats": {"total": 34, "additions": 13, "deletions": 21}, "files": [{"sha": "333d0f5c3a18a4ffd2960ed012fda8a125c3467a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29105cea6a1c86b7fcaa96cb78a6d948b32564be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29105cea6a1c86b7fcaa96cb78a6d948b32564be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29105cea6a1c86b7fcaa96cb78a6d948b32564be", "patch": "@@ -1,5 +1,8 @@\n Mon Apr 10 07:21:13 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* expmed.c (init_expmed): Don't free objects we make.\n+\t* emit-rtl.c (gen_rtx_CONST_INT, init_emit_once): Minor cleanups.\n+\n \t* expr.c (get_inner_reference): Correct some WITH_RECORD_EXPR cases.\n \t(expand_expr, case CONVERT_EXPR): Pass proper alignment to store_field.\n "}, {"sha": "e697d55c455eefe3584d315596e1fe643904dd06", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29105cea6a1c86b7fcaa96cb78a6d948b32564be/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29105cea6a1c86b7fcaa96cb78a6d948b32564be/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=29105cea6a1c86b7fcaa96cb78a6d948b32564be", "patch": "@@ -248,27 +248,26 @@ gen_rtx_CONST_INT (mode, arg)\n #endif\n \n   /* Look up the CONST_INT in the hash table.  */\n-  slot = htab_find_slot_with_hash (const_int_htab, \n-\t\t\t\t   &arg,\n-\t\t\t\t   (hashval_t) arg,\n-\t\t\t\t   /*insert=*/1);\n-  if (!*slot)\n+  slot = htab_find_slot_with_hash (const_int_htab, &arg, (hashval_t) arg, 1);\n+  if (*slot == 0)\n     {\n       if (!ggc_p)\n \t{\n \t  push_obstacks_nochange ();\n \t  end_temporary_allocation ();\n+\t  *slot = gen_rtx_raw_CONST_INT (VOIDmode, arg);\n+\t  pop_obstacks ();\n \t}\n-      *slot = gen_rtx_raw_CONST_INT (VOIDmode, arg);\n-      if (!ggc_p)\n-\tpop_obstacks ();\n+      else\n+\t*slot = gen_rtx_raw_CONST_INT (VOIDmode, arg);\n     }\n \n   return (rtx) *slot;\n }\n \n-/* CONST_DOUBLEs needs special handling because its length is known\n+/* CONST_DOUBLEs needs special handling because their length is known\n    only at run-time.  */\n+\n rtx\n gen_rtx_CONST_DOUBLE (mode, arg0, arg1, arg2)\n      enum machine_mode mode;\n@@ -4157,10 +4156,8 @@ init_emit_once (line_numbers)\n   ggc_add_rtx_root (&return_address_pointer_rtx, 1);\n \n   /* Initialize the CONST_INT hash table.  */\n-  const_int_htab = htab_create (37, \n-\t\t\t\tconst_int_htab_hash, \n-\t\t\t\tconst_int_htab_eq, \n-\t\t\t\tNULL);\n+  const_int_htab = htab_create (37, const_int_htab_hash, \n+\t\t\t\tconst_int_htab_eq, NULL);\n   ggc_add_root (&const_int_htab, 1, sizeof (const_int_htab), \n \t\trtx_htab_mark);\n }"}, {"sha": "16c9bef6b5f90fea3e8b253d9a0ff5e551c07b0e", "filename": "gcc/expmed.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29105cea6a1c86b7fcaa96cb78a6d948b32564be/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29105cea6a1c86b7fcaa96cb78a6d948b32564be/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=29105cea6a1c86b7fcaa96cb78a6d948b32564be", "patch": "@@ -90,7 +90,6 @@ static int mul_highpart_cost[NUM_MACHINE_MODES];\n void\n init_expmed ()\n {\n-  char *free_point;\n   /* This is \"some random pseudo register\" for purposes of calling recog\n      to see what insns exist.  */\n   rtx reg = gen_rtx_REG (word_mode, 10000);\n@@ -101,11 +100,6 @@ init_expmed ()\n \n   start_sequence ();\n \n-  /* Since we are on the permanent obstack, we must be sure we save this\n-     spot AFTER we call start_sequence, since it will reuse the rtl it\n-     makes.  */\n-  free_point = (char *) oballoc (0);\n-\n   reg = gen_rtx_REG (word_mode, 10000);\n \n   zero_cost = rtx_cost (const0_rtx, 0);\n@@ -191,9 +185,7 @@ init_expmed ()\n \t}\n     }\n \n-  /* Free the objects we just allocated.  */\n   end_sequence ();\n-  obfree (free_point);\n }\n \n /* Return an rtx representing minus the value of X."}]}