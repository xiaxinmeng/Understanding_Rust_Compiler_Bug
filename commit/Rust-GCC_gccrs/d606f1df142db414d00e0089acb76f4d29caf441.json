{"sha": "d606f1df142db414d00e0089acb76f4d29caf441", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYwNmYxZGYxNDJkYjQxNGQwMGUwMDg5YWNiNzZmNGQyOWNhZjQ0MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-08-10T13:43:01Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-08-10T13:43:01Z"}, "message": "[multiple changes]\n\n2010-08-10  Robert Dewar  <dewar@adacore.com>\n\n\t* a-suenco.adb (Convert): Fix bug in UTF-16 to UTF-8 conversion for\n\tcodes in the range 16#80#..16#7FF#.\n\t* sem_ch10.adb: Minor reformatting.\n\n2010-08-10  Arnaud Charlet  <charlet@adacore.com>\n\n\t* gnat1drv.adb (Scan_Front_End_Switches): Always perform semantics and\n\tgenerate ali files in CodePeer mode, so that a gnatmake -c -k will\n\tproceed further when possible\n\t* freeze.adb (Freeze_Static_Object): Fix thinko. Do not generate error\n\tmessages when ignoring representation clauses (-gnatI).\n\n2010-08-10  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_Selected_Component): Do not attempt to\n\tconstant-fold discriminant reference if the constraint is an object\n\twith non-static expression. Expression may contain volatile references\n\tin the presence of renamings.\n\n2010-08-10  Vincent Celier  <celier@adacore.com>\n\n\t* prj-proc.adb (Get_Attribute_Index): If Index is All_Other_Names,\n\treturns Index.\n\t* prj-strt.adb (Attribute_Reference): Recognize 'others' as a valid\n\tindex for an associative array where it is allowed.\n\nFrom-SVN: r163060", "tree": {"sha": "89987857c21e2be46cc1d6b733a81793231ceba8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89987857c21e2be46cc1d6b733a81793231ceba8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d606f1df142db414d00e0089acb76f4d29caf441", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d606f1df142db414d00e0089acb76f4d29caf441", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d606f1df142db414d00e0089acb76f4d29caf441", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d606f1df142db414d00e0089acb76f4d29caf441/comments", "author": null, "committer": null, "parents": [{"sha": "1f92d7f29a1ee221a8a590bf0f4f724e7e45e103", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f92d7f29a1ee221a8a590bf0f4f724e7e45e103", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f92d7f29a1ee221a8a590bf0f4f724e7e45e103"}], "stats": {"total": 337, "additions": 203, "deletions": 134}, "files": [{"sha": "6c8e23dba4fc92b5cad7236a27aa722ba8a6f7bb", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d606f1df142db414d00e0089acb76f4d29caf441/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d606f1df142db414d00e0089acb76f4d29caf441/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d606f1df142db414d00e0089acb76f4d29caf441", "patch": "@@ -1,3 +1,31 @@\n+2010-08-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-suenco.adb (Convert): Fix bug in UTF-16 to UTF-8 conversion for\n+\tcodes in the range 16#80#..16#7FF#.\n+\t* sem_ch10.adb: Minor reformatting.\n+\n+2010-08-10  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat1drv.adb (Scan_Front_End_Switches): Always perform semantics and\n+\tgenerate ali files in CodePeer mode, so that a gnatmake -c -k will\n+\tproceed further when possible\n+\t* freeze.adb (Freeze_Static_Object): Fix thinko. Do not generate error\n+\tmessages when ignoring representation clauses (-gnatI).\n+\n+2010-08-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Selected_Component): Do not attempt to\n+\tconstant-fold discriminant reference if the constraint is an object\n+\twith non-static expression. Expression may contain volatile references\n+\tin the presence of renamings.\n+\n+2010-08-10  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj-proc.adb (Get_Attribute_Index): If Index is All_Other_Names,\n+\treturns Index.\n+\t* prj-strt.adb (Attribute_Reference): Recognize 'others' as a valid\n+\tindex for an associative array where it is allowed.\n+\n 2010-08-10  Thomas Quinot  <quinot@adacore.com>\n \n \t* exp_attr.adb: Add comments."}, {"sha": "24c0231061d66fc69353fd947a71767f5b56a2e3", "filename": "gcc/ada/a-suenco.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d606f1df142db414d00e0089acb76f4d29caf441/gcc%2Fada%2Fa-suenco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d606f1df142db414d00e0089acb76f4d29caf441/gcc%2Fada%2Fa-suenco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-suenco.adb?ref=d606f1df142db414d00e0089acb76f4d29caf441", "patch": "@@ -34,7 +34,7 @@\n package body Ada.Strings.UTF_Encoding.Conversions is\n    use Interfaces;\n \n-   --  Version convertion from UTF-8/UTF-16BE/LE to UTF-8/UTF-16BE/LE\n+   --  Convert from UTF-8/UTF-16BE/LE to UTF-8/UTF-16BE/LE\n \n    function Convert\n      (Item          : UTF_String;\n@@ -57,7 +57,7 @@ package body Ada.Strings.UTF_Encoding.Conversions is\n       end if;\n    end Convert;\n \n-   --  Version converting UTF-8/UTF-16BE/LE to UTF-16\n+   --  Convert from UTF-8/UTF-16BE/LE to UTF-16\n \n    function Convert\n      (Item          : UTF_String;\n@@ -72,7 +72,7 @@ package body Ada.Strings.UTF_Encoding.Conversions is\n       end if;\n    end Convert;\n \n-   --  Version converting UTF-8 to UTF-16\n+   --  Convert from UTF-8 to UTF-16\n \n    function Convert\n      (Item       : UTF_8_String;\n@@ -316,7 +316,7 @@ package body Ada.Strings.UTF_Encoding.Conversions is\n          elsif C1 <= 16#07FF# then\n             Result (Len + 1) :=\n               Character'Val\n-                (2#110_000000# or Shift_Right (C1, 6));\n+                (2#110_00000# or Shift_Right (C1, 6));\n             Result (Len + 2) :=\n               Character'Val\n                 (2#10_000000# or (C1 and 2#00_111111#));"}, {"sha": "0e7af41de90d48df0b0821aecdc9b4b154566aa0", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d606f1df142db414d00e0089acb76f4d29caf441/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d606f1df142db414d00e0089acb76f4d29caf441/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=d606f1df142db414d00e0089acb76f4d29caf441", "patch": "@@ -7358,6 +7358,7 @@ package body Exp_Ch4 is\n       Disc  : Entity_Id;\n       New_N : Node_Id;\n       Dcon  : Elmt_Id;\n+      Dval  : Node_Id;\n \n       function In_Left_Hand_Side (Comp : Node_Id) return Boolean;\n       --  Gigi needs a temporary for prefixes that depend on a discriminant,\n@@ -7472,18 +7473,6 @@ package body Exp_Ch4 is\n             then\n                null;\n \n-            --  If this is a discriminant of a component of a mutable record,\n-            --  or a renaming of such, no optimization is possible, and value\n-            --  must be retrieved anew. Note that in the previous case we may\n-            --  be dealing with a renaming declaration, while here we may have\n-            --  a use of a renaming.\n-\n-            elsif Nkind (P) = N_Selected_Component\n-              and then Is_Record_Type (Etype (Prefix (P)))\n-              and then not Is_Constrained (Etype (Prefix (P)))\n-            then\n-               null;\n-\n             --  Don't do this optimization if we are within the code for a\n             --  discriminant check, since the whole point of such a check may\n             --  be to verify the condition on which the code below depends!\n@@ -7501,7 +7490,9 @@ package body Exp_Ch4 is\n \n                Disc := First_Discriminant (Ptyp);\n                Dcon := First_Elmt (Discriminant_Constraint (Ptyp));\n+\n                Discr_Loop : while Present (Dcon) loop\n+                  Dval := Node (Dcon);\n \n                   --  Check if this is the matching discriminant\n \n@@ -7512,9 +7503,30 @@ package body Exp_Ch4 is\n                      --  constrained by an outer discriminant, which cannot\n                      --  be optimized away.\n \n-                     if\n-                       Denotes_Discriminant\n-                        (Node (Dcon), Check_Concurrent => True)\n+                     if Denotes_Discriminant\n+                          (Dval, Check_Concurrent => True)\n+                     then\n+                        exit Discr_Loop;\n+\n+                     elsif Nkind (Original_Node (Dval)) = N_Selected_Component\n+                       and then\n+                         Denotes_Discriminant\n+                           (Selector_Name (Original_Node (Dval)), True)\n+                     then\n+                        exit Discr_Loop;\n+\n+                     --  Do not retrieve value if constraint is not static. It\n+                     --  is generally not useful, and the constraint may be a\n+                     --  rewritten outer discriminant in which case it is in\n+                     --  fact incorrect.\n+\n+                     elsif Is_Entity_Name (Dval)\n+                       and then Nkind (Parent (Entity (Dval)))\n+                         = N_Object_Declaration\n+                       and then Present (Expression (Parent (Entity (Dval))))\n+                       and then\n+                         not Is_Static_Expression\n+                           (Expression (Parent (Entity (Dval))))\n                      then\n                         exit Discr_Loop;\n \n@@ -7524,14 +7536,14 @@ package body Exp_Ch4 is\n                      --  missing cases.\n \n                      elsif Nkind (Parent (N)) = N_Case_Statement\n-                       and then Etype (Node (Dcon)) /= Etype (Disc)\n+                       and then Etype (Dval) /= Etype (Disc)\n                      then\n                         Rewrite (N,\n                           Make_Qualified_Expression (Loc,\n                             Subtype_Mark =>\n                               New_Occurrence_Of (Etype (Disc), Loc),\n                             Expression   =>\n-                              New_Copy_Tree (Node (Dcon))));\n+                              New_Copy_Tree (Dval)));\n                         Analyze_And_Resolve (N, Etype (Disc));\n \n                         --  In case that comes out as a static expression,\n@@ -7548,7 +7560,7 @@ package body Exp_Ch4 is\n                      --  yet, and this must be done now.\n \n                      else\n-                        Rewrite (N, New_Copy_Tree (Node (Dcon)));\n+                        Rewrite (N, New_Copy_Tree (Dval));\n                         Analyze_And_Resolve (N);\n                         Set_Is_Static_Expression (N, False);\n                         return;"}, {"sha": "8a48f9ca78d22a8881b999e0a98ef62302470d3b", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d606f1df142db414d00e0089acb76f4d29caf441/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d606f1df142db414d00e0089acb76f4d29caf441/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=d606f1df142db414d00e0089acb76f4d29caf441", "patch": "@@ -5100,10 +5100,16 @@ package body Freeze is\n          --  issue an error message saying that this object cannot be imported\n          --  or exported. If it has an address clause it is an overlay in the\n          --  current partition and the static requirement is not relevant.\n+         --  Do not issue any error message when ignoring rep clauses.\n \n-         if Is_Imported (E) and then No (Address_Clause (E)) then\n-            Error_Msg_N\n-              (\"& cannot be imported (local type is not constant)\", E);\n+         if Ignore_Rep_Clauses then\n+            null;\n+\n+         elsif Is_Imported (E) then\n+            if No (Address_Clause (E)) then\n+               Error_Msg_N\n+                 (\"& cannot be imported (local type is not constant)\", E);\n+            end if;\n \n          --  Otherwise must be exported, something is wrong if compiler\n          --  is marking something as statically allocated which cannot be)."}, {"sha": "7af2d6436eba8112ca18085e52315dbc55cb3969", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d606f1df142db414d00e0089acb76f4d29caf441/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d606f1df142db414d00e0089acb76f4d29caf441/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=d606f1df142db414d00e0089acb76f4d29caf441", "patch": "@@ -255,6 +255,12 @@ procedure Gnat1drv is\n          --  front-end warnings when we are getting CodePeer output.\n \n          Reset_Style_Check_Options;\n+\n+         --  Always perform semantics and generate ali files in CodePeer mode,\n+         --  so that a gnatmake -c -k will proceed further when possible.\n+\n+         Force_ALI_Tree_File := True;\n+         Try_Semantics := True;\n       end if;\n \n       --  Set Configurable_Run_Time mode if system.ads flag set"}, {"sha": "65d019015c18883058c5c38af81d8fa14b142f62", "filename": "gcc/ada/prj-proc.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d606f1df142db414d00e0089acb76f4d29caf441/gcc%2Fada%2Fprj-proc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d606f1df142db414d00e0089acb76f4d29caf441/gcc%2Fada%2Fprj-proc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-proc.adb?ref=d606f1df142db414d00e0089acb76f4d29caf441", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -460,6 +460,10 @@ package body Prj.Proc is\n       Lower : Boolean;\n \n    begin\n+      if Index = All_Other_Names then\n+         return Index;\n+      end if;\n+\n       Get_Name_String (Index);\n       Lower := Case_Insensitive (Attr, Tree);\n "}, {"sha": "9798fb9c60af16c25352f1089c4ffa87fac86ef7", "filename": "gcc/ada/prj-strt.adb", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d606f1df142db414d00e0089acb76f4d29caf441/gcc%2Fada%2Fprj-strt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d606f1df142db414d00e0089acb76f4d29caf441/gcc%2Fada%2Fprj-strt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-strt.adb?ref=d606f1df142db414d00e0089acb76f4d29caf441", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -230,19 +230,35 @@ package body Prj.Strt is\n \n                if Token = Tok_Left_Paren then\n                   Scan (In_Tree);\n-                  Expect (Tok_String_Literal, \"literal string\");\n \n-                  if Token = Tok_String_Literal then\n+                  if Others_Allowed_For (Current_Attribute)\n+                    and then Token = Tok_Others\n+                  then\n                      Set_Associative_Array_Index_Of\n-                       (Reference, In_Tree, To => Token_Name);\n+                       (Reference, In_Tree, To => All_Other_Names);\n                      Scan (In_Tree);\n-                     Expect (Tok_Right_Paren, \"`)`\");\n \n-                     if Token = Tok_Right_Paren then\n+                  else\n+                     if Others_Allowed_For (Current_Attribute) then\n+                        Expect\n+                          (Tok_String_Literal, \"literal string or others\");\n+                     else\n+                        Expect (Tok_String_Literal, \"literal string\");\n+                     end if;\n+\n+                     if Token = Tok_String_Literal then\n+                        Set_Associative_Array_Index_Of\n+                          (Reference, In_Tree, To => Token_Name);\n                         Scan (In_Tree);\n                      end if;\n                   end if;\n                end if;\n+\n+               Expect (Tok_Right_Paren, \"`)`\");\n+\n+               if Token = Tok_Right_Paren then\n+                  Scan (In_Tree);\n+               end if;\n             end if;\n          end if;\n "}, {"sha": "30ce4ba7aea340682f9cd78e21e04b43e98f78d0", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 99, "deletions": 102, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d606f1df142db414d00e0089acb76f4d29caf441/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d606f1df142db414d00e0089acb76f4d29caf441/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=d606f1df142db414d00e0089acb76f4d29caf441", "patch": "@@ -219,9 +219,9 @@ package body Sem_Ch10 is\n \n    --  To support this feature, the analysis of a limited_with clause must\n    --  create an abbreviated view of the package, without performing any\n-   --  semantic analysis on it. This \"package abstract\" contains shadow\n-   --  types that are in one-one correspondence with the real types in the\n-   --  package, and that have the properties of incomplete types.\n+   --  semantic analysis on it. This \"package abstract\" contains shadow types\n+   --  that are in one-one correspondence with the real types in the package,\n+   --  and that have the properties of incomplete types.\n \n    --  The implementation creates two element lists: one to chain the shadow\n    --  entities, and one to chain the corresponding type entities in the tree\n@@ -310,12 +310,11 @@ package body Sem_Ch10 is\n             Use_Item  : Node_Id;\n \n             function Same_Unit (N : Node_Id; P : Entity_Id) return Boolean;\n-            --  In an expanded name in a use clause, if the prefix is a\n-            --  renamed package, the entity is set to the original package\n-            --  as a result, when checking whether the package appears in a\n-            --  previous with_clause, the renaming has to be taken into\n-            --  account, to prevent spurious or incorrect warnings. The\n-            --  common case is the use of Text_IO.\n+            --  In an expanded name in a use clause, if the prefix is a renamed\n+            --  package, the entity is set to the original package as a result,\n+            --  when checking whether the package appears in a previous with\n+            --  clause, the renaming has to be taken into account, to prevent\n+            --  spurious/incorrect warnings. A common case is use of Text_IO.\n \n             ---------------\n             -- Same_Unit --\n@@ -441,9 +440,9 @@ package body Sem_Ch10 is\n             Cont_Item := First (Context_List);\n             while Present (Cont_Item) loop\n \n-               --  Stop the search since the context items after Cont_Item\n-               --  have already been examined in a previous iteration of\n-               --  the reverse loop in Check_Redundant_Withs.\n+               --  Stop the search since the context items after Cont_Item have\n+               --  already been examined in a previous iteration of the reverse\n+               --  loop in Check_Redundant_Withs.\n \n                if Exit_On_Self\n                  and Cont_Item = Clause\n@@ -466,10 +465,11 @@ package body Sem_Ch10 is\n                   end loop;\n \n                --  Package with clause. Avoid processing self, implicitly\n-               --  generated with clauses or limited with clauses. Note\n-               --  that we examine with clauses having pragmas Elaborate\n-               --  or Elaborate_All applied to them due to cases such as:\n+               --  generated with clauses or limited with clauses. Note that\n+               --  we examine with clauses having pragmas Elaborate or\n+               --  Elaborate_All applied to them due to cases such as:\n                --\n+\n                --     with Pack;\n                --     with Pack;\n                --     pragma Elaborate (Pack);\n@@ -496,9 +496,8 @@ package body Sem_Ch10 is\n          Clause := Last (Context_Items);\n          while Present (Clause) loop\n \n-            --  Avoid checking implicitly generated with clauses, limited\n-            --  with clauses or withs that have pragma Elaborate or\n-            --  Elaborate_All applied.\n+            --  Avoid checking implicitly generated with clauses, limited with\n+            --  clauses or withs that have pragma Elaborate or Elaborate_All.\n \n             if Nkind (Clause) = N_With_Clause\n               and then not Implicit_With (Clause)\n@@ -642,9 +641,9 @@ package body Sem_Ch10 is\n       --  analysis of the parent, which we proceed to do. Basically this gets\n       --  handled from the top down and we don't want to do anything at this\n       --  level (i.e. this subunit will be handled on the way down from the\n-      --  parent), so at this level we immediately return. If the subunit\n-      --  ends up not analyzed, it means that the parent did not contain a\n-      --  stub for it, or that there errors were detected in some ancestor.\n+      --  parent), so at this level we immediately return. If the subunit ends\n+      --  up not analyzed, it means that the parent did not contain a stub for\n+      --  it, or that there errors were detected in some ancestor.\n \n       if Nkind (Unit_Node) = N_Subunit\n         and then not Analyzed (Lib_Unit)\n@@ -662,13 +661,13 @@ package body Sem_Ch10 is\n          return;\n       end if;\n \n-      --  Analyze context (this will call Sem recursively for with'ed units)\n-      --  To detect circularities among with-clauses that are not caught during\n+      --  Analyze context (this will call Sem recursively for with'ed units) To\n+      --  detect circularities among with-clauses that are not caught during\n       --  loading, we set the Context_Pending flag on the current unit. If the\n-      --  flag is already set there is a potential circularity.\n-      --  We exclude predefined units from this check because they are known\n-      --  to be safe. We also exclude package bodies that are present because\n-      --  circularities between bodies are harmless (and necessary).\n+      --  flag is already set there is a potential circularity. We exclude\n+      --  predefined units from this check because they are known to be safe.\n+      --  We also exclude package bodies that are present because circularities\n+      --  between bodies are harmless (and necessary).\n \n       if Context_Pending (N) then\n          declare\n@@ -979,9 +978,9 @@ package body Sem_Ch10 is\n          end if;\n       end if;\n \n-      --  Remove unit from visibility, so that environment is clean for\n-      --  the next compilation, which is either the main unit or some\n-      --  other unit in the context.\n+      --  Remove unit from visibility, so that environment is clean for the\n+      --  next compilation, which is either the main unit or some other unit\n+      --  in the context.\n \n       if Nkind_In (Unit_Node, N_Package_Declaration,\n                               N_Package_Renaming_Declaration,\n@@ -994,8 +993,8 @@ package body Sem_Ch10 is\n          Remove_Unit_From_Visibility (Defining_Entity (Unit_Node));\n \n       --  If the unit is an instantiation whose body will be elaborated for\n-      --  inlining purposes, use the proper entity of the instance. The\n-      --  entity may be missing if the instantiation was illegal.\n+      --  inlining purposes, use the proper entity of the instance. The entity\n+      --  may be missing if the instantiation was illegal.\n \n       elsif Nkind (Unit_Node) = N_Package_Instantiation\n         and then not Error_Posted (Unit_Node)\n@@ -1580,10 +1579,10 @@ package body Sem_Ch10 is\n          Comp_Unit : Node_Id;\n \n       begin\n-         --  Try to load subunit, but ignore any errors that occur during\n-         --  the loading of the subunit, by using the special feature in\n-         --  Errout to ignore all errors. Note that Fatal_Error will still\n-         --  be set, so we will be able to check for this case below.\n+         --  Try to load subunit, but ignore any errors that occur during the\n+         --  loading of the subunit, by using the special feature in Errout to\n+         --  ignore all errors. Note that Fatal_Error will still be set, so we\n+         --  will be able to check for this case below.\n \n          if not ASIS_Mode then\n             Ignore_Errors_Enable := Ignore_Errors_Enable + 1;\n@@ -1713,9 +1712,9 @@ package body Sem_Ch10 is\n          return;\n \n       --  If the subunit is not already loaded, and we are generating code,\n-      --  then this is the case where compilation started from the parent,\n-      --  and we are generating code for an entire subunit tree. In that\n-      --  case we definitely need to load the subunit.\n+      --  then this is the case where compilation started from the parent, and\n+      --  we are generating code for an entire subunit tree. In that case we\n+      --  definitely need to load the subunit.\n \n       --  In order to continue the analysis with the rest of the parent,\n       --  and other subunits, we load the unit without requiring its\n@@ -1724,13 +1723,13 @@ package body Sem_Ch10 is\n \n       elsif Original_Operating_Mode = Generate_Code then\n \n-         --  If the proper body is already linked to the stub node,\n-         --  the stub is in a generic unit and just needs analyzing.\n+         --  If the proper body is already linked to the stub node, the stub is\n+         --  in a generic unit and just needs analyzing.\n \n-         --  We update the version. Although we are not technically\n-         --  semantically dependent on the subunit, given our approach\n-         --  of macro substitution of subunits, it makes sense to\n-         --  include it in the version identification.\n+         --  We update the version. Although we are not strictly technically\n+         --  semantically dependent on the subunit, given our approach of macro\n+         --  substitution of subunits, it makes sense to include it in the\n+         --  version identification.\n \n          if Present (Library_Unit (N)) then\n             Set_Corresponding_Stub (Unit (Library_Unit (N)), N);\n@@ -1747,9 +1746,8 @@ package body Sem_Ch10 is\n                  Subunit    => True,\n                  Error_Node => N);\n \n-            --  Give message if we did not get the unit\n-            --  Emit warning even if missing subunit is not\n-            --  within main unit, to simplify debugging.\n+            --  Give message if we did not get the unit Emit warning even if\n+            --  missing subunit is not within main unit, to simplify debugging.\n \n             if Original_Operating_Mode = Generate_Code\n               and then Unum = No_Unit\n@@ -1763,8 +1761,8 @@ package body Sem_Ch10 is\n             end if;\n \n             --  Load_Unit may reset Compiler_State, since it may have been\n-            --  necessary to parse an additional units, so we make sure\n-            --  that we reset it to the Analyzing state.\n+            --  necessary to parse an additional units, so we make sure that\n+            --  we reset it to the Analyzing state.\n \n             Compiler_State := Analyzing;\n \n@@ -2618,9 +2616,9 @@ package body Sem_Ch10 is\n          Sub_Parent := Library_Unit (N);\n          Curr_Unit  := Defining_Entity (Unit (Library_Unit (Sub_Parent)));\n \n-         --  If the parent itself is a subunit, Curr_Unit is the entity\n-         --  of the enclosing body, retrieve the spec entity which is\n-         --  the proper ancestor we need for the following tests.\n+         --  If the parent itself is a subunit, Curr_Unit is the entity of the\n+         --  enclosing body, retrieve the spec entity which is the proper\n+         --  ancestor we need for the following tests.\n \n          if Ekind (Curr_Unit) = E_Package_Body then\n             Curr_Unit := Spec_Entity (Curr_Unit);\n@@ -2787,17 +2785,17 @@ package body Sem_Ch10 is\n       begin\n          if Nkind (Nam) = N_Identifier then\n \n-            --  If the parent unit P in the name of the with_clause for P.Q\n-            --  is a renaming of package R, then the entity of the parent is\n-            --  set to R, but the identifier retains Chars (P) to be consistent\n-            --  with the source (see details in lib-load). However, the\n-            --  implicit_with_clause for the parent must make the entity for\n-            --  P visible, because P.Q may be used as a prefix within the\n-            --  current unit. The entity for P is the current_entity with that\n-            --  name, because the package renaming declaration for it has just\n-            --  been analyzed. Note that this case can only happen if P.Q has\n-            --  already appeared in a previous with_clause in a related unit,\n-            --  such as the library body of the current unit.\n+            --  If the parent unit P in the name of the with_clause for P.Q is\n+            --  a renaming of package R, then the entity of the parent is set\n+            --  to R, but the identifier retains Chars (P) to be consistent\n+            --  with the source (see details in lib-load). However the implicit\n+            --  with_clause for the parent must make the entity for P visible,\n+            --  because P.Q may be used as a prefix within the current unit.\n+            --  The entity for P is the current_entity with that name, because\n+            --  the package renaming declaration for it has just been analyzed.\n+            --  Note that this case can only happen if P.Q has already appeared\n+            --  in a previous with_clause in a related unit, such as the\n+            --  library body of the current unit.\n \n             if Chars (Nam) /= Chars (Entity (Nam)) then\n                Renaming := Current_Entity (Nam);\n@@ -2817,10 +2815,10 @@ package body Sem_Ch10 is\n                 Nkind (Unit_Declaration_Node (Entity (Selector_Name (Nam))))\n                   = N_Package_Renaming_Declaration\n             then\n-               --  The name in the with_clause is of the form A.B.C, and B\n-               --  is given by a renaming declaration. In that case we may\n-               --  not have analyzed the unit for B, but replaced it directly\n-               --  in lib-load with the unit it renames. We have to make A.B\n+               --  The name in the with_clause is of the form A.B.C, and B is\n+               --  given by a renaming declaration. In that case we may not\n+               --  have analyzed the unit for B, but replaced it directly in\n+               --  lib-load with the unit it renames. We have to make A.B\n                --  visible, so analyze the declaration for B now, in case it\n                --  has not been done yet.\n \n@@ -3630,9 +3628,9 @@ package body Sem_Ch10 is\n               Subunit    => False,\n               Error_Node => Nam);\n \n-         --  Do not generate a limited_with_clause on the current unit.\n-         --  This path is taken when a unit has a limited_with clause on\n-         --  one of its child units.\n+         --  Do not generate a limited_with_clause on the current unit. This\n+         --  path is taken when a unit has a limited_with clause on one of its\n+         --  child units.\n \n          if Unum = Current_Sem_Unit then\n             return;\n@@ -3730,8 +3728,8 @@ package body Sem_Ch10 is\n          Next (Item);\n       end loop;\n \n-      --  Ada 2005 (AI-412): Examine the visible declarations of a package\n-      --  spec, looking for incomplete subtype declarations of incomplete types\n+      --  Ada 2005 (AI-412): Examine visible declarations of a package spec,\n+      --  looking for incomplete subtype declarations of incomplete types\n       --  visible through a limited with clause.\n \n       if Ada_Version >= Ada_05\n@@ -3760,7 +3758,7 @@ package body Sem_Ch10 is\n                      --  Convert an incomplete subtype declaration into a\n                      --  corresponding non-limited view subtype declaration.\n                      --  This is usually the case when analyzing a body that\n-                     --  has regular with-clauses, when the spec has limited\n+                     --  has regular with clauses,  when the spec has limited\n                      --  ones.\n \n                      --  If the non-limited view is still incomplete, it is\n@@ -4345,8 +4343,8 @@ package body Sem_Ch10 is\n                end loop;\n             end;\n \n-            --  Finally, check whether there are subprograms that still\n-            --  require a body, i.e. are not renamings or null.\n+            --  Finally, check whether there are subprograms that still require\n+            --  a body, i.e. are not renamings or null.\n \n             if not Is_Empty_Elmt_List (Subp_List) then\n                declare\n@@ -4438,8 +4436,8 @@ package body Sem_Ch10 is\n                return True;\n             end if;\n \n-            --  If there are more ancestors, climb up the tree, otherwise\n-            --  we are done.\n+            --  If there are more ancestors, climb up the tree, otherwise we\n+            --  are done.\n \n             if Is_Child_Unit (Par) then\n                Par := Scope (Par);\n@@ -4596,10 +4594,10 @@ package body Sem_Ch10 is\n \n       --  Do not install the limited view if this is the unit being analyzed.\n       --  This unusual case will happen when a unit has a limited_with clause\n-      --  on one of its children. The compilation of the child forces the\n-      --  load of the parent which tries to install the limited view of the\n-      --  child again. Installing the limited view must also be disabled\n-      --  when compiling the body of the child unit.\n+      --  on one of its children. The compilation of the child forces the load\n+      --  of the parent which tries to install the limited view of the child\n+      --  again. Installing the limited view must also be disabled when\n+      --  compiling the body of the child unit.\n \n       if P = Cunit_Entity (Current_Sem_Unit)\n         or else\n@@ -4609,11 +4607,11 @@ package body Sem_Ch10 is\n          return;\n       end if;\n \n-      --  This scenario is similar to the one above, the difference is that\n-      --  the compilation of sibling Par.Sib forces the load of parent Par\n-      --  which tries to install the limited view of Lim_Pack [1]. However\n-      --  Par.Sib has a with clause for Lim_Pack [2] in its body, and thus\n-      --  needs the non-limited views of all entities from Lim_Pack.\n+      --  This scenario is similar to the one above, the difference is that the\n+      --  compilation of sibling Par.Sib forces the load of parent Par which\n+      --  tries to install the limited view of Lim_Pack [1]. However Par.Sib\n+      --  has a with clause for Lim_Pack [2] in its body, and thus needs the\n+      --  non-limited views of all entities from Lim_Pack.\n \n       --     limited with Lim_Pack;   --  [1]\n       --     package Par is ...           package Lim_Pack is ...\n@@ -4642,9 +4640,8 @@ package body Sem_Ch10 is\n          return;\n       end if;\n \n-      --  A common use of the limited-with is to have a limited-with\n-      --  in the package spec, and a normal with in its package body.\n-      --  For example:\n+      --  A common use of the limited-with is to have a limited-with in the\n+      --  package spec, and a normal with in its package body. For example:\n \n       --       limited with X;  -- [1]\n       --       package A is ...\n@@ -4775,8 +4772,8 @@ package body Sem_Ch10 is\n                   Prev := Current_Entity (Lim_Typ);\n                   E := Prev;\n \n-                  --  Replace E in the homonyms list, so that the limited\n-                  --  view becomes available.\n+                  --  Replace E in the homonyms list, so that the limited view\n+                  --  becomes available.\n \n                   if E = Non_Limited_View (Lim_Typ) then\n                      Set_Homonym (Lim_Typ, Homonym (Prev));\n@@ -4786,8 +4783,8 @@ package body Sem_Ch10 is\n                      loop\n                         E := Homonym (Prev);\n \n-                        --  E may have been removed when installing a\n-                        --  previous limited_with_clause.\n+                        --  E may have been removed when installing a previous\n+                        --  limited_with_clause.\n \n                         exit when No (E);\n \n@@ -4829,10 +4826,10 @@ package body Sem_Ch10 is\n          Check_Body_Required;\n       end if;\n \n-      --  If the package in the limited_with clause is a child unit, the\n-      --  clause is unanalyzed and appears as a selected component. Recast\n-      --  it as an expanded name so that the entity can be properly set. Use\n-      --  entity of parent, if available, for higher ancestors in the name.\n+      --  If the package in the limited_with clause is a child unit, the clause\n+      --  is unanalyzed and appears as a selected component. Recast it as an\n+      --  expanded name so that the entity can be properly set. Use entity of\n+      --  parent, if available, for higher ancestors in the name.\n \n       if Nkind (Name (N)) = N_Selected_Component then\n          declare\n@@ -5763,10 +5760,10 @@ package body Sem_Ch10 is\n          Write_Eol;\n       end if;\n \n-      --  Prepare the removal of the shadow entities from visibility. The\n-      --  first element of the limited view is a header (an E_Package\n-      --  entity) that is used to reference the first shadow entity in the\n-      --  private part of the package\n+      --  Prepare the removal of the shadow entities from visibility. The first\n+      --  element of the limited view is a header (an E_Package entity) that is\n+      --  used to reference the first shadow entity in the private part of the\n+      --  package\n \n       Lim_Header := Limited_View (P);\n       Lim_Typ    := First_Entity (Lim_Header);"}]}