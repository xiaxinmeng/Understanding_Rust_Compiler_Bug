{"sha": "a7af848991809005fee685e3fe15a39110136f3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdhZjg0ODk5MTgwOTAwNWZlZTY4NWUzZmUxNWEzOTExMDEzNmYzZQ==", "commit": {"author": {"name": "Palmer Dabbelt", "email": "palmer@sifive.com", "date": "2018-03-13T18:35:06Z"}, "committer": {"name": "Palmer Dabbelt", "email": "palmer@gcc.gnu.org", "date": "2018-03-13T18:35:06Z"}, "message": "RISC-V: Add and document the \"-mno-relax\" option\n\nRISC-V relies on aggressive linker relaxation to get good code size.  As\na result no text symbol addresses can be known until link time, which\nmeans that alignment must be handled during the link.  This alignment\npass is essentially just another linker relaxation, so this has the\nunfortunate side effect that linker relaxation is required for\ncorrectness on many RISC-V targets.\n\nThe RISC-V assembler has supported an \".option norelax\" for a long time\nbecause there are situations in which linker relaxation is a bad idea --\nthe canonical example is when trying to materialize the initial value of\nthe global pointer into a register, which would otherwise be relaxed to\na NOP.  We've been relying on users who want to disable relaxation for\nan entire link to pass \"-Wl,--no-relax\", but that still relies on the\nlinker relaxing R_RISCV_ALIGN to handle alignment despite it not being\nstrictly necessary.\n\nThis patch adds a GCC option, \"-mno-relax\", that disable linker\nrelaxation by adding \".option norelax\" to the top of every generated\nassembly file.  The assembler is smart enough to handle alignment at\nassemble time for files that have never emitted a relaxable relocation,\nso this is sufficient to really disable all relaxations in the linker,\nwhich results in significantly faster link times for large objects.\n\nThis also has the side effect of allowing toolchains that don't support\nlinker relaxation (LLVM and the Linux module loader) to function\ncorrectly.  Toolchains that don't support linker relaxation should\ndefault to \"-mno-relax\" and error when presented with any R_RISCV_ALIGN\nrelocation as those need to be handled for correctness.\n\ngcc/ChangeLog\n\n2018-03-13  Palmer Dabbelt  <palmer@sifive.com>\n\n        * config/riscv/riscv.opt (mrelax): New option.\n        * config/riscv/riscv.c (riscv_file_start): Emit \".option\n        \"norelax\" when riscv_mrelax is disabled.\n        * doc/invoke.texi (RISC-V): Document \"-mrelax\" and \"-mno-relax\".\n\nFrom-SVN: r258499", "tree": {"sha": "d808decbcc6365842b9cad064a250795c9811e3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d808decbcc6365842b9cad064a250795c9811e3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7af848991809005fee685e3fe15a39110136f3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7af848991809005fee685e3fe15a39110136f3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7af848991809005fee685e3fe15a39110136f3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7af848991809005fee685e3fe15a39110136f3e/comments", "author": {"login": "palmer-dabbelt", "id": 1383006, "node_id": "MDQ6VXNlcjEzODMwMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1383006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/palmer-dabbelt", "html_url": "https://github.com/palmer-dabbelt", "followers_url": "https://api.github.com/users/palmer-dabbelt/followers", "following_url": "https://api.github.com/users/palmer-dabbelt/following{/other_user}", "gists_url": "https://api.github.com/users/palmer-dabbelt/gists{/gist_id}", "starred_url": "https://api.github.com/users/palmer-dabbelt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/palmer-dabbelt/subscriptions", "organizations_url": "https://api.github.com/users/palmer-dabbelt/orgs", "repos_url": "https://api.github.com/users/palmer-dabbelt/repos", "events_url": "https://api.github.com/users/palmer-dabbelt/events{/privacy}", "received_events_url": "https://api.github.com/users/palmer-dabbelt/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ada6bad9780d405aea40acbea4f0813b05e3733a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ada6bad9780d405aea40acbea4f0813b05e3733a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ada6bad9780d405aea40acbea4f0813b05e3733a"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "d4d61a0cdbac2ece229b757d6e05a7c40323faea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7af848991809005fee685e3fe15a39110136f3e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7af848991809005fee685e3fe15a39110136f3e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7af848991809005fee685e3fe15a39110136f3e", "patch": "@@ -1,3 +1,10 @@\n+2018-03-01  Palmer Dabbelt  <palmer@sifive.com>\n+\n+\t* config/riscv/riscv.opt (mrelax): New option.\n+\t* config/riscv/riscv.c (riscv_file_start): Emit \".option\n+\t\"norelax\" when riscv_mrelax is disabled.\n+\t* doc/invoke.texi (RISC-V): Document \"-mrelax\" and \"-mno-relax\".\n+\n 2018-03-13  Aaron Sawdey  <acsawdey@linux.vnet.ibm.com>\n \n \tPR target/84743"}, {"sha": "3e81874de232eda6863d338499ce47c5ba084a8e", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7af848991809005fee685e3fe15a39110136f3e/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7af848991809005fee685e3fe15a39110136f3e/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=a7af848991809005fee685e3fe15a39110136f3e", "patch": "@@ -3979,6 +3979,11 @@ riscv_file_start (void)\n \n   /* Instruct GAS to generate position-[in]dependent code.  */\n   fprintf (asm_out_file, \"\\t.option %spic\\n\", (flag_pic ? \"\" : \"no\"));\n+\n+  /* If the user specifies \"-mno-relax\" on the command line then disable linker\n+     relaxation in the assembler.  */\n+  if (! riscv_mrelax)\n+    fprintf (asm_out_file, \"\\t.option norelax\\n\");\n }\n \n /* Implement TARGET_ASM_OUTPUT_MI_THUNK.  Generate rtl rather than asm text"}, {"sha": "b37ac75d9bb4179cd8986ac99516d6c90f38127d", "filename": "gcc/config/riscv/riscv.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7af848991809005fee685e3fe15a39110136f3e/gcc%2Fconfig%2Friscv%2Friscv.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7af848991809005fee685e3fe15a39110136f3e/gcc%2Fconfig%2Friscv%2Friscv.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.opt?ref=a7af848991809005fee685e3fe15a39110136f3e", "patch": "@@ -106,6 +106,11 @@ mexplicit-relocs\n Target Report Mask(EXPLICIT_RELOCS)\n Use %reloc() operators, rather than assembly macros, to load addresses.\n \n+mrelax\n+Target Bool Var(riscv_mrelax) Init(1)\n+Take advantage of linker relaxations to reduce the number of instructions\n+required to materialize symbol addresses.\n+\n Mask(64BIT)\n \n Mask(MUL)"}, {"sha": "4d543008f532eba62df7720376753bacb57f6c46", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7af848991809005fee685e3fe15a39110136f3e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7af848991809005fee685e3fe15a39110136f3e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a7af848991809005fee685e3fe15a39110136f3e", "patch": "@@ -1042,7 +1042,8 @@ See RS/6000 and PowerPC Options.\n -msave-restore  -mno-save-restore @gol\n -mstrict-align -mno-strict-align @gol\n -mcmodel=medlow -mcmodel=medany @gol\n--mexplicit-relocs  -mno-explicit-relocs @gol}\n+-mexplicit-relocs  -mno-explicit-relocs @gol\n+-mrelax -mno-relax @gol}\n \n @emph{RL78 Options}\n @gccoptlist{-msim  -mmul=none  -mmul=g13  -mmul=g14  -mallregs @gol\n@@ -23102,6 +23103,12 @@ Use or do not use assembler relocation operators when dealing with symbolic\n addresses.  The alternative is to use assembler macros instead, which may\n limit optimization.\n \n+@item -mrelax\n+@itemx -mno-relax\n+Take advantage of linker relaxations to reduce the number of instructions\n+required to materialize symbol addresses. The default is to take advantage of\n+linker relaxations.\n+\n @end table\n \n @node RL78 Options"}]}