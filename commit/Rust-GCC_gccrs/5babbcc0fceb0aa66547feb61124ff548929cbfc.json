{"sha": "5babbcc0fceb0aa66547feb61124ff548929cbfc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJhYmJjYzBmY2ViMGFhNjY1NDdmZWI2MTEyNGZmNTQ4OTI5Y2JmYw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-03-29T17:54:04Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-03-29T17:54:04Z"}, "message": "tree-ssa-forwprop.c (forward_propagate_addr_expr_1): Properly propagate addresses of array references.\n\n2009-03-29  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-forwprop.c (forward_propagate_addr_expr_1): Properly\n\tpropagate addresses of array references.\n\n\t* gcc.dg/tree-ssa/forwprop-11.c: New testcase.\n\nFrom-SVN: r145250", "tree": {"sha": "98c1222c0815281e2dca9c5dd72ee8e2618713f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98c1222c0815281e2dca9c5dd72ee8e2618713f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5babbcc0fceb0aa66547feb61124ff548929cbfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5babbcc0fceb0aa66547feb61124ff548929cbfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5babbcc0fceb0aa66547feb61124ff548929cbfc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5babbcc0fceb0aa66547feb61124ff548929cbfc/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b0e5fa9401bbcb065adc9a79c0bda071d712491d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0e5fa9401bbcb065adc9a79c0bda071d712491d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0e5fa9401bbcb065adc9a79c0bda071d712491d"}], "stats": {"total": 40, "additions": 35, "deletions": 5}, "files": [{"sha": "4766e21c994cdc55d3bf07b1f0823388acd3eca3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5babbcc0fceb0aa66547feb61124ff548929cbfc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5babbcc0fceb0aa66547feb61124ff548929cbfc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5babbcc0fceb0aa66547feb61124ff548929cbfc", "patch": "@@ -1,3 +1,8 @@\n+2009-03-29  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-forwprop.c (forward_propagate_addr_expr_1): Properly\n+\tpropagate addresses of array references.\n+\n 2009-03-29  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* regmove.c (perhaps_ends_bb_p): Remove."}, {"sha": "0807892c7439dd27c1e2ed827ec2549f09f6bc61", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5babbcc0fceb0aa66547feb61124ff548929cbfc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5babbcc0fceb0aa66547feb61124ff548929cbfc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5babbcc0fceb0aa66547feb61124ff548929cbfc", "patch": "@@ -1,3 +1,7 @@\n+2009-03-29  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/forwprop-11.c: New testcase.\n+\n 2009-03-29  Daniel Kraft  <d@domob.eu>\n \n \tPR fortran/37423"}, {"sha": "eaaa6dd4e240482ec6bb39a16b69ff658e36661f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-11.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5babbcc0fceb0aa66547feb61124ff548929cbfc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5babbcc0fceb0aa66547feb61124ff548929cbfc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-11.c?ref=5babbcc0fceb0aa66547feb61124ff548929cbfc", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-forwprop1\" } */\n+\n+int f(int *p, int n)\n+{\n+  int (*a)[n] = (int (*)[n])p;\n+  int *q = &(*a)[0];\n+  return q[1];\n+}\n+\n+int g(int *p, int n)\n+{\n+  int (*a)[n] = (int (*)[n])p;\n+  int *q = &(*a)[2];\n+  return q[-1];\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"= \\\\\\(\\\\\\*a_..\\\\\\)\\\\\\[1\\\\\\];\" 2 \"forwprop1\" } } */\n+/* { dg-final { cleanup-tree-dump \"forwprop1\" } } */"}, {"sha": "859d6fe617262f0e56df12898b72db5e6e1d712f", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5babbcc0fceb0aa66547feb61124ff548929cbfc/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5babbcc0fceb0aa66547feb61124ff548929cbfc/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=5babbcc0fceb0aa66547feb61124ff548929cbfc", "patch": "@@ -828,19 +828,20 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs,\n   array_ref = TREE_OPERAND (def_rhs, 0);\n   if (TREE_CODE (array_ref) != ARRAY_REF\n       || TREE_CODE (TREE_TYPE (TREE_OPERAND (array_ref, 0))) != ARRAY_TYPE\n-      || !integer_zerop (TREE_OPERAND (array_ref, 1)))\n+      || TREE_CODE (TREE_OPERAND (array_ref, 1)) != INTEGER_CST)\n     return false;\n \n   rhs2 = gimple_assign_rhs2 (use_stmt);\n-  /* Try to optimize &x[0] p+ C where C is a multiple of the size\n-     of the elements in X into &x[C/element size].  */\n+  /* Try to optimize &x[C1] p+ C2 where C2 is a multiple of the size\n+     of the elements in X into &x[C1 + C2/element size].  */\n   if (TREE_CODE (rhs2) == INTEGER_CST)\n     {\n       tree new_rhs = maybe_fold_stmt_addition (gimple_expr_type (use_stmt),\n-\t\t\t\t\t       array_ref, rhs2);\n+\t\t\t\t\t       def_rhs, rhs2);\n       if (new_rhs)\n \t{\n-\t  gimple_assign_set_rhs_from_tree (use_stmt_gsi, new_rhs);\n+\t  gimple_assign_set_rhs_from_tree (use_stmt_gsi,\n+\t\t\t\t\t   unshare_expr (new_rhs));\n \t  use_stmt = gsi_stmt (*use_stmt_gsi);\n \t  update_stmt (use_stmt);\n \t  tidy_after_forward_propagate_addr (use_stmt);\n@@ -853,6 +854,7 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs,\n      array elements, then the result is converted into the proper\n      type for the arithmetic.  */\n   if (TREE_CODE (rhs2) == SSA_NAME\n+      && integer_zerop (TREE_OPERAND (array_ref, 1))\n       && useless_type_conversion_p (TREE_TYPE (name), TREE_TYPE (def_rhs))\n       /* Avoid problems with IVopts creating PLUS_EXPRs with a\n \t different type than their operands.  */"}]}