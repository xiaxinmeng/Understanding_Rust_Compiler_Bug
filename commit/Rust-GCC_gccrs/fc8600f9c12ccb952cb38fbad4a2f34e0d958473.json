{"sha": "fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM4NjAwZjljMTJjY2I5NTJjYjM4ZmJhZDRhMmYzNGUwZDk1ODQ3Mw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2007-02-25T18:47:05Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2007-02-25T18:47:05Z"}, "message": "extend.texi: Document optional priority argument to constructors and destructors.\n\n\t* doc/extend.texi: Document optional priority argument to\n\tconstructors and destructors.\n\t* tree.c (init_priority_for_decl): Adjust GTY markers.\n\t(init_ttree): Use priority-info hash functions for\n\tinit_priority_for_decl.\n\t(tree_map_eq): Rename to ...\n\t(tree_map_base_eq): ... this.\n\t(tree_map_marked_p): Rename to ...\n\t(tree_map_base_marked_p): ... this.\n\t(tree_map_base_hash): New function.\n\t(decl_init_priority_lookup): Rework.\n\t(decl_fini_priority_lookup): New function.\n\t(decl_priority_info): New function.\n\t(decl_init_priority_insert): Use it.\n\t(decl_fini_priority_insert): Likewise.\n\t(decl_restrict_base_lookup): Adjust for refactoring of tree_map\n\thierarchy.\n\t(decl_restrict_base_insert): Likewise.\n\t(decl_debug_expr_insert): Likewise.\n\t(decl_value_expr_lookup): Likewise.\n\t(decl_value_expr_insert): Likewise.\n\t* tree.h (priority_type): New type.\n\t(decl_init_priority_lookup): Use priority_type.\n\t(decl_fini_priority_lookup): New function.\n\t(decl_init_priority_insert): Use priority_type.\n\t(decl_fini_priority_insert): New function.\n\t(DECL_HAS_INIT_PRIORITY): Tweak comments.\n\t(DECL_INIT_PRIORITY): Likewise.\n\t(SET_DECL_INIT_PRIORITY): Add comment.\n\t(DECL_FINI_PRIORITY): New macro.\n\t(SET_DECL_FINI_PRIORITY): Likewise.\n\t(DEFAULT_INIT_PRIORITY): Document.\n\t(MAX_INIT_PRIORITY): Likewise.\n\t(MAX_RESERVED_INIT_PRIORITY): Likewise.\n\t(tree_map_base): New type.\n\t(tree_map_base_eq): New function.\n\t(tree_map_base_hash): Likewise.\n\t(tree_map_base_marked_p): Likewise.\n\t(tree_map): Inherit from tree_map_base.\n\t(tree_map_eq): Make it a macro.\n\t(tree_map_marked_p): Likewise.\n\t(tree_int_map): Inherit from tree_map_base.\n\t(tree_int_map_eq): Make it a macro.\n\t(tree_int_map_hash): Likewise.\n\t(tree_int_map_marked_p): Likewise.\n\t(tree_priority_map): New type.\n\t(tree_priority_map_eq): New macro.\n\t(tree_priority_map_hash): Likewise.\n\t(tree_priority_map_marked_p): Likewise.\n\t* varasm.c (emults_decl): Adjust for refactoring of tree_map\n\thierarchy.\n\t(emutls_common_1): Likewise.\n\t* lambda-code.c (replace_uses_equiv_to_x_with_y): Likewise.\n\t* tree-ssa-structalias.c (heapvar_lookup): Adjust for refactoring\n\tof tree_map hierarchy.\n\t* tree-cfg.c (move_stmt_r): Likewise.\n\t(new_label_mapper): Likewise.\n\t* c-tree.h (c_expand_body): Move to ...\n\t* c-common.h (c_expand_body): ... here.\n\t* c-decl.c (c_expand_body): Move to ...\n\t* c-common.c (c_expand_body): ... here.\n\t(c_common_attribute_table): Allow 1 argument for the constructor\n\tand destructor attributes.\n\t(get_priority): New function.\n\t(handle_constructor_attribute): Set DECL_INIT_PRIORITY.\n\t(handle_destructor_attribute): Set DECL_FINI_PRIORITY.\n\n\t* cp-tree.h (static_ctors): Remove.\n\t* cp-tree.h (static_dtors): Likewise.\n\t* cp-objcp-common.c (decl_shadowed_for_var_lookup): Adjust for\n\trefactoring of tree_map hierarchy.\n\t(decl_shadowed_for_var_insert): Likewise.\n\t* semantics.c (expand_body): Use c_expand_body.\n\t(expand_or_defer_fn): Don't update static_ctors or static_dtors.\n\t* decl2.c (static_ctors): Remove.\n\t(static_dtors): Likewise.\n\t(generate_ctor_or_dtor_function): Pass NULL_TREE to\n\tobjc_generate_static_init_call.  Do not call static_[cd]tors.\n\t(generate_ctor_and_dtor_functions_for_priority): Do not check for\n\tstatic_[cd]tors.\n\t(cp_write_global_declarations): Likewise.\n\n\t* decl.c (annotate_value): Adjust for refactoring of tree_map\n\thierarchy.\n\n\t* gcc.dg/initpri1.c: New test.\n\t* gcc.dg/initpri2.c: Likewise.\n\t* g++.dg/special/initpri1.C: New test.\n\t* g++.dg/special/initpri2.C: Likewise.\n\t* g++.dg/special/conpr-1.C: Use init_priority effective target.\n\t* g++.dg/special/conpr-2.C: Likewise.\n\t* g++.dg/special/conpr-3.C: Likewise.\n\t* g++.dg/special/conpr-4.C: Likewise.\n\t* g++.dg/special/initp1.C: Likewise.\n\t* g++.dg/special/ecos.exp: Remove code to detect availability of\n\tconstructor priorities.\n\t* lib/target-support.exp (target_init_priority): New function.\n\nFrom-SVN: r122315", "tree": {"sha": "cfcdaf9660cd0bdc1216594b6e66f5e22560aa3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfcdaf9660cd0bdc1216594b6e66f5e22560aa3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/comments", "author": null, "committer": null, "parents": [{"sha": "2a025b54f6867e218f4ec07a70c57833162c0c32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a025b54f6867e218f4ec07a70c57833162c0c32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a025b54f6867e218f4ec07a70c57833162c0c32"}], "stats": {"total": 752, "additions": 553, "deletions": 199}, "files": [{"sha": "54d3ad521791ab3f7b8d243f78f590e722a02b9f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "patch": "@@ -1,3 +1,72 @@\n+2007-02-25  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* doc/extend.texi: Document optional priority argument to\n+\tconstructors and destructors.\n+\t* tree.c (init_priority_for_decl): Adjust GTY markers.\n+\t(init_ttree): Use priority-info hash functions for\n+\tinit_priority_for_decl.\n+\t(tree_map_eq): Rename to ...\n+\t(tree_map_base_eq): ... this.\n+\t(tree_map_marked_p): Rename to ...\n+\t(tree_map_base_marked_p): ... this.\n+\t(tree_map_base_hash): New function.\n+\t(decl_init_priority_lookup): Rework.\n+\t(decl_fini_priority_lookup): New function.\n+\t(decl_priority_info): New function.\n+\t(decl_init_priority_insert): Use it.\n+\t(decl_fini_priority_insert): Likewise.\n+\t(decl_restrict_base_lookup): Adjust for refactoring of tree_map\n+\thierarchy.\n+\t(decl_restrict_base_insert): Likewise.\n+\t(decl_debug_expr_insert): Likewise.\n+\t(decl_value_expr_lookup): Likewise.\n+\t(decl_value_expr_insert): Likewise.\n+\t* tree.h (priority_type): New type.\n+\t(decl_init_priority_lookup): Use priority_type.\n+\t(decl_fini_priority_lookup): New function.\n+\t(decl_init_priority_insert): Use priority_type.\n+\t(decl_fini_priority_insert): New function.\n+\t(DECL_HAS_INIT_PRIORITY): Tweak comments.\n+\t(DECL_INIT_PRIORITY): Likewise.\n+\t(SET_DECL_INIT_PRIORITY): Add comment.\n+\t(DECL_FINI_PRIORITY): New macro.\n+\t(SET_DECL_FINI_PRIORITY): Likewise.\n+\t(DEFAULT_INIT_PRIORITY): Document.\n+\t(MAX_INIT_PRIORITY): Likewise.\n+\t(MAX_RESERVED_INIT_PRIORITY): Likewise.\n+\t(tree_map_base): New type.\n+\t(tree_map_base_eq): New function.\n+\t(tree_map_base_hash): Likewise.\n+\t(tree_map_base_marked_p): Likewise.\n+\t(tree_map): Inherit from tree_map_base.\n+\t(tree_map_eq): Make it a macro.\n+\t(tree_map_marked_p): Likewise.\n+\t(tree_int_map): Inherit from tree_map_base.\n+\t(tree_int_map_eq): Make it a macro.\n+\t(tree_int_map_hash): Likewise.\n+\t(tree_int_map_marked_p): Likewise.\n+\t(tree_priority_map): New type.\n+\t(tree_priority_map_eq): New macro.\n+\t(tree_priority_map_hash): Likewise.\n+\t(tree_priority_map_marked_p): Likewise.\n+\t* varasm.c (emults_decl): Adjust for refactoring of tree_map\n+\thierarchy.\n+\t(emutls_common_1): Likewise.\n+\t* lambda-code.c (replace_uses_equiv_to_x_with_y): Likewise.\n+\t* tree-ssa-structalias.c (heapvar_lookup): Adjust for refactoring\n+\tof tree_map hierarchy.\n+\t* tree-cfg.c (move_stmt_r): Likewise.\n+\t(new_label_mapper): Likewise.\n+\t* c-tree.h (c_expand_body): Move to ...\n+\t* c-common.h (c_expand_body): ... here.\n+\t* c-decl.c (c_expand_body): Move to ...\n+\t* c-common.c (c_expand_body): ... here.\n+\t(c_common_attribute_table): Allow 1 argument for the constructor\n+\tand destructor attributes.\n+\t(get_priority): New function.\n+\t(handle_constructor_attribute): Set DECL_INIT_PRIORITY.\n+\t(handle_destructor_attribute): Set DECL_FINI_PRIORITY.\n+\n 2007-02-24  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/30509"}, {"sha": "ddae48e7bcd350e34e2cdb62851a48b25d2af448", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "patch": "@@ -1,3 +1,8 @@\n+2007-02-24  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* decl.c (annotate_value): Adjust for refactoring of tree_map\n+\thierarchy.\n+\n 2007-02-21  Ed Schonberg  <schonberg@adacore.com>\n \n \tPR ada/18819"}, {"sha": "6b14064641591f7ed022d3389373c49a03838248", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "patch": "@@ -5890,7 +5890,7 @@ annotate_value (tree gnu_size)\n       if (!annotate_value_cache)\n         annotate_value_cache = htab_create_ggc (512, tree_int_map_hash,\n \t\t\t\t\t        tree_int_map_eq, 0);\n-      in.from = gnu_size;\n+      in.base.from = gnu_size;\n       h = (struct tree_int_map **)\n \t    htab_find_slot (annotate_value_cache, &in, INSERT);\n "}, {"sha": "4eb0265a7a22e656550618c58927b30bf72006a9", "filename": "gcc/c-common.c", "status": "modified", "additions": 78, "deletions": 6, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "patch": "@@ -598,9 +598,9 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_const_attribute },\n   { \"transparent_union\",      0, 0, false, false, false,\n \t\t\t      handle_transparent_union_attribute },\n-  { \"constructor\",            0, 0, true,  false, false,\n+  { \"constructor\",            0, 1, true,  false, false,\n \t\t\t      handle_constructor_attribute },\n-  { \"destructor\",             0, 0, true,  false, false,\n+  { \"destructor\",             0, 1, true,  false, false,\n \t\t\t      handle_destructor_attribute },\n   { \"mode\",                   1, 1, false,  true, false,\n \t\t\t      handle_mode_attribute },\n@@ -4220,6 +4220,29 @@ c_expand_expr (tree exp, rtx target, enum machine_mode tmode,\n     }\n }\n \n+\n+/* Generate the RTL for the body of FNDECL.  */\n+\n+void\n+c_expand_body (tree fndecl)\n+{\n+\n+  if (!DECL_INITIAL (fndecl)\n+      || DECL_INITIAL (fndecl) == error_mark_node)\n+    return;\n+\n+  tree_rest_of_compilation (fndecl);\n+\n+  if (DECL_STATIC_CONSTRUCTOR (fndecl)\n+      && targetm.have_ctors_dtors)\n+    targetm.asm_out.constructor (XEXP (DECL_RTL (fndecl), 0),\n+\t\t\t\t decl_init_priority_lookup (fndecl));\n+  if (DECL_STATIC_DESTRUCTOR (fndecl)\n+      && targetm.have_ctors_dtors)\n+    targetm.asm_out.destructor (XEXP (DECL_RTL (fndecl), 0),\n+\t\t\t\tdecl_fini_priority_lookup (fndecl));\n+}\n+\n /* Hook used by staticp to handle language-specific tree codes.  */\n \n tree\n@@ -4655,12 +4678,56 @@ handle_transparent_union_attribute (tree *node, tree name,\n   return NULL_TREE;\n }\n \n+/* Subroutine of handle_{con,de}structor_attribute.  Evaluate ARGS to\n+   get the requested priority for a constructor or destructor,\n+   possibly issuing diagnostics for invalid or reserved\n+   priorities.  */\n+\n+static priority_type\n+get_priority (tree args, bool is_destructor)\n+{\n+  HOST_WIDE_INT pri;\n+\n+  if (!args)\n+    return DEFAULT_INIT_PRIORITY;\n+\n+  if (!host_integerp (TREE_VALUE (args), /*pos=*/0))\n+    goto invalid;\n+\n+  pri = tree_low_cst (TREE_VALUE (args), /*pos=*/0);\n+  if (pri < 0 || pri > MAX_INIT_PRIORITY)\n+    goto invalid;\n+\n+  if (pri <= MAX_RESERVED_INIT_PRIORITY)\n+    {\n+      if (is_destructor)\n+\twarning (0,\n+\t\t \"destructor priorities from 0 to %d are reserved \"\n+\t\t \"for the implementation\", \n+\t\t MAX_RESERVED_INIT_PRIORITY);\n+      else\n+\twarning (0,\n+\t\t \"constructor priorities from 0 to %d are reserved \"\n+\t\t \"for the implementation\", \n+\t\t MAX_RESERVED_INIT_PRIORITY);\n+    }\n+  return pri;\n+\n+ invalid:\n+  if (is_destructor)\n+    error (\"destructor priorities must be integers from 0 to %d inclusive\",\n+\t   MAX_INIT_PRIORITY);\n+  else\n+    error (\"constructor priorities must be integers from 0 to %d inclusive\",\n+\t   MAX_INIT_PRIORITY);\n+  return DEFAULT_INIT_PRIORITY;\n+}\n+\n /* Handle a \"constructor\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n \n static tree\n-handle_constructor_attribute (tree *node, tree name,\n-\t\t\t      tree ARG_UNUSED (args),\n+handle_constructor_attribute (tree *node, tree name, tree args,\n \t\t\t      int ARG_UNUSED (flags),\n \t\t\t      bool *no_add_attrs)\n {\n@@ -4671,7 +4738,10 @@ handle_constructor_attribute (tree *node, tree name,\n       && TREE_CODE (type) == FUNCTION_TYPE\n       && decl_function_context (decl) == 0)\n     {\n+      priority_type priority;\n       DECL_STATIC_CONSTRUCTOR (decl) = 1;\n+      priority = get_priority (args, /*is_destructor=*/false);\n+      SET_DECL_INIT_PRIORITY (decl, priority);\n       TREE_USED (decl) = 1;\n     }\n   else\n@@ -4687,8 +4757,7 @@ handle_constructor_attribute (tree *node, tree name,\n    struct attribute_spec.handler.  */\n \n static tree\n-handle_destructor_attribute (tree *node, tree name,\n-\t\t\t     tree ARG_UNUSED (args),\n+handle_destructor_attribute (tree *node, tree name, tree args,\n \t\t\t     int ARG_UNUSED (flags),\n \t\t\t     bool *no_add_attrs)\n {\n@@ -4699,7 +4768,10 @@ handle_destructor_attribute (tree *node, tree name,\n       && TREE_CODE (type) == FUNCTION_TYPE\n       && decl_function_context (decl) == 0)\n     {\n+      priority_type priority;\n       DECL_STATIC_DESTRUCTOR (decl) = 1;\n+      priority = get_priority (args, /*is_destructor=*/true);\n+      SET_DECL_FINI_PRIORITY (decl, priority);\n       TREE_USED (decl) = 1;\n     }\n   else"}, {"sha": "4e25ede957c3f9917fced0c7fa008f06996116da", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "patch": "@@ -810,6 +810,7 @@ extern tree lookup_name (tree);\n extern bool vector_types_convertible_p (tree t1, tree t2, bool emit_lax_note);\n \n extern rtx c_expand_expr (tree, rtx, enum machine_mode, int, rtx *);\n+extern void c_expand_body (tree);\n \n extern tree c_staticp (tree);\n "}, {"sha": "ec567a5451d9f4188b6e835f0f78c5311222a75a", "filename": "gcc/c-decl.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "patch": "@@ -6828,28 +6828,6 @@ finish_function (void)\n   cfun = NULL;\n   current_function_decl = NULL;\n }\n-\n-/* Generate the RTL for the body of FNDECL.  */\n-\n-void\n-c_expand_body (tree fndecl)\n-{\n-\n-  if (!DECL_INITIAL (fndecl)\n-      || DECL_INITIAL (fndecl) == error_mark_node)\n-    return;\n-\n-  tree_rest_of_compilation (fndecl);\n-\n-  if (DECL_STATIC_CONSTRUCTOR (fndecl)\n-      && targetm.have_ctors_dtors)\n-    targetm.asm_out.constructor (XEXP (DECL_RTL (fndecl), 0),\n-\t\t\t\t DEFAULT_INIT_PRIORITY);\n-  if (DECL_STATIC_DESTRUCTOR (fndecl)\n-      && targetm.have_ctors_dtors)\n-    targetm.asm_out.destructor (XEXP (DECL_RTL (fndecl), 0),\n-\t\t\t\tDEFAULT_INIT_PRIORITY);\n-}\n \f\n /* Check the declarations given in a for-loop for satisfying the C99\n    constraints.  If exactly one such decl is found, return it.  */"}, {"sha": "b2fe22893c4949cfaa1332de010cabd039c22330", "filename": "gcc/c-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "patch": "@@ -441,7 +441,6 @@ extern int global_bindings_p (void);\n extern void push_scope (void);\n extern tree pop_scope (void);\n extern void insert_block (tree);\n-extern void c_expand_body (tree);\n \n extern void c_init_decl_processing (void);\n extern void c_dup_lang_specific_decl (tree);"}, {"sha": "a9f4d254c476c719e509ae59216e3f07aa190311", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "patch": "@@ -1,3 +1,20 @@\n+2007-02-25  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (static_ctors): Remove.\n+\t* cp-tree.h (static_dtors): Likewise.\n+\t* cp-objcp-common.c (decl_shadowed_for_var_lookup): Adjust for\n+\trefactoring of tree_map hierarchy.\n+\t(decl_shadowed_for_var_insert): Likewise.\n+\t* semantics.c (expand_body): Use c_expand_body.\n+\t(expand_or_defer_fn): Don't update static_ctors or static_dtors.\n+\t* decl2.c (static_ctors): Remove.\n+\t(static_dtors): Likewise.\n+\t(generate_ctor_or_dtor_function): Pass NULL_TREE to\n+\tobjc_generate_static_init_call.  Do not call static_[cd]tors.\n+\t(generate_ctor_and_dtor_functions_for_priority): Do not check for\n+\tstatic_[cd]tors.\n+\t(cp_write_global_declarations): Likewise.\n+\n 2007-02-23  Richard Guenther  <rguenther@suse.de>\n \n \t* class.c (note_name_declared_in_class): Make declaration"}, {"sha": "372e8e5ac3e05312e59ede790298f2bcd340abf5", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "patch": "@@ -228,7 +228,7 @@ tree\n decl_shadowed_for_var_lookup (tree from)\n {\n   struct tree_map *h, in;\n-  in.from = from;\n+  in.base.from = from;\n \n   h = (struct tree_map *) htab_find_with_hash (shadowed_var_for_decl, &in,\n \t\t\t\t\t       htab_hash_pointer (from));\n@@ -247,7 +247,7 @@ decl_shadowed_for_var_insert (tree from, tree to)\n \n   h = GGC_NEW (struct tree_map);\n   h->hash = htab_hash_pointer (from);\n-  h->from = from;\n+  h->base.from = from;\n   h->to = to;\n   loc = htab_find_slot_with_hash (shadowed_var_for_decl, h, h->hash, INSERT);\n   *(struct tree_map **) loc = h;"}, {"sha": "e03003e12107d0b53b7c8ff71ca61f428cee1f02", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "patch": "@@ -3479,11 +3479,6 @@ extern int at_eof;\n    TREE_PURPOSE slot.  */\n extern GTY(()) tree static_aggregates;\n \n-/* Functions called along with real static constructors and destructors.  */\n-\n-extern GTY(()) tree static_ctors;\n-extern GTY(()) tree static_dtors;\n-\n enum overload_flags { NO_SPECIAL = 0, DTOR_FLAG, OP_FLAG, TYPENAME_FLAG };\n \n /* These are uses as bits in flags passed to various functions to"}, {"sha": "1feb3a7661fbe672f7d138d29487b0bdcf4dd7a8", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 8, "deletions": 44, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "patch": "@@ -97,11 +97,6 @@ static GTY(()) VEC(tree,gc) *deferred_fns;\n \n int at_eof;\n \n-/* Functions called along with real static constructors and destructors.  */\n-\n-tree static_ctors;\n-tree static_dtors;\n-\n \f\n \n /* Return a member function type (a METHOD_TYPE), given FNTYPE (a\n@@ -2847,7 +2842,7 @@ generate_ctor_or_dtor_function (bool constructor_p, int priority,\n       && constructor_p && objc_static_init_needed_p ())\n     {\n       body = start_objects (function_key, priority);\n-      static_ctors = objc_generate_static_init_call (static_ctors);\n+      objc_generate_static_init_call (NULL_TREE);\n     }\n \n   /* Call the static storage duration function with appropriate\n@@ -2870,29 +2865,6 @@ generate_ctor_or_dtor_function (bool constructor_p, int priority,\n \t}\n     }\n \n-  /* If we're generating code for the DEFAULT_INIT_PRIORITY, throw in\n-     calls to any functions marked with attributes indicating that\n-     they should be called at initialization- or destruction-time.  */\n-  if (priority == DEFAULT_INIT_PRIORITY)\n-    {\n-      tree fns;\n-\n-      for (fns = constructor_p ? static_ctors : static_dtors;\n-\t   fns;\n-\t   fns = TREE_CHAIN (fns))\n-\t{\n-\t  fndecl = TREE_VALUE (fns);\n-\n-\t  /* Calls to pure/const functions will expand to nothing.  */\n-\t  if (! (flags_from_decl_or_type (fndecl) & (ECF_CONST | ECF_PURE)))\n-\t    {\n-\t      if (! body)\n-\t\tbody = start_objects (function_key, priority);\n-\t      finish_expr_stmt (build_function_call (fndecl, NULL_TREE));\n-\t    }\n-\t}\n-    }\n-\n   /* Close out the function.  */\n   if (body)\n     finish_objects (function_key, priority, body);\n@@ -2910,11 +2882,9 @@ generate_ctor_and_dtor_functions_for_priority (splay_tree_node n, void * data)\n \n   /* Generate the functions themselves, but only if they are really\n      needed.  */\n-  if (pi->initializations_p\n-      || (priority == DEFAULT_INIT_PRIORITY && static_ctors))\n+  if (pi->initializations_p)\n     generate_ctor_or_dtor_function (/*constructor_p=*/true, priority, locus);\n-  if (pi->destructions_p\n-      || (priority == DEFAULT_INIT_PRIORITY && static_dtors))\n+  if (pi->destructions_p)\n     generate_ctor_or_dtor_function (/*constructor_p=*/false, priority, locus);\n \n   /* Keep iterating.  */\n@@ -3309,17 +3279,11 @@ cp_write_global_declarations (void)\n     splay_tree_foreach (priority_info_map,\n \t\t\tgenerate_ctor_and_dtor_functions_for_priority,\n \t\t\t/*data=*/&locus);\n-  else\n-    {\n-      /* If we have a ctor or this is obj-c++ and we need a static init,\n-\t call generate_ctor_or_dtor_function.  */\n-      if (static_ctors || (c_dialect_objc () && objc_static_init_needed_p ()))\n-\tgenerate_ctor_or_dtor_function (/*constructor_p=*/true,\n-\t\t\t\t\tDEFAULT_INIT_PRIORITY, &locus);\n-      if (static_dtors)\n-\tgenerate_ctor_or_dtor_function (/*constructor_p=*/false,\n-\t\t\t\t\tDEFAULT_INIT_PRIORITY, &locus);\n-    }\n+  else if (c_dialect_objc () && objc_static_init_needed_p ())\n+    /* If this is obj-c++ and we need a static init, call\n+       generate_ctor_or_dtor_function.  */\n+    generate_ctor_or_dtor_function (/*constructor_p=*/true,\n+\t\t\t\t    DEFAULT_INIT_PRIORITY, &locus);\n \n   /* We're done with the splay-tree now.  */\n   if (priority_info_map)"}, {"sha": "71c16e07e11833dcd15b27aabfdf0f3247224c2c", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "patch": "@@ -3099,7 +3099,7 @@ expand_body (tree fn)\n      generating trees for a function.  */\n   gcc_assert (function_depth == 0);\n \n-  tree_rest_of_compilation (fn);\n+  c_expand_body (fn);\n \n   current_function_decl = saved_function;\n \n@@ -3159,18 +3159,6 @@ expand_or_defer_fn (tree fn)\n       return;\n     }\n \n-  /* If this function is marked with the constructor attribute, add it\n-     to the list of functions to be called along with constructors\n-     from static duration objects.  */\n-  if (DECL_STATIC_CONSTRUCTOR (fn))\n-    static_ctors = tree_cons (NULL_TREE, fn, static_ctors);\n-\n-  /* If this function is marked with the destructor attribute, add it\n-     to the list of functions to be called along with destructors from\n-     static duration objects.  */\n-  if (DECL_STATIC_DESTRUCTOR (fn))\n-    static_dtors = tree_cons (NULL_TREE, fn, static_dtors);\n-\n   /* We make a decision about linkage for these functions at the end\n      of the compilation.  Until that point, we do not want the back\n      end to output them -- but we do want it to see the bodies of"}, {"sha": "ad3404a0b3d7f18a1049ba02721fbcdc8fc2fa62", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "patch": "@@ -1667,6 +1667,8 @@ specifies that the @samp{const} must be attached to the return value.\n \n @item constructor\n @itemx destructor\n+@itemx constructor (@var{priority})\n+@itemx destructor (@var{priority})\n @cindex @code{constructor} function attribute\n @cindex @code{destructor} function attribute\n The @code{constructor} attribute causes the function to be called\n@@ -1677,6 +1679,16 @@ been called.  Functions with these attributes are useful for\n initializing data that will be used implicitly during the execution of\n the program.\n \n+You may provide an optional integer priority to control the order in\n+which constructor and destructor functions are run.  A constructor\n+with a smaller priority number runs before a constructor with a larger\n+priority number; the opposite relationship holds for destructors.  So,\n+if you have a constructor that allocates a resource and a destructor\n+that deallocates the same resource, both functions typically have the\n+same priority.  The priorities for constructor and destructor\n+functions are the same as those specified for namespace-scope C++\n+objects (@pxref{C++ Attributes}).\n+\n These attributes are not currently implemented for Objective-C@.\n \n @item deprecated"}, {"sha": "d7632665fb596407cb48b8eefd9f68ffe92c8d0f", "filename": "gcc/lambda-code.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Flambda-code.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Flambda-code.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda-code.c?ref=fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "patch": "@@ -2153,7 +2153,7 @@ replace_uses_equiv_to_x_with_y (struct loop *loop, tree stmt, tree x,\n       /* Use REPLACEMENTS hash table to cache already created\n \t temporaries.  */\n       in.hash = htab_hash_pointer (use);\n-      in.from = use;\n+      in.base.from = use;\n       h = htab_find_with_hash (replacements, &in, in.hash);\n       if (h != NULL)\n \t{\n@@ -2198,7 +2198,7 @@ replace_uses_equiv_to_x_with_y (struct loop *loop, tree stmt, tree x,\n       SET_USE (use_p, var);\n       h = ggc_alloc (sizeof (struct tree_map));\n       h->hash = in.hash;\n-      h->from = use;\n+      h->base.from = use;\n       h->to = var;\n       loc = htab_find_slot_with_hash (replacements, h, in.hash, INSERT);\n       gcc_assert ((*(struct tree_map **)loc) == NULL);"}, {"sha": "c5e15b90a0d70ccb5421549cb144892f04bd3346", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "patch": "@@ -1,3 +1,18 @@\n+2007-02-25  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* gcc.dg/initpri1.c: New test.\n+\t* gcc.dg/initpri2.c: Likewise.\n+\t* g++.dg/special/initpri1.C: New test.\n+\t* g++.dg/special/initpri2.C: Likewise.\n+\t* g++.dg/special/conpr-1.C: Use init_priority effective target.\n+\t* g++.dg/special/conpr-2.C: Likewise.\n+\t* g++.dg/special/conpr-3.C: Likewise.\n+\t* g++.dg/special/conpr-4.C: Likewise.\n+\t* g++.dg/special/initp1.C: Likewise.\n+\t* g++.dg/special/ecos.exp: Remove code to detect availability of\n+\tconstructor priorities.\n+\t* lib/target-support.exp (target_init_priority): New function.\n+\n 2007-02-24  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.c-torture/execute/pr30778.c: New testcase."}, {"sha": "ef694dbe6f8df1095003b38886224244bda72ac0", "filename": "gcc/testsuite/g++.dg/special/conpr-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fconpr-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fconpr-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fconpr-1.C?ref=fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do run } */\n+/* { dg-do run { target init_priority } } */\n \n #include <stdlib.h>\n "}, {"sha": "ac826942a67f1774b78f709c5a633f9c942f9c9c", "filename": "gcc/testsuite/g++.dg/special/conpr-2.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fconpr-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fconpr-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fconpr-2.C?ref=fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "patch": "@@ -1,5 +1,4 @@\n-/* This doesn't work on solaris2 for reasons described in PR 6482.  */\n-/* { dg-do run { xfail *-*-solaris2* } } */\n+/* { dg-do run { target init_priority } } */\n /* { dg-additional-sources \"conpr-2a.cc\" } */\n \n #include <stdlib.h>"}, {"sha": "71fadcc64d3b56ce64862b64715837ee1a105dd6", "filename": "gcc/testsuite/g++.dg/special/conpr-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fconpr-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fconpr-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fconpr-3.C?ref=fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do run } */\n+/* { dg-do run { target init_priority } } */\n /* { dg-additional-sources \"conpr-3a.cc conpr-3b.cc\" } */\n \n #include <stdlib.h>"}, {"sha": "40ce21d98b564db452de27ae474bcbd1a41669d0", "filename": "gcc/testsuite/g++.dg/special/conpr-4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fconpr-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fconpr-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fconpr-4.C?ref=fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do run } */\n+/* { dg-do run { target init_priority } } */\n /* { dg-additional-sources \"conpr-3b.cc conpr-3a.cc\" } */\n \n #include <stdlib.h>"}, {"sha": "6fbd81106104e229987bf8c76472e5f34d358473", "filename": "gcc/testsuite/g++.dg/special/ecos.exp", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fecos.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fecos.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Fecos.exp?ref=fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "patch": "@@ -24,16 +24,6 @@\n # Load support procs.\n load_lib g++-dg.exp\n \n-# Test for whether or not __attribute__((init_priority)) is supported\n-# by the platform.\n-\n-set comp_output [g++_target_compile \\\n-\t\t\"$srcdir/$subdir/initp1.C\" \"initp1.S\" assembly \"\"]\n-remove-build-file \"initp1.S\"\n-if { [string match \"*init_priority*\" $comp_output] } {\n-  return 0\n-}\n-\n # Initialize 'dg'.\n dg-init\n "}, {"sha": "4a539a5a4bdd851a33fcb6b653741c4411450428", "filename": "gcc/testsuite/g++.dg/special/initp1.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Finitp1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Finitp1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Finitp1.C?ref=fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "patch": "@@ -1,5 +1,4 @@\n-/* This doesn't work on solaris2 for reasons described in PR 6482.  */\n-/* { dg-do run { xfail *-*-solaris2* } } */\n+/* { dg-do run { target init_priority } } */\n #include <stdlib.h>\n \n class Two {"}, {"sha": "bd24961e46bb96546032eb303aae5eb7d488ede5", "filename": "gcc/testsuite/g++.dg/special/initpri1.C", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Finitpri1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Finitpri1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Finitpri1.C?ref=fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run { target init_priority } } */\n+\n+extern \"C\" void abort ();\n+\n+int i;\n+int j;\n+\n+void c1() __attribute__((constructor (500)));\n+void c2() __attribute__((constructor (700)));\n+void c3() __attribute__((constructor (600)));\n+\n+void c1() {\n+  if (i++ != 0)\n+    abort ();\n+}\n+\n+void c2() {\n+  if (i++ != 2)\n+    abort ();\n+}\n+\n+void c3() {\n+  if (i++ != 1)\n+    abort ();\n+}\n+\n+void d1() __attribute__((destructor (500)));\n+void d2() __attribute__((destructor (700)));\n+void d3() __attribute__((destructor (600)));\n+\n+void d1() {\n+  if (--i != 0)\n+    abort ();\n+}\n+\n+void d2() {\n+  if (--i != 2)\n+    abort ();\n+}\n+\n+void d3() {\n+  if (j != 2)\n+    abort ();\n+  if (--i != 1)\n+    abort ();\n+}\n+\n+void cd4() __attribute__((constructor (800), destructor (800)));\n+\n+void cd4() {\n+  if (i != 3)\n+    abort ();\n+  ++j;\n+}\n+\n+int main () {\n+  if (i != 3)\n+    return 1;\n+  if (j != 1)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "100027430a587642e823a0324c0c164ba81d4823", "filename": "gcc/testsuite/g++.dg/special/initpri2.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Finitpri2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Finitpri2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Finitpri2.C?ref=fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target init_priority } } */\n+\n+/* Priorities must be in the range [0, 65535].  */\n+void c1()\n+     __attribute__((constructor (-1))); /* { dg-error \"priorities\" } */\n+void c2() \n+     __attribute__((constructor (65536))); /* { dg-error \"priorities\" } */\n+void d1() \n+     __attribute__((destructor (-1))); /* { dg-error \"priorities\" } */\n+void d2() \n+     __attribute__((destructor (65536))); /* { dg-error \"priorities\" } */\n+\n+/* Priorities 0-100 are reserved for system libraries.  */\n+void c3() \n+     __attribute__((constructor (50))); /* { dg-warning \"reserved\" } */\n+void d3() \n+     __attribute__((constructor (50))); /* { dg-warning \"reserved\" } */\n+"}, {"sha": "794ea2b9e0bf566a5404207b51df9c8bda772b3a", "filename": "gcc/testsuite/gcc.dg/initpri1.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftestsuite%2Fgcc.dg%2Finitpri1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftestsuite%2Fgcc.dg%2Finitpri1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finitpri1.c?ref=fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run { target init_priority } } */\n+\n+extern void abort ();\n+\n+int i;\n+int j;\n+\n+void c1() __attribute__((constructor (500)));\n+void c2() __attribute__((constructor (700)));\n+void c3() __attribute__((constructor (600)));\n+\n+void c1() {\n+  if (i++ != 0)\n+    abort ();\n+}\n+\n+void c2() {\n+  if (i++ != 2)\n+    abort ();\n+}\n+\n+void c3() {\n+  if (i++ != 1)\n+    abort ();\n+}\n+\n+void d1() __attribute__((destructor (500)));\n+void d2() __attribute__((destructor (700)));\n+void d3() __attribute__((destructor (600)));\n+\n+void d1() {\n+  if (--i != 0)\n+    abort ();\n+}\n+\n+void d2() {\n+  if (--i != 2)\n+    abort ();\n+}\n+\n+void d3() {\n+  if (j != 2)\n+    abort ();\n+  if (--i != 1)\n+    abort ();\n+}\n+\n+void cd4() __attribute__((constructor (800), destructor (800)));\n+\n+void cd4() {\n+  if (i != 3)\n+    abort ();\n+  ++j;\n+}\n+\n+int main () {\n+  if (i != 3)\n+    return 1;\n+  if (j != 1)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "100027430a587642e823a0324c0c164ba81d4823", "filename": "gcc/testsuite/gcc.dg/initpri2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftestsuite%2Fgcc.dg%2Finitpri2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftestsuite%2Fgcc.dg%2Finitpri2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finitpri2.c?ref=fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target init_priority } } */\n+\n+/* Priorities must be in the range [0, 65535].  */\n+void c1()\n+     __attribute__((constructor (-1))); /* { dg-error \"priorities\" } */\n+void c2() \n+     __attribute__((constructor (65536))); /* { dg-error \"priorities\" } */\n+void d1() \n+     __attribute__((destructor (-1))); /* { dg-error \"priorities\" } */\n+void d2() \n+     __attribute__((destructor (65536))); /* { dg-error \"priorities\" } */\n+\n+/* Priorities 0-100 are reserved for system libraries.  */\n+void c3() \n+     __attribute__((constructor (50))); /* { dg-warning \"reserved\" } */\n+void d3() \n+     __attribute__((constructor (50))); /* { dg-warning \"reserved\" } */\n+"}, {"sha": "2682f8f4b7d9e1fec9f067b298454a7603f02770", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "patch": "@@ -2089,6 +2089,23 @@ proc check_effective_target_dummy_wcsftime {} {\n     return [check_effective_target_uclibc]\n }\n \n+# Return 1 if constructors with initialization priority arguments are\n+# supposed on this target.\n+\n+proc check_effective_target_init_priority {} {\n+    # On Solaris2, initialization priorities are only supported with\n+    # GNU ld, but the compiler accepts them even when using Sun ld.\n+    # For more information, see PR 6482.\n+    if { [istarget *-solaris2*] } {\n+\treturn 1\n+    }\n+\n+    return [check_no_compiler_messages init_priority assembly \"\n+\tvoid f() __attribute__((constructor (1000)));\n+\tvoid f() \\{\\}\n+    \"]\n+}\n+\n # Return 1 if the target matches the effective target 'arg', 0 otherwise.\n # This can be used with any check_* proc that takes no argument and\n # returns only 1 or 0.  It could be used with check_* procs that take"}, {"sha": "202a69e2c8f03ce859d9d577b6494c05f9be427c", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "patch": "@@ -4606,7 +4606,7 @@ move_stmt_r (tree *tp, int *walk_subtrees, void *data)\n \t  if (p->new_label_map)\n \t    {\n \t      struct tree_map in, *out;\n-\t      in.from = t;\n+\t      in.base.from = t;\n \t      out = htab_find_with_hash (p->new_label_map, &in, DECL_UID (t));\n \t      if (out)\n \t\t*tp = t = out->to;\n@@ -4795,7 +4795,7 @@ new_label_mapper (tree decl, void *data)\n \n   m = xmalloc (sizeof (struct tree_map));\n   m->hash = DECL_UID (decl);\n-  m->from = decl;\n+  m->base.from = decl;\n   m->to = create_artificial_label ();\n   LABEL_DECL_UID (m->to) = LABEL_DECL_UID (decl);\n "}, {"sha": "f031bf0102fdb47579e21497af0a75e91df3b77e", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "patch": "@@ -330,7 +330,7 @@ static tree\n heapvar_lookup (tree from)\n {\n   struct tree_map *h, in;\n-  in.from = from;\n+  in.base.from = from;\n \n   h = htab_find_with_hash (heapvar_for_stmt, &in, htab_hash_pointer (from));\n   if (h)\n@@ -349,7 +349,7 @@ heapvar_insert (tree from, tree to)\n \n   h = ggc_alloc (sizeof (struct tree_map));\n   h->hash = htab_hash_pointer (from);\n-  h->from = from;\n+  h->base.from = from;\n   h->to = to;\n   loc = htab_find_slot_with_hash (heapvar_for_stmt, h, h->hash, INSERT);\n   *(struct tree_map **) loc = h;"}, {"sha": "f941892815d6483069eef76128df2e263d0b7d96", "filename": "gcc/tree.c", "status": "modified", "additions": 81, "deletions": 53, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "patch": "@@ -146,7 +146,8 @@ static GTY ((if_marked (\"tree_map_marked_p\"), param_is (struct tree_map)))\n static GTY ((if_marked (\"tree_map_marked_p\"), param_is (struct tree_map))) \n      htab_t value_expr_for_decl;\n \n-static GTY ((if_marked (\"tree_int_map_marked_p\"), param_is (struct tree_int_map)))\n+static GTY ((if_marked (\"tree_priority_map_marked_p\"), \n+\t     param_is (struct tree_priority_map)))\n   htab_t init_priority_for_decl;\n \n static GTY ((if_marked (\"tree_map_marked_p\"), param_is (struct tree_map)))\n@@ -220,8 +221,8 @@ init_ttree (void)\n \n   value_expr_for_decl = htab_create_ggc (512, tree_map_hash,\n \t\t\t\t\t tree_map_eq, 0);\n-  init_priority_for_decl = htab_create_ggc (512, tree_int_map_hash,\n-\t\t\t\t\t    tree_int_map_eq, 0);\n+  init_priority_for_decl = htab_create_ggc (512, tree_priority_map_hash,\n+\t\t\t\t\t    tree_priority_map_eq, 0);\n   restrict_base_for_decl = htab_create_ggc (256, tree_map_hash,\n \t\t\t\t\t    tree_map_eq, 0);\n \n@@ -4195,89 +4196,116 @@ build_variant_type_copy (tree type)\n /* Return true if the from tree in both tree maps are equal.  */\n \n int\n-tree_map_eq (const void *va, const void *vb)\n+tree_map_base_eq (const void *va, const void *vb)\n {\n-  const struct tree_map  *a = va, *b = vb;\n+  const struct tree_map_base  *a = va, *b = vb;\n   return (a->from == b->from);\n }\n \n /* Hash a from tree in a tree_map.  */\n \n unsigned int\n-tree_map_hash (const void *item)\n+tree_map_base_hash (const void *item)\n {\n-  return (((const struct tree_map *) item)->hash);\n+  return htab_hash_pointer (((const struct tree_map_base *)item)->from);\n }\n \n /* Return true if this tree map structure is marked for garbage collection\n    purposes.  We simply return true if the from tree is marked, so that this\n    structure goes away when the from tree goes away.  */\n \n int\n-tree_map_marked_p (const void *p)\n+tree_map_base_marked_p (const void *p)\n {\n-  tree from = ((struct tree_map *) p)->from;\n+  return ggc_marked_p (((struct tree_map_base *) p)->from);\n+}\n \n-  return ggc_marked_p (from);\n+unsigned int\n+tree_map_hash (const void *item)\n+{\n+  return (((const struct tree_map *) item)->hash);\n }\n \n-/* Return true if the trees in the tree_int_map *'s VA and VB are equal.  */\n+/* Return the initialization priority for DECL.  */\n \n-int\n-tree_int_map_eq (const void *va, const void *vb)\n+priority_type\n+decl_init_priority_lookup (tree decl)\n {\n-  const struct tree_int_map  *a = va, *b = vb;\n-  return (a->from == b->from);\n+  struct tree_priority_map *h;\n+  struct tree_map_base in;\n+\n+  gcc_assert (VAR_OR_FUNCTION_DECL_P (decl));\n+  gcc_assert (TREE_CODE (decl) == VAR_DECL\n+\t      ? DECL_HAS_INIT_PRIORITY_P (decl)\n+\t      : DECL_STATIC_CONSTRUCTOR (decl));\n+  in.from = decl;\n+  h = htab_find (init_priority_for_decl, &in);\n+  return h ? h->init : DEFAULT_INIT_PRIORITY;\n }\n \n-/* Hash a from tree in the tree_int_map * ITEM.  */\n+/* Return the finalization priority for DECL.  */\n \n-unsigned int\n-tree_int_map_hash (const void *item)\n+priority_type\n+decl_fini_priority_lookup (tree decl)\n {\n-  return htab_hash_pointer (((const struct tree_int_map *)item)->from);\n+  struct tree_priority_map *h;\n+  struct tree_map_base in;\n+\n+  gcc_assert (TREE_CODE (decl) == FUNCTION_DECL);\n+  gcc_assert (DECL_STATIC_DESTRUCTOR (decl));\n+  in.from = decl;\n+  h = htab_find (init_priority_for_decl, &in);\n+  return h ? h->fini : DEFAULT_INIT_PRIORITY;\n }\n \n-/* Return true if this tree int map structure is marked for garbage collection\n-   purposes.  We simply return true if the from tree_int_map *P's from tree is marked, so that this\n-   structure goes away when the from tree goes away.  */\n+/* Return the initialization and finalization priority information for\n+   DECL.  If there is no previous priority information, a freshly\n+   allocated structure is returned.  */\n \n-int\n-tree_int_map_marked_p (const void *p)\n+static struct tree_priority_map *\n+decl_priority_info (tree decl)\n {\n-  tree from = ((struct tree_int_map *) p)->from;\n+  struct tree_priority_map in;\n+  struct tree_priority_map *h;\n+  void **loc;\n+\n+  in.base.from = decl;\n+  loc = htab_find_slot (init_priority_for_decl, &in, INSERT);\n+  h = *loc;\n+  if (!h)\n+    {\n+      h = GGC_CNEW (struct tree_priority_map);\n+      *loc = h;\n+      h->base.from = decl;\n+      h->init = DEFAULT_INIT_PRIORITY;\n+      h->fini = DEFAULT_INIT_PRIORITY;\n+    }\n \n-  return ggc_marked_p (from);\n+  return h;\n }\n-/* Lookup an init priority for FROM, and return it if we find one.  */\n \n-unsigned short\n-decl_init_priority_lookup (tree from)\n+/* Set the initialization priority for DECL to PRIORITY.  */\n+\n+void\n+decl_init_priority_insert (tree decl, priority_type priority)\n {\n-  struct tree_int_map *h, in;\n-  in.from = from;\n+  struct tree_priority_map *h;\n \n-  h = htab_find_with_hash (init_priority_for_decl, \n-\t\t\t   &in, htab_hash_pointer (from));\n-  if (h)\n-    return h->to;\n-  return 0;\n-}\n+  gcc_assert (VAR_OR_FUNCTION_DECL_P (decl));\n+  h = decl_priority_info (decl);\n+  h->init = priority;\n+}  \n \n-/* Insert a mapping FROM->TO in the init priority hashtable.  */\n+/* Set the finalization priority for DECL to PRIORITY.  */\n \n void\n-decl_init_priority_insert (tree from, unsigned short to)\n+decl_fini_priority_insert (tree decl, priority_type priority)\n {\n-  struct tree_int_map *h;\n-  void **loc;\n+  struct tree_priority_map *h;\n \n-  h = ggc_alloc (sizeof (struct tree_int_map));\n-  h->from = from;\n-  h->to = to;\n-  loc = htab_find_slot_with_hash (init_priority_for_decl, h, \n-\t\t\t\t  htab_hash_pointer (from), INSERT);\n-  *(struct tree_int_map **) loc = h;\n+  gcc_assert (TREE_CODE (decl) == FUNCTION_DECL);\n+  h = decl_priority_info (decl);\n+  h->fini = priority;\n }  \n \n /* Look up a restrict qualified base decl for FROM.  */\n@@ -4288,7 +4316,7 @@ decl_restrict_base_lookup (tree from)\n   struct tree_map *h;\n   struct tree_map in;\n \n-  in.from = from;\n+  in.base.from = from;\n   h = htab_find_with_hash (restrict_base_for_decl, &in,\n \t\t\t   htab_hash_pointer (from));\n   return h ? h->to : NULL_TREE;\n@@ -4304,7 +4332,7 @@ decl_restrict_base_insert (tree from, tree to)\n \n   h = ggc_alloc (sizeof (struct tree_map));\n   h->hash = htab_hash_pointer (from);\n-  h->from = from;\n+  h->base.from = from;\n   h->to = to;\n   loc = htab_find_slot_with_hash (restrict_base_for_decl, h, h->hash, INSERT);\n   *(struct tree_map **) loc = h;\n@@ -4352,7 +4380,7 @@ tree\n decl_debug_expr_lookup (tree from)\n {\n   struct tree_map *h, in;\n-  in.from = from;\n+  in.base.from = from;\n \n   h = htab_find_with_hash (debug_expr_for_decl, &in, htab_hash_pointer (from));\n   if (h)\n@@ -4370,7 +4398,7 @@ decl_debug_expr_insert (tree from, tree to)\n \n   h = ggc_alloc (sizeof (struct tree_map));\n   h->hash = htab_hash_pointer (from);\n-  h->from = from;\n+  h->base.from = from;\n   h->to = to;\n   loc = htab_find_slot_with_hash (debug_expr_for_decl, h, h->hash, INSERT);\n   *(struct tree_map **) loc = h;\n@@ -4382,7 +4410,7 @@ tree\n decl_value_expr_lookup (tree from)\n {\n   struct tree_map *h, in;\n-  in.from = from;\n+  in.base.from = from;\n \n   h = htab_find_with_hash (value_expr_for_decl, &in, htab_hash_pointer (from));\n   if (h)\n@@ -4400,7 +4428,7 @@ decl_value_expr_insert (tree from, tree to)\n \n   h = ggc_alloc (sizeof (struct tree_map));\n   h->hash = htab_hash_pointer (from);\n-  h->from = from;\n+  h->base.from = from;\n   h->to = to;\n   loc = htab_find_slot_with_hash (value_expr_for_decl, h, h->hash, INSERT);\n   *(struct tree_map **) loc = h;"}, {"sha": "1e2ecd070ef8b84c232937520cb4bf4bb73761cb", "filename": "gcc/tree.h", "status": "modified", "additions": 68, "deletions": 22, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "patch": "@@ -2599,13 +2599,6 @@ struct tree_memory_partition_tag GTY(())\n    a C99 \"extern inline\" function.  */\n #define DECL_EXTERNAL(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.decl_flag_2)\n \n-/* In a VAR_DECL for a RECORD_TYPE, sets number for non-init_priority\n-   initializations.  */\n-#define DEFAULT_INIT_PRIORITY 65535\n-#define MAX_INIT_PRIORITY 65535\n-#define MAX_RESERVED_INIT_PRIORITY 100\n-\n-\n /* Nonzero in a ..._DECL means this variable is ref'd from a nested function.\n    For VAR_DECL nodes, PARM_DECL nodes, and FUNCTION_DECL nodes.\n \n@@ -3065,20 +3058,46 @@ extern void decl_debug_expr_insert (tree, tree);\n #define SET_DECL_DEBUG_EXPR(NODE, VAL) \\\n   (decl_debug_expr_insert (VAR_DECL_CHECK (NODE), VAL))\n \n+/* An initializationp priority.  */\n+typedef unsigned short priority_type;\n \n-extern unsigned short decl_init_priority_lookup (tree);\n-extern void decl_init_priority_insert (tree, unsigned short);\n-\n-/* In a non-local VAR_DECL with static storage duration, this is the\n-   initialization priority.  If this value is zero, the NODE will be\n-   initialized at the DEFAULT_INIT_PRIORITY.  Only used by C++ FE*/\n+extern priority_type decl_init_priority_lookup (tree);\n+extern priority_type decl_fini_priority_lookup (tree);\n+extern void decl_init_priority_insert (tree, priority_type);\n+extern void decl_fini_priority_insert (tree, priority_type);\n \n+/* In a non-local VAR_DECL with static storage duration, true if the\n+   variable has an initialization priority.  If false, the variable\n+   will be initialized at the DEFAULT_INIT_PRIORITY.  */\n #define DECL_HAS_INIT_PRIORITY_P(NODE) \\\n   (VAR_DECL_CHECK (NODE)->decl_with_vis.init_priority_p)\n+\n+/* For a VAR_DECL or FUNCTION_DECL with DECL_HAS_INIT_PRIORITY_P set,\n+   the initialization priority of NODE.  */\n #define DECL_INIT_PRIORITY(NODE) \\\n-  (decl_init_priority_lookup (VAR_DECL_CHECK (NODE)))\n+  (decl_init_priority_lookup (NODE))\n+/* Set the initialization priority for NODE to VAL.  */\n #define SET_DECL_INIT_PRIORITY(NODE, VAL) \\\n-  (decl_init_priority_insert (VAR_DECL_CHECK (NODE), VAL))\n+  (decl_init_priority_insert (NODE, VAL))\n+\n+/* For a FUNCTION_DECL with DECL_HAS_INIT_PRIORITY_P set, the\n+   finalization priority of NODE.  */\n+#define DECL_FINI_PRIORITY(NODE) \\\n+  (decl_fini_priority_lookup (NODE))\n+/* Set the finalization priority for NODE to VAL.  */\n+#define SET_DECL_FINI_PRIORITY(NODE, VAL) \\\n+  (decl_fini_priority_insert (NODE, VAL))\n+\n+/* The initialization priority for entities for which no explicit\n+   initialization priority has been specified.  */\n+#define DEFAULT_INIT_PRIORITY 65535\n+\n+/* The maximum allowed initialization priority.  */\n+#define MAX_INIT_PRIORITY 65535\n+\n+/* The largest priority value reserved for use by system runtime\n+   libraries.  */\n+#define MAX_RESERVED_INIT_PRIORITY 100\n \n /* In a VAR_DECL, the model to use if the data should be allocated from\n    thread-local storage.  */\n@@ -4800,26 +4819,53 @@ extern tree get_base_address (tree t);\n extern void vect_set_verbosity_level (const char *);\n \n /* In tree.c.  */\n+\n+struct tree_map_base GTY(())\n+{\n+  tree from;\n+};\n+\n+extern int tree_map_base_eq (const void *, const void *);\n+extern unsigned int tree_map_base_hash (const void *);\n+extern int tree_map_base_marked_p (const void *);\n+\n+/* Map from a tree to another tree.  */\n+\n struct tree_map GTY(())\n {\n+  struct tree_map_base base;\n   unsigned int hash;\n-  tree from;\n   tree to;\n };\n \n+#define tree_map_eq tree_map_base_eq\n extern unsigned int tree_map_hash (const void *);\n-extern int tree_map_marked_p (const void *);\n-extern int tree_map_eq (const void *, const void *);\n+#define tree_map_marked_p tree_map_base_marked_p\n+\n+/* Map from a tree to an int.  */\n \n struct tree_int_map GTY(())\n {\n-  tree from;\n+  struct tree_map_base base;\n   unsigned int to;\n };\n \n-extern unsigned int tree_int_map_hash (const void *);\n-extern int tree_int_map_eq (const void *, const void *);\n-extern int tree_int_map_marked_p (const void *);\n+#define tree_int_map_eq tree_map_base_eq\n+#define tree_int_map_hash tree_map_base_hash\n+#define tree_int_map_marked_p tree_map_base_marked_p\n+\n+/* Map from a tree to initialization/finalization priorities.  */\n+\n+struct tree_priority_map GTY(())\n+{\n+  struct tree_map_base base;\n+  priority_type init;\n+  priority_type fini;\n+};\n+\n+#define tree_priority_map_eq tree_map_base_eq\n+#define tree_priority_map_hash tree_map_base_hash\n+#define tree_priority_map_marked_p tree_map_base_marked_p\n \n /* In tree-ssa-address.c.  */\n extern tree tree_mem_ref_addr (tree, tree);"}, {"sha": "6c2214592853de5f77d7c58bfacf322d7563a083", "filename": "gcc/varasm.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8600f9c12ccb952cb38fbad4a2f34e0d958473/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=fc8600f9c12ccb952cb38fbad4a2f34e0d958473", "patch": "@@ -343,7 +343,7 @@ emutls_decl (tree decl)\n      of the decl's pointer.  In emutls_finish we iterate through the\n      hash table, and we want this traversal to be predictable.  */\n   in.hash = htab_hash_string (IDENTIFIER_POINTER (name));\n-  in.from = decl;\n+  in.base.from = decl;\n   loc = htab_find_slot_with_hash (emutls_htab, &in, in.hash, INSERT);\n   h = *loc;\n   if (h != NULL)\n@@ -355,7 +355,7 @@ emutls_decl (tree decl)\n \n       h = ggc_alloc (sizeof (struct tree_map));\n       h->hash = in.hash;\n-      h->from = decl;\n+      h->base.from = decl;\n       h->to = to;\n       *(struct tree_map **) loc = h;\n \n@@ -394,9 +394,9 @@ emutls_common_1 (void **loc, void *xstmts)\n   tree args, x, *pstmts = (tree *) xstmts;\n   tree word_type_node;\n \n-  if (! DECL_COMMON (h->from)\n-      || (DECL_INITIAL (h->from)\n-\t  && DECL_INITIAL (h->from) != error_mark_node))\n+  if (! DECL_COMMON (h->base.from)\n+      || (DECL_INITIAL (h->base.from)\n+\t  && DECL_INITIAL (h->base.from) != error_mark_node))\n     return 1;\n \n   word_type_node = lang_hooks.types.type_for_mode (word_mode, 1);\n@@ -407,9 +407,9 @@ emutls_common_1 (void **loc, void *xstmts)\n      output.  */\n   x = null_pointer_node;\n   args = tree_cons (NULL, x, NULL);\n-  x = build_int_cst (word_type_node, DECL_ALIGN_UNIT (h->from));\n+  x = build_int_cst (word_type_node, DECL_ALIGN_UNIT (h->base.from));\n   args = tree_cons (NULL, x, args);\n-  x = fold_convert (word_type_node, DECL_SIZE_UNIT (h->from));\n+  x = fold_convert (word_type_node, DECL_SIZE_UNIT (h->base.from));\n   args = tree_cons (NULL, x, args);\n   x = build_fold_addr_expr (h->to);\n   args = tree_cons (NULL, x, args);"}]}